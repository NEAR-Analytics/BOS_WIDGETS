{"tx_hash": "5mxEwNJcZuQ34UBuC5zroGJMeCxfzf8DaV8H8dvfk4Sn", "action_id_social": "9m4hsqz9u7wU4MU6uu5PgcyxGeEhBopbyqjKeTazR9mH-0-widget", "block_id": 111583123, "block_timestamp": "2024-01-29T05:23:35.916Z", "signer_id": "devs.near", "widget_name": "modal.create", "source_code": "const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"Social DB\",\n    value: null,\n  },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n  },\n  {\n    title: \"Sputnik DAO\",\n    value: \"devs.near/widget/adapter.sputnik-dao\",\n  },\n  // {\n  //   title: \"GitHub\",\n  //   value: \"hack.near/widget/adapter.github\",\n  // },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\nconst defaultAdapter = adapters[0];\n\nconst { creatorId } = props;\n\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [filename, setFilename] = useState(props.filename ?? \"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\nconst [type, setType] = useState(props.type ?? \"document\");\nconst [path, setPath] = useState(\n  props.path ?? `${context.accountId}/every/document/test`\n);\n\nconst socialDbAdapter = {\n  get: (path, blockHeight) => {\n    if (!path) console.log(\"path not provided\") && null;\n    if (!blockHeight) blockHeight = \"final\";\n    return Social.get(path, blockHeight);\n  },\n  create: (v, path, type) => {\n    const parts = path.split(\"/\");\n    let nestedObject = {};\n    let currentLevel = nestedObject;\n\n    for (let i = 1; i < parts.length - 1; i++) {\n      const part = parts[i];\n      currentLevel[part] = {};\n      currentLevel = currentLevel[part];\n    }\n\n    currentLevel[parts[parts.length - 1]] = {\n      \"\": v,\n      metadata: {\n        type: type,\n      },\n    };\n\n    return Social.set(nestedObject, {\n      force: \"true\",\n      onCommit: (v) => {\n        console.log(v);\n      },\n      onCancel: (v) => {\n        console.log(v);\n      },\n    });\n  },\n};\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst handleCreate = () => {\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = adapter ? VM.require(adapter) : socialDbAdapter;\n  console.log(\"creating with\", adapter);\n  // const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json, path, type);\n    // .then((reference) => {\n    //   // now we have a reference to the data\n    //   // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\n    //   const thingId = filename ?? generateUID();\n\n    //   const hyperfile = {\n    //     [props.type]: {\n    //       // which we store in the social contract\n    //       [thingId]: {\n    //         \"\": JSON.stringify({\n    //           fileformat: `${props.type}.${source}`,\n    //           source: source,\n    //           adapter: adapter,\n    //           reference: reference,\n    //         }),\n    //         metadata: {\n    //           name: name,\n    //           description: description,\n    //           type: props.type,\n    //         },\n    //       },\n    //     },\n    //   };\n\n    //   if (creatorId !== context.accountId) {\n    //     // handle request merge\n    //     hyperfile.index = {\n    //       notify: JSON.stringify({\n    //         key: creatorId,\n    //         value: {\n    //           type: \"request\",\n    //           data: {\n    //             type: \"merge\",\n    //             upstream: `${creatorId}/${props.type}/${props.filename}`,\n    //             origin: `${context.accountId}/${props.type}/${thingId}`,\n    //           },\n    //         },\n    //       }),\n    //     };\n    //     hyperfile[props.type][thingId].metadata = {\n    //       ...hyperfile[props.type][thingId].metadata,\n    //       upstream: `${creatorId}/${props.type}/${props.filename}`,\n    //     };\n    //     // I want to make a request to merge\n    //     // set upstream and downstream\n    //   }\n\n    //   // sometimes we're not logged in, so it doesn't do anything!\n    //   Social.set(hyperfile, { force: true });\n    // });\n  }\n};\n\nreturn (\n  <Wrapper>\n    <h3>create</h3>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n\n    <TabContent>\n      {activeTab === \"data\" && (\n        <Form>\n          <FormGroup>\n            <Label>path</Label>\n            <Input\n              type=\"text\"\n              value={path}\n              disabled // temp\n              onChange={(e) => setPath(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>type</Label>\n            <Input\n              type=\"text\"\n              value={type}\n              disabled // temp\n              onChange={(e) => setType(e.target.value)}\n            />\n          </FormGroup>\n          <textarea\n            className=\"form-control mb-3\"\n            rows={5}\n            value={json}\n            onChange={(e) => setJson(e.target.value)}\n          />\n          <FormGroup>\n            <Label>adapter</Label>\n            <Select\n              value={adapter}\n              onChange={(e) => setAdapter(e.target.value)}\n            >\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <TabContent>\n      {activeTab === \"metadata\" && (\n        <Form>\n          <FormGroup>\n            <Label>name</Label>\n            <Input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>description</Label>\n            <textarea\n              className=\"form-control mb-3\"\n              rows={5}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <FormGroup>\n      <button className=\"btn btn-success mb-1\" onClick={handleCreate}>\n        Create\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devs.near/widget/modal.create", "fact_widget_deployments_id": "9ede4e87f6ca9015b44904a0a5bdf735", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}