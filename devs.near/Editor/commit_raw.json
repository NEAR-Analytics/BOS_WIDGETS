{"tx_hash": "5FUoxDbmPJCRo6g4UcyVrTa7dmW9dA5SBd6dYev8qJ3V", "action_id_social": "96cXEmfYEnYBsNk5isHC63XunCnigvV6LhJANSx8grRk-0-widget", "block_id": 116868634, "block_timestamp": "2024-04-15T02:36:24.635Z", "signer_id": "devs.near", "widget_name": "Editor", "source_code": "const { Router } = VM.require(\"devs.near/widget/Router\") || {\n  Router: () => <></>,\n};\nconst { href } = VM.require(\"buildhub.near/widget/lib.url\") || {\n  href: () => \"/\",\n};\nconst Root = styled.div``;\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\nconst App = ({\n  routes,\n  Layout,\n  basePath,\n  page,\n  defaultPage,\n  debug,\n  depth,\n  env,\n  routerParam,\n  ...passProps\n}) => {\n  if (!page) page = Object.keys(routes)[0] || defaultPage;\n  function navigate({ param, to }) {\n    if (!param) param = routerParam ?? \"page\";\n    if (to === \"/\") to = defaultPage;\n    return href({\n      widgetSrc: basePath,\n      params: {\n        [param]: to,\n        env: env ?? undefined,\n      },\n    });\n  }\n  return (\n    <Root key={basePath}>\n      <Container>\n        <Layout\n          page={page}\n          routes={routes}\n          navigate={navigate}\n          {...routerProps}\n          {...props}\n          Outlet={(p) => (\n            <Router\n              debug={debug}\n              basePath={basePath}\n              active={passProps[routerParam ?? \"page\"] ?? page}\n              routes={routes}\n              passProps={p}\n              routerParam={routerParam}\n              depth={depth ?? 1}\n              PageNotFound={() => <p>404 Not Found</p>} // routes[404]\n            />\n          )}\n        />\n      </Container>\n    </Root>\n  );\n};\nreturn { App };\npath\");\nif (\n  draft === null ||\n  viewMode === null ||\n  defaultPreview === null ||\n  defaultEditor === null ||\n  defaultLanguage === null ||\n  defaultType === null ||\n  defaultPath === null\n) {\n  return \"\";\n}\nconst [content, setContent] = useState(draft);\nconst [viewMode, setViewMode] = useState(defaultViewMode || \"single\"); // 'single' or 'split'\nconst [showPreview, setShowPreview] = useState(defaultPreview || false);\nconst [type, setType] = useState(defaultType || \"\");\nconst [editor, setEditor] = useState(defaultEditor || \"\");\nconst [language, setLanguage] = useState(defaultLanguage || \"md\");\nconst [path, setPath] = useState(defaultPath || \"\");\nconst handleToggleViewMode = () => {\n  const newMode = viewMode === \"single\" ? \"split\" : \"single\";\n  set(\"viewMode\", newMode);\n  setViewMode(newMode);\n  set(\"preview\", false);\n  setShowPreview(false);\n};\nconst handleTogglePreview = () => {\n  set(\"preview\", !showPreview);\n  setShowPreview(!showPreview);\n};\nconst editors = [\n  {\n    value: \"\",\n    label: \"default textarea\",\n  },\n  {\n    value: \"devs.near/widget/markdown.SimpleMDE\",\n    label: \"SimpleMDE\",\n  },\n  {\n    value: \"devs.near/widget/markdown.MarkdownEditorIframe\",\n    label: \"MarkdownEditorIframe\",\n  },\n];\nconst languages = [\n  {\n    value: \"md\",\n    label: \"Markdown\",\n  },\n  {\n    value: \"json\",\n    label: \"JSON\",\n  },\n];\nconst types = [\n  {\n    value: \"document\",\n    label: \"Document\",\n  },\n];\nconst DefaultEditor = ({ value, onChange, onBlur }) => (\n  <EditorTextarea\n    placeholder=\"Start typing...\"\n    value={value}\n    onChange={onChange}\n    onBlur={onBlur}\n  />\n);\nreturn (\n  <PageContainer>\n    <Header>\n      <div>\n        {viewMode === \"single\" && (\n          <Button onClick={handleTogglePreview}>\n            {showPreview ? \"Hide Preview\" : \"Show Preview\"}\n          </Button>\n        )}\n        <Button onClick={handleToggleViewMode}>Toggle View Mode</Button>\n      </div>\n      <div>\n        <Widget\n          src=\"nui.sking.near/widget/Layout.Modal\"\n          props={{\n            open: state.saveModalOpen,\n            onOpenChange: (open) => {\n              State.update({\n                ...state,\n                saveModalOpen: open,\n              });\n            },\n            toggle: (\n              <Button className=\"classic\" disabled={!content}>\n                <>\n                  <i className={\"bi bi-save\"} />\n                  save\n                </>\n              </Button>\n            ),\n            content: (\n              <div className=\"w-100\">\n                <ModalBox>\n                  <Widget\n                    src={\"devs.near/widget/modal.create\"}\n                    props={{\n                      creatorId: context.accountId,\n                      path: path,\n                      setPath: (v) => {\n                        setPath(v);\n                        set(\"path\", v);\n                      },\n                      data: JSON.stringify({ body: content }),\n                      closeModal: () => {\n                        State.update({\n                          ...state,\n                          saveModalOpen: false,\n                        });\n                      },\n                    }}\n                  />\n                </ModalBox>\n              </div>\n            ),\n          }}\n        />\n        <Widget\n          src=\"nui.sking.near/widget/Layout.Modal\"\n          props={{\n            open: state.postModalOpen,\n            onOpenChange: (open) => {\n              State.update({\n                ...state,\n                postModalOpen: open,\n              });\n            },\n            toggle: (\n              <Button\n                className=\"classic\"\n                disabled={!path}\n              >\n                <>\n                  <i className={\"bi bi-send\"} />\n                  post\n                </>\n              </Button>\n            ),\n            content: (\n              <div className=\"w-100\">\n                <ModalBox>\n                  <Widget\n                    src={\"devs.near/widget/modal.post\"}\n                    props={{\n                      creatorId: context.accountId,\n                      path: path,\n                      type: type,\n                      closeModal: () => {\n                        State.update({\n                          ...state,\n                          postModalOpen: false,\n                        });\n                      },\n                    }}\n                  />\n                </ModalBox>\n              </div>\n            ),\n          }}\n        />\n      </div>\n    </Header>\n    <div>\n      <Label>type:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"type\", e.target.value);\n          setType(e.target.value);\n        }}\n      >\n        {types &&\n          types.map((it) => (\n            <Option value={it.value} selected={it.value === type}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n      <Label>editor:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"editor\", e.target.value);\n          setEditor(e.target.value);\n        }}\n      >\n        {editors &&\n          editors.map((it) => (\n            <Option value={it.value} selected={it.value === editor}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n      <Label>language:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"language\", e.target.value);\n          setLanguage(e.target.value);\n        }}\n      >\n        {languages &&\n          languages.map((it) => (\n            <Option value={it.value} selected={it.value === language}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n    </div>\n    {viewMode === \"single\" ? (\n      <EditorWrapper key={editor}>\n        {showPreview ? (\n          <MarkdownViewer value={content} />\n        ) : (\n          <>\n            {editor ? (\n              <Widget\n                src={editor}\n                props={{\n                  value: { content },\n                  onChange: (v) => {\n                    setContent(v);\n                    set(draftKey, v);\n                  },\n                }}\n              />\n            ) : (\n              <DefaultEditor\n                value={content}\n                onBlur={() => {\n                  let v;\n                  if (language === \"json\") {\n                    v = JSON.stringify(JSON.parse(content), null, 2);\n                    if (v !== \"null\") {\n                      setContent(v);\n                      set(draftKey, v);\n                    }\n                  }\n                }}\n                onChange={(e) => {\n                  let v = e.target.value;\n                  setContent(v);\n                  Storage.privateSet(draftKey, v);\n                }}\n              />\n            )}\n          </>\n        )}\n      </EditorWrapper>\n    ) : (\n      <div style={{ display: \"flex\", height: \"100%\" }}>\n        <EditorWrapper>\n          {editor ? (\n            <Widget\n              src={editor}\n              props={{\n                value: { content },\n                onChange: (v) => {\n                  setContent(v);\n                  set(draftKey, v);\n                },\n              }}\n            />\n          ) : (\n            <DefaultEditor\n              value={content}\n              onBlur={() => {\n                let v;\n                if (language === \"json\") {\n                  v = JSON.stringify(JSON.parse(content), null, 2);\n                  if (v !== \"null\") {\n                    setContent(v);\n                    set(draftKey, v);\n                  }\n                }\n              }}\n              onChange={(e) => {\n                let v = e.target.value;\n                setContent(v);\n                Storage.privateSet(draftKey, v);\n              }}\n            />\n          )}\n        </EditorWrapper>\n        <EditorWrapper>\n          <MarkdownViewer value={content} />\n        </EditorWrapper>\n      </div>\n    )}\n  </PageContainer>\n);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devs.near/widget/Editor", "fact_widget_deployments_id": "484afc2b52f2ed52e74c8383440654a7", "inserted_timestamp": "2024-04-15T04:38:44.803Z", "modified_timestamp": "2024-04-15T05:22:37.742Z", "__row_index": 0}