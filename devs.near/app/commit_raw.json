{"tx_hash": "9WdQva8esTqkAhaduDT6xyJSsBY889tjN9uxvYcqaNKt", "action_id_social": "AfD649AEkYshah38EUJacwZvX5zWxss7VSju6KADwyyR-0-widget", "block_id": 112732770, "block_timestamp": "2024-02-13T07:42:27.157Z", "signer_id": "devs.near", "widget_name": "app", "source_code": "const { MarkdownViewer } = VM.require(\"devs.near/widget/markdown.view\") || {\n  MarkdownViewer: () => null,\n};\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n\nconst Header = styled.div`\n  background-color: #333;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst EditorWrapper = styled.div`\n  flex: 1;\n  padding: 96px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst EditorTextarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n  border: none;\n  font-size: 16px;\n  resize: none;\n  outline: none;\n`;\n\nconst PreviewContent = styled.div`\n  color: #333;\n  font-size: 16px;\n`;\n\nconst Select = styled.select``;\n\nconst Option = styled.option``;\n\nconst Label = styled.label`\n  margin-right: 10px;\n`;\n\nconst Button = styled.button`\n  // this could take in theme\n  padding: 10px 20px;\n`;\n\nconst ModalBox = styled.div`\n  background-color: white;\n  min-width: 400px;\n  max-width: 600px;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  z-index: 1003;\n`;\n\nconst draftKey = \"draft\";\n\nconst set = (k, v) => {\n  Storage.privateSet(k, v);\n};\n\nconst get = (k) => {\n  return Storage.privateGet(k);\n};\n\nconst draft = get(draftKey);\nconst defaultViewMode = get(\"viewMode\");\nconst defaultPreview = get(\"preview\");\nconst defaultEditor = get(\"editor\");\nconst defaultLanguage = get(\"language\");\nconst defaultType = get(\"type\");\nconst defaultPath = get(\"path\");\n\nif (\n  draft === null ||\n  viewMode === null ||\n  defaultPreview === null ||\n  defaultEditor === null ||\n  defaultLanguage === null ||\n  defaultType === null ||\n  defaultPath === null\n) {\n  return \"\";\n}\n\nconst [content, setContent] = useState(draft);\nconst [viewMode, setViewMode] = useState(defaultViewMode || \"single\"); // 'single' or 'split'\nconst [showPreview, setShowPreview] = useState(defaultPreview || false);\nconst [type, setType] = useState(defaultType || \"\");\nconst [editor, setEditor] = useState(defaultEditor || \"\");\nconst [language, setLanguage] = useState(defaultLanguage || \"md\");\nconst [path, setPath] = useState(defaultPath || \"\");\n\nconst handleToggleViewMode = () => {\n  const newMode = viewMode === \"single\" ? \"split\" : \"single\";\n  set(\"viewMode\", newMode);\n  setViewMode(newMode);\n  set(\"preview\", false);\n  setShowPreview(false);\n};\n\nconst handleTogglePreview = () => {\n  set(\"preview\", !showPreview);\n  setShowPreview(!showPreview);\n};\n\nconst editors = [\n  {\n    value: \"\",\n    label: \"default textarea\",\n  },\n  {\n    value: \"devs.near/widget/markdown.SimpleMDE\",\n    label: \"SimpleMDE\",\n  },\n  {\n    value: \"devs.near/widget/markdown.MarkdownEditorIframe\",\n    label: \"MarkdownEditorIframe\",\n  },\n];\n\nconst languages = [\n  {\n    value: \"md\",\n    label: \"Markdown\",\n  },\n  {\n    value: \"json\",\n    label: \"JSON\",\n  },\n];\n\nconst types = [\n  {\n    value: \"document\",\n    label: \"Document\",\n  },\n];\n\nconst DefaultEditor = ({ value, onChange, onBlur }) => (\n  <EditorTextarea\n    placeholder=\"Start typing...\"\n    value={value}\n    onChange={onChange}\n    onBlur={onBlur}\n  />\n);\n\nreturn (\n  <PageContainer>\n    <Header>\n      <div>\n        {viewMode === \"single\" && (\n          <Button onClick={handleTogglePreview}>\n            {showPreview ? \"Hide Preview\" : \"Show Preview\"}\n          </Button>\n        )}\n        <Button onClick={handleToggleViewMode}>Toggle View Mode</Button>\n      </div>\n      <div>\n        <Widget\n          src=\"nui.sking.near/widget/Layout.Modal\"\n          props={{\n            open: state.saveModalOpen,\n            onOpenChange: (open) => {\n              State.update({\n                ...state,\n                saveModalOpen: open,\n              });\n            },\n            toggle: (\n              <Button className=\"classic\" disabled={!content}>\n                <>\n                  <i className={\"bi bi-save\"} />\n                  save\n                </>\n              </Button>\n            ),\n            content: (\n              <div className=\"w-100\">\n                <ModalBox>\n                  <Widget\n                    src={\"devs.near/widget/modal.create\"}\n                    props={{\n                      creatorId: context.accountId,\n                      path: path,\n                      setPath: (v) => {\n                        setPath(v);\n                        set(\"path\", v);\n                      },\n                      data: JSON.stringify({ body: content }),\n                      closeModal: () => {\n                        State.update({\n                          ...state,\n                          saveModalOpen: false,\n                        });\n                      },\n                    }}\n                  />\n                </ModalBox>\n              </div>\n            ),\n          }}\n        />\n        <Widget\n          src=\"nui.sking.near/widget/Layout.Modal\"\n          props={{\n            open: state.postModalOpen,\n            onOpenChange: (open) => {\n              State.update({\n                ...state,\n                postModalOpen: open,\n              });\n            },\n            toggle: (\n              <Button\n                className=\"classic\"\n                disabled={!path}\n              >\n                <>\n                  <i className={\"bi bi-send\"} />\n                  post\n                </>\n              </Button>\n            ),\n            content: (\n              <div className=\"w-100\">\n                <ModalBox>\n                  <Widget\n                    src={\"devs.near/widget/modal.post\"}\n                    props={{\n                      creatorId: context.accountId,\n                      path: path,\n                      type: type,\n                      closeModal: () => {\n                        State.update({\n                          ...state,\n                          postModalOpen: false,\n                        });\n                      },\n                    }}\n                  />\n                </ModalBox>\n              </div>\n            ),\n          }}\n        />\n      </div>\n    </Header>\n    <div>\n      <Label>type:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"type\", e.target.value);\n          setType(e.target.value);\n        }}\n      >\n        {types &&\n          types.map((it) => (\n            <Option value={it.value} selected={it.value === type}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n      <Label>editor:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"editor\", e.target.value);\n          setEditor(e.target.value);\n        }}\n      >\n        {editors &&\n          editors.map((it) => (\n            <Option value={it.value} selected={it.value === editor}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n      <Label>language:</Label>\n      <Select\n        onChange={(e) => {\n          set(\"language\", e.target.value);\n          setLanguage(e.target.value);\n        }}\n      >\n        {languages &&\n          languages.map((it) => (\n            <Option value={it.value} selected={it.value === language}>\n              {it.label}\n            </Option>\n          ))}\n      </Select>\n    </div>\n    {viewMode === \"single\" ? (\n      <EditorWrapper key={editor}>\n        {showPreview ? (\n          <MarkdownViewer value={content} />\n        ) : (\n          <>\n            {editor ? (\n              <Widget\n                src={editor}\n                props={{\n                  value: { content },\n                  onChange: (v) => {\n                    setContent(v);\n                    set(draftKey, v);\n                  },\n                }}\n              />\n            ) : (\n              <DefaultEditor\n                value={content}\n                onBlur={() => {\n                  let v;\n                  if (language === \"json\") {\n                    v = JSON.stringify(JSON.parse(content), null, 2);\n                    if (v !== \"null\") {\n                      setContent(v);\n                      set(draftKey, v);\n                    }\n                  }\n                }}\n                onChange={(e) => {\n                  let v = e.target.value;\n                  setContent(v);\n                  Storage.privateSet(draftKey, v);\n                }}\n              />\n            )}\n          </>\n        )}\n      </EditorWrapper>\n    ) : (\n      <div style={{ display: \"flex\", height: \"100%\" }}>\n        <EditorWrapper>\n          {editor ? (\n            <Widget\n              src={editor}\n              props={{\n                value: { content },\n                onChange: (v) => {\n                  setContent(v);\n                  set(draftKey, v);\n                },\n              }}\n            />\n          ) : (\n            <DefaultEditor\n              value={content}\n              onBlur={() => {\n                let v;\n                if (language === \"json\") {\n                  v = JSON.stringify(JSON.parse(content), null, 2);\n                  if (v !== \"null\") {\n                    setContent(v);\n                    set(draftKey, v);\n                  }\n                }\n              }}\n              onChange={(e) => {\n                let v = e.target.value;\n                setContent(v);\n                Storage.privateSet(draftKey, v);\n              }}\n            />\n          )}\n        </EditorWrapper>\n        <EditorWrapper>\n          <MarkdownViewer value={content} />\n        </EditorWrapper>\n      </div>\n    )}\n  </PageContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devs.near/widget/app", "fact_widget_deployments_id": "0b54695700d51c931d1d4005d6c8881c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 18}