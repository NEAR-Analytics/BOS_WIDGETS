{"tx_hash": "4GSoEyd5DUXif4m4yRt5AjtJKFjpotvusSWVK3X7eVVj", "action_id_social": "CCRhBrTrDQRpjDHqyEMheUKMX4tg225zqLhmNCyqZdRH-0-widget", "block_id": 123786770, "block_timestamp": "2024-07-19T20:28:54.854Z", "signer_id": "dev-queryapi.dataplatform.near", "widget_name": "QueryApi.Dashboard", "source_code": "const NoQueryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  height: 100%;\n`;\n\nconst NoQueryText = styled.p`\n  margin-top: 16px;\n  font-size: 16px;\n  font-family: 'Mona Sans', sans-serif;\n  color: #A1A09A;\n  text-align: center;\n`;\n\nconst NoQuerySVG = styled.svg`\n  height: 100px;\n  width: 100%;\n  color: #A1A09A;\n`;\n\nconst CheckboxContainer = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  font-size: 16px;\n  margin-bottom: 5px;\n`;\n\nconst SubCheckboxContainer = styled.div`\n  margin-left: 20px;\n  border-left: 2px solid #ccc;\n  padding-left: 10px;\n`;\n\nconst Checkbox = styled.input`\n  cursor: pointer;\n  width: 21.6px;\n  height: 21.6px;\n  border-radius: 5.4px;\n  border: 0.9px solid #DBDBD7;\n  padding: 5.4px;\n  background-color: #FDFDFC;\n  box-shadow: 0 0.9px 1.8px 0 rgba(0, 0, 0, 0.1);\n  vertical-align: middle;\n  margin-right: 7.2px;\n  outline: none;\n`;\n\n// TOP HALF\nconst Hero = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 349px;\n  width: 100%; \n  background: linear-gradient(\n    268.88deg, \n    rgba(2, 255, 133, 0.2) 1.75%, \n    rgba(2, 133, 255, 0.08) 54.6%, \n    rgba(2, 27, 255, 0.08) 84.31%\n  );\n  // , url('https://s3-alpha-sig.figma.com/img/f856/12b1/14c8f8fd2894d48314a47b98531b3002?Expires=1720396800&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=iC8KBVqIyZDHU2~xisqW3kuwC8nLk5POGZqHyVGNcAWcLwep3jEocxIrZI9hR5VUfiXwetmD6pXTdHxScqfIMjwvIsccAhEAkzD9t5xasMfuC5vHKel9t96-CGMeMikD3No92ObNZ-eGFdo2QAnrNVNxufsdwhYUKRbXuZSquC2A2qx9kzYxv7pyUjR3QGxg8UkMqhmZiKogoiLL~727aERO3PUIiSlMMH~kRFKVyK4UnJFERuroJ9L3EZTfgBG90EUM5MYTVqLIeeA1gWeYPkfTlYghAWwOx60B2wdLk5WTgmqytRZxbqsCiN8u92ZKZjmBzFcZZcWF9eONAqdDvA__');\n  // background-size: 100%;\n  // background-position: right;\n  // background-repeat: no-repeat;\n`;\n\nconst Headline = styled.h1`\n  font-family: 'Mona Sans', sans-serif;\n  font-weight: 700;\n  width: 369px;\n  font-size: 24px;\n  line-height: 31.2px;\n`;\n\nconst Subheadline = styled.p`\n  font-family: 'Mona Sans', sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 18.2px;\n  color: #717069;\n  letter-spacing: 1.5%;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n`;\n\nconst HeadlineContainer = styled.div`\n  width: 364px;\n  height: 193px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-right: 80px; /* Gap between HeadlineContainer and WidgetContainer */\n`;\n\nconst WidgetContainer = styled.div`\n  width: 301px;\n  height: 365px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 8.2px 19.92px 0 rgba(0, 0, 0, 0.1), 0 2.34px 2.34px 0 rgba(0, 0, 0, 0.15);\n  margin-top: 183px; /* Gap between WidgetContainer and HeadlineContainer */\n  background: #fff;\n  border-radius: 10px;\n`;\n\nconst SubContainer = styled.div`\n  width: 262.5px;\n  height: 330px; //270px later\n`;\n\nconst SubContainerTitle = styled.h2`\n  font-family: 'Product Sans', sans-serif;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 14.06px;\n  color: #7F7E77;\n  margin-bottom: 6px;\n`;\n\nconst MethodsText = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n  margin-bottom: 8px;\n`;\n\nconst MethodsSpan = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 11px;\n  font-weight: normal; \n  width: 23px; \n  height: 17px;\n  border-radius: 50px;\n  padding: 4px 6px;\n  background-color: #F3F3F2;\n`;\n\nconst SubContainerContent = styled.div`\n  height: 260px;\n`\nconst ScrollableDiv = styled.div`\nheight: 260px;\n\nwidth: 100%;\noverflow-x: auto; \noverflow-y: auto; \n\n\n&::-webkit-scrollbar {\n  height: 12px;\n}\n\n&::-webkit-scrollbar-thumb {\n  background-color: #888;\n  border-radius: 6px;\n}\n\n&::-webkit-scrollbar-thumb:hover {\n  background-color: #555; \n}\n\n&::-webkit-scrollbar-track {\n  background: #f1f1f1; \n  border-radius: 6px;\n}\n\n&::-webkit-scrollbar-track-piece {\n  background: #f9f9f9;\n}\n\nscrollbar-width: thin;\nscrollbar-color: #888 #f1f1f1; \n\n-ms-overflow-style: -ms-autohiding-scrollbar; \n\n-ms-scroll-chaining: none;\n-ms-scroll-snap-type: mandatory;\n-ms-scroll-snap-points-x: snapInterval(0%, 100%);\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  width: 364px;\n  height: 40px;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n  padding: 0;\n  overflow: hidden;\n`;\n\nconst StyledInput = styled.input` \n  flex: 1;\n  height: 100%;\n  border: none;\n  outline: none;\n  padding: 8px 12px;\n  border-radius: 6px 0 0 6px;\n`;\n\nconst ContractInputMessage = styled.p`\n  margin-top: 8px;\n  height: 25px;\n  font-size: 10px;\n  color: #D95C4A; \n  width: 100%;\n`;\n\nconst WarningSVG = styled.svg`\n  height: 16px;\n  width: 16px;\n  margin-right: 4px;\n`\n\nconst SearchButton = styled.button`\n  width: 84px;\n  background-color: #37CD83;\n  border: none;\n  border-radius: 0px 6px 6px 0px;\n  color: white;\n  cursor: pointer;\n  padding: 8px 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n//BOTTOM HALF\nconst Divider = styled.div`\n  height: 40px;\n  width: 100%;\n`\nconst ExploreIndexersContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%; \n  width: 100%; \n`;\n\n\nconst ExploreIndexersHeading = styled.h2`\n  font-family: 'Mona Sans', sans-serif;\n  font-size: 20px;\n  font-weight: 500;\n  line-height: 26px;\n  letter-spacing: 0.015em;\n  text-align: left;\n`;\n\nconst ExploreContent = styled.div`\n  width: 745px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`\n\nconst SearchIndexerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 269px;\n  height: 40px;\n  padding: 8px 12px;\n  gap: 8px;\n  border-radius: 50px;\n  border: 1px solid #E3E3E0;\n  background-color: white;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  border: none;\n  outline: none;\n  font-family: 'Mona Sans', sans-serif;\n  font-weight: 450;\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: 2%;\n  &::placeholder {\n    color: #a9a9a9; \n  }\n`;\n\nconst SearchIndexerButton = styled.button`\n  flex:1;  \n  border-radius: 50px;\n  background-color: #f0f0f0;\n  border: none;\n  color: black;\n  padding: 8px 31px;\n  cursor: pointer;\n  font-family: 'Mona Sans', sans-serif;\n  font-weight: 450;\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: 2%;\n`;\n\nconst MagnifyingGlass = styled.svg`\n  width: 16px;\n  height: 16px;\n`;\n\nconst SearchArrow = styled.svg`\n  width: 20px;\n  height: 20px;\n`\n/** TABLE STYLES*/\nconst TableContainer = styled.div`\n  width: 745px;\n  margin: 0 auto;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  border-radius: 8px; \n  overflow: hidden;\n`;\n\nconst TableHeader = styled.thead`\n  background-color: #F0F0F1;\n`;\n\nconst TableHeaderCell = styled.th`\n  font-family: 'Mona Sans', sans-serif;\n  font-weight: 450;\n  font-size: 10px;\n  line-height: 14px;\n  letter-spacing: 2%;\n  text-align: left;\n  padding: 8px;\n`;\n\nconst TableRow = styled.tr`\n  &:nth-child(even) {\n    background-color: #f9f9f9;\n  }\n`;\n\nconst TableCell = styled.td`\n  font-family: 'Mona Sans', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: 2%;\n  padding: 8px;\n  text-align: left;\n`;\n\n// ORIGINAL STYLED COMPONENTS\nconst Wrapper = styled.div`\n  margin-top: calc(var(--body-top-padding) * -1);\n`;\n\nconst Main = styled.div`\n  display: block;\n`;\n\nconst Section = styled.div`\n  padding-top: 0px;\n  border-left: none;\n  border-right: none;\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  border-bottom: 2px solid #ccc;\n  background-color: #f0f0f0;\n`;\n\nconst TabsButton = styled.button`\n  flex: 1;\n  padding: 1rem;\n  border: none;\n  background: ${props => (props.selected ? '#3acd83' : 'transparent')};\n  color: ${props => (props.selected ? '#fff' : '#333')};\n  font-family: 'Mona Sans', sans-serif;\n  font-size: 1rem;\n  font-weight: ${props => (props.selected ? 'bold' : 'normal')};\n  cursor: pointer;\n  transition: background-color 0.3s, color 0.3s;\n\n  &:hover {\n    background: #e0e0e0;\n  }\n`;\n\nconst AlertText = styled.p`\nfont-family: 'Mona Sans', sans-serif;\nfont-size: 14px;\nline-height: 21px;\ntext-align: center;\ncolor:red;\nmargin: 0;\npadding: 0;\nbg-color: #f9f9f9;\n`\n\nconst LoadingSpinner = () => {\n  const spinnerStyle = {\n    width: '40px',\n    height: '40px',\n    border: '4px solid rgba(0, 0, 0, 0.1)',\n    borderLeftColor: 'black',\n    borderRadius: '50%',\n    animation: 'spin 1s linear infinite',\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignCenter: 'center',\n  };\n\n  const LoadingContainer = styled.div`\n    text-align: center;\n    width: 100%;\n  `;\n\n  const LoadingSpinnerContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    font-size: 14px;\n  `\n  return <LoadingContainer> <LoadingSpinnerContainer><div style={spinnerStyle} /> </LoadingSpinnerContainer><>Generating Methods</></LoadingContainer>;\n};\n\nconst accountId = context.accountId;\nconst WILD_CARD = '*';\n\nconst validateContractId = (accountId) => {\n  accountId = accountId.trim();\n  // Check if accountId is a wildcard '*'\n  if (accountId === WILD_CARD) return true;\n  // Check if accountId length is between 2 and 64 characters\n  const isLengthValid = accountId.length >= 2 && accountId.length <= 64;\n  if (!isLengthValid) return false;\n  // Check if accountId starts with '*.' || '*' remove for part verification\n  if (accountId.startsWith('*.')) accountId = accountId.slice(2);\n  if (accountId.startsWith('*')) accountId = accountId.slice(1);\n\n  const parts = accountId.split('.');\n  for (let part of parts) {\n    if (!part.match(/^[a-z\\d]+([-_][a-z\\d]+)*$/)) {\n      return false;\n    }\n  }\n\n  return true;\n};\nconst IS_DEV = `${REPL_EXTERNAL_APP_URL}` === \"https://queryapi-frontend-vcqilefdcq-ew.a.run.app\" || `https://queryapi-frontend-vcqilefdcq-ew.a.run.app` === \"http://localhost:3000\";\n\nconst [activeTab, setActiveTab] = useState(props.view === \"create-new-indexer\" ? \"create-new-indexer\" : props.selectedIndexerPath ? \"indexer\" : \"explore\");\nconst [activeIndexerTabView, setActiveIndexerTabView] = useState(props.activeIndexerView ?? \"editor\");\n\nconst [allIndexers, setAllIndexers] = useState([]);\nconst [checkboxState, setCheckboxState] = useState(initialCheckboxState);\n\nconst [checkBoxData, setCheckBoxData] = useState([]);\nconst [loading, setLoading] = useState(false);\nconst [contractInputMessage, setContractInputMessage] = useState('');\nconst [inputValue, setInputValue] = useState('');\nconst [methodCount, setMethodCount] = useState(0);\n\nconst [selectedIndexer, setSelectedIndexer] = useState(props.selectedIndexerPath);\n\nconst handleFetchCheckboxData = async () => {\n  setCheckBoxData([]);\n  setMethodCount(0);\n  setContractInputMessage('');\n\n  if (!validateContractId(inputValue)) {\n    setContractInputMessage('Invalid contract id');\n    return;\n  }\n\n  setLoading(true);\n\n  const url = 'https://europe-west1-pagoda-data-stack-prod.cloudfunctions.net/queryapi_wizard';\n  asyncFetch(url,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        filter: inputValue,\n      }),\n    }\n  )\n    .then(response => {\n      if (!response.ok) {\n        setError('There was an error fetching the data');\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = response.body;\n\n      if (data.length === 0) {\n        setContractInputMessage('No methods found for this contract');\n        setLoading(false);\n        return;\n      };\n\n      setCheckBoxData(data);\n      setMethodCount(data.length);\n      setLoading(false);\n    }).catch(error => {\n      setLoading(false);\n      setError('There was an error fetching the data');\n    });\n\n};\n\nconst initialCheckboxState = checkBoxData.reduce((acc, item) => {\n  //Select eveyrthing by default.\n  acc[item.method_name] = false;\n  if (item.schema.properties) {\n    Object.keys(item.schema.properties).forEach(property => {\n      acc[`${item.method_name}::${property}`] = false;\n    });\n  }\n  return acc;\n}, {});\n\nconst handleParentChange = (methodName) => {\n  const newState = { ...checkboxState };\n  const isChecked = !checkboxState[methodName];\n  newState[methodName] = isChecked;\n  checkBoxData.forEach(item => {\n    if (item.method_name === methodName && item.schema.properties) {\n      Object.keys(item.schema.properties).forEach(property => {\n        newState[`${methodName}::${property}`] = isChecked;\n      });\n    }\n  });\n  setCheckboxState(newState);\n};\n\nconst handleChildChange = (childId) => {\n  setCheckboxState({\n    ...checkboxState,\n    [childId]: !checkboxState[childId],\n  });\n};\n\nuseEffect(() => {\n  Near.asyncView(`dev-queryapi.dataplatform.near`, \"list_all\").then((data) => {\n    const indexers = [];\n    Object.keys(data).forEach((accountId) => {\n      Object.keys(data[accountId]).forEach((functionName) => {\n        indexers.push({\n          accountId: accountId,\n          indexerName: functionName,\n        });\n      });\n    });\n    setAllIndexers(indexers)\n  });\n});\n\nconst data = allIndexers.map((indexer) => ({\n  indexer: indexer.indexerName,\n  weeklyRequest: indexer.weeklyRequest || 150,\n  lastUpdated: indexer.lastUpdated || '2023-06-25',\n  status: indexer.status || 'Active',\n}));\n\nfunction CustomTable() {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHeaderCell>Indexer</TableHeaderCell>\n            <TableHeaderCell>Weekly Request</TableHeaderCell>\n            <TableHeaderCell>Last Updated</TableHeaderCell>\n            <TableHeaderCell>Status</TableHeaderCell>\n          </TableRow>\n        </TableHeader>\n        <tbody>\n          {data.map((row, index) => (\n            <TableRow key={index}>\n              <TableCell>{row.indexer}</TableCell>\n              <TableCell>{row.weeklyRequest}</TableCell>\n              <TableCell>{row.lastUpdated}</TableCell>\n              <TableCell>{row.status}</TableCell>\n            </TableRow>\n          ))}\n        </tbody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nconst selectTab = (tabName) => {\n  Storage.privateSet(\"queryapi:activeTab\", tabName);\n  setActiveTab(tabName);\n};\n\nconst selectIndexerPage = (viewName) => {\n  Storage.privateSet(\"queryapi:activeIndexerTabView\", viewName);\n  setActiveIndexerTabView(viewName);\n};\n\nreturn (\n  <Wrapper>\n    <Tabs>\n      {IS_DEV && (\n        <TabsButton\n          type=\"button\"\n          onClick={() => selectTab(\"launchpad\")}\n          selected={activeTab === \"launchpad\"}\n        >\n          Launchpad\n        </TabsButton>\n      )}\n\n      <TabsButton\n        type=\"button\"\n        onClick={() => selectTab(\"explore\")}\n        selected={activeTab === \"explore\"}\n      >\n        Explore Indexers\n      </TabsButton>\n\n      <TabsButton\n        type=\"button\"\n        onClick={() => selectTab(\"indexer\")}\n        selected={activeTab === \"indexer\"}\n      >\n        Indexer ({selectedIndexer})\n      </TabsButton>\n    </Tabs>\n\n\n    <Main>\n      {activeTab === 'launchpad' && IS_DEV && (\n        <Section >\n          <AlertText>Please note that this page is currently under development. Features may be incomplete or inaccurate</AlertText>\n          <Hero>\n            <Container>\n              <HeadlineContainer>\n                <Headline>Launch an indexer in minutes</Headline>\n                <Subheadline>Get a working indexer exportable to your Near react application faster than ever. Extract on-chain data, and easily query it using GraphQL endpoints and subscriptions.</Subheadline>\n                <InputWrapper>\n                  <StyledInput\n                    placeholder=\"*.pool.near, *.poolv1.near\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onKeyPress={(event) => event.key === 'Enter' && handleFetchCheckboxData()}\n                  />\n                  <SearchButton onClick={handleFetchCheckboxData} tabIndex={0}>Start</SearchButton>\n                </InputWrapper>\n                <ContractInputMessage>{contractInputMessage ?? <><WarningSVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"><rect width=\"256\" height=\"256\" fill=\"none\" /><path d=\"M142.41,40.22l87.46,151.87C236,202.79,228.08,216,215.46,216H40.54C27.92,216,20,202.79,26.13,192.09L113.59,40.22C119.89,29.26,136.11,29.26,142.41,40.22Z\" fill=\"none\" stroke=\"red\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" /><line x1=\"128\" y1=\"144\" x2=\"128\" y2=\"104\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" /><circle cx=\"128\" cy=\"180\" fill=\"red\" r=\"12\" /></WarningSVG> {contractInputMessage}</>}</ContractInputMessage>\n\n              </HeadlineContainer>\n              <WidgetContainer>\n                <SubContainer>\n                  <SubContainerTitle>Customize indexer</SubContainerTitle>\n                  <SubContainerContent>\n                    {loading ? (\n                      <Container>\n                        <LoadingSpinner />\n                      </Container>\n                    ) : (checkBoxData.length === 0) ?\n                      <>\n                        <NoQueryContainer>\n                          <NoQuerySVG\n                            xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"><rect width=\"256\" height=\"256\" fill=\"none\" /><line x1=\"144\" y1=\"224\" x2=\"112\" y2=\"224\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" /><circle cx=\"128\" cy=\"100\" r=\"12\" fill=\"#A1A09A\" /><path d=\"M94.81,192C37.52,95.32,103.87,32.53,123.09,17.68a8,8,0,0,1,9.82,0C152.13,32.53,218.48,95.32,161.19,192Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" /><path d=\"M183.84,110.88l30.31,36.36a8,8,0,0,1,1.66,6.86l-12.36,55.63a8,8,0,0,1-12.81,4.51L161.19,192\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" /><path d=\"M72.16,110.88,41.85,147.24a8,8,0,0,0-1.66,6.86l12.36,55.63a8,8,0,0,0,12.81,4.51L94.81,192\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" />\n                          </NoQuerySVG>\n                          <NoQueryText>No smart contract address entered</NoQueryText>\n                        </NoQueryContainer>\n                      </>\n                      : (\n                        <div>\n                          {checkBoxData.length > 0 && (\n                            <MethodsText>\n                              Methods <MethodsSpan>{methodCount}</MethodsSpan>\n                            </MethodsText>\n                          )}\n                          < ScrollableDiv >\n                            {\n                              checkBoxData.length > 0 && (\n                                <>\n                                  {checkBoxData.map((item, index) => (\n                                    <CheckboxContainer key={index}>\n                                      <CheckboxLabel>\n                                        <Checkbox\n                                          type=\"checkbox\"\n                                          id={item.method_name}\n                                          checked={checkboxState[item.method_name]}\n                                          onChange={() => handleParentChange(item.method_name)}\n                                        />\n                                        {item.method_name}\n                                      </CheckboxLabel>\n                                      {item.schema.properties && (\n                                        <SubCheckboxContainer>\n                                          {Object.keys(item.schema.properties).map((property, subIndex) => (\n                                            <CheckboxLabel key={subIndex}>\n                                              <Checkbox\n                                                type=\"checkbox\"\n                                                id={`${item.method_name}::${property}`}\n                                                checked={checkboxState[`${item.method_name}::${property}`]}\n                                                onChange={() => handleChildChange(`${item.method_name}::${property}`)}\n                                              />\n                                              {property}: {item.schema.properties[property].type}\n                                            </CheckboxLabel>\n                                          ))}\n                                        </SubCheckboxContainer>\n                                      )}\n                                    </CheckboxContainer>\n                                  ))}\n                                </>\n                              )\n                            }\n                          </ScrollableDiv>\n                        </div>\n                      )}\n                  </SubContainerContent>\n                </SubContainer>\n              </WidgetContainer>\n            </Container>\n          </Hero>\n          <Divider />\n          <ExploreIndexersContainer>\n            <ExploreContent>\n              <ExploreIndexersHeading>Explore indexers on Near</ExploreIndexersHeading>\n              <SearchIndexerContainer>\n                <MagnifyingGlass fill=\"#000000\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"><path d=\"M3.624,15a8.03,8.03,0,0,0,10.619.659l5.318,5.318a1,1,0,0,0,1.414-1.414l-5.318-5.318A8.04,8.04,0,0,0,3.624,3.624,8.042,8.042,0,0,0,3.624,15Zm1.414-9.96a6.043,6.043,0,1,1-1.77,4.274A6,6,0,0,1,5.038,5.038ZM4.622,9.311a1,1,0,0,1,2,0A2.692,2.692,0,0,0,9.311,12a1,1,0,0,1,0,2A4.7,4.7,0,0,1,4.622,9.311Z\"></path></g></MagnifyingGlass>\n                <SearchInput placeholder=\"Search indexers\" />\n                <SearchIndexerButton>\n                  <SearchArrow viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.4697 5.46967C13.7626 5.17678 14.2374 5.17678 14.5303 5.46967L20.5303 11.4697C20.8232 11.7626 20.8232 12.2374 20.5303 12.5303L14.5303 18.5303C14.2374 18.8232 13.7626 18.8232 13.4697 18.5303C13.1768 18.2374 13.1768 17.7626 13.4697 17.4697L18.1893 12.75H4C3.58579 12.75 3.25 12.4142 3.25 12C3.25 11.5858 3.58579 11.25 4 11.25H18.1893L13.4697 6.53033C13.1768 6.23744 13.1768 5.76256 13.4697 5.46967Z\" fill=\"#1C274C\"></path> </g></SearchArrow>\n                </SearchIndexerButton>\n              </SearchIndexerContainer>\n              {CustomTable()}\n            </ExploreContent>\n          </ExploreIndexersContainer>\n        </Section>\n      )}\n\n      {activeTab === 'explore' && (\n        <Section>\n          <Widget\n\n            src={`dev-queryapi.dataplatform.near/widget/QueryApi.IndexerExplorer`} />\n        </Section>\n      )}\n\n      {activeTab === \"create-new-indexer\" && (\n        <Section>\n          <Widget\n            src={`dev-queryapi.dataplatform.near/widget/QueryApi.Editor`}\n            props={{\n              indexerName: selectedIndexer ? selectedIndexer.split('/')[1] : '',\n              accountId: selectedIndexer ? selectedIndexer.split('/')[0] : '',\n              path: \"create-new-indexer\",\n            }}\n          />\n        </Section>\n      )}\n\n      {activeTab === 'indexer' && (\n        <Section>\n          <Widget\n            src={`dev-queryapi.dataplatform.near/widget/QueryApi.Editor`}\n            props={{\n              indexerName: selectedIndexer ? selectedIndexer.split('/')[1] : '',\n              accountId: selectedIndexer ? selectedIndexer.split('/')[0] : '',\n              path: \"query-api-editor\",\n              tab: props.tab,\n              activeView: activeIndexerTabView\n            }}\n          />\n        </Section>\n      )}\n\n      {!['launchpad', 'explore', 'indexer', 'create-new-indexer'].includes(activeTab) && (\n        <Widget\n          src={`dev-queryapi.dataplatform.near/widget/QueryApi.NotFound`}\n          props={{}}\n        />\n      )}\n\n    </Main>\n  </Wrapper >\n);\n\n\n\n\n", "metadata": {"description": "Main dashboard for Near QueryAPI which allows you to seamlessly create, manage, and discover indexers", "image": {}, "name": "Near QueryAPI Dashboard", "tags": {}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dev-queryapi.dataplatform.near/widget/QueryApi.Dashboard", "fact_widget_deployments_id": "0563525dcf8ecbff49de7696d41506d6", "inserted_timestamp": "2024-07-19T21:56:39.200Z", "modified_timestamp": "2024-07-19T21:56:39.200Z", "__row_index": 12}