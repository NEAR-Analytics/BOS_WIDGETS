{"tx_hash": "21pFJduofnApmBeC2Z9c92BwzMGs73ywENxzzxEytnbm", "action_id_social": "HvNK6XZw9Wkr6aYHxzQtLANSEyWfyyHNDT5BRtocXzUB-0-widget", "block_id": 112865176, "block_timestamp": "2024-02-15T06:45:18.313Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.NFT.Detail", "source_code": "/**\n * Component: NFTDetail\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Non-Fungible Token Details.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [id] - The token identifier passed as a string\n * @param {string} [tid] - The nf token identifier passed as a string\n */\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowUp.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowUp.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = `${appUrl}images/tokenplaceholder.svg`;\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\n\n\n\n\n\n\n\nfunction MainComponent({ network, t, id, tid }) {\n  const [indices, setIndices] = useState([1, 2]);\n  const [token, setToken] = useState({} );\n  const [loading, setLoading] = useState(false);\n  const config = getConfig(network);\n\n  useEffect(() => {\n    function fetchToken() {\n      setLoading(true);\n      asyncFetch(`${config?.backendUrl}nfts/${id}/tokens/${tid}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (res\n\n\n\n\n) => {\n            const resp = res?.body?.tokens?.[0];\n            if (res.status === 200) {\n              setToken(resp);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n\n    fetchToken();\n  }, [config?.backendUrl, id, tid]);\n\n  const toggleItem = (index) => {\n    if (indices.includes(index)) {\n      setIndices(indices.filter((currentIndex) => currentIndex !== index));\n    } else {\n      setIndices([...indices, index].sort());\n    }\n  };\n\n  return (\n    <>\n      <div className=\"grid md:grid-cols-12 pt-4 mb-2\">\n        <div className=\"md:col-span-5 lg:col-span-4 pt-4\">\n          <div className=\"bg-white border rounded-xl soft-shadow p-3 aspect-square\">\n            {\n              <Widget\n                src={`${config.ownerId}/widget/bos-components.components.Shared.NFTImage`}\n                props={{\n                  base: token?.nft?.base_uri,\n                  media: token?.media,\n                  reference: token?.reference,\n                  className: 'rounded max-h-full',\n                  network: network,\n                }}\n              />\n            }\n          </div>\n        </div>\n        <div className=\"md:col-span-7 lg:col-span-8 md:px-4 lg:pl-8 pt-4\">\n          <h1 className=\"break-all space-x-2 text-xl text-gray-700 leading-8 font-semibold\">\n            {loading ? (\n              <div className=\"w-80 max-w-xs\">\n                <Skeleton className=\"h-6\" />\n              </div>\n            ) : (\n              token?.title || token?.token\n            )}\n          </h1>\n          <a href={`/nft-token/${id}`} className=\"hover:no-underline\">\n            <a className=\"break-all text-green leading-6 text-sm hover:no-underline\">\n              {loading ? (\n                <div className=\"w-60 max-w-xs py-2\">\n                  <Skeleton className=\"h-4\" />\n                </div>\n              ) : (\n                <>\n                  <span className=\"inline-flex align-middle h-5 w-5 mr-2\">\n                    <TokenImage\n                      src={token?.nft?.icon}\n                      alt={token?.nft?.name}\n                      className=\"w-5 h-5\"\n                      appUrl={config.appUrl}\n                    />\n                  </span>\n                  <span>{token?.nft?.name}</span>\n                </>\n              )}\n            </a>\n          </a>\n          <Accordion.Root\n            type=\"multiple\"\n            className=\"bg-white border rounded-xl  soft-shadow mt-4\"\n            defaultValue={indices}\n            collapsible\n          >\n            <Accordion.Item value={1}>\n              <Accordion.Header>\n                <Accordion.Trigger\n                  onClick={() => toggleItem(1)}\n                  className=\"w-full flex justify-between items-center text-sm font-semibold text-gray-600 border-b focus:outline-none p-3\"\n                >\n                  <h2>Details</h2>\n                  {indices.includes(1) ? (\n                    <ArrowUp className=\"fill-current\" />\n                  ) : (\n                    <ArrowDown className=\"fill-current\" />\n                  )}\n                </Accordion.Trigger>\n              </Accordion.Header>\n              <Accordion.Content className=\"text-sm text-nearblue-600\">\n                <div className=\"divide-solid divide-gray-200 divide-y\">\n                  {token?.asset && (\n                    <div className=\"flex p-4\">\n                      <div className=\"flex items-center w-full xl:w-1/4 mb-2 xl:mb-0\">\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div>\n                                <Question className=\"w-4 h-4 fill-current mr-1\" />\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                              align=\"start\"\n                              side=\"bottom\"\n                            >\n                              Current owner of this NFT\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                        Owner:\n                      </div>\n                      <div className=\"w-full xl:w-3/4 word-break\">\n                        <a\n                          href={`/address/${token.asset.owner}`}\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"text-green hover:no-underline\">\n                            {shortenAddress(token.asset.owner)}\n                          </a>\n                        </a>\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"flex p-4\">\n                    <div className=\"flex items-center w-full xl:w-1/4 mb-2 xl:mb-0\">\n                      <Tooltip.Provider>\n                        <Tooltip.Root>\n                          <Tooltip.Trigger asChild>\n                            <div>\n                              <Question className=\"w-4 h-4 fill-current mr-1\" />\n                            </div>\n                          </Tooltip.Trigger>\n                          <Tooltip.Content\n                            className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                            align=\"start\"\n                            side=\"bottom\"\n                          >\n                            Address of this NFT contract\n                          </Tooltip.Content>\n                        </Tooltip.Root>\n                      </Tooltip.Provider>\n                      Contract Address:\n                    </div>\n                    <div className=\"w-full xl:w-3/4 word-break\">\n                      <a href={`/address/${id}`} className=\"hover:no-underline\">\n                        <a className=\"text-green hover:no-underline\">\n                          {shortenAddress(id)}\n                        </a>\n                      </a>\n                    </div>\n                  </div>\n                  <div className=\"flex p-4\">\n                    <div className=\"flex items-center w-full xl:w-1/4 mb-2 xl:mb-0\">\n                      <Tooltip.Provider>\n                        <Tooltip.Root>\n                          <Tooltip.Trigger asChild>\n                            <div>\n                              <Question className=\"w-4 h-4 fill-current mr-1\" />\n                            </div>\n                          </Tooltip.Trigger>\n                          <Tooltip.Content\n                            className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                            align=\"start\"\n                            side=\"bottom\"\n                          >\n                            {\"This NFT's unique token ID\"}\n                          </Tooltip.Content>\n                        </Tooltip.Root>\n                      </Tooltip.Provider>\n                      Token ID:\n                    </div>\n                    <div className=\"w-full xl:w-3/4 word-break\">{tid}</div>\n                  </div>\n                  <div className=\"flex p-4\">\n                    <div className=\"flex items-center w-full xl:w-1/4 mb-2 xl:mb-0\">\n                      <Tooltip.Provider>\n                        <Tooltip.Root>\n                          <Tooltip.Trigger asChild>\n                            <div>\n                              <Question className=\"w-4 h-4 fill-current mr-1\" />\n                            </div>\n                          </Tooltip.Trigger>\n                          <Tooltip.Content\n                            className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                            align=\"start\"\n                            side=\"bottom\"\n                          >\n                            The standard followed by this NFT\n                          </Tooltip.Content>\n                        </Tooltip.Root>\n                      </Tooltip.Provider>\n                      Token Standard:\n                    </div>\n                    <div className=\"w-full xl:w-3/4 word-break\">NEP-171</div>\n                  </div>\n                </div>\n              </Accordion.Content>\n            </Accordion.Item>\n            {token?.description && (\n              <Accordion.Item value={2}>\n                <Accordion.Trigger\n                  onClick={() => toggleItem(2)}\n                  className=\"w-full flex justify-between items-center text-sm font-semibold text-gray-600 border-b focus:outline-none p-3\"\n                >\n                  <h2>Description</h2>\n                  {indices.includes(2) ? (\n                    <ArrowUp className=\"fill-current\" />\n                  ) : (\n                    <ArrowDown className=\"fill-current\" />\n                  )}\n                </Accordion.Trigger>\n                <Accordion.Content className=\"text-sm text-nearblue-600 border-b p-3\">\n                  {token.description}\n                </Accordion.Content>\n              </Accordion.Item>\n            )}\n          </Accordion.Root>\n        </div>\n      </div>\n      <div className=\"py-6\"></div>\n      <div className=\"block lg:flex lg:space-x-2 mb-10\">\n        <div className=\"w-full \">\n          <div className=\"bg-white soft-shadow rounded-xl pb-1\">\n            {\n              <Widget\n                src={`${config.ownerId}/widget/bos-components.components.NFT.TokenTransfers`}\n                props={{\n                  network: network,\n                  t: t,\n                  id: id,\n                  tid: tid,\n                }}\n              />\n            }\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.NFT.Detail", "fact_widget_deployments_id": "643a9bd46e9f1f543522471d84257204", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}