{"tx_hash": "CoeWR8MbEZS1sP2fVu7fdYKCYu3qCeJvvwVjthhGKbYy", "action_id_social": "B8F14ibSvXhWpVevRNWaCtaVAcdmKEah9MrifFmV9zTz-0-widget", "block_id": 110793436, "block_timestamp": "2024-01-19T12:36:31.244Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Charts", "source_code": "/**\n * Component: Charts\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Charts component for Near Charts & Statistics\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [chartTypes] - Type of chart to be shown, available options are (price, blocks, txns etc)\n * @param {boolean} [fetchStyles] - Use Nearblocks styles in the component\n * @param {boolean} [poweredBy] - Powered by attribution\n\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 6,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nfunction MainComponent(props) {\n  const [css, setCss] = useState({});\n  const [data, setData] = useState([]);\n  const [chartConfig, setChartConfig] = useState(null);\n  const [chartInfo, setChartInfo] = useState({\n    title: '',\n    description: '',\n  });\n\n  const config = getConfig(props.network);\n\n  const charts = [\n    {\n      link: '/charts/near-price',\n      text: 'Near Daily Price (USD) Chart',\n      image: `${config.appUrl}images/charts/near-price.svg`,\n      exclude: `${props.network}` === 'testnet',\n    },\n    {\n      link: '/charts/market-cap',\n      text: 'Near Market Capitalization Chart',\n      image: `${config.appUrl}images/charts/market-cap.svg`,\n      exclude: `${props.network}` === 'testnet',\n    },\n    {\n      link: '/charts/near-supply',\n      text: 'Near Supply Growth Chart',\n      image: `${config.appUrl}images/charts/near-supply.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/txns',\n      text: 'Near Daily Transactions Chart',\n      image: `${config.appUrl}images/charts/txns.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/blocks',\n      text: 'Near Block Count',\n      image: `${config.appUrl}images/charts/blocks.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/addresses',\n      text: 'Near Unique Accounts Chart',\n      image: `${config.appUrl}images/charts/addresses.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/txn-fee',\n      text: 'Transaction Fee Chart',\n      image: `${config.appUrl}images/charts/txn-fee.svg`,\n      exclude: `${props.network}` === 'testnet',\n    },\n    {\n      link: '/charts/txn-volume',\n      text: 'Transaction Volume Chart',\n      image: `${config.appUrl}images/charts/txn-volume.svg`,\n      exclude: `${props.network}` === 'testnet',\n    },\n  ];\n\n  /**\n   * Fetches styles asynchronously from a nearblocks gateway.\n   */\n  function fetchStyles() {\n    asyncFetch('https://beta.nearblocks.io/common.css').then(\n      (res) => {\n        if (res?.body) {\n          setCss(res.body);\n        }\n      },\n    );\n  }\n\n  const chartData = useMemo(() => {\n    try {\n      const chartTypeMappings = {\n        txns: (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.txns),\n          date: stat.date,\n          blocks: stat.blocks,\n          addresses: stat.addresses,\n        }),\n        'market-cap': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.market_cap),\n          date: stat.date,\n          price: Number(stat.near_price),\n        }),\n        'near-supply': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(yoctoToNear(Number(stat.total_supply), false)),\n          date: stat.date,\n        }),\n        blocks: (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.blocks),\n          date: stat.date,\n        }),\n        addresses: (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.total_addresses),\n          date: stat.date,\n          addresses: stat.addresses,\n        }),\n        'txn-fee': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.txn_fee_usd),\n          date: stat.date,\n          fee: stat.txn_fee,\n        }),\n        'txn-volume': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.txn_volume_usd),\n          date: stat.date,\n          volume: stat.txn_volume,\n        }),\n        'near-price': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.near_price),\n          date: stat.date,\n        }),\n      };\n\n      const mappingFunction =\n        chartTypeMappings[props.chartTypes ];\n      if (mappingFunction) {\n        return data.map(mappingFunction);\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }, [data, props.chartTypes]);\n\n  useEffect(() => {\n    function fetchChartData() {\n      asyncFetch(`${config.backendUrl}charts`).then(\n        (res) => {\n          if (res?.body) {\n            setData(res.body?.charts );\n          }\n        },\n      );\n    }\n\n    if (props?.fetchStyles) {\n      fetchStyles();\n    }\n\n    fetchChartData();\n  }, [props?.fetchStyles, config.backendUrl]);\n\n  useEffect(() => {\n    const fetchData = () => {\n      let titleText = '';\n      let yLabel = '';\n      let description = '';\n      switch (props.chartTypes) {\n        case 'market-cap':\n          titleText = 'Near Market Capitalization Chart';\n          yLabel = 'Near Market Cap (USD)';\n          description =\n            'tNear Market Capitalization chart shows the historical breakdown of Near daily market capitalization and price.';\n          break;\n        case 'txns':\n          titleText = 'Near Daily Transactions Chart';\n          yLabel = 'Transactions per Day';\n          description =\n            'Near Supply Growth Chart shows a breakdown of daily and the total Near supply.';\n          break;\n        case 'near-supply':\n          titleText = 'Near Supply Growth Chart';\n          yLabel = 'Near Supply';\n          description =\n            'Near Supply Growth Chart shows a breakdown of daily and the total Near supply.';\n          break;\n        case 'blocks':\n          titleText = 'Near Block Count';\n          yLabel = 'Blocks per Day';\n          description =\n            'Near Block Count Chart shows the historical number of blocks produced daily on Near blockchain.';\n          break;\n        case 'addresses':\n          titleText = 'Near Unique Accounts Chart';\n          yLabel = 'Near Cumulative Accounts Growth';\n          description =\n            'The chart shows the total distinct numbers of accounts on Near blockchain and the increase in the number of account daily.';\n          break;\n        case 'txn-fee':\n          titleText = 'Transaction Fee Chart';\n          yLabel = 'Transaction Fee (USD)';\n          description =\n            'The chart shows the daily amount in USD spent per transaction on Near blockchain.';\n          break;\n        case 'txn-volume':\n          titleText = 'Transaction Volume Chart';\n          yLabel = 'Transaction Volume (USD)';\n          description =\n            'The chart shows the daily amount in USD spent per transaction on Near blockchain.            ';\n          break;\n        case 'near-price':\n          titleText = 'Near Daily Price (USD) Chart';\n          yLabel = 'Near Price (USD)';\n          description =\n            'Near Daily Price (USD) chart shows the daily historical price for Near in USD.';\n          break;\n        default:\n      }\n      setChartInfo({\n        title: titleText,\n        description: description,\n      });\n\n      const fetchedData = {\n        chart: {\n          height: 430,\n          zoomType: 'x',\n        },\n        title: {\n          text: titleText,\n        },\n        subtitle: {\n          text: 'Source: NearBlocks.io',\n        },\n        xAxis: {\n          type: 'datetime',\n        },\n        yAxis: {\n          title: {\n            text: yLabel,\n          },\n        },\n        legend: {\n          enabled: false,\n        },\n        series: [\n          {\n            type: 'area',\n            data: chartData,\n            color: 'rgba(3, 63, 64, 1)',\n          },\n        ],\n        credits: {\n          enabled: false,\n        },\n        plotOptions: {\n          area: {\n            fillColor: {\n              linearGradient: {\n                x1: 0,\n                y1: 0,\n                x2: 0,\n                y2: 1,\n              },\n              stops: [\n                [0, 'rgba(3, 63, 64, 0.8)'],\n                [1, 'rgba(3, 63, 64, 0)'],\n              ],\n            },\n            marker: {\n              enabled: false,\n            },\n            lineWidth: 1,\n            states: {\n              hover: {\n                lineWidth: 1,\n              },\n            },\n            threshold: null,\n            turboThreshold: 3650,\n          },\n        },\n        exporting: {\n          buttons: {\n            contextButton: {\n              menuItems: [\n                'viewFullscreen',\n                'printChart',\n                'separator',\n                'downloadPNG',\n                'downloadJPEG',\n                'downloadPDF',\n                'downloadSVG',\n                'separator',\n                'embed',\n              ],\n            },\n          },\n        },\n      };\n      setChartConfig(fetchedData);\n    };\n\n    fetchData();\n  }, [chartData, props.chartTypes]);\n\n  const iframeSrc = `\n  <html>\n    <head>\n      <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/dayjs@1.10.4\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/numeral@2.0.6/numeral.min.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/big.js@5.2.2\"></script>\n    </head>\n    <body>\n      <div id=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n      ${\n        props.poweredBy\n          ? '<p style=\"text-align: center; color: #000; font-size: 0.75rem; padding-top: 1rem; padding-bottom: 1rem; font-family: sans-serif;\">Powered by <a href=\"https://beta.nearblocks.io/?utm_source=bos_widget&utm_medium=Charts\" target=\"_blank\" style=\"font-weight: 600; font-family: sans-serif; color: #000; text-decoration: none;\">NearBlocks</a></p>'\n          : ''\n      }\n      <script type=\"text/javascript\">\n        const chartConfig = ${JSON.stringify(chartConfig)};\n        chartConfig.tooltip = {\n          formatter: function () {\n            const item= this.point;\n            function dollarFormat(value) {\n              return numeral(value).format('0,0.00');\n            }\n\n            function yoctoToNear(yocto, format) {\n              const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n              const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n              return format ? dollarFormat(near) : near;\n            }\n\n            let tooltipContent = \"\";\n\n            switch (\"${props.chartTypes}\") {\n              case \"market-cap\":\n                tooltipContent = \\`\n                  \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                  Market Cap: <strong>$\\${dollarFormat(item.y)}</strong><br/>\n                  Near Price: <strong>$\\${dollarFormat(item.price)}</strong>\n                \\`;\n                break;\n                case \"txns\":\n                  tooltipContent = \\`\n                    \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                    Total Transactions: <strong>\\${dollarFormat(item.y)}</strong><br/>\n                    Total Blocks Count: <strong>\\${dollarFormat(item.blocks)}</strong><br/>\n                    New Addresses Seen: <strong>\\${dollarFormat(item.addresses)}</strong>\n                  \\`;\n                  break;\n                case \"near-supply\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Total Sypply: <strong>\\${dollarFormat(item.y)} \u24c3</strong>\n                    \\`;\n                  break;\n                case \"blocks\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Total Blocks: <strong>\\${dollarFormat(item.y)}</strong>\\`;\n                  break;\n                case \"addresses\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Total Blocks: <strong>\\${dollarFormat(item.y)}</strong>\n                      \\`;\n                  break;\n                  case \"txn-fee\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Txn Fee: <strong>$\\${dollarFormat(item.y)}</strong><br/>\n                      Txn Fee (\u24c3): <strong>\\${yoctoToNear(item.fee,true)} \u24c3</strong><br/>\n                      \\`;\n                  break;\n                case \"txn-volume\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Txn Fee: <strong>$\\${dollarFormat(item.y)}</strong><br/>\n                      Txn Fee (\u24c3): <strong>\\${yoctoToNear(item.volume,true)} \u24c3</strong><br/>\n                      \\`;\n                  break;\n                case \"near-price\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Near Price: <strong>$\\${dollarFormat(item.y)}</strong>\n                      \\`;\n                  break;\n              default:\n                // Handle other cases or set a default tooltip content\n                tooltipContent = \\`\n                  \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                  \\${item.y}\n                \\`;\n            }\n\n            return tooltipContent;\n          }\n        };\n        Highcharts.chart('chart-container', chartConfig);\n      </script>\n    </body>\n  </html>\n`;\n  const Theme = styled.div`\n    ${css}\n  `;\n\n  return (\n    <Theme>\n      <div>\n        <div className=\"bg-hero-pattern h-56\">\n          <div className=\"container mx-auto px-3\">\n            <h1 className=\"mb-4 pt-8 sm:sm:text-2xl text-xl text-white\">\n              {props.chartTypes ? chartInfo.title : 'Near Charts & Statistics'}\n            </h1>\n          </div>\n        </div>\n        <div className=\"container mx-auto px-3 -mt-36\">\n          {props.chartTypes && (\n            <div\n              className=\"block bg-white border soft-shadow rounded-lg overflow-hidden mb-10\"\n              style={{ height: 580 }}\n            >\n              <p className=\"leading-7 px-4 text-sm py-4 text-gray-500 border-b\">\n                {chartInfo?.description}\n              </p>\n              <div className=\"pl-2 pr-2 py-8 h-full\">\n                {chartData?.length ? (\n                  <iframe\n                    srcDoc={iframeSrc}\n                    style={{\n                      width: '100%',\n                      height: '100%',\n                      border: 'none',\n                    }}\n                  />\n                ) : (\n                  <Skeleton className=\"h-[93%] w-full\" />\n                )}\n              </div>\n            </div>\n          )}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {charts.map(\n              (chart, index) =>\n                chart.exclude === false && (\n                  <div\n                    key={index}\n                    className=\"block bg-white border soft-shadow rounded-lg overflow-hidden\"\n                  >\n                    <a\n                      href={chart.link}\n                      className=\"block leading-7 p-3 text-sm text-gray-500 border-b truncate\"\n                    >\n                      <h2>{chart.text}</h2>\n                    </a>\n                    <div className=\"pl-2 pr-4 py-6\">\n                      <a href={chart.link}>\n                        <img\n                          src={chart.image}\n                          alt={chart.text}\n                          width={600}\n                          height={550}\n                        />\n                      </a>\n                    </div>\n                  </div>\n                ),\n            )}\n          </div>\n        </div>\n      </div>\n    </Theme>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Charts", "fact_widget_deployments_id": "6d05c1aa1b355377a2c434f222559a93", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}