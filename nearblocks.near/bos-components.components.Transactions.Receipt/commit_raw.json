{"tx_hash": "Cizf9kN45VdYgGArsJuCU9dGdEUW1Gxh3THuqCXAqZbX", "action_id_social": "DAb29isUSfiqPPWMPNGASHA6vcQR7cwMYPmEtHP9Zgt5-0-widget", "block_id": 109569508, "block_timestamp": "2024-01-04T12:15:08.096Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Transactions.Receipt", "source_code": "/**\n * Component: TransactionsReceipt\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of Transaction Receipt on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {TransactionInfo} [txn] - Information related to a transaction.\n * @param {RPCTransactionInfo} [rpcTxn] - RPC data of the transaction.\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  console.log('hgjhgh');\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n/* INCLUDE: \"includes/near.jsx\" */\nfunction mapRpcActionToAction(action) {\n  if (action === 'CreateAccount') {\n    return {\n      action_kind: 'CreateAccount',\n      args: {},\n    };\n  }\n\n  if (typeof action === 'object') {\n    const kind = Object.keys(action)[0];\n\n    return {\n      action_kind: kind,\n      args: action[kind],\n    };\n  }\n\n  return null;\n}\n\nconst valueFromObj = (obj) => {\n  const keys = Object.keys(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = obj[key];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (typeof value === 'object') {\n      const nestedValue = valueFromObj(value );\n      if (nestedValue) {\n        return nestedValue;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction txnLogs(txn) {\n  let txLogs = [];\n\n  const outcomes = txn?.receipts_outcome || [];\n\n  for (let i = 0; i < outcomes.length; i++) {\n    const outcome = outcomes[i];\n    let logs = outcome?.outcome?.logs || [];\n\n    if (logs.length > 0) {\n      const mappedLogs = logs.map((log) => ({\n        contract: outcome?.outcome?.executor_id || '',\n        logs: log,\n      }));\n      txLogs = [...txLogs, ...mappedLogs];\n    }\n  }\n\n  return txLogs;\n}\n\nfunction txnActions(txn) {\n  const txActions = [];\n  const receipts = txn?.receipts || [];\n\n  for (let i = 0; i < receipts.length; i++) {\n    const receipt = receipts[i];\n    const from = receipt?.predecessor_id;\n    const to = receipt?.receiver_id;\n\n    if (Array.isArray(receipt?.receipt)) {\n      const actions = receipt.receipt;\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = actions[j];\n\n        txActions.push({ from, to, ...action });\n      }\n    } else {\n      const actions = receipt?.receipt?.Action?.actions || [];\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = mapRpcActionToAction(actions[j]);\n\n        txActions.push({ from, to, ...action });\n      }\n    }\n  }\n\n  return txActions.filter(\n    (action) =>\n      action.action_kind !== 'FunctionCall' && action.from !== 'system',\n  );\n}\n\nfunction txnErrorMessage(txn) {\n  const kind = txn?.status?.Failure?.ActionError?.kind;\n\n  if (typeof kind === 'string') return kind;\n  if (typeof kind === 'object') {\n    return valueFromObj(kind);\n  }\n\n  return null;\n}\n\nfunction formatLine(line, offset, format) {\n  let result = `${offset.toString(16).padStart(8, '0')}  `;\n\n  const bytes = line.split(' ').filter(Boolean);\n  bytes.forEach((byte, index) => {\n    if (index > 0 && index % 4 === 0) {\n      result += ' ';\n    }\n    result += byte.toUpperCase().padEnd(2, ' ') + ' ';\n  });\n\n  if (format === 'default') {\n    result += ` ${String.fromCharCode(\n      ...bytes.map((b) => parseInt(b, 16)),\n    )}`;\n  }\n\n  return result.trimEnd();\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n/* END_INCLUDE: \"includes/near.jsx\" */\n\n\nfunction MainComponent(props) {\n  const { network, rpcTxn, txn, t } = props;\n  const [receipt, setReceipt] = useState(null);\n  const config = getConfig(network);\n\n  function transactionReceipts(txn) {\n    const actions = txn.transaction.actions.map((txn) =>\n      mapRpcActionToAction(txn),\n    );\n    const receipts = txn.receipts;\n    const receiptsOutcome = txn.receipts_outcome;\n\n    if (\n      receipts.length === 0 ||\n      receipts[0].receipt_id !== receiptsOutcome[0].id\n    ) {\n      receipts.unshift({\n        predecessor_id: txn.transaction.signer_id,\n        receipt: actions,\n        receipt_id: receiptsOutcome[0].id,\n        receiver_id: txn.transaction.receiver_id,\n      });\n    }\n\n    const receiptOutcomesByIdMap = new Map();\n    const receiptsByIdMap = new Map();\n\n    receiptsOutcome.forEach((receipt) => {\n      receiptOutcomesByIdMap.set(receipt.id, receipt);\n    });\n\n    receipts.forEach((receiptItem) => {\n      receiptsByIdMap.set(receiptItem.receipt_id, {\n        ...receiptItem,\n        actions:\n          receiptItem.receipt_id === receiptsOutcome[0].id\n            ? actions\n            : receiptItem.receipt?.Action?.actions.map((receipt) =>\n                mapRpcActionToAction(receipt),\n              ),\n      });\n    });\n\n    const collectReceipts = (receiptHash) => {\n      const receipt = receiptsByIdMap.get(receiptHash);\n      const receiptOutcome = receiptOutcomesByIdMap.get(receiptHash);\n\n      return {\n        ...receipt,\n        ...receiptOutcome,\n        outcome: {\n          ...receiptOutcome.outcome,\n          outgoing_receipts:\n            receiptOutcome.outcome.receipt_ids.map(collectReceipts),\n        },\n      };\n    };\n\n    return collectReceipts(receiptsOutcome[0].id);\n  }\n\n  useEffect(() => {\n    if (rpcTxn) {\n      const receipt = transactionReceipts(rpcTxn);\n      console.log('efewf', receipt);\n      setReceipt(receipt);\n    }\n  }, [rpcTxn]);\n\n  return (\n    <div className=\"bg-white text-sm text-gray-500 divide-solid divide-gray-200 divide-y\">\n      {\n        <Widget\n          src={`${config.ownerId}/widget/bos-components.components.Transactions.ReceiptRow`}\n          props={{\n            txn: txn,\n            receipt: receipt,\n            network: network,\n            t: t,\n          }}\n        />\n      }\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Transactions.Receipt", "fact_widget_deployments_id": "aff0f232b7533db605e44f540f381970", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}