{"tx_hash": "DtDT5nwGtNA6gEnPigqifek1eN5h5HDDFw2uTHviWcey", "action_id_social": "AuCRzSLy76W7TDU3at1vSCsUJRM6SKw9tX7wCGKjdcoA-0-widget", "block_id": 114805279, "block_timestamp": "2024-03-16T06:01:46.677Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Shared.NFTImage", "source_code": "/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = `${appUrl}images/tokenplaceholder.svg`;\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.mainnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.testnet.near.org/',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 2592000) {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 31536000) {\n    const monthsAgo = Math.floor(secondsAgo / 2592000);\n    return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const yearsAgo = Math.floor(secondsAgo / 31536000);\n    return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst getMediaUrl = async (base, media, reference) => {\n  if (\n    media.startsWith('https://') ||\n    media.startsWith('http://') ||\n    media.startsWith('data:image')\n  )\n    return Promise.resolve(media);\n\n  if (\n    reference &&\n    (base.startsWith('https://arweave.net') ||\n      reference.startsWith('https://arweave.net'))\n  ) {\n    try {\n      return asyncFetch(\n        base ? `${base.replace(/\\/+$/, '')}/${reference}` : `${reference}`,\n      )\n        .then((resp) => {\n          return resp.body.media;\n        })\n        .catch(() => {});\n    } catch (error) {\n      //\n    }\n  }\n\n  if (base) return Promise.resolve(`${base}/${media}`);\n\n  return Promise.resolve(`https://cloudflare-ipfs.com/ipfs/${media}`);\n};\n\nfunction MainComponent({\n  base,\n  media,\n  alt,\n  reference,\n  className,\n  network,\n}) {\n  const [src, setSrc] = useState('');\n  const [loading, setLoading] = useState(true);\n  const config = getConfig(network);\n\n  useEffect(() => {\n    if (media || base || reference) {\n      setLoading(true);\n      getMediaUrl(base || '', media || '', reference)\n        .then(setSrc)\n        .catch((error) => {\n          console.error(error);\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [base, media, reference]);\n\n  const onLoad = () => setLoading(false);\n\n  const onSetSrc = (newSrc) => {\n    if (newSrc !== src) {\n      setSrc(newSrc);\n    }\n  };\n\n  return (\n    <span className=\"w-full h-full flex items-center justify-center relative\">\n      {loading && (\n        <span className=\"absolute inset-0 bg-white\">\n          <span className=\"absolute inset-0 animate-pulse bg-gray-300 rounded\" />\n        </span>\n      )}\n      <TokenImage\n        src={src}\n        alt={alt}\n        className={className}\n        appUrl={config.appUrl}\n        onLoad={onLoad}\n        onSetSrc={onSetSrc}\n      />\n    </span>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Shared.NFTImage", "fact_widget_deployments_id": "7fca4757f6e05b8718dbd19f393c20b8", "inserted_timestamp": "2024-03-16T07:26:15.303Z", "modified_timestamp": "2024-03-16T07:26:15.303Z", "__row_index": 7}