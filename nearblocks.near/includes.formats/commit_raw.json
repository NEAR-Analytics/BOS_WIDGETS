{"tx_hash": "5W4jx64hPSoHoJ3tTsaboHxuUwGMSixuPjXwptwH1CCA", "action_id_social": "X5t3kfeT8ZWMUdQ1wLD6DzFwqpjbbFGxDgHSfxTzvaR-0-widget", "block_id": 107681259, "block_timestamp": "2023-12-11T13:26:00.568Z", "signer_id": "nearblocks.near", "widget_name": "includes.formats", "source_code": "import { yoctoToNear } from '@/includes/libs';\n\nexport function localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n\nexport function dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\n\nexport function weight(number) {\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (number >= 1000 && suffixIndex < suffixes.length - 1) {\n    number /= 1000;\n    suffixIndex++;\n  }\n\n  return number.toFixed(2) + ' ' + suffixes[suffixIndex];\n}\n\nexport function convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  const formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    const currentDate = new Date();\n    const differenceInSeconds = Math.floor(\n      (currentDate.getTime() - date.getTime()) / 1000,\n    );\n\n    if (differenceInSeconds < 60) {\n      return 'a few seconds ago';\n    } else if (differenceInSeconds < 3600) {\n      const minutes = Math.floor(differenceInSeconds / 60);\n      return minutes + ' minute' + (minutes !== 1 ? 's' : '') + ' ago';\n    } else if (differenceInSeconds < 86400) {\n      const hours = Math.floor(differenceInSeconds / 3600);\n      return hours + ' hour' + (hours !== 1 ? 's' : '') + ' ago';\n    }\n\n    return formattedDate;\n  }\n\n  return formattedDate;\n}\n\nexport function getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year > 1) {\n    return Math.floor(intervals.year) + ' years ago';\n  } else if (intervals.month > 1) {\n    return Math.floor(intervals.month) + ' months ago';\n  } else if (intervals.week > 1) {\n    return Math.floor(intervals.week) + ' weeks ago';\n  } else if (intervals.day > 1) {\n    return Math.floor(intervals.day) + ' days ago';\n  } else if (intervals.hour > 1) {\n    return Math.floor(intervals.hour) + ' hours ago';\n  } else if (intervals.minute > 1) {\n    return Math.floor(intervals.minute) + ' minutes ago';\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nexport function formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nexport function formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nexport function convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  return number.toFixed(2) + prefixes[count];\n}\n\nexport function gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nexport function currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nexport function formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nexport function formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nexport function shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/includes.formats", "fact_widget_deployments_id": "6abac8a49b09b8482bc6add641a0441e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}