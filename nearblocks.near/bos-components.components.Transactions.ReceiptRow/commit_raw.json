{"tx_hash": "3cJQ3pdoa8GTkojyzMvHzwyzmcNZs5FXQ6Gh4ZfqGENA", "action_id_social": "5YrF1tUpjRmcR7wBut5XAASmAtPhf149LAWGuCy45T1o-0-widget", "block_id": 114805259, "block_timestamp": "2024-03-16T06:01:19.462Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Transactions.ReceiptRow", "source_code": "/**\n * Component: TransactionsReceiptRow\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of Transaction Receipt Row on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {TransactionInfo} [txn] - Information related to a transaction.\n * @param {RPCTransactionInfo} [rpcTxn] - RPC data of the transaction.\n * @param {ReceiptsPropsInfo} [receipt] -  receipt of the transaction.\n * @param {React.FC<{\n *   href: string;\n *   children: React.ReactNode;\n *   className?: string;\n * }>} Link - A React component for rendering links.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Question.jsx\" */\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Question.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction convertToMetricPrefix(numberStr) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let result = new Big(numberStr);\n  let count = 0;\n\n  while (result.abs().gte('1e3') && count < prefixes.length - 1) {\n    result = result.div(1e3);\n    count++;\n  }\n\n  // Check if the value is an integer or has more than two digits before the decimal point\n  if (result.abs().lt(1e2) && result.toFixed(2) !== result.toFixed(0)) {\n    result = result.toFixed(2);\n  } else {\n    result = result.toFixed(0);\n  }\n\n  return result.toString() + ' ' + prefixes[count];\n}\n\nfunction formatNumber(value) {\n  let bigValue = new Big(value);\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (bigValue.gte(10000) && suffixIndex < suffixes.length - 1) {\n    bigValue = bigValue.div(1000);\n    suffixIndex++;\n  }\n\n  const formattedValue = bigValue.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near}`;\n}\n\nfunction currency(number) {\n  let absNumber = new Big(number).abs();\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber.gte(1000) && suffixIndex < suffixes.length - 1) {\n    absNumber = absNumber.div(1000); // Divide using big.js's div method\n    suffixIndex++;\n  }\n\n  const formattedNumber = absNumber.toFixed(2); // Format with 2 decimal places\n\n  return (\n    (number < '0' ? '-' : '') + formattedNumber + ' ' + suffixes[suffixIndex]\n  );\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\n\nfunction toSnakeCase(str) {\n  return str\n    .replace(/[A-Z]/g, (match) => '_' + match.toLowerCase())\n    .replace(/^_/, '');\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\n\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\n\nfunction dollarNonCentFormat(number) {\n  const bigNumber = new Big(number).toFixed(0);\n\n  // Extract integer part and format with commas\n  const integerPart = bigNumber.toString();\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  return formattedInteger;\n}\n\nfunction weight(number) {\n  let sizeInBytes = new Big(number);\n\n  if (sizeInBytes.lt(0)) {\n    throw new Error('Invalid input. Please provide a non-negative number.');\n  }\n\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (sizeInBytes.gte(1000) && suffixIndex < suffixes.length - 1) {\n    sizeInBytes = sizeInBytes.div(1000); // Assign the result back to sizeInBytes\n    suffixIndex++;\n  }\n\n  const formattedSize = sizeInBytes.toFixed(2) + ' ' + suffixes[suffixIndex];\n\n  return formattedSize;\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year >= 1) {\n    return (\n      Math.floor(intervals.year) +\n      ' year' +\n      (Math.floor(intervals.year) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.month >= 1) {\n    return (\n      Math.floor(intervals.month) +\n      ' month' +\n      (Math.floor(intervals.month) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.day >= 1) {\n    return (\n      Math.floor(intervals.day) +\n      ' day' +\n      (Math.floor(intervals.day) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.hour >= 1) {\n    return (\n      Math.floor(intervals.hour) +\n      ' hour' +\n      (Math.floor(intervals.hour) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.minute >= 1) {\n    return (\n      Math.floor(intervals.minute) +\n      ' minute' +\n      (Math.floor(intervals.minute) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(numberStr) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let result = new Big(numberStr);\n  let count = 0;\n\n  while (result.abs().gte('1e3') && count < prefixes.length - 1) {\n    result = result.div(1e3);\n    count++;\n  }\n\n  // Check if the value is an integer or has more than two digits before the decimal point\n  if (result.abs().lt(1e2) && result.toFixed(2) !== result.toFixed(0)) {\n    result = result.toFixed(2);\n  } else {\n    result = result.toFixed(0);\n  }\n\n  return result.toString() + ' ' + prefixes[count];\n}\n\nfunction formatNumber(value) {\n  let bigValue = new Big(value);\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (bigValue.gte(10000) && suffixIndex < suffixes.length - 1) {\n    bigValue = bigValue.div(1000);\n    suffixIndex++;\n  }\n\n  const formattedValue = bigValue.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near}`;\n}\n\nfunction currency(number) {\n  let absNumber = new Big(number).abs();\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber.gte(1000) && suffixIndex < suffixes.length - 1) {\n    absNumber = absNumber.div(1000); // Divide using big.js's div method\n    suffixIndex++;\n  }\n\n  const formattedNumber = absNumber.toFixed(2); // Format with 2 decimal places\n\n  return (\n    (number < '0' ? '-' : '') + formattedNumber + ' ' + suffixes[suffixIndex]\n  );\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\n\nfunction toSnakeCase(str) {\n  return str\n    .replace(/[A-Z]/g, (match) => '_' + match.toLowerCase())\n    .replace(/^_/, '');\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.mainnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.testnet.near.org/',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 2592000) {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 31536000) {\n    const monthsAgo = Math.floor(secondsAgo / 2592000);\n    return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const yearsAgo = Math.floor(secondsAgo / 31536000);\n    return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  const value = Big(big).mul(Big(price));\n  const stringValue = value.toFixed(6); // Set the desired maximum fraction digits\n\n  const [integerPart, fractionalPart] = stringValue.split('.');\n\n  // Format integer part with commas\n  const formattedIntegerPart = integerPart.replace(\n    /\\B(?=(\\d{3})+(?!\\d))/g,\n    ',',\n  );\n\n  // Combine formatted integer and fractional parts\n  const formattedNumber = fractionalPart\n    ? `${formattedIntegerPart}.${fractionalPart}`\n    : formattedIntegerPart;\n\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return Big(nano).div(Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.mainnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.testnet.near.org/',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 2592000) {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 31536000) {\n    const monthsAgo = Math.floor(secondsAgo / 2592000);\n    return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const yearsAgo = Math.floor(secondsAgo / 31536000);\n    return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Receipts/ReceiptStatus.jsx\" */\n/* INCLUDE: \"includes/hexy.jsx\" */\nfunction hexy(buffer, config) {\n  const MAX_ADDRESS_LENGTH = 8;\n  const defaults = {\n    width: 16,\n    numbering: 'hex_bytes',\n    format: 'fours',\n    littleEndian: false,\n    radix: 16,\n    caps: 'lower',\n    annotate: 'ascii',\n    prefix: '',\n    indent: 0,\n    html: false,\n    offset: 0,\n    length: -1,\n    extendedChs: false,\n    display_offset: 0,\n  };\n  const options = { ...defaults, ...config };\n\n  let bufferData;\n  if (Buffer.isBuffer(buffer)) {\n    bufferData = buffer;\n  } else if (Array.isArray(buffer)) {\n    bufferData = Buffer.from(buffer);\n  } else {\n    throw new Error('Input must be a Buffer or an array of numbers.');\n  }\n\n  const {\n    width,\n    numbering,\n    format,\n    littleEndian,\n    radix,\n    annotate,\n    indent,\n    html,\n    offset,\n    length,\n    extendedChs,\n    display_offset,\n  } = options;\n\n  const prefixSpaces = ' '.repeat(indent);\n  const htmlOpenTag = html ? \"<div class='hexy'>\\n\" : '';\n  const htmlCloseTag = html ? '</div>\\n' : '';\n\n  const bufferSlice = bufferData.slice(\n    offset,\n    length === -1 ? undefined : offset + length,\n  );\n  let str = htmlOpenTag;\n  let addr = offset + display_offset;\n\n  const numGroups = Math.ceil(bufferSlice.length / width);\n\n  for (let group = 0; group < numGroups; group++) {\n    const startIndex = group * width;\n    const endIndex = Math.min(startIndex + width, bufferSlice.length);\n    const slice = bufferSlice.slice(startIndex, endIndex);\n\n    if (html) {\n      str += `<div class='${num2str(addr, MAX_ADDRESS_LENGTH, 16)}'>`;\n    }\n\n    str += `${prefixSpaces}${\n      numbering === 'hex_bytes'\n        ? num2str(addr, MAX_ADDRESS_LENGTH, 16) + ': '\n        : ''\n    }`;\n    str += hex(slice, width, format, radix, littleEndian);\n\n    if (annotate === 'ascii') {\n      str += ` ${\n        html\n          ? html_escape(getTextRepresentation(slice, extendedChs))\n          : ascii_escape(getTextRepresentation(slice, extendedChs))\n      }`;\n    }\n\n    str += html ? '</div>\\n' : '\\n';\n    addr += width;\n  }\n\n  str += htmlCloseTag;\n\n  return str;\n}\n\nfunction hex(\n  buffer,\n  width,\n  format,\n  radix,\n  littleEndian,\n) {\n  let str = '';\n  const delimiter = format === 'none' ? '' : ' ';\n  const group_len = maxnumberlen(format === 'none' ? 1 : 2, radix);\n  const padlen =\n    (width - buffer.length) *\n    (format === 'none' ? group_len : (group_len + 1) / 2);\n\n  const numGroups = Math.ceil(buffer.length / 2);\n\n  for (let group = 0; group < numGroups; ++group) {\n    const startIndex = group * 2;\n    const endIndex = Math.min(startIndex + 2, buffer.length);\n    const bytes = buffer.slice(startIndex, endIndex);\n\n    if (bytes.length === 0) break;\n\n    if (bytes.length === 2) {\n      let val = littleEndian ? bytes.readUInt16LE(0) : bytes.readUInt16BE(0);\n      const text = val.toString(radix);\n      str += '0'.repeat(group_len - text.length) + text;\n      str += delimiter;\n    } else {\n      str += '0'.repeat(group_len);\n      str += delimiter;\n    }\n  }\n\n  if (buffer.length < width) {\n    str += ' '.repeat(padlen);\n  }\n\n  return str;\n}\n\nfunction num2str(b, len, radix) {\n  const s = b.toString(radix);\n  return '0'.repeat(len - s.length) + s;\n}\n\nfunction maxnumberlen(bytes, radix) {\n  let result = 2;\n  if (bytes === 0) {\n    bytes = 1;\n  }\n  switch (radix) {\n    case 2:\n      result = bytes * 8;\n      break;\n    case 8:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 11;\n          break;\n        case 8:\n          result = 22;\n          break;\n      }\n      break;\n    case 10:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 10;\n          break;\n        case 8:\n          result = 20;\n          break;\n      }\n      break;\n    case 16:\n      result = 2 * bytes;\n      break;\n  }\n  return result;\n}\n\nfunction getTextRepresentation(buffer, extendedChs) {\n  let text = '';\n  for (const byte of buffer) {\n    if (extendedChs) {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    } else {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    }\n  }\n  return text;\n}\n\nfunction ascii_escape(str) {\n  return str.replace(/[^\\x20-\\x7E]/g, '.');\n}\n\nfunction html_escape(str) {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\'/g, '&apos;')\n    .replace(/\\\"/g, '&quot;')\n    .replace(/[^\\x20-\\x7E]/g, function (ch) {\n      return '&#x' + ch.codePointAt(0)?.toString(16) + ';';\n    });\n}\n/* END_INCLUDE: \"includes/hexy.jsx\" */\n\n\nconst ReceiptStatus = (props) => {\n  const { receipt } = props;\n\n  function displayArgs(args) {\n    if (!args || typeof args === 'undefined') return 'The arguments are empty';\n\n    let pretty = '';\n    const decoded = Buffer.from(args, 'base64');\n\n    try {\n      const parsed = JSON.parse(decoded.toString());\n      if (parsed) {\n        pretty = JSON.stringify(parsed, null, 2);\n      } else {\n        pretty = hexy(decoded, { format: 'twos' });\n      }\n    } catch {\n      pretty = hexy(decoded, { format: 'twos' });\n    }\n\n    return pretty;\n  }\n\n  const status = receipt.outcome.status;\n  if (status && 'SuccessValue' in status) {\n    const { SuccessValue } = status;\n\n    if (SuccessValue === null || SuccessValue === undefined) {\n      return 'No Result';\n    }\n\n    if (Array.isArray(SuccessValue) || typeof SuccessValue === 'string') {\n      if (SuccessValue.length === 0) {\n        return 'Empty Result';\n      }\n    }\n\n    return (\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={displayArgs(SuccessValue)}\n        className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 p-3 mt-3 resize-y\"\n      ></textarea>\n    );\n  }\n\n  if (status && 'Failure' in status) {\n    return (\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={JSON.stringify(status.Failure, null, 2)}\n        className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 p-3 mt-3 resize-y\"\n      ></textarea>\n    );\n  }\n\n  if (status && 'SuccessReceiptId' in status) {\n    return status.SuccessReceiptId;\n  }\n\n  return '';\n};/* END_INCLUDE COMPONENT: \"includes/Common/Receipts/ReceiptStatus.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Receipts/TransactionActions.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\n\nfunction toSnakeCase(str) {\n  return str\n    .replace(/[A-Z]/g, (match) => '_' + match.toLowerCase())\n    .replace(/^_/, '');\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst FaKey = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 512 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M512 176.001C512 273.203 433.202 352 336 352c-11.22 0-22.19-1.062-32.827-3.069l-24.012 27.014A23.999 23.999 0 0 1 261.223 384H224v40c0 13.255-10.745 24-24 24h-40v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-78.059c0-6.365 2.529-12.47 7.029-16.971l161.802-161.802C163.108 213.814 160 195.271 160 176 160 78.798 238.797.001 335.999 0 433.488-.001 512 78.511 512 176.001zM336 128c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48-48 21.49-48 48z\"></path>\n    </svg>\n  );\n};\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst AddKey = (props) => {\n  if (typeof props.args.access_key?.permission !== 'object') {\n    return (\n      <div className=\"py-1\">\n        <FaKey className=\"inline-flex text-emerald-400 mr-1\" />{' '}\n        {props.t ? props.t('txns:txn.actions.addKey.0') : 'New key'} (\n        <span className=\"font-bold\">{shortenHex(props.args.public_key)}</span>){' '}\n        {props.t ? props.t('txns:txn.actions.addKey.2') : 'added for'}\n        <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 font-bold hover:no-underline\">\n            {shortenAddress(props.receiver)}\n          </a>\n        </a>{' '}\n        {props.t ? props.t('txns:txn.actions.addKey.4') : 'with permission'}\n        <span className=\"font-bold\">{props.args.access_key?.permission}</span>\n      </div>\n    );\n  }\n\n  if (props.args.access_key.permission.permission_kind) {\n    return (\n      <div className=\"py-1\">\n        <FaKey className=\"inline-flex text-gray-400 mr-1\" />{' '}\n        {props.t ? props.t('txns:txn.actions.addKey.0') : 'New key'} (\n        <span className=\"font-bold\">{shortenHex(props.args.public_key)}</span>)\n        {props.t ? props.t('txns:txn.actions.addKey.2') : 'added for'}{' '}\n        <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 font-bold hover:no-underline\">\n            {shortenAddress(props.receiver)}\n          </a>\n        </a>{' '}\n        {props.t ? props.t('txns:txn.actions.addKey.4') : 'with permission'}{' '}\n        <span className=\"font-bold\">\n          {props.args.access_key.permission.permission_kind}\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-1\">\n      <FaKey className=\"inline-flex text-gray-400 mr-1\" />{' '}\n      {props.t ? props.t('txns:txn.actions.addKey.1') : 'Access key'} (\n      <span className=\"font-bold\">{shortenHex(props.args.public_key)}</span>){' '}\n      {props.t ? props.t('txns:txn.actions.addKey.2') : 'added for'}\n      {props.t ? props.t('txns:txn.actions.addKey.3') : 'contract'}\n      <a\n        href={`/address/${props.args.access_key.permission.FunctionCall.receiver_id}`}\n        className=\"hover:no-underline\"\n      >\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(\n            props.args.access_key.permission.FunctionCall.receiver_id,\n          )}\n        </a>\n      </a>{' '}\n      {props.t ? props.t('txns:txn.actions.addKey.4') : 'with permission'}\n      {props.t ? props.t('txns:txn.actions.addKey.5') : 'to call'}\n      <span className=\"font-bold\">\n        {props.args.access_key.permission.FunctionCall.method_names.length > 0\n          ? props.args.access_key.permission.FunctionCall.method_names.join(\n              ', ',\n            )\n          : 'any'}{' '}\n      </span>\n      {props.t ? props.t('txns:txn.actions.addKey.6') : 'methods'}\n    </div>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst FaUser = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 448 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z\"></path>\n    </svg>\n  );\n};\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\nconst CreateAccount = (props) => {\n  return (\n    <div className=\"py-1\">\n      <FaUser className=\"inline-flex text-emerald-400 mr-1\" />{' '}\n      {props.t ? props.t('txns:txn.actions.createAccount.0') : 'New account'} (\n      <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(props.receiver)}\n        </a>\n      </a>\n      ) {props.t ? props.t('txns:txn.actions.createAccount.1') : 'created'}\n    </div>\n  );\n};\n\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst DeleteAccount = (props) => {\n  return (\n    <div className=\"py-1\">\n      <FaUser className=\"inline-flex text-red-400 mr-1\" />\n      {props.t\n        ? props.t('txns:txn.actions.deleteAccount.0')\n        : 'Delete account'}{' '}\n      (\n      <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(props.receiver)}\n        </a>\n      </a>\n      ){' '}\n      {props.t\n        ? props.t('txns:txn.actions.deleteAccount.1')\n        : 'and transfer remaining funds to'}\n      <a\n        href={`/address/${props.args.beneficiary_id}`}\n        className=\"hover:no-underline\"\n      >\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(props.args.beneficiary_id)}\n        </a>\n      </a>\n    </div>\n  );\n};\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\n\nfunction toSnakeCase(str) {\n  return str\n    .replace(/[A-Z]/g, (match) => '_' + match.toLowerCase())\n    .replace(/^_/, '');\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n\n\n\nconst DeleteKey = (props) => {\n  const { t, args } = props;\n\n  return (\n    <div className=\"py-1\">\n      <FaKey className=\"inline-flex text-red-400 mr-1\" />{' '}\n      {t ? t('txns:txn.actions.deleteKey.0') : 'Key'} (\n      <span className=\"font-bold\">{shortenHex(args.public_key)}</span>){' '}\n      {t ? t('txns:txn.actions.deleteKey.1') : 'deleted'}\n    </div>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst FaCode = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 640 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"></path>\n    </svg>\n  );\n};\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst DeployContract = (props) => {\n  const { t, receiver } = props;\n\n  return (\n    <div className=\"py-1\">\n      <FaCode className=\"inline-flex text-emerald-400 mr-1\" />{' '}\n      {t ? t('txns:txn.actions.deployContract.0') : 'Contract'} (\n      <a href={`/address/${receiver}`} className=\"hover:no-underline\">\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(receiver)}\n        </a>\n      </a>\n      ) {t ? t('txns:txn.actions.deployContract.1') : 'deployed'}\n    </div>\n  );\n};\n/* INCLUDE: \"includes/hexy.jsx\" */\nfunction hexy(buffer, config) {\n  const MAX_ADDRESS_LENGTH = 8;\n  const defaults = {\n    width: 16,\n    numbering: 'hex_bytes',\n    format: 'fours',\n    littleEndian: false,\n    radix: 16,\n    caps: 'lower',\n    annotate: 'ascii',\n    prefix: '',\n    indent: 0,\n    html: false,\n    offset: 0,\n    length: -1,\n    extendedChs: false,\n    display_offset: 0,\n  };\n  const options = { ...defaults, ...config };\n\n  let bufferData;\n  if (Buffer.isBuffer(buffer)) {\n    bufferData = buffer;\n  } else if (Array.isArray(buffer)) {\n    bufferData = Buffer.from(buffer);\n  } else {\n    throw new Error('Input must be a Buffer or an array of numbers.');\n  }\n\n  const {\n    width,\n    numbering,\n    format,\n    littleEndian,\n    radix,\n    annotate,\n    indent,\n    html,\n    offset,\n    length,\n    extendedChs,\n    display_offset,\n  } = options;\n\n  const prefixSpaces = ' '.repeat(indent);\n  const htmlOpenTag = html ? \"<div class='hexy'>\\n\" : '';\n  const htmlCloseTag = html ? '</div>\\n' : '';\n\n  const bufferSlice = bufferData.slice(\n    offset,\n    length === -1 ? undefined : offset + length,\n  );\n  let str = htmlOpenTag;\n  let addr = offset + display_offset;\n\n  const numGroups = Math.ceil(bufferSlice.length / width);\n\n  for (let group = 0; group < numGroups; group++) {\n    const startIndex = group * width;\n    const endIndex = Math.min(startIndex + width, bufferSlice.length);\n    const slice = bufferSlice.slice(startIndex, endIndex);\n\n    if (html) {\n      str += `<div class='${num2str(addr, MAX_ADDRESS_LENGTH, 16)}'>`;\n    }\n\n    str += `${prefixSpaces}${\n      numbering === 'hex_bytes'\n        ? num2str(addr, MAX_ADDRESS_LENGTH, 16) + ': '\n        : ''\n    }`;\n    str += hex(slice, width, format, radix, littleEndian);\n\n    if (annotate === 'ascii') {\n      str += ` ${\n        html\n          ? html_escape(getTextRepresentation(slice, extendedChs))\n          : ascii_escape(getTextRepresentation(slice, extendedChs))\n      }`;\n    }\n\n    str += html ? '</div>\\n' : '\\n';\n    addr += width;\n  }\n\n  str += htmlCloseTag;\n\n  return str;\n}\n\nfunction hex(\n  buffer,\n  width,\n  format,\n  radix,\n  littleEndian,\n) {\n  let str = '';\n  const delimiter = format === 'none' ? '' : ' ';\n  const group_len = maxnumberlen(format === 'none' ? 1 : 2, radix);\n  const padlen =\n    (width - buffer.length) *\n    (format === 'none' ? group_len : (group_len + 1) / 2);\n\n  const numGroups = Math.ceil(buffer.length / 2);\n\n  for (let group = 0; group < numGroups; ++group) {\n    const startIndex = group * 2;\n    const endIndex = Math.min(startIndex + 2, buffer.length);\n    const bytes = buffer.slice(startIndex, endIndex);\n\n    if (bytes.length === 0) break;\n\n    if (bytes.length === 2) {\n      let val = littleEndian ? bytes.readUInt16LE(0) : bytes.readUInt16BE(0);\n      const text = val.toString(radix);\n      str += '0'.repeat(group_len - text.length) + text;\n      str += delimiter;\n    } else {\n      str += '0'.repeat(group_len);\n      str += delimiter;\n    }\n  }\n\n  if (buffer.length < width) {\n    str += ' '.repeat(padlen);\n  }\n\n  return str;\n}\n\nfunction num2str(b, len, radix) {\n  const s = b.toString(radix);\n  return '0'.repeat(len - s.length) + s;\n}\n\nfunction maxnumberlen(bytes, radix) {\n  let result = 2;\n  if (bytes === 0) {\n    bytes = 1;\n  }\n  switch (radix) {\n    case 2:\n      result = bytes * 8;\n      break;\n    case 8:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 11;\n          break;\n        case 8:\n          result = 22;\n          break;\n      }\n      break;\n    case 10:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 10;\n          break;\n        case 8:\n          result = 20;\n          break;\n      }\n      break;\n    case 16:\n      result = 2 * bytes;\n      break;\n  }\n  return result;\n}\n\nfunction getTextRepresentation(buffer, extendedChs) {\n  let text = '';\n  for (const byte of buffer) {\n    if (extendedChs) {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    } else {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    }\n  }\n  return text;\n}\n\nfunction ascii_escape(str) {\n  return str.replace(/[^\\x20-\\x7E]/g, '.');\n}\n\nfunction html_escape(str) {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\'/g, '&apos;')\n    .replace(/\\\"/g, '&quot;')\n    .replace(/[^\\x20-\\x7E]/g, function (ch) {\n      return '&#x' + ch.codePointAt(0)?.toString(16) + ';';\n    });\n}\n/* END_INCLUDE: \"includes/hexy.jsx\" */\n\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst FunctionCall = (props) => {\n  const { t, args, receiver } = props;\n\n  function displayArgs(args) {\n    if (!args || typeof args === 'undefined') return 'The arguments are empty';\n\n    let pretty = '';\n    const decoded = Buffer.from(args, 'base64');\n    try {\n      const parsed = JSON.parse(decoded.toString());\n      if (parsed) {\n        pretty = JSON.stringify(parsed, null, 2);\n      } else {\n        pretty = hexy(decoded, { format: 'twos' });\n      }\n    } catch {\n      pretty = hexy(decoded, { format: 'twos' });\n    }\n\n    return pretty;\n  }\n\n  return (\n    <div className=\"py-1\">\n      <FaCode className=\"inline-flex text-yellow-500 mr-1\" />\n      {t ? t('txns:txn.actions.functionCall.0') : 'Called method'}\n      <span className=\"font-bold\">{args?.method_name}</span>{' '}\n      {t ? t('txns:txn.actions.functionCall.1') : 'in contract'}\n      <a href={`/address/${receiver}`} className=\"hover:no-underline\">\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(receiver)}\n        </a>\n      </a>\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={displayArgs(args?.args_base64 || args?.args)}\n        className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 p-3 mt-3 resize-y\"\n      ></textarea>\n    </div>\n  );\n};\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\n\nfunction toSnakeCase(str) {\n  return str\n    .replace(/[A-Z]/g, (match) => '_' + match.toLowerCase())\n    .replace(/^_/, '');\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst FaCoins = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"16\"\n      width=\"16\"\n      viewBox=\"0 0 512 512\"\n      {...props}\n    >\n      <path\n        fill=\"#eab308\"\n        d=\"M512 80c0 18-14.3 34.6-38.4 48c-29.1 16.1-72.5 27.5-122.3 30.9c-3.7-1.8-7.4-3.5-11.3-5C300.6 137.4 248.2 128 192 128c-8.3 0-16.4 .2-24.5 .6l-1.1-.6C142.3 114.6 128 98 128 80c0-44.2 86-80 192-80S512 35.8 512 80zM160.7 161.1c10.2-.7 20.7-1.1 31.3-1.1c62.2 0 117.4 12.3 152.5 31.4C369.3 204.9 384 221.7 384 240c0 4-.7 7.9-2.1 11.7c-4.6 13.2-17 25.3-35 35.5c0 0 0 0 0 0c-.1 .1-.3 .1-.4 .2l0 0 0 0c-.3 .2-.6 .3-.9 .5c-35 19.4-90.8 32-153.6 32c-59.6 0-112.9-11.3-148.2-29.1c-1.9-.9-3.7-1.9-5.5-2.9C14.3 274.6 0 258 0 240c0-34.8 53.4-64.5 128-75.4c10.5-1.5 21.4-2.7 32.7-3.5zM416 240c0-21.9-10.6-39.9-24.1-53.4c28.3-4.4 54.2-11.4 76.2-20.5c16.3-6.8 31.5-15.2 43.9-25.5V176c0 19.3-16.5 37.1-43.8 50.9c-14.6 7.4-32.4 13.7-52.4 18.5c.1-1.8 .2-3.5 .2-5.3zm-32 96c0 18-14.3 34.6-38.4 48c-1.8 1-3.6 1.9-5.5 2.9C304.9 404.7 251.6 416 192 416c-62.8 0-118.6-12.6-153.6-32C14.3 370.6 0 354 0 336V300.6c12.5 10.3 27.6 18.7 43.9 25.5C83.4 342.6 135.8 352 192 352s108.6-9.4 148.1-25.9c7.8-3.2 15.3-6.9 22.4-10.9c6.1-3.4 11.8-7.2 17.2-11.2c1.5-1.1 2.9-2.3 4.3-3.4V304v5.7V336zm32 0V304 278.1c19-4.2 36.5-9.5 52.1-16c16.3-6.8 31.5-15.2 43.9-25.5V272c0 10.5-5 21-14.9 30.9c-16.3 16.3-45 29.7-81.3 38.4c.1-1.7 .2-3.5 .2-5.3zM192 448c56.2 0 108.6-9.4 148.1-25.9c16.3-6.8 31.5-15.2 43.9-25.5V432c0 44.2-86 80-192 80S0 476.2 0 432V396.6c12.5 10.3 27.6 18.7 43.9 25.5C83.4 438.6 135.8 448 192 448z\"\n      />\n    </svg>\n  );\n};\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  const value = Big(big).mul(Big(price));\n  const stringValue = value.toFixed(6); // Set the desired maximum fraction digits\n\n  const [integerPart, fractionalPart] = stringValue.split('.');\n\n  // Format integer part with commas\n  const formattedIntegerPart = integerPart.replace(\n    /\\B(?=(\\d{3})+(?!\\d))/g,\n    ',',\n  );\n\n  // Combine formatted integer and fractional parts\n  const formattedNumber = fractionalPart\n    ? `${formattedIntegerPart}.${fractionalPart}`\n    : formattedIntegerPart;\n\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return Big(nano).div(Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.mainnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.testnet.near.org/',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 2592000) {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 31536000) {\n    const monthsAgo = Math.floor(secondsAgo / 2592000);\n    return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const yearsAgo = Math.floor(secondsAgo / 31536000);\n    return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst Stake = (props) => {\n  const { t, args } = props;\n\n  return (\n    <div className=\"py-1\">\n      <FaCoins className=\"inline-flex text-yellow-500 mr-1\" />\n      {t ? t('txns:txn.actions.stake.0') : 'Staked'}\n      <span className=\"font-bold\">\n        {args.stake ? yoctoToNear(args.stake, true) : args.stake ?? ''}\u24c3\n      </span>{' '}\n      {t ? t('txns:txn.actions.stake.1') : 'with'} {shortenHex(args.public_key)}\n    </div>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst FaArrowAltCircleRight = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 512 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zM140 300h116v70.9c0 10.7 13 16.1 20.5 8.5l114.3-114.9c4.7-4.7 4.7-12.2 0-16.9l-114.3-115c-7.6-7.6-20.5-2.2-20.5 8.5V212H140c-6.6 0-12 5.4-12 12v64c0 6.6 5.4 12 12 12z\"></path>\n    </svg>\n  );\n};\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  const value = Big(big).mul(Big(price));\n  const stringValue = value.toFixed(6); // Set the desired maximum fraction digits\n\n  const [integerPart, fractionalPart] = stringValue.split('.');\n\n  // Format integer part with commas\n  const formattedIntegerPart = integerPart.replace(\n    /\\B(?=(\\d{3})+(?!\\d))/g,\n    ',',\n  );\n\n  // Combine formatted integer and fractional parts\n  const formattedNumber = fractionalPart\n    ? `${formattedIntegerPart}.${fractionalPart}`\n    : formattedIntegerPart;\n\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return Big(nano).div(Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.mainnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://beta.rpc.testnet.near.org/',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 2592000) {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 31536000) {\n    const monthsAgo = Math.floor(secondsAgo / 2592000);\n    return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const yearsAgo = Math.floor(secondsAgo / 31536000);\n    return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst Transfer = (props) => {\n  const { t, args, receiver } = props;\n\n  return (\n    <div className=\"py-1\">\n      <FaArrowAltCircleRight className=\"inline-flex text-green-400 mr-1\" />{' '}\n      {t ? t('txns:txn.actions.transfer.0') : 'Transferred'}\n      <span className=\"font-bold\">\n        {args.deposit ? yoctoToNear(args.deposit, true) : args.deposit ?? ''} \u24c3\n      </span>{' '}\n      {t ? t('txns:txn.actions.transfer.1') : 'to'}\n      <a href={`/address/${receiver}`} className=\"hover:no-underline\">\n        <a className=\"text-green-500 font-bold hover:no-underline\">\n          {shortenAddress(receiver)}\n        </a>\n      </a>\n    </div>\n  );\n};\n\nconst TransactionActions = (props) => {\n  const { action, receiver, t } = props;\n\n  switch (action.action_kind) {\n    case 'ADD_KEY':\n    case 'AddKey':\n      return <AddKey args={action.args} receiver={receiver} t={t} />;\n    case 'CREATE_ACCOUNT':\n    case 'CreateAccount':\n      return <CreateAccount args={action.args} receiver={receiver} t={t} />;\n    case 'DELETE_ACCOUNT':\n    case 'DeleteAccount':\n      return <DeleteAccount args={action.args} receiver={receiver} t={t} />;\n    case 'DELETE_KEY':\n    case 'DeleteKey':\n      return <DeleteKey args={action.args} receiver={receiver} t={t} />;\n    case 'DEPLOY_CONTRACT':\n    case 'DeployContract':\n      return <DeployContract args={action.args} receiver={receiver} t={t} />;\n    case 'FUNCTION_CALL':\n    case 'FunctionCall':\n      return <FunctionCall args={action.args} receiver={receiver} t={t} />;\n    case 'STAKE':\n    case 'Stake':\n      return <Stake args={action.args} receiver={receiver} t={t} />;\n    case 'TRANSFER':\n    case 'Transfer':\n      return <Transfer args={action.args} receiver={receiver} t={t} />;\n    default:\n      return <div>{action.action_kind}</div>;\n  }\n};/* END_INCLUDE COMPONENT: \"includes/Common/Receipts/TransactionActions.jsx\" */\n\nfunction MainComponent(props) {\n  const { network, receipt, borderFlag, t, Link } = props;\n  const [block, setBlock] = useState({} );\n  const [loading, setLoading] = useState(false);\n  const config = getConfig(network);\n\n  useEffect(() => {\n    function fetchBlocks() {\n      setLoading(true);\n      if (receipt?.block_hash) {\n        asyncFetch(`${config.backendUrl}blocks/${receipt?.block_hash}`)\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.blocks?.[0];\n              if (res.status === 200) {\n                setBlock({\n                  author_account_id: resp.author_account_id,\n                  block_hash: resp.author_account_id,\n                  block_height: resp.block_height,\n                  block_timestamp: resp.block_timestamp,\n                  chunks_agg: resp.chunks_agg,\n                  gas_price: resp.gas_price,\n                  prev_block_hash: resp.author_account_id,\n                  receipts_agg: resp.receipts_agg,\n                  transactions_agg: resp.transactions_agg,\n                });\n                setLoading(false);\n              } else {\n                handleRateLimit(res, fetchBlocks, () => setLoading(false));\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n\n    fetchBlocks();\n  }, [receipt?.block_hash, config.backendUrl]);\n\n  const Loader = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 h-5 rounded shadow-sm animate-pulse ${props.className}`}\n      ></div>\n    );\n  };\n  return (\n    <div className=\"divide-solid divide-gray-200 divide-y\">\n      <div\n        className={borderFlag ? '' : 'border-l-4 border-green-400 ml-8 my-2'}\n      >\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.receipts.receipt.tooltip')\n                    : 'Unique identifier (hash) of this receipt.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.receipts.receipt.text.0') : 'Receipt'}\n          </div>\n          {!receipt || loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 font-semibold word-break\">\n              {receipt?.receipt_id ? receipt?.receipt_id : ''}\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  Block height\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.receipts.block.text.0') : 'Block'}\n          </div>\n          {!receipt || loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n            </div>\n          ) : block?.block_height ? (\n            <div className=\"w-full md:w-3/4 word-break\">\n              <Link\n                href={`/blocks/${receipt.block_hash}`}\n                className=\"hover:no-underline\"\n              >\n                <a className=\"text-green-500 hover:no-underline\">\n                  {localFormat(block?.block_height)}\n                </a>\n              </Link>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div>\n          <div className=\"flex flex-wrap p-4\">\n            <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <div>\n                      <Question className=\"w-4 h-4 fill-current mr-1\" />\n                    </div>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {t\n                      ? t('txns:txn.receipts.from.tooltip')\n                      : 'The account which issued a receipt.'}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n              {t ? t('txns:txn.receipts.from.text.0') : 'From'}\n            </div>\n            {!receipt || loading ? (\n              <div className=\"w-full md:w-3/4\">\n                <Loader wrapperClassName=\"flex w-full max-w-sm\" />\n              </div>\n            ) : receipt?.predecessor_id ? (\n              <div className=\"w-full md:w-3/4 word-break\">\n                <Link\n                  href={`/address/${receipt?.predecessor_id}`}\n                  className=\"hover:no-underline\"\n                >\n                  <a className=\"text-green-500 hover:no-underline\">\n                    {receipt?.predecessor_id}\n                  </a>\n                </Link>\n              </div>\n            ) : (\n              ''\n            )}\n          </div>\n          <div className=\"flex flex-wrap p-4\">\n            <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <div>\n                      <Question className=\"w-4 h-4 fill-current mr-1\" />\n                    </div>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {t\n                      ? t('txns:txn.receipts.to.tooltip')\n                      : 'The destination account of the receipt.'}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n              {t ? t('txns:txn.receipts.to.text.0') : 'To'}\n            </div>\n            {!receipt || loading ? (\n              <div className=\"w-full md:w-3/4\">\n                <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n              </div>\n            ) : receipt?.receiver_id ? (\n              <div className=\"w-full md:w-3/4 word-break\">\n                <Link\n                  href={`/address/${receipt?.receiver_id}`}\n                  className=\"hover:no-underline\"\n                >\n                  <a className=\"text-green-500 hover:no-underline\">\n                    {receipt?.receiver_id}\n                  </a>\n                </Link>\n              </div>\n            ) : (\n              ''\n            )}\n          </div>\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.receipts.burnt.tooltip')\n                    : 'Total amount of Gas & Token burnt from this receipt.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t\n              ? t('txns:txn.receipts.burnt.text.0')\n              : 'Burnt Gas & Tokens by Receipt'}\n          </div>\n          {!receipt || loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-36\" />\n            </div>\n          ) : receipt?.outcome?.gas_burnt ? (\n            <div className=\"w-full items-center text-xs flex md:w-3/4 break-words\">\n              <div className=\"bg-orange-50 rounded-md px-2 py-1\">\n                <span className=\"text-xs mr-2\">\ud83d\udd25 </span>\n                {receipt?.outcome?.gas_burnt\n                  ? convertToMetricPrefix(receipt?.outcome?.gas_burnt) + 'gas'\n                  : ''}\n                <span className=\"text-gray-300 px-1\">|</span>{' '}\n                {receipt?.outcome?.tokens_burnt\n                  ? yoctoToNear(receipt?.outcome?.tokens_burnt, true)\n                  : ''}{' '}\n                \u24c3\n              </div>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div className=\"flex items-start flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.receipts.actions.tooltip')\n                    : 'The actions performed during receipt processing.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.receipts.actions.text.0') : 'Actions'}\n          </div>\n          {!receipt || loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full my-1 max-w-xs\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n            </div>\n          ) : receipt?.actions ? (\n            <div className=\"w-full md:w-3/4 word-break space-y-4\">\n              {receipt?.actions?.map((action, i) => (\n                <TransactionActions\n                  key={i}\n                  action={action}\n                  receiver={receipt?.receiver_id}\n                  t={t}\n                />\n              ))}\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div className=\"flex items-start flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.receipts.result.tooltip')\n                    : 'The result of the receipt execution.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.receipts.result.text.0') : 'Result'}\n          </div>\n          {!receipt || loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words space-y-4\">\n              {receipt ? <ReceiptStatus receipt={receipt} /> : ''}\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-start flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.receipts.logs.tooltip')\n                    : 'Logs included in the receipt.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.receipts.logs.text.0') : 'Logs'}\n          </div>\n          {!receipt || loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words space-y-4\">\n              {receipt?.outcome?.logs?.length > 0 ? (\n                <textarea\n                  readOnly\n                  rows={4}\n                  defaultValue={receipt?.outcome?.logs?.join('\\n')}\n                  className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 p-3 mt-3 resize-y\"\n                ></textarea>\n              ) : (\n                'No Logs'\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      {receipt?.outcome?.outgoing_receipts?.length > 0 && (\n        <div className=\"pb-4\">\n          {receipt?.outcome?.outgoing_receipts?.map((rcpt) => (\n            <div className=\"pl-4 pt-6\" key={rcpt?.receipt_id}>\n              <div className=\"mx-4 border-l-4 border-l-gray-200\">\n                {\n                  <Widget\n                    src={`${config?.ownerId}/widget/bos-components.components.Transactions.ReceiptRow`}\n                    props={{\n                      receipt: rcpt,\n                      borderFlag: true,\n                      network: network,\n                      Link,\n                    }}\n                  />\n                }\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Transactions.ReceiptRow", "fact_widget_deployments_id": "941208d49408fddbdafc6c1f40df3521", "inserted_timestamp": "2024-03-16T07:26:15.303Z", "modified_timestamp": "2024-03-16T07:26:15.303Z", "__row_index": 7}