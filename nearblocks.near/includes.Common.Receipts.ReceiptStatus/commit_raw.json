{"tx_hash": "47ybiMRbgnnXPUP3QjZ81tEjFE4NXc7YSNvNtqEpAM44", "action_id_social": "6dLkXHbwAbsx1q7SjcRVGaKS4UNX42Fh5bNqcdpYgMDX-0-widget", "block_id": 114693761, "block_timestamp": "2024-03-14T13:01:23.338Z", "signer_id": "nearblocks.near", "widget_name": "includes.Common.Receipts.ReceiptStatus", "source_code": "import { formatLine } from '@/includes/near';\n\n\nconst ReceiptStatus = (props) => {\n  const { receipt } = props;\n\n  function hexDump(\n    data,\n    options\n\n\n,\n  ) {\n    const { width, format } = options;\n\n    let result = '';\n    let line = '';\n    const w = width ? width : 16;\n\n    for (let i = 0; i < data.length; i++) {\n      if (i > 0 && i % w === 0) {\n        result += formatLine(line, i - w, format) + '\\n';\n        line = '';\n      }\n\n      const byte = data[i];\n      line += byte.toString(16).padStart(2, '0') + ' ';\n    }\n\n    if (line.length > 0) {\n      result +=\n        formatLine(line, data.length - (data.length % w), format) + '\\n';\n    }\n\n    return result;\n  }\n\n  function displayArgs(args) {\n    if (!args || typeof args === 'undefined') return 'The arguments are empty';\n\n    let pretty = '';\n    const decoded = Buffer.from(args, 'base64');\n\n    try {\n      const parsed = JSON.parse(decoded.toString());\n      if (parsed) {\n        pretty = JSON.stringify(parsed, null, 2);\n      } else {\n        pretty = hexDump(decoded, { format: 'twos' });\n      }\n    } catch {\n      pretty = hexDump(decoded, { format: 'twos' });\n    }\n\n    return pretty;\n  }\n\n  const status = receipt.outcome.status;\n  if (status && 'SuccessValue' in status) {\n    const { SuccessValue } = status;\n\n    if (SuccessValue === null || SuccessValue === undefined) {\n      return 'No Result';\n    }\n\n    if (Array.isArray(SuccessValue) || typeof SuccessValue === 'string') {\n      if (SuccessValue.length === 0) {\n        return 'Empty Result';\n      }\n    }\n\n    return (\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={displayArgs(SuccessValue)}\n        className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 p-3 mt-3 resize-y\"\n      ></textarea>\n    );\n  }\n\n  if (status && 'Failure' in status) {\n    return (\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={JSON.stringify(status.Failure, null, 2)}\n        className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 p-3 mt-3 resize-y\"\n      ></textarea>\n    );\n  }\n\n  if (status && 'SuccessReceiptId' in status) {\n    return status.SuccessReceiptId;\n  }\n\n  return '';\n};\n\nexport default ReceiptStatus;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/includes.Common.Receipts.ReceiptStatus", "fact_widget_deployments_id": "77abbfdf229e72ab0d162d04f3cddd6b", "inserted_timestamp": "2024-03-14T14:27:27.073Z", "modified_timestamp": "2024-03-14T14:27:27.073Z", "__row_index": 3}