{"tx_hash": "DKsphR36qtq3tiNdj1Yk8f4s8Zk4eP4xD31MWbavkqZ4", "action_id_social": "3WdfTbUmxGqciYdQhZjRWUVKQdgW751vQkcBkwnwfkF7-0-widget", "block_id": 111475954, "block_timestamp": "2024-01-27T22:37:59.019Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.FT.Holders", "source_code": "/**\n * Component: FTHolders\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Fungible Token Holders List.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {Token} [token] - The Token type passed as object\n */\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction dollarNonCentFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n  return formattedNumber;\n}\n\nfunction weight(number) {\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (number >= 1000 && suffixIndex < suffixes.length - 1) {\n    number /= 1000;\n    suffixIndex++;\n  }\n\n  return number.toFixed(2) + ' ' + suffixes[suffixIndex];\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year == 1) {\n    return Math.ceil(intervals.year) + ' year ago';\n  } else if (intervals.year > 1) {\n    return Math.ceil(intervals.year) + ' years ago';\n  } else if (intervals.month > 1) {\n    return Math.ceil(intervals.month) + ' months ago';\n  } else if (intervals.day > 1) {\n    return Math.ceil(intervals.day) + ' days ago';\n  } else if (intervals.hour > 1) {\n    return Math.ceil(intervals.hour) + ' hours ago';\n  } else if (intervals.minute > 1) {\n    return Math.ceil(intervals.minute) + ' minutes ago';\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  // Check if the number is close to an integer value\n  if (Math.abs(number) >= 10) {\n    number = Math.round(number); // Round the number to the nearest whole number\n    return number + ' ' + prefixes[count];\n  }\n\n  return (\n    Number(Math.floor(number * 100) / 100).toFixed(2) + ' ' + prefixes[count]\n  );\n}\nfunction formatNumber(value) {\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (value >= 10000 && suffixIndex < suffixes.length - 1) {\n    value /= 1000;\n    suffixIndex++;\n  }\n\n  const formattedValue = value.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n/* INCLUDE: \"includes/near.jsx\" */\nfunction price(amount, decimal, price) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  return dollarFormat(nearAmount.mul(Big(price || 0)).toString());\n}\nfunction mapRpcActionToAction(action) {\n  if (action === 'CreateAccount') {\n    return {\n      action_kind: 'CreateAccount',\n      args: {},\n    };\n  }\n\n  if (typeof action === 'object') {\n    const kind = Object.keys(action)[0];\n\n    return {\n      action_kind: kind,\n      args: action[kind],\n    };\n  }\n\n  return null;\n}\n\nfunction valueFromObj(obj) {\n  const keys = Object.keys(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = obj[key];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (typeof value === 'object') {\n      const nestedValue = valueFromObj(value );\n      if (nestedValue) {\n        return nestedValue;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction txnLogs(txn) {\n  let txLogs = [];\n\n  const outcomes = txn?.receipts_outcome || [];\n\n  for (let i = 0; i < outcomes.length; i++) {\n    const outcome = outcomes[i];\n    let logs = outcome?.outcome?.logs || [];\n\n    if (logs.length > 0) {\n      const mappedLogs = logs.map((log) => ({\n        contract: outcome?.outcome?.executor_id || '',\n        logs: log,\n      }));\n      txLogs = [...txLogs, ...mappedLogs];\n    }\n  }\n\n  return txLogs;\n}\n\nfunction txnActions(txn) {\n  const txActions = [];\n  const receipts = txn?.receipts || [];\n\n  for (let i = 0; i < receipts.length; i++) {\n    const receipt = receipts[i];\n    const from = receipt?.predecessor_id;\n    const to = receipt?.receiver_id;\n\n    if (Array.isArray(receipt?.receipt)) {\n      const actions = receipt.receipt;\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = actions[j];\n\n        txActions.push({ from, to, ...action });\n      }\n    } else {\n      const actions = receipt?.receipt?.Action?.actions || [];\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = mapRpcActionToAction(actions[j]);\n\n        txActions.push({ from, to, ...action });\n      }\n    }\n  }\n\n  return txActions.filter(\n    (action) =>\n      action.action_kind !== 'FunctionCall' && action.from !== 'system',\n  );\n}\n\nfunction txnErrorMessage(txn) {\n  const kind = txn?.status?.Failure?.ActionError?.kind;\n\n  if (typeof kind === 'string') return kind;\n  if (typeof kind === 'object') {\n    return valueFromObj(kind);\n  }\n\n  return null;\n}\n\nfunction formatLine(line, offset, format) {\n  let result = `${offset.toString(16).padStart(8, '0')}  `;\n\n  const bytes = line.split(' ').filter(Boolean);\n  bytes.forEach((byte, index) => {\n    if (index > 0 && index % 4 === 0) {\n      result += ' ';\n    }\n    result += byte.toUpperCase().padEnd(2, ' ') + ' ';\n  });\n\n  if (format === 'default') {\n    result += ` ${String.fromCharCode(\n      ...bytes.map((b) => parseInt(b, 16)),\n    )}`;\n  }\n\n  return result.trimEnd();\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction tokenAmount(amount, decimal, format) {\n  if (amount === undefined || amount === null) return 'N/A';\n  const near = Big(amount).div(Big(10).pow(decimal));\n  const formattedValue = format\n    ? near.toFixed(8).replace(/\\.?0+$/, '')\n    : near.toFixed(decimal).replace(/\\.?0+$/, '');\n  return formattedValue;\n}\n\nfunction tokenPercentage(\n  supply,\n  amount,\n  decimal,\n) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  const nearSupply = Big(supply);\n\n  return nearAmount.div(nearSupply).mul(Big(100)).toFixed(2);\n}\nfunction price(amount, decimal, price) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  return dollarFormat(nearAmount.mul(Big(price || 0)).toString());\n}\nfunction mapRpcActionToAction(action) {\n  if (action === 'CreateAccount') {\n    return {\n      action_kind: 'CreateAccount',\n      args: {},\n    };\n  }\n\n  if (typeof action === 'object') {\n    const kind = Object.keys(action)[0];\n\n    return {\n      action_kind: kind,\n      args: action[kind],\n    };\n  }\n\n  return null;\n}\n\nfunction valueFromObj(obj) {\n  const keys = Object.keys(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = obj[key];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (typeof value === 'object') {\n      const nestedValue = valueFromObj(value );\n      if (nestedValue) {\n        return nestedValue;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction txnLogs(txn) {\n  let txLogs = [];\n\n  const outcomes = txn?.receipts_outcome || [];\n\n  for (let i = 0; i < outcomes.length; i++) {\n    const outcome = outcomes[i];\n    let logs = outcome?.outcome?.logs || [];\n\n    if (logs.length > 0) {\n      const mappedLogs = logs.map((log) => ({\n        contract: outcome?.outcome?.executor_id || '',\n        logs: log,\n      }));\n      txLogs = [...txLogs, ...mappedLogs];\n    }\n  }\n\n  return txLogs;\n}\n\nfunction txnActions(txn) {\n  const txActions = [];\n  const receipts = txn?.receipts || [];\n\n  for (let i = 0; i < receipts.length; i++) {\n    const receipt = receipts[i];\n    const from = receipt?.predecessor_id;\n    const to = receipt?.receiver_id;\n\n    if (Array.isArray(receipt?.receipt)) {\n      const actions = receipt.receipt;\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = actions[j];\n\n        txActions.push({ from, to, ...action });\n      }\n    } else {\n      const actions = receipt?.receipt?.Action?.actions || [];\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = mapRpcActionToAction(actions[j]);\n\n        txActions.push({ from, to, ...action });\n      }\n    }\n  }\n\n  return txActions.filter(\n    (action) =>\n      action.action_kind !== 'FunctionCall' && action.from !== 'system',\n  );\n}\n\nfunction txnErrorMessage(txn) {\n  const kind = txn?.status?.Failure?.ActionError?.kind;\n\n  if (typeof kind === 'string') return kind;\n  if (typeof kind === 'object') {\n    return valueFromObj(kind);\n  }\n\n  return null;\n}\n\nfunction formatLine(line, offset, format) {\n  let result = `${offset.toString(16).padStart(8, '0')}  `;\n\n  const bytes = line.split(' ').filter(Boolean);\n  bytes.forEach((byte, index) => {\n    if (index > 0 && index % 4 === 0) {\n      result += ' ';\n    }\n    result += byte.toUpperCase().padEnd(2, ' ') + ' ';\n  });\n\n  if (format === 'default') {\n    result += ` ${String.fromCharCode(\n      ...bytes.map((b) => parseInt(b, 16)),\n    )}`;\n  }\n\n  return result.trimEnd();\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction tokenPercentage(\n  supply,\n  amount,\n  decimal,\n) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  const nearSupply = Big(supply);\n\n  return nearAmount.div(nearSupply).mul(Big(100)).toFixed(2);\n}\nfunction price(amount, decimal, price) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  return dollarFormat(nearAmount.mul(Big(price || 0)).toString());\n}\nfunction mapRpcActionToAction(action) {\n  if (action === 'CreateAccount') {\n    return {\n      action_kind: 'CreateAccount',\n      args: {},\n    };\n  }\n\n  if (typeof action === 'object') {\n    const kind = Object.keys(action)[0];\n\n    return {\n      action_kind: kind,\n      args: action[kind],\n    };\n  }\n\n  return null;\n}\n\nfunction valueFromObj(obj) {\n  const keys = Object.keys(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = obj[key];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (typeof value === 'object') {\n      const nestedValue = valueFromObj(value );\n      if (nestedValue) {\n        return nestedValue;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction txnLogs(txn) {\n  let txLogs = [];\n\n  const outcomes = txn?.receipts_outcome || [];\n\n  for (let i = 0; i < outcomes.length; i++) {\n    const outcome = outcomes[i];\n    let logs = outcome?.outcome?.logs || [];\n\n    if (logs.length > 0) {\n      const mappedLogs = logs.map((log) => ({\n        contract: outcome?.outcome?.executor_id || '',\n        logs: log,\n      }));\n      txLogs = [...txLogs, ...mappedLogs];\n    }\n  }\n\n  return txLogs;\n}\n\nfunction txnActions(txn) {\n  const txActions = [];\n  const receipts = txn?.receipts || [];\n\n  for (let i = 0; i < receipts.length; i++) {\n    const receipt = receipts[i];\n    const from = receipt?.predecessor_id;\n    const to = receipt?.receiver_id;\n\n    if (Array.isArray(receipt?.receipt)) {\n      const actions = receipt.receipt;\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = actions[j];\n\n        txActions.push({ from, to, ...action });\n      }\n    } else {\n      const actions = receipt?.receipt?.Action?.actions || [];\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = mapRpcActionToAction(actions[j]);\n\n        txActions.push({ from, to, ...action });\n      }\n    }\n  }\n\n  return txActions.filter(\n    (action) =>\n      action.action_kind !== 'FunctionCall' && action.from !== 'system',\n  );\n}\n\nfunction txnErrorMessage(txn) {\n  const kind = txn?.status?.Failure?.ActionError?.kind;\n\n  if (typeof kind === 'string') return kind;\n  if (typeof kind === 'object') {\n    return valueFromObj(kind);\n  }\n\n  return null;\n}\n\nfunction formatLine(line, offset, format) {\n  let result = `${offset.toString(16).padStart(8, '0')}  `;\n\n  const bytes = line.split(' ').filter(Boolean);\n  bytes.forEach((byte, index) => {\n    if (index > 0 && index % 4 === 0) {\n      result += ' ';\n    }\n    result += byte.toUpperCase().padEnd(2, ' ') + ' ';\n  });\n\n  if (format === 'default') {\n    result += ` ${String.fromCharCode(\n      ...bytes.map((b) => parseInt(b, 16)),\n    )}`;\n  }\n\n  return result.trimEnd();\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n/* END_INCLUDE: \"includes/near.jsx\" */\n\n\nfunction MainComponent({ network, id, token }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [totalCount, setTotalCount] = useState(0);\n  const [holder, setHolder] = useState(\n    {},\n  );\n  const [tokens, setTokens] = useState({} );\n  const config = getConfig(network);\n  const errorMessage = 'No token holders found!';\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCurrentPage(currentPage);\n  }, [currentPage]);\n\n  useEffect(() => {\n    function fetchFTData() {\n      asyncFetch(`${config.backendUrl}fts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setTokens(resp);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchTotalHolders() {\n      asyncFetch(`${config?.backendUrl}fts/${id}/holders/count`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.holders?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchHoldersData(page) {\n      setIsLoading(true);\n\n      asyncFetch(\n        `${config?.backendUrl}fts/${id}/holders?page=${currentPage}&per_page=25`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(\n          (data) => {\n            const resp = data?.body?.holders;\n            if (data.status === 200 && Array.isArray(resp) && resp.length > 0) {\n              setHolder((prevData) => ({ ...prevData, [page]: resp || [] }));\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    if (!token && token === undefined) {\n      fetchFTData();\n    }\n    fetchTotalHolders();\n    fetchHoldersData(currentPage);\n  }, [config?.backendUrl, currentPage, id, token]);\n  useEffect(() => {\n    if (token) {\n      setTokens(token);\n    }\n  }, [token]);\n  const columns = [\n    {\n      header: 'Rank',\n      key: '',\n      cell: (_row, index) => (\n        <span>{serialNumber(index, currentPage, 25)}</span>\n      ),\n      tdClassName:\n        'pl-5 pr-2 py-4 whitespace-nowrap text-sm text-nearblue-600 w-[50px]',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[50]',\n    },\n    {\n      header: 'Address',\n      key: 'account',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[200px] inline-block align-bottom text-green-500\">\n                  <a\n                    href={`/address/${row.account}`}\n                    className=\"hover:no-undeline\"\n                  >\n                    <a className=\"text-green-500 font-medium hover:no-undeline\">\n                      {row.account}\n                    </a>\n                  </a>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white p-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {row.account}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName: 'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: 'Quantity',\n      key: '',\n      cell: (row) => (\n        <> {tokenAmount(row.amount, tokens?.decimals, true)}</>\n      ),\n      tdClassName: 'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: 'Percentage',\n      key: 'total_supply',\n      cell: (row) => {\n        const percentage = token?.total_supply\n          ? tokenPercentage(token.total_supply, row.amount, token.decimals)\n          : null;\n        return (\n          <>\n            {percentage === null ? 'N/A' : `${percentage}%`}\n            {percentage !== null && percentage <= 100 && percentage >= 0 && (\n              <div className=\"h-0.5 mt-1 w-full bg-gray-100\">\n                <div\n                  style={{ width: `${percentage}%` }}\n                  className=\"h-0.5 bg-green-500\"\n                />\n              </div>\n            )}\n          </>\n        );\n      },\n      tdClassName:\n        'px-5 py-3 whitespace-nowrap text-sm text-nearblue-600 font-medium',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: 'Value',\n      key: 'tokens',\n      cell: (row) => {\n        return (\n          <span>${price(row.amount, tokens?.decimals, tokens?.price)}</span>\n        );\n      },\n      tdClassName: 'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600',\n      thClassName:\n        'x-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider whitespace-nowrap',\n    },\n  ];\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"pl-3 max-w-sm py-5 h-[60px]\">\n          <Skeleton className=\"h-4\" />\n        </div>\n      ) : (\n        <div className={`flex flex-col lg:flex-row pt-4`}>\n          <div className=\"flex flex-col\">\n            <p className=\"leading-7 px-6 text-sm mb-4 text-nearblue-600\">\n              A total of {localFormat(totalCount)} transactions found\n            </p>\n          </div>\n        </div>\n      )}\n      <Widget\n        src={`${config.ownerId}/widget/bos-components.components.Shared.Table`}\n        props={{\n          columns: columns,\n          data: holder[currentPage],\n          isLoading: isLoading,\n          isPagination: true,\n          count: totalCount,\n          page: currentPage,\n          limit: 25,\n          pageLimit: 200,\n          setPage: setPage,\n          Error: errorMessage,\n        }}\n      />\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.FT.Holders", "fact_widget_deployments_id": "e1a255520e9978403f9e26523e9a84fa", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}