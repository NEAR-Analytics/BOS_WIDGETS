{"tx_hash": "9GLnTPX2snBSZAjLgLC3iHmgEVYZGmtXcR9a98Pucz8v", "action_id_social": "7e6U5ZGohAxjvbUqyc5QeAkL6YWCZyEQ2ULqoVTUBCVW-0-widget", "block_id": 111116258, "block_timestamp": "2024-01-23T12:12:04.911Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Transactions.Hash", "source_code": "/**\n * Component: TransactionsHash\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Transaction Hash on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [hash] -  The Transaction identifier passed as a string.\n */\n\n\n\n\n\n\n\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst hashes = [' ', 'execution', 'comments'];\n\nfunction MainComponent(props) {\n  const { t, network, hash } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [txn, setTxn] = useState({} );\n  const [error, setError] = useState(false);\n  const [rpcTxn, setRpcTxn] = useState(\n    {} ,\n  );\n  const [pageHash, setHash] = useState(' ');\n\n  const config = getConfig(network);\n\n  const onTab = (index) => {\n    setHash(hashes[index]);\n  };\n\n  useEffect(() => {\n    function fetchTxn() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}txns/${hash}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTxn(resp);\n            }\n            setIsLoading(false);\n          },\n        )\n        .catch((error) => {\n          if (error) setError(true);\n          setIsLoading(false);\n        });\n    }\n\n    fetchTxn();\n  }, [config.backendUrl, hash]);\n\n  useEffect(() => {\n    function fetchTransactionStatus() {\n      if (txn) {\n        asyncFetch(config?.rpcUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: 123,\n            method: 'EXPERIMENTAL_tx_status',\n            params: [txn.transaction_hash, txn.signer_account_id],\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.result;\n              if (res.status === 200) {\n                setRpcTxn(resp);\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n\n    fetchTransactionStatus();\n  }, [txn, hash, config?.rpcUrl]);\n\n  return (\n    <>\n      <div>\n        <div className=\"md:flex items-center justify-between\">\n          <h1 className=\"text-xl text-gray-700 px-2 py-4\">\n            {t ? t('txns:txn.heading') : 'Transaction Details'}\n          </h1>\n          {\n            <Widget\n              src={`${config.ownerId}/widget/bos-components.components.Shared.SponsoredBox`}\n            />\n          }\n        </div>\n        <div className=\"text-gray-500 px-2 pb-5 pt-1 border-t\"></div>\n      </div>\n      {error || (!isLoading && !txn) ? (\n        <div className=\"text-gray-400 text-xs px-2 mb-4\">\n          {t ? t('txns:txnError') : 'Transaction Error'}\n        </div>\n      ) : (\n        <div className=\"bg-white soft-shadow rounded-lg pb-1\">\n          <Tabs.Root defaultValue={pageHash}>\n            <Tabs.List className={'flex flex-wrap border-b'}>\n              {hashes &&\n                hashes.map((hash, index) => (\n                  <Tabs.Trigger\n                    key={index}\n                    onClick={() => onTab(index)}\n                    className={`text-gray-600 text-sm font-semibold border-green-500 overflow-hidden inline-block cursor-pointer p-3 focus:outline-none hover:text-green-500 ${\n                      pageHash === hash ? 'border-b-4 border-green-500' : ''\n                    }`}\n                    value={hash}\n                  >\n                    {hash === ' ' ? (\n                      <h2>{t ? t('txns:txn.tabs.overview') : 'Overview'}</h2>\n                    ) : hash === 'execution' ? (\n                      <h2>\n                        {t ? t('txns:txn.tabs.execution') : 'Execution Plan'}\n                      </h2>\n                    ) : (\n                      <h2>{t ? t('txns:txn.tabs.comments') : 'Comments'}</h2>\n                    )}\n                  </Tabs.Trigger>\n                ))}\n            </Tabs.List>\n            <Tabs.Content value={hashes[0]}>\n              {\n                <Widget\n                  src={`${config.ownerId}/widget/bos-components.components.Transactions.Detail`}\n                  props={{\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                    network: network,\n                    t: t,\n                  }}\n                />\n              }\n            </Tabs.Content>\n            <Tabs.Content value={hashes[1]}>\n              {\n                <Widget\n                  src={`${config.ownerId}/widget/bos-components.components.Transactions.Receipt`}\n                  props={{\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                    network: network,\n                    t: t,\n                  }}\n                />\n              }\n            </Tabs.Content>\n            <Tabs.Content value={hashes[2]}>\n              <div className=\"px-4 sm:px-6 py-3\"></div>\n            </Tabs.Content>\n          </Tabs.Root>\n        </div>\n      )}\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Transactions.Hash", "fact_widget_deployments_id": "60bac3af5ad195e3adcba9369d2c62b0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 20}