{"tx_hash": "CK8S1wV8tiGeCvf6QMBz6KQhUWyWpRToTCR6acBGH835", "action_id_social": "HgMs1qV5cs8tqAiEK7urjK9T4UGv4S74N6iKvw7heJzf-0-widget", "block_id": 114606702, "block_timestamp": "2024-03-13T04:30:54.308Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Transactions.Hash", "source_code": "/**\n * Component: TransactionsHash\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Transaction Hash on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [hash] -  The Transaction identifier passed as a string.\n */\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.mainnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nconst hashes = [' ', 'execution', 'comments'];\n\nfunction MainComponent(props) {\n  const { t, network, hash } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [txn, setTxn] = useState({} );\n  const [error, setError] = useState(false);\n  const [isToggle, setIsToggle] = useState(false);\n  const [rpcTxn, setRpcTxn] = useState(\n    {} ,\n  );\n  const [pageHash, setHash] = useState(' ');\n  const config = getConfig(network);\n\n  const onTab = (index) => {\n    setHash(hashes[index]);\n  };\n  useEffect(() => {\n    function fetchTxn() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}txns/${hash}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTxn(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchTxn, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch((error) => {\n          if (error) setError(true);\n          setIsLoading(false);\n        });\n    }\n\n    fetchTxn();\n  }, [config.backendUrl, hash]);\n\n  useEffect(() => {\n    function fetchTransactionStatus() {\n      if (txn) {\n        asyncFetch(config?.rpcUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: 123,\n            method: 'EXPERIMENTAL_tx_status',\n            params: [txn.transaction_hash, txn.signer_account_id],\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.result;\n              if (res.status === 200) {\n                setRpcTxn(resp);\n              } else {\n                handleRateLimit(res, fetchTransactionStatus);\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n\n    fetchTransactionStatus();\n  }, [txn, hash, config?.rpcUrl]);\n\n  return (\n    <>\n      <div>\n        <div className=\"md:flex items-center justify-between\">\n          {isLoading ? (\n            <div className=\"w-80 max-w-xs px-3 py-5\">\n              <Skeleton className=\"h-7\" />\n            </div>\n          ) : (\n            <h1 className=\"text-xl text-nearblue-600 px-2 py-5\">\n              {t ? t('txns:txn.heading') : 'Transaction Details'}\n            </h1>\n          )}\n        </div>\n      </div>\n      {error || (!isLoading && !txn) ? (\n        <div className=\"text-nearblue-700 text-xs px-2 mb-4\">\n          {t ? t('txns:txnError') : 'Transaction Error'}\n        </div>\n      ) : (\n        <Tabs.Root defaultValue={pageHash}>\n          <Tabs.List>\n            {hashes &&\n              hashes.map((hash, index) => (\n                <Tabs.Trigger\n                  key={index}\n                  onClick={() => onTab(index)}\n                  className={`text-nearblue-600 text-sm font-medium overflow-hidden inline-block cursor-pointer p-2 mb-3 mr-2 focus:outline-none ${\n                    pageHash === hash\n                      ? 'rounded-lg bg-green-600 text-white'\n                      : 'hover:bg-neargray-800 bg-neargray-700 rounded-lg hover:text-nearblue-600'\n                  }`}\n                  value={hash}\n                >\n                  {hash === ' ' ? (\n                    <h2>{t ? t('txns:txn.tabs.overview') : 'Overview'}</h2>\n                  ) : hash === 'execution' ? (\n                    pageHash !== 'execution' ? (\n                      <>\n                        <h2>\n                          {isToggle\n                            ? 'Enhanced Plan'\n                            : t\n                            ? t('txns:txn.tabs.execution')\n                            : 'Execution Plan'}\n                        </h2>\n                      </>\n                    ) : (\n                      <Popover.Root key={isToggle}>\n                        <Popover.Trigger asChild>\n                          <button\n                            className=\"flex border border-green-900/10 text-xs  rounded focus:outline-none\"\n                            aria-label=\"Update dimensions\"\n                          >\n                            {isToggle\n                              ? 'Enhanced Plan'\n                              : t\n                              ? t('txns:txn.tabs.execution')\n                              : 'Execution Plan'}\n                            <ArrowDown className=\"h-4 w-4 fill-current ml-1\" />\n                          </button>\n                        </Popover.Trigger>\n                        <Popover.Content\n                          className=\"bg-white w-60 shadow-lg border rounded-lg slide-down mt-4\"\n                          sideOffset={5}\n                        >\n                          <ul className=\"divide-y\">\n                            <li\n                              onClick={() => setIsToggle(false)}\n                              className={`py-2 text-nearblue-600 ${\n                                !isToggle ? 'bg-gray-300' : ''\n                              }`}\n                            >\n                              {t('txns:txn.tabs.execution') || 'Execution Plan'}\n                            </li>\n                            <li\n                              onClick={() => setIsToggle(true)}\n                              className={`py-2 text-nearblue-600 ${\n                                isToggle ? 'bg-gray-300' : ''\n                              }`}\n                            >\n                              Enhanced Plan\n                            </li>\n                          </ul>\n                        </Popover.Content>\n                      </Popover.Root>\n                    )\n                  ) : (\n                    <h2>{t ? t('txns:txn.tabs.comments') : 'Comments'}</h2>\n                  )}\n                </Tabs.Trigger>\n              ))}\n          </Tabs.List>\n          <div className=\"bg-white soft-shadow rounded-xl pb-1\">\n            <Tabs.Content value={hashes[0]}>\n              {\n                <Widget\n                  src={`${config?.ownerId}/widget/bos-components.components.Transactions.Detail`}\n                  props={{\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                    network: network,\n                    t: t,\n                  }}\n                />\n              }\n            </Tabs.Content>\n            <Tabs.Content value={hashes[1]}>\n              {isToggle ? (\n                <Widget\n                  src={`${config?.ownerId}/widget/bos-components.components.Transactions.Execution`}\n                  props={{\n                    network: network,\n                    t: t,\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                  }}\n                />\n              ) : (\n                <Widget\n                  src={`${config?.ownerId}/widget/bos-components.components.Transactions.Receipt`}\n                  props={{\n                    network: network,\n                    t: t,\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                  }}\n                />\n              )}\n            </Tabs.Content>\n            <Tabs.Content value={hashes[2]}>\n              <div className=\"py-3\">\n                {\n                  <Widget\n                    src={`${config.ownerId}/widget/bos-components.components.Comments.Feed`}\n                    props={{\n                      network: network,\n                      path: `nearblocks.io/txns/${hash}`,\n                      limit: 10,\n                    }}\n                  />\n                }\n              </div>\n            </Tabs.Content>\n          </div>\n        </Tabs.Root>\n      )}\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Transactions.Hash", "fact_widget_deployments_id": "2d8fe51517a8a50a1a0f15b500e6cfb5", "inserted_timestamp": "2024-03-13T05:25:41.389Z", "modified_timestamp": "2024-03-13T06:27:24.035Z", "__row_index": 4}