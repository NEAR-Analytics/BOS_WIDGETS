{"tx_hash": "DtDT5nwGtNA6gEnPigqifek1eN5h5HDDFw2uTHviWcey", "action_id_social": "AuCRzSLy76W7TDU3at1vSCsUJRM6SKw9tX7wCGKjdcoA-0-widget", "block_id": 114805279, "block_timestamp": "2024-03-16T06:01:46.677Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Comments.Comment", "source_code": "/**\n * Component: CommentsComment\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: The component displays a single post/comment.\n * @interface Props\n * @param {string} accountId - The identifier of the account associated with the post.\n * @param {string} blockHeight - The block height at which the post was made.\n * @param {Object} post - The content of the post including image and text.\n * @param {string} post.text - The text content of the post.\n * @param {Object} post.image - The image object associated with the post.\n * @param {string} post.image.ipfs_cid - The IPFS CID of the image.\n * @param {string} post.image.url - The URL of the image.\n */\n\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 2592000) {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 31536000) {\n    const monthsAgo = Math.floor(secondsAgo / 2592000);\n    return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const yearsAgo = Math.floor(secondsAgo / 31536000);\n    return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nfunction isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\nfunction handleRateLimit(\n  data,\n  reFetch,\n  Loading,\n) {\n  if (data.status === 429 || data.status === undefined) {\n    const retryCount = 4;\n    const delay = Math.pow(2, retryCount) * 1000;\n    setTimeout(() => {\n      reFetch();\n    }, delay);\n  } else {\n    if (Loading) {\n      Loading();\n    }\n  }\n}\n\nfunction mapFeilds(fields) {\n  const args = {};\n\n  fields.forEach((fld) => {\n    let value = fld.value;\n\n    if (fld.type === 'number') {\n      value = Number(value);\n    } else if (fld.type === 'boolean') {\n      value =\n        value.trim().length > 0 &&\n        !['false', '0'].includes(value.toLowerCase());\n    } else if (fld.type === 'json') {\n      value = JSON.parse(value);\n    } else if (fld.type === 'null') {\n      value = null;\n    }\n\n    (args )[fld.name] = value + '';\n  });\n\n  return args;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent({ accountId, blockHeight, post }) {\n  const BlockHeight = blockHeight === 'now' ? 'now' : parseInt(blockHeight);\n\n  const profile = Social.getr(`${accountId}/profile`);\n  const name = profile.name || 'No-name profile';\n  const title = `@${accountId}`;\n  const [time, setTime] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [fallbackUrl, _setFallbackUrl] = useState(\n    'https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm',\n  );\n\n  useEffect(() => {\n    async function fetchTime() {\n      setTime('Loading');\n      try {\n        asyncFetch(\n          `https://api.near.social/time?blockHeight=${BlockHeight}`,\n        ).then((res) => {\n          if (!res) {\n            return 'Loading';\n          }\n\n          if (!res.ok || res.body === 'null') {\n            return 'unknown';\n          }\n          const timeMs = parseFloat(res.body);\n          return setTime(timeAgo(timeMs / 1000));\n        });\n      } catch (error) {\n        console.error('Error fetching time:', error);\n        setTime('Loading');\n      }\n    }\n    fetchTime();\n  }, [BlockHeight]);\n  useEffect(() => {\n    if (JSON.stringify(post.image) !== JSON.stringify(imageUrl)) {\n      setImageUrl(post.image);\n    }\n  }, [post.image, imageUrl]);\n\n  function toUrl(image) {\n    return (\n      (image.ipfs_cid\n        ? `https://ipfs.near.social/ipfs/${image.ipfs_cid}`\n        : image.url) || fallbackUrl\n    );\n  }\n\n  const renderPath = (properties) => {\n    return (\n      <Widget\n        key={properties}\n        src={properties.path}\n        props={properties.params}\n      />\n    );\n  };\n  return (\n    <>\n      <div className=\"py-4 border-b px-8\">\n        <div className=\"flex justify-start text-center\">\n          <img\n            className=\"rounded-full w-12 h-12\"\n            src={`https://i.near.social/magic/${'large'}/https://near.social/magic/img/account/${accountId}`}\n            alt=\"\"\n          />\n          <div className=\"flex justify-start ml-2 bottom-0 top-0\">\n            <p className=\"font-semibold\">{name} </p>\n            <p className=\"text-gray-600 font-thin ml-0.5\"> {title}</p>\n          </div>\n          <p className=\"text-gray-600 flex align-middle\">\n            {blockHeight === 'now' ? (\n              'now'\n            ) : (\n              <p className=\"text-muted\">. {time}</p>\n            )}\n          </p>\n        </div>\n        <div className=\"mb-2\">\n          <div className=\"container\">\n            <div className=\"ml-12 top-0\">\n              <Markdown text={post.text} onPath={renderPath} />\n            </div>\n            {post.image && (\n              <div className=\"w-full flex justify-center text-center\">\n                <img\n                  className=\"rounded-lg md:max-w-lg\"\n                  src={toUrl(imageUrl)}\n                  loading=\"lazy\"\n                  alt=\"attached image\"\n                  onError={() => {\n                    if (imageUrl !== fallbackUrl) {\n                      State.update({\n                        imageUrl: fallbackUrl,\n                      });\n                    }\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Comments.Comment", "fact_widget_deployments_id": "590d0e0b41d047a5bfcca311e451a60e", "inserted_timestamp": "2024-03-16T07:26:15.303Z", "modified_timestamp": "2024-03-16T07:26:15.303Z", "__row_index": 0}