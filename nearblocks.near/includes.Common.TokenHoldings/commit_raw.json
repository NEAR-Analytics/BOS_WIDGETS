{"tx_hash": "37RttTZk8r4RZtRutKbzYWd7FraUZFngbAMLm8JRj3ta", "action_id_social": "9K1pVsN8voZc8Syxu6SBMxYrMwqiM8YXx2biDeWkCXL8-0-widget", "block_id": 110150201, "block_timestamp": "2024-01-11T14:12:27.603Z", "signer_id": "nearblocks.near", "widget_name": "includes.Common.TokenHoldings", "source_code": "/**\n * @interface Props\n * @param {string} [id] - Optional identifier for the account, passed as a string.\n * @param {boolean} [loading] - Flag indicating whether data is currently loading.\n * @param {InventoryInfo} [data] - Information related to the inventory.\n * @param {Object} [ft] - Object containing details about the tokens.\n * @param {number} [ft.amount] -  amount in USD of tokens.\n * @param {Object[]} [ft.tokens] - Array containing 'TokenListInfo' objects, providing information about individual token details.\n * @param {string} [appUrl] - The URL of the application.\n */\n\nimport { truncateString } from '@/includes/libs';\nimport ArrowDown from '@/includes/icons/ArrowDown';\nimport { dollarFormat, localFormat } from '@/includes/formats';\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TokenHoldings = (props) => {\n  const Loading = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 h-5 rounded shadow-sm animate-pulse ${props.className}`}\n      ></div>\n    );\n  };\n\n  const nfts = props.data?.nfts || [];\n\n  if (props.loading) {\n    return <Loading className=\"h-full\" wrapperClassName=\"flex w-full h-7\" />;\n  }\n\n  if (!props.ft?.tokens?.length && !nfts?.length) {\n    return (\n      <select className=\"appearance-none w-full h-8 text-xs px-2 outline-none rounded bg-white border\">\n        <option>N/A</option>\n      </select>\n    );\n  }\n  return (\n    <Select.Root>\n      <Select.Trigger className=\"w-96 h-8 text-sm px-2 rounded border outline-none flex items-center justify-between cursor-pointer\">\n        <span>\n          ${dollarFormat(props.ft?.amount || 0)}{' '}\n          <span className=\"bg-green-500 text-xs text-white rounded ml-2 px-1 p-1\">\n            {(props.ft?.tokens?.length || 0) + (nfts?.length || 0)}\n          </span>\n        </span>\n        <ArrowDown className=\"w-4 h-4 fill-current text-gray-500 pointer-events-none\" />\n      </Select.Trigger>\n      <Select.Content>\n        <ScrollArea.Root className=\"w-96 h-72 rounded overflow-hidden shadow-[0_2px_10px] drop-shadow-md bg-white\">\n          <ScrollArea.Viewport className=\"w-full h-full rounded  bg-white w-full rounded-b-lg shadow border z-50 pb-2\">\n            <div className=\"max-h-60\">\n              {props.ft?.tokens?.length > 0 && (\n                <>\n                  <div className=\"bg-gray-50 font-semibold px-3 py-2\">\n                    Tokens{' '}\n                    <span className=\"font-normal\">\n                      ({props.ft?.tokens?.length})\n                    </span>\n                  </div>\n                  <div className=\"text-gray-600 text-xs divide-y outline-none\">\n                    {props.ft?.tokens?.map((token, index) => (\n                      <a\n                        href={`/token/${token.contract}?a=${props.id}`}\n                        className=\"hover:no-underline\"\n                        key={token.contract}\n                      >\n                        <a className=\"flex justify-between items-center px-3 py-2 hover:bg-gray-100 truncate hover:no-underline\">\n                          <div key={index}>\n                            <div className=\"flex items-center\">\n                              <div className=\"flex mr-1\">\n                                <img\n                                  src={\n                                    token.ft_metas?.icon ||\n                                    `${props.appUrl}images/tokenplaceholder.svg`\n                                  }\n                                  alt={token.ft_metas?.name}\n                                  className=\"w-4 h-4\"\n                                />\n                              </div>\n                              <span>\n                                {token.ft_metas.name\n                                  ? truncateString(\n                                      token.ft_metas?.name,\n                                      15,\n                                      '...',\n                                    )\n                                  : ''}\n                                ({token.ft_metas?.symbol})\n                              </span>\n                            </div>\n                            <div className=\"text-gray-400 flex items-center mt-1\">\n                              {localFormat(token?.rpcAmount)}\n                            </div>\n                          </div>\n                          {token.ft_metas?.price && (\n                            <div className=\"text-right\">\n                              <div>${dollarFormat(token.amountUsd)}</div>\n                              <div className=\"text-gray-400\">\n                                @{Big(token.ft_metas?.price).toString()}\n                              </div>\n                            </div>\n                          )}\n                        </a>\n                      </a>\n                    ))}\n                  </div>\n                </>\n              )}\n              {nfts?.length > 0 && (\n                <>\n                  <div className=\"bg-gray-50 font-semibold px-3 py-2\">\n                    NFT Tokens{' '}\n                    <span className=\"font-normal\">({nfts?.length})</span>\n                  </div>\n                  <div className=\"text-gray-600 text-xs divide-y outline-none\">\n                    {nfts.map((nft) => (\n                      <a\n                        href={`/nft-token/${nft.contract}?a=${props.id}`}\n                        className=\"hover:no-underline\"\n                        key={nft.contract}\n                      >\n                        <a className=\"flex justify-between items-center px-3 py-2 hover:bg-gray-100 truncate hover:no-underline\">\n                          <div>\n                            <div className=\"flex items-center\">\n                              <div className=\"flex mr-1\">\n                                <img\n                                  src={\n                                    nft.nft_meta?.icon ||\n                                    `${props.appUrl}images/tokenplaceholder.svg`\n                                  }\n                                  alt={nft.nft_meta?.name}\n                                  className=\"w-4 h-4\"\n                                />\n                              </div>\n                              <span>\n                                {nft.nft_meta?.name\n                                  ? truncateString(\n                                      nft.nft_meta?.name,\n                                      15,\n                                      '...',\n                                    )\n                                  : ''}\n                                ({nft.nft_meta?.symbol})\n                              </span>\n                            </div>\n                            <div className=\"text-gray-400 flex items-center mt-1\">\n                              {localFormat(nft.quantity)}\n                            </div>\n                          </div>\n                        </a>\n                      </a>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </ScrollArea.Viewport>\n          <ScrollArea.Scrollbar\n            className=\"flex select-none touch-none p-0.5 bg-gray-400 transition-colors duration-[160ms] ease-out hover:bg-blend-darken data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n            orientation=\"vertical\"\n          >\n            <ScrollArea.Thumb className=\"flex-1 bg-gray-400 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n          </ScrollArea.Scrollbar>\n          <ScrollArea.Scrollbar\n            className=\"flex select-none touch-none p-0.5 bg-gray-400 transition-colors duration-[160ms] ease-out hover:bg-blend-darken data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n            orientation=\"horizontal\"\n          >\n            <ScrollArea.Thumb className=\"flex-1 bg-gray-400 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n          </ScrollArea.Scrollbar>\n          <ScrollArea.Corner className=\"bg-black-500\" />\n        </ScrollArea.Root>\n      </Select.Content>\n    </Select.Root>\n  );\n};\n\nexport default TokenHoldings;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/includes.Common.TokenHoldings", "fact_widget_deployments_id": "e873560de87db30207f0045bfcd049b7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}