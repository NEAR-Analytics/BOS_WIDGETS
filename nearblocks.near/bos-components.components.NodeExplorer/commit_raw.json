{"tx_hash": "57CMUoGqhSdCVExLC1be8CeRQsXV4f6PfEMaBtsPRU8A", "action_id_social": "2Rd38KVwyVWyJypszK9CKYbaGrR9AanxmREZ8wNSTfgT-0-widget", "block_id": 108179283, "block_timestamp": "2023-12-17T15:32:14.087Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.NodeExplorer", "source_code": "/* INCLUDE COMPONENT: \"includes/Common/Skelton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skelton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 h-5 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skelton.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  return number.toFixed(2) + prefixes[count];\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction convertAmountToReadableString(amount, type) {\n  if (!amount) return null;\n\n  let value;\n  let suffix;\n\n  const nearNomination = Math.pow(10, 24);\n\n  const amountInNear = Number(amount) / nearNomination;\n\n  if (type === 'totalSupply' || type === 'totalStakeAmount') {\n    value = formatWithCommas((amountInNear / 1e6).toFixed(1));\n    suffix = 'M';\n  } else if (type === 'seatPriceAmount') {\n    value = formatWithCommas(Math.round(amountInNear).toString());\n  } else {\n    value = amount.toString();\n  }\n  return `${value}${suffix}`;\n}\n\nfunction convertTimestampToTime(timestamp) {\n  const hours = Math.floor(timestamp / 3600);\n  const minutes = Math.floor((timestamp % 3600) / 60);\n  const seconds = Math.floor(timestamp % 60);\n\n  return `${hours.toString().padStart(2, '0')}H ${minutes\n    .toString()\n    .padStart(2, '0')}M ${seconds.toString().padStart(2, '0')}S`;\n}\n\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  // @ts-ignore\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction convertTimestampToTime(timestamp) {\n  const hours = Math.floor(timestamp / 3600);\n  const minutes = Math.floor((timestamp % 3600) / 60);\n  const seconds = Math.floor(timestamp % 60);\n\n  return `${hours.toString().padStart(2, '0')}H ${minutes\n    .toString()\n    .padStart(2, '0')}M ${seconds.toString().padStart(2, '0')}S`;\n}\n\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  // @ts-ignore\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent() {\n  const FRACTION_DIGITS = 2;\n  const EXTRA_PRECISION_MULTIPLIER = 10000;\n  const [validatorData, setValidatorData] = useState([]);\n  const [validatorFullData, setValidatorFullData] = useState\n\n([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [currentValidators, setCurrentValidators] = useState\n\n([]);\n\n  const [protocolConfig, setProtocolConfig] = useState(\n    {} ,\n  );\n\n  const [seatPrice, setSeatPrice] = useState('');\n  const [epochStartBlock, setEpochStartBlock] = useState(\n    {} ,\n  );\n  const [latestBlockSub, setLatestBlockSub] = useState(\n    {} ,\n  );\n  const config = getConfig(context.networkId);\n\n  const validatorInfo = useCache(\n    () =>\n      asyncFetch(`${config?.backendUrl}validators`).then((res) => {\n        const data = res.body;\n        setCurrentValidators(data?.currentValidators);\n\n        const mappedValidators = data?.combinedData;\n        setValidatorFullData(mappedValidators);\n        setProtocolConfig(data?.protocolConfig);\n        setSeatPrice(data?.epochStatsCheck);\n        setEpochStartBlock(data?.epochStartBlock);\n        setLatestBlockSub(data?.latestBlock);\n        setValidatorData(mappedValidators);\n        return data;\n      }),\n    `${context.networkId}:validatorInfo`,\n    { subscribe: true },\n  );\n  if (validatorInfo) {\n    setIsLoading(false);\n  }\n\n  const sortByBNComparison = (aValue, bValue) => {\n    const a = aValue ? new Big(aValue) : null;\n    const b = bValue ? new Big(bValue) : null;\n\n    if (a && b) {\n      return a.cmp(b);\n    }\n    if (a) {\n      return -1;\n    }\n    if (b) {\n      return 1;\n    }\n    return 0;\n  };\n\n  const getTotalStake = (validators) =>\n    validators.length > 0 &&\n    validators\n      .map((validator) => validator?.currentEpoch?.stake || 0)\n      .filter((stake) => typeof stake === 'string' && stake !== '')\n      .reduce((acc, stake) => new Big(acc).plus(stake).toString(), '0');\n\n  const totalStake = useMemo(\n    () => getTotalStake(validatorFullData),\n    [validatorFullData],\n  );\n\n  const sortedValidators = useMemo(() => {\n    \n\n\n\n\n    const validatorsSortFns = [\n      (a, b) =>\n        sortByBNComparison(a.currentEpoch?.stake, b.currentEpoch?.stake),\n      (a, b) => sortByBNComparison(a.nextEpoch?.stake, b.nextEpoch?.stake),\n      (a, b) =>\n        sortByBNComparison(a.afterNextEpoch?.stake, b.afterNextEpoch?.stake),\n      (a, b) => sortByBNComparison(a.contractStake, b.contractStake),\n    ];\n\n    return validatorsSortFns.reduceRight(\n      (acc, sortFn) => {\n        return acc.sort(sortFn);\n      },\n      [...validatorFullData],\n    );\n  }, [validatorFullData]);\n\n  const cumulativeAmounts = useMemo(() => {\n    return sortedValidators.reduce(\n      (acc, validator) => {\n        const lastAmount = new Big(acc[acc.length - 1]);\n        return [\n          ...acc,\n          validator.currentEpoch\n            ? lastAmount.add(validator?.currentEpoch?.stake).toString()\n            : lastAmount.toString(),\n        ];\n      },\n      ['0'],\n    );\n  }, [sortedValidators]);\n\n  const epochProgress = useMemo(() => {\n    if (\n      !latestBlockSub?.height ||\n      !epochStartBlock?.height ||\n      !protocolConfig?.epochLength\n    ) {\n      return 0;\n    }\n\n    return (\n      ((latestBlockSub.height - epochStartBlock.height) /\n        protocolConfig.epochLength) *\n      100\n    );\n  }, [latestBlockSub, epochStartBlock, protocolConfig]);\n\n  const timeRemaining = useMemo(() => {\n    if (\n      !latestBlockSub?.timestamp ||\n      !epochStartBlock?.timestamp ||\n      !epochProgress\n    ) {\n      return 0;\n    }\n    const epochTimestamp = nanoToMilli(epochStartBlock?.timestamp || 0);\n    const latestBlockTimestamp = nanoToMilli(latestBlockSub?.timestamp || 0);\n\n    return (\n      ((latestBlockTimestamp - epochTimestamp) / epochProgress) *\n      (100 - epochProgress)\n    );\n  }, [epochProgress, epochStartBlock, latestBlockSub]);\n\n  const totalSeconds = useMemo(\n    () => (timeRemaining ? Math.floor(timeRemaining / 1000) : 0),\n    [timeRemaining],\n  );\n\n  const elapsedTime = useMemo(() => {\n    if (!epochStartBlock?.timestamp) {\n      return 0;\n    }\n    const epochTimestamp = nanoToMilli(epochStartBlock?.timestamp || 0);\n    return (Date.now() - epochTimestamp) / 1000;\n  }, [epochStartBlock]);\n\n  const columns = [\n    { header: 'VALIDATOR', key: 'accountId' },\n    {\n      header: 'FEE',\n      key: 'poolInfo',\n      cell: (row) => {\n        return (\n          <div>\n            {row?.poolInfo?.fee !== undefined\n              ? `${(\n                  (row?.poolInfo?.fee.numerator /\n                    row?.poolInfo?.fee.denominator) *\n                  100\n                ).toFixed(0)}%`\n              : 'N/A'}\n          </div>\n        );\n      },\n    },\n\n    {\n      header: 'DELEGATORS',\n      key: 'deligators',\n      cell: (row) => {\n        return (\n          <div>\n            {row?.poolInfo?.delegatorsCount !== undefined\n              ? row?.poolInfo?.delegatorsCount\n              : 'N/A'}\n          </div>\n        );\n      },\n    },\n    {\n      header: 'TOTAL STAKE',\n      key: 'stake',\n      cell: (row) => (\n        <span>\n          {formatWithCommas(\n            (row.currentEpoch?.stake ??\n              row.nextEpoch?.stake ??\n              row.afterNextEpoch?.stake ??\n              `${row.contractStake}`).substring(0, 8),\n          )}\n          \u24c3\n        </span>\n      ),\n    },\n    {\n      header: 'STAKE %',\n      key: 'percentage',\n      cell: (row) => {\n        const currentStake = row.currentEpoch?.stake;\n        const stake = currentStake ? new Big(currentStake) : new Big(0);\n        const extra = new Big(EXTRA_PRECISION_MULTIPLIER);\n        const ownPercent = stake.times(extra).div(totalStake).toNumber();\n        const percent = ((ownPercent / extra) * 100).toFixed(FRACTION_DIGITS);\n        return <div>{percent && percent}% </div>;\n      },\n    },\n    {\n      header: 'CUMULATIVE STAKE',\n      key: 'cumulative_stake',\n      cell: (row) => {\n        if (!row.currentEpoch) {\n          return 'N/A';\n        }\n        const index = Number(row.index) + 1 ?? 1;\n        const extra = new Big(EXTRA_PRECISION_MULTIPLIER);\n\n        const cumulativeStakePercent = Big(totalStake).lte(0)\n          ? 0\n          : new Big(cumulativeAmounts[index])\n              .times(extra)\n              .div(totalStake)\n              .toNumber();\n\n        const cumulativePercent =\n          cumulativeStakePercent / EXTRA_PRECISION_MULTIPLIER;\n        const percentage = (cumulativePercent * 100).toFixed(FRACTION_DIGITS);\n\n        return <div>{percentage && percentage}%</div>;\n      },\n    },\n    {\n      header: 'STAKE CHANGE (24H)',\n      key: '24_change',\n      cell: (row) => {\n        const nextVisibleStake =\n          parseFloat(row.nextEpoch?.stake || '0') ??\n          parseFloat(row.afterNextEpoch?.stake || '0');\n\n        const currentStake = parseFloat(row.currentEpoch?.stake || '0');\n\n        if (!isNaN(currentStake) && !isNaN(nextVisibleStake)) {\n          const stakeDelta = nextVisibleStake - currentStake;\n\n          if (stakeDelta !== 0) {\n            return (\n              <div className=\"flex\">\n                {stakeDelta >= 0 ? '+' : '-'}{' '}\n                <p>\n                  {convertAmountToReadableString(\n                    Math.abs(stakeDelta),\n                    'seatPriceAmount',\n                  )}{' '}\n                  \u24c3\n                </p>\n              </div>\n            );\n          }\n        }\n\n        return null;\n      },\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"bg-hero-pattern h-72\">\n        <div className=\"container mx-auto px-3\">\n          <h1 className=\"mb-4 pt-8 sm:sm:text-2xl text-xl text-white\">\n            NEAR Protocol Validator Explorer\n          </h1>\n        </div>\n      </div>\n      <div className=\"container mx-auto px-3 -mt-48\">\n        <div>\n          <div className=\"flex gap-4  mt-10\">\n            <div className=\"w-full\">\n              <div className=\"h-full bg-white soft-shadow rounded-lg overflow-hidden\">\n                <h2 className=\"border-b p-3 text-gray-600 text-sm font-semibold\">\n                  Staking overview\n                </h2>\n                <div className=\"px-3 divide-y text-sm text-gray-600\">\n                  <div className=\"flex  py-4\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                      Current Validators\n                    </div>\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {isLoading ? (\n                        <Skelton className=\"w-16 break-words\" />\n                      ) : (\n                        currentValidators?.length\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex  py-4\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                      Total Staked\n                    </div>\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {isLoading ? (\n                        <Skelton className=\"w-16 break-words\" />\n                      ) : (\n                        convertAmountToReadableString(\n                          totalStake,\n                          'totalStakeAmount',\n                        )\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex  py-4\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                      Current seat price\n                    </div>\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {isLoading ? (\n                        <Skelton className=\"w-16 break-words\" />\n                      ) : (\n                        <>\n                          {convertAmountToReadableString(\n                            Number(seatPrice),\n                            'seatPriceAmount',\n                          )}{' '}\n                          \u24c3{' '}\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full\">\n              <div className=\"h-full bg-white soft-shadow rounded-lg overflow-hidden\">\n                <h2 className=\"border-b p-3 text-gray-600 text-sm font-semibold\">\n                  Epoch information\n                </h2>\n                <div className=\"px-3 divide-y text-sm text-gray-600\">\n                  <div className=\"flex items-center justify-between py-4\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                      Epoch elapsed time:\n                    </div>\n                    <div className=\"w-full text-green-500 md:w-3/4 break-words\">\n                      {!elapsedTime ? (\n                        <Skelton className=\"h-3 w-32\" />\n                      ) : (\n                        convertTimestampToTime(elapsedTime)\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between py-4\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">ETA:</div>\n                    <div className=\"w-full md:w-3/4 text-green-500 break-words\">\n                      {!totalSeconds ? (\n                        <Skelton className=\"h-3 w-32\" />\n                      ) : (\n                        convertTimestampToTime(totalSeconds)\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between py-4\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                      Progress\n                    </div>\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {!epochProgress ? (\n                        <Skelton className=\"h-3 w-full\" />\n                      ) : (\n                        <div className=\"flex space-x-4 gap-2 items-center \">\n                          <div className=\"bg-blue-50 h-2 w-full rounded-full\">\n                            <div\n                              className=\"bg-green-500 h-2 rounded-full\"\n                              style={{ width: `${epochProgress.toFixed(1)}%` }}\n                            ></div>\n                          </div>\n                          {epochProgress.toFixed(0)}%\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"py-5\"></div>\n          <div className=\"w-full mb-10\">\n            <div className=\"bg-white soft-shadow rounded-lg pb-1\">\n              <div className=\"flex flex-col pt-4\">\n                <div className=\"flex flex-col\">\n                  {isLoading ? (\n                    <p className=\"leading-7 px-3 text-sm mb-4 text-gray-500\">\n                      <Skelton className=\"w-25 break-words\" />\n                    </p>\n                  ) : (\n                    <p className=\"leading-7 px-3 text-sm mb-4 text-gray-500\">\n                      {validatorFullData?.length}\n                      Validators found\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <Widget\n                    src={`${config?.ownerId}/widget/bos-components.components.Shared.Table`}\n                    props={{\n                      columns: columns,\n                      data: validatorData || [],\n                      isPagination: false,\n                      count: validatorFullData.length,\n                      isLoading: isLoading,\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.NodeExplorer", "fact_widget_deployments_id": "a32c8efb3f85cc221141caa3c124de4c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 17}