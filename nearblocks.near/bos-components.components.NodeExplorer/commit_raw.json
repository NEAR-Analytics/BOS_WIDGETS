{"tx_hash": "4256z3HRvhwBDRSVmbXn1Uynmisir9XRRJYkHMRGsm9r", "action_id_social": "7bVaCFDCpzK2wh9BwYY3dSuAyhPqjkwWrUaQ2VDsuiod-0-widget", "block_id": 110133282, "block_timestamp": "2024-01-11T09:08:29.996Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.NodeExplorer", "source_code": "/**\n * Component: NodeExplorer\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Node validator on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {number} [currentPage] - The current page number being displayed. (Optional)\n *                                 Example: If provided, currentPage=3 will display the third page of blocks.\n * @param {function} [setPage] - A function used to set the current page. (Optional)\n *                               Example: setPage={handlePageChange} where handlePageChange is a function to update the page.\n */\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction formatNumber(value) {\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (value >= 10000 && suffixIndex < suffixes.length - 1) {\n    value /= 1000;\n    suffixIndex++;\n  }\n\n  const formattedValue = value.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  // Check if the number is close to an integer value\n  if (Math.abs(number) >= 10) {\n    number = Math.round(number); // Round the number to the nearest whole number\n    return number + ' ' + prefixes[count];\n  }\n\n  return (\n    Number(Math.floor(number * 100) / 100).toFixed(2) + ' ' + prefixes[count]\n  );\n}\nfunction formatNumber(value) {\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (value >= 10000 && suffixIndex < suffixes.length - 1) {\n    value /= 1000;\n    suffixIndex++;\n  }\n\n  const formattedValue = value.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction convertAmountToReadableString(amount, type) {\n  if (!amount) return null;\n\n  let value;\n  let suffix;\n\n  const nearNomination = Math.pow(10, 24);\n\n  const amountInNear = Number(amount) / nearNomination;\n\n  if (type === 'totalSupply' || type === 'totalStakeAmount') {\n    value = formatWithCommas((amountInNear / 1e6).toFixed(1));\n    suffix = 'M';\n  } else if (type === 'seatPriceAmount') {\n    value = formatWithCommas(Math.round(amountInNear).toString());\n  } else {\n    value = amount.toString();\n  }\n  return `${value}${suffix}`;\n}\n\nfunction convertTimestampToTime(timestamp) {\n  const hours = Math.floor(timestamp / 3600);\n  const minutes = Math.floor((timestamp % 3600) / 60);\n  const seconds = Math.floor(timestamp % 60);\n\n  return `${hours.toString().padStart(2, '0')}H ${minutes\n    .toString()\n    .padStart(2, '0')}M ${seconds.toString().padStart(2, '0')}S`;\n}\n\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  // @ts-ignore\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 6,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction convertTimestampToTime(timestamp) {\n  const hours = Math.floor(timestamp / 3600);\n  const minutes = Math.floor((timestamp % 3600) / 60);\n  const seconds = Math.floor(timestamp % 60);\n\n  return `${hours.toString().padStart(2, '0')}H ${minutes\n    .toString()\n    .padStart(2, '0')}M ${seconds.toString().padStart(2, '0')}S`;\n}\n\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  // @ts-ignore\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 6,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  // @ts-ignore\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 6,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\nconst initialValidatorFullData = {\n  validatorEpochData: [],\n  currentValidators: 0,\n  totalStake: 0,\n  seatPrice: 0,\n  elapsedTime: 0,\n  totalSeconds: 0,\n  epochProgress: 0,\n  validatorTelemetry: {},\n  total: 0,\n};\n\nfunction MainComponent({ network, currentPage, setPage }) {\n  const [validatorFullData, setValidatorFullData] = useState(\n    initialValidatorFullData,\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalSuppy, setTotalSupplay] = useState(0);\n  const [expanded, setExpanded] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [latestBlock, setLatestBlock] = useState(0);\n  const errorMessage = 'No validator data!';\n  const config = getConfig(network);\n\n  const TotalSupply = yoctoToNear(Number(totalSuppy || 0), false);\n\n  useEffect(() => {\n    function fetchValidatorData() {\n      setIsLoading(true);\n\n      asyncFetch(`${config?.backendUrl}validators?page=${currentPage}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n          setTimeRemaining(data?.totalSeconds ?? 0);\n          const validators = {\n            validatorEpochData: data?.validatorFullData ?? [],\n            currentValidators: data?.currentValidators,\n            totalStake: data?.totalStake ?? 0,\n            seatPrice: data?.epochStatsCheck ?? [],\n            elapsedTime: data?.elapsedTimeData ?? 0,\n            totalSeconds: data?.totalSeconds ?? 0,\n            epochProgress: data?.epochProgressData ?? 0,\n            validatorTelemetry: data?.validatorTelemetry ?? [],\n            total: data?.total,\n          };\n          setValidatorFullData(validators);\n          setExpanded([]);\n        })\n        .catch(() => {})\n\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    function fetchTotalSuppy() {\n      asyncFetch(`${config?.backendUrl}stats`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n\n          setTotalSupplay(data.stats[0].total_supply || 0);\n        })\n        .catch(() => {})\n        .finally(() => {});\n    }\n    function fetchLatestBlock() {\n      asyncFetch(`${config?.backendUrl}blocks/latests?limit=1`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n\n          setLatestBlock(data.blocks[0].block_height || 0);\n        })\n        .catch(() => {})\n        .finally(() => {});\n    }\n    fetchLatestBlock();\n    fetchTotalSuppy();\n    fetchValidatorData();\n  }, [config?.backendUrl, currentPage]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimeRemaining((prevTimeRemaining) => prevTimeRemaining - 1);\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const handleRowClick = (rowIndex) => {\n    const isRowExpanded = expanded.includes(rowIndex);\n\n    if (isRowExpanded) {\n      setExpanded((prevExpanded) =>\n        prevExpanded.filter((index) => index !== rowIndex),\n      );\n    } else {\n      setExpanded((prevExpanded) => [...prevExpanded, rowIndex]);\n    }\n  };\n\n  const stakingStatusLabel = (status) => {\n    switch (status) {\n      case 'active':\n        return 'Active';\n      case 'joining':\n        return 'Joining';\n\n      case 'leaving':\n        return 'Kickout';\n      case 'proposal':\n        return 'Proposal';\n      case 'idle':\n        return 'idle';\n\n      case 'newcomer':\n        return 'Newcomer';\n      case 'onHold':\n        return 'On hold';\n      default:\n        return;\n    }\n  };\n  const getStatusColorClass = (status) => {\n    switch (status) {\n      case 'active':\n        return {\n          textColor: 'text-emerald-500',\n          bgColor: 'bg-emerald-50 text-emerald-500',\n        };\n      case 'joining':\n        return {\n          textColor: 'text-yellow-500',\n          bgColor: 'bg-yellow-50 text-yellow-500',\n        };\n      case 'leaving':\n        return {\n          textColor: 'text-red-500',\n          bgColor: 'bg-red-50 text-red-500',\n        };\n      case 'proposal':\n        return {\n          textColor: 'text-teal-900',\n          bgColor: 'bg-teal-300 text-teal-900',\n        };\n      case 'idle':\n        return {\n          textColor: 'text-gray-600',\n          bgColor: 'bg-gray-300 text-gray-600',\n        };\n      case 'newcomer':\n        return {\n          textColor: 'text-orange-500',\n          bgColor: 'bg-orange-500 text-white',\n        };\n      case 'onHold':\n        return {\n          textColor: 'text-blue-500',\n          bgColor: 'bg-blue-500 text-white',\n        };\n      default:\n        return {};\n    }\n  };\n  const columns = [\n    {\n      header: <span></span>,\n      key: '',\n      cell: (row) => (\n        <div className=\"\">\n          <button onClick={() => handleRowClick(row.index || 0)}>\n            <ArrowDown\n              className={`${row.isExpanded ? 'rotate-180' : 'rotate-0'}`}\n            />\n          </button>\n        </div>\n      ),\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n    },\n    {\n      header: <span>Status</span>,\n      key: 'View',\n      cell: (row) => (\n        <div\n          className={`inline-block ${\n            getStatusColorClass(row?.stakingStatus ?? '').bgColor\n          } rounded-lg p-1 text-center`}\n        >\n          <div>{stakingStatusLabel(row?.stakingStatus ?? '')}</div>\n        </div>\n      ),\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n    },\n    {\n      header: <span>VALIDATOR</span>,\n      key: 'accountId',\n      cell: (row) => (\n        <span>\n          <a href={`/address/${row.accountId}`} className=\"hover:no-underline\">\n            <a className=\"text-green-500 hover:no-underline\">\n              {shortenAddress(row.accountId)}\n            </a>\n          </a>\n          <div>{row.publicKey ? shortenAddress(row.publicKey) : ''}</div>\n        </span>\n      ),\n      tdClassName: 'pl-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n    },\n    {\n      header: <span>FEE</span>,\n      key: 'poolInfo',\n      cell: (row) => (\n        <div>\n          {row?.poolInfo?.fee !== undefined\n            ? `${(\n                (row?.poolInfo?.fee.numerator /\n                  row?.poolInfo?.fee.denominator) *\n                100\n              ).toFixed(0)}%`\n            : 'N/A'}\n        </div>\n      ),\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n    },\n\n    {\n      header: <span>DELEGATORS</span>,\n      key: 'deligators',\n      cell: (row) => {\n        return (\n          <div>\n            {row?.poolInfo?.delegatorsCount !== undefined &&\n            row.poolInfo.delegatorsCount !== null\n              ? formatWithCommas(row.poolInfo.delegatorsCount.toString())\n              : 'N/A'}\n          </div>\n        );\n      },\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n    },\n    {\n      header: <span>TOTAL STAKE</span>,\n      key: 'stake',\n      cell: (row) => (\n        <span>\n          {formatWithCommas(\n            (row.currentEpoch?.stake ??\n              row.nextEpoch?.stake ??\n              row.afterNextEpoch?.stake ??\n              `${row.contractStake}`).substring(0, 8),\n          )}\n          \u24c3\n        </span>\n      ),\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <span>STAKE %</span>,\n      key: 'percentage',\n      cell: (row) => {\n        return <div>{row?.percent}%</div>;\n      },\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <span>CUMULATIVE STAKE</span>,\n      key: 'cumulative_stake',\n      cell: (row) => {\n        return (\n          <div>\n            <div className=\"relative w-50 h-7 soft-shadow rounded-lg overflow-hidden bg-gray-300\">\n              <div\n                className=\"absolute top-0 left-0 right-0 bottom-0 h-full bg-green-500 text-center flex items-center justify-center\"\n                style={{\n                  width: `${row?.cumulativeStake?.cumulativePercent || 0}%`,\n                }}\n              ></div>\n              <span className=\"absolute  text-white inset-0 flex items-center justify-center\">\n                {row?.cumulativeStake?.cumulativePercent\n                  ? `${row?.cumulativeStake?.cumulativePercent}%`\n                  : 'N/A'}\n              </span>\n            </div>\n          </div>\n        );\n      },\n      tdClassName: 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <span>STAKE CHANGE (24H)</span>,\n      key: '24_change',\n      cell: (row) => {\n        if (!row?.stakeChange?.value) {\n          const visibleStake =\n            row?.currentEpoch?.stake ??\n            row?.nextEpoch?.stake ??\n            row?.afterNextEpoch?.stake ??\n            row?.contractStake;\n          if (visibleStake) {\n            return `${convertAmountToReadableString(\n              Math.abs(Number(visibleStake)),\n              'seatPriceAmount',\n            )}  \u24c3`;\n          }\n          return null;\n        }\n        return (\n          <div\n            className={`flex ${\n              row?.stakeChange.symbol === '+'\n                ? 'text-neargreen'\n                : 'text-red-500'\n            }`}\n          >\n            <div>{row?.stakeChange?.symbol}</div>\n            <p>{row?.stakeChange?.value} \u24c3</p>\n          </div>\n        );\n      },\n      tdClassName: 'px-6 py-4  whitespace-nowrap text-sm text-gray-500 ',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider whitespace-nowrap',\n    },\n  ];\n\n  const ExpandedRow = (row) => {\n    const telemetry = validatorFullData?.validatorTelemetry[row.accountId];\n    const progress = row?.currentEpoch?.progress;\n\n    const productivityRatio = progress\n      ? (progress.blocks.produced + progress.chunks.produced) /\n        (progress.blocks.total + progress.chunks.total)\n      : 0;\n\n    return (\n      <>\n        <tr>\n          <td colSpan={9} className=\"bg-gray-50\">\n            {telemetry && (\n              <Widget\n                src={`${config?.ownerId}/widget/bos-components.components.Shared.Table`}\n                props={{\n                  columns: [\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex\">\n                                <div>Uptime</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'Uptime is estimated by the ratio of the number of produced blocks to the number of expected blocks. '\n                              }\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'uptime',\n                      cell: () => {\n                        return (\n                          <div className=\"text-black\">\n                            {productivityRatio * 100 == 100\n                              ? 100\n                              : (productivityRatio * 100).toFixed(3)}\n                            %\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex\">\n                                <div>Latest block</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'The block height the validation node reported in the most recent telemetry heartbeat.'\n                              }\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'latest_block',\n                      cell: () => {\n                        return (\n                          <div\n                            className={\n                              Math.abs(telemetry.lastHeight - latestBlock) >\n                              1000\n                                ? 'text-danger'\n                                : Math.abs(telemetry.lastHeight - latestBlock) >\n                                  50\n                                ? 'text-warning'\n                                : undefined\n                            }\n                          >\n                            {telemetry?.lastHeight}\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex\">\n                                <div>Latest Telemetry Update</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'Telemetry is a regular notification coming from the nodes which includes generic information like the latest known block height, and the version of NEAR Protocol agent (nearcore).'\n                              }\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'telemetry',\n                      cell: () => {\n                        return (\n                          <div className=\"text-black\">\n                            {telemetry?.lastSeen &&\n                              timeAgo(telemetry?.lastSeen)}\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex\">\n                                <div>Node Agent Name</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'NEAR Protocol could have multiple implementations, so agent is the name of that implementation, where \"near-rs\" is.'\n                              }\n                              <a\n                                href=\"https://github.com/near/nearcore\"\n                                target=\"_blank\"\n                                className=\"text-green-500 hover:no-underline\"\n                              >\n                                the official implementation.\n                              </a>\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'agent_name',\n                      cell: () => {\n                        return (\n                          <span className=\"text-black rounded bg-gray-300 px-1\">\n                            {telemetry?.agentName}{' '}\n                          </span>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    {\n                      header: 'Node Agent Version / Build',\n                      key: 'agent_version',\n                      cell: () => {\n                        return (\n                          <span className=\"text-black rounded bg-gray-300 px-1\">{`${telemetry?.agentVersion}/${telemetry?.agentBuild}`}</span>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                  ],\n                  data: [telemetry] || [],\n                  isLoading: false,\n                  isPagination: false,\n                  isExpanded: true,\n                }}\n              />\n            )}\n            {row?.description ? (\n              <Widget\n                src={`${config?.ownerId}/widget/bos-components.components.Shared.Table`}\n                props={{\n                  columns: [\n                    {\n                      header: 'Web',\n                      key: 'web',\n                      cell: (row) => {\n                        return (\n                          <div>\n                            <a\n                              className=\"text-green-500 hover:no-underline\"\n                              href={\n                                row?.description?.url?.startsWith('http')\n                                  ? row?.description?.url\n                                  : `http://${row?.description?.url}`\n                              }\n                              rel=\"noreferrer noopener\"\n                              target=\"_blank\"\n                            >\n                              {' '}\n                              {row?.description?.url}\n                            </a>\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 pb-4 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    {\n                      header: 'Email',\n                      key: 'email',\n                      cell: (row) => {\n                        return (\n                          <div>\n                            <a\n                              className=\"text-green-500 hover:no-underline\"\n                              href={`mailto:${row?.description?.email}`}\n                            >\n                              {row?.description?.email}{' '}\n                            </a>\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'pl-6 pb-4 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-6 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    row?.description?.twitter && {\n                      header: 'Twitter',\n                      key: 'twitter',\n                      cell: (row) => {\n                        return (\n                          <div>\n                            <a\n                              className=\"text-green-500 hover:no-underline\"\n                              href={`https://twitter.com/${row?.description?.twitter}`}\n                              rel=\"noreferrer noopener\"\n                              target=\"_blank\"\n                            >\n                              {row?.description?.twitter}\n                            </a>\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-2 pb-4 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-2 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    row?.description?.discord && {\n                      header: 'Discord',\n                      key: 'discord',\n                      cell: (row) => {\n                        return (\n                          <div>\n                            <a\n                              className=\"text-green-500 hover:no-underline\"\n                              href={row?.description?.discord}\n                              rel=\"noreferrer noopener\"\n                              target=\"_blank\"\n                            >\n                              {row?.description?.discord}\n                            </a>\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 pb-4 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                    {\n                      header: 'Description',\n                      key: 'description',\n                      cell: (row) => {\n                        return (\n                          <div className=\"text-gray-400 w-full\">\n                            <small>{row?.description?.description}</small>\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-5 pb-4 whitespace-nowrap text-sm text-gray-500 font-medium',\n                      thClassName:\n                        'px-5 pt-4 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider',\n                    },\n                  ],\n                  data: [row] || [],\n                  isLoading: false,\n                  isPagination: false,\n                  isExpanded: true,\n                }}\n              />\n            ) : (\n              <div className=\"flex justify-center text-sm text-gray-500 font-medium py-4 \">\n                If you are node owner feel free to fill all &nbsp;\n                <a\n                  href=\"https://github.com/zavodil/near-pool-details#description\"\n                  className=\"text-green-500 hover:no-underline\"\n                  rel=\"noreferrer noopener\"\n                  target=\"_blank\"\n                >\n                  {' '}\n                  data{' '}\n                </a>\n                &nbsp;to promote your own node!\n              </div>\n            )}\n          </td>\n        </tr>\n      </>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <div className=\"w-full md:w-1/2\">\n          <div className=\"h-full bg-white soft-shadow rounded-lg overflow-hidden\">\n            <div>\n              <h2 className=\" flex justify-between border-b p-3 text-gray-600 text-sm font-semibold\">\n                <span>Staking Overview</span>\n              </h2>\n            </div>\n            <div className=\"px-3 divide-y text-sm text-gray-600\">\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Current Validators\n                </div>\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-4 w-16 break-words\" />\n                  ) : (\n                    validatorFullData?.currentValidators\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Total Staked\n                </div>\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-4 w-16 break-words\" />\n                  ) : (\n                    convertAmountToReadableString(\n                      validatorFullData?.totalStake,\n                      'totalStakeAmount',\n                    )\n                  )}\n                </div>\n              </div>\n              <div className=\"flex max-md:divide-y flex-col md:flex-row \">\n                <div className=\"flex items-center justify-between md:w-1/2 py-4\">\n                  <div className=\"w-full mb-2 md:mb-0\">Current Seat Price</div>\n                  <div className=\"w-full break-words\">\n                    {isLoading ? (\n                      <Skeleton className=\"h-4 w-16 break-words\" />\n                    ) : (\n                      <>\n                        {convertAmountToReadableString(\n                          Number(validatorFullData?.seatPrice),\n                          'seatPriceAmount',\n                        )}\n                        \u24c3\n                      </>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between md:w-1/2 py-4\">\n                  <div className=\"w-full mb-2 md:mb-0\">Total Supply</div>\n                  <div className=\"w-full break-words\">\n                    {isLoading ? (\n                      <Skeleton className=\"h-4 w-16 break-words\" />\n                    ) : (\n                      <>\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <span>{formatNumber(Number(TotalSupply))}</span>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"center\"\n                              side=\"top\"\n                            >\n                              {totalSuppy + ' yocto\u24c3'}\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>{' '}\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"w-full md:w-1/2\">\n          <div className=\"h-full bg-white soft-shadow rounded-lg overflow-hidden\">\n            <h2 className=\"border-b p-3 text-gray-600 text-sm font-semibold\">\n              Epoch Information\n            </h2>\n            <div className=\"px-3 divide-y text-sm text-gray-600\">\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Epoch Elapsed Time:\n                </div>\n                <div className=\"w-full text-green-500 md:w-3/4 break-words\">\n                  {!validatorFullData?.elapsedTime ? (\n                    <Skeleton className=\"h-3 w-32\" />\n                  ) : (\n                    convertTimestampToTime(validatorFullData?.elapsedTime)\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">ETA:</div>\n                <div className=\"w-full md:w-3/4 text-green-500 break-words\">\n                  {!validatorFullData?.totalSeconds ? (\n                    <Skeleton className=\"h-3 w-32\" />\n                  ) : (\n                    convertTimestampToTime(timeRemaining)\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Progress</div>\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {!validatorFullData?.epochProgress ? (\n                    <Skeleton className=\"h-3 w-full\" />\n                  ) : (\n                    <div className=\"flex space-x-4 gap-2 items-center \">\n                      <div className=\"bg-blue-50 h-2 w-full rounded-full\">\n                        <div\n                          className=\"bg-green-500 h-2 rounded-full\"\n                          style={{\n                            width: `${validatorFullData?.epochProgress.toFixed(\n                              1,\n                            )}%`,\n                          }}\n                        ></div>\n                      </div>\n                      {validatorFullData?.epochProgress.toFixed(0)}%\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"py-5\"></div>\n      <div className=\"w-full mb-10\">\n        <div className=\"bg-white soft-shadow rounded-lg pb-1\">\n          <div className=\"flex flex-col pt-4\">\n            <div className=\"flex flex-col\">\n              {isLoading ? (\n                <div className=\"leading-7 max-w-lg w-full pl-3 py-1.5 text-sm mb-4 text-gray-500\">\n                  <Skeleton className=\" h-4 break-words\" />\n                </div>\n              ) : (\n                <div className=\"leading-7 pl-3 px-3 text-sm mb-4 text-gray-500\">\n                  {validatorFullData?.total}\n                  Validators found\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-col\">\n              <Widget\n                src={`${config?.ownerId}/widget/bos-components.components.Shared.Table`}\n                props={{\n                  columns: columns,\n                  data: validatorFullData?.validatorEpochData || [],\n                  count: validatorFullData?.total,\n                  isLoading: isLoading,\n                  renderRowSubComponent: ExpandedRow,\n                  expanded,\n                  isPagination: true,\n                  page: currentPage,\n                  limit: 25,\n                  pageLimit: 999,\n                  setPage: setPage,\n                  Error: errorMessage,\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.NodeExplorer", "fact_widget_deployments_id": "623fdb5b79828fcc4ba7f9f85edc6576", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}