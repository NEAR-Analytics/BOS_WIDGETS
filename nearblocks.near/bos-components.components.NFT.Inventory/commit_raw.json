{"tx_hash": "CoeWR8MbEZS1sP2fVu7fdYKCYu3qCeJvvwVjthhGKbYy", "action_id_social": "B8F14ibSvXhWpVevRNWaCtaVAcdmKEah9MrifFmV9zTz-0-widget", "block_id": 110793436, "block_timestamp": "2024-01-19T12:36:31.244Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.NFT.Inventory", "source_code": "/**\n * Component: NFTInventory\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Non-Fungible Token Inventory List.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {Token} [token] - The Token type passed as object\n */\n\n/* INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\nconst FaChevronLeft = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-left\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\n      />\n    </svg>\n  );\n};\nconst FaChevronRight = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-right\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n};\n\n\n\n\n\n\n\n\n\nconst Loader = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 h-5 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};\n\nconst Paginator = (props) => {\n  let pages;\n  if (props.count) {\n    pages = Math.ceil(props.count / props.limit);\n  } else {\n    pages = 1;\n  }\n  pages = pages > props.pageLimit ? props.pageLimit : pages;\n  const onPrev = () => {\n    if (props.page <= 1) return null;\n\n    const newPage = (props.page || 1) - 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onNext = () => {\n    if (props.page >= pages) return null;\n\n    const newPage = (props.page || 1) + 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onFirst = () => props.setPage(1);\n  const onLast = () => props.setPage(pages);\n\n  return (\n    <div className=\"bg-white px-2 py-3 flex items-center justify-between border-t md:px-4\">\n      <div className=\"flex-1 flex items-center justify-between\">\n        <div></div>\n        {props.loading ? (\n          <Loader />\n        ) : (\n          <div>\n            <div\n              className=\"relative z-0 inline-flex rounded-md\"\n              aria-label=\"Pagination\"\n            >\n              <button\n                type=\"button\"\n                disabled={props.page <= 1 || pages === 1}\n                onClick={onFirst}\n                className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2  text-xs font-medium rounded-md ${\n                  props.page <= 1\n                    ? 'text-gray-500'\n                    : 'text-green-400 hover:bg-green-400 hover:text-white'\n                } bg-gray-100`}\n              >\n                First\n              </button>\n              <button\n                type=\"button\"\n                disabled={props.page <= 1 || pages === 1}\n                onClick={onPrev}\n                className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 font-medium ${\n                  props.page <= 1\n                    ? 'text-gray-500'\n                    : 'text-green-400 hover:text-white hover:bg-green-400'\n                } rounded-md  bg-gray-100`}\n              >\n                <FaChevronLeft />\n              </button>\n              <button\n                type=\"button\"\n                disabled\n                className=\"relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium text-gray-500 rounded-md  bg-gray-100\"\n              >\n                Page {props.page} of {pages}\n              </button>\n              <button\n                type=\"button\"\n                disabled={props.page >= pages || pages === 1}\n                onClick={onNext}\n                className={`relative inline-flex items-center ml-1 px-2 md:px-3 py-2 rounded-md font-medium ${\n                  props.page >= pages\n                    ? 'text-gray-500'\n                    : 'text-green-400 hover:text-white hover:bg-green-400'\n                }  bg-gray-100`}\n              >\n                <FaChevronRight />\n              </button>\n              <button\n                type=\"button\"\n                disabled={props.page >= pages || pages === 1}\n                onClick={onLast}\n                className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium rounded-md ${\n                  props.page >= pages\n                    ? 'text-gray-500'\n                    : 'text-green-400 hover:text-white hover:bg-green-400'\n                }  bg-gray-100 `}\n              >\n                Last\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction dollarNonCentFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n  return formattedNumber;\n}\n\nfunction weight(number) {\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (number >= 1000 && suffixIndex < suffixes.length - 1) {\n    number /= 1000;\n    suffixIndex++;\n  }\n\n  return number.toFixed(2) + ' ' + suffixes[suffixIndex];\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year == 1) {\n    return Math.ceil(intervals.year) + ' year ago';\n  } else if (intervals.year > 1) {\n    return Math.ceil(intervals.year) + ' years ago';\n  } else if (intervals.month > 1) {\n    return Math.ceil(intervals.month) + ' months ago';\n  } else if (intervals.week > 1) {\n    return Math.ceil(intervals.week) + ' weeks ago';\n  } else if (intervals.day > 1) {\n    return Math.ceil(intervals.day) + ' days ago';\n  } else if (intervals.hour > 1) {\n    return Math.ceil(intervals.hour) + ' hours ago';\n  } else if (intervals.minute > 1) {\n    return Math.ceil(intervals.minute) + ' minutes ago';\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  // Check if the number is close to an integer value\n  if (Math.abs(number) >= 10) {\n    number = Math.round(number); // Round the number to the nearest whole number\n    return number + ' ' + prefixes[count];\n  }\n\n  return (\n    Number(Math.floor(number * 100) / 100).toFixed(2) + ' ' + prefixes[count]\n  );\n}\nfunction formatNumber(value) {\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (value >= 10000 && suffixIndex < suffixes.length - 1) {\n    value /= 1000;\n    suffixIndex++;\n  }\n\n  const formattedValue = value.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\n\n\n\n\n\n\nfunction MainComponent({ network, id, token }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [totalCount, setTotalCount] = useState(0);\n  const [tokens, setTokens] = useState([]);\n  const config = getConfig(network);\n  const [tokenData, setTokenData] = useState({} );\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCurrentPage(currentPage);\n  }, [currentPage]);\n\n  useEffect(() => {\n    function fetchNFTData() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}nfts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setTokenData(resp);\n              setIsLoading(false);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchTotalToken() {\n      asyncFetch(`${config?.backendUrl}nfts/${id}/tokens/count`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.tokens?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchTokenData() {\n      setIsLoading(true);\n\n      asyncFetch(\n        `${config?.backendUrl}nfts/${id}/tokens?page=${currentPage}&per_page=24`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then((data) => {\n          const resp = data?.body?.tokens;\n          if (data.status === 200 && Array.isArray(resp) && resp.length > 0) {\n            setTokens(resp);\n          }\n        })\n        .catch(() => {})\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    if (!token && token === undefined) {\n      fetchNFTData();\n    }\n    fetchTotalToken();\n    fetchTokenData();\n  }, [config?.backendUrl, currentPage, id, token]);\n\n  useEffect(() => {\n    if (token) {\n      setTokenData(token);\n    }\n  }, [token]);\n\n  const Loader = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 h-5 rounded shadow-sm animate-pulse ${props.className} ${props.wrapperClassName}`}\n      ></div>\n    );\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader\n          className=\"leading-7\"\n          wrapperClassName=\"pl-3 max-w-sm py-4 h-[60px]\"\n        />\n      ) : (\n        <div className={`flex flex-col lg:flex-row pt-4 border-t`}>\n          <div className=\"flex flex-col\">\n            <p className=\"leading-7 px-6 text-sm mb-4 text-gray-500\">\n              A total of {localFormat(totalCount)} tokens found\n            </p>\n          </div>\n        </div>\n      )}\n      <div className=\"flex flex-wrap sm:grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 m-6\">\n        {isLoading &&\n          [...Array(24)].map((_, i) => (\n            <div\n              className=\"max-w-full border rounded p-3 mx-auto md:mx-0\"\n              key={i}\n            >\n              <a\n                href=\"#\"\n                className=\"w-40 h-40 flex items-center justify-center m-auto overflow-hidden\"\n              >\n                <Loader wrapperClassName=\"w-40 h-40\" className=\"h-40\" />\n              </a>\n              <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-gray-500 mt-4\">\n                <Loader />\n              </div>\n              <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-gray-500\">\n                <Loader />\n              </div>\n            </div>\n          ))}\n        {tokens.map((nft) => (\n          <div\n            className=\"max-w-full border rounded p-3 mx-auto md:mx-0\"\n            key={nft.contract + nft.token}\n          >\n            <a\n              href={`/nft-token/${nft.contract}/${nft.token}`}\n              className=\"hover:no-underline\"\n            >\n              <a className=\"w-40 h-40 flex items-center justify-center m-auto overflow-hidden hover:no-underline\">\n                {\n                  <Widget\n                    src={`${config.ownerId}/widget/bos-components.components.Shared.NFTImage`}\n                    props={{\n                      base: tokenData.base_uri,\n                      reference: nft.reference,\n                      className: 'rounded max-h-full',\n                      network: network,\n                    }}\n                  />\n                }\n              </a>\n            </a>\n            <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-gray-500 mt-4\">\n              Token ID:{' '}\n              <a\n                href={`/nft-token/${nft.contract}/${nft.token}`}\n                className=\"hover:no-underline\"\n              >\n                <a className=\"text-green hover:no-underline\">{nft.token}</a>\n              </a>\n            </div>\n            {nft.asset && (\n              <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-gray-500\">\n                Owner:{' '}\n                <a\n                  href={`/address/${nft.asset?.owner}`}\n                  className=\"hover:no-underline\"\n                >\n                  <a className=\"text-green hover:no-underline\">\n                    {nft.asset?.owner}\n                  </a>\n                </a>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <Paginator\n        count={totalCount}\n        loading={isLoading}\n        page={currentPage}\n        setPage={setPage}\n        limit={24}\n        pageLimit={200}\n      />\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.NFT.Inventory", "fact_widget_deployments_id": "2ff82c30458d0bff6407f481f6f0de18", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}