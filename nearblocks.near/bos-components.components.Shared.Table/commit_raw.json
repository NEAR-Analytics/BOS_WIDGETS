{"tx_hash": "9GLnTPX2snBSZAjLgLC3iHmgEVYZGmtXcR9a98Pucz8v", "action_id_social": "7e6U5ZGohAxjvbUqyc5QeAkL6YWCZyEQ2ULqoVTUBCVW-0-widget", "block_id": 111116258, "block_timestamp": "2024-01-23T12:12:04.911Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Shared.Table", "source_code": "/* INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\nconst FaChevronLeft = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-left\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\n      />\n    </svg>\n  );\n};\nconst FaChevronRight = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-right\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n};\n\n\n\n\n\n\n\n\nconst Paginator = (props) => {\n  let pages;\n  if (props.count) {\n    pages = Math.ceil(props.count / props.limit);\n  } else {\n    pages = 1;\n  }\n  pages = pages > props.pageLimit ? props.pageLimit : pages;\n  const onPrev = () => {\n    if (props.page <= 1) return null;\n\n    const newPage = (props.page || 1) - 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onNext = () => {\n    if (props.page >= pages) return null;\n\n    const newPage = (props.page || 1) + 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onFirst = () => props.setPage(1);\n  const onLast = () => props.setPage(pages);\n\n  return (\n    <div className=\"bg-white px-2 py-3 flex items-center justify-between border-t md:px-4\">\n      <div className=\"flex-1 flex items-center justify-between\">\n        <div></div>\n\n        <div>\n          <div\n            className=\"relative z-0 inline-flex rounded-md\"\n            aria-label=\"Pagination\"\n          >\n            <button\n              type=\"button\"\n              disabled={props.page <= 1 || pages === 1}\n              onClick={onFirst}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2  text-xs font-medium rounded-md ${\n                props.page <= 1\n                  ? 'text-gray-500'\n                  : 'text-green-400 hover:bg-green-400 hover:text-white'\n              } bg-gray-100`}\n            >\n              First\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page <= 1 || pages === 1}\n              onClick={onPrev}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 font-medium ${\n                props.page <= 1\n                  ? 'text-gray-500'\n                  : 'text-green-400 hover:text-white hover:bg-green-400'\n              } rounded-md  bg-gray-100`}\n            >\n              <FaChevronLeft />\n            </button>\n            <button\n              type=\"button\"\n              disabled\n              className=\"relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium text-gray-500 rounded-md  bg-gray-100\"\n            >\n              Page {props.page} of {pages}\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page >= pages || pages === 1}\n              onClick={onNext}\n              className={`relative inline-flex items-center ml-1 px-2 md:px-3 py-2 rounded-md font-medium ${\n                props.page >= pages\n                  ? 'text-gray-500'\n                  : 'text-green-400 hover:text-white hover:bg-green-400'\n              }  bg-gray-100`}\n            >\n              <FaChevronRight />\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page >= pages || pages === 1}\n              onClick={onLast}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium rounded-md ${\n                props.page >= pages\n                  ? 'text-gray-500'\n                  : 'text-green-400 hover:text-white hover:bg-green-400'\n              }  bg-gray-100 `}\n            >\n              Last\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @param {boolean} isLoading - Represents the loading state of the data.\n * @param {Array} columns - An array of objects defining the columns for the table.\n * @param {Array} data - An array of rows containing data for the table.\n * @param {boolean} isPagination - Indicates if pagination is enabled for the table.\n * @param {number} count - The total count of items in the dataset.\n * @param {number} page - The current page number being displayed.\n * @param {number} limit - The number of items per page.\n * @param {string} Error - Error message if there is no data.\n * @param {number} pageLimit - The maximum number of pages to display in pagination.\n * @param {function} setPage - A function used to set the current page of the table.\n * @param {function} renderRowSubComponent - A function is used to render a sub-component for each row in the table.\n * @param {Array} expanded - An array of numbers representing the indices of rows that are expanded.\n * @param {boolean} isExpanded -  Flag for compact table display.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent(props) {\n  if (props.isLoading) {\n    return (\n      <>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y border-t\">\n            <thead className=\"bg-gray-100 h-[51px]\">\n              <tr>\n                {props.columns.map((column, index) => (\n                  <th key={index} scope=\"col\" className={column.thClassName}>\n                    {column.header}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {[...Array(props.limit)].map((_, index) => (\n                <tr key={index} className=\" hover:bg-blue-900/5 h-[53px]\">\n                  {props.columns.map((column, colIndex) => (\n                    <td key={colIndex} className={column.tdClassName}>\n                      <Skeleton className=\"h-4\" />\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        {props.isPagination ? (\n          <Paginator\n            count={props.count}\n            page={props.page}\n            limit={props.limit}\n            pageLimit={props.pageLimit}\n            setPage={props.setPage}\n          />\n        ) : null}\n      </>\n    );\n  }\n  return (\n    <>\n      {props.isExpanded ? (\n        <div className={`bg-gray-50 overflow-x-auto`}>\n          <table className={'min-w-full divide-y border-separate '}>\n            <thead>\n              <tr>\n                {props?.columns.map((column, index) => (\n                  <th key={index} scope=\"col\" className={column.thClassName}>\n                    {column.header}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {!props.isLoading && props.data === undefined && (\n                <tr className=\"h-[53px]\">\n                  <td colSpan={100} className=\"px-6 py-4 text-gray-400 text-xs\">\n                    {props.Error}\n                  </td>\n                </tr>\n              )}\n              {props.data &&\n                props.data.map((row, rowIndex) => (\n                  <Fragment key={rowIndex}>\n                    <tr\n                      key={`expandRow-${rowIndex}`}\n                      className=\" hover:bg-blue-900/5\"\n                    >\n                      {props.columns.map((column, colIndex) => (\n                        <td\n                          key={`expandCol-${colIndex}`}\n                          className={column.tdClassName}\n                        >\n                          {column.cell\n                            ? column.cell(row, rowIndex)\n                            : row[column.key]}\n                        </td>\n                      ))}\n                    </tr>\n                    {row?.showWarning && (\n                      <tr className=\"h-[25px] hover:bg-blue-900/5\">\n                        <td\n                          key={`expandWarning-${rowIndex}`}\n                          colSpan={props.columns.length}\n                          className=\"px-5 py-2 whitespace-nowrap text-center text-sm text-yellow-500 font-medium\"\n                        >\n                          {row?.warning}\n                        </td>\n                      </tr>\n                    )}\n                  </Fragment>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div className=\"overflow-x-auto \">\n          <table className=\"min-w-full divide-y border-t\">\n            <thead className=\"bg-gray-100 h-[51px]\">\n              <tr>\n                {props?.columns.map((column, index) => (\n                  <th key={index} scope=\"col\" className={column.thClassName}>\n                    {column.header}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {!props.isLoading && props.data === undefined && (\n                <tr className=\"h-[53px]\">\n                  <td colSpan={100} className=\"px-6 py-4 text-gray-400 text-xs\">\n                    {props.Error}\n                  </td>\n                </tr>\n              )}\n              {props.data &&\n                props.data.map((row, rowIndex) => (\n                  <Fragment key={rowIndex}>\n                    <tr\n                      key={`row-${rowIndex}`}\n                      className=\" hover:bg-blue-900/5 h-[53px]\"\n                    >\n                      {props.columns.map((column, colIndex) => (\n                        <td\n                          key={`col-${colIndex}`}\n                          className={column.tdClassName}\n                        >\n                          {column.cell\n                            ? column.cell(row, rowIndex)\n                            : row[column.key]}\n                        </td>\n                      ))}\n                    </tr>\n                    {row?.showWarning && (\n                      <tr\n                        key={`warning-${rowIndex}`}\n                        className=\"h-[57px] hover:bg-blue-900/5\"\n                      >\n                        <td\n                          colSpan={props.columns.length}\n                          className=\"px-5 py-4  whitespace-nowrap text-sm text-center text-yellow-500 font-medium\"\n                        >\n                          {row?.warning}\n                        </td>\n                      </tr>\n                    )}\n                    {row.isExpanded ||\n                    (props.expanded.length > 0 &&\n                      props.expanded.includes(row.index))\n                      ? props.renderRowSubComponent(row)\n                      : null}\n                  </Fragment>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n      {props.isPagination ? (\n        <Paginator\n          count={props.count}\n          page={props.page}\n          limit={props.limit}\n          pageLimit={props.pageLimit}\n          setPage={props.setPage}\n        />\n      ) : null}\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Shared.Table", "fact_widget_deployments_id": "0c2b4ab1042795e09eb9430dfd8d457a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}