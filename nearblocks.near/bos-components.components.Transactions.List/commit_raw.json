{"tx_hash": "CqN9aryqeVfbnUezB9SNGnhogJ2wDre54ddDSayGgjH2", "action_id_social": "EGSPjHwhJGrQMoMUNdDX58BYL29oSZQukDEcYXbJjPmK-0-widget", "block_id": 108592714, "block_timestamp": "2023-12-23T02:08:12.844Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Transactions.List", "source_code": "/**\n * Component: TransactionsList\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Table of Transactions on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {number} [currentPage] - The current page number being displayed. (Optional)\n *                                 Example: If provided, currentPage=3 will display the third page of blocks.\n * @param {Object.<string, string>} [filters] - Key-value pairs for filtering transactions. (Optional)\n *                                              Example: If provided, method=batch will filter the blocks with method=batch.\n * @param {function} [setPage] - A function used to set the current page. (Optional)\n *                               Example: setPage={handlePageChange} where handlePageChange is a function to update the page.\n * @param {function} [handleFilter] - Function to handle filter changes. (Optional)\n *                                    Example: handleFilter={handlePageFilter} where handlePageFilter is a function to filter the page.\n * @param {function} onFilterClear - Function to clear a specific or all filters. (Optional)\n *                                   Example: onFilterClear={handleClearFilter} where handleClearFilter is a function to clear the applied filters.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\n\nfunction weight(number) {\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (number >= 1000 && suffixIndex < suffixes.length - 1) {\n    number /= 1000;\n    suffixIndex++;\n  }\n\n  return number.toFixed(2) + ' ' + suffixes[suffixIndex];\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year == 1) {\n    return Math.ceil(intervals.year) + ' year ago';\n  } else if (intervals.year > 1) {\n    return Math.ceil(intervals.year) + ' years ago';\n  } else if (intervals.month > 1) {\n    return Math.ceil(intervals.month) + ' months ago';\n  } else if (intervals.week > 1) {\n    return Math.ceil(intervals.week) + ' weeks ago';\n  } else if (intervals.day > 1) {\n    return Math.ceil(intervals.day) + ' days ago';\n  } else if (intervals.hour > 1) {\n    return Math.ceil(intervals.hour) + ' hours ago';\n  } else if (intervals.minute > 1) {\n    return Math.ceil(intervals.minute) + ' minutes ago';\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  return number.toFixed(2) + ' ' + prefixes[count];\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed();\n  return `${formattedNumber}%`;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year == 1) {\n    return Math.ceil(intervals.year) + ' year ago';\n  } else if (intervals.year > 1) {\n    return Math.ceil(intervals.year) + ' years ago';\n  } else if (intervals.month > 1) {\n    return Math.ceil(intervals.month) + ' months ago';\n  } else if (intervals.week > 1) {\n    return Math.ceil(intervals.week) + ' weeks ago';\n  } else if (intervals.day > 1) {\n    return Math.ceil(intervals.day) + ' days ago';\n  } else if (intervals.hour > 1) {\n    return Math.ceil(intervals.hour) + ' hours ago';\n  } else if (intervals.minute > 1) {\n    return Math.ceil(intervals.minute) + ' minutes ago';\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  return number.toFixed(2) + ' ' + prefixes[count];\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed();\n  return `${formattedNumber}%`;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  return number.toFixed(2) + ' ' + prefixes[count];\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed();\n  return `${formattedNumber}%`;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed();\n  return `${formattedNumber}%`;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/near.jsx\" */\nfunction txnMethod(actions) {\n  const count = actions?.length || 0;\n\n  if (!count) return 'Unknown';\n  if (count > 1) return 'Batch Transaction';\n\n  const action = actions[0];\n\n  if (action.action === 'FUNCTION_CALL') {\n    return action.method;\n  }\n\n  return action.action;\n}\n\nfunction gasPrice(yacto) {\n  const near = Big(yoctoToNear(yacto, false)).mul(Big(10).pow(12)).toString();\n\n  return `${localFormat(near)} \u24c3 / Tgas`;\n}\n\nfunction tokenAmount(amount, decimal, format) {\n  if (amount === undefined || amount === null) return 'N/A';\n\n  const near = Big(amount).div(Big(10).pow(+decimal));\n\n  return format\n    ? near.toString().toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 8,\n      })\n    : near;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n/* END_INCLUDE: \"includes/near.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  console.log('hgjhgh');\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  console.log('hgjhgh');\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  console.log('hgjhgh');\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nfunction fiatValue(big, price) {\n  // @ts-ignore\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\n\nfunction nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api-testnet-beta.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  console.log('hgjhgh');\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FaLongArrowAltRight.jsx\" */\nconst FaLongArrowAltRight = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\">\n      <path\n        d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216\"\n        fill=\"#ffffff\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaLongArrowAltRight.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\nconst FaCheckCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"\n        fill=\"#50C878\"\n      />\n    </svg>\n  );\n};\nconst FaTimesCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z\"\n        fill=\"#ff0000\"\n      />\n    </svg>\n  );\n};\nconst FaHourglassStart = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 384 512\">\n      <path\n        d=\"M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM288 437v11H96V437c0-25.5 10.1-49.9 28.1-67.9L192 301.3l67.9 67.9c18 18 28.1 42.4 28.1 67.9z\"\n        fill=\"#FFEB3B\"\n      />\n    </svg>\n  );\n};\n\nconst getOptions = (status) => {\n  switch (status) {\n    case null:\n      return {\n        bg: 'bg-yellow-50',\n        text: 'text-yellow-500',\n        icon: FaHourglassStart,\n        label: 'Pending',\n      };\n    case false:\n      return {\n        bg: 'bg-red-50',\n        text: 'text-red-500',\n        icon: FaTimesCircle,\n        label: 'Failure',\n      };\n\n    default:\n      return {\n        bg: 'bg-emerald-50',\n        text: 'text-emerald-500',\n        icon: FaCheckCircle,\n        label: 'Success',\n      };\n  }\n};\n\nconst TxnStatus = (props) => {\n  const option = getOptions(props.status);\n  const Icon = option.icon;\n\n  return (\n    <div className=\"w-full md:w-3/4 break-words\">\n      <span\n        className={`inline-flex items-center text-xs rounded py-1 ${\n          option.bg\n        } ${option.text} ${props.showLabel ? ' px-2' : ' px-1'}`}\n      >\n        <Icon />\n        {props.showLabel && <span className=\"ml-2\">{option.label}</span>}\n      </span>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Filter.jsx\" */\nconst Filter = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M14 14v6l-4 2v-8L4 5V3h16v2l-6 9zM6.404 5L12 13.394 17.596 5H6.404z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Filter.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};\n\nconst SortIcon = (props) => {\n  return (\n    <ArrowUp\n      className={`h-3 w-3 fill-current transition-transform mr-1 duration-700 ${\n        props.order !== 'asc' ? 'transform rotate-180' : 'transform rotate-0'\n      }`}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skelton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skelton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 h-5 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skelton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\nconst CloseCircle = (props) => {\n  const handleClick = () => {\n    if (props.onClick) {\n      props.onClick('All');\n    }\n  };\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      className={props.className}\n      onClick={handleClick}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm0-9.414l2.828-2.829 1.415 1.415L13.414 12l2.829 2.828-1.415 1.415L12 13.414l-2.828 2.829-1.415-1.415L10.586 12 7.757 9.172l1.415-1.415L12 10.586z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\n\nfunction MainComponent(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalCount, setTotalCount] = useState(1);\n  const [txns, setTxns] = useState([]);\n  const [showAge, setShowAge] = useState(true);\n\n  const [sorting, setSorting] = useState('desc');\n\n  const config = getConfig(props.network);\n\n  const toggleShowAge = () => setShowAge((s) => !s);\n\n  useEffect(() => {\n    function fetchTotalTxns(qs) {\n      setIsLoading(true);\n      const queryParams = qs ? '?' + qs : '';\n      asyncFetch(`${config?.backendUrl}txns/count${queryParams}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            setTotalCount(0);\n            setTotalCount(resp?.count);\n          },\n        )\n        .catch(() => {})\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n\n    function fetchTxnsData(qs, sqs) {\n      setIsLoading(true);\n      const queryParams = qs ? qs + '&' : '';\n      asyncFetch(\n        `${config?.backendUrl}txns?${queryParams}order=${sqs}&page=${props.currentPage}&per_page=25`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then((data) => {\n          const resp = data?.body?.txns;\n          if (Array.isArray(resp) && resp.length > 0) {\n            setTxns(resp);\n          }\n        })\n        .catch(() => {});\n      setIsLoading(false);\n    }\n    let urlString = '';\n    if (props?.filters && Object.keys(props.filters).length > 0) {\n      urlString = Object.keys(props.filters)\n        .map(\n          (key) =>\n            `${encodeURIComponent(key)}=${encodeURIComponent(\n              props?.filters[key],\n            )}`,\n        )\n        .join('&');\n    }\n\n    if (urlString && sorting) {\n      fetchTotalTxns(urlString);\n      fetchTxnsData(urlString, sorting);\n    } else if (urlString) {\n      fetchTotalTxns(urlString);\n      fetchTxnsData(urlString);\n    } else if (\n      sorting &&\n      (!props.filters || Object.keys(props.filters).length === 0)\n    ) {\n      fetchTotalTxns();\n      fetchTxnsData('', sorting);\n    }\n  }, [config?.backendUrl, props.currentPage, props?.filters, sorting]);\n\n  let filterValue;\n  const onInputChange = (event) => {\n    filterValue = event.target.value;\n    // Do something with the value if needed\n  };\n\n  const onFilter = (\n    e,\n    name,\n  ) => {\n    e.preventDefault();\n\n    props.handleFilter(name, filterValue);\n  };\n\n  const onClear = (name) => {\n    if (props.onFilterClear && props.filters) {\n      props.onFilterClear(name);\n    }\n  };\n\n  const onOrder = () => {\n    setSorting((state) => (state === 'asc' ? 'desc' : 'asc'));\n  };\n\n  const columns = [\n    {\n      header: '',\n      key: '',\n      cell: (row) => (\n        <span className=\"pl-5 pr-2 py-4 whitespace-nowrap text-sm text-gray-500  flex justify-end \">\n          <TxnStatus status={row.outcomes.status} showLabel={false} />\n        </span>\n      ),\n    },\n    {\n      header: (\n        <span className=\"px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider\">\n          TXN HASH\n        </span>\n      ),\n      key: 'transaction_hash',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[120px] inline-block align-bottom text-green-500\">\n                  <a\n                    href={`/txns/${row.transaction_hash}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500 font-medium\">\n                      {truncateString(row.transaction_hash, 15, '...')}\n                    </a>\n                  </a>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                sideOffset={8}\n                place=\"bottom\"\n              >\n                {row.transaction_hash}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n    },\n    {\n      header: (\n        <Popover.Root>\n          <Popover.Trigger\n            asChild\n            className=\"flex items-center px-6 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider focus:outline-none\"\n          >\n            <button className=\"IconButton\" aria-label=\"Update dimensions\">\n              METHOD\n              <Filter className=\"h-3 w-3 fill-current mr-2\" />\n            </button>\n          </Popover.Trigger>\n          <Popover.Content\n            className=\"bg-white shadow-lg border rounded-b-lg p-2\"\n            sideOffset={5}\n          >\n            <div>\n              <input\n                name=\"type\"\n                value={props?.filters ? props?.filters?.method : ''}\n                onChange={onInputChange}\n                placeholder=\"Search by method\"\n                className=\"border rounded h-8 mb-2 px-2 text-gray-500 text-xs\"\n              />\n              <div className=\"flex\">\n                <button\n                  type=\"submit\"\n                  onClick={(e) => onFilter(e, 'method')}\n                  className=\"flex items-center justify-center flex-1 rounded bg-green-500 h-7 text-white text-xs mr-2\"\n                >\n                  <Filter className=\"h-3 w-3 fill-current mr-2\" /> Filter\n                </button>\n                <button\n                  name=\"type\"\n                  type=\"button\"\n                  onClick={() => onClear('method')}\n                  className=\"flex-1 rounded bg-gray-300 text-xs h-7\"\n                >\n                  Clear\n                </button>\n              </div>\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      ),\n      key: 'actions',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger\n                asChild\n                className=\"px-5 py-4 whitespace-nowrap text-sm text-gray-500\"\n              >\n                <span className=\"bg-blue-900/10 text-xs text-gray-500 rounded-xl px-2 py-1 max-w-[120px] inline-flex truncate\">\n                  <span className=\"block truncate\">\n                    {truncateString(txnMethod(row.actions).trim(), 15, '...')}\n                  </span>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                sideOffset={8}\n                place=\"bottom\"\n              >\n                {txnMethod(row.actions)}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n    },\n    {\n      header: (\n        <span className=\"px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider whitespace-nowrap\">\n          DEPOSIT VALUE\n        </span>\n      ),\n      key: 'deposit',\n      cell: (row) => (\n        <span className=\"px-5 py-4 whitespace-nowrap text-sm text-gray-500\">\n          {yoctoToNear(row.actions_agg?.deposit || 0, true)} \u24c3\n        </span>\n      ),\n    },\n    {\n      header: (\n        <span className=\"px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider whitespace-nowrap\">\n          TXN FEE\n        </span>\n      ),\n      key: 'transaction_fee',\n      cell: (row) => (\n        <span className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n          {' '}\n          {yoctoToNear(row.outcomes_agg?.transaction_fee || 0, true)} \u24c3\n        </span>\n      ),\n    },\n    {\n      header: (\n        <Popover.Root>\n          <Popover.Trigger\n            asChild\n            className=\"flex items-center text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider focus:outline-none\"\n          >\n            <button className=\"IconButton\" aria-label=\"Update dimensions\">\n              FROM\n              <Filter className=\"h-3 w-3 fill-current mr-2\" />\n            </button>\n          </Popover.Trigger>\n          <Popover.Content\n            className=\"bg-white shadow-lg border rounded-b-lg p-2\"\n            sideOffset={5}\n          >\n            <input\n              name=\"from\"\n              value={props?.filters ? props?.filters?.from : ''}\n              onChange={onInputChange}\n              placeholder={'Search by address e.g. \u24c3..'}\n              className=\"border rounded h-8 mb-2 px-2 text-gray-500 text-xs\"\n            />\n            <div className=\"flex\">\n              <button\n                type=\"submit\"\n                onClick={(e) => onFilter(e, 'from')}\n                className=\"flex items-center justify-center flex-1 rounded bg-green-500 h-7 text-white text-xs mr-2\"\n              >\n                <Filter className=\"h-3 w-3 fill-current mr-2\" /> Filter\n              </button>\n              <button\n                name=\"from\"\n                type=\"button\"\n                onClick={() => onClear('from')}\n                className=\"flex-1 rounded bg-gray-300 text-xs h-7\"\n              >\n                Clear\n              </button>\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      ),\n      key: 'signer_account_id',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[120px] inline-block align-bottom text-green-500\">\n                  <a\n                    href={`/address/${row.signer_account_id}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500\">\n                      {truncateString(row.signer_account_id, 18, '...')}\n                    </a>\n                  </a>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                sideOffset={8}\n                place=\"bottom\"\n              >\n                {row.signer_account_id}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n    },\n    {\n      header: '',\n      key: '',\n      cell: () => (\n        <div className=\"w-5 h-5 p-1 bg-green-100 rounded-full text-center flex justify-center items-center mx-auto text-white\">\n          <FaLongArrowAltRight />\n        </div>\n      ),\n    },\n    {\n      header: (\n        <Popover.Root>\n          <Popover.Trigger\n            asChild\n            className=\"flex items-center text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider focus:outline-none\"\n          >\n            <button className=\"IconButton\" aria-label=\"Update dimensions\">\n              To\n              <Filter className=\"h-3 w-3 fill-current mr-2\" />\n            </button>\n          </Popover.Trigger>\n          <Popover.Content\n            className=\"bg-white shadow-lg border rounded-b-lg p-2\"\n            sideOffset={5}\n          >\n            <input\n              name=\"to\"\n              value={props?.filters ? props?.filters?.to : ''}\n              onChange={onInputChange}\n              placeholder={'Search by address e.g. \u24c3..'}\n              className=\"border rounded h-8 mb-2 px-2 text-gray-500 text-xs\"\n            />\n            <div className=\"flex\">\n              <button\n                type=\"submit\"\n                onClick={(e) => onFilter(e, 'to')}\n                className=\"flex items-center justify-center flex-1 rounded bg-green-500 h-7 text-white text-xs mr-2\"\n              >\n                <Filter className=\"h-3 w-3 fill-current mr-2\" /> Filter\n              </button>\n              <button\n                name=\"to\"\n                type=\"button\"\n                onClick={() => onClear('to')}\n                className=\"flex-1 rounded bg-gray-300 text-xs h-7\"\n              >\n                Clear\n              </button>\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      ),\n      key: 'receiver_account_id',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[120px] inline-block align-bottom text-green-500\">\n                  <a\n                    href={`/address/${row.receiver_account_id}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500\">\n                      {truncateString(row.receiver_account_id, 17, '...')}\n                    </a>\n                  </a>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                sideOffset={8}\n                place=\"bottom\"\n              >\n                {row.receiver_account_id}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n    },\n    {\n      header: (\n        <span className=\"px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider whitespace-nowrap\">\n          BLOCK HEIGHT\n        </span>\n      ),\n      key: 'block_height',\n      cell: (row) => (\n        <span className=\"px-5 py-4 whitespace-nowrap text-sm text-gray-500 font-medium\">\n          <a\n            href={`/blocks/${row.included_in_block_hash}`}\n            className=\"hover:no-underline\"\n          >\n            <a className=\"text-green-500\">\n              {localFormat(row.block?.block_height)}\n            </a>\n          </a>\n        </span>\n      ),\n    },\n    {\n      header: (\n        <span className=\"inline-flex\">\n          <div className=\"w-full inline-flex px-5 py-4\">\n            <button\n              type=\"button\"\n              onClick={toggleShowAge}\n              className=\"text-left text-xs w-full font-semibold uppercase tracking-wider text-nearblue-600 focus:outline-none whitespace-nowrap\"\n            >\n              {showAge ? 'AGE' : 'DATE TIME (UTC)'}\n            </button>\n            <button type=\"button\" onClick={onOrder} className=\"px-2\">\n              <div className=\"text-gray-500 font-semibold\">\n                <SortIcon order={sorting} />\n              </div>\n            </button>\n          </div>\n        </span>\n      ),\n      key: 'block_timestamp',\n      cell: (row) => (\n        <span className=\"px-5 py-4 whitespace-nowrap text-sm text-gray-500\">\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span>\n                  {!showAge\n                    ? formatTimestampToString(\n                        nanoToMilli(Number(row.block_timestamp || 0)),\n                      )\n                    : getTimeAgoString(\n                        nanoToMilli(Number(row.block_timestamp || 0)),\n                      )}\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                sideOffset={8}\n                place=\"bottom\"\n              >\n                {showAge\n                  ? formatTimestampToString(\n                      nanoToMilli(Number(row.block_timestamp || 0)),\n                    )\n                  : getTimeAgoString(\n                      nanoToMilli(Number(row.block_timestamp || 0)),\n                    )}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"bg-hero-pattern h-72\">\n        <div className=\"container mx-auto px-3\">\n          <h1 className=\"mb-4 pt-8 sm:sm:text-2xl text-xl text-white\">\n            Latest Near Protocol transactions\n          </h1>\n        </div>\n      </div>\n      <div className=\"container mx-auto px-3 -mt-48\">\n        <div className=\"block lg:flex lg:space-x-2\">\n          <div className=\"w-full\">\n            <div className=\"bg-white border soft-shadow rounded-lg overflow-hidden\">\n              {isLoading ? (\n                <Skelton />\n              ) : (\n                <div className={`flex flex-col lg:flex-row pt-4`}>\n                  <div className=\"flex flex-col\">\n                    <p className=\"leading-7 pl-6 text-sm mb-4 text-gray-500\">\n                      {`More than > ${totalCount} transactions found`}\n                    </p>\n                  </div>\n                  {props?.filters && Object.keys(props?.filters).length > 0 && (\n                    <div className=\"flex items-center px-2 text-sm mb-4 text-gray-500 lg:ml-auto\">\n                      Filtered By:\n                      <span className=\"flex items-center bg-gray-100 rounded-full px-3 py-1 ml-1 space-x-2\">\n                        {props?.filters &&\n                          Object.keys(props?.filters).map((key) => (\n                            <span className=\"flex\" key={key}>\n                              {capitalizeFirstLetter(key)}:{' '}\n                              <span className=\"inline-block truncate max-w-[120px]\">\n                                <span className=\"font-semibold\">\n                                  {props?.filters[key]}\n                                </span>\n                              </span>\n                            </span>\n                          ))}\n                        <CloseCircle\n                          className=\"w-4 h-4 fill-current cursor-pointer\"\n                          onClick={onClear}\n                        />\n                      </span>\n                    </div>\n                  )}\n                </div>\n              )}\n              {\n                <Widget\n                  src={`${config.ownerId}/widget/bos-components.components.Shared.Table`}\n                  props={{\n                    columns: columns,\n                    data: txns,\n                    isLoading: isLoading,\n                    isPagination: true,\n                    count: totalCount,\n                    page: props.currentPage,\n                    limit: 25,\n                    pageLimit: 200,\n                    setPage: props.setPage,\n                  }}\n                />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Transactions.List", "fact_widget_deployments_id": "a55e4b8bfb394fc6c55eda1431d2ce03", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}