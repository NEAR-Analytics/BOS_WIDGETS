{"tx_hash": "9GLnTPX2snBSZAjLgLC3iHmgEVYZGmtXcR9a98Pucz8v", "action_id_social": "7e6U5ZGohAxjvbUqyc5QeAkL6YWCZyEQ2ULqoVTUBCVW-0-widget", "block_id": 111116258, "block_timestamp": "2024-01-23T12:12:04.911Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Shared.Search", "source_code": "/**\n * @interface Props\n * @param {string}  [network] - The network data to show, either mainnet or testnet.\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {boolean} [isHeader] - If the component is part of a header, apply alternate styles.\n */\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/SearchIcon.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst SearchIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M11 2c4.968 0 9 4.032 9 9s-4.032 9-9 9-9-4.032-9-9 4.032-9 9-9zm0 16c3.867 0 7-3.133 7-7 0-3.868-3.133-7-7-7-3.868 0-7 3.132-7 7 0 3.867 3.132 7 7 7zm8.485.071l2.829 2.828-1.415 1.415-2.828-2.829 1.414-1.414z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/SearchIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/* INCLUDE: \"includes/search.jsx\" */\nfunction search(\n  keyword,\n  filter,\n  returnPath,\n  url,\n) {\n  try {\n    const route = getRoute(filter);\n\n    return asyncFetch(`${url}search/${route}?keyword=${keyword}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((data) => {\n        const resp = data.body;\n        if (!resp) {\n          return returnPath\n            ? null\n            : { blocks: [], txns: [], accounts: [], receipts: [] };\n        }\n\n        if (resp.blocks?.length) {\n          return returnPath\n            ? { type: 'block', path: resp.blocks[0].block_hash }\n            : { blocks: resp.blocks, txns: [], accounts: [], receipts: [] };\n        }\n\n        if (resp.txns?.length) {\n          return returnPath\n            ? { type: 'txn', path: resp.txns[0].transaction_hash }\n            : { blocks: [], txns: resp.txns, accounts: [], receipts: [] };\n        }\n\n        if (resp.receipts?.length) {\n          return returnPath\n            ? {\n                type: 'txn',\n                path: resp.receipts[0].originated_from_transaction_hash,\n              }\n            : { blocks: [], txns: [], accounts: [], receipts: resp.receipts };\n        }\n\n        if (resp.accounts?.length) {\n          return returnPath\n            ? { type: 'address', path: resp.accounts[0].account_id }\n            : { blocks: [], txns: [], accounts: resp.accounts, receipts: [] };\n        }\n\n        return returnPath\n          ? null\n          : { blocks: [], txns: [], accounts: [], receipts: [] };\n      })\n      .catch((err) => {\n        console.error({ err });\n        return null;\n      });\n  } catch (err) {\n    console.error({ err });\n    return Promise.resolve(null);\n  }\n}\n\nfunction getRoute(filter) {\n  switch (filter) {\n    case 'txns':\n      return 'txns';\n    case 'blocks':\n      return 'blocks';\n    case 'accounts':\n      return 'accounts';\n    default:\n      return '';\n  }\n}\n/* END_INCLUDE: \"includes/search.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\n\nfunction dollarFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  return formattedNumber;\n}\nfunction dollarNonCentFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n  return formattedNumber;\n}\n\nfunction weight(number) {\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (number >= 1000 && suffixIndex < suffixes.length - 1) {\n    number /= 1000;\n    suffixIndex++;\n  }\n\n  return number.toFixed(2) + ' ' + suffixes[suffixIndex];\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year == 1) {\n    return Math.ceil(intervals.year) + ' year ago';\n  } else if (intervals.year > 1) {\n    return Math.ceil(intervals.year) + ' years ago';\n  } else if (intervals.month > 1) {\n    return Math.ceil(intervals.month) + ' months ago';\n  } else if (intervals.day > 1) {\n    return Math.ceil(intervals.day) + ' days ago';\n  } else if (intervals.hour > 1) {\n    return Math.ceil(intervals.hour) + ' hours ago';\n  } else if (intervals.minute > 1) {\n    return Math.ceil(intervals.minute) + ' minutes ago';\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(number) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let count = 0;\n  while (Math.abs(number) >= 1000 && count < prefixes.length - 1) {\n    number /= 1000;\n    count++;\n  }\n\n  // Check if the number is close to an integer value\n  if (Math.abs(number) >= 10) {\n    number = Math.round(number); // Round the number to the nearest whole number\n    return number + ' ' + prefixes[count];\n  }\n\n  return (\n    Number(Math.floor(number * 100) / 100).toFixed(2) + ' ' + prefixes[count]\n  );\n}\nfunction formatNumber(value) {\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (value >= 10000 && suffixIndex < suffixes.length - 1) {\n    value /= 1000;\n    suffixIndex++;\n  }\n\n  const formattedValue = value.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near} \u24c3`;\n}\n\nfunction currency(number) {\n  let absNumber = Math.abs(number);\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {\n    absNumber /= 1000;\n    suffixIndex++;\n  }\n\n  let shortNumber = parseFloat(absNumber.toFixed(2));\n\n  return (number < 0 ? '-' : '') + shortNumber + ' ' + suffixes[suffixIndex];\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const formattedNumber = Number(number).toLocaleString('en', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 5,\n  });\n  return formattedNumber;\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n\n\nfunction MainComponent({ isHeader, t, network }) {\n  const [keyword, setKeyword] = useState('');\n  const [result, setResult] = useState({} );\n  const [filter, setFilter] = useState('all');\n  const config = getConfig(network);\n\n  // Determine whether to show search results\n  const showResults =\n    (result?.blocks && result.blocks.length > 0) ||\n    (result?.txns && result.txns.length > 0) ||\n    (result?.accounts && result.accounts.length > 0) ||\n    (result?.receipts && result.receipts.length > 0);\n\n  // Debounced keyword update\n  const debouncedSetKeyword = useMemo(\n    () => debounce(500, (value) => setKeyword(value)),\n    [],\n  );\n\n  // Handle input change\n  const handleChange = (event) => {\n    const newNextValue = event.target.value.replace(/[\\s,]/g, '') ;\n    debouncedSetKeyword(newNextValue);\n  };\n\n  useEffect(() => {\n    // Fetch data when keyword or filter changes\n    const fetchData = (keyword, filter) => {\n      if (filter && keyword) {\n        search(keyword, filter, false, config.backendUrl).then((data) => {\n          setResult(data || {});\n        });\n      }\n    };\n    fetchData(keyword, filter);\n  }, [keyword, filter, config.backendUrl]);\n  // Handle filter change\n  const onFilter = (event) =>\n    setFilter(event.target.value);\n\n  return (\n    <>\n      <div className=\"flex flex-grow\">\n        <div className={`flex w-full ${isHeader ? 'h-11' : 'h-12'}`}>\n          <label className=\"relative hidden md:flex\">\n            <select\n              className={`h-full block text-sm text-gray-500 ${\n                isHeader ? 'bg-blue-900/[0.05]' : 'bg-gray-100'\n              }  pl-4 pr-9  cursor-pointer focus:outline-none appearance-none rounded-none rounded-l-lg border`}\n              value={filter}\n              onChange={onFilter}\n            >\n              <option value=\"all\">\n                {t ? t('common:search.filters.all') : 'All filters'}\n              </option>\n              <option value=\"txns\">\n                {t ? t('common:search.filters.txns') : 'Txns'}\n              </option>\n              <option value=\"blocks\">\n                {t ? t('common:search.filters.blocks') : 'Blocks'}\n              </option>\n              <option value=\"accounts\">\n                {t ? t('common:search.filters.addresses') : 'Addresses'}\n              </option>\n            </select>\n            <ArrowDown className=\"absolute right-3 top-3.5 w-4 h-4 fill-current text-gray-500 pointer-events-none\" />\n          </label>\n          <div className=\"flex-grow\">\n            <input\n              placeholder={\n                t\n                  ? t('common:search.placeholder')\n                  : 'Search by Account ID / Txn Hash / Block'\n              }\n              className=\"search bg-white w-full h-full text-sm px-4 py-3 outline-none border-l border-t border-b md:border-l-0 rounded-l-lg rounded-r-none md:rounded-l-none\"\n              onChange={handleChange}\n            />\n            {showResults && (\n              <div className=\"z-50 relative\">\n                <div className=\"text-xs rounded-b-lg  bg-gray-50 py-2 shadow border\">\n                  {result?.accounts && result.accounts.length > 0 && (\n                    <>\n                      <h3 className=\" mx-2 my-2 px-2 py-2 text-sm bg-gray-100 rounded\">\n                        {t ? t('common:search.list.address') : 'Account'}\n                      </h3>\n                      {result.accounts.map((address) => (\n                        <a\n                          href={`/address/${address.account_id}`}\n                          className=\"hover:no-underline\"\n                          key={address.account_id}\n                        >\n                          <div className=\"mx-2 px-2 py-2 hover:bg-gray-100 cursor-pointer hover:border-gray-500 truncate\">\n                            {shortenAddress(address.account_id)}\n                          </div>\n                        </a>\n                      ))}\n                    </>\n                  )}\n                  {result?.txns && result.txns.length > 0 && (\n                    <>\n                      <h3 className=\" mx-2 my-2 px-2 py-2 text-sm bg-gray-100 rounded\">\n                        {t ? t('common:search.list.txns') : 'Txns'}\n                      </h3>\n                      {result.txns.map((txn) => (\n                        <a\n                          className=\"hover:no-underline\"\n                          href={`/txns/${txn.transaction_hash}`}\n                          key={txn.transaction_hash}\n                        >\n                          <div className=\"mx-2 px-2 py-2 hover:bg-gray-100 cursor-pointer hover:border-gray-500 truncate\">\n                            {shortenHex(txn.transaction_hash)}\n                          </div>\n                        </a>\n                      ))}\n                    </>\n                  )}\n                  {result?.receipts && result.receipts.length > 0 && (\n                    <>\n                      <h3 className=\" mx-2 my-2 px-2 py-2 text-sm bg-gray-100 rounded\">\n                        Receipts\n                      </h3>\n                      {result.receipts.map((receipt) => (\n                        <a\n                          href={`/receipt/${receipt.originated_from_transaction_hash}`}\n                          className=\"hover:no-underline\"\n                          key={receipt.receipt_id}\n                        >\n                          <div className=\"mx-2 px-2 py-2 hover:bg-gray-100 cursor-pointer hover:border-gray-500 truncate\">\n                            {shortenHex(receipt.receipt_id)}\n                          </div>\n                        </a>\n                      ))}\n                    </>\n                  )}\n                  {result?.blocks && result.blocks.length > 0 && (\n                    <>\n                      <h3 className=\" mx-2 my-2 px-2 py-2 text-sm bg-gray-100 rounded\">\n                        {t ? t('common:search.list.blocks') : 'Blocks'}\n                      </h3>\n                      {result.blocks.map((block) => (\n                        <a\n                          href={`/block/${block.block_hash}`}\n                          className=\"hover:no-underline\"\n                          key={block.block_hash}\n                        >\n                          <div className=\"mx-2 px-2 py-2 hover:bg-gray-100 cursor-pointer hover:border-gray-500 truncate\">\n                            #{localFormat(block.block_height)} (0x\n                            {shortenHex(block.block_hash)})\n                          </div>\n                        </a>\n                      ))}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          <button\n            type=\"button\"\n            className={`${\n              isHeader ? 'bg-blue-900/[0.05]' : 'bg-gray-100'\n            } rounded-r-lg px-5 outline-none focus:outline-none border`}\n          >\n            <SearchIcon className=\"text-gray-700 fill-current \" />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Shared.Search", "fact_widget_deployments_id": "0924257e8460468bfb1a165fcdceeba3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 22}