{"tx_hash": "CzALETyS64FuJBkXVGSQz3BowrRTNeR6iDTaJidy9sNf", "action_id_social": "HGnBGmH7qQ2oVLvBQ7B4yvrwgnwnGSJHHevYpwtQ5WMj-0-widget", "block_id": 114247012, "block_timestamp": "2024-03-07T05:25:45.493Z", "signer_id": "nearblocks.near", "widget_name": "includes.libs", "source_code": "import { localFormat, formatWithCommas } from '@/includes/formats';\n\n\nexport function convertAmountToReadableString(amount, type) {\n  if (!amount) return null;\n\n  let value;\n  let suffix;\n\n  const nearNomination = new Big(10).pow(24);\n\n  const amountInNear = new Big(amount).div(nearNomination);\n\n  if (type === 'totalSupply' || type === 'totalStakeAmount') {\n    value = formatWithCommas(amountInNear.div(1e6).toFixed(1));\n    suffix = 'M';\n  } else if (type === 'seatPriceAmount') {\n    value = formatWithCommas(amountInNear.round().toString());\n  } else {\n    value = amount.toString();\n  }\n  return `${value}${suffix}`;\n}\n\nexport function convertTimestampToTime(timestamp) {\n  const timestampBig = new Big(timestamp);\n\n  const hours = timestampBig.div(3600).round(0, 0).toString();\n  const minutes = timestampBig.mod(3600).div(60).round(0, 0).toString();\n  const seconds = timestampBig.mod(60).round(0, 0).toString();\n\n  return `${hours.padStart(2, '0')}H ${minutes.padStart(\n    2,\n    '0',\n  )}M ${seconds.padStart(2, '0')}S`;\n}\n\nexport function yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nexport function fiatValue(big, price) {\n  const value = Big(big).mul(Big(price));\n  const stringValue = value.toFixed(6); // Set the desired maximum fraction digits\n\n  const [integerPart, fractionalPart] = stringValue.split('.');\n\n  // Format integer part with commas\n  const formattedIntegerPart = integerPart.replace(\n    /\\B(?=(\\d{3})+(?!\\d))/g,\n    ',',\n  );\n\n  // Combine formatted integer and fractional parts\n  const formattedNumber = fractionalPart\n    ? `${formattedIntegerPart}.${fractionalPart}`\n    : formattedIntegerPart;\n\n  return formattedNumber;\n}\n\nexport function nanoToMilli(nano) {\n  return Big(nano).div(Big(10).pow(6)).round().toNumber();\n}\n\nexport function truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nexport function getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nexport function debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nexport function timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nexport function shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nexport function urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nexport function isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\n\nexport function isJson(string) {\n  const str = string.replace(/\\\\/g, '');\n\n  try {\n    JSON.parse(str);\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function uniqueId() {\n  return Math.floor(Math.random() * 1000);\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/includes.libs", "fact_widget_deployments_id": "88fc408eeba686221e8e8a2a5776a1ef", "inserted_timestamp": "2024-03-07T06:28:15.690Z", "modified_timestamp": "2024-03-07T07:24:39.687Z", "__row_index": 7}