{"tx_hash": "CoeWR8MbEZS1sP2fVu7fdYKCYu3qCeJvvwVjthhGKbYy", "action_id_social": "B8F14ibSvXhWpVevRNWaCtaVAcdmKEah9MrifFmV9zTz-0-widget", "block_id": 110793436, "block_timestamp": "2024-01-19T12:36:31.244Z", "signer_id": "nearblocks.near", "widget_name": "includes.libs", "source_code": "import { localFormat, formatWithCommas } from '@/includes/formats';\n\n\nexport function convertAmountToReadableString(amount, type) {\n  if (!amount) return null;\n\n  let value;\n  let suffix;\n\n  const nearNomination = Math.pow(10, 24);\n\n  const amountInNear = Number(amount) / nearNomination;\n\n  if (type === 'totalSupply' || type === 'totalStakeAmount') {\n    value = formatWithCommas((amountInNear / 1e6).toFixed(1));\n    suffix = 'M';\n  } else if (type === 'seatPriceAmount') {\n    value = formatWithCommas(Math.round(amountInNear).toString());\n  } else {\n    value = amount.toString();\n  }\n  return `${value}${suffix}`;\n}\n\nexport function convertTimestampToTime(timestamp) {\n  const hours = Math.floor(timestamp / 3600);\n  const minutes = Math.floor((timestamp % 3600) / 60);\n  const seconds = Math.floor(timestamp % 60);\n\n  return `${hours.toString().padStart(2, '0')}H ${minutes\n    .toString()\n    .padStart(2, '0')}M ${seconds.toString().padStart(2, '0')}S`;\n}\n\nexport function yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n\nexport function fiatValue(big, price) {\n  const value = Big(big).mul(Big(price)).toString();\n  const formattedNumber = Number(value).toLocaleString('en', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 6,\n  });\n  return formattedNumber;\n}\n\nexport function nanoToMilli(nano) {\n  return new Big(nano).div(new Big(10).pow(6)).round().toNumber();\n}\n\nexport function truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\n\nexport function getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nexport function debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nexport function timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\nexport function shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nexport function urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/includes.libs", "fact_widget_deployments_id": "c023a374d9e4fcc16408664454eec46d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}