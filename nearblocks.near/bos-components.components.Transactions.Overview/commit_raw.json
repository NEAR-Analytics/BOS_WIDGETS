{"tx_hash": "FQ99Hr3ocFKypGX6dkMF3JHogjDsTZA2Tc1pGWd1FmhV", "action_id_social": "3KaPHhooWkMv48HCndQQjzAxYgwNXwGErS5wVPqNnNDA-0-widget", "block_id": 113622878, "block_timestamp": "2024-02-26T14:06:45.125Z", "signer_id": "nearblocks.near", "widget_name": "bos-components.components.Transactions.Overview", "source_code": "/**\n * Component: TransactionsOverview\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Transactions Overview.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n */\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE: \"includes/formats.jsx\" */\nfunction currency(number) {\n  let absNumber = new Big(number).abs();\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber.gte(1000) && suffixIndex < suffixes.length - 1) {\n    absNumber = absNumber.div(1000); // Divide using big.js's div method\n    suffixIndex++;\n  }\n\n  const formattedNumber = absNumber.toFixed(2); // Format with 2 decimal places\n\n  return (\n    (number < '0' ? '-' : '') + formattedNumber + ' ' + suffixes[suffixIndex]\n  );\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\n\nfunction dollarNonCentFormat(number) {\n  const bigNumber = new Big(number).toFixed(0);\n\n  // Extract integer part and format with commas\n  const integerPart = bigNumber.toString();\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  return formattedInteger;\n}\n\nfunction weight(number) {\n  let sizeInBytes = new Big(number);\n\n  if (sizeInBytes.lt(0)) {\n    throw new Error('Invalid input. Please provide a non-negative number.');\n  }\n\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (sizeInBytes.gte(1000) && suffixIndex < suffixes.length - 1) {\n    sizeInBytes = sizeInBytes.div(1000); // Assign the result back to sizeInBytes\n    suffixIndex++;\n  }\n\n  const formattedSize = sizeInBytes.toFixed(2) + ' ' + suffixes[suffixIndex];\n\n  return formattedSize;\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year >= 1) {\n    return (\n      Math.floor(intervals.year) +\n      ' year' +\n      (Math.floor(intervals.year) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.month >= 1) {\n    return (\n      Math.floor(intervals.month) +\n      ' month' +\n      (Math.floor(intervals.month) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.day >= 1) {\n    return (\n      Math.floor(intervals.day) +\n      ' day' +\n      (Math.floor(intervals.day) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.hour >= 1) {\n    return (\n      Math.floor(intervals.hour) +\n      ' hour' +\n      (Math.floor(intervals.hour) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.minute >= 1) {\n    return (\n      Math.floor(intervals.minute) +\n      ' minute' +\n      (Math.floor(intervals.minute) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(numberStr) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let result = new Big(numberStr);\n  let count = 0;\n\n  while (result.abs().gte('1e3') && count < prefixes.length - 1) {\n    result = result.div(1e3);\n    count++;\n  }\n\n  // Check if the value is an integer or has more than two digits before the decimal point\n  if (result.abs().lt(1e2) && result.toFixed(2) !== result.toFixed(0)) {\n    result = result.toFixed(2);\n  } else {\n    result = result.toFixed(0);\n  }\n\n  return result.toString() + ' ' + prefixes[count];\n}\n\nfunction formatNumber(value) {\n  let bigValue = new Big(value);\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (bigValue.gte(10000) && suffixIndex < suffixes.length - 1) {\n    bigValue = bigValue.div(1000);\n    suffixIndex++;\n  }\n\n  const formattedValue = bigValue.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near}`;\n}\n\nfunction currency(number) {\n  let absNumber = new Big(number).abs();\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber.gte(1000) && suffixIndex < suffixes.length - 1) {\n    absNumber = absNumber.div(1000); // Divide using big.js's div method\n    suffixIndex++;\n  }\n\n  const formattedNumber = absNumber.toFixed(2); // Format with 2 decimal places\n\n  return (\n    (number < '0' ? '-' : '') + formattedNumber + ' ' + suffixes[suffixIndex]\n  );\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\n\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\n\nfunction dollarNonCentFormat(number) {\n  const bigNumber = new Big(number).toFixed(0);\n\n  // Extract integer part and format with commas\n  const integerPart = bigNumber.toString();\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  return formattedInteger;\n}\n\nfunction weight(number) {\n  let sizeInBytes = new Big(number);\n\n  if (sizeInBytes.lt(0)) {\n    throw new Error('Invalid input. Please provide a non-negative number.');\n  }\n\n  const suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let suffixIndex = 0;\n\n  while (sizeInBytes.gte(1000) && suffixIndex < suffixes.length - 1) {\n    sizeInBytes = sizeInBytes.div(1000); // Assign the result back to sizeInBytes\n    suffixIndex++;\n  }\n\n  const formattedSize = sizeInBytes.toFixed(2) + ' ' + suffixes[suffixIndex];\n\n  return formattedSize;\n}\n\nfunction convertToUTC(timestamp, hour) {\n  const date = new Date(timestamp);\n\n  // Get UTC date components\n  const utcYear = date.getUTCFullYear();\n  const utcMonth = ('0' + (date.getUTCMonth() + 1)).slice(-2); // Adding 1 because months are zero-based\n  const utcDay = ('0' + date.getUTCDate()).slice(-2);\n  const utcHours = ('0' + date.getUTCHours()).slice(-2);\n  const utcMinutes = ('0' + date.getUTCMinutes()).slice(-2);\n  const utcSeconds = ('0' + date.getUTCSeconds()).slice(-2);\n\n  // Array of month abbreviations\n  const monthAbbreviations = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const monthIndex = Number(utcMonth) - 1;\n  // Format the date as required (Jul-25-2022 16:25:37)\n  let formattedDate =\n    monthAbbreviations[monthIndex] +\n    '-' +\n    utcDay +\n    '-' +\n    utcYear +\n    ' ' +\n    utcHours +\n    ':' +\n    utcMinutes +\n    ':' +\n    utcSeconds;\n\n  if (hour) {\n    // Convert hours to 12-hour format\n    let hour12 = parseInt(utcHours);\n    const ampm = hour12 >= 12 ? 'PM' : 'AM';\n    hour12 = hour12 % 12 || 12;\n\n    // Add AM/PM to the formatted date (Jul-25-2022 4:25:37 PM)\n    formattedDate =\n      monthAbbreviations[monthIndex] +\n      '-' +\n      utcDay +\n      '-' +\n      utcYear +\n      ' ' +\n      hour12 +\n      ':' +\n      utcMinutes +\n      ':' +\n      utcSeconds +\n      ' ' +\n      ampm;\n  }\n\n  return formattedDate;\n}\n\nfunction getTimeAgoString(timestamp) {\n  const currentUTC = Date.now();\n  const date = new Date(timestamp);\n  const seconds = Math.floor((currentUTC - date.getTime()) / 1000);\n\n  const intervals = {\n    year: seconds / (60 * 60 * 24 * 365),\n    month: seconds / (60 * 60 * 24 * 30),\n    week: seconds / (60 * 60 * 24 * 7),\n    day: seconds / (60 * 60 * 24),\n    hour: seconds / (60 * 60),\n    minute: seconds / 60,\n  };\n\n  if (intervals.year >= 1) {\n    return (\n      Math.floor(intervals.year) +\n      ' year' +\n      (Math.floor(intervals.year) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.month >= 1) {\n    return (\n      Math.floor(intervals.month) +\n      ' month' +\n      (Math.floor(intervals.month) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.day >= 1) {\n    return (\n      Math.floor(intervals.day) +\n      ' day' +\n      (Math.floor(intervals.day) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.hour >= 1) {\n    return (\n      Math.floor(intervals.hour) +\n      ' hour' +\n      (Math.floor(intervals.hour) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else if (intervals.minute >= 1) {\n    return (\n      Math.floor(intervals.minute) +\n      ' minute' +\n      (Math.floor(intervals.minute) > 1 ? 's' : '') +\n      ' ago'\n    );\n  } else {\n    return 'a few seconds ago';\n  }\n}\n\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction formatTimestampToString(timestamp) {\n  const date = new Date(timestamp);\n\n  // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n  const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n  return formattedDate;\n}\n\nfunction convertToMetricPrefix(numberStr) {\n  const prefixes = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // Metric prefixes\n\n  let result = new Big(numberStr);\n  let count = 0;\n\n  while (result.abs().gte('1e3') && count < prefixes.length - 1) {\n    result = result.div(1e3);\n    count++;\n  }\n\n  // Check if the value is an integer or has more than two digits before the decimal point\n  if (result.abs().lt(1e2) && result.toFixed(2) !== result.toFixed(0)) {\n    result = result.toFixed(2);\n  } else {\n    result = result.toFixed(0);\n  }\n\n  return result.toString() + ' ' + prefixes[count];\n}\n\nfunction formatNumber(value) {\n  let bigValue = new Big(value);\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixIndex = 0;\n\n  while (bigValue.gte(10000) && suffixIndex < suffixes.length - 1) {\n    bigValue = bigValue.div(1000);\n    suffixIndex++;\n  }\n\n  const formattedValue = bigValue.toFixed(1).replace(/\\.0+$/, '');\n  return `${formattedValue} ${suffixes[suffixIndex]}`;\n}\n\nfunction gasFee(gas, price) {\n  const near = yoctoToNear(Big(gas).mul(Big(price)).toString(), true);\n\n  return `${near}`;\n}\n\nfunction currency(number) {\n  let absNumber = new Big(number).abs();\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q'];\n  let suffixIndex = 0;\n\n  while (absNumber.gte(1000) && suffixIndex < suffixes.length - 1) {\n    absNumber = absNumber.div(1000); // Divide using big.js's div method\n    suffixIndex++;\n  }\n\n  const formattedNumber = absNumber.toFixed(2); // Format with 2 decimal places\n\n  return (\n    (number < '0' ? '-' : '') + formattedNumber + ' ' + suffixes[suffixIndex]\n  );\n}\n\nfunction formatDate(dateString) {\n  const inputDate = new Date(dateString);\n\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = days[inputDate.getDay()];\n  const month = months[inputDate.getMonth()];\n  const day = inputDate.getDate();\n  const year = inputDate.getFullYear();\n\n  const formattedDate = dayOfWeek + ', ' + month + ' ' + day + ', ' + year;\n  return formattedDate;\n}\n\nfunction formatCustomDate(inputDate) {\n  var date = new Date(inputDate);\n\n  // Array of month names\n  var monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Get month and day\n  var month = monthNames[date.getMonth()];\n  var day = date.getDate();\n\n  // Create formatted date string in \"MMM DD\" format\n  var formattedDate = month + ' ' + (day < 10 ? '0' + day : day);\n\n  return formattedDate;\n}\n\nfunction shortenHex(address) {\n  return `${address && address.substr(0, 6)}...${address.substr(-4)}`;\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction shortenToken(token) {\n  return truncateString(token, 14, '');\n}\n\nfunction shortenTokenSymbol(token) {\n  return truncateString(token, 5, '');\n}\n\nfunction gasPercentage(gasUsed, gasAttached) {\n  if (!gasAttached) return 'N/A';\n\n  const formattedNumber = (Big(gasUsed).div(Big(gasAttached)) * 100).toFixed(2);\n  return `${formattedNumber}%`;\n}\n\nfunction serialNumber(index, page, perPage) {\n  return index + 1 + (page - 1) * perPage;\n}\n\nfunction capitalizeWords(str) {\n  const words = str.split('_');\n  const capitalizedWords = words.map(\n    (word) => word.charAt(0).toUpperCase() + word.slice(1),\n  );\n  const result = capitalizedWords.join(' ');\n  return result;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction truncateString(str, maxLength, suffix) {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.substring(0, maxLength) + suffix;\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\n/* END_INCLUDE: \"includes/formats.jsx\" */\n/* INCLUDE: \"includes/libs.jsx\" */\nfunction getConfig(network) {\n  switch (network) {\n    case 'mainnet':\n      return {\n        ownerId: 'nearblocks.near',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        backendUrl: 'https://api3.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://nearblocks.io/',\n      };\n    case 'testnet':\n      return {\n        ownerId: 'nearblocks.testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n        rpcUrl: 'https://archival-rpc.testnet.near.org',\n        appUrl: 'https://testnet.nearblocks.io/',\n      };\n    default:\n      return {};\n  }\n}\n\nfunction debounce(\n  delay,\n  func,\n) {\n  let timer;\n  let active = true;\n  const debounced = (arg) => {\n    if (active) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        active && func(arg);\n        timer = undefined;\n      }, delay);\n    } else {\n      func(arg);\n    }\n  };\n\n  debounced.isPending = () => {\n    return timer !== undefined;\n  };\n\n  debounced.cancel = () => {\n    active = false;\n  };\n\n  debounced.flush = (arg) => func(arg);\n\n  return debounced;\n}\n\nfunction timeAgo(unixTimestamp) {\n  const currentTimestamp = Math.floor(Date.now() / 1000);\n  const secondsAgo = currentTimestamp - unixTimestamp;\n\n  if (secondsAgo < 5) {\n    return 'Just now';\n  } else if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`;\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600);\n    return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400);\n    return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n  }\n}\n\nfunction shortenAddress(address) {\n  const string = String(address);\n\n  if (string.length <= 20) return string;\n\n  return `${string.substr(0, 10)}...${string.substr(-7)}`;\n}\n\nfunction urlHostName(url) {\n  try {\n    const domain = new URL(url);\n    return domain?.hostname ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction holderPercentage(supply, quantity) {\n  return Math.min(Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2), 100);\n}\n\nfunction isAction(type) {\n  const actions = [\n    'DEPLOY_CONTRACT',\n    'TRANSFER',\n    'STAKE',\n    'ADD_KEY',\n    'DELETE_KEY',\n    'DELETE_ACCOUNT',\n  ];\n\n  return actions.includes(type.toUpperCase());\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction formatWithCommas(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n/* END_INCLUDE: \"includes/libs.jsx\" */\n/* INCLUDE: \"includes/near.jsx\" */\nfunction gasPrice(yacto) {\n  const near = Big(yoctoToNear(yacto, false)).mul(Big(10).pow(12)).toString();\n\n  return `${localFormat(near)} \u24c3 / Tgas`;\n}\n\nfunction tokenAmount(amount, decimal, format) {\n  if (amount === undefined || amount === null) return 'N/A';\n\n  const near = Big(amount).div(Big(10).pow(decimal));\n\n  const formattedValue = format\n    ? near.toFixed(8).replace(/\\.?0+$/, '')\n    : near.toFixed(Big(decimal, 10)).replace(/\\.?0+$/, '');\n\n  return formattedValue;\n}\n\nfunction tokenPercentage(\n  supply,\n  amount,\n  decimal,\n) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  const nearSupply = Big(supply);\n\n  return nearAmount.div(nearSupply).mul(Big(100)).toFixed(2);\n}\nfunction price(amount, decimal, price) {\n  const nearAmount = Big(amount).div(Big(10).pow(decimal));\n  return dollarFormat(nearAmount.mul(Big(price || 0)).toString());\n}\nfunction mapRpcActionToAction(action) {\n  if (action === 'CreateAccount') {\n    return {\n      action_kind: 'CreateAccount',\n      args: {},\n    };\n  }\n\n  if (typeof action === 'object') {\n    const kind = Object.keys(action)[0];\n\n    return {\n      action_kind: kind,\n      args: action[kind],\n    };\n  }\n\n  return null;\n}\n\nfunction valueFromObj(obj) {\n  const keys = Object.keys(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = obj[key];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (typeof value === 'object') {\n      const nestedValue = valueFromObj(value );\n      if (nestedValue) {\n        return nestedValue;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction txnLogs(txn) {\n  let txLogs = [];\n\n  const outcomes = txn?.receipts_outcome || [];\n\n  for (let i = 0; i < outcomes.length; i++) {\n    const outcome = outcomes[i];\n    let logs = outcome?.outcome?.logs || [];\n\n    if (logs.length > 0) {\n      const mappedLogs = logs.map((log) => ({\n        contract: outcome?.outcome?.executor_id || '',\n        logs: log,\n      }));\n      txLogs = [...txLogs, ...mappedLogs];\n    }\n  }\n  return txLogs;\n}\n\nfunction txnActions(txn) {\n  const txActions = [];\n  const receipts = txn?.receipts || [];\n\n  for (let i = 0; i < receipts.length; i++) {\n    const receipt = receipts[i];\n    const from = receipt?.predecessor_id;\n    const to = receipt?.receiver_id;\n\n    if (Array.isArray(receipt?.receipt)) {\n      const actions = receipt.receipt;\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = actions[j];\n\n        txActions.push({ from, to, ...action });\n      }\n    } else {\n      const actions = receipt?.receipt?.Action?.actions || [];\n\n      for (let j = 0; j < actions.length; j++) {\n        const action = mapRpcActionToAction(actions[j]);\n\n        txActions.push({ from, to, ...action });\n      }\n    }\n  }\n\n  return txActions.filter(\n    (action) =>\n      action.action_kind !== 'FunctionCall' && action.from !== 'system',\n  );\n}\n\nfunction txnErrorMessage(txn) {\n  const kind = txn?.status?.Failure?.ActionError?.kind;\n\n  if (typeof kind === 'string') return kind;\n  if (typeof kind === 'object') {\n    return valueFromObj(kind);\n  }\n\n  return null;\n}\n\nfunction formatLine(line, offset, format) {\n  let result = `${offset.toString(16).padStart(8, '0')}  `;\n\n  const hexValues = line.match(/[0-9a-fA-F]{2}/g) || [];\n\n  hexValues.forEach((byte, index) => {\n    if (index > 0 && index % 4 === 0) {\n      result += ' ';\n    }\n    result += byte.toUpperCase().padEnd(2, ' ') + ' ';\n  });\n\n  if (format === 'twos') {\n    result = result.replace(/(.{4})/g, '$1 ');\n  } else if (format === 'default') {\n    result += ` ${String.fromCharCode(\n      ...hexValues.map((b) => parseInt(b, 16)),\n    )}`;\n  }\n\n  return result.trimEnd();\n}\n\nfunction collectNestedReceiptWithOutcomeOld(\n  idOrHash,\n  parsedMap,\n) {\n  const parsedElement = parsedMap.get(idOrHash);\n  if (!parsedElement) {\n    return { id: idOrHash };\n  }\n  const { receiptIds, ...restOutcome } = parsedElement.outcome;\n  return {\n    ...parsedElement,\n    outcome: {\n      ...restOutcome,\n      nestedReceipts: receiptIds.map((id) =>\n        collectNestedReceiptWithOutcomeOld(id, parsedMap),\n      ),\n    },\n  };\n}\n\nfunction parseReceipt(\n  receipt,\n  outcome,\n  transaction,\n) {\n  if (!receipt) {\n    return {\n      id: outcome.id,\n      predecessorId: transaction.signer_id,\n      receiverId: transaction.receiver_id,\n      actions: transaction.actions.map(mapRpcActionToAction1),\n    };\n  }\n  return {\n    id: receipt.receipt_id,\n    predecessorId: receipt.predecessor_id,\n    receiverId: receipt.receiver_id,\n    actions:\n      'Action' in receipt.receipt\n        ? receipt.receipt.Action.actions.map(mapRpcActionToAction1)\n        : [],\n  };\n}\n\nfunction mapNonDelegateRpcActionToAction(\n  rpcAction,\n) {\n  if (rpcAction === 'CreateAccount') {\n    return {\n      kind: 'createAccount',\n      args: {},\n    };\n  }\n  if ('DeployContract' in rpcAction) {\n    return {\n      kind: 'deployContract',\n      args: rpcAction.DeployContract,\n    };\n  }\n  if ('FunctionCall' in rpcAction) {\n    return {\n      kind: 'functionCall',\n      args: {\n        methodName: rpcAction.FunctionCall.method_name,\n        args: rpcAction.FunctionCall.args,\n        deposit: rpcAction.FunctionCall.deposit,\n        gas: rpcAction.FunctionCall.gas,\n      },\n    };\n  }\n  if ('Transfer' in rpcAction) {\n    return {\n      kind: 'transfer',\n      args: rpcAction.Transfer,\n    };\n  }\n  if ('Stake' in rpcAction) {\n    return {\n      kind: 'stake',\n      args: {\n        publicKey: rpcAction.Stake.public_key,\n        stake: rpcAction.Stake.stake,\n      },\n    };\n  }\n  if ('AddKey' in rpcAction) {\n    return {\n      kind: 'addKey',\n      args: {\n        publicKey: rpcAction.AddKey.public_key,\n        accessKey: {\n          nonce: rpcAction.AddKey.access_key.nonce,\n          permission:\n            rpcAction.AddKey.access_key.permission === 'FullAccess'\n              ? {\n                  type: 'fullAccess',\n                }\n              : {\n                  type: 'functionCall',\n                  contractId:\n                    rpcAction.AddKey.access_key.permission.FunctionCall\n                      .receiver_id,\n                  methodNames:\n                    rpcAction.AddKey.access_key.permission.FunctionCall\n                      .method_names,\n                },\n        },\n      },\n    };\n  }\n  if ('DeleteKey' in rpcAction) {\n    return {\n      kind: 'deleteKey',\n      args: {\n        publicKey: rpcAction.DeleteKey.public_key,\n      },\n    };\n  }\n  return {\n    kind: 'deleteAccount',\n    args: {\n      beneficiaryId: rpcAction.DeleteAccount.beneficiary_id,\n    },\n  };\n}\nfunction mapRpcInvalidAccessKeyError(error) {\n  const UNKNOWN_ERROR = { type: 'unknown' };\n\n  if (error === 'DepositWithFunctionCall') {\n    return {\n      type: 'depositWithFunctionCall',\n    };\n  }\n  if (error === 'RequiresFullAccess') {\n    return {\n      type: 'requiresFullAccess',\n    };\n  }\n  if ('AccessKeyNotFound' in error) {\n    const { account_id, public_key } = error.AccessKeyNotFound;\n    return {\n      type: 'accessKeyNotFound',\n      accountId: account_id,\n      publicKey: public_key,\n    };\n  }\n  if ('ReceiverMismatch' in error) {\n    const { ak_receiver, tx_receiver } = error.ReceiverMismatch;\n    return {\n      type: 'receiverMismatch',\n      akReceiver: ak_receiver,\n      transactionReceiver: tx_receiver,\n    };\n  }\n  if ('MethodNameMismatch' in error) {\n    const { method_name } = error.MethodNameMismatch;\n    return {\n      type: 'methodNameMismatch',\n      methodName: method_name,\n    };\n  }\n  if ('NotEnoughAllowance' in error) {\n    const { account_id, allowance, cost, public_key } =\n      error.NotEnoughAllowance;\n    return {\n      type: 'notEnoughAllowance',\n      accountId: account_id,\n      allowance: allowance,\n      cost: cost,\n      publicKey: public_key,\n    };\n  }\n\n  return UNKNOWN_ERROR;\n}\n\nfunction mapRpcCompilationError(error) {\n  const UNKNOWN_ERROR = { type: 'unknown' };\n  if ('CodeDoesNotExist' in error) {\n    return {\n      type: 'codeDoesNotExist',\n      accountId: error.CodeDoesNotExist.account_id,\n    };\n  }\n  if ('PrepareError' in error) {\n    return {\n      type: 'prepareError',\n    };\n  }\n  if ('WasmerCompileError' in error) {\n    return {\n      type: 'wasmerCompileError',\n      msg: error.WasmerCompileError.msg,\n    };\n  }\n  if ('UnsupportedCompiler' in error) {\n    return {\n      type: 'unsupportedCompiler',\n      msg: error.UnsupportedCompiler.msg,\n    };\n  }\n  return UNKNOWN_ERROR;\n}\n\nfunction mapRpcFunctionCallError(error) {\n  const UNKNOWN_ERROR = { type: 'unknown' };\n  if ('CompilationError' in error) {\n    return {\n      type: 'compilationError',\n      error: mapRpcCompilationError(error.CompilationError),\n    };\n  }\n  if ('LinkError' in error) {\n    return {\n      type: 'linkError',\n      msg: error.LinkError.msg,\n    };\n  }\n  if ('MethodResolveError' in error) {\n    return {\n      type: 'methodResolveError',\n    };\n  }\n  if ('WasmTrap' in error) {\n    return {\n      type: 'wasmTrap',\n    };\n  }\n  if ('WasmUnknownError' in error) {\n    return {\n      type: 'wasmUnknownError',\n    };\n  }\n  if ('HostError' in error) {\n    return {\n      type: 'hostError',\n    };\n  }\n  if ('_EVMError' in error) {\n    return {\n      type: 'evmError',\n    };\n  }\n  if ('ExecutionError' in error) {\n    return {\n      type: 'executionError',\n      error: error.ExecutionError,\n    };\n  }\n  return UNKNOWN_ERROR;\n}\nfunction mapRpcNewReceiptValidationError(error) {\n  const UNKNOWN_ERROR = { type: 'unknown' };\n  if ('InvalidPredecessorId' in error) {\n    return {\n      type: 'invalidPredecessorId',\n      accountId: error.InvalidPredecessorId.account_id,\n    };\n  }\n  if ('InvalidReceiverId' in error) {\n    return {\n      type: 'invalidReceiverId',\n      accountId: error.InvalidReceiverId.account_id,\n    };\n  }\n  if ('InvalidSignerId' in error) {\n    return {\n      type: 'invalidSignerId',\n      accountId: error.InvalidSignerId.account_id,\n    };\n  }\n  if ('InvalidDataReceiverId' in error) {\n    return {\n      type: 'invalidDataReceiverId',\n      accountId: error.InvalidDataReceiverId.account_id,\n    };\n  }\n  if ('ReturnedValueLengthExceeded' in error) {\n    return {\n      type: 'returnedValueLengthExceeded',\n      length: error.ReturnedValueLengthExceeded.length,\n      limit: error.ReturnedValueLengthExceeded.limit,\n    };\n  }\n  if ('NumberInputDataDependenciesExceeded' in error) {\n    return {\n      type: 'numberInputDataDependenciesExceeded',\n      numberOfInputDataDependencies:\n        error.NumberInputDataDependenciesExceeded\n          .number_of_input_data_dependencies,\n      limit: error.NumberInputDataDependenciesExceeded.limit,\n    };\n  }\n  if ('ActionsValidation' in error) {\n    return {\n      type: 'actionsValidation',\n    };\n  }\n  return UNKNOWN_ERROR;\n}\n\nfunction mapRpcReceiptActionError(error) {\n  const UNKNOWN_ERROR = { type: 'unknown' };\n  const { kind } = error;\n  if (kind === 'DelegateActionExpired') {\n    return {\n      type: 'delegateActionExpired',\n    };\n  }\n  if (kind === 'DelegateActionInvalidSignature') {\n    return {\n      type: 'delegateActionInvalidSignature',\n    };\n  }\n  if ('DelegateActionSenderDoesNotMatchTxReceiver' in kind) {\n    return {\n      type: 'delegateActionSenderDoesNotMatchTxReceiver',\n      receiverId: kind.DelegateActionSenderDoesNotMatchTxReceiver.receiver_id,\n      senderId: kind.DelegateActionSenderDoesNotMatchTxReceiver.sender_id,\n    };\n  }\n  if ('DelegateActionAccessKeyError' in kind) {\n    return {\n      type: 'delegateActionAccessKeyError',\n      error: mapRpcInvalidAccessKeyError(kind.DelegateActionAccessKeyError),\n    };\n  }\n  if ('DelegateActionInvalidNonce' in kind) {\n    return {\n      type: 'delegateActionInvalidNonce',\n      akNonce: kind.DelegateActionInvalidNonce.ak_nonce,\n      delegateNonce: kind.DelegateActionInvalidNonce.delegate_nonce,\n    };\n  }\n  if ('DelegateActionNonceTooLarge' in kind) {\n    return {\n      type: 'delegateActionNonceTooLarge',\n      delegateNonce: kind.DelegateActionNonceTooLarge.delegate_nonce,\n      upperBound: kind.DelegateActionNonceTooLarge.upper_bound,\n    };\n  }\n  if ('AccountAlreadyExists' in kind) {\n    return {\n      type: 'accountAlreadyExists',\n      accountId: kind.AccountAlreadyExists.account_id,\n    };\n  }\n  if ('AccountDoesNotExist' in kind) {\n    return {\n      type: 'accountDoesNotExist',\n      accountId: kind.AccountDoesNotExist.account_id,\n    };\n  }\n  if ('CreateAccountOnlyByRegistrar' in kind) {\n    return {\n      type: 'createAccountOnlyByRegistrar',\n      accountId: kind.CreateAccountOnlyByRegistrar.account_id,\n      registrarAccountId:\n        kind.CreateAccountOnlyByRegistrar.registrar_account_id,\n      predecessorId: kind.CreateAccountOnlyByRegistrar.predecessor_id,\n    };\n  }\n  if ('CreateAccountNotAllowed' in kind) {\n    return {\n      type: 'createAccountNotAllowed',\n      accountId: kind.CreateAccountNotAllowed.account_id,\n      predecessorId: kind.CreateAccountNotAllowed.predecessor_id,\n    };\n  }\n  if ('ActorNoPermission' in kind) {\n    return {\n      type: 'actorNoPermission',\n      accountId: kind.ActorNoPermission.account_id,\n      actorId: kind.ActorNoPermission.actor_id,\n    };\n  }\n  if ('DeleteKeyDoesNotExist' in kind) {\n    return {\n      type: 'deleteKeyDoesNotExist',\n      accountId: kind.DeleteKeyDoesNotExist.account_id,\n      publicKey: kind.DeleteKeyDoesNotExist.public_key,\n    };\n  }\n  if ('AddKeyAlreadyExists' in kind) {\n    return {\n      type: 'addKeyAlreadyExists',\n      accountId: kind.AddKeyAlreadyExists.account_id,\n      publicKey: kind.AddKeyAlreadyExists.public_key,\n    };\n  }\n  if ('DeleteAccountStaking' in kind) {\n    return {\n      type: 'deleteAccountStaking',\n      accountId: kind.DeleteAccountStaking.account_id,\n    };\n  }\n  if ('LackBalanceForState' in kind) {\n    return {\n      type: 'lackBalanceForState',\n      accountId: kind.LackBalanceForState.account_id,\n      amount: kind.LackBalanceForState.amount,\n    };\n  }\n  if ('TriesToUnstake' in kind) {\n    return {\n      type: 'triesToUnstake',\n      accountId: kind.TriesToUnstake.account_id,\n    };\n  }\n  if ('TriesToStake' in kind) {\n    return {\n      type: 'triesToStake',\n      accountId: kind.TriesToStake.account_id,\n      stake: kind.TriesToStake.stake,\n      locked: kind.TriesToStake.locked,\n      balance: kind.TriesToStake.balance,\n    };\n  }\n  if ('InsufficientStake' in kind) {\n    return {\n      type: 'insufficientStake',\n      accountId: kind.InsufficientStake.account_id,\n      stake: kind.InsufficientStake.stake,\n      minimumStake: kind.InsufficientStake.minimum_stake,\n    };\n  }\n  if ('FunctionCallError' in kind) {\n    return {\n      type: 'functionCallError',\n      error: mapRpcFunctionCallError(kind.FunctionCallError),\n    };\n  }\n  if ('NewReceiptValidationError' in kind) {\n    return {\n      type: 'newReceiptValidationError',\n      error: mapRpcNewReceiptValidationError(kind.NewReceiptValidationError),\n    };\n  }\n  if ('OnlyImplicitAccountCreationAllowed' in kind) {\n    return {\n      type: 'onlyImplicitAccountCreationAllowed',\n      accountId: kind.OnlyImplicitAccountCreationAllowed.account_id,\n    };\n  }\n  if ('DeleteAccountWithLargeState' in kind) {\n    return {\n      type: 'deleteAccountWithLargeState',\n      accountId: kind.DeleteAccountWithLargeState.account_id,\n    };\n  }\n  return UNKNOWN_ERROR;\n}\n\nfunction mapRpcReceiptInvalidTxError(error) {\n  const UNKNOWN_ERROR = { type: 'unknown' };\n  if ('InvalidAccessKeyError' in error) {\n    return {\n      type: 'invalidAccessKeyError',\n      error: mapRpcInvalidAccessKeyError(error.InvalidAccessKeyError),\n    };\n  }\n  if ('InvalidSignerId' in error) {\n    return {\n      type: 'invalidSignerId',\n      signerId: error.InvalidSignerId.signer_id,\n    };\n  }\n  if ('SignerDoesNotExist' in error) {\n    return {\n      type: 'signerDoesNotExist',\n      signerId: error.SignerDoesNotExist.signer_id,\n    };\n  }\n  if ('InvalidNonce' in error) {\n    return {\n      type: 'invalidNonce',\n      transactionNonce: error.InvalidNonce.tx_nonce,\n      akNonce: error.InvalidNonce.ak_nonce,\n    };\n  }\n  if ('NonceTooLarge' in error) {\n    return {\n      type: 'nonceTooLarge',\n      transactionNonce: error.NonceTooLarge.tx_nonce,\n      upperBound: error.NonceTooLarge.upper_bound,\n    };\n  }\n  if ('InvalidReceiverId' in error) {\n    return {\n      type: 'invalidReceiverId',\n      receiverId: error.InvalidReceiverId.receiver_id,\n    };\n  }\n  if ('InvalidSignature' in error) {\n    return {\n      type: 'invalidSignature',\n    };\n  }\n  if ('NotEnoughBalance' in error) {\n    return {\n      type: 'notEnoughBalance',\n      signerId: error.NotEnoughBalance.signer_id,\n      balance: error.NotEnoughBalance.balance,\n      cost: error.NotEnoughBalance.cost,\n    };\n  }\n  if ('LackBalanceForState' in error) {\n    return {\n      type: 'lackBalanceForState',\n      signerId: error.LackBalanceForState.signer_id,\n      amount: error.LackBalanceForState.amount,\n    };\n  }\n  if ('CostOverflow' in error) {\n    return {\n      type: 'costOverflow',\n    };\n  }\n  if ('InvalidChain' in error) {\n    return {\n      type: 'invalidChain',\n    };\n  }\n  if ('Expired' in error) {\n    return {\n      type: 'expired',\n    };\n  }\n  if ('ActionsValidation' in error) {\n    return {\n      type: 'actionsValidation',\n    };\n  }\n  if ('TransactionSizeExceeded' in error) {\n    return {\n      type: 'transactionSizeExceeded',\n      size: error.TransactionSizeExceeded.size,\n      limit: error.TransactionSizeExceeded.limit,\n    };\n  }\n  return UNKNOWN_ERROR;\n}\n\nfunction mapRpcReceiptError(error) {\n  let UNKNOWN_ERROR = { type: 'unknown' };\n  if ('ActionError' in error) {\n    return {\n      type: 'action',\n      error: mapRpcReceiptActionError(error.ActionError),\n    };\n  }\n  if ('InvalidTxError' in error) {\n    return {\n      type: 'transaction',\n      error: mapRpcReceiptInvalidTxError(error.InvalidTxError),\n    };\n  }\n  return UNKNOWN_ERROR;\n}\n\nfunction mapRpcReceiptStatus(status) {\n  if ('SuccessValue' in status) {\n    return { type: 'successValue', value: status.SuccessValue };\n  }\n  if ('SuccessReceiptId' in status) {\n    return { type: 'successReceiptId', receiptId: status.SuccessReceiptId };\n  }\n  if ('Failure' in status) {\n    return { type: 'failure', error: mapRpcReceiptError(status.Failure) };\n  }\n  return { type: 'unknown' };\n}\n\nfunction mapRpcActionToAction1(rpcAction) {\n  if (typeof rpcAction === 'object' && 'Delegate' in rpcAction) {\n    return {\n      kind: 'delegateAction',\n      args: {\n        actions: rpcAction.Delegate.delegate_action.actions.map(\n          (subaction, index) => ({\n            ...mapNonDelegateRpcActionToAction(subaction),\n            delegateIndex: index,\n          }),\n        ),\n        receiverId: rpcAction.Delegate.delegate_action.receiver_id,\n        senderId: rpcAction.Delegate.delegate_action.sender_id,\n      },\n    };\n  }\n  return mapNonDelegateRpcActionToAction(rpcAction);\n}\n\nfunction parseOutcomeOld(outcome) {\n  return {\n    blockHash: outcome.block_hash,\n    tokensBurnt: outcome.outcome.tokens_burnt,\n    gasBurnt: outcome.outcome.gas_burnt,\n    status: mapRpcReceiptStatus(outcome.outcome.status),\n    logs: outcome.outcome.logs,\n    receiptIds: outcome.outcome.receipt_ids,\n  };\n}\nfunction yoctoToNear(yocto, format) {\n  const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n  const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n  return format ? localFormat(near) : near;\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\nfunction dollarFormat(number) {\n  const bigNumber = new Big(number);\n\n  // Format to two decimal places without thousands separator\n  const formattedNumber = bigNumber.toFixed(2);\n\n  // Add comma as a thousands separator\n  const parts = formattedNumber.split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  const dollarFormattedNumber = `${parts.join('.')}`;\n\n  return dollarFormattedNumber;\n}\nfunction localFormat(number) {\n  const bigNumber = Big(number);\n  const formattedNumber = bigNumber\n    .toFixed(5)\n    .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n  return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n}\n/* END_INCLUDE: \"includes/near.jsx\" */\n\n\n\n\n\n\n\nfunction MainComponent({ network, t }) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState({} );\n  const [charts, setCharts] = useState([]);\n  const [chartConfig, setChartConfig] = useState(\n    {} ,\n  );\n\n  const config = getConfig(network);\n\n  useEffect(() => {\n    let delay = 15000;\n\n    function fetchStats() {\n      asyncFetch(`${config?.backendUrl}stats`)\n        .then((data) => {\n          const resp = data?.body?.stats?.[0];\n          if (data.status === 200) {\n            setStats({\n              avg_block_time: resp.avg_block_time,\n              block: resp.block,\n              change_24: resp.change_24,\n              gas_price: resp.gas_price,\n              high_24h: resp.high_24h,\n              high_all: resp.high_all,\n              low_24h: resp.low_24h,\n              low_all: resp.low_all,\n              market_cap: resp.market_cap,\n              near_btc_price: resp.near_btc_price,\n              near_price: resp.near_price,\n              nodes: resp.nodes,\n              nodes_online: resp.nodes_online,\n              total_supply: resp.total_supply,\n              total_txns: resp.total_txns,\n              volume: resp.volume,\n            });\n          }\n        })\n        .catch(() => {})\n        .finally(() => {\n          if (isLoading) setIsLoading(false);\n        });\n    }\n\n    fetchStats();\n\n    const interval = setInterval(fetchStats, delay);\n\n    return () => clearInterval(interval);\n  }, [config?.backendUrl, isLoading]);\n\n  useEffect(() => {\n    function fetchChartData() {\n      asyncFetch(`${config.backendUrl}charts/latest`)\n        .then(\n          (data\n\n\n\n) => {\n            const resp = data?.body?.charts;\n            setCharts(resp);\n          },\n        )\n        .catch(() => {});\n    }\n\n    fetchChartData();\n  }, [config.backendUrl]);\n\n  const chartData = useMemo(() => {\n    try {\n      const series = charts?.map((stat) => ({\n        y: Number(stat.txns),\n        date: stat.date,\n        price: stat.near_price,\n      }));\n      series.sort(\n        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),\n      );\n      const categories = series.map((stat) => formatCustomDate(stat.date));\n      return {\n        series,\n        categories,\n      };\n    } catch (error) {\n      return {\n        series: [],\n        categories: [],\n      };\n    }\n  }, [charts]);\n\n  useEffect(() => {\n    // Factory function to create the tooltip formatter\n\n    function fetchData() {\n      const fetchedData = {\n        chart: {\n          height: 110,\n          spacingTop: 10,\n          spacingBottom: 0,\n          spacingLeft: 0,\n          spacingRight: 10,\n        },\n        title: {\n          text: null,\n        },\n        xAxis: {\n          type: 'datetime',\n          lineWidth: 0,\n          tickLength: 0,\n          labels: {\n            step: 7,\n          },\n          categories: chartData.categories,\n        },\n        yAxis: {\n          gridLineWidth: 0,\n          title: {\n            text: null,\n          },\n        },\n        legend: {\n          enabled: false,\n        },\n        plotOptions: {\n          spline: {\n            lineWidth: 1,\n            states: {\n              hover: {\n                lineWidth: 1,\n              },\n            },\n            marker: {\n              radius: 0,\n            },\n          },\n        },\n        series: [\n          {\n            type: 'spline',\n            data: chartData.series,\n            color: '#80D1BF',\n          },\n        ] ,\n        exporting: {\n          enabled: false,\n        },\n        credits: {\n          enabled: false,\n        },\n      };\n      setChartConfig(fetchedData);\n    }\n\n    fetchData();\n  }, [chartData]);\n\n  const iframeSrc = `\n      <html>\n        <head>\n          <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n          <script src=\"https://cdn.jsdelivr.net/npm/dayjs@1.10.4\"></script>\n          <script src=\"https://cdn.jsdelivr.net/npm/numeral@2.0.6/numeral.min.js\"></script>\n        </head>\n        <body>\n          <div id=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n          <script type=\"text/javascript\">\n            const chartConfig = ${JSON.stringify(chartConfig)};\n            chartConfig.tooltip = {\n              formatter: function () {\n                const item= this.point\n                function dollarFormat(value) {\n                  return numeral(value).format('0,0.00');\n                 }\n                 return \\`<span style=\"font-size:10px\">\\${dayjs(this.point.date).format(\n                   'dddd, MMMM DD, YYYY'\n                 )}</span><br/>Transactions: <strong>\\${dollarFormat(\n                 this.point.y\n               )}</strong><br/>Price: $\\${dollarFormat(this.point.price)}\n               \\`;\n              }\n            };\n            Highcharts.chart('chart-container', chartConfig);\n          </script>\n        </body>\n      </html>\n    `;\n\n  return (\n    <div className=\"container mx-auto px-3\">\n      <div className=\"bg-white soft-shadow rounded-xl overflow-hidden px-5 md:py lg:px-0\">\n        <div\n          className={`grid grid-flow-col grid-cols-1 ${\n            network === 'mainnet'\n              ? 'grid-rows-3 lg:grid-cols-3'\n              : 'grid-rows-2 lg:grid-cols-2'\n          } lg:grid-rows-1 divide-y lg:divide-y-0 lg:divide-x lg:py-3`}\n        >\n          {network === 'mainnet' && (\n            <>\n              <div className=\"flex flex-col lg:flex-col lg:items-stretch divide-y lg:divide-y lg:divide-x-0 md:pt-0 md:pb-0 md:px-5\">\n                <div className=\"flex flex-row py-5 lg:pb-5 lg:px-0\">\n                  <div className=\"items-center flex justify-left mr-3 \">\n                    <img\n                      src={`${config?.appUrl}images/near price.svg`}\n                      alt={t ? t('home:nearPrice') : 'nearPrice'}\n                      width=\"24\"\n                      height=\"24\"\n                    />\n                  </div>\n                  <div className=\"ml-2\">\n                    <p className=\"uppercase font-semibold text-nearblue-600 text-sm \">\n                      {t ? t('home:nearPrice') : 'NEAR PRICE'}\n                    </p>\n                    {isLoading ? (\n                      <Skeleton className=\"my-1 h-4\" />\n                    ) : (\n                      <a\n                        href=\"/charts/near-price\"\n                        className=\"hover:no-underline\"\n                      >\n                        <a className=\"leading-6 text-nearblue-600 hover:no-underline\">\n                          ${dollarFormat(stats?.near_price ?? 0)}{' '}\n                          <span className=\"text-nearblue-700\">\n                            @{localFormat(stats?.near_btc_price ?? 0)} BTC\n                          </span>{' '}\n                          {Number(stats?.change_24) > 0 ? (\n                            <span className=\"text-neargreen text-sm\">\n                              (\n                              {stats?.change_24\n                                ? dollarFormat(stats?.change_24)\n                                : stats?.change_24 ?? ''}\n                              %)\n                            </span>\n                          ) : (\n                            <span className=\"text-red-500 text-sm\">\n                              (\n                              {stats?.change_24\n                                ? dollarFormat(stats?.change_24)\n                                : stats?.change_24 ?? ''}\n                              %)\n                            </span>\n                          )}\n                        </a>\n                      </a>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-row py-5 lg:pt-5 lg:px-0\">\n                  <div className=\"items-center flex justify-left mr-3 \">\n                    <img\n                      src={`${config.appUrl}images/market.svg`}\n                      alt={t ? t('home:marketCap') : 'marketCap'}\n                      width=\"24\"\n                      height=\"24\"\n                    />\n                  </div>\n                  <div className=\"ml-2\">\n                    <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                      {t ? t('home:marketCap') : ' MARKET CAP'}\n                    </p>\n                    {isLoading ? (\n                      <Skeleton className=\"my-1 h-4\" />\n                    ) : (\n                      <a\n                        href=\"/charts/market-cap\"\n                        className=\"hover:no-underline\"\n                      >\n                        <a className=\"leading-6 text-nearblue-700 hover:no-underline\">\n                          $\n                          {stats?.market_cap\n                            ? dollarFormat(stats?.market_cap)\n                            : stats?.market_cap ?? ''}\n                        </a>\n                      </a>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n          <div className=\"flex flex-col lg:flex-col lg:items-stretch divide-y lg:divide-y lg:divide-x-0 md:pt-0 md:pb-0 md:px-5\">\n            <div className=\"flex flex-row justify-between py-5 lg:pb-5 lg:px-0\">\n              <div className=\"flex flex-row \">\n                <div className=\"items-center flex justify-left mr-3 \">\n                  <img\n                    src={`${config?.appUrl}images/transactions.svg`}\n                    alt={t ? t('home:transactions') : 'transactions'}\n                    width=\"24\"\n                    height=\"24\"\n                  />\n                </div>\n                <div className=\"ml-2\">\n                  <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                    {t ? t('home:transactions') : 'TRANSACTIONS'}\n                  </p>\n                  {isLoading ? (\n                    <Skeleton className=\"my-1 h-4\" />\n                  ) : (\n                    <p className=\"leading-6 text-nearblue-700\">\n                      {stats?.total_txns\n                        ? currency(stats?.total_txns)\n                        : stats?.total_txns ?? ''}\n                    </p>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex flex-col text-right\">\n                <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                  {' '}\n                  {t ? t('home:gasPrice') : 'GAS PRICE'}\n                </p>\n                {isLoading ? (\n                  <Skeleton className=\"my-1 h-4\" />\n                ) : (\n                  <p className=\"leading-6 text-nearblue-700\">\n                    {stats?.gas_price\n                      ? gasPrice(stats?.gas_price)\n                      : stats?.gas_price ?? ''}\n                  </p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex flex-row justify-between align-center py-5 lg:pt-5 lg:px-0\">\n              <div className=\"flex flex-row \">\n                <div className=\"items-center flex justify-left mr-3 \">\n                  <img\n                    src={`${config.appUrl}images/pickaxe.svg`}\n                    alt={t ? t('home:activeValidator') : 'activeValidator'}\n                    width=\"24\"\n                    height=\"24\"\n                  />\n                </div>\n                <div className=\"ml-2\">\n                  <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                    {t ? t('home:activeValidator') : 'ACTIVE VALIDATORS'}\n                  </p>\n                  {isLoading ? (\n                    <Skeleton className=\"my-1 h-4\" />\n                  ) : (\n                    <a href=\"/node-explorer\" className=\"hover:no-underline\">\n                      <a className=\"leading-6 text-nearblue-700 hover:no-underline\">\n                        {stats?.nodes_online\n                          ? localFormat(stats?.nodes_online)\n                          : stats?.nodes_online ?? ''}\n                      </a>\n                    </a>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex flex-col text-right\">\n                <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                  {t ? t('home:avgBlockTime') : 'AVG. BLOCK TIME'}\n                </p>\n                {isLoading ? (\n                  <Skeleton className=\"my-1 h-4\" />\n                ) : (\n                  <a href=\"/charts/blocks\" className=\"hover:no-underline\">\n                    <a className=\"leading-6 text-nearblue-700 hover:no-underline\">\n                      {stats?.avg_block_time ?? 0} s\n                    </a>\n                  </a>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2 lg:col-span-1 flex flex-col lg:flex-col lg:items-stretch divide-y lg:divide-y lg:divide-x-0 md:pt-0 md:px-5\">\n            <div className=\"flex-1 py-5 lg:px-0\">\n              <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                {' '}\n                {t\n                  ? t('home:transactionHistory', { days: 14 })\n                  : 'NEAR TRANSACTION HISTORY IN 14 DAYS'}\n              </p>\n              <div className=\"mt-1 h-28\">\n                {chartData ? (\n                  <iframe\n                    srcDoc={iframeSrc}\n                    style={{\n                      width: '100%',\n                      border: 'none',\n                    }}\n                  />\n                ) : (\n                  <Skeleton className=\"h-28\" />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocks.near/widget/bos-components.components.Transactions.Overview", "fact_widget_deployments_id": "cc77833723fa690f4a51ec41fd915e19", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 29}