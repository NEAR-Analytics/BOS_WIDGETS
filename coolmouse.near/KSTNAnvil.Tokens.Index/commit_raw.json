{"tx_hash": "A5SB2daf788tgAUeMjkuwczAd9U4rvxPGXUd5BdspuFi", "action_id_social": "3wCEeH1t1a7rXuxVfLuNjEimCohMcZQkr4tbuYW2HpQt-0-widget", "block_id": 108323261, "block_timestamp": "2023-12-19T10:43:58.350Z", "signer_id": "coolmouse.near", "widget_name": "KSTNAnvil.Tokens.Index", "source_code": "// constants\n\nconst abi = [\n  // token_count(pos: uint256)\n  {\n    inputs: [\n      {\n        name: \"pos\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"token\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  // token_count()\n  {\n    inputs: [],\n    name: \"token_count\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst erc20Detailed = [\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst keystoneAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"; // Anvil\n\n// states\n\nState.init({\n  page: [],\n});\n\n// lifecycle hooks\n\n/**\n * onMounted\n */\nuseEffect(() => {\n  const provider = Ethers.provider();\n  if (provider) {\n    const iface = new ethers.utils.Interface(abi);\n    const encodedData = iface.encodeFunctionData(\"token_count\", []);\n    provider\n      .call({\n        to: keystoneAddress,\n        data: encodedData,\n      })\n      .then((rawTokenCount) => {\n        const countHex = iface.decodeFunctionResult(\n          \"token_count\",\n          rawTokenCount\n        );\n        let tokens = [];\n        const iERC20 = new ethers.utils.Interface(erc20Detailed);\n        const encodedNameCall = iERC20.encodeFunctionData(\"name\", []);\n        const encodedSymbolCall = iERC20.encodeFunctionData(\"symbol\", []);\n        const encodedDecimalsCall = iERC20.encodeFunctionData(\"decimals\", []);\n        for (let i = 0; i < parseInt(countHex.toString()); i++) {\n          const encodedData = iface.encodeFunctionData(\"token\", [i]);\n          provider\n            .call({\n              data: encodedData,\n              to: keystoneAddress,\n            })\n            .then((rawToken) => {\n              const tokenHex = iface.decodeFunctionResult(\"token\", rawToken);\n              const to = tokenHex[0];\n              provider\n                .call({\n                  data: encodedDecimalsCall,\n                  to,\n                })\n                .then((rawDec) => {\n                  const decArr = iERC20.decodeFunctionResult(\n                    \"decimals\",\n                    rawDec\n                  );\n                  const decimals = decArr[0];\n                  provider\n                    .call({\n                      data: encodedNameCall,\n                      to,\n                    })\n                    .then((rawName) => {\n                      const nameHex = iERC20.decodeFunctionResult(\n                        \"name\",\n                        rawName\n                      );\n                      const name = nameHex.toString();\n                      provider\n                        .call({\n                          data: encodedSymbolCall,\n                          to,\n                        })\n                        .then((rawSymb) => {\n                          const symbHex = iERC20.decodeFunctionResult(\n                            \"symbol\",\n                            rawSymb\n                          );\n                          const symbol = symbHex.toString();\n                          const token = {\n                            address: to,\n                            decimals,\n                            name,\n                            symbol,\n                          };\n                          tokens.push(token);\n                        });\n                    });\n                });\n            })\n            .catch(console.error);\n        }\n        State.update({ page: tokens });\n      })\n      .catch(console.error);\n  }\n}, []);\n\n// styles\n\nconst KeystoneContent = styled.div`\n  h1, h2, h3, h4, h5 {\n    margin: 0;\n  }\n  ol, ul, menu {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n  .breadcrumbs {\n    max-width: 100%;\n    overflow-x: auto;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n  }\n  .breadcrumbs > ul, .breadcrumbs > ol {\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    min-height: min-content;\n  }\n  .breadcrumbs > ul > li, .breadcrumbs > ol > li {\n    display: flex;\n    align-items: center;\n  }\n  .breadcrumbs > ul > li + ::before, .breadcrumbs > ol > li + ::before {\n    content: \"\";\n    margin-left: 0.5rem;\n    margin-right: 0.75rem;\n    display: block;\n    height: 0.375rem;\n    width: 0.375rem;\n    transform: matrix(0.707107, 0.707107, -0.707107, 0.707107, 0, 0);\n    opacity: 0.4;\n    border-top: 1px solid;\n    border-right: 1px solid;\n    background-color: transparent;\n  }\n  .breadcrumbs > ul > li > a, .breadcrumbs > ol > li > a {\n    display: flex;\n    cursor: pointer;\n    align-items: center;\n  }\n  .mx-20 {\n    margin-left: 5rem;\n    margin-right: 5rem;\n  }\n  .overflow-x-auto {\n    overflow-x: auto;\n  }\n  .pt-4 {\n    padding-top: 1rem;\n  }\n  .text-lg {\n    font-size: 1.125rem;\n    line-height: 1.75rem;\n  }\n  .w-full {\n    width: 100%;\n  }\n`;\n\nreturn (\n  <>\n    <Widget src=\"coolmouse.near/widget/KSTNAnvil.Navbar\" />\n    <KeystoneContent>\n      <div className=\"overflow-x-auto mx-20 pt-4\">\n        <div className=\"text-lg breadcrumbs\">\n          <ul>\n            <li>\n              <Link href={\"/coolmouse.near/widget/KSTNAnvil.Index\"}>\n                {\" \"}\n                Home{\" \"}\n              </Link>\n            </li>\n            <li>Token Dashboard</li>\n          </ul>\n        </div>\n        <table className=\"w-full text-center pt-4\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Address</th>\n              <th>Name</th>\n              <th>Symbol</th>\n              <th>Decimals</th>\n            </tr>\n          </thead>\n          <tbody>\n            {state.page.map((token, index) => (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>{token.address}</td>\n                <td>{token.name}</td>\n                <td>{token.symbol}</td>\n                <td>{token.decimals}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </KeystoneContent>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/coolmouse.near/widget/KSTNAnvil.Tokens.Index", "fact_widget_deployments_id": "4468a28a560e97ecfe1498f681fbec97", "inserted_timestamp": "2023-12-19T13:00:05.651Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}