{"tx_hash": "HqC5y3fMXCYTfcit4DnNVgeTnLkc4bbX2JWeH5dsm9GD", "action_id_social": "FoXkdXMPHDsHCPJcDRo3KRa86fXCy2T86MYR3kM4CZdn-0-widget", "block_id": 104123563, "block_timestamp": "2023-10-24T19:17:57.419Z", "signer_id": "zavodil.near", "widget_name": "token-balances-step-2", "source_code": "// Load current sender address if it was not loaded yet\nif (state.sender == undefined && Ethers.provider()) {\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length) {\n        // save sender address to the state\n        State.update({ sender: accounts[0] });\n      }\n    });\n}\n\n// Load ERC20 ABI JSON\nconst erc20Abi = fetch(\n  \"https://ipfs.near.social/ipfs/bafkreifgw34kutqcnusv4yyv7gjscshc5jhrzw7up7pdabsuoxfhlnckrq\"\n);\nif (!erc20Abi.ok) {\n  return \"Loading\";\n}\n\n// Create contract interface\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\n// set list of tokens\nconst tokens = [\n  \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\", // WBTC\n  \"0x6b175474e89094c44da98b954eedeac495271d0f\", // DAI\n  \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\", // UNI\n];\n\n// load receiver's balance for a giver token\nconst getTokenBalance = (receiver, tokenId) => {\n  // encode `balanceOf` request\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  // send request to the network\n  return Ethers.provider()\n    .call({\n      to: tokenId,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      // decode responce\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex).toFixed(0);\n    });\n};\n\nconst loadCoingeckData = (tokenId) => {\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${tokenId}`;\n\n  const data = fetch(dataUrl);\n  if (data.ok) {\n    return {\n      name: data.body.name,\n      symbol: data.body.symbol,\n      icon: data.body.image.small,\n      decimals: data.body.detail_platforms[\"ethereum\"].decimal_place,\n      price: Number(data.body.market_data.current_price.usd),\n    };\n  }\n};\n\nconst loadTokensData = () => {\n  // load balances of all tokens\n  tokens.map((tokenId) => {\n    getTokenBalance(state.sender, tokenId).then((value) => {\n      // save balance of every token to the state\n      State.update({ [tokenId]: { balance: value, ...state[tokenId] } });\n    });\n  });\n\n  tokens.map((tokenId) => {\n    const tokenData = loadCoingeckData(tokenId);\n    // save balance of every token to the state\n    State.update({ [tokenId]: { ...tokenData, ...state[tokenId] } });\n  });\n};\n\nconst renderToken = (tokenId) => {\n  const tokenBalance = Big(state[tokenId].balance ?? 0)\n    .div(new Big(10).pow(state[tokenId].decimals ?? 1))\n    .toFixed(4);\n  const tokenBalanceUSD = (tokenBalance * state[tokenId].price).toFixed(2);\n  return (\n    <li>\n      {state[tokenId].name}: {tokenBalance}{\" \"}\n      <img src={state[tokenId].icon} width=\"16\" alt={state[tokenId].symbol} />\n      {`(${tokenBalanceUSD} USD)`}\n    </li>\n  );\n};\n\nif (state.sender) {\n  loadTokensData();\n\n  return (\n    <>\n      <ul>{tokens.map((tokenId) => renderToken(tokenId))}</ul>\n\n      <p>Your account: {state.sender} </p>\n    </>\n  );\n} else {\n  // output connect button\n  return <Web3Connect />;\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/token-balances-step-2", "fact_widget_deployments_id": "aa4fb04da41f197971b4467ebece6875", "inserted_timestamp": "2023-10-24T21:22:59.880Z", "modified_timestamp": "2023-10-24T21:22:59.880Z", "__row_index": 0}