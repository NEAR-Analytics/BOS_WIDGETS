{"tx_hash": "CAwUJQDwW1ToZqhibXneUnEw6Kc2FwkCMYb6rrj2fTdH", "action_id_social": "EoyRHuYRVnipwVmTZnDVmYVE45WBezohiBPx4baGPE9Z-0-widget", "block_id": 111783006, "block_timestamp": "2024-01-31T16:11:45.234Z", "signer_id": "zavodil.near", "widget_name": "Hot", "source_code": "const accountId = props.tgId ?? context.accountId ?? \"name.tg\";\nconst contactId = \"game.hot.tg\";\n\nlet assets = Near.view(contactId, \"get_assets\");\n\nconst loadAccount = () => {\n  if (state.accountId && state.accountId.trim() != \"\") {\n    let data = Near.view(contactId, \"get_user\", {\n      account_id: state.accountId.trim(),\n    });\n\n    State.update({ data });\n  }\n};\n\nuseEffect(() => {\n  loadAccount();\n}, [state.accountId]);\n\nif (state === undefined) {\n  State.init({ accountId, assets, nonce: 0 });\n  loadAccount();\n\n  setInterval(() => {\n    State.update((state) => ({\n      ...state,\n      nonce: state.pause ? state.nonce : state.nonce + 1,\n    }));\n  }, 1000);\n}\n\nconst inputNearAccount = (\n  <div class=\"mb-3\">\n    Input NEAR Telegram account (name.tg)\n    <input\n      type=\"text\"\n      value={state.accountId}\n      onFocus={() => State.update({ pause: true })}\n      onBlur={() => State.update({ pause: false })}\n      onChange={(e) => State.update({ accountId: e.target.value })}\n    />\n  </div>\n);\n\nif (!state.data || !state.assets) {\n  return (\n    <div>\n      {inputNearAccount}\n      <div class=\"alert alert-dark\" role=\"alert\">\n        Data for {state.accountId} was not found. Join{\" \"}\n        <a\n          href=\"https://t.me/herewalletbot/app?startapp=152591\"\n          target=\"_blank\"\n        >\n          NEAR Telegram wallet\n        </a>{\" \"}\n        to mine $HOT.\n      </div>\n    </div>\n  );\n}\nconst lastClaim = state.data.last_claim;\n\nconsole.log(\"lastClaim\", lastClaim);\n\nconst lastClaimDate = new Date(lastClaim / 10000);\n\nconst storageAsset = state.assets.filter(\n  (asset) => asset.id == state.data.storage\n)?.[0];\n\nconst nextClaimDate = new Date((lastClaim + storageAsset.value) / 1000000);\n\nconsole.log(\"storageAsset\", storageAsset);\n\nconst toHHMMSS = (value) => {\n  var sec_num = parseInt(value / 1000, 10);\n  var hours = Math.floor(sec_num / 3600);\n  var minutes = Math.floor((sec_num - hours * 3600) / 60);\n  var seconds = sec_num - hours * 3600 - minutes * 60;\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  return hours + \":\" + minutes + \":\" + seconds;\n};\n\nuseEffect(() => {\n  if (Number(nextClaimDate) > 0) {\n    let claimBlock = (\n      <div>\n        Next claim date: {nextClaimDate.toLocaleTimeString()}{\" \"}\n        {nextClaimDate.toLocaleDateString()}\n        {nextClaimDate < new Date() ? (\n          <div class=\"alert alert-warning\" role=\"alert\">\n            <div>Time to claim!</div>\n            <button onClick={() => Near.call(contactId, \"claim\")}>\n              Claim $HOT\n            </button>\n          </div>\n        ) : (\n          <div class=\"alert alert-success\" role=\"alert\">\n            Claim in {toHHMMSS(nextClaimDate - new Date())}\n          </div>\n        )}\n      </div>\n    );\n    State.update({ claimBlock });\n  }\n}, [state.nonce]);\n\nreturn (\n  <div>\n    {inputNearAccount}\n    {state.claimBlock ?? <div>Loading</div>}\n    <div>\n      Storage asset power: {storageAsset.value / 1000000000 / 60} minutes{\" \"}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/Hot", "fact_widget_deployments_id": "2813e609210e3ac21c3b610c0a6d5776", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}