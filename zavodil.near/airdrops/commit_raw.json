{"tx_hash": "CYyYQbcKb8szSwsR9f8Ur3144dyakedppHdwJwDd7sLh", "action_id_social": "8KhkN2TyWVN19xL7NjFA72SNs4o9F4zCWzWJTMceEX8E-0-widget", "block_id": 99862406, "block_timestamp": "2023-08-28T15:52:31.650Z", "signer_id": "zavodil.near", "widget_name": "airdrops", "source_code": "State.init({\n  chainlistLoaded: false,\n  erc20abiUrl:\n    \"https://ipfs.near.social/ipfs/bafkreidpdrcww6sjppxnjjgvlyk7l6k7ihbizufihoxtmzqhsxy3jj3fru\",\n});\nconst airdrops = [\n  {\n    name: \"Arbitrum airdrop\",\n    chainId: 42161,\n    contractId: \"0x67a24CE4321aB3aF51c2D0a4801c3E111D88C9d9\",\n    tokenId: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n    abiUrl:\n      \"https://ipfs.near.social/ipfs/bafkreiet7gmp6qm2n7r75fo6sbv2soa52llwojy65nqyvfplpkcjumvk6m\",\n    gasLimit: \"2000000\",\n    claimMethod: \"claim\",\n    claimableTokensMethod: \"claimableTokens\",\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n  },\n];\n\nconst receiver = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!receiver) {\n  return <Web3Connect />;\n}\n\nif (!chainlistLoaded) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      const chainlist = Social.get(`zavodil.near/chainlist/chains/**`, \"final\");\n      /*\n      let networkName, networkIcon;\n      let chainlist = [];\n\n      console.log(chainlistData);\n\n      Object.keys(chainlistData).map((chainId) => {\n        if (chainId == chainIdData[chainId]) {\n          // current chain\n          networkName = chainlistData[chainId].name;\n          networkIcon = chainlistData[chainId].icon_svg;\n        }\n        chainlist[chainId] = chainlistData[chainId];\n      });\n\n      console.log(\"chainlist\", chainlist);*/\n\n      if (chainlist) {\n        State.update({\n          chainlistLoaded: true,\n          chainlist,\n          chainId: chainIdData.chainId,\n        });\n      }\n    });\n}\n\nconst airdrop = airdrops[0];\nconst airdropChain = state.chainlist[airdrop.chainId];\n\nconsole.log(\"airdropChain\", airdropChain);\nairdrop.networkName = airdropChain.name;\n\nconst createContract = (contractId, abi, rpcUrl) => {\n  return new ethers.Contract(\n    contractId,\n    abi,\n    new ethers.providers.JsonRpcProvider(rpcUrl)\n  );\n};\n\nconst getClaimableTokens = (airdrop) => {\n  if (state.contractABI !== undefined) {\n    console.log(\"getClaimableTokens...\");\n\n    createContract(airdrop.contractId, state.contractABI, airdrop.rpcUrl)\n      [airdrop.claimableTokensMethod](receiver)\n      .then((claimableTokensHex) =>\n        State.update({\n          claimableTokens: parseFloat(Big(claimableTokensHex).toFixed()),\n        })\n      );\n  }\n};\n\nconst getTokenSymbol = (airdrop) => {\n  if (state.erc20ABI !== undefined) {\n    console.log(\"getTokenSymbol...\");\n\n    createContract(airdrop.tokenId, state.erc20ABI, airdrop.rpcUrl)\n      .symbol()\n      .then((tokenSymbol) =>\n        State.update({\n          tokenSymbol,\n        })\n      );\n  }\n};\n\nconsole.log(\"state\", state);\n\nconst claim = (airdrop) => {\n  const contract = new ethers.Contract(\n    airdrop.contractId,\n    state.contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  contract[airdrop.claimMethod]({\n    gasPrice: Ethers.provider().getFeeData(),\n    gasLimit: airdrop.gasLimit,\n  }).then((transactionHash) => {\n    onComplete(transactionHash);\n  });\n};\n\nconst loadAirdropABI = (airdrop) => {\n  if (airdrop.abiUrl) {\n    console.log(\"Loading ABI...\");\n    const abi = fetch(airdrop.abiUrl);\n    if (abi.ok) {\n      State.update({\n        contractABI: abi.body,\n      });\n    }\n  }\n};\n\nconst loadErc20ABI = (url) => {\n  console.log(\"Loading ERC20 ABI...\");\n  const abi = fetch(url);\n  if (abi.ok) {\n    State.update({\n      erc20ABI: abi.body,\n    });\n  }\n};\n\nconsole.log(\"state\", state);\n\nif (state.chainlistLoaded) {\n  console.log(\"Loading airdrop\", airdrop);\n  if (state.contractABI === undefined) {\n    loadAirdropABI(airdrop);\n  }\n\n  if (state.erc20ABI === undefined) {\n    loadErc20ABI(state.erc20abiUrl);\n  }\n\n  if (state.tokenSymbol == undefined) {\n    getTokenSymbol(airdrop);\n  }\n\n  if (state.claimableTokens === undefined && state.contractABI !== undefined) {\n    getClaimableTokens(airdrop);\n  } else {\n    const claimButton = state.claimableTokens ? (\n      state.chainId == airdrop.chainId ? (\n        <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n          Claim\n        </a>\n      ) : (\n        <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n          Switch to {airdrop.networkName}\n        </a>\n      )\n    ) : (\n      \"Unable to claim\"\n    );\n    return (\n      <div>\n        <h1>{airdrop.name}</h1>\n        <div>\n          ClaimableTokens: {state.claimableTokens} {state.tokenSymbol}\n        </div>{\" \"}\n        {claimButton}\n      </div>\n    );\n  }\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/airdrops", "fact_widget_deployments_id": "2deb6664048f24055fffbd656c131d48", "inserted_timestamp": "2023-08-28T17:43:41.030Z", "modified_timestamp": "2023-08-28T17:43:41.030Z", "__row_index": 4}