{"tx_hash": "77fVNDhYtwg9QuYkxPWd1FhSd7tnengdpkQgUq3rDh3p", "action_id_social": "CVvcBGs1jTncCQCXBLFYZB956zN8WD2xsK1YLR28tfFZ-0-widget", "block_id": 99937839, "block_timestamp": "2023-08-29T15:57:48.123Z", "signer_id": "zavodil.near", "widget_name": "airdrops", "source_code": "const airdropsDatabase = [\n  {\n    name: \"Arbitrum airdrop\",\n    chainId: 42161,\n    contractId: \"0x67a24CE4321aB3aF51c2D0a4801c3E111D88C9d9\",\n    tokenId: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n    abiUrl:\n      \"https://ipfs.near.social/ipfs/bafkreiet7gmp6qm2n7r75fo6sbv2soa52llwojy65nqyvfplpkcjumvk6m\",\n    gasLimit: \"2000000\",\n    claimMethod: \"claim\",\n    claimableTokensMethod: \"claimableTokens\",\n  },\n  {\n    name: \"Paraswap airdrop\",\n    chainId: 1,\n    tokenId: \"0xcafe001067cdef266afb7eb5a286dcfd277f3de5\",\n    gasLimit: \"2000000\",\n    claimUrl: \"https://app.paraswap.io/#/\",\n    claimableTokensJsonUrl:\n      \"https://raw.githubusercontent.com/paraswap/paraswap-rewards-snapshot/master/data/airdrop-users.json\",\n    claimableTokensJsonsFieldAddress: \"address\",\n    claimableTokensJsonsFieldAmount: \"earnings\",\n  },\n];\n\nconst getAirdropId = (airdrop) => {\n  // TODO\n  return airdrop.name;\n};\n\nconst airdrops = {};\nairdropsDatabase.map((airdrop) => {\n  airdrops[getAirdropId(airdrop)] = airdrop;\n});\n\nState.init({\n  loginTab: \"web3\",\n  airdrops,\n  chainlistLoaded: false,\n  erc20abiUrl:\n    \"https://ipfs.near.social/ipfs/bafkreidpdrcww6sjppxnjjgvlyk7l6k7ihbizufihoxtmzqhsxy3jj3fru\",\n});\n\nconst senderIdWeb3 = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (\n  senderIdWeb3 &&\n  state.loginTab == \"web3\" &&\n  senderIdWeb3 != state.senderId\n) {\n  State.update({ senderId: senderIdWeb3 });\n}\n\nconst NavBar = (\n  <>\n    {!state.senderId && <div>Specify your address to continue:</div>}\n    <div class=\"mb-5\">\n      <ul class=\"nav nav-tabs\">\n        <li class=\"nav-item\">\n          <a\n            class={`nav-link ${state.loginTab == \"web3\" ? \"active\" : \"\"}`}\n            href=\"#\"\n            onClick={() => State.update({ loginTab: \"web3\" })}\n          >\n            Login with Web3\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class={`nav-link ${state.loginTab == \"address\" ? \"active\" : \"\"}`}\n            onClick={() => State.update({ loginTab: \"address\" })}\n            href=\"#\"\n          >\n            Enter address\n          </a>\n        </li>\n      </ul>\n\n      {state.loginTab == \"web3\" && (\n        <div class=\"pt-3\">\n          <Web3Connect />\n        </div>\n      )}\n\n      {state.loginTab == \"address\" && (\n        <div>\n          <div>Enter you address:</div>\n          <input\n            type=\"text\"\n            class=\"form-control mb-2\"\n            value={state.loginAddress}\n            onChange={(e) => {\n              State.update({ loginAddress: e.target.value });\n            }}\n          />\n          <button onClick={() => State.update({ senderId: loginAddress })}>\n            Submit\n          </button>\n        </div>\n      )}\n      {state.senderId && <div>You address: {state.senderId}</div>}\n    </div>\n  </>\n);\n\nconsole.log(\"Ethers.provider()\", Ethers.provider());\nif (Ethers.provider()) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      State.update({\n        chainId: chainIdData.chainId,\n      });\n    });\n}\n\nif (!state.chainlistLoaded) {\n  const chainlist = Social.get(`zavodil.near/chainlist/chains/**`, \"final\");\n\n  if (chainlist) {\n    State.update({\n      chainlistLoaded: true,\n      chainlist,\n    });\n  }\n}\n\nconst createContract = (contractId, abi, rpcUrl) => {\n  return new ethers.Contract(\n    contractId,\n    abi,\n    new ethers.providers.JsonRpcProvider(rpcUrl)\n  );\n};\n\nconst getClaimableTokens = (airdrop, senderId) => {\n  if (airdrop.contractABI !== undefined || !airdrop.abiUrl) {\n    console.log(\"getClaimableTokens...\", airdrop.name);\n\n    if (airdrop.claimableTokensMethod) {\n      createContract(airdrop.contractId, airdrop.contractABI, airdrop.rpcUrl)\n        [airdrop.claimableTokensMethod](senderId)\n        .then((claimableTokensHex) => {\n          console.log(\"claimableTokensHex\", airdrop.name, claimableTokensHex);\n          airdrop.claimableTokens = parseFloat(\n            Big(claimableTokensHex).toFixed()\n          );\n          updateAirdrop(airdrop);\n        });\n    } else if (\n      airdrop.claimableTokensJsonUrl &&\n      airdrop.claimableTokensJsonsFieldAddress &&\n      airdrop.claimableTokensJsonsFieldAmount &&\n      airdrop.tokenDecimals\n    ) {\n      const data = fetch(airdrop.claimableTokensJsonUrl);\n\n      if (data.ok) {\n        const result = JSON.parse(data.body).filter(\n          (item) => item[airdrop.claimableTokensJsonsFieldAddress] == senderId\n        );\n\n        airdrop.claimableTokens = result.length\n          ? Big(result[0][airdrop.claimableTokensJsonsFieldAmount])\n              .div(Big(10).pow(airdrop.tokenDecimals))\n              .toFixed()\n          : 0;\n        updateAirdrop(airdrop);\n      }\n    }\n  }\n};\n\nconst getTokenSymbol = (airdrop) => {\n  if (state.erc20ABI !== undefined) {\n    console.log(\"getTokenSymbol...\");\n\n    createContract(airdrop.tokenId, state.erc20ABI, airdrop.rpcUrl)\n      .symbol()\n      .then((tokenSymbol) => {\n        airdrop.tokenSymbol = tokenSymbol;\n        updateAirdrop(airdrop);\n      });\n  }\n};\n\nconst getTokenDecimals = (airdrop) => {\n  if (state.erc20ABI !== undefined) {\n    console.log(\"getTokenDecimals...\");\n\n    createContract(airdrop.tokenId, state.erc20ABI, airdrop.rpcUrl)\n      .decimals()\n      .then((tokenDecimals) => {\n        airdrop.tokenDecimals = tokenDecimals;\n        updateAirdrop(airdrop);\n      });\n  }\n};\n\nconsole.log(\"state\", state, state.airdrops);\n\nconst claim = (airdrop) => {\n  const contract = new ethers.Contract(\n    airdrop.contractId,\n    state.contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  if (airdrop.claimMethod) {\n    contract[airdrop.claimMethod]({\n      gasPrice: Ethers.provider().getFeeData(),\n      gasLimit: airdrop.gasLimit,\n    }).then((transactionHash) => {\n      onComplete(transactionHash);\n    });\n  }\n};\n\nconst loadAirdropABI = (airdrop) => {\n  if (airdrop.abiUrl) {\n    console.log(\"Loading ABI...\");\n    const abi = fetch(airdrop.abiUrl);\n    if (abi.ok) {\n      airdrop.contractABI = abi.body;\n      updateAirdrop(airdrop);\n    }\n  }\n};\n\nconst loadErc20ABI = (erc20abiUrl) => {\n  console.log(\"Loading ERC20 ABI...\");\n  const abi = fetch(erc20abiUrl);\n  if (abi.ok) {\n    State.update({\n      erc20ABI: abi.body,\n    });\n  }\n};\n\nif (state.erc20ABI === undefined) {\n  loadErc20ABI(state.erc20abiUrl);\n}\n\nconst updateAirdrop = (airdrop) => {\n  const airdropId = getAirdropId(airdrop);\n  const airdrops = state.airdrops;\n  airdrops[airdropId] = { ...airdrop, ...airdrops[airdropId] };\n  State.update({ airdrops });\n};\n\n// LOAD AIRDROP DATA\nObject.keys(state.airdrops ?? {}).map((airdropId) => {\n  const airdrop = state.airdrops[airdropId];\n\n  const airdropChain = state.chainlist[airdrop.chainId];\n  console.log(\"airdropChain\", airdropChain);\n  airdrop.networkName = airdropChain.name;\n  airdrop.rpcUrl = airdropChain.rpc_url;\n\n  if (state.chainlistLoaded && state.senderId) {\n    console.log(\"Loading airdrop\", airdrop);\n    if (airdrop.contractABI === undefined && airdrop.abiUrl) {\n      loadAirdropABI(airdrop);\n    }\n\n    if (airdrop.tokenSymbol == undefined && airdrop.tokenId) {\n      getTokenSymbol(airdrop);\n    }\n\n    if (airdrop.tokenDecimals == undefined && airdrop.tokenId) {\n      getTokenDecimals(airdrop);\n    }\n\n    if (\n      airdrop.claimableTokens === undefined &&\n      (airdrop.contractABI !== undefined || !airdrop.abiUrl)\n    ) {\n      getClaimableTokens(airdrop, state.senderId);\n    }\n  }\n});\n\nconst airdropDetails = [];\nObject.keys(state.airdrops ?? {}).map((airdropId) => {\n  const airdrop = state.airdrops[airdropId];\n  if (airdrop.claimableTokens !== undefined) {\n    const claimButton = airdrop.claimableTokens ? (\n      airdrop.claimMethod ? (\n        state.chainId == airdrop.chainId ? (\n          <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n            Claim Now\n          </a>\n        ) : (\n          <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n            Switch to {airdrop.networkName}\n          </a>\n        )\n      ) : (\n        <a class=\"btn btn-primary\" href={airdrop.claimUrl} target=\"_blank\">\n          Claim\n        </a>\n      )\n    ) : (\n      <button class=\"btn\" disabled=\"disabled\">\n        Nothing to claim\n      </button>\n    );\n\n    airdropDetails.push(\n      <div class=\"mb-5\">\n        <h1>{airdrop.name}</h1>\n        <div>\n          ClaimableTokens: {airdrop.claimableTokens} {airdrop.tokenSymbol}\n        </div>{\" \"}\n        {claimButton}\n      </div>\n    );\n  }\n});\n\nreturn (\n  <>\n    {NavBar}\n    {airdropDetails}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/airdrops", "fact_widget_deployments_id": "c0a26f850a0f005a5b61a63565c0e95b", "inserted_timestamp": "2023-08-29T17:29:46.305Z", "modified_timestamp": "2023-08-29T17:29:46.305Z", "__row_index": 0}