{"tx_hash": "CZnZ7nDJRbXWWgcbAPt9nwa3yoyyzv36baUcpCLeKxig", "action_id_social": "6Ga9T3jBPxuMEn9wk5iVwfpssis6GAVS6HrVjDa6b7eb-0-widget", "block_id": 99778000, "block_timestamp": "2023-08-27T12:43:49.773Z", "signer_id": "zavodil.near", "widget_name": "airdrops", "source_code": "State.init({\n  erc20abiUrl:\n    \"https://ipfs.near.social/ipfs/bafkreidpdrcww6sjppxnjjgvlyk7l6k7ihbizufihoxtmzqhsxy3jj3fru\",\n});\nconst airdrops = [\n  {\n    name: \"Arbitrum airdrop\",\n    chainId: 42161,\n    contractId: \"0x67a24CE4321aB3aF51c2D0a4801c3E111D88C9d9\",\n    tokenId: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n    abiUrl:\n      \"https://ipfs.near.social/ipfs/bafkreiet7gmp6qm2n7r75fo6sbv2soa52llwojy65nqyvfplpkcjumvk6m\",\n    gasLimit: \"2000000\",\n    claimMethod: \"claim\",\n    claimableTokensMethod: \"claimableTokens\",\n  },\n];\n\nconst receiver = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!receiver) {\n  return <Web3Connect />;\n}\n\nif (!state.network) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      const chainId = chainIdData.chainId;\n      const chainlistData = Social.get(\n        `zavodil.near/chainlist/chains/${chainId}/**`,\n        \"final\"\n      );\n\n      if (chainlistData.name) {\n        State.update({\n          network: chainlistData.name,\n          icon: chainlistData.icon_svg,\n        });\n      }\n    });\n}\n\nconst airdrop = airdrops[0];\n\nconst claimableTokens = (airdrop) => {\n  if (state.contractABI !== undefined) {\n    const iface = new ethers.utils.Interface(state.contractABI);\n    const encodedData = iface.encodeFunctionData(\n      airdrop.claimableTokensMethod,\n      [receiver]\n    );\n\n    Ethers.provider()\n      .call({\n        to: airdrop.contractId,\n        data: encodedData,\n      })\n      .then((rawClaimableTokens) => {\n        const claimableTokensHex = iface.decodeFunctionResult(\n          airdrop.claimableTokensMethod,\n          rawClaimableTokens\n        );\n\n        State.update({\n          claimableTokens: parseFloat(Big(claimableTokensHex).toFixed()),\n        });\n      });\n  }\n};\n\nconst getTokenSymbol = (airdrop) => {\n  if (state.erc20ABI !== undefined) {\n    const iface = new ethers.utils.Interface(state.erc20ABI);\n    const encodedData = iface.encodeFunctionData(\"symbol\", []);\n\n    Ethers.provider()\n      .call({\n        to: airdrop.tokenId,\n        data: encodedData,\n      })\n      .then((rawData) => {\n        State.update({\n          tokenSymbol: iface.decodeFunctionResult(\"symbol\", rawData),\n        });\n      });\n  }\n};\n\nconst claim = (airdrop) => {\n  const contract = new ethers.Contract(\n    airdrop.contractId,\n    state.contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  contract[airdrop.claimMethod]({\n    gasPrice: Ethers.provider().getFeeData(),\n    gasLimit: airdrop.gasLimit,\n  }).then((transactionHash) => {\n    onComplete(transactionHash);\n  });\n};\n\nconst loadAirdropABI = (airdrop) => {\n  if (airdrop.abiUrl) {\n    console.log(\"Loading ABI...\");\n    const abi = fetch(airdrop.abiUrl);\n    if (abi.ok) {\n      State.update({\n        contractABI: abi.body,\n      });\n    }\n  }\n};\n\nconst loadErc20ABI = (url) => {\n  console.log(\"Loading ERC20 ABI...\");\n  const abi = fetch(url);\n  if (abi.ok) {\n    State.update({\n      erc20ABI: abi.body,\n    });\n  }\n};\n\nconsole.log(\"state\", state);\n\nif (state.network) {\n  console.log(\"Loading airdrop\", airdrop);\n  if (state.contractABI === undefined) {\n    loadAirdropABI(airdrop);\n  }\n\n  if (state.erc20ABI === undefined) {\n    loadErc20ABI(state.erc20abiUrl);\n  }\n\n  if (state.tokenSymbol == undefined) {\n    getTokenSymbol(airdrop);\n  }\n\n  if (state.claimableTokens === undefined && state.contractABI !== undefined) {\n    claimableTokens(airdrop);\n  } else {\n    const claimButton = state.claimableTokens ? (\n      <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n        Claim\n      </a>\n    ) : (\n      \"\"\n    );\n    return (\n      <div>\n        <h1>{airdrop.name}</h1>\n        <div>\n          ClaimableTokens: {state.claimableTokens} {state.tokenSymbol}\n        </div>{\" \"}\n        {claimButton}\n      </div>\n    );\n  }\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/airdrops", "fact_widget_deployments_id": "cabff3af9929db6c445c22650421edf7", "inserted_timestamp": "2023-08-27T14:33:39.622Z", "modified_timestamp": "2023-08-27T14:33:39.622Z", "__row_index": 3}