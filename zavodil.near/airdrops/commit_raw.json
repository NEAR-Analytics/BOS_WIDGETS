{"tx_hash": "Hi8EiK75eHHDwGkidBkXK5dJeyxCyLe1S4jRB9eVZEvP", "action_id_social": "7StQvCdHgFSD1ZM5ivZAnKEajRzokjUfSXYq8NFhnd9H-0-widget", "block_id": 100011907, "block_timestamp": "2023-08-30T15:18:29.299Z", "signer_id": "zavodil.near", "widget_name": "airdrops", "source_code": "const airdropsDatabase = [\n  {\n    name: \"Arbitrum airdrop\",\n    chainId: 42161,\n    contractId: \"0x67a24CE4321aB3aF51c2D0a4801c3E111D88C9d9\",\n    tokenId: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n    abiUrl:\n      \"https://ipfs.near.social/ipfs/bafkreiet7gmp6qm2n7r75fo6sbv2soa52llwojy65nqyvfplpkcjumvk6m\",\n    gasLimit: \"2000000\",\n    claimMethod: \"claim\",\n    claimableTokensMethod: \"claimableTokens\",\n  },\n  {\n    name: \"Paraswap airdrop\",\n    chainId: 1,\n    tokenId: \"0xcafe001067cdef266afb7eb5a286dcfd277f3de5\",\n    convertTokenDecimal: true,\n    claimUrl: \"https://app.paraswap.io/#/\",\n    claimableTokensJsonUrl:\n      \"https://raw.githubusercontent.com/paraswap/paraswap-rewards-snapshot/master/data/airdrop-users.json\",\n    claimableTokensJsonFieldAddress: \"address\",\n    claimableTokensJsonFieldAmount: \"earnings\",\n  },\n  {\n    name: \"Uniswap airdrop\",\n    chainId: 1,\n    //tokenId: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n    tokenSymbol: \"UNI\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://app.uniswap.org/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/d883cb7187a7c4fcf98c7a62f45568e7/raw/3718c95d572a29b9c3906d7c64726d3bd7524bfd/uniswap.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"1inch airdrop\",\n    chainId: 1,\n    //tokenId: \"0x111111111117dC0aa78b770fA6A738034120C302\",\n    tokenSymbol: \"1INCH\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://1inch.exchange\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/8f41d1511bf354d7e56810188116a410/raw/87d967e86e1435aa3a9ddb97ce20531e4e52dbad/1inch.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Tornado airdrop\",\n    chainId: 1,\n    tokenSymbol: \"TORN\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://tornado.cash/\",\n    claimableTokensCsvUrl:\n      \"https://raw.githubusercontent.com/tornadocash/airdrop/master/airdrop.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: false,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Cornichon airdrop\",\n    chainId: 1,\n    //tokenId: \"0xa456b515303B2Ce344E9d2601f91270f8c2Fea5E\",\n    tokenSymbol: \"CORN\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://cornichon.ape.tax/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/5199d8bc6caa3253c343cd5084489088/raw/7e9ca4c4772fc50780bfe9997e1c43525e1b7445/cornichon_airdrop.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Grain airdrop\",\n    chainId: 1,\n    //tokenId: \"0x6589fe1271A0F29346796C6bAf0cdF619e25e58e\",\n    tokenSymbol: \"GRAIN\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://claim.harvest.finance/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/08d7a5b28876741b300c944650c89280/raw/987ab4a92d5363fdbe262f639565732bd1fd3921/grain_iou.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Furucombo airdrop\",\n    chainId: 1,\n    //tokenId: \"0xfFffFffF2ba8F66D4e51811C5190992176930278\",\n    tokenSymbol: \"COMBO\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://furucombo.app/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/69612e155e8063fd6b3422d4efbf22a3/raw/b9023960ab1c478ee2620c456e208e5124115c19/furucombo_airdrop.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Lido airdrop\",\n    chainId: 1,\n    //tokenId: \"0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\",\n    tokenSymbol: \"LDO\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://lido.fi/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/57a8d65280a482fed6f3e2cc00c0e540/raw/e6ebac56c438cc8a882585c5f5bfba64eb57c424/lido_airdrop.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Curve airdrop\",\n    chainId: 1,\n    //tokenId: \"0xD533a949740bb3306d119CC777fa900bA034cd52\",\n    tokenSymbol: \"CRV\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://www.curve.fi/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/9a37e5342ddb6219a805a82bcd3d63fe/raw/71e89f0e95ea8ef5503fb1ac569447fea63f1ede/curve_airdrop.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },\n  {\n    name: \"Convex airdrop\",\n    chainId: 1,\n    //tokenId: \"0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B\",\n    tokenSymbol: \"CRX\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://www.convexfinance.com/\",\n    claimableTokensCsvUrl:\n      \"https://gist.githubusercontent.com/LefterisJP/fd0ebccbc645f7de2b142907bd207363/raw/0613689dd5212b81788ed1a108c751b29b2ce93a/convex_airdrop.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  } /*\n  {\n    name: \"Fox airdrop\",\n    chainId: 1,\n    //tokenId: \"0xc770EEfAd204B5180dF6a14Ee197D99d808ee52d\",\n    tokenSymbol: \"FOX\",\n    convertTokenDecimal: false,\n    claimUrl: \"https://shapeshift.com/shapeshift-decentralize-airdrop\",\n    claimableTokensCsvUrl:\n      \"https://raw.githubusercontent.com/rotki/data/main/airdrops/shapeshift.csv\",\n    claimableTokensCsvIndexAddress: 0,\n    claimableTokensCsvIndexAmount: 1,\n    claimableTokensCsvSkipFirstLine: true,\n    claimableTokensCsvSeparator: \",\",\n  },*/,\n];\n\nconst getAirdropId = (airdrop) => {\n  // TODO\n  return `${airdrop.name}_${airdrop.chainId}`;\n};\n\nconst airdrops = {};\nairdropsDatabase.map((airdrop) => {\n  airdrops[getAirdropId(airdrop)] = airdrop;\n});\n\nState.init({\n  loginTab: \"web3\",\n  airdrops,\n  chainlistLoaded: false,\n  erc20abiUrl:\n    \"https://ipfs.near.social/ipfs/bafkreidpdrcww6sjppxnjjgvlyk7l6k7ihbizufihoxtmzqhsxy3jj3fru\",\n});\n\nconst senderIdWeb3 = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (\n  senderIdWeb3 &&\n  state.loginTab == \"web3\" &&\n  senderIdWeb3 != state.senderId\n) {\n  State.update({ senderId: senderIdWeb3 });\n}\n\nconst NavBar = (\n  <>\n    {!state.senderId && <div>Specify your address to continue:</div>}\n    <div class=\"mb-5\">\n      <ul class=\"nav nav-tabs\">\n        <li class=\"nav-item\">\n          <a\n            class={`nav-link ${state.loginTab == \"web3\" ? \"active\" : \"\"}`}\n            href=\"#\"\n            onClick={() => State.update({ loginTab: \"web3\" })}\n          >\n            Login with Web3\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class={`nav-link ${state.loginTab == \"address\" ? \"active\" : \"\"}`}\n            onClick={() => State.update({ loginTab: \"address\" })}\n            href=\"#\"\n          >\n            Enter address\n          </a>\n        </li>\n      </ul>\n\n      {state.loginTab == \"web3\" && (\n        <div class=\"pt-3\">\n          <Web3Connect />\n        </div>\n      )}\n\n      {state.loginTab == \"address\" && (\n        <div>\n          <div>Enter your address:</div>\n          <input\n            type=\"text\"\n            class=\"form-control mb-2\"\n            value={state.loginAddress}\n            onChange={(e) => {\n              State.update({ loginAddress: e.target.value });\n            }}\n          />\n          <button onClick={() => State.update({ senderId: loginAddress })}>\n            Submit\n          </button>\n        </div>\n      )}\n      {state.senderId && <div>Your address: {state.senderId}</div>}\n    </div>\n  </>\n);\n\nconsole.log(\"Ethers.provider()\", Ethers.provider());\nif (Ethers.provider()) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      State.update({\n        chainId: chainIdData.chainId,\n      });\n    });\n}\n\nif (!state.chainlistLoaded) {\n  const chainlist = Social.get(`zavodil.near/chainlist/chains/**`, \"final\");\n\n  if (chainlist) {\n    State.update({\n      chainlistLoaded: true,\n      chainlist,\n    });\n  }\n}\n\nconst createContract = (contractId, abi, rpcUrl) => {\n  return new ethers.Contract(\n    contractId,\n    abi,\n    new ethers.providers.JsonRpcProvider(rpcUrl)\n  );\n};\n\nconst getClaimableTokens = (airdrop, senderId) => {\n  if (airdrop.contractABI !== undefined || !airdrop.abiUrl) {\n    console.log(\"getClaimableTokens...\", airdrop.name);\n\n    if (airdrop.claimableTokensMethod) {\n      createContract(airdrop.contractId, airdrop.contractABI, airdrop.rpcUrl)\n        [airdrop.claimableTokensMethod](senderId)\n        .then((claimableTokensHex) => {\n          console.log(\"claimableTokensHex\", airdrop.name, claimableTokensHex);\n          airdrop.claimableTokens = parseFloat(\n            Big(claimableTokensHex).toFixed()\n          );\n          updateAirdrop(airdrop);\n        });\n    } else if (\n      airdrop.claimableTokensJsonUrl &&\n      airdrop.claimableTokensJsonFieldAddress &&\n      airdrop.claimableTokensJsonFieldAmount &&\n      (!airdrop.convertTokenDecimal || airdrop.tokenDecimals)\n    ) {\n      const data = fetch(airdrop.claimableTokensJsonUrl);\n\n      if (data.ok) {\n        const result = JSON.parse(data.body).filter(\n          (item) => item[airdrop.claimableTokensJsonFieldAddress] == senderId\n        );\n\n        airdrop.claimableTokens = result.length\n          ? Big(result[0][airdrop.claimableTokensJsonFieldAmount])\n              .div(Big(10).pow(airdrop.tokenDecimals))\n              .toFixed()\n          : 0;\n        updateAirdrop(airdrop);\n      }\n    } else if (\n      airdrop.claimableTokensCsvUrl &&\n      airdrop.claimableTokensCsvIndexAddress !== undefined &&\n      airdrop.claimableTokensCsvIndexAmount !== undefined &&\n      (!airdrop.convertTokenDecimal || airdrop.tokenDecimals)\n    ) {\n      const data = fetch(airdrop.claimableTokensCsvUrl);\n\n      if (data.ok) {\n        function csvToArray(csv, separator) {\n          const rows = csv.split(\"\\n\");\n          const result = [];\n\n          for (const row of rows) {\n            const values = row.split(separator);\n            result.push(values);\n          }\n\n          if (claimableTokensCsvSkipFirstLine) {\n            result.shift();\n          }\n\n          return result;\n        }\n\n        const result = csvToArray(\n          data.body,\n          airdrop.claimableTokensCsvSeparator\n        ).filter(\n          (item) =>\n            item[airdrop.claimableTokensCsvIndexAddress].toLowerCase() ==\n            senderId.toLowerCase()\n        );\n\n        airdrop.claimableTokens = result.length\n          ? airdrop.convertTokenDecimal\n            ? Big(result[0][airdrop.claimableTokensCsvIndexAddress])\n                .div(Big(10).pow(airdrop.tokenDecimals))\n                .toFixed()\n            : result[0][airdrop.claimableTokensCsvIndexAmount]\n          : 0;\n        updateAirdrop(airdrop);\n      }\n    }\n  }\n};\n\nconst getTokenSymbol = (airdrop) => {\n  if (state.erc20ABI !== undefined) {\n    console.log(\"getTokenSymbol...\");\n\n    createContract(airdrop.tokenId, state.erc20ABI, airdrop.rpcUrl)\n      .symbol()\n      .then((tokenSymbol) => {\n        airdrop.tokenSymbol = tokenSymbol;\n        updateAirdrop(airdrop);\n      });\n  }\n};\n\nconst getTokenDecimals = (airdrop) => {\n  if (state.erc20ABI !== undefined) {\n    console.log(\"getTokenDecimals...\");\n\n    createContract(airdrop.tokenId, state.erc20ABI, airdrop.rpcUrl)\n      .decimals()\n      .then((tokenDecimals) => {\n        airdrop.tokenDecimals = tokenDecimals;\n        updateAirdrop(airdrop);\n      });\n  }\n};\n\nconsole.log(\"state\", state, state.airdrops);\n\nconst claim = (airdrop) => {\n  const contract = new ethers.Contract(\n    airdrop.contractId,\n    state.contractABI,\n    Ethers.provider().getSigner()\n  );\n\n  if (airdrop.claimMethod) {\n    contract[airdrop.claimMethod]({\n      gasPrice: Ethers.provider().getFeeData(),\n      gasLimit: airdrop.gasLimit,\n    }).then((transactionHash) => {\n      onComplete(transactionHash);\n    });\n  }\n};\n\nconst loadAirdropABI = (airdrop) => {\n  if (airdrop.abiUrl) {\n    console.log(\"Loading ABI...\");\n    const abi = fetch(airdrop.abiUrl);\n    if (abi.ok) {\n      airdrop.contractABI = abi.body;\n      updateAirdrop(airdrop);\n    }\n  }\n};\n\nconst loadErc20ABI = (erc20abiUrl) => {\n  console.log(\"Loading ERC20 ABI...\");\n  const abi = fetch(erc20abiUrl);\n  if (abi.ok) {\n    State.update({\n      erc20ABI: abi.body,\n    });\n  }\n};\n\nif (state.erc20ABI === undefined) {\n  loadErc20ABI(state.erc20abiUrl);\n}\n\nconst updateAirdrop = (airdrop) => {\n  const airdropId = getAirdropId(airdrop);\n  const airdrops = state.airdrops;\n  airdrops[airdropId] = { ...airdrop, ...airdrops[airdropId] };\n  State.update({ airdrops });\n};\n\n// LOAD AIRDROP DATA\nObject.keys(state.airdrops ?? {}).map((airdropId) => {\n  const airdrop = state.airdrops[airdropId];\n\n  const airdropChain = state.chainlist[airdrop.chainId];\n  console.log(\"airdropChain\", airdropChain);\n  airdrop.networkName = airdropChain.name;\n  airdrop.rpcUrl = airdropChain.rpc_url;\n\n  if (state.chainlistLoaded && state.senderId) {\n    console.log(\"Loading airdrop\", airdrop);\n    if (airdrop.contractABI === undefined && airdrop.abiUrl) {\n      loadAirdropABI(airdrop);\n    }\n\n    if (airdrop.tokenSymbol == undefined && airdrop.tokenId) {\n      getTokenSymbol(airdrop);\n    }\n\n    if (airdrop.tokenDecimals == undefined && airdrop.tokenId) {\n      getTokenDecimals(airdrop);\n    }\n\n    if (\n      airdrop.claimableTokens === undefined &&\n      (airdrop.contractABI !== undefined || !airdrop.abiUrl)\n    ) {\n      getClaimableTokens(airdrop, state.senderId);\n    }\n  }\n});\n\nconst airdropDetails = [];\n\nconst airdropsToSort = Object.keys(state.airdrops).map((airdropId) => ({\n  airdropId,\n  // TODO parse e-9 (ex Curve)\n  claimableTokens: parseFloat(state.airdrops[airdropId].claimableTokens ?? 0),\n}));\n\nconst airdropsSorted = airdropsToSort.sort((a, b) => {\n  return a.claimableTokens < b.claimableTokens\n    ? 1\n    : b.claimableTokens < a.claimableTokens\n    ? -1\n    : 0;\n});\n\nairdropsSorted.map((airdropsSortedItem) => {\n  const airdropId = airdropsSortedItem.airdropId;\n  const airdrop = state.airdrops[airdropId];\n  if (airdrop.claimableTokens !== undefined) {\n    const claimButton = airdrop.claimableTokens ? (\n      airdrop.claimMethod ? (\n        state.chainId == airdrop.chainId ? (\n          <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n            Claim Now\n          </a>\n        ) : (\n          <a class=\"btn btn-primary\" onClick={() => claim(airdrop)}>\n            Switch to {airdrop.networkName}\n          </a>\n        )\n      ) : (\n        <a class=\"btn btn-primary\" href={airdrop.claimUrl} target=\"_blank\">\n          Claim\n        </a>\n      )\n    ) : (\n      <button class=\"btn\" disabled=\"disabled\">\n        Nothing to claim\n      </button>\n    );\n\n    airdropDetails.push(\n      <div class=\"mb-5\">\n        <h1>\n          {airdrop.name} [{airdrop.networkName}]\n        </h1>\n        <div>\n          ClaimableTokens: {airdrop.claimableTokens} {airdrop.tokenSymbol}\n        </div>{\" \"}\n        {claimButton}\n      </div>\n    );\n  }\n});\n\nreturn (\n  <>\n    {NavBar}\n    {airdropDetails}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/airdrops", "fact_widget_deployments_id": "97c2b9399f273793bd0b6f7c62b43a83", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}