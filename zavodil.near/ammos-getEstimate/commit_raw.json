{"tx_hash": "4PCUJ2HvHn5V6LoAGRSpiPsBN7h46Dky4ZzGNScX2cva", "action_id_social": "H3E3MKjzo27zNSg8BPXdf1p6AnakgYfYwbyLUoqPiJLW-0-widget", "block_id": 100597569, "block_timestamp": "2023-09-07T15:21:34.261Z", "signer_id": "zavodil.near", "widget_name": "ammos-getEstimate", "source_code": "const { tokenIn, tokenOut, amountIn, tokenOutDecimals, loadRes } = props;\n\nState.init({ res: { tokenIn, tokenOut, amountIn } });\n\nconst middlePool =\n  props.middlePool ?? \"0x201EBa5CC46D216Ce6DC03F6a759e8E766e956aE\";\n\nconst useMiddlePool = tokenIn !== middlePool && tokenOut !== middlePool;\n\nconst WMNT = \"0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8\";\nconst MNT = \"0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000\";\n\nif (tokenIn == MNT) {\n  tokenIn = WMNT;\n}\n\nif (tokenOut == MNT) {\n  tokenOut = WMNT;\n}\n\nconst optionDirectSwap = {\n  name: \"directSwap\",\n  path: [tokenIn, tokenOut],\n};\n\nconst optionMiddlePoolSwap = {\n  name: \"middlePoolSwap\",\n  path: [tokenIn, middlePool, tokenOut],\n};\n\nconst swapOptions = useMiddlePool\n  ? [optionMiddlePoolSwap, optionDirectSwap]\n  : [optionDirectSwap];\n\nif (state.res.amountIn !== amountIn) {\n  const resetObject = { amountIn };\n  swapOptions.map((option) => (resetObject[option.name] = undefined));\n\n  console.log(\"resetObject\", resetObject);\n  State.update({\n    res: Object.assign(state.res ?? {}, resetObject),\n  });\n}\n\nconst quoterContractId =\n  props.quoterContractId ?? \"0x42cE770b8B765938De04984e006c1B54F1A567f8\";\nconst sqrtPriceLimitX96 = props.sqrtPriceLimitX96 ?? 0;\n\nconst quoterABI =\n  props.quoterABI ??\n  \"https://gist.githubusercontent.com/zavodil/008e400b78a6c06456499bf800ce6c0f/raw/5ea3c4302296444b9bc8ada5cfbaf005fd7e6702/ammos-quorter.txt\";\n\nconst quoterContractJson = fetch(quoterABI);\nif (!quoterContractJson.ok) {\n  return \"\";\n}\n\nconst getEstimate = (path, name) => {\n  console.log(\"path\", path);\n  const abi = JSON.parse(quoterContractJson.body);\n  const iface = new ethers.utils.Interface(abi);\n  const tokenInAddress = path[0];\n  const tokenOutAddress = path[path.length - 1];\n\n  const feeList = [100, 500, 3000, 10000];\n  feeList.map((fee) => {\n    console.log(\"check fee\", fee);\n\n    const inputs = [\n      {\n        tokenIn: tokenInAddress,\n        tokenOut: tokenOutAddress,\n        amountIn: amountIn,\n        fee: fee,\n        sqrtPriceLimitX96: 0,\n      },\n    ];\n    console.log(\"inputs\", inputs);\n\n    const encodedData = iface.encodeFunctionData(\n      \"quoteExactInputSingle\",\n      inputs\n    );\n\n    Ethers.provider()\n      .call({\n        to: quoterContractId,\n        data: encodedData,\n      })\n      .then((data) => {\n        console.log(\"data\", data);\n        const decodedData = iface.decodeFunctionResult(\n          \"quoteExactInputSingle\",\n          data\n        );\n\n        // decodedData = [amountOut, fee]\n        const amountOut = decodedData[0];\n        //const fee = decodedData[1];\n\n        const estimate = Big(amountOut.toString())\n          .div(Big(10).pow(tokenOutDecimals))\n          .toFixed(18);\n\n        console.log(\n          \"estimate\",\n          estimate,\n          fee,\n          state.res[name].estimate,\n          state.res,\n          name\n        );\n        if (\n          parseFloat(estimate) > parseFloat(state.res[name]?.estimate ?? \"0\")\n        ) {\n          State.update({\n            res: Object.assign(state.res ?? {}, {\n              [name]: { estimate, path, fee },\n            }),\n          });\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  });\n};\n\nswapOptions.map((option) => {\n  if (state.res[option.name] === undefined) {\n    getEstimate(option.path, option.name);\n  }\n});\n\nconst allDataReceived = swapOptions.reduce(\n  (accumulator, option) => accumulator && state.res[option.name] !== undefined,\n  true\n);\n\nif (state.res !== undefined && allDataReceived) {\n  if (props.debug) {\n    console.log(\"res\", state.res);\n    if (typeof loadRes !== \"function\") {\n      loadRes = (res) => {\n        return <div>{JSON.stringify(res)}</div>;\n      };\n    }\n  }\n\n  if (typeof loadRes === \"function\") {\n    let res = state.res;\n\n    res.estimate = 0;\n    res.path = \"\";\n\n    swapOptions.map((option) => {\n      let estimate = parseFloat(state.res[option.name].estimate);\n      if (res.estimate < estimate) {\n        res.estimate = estimate;\n        res.path = state.res[option.name].path;\n        res.fee = state.res[option.name].fee;\n      }\n    });\n\n    return loadRes(res);\n  }\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/ammos-getEstimate", "fact_widget_deployments_id": "bb90320d3e1af3d63151fb9f0e74d4a5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}