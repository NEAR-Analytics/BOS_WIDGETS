{"tx_hash": "8Ewq7zYpJWrzTjDYqLcrd5ZLGx4cSQ6jiY5XQb3TDdM6", "action_id_social": "3Cf867Sm9fcMeYLtaz1d3iyMBZrKafrMhcyYaLYBtTuV-0-widget", "block_id": 103730820, "block_timestamp": "2023-10-19T11:50:35.163Z", "signer_id": "zavodil.near", "widget_name": "allowance", "source_code": "const networks = {\n  1: {\n    name: \"ETH\",\n    url: \"https://eth.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n  },\n  137: { name: \"Polygon\" },\n  324: { name: \"ZkSync\" },\n};\n\nconst etherProviderEnabled = !!Ethers?.provider();\n\nconst dataLoadedFor = () => `${state.chainId}_${state.sender}`;\nlet approvals = [];\n\nif (etherProviderEnabled) {\n  Ethers.provider()\n    .send(\"eth_chainId\", [])\n    .then((chainId) => {\n      chainId = parseInt(chainId, 16);\n      if (state.chainId !== chainId) {\n        console.log(\"Set chainId\", chainId);\n        State.update({ chainId });\n      }\n    });\n\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length && state.sender !== accounts[0]) {\n        console.log(\"Set sender\", accounts[0]);\n        State.update({ sender: accounts[0] });\n      }\n    });\n\n  if (\n    state.chainId &&\n    state.sender &&\n    networks[state.chainId].url &&\n    state.dataLoadedFor != dataLoadedFor()\n  ) {\n    const txData = fetch(\n      networks[state.chainId].url.replace(\"%sender%\", state.sender)\n    ).body;\n\n    if (!txData) return \"\";\n\n    if (txData.status === \"1\") {\n      State.update({ txData: txData.result, dataLoadedFor: dataLoadedFor() });\n    } else {\n      console.log(\"Service unavailable\", txData.status);\n    }\n  }\n\n  if (state.txData) {\n    approvals = state.txData.filter((tx) => tx.input.startsWith(\"0x095ea7b3\"));\n  }\n}\n\nconst switchNetwork = (chainId) => {\n  if (etherProviderEnabled && chainId) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: ethers.utils.hexValue(chainId) },\n    ]);\n  }\n};\n\nreturn (\n  <div>\n    {etherProviderEnabled && (\n      <select\n        onChange={(e) => switchNetwork(Number(e.target.value))}\n        value={state.chainId}\n      >\n        {Object.keys(networks).map((networkId) => (\n          <option value={networkId}>{networks[networkId].name}</option>\n        ))}\n      </select>\n    )}\n\n    <pre>{JSON.stringify(state.chainId)}</pre>\n    <pre>{state.sender}</pre>\n    {approvals.map((approval) => (\n      <p>\n        ${approval.from}_${approval.to}\n      </p>\n    ))}\n\n    <Web3Connect />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/allowance", "fact_widget_deployments_id": "d82f73f9c7c827509c6fe5ce0d756e9e", "inserted_timestamp": "2023-10-19T13:45:04.075Z", "modified_timestamp": "2023-10-19T13:45:04.075Z", "__row_index": 0}