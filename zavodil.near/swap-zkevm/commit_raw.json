{"tx_hash": "5sMkawygqhJwJH6nnuuV6Cj5yY6dQxBzjn8gmYtpxP55", "action_id_social": "EAZqPCJ7kxTs2WeZprF6NheMTeivG1As1w1hGDbZk9b9-0-widget", "block_id": 102687965, "block_timestamp": "2023-10-05T17:18:06.061Z", "signer_id": "zavodil.near", "widget_name": "swap-zkevm", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst masaTracking = () => {\n  const url = \"https://api.cookiemonster.masa.finance/tracking\";\n  const body = {\n    type: \"pageView\",\n    client_id: \"d3859a90-3d1e-44bf-8925-eb14935442c8\",\n    event_data: {\n      network: \"polygon-zkevm\",\n      client_app: \"Near BOS\",\n      client_name: \"Quickswap\",\n      page: \"https://near.org/\",\n      wallet: \"metamask\",\n    },\n  };\n\n  if (sender) {\n    body.user_address = sender;\n  }\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  console.log(\"Masa tracking\", url, options);\n  return asyncFetch(url, options);\n};\n\nconst NETWORKS = [\n  {\n    name: \"ZKEVM\",\n    chainId: 1101,\n    dex: \"QuickSwap\",\n    icon: \"https://assets-global.website-files.com/6364e65656ab107e465325d2/642235057dbc06788f6c45c1_polygon-zkevm-logo.png\",\n  },\n  {\n    name: \"ZKEVM\",\n    chainId: 1101,\n    dex: \"Balancer\",\n    icon: \"https://cryptologos.cc/logos/balancer-bal-logo.png\",\n  },\n  {\n    name: \"ZKEVM\",\n    chainId: 1101,\n    dex: \"Pancake Swap\",\n    icon: \"https://repository-images.githubusercontent.com/440462673/6872d684-f7ed-463c-9a5c-76542eddbcc4\",\n  },\n];\n\nconst NETWORK_NEAR = \"NEAR\";\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_ZKEVM = \"ZKEVM\";\nconst NETWORK_AURORA = \"AURORA\";\nconst NETWORK_POLYGON = \"POLYGON\";\nconst NETWORK_MANTLE = \"MANTLE\";\n\nconst FORCED_NETWORK = NETWORK_ZKEVM;\nconst FORCED_CHAIN_ID = 1101;\nconst DEFAULT_DEX = \"QuickSwap\";\n\nconst isEVM = [\n  NETWORK_ETH,\n  NETWORK_ZKSYNC,\n  NETWORK_ZKEVM,\n  NETWORK_AURORA,\n  NETWORK_POLYGON,\n  NETWORK_MANTLE,\n].includes(state.network);\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ selectedChainId: chainId });\n    });\n}\n\nconst loadEstimationResult = (value) => {\n  console.log(\"loadRes\", value);\n  if (value.estimate === \"NaN\") value.estimate = 0;\n  State.update({\n    estimate: value,\n    outputAssetAmount: value === null ? \"\" : value.estimate,\n  });\n};\n\nState.init({\n  rpcError: false,\n  isNetworkSelectOpen: false,\n  inputAssetModalHidden: true,\n  outputAssetModalHidden: true,\n  inputAssetAmount: 1,\n  outputAssetAmount: 0,\n  slippagetolerance: \"0.5\",\n  reloadPools: false,\n  estimate: {},\n  selectedDex: props.dex ?? DEFAULT_DEX,\n  loadRes: loadEstimationResult,\n});\n\nconst reload = () => {\n  State.update({\n    rpcError: false,\n    isNetworkSelectOpen: false,\n    inputAssetModalHidden: true,\n    outputAssetModalHidden: true,\n    inputAssetAmount: 1,\n    outputAssetAmount: 0,\n    slippagetolerance: \"0.5\",\n    reloadPools: false,\n    estimate: {},\n    selectedDex: props.dex ?? DEFAULT_DEX,\n    loadRes: loadEstimationResult,\n  });\n};\n\nconst refReferralId = props.refReferralId ?? \"ukraine\";\nconst forceNetwork = props.forceNetwork ?? FORCED_NETWORK;\n\nconst getEVMAccountId = () => {\n  if (ethers !== undefined) {\n    return Ethers.send(\"eth_requestAccounts\", [])[0] ?? \"\";\n  }\n  return \"\";\n};\n\nif (state.sender === undefined) {\n  return State.update({\n    sender: getEVMAccountId(),\n  });\n}\n\nconst onDexDataLoad = (data) => {\n  console.log(\"!!!! onDexDataLoad\", data);\n\n  if (\n    data.network === NETWORK_ZKEVM &&\n    !state.masaTracking &&\n    data.dexName == \"QuickSwap\"\n  ) {\n    masaTracking();\n    data.masaTracking = true;\n  }\n\n  State.update({\n    ...data,\n    forceReload: false,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    sender: getEVMAccountId(),\n  });\n};\n\nconst themes = {\n  light:\n    \"https://pluminite.mypinata.cloud/ipfs/QmfD6YngV7RzWse1EZdpy8HjyjS6Rp2BQVb5NzFjH7BxXL\",\n  dark: \"https://pluminite.mypinata.cloud/ipfs/QmVLdPM2v8R5qxhshCbKSTNAwnxtVm8FD6bQznqiirAkMT\",\n};\n\n// LOAD STYLE\n\nconst css = fetch(themes[props.theme ?? \"dark\"] ?? themes[\"dark\"]).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n    pre {\n        display: none\n    }\n    .container-button {\n      position: relative;\n      font-family: 'Inter';\n      font-style: normal;\n      font-weight: 600;\n      font-size: 10px;\n      line-height: 12px;\n      cursor: pointer;\n    }\n`,\n  });\n}\n\nconst Theme = state.theme;\n\n// USER FUNCTIONS\n\nconst currentAccountId =\n  getEVMAccountId() !== \"\" ? getEVMAccountId() : context.accountId;\n\nconst rearrangeAssets = () => {\n  console.log(\"rearrangeAssets\");\n  State.update({\n    inputAssetTokenId: state.outputAssetTokenId,\n    outputAssetTokenId: state.inputAssetTokenId,\n    inputAsset: undefined,\n    outputAsset: undefined,\n    inputAssetAmount: state.outputAssetAmount,\n    outputAssetAmount: state.inputAssetAmount,\n    approvalNeeded: undefined,\n  });\n};\n\nif (state.sender && state.network === NETWORK_ZKEVM) {\n  console.log(\"Check RPC\");\n  // load weth balance to check rpc availability\n  const wethAbiUrl =\n    \"https://gist.githubusercontent.com/zavodil/40945d102e2b76d2cf364c4930ab562a/raw/6d156ead258b88a1df0f14f8b44ba7f074825345/weth.json\";\n\n  const wethAbi = fetch(wethAbiUrl);\n  if (!wethAbi.ok) {\n    return \"\";\n  }\n\n  const iface = new ethers.utils.Interface(wethAbi.body);\n\n  const encodedRequest = iface.encodeFunctionData(\"balanceOf\", [state.sender]);\n\n  const weth = \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\";\n\n  Ethers.provider()\n    .call({\n      to: weth,\n      data: encodedRequest,\n    })\n    .then((rawBalance) => {\n      console.log(\"rawBalance\", rawBalance);\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      const balance = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(18))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n\n      console.log(\"balance\", balance);\n    })\n    .catch((ex) => {\n      State.update({ rpcError: true });\n      console.log(\"exception\", ex);\n    });\n}\n\n// REUSABLE UI ELEMEETS\n\nconst assetContainer = (\n  isInputAsset,\n  assetData,\n  amountName,\n  assetNameOnClick\n) => {\n  const useSpacer = !!isInputAsset;\n\n  if (!assetData) {\n    return useSpacer ? (\n      <div\n        style={{\n          height: \"100%\",\n          background: \"#2d2f30\",\n          color: \"white\",\n          flex: \"1\",\n          display: \"flex\",\n\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ margin: \"0 auto\" }}>\n          <Widget src=\"zavodil.near/widget/spinner\" loading={loadingBlock} />\n        </div>\n      </div>\n    ) : null;\n  }\n\n  const assetContainerClass = useSpacer\n    ? \"asset-container-top\"\n    : \"asset-container-bottom\";\n  return (\n    <>\n      <div\n        class={`${assetContainerClass} asset-container`}\n        style={{ border: 0, minHeight: \"77px\" }}\n      >\n        <div class=\"swap-currency-input\">\n          <div class=\"swap-currency-input-block\">\n            <div class=\"swap-currency-input-top\">\n              <input\n                class=\"input-asset-amount\"\n                inputmode=\"decimal\"\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                type=\"text\"\n                pattern=\"^[0-9]*[.,]?[0-9]*$\"\n                placeholder=\"0\"\n                minlength=\"1\"\n                maxlength=\"79\"\n                spellcheck=\"false\"\n                value={state[amountName]}\n                onChange={(e) =>\n                  State.update({\n                    [amountName]: e.target.value,\n                    approvalNeeded: undefined,\n                  })\n                }\n              />\n              <button class=\"input-asset-token\" onClick={assetNameOnClick}>\n                <span class=\"input-asset-token-menu\">\n                  <div class=\"input-asset-token-name\">\n                    <div class=\"input-asset-token-icon\">\n                      {assetData.metadata.icon ? (\n                        <img\n                          alt={`${assetData.metadata.name} logo`}\n                          src={assetData.metadata.icon}\n                          class=\"input-asset-token-icon-img\"\n                        />\n                      ) : (\n                        <>Undefined</>\n                      )}\n                    </div>\n                    <small class=\"input-asset-token-ticker\">\n                      {assetData.metadata.symbol}\n                    </small>\n                  </div>\n                  <svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\">\n                    <path\n                      d=\"M4.99998 1L2.99999 3L1 1\"\n                      stroke=\"white\"\n                      stroke-width=\"1.21738\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    ></path>\n                  </svg>\n                </span>\n              </button>\n            </div>\n            <div class=\"input-asset-details-container\">\n              <div class=\"input-asset-details-row\">\n                <div class=\"input-asset-details-price-container\">\n                  <div class=\"input-asset-details-price\">\n                    <div>${assetData.price}</div>\n                  </div>\n                </div>\n                <div class=\"input-asset-details-balance-container\">\n                  <div class=\"input-asset-details-balance-text\">\n                    Balance: {assetData.balance_hr}\n                  </div>\n                  {isInputAsset &&\n                    Number(state.inputAssetAmount) !==\n                      Number(assetData.balance_hr_full) && (\n                      <button\n                        class=\"input-asset-details-balance-button\"\n                        onClick={() =>\n                          State.update({\n                            [amountName]: assetData.balance_hr_full ?? 0,\n                          })\n                        }\n                      >\n                        Max\n                      </button>\n                    )}\n                </div>\n              </div>\n            </div>\n            {false && <div class=\"swap-currency-input-bottom\"></div>}\n          </div>\n        </div>\n      </div>\n      {useSpacer ? spacerContainer : <></>}\n    </>\n  );\n};\n\nconst spacerContainer = (\n  <div class=\"spacer-container\">\n    <div class=\"spacer-block\" onClick={rearrangeAssets}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"#2d2f30\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <polyline points=\"19 12 12 19 5 12\"></polyline>\n      </svg>\n    </div>\n  </div>\n);\n\n// SWAP METHODS\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst getRefTokenObject = (tokenId, assetData) => {\n  return {\n    id: tokenId,\n    decimals: assetData.metadata.decimals,\n    symbol: assetData.metadata.symbol,\n  };\n};\n\nconst tokenInApprovaleNeededCheck = () => {\n  if (state.approvalNeeded === undefined) {\n    if (\n      getEVMAccountId() &&\n      state.erc20Abi !== undefined &&\n      state.routerContract !== undefined &&\n      isEVM\n    ) {\n      const ifaceErc20 = new ethers.utils.Interface(state.erc20Abi);\n\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\n        \"allowance\",\n        [getEVMAccountId(), state.routerContract]\n      );\n\n      if (\n        state.network === NETWORK_MANTLE &&\n        state.inputAssetTokenId === \"0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000\"\n      ) {\n        // MNT always approved\n        return false;\n      }\n\n      return Ethers.provider()\n        .call({\n          to: state.inputAssetTokenId,\n          data: encodedTokenAllowancesData,\n        })\n        .then((encodedTokenAllowanceHex) => {\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\n            \"allowance\",\n            encodedTokenAllowanceHex\n          );\n\n          if (\n            tokenAllowance &&\n            Big(\n              expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              )\n            ).gt(Big(tokenAllowance))\n          ) {\n            State.update({\n              approvalNeeded: true,\n            });\n          } else {\n            State.update({ approvalNeeded: false });\n          }\n        });\n    } else {\n      State.update({ approvalNeeded: false });\n    }\n  }\n};\n\nif (isEVM) {\n  tokenInApprovaleNeededCheck();\n}\n\nconst canSwap =\n  state.network &&\n  Number(state.inputAsset.balance_hr_full) >= Number(state.inputAssetAmount) &&\n  Number(state.inputAssetAmount ?? 0) > 0;\n\nconst onCallTxComple = (tx) => {\n  console.log(\"transactionHash\", tx);\n  State.update({\n    outputAsset: undefined,\n  });\n};\n\nconst ContainerNetwork = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: 8px;\n  min-height: 24px;\n\n  .label {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 10px;\n    color: #fff;\n  }\n`;\n\nconst NetworkSelectorButton = styled.button`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 4px 8px 4px 4px;\n  gap: 4px;\n\n  height: 24px;\n  outline: none;\n  border: none;\n  position: relative;\n\n  background: #2d2f30;\n  border-radius: 12px;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n\n  color: #FFFFFF;\n`;\n\nconst NetworkList = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 12px;\n  width: 145px;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    border-radius: 12px;\n  }\n\n  li {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 4px 8px 4px 10px;\n    gap: 4px;\n    flex: 1;\n    width: 100%;\n    color: #fff;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n`;\n\nconst caretSvg = (\n  <svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\">\n    <path\n      d=\"M4.99998 1L2.99999 3L1 1\"\n      stroke=\"white\"\n      stroke-width=\"1.21738\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n\nconst selectedChainId = state.selectedChainId ?? 0;\nconst selectedDex = state.selectedDex;\n\nconst switchNetwork = (chainId, dex) => {\n  console.log(\"switchNetwork\", chainId, dex);\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n  State.update({\n    selectedDex: dex,\n    isNetworkSelectOpen: false,\n    forceReload: true,\n  });\n  console.log(\"dex\", dex);\n};\n\nconst networkList = NETWORKS.map((network) => network.chainId); //  [1, 1101];\n\nconst openNetworkList = () => {\n  State.update({ isNetworkSelectOpen: true, isTokenDialogOpen: false });\n};\n\nconst getNetworkKey = (chainId, dex) => `${chainId ?? 0}_${dex ?? \"\"}`;\n\nconst networks = {};\nNETWORKS.map(\n  (network) =>\n    (networks[getNetworkKey(network.chainId, network.dex)] = {\n      chainId: network.chainId,\n      name: network.name,\n      icon: network.icon,\n      dex: network.dex,\n    })\n);\n\nconst loadingBlock = \"\";\n\nconst assetsList = state.assets\n  ? state.assets.map((tokenId) => (\n      <Widget\n        src=\"zavodil.near/widget/TokenBalance2\"\n        loading={loadingBlock}\n        props={{\n          tokenId: tokenId,\n          coinGeckoTokenId: state.coinGeckoTokenIds[tokenId],\n          network: state.network,\n          hideZeroBalance: true,\n          fractionDigits: 4,\n          coingeckoNetworkHandle: state.coingeckoNetworkHandle,\n        }}\n      ></Widget>\n    ))\n  : \"\";\n\nconsole.log(\"state\", state.selectedDex, networks);\n\nconst getFromNetworkLabel = () => {\n  if (!selectedDex && selectedChainId) {\n    console.log(\"selectedDex is missing\");\n    let chainKeyDataArray = Object.keys(networks).filter(\n      (chainKey) => networks[chainKey].chainId == selectedChainId\n    );\n    console.log(\"chainKeyDataArray\", chainKeyDataArray);\n    if (chainKeyDataArray.length) {\n      selectedDex = networks[chainKeyDataArray[0]].dex;\n    }\n  }\n  let network = networks[getNetworkKey(selectedChainId, selectedDex)];\n  return network.icon ? (\n    <>\n      <img style={{ width: \"16px\" }} src={network.icon} />\n      <span>\n        {network.name} {network.dex}\n      </span>\n    </>\n  ) : (\n    <>Undefined</>\n  );\n};\n\nconst networksDropDown = Object.keys(networks).map((chainKey) => {\n  let network = networks[chainKey];\n  return (\n    <li\n      onClick={() => {\n        if (\n          network.chainId !== state.selectedChainId ||\n          state.selectedDex !== network.dex\n        ) {\n          switchNetwork(Number(network.chainId), network.dex ?? \"\");\n        } else {\n          State.update({ isNetworkSelectOpen: false });\n        }\n      }}\n    >\n      <img style={{ width: \"16px\" }} src={network.icon} />\n      <span>\n        {network.name} {network.dex}\n      </span>\n    </li>\n  );\n});\n\n// OUTPUT\n\nif (state.rpcError) {\n  return (\n    <Theme>\n      <div class=\"swap-main-container pt-5\">\n        <div style={{ fontSize: \"1.1rem\" }}>\n          It looks like the RPC is not responsive at the moment\n        </div>\n        <div class=\"swap-button-container\">\n          <button\n            class={\"swap-button-enabled swap-button-text p-2\"}\n            onClick={() => {\n              reload();\n            }}\n          >\n            Click to refresh\n          </button>\n        </div>\n      </div>\n    </Theme>\n  );\n}\n\nconsole.log(\"forceNetwork !== state.network\", forceNetwork, state.network);\nif (forceNetwork && state.network && forceNetwork !== state.network) {\n  return (\n    <Theme>\n      <div class=\"swap-main-container pt-5\">\n        {state.sender && (\n          <div class=\"swap-button-container\">\n            <button\n              onClick={() => switchNetwork(FORCED_CHAIN_ID, DEFAULT_DEX)}\n              class=\"swap-button-enabled swap-button-text p-2\"\n            >\n              To proceed, kindly switch to {forceNetwork}\n            </button>\n          </div>\n        )}\n\n        {!state.sender && (\n          <div class=\"swap-button-container\">\n            <Web3Connect\n              className=\"swap-button-enabled swap-button-text p-2\"\n              connectLabel=\"Connect with Web3\"\n            />\n          </div>\n        )}\n      </div>\n    </Theme>\n  );\n}\n\nconsole.log(\"selectedDex\", state.selectedDex, selectedDex);\n//const prevSelectedDex =\n\nreturn (\n  <Theme>\n    <div id=\"rr\"></div>\n    <Widget\n      src=\"zavodil.near/widget/DexData2.2\"\n      loading={loadingBlock}\n      props={{\n        onLoad: onDexDataLoad,\n        NETWORK_NEAR,\n        NETWORK_ETH,\n        NETWORK_ZKSYNC,\n        NETWORK_ZKEVM,\n        NETWORK_AURORA,\n        NETWORK_POLYGON,\n        NETWORK_MANTLE,\n        forceReload: state.forceReload ?? false,\n        DEX: state.selectedDex,\n      }}\n    />\n    {state.network && state.inputAsset && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal2\"\n        loading={loadingBlock}\n        props={{\n          hidden: state.inputAssetModalHidden ?? true,\n          network: state.network,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          selectedAssets: [state.inputAssetTokenId],\n          coingeckoNetworkHandle: state.coingeckoNetworkHandle,\n          onClick: (tokenId) => {\n            State.update({\n              inputAssetModalHidden: true,\n              inputAssetTokenId: tokenId,\n              inputAsset: null,\n              approvalNeeded: undefined,\n            });\n          },\n          onClose: () => State.update({ inputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {state.network && state.outputAsset && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/AssetListModal2\"\n        loading={loadingBlock}\n        props={{\n          hidden: state.outputAssetModalHidden ?? true,\n          assets: state.assets,\n          coinGeckoTokenIds: state.coinGeckoTokenIds,\n          network: state.network,\n          selectedAssets: [state.outputAssetTokenId],\n          coingeckoNetworkHandle: state.coingeckoNetworkHandle,\n          onClick: (tokenId) => {\n            State.update({\n              outputAssetModalHidden: true,\n              outputAssetTokenId: tokenId,\n              outputAsset: null,\n            });\n          },\n          onClose: () => State.update({ outputAssetModalHidden: true }),\n        }}\n      />\n    )}\n    {!state.inputAsset && state.network && state.inputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData2\"\n        loading={loadingBlock}\n        props={{\n          tokenId: state.inputAssetTokenId,\n          coinGeckoTokenId: state?.coinGeckoTokenIds?.[state.inputAssetTokenId],\n          network: state.network,\n          NETWORK_NEAR,\n          NETWORK_ETH,\n          NETWORK_ZKSYNC,\n          NETWORK_ZKEVM,\n          NETWORK_AURORA,\n          NETWORK_POLYGON,\n          coingeckoNetworkHandle: state.coingeckoNetworkHandle,\n          onLoad: (inputAsset) => {\n            console.log(\"TokenData onLoad inputAsset\", inputAsset);\n            inputAsset.metadata.symbol =\n              inputAsset.metadata.symbol.toUpperCase();\n            State.update({ inputAsset });\n          },\n        }}\n      />\n    )}\n    {!state.outputAsset && state.network && state.outputAssetTokenId && (\n      <Widget\n        src=\"zavodil.near/widget/TokenData2\"\n        loading={loadingBlock}\n        props={{\n          tokenId: state.outputAssetTokenId,\n          coinGeckoTokenId:\n            state?.coinGeckoTokenIds?.[state.outputAssetTokenId],\n          network: state.network,\n          NETWORK_NEAR,\n          NETWORK_ETH,\n          NETWORK_ZKSYNC,\n          NETWORK_ZKEVM,\n          NETWORK_AURORA,\n          NETWORK_POLYGON,\n          coingeckoNetworkHandle: state.coingeckoNetworkHandle,\n          onLoad: (outputAsset) => {\n            console.log(\"TokenData onLoad outputAsset\", outputAsset);\n            outputAsset.metadata.symbol =\n              outputAsset.metadata.symbol.toUpperCase();\n            State.update({ outputAsset });\n          },\n        }}\n      />\n    )}\n    {state.network === NETWORK_NEAR &&\n      state.inputAsset &&\n      state.outputAsset && (\n        <Widget\n          src=\"weige.near/widget/ref-swap-getEstimate\"\n          loading={loadingBlock}\n          props={{\n            loadRes: state.loadRes,\n            tokenIn: getRefTokenObject(\n              state.inputAssetTokenId,\n              state.inputAsset\n            ),\n            tokenOut: getRefTokenObject(\n              state.outputAssetTokenId,\n              state.outputAsset\n            ),\n            amountIn: state.inputAssetAmount ?? 0,\n            reloadPools: state.reloadPools,\n            setReloadPools: (value) =>\n              State.update({\n                reloadPools: value,\n              }),\n          }}\n        />\n      )}\n    {state.network === NETWORK_ZKEVM &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/quickswap-v3-getEstimate\"\n            loading={loadingBlock}\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n    {state.network === NETWORK_MANTLE &&\n      state.selectedDex == \"Agni\" &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/mantle-getEstimate\"\n            loading={loadingBlock}\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              quoterContractId: state.quoterContract,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n    {state.network === NETWORK_MANTLE &&\n      [\"FusionX V3\", \"Ammos Finance\"].includes(state.selectedDex) &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/ammos-getEstimate\"\n            loading={loadingBlock}\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              quoterContractId: state.quoterContract,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n    {state.network === NETWORK_MANTLE &&\n      state.selectedDex == \"iZiSwap\" &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/iziSwap-getEstimate\"\n            loading={loadingBlock}\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenInDecimals: state.inputAsset.metadata.decimals,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              quoterContractId: state.quoterContract,\n              amountIn: state.inputAssetAmount,\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n    {state.network === NETWORK_ETH &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/uni-v3-getEstimate\"\n            loading={loadingBlock}\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              tokenOutDecimals: state.outputAsset.metadata.decimals,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n    {state.network === NETWORK_POLYGON &&\n      state.sender &&\n      state.inputAssetTokenId &&\n      state.outputAssetTokenId &&\n      state.inputAssetTokenId !== state.outputAssetTokenId &&\n      state.inputAssetAmount &&\n      state.inputAsset &&\n      state.inputAsset.metadata?.decimals &&\n      state.outputAsset &&\n      state.outputAsset.metadata?.decimals && (\n        <>\n          <Widget\n            src=\"zavodil.near/widget/balancer-queryBatchSwap\"\n            loading={loadingBlock}\n            props={{\n              loadRes: state.loadRes,\n              tokenIn: state.inputAssetTokenId,\n              tokenOut: state.outputAssetTokenId,\n              inputAsset: state.inputAsset,\n              outputAsset: state.outputAsset,\n              sender: state.sender,\n              quoterContractId: state.routerContract,\n              amountIn: expandToken(\n                state.inputAssetAmount,\n                state.inputAsset.metadata.decimals\n              ).toFixed(0),\n              reloadPools: state.reloadPools,\n              setReloadPools: (value) =>\n                State.update({\n                  reloadPools: value,\n                }),\n            }}\n          />\n        </>\n      )}\n    {[NETWORK_ZKSYNC, NETWORK_AURORA].includes(state.network) &&\n      state.inputAsset &&\n      state.outputAsset &&\n      state.inputAssetAmount &&\n      state.outputAsset.price &&\n      state.inputAsset.price &&\n      state.loadRes({\n        estimate: (\n          (parseFloat(state.inputAssetAmount) *\n            parseFloat(state.inputAsset.price)) /\n          parseFloat(state.outputAsset.price)\n        ).toFixed(18),\n      })}\n    <div class=\"swap-root\">\n      <div class=\"swap-main-container\">\n        <div class=\"swap-main-column\">\n          <div\n            class=\"swap-page\"\n            style={{\n              border: \"none\",\n              outline: \"none\",\n              minHeight: \"312px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            {false && state.network && state.dexName && (\n              <span class=\"swap-header\">\n                {state.dexName} ({state.network})\n              </span>\n            )}\n            {/* DD*/}\n            {state.network && state.dexName && (\n              <ContainerNetwork>\n                <div class=\"container-button\">\n                  <NetworkSelectorButton onClick={openNetworkList}>\n                    {getFromNetworkLabel()}\n                    {caretSvg}\n                  </NetworkSelectorButton>\n                  {state.isNetworkSelectOpen && (\n                    <NetworkList>\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: \"5px\",\n                          right: \"10px\",\n                          color: \"lightgrey\",\n                        }}\n                        onClick={() =>\n                          State.update({ isNetworkSelectOpen: false })\n                        }\n                      >\n                        X\n                      </div>\n                      <ul>{networksDropDown}</ul>\n                    </NetworkList>\n                  )}\n                </div>\n              </ContainerNetwork>\n            )}\n            <div\n              style={{\n                display: \"flex\",\n                paddingLeft: \"10px\",\n                minHeight: \"20px\",\n              }}\n            >\n              {assetsList}\n            </div>\n            <div\n              class=\"top-container\"\n              style={{\n                minHeight: \"77px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              {assetContainer(\n                true,\n                state.inputAsset,\n                \"inputAssetAmount\",\n                () => {\n                  State.update({ inputAssetModalHidden: false });\n                }\n              )}\n            </div>\n            <div\n              class=\"bottom-container\"\n              style={{\n                minHeight: \"168px\",\n                height: \"100%\",\n                flex: \"1 1 0%\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <div style={{ height: \"100%\", flex: 1 }}>\n                {assetContainer(\n                  fasle,\n                  state.outputAsset,\n                  \"outputAssetAmount\",\n                  () => {\n                    State.update({ outputAssetModalHidden: false });\n                  }\n                )}\n                {!!state.outputAssetAmount &&\n                  state.outputAsset &&\n                  state.inputAssetTokenId !== state.outputAssetTokenId && (\n                    <div class=\"swap-price-container\">\n                      <div class=\"swap-price-block\">\n                        <div class=\"swap-price-grid\">\n                          <div class=\"swap-price-row\">\n                            <div class=\"swap-price-details-container\">\n                              <span>\n                                <div class=\"swap-price-details-icon\">\n                                  <div>\n                                    <svg\n                                      xmlns=\"http://www.w3.org/2000/svg\"\n                                      width=\"12\"\n                                      height=\"12\"\n                                      viewBox=\"0 0 12 12\"\n                                      fill=\"none\"\n                                      stroke=\"#98A1C0\"\n                                      stroke-width=\"1\"\n                                      stroke-linecap=\"round\"\n                                      stroke-linejoin=\"round\"\n                                      class=\"swap-price-details-svg\"\n                                    >\n                                      <circle cx=\"6\" cy=\"6\" r=\"5\"></circle>\n                                      <line x1=\"6\" y1=\"8\" x2=\"6\" y2=\"6\"></line>\n                                      <line x1=\"6\" y1=\"4\" x2=\"6\" y2=\"4\"></line>\n                                    </svg>\n                                  </div>\n                                </div>\n                              </span>\n                              <div class=\"swap-price-details-text\">\n                                <button class=\"swap-price-details-text-button\">\n                                  <div\n                                    class=\"swap-price-details-rate\"\n                                    style={{ fontSize: \"10px\" }}\n                                  >\n                                    {Number(state.inputAssetAmount) === 0 ||\n                                    Number(state.outputAssetAmount) === 0\n                                      ? \" \"\n                                      : `1 ${\n                                          state.inputAsset.metadata.symbol\n                                        } \u2248 ${new Big(\n                                          state.outputAssetAmount ?? 0\n                                        )\n                                          .div(state.inputAssetAmount ?? 1)\n                                          .toFixed(4, 0)}\n                                        ${state.outputAsset.metadata.symbol}`}\n                                  </div>\n                                  <div\n                                    class=\"swap-price-details-price\"\n                                    style={{ fontSize: \"10px\" }}\n                                  >\n                                    {Number(state.inputAssetAmount) === 0 ||\n                                    Number(state?.outputAsset?.price) === 0\n                                      ? \"\"\n                                      : `($${new Big(\n                                          state.outputAssetAmount ?? 0\n                                        )\n                                          .div(state.inputAssetAmount ?? 1)\n                                          .times(state?.outputAsset?.price ?? 1)\n                                          .toFixed(4)})`}\n                                  </div>\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n              </div>\n              <div class=\"swap-button-container\">\n                {state.approvalNeeded === true && (\n                  <button\n                    class={\"swap-button-enabled\"}\n                    onClick={() => {\n                      if (\n                        [NETWORK_ETH, NETWORK_POLYGON].includes(state.network)\n                      ) {\n                        state.callTokenApproval(state, () => {\n                          onCallTxComple();\n                          tokenInApprovaleNeededCheck();\n                        });\n                      } else {\n                        Ethers.provider()\n                          .getFeeData()\n                          .then((data) => {\n                            const gasPrice = ethers.utils.formatUnits(\n                              Big(data.gasPrice).toFixed(0),\n                              \"gwei\"\n                            );\n\n                            state.callTokenApproval(\n                              state,\n                              () => {\n                                onCallTxComple();\n                                tokenInApprovaleNeededCheck();\n                              },\n                              gasPrice,\n                              100000\n                            );\n                          });\n                      }\n                    }}\n                  >\n                    <div class=\"swap-button-text\">\n                      Approve {state.inputAsset.metadata.symbol}\n                    </div>\n                  </button>\n                )}\n                {state.approvalNeeded !== true && (\n                  <button\n                    class={canSwap ? \"swap-button-enabled\" : \"swap-button\"}\n                    onClick={() => {\n                      if (canSwap) {\n                        if (state.network === NETWORK_NEAR) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_ZKSYNC) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (\n                          state.network === NETWORK_ZKEVM &&\n                          state.estimate.path\n                        ) {\n                          console.log(\n                            \"state.estimate.path\",\n                            state.estimate.path\n                          );\n\n                          if (state.estimate.path.length === 3) {\n                            state.estimate.path = [\n                              state.estimate.path[0],\n                              state.estimate.path[2],\n                            ];\n                          }\n\n                          Ethers.provider()\n                            .getFeeData()\n                            .then((data) => {\n                              state.callTx(\n                                state,\n                                onCallTxComple,\n                                Big(data.gasPrice)\n                                  .div(Big(10).pow(9))\n                                  .toFixed(10),\n                                500000,\n                                \"0\",\n                                state.estimate.path\n                              );\n                            });\n                        } else if (state.network === NETWORK_ETH) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_AURORA) {\n                          state.callTx(state, onCallTxComple, \"0.1\", 700000);\n                        } else if (state.network === NETWORK_POLYGON) {\n                          state.callTx(state, onCallTxComple);\n                        } else if (state.network === NETWORK_MANTLE) {\n                          const WMNT =\n                            \"0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8\";\n                          const MNT =\n                            \"0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000\";\n\n                          if (\n                            state.inputAssetTokenId === MNT &&\n                            state.estimate.path[0] === WMNT\n                          ) {\n                            state.estimate.path[0] = MNT;\n                          }\n\n                          if (\n                            state.inputAssetTokenId === MNT &&\n                            state.estimate.path[\n                              state.estimate.path.length - 1\n                            ] === WMNT\n                          ) {\n                            state.estimate.path[\n                              state.estimate.path.length - 1\n                            ] = MNT;\n                          }\n\n                          const amountOutMinimum =\n                            state.estimate.estimate * 0.995;\n\n                          Ethers.provider()\n                            .getFeeData()\n                            .then((data) => {\n                              state.callTx(\n                                state,\n                                onCallTxComple,\n                                Big(data.gasPrice)\n                                  .div(Big(10).pow(9))\n                                  .toFixed(10) /*\"120\"*/,\n                                undefined,\n                                undefined,\n                                state.estimate.path,\n                                expandToken(\n                                  amountOutMinimum,\n                                  state.outputAsset.metadata.decimals\n                                ).toFixed(0)\n                              );\n                            });\n\n                          /*\n                          state.callTx(\n                            state,\n                            onCallTxComple,\n                            undefined,\n                            undefined,\n                            undefined,\n                            state.estimate.path\n                          );*/\n                        }\n                      }\n                    }}\n                  >\n                    <div class=\"swap-button-text\">Swap</div>\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"pt-3 text-secondary opacity-50 text-center\">\n          {currentAccountId && <p>Current account: {currentAccountId}</p>}\n\n          {!state.sender && (\n            <div class=\"d-flex justify-content-center\">\n              <Web3Connect\n                className=\"swap-button-enabled swap-button-text p-2 swap-main-column text-center\"\n                connectLabel=\"Connect with Web3\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/zavodil.near/widget/swap-zkevm", "fact_widget_deployments_id": "c706b6e57dea0766a76bcdd28778ada6", "inserted_timestamp": "2023-10-05T19:22:06.973Z", "modified_timestamp": "2023-10-05T19:22:06.973Z", "__row_index": 0}