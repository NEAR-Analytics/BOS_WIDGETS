{"tx_hash": "6JNPq51d8aFX2ppFADfxWic1Axr1889qbzPmi43DhR4T", "action_id_social": "4eMpGwPfyqh4efm93R1V3Lscn2MTgE2yg4k4MUifesqS-0-widget", "block_id": 97395022, "block_timestamp": "2023-07-26T18:29:43.292Z", "signer_id": "dokxo.near", "widget_name": "FASTSBT", "source_code": "// State\r\nState.init({\r\n  theme: \"\",\r\n  Dao_Contract: \"\",\r\n  Issuer_selected: null,\r\n  Issuer_filled: \"\",\r\n  Receiver: \"\",\r\n  ClassIdSelected: 1,\r\n  IssuedAT: \"\",\r\n  ExpiresAt: \"\",\r\n  Referencelink: \"\",\r\n  Referencelink_valid: false,\r\n  Referencelink_json: false,\r\n  Referencehash: \"\",\r\n  IssuerPropList: props.IssuerList,\r\n  ischeckselected: true,\r\n  Submitdisable: true,\r\n});\r\nconst MAX_SAFE_INTEGER = 2e53 - 1;\r\nconst cssFont = fetch(\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\r\n).body;\r\nconst css = fetch(\r\n  \"https://raw.githubusercontent.com/dokxo96/fastSbt/master/fastsbt.css?token=GHSAT0AAAAAACEQ4SVRD7BVOYKVKF5B4FEAZF36DWQ\"\r\n).body;\r\nif (!cssFont || !css) return \"\";\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n    ${cssFont}\r\n    ${css}\r\n`,\r\n  });\r\n}\r\nconst Theme = state.theme;\r\nconst NDCicon =\r\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmP5CETfUsGFqdcsnrfPgUk3NvRh78TGZcX2srfCVFuvqi?_gl=1*faq1pt*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg3Njc1OC4xMS4xLjE2ODk4NzY4MjYuNjAuMC4w\";\r\nconst CheckIcon =\r\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmVGE45rLuHiEHh8RPfL11QsQBXVDfmdV3pevZU7CG1ucg?preview=1&_gl=1*1dpaowv*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg4MDMyOS4xMi4xLjE2ODk4ODA3MTAuMTkuMC4w\";\r\nconst SubmitBtn = styled.button`\r\ndisplay: flex;\r\nwidth: 107px;\r\npadding: 8px 12px;\r\njustify-content: center;\r\nalign-items: center;\r\ngap: 10px;\r\ncolor:#000;\r\ndisplay: flex;\r\nwidth: 107px;\r\npadding: 8px 12px;\r\njustify-content: center;\r\nalign-items: center;\r\ngap: 10px;\r\nborder-radius: 10px;\r\n border-width: 1px;\r\n  border: solid 1px transparent;\r\n \r\n \r\n  background-image: ${\r\n    state.Submitdisable\r\n      ? \"linear-gradient(#a4a39e, #cbcac8), radial-gradient(circle at top left,#000000, #000000);\"\r\n      : \"linear-gradient(#FFD50D, #FFD50D), radial-gradient(circle at top left,#F0E1CE, #F0E1CE);\"\r\n  }\r\n  background-origin: border-box;\r\n  background-clip: padding-box, border-box;\r\n@media only screen and (max-width: 480px) {\r\n \r\n}\r\n`;\r\n\r\nconst CustomCheckbox = styled.div`\r\n width:20px;\r\n height:20px;\r\n background:${\r\n   state.ischeckselected\r\n     ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\r\n     : \"#F8F8F9;\"\r\n }\r\nborder: medium solid ${\r\n  state.ischeckselected\r\n    ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\r\n    : \"black\"\r\n};\r\nborder-radius:4px;\r\n \r\n`;\r\n\r\nconst validatedInputs = async () => {\r\n  console.log(state);\r\n  const isEmpty = (str) => str.trim() === \"\";\r\n  let isValid = false;\r\n  if (isEmpty(state.Dao_Contract)) {\r\n    console.log(\"V:DAO\");\r\n    State.update({ error_msg: \"Write the DAO contract\", Submitdisable: true });\r\n    return (isValid = false);\r\n  }\r\n  if (isEmpty(state.Issuer_selected)) {\r\n    console.log(\"V:Issuer\");\r\n    State.update({ error_msg: \"Select an issuer\", Submitdisable: true });\r\n    return (isValid = false);\r\n  }\r\n  // the user will provide a new issuer\r\n  if (state.Issuer_selected === \"showinput\" && isEmpty(state.Issuer_filled)) {\r\n    console.log(\"V:META\");\r\n    State.update({ error_msg: \"provide an issuer\", Submitdisable: true });\r\n    return (isValid = false);\r\n  }\r\n  if (isEmpty(state.Receiver)) {\r\n    console.log(\"V:Receiver \");\r\n    State.update({ error_msg: \"Write the receiver\", Submitdisable: true });\r\n    return (isValid = false);\r\n  }\r\n  if (state.ischeckselected === true) {\r\n    console.log(\"se activo la meta\", isEmpty(state.ClassIdSelected));\r\n    if (isEmpty(state.ClassIdSelected)) {\r\n      console.log(\"select toke\", isEmpty(state.ClassIdSelected));\r\n      State.update({ error_msg: \"Select a token class\", Submitdisable: true });\r\n      return (isValid = false);\r\n    } else {\r\n      State.update({ error_msg: \"Select a token class\", Submitdisable: false });\r\n      return (isValid = true);\r\n    }\r\n  }\r\n\r\n  State.update({ Submitdisable: false });\r\n  return (isValid = true);\r\n};\r\nconst Submitform = () => {\r\n  if (validatedInputs()) {\r\n    console.log(\"es valido\");\r\n    const meta = JSON.stringify({\r\n      receiver: state.Receiver,\r\n      metadata: {\r\n        class: state.ClassIdSelected,\r\n      },\r\n      reference: state.Referencelink ? state.Referencelink : null,\r\n      reference_hash: state.Referencehash ? state.Referencehash : null,\r\n    });\r\n\r\n    const argsencoded = Buffer.from(meta, \"utf-8\").toString(\"base64\");\r\n    Near.call([\r\n      {\r\n        contractName: state.Dao_Contract,\r\n        methodName: \"add_proposal\",\r\n        args: {\r\n          proposal: {\r\n            description: \"create proposal to mint SBT\",\r\n            kind: {\r\n              FunctionCall: {\r\n                receiver_id:\r\n                  state.Issuer_selected === \"showinput\"\r\n                    ? state.Issuer_filled\r\n                    : state.Issuer_selected,\r\n                actions: [\r\n                  {\r\n                    method_name: \"sbt_mint\",\r\n                    args: argsencoded,\r\n                    deposit: \"80000000000000000000000\",\r\n                    gas: \"200000000000000\",\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        },\r\n        deposit: 100000000000000000000000,\r\n        gas: \"219000000000000\",\r\n      },\r\n    ]);\r\n  } else {\r\n    console.log(\"no es valido\");\r\n  }\r\n};\r\n\r\nconst validateReference = () => {\r\n  try {\r\n    if (state.Referencelink.length > 0) {\r\n      const response = fetch(state.Referencelink);\r\n      console.log(\"res\", response);\r\n      State.update({\r\n        Referencelink_valid: response.status === 200 ? true : false,\r\n        Referencelink_json:\r\n          response.contentType.trim() === \"application/json\" ? true : false,\r\n      });\r\n\r\n      console.log(\r\n        \"state.Referencelink: \" + state.Referencelink,\r\n        \"state.Referencelink_valid: \" + state.Referencelink_valid,\r\n        \"state.Referencelink_json: \" + state.Referencelink_json\r\n      );\r\n    }\r\n  } catch {\r\n    State.update({\r\n      Referencelink_valid: false,\r\n      Referencelink_json: false,\r\n    });\r\n  }\r\n};\r\n\r\nreturn (\r\n  <Theme>\r\n    <div class=\"ModalCard\">\r\n      <div class=\"Header\">\r\n        <img src={NDCicon} />\r\n        <label class=\"Headerlabel\">SBT DAO minter</label>\r\n      </div>\r\n      <div class=\"CardStyled\" name=\"card\">\r\n        <div class=\" BodyForm mx-auto\">\r\n          <div class=\"Rowcont\">\r\n            <div class=\"Colcont\">\r\n              <h1 class=\"H1styled\">Minter DAO *</h1>\r\n              <input\r\n                class=\"InputStyled\"\r\n                type=\"text\"\r\n                placeholder=\"Input DAO contract address\"\r\n                value={state.Dao_Contract}\r\n                onChange={(e) => {\r\n                  State.update({ Dao_Contract: e.target.value });\r\n                  validatedInputs();\r\n                }}\r\n              />\r\n            </div>\r\n            <div class=\"Colcont\">\r\n              <h1 class=\"H1styled\">Issuer *</h1>\r\n              <select\r\n                class=\"Dropdown\"\r\n                placeholder=\"Input DAO contract address \"\r\n                value={state.Issuer_selected}\r\n                onChange={(e) => {\r\n                  State.update({ Issuer_selected: e.target.value });\r\n                  validatedInputs();\r\n                }}\r\n              >\r\n                <option default value=\"\">\r\n                  Select issuer\r\n                </option>\r\n                {props.IssuerList ? (\r\n                  props.IssuerList.map((item) => {\r\n                    return <option value={item.value}> {item.label}</option>;\r\n                  })\r\n                ) : (\r\n                  <></>\r\n                )}\r\n                <option value=\"showinput\">Other -- write it.</option>\r\n              </select>\r\n            </div>\r\n            {state.Issuer_selected === \"showinput\" ? (\r\n              <div class=\"Colcont\">\r\n                <h1 class=\"H1styled\">Enter issuer *</h1>\r\n                <input\r\n                  class=\"InputStyled\"\r\n                  type=\"text\"\r\n                  placeholder=\"Input Issuer\"\r\n                  value={state.Issuer_filled}\r\n                  onChange={(e) => {\r\n                    State.update({ Issuer_filled: e.target.value });\r\n                    validatedInputs();\r\n                  }}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <div class=\"Colcont\">\r\n              <h1 class=\"H1styled\">Receiver *</h1>\r\n              <input\r\n                class=\"InputStyled\"\r\n                type=\"text\"\r\n                placeholder=\"dokxo.near\"\r\n                value={state.Receiver}\r\n                onChange={(e) => {\r\n                  State.update({ Receiver: e.target.value });\r\n                  validatedInputs();\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex flex-column mt-2\">\r\n            <div class=\"d-flex\">\r\n              <h1 class=\"H1styled\">Metadata</h1>\r\n            </div>\r\n            {state.ischeckselected ? (\r\n              <div class=\"MetaCard\">\r\n                <div class=\"row  col-sm-12  mx-0  gap-1   \">\r\n                  <div class=\"Metarow\" name=\"Classid\">\r\n                    <div class=\"MetaTitles\">{\"Class id *\"}</div>\r\n                    <div>\r\n                      <input\r\n                        class=\"Dropdown\"\r\n                        type=\"number\"\r\n                        placeholder=\"write the class id\"\r\n                        min={1}\r\n                        max={MAX_SAFE_INTEGER}\r\n                        value={state.ClassIdSelected}\r\n                        onChange={(e) => {\r\n                          State.update({ ClassIdSelected: e.target.value });\r\n                          validatedInputs();\r\n                        }}\r\n                      ></input>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"Metarow\">\r\n                    <div class=\"MetaTitles\">\r\n                      {\"Reference = link to a JSON file (eg, IPFS).\"}\r\n                    </div>\r\n                    <div>\r\n                      <input\r\n                        class=\"FormInput\"\r\n                        value={state.Referencelink}\r\n                        placeholder=\"Write your reference (optional)\"\r\n                        onChange={async (e) => {\r\n                          State.update({ Referencelink: e.target.value });\r\n\r\n                          validateReference();\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        \"justify-content\": \" end\",\r\n                        gap: \"1rem\",\r\n                        margin: \"4px 2px 0px\",\r\n                        display: \"flex\",\r\n                        \"font-size\": \"10px\",\r\n                      }}\r\n                    >\r\n                      <a\r\n                        style={{\r\n                          color: state.Referencelink_json\r\n                            ? \"#008500\"\r\n                            : \"#FF0000\",\r\n                          \"font-size\": \"10px\",\r\n                        }}\r\n                      >\r\n                        valid json\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"Metarow\">\r\n                    <div class=\"MetaTitles\">\r\n                      {\"Reference hash = Base64-encoded sha256 hash of JSON.\"}\r\n                    </div>\r\n                    <div style={{ \"font-size\": \"10px\" }}>\r\n                      <input\r\n                        class=\"FormInput\"\r\n                        disabled\r\n                        value={state.Referencehash}\r\n                        placeholder=\"Write your reference hash (optional)\"\r\n                        onChange={(e) => {\r\n                          State.update({ Referencehash: e.target.value });\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div class=\"Separator\"></div>\r\n            )}\r\n            <div className=\"d-flex flex-column mt-2\">\r\n              <h1 class=\"H1styled\">Memo </h1>\r\n              <input\r\n                class=\"InputStyled\"\r\n                type=\"text\"\r\n                placeholder=\"Write a memo\"\r\n                value={state.Memo}\r\n                onChange={(e) => {\r\n                  State.update({ Memo: e.target.value.substring(0, 200) });\r\n                  validatedInputs();\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  \"justify-content\": \" end\",\r\n                  gap: \"1rem\",\r\n                  margin: \"4px 2px 0px\",\r\n                  display: \"flex\",\r\n                  \"font-size\": \"10px\",\r\n                }}\r\n              >\r\n                <a\r\n                  style={{\r\n                    color:\r\n                      state.Memo.length < 200 || state.Memo.length === undefined\r\n                        ? \"#008500\"\r\n                        : \"#FF0000\",\r\n                    \"font-size\": \"10px\",\r\n                  }}\r\n                >\r\n                  {state.Memo.length === undefined ? 0 : state.Memo.length} of\r\n                  200\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"FooterForm\" name=\"Footerform\">\r\n          <div class=\"Submitcontainer\">\r\n            <SubmitBtn\r\n              disabled={state.Submitdisable}\r\n              onClick={() => {\r\n                Submitform();\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Submit{\" \"}\r\n            </SubmitBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dokxo.near/widget/FASTSBT", "fact_widget_deployments_id": "71b7da4928c8dfef3fbbcb4ac0a4ca28", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 100}