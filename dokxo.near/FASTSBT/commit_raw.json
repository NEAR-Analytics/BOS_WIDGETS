{"tx_hash": "9SCdmdX1FvWspbg2R2m6sTVmRjHfXAXCLdb9XKih49Af", "action_id_social": "AEJ6KGppUQ47fAMXRaY5mP2pASdPhASzRBfmXBqfiPVb-0-widget", "block_id": 98079112, "block_timestamp": "2023-08-04T19:44:26.806Z", "signer_id": "dokxo.near", "widget_name": "FASTSBT", "source_code": "// State\nState.init({\n  theme: \"\",\n  Dao_Contract: \"\",\n  Issuer_selected: null,\n  Issuer_filled: \"\",\n  Receiver: \"\",\n  ClassIdSelected: \"\",\n  IssuedAT: \"\",\n  ExpiresAt: \"\",\n  Referencelink: \"\",\n  Referencelink_valid: false,\n  Referencelink_json: false,\n  Referencehash: \"\",\n  IssuerPropList: props.IssuerList,\n  ischeckselected: true,\n  Submitdisable: true,\n  FormIsValid: false,\n});\n//const\nconst MAX_SAFE_INTEGER = 2e53 - 1;\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://raw.githubusercontent.com/dokxo96/fastSbt/master/fastsbt.css?token=GHSAT0AAAAAACEQ4SVRD7BVOYKVKF5B4FEAZF36DWQ\"\n).body;\nconst httpRequestOpt = {\n  headers: {\n    \"x-api-key\": props.api_key\n      ? props.api_key\n      : \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\n  },\n};\nif (!cssFont || !css) return \"\";\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst proposalKinds = {\n  FunctionCall: \"call\",\n};\nconst actions = {\n  AddProposal: \"AddProposal\",\n};\nconst _type = {\n  SHOWINPUT: \"showinput\",\n};\n//Custom components\nconst Theme = state.theme;\nconst daoId = props.daoId ?? \"multi.sputnik-dao.near\";\nconst accountId = props.accountId ?? context.accountId;\nconst NDCicon =\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmP5CETfUsGFqdcsnrfPgUk3NvRh78TGZcX2srfCVFuvqi?_gl=1*faq1pt*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg3Njc1OC4xMS4xLjE2ODk4NzY4MjYuNjAuMC4w\";\nconst CheckIcon =\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmVGE45rLuHiEHh8RPfL11QsQBXVDfmdV3pevZU7CG1ucg?preview=1&_gl=1*1dpaowv*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg4MDMyOS4xMi4xLjE2ODk4ODA3MTAuMTkuMC4w\";\nconst SubmitBtn = styled.button`\ndisplay: flex;\nwidth: 107px;\npadding: 8px 12px;\njustify-content: center;\nalign-items: center;\ngap: 10px;\ncolor:#000;\ndisplay: flex;\nwidth: 107px;\npadding: 8px 12px;\njustify-content: center;\nalign-items: center;\ngap: 10px;\nborder-radius: 10px;\n border-width: 1px;\n  border: solid 1px transparent;\n \n \n  background-image: ${\n    state.Submitdisable\n      ? \"linear-gradient(#a4a39e, #cbcac8), radial-gradient(circle at top left,#000000, #000000);\"\n      : \"linear-gradient(#FFD50D, #FFD50D), radial-gradient(circle at top left,#F0E1CE, #F0E1CE);\"\n  }\n  background-origin: border-box;\n  background-clip: padding-box, border-box;\n@media only screen and (max-width: 480px) {\n \n}\n`;\n\nconst CustomCheckbox = styled.div`\n width:20px;\n height:20px;\n background:${\n   state.ischeckselected\n     ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\n     : \"#F8F8F9;\"\n }\nborder: medium solid ${\n  state.ischeckselected\n    ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\n    : \"black\"\n};\nborder-radius:4px;\n \n`;\n\n// -- Get all the roles from the DAO policy\nlet roles = Near.view(daoId, \"get_policy\");\nroles = roles === null ? [] : roles.roles;\n//console.log(\"roles\", roles);\n//Validate if the user can add a Function call to DAO\nconst isUserAllowedTo = (user, kind, action) => {\n  // -- Filter the user roles\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n      userRoles.push(role);\n    }\n  }\n\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n\n  userRoles\n    .filter(({ permissions }) => {\n      const allowedRole =\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n        permissions.includes(`${kind.toString()}:*`) ||\n        permissions.includes(`*:${action.toString()}`) ||\n        permissions.includes(\"*:*\");\n      allowed = allowed || allowedRole;\n      return allowedRole;\n    })\n    .map((role) => role.name);\n\n  return allowed;\n};\nconst canAddProposal = isUserAllowedTo(\n  accountId,\n  proposalKinds.FunctionCall,\n  actions.AddProposal\n);\n\n//Get alll daos\nconst daos = Near.view(\"sputnik-dao.near\", \"get_dao_list\");\n//console.log(\"daos\", daos);\nconst validAccoundAtIssuer = () => {\n  //get the issuer and class\n  const issuer =\n    state.Issuer_selected != \"show\"\n      ? state.Issuer_selected\n      : state.Issuer_filled;\n  const checkMintersJson = Near.view(issuer, \"class_minter\", {\n    class: state.ClassIdSelected,\n  });\n  const mintAuthorities = checkMintersJson.minters;\n\n  if (!mintAuthorities.includes(context.accountId)) {\n    State.update({\n      error_msg: \"you are no allowed at this issuer\",\n      Submitdisable: true,\n    });\n    return (isValid = false);\n  }\n};\n\n//console.log(\"checkMintersJson\", checkMintersJson);\n//const isMintAuthority = console.log(\"isMintAuthority\", isMintAuthority);\n\nconst validateReceiverHasSbt = () => {\n  const issuer =\n    state.Issuer_selected != _type.SHOWINPUT\n      ? state.Issuer_selected\n      : state.Issuer_filled;\n  const fetchlnk = `https://api.pikespeak.ai/sbt/has-sbt?holder=${\n    state.Receiver\n  }&class_id=${state.ClassIdSelected}&issuer=${issuer}&registry=${\n    props.registry ? props.registry : \"registry.i-am-human.near\"\n  }`;\n  console.log(\"fetching\", fetchlnk);\n  asyncFetch(fetchlnk, httpRequestOpt).then((res) => {\n    console.log(\"validateReceiverHasSbt\", res);\n    if (res.body) {\n      //the receiver already has sbt\n      State.update({\n        error_msg: \"The receiver already has SBT\",\n        Submitdisable: false,\n      });\n      return true;\n    }\n  });\n};\n\n//Methods\nconst validatedInputs = async () => {\n  //local methods\n  let regex = new RegExp(\"[a-z0-9]+.near\");\n  const isEmpty = (str) => str.trim() === \"\";\n  const showError = (msg) => {\n    return {\n      error_msg: msg,\n      Submitdisable: true,\n      FormIsValid: false,\n    };\n  };\n  const showSuccess = () => {\n    return {\n      error_msg: \"\",\n      Submitdisable: false,\n      FormIsValid: true,\n    };\n  };\n\n  if (isEmpty(state.Dao_Contract)) {\n    //validate the user filled the Dao input\n    console.log(\"showerror\");\n    const res = showError(\"Write the DAO contract\");\n    console.log(\"res\", res);\n    return State.update(res);\n  }\n  if (!daos.includes(state.Dao_Contract)) {\n    //validate that the DAO provided is a valid one\n    return State.update(showError(\"Is not a Dao contract\"));\n  }\n  if (isEmpty(state.Issuer_selected)) {\n    //validate the user selected an issuer prefilled\n    return State.update(showError(\"Select an issuer\"));\n  }\n\n  if (\n    state.Issuer_selected === _type.SHOWINPUT &&\n    isEmpty(state.Issuer_filled)\n  ) {\n    // the user will provide a new issuer\n    return State.update(showError(\"provide an issuer\"));\n  }\n  if (isEmpty(state.Receiver)) {\n    //validate the user filled the Receiver\n    return State.update(showError(\"Write the receiver\"));\n  }\n  if (regex.test(state.Receiver)) {\n    //validate the user filled the Receiver\n    return State.update(showError(\"Receiver is not a valid account\"));\n  }\n  if (state.ischeckselected === true) {\n    if (state.ClassIdSelected === \"0\") {\n      //validate the user dont add a o in the class id\n      return State.update({\n        ClassIdSelected: \"\",\n        error_msg: \"Select a token class\",\n        Submitdisable: true,\n        FormIsValid: false,\n      });\n    }\n\n    if (isEmpty(state.ClassIdSelected)) {\n      //validate the user select a class id higher than 0\n      return State.update(showError(\"Select a token class\"));\n    } else {\n      if (\n        (state.Receiver && state.Issuer_selected) ||\n        (state.Issuer_selected && state.ClassIdSelected)\n      ) {\n        const issuer =\n          state.Issuer_selected != _type.SHOWINPUT\n            ? state.Issuer_selected\n            : state.Issuer_filled;\n        const fetchlnk = `https://api.pikespeak.ai/sbt/has-sbt?holder=${\n          state.Receiver\n        }&class_id=${state.ClassIdSelected}&issuer=${issuer}&registry=${\n          props.registry ? props.registry : \"registry.i-am-human.near\"\n        }`;\n        console.log(\"fetching\", fetchlnk);\n        asyncFetch(fetchlnk, httpRequestOpt).then((res) => {\n          console.log(\"validateReceiverHasSbt\", res);\n          if (res.body) {\n            //the receiver already has sbt\n            return State.update(showError(\"The receiver already has SBT\"));\n          }\n        });\n      }\n\n      //validate alll is good\n      return State.update(showSuccess());\n    }\n  }\n\n  return State.update(showSuccess());\n};\n//split and improve subtmit\nconst createMeta = () => {\n  const meta = {\n    receiver: state.Receiver,\n    metadata: {\n      class: state.ClassIdSelected,\n    },\n    reference: state.Referencelink || null,\n    reference_hash: state.Referencehash || null,\n  };\n  return JSON.stringify(meta);\n};\nconst encodeArgs = (meta) => {\n  return Buffer.from(meta, \"utf-8\").toString(\"base64\");\n};\nconst Submitform = () => {\n  const isValid = validatedInputs();\n\n  if (isValid) {\n    const meta = createMeta();\n    const argsencoded = encodeArgs(meta);\n\n    const { Dao_Contract, Issuer_selected, Issuer_filled } = state;\n\n    const receiver_id =\n      Issuer_selected === _type.SHOWINPUT ? Issuer_filled : Issuer_selected;\n\n    Near.call([\n      {\n        contractName: Dao_Contract,\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: \"create proposal to mint SBT\",\n            kind: {\n              FunctionCall: {\n                receiver_id,\n                actions: [\n                  {\n                    method_name: \"sbt_mint\",\n                    args: argsencoded,\n                    deposit: \"80000000000000000000000\",\n                    gas: \"200000000000000\",\n                  },\n                ],\n              },\n            },\n          },\n        },\n        deposit: 100000000000000000000000,\n        gas: \"219000000000000\",\n      },\n    ]);\n  } else {\n    console.log(\"not valid\");\n  }\n};\n\nconst validateReference = (link) => {\n  try {\n    if (state.Referencelink.length > 0) {\n      //fetch the link\n      asyncFetch(state.Referencelink).then((response) => {\n        console.log(response);\n        //validate if its a JSON\n        if (response.contentType.trim() === \"application/json\") {\n          // convert to Uft8 the body content\n          const toUtf8 = ethers.utils.toUtf8Bytes(\n            JSON.stringify(response.body)\n          );\n          //Encrypt the Uft8 string into Sha256\n          const encryptSha256 = ethers.utils.keccak256(toUtf8);\n          //parse the sha256 into a base64 string\n          let bodyEncoded = Buffer.from(encryptSha256, \"utf-8\").toString(\n            \"base64\"\n          );\n          //modify the state and mark the Rererence as a valid json and fill the reference hash with the\n          // Base64(sha256(bodycontent))\n          State.update({\n            Referencelink_valid: true,\n            Referencelink_json: true,\n            Referencehash: bodyEncoded,\n          });\n        }\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    State.update({\n      Referencelink_valid: false,\n      Referencelink_json: false,\n    });\n  }\n};\n\nreturn (\n  <Theme>\n    <div class=\"ModalCard\">\n      <div class=\"Header\">\n        <img src={NDCicon} />\n        <label class=\"Headerlabel\">SBT DAO minter</label>\n      </div>\n      <div class=\"CardStyled\" name=\"card\">\n        <div class=\" BodyForm mx-auto\">\n          <div class=\"Rowcont\">\n            <div class=\"Colcont\">\n              <h1 class=\"H1styled\">Minter DAO *</h1>\n              <input\n                class=\"InputStyled\"\n                type=\"text\"\n                placeholder=\"Input DAO contract address\"\n                value={state.Dao_Contract}\n                onChange={(e) => {\n                  State.update({ Dao_Contract: e.target.value });\n\n                  validatedInputs();\n                }}\n              />\n            </div>\n            <div class=\"Colcont\">\n              <h1 class=\"H1styled\">Issuer *</h1>\n              <select\n                class=\"Dropdown\"\n                placeholder=\"Input DAO contract address \"\n                value={state.Issuer_selected}\n                onChange={(e) => {\n                  State.update({ Issuer_selected: e.target.value });\n                  validatedInputs();\n                }}\n              >\n                <option default value=\"\">\n                  Select issuer\n                </option>\n                {props.IssuerList ? (\n                  props.IssuerList.map((item) => {\n                    return <option value={item.value}> {item.label}</option>;\n                  })\n                ) : (\n                  <></>\n                )}\n                <option value={_type.SHOWINPUT}>Other -- write it.</option>\n              </select>\n            </div>\n            {state.Issuer_selected === _type.SHOWINPUT ? (\n              <div class=\"Colcont\">\n                <h1 class=\"H1styled\">Enter issuer *</h1>\n                <input\n                  class=\"InputStyled\"\n                  type=\"text\"\n                  placeholder=\"Input Issuer\"\n                  value={state.Issuer_filled}\n                  onChange={(e) => {\n                    State.update({ Issuer_filled: e.target.value });\n                    validatedInputs();\n                  }}\n                />\n              </div>\n            ) : (\n              <></>\n            )}\n            <div class=\"Colcont\">\n              <h1 class=\"H1styled\">Receiver *</h1>\n              <input\n                class=\"InputStyled\"\n                type=\"text\"\n                placeholder=\"dokxo.near\"\n                value={state.Receiver}\n                onChange={(e) => {\n                  State.update({ Receiver: e.target.value });\n                  validatedInputs();\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"d-flex flex-column mt-2\">\n            <div class=\"d-flex\">\n              <h1 class=\"H1styled\">Metadata</h1>\n              <CustomCheckbox\n                onClick={() => {\n                  State.update({ ischeckselected: !state.ischeckselected });\n                  validatedInputs();\n                }}\n              >\n                {state.ischeckselected ? (\n                  <img\n                    style={{\n                      width: \"100%\",\n                      height: \"100%\",\n                      \"object-fit\": \"cover\",\n                      \"vertical-align\": \" initial\",\n                    }}\n                    src={CheckIcon}\n                  />\n                ) : (\n                  <></>\n                )}\n              </CustomCheckbox>\n            </div>\n            {state.ischeckselected ? (\n              <div class=\"MetaCard\">\n                <div class=\"row  col-sm-12  mx-0  gap-1   \">\n                  <div class=\"Metarow\" name=\"Classid\">\n                    <div class=\"MetaTitles\">{\"Class id *\"}</div>\n                    <div>\n                      <input\n                        class=\"Dropdown\"\n                        type=\"number\"\n                        placeholder=\"write the class id\"\n                        min={1}\n                        max={MAX_SAFE_INTEGER}\n                        step=\"1\"\n                        value={state.ClassIdSelected}\n                        onChange={(e) => {\n                          State.update({ ClassIdSelected: e.target.value });\n                          validatedInputs();\n                        }}\n                      ></input>\n                    </div>\n                  </div>\n\n                  <div class=\"Metarow\">\n                    <div class=\"MetaTitles\">\n                      {\"Reference = link to a JSON file (eg, IPFS).\"}\n                    </div>\n                    <div>\n                      <input\n                        class=\"FormInput\"\n                        value={state.Referencelink}\n                        placeholder=\"Write your reference (optional)\"\n                        onChange={(e) => {\n                          State.update({ Referencelink: e.target.value });\n                          validateReference(e.target.value);\n                        }}\n                      />\n                    </div>\n                    <div\n                      style={{\n                        \"justify-content\": \" end\",\n                        gap: \"1rem\",\n                        margin: \"4px 2px 0px\",\n                        display: \"flex\",\n                        \"font-size\": \"10px\",\n                      }}\n                    >\n                      <a\n                        style={{\n                          color: state.Referencelink_json\n                            ? \"#008500\"\n                            : \"#FF0000\",\n                          \"font-size\": \"10px\",\n                        }}\n                      >\n                        valid json\n                      </a>\n                    </div>\n                  </div>\n                  <div class=\"Metarow\">\n                    <div class=\"MetaTitles\">\n                      {\"Reference hash = Base64-encoded sha256 hash of JSON.\"}\n                    </div>\n                    <div style={{ \"font-size\": \"10px\" }}>\n                      <input\n                        class=\"FormInput\"\n                        disabled\n                        value={state.Referencehash}\n                        placeholder=\"Write your reference hash (optional)\"\n                        onChange={(e) => {\n                          State.update({ Referencehash: e.target.value });\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div class=\"Separator\"></div>\n            )}\n            <div className=\"d-flex flex-column mt-2\">\n              <h1 class=\"H1styled\">Memo </h1>\n              <input\n                class=\"InputStyled\"\n                type=\"text\"\n                placeholder=\"Write a memo\"\n                value={state.Memo}\n                onChange={(e) => {\n                  State.update({ Memo: e.target.value.substring(0, 200) });\n                  validatedInputs();\n                }}\n              />\n              <div\n                style={{\n                  \"justify-content\": \" end\",\n                  gap: \"1rem\",\n                  margin: \"4px 2px 0px\",\n                  display: \"flex\",\n                  \"font-size\": \"10px\",\n                }}\n              >\n                <a\n                  style={{\n                    color:\n                      state.Memo.length < 200 || state.Memo.length === undefined\n                        ? \"#008500\"\n                        : \"#FF0000\",\n                    \"font-size\": \"10px\",\n                  }}\n                >\n                  {state.Memo.length === undefined ? 0 : state.Memo.length} of\n                  200\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"FooterForm\" name=\"Footerform\">\n          {!canAddProposal && (\n            <div\n              style={{\n                \"justify-content\": \" end\",\n                gap: \"1rem\",\n                margin: \"4px 2px 0px\",\n                display: \"flex\",\n                \"font-size\": \"10px\",\n              }}\n            >\n              <a\n                style={{\n                  color: \"#850000\",\n                  \"font-size\": \"10px\",\n                }}\n              >\n                You are not allowed to do a FunctionCall\n              </a>\n            </div>\n          )}\n          <div class=\"Submitcontainer\">\n            <a\n              style={{\n                color: \"#850000\",\n                \"font-size\": \"10px\",\n              }}\n            >\n              {state.error_msg}\n            </a>\n            {context.accountId ? (\n              <SubmitBtn\n                disabled={state.Submitdisable && canAddProposal}\n                onClick={() => {\n                  Submitform();\n                }}\n              >\n                {\" \"}\n                Submit{\" \"}\n              </SubmitBtn>\n            ) : (\n              <SubmitBtn disabled onClick={() => {}}>\n                Connect\n              </SubmitBtn>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dokxo.near/widget/FASTSBT", "fact_widget_deployments_id": "f4caf3e04ddede830d2c8ccdde39b08f", "inserted_timestamp": "2023-08-04T21:36:35.573Z", "modified_timestamp": "2023-08-04T21:36:35.573Z", "__row_index": 23}