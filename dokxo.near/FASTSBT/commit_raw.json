{"tx_hash": "591Wt2o1NjXa4945YM9vbfvRzJHQcKDU855ANQyX4kbq", "action_id_social": "7vzxYBiea5RkVDbE9LAPdysBvdUdrt9zKrDmbf1oaLbu-0-widget", "block_id": 98311847, "block_timestamp": "2023-08-08T01:27:01.330Z", "signer_id": "dokxo.near", "widget_name": "FASTSBT", "source_code": "// State\r\nState.init({\r\n  theme: \"\",\r\n  Dao_Contract: \"\",\r\n  Issuer_selected: null,\r\n  Issuer_filled: \"\",\r\n  Receiver: \"\",\r\n  ClassIdSelected: \"\",\r\n  IssuedAT: \"\",\r\n  ExpiresAt: \"\",\r\n  Referencelink: \"\",\r\n  Referencelink_valid: false,\r\n  Referencelink_json: false,\r\n  Referencehash: \"\",\r\n  JsonBody: \"\",\r\n  IssuerPropList: props.IssuerList,\r\n  ischeckselected: true,\r\n  Submitdisable: true,\r\n  FormIsValid: false,\r\n});\r\n//const\r\nconst MAX_SAFE_INTEGER = 2e53 - 1;\r\nconst cssFont = fetch(\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\r\n).body;\r\nconst css = fetch(\r\n  \"https://raw.githubusercontent.com/dokxo96/fastSbt/master/fastsbt.css?token=GHSAT0AAAAAACEQ4SVRD7BVOYKVKF5B4FEAZF36DWQ\"\r\n).body;\r\nconst httpRequestOpt = {\r\n  headers: {\r\n    \"x-api-key\": props.api_key\r\n      ? props.api_key\r\n      : \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\r\n  },\r\n};\r\nif (!cssFont || !css) return \"\";\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n    ${cssFont}\r\n    ${css}\r\n`,\r\n  });\r\n}\r\nconst proposalKinds = {\r\n  FunctionCall: \"call\",\r\n};\r\nconst actions = {\r\n  AddProposal: \"AddProposal\",\r\n};\r\nconst _type = {\r\n  SHOWINPUT: \"showinput\",\r\n};\r\n//Custom components\r\nconst Theme = state.theme;\r\nconst daoId = props.daoId ?? \"multi.sputnik-dao.near\";\r\nconst accountId = props.accountId ?? context.accountId;\r\nconst NDCicon =\r\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmP5CETfUsGFqdcsnrfPgUk3NvRh78TGZcX2srfCVFuvqi?_gl=1*faq1pt*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg3Njc1OC4xMS4xLjE2ODk4NzY4MjYuNjAuMC4w\";\r\nconst CheckIcon =\r\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmVGE45rLuHiEHh8RPfL11QsQBXVDfmdV3pevZU7CG1ucg?preview=1&_gl=1*1dpaowv*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg4MDMyOS4xMi4xLjE2ODk4ODA3MTAuMTkuMC4w\";\r\nconst SubmitBtn = styled.button`\r\ndisplay: flex;\r\nwidth: 107px;\r\npadding: 8px 12px;\r\njustify-content: center;\r\nalign-items: center;\r\ngap: 10px;\r\ncolor:${state.Submitdisable ? \"#606060\" : \"#000000\"};\r\ndisplay: flex;\r\nwidth: 107px;\r\npadding: 8px 12px;\r\njustify-content: center;\r\nalign-items: center;\r\ngap: 10px;\r\nborder-radius: 10px;\r\n border-width: 1px;\r\n  border: solid 1px  ${state.Submitdisable ? \"darkgray\" : \"transparent\"};\r\n \r\n \r\n  background-image: ${\r\n    state.Submitdisable\r\n      ? \"linear-gradient(rgba(0, 0, 0,0), rgba(0, 0, 0,0))), radial-gradient(circle at top left,rgba(0, 0, 0,0),rgba(0, 0, 0,0));\"\r\n      : \"linear-gradient(#FFD50D, #FFD50D), radial-gradient(circle at top left,#F0E1CE, #F0E1CE);\"\r\n  }\r\n  background-origin: border-box;\r\n  background-clip: padding-box, border-box;\r\n\r\n`;\r\n\r\nconst CustomCheckbox = styled.div`\r\n width:20px;\r\n height:20px;\r\n background:${\r\n   state.ischeckselected\r\n     ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\r\n     : \"#F8F8F9;\"\r\n }\r\nborder: medium solid ${\r\n  state.ischeckselected\r\n    ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\r\n    : \"black\"\r\n};\r\nborder-radius:4px;\r\n \r\n`;\r\nconst CardPreview = styled.div`\r\n  width: 20%;\r\n  margin: auto 0px !important;\r\n @media only screen and (max-width: 480px) {\r\n  width: 100%;\r\n  margin: 0;\r\n}\r\n`;\r\n// -- Get all the roles from the DAO policy\r\nlet roles = Near.view(daoId, \"get_policy\");\r\nroles = roles === null ? [] : roles.roles;\r\n//console.log(\"roles\", roles);\r\n//Validate if the user can add a Function call to DAO\r\nconst isUserAllowedTo = (user, kind, action) => {\r\n  // -- Filter the user roles\r\n  const userRoles = [];\r\n  for (const role of roles) {\r\n    if (role.kind === \"Everyone\") {\r\n      userRoles.push(role);\r\n      continue;\r\n    }\r\n    if (!role.kind.Group) continue;\r\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\r\n      userRoles.push(role);\r\n    }\r\n  }\r\n\r\n  // -- Check if the user is allowed to perform the action\r\n  let allowed = false;\r\n\r\n  userRoles\r\n    .filter(({ permissions }) => {\r\n      const allowedRole =\r\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\r\n        permissions.includes(`${kind.toString()}:*`) ||\r\n        permissions.includes(`*:${action.toString()}`) ||\r\n        permissions.includes(\"*:*\");\r\n      allowed = allowed || allowedRole;\r\n      return allowedRole;\r\n    })\r\n    .map((role) => role.name);\r\n\r\n  return allowed;\r\n};\r\nconst canAddProposal = isUserAllowedTo(\r\n  accountId,\r\n  proposalKinds.FunctionCall,\r\n  actions.AddProposal\r\n);\r\n\r\n//Get alll daos\r\nconst daos = Near.view(\"sputnik-dao.near\", \"get_dao_list\");\r\n//console.log(\"daos\", daos);\r\nconst validAccoundAtIssuer = () => {\r\n  //get the issuer and class\r\n  const issuer =\r\n    state.Issuer_selected != \"show\"\r\n      ? state.Issuer_selected\r\n      : state.Issuer_filled;\r\n  const checkMintersJson = Near.view(issuer, \"class_minter\", {\r\n    class: state.ClassIdSelected,\r\n  });\r\n  const mintAuthorities = checkMintersJson.minters;\r\n\r\n  if (!mintAuthorities.includes(context.accountId)) {\r\n    State.update({\r\n      error_msg: \"you are no allowed at this issuer\",\r\n      Submitdisable: true,\r\n    });\r\n    return (isValid = false);\r\n  }\r\n};\r\n\r\n//console.log(\"checkMintersJson\", checkMintersJson);\r\n//const isMintAuthority = console.log(\"isMintAuthority\", isMintAuthority);\r\n\r\nconst validateReceiverHasSbt = () => {\r\n  const issuer =\r\n    state.Issuer_selected != _type.SHOWINPUT\r\n      ? state.Issuer_selected\r\n      : state.Issuer_filled;\r\n  const fetchlnk = `https://api.pikespeak.ai/sbt/has-sbt?holder=${\r\n    state.Receiver\r\n  }&class_id=${state.ClassIdSelected}&issuer=${issuer}&registry=${\r\n    props.registry ? props.registry : \"registry.i-am-human.near\"\r\n  }`;\r\n  console.log(\"fetching\", fetchlnk);\r\n  asyncFetch(fetchlnk, httpRequestOpt).then((res) => {\r\n    console.log(\"validateReceiverHasSbt\", res);\r\n    if (res.body) {\r\n      //the receiver already has sbt\r\n      State.update({\r\n        error_msg: \"The receiver already has SBT\",\r\n        Submitdisable: false,\r\n      });\r\n      return true;\r\n    }\r\n  });\r\n};\r\n\r\n//Methods\r\nconst validatedInputs = async () => {\r\n  //local methods\r\n\r\n  const regexPattern = /^[a-z0-9_.-]+\\.near$/;\r\n  function validateAccount(inputString) {\r\n    return regexPattern.test(inputString.toLowerCase());\r\n  }\r\n\r\n  const isEmpty = (str) => str.trim() === \"\";\r\n  const showError = (msg) => {\r\n    return {\r\n      error_msg: msg,\r\n      Submitdisable: true,\r\n      FormIsValid: false,\r\n    };\r\n  };\r\n  const showSuccess = () => {\r\n    return {\r\n      error_msg: \"\",\r\n      Submitdisable: false,\r\n      FormIsValid: true,\r\n    };\r\n  };\r\n\r\n  if (isEmpty(state.Dao_Contract)) {\r\n    //validate the user filled the Dao input\r\n\r\n    const res = showError(\"Write the DAO contract\");\r\n    console.log(\"res\", res);\r\n    return State.update(res);\r\n  }\r\n  if (!daos.includes(state.Dao_Contract)) {\r\n    //validate that the DAO provided is a valid one\r\n    return State.update(showError(\"Is not a Dao contract\"));\r\n  }\r\n  if (isEmpty(state.Issuer_selected)) {\r\n    //validate the user selected an issuer prefilled\r\n    return State.update(showError(\"Select an issuer\"));\r\n  }\r\n\r\n  if (\r\n    state.Issuer_selected === _type.SHOWINPUT &&\r\n    isEmpty(state.Issuer_filled)\r\n  ) {\r\n    // the user will provide a new issuer\r\n    return State.update(showError(\"provide an issuer\"));\r\n  }\r\n  if (isEmpty(state.Receiver)) {\r\n    //validate the user filled the Receiver\r\n    return State.update(showError(\"Write the receiver\"));\r\n  }\r\n  if (!validateAccount(state.Receiver)) {\r\n    //validate the user filled the Receiver\r\n    return State.update(showError(\"Receiver is not a valid account\"));\r\n  }\r\n  if (validateAccount(state.Receiver)) {\r\n    //validate the user filled the Receiver\r\n    console.log(\"its valid\", state.Receiver);\r\n    console.log(\r\n      \"account\",\r\n      asyncFetch(\"https://explorer.mainnet.near.org/accounts/dokxo.near\")\r\n    );\r\n  }\r\n  if (state.ischeckselected === true) {\r\n    if (state.ClassIdSelected === \"0\") {\r\n      //validate the user dont add a o in the class id\r\n      return State.update({\r\n        ClassIdSelected: \"\",\r\n        error_msg: \"Select a token class\",\r\n        Submitdisable: true,\r\n        FormIsValid: false,\r\n      });\r\n    }\r\n\r\n    if (isEmpty(state.ClassIdSelected)) {\r\n      //validate the user select a class id higher than 0\r\n      return State.update(showError(\"Select a token class\"));\r\n    } else {\r\n      if (\r\n        (state.Receiver && state.Issuer_selected) ||\r\n        (state.Issuer_selected && state.ClassIdSelected)\r\n      ) {\r\n        const issuer =\r\n          state.Issuer_selected != _type.SHOWINPUT\r\n            ? state.Issuer_selected\r\n            : state.Issuer_filled;\r\n        const fetchlnk = `https://api.pikespeak.ai/sbt/has-sbt?holder=${\r\n          state.Receiver\r\n        }&class_id=${state.ClassIdSelected}&issuer=${issuer}&registry=${\r\n          props.registry ? props.registry : \"registry.i-am-human.near\"\r\n        }`;\r\n        console.log(\"fetching\", fetchlnk);\r\n        asyncFetch(fetchlnk, httpRequestOpt).then((res) => {\r\n          console.log(\"validateReceiverHasSbt\", res);\r\n          if (res.body) {\r\n            //the receiver already has sbt\r\n            return State.update(showError(\"The receiver already has SBT\"));\r\n          }\r\n        });\r\n      }\r\n\r\n      //validate alll is good\r\n      return State.update(showSuccess());\r\n    }\r\n  }\r\n\r\n  return State.update(showSuccess());\r\n};\r\n//split and improve subtmit\r\nconst createMeta = () => {\r\n  const meta = {\r\n    receiver: state.Receiver,\r\n    metadata: {\r\n      class: state.ClassIdSelected,\r\n    },\r\n    reference: state.Referencelink || null,\r\n    reference_hash: state.Referencehash || null,\r\n  };\r\n  return JSON.stringify(meta);\r\n};\r\nconst encodeArgs = (meta) => {\r\n  return Buffer.from(meta, \"utf-8\").toString(\"base64\");\r\n};\r\nconst Submitform = () => {\r\n  const isValid = validatedInputs();\r\n\r\n  if (isValid) {\r\n    const meta = createMeta();\r\n    const argsencoded = encodeArgs(meta);\r\n\r\n    const { Dao_Contract, Issuer_selected, Issuer_filled } = state;\r\n\r\n    const receiver_id =\r\n      Issuer_selected === _type.SHOWINPUT ? Issuer_filled : Issuer_selected;\r\n\r\n    Near.call([\r\n      {\r\n        contractName: Dao_Contract,\r\n        methodName: \"add_proposal\",\r\n        args: {\r\n          proposal: {\r\n            description: \"create proposal to mint SBT\",\r\n            kind: {\r\n              FunctionCall: {\r\n                receiver_id,\r\n                actions: [\r\n                  {\r\n                    method_name: \"sbt_mint\",\r\n                    args: argsencoded,\r\n                    deposit: \"80000000000000000000000\",\r\n                    gas: \"150000000000000\",\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        },\r\n        deposit: 100000000000000000000000,\r\n        gas: \"150000000000000\",\r\n      },\r\n    ]);\r\n  } else {\r\n    console.log(\"not valid\");\r\n  }\r\n};\r\n\r\nconst validateReference = (link) => {\r\n  try {\r\n    if (state.Referencelink.length > 0) {\r\n      //fetch the link\r\n      asyncFetch(state.Referencelink).then((response) => {\r\n        console.log(response);\r\n        //validate if its a JSON\r\n        if (\r\n          response.contentType.trim() === \"application/json\" &&\r\n          response.body != undefined\r\n        ) {\r\n          // convert to Uft8 the body content\r\n          const toUtf8 = ethers.utils.toUtf8Bytes(\r\n            JSON.stringify(response.body)\r\n          );\r\n          //Encrypt the Uft8 string into Sha256\r\n          const encryptSha256 = ethers.utils.keccak256(toUtf8);\r\n          //parse the sha256 into a base64 string\r\n          let bodyEncoded = Buffer.from(encryptSha256, \"utf-8\").toString(\r\n            \"base64\"\r\n          );\r\n          //modify the state and mark the Rererence as a valid json and fill the reference hash with the\r\n          // Base64(sha256(bodycontent))\r\n          State.update({\r\n            Referencelink_valid: true,\r\n            Referencelink_json: true,\r\n            Referencehash: bodyEncoded,\r\n            //previe the body content\r\n            JsonBody: JSON.stringify(response.body),\r\n          });\r\n        } else {\r\n          State.update({\r\n            Referencelink_valid: false,\r\n            Referencelink_json: false,\r\n            Referencehash: \"\",\r\n            JsonBody: \"\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    State.update({\r\n      Referencelink_valid: false,\r\n      Referencelink_json: false,\r\n    });\r\n  }\r\n};\r\n\r\nreturn (\r\n  <Theme>\r\n    <div class=\"ModalCard\">\r\n      <div class=\"Header\">\r\n        <img src={NDCicon} />\r\n        <label class=\"Headerlabel\">SBT DAO minter</label>\r\n      </div>\r\n\r\n      <div class=\"d-flex row col-sm-12 \">\r\n        {state.Referencelink_valid && (\r\n          <CardPreview class=\"CardPreview\" name=\"cardPreview\">\r\n            <div class=\" BodyForm mx-auto\">\r\n              <div className=\"d-flex flex-column mt-2\">\r\n                {state.ischeckselected ? (\r\n                  <div class=\"MetaCard\">\r\n                    <div class=\"row  col-sm-12   mx-2  gap-1   \">\r\n                      <div class=\"\" name=\"Metarow\">\r\n                        <div class=\"MetaTitles\">{\"Json preview.\"}</div>\r\n                        <div style={{ \"font-size\": \"10px\" }}>\r\n                          <textarea\r\n                            class=\"FormInput\"\r\n                            style={{ width: \"93%\", height: \"195px\" }}\r\n                            disabled\r\n                            value={state.JsonBody}\r\n                            placeholder=\"the json preview goes here\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div class=\"Separator\"></div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </CardPreview>\r\n        )}\r\n\r\n        <div class=\"CardStyled\" name=\"card\">\r\n          <div class=\" BodyForm mx-auto\">\r\n            <div class=\"Rowcont\">\r\n              <div class=\"Colcont\">\r\n                <h1 class=\"H1styled\">Minter DAO *</h1>\r\n                <input\r\n                  class=\"InputStyled\"\r\n                  type=\"text\"\r\n                  placeholder=\"Input DAO contract address\"\r\n                  value={state.Dao_Contract}\r\n                  onChange={(e) => {\r\n                    State.update({ Dao_Contract: e.target.value });\r\n\r\n                    validatedInputs();\r\n                  }}\r\n                />\r\n              </div>\r\n              <div class=\"Colcont\">\r\n                <h1 class=\"H1styled\">Issuer *</h1>\r\n                <select\r\n                  class=\"Dropdown\"\r\n                  placeholder=\"Input DAO contract address \"\r\n                  value={state.Issuer_selected}\r\n                  onChange={(e) => {\r\n                    State.update({ Issuer_selected: e.target.value });\r\n                    validatedInputs();\r\n                  }}\r\n                >\r\n                  <option default value=\"\">\r\n                    Select issuer\r\n                  </option>\r\n                  <option default value=\"registry.i-am-human.near\">\r\n                    registry.i-am-human.near\r\n                  </option>\r\n                  <option default value=\"registry-v1.gwg-testing.near\">\r\n                    registry-v1.gwg-testing.near\r\n                  </option>\r\n                  <option default value=\"fractal.i-am-human.near\">\r\n                    fractal.i-am-human.near\r\n                  </option>\r\n                  {props.IssuerList ? (\r\n                    props.IssuerList.map((item) => {\r\n                      return <option value={item.value}> {item.label}</option>;\r\n                    })\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  <option value={_type.SHOWINPUT}>Other -- write it.</option>\r\n                </select>\r\n              </div>\r\n              {state.Issuer_selected === _type.SHOWINPUT ? (\r\n                <div class=\"Colcont\">\r\n                  <h1 class=\"H1styled\">Enter issuer *</h1>\r\n                  <input\r\n                    class=\"InputStyled\"\r\n                    type=\"text\"\r\n                    placeholder=\"Input Issuer\"\r\n                    value={state.Issuer_filled}\r\n                    onChange={(e) => {\r\n                      State.update({ Issuer_filled: e.target.value });\r\n                      validatedInputs();\r\n                    }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <div class=\"Colcont\">\r\n                <h1 class=\"H1styled\">Receiver *</h1>\r\n                <input\r\n                  class=\"InputStyled\"\r\n                  type=\"text\"\r\n                  placeholder=\"dokxo.near\"\r\n                  value={state.Receiver}\r\n                  onChange={(e) => {\r\n                    State.update({ Receiver: e.target.value });\r\n                    validatedInputs();\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"d-flex flex-column mt-2\">\r\n              <div class=\"d-flex\">\r\n                <h1 class=\"H1styled\">Metadata</h1>\r\n                <CustomCheckbox\r\n                  onClick={() => {\r\n                    State.update({ ischeckselected: !state.ischeckselected });\r\n                    validatedInputs();\r\n                  }}\r\n                >\r\n                  {state.ischeckselected ? (\r\n                    <img\r\n                      style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        \"object-fit\": \"cover\",\r\n                        \"vertical-align\": \" initial\",\r\n                      }}\r\n                      src={CheckIcon}\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </CustomCheckbox>\r\n              </div>\r\n              {state.ischeckselected ? (\r\n                <div class=\"MetaCard\">\r\n                  <div class=\"row  col-sm-12  mx-0  gap-1   \">\r\n                    <div class=\"Metarow\" name=\"Classid\">\r\n                      <div class=\"MetaTitles\">{\"Class id *\"}</div>\r\n                      <div>\r\n                        <input\r\n                          class=\"Dropdown\"\r\n                          type=\"number\"\r\n                          placeholder=\"write the class id\"\r\n                          min={1}\r\n                          max={MAX_SAFE_INTEGER}\r\n                          step=\"1\"\r\n                          value={state.ClassIdSelected}\r\n                          onChange={(e) => {\r\n                            State.update({ ClassIdSelected: e.target.value });\r\n                            validatedInputs();\r\n                          }}\r\n                        ></input>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"Metarow\">\r\n                      <div class=\"MetaTitles\">\r\n                        {\"Reference = link to a JSON file (eg, IPFS).\"}\r\n                      </div>\r\n                      <div>\r\n                        <input\r\n                          class=\"FormInput\"\r\n                          value={state.Referencelink}\r\n                          placeholder=\"Write your reference (optional)\"\r\n                          onChange={(e) => {\r\n                            State.update({ Referencelink: e.target.value });\r\n                            validateReference(e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          \"justify-content\": \" end\",\r\n                          gap: \"1rem\",\r\n                          margin: \"4px 2px 0px\",\r\n                          display: \"flex\",\r\n                          \"font-size\": \"10px\",\r\n                        }}\r\n                      >\r\n                        <a\r\n                          style={{\r\n                            color: state.Referencelink_json\r\n                              ? \"#008500\"\r\n                              : \"#FF0000\",\r\n                            \"font-size\": \"10px\",\r\n                          }}\r\n                        >\r\n                          valid json\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"Metarow\">\r\n                      <div class=\"MetaTitles\">\r\n                        {\"Reference hash = Base64-encoded sha256 hash of JSON.\"}\r\n                      </div>\r\n                      <div style={{ \"font-size\": \"10px\" }}>\r\n                        <input\r\n                          class=\"FormInput\"\r\n                          disabled\r\n                          value={state.Referencehash}\r\n                          placeholder=\"Write your reference hash (optional)\"\r\n                          onChange={(e) => {\r\n                            State.update({ Referencehash: e.target.value });\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div class=\"Separator\"></div>\r\n              )}\r\n              <div className=\"d-flex flex-column mt-2\">\r\n                <h1 class=\"H1styled\">Memo </h1>\r\n                <input\r\n                  class=\"InputStyled\"\r\n                  type=\"text\"\r\n                  placeholder=\"Write a memo\"\r\n                  value={state.Memo}\r\n                  onChange={(e) => {\r\n                    State.update({ Memo: e.target.value.substring(0, 200) });\r\n                    validatedInputs();\r\n                  }}\r\n                />\r\n                <div\r\n                  style={{\r\n                    \"justify-content\": \" end\",\r\n                    gap: \"1rem\",\r\n                    margin: \"4px 2px 0px\",\r\n                    display: \"flex\",\r\n                    \"font-size\": \"10px\",\r\n                  }}\r\n                >\r\n                  <a\r\n                    style={{\r\n                      color:\r\n                        state.Memo.length < 200 ||\r\n                        state.Memo.length === undefined\r\n                          ? \"#008500\"\r\n                          : \"#FF0000\",\r\n                      \"font-size\": \"10px\",\r\n                    }}\r\n                  >\r\n                    {state.Memo.length === undefined ? 0 : state.Memo.length} of\r\n                    200\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"FooterForm\" name=\"Footerform\">\r\n            {!canAddProposal && (\r\n              <div\r\n                style={{\r\n                  \"justify-content\": \" end\",\r\n                  gap: \"1rem\",\r\n                  margin: \"4px 2px 0px\",\r\n                  display: \"flex\",\r\n                  \"font-size\": \"10px\",\r\n                }}\r\n              >\r\n                <a\r\n                  style={{\r\n                    color: \"#850000\",\r\n                    \"font-size\": \"10px\",\r\n                  }}\r\n                >\r\n                  You are not allowed to do a FunctionCall\r\n                </a>\r\n              </div>\r\n            )}\r\n            <div class=\"Submitcontainer\">\r\n              <a\r\n                style={{\r\n                  color: \"#850000\",\r\n                  \"font-size\": \"10px\",\r\n                }}\r\n              >\r\n                {state.error_msg}\r\n              </a>\r\n              {context.accountId ? (\r\n                <SubmitBtn\r\n                  disabled={state.Submitdisable && canAddProposal}\r\n                  onClick={() => {\r\n                    Submitform();\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Submit{\" \"}\r\n                </SubmitBtn>\r\n              ) : (\r\n                <SubmitBtn disabled>Connect</SubmitBtn>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dokxo.near/widget/FASTSBT", "fact_widget_deployments_id": "f535e94bede7e06cef5032cb5993e700", "inserted_timestamp": "2023-08-08T03:17:54.058Z", "modified_timestamp": "2023-08-08T03:17:54.058Z", "__row_index": 53}