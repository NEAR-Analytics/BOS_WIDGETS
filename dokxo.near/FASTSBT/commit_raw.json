{"tx_hash": "jMVzzzmRqJTjkXi1mKxSf12uboFUVhmUUs3EpyE9uNi", "action_id_social": "9KQhGszFW1zyhznLaXFeNgGrq8yi8ke1isxwDZww6yLb-0-widget", "block_id": 97258632, "block_timestamp": "2023-07-24T23:50:56.886Z", "signer_id": "dokxo.near", "widget_name": "FASTSBT", "source_code": "// the initial state\r\nState.init({\r\n  theme: \"\",\r\n  Dao_Contract: \"\",\r\n  Issuer_selected: null,\r\n  Issuer_filled: \"\",\r\n  Receiver: \"\",\r\n  ClassIdSelected: \"\",\r\n  IssuedAT: \"\",\r\n  ExpiresAt: \"\",\r\n  Referencelink: \"\",\r\n  Referencehash: \"\",\r\n  IssuerPropList: props.IssuerList || [],\r\n  ischeckselected: false,\r\n  Submitdisable: true,\r\n});\r\n// Constants for URLs\r\nconst cssFontURL =\r\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\";\r\nconst cssURL =\r\n  \"https://raw.githubusercontent.com/dokxo96/fastSbt/master/fastsbt.css?token=GHSAT0AAAAAACEQ4SVRD7BVOYKVKF5B4FEAZF36DWQ\";\r\nconst NDCicon =\r\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmP5CETfUsGFqdcsnrfPgUk3NvRh78TGZcX2srfCVFuvqi?_gl=1*faq1pt*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg3Njc1OC4xMS4xLjE2ODk4NzY4MjYuNjAuMC4w\";\r\nconst CheckIcon =\r\n  \"https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmVGE45rLuHiEHh8RPfL11QsQBXVDfmdV3pevZU7CG1ucg?preview=1&_gl=1*1dpaowv*_ga*Mzc5OTE2NDYyLjE2ODg1MTY4MTA.*_ga_5RMPXG14TE*MTY4OTg4MDMyOS4xMi4xLjE2ODk4ODA3MTAuMTkuMC4w\";\r\n// fetch CSS and Fonts\r\nconst cssFont = fetch(cssFontURL).body;\r\nconst css = fetch(cssURL).body;\r\n\r\nif (!cssFont || !css) return \"\";\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n    ${cssFont}\r\n    ${css}\r\n`,\r\n  });\r\n}\r\n//Custom Components\r\nconst Theme = state.theme;\r\nconst SubmitBtn = styled.button`\r\n    display: flex;\r\n    width: 107px;\r\n    padding: 8px 12px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 10px;\r\n    color:#000;\r\n    display: flex;\r\n    width: 107px;\r\n    padding: 8px 12px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-radius: 10px;\r\n    border-width: 1px;\r\n    border: solid 1px transparent;\r\n    background-image: ${\r\n      state.Submitdisable\r\n        ? \"linear-gradient(#a4a39e, #cbcac8), radial-gradient(circle at top left,#000000, #000000);\"\r\n        : \"linear-gradient(#FFD50D, #FFD50D), radial-gradient(circle at top left,#F0E1CE, #F0E1CE);\"\r\n    }\r\n    background-origin: border-box;\r\n    background-clip: padding-box, border-box;\r\n    @media only screen and (max-width: 480px) {\r\n    \r\n    }\r\n`;\r\nconst CustomCheckbox = styled.div`\r\n    width:20px;\r\n    height:20px;\r\n    background:${\r\n      state.ischeckselected\r\n        ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\r\n        : \"#F8F8F9;\"\r\n    }\r\n    border: medium solid ${\r\n      state.ischeckselected\r\n        ? \"linear-gradient(90deg, #9333EA 0%, #4F46E5 100%);\"\r\n        : \"black\"\r\n    };\r\n    border-radius:4px;\r\n    \r\n`;\r\n// This method will validate that all fields were filled.\r\nconst validatedInputsImproved = () => {\r\n  const isEmpty = (str) => str.trim() === \"\";\r\n\r\n  const validationRules = {\r\n    Dao_Contract: {\r\n      isEmpty: isEmpty(state.Dao_Contract),\r\n      errorMsg: \"Write the DAO contract\",\r\n    },\r\n    Issuer_selected: {\r\n      isEmpty: isEmpty(state.Issuer_selected),\r\n      errorMsg: \"Select an issuer\",\r\n    },\r\n    Issuer_filled: {\r\n      isEmpty:\r\n        state.Issuer_selected === \"showinput\" && isEmpty(state.Issuer_filled),\r\n      errorMsg: \"Provide an issuer\",\r\n    },\r\n    Receiver: {\r\n      isEmpty: isEmpty(state.Receiver),\r\n      errorMsg: \"Write the receiver\",\r\n    },\r\n    ClassIdSelected: {\r\n      isEmpty: state.ischeckselected && isEmpty(state.ClassIdSelected),\r\n      errorMsg: \"Select a token class\",\r\n    },\r\n    Memo: {\r\n      isEmpty: isEmpty(state.Memo),\r\n      errorMsg: \"Write the memo\",\r\n    },\r\n  };\r\n\r\n  let error_msg = \"\";\r\n  let Submitdisable = false;\r\n\r\n  for (const field in validationRules) {\r\n    if (validationRules[field].isEmpty) {\r\n      error_msg = validationRules[field].errorMsg;\r\n      Submitdisable = true;\r\n      break; // Exit the loop as soon as we find an error\r\n    }\r\n  }\r\n\r\n  State.update({ error_msg, Submitdisable });\r\n  return !Submitdisable;\r\n};\r\n\r\n// This method will make a Function call to the DAO\r\nconst Submitform = () => {\r\n  if (validatedInputsImproved()) {\r\n    console.log(\"es valido\");\r\n    const meta = JSON.stringify({\r\n      receiver: state.Receiver,\r\n      metadata: {\r\n        class: state.ClassIdSelected,\r\n      },\r\n      reference: state.Referencelink ? state.Referencelink : null,\r\n      reference_hash: state.Referencehash ? state.Referencehash : null,\r\n    });\r\n\r\n    const argsencoded = Buffer.from(meta, \"utf-8\").toString(\"base64\");\r\n    Near.call([\r\n      {\r\n        contractName: state.Dao_Contract,\r\n        methodName: \"add_proposal\",\r\n        args: {\r\n          proposal: {\r\n            description: \"create proposal to mint SBT\",\r\n            kind: {\r\n              FunctionCall: {\r\n                receiver_id: state.issuer ? state.issuer : \"issuer.regens.near\",\r\n                actions: [\r\n                  {\r\n                    method_name: \"sbt_mint\",\r\n                    args: argsencoded,\r\n                    deposit: \"80000000000000000000000\",\r\n                    gas: \"200000000000000\",\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        },\r\n        deposit: 100000000000000000000000,\r\n        gas: \"219000000000000\",\r\n      },\r\n    ]);\r\n  } else {\r\n    console.log(\"no es valido\");\r\n  }\r\n};\r\n\r\nconst submitProposalImproved = async () => {\r\n  console.log(\"state\", state);\r\n  try {\r\n    const isValid = validatedInputsImproved();\r\n    if (!isValid) {\r\n      console.log(\"Form inputs are invalid.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Form is valid, submitting proposal...\");\r\n\r\n    const meta = JSON.stringify({\r\n      receiver: state.Receiver,\r\n      metadata: {\r\n        class: state.ClassIdSelected,\r\n      },\r\n      reference: state.Referencelink || null,\r\n      reference_hash: state.Referencehash || null,\r\n    });\r\n\r\n    const argsEncoded = Buffer.from(meta, \"utf-8\").toString(\"base64\");\r\n\r\n    const proposal = {\r\n      description: \"create proposal to mint SBT\",\r\n      kind: {\r\n        FunctionCall: {\r\n          receiver_id: state.issuer ? state.issuer : \"issuer.regens.near\",\r\n          actions: [\r\n            {\r\n              method_name: \"sbt_mint\",\r\n              args: argsEncoded,\r\n              deposit: \"80000000000000000000000\",\r\n              gas: \"200000000000000\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n\r\n    const callArgs = {\r\n      contractName: state.Dao_Contract,\r\n      methodName: \"add_proposal\",\r\n      args: { proposal },\r\n      deposit: \"100000000000000000000000\",\r\n      gas: \"219000000000000\",\r\n    };\r\n\r\n    await Near.call([callArgs]);\r\n\r\n    console.log(\"Proposal submitted successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error submitting proposal:\", error);\r\n  }\r\n};\r\nreturn (\r\n  <Theme>\r\n    <div class=\"ModalCard\">\r\n      <div class=\"Header\">\r\n        <img src={NDCicon} />\r\n        <label class=\"Headerlabel\">FAST-SBT</label>\r\n      </div>\r\n      <div class=\"CardStyled\" name=\"card\">\r\n        <div class=\" BodyForm mx-auto\">\r\n          <div class=\"Rowcont\">\r\n            <div class=\"Colcont\">\r\n              <h1 class=\"H1styled\">DAO</h1>\r\n              <input\r\n                class=\"InputStyled\"\r\n                type=\"text\"\r\n                placeholder=\"Input DAO contract address\"\r\n                value={state.Dao_Contract}\r\n                onChange={(e) => {\r\n                  State.update({ Dao_Contract: e.target.value });\r\n                  validatedInputs();\r\n                }}\r\n              />\r\n            </div>\r\n            <div class=\"Colcont\">\r\n              <h1 class=\"H1styled\">Issuer</h1>\r\n              <select\r\n                class=\"Dropdown\"\r\n                placeholder=\"Input DAO contract address\"\r\n                value={state.Issuer_selected}\r\n                onChange={(e) => {\r\n                  State.update({ Issuer_selected: e.target.value });\r\n                  validatedInputs();\r\n                }}\r\n              >\r\n                <option default value=\"\">\r\n                  Select issuer\r\n                </option>\r\n                {props.IssuerList ? (\r\n                  props.IssuerList.map((item) => {\r\n                    return <option value={item.value}> {item.label}</option>;\r\n                  })\r\n                ) : (\r\n                  <></>\r\n                )}\r\n                <option value=\"showinput\">Other -- write it.</option>\r\n              </select>\r\n            </div>\r\n            {state.Issuer_selected === \"showinput\" ? (\r\n              <div class=\"Colcont\">\r\n                <h1 class=\"H1styled\">Enter issuer</h1>\r\n                <input\r\n                  class=\"InputStyled\"\r\n                  type=\"text\"\r\n                  placeholder=\"Input Issuer\"\r\n                  value={state.Issuer_filled}\r\n                  onChange={(e) => {\r\n                    State.update({ Issuer_filled: e.target.value });\r\n                    validatedInputs();\r\n                  }}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <div class=\"Colcont\">\r\n              <h1 class=\"H1styled\">Receiver</h1>\r\n              <input\r\n                class=\"InputStyled\"\r\n                type=\"text\"\r\n                placeholder=\"dokxo.near\"\r\n                value={state.Receiver}\r\n                onChange={(e) => {\r\n                  State.update({ Receiver: e.target.value });\r\n                  validatedInputs();\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex flex-column mt-2\">\r\n            <div class=\"d-flex\">\r\n              <h1 class=\"H1styled\">Metadata</h1>\r\n              <CustomCheckbox\r\n                onClick={() => {\r\n                  State.update({ ischeckselected: !state.ischeckselected });\r\n                  validatedInputs();\r\n                }}\r\n              >\r\n                {state.ischeckselected ? (\r\n                  <img\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                      \"object-fit\": \"cover\",\r\n                      \"vertical-align\": \" initial\",\r\n                    }}\r\n                    src={CheckIcon}\r\n                  />\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </CustomCheckbox>\r\n            </div>\r\n            {state.ischeckselected ? (\r\n              <div class=\"MetaCard\">\r\n                <div class=\"row  col-sm-12  mx-0  gap-1   \">\r\n                  <div class=\"Metarow\" name=\"Classid\">\r\n                    <div class=\"MetaTitles\">{\"Class id\"}</div>\r\n                    <div>\r\n                      <select\r\n                        class=\"Dropdown\"\r\n                        value={state.ClassIdSelected}\r\n                        onChange={(e) => {\r\n                          State.update({ ClassIdSelected: e.target.value });\r\n                          validatedInputs();\r\n                        }}\r\n                      >\r\n                        <option default value=\"\">\r\n                          Select token class id\r\n                        </option>\r\n                        {}\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  {/* <div class=\"Metarow\">\r\n                    {\" \"}\r\n                    <div class=\"AFDates\" name=\"AFdates\">\r\n                      <div class=\"DateContItem\">\r\n                        <div class=\"MetaTitles\">{\"Issued at\"}</div>\r\n                        <input\r\n                          class=\"FormInput\"\r\n                          type=\"date\"\r\n                          value={state.IssuedAT}\r\n                          onChange={(e) => {\r\n                            State.update({ IssuedAT: e.target.value });\r\n                            validatedInputs();\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div class=\"DateContItem\">\r\n                        <div class=\"MetaTitles\">{\"Expires at\"}</div>\r\n                        <input\r\n                          class=\"FormInput\"\r\n                          type=\"date\"\r\n                          value={state.ExpiresAt}\r\n                          onChange={(e) => {\r\n                            State.update({ ExpiresAt: e.target.value });\r\n                            validatedInputs();\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div> */}\r\n                  <div class=\"Metarow\">\r\n                    <div class=\"MetaTitles\">\r\n                      {\"Reference = link to a JSON file (eg, IPFS).\"}\r\n                    </div>\r\n                    <div>\r\n                      <input\r\n                        class=\"FormInput\"\r\n                        value={state.Reference}\r\n                        placeholder=\"Write your reference (optional)\"\r\n                        onChange={(e) => {\r\n                          State.update({ Reference: e.target.value });\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"Metarow\">\r\n                    <div class=\"MetaTitles\">\r\n                      {\"Reference hash = Base64-encoded sha256 hash of JSON.\"}\r\n                    </div>\r\n                    <div style={{ \"font-size\": \"10px\" }}>\r\n                      <input\r\n                        class=\"FormInput\"\r\n                        value={state.Reference_link}\r\n                        placeholder=\"Write your reference hash (optional)\"\r\n                        onChange={(e) => {\r\n                          State.update({ Reference_link: e.target.value });\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div class=\"Separator\"></div>\r\n            )}\r\n            <div className=\"d-flex flex-column mt-2\">\r\n              <h1 class=\"H1styled\">Memo</h1>\r\n              <input\r\n                class=\"InputStyled\"\r\n                type=\"text\"\r\n                placeholder=\"Write a memo\"\r\n                value={state.Memo}\r\n                onChange={(e) => {\r\n                  State.update({ Memo: e.target.value.substring(0, 200) });\r\n                  validatedInputs();\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"FooterForm\" name=\"Footerform\">\r\n          <div class=\"Submitcontainer\">\r\n            <SubmitBtn\r\n              disabled={state.Submitdisable}\r\n              onClick={() => {\r\n                submitProposalImproved();\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Submit{\" \"}\r\n            </SubmitBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dokxo.near/widget/FASTSBT", "fact_widget_deployments_id": "b15358a87adb79dc3d248577ff79e343", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 45}