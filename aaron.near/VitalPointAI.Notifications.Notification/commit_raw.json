{"tx_hash": "9rnwQJmS13gzfJR9zQ5yHbviTFoTSpTxCypts4hAni3r", "action_id_social": "BeSo9quCYPVBkTU7VQZx8fe6bpwarPVEdGj5ikcUuyzu-0-widget", "block_id": 104719210, "block_timestamp": "2023-11-01T22:35:31.910Z", "signer_id": "aaron.near", "widget_name": "VitalPointAI.Notifications.Notification", "source_code": "const Notification = styled.div`\r\n  display: flex;\r\n  padding: 16px 24px 16px 16px;\r\n  align-items: flex-start;\r\n  gap: 16px;\r\n  border-top: 1px solid var(--sand-light-6, #e3e3e0);\r\n\r\n  &:hover {\r\n    background: var(--sand-light-2, #f9f9f8);\r\n\r\n    & i {\r\n      color: #604cc8;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: inherit;\r\n  align-items: flex-start;\r\n  gap: 16px;\r\n  flex: 1 0 0;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n  & > i {\r\n    color: #868682;\r\n    font-size: 24px;\r\n    padding-top: 2px;\r\n  }\r\n`;\r\n\r\nconst Username = styled.span`\r\n  font: var(--text-s);\r\n  font-weight: 600;\r\n  color: var(--sand-light-12, var(--sand-light-12, #1b1b18));\r\n`;\r\n\r\nconst Action = styled.span`\r\n  font: var(--text-s);\r\n  color: #706f6c;\r\n`;\r\n\r\nconst ComponentName = styled.span`\r\n  font: var(--text-s);\r\n  font-weight: 600;\r\n  color: #604cc8;\r\n`;\r\n\r\nconst Dot = styled.span`\r\n  padding: 0 8px 0 10px;\r\n`;\r\n\r\nconst Button = styled(\"Link\")`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  padding: 8px 16px;\r\n  height: 32px;\r\n  border-radius: 100px;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  background: #fbfcfd;\r\n  border: 1px solid #d7dbdf;\r\n  color: #006adc !important;\r\n  white-space: nowrap;\r\n\r\n  &.button--primary {\r\n    width: 100%;\r\n    color: #006adc !important;\r\n\r\n    @media (max-width: 1024px) {\r\n      width: auto;\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: #ecedee;\r\n    text-decoration: none;\r\n    outline: none;\r\n  }\r\n\r\n  i {\r\n    color: #7e868c;\r\n  }\r\n\r\n  .bi-16 {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst Timestamp = styled.div`\r\n  font: var(--text-s);\r\n  color: #706f6c;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst Text = styled.div`\r\n  display: flex;\r\n  direction: columns;\r\n  padding-top: 8px;\r\n`;\r\n\r\nconst Desc = styled.span`\r\n  font: var(--text-s);\r\n  color: #706f6c;\r\n  font-style: italic;\r\n  border-left: 2px solid #e3e3e0;\r\n  padding: 0 0 0 1rem;\r\n`;\r\n\r\nconst Left = styled.div`\r\n  flex-grow: 1;\r\n  & a {\r\n    display: inline-block;\r\n  }\r\n`;\r\n\r\nconst Right = styled.div``;\r\n\r\nconst { value } = props;\r\nconst { type } = value;\r\nconst item = value?.item || {};\r\nconst path = item.path || \"\";\r\n\r\n// Build notification\r\nlet { blockHeight, accountId } = props;\r\nlet postUrl = \"\";\r\n\r\nswitch (type) {\r\n  case \"mention\":\r\n    accountId = props.initiator;\r\n    postUrl = `/near/widget/NearOrg.Notifications.CommentPost?accountId=${accountId}&blockHeight=${blockHeight}`;\r\n    break;\r\n  case \"custom\":\r\n    postUrl = `/${value.widget}?${Object.entries(value.params || {})\r\n      .map(([k, v]) => `${k}=${v}`)\r\n      .join(\"&\")}`;\r\n    break;\r\n  case \"like\":\r\n    blockHeight = item.blockHeight;\r\n    const pathAccountId = path.split(\"/\")[0];\r\n    postUrl = `/near/widget/PostPage?accountId=${pathAccountId}&blockHeight=${blockHeight}`;\r\n    break;\r\n  case \"comment\":\r\n    accountId = props.initiator;\r\n    postUrl = `/near/widget/PostPage?accountId=${accountId}&commentBlockHeight=${blockHeight}`;\r\n    break;\r\n  default:\r\n    postUrl = `/near/widget/PostPage?accountId=${accountId}&blockHeight=${blockHeight}`;\r\n}\r\n\r\nconst profile = props.profile || Social.get(`${accountId}/profile/**`, \"final\");\r\nconst profileUrl = `/near/widget/ProfilePage?accountId=${accountId}`;\r\nconst isComment = path.indexOf(\"/post/comment\") > 0 || type === \"comment\";\r\nconst isPost = !isComment && path.indexOf(\"/post/main\") > 0;\r\n\r\nlet notificationMessage = {\r\n  like: isPost ? \"liked your post\" : \"liked your comment\",\r\n  follow: \"followed you\",\r\n  unfollow: \"unfollowed you\",\r\n  comment: \"replied to your post\",\r\n  mention: \"mentioned you in their post\",\r\n  poke: \"poked you\",\r\n  custom: value.message ?? \"\",\r\n};\r\n\r\nconst actionable =\r\n  type === \"like\" ||\r\n  type === \"comment\" ||\r\n  type === \"mention\" ||\r\n  type === \"custom\";\r\n\r\n// DevGov handles their own type\r\nif (type && type.startsWith(\"devgovgigs/\")) {\r\n  return (\r\n    <Widget src=\"mob.near/widget/Notification.Item.DevGov\" props={props} />\r\n  );\r\n}\r\n\r\n// Assert is a valid type\r\nif (!(type in notificationMessage) || !notificationMessage[type]) return <></>;\r\n\r\nconst ProfileOverlay = ({ children }) => (\r\n  <Widget\r\n    src=\"near/widget/AccountProfileOverlay\"\r\n    props={{\r\n      accountId: props.accountId,\r\n      profile,\r\n      children,\r\n      placement: props.overlayPlacement,\r\n      overlayStyles: { zIndex: 1069 },\r\n    }}\r\n  />\r\n);\r\n\r\nconst iconType = {\r\n  like: <i className=\"ph ph-heart\" />,\r\n  // fork: <i className=\"ph ph-git-fork\" />,\r\n  follow: <i className=\"ph ph-user-plus\" />,\r\n  unfollow: <i className=\"ph ph-user-minus\" />,\r\n  comment: <i className=\"ph ph-share-fat\" />,\r\n  mention: <i className=\"ph ph-at\" />,\r\n  poke: <i className=\"ph ph-hand-pointing\" />,\r\n  custom: <i className=\"ph ph-\" />,\r\n};\r\n\r\nreturn (\r\n  <Notification className=\"notification-item\">\r\n    <Icon>{iconType[type]}</Icon>\r\n    <Content>\r\n      <Left>\r\n        <Link href={!props.onClick && profileUrl}>\r\n          <ProfileOverlay>\r\n            <Widget\r\n              src=\"near/widget/DIG.Avatar\"\r\n              props={{\r\n                alt: accountId,\r\n                image: profile.image,\r\n                size: \"small\",\r\n              }}\r\n            />\r\n          </ProfileOverlay>\r\n        </Link>\r\n        <Text>\r\n          <ProfileOverlay>\r\n            <div style={{ \"text-align\": \"center\" }}>\r\n              <Link href={!props.onClick && profileUrl}>\r\n                <Username>\r\n                  {profile.name || accountId.split(\".near\")[0]}\r\n                </Username>\r\n              </Link>\r\n              <Action>{notificationMessage[type]}</Action>\r\n            </div>\r\n          </ProfileOverlay>\r\n          {/*<ComponentName>{componentName}</ComponentName>*/}\r\n\r\n          <Timestamp>\r\n            <Dot>\u00b7</Dot>\r\n            {/* TODO: add title tag to show full time on hover */}\r\n            <Widget\r\n              src=\"mob.near/widget/TimeAgo@97556750\"\r\n              props={{ blockHeight: props.blockHeight }}\r\n            />\r\n          </Timestamp>\r\n        </Text>\r\n        {/* <Desc>{desc}</Desc> */}\r\n      </Left>\r\n      <Right>\r\n        {(type === \"follow\" || type === \"unfollow\") && (\r\n          <Widget\r\n            src=\"near/widget/FollowButton\"\r\n            props={{ accountId: props.accountId }}\r\n          />\r\n        )}\r\n\r\n        {type === \"poke\" && (\r\n          <Widget\r\n            src=\"near/widget/PokeButton\"\r\n            props={{\r\n              accountId: props.accountId,\r\n              back: true,\r\n              primary: true,\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {actionable && <Button href={postUrl}>View</Button>}\r\n      </Right>\r\n    </Content>\r\n  </Notification>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/aaron.near/widget/VitalPointAI.Notifications.Notification", "fact_widget_deployments_id": "238a1c11843c2c6aed071826033a700e", "inserted_timestamp": "2023-11-02T00:35:03.701Z", "modified_timestamp": "2023-11-02T00:35:03.701Z", "__row_index": 0}