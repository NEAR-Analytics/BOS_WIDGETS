{"tx_hash": "G8WZ7mr83YtPTsgHpiRbT2c6msSkjcajVMD4GXYHXdM", "action_id_social": "n7ND1RfWUZDKR3524pZYZ9S6nnHr6fBAPMPR6vWr89x-0-widget", "block_id": 96794529, "block_timestamp": "2023-07-18T23:12:50.578Z", "signer_id": "manzanal.near", "widget_name": "TokenWrapper.v2.MaticWrapper", "source_code": "const ownerId = \"manzanal.near\";\nconst tokenName = \"MATIC\";\nconst wrapTokenName = \"WMATIC\";\nconst wmaticAddress =\n  props.wmaticAddress || \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\";\nconst tokenDecimals = 18;\nconst wmaticAbiUrl =\n  props.wmaticAbiUrl ||\n  \"https://api.polygonscan.com/api?module=contract&action=getabi&address=0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270&format=raw\";\nconst wmaticAbi = fetch(wmaticAbiUrl);\n\nif (!wmaticAbi.ok) {\n  return \"Loading\";\n}\nconst wmaticAbiBody = wmaticAbi.body;\nconst signer = Ethers.provider() ? Ethers.provider().getSigner() : null;\nconst wmaticContract = new ethers.Contract(\n  wmaticAddress,\n  wmaticAbiBody,\n  signer\n);\n\nState.init({\n  signerAddress: null,\n});\n\nconst getSignerAddress = () => {\n  signer.getAddress().then((signerAddress) => {\n    State.update({ signerAddress });\n  });\n};\ngetSignerAddress();\n\nconst imgWrapTokenSvg = (\n  <svg\n    width=\"485\"\n    height=\"382\"\n    viewBox=\"0 0 485 382\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M187.763 158.848L241.91 278.932L322.5 232.475L322.561 232.451V139.464L187.763 158.848Z\"\n      fill=\"#2BBDF7\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M426.827 69.745L376.525 50.7983L322.766 46.4558V335.423L403.416 381.905L467.073 251.631L426.924 125.663L426.827 69.745Z\"\n      fill=\"#2891F9\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M421.773 46.5527L403.093 93.0219H403.069V381.953L483.732 335.484V46.5527H421.773Z\"\n      fill=\"#2BBDF7\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M403.428 0L322.766 46.5055L403.428 92.999L484.091 46.5055L403.428 0Z\"\n      fill=\"#2B6DEF\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M241.965 185.924V185.9L161.314 95.6542L0 46.4558V335.387L80.6387 381.88L103.685 221.986L161.314 232.454V232.405L241.977 278.886V185.924H241.965Z\"\n      fill=\"#2891F9\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M80.6872 0L0 46.4934L241.94 186.01L278.5 164.941L322.591 139.505L80.6872 0Z\"\n      fill=\"#2B6DEF\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M80.7035 185.92H80.6914V381.864L161.354 335.383V232.413L80.7035 185.92Z\"\n      fill=\"#2BBDF7\"\n    />\n  </svg>\n);\nconst imgTokenSvg = (\n  <svg\n    width=\"32\"\n    height=\"32\"\n    viewBox=\"0 0 32 32\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <circle fill=\"#6F41D8\" cx=\"16\" cy=\"16\" r=\"16\" />\n      <path\n        d=\"M21.092 12.693c-.369-.215-.848-.215-1.254 0l-2.879 1.654-1.955 1.078-2.879 1.653c-.369.216-.848.216-1.254 0l-2.288-1.294c-.369-.215-.627-.61-.627-1.042V12.19c0-.431.221-.826.627-1.042l2.25-1.258c.37-.216.85-.216 1.256 0l2.25 1.258c.37.216.628.611.628 1.042v1.654l1.955-1.115v-1.653a1.16 1.16 0 00-.627-1.042l-4.17-2.372c-.369-.216-.848-.216-1.254 0l-4.244 2.372A1.16 1.16 0 006 11.076v4.78c0 .432.221.827.627 1.043l4.244 2.372c.369.215.849.215 1.254 0l2.879-1.618 1.955-1.114 2.879-1.617c.369-.216.848-.216 1.254 0l2.251 1.258c.37.215.627.61.627 1.042v2.552c0 .431-.22.826-.627 1.042l-2.25 1.294c-.37.216-.85.216-1.255 0l-2.251-1.258c-.37-.216-.628-.611-.628-1.042v-1.654l-1.955 1.115v1.653c0 .431.221.827.627 1.042l4.244 2.372c.369.216.848.216 1.254 0l4.244-2.372c.369-.215.627-.61.627-1.042v-4.78a1.16 1.16 0 00-.627-1.042l-4.28-2.409z\"\n        fill=\"#FFF\"\n      />\n    </g>\n  </svg>\n);\n\nconst parseToUnitsFn = (amount) => {\n  const tokenDecimals = 18;\n  return ethers.utils.parseUnits(amount, tokenDecimals);\n};\n\nconst formatUnitsFn = (amount) => {\n  const tokenDecimals = 18;\n  return ethers.utils.formatUnits(amount, tokenDecimals);\n};\nconst isValidAmountFn = (amount) => {\n  if (!amount) return false;\n  if (isNaN(Number(amount))) return false;\n  if (amount === \"\") return false;\n  if (amount < 0) return false;\n  return true;\n};\nconst isSignedIn = () => !!state.signerAddress;\n\nconst getMaticBalance = (signerAddress, updateStateCb) => {\n  Ethers.provider()\n    .getBalance(signerAddress)\n    .then((balance) => updateStateCb(formatUnitsFn(balance)));\n};\n\nconst getWMaticBalance = (signerAddress, updateStateCb) => {\n  wmaticContract\n    .balanceOf(signerAddress)\n    .then((balance) => updateStateCb(formatUnitsFn(balance)));\n};\n\nconst wrapFn = (amountIn) => {\n  const amount = parseToUnitsFn(amountIn);\n\n  wmaticContract.deposit({ value: amount });\n};\nconst unwrapFn = (amountIn) => {\n  const amount = parseToUnitsFn(amountIn);\n\n  wmaticContract.withdraw(amount);\n};\nif (!state.signerAddress) return \"Loading...\";\nreturn (\n  <Widget\n    src={`${ownerId}/widget/TokenWrapper.v2.AbstractWrapper`}\n    props={{\n      tokenName,\n      wrapTokenName,\n      imgTokenSvg,\n      imgWrapTokenSvg,\n      getTokenBalanceFn: getMaticBalance,\n      getWrapTokenBalanceFn: getWMaticBalance,\n      parseToUnitsFn,\n      formatUnitsFn,\n      isValidAmountFn,\n      wrapFn,\n      unwrapFn,\n      isSignedIn,\n      signerAddress: state.signerAddress,\n    }}\n  />\n);\n", "metadata": {"platform": "nearpad"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/manzanal.near/widget/TokenWrapper.v2.MaticWrapper", "fact_widget_deployments_id": "55823e72ab2152d83ffc0298589a6782", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 6}