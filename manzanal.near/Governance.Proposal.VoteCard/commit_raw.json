{"tx_hash": "7FPxcQggEVk6S3vmpP25ShitVqf8UZp11nGgV6hDN5Y1", "action_id_social": "5LRj9mwRBsLxU6hwHhZwWfaxDEDyfqcngcmi6Eb3qcs7-0-widget", "block_id": 99854538, "block_timestamp": "2023-08-28T13:18:36.672Z", "signer_id": "manzanal.near", "widget_name": "Governance.Proposal.VoteCard", "source_code": "const accountId = context.accountId;\nconst authorId = props.authorId || \"manzanal.near\";\nconst contractId = props.contractId || \"mpip.meta-pool-dao.near\";\nconst META_VOTE_CONTRACT_ID = \"meta-vote.near\";\nconst GET_VP_METHOD = \"get_all_locking_positions\";\nconst proposal = props.proposal;\n\nState.init({\n  memo: \"\",\n  memoError: \"\",\n  proposalVotes: null,\n  proposalVotesAreFetched: false,\n  votingPowerYocto: null,\n  votingPower: null,\n  votingPowerIsFetched: false,\n  hasVoted: null,\n  userVote: null,\n  hasVotedIsFetched: false,\n  userVoteIsFetched: false,\n});\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0;\n  gap: 1em;\n  width: 100%;\n  padding: 1.25em 0.85em;\n  box-shadow: rgba(0, 0, 0, 0.18) 0px 2px 4px;\n  border-radius: 16px;\n  background: #ffffff;\n  & h4 {\n    font-family: \"Inter\";\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 20px;\n    color: #797777;\n  }\n`;\n\nconst VotesContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  padding: 0;\n  gap: 1em;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Heading = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0px;\n  gap: 16px;\n  width: 100%;\n\n  & div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 0px;\n    gap: 16px;\n\n    & > h2 {\n      font-family: \"FK Grotesk\";\n      font-style: normal;\n      font-weight: 700;\n      font-size: 25px;\n      line-height: 36px;\n      color: #11181c;\n    }\n\n    & > span {\n      font-family: \"Inter\";\n      font-style: normal;\n      font-weight: 500;\n      font-size: 19px;\n      line-height: 23px;\n      color: #7e868c;\n    }\n  }\n`;\n\nconst Memo = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: flex-end;\n  padding: 0px;\n  width: 75%;\n`;\n\nif (!accountId) {\n  return (\n    <Container>\n      <Heading>\n        <div>\n          <h2>Vote</h2>\n        </div>\n      </Heading>\n      <h5>You must login to vote.</h5>\n    </Container>\n  );\n}\n\nconst yoctoToNear = (amountYocto) =>\n  new Big(amountYocto).div(new Big(10).pow(24)).toFixed(0);\n\nconst isProposalVotingFinished = () =>\n  proposal.status !== \"Draft\" &&\n  proposal.status !== Active &&\n  proposal.status !== \"VotingProcess\";\n\nif (!state.proposalVotesAreFetched) {\n  Near.asyncView(\n    contractId,\n    \"get_proposal_votes\",\n    { mpip_id: proposal.mpip_id },\n    \"final\",\n    false\n  ).then((proposalVotes) =>\n    State.update({ proposalVotes, proposalVotesAreFetched: true })\n  );\n}\n\nif (!state.hasVotedIsFetched) {\n  Near.asyncView(\n    contractId,\n    \"has_voted\",\n    { mpip_id: proposal.mpip_id, voter_id: accountId },\n    \"final\",\n    false\n  ).then((hasVoted) => State.update({ hasVoted, hasVotedIsFetched: true }));\n}\n\nif (!state.votingPowerIsFetched) {\n  Near.asyncView(\n    META_VOTE_CONTRACT_ID,\n    GET_VP_METHOD,\n    {\n      voter_id: context.accountId,\n    },\n    \"final\",\n    false\n  ).then((allLockingPositions) => {\n    const votingPower = allLockingPositions.reduce(\n      (accumulator, lockingPosition) =>\n        lockingPosition.is_locked\n          ? accumulator + parseInt(lockingPosition.voting_power)\n          : accumulator,\n      0\n    );\n    const votingPowerYocto = votingPower.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n    });\n    State.update({\n      votingPower: yoctoToNear(votingPowerYocto),\n      votingPowerYocto:\n        yoctoToNear(votingPowerYocto) + \"000000000000000000000000\",\n      votingPowerIsFetched: true,\n    });\n  });\n}\n\nif (!state.userVoteIsFetched) {\n  Near.asyncView(\n    contractId,\n    \"get_my_vote\",\n    { mpip_id: proposal.mpip_id, voter_id: accountId },\n    \"final\",\n    false\n  ).then((userVote) => State.update({ userVote, userVoteIsFetched: true }));\n}\n\nif (\n  !state.proposalVotesAreFetched ||\n  !state.votingPowerIsFetched ||\n  !state.hasVotedIsFetched ||\n  !state.userVoteIsFetched\n)\n  return <>Loading...</>;\n\nconst handleVote = (vote) => {\n  // check if user already vote\n  if (state.hasVoted) {\n    if (state.userVote.vote_type == vote && !isProposalVotingFinished()) {\n      Near.call([\n        {\n          contractName: contractId,\n          methodName: \"remove_vote_proposal\",\n          args: {\n            mpip_id: props.proposal.mpip_id,\n          },\n          gas: 300000000000000,\n        },\n      ]);\n    }\n  } else {\n    Near.call([\n      {\n        contractName: contractId,\n        methodName: \"vote_proposal\",\n        args: {\n          mpip_id: props.proposal.mpip_id,\n          vote,\n          memo: state.memo,\n        },\n        gas: 300000000000000,\n      },\n    ]);\n  }\n};\n\nconst voted = (type) => {\n  return state.userVote.vote_type == type;\n};\n\nconst voteButtonText = state.hasVoted ? \"Remove Vote\" : \"Vote\";\nconst totalVotes =\n  state.proposalVotes.for_votes +\n  state.proposalVotes.againstVotes +\n  state.proposalVotes.abstainVotes;\n\nif (!state.hasVoted && parseInt(state.votingPower) <= 0) {\n  return (\n    <Container>\n      <Heading>\n        <div>\n          <h2>Vote</h2>\n        </div>\n      </Heading>\n      <h5>Not Enough Voting Power to Vote.</h5>\n    </Container>\n  );\n}\n\nif (proposal.status != \"VotingProcess\") {\n  return (\n    <Container>\n      <Heading>\n        <div>\n          <h2>Vote</h2>\n        </div>\n      </Heading>\n      <h5>Not open to voting.</h5>\n    </Container>\n  );\n}\n\nreturn (\n  <Container>\n    <Heading>\n      <div>\n        <h2>Vote</h2>\n      </div>\n    </Heading>\n    <Memo>\n      {state.hasVoted ? (\n        <h5>memo: {state.userVote.memo}</h5>\n      ) : (\n        <Widget\n          src={`${authorId}/widget/Common.Inputs.Text`}\n          props={{\n            label: \"memo\",\n            placeholder: \"Write a memo for your vote (optional)\",\n            value: state.memo,\n            onChange: (memo) => State.update({ memo }),\n            validate: () => {\n              if (state.memo.length > 40) {\n                State.update({\n                  memoError: \"Memo must be less than 40 characters\",\n                });\n                return;\n              }\n              State.update({ memoError: \"\" });\n            },\n            error: state.memoError,\n          }}\n        />\n      )}\n    </Memo>\n    <VotesContainer>\n      <Widget\n        src={`${authorId}/widget/Common.Button`}\n        props={{\n          disabled: state.hasVoted && !voted(\"For\"),\n          children: (\n            <>\n              <i class=\"bi bi-envelope-check\" />\n              {state.hasVoted && voted(\"For\") ? \"Remove Vote For\" : \"Vote For\"}\n            </>\n          ),\n          onClick: () => handleVote(\"For\"),\n          className: \"mt-2\",\n          variant: \"primary\",\n        }}\n      />\n\n      <Widget\n        src={`${authorId}/widget/Common.Button`}\n        props={{\n          disabled: state.hasVoted && !voted(\"Abstain\"),\n          children: (\n            <>\n              <i class=\"bi bi-envelope\" />\n              {state.hasVoted && voted(\"Abstain\")\n                ? \"Remove Vote Abstain\"\n                : \"Vote Abstain\"}\n            </>\n          ),\n          onClick: () => handleVote(\"Abstain\"),\n          className: \"mt-2\",\n          variant: \"primary\",\n        }}\n      />\n\n      <Widget\n        src={`${authorId}/widget/Common.Button`}\n        props={{\n          disabled: state.hasVoted && !voted(\"Against\"),\n          children: (\n            <>\n              <i class=\"bi bi-envelope-dash\" />\n              {state.hasVoted && voted(\"Against\")\n                ? \"Remove Vote Against\"\n                : \"Vote Against\"}\n            </>\n          ),\n          onClick: () => handleVote(\"Against\"),\n          className: \"mt-2\",\n          variant: \"primary\",\n        }}\n      />\n    </VotesContainer>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/manzanal.near/widget/Governance.Proposal.VoteCard", "fact_widget_deployments_id": "7d66943e8f7913f385d5791bddfac391", "inserted_timestamp": "2023-08-28T15:22:59.684Z", "modified_timestamp": "2023-08-28T15:22:59.684Z", "__row_index": 15}