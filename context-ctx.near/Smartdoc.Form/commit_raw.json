{"tx_hash": "2MXkvwhMqvPXs9Ze61UzxRGaBsfCm5oXmv9dfbvMSApz", "action_id_social": "AoCYksdev3eaGvEuMUTaKyuoky3wESJgEhAZN6zW6efY-0-widget", "block_id": 99616834, "block_timestamp": "2023-08-25T09:40:41.189Z", "signer_id": "context-ctx.near", "widget_name": "Smartdoc.Form", "source_code": null, "metadata": null, "branch": {"draft": {"": "// Styles\nconst Title = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: #345AD5; \n`;\nconst Container = styled.div`\n  position: relative;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px 40px;\n  height: auto;\n  min-height: 80px;\n  overflow: hidden;\n`;\nconst Field = styled.div`\n  margin-top: 10px;\n`;\nconst ErrorMessage = styled.div`\n  margin-top: 8px;\n  color: red;\n  font-size: 12px;\n`;\nconst SuccessMessage = styled.div`\n  margin-top: 8px;\n  color: green;\n  font-size: 12px;\n`;\n\n// States\nState.init({ form: null });\nState.init({ errorMsg: \"\", successMsg: \"\" });\nState.init({ initialized: false });\n\n/*\n * Handle input change\n */\nconst onInputChange = ({ target }) => {\n  const fieldName = target.dataset.name;\n  let value = target.value;\n  const fieldType = target.dataset.type;\n  if (fieldType === \"int\") {\n    value = parseInt(value);\n  }\n  switch (fieldType) {\n    case `integer`:\n      value = parseInt(value);\n      break;\n    case `float`:\n    case `double`:\n    case `decimal`:\n      value = parseFloat(value);\n      break;\n    default:\n      value = value.toString();\n      break;\n  }\n\n  let form = state.form !== null ? state.form : {};\n  form[fieldName] = value;\n\n  State.update({ form });\n};\n\n/*\n * Submit form\n */\nconst onSubmitForm = () => {\n  props.setLoading(true);\n  State.update({ errorMsg: \"\", successMsg: \"\" });\n  // Check network\n  if (props.network === `mainnet`) {\n    props.setLoading(false);\n    State.update({\n      errorMsg: `Mainnet is not available yet. Comming soon. Please, add this param to the URL: network=testnet`,\n    });\n    return;\n  }\n  // Check values\n  const requiredFields = props.schema.required;\n  const properties = props.schema.properties;\n  for (let propertyName of Object.keys(properties)) {\n    // const fieldType = properties[propertyName].type;\n    const isRequired = requiredFields.includes(propertyName);\n    if (isRequired && !state.form[propertyName]) {\n      props.setLoading(false);\n      State.update({ errorMsg: `${propertyName} is a required field` });\n      return;\n    }\n  }\n\n  // Send form\n  props\n    .sendForm(state.form)\n    .then((res) => {\n      props.setLoading(false);\n      if (!res.body) {\n        State.update({ errorMsg: \"Error sending form to Context\" });\n        return;\n      }\n      const response = res.body;\n      if (!response.success) {\n        State.update({ errorMsg: response.message });\n        return;\n      }\n\n      // Pay for updating the form data\n      props.donate();\n    })\n    .catch((e) => {\n      console.log(\"Error\", e);\n      State.update({ errorMsg: `Error sending form` });\n    });\n};\n\n/**\n * Get form fields\n * Building form dinamically\n */\nconst getFields = () => {\n  const indents = [];\n  if (props.schema === undefined) return indents;\n  if (props.schema === null) return indents;\n  if (Object.keys(props.schema).length === 0) return indents;\n\n  // Set form data\n  console.log(`Form > getFields > state.form`, state.form);\n  console.log(`Form > getFields > props.form`, props.form);\n  let form = {};\n  if (!state.form) {\n    if (!!props.form) {\n      form = props.form;\n      State.update({ form });\n    }\n    // setTimeout(() => {\n    //   State.update({ form });\n    // }, 100);\n  } else {\n    form = state.form;\n  }\n\n  // const additionalProperties = props.schema.additionalProperties;\n  const requiredFields = props.schema.required;\n  const properties = props.schema.properties;\n\n  for (let propertyName of Object.keys(properties)) {\n    const fieldType = properties[propertyName].type;\n    const isRequired = requiredFields.includes(propertyName);\n    indents.push(\n      <Field>\n        <label>{`${propertyName}${isRequired ? ` *` : ``}`}</label>\n        <input\n          type={getInputType(fieldType)}\n          class=\"form-control\"\n          placeholder=\"\"\n          onChange={onInputChange}\n          data-name={propertyName}\n          data-type={fieldType}\n          required={isRequired}\n          value={getInputValue(propertyName, fieldType, form)}\n        />\n      </Field>\n    );\n  }\n\n  return indents;\n};\n\n/**\n * Get input type\n */\nconst getInputType = (fieldType) => {\n  switch (fieldType) {\n    case `integer`:\n    case `float`:\n    case `double`:\n    case `decimal`:\n      return `number`;\n    default:\n      return `text`;\n  }\n};\n\n/**\n * Get input value\n */\nconst getInputValue = (propertyName, fieldType, form) => {\n  if (form[propertyName] !== undefined && form[propertyName] !== null)\n    return form[propertyName];\n  switch (fieldType) {\n    case `integer`:\n    case `float`:\n    case `double`:\n    case `decimal`:\n      return ``;\n    default:\n      return ``;\n  }\n};\n\n/**\n * Render\n */\nconst indents = [];\nconst fields = getFields();\n\nif (fields.length > 0) {\n  indents.push(fields);\n  indents.push(\n    <div class=\"container p-3 text-center\">\n      <button onClick={onSubmitForm} disabled={props.loading}>\n        Submit\n      </button>\n      {!!state.errorMsg && <ErrorMessage>{state.errorMsg}</ErrorMessage>}\n      {!!state.successMsg && (\n        <SuccessMessage>{state.successMsg}</SuccessMessage>\n      )}\n    </div>\n  );\n}\n\nreturn (\n  <>\n    <div class=\"container\">\n      <Title>My data</Title>\n      <Container>{indents}</Container>\n    </div>\n  </>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/context-ctx.near/widget/Smartdoc.Form", "fact_widget_deployments_id": "61dad5ae9721c8e1076c5df4f33a66a1", "inserted_timestamp": "2023-08-25T11:32:54.699Z", "modified_timestamp": "2023-08-25T11:32:54.699Z", "__row_index": 4}