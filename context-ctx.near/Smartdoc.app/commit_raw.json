{"tx_hash": "5Lt8a6t9eUphPBPzYpiCpn48grMuiZTKo4euFb8FFLwR", "action_id_social": "36gg24KdKHKYptEknpb1zaGAsAdE6YSopxfsJsk2ycma-0-widget", "block_id": 99616397, "block_timestamp": "2023-08-25T09:31:49.364Z", "signer_id": "context-ctx.near", "widget_name": "Smartdoc.app", "source_code": null, "metadata": null, "branch": {"draft": {"": "// Set config data\nconst configdata = {\n  core: {\n    name: `Core`,\n    schemas: {\n      human: {\n        name: `core/human#1.0.0`,\n        schema: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            avatar: { type: \"string\" },\n            website: { type: \"string\" },\n          },\n          required: [],\n          additionalProperties: false,\n        },\n      },\n      organization: {\n        name: `core/organization#1.0.0`,\n        schema: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            legalName: { type: \"string\" },\n            companyNumber: { type: \"string\" },\n            country: { type: \"string\" },\n            website: { type: \"string\" },\n            logo: { type: \"string\" },\n          },\n          required: [\"name\"],\n          additionalProperties: false,\n        },\n      },\n      project: {\n        name: `core/project#1.0.0`,\n        schema: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            description: { type: \"string\" },\n            organization: { type: \"string\" },\n            website: { type: \"string\" },\n            logo: { type: \"string\" },\n          },\n          required: [\"name\"],\n          additionalProperties: false,\n        },\n      },\n    },\n  },\n  software: {\n    name: `Software`,\n    schemas: {\n      code: {\n        name: `software/code#1.0.0`,\n        schema: {\n          type: \"object\",\n          properties: {\n            changes: { type: \"string\" },\n            codebase: { type: \"string\" },\n            major: { type: \"integer\" },\n            minor: { type: \"integer\" },\n            patch: { type: \"integer\" },\n            github: { type: \"string\" },\n          },\n          required: [\"codebase\", \"major\", \"minor\", \"patch\"],\n          additionalProperties: false,\n        },\n      },\n    },\n  },\n};\n\n// Styles\nconst NotLogged = styled.div`\n  margin-top: 20px;\n  .title {\n    font-size: 16px;\n    color: red;\n  }\n  .description {\n    margin-top: 10px;\n    font-size: 14px;\n  }\n`;\nconst AddMenuLabel = styled.div`\n  font-size: 12px;\n  font-style: italic;\n  text-decoration: underline;\n  color: #345AD5; \n  cursor: pointer;\n`;\nconst CloseMenuLabel = styled.div`\n  position: absolute;\n  top: -20px;\n  right: 5px;\n  font-size: 12px;\n  font-style: italic;\n  color: #345AD5; \n  cursor: pointer;\n`;\nconst Menu = styled.div`\n  position: relative;\n  border: 1px dashed black;\n  padding: 10px 0;\n`;\nconst MainGroupMenu = styled.div`\n\n`;\nconst SchemasMenu = styled.div`\n  margin-top: 10px;\n`;\nconst MySchemas = styled.div`\n  margin-top: 20px;\n`;\nconst Form = styled.div`\n  margin-top: 20px;\n`;\n\n// States\nState.init({ initialized: false, initialzedInitialSates: false });\nState.init({\n  network: ``,\n  ctxApiUrl: ``,\n  ctxApiKey: ``,\n  contract: ``,\n  donation: 0,\n});\nState.init({ showAddSchemas: false });\nState.init({ selectedGroup: \"\" });\nState.init({ mySchemas: [] });\nState.init({ form: null });\nState.init({\n  showDialog: false,\n  dialogTitle: ``,\n  dialogDescription: ``,\n  dialogHideButton: false,\n});\n\n/**\n * Set initial states\n */\nif (!state.setInitialStates) {\n  State.update({ setInitialStates: true });\n  setTimeout(() => {\n    console.log(\"App > setInitialStates > setTimeout!\");\n    // Set network\n    let network;\n    switch (context.networkId) {\n      case \"testnet\":\n        network = props.network === \"devnet\" ? \"devnet\" : \"testnet\";\n        break;\n      default:\n        network = \"mainnet\";\n        break;\n    }\n    // Set API & contract vars\n    let ctxApiUrl;\n    let ctxApiKey;\n    let contract;\n    switch (network) {\n      case \"devnet\":\n        ctxApiUrl = \"http://localhost:4004\";\n        ctxApiKey =\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OWMwM2U1NmE4OTc1OTBkYzhhNjUxMyIsImlhdCI6MTY4Nzk0NjIxMywiZXhwIjoxNzE5NDgyMjEzfQ.3ghbEFvwBj2Xx7jRxGS5uuOY8Rot3t5EOJau0uuy0YM\";\n        contract = \"dev-1688120938235-71660557893116\";\n        break;\n      case \"testnet\":\n        ctxApiUrl = \"https://testnet.near-bos.ctx.xyz\";\n        ctxApiKey =\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OWVhMTVhMmYzMDBjMmRkZWI3NzI5MCIsImlhdCI6MTY4ODExNzU5NSwiZXhwIjoxNzE5NjUzNTk1fQ.mwiVJCLEwmqsKSnRIKD04kwoqktEezde_x-OwYT-Nlg\";\n        contract = \"dev-1688120938235-71660557893116\";\n        break;\n      default:\n        ctxApiUrl = \"https://near-bos.ctx.xyz\";\n        ctxApiKey = \"\";\n        contract = \"\";\n        break;\n    }\n    const donation = 100000000000000000000000; // YoctoNear amount\n    // Update state vars\n    if (!!context.accountId) setLoading(true);\n    State.update({\n      network,\n      ctxApiUrl,\n      ctxApiKey,\n      contract,\n      donation,\n    });\n  }, 300);\n}\n\n/**\n * Init\n */\nif (!state.initialized && !!state.ctxApiUrl && !!context.accountId) {\n  // Get data & send the tx\n  let url = `${state.ctxApiUrl}/api/v1/smartdoc/${context.accountId}`;\n  if (!!props.transactionHashes) {\n    url += `?tx=${props.transactionHashes}`;\n  }\n  console.log(\"Fetching form\", url);\n  asyncFetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.ctxApiKey}`,\n    },\n  })\n    .then((res) => {\n      if (!res.body) {\n        console.log(\"Fetching form > res\", res);\n        State.update({\n          showDialog: true,\n          dialogTitle: null,\n          dialogDescription: `Error getting data from Context`,\n          dialogHideButton: false,\n        });\n        return;\n      }\n      const response = res.body;\n      if (!response.success) {\n        console.log(\"Fetching form > response.message\", response.message);\n        State.update({\n          showDialog: true,\n          dialogTitle: null,\n          dialogDescription: response.message,\n          dialogHideButton: false,\n        });\n        return;\n      }\n      console.log(\"Fetching form > response.data\", response.data);\n      State.update({\n        initialized: true,\n        form: response.data.data,\n        mySchemas: !!response.data.schemas\n          ? response.data.schemas.split(`,`)\n          : [],\n        showDialog: false,\n      });\n    })\n    .catch((e) => {\n      console.log(\"Error\", e);\n      State.update({\n        showDialog: true,\n        dialogTitle: null,\n        dialogDescription: `Error getting data from Context`,\n        dialogHideButton: false,\n      });\n    });\n}\n\n/**\n * Get widget owner\n */\nconst getWidgetOwner = () => {\n  return context.networkId === \"testnet\"\n    ? `context-dev.testnet`\n    : `context-near.testnet`;\n};\n\n/**\n * Get classified schemas\n */\nconst getSchemas = () => {\n  const ret = {};\n  for (let group of Object.keys(configdata)) {\n    const schemas = configdata[group].schemas;\n    for (let code of Object.keys(schemas)) {\n      const schema = schemas[code].schema;\n      ret[schemas[code].name] = schema;\n    }\n  }\n  return ret;\n};\n\n/**\n * Merge 2 objects\n *\n * @param {any} obj1\n * @param {any} obj2\n * @returns {any}\n */\nconst mergeObjects = (obj1, obj2) => {\n  Object.entries(obj2).forEach((element) => {\n    const key = element[0];\n    const value = element[1];\n    if (Array.isArray(value)) {\n      if (!obj1[key]) obj1[key] = [];\n      for (let i = 0; i < value.length; i++) {\n        if (!obj1[key].includes(value[i])) obj1[key].push(value[i]);\n      }\n    } else if (typeof value === \"object\") {\n      if (!obj1[key]) obj1[key] = {};\n      obj1[key] = mergeObjects(obj1[key], value);\n    } else {\n      obj1[key] = value;\n    }\n  });\n  return obj1;\n};\n\n/**\n * Build the final schema (merged with all)\n */\nconst buildFinalSchema = () => {\n  const data = {};\n  if (!state.mySchemas) return data;\n  const schemas = getSchemas();\n  for (let i = 0; i < state.mySchemas.length; i++) {\n    const schemaRaw = state.mySchemas[i];\n    const schema = schemas[schemaRaw];\n    if (!schema) continue;\n    data = mergeObjects(data, schema);\n  }\n  return data;\n};\n\n/**\n * Send form to ctx api\n */\nconst sendForm = (form) => {\n  console.log(`sendForm`, form, state.ctxApiUrl);\n  const url = `${state.ctxApiUrl}/api/v1/smartdoc`;\n  return asyncFetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.ctxApiKey}`,\n    },\n    body: JSON.stringify({\n      accountId: context.accountId,\n      data: form,\n      schemas: state.mySchemas,\n    }),\n  });\n};\n\n/**\n * Set loading\n */\nconst setLoading = (value) => {\n  State.update({\n    showDialog: value,\n    dialogTitle: `Loading data...`,\n    dialogDescription: `Wait a moment please. Thanks :)`,\n    dialogHideButton: true,\n  });\n};\n\n/**\n * Payment\n */\nconst donate = () => {\n  console.log(`Pay for updating the form data`);\n  Near.call(state.contract, \"donate\", {}, 0, state.donation);\n};\n\n/**\n * Render\n */\nif (!context.accountId) {\n  return (\n    <div class=\"container p-2\">\n      <NotLogged>\n        <div className=\"title\">You are not logged in!</div>\n        <div className=\"description\">\n          Please, create a new NEAR account or sign in with an existent one.\n          Thanks!\n        </div>\n      </NotLogged>\n    </div>\n  );\n}\n\nconst schemasToDisplay = !!configdata[state.selectedGroup]\n  ? configdata[state.selectedGroup].schemas\n  : {};\nconst indents = [];\n\nif (!state.showAddSchemas) {\n  indents.push(\n    <div class=\"container\">\n      <AddMenuLabel\n        onClick={() => {\n          State.update({ showAddSchemas: true });\n        }}\n      >\n        Add schema\n      </AddMenuLabel>\n    </div>\n  );\n} else {\n  indents.push(\n    <>\n      <Menu>\n        <CloseMenuLabel\n          onClick={() => {\n            State.update({ showAddSchemas: false });\n          }}\n        >\n          {`Close menu`}\n        </CloseMenuLabel>\n        <MainGroupMenu>\n          <Widget\n            src={`${getWidgetOwner()}/widget/Smartdoc.MainGroupMenu`}\n            props={{\n              data: configdata,\n              onSelect: (code) => {\n                console.log(`Selected group`, code);\n                State.update({ selectedGroup: code });\n              },\n            }}\n          />\n        </MainGroupMenu>\n        {Object.keys(schemasToDisplay).length > 0 && (\n          <SchemasMenu>\n            <Widget\n              src={`${getWidgetOwner()}/widget/Smartdoc.SchemasMenu`}\n              props={{\n                schemas: schemasToDisplay,\n                mySchemas: state.mySchemas,\n                onSelect: (code, schemaRaw) => {\n                  console.log(`Selected schema`, code, schemaRaw);\n                  const mySchemas = state.mySchemas;\n                  if (mySchemas.includes(schemaRaw)) return;\n                  mySchemas.push(schemaRaw);\n                  State.update({ mySchemas });\n                },\n              }}\n            />\n          </SchemasMenu>\n        )}\n      </Menu>\n    </>\n  );\n}\n\n// Add My schemas container\nindents.push(\n  <MySchemas>\n    <Widget\n      src={`${getWidgetOwner()}/widget/Smartdoc.MySchemas`}\n      props={{\n        schemas: state.mySchemas,\n        onDelete: (code) => {\n          const newArray = state.mySchemas.filter((item) => item !== code);\n          State.update({ mySchemas: newArray });\n        },\n      }}\n    />\n  </MySchemas>\n);\n\n// Ad form\nindents.push(\n  <Form>\n    <Widget\n      src={`${getWidgetOwner()}/widget/Smartdoc.Form`}\n      props={{\n        schema: buildFinalSchema(),\n        form: state.form,\n        network: state.network,\n        sendForm,\n        setLoading,\n        loading: state.showDialog,\n        donate,\n      }}\n    />\n  </Form>\n);\n\n// Add alert dialog\nif (state.showDialog)\n  indents.push(\n    <Widget\n      src={`${getWidgetOwner()}/widget/Smartdoc.AlertDialog`}\n      props={{\n        title: !!state.dialogTitle ? state.dialogTitle : `Oups! We\u00b4re sorry!`,\n        description: state.dialogDescription,\n        close: () => {\n          State.update({ showDialog: false });\n        },\n        hideButton: state.dialogHideButton,\n      }}\n    />\n  );\n\n// Add Context info\nif (!!state.network)\n  indents.push(\n    <Widget\n      src={`${getWidgetOwner()}/widget/Smartdoc.ContextInfo`}\n      props={{\n        network: state.network,\n      }}\n    />\n  );\n\n// Finally render\nreturn (\n  <>\n    <div class=\"container p-2\">{indents}</div>\n  </>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/context-ctx.near/widget/Smartdoc.app", "fact_widget_deployments_id": "25ce73149792a759d7acf19ec9e69c82", "inserted_timestamp": "2023-08-25T11:28:39.590Z", "modified_timestamp": "2023-08-25T11:28:39.590Z", "__row_index": 3}