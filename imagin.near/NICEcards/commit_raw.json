{"tx_hash": "FpQauhHwCK2SisE45kkKPw8gJyJFAX9KmCvQLPxduBZv", "action_id_social": "9ahwrUNdFkQkURP4oHKpQ7SJ7MPKYkYuJ8jvFwdWMnVT-0-widget", "block_id": 104421592, "block_timestamp": "2023-10-28T23:26:30.553Z", "signer_id": "imagin.near", "widget_name": "NICEcards", "source_code": "//const Flows = var ;\n//if Flows < 1 {Flows=1};\n\nconst SideBar = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nbackground: #fff;\nborder: 1px solid #eceef0;\nbox-shadow:\n0px 1px 3px rgba(16, 24, 40, 0.1),\n0px 1px 2px rgba(16, 24, 40, 0.06);\nborder-radius: 8px;\nflex-shrink: 0;\nwidth: 35%;\n`;\n\nconst Sortspace = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nbackground: #fff;\nborder: 1px solid #eceef0;\nbox-shadow:\n0px 1px 3px rgba(16, 24, 40, 0.1),\n0px 1px 2px rgba(16, 24, 40, 0.06);\nborder-radius: 8px;\nflex-shrink: 0;\nwidth: 100%;\n`;\n\nconst App = styled.div`\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nbackground: #fff;\nborder: 1px solid #eceef0;\nbox-shadow:\n0px 1px 3px rgba(16, 24, 40, 0.1),\n0px 1px 2px rgba(16, 24, 40, 0.06);\nborder-radius: 8px;\nflex-shrink: 0;\nwidth: 100%;\n`;\n\nconst CardContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nbackground: #fff;\nborder: 1px solid #eceef0;\nbox-shadow:\n0px 1px 3px rgba(16, 24, 40, 0.1),\n0px 1px 2px rgba(16, 24, 40, 0.06);\nborder-radius: 8px;\nflex-shrink: 0;\nwidth: 30%;\n`;\n\nconst CardHeader = styled.div`\ndisplay: ${({ show }) => (show ? \"flex\" : \"none\")};\nflex-direction: row;\njustify-content: center;\nalign-items: center;\npadding: 0.5em 0;\ngap: 0.675em;\nbackground: #fff9ed;\nflex: none;\norder: 0;\nalign-self: stretch;\nflex-grow: 0;\n`;\n\nconst CardBody = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: flex-start;\njustify-content: space-between;\npadding: 1.5em 1.5em 1em;\ngap: 0.675em;\nflex: none;\norder: 0;\nalign-self: stretch;\nflex-grow: 1;\n`;\n\nconst CardFooter = styled.div`\ndisplay: flex;\nflex-direction: row;\nalign-items: flex-start;\npadding: 1.5em;\ngap: 1em;\nborder-top: 1px solid #eceef0;\nflex: none;\norder: 1;\nalign-self: stretch;\nflex-grow: 0;\nflex-shrink: 1;\n`;\n\nconst Card = ({ description, footer }) => {\n  return (\n    <CardContainer>\n      <CardHeader show={!!props.header}>{header}</CardHeader>\n      <CardBody>{description}</CardBody>\n      {footer ? <CardFooter>{footer}</CardFooter> : <></>}\n    </CardContainer>\n  );\n};\n\nconst [cards, setCards] = useState([]);\nconst [newCardDescription, setNewCardDescription] = useState(\"\");\nconst [searchTerm, setSearchTerm] = useState(\"\");\nconst [sortByDescription, setSortByDescription] = useState(false);\n\n// State to hold the link input\nconst [newLink, setNewLink] = useState(\"\");\n\nconst addCard = () => {\n  if (newCardDescription.trim() === \"\") {\n    return;\n  }\n  const newCard = {\n    id: Date.now(),\n    description: newCardDescription,\n  };\n  setCards([...cards, newCard]);\n  setNewCardDescription(\"\");\n};\n\n// Function to add a card based on the link input\nconst addCardFromLink = () => {\n  if (newLink.trim() === \"\") {\n    return;\n  }\n  const newCard = {\n    id: Date.now(),\n    description: newLink, // Use the link as the description\n    isLink: true, // Add a flag to indicate it's a link card\n  };\n  setCards([...cards, newCard]);\n  setNewLink(\"\");\n};\n\nconst deleteCard = (id) => {\n  const updatedCards = cards.filter((card) => card.id !== id);\n  setCards(updatedCards);\n};\n\nconst toggleSort = () => {\n  setSortByDescription(!sortByDescription);\n};\n\nconst sortedCards = sortByDescription\n  ? [...cards]\n      .filter((card) =>\n        card.description.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n      .sort((a, b) => a.description.localeCompare(b.description))\n  : cards;\n\nreturn (\n  <App>\n    <SideBar>\n      <h1>NICE Form</h1>\n      <div>\n        {/* Input for adding a new link */}\n        <input\n          type=\"text\"\n          placeholder=\"Link\"\n          value={newLink}\n          onChange={(e) => setNewLink(e.target.value)}\n        />\n        <button onClick={addCardFromLink}>Add Link Card</button>\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Description\"\n        value={newCardDescription}\n        onChange={(e) => setNewCardDescription(e.target.value)}\n      />\n      <button onClick={addCard}>Add Card</button>\n    </SideBar>\n    <Sortspace>\n      <button onClick={toggleSort}>\n        {sortByDescription ? \"Sort by ID\" : \"Sort by Description\"}\n      </button>\n      <input\n        type=\"text\"\n        placeholder=\"Search by Description\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n      <div className=\"card-space\">\n        {sortedCards.map((card) => (\n          <Card\n            key={card.id}\n            description={card.description}\n            isLink={card.isLink} // Pass the isLink flag to the Card component\n            onDelete={() => deleteCard(card.id)}\n          />\n        ))}\n      </div>\n    </Sortspace>\n  </App>\n);\n\n//Still a WIP, but will allow user to populate a set of cards individually or from an array of descriptions, then search and sort the set by attributes of the linked objects.\n//based on selected sort option, cards will then self-sort into the selected number of Flows (columns), and be displayed with a vertical heirarchy based on the selected attribute.\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/imagin.near/widget/NICEcards", "fact_widget_deployments_id": "14f279699d11a52ac7f7b14b0994cfcf", "inserted_timestamp": "2023-10-29T01:06:58.014Z", "modified_timestamp": "2023-10-29T01:06:58.014Z", "__row_index": 1}