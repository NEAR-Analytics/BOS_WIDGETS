{"tx_hash": "J83FBJYyTjbBxrZWd64MsGCDi2dn6c34AruBFy1tywG6", "action_id_social": "h2c9PNNif1NnhE649tLe1H5o9MBERXAApV9HbNe2zXe-0-widget", "block_id": 113644058, "block_timestamp": "2024-02-26T21:51:48.906Z", "signer_id": "xvii.near", "widget_name": "RegisteredStudents", "source_code": "// Initialize variables with default values or from props\r\nconst limit = 20;\r\nconst series = props.series ?? \"496\";\r\nconst title = props.title ?? \"Total\";\r\nconst showHeader = props.showHeader ?? true;\r\nconst showImage = props.showImage ?? false;\r\nconst daoId = props.daoId ?? \"research-collective.sputnik-dao.near\";\r\n\r\n// Initialize state\r\nState.init({\r\n  offset: 0,\r\n  nftHolders: [],\r\n  daoMembers: [],\r\n});\r\n\r\n// Function to fetch NFT holders\r\nfunction fetchNftHolders() {\r\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"mb-api-key\": \"omni-site\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-hasura-role\": \"anonymous\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: `\r\n          query MyQuery {\r\n            mb_views_nft_tokens(\r\n                limit: ${limit},\r\n                offset: ${state.offset},\r\n                where: { \r\n                  nft_contract_id: { _eq: \"mint.sharddog.near\" }, \r\n                  token_id: {_regex: \"^${series}:\", _neq: \"496:1\"} \r\n                },\r\n                order_by: {minted_timestamp: desc}\r\n            ) {\r\n              owner\r\n            }\r\n          }\r\n        `,\r\n    }),\r\n  }).then((res) => {\r\n    if (res.ok) {\r\n      const newNftHolders = res.body.data.mb_views_nft_tokens.map(\r\n        (token) => token.owner\r\n      );\r\n      const uniqueNewNftHolders = newNftHolders.filter(\r\n        (owner) => !state.nftHolders.includes(owner)\r\n      ); // Filter out duplicates\r\n      State.update({\r\n        nftHolders: [...state.nftHolders, ...uniqueNewNftHolders],\r\n        offset: state.offset + limit,\r\n      });\r\n      fetchDaoMembers(); // Fetch DAO members after fetching NFT holders\r\n    }\r\n  });\r\n}\r\n\r\n// Function to fetch DAO members\r\nfunction fetchDaoMembers() {\r\n  const policy = Near.view(daoId, \"get_policy\");\r\n  if (policy) {\r\n    const groups = policy.roles\r\n      .filter((role) => role.kind.Group)\r\n      .map((role) => ({\r\n        members: role.kind.Group,\r\n      }));\r\n\r\n    const daoMembers = groups.flatMap((group) => group.members);\r\n    const uniqueDaoMembers = daoMembers.filter(\r\n      (member) => !state.daoMembers.includes(member)\r\n    ); // Filter out duplicates\r\n\r\n    State.update({\r\n      daoMembers: [...state.daoMembers, ...uniqueDaoMembers],\r\n    });\r\n  }\r\n}\r\n\r\n// Fetch NFT holders\r\nfetchNftHolders();\r\n\r\n// Function to display each NFT\r\nfunction Sharddog({ owner }) {\r\n  const size = \"100px\";\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm-3\">\r\n        {showImage && (\r\n          <Widget\r\n            src=\"mob.near/widget/Image\"\r\n            props={{\r\n              image: {\r\n                url: `https://storage.googleapis.com/mintbase-files/${series}/images/${owner}.png`,\r\n              },\r\n              style: {\r\n                width: size,\r\n                height: size,\r\n                objectFit: \"cover\",\r\n                minWidth: size,\r\n                minHeight: size,\r\n                maxWidth: size,\r\n                maxHeight: size,\r\n                overflowWrap: \"break-word\",\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"col-sm-12\">\r\n        {state.daoMembers.includes(owner) && (\r\n          <Widget\r\n            src=\"ndcplug.near/widget/ProfileCard.AddToDAO\"\r\n            props={{ accountId: owner }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Final rendering\r\nreturn (\r\n  <>\r\n    {showHeader && (\r\n      <h1 style={{ marginLeft: \"20px\" }}>\r\n        {title}:{\" \"}\r\n        {\r\n          state.nftHolders.filter((owner) => state.daoMembers.includes(owner))\r\n            .length\r\n        }\r\n      </h1>\r\n    )}\r\n\r\n    {state.nftHolders.map((owner, index) => (\r\n      <Sharddog key={index} owner={owner} />\r\n    ))}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/xvii.near/widget/RegisteredStudents", "fact_widget_deployments_id": "cff01c34f38659a4908829a3f791febe", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}