{"tx_hash": "DNRyj39gZu2Es7WUvu6BFWuAQGoEAX7sHn1aiuU1fFgM", "action_id_social": "BvQQRa4r9s2srJ4zjUHUf4BoEYUBekxptLCadYTfZt1V-0-widget", "block_id": 100686735, "block_timestamp": "2023-09-08T20:41:39.867Z", "signer_id": "xvii.near", "widget_name": "BOSHACKS.Members.ApprovedHackers", "source_code": "const daoId = props.daoId ?? \"research-collective.sputnik-dao.near\";\n\nState.init({\n  filterByRole: \"boshacks\",\n});\n\nconst processPolicy = (policy) => {\n  const obj = {\n    policy,\n    users: {},\n    roles: {},\n    everyone: {},\n  };\n  policy.roles.forEach((role) => {\n    if (role.kind === \"Everyone\") {\n      obj.everyone = role;\n    }\n    if (role.kind.Group) {\n      if (!obj.roles[role.name]) {\n        obj.roles[role.name] = role;\n      }\n      role.kind.Group.forEach((user) => {\n        if (!obj.users[user]) {\n          obj.users[user] = [];\n        }\n\n        obj.users[user].push(role.name);\n      });\n    }\n  });\n\n  return obj;\n};\n\nconst policy = useCache(\n  () =>\n    Near.asyncView(daoId, \"get_policy\").then((policy) => processPolicy(policy)),\n  daoId + \"-policy\",\n  { subscribe: false }\n);\n\nif (policy === null) return \"\";\n\nconst Wrapper = styled.div`\n  .userRow {\n    width: 100%;\n    @media screen and (min-width: 600px) {\n      width: calc(50% - 1rem);\n    }\n    @media screen and (min-width: 1400px) {\n      width: calc(33% - 1rem);\n    }\n  }\n`;\n\nconst renderUserRow = (user, roles, i) => {\n  return (\n    <div key={i} className=\"ndc-card ratio ratio-1x1 userRow\">\n      <div className=\" d-flex flex-column p-4\">\n        <Widget\n          src=\"nui.sking.near/widget/Element.User\"\n          props={{\n            accountId: user,\n            options: {\n              showHumanBadge: true,\n              showImage: true,\n              showSocialName: true,\n            },\n          }}\n        />\n        <div className=\"d-flex gap-1 mt-3 flex-wrap mb-3\">\n          {roles.map((role, i) => {\n            return (\n              <Widget\n                src=\"nui.sking.near/widget/Input.Button\"\n                props={{\n                  children: role,\n                  size: \"sm\",\n                  variant: \"default\",\n                  className: \"text-capitalize\",\n                }}\n                key={i}\n              />\n            );\n          })}\n        </div>\n        <div className=\"d-flex flex-column gap-2 mt-auto flex-wrap w-100\">\n          <Widget\n            src=\"nui.sking.near/widget/Social.FollowButton\"\n            props={{\n              accountId: user,\n              size: \"sm\",\n              className: \"w-100\",\n            }}\n          />\n          <Widget\n            src=\"nui.sking.near/widget/Input.Button\"\n            props={{\n              children: \"Propose to Mint SBT\",\n              size: \"sm\",\n              variant: [\"secondary\", \"outline\"],\n              className: \"w-100\",\n            }}\n          />\n          {isUserAllowedTo(\n            context.accountId,\n            \"remove_member_from_role\",\n            \"AddProposal\"\n          ) && (\n            <Widget\n              src=\"nui.sking.near/widget/Layout.Modal\"\n              props={{\n                toggle: (\n                  <Widget\n                    src=\"nui.sking.near/widget/Input.Button\"\n                    props={{\n                      children: \"Propose to Remove\",\n                      size: \"sm\",\n                      variant: [\"danger\", \"outline\"],\n                      className: \"w-100\",\n                    }}\n                  />\n                ),\n                content: (\n                  <div className=\"ndc-card p-4\">\n                    <Widget\n                      src=\"nui.sking.near/widget/Input.Select\"\n                      props={{\n                        label: \"Propose to remove from role:\",\n                        options: roles.map((r) => {\n                          return {\n                            title: r,\n                            value: r,\n                          };\n                        }),\n                        onChange: (v) => State.update({ removeFromRole: v }),\n                        value: state.removeFromRole,\n                      }}\n                    />\n                    <Widget\n                      src=\"nui.sking.near/widget/Input.Button\"\n                      props={{\n                        children: \"Propose to Remove\",\n                        size: \"sm\",\n                        variant: [\"danger\"],\n                        className: \"w-100\",\n                        onClick: () =>\n                          onRemoveUserProposal(user, state.removeFromRole),\n                      }}\n                    />\n                  </div>\n                ),\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderGroups = () => {\n  return (\n    <div className=\"d-flex gap-2 flex-wrap\">\n      <Widget\n        src=\"nui.sking.near/widget/Input.Button\"\n        props={{\n          children: `all (${Object.keys(policy.users).length})`,\n          size: \"sm\",\n          variant: !state.filterByRole ? \"primary\" : \"default\",\n          className: \"text-capitalize\",\n          onClick: () =>\n            State.update({\n              filterByRole: null,\n            }),\n        }}\n        key={i}\n      />\n      {Object.keys(policy.roles).map((role, i) => {\n        return (\n          <Widget\n            src=\"nui.sking.near/widget/Input.Button\"\n            props={{\n              children: `${role} (${policy.roles[role].kind.Group.length})`,\n              size: \"sm\",\n              variant: state.filterByRole === role ? \"primary\" : \"default\",\n              className: \"text-capitalize\",\n              onClick: () =>\n                State.update({\n                  filterByRole: role,\n                }),\n            }}\n            key={i}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst users = !state.filterByRole\n  ? Object.keys(policy.users)\n  : Object.keys(policy.users).filter((user) =>\n      policy.users[user].includes(state.filterByRole)\n    );\n\nreturn (\n  <Wrapper className=\"d-flex flex-column\">\n    <div className=\"ndc-card p-4\">\n      <h4 className=\" text-capitalize\">Students ({users.length})</h4>\n    </div>\n    <div className=\"d-flex gap-1 flex-wrap\">\n      {users.map((user, i) => (\n        <Widget\n          src=\"xvii.near/widget/ProfileCard.mintNFT\"\n          props={{\n            accountId: user,\n          }}\n        />\n      ))}\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/xvii.near/widget/BOSHACKS.Members.ApprovedHackers", "fact_widget_deployments_id": "6b6f766e6fb760bc9eb583458fd6efd8", "inserted_timestamp": "2023-09-08T22:36:33.262Z", "modified_timestamp": "2023-09-08T22:36:33.262Z", "__row_index": 0}