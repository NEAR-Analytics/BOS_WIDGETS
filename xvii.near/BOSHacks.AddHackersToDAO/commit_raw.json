{"tx_hash": "KgPQFDgVhp6MiiEVqVWsTU8kpudwNmiDiv8WuiSNtCm", "action_id_social": "2a7k7YwDFbGgQKcpnwKZXqnjPbW8dNAyk388dpCsKC4a-0-widget", "block_id": 117602576, "block_timestamp": "2024-04-25T15:56:05.903Z", "signer_id": "xvii.near", "widget_name": "BOSHacks.AddHackersToDAO", "source_code": "// Initialize variables with default values or from props\r\nconst limit = 20;\r\nconst series = props.series ?? \"496\";\r\nconst title = props.title ?? \"Total\";\r\nconst showHeader = props.showHeader ?? true;\r\nconst showImage = props.showImage ?? false;\r\n\r\n// Initialize state\r\nState.init({\r\n  offset: 0,\r\n  tokens: [],\r\n  hasMore: true,\r\n});\r\n\r\nlet isFetching = false; // Lock variable to prevent simultaneous fetches\r\n\r\n// Function to fetch tokens\r\nfunction fetchTokens() {\r\n  if (isFetching || !state.hasMore) return; // Exit if a fetch is already in progress or no more tokens to fetch\r\n  isFetching = true; // Set lock to true\r\n\r\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"mb-api-key\": \"omni-site\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-hasura-role\": \"anonymous\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: `\r\n          query MyQuery {\r\n            mb_views_nft_tokens(\r\n                limit: ${limit},\r\n                offset: ${state.offset},\r\n                where: { \r\n                  nft_contract_id: { _eq: \"mint.sharddog.near\" }, \r\n                  token_id: {_regex: \"^${series}:\", _neq: \"496:1\"} \r\n                },\r\n                order_by: {minted_timestamp: desc}\r\n            ) {\r\n              token_id\r\n              media\r\n              owner\r\n            }\r\n          }\r\n        `,\r\n    }),\r\n  }).then((res) => {\r\n    isFetching = false; // Release lock\r\n    if (res.ok) {\r\n      const newTokens = res.body.data.mb_views_nft_tokens;\r\n\r\n      if (newTokens.length > 0) {\r\n        State.update({\r\n          tokens: [...state.tokens, ...newTokens],\r\n          offset: state.offset + limit,\r\n          hasMore: true,\r\n        });\r\n      } else {\r\n        State.update({\r\n          hasMore: false,\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Function to display each NFT\r\nfunction Sharddog({ owner, media }) {\r\n  const size = \"100px\";\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm-3\">\r\n        {showImage && (\r\n          <Widget\r\n            src=\"mob.near/widget/Image\"\r\n            props={{\r\n              image: { url: media },\r\n              style: {\r\n                width: size,\r\n                height: size,\r\n                objectFit: \"cover\",\r\n                minWidth: size,\r\n                minHeight: size,\r\n                maxWidth: size,\r\n                maxHeight: size,\r\n                overflowWrap: \"break-word\",\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"col-sm-12\">\r\n        <Widget\r\n          src=\"ndcplug.near/widget/ProfileCard.AddToDAO\"\r\n          props={{ accountId: owner }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst size = \"144px\";\r\n\r\nconst Grid = styled.div`\r\n  display: row;\r\n`;\r\n\r\n// Loader to display while fetching data\r\nconst loader = (\r\n  <div className=\"loader\" key={\"loader\"}>\r\n    <span\r\n      className=\"spinner-grow spinner-grow-sm me-1\"\r\n      role=\"status\"\r\n      aria-hidden=\"true\"\r\n    />\r\n    Loading ...\r\n  </div>\r\n);\r\n\r\n// Extract \"n\" from the first fetched token's ID and subtract 1\r\nconst total =\r\n  state.tokens.length > 0\r\n    ? parseInt(state.tokens[0].token_id.split(\":\")[1]) - 1\r\n    : 0;\r\n\r\n// Final rendering\r\nreturn (\r\n  <>\r\n    {showHeader && (\r\n      <h1 style={{ marginLeft: \"20px\" }}>\r\n        {title}: {total}\r\n      </h1>\r\n    )}\r\n\r\n    <InfiniteScroll\r\n      pageStart={0}\r\n      loadMore={fetchTokens}\r\n      hasMore={state.hasMore}\r\n      loader={loader}\r\n    >\r\n      <Grid>\r\n        {state.tokens?.map((it, index) => (\r\n          <Sharddog key={index} owner={it.owner} media={it.media} />\r\n        ))}\r\n      </Grid>\r\n    </InfiniteScroll>\r\n  </>\r\n);\r\n", "metadata": {"fork_of": "xvii.near/widget/BOSHacks.AddHackersToDAO@113641802"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/xvii.near/widget/BOSHacks.AddHackersToDAO", "fact_widget_deployments_id": "001fd007971270c6901b726fd6f415ef", "inserted_timestamp": "2024-05-02T18:57:30.123Z", "modified_timestamp": "2024-05-02T18:57:30.123Z", "__row_index": 1}