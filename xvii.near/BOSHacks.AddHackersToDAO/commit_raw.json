{"tx_hash": "86M75g3GDKLmh5BANvQgMhDHk6Sh3AJ29JDVZNwxV9Ny", "action_id_social": "53VFP9p8MPASjQnriWUr4ytujTU689s5Hve8VCCTRCCD-0-widget", "block_id": 101479002, "block_timestamp": "2023-09-19T13:51:53.462Z", "signer_id": "xvii.near", "widget_name": "BOSHacks.AddHackersToDAO", "source_code": "// Initialize variables with default values or from props\nconst limit = 20;\nconst series = props.series ?? \"214\";\nconst title = props.title ?? \"Total\";\nconst showHeader = props.showHeader ?? true;\nconst showImage = props.showImage ?? false;\n\n// Initialize state\nState.init({\n  offset: 0,\n  tokens: [],\n  hasMore: true,\n});\n\nlet isFetching = false; // Lock variable to prevent simultaneous fetches\n\n// Function to fetch tokens\nfunction fetchTokens() {\n  if (isFetching) return; // Exit if a fetch is already in progress\n  isFetching = true; // Set lock to true\n\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n            mb_views_nft_tokens(\n                limit: ${limit},\n                offset: ${state.offset},\n                where: { \n                  nft_contract_id: { _eq: \"mint.sharddog.near\" }, \n                  token_id: {_regex: \"^${series}:\", _neq: \"214:1\"} \n                },\n                order_by: {minted_timestamp: desc}\n            ) {\n              media\n              owner\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    isFetching = false; // Release lock\n    if (res.ok) {\n      const newTokens = res.body.data.mb_views_nft_tokens;\n\n      // Remove duplicates before appending\n      const uniqueNewTokens = newTokens.filter(\n        (newToken) =>\n          !state.tokens.some(\n            (existingToken) =>\n              existingToken.owner === newToken.owner &&\n              existingToken.media === newToken.media\n          )\n      );\n\n      if (uniqueNewTokens.length > 0) {\n        State.update({\n          tokens: [...state.tokens, ...uniqueNewTokens],\n          offset: state.offset + limit,\n          hasMore: true,\n        });\n      } else {\n        State.update({\n          hasMore: false,\n        });\n      }\n    }\n  });\n}\n\n// Function to display each NFT\nfunction Sharddog({ owner, media }) {\n  const size = \"100px\";\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-3\">\n        {showImage && (\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: { url: media },\n              style: {\n                width: size,\n                height: size,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n              },\n            }}\n          />\n        )}\n      </div>\n      <div className=\"col-sm-12\">\n        <Widget\n          src=\"ndcplug.near/widget/ProfileCard.AddToDAO\"\n          props={{ accountId: owner }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst size = \"144px\";\n\nconst Grid = styled.div`\n  display: row;\n`;\n\n// Loader to display while fetching data\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\n\n// Final rendering\nreturn (\n  <>\n    {showHeader && (\n      <h1 style={{ marginLeft: \"20px\" }}>\n        {title}: {state.tokens.length}\n      </h1>\n    )}\n\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={fetchTokens}\n      hasMore={state.hasMore}\n      loader={loader}\n    >\n      <Grid>\n        {state.tokens?.map((it, index) => (\n          <Sharddog key={index} owner={it.owner} media={it.media} />\n        ))}\n      </Grid>\n    </InfiniteScroll>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/xvii.near/widget/BOSHacks.AddHackersToDAO", "fact_widget_deployments_id": "85a19d82c6b9994a0029161d8c4afd3a", "inserted_timestamp": "2023-09-19T15:41:45.959Z", "modified_timestamp": "2023-09-19T15:41:45.959Z", "__row_index": 0}