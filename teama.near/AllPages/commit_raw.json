{"tx_hash": "HrTbcUD7Ce9awCLizgcn24ArAzeToFdBnryW4KpN9q35", "action_id_social": "EHmLCcq5V8iSCTR7YnAcmynAUUwEDHsuvRoiyxUktcrC-0-widget", "block_id": 108321666, "block_timestamp": "2023-12-19T10:12:35.633Z", "signer_id": "teama.near", "widget_name": "AllPages", "source_code": "State.init({\r\n  selectedTab: \"home\",\r\n  pagePostId: 0,\r\n  postIdCounter: 0,\r\n  commentCounter: 0,\r\n});\r\n\r\nconst abi = fetch(\r\n  `https://gist.githubusercontent.com/idea2547/2e993b25c45e150d14d1e0077de47e6d/raw/337986ada07a870838a6a977f6d48176fb995353/gistfile1.txt`\r\n);\r\n\r\nconst TutorContract = new ethers.Contract(\r\n  \"0x1D7098360A9e77A58C4D38df9261335bD74d44d5\",\r\n  abi.body,\r\n  Ethers.provider().getSigner()\r\n);\r\n\r\nif (state.sender == undefined && Ethers.provider()) {\r\n  const receiver = Ethers.provider()\r\n    .send(\"eth_requestAccounts\", [])\r\n    .then((accounts) => {\r\n      if (accounts.length) {\r\n        State.update({ sender: accounts[0] });\r\n      }\r\n    });\r\n  State.update({ postNumber: `${receiver}` });\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((chainIdData) => {\r\n      if (chainIdData?.chainId) {\r\n        State.update({ chainId: chainIdData.chainId });\r\n      }\r\n    });\r\n}\r\n\r\nconst handleAllPostClick = () => {\r\n  fetchAllPost();\r\n  State.update({\r\n    selectedTab: \"allPost\",\r\n  });\r\n};\r\n\r\nconst handleCreatePostClick = () => {\r\n  State.update({\r\n    selectedTab: \"createPost\",\r\n  });\r\n};\r\n\r\nconst handleHomeClick = () => {\r\n  State.update({\r\n    selectedTab: \"home\",\r\n  });\r\n};\r\n\r\nconst handleMyPostClick = () => {\r\n  fetchMyPost();\r\n  State.update({\r\n    selectedTab: \"myPost\",\r\n    pagePostId: postId,\r\n  });\r\n};\r\n\r\nconst handleViewClick = (postId) => {\r\n  fetchComments(postId);\r\n  State.update({\r\n    selectedTab: \"viewPost\",\r\n    pagePostId: postId,\r\n  });\r\n  console.log(\"ppid\", pagePostId);\r\n};\r\n\r\nTutorContract.postIdCounter().then((result) => {\r\n  State.update({ postIdCounter: Big(result).toNumber() });\r\n});\r\n\r\nTutorContract.commentIdCounter().then((result) => {\r\n  State.update({ commentCounter: Big(result).toNumber() });\r\n});\r\n\r\nconst pageStyle = {\r\n  fontFamily: \"Verdana , san-serif\", // Example font family\r\n  backgroundColor: \"#FFFFFF\", // Example background color\r\n  padding: \"4%\", // Example padding\r\n  color: \"#000\", // Example text color\r\n  minHeight: \"100vh\",\r\n};\r\n\r\nconst boxStyle = {\r\n  padding: \"15px\",\r\n  margin: \"0px\",\r\n  display: \"inline-block\",\r\n  backgroundColor: \"#0D1282\",\r\n  color: \"#fff\",\r\n  cursor: \"pointer\",\r\n  float: \"left\",\r\n  display: \"block\",\r\n};\r\n\r\nconst myPostBoxStyle = {\r\n  ...boxStyle,\r\n  backgroundColor: \"#fff\",\r\n};\r\n\r\nconst navbarContainerStyle = {\r\n  margin: \"0px\",\r\n  display: \"flex\",\r\n  backgroundColor: \"#0D1282\",\r\n  fontFamily: \"Verdana , san-serif\",\r\n};\r\n\r\nconst heapHeapHoorayBoxStyle = {\r\n  ...boxStyle,\r\n  fontFamily: \"Verdana , sans-serif\", // Different background color for \"Heapheap Hooray\"\r\n  fontSize: \"20px\",\r\n};\r\n\r\nconst textA = () => {\r\n  const [commentContent, setCommentContent] = useState(\"\");\r\n  console.log(commentContent);\r\n  const handleComment = () => {\r\n    try {\r\n      TutorContract.createComment(state.postId, commentContent).then(\r\n        (transactionHash) => {\r\n          console.log(transactionHash);\r\n        }\r\n      );\r\n      setCommentContent(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error creating post:\", error.message);\r\n    }\r\n  };\r\n  return (\r\n    <div class=\"comments-section\" style={{ marginTop: \"5%\" }}>\r\n      <div class=\"mb-3\">\r\n        <label class=\"form-label\">Your Comment:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          placeholder=\" Share your though\"\r\n          rows=\"4\"\r\n          style={{ width: \"100%\", fontSize: \"15px\" }}\r\n          value={commentContent}\r\n          onChange={(e) => setCommentContent(e.target.value)}\r\n          required\r\n        ></textarea>\r\n      </div>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn btn-primary\"\r\n        style={{\r\n          marginLeft: \"auto\",\r\n          display: \"block\",\r\n          backgroundColor: \"#0D1282\",\r\n          color: \"white\",\r\n        }}\r\n        onClick={() => handleComment()}\r\n      >\r\n        Submit Comment\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst [posts, setPosts] = useState([]);\r\n\r\nconst fetchAllPost = () => {\r\n  const fetchData = () => {\r\n    try {\r\n      console.log(\"spicsc\", postIdCounter);\r\n      const fetchedPosts = [];\r\n      for (let i = 0; i <= state.postIdCounter; i++) {\r\n        TutorContract.posts([i]).then((result) => {\r\n          console.log(result);\r\n          State.update({});\r\n          console.log(\"-----------------\");\r\n          let post = {\r\n            title: result[2],\r\n            votingPoints: Big(result[3]).toNumber(),\r\n            author: result[0],\r\n            postId: Big(result[4]).toNumber(),\r\n          };\r\n          console.log(post);\r\n          fetchedPosts.push(post);\r\n        });\r\n      }\r\n\r\n      setPosts(fetchedPosts);\r\n      console.log(fetchedPosts);\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts from the contract:\", error);\r\n    }\r\n  };\r\n\r\n  fetchData();\r\n};\r\n\r\nconst fetchMyPost = () => {\r\n  const fetchData = () => {\r\n    try {\r\n      const fetchedPosts = [];\r\n      for (let i = 0; i <= state.postIdCounter; i++) {\r\n        TutorContract.posts([i]).then((result) => {\r\n          console.log(result);\r\n          State.update({});\r\n          console.log(\"-----------------\");\r\n          if (result[0].toLowerCase() == state.sender.toLowerCase()) {\r\n            let post = {\r\n              title: result[2],\r\n              votingPoints: Big(result[3]).toNumber(),\r\n              author: result[0],\r\n              postId: Big(result[4]).toNumber(),\r\n            };\r\n            console.log(post);\r\n            fetchedPosts.push(post);\r\n          }\r\n        });\r\n      }\r\n      setPosts(fetchedPosts);\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts from the contract:\", error);\r\n    }\r\n  };\r\n\r\n  fetchData();\r\n};\r\n\r\nconst [commentData, setCommentData] = useState([]);\r\n\r\nconst fetchComments = (postId) => {\r\n  const fetchData = () => {\r\n    try {\r\n      const fetchedComments = [];\r\n      for (let i = 0; i <= state.commentCounter; i++) {\r\n        TutorContract.comments([i]).then((result) => {\r\n          console.log(result);\r\n          State.update({});\r\n          console.log(\"-----------------\");\r\n          if (Big(result[2]).toNumber() == postId) {\r\n            let com = {\r\n              comment: result[1],\r\n              votingPoints: Big(result[3]).toNumber(),\r\n              author: result[0],\r\n              commentId: Big(result[4]).toNumber(),\r\n            };\r\n            console.log(com);\r\n            fetchedComments.push(com);\r\n          }\r\n        });\r\n      }\r\n\r\n      setCommentData(fetchedComments);\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts from the contract:\", error);\r\n    }\r\n  };\r\n\r\n  fetchData();\r\n};\r\n\r\nconst Post = ({ post }) => {\r\n  const postBoxStyle = {\r\n    width: \"97%\", // Adjust the width as needed\r\n    margin: \"0px\",\r\n    marginLeft: \"1%\",\r\n    padding: \"10px\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    border: \"1px solid transparent\", // Transparent main border\r\n    borderBottom: \"1px solid #ccc\", // Visible right border\r\n  };\r\n\r\n  const votingSectionStyle = {\r\n    width: \"20%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    color: \"#0D1282\",\r\n    fontSize: \"13px\",\r\n  };\r\n\r\n  return (\r\n    <div style={postBoxStyle}>\r\n      <div className=\"comment\">\r\n        <Link\r\n          onClick={() => handleViewClick(post.postId)}\r\n          selected={state.selectedTab === \"viewPost\"}\r\n          style={{ textDecoration: \"none\", color: \"inherit\" }}\r\n        >\r\n          <div>{post.title}</div>\r\n        </Link>\r\n        <div style={{ color: \"#333\", fontSize: \"12px\" }}>{post.author}</div>\r\n        <div className=\"comment-info\"></div>\r\n      </div>\r\n\r\n      <div style={votingSectionStyle}>\r\n        <p style={{ margin: \"10px\", fontSize: \"20px\", color: \"#0D1282\" }}>\r\n          {post.votingPoints}\r\n        </p>\r\n        Vote(s)\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst home = () => {\r\n  const boxContainerStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  };\r\n  const menuBoxStyle = {\r\n    width: \"200px\",\r\n    height: \"200px\",\r\n    margin: \"10px\",\r\n    borderRadius: \"10px\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#fff\",\r\n    color: \"#000\",\r\n    border: \"2px solid #0D1282\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontSize: \"18px\",\r\n  };\r\n\r\n  const logoStyle = {\r\n    fontFamily: \"Verdana , san-serif\", // Replace 'ArtisticFont' with your desired artistic font\r\n    color: \"#0D1282\",\r\n    fontSize: \"60px\",\r\n  };\r\n\r\n  return (\r\n    <div style={pageStyle}>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <a style={logoStyle}>HeapHeap Hooray</a>\r\n        <div style={boxContainerStyle}>\r\n          <div\r\n            style={menuBoxStyle}\r\n            onClick={() => handleAllPostClick()}\r\n            selected={state.selectedTab === \"allPost\"}\r\n          >\r\n            All Post\r\n          </div>\r\n          <a\r\n            style={menuBoxStyle}\r\n            onMouseLeave={handleMouseLeave}\r\n            onClick={() => handleCreatePostClick()}\r\n            selected={state.selectedTab === \"createPost\"}\r\n          >\r\n            Create Post\r\n          </a>\r\n          <div\r\n            style={menuBoxStyle}\r\n            onMouseLeave={handleMouseLeave}\r\n            onClick={() => handleMyPostClick()}\r\n            selected={state.selectedTab === \"myPost\"}\r\n          >\r\n            My Post\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst viewPost = (pagePostId) => {\r\n  const postId = pagePostId;\r\n\r\n  console.log(\"PostIdType:\", typeof postId);\r\n  console.log(\"PostId:\", postId);\r\n\r\n  const Comment = ({ comments }) => {\r\n    const commentBoxStyle = {\r\n      width: \"97%\", // Adjust the width as needed\r\n      margin: \"0px\",\r\n      marginLeft: \"1%\",\r\n      padding: \"10px\",\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      alignItems: \"center\",\r\n      border: \"1px solid transparent\", // Transparent main border\r\n      borderBottom: \"1px solid #ccc\", // Visible right border\r\n    };\r\n\r\n    const votingSectionStyle = {\r\n      width: \"20%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n    };\r\n\r\n    const buttonStyle = {\r\n      padding: \"10px 15px\",\r\n      color: \"white\",\r\n      border: \"none\",\r\n      borderRadius: \"5px\",\r\n      cursor: \"pointer\",\r\n      outline: \"none\",\r\n      marginLeft: \"15%\",\r\n    };\r\n    return (\r\n      <div style={commentBoxStyle}>\r\n        <div className=\"comment\">\r\n          <div>{comments.comment}</div>\r\n          <div style={{ color: \"#333\", fontSize: \"12px\" }}>\r\n            {comments.author}\r\n          </div>\r\n          <div className=\"comment-info\">\r\n            <p style={{ color: \"#333\", fontSize: \"12px\" }}></p>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={votingSectionStyle}>\r\n          <p style={{ margin: \"10px\", fontSize: \"20px\", color: \"#0D1282\" }}>\r\n            {comments.votingPoints}\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            style={buttonStyle}\r\n            className=\"btn btn-success vote-btn\"\r\n            onClick={() => handleVoteComment(comments.commentId)}\r\n          >\r\n            Vote\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  TutorContract.posts([postId]).then((result) => {\r\n    State.update({\r\n      author: result[0],\r\n      content: result[1],\r\n      title: result[2],\r\n      votingPoints: Big(result[3]).toNumber(),\r\n      postId: Big(result[4]).toNumber(),\r\n    });\r\n  });\r\n\r\n  console.log(\"data\", commentData);\r\n\r\n  const [sortOption, setSortOption] = useState(\"mostVoted\");\r\n  const [sortedComments, setSortedComments] = useState([]);\r\n\r\n  const handleSortChange = (option) => {\r\n    setSortOption(option);\r\n\r\n    if (option === \"mostRecent\") {\r\n      const sortedByRecent = [...commentData].sort((a, b) => {\r\n        const dateA = new Date(a.datetime);\r\n        const dateB = new Date(b.datetime);\r\n\r\n        console.log(dateA, dateB);\r\n\r\n        return dateB - dateA;\r\n      });\r\n      setSortedComments(sortedByRecent);\r\n    } else if (option === \"mostVoted\") {\r\n      const sortedByVote = [...commentData].sort(\r\n        (a, b) => b.votingPoints - a.votingPoints\r\n      );\r\n      setCommentData(sortedByVote);\r\n    }\r\n  };\r\n\r\n  const votingSectionStyle = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n  };\r\n\r\n  const handleVotePost = () => {\r\n    try {\r\n      TutorContract.vote(state.postId, 1).then((transactionHash) => {\r\n        console.log(transactionHash);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating post:\", error.message);\r\n    }\r\n  };\r\n\r\n  const handleVoteComment = (commentId) => {\r\n    try {\r\n      TutorContract.vote(commentId, 0).then((transactionHash) => {\r\n        console.log(transactionHash);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating post:\", error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        fontFamily: \"Verdana\",\r\n        backgroundColor: \"#fff\",\r\n        color: \"#000\",\r\n        minHeight: \"100vh\",\r\n      }}\r\n    >\r\n      <ul style={navbarContainerStyle}>\r\n        <li style={heapHeapHoorayBoxStyle}>\r\n          <a\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n            onClick={() => handleHomeClick()}\r\n            selected={state.selectedTab === \"home\"}\r\n          >\r\n            HeapHeap Hooray\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            onClick={() => handleCreatePostClick()}\r\n            selected={state.selectedTab === \"createPost\"}\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n          >\r\n            Create Post\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            href=\"#\"\r\n            onClick={() => handleAllPostClick()}\r\n            selected={state.selectedTab === \"allPost\"}\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n          >\r\n            Search Post\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            href=\"#\"\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n            onClick={() => handleMyPostClick()}\r\n            selected={state.selectedTab === \"myPost\"}\r\n          >\r\n            My Post\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div style={{ padding: \"4%\" }}>\r\n        <h2>{state.title}</h2>\r\n        <div>\r\n          <p style={{ fontSize: \"20px\" }}>{state.content}</p>\r\n        </div>\r\n        <div\r\n          style={{ textAlign: \"right\", marginBottom: \"2%\", marginRight: \"1%\" }}\r\n        >\r\n          <div style={{ color: \"#333\", fontSize: \"13px\" }}>\r\n            by {state.author}\r\n          </div>\r\n        </div>\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <div style={{ marginRight: \"1%\", color: \"#333\", fontSize: \"13px\" }}>\r\n            Love this post?\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginBottom: \"0.5%\",\r\n              marginRight: \"1%\",\r\n              color: \"#333\",\r\n              fontSize: \"13px\",\r\n            }}\r\n          >\r\n            let's vote it to grow our community!\r\n          </div>\r\n          <div class=\"votePostContainer\" style={votingSectionStyle}>\r\n            <div style={{ fontSize: \"30px\" }}>{state.votingPoints}</div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-success vote-btn\"\r\n              id=\"votePostBtn\"\r\n              style={{\r\n                marginLeft: \"2%\",\r\n                marginRight: \"1%\",\r\n                backgroundColor: \"#0D1282\",\r\n                color: \"white\",\r\n                padding: \"10px 15px\",\r\n              }}\r\n              onClick={handleVotePost}\r\n            >\r\n              Vote Post\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-3\">\r\n          <label htmlFor=\"sortOptions\" className=\"form-label\">\r\n            Sort By:\r\n          </label>\r\n          <select\r\n            id=\"sortOptions\"\r\n            className=\"form-select\"\r\n            onChange={(e) => handleSortChange(e.target.value)}\r\n            value={sortOption}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              color: \"#333\",\r\n              border: \"1px solid\",\r\n              width: \"30%\",\r\n            }}\r\n          >\r\n            <option value=\"default\"> default </option>\r\n            <option value=\"mostVoted\">Most Voted</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div id=\"commentsContainer\" style={{ marginTop: \"5%\" }}>\r\n          <h4>Comments</h4>\r\n          {commentData && commentData.length > 0 ? (\r\n            commentData.map((comment, index) => (\r\n              <Comment key={index} comments={comment} />\r\n            ))\r\n          ) : (\r\n            <p>No comments available</p>\r\n          )}\r\n        </div>\r\n\r\n        <textA />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst allPost = () => {\r\n  const [sortOption, setSortOption] = useState([]);\r\n  const [sortedPosts, setSortedPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const sortedByVote = [...posts].sort(\r\n      (a, b) => b.votingPoints - a.votingPoints\r\n    );\r\n    setSortedPosts(sortedByVote);\r\n  }, []);\r\n\r\n  const handleSortChange = (option) => {\r\n    setSortOption(option);\r\n\r\n    if (option === \"mostRecent\") {\r\n      const sortedByRecent = [posts].sort((a, b) => {\r\n        const dateA = new Date(a.datetime);\r\n        const dateB = new Date(b.datetime);\r\n\r\n        console.log(dateA, dateB);\r\n\r\n        return dateB - dateA;\r\n      });\r\n      setSortedPosts(sortedByRecent);\r\n    } else if (option === \"mostVoted\") {\r\n      const sortedByVote = [...posts].sort(\r\n        (a, b) => b.votingPoints - a.votingPoints\r\n      );\r\n      setPosts(sortedByVote);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <ul style={navbarContainerStyle}>\r\n        <li style={heapHeapHoorayBoxStyle}>\r\n          <a\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n            onClick={() => handleHomeClick()}\r\n            selected={state.selectedTab === \"home\"}\r\n          >\r\n            HeapHeap Hooray\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            onClick={() => handleCreatePostClick()}\r\n            selected={state.selectedTab === \"createPost\"}\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n          >\r\n            Create Post\r\n          </a>\r\n        </li>\r\n        <li style={myPostBoxStyle}>\r\n          <a href=\"#\" style={{ textDecoration: \"none\", color: \"#000\" }}>\r\n            Search Post\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n            onClick={() => handleMyPostClick()}\r\n            selected={state.selectedTab === \"myPost\"}\r\n          >\r\n            My Post\r\n          </a>\r\n        </li>\r\n      </ul>\r\n\r\n      <div style={pageStyle}>\r\n        <h1>All Post</h1>\r\n        <div className=\"mt-3\">\r\n          <label htmlFor=\"sortOptions\" className=\"form-label\">\r\n            Sort By:\r\n          </label>\r\n          <select\r\n            id=\"sortOptions\"\r\n            className=\"form-select\"\r\n            onChange={(e) => handleSortChange(e.target.value)}\r\n            value={sortOption}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              color: \"#333\",\r\n              border: \"1px solid\",\r\n              width: \"30%\",\r\n            }}\r\n          >\r\n            <option value=\"default\"> default </option>\r\n            <option value=\"mostVoted\">Most Voted</option>\r\n          </select>\r\n        </div>\r\n\r\n        {posts && posts.length > 0 ? (\r\n          posts.map((post, index) => <Post key={index} post={post} />)\r\n        ) : (\r\n          <p>No posts available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst myPost = () => {\r\n  return (\r\n    <div>\r\n      <ul style={navbarContainerStyle}>\r\n        <li style={heapHeapHoorayBoxStyle}>\r\n          <a\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n            onClick={() => handleHomeClick()}\r\n            selected={state.selectedTab === \"home\"}\r\n          >\r\n            HeapHeap Hooray\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            href=\"teama.near/widget/CreatePost\"\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n          >\r\n            Create Post\r\n          </a>\r\n        </li>\r\n        <li style={boxStyle}>\r\n          <a\r\n            onClick={() => handleAllPostClick()}\r\n            selected={state.selectedTab === \"allPost\"}\r\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\r\n          >\r\n            Search Post\r\n          </a>\r\n        </li>\r\n        <li style={myPostBoxStyle}>\r\n          <a\r\n            href=\"#\"\r\n            style={{ textDecoration: \"none\", color: \"#000\" }}\r\n            onClick={() => handleMyPostClick()}\r\n            selected={state.selectedTab === \"myPost\"}\r\n          >\r\n            My Post\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div style={pageStyle}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <h3 style={{ marginBottom: \"2.5%\" }}>History Post:</h3>\r\n        </div>\r\n\r\n        {posts && posts.length > 0 ? (\r\n          posts.map((post, index) => <Post key={index} post={post} />)\r\n        ) : (\r\n          <p>No posts available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    {state.selectedTab === \"viewPost\" && viewPost(state.pagePostId)}\r\n    {state.selectedTab === \"createPost\" && (\r\n      <>\r\n        <Widget src=\"teama.near/widget/CreatePost\" />\r\n      </>\r\n    )}\r\n    {state.selectedTab === \"allPost\" && allPost()}\r\n    {state.selectedTab === \"home\" && home()}\r\n    {state.selectedTab === \"myPost\" && myPost()}\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/teama.near/widget/AllPages", "fact_widget_deployments_id": "2922498c7c1f1456ec014b8ccf58f158", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}