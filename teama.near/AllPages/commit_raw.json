{"tx_hash": "CXu642ni8S59C1kDGWaVRoacM3WygES3L2qw3jcUXhBx", "action_id_social": "2DwnsJz1WF9kFx3VcC3dLU21eK8MWHBepGQzamUdEpJP-0-widget", "block_id": 108263992, "block_timestamp": "2023-12-18T16:38:59.804Z", "signer_id": "teama.near", "widget_name": "AllPages", "source_code": "State.init({\n  selectedTab: \"home\",\n  pagePostId: 0,\n  postIdCounter: 0,\n  commentCounter: 0,\n});\n\nconst abi = fetch(\n  `https://gist.githubusercontent.com/idea2547/2e993b25c45e150d14d1e0077de47e6d/raw/337986ada07a870838a6a977f6d48176fb995353/gistfile1.txt`\n);\n\nconst TutorContract = new ethers.Contract(\n  \"0x1D7098360A9e77A58C4D38df9261335bD74d44d5\",\n  abi.body,\n  Ethers.provider().getSigner()\n);\n\nif (state.sender == undefined && Ethers.provider()) {\n  const receiver = Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length) {\n        State.update({ sender: accounts[0] });\n      }\n    });\n  State.update({ postNumber: `${receiver}` });\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nconst handleAllPostClick = () => {\n  fetchAllPost();\n  State.update({\n    selectedTab: \"allPost\",\n  });\n};\n\nconst handleHomeClick = () => {\n  State.update({\n    selectedTab: \"home\",\n  });\n};\n\nconst handleMyPostClick = () => {\n  fetchMyPost();\n  State.update({\n    selectedTab: \"myPost\",\n    pagePostId: postId,\n  });\n};\n\nconst handleViewClick = (postId) => {\n  fetchComments(postId);\n  State.update({\n    selectedTab: \"viewPost\",\n    pagePostId: postId,\n  });\n  console.log(\"ppid\", pagePostId);\n};\n\nTutorContract.postIdCounter().then((result) => {\n  State.update({ postIdCounter: Big(result).toNumber() });\n});\n\nTutorContract.commentIdCounter().then((result) => {\n  State.update({ commentCounter: Big(result).toNumber() });\n});\n\nconst pageStyle = {\n  fontFamily: \"Verdana , san-serif\", // Example font family\n  backgroundColor: \"#FFFFFF\", // Example background color\n  padding: \"4%\", // Example padding\n  color: \"#000\", // Example text color\n  height: \"100vh\",\n};\n\nconst boxStyle = {\n  padding: \"15px\",\n  margin: \"0px\",\n  display: \"inline-block\",\n  backgroundColor: \"#0D1282\",\n  color: \"#fff\",\n  cursor: \"pointer\",\n  float: \"left\",\n  display: \"block\",\n};\n\nconst myPostBoxStyle = {\n  ...boxStyle,\n  backgroundColor: \"#fff\",\n};\n\nconst navbarContainerStyle = {\n  margin: \"0px\",\n  display: \"flex\",\n  backgroundColor: \"#0D1282\",\n  fontFamily: \"Verdana , san-serif\",\n};\n\nconst heapHeapHoorayBoxStyle = {\n  ...boxStyle,\n  fontFamily: \"Verdana , sans-serif\", // Different background color for \"Heapheap Hooray\"\n  fontSize: \"20px\",\n};\n\nconst textA = () => {\n  const [commentContent, setCommentContent] = useState(\"\");\n  console.log(commentContent);\n  const handleComment = () => {\n    try {\n      TutorContract.createComment(state.postId, commentContent).then(\n        (transactionHash) => {\n          console.log(transactionHash);\n        }\n      );\n    } catch (error) {\n      console.error(\"Error creating post:\", error.message);\n    }\n  };\n  return (\n    <div class=\"comments-section\" style={{ marginTop: \"5%\" }}>\n      <div class=\"mb-3\">\n        <label class=\"form-label\">Your Comment:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          placeholder=\" Share your though\"\n          rows=\"4\"\n          style={{ width: \"100%\", fontSize: \"15px\" }}\n          value={commentContent}\n          onChange={(e) => setCommentContent(e.target.value)}\n          required\n        ></textarea>\n      </div>\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        style={{\n          marginLeft: \"auto\",\n          display: \"block\",\n          backgroundColor: \"#0D1282\",\n          color: \"white\",\n        }}\n        onClick={() => handleComment()}\n      >\n        Submit Comment\n      </button>\n    </div>\n  );\n};\n\nconst [posts, setPosts] = useState([]);\n\nconst fetchAllPost = () => {\n  const fetchData = () => {\n    try {\n      console.log(\"spicsc\", postIdCounter);\n      const fetchedPosts = [];\n      for (let i = 0; i <= state.postIdCounter; i++) {\n        TutorContract.posts([i]).then((result) => {\n          console.log(result);\n          State.update({});\n          console.log(\"-----------------\");\n          let post = {\n            title: result[2],\n            votingPoints: Big(result[3]).toNumber(),\n            author: result[0],\n            postId: Big(result[4]).toNumber(),\n          };\n          console.log(post);\n          fetchedPosts.push(post);\n        });\n      }\n\n      setPosts(fetchedPosts);\n      console.log(fetchedPosts);\n    } catch (error) {\n      console.error(\"Error fetching posts from the contract:\", error);\n    }\n  };\n\n  fetchData();\n};\n\nconst fetchMyPost = () => {\n  const fetchData = () => {\n    try {\n      const fetchedPosts = [];\n      for (let i = 0; i <= state.postIdCounter; i++) {\n        TutorContract.posts([i]).then((result) => {\n          console.log(result);\n          State.update({});\n          console.log(\"-----------------\");\n          if (result[0].toLowerCase() == state.sender.toLowerCase()) {\n            let post = {\n              title: result[2],\n              votingPoints: Big(result[3]).toNumber(),\n              author: result[0],\n              postId: Big(result[4]).toNumber(),\n            };\n            console.log(post);\n            fetchedPosts.push(post);\n          }\n        });\n      }\n      setPosts(fetchedPosts);\n    } catch (error) {\n      console.error(\"Error fetching posts from the contract:\", error);\n    }\n  };\n\n  fetchData();\n};\n\nconst [commentData, setCommentData] = useState([]);\n\nconst fetchComments = (postId) => {\n  const fetchData = () => {\n    try {\n      const fetchedComments = [];\n      for (let i = 0; i <= state.commentCounter; i++) {\n        TutorContract.comments([i]).then((result) => {\n          console.log(result);\n          State.update({});\n          console.log(\"-----------------\");\n          if (Big(result[2]).toNumber() == postId) {\n            let com = {\n              comment: result[1],\n              votingPoints: Big(result[3]).toNumber(),\n              author: result[0],\n              datetime: \"2023-10-19 19:00\",\n            };\n            console.log(com);\n            fetchedComments.push(com);\n          }\n        });\n      }\n\n      setCommentData(fetchedComments);\n    } catch (error) {\n      console.error(\"Error fetching posts from the contract:\", error);\n    }\n  };\n\n  fetchData();\n};\n\nconst Post = ({ post }) => {\n  const postBoxStyle = {\n    width: \"97%\", // Adjust the width as needed\n    margin: \"0px\",\n    marginLeft: \"1%\",\n    padding: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    border: \"1px solid transparent\", // Transparent main border\n    borderBottom: \"1px solid #ccc\", // Visible right border\n  };\n\n  const votingSectionStyle = {\n    width: \"20%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    color: \"#0D1282\",\n    fontSize: \"13px\",\n  };\n\n  const buttonStyle = {\n    padding: \"10px 15px\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    outline: \"none\",\n    marginLeft: \"15%\",\n  };\n  return (\n    <div style={postBoxStyle}>\n      <div className=\"comment\">\n        <Link\n          onClick={() => handleViewClick(post.postId)}\n          selected={state.selectedTab === \"viewPost\"}\n          style={{ textDecoration: \"none\", color: \"inherit\" }}\n        >\n          {/* Replace <h5> with Link component */}\n          <div>{post.title}</div>\n        </Link>\n        <div style={{ color: \"#333\", fontSize: \"12px\" }}>{post.author}</div>\n        <div className=\"comment-info\"></div>\n      </div>\n\n      <div style={votingSectionStyle}>\n        <p style={{ margin: \"10px\", fontSize: \"20px\", color: \"#0D1282\" }}>\n          {post.votingPoints}\n        </p>\n        Vote(s)\n      </div>\n    </div>\n  );\n};\n\nconst home = () => {\n  const boxContainerStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  };\n  const menuBoxStyle = {\n    width: \"200px\",\n    height: \"200px\",\n    margin: \"10px\",\n    borderRadius: \"10px\",\n    cursor: \"pointer\",\n    backgroundColor: \"#fff\",\n    color: \"#000\",\n    border: \"2px solid #0D1282\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: \"18px\",\n  };\n\n  const logoStyle = {\n    fontFamily: \"Verdana , san-serif\", // Replace 'ArtisticFont' with your desired artistic font\n    color: \"#0D1282\",\n    fontSize: \"60px\",\n  };\n\n  return (\n    <div style={pageStyle}>\n      <div style={{ textAlign: \"center\" }}>\n        <a style={logoStyle}>HeapHeap Hooray</a>\n        <div style={boxContainerStyle}>\n          <div\n            style={menuBoxStyle}\n            onClick={() => handleAllPostClick()}\n            selected={state.selectedTab === \"allPost\"}\n          >\n            All Post\n          </div>\n          <a\n            style={menuBoxStyle}\n            onMouseLeave={handleMouseLeave}\n            href=\"teama.near/widget/CreatePost\"\n          >\n            Create Post\n          </a>\n          <div\n            style={menuBoxStyle}\n            onMouseLeave={handleMouseLeave}\n            onClick={() => handleMyPostClick()}\n            selected={state.selectedTab === \"myPost\"}\n          >\n            My Post\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst viewPost = (pagePostId) => {\n  const postId = pagePostId;\n\n  console.log(\"PostIdType:\", typeof postId);\n  console.log(\"PostId:\", postId);\n\n  const Comment = ({ comments }) => {\n    const commentBoxStyle = {\n      width: \"97%\", // Adjust the width as needed\n      margin: \"0px\",\n      marginLeft: \"1%\",\n      padding: \"10px\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      border: \"1px solid transparent\", // Transparent main border\n      borderBottom: \"1px solid #ccc\", // Visible right border\n    };\n\n    const votingSectionStyle = {\n      width: \"20%\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n    };\n\n    const buttonStyle = {\n      padding: \"10px 15px\",\n      color: \"white\",\n      border: \"none\",\n      borderRadius: \"5px\",\n      cursor: \"pointer\",\n      outline: \"none\",\n      marginLeft: \"15%\",\n    };\n    return (\n      <div style={commentBoxStyle}>\n        <div className=\"comment\">\n          <div>{comments.comment}</div>\n          <div style={{ color: \"#333\", fontSize: \"12px\" }}>\n            {comments.author}\n          </div>\n          <div className=\"comment-info\">\n            <p style={{ color: \"#333\", fontSize: \"12px\" }}></p>\n          </div>\n        </div>\n\n        <div style={votingSectionStyle}>\n          <p style={{ margin: \"10px\", fontSize: \"20px\", color: \"#0D1282\" }}>\n            {comments.votingPoints}\n          </p>\n          <button\n            type=\"button\"\n            style={buttonStyle}\n            className=\"btn btn-success vote-btn\"\n            onClick={() => handleVoteComment(0)}\n          >\n            Vote\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  TutorContract.posts([postId]).then((result) => {\n    State.update({\n      author: result[0],\n      content: result[1],\n      title: result[2],\n      votingPoints: Big(result[3]).toNumber(),\n      postId: Big(result[4]).toNumber(),\n    });\n  });\n\n  console.log(\"data\", commentData);\n\n  const [sortOption, setSortOption] = useState(\"mostVoted\");\n  const [sortedComments, setSortedComments] = useState([]);\n\n  const handleSortChange = (option) => {\n    setSortOption(option);\n\n    if (option === \"mostRecent\") {\n      const sortedByRecent = [...commentData].sort((a, b) => {\n        const dateA = new Date(a.datetime);\n        const dateB = new Date(b.datetime);\n\n        console.log(dateA, dateB);\n\n        return dateB - dateA;\n      });\n      setSortedComments(sortedByRecent);\n    } else if (option === \"mostVoted\") {\n      const sortedByVote = [...commentData].sort(\n        (a, b) => b.votingPoints - a.votingPoints\n      );\n      setCommentData(sortedByVote);\n    }\n  };\n\n  const votingSectionStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  };\n\n  const handleVotePost = () => {\n    try {\n      TutorContract.vote(state.postId, 1).then((transactionHash) => {\n        console.log(transactionHash);\n      });\n    } catch (error) {\n      console.error(\"Error creating post:\", error.message);\n    }\n  };\n\n  const handleVoteComment = (commentId) => {\n    try {\n      TutorContract.vote(commentId, 0).then((transactionHash) => {\n        console.log(transactionHash);\n      });\n    } catch (error) {\n      console.error(\"Error creating post:\", error.message);\n    }\n  };\n\n  const [commentContent, setCommentContent] = useState(\"\");\n\n  const handleComment = () => {\n    try {\n      TutorContract.createComment(state.postId, commentContent).then(\n        (transactionHash) => {\n          console.log(transactionHash);\n        }\n      );\n    } catch (error) {\n      console.error(\"Error creating post:\", error.message);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        fontFamily: \"Verdana\",\n        backgroundColor: \"#fff\",\n        color: \"#000\",\n        height: \"100h\",\n      }}\n    >\n      <ul style={navbarContainerStyle}>\n        <li style={heapHeapHoorayBoxStyle}>\n          <a\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n            onClick={() => handleHomeClick()}\n            selected={state.selectedTab === \"home\"}\n          >\n            HeapHeap Hooray\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a href=\"#\" style={{ textDecoration: \"none\", color: \"#fff\" }}>\n            Create Post\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a\n            href=\"#\"\n            onClick={() => handleAllPostClick()}\n            selected={state.selectedTab === \"allPost\"}\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n          >\n            Search Post\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a\n            href=\"#\"\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n            onClick={() => handleMyPostClick()}\n            selected={state.selectedTab === \"myPost\"}\n          >\n            My Post\n          </a>\n        </li>\n      </ul>\n      <div style={{ padding: \"4%\" }}>\n        <h2>{state.title}</h2>\n        <div>\n          <p style={{ fontSize: \"20px\" }}>{state.content}</p>\n        </div>\n        <div\n          style={{ textAlign: \"right\", marginBottom: \"2%\", marginRight: \"1%\" }}\n        >\n          <div style={{ color: \"#333\", fontSize: \"13px\" }}>\n            by {state.author}\n          </div>\n        </div>\n        <div style={{ textAlign: \"right\" }}>\n          <div style={{ marginRight: \"1%\", color: \"#333\", fontSize: \"13px\" }}>\n            Love this post?\n          </div>\n          <div\n            style={{\n              marginBottom: \"0.5%\",\n              marginRight: \"1%\",\n              color: \"#333\",\n              fontSize: \"13px\",\n            }}\n          >\n            let's vote it to grow our community!\n          </div>\n          <div class=\"votePostContainer\" style={votingSectionStyle}>\n            <div style={{ fontSize: \"30px\" }}>{state.votingPoints}</div>\n            <button\n              type=\"button\"\n              className=\"btn btn-success vote-btn\"\n              id=\"votePostBtn\"\n              style={{\n                marginLeft: \"2%\",\n                marginRight: \"1%\",\n                backgroundColor: \"#0D1282\",\n                color: \"white\",\n                padding: \"10px 15px\",\n              }}\n              onClick={handleVotePost}\n            >\n              Vote Post\n            </button>\n          </div>\n        </div>\n\n        <div className=\"mt-3\">\n          <label htmlFor=\"sortOptions\" className=\"form-label\">\n            Sort By:\n          </label>\n          <select\n            id=\"sortOptions\"\n            className=\"form-select\"\n            onChange={(e) => handleSortChange(e.target.value)}\n            value={sortOption}\n            style={{\n              backgroundColor: \"white\",\n              color: \"#333\",\n              border: \"1px solid\",\n              width: \"30%\",\n            }}\n          >\n            <option value=\"default\"> default </option>\n            <option value=\"mostVoted\">Most Voted</option>\n          </select>\n        </div>\n\n        <div id=\"commentsContainer\" style={{ marginTop: \"5%\" }}>\n          <h4>Comments</h4>\n          {commentData.map((comment, index) => (\n            <Comment key={index} comments={comment} />\n          ))}\n        </div>\n\n        <textA />\n      </div>\n    </div>\n  );\n};\n\nconst allPost = () => {\n  const [sortOption, setSortOption] = useState([]);\n  const [sortedPosts, setSortedPosts] = useState([]);\n\n  useEffect(() => {\n    const sortedByVote = [...posts].sort(\n      (a, b) => b.votingPoints - a.votingPoints\n    );\n    setSortedPosts(sortedByVote);\n  }, []);\n\n  const handleSortChange = (option) => {\n    setSortOption(option);\n\n    if (option === \"mostRecent\") {\n      const sortedByRecent = [posts].sort((a, b) => {\n        const dateA = new Date(a.datetime);\n        const dateB = new Date(b.datetime);\n\n        console.log(dateA, dateB);\n\n        return dateB - dateA;\n      });\n      setSortedPosts(sortedByRecent);\n    } else if (option === \"mostVoted\") {\n      const sortedByVote = [...posts].sort(\n        (a, b) => b.votingPoints - a.votingPoints\n      );\n      setPosts(sortedByVote);\n    }\n  };\n\n  return (\n    <div className=\"posts\">\n      <ul style={navbarContainerStyle}>\n        <li style={heapHeapHoorayBoxStyle}>\n          <a\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n            onClick={() => handleHomeClick()}\n            selected={state.selectedTab === \"home\"}\n          >\n            HeapHeap Hooray\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a\n            href=\"teama.near/widget/CreatePost\"\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n          >\n            Create Post\n          </a>\n        </li>\n        <li style={myPostBoxStyle}>\n          <a href=\"#\" style={{ textDecoration: \"none\", color: \"#000\" }}>\n            Search Post\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n            onClick={() => handleMyPostClick()}\n            selected={state.selectedTab === \"myPost\"}\n          >\n            My Post\n          </a>\n        </li>\n      </ul>\n\n      <div style={pageStyle}>\n        <h1>All Post</h1>\n        <div className=\"mt-3\">\n          <label htmlFor=\"sortOptions\" className=\"form-label\">\n            Sort By:\n          </label>\n          <select\n            id=\"sortOptions\"\n            className=\"form-select\"\n            onChange={(e) => handleSortChange(e.target.value)}\n            value={sortOption}\n            style={{\n              backgroundColor: \"white\",\n              color: \"#333\",\n              border: \"1px solid\",\n              width: \"30%\",\n            }}\n          >\n            <option value=\"default\"> default </option>\n            <option value=\"mostVoted\">Most Voted</option>\n          </select>\n        </div>\n        {posts.map((post, index) => (\n          <Post key={index} post={post} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst myPost = () => {\n  return (\n    <div>\n      <ul style={navbarContainerStyle}>\n        <li style={heapHeapHoorayBoxStyle}>\n          <a\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n            onClick={() => handleHomeClick()}\n            selected={state.selectedTab === \"home\"}\n          >\n            HeapHeap Hooray\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a\n            href=\"teama.near/widget/CreatePost\"\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n          >\n            Create Post\n          </a>\n        </li>\n        <li style={boxStyle}>\n          <a\n            onClick={() => handleAllPostClick()}\n            selected={state.selectedTab === \"allPost\"}\n            style={{ textDecoration: \"none\", color: \"#fff\" }}\n          >\n            Search Post\n          </a>\n        </li>\n        <li style={myPostBoxStyle}>\n          <a\n            href=\"#\"\n            style={{ textDecoration: \"none\", color: \"#000\" }}\n            onClick={() => handleMyPostClick()}\n            selected={state.selectedTab === \"myPost\"}\n          >\n            My Post\n          </a>\n        </li>\n      </ul>\n      <div style={pageStyle}>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <h3 style={{ marginBottom: \"2.5%\" }}>History Post:</h3>\n        </div>\n\n        {posts.map((post, index) => (\n          <Post key={index} post={post} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nreturn (\n  <div>\n    {state.selectedTab === \"viewPost\" && viewPost(state.pagePostId)}\n    {state.selectedTab === \"createPost\" && (\n      <>\n        <Widget src=\"teama.near/widget/CreatePost\" />\n      </>\n    )}\n    {state.selectedTab === \"allPost\" && allPost()}\n    {state.selectedTab === \"home\" && home()}\n    {state.selectedTab === \"myPost\" && myPost()}\n  </div>\n);\n", "metadata": {"tags": {"bos-gg": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/teama.near/widget/AllPages", "fact_widget_deployments_id": "d513d87a7238864b238c10919941beda", "inserted_timestamp": "2023-12-18T18:51:49.779Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}