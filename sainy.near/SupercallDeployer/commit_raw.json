{"tx_hash": "DxWGt9t2TCHwscaZmf6neqXUBoKBFQdksX2ZB2U5igax", "action_id_social": "8geWBUngyRC9YKFQBnnWfjdzVMAsRVwmjLSUM1jxiT8c-0-widget", "block_id": 108260376, "block_timestamp": "2023-12-18T15:32:51.827Z", "signer_id": "sainy.near", "widget_name": "SupercallDeployer", "source_code": "const ButtonCreate = styled.div`\n    border-radius: 14px;\n    border: 1px dashed #C3C5C7;\n    background: #FFF;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 400;\n    cursor:pointer;\n    width: 70px;\n    height: 28px;\n    text-align:center;\n    padding: 5px 0;\n`;\n\nState.init({\n  accountNumber: props.accountNumber,\n  contractAddress: \"\",\n  isDeployed: false,\n  isFetched: false,\n  isSupportedChain: true,\n  multicallAddr: \"0xEa5363305017B2A6fD0d72Ba830513c678a2f1fE\",\n  create2DeployerAddr: \"0x2DA1A7AaB838960a49AC0D62480aD3412b2E8B5B\",\n});\n\n// Data sources\nconst CREATE2DEPLOYER_ABI_URL =\n  \"https://raw.githubusercontent.com/SainyTK/contract-list/main/abis/Create2Deployer.json\";\nconst CREATE2DEPLOYER_ABI = fetch(CREATE2DEPLOYER_ABI_URL).body;\n\nconst OWNABLE_PROXY_ABI_URL =\n  \"https://raw.githubusercontent.com/SainyTK/contract-list/main/abis/OwnableProxy.json\";\nconst OWNABLE_PROXY_ABI = fetch(OWNABLE_PROXY_ABI_URL).body;\n\nconst OWNABLE_PROXY_BYTECODE_URL =\n  \"https://raw.githubusercontent.com/SainyTK/contract-list/main/bytecodes/OwnableProxy.txt\";\nconst OWNABLE_PROXY_BYTECODE = fetch(OWNABLE_PROXY_BYTECODE_URL).body;\n\n// Preparation\nconst signer = Ethers.send(\"eth_requestAccounts\", [])[0];\n\n// Functions\nfunction getSalt(input) {\n  const utf8BytesValue = ethers.utils.toUtf8Bytes(input);\n  return ethers.utils.keccak256(utf8BytesValue);\n}\n\nfunction getCodeData(abi, bytecode, args) {\n  const iface = new ethers.utils.Interface(abi);\n  bytecode = bytecode.startsWith(\"0x\") ? bytecode : \"0x\" + bytecode;\n  return ethers.utils.concat([bytecode, iface.encodeDeploy(args)]);\n}\n\nfunction getCodeHash(abi, bytecode, args) {\n  const data = getCodeData(abi, bytecode, args);\n  return ethers.utils.keccak256(data);\n}\n\nfunction checkIsContract(address) {\n  try {\n    const code = Ethers.send(\"eth_getCode\", [address]);\n    const isContract = code !== undefined && code !== null && code !== \"0x\";\n    return isContract;\n  } catch (error) {}\n}\n\nfunction checkContractAddress() {\n  try {\n    const computedSalt = getSalt(props.accountNumber || \"0\");\n    const codeHash = getCodeHash(OWNABLE_PROXY_ABI, OWNABLE_PROXY_BYTECODE, [\n      state.multicallAddr,\n      signer,\n    ]);\n    const create2Deployer = new ethers.Contract(\n      state.create2DeployerAddr,\n      CREATE2DEPLOYER_ABI,\n      Ethers.provider().getSigner()\n    );\n    console.log({ addr: state.create2DeployerAddr, computedSalt, codeHash });\n    create2Deployer.computeAddress(computedSalt, codeHash).then((address) => {\n      const isContract = checkIsContract(address);\n      State.update({\n        accountNumber: props.accountNumber || \"0\",\n        contractAddress: address,\n        isDeployed: isContract,\n        isFetched: true,\n        isError: false,\n      });\n      Storage.set(`contractAddress:${props.accountNumber || \"0\"}`, address);\n      Storage.set(`isDeployed:${props.accountNumber || \"0\"}`, isContract);\n    });\n  } catch (e) {\n    State.update({ isError: true, error: \"Check address error\" });\n  }\n}\n\nfunction deploySuperCall() {\n  const create2Deployer = new ethers.Contract(\n    state.create2DeployerAddr,\n    CREATE2DEPLOYER_ABI,\n    Ethers.provider().getSigner()\n  );\n  const computedSalt = getSalt(props.accountNumber);\n  const codeData = getCodeData(OWNABLE_PROXY_ABI, OWNABLE_PROXY_BYTECODE, [\n    state.multicallAddr,\n    signer,\n  ]);\n  create2Deployer.deploy(0, computedSalt, codeData);\n}\n\nif (ethers && signer) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        const supportedChainsCreate2Deployer = fetch(\n          `https://raw.githubusercontent.com/SainyTK/contract-list/main/addresses/create2Deployer/supported-chains.json`\n        );\n        const supportedChainsMulticall = fetch(\n          `https://raw.githubusercontent.com/SainyTK/contract-list/main/addresses/multicall/supported-chains.json`\n        );\n        if (\n          !supportedChainsCreate2Deployer.error &&\n          !supportedChainsMulticall.error\n        ) {\n          const supportedChains1 = JSON.parse(\n            supportedChainsCreate2Deployer.body\n          );\n          const supportedChains2 = JSON.parse(supportedChainsMulticall.body);\n\n          if (\n            [...supportedChains1, ...supportedChains2].includes(\n              chainIdData?.chainId.toString()\n            )\n          ) {\n            const create2DeployerAddr = fetch(\n              `https://raw.githubusercontent.com/SainyTK/contract-list/main/addresses/create2Deployer/${chainIdData?.chainId}.json`\n            );\n            const multicallAddr = fetch(\n              `https://raw.githubusercontent.com/SainyTK/contract-list/main/addresses/multicall/${chainIdData?.chainId}.json`\n            );\n            if (!create2DeployerAddr.error && !multicallAddr.error) {\n              State.update({\n                multicallAddr: JSON.parse(multicallAddr.body).Multicall,\n                create2DeployerAddr: JSON.parse(create2DeployerAddr.body)\n                  .Create2Deployer,\n                isDeployed: true,\n                isFetched: true,\n              });\n            } else {\n              State.update({ isDeployed: true, isFetched: true });\n            }\n          } else {\n            State.update({ isSupportedChain: false });\n          }\n        } else {\n          State.update({ isError: true, error: \"Fetch chains error\" });\n        }\n      }\n    });\n}\n\ncheckContractAddress();\n\nif (!signer) {\n  return (\n    <div>\n      <Web3Connect />\n    </div>\n  );\n}\n\nif (!state.isSupportedChain) {\n  return <div>This chain is not supported</div>;\n}\n\nif (state.isError) {\n  return <div>{state.error || \"Something went wrong\"}</div>;\n}\n\nif (!state.isFetched || state.isDeployed) {\n  return <></>;\n}\n\nreturn <ButtonCreate onClick={deploySuperCall}>{`Create`}</ButtonCreate>;\n", "metadata": {"fork_of": "sainy.near/widget/SupercallDeployer@108257013"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sainy.near/widget/SupercallDeployer", "fact_widget_deployments_id": "d076d56b53dd30846ff185a001ec743c", "inserted_timestamp": "2023-12-18T17:51:15.647Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 12}