{"tx_hash": "BGECpXptn3Nvd2cxkGeg4SWVTrets3rdJKY8GgkuPvtU", "action_id_social": "72AdzMhcnkBvszKBNJtZjQCqPoi9fHhW5AoBXWMrK6be-0-widget", "block_id": 108108834, "block_timestamp": "2023-12-16T18:50:26.180Z", "signer_id": "sainy.near", "widget_name": "SupercallDeployer", "source_code": null, "metadata": null, "branch": {"draft": {"": "// Data sources\nconst CREATE2DEPLOYER_ABI_URL =\n  \"https://gist.githubusercontent.com/SainyTK/92a39e1e9b2c15d1d4a0cc48ca699266/raw/ea246a9999580aa4ec03f9cf193f299fb078820d/create2deployer-abi.json\";\nconst CREATE2DEPLOYER_ABI = fetch(CREATE2DEPLOYER_ABI_URL).body;\n\nconst OWNABLE_PROXY_ABI_URL =\n  \"https://gist.githubusercontent.com/SainyTK/cdbc9ba5715f4df12ff1dd05fa75c5af/raw/ec374671ff9b2ce86d3f126e2d85b5b026525f30/ownable-proxy-abi.json\";\nconst OWNABLE_PROXY_ABI = fetch(OWNABLE_PROXY_ABI_URL).body;\n\nconst OWNABLE_PROXY_BYTECODE_URL =\n  \"https://gist.githubusercontent.com/SainyTK/29eb181fd3eabec3460d8aaddcd2d859/raw/5bbc0602250d6b8f72047e363675c3b6028eacbf/ownable-proxy-bytecode.txt\";\nconst OWNABLE_PROXY_BYTECODE = fetch(OWNABLE_PROXY_BYTECODE_URL).body;\n\nconst multicallAddr = \"0xcA11bde05977b3631167028862bE2a173976CA11\";\nconst create2DeployerAddr = \"0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2\";\n\n// Util functions\nfunction _getBytes(value, name, copy) {\n  if (value) {\n    return \"0x\" + value;\n  }\n  if (typeof value === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n}\n\nfunction getBytes(value, name) {\n  return _getBytes(value, name, false);\n}\n\n// Preparation\nconst signer = Ethers.send(\"eth_requestAccounts\", [])[0];\n\n// Functions\nfunction getSalt(input) {\n  const utf8BytesValue = ethers.utils.toUtf8Bytes(input);\n  return ethers.utils.keccak256(utf8BytesValue);\n}\n\nfunction getCodeData() {\n  const iface = new ethers.utils.Interface(OWNABLE_PROXY_ABI);\n  const bytecode = ethers.utils.hexlify(getBytes(OWNABLE_PROXY_BYTECODE));\n  return ethers.utils.concat([\n    bytecode,\n    iface.encodeDeploy([multicallAddr, signer]),\n  ]);\n}\n\nfunction getCodeHash() {\n  const data = getCodeData();\n  return ethers.utils.keccak256(data);\n}\n\nfunction checkIsContract(address) {\n  try {\n    const code = Ethers.send(\"eth_getCode\", [address]);\n    const isContract = code !== undefined && code !== \"0x\";\n    return isContract;\n  } catch (error) {}\n}\n\nfunction checkContractAddress() {\n  if (props.accountNumber !== state.accountNumber) {\n    console.log(\"Call check contract\");\n    const create2Deployer = new ethers.Contract(\n      create2DeployerAddr,\n      CREATE2DEPLOYER_ABI,\n      Ethers.provider().getSigner()\n    );\n    create2Deployer\n      .computeAddress(props.salt, getCodeHash())\n      .then((address) => {\n        const isContract = checkIsContract(address);\n        console.log(\"Is contract: \", isContract);\n        State.update({\n          accountNumber: props.accountNumber,\n          contractAddress: address,\n          isDeployed: isContract,\n          isFetched: true,\n        });\n      });\n  }\n}\n\nfunction deploySuperCall() {\n  const create2Deployer = new ethers.Contract(\n    create2DeployerAddr,\n    CREATE2DEPLOYER_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  create2Deployer.deploy(0, props.salt, getCodeData());\n}\n\nif (!signer) {\n  return (\n    <div>\n      <h3>Please connect your wallet</h3>\n      <Web3Connect />\n    </div>\n  );\n}\n\nif (state.chainId === undefined && ethers !== undefined && signer) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({\n          chainId: chainIdData.chainId,\n          isDeployed: true,\n          isFetched: true,\n        });\n      }\n    });\n}\n\n// Main part\ninitState({\n  accountNumber: props.accountNumber,\n  contractAddress: \"\",\n  isDeployed: false,\n  isFetched: false,\n});\n\ncheckContractAddress();\n\nconsole.log(state.isFetched, state.isDeployed);\n\nreturn (\n  <div>\n    {state.isFetched && !state.isDeployed && (\n      <div>\n        <button className=\"mb-2 bg-blue-400 rounded\" onClick={deploySuperCall}>\n          Create\n        </button>\n      </div>\n    )}\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/sainy.near/widget/SupercallDeployer", "fact_widget_deployments_id": "c4716808ef03f61e4aa8800cbd428f4e", "inserted_timestamp": "2023-12-16T20:48:35.758Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}