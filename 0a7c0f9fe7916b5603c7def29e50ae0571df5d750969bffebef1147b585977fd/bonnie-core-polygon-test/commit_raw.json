{"tx_hash": "BurfrJhtkeS4dtrsr1G39MA2SzgA3pRG9JfB5LMEiJqZ", "action_id_social": "4mZysm3z9bkkJW6Ju2UqoZ8riGNMVdBnN3hCaofgRchn-0-widget", "block_id": 108230761, "block_timestamp": "2023-12-18T06:40:14.275Z", "signer_id": "0a7c0f9fe7916b5603c7def29e50ae0571df5d750969bffebef1147b585977fd", "widget_name": "bonnie-core-polygon-test", "source_code": "const ownerAddress = \"0x889A0622898e9780dc771F027aF1c53c0e1c53BF\";\nconst nftImageURL =\n  \"https://bitkubipfs.io/ipfs/QmbzXzcQjwG6kdQQbGDoDvcETn1KeEKEAnWTKycWrriauk\";\nconst glbFileURL = \"https://models.readyplayer.me/64ab8110ae49359d42d0b883.glb\";\n\nconst data = fetch(\n  \"https://www.bkcscan.com/api?module=account&action=tokenlist&address=${ownerAddress}\".replace(\n    \"${ownerAddress}\",\n    ownerAddress\n  ),\n  {\n    method: \"GET\",\n  }\n);\n\nconst frameWidth = 600;\nconst frameheight = 600;\nconst margin = 16;\nconst canvasWidth = frameWidth - margin;\nconst canvasHeight = frameheight - margin;\n\nconst CanvasContainer = styled.div`\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  text-align: center;\n  width: ${frameWidth}px;\n  height: ${frameheight}px;\n  background-color: #333333;\n\n  border-radius: 40px;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  text-align: center;\n  max-width: 600px;\n`;\n\nconst MainContainer = styled.div`\n  width: 100%;\n  padding-block: 32px;\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap:32px;\n`;\n\nconst ContentContainer = styled.div`\n  width: 100%;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 16px;\n`;\n\nconst code2 = `\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r126/three.min.js\"></script>\n<script src=\"https://unpkg.com/three@0.126.0/examples/js/loaders/GLTFLoader.js\"></script>\n<body>\n  <script>\n    const container = document.createElement('div');\n    document.body.appendChild(container);\n    const containerWidth = ${canvasWidth}; // Set your desired width\n    const containerHeight = ${canvasHeight}; // Set your desired height\n    container.style.width = containerWidth + 'px';\n    container.style.height = containerHeight + 'px';\n        \n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({alpha: true});\n\n    const canvasWidth = ${canvasWidth};\n    const canvasHeight = ${canvasHeight};\n    renderer.setSize(canvasWidth, canvasHeight);\n    renderer.setClearColor(0x000000, 0);\n    container.appendChild(renderer.domElement);\n\n    window.addEventListener('resize', () => {\n      const newWidth = ${canvasWidth};\n      const newHeight = ${canvasHeight};\n\n      camera.aspect = newWidth / newHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(newWidth, newHeight);\n    });\n\n    const planeGeometry = new THREE.PlaneGeometry(10, 10);\n    const planeMaterial = new THREE.ShadowMaterial({ opacity: 0.4 });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    plane.position.y = -2.6;\n    plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n    plane.scale.multiplyScalar(2);\n    plane.receiveShadow = true;\n\n    let loadedGroup = null;\n    const loader = new THREE.GLTFLoader();\n    loader.load(\"${glbFileURL}\", (gltf) => {\n      gltf.scene.traverse(function (child) {\n        if ((child).isMesh) {\n            const m = child\n            m.receiveShadow = true\n            m.castShadow = true                            \n        }\n      })\n                    \n      const model = gltf.scene;\n\n      scene.add(model);\n\n      loadedGroup = model;\n      loadedGroup.scale.multiplyScalar(3);\n      loadedGroup.position.y -= 2.5\n    });\n\n    const light = new THREE.DirectionalLight(0xffffff, 1);\n    light.position.set(0, 10, 0);\n    light.castShadow = true;\n\n    scene.add(light);\n\n    const ambientLight = new THREE.AmbientLight(0xFFFFFF);\n    ambientLight.intensity = 2.5;\n    scene.add( ambientLight );\n    renderer.shadowMap.enabled = true;\n\t\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    const animate = function () {\n      requestAnimationFrame(animate);\n\n      if(loadedGroup != null) {\n        loadedGroup.rotation.y += 0.01;\n      }\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  </script>\n</body>\n`;\n\nreturn data !== null ? (\n  <MainContainer>\n    <Header>\n      <h2 style={{ fontWeight: 600 }}>\n        Core Polygon : 3D NFT Proof of concept\n      </h2>\n      <p>Core Polygon : 3D NFT Proof of concept</p>\n    </Header>\n\n    <ContentContainer>\n      {true && (\n        <CanvasContainer>\n          {true && <iframe className=\"h-100 w-100\" srcDoc={code2} />}\n        </CanvasContainer>\n      )}\n      {data.status === 200 ? (\n        data.body.result\n          .filter((checkElem) => checkElem.type === \"ERC-721\")\n          .map((elem) => {\n            return (\n              <div>\n                <div>{elem.name}</div>\n                <img\n                  style={{\n                    width: 200,\n                    height: 200,\n                    objectFit: \"cover\",\n                  }}\n                  src={nftImageURL}\n                />\n              </div>\n            );\n          })\n      ) : (\n        <div>Fetching Error</div>\n      )}\n    </ContentContainer>\n  </MainContainer>\n) : (\n  <p>loading...</p>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0a7c0f9fe7916b5603c7def29e50ae0571df5d750969bffebef1147b585977fd/widget/bonnie-core-polygon-test", "fact_widget_deployments_id": "67ec56e190a1a4590ec427d616d79116", "inserted_timestamp": "2023-12-18T08:52:15.197Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}