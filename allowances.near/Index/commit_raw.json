{"tx_hash": "98S3MiFWhKUQ8p8VscyQfKtH2tiCZ1mpmbuprp1eDFa8", "action_id_social": "Bw3URidiCDzSqL7AVEeFtDPSPR593e4YnfZwKkb2uhBP-0-widget", "block_id": 104605096, "block_timestamp": "2023-10-31T09:54:01.238Z", "signer_id": "allowances.near", "widget_name": "Index", "source_code": "const networks = {\n  1: {\n    name: \"Ethereum Mainnet\",\n    url: \"https://eth.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://eth.blockscout.com/address/%address%\",\n  },\n  5: {\n    name: \"Ethereum Goerli\",\n    url: \"https://eth-goerli.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://eth-goerli.blockscout.com/address/%address%\",\n  },\n  11155111: {\n    name: \"Ethereum Sepolia\",\n    url: \"https://eth-sepolia.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://eth-sepolia.blockscout.com/address/%address%\",\n  },\n  137: {\n    name: \"Polygon\",\n    url: \"https://polygon.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://polygon.blockscout.com/address/%address%\",\n  },\n  61: {\n    name: \"Ethereum Classic\",\n    url: \"https://etc.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://etc.blockscout.com/address/%address%\",\n  },\n  100: {\n    name: \"Gnosis\",\n    url: \"https://gnosis.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://gnosis.blockscout.com/address/%address%\",\n  },\n  10: {\n    name: \"Optimism\",\n    url: \"https://optimism.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://optimism.blockscout.com/address/%address%\",\n  },\n  420: {\n    name: \"Optimism Goerli\",\n    url: \"https://optimism-goerli.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://optimism-goerli.blockscout.com/address/%address%\",\n  },\n  245022934: {\n    name: \"Neon\",\n    url: \"https://neon.blockscout.com/api?module=account&action=txlist&address=%sender%\",\n    explorer: \"https://neon.blockscout.com/address/%address%\",\n  },\n};\n\n// Load ERC20 ABI JSON\nconst erc20Abi = fetch(\n  \"https://ipfs.near.social/ipfs/bafkreifgw34kutqcnusv4yyv7gjscshc5jhrzw7up7pdabsuoxfhlnckrq\"\n);\n\n// Load ERC721 ABI JSON\nconst erc721Abi = fetch(\n  \"https://ipfs.near.social/ipfs/bafkreid6rp5rf2xagdejznvvv5hoz7wtuupcvehrxkrznrdckkj7onuije\"\n);\nif (!erc20Abi.ok || !erc721Abi.ok) {\n  return \"Loading\";\n}\n\n// Create contract interface\nconst ifaceERC20 = new ethers.utils.Interface(erc20Abi.body);\nconst ifaceERC721 = new ethers.utils.Interface(erc721Abi.body);\n\nconst approvalHash = \"0x095ea7b3\";\nconst unlimitedAllowance =\n  \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\nconst etherProviderEnabled = !!Ethers?.provider();\n\nconst dataLoadedFor = () => `${state.chainId}_${state.sender}`;\n\nconst setContractName = (contractAddress, value) => {\n  const prevContractNames = state.contractNames ?? {};\n  prevContractNames[contractAddress] = value;\n  State.update({\n    contractNames: prevContractNames,\n  });\n};\n\nconst getAllowanceKey = (tokenContractId, spenderContractId) =>\n  `${tokenContractId}_${spenderContractId}`;\n\nconst loadContractName = (contractAddress) => {\n  if (!contractAddress) return;\n\n  const alreadyLoaded = Object.keys(state.contractNames ?? {}).some(\n    (address) => address == contractAddress\n  );\n\n  if (!alreadyLoaded) {\n    Ethers.provider()\n      .call({\n        to: contractAddress,\n        data: ifaceERC20.encodeFunctionData(\"name\", []),\n      })\n      .then((rawResponse) => {\n        setContractName(\n          contractAddress,\n          ifaceERC20.decodeFunctionResult(\"name\", rawResponse)\n        );\n      })\n      .catch(() => {\n        setContractName(contractAddress, contractAddress);\n      });\n\n    State.update({ contractNames });\n  }\n};\n\nconst getDataUrl = (sender) => {\n  return networks[state.chainId ?? 1].url.replace(\"%sender%\", sender);\n};\n\nconst getExporerUrl = (address) => {\n  return networks[state.chainId ?? 1].explorer.replace(\"%address%\", address);\n};\n\nif (etherProviderEnabled) {\n  Ethers.provider()\n    .send(\"eth_chainId\", [])\n    .then((chainId) => {\n      chainId = parseInt(chainId, 16);\n      if (state.chainId !== chainId) {\n        console.log(\"Set chainId\", chainId);\n        State.update({ chainId });\n      }\n    });\n\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length && state.sender !== accounts[0]) {\n        console.log(\"Set sender\", accounts[0]);\n        State.update({ sender: accounts[0] });\n      }\n    });\n\n  useEffect(() => {\n    if (state.dataLoadedFor != dataLoadedFor()) {\n      const dataUrl = getDataUrl(state.sender);\n      console.log(\"Loading tx data\", dataUrl);\n\n      State.update({\n        dataLoadedFor: dataLoadedFor(),\n      });\n\n      asyncFetch(dataUrl).then((fetchData) => {\n        const txData = fetchData.body;\n        if (txData.status === \"1\") {\n          State.update({\n            txData: txData.result,\n            allowances: undefined,\n            contracts: undefined,\n          });\n        } else {\n          console.log(\"Service unavailable\", txData.status);\n        }\n      });\n    }\n  }, [state.chainId, state.sender, state.dataLoadedFor]);\n\n  if (state.txData && state.allowances === undefined) {\n    const approvals = state.txData\n      .filter((tx) => tx.input.startsWith(approvalHash))\n      .sort((a, b) => {\n        if (a.blockNumber < b.blockNumber) return -1;\n        if (a.blockNumber > b.blockNumber) return 1;\n        return 0;\n      });\n\n    const allowancesObject = approvals.reduce((allowances, tx) => {\n      let allowance;\n      const allowanceUnEdited = tx.input.substring(74);\n      if (allowanceUnEdited.includes(unlimitedAllowance)) {\n        allowance = \"unlimited\";\n      } else {\n        allowance = \"some\";\n      }\n      const tokenContractId = ethers.utils.getAddress(tx.to);\n      const spenderContractId = ethers.utils.getAddress(\n        \"0x\" + tx.input.substring(34, 74)\n      );\n\n      const allowanceKey = getAllowanceKey(tokenContractId, spenderContractId);\n\n      if (parseInt(allowanceUnEdited, 16) !== 0) {\n        allowances[allowanceKey] = {\n          tokenContractId,\n          spenderContractId,\n          allowance,\n          allowanceUnEdited,\n        };\n      } else {\n        delete allowances[allowanceKey];\n      }\n\n      return allowances;\n    }, {});\n\n    State.update({ allowances: allowancesObject });\n  }\n}\n\nconst isERC721 = (contractAddress, allowanceUnEdited) => {\n  return Ethers.provider()\n    .call({\n      to: contractAddress,\n      data: ifaceERC721.encodeFunctionData(\"ownerOf\", [\n        parseInt(allowanceUnEdited, 16),\n      ]),\n    })\n    .then((rawResponse) => {\n      console.log(\n        \"ownerOf\",\n        ifaceERC20.decodeFunctionResult(\"ownerOf\", rawResponse)\n      );\n      return true;\n    })\n    .catch(() => {\n      return false;\n    });\n};\n\nconst revoke = (contractAddress, spenderAddress, allowanceUnEdited) => {\n  if (!contractAddress || !spenderAddress) {\n    return;\n  }\n\n  isERC721(contractAddress, allowanceUnEdited).then((is721) => {\n    if (is721) {\n      //revoke erc721 by nulling the address\n      const contract = new ethers.Contract(\n        contractAddress,\n        ifaceERC721,\n        Ethers.provider().getSigner()\n      );\n\n      contract\n        .approve(0, allowanceUnEdited)\n        .then((tx) => {\n          console.log(\"erc721 tx\", tx);\n        })\n        .catch((ex) => {\n          console.log(\"Failed\", ex);\n        });\n    } else {\n      // revoke erc20 by nulling approval amount\n      const contract = new ethers.Contract(\n        contractAddress,\n        ifaceERC20,\n        Ethers.provider().getSigner()\n      );\n\n      contract\n        .approve(spenderAddress, 0)\n        .then((tx) => {\n          console.log(\"erc20 tx\", tx);\n        })\n        .catch((ex) => {\n          console.log(\"Failed\", ex);\n        });\n    }\n  });\n};\n\nuseEffect(() => {\n  Object.keys(state.allowances ?? {}).map((contractId) => {\n    loadContractName(state.allowances[contractId].tokenContractId);\n    loadContractName(state.allowances[contractId].spenderContractId);\n  });\n}, [state.allowances]);\n\nconst columnStyles = [\n  \"col-md-3 col-sm-12 text-truncate\",\n  \"col-md-5 col-sm-12 text-truncate\",\n  \"col-md-2 col-sm-12\",\n  \"col-md-2 col-sm-12\",\n];\n\nconst Theme = styled.div`\n    .header {\n        font-weight: bold\n    }\n`;\n\nconst styleAllowance = (allowance) => {\n  if (allowance == \"some\") {\n    return <span class=\"badge bg-info\">Some</span>;\n  } else if (allowance == \"unlimited\") {\n    return <span class=\"badge bg-primary\">Unlimited</span>;\n  } else return allowance;\n};\n\nconst switchNetwork = (chainId) => {\n  if (etherProviderEnabled && chainId) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: ethers.utils.hexValue(chainId) },\n    ]);\n  }\n};\n\nreturn (\n  <Theme>\n    <div className=\"container\">\n      <div className=\"row\">\n        <h2 class=\"card-title\">Find & revoke token allowances</h2>\n        <h6 class=\"card-subtitle mb-2 text-muted\">\n          This tool scans your EVM-Compatible Blockchain transactions to\n          identify approval transactions, which you can then revoke\n        </h6>\n\n        {!state.sender && (\n          <div class=\"mb-3\">\n            <Web3Connect connectLabel=\"Connect Web3 Wallet to continue\" />\n          </div>\n        )}\n\n        {etherProviderEnabled && (\n          <div class=\"input-group mb-2 justify-content-end\">\n            <span class=\"input-group-text\">\n              Current chain: {networks[state.chainId].name}\n            </span>\n            <button\n              class=\"btn btn-outline-secondary dropdown-toggle\"\n              type=\"button\"\n              data-bs-toggle=\"dropdown\"\n              aria-expanded=\"false\"\n            >\n              Switch chain\n            </button>\n            <ul class=\"dropdown-menu\">\n              {Object.keys(networks ?? {}).map((networkId) => (\n                <li>\n                  <a\n                    class=\"dropdown-item\"\n                    href=\"#\"\n                    onClick={(e) => switchNetwork(Number(networkId))}\n                  >\n                    {networks[networkId].name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n\n            <button\n              class=\"btn btn-outline-secondary\"\n              onClick={() => {\n                State.update({\n                  allowances: undefined,\n                  dataLoadedFor: undefined,\n                });\n              }}\n            >\n              Refresh\n            </button>\n          </div>\n        )}\n\n        <div class=\"card p-0\">\n          <div class=\"card-header ps-3 pe-2\">\n            <div class=\"container\">\n              <div class=\"row\">\n                <div class={`header ${columnStyles[0]}`}>Token</div>\n                <div class={`header ${columnStyles[1]}`}>Spender</div>\n                <div class={`header ${columnStyles[2]}`}>Allowance</div>\n                <div class={`header ${columnStyles[3]}`}>Action</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"ps-2 pe-2 overflow-hidden\">\n            {!etherProviderEnabled && (\n              <div class=\"row p-2\">\n                <div class=\"col col-12 text-center\">\n                  Connect Web3 Wallet to view your transactions\n                </div>\n              </div>\n            )}\n            {(state.allowances == undefined || state.allowances.length == 0) &&\n              etherProviderEnabled && (\n                <div class=\"row p-2\">\n                  <div class=\"col col-12 text-center\">No data</div>\n                </div>\n              )}\n            {Object.keys(state.allowances ?? {}).map((allowanceKey) => {\n              const item = state.allowances[allowanceKey];\n              return (\n                <div class=\"row border-bottom pt-1 pb-1 align-items-center\">\n                  <div class={columnStyles[0]}>\n                    <a\n                      href={getExporerUrl(item.tokenContractId)}\n                      class=\"text-dark\"\n                      target=\"_blank\"\n                    >\n                      {state.contractNames[item.tokenContractId]}\n                    </a>\n                  </div>\n                  <div class={columnStyles[1]}>\n                    <a\n                      href={getExporerUrl(item.spenderContractId)}\n                      class=\"text-dark\"\n                      target=\"_blank\"\n                    >\n                      {state.contractNames[item.spenderContractId]}\n                    </a>\n                  </div>\n                  <div class={columnStyles[2]}>\n                    {styleAllowance(item.allowance)}\n                  </div>\n                  <div class={columnStyles[3]}>\n                    <button\n                      class=\"btn btn-outline-primary btn-sm\"\n                      disabled={!state.sender}\n                      onClick={() =>\n                        revoke(\n                          item.tokenContractId,\n                          item.spenderContractId,\n                          item.allowanceUnEdited\n                        )\n                      }\n                    >\n                      Revoke\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {state.sender && (\n          <div class=\"pt-5\">\n            <Web3Connect />\n            <div class=\"pt-2 text-secondary\">\n              <pre>Current account: {state.sender}</pre>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/allowances.near/widget/Index", "fact_widget_deployments_id": "22ff2612229e4e3bc02364e26b5987ad", "inserted_timestamp": "2023-10-31T11:42:43.544Z", "modified_timestamp": "2023-10-31T11:42:43.544Z", "__row_index": 0}