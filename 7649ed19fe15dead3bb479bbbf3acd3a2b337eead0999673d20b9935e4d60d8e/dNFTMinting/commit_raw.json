{"tx_hash": "Dek7MUkZ64banvFWboRee4YeoNCZdWivUdiZyo8rzj8P", "action_id_social": "Hn16nvedtdjkr1mz6KFPxrtZC3VZo6WooaN5CABp3svP-0-widget", "block_id": 101751737, "block_timestamp": "2023-09-23T05:12:37.085Z", "signer_id": "7649ed19fe15dead3bb479bbbf3acd3a2b337eead0999673d20b9935e4d60d8e", "widget_name": "dNFTMinting", "source_code": "let accountId = context.accountId;\nconst profile = socialGetr(`${accountId}/profile`);\n\nlet cid = props.cid ?? \"\";\nlet image = props.image;\nconst mintButton = props.mintButton ?? \"Mint\";\n\nconst title = props.title ?? \"Example title\";\nconst receiver = props.receiver ?? \"Example.near or Address\";\n\nif (image) {\n  cid = image.cid;\n  console.log(\"Image CID: \" + cid);\n}\n\nlet description = props.description ?? \"Proof of Vibes powered by dNFT\";\n\nif (profile === null) {\n  IpfsImageUpload();\n  return \"Loading\";\n}\n\n// check My dNFT\n\nconst contractId = \"nft.genadrop.near\";\n\nif (!contractId) {\n  return `Missing prop \"contractId\"`;\n}\n\nif (!accountId) {\n  return `Missing prop \"accountId\"`;\n}\n\nconst nfts = Near.view(contractId, \"nft_tokens_for_owner\", {\n  account_id: accountId,\n  from_index: \"0\",\n  limit: 200,\n});\n\nif (!nfts) {\n  return \"\";\n}\n\nconst size = \"3em\";\n\nState.init({\n  cid: cid,\n  description: description,\n  title: title,\n  image: image,\n  receiver: receiver,\n  //   image: \"\",\n\n  img1: null,\n  text1: null,\n  num1: null,\n\n  img2: null,\n  text2: null,\n  num2: null,\n\n  img3: null,\n  text3: null,\n  num3: null,\n\n  selectedType: \"none\",\n  selectedLocation: \"none\",\n  selectedCoin: \"none\",\n});\n\nconst handleMint = () => {\n  if (!state.image.cid) {\n    return;\n  }\n  if (!accountId) {\n    console.log(\"Please login\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please log in before continuing\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.title) {\n    console.log(\"Please Enter title\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    const attrdesc = {\n      description: state.description,\n      img1: state.img1,\n      text1: state.text1,\n      num1: state.num1,\n\n      img2: state.img2,\n      text2: state.text2,\n      num2: state.num2,\n\n      img3: state.img3,\n      text3: state.text3,\n      num3: state.num3,\n    };\n\n    const desc = JSON.stringify(attrdesc);\n    const metadata = {\n      name: state.title,\n      description: `dnft: ${state.selectedType}: ${\n        state.selectedLocation || state.selectedCoin\n      } ${desc}`,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      const cid = res.body.cid;\n      const gas = 200000000000000;\n      const deposit = 11450000000000000000000;\n\n      Near.call([\n        {\n          contractName: \"nft.genadrop.near\",\n          methodName: \"nft_mint\",\n          args: {\n            token_id: `${Date.now()}`,\n            metadata: {\n              title: state.title,\n              description: `dnft: ${state.selectedType}: ${\n                state.selectedLocation || state.selectedCoin\n              } ${desc}`,\n              properties: [],\n              media: `https://ipfs.io/ipfs/${state.image.cid}`,\n              reference: `ipfs://${cid}`,\n            },\n            receiver_id: state.receiver,\n          },\n          gas: gas,\n          deposit: deposit,\n        },\n      ]);\n    });\n  }\n};\n\ninitState({\n  title: \"\",\n  description: \"\",\n  showAlert: false,\n  toastMessage: \"\",\n});\n\nconst onChangeTitle = (title) => {\n  State.update({\n    title,\n  });\n};\nconst onChangeReceiver = (receiver) => {\n  State.update({\n    receiver,\n  });\n};\n\nconst onChangeType = (value) => {\n  if (state.selectedLocation) {\n    State.update({\n      selectedLocation: \"\",\n    });\n  }\n  if (state.selectedCoin) {\n    State.update({\n      selectedCoin: \"\",\n    });\n  }\n  State.update({\n    selectedType: value,\n  });\n};\nconst onChangeLocation = (value) => {\n  if (state.selectedCoin) {\n    State.update({\n      selectedCoin: \"\",\n    });\n  }\n  State.update({\n    selectedLocation: value,\n  });\n};\n\nconst onChangeCoin = (value) => {\n  if (state.selectedLocation) {\n    State.update({\n      selectedLocation: \"\",\n    });\n  }\n  State.update({\n    selectedCoin: value,\n  });\n};\n\nconst onChangeDesc = (description) => {\n  State.update({\n    description,\n  });\n};\n\nif (!accountId) {\n  console.log(\"Please login\");\n  State.update({\n    showAlert: true,\n    toastMessage: \"Please log in before continuing\",\n  });\n}\n\nconst Container = styled.div`\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n`;\n\nconst SmallContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  \n`;\n\nconst CenteredDiv = styled.div`\ndisplay: flex;\n  flex-direction: column;\n  border: 1px solid #828282; \n  border-radius: 10px; \n  padding: 25px;\n  margin: 10px; \n  text-align: center;\n   & > *:not(:last-child) {\n    margin-bottom: 10px;\n  }\n  transition: background-color 0.3s ease; \n   &:hover {\n    background-color: #f0f0f0; /* Change background color to gray on hover */\n  }\n`;\n\nconst FlexContainer = styled.div`\n  display: grid;\n  grid-template-columns: 300px 3fr; \n  \n`;\n\nconst ImageUploadCard = styled.div`\ndisplay:flex;\nflex-flow: column nowrap;\nalign-items: center;\n  width:80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\n  margin:30px auto;\n  padding:1.5rem;\n  text-align: center;\n`;\nconst Main = styled.div`\nposition:relative;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst Heading = styled.p`\n  margin: 10px auto 10px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst Text = styled.p`\nfont-size: .9rem;\ncolor: #525c76;\nline-height:1.rem;\nmargin: 3px;\n`;\n\nconst Card = styled.div`\n\npadding: 1em;\nborder: 1px solid #ccc;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n`;\n\nconst ImageCard = styled.div`\n\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height:fit-content;\n  max-height:500px;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  &>img{\n  object-fit: contain;\n  }\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n`;\n\nconst ParentDiv = styled.div`\n  border-radius: 10px; \n  justify-content: space-between;\n  align-items: center;\n  padding: 10px; \n  border: 1px solid #ccc; \n`;\n\nconst ChildDiv = styled.div`\n  margin-top: 20px;\n \n   border-top: 3px solid #ccc; \n`;\n\nconst SpanDiv = styled.div`\n  margin-top: 5px;\n   font-size: 1.25rem; \n`;\n\nconst DnftDiv = styled.div`\n  margin-top: 10px;\n  \n`;\n\nconst text1Change = (e) => {\n  if (e) {\n    State.update({ text1: e.target.value });\n  }\n};\nconst num1Change = (e) => {\n  if (e) {\n    State.update({ num1: e.target.value });\n  }\n};\nconst text2Change = (e) => {\n  if (e) {\n    State.update({ text2: e.target.value });\n  }\n};\nconst num2Change = (e) => {\n  if (e) {\n    State.update({ num2: e.target.value });\n  }\n};\nconst text3Change = (e) => {\n  if (e) {\n    State.update({ text3: e.target.value });\n  }\n};\nconst num3Change = (e) => {\n  if (e) {\n    State.update({ num3: e.target.value });\n  }\n};\n\nreturn (\n  <Container>\n    <div className=\"container\">\n      <div className=\"content\">\n        <FlexContainer>\n          <ParentDiv>\n            <Widget src=\"7649ed19fe15dead3bb479bbbf3acd3a2b337eead0999673d20b9935e4d60d8e/widget/Profile\" />\n\n            <ChildDiv>\n              <SpanDiv>My dNFT</SpanDiv>\n              <DnftDiv>\n                <div className=\"d-flex gap-1 flex-wrap\">\n                  {nfts\n                    .filter((nft) => {\n                      const metadata = nft.metadata;\n                      if (metadata && metadata.description) {\n                        const words = metadata.description.split(\" \");\n                        return words[0] === \"dnft:\";\n                      }\n                      return false;\n                    })\n                    .map((nft) => (\n                      <a\n                        className=\"text-decoration-none\"\n                        href={`https://app.mynearwallet.com/nft-detail/nft.genadrop.near/${nft.token_id}`}\n                      >\n                        <Widget\n                          src=\"mob.near/widget/NftImage\"\n                          props={{\n                            nft: { tokenId: nft.token_id, contractId },\n                            style: {\n                              width: size,\n                              height: size,\n                              objectFit: \"cover\",\n                              minWidth: 90,\n                              minHeight: 90,\n                              maxWidth: size,\n                              maxHeight: size,\n                              overflowWrap: \"break-word\",\n                            },\n                            thumbnail: \"thumbnail\",\n                            className: \"rounded\",\n                            fallbackUrl:\n                              \"https://ipfs.near.social/ipfs/bafkreihdiy3ec4epkkx7wc4wevssruen6b7f3oep5ylicnpnyyqzayvcry\",\n                            alt: `NFT ${contractId} ${nft.token_id}`,\n                          }}\n                        />\n                      </a>\n                    ))}\n                </div>\n              </DnftDiv>\n            </ChildDiv>\n          </ParentDiv>\n\n          <div>\n            <Widget\n              src=\"7649ed19fe15dead3bb479bbbf3acd3a2b337eead0999673d20b9935e4d60d8e/widget/Headers\"\n              props={{ topText: \"Mint!\", bottomText: \"dNFT\" }}\n            />\n\n            <Main className=\"container-fluid\">\n              <div>\n                <Card className=\"d-flex flex-column align-items-center\">\n                  {!!state.image.cid ?? (\n                    <ImageCard>\n                      <img\n                        src={`https://ipfs.io/ipfs/` + state.image.cid}\n                        alt=\"uploaded image\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        className=\"rounded-3\"\n                      />\n                    </ImageCard>\n                  )}\n                  <div>\n                    \ud83d\uddbc\ufe0f Main Image :\n                    <IpfsImageUpload\n                      image={state.image}\n                      className=\"btn btn-outline-primary border-0 rounded-3\"\n                    />\n                  </div>\n                </Card>\n\n                <Card>\n                  <h5>dNFT Details</h5>\n                  <Card>\n                    Title:\n                    <Input\n                      type=\"text\"\n                      onChange={(e) => onChangeTitle(e.target.value)}\n                      placeholder={state.title}\n                    />\n                  </Card>\n                  <Card>\n                    Description:\n                    <TextArea\n                      type=\"text\"\n                      onChange={(e) => onChangeDesc(e.target.value)}\n                      placeholder={state.description}\n                    />\n                  </Card>\n                  <Card>\n                    Receiver:\n                    <Input\n                      type=\"text\"\n                      onChange={(e) => onChangeReceiver(e.target.value)}\n                      placeholder={state.receiver}\n                    />\n                  </Card>\n                  <Card>\n                    dNFT Type:\n                    <select\n                      value={state.selectedType}\n                      onChange={(e) => onChangeType(e.target.value)}\n                    >\n                      <option value=\"none\">Select a Type</option>\n                      <option value=\"Weather\">Weather</option>\n                      <option value=\"NearSocial\">Near Social</option>\n                      <option value=\"NearSocialHeart\">Social Heart</option>\n                      <option value=\"NearComponent\">Near Component</option>\n                      <option value=\"CoinPrice\">Coin Price</option>\n                    </select>\n                    {state.selectedType === \"Weather\" ? (\n                      <select\n                        value={state.selectedLocation}\n                        onChange={(e) => onChangeLocation(e.target.value)}\n                      >\n                        <option value=\"\">Select a Location</option>\n                        <option value=\"Seoul\">Seoul</option>\n                        <option value=\"London\">London</option>\n                        <option value=\"NewYork\">New York</option>\n                        <option value=\"Beijing\">Beijing</option>\n                      </select>\n                    ) : state.selectedType === \"CoinPrice\" ? (\n                      <select\n                        value={state.selectedCoin}\n                        onChange={(e) => onChangeCoin(e.target.value)}\n                      >\n                        <option value=\"\">Select a Coin</option>\n                        <option value=\"bitcoin\">Bitcoin</option>\n                        <option value=\"ethereum\">Ethereum</option>\n                        <option value=\"near\">Near Protocol</option>\n                        <option value=\"dogecoin\">Dogecoin</option>\n                      </select>\n                    ) : (\n                      \"\"\n                    )}\n                    <div>\n                      {state.selectedType === \"CoinPrice\"\n                        ? \"\u2705 NFT changes based on the coin price. Text: Title. Number: Minimum USD\"\n                        : state.selectedType === \"NearSocial\"\n                        ? \"\u2705 NFT change based on the number of posts you publish on near social. Text: Title. Number: Minimum number of posts\"\n                        : state.selectedType === \"Weather\"\n                        ? \"\u2705 NFT change based on the weather. #1: \u2600\ufe0f #2: \ud83c\udf27\ufe0f #3: \u2601\ufe0f\"\n                        : state.selectedType === \"NearComponent\"\n                        ? \"\u2705 NFT change based on the number of component you publish on BOS. Text: Title. Number: Minimum number of Component\"\n                        : state.selectedType === \"NearSocialHeart\"\n                        ? \"\u2705 NFT change based on the number of \u2764\ufe0f you receive on near social. Text: Title. Number: Minimum number of \u2764\ufe0f.\"\n                        : \"\"}\n                    </div>\n                  </Card>\n\n                  <SmallContainer>\n                    <CenteredDiv>\n                      <span># 1</span>\n                      <IpfsImageUpload image={state.img1} />\n                      <input onChange={text1Change} placeholder=\"Text\" />\n                      <input onChange={num1Change} placeholder=\"Number\" />\n                    </CenteredDiv>\n\n                    <CenteredDiv>\n                      <span># 2</span>\n                      <IpfsImageUpload image={state.img2} />\n                      <input onChange={text2Change} placeholder=\"Text\" />\n                      <input onChange={num2Change} placeholder=\"Number\" />\n                    </CenteredDiv>\n\n                    <CenteredDiv>\n                      <span># 3</span>\n                      <IpfsImageUpload image={state.img3} />\n                      <input onChange={text3Change} placeholder=\"Text\" />\n                      <input onChange={num3Change} placeholder=\"Number\" />\n                    </CenteredDiv>\n                  </SmallContainer>\n                </Card>\n\n                <div className=\"d-flex justify-content-center mb-2\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    onClick={handleMint}\n                  >\n                    {mintButton}\n                  </button>\n                </div>\n              </div>\n\n              {state.showAlert && (\n                <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n              )}\n            </Main>\n          </div>\n        </FlexContainer>\n      </div>\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/7649ed19fe15dead3bb479bbbf3acd3a2b337eead0999673d20b9935e4d60d8e/widget/dNFTMinting", "fact_widget_deployments_id": "74e5038af268e78661900d700316c35c", "inserted_timestamp": "2023-09-23T06:47:17.765Z", "modified_timestamp": "2023-09-23T06:47:17.765Z", "__row_index": 1}