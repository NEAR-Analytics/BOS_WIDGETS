{"tx_hash": "Bk89UvjkKRn1E52qjYSW7V1QJ65MruyeWTYsGXvKDX7X", "action_id_social": "BUh7TDy4fE2eDKQMCrC2zTGGbUQu54tbHZN6b54YEWxH-0-widget", "block_id": 98864631, "block_timestamp": "2023-08-15T13:39:57.982Z", "signer_id": "nomination.ndctools.near", "widget_name": "NDC.Nomination.Page", "source_code": "let { ids, dev } = props;\nids = props.ids ? ids : [1, 2, 3];\n\nconst electionContract = \"elections-v1.gwg-testing.near\";\nconst registryContract = dev\n  ? \"registry-v1.gwg-testing.near\"\n  : \"registry.i-am-human.near\";\nconst issuer = dev ? \"fractal.i-am-human.near\" : \"community.i-am-human.near\";\nconst nominationContract = dev\n  ? \"nominations-v1.gwg-testing.near\"\n  : \"nominations.ndc-gwg.near\";\nconst apiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nfunction handleSelfRevoke() {\n  Near.call(nominationContract, \"self_revoke\");\n}\n\nconst widgets = {\n  header: \"election.ndctools.near/widget/NDC.Elections.Header\",\n  card: \"nomination.ndctools.near/widget/NDC.Nomination.Card\",\n  houses: \"election.ndctools.near/widget/NDC.Elections.Houses\",\n  filter: \"election.ndctools.near/widget/NDC.Elections.Filter\",\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  verifyHuman: \"nomination.ndctools.near/widget/NDC.VerifyHuman\",\n  compose: \"nomination.ndctools.near/widget/NDC.Nomination.Compose\",\n  deleteNomination:\n    \"nomination.ndctools.near/widget/NDC.Nomination.DeleteNomination\",\n};\n\nState.init({\n  selectedHouse: ids[0],\n  house: \"HouseOfMerit\",\n  start: true,\n  nominations: [],\n  sbt: false,\n  og: false,\n  selfNomination: false,\n  search: false,\n  candidateId: \"\",\n  originNominations: [],\n  notFound: \"There are no active nominations at the moment\",\n  loading: false,\n});\n\nconst time = Near.view(nominationContract, \"active_time\", {});\n\nconst httpRequestOpt = {\n  headers: { \"x-api-key\": apiKey },\n};\n\nconst baseApi = \"https://api.pikespeak.ai\";\n\nconst endpoints = {\n  candidateComments: `${baseApi}/nominations/candidates-comments-and-upvotes?candidate=${context.accountId}&contract=${nominationContract}`,\n  houseNominations: (house) =>\n    `${baseApi}/nominations/house-nominations?house=${house}&contract=${nominationContract}`,\n};\n\nfunction getVerifiedHuman() {\n  const sbtTokens = Near.view(registryContract, \"sbt_tokens\", {\n    issuer: \"fractal.i-am-human.near\",\n  });\n  const ogTokens = Near.view(registryContract, \"sbt_tokens\", {\n    issuer,\n  });\n\n  asyncFetch(endpoints.candidateComments, httpRequestOpt).then((res) => {\n    if (res.body.length > 0) {\n      State.update({ selfNomination: true });\n    }\n  });\n\n  State.update({\n    og: ogTokens.some((sbt) => sbt.owner === context.accountId),\n    sbt: sbtTokens.some((sbt) => sbt.owner === context.accountId),\n  });\n}\n\nfunction getNominationInfo(house) {\n  let nominationsArr = [];\n\n  State.update({ loading: true });\n\n  asyncFetch(endpoints.houseNominations(house), httpRequestOpt).then((res) => {\n    if (res.body.length <= 0) {\n      State.update({ nominations: [], loading: false });\n      return;\n    }\n\n    for (const [i, data] of res.body.entries()) {\n      let objCard = { indexerData: data };\n      let nominee = data.nominee;\n\n      asyncFetch(\n        `${baseApi}/nominations/candidates-comments-and-upvotes?candidate=${data.nominee}&contract=${nominationContract}`,\n        httpRequestOpt\n      ).then((info) => {\n        let upVoteInfo = info.body[0];\n        let profileData;\n        let nominationData;\n        Social.getr(`${nominee}/profile`);\n        Social.getr(`${nominee}/nominations`);\n        setTimeout(() => {\n          profileData = Social.getr(`${nominee}/profile`);\n          nominationData = Social.getr(`${nominee}/nominations`);\n        }, 100);\n\n        setTimeout(() => {\n          if (data.is_revoked || !profileData || !nominationData) {\n            State.update({ loading: false });\n            return;\n          }\n\n          objCard = {\n            profileData: profileData,\n            nominationData: nominationData,\n            upVoteData: upVoteInfo,\n            ...objCard,\n          };\n          nominationsArr.push(objCard);\n\n          State.update({\n            nominations: nominationsArr,\n            originNominations: nominationsArr,\n            loading: false,\n          });\n        }, 1000);\n      });\n    }\n  });\n}\n\nif (state.start) {\n  getNominationInfo(\"HouseOfMerit\");\n  getVerifiedHuman();\n\n  State.update({ start: false });\n}\n\nconst handleSelect = (item) => {\n  switch (item.id) {\n    case 1:\n      getNominationInfo(\"HouseOfMerit\");\n      break;\n    case 2:\n      getNominationInfo(\"CouncilOfAdvisors\");\n      break;\n    case 3:\n      getNominationInfo(\"TransparencyCommission\");\n      break;\n  }\n  State.update({ selectedHouse: item.id });\n};\n\nconst handleFilter = (e) => {\n  const text = e.target.value;\n\n  State.update({ candidateId: text });\n\n  if (text.length > 0) {\n    let filtered = state.originNominations.filter((data) => {\n      const affiliations = JSON.parse(data.nominationData.afiliation);\n      const companyNames =\n        affiliations?.length > 0 &&\n        affiliations.map((af) => af.company_name.toLowerCase());\n\n      return (\n        data.profileData.name.toLowerCase().includes(text.toLowerCase()) ||\n        (companyNames &&\n          companyNames.some((c) => c.includes(text.toLowerCase())))\n      );\n    });\n\n    if (filtered.length > 0) State.update({ nominations: filtered });\n    else\n      State.update({\n        notFound: \"There are no such candidates or affiliations\",\n        nominations: [],\n      });\n  } else {\n    State.update({ nominations: state.originNominations });\n  }\n};\n\nconst Container = styled.div`\n  padding: 30px 0;\n  margin: 0;\n`;\n\nconst ActivityContainer = styled.div`\n  overflow-y: scroll;\n`;\n\nconst Left = styled.div`\n  padding: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst Center = styled.div``;\n\nconst H5 = styled.h5`\n  margin-bottom: 20px;\n`;\n\nconst ButtonNominateContainer = styled.div`\n  padding: 16px;\n  border-radius: 8px;\n  background: #f8f8f9;\n`;\n\nconst Filter = styled.div`\n  margin-top: 32px;\n\n  @media only screen and (max-width: 1061px) {\n    flex-direction: column;\n  }\n`;\n\nconst Toolbar = styled.div`\n  margin-left: 20px;\n  @media only screen and (max-width: 1061px) {\n    margin: 10px 0 0 0;\n  }\n`;\n\nconst Loader = () => (\n  <span\n    className=\"spinner-grow spinner-grow-sm me-1\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  />\n);\n\nreturn (\n  <>\n    <div>\n      <Widget\n        src={widgets.header}\n        props={{\n          startTime: time ? time[0] : 0,\n          endTime: time ? time[1] : 0,\n          type: \"Nomination\",\n        }}\n      />\n      <Filter className=\"d-flex\">\n        <div className=\"w-100\">\n          <Widget\n            src={widgets.filter}\n            props={{\n              handleFilter,\n              candidateId: state.candidateId,\n              placeholder: \"Search by candidate name and affiliation\",\n            }}\n          />\n        </div>\n        {state.og && (\n          <Toolbar>\n            <ButtonNominateContainer>\n              {state.selfNomination ? (\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      className: \"danger primary\",\n                      text: \"Delete Self Nomination\",\n                      onClick: () => State.update({ showModalDelete: true }),\n                      icon: <i class=\"bi bi-trash\"></i>,\n                    },\n                  }}\n                />\n              ) : (\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      text: \"Self Nominate\",\n                      onClick: () => State.update({ showModal: true }),\n                      icon: <i class=\"bi bi-plus-lg\"></i>,\n                    },\n                  }}\n                />\n              )}\n            </ButtonNominateContainer>\n          </Toolbar>\n        )}\n      </Filter>\n      <Container className=\"d-flex row justify-content-between w-100\">\n        <Left className=\"col-lg\">\n          <H5>Houses</H5>\n          <Widget\n            src={widgets.houses}\n            props={{\n              selectedHouse: state.selectedHouse,\n              electionContract,\n              handleSelect: (item) => handleSelect(item),\n            }}\n          />\n          <div>\n            {!state.sbt && (\n              <div className=\"mt-5\">\n                <Widget\n                  src={widgets.verifyHuman}\n                  props={{\n                    title: \"To Comment or to Upvote\",\n                    description: \"Verify as a Human to comment or to Upvote\",\n                    small: true,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </Left>\n        <Center className=\"col-lg-9 px-2 px-md-3 d-flex flex-row flex-wrap\">\n          {state.loading ? (\n            <Loader />\n          ) : state.nominations.length > 0 ? (\n            state.nominations.map((data) => (\n              <Widget\n                src={widgets.card}\n                props={{\n                  data,\n                  registry_contract: registryContract,\n                  nomination_contract: nominationContract,\n                  election_contract: electionContract,\n                  api_key: apiKey,\n                  dev,\n                }}\n              />\n            ))\n          ) : (\n            <div className=\"flex mt-10 container-fluid align-self-center\">\n              <H5 className=\"text-center\">{state.notFound}</H5>\n            </div>\n          )}\n        </Center>\n      </Container>\n    </div>\n\n    <>\n      {state.showModal && (\n        <Widget\n          src={widgets.compose}\n          props={{\n            handleClose: () => State.update({ showModal: false }),\n            nomination_contract: nominationContract,\n          }}\n        />\n      )}\n      {state.showModalDelete && (\n        <Widget\n          src={widgets.deleteNomination}\n          props={{\n            house: state.house,\n            handleClose: () => State.update({ showModalDelete: false }),\n            nomination_contract: nominationContract,\n          }}\n        />\n      )}\n    </>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nomination.ndctools.near/widget/NDC.Nomination.Page", "fact_widget_deployments_id": "26ca9361d9cb020f804544bf080362d3", "inserted_timestamp": "2023-08-15T15:32:16.209Z", "modified_timestamp": "2023-08-15T15:32:16.209Z", "__row_index": 68}