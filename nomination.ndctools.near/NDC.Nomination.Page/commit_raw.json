{"tx_hash": "7a7xRovU2CdDGS3V1WQzGvezhZXdZgSiFFNFtwXojb47", "action_id_social": "6J3vFNZqUreZM1pSwwr89KnJkw99FVVfwhcfunwm9Dze-0-widget", "block_id": 96771991, "block_timestamp": "2023-07-18T16:15:09.006Z", "signer_id": "nomination.ndctools.near", "widget_name": "NDC.Nomination.Page", "source_code": "// TODO: Should be grabbed from contract side\nlet {\n  ids,\n  election_contract,\n  registry_contract,\n  nomination_contract,\n  api_key,\n} = props;\nids = props.ids ? ids : [1, 2, 3]; // for testing purposes\n\nconst electionContract = election_contract ?? \"elections-v1.gwg-testing.near\";\nconst registryContract = registry_contract ?? \"registry.i-am-human.near\";\nconst nominationContract = nomination_contract ?? \"nominations.ndc-gwg.near\";\nconst apiKey = api_key ?? \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nfunction handleSelfRevoke() {\n  Near.call(nominationContract, \"self_revoke\");\n}\n\nconst houses = [\n  Near.view(electionContract, \"proposal\", { prop_id: ids[0] }),\n  Near.view(electionContract, \"proposal\", { prop_id: ids[1] }),\n  Near.view(electionContract, \"proposal\", { prop_id: ids[2] }),\n];\n\nconst widgets = {\n  header: \"election.ndctools.near/widget/NDC.Elections.Header\",\n  card: \"nomination.ndctools.near/widget/NDC.Nomination.Card\",\n  houses: \"nomination.ndctools.near/widget/NDC.Elections.Houses\",\n  filter: \"nomination.ndctools.near/widget/NDC.Elections.Filter\",\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  verifyHuman: \"nomination.ndctools.near/widget/NDC.VerifyHuman\",\n  compose: \"nomination.ndctools.near/widget/NDC.Nomination.Compose\",\n  deleteNomination:\n    \"nomination.ndctools.near/widget/NDC.Nomination.DeleteNomination\",\n};\n\nState.init({\n  selectedHouse: ids[0],\n  house: \"HouseOfMerit\",\n  start: true,\n  nominations: [],\n  sbt: false,\n  og: false,\n  selfNomination: false,\n  search: false,\n  candidateId: \"\",\n  originNominations: [],\n  notFound: \"There are no active nominations at the moment\",\n});\n\nconst httpRequestOpt = {\n  headers: { \"x-api-key\": apiKey },\n};\n\nfunction getVerifiedHuman() {\n  asyncFetch(\n    `https://api.pikespeak.ai/sbt/sbt-by-owner?holder=${context.accountId}&class_id=1&issuer=fractal.i-am-human.near&with_expired=false`,\n    httpRequestOpt\n  ).then((res) => {\n    if (res.body.length > 0) {\n      State.update({ sbt: true });\n    }\n  });\n  asyncFetch(\n    `https://api.pikespeak.ai/sbt/sbt-by-owner?holder=${context.accountId}&class_id=2&issuer=fractal.i-am-human.near&with_expired=false`,\n    httpRequestOpt\n  ).then((res) => {\n    if (res.body.length > 0) {\n      State.update({ og: true });\n    }\n  });\n  asyncFetch(\n    `https://api.pikespeak.ai/nominations/candidates-comments-and-upvotes?candidate=${context.accountId}`,\n    httpRequestOpt\n  ).then((res) => {\n    if (res.body.length > 0) {\n      State.update({ selfNomination: true });\n    }\n  });\n}\n\nfunction getNominationInfo() {\n  let nominationsArr = [];\n  asyncFetch(\n    `https://api.pikespeak.ai/nominations/house-nominations?house=${state.house}`,\n    httpRequestOpt\n  ).then((res) => {\n    console.log(res.body);\n\n    if (res.body.length <= 0) {\n      State.update({ nominations: [] });\n      return;\n    }\n\n    for (const [i, data] of res.body.entries()) {\n      let objCard = { indexerData: data };\n      let nominee = data.nominee;\n\n      asyncFetch(\n        `https://api.pikespeak.ai/nominations/candidates-comments-and-upvotes?candidate=${data.nominee}`,\n        httpRequestOpt\n      ).then((info) => {\n        let upVoteInfo = info.body[0];\n        let profileData;\n        let nominationData;\n        Social.getr(`${nominee}/profile`);\n        Social.getr(`${nominee}/nominations`);\n        setTimeout(() => {\n          profileData = Social.getr(`${nominee}/profile`);\n          nominationData = Social.getr(`${nominee}/nominations`);\n        }, 1000);\n\n        setTimeout(() => {\n          if (data.is_revoked || !profileData || !nominationData) return;\n\n          objCard = {\n            profileData: profileData,\n            nominationData: nominationData,\n            upVoteData: upVoteInfo,\n            ...objCard,\n          };\n\n          nominationsArr.push(objCard);\n\n          State.update({ nominations: nominationsArr });\n        }, 1000);\n      });\n    }\n  });\n}\n\nif (state.start) {\n  getNominationInfo();\n  getVerifiedHuman();\n  State.update({\n    start: false,\n  });\n}\n\nconst handleSelect = (item) => {\n  switch (item.id) {\n    case 2:\n      State.update({ house: \"CouncilOfAdvisors\" });\n      getNominationInfo();\n      break;\n    case 1:\n      State.update({ house: \"HouseOfMerit\" });\n      getNominationInfo();\n      break;\n    case 3:\n      State.update({ house: \"TransparencyCommission\" });\n      getNominationInfo();\n      break;\n  }\n  State.update({ selectedHouse: item.id });\n};\n\nfunction handleFilter(e) {\n  const text = e.target.value;\n\n  State.update({ candidateId: text });\n\n  if (!state.search) {\n    State.update({ originNominations: state.nominations, search: true });\n  }\n  if (text.length > 0) {\n    if (state.nominations.length) {\n      State.update({\n        notFound: \"There are no such nominations\",\n      });\n    }\n    let filtered = state.nominations.filter((data) =>\n      data.profileData.name.toLowerCase().includes(text.toLowerCase())\n    );\n    State.update({ nominations: filtered });\n  } else {\n    State.update({ notFound: \"There are no active nominations at the moment\" });\n    State.update({\n      nominations: state.originNominations,\n      originNominations: [],\n      search: false,\n    });\n  }\n}\n\nconst Container = styled.div`\n  padding: 30px 0;\n  margin: 0;\n`;\n\nconst ActivityContainer = styled.div`\n  overflow-y: scroll;\n`;\n\nconst Left = styled.div`\n  padding: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst Center = styled.div``;\n\nconst Right = styled.div`\n  padding: 20px;\n  margin-bottom: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst H5 = styled.h5`\n  margin-bottom: 20px;\n`;\n\nconst VerifiedDiv = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 16px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 20px;\n  border-radius: 8px;\n  background: var(--ffffff, #fff);\n  box-shadow: 0px 0px 30px 0px rgba(0, 0, 0, 0.1);\n`;\n\nconst VerifiedHeader = styled.div`\n  display: flex;\n  align-items: flex-start;\n  gap: 16px;\n  align-self: stretch;\n`;\n\nconst VerifiedHeaderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 4px;\n  flex: 1 0 0;\n`;\n\nconst VerfiedTitle = styled.p`\n  display: flex;\n  width: 176px;\n  flex-direction: column;\n  justify-content: center;\n  color: var(--000000, #000);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 120%;\n  margin: 0px;\n`;\n\nconst VerifedDesc = styled.p`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-self: stretch;\n  color: var(--primary-gray-dark, #828688);\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 120%;\n  margin: 0px;\n`;\n\nconst VerifyButton = styled.a`\n  display: flex;\n  padding: 8px 20px;\n  justify-content: center;\n  width: 100%;\n  align-items: center;\n  gap: 10px;\n  align-self: stretch;\n  border-radius: 10px;\n  background: var(--ffd-50-d, #ffd50d);\n  border: 0px;\n  text-decoration: none;\n`;\n\nconst VerifyButtonText = styled.p`\n  color: var(--primary-black, #000);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 24px;\n  margin: 0px;\n`;\n\nconst SortButton = styled.button`\n  display: flex;\n  width: 38px;\n  height: 38px;\n  padding: 8px 12px;\n  justify-content: center;\n  align-items: center;\n  gap: 6px;\n  border-radius: 6px;\n  background: var(\n    --buttons-gradient-default,\n    linear-gradient(90deg, #9333ea 0%, #4f46e5 100%)\n  );\n  border: 0px;\n`;\n\nconst ButtonNominateContainer = styled.div`\n  padding: 16px;\n  border-radius: 8px;\n  background: #f8f8f9;\n`;\n\nconst Filter = styled.div`\n  margin-top: 32px;\n\n  @media only screen and (max-width: 1061px) {\n    flex-direction: column;\n  }\n`;\n\nconst Toolbar = styled.div`\n  margin-left: 20px;\n  @media only screen and (max-width: 1061px) {\n    margin: 10px 0 0 0;\n  }\n`;\n\nreturn (\n  <>\n    <div>\n      {houses.map((group) => (\n        <>\n          {group.id === state.selectedHouse && (\n            <Widget\n              key={i}\n              src={widgets.header}\n              props={{\n                startTime: group.start,\n                endTime: group.end,\n                type: \"Nomination\",\n              }}\n            />\n          )}\n        </>\n      ))}\n      <Filter className=\"d-flex\">\n        <div className=\"w-100\">\n          <Widget\n            src={widgets.filter}\n            props={{\n              handleFilter,\n              candidateId: state.candidateId,\n              placeholder: \"Search by candidate name and affiliation\",\n            }}\n          />\n        </div>\n        <Toolbar>\n          {state.og && (\n            <ButtonNominateContainer>\n              {state.selfNomination ? (\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      className: \"danger\",\n                      text: \"Delete Self Nomination\",\n                      onClick: () => State.update({ showModalDelete: true }),\n                      icon: <i class=\"bi bi-trash\"></i>,\n                    },\n                  }}\n                />\n              ) : (\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      text: \"Self Nominate\",\n                      onClick: () => State.update({ showModal: true }),\n                      icon: <i class=\"bi bi-plus-lg\"></i>,\n                    },\n                  }}\n                />\n              )}\n            </ButtonNominateContainer>\n          )}\n        </Toolbar>\n      </Filter>\n      <Container className=\"d-flex row justify-content-between w-100\">\n        <Left className=\"col-lg\">\n          <H5>Houses</H5>\n          <Widget\n            src={widgets.houses}\n            props={{\n              selectedHouse: state.selectedHouse,\n              houses: houses,\n              handleSelect: (item) => handleSelect(item),\n            }}\n          />\n          <div>\n            {!state.sbt && (\n              <div className=\"mt-5\">\n                <Widget\n                  src={widgets.verifyHuman}\n                  props={{ title: \"Want to upvote?\", small: true }}\n                />\n              </div>\n            )}\n          </div>\n        </Left>\n        <Center className=\"col-lg-9 px-2 px-md-3 d-flex flex-row flex-wrap\">\n          {state.nominations.length > 0 ? (\n            state.nominations.map((data) => (\n              <Widget\n                src={widgets.card}\n                props={{\n                  data,\n                  registry_contract: registryContract,\n                  nomination_contract: nominationContract,\n                  election_contract: electionContract,\n                  api_key: apiKey,\n                }}\n              />\n            ))\n          ) : (\n            <div className=\"flex mt-10 container-fluid align-self-center\">\n              <H5 className=\"text-center\">{state.notFound}</H5>\n            </div>\n          )}\n        </Center>\n      </Container>\n    </div>\n\n    <>\n      {state.showModal && (\n        <Widget\n          src={widgets.compose}\n          props={{\n            handleClose: () => State.update({ showModal: false }),\n            nomination_contract: nominationContract,\n          }}\n        />\n      )}\n      {state.showModalDelete && (\n        <Widget\n          src={widgets.deleteNomination}\n          props={{\n            house: state.house,\n            handleClose: () => State.update({ showModalDelete: false }),\n            nomination_contract: nominationContract,\n          }}\n        />\n      )}\n    </>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nomination.ndctools.near/widget/NDC.Nomination.Page", "fact_widget_deployments_id": "2953d39a279ff52fbd4eacdc57609d9f", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 143}