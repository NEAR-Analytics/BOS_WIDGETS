{"tx_hash": "8Padc3arReKgB8c1hnG6midJrkZ2xJdGDrjykWq6BiRS", "action_id_social": "FYT3wQK1gLvy9aD4JAHyLQw38QZeXkP4Qzx51cKPrpg5-0-widget", "block_id": 104790199, "block_timestamp": "2023-11-02T21:01:32.819Z", "signer_id": "bwe-demos.near", "widget_name": "Posts.Feed", "source_code": "const GRAPHQL_ENDPOINT = \"https://near-queryapi.api.pagoda.co\";\n\nconst [sort, setSort] = useState(null);\nconst [loading, setLoading] = useState(false);\nconst [posts, setPosts] = useState([]);\n\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const response = await fetch(`${GRAPHQL_ENDPOINT}/v1/graphql`, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": \"dataplatform_near\" },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n  const result = await response.json();\n  return result;\n}\n\nconst createQuery = (type) => {\n  let querySortOption = \"\";\n  switch (sort) {\n    case \"recentcommentdesc\":\n      querySortOption = `{ last_comment_timestamp: desc_nulls_last },`;\n      break;\n    // More options...\n    default:\n      querySortOption = \"\";\n  }\n\n  let queryFilter = \"\";\n  // switch (type) {\n  //   case \"following\":\n  //     let queryAccountsString = accountsFollowing\n  //       .map((account) => `\"${account}\"`)\n  //       .join(\", \");\n  //     queryFilter = `account_id: { _in: [${queryAccountsString}]}`;\n  //     break;\n  //   // More options...\n  //   default:\n  //     queryFilter = \"\";\n  // }\n\n  const indexerQueries = `\nquery GetPostsQuery($offset: Int, $limit: Int) {\n  dataplatform_near_social_feed_moderated_posts(order_by: [${querySortOption} { block_height: desc }], offset: $offset, limit: $limit) {\n    account_id\n    block_height\n    block_timestamp\n    content\n    receipt_id\n    accounts_liked\n    last_comment_timestamp\n    comments(order_by: {block_height: asc}) {\n      account_id\n      block_height\n      block_timestamp\n      content\n    }\n    verifications {\n      human_provider\n      human_valid_until\n      human_verification_level\n    }\n  }\n  dataplatform_near_social_feed_moderated_posts_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\nquery GetFollowingPosts($offset: Int, $limit: Int) {\n  dataplatform_near_social_feed_moderated_posts(where: {${queryFilter}}, order_by: [{ block_height: desc }], offset: $offset, limit: $limit) {\n    account_id\n    block_height\n    block_timestamp\n    content\n    receipt_id\n    accounts_liked\n    last_comment_timestamp\n    comments(order_by: {block_height: asc}) {\n      account_id\n      block_height\n      block_timestamp\n      content\n    }\n    verifications {\n      human_provider\n      human_valid_until\n      human_verification_level\n    }\n\n  }\n  dataplatform_near_social_feed_moderated_posts_aggregate(where: {${queryFilter}}) {\n    aggregate {\n      count\n    }\n  }\n}\n`;\n  return indexerQueries;\n};\n\nconst loadMorePosts = () => {\n  // const queryName =\n  // state.selectedTab === \"following\" ? \"GetFollowingPosts\" : \"GetPostsQuery\";\n  const queryName = \"GetPostsQuery\";\n  // const type = state.selectedTab;\n  const type = null;\n\n  // if (state.selectedTab === \"following\" && !accountsFollowing) {\n  //   return;\n  // }\n\n  // State.update({\n  //   isLoading: true,\n  // });\n  setLoading(true);\n\n  fetchGraphQL(createQuery(type), queryName, {\n    offset: posts.length,\n    // limit: LIMIT,\n    limit: 10,\n  }).then(({ data }) => {\n    // if (result.status === 200 && result.body) {\n    // if (result.body.errors) {\n    //   console.log(\"error:\", result.body.errors);\n    //   return;\n    // }\n    // let data = result.body.data;\n    if (data) {\n      const newPosts = data.dataplatform_near_social_feed_moderated_posts;\n      const postsCountLeft =\n        data.dataplatform_near_social_feed_moderated_posts_aggregate.aggregate\n          .count;\n      if (newPosts.length > 0) {\n        // let filteredPosts = newPosts.filter((i) => !shouldFilter(i));\n        // filteredPosts = filteredPosts.map((post) => {\n        //   const prevComments = post.comments;\n        //   const filteredComments = prevComments.filter(\n        //     (comment) => !shouldFilter(comment)\n        //   );\n        //   post.comments = filteredComments;\n        //   return post;\n        // });\n        let filteredPosts = newPosts;\n\n        // State.update({\n        //   isLoading: false,\n        //   posts: [...state.posts, ...filteredPosts],\n        //   postsCountLeft,\n        // });\n        console.log(\"filteredPosts\", filteredPosts);\n        setPosts([...posts, ...filteredPosts]);\n        setLoading(false);\n      }\n    }\n    // }\n  });\n};\n\nuseEffect(() => {\n  loadMorePosts();\n}, []);\n\nreturn (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"row\",\n      height: \"100%\",\n      width: \"100%\",\n      maxWidth: \"1300px\",\n      margin: \"0 auto\",\n    }}\n  >\n    <Widget src=\"bwe-demos.near/Posts.Sidebar\" id=\"left\" />\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        rowGap: \"2rem\",\n        padding: \"1rem\",\n        flex: \"1 1\",\n        overflowX: \"hidden\",\n      }}\n    >\n      {posts?.length ? (\n        posts.map((post) => {\n          return (\n            <div>\n              <Widget\n                src=\"bwe-demos.near/Posts.Post\"\n                props={post}\n                id={post.receipt_id}\n              />\n              {/* <div>{post.comments?.length}</div> */}\n            </div>\n          );\n        })\n      ) : (\n        <></>\n      )}\n      {!loading && <button onClick={loadMorePosts}>Load more</button>}\n    </div>\n    <Widget src=\"bwe-demos.near/Posts.Sidebar\" id=\"right\" />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bwe-demos.near/widget/Posts.Feed", "fact_widget_deployments_id": "fd4769c4b790a0f4e948cdfa9f613f73", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 14}