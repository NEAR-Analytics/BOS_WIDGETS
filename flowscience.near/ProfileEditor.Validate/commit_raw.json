{"tx_hash": "DubiRqCAL2YAhtdNVgiGrZjDVv9oY2nnTLconFG1Fei2", "action_id_social": "54uGBFFnuHFzvhRY9oVrYcf6uuBivpteEgwwww6MwmvP-0-widget", "block_id": 111390324, "block_timestamp": "2024-01-26T21:28:19.199Z", "signer_id": "flowscience.near", "widget_name": "ProfileEditor.Validate", "source_code": "const accountId = context.accountId;\r\n\r\nif (!accountId) {\r\n  return \"Please sign in with NEAR wallet to edit your profile\";\r\n}\r\n\r\nconst initialProfile = Social.getr(`${accountId}/profile`);\r\n\r\nif (initialProfile === null) {\r\n  return \"Loading\";\r\n}\r\n\r\nState.init({ profile: initialProfile });\r\n\r\nconst [profile, setProfile] = useState(initialProfile);\r\nconst [fieldErrors, setFieldErrors] = useState({});\r\n\r\n// Define the validation function\r\nfunction isProfileValid(profile) {\r\n  let invalidFields = [];\r\n\r\n  if (typeof profile.name !== \"string\" || profile.name.trim() === \"\") {\r\n    invalidFields.push(\"name\");\r\n  }\r\n\r\n  const isStandardImageValid =\r\n    profile.image.ipfs_cid && typeof profile.image.ipfs_cid === \"string\";\r\n  const isNftImageValid =\r\n    profile.image.nft && typeof profile.image.nft.contractId === \"string\";\r\n  const isUrlImageValid =\r\n    profile.image.url && typeof profile.image.url === \"string\";\r\n\r\n  if (!isNftImageValid && !isStandardImageValid && !isUrlImageValid) {\r\n    invalidFields.push(\"image\");\r\n  }\r\n\r\n  const isBackgroundImageValid =\r\n    profile.backgroundImage.ipfs_cid &&\r\n    typeof profile.backgroundImage.ipfs_cid === \"string\";\r\n  const isBackgroundNftValid =\r\n    profile.backgroundImage.nft &&\r\n    typeof profile.backgroundImage.nft.contractId === \"string\";\r\n  const isBackgroundUrlValid =\r\n    profile.backgroundImage.url &&\r\n    typeof profile.backgroundImage.url === \"string\";\r\n\r\n  if (\r\n    !isBackgroundImageValid &&\r\n    !isBackgroundNftValid &&\r\n    !isBackgroundUrlValid\r\n  ) {\r\n    invalidFields.push(\"backgroundImage\"); // Corrected from \"image\" to \"backgroundImage\"\r\n  }\r\n\r\n  if (\r\n    !profile.description ||\r\n    typeof profile.description !== \"string\" ||\r\n    profile.description.trim() === \"\"\r\n  ) {\r\n    invalidFields.push(\"description\");\r\n  }\r\n\r\n  const hasValidTag = Object.values(profile.tags).some((tag) => tag !== null);\r\n  if (!hasValidTag) {\r\n    invalidFields.push(\"tags\");\r\n  }\r\n\r\n  const hasValidLinktree = [\"twitter\", \"github\", \"telegram\", \"website\"].some(\r\n    (key) =>\r\n      profile.linktree[key] &&\r\n      typeof profile.linktree[key] === \"string\" &&\r\n      profile.linktree[key].trim() !== \"\"\r\n  );\r\n  if (!hasValidLinktree) {\r\n    invalidFields.push(\"linktree\");\r\n  }\r\n\r\n  return {\r\n    isValid: invalidFields.length === 0,\r\n    invalidFields: invalidFields,\r\n  };\r\n}\r\n\r\nconst [isValidProfile, setIsValidProfile] = useState(\r\n  isProfileValid(initialProfile)\r\n);\r\n\r\nfunction handleProfileChange(updatedProfile) {\r\n  console.log(\"Profile updated:\", updatedProfile);\r\n  setProfile(updatedProfile);\r\n  const newValidity = isProfileValid(updatedProfile);\r\n  console.log(\"Is new profile valid?\", newValidity);\r\n  setIsValidProfile(newValidity.isValid);\r\n  State.update({ profile: updatedProfile });\r\n\r\n  // Update field errors\r\n  const newFieldErrors = {};\r\n  newValidity.invalidFields.forEach((field) => {\r\n    newFieldErrors[field] = true;\r\n  });\r\n  setFieldErrors(newFieldErrors);\r\n}\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  font-size: 0.8em;\r\n  margin-top: 5px;\r\n`;\r\n\r\nfunction renderErrorMessages() {\r\n  const errorMessages = {\r\n    name: \"Name is required.\",\r\n    image: \"Profile picture is required.\",\r\n    backgroundImage: \"Background image is required.\",\r\n    description: \"Description is required.\",\r\n    tags: \"At least one tag is required.\",\r\n    linktree: \"Linktree information is incomplete.\",\r\n  };\r\n\r\n  return Object.keys(fieldErrors)\r\n    .filter((field) => fieldErrors[field]) // Filter out fields without errors\r\n    .map((field) => (\r\n      <ErrorMessage key={field}>{errorMessages[field]}</ErrorMessage>\r\n    ));\r\n}\r\n\r\nreturn (\r\n  <div className=\"row\">\r\n    <div className=\"col-lg-6\">\r\n      <div>\r\n        <h4>Edit profile of @{accountId}</h4>\r\n      </div>\r\n      <div className=\"mb-2\">\r\n        <Widget\r\n          src=\"near/widget/MetadataEditor\"\r\n          props={{\r\n            initialMetadata: profile,\r\n            onChange: handleProfileChange,\r\n            options: {\r\n              name: { label: \"Name\" },\r\n              image: { label: \"Profile picture\" },\r\n              backgroundImage: { label: \"Background image\" },\r\n              description: { label: \"About\" },\r\n              tags: {\r\n                label: \"Tags\",\r\n                value: profile.tags,\r\n                tagsPattern: \"*/profile/tags/*\",\r\n                placeholder:\r\n                  \"rust, engineer, artist, humanguild, nft, learner, founder\",\r\n              },\r\n              linktree: {\r\n                links: [\r\n                  {\r\n                    label: \"Twitter\",\r\n                    prefix: \"https://twitter.com/\",\r\n                    name: \"twitter\",\r\n                  },\r\n                  {\r\n                    label: \"Github\",\r\n                    prefix: \"https://github.com/\",\r\n                    name: \"github\",\r\n                  },\r\n                  {\r\n                    label: \"Telegram\",\r\n                    prefix: \"https://t.me/\",\r\n                    name: \"telegram\",\r\n                  },\r\n                  {\r\n                    label: \"Website\",\r\n                    prefix: \"https://\",\r\n                    name: \"website\",\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"mb-2\">\r\n        <CommitButton\r\n          key={isValidProfile ? \"valid\" : \"invalid\"} // Change key to force re-render\r\n          data={{ profile: profile }}\r\n          disabled={!isValidProfile}\r\n        >\r\n          Save profile\r\n        </CommitButton>\r\n\r\n        <a\r\n          className=\"btn btn-outline-primary ms-2\"\r\n          href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\r\n        >\r\n          View profile\r\n        </a>\r\n      </div>\r\n      {Object.keys(fieldErrors).length > 0 && (\r\n        <div>\r\n          <h4>Error Messages:</h4>\r\n          {renderErrorMessages()}\r\n        </div>\r\n      )}\r\n    </div>\r\n    <div className=\"col-lg-6\">\r\n      <div>\r\n        <Widget\r\n          src=\"mob.near/widget/ProfilePage\"\r\n          props={{ accountId, profile: profile }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/ProfileEditor.Validate", "fact_widget_deployments_id": "cb66f5745ac51d122af43cc8e0e3ce48", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 25}