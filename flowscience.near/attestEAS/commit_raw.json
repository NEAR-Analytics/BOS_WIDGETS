{"tx_hash": "8HEk2J3G4YQaUV3PpTh258b6NTpouGtNEpZNQNNMHTM", "action_id_social": "GDGtZGvqnP9CctMSjAEnJ2B75QrMUwLTBhyVk3ZTQqyB-0-widget", "block_id": 117567179, "block_timestamp": "2024-04-25T04:05:23.222Z", "signer_id": "flowscience.near", "widget_name": "attestEAS", "source_code": "// Example attestation UID: 0xff5dc0cdc3de27dfe6a4352c596c0f97b1f99c51a67bbae142ce315e34969dcd\nconst { getSchema, fetchABI } = VM.require(\n  \"flowscience.near/widget/f.getSchema\"\n);\n\nconst { easRenderAttestation } = VM.require(\n  \"flowscience.near/widget/easRenderAttestation\"\n);\n\nconst user = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!user) return <Web3Connect connectLabel=\"Connect\" />;\n\n{\n  /*\nconst chain = Ethers.provider()\n  .getNetwork()\n  .{then}((chainIdData) => {\n    console.log(chainIdData.chainId);\n  });\n*/\n}\n\nconst abi = fetch(\n  \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/master/deployments/optimism/EAS.json\"\n);\nconst provider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism.drpc.org\"\n);\nconst signer = provider.getSigner(user);\n// console.log(\"chain:\", chain);\n// console.log(\"signer:\", signer);\n\nconst contractAddress = \"0x4200000000000000000000000000000000000021\";\nconst parsedAbi = JSON.parse(abi.body);\nconst contract = new ethers.Contract(contractAddress, parsedAbi.abi, signer);\n//console.log(contract);\n\nconst [attestation, setAttestation] = useState(null);\nconst [error, setError] = useState(\"\");\nconst [account, setAccount] = useState(null);\nconst [recipient, setRecipient] = useState(\"\");\nconst [schema, setSchema] = useState(\"\");\nconst [schemaDetails, setSchemaDetails] = useState(null);\nconst [expirationTime, setExpirationTime] = useState(\"\");\nconst [revocable, setRevocable] = useState(false);\nconst [data, setData] = useState(\"\");\nconst [showTooltip, setShowTooltip] = useState(false);\n\n// Function to fetch schema details\nconst handleSchemaFetch = () => {\n  fetchABI()\n    .then((abi) => {\n      if (!abi) throw new Error(\"ABI not fetched\");\n      return getSchema(contractAddress, abi, schema);\n    })\n    .then((result) => {\n      if (result.error) {\n        setError(result.error);\n      } else {\n        setSchemaDetails(result.schema);\n        setError(\"\"); // Clear any existing errors\n      }\n    })\n    .catch((err) => {\n      console.error(\"Error in schema fetching process:\", err);\n      setError(\"Error fetching schema details.\");\n    });\n};\n\nconst handleSubmit = (event) => {\n  event.preventDefault();\n\n  // Note: Fetch the ABI asynchronously (consider moving this to a component initialization phase)\n  fetch(\n    \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/master/deployments/optimism/EAS.json\"\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      const provider = new ethers.providers.JsonRpcProvider(\n        \"https://optimism.drpc.org\"\n      );\n      const signer = provider.getSigner(user);\n      const contract = new ethers.Contract(contractAddress, data.abi, signer);\n\n      const tx = {\n        to: contractAddress,\n        data: contract.interface.encodeFunctionData(\"attest\", [\n          {\n            schema,\n            data: {\n              recipient,\n              expirationTime: Number(expirationTime),\n              revocable,\n              refUID:\n                \"0xff5dc0cdc3de27dfe6a4352c596c0f97b1f99c51a67bbae142ce315e34969dcd\",\n              data: ethers.utils.defaultAbiCoder.encode([\"string\"], [data]),\n              value: ethers.utils.parseEther(value.toString()),\n            },\n          },\n        ]),\n      };\n\n      signer\n        .sendTransaction(tx)\n        .then((result) => {\n          console.log(\"Transaction sent:\", result);\n          setAttestation(result); // Assuming you handle the response to display attestation info\n        })\n        .catch((error) => {\n          console.error(\"Transaction error:\", error);\n          setError(\"Transaction failed: \" + error.message);\n        });\n    })\n    .catch((error) => {\n      console.error(\"Failed to fetch ABI:\", error);\n      setError(\"Failed to load contract ABI: \" + error.message);\n    });\n};\n\nconst handleShowTooltip = () => {\n  setShowTooltip(true);\n};\n\nconst handleHideTooltip = () => {\n  setTimeout(() => {\n    setShowTooltip(false);\n  }, 3000); // 3000 milliseconds = 3 seconds\n};\n\nconst tooltip = (\n  <Tooltip\n    id=\"tooltip\"\n    className=\"p-3 border bg-light\"\n    style={{ backgroundColor: \"lightgrey\" }}\n  >\n    <a\n      href=\"https://optimism.easscan.org/attestations\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Find Attestations on Optimism.\n    </a>\n  </Tooltip>\n);\n\nreturn (\n  <>\n    <div className=\"m-2\">\n      <h3>Create Attestation</h3>\n      <div>\n        <div>\n          <label>\n            Recipient Address:\n            <input\n              type=\"text\"\n              value={recipient}\n              onChange={(e) => setRecipient(e.target.value)}\n              placeholder=\"Enter the recipient's Ethereum address\"\n            />\n          </label>\n          <label>\n            Schema Hash:\n            <input\n              type=\"text\"\n              value={schema}\n              onChange={(e) => setSchema(e.target.value)}\n              placeholder=\"Enter the schema hash for the attestation\"\n            />\n            <button onClick={handleSchemaFetch}>Fetch Schema</button>\n          </label>\n          <label>\n            Expiration Time:\n            <input\n              type=\"number\"\n              value={expirationTime}\n              onChange={(e) => setExpirationTime(e.target.value)}\n              placeholder=\"Unix timestamp for when the attestation expires\"\n            />\n          </label>\n          <div>\n            <p>Revocable:</p>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"revocable\"\n                checked={revocable === true}\n                onChange={() => setRevocable(true)}\n              />\n              True\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"revocable\"\n                checked={revocable === false}\n                onChange={() => setRevocable(false)}\n              />\n              False\n            </label>\n          </div>\n          <label>\n            Attestation Data:\n            <textarea\n              value={data}\n              onChange={(e) => setData(e.target.value)}\n              placeholder=\"Data associated with the attestation\"\n            ></textarea>\n          </label>\n          <button onClick={handleSubmit}>Submit Attestation</button>\n        </div>\n        {schemaDetails && (\n          <div>\n            <h4>Schema Details:</h4>\n            <pre>{JSON.stringify(schemaDetails, null, 2)}</pre>\n          </div>\n        )}\n      </div>\n    </div>\n    {error && <p className=\"error\">{error}</p>}\n\n    <div className=\"m-2\">\n      <p>\n        <strong>Helpful Links:</strong>\n        <a\n          href=\"https://docs.attest.org/docs/core--concepts/attestations\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more about attestations\n        </a>\n      </p>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/attestEAS", "fact_widget_deployments_id": "7a7726ec424ee231cd3aa9a475af0845", "inserted_timestamp": "2024-04-25T06:05:31.816Z", "modified_timestamp": "2024-04-25T06:05:31.816Z", "__row_index": 0}