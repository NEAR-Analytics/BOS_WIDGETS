{"tx_hash": "2So1AXpkLiA3bHNxiLq281ELQjeCeYYZV4FDc3BvwdiH", "action_id_social": "3N534KZ9eDS9usZTL2NNmaysVgEBK77KBFLV5mAJFqGP-0-widget", "block_id": 112446041, "block_timestamp": "2024-02-09T07:07:26.960Z", "signer_id": "flowscience.near", "widget_name": "NAS", "source_code": "const data = props.data || {};\r\nconst type = props.type || \"\";\r\nconst attestationType = \"hyperfiles.near/type/attestation\";\r\nconst [selectedSchema, setSelectedSchema] = useState(\r\n  props.selectedSchema ?? \"attestations.near/type/isTrue\"\r\n);\r\nconst schemaType = props.schemaType || \"hyperfiles.near/type/schema\";\r\nconst typeSrc = props.typeSrc || \"hyperfiles.near\";\r\nconst schemaSrc = props.schemaSrc || \"attestations.near\";\r\nconst defaultView = props.defaultView || \"CREATE_THING\";\r\n\r\nif (type !== \"\") {\r\n  const parts = type.split(\"/\");\r\n  typeSrc = parts[0];\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n  `;\r\n\r\nconst SidePanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 20px;\r\n  background-color: #b276f4;\r\n  width: auto;\r\n  z-index: 50;\r\n  min-width: 400px;\r\n`;\r\n\r\nconst MainContent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n  `;\r\n\r\nconst FormContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-bottom: 20px;\r\n    gap: 8px;\r\n    background-color: #b276f4;\r\n    padding: 30px;\r\n  `;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  align-self: flex-start;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  `;\r\n\r\nconst LeftPanelItem = styled.div`\r\n    padding: 8px;\r\n    background-color: #ccc;\r\n    color: white;\r\n    border-radius: 4px;\r\n  `;\r\n\r\nconst Select = styled.select`\r\n  `;\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nconst Input = styled.input`\r\n  `;\r\n\r\nconst ModalOverlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 100;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  min-width: 500px;\r\n  height: 100%;\r\n  overflow: scroll;\r\n`;\r\n\r\nconst ModalTitle = styled.h3`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst CenteredDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  text-align: center;\r\n`;\r\n\r\nState.init({\r\n  data,\r\n  config: data,\r\n  typeSrc,\r\n  schemaSrc,\r\n  selectedType: type,\r\n  selectedSchema: selectedSchema,\r\n  view: defaultView,\r\n  preview: \"TEMPLATE\",\r\n  template,\r\n  templateVal: template,\r\n  schemas: {},\r\n  loading: false,\r\n});\r\n\r\nlet availableSchemas = [];\r\nconst schemas = Social.get(`${state.schemaSrc}/type/**`, \"final\");\r\nif (schemas !== null) {\r\n  availableSchemas =\r\n    Object.keys(schemas)?.map((it) => `${state.schemaSrc}/type/${it}`) || [];\r\n}\r\n\r\nconst handleSchemaChange = (e) => {\r\n  const newSchema = e.target.value;\r\n  State.update({\r\n    selectedSchema: newSchema,\r\n    data: {},\r\n  });\r\n  if (!state.selectedSchema) {\r\n    console.error(\"Selected schema is undefined\");\r\n    return;\r\n  }\r\n  // Trigger fetching the new schema details here if necessary\r\n};\r\n\r\nconst handleSchemaOwnerChange = (e) => {\r\n  const newSchemaSrc = e.target.value;\r\n  State.update({\r\n    schemaSrc: newSchemaSrc,\r\n  });\r\n  fetchSchemasList(newSchemaSrc);\r\n};\r\n\r\nreturn (\r\n  <Container>\r\n    <SidePanel>\r\n      <h1>Near Attestation Service (NAS)</h1>\r\n      <Row style={{ gap: \"8px\", marginBottom: \"16px\" }}>\r\n        <h2>Make a new</h2>{\" \"}\r\n        <Select\r\n          value={state.view}\r\n          onChange={(e) => State.update({ view: e.target.value })}\r\n        >\r\n          <option value=\"CREATE_THING\">attestation</option>\r\n          <option value=\"CREATE_TYPE\">schema</option>\r\n        </Select>\r\n      </Row>\r\n      {state.view === \"CREATE_THING\" ? (\r\n        <>\r\n          <FormContainer>\r\n            <Label>Schema Owner:</Label>\r\n            <Row>\r\n              <Input\r\n                type=\"text\"\r\n                value={state.newSchemaSrc}\r\n                onChange={(e) => State.update({ newSchemaSrc: e.target.value })}\r\n                placeholder={schemaSrc}\r\n              />\r\n              <Button\r\n                onClick={() => State.update({ schemaSrc: state.newSchemaSrc })}\r\n              >\r\n                apply\r\n              </Button>\r\n            </Row>\r\n            <Label>Schema</Label>\r\n            <Row>\r\n              <Select\r\n                value={state.selectedSchema}\r\n                onChange={handleSchemaChange}\r\n              >\r\n                <option value=\"\">Choose a schema</option>\r\n                {availableSchemas?.map((it) => (\r\n                  <option value={it} key={it}>\r\n                    {it}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </Row>\r\n          </FormContainer>\r\n          <FormContainer>\r\n            <Widget\r\n              src=\"flowscience.near/widget/attest\"\r\n              props={{\r\n                item: {\r\n                  value: state.data,\r\n                  selectedSchema: state.selectedSchema,\r\n                },\r\n                onChange: handleOnChange,\r\n              }}\r\n            />\r\n          </FormContainer>\r\n          <Footer></Footer>\r\n        </>\r\n      ) : (\r\n        <Widget\r\n          src=\"flowscience.near/widget/schema.editor\"\r\n          props={{ schemaSrc: state.schemaSrc }}\r\n        />\r\n      )}\r\n    </SidePanel>\r\n    <MainContent>\r\n      {state.view === \"CREATE_THING\" ? (\r\n        <>\r\n          <Header>\r\n            <Row style={{ justifyContent: \"space-between\" }}>\r\n              <div>\r\n                <Label>Hyperfile (set of edges)</Label>\r\n                <Input\r\n                  value={state.templateVal}\r\n                  onChange={(e) =>\r\n                    State.update({ templateVal: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <Button>\r\n                <a\r\n                  className={`btn`}\r\n                  href={`https://draw.everything.dev/${state.template}`}\r\n                  target=\"_blank\"\r\n                >\r\n                  <span>Open on Canvas</span>\r\n                </a>\r\n              </Button>\r\n            </Row>\r\n          </Header>\r\n          {state.preview === \"RAW\" ? (\r\n            <></>\r\n          ) : (\r\n            <Widget\r\n              src=\"hack.near/widget/graph.view\"\r\n              props={{\r\n                accounts: [context.accountId, state.recipientId, state.refUID],\r\n              }}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </MainContent>\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/NAS", "fact_widget_deployments_id": "1d966b3ede47ac533cc98f0026abd634", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 23}