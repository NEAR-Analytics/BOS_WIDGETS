{"tx_hash": "4oztjBXcMmyS34tGgtK4eueUhNYQjNTc8jCj9xDpUj5Q", "action_id_social": "CM8mSc63bgNkPGkiHBRecCZ7t5j4vttXvuyxH4SCKaqX-0-widget", "block_id": 112211366, "block_timestamp": "2024-02-06T05:24:44.596Z", "signer_id": "flowscience.near", "widget_name": "NAS", "source_code": "const data = props.data || {};\r\nconst type = props.type || \"\";\r\nconst attestationType = props.attestation || \"hyperfiles.near/type/attestation\";\r\nconst schema = props.schema || \"\";\r\nconst schemaType = props.schemaType || \"hyperfiles.near/type/schema\";\r\nconst typeSrc = props.typeSrc || \"hyperfiles.near\";\r\nconst schemaSrc = props.schemaSrc || \"attestations.near\";\r\nconst buildEdges = props.buildEdges;\r\nconst template = props.template || \"every.near/type/thing\";\r\nconst thingId = props.thingId;\r\nconst defaultView = props.defaultView || \"CREATE_THING\";\r\n\r\nif (type !== \"\") {\r\n  const parts = type.split(\"/\");\r\n  typeSrc = parts[0];\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n  `;\r\n\r\nconst SidePanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 20px;\r\n  background-color: #b276f4;\r\n  width: auto;\r\n  z-index: 50;\r\n  min-width: 400px;\r\n`;\r\n\r\nconst MainContent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n  `;\r\n\r\nconst FormContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-bottom: 20px;\r\n    gap: 8px;\r\n    background-color: #b276f4;\r\n    padding: 30px;\r\n  `;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  align-self: flex-start;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  `;\r\n\r\nconst LeftPanelItem = styled.div`\r\n    padding: 8px;\r\n    background-color: #ccc;\r\n    color: white;\r\n    border-radius: 4px;\r\n  `;\r\n\r\nconst Select = styled.select`\r\n  `;\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nconst Input = styled.input`\r\n  `;\r\n\r\nconst ModalOverlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 100;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  min-width: 500px;\r\n  height: 100%;\r\n  overflow: scroll;\r\n`;\r\n\r\nconst ModalTitle = styled.h3`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst CenteredDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  text-align: center;\r\n`;\r\n\r\nState.init({\r\n  data,\r\n  config: data,\r\n  isModalOpen: false,\r\n  typeSrc,\r\n  schemaSrc,\r\n  selectedType: type,\r\n  selectedSchema: schema,\r\n  view: defaultView,\r\n  preview: \"TEMPLATE\",\r\n  template,\r\n  templateVal: template,\r\n  thingId,\r\n  schemas: {},\r\n  loading: false,\r\n});\r\n\r\nconst fetchSchemasList = (schemaSrc) => {\r\n  const response = fetch(`${schemaSrc}/type/**`, \"final\");\r\n  if (response) {\r\n    const schemasList = Object.keys(response).map(\r\n      (key) => `${schemaSrc}/type/${key}`\r\n    );\r\n    State.update({ schemasList });\r\n  }\r\n};\r\n\r\nconst fetchSchema = (type) => {\r\n  if (!type) return;\r\n  const response = fetch(type, \"final\");\r\n  if (response) {\r\n    const schema = JSON.parse(response);\r\n    State.update((prevState) => ({\r\n      ...prevState,\r\n      schemas: { ...prevState.schemas, [type]: schema },\r\n      loading: false,\r\n    }));\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  fetchSchemasList(State.schemaSrc);\r\n  fetchSchema(State.selectedSchema);\r\n}, [State.schemaSrc, State.selectedSchema]);\r\n\r\nconst handleApply = () => {\r\n  State.update({\r\n    config: state.data,\r\n    template: state.templateVal,\r\n  });\r\n  // set the props for the main content\r\n};\r\n\r\nconst handleSave = () => {\r\n  // create the thing\r\n  State.update({ isModalOpen: false });\r\n  const thingId = state.thingId || Math.random();\r\n  let edges = [];\r\n  if (buildEdges) {\r\n    const newPath = `${context.accountId}/thing/${thingId}`;\r\n    edges = buildEdges(newPath, state.selectedType);\r\n  }\r\n\r\n  const data = {\r\n    thing: {\r\n      [thingId]: JSON.stringify({\r\n        data: state.config,\r\n        template: {\r\n          src: state.template,\r\n        },\r\n        type: state.selectedType,\r\n      }),\r\n    },\r\n    index: {\r\n      thing: JSON.stringify({\r\n        key: thingId,\r\n        value: {\r\n          type: state.selectedType,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n  if (edges.length) {\r\n    data.index.edge = JSON.stringify(edges);\r\n  }\r\n  Social.set(data, {\r\n    onCommit: () => {\r\n      State.update({\r\n        data: {},\r\n        isModalOpen: false,\r\n        config: undefined,\r\n      });\r\n    },\r\n    onCancel: () => {\r\n      State.update({\r\n        isModalOpen: false,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\nlet availableTypes = [];\r\nconst types = Social.get(`${state.typeSrc}/type/**`, \"final\");\r\nif (types !== null) {\r\n  availableTypes =\r\n    Object.keys(types)?.map((it) => `${state.typeSrc}/type/${it}`) || [];\r\n}\r\n\r\nlet availableSchemas = [];\r\nconst schemas = Social.get(`${state.schemaSrc}/type/**`, \"final\");\r\nif (schemas !== null) {\r\n  availableSchemas =\r\n    Object.keys(schemas)?.map((it) => `${state.schemaSrc}/type/${it}`) || [];\r\n}\r\n\r\n// Update handleTypeChange to handle full schema including nested types\r\nconst handleSchemaChange = (e) => {\r\n  const newSchema = e.target.value;\r\n  State.update({\r\n    selectedSchema: newSchema,\r\n    templateVal: \"\",\r\n    data: {},\r\n    loading: true,\r\n  });\r\n};\r\n\r\n// Update handleTypeChange to handle full schema including nested types\r\nconst handleTypeChange = (e) => {\r\n  const newType = e.target.value;\r\n  State.update({\r\n    selectedType: newType,\r\n    templateVal: \"\",\r\n    data: {},\r\n    loading: true,\r\n  });\r\n};\r\n\r\nconst handleSchemaOwnerChange = (e) => {\r\n  const newSchemaSrc = e.target.value;\r\n  State.update({\r\n    schemaSrc: newSchemaSrc,\r\n  });\r\n  fetchSchemasList(newSchemaSrc);\r\n};\r\n\r\nconst renderSchemaSelection = () => {\r\n  return (\r\n    <FormContainer>\r\n      <Label>Schema Owner:</Label>\r\n      <Input\r\n        type=\"text\"\r\n        value={State.schemaSrc}\r\n        onChange={handleSchemaOwnerChange}\r\n      />\r\n      <Label>Schema:</Label>\r\n      <Select value={State.selectedSchema} onChange={handleSchemaChange}>\r\n        {State.schemasList.map((schema) => (\r\n          <option key={schema} value={schema}>\r\n            {schema}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n      {/* Additional form elements here */}\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\n// A function to render properties, adjusted to use stored schemas from the state\r\nconst renderProperties = (properties, data, onChange) => {\r\n  if (state.loading) {\r\n    return <div>Loading...</div>; // Show loading indicator while data is being fetched\r\n  }\r\n  if (!properties) {\r\n    return <div>No properties to display</div>; // Add a condition for no properties\r\n  }\r\n  return properties.map((property) => {\r\n    const propertyType = property.type;\r\n    if (\r\n      propertyType.startsWith(\"${typeSrc}.near/type/\") &&\r\n      state.schemas[propertyType]\r\n    ) {\r\n      // Use the stored schema from the state\r\n      const nestedSchema = state.schemas[propertyType];\r\n      if (nestedSchema && nestedSchema.properties) {\r\n        return renderProperties(\r\n          nestedSchema.properties,\r\n          data[property.name],\r\n          onChange\r\n        );\r\n      } else {\r\n        // Handle the case where the nested schema is not available yet\r\n        // This could be a placeholder or a loading indicator\r\n        return <div>Loading...</div>;\r\n      }\r\n    } else {\r\n      // Render a simple input for primitive types\r\n      return (\r\n        <Input\r\n          key={property.name}\r\n          type={property.type === \"string\" ? \"text\" : property.type}\r\n          value={data[property.name] || \"\"}\r\n          placeholder={property.name}\r\n          onChange={(e) => onChange(property.name, e.target.value)}\r\n        />\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nreturn (\r\n  <Container>\r\n    <SidePanel>\r\n      <h1>Near Attestation Service (NAS)</h1>\r\n      <Row style={{ gap: \"8px\", marginBottom: \"16px\" }}>\r\n        <h2>Make a new</h2>{\" \"}\r\n        <Select\r\n          value={state.view}\r\n          onChange={(e) => State.update({ view: e.target.value })}\r\n        >\r\n          <option value=\"CREATE_THING\">attestation</option>\r\n          <option value=\"CREATE_TYPE\">schema</option>\r\n        </Select>\r\n      </Row>\r\n      {state.view === \"CREATE_THING\" ? (\r\n        <>\r\n          <FormContainer>\r\n            <Label>Schema Owner:</Label>\r\n            <Row>\r\n              <Input\r\n                type=\"text\"\r\n                value={state.newSchemaSrc}\r\n                onChange={(e) => State.update({ newSchemaSrc: e.target.value })}\r\n                placeholder={schemaSrc}\r\n              />\r\n              <Button\r\n                onClick={() => State.update({ schemaSrc: state.newSchemaSrc })}\r\n              >\r\n                apply\r\n              </Button>\r\n            </Row>\r\n            <Label>Schema</Label>\r\n            <Row>\r\n              <Select\r\n                value={state.selectedSchema}\r\n                onChange={handleSchemaChange}\r\n              >\r\n                <option value=\"\">Choose a schema</option>\r\n                {availableSchemas?.map((it) => (\r\n                  <option value={it} key={it}>\r\n                    {it}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </Row>\r\n          </FormContainer>\r\n          <FormContainer>\r\n            <Widget\r\n              src=\"flowscience.near/widget/attest\"\r\n              props={{\r\n                item: {\r\n                  type: state.selectedSchema,\r\n                  value: state.data,\r\n                },\r\n                onChange: handleOnChange,\r\n              }}\r\n            />\r\n          </FormContainer>\r\n          <Footer>\r\n            <Button onClick={() => handleApply()}>apply</Button>\r\n            <Button\r\n              onClick={() => State.update({ isModalOpen: true })}\r\n              disabled={state.config === undefined}\r\n            >\r\n              save\r\n            </Button>\r\n          </Footer>\r\n        </>\r\n      ) : (\r\n        <Widget\r\n          src=\"flowscience.near/widget/schema.editor\"\r\n          props={{ schemaSrc: state.selectedSchema }}\r\n        />\r\n      )}\r\n    </SidePanel>\r\n    <MainContent>\r\n      {state.view === \"CREATE_THING\" ? (\r\n        <>\r\n          <Header>\r\n            <Row style={{ justifyContent: \"space-between\" }}>\r\n              <div>\r\n                <Label>Template:</Label>\r\n                <Input\r\n                  value={state.templateVal}\r\n                  onChange={(e) =>\r\n                    State.update({ templateVal: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <Select\r\n                value={state.preview}\r\n                onChange={(e) => State.update({ preview: e.target.value })}\r\n              >\r\n                <option value=\"TEMPLATE\">template</option>\r\n                <option value=\"RAW\">raw</option>\r\n              </Select>\r\n              <Button>\r\n                <a\r\n                  className={`btn`}\r\n                  href={`https://jutsu.ai/editor/${state.template}`}\r\n                  target=\"_blank\"\r\n                >\r\n                  <i className=\" me-1\">\r\n                    <svg\r\n                      focusable=\"false\"\r\n                      aria-hidden=\"true\"\r\n                      viewBox=\"2 2 18 18\"\r\n                      width=\"16px\"\r\n                      height=\"16px\"\r\n                    >\r\n                      <path d=\"M12.16 3h-.32L9.21 8.25h5.58zm4.3 5.25h5.16l-2.07-4.14C19.21 3.43 18.52 3 17.76 3h-3.93l2.63 5.25zm4.92 1.5h-8.63V20.1zM11.25 20.1V9.75H2.62zM7.54 8.25 10.16 3H6.24c-.76 0-1.45.43-1.79 1.11L2.38 8.25h5.16z\"></path>\r\n                    </svg>\r\n                  </i>\r\n                  <span>Open in Jutsu</span>\r\n                </a>\r\n              </Button>\r\n            </Row>\r\n          </Header>\r\n          {state.preview === \"TEMPLATE\" ? (\r\n            <>\r\n              {(state.template && (\r\n                <Widget src={state.template} props={{ data: state.config }} />\r\n              )) || <CenteredDiv>set a template and click apply</CenteredDiv>}\r\n            </>\r\n          ) : (\r\n            <Widget\r\n              src=\"hyperfiles.near/widget/hyperfile.view\"\r\n              props={{ value: state.config || {} }}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </MainContent>\r\n    {state.isModalOpen && (\r\n      <ModalOverlay>\r\n        <ModalContent>\r\n          <ModalTitle>Make an attestation</ModalTitle>\r\n          <p>option to provide a thing id</p>\r\n          <Row style={{ gap: \"8px\" }}>\r\n            <Input\r\n              value={state.thingId}\r\n              onChange={(e) => State.update({ thingId: e.target.value })}\r\n              placeholder=\"thing id\"\r\n            />\r\n          </Row>\r\n          <Widget\r\n            src=\"efiz.near/widget/Every.Raw.View\"\r\n            props={{\r\n              value: { data: state.config, template: { src: state.template } },\r\n            }}\r\n          />\r\n          <Button onClick={handleSave}>Save</Button>\r\n          <Button onClick={() => State.update({ isModalOpen: false })}>\r\n            Cancel\r\n          </Button>\r\n        </ModalContent>\r\n      </ModalOverlay>\r\n    )}\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/NAS", "fact_widget_deployments_id": "70c4aee6176324af3a7c1c89f594dbda", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 19}