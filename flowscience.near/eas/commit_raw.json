{"tx_hash": "ECotAUChrxCrkncwxYsBa1cAa4YVLWvt4QY4hDk9NB1", "action_id_social": "86GBHFjqhtzM9GatRC2NsJ9YvrGobcLeRh7EaUzgUz7m-0-widget", "block_id": 116282141, "block_timestamp": "2024-04-07T01:03:49.337Z", "signer_id": "flowscience.near", "widget_name": "eas", "source_code": "const user = Ethers.send(\"eth_requestAccounts\", [])[0];\r\nconsole.log(\"User:\", user);\r\n\r\nif (!user) return <Web3Connect connectLabel=\"Connect\" />;\r\n\r\nconst chain = Ethers.provider()\r\n  .getNetwork()\r\n  .then((chainIdData) => {\r\n    console.log(chainIdData.chainId);\r\n  });\r\n\r\nconsole.log(\"chain:\", chain);\r\n\r\nconst abi = fetch(\r\n  \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/master/deployments/optimism/EAS.json\"\r\n);\r\nconst provider = new ethers.providers.JsonRpcProvider(\r\n  \"https://optimism.drpc.org\"\r\n);\r\nconst signer = provider.getSigner();\r\n//const signer = Ethers.provider().getSigner();\r\nconsole.log(\"chain:\", chain);\r\nconsole.log(\"signer:\", signer);\r\n\r\n{\r\n  /*}\r\nfunction getSigner() {\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  await provider.send(\"eth_requestAccounts\", []); // Request account access\r\n  return provider.getSigner();\r\n}\r\n\r\nconst signer = provider.getSigner().then(signer => {\r\n  console.log(\"signer:\", signer);\r\n});\r\n*/\r\n}\r\n\r\nconst contractAddress = \"0x4200000000000000000000000000000000000021\";\r\nconst parsedAbi = JSON.parse(abi.body);\r\nconst contract = new ethers.Contract(contractAddress, parsedAbi.abi, signer);\r\nconsole.log(contract);\r\nconst [attestation, setAttestation] = useState(null);\r\nconst [error, setError] = useState(\"\");\r\nconst [uid, setUid] = useState(\"\");\r\n\r\nfunction getAttestation() {\r\n  // Ensure uid is a non-empty string\r\n  if (typeof uid !== \"string\" || uid.trim() === \"\") {\r\n    console.error(\"UID must be a non-empty string.\");\r\n    setError(\"UID must be provided.\");\r\n    return;\r\n  }\r\n\r\n  const bytesUid = ethers.utils.hexZeroPad(uid, 32);\r\n\r\n  contract\r\n    .getAttestation(uid)\r\n    .then((result) => {\r\n      setAttestation(result);\r\n      setError(\"\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"error fetching attestation:\", error);\r\n      setError(\"Failed to retrieve data. Please try with a verified uid.\");\r\n    });\r\n}\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"m-2\">\r\n      <h3>Get Attestation</h3>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"input UID\"\r\n        value={uid}\r\n        onChange={(e) => setUid(e.target.value)}\r\n      />\r\n    </div>\r\n    <div className=\"m-2\">\r\n      <button className=\"btn btn-primary m-1\" onClick={getAttestation}>\r\n        Get Attestation\r\n      </button>\r\n      <p className=\"m-1\">{error}</p>\r\n    </div>\r\n    <div className=\"m-2\">\r\n      {attestation && (\r\n        <p className=\"m-2\">\r\n          <b>View Attestation:</b> {JSON.stringify(attestation)}\r\n        </p>\r\n      )}\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/eas", "fact_widget_deployments_id": "a0d954fb877adea069aebe44df129c9b", "inserted_timestamp": "2024-04-07T02:39:51.665Z", "modified_timestamp": "2024-04-07T02:39:51.665Z", "__row_index": 7}