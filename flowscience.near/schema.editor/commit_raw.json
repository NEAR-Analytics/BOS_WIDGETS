{"tx_hash": "8jmzdULNJ4dhrXBuT7G3UAFnxoSxHWjvkAe4NPsqjg58", "action_id_social": "Gf8TzfKmZQiEk4tEzSk9koVjgYdWEfpPiKkoLFshPn6e-0-widget", "block_id": 111341012, "block_timestamp": "2024-01-26T06:51:17.198Z", "signer_id": "flowscience.near", "widget_name": "schema.editor", "source_code": "const typeSrc = props.typeSrc || \"\";\nconst blockHeight = props.blockHeight || \"final\";\nlet type = {\n  name: \"\",\n  properties: [],\n  widgets: {},\n};\n\nState.init({\n  newType: typeSrc,\n  typeName: type.name || \"\",\n  properties: type.properties || [],\n  widgets: type.widgets || {},\n  newPropertyName: \"\",\n  newPropertyType: \"string\",\n  newWidgetKey: \"\",\n  newWidgetSrc: \"\",\n  newTypeSrc: \"every.near\",\n  typeSrc: \"every.near\",\n  expanded: false,\n});\n\nlet importedTypes = [];\nif (state.typeSrc !== \"\") {\n  const types = Social.get(`${state.typeSrc}/type/**`, \"final\");\n  if (!types) {\n    return <></>;\n  }\n  importedTypes =\n    Object.keys(types)?.map((it) => `${state.typeSrc}/type/${it}`) || [];\n}\n\nconst availableTypes = JSON.parse(props.availableTypes) || [\n  \"string\",\n  \"boolean\",\n  \"number\",\n  \"date\",\n  \"time\",\n  \"tags\",\n  ...importedTypes,\n];\n\nconst Container = styled.div`\n  margin: 20px 0;\n`;\n\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  max-width: 200px;\n  margin-bottom: 10px;\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  height: 30px;\n`;\n\nconst Text = styled.p`\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nconst loadType = () => {\n  const parts = state.newType.split(\"/\");\n  type = JSON.parse(Social.get(state.newType, blockHeight) || null);\n  if (type) {\n    type.name = parts[2];\n    State.update({\n      typeName: type.name,\n      properties: type.properties,\n      widgets: type.widgets,\n    });\n  }\n};\n\nif (prop.typeSrc !== \"\" && state.typeName === \"\") {\n  loadType();\n}\n\nconst handleAddProperty = () => {\n  if (state.newPropertyName.trim() === \"\") return;\n\n  const newProperty = {\n    name: state.newPropertyName,\n    type: state.newPropertyType,\n    required: state.newPropertyRequired,\n    isMulti: state.newPropertyIsMulti,\n  };\n\n  State.update({\n    properties: [...state.properties, newProperty],\n    newPropertyName: \"\",\n    newPropertyType: \"string\",\n    newPropertyIsMulti: false,\n  });\n};\n\nconst handleRemoveProperty = (index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties.splice(index, 1);\n  State.update({ properties: updatedProperties });\n};\n\nconst handlePropertyChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].name = e.target.value;\n  State.update({ properties: updatedProperties });\n};\n\nconst handleTypeChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].type = e.target.value;\n  State.update({ properties: updatedProperties });\n};\n\nconst handleMultiChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].isMulti = e.target.value;\n  State.update({ properties: updatedProperties });\n};\n\nconst handleTypeNameChange = (e) => {\n  State.update({ typeName: e.target.value.toLowerCase() });\n};\n\nconst handleWidgetKeyChange = (e) => {\n  State.update({ newWidgetKey: e.target.value.toLowerCase() });\n};\n\nconst handleWidgetSrcChange = (e) => {\n  State.update({ newWidgetSrc: e.target.value });\n};\n\nconst handleAddWidget = () => {\n  if (state.newWidgetKey.trim() === \"\" || state.newWidgetSrc.trim() === \"\")\n    return;\n\n  const newWidget = {\n    [state.newWidgetKey]: state.newWidgetSrc,\n  };\n\n  State.update({\n    widgets: { ...state.widgets, ...newWidget },\n    newWidgetKey: \"\",\n    newWidgetSrc: \"\",\n  });\n};\n\nconst handleRemoveWidget = (key) => {\n  const updatedWidgets = { ...state.widgets };\n  delete updatedWidgets[key];\n  State.update({ widgets: updatedWidgets });\n};\n\nconst composeData = () => {\n  const data = {\n    type: {\n      [state.typeName]: JSON.stringify({\n        properties: state.properties,\n        widgets: state.widgets,\n      }),\n    },\n  };\n  return data;\n};\n\nfunction TypeSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      {availableTypes.map((it) => (\n        <option value={it} key={it}>\n          {it}\n        </option>\n      ))}\n    </Select>\n  );\n}\n\nfunction MultiSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      <option value={false}>single</option>\n      <option value={true}>multi</option>\n    </Select>\n  );\n}\n\nreturn (\n  <Container>\n    <Row>\n      <Text>\n        <b>Schema Path:</b>\n      </Text>\n      <Input\n        type=\"text\"\n        value={state.newType}\n        onChange={(e) => State.update({ newType: e.target.value })}\n        placeholder={\"accountId/type/schemaId\"}\n      />\n      <Button onClick={loadType}>load</Button>\n    </Row>\n    <Row>\n      <Text>\n        <b>Type Source:</b>\n      </Text>\n      <Input\n        type=\"text\"\n        value={state.newTypeSrc}\n        onChange={(e) => State.update({ newTypeSrc: e.target.value })}\n        placeholder={\"accountId\"}\n      />\n      <Button onClick={() => State.update({ typeSrc: state.newTypeSrc })}>\n        apply\n      </Button>\n    </Row>\n    <FormContainer>\n      <Row>\n        <Text>\n          <b>Schema Id:</b>\n        </Text>\n        <Input\n          type=\"text\"\n          placeholder=\"Type Name\"\n          value={state.typeName}\n          onChange={handleTypeNameChange}\n        />\n        <i>*overwrites existing path</i>\n      </Row>\n      <hr></hr>\n      <Text>\n        <h4>Schema Fields</h4>\n        <b>1.</b> [Field Name]: give a meaningful name to the data<br></br>\n        <b>2.</b> [Field Type]: select an appropriate primitive for the data{\" \"}\n        <br></br>\n        <b>3.</b> [Single/Multi]: will the data contain multiple objects of the\n        selected type?\n      </Text>\n      {state.properties?.map((property, index) => (\n        <Row key={index}>\n          <Input\n            type=\"text\"\n            value={property.name}\n            onChange={(e) => handlePropertyChange(e, index)}\n          />\n          <TypeSelect\n            value={property.type}\n            onChange={(e) => handleTypeChange(e, index)}\n          />\n          <MultiSelect\n            value={property.isMulti}\n            onChange={(e) => handleMultiChange(e, index)}\n          />\n          <Button onClick={() => handleRemoveProperty(index)}>Remove</Button>\n        </Row>\n      ))}\n      <Row>\n        <Input\n          type=\"text\"\n          placeholder=\"Field Name\"\n          value={state.newPropertyName}\n          onChange={(e) => State.update({ newPropertyName: e.target.value })}\n        />\n        <TypeSelect\n          value={state.newPropertyType}\n          onChange={(e) => State.update({ newPropertyType: e.target.value })}\n        />\n        <MultiSelect\n          value={state.newPropertyIsMulti}\n          onChange={(e) => State.update({ newPropertyIsMulti: e.target.value })}\n        />\n        <Button\n          onClick={handleAddProperty}\n          disabled={state.newPropertyName.trim() === \"\"}\n        >\n          +\n        </Button>\n      </Row>\n      <hr></hr>\n      <Text>\n        <b>Widgets (optional):</b>\n      </Text>\n      {Object.entries(state.widgets)?.map(([key, src]) => (\n        <Row key={key}>\n          <Text>{key}:</Text>\n          <Input type=\"text\" value={src} onChange={() => {}} />\n          <Button onClick={() => handleRemoveWidget(key)}>Remove</Button>\n        </Row>\n      ))}\n      <Row>\n        <Input\n          type=\"text\"\n          placeholder=\"Widget Key\"\n          value={state.newWidgetKey}\n          onChange={handleWidgetKeyChange}\n        />\n        {\":\"}\n        <Input\n          type=\"text\"\n          placeholder=\"Widget Src\"\n          value={state.newWidgetSrc}\n          onChange={handleWidgetSrcChange}\n        />\n        <Button\n          onClick={handleAddWidget}\n          disabled={\n            state.newWidgetKey.trim() === \"\" || state.newWidgetSrc.trim() === \"\"\n          }\n        >\n          +\n        </Button>\n      </Row>\n      <hr></hr>\n      <Row>\n        <CommitButton\n          force\n          data={composeData()}\n          disabled={state.properties.length === 0}\n          className=\"styless\"\n        >\n          create\n        </CommitButton>\n      </Row>\n    </FormContainer>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/schema.editor", "fact_widget_deployments_id": "c43de90ccfe81eae2920bdf8f19d8b89", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}