{"tx_hash": "ETRAdYKTEmozSAAYJs3RTyeoMMhfNAmnv9CdWuujxiVN", "action_id_social": "8zzr73ahqy9aquTiJyMuMkRxU1YW1RQLQySmUDC4i8Lc-0-widget", "block_id": 116561054, "block_timestamp": "2024-04-10T19:32:28.444Z", "signer_id": "flowscience.near", "widget_name": "adapter.ipfs", "source_code": "// Conditionally initialize state if props.fileType is falsy\r\nprops.fileType ||\r\n  initState({\r\n    json: props.data ?? \"\", // Use props.data as json, defaulting to an empty string if it's nullish\r\n  });\r\n\r\n// Helper function to generate a URL for accessing IPFS content\r\nconst ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\r\n\r\n// Function to upload JSON data to IPFS\r\nconst UploadJson = () => {\r\n  if (state.json.length) {\r\n    // Check if there is JSON data to upload\r\n    const body = new Blob([state.json], { type: \"application/json\" }); // Prepare the JSON data as a blob for upload\r\n    console.log(body);\r\n    // Perform an asynchronous fetch request to upload the JSON data\r\n    asyncFetch(\"https://ipfs.near.social/add\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n      body,\r\n    }).then((res) => {\r\n      const cid = res.body.cid; // Extract the CID from the response\r\n      console.log(\"CID\", cid);\r\n      // Update the state with the new file's CID\r\n      State.update({\r\n        file: {\r\n          cid,\r\n        },\r\n      });\r\n    });\r\n  } else {\r\n    // If there is no JSON data, set the file in the state to null\r\n    State.update({\r\n      file: null,\r\n    });\r\n  }\r\n};\r\n\r\n// Function to handle changes in the 'name' field\r\nconst onChangeName = (name) => {\r\n  State.update({\r\n    name, // Update the state with the new name\r\n  });\r\n};\r\n\r\n// Function to generate a unique identifier\r\nfunction generateUID() {\r\n  return (\r\n    Math.random().toString(16).slice(2) + // Generate a random string\r\n    Date.now().toString(36) + // Add the current timestamp in base 36\r\n    Math.random().toString(16).slice(2) // Add another random string\r\n  );\r\n}\r\n\r\n// Determine the thingId, using the name from the state or generating a new UID\r\nconst thingId = state.name ?? generateUID();\r\n\r\n// Function to handle the creation process\r\nconst handleCreate = () => {\r\n  const hyperfile = {\r\n    thing: {\r\n      [thingId]: {\r\n        // Use thingId as the key\r\n        \"\": JSON.stringify({\r\n          // Convert the file information to a JSON string\r\n          fileformat: props.fileformat,\r\n          source: \"IPFS\",\r\n          adapter: \"hack.near/widget/adapter.ipfs\",\r\n          reference: {\r\n            cid: state.file.cid, // Reference the uploaded file's CID\r\n          },\r\n        }),\r\n      },\r\n      metadata: {\r\n        type: props.type, // Set the type from props\r\n      },\r\n    },\r\n  };\r\n\r\n  Social.set(hyperfile); // Update the social platform with the new hyperfile data\r\n};\r\n\r\n// Render the component\r\nreturn (\r\n  <>\r\n    <textarea\r\n      className=\"form-control mb-3\"\r\n      rows={5}\r\n      value={state.json}\r\n      onChange={(e) => {\r\n        state.json = e.target.value; // Update the JSON data in the state on change\r\n        State.update();\r\n      }}\r\n    />\r\n    <a type=\"button\" class=\"btn btn-success\" onClick={() => UploadJson()}>\r\n      Upload\r\n    </a>\r\n    <br />\r\n    {state.file && ( // Conditionally render the file section if a file exists in the state\r\n      <div>\r\n        <br />\r\n        Your file:\r\n        <a href={ipfsUrl(state.file.cid)}>{state.file.cid}</a>{\" \"}\r\n        {/* Link to the uploaded file on IPFS */}\r\n        <br />\r\n        <h5 className=\"mt-3\">Name</h5>\r\n        <input\r\n          type=\"text\"\r\n          value={state.name}\r\n          onChange={(e) => onChangeName(e.target.value)} // Update the name in the state on change\r\n        />\r\n        <button className=\"btn btn-outline-success mt-3\" onClick={handleCreate}>\r\n          Create\r\n        </button>\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n", "metadata": {"fork_of": "efiz.near/widget/Every.Raw.View@92400611"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/adapter.ipfs", "fact_widget_deployments_id": "74f3bf6bbb55e149a3abe98e4f7203aa", "inserted_timestamp": "2024-04-10T21:35:03.679Z", "modified_timestamp": "2024-04-10T21:35:03.679Z", "__row_index": 0}