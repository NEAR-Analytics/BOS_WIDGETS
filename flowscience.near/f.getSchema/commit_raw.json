{"tx_hash": "E4D8uUDYYrELXoTySS3aVvrEB1odD6ojBAWoKh25hGxw", "action_id_social": "6kKBFHib2QrZA8aVYjzXHvj8tNmm4Y5TrFCkKpsAvvyP-0-widget", "block_id": 117567245, "block_timestamp": "2024-04-25T04:06:51.399Z", "signer_id": "flowscience.near", "widget_name": "f.getSchema", "source_code": "// Configure provider and signer outside the exported functions if they do not depend on dynamic user input\nconst provider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism.drpc.org\"\n);\n\nfunction getSchema(contractAddress, abi, uid) {\n  if (!uid.trim()) return Promise.reject(\"UID must be provided.\");\n\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(contractAddress, abi, signer);\n\n  return contract\n    .getSchema(uid) // Ensure this method is correctly named and implemented in the contract\n    .then((schemaData) => {\n      if (!schemaData) throw new Error(\"Schema data not found\");\n      return { schema: schemaData, error: null };\n    })\n    .catch((err) => {\n      console.error(\"Error fetching schema:\", err);\n      return { error: \"Failed to retrieve schema.\" };\n    });\n}\n\nfunction fetchABI() {\n  return fetch(\n    \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/939c0fb110ea35e601e4476e81a4f83a6029f7ad/deployments/optimism/SchemaRegistry.json\"\n  )\n    .then((response) => {\n      if (!response.ok) throw new Error(\"Network response was not ok\");\n      return response.json();\n    })\n    .then((data) => {\n      if (!data.abi) throw new Error(\"ABI data is not available\");\n      return data.abi;\n    })\n    .catch((error) => {\n      console.error(\"Failed to load ABI:\", error);\n      throw error; // Rethrow or handle as needed\n    });\n}\n\n// Export the functions\nreturn { getSchema, fetchABI };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/f.getSchema", "fact_widget_deployments_id": "aff2233bdc4eb1875812d97b47bff0ce", "inserted_timestamp": "2024-04-25T06:05:31.816Z", "modified_timestamp": "2024-04-25T06:05:31.816Z", "__row_index": 1}