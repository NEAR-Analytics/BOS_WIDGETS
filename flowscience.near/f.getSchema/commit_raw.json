{"tx_hash": "8GGFCJjCgzdYGxzwT9wiMUiAnGv4pYFX4sSTAjm15un7", "action_id_social": "44zVCB8Ua2ggETvL1VnYjNkwGzSC7iJLJC3SMKVr95po-0-widget", "block_id": 117566355, "block_timestamp": "2024-04-25T03:48:05.421Z", "signer_id": "flowscience.near", "widget_name": "f.getSchema", "source_code": "// Configure provider and signer outside the exported functions if they do not depend on dynamic user input\nconst provider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism.drpc.org\"\n);\n\nfunction getSchema(contractAddress, abi, uid) {\n  if (!uid.trim()) {\n    console.error(\"UID must be a non-empty string.\");\n    return Promise.resolve({ error: \"UID must be provided.\" });\n  }\n\n  const signer = provider.getSigner(); // Assuming this will dynamically resolve the signer\n  const contract = new ethers.Contract(contractAddress, abi, signer);\n\n  return contract\n    .getSchema(uid)\n    .then(([uid, resolver, revocable, schemaData]) => {\n      return {\n        schema: {\n          uid,\n          resolver,\n          revocable,\n          schema: schemaData,\n        },\n        error: null,\n      };\n    })\n    .catch((err) => {\n      console.error(\"Error fetching schema:\", err);\n      return {\n        error: \"Failed to retrieve data. Please try with a verified uid.\",\n      };\n    });\n}\n\nfunction fetchABI() {\n  return fetch(\n    \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/939c0fb110ea35e601e4476e81a4f83a6029f7ad/deployments/optimism/SchemaRegistry.json\"\n  )\n    .then((response) => response.json())\n    .then((data) => data.abi)\n    .catch((err) => {\n      console.error(\"Error fetching ABI:\", err);\n      return null;\n    });\n}\n\n// Export the functions\nreturn { getSchema, fetchABI };\n", "metadata": {"fork_of": "flowscience.near/widget/getSchema@116519743"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/f.getSchema", "fact_widget_deployments_id": "d7cd525395547ba8588d2b9136d7838c", "inserted_timestamp": "2024-04-25T06:05:31.816Z", "modified_timestamp": "2024-04-25T06:05:31.816Z", "__row_index": 0}