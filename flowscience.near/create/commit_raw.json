{"tx_hash": "7SPNhnzSdA2i1ysKyV59nxQ7qLBhxvHasuzo12r4joFw", "action_id_social": "BVmV8wkgmk7C1CbY6Wgpo2r6akVFg7GYVr3USUp8awex-0-widget", "block_id": 111469143, "block_timestamp": "2024-01-27T20:40:12.641Z", "signer_id": "flowscience.near", "widget_name": "create", "source_code": "const item = props.item;\nconst onChange = props.onChange;\n\nconst Input = styled.input`\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n  padding: 8px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Label = styled.label`\n`;\n\nState.init({\n  ...item.value,\n});\n\nconst DynamicInput = ({ type, onChange, value, placeholder }) => {\n  if (type === \"boolean\") {\n    return (\n      <Select onChange={onChange} value={value}>\n        <option value=\"true\">true</option>\n        <option value=\"false\">false</option>\n      </Select>\n    );\n  } else {\n    return (\n      <Input\n        type={type}\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n      />\n    );\n  }\n};\n\n// Primitive checks\nif ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(item.type)) {\n  return (\n    <DynamicInput\n      type={item.type === \"string\" ? \"text\" : item.type}\n      onChange={onChange}\n      value={item.value}\n    />\n  );\n}\n\n// On-chain Type\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\nconst properties = type.properties || [];\nconst createWidgetSrc = type.widgets?.create;\n\nconst handleInputChange = (name, value) => {\n  State.update({ [name]: value });\n  if (props.onChange) {\n    props.onChange({ [name]: value });\n  }\n};\n\nconst fetchTypeDefinition = async (type) => {\n  try {\n    const response = await Social.get(type, \"final\");\n    return response ? JSON.parse(response) : null;\n  } catch (error) {\n    console.error(\"Error fetching type definition:\", error);\n    return null;\n  }\n};\n\nfunction Property({ property, value }) {\n  // If property is multiple values\n  if (property.isMulti === \"true\") {\n    // Build an array (recursively calls this Widget)\n    return (\n      <Widget\n        src=\"efiz.near/widget/every.array.build\"\n        props={{\n          item: { ...property, value },\n          onChange: (val) => handleInputChange(property.name, val),\n        }}\n      />\n    );\n  }\n  // Else check for primitives\n  if ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(property.type)) {\n    return (\n      <DynamicInput\n        type={property.type === \"string\" ? \"text\" : property.type}\n        onChange={(e) => onChange(property.name, e.target.value)}\n        value={value}\n        placeholder={property.name}\n      />\n    );\n  } else {\n    // For non-primitive types, fetch the type definition and render sub-properties\n    const [subType, setSubType] = useState(null);\n\n    useEffect(() => {\n      const loadSubType = async () => {\n        const typeDef = await fetchTypeDefinition(property.type);\n        setSubType(typeDef);\n      };\n      loadSubType();\n    }, [property.type]);\n\n    if (subType && subType.properties) {\n      // Recursively render sub-properties\n      return subType.properties.map((subProperty) => (\n        <Property\n          key={subProperty.name}\n          property={subProperty}\n          value={value[subProperty.name]}\n          onChange={onChange}\n        />\n      ));\n    } else {\n      // Render loading state or placeholder\n      return <div>Loading...</div>;\n    }\n  }\n}\n\nreturn (\n  <Container>\n    {createWidgetSrc ? (\n      <Widget src={createWidgetSrc} props={{ onChange }} />\n    ) : (\n      properties.map((property) => (\n        <div key={property.name}>\n          <Label>{property.name}</Label>\n          <Row>\n            <Property\n              property={property}\n              value={item.value[property.name]}\n              onChange={handleInputChange}\n            />\n          </Row>\n        </div>\n      ))\n    )}\n  </Container>\n);\n", "metadata": {"fork_of": "efiz.near/widget/create@95206784"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/create", "fact_widget_deployments_id": "05d2f1fa7369002cb99ed39bc5b4e5ec", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}