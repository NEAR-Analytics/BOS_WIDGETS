{"tx_hash": "BuepqYYDyYvj8H8RQBPjoBZiF12DgmQot4Jk7pDAGKyt", "action_id_social": "HWMVRkKDEei6PWVdGSAuVpLNagDDz7sLMESxvL7BMpXe-0-widget", "block_id": 111473770, "block_timestamp": "2024-01-27T21:59:40.048Z", "signer_id": "flowscience.near", "widget_name": "create", "source_code": "const item = props.item;\r\nconst onChange = props.onChange;\r\n\r\nconst Input = styled.input`\r\n  height: 30px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  height: 30px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  text-transform: lowercase !important;\r\n  padding: 8px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nState.init({\r\n  ...item.value,\r\n});\r\n\r\nconst DynamicInput = ({ type, onChange, value, placeholder }) => {\r\n  if (type === \"boolean\") {\r\n    return (\r\n      <Select onChange={onChange} value={value}>\r\n        <option value=\"true\">true</option>\r\n        <option value=\"false\">false</option>\r\n      </Select>\r\n    );\r\n  } else {\r\n    return (\r\n      <Input\r\n        type={type}\r\n        onChange={onChange}\r\n        value={value}\r\n        placeholder={placeholder}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\n// Primitive checks\r\nif ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(item.type)) {\r\n  return (\r\n    <DynamicInput\r\n      type={item.type === \"string\" ? \"text\" : item.type}\r\n      onChange={onChange}\r\n      value={item.value}\r\n    />\r\n  );\r\n}\r\n\r\n// On-chain Type\r\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\r\nconst properties = type.properties || [];\r\nconst createWidgetSrc = type.widgets?.create;\r\n\r\nconst handleInputChange = (name, value) => {\r\n  State.update({ [name]: value });\r\n  if (props.onChange) {\r\n    props.onChange({ [name]: value });\r\n  }\r\n};\r\n\r\nconst fetchTypeDefinition = (type) => {\r\n  return Social.get(type, \"final\")\r\n    .then((response) => {\r\n      // Assuming response is a JSON string\r\n      try {\r\n        return JSON.parse(response);\r\n      } catch (error) {\r\n        console.error(\"Error parsing response:\", error);\r\n        return null;\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching type definition:\", error);\r\n      return null;\r\n    });\r\n};\r\n\r\nfunction Property({ property, value }) {\r\n  // If property is multiple values\r\n  if (property.isMulti === \"true\") {\r\n    // Build an array (recursively calls this Widget)\r\n    return (\r\n      <Widget\r\n        src=\"efiz.near/widget/every.array.build\"\r\n        props={{\r\n          item: { ...property, value },\r\n          onChange: (val) => handleInputChange(property.name, val),\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // Else check for primitives\r\n  if ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(property.type)) {\r\n    return (\r\n      <DynamicInput\r\n        type={property.type === \"string\" ? \"text\" : property.type}\r\n        onChange={(e) => onChange(property.name, e.target.value)}\r\n        value={value}\r\n        placeholder={property.name}\r\n      />\r\n    );\r\n  } else {\r\n    // For non-primitive types, fetch the type definition and render sub-properties\r\n    const [subType, setSubType] = useState(null);\r\n\r\n    useEffect(() => {\r\n      const loadSubType = () => {\r\n        fetchTypeDefinition(property.type)\r\n          .then((typeDef) => setSubType(typeDef))\r\n          .catch((error) =>\r\n            console.error(\"Error fetching type definition:\", error)\r\n          );\r\n      };\r\n\r\n      loadSubType();\r\n    }, [property.type]);\r\n\r\n    if (subType && subType.properties) {\r\n      // Recursively render sub-properties\r\n      return subType.properties.map((subProperty) => (\r\n        <Property\r\n          key={subProperty.name}\r\n          property={subProperty}\r\n          value={value[subProperty.name]}\r\n          onChange={onChange}\r\n        />\r\n      ));\r\n    } else {\r\n      // Render loading state or placeholder\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nreturn (\r\n  <Container>\r\n    {createWidgetSrc ? (\r\n      <Widget src={createWidgetSrc} props={{ onChange }} />\r\n    ) : (\r\n      properties.map((property) => (\r\n        <div key={property.name}>\r\n          <Label>{property.name}</Label>\r\n          <Row>\r\n            <Property\r\n              property={property}\r\n              value={item.value[property.name]}\r\n              onChange={handleInputChange}\r\n            />\r\n          </Row>\r\n        </div>\r\n      ))\r\n    )}\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/create", "fact_widget_deployments_id": "321d4a45c092bd291181f82f8cd15f4e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 14}