{"tx_hash": "37xVYp1ri4tMXnCyfKvDdu9Yo3ahvG4mssvQiuxaBuuy", "action_id_social": "Dawmv3R351wWXcWB8qienW6kWqTBPs4MKEzTfywJRhNE-0-widget", "block_id": 112930503, "block_timestamp": "2024-02-16T05:53:38.032Z", "signer_id": "flowscience.near", "widget_name": "SchemaSelector", "source_code": "const initialSchemaSrc = props.schemaSrc || \"attestations.near\";\r\nconst [newSchemaSrc, setNewSchemaSrc] = useState(initialSchemaSrc);\r\nconst [schemaSrc, setSchemaSrc] = useState(initialSchemaSrc);\r\nconst [availableSchemas, setAvailableSchemas] = useState([]);\r\nconst [isLoading, setIsLoading] = useState(true);\r\nconst [selectedSchema, setSelectedSchema] = useState(\r\n  props.selectedSchema || \"attestations.near/type/isTrue\"\r\n);\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst Button = styled.button`\r\n  `;\r\nconst FormContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n`;\r\nconst Select = styled.select`\r\n  `;\r\nconst Label = styled.label`\r\n`;\r\nconst Input = styled.input`\r\n  `;\r\n\r\nuseEffect(() => {\r\n  const fetchSchemasList = async () => {\r\n    setIsLoading(true);\r\n    const schemas = Social.get(`${schemaSrc}/type/**`, \"final\");\r\n    if (schemas !== null) {\r\n      const schemasList = Object.keys(schemas).map(\r\n        (key) => `${schemaSrc}/type/${key}`\r\n      );\r\n      setAvailableSchemas(schemasList);\r\n    } else {\r\n      setAvailableSchemas([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  fetchSchemasList();\r\n}, [schemaSrc]); // Fetch schemas when schemaSrc changes\r\n\r\nuseEffect(() => {\r\n  // Sync state with prop when it changes\r\n  setSelectedSchema(props.selectedSchema);\r\n}, [props.selectedSchema]); // Re-run effect if props.selectedSchema changes\r\n\r\nconst handleSchemaChange = (e) => {\r\n  setSelectedSchema(e.target.value);\r\n  console.log(`New schema selected: ${newSchema}`); // Log the new schema selection\r\n\r\n  if (props.onSelectedSchemaChange) {\r\n    props.onSelectedSchemaChange(e.target.value);\r\n  }\r\n};\r\n\r\nconst handleSchemaOwnerChange = (e) => {\r\n  setNewSchemaSrc(e.target.value);\r\n};\r\n\r\nconst handleApplySchemaSrc = () => {\r\n  console.log(`Applying new Schema Owner: ${newSchemaSrc}`);\r\n  if (typeof props.onSchemaSrcChange === \"function\") {\r\n    props.onSchemaSrcChange(newSchemaSrc);\r\n  } else {\r\n    console.error(\"onSchemaSrcChange prop is not a function\");\r\n  }\r\n};\r\n\r\nreturn (\r\n  <FormContainer>\r\n    <Label>Schema Owner:</Label>\r\n    <Row>\r\n      <Input\r\n        type=\"text\"\r\n        value={newSchemaSrc}\r\n        onChange={handleSchemaOwnerChange}\r\n        placeholder=\"accountId\"\r\n      />\r\n      <Button onClick={handleApplySchemaSrc}>apply</Button>\r\n    </Row>\r\n    <Label>Schema:</Label>\r\n    <Row>\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <Select value={selectedSchema} onChange={handleSchemaChange}>\r\n          <option value=\"\">Choose a schema</option>\r\n          {availableSchemas.map((schema) => (\r\n            <option key={schema} value={schema}>\r\n              {schema}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      )}\r\n    </Row>\r\n  </FormContainer>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/SchemaSelector", "fact_widget_deployments_id": "5d9f08cd4125c1b6d3b40b69e67e1aed", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 14}