{"tx_hash": "3Ksc12e8p86cVudcHiqyzFABLs2qParr6wujTkspTwRe", "action_id_social": "AjSJmC6znyYTjLGQLrwquzigEvozkiSUVA9Kzy6XURpa-0-widget", "block_id": 117559159, "block_timestamp": "2024-04-25T01:26:53.943Z", "signer_id": "flowscience.near", "widget_name": "getSchema", "source_code": "// Example attestation UID: 0xff5dc0cdc3de27dfe6a4352c596c0f97b1f99c51a67bbae142ce315e34969dcd\n// Example schema UID:\n\nconst user = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!user) return <Web3Connect connectLabel=\"Connect\" />;\n\n// Move this to function components??\nconst provider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism.drpc.org\"\n);\n\nconst signer = provider.getSigner(user);\n// console.log(\"chain:\", chain);\n// console.log(\"signer:\", signer);\n\nconst abi = fetch(\n  \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/939c0fb110ea35e601e4476e81a4f83a6029f7ad/deployments/optimism/SchemaRegistry.json\"\n);\nconst contractAddress = \"0x4200000000000000000000000000000000000020\";\nconst parsedAbi = JSON.parse(abi.body);\nconst contract = new ethers.Contract(contractAddress, parsedAbi.abi, signer);\nconsole.log(contract);\nconst [schemaRecord, setSchemaRecord] = useState(null);\nconst [error, setError] = useState(\"\");\nconst [uid, setUid] = useState(\"\");\n\nfunction getSchema() {\n  if (typeof uid !== \"string\" || uid.trim() === \"\") {\n    console.error(\"UID must be a non-empty string.\");\n    setError(\"UID must be provided.\");\n    return;\n  }\n\n  contract\n    .getSchema(uid)\n    .then((result) => {\n      const [uid, schema, resolver, revocable] = result;\n      const mappedSchema = {\n        uid,\n        schema,\n        resolver,\n        revocable,\n      };\n      setSchemaRecord(mappedSchema);\n      setError(\"\");\n    })\n    .catch((error) => {\n      console.error(\"error fetching schema:\", error);\n      setError(\"Failed to retrieve data. Please try with a verified uid.\");\n    });\n}\n\nreturn (\n  <>\n    <div className=\"m-2\">\n      <h3>Get Schema</h3>\n      <input\n        type=\"text\"\n        placeholder=\"input UID\"\n        value={uid}\n        onChange={(e) => setUid(e.target.value)}\n      />\n    </div>\n    <div className=\"m-2\">\n      <button className=\"btn btn-primary m-1\" onClick={getAttestation}>\n        Get Schema\n      </button>\n      <p className=\"m-1\">{error}</p>\n    </div>\n    <div>\n      {attestation && (\n        <div className=\"App\">\n          <easRenderAttestation attestation={schemaRecord} />\n        </div>\n      )}\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/getSchema", "fact_widget_deployments_id": "14182ae83211bddd654bf3019960cfb5", "inserted_timestamp": "2024-04-25T03:11:56.362Z", "modified_timestamp": "2024-04-25T03:11:56.362Z", "__row_index": 1}