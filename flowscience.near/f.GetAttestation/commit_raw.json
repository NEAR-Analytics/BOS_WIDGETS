{"tx_hash": "97YWRd58VAdhd6CKteaX61EHdg5JQbYbEzXYdhfs6ghd", "action_id_social": "BmWwikYN1dLSS4seiH7Zm3FbSdqPF4Ejuydb31LnuEAS-0-widget", "block_id": 117559640, "block_timestamp": "2024-04-25T01:36:41.843Z", "signer_id": "flowscience.near", "widget_name": "f.GetAttestation", "source_code": "// This function returns JSON formatted attestation data for an input UID\n// Example inputs for retrieving attestation data from Optimism are included here.\nconst loader = VM.require(\"sdks.near/widget/Loader\");\n//const signer = VM.require(\"sdks.near/widget/SDKs.EthereumSigner\");\n\nconst abi = fetch(\n  \"https://raw.githubusercontent.com/ethereum-attestation-service/eas-contracts/master/deployments/optimism/EAS.json\"\n);\nconst provider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism.drpc.org\"\n);\n\nconst contractAddress = \"0x4200000000000000000000000000000000000021\";\nconst parsedAbi = JSON.parse(abi.body);\nconst contract = new ethers.Contract(contractAddress, parsedAbi.abi, signer);\nconst [attestation, setAttestation] = useState(null);\nconst [error, setError] = useState(\"\");\nconst [uid, setUid] =\n  useState(\"\") ||\n  \"0xff5dc0cdc3de27dfe6a4352c596c0f97b1f99c51a67bbae142ce315e34969dcd\";\n\nfunction getAttestation() {\n  if (typeof uid !== \"string\" || uid.trim() === \"\") {\n    console.error(\"UID must be a non-empty string.\");\n    setError(\"UID must be provided.\");\n    return;\n  }\n\n  contract\n    .getAttestation(uid)\n    .then((result) => {\n      const [\n        uid,\n        schema,\n        time,\n        expirationTime,\n        revocationTime,\n        refUID,\n        recipient,\n        attester,\n        revocable,\n        data,\n      ] = result;\n      const mappedAttestation = {\n        uid,\n        schema,\n        time: time.toNumber(),\n        expirationTime: expirationTime.toNumber(),\n        revocationTime: revocationTime.toNumber(),\n        refUID,\n        recipient,\n        attester,\n        revocable,\n        data,\n      };\n      setAttestation(mappedAttestation);\n      setError(\"\");\n    })\n    .catch((error) => {\n      console.error(\"error fetching attestation:\", error);\n      setError(\"Failed to retrieve data. Please try with a verified uid.\");\n    });\n}\n\nreturn { getAttestation };\n", "metadata": {"fork_of": "flowscience.near/widget/getAttestation@116519443"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/f.GetAttestation", "fact_widget_deployments_id": "cb1ed3221df194d59e69f3071041c4ad", "inserted_timestamp": "2024-04-25T03:11:56.362Z", "modified_timestamp": "2024-04-25T03:11:56.362Z", "__row_index": 0}