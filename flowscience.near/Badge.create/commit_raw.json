{"tx_hash": "DwSgarWjnjACzVBDsmMsuz2aKGX7pDMbfbVWN8XkCHDH", "action_id_social": "93D2GQn2ZTE2n16epkZoRGzpLEWU7Y3D57WvN1FaGBVx-0-widget", "block_id": 113849661, "block_timestamp": "2024-03-01T00:26:48.133Z", "signer_id": "flowscience.near", "widget_name": "Badge.create", "source_code": "const { generateUID } = VM.require(\"flowscience.near/widget/generateUID\");\r\nconst [badgeSrc, setBadgeSrc] = useState(\"every.near\");\r\nconst [badgeId, setBadgeId] = useState(\"builder\");\r\nconst data = props.data || {};\r\nconst type = props.type || \"\";\r\nconst typeSrc = props.typeSrc || \"every.near\";\r\nconst buildEdges = props.buildEdges;\r\nconst thingId = props.thingId;\r\nconst blockHeight = props.blockHeight || \"final\";\r\nconst [accountIds, setAccountIds] = useState([\r\n  `${context.accountId || \"every.near\"}`,\r\n]);\r\nconst [inputValue, setInputValue] = useState(\"\");\r\n\r\nconst handleAddAccountId = () => {\r\n  if (inputValue.trim() !== \"\" && !accountIds.includes(inputValue)) {\r\n    const newAccountIds = [...accountIds, inputValue];\r\n    setAccountIds(newAccountIds);\r\n    onResolverChange(newAccountIds);\r\n    setInputValue(\"\");\r\n  }\r\n};\r\n\r\nconst handleRemoveAccountId = (accountId) => {\r\n  const newAccountIds = accountIds.filter((id) => id !== accountId);\r\n  setAccountIds(newAccountIds);\r\n  onResolverChange(newAccountIds);\r\n};\r\n\r\nconst handleInputChange = (e) => {\r\n  setInputValue(e.target.value);\r\n};\r\n\r\nconst [badgeName, setBadgeName] = useState(\"Proof of Build\");\r\nconst [description, setDescription] = useState(\"~ good builder vibes ~\");\r\nconst [imageUrl, setImageUrl] = useState(\"\");\r\n\r\nconst badge = Social.get(`${badgeSrc}/badge/${badgeId}`, \"final\");\r\n\r\nlet importedTypes = [];\r\nconst availableTypes = JSON.parse(props.availableTypes) || [\r\n  \"string\",\r\n  \"boolean\",\r\n  \"number\",\r\n  \"date\",\r\n  \"time\",\r\n  \"tags\",\r\n  ...importedTypes,\r\n];\r\n\r\nState.init({\r\n  data,\r\n  config: data,\r\n  typeSrc,\r\n  selectedType: type,\r\n  thingId: generateUID(),\r\n});\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nconst Container = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 23px;\r\n  margin: 19px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  gap: 8px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  flex: 1;\r\n  max-width: 200px;\r\n  margin-bottom: 10px;\r\n  height: 30px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  height: 30px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 30px;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  display: inline-block;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst BadgeImage = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  text-align: center;\r\n  width: 100%; \r\n\r\n    img {\r\n      width: 4rem !important;\r\n      height: 4rem !important;\r\n      border-radius: 50%;\r\n      image-rendering: pixelated;\r\n      object-fit: cover;\r\n    }`;\r\n\r\nconst handleBadgeIdChange = (e) => {\r\n  setBadgeId(e.target.value.toLowerCase());\r\n};\r\n\r\nconst handleBadgeNameChange = (e) => {\r\n  setBadgeName(e.target.value);\r\n};\r\nconst handleDescriptionChange = (e) => {\r\n  setDescription(e.target.value);\r\n};\r\nconst handleAccountIdsChange = (e) => {\r\n  setAccountIds(e.target.value);\r\n};\r\nconst handleImageUrlChange = (e) => {\r\n  setImageUrl(e.target.value);\r\n};\r\n\r\nconst handleTypeChange = (e) => {\r\n  State.update({ selectedType: e.target.value, data: {} });\r\n};\r\n\r\nconst composeData = () => {\r\n  const data = {\r\n    badge: {\r\n      [badgeId]: {\r\n        metadata: {\r\n          name: badgeName,\r\n          description,\r\n          image: {\r\n            url: imageUrl,\r\n          },\r\n        },\r\n        accounts: accountsObject,\r\n      },\r\n    },\r\n  };\r\n\r\n  const accountsObject = accountIds.reduce((acc, accountId) => {\r\n    acc[accountId] = \"\";\r\n    return acc;\r\n  }, {});\r\n\r\n  if (Object.keys(accountsObject).length > 0) {\r\n    data.badge[badgeId].accounts = accountsObject;\r\n  } else {\r\n    delete data.badge[badgeId].accounts;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nfunction TypeSelect({ value, onChange }) {\r\n  return (\r\n    <Select value={value} onChange={onChange}>\r\n      {availableTypes.map((it) => (\r\n        <option value={it} key={it}>\r\n          {it}\r\n        </option>\r\n      ))}\r\n    </Select>\r\n  );\r\n}\r\n\r\nfunction MultiSelect({ value, onChange }) {\r\n  return (\r\n    <Select value={value} onChange={onChange}>\r\n      <option value={false}>single</option>\r\n      <option value={true}>multi</option>\r\n    </Select>\r\n  );\r\n}\r\n\r\nconst handleResolverTypeChange = (e) => {\r\n  setResolverType(e.target.value);\r\n};\r\n\r\nconst handleResolverDataChange = (newData) => {\r\n  setResolverData(newData);\r\n};\r\n\r\nconst serializedAccountsObject = JSON.stringify(\r\n  accountIds.reduce((acc, accountId) => {\r\n    acc[accountId] = \"\";\r\n    return acc;\r\n  }, {}),\r\n  null,\r\n  2\r\n);\r\n\r\nconst markdownText = `\r\n\\`\\`\\`json\r\n{\r\n  \"badge\": {\r\n    \"${badgeId}\": {\r\n      \"metadata\": {\r\n        \"name\": \"${badgeName}\",\r\n        \"description\": \"${description}\",\r\n        \"image\": {\r\n          \"url\": \"${imageUrl}\"\r\n        }\r\n      },\r\n      \"accounts\": ${serializedAccountsObject}\r\n    }\r\n  }\r\n}`;\r\n\r\nreturn (\r\n  <Container>\r\n    <FormContainer>\r\n      <Text>\r\n        <Row>\r\n          <h3 className=\"m-1\">Near Social Badge Creator</h3>\r\n          <div className=\"m-2\">\r\n            <Widget src=\"james.near/widget/BuilderHat\" props={{ accountId }} />\r\n          </div>\r\n        </Row>\r\n        <h5 className=\"m-1\">\r\n          -- inspired by <a href=\"https://everything.dev\">everything</a>,\r\n          <a href=\"https://hyperfiles.org\">Hyperfiles</a>,\r\n          <a href=\"https://archetype.computer\">Archetype</a>, and\r\n          <a href=\"https://near.social/zavodil.near/widget/social-avatar-editor\">\r\n            NS Avatars\r\n          </a>\r\n        </h5>\r\n        <p className=\"m-1 mt-2\">\r\n          <i>\r\n            Below, you may customize fields to build{\" \"}\r\n            <a href=\"https://github.com/NearSocial/standards/blob/main/types/badge\">\r\n              badges\r\n            </a>{\" \"}\r\n            (attestations) of a specific\r\n            <a href=\"https://everything.dev/efiz.near/widget/every.type.create\">\r\n              type\r\n            </a>\r\n            :{\" \"}\r\n          </i>\r\n        </p>\r\n      </Text>\r\n      <BadgeImage className=\"d-flex flex-column align-items-center justify-content-center text-center\">\r\n        <div>\r\n          <div className=\"m-3 d-flex flex-row\">\r\n            <Widget\r\n              src=\"james.near/widget/Badge\"\r\n              props={{ imageUrl, badge: true }}\r\n            />\r\n            <div className=\"ms-3\">\r\n              <div className=\"m-1\">{badgeName}</div>\r\n              <div className=\"small text-truncate\">\r\n                <i className=\"bi bi-person-badge\"></i>\r\n                badge/{badgeId}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <p>\r\n              <b>What does your badge signify?</b>\r\n            </p>\r\n            <p>{description}</p>\r\n          </div>\r\n        </div>\r\n      </BadgeImage>\r\n      <h4 className=\"m-2\">\r\n        <b>Metadata</b>\r\n      </h4>\r\n      <div className=\"m-3 mt-4\">\r\n        <h5 className=\"m-2\">\r\n          <b>Badge ID:</b>\r\n        </h5>\r\n        <div className=\"m-3\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"badge name\"\r\n            value={badgeId}\r\n            onChange={handleBadgeIdChange}\r\n          />\r\n        </div>\r\n        <h5 className=\"m-2\">\r\n          <b>Badge Name:</b>\r\n        </h5>\r\n        <div className=\"m-3\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"name\"\r\n            value={badgeName}\r\n            onChange={handleBadgeNameChange}\r\n          />\r\n        </div>\r\n        <h5 className=\"m-2\">\r\n          <b>Short Description:</b>\r\n        </h5>\r\n        <div className=\"m-3\">\r\n          <input\r\n            placeholder=\"description\"\r\n            value={description}\r\n            onChange={handleDescriptionChange}\r\n          ></input>\r\n        </div>\r\n        <h5 className=\"m-2\">\r\n          <b>Image Link:</b>\r\n        </h5>\r\n        <div className=\"m-3\">\r\n          <input\r\n            placeholder=\"url\"\r\n            value={image}\r\n            onChange={handleImageUrlChange}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"m-4\">\r\n        <h5>\r\n          <b>Recipients:</b>\r\n        </h5>\r\n        <p>Issue badges to anyone with a NEAR account.</p>\r\n        <p>\r\n          <i>OPTIONAL \u2014 Badges can be claimed or distributed later.</i>\r\n        </p>\r\n\r\n        <div className=\"m-2\">\r\n          <div className=\"d-flex flex-row mt-3\">\r\n            <div style={{ flexGrow: 1, marginRight: \"8px\" }}>\r\n              <input\r\n                type=\"text\"\r\n                style={{ width: \"100%\" }}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder=\"example.near\"\r\n              />\r\n            </div>\r\n            <button className=\"btn btn-dark\" onClick={handleAddAccountId}>\r\n              Add\r\n            </button>\r\n          </div>\r\n          <br />\r\n          {accountIds.map((accountId) => (\r\n            <>\r\n              <div\r\n                className=\"d-flex flex-row justify-content-between\"\r\n                key={accountId}\r\n              >\r\n                <Widget\r\n                  src=\"james.near/widget/profile.inline\"\r\n                  props={{ accountId }}\r\n                />\r\n                <div className=\"ml-auto\">\r\n                  <button\r\n                    className=\"btn btn-light\"\r\n                    onClick={() => handleRemoveAccountId(accountId)}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <br />\r\n            </>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <FormContainer>\r\n          <h4 className=\"m-2\">\r\n            <b>Badge Data</b>\r\n          </h4>\r\n          <Label>Import Types:</Label>\r\n          <Row>\r\n            <Input\r\n              type=\"text\"\r\n              value={state.newTypeSrc}\r\n              onChange={(e) => State.update({ newTypeSrc: e.target.value })}\r\n              placeholder={\"accountId e.g. every.near\"}\r\n            />\r\n            <Button onClick={() => State.update({ typeSrc: state.newTypeSrc })}>\r\n              apply\r\n            </Button>\r\n            <Label>Schema</Label>\r\n            <Select value={state.selectedType} onChange={handleTypeChange}>\r\n              <option value=\"\">Select a schema</option>\r\n              {availableTypes?.map((it) => (\r\n                <option value={it} key={it}>\r\n                  {it}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </Row>\r\n          <Widget\r\n            src=\"efiz.near/widget/create\"\r\n            props={{\r\n              item: {\r\n                type: state.selectedType,\r\n                value: state.data,\r\n              },\r\n              onChange: handleOnChange,\r\n            }}\r\n          />\r\n          <Row>\r\n            <Label>\r\n              <b>UID:</b> {state.thingId}\r\n            </Label>\r\n          </Row>\r\n        </FormContainer>\r\n      </div>\r\n      <div></div>\r\n      <div className=\"m-3\">\r\n        <h4 className=\"m-2\">Data Structure</h4>\r\n        <p className=\"m-2\">\r\n          This badge would be saved under your account like this...\r\n        </p>\r\n      </div>\r\n      <div className=\"m-3\">\r\n        <Markdown\r\n          text={markdownText}\r\n          syntaxHighlighterProps={{\r\n            wrapLines: true,\r\n            lineProps,\r\n            showLineNumbers: true,\r\n            lineNumberStyle: { display: !props.showLineNumber && \"none\" },\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"m-3\">\r\n        <CommitButton style={{ width: \"100%\" }} force data={composeData()}>\r\n          Save\r\n        </CommitButton>\r\n      </div>\r\n    </FormContainer>\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/Badge.create", "fact_widget_deployments_id": "b34c4284e35b2e259e8e3b3280c17c9a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}