{"tx_hash": "ATD3mXjrfetb87wgo7KTNSVTk2mQyDSWviE21bV3q5r3", "action_id_social": "7trLERYcNzgQVboLHXGmMgvx9R4iiMgj4xM3L2sNaoiw-0-widget", "block_id": 112291532, "block_timestamp": "2024-02-07T07:14:13.959Z", "signer_id": "flowscience.near", "widget_name": "attest", "source_code": "const item = props.item;\nconst onChange = props.onChange;\nconst selectedSchema = props.selectedSchema ?? \"attestations.near/type/isTrue\";\nconst recipientId = props.recipientId;\nconst expireDate = props.expireDate;\nconst expireTime = props.expireTime;\nconst revokeDate = props.revokeDate;\nconst refUID = props.refUID;\nconst payload = props.payload;\n\nconst Input = styled.input`\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n  padding: 8px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Label = styled.label`\n`;\n\nfunction generateUID() {\n  const length = 16; // This will create a 64-bit number (16 hexadecimal characters)\n  // randomly change the case of a character\n  const randomCase = (char) =>\n    Math.random() > 0.5 ? char.toUpperCase() : char.toLowerCase();\n  // Generate a random hexadecimal number and convert it to a string\n  let uid = \"\";\n  for (let i = 0; i < length; i++) {\n    const randomChar = Math.floor(Math.random() * 16).toString(16); // Generate a single random hexadecimal character\n    uid += randomCase(randomChar); // Append the character in either case to the UID\n  }\n  return uid;\n}\n\nState.init({\n  ...item.value,\n  objectUID: generateUID(),\n  selectedSchema: selectedSchema,\n  recipientId: state.recipientId,\n  expireDate: state.expireDate,\n  expireTime: state.expireTime,\n  revokeDate: state.revokeDate,\n  revokeTime: state.revokeTime,\n  refUID: state.refUID,\n  payload: state.payload,\n  data: state.data,\n  metadata: \"\",\n});\n\nconst data = {\n  attestation: {\n    [selectedSchema]: JSON.stringify({\n      fields: {\n        objectUID: state.objectUID,\n        attestor: context.accountId,\n        recipientId: state.recipientId,\n        expireDate: state.expireDate,\n        expireTime: state.expireTime,\n        revokeDate: state.revokeDate,\n        revokeTime: state.revokeTime,\n        refUID: state.refUID,\n        payload: state.payload,\n        schema: state.selectedSchema,\n      },\n    }),\n  },\n};\n\nconst DynamicInput = ({ type, onChange, value, placeholder }) => {\n  if (type === \"boolean\") {\n    return (\n      <Select onChange={onChange} value={value}>\n        <option value=\"true\">true</option>\n        <option value=\"false\">false</option>\n      </Select>\n    );\n  } else {\n    return (\n      <Input\n        type={type}\n        onChange={onChange}\n        value={value}\n        placeholder={placeholder}\n      />\n    );\n  }\n};\n\n// Primitive checks\nif ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(item.type)) {\n  return (\n    <DynamicInput\n      type={item.type === \"string\" ? \"text\" : item.type}\n      onChange={onChange}\n      value={item.value}\n    />\n  );\n}\n\n// On-chain Type\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\nconst properties = type.properties || [];\nconst createWidgetSrc = type.widgets?.create;\n\nconst handleInputChange = (name, value) => {\n  State.update({ [name]: value });\n  if (props.onChange) {\n    props.onChange({ [name]: value });\n  }\n};\n\nfunction Property({ property, value }) {\n  // If property is multiple values\n  if (property.isMulti === \"true\") {\n    // Build an array (recursively calls this Widget)\n    return (\n      <Widget\n        src=\"efiz.near/widget/every.array.build\"\n        props={{\n          item: { ...property, value },\n          onChange: (val) => handleInputChange(property.name, val),\n        }}\n      />\n    );\n  }\n  // Else check for primitives\n  if ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(property.type)) {\n    return (\n      <DynamicInput\n        type={property.type === \"string\" ? \"text\" : property.type}\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\n        value={state[property.name] || \"\"}\n        placeholder={property.name}\n      />\n    );\n  } else {\n    // This requires a specific type of creator\n    // (like image upload)\n    // TODO: I don't think this does what I want it to yet...\n    const propertyType = JSON.parse(\n      Social.get(property.type, \"final\") || \"null\"\n    );\n    const widgetSrc = propertyType?.widgets?.create;\n    // it would be great to modify the onChange function\n    return (\n      <Widget\n        src={widgetSrc}\n        props={{ onChange: (e) => handleInputChange(property.name, e) }}\n      />\n    );\n  }\n}\n\nconst handleSave = () => {\n  Social.set(data);\n};\n\nreturn (\n  <Container>\n    <Label>\n      <b>UID:</b> {state.objectUID}\n    </Label>\n    <Label>\n      <b>Attestor:</b> {context.accountId}\n    </Label>\n    <Label>\n      <b>Recipient: </b>\n    </Label>\n    <Input\n      type=\"text\"\n      value={recipientId}\n      onChange={(e) => State.update({ recipientId: e.target.value })}\n      placeholder=\"recipient.near\"\n    />\n    <Label>\n      <b>Expiration Date: </b>\n    </Label>\n    <Input\n      type=\"date\"\n      value={expireDate}\n      onChange={(e) => State.update({ expireDate: e.target.value })}\n      placeholder=\"\"\n    />\n    <Label>\n      <b>Expiration Time: </b>\n    </Label>\n    <Input\n      type=\"time\"\n      value={expireTime}\n      onChange={(e) => State.update({ expireTime: e.target.value })}\n      placeholder=\"\"\n    />\n    <Label>\n      <b>refUID: </b>\n    </Label>\n    <Input\n      type=\"text\"\n      value={refUID}\n      onChange={(e) => State.update({ refUID: e.target.value })}\n      placeholder=\"attestations.near/thing/0123456789123456\"\n    />\n    <Label>\n      <b>Data: </b>\n    </Label>\n    <Input\n      type=\"text\"\n      value={payload}\n      onChange={(e) => State.update({ payload: e.target.value })}\n      placeholder=\"# This is markdown text.\"\n    />\n    {createWidgetSrc ? (\n      <>\n        <Widget src={createWidgetSrc} props={{ onChange }} />\n      </>\n    ) : (\n      <>\n        {properties?.map((property) => (\n          <div key={property.name}>\n            <Label>{property.name}</Label>\n            <Row>\n              <Property property={property} value={item.value[property.name]} />\n            </Row>\n          </div>\n        ))}\n      </>\n    )}\n    <Button onClick={handleSave}>Save</Button>\n    <hr></hr>Preview:\n    <Widget\n      src=\"efiz.near/widget/Every.Raw.View\"\n      props={{\n        value: data,\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/attest", "fact_widget_deployments_id": "390812ab1405e139c673f81862913dcc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}