{"tx_hash": "D7FPyesWwAL1XBD4dtocDCpP7MWHiMf5WrV5Z25MUroN", "action_id_social": "CZ4tEiQ8GLa8oAj2YpXKMdzexgFaKqYi1TDVYAVj1rMv-0-widget", "block_id": 112917598, "block_timestamp": "2024-02-16T01:27:57.982Z", "signer_id": "flowscience.near", "widget_name": "attest", "source_code": "const item = props.item;\r\nconst onChange = props.onChange;\r\n\r\nconst [formValues, setFormValues] = useState({\r\n  recipientId: props.recipientId || \"\",\r\n  expireDate: props.expireDate || \"\",\r\n  expireTime: props.expireTime || \"\",\r\n  revokeDate: props.revokeDate || \"\",\r\n  refUID: props.refUID || \"\",\r\n  payload: props.payload || \"\",\r\n});\r\n\r\nconst Input = styled.input`\r\n  height: 30px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  height: 30px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  text-transform: lowercase !important;\r\n  padding: 8px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nconst { generateUID } = VM.require(\"flowscience.near/widget/generateUID\");\r\n\r\nState.init({\r\n  ...item.value,\r\n  objectUID: generateUID(),\r\n});\r\n\r\nconst attestData = {\r\n  attestation: {\r\n    [props.item.selectedSchema]: {\r\n      [state.objectUID]: {\r\n        ...formValues,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst DynamicInput = ({ type, onChange, value, placeholder }) => {\r\n  if (type === \"boolean\") {\r\n    return (\r\n      <Select onChange={onChange} value={value}>\r\n        <option value=\"true\">true</option>\r\n        <option value=\"false\">false</option>\r\n      </Select>\r\n    );\r\n  } else {\r\n    return (\r\n      <Input\r\n        type={type}\r\n        onChange={onChange}\r\n        value={value}\r\n        placeholder={placeholder}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\n// Primitive checks\r\nif ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(item.type)) {\r\n  return (\r\n    <DynamicInput\r\n      type={item.type === \"string\" ? \"text\" : item.type}\r\n      onChange={onChange}\r\n      value={item.value}\r\n    />\r\n  );\r\n}\r\n\r\n// On-chain Type\r\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\r\nconst properties = type.properties || [];\r\nconst createWidgetSrc = type.widgets?.create;\r\n\r\nfunction Property({ property, value }) {\r\n  // If property is multiple values\r\n  if (property.isMulti === \"true\") {\r\n    // Build an array (recursively calls this Widget)\r\n    return (\r\n      <Widget\r\n        src=\"efiz.near/widget/every.array.build\"\r\n        props={{\r\n          item: { ...property, value },\r\n          onChange: (val) => handleInputChange(property.name, val),\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  // Else check for primitives\r\n  if ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(property.type)) {\r\n    return (\r\n      <DynamicInput\r\n        type={property.type === \"string\" ? \"text\" : property.type}\r\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\r\n        value={state[property.name] || \"\"}\r\n        placeholder={property.name}\r\n      />\r\n    );\r\n  } else {\r\n    // This requires a specific type of creator\r\n    // (like image upload)\r\n    // TODO: I don't think this does what I want it to yet...\r\n    const propertyType = JSON.parse(\r\n      Social.get(property.type, \"final\") || \"null\"\r\n    );\r\n    const widgetSrc = propertyType?.widgets?.create;\r\n    // it would be great to modify the onChange function\r\n    return (\r\n      <Widget\r\n        src={widgetSrc}\r\n        props={{ onChange: (e) => handleInputChange(property.name, e) }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst handleSave = () => {\r\n  Social.set(attestData)\r\n    .then(() => {\r\n      console.log(\"Attestation saved successfully\");\r\n      if (onChange) {\r\n        onChange(attestData);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error saving attestation:\", error);\r\n    });\r\n};\r\n\r\nconst handleInputChange = (name, value) => {\r\n  // Update local form state\r\n  setFormValues((prev) => ({ ...prev, [name]: value }));\r\n\r\n  // Propagate changes if an external onChange handler is provided\r\n  if (onChange) {\r\n    onChange({ ...formValues, [name]: value });\r\n  }\r\n};\r\n\r\nreturn (\r\n  <Container>\r\n    {createWidgetSrc ? (\r\n      <>\r\n        <Widget src={createWidgetSrc} props={{ onChange }} />\r\n      </>\r\n    ) : (\r\n      <>\r\n        {properties?.map((property) => (\r\n          <div key={property.name}>\r\n            <Label>{property.name}</Label>\r\n            <Row>\r\n              <Property property={property} value={item.value[property.name]} />\r\n            </Row>\r\n          </div>\r\n        ))}\r\n      </>\r\n    )}\r\n    <Label>\r\n      <b>UID:</b> {state.objectUID}\r\n    </Label>\r\n    <Label>\r\n      <b>Attestor:</b> {context.accountId}\r\n    </Label>\r\n    <Label>\r\n      <b>Recipient: </b>\r\n    </Label>\r\n    <Input\r\n      type=\"text\"\r\n      value={formValues.recipientId}\r\n      onChange={(e) => handleInputChange(\"recipientId\", e.target.value)}\r\n      placeholder=\"recipient.near\"\r\n    />\r\n    <Label>\r\n      <b>Expiration Date: </b>\r\n    </Label>\r\n    <Input\r\n      type=\"date\"\r\n      value={formValues.expireDate}\r\n      onChange={(e) => handleInputChange(\"expireDate\", e.target.value)}\r\n      placeholder=\"\"\r\n    />\r\n    <Label>\r\n      <b>Expiration Time: </b>\r\n    </Label>\r\n    <Input\r\n      type=\"time\"\r\n      value={formValues.expireTime}\r\n      onChange={(e) => handleInputChange(\"expireTime\", e.target.value)}\r\n      placeholder=\"\"\r\n    />\r\n    <Label>\r\n      <b>refUID: </b>\r\n    </Label>\r\n    <Input\r\n      type=\"text\"\r\n      value={formValues.refUID}\r\n      onChange={(e) => handleInputChange(\"refUID\", e.target.value)}\r\n      placeholder=\"attestations.near/thing/0123456789123456\"\r\n    />\r\n    <Label>\r\n      <b>Data Payload: </b>\r\n    </Label>\r\n    <Input\r\n      type=\"text\"\r\n      value={formValues.payload}\r\n      onChange={(e) => handleInputChange(\"payload\", e.target.value)}\r\n      placeholder=\"# This is markdown text.\"\r\n    />\r\n    <Button onClick={handleSave}>Save</Button>\r\n    <hr></hr>Preview:\r\n    <Widget\r\n      src=\"efiz.near/widget/Every.Raw.View\"\r\n      props={{\r\n        value: attestData,\r\n      }}\r\n    />\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/attest", "fact_widget_deployments_id": "9458d1a349720502a6a3396dd1ace12f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}