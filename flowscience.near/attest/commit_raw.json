{"tx_hash": "F4Ur23c22ZaeoYh7Y7KWudz85o9BE2VaZVm5aY23QZCy", "action_id_social": "7mEtQYbUpueYXMJT5SEkMGW5iKK3v4YbETws7way3CtQ-0-widget", "block_id": 112656432, "block_timestamp": "2024-02-12T04:31:51.102Z", "signer_id": "flowscience.near", "widget_name": "attest", "source_code": "const selectedSchema = props.selectedSchema ?? \"attestations.near/type/isTrue\";\nconst [schemaFields, setSchemaFields] = useState({});\nconst {\n  item,\n  onChange,\n  recipientId,\n  expireDate,\n  expireTime,\n  revokeDate,\n  refUID,\n  payload,\n} = props;\n\nconst initialFormValues = {\n  recipientId: props.recipientId || \"\",\n  expireDate: props.expireDate || \"\",\n  expireTime: props.expireTime || \"\",\n  revokeDate: props.revokeDate || \"\",\n  refUID: props.refUID || \"\",\n  payload: props.payload || \"\",\n  // Initialize dynamic schema fields here as well\n};\n\n// Initialize state\nconst [formValues, setFormValues] = useState(initialFormValues);\n\nconst Input = styled.input`\n  height: 30px;\n`;\n\nconst Select = styled.select`\n  height: 30px;\n`;\n\nconst Button = styled.button`\n  text-transform: lowercase !important;\n  padding: 8px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Label = styled.label`\n`;\n\nconst { generateUID } = VM.require(\"flowscience.near/widget/generateUID\");\n\nState.init({\n  ...item.value,\n  objectUID: generateUID(),\n  selectedSchema: selectedSchema,\n  schemaFields: schemaFields,\n  recipientId: state.recipientId,\n  expireDate: state.expireDate,\n  expireTime: state.expireTime,\n  refUID: state.refUID,\n  payload: state.payload,\n  attestData: props.data,\n  metadata: \"\",\n});\n\nconst attestData = {\n  attestation: {\n    [selectedSchema]: {\n      [state.objectUID]: {\n        attestor: context.accountId,\n        recipientId: state.recipientId,\n        expireDate: state.expireDate,\n        expireTime: state.expireTime,\n        refUID: state.refUID,\n        payload: state.payload,\n      },\n    },\n  },\n};\n\nconst DynamicInput = ({ fieldName, type, value, placeholder }) => {\n  const handleChange = (e) => {\n    const newValue =\n      type === \"boolean\" ? e.target.value === \"true\" : e.target.value;\n    handleInputChange(fieldName, newValue);\n  };\n\n  if (type === \"boolean\") {\n    return (\n      <Select onChange={handleChange} value={String(value)}>\n        <option value=\"true\">true</option>\n        <option value=\"false\">false</option>\n      </Select>\n    );\n  } else {\n    return (\n      <Input\n        type={type}\n        onChange={handleChange}\n        value={value || \"\"}\n        placeholder={placeholder}\n      />\n    );\n  }\n};\n\n// Primitive checks\nif ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(item.type)) {\n  return (\n    <DynamicInput\n      type={item.type === \"string\" ? \"text\" : item.type}\n      onChange={onChange}\n      value={item.value}\n    />\n  );\n}\n\n// On-chain Type\nconst type = JSON.parse(Social.get(item.type, \"final\") || \"null\");\nconst properties = type.properties || [];\nconst createWidgetSrc = type.widgets?.create;\n\nfunction Property({ property, value }) {\n  // If property is multiple values\n  if (property.isMulti === \"true\") {\n    // Build an array (recursively calls this Widget)\n    return (\n      <Widget\n        src=\"efiz.near/widget/every.array.build\"\n        props={{\n          item: { ...property, value },\n          onChange: (val) => handleInputChange(property.name, val),\n        }}\n      />\n    );\n  }\n  // Else check for primitives\n  if ([\"string\", \"number\", \"date\", \"time\", \"boolean\"].includes(property.type)) {\n    return (\n      <DynamicInput\n        type={property.type === \"string\" ? \"text\" : property.type}\n        onChange={(e) => handleInputChange(property.name, e.target.value)}\n        value={state[property.name] || \"\"}\n        placeholder={property.name}\n      />\n    );\n  } else {\n    // This requires a specific type of creator\n    // (like image upload)\n    // TODO: I don't think this does what I want it to yet...\n    const propertyType = JSON.parse(\n      Social.get(property.type, \"final\") || \"null\"\n    );\n    const widgetSrc = propertyType?.widgets?.create;\n    // it would be great to modify the onChange function\n    return (\n      <Widget\n        src={widgetSrc}\n        props={{ onChange: (e) => handleInputChange(property.name, e) }}\n      />\n    );\n  }\n}\n\nconst handleSave = () => {\n  // Construct the attestData object using formValues state\n  const attestData = {\n    attestation: {\n      [selectedSchema]: {\n        // Generate a UID for the attestation if necessary or use an existing one\n        [state.objectUID]: {\n          ...formValues,\n          attestor: context.accountId,\n        },\n      },\n    },\n  };\n\n  // Save the attestation data\n  Social.set(attestData)\n    .then(() => {\n      console.log(\"Attestation saved successfully\");\n      if (onChange) {\n        onChange(attestData); // Invoke onChange with the new attestation data if provided\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error saving attestation:\", error);\n    });\n};\n\nconst handleSchemaChange = (e) => {\n  const newSchema = e.target.value;\n  State.update({\n    selectedSchema: newSchema,\n    schemaFields: Social.get(selectedSchema),\n  });\n};\n\nconst handleInputChange = (propertyName, value) => {\n  // Update the local state with the new value for the given property\n  setFormValues((prev) => ({\n    ...prev,\n    [propertyName]: value,\n  }));\n};\n\nconst fetchSchema = (selectedSchema) => {\n  // Example fetch logic, adjust based on your API/backend\n  const schemaDetails = Social.get(selectedSchema, \"final\");\n  if (schemaDetails) {\n    try {\n      const parsedSchemaDetails = JSON.parse(schemaDetails);\n      setSchemaFields(parsedSchemaDetails);\n    } catch (error) {\n      console.error(\"Failed to parse schema details:\", error);\n      setSchemaFields({});\n    }\n  } else {\n    console.log(\"Schema details not found for:\", schema);\n    setSchemaFields({});\n  }\n};\n\nuseEffect(() => {\n  const fetchSchemaDetails = async () => {\n    const schemaDetailsRaw = Social.get(`${selectedSchema}`, \"final\");\n    if (schemaDetailsRaw) {\n      try {\n        const schemaDetails = JSON.parse(schemaDetailsRaw);\n        setSchemaFields(schemaDetails.properties || {});\n      } catch (error) {\n        console.error(\"Error parsing schema details:\", error);\n        setSchemaFields({});\n      }\n    } else {\n      console.log(\"Schema details not found for:\", selectedSchema);\n      setSchemaFields({});\n    }\n  };\n\n  fetchSchemaDetails();\n}, [selectedSchema]);\n\nreturn (\n  <Container>\n    <Label>\n      <b>UID:</b> {state.objectUID}\n    </Label>\n    <Label>\n      <b>Attestor:</b> {context.accountId}\n    </Label>\n    <Label>\n      <b>Recipient: </b>\n    </Label>\n    <Input\n      type=\"text\"\n      value={formValues.recipientId}\n      onChange={(e) => handleInputChange(\"recipientId\", e.target.value)}\n      placeholder=\"recipient.near\"\n    />\n    <Label>\n      <b>Expiration Date: </b>\n    </Label>\n    <Input\n      type=\"date\"\n      value={formValues.expireDate}\n      onChange={(e) => handleInputChange(\"expireDate\", e.target.value)}\n      placeholder=\"\"\n    />\n    <Label>\n      <b>Expiration Time: </b>\n    </Label>\n    <Input\n      type=\"time\"\n      value={formValues.expireTime}\n      onChange={(e) => handleInputChange(\"expireTime\", e.target.value)}\n      placeholder=\"\"\n    />\n    <Label>\n      <b>refUID: </b>\n    </Label>\n    <Input\n      type=\"text\"\n      value={formValues.refUID}\n      onChange={(e) => handleInputChange(\"refUID\", e.target.value)}\n      placeholder=\"attestations.near/thing/0123456789123456\"\n    />\n    <Label>\n      <b>Data Payload: </b>\n    </Label>\n    <Input\n      type=\"text\"\n      value={formValues.payload}\n      onChange={(e) => handleInputChange(\"payload\", e.target.value)}\n      placeholder=\"# This is markdown text.\"\n    />\n    {Object.entries(schemaFields).map(([fieldName, details]) => (\n      <Row key={fieldName}>\n        <Label>{fieldName}:</Label>\n        <DynamicInput\n          fieldName={fieldName}\n          type={details.type}\n          value={formValues[fieldName]}\n          placeholder={`Enter ${fieldName}`}\n        />\n      </Row>\n    ))}\n    {createWidgetSrc ? (\n      <>\n        <Widget src={createWidgetSrc} props={{ onChange }} />\n      </>\n    ) : (\n      <>\n        {properties?.map((property) => (\n          <div key={property.name}>\n            <Label>{property.name}</Label>\n            <Row>\n              <Property property={property} value={item.value[property.name]} />\n            </Row>\n          </div>\n        ))}\n      </>\n    )}\n    <Button onClick={handleSave}>Save</Button>\n    <hr></hr>Preview:\n    <Widget\n      src=\"efiz.near/widget/Every.Raw.View\"\n      props={{\n        value: formValues,\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/attest", "fact_widget_deployments_id": "60c7a6faf100c2396a78041bd235e737", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 45}