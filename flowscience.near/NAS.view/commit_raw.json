{"tx_hash": "6Qmux43H4TjctAvX5JJkZLacZmQzkxB2Vwj5sgu9cqHF", "action_id_social": "22TFb31DPorjsyupSk9UhFNKeQcmqMSgqEMtYMu77vbG-0-widget", "block_id": 113314452, "block_timestamp": "2024-02-21T22:16:18.663Z", "signer_id": "flowscience.near", "widget_name": "NAS.view", "source_code": "const path = props.path; // every piece of data on social contract has a path\nconst blockHeight = props.blockHeight || \"final\"; // and a blockHeight (~version)\nconst options = props.options;\n\n// split the path\nconst parts = path.split(\"/\");\nconst creatorId = parts[0];\n\nlet type;\nif (parts.length === 1) {\n  if (parts[0].charAt(0) === \"#\") {\n    // hashtag\n    type = \"hashtag\";\n  } else {\n    // every root of a path is an account\n    type = \"account\";\n  }\n} else {\n  // otherwise the \"standard\" is the type (widget, post, type, thing...)\n  // for thing, we'll extract the actual \"Type\" later\n  type = parts[1];\n}\n\nState.init({});\n\nconst Container = styled.div`\n  border: 1px solid #ccc;\n  height: fit-content;\n`;\n\nconst Content = styled.div`\n  padding: 1px;\n  min-height: 300px;\n`;\n\nfunction Thing() {\n  // Renders the path according to type\n  console.log(type);\n  switch (type) {\n    case \"thing\": {\n      // get the thing data\n      const thing = JSON.parse(Social.get(path, blockHeight) || \"null\");\n      type = thing.type || null;\n      // get the type data\n      const typeObj = JSON.parse(Social.get(type, blockHeight) || \"null\");\n      if (typeObj === null) {\n        console.log(\n          `edge case: thing ${path} had an invalid type: ${thingType}`\n        );\n      }\n      // determine the widget to render this thing (is there a default view?)\n      const widgetSrc =\n        options?.templateOverride ||\n        thing.template?.src ||\n        typeObj?.widgets?.view;\n      // Template\n      return (\n        <Widget\n          src={widgetSrc}\n          props={{ data: thing.data, path, blockHeight }}\n        />\n      );\n    }\n    case \"post\": {\n      return (\n        <Widget\n          src=\"every.near/widget/every.post.view\"\n          props={{\n            path,\n            blockHeight: a.blockHeight,\n          }}\n        />\n      );\n    }\n    case \"widget\": {\n      return <Widget src={path} props={props} />;\n    }\n    case \"account\": {\n      return <Widget src=\"efiz.near/widget/Tree\" props={{ rootPath: path }} />;\n    }\n    case \"settings\": {\n      // Standardize path to {accountId}/settings/**\n      parts.splice(2);\n      parts.push(\"**\");\n      path = parts.join(\"/\");\n      return (\n        <Widget\n          src=\"efiz.near/widget/Every.Setting\"\n          props={{ path, blockHeight }}\n        />\n      );\n    }\n    case \"type\": {\n      return (\n        <Widget\n          src=\"every.near/widget/every.type.create\"\n          props={{ typeSrc: path }}\n        />\n      );\n    }\n    case \"hashtag\": {\n      return (\n        <Widget\n          src=\"efiz.near/widget/every.hashtag.view\"\n          props={{ hashtag: parts[0].substring(1) }}\n        />\n      );\n    }\n    case \"schema\": {\n      return (\n        <Widget\n          src=\"every.near/widget/every.type.create\"\n          props={{ typeSrc: path }}\n        />\n      );\n    }\n    case \"attestation\": {\n  // Fetch the attestation data from Social.get\n  const attestation = JSON.parse(Social.get(path, blockHeight) || \"null\");\n  const attestationData = attestation[\"Ae8F53bf4DC7311Bdb731A2D21fCCE1C5541b4dB49\"] || attestation; // Adjust based on your data structure\n  \n  // Render different content based on the attestation type\n  if (attestationData.type === \"every.near/type/image\") {\n    // For image types, render an image widget or directly the image if you have a direct link or CID\n    const imageUrl = `https://ipfs.io/ipfs/${attestationData.schema.ipfs_cid}`;\n    return (\n      <div>\n        <p>Recipient ID: {attestationData.recipientId}</p>\n        <p>Expire Date: {attestationData.expireDate}</p>\n        <p>Expire Time: {attestationData.expireTime}</p>\n        <img src={imageUrl} alt=\"Attestation Content\" />\n      </div>\n    );\n  } else {\n    // For other types, render accordingly\n    return (\n      <div>\n        <p>Attestation content:</p>\n        <pre>{JSON.stringify(attestationData, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\n  // DEFAULT:\n  return <p>The type: {type} is not yet supported.</p>;\n}\n\nreturn (\n  <Container id={path}>\n    <Content>\n      <Thing />\n    </Content>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/NAS.view", "fact_widget_deployments_id": "47408c3b2f29291014fdfeb383e8e7a0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}