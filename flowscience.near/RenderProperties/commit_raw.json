{"tx_hash": "B3DseL8MGd5BZoJSdW5FJPMfgcqU9ZhAL5SXUej5dGKN", "action_id_social": "EMtKw48iX1zHHkoBUd1nHifHaS7LRihkHyurgSP4uH3V-0-widget", "block_id": 112520627, "block_timestamp": "2024-02-10T06:45:54.344Z", "signer_id": "flowscience.near", "widget_name": "RenderProperties", "source_code": "// A function to render properties, adjusted to use stored schemas from the state\nconst renderProperties = (properties, data, onChange) => {\n  if (state.loading) {\n    return <div>Loading...</div>; // Show loading indicator while data is being fetched\n  }\n  if (!properties) {\n    return <div>No properties to display</div>; // Add a condition for no properties\n  }\n  return properties.map((property) => {\n    const propertyType = property.type;\n    if (\n      propertyType.startsWith(\"${typeSrc}.near/type/\") &&\n      state.schemas[propertyType]\n    ) {\n      // Use the stored schema from the state\n      const nestedSchema = state.schemas[propertyType];\n      if (nestedSchema && nestedSchema.properties) {\n        return renderProperties(\n          nestedSchema.properties,\n          data[property.name],\n          onChange\n        );\n      } else {\n        // Handle the case where the nested schema is not available yet\n        // This could be a placeholder or a loading indicator\n        return <div>Loading...</div>;\n      }\n    } else {\n      // Render a simple input for primitive types\n      return (\n        <Input\n          key={property.name}\n          type={property.type === \"string\" ? \"text\" : property.type}\n          value={data[property.name] || \"\"}\n          placeholder={property.name}\n          onChange={(e) => onChange(property.name, e.target.value)}\n        />\n      );\n    }\n  });\n};\n", "metadata": {"fork_of": "devs.near/widget/everything.sdk@100119946"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/RenderProperties", "fact_widget_deployments_id": "c2becdd55f62eefae8cd7e1347d3045b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}