{"tx_hash": "J7MsLRGmtMGqpeLPtHQqXv4onFrmdVm6VnDbzyH5NVWr", "action_id_social": "73p5Zbxs2p8ML4pD9KC2W15LRSdevhmbarSpAbowyxdx-0-widget", "block_id": 112353652, "block_timestamp": "2024-02-08T03:33:03.462Z", "signer_id": "flowscience.near", "widget_name": "RenderProperties", "source_code": "// A function to render properties, adjusted to use stored schemas from the state\r\nconst renderProperties = (properties, data, onChange) => {\r\n  if (state.loading) {\r\n    return <div>Loading...</div>; // Show loading indicator while data is being fetched\r\n  }\r\n  if (!properties) {\r\n    return <div>No properties to display</div>; // Add a condition for no properties\r\n  }\r\n  return properties.map((property) => {\r\n    const propertyType = property.type;\r\n    if (\r\n      propertyType.startsWith(\"${typeSrc}.near/type/\") &&\r\n      state.schemas[propertyType]\r\n    ) {\r\n      // Use the stored schema from the state\r\n      const nestedSchema = state.schemas[propertyType];\r\n      if (nestedSchema && nestedSchema.properties) {\r\n        return renderProperties(\r\n          nestedSchema.properties,\r\n          data[property.name],\r\n          onChange\r\n        );\r\n      } else {\r\n        // Handle the case where the nested schema is not available yet\r\n        // This could be a placeholder or a loading indicator\r\n        return <div>Loading...</div>;\r\n      }\r\n    } else {\r\n      // Render a simple input for primitive types\r\n      return (\r\n        <Input\r\n          key={property.name}\r\n          type={property.type === \"string\" ? \"text\" : property.type}\r\n          value={data[property.name] || \"\"}\r\n          placeholder={property.name}\r\n          onChange={(e) => onChange(property.name, e.target.value)}\r\n        />\r\n      );\r\n    }\r\n  });\r\n};\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/RenderProperties", "fact_widget_deployments_id": "b1ac29333553470199395e7be9fcf1f0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}