{"tx_hash": "GFeu2jNxoms4akHwLNB4aESf7zbR9b4GsUkEfmtb54AK", "action_id_social": "HV4ze8NNpkL2y6zYq61c1L2mbyKyBvdd8745KZ4awLGW-0-widget", "block_id": 113248041, "block_timestamp": "2024-02-20T22:43:25.076Z", "signer_id": "flowscience.near", "widget_name": "attestWithTypes", "source_code": "const data = props.data || {};\r\nconst type = props.type || \"\";\r\nconst typeSrc = props.typeSrc || \"every.near\";\r\nconst buildEdges = props.buildEdges;\r\nconst template = props.template || \"\";\r\nconst thingId = props.thingId;\r\nconst defaultView = props.defaultView || \"CREATE_ATTESTATION\";\r\nconst { generateUID } = VM.require(\"flowscience.near/widget/generateUID\");\r\n\r\nif (type !== \"\") {\r\n  const parts = type.split(\"/\");\r\n  typeSrc = parts[0];\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n  `;\r\n\r\nconst SidePanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 20px;\r\n  background-color: #f2f2f2;\r\n  width: auto;\r\n  z-index: 50;\r\n  min-width: 400px;\r\n`;\r\n\r\nconst MainContent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n  `;\r\n\r\nconst FormContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-bottom: 20px;\r\n    gap: 8px;\r\n    background-color: #f2f2f2;\r\n    padding: 30px;\r\n  `;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  align-self: flex-start;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  `;\r\n\r\nconst LeftPanelItem = styled.div`\r\n    padding: 8px;\r\n    background-color: #ccc;\r\n    color: white;\r\n    border-radius: 4px;\r\n  `;\r\n\r\nconst Select = styled.select`\r\n  `;\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nconst Input = styled.input`\r\n  `;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst CenteredDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  text-align: center;\r\n`;\r\n\r\nState.init({\r\n  data,\r\n  config: data,\r\n  typeSrc,\r\n  selectedType: type,\r\n  view: defaultView,\r\n  preview: \"TEMPLATE\",\r\n  thingId: generateUID(),\r\n});\r\n\r\nconst handleOnChange = (value) => {\r\n  State.update({ data: { ...state.data, ...value } });\r\n};\r\n\r\nuseEffect(() => {\r\n  State.update({\r\n    config: state.data,\r\n  });\r\n}, [state.data]);\r\n\r\nconst [formValues, setFormValues] = useState({\r\n  recipientId: props.recipientId || \"\",\r\n  expireDate: props.expireDate || \"\",\r\n  expireTime: props.expireTime || \"\",\r\n  revokeDate: props.revokeDate || \"\",\r\n  refUID: props.refUID || \"\",\r\n  payload: props.payload || \"\",\r\n});\r\n\r\nconst attestation = {\r\n  ...formValues,\r\n  type: state.selectedType,\r\n  uid: state.thingId,\r\n  schema: state.data,\r\n};\r\n\r\nconst handleInputChange = (name, value) => {\r\n  // Update local form state\r\n  setFormValues((prev) => ({ ...prev, [name]: value }));\r\n\r\n  // Propagate changes if an external onChange handler is provided\r\n  if (onChange) {\r\n    onChange({ ...formValues, [name]: value });\r\n  }\r\n};\r\n\r\nconst handleSave = () => {\r\n  // create the attestation\r\n  State.update({ isModalOpen: false });\r\n  let edges = [];\r\n  if (buildEdges) {\r\n    const newPath = `${context.accountId}/attestation/${thingId}`;\r\n    edges = buildEdges(newPath, state.selectedType);\r\n  }\r\n\r\n  const data = {\r\n    attestation,\r\n  };\r\n  if (edges.length) {\r\n    data.index.edge = JSON.stringify(edges);\r\n  }\r\n  Social.set(data, {\r\n    onCommit: () => {\r\n      State.update({\r\n        data: {},\r\n        isModalOpen: false,\r\n        config: undefined,\r\n      });\r\n    },\r\n    onCancel: () => {\r\n      State.update({\r\n        isModalOpen: false,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\nlet availableTypes = [];\r\nconst types = Social.get(`${state.typeSrc}/type/**`, \"final\");\r\nif (types !== null) {\r\n  availableTypes =\r\n    Object.keys(types)?.map((it) => `${state.typeSrc}/type/${it}`) || [];\r\n}\r\n\r\nconst handleTypeChange = (e) => {\r\n  State.update({ selectedType: e.target.value, data: {} });\r\n};\r\n\r\nreturn (\r\n  <Container>\r\n    <SidePanel>\r\n      <Row style={{ gap: \"8px\", marginBottom: \"16px\" }}>\r\n        <h2>create</h2>{\" \"}\r\n        <Select\r\n          value={state.view}\r\n          onChange={(e) => State.update({ view: e.target.value })}\r\n        >\r\n          <option value=\"CREATE_ATTESTATION\">attestation</option>\r\n          <option value=\"CREATE_TYPE\">schema</option>\r\n        </Select>\r\n      </Row>\r\n      {state.view === \"CREATE_ATTESTATION\" ? (\r\n        <>\r\n          <FormContainer>\r\n            <Label>Schema Owner:</Label>\r\n            <Row>\r\n              <Input\r\n                type=\"text\"\r\n                value={state.newTypeSrc}\r\n                onChange={(e) => State.update({ newTypeSrc: e.target.value })}\r\n                placeholder={\"accountId\"}\r\n              />\r\n              <Button\r\n                onClick={() => State.update({ typeSrc: state.newTypeSrc })}\r\n              >\r\n                apply\r\n              </Button>\r\n            </Row>\r\n            <Label>Schema</Label>\r\n            <Row>\r\n              <Select value={state.selectedType} onChange={handleTypeChange}>\r\n                <option value=\"\">Select a type</option>\r\n                {availableTypes?.map((it) => (\r\n                  <option value={it} key={it}>\r\n                    {it}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </Row>\r\n          </FormContainer>\r\n          <FormContainer>\r\n            <Widget\r\n              src=\"efiz.near/widget/create\"\r\n              props={{\r\n                item: {\r\n                  type: state.selectedType,\r\n                  value: state.data,\r\n                },\r\n                onChange: handleOnChange,\r\n              }}\r\n            />\r\n            <Row>\r\n              <Label>\r\n                <b>UID:</b> {state.thingId}\r\n              </Label>\r\n            </Row>\r\n            <Row>\r\n              <Label>\r\n                <b>Attestor:</b> {context.accountId}\r\n              </Label>\r\n            </Row>\r\n            <Row>\r\n              <Label>\r\n                <b>Recipient: </b>\r\n              </Label>\r\n              <Input\r\n                type=\"text\"\r\n                value={formValues.recipientId}\r\n                onChange={(e) =>\r\n                  handleInputChange(\"recipientId\", e.target.value)\r\n                }\r\n                placeholder=\"recipient.near\"\r\n              />\r\n            </Row>\r\n            <Label>\r\n              <b>Expiration Date: </b>\r\n            </Label>\r\n            <Input\r\n              type=\"date\"\r\n              value={formValues.expireDate}\r\n              onChange={(e) => handleInputChange(\"expireDate\", e.target.value)}\r\n              placeholder=\"\"\r\n            />\r\n            <Row>\r\n              <Label>\r\n                <b>Expiration Time: </b>\r\n              </Label>\r\n              <Input\r\n                type=\"time\"\r\n                value={formValues.expireTime}\r\n                onChange={(e) =>\r\n                  handleInputChange(\"expireTime\", e.target.value)\r\n                }\r\n                placeholder=\"\"\r\n              />\r\n            </Row>\r\n            <Row>\r\n              <Label>\r\n                <b>refUID: </b>\r\n              </Label>\r\n              <Input\r\n                type=\"text\"\r\n                value={formValues.refUID}\r\n                onChange={(e) => handleInputChange(\"refUID\", e.target.value)}\r\n                placeholder=\"attestations.near/thing/0123456789123456\"\r\n              />\r\n            </Row>\r\n            <Row>\r\n              <Label>\r\n                <b>Data Payload: </b>\r\n              </Label>\r\n              <Input\r\n                type=\"text\"\r\n                value={formValues.payload}\r\n                onChange={(e) => handleInputChange(\"payload\", e.target.value)}\r\n                placeholder=\"# This is a string of text.\"\r\n              />\r\n            </Row>\r\n          </FormContainer>\r\n          <Footer>\r\n            <Button onClick={handleSave}>Save</Button>\r\n          </Footer>\r\n        </>\r\n      ) : (\r\n        <Widget\r\n          src=\"every.near/widget/every.type.create\"\r\n          props={{ typeSrc: state.selectedType }}\r\n        />\r\n      )}\r\n    </SidePanel>\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/attestWithTypes", "fact_widget_deployments_id": "84ae71002439f0893cd4ec3f8eecde76", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}