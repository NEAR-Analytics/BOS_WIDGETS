{"tx_hash": "G2JPGjbSnRP9vVHsjgT4xNTyVaqHJBwh4HbTq8g9iRA", "action_id_social": "EshLXEWDw6Uq7UzbaLNaaUqsHeTAAVHbG9YFkDAh4Kma-0-widget", "block_id": 113118608, "block_timestamp": "2024-02-19T00:31:50.400Z", "signer_id": "flowscience.near", "widget_name": "creator", "source_code": "const data = props.data || {};\nconst type = props.type || \"\";\nconst typeSrc = props.typeSrc || \"every.near\";\nconst buildEdges = props.buildEdges;\nconst template = props.template || \"\";\nconst thingId = props.thingId;\nconst defaultView = props.defaultView || \"CREATE_ATTESTATION\";\nconst { generateUID } = VM.require(\"flowscience.near/widget/generateUID\");\n\nif (type !== \"\") {\n  const parts = type.split(\"/\");\n  typeSrc = parts[0];\n}\n\nconst Container = styled.div`\n    display: flex;\n  `;\n\nconst SidePanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  background-color: #f2f2f2;\n  width: auto;\n  z-index: 50;\n  min-width: 400px;\n`;\n\nconst MainContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n  `;\n\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 20px;\n    gap: 8px;\n    background-color: #f2f2f2;\n    padding: 30px;\n  `;\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-self: flex-start;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  `;\n\nconst LeftPanelItem = styled.div`\n    padding: 8px;\n    background-color: #ccc;\n    color: white;\n    border-radius: 4px;\n  `;\n\nconst Select = styled.select`\n  `;\n\nconst Label = styled.label`\n`;\n\nconst Input = styled.input`\n  `;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst CenteredDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  text-align: center;\n`;\n\nState.init({\n  data,\n  config: data,\n  typeSrc,\n  selectedType: type,\n  view: defaultView,\n  preview: \"TEMPLATE\",\n  thingId: generateUID(),\n});\n\nconst handleOnChange = (value) => {\n  State.update({ data: { ...state.data, ...value } });\n};\n\nuseEffect(() => {\n  // Logic that was previously in handleApply\n  State.update({\n    config: state.data,\n  });\n  // Additional logic if needed\n}, [state.data]); // Dependencies\n\nconst [formValues, setFormValues] = useState({\n  recipientId: props.recipientId || \"\",\n  expireDate: props.expireDate || \"\",\n  expireTime: props.expireTime || \"\",\n  revokeDate: props.revokeDate || \"\",\n  refUID: props.refUID || \"\",\n  payload: props.payload || \"\",\n});\n\nconst attestation = {\n  [state.selectedType]: {\n    [state.thingId]: {\n      ...formValues,\n      schema: state.data,\n    },\n  },\n};\n\nconst handleInputChange = (name, value) => {\n  // Update local form state\n  setFormValues((prev) => ({ ...prev, [name]: value }));\n\n  // Propagate changes if an external onChange handler is provided\n  if (onChange) {\n    onChange({ ...formValues, [name]: value });\n  }\n};\n\nconst handleSave = () => {\n  // create the attestation\n  State.update({ isModalOpen: false });\n  let edges = [];\n  if (buildEdges) {\n    const newPath = `${context.accountId}/attestation/${thingId}`;\n    edges = buildEdges(newPath, state.selectedType);\n  }\n\n  const data = {\n    attestation,\n  };\n  if (edges.length) {\n    data.index.edge = JSON.stringify(edges);\n  }\n  Social.set(data, {\n    onCommit: () => {\n      State.update({\n        data: {},\n        isModalOpen: false,\n        config: undefined,\n      });\n    },\n    onCancel: () => {\n      State.update({\n        isModalOpen: false,\n      });\n    },\n  });\n};\n\nlet availableTypes = [];\nconst types = Social.get(`${state.typeSrc}/type/**`, \"final\");\nif (types !== null) {\n  availableTypes =\n    Object.keys(types)?.map((it) => `${state.typeSrc}/type/${it}`) || [];\n}\n\nconst handleTypeChange = (e) => {\n  State.update({ selectedType: e.target.value, data: {} });\n};\n\nreturn (\n  <Container>\n    <SidePanel>\n      <Row style={{ gap: \"8px\", marginBottom: \"16px\" }}>\n        <h2>create</h2>{\" \"}\n        <Select\n          value={state.view}\n          onChange={(e) => State.update({ view: e.target.value })}\n        >\n          <option value=\"CREATE_ATTESTATION\">attestation</option>\n          <option value=\"CREATE_TYPE\">type</option>\n        </Select>\n      </Row>\n      {state.view === \"CREATE_ATTESTATION\" ? (\n        <>\n          <FormContainer>\n            <Label>Type Source:</Label>\n            <Row>\n              <Input\n                type=\"text\"\n                value={state.newTypeSrc}\n                onChange={(e) => State.update({ newTypeSrc: e.target.value })}\n                placeholder={\"accountId\"}\n              />\n              <Button\n                onClick={() => State.update({ typeSrc: state.newTypeSrc })}\n              >\n                apply\n              </Button>\n            </Row>\n            <Label>Type</Label>\n            <Row>\n              <Select value={state.selectedType} onChange={handleTypeChange}>\n                <option value=\"\">Select a type</option>\n                {availableTypes?.map((it) => (\n                  <option value={it} key={it}>\n                    {it}\n                  </option>\n                ))}\n              </Select>\n            </Row>\n          </FormContainer>\n          <FormContainer>\n            <Widget\n              src=\"efiz.near/widget/create\"\n              props={{\n                item: {\n                  type: state.selectedType,\n                  value: state.data,\n                },\n                onChange: handleOnChange,\n              }}\n            />\n            <Row>\n              <Label>\n                <b>UID:</b> {state.thingId}\n              </Label>\n            </Row>\n            <Row>\n              <Label>\n                <b>Attestor:</b> {context.accountId}\n              </Label>\n            </Row>\n            <Row>\n              <Label>\n                <b>Recipient: </b>\n              </Label>\n              <Input\n                type=\"text\"\n                value={formValues.recipientId}\n                onChange={(e) =>\n                  handleInputChange(\"recipientId\", e.target.value)\n                }\n                placeholder=\"recipient.near\"\n              />\n            </Row>\n            <Label>\n              <b>Expiration Date: </b>\n            </Label>\n            <Input\n              type=\"date\"\n              value={formValues.expireDate}\n              onChange={(e) => handleInputChange(\"expireDate\", e.target.value)}\n              placeholder=\"\"\n            />\n            <Row>\n              <Label>\n                <b>Expiration Time: </b>\n              </Label>\n              <Input\n                type=\"time\"\n                value={formValues.expireTime}\n                onChange={(e) =>\n                  handleInputChange(\"expireTime\", e.target.value)\n                }\n                placeholder=\"\"\n              />\n            </Row>\n            <Row>\n              <Label>\n                <b>refUID: </b>\n              </Label>\n              <Input\n                type=\"text\"\n                value={formValues.refUID}\n                onChange={(e) => handleInputChange(\"refUID\", e.target.value)}\n                placeholder=\"attestations.near/thing/0123456789123456\"\n              />\n            </Row>\n            <Row>\n              <Label>\n                <b>Data Payload: </b>\n              </Label>\n              <Input\n                type=\"text\"\n                value={formValues.payload}\n                onChange={(e) => handleInputChange(\"payload\", e.target.value)}\n                placeholder=\"# This is markdown text.\"\n              />\n            </Row>\n          </FormContainer>\n          <Footer>\n            <Button onClick={handleSave}>Save</Button>\n          </Footer>\n        </>\n      ) : (\n        <Widget\n          src=\"every.near/widget/every.type.create\"\n          props={{ typeSrc: state.selectedType }}\n        />\n      )}\n    </SidePanel>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/creator", "fact_widget_deployments_id": "663bbe6121d8856ce7e7205e53605c97", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}