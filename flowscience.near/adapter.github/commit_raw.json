{"tx_hash": "63j9HEd6b3qH25oyyVuzhMcJ5HtUi6x9u5wotCvYCrqT", "action_id_social": "ATeFwcRodknZc56tC5iXbSCX1tDL2iXCF2EahsAx3Sfs-0-widget", "block_id": 116619971, "block_timestamp": "2024-04-11T16:08:23.684Z", "signer_id": "flowscience.near", "widget_name": "adapter.github", "source_code": "// Function to construct a GitHub API URL given a file path in a repository\r\nconst githubUrl = (filePath) =>\r\n  `https://api.github.com/repos/your-username/your-repository/contents/${filePath}`;\r\n\r\n// Function to retrieve data from GitHub given a file path\r\nfunction get(filePath) {\r\n  return fetch(githubUrl(filePath), {\r\n    headers: {\r\n      Accept: \"application/vnd.github.v3.raw\", // Set Accept header to get raw content of the file\r\n      Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\r\n    },\r\n  })\r\n    .then((response) => response.json()) // Parse the JSON response\r\n    .then((data) => data.content); // Return the content field from the response\r\n}\r\n\r\n// Function to create and upload data to GitHub, returning a promise with the URL of the uploaded content\r\nfunction create(filePath, data) {\r\n  return new Promise((resolve, reject) => {\r\n    // Check if data is provided\r\n    if (data.length) {\r\n      // Convert data to Base64 for GitHub API\r\n      const content = btoa(data);\r\n      // Asynchronously fetch to upload the data to GitHub\r\n      fetch(githubUrl(filePath), {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Accept: \"application/vnd.github.v3+json\", // Set Accept header to expect JSON responses\r\n          Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\r\n          \"Content-Type\": \"application/json\", // Set the Content-Type header\r\n        },\r\n        body: JSON.stringify({\r\n          message: `Upload ${filePath}`, // Commit message\r\n          content: content, // Base64 encoded content\r\n        }),\r\n      })\r\n        .then((response) => response.json()) // Parse the JSON response\r\n        .then((data) => {\r\n          resolve({ url: data.content.html_url }); // Resolve the promise with the HTML URL of the new content\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error in create function:\", error);\r\n          reject(error); // Reject the promise in case of an error\r\n        });\r\n    } else {\r\n      reject(\"No data provided\"); // Reject the promise if no data is provided\r\n    }\r\n  });\r\n}\r\n\r\n// Return the get and create functions for use elsewhere\r\nreturn { get, create };\r\n", "metadata": {"fork_of": "devs.near/widget/adapter.github@110364745"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/adapter.github", "fact_widget_deployments_id": "750e5443da8c02201046d96823c0b0c5", "inserted_timestamp": "2024-04-11T17:44:28.072Z", "modified_timestamp": "2024-04-11T17:44:28.072Z", "__row_index": 3}