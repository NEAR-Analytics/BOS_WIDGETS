{"tx_hash": "6mVbFuiHn5D8NxYuB13JH764aUL4W1Pd4Vvipzwm6uu2", "action_id_social": "D4LuEApyn5LcJTG7xCCJ3jWr2MD9rLCLXESteFdFen51-0-widget", "block_id": 113457954, "block_timestamp": "2024-02-24T02:15:54.731Z", "signer_id": "flowscience.near", "widget_name": "deletePath", "source_code": "const { Button } = VM.require(\"buildhub.near/widget/components\");\n\nState.init({\n  path: props.path,\n});\n\nconst value = Social.get(state.path, \"final\");\n\nconst text = `\n\\`\\`\\`json\n${JSON.stringify(value, undefined, 2)}\n\\`\\`\\`\n`;\n\nconst handleDelete = () => {\n  // Assuming state.path is \"flowscience.near/attestation/*\"\n  // Prepare the data to indicate deletion. Here, we use null as an example.\n  const dataToDelete = { [state.path]: null };\n\n  Social.set(dataToDelete, {\n    onCommit: () => {\n      console.log(`${state.path} data deleted successfully.`);\n      // Additional logic to handle post-delete UI updates\n    },\n    onCancel: () => {\n      console.log(\"Delete action cancelled.\");\n    },\n    // You might not need 'force' if you're deleting. But if you're overwriting data,\n    // and you want to ensure the overwrite happens, you might consider it.\n    // force: true,\n  });\n};\n\nreturn (\n  <div>\n    <div className=\"d-flex align-items-center\">\n      <input\n        type=\"text\"\n        className=\"form-control me-2\" // Bootstrap classes for input styling and margin\n        value={state.path}\n        placeholder=\"self.social.near/profile/**\"\n      />\n      <Button className=\"btn btn-danger\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </div>\n    <Markdown text={text} />\n  </div>\n);\n", "metadata": {"fork_of": "mob.near/widget/Explorer@78741443"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/deletePath", "fact_widget_deployments_id": "d0e7908293e81a8b725948be1c97082c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}