{"tx_hash": "39arzBK6rZY4i876ErvAgZyuJxEVekXgwF8aQf6t1BHg", "action_id_social": "EiZYCDk68cydaGLtbcgWpFXwL38UP57CmqBFVcLs354j-0-widget", "block_id": 101879651, "block_timestamp": "2023-09-24T22:30:25.851Z", "signer_id": "flowscience.near", "widget_name": "create.file", "source_code": "const data = props.data || {};\r\nconst type = props.type || \"\";\r\nconst typeSrc = props.typeSrc || \"flowscience.near\";\r\nconst buildEdges = props.buildEdges;\r\nconst template = props.template || \"\";\r\nconst thingId = props.thingId;\r\n//const defaultView = props.defaultView || \"CREATE_THING\";\r\n\r\nif (type !== \"\") {\r\n  const parts = type.split(\"/\");\r\n  typeSrc = parts[0];\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n  `;\r\n\r\nconst SidePanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 20px;\r\n  background-color: #FAFAFA;\r\n  width: auto;\r\n  z-index: 50;\r\n  min-width: 400px;\r\n  border: 1px solid;\r\n  border-radius: 0.5rem;\r\n  @media (max-width: 768px) {\r\n        min-width: 100%;  // Take up full width on mobile\r\n        box-sizing: border-box;  // Ensure padding and borders are included in the width calculation\r\n}\r\n`;\r\n\r\nconst MainContent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n  `;\r\n\r\nconst FormContainer = styled.div`\r\n  border: 1px solid #ccc;\r\n  border-radius: 0.25rem;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-bottom: 20px;\r\n    gap: 8px;\r\n    background-color: #f2f2f2;\r\n    padding: 30px;\r\n  `;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  align-self: flex-start;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color:#4472c4;\r\n  color: white;\r\n  border: 1px solid #ccc;\r\n  border-radius: 0.25rem;\r\n  width: 100px;  // specific width\r\n  `;\r\n\r\nconst SecondaryButton = styled.button`\r\n  border-radius: 0.25rem;\r\n  width: 100px;  // specific width\r\n  background-color: transparent; \r\n  color: #4472c4;\r\n  border: 1px solid #4472c4;\r\n  `;\r\n\r\nconst LeftPanelItem = styled.div`\r\n    padding: 8px;\r\n    background-color: #ccc;\r\n    color: white;\r\n    border-radius: 4px;\r\n  `;\r\n\r\nconst Select = styled.select`\r\n  `;\r\n\r\nconst Label = styled.label`\r\n`;\r\n\r\nconst Input = styled.input`\r\n  `;\r\n\r\nconst ModalOverlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 100;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  min-width: 500px;\r\n  height: 100%;\r\n  overflow: scroll;\r\n`;\r\n\r\nconst ModalTitle = styled.h3`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst CenteredDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  text-align: center;\r\n`;\r\n\r\nState.init({\r\n  data,\r\n  config: data,\r\n  isModalOpen: false,\r\n  typeSrc: \"flowscience.near\",\r\n  selectedType: \"flowscience.near/type/file\",\r\n  view: defaultView,\r\n  isPreview: false, //\"TEMPLATE\",\r\n  template: \"flowscience.near/type/file\",\r\n  templateVal: template,\r\n  thingId,\r\n});\r\n\r\nconst handleOnChange = (value) => {\r\n  State.update({ data: { ...state.data, ...value } });\r\n};\r\n\r\nconst handleApply = () => {\r\n  State.update({\r\n    config: state.data,\r\n    isPreview: !state.isPreview,\r\n    //template: state.templateVal,\r\n  });\r\n  // set the props for the main content\r\n};\r\n\r\nconst handleSave = () => {\r\n  // create the thing\r\n  State.update({ isModalOpen: false });\r\n  const thingId = state.data.handle;\r\n  //state.thingId || Math.random();\r\n  let edges = [];\r\n  if (buildEdges) {\r\n    const newPath = `${context.accountId}/thing/${thingId}`;\r\n    edges = buildEdges(newPath, state.selectedType);\r\n  }\r\n\r\n  const data = {\r\n    thing: {\r\n      artist: {\r\n        [thingId]: JSON.stringify({\r\n          data: state.config,\r\n          template: {\r\n            src: state.template,\r\n          },\r\n          type: state.selectedType,\r\n        }),\r\n      },\r\n    },\r\n    index: {\r\n      thing: JSON.stringify({\r\n        key: thingId,\r\n        value: {\r\n          type: state.selectedType,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n  if (edges.length) {\r\n    data.index.edge = JSON.stringify(edges);\r\n  }\r\n  Social.set(data, {\r\n    onCommit: () => {\r\n      State.update({\r\n        data: {},\r\n        isModalOpen: false,\r\n        config: undefined,\r\n      });\r\n    },\r\n    onCancel: () => {\r\n      State.update({\r\n        isModalOpen: false,\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\nconst handleTypeChange = (e) => {\r\n  State.update({ selectedType: e.target.value, templateVal: \"\", data: {} });\r\n};\r\n\r\nconst handleProfileSave = () => {\r\n  State.update({\r\n    config: state.data,\r\n  });\r\n  //check if handle is present\r\n  // in future check if handle is unique\r\n  if (!state.data.handle) {\r\n    console.log(\"Needs handle.\");\r\n    //Alert does not work.\r\n  } else {\r\n    //State.update({ isModalOpen: true });\r\n    handleSave();\r\n  }\r\n};\r\n\r\n//  <MainContent>\r\n//       <>\r\n//         {(state.isPreview && (\r\n//           <Widget src={state.template} props={{ data: state.config }} />\r\n//         )) || <CenteredDiv>Click on Preview to see your profile.</CenteredDiv>}\r\n//       </>\r\n//     </MainContent>\r\n\r\nreturn (\r\n  <Container>\r\n    <SidePanel>\r\n      <>\r\n        <FormContainer>\r\n          {state.isPreview ? (\r\n            <Widget src={state.template} props={{ data: state.config }} />\r\n          ) : (\r\n            <Widget\r\n              src=\"efiz.near/widget/create\"\r\n              props={{\r\n                item: {\r\n                  type: state.selectedType,\r\n                  value: state.data,\r\n                },\r\n                onChange: handleOnChange,\r\n              }}\r\n            />\r\n          )}\r\n        </FormContainer>\r\n        <Footer>\r\n          <Button\r\n            //onClick={() => State.update({ isModalOpen: true })}\r\n            onClick={() => handleProfileSave()}\r\n            disabled={state.config === undefined}\r\n          >\r\n            Save\r\n          </Button>\r\n          <SecondaryButton onClick={() => handleApply()}>\r\n            {state.isPreview ? \"Edit\" : \"Preview\"}\r\n          </SecondaryButton>\r\n        </Footer>\r\n      </>\r\n    </SidePanel>\r\n    {state.isModalOpen && (\r\n      <ModalOverlay>\r\n        <ModalContent>\r\n          <ModalTitle>Create Profile</ModalTitle>\r\n          <Widget\r\n            src=\"efiz.near/widget/Every.Raw.View\"\r\n            props={{\r\n              value: { data: state.config, template: { src: state.template } },\r\n            }}\r\n          />\r\n          <Button onClick={handleSave}>Save</Button>\r\n          <Button onClick={() => State.update({ isModalOpen: false })}>\r\n            Cancel\r\n          </Button>\r\n        </ModalContent>\r\n      </ModalOverlay>\r\n    )}\r\n  </Container>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/flowscience.near/widget/create.file", "fact_widget_deployments_id": "0aa9e5ddd01dd954c5bd44bc74e84501", "inserted_timestamp": "2023-09-25T00:30:34.997Z", "modified_timestamp": "2023-09-25T00:30:34.997Z", "__row_index": 3}