{"tx_hash": "x2c46tDfoetkY34mnCfHvX4Ak1QX1TAcHoe1KsTCW9a", "action_id_social": "uT3eiQWDRiRw1VagahqMBvy2zkY9w2RiEQBnjEVw9aK-0-widget", "block_id": 113440356, "block_timestamp": "2024-02-23T20:15:20.130Z", "signer_id": "owa-is-bos.near", "widget_name": "BOS-TheGraph", "source_code": "// This line uses the useState hook to create a state variable nftData initialized as an empty array,\n// and a function setNFTData to update this state.\nconst [nftData, setNFTData] = useState([]);\n\n// Here, useEffect hook is used.\n// It executes a block of code after the component is mounted.\n// We make the API call to obtain the information of the corresponding subgraph.\nuseEffect(() => {\n  var query = `query {\n                        tokens{\n                                id\n                                title\n                                owner_id\n                                media\n                                owner_id\n                            }\n                        }`;\n\n  asyncFetch(\"https://api.thegraph.com/subgraphs/name/devscloudmex/nativonft\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: query,\n    }),\n  })\n    .then(({ body }) => {\n      setNFTData(body.data.tokens);\n    })\n    .catch((err) => console.log(err));\n}, []);\n\n// This line defines a constant loadingUrl which holds a URL to an image used as a loading indicator if the image for a token is not available.\n// It uses a default value if props.loadingUrl is not provided.\nconst loadingUrl =\n  props.loadingUrl ??\n  \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n\n// Finally we render the component where we iterate the nftData array to show the information of each of the tokens.\nreturn (\n  <div>\n    <h1>BOS + TheGraph</h1>\n    {nftData && (\n      <>\n        <div\n          style={{\n            marginTop: \"10px\",\n            display: \"grid\",\n            \"grid-template-columns\": \"repeat(3, 1fr)\",\n            \"grid-column-gap\": \"10px\",\n            \"grid-row-gap\": \"10px\",\n          }}\n        >\n          {nftData &&\n            nftData.map(\n              (nft, i) =>\n                nft.media && (\n                  <div>\n                    <img\n                      src={\n                        nft.media !== null\n                          ? \"https://ipfs.near.social/ipfs/\" + nft.media\n                          : loadingUrl\n                      }\n                      style={{ width: \"150px\", height: \"150px\" }}\n                    />\n                    <br />\n                    <label>\n                      <span style={{ fontWeight: \"bold\" }}>Token Id:</span>\n                      {nft.id}\n                    </label>\n                    <br />\n                    <label>\n                      <span style={{ fontWeight: \"bold\" }}>Title:</span>\n                      {nft.title}\n                    </label>\n                    <label>\n                      <span style={{ fontWeight: \"bold\" }}>Owner:</span>\n                      {nft.owner_id}\n                    </label>\n                  </div>\n                )\n            )}\n        </div>\n      </>\n    )}\n  </div>\n);\n", "metadata": {"fork_of": "owa-is-bos.near/widget/BOS-TheGraph@113439673"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/BOS-TheGraph", "fact_widget_deployments_id": "3d435ef905a8fac8da4a7c0f017fca12", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}