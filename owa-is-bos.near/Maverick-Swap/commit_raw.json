{"tx_hash": "3vnBiuJ4UTee9Lbkibp6Mvpbvw4hH2PWcJCDBJ3VcFeL", "action_id_social": "oyKJUe57nZs8EEbxXjvCHNWBkCTBspgXunm58EfNwcs-0-widget", "block_id": 115190351, "block_timestamp": "2024-03-22T00:24:34.114Z", "signer_id": "owa-is-bos.near", "widget_name": "Maverick-Swap", "source_code": "const routerAbi = fetch(\r\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-router.txt\"\r\n);\r\nif (!routerAbi.ok) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst TOKENS = [\r\n  {\r\n    name: \"ETH\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/eth.svg\",\r\n    address: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\r\n    coinGeckoId: \"ethereum\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"USDC\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/usdc.svg\",\r\n    address: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\r\n    coinGeckoId: \"usd-coin\",\r\n    decimals: 6,\r\n  },\r\n  {\r\n    name: \"CBUSD\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/busd.png\",\r\n    address: \"0x2039bb4116B4EFc145Ec4f0e2eA75012D6C0f181\",\r\n    coinGeckoId: \"binance-usd\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"MAV\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/mav.png\",\r\n    address: \"0x787c09494Ec8Bcb24DcAf8659E7d5D69979eE508\",\r\n    coinGeckoId: \"maverick-protocol\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"LUSD\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/lusd.svg\",\r\n    address: \"0x503234F203fC7Eb888EEC8513210612a43Cf6115\",\r\n    coinGeckoId: \"liquity-usd\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"RETH\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/reth.png\",\r\n    address: \"0x32Fd44bB869620C0EF993754c8a00Be67C464806\",\r\n    coinGeckoId: \"rocket-pool-eth\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"CBETH\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/cbeth.png\",\r\n    address: \"0x75Af292c1c9a37b3EA2E6041168B4E48875b9ED5\",\r\n    coinGeckoId: \"coinbase-wrapped-staked-eth\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"USD+\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/usd+.png\",\r\n    address: \"0x8E86e46278518EFc1C5CEd245cBA2C7e3ef11557\",\r\n    coinGeckoId: \"usd\",\r\n    decimals: 6,\r\n  },\r\n  {\r\n    name: \"GRAI\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/grai.png\",\r\n    address: \"0x5FC44E95eaa48F9eB84Be17bd3aC66B6A82Af709\",\r\n    coinGeckoId: \"grai\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"FRAX\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/frax.png\",\r\n    address: \"0xb4C1544cb4163f4C2ECa1aE9Ce999F63892d912A\",\r\n    coinGeckoId: \"frax\",\r\n    decimals: 18,\r\n  },\r\n  {\r\n    name: \"WETH\",\r\n    icon: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/weth.png\",\r\n    address: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\r\n    coinGeckoId: \"ethereum\",\r\n    decimals: 18,\r\n  },\r\n];\r\n\r\nconst POOLS = [\r\n  { name: \"WETH-USDC\", address: \"0x41c8cf74c27554a8972d3bf3d2bd4a14d8b604ab\" },\r\n  { name: \"WETH-CBUSD\", address: \"0x3Ae63FB198652E294B8DE4C2EF659D95D5ff28BE\" },\r\n  { name: \"WETH-MAV\", address: \"0x4D47167e66e86d1a1083f52136832d4f1eF5809A\" },\r\n  { name: \"WETH-LUSD\", address: \"0xB1338207DE233aE6a9A6D63309221b577F8Cd6E8\" },\r\n  { name: \"WETH-RETH\", address: \"0x07e1F845819D7CABc03684fdb4Bf99D5cd2B2964\" },\r\n  { name: \"WETH-CBETH\", address: \"0x23e8d6269717C567e4A2E9680491C8c65B67Ad0d\" },\r\n  { name: \"WETH-USD+\", address: \"0x15461e7D0d6061e082b2c9B641634BB096527679\" },\r\n  { name: \"WETH-GRAI\", address: \"\" },\r\n  { name: \"WETH-FRAX\", address: \"\" },\r\n  { name: \"USDC-CBUSD\", address: \"0x88D29317A355d8586bd0D98E8745ec3171d68F56\" },\r\n  { name: \"USDC-MAV\", address: \"0xbf90be5bbc07fbf548d3bceed34f1d471c018f34\" },\r\n  { name: \"USDC-LUSD\", address: \"0x6A9143A5f9BaF73841992DCB737844e5ad16A283\" },\r\n  { name: \"USDC-RETH\", address: \"\" },\r\n  { name: \"USDC-CBETH\", address: \"\" },\r\n  { name: \"USDC-USD+\", address: \"0xaCA5d8805D6f160Eb46E273e28169DDBF703eCdc\" },\r\n  { name: \"USDC-GRAI\", address: \"\" },\r\n  { name: \"USDC-FRAX\", address: \"0x4e1852cf46b24940412e13C358B4f19eC92b9eaE\" },\r\n  { name: \"CBUSD-MAV\", address: \"0x9f4A993b3120e52044810F1c91088a5630a8bF63\" },\r\n  { name: \"CBUSD-LUSD\", address: \"\" },\r\n  { name: \"CBUSD-RETH\", address: \"\" },\r\n  { name: \"CBUSD-CBETH\", address: \"\" },\r\n  { name: \"CBUSD-USD+\", address: \"\" },\r\n  { name: \"CBUSD-GRAI\", address: \"\" },\r\n  { name: \"CBUSD-FRAX\", address: \"\" },\r\n  { name: \"MAV-LUSD\", address: \"\" },\r\n  { name: \"MAV-RETH\", address: \"\" },\r\n  { name: \"MAV-CBETH\", address: \"\" },\r\n  { name: \"MAV-USD+\", address: \"\" },\r\n  { name: \"MAV-GRAI\", address: \"\" },\r\n  { name: \"MAV-FRAX\", address: \"\" },\r\n  { name: \"LUSD-RETH\", address: \"\" },\r\n  { name: \"LUSD-CBETH\", address: \"\" },\r\n  { name: \"LUSD-USD+\", address: \"\" },\r\n  { name: \"LUSD-GRAI\", address: \"0x28f57e5c2823183280CC9B3B45d746A2943111C3\" },\r\n  { name: \"LUSD-FRAX\", address: \"\" },\r\n  { name: \"RETH-CBETH\", address: \"\" },\r\n  { name: \"RETH-USD+\", address: \"\" },\r\n  { name: \"RETH-GRAI\", address: \"\" },\r\n  { name: \"RETH-FRAX\", address: \"\" },\r\n  { name: \"CBETH-USD+\", address: \"\" },\r\n  { name: \"CBETH-GRAI\", address: \"\" },\r\n  { name: \"CBETH-FRAX\", address: \"\" },\r\n  { name: \"USD+-GRAI\", address: \"\" },\r\n  { name: \"USD+-FRAX\", address: \"\" },\r\n  { name: \"GRAI-FRAX\", address: \"\" },\r\n];\r\n\r\nState.init({\r\n  isZkSync: false,\r\n  poolSelected: null,\r\n  tokenSendSelected: null,\r\n  tokenRecieveSelected: null,\r\n  amountInput: null,\r\n  amountRecieve: 0,\r\n  rate: 0,\r\n  routerContract: \"0x39E098A153Ad69834a9Dac32f0FCa92066aD03f4\",\r\n  onApproving: false,\r\n  onSwap: false,\r\n  needMoreAllowance: false,\r\n  reloadTransactions: false,\r\n});\r\n\r\nconst getNetwork = () => {\r\n  let chainId = 324;\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((res) => {\r\n      if (res.chainId == chainId) {\r\n        State.update({ isZkSync: true });\r\n      } else {\r\n        switchNetwork(324);\r\n      }\r\n    });\r\n};\r\n\r\nfunction handleReloadTransactions() {\r\n  console.log();\r\n  State.update({ reloadTransactions: false });\r\n}\r\n\r\nconst switchNetwork = (chainId) => {\r\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\r\n    { chainId: `0x${chainId.toString(16)}` },\r\n  ]);\r\n};\r\n\r\nconst getErc20Balance = (tokenId, receiver, decimals, asset) => {\r\n  if (state.sender === undefined) {\r\n    return;\r\n  }\r\n  if (asset == \"ETH\") {\r\n    Ethers.provider()\r\n      .getBalance(state.sender)\r\n      .then((balance) => {\r\n        State.update({\r\n          inputBalance: (\r\n            parseFloat(ethers.utils.formatUnits(balance, decimals)).toFixed(6) -\r\n            0.000007\r\n          ).toString(),\r\n          unFixedInputBalance: balance.toHexString(),\r\n        });\r\n      });\r\n  } else {\r\n    asyncFetch(\r\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n    )\r\n      .catch((res) => {\r\n        console.log(err);\r\n      })\r\n      .then((res) => {\r\n        const contract = new ethers.Contract(\r\n          tokenId,\r\n          res.body,\r\n          Ethers.provider().getSigner()\r\n        );\r\n        contract.balanceOf(receiver).then((res) => {\r\n          let balance = ethers.utils.formatUnits(res, decimals);\r\n          State.update({\r\n            inputBalance: parseFloat(balance - 0.000001)\r\n              .toFixed(6)\r\n              .toString(),\r\n            unFixedInputBalance: res.toHexString(),\r\n          });\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nfunction getPrice(type, data) {\r\n  let tokenIdForCoingeckoAPI;\r\n  tokenIdForCoingeckoAPI = data.coinGeckoId;\r\n  if (type) {\r\n    getErc20Balance(data.address, state.sender, data.decimals, data.name);\r\n  }\r\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/${tokenIdForCoingeckoAPI}`;\r\n  asyncFetch(dataUrl).then((res) => {\r\n    const tokenData = res.body;\r\n    const price = Number(tokenData.market_data.current_price.usd);\r\n    if (\r\n      (state.tokenSendSelected != null || type) &&\r\n      (state.tokenRecieveSelected != null || !type)\r\n    ) {\r\n      type\r\n        ? State.update({ rate: price / state.tokenRecieveSelected.price })\r\n        : State.update({ rate: state.tokenSendSelected.price / price });\r\n    }\r\n    type\r\n      ? State.update({ tokenSendSelected: { price: price, ...data } })\r\n      : State.update({ tokenRecieveSelected: { price: price, ...data } });\r\n  });\r\n}\r\n\r\nconst tokenInApprovaleNeededCheck = (data) => {\r\n  if (data.name == \"ETH\") {\r\n    State.update({\r\n      approvalNeeded: false,\r\n    });\r\n  } else {\r\n    asyncFetch(\r\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n    ).then((res) => {\r\n      const ifaceErc20 = new ethers.utils.Interface(res.body);\r\n      const encodedTokenAllowancesData = ifaceErc20.encodeFunctionData(\r\n        \"allowance\",\r\n        [state.sender, state.routerContract]\r\n      );\r\n      return Ethers.provider()\r\n        .call({\r\n          to: data.address,\r\n          data: encodedTokenAllowancesData,\r\n        })\r\n        .then((encodedTokenAllowanceHex) => {\r\n          const tokenAllowance = ifaceErc20.decodeFunctionResult(\r\n            \"allowance\",\r\n            encodedTokenAllowanceHex\r\n          );\r\n          if (tokenAllowance) {\r\n            State.update({\r\n              approvalNeeded: new Big(tokenAllowance).toFixed() == \"0\",\r\n            });\r\n          } else {\r\n            State.update({\r\n              approvalNeeded: false,\r\n            });\r\n          }\r\n        });\r\n    });\r\n  }\r\n};\r\n\r\nconst getAccountAllowance = (token, vAllowance) => {\r\n  asyncFetch(\r\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n  ).then((res) => {\r\n    const approveContract = new ethers.Contract(\r\n      token.address,\r\n      res.body,\r\n      Ethers.provider().getSigner()\r\n    );\r\n    approveContract\r\n      .allowance(state.sender, state.routerContract)\r\n      .then((res) => {\r\n        State.update({ tokenAllowance: parseInt(res.toString()) });\r\n        if (vAllowance) {\r\n          validateAllowance(state.amountInput, parseInt(res.toString()));\r\n        }\r\n        console.log(\"Allowance actual: \" + parseInt(res.toString()));\r\n      });\r\n  });\r\n};\r\n\r\nconst approveErc20Token = () => {\r\n  asyncFetch(\r\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n  ).then((res) => {\r\n    const value = state.unFixedInputBalance;\r\n\r\n    const approveContract = new ethers.Contract(\r\n      state.tokenSendSelected.address,\r\n      res.body,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    let gasArgs = {};\r\n\r\n    if (gweiPrice !== undefined && gasLimit !== undefined) {\r\n      gasArgs.gasPrice = ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\");\r\n      gasArgs.gasLimit = gasLimit ?? 20000000;\r\n    }\r\n\r\n    approveContract\r\n      .approve(state.routerContract, value, gasArgs)\r\n      .then((transactionHash) => {\r\n        State.update({\r\n          onApproving: true,\r\n        });\r\n        setTimeout(() => {\r\n          State.update({\r\n            onApproving: false,\r\n            approvalNeeded: false,\r\n          });\r\n          getAccountAllowance(state.tokenSendSelected, true);\r\n        }, 20000);\r\n      });\r\n  });\r\n};\r\n\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    getNetwork();\r\n  }\r\n}\r\n\r\nconst handleSendSelect = (data) => {\r\n  State.update({\r\n    amountInput: \"\",\r\n  });\r\n  const token = TOKENS.find((token) => token.name === data.target.value);\r\n  getPrice(true, token);\r\n  tokenInApprovaleNeededCheck(token);\r\n  getAccountAllowance(token, true);\r\n};\r\n\r\nconst handleRecieveSelect = (data) => {\r\n  const token = TOKENS.find((token) => token.name === data.target.value);\r\n  getPrice(false, token);\r\n};\r\n\r\nconst turnTokens = () => {\r\n  const tokenSendSelected = state.tokenSendSelected;\r\n  const tokenRecieveSelected = state.tokenRecieveSelected;\r\n  getAccountAllowance(tokenRecieveSelected);\r\n  if (tokenSendSelected && tokenRecieveSelected) {\r\n    State.update({ tokenSendSelected: null, tokenRecieveSelected: null });\r\n    setTimeout(() => {\r\n      State.update({\r\n        amountInput: \"\",\r\n        tokenSendSelected: tokenRecieveSelected,\r\n        tokenRecieveSelected: tokenSendSelected,\r\n      });\r\n      getErc20Balance(\r\n        tokenRecieveSelected.address,\r\n        state.sender,\r\n        tokenRecieveSelected.decimals,\r\n        tokenRecieveSelected.name\r\n      );\r\n      const price = Number(tokenRecieveSelected.price);\r\n      State.update({ rate: price / tokenSendSelected.price });\r\n      tokenInApprovaleNeededCheck(tokenRecieveSelected);\r\n    });\r\n  }\r\n};\r\n\r\nconst cantSwap = () => {\r\n  return (\r\n    state.tokenSendSelected && state.tokenRecieveSelected && state.amountInput\r\n  );\r\n};\r\n\r\nconst existPool = () => {\r\n  const tokenNameA =\r\n      state.tokenSendSelected.name === \"ETH\"\r\n        ? \"WETH\"\r\n        : state.tokenSendSelected.name,\r\n    tokenNameB =\r\n      state.tokenRecieveSelected.name === \"ETH\"\r\n        ? \"WETH\"\r\n        : state.tokenRecieveSelected.name;\r\n\r\n  const poolName1 = `${tokenNameA}-${tokenNameB}`;\r\n  const poolName2 = `${tokenNameB}-${tokenNameA}`;\r\n\r\n  if (!state.tokenSendSelected.name || !state.tokenRecieveSelected.name) {\r\n    return true;\r\n  }\r\n\r\n  const pool = POOLS.find((p) => p.name === poolName1 || p.name === poolName2);\r\n\r\n  if (pool && pool.address != \"\") {\r\n    State.update({ poolSelected: pool.address });\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isSufficientBalance = () => {\r\n  if (!state.amountInput) {\r\n    return true;\r\n  } else if (state.amountInput > state.inputBalance) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst setMaxBalance = () => {\r\n  if (state.inputBalance > 0) {\r\n    State.update({ amountInput: state.inputBalance });\r\n    validateAllowance(state.inputBalance);\r\n  }\r\n};\r\n\r\nconst confirmTransaction = () => {\r\n  const router = new ethers.Contract(\r\n    state.routerContract,\r\n    routerAbi.body,\r\n    Ethers.provider().getSigner()\r\n  );\r\n  let amountIn = ethers.utils.parseUnits(\r\n    state.amountInput,\r\n    state.tokenSendSelected.decimals\r\n  );\r\n  let paramsv2 = {\r\n    tokenIn: state.tokenSendSelected.address,\r\n    tokenOut: state.tokenRecieveSelected.address,\r\n    pool: state.poolSelected,\r\n    recipient: state.sender,\r\n    deadline: 1e13,\r\n    amountIn: amountIn,\r\n    amountOutMinimum: 0,\r\n    sqrtPriceLimitD18: 0,\r\n  };\r\n  let amountIn2 = ethers.utils.parseUnits(\r\n    \"0\",\r\n    state.tokenSendSelected.decimals\r\n  );\r\n\r\n  const overrides = {\r\n    value: state.tokenSendSelected.name === \"ETH\" ? amountIn : amountIn2,\r\n    gasLimit: 2303039,\r\n  };\r\n  try {\r\n    router.exactInputSingle(paramsv2, overrides).then((res) => {\r\n      State.update({\r\n        onSwap: true,\r\n      });\r\n      setTimeout(() => {\r\n        State.update({\r\n          reloadTransactions: true,\r\n        });\r\n      }, 5000);\r\n      setTimeout(() => {\r\n        State.update({\r\n          tokenSendSelected: null,\r\n          tokenRecieveSelected: null,\r\n          amountInput: 0,\r\n          inputBalance: 0,\r\n          amountRecieve: 0,\r\n          rate: 0,\r\n          poolSelected: null,\r\n          onSwap: false,\r\n          reloadTransactions: true,\r\n        });\r\n      }, 15000);\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst getRecipient = () => {\r\n  return (\r\n    state.sender.substring(0, 5) +\r\n    \"...\" +\r\n    state.sender.substring(state.sender.length - 4, state.sender.length)\r\n  ).toUpperCase();\r\n};\r\n\r\nconst validateAllowance = (input, allowanceAmount) => {\r\n  State.update({ amountInput: input });\r\n  const divider =\r\n    state.tokenSendSelected.decimals == 18 ? 1000000000000000000 : 1000000;\r\n  const tokenAllowance = allowanceAmount\r\n    ? allowanceAmount / divider\r\n    : state.tokenAllowance / divider;\r\n  if (input * 1 > tokenAllowance && state.tokenSendSelected.name !== \"ETH\") {\r\n    console.log(\"Necesitas m\u00e1s allowance\");\r\n    State.update({ needMoreAllowance: true });\r\n  } else {\r\n    console.log(\"No necesitas m\u00e1s allowance\");\r\n    State.update({ needMoreAllowance: false });\r\n  }\r\n};\r\n\r\nconst css = fetch(\r\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/widget.css\"\r\n).body;\r\n\r\nif (!css) return \"\";\r\n\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n    ${css}\r\n`,\r\n  });\r\n}\r\n\r\nconst Theme = state.theme;\r\nreturn (\r\n  <Theme>\r\n    <div class=\"text-center mt-1\">\r\n      <div class=\"MainContainer\">\r\n        <div class=\"ProtocolContainer\">\r\n          <div class=\"ProtocolNetworkContainet\">\r\n            <div class=\"ProtocolNetworkTextSection\">\r\n              <div class=\"ProtocolText\">PROTOCOL</div>\r\n            </div>\r\n            <div class=\"ProtocolNetworkSection\">\r\n              <div class=\"ProtocolNetworkContainer\">\r\n                <img\r\n                  class=\"ProtocolImg\"\r\n                  src=\"https://etherscan.io/token/images/maverick_32.png\"\r\n                />\r\n                <div class=\"NetworkText\">Maverick</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"titleSection\">\r\n          <div class=\"titleSwap\">SWAP</div>\r\n        </div>\r\n        {state.isZkSync ? (\r\n          <>\r\n            <div class=\"SendRecieveContainer\">\r\n              <div class=\"SendContainer\">\r\n                <div class=\"TokenSection\">\r\n                  {state.tokenSendSelected ? (\r\n                    <img class=\"TokenImg\" src={state.tokenSendSelected.icon} />\r\n                  ) : null}\r\n\r\n                  <div class=\"TokenNameSection\">\r\n                    <div class=\"TokenAction\">SEND {\"->\"}</div>\r\n                    <select\r\n                      class=\"TokenNameSelect\"\r\n                      value={\r\n                        state.tokenSendSelected\r\n                          ? state.tokenSendSelected.name\r\n                          : \"default\"\r\n                      }\r\n                      onChange={handleSendSelect}\r\n                    >\r\n                      <option\r\n                        value=\"default\"\r\n                        disabled={state.tokenSendSelected}\r\n                      >\r\n                        Select Token\r\n                      </option>\r\n                      {TOKENS.map((token) => {\r\n                        return (\r\n                          <>\r\n                            {\r\n                              state.tokenRecieveSelected.name != token.name && (\r\n                                //token.name != \"WETH\" && (\r\n                                <option>{token.name}</option>\r\n                              )\r\n                              //)\r\n                            }\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"TokenAmountSection\">\r\n                  <input\r\n                    class=\"TokenAmountInput\"\r\n                    type=\"text\"\r\n                    placeholder=\"0\"\r\n                    inputmode=\"decimal\"\r\n                    min=\"0\"\r\n                    pattern=\"^[0-9]*[.]?[0-9]*$\"\r\n                    value={state.amountInput}\r\n                    onChange={(e) => validateAllowance(e.target.value)}\r\n                  />\r\n                  <div class=\"TokenAmountPreview\">\r\n                    {state.inputBalance != null ? (\r\n                      state.inputBalance && state.inputBalance > 0 ? (\r\n                        <span>\r\n                          Balance: {state.inputBalance}\r\n                          <span\r\n                            class=\"UserBalance\"\r\n                            onClick={async () => {\r\n                              setMaxBalance();\r\n                            }}\r\n                          >\r\n                            MAX\r\n                          </span>\r\n                        </span>\r\n                      ) : (\r\n                        \"Balance: 0\"\r\n                      )\r\n                    ) : (\r\n                      \"Balance: 0\"\r\n                    )}\r\n                  </div>\r\n                  {!isSufficientBalance() ? (\r\n                    <div class=\"TokenInsufficientBalance\">\r\n                      Insufficient Balance\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n              <div class=\"turnSection\">\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"turnButton\"\r\n                  onClick={async () => {\r\n                    turnTokens();\r\n                  }}\r\n                >\r\n                  <svg\r\n                    class=\"turnImg\"\r\n                    focusable=\"false\"\r\n                    aria-hidden=\"true\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    data-testid=\"ArrowsUpDownIcon\"\r\n                  >\r\n                    <path d=\"M11.95 7.95l-1.414 1.414L8 6.828 8 20H6V6.828L3.465 9.364 2.05 7.95 7 3l4.95 4.95zm10 8.1L17 21l-4.95-4.95 1.414-1.414 2.537 2.536L16 4h2v13.172l2.536-2.536 1.414 1.414z\"></path>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              <div class=\"RecieveContainer\">\r\n                <div class=\"TokenSection\">\r\n                  {state.tokenRecieveSelected ? (\r\n                    <img\r\n                      class=\"TokenImg\"\r\n                      src={state.tokenRecieveSelected.icon}\r\n                    />\r\n                  ) : null}\r\n\r\n                  <div class=\"TokenNameSection\">\r\n                    <div class=\"TokenAction\">{\"->\"} RECEIVE</div>\r\n                    <select\r\n                      class=\"TokenNameSelect\"\r\n                      value={\r\n                        state.tokenRecieveSelected\r\n                          ? state.tokenRecieveSelected.name\r\n                          : \"default\"\r\n                      }\r\n                      onChange={handleRecieveSelect}\r\n                    >\r\n                      <option\r\n                        value=\"default\"\r\n                        disabled={state.tokenRecieveSelected}\r\n                      >\r\n                        Select Token\r\n                      </option>\r\n                      {TOKENS.map((token) => {\r\n                        return (\r\n                          <>\r\n                            {state.tokenSendSelected.name != token.name && (\r\n                              <option>{token.name}</option>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class=\"TokenAmountSection\">\r\n                  <div class=\"TokenAmount\">\r\n                    {state.amountInput\r\n                      ? (\r\n                          state.amountInput * parseFloat(state.rate).toFixed(6)\r\n                        ).toFixed(6)\r\n                      : 0}\r\n                  </div>\r\n                  <div class=\"TokenAmountPreview\">\r\n                    {state.rate != 0\r\n                      ? `${\r\n                          \"\u2248 \" +\r\n                          (\r\n                            state.amountInput * state.tokenSendSelected.price\r\n                          ).toFixed(6)\r\n                        } USD`\r\n                      : \"\"}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {(state.onApproving || state.onSwap) && (\r\n              <div class=\"RecipientValue\">\r\n                <h6>The transaction is going to be confirmed</h6>\r\n              </div>\r\n            )}\r\n            <div class=\"FeesContainer\">\r\n              <div class=\"Line\" />\r\n              <div class=\"RecipientContainer\">\r\n                <div class=\"RecipientText\">Recipient</div>\r\n                <div class=\"RecipientValue\">{getRecipient()}</div>\r\n              </div>\r\n              <div class=\"RecipientContainer\">\r\n                <div class=\"RecipientText\">Rate</div>\r\n                <div class=\"RecipientValue\">\r\n                  {state.rate != 0\r\n                    ? `1 ${state.tokenSendSelected.name} \u2248 ${state.rate.toFixed(\r\n                        6\r\n                      )}\r\n              ${state.tokenRecieveSelected.name}`\r\n                    : \"\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          state.sender && (\r\n            <span class=\"text-white\">\r\n              To proceed, please switch to the\r\n              <br />\r\n              <div\r\n                class=\"networkNameContainer\"\r\n                onClick={() => switchNetwork(324)}\r\n              >\r\n                <span class=\"networkName\">zkSync Era Network</span>\r\n              </div>\r\n              using your wallet.\r\n            </span>\r\n          )\r\n        )}\r\n        <div class=\"ConfirmContainer\">\r\n          {!state.onApproving ? (\r\n            state.sender && state.isZkSync ? (\r\n              state.approvalNeeded ? (\r\n                state.inputBalance && state.inputBalance > 0 ? (\r\n                  <div\r\n                    class={\"ConfirmButton\"}\r\n                    onClick={async () => {\r\n                      approveErc20Token();\r\n                    }}\r\n                  >\r\n                    <div class={\"ConfirmText\"}>\r\n                      {`Approve ${state.tokenSendSelected.name}`}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div class={\"ConfirmButtonDisabled\"}>\r\n                    <div class={\"ConfirmTextDisabled\"}>\r\n                      {`You don't have balance to approve`}\r\n                    </div>\r\n                  </div>\r\n                )\r\n              ) : cantSwap() && isSufficientBalance() && existPool() ? (\r\n                !state.onSwap ? (\r\n                  state.needMoreAllowance ? (\r\n                    <div\r\n                      class={\"ConfirmButton\"}\r\n                      onClick={async () => {\r\n                        approveErc20Token();\r\n                      }}\r\n                    >\r\n                      <div class={\"ConfirmText\"}>Add More Allowance</div>\r\n                    </div>\r\n                  ) : (\r\n                    <div\r\n                      class={\"ConfirmButton\"}\r\n                      onClick={async () => {\r\n                        confirmTransaction();\r\n                      }}\r\n                    >\r\n                      <div class={\"ConfirmText\"}>Confirm</div>\r\n                    </div>\r\n                  )\r\n                ) : (\r\n                  <div\r\n                    class={\"ConfirmButtonDisabled\"}\r\n                    onClick={async () => {\r\n                      confirmTransaction();\r\n                    }}\r\n                  >\r\n                    <div class={\"ConfirmTextDisabled\"}>Swap in progress...</div>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <div class={\"ConfirmButtonDisabled\"}>\r\n                  <div class={\"ConfirmTextDisabled\"}>\r\n                    {existPool()\r\n                      ? isSufficientBalance()\r\n                        ? \"Select a Pair and Amount\"\r\n                        : \"Insufficient Balance\"\r\n                      : \"Pool Not Deployed\"}\r\n                  </div>\r\n                </div>\r\n              )\r\n            ) : (\r\n              <Web3Connect\r\n                className=\"ConfirmButton ConfirmText\"\r\n                connectLabel=\"Connect Wallet\"\r\n              />\r\n            )\r\n          ) : (\r\n            <div class={\"ConfirmButtonDisabled\"}>\r\n              <div class={\"ConfirmTextDisabled\"}>\r\n                {`${state.tokenSendSelected.name} it's being approved...`}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    {state.isZkSync && state.sender && (\r\n      <Widget\r\n        src=\"owa-is-bos.near/widget/Maverick-Swap-Transactions\"\r\n        props={{\r\n          state,\r\n          handleReload: () => State.update({ reloadTransactions: false }),\r\n        }}\r\n      />\r\n    )}\r\n  </Theme>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/Maverick-Swap", "fact_widget_deployments_id": "b048882dd6ed48b3c409b066112bda9e", "inserted_timestamp": "2024-03-22T01:48:20.554Z", "modified_timestamp": "2024-03-22T01:48:20.554Z", "__row_index": 2}