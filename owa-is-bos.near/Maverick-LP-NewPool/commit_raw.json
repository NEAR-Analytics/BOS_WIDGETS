{"tx_hash": "ArqGYW41NCEq154kTdFMcBxaDq9Gu18nNGLnVihbBweo", "action_id_social": "3yDqNY4cXQYxz8jwxv57q8AGGbYANzPanGDexNpo8pLu-0-widget", "block_id": 105846580, "block_timestamp": "2023-11-16T18:19:48.927Z", "signer_id": "owa-is-bos.near", "widget_name": "Maverick-LP-NewPool", "source_code": "const routerAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-router.txt\"\n);\n\nconst positionAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-position.txt\"\n);\n\nif (!routerAbi.ok) {\n  return \"Loading\";\n}\nconst tokensForNEtwork = fetch(\"https://api.mav.xyz/api/v3/allTokens/324\").body\n  .tokens;\n\nconst POOLSMODE = [\n  {\n    id: 0,\n    name: \"Mode Static\",\n    description:\n      \"This mode features static bins that you can use to define your own custom liquidity strategy.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeStatic.gif\",\n  },\n  {\n    id: 1,\n    name: \"Mode Right\",\n    description:\n      \"This mode functions like a dynamic range order that follows the price of USDC up.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeRight.gif\",\n  },\n  {\n    id: 2,\n    name: \"Mode Left\",\n    description:\n      \"This mode functions like a dynamic range order that follows the price of cBUSD up.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeLeft.gif\",\n  },\n  {\n    id: 3,\n    name: \"Mode Both\",\n    description:\n      \"This mode functions like a dynamic range order that follows the pool price right and left, keeping liquidity as active as possible.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeBoth.gif\",\n  },\n];\n\nconst DISTRIBUTIONMODE = [\n  {\n    name: \"Single Bin\",\n    description: \"This will distribute your liquidity only in the active bin\",\n  },\n  {\n    name: \"Flat\",\n    description:\n      \"This will distribute your liquidity evenly across bins, centered around the current pool price.\",\n  },\n  //   {\n  //     name: \"Exponential\",\n  //     description:\n  //       \"This distribution starts with a high concentration of liquidity around the current pool price and adds exponentially decreasing amounts across the bins to the left and right.\",\n  //   },\n];\n\nState.init({\n  isZkSync: false,\n  routerContract: \"0x39E098A153Ad69834a9Dac32f0FCa92066aD03f4\",\n  positionContract: \"0xFd54762D435A490405DDa0fBc92b7168934e8525\",\n  step: 1,\n  step1TokenAAmount: 0,\n  refStep1Amount: null,\n  newTokenASelected: tokensForNEtwork.find(\n    (option) => option.name === tokensForNEtwork[0].name\n  ),\n  newTokenBSelected: tokensForNEtwork.find(\n    (option) => option.name === tokensForNEtwork[1].name\n  ),\n  tokenOptionsA: tokensForNEtwork.filter(\n    (option) => option.name != tokensForNEtwork[1].name\n  ),\n  tokenOptionsB: tokensForNEtwork.filter(\n    (option) => option.name != tokensForNEtwork[0].name\n  ),\n  tokensForNetwork: tokensForNEtwork,\n  poolSelected: POOLS[0],\n  poolModeSelected: POOLSMODE[0],\n  poolDistributionSelected: DISTRIBUTIONMODE[0],\n  amountInputTokenA: null,\n  inputBalanceTokenA: null,\n  amountInputTokenB: null,\n  inputBalanceTokenB: null,\n  fee: 0,\n  width: 0,\n  showSelectOptionsModal: false,\n  show: false,\n  binsToDistribute: 3,\n  need2Tokens: true,\n  onlyRight: false,\n});\n\nconst getUserBalances = () => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  asyncFetch(`https://api.mav.xyz/api/v3/tokenBalances/324/${accounts[0]}`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      State.update({ userBalances: res.body.tokenBalances });\n    });\n};\n\nconst getApprovedNFT = () => {\n  const position = new ethers.Contract(\n    state.positionContract,\n    positionAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  try {\n    position.getApproved(state.poolSelected.nftId).then((res) => {\n      console.log(\"approvedNFT: \" + parseInt(res, 16));\n      State.update({ approveNFT: parseInt(res, 16) });\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getNFTUser = () => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  asyncFetch(`https://api.mav.xyz/api/v3/user/${accounts[0]}/324`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      if (res.body.user.positions.length > 0) {\n        State.update({ userNFT: res.body.user.positions[0].nftId });\n        console.log(\"nft\", res.body.user.positions[0].nftId);\n      }\n    });\n};\n\nconst handleTokenSelect = (token, _sel) => {\n  const _tokenin = tokensForNEtwork.find((p) => p.name === token.target.value);\n  const filteredOptions = tokensForNEtwork.filter(\n    (option) => option.name !== token.target.value\n  );\n  _sel === \"A\"\n    ? State.update({\n        newTokenASelected: _tokenin,\n        tokenOptionsB: filteredOptions,\n      })\n    : State.update({\n        newTokenBSelected: _tokenin,\n        tokenOptionsA: filteredOptions,\n      });\n};\n\nconst handlePoolModeSelect = (data) => {\n  const mode = POOLSMODE.find((m) => m.name === data.target.value);\n  State.update({ poolModeSelected: mode });\n};\n\nconst handlePoolDistributionSelect = (data) => {\n  const mode = DISTRIBUTIONMODE.find((m) => m.name === data.target.value);\n  State.update({ poolDistributionSelected: mode });\n};\n\nconst getNetwork = () => {\n  let chainId = 324;\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res.chainId == chainId) {\n        State.update({ isZkSync: true });\n      } else {\n        switchNetwork(324);\n      }\n    });\n};\n\nconst switchNetwork = (chainId) => {\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    getNetwork();\n    getNFTUser();\n    getApprovedNFT();\n    state.userBalances ? \"\" : getUserBalances();\n  }\n}\n\nconst next = () => {\n  console.log(\"state\", state);\n  if (\n    (state.step === 1 && state.step1TokenAAmount <= 0) ||\n    state.fee === 0 ||\n    state.width === 0\n  ) {\n    return;\n  } else {\n    if (state.step + 1 == 2) {\n      setUserBalances();\n    } else if (state.step + 1 == 3) {\n      if (!(state.tokenAAllowance || state.tokenBAllowance)) {\n        getAccountAllowance({\n          token: state.newTokenASelected,\n          vAllowance: false,\n          mode: \"TA\",\n        });\n        getAccountAllowance({\n          token: state.newTokenBSelected,\n          vAllowance: false,\n          mode: \"TB\",\n        });\n      }\n    }\n    State.update({ step: state.step + 1 });\n  }\n};\n\nconst back = () => {\n  State.update({\n    step: state.step - 1,\n    amountInputTokenA: null,\n    amountInputTokenB: null,\n    noBalanceA: false,\n    noBalanceB: false,\n  });\n\n  if (state.validation) {\n    State.update({ validation: undefined });\n  }\n};\n\nconst formatNumber = (n) => {\n  if (n >= 1000000) {\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\n  } else if (n >= 1000) {\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\n  } else {\n    return \"$\" + n.toFixed(2);\n  }\n};\n\nconst setUserBalances = () => {\n  console.log(\"entra a set de balances\");\n  const tokABalance = state.userBalances.find(\n    (token) => token.symbol == state.newTokenASelected.symbol\n  );\n  const tokBBalance = state.userBalances.find(\n    (token) => token.symbol == state.newTokenBSelected.symbol\n  );\n  console.log(\"balance a \", tokABalance);\n  console.log(\"balance b \", tokBBalance);\n  tokABalance\n    ? State.update({\n        tokenABalance: {\n          fixed: (\n            parseFloat(tokABalance.tokenBalance).toFixed(6) - 0.000001\n          ).toString(),\n          unfixed: tokABalance.tokenBalanceBN,\n        },\n      })\n    : State.update({ tokABalance: undefined });\n  tokBBalance\n    ? State.update({\n        tokenBBalance: {\n          fixed: (\n            parseFloat(tokBBalance.tokenBalance).toFixed(6) - 0.000001\n          ).toString(),\n          unfixed: tokBBalance.tokenBalanceBN,\n        },\n      })\n    : State.update({ tokBBalance: undefined });\n};\n\nconst setMaxBalanceTokenA = () => {\n  if (state.tokenABalance.fixed > 0) {\n    handleInputTokenA(state.tokenABalance.fixed);\n  }\n};\n\nconst setMaxBalanceTokenB = () => {\n  if (state.tokenBBalance.fixed > 0) {\n    handleInputTokenB(state.tokenBBalance.fixed);\n  }\n};\n\nconst validateAllowance = (input, mode) => {\n  let divider, tokenAllowance;\n  if (mode == \"TA\") {\n    divider =\n      state.newTokenASelected.decimals == 18 ? 1000000000000000000 : 1000000;\n    tokenAllowance = state.tokenAAllowance / divider;\n    input * 1 > tokenAllowance\n      ? State.update({ moreTokenAAllowance: true })\n      : State.update({ moreTokenAAllowance: false });\n  } else {\n    divider =\n      state.newTokenBSelected.decimals == 18 ? 1000000000000000000 : 1000000;\n    tokenAllowance = state.tokenBAllowance / divider;\n    input * 1 > tokenAllowance\n      ? State.update({ moreTokenBAllowance: true })\n      : State.update({ moreTokenBAllowance: false });\n  }\n};\n\nconst changeBinsToDistribute = (nb) => {\n  State.update({\n    binsToDistribute: nb,\n    validation: false,\n    amountInputTokenB: 0,\n    amountInputTokenA: 0,\n  });\n};\n\nconst generateExponentialLambdas = (numPositions) => {\n  const lambdas = [0.1];\n  for (let i = 1; i < numPositions; i++) {\n    const lambda = 0.1 + i / 2;\n    lambdas.push(lambda);\n  }\n  return lambdas;\n};\n\nconst generateExponentialDistribution = (total, lambdas) => {\n  const sumExp = lambdas.reduce((acc, lambda) => acc + Math.exp(lambda), 0);\n  const result = lambdas.map((lambda) => (total / sumExp) * Math.exp(lambda));\n  return result;\n};\n\nconst handleInputTokenA = (input) => {\n  console.log(\"entra handle input A\", state.poolModeSelected.id);\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\n    const step1TokenAAmount = parseFloat(state.step1TokenAAmount);\n    const width = state.width / 100;\n    const tickSpacing = Math.ceil(Math.log(1 + width) / Math.log(1.0001));\n    const ic = Math.floor(\n      Math.log(step1TokenAAmount) / (Math.log(1.0001) * tickSpacing)\n    );\n    const il = Math.pow(1.0001, ic * tickSpacing);\n    const iu = Math.pow(1.0001, (ic + 1) * tickSpacing);\n\n    let deltaX = 0;\n    let deltaY = 0;\n    let deltaL = 1;\n\n    if (step1TokenAAmount < il) {\n      deltaX = deltaL * (1 / Math.sqrt(il) - 1 / Math.sqrt(iu));\n      deltaY = 0;\n    }\n    if (il <= step1TokenAAmount && step1TokenAAmount < iu) {\n      deltaX = deltaL * (1 / Math.sqrt(step1TokenAAmount) - 1 / Math.sqrt(iu));\n      deltaY = deltaL * (Math.sqrt(step1TokenAAmount) - Math.sqrt(il));\n    }\n    if (step1TokenAAmount >= iu) {\n      deltaX = 0;\n      deltaY = Math.sqrt(iu) - Math.sqrt(il);\n    }\n\n    let tokenB = 0;\n    if (ic !== 0) {\n      tokenB = input * (deltaX / deltaY);\n      State.update({\n        amountInputTokenB: deltaY == 0 ? 0 : tokenB.toFixed(6),\n        amountInputTokenA: input,\n        validation: undefined,\n        noBalanceA:\n          parseFloat(state.tokenABalance.fixed) < parseFloat(input)\n            ? true\n            : false,\n        noBalanceB:\n          parseFloat(state.tokenBBalance.fixed) < tokenB ? true : false,\n      });\n    } else {\n      if (state.poolDistributionSelected.name == \"Flat\") {\n        const binsL = Math.floor(state.binsToDistribute / 2);\n        const binsR = Math.ceil(state.binsToDistribute / 2);\n        tokenB = (input / binsL) * binsR;\n        State.update({\n          amountInputTokenB: tokenB.toFixed(6),\n          amountInputTokenA: input,\n          validation: undefined,\n          onlyRight: true,\n          noBalanceA:\n            parseFloat(state.tokenABalance.fixed) < parseFloat(input)\n              ? true\n              : false,\n          noBalanceB:\n            parseFloat(state.tokenBBalance.fixed) < tokenB ? true : false,\n        });\n      }\n      if (state.poolDistributionSelected.name == \"Exponential\") {\n        // Soon\n      }\n      if (state.poolDistributionSelected.name == \"Single Bin\") {\n        State.update({\n          amountInputTokenA: 0,\n          validation: undefined,\n          need2Tokens: false,\n        });\n      }\n    }\n  } else {\n    State.update({\n      amountInputTokenA: input,\n      noBalanceA:\n        parseFloat(state.tokenABalance.fixed) < parseFloat(input)\n          ? true\n          : false,\n    });\n  }\n};\n\nconst handleInputTokenB = (input) => {\n  console.log(\"entra handle input B\", state.poolModeSelected.id);\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\n    const step1TokenAAmount = parseFloat(state.step1TokenAAmount);\n    const width = state.width / 100;\n    const tickSpacing = Math.ceil(Math.log(1 + width) / Math.log(1.0001));\n    const ic = Math.floor(\n      Math.log(step1TokenAAmount) / (Math.log(1.0001) * tickSpacing)\n    );\n    const il = Math.pow(1.0001, ic * tickSpacing);\n    const iu = Math.pow(1.0001, (ic + 1) * tickSpacing);\n\n    let deltaX = 0;\n    let deltaY = 0;\n    let deltaL = 1;\n\n    if (step1TokenAAmount < il) {\n      deltaX = deltaL * (1 / Math.sqrt(il) - 1 / Math.sqrt(iu));\n      deltaY = 0;\n    }\n    if (il <= step1TokenAAmount && step1TokenAAmount < iu) {\n      deltaX = deltaL * (1 / Math.sqrt(step1TokenAAmount) - 1 / Math.sqrt(iu));\n      deltaY = deltaL * (Math.sqrt(step1TokenAAmount) - Math.sqrt(il));\n    }\n    if (step1TokenAAmount >= iu) {\n      deltaX = 0;\n      deltaY = Math.sqrt(iu) - Math.sqrt(il);\n    }\n\n    let tokenA = 0;\n    if (ic !== 0) {\n      tokenA = (input / deltaX) * deltaY;\n      State.update({\n        amountInputTokenA: deltaY == 0 ? 0 : tokenA.toFixed(6),\n        amountInputTokenB: input,\n        validation: undefined,\n        noBalanceA:\n          parseFloat(state.tokenABalance.fixed) < tokenA ? true : false,\n        noBalanceB:\n          parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\n            ? true\n            : false,\n      });\n    } else {\n      if (state.poolDistributionSelected.name == \"Flat\") {\n        const binsL = Math.floor(state.binsToDistribute / 2);\n        const binsR = Math.ceil(state.binsToDistribute / 2);\n        tokenA = (input / binsR) * binsL;\n        State.update({\n          amountInputTokenB: input,\n          amountInputTokenA: tokenA.toFixed(6),\n          validation: undefined,\n          onlyRight: true,\n          noBalanceA:\n            parseFloat(state.tokenABalance.fixed) < tokenA ? true : false,\n          noBalanceB:\n            parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\n              ? true\n              : false,\n        });\n      }\n      if (state.poolDistributionSelected.name == \"Exponential\") {\n        // Soon\n      }\n      if (state.poolDistributionSelected.name == \"Single Bin\") {\n        State.update({\n          amountInputTokenA: 0,\n          need2Tokens: false,\n          amountInputTokenB: input,\n          validation: undefined,\n          noBalanceB:\n            parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\n              ? true\n              : false,\n        });\n      }\n    }\n  } else {\n    State.update({\n      amountInputTokenB: input,\n      noBalanceB:\n        parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\n          ? true\n          : false,\n    });\n  }\n};\n\nconst validateConfirm = () => {\n  let bins = state.binsToDistribute;\n  if (bins % 2 !== 1) {\n    bins++;\n    State.update({ binsToDistribute: bins });\n  }\n\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\n    validateAllowance(state.amountInputTokenA, \"TA\");\n    validateAllowance(state.amountInputTokenB, \"TB\");\n    State.update({ validation: true });\n  } else if (state.poolModeSelected.id == 1) {\n    validateAllowance(state.amountInputTokenA, \"TA\");\n    State.update({ validation: true });\n  } else if (state.poolModeSelected.id == 2) {\n    validateAllowance(state.amountInputTokenB, \"TB\");\n    State.update({ validation: true });\n  }\n};\n\nconst getTokenARatio1 = () => {};\n\nconst approveErc20Token = (mode) => {\n  asyncFetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  ).then((res) => {\n    let value, token;\n    if (mode == \"TA\") {\n      value = state.tokenABalance.unfixed;\n      token = state.newTokenASelected;\n    } else {\n      value = state.tokenBBalance.unfixed;\n      token = state.newTokenBSelected;\n    }\n    const approveContract = new ethers.Contract(\n      token.address,\n      res.body,\n      Ethers.provider().getSigner()\n    );\n\n    if (gweiPrice !== undefined && gasLimit !== undefined) {\n      gasArgs.gasPrice = ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\");\n      gasArgs.gasLimit = gasLimit ?? 20000000;\n    }\n\n    approveContract\n      .approve(state.routerContract, value)\n      .then((transactionHash) => {\n        State.update({ onApprovingToken: true });\n        setTimeout(() => {\n          getAccountAllowance({\n            token:\n              mode == \"TA\" ? state.newTokenASelected : state.newTokenBSelected,\n            vAllowance: false,\n            mode: mode,\n          });\n          State.update({ onApprovingToken: false, validation: undefined });\n        }, 20000);\n      });\n  });\n};\n\nconst getAccountAllowance = (data) => {\n  console.log(data);\n  let token = data.token;\n  if (token.symbol == \"ETH\") {\n    if (data.mode == \"TA\") {\n      State.update({ tokenAAllowance: undefined });\n    } else {\n      State.update({ tokenBAllowance: undefined });\n    }\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    ).then((res) => {\n      const approveContract = new ethers.Contract(\n        token.address,\n        res.body,\n        Ethers.provider().getSigner()\n      );\n      approveContract\n        .allowance(state.sender, state.routerContract)\n        .then((res) => {\n          if (data.mode == \"TA\") {\n            State.update({ tokenAAllowance: parseInt(res.toString()) });\n          } else {\n            State.update({ tokenBAllowance: parseInt(res.toString()) });\n          }\n          console.log(\n            \"actual allowance \" + data.mode + \": \" + parseInt(res.toString())\n          );\n        });\n    });\n  }\n};\n\nconst confirm = () => {\n  if (state.amountInputTokenA <= 0 || state.amountInputTokenB <= 0) {\n    state.width === 0;\n    return;\n  } else {\n  }\n};\n\nconst formatNumberFee = (n) => {\n  if (n > 0.01) {\n    return n.toFixed(2) + \" %\";\n  }\n  return n.toFixed(3) + \" %\";\n};\n\nconst formatNumberWidth = (n) => {\n  if (n < 0.1) {\n    return n.toFixed(2) + \" %\";\n  }\n  if (n < 1) {\n    return n.toFixed(1) + \" %\";\n  }\n  return n + \" %\";\n};\n\nconst showPoolOptionsModal = () => {\n  State.update({ showSelectOptionsModal: true });\n};\n\nconst closeModal = () => {\n  State.update({ showSelectOptionsModal: false });\n};\n\nconst setFeeWidth = (fee, width) => {\n  State.update({\n    fee: fee,\n    width: width,\n    showSelectOptionsModal: false,\n  });\n};\n\nconst floatToFixed = (num, decimals) => {\n  decimals ? decimals : 18;\n  return ethers.BigNumber.from(\n    ethers.utils.parseUnits(num.toString(), decimals)\n  );\n};\n\nconst createPool = () => {\n  const router = new ethers.Contract(\n    state.routerContract,\n    routerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amountInA, amountInB;\n  console.log(state.amountInputTokenA, \"tokA\");\n  console.log(state.amountInputTokenB, \"tokB\");\n  let inputA = parseFloat(state.amountInputTokenA).toString();\n  let inputB = parseFloat(state.amountInputTokenB).toString();\n  if (state.poolModeSelected.id == 0) {\n    console.log(\"Entro a STATIC\");\n    if (state.poolDistributionSelected.name == \"Single Bin\") {\n      amountInA = ethers.utils.parseUnits(inputA, 18);\n      amountInB = ethers.utils.parseUnits(inputB, 18);\n      console.log(amountInA, amountInB);\n    } else {\n      amountInA = ethers.utils.parseUnits(inputA, 18);\n      amountInB = ethers.utils.parseUnits(inputB, 18);\n      console.log(amountInA, amountInB);\n    }\n  } else if (state.poolModeSelected.id == 3) {\n    console.log(\"Entro a BOTH\");\n    amountInA = ethers.utils.parseUnits(inputA, 18);\n    amountInB = ethers.utils.parseUnits(inputB, 18);\n    console.log(amountInA, amountInB);\n  } else if (state.poolModeSelected.id == 1) {\n    console.log(\"Entro a LEFT\");\n    amountInA = ethers.utils.parseUnits(inputA, 18);\n    amountInB = ethers.utils.parseUnits(\"0\", 18);\n    console.log(amountInA, amountInB);\n  } else if (state.poolModeSelected.id == 2) {\n    console.log(\"Entro a RIGHT\");\n    amountInA = ethers.utils.parseUnits(\"0\", 18);\n    amountInB = ethers.utils.parseUnits(inputB, 18);\n    console.log(amountInA, amountInB);\n  }\n\n  let amountIn2 = ethers.utils.parseUnits(\"0\", 18);\n  const overrides = {\n    value: amountIn2,\n    gasLimit: 5500000,\n  };\n\n  let tickSp = Math.ceil(Math.log(1 + state.width / 100) / Math.log(1.0001));\n  let actTick = Math.floor(\n    Math.log(parseInt(state.step1TokenAAmount)) / (Math.log(1.0001) * tickSp)\n  );\n\n  let liquidityParams = [];\n  let position =\n    state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3\n      ? actTick\n      : state.poolModeSelected.id == 1\n      ? actTick - 1\n      : actTick + 1;\n  if (\n    state.poolModeSelected.id == 1 ||\n    state.poolModeSelected.id == 2 ||\n    state.poolModeSelected.id == 3\n  ) {\n    liquidityParams.push({\n      kind: state.poolModeSelected.id,\n      pos: position,\n      isDelta: false,\n      deltaA: amountInA,\n      deltaB: amountInB,\n    });\n  } else {\n    if (state.poolDistributionSelected.name == \"Single Bin\") {\n      console.log(\"Single Bin\");\n      liquidityParams.push({\n        kind: state.poolModeSelected.id,\n        pos: position,\n        isDelta: false,\n        deltaA: amountInA,\n        deltaB: amountInB,\n      });\n    }\n    if (state.poolDistributionSelected.name == \"Flat\") {\n      console.log(\"Flat\");\n      if (state.onlyRight) {\n        const leftAmount = (\n          parseFloat(state.amountInputTokenA) /\n          Math.floor(state.binsToDistribute / 2)\n        ).toString();\n\n        const rightAmount = (\n          parseFloat(state.amountInputTokenB) /\n          Math.ceil(state.binsToDistribute / 2)\n        ).toString();\n\n        const amountInAFormated = ethers.utils.parseUnits(leftAmount, 18);\n        const amountInBFormated = ethers.utils.parseUnits(rightAmount, 18);\n\n        for (let i = 0; i < state.binsToDistribute; i++) {\n          const pos = position + i - Math.floor(state.binsToDistribute / 2);\n\n          let newDeltaA = pos < position ? amountInAFormated : 0;\n          let newDeltaB = pos >= position ? amountInBFormated : 0;\n\n          const param = {\n            kind: state.poolModeSelected.id,\n            pos: pos,\n            isDelta: false,\n            deltaA: newDeltaA,\n            deltaB: newDeltaB,\n          };\n          liquidityParams.push(param);\n        }\n      } else {\n        const leftAmount = (\n          (parseFloat(state.amountInputTokenA) - 0.001) /\n          Math.ceil(state.binsToDistribute / 2)\n        ).toString();\n\n        const rightAmount = (\n          (parseFloat(state.amountInputTokenB) - 0.001) /\n          Math.ceil(state.binsToDistribute / 2)\n        ).toString();\n\n        const amountInAFormated = ethers.utils.parseUnits(leftAmount, 18);\n        const amountInBFormated = ethers.utils.parseUnits(rightAmount, 18);\n\n        for (let i = 0; i < state.binsToDistribute; i++) {\n          const pos = position + i - Math.floor(state.binsToDistribute / 2);\n\n          let newDeltaA = pos <= position ? amountInAFormated : 0;\n          let newDeltaB = pos >= position ? amountInBFormated : 0;\n\n          const param = {\n            kind: state.poolModeSelected.id,\n            pos: pos,\n            isDelta: false,\n            deltaA: newDeltaA,\n            deltaB: newDeltaB,\n          };\n          liquidityParams.push(param);\n        }\n      }\n    }\n    if (state.poolDistributionSelected.name == \"Exponential\") {\n      console.log(\"Exponential\");\n      // Soon\n    }\n  }\n\n  const poolParams = {\n    fee: floatToFixed(state.fee / 100),\n    tickSpacing: tickSp,\n    lookback: \"0x0249781bbb25cac00000\",\n    activeTick: actTick,\n    tokenA: state.newTokenASelected.address,\n    tokenB: state.newTokenBSelected.address,\n  };\n  console.log({\n    pool: poolParams,\n    nftID: 0,\n    params: liquidityParams,\n    amountInA: 0,\n    amountInB: 0,\n    deadline: 1e13,\n  });\n  try {\n    router\n      .getOrCreatePoolAndAddLiquidity(\n        poolParams,\n        0,\n        liquidityParams,\n        0,\n        0,\n        1e13,\n        overrides\n      )\n      .then((res) => {\n        State.update({\n          creatingPool: true,\n        });\n        setTimeout(() => {\n          State.update({\n            step: 1,\n            step1TokenAAmount: 0,\n            refStep1Amount: null,\n            amountInputTokenA: null,\n            amountInputTokenB: null,\n            fee: 0,\n            width: 0,\n            showSelectOptionsModal: false,\n            show: false,\n            binsToDistribute: 3,\n            need2Tokens: true,\n            creatingPool: false,\n          });\n        }, 20000);\n      });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst confirmButton = (\n  <div class=\"ConfirmButton\" onClick={createPool}>\n    <div class={\"ConfirmText\"}>Confirm</div>\n  </div>\n);\n\nconst validateButton = (\n  <div class=\"validateButton\" onClick={validateConfirm}>\n    <div class={\"ConfirmText\"}>Validate</div>\n  </div>\n);\n\nconst validateButtonDisabled = (\n  <div class=\"validateButtonDisabled\" disabled>\n    <div class={\"ConfirmText\"}>\n      {state.poolModeSelected == 0 || state.poolModeSelected == 3\n        ? state.tokenABalance && state.tokenBBalance\n          ? \"Validate\"\n          : `You don't have enough balance`\n        : state.poolModeSelected == 1\n        ? state.tokenABalance\n          ? \"Validate\"\n          : `You don't have enough balance on ${state.selectedPoolOptions.tokenA.symbol}`\n        : state.tokenBBalance\n        ? \"Validate\"\n        : `You don't have enough balance on ${state.selectedPoolOptions.tokenB.symbol}`}\n    </div>\n  </div>\n);\n\nconst confirmButtonDisabled = (\n  <div class=\"confirmButtonDisabled\" disabled>\n    <div class={\"ConfirmText\"}>Confirm</div>\n  </div>\n);\n\nconst allowanceButton = (mode) => {\n  return (\n    <div class=\"allowanceButton\" onClick={() => approveErc20Token(mode)}>\n      <div class={\"ConfirmText\"}>\n        {mode == \"TA\"\n          ? \"Add more allowance on \" + state.newTokenASelected.symbol\n          : \"Add more allowance on \" + state.newTokenBSelected.symbol}\n      </div>\n    </div>\n  );\n};\n\nconst allowanceButtonDisabled = () => {\n  return (\n    <div class=\"allowanceButtonDisabled\" disabled>\n      <div class={\"ConfirmText\"}>\n        {state.moreTokenAAllowance\n          ? \"Approving \" + state.newTokenASelected.symbol\n          : \"Approving \" + state.newTokenBSelected.symbol}\n      </div>\n    </div>\n  );\n};\n\nconst insufficientBalanceButton = (mode) => {\n  console.log(\"entro modo\", mode);\n  return (\n    <div class=\"allowanceButtonDisabled\" disabled>\n      <div class={\"ConfirmText\"}>\n        {mode == \"TA\"\n          ? \"Insufficient balance on \" + state.newTokenASelected.symbol\n          : \"Insufficient balance on \" + state.newTokenBSelected.symbol}\n      </div>\n    </div>\n  );\n};\n\nconst css = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/createPool.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    ${css}\n`,\n  });\n}\n\nconst Theme = state.theme;\nreturn (\n  <Theme>\n    <div class=\"text-center mt-1\">\n      <div class=\"MainContainer\">\n        <div class=\"ProtocolContainer\">\n          <div class=\"ProtocolNetworkContainet\">\n            <div class=\"ProtocolNetworkTextSection\">\n              <div class=\"ProtocolText\">PROTOCOL</div>\n            </div>\n            <div class=\"ProtocolNetworkSection\">\n              <div class=\"ProtocolNetworkContainer\">\n                <img\n                  class=\"ProtocolImg\"\n                  src=\"https://etherscan.io/token/images/maverick_32.png\"\n                />\n                <div class=\"NetworkText\">Maverick</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {state.isZkSync ? (\n          <>\n            <div class=\"row\" style={{ color: \"white\", width: \"100%\" }}>\n              <div\n                class=\"col-4\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"end\",\n                }}\n              >\n                <div\n                  class=\"step\"\n                  style={{\n                    background:\n                      state.step >= 1 ? \"#6400FF\" : \"rgba(255, 255, 255, 0.1)\",\n                  }}\n                >\n                  {state.step <= 1 ? (\n                    1\n                  ) : (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                    >\n                      <path\n                        d=\"M1.25 9.375L7.875 16L18.125 4.5\"\n                        stroke=\"#FFFFFF\"\n                        stroke-width=\"2\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                      />\n                    </svg>\n                  )}\n                </div>\n              </div>\n              <div class=\"col-1\">-</div>\n              <div\n                class=\"col-2\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div\n                  class=\"step\"\n                  style={{\n                    background:\n                      state.step >= 2 ? \"#6400FF\" : \"rgba(255, 255, 255, 0.1)\",\n                  }}\n                >\n                  {state.step <= 2 ? (\n                    2\n                  ) : (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                    >\n                      <path\n                        d=\"M1.25 9.375L7.875 16L18.125 4.5\"\n                        stroke=\"#FFFFFF\"\n                        stroke-width=\"2\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                      />\n                    </svg>\n                  )}\n                </div>\n              </div>\n              <div class=\"col-1\">-</div>\n              <div\n                class=\"col-4\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"start\",\n                }}\n              >\n                <div\n                  class=\"step\"\n                  style={{\n                    background:\n                      state.step >= 3 ? \"#6400FF\" : \"rgba(255, 255, 255, 0.1)\",\n                  }}\n                >\n                  {state.step <= 3 ? (\n                    3\n                  ) : (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                    >\n                      <path\n                        d=\"M1.25 9.375L7.875 16L18.125 4.5\"\n                        stroke=\"#FFFFFF\"\n                        stroke-width=\"2\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                      />\n                    </svg>\n                  )}\n                </div>\n              </div>\n            </div>\n            {state.step == 1 && (\n              <div class=\"step1Container\">\n                <div class=\"titleSection text-start\">Select Token Pair</div>\n                <div>\n                  <div\n                    class=\"Container\"\n                    style={{\n                      height: \"50px\",\n                      \"margin-bottom\": \"3px\",\n                    }}\n                  >\n                    <div class=\"TokenSection\">\n                      {\n                        <img\n                          style={{ width: \"30px\", height: \"30px\" }}\n                          src={\n                            state.newTokenASelected\n                              ? state.newTokenASelected.logoURI\n                              : tokensForNEtwork[0].logoURI\n                          }\n                          alt=\"icon not found\"\n                        />\n                      }\n\n                      <div class=\"TokenNameSection\">\n                        <select\n                          class=\"TokenNameSelect\"\n                          value={\n                            state.newTokenASelected\n                              ? state.newTokenASelected.name\n                              : \"default\"\n                          }\n                          onChange={(e) => {\n                            handleTokenSelect(e, \"A\");\n                          }}\n                        >\n                          {state.tokenOptionsA.map((p) => {\n                            return <option value={p.name}>{p.symbol}</option>;\n                          })}\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div\n                    class=\"Container\"\n                    style={{ height: \"50px\", width: \"380px\" }}\n                  >\n                    <div class=\"TokenSection\">\n                      <img\n                        style={{ width: \"30px\", height: \"30px\" }}\n                        src={\n                          state.newTokenBSelected\n                            ? state.newTokenBSelected.logoURI\n                            : tokensForNEtwork[1].logoURI\n                        }\n                        alt=\"icon not found\"\n                      />{\" \"}\n                      <div class=\"TokenNameSection\">\n                        <select\n                          class=\"TokenNameSelect\"\n                          value={\n                            state.newTokenBSelected\n                              ? state.newTokenBSelected.name\n                              : \"default\"\n                          }\n                          onChange={(e) => {\n                            handleTokenSelect(e, \"B\");\n                          }}\n                        >\n                          {state.tokenOptionsB.map((p) => {\n                            return <option value={p.name}>{p.symbol}</option>;\n                          })}\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <>\n                  <div class=\"titleSection\">Select Pool Options</div>\n                  <br />\n                  <div\n                    class=\"Container\"\n                    class=\"Container\"\n                    style={{\n                      margin: \"auto\",\n                      height: \"55px\",\n                      border: \"1px solid #8D8DFD\",\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    <div class=\"row\" style={{ width: \"100%\" }}>\n                      <div class=\"col-12\">\n                        <div class=\"TokenNameSection\">\n                          <div class=\"PoolOptionsContainer\">\n                            <div\n                              style={{\n                                width: \"70%\",\n                                display: \"flex\",\n                                justifyContent: \"start\",\n                              }}\n                            >\n                              {state.fee > 0 && (\n                                <span class=\"FeeWidth\">\n                                  {formatNumberFee(state.fee) + \" Fee\"}\n                                </span>\n                              )}\n                              {state.width > 0 && (\n                                <span class=\"FeeWidth\">\n                                  {formatNumberWidth(state.width) + \" Width\"}\n                                </span>\n                              )}\n                            </div>\n                            <div\n                              style={{\n                                width: \"30%\",\n                                display: \"flex\",\n                                justifyContent: \"end\",\n                              }}\n                            >\n                              <span\n                                class=\"EditButton\"\n                                onClick={() => showPoolOptionsModal()}\n                              >\n                                Edit Options\n                              </span>\n                              {state.showSelectOptionsModal && (\n                                <Widget\n                                  props={{\n                                    setFeeWidth,\n                                    fee: state.fee,\n                                    width: state.width,\n                                    poolName1: `${state.newTokenASelected.symbol}-${state.newTokenBSelected.symbol}`,\n                                    poolName2: `${state.newTokenBSelected.symbol}-${state.newTokenASelected.symbol}`,\n                                    closeModal,\n                                  }}\n                                  src={\n                                    \"owa-is-bos.near/widget/Maverick-LP-NewOptionsModal\"\n                                  }\n                                />\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </>\n\n                <br />\n                <div\n                  class=\"Container\"\n                  style={{\n                    margin: \"auto\",\n                    height: \"60px\",\n                    color: \"white\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  <div class=\"\">\n                    <img\n                      style={{ width: \"30px\", height: \"30px\" }}\n                      src={\n                        state.newTokenASelected\n                          ? state.newTokenASelected.logoURI\n                          : tokensForNEtwork[0].logoURI\n                      }\n                      alt=\"icon not found\"\n                    />{\" \"}\n                    {state.newTokenASelected\n                      ? state.newTokenASelected.symbol\n                      : tokensForNEtwork[0].symbol}\n                  </div>\n                  <div class=\"  \">\n                    <div class=\" text-end  \" style={{ \"font-size\": \"14px\" }}>\n                      <input\n                        class=\"TokenAmountInput\"\n                        type=\"number\"\n                        placeholder=\"0\"\n                        inputmode=\"decimal\"\n                        min=\"0\"\n                        pattern=\"^[0-9]*[.]?[0-9]*$\"\n                        value={state.step1TokenAAmount}\n                        onChange={(e) => {\n                          State.update({\n                            step1TokenAAmount: e.target.value,\n                          });\n                        }}\n                      />\n                    </div>\n                    <div class=\" text-end\" style={{ \"font-size\": \"12px\" }}>\n                      <span class=\"UserBalance\">\n                        <span\n                          class=\"text-white\"\n                          onClick={async () => {\n                            setMaxBalanceTokenB();\n                          }}\n                        >\n                          per 1{\" \"}\n                          {state.newTokenBSelected\n                            ? state.newTokenBSelected.symbol\n                            : tokensForNEtwork[1].symbol}\n                        </span>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {state.step == 2 && (\n              <div>\n                <div class=\"titleSection\">Select Mode</div>\n                <br />\n                <div class=\"step2Container\">\n                  <div\n                    class=\"row\"\n                    style={{\n                      width: \"100%\",\n                      height: \"100px\",\n                      display: \"flex\",\n                      margin: \"0\",\n                    }}\n                  >\n                    <div class=\"col-6\">\n                      <p\n                        style={{\n                          textAlign: \"justify\",\n                          color: \"white\",\n                          fontSize: \"13px\",\n                        }}\n                      >\n                        {state.poolModeSelected.description}\n                      </p>\n                    </div>\n                    <div class=\"col-6\">\n                      <div class=\"ContainerPoolMode\">\n                        <div class=\"TokenSection\">\n                          <div class=\"TokenNameSection\">\n                            <div class=\"TokenAction\">Pool Mode {\"->\"}</div>\n                            <select\n                              class=\"TokenNameSelect\"\n                              value={\n                                state.poolModeSelected\n                                  ? state.poolModeSelected.name\n                                  : \"default\"\n                              }\n                              onChange={handlePoolModeSelect}\n                            >\n                              <option\n                                value=\"default\"\n                                disabled={state.poolModeSelected}\n                              >\n                                Select Mode\n                              </option>\n                              {POOLSMODE.map((m) => {\n                                return <option>{m.name}</option>;\n                              })}\n                            </select>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div style={{ overflow: \"hidden\" }}>\n                  {state.poolModeSelected && (\n                    <img\n                      src={state.poolModeSelected.img}\n                      style={{ height: \"166px\", transform: \"scale(1.3)\" }}\n                    ></img>\n                  )}\n                </div>\n              </div>\n            )}\n            {state.step == 3 && (\n              <div class=\"step3Container\">\n                {state.poolModeSelected.name == \"Mode Static\" && (\n                  <>\n                    <div class=\"titleSection\">Select Distribution</div>\n                    <br />\n                    <div style={{ margin: \"auto\", width: \"380px\" }}>\n                      <div\n                        class=\"row\"\n                        style={{\n                          height: \"60px\",\n                          display: \"flex\",\n                        }}\n                      >\n                        <div class=\"col-6\">\n                          <div\n                            class=\"ContainerDistributionMode\"\n                            style={{ height: \"50px\", width: \"190px\" }}\n                          >\n                            <div class=\"TokenSection\">\n                              <div class=\"TokenNameSection\">\n                                <div class=\"TokenAction\">\n                                  Distribution mode {\"->\"}\n                                </div>\n                                <select\n                                  class=\"DistributionNameSelect\"\n                                  value={\n                                    state.poolDistributionSelected\n                                      ? state.poolDistributionSelected.name\n                                      : \"default\"\n                                  }\n                                  onChange={handlePoolDistributionSelect}\n                                >\n                                  <option\n                                    value=\"default\"\n                                    disabled={state.poolModeSelected}\n                                  >\n                                    Select Distribution\n                                  </option>\n                                  <option disabled={state.poolModeSelected}>\n                                    Exponential (Soon)\n                                  </option>\n                                  {DISTRIBUTIONMODE.map((m) => {\n                                    return <option>{m.name}</option>;\n                                  })}\n                                </select>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"col-6\">\n                          {(state.poolDistributionSelected.name ==\n                            \"Exponential\" ||\n                            state.poolDistributionSelected.name == \"Flat\") && (\n                            <div class=\"SelectDistributionMode\">\n                              <div class=\"TokenSection\">\n                                <div class=\"TokenNameSection\">\n                                  <div class=\"TokenAction\">\n                                    Bins number (must be odd) {\"->\"}\n                                  </div>\n                                  <input\n                                    class=\"TokenAmountInput\"\n                                    type=\"number\"\n                                    placeholder=\"0\"\n                                    inputmode=\"decimal\"\n                                    min=\"3\"\n                                    step=\"2\"\n                                    value={state.binsToDistribute}\n                                    pattern=\"^[0-9]*[.]?[0-9]*$\"\n                                    onkeydown=\"return false\"\n                                    onChange={(e) =>\n                                      changeBinsToDistribute(e.target.value)\n                                    }\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                )}\n                <div class=\"titleSection mt-3\">Required Assets</div>\n                <div\n                  class=\"ContainerTokenA mt-3\"\n                  style={{\n                    margin: \"auto\",\n                    filter:\n                      state.poolModeSelected.name == \"Mode Left\"\n                        ? \"blur(3px)\"\n                        : \"\",\n                  }}\n                >\n                  <div class=\"TokenSection\">\n                    {state.newTokenASelected ? (\n                      <img\n                        class=\"TokenImg\"\n                        style={{ width: \"30px\", height: \"30px\" }}\n                        src={state.newTokenASelected.logoURI}\n                      />\n                    ) : null}\n                    <div class=\"TokenNameSection\" style={{ color: \"white\" }}>\n                      <div class=\"TokenAction\">Token A {\"->\"}</div>\n                      {state.newTokenASelected.symbol}\n                    </div>\n                  </div>\n                  {state.poolModeSelected.name != \"Mode Left\" && (\n                    <div class=\"TokenAmountSection\">\n                      <input\n                        class=\"TokenAmountInput\"\n                        type=\"number\"\n                        placeholder=\"0\"\n                        inputmode=\"decimal\"\n                        min=\"0\"\n                        pattern=\"^[0-9]*[.]?[0-9]*$\"\n                        value={state.amountInputTokenA}\n                        onChange={(e) => handleInputTokenA(e.target.value)}\n                      />\n                      <div class=\"TokenAmountPreview\">\n                        {state.tokenABalance != null ? (\n                          state.tokenABalance.fixed &&\n                          state.tokenABalance.fixed > 0 ? (\n                            <span>\n                              Balance: {state.tokenABalance.fixed}\n                              <span\n                                class=\"UserBalance\"\n                                onClick={async () => {\n                                  setMaxBalanceTokenA();\n                                }}\n                              >\n                                MAX\n                              </span>\n                            </span>\n                          ) : (\n                            \"Balance: 0\"\n                          )\n                        ) : (\n                          \"Balance: 0\"\n                        )}\n                      </div>\n                      {false ? (\n                        <div class=\"TokenInsufficientBalance\">\n                          Insufficient Balance\n                        </div>\n                      ) : null}\n                    </div>\n                  )}\n                </div>\n                <div\n                  class=\"ContainerTokenB mt-3\"\n                  style={{\n                    margin: \"auto\",\n                    filter:\n                      state.poolModeSelected.name == \"Mode Right\"\n                        ? \"blur(3px)\"\n                        : \"\",\n                  }}\n                >\n                  <div class=\"TokenSection\">\n                    {state.newTokenBSelected ? (\n                      <img\n                        class=\"TokenImg\"\n                        style={{ width: \"30px\", height: \"30px\" }}\n                        src={state.newTokenBSelected.logoURI}\n                      />\n                    ) : null}\n                    <div class=\"TokenNameSection\" style={{ color: \"white\" }}>\n                      <div class=\"TokenAction\">Token B {\"->\"}</div>\n                      {state.newTokenBSelected.symbol}\n                    </div>\n                  </div>\n                  {state.poolModeSelected.name != \"Mode Right\" && (\n                    <div class=\"TokenAmountSection\">\n                      <input\n                        class=\"TokenAmountInput\"\n                        type=\"number\"\n                        placeholder=\"0\"\n                        inputmode=\"decimal\"\n                        min=\"0\"\n                        pattern=\"^[0-9]*[.]?[0-9]*$\"\n                        value={state.amountInputTokenB}\n                        onChange={(e) => handleInputTokenB(e.target.value)}\n                      />\n                      <div class=\"TokenAmountPreview\">\n                        {state.tokenBBalance != null ? (\n                          state.tokenBBalance.fixed &&\n                          state.tokenBBalance.fixed > 0 ? (\n                            <span>\n                              Balance: {state.tokenBBalance.fixed}\n                              <span\n                                class=\"UserBalance\"\n                                onClick={async () => {\n                                  setMaxBalanceTokenB();\n                                }}\n                              >\n                                MAX\n                              </span>\n                            </span>\n                          ) : (\n                            \"Balance: 0\"\n                          )\n                        ) : (\n                          \"Balance: 0\"\n                        )}\n                      </div>\n                      {false ? (\n                        <div class=\"TokenInsufficientBalance\">\n                          Insufficient Balance\n                        </div>\n                      ) : null}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div class=\"row\" style={{ marginInline: \"0px\", width: \"100%\" }}>\n              <div\n                class=\"col-6\"\n                style={{ display: \"flex\", justifyContent: \"left\" }}\n              >\n                {state.step > 1 && (\n                  <div class=\"BackButton\" onClick={back}>\n                    <div class={\"ConfirmText\"}>Back</div>\n                  </div>\n                )}\n              </div>\n              <div\n                class=\"col-6\"\n                style={{ display: \"flex\", justifyContent: \"right\" }}\n              >\n                {state.step < 3 && (\n                  <>\n                    <OverlayTrigger\n                      key={\"top\"}\n                      placement={\"top\"}\n                      overlay={\n                        state.step1TokenAAmount <= 0 ||\n                        state.fee === 0 ||\n                        state.width === 0 ? (\n                          <Tooltip id={`tooltip-${placement}`}>\n                            {\"Increase the \"}\n                            {state.step1TokenAAmount <= 0\n                              ? \"token\"\n                              : state.fee === 0\n                              ? \"fee\"\n                              : \"width\"}\n                            {\" amount\"}.\n                          </Tooltip>\n                        ) : (\n                          <></>\n                        )\n                      }\n                    >\n                      <button class=\"ConfirmNextButton\" onClick={next}>\n                        <div class={\"ConfirmText\"}>Next</div>\n                      </button>\n                    </OverlayTrigger>\n                  </>\n                )}\n                {state.step == 3\n                  ? state.noBalanceA\n                    ? insufficientBalanceButton(\"TA\")\n                    : state.noBalanceB\n                    ? insufficientBalanceButton(\"TB\")\n                    : state.creatingPool\n                    ? confirmButtonDisabled\n                    : state.validation == true\n                    ? !state.moreTokenAAllowance\n                      ? !state.moreTokenBAllowance\n                        ? confirmButton\n                        : state.onApprovingToken\n                        ? allowanceButtonDisabled()\n                        : allowanceButton(\"TB\")\n                      : state.onApprovingToken\n                      ? allowanceButtonDisabled()\n                      : allowanceButton(\"TA\")\n                    : state.poolModeSelected.id == 0 ||\n                      state.poolModeSelected.id == 3\n                    ? state.tokenABalance && state.tokenBBalance\n                      ? state.need2Tokens\n                        ? state.amountInputTokenA > 0 &&\n                          state.amountInputTokenB > 0\n                          ? validateButton\n                          : validateButtonDisabled\n                        : state.amountInputTokenB > 0\n                        ? validateButton\n                        : validateButtonDisabled\n                      : validateButtonDisabled\n                    : state.poolModeSelected.id == 1\n                    ? state.tokenABalance\n                      ? state.amountInputTokenA > 0\n                        ? validateButton\n                        : validateButtonDisabled\n                      : validateButtonDisabled\n                    : state.tokenBBalance\n                    ? state.amountInputTokenB > 0\n                      ? validateButton\n                      : validateButtonDisabled\n                    : validateButtonDisabled\n                  : \"\"}\n              </div>\n            </div>\n          </>\n        ) : state.sender ? (\n          <span class=\"text-white\">\n            To proceed, please switch to the\n            <br />\n            <div\n              class=\"networkNameContainer\"\n              onClick={() => switchNetwork(324)}\n            >\n              <span class=\"networkName\">zkSync Era Network</span>\n            </div>\n            using your wallet.\n          </span>\n        ) : (\n          <>\n            <div>\n              <Web3Connect\n                className=\"ConfirmButton ConfirmText\"\n                connectLabel=\"Connect Wallet\"\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/Maverick-LP-NewPool", "fact_widget_deployments_id": "a9bade6a9e697076b4a77107332a1d20", "inserted_timestamp": "2023-11-16T20:22:31.140Z", "modified_timestamp": "2023-11-16T20:22:31.140Z", "__row_index": 12}