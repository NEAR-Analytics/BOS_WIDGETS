{"tx_hash": "Dcoqw8oG6J9aRLwX6rb85FwCcLGJSa1Kv2CYic8itLKe", "action_id_social": "9bKiehNHMBK3VGMBgW4JJ6Py7HUTpGdXANavDBTrrTfS-0-widget", "block_id": 117408118, "block_timestamp": "2024-04-22T21:58:27.091Z", "signer_id": "owa-is-bos.near", "widget_name": "BOS-Maverick", "source_code": "// Get Abi of Maverick router contract\nconst routerAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-router.txt\"\n);\n\n// Get Abi of Maverick pool contract\nconst poolAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/IPoolABI.txt\"\n);\n\n// Validate that the abi are loaded\nif (!routerAbi.ok || !poolAbi.ok) {\n  return \"Loading\";\n}\n\nlet pools;\n\n// Const with pool modes\nconst POOLSMODE = [\n  {\n    id: 1,\n    name: \"Mode Right\",\n    description:\n      \"This mode functions like a dynamic range order that follows the price of USDC up.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeRight.gif\",\n  },\n  {\n    id: 2,\n    name: \"Mode Left\",\n    description:\n      \"This mode functions like a dynamic range order that follows the price of cBUSD up.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeLeft.gif\",\n  },\n];\n\n// State initialization\nState.init({\n  isZkSync: false,\n  routerContract: \"0x39E098A153Ad69834a9Dac32f0FCa92066aD03f4\",\n  step: 1,\n  poolSelected: undefined,\n  poolModeSelected: POOLSMODE[0],\n  needMoreAllowanceTA: false,\n  needMoreAllowanceTB: false,\n  amountInputTokenA: null,\n  inputBalanceTokenA: null,\n  amountInputTokenB: null,\n  inputBalanceTokenB: null,\n  poolList: [],\n  pools: [],\n  poolOptions: [],\n  need2Tokens: true,\n  onlyRight: false,\n});\n\n// Method to fixed float number\nconst floatToFixed = (num, decimals) => {\n  decimals ? decimals : 18;\n  return ethers.BigNumber.from(\n    ethers.utils.parseUnits(num.toString(), decimals)\n  );\n};\n\n// Method to get user balances\nconst getUserBalances = () => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  asyncFetch(`https://api.mav.xyz/api/v4/tokenBalances/324/${accounts[0]}`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      State.update({ userBalances: res.body.tokenBalances });\n    });\n};\n\n// Method to set user balances\nconst setUserBalances = () => {\n  const tokA = state.selectedPoolOptions.tokenA.symbol;\n  const tokB = state.selectedPoolOptions.tokenB.symbol;\n  const tokABalance = state.userBalances.find((token) => token.symbol == tokA);\n  const tokBBalance = state.userBalances.find((token) => token.symbol == tokB);\n  tokABalance\n    ? State.update({\n        tokenABalance: {\n          fixed: (parseFloat(tokABalance.tokenBalance) - 0.00009)\n            .toFixed(8)\n            .toString(),\n          unfixed: tokABalance.tokenBalanceBN,\n        },\n      })\n    : State.update({ tokenABalance: undefined });\n  tokBBalance\n    ? State.update({\n        tokenBBalance: {\n          fixed: (parseFloat(tokBBalance.tokenBalance) - 0.00009)\n            .toFixed(8)\n            .toString(),\n          unfixed: tokBBalance.tokenBalanceBN,\n        },\n      })\n    : State.update({ tokenBBalance: undefined });\n};\n\n// Method to get user NFT\nconst getNFTUser = () => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  asyncFetch(`https://api.mav.xyz/api/v4/user/${accounts[0]}/324`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      if (res.body.user.positions.length > 0) {\n        State.update({ userNFT: res.body.user.positions[0].nftId });\n      }\n    });\n};\n\n// Method to get pools\nconst getPools = () => {\n  asyncFetch(`https://api.mav.xyz/api/v4/pools/324\n          `)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      let poolList = [\n        ...new Map(res.body.pools.map((item) => [item[\"name\"], item])).values(),\n      ];\n      pools = res.body.pools;\n      State.update({\n        poolList: poolList,\n        poolSelected: poolList[0],\n        selectedPoolOptions: poolList[0],\n      });\n      getPoolOptions(poolList[0].name, res.body.pools);\n    });\n};\n\n// Method to set pool options\nconst getPoolOptions = (selPool, pools) => {\n  State.update({\n    poolOptions: pools.filter((pool) => pool.name == selPool),\n  });\n};\n\n// Format width and fee\nconst getFeeWidthFormat = (n) => {\n  const decimalPart = (n % 1).toFixed(20).substring(2);\n  const zeroCount = decimalPart.match(/^0*/)[0].length;\n  var format = (n * 100).toFixed(zeroCount > 3 ? 3 : 2);\n  return format + \"%\";\n};\n\n// Format token balance\nconst formatNumberBalanceToken = (n) => {\n  if (n < 0.01) {\n    return \"< 0.01\";\n  }\n  if (n >= 1000000) {\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\n  } else if (n >= 1000) {\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\n  } else {\n    return \"$\" + n.toFixed(2);\n  }\n};\n\n// Format APR\nconst formatAPR = (n) => {\n  if (n == 0) {\n    return null;\n  }\n  const roundedNumber = (n * 100).toFixed(3);\n  const [integerPart, decimalPart] = roundedNumber.split(\".\");\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  const formattedNumber = `${formattedInteger}.${decimalPart}%`;\n  return formattedNumber;\n};\n\n// Method to show pool options modal\nconst showPoolOptionsModal = () => {\n  State.update({ showSelectPoolOptionModal: true });\n};\n\n// Method to close pool options modal\nconst closeModal = () => {\n  State.update({ showSelectPoolOptionModal: false });\n};\n\n// Method to set pool options modal\nconst setPoolOption = (allPoolOptions, poolOptionSelected) => {\n  State.update({\n    selectedPoolOptions: poolOptionSelected,\n    showSelectPoolOptionModal: false,\n  });\n};\n\n// Method to get account allowance\nconst getAccountAllowance = (data) => {\n  let token = data.token;\n  if (token.symbol == \"ETH\") {\n    data.mode == \"TA\"\n      ? State.update({ tokenAAllowance: undefined })\n      : State.update({ tokenBAllowance: undefined });\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    ).then((res) => {\n      const contract = token.address;\n      const approveContract = new ethers.Contract(\n        contract,\n        res.body,\n        Ethers.provider().getSigner()\n      );\n      console.log(approveContract);\n      approveContract\n        .allowance(state.sender, state.routerContract)\n        .then((res) => {\n          console.log(res);\n          if (data.mode == \"TA\") {\n            State.update({ tokenAAllowance: parseInt(res.toString()) });\n          } else {\n            State.update({ tokenBAllowance: parseInt(res.toString()) });\n          }\n        });\n    });\n  }\n};\n\n// Method to add liquidity\nconst addLiquidity = () => {\n  const router = new ethers.Contract(\n    state.routerContract,\n    routerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const pool = new ethers.Contract(\n    state.selectedPoolOptions.id,\n    poolAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amountInA, amountInB;\n  let inputA = state.amountInputTokenA;\n  let inputB = state.amountInputTokenB;\n  let usingETH =\n    state.selectedPoolOptions.tokenA.symbol == \"ETH\" ||\n    state.selectedPoolOptions.tokenB.symbol == \"ETH\";\n  let tokUsedETH =\n    state.selectedPoolOptions.tokenA.symbol == \"ETH\" ? \"tokA\" : \"tokB\";\n\n  if (state.poolModeSelected.id == 1) {\n    amountInA = ethers.utils.parseUnits(\n      inputA,\n      state.selectedPoolOptions.tokenA.decimals\n    );\n    amountInB = ethers.utils.parseUnits(\n      \"0\",\n      state.selectedPoolOptions.tokenB.decimals\n    );\n  } else if (state.poolModeSelected.id == 2) {\n    amountInA = ethers.utils.parseUnits(\n      \"0\",\n      state.selectedPoolOptions.tokenA.decimals\n    );\n    amountInB = ethers.utils.parseUnits(\n      inputB,\n      state.selectedPoolOptions.tokenB.decimals\n    );\n  }\n\n  const overrides = {\n    value: usingETH\n      ? tokUsedETH == \"tokA\"\n        ? amountInA\n        : amountInB\n      : ethers.utils.parseUnits(\"0\", 18),\n    gasLimit: 3000000,\n  };\n\n  pool.getState().then((res) => {\n    let lowerTick = res[0];\n\n    let position =\n      state.poolModeSelected.id == 1 ? lowerTick - 1 : lowerTick + 1;\n\n    pool.binPositions(res[0], state.poolModeSelected.id).then((res) => {\n      let liquidityParams = [];\n      if (state.poolModeSelected.id == 1 || state.poolModeSelected.id == 2) {\n        liquidityParams.push({\n          kind: state.poolModeSelected.id,\n          pos: position,\n          isDelta: false,\n          deltaA: amountInA,\n          deltaB: amountInB,\n        });\n      }\n      try {\n        router\n          .addLiquidityToPool(\n            state.selectedPoolOptions.id,\n            state.userNFT ? state.userNFT : 0,\n            liquidityParams,\n            0,\n            0,\n            1e13,\n            overrides\n          )\n          .then((res) => {\n            State.update({\n              addingLiquidity: true,\n            });\n            setTimeout(() => {\n              State.update({\n                step: 1,\n                poolSelected: undefined,\n                selectedPoolOptions: undefined,\n                poolOptions: undefined,\n                poolModeSelected: POOLSMODE[0],\n                needMoreAllowanceTA: false,\n                needMoreAllowanceTB: false,\n                amountInputTokenA: null,\n                inputBalanceTokenA: null,\n                amountInputTokenB: null,\n                inputBalanceTokenB: null,\n                need2Tokens: true,\n                addingLiquidity: false,\n                onlyRight: false,\n                tokenABalance: undefined,\n                tokenBBalance: undefined,\n                tokenAAllowance: undefined,\n                tokenBAllowance: undefined,\n                moreTokenAAllowance: undefined,\n                moreTokenBAllowance: undefined,\n              });\n              getUserBalances();\n            }, 25000);\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  });\n};\n\n// Method to set pool\nconst handlePoolSelect = (data) => {\n  const pool = state.poolList.find((p) => p.name === data.target.value);\n  asyncFetch(`https://api.mav.xyz/api/v4/pools/324`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      getPoolOptions(data.target.value, res.body.pools);\n    });\n  State.update({\n    poolSelected: pool,\n    selectedPoolOptions: pool,\n    tokenABalance: undefined,\n    tokenBBalance: undefined,\n    tokenAAllowance: undefined,\n    tokenBAllowance: undefined,\n    moreTokenAAllowance: undefined,\n    moreTokenBAllowance: undefined,\n  });\n};\n\n// Method to set pool options selected\nconst handlePoolOptionsSelect = (data) => {\n  const poolOptions = state.poolOptions.find(\n    (po) => po.id === data.target.value\n  );\n  State.update({ selectedPoolOptions: poolOptions });\n};\n\n// Method to set pool mode\nconst handlePoolModeSelect = (data) => {\n  const mode = POOLSMODE.find((m) => m.name === data.target.value);\n  State.update({ poolModeSelected: mode });\n};\n\n// Method to get network\nconst getNetwork = () => {\n  let chainId = 324;\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res.chainId == chainId) {\n        State.update({ isZkSync: true });\n      } else {\n        switchNetwork(324);\n      }\n    });\n};\n\n// Method to change network\nconst switchNetwork = (chainId) => {\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    getNetwork();\n    state.poolList.length == 0 ? getPools() : \"\";\n    state.userNFT ? \"\" : getNFTUser();\n    state.userBalances ? \"\" : getUserBalances();\n  }\n}\n\n// Method to next step\nconst next = () => {\n  if (state.step + 1 == 2) {\n    if (!(state.tokenABalance || state.tokenBBalance)) {\n      setUserBalances();\n    }\n  } else if (state.step + 1 == 3) {\n    if (!(state.tokenAAllowance || state.tokenBAllowance)) {\n      getAccountAllowance({\n        token: state.selectedPoolOptions.tokenA,\n        vAllowance: false,\n        mode: \"TA\",\n      });\n      getAccountAllowance({\n        token: state.selectedPoolOptions.tokenB,\n        vAllowance: false,\n        mode: \"TB\",\n      });\n    }\n  }\n  State.update({ step: state.step + 1 });\n};\n\n// Method to back step\nconst back = () => {\n  if (state.validation) {\n    State.update({ validation: false });\n  }\n  State.update({\n    step: state.step - 1,\n    amountInputTokenA: null,\n    amountInputTokenB: null,\n    onlyRight: false,\n  });\n};\n\n// Method to format number (M and K)\nconst formatNumber = (n) => {\n  if (n >= 1000000) {\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\n  } else if (n >= 1000) {\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\n  } else {\n    return \"$\" + n.toFixed(2);\n  }\n};\n\n// Method to set max of token A\nconst setMaxBalanceTokenA = () => {\n  if (state.tokenABalance.fixed > 0) {\n    handleInputTokenA(state.tokenABalance.fixed);\n  }\n};\n\n// Method to set max of token B\nconst setMaxBalanceTokenB = () => {\n  if (state.tokenBBalance.fixed > 0) {\n    handleInputTokenB(state.tokenBBalance.fixed);\n  }\n};\n\n// Method to validate token allowance\nconst validateAllowance = (input, mode) => {\n  let divider, tokenAllowance;\n  if (mode == \"TA\") {\n    divider =\n      state.selectedPoolOptions.tokenA.decimals == 18\n        ? 1000000000000000000\n        : 1000000;\n    tokenAllowance = state.tokenAAllowance / divider;\n    input * 1 > tokenAllowance\n      ? State.update({ moreTokenAAllowance: true })\n      : State.update({ moreTokenAAllowance: false });\n  } else {\n    divider =\n      state.selectedPoolOptions.tokenB.decimals == 18\n        ? 1000000000000000000\n        : 1000000;\n    tokenAllowance = state.tokenBAllowance / divider;\n    input * 1 > tokenAllowance\n      ? State.update({ moreTokenBAllowance: true })\n      : State.update({ moreTokenBAllowance: false });\n  }\n};\n\n// Handle to set token A\nconst handleInputTokenA = (input) => {\n  State.update({\n    amountInputTokenA: input,\n    noBalanceA:\n      parseFloat(state.tokenABalance.fixed) < parseFloat(input) ? true : false,\n  });\n};\n\n// Handle to set token B\nconst handleInputTokenB = (input) => {\n  State.update({\n    amountInputTokenB: input,\n    noBalanceB:\n      parseFloat(state.tokenBBalance.fixed) < parseFloat(input) ? true : false,\n  });\n};\n\n// Method to validate data\nconst validateConfirm = () => {\n  let bins = state.binsToDistribute;\n  if (bins % 2 !== 1) {\n    bins++;\n    State.update({ binsToDistribute: bins });\n  }\n\n  if (state.poolModeSelected.id == 1) {\n    validateAllowance(state.amountInputTokenA, \"TA\");\n    State.update({ validation: true });\n  } else if (state.poolModeSelected.id == 2) {\n    validateAllowance(state.amountInputTokenB, \"TB\");\n    State.update({ validation: true });\n  }\n};\n\n// Method to approve ERC20 token\nconst approveErc20Token = (mode) => {\n  asyncFetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  ).then((res) => {\n    let value, token;\n\n    if (mode == \"TA\") {\n      value = floatToFixed(\n        state.tokenABalance.fixed,\n        state.poolSelected.tokenA.decimals\n      );\n      token = state.poolSelected.tokenA;\n    } else {\n      value = floatToFixed(\n        state.tokenBBalance.fixed,\n        state.poolSelected.tokenB.decimals\n      );\n      token = state.poolSelected.tokenB;\n    }\n\n    const approveContract = new ethers.Contract(\n      token.address,\n      res.body,\n      Ethers.provider().getSigner()\n    );\n\n    if (gweiPrice !== undefined && gasLimit !== undefined) {\n      gasArgs.gasPrice = ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\");\n      gasArgs.gasLimit = gasLimit ?? 20000000;\n    }\n\n    approveContract\n      .approve(state.routerContract, value)\n      .then((transactionHash) => {\n        State.update({ onApprovingToken: true });\n        setTimeout(() => {\n          getAccountAllowance({\n            token:\n              mode == \"TA\"\n                ? state.selectedPoolOptions.tokenA\n                : state.selectedPoolOptions.tokenB,\n            vAllowance: false,\n            mode: mode,\n          });\n          State.update({ onApprovingToken: false, validation: false });\n        }, 20000);\n      });\n  });\n};\n\n// The next section contains the validation buttons //\nconst confirmButton = (\n  <div class=\"ConfirmButton\" onClick={addLiquidity}>\n    <div class={\"ConfirmText\"}>Confirm</div>\n  </div>\n);\n\nconst validateButton = (\n  <div class=\"validateButton\" onClick={validateConfirm}>\n    <div class={\"ConfirmText\"}>Validate</div>\n  </div>\n);\n\nconst validateButtonDisabled = (\n  <div class=\"validateButtonDisabled\" disabled>\n    <div class={\"ConfirmText\"}>\n      {state.poolModeSelected.id == 1\n        ? state.tokenABalance\n          ? \"Validate\"\n          : `You don't have enough balance on ${state.selectedPoolOptions.tokenA.symbol}`\n        : state.tokenBBalance\n        ? \"Validate\"\n        : `You don't have enough balance on ${state.selectedPoolOptions.tokenB.symbol}`}\n    </div>\n  </div>\n);\n\nconst confirmButtonDisabled = (\n  <div class=\"confirmButtonDisabled\" disabled>\n    <div class={\"ConfirmText\"}>Adding Liquidity...</div>\n  </div>\n);\n\nconst allowanceButton = (mode) => {\n  return (\n    <div class=\"allowanceButton\" onClick={() => approveErc20Token(mode)}>\n      <div class={\"ConfirmText\"}>\n        {mode == \"TA\"\n          ? \"Add more allowance on \" + state.poolSelected.tokenA.symbol\n          : \"Add more allowance on \" + state.poolSelected.tokenB.symbol}\n      </div>\n    </div>\n  );\n};\n\nconst insufficientBalanceButton = (mode) => {\n  return (\n    <div class=\"allowanceButtonDisabled\" disabled>\n      <div class={\"ConfirmText\"}>\n        {mode == \"TA\"\n          ? \"Insufficient balance on \" + state.poolSelected.tokenA.symbol\n          : \"Insufficient balance on \" + state.poolSelected.tokenB.symbol}\n      </div>\n    </div>\n  );\n};\n\nconst allowanceButtonDisabled = () => {\n  return (\n    <div class=\"allowanceButtonDisabled\" disabled>\n      <div class={\"ConfirmText\"}>\n        {state.moreTokenAAllowance\n          ? \"Approving \" + state.poolSelected.tokenA.symbol\n          : \"Approving \" + state.poolSelected.tokenB.symbol}\n      </div>\n    </div>\n  );\n};\n\n// Get css file\nconst css = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/addLiquidity.css\"\n).body;\n\nif (!css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n              ${css}\n          `,\n  });\n}\n\nconst Theme = state.theme;\n", "metadata": {"fork_of": "owa-is-bos.near/widget/Maverick-LP-Addition@115202601"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/BOS-Maverick", "fact_widget_deployments_id": "b2d9566cd75f8dfb7937d19a36724840", "inserted_timestamp": "2024-04-22T23:35:23.270Z", "modified_timestamp": "2024-04-23T00:53:55.061Z", "__row_index": 0}