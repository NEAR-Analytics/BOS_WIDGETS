{"tx_hash": "GfMYUgogkKpveesSpT7YMaCFo8UXazMFMvz4EaQdZjsc", "action_id_social": "FbMCGXRj759GErvvv1qxTS2HB52ka3gLZYNXq3ggzn3P-0-widget", "block_id": 104573203, "block_timestamp": "2023-10-30T23:53:26.668Z", "signer_id": "owa-is-bos.near", "widget_name": "Maverick-LP-Addition", "source_code": "const routerAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-router.txt\"\n);\n\nconst poolAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/IPoolABI.txt\"\n);\n\nif (!routerAbi.ok || !poolAbi.ok) {\n  return \"Loading\";\n}\n\nlet pools;\nconst POOLSMODE = [\n  {\n    id: 0,\n    name: \"Mode Static\",\n    description:\n      \"This mode features static bins that you can use to define your own custom liquidity strategy.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeStatic.gif\",\n  },\n  {\n    id: 1,\n    name: \"Mode Right\",\n    description:\n      \"This mode functions like a dynamic range order that follows the price of USDC up.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeRight.gif\",\n  },\n  {\n    id: 2,\n    name: \"Mode Left\",\n    description:\n      \"This mode functions like a dynamic range order that follows the price of cBUSD up.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeLeft.gif\",\n  },\n  {\n    id: 3,\n    name: \"Mode Both\",\n    description:\n      \"This mode functions like a dynamic range order that follows the pool price right and left, keeping liquidity as active as possible.\",\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeBoth.gif\",\n  },\n];\n\nconst DISTRIBUTIONMODE = [\n  {\n    name: \"Exponential\",\n    description:\n      \"This distribution starts with a high concentration of liquidity around the current pool price and adds exponentially decreasing amounts across the bins to the left and right.\",\n  },\n  {\n    name: \"Flat\",\n    description:\n      \"This will distribute your liquidity evenly across bins, centered around the current pool price.\",\n  },\n  {\n    name: \"Single Bin\",\n    description: \"This will distribute your liquidity only in the active bin\",\n  },\n];\n\nState.init({\n  isZkSync: false,\n  routerContract: \"0x9563Fdb01BFbF3D6c548C2C64E446cb5900ACA88\",\n  step: 1,\n  poolSelected: undefined,\n  poolModeSelected: POOLSMODE[0],\n  poolDistributionSelected: DISTRIBUTIONMODE[2],\n  needMoreAllowanceTA: false,\n  needMoreAllowanceTB: false,\n  amountInputTokenA: null,\n  inputBalanceTokenA: null,\n  amountInputTokenB: null,\n  inputBalanceTokenB: null,\n  poolList: [],\n  pools: [],\n  poolOptions: [],\n  binsToDistribute: 3,\n  need2Tokens: true,\n});\n\nconst floatToFixed = (num, decimals) => {\n  decimals ? decimals : 18;\n  return ethers.BigNumber.from(\n    ethers.utils.parseUnits(num.toString(), decimals)\n  );\n};\n\nconst getScale = () => {\n  asyncFetch(`https://api.mav.xyz/api/v3/tokenPrices/5`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      console.log(res.body);\n      let priceTokenA, priceTokenB;\n      Object.entries(res.body.prices).forEach(([key, value]) => {\n        if (\n          state.selectedPoolOptions.tokenA.priceId == key ||\n          state.selectedPoolOptions.tokenA.address == key\n        ) {\n          priceTokenA = value;\n        }\n        if (\n          state.selectedPoolOptions.tokenB.priceId == key ||\n          state.selectedPoolOptions.tokenB.address == key\n        ) {\n          priceTokenB = value;\n        }\n      });\n      let scalesObj = {\n        priceTokenA: priceTokenA.usd,\n        priceTokenB: priceTokenB.usd,\n        scaleTokAToTokB: priceTokenA.usd / priceTokenB.usd,\n        scaleTokBToTokA: priceTokenB.usd / priceTokenA.usd,\n      };\n      console.log(scalesObj);\n      State.update({ tokScales: scalesObj });\n    });\n};\n\nconst getUserBalances = () => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  asyncFetch(`https://api.mav.xyz/api/v3/tokenBalances/5/${accounts[0]}`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      State.update({ userBalances: res.body.tokenBalances });\n    });\n};\n\nconst setUserBalances = () => {\n  const tokABalance = state.userBalances.find(\n    (token) => token.symbol == state.selectedPoolOptions.tokenA.symbol\n  );\n  const tokBBalance = state.userBalances.find(\n    (token) => token.symbol == state.selectedPoolOptions.tokenB.symbol\n  );\n  tokABalance\n    ? State.update({\n        tokenABalance: {\n          fixed: (\n            parseFloat(tokABalance.tokenBalance).toFixed(6) - 0.000001\n          ).toString(),\n          unfixed: tokABalance.tokenBalanceBN,\n        },\n      })\n    : State.update({ tokABalance: undefined });\n  tokBBalance\n    ? State.update({\n        tokenBBalance: {\n          fixed: (\n            parseFloat(tokBBalance.tokenBalance).toFixed(6) - 0.000001\n          ).toString(),\n          unfixed: tokBBalance.tokenBalanceBN,\n        },\n      })\n    : State.update({ tokBBalance: undefined });\n};\n\nconst getNFTUser = () => {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  asyncFetch(`https://api.mav.xyz/api/v3/user/${accounts[0]}/5`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      if (res.body.user.positions.length > 0) {\n        State.update({ userNFT: res.body.user.positions[0].nftId });\n      }\n    });\n};\n\nconst getPools = () => {\n  console.log(\"entra pools\");\n  asyncFetch(`https://api.mav.xyz/api/v3/pools/5\n`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      let poolList = [\n        ...new Map(res.body.pools.map((item) => [item[\"name\"], item])).values(),\n      ];\n      pools = res.body.pools;\n      State.update({\n        poolList: poolList,\n        poolSelected: poolList[0],\n        selectedPoolOptions: poolList[0],\n      });\n      getPoolOptions(poolList[0].name, res.body.pools);\n    });\n};\n\nconst getPoolOptions = (selPool, pools) => {\n  State.update({\n    poolOptions: pools.filter((pool) => pool.name == selPool),\n  });\n};\n\nconst getFeeWidthFormat = (n) => {\n  const decimalPart = (n % 1).toFixed(20).substring(2);\n  const zeroCount = decimalPart.match(/^0*/)[0].length;\n  var format = (n * 100).toFixed(zeroCount > 3 ? 3 : 2);\n  return format + \"%\";\n};\n\nconst formatNumberBalanceToken = (n) => {\n  if (n >= 1000000) {\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\n  } else if (n >= 1000) {\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\n  } else {\n    return \"$\" + n.toFixed(2);\n  }\n};\n\nconst formatAPR = (n) => {\n  if (n == 0) {\n    return null;\n  }\n  const roundedNumber = (n * 100).toFixed(3);\n  const [integerPart, decimalPart] = roundedNumber.split(\".\");\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  const formattedNumber = `${formattedInteger}.${decimalPart}%`;\n  return formattedNumber;\n};\n\nconst showPoolOptionsModal = () => {\n  State.update({ showSelectPoolOptionModal: true });\n};\n\nconst closeModal = () => {\n  State.update({ showSelectPoolOptionModal: false });\n};\n\nconst setPoolOption = (allPoolOptions, poolOptionSelected) => {\n  console.log(\"Todas\");\n  console.log(allPoolOptions);\n  console.log(\"Seleccionada\");\n  console.log(poolOptionSelected);\n  State.update({\n    selectedPoolOptions: poolOptionSelected,\n    showSelectPoolOptionModal: false,\n  });\n};\n\nconst getAccountAllowance = (data) => {\n  console.log(data);\n  let token = data.token;\n  if (token.symbol == \"ETH\") {\n    if (data.mode == \"TA\") {\n      State.update({ tokenAAllowance: undefined });\n    } else {\n      State.update({ tokenBAllowance: undefined });\n    }\n  } else {\n    asyncFetch(\n      \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n    ).then((res) => {\n      const approveContract = new ethers.Contract(\n        token.address,\n        res.body,\n        Ethers.provider().getSigner()\n      );\n      approveContract\n        .allowance(state.sender, state.routerContract)\n        .then((res) => {\n          if (data.mode == \"TA\") {\n            State.update({ tokenAAllowance: parseInt(res.toString()) });\n          } else {\n            State.update({ tokenBAllowance: parseInt(res.toString()) });\n          }\n          console.log(\n            \"actual allowance \" + data.mode + \": \" + parseInt(res.toString())\n          );\n        });\n    });\n  }\n};\n\nconst addLiquidity = () => {\n  const router = new ethers.Contract(\n    state.routerContract,\n    routerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const pool = new ethers.Contract(\n    state.selectedPoolOptions.id,\n    poolAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let bins = state.selectedPoolOptions.bins;\n  console.log(bins);\n\n  let amountInA, amountInB;\n  let inputA = parseFloat(state.amountInputTokenA).toString();\n  let inputB = parseFloat(state.amountInputTokenB).toString();\n\n  if (state.poolModeSelected.id == 0) {\n    console.log(\"Entro a STATIC\");\n    if (state.poolDistributionSelected.name == \"Single Bin\") {\n      amountInA = ethers.utils.parseUnits(inputA, 18);\n      amountInB = ethers.utils.parseUnits(inputB, 18);\n      console.log(amountInA, amountInB);\n    } else {\n      amountInA = ethers.utils.parseUnits(inputA, 18);\n      amountInB = ethers.utils.parseUnits(inputB, 18);\n      console.log(amountInA, amountInB);\n    }\n  } else if (state.poolModeSelected.id == 3) {\n    console.log(\"Entro a BOTH\");\n    amountInA = ethers.utils.parseUnits(inputA, 18);\n    amountInB = ethers.utils.parseUnits(inputB, 18);\n    console.log(amountInA, amountInB);\n  } else if (state.poolModeSelected.id == 1) {\n    console.log(\"Entro a LEFT\");\n    amountInA = ethers.utils.parseUnits(inputA, 18);\n    amountInB = ethers.utils.parseUnits(\"0\", 18);\n    console.log(amountInA, amountInB);\n  } else if (state.poolModeSelected.id == 2) {\n    console.log(\"Entro a RIGHT\");\n    amountInA = ethers.utils.parseUnits(\"0\", 18);\n    amountInB = ethers.utils.parseUnits(inputB, 18);\n    console.log(amountInA, amountInB);\n  }\n\n  const overrides = {\n    value: ethers.utils.parseUnits(\"0\", 18),\n    gasLimit: 30000000,\n  };\n\n  pool.getState().then((res) => {\n    console.log(res);\n    let lowerTick = res[0];\n    let position =\n      state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3\n        ? lowerTick\n        : state.poolModeSelected.id == 1\n        ? lowerTick - 1\n        : lowerTick + 1;\n    pool.binPositions(res[0], state.poolModeSelected.id).then((res) => {\n      console.log(\"Position\", res);\n      let liquidityParams = [];\n      if (\n        state.poolModeSelected.id == 1 ||\n        state.poolModeSelected.id == 2 ||\n        state.poolModeSelected.id == 3\n      ) {\n        liquidityParams.push({\n          kind: state.poolModeSelected.id,\n          pos: position,\n          isDelta: false,\n          deltaA: amountInA,\n          deltaB: amountInB,\n        });\n      } else {\n        if (state.poolDistributionSelected.name == \"Single Bin\") {\n          console.log(\"Single Bin\");\n          liquidityParams.push({\n            kind: state.poolModeSelected.id,\n            pos: position,\n            isDelta: false,\n            deltaA: amountInA,\n            deltaB: amountInB,\n          });\n        }\n        if (state.poolDistributionSelected.name == \"Flat\") {\n          console.log(\"Flat\");\n\n          const leftAmount = (\n            (parseFloat(state.amountInputTokenA) - 0.001) /\n            Math.floor(state.binsToDistribute / 2)\n          ).toString();\n\n          const rightAmount = (\n            (parseFloat(state.amountInputTokenB) - 0.001) /\n            Math.ceil(state.binsToDistribute / 2)\n          ).toString();\n\n          const leftAmountFormated = ethers.utils.parseUnits(leftAmount, 18);\n          const amountInBFormated = ethers.utils.parseUnits(rightAmount, 18);\n\n          for (let i = 0; i < state.binsToDistribute; i++) {\n            const pos = position + i - Math.floor(state.binsToDistribute / 2);\n\n            const newDeltaA = pos < position ? leftAmountFormated : 0;\n            const newDeltaB = pos >= position ? amountInBFormated : 0;\n\n            const param = {\n              kind: state.poolModeSelected.id,\n              pos: pos,\n              isDelta: false,\n              deltaA: newDeltaA,\n              deltaB: newDeltaB,\n            };\n            liquidityParams.push(param);\n          }\n        }\n        if (state.poolDistributionSelected.name == \"Exponential\") {\n          console.log(\"Exponential\");\n\n          const sigma = state.binsToDistribute / 4;\n          const amplitudeLeft =\n            (parseFloat(state.amountInputTokenA) - 0.001) /\n            (sigma * Math.sqrt(2 * Math.PI));\n          const amplitudeRight =\n            (parseFloat(state.amountInputTokenB) - 0.001) /\n            (sigma * Math.sqrt(2 * Math.PI));\n\n          for (let i = 0; i < state.binsToDistribute; i++) {\n            const pos = position + i - Math.floor(state.binsToDistribute / 2);\n\n            const leftAmountFormated = ethers.utils.parseUnits(\n              (\n                amplitudeLeft *\n                Math.exp(-Math.pow(pos, 2) / (2 * Math.pow(sigma, 2)))\n              ).toString(),\n              18\n            );\n\n            const amountInBFormated = ethers.utils.parseUnits(\n              (\n                amplitudeRight *\n                Math.exp(-Math.pow(pos, 2) / (2 * Math.pow(sigma, 2)))\n              ).toString(),\n              18\n            );\n\n            const newDeltaA = pos < position ? leftAmountFormated : 0;\n            const newDeltaB = pos >= position ? amountInBFormated : 0;\n\n            const param = {\n              kind: state.poolModeSelected.id,\n              pos: pos,\n              isDelta: false,\n              deltaA: newDeltaA,\n              deltaB: newDeltaB,\n            };\n\n            liquidityParams.push(param);\n          }\n        }\n      }\n\n      console.log(liquidityParams);\n\n      try {\n        router\n          .addLiquidityToPool(\n            state.selectedPoolOptions.id,\n            state.userNFT ? state.userNFT : 0,\n            liquidityParams,\n            0,\n            0,\n            1e13,\n            overrides\n          )\n          .then((res) => {\n            setTimeout(() => {\n              State.update({\n                step: 1,\n                poolSelected: undefined,\n                poolModeSelected: POOLSMODE[0],\n                poolDistributionSelected: DISTRIBUTIONMODE[2],\n                needMoreAllowanceTA: false,\n                needMoreAllowanceTB: false,\n                amountInputTokenA: null,\n                inputBalanceTokenA: null,\n                amountInputTokenB: null,\n                inputBalanceTokenB: null,\n                binsToDistribute: 3,\n                need2Tokens: true,\n              });\n            }, 20000);\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  });\n};\n\nconst handlePoolSelect = (data) => {\n  const pool = state.poolList.find((p) => p.name === data.target.value);\n  asyncFetch(`https://api.mav.xyz/api/v3/pools/5`)\n    .catch((err) => {\n      console.log(err);\n    })\n    .then((res) => {\n      getPoolOptions(data.target.value, res.body.pools);\n    });\n  State.update({\n    poolSelected: pool,\n    selectedPoolOptions: pool,\n    tokenABalance: undefined,\n    tokenBBalance: undefined,\n    tokenAAllowance: undefined,\n    tokenBAllowance: undefined,\n    moreTokenAAllowance: undefined,\n    moreTokenBAllowance: undefined,\n  });\n};\n\nconst handlePoolOptionsSelect = (data) => {\n  const poolOptions = state.poolOptions.find(\n    (po) => po.id === data.target.value\n  );\n  State.update({ selectedPoolOptions: poolOptions });\n};\n\nconst handlePoolModeSelect = (data) => {\n  const mode = POOLSMODE.find((m) => m.name === data.target.value);\n  State.update({ poolModeSelected: mode });\n};\n\nconst handlePoolDistributionSelect = (data) => {\n  const mode = DISTRIBUTIONMODE.find((m) => m.name === data.target.value);\n  State.update({ poolDistributionSelected: mode });\n};\n\nconst getNetwork = () => {\n  let chainId = 5;\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res.chainId == chainId) {\n        State.update({ isZkSync: true });\n      } else {\n        switchNetwork(5);\n      }\n    });\n};\n\nconst switchNetwork = (chainId) => {\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    getNetwork();\n    state.poolList.length == 0 ? getPools() : \"\";\n    state.userNFT ? \"\" : getNFTUser();\n    state.userBalances ? \"\" : getUserBalances();\n  }\n}\n\nconst getRecipient = () => {\n  return (\n    state.sender.substring(0, 5) +\n    \"...\" +\n    state.sender.substring(state.sender.length - 4, state.sender.length)\n  ).toUpperCase();\n};\n\nconst next = () => {\n  if (state.step + 1 == 2) {\n    if (!(state.tokenABalance || state.tokenBBalance)) {\n      setUserBalances();\n      getScale();\n    }\n  } else if (state.step + 1 == 3) {\n    if (!(state.tokenAAllowance || state.tokenBAllowance)) {\n      getAccountAllowance({\n        token: state.selectedPoolOptions.tokenA,\n        vAllowance: false,\n        mode: \"TA\",\n      });\n      getAccountAllowance({\n        token: state.selectedPoolOptions.tokenB,\n        vAllowance: false,\n        mode: \"TB\",\n      });\n    }\n  }\n  State.update({ step: state.step + 1 });\n};\n\nconst back = () => {\n  if (state.validation) {\n    State.update({ validation: undefined });\n  }\n  State.update({\n    step: state.step - 1,\n    amountInputTokenA: null,\n    amountInputTokenB: null,\n  });\n};\n\nconst formatNumber = (n) => {\n  if (n >= 1000000) {\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\n  } else if (n >= 1000) {\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\n  } else {\n    return \"$\" + n.toFixed(2);\n  }\n};\n\nconst setMaxBalanceTokenA = () => {\n  if (state.tokenABalance.fixed > 0) {\n    State.update({ amountInputTokenA: state.tokenABalance.fixed });\n  }\n};\n\nconst setMaxBalanceTokenB = () => {\n  if (state.tokenBBalance.fixed > 0) {\n    State.update({ amountInputTokenB: state.tokenBBalance.fixed });\n  }\n};\n\nconst validateAllowance = (input, mode) => {\n  let divider, tokenAllowance;\n  if (mode == \"TA\") {\n    divider =\n      state.selectedPoolOptions.tokenA.decimals == 18\n        ? 1000000000000000000\n        : 1000000;\n    tokenAllowance = state.tokenAAllowance / divider;\n    input * 1 > tokenAllowance\n      ? State.update({ moreTokenAAllowance: true })\n      : State.update({ moreTokenAAllowance: false });\n  } else {\n    divider =\n      state.selectedPoolOptions.tokenB.decimals == 18\n        ? 1000000000000000000\n        : 1000000;\n    tokenAllowance = state.tokenBAllowance / divider;\n    input * 1 > tokenAllowance\n      ? State.update({ moreTokenBAllowance: true })\n      : State.update({ moreTokenBAllowance: false });\n  }\n};\n\nconst handleInputTokenA = (input) => {\n  console.log(\"entra handle input A\", state.poolModeSelected.id);\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\n    const step1TokenAAmount = state.selectedPoolOptions.price;\n    const tickSpacing = state.selectedPoolOptions.tickSpacing;\n    const ic = Math.floor(\n      Math.log(step1TokenAAmount) / (Math.log(1.0001) * tickSpacing)\n    );\n    const il = Math.pow(1.0001, ic * tickSpacing);\n    const iu = Math.pow(1.0001, (ic + 1) * tickSpacing);\n\n    let deltaX = 0;\n    let deltaY = 0;\n    let deltaL = 1;\n\n    if (step1TokenAAmount < il) {\n      deltaX = deltaL * (1 / Math.sqrt(il) - 1 / Math.sqrt(iu));\n      deltaY = 0;\n    }\n    if (il <= step1TokenAAmount && step1TokenAAmount < iu) {\n      deltaX = deltaL * (1 / Math.sqrt(step1TokenAAmount) - 1 / Math.sqrt(iu));\n      deltaY = deltaL * (Math.sqrt(step1TokenAAmount) - Math.sqrt(il));\n    }\n    if (step1TokenAAmount >= iu) {\n      deltaX = 0;\n      deltaY = Math.sqrt(iu) - Math.sqrt(il);\n    }\n\n    let tokenB = 0;\n    if (ic !== 0) {\n      tokenB = input * (deltaX / deltaY);\n      State.update({\n        amountInputTokenB: tokenB,\n        amountInputTokenA: input,\n        validation: undefined,\n      });\n    } else {\n      State.update({\n        amountInputTokenA: 0,\n        validation: undefined,\n        need2Tokens: false,\n      });\n    }\n  }\n};\n\nconst handleInputTokenB = (input) => {\n  console.log(\"entra handle input B\", state.poolModeSelected.id);\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\n    const step1TokenAAmount = state.selectedPoolOptions.price;\n    const tickSpacing = state.selectedPoolOptions.tickSpacing;\n    const ic = Math.floor(\n      Math.log(step1TokenAAmount) / (Math.log(1.0001) * tickSpacing)\n    );\n    const il = Math.pow(1.0001, ic * tickSpacing);\n    const iu = Math.pow(1.0001, (ic + 1) * tickSpacing);\n\n    let deltaX = 0;\n    let deltaY = 0;\n    let deltaL = 1;\n\n    if (step1TokenAAmount < il) {\n      deltaX = deltaL * (1 / Math.sqrt(il) - 1 / Math.sqrt(iu));\n      deltaY = 0;\n    }\n    if (il <= step1TokenAAmount && step1TokenAAmount < iu) {\n      deltaX = deltaL * (1 / Math.sqrt(step1TokenAAmount) - 1 / Math.sqrt(iu));\n      deltaY = deltaL * (Math.sqrt(step1TokenAAmount) - Math.sqrt(il));\n    }\n    if (step1TokenAAmount >= iu) {\n      deltaX = 0;\n      deltaY = Math.sqrt(iu) - Math.sqrt(il);\n    }\n\n    let tokenA = 0;\n    if (ic !== 0) {\n      tokenA = (input / deltaX) * deltaY;\n      State.update({\n        amountInputTokenA: tokenA,\n        amountInputTokenB: input,\n        validation: undefined,\n      });\n    } else {\n      State.update({\n        amountInputTokenA: 0,\n        need2Tokens: false,\n        amountInputTokenB: input,\n        validation: undefined,\n      });\n    }\n  }\n};\n\nconst validateConfirm = () => {\n  let bins = state.binsToDistribute;\n  if (bins % 2 !== 1) {\n    bins++;\n    State.update({ binsToDistribute: bins });\n  }\n\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\n    validateAllowance(state.amountInputTokenA, \"TA\");\n    validateAllowance(state.amountInputTokenB, \"TB\");\n    State.update({ validation: true });\n  } else if (state.poolModeSelected.id == 1) {\n    validateAllowance(state.amountInputTokenA, \"TA\");\n    State.update({ validation: true });\n  } else if (state.poolModeSelected.id == 2) {\n    validateAllowance(state.amountInputTokenB, \"TB\");\n    State.update({ validation: true });\n  }\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/Maverick-LP-Addition", "fact_widget_deployments_id": "772bec2b7048659d2a2c056d38af2063", "inserted_timestamp": "2023-10-31T01:50:08.957Z", "modified_timestamp": "2023-10-31T01:50:08.957Z", "__row_index": 13}