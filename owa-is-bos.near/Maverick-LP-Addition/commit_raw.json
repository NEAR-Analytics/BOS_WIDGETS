{"tx_hash": "FpEHyBGArK6jL7FCXQPAr8yrDwaUksdAgJXQoR5qyNaW", "action_id_social": "GnRx1tR9cTNqKBW5sL5ZyzSCen28Vz4LQ8ty55GPXLT4-0-widget", "block_id": 111949625, "block_timestamp": "2024-02-02T18:09:15.226Z", "signer_id": "owa-is-bos.near", "widget_name": "Maverick-LP-Addition", "source_code": "// Get Abi of Maverick router contract\r\nconst routerAbi = fetch(\r\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/maverick-router.txt\"\r\n);\r\n\r\n// Get Abi of Maverick pool contract\r\nconst poolAbi = fetch(\r\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/IPoolABI.txt\"\r\n);\r\n\r\n// Validate that the abi are loaded\r\nif (!routerAbi.ok || !poolAbi.ok) {\r\n  return \"Loading\";\r\n}\r\n\r\nlet pools;\r\n\r\n// Const with pool modes\r\nconst POOLSMODE = [\r\n  {\r\n    id: 0,\r\n    name: \"Mode Static\",\r\n    description:\r\n      \"This mode features static bins that you can use to define your own custom liquidity strategy.\",\r\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeStatic.gif\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Mode Right\",\r\n    description:\r\n      \"This mode functions like a dynamic range order that follows the price of USDC up.\",\r\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeRight.gif\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Mode Left\",\r\n    description:\r\n      \"This mode functions like a dynamic range order that follows the price of cBUSD up.\",\r\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeLeft.gif\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Mode Both\",\r\n    description:\r\n      \"This mode functions like a dynamic range order that follows the pool price right and left, keeping liquidity as active as possible.\",\r\n    img: \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ModeBoth.gif\",\r\n  },\r\n];\r\n\r\n// Const with distribution modes\r\nconst DISTRIBUTIONMODE = [\r\n  {\r\n    name: \"Single Bin\",\r\n    description: \"This will distribute your liquidity only in the active bin\",\r\n  },\r\n  {\r\n    name: \"Flat\",\r\n    description:\r\n      \"This will distribute your liquidity evenly across bins, centered around the current pool price.\",\r\n  },\r\n  {\r\n    name: \"Exponential\",\r\n    description:\r\n      \"This distribution starts with a high concentration of liquidity around the current pool price and adds exponentially decreasing amounts across the bins to the left and right.\",\r\n  },\r\n];\r\n\r\n// State initialization\r\nState.init({\r\n  isZkSync: false,\r\n  routerContract: \"0x39E098A153Ad69834a9Dac32f0FCa92066aD03f4\",\r\n  step: 1,\r\n  poolSelected: undefined,\r\n  poolModeSelected: POOLSMODE[0],\r\n  poolDistributionSelected: DISTRIBUTIONMODE[0],\r\n  needMoreAllowanceTA: false,\r\n  needMoreAllowanceTB: false,\r\n  amountInputTokenA: null,\r\n  inputBalanceTokenA: null,\r\n  amountInputTokenB: null,\r\n  inputBalanceTokenB: null,\r\n  poolList: [],\r\n  pools: [],\r\n  poolOptions: [],\r\n  binsToDistribute: 3,\r\n  need2Tokens: true,\r\n  onlyRight: false,\r\n});\r\n\r\n// Method to fixed float number\r\nconst floatToFixed = (num, decimals) => {\r\n  decimals ? decimals : 18;\r\n  return ethers.BigNumber.from(\r\n    ethers.utils.parseUnits(num.toString(), decimals)\r\n  );\r\n};\r\n\r\n// Method to get user balances\r\nconst getUserBalances = () => {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  asyncFetch(`https://api.mav.xyz/api/v3/tokenBalances/324/${accounts[0]}`)\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .then((res) => {\r\n      State.update({ userBalances: res.body.tokenBalances });\r\n    });\r\n};\r\n\r\n// Method to set user balances\r\nconst setUserBalances = () => {\r\n  const tokA =\r\n    state.selectedPoolOptions.tokenA.symbol == \"ETH\"\r\n      ? \"WETH\"\r\n      : state.selectedPoolOptions.tokenA.symbol;\r\n  const tokB =\r\n    state.selectedPoolOptions.tokenB.symbol == \"ETH\"\r\n      ? \"WETH\"\r\n      : state.selectedPoolOptions.tokenB.symbol;\r\n  const tokABalance = state.userBalances.find((token) => token.symbol == tokA);\r\n  const tokBBalance = state.userBalances.find((token) => token.symbol == tokB);\r\n  tokABalance\r\n    ? State.update({\r\n        tokenABalance: {\r\n          fixed: (\r\n            parseFloat(tokABalance.tokenBalance).toFixed(11) - 0.000001\r\n          ).toString(),\r\n          unfixed: tokABalance.tokenBalanceBN,\r\n        },\r\n      })\r\n    : State.update({ tokABalance: undefined });\r\n  tokBBalance\r\n    ? State.update({\r\n        tokenBBalance: {\r\n          fixed: (\r\n            parseFloat(tokBBalance.tokenBalance).toFixed(11) - 0.000001\r\n          ).toString(),\r\n          unfixed: tokBBalance.tokenBalanceBN,\r\n        },\r\n      })\r\n    : State.update({ tokBBalance: undefined });\r\n};\r\n\r\n// Method to get user NFT\r\nconst getNFTUser = () => {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  asyncFetch(`https://api.mav.xyz/api/v3/user/${accounts[0]}/324`)\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .then((res) => {\r\n      if (res.body.user.positions.length > 0) {\r\n        State.update({ userNFT: res.body.user.positions[0].nftId });\r\n      }\r\n    });\r\n};\r\n\r\n// Method to get pools\r\nconst getPools = () => {\r\n  asyncFetch(`https://api.mav.xyz/api/v3/pools/324\r\n      `)\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .then((res) => {\r\n      let poolList = [\r\n        ...new Map(res.body.pools.map((item) => [item[\"name\"], item])).values(),\r\n      ];\r\n      pools = res.body.pools;\r\n      State.update({\r\n        poolList: poolList,\r\n        poolSelected: poolList[0],\r\n        selectedPoolOptions: poolList[0],\r\n      });\r\n      getPoolOptions(poolList[0].name, res.body.pools);\r\n    });\r\n};\r\n\r\n// Method to set pool options\r\nconst getPoolOptions = (selPool, pools) => {\r\n  State.update({\r\n    poolOptions: pools.filter((pool) => pool.name == selPool),\r\n  });\r\n};\r\n\r\n// Format width and fee\r\nconst getFeeWidthFormat = (n) => {\r\n  const decimalPart = (n % 1).toFixed(20).substring(2);\r\n  const zeroCount = decimalPart.match(/^0*/)[0].length;\r\n  var format = (n * 100).toFixed(zeroCount > 3 ? 3 : 2);\r\n  return format + \"%\";\r\n};\r\n\r\n// Format token balance\r\nconst formatNumberBalanceToken = (n) => {\r\n  if (n < 0.01) {\r\n    return \"< 0.01\";\r\n  }\r\n  if (n >= 1000000) {\r\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\r\n  } else if (n >= 1000) {\r\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\r\n  } else {\r\n    return \"$\" + n.toFixed(2);\r\n  }\r\n};\r\n\r\n// Format APR\r\nconst formatAPR = (n) => {\r\n  if (n == 0) {\r\n    return null;\r\n  }\r\n  const roundedNumber = (n * 100).toFixed(3);\r\n  const [integerPart, decimalPart] = roundedNumber.split(\".\");\r\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  const formattedNumber = `${formattedInteger}.${decimalPart}%`;\r\n  return formattedNumber;\r\n};\r\n\r\n// Method to show pool options modal\r\nconst showPoolOptionsModal = () => {\r\n  State.update({ showSelectPoolOptionModal: true });\r\n};\r\n\r\n// Method to close pool options modal\r\nconst closeModal = () => {\r\n  State.update({ showSelectPoolOptionModal: false });\r\n};\r\n\r\n// Method to set pool options modal\r\nconst setPoolOption = (allPoolOptions, poolOptionSelected) => {\r\n  State.update({\r\n    selectedPoolOptions: poolOptionSelected,\r\n    showSelectPoolOptionModal: false,\r\n  });\r\n};\r\n\r\n// Method to get account allowance\r\nconst getAccountAllowance = (data) => {\r\n  let token = data.token;\r\n  asyncFetch(\r\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n  ).then((res) => {\r\n    const contract = token.address;\r\n    if (token.symbol == \"ETH\") {\r\n      contract = \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\";\r\n    }\r\n    const approveContract = new ethers.Contract(\r\n      contract,\r\n      res.body,\r\n      Ethers.provider().getSigner()\r\n    );\r\n    approveContract\r\n      .allowance(state.sender, state.routerContract)\r\n      .then((res) => {\r\n        if (data.mode == \"TA\") {\r\n          State.update({ tokenAAllowance: parseInt(res.toString()) });\r\n        } else {\r\n          State.update({ tokenBAllowance: parseInt(res.toString()) });\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\n// Method to add liquidity\r\nconst addLiquidity = () => {\r\n  const router = new ethers.Contract(\r\n    state.routerContract,\r\n    routerAbi.body,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const pool = new ethers.Contract(\r\n    state.selectedPoolOptions.id,\r\n    poolAbi.body,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  let bins = state.selectedPoolOptions.bins;\r\n\r\n  let amountInA, amountInB;\r\n  let inputA = state.amountInputTokenA;\r\n  let inputB = state.amountInputTokenB;\r\n\r\n  if (state.poolModeSelected.id == 0) {\r\n    if (state.poolDistributionSelected.name == \"Single Bin\") {\r\n      amountInA = ethers.utils.parseUnits(\r\n        inputA,\r\n        state.selectedPoolOptions.tokenA.decimals\r\n      );\r\n      amountInB = ethers.utils.parseUnits(\r\n        inputB,\r\n        state.selectedPoolOptions.tokenB.decimals\r\n      );\r\n    } else {\r\n      amountInA = ethers.utils.parseUnits(\r\n        inputA,\r\n        state.selectedPoolOptions.tokenA.decimals\r\n      );\r\n      amountInB = ethers.utils.parseUnits(\r\n        inputB,\r\n        state.selectedPoolOptions.tokenB.decimals\r\n      );\r\n    }\r\n  } else if (state.poolModeSelected.id == 3) {\r\n    amountInA = ethers.utils.parseUnits(\r\n      inputA,\r\n      state.selectedPoolOptions.tokenA.decimals\r\n    );\r\n    amountInB = ethers.utils.parseUnits(\r\n      inputB,\r\n      state.selectedPoolOptions.tokenB.decimals\r\n    );\r\n  } else if (state.poolModeSelected.id == 1) {\r\n    amountInA = ethers.utils.parseUnits(\r\n      inputA,\r\n      state.selectedPoolOptions.tokenA.decimals\r\n    );\r\n    amountInB = ethers.utils.parseUnits(\r\n      \"0\",\r\n      state.selectedPoolOptions.tokenB.decimals\r\n    );\r\n  } else if (state.poolModeSelected.id == 2) {\r\n    amountInA = ethers.utils.parseUnits(\r\n      \"0\",\r\n      state.selectedPoolOptions.tokenA.decimals\r\n    );\r\n    amountInB = ethers.utils.parseUnits(\r\n      inputB,\r\n      state.selectedPoolOptions.tokenB.decimals\r\n    );\r\n  }\r\n\r\n  const overrides = {\r\n    value: ethers.utils.parseUnits(\"0\", 18),\r\n    gasLimit: 3000000,\r\n  };\r\n\r\n  pool.getState().then((res) => {\r\n    let lowerTick = res[0];\r\n    let position =\r\n      state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3\r\n        ? lowerTick\r\n        : state.poolModeSelected.id == 1\r\n        ? lowerTick - 1\r\n        : lowerTick + 1;\r\n    pool.binPositions(res[0], state.poolModeSelected.id).then((res) => {\r\n      let liquidityParams = [];\r\n      if (\r\n        state.poolModeSelected.id == 1 ||\r\n        state.poolModeSelected.id == 2 ||\r\n        state.poolModeSelected.id == 3\r\n      ) {\r\n        liquidityParams.push({\r\n          kind: state.poolModeSelected.id,\r\n          pos: position,\r\n          isDelta: false,\r\n          deltaA: amountInA,\r\n          deltaB: amountInB,\r\n        });\r\n      } else {\r\n        if (state.poolDistributionSelected.name == \"Single Bin\") {\r\n          liquidityParams.push({\r\n            kind: state.poolModeSelected.id,\r\n            pos: position,\r\n            isDelta: false,\r\n            deltaA: amountInA,\r\n            deltaB: amountInB,\r\n          });\r\n        }\r\n        if (state.poolDistributionSelected.name == \"Flat\") {\r\n          if (state.onlyRight) {\r\n            const leftAmount = (\r\n              parseFloat(state.amountInputTokenA) /\r\n              Math.floor(state.binsToDistribute / 2)\r\n            ).toString();\r\n\r\n            const rightAmount = (\r\n              parseFloat(state.amountInputTokenB) /\r\n              Math.ceil(state.binsToDistribute / 2)\r\n            ).toString();\r\n\r\n            const amountInAFormated = ethers.utils.parseUnits(\r\n              leftAmount,\r\n              state.selectedPoolOptions.tokenA.decimals\r\n            );\r\n            const amountInBFormated = ethers.utils.parseUnits(\r\n              rightAmount,\r\n              state.selectedPoolOptions.tokenB.decimals\r\n            );\r\n\r\n            for (let i = 0; i < state.binsToDistribute; i++) {\r\n              const pos = position + i - Math.floor(state.binsToDistribute / 2);\r\n\r\n              let newDeltaA = pos < position ? amountInAFormated : 0;\r\n              let newDeltaB = pos >= position ? amountInBFormated : 0;\r\n\r\n              const param = {\r\n                kind: state.poolModeSelected.id,\r\n                pos: pos,\r\n                isDelta: false,\r\n                deltaA: newDeltaA,\r\n                deltaB: newDeltaB,\r\n              };\r\n              liquidityParams.push(param);\r\n            }\r\n          } else {\r\n            const leftAmount = (\r\n              (parseFloat(state.amountInputTokenA) - 0.001) /\r\n              Math.ceil(state.binsToDistribute / 2)\r\n            ).toString();\r\n\r\n            const rightAmount = (\r\n              (parseFloat(state.amountInputTokenB) - 0.001) /\r\n              Math.ceil(state.binsToDistribute / 2)\r\n            ).toString();\r\n\r\n            const amountInAFormated = ethers.utils.parseUnits(\r\n              leftAmount,\r\n              state.selectedPoolOptions.tokenA.decimals\r\n            );\r\n            const amountInBFormated = ethers.utils.parseUnits(\r\n              rightAmount,\r\n              state.selectedPoolOptions.tokenB.decimals\r\n            );\r\n\r\n            for (let i = 0; i < state.binsToDistribute; i++) {\r\n              const pos = position + i - Math.floor(state.binsToDistribute / 2);\r\n\r\n              let newDeltaA = pos <= position ? amountInAFormated : 0;\r\n              let newDeltaB = pos >= position ? amountInBFormated : 0;\r\n\r\n              const param = {\r\n                kind: state.poolModeSelected.id,\r\n                pos: pos,\r\n                isDelta: false,\r\n                deltaA: newDeltaA,\r\n                deltaB: newDeltaB,\r\n              };\r\n              liquidityParams.push(param);\r\n            }\r\n          }\r\n        }\r\n        if (state.poolDistributionSelected.name == \"Exponential\") {\r\n          if (state.onlyRight) {\r\n            const binsL = Math.floor(state.binsToDistribute / 2);\r\n            const binsR = Math.ceil(state.binsToDistribute / 2);\r\n\r\n            const lambdasL = [0.1];\r\n            const lambdasR = [0.1];\r\n            for (let i = 1; i < binsL; i++) {\r\n              const lambda = 0.1 + i / 2;\r\n              lambdasL.push(lambda);\r\n            }\r\n            for (let i = 1; i < binsR; i++) {\r\n              const lambda = 0.1 + i / 2;\r\n              lambdasR.push(lambda);\r\n            }\r\n\r\n            const sumExpL = lambdasL.reduce(\r\n              (acc, lambda) => acc + Math.exp(lambda),\r\n              0\r\n            );\r\n            const sumExpR = lambdasR.reduce(\r\n              (acc, lambda) => acc + Math.exp(lambda),\r\n              0\r\n            );\r\n\r\n            let amountExpL = lambdasL\r\n              .map(\r\n                (lambda) =>\r\n                  (state.amountInputTokenA / sumExpL) * Math.exp(lambda)\r\n              )\r\n              .reverse();\r\n            amountExpL.unshift(0);\r\n            amountExpL.reverse();\r\n\r\n            const amountExpR = lambdasR\r\n              .map(\r\n                (lambda) =>\r\n                  (state.amountInputTokenB / sumExpR) * Math.exp(lambda)\r\n              )\r\n              .reverse();\r\n\r\n            for (let i = 0; i < state.binsToDistribute; i++) {\r\n              const pos = position + i - Math.floor(state.binsToDistribute / 2);\r\n              let newDeltaA =\r\n                pos <= position\r\n                  ? ethers.utils.parseUnits(\r\n                      amountExpL[i].toString(),\r\n                      state.selectedPoolOptions.tokenA.decimals\r\n                    )\r\n                  : 0;\r\n              let newDeltaB =\r\n                pos >= position\r\n                  ? ethers.utils.parseUnits(\r\n                      amountExpR[\r\n                        i - Math.floor(state.binsToDistribute / 2)\r\n                      ].toString(),\r\n                      state.selectedPoolOptions.tokenB.decimals\r\n                    )\r\n                  : 0;\r\n\r\n              const param = {\r\n                kind: state.poolModeSelected.id,\r\n                pos: pos,\r\n                isDelta: false,\r\n                deltaA: newDeltaA,\r\n                deltaB: newDeltaB,\r\n              };\r\n              liquidityParams.push(param);\r\n            }\r\n          } else {\r\n            const binsL = Math.ceil(state.binsToDistribute / 2);\r\n            const binsR = Math.ceil(state.binsToDistribute / 2);\r\n\r\n            const lambdasL = [0.1];\r\n            const lambdasR = [0.1];\r\n            for (let i = 1; i < binsL; i++) {\r\n              const lambda = 0.1 + i / 2;\r\n              lambdasL.push(lambda);\r\n            }\r\n            for (let i = 1; i < binsR; i++) {\r\n              const lambda = 0.1 + i / 2;\r\n              lambdasR.push(lambda);\r\n            }\r\n\r\n            const sumExpL = lambdasL.reduce(\r\n              (acc, lambda) => acc + Math.exp(lambda),\r\n              0\r\n            );\r\n            const sumExpR = lambdasR.reduce(\r\n              (acc, lambda) => acc + Math.exp(lambda),\r\n              0\r\n            );\r\n\r\n            let amountExpL = lambdasL\r\n              .map(\r\n                (lambda) =>\r\n                  (state.amountInputTokenA / sumExpL) * Math.exp(lambda)\r\n              )\r\n              .reverse();\r\n            amountExpL.reverse();\r\n\r\n            const amountExpR = lambdasR\r\n              .map(\r\n                (lambda) =>\r\n                  (state.amountInputTokenB / sumExpR) * Math.exp(lambda)\r\n              )\r\n              .reverse();\r\n\r\n            for (let i = 0; i < state.binsToDistribute; i++) {\r\n              const pos = position + i - Math.floor(state.binsToDistribute / 2);\r\n              let newDeltaA =\r\n                pos <= position\r\n                  ? ethers.utils.parseUnits(\r\n                      amountExpL[i].toString(),\r\n                      state.selectedPoolOptions.tokenA.decimals\r\n                    )\r\n                  : 0;\r\n              let newDeltaB =\r\n                pos >= position\r\n                  ? ethers.utils.parseUnits(\r\n                      amountExpR[\r\n                        i - Math.floor(state.binsToDistribute / 2)\r\n                      ].toString(),\r\n                      state.selectedPoolOptions.tokenB.decimals\r\n                    )\r\n                  : 0;\r\n\r\n              const param = {\r\n                kind: state.poolModeSelected.id,\r\n                pos: pos,\r\n                isDelta: false,\r\n                deltaA: newDeltaA,\r\n                deltaB: newDeltaB,\r\n              };\r\n              liquidityParams.push(param);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      try {\r\n        router\r\n          .addLiquidityToPool(\r\n            state.selectedPoolOptions.id,\r\n            state.userNFT ? state.userNFT : 0,\r\n            liquidityParams,\r\n            0,\r\n            0,\r\n            1e13,\r\n            overrides\r\n          )\r\n          .then((res) => {\r\n            State.update({\r\n              addingLiquidity: true,\r\n            });\r\n            setTimeout(() => {\r\n              State.update({\r\n                step: 1,\r\n                poolSelected: undefined,\r\n                selectedPoolOptions: undefined,\r\n                poolOptions: undefined,\r\n                poolModeSelected: POOLSMODE[0],\r\n                poolDistributionSelected: DISTRIBUTIONMODE[0],\r\n                needMoreAllowanceTA: false,\r\n                needMoreAllowanceTB: false,\r\n                amountInputTokenA: null,\r\n                inputBalanceTokenA: null,\r\n                amountInputTokenB: null,\r\n                inputBalanceTokenB: null,\r\n                binsToDistribute: 3,\r\n                need2Tokens: true,\r\n                addingLiquidity: false,\r\n                onlyRight: false,\r\n                tokenABalance: undefined,\r\n                tokenBBalance: undefined,\r\n                tokenAAllowance: undefined,\r\n                tokenBAllowance: undefined,\r\n                moreTokenAAllowance: undefined,\r\n                moreTokenBAllowance: undefined,\r\n              });\r\n              getUserBalances();\r\n            }, 25000);\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// Method to set pool\r\nconst handlePoolSelect = (data) => {\r\n  const pool = state.poolList.find((p) => p.name === data.target.value);\r\n  asyncFetch(`https://api.mav.xyz/api/v3/pools/324`)\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .then((res) => {\r\n      getPoolOptions(data.target.value, res.body.pools);\r\n    });\r\n  State.update({\r\n    poolSelected: pool,\r\n    selectedPoolOptions: pool,\r\n    tokenABalance: undefined,\r\n    tokenBBalance: undefined,\r\n    tokenAAllowance: undefined,\r\n    tokenBAllowance: undefined,\r\n    moreTokenAAllowance: undefined,\r\n    moreTokenBAllowance: undefined,\r\n  });\r\n};\r\n\r\n// Method to set pool options selected\r\nconst handlePoolOptionsSelect = (data) => {\r\n  const poolOptions = state.poolOptions.find(\r\n    (po) => po.id === data.target.value\r\n  );\r\n  State.update({ selectedPoolOptions: poolOptions });\r\n};\r\n\r\n// Method to set pool mode\r\nconst handlePoolModeSelect = (data) => {\r\n  const mode = POOLSMODE.find((m) => m.name === data.target.value);\r\n  State.update({ poolModeSelected: mode });\r\n};\r\n\r\n// Method to set pool distribution mode\r\nconst handlePoolDistributionSelect = (data) => {\r\n  const mode = DISTRIBUTIONMODE.find((m) => m.name === data.target.value);\r\n  State.update({ poolDistributionSelected: mode });\r\n};\r\n\r\n// Method to get network\r\nconst getNetwork = () => {\r\n  let chainId = 324;\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((res) => {\r\n      if (res.chainId == chainId) {\r\n        State.update({ isZkSync: true });\r\n      } else {\r\n        switchNetwork(324);\r\n      }\r\n    });\r\n};\r\n\r\n// Method to change network\r\nconst switchNetwork = (chainId) => {\r\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\r\n    { chainId: `0x${chainId.toString(16)}` },\r\n  ]);\r\n};\r\n\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    getNetwork();\r\n    state.poolList.length == 0 ? getPools() : \"\";\r\n    state.userNFT ? \"\" : getNFTUser();\r\n    state.userBalances ? \"\" : getUserBalances();\r\n  }\r\n}\r\n\r\n// Method to next step\r\nconst next = () => {\r\n  if (state.step + 1 == 2) {\r\n    if (!(state.tokenABalance || state.tokenBBalance)) {\r\n      setUserBalances();\r\n    }\r\n  } else if (state.step + 1 == 3) {\r\n    if (!(state.tokenAAllowance || state.tokenBAllowance)) {\r\n      getAccountAllowance({\r\n        token: state.selectedPoolOptions.tokenA,\r\n        vAllowance: false,\r\n        mode: \"TA\",\r\n      });\r\n      getAccountAllowance({\r\n        token: state.selectedPoolOptions.tokenB,\r\n        vAllowance: false,\r\n        mode: \"TB\",\r\n      });\r\n    }\r\n  }\r\n  State.update({ step: state.step + 1 });\r\n};\r\n\r\n// Method to back step\r\nconst back = () => {\r\n  if (state.validation) {\r\n    State.update({ validation: undefined });\r\n  }\r\n  State.update({\r\n    step: state.step - 1,\r\n    amountInputTokenA: null,\r\n    amountInputTokenB: null,\r\n    onlyRight: false,\r\n  });\r\n};\r\n\r\n// Method to format number (M and K)\r\nconst formatNumber = (n) => {\r\n  if (n >= 1000000) {\r\n    return \"$\" + (n / 1000000).toFixed(2) + \"m\";\r\n  } else if (n >= 1000) {\r\n    return \"$\" + (n / 1000).toFixed(2) + \"k\";\r\n  } else {\r\n    return \"$\" + n.toFixed(2);\r\n  }\r\n};\r\n\r\n// Method to set max of token A\r\nconst setMaxBalanceTokenA = () => {\r\n  if (state.tokenABalance.fixed > 0) {\r\n    handleInputTokenA(state.tokenABalance.fixed);\r\n  }\r\n};\r\n\r\n// Method to set max of token B\r\nconst setMaxBalanceTokenB = () => {\r\n  if (state.tokenBBalance.fixed > 0) {\r\n    handleInputTokenB(state.tokenBBalance.fixed);\r\n  }\r\n};\r\n\r\n// Method to validate token allowance\r\nconst validateAllowance = (input, mode) => {\r\n  let divider, tokenAllowance;\r\n  if (mode == \"TA\") {\r\n    divider =\r\n      state.selectedPoolOptions.tokenA.decimals == 18\r\n        ? 1000000000000000000\r\n        : 1000000;\r\n    tokenAllowance = state.tokenAAllowance / divider;\r\n    input * 1 > tokenAllowance\r\n      ? State.update({ moreTokenAAllowance: true })\r\n      : State.update({ moreTokenAAllowance: false });\r\n  } else {\r\n    divider =\r\n      state.selectedPoolOptions.tokenB.decimals == 18\r\n        ? 1000000000000000000\r\n        : 1000000;\r\n    tokenAllowance = state.tokenBAllowance / divider;\r\n    input * 1 > tokenAllowance\r\n      ? State.update({ moreTokenBAllowance: true })\r\n      : State.update({ moreTokenBAllowance: false });\r\n  }\r\n};\r\n\r\n// Handle to set token A\r\nconst handleInputTokenA = (input) => {\r\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\r\n    const step1TokenAAmount = Big(state.selectedPoolOptions.price);\r\n    const tickSpacing = Big(state.selectedPoolOptions.tickSpacing);\r\n    const ic = Math.floor(\r\n      Math.log(step1TokenAAmount) / (Math.log(1.0001) * tickSpacing)\r\n    );\r\n    const il = Math.pow(1.0001, ic * tickSpacing);\r\n    const iu = Math.pow(1.0001, (ic + 1) * tickSpacing);\r\n    let deltaX = 0;\r\n    let deltaY = 0;\r\n    let deltaL = 1;\r\n    const difPriceIl = Math.abs(Big(step1TokenAAmount - il));\r\n    const difPriceIu = Math.abs(Big(step1TokenAAmount - iu));\r\n    if (difPriceIl < 0.00000000001) {\r\n      const priceFix = step1TokenAAmount.toFixed(11);\r\n      const ilFix = il.toFixed(11);\r\n      const iuFix = iu.toFixed(11);\r\n      const sqrtPrice = Math.sqrt(priceFix);\r\n      const sqrtIl = Math.sqrt(ilFix);\r\n      const sqrtIu = Math.sqrt(iuFix);\r\n      if (priceFix == ilFix && sqrtIl == sqrtPrice) {\r\n        sqrtIl = sqrtIl + 0.0000000000012;\r\n      }\r\n      deltaY = deltaL * (sqrtIl - sqrtPrice);\r\n      deltaX = deltaL * (1 / sqrtPrice - 1 / sqrtIu);\r\n      console.log(deltaX, deltaY);\r\n    } else {\r\n      if (step1TokenAAmount < il) {\r\n        deltaX = deltaL * (1 / Math.sqrt(il) - 1 / Math.sqrt(iu));\r\n        deltaY = 0;\r\n      }\r\n      if (il <= step1TokenAAmount && step1TokenAAmount < iu) {\r\n        deltaY = deltaL * (Math.sqrt(step1TokenAAmount) - Math.sqrt(il));\r\n        deltaX =\r\n          deltaL * (1 / Math.sqrt(step1TokenAAmount) - 1 / Math.sqrt(iu));\r\n      }\r\n      if (step1TokenAAmount >= iu) {\r\n        deltaX = 0;\r\n        deltaY = Math.sqrt(iu) - Math.sqrt(il);\r\n      }\r\n    }\r\n\r\n    let tokenB = 0;\r\n    if (ic !== 0) {\r\n      tokenB = input * (deltaX / deltaY);\r\n      State.update({\r\n        amountInputTokenB:\r\n          deltaY == 0\r\n            ? 0\r\n            : tokenB.toFixed(\r\n                state.poolSelected.tokenB.decimals == 18\r\n                  ? 11\r\n                  : state.poolSelected.tokenB.decimals\r\n              ),\r\n        amountInputTokenA: input,\r\n        validation: undefined,\r\n        onlyRight: false,\r\n        noBalanceA:\r\n          parseFloat(state.tokenABalance.fixed) < parseFloat(input)\r\n            ? true\r\n            : false,\r\n        noBalanceB:\r\n          parseFloat(state.tokenBBalance.fixed) < tokenB ? true : false,\r\n      });\r\n    } else {\r\n      if (state.poolDistributionSelected.name == \"Flat\") {\r\n        const binsL = Math.floor(state.binsToDistribute / 2);\r\n        const binsR = Math.ceil(state.binsToDistribute / 2);\r\n        tokenB = (input / binsL) * binsR;\r\n        State.update({\r\n          amountInputTokenB: tokenB.toFixed(\r\n            state.poolSelected.tokenB.decimals == 18\r\n              ? 11\r\n              : state.poolSelected.tokenB.decimals\r\n          ),\r\n          amountInputTokenA: input,\r\n          validation: undefined,\r\n          onlyRight: true,\r\n          noBalanceA:\r\n            parseFloat(state.tokenABalance.fixed) < parseFloat(input)\r\n              ? true\r\n              : false,\r\n          noBalanceB:\r\n            parseFloat(state.tokenBBalance.fixed) < tokenB ? true : false,\r\n        });\r\n      }\r\n      if (state.poolDistributionSelected.name == \"Exponential\") {\r\n        const binsL = Math.floor(state.binsToDistribute / 2);\r\n\r\n        const lambdas = [0.1];\r\n        for (let i = 1; i < binsL; i++) {\r\n          const lambda = 0.1 + i / 2;\r\n          lambdas.push(lambda);\r\n        }\r\n\r\n        const sumExp = lambdas.reduce(\r\n          (acc, lambda) => acc + Math.exp(lambda),\r\n          0\r\n        );\r\n\r\n        const nextLambda =\r\n          lambdas.length > 0 ? lambdas[lambdas.length - 1] + 0.5 : 0.1;\r\n        const nextValue = (input / sumExp) * Math.exp(nextLambda);\r\n\r\n        let amountExpA = lambdas\r\n          .map((lambda) => (input / sumExp) * Math.exp(lambda))\r\n          .reverse();\r\n\r\n        amountExpA.reverse().push(nextValue);\r\n        amountExpA.reverse();\r\n\r\n        let amountExpB = [].concat(amountExpA.reverse());\r\n        tokenB = amountExpB.reduce((a, b) => a + b, 0);\r\n\r\n        State.update({\r\n          amountInputTokenA: input,\r\n          amountInputTokenB: tokenB.toFixed(\r\n            state.poolSelected.tokenB.decimals == 18\r\n              ? 11\r\n              : state.poolSelected.tokenB.decimals\r\n          ),\r\n          onlyRight: true,\r\n          noBalanceA:\r\n            parseFloat(state.tokenABalance.fixed) < parseFloat(input)\r\n              ? true\r\n              : false,\r\n          noBalanceB:\r\n            parseFloat(state.tokenBBalance.fixed) < tokenB ? true : false,\r\n        });\r\n      }\r\n      if (state.poolDistributionSelected.name == \"Single Bin\") {\r\n        State.update({\r\n          amountInputTokenA: 0,\r\n          validation: undefined,\r\n          need2Tokens: false,\r\n        });\r\n      }\r\n    }\r\n  } else {\r\n    State.update({\r\n      amountInputTokenA: input,\r\n      noBalanceA:\r\n        parseFloat(state.tokenABalance.fixed) < parseFloat(input)\r\n          ? true\r\n          : false,\r\n    });\r\n  }\r\n};\r\n\r\n// Handle to set token B\r\nconst handleInputTokenB = (input) => {\r\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\r\n    const step1TokenAAmount = Big(state.selectedPoolOptions.price);\r\n    const tickSpacing = Big(state.selectedPoolOptions.tickSpacing);\r\n    const ic = Math.floor(\r\n      Math.log(step1TokenAAmount) / (Math.log(1.0001) * tickSpacing)\r\n    );\r\n    const il = Math.pow(1.0001, ic * tickSpacing);\r\n    const iu = Math.pow(1.0001, (ic + 1) * tickSpacing);\r\n    let deltaX = 0;\r\n    let deltaY = 0;\r\n    let deltaL = 1;\r\n    const difPriceIl = Math.abs(Big(step1TokenAAmount - il));\r\n    const difPriceIu = Math.abs(Big(step1TokenAAmount - iu));\r\n    if (difPriceIl < 0.00000000001 || difPriceIu < 0.00000000001) {\r\n      const priceFix = step1TokenAAmount.toFixed(11);\r\n      const ilFix = il.toFixed(11);\r\n      const iuFix = iu.toFixed(11);\r\n      const sqrtPrice = Math.sqrt(priceFix);\r\n      const sqrtIl = Math.sqrt(ilFix);\r\n      const sqrtIu = Math.sqrt(iuFix);\r\n      if (priceFix == ilFix && sqrtIl == sqrtPrice) {\r\n        sqrtIl = sqrtIl + 0.00012;\r\n      }\r\n      if (priceFix == iuFix && sqrtIu == sqrtPrice) {\r\n        sqrtIu = sqrtIu + 0.000000012;\r\n      }\r\n      deltaY = deltaL * (sqrtIl - sqrtPrice);\r\n      deltaX = deltaL * (1 / sqrtPrice - 1 / sqrtIu);\r\n    } else {\r\n      if (step1TokenAAmount < il) {\r\n        deltaX = deltaL * (1 / Math.sqrt(il) - 1 / Math.sqrt(iu));\r\n        deltaY = 0;\r\n      }\r\n      if (il <= step1TokenAAmount && step1TokenAAmount < iu) {\r\n        deltaY = deltaL * (Math.sqrt(step1TokenAAmount) - Math.sqrt(il));\r\n        deltaX =\r\n          deltaL * (1 / Math.sqrt(step1TokenAAmount) - 1 / Math.sqrt(iu));\r\n      }\r\n      if (step1TokenAAmount >= iu) {\r\n        deltaX = 0;\r\n        deltaY = Math.sqrt(iu) - Math.sqrt(il);\r\n      }\r\n    }\r\n\r\n    let tokenA = 0;\r\n    if (ic !== 0) {\r\n      tokenA = (input / deltaX) * deltaY;\r\n      State.update({\r\n        amountInputTokenA:\r\n          deltaY == 0\r\n            ? 0\r\n            : tokenA.toFixed(\r\n                state.poolSelected.tokenA.decimals == 18\r\n                  ? 11\r\n                  : state.poolSelected.tokenA.decimals\r\n              ),\r\n        amountInputTokenB: input,\r\n        validation: undefined,\r\n        onlyRight: false,\r\n        noBalanceA:\r\n          parseFloat(state.tokenABalance.fixed) < tokenA ? true : false,\r\n        noBalanceB:\r\n          parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\r\n            ? true\r\n            : false,\r\n      });\r\n    } else {\r\n      if (state.poolDistributionSelected.name == \"Flat\") {\r\n        const binsL = Math.floor(state.binsToDistribute / 2);\r\n        const binsR = Math.ceil(state.binsToDistribute / 2);\r\n        tokenA = (input / binsR) * binsL;\r\n        State.update({\r\n          amountInputTokenB: input,\r\n          amountInputTokenA: tokenA.toFixed(\r\n            state.poolSelected.tokenA.decimals == 18\r\n              ? 11\r\n              : state.poolSelected.tokenA.decimals\r\n          ),\r\n          validation: undefined,\r\n          onlyRight: true,\r\n          noBalanceA:\r\n            parseFloat(state.tokenABalance.fixed) < tokenA ? true : false,\r\n          noBalanceB:\r\n            parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\r\n              ? true\r\n              : false,\r\n        });\r\n      }\r\n      if (state.poolDistributionSelected.name == \"Exponential\") {\r\n        const binsR = Math.ceil(state.binsToDistribute / 2);\r\n\r\n        const lambdas = [0.1];\r\n        for (let i = 1; i < binsR; i++) {\r\n          const lambda = 0.1 + i / 2;\r\n          lambdas.push(lambda);\r\n        }\r\n\r\n        const sumExp = lambdas.reduce(\r\n          (acc, lambda) => acc + Math.exp(lambda),\r\n          0\r\n        );\r\n\r\n        const amountExpB = lambdas\r\n          .map((lambda) => (input / sumExp) * Math.exp(lambda))\r\n          .reverse();\r\n\r\n        let amountExpA = [].concat(amountExpB.reverse());\r\n        amountExpA.pop();\r\n        tokenA = amountExpA.reduce((a, b) => a + b, 0);\r\n\r\n        State.update({\r\n          amountInputTokenB: input,\r\n          amountInputTokenA: tokenA.toFixed(\r\n            state.poolSelected.tokenA.decimals == 18\r\n              ? 11\r\n              : state.poolSelected.tokenA.decimals\r\n          ),\r\n          onlyRight: true,\r\n          noBalanceA:\r\n            parseFloat(state.tokenABalance.fixed) < tokenA ? true : false,\r\n          noBalanceB:\r\n            parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\r\n              ? true\r\n              : false,\r\n        });\r\n      }\r\n      if (state.poolDistributionSelected.name == \"Single Bin\") {\r\n        State.update({\r\n          amountInputTokenA: 0,\r\n          need2Tokens: false,\r\n          amountInputTokenB: input,\r\n          validation: undefined,\r\n          noBalanceB:\r\n            parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\r\n              ? true\r\n              : false,\r\n        });\r\n      }\r\n    }\r\n  } else {\r\n    State.update({\r\n      amountInputTokenB: input,\r\n      noBalanceB:\r\n        parseFloat(state.tokenBBalance.fixed) < parseFloat(input)\r\n          ? true\r\n          : false,\r\n    });\r\n  }\r\n};\r\n\r\n// Method to validate data\r\nconst validateConfirm = () => {\r\n  let bins = state.binsToDistribute;\r\n  if (bins % 2 !== 1) {\r\n    bins++;\r\n    State.update({ binsToDistribute: bins });\r\n  }\r\n\r\n  if (state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3) {\r\n    validateAllowance(state.amountInputTokenA, \"TA\");\r\n    validateAllowance(state.amountInputTokenB, \"TB\");\r\n    State.update({ validation: true });\r\n  } else if (state.poolModeSelected.id == 1) {\r\n    validateAllowance(state.amountInputTokenA, \"TA\");\r\n    State.update({ validation: true });\r\n  } else if (state.poolModeSelected.id == 2) {\r\n    validateAllowance(state.amountInputTokenB, \"TB\");\r\n    State.update({ validation: true });\r\n  }\r\n};\r\n\r\n// Method to approve ERC20 token\r\nconst approveErc20Token = (mode) => {\r\n  asyncFetch(\r\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\r\n  ).then((res) => {\r\n    let value, token;\r\n\r\n    if (mode == \"TA\") {\r\n      value = floatToFixed(\r\n        state.tokenABalance.fixed,\r\n        state.poolSelected.tokenA.decimals\r\n      );\r\n      token = state.poolSelected.tokenA;\r\n    } else {\r\n      value = floatToFixed(\r\n        state.tokenBBalance.fixed,\r\n        state.poolSelected.tokenB.decimals\r\n      );\r\n      token = state.poolSelected.tokenB;\r\n    }\r\n\r\n    const approveContract = new ethers.Contract(\r\n      token.address,\r\n      res.body,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    if (gweiPrice !== undefined && gasLimit !== undefined) {\r\n      gasArgs.gasPrice = ethers.utils.parseUnits(gweiPrice ?? \"0.26\", \"gwei\");\r\n      gasArgs.gasLimit = gasLimit ?? 20000000;\r\n    }\r\n\r\n    approveContract\r\n      .approve(state.routerContract, value)\r\n      .then((transactionHash) => {\r\n        State.update({ onApprovingToken: true });\r\n        setTimeout(() => {\r\n          getAccountAllowance({\r\n            token:\r\n              mode == \"TA\"\r\n                ? state.selectedPoolOptions.tokenA\r\n                : state.selectedPoolOptions.tokenB,\r\n            vAllowance: false,\r\n            mode: mode,\r\n          });\r\n          State.update({ onApprovingToken: false, validation: undefined });\r\n        }, 20000);\r\n      });\r\n  });\r\n};\r\n\r\n// Method to change bins number to distribute liquidity\r\nconst changeBinsToDistribute = (nb) => {\r\n  State.update({\r\n    binsToDistribute: nb,\r\n    validation: false,\r\n    amountInputTokenA: 0,\r\n    amountInputTokenB: 0,\r\n  });\r\n};\r\n\r\n// The next section contains the validation buttons //\r\nconst confirmButton = (\r\n  <div class=\"ConfirmButton\" onClick={addLiquidity}>\r\n    <div class={\"ConfirmText\"}>Confirm</div>\r\n  </div>\r\n);\r\n\r\nconst validateButton = (\r\n  <div class=\"validateButton\" onClick={validateConfirm}>\r\n    <div class={\"ConfirmText\"}>Validate</div>\r\n  </div>\r\n);\r\n\r\nconst validateButtonDisabled = (\r\n  <div class=\"validateButtonDisabled\" disabled>\r\n    <div class={\"ConfirmText\"}>\r\n      {state.poolModeSelected.id == 0 || state.poolModeSelected.id == 3\r\n        ? state.tokenABalance && state.tokenBBalance\r\n          ? \"Validate\"\r\n          : `You don't have enough balance`\r\n        : state.poolModeSelected.id == 1\r\n        ? state.tokenABalance\r\n          ? \"Validate\"\r\n          : `You don't have enough balance on ${\r\n              state.selectedPoolOptions.tokenA.symbol == \"ETH\"\r\n                ? \"WETH\"\r\n                : state.selectedPoolOptions.tokenA.symbol\r\n            }`\r\n        : state.tokenBBalance\r\n        ? \"Validate\"\r\n        : `You don't have enough balance on ${\r\n            state.selectedPoolOptions.tokenB.symbol == \"ETH\"\r\n              ? \"WETH\"\r\n              : state.selectedPoolOptions.tokenB.symbol\r\n          }`}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst confirmButtonDisabled = (\r\n  <div class=\"confirmButtonDisabled\" disabled>\r\n    <div class={\"ConfirmText\"}>Adding Liquidity...</div>\r\n  </div>\r\n);\r\n\r\nconst allowanceButton = (mode) => {\r\n  return (\r\n    <div class=\"allowanceButton\" onClick={() => approveErc20Token(mode)}>\r\n      <div class={\"ConfirmText\"}>\r\n        {mode == \"TA\"\r\n          ? \"Add more allowance on \" + state.poolSelected.tokenA.symbol == \"ETH\"\r\n            ? \"WETH\"\r\n            : state.poolSelected.tokenA.symbol\r\n          : \"Add more allowance on \" + state.poolSelected.tokenB.symbol == \"ETH\"\r\n          ? \"WETH\"\r\n          : state.poolSelected.tokenB.symbol}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst insufficientBalanceButton = (mode) => {\r\n  return (\r\n    <div class=\"allowanceButtonDisabled\" disabled>\r\n      <div class={\"ConfirmText\"}>\r\n        {mode == \"TA\"\r\n          ? \"Insufficient balance on \" + state.poolSelected.tokenA.symbol ==\r\n            \"ETH\"\r\n            ? \"WETH\"\r\n            : state.poolSelected.tokenA.symbol\r\n          : \"Insufficient balance on \" + state.poolSelected.tokenB.symbol ==\r\n            \"ETH\"\r\n          ? \"WETH\"\r\n          : state.poolSelected.tokenB.symbol}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst allowanceButtonDisabled = () => {\r\n  return (\r\n    <div class=\"allowanceButtonDisabled\" disabled>\r\n      <div class={\"ConfirmText\"}>\r\n        {state.moreTokenAAllowance\r\n          ? \"Approving \" + state.poolSelected.tokenA.symbol == \"ETH\"\r\n            ? \"WETH\"\r\n            : state.poolSelected.tokenA.symbol\r\n          : \"Approving \" + state.poolSelected.tokenB.symbol == \"ETH\"\r\n          ? \"WETH\"\r\n          : state.poolSelected.tokenB.symbol}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Get css file\r\nconst css = fetch(\r\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/addLiquidity.css\"\r\n).body;\r\n\r\nif (!css) return \"\";\r\n\r\nif (!state.theme) {\r\n  State.update({\r\n    theme: styled.div`\r\n          ${css}\r\n      `,\r\n  });\r\n}\r\n\r\nconst Theme = state.theme;\r\nreturn (\r\n  <Theme>\r\n    <div class=\"text-center mt-1\">\r\n      <div class=\"MainContainer\">\r\n        <div class=\"ProtocolContainer\">\r\n          <div class=\"ProtocolNetworkContainet\">\r\n            <div class=\"ProtocolNetworkTextSection\">\r\n              <div class=\"ProtocolText\">PROTOCOL</div>\r\n            </div>\r\n            <div class=\"ProtocolNetworkSection\">\r\n              <div class=\"ProtocolNetworkContainer\">\r\n                <img\r\n                  class=\"ProtocolImg\"\r\n                  src=\"https://etherscan.io/token/images/maverick_32.png\"\r\n                />\r\n                <div class=\"NetworkText\">Maverick</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {state.isZkSync ? (\r\n          <>\r\n            <div class=\"row\" style={{ color: \"white\", width: \"100%\" }}>\r\n              <div\r\n                class=\"col-4\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"end\",\r\n                }}\r\n              >\r\n                <div\r\n                  class=\"step\"\r\n                  style={{\r\n                    background:\r\n                      state.step >= 1 ? \"#6400FF\" : \"rgba(255, 255, 255, 0.1)\",\r\n                  }}\r\n                >\r\n                  {state.step <= 1 ? (\r\n                    1\r\n                  ) : (\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"20\"\r\n                      height=\"20\"\r\n                      viewBox=\"0 0 20 20\"\r\n                      fill=\"none\"\r\n                    >\r\n                      <path\r\n                        d=\"M1.25 9.375L7.875 16L18.125 4.5\"\r\n                        stroke=\"#FFFFFF\"\r\n                        stroke-width=\"2\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      />\r\n                    </svg>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div class=\"col-1\">-</div>\r\n              <div\r\n                class=\"col-2\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <div\r\n                  class=\"step\"\r\n                  style={{\r\n                    background:\r\n                      state.step >= 2 ? \"#6400FF\" : \"rgba(255, 255, 255, 0.1)\",\r\n                  }}\r\n                >\r\n                  {state.step <= 2 ? (\r\n                    2\r\n                  ) : (\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"20\"\r\n                      height=\"20\"\r\n                      viewBox=\"0 0 20 20\"\r\n                      fill=\"none\"\r\n                    >\r\n                      <path\r\n                        d=\"M1.25 9.375L7.875 16L18.125 4.5\"\r\n                        stroke=\"#FFFFFF\"\r\n                        stroke-width=\"2\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      />\r\n                    </svg>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div class=\"col-1\">-</div>\r\n              <div\r\n                class=\"col-4\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"start\",\r\n                }}\r\n              >\r\n                <div\r\n                  class=\"step\"\r\n                  style={{\r\n                    background:\r\n                      state.step >= 3 ? \"#6400FF\" : \"rgba(255, 255, 255, 0.1)\",\r\n                  }}\r\n                >\r\n                  {state.step <= 3 ? (\r\n                    3\r\n                  ) : (\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"20\"\r\n                      height=\"20\"\r\n                      viewBox=\"0 0 20 20\"\r\n                      fill=\"none\"\r\n                    >\r\n                      <path\r\n                        d=\"M1.25 9.375L7.875 16L18.125 4.5\"\r\n                        stroke=\"#FFFFFF\"\r\n                        stroke-width=\"2\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      />\r\n                    </svg>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {state.step == 1 && state.poolList.length == 0 && (\r\n              <div class=\"titleStep\">Loading data...</div>\r\n            )}\r\n            {state.step == 1 && state.poolList.length > 0 && (\r\n              <div>\r\n                <div class=\"titleStep\">Select Pool</div>\r\n                <br />\r\n                <div\r\n                  class=\"SelectPoolContainer\"\r\n                  style={{ margin: \"auto\", width: \"300px\" }}\r\n                >\r\n                  <div class=\"TokenSection\">\r\n                    {state.poolSelected ? (\r\n                      <img\r\n                        class=\"TokenImg\"\r\n                        src={\r\n                          state.poolSelected.tokenA.symbol == \"ETH\"\r\n                            ? \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/weth.png\"\r\n                            : state.poolSelected.tokenA.logoURI\r\n                        }\r\n                      />\r\n                    ) : null}\r\n                    {state.poolSelected ? (\r\n                      <img\r\n                        class=\"TokenImg\"\r\n                        src={\r\n                          state.poolSelected.tokenB.symbol == \"ETH\"\r\n                            ? \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/weth.png\"\r\n                            : state.poolSelected.tokenB.logoURI\r\n                        }\r\n                      />\r\n                    ) : null}\r\n                    <div class=\"TokenNameSection\">\r\n                      <div class=\"TokenAction\">Pool {\"->\"}</div>\r\n                      <select\r\n                        class=\"TokenNameSelect\"\r\n                        value={\r\n                          state.poolSelected\r\n                            ? state.poolSelected.name\r\n                            : \"default\"\r\n                        }\r\n                        onChange={handlePoolSelect}\r\n                      >\r\n                        <option value=\"default\" disabled={state.poolSelected}>\r\n                          Select Pool\r\n                        </option>\r\n                        {state.poolList.map((p) => {\r\n                          return (\r\n                            <option value={p.name}>\r\n                              {(p.tokenA.symbol == \"ETH\"\r\n                                ? \"WETH\"\r\n                                : p.tokenA.symbol) +\r\n                                \"-\" +\r\n                                (p.tokenB.symbol == \"ETH\"\r\n                                  ? \"WETH\"\r\n                                  : p.tokenB.symbol)}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <br />\r\n                <div class=\"LineContainer\">\r\n                  <div class=\"Line\" />\r\n                </div>\r\n                <div class=\"titleStep\">Select Pool Options</div>\r\n                <br />\r\n                <div\r\n                  class=\"SelectPoolOptions\"\r\n                  style={{ margin: \"auto\", width: \"460px\", height: \"111px\" }}\r\n                >\r\n                  <div class=\"row\">\r\n                    <div class=\"col-7\">\r\n                      <div class=\"TokenNameSection\">\r\n                        <div class=\"selectedFeeWidth\">\r\n                          <div\r\n                            style={{\r\n                              width: \"100%\",\r\n                              display: \"flex\",\r\n                              justifyContent: \"start\",\r\n                            }}\r\n                          >\r\n                            {state.selectedPoolOptions && (\r\n                              <span class=\"FeeWidth\">\r\n                                {getFeeWidthFormat(\r\n                                  state.selectedPoolOptions.fee\r\n                                ) + \" Fee\"}\r\n                              </span>\r\n                            )}\r\n                            {state.selectedPoolOptions && (\r\n                              <span class=\"FeeWidth\">\r\n                                {getFeeWidthFormat(\r\n                                  state.selectedPoolOptions.width\r\n                                ) + \" Width\"}\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"end\",\r\n                            }}\r\n                          >\r\n                            <span\r\n                              class=\"EditButton\"\r\n                              onClick={() => showPoolOptionsModal()}\r\n                            >\r\n                              Edit\r\n                            </span>\r\n                            {state.showSelectPoolOptionModal && (\r\n                              <Widget\r\n                                props={{\r\n                                  poolOptions: state.poolOptions,\r\n                                  poolOptionsSelected:\r\n                                    state.selectedPoolOptions,\r\n                                  setPoolOption,\r\n                                  closeModal,\r\n                                }}\r\n                                src={\r\n                                  \"owa-is-bos.near/widget/Maverick-LP-OptionsModal\"\r\n                                }\r\n                              />\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-5\">\r\n                      <div class=\"row\" style={{ color: \"white\" }}>\r\n                        <div class=\"col-6 PoolOptionDetails\">\r\n                          {state.selectedPoolOptions\r\n                            ? (state.selectedPoolOptions.tokenA.symbol == \"ETH\"\r\n                                ? \"WETH\"\r\n                                : state.selectedPoolOptions.tokenA.symbol) +\r\n                              \" Balance\"\r\n                            : \"\"}\r\n                        </div>\r\n                        <div class=\"col-6 PoolOptionDetails\">\r\n                          {state.selectedPoolOptions\r\n                            ? (state.selectedPoolOptions.tokenB.symbol == \"ETH\"\r\n                                ? \"WETH\"\r\n                                : state.selectedPoolOptions.tokenB.symbol) +\r\n                              \" Balance\"\r\n                            : \"\"}\r\n                        </div>\r\n                        <div class=\"col-6\" style={{ fontSize: \"12px\" }}>\r\n                          {state.selectedPoolOptions\r\n                            ? formatNumberBalanceToken(\r\n                                state.selectedPoolOptions.tokenABalance\r\n                              )\r\n                            : \"\"}\r\n                        </div>\r\n                        <div class=\"col-6\" style={{ fontSize: \"12px\" }}>\r\n                          {state.selectedPoolOptions\r\n                            ? formatNumberBalanceToken(\r\n                                state.selectedPoolOptions.tokenBBalance\r\n                              )\r\n                            : \"\"}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                      <div class=\"row\" style={{ color: \"white\" }}>\r\n                        <div class=\"col-4 PoolOptionDetails\">TVL</div>\r\n                        <div class=\"col-4 PoolOptionDetails\">Vol. 24h</div>\r\n                        <div class=\"col-4 PoolOptionDetails\">Fees 24h</div>\r\n                        <div class=\"col-4\" style={{ fontSize: \"10px\" }}>\r\n                          {state.selectedPoolOptions\r\n                            ? formatNumber(state.selectedPoolOptions.tvl.amount)\r\n                            : \"\"}\r\n                        </div>\r\n                        <div class=\"col-4\" style={{ fontSize: \"10px\" }}>\r\n                          {state.selectedPoolOptions\r\n                            ? formatNumber(\r\n                                state.selectedPoolOptions.volume.amount\r\n                              )\r\n                            : \"\"}\r\n                        </div>\r\n                        <div class=\"col-4\" style={{ fontSize: \"10px\" }}>\r\n                          {state.selectedPoolOptions\r\n                            ? formatNumber(state.selectedPoolOptions.feeVolume)\r\n                            : \"\"}\r\n                        </div>\r\n                        <div class=\"col-4\" style={{ fontSize: \"10px\" }}>\r\n                          {state.selectedPoolOptions ? (\r\n                            <span\r\n                              style={{\r\n                                color:\r\n                                  state.selectedPoolOptions.tvlChange < 0\r\n                                    ? \"rgba(255, 255, 255, 0.5)\"\r\n                                    : \"rgb(38, 189, 0)\",\r\n                              }}\r\n                            >\r\n                              {state.selectedPoolOptions.tvlChange < 0\r\n                                ? \"\u2193\"\r\n                                : state.selectedPoolOptions.tvlChange == 0\r\n                                ? \"\"\r\n                                : \"\u2191\"}\r\n                              {formatAPR(state.selectedPoolOptions.tvlChange)}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n                        <div class=\"col-4\" style={{ fontSize: \"10px\" }}>\r\n                          {state.selectedPoolOptions ? (\r\n                            <span\r\n                              style={{\r\n                                color:\r\n                                  state.selectedPoolOptions.volumeChange < 0\r\n                                    ? \"rgba(255, 255, 255, 0.5)\"\r\n                                    : \"rgb(38, 189, 0)\",\r\n                              }}\r\n                            >\r\n                              {state.selectedPoolOptions.volumeChange < 0\r\n                                ? \"\u2193\"\r\n                                : state.selectedPoolOptions.volumeChange == 0\r\n                                ? \"\"\r\n                                : \"\u2191\"}\r\n                              {formatAPR(\r\n                                state.selectedPoolOptions.volumeChange\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n                        <div class=\"col-4\" style={{ fontSize: \"10px\" }}>\r\n                          {state.selectedPoolOptions ? (\r\n                            <span\r\n                              style={{\r\n                                color:\r\n                                  state.selectedPoolOptions.feeChange < 0\r\n                                    ? \"rgba(255, 255, 255, 0.5)\"\r\n                                    : \"rgb(38, 189, 0)\",\r\n                              }}\r\n                            >\r\n                              {state.selectedPoolOptions.feeChange < 0\r\n                                ? \"\u2193\"\r\n                                : state.selectedPoolOptions.feeChange == 0\r\n                                ? \"\"\r\n                                : \"\u2191\"}\r\n                              {formatAPR(state.selectedPoolOptions.feeChange)}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {state.step == 2 && (\r\n              <div>\r\n                <div class=\"titleStep\">Select Mode</div>\r\n                <br />\r\n                <div class=\"SelectModeContainer\">\r\n                  <div\r\n                    class=\"row\"\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"100px\",\r\n                      display: \"flex\",\r\n                      margin: \"0\",\r\n                    }}\r\n                  >\r\n                    <div class=\"col-6\">\r\n                      <p\r\n                        style={{\r\n                          textAlign: \"justify\",\r\n                          color: \"white\",\r\n                          fontSize: \"13px\",\r\n                        }}\r\n                      >\r\n                        {state.poolModeSelected.description}\r\n                      </p>\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                      <div class=\"SelectModeSelect\">\r\n                        <div class=\"TokenSection\">\r\n                          <div class=\"TokenNameSection\">\r\n                            <div class=\"TokenAction\">Pool Mode {\"->\"}</div>\r\n                            <select\r\n                              class=\"TokenNameSelect\"\r\n                              value={\r\n                                state.poolModeSelected\r\n                                  ? state.poolModeSelected.name\r\n                                  : \"default\"\r\n                              }\r\n                              onChange={handlePoolModeSelect}\r\n                            >\r\n                              <option\r\n                                value=\"default\"\r\n                                disabled={state.poolModeSelected}\r\n                              >\r\n                                Select Mode\r\n                              </option>\r\n                              {POOLSMODE.map((m) => {\r\n                                return <option>{m.name}</option>;\r\n                              })}\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div style={{ overflow: \"hidden\" }}>\r\n                  {state.poolModeSelected && (\r\n                    <img\r\n                      src={state.poolModeSelected.img}\r\n                      class=\"PoolModeImg\"\r\n                    ></img>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {state.step == 3 && (\r\n              <div style={{ height: \"314px\" }}>\r\n                {state.poolModeSelected.name == \"Mode Static\" && (\r\n                  <>\r\n                    <div class=\"titleStep\">Select Distribution</div>\r\n                    <br />\r\n                    <div class=\"RequiredAssetsContainer\">\r\n                      <div class=\"row SelectDistributionContainer\">\r\n                        <div\r\n                          class=\"col-6\"\r\n                          style={{ display: \"flex\", justifyContent: \"end\" }}\r\n                        >\r\n                          <div class=\"SelectDistributionMode\">\r\n                            <div class=\"TokenSection\">\r\n                              <div class=\"TokenNameSection\">\r\n                                <div class=\"TokenAction\">\r\n                                  Distribution mode {\"->\"}\r\n                                </div>\r\n                                <select\r\n                                  class=\"TokenNameSelect\"\r\n                                  value={\r\n                                    state.poolDistributionSelected\r\n                                      ? state.poolDistributionSelected.name\r\n                                      : \"default\"\r\n                                  }\r\n                                  onChange={handlePoolDistributionSelect}\r\n                                >\r\n                                  <option\r\n                                    value=\"default\"\r\n                                    disabled={state.poolModeSelected}\r\n                                  >\r\n                                    Select Distribution\r\n                                  </option>\r\n                                  {DISTRIBUTIONMODE.map((m) => {\r\n                                    return <option>{m.name}</option>;\r\n                                  })}\r\n                                </select>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-6\">\r\n                          {(state.poolDistributionSelected.name ==\r\n                            \"Exponential\" ||\r\n                            state.poolDistributionSelected.name == \"Flat\") && (\r\n                            <div class=\"SelectDistributionMode\">\r\n                              <div class=\"TokenSection\">\r\n                                <div class=\"TokenNameSection\">\r\n                                  <div class=\"TokenAction\">\r\n                                    Bins number (must be odd) {\"->\"}\r\n                                  </div>\r\n                                  <input\r\n                                    class=\"TokenAmountInput\"\r\n                                    type=\"number\"\r\n                                    placeholder=\"0\"\r\n                                    inputmode=\"decimal\"\r\n                                    min=\"3\"\r\n                                    step=\"2\"\r\n                                    value={state.binsToDistribute}\r\n                                    pattern=\"^[0-9]*[.]?[0-9]*$\"\r\n                                    onkeydown=\"return false\"\r\n                                    onChange={(e) =>\r\n                                      changeBinsToDistribute(e.target.value)\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                )}\r\n                <div class=\"titleStep\">Required Assets</div>\r\n                <br class=\"br-div\" />\r\n                <div\r\n                  class=\"TokenABContainer\"\r\n                  style={{\r\n                    filter:\r\n                      state.poolModeSelected.name == \"Mode Left\"\r\n                        ? \"blur(3px)\"\r\n                        : \"\",\r\n                  }}\r\n                >\r\n                  <div class=\"TokenSection\">\r\n                    {state.poolSelected ? (\r\n                      <img\r\n                        class=\"TokenImg\"\r\n                        src={\r\n                          state.poolSelected.tokenA.symbol == \"ETH\"\r\n                            ? \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/weth.png\"\r\n                            : state.poolSelected.tokenA.logoURI\r\n                        }\r\n                      />\r\n                    ) : null}\r\n                    <div class=\"TokenNameSection\" style={{ color: \"white\" }}>\r\n                      <div class=\"TokenAction\">Token A {\"->\"}</div>\r\n                      {state.poolSelected.tokenA.symbol == \"ETH\"\r\n                        ? \"WETH\"\r\n                        : state.poolSelected.tokenA.symbol}\r\n                    </div>\r\n                  </div>\r\n                  {state.poolModeSelected.name == \"Mode Left\" ? null : (\r\n                    <div class=\"TokenAmountSection\">\r\n                      <input\r\n                        class=\"TokenAmountInput\"\r\n                        type=\"number\"\r\n                        placeholder=\"0\"\r\n                        inputmode=\"decimal\"\r\n                        min=\"0\"\r\n                        pattern=\"^[0-9]*[.]?[0-9]*$\"\r\n                        value={state.amountInputTokenA}\r\n                        onChange={(e) => handleInputTokenA(e.target.value)}\r\n                      />\r\n                      <div class=\"TokenAmountPreview\">\r\n                        {state.tokenABalance != null ? (\r\n                          state.tokenABalance.fixed &&\r\n                          state.tokenABalance.fixed > 0 ? (\r\n                            <span>\r\n                              Balance: {state.tokenABalance.fixed}\r\n                              <span\r\n                                class=\"UserBalance\"\r\n                                onClick={async () => {\r\n                                  setMaxBalanceTokenA();\r\n                                }}\r\n                              >\r\n                                MAX\r\n                              </span>\r\n                            </span>\r\n                          ) : (\r\n                            \"Balance: 0\"\r\n                          )\r\n                        ) : (\r\n                          \"Balance: 0\"\r\n                        )}\r\n                      </div>\r\n                      {false ? (\r\n                        <div class=\"TokenInsufficientBalance\">\r\n                          Insufficient Balance\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <br class=\"br-div\" />\r\n                <div\r\n                  class=\"TokenABContainer\"\r\n                  style={{\r\n                    filter:\r\n                      state.poolModeSelected.name == \"Mode Right\"\r\n                        ? \"blur(3px)\"\r\n                        : \"\",\r\n                  }}\r\n                >\r\n                  <div class=\"TokenSection\">\r\n                    {state.poolSelected ? (\r\n                      <img\r\n                        class=\"TokenImg\"\r\n                        src={\r\n                          state.poolSelected.tokenB.symbol == \"ETH\"\r\n                            ? \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/weth.png\"\r\n                            : state.poolSelected.tokenB.logoURI\r\n                        }\r\n                      />\r\n                    ) : null}\r\n                    <div class=\"TokenNameSection\" style={{ color: \"white\" }}>\r\n                      <div class=\"TokenAction\">Token B {\"->\"}</div>\r\n                      {state.poolSelected.tokenB.symbol == \"ETH\"\r\n                        ? \"WETH\"\r\n                        : state.poolSelected.tokenB.symbol}\r\n                    </div>\r\n                  </div>\r\n                  {state.poolModeSelected.name != \"Mode Right\" && (\r\n                    <div class=\"TokenAmountSection\">\r\n                      <input\r\n                        class=\"TokenAmountInput\"\r\n                        type=\"number\"\r\n                        placeholder=\"0\"\r\n                        inputmode=\"decimal\"\r\n                        min=\"0\"\r\n                        pattern=\"^[0-9]*[.]?[0-9]*$\"\r\n                        value={state.amountInputTokenB}\r\n                        onChange={(e) => handleInputTokenB(e.target.value)}\r\n                      />\r\n                      <div class=\"TokenAmountPreview\">\r\n                        {state.tokenBBalance != null ? (\r\n                          state.tokenBBalance.fixed &&\r\n                          state.tokenBBalance.fixed > 0 ? (\r\n                            <span>\r\n                              Balance: {state.tokenBBalance.fixed}\r\n                              <span\r\n                                class=\"UserBalance\"\r\n                                onClick={async () => {\r\n                                  setMaxBalanceTokenB();\r\n                                }}\r\n                              >\r\n                                MAX\r\n                              </span>\r\n                            </span>\r\n                          ) : (\r\n                            \"Balance: 0\"\r\n                          )\r\n                        ) : (\r\n                          \"Balance: 0\"\r\n                        )}\r\n                      </div>\r\n                      {false ? (\r\n                        <div class=\"TokenInsufficientBalance\">\r\n                          Insufficient Balance\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div class=\"row\" style={{ marginInline: \"0px\", width: \"100%\" }}>\r\n              <div\r\n                class=\"col-6\"\r\n                style={{ display: \"flex\", justifyContent: \"left\" }}\r\n              >\r\n                {state.step > 1 && (\r\n                  <div\r\n                    style={{\r\n                      width: \"110px\",\r\n                      display: \"flex\",\r\n                      cursor: \"pointer\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      gap: \"8px\",\r\n                      borderRadius: \"4px\",\r\n                      height: \"40px\",\r\n                      border: \"1px solid #8D8DFD\",\r\n                    }}\r\n                    onClick={back}\r\n                  >\r\n                    <div class={\"ConfirmText\"}>Back</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div\r\n                class=\"col-6\"\r\n                style={{ display: \"flex\", justifyContent: \"right\" }}\r\n              >\r\n                {state.step < 3 && state.poolList.length > 0 && (\r\n                  <div\r\n                    style={{\r\n                      width: \"110px\",\r\n                      display: \"flex\",\r\n                      cursor: \"pointer\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      gap: \"8px\",\r\n                      borderRadius: \"4px\",\r\n                      background: \"rgb(141, 141, 253)\",\r\n                      height: \"40px\",\r\n                    }}\r\n                    onClick={next}\r\n                  >\r\n                    <div class={\"ConfirmText\"}>Next</div>\r\n                  </div>\r\n                )}\r\n\r\n                {state.step == 3\r\n                  ? state.addingLiquidity\r\n                    ? confirmButtonDisabled\r\n                    : state.validation == true\r\n                    ? !state.moreTokenAAllowance\r\n                      ? !state.moreTokenBAllowance\r\n                        ? confirmButton\r\n                        : state.onApprovingToken\r\n                        ? allowanceButtonDisabled()\r\n                        : allowanceButton(\"TB\")\r\n                      : state.onApprovingToken\r\n                      ? allowanceButtonDisabled()\r\n                      : allowanceButton(\"TA\")\r\n                    : state.poolModeSelected.id == 0 ||\r\n                      state.poolModeSelected.id == 3\r\n                    ? state.tokenABalance && state.tokenBBalance\r\n                      ? state.need2Tokens\r\n                        ? state.amountInputTokenA > 0 &&\r\n                          state.amountInputTokenB > 0\r\n                          ? validateButton\r\n                          : validateButtonDisabled\r\n                        : state.amountInputTokenB > 0\r\n                        ? validateButton\r\n                        : validateButtonDisabled\r\n                      : validateButtonDisabled\r\n                    : state.poolModeSelected.id == 1\r\n                    ? state.tokenABalance\r\n                      ? state.amountInputTokenA > 0\r\n                        ? validateButton\r\n                        : validateButtonDisabled\r\n                      : validateButtonDisabled\r\n                    : state.tokenBBalance\r\n                    ? state.amountInputTokenB > 0\r\n                      ? validateButton\r\n                      : validateButtonDisabled\r\n                    : validateButtonDisabled\r\n                  : \"\"}\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : state.sender ? (\r\n          <span class=\"text-white\">\r\n            To proceed, please switch to the\r\n            <br />\r\n            <div\r\n              class=\"networkNameContainer\"\r\n              onClick={() => switchNetwork(324)}\r\n            >\r\n              <span class=\"networkName\">zkSync Era Network</span>\r\n            </div>\r\n            using your wallet.\r\n          </span>\r\n        ) : (\r\n          <div>\r\n            <Web3Connect\r\n              className=\"LoginButton ConfirmText\"\r\n              connectLabel=\"Connect Wallet\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </Theme>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/Maverick-LP-Addition", "fact_widget_deployments_id": "1b9e3df056c97ca56b7c3cad4a86546f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}