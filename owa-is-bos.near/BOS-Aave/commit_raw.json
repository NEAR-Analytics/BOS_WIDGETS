{"tx_hash": "91NVJAijmfojR1CjVqeb4TFGTVqwTLSjgc3r6gBv19Hq", "action_id_social": "4vie6e5cZZGZyswDzpK7MmiUrPiLLJpS3JMrjLPYnact-0-widget", "block_id": 118112950, "block_timestamp": "2024-05-02T20:20:07.565Z", "signer_id": "owa-is-bos.near", "widget_name": "BOS-Aave", "source_code": "// Contract ABIs\nconst CONTRACT_ABI = {\n  wrappedTokenGatewayV3ABI:\n    \"https://raw.githubusercontent.com/corndao/aave-v3-bos-app/main/abi/WrappedTokenGatewayV3ABI.json\",\n  erc20Abi:\n    \"https://raw.githubusercontent.com/corndao/aave-v3-bos-app/main/abi/ERC20Permit.json\",\n  aavePoolV3ABI:\n    \"https://raw.githubusercontent.com/corndao/aave-v3-bos-app/main/abi/AAVEPoolV3.json\",\n  variableDebtTokenABI:\n    \"https://raw.githubusercontent.com/corndao/aave-v3-bos-app/main/abi/VariableDebtToken.json\",\n  walletBalanceProviderABI:\n    \"https://raw.githubusercontent.com/corndao/aave-v3-bos-app/main/abi/WalletBalanceProvider.json\",\n};\n\n// Default data from chain Id and ETH token\nconst DEFAULT_CHAIN_ID = 1;\nconst NATIVE_SYMBOL_ADDRESS_MAP_KEY = \"0x0\";\nconst ETH_TOKEN = { name: \"Ethereum\", symbol: \"ETH\", decimals: 18 };\nconst WETH_TOKEN = { name: \"Wrapped Ether\", symbol: \"WETH\", decimals: 18 };\nconst ACTUAL_BORROW_AMOUNT_RATE = 0.99;\n\n// Get AAVE network config by chain id\nfunction getNetworkConfig(chainId) {\n  const abis = {\n    wrappedTokenGatewayV3ABI: fetch(CONTRACT_ABI.wrappedTokenGatewayV3ABI),\n    erc20Abi: fetch(CONTRACT_ABI.erc20Abi),\n    aavePoolV3ABI: fetch(CONTRACT_ABI.aavePoolV3ABI),\n    variableDebtTokenABI: fetch(CONTRACT_ABI.variableDebtTokenABI),\n    walletBalanceProviderABI: fetch(CONTRACT_ABI.walletBalanceProviderABI),\n  };\n\n  const constants = {\n    FIXED_LIQUIDATION_VALUE: \"1.0\",\n    MAX_UINT_256:\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n    AAVE_API_BASE_URL: \"https://aave-data-service-7a85eea3aebe.herokuapp.com\",\n  };\n\n  switch (chainId) {\n    case 1: // ethereum mainnet\n      return {\n        chainName: \"Ethereum Mainnet\",\n        nativeCurrency: ETH_TOKEN,\n        nativeWrapCurrency: WETH_TOKEN,\n        rpcUrl: \"https://rpc.ankr.com/eth\",\n        aavePoolV3Address: \"0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2\",\n        wrappedTokenGatewayV3Address:\n          \"0xD322A49006FC828F9B5B37Ab215F99B4E5caB19C\",\n        balanceProviderAddress: \"0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2\",\n        ...abis,\n        ...constants,\n      };\n    default:\n      throw new Error(\"unknown chain id\");\n  }\n}\n\n// Change network to Ethereum\nfunction switchEthereumChain(chainId) {\n  const chainIdHex = `0x${chainId.toString(16)}`;\n  const res = Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: chainIdHex },\n  ]);\n  if (res === undefined) {\n    console.log(\n      `Failed to switch chain to ${chainId}. Add the chain to wallet`\n    );\n    const config = getNetworkConfig(chainId);\n    Ethers.send(\"wallet_addEthereumChain\", [\n      {\n        chainId: chainIdHex,\n        chainName: config.chainName,\n        nativeCurrency: config.nativeCurrency,\n        rpcUrls: [config.rpcUrl],\n      },\n    ]);\n  }\n}\n\n// Verify that you are on the correct network (Ethereum).\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((data) => {\n      const chainId = data?.chainId;\n      const config = getNetworkConfig(chainId);\n      if (!config) {\n        State.update({ isChainSupported: true });\n        switchEthereumChain(DEFAULT_CHAIN_ID);\n      } else {\n        State.update({ chainId, isChainSupported: true });\n      }\n    });\n}\n\n// Validation to determine that it is a number\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\n// Function to get markets\nfunction getMarkets(chainId) {\n  return asyncFetch(`${config.AAVE_API_BASE_URL}/${chainId}/markets`);\n}\n\n// Function to get user debts\nfunction getUserDebts(chainId, address) {\n  return asyncFetch(`${config.AAVE_API_BASE_URL}/${chainId}/debts/${address}`);\n}\n\n// App config\nfunction getConfig(network) {\n  const chainId = state.chainId;\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"aave-v3.near\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        ipfsPrefix: \"https://ipfs.near.social/ipfs\",\n        ...(chainId ? getNetworkConfig(chainId) : {}),\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"aave-v3.testnet\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        ipfsPrefix: \"https://ipfs.near.social/ipfs\",\n        ...(chainId ? getNetworkConfig(chainId) : {}),\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\n\n// App states\nState.init({\n  imports: {},\n  chainId: undefined, // chainId is undefined in the case of unsupported chains\n  isChainSupported: true,\n  assetsToSupply: undefined,\n  yourSupplies: undefined,\n  assetsToBorrow: undefined,\n  yourBorrows: undefined,\n  address: undefined,\n  baseAssetBalance: undefined,\n  selectTab: \"supply\", // supply | borrow\n});\n\nconst loading =\n  !state.assetsToSupply || !state.yourSupplies || !state.assetsToBorrow;\n\n// Import functions to state.imports\nfunction importFunctions(imports) {\n  if (loading) {\n    State.update({\n      imports,\n    });\n  }\n}\n\n// Define the modules you'd like to import\nconst modules = {\n  number: `${config.ownerId}/widget/Utils.Number`,\n  date: `${config.ownerId}/widget/Utils.Date`,\n  data: `${config.ownerId}/widget/AAVE.Data`,\n};\n\nfunction checkProvider() {\n  const provider = Ethers.provider();\n  if (provider) {\n    State.update({ walletConnected: true });\n  } else {\n    State.update({ walletConnected: false });\n  }\n}\n\nfunction calculateAvailableBorrows({\n  availableBorrowsUSD,\n  marketReferencePriceInUsd,\n}) {\n  return isValid(availableBorrowsUSD) && isValid(marketReferencePriceInUsd)\n    ? Big(availableBorrowsUSD).div(marketReferencePriceInUsd).toFixed()\n    : Number(0).toFixed();\n}\n\nfunction bigMin(_a, _b) {\n  const a = Big(_a);\n  const b = Big(_b);\n  return a.gt(b) ? b : a;\n}\n\nfunction formatHealthFactor(healthFactor) {\n  if (healthFactor === \"\u221e\") return healthFactor;\n  if (!healthFactor || !isValid(healthFactor)) return \"-\";\n  if (Number(healthFactor) === -1) return \"\u221e\";\n  return Big(healthFactor).toFixed(2, 0);\n}\n\nfunction batchBalanceOf(chainId, userAddress, tokenAddresses, abi) {\n  const balanceProvider = new ethers.Contract(\n    config.balanceProviderAddress,\n    abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return balanceProvider.batchBalanceOf([userAddress], tokenAddresses);\n}\n\n// Update data in async manner\nfunction updateData(refresh) {\n  // Check ABI loaded\n  if (\n    Object.keys(CONTRACT_ABI)\n      .map((key) => config[key])\n      .filter((ele) => !!ele).length !== Object.keys(CONTRACT_ABI).length\n  ) {\n    return;\n  }\n  const provider = Ethers.provider();\n  if (!provider) {\n    return;\n  }\n  provider\n    .getSigner()\n    ?.getAddress()\n    ?.then((address) => {\n      State.update({ address });\n    });\n  provider\n    .getSigner()\n    ?.getBalance()\n    .then((balance) => State.update({ baseAssetBalance: balance }));\n  if (!state.address || !state.baseAssetBalance) {\n    return;\n  }\n\n  getMarkets(state.chainId).then((marketsResponse) => {\n    if (!marketsResponse) {\n      return;\n    }\n    const markets = marketsResponse.body;\n    const marketsMapping = markets.reduce((prev, cur) => {\n      prev[cur.underlyingAsset] = cur;\n      return prev;\n    }, {});\n\n    const nativeMarket = markets.find(\n      (market) => market.symbol === config.nativeWrapCurrency.symbol\n    );\n    markets.push({\n      ...nativeMarket,\n      ...{\n        ...config.nativeCurrency,\n        supportPermit: true,\n      },\n    });\n\n    // Get user balances\n    batchBalanceOf(\n      state.chainId,\n      state.address,\n      markets.map((market) => market.underlyingAsset),\n      config.walletBalanceProviderABI\n    )\n      .then((balances) => balances.map((balance) => balance.toString()))\n      .then((userBalances) => {\n        const assetsToSupply = markets\n          .map((market, idx) => {\n            const balanceRaw = Big(\n              market.symbol === config.nativeCurrency.symbol\n                ? state.baseAssetBalance\n                : userBalances[idx]\n            ).div(Big(10).pow(market.decimals));\n            const balance = balanceRaw.toFixed(market.decimals, 0);\n            const balanceInUSD = balanceRaw\n              .mul(market.marketReferencePriceInUsd)\n              .toFixed(3, 0);\n            return {\n              ...market,\n              balance,\n              balanceInUSD,\n            };\n          })\n          .sort((asset1, asset2) => {\n            const balanceInUSD1 = Number(asset1.balanceInUSD);\n            const balanceInUSD2 = Number(asset2.balanceInUSD);\n            if (balanceInUSD1 !== balanceInUSD2)\n              return balanceInUSD2 - balanceInUSD1;\n            return asset1.symbol.localeCompare(asset2.symbol);\n          });\n\n        console.log(\"assetsToSupply\");\n        console.log(assetsToSupply);\n\n        State.update({\n          assetsToSupply,\n        });\n\n        updateUserDebts(marketsMapping, assetsToSupply, refresh);\n      });\n  });\n}\n\nfunction updateUserDebts(marketsMapping, assetsToSupply) {\n  if (!marketsMapping || !assetsToSupply) {\n    return;\n  }\n\n  const prevYourBorrows = state.yourBorrows;\n  // userDebts depends on the balance from assetsToSupply\n  const assetsToSupplyMap = assetsToSupply.reduce((prev, cur) => {\n    if (cur.symbol !== config.nativeCurrency.symbol) {\n      prev[cur.underlyingAsset] = cur;\n    } else {\n      prev[NATIVE_SYMBOL_ADDRESS_MAP_KEY] = cur;\n    }\n    return prev;\n  }, {});\n\n  getUserDebts(state.chainId, state.address).then((userDebtsResponse) => {\n    if (!userDebtsResponse) {\n      return;\n    }\n    const userDebts = userDebtsResponse.body;\n    const assetsToBorrow = {\n      ...userDebts,\n      healthFactor: formatHealthFactor(userDebts.healthFactor),\n      debts: userDebts.debts\n        .map((userDebt) => {\n          const market = marketsMapping[userDebt.underlyingAsset];\n          if (!market) {\n            return;\n          }\n          const { availableLiquidityUSD } = market;\n          const availableBorrowsUSD = bigMin(\n            userDebts.availableBorrowsUSD,\n            availableLiquidityUSD\n          )\n            .times(ACTUAL_BORROW_AMOUNT_RATE)\n            .toFixed();\n          const assetsToSupplyMapKey =\n            market.symbol === config.nativeWrapCurrency.symbol\n              ? NATIVE_SYMBOL_ADDRESS_MAP_KEY\n              : userDebt.underlyingAsset;\n          return {\n            ...market,\n            ...userDebt,\n            ...(market.symbol === config.nativeWrapCurrency.symbol\n              ? {\n                  ...config.nativeCurrency,\n                  supportPermit: true,\n                }\n              : {}),\n            availableBorrows: calculateAvailableBorrows({\n              availableBorrowsUSD,\n              marketReferencePriceInUsd: market.marketReferencePriceInUsd,\n            }),\n            availableBorrowsUSD,\n            balance: assetsToSupplyMap[assetsToSupplyMapKey].balance,\n            balanceInUSD: assetsToSupplyMap[assetsToSupplyMapKey].balanceInUSD,\n          };\n        })\n        .filter((asset) => !!asset)\n        .sort((asset1, asset2) => {\n          const availableBorrowsUSD1 = Number(asset1.availableBorrowsUSD);\n          const availableBorrowsUSD2 = Number(asset2.availableBorrowsUSD);\n          if (availableBorrowsUSD1 !== availableBorrowsUSD2)\n            return availableBorrowsUSD2 - availableBorrowsUSD1;\n          return asset1.symbol.localeCompare(asset2.symbol);\n        })\n        .filter((asset) => {\n          return asset.borrowingEnabled;\n        }),\n    };\n\n    console.log(\"assetsToBorrow\");\n    console.log(assetsToBorrow);\n\n    const yourBorrows = {\n      ...assetsToBorrow,\n      debts: assetsToBorrow.debts.filter(\n        (row) =>\n          !isNaN(Number(row.variableBorrowsUSD)) &&\n          Number(row.variableBorrowsUSD) > 0\n      ),\n    };\n\n    State.update({\n      yourBorrows,\n      assetsToBorrow,\n      loadData: true,\n    });\n  });\n}\n\ncheckProvider();\n\nif (!state.loadData) {\n  updateData();\n}\n\n// These lines use the useState hook to create state variables for assigning information.\nconst [sender, setSender] = useState(null);\nconst [tabSelected, setTabSelected] = useState(\"supply\");\n\n//We define the navigation tabs of the component\nconst pills = [\n  { id: \"supply\", title: \"Supply\" },\n  { id: \"borrow\", title: \"Borrow\" },\n];\n\n// We define all the necessary styles for our component by using styled components.\nconst Wrapper = styled.div`\n* {\n  font-family: 'system-ui','Inter', 'Space Grotesk' !important;\n  color: 'white';\n}\n\n.connectB {\n        background: #ECA227;\n        color: #1E1E1E;\n        font-weight: 700;\n        padding: 15px 20px;\n        border-radius: 1rem;\n        border: none;\n        &:hover {\n            background: #4A21A5;\n            color: white;\n        }: \n}\n\n.uploadIMG {\n        background: #ECA227;\n        color: #1E1E1E;\n        font-weight: 700;\n        padding: 15px 20px;\n        border-radius: 1rem;\n        border: none;\n        &:hover {\n            background: #4A21A5;\n            color: white;\n        }\n    }\n`;\n\nconst PillButtonActive = styled.div`\nfont-weight: 700;\nbackground-color: #ECA227;\ncolor: black;\nborder-radius: 10px;\nmargin: 0 10px 0 10px;\ncursor: pointer;\npadding: 7px 0 7px 0;\n  }\n`;\n\nconst PillButton = styled.div`\nfont-weight: 700;\ncursor: pointer;\nbackground-color: #1E1E1E;\ncolor: white;\npadding-bottom: 5px;\nborder-radius: 10px;\nmargin: 0 10px 0 10px;\npadding: 7px 0 7px 0;\n  }\n`;\n\nconst ItemBackground = styled.div`\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        background-repeat: no-repeat;\n        background-size: cover;\n        margin-bottom: -50px;\n        `;\n\nconst ItemContainer = styled.div`\n        margin-top: 30px;\n        box-sizing: border-box;\n        min-width: 320px;\n        width: 100%;\n        padding: 0px 32px;\n        position: relative;\n        `;\n\nconst ItemTitle = styled.h3`\n        text-align: center;\n        color: black;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin-bottom: 1rem;\n        `;\n\nconst ItemImage = styled.img`\n            width: 40px;\n            margin-right: 15px;\n        `;\n\nconst ItemSubTitle = styled.div`\n        text-align: center;\n        color: yellow;\n        margin-bottom: 5px;\n        `;\n\nconst ItemHeader = styled.div`\n        background: #ECA227;\n        color: #1E1E1E;\n        font-weight: 400;\n        font-size: 12px;\n        line-height: 1.6em;\n        border-radius: 20px;\n        margin: 0px;\n        padding: 20px;\n        box-shadow: none;\n        color: rgb(255, 255, 255);\n        `;\n\nconst ItemBody = styled.div`\n        font-weight: 400;\n        font-size: 1em;\n        line-height: 1.6em;\n        border-radius: 0px 0px 20px 20px;\n        margin: -20px 0px 0px;\n        padding: 32px;\n        box-shadow: none;\n        background: #1E1E1E;\n        color: black;\n        `;\n\nconst ItemMintNumber = styled.label`\n        font-size: 20px;\n        font-weight: 800;\n        color: black;\n        `;\n\nconst ItemMintButton = styled.button`\n        background: #ECA227;\n        color: #1E1E1E;\n        font-weight: 700;\n        padding: 15px 20px;\n        border-radius: 1rem;\n        border: none;\n        &:hover {\n            background: #4A21A5;\n            color: white;\n        }\n        `;\n\nconst Card = styled.div`\n        padding: 1em;\n        border: 1px solid #ECA227;\n        gap: 2em;\n        margin: 10px auto;\n        border-radius: .7em;\n`;\n\nconst ImageCard = styled.div`\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n        height:fit-content;\n        max-height:500px;\n        width: 90%;\n        max-width: 500px;\n        border-radius: 1rem;\n        &>img{\n            object-fit: contain;\n        }\n`;\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Lexend:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/QmQNCGVCwmkPxcKqDdubvb8Goy5xP8md2MfWCAix7HxgGE\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Lexend;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// Finally we render the component where we call the necessary methods to interact with the smart contract.\nreturn (\n  <Theme>\n    <Wrapper>\n      <div\n        style={{\n          display: \"flex\",\n          \"justify-content\": \"center\",\n        }}\n      ></div>\n      <br />\n      <ul\n        className=\"nav nav-pills nav-fill mb-4\"\n        id=\"pills-tab2\"\n        role=\"tablist2\"\n        style={{ \"margin-top\": \"15px\" }}\n      >\n        {pills.map(({ id, title }, i) => (\n          <li className=\"nav-item\" role=\"presentation\" key={i}>\n            {tabSelected == id ? (\n              <PillButtonActive\n                onClick={() => {\n                  setTabSelected(id);\n                }}\n              >\n                {title}\n              </PillButtonActive>\n            ) : (\n              <PillButton\n                onClick={() => {\n                  setTabSelected(id);\n                }}\n              >\n                {title}\n              </PillButton>\n            )}\n          </li>\n        ))}\n      </ul>\n\n      <div\n        className=\"tab-content\"\n        id=\"pills-tabContent\"\n        style={{ display: \"flex\", \"justify-content\": \"center\" }}\n      >\n        {tabSelected == \"supply\" ? (\n          <ItemBackground>\n            <ItemContainer>\n              <ItemHeader>\n                <ItemTitle>\n                  <label></label>\n                </ItemTitle>\n              </ItemHeader>\n              <ItemBody>\n                {state.address ? (\n                  <>\n                    <div class=\"row\" style={{ color: \"white\" }}>\n                      <div class=\"col-6\" style={{ alignContent: \"center\" }}>\n                        <div class=\"row\">\n                          <div class=\"col-12\">\n                            <div\n                              style={{ textAlign: \"center\", fontSize: \"35px\" }}\n                            >\n                              <label>Assets to supply</label>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"col-6\">\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            \"justify-content\": \"center\",\n                            \"align-items\": \"center\",\n                          }}\n                        >\n                          <img\n                            src=\"https://ipfs.near.social/ipfs/bafkreifotevq6g6ralhvutlcssaasa7xbfjjc6mbo5hlnvgpxxgfmwswmq\"\n                            style={{\n                              height: \"150px\",\n                            }}\n                          ></img>\n                        </div>\n                      </div>\n                      <div\n                        class=\"col-12\"\n                        style={{ height: \"500px\", overflow: \"scroll\" }}\n                      >\n                        <Widget\n                          src={`owa-is-bos.near/widget/BOS-Aave.AssetsToSupply`}\n                          props={{\n                            config,\n                            chainId: state.chainId,\n                            assetsToSupply: state.assetsToSupply,\n                            healthFactor: formatHealthFactor(\n                              state.assetsToBorrow.healthFactor\n                            ),\n                            formatHealthFactor,\n                            depositETHGas,\n                            depositERC20Gas,\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  <div style={{ \"text-align\": \"center\" }}>\n                    <Web3Connect\n                      className=\"connectB\"\n                      connectLabel=\"Connect with Web3\"\n                    />\n                  </div>\n                )}\n              </ItemBody>\n            </ItemContainer>\n          </ItemBackground>\n        ) : (\n          <ItemBackground>\n            <ItemContainer>\n              <ItemHeader>\n                <ItemTitle>\n                  <label></label>\n                </ItemTitle>\n              </ItemHeader>\n              <ItemBody>\n                {state.address ? (\n                  <>\n                    <div class=\"row\" style={{ color: \"white\" }}>\n                      <div class=\"col-6\" style={{ alignContent: \"center\" }}>\n                        <div class=\"row\">\n                          <div class=\"col-12\">\n                            <div\n                              style={{ textAlign: \"center\", fontSize: \"35px\" }}\n                            >\n                              <label>Assets to borrow</label>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"col-6\">\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            \"justify-content\": \"center\",\n                            \"align-items\": \"center\",\n                          }}\n                        >\n                          <img\n                            src=\"https://ipfs.near.social/ipfs/bafkreifotevq6g6ralhvutlcssaasa7xbfjjc6mbo5hlnvgpxxgfmwswmq\"\n                            style={{\n                              height: \"150px\",\n                            }}\n                          ></img>\n                        </div>\n                      </div>\n                      <div\n                        class=\"col-12\"\n                        style={{ height: \"500px\", overflow: \"scroll\" }}\n                      >\n                        <Widget\n                          src={`owa-is-bos.near/widget/BOS-Aave.AssetsToBorrow`}\n                          props={{\n                            config,\n                            chainId: state.chainId,\n                            assetsToBorrow: state.assetsToBorrow,\n                            showBorrowModal: state.showBorrowModal,\n                            yourSupplies: state.yourSupplies,\n                            setShowBorrowModal: (isShow) =>\n                              State.update({ showBorrowModal: isShow }),\n                            formatHealthFactor,\n                            onActionSuccess,\n                            borrowETHGas,\n                            borrowERC20Gas,\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  <div style={{ \"text-align\": \"center\" }}>\n                    <Web3Connect\n                      className=\"connectB\"\n                      connectLabel=\"Connect with Web3\"\n                    />\n                  </div>\n                )}\n              </ItemBody>\n            </ItemContainer>\n          </ItemBackground>\n        )}\n      </div>\n    </Wrapper>\n  </Theme>\n);\n", "metadata": {"fork_of": "owa-is-bos.near/widget/BOS-CreateNFT@117618888"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/BOS-Aave", "fact_widget_deployments_id": "2235f7699545aa64ba938b4ae1233284", "inserted_timestamp": "2024-05-02T21:40:04.229Z", "modified_timestamp": "2024-05-02T21:40:04.229Z", "__row_index": 0}