{"tx_hash": "77AmHAgymiWuQTWGrKAq5y6BD7pCHQvLud1VkLkLcihk", "action_id_social": "G9XGkXCecNLPaGiU1tXHLqoSCqXp7zHkrpwxbZVM1Rq2-0-widget", "block_id": 113440927, "block_timestamp": "2024-02-23T20:26:24.845Z", "signer_id": "owa-is-bos.near", "widget_name": "BOS-OpenSea", "source_code": "// Initializes a state object with properties such as contract, api_key, allNFTS, and init.\n// This sets up the initial state of the component.\nState.init({\n  contract: \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\",\n  api_key: \"c19f1YSp1FKWlhQHi4gAx0DbxkFM2r48\",\n  allNFTS: null,\n  init: false,\n});\n\n// This line defines a constant loadingUrl which holds a URL to an image used as a loading indicator if the image for a token is not available.\n// It uses a default value if props.loadingUrl is not provided.\nconst loadingUrl =\n  props.loadingUrl ??\n  \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n\n// Function to fetch NFTs for a given contract address using an API.\n// It updates the allNFTS and init properties of the state object.\nconst getNFTsForContract = () => {\n  asyncFetch(\n    \"https://eth-mainnet.g.alchemy.com/nft/v3/\" +\n      state.api_key +\n      \"/getNFTsForContract?contractAddress=\" +\n      state.contract +\n      \"&withMetadata=true\",\n    {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\",\n        \"content-type\": \"application/json\",\n      },\n    }\n  )\n    .then(({ body }) => {\n      if (body) {\n        State.update({\n          allNFTS: body.nfts,\n          init: true,\n        });\n      } else {\n        State.update({\n          allNFTS: null,\n          init: true,\n        });\n      }\n    })\n    .catch((err) => console.log(err));\n};\n\n// Finally we render the component where we iterate the allNFTS array to show the information of each of the tokens.\nreturn (\n  <div>\n    <h1>BOS + OpenSea</h1>\n    <div>\n      <input\n        placeholder=\"Contract Address\"\n        value={state.contract}\n        onChange={(e) => State.update({ contract: e.target.value })}\n        style={{ width: \"420px\" }}\n      />\n      <button\n        style={{ marginTop: \"10px\" }}\n        onClick={async () => {\n          getNFTsForContract();\n        }}\n      >\n        Search Collection\n      </button>\n      <br />\n    </div>\n    {state.allNFTS ? (\n      <>\n        <label style={{ fontWeight: \"bold\" }}>\n          Collection Name: {state.allNFTS[0].collection.name}\n        </label>\n        <div\n          style={{\n            marginTop: \"10px\",\n            display: \"grid\",\n            \"grid-template-columns\": \"repeat(4, 1fr)\",\n            \"grid-column-gap\": \"10px\",\n            \"grid-row-gap\": \"10px\",\n          }}\n        >\n          {state.allNFTS &&\n            state.allNFTS.map(\n              (nft, i) =>\n                nft.image &&\n                nft.image.pngUrl && (\n                  <div>\n                    <img\n                      src={\n                        nft.image.pngUrl !== null\n                          ? nft.image.pngUrl\n                          : loadingUrl\n                      }\n                      style={{ width: \"150px\", height: \"150px\" }}\n                    />\n                    <br />\n                    <label>Token Id: {nft.tokenId}</label>\n                    <br />\n                    <a\n                      href={\n                        \"https://opensea.io/assets/ethereum/\" +\n                        state.contract +\n                        \"/\" +\n                        nft.tokenId\n                      }\n                      target=\"_blank\"\n                    >\n                      Open NFT\n                    </a>\n                  </div>\n                )\n            )}\n        </div>\n      </>\n    ) : (\n      state.init && (\n        <label style={{ fontWeight: \"bold\" }}>Collection Not Found</label>\n      )\n    )}\n  </div>\n);\n", "metadata": {"name": "Bos-OpenSea"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/BOS-OpenSea", "fact_widget_deployments_id": "050dfb21d8cee646f8d8cbe0d0d85ea5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}