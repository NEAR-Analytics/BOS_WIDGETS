{"tx_hash": "Eeg4gfT4Kcp7nTHT858vgktCTFvsBjjSKEStiXfoCkCk", "action_id_social": "8YDgjPL1BZmaWqdu7sXNuSJrGEBpP6nudrGM2tcCbmY3-0-widget", "block_id": 105629160, "block_timestamp": "2023-11-13T18:29:51.113Z", "signer_id": "owa-is-bos.near", "widget_name": "SwapETH-mpETH", "source_code": "const routerContract = \"0x09bD2A33c47746fF03b86BCe4E885D03C74a8E8C\";\nconst EthToken = \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\nconst MPEthToken = \"0x60B42e0DE164d18fE6822C115DAf2e0F18867aE7\";\n\nconst routerAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ArbitrumSushiSwapRouter.txt\"\n);\nif (!routerAbi.ok) {\n  return \"Loading\";\n}\n\nconst getNetwork = () => {\n  let chainId = 42161;\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res.chainId == chainId) {\n        State.update({ isArbitrum: true });\n      } else {\n        switchNetwork(42161);\n      }\n    });\n};\n\nconst switchNetwork = (chainId) => {\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nconst swap = () => {\n  let route =\n    \"0x0301ffff020109bd2a33c47746ff03b86bce4e885d03c74a8e8c82af49447d8a07e3bd95bd0d56f35241523fbab10182af49447d8a07e3bd95bd0d56f35241523fbab101ffff019c657a4140ed352f86dc6d3a8825991431db2201\" +\n    state.sender.substring(0, 1) +\n    \"0\" +\n    state.sender.substring(2);\n\n  const router = new ethers.Contract(\n    routerContract,\n    routerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amountIn = ethers.utils.parseUnits(state.strEther, 18);\n\n  const overrides = {\n    value: amountIn,\n    gasLimit: 2303039,\n  };\n\n  try {\n    router\n      .processRoute(\n        EthToken,\n        amountIn,\n        MPEthToken,\n        0,\n        state.sender,\n        route,\n        overrides\n      )\n      .then((res) => {});\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    getNetwork();\n  }\n}\n\nif (state.balance === undefined && state.sender) {\n  State.update({ tokenTo: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\" });\n  State.update({ tokenSelected: 0 });\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(5) });\n    });\n}\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://ipfs.near.social/ipfs/QmY1vEGq8a9e3n25g9A57eLd7bMWdVKipYHJYRpx1R5yij\"\n).body;\n\nif (!cssFont || !css) return \"no css\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Stake ETH-mpETH</div>\n      <div class=\"SubHeader\" style={{ color: \"black\", fontWeight: \"bold\" }}>\n        Powered by&nbsp;\n        <a target=\"_blank\" href=\"https://www.metapool.app/\">\n          Meta Pool\n        </a>\n        &nbsp;&&nbsp;\n        <a target=\"_blank\" href=\"https://www.sushi.com/\">\n          Sushi Swap\n        </a>\n      </div>\n      <div\n        class=\"LidoForm\"\n        style={{ background: \"rgb(206, 255, 26)\", color: \"black\" }}\n      >\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to swap</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span style={{ color: \"black\" }}>\n                      <b>Account:</b> {getSender()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"mb-2 LidoStakeFormInputContainer\">\n          <select\n            name=\"select\"\n            id=\"token\"\n            class=\"selectCSS\"\n            onChange={handleSelect}\n          >\n            <option>ETH</option>\n          </select>\n        </div>\n\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\n              ></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              const balance = parseFloat(state.balance) - 0.0004;\n              State.update({\n                strEther: balance.toFixed(5).toString(),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <>\n            <button\n              class=\"LidoStakeFormSubmitContainer\"\n              style={{ background: \"rgb(12, 34, 70)\" }}\n              onClick={() => swap()}\n            >\n              <span>Stake</span>\n            </button>\n            <div class=\"row\">\n              <div\n                class=\"col-12\"\n                style={{\n                  textAlign: \"center\",\n                  color: \"black\",\n                  marginTop: \"5px\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  Running on &nbsp;\n                  <a target=\"_blank\" href=\"https://arbitrum.io/\">\n                    Arbitrum\n                  </a>\n                  &nbsp; for lower fees &nbsp;\n                  <img\n                    src=\"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/Arbitrum.png\"\n                    style={{ width: \"20px\" }}\n                  ></img>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n      </div>\n    </div>\n    {state.isArbitrum && state.sender && (\n      <Widget\n        src=\"owa-is-bos.near/widget/SwapETH-mpETH-Transactions\"\n        props={{\n          state,\n          handleReload: () => State.update({ reloadTransactions: false }),\n        }}\n      />\n    )}\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/SwapETH-mpETH", "fact_widget_deployments_id": "b37a66c0ae6bd32c7b950d9b7b5ec346", "inserted_timestamp": "2023-11-13T20:29:00.995Z", "modified_timestamp": "2023-11-13T20:29:00.995Z", "__row_index": 11}