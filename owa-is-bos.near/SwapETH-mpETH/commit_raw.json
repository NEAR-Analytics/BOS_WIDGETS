{"tx_hash": "wQajnQyxLEgt9AuRYdjjDmhvu4XKYhyCUzxJw1Ft2BU", "action_id_social": "BdpnuYx7D8pGNAVbLJkAL1WGrEDyURwV5hhhF8XnPviz-0-widget", "block_id": 107802640, "block_timestamp": "2023-12-13T01:13:58.005Z", "signer_id": "owa-is-bos.near", "widget_name": "SwapETH-mpETH", "source_code": "const routerContract = \"0x09bD2A33c47746fF03b86BCe4E885D03C74a8E8C\";\nconst EthToken = \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\nconst MPEthToken = \"0x60B42e0DE164d18fE6822C115DAf2e0F18867aE7\";\n\nState.init({ tokenSelected: 0, tokenTo: EthToken });\n\nconst routerAbi = fetch(\n  \"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/ArbitrumSushiSwapRouter.txt\"\n);\n\nif (!routerAbi.ok) {\n  return \"Loading\";\n}\n\nconst getNetwork = () => {\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      if (res.chainId == ArbitrumChainId) {\n        State.update({ isArbitrum: true });\n      } else {\n        switchNetwork(ArbitrumChainId);\n      }\n    });\n\n  // get mpEth price\n  asyncFetch(\"https://eth-metapool.narwallets.com/metrics_json\")\n    .then(({ body }) => State.update({ mpethPrice: body.mpethPrice }))\n    .catch((err) => console.error(err));\n\n  // get fee arbitrum chain\n  asyncFetch(\n    \"https://arb-mainnet.g.alchemy.com/v2/iL1gKyTK1xYrk0cCrSC3lrbGOCVHN2tm\",\n    {\n      method: \"POST\",\n      headers: {\n        accept: \"application/json\",\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ id: 1, jsonrpc: \"2.0\", method: \"eth_gasPrice\" }),\n    }\n  )\n    .then(({ body }) => State.update({ gasFee: parseInt(body.result, 16) }))\n    .catch((err) => console.error(err));\n};\n\nconst switchNetwork = (chainId) => {\n  Ethers.provider().send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${chainId.toString(16)}` },\n  ]);\n};\n\nconst swap = () => {\n  let route =\n    \"0x0301ffff020109bd2a33c47746ff03b86bce4e885d03c74a8e8c82af49447d8a07e3bd95bd0d56f35241523fbab10182af49447d8a07e3bd95bd0d56f35241523fbab101ffff019c657a4140ed352f86dc6d3a8825991431db2201\" +\n    state.sender.substring(0, 1) +\n    \"0\" +\n    state.sender.substring(2);\n\n  const router = new ethers.Contract(\n    routerContract,\n    routerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amountIn = ethers.utils.parseUnits(state.strEther, 18);\n\n  const overrides = {\n    value: amountIn,\n    gasLimit: 3000000,\n  };\n\n  try {\n    router\n      .processRoute(\n        EthToken,\n        amountIn,\n        MPEthToken,\n        0,\n        state.sender,\n        route,\n        overrides\n      )\n      .then((res) => { });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst unswap = () => {\n  alert(\"coming soon!\");\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    getNetwork();\n  } else {\n    // get mpEth price\n    asyncFetch(\"https://eth-metapool.narwallets.com/metrics_json\")\n      .then(({ body }) => State.update({ mpethPrice: body.mpethPrice }))\n      .catch((err) => console.error(err));\n  }\n}\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(5) });\n    });\n}\n\n/// set selected token\nfunction handleSelect(event) {\n  State.update({\n    tokenSelected: Number(event.target.value),\n    tokenTo: event.target.value === 0 ? EthToken : MPEthToken,\n  });\n}\n\n/// calculate price\nfunction getEqualPrice(value) {\n  console.log(value);\n  console.log(state.mpethPrice);\n  if (!value || !state.mpethPrice) return \"0\";\n\n  let result;\n  if (state.tokenSelected == 0) result = value / state.mpethPrice;\n  else result = value * state.mpethPrice;\n\n  return result.toFixed(5);\n}\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://raw.githubusercontent.com/open-web-academy/Components-BOS/main/mpETH.css\"\n).body;\n\nif (!cssFont || !css) return \"no css\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n      font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n      ${cssFont}\n      ${css}\n    `,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n    \"...\" +\n    state.sender.substring(state.sender.length - 4, state.sender.length);\n},\n  mpEthIcon = (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"#8A92B2\" />\n      <rect\n        x=\"10.2856\"\n        y=\"5.98071\"\n        width=\"2.68085\"\n        height=\"2.68085\"\n        transform=\"rotate(-45 10.2856 5.98071)\"\n        fill=\"#0C2246\"\n      />\n      <rect\n        x=\"7.02734\"\n        y=\"8.90186\"\n        width=\"2.55319\"\n        height=\"7.16564\"\n        transform=\"rotate(-45 7.02734 8.90186)\"\n        fill=\"#0C2246\"\n      />\n      <rect\n        x=\"10.3672\"\n        y=\"12.2185\"\n        width=\"6.8083\"\n        height=\"2.55319\"\n        transform=\"rotate(-45 10.3672 12.2185)\"\n        fill=\"#0C2246\"\n      />\n      <rect\n        x=\"4.08496\"\n        y=\"11.8223\"\n        width=\"2.55319\"\n        height=\"11.2918\"\n        transform=\"rotate(-45 4.08496 11.8223)\"\n        fill=\"#0C2246\"\n      />\n      <rect\n        x=\"10.3262\"\n        y=\"18.0298\"\n        width=\"11.0548\"\n        height=\"2.55319\"\n        transform=\"rotate(-45 10.3262 18.0298)\"\n        fill=\"#0C2246\"\n      />\n    </svg>\n  ),\n  ethIcon = (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path\n        opacity=\"0.6\"\n        d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n      ></path>\n      <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n      <path\n        opacity=\"0.6\"\n        d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n      ></path>\n      <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n      <path\n        opacity=\"0.2\"\n        d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\n      ></path>\n      <path opacity=\"0.6\" d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"></path>\n    </svg>\n  ),\n  arrowIcon = (\n    <svg\n      width=\"16\"\n      height=\"12\"\n      viewBox=\"0 0 16 12\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect\n        y=\"2.90039\"\n        width=\"4.10175\"\n        height=\"11.5117\"\n        rx=\"1.60652\"\n        transform=\"rotate(-45 0 2.90039)\"\n        fill=\"#0C2246\"\n      />\n      <rect\n        x=\"5.36572\"\n        y=\"8.22876\"\n        width=\"10.9377\"\n        height=\"4.10175\"\n        rx=\"1.60652\"\n        transform=\"rotate(-45 5.36572 8.22876)\"\n        fill=\"#0C2246\"\n      />\n    </svg>\n  );\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\" style={{ marginBottom: \"20px\" }}>\n      <div class=\"Header\">Stake ETH-mpETH</div>\n      <div class=\"SubHeader\" style={{ color: \"black\", fontWeight: \"bold\" }}>\n        Powered by&nbsp;\n        <a target=\"_blank\" href=\"https://www.metapool.app/\">\n          Meta Pool\n        </a>\n        &nbsp;&&nbsp;\n        <a target=\"_blank\" href=\"https://www.sushi.com/\">\n          Sushi Swap\n        </a>\n      </div>\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <p>\n              The price indicated below is a reference, to know the price in\n              time. Really check out\n              <a\n                href=\"https://www.sushi.com/pool/42161:0x9C657a4140Ed352f86Dc6D3A8825991431dB2201/positions/7636\"\n                target=\"_blank\"\n                style={{ color: \"#6c721c\" }}\n              >\n                <strong>Sushi Swap</strong>\n              </a>\n            </p>\n\n            <div class=\"LidoFormTopContainer\">\n              <div\n                class=\"LidoFormTopContainerLeft\"\n                style={{ maxWidth: \"max-content\" }}\n              >\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to swap</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;{}\n                    {state.tokenSelected == 0 ? \"ETH\" : \"mpETH\"}\n                  </span>\n                </div>\n\n                <span style={{ float: \"right\" }}>\n                  ~ {getEqualPrice(state.balance)}{\" \"}\n                  {state.tokenSelected == 0 ? \"mpETH\" : \"ETH\"}\n                </span>\n              </div>\n\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span style={{ color: \"black\" }}>\n                      <b>Account:</b> {getSender()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n      </div>\n\n      <div\n        class=\"LidoStakeForm\"\n        style={{\n          \"--lidoFormHeight\": state.sender ? \"150px\" : \"32px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <div class=\"LidoStakeFormInputContainer\">\n          <div class=\"customSelect\">\n            <select\n              name=\"select\"\n              id=\"token\"\n              class=\"selectCSS\"\n              onChange={handleSelect}\n            >\n              <option value=\"0\">ETH</option>\n              <option value=\"1\">mpETH</option>\n            </select>\n\n            {arrowIcon}\n          </div>\n\n          <div class=\"LidoStakeFormInputContainerSpan2\">\n            <div style={{ paddingLeft: \"4px\", paddingRight: \"2px\" }}>\n              {state.tokenSelected == 0 ? ethIcon : mpEthIcon}\n            </div>\n\n            <input\n              required\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              type=\"number\"\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </div>\n\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              const balance = parseFloat(state.balance) - 0.0004;\n              State.update({\n                strEther: balance.toFixed(5).toString(),\n              });\n            }}\n          >\n            {state.sender && <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>}\n          </span>\n        </div>\n\n        <>\n          <span\n            style={{\n              marginTop: \"8px\",\n            }}\n          >\n            Amount in {state.tokenSelected == 0 ? \"mpETH\" : \"ETH\"}\n            {getEqualPrice(state.strEther)}\n          </span>\n\n          {state.sender && <span>Gas Fee {state.gasFee} wei</span>}\n        </>\n\n\n        {!!state.sender ? (\n          <>\n            {state.tokenSelected == 0 ? (\n              /// Stake\n              <button\n                class=\"LidoStakeFormSubmitContainer\"\n                onClick={() => swap()}\n              >\n                <span>Stake</span>\n              </button>\n            ) : (\n              /// Unstake\n              <button\n                class=\"LidoStakeFormSubmitContainer\"\n                style={{ backgroundColor: \"#6c721c\" }}\n                onClick={() => unswap()}\n              >\n                <span>Unstake - Coming soon</span>\n              </button>\n            )}\n\n            <div class=\"row\">\n              <div\n                class=\"col-12\"\n                style={{\n                  textAlign: \"center\",\n                  color: \"black\",\n                  marginTop: \"5px\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    marginTop: \"5px\",\n                  }}\n                >\n                  Running on &nbsp;\n                  <a target=\"_blank\" href=\"https://arbitrum.io/\">\n                    Arbitrum\n                  </a>\n                  &nbsp; for lower fees &nbsp;\n                  <img\n                    src=\"https://raw.githubusercontent.com/yaairnaavaa/Maverick/main/Arbitrum.png\"\n                    style={{ width: \"20px\" }}\n                  ></img>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"CONNECT WITH WEB3\"\n          />\n        )}\n      </div>\n    </div>\n\n    {state.isArbitrum && state.sender && (\n      <Widget\n        src=\"owa-is-bos.near/widget/SwapETH-mpETH-Transactions\"\n        props={{\n          state,\n          handleReload: () => State.update({ reloadTransactions: false }),\n        }}\n      />\n    )}\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/SwapETH-mpETH", "fact_widget_deployments_id": "d8c22bb30998521c0b6ef161e4c41a33", "inserted_timestamp": "2023-12-13T03:21:46.481Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 13}