{"tx_hash": "2jTBUNkibRoCgWgdjTRoizbLGgqvcvgp75aD2RpH6rED", "action_id_social": "4dkBc5RAAgVe34Hbat2CLXMX5ZRuyjLJJn4cyVj4F31Z-0-widget", "block_id": 121914285, "block_timestamp": "2024-06-24T20:05:32.617Z", "signer_id": "owa-is-bos.near", "widget_name": "HAT-Auctions", "source_code": "// Address of the auction contract on the NEAR blockchain\nconst auctionsContract = \"auctions.hat-coin.near\";\n// Address of the fungible token contract on the NEAR blockchain\nconst ftContract = \"hat.tkn.near\";\n\n// State variables to manage the date and time of the auction, the current bid, the current bidder, the auction status, the new bid, and the validity of the bid\nconst [date, setDate] = useState(null);\nconst [startTime, setStartTime] = useState(0);\nconst [endTime, setEndTime] = useState(0);\nconst [days, setDays] = useState(\"-\");\nconst [hours, setHours] = useState(\"-\");\nconst [minutes, setMinutes] = useState(\"-\");\nconst [seconds, setSeconds] = useState(\"-\");\nconst [currentBid, setCurrentBid] = useState(0);\nconst [currentBidder, setCurrentBidder] = useState(0);\nconst [auctionStatus, setAuctionStatus] = useState(\"\");\nconst [newBid, setNewBit] = useState(0);\nconst [minBid, setMinBit] = useState(0);\nconst [validBit, setValidBit] = useState(true);\nconst [validBitAmount, setValidBitAmount] = useState(true);\n\n// Calling contract methods on NEAR to get auction information and winner's storage balance\nconst tokensPerAuction = Near.view(\n  auctionsContract,\n  \"get_tokens_per_auction\",\n  null,\n  null,\n  true\n);\n\nconst currentSupply = Near.view(\n  auctionsContract,\n  \"get_current_supply\",\n  null,\n  null,\n  true\n);\n\nconst auction = Near.view(\n  auctionsContract,\n  \"get_auction_info\",\n  null,\n  null,\n  true\n);\n\nconst winnerHasStorageBalance = auction.highest_bidder\n  ? Near.view(\n      ftContract,\n      \"storage_balance_of\",\n      { account_id: auction.highest_bidder },\n      null,\n      true\n    )\n  : null;\n\n// Update auction state based on data obtained from contract methods\nif (tokensPerAuction && currentSupply && auction) {\n  setMinBit(auction.highest_bid / 1e24 + 0.5);\n  setStartTime(auction.start_time.toString().substring(0, 13));\n  setEndTime(auction.end_time.toString().substring(0, 13));\n  setCurrentBid(auction.highest_bid == 0 ? 0.5 : auction.highest_bid / 1e24);\n  setCurrentBidder(auction.highest_bidder);\n}\n\n// Function to format the time, adding a leading zero if necessary\nconst formatTime = (time) => (time < 10 ? `0${time}` : time);\n\n// Timer that updates the countdown every second\nconst timer = setInterval(() => {\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  const date = new Date();\n  setDate(date.toLocaleDateString(\"en-US\", options));\n\n  const now = date.getTime();\n  const start = new Date(parseInt(startTime)).getTime();\n  const end = new Date(parseInt(endTime)).getTime();\n\n  let diff;\n  if (now < start) {\n    diff = new Date(parseInt(start)).getTime() - new Date().getTime();\n  } else if (now > start && now < end) {\n    diff = new Date(parseInt(end)).getTime() - new Date().getTime();\n    setAuctionStatus(\"active\");\n  } else {\n    diff = 0;\n    setAuctionStatus(\"finish\");\n  }\n\n  let days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n  let seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n  setDays(days);\n  setHours(hours);\n  setMinutes(minutes);\n  setSeconds(seconds);\n\n  clearInterval(timer);\n}, 1000);\n\n// Definition of styled components using styled-components\nconst Timer = styled.div`\n  .time {\n    font-size: 48px;\n    font-weight: 800;\n    color: white;\n    width: 100px;\n    line-height: 1;\n  }\n  small {\n    margin-bottom: 0;\n    align-items: center;\n  }\n`;\n\n// TimerContent component that displays the countdown\nconst TimerContent = () => {\n  const TimeSlot = ({ time, title }) => (\n    <div className={\"text-center\"}>\n      <div className=\"time\">{formatTime(time)}</div>\n      <small>{title}</small>\n    </div>\n  );\n\n  return (\n    <>\n      <Timer className=\"d-flex\">\n        <TimeSlot title=\"hours\" time={hours} />\n        <TimeSlot title=\"minutes\" time={minutes} />\n        <TimeSlot title=\"seconds\" time={seconds} />\n      </Timer>\n    </>\n  );\n};\n\n// Function to place a bid in the auction, checking the validity of the bid\nconst addBid = () => {\n  console.log(\"addBid\");\n  if (auction.claimed && auctionStatus == \"finish\") {\n    if (newBid >= 1) {\n      setValidBit(true);\n      setValidBitAmount(0);\n      Near.call(\n        auctionsContract,\n        \"start_or_place_bid\",\n        {},\n        \"300000000000000\",\n        newBid * 1e24\n      );\n    } else {\n      setValidBit(false);\n      setValidBitAmount(1);\n    }\n  } else {\n    if (newBid >= currentBid + 0.5) {\n      setValidBit(true);\n      setValidBitAmount(0);\n      Near.call(\n        auctionsContract,\n        \"start_or_place_bid\",\n        {},\n        \"300000000000000\",\n        newBid * 1e24\n      );\n    } else {\n      setValidBit(false);\n      setValidBitAmount(currentBid + 0.5);\n    }\n  }\n};\n\n// Function to claim the tokens won in the auction\nconst claimTokens = () => {\n  console.log(\"claimTokens\");\n  if (winnerHasStorageBalance) {\n    Near.call(auctionsContract, \"claim_tokens\", {}, \"300000000000000\", 1);\n  } else {\n    Near.call([\n      {\n        contractName: ftContract,\n        methodName: \"storage_deposit\",\n        args: { account_id: auction.highest_bidder },\n        gas: 300000000000000,\n        deposit: 1 * 1e22,\n      },\n      {\n        contractName: auctionsContract,\n        methodName: \"claim_tokens\",\n        args: {},\n        gas: 300000000000000,\n        deposit: 1,\n      },\n    ]);\n  }\n};\n\n// Function to send tokens and place a new bid if certain conditions are met\nconst sendTokensAndAddBid = () => {\n  console.log(\"sendTokensAndAddBid\");\n  if (winnerHasStorageBalance) {\n    if (newBid >= 1) {\n      setValidBit(true);\n      setValidBitAmount(0);\n      Near.call([\n        {\n          contractName: auctionsContract,\n          methodName: \"claim_tokens\",\n          args: {},\n          gas: 300000000000000,\n          deposit: 1,\n        },\n        {\n          contractName: auctionsContract,\n          methodName: \"start_or_place_bid\",\n          args: {},\n          gas: 300000000000000,\n          deposit: newBid * 1e24,\n        },\n      ]);\n    } else {\n      setValidBit(false);\n      setValidBitAmount(1);\n    }\n  } else {\n    if (newBid >= 1) {\n      setValidBit(true);\n      setValidBitAmount(0);\n      Near.call([\n        {\n          contractName: ftContract,\n          methodName: \"storage_deposit\",\n          args: { account_id: auction.highest_bidder },\n          gas: 300000000000000,\n          deposit: 1 * 1e22,\n        },\n        {\n          contractName: auctionsContract,\n          methodName: \"claim_tokens\",\n          args: {},\n          gas: 300000000000000,\n          deposit: 1,\n        },\n        {\n          contractName: auctionsContract,\n          methodName: \"start_or_place_bid\",\n          args: {},\n          gas: 300000000000000,\n          deposit: newBid * 1e24,\n        },\n      ]);\n    } else {\n      setValidBit(false);\n      setValidBitAmount(1);\n    }\n  }\n};\n\n// Definition of various styled components to structure and style the auction user interface\nconst Wrapper = styled.div`\n* {\n  font-family: 'system-ui','Inter', 'Space Grotesk' !important;\n}\n`;\n\nconst ItemBackground = styled.div`\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        background-repeat: no-repeat;\n        background-size: cover;\n        margin-bottom: -50px;\n        `;\n\nconst ItemContainer = styled.div`\n        margin-top: 30px;\n        box-sizing: border-box;\n        min-width: 375px;\n        width: 700px;\n        padding: 0px 32px;\n        position: relative;\n        `;\n\nconst ItemTitle = styled.h3`\n        text-align: center;\n        color: black;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin-bottom: 1rem;\n        `;\n\nconst ItemImage = styled.img`\n            width: 40px;\n            margin-right: 15px;\n        `;\n\nconst ItemSubTitle = styled.div`\n        text-align: center;\n        color: yellow;\n        margin-bottom: 5px;\n        `;\n\nconst ItemHeader = styled.div`\n        background: #F5AD00;\n        color: #1E1E1E;\n        font-weight: 400;\n        font-size: 12px;\n        line-height: 1.6em;\n        border-radius: 20px;\n        margin: 0px;\n        padding: 20px;\n        box-shadow: none;\n        color: rgb(255, 255, 255);\n        `;\n\nconst ItemBody = styled.div`\n        font-weight: 400;\n        font-size: 1em;\n        line-height: 1.6em;\n        border-radius: 0px 0px 20px 20px;\n        margin: -20px 0px 0px;\n        padding: 32px;\n        box-shadow: none;\n        color: black;\n        background: rgb(45, 50, 97);\n        `;\n\nconst InputGroup = styled.div`\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-align: stretch;\n    align-items: center;\n    width: 100%;\n    justify-content: center;\n`;\n\nconst Button = styled.button`\n    display: inline-flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    border-radius: 12px !important;\n    max-width: 230px;\n    background-color: #F5AD00;\n    padding: 10px;\n    font-weight: 500;\n    border: 0px;\n    color: black;\n    width: 120px;\n    height: 54px;\n    margin-left: 5px;\n    margin-top: 10px;\n\n    &:hover{\n      background: rgb(45, 50, 97);\n      color: white;\n      border-color: #F5AD00;\n      border-width: 1.5px;\n      border-style: solid;\n    }\n`;\n\nconst ButtonDisabled = styled.button`\n    display: inline-flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    border-radius: 12px !important;\n    max-width: 230px;\n    padding: 10px;\n    font-weight: 500;\n    border: 0px;\n    width: 120px;\n    height: 54px;\n    margin-left: 5px;\n    margin-top: 10px;\n    background: rgb(45, 50, 97);\n    color: white;\n    cursor: default !important;\n`;\n\nconst Input = styled.input`\n    -webkit-box-sizing: border-box;\n    height: 54px;\n    color: #000;\n    border-radius: 12px !important;\n    box-shadow: inset 0 0 0 1px #fff;\n    background-color: #fff;\n    outline: none !important;\n    box-shadow: none !important;\n    font-family: \"PT Root UI\";\n    font-weight: 700;\n    font-size: 25px;\n    transition: all .2s ease-in-out;\n    border: none;\n    margin-right: 5px;\n    text-align: center;\n    margin-top: 10px;\n`;\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Lexend:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/QmQNCGVCwmkPxcKqDdubvb8Goy5xP8md2MfWCAix7HxgGE\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Lexend;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// Rendering the main component where necessary methods are called to interact with the smart contract\nreturn (\n  <Theme>\n    <ItemBackground>\n      <ItemContainer>\n        <ItemHeader>\n          <ItemTitle>\n            <label>Current Supply: {currentSupply} HAT's</label>\n          </ItemTitle>\n        </ItemHeader>\n        <ItemBody>\n          <div class=\"row\" style={{ color: \"white\" }}>\n            <div class=\"col-12\" style={{ alignContent: \"center\" }}>\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <div style={{ textAlign: \"right\", fontSize: \"25px\" }}>\n                    <label>{date}</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div\n                style={{\n                  height: \"100%\",\n                  display: \"flex\",\n                  \"justify-content\": \"center\",\n                  \"align-items\": \"center\",\n                }}\n              >\n                <img\n                  src=\"https://raw.githubusercontent.com/open-web-academy/BOS-HardHatCoin/main/assets/image.png\"\n                  style={{\n                    height: \"150px\",\n                  }}\n                ></img>\n              </div>\n            </div>\n            <div class=\"col-6\" style={{ alignContent: \"center\" }}>\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  <div style={{ textAlign: \"center\", fontSize: \"25px\" }}>\n                    <label style={{ fontWeight: \"bold\" }}>\n                      Auctioned tokens\n                    </label>\n                    <br />\n                    <label style={{ marginTop: \"10px\" }}>\n                      {tokensPerAuction} HAT's\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div\n              class=\"col-6\"\n              style={{ alignContent: \"center\", marginTop: \"10px\" }}\n            >\n              <div class=\"row\">\n                {auctionStatus != \"\" && auction.highest_bidder && (\n                  <div class=\"col-12\">\n                    {context.accountId == currentBidder ? (\n                      <div style={{ textAlign: \"center\", fontSize: \"20px\" }}>\n                        <label style={{ fontWeight: \"bold\" }}>\n                          {auctionStatus == \"finish\"\n                            ? \"You Won!\"\n                            : \"You are winning!\"}\n                        </label>\n                      </div>\n                    ) : (\n                      <div style={{ textAlign: \"center\", fontSize: \"20px\" }}>\n                        <label style={{ fontWeight: \"bold\" }}>\n                          {auctionStatus == \"finish\"\n                            ? \"Last Winner\"\n                            : \"Current bidder\"}\n                        </label>\n                        <br />\n                        <label style={{ marginTop: \"10px\" }}>\n                          {currentBidder}\n                        </label>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div\n              class=\"col-6\"\n              style={{ alignContent: \"center\", marginTop: \"10px\" }}\n            >\n              <div class=\"row\">\n                <div class=\"col-12\">\n                  {auction.highest_bidder && (\n                    <div style={{ textAlign: \"center\", fontSize: \"20px\" }}>\n                      <label style={{ fontWeight: \"bold\" }}>\n                        {auctionStatus == \"finish\"\n                          ? \"Winning bid\"\n                          : \"Current bid\"}\n                      </label>\n                      <br />\n                      <label style={{ marginTop: \"10px\" }}>\n                        {currentBid.toFixed(1)} \u22c8\n                      </label>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {auctionStatus == \"active\" && (\n              <div\n                class=\"col-12\"\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <div\n                  style={{\n                    height: \"100%\",\n                    textAlign: \"center\",\n                    marginTop: \"30px\",\n                  }}\n                >\n                  Auction ends in\n                  <TimerContent />\n                </div>\n              </div>\n            )}\n\n            <div class=\"col-12\">\n              {auctionStatus != \"\" && (\n                <div\n                  style={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    \"justify-content\": \"center\",\n                    \"align-items\": \"center\",\n                    marginTop: \"30px\",\n                  }}\n                >\n                  {currentSupply < tokensPerAuction ? (\n                    <InputGroup>\n                      <ButtonDisabled>\n                        There are no hats left for auction\n                      </ButtonDisabled>\n                    </InputGroup>\n                  ) : context.accountId ? (\n                    <InputGroup>\n                      {auctionStatus == \"active\" ? (\n                        <>\n                          <Input\n                            type=\"number\"\n                            min={minBid.toFixed(1)}\n                            step=\"0.5\"\n                            placeholder={minBid.toFixed(1) + \"\u22c8 or more\"}\n                            onChange={(e) => setNewBit(e.target.value)}\n                          />\n                          <Button onClick={addBid}>Place bid</Button>\n                        </>\n                      ) : context.accountId == currentBidder ? (\n                        auction.claimed ? (\n                          <>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              step=\"0.5\"\n                              placeholder=\"1 \u22c8 or more\"\n                              onChange={(e) => setNewBit(e.target.value)}\n                            />\n                            <Button onClick={addBid}>Start new auction</Button>\n                          </>\n                        ) : (\n                          <>\n                            <Button onClick={claimTokens}>Claim HAT's </Button>\n                          </>\n                        )\n                      ) : (\n                        <>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            step=\"0.5\"\n                            placeholder=\"1 \u22c8 or more\"\n                            onChange={(e) => {\n                              setNewBit(e.target.value);\n                              setValidBit(true);\n                            }}\n                          />\n                          {auction.highest_bidder && !auction.claimed ? (\n                            <Button onClick={sendTokensAndAddBid}>\n                              Start new auction\n                            </Button>\n                          ) : (\n                            <Button onClick={addBid}>Start new auction</Button>\n                          )}\n                        </>\n                      )}\n                    </InputGroup>\n                  ) : (\n                    <InputGroup>\n                      <ButtonDisabled>Please login to bid</ButtonDisabled>\n                    </InputGroup>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div class=\"col-12\">\n              <div\n                style={{\n                  height: \"100%\",\n                  display: \"flex\",\n                  \"justify-content\": \"center\",\n                  \"align-items\": \"center\",\n                  marginTop: \"15px\",\n                }}\n              >\n                {!validBit && (\n                  <label>\n                    The bid must be equal or greater than {validBitAmount} \u22c8\n                    with increments of 0.5\n                  </label>\n                )}\n              </div>\n            </div>\n          </div>\n        </ItemBody>\n      </ItemContainer>\n    </ItemBackground>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/owa-is-bos.near/widget/HAT-Auctions", "fact_widget_deployments_id": "dde94c2c7bdbf294c22ee688c5a1a4f8", "inserted_timestamp": "2024-06-24T21:54:31.421Z", "modified_timestamp": "2024-06-24T21:54:31.421Z", "__row_index": 3}