{"tx_hash": "7aUC7Y89oX4cMtYHpLA7kVcgQEsEETRVs3MxuBnTRTnB", "action_id_social": "H1Tqm1GNaaZacaQiEtPMWqvPkrEasQk9H3SDb33enKju-0-widget", "block_id": 106822558, "block_timestamp": "2023-11-29T19:07:04.234Z", "signer_id": "irfi.near", "widget_name": "RCDashboard-WIP", "source_code": "State.init({\n  selectedCommunityAccountMembers: [],\n  selectedCommunityAccount: \"indonesiaguild.near\",\n  queryResultIdMAU: null,\n  queryResultIdDevActivities: null,\n});\n\nconst communityAccounts = [\n  { text: \"Indonesia - indonesiaguild.near\", value: \"indonesiaguild.near\" },\n  { text: \"Test DAO - irfi.near\", value: \"irfi.near\" },\n];\n\nconst getMembers = (accountId) => {\n  if (!accountId) return [];\n\n  let followers = new Set(\n    Object.keys(\n      Social.keys(`*/graph/follow/${accountId}`, \"final\", {\n        return_type: \"BlockHeight\",\n        values_only: true,\n      })\n    )\n  );\n\n  let following = Object.keys(\n    Social.keys(`${accountId}/graph/follow/*`, \"final\", {\n      return_type: \"BlockHeight\",\n      values_only: true,\n    })[accountId].graph.follow\n  );\n\n  let members = [...new Set(following.filter((item) => followers.has(item)))];\n\n  return members;\n};\n\nconst generateChartCode = (data, valueLabel) => `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<canvas id=\"myChart\" style=\"position: relative; height:80vh; width:80vw\"></canvas>\n\n<script>\nasync function fetchData() {\n\nconst sortedData = ${data}.sort((a, b) => {\n  return new Date(a[\"year_month\"]) - new Date(b[\"year_month\"]);\n});\n\nconst ${valueLabel} = {};\n\n${data}.map((entry) => {\n  ${valueLabel}[entry[\"year_month\"]] = entry[\"${valueLabel}\"];\n});\n\nconst dates = ${data}.map((entry) => entry[\"year_month\"]);\n\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: dates,\n          datasets: [\n   {\n      label: \"${valueLabel}\".toUpperCase(),\n      data: ${valueLabel},\n        backgroundColor: \"rgb(75, 192, 192)\",\n      },\n          ]\n      },\n      options: {\n  scales: {\n      y: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n          borderColor: \"rgb(240,255,240)\",\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n      x: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n    },\n      }\n  });\n}\n\nfetchData();\n</script>\n`;\n\nconst generateMAU = (members) => {\n  if (members.length === 0) return [];\n  const formattedMembers = JSON.stringify(members)\n    .replaceAll(\"[\", \"(\")\n    .replaceAll(\"]\", \")\")\n    .replaceAll('\"', \"'\");\n\n  const query = `\n    SELECT\n        date_trunc('month', a.block_timestamp) AS \"date\",\n        concat(\n            date_part(year, \"date\"),\n            '-',\n            date_part(month, \"date\")\n        ) as year_month,\n        count(DISTINCT a.tx_signer) AS mau\n    FROM\n        near.core.fact_transactions a\n    WHERE\n        a.tx_signer != a.tx_receiver\n    AND a.tx_signer IN ${formattedMembers}\n    AND \"date\" > dateadd('month', -12, current_date)\n    GROUP BY\n        1\n    ORDER BY\n        1 DESC \n    `;\n\n  // create run (https://docs.flipsidecrypto.com/flipside-api/rest-api)\n  const headers = {};\n  headers[\"Content-Type\"] = \"application/json\";\n  headers[\"x-api-key\"] = \"3638c7b4-6a72-4a1f-a61d-613aa1fc1a9c\";\n\n  if (!state.queryResultIdMAU) {\n    const requestResult = fetch(\"https://api-v2.flipsidecrypto.xyz/json-rpc\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"createQueryRun\",\n        params: [\n          {\n            resultTTLHours: 24,\n            maxAgeMinutes: 1440,\n            sql: query,\n            tags: {\n              source: \"postman-demo\",\n              env: \"test\",\n            },\n            dataSource: \"snowflake-default\",\n            dataProvider: \"flipside\",\n          },\n        ],\n        id: 1,\n      }),\n      redirect: \"follow\",\n    });\n\n    const queryResultId = requestResult.body.result.queryRun.id;\n\n    State.update({ queryResultIdMAU: queryResultId });\n  } else {\n    // get results from query run\n\n    const result = fetch(\"https://api-v2.flipsidecrypto.xyz/json-rpc\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"getQueryRunResults\",\n        params: [\n          {\n            queryRunId: state.queryResultIdMAU,\n            format: \"json\",\n            page: {\n              number: 1,\n              size: 100,\n            },\n          },\n        ],\n        id: 1,\n      }),\n      redirect: \"follow\",\n    });\n    return result.body.result.rows;\n  }\n};\n\nreturn (\n  <div className=\"container m-auto\">\n    <h1>Regional Community Dashboard WIP</h1>\n    <Widget\n      src=\"near/widget/Select\"\n      props={{\n        label: \"Select your regional community account:\",\n        options: communityAccounts,\n        value: state.selectedCommunityAccount,\n        onChange: (value) =>\n          State.update({\n            selectedCommunityAccount: value.value,\n            selectedCommunityAccountMembers: getMembers(value.value),\n            queryResultIdMAU: null,\n            queryResultIdDevActivities: null,\n          }),\n      }}\n    />\n    {/* Members: {JSON.stringify(state.selectedCommunityAccountMembers)} */}\n    <iframe\n      className=\"w-100\"\n      style={{ height: \"300px\" }}\n      srcDoc={generateChartCode(\n        JSON.stringify(generateMAU(state.selectedCommunityAccountMembers)),\n        \"mau\"\n      )}\n    />\n    {/*MAU Result: {JSON.stringify(generateMAU(state.selectedCommunityAccountMembers))} */}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/irfi.near/widget/RCDashboard-WIP", "fact_widget_deployments_id": "896bed8829fa388df5b282098251d153", "inserted_timestamp": "2023-11-29T21:21:36.596Z", "modified_timestamp": "2023-12-20T00:36:59.366Z", "__row_index": 10}