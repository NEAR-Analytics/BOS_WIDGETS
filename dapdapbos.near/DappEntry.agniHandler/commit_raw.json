{"tx_hash": "6LqD6MoY9oezQP3W1WtrX7uFeu7F5TXr5RkVFG1DC4bJ", "action_id_social": "3e3S2aUJ9AeBgZ1UQBimWvaK8oXTArkeWMdSPCL2djHw-0-widget", "block_id": 104285073, "block_timestamp": "2023-10-27T02:15:35.339Z", "signer_id": "dapdapbos.near", "widget_name": "DappEntry.agniHandler", "source_code": "const swapRouterV3Abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInputSingle\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"refundETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountMinimum\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"unwrapWMNT\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  inputCurrencyAmount,\n  outputCurrencyAmount,\n  inputCurrency,\n  outputCurrency,\n  wethAddress,\n  account,\n  fee,\n  chainId,\n  routerAddress,\n  swapping: swapping,\n  title,\n  onError,\n  onSuccess,\n} = props;\nif (!swapping || !account) return \"\";\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst value = expandToken(inputCurrencyAmount, inputCurrency.decimals).toFixed(\n  0\n);\n\nconst signer = Ethers.provider().getSigner();\n\nconst abi = swapRouterV3Abi;\nconst iface = new ethers.utils.Interface(abi);\n\nconst deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\nconst tokenIn =\n  inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\nconst tokenOut =\n  outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\nconst options = {\n  gasLimit: 250000,\n  value: inputCurrency.address === \"native\" ? value : \"0\",\n};\n\nconst inputs = [\n  {\n    tokenIn,\n    tokenOut,\n    fee: fee,\n    recipient:\n      outputCurrency.address === \"native\"\n        ? \"0x0000000000000000000000000000000000000000\"\n        : account,\n    deadline: deadline.toFixed(),\n    amountIn: value,\n    amountOutMinimum: \"0\",\n    sqrtPriceLimitX96: \"0\",\n  },\n];\n\nconst multicallParams = [];\nconst encodedDataCallSwap = iface.encodeFunctionData(\n  \"exactInputSingle\",\n  inputs\n);\n\nmulticallParams.push(encodedDataCallSwap);\n\nif (outputCurrency.address === \"native\") {\n  multicallParams.push(iface.encodeFunctionData(\"unwrapWMNT\", [\"0\", account]));\n}\n\nconst multicallContract = new ethers.Contract(routerAddress, abi, signer);\n\nconst multicallit = () => {\n  return multicallContract\n    .multicall(multicallParams, options)\n    .then((res) => {\n      onSuccess(res);\n    })\n    .catch((err) => {\n      console.log(err);\n      onError(err);\n    });\n};\n\nmulticallContract.estimateGas\n  .multicall(multicallParams, { ...options, gasLimit: 5000000 })\n  .then((gas) => {\n    const gasLimit = gas.toString();\n\n    return Big(gasLimit).times(1.1).toFixed(0);\n  })\n  .then((gasLimit) => {\n    return multicallContract\n      .multicall(multicallParams, { value: options.value, gasLimit })\n      .then((res) => {\n        onSuccess(res);\n      })\n      .catch((err) => {\n        console.log(err);\n        onError(err);\n      });\n  })\n  .catch((err) => {\n    if (err.code === \"UNPREDICTABLE_GAS_LIMIT\") {\n      return multicallit();\n    }\n\n    onError(err);\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/DappEntry.agniHandler", "fact_widget_deployments_id": "e895a942ec484a9dc07e0cb0ecf84d41", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}