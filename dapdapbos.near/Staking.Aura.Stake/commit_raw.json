{"tx_hash": "H6yxZ1F9cw6ZhitDBpWquiaX3oT1pRCvUJ5BZUtTWJp9", "action_id_social": "FMsUUe3gfte3euXRrTgN2KDA4MPsFK77whYSAJxmvpxe-0-widget", "block_id": 109337263, "block_timestamp": "2024-01-01T17:31:43.392Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Aura.Stake", "source_code": "// select begin\nconst SelectContent = styled(\"Select.Content\")`\n  z-index: 1;\n  border-radius: 6px;\n  padding: 11px 0;\n  min-width: 148px;\n  border: 1px solid #373a53;\n  background: #262836;\n  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.25);\n`;\nconst SelectTrigger = styled.div`\n  width: 138px;\n  height: 34px;\n  background-color: #373a53;\n  border-radius: 12px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 12px;\n`;\n\nconst SelectItem = styled(\"Select.Item\")`\n  all: \"unset\";\n  height: 40px;\n  display: flex;\n  align-items: center;\n  padding-left: 16px;\n  user-select: none;\n  &:hover {\n    background: #979abe;\n  }\n  /* &[data-disabled]: {\n      color: red;\n      \n    } */\n\n  /* &[data-highlighted]: {\n      backgroundColor: violet.violet9,\n      color: violet.violet1,\n    } */\n`;\n\nconst SelectValue = styled.div``;\n// select end\n\n// switch begin\nconst SwitchRoot = styled(\"Switch.Root\")`\n  all: unset;\n  display: block;\n  width: 42px;\n  height: 24px;\n  background-color: #232534;\n  border-radius: 9999px;\n  position: relative;\n  box-shadow: 0 2px 10px #232534;\n  border: 1px solid #373a53;\n  &[data-state=\"checked\"] {\n    background-color: #783ae3;\n  }\n`;\n\nconst SwitchThumb = styled(\"Switch.Thumb\")`\n  all: unset;\n  display: block;\n  width: 18px;\n  height: 18px;\n  background-color: white;\n  border-radius: 9999px;\n  box-shadow: 0 2px 2px var(--blackA7);\n  transition: transform 100ms;\n  transform: translateX(2px);\n  will-change: transform;\n  border: 1px solid #373a53;\n  &[data-state=\"checked\"] {\n    transform: translateX(19px);\n  }\n`;\n// switch end\nconst StakePanel = styled.div`\n  width: 510px;\n  margin: 0 auto;\n  /* reset input */\n  .bos-input-number {\n    background-color: var(--dark);\n    color: var(--white);\n  }\n`;\n\nconst AmountList = styled.div`\n  display: flex;\n  font-size: var(--fz12);\n  color: var(--purple);\n  justify-content: space-between;\n  padding: 10px 0 16px;\n  .amount-left {\n  }\n  .amount-right {\n  }\n  .amount-white {\n    color: var(--white);\n  }\n`;\nconst StakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 14px;\n`;\nconst UnStakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 22px;\n  align-items: center;\n  .switch-wrap {\n    display: flex;\n    align-items: center;\n    column-gap: 8px;\n    color: var(--purple);\n  }\n`;\n\nconst ArrowSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"12\"\n    height=\"7\"\n    viewBox=\"0 0 12 7\"\n    fill=\"none\"\n  >\n    <path\n      d=\"M1 1L6 5L11 1\"\n      stroke=\"#979ABE\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\nconst ChevronDownIcon = styled.div``;\n\n// type: STAKE | UN_STAKE\nconst { type } = props;\nState.init({\n  isClaimRewards: false,\n  selectValue: selectData[0].value,\n});\n\nconst selectData = [\n  { value: \"usdt+usdc\", label: \"USDT USDC\" },\n  { value: \"usdt\", label: \"USDT\" },\n  { value: \"usdc\", label: \"USDC\" },\n];\nconst handleSwitch = (isChecked) => {\n  State.update({\n    isClaimRewards: isChecked,\n  });\n};\n\nconst handleSelect = (value) => {\n  State.update({\n    selectValue: value,\n  });\n};\n\nconst renderExtra = () => {\n  switch (type) {\n    case \"STAKE\":\n      return (\n        <>\n          <AmountList>\n            <span>$0.00</span>\n            <span>\n              Balance: <span className=\"amount-white\">123.35</span> BPT\n            </span>\n          </AmountList>\n          <StakeBtnWrap>\n            <Widget\n              src=\"dapdapbos.near/widget/Staking.Aura.Button\"\n              props={{\n                text: \"Approve\",\n                type: \"primary\",\n                style: { flex: 1 },\n                loading: true,\n                onClick: () => {\n                  console.log(\"click btn\");\n                },\n              }}\n            />\n            <Widget\n              src=\"dapdapbos.near/widget/Staking.Aura.Button\"\n              props={{\n                text: \"Stake\",\n                type: \"primary\",\n                style: { flex: 1 },\n                disabled: true,\n                onClick: () => {\n                  console.log(\"click btn2\");\n                },\n              }}\n            />\n          </StakeBtnWrap>\n        </>\n      );\n    case \"UN_STAKE\":\n      return (\n        <>\n          <AmountList>\n            <span>$0.00</span>\n            <span>\n              You Staked: <span className=\"amount-white\">123.35</span> BPT\n            </span>\n          </AmountList>\n          <UnStakeBtnWrap>\n            <div className=\"switch-wrap\">\n              <SwitchRoot\n                checked={state.isClaimRewards}\n                onCheckedChange={handleSwitch}\n              >\n                <SwitchThumb />\n              </SwitchRoot>\n              <span>Claim Rewards</span>\n            </div>\n            <Widget\n              src=\"dapdapbos.near/widget/Staking.Aura.Button\"\n              props={{\n                text: \"Unstake\",\n                type: \"primary\",\n                style: { flex: 1 },\n                disabled: true,\n                onClick: () => {\n                  console.log(\"click btn2\");\n                },\n              }}\n            />\n          </UnStakeBtnWrap>\n        </>\n      );\n  }\n};\n\nreturn (\n  <StakePanel>\n    <div className=\"input-group\">\n      <input\n        type=\"number\"\n        className=\"form-control bos-input-number\"\n        placeholder=\"0.0\"\n      />\n      <div className=\"input-group-append\">\n        <Select.Root value={state.selectValue} onValueChange={handleSelect}>\n          <Select.Trigger asChild>\n            <SelectTrigger>\n              <Select.Value asChild>\n                <SelectValue>\n                  {\n                    selectData.find((item) => item.value === state.selectValue)\n                      ?.label\n                  }\n                </SelectValue>\n              </Select.Value>\n              <Select.Icon>\n                <ChevronDownIcon>{ArrowSvg}</ChevronDownIcon>\n              </Select.Icon>\n            </SelectTrigger>\n          </Select.Trigger>\n\n          <SelectContent>\n            <Select.Viewport>\n              <Select.Group>\n                {selectData?.map((item) => (\n                  <SelectItem key={item.value} value={item.value}>\n                    {item.label}\n                  </SelectItem>\n                ))}\n              </Select.Group>\n            </Select.Viewport>\n          </SelectContent>\n        </Select.Root>\n      </div>\n    </div>\n    {renderExtra()}\n  </StakePanel>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Aura.Stake", "fact_widget_deployments_id": "bf6da604e731dc6723cf1be2da63c490", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 12}