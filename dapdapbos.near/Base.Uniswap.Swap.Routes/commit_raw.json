{"tx_hash": "EcFtNYf2C37D4arh9fjQBv7FQQp3m4RRiDjsq7S74CtE", "action_id_social": "88VeCTi1G54TJD2Yn3sxUDbGq7gB4fKpQTvC76rdjt8o-0-widget", "block_id": 119044071, "block_timestamp": "2024-05-16T12:09:09.903Z", "signer_id": "dapdapbos.near", "widget_name": "Base.Uniswap.Swap.Routes", "source_code": "const Layer = styled.div`\n  position: fixed;\n  left: 0px;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n`;\nconst StyledContainer = styled.div`\n  border-radius: 12px;\n  background: #fff;\n  padding: 12px;\n  width: 333px;\n  flex-shrink: 0;\n  position: absolute;\n  @media (max-width: 768px) {\n    left: 30px !important;\n  }\n`;\nconst StyledRoutes = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst Route = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  .second-token {\n    margin-left: -6px;\n  }\n`;\nconst RouteWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n`;\nconst Tag = styled.div`\n  flex-shrink: 0;\n  border-radius: 6px;\n  background: #262626;\n  display: flex;\n  align-items: center;\n  padding: 0px 4px;\n  color: #8e8e8e;\n  font-size: 10px;\n  font-weight: 500;\n  gap: 2px;\n  .white {\n    color: #fff;\n    font-size: 12px;\n    font-weight: 500;\n  }\n`;\nconst DashLine = styled.div`\n  flex-grow: 1;\n  height: 1px;\n  border-bottom: 1px dashed #8e8e8e;\n`;\nconst Desc = styled.div`\n  color: #8e8e8e;\n  font-size: 10px;\n  font-style: normal;\n  font-weight: 400;\n  margin-top: 10px;\n`;\n\nconst { gasCost, inputCurrency, outputCurrency } = props;\nconst routes = props.routes || [];\nreturn (\n  <Layer\n    onClick={() => {\n      props.onClose();\n    }}\n    onTouchStart={() => {\n      props.onClose();\n    }}\n    onMouseDown={() => {\n      props.onClose();\n    }}\n  >\n    <StyledContainer\n      style={{\n        left: props.clientX + 10 + \"px\",\n        top: props.clientY + 20 + \"px\",\n      }}\n    >\n      {routes.map((route, i) => (\n        <StyledRoutes key={i + Math.random()}>\n          <Route>\n            <Widget\n              src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.TokenIcon\"\n              props={{\n                size: 16,\n                token: inputCurrency,\n              }}\n            />\n            <Tag>\n              <span className=\"white\">{route.route[0]?.type}</span>\n              <span>{route.percent}%</span>\n            </Tag>\n          </Route>\n          <DashLine />\n          {route.route.map((path, i) => (\n            <RouteWrapper key={path.address}>\n              <Route>\n                <Widget\n                  src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.TokenIcon\"\n                  props={{\n                    size: 16,\n                    token: path.token0,\n                  }}\n                />\n                <div className=\"second-token\">\n                  <Widget\n                    src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.TokenIcon\"\n                    props={{\n                      size: 16,\n                      token: path.token1,\n                    }}\n                  />\n                </div>\n                <Tag>\n                  <span>{path.fee / 10000}%</span>\n                </Tag>\n              </Route>\n              <DashLine />\n            </RouteWrapper>\n          ))}\n          <Route>\n            <Widget\n              src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.TokenIcon\"\n              props={{\n                size: 16,\n                token: outputCurrency,\n              }}\n            />\n          </Route>\n        </StyledRoutes>\n      ))}\n      <Desc>\n        Best price route costs ~$\n        {gasCost} in gas. This route optimizes your total output by considering\n        split routes, multiple hops, and the gas cost of each step.\n      </Desc>\n    </StyledContainer>\n  </Layer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Base.Uniswap.Swap.Routes", "fact_widget_deployments_id": "f6d5ff2e9a1f8469e235dc15a7434b1e", "inserted_timestamp": "2024-05-16T13:49:44.417Z", "modified_timestamp": "2024-05-16T13:49:44.417Z", "__row_index": 0}