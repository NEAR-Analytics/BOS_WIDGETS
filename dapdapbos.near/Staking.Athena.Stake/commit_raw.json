{"tx_hash": "GhTpMP4DXNeVreh1dwLCFvZ2NExce6wDHWGdqeV9t4t1", "action_id_social": "6EzUjVyWeVj2sTGxAnmpThvMZgj5Wi67zYzm5DcJdEJ6-0-widget", "block_id": 114680157, "block_timestamp": "2024-03-14T07:49:52.370Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Athena.Stake", "source_code": "const StakePanel = styled.div`\n  width: 510px;\n  margin: 0 auto;\n  /* reset input */\n  .bos-input-number {\n    background-color: var(--dark);\n    color: var(--white);\n    border: none;\n    border-radius: 10px !important;\n  }\n  .input-group {\n    column-gap: 5px;\n  }\n  .append-token {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    position: absolute;\n    right: 12px;\n    /* top: 4px; */\n    height: 36px;\n    z-index: 5;\n  }\n`;\nconst AmountList = styled.div`\n  display: flex;\n  font-size: var(--fz12);\n  color: var(--purple);\n  justify-content: space-between;\n  padding: 10px 0 16px;\n  .amount-left {\n  }\n  .amount-right {\n  }\n  .amount-white {\n    text-decoration: underline;\n    color: var(--white);\n    cursor: pointer;\n  }\n`;\nconst StakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 14px;\n`;\nconst ChainBtnWrap = styled.div`\n  margin-top: 16px;\n  display: flex;\n`;\n\nconst ApproveABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst { data, account, TOKENS, toast, addAction } = props;\n\n// curToken: token address\nconst { poolType, tokenAddress: curToken, tokenAddress, StakingAddress } = data;\n\nState.init({\n  allowance: 0,\n  curTokenBal: 0,\n  needApprove: false,\n  isApproving: false,\n  isApproved: false,\n  canStake: false,\n  isStaking: false,\n  inputValue: \"\",\n});\n\nfunction handleApprove(tokenAddress, spender) {\n  State.update({\n    isApproving: true,\n  });\n  const TokenContract = new ethers.Contract(\n    tokenAddress,\n    ApproveABI,\n    Ethers.provider().getSigner()\n  );\n  console.info(\"to approve: \", state.inputValue, TOKENS[curToken].decimals);\n\n  TokenContract.approve(\n    spender,\n    ethers.utils.parseUnits(state.inputValue, TOKENS[curToken].decimals)\n  )\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"approve_tx_res:\", res);\n          State.update({\n            isApproved: status === 1,\n            isApproving: false,\n          });\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            isApproving: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        isApproving: false,\n      });\n      console.info(\"approve_error: \", err);\n    });\n}\n\nuseEffect(() => {\n  if (!state.inputValue) {\n    // input none\n    State.update({\n      needApprove: false,\n      canStake: false,\n    });\n    return false;\n  }\n  if (Big(state.allowance).lt(Big(state.inputValue || 0))) {\n    State.update({\n      canStake: false,\n      isApproved: false,\n      needApprove: true,\n    });\n  } else {\n    if (Big(state.inputValue || 0).gt(0)) {\n      State.update({\n        canStake: true,\n        needApprove: false,\n      });\n    }\n  }\n}, [state.inputValue, state.allowance, curToken]);\n\nuseEffect(() => {\n  if (state.isApproved && Big(state.inputValue || 0).gt(0)) {\n    State.update({\n      canStake: true,\n    });\n  } else {\n    State.update({\n      canStake: false,\n    });\n  }\n}, [state.isApproved]);\n\nconst handleInputChange = (e) => {\n  State.update({\n    inputValue: e.target.value,\n  });\n};\n\nfunction handleStake() {\n  if (poolType === \"Locking\") {\n    handleLocking();\n  }\n  if (poolType === \"MasterChief\") {\n    handleMasterChief();\n  }\n}\n\nfunction handleMasterChief() {\n  State.update({\n    isStaking: true,\n  });\n  const MasterChiefContract = new ethers.Contract(\n    StakingAddress,\n    [\n      {\n        type: \"function\",\n        stateMutability: \"nonpayable\",\n        outputs: [],\n        name: \"deposit\",\n        inputs: [\n          {\n            type: \"address\",\n            name: \"_lp\",\n            internalType: \"address\",\n          },\n          {\n            type: \"uint256\",\n            name: \"_amount\",\n            internalType: \"uint256\",\n          },\n        ],\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  const _amount = ethers.BigNumber.from(\n    ethers.utils.parseUnits(state.inputValue, TOKENS[curToken].decimals)\n  );\n  MasterChiefContract.deposit(\n    \"0x31cfdA26D5841d92333D8F9B3acbd5efEedb39c1\",\n    _amount,\n    {\n      gasLimit: 1173642,\n    }\n  )\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n            addAction?.({\n              type: \"Staking\",\n              action: \"Stake\",\n              token: TOKENS[curToken],\n              amount: state.inputValue,\n              template: \"Athena Finance\",\n              add: false,\n              status,\n              transactionHash,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .catch((error) => {\n          console.info(\"tx_error: \", error);\n          toast.fail?.({\n            title: \"Transaction Failed!\",\n            text: `${error.message}`,\n          });\n        })\n        .finally(() => {\n          State.update({\n            isStaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.info(\"LockingContract_error:\", err);\n      State.update({\n        isStaking: false,\n      });\n    });\n}\n\nfunction handleLocking() {\n  State.update({\n    isStaking: true,\n  });\n  const LockingContract = new ethers.Contract(\n    StakingAddress,\n    [\n      {\n        type: \"function\",\n        stateMutability: \"nonpayable\",\n        outputs: [],\n        name: \"deposit\",\n        inputs: [\n          {\n            type: \"uint256\",\n            name: \"_amount\",\n            internalType: \"uint256\",\n          },\n        ],\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  const _amount = ethers.BigNumber.from(\n    ethers.utils.parseUnits(state.inputValue, TOKENS[curToken].decimals)\n  );\n  LockingContract.deposit(_amount, {\n    gasLimit: 1173642,\n  })\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n            addAction?.({\n              type: \"Staking\",\n              action: \"Stake\",\n              token: TOKENS[curToken],\n              amount: state.inputValue,\n              template: \"Athena Finance\",\n              add: false,\n              status,\n              transactionHash,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .catch((error) => {\n          console.info(\"tx_error: \", error);\n          toast.fail?.({\n            title: \"Transaction Failed!\",\n            text: `${error.message}`,\n          });\n        })\n        .finally(() => {\n          State.update({\n            isStaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.info(\"LockingContract_error:\", err);\n      State.update({\n        isStaking: false,\n      });\n    });\n}\n\nfunction updateAllowance(allowanceRaw) {\n  const allowAmount = ethers.utils.formatUnits(\n    allowanceRaw,\n    TOKENS[curToken].decimals\n  );\n\n  State.update({\n    allowance: allowAmount,\n  });\n}\nfunction updateTokenBalance(bal) {\n  State.update({\n    curTokenBal: bal,\n  });\n}\n\nreturn (\n  <StakePanel>\n    <Widget\n      src=\"dapdapbos.near/widget/Utils.Allowance\"\n      props={{\n        tokenAddress: curToken,\n        owner: account,\n        spender: StakingAddress,\n        updateAllowance,\n      }}\n    />\n    <Widget\n      src=\"dapdapbos.near/widget/Utils.GetTokenBalance\"\n      props={{\n        tokenAddress: curToken,\n        owner: account,\n        updateTokenBalance,\n      }}\n    />\n    <div className=\"input-group\">\n      <input\n        value={state.inputValue}\n        type=\"number\"\n        className=\"form-control bos-input-number\"\n        placeholder=\"0.0\"\n        onChange={handleInputChange}\n      />\n      <div className=\"append-token\">\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Avatar\"\n          props={{ src: TOKENS[curToken].icon, size: 20 }}\n        />\n        {/* {TOKENS[curToken].symbol} */}\n      </div>\n    </div>\n\n    <AmountList>\n      <span></span>\n      <span>\n        Balance:{\" \"}\n        <span className=\"amount-white\">\n          {Number(state.curTokenBal).toFixed(2)}\n        </span>\n        {/* {TOKENS[curToken].symbol} */}\n      </span>\n    </AmountList>\n    <StakeBtnWrap>\n      <Widget\n        src=\"dapdapbos.near/widget/UI.Button\"\n        props={{\n          text: \"Approve\",\n          type: \"green\",\n          style: { flex: 1 },\n          disabled: !state.needApprove || state.isApproved,\n          loading: state.isApproving,\n          onClick: () => {\n            handleApprove(curToken, StakingAddress);\n          },\n        }}\n      />\n      <Widget\n        src=\"dapdapbos.near/widget/UI.Button\"\n        props={{\n          text: \"Stake\",\n          type: \"green\",\n          style: { flex: 1 },\n          disabled: !state.canStake,\n          loading: state.isStaking,\n          onClick: handleStake,\n        }}\n      />\n    </StakeBtnWrap>\n  </StakePanel>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Athena.Stake", "fact_widget_deployments_id": "7f3f651d1a863e691e1c14a248fded95", "inserted_timestamp": "2024-03-14T09:27:22.794Z", "modified_timestamp": "2024-03-14T09:27:22.794Z", "__row_index": 7}