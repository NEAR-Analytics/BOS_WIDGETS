{"tx_hash": "27n8bUJEfP9cV6ez267xs3DBPhBBmdvTcwv8PeamSweR", "action_id_social": "AmNCBXfP1S4xF75Np94C7zijp9RFWwXVR98ZpZSQEZ3d-0-widget", "block_id": 110316406, "block_timestamp": "2024-01-13T16:09:23.428Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Athena.Stake", "source_code": "const StakePanel = styled.div`\n  width: 510px;\n  margin: 0 auto;\n  /* reset input */\n  .bos-input-number {\n    background-color: var(--dark);\n    color: var(--white);\n    border: none;\n    border-radius: 10px !important;\n  }\n  .input-group {\n    column-gap: 5px;\n  }\n  .append-token {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    position: absolute;\n    right: 12px;\n    /* top: 4px; */\n    height: 36px;\n    z-index: 5;\n  }\n`;\nconst AmountList = styled.div`\n  display: flex;\n  font-size: var(--fz12);\n  color: var(--purple);\n  justify-content: space-between;\n  padding: 10px 0 16px;\n  .amount-left {\n  }\n  .amount-right {\n  }\n  .amount-white {\n    text-decoration: underline;\n    color: var(--white);\n  }\n`;\nconst StakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 14px;\n`;\nconst ChainBtnWrap = styled.div`\n  margin-top: 16px;\n  display: flex;\n`;\n\nconst AllowanceABI = [\n  \"function allowance(address owner, address spender) external view returns (uint256)\",\n];\nconst ApproveABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  data,\n  chainId,\n  account,\n  TOKENS,\n  CHAIN_ID,\n  LockingABI,\n  //\n  RewardPoolDepositWrapper,\n  RewardPoolDepositABI,\n  toast,\n  switchChain,\n  tokenIcons,\n} = props;\n\n// curToken: token address\nconst { poolType, tokenAddress: curToken, StakingAddress } = data;\n\nState.init({\n  allowance: 0,\n  curTokenBal: 0,\n  needApprove: false,\n  isApproving: false,\n  isApproved: false,\n  canStake: false,\n  isStaking: false,\n  inputValue: \"\",\n});\n\nconst getAllowance = (tokenAddress) => {\n  const TokenContract = new ethers.Contract(\n    tokenAddress,\n    AllowanceABI,\n    Ethers.provider()\n  );\n  TokenContract.allowance(account, RewardPoolDepositWrapper)\n    .then((allowanceRaw) => {\n      const allowAmount = ethers.utils.formatUnits(\n        allowanceRaw._hex,\n        TOKENS[curToken].decimals\n      );\n      console.info(\"get allow amount: \", allowAmount);\n      State.update({\n        allowance: allowAmount,\n      });\n    })\n    .catch((e) => {\n      console.log(\"getAllowance_error\", e);\n    });\n};\n\nconst handleApprove = (tokenAddress) => {\n  State.update({\n    isApproving: true,\n  });\n  const TokenContract = new ethers.Contract(\n    tokenAddress,\n    ApproveABI,\n    Ethers.provider().getSigner()\n  );\n  console.info(\"to approve: \", state.inputValue, TOKENS[curToken].decimals);\n  TokenContract.approve(\n    RewardPoolDepositWrapper,\n    ethers.utils.parseUnits(state.inputValue, TOKENS[curToken].decimals)\n  )\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"approve_tx_res:\", res);\n          State.update({\n            isApproved: status === 1,\n            isApproving: false,\n          });\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            isApproving: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.info(\"approve_error: \", err);\n    });\n};\n\nfunction getTokenBal() {\n  const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const { decimals } = TOKENS[curToken];\n  const tokenContract = new ethers.Contract(\n    curToken,\n    erc20Abi,\n    Ethers.provider()\n  );\n  tokenContract\n    .balanceOf(account)\n    .then((balanceBig) => {\n      // console.log(\n      //   balanceBig,\n      //   balanceBig.toString(),\n      //   ethers.utils.formatUnits(balanceBig, decimals),\n      //   Big(ethers.utils.formatUnits(balanceBig, decimals)).toFixed(2)\n      // );\n      const bal = Big(\n        ethers.utils.formatUnits(balanceBig, decimals) || 0\n      ).toFixed(2);\n      State.update({\n        curTokenBal: bal,\n      });\n    })\n    .catch((err) => {\n      console.info(\"getTokenBal_error:\", err);\n    });\n}\n\nuseEffect(() => {\n  getAllowance(curToken);\n  getTokenBal();\n}, []);\n\nuseEffect(() => {\n  if (!state.inputValue) {\n    // input none\n    State.update({\n      needApprove: false,\n      canStake: false,\n    });\n    return false;\n  }\n  if (Big(state.allowance).lt(Big(state.inputValue || 0))) {\n    State.update({\n      canStake: false,\n      needApprove: true,\n    });\n  } else {\n    State.update({\n      canStake: true,\n      needApprove: false,\n    });\n  }\n}, [state.inputValue, state.allowance, curToken]);\n\nuseEffect(() => {\n  if (state.isApproved) {\n    State.update({\n      canStake: true,\n    });\n  } else {\n    State.update({\n      canStake: false,\n    });\n  }\n}, [state.isApproved]);\n\nconst handleInputChange = (e) => {\n  State.update({\n    inputValue: e.target.value,\n  });\n};\n\nfunction handleStake() {\n  console.log(\"handleStake----\", poolType);\n  if (poolType === \"Locking\") {\n    handleLocking();\n  }\n}\n\nfunction handleLocking() {\n  State.update({\n    isStaking: true,\n  });\n  const LockingContract = new ethers.Contract(\n    StakingAddress,\n    LockingABI,\n    Ethers.provider().getSigner()\n  );\n  const _amount = ethers.BigNumber.from(\n    ethers.utils.parseUnits(state.inputValue, TOKENS[curToken].decimals)\n  );\n  LockingContract.deposit(_amount, {\n    gasLimit: 1173642,\n  })\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .catch((error) => {\n          console.info(\"tx_error: \", error);\n          toast.fail?.({\n            title: \"Transaction Failed!\",\n            text: `${error.message}`,\n          });\n        })\n        .finally(() => {\n          State.update({\n            isStaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.info(\"LockingContract_error:\", err);\n      State.update({\n        isStaking: false,\n      });\n    });\n}\n\nconst renderExtra = () => {\n  if (chainId !== CHAIN_ID) {\n    return (\n      <ChainBtnWrap>\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Button\"\n          props={{\n            text: \"Switch to Metis\",\n            type: \"green\",\n            style: { flex: 1 },\n            onClick: switchChain,\n          }}\n        />\n      </ChainBtnWrap>\n    );\n  }\n\n  return (\n    <>\n      <AmountList>\n        <span></span>\n        <span>\n          Balance: <span className=\"amount-white\">{state.curTokenBal}</span>\n          {/* {TOKENS[curToken].symbol} */}\n        </span>\n      </AmountList>\n      <StakeBtnWrap>\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Button\"\n          props={{\n            text: \"Approve\",\n            type: \"green\",\n            style: { flex: 1 },\n            disabled: !state.needApprove || state.isApproved,\n            loading: state.isApproving,\n            onClick: () => {\n              handleApprove(curToken);\n            },\n          }}\n        />\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Button\"\n          props={{\n            text: \"Stake\",\n            type: \"green\",\n            style: { flex: 1 },\n            disabled: !state.canStake,\n            loading: state.isStaking,\n            onClick: handleStake,\n          }}\n        />\n      </StakeBtnWrap>\n    </>\n  );\n};\n\nreturn (\n  <StakePanel>\n    <div className=\"input-group\">\n      <input\n        value={state.inputValue}\n        type=\"number\"\n        className=\"form-control bos-input-number\"\n        placeholder=\"0.0\"\n        onChange={handleInputChange}\n      />\n      <div className=\"append-token\">\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Avatar\"\n          props={{ src: TOKENS[curToken].icon, size: 20 }}\n        />\n        {/* {TOKENS[curToken].symbol} */}\n      </div>\n    </div>\n    {renderExtra()}\n  </StakePanel>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Athena.Stake", "fact_widget_deployments_id": "0aae5ed0f6ef4baae439136a28904e18", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}