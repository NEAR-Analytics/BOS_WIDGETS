{"tx_hash": "Anps8eEqEeK6M6K1wmCMWjocgPAo9v7qXrDWgKGpbP3P", "action_id_social": "APd3t73tcHWEZ42AhLjfxA9bL8Zrh4B2BZYEDraawqTL-0-widget", "block_id": 121352141, "block_timestamp": "2024-06-17T09:15:51.070Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.PoolData", "source_code": "const { account, chainId, onLoad } = props;\n\nuseEffect(() => {\n  let tokens = {};\n  let config = {};\n  let count = 0;\n  let basePools = {};\n  let tvlPools = {};\n\n  const getConfig = () => {\n    asyncFetch(\"/config/hyperlock.json\")\n      .then((res) => {\n        config = res.body;\n        getTokens();\n      })\n      .catch((err) => {\n        getTokens();\n      });\n  };\n  const getTokens = () => {\n    asyncFetch(\n      \"https://raw.githubusercontent.com/hyperlockfi/tokenlists/main/generated/hyperlock.tokenlist.json\"\n    )\n      .then((res) => {\n        const data = JSON.parse(res.body);\n        tokens = data.tokens.reduce(\n          (acc, cur) => ({ ...acc, [cur.address.toLowerCase()]: cur }),\n          {}\n        );\n\n        getPoints();\n      })\n      .catch((err) => {\n        getPoints();\n      });\n  };\n  const getPoints = () => {\n    asyncFetch(\n      \"https://graph.hyperlock.finance/subgraphs/name/hyperlock/points-blast-mainnet-B\",\n      {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          operationName: \"Pools\",\n          query:\n            'query Pools($where: Pool_filter, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $account: String! = \"\") {\\n  pools(where: $where, orderBy: $orderBy, orderDirection: $orderDirection) {\\n    ...Pool__fields\\n  }\\n}\\n\\nfragment Pool__fields on Pool {\\n  id\\n  type\\n  addedAt\\n  lpToken {\\n    ...Token__fields\\n  }\\n  totalAllocation\\n  epochs {\\n    id\\n    epoch\\n    allocation\\n  }\\n  token0 {\\n    ...Token__fields\\n  }\\n  token1 {\\n    ...Token__fields\\n  }\\n  poolAccounts(where: {account: $account}) {\\n    id\\n    account {\\n      totalBalance\\n      epochs {\\n        id\\n        epoch\\n        balance\\n      }\\n    }\\n    staked\\n  }\\n  v2PoolData {\\n    totalStaked\\n  }\\n  v3PoolData {\\n    fee\\n    nfts: tokens(where: {account_ends_with: $account}) {\\n      id\\n      tokenId\\n      isStaked\\n    }\\n  }\\n}\\n\\nfragment Token__fields on Token {\\n  id\\n  name\\n  symbol\\n  decimals\\n}',\n          variables: {\n            account,\n            chainId,\n            poolsVariables: {},\n            staleTime: 162000,\n          },\n        }),\n      }\n    )\n      .then((res) => {\n        const pools = res.body?.data?.pools;\n\n        if (!pools.length) {\n          onLoad({\n            loading: false,\n            pools: basePools,\n            poolsList: Object.values(basePools),\n          });\n          return;\n        }\n        const v3Pools = {};\n        const v2Pools = {};\n        pools.forEach((pool) => {\n          const token0 = {\n            ...pool.token0,\n            icon: tokens[pool.token0.id.toLowerCase()]?.logoURI,\n          };\n          const token1 = {\n            ...pool.token1,\n            icon: tokens[pool.token1.id.toLowerCase()]?.logoURI,\n          };\n          const _pool = {\n            id: pool.id,\n            token0,\n            token1,\n            fee: pool.v3PoolData?.fee,\n            type: pool.type,\n          };\n          if (pool.type === \"V3\") {\n            v3Pools[pool.id] = { ..._pool, name: pool.lpToken.symbol };\n          } else {\n            v2Pools[pool.id] = {\n              ..._pool,\n              name: pool.token0.symbol + \"-\" + pool.token1.symbol,\n            };\n          }\n        });\n\n        getV3Tvl(v3Pools);\n        getV2Tvl(v2Pools);\n        basePools = { ...v3Pools, ...v2Pools };\n      })\n      .catch((err) => {\n        onLoad({\n          loading: false,\n          pools: basePools,\n          poolsList: Object.values(basePools),\n        });\n      });\n  };\n  const getV3Tvl = (pools) => {\n    const addresses = Object.keys(pools);\n    asyncFetch(\"https://api.hyperlock.finance/v1/blast-mainnet/points/tvl\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ addresses }),\n    })\n      .then((res) => {\n        const data = res.body;\n        let prices = {};\n        const _pools = Object.values(pools)\n          .filter((pool) => data[pool.id])\n          .map((pool) => {\n            const { token0Amount, token1Amount, token0Price, token1Price } =\n              data[pool.id];\n\n            const _token0 = Big(token0Amount)\n              .mul(token0Price)\n              .div(Big(10).pow(pool.token0.decimals));\n            const _token1 = Big(token1Amount)\n              .mul(token1Price)\n              .div(Big(10).pow(pool.token1.decimals));\n\n            prices[pool.token0.id] = token0Price;\n            prices[pool.token1.id] = token1Price;\n\n            const defaultStackIcons = config.stack?.[\"default\"] || [];\n            const stackIcons = config.stack?.[pool.id] || [];\n\n            return {\n              ...pool,\n              token0: { ...pool.token0, price: token0Price },\n              token1: { ...pool.token1, price: token1Price },\n              tvl: _token0.add(_token1).toString(),\n              stackIcons: [...defaultStackIcons, ...stackIcons].map((address) =>\n                address ? tokens[address.toLowerCase()].logoURI : \"\"\n              ),\n            };\n          })\n          .filter((pool) => Big(pool.tvl).gt(0));\n\n        tvlPools = {\n          ...tvlPools,\n          ..._pools.reduce((acc, pool) => ({ ...acc, [pool.id]: pool }), {}),\n        };\n        count++;\n        if (count === 2) {\n          onLoad({\n            loading: false,\n            pools: tvlPools,\n            poolsList: Object.values(tvlPools).sort((a, b) =>\n              Big(a.tvl).gt(b.tvl) ? -1 : 1\n            ),\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          loading: false,\n          pools: basePools,\n          poolsList: Object.values(basePools),\n        });\n      });\n  };\n  const getV2Tvl = (pools) => {\n    const addresses = Object.keys(pools);\n    asyncFetch(\n      \"https://graph.hyperlock.finance/subgraphs/name/hyperlock/v2-subgraph-mainnet-b\",\n      {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          operationName: \"Prices\",\n          query:\n            'query Prices($account: String, $ids: [ID!]) {\\n  prices: pairs(where: {id_in: $ids}) {\\n    id\\n    token0 {\\n      id\\n    }\\n    token1 {\\n      id\\n    }\\n    token0PriceUSD\\n    token1PriceUSD\\n    lpTokenPriceUSD\\n    system: liquidityPositions(\\n      where: {user: \"0xc3ecadb7a5fab07c72af6bcfbd588b7818c4a40e\"}\\n    ) {\\n      liquidityTokenBalance\\n    }\\n  }\\n}',\n          variables: { ids: addresses },\n        }),\n      }\n    )\n      .then((res) => {\n        const data = res.body.data.prices;\n        let prices = {};\n        const _pools = data\n          .map((item) => {\n            const pool = pools[item.id];\n\n            const lpPrice = item.lpTokenPriceUSD;\n            let lpBalance = Big(0);\n\n            item.system?.forEach((slip) => {\n              lpBalance = lpBalance.add(slip.liquidityTokenBalance);\n            });\n\n            const token0Price = item.token0PriceUSD;\n            const token1Price = item.token1PriceUSD;\n\n            prices[pool.token0.id] = token0Price;\n            prices[pool.token1.id] = token1Price;\n\n            const defaultStackIcons = config.stack?.[\"default\"] || [];\n            const stackIcons = config.stack?.[pool.id] || [];\n\n            return {\n              ...pool,\n              token0: { ...pool.token0, price: token0Price },\n              token1: { ...pool.token1, price: token1Price },\n              tvl: lpBalance.mul(lpPrice).toString(),\n              stackIcons: [...defaultStackIcons, ...stackIcons].map((address) =>\n                address ? tokens[address.toLowerCase()].logoURI : \"\"\n              ),\n            };\n          })\n          .filter((pool) => Big(pool.tvl).gt(0));\n\n        tvlPools = {\n          ...tvlPools,\n          ..._pools.reduce((acc, pool) => ({ ...acc, [pool.id]: pool }), {}),\n        };\n\n        count++;\n        if (count === 2) {\n          onLoad({\n            loading: false,\n            pools: tvlPools,\n            poolsList: Object.values(tvlPools).sort((a, b) =>\n              Big(a.tvl).gt(b.tvl) ? -1 : 1\n            ),\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          loading: false,\n          pools: basePools,\n          poolsList: Object.values(basePools),\n        });\n      });\n  };\n  getConfig();\n}, []);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.PoolData", "fact_widget_deployments_id": "628e83ad4f46bbfca1ad23c7635c1f2d", "inserted_timestamp": "2024-06-17T10:54:10.290Z", "modified_timestamp": "2024-06-17T10:54:10.290Z", "__row_index": 3}