{"tx_hash": "FeBiP8QTugRgasHK3WkuVxTySrvvf7pHodnrmVMT5qCD", "action_id_social": "V9Z1QGBHaa63jgc5dRJ5L9GJzd3c774RSiSjjMx5BhC-0-widget", "block_id": 117939297, "block_timestamp": "2024-04-30T08:32:40.752Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.PoolData", "source_code": "const { account, chainId, onLoad } = props;\n\nuseEffect(() => {\n  let tokens = {};\n  let config = {};\n\n  const initData = {\n    pools: [],\n  };\n  const getConfig = () => {\n    asyncFetch(\"/config/hyperlock.json\")\n      .then((res) => {\n        config = res.body;\n        getTokens();\n      })\n      .catch((err) => {\n        getTokens();\n      });\n  };\n  const getTokens = () => {\n    asyncFetch(\n      \"https://raw.githubusercontent.com/hyperlockfi/tokenlists/main/generated/hyperlock.tokenlist.json\"\n    )\n      .then((res) => {\n        const data = JSON.parse(res.body);\n        tokens = data.tokens.reduce(\n          (acc, cur) => ({ ...acc, [cur.address.toLowerCase()]: cur }),\n          {}\n        );\n\n        getPoints();\n      })\n      .catch((err) => {\n        getPoints();\n      });\n  };\n  const getPoints = () => {\n    asyncFetch(\n      \"https://graph.hyperlock.finance/subgraphs/name/hyperlock/points-blast-mainnet-B\",\n      {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          operationName: \"Pools\",\n          query:\n            'query Pools($where: Pool_filter, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $account: String! = \"\") {\\n  pools(where: $where, orderBy: $orderBy, orderDirection: $orderDirection) {\\n    ...Pool__fields\\n  }\\n}\\n\\nfragment Pool__fields on Pool {\\n  id\\n  type\\n  addedAt\\n  lpToken {\\n    ...Token__fields\\n  }\\n  totalAllocation\\n  epochs {\\n    id\\n    epoch\\n    allocation\\n  }\\n  token0 {\\n    ...Token__fields\\n  }\\n  token1 {\\n    ...Token__fields\\n  }\\n  poolAccounts(where: {account: $account}) {\\n    id\\n    account {\\n      totalBalance\\n      epochs {\\n        id\\n        epoch\\n        balance\\n      }\\n    }\\n    staked\\n  }\\n  v2PoolData {\\n    totalStaked\\n  }\\n  v3PoolData {\\n    fee\\n    nfts: tokens(where: {account_ends_with: $account}) {\\n      id\\n      tokenId\\n      isStaked\\n    }\\n  }\\n}\\n\\nfragment Token__fields on Token {\\n  id\\n  name\\n  symbol\\n  decimals\\n}',\n          variables: {\n            account,\n            chainId,\n            poolsVariables: {},\n            staleTime: 162000,\n          },\n        }),\n      }\n    )\n      .then((res) => {\n        const pools = res.body?.data?.pools;\n\n        if (!pools.length) {\n          onLoad({ loading: false, ...initData });\n          return;\n        }\n        const _pools = {};\n        pools\n          .filter((pool) => pool.type === \"V3\")\n          .forEach((pool) => {\n            const token0 = {\n              ...pool.token0,\n              icon: tokens[pool.token0.id.toLowerCase()]?.logoURI,\n            };\n            const token1 = {\n              ...pool.token1,\n              icon: tokens[pool.token1.id.toLowerCase()]?.logoURI,\n            };\n            _pools[pool.id] = {\n              id: pool.id,\n              name: pool.lpToken.symbol,\n              token0,\n              token1,\n              fee: pool.v3PoolData?.fee,\n              type: pool.type,\n            };\n          });\n        getTvl(_pools);\n        initData.pools = _pools;\n      })\n      .catch((err) => {\n        onLoad({ loading: false, ...initData });\n      });\n  };\n  const getTvl = (pools) => {\n    const addresses = Object.keys(pools);\n    asyncFetch(\"https://api.hyperlock.finance/v1/blast-mainnet/points/tvl\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ addresses }),\n    })\n      .then((res) => {\n        const data = res.body;\n        let prices = {};\n        const _pools = Object.values(pools)\n          .filter((pool) => data[pool.id])\n          .map((pool) => {\n            const { token0Amount, token1Amount, token0Price, token1Price } =\n              data[pool.id];\n\n            const _token0 = Big(token0Amount)\n              .mul(token0Price)\n              .div(Big(10).pow(pool.token0.decimals));\n            const _token1 = Big(token1Amount)\n              .mul(token1Price)\n              .div(Big(10).pow(pool.token1.decimals));\n\n            prices[pool.token0.id] = token0Price;\n            prices[pool.token1.id] = token1Price;\n\n            const defaultStackIcons = config.stack?.[\"default\"] || [];\n            const stackIcons = config.stack?.[pool.id] || [];\n\n            return {\n              ...pool,\n              token0: { ...pool.token0, price: token0Price },\n              token1: { ...pool.token1, price: token1Price },\n              tvl: _token0.add(_token1).toString(),\n              stackIcons: [...defaultStackIcons, ...stackIcons].map((address) =>\n                address ? tokens[address.toLowerCase()].logoURI : \"\"\n              ),\n              points: config.points?.[pool.id],\n            };\n          })\n          .filter((pool) => Big(pool.tvl).gt(0));\n\n        onLoad({\n          loading: false,\n          ...initData,\n          pools: _pools.reduce(\n            (acc, pool) => ({ ...acc, [pool.id]: pool }),\n            {}\n          ),\n        });\n      })\n      .catch((err) => {\n        onLoad({ loading: false, ...initData });\n      });\n  };\n  getConfig();\n}, []);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.PoolData", "fact_widget_deployments_id": "33a13914e95d743a6849c1a3635d9673", "inserted_timestamp": "2024-04-30T09:39:27.442Z", "modified_timestamp": "2024-04-30T10:39:28.910Z", "__row_index": 0}