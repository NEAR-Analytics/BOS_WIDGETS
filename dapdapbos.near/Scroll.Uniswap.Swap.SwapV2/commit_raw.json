{"tx_hash": "8UFBmvkq615XknsPfoCPzmJviqJtuJdfVZFvhUXERgiQ", "action_id_social": "2qmTtebcevMsApnUvf939aQ9K9LsigqQFzyahdM4wyKz-0-widget", "block_id": 108472065, "block_timestamp": "2023-12-21T10:10:48.302Z", "signer_id": "dapdapbos.near", "widget_name": "Scroll.Uniswap.Swap.SwapV2", "source_code": "const {\n  title,\n  chainId,\n  chainName,\n  wethToken,\n  dexConfig,\n  amountOutFn,\n  slippage,\n  account,\n  handlerV3,\n  handleSyncswap,\n  QuoterSyncswap,\n  onImport,\n  onSetSlippage,\n} = props;\n\nif (account) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ currentChainId: chainId });\n    })\n    .catch(() => {});\n}\n\nState.init({\n  inputCurrency: dexConfig.defaultCurrencies.input,\n  outputCurrency: null,\n  uniType: dexConfig.type,\n  inputCurrencyAmount: \"1\",\n  outputCurrencyAmount: \"\",\n  maxInputBalance: \"0\",\n  maxOutputBalance: \"0\",\n  tradeType: \"in\",\n  targetUnitAmount: 0,\n  noPair: false,\n  chainId,\n  updateInputTokenBalance: true,\n  updateOutputTokenBalance: true,\n  loading: false,\n  displayCurrencySelect: false,\n  selectedTokenAddress: \"\",\n  currencySelectType: 0,\n  debounce: (fn, wait) => {\n    let timer;\n    return () => {\n      clearTimeout(timer);\n      timer = setTimeout(fn, wait);\n    };\n  },\n});\nconst SwapContainer = styled.div``;\nconst Panel = styled.div`\n  width: 100%;\n  border-radius: 16px;\n  padding: 24px 8px 12px;\n  position: relative;\n  background: var(--panel-bg-color);\n`;\nconst ExchangeIcon = styled.div`\n  cursor: pointer;\n  border: 4px solid #ffe6c7;\n  background: #181a27;\n  width: 34px;\n  height: 34px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  left: 50%;\n  top: 50%;\n  svg {\n    color: var(--exchange-icon-color);\n  }\n`;\n\nconst ExchangeIconWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 10px;\n`;\nconst PanelLabel = styled.div`\n  color: var(--text-color);\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n  display: flex;\n  justify-content: space-between;\n  .setting-btn {\n    cursor: pointer;\n    position: relative;\n    margin-right: 16px;\n  }\n  @media (max-width: 768px) {\n    font-size: 16px;\n    font-weight: 400;\n    line-height: normal;\n  }\n`;\n\nconst Power = styled.div`\n  width: 100%;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: center;\n  padding-top: 10px;\n  color: var(--secondary-text-color);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  .view-code {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    cursor: pointer;\n  }\n  .view-code-icon {\n    width: 15px;\n    height: 15px;\n  }\n  .view-code-text {\n    text-decoration: underline;\n  }\n`;\n\nconst getBestTrade = () => {\n  if (\n    !state.inputCurrency ||\n    !state.outputCurrency ||\n    !state.inputCurrencyAmount\n  )\n    return;\n  State.update({\n    loading: true,\n    trade: null,\n    showPriceImpactWarning: false,\n  });\n};\n\nconst debouncedGetBestTrade = state.debounce?.(getBestTrade, 500);\n\nconst getUnitAmount = () => {\n  const bigInputAmount = Big(state.inputCurrencyAmount || 0);\n  const bigOutputAmount = Big(state.outputCurrencyAmount || 0);\n  if (bigInputAmount.eq(0) || bigOutputAmount.eq(0)) return \"-\";\n  const unitAmount = bigOutputAmount.div(bigInputAmount);\n  if (unitAmount.lt(0.001)) return unitAmount.toPrecision(1);\n  return unitAmount.toFixed(3);\n};\n\nuseEffect(() => {\n  if (!state.trade) return;\n  console.log(state.trade);\n  State.update({\n    showPriceImpactWarning: !Big(state.trade.priceImpact || 0).lt(2),\n  });\n}, [state.trade]);\n\nreturn (\n  <>\n    <SwapContainer>\n      <Panel className=\"\">\n        <PanelLabel>\n          <div>Swap</div>\n          <div\n            className=\"setting-btn\"\n            onClick={(ev) => {\n              State.update({\n                showSlippageSetting: !state.showSlippageSetting,\n                clientX: ev.clientX,\n                clientY: ev.clientY,\n              });\n            }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"18\"\n              height=\"17\"\n              viewBox=\"0 0 18 17\"\n              fill=\"none\"\n            >\n              <path\n                d=\"M17.5879 6.63086C17.584 6.5957 17.5801 6.56641 17.5742 6.54883V6.5332L17.5664 6.49023C17.4277 5.81445 16.9805 5.37891 16.4238 5.37891H16.332C15.3828 5.37891 14.6133 4.60547 14.6133 3.66016C14.6133 3.44141 14.7148 3.13086 14.7578 3.02148C15.0273 2.39258 14.7402 1.67578 14.0742 1.31055L11.9785 0.125L11.9395 0.111328C11.7832 0.0605468 11.6016 0 11.3984 0C11.0195 0 10.5938 0.175781 10.3301 0.439453C10 0.765625 9.33008 1.25195 8.93164 1.25195C8.53516 1.25195 7.86328 0.767578 7.5332 0.439453C7.25195 0.162109 6.86328 0 6.46484 0C6.25586 0 6.08008 0.0585937 5.92383 0.111328L5.88867 0.125L3.69141 1.31445L3.67773 1.32227C3.14453 1.65625 2.92773 2.42187 3.19922 3.0293L3.20312 3.03711L3.20703 3.04492C3.25 3.14062 3.38281 3.46484 3.38281 3.74805C3.38281 4.69727 2.60938 5.4668 1.66406 5.4668H1.57227C0.990234 5.4668 0.554687 5.89648 0.429687 6.58594L0.421875 6.625V6.63867C0.421875 6.6582 0.414062 6.68555 0.408203 6.7207C0.359375 7.01562 0.242188 7.71094 0.242188 8.2793C0.242188 8.84766 0.357422 9.54297 0.408203 9.83789C0.412109 9.87305 0.416016 9.90234 0.421875 9.91992V9.93555L0.429687 9.97852C0.568359 10.6543 1.01562 11.0898 1.57227 11.0898H1.61914C2.56836 11.0898 3.33789 11.8633 3.33789 12.8086C3.33789 13.0273 3.23633 13.3379 3.19336 13.4473C2.93359 14.0391 3.17969 14.7988 3.75391 15.1816L3.76953 15.1895L5.83984 16.3418L5.87891 16.3555C6.03516 16.4062 6.21289 16.4668 6.41602 16.4668C6.84961 16.4668 7.24023 16.3008 7.48438 16.0273C7.50781 16.0098 7.53125 15.9863 7.55859 15.9629C7.80859 15.7441 8.48047 15.166 8.92383 15.166C9.25391 15.166 9.80664 15.5117 10.3633 16.0684C10.6445 16.3457 11.0332 16.5078 11.4316 16.5078C11.7012 16.5078 11.9004 16.4336 12.127 16.3223L12.1348 16.3184L14.2578 15.1445L14.2656 15.1367C14.7988 14.8027 15.0156 14.0371 14.7441 13.4297L14.7402 13.4219L14.7363 13.4141C14.7324 13.4121 14.5664 13.0664 14.5977 12.7559L14.6016 12.7363V12.7168C14.6016 11.7676 15.375 10.998 16.3203 10.998H16.418C17 10.998 17.4355 10.5684 17.5605 9.87891L17.5684 9.83984V9.82617C17.5723 9.81055 17.5762 9.78711 17.582 9.75586C17.6328 9.46875 17.75 8.79883 17.75 8.18555C17.7539 7.61914 17.6387 6.92578 17.5879 6.63086ZM8.99414 10.9746C7.49219 10.9746 6.27539 9.75781 6.27539 8.25586C6.27539 6.75391 7.49219 5.53711 8.99414 5.53711C10.4961 5.53711 11.7129 6.75391 11.7129 8.25586C11.7129 9.75781 10.4961 10.9746 8.99414 10.9746Z\"\n                fill=\"#101010\"\n              />\n            </svg>\n          </div>\n        </PanelLabel>\n        <Widget\n          src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.CurrencyInput\"\n          props={{\n            account,\n            currency: state.inputCurrency,\n            amount: state.inputCurrencyAmount,\n            updateTokenBalance: state.updateInputTokenBalance,\n            isCorrectNetwork: state.currentChainId === chainId,\n            labelText: \"You pay\",\n            onCurrencySelectOpen: () => {\n              if (chainId !== state.currentChainId && account) return;\n              State.update({\n                displayCurrencySelect: true,\n                currencySelectType: 0,\n                selectedTokenAddress: state.inputCurrency.address,\n              });\n            },\n            onUpdateCurrencyBalance: (balance) => {\n              State.update({\n                maxInputBalance: ethers.utils.formatUnits(\n                  balance,\n                  state.inputCurrency.decimals\n                ),\n                updateInputTokenBalance: false,\n              });\n            },\n            onAmountChange: (val) => {\n              State.update({\n                inputCurrencyAmount: val,\n              });\n              if (val && Number(val)) {\n                debouncedGetBestTrade();\n              }\n            },\n          }}\n        />\n        <ExchangeIconWrapper>\n          <ExchangeIcon\n            onClick={() => {\n              if (!state.outputCurrency || state.loading || state.pending)\n                return;\n              const [inputCurrency, outputCurrency] = [\n                state.outputCurrency,\n                state.inputCurrency,\n              ];\n              State.update({\n                inputCurrency,\n                outputCurrency,\n                outputCurrencyAmount: \"\",\n                inputCurrencyAmount: !state.inputCurrencyAmount\n                  ? \"1\"\n                  : Big(\n                      Big(state.inputCurrencyAmount)\n                        .times(Big(10).pow(state.outputCurrency.decimals))\n                        .toFixed(0)\n                    )\n                      .div(Big(10).pow(state.outputCurrency.decimals))\n                      .toFixed(),\n                tradeType: \"in\",\n                updateInputTokenBalance: true,\n                updateOutputTokenBalance: true,\n                loading: true,\n              });\n              if (Big(state.inputCurrencyAmount || 0).gt(0)) getBestTrade();\n            }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"13\"\n              height=\"14\"\n              viewBox=\"0 0 13 14\"\n              fill=\"none\"\n            >\n              <path\n                d=\"M6.49992 1.5V12M6.49992 12L1 6.5M6.49992 12L12 6.5\"\n                stroke=\"white\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n              />\n            </svg>\n          </ExchangeIcon>\n        </ExchangeIconWrapper>\n        <Widget\n          src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.CurrencyInput\"\n          props={{\n            account,\n            currency: state.outputCurrency,\n            labelText: \"You receive\",\n            amount:\n              state.inputCurrency && state.outputCurrency\n                ? state.outputCurrencyAmount\n                : \"\",\n            isCorrectNetwork: state.currentChainId === chainId,\n            updateTokenBalance: state.updateOutputTokenBalance,\n            disabled: true,\n            onCurrencySelectOpen: () => {\n              if (chainId !== state.currentChainId && account) return;\n              State.update({\n                displayCurrencySelect: true,\n                currencySelectType: 1,\n                selectedTokenAddress: state.outputCurrency.address,\n              });\n            },\n            onUpdateCurrencyBalance: () => {\n              State.update({\n                updateOutputTokenBalance: false,\n              });\n            },\n          }}\n        />\n        {state.inputCurrency && state.outputCurrency && state.trade && (\n          <Widget\n            src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.Result\"\n            props={{\n              trade: {\n                ...state.trade,\n                inputCurrency: state.inputCurrency,\n                outputCurrency: state.outputCurrency,\n                inputCurrencyAmount: state.inputCurrencyAmount,\n                outputCurrencyAmount: state.outputCurrencyAmount,\n                slippage,\n              },\n              showPriceImpactWarning: state.showPriceImpactWarning,\n              onRouterClick: (ev) => {\n                State.update({\n                  showRoutes: true,\n                  clientX: ev.clientX,\n                  clientY: ev.clientY,\n                });\n              },\n              onSlippageClick: (ev) => {\n                State.update({\n                  showSlippageAmount: true,\n                  clientX: ev.clientX,\n                  clientY: ev.clientY,\n                });\n              },\n            }}\n          />\n        )}\n        {state.showPriceImpactWarning && (\n          <Widget\n            src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.PriceImpactWarningButton\"\n            props={{\n              priceImpact: state.trade.priceImpact,\n              onClick: (ev) => {\n                State.update({\n                  showPriceImpactTips: true,\n                  clientX: ev.clientX,\n                  clientY: ev.clientY,\n                });\n              },\n            }}\n          />\n        )}\n        <Widget\n          src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.SwapButton\"\n          props={{\n            routerAddress: dexConfig.routerAddress,\n            wethAddress: wethToken.address,\n            title,\n            chainName,\n            currentChainId: state.currentChainId,\n            inputCurrency: state.inputCurrency,\n            outputCurrency: state.outputCurrency,\n            inputCurrencyAmount: state.inputCurrencyAmount,\n            outputCurrencyAmount: state.outputCurrencyAmount,\n            maxInputBalance: state.maxInputBalance,\n            handleSyncswap,\n            handlerV3,\n            slippage,\n            trade: state.trade,\n            onSuccess: () => {\n              State.update({\n                updateInputTokenBalance: true,\n                updateOutputTokenBalance: true,\n              });\n            },\n            onPending: (pending) => {\n              State.update({\n                pending,\n              });\n            },\n            openRequestModal: props.openRequestModal,\n            toast: props.toast,\n            addTransaction: props.addTransaction,\n            noPair: state.noPair,\n            loading: state.loading,\n            stable: state.stable,\n            chainId,\n            syncSwapPoolAddress: state.syncSwapPoolAddress,\n            uniType: dexConfig.uniType,\n            account: props.account,\n            onSwitchChain: props.onSwitchChain,\n            switchingChain: props.switchingChain,\n          }}\n        />\n      </Panel>\n      {account && (\n        <Widget\n          src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.BridegeTips\"\n          props={{\n            onClick: () => {\n              props.onOpenBridge();\n            },\n          }}\n        />\n      )}\n      <Power>\n        <div\n          className=\"view-code\"\n          onClick={() => {\n            props.onOpenCode();\n          }}\n        >\n          <svg\n            width=\"15\"\n            height=\"15\"\n            viewBox=\"0 0 15 15\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g clip-path=\"url(#clip0_2_166)\">\n              <path\n                d=\"M5.33524 7.50357C5.33522 7.66313 5.39812 7.81627 5.51028 7.92977C5.62244 8.04326 5.77482 8.10797 5.93438 8.10984H9.27247C9.43232 8.10984 9.58562 8.04634 9.69865 7.93331C9.81168 7.82028 9.87518 7.66698 9.87518 7.50713C9.87518 7.34728 9.81168 7.19398 9.69865 7.08095C9.58562 6.96792 9.43232 6.90442 9.27247 6.90442H5.93438C5.77605 6.90627 5.62473 6.96999 5.51277 7.08195C5.40081 7.19392 5.33709 7.34524 5.33524 7.50357ZM2.33951 7.93866C2.39518 7.99451 2.46132 8.03883 2.53415 8.06907C2.60697 8.09931 2.68505 8.11488 2.76391 8.11488C2.84276 8.11488 2.92084 8.09931 2.99367 8.06907C3.0665 8.03883 3.13264 7.99451 3.1883 7.93866L5.53495 5.58488C5.59081 5.52922 5.63512 5.46307 5.66536 5.39025C5.6956 5.31742 5.71117 5.23934 5.71117 5.16048C5.71117 5.08163 5.6956 5.00355 5.66536 4.93072C5.63512 4.85789 5.59081 4.79175 5.53495 4.73609L3.1883 2.35378C3.13257 2.29758 3.06631 2.25291 2.99332 2.22231C2.92032 2.19172 2.84201 2.1758 2.76286 2.17547C2.68372 2.17514 2.60528 2.1904 2.53203 2.22038C2.45878 2.25036 2.39215 2.29448 2.33595 2.35021C2.27975 2.40595 2.23508 2.4722 2.20448 2.5452C2.17389 2.6182 2.15797 2.6965 2.15764 2.77565C2.15697 2.9355 2.21983 3.08907 2.33238 3.20257L4.2796 5.14979L2.33238 7.08274C2.27545 7.13852 2.23021 7.20511 2.19934 7.27859C2.16846 7.35208 2.15255 7.43099 2.15255 7.5107C2.15255 7.59041 2.16846 7.66932 2.19934 7.7428C2.23021 7.81629 2.27545 7.88287 2.33238 7.93866H2.33951ZM13.7946 13.7946H1.20542V1.20542H13.7946V13.7946ZM13.7946 0H1.20542C0.885723 0 0.57912 0.126999 0.35306 0.35306C0.126999 0.57912 0 0.885723 0 1.20542L0 13.7946C0.00560989 14.1106 0.135082 14.4117 0.360537 14.6331C0.585992 14.8546 0.889396 14.9787 1.20542 14.9786H13.7946C14.1069 14.9731 14.4049 14.8466 14.6257 14.6257C14.8466 14.4049 14.9731 14.1069 14.9786 13.7946V1.20542C14.9787 0.889396 14.8546 0.585992 14.6331 0.360537C14.4117 0.135082 14.1106 0.00560989 13.7946 0Z\"\n                fill=\"#8E8E8E\"\n              />\n            </g>\n            <defs>\n              <clipPath id=\"clip0_2_166\">\n                <rect width=\"15\" height=\"15\" fill=\"white\" />\n              </clipPath>\n            </defs>\n          </svg>\n          <div className=\"view-code-text\">View Code</div>\n        </div>\n        <div>Powered by DapDap & BOS</div>\n      </Power>\n      {state.displayCurrencySelect && (\n        <Widget\n          src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.CurrencySelect\"\n          props={{\n            display: state.displayCurrencySelect,\n            selectedTokenAddress: state.selectedTokenAddress,\n            title: props.title,\n            chainId: props.chainId,\n            explor: props.explor,\n            tokens: dexConfig.tokens,\n            stableTokens: dexConfig.stableTokens,\n            onImport,\n            account,\n            onClose: () => {\n              State.update({\n                displayCurrencySelect: false,\n              });\n            },\n            onSelect: (currency) => {\n              const updatedParams = {\n                outputCurrencyAmount: \"\",\n                noPair: false,\n                updateInputTokenBalance: true,\n                trade: null,\n              };\n              if (state.currencySelectType === 0) {\n                updatedParams.inputCurrency = currency;\n                if (currency.address === state.outputCurrency.address)\n                  updatedParams.outputCurrency = null;\n              }\n              if (state.currencySelectType === 1) {\n                updatedParams.outputCurrency = currency;\n                if (currency.address === state.inputCurrency.address) {\n                  updatedParams.inputCurrency = null;\n                  updatedParams.inputCurrencyAmount = \"\";\n                }\n              }\n              State.update(updatedParams);\n              debouncedGetBestTrade();\n            },\n          }}\n        />\n      )}\n\n      {dexConfig.uniType === \"v3\" && (\n        <Widget\n          src={amountOutFn}\n          props={{\n            update: state.loading,\n            routerAddress: dexConfig.routerAddress,\n            inputCurrency: state.inputCurrency,\n            outputCurrency: state.outputCurrency,\n            inputCurrencyAmount: state.inputCurrencyAmount,\n            outputCurrencyAmount: state.outputCurrencyAmount,\n            tradeType: state.tradeType,\n            quoterAddress: dexConfig.quoterAddress,\n            wethAddress: wethToken.address,\n            chainId,\n            loadAmountOut: (data) => {\n              State.update({\n                loading: false,\n                ...data,\n              });\n            },\n          }}\n        />\n      )}\n    </SwapContainer>\n    {state.showSlippageSetting && (\n      <Widget\n        src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.SlippageSetting\"\n        props={{\n          clientX: state.clientX,\n          clientY: state.clientY,\n          slippage,\n          onSetSlippage: onSetSlippage,\n          onClose: () => {\n            State.update({\n              showSlippageSetting: false,\n            });\n          },\n        }}\n      />\n    )}\n    {state.showRoutes && state.trade && (\n      <Widget\n        src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.Routes\"\n        props={{\n          clientX: state.clientX,\n          clientY: state.clientY,\n          routes: state.trade.routes,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          gasCost: state.trade.gasCost,\n          onClose: () => {\n            State.update({\n              showRoutes: false,\n            });\n          },\n        }}\n      />\n    )}\n    {state.showSlippageAmount && state.trade && (\n      <Widget\n        src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.SlippageAmount\"\n        props={{\n          clientX: state.clientX,\n          clientY: state.clientY,\n          slippage,\n          amount: state.outputCurrencyAmount,\n          outputCurrency: state.outputCurrency,\n          onClose: () => {\n            State.update({\n              showSlippageAmount: false,\n            });\n          },\n        }}\n      />\n    )}\n    {state.showPriceImpactTips && (\n      <Widget\n        src=\"dapdapbos.near/widget/Scroll.Uniswap.Swap.PriceImpactWarning\"\n        props={{\n          clientX: state.clientX,\n          clientY: state.clientY,\n          onClose: () => {\n            State.update({\n              showPriceImpactTips: false,\n            });\n          },\n        }}\n      />\n    )}\n    <Widget src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.TokensPrice\" />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Scroll.Uniswap.Swap.SwapV2", "fact_widget_deployments_id": "a371bff62ba58251cae5a36e03751ed9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}