{"tx_hash": "8NUzzViGy2rHNKr76ftNn5NFA3YL7NXhMg5jmpTxfSnM", "action_id_social": "F7csosi86EAkWsgMPKuARW3h4GV4Wr1Bde6rKE48aqNr-0-widget", "block_id": 121063658, "block_timestamp": "2024-06-13T07:54:11.873Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.Index", "source_code": "const Wrapper = styled.div`\n  --bg-1: #262836;\n  --bg-2: #373a53;\n  --bg-3: #2e3142;\n  --white: #fff;\n  --purple: #979abe;\n  --dark: #1b1e27;\n\n  --fz-12: 12px;\n  --fz-14: 14px;\n  --fz-16: 16px;\n  --fz-24: 24px;\n\n  --grid-columns: 30% 17% 19% 17% 17%;\n\n  /* --secondary: #6c757d; */\n\n  color: var(--white);\n\n  input[type=\"number\"]::-webkit-inner-spin-button,\n  input[type=\"number\"]::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n  .form-control::placeholder {\n    color: white;\n  }\n  .form-control:focus {\n    box-shadow: 0 0 0 0.25rem rgba(120, 58, 227, 0.5);\n  }\n\n  padding-top: 34px;\n  .grid-pool-head {\n    max-width: 1244px;\n    margin: 0 auto 12px;\n    font-size: 14px;\n    color: var(--purple);\n  }\n  .fee-wrapper {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n  .type-label {\n    width: 27px;\n    height: 16px;\n    border-radius: 4px;\n    background: #373a53;\n    color: #fff;\n    font-family: Gantari;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 400;\n    text-align: center;\n    line-height: 16px;\n  }\n  .button {\n    width: 118px;\n    height: 46px;\n    flex-shrink: 0;\n    border-radius: 8px;\n    text-align: center;\n    font-family: Gantari;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    cursor: pointer;\n    transition: 0.5s;\n    &:disabled {\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    &:hover:not(:disabled) {\n      opacity: 0.9;\n    }\n    &:active:not(:disabled) {\n      opacity: 0.8;\n    }\n  }\n  .button.primary {\n    background: var(--primary);\n    color: #000;\n  }\n  .button.ghost {\n    border: 1px solid var(--primary);\n    background-color: transparent;\n    color: var(--primary);\n  }\n  .link {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 4px;\n    color: var(--primary);\n    text-align: center;\n  }\n\n  .link-text {\n    color: var(--primary);\n    font-family: Gantari;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: normal;\n    text-decoration-line: underline;\n  }\n`;\n\nconst TabsList = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  width: 420px;\n  height: 46px;\n  background-color: var(--bg-1);\n  border-radius: 10px;\n  color: var(--white);\n  padding: 0 5px;\n  margin-bottom: 30px;\n  border: 1px solid #262836;\n  .tab-head-item {\n    flex: 1;\n    display: flex;\n    height: 36px;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    border-radius: 5px;\n    color: var(--white);\n    cursor: pointer;\n  }\n  .tab-head-item.active {\n    background-color: var(--bg-2);\n  }\n`;\n\nState.init({\n  currentTab: \"TAB_POOL\",\n  loading: false,\n  pools: null,\n  poolsList: [],\n});\n\nconst {\n  isChainSupported,\n  account,\n  chainId,\n  dexConfig,\n  curChain,\n  onSwitchChain,\n  switchingChain,\n  toast,\n} = props;\n\nuseEffect(() => {\n  if (isChainSupported) {\n    State.update({\n      userDataUpdater: Date.now(),\n      loading: true,\n    });\n  }\n}, [isChainSupported]);\n\nreturn (\n  <Wrapper style={{ ...(dexConfig.theme || {}) }}>\n    <div style={{ position: \"relative\", margin: \"0 auto\", width: \"1244px\" }}>\n      <TabsList>\n        {[\n          { key: \"TAB_POOL\", label: \"All Pools\" },\n          { key: \"TAB_ASSETS\", label: \"Your Assets\" },\n        ].map((item) => (\n          <div\n            key={item.key}\n            className={`tab-head-item ${\n              state.currentTab === item.key ? \"active\" : \"\"\n            }`}\n            onClick={() => {\n              if (item.key === \"TAB_ASSETS\" && state.getV3Fees) {\n                state.getV3Fees(state.staked);\n              }\n              State.update({\n                currentTab: item.key,\n              });\n            }}\n          >\n            {item.label}\n          </div>\n        ))}\n      </TabsList>\n      <Widget\n        src=\"dapdapbos.near/widget/Staking.Hyperlock.Search\"\n        props={{\n          disabled: state.loading && !state.poolsList.length,\n          onChange: (val) => {\n            State.update({\n              list: val\n                ? state.poolsList.filter((item) => {\n                    if (!val) return true;\n                    return item.name.toLowerCase().includes(val.toLowerCase());\n                  })\n                : state.poolsList,\n            });\n          },\n        }}\n      />\n    </div>\n    {state.currentTab === \"TAB_POOL\" && (\n      <Widget\n        src=\"dapdapbos.near/widget/Staking.Hyperlock.Pools\"\n        props={{\n          loading: state.loading,\n          list: state.list || state.poolsList,\n        }}\n      />\n    )}\n    {state.currentTab === \"TAB_ASSETS\" && (\n      <Widget\n        src=\"dapdapbos.near/widget/Staking.Hyperlock.Assets\"\n        props={{\n          unstaked: state.unstaked,\n          staked: state.staked || [],\n          fees: state.fees,\n          handler: state.handler,\n          pools: state.pools || {},\n          dappLink: dexConfig.dappLink,\n          onOpenStakeModal: (data) => {\n            State.update({\n              modelData: data,\n            });\n          },\n          onSuccess: () => {\n            State.update({\n              userDataUpdater: Date.now(),\n            });\n          },\n        }}\n      />\n    )}\n    <Widget\n      src=\"dapdapbos.near/widget/Staking.Hyperlock.PoolData\"\n      props={{\n        ...props,\n        update: state.loading,\n        onLoad: (data) => {\n          State.update({\n            loading: false,\n            ...data,\n          });\n        },\n      }}\n    />\n    <Widget\n      src=\"dapdapbos.near/widget/Staking.Hyperlock.UserData\"\n      props={{\n        ...props,\n        update: state.userDataUpdater,\n        pools: state.pools,\n        onLoad: (data) => {\n          State.update({\n            ...data,\n          });\n        },\n      }}\n    />\n    <Widget\n      src=\"dapdapbos.near/widget/Staking.Hyperlock.Handler\"\n      props={{\n        ...props,\n        onLoad: (fn) => {\n          State.update({\n            handler: fn,\n          });\n        },\n      }}\n    />\n    {state.modelData && (\n      <Widget\n        src=\"dapdapbos.near/widget/Staking.Hyperlock.StakeOrWithdraw\"\n        props={{\n          ...state.modelData,\n          dexConfig,\n          account,\n          toast,\n          handler: state.handler,\n          onSuccess: () => {\n            State.update({\n              userDataUpdater: Date.now(),\n            });\n          },\n          onClose: () => {\n            State.update({\n              modelData: {\n                display: false,\n              },\n            });\n          },\n        }}\n      />\n    )}\n    {!isChainSupported && (\n      <Widget\n        src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n        props={{\n          chain: curChain,\n          onSwitchChain: onSwitchChain,\n          switchingChain: switchingChain,\n          theme: dexConfig.theme,\n        }}\n      />\n    )}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.Index", "fact_widget_deployments_id": "e615fcb2f6b56410c3ba1b016a8f512c", "inserted_timestamp": "2024-06-13T09:04:53.640Z", "modified_timestamp": "2024-06-13T09:04:53.640Z", "__row_index": 1}