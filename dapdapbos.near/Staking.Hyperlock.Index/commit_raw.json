{"tx_hash": "5b7da2CEYmr1ymaQAboj9zDXHjr68DdwXPudLBT6m7om", "action_id_social": "Fft8m148gDu9BnXM4GLsVwCfoZ9bmbFjZW4rfuzNTDjy-0-widget", "block_id": 118408963, "block_timestamp": "2024-05-07T03:27:23.369Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.Index", "source_code": "const Wrapper = styled.div`\n  --bg-1: #262836;\n  --bg-2: #373a53;\n  --bg-3: #2e3142;\n  --white: #fff;\n  --purple: #979abe;\n  --dark: #1b1e27;\n\n  --fz-12: 12px;\n  --fz-14: 14px;\n  --fz-16: 16px;\n  --fz-24: 24px;\n\n  --grid-columns: 30% 17% 19% 17% 17%;\n\n  /* --secondary: #6c757d; */\n\n  color: var(--white);\n\n  input[type=\"number\"]::-webkit-inner-spin-button,\n  input[type=\"number\"]::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n  .form-control::placeholder {\n    color: white;\n  }\n  .form-control:focus {\n    box-shadow: 0 0 0 0.25rem rgba(120, 58, 227, 0.5);\n  }\n\n  padding-top: 34px;\n  .grid-pool-head {\n    max-width: 1244px;\n    margin: 0 auto 12px;\n    font-size: 14px;\n    color: var(--purple);\n  }\n  .fee-wrapper {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n  .type-label {\n    width: 27px;\n    height: 16px;\n    border-radius: 4px;\n    background: #373a53;\n    color: #fff;\n    font-family: Gantari;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 400;\n    text-align: center;\n    line-height: 16px;\n  }\n  .button {\n    width: 118px;\n    height: 46px;\n    flex-shrink: 0;\n    border-radius: 8px;\n    text-align: center;\n    font-family: Gantari;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: normal;\n    cursor: pointer;\n    transition: 0.5s;\n    &:disabled {\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    &:hover:not(:disabled) {\n      opacity: 0.9;\n    }\n    &:active:not(:disabled) {\n      opacity: 0.8;\n    }\n  }\n  .button.primary {\n    background: var(--primary);\n    color: #000;\n  }\n  .button.ghost {\n    border: 1px solid var(--primary);\n    background-color: transparent;\n    color: var(--primary);\n  }\n  .link {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 4px;\n    color: var(--primary);\n    text-align: center;\n  }\n\n  .link-text {\n    color: var(--primary);\n    font-family: Gantari;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: normal;\n    text-decoration-line: underline;\n  }\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: var(--grid-columns);\n\n  &.grid-pool-asset {\n    grid-template-columns: 40% 30% 30%;\n  }\n`;\n\nconst GridItem = styled.div`\n  padding-left: 24px;\n  &.action-item {\n    display: flex;\n    column-gap: 10px;\n    padding-right: 18px;\n    justify-content: right;\n  }\n  &.action-item-head {\n    display: flex;\n    justify-content: center;\n  }\n`;\nconst PoolItem = styled.div`\n  margin-bottom: 10px;\n`;\nconst TabsList = styled(\"Tabs.List\")`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  width: 420px;\n  height: 46px;\n  background-color: var(--bg-1);\n  border-radius: 10px;\n  color: var(--white);\n  padding: 0 5px;\n  margin-bottom: 30px;\n  border: 1px solid #262836;\n  .tab-head-item {\n    flex: 1;\n    display: flex;\n    height: 36px;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    border-radius: 5px;\n    color: var(--white);\n    cursor: pointer;\n  }\n  .tab-head-item.active {\n    background-color: var(--bg-2);\n  }\n`;\n\nState.init({\n  currentTab: \"TAB_POOL\",\n  loading: false,\n  pools: [],\n  staked: [],\n});\n\nconst {\n  isChainSupported,\n  account,\n  chainId,\n  dexConfig,\n  curChain,\n  onSwitchChain,\n  switchingChain,\n} = props;\n\nuseEffect(() => {\n  if (isChainSupported) {\n    State.update({\n      userDataUpdater: Date.now(),\n      loading: true,\n    });\n  }\n}, [isChainSupported]);\n\nreturn (\n  <Wrapper style={{ ...(dexConfig.theme || {}) }}>\n    <Tabs.Root\n      value={state.currentTab}\n      onValueChange={(value) => {\n        if (value === \"TAB_ASSETS\" && state.getV3Fees) {\n          state.getV3Fees(state.staked);\n        }\n        State.update({\n          currentTab: value,\n        });\n      }}\n    >\n      <TabsList>\n        <Tabs.Trigger value=\"TAB_POOL\" asChild>\n          <div\n            className={`tab-head-item ${\n              state.currentTab === \"TAB_POOL\" ? \"active\" : \"\"\n            }`}\n          >\n            All Pools\n          </div>\n        </Tabs.Trigger>\n        <Tabs.Trigger value=\"TAB_ASSETS\" asChild>\n          <div\n            className={`tab-head-item ${\n              state.currentTab === \"TAB_ASSETS\" ? \"active\" : \"\"\n            }`}\n          >\n            Your Assets\n          </div>\n        </Tabs.Trigger>\n      </TabsList>\n      <Tabs.Content value=\"TAB_POOL\">\n        <GridContainer className=\"grid-pool-head\">\n          <GridItem>Pool</GridItem>\n          <GridItem>LP Type</GridItem>\n          <GridItem>Point Stack</GridItem>\n          <GridItem>Points/$1K</GridItem>\n          <GridItem>TVL</GridItem>\n        </GridContainer>\n        <Accordion.Root type=\"single\" collapsible>\n          {state.loading && !Object.values(state.pools).length && (\n            <Widget src=\"bluebiu.near/widget/Lending.Spinner\" />\n          )}\n          {Object.values(state.pools)\n            ?.sort((a, b) => (Big(a.tvl).gt(b.tvl) ? -1 : 1))\n            .map((item) => (\n              <PoolItem key={item.id}>\n                <Widget\n                  src=\"dapdapbos.near/widget/Staking.Hyperlock.Pool\"\n                  props={{\n                    ...props,\n                    data: item,\n                    stakedTokens: state.stakedMap?.[item.id] || [],\n                    unStakedTokens: state.unstakedMap?.[item.id] || [],\n                    handler: state.handler,\n                    dappLink: dexConfig.dappLink,\n                    onSuccess: () => {\n                      State.update({\n                        loading: true,\n                        userDataUpdater: Date.now(),\n                      });\n                    },\n                  }}\n                  key={item.id}\n                />\n              </PoolItem>\n            ))}\n        </Accordion.Root>\n      </Tabs.Content>\n      <Tabs.Content value=\"TAB_ASSETS\">\n        <Widget\n          src=\"dapdapbos.near/widget/Staking.Hyperlock.Assets\"\n          props={{\n            unstaked: state.unstaked,\n            staked: state.staked,\n            fees: state.fees,\n            handler: state.handler,\n            pools: state.pools,\n            dappLink: dexConfig.dappLink,\n            onSuccess: () => {\n              State.update({\n                userDataUpdater: Date.now(),\n              });\n            },\n          }}\n        />\n      </Tabs.Content>\n    </Tabs.Root>\n    <Widget\n      src=\"dapdapbos.near/widget/Staking.Hyperlock.PoolData\"\n      props={{\n        ...props,\n        update: state.loading,\n        onLoad: (data) => {\n          State.update({\n            loading: false,\n            ...data,\n          });\n        },\n      }}\n    />\n    <Widget\n      src=\"dapdapbos.near/widget/Staking.Hyperlock.UserData\"\n      props={{\n        ...props,\n        update: state.userDataUpdater,\n        onLoad: (data) => {\n          State.update({\n            ...data,\n          });\n        },\n      }}\n    />\n    <Widget\n      src=\"dapdapbos.near/widget/Staking.Hyperlock.Handler\"\n      props={{\n        ...props,\n        onLoad: (fn) => {\n          State.update({\n            handler: fn,\n          });\n        },\n      }}\n    />\n    {!isChainSupported && (\n      <Widget\n        src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n        props={{\n          chain: curChain,\n          onSwitchChain: onSwitchChain,\n          switchingChain: switchingChain,\n          theme: dexConfig.theme,\n        }}\n      />\n    )}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.Index", "fact_widget_deployments_id": "dc619f9f627332dbfa919b51342f0ba0", "inserted_timestamp": "2024-05-07T04:39:56.073Z", "modified_timestamp": "2024-05-07T04:39:56.073Z", "__row_index": 2}