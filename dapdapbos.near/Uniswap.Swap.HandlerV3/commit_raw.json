{"tx_hash": "GojshonzBXVncDSE6dERkBNFkZWvUxZuY2TkrGvA3F2S", "action_id_social": "DMTtavPCbwWecKwGnSu4RyKqQEoFAHxJVF5LTi1ngmdL-0-widget", "block_id": 103825703, "block_timestamp": "2023-10-20T19:19:01.265Z", "signer_id": "dapdapbos.near", "widget_name": "Uniswap.Swap.HandlerV3", "source_code": "const swapRouterV3Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInputSingle\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountMinimum\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"results\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst swapRouerV302Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct IV3SwapRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInputSingle\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountMinimum\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"results\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  routerAddress,\n  wethAddress,\n  account,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrency,\n  fee,\n  swapping,\n  onSuccess,\n  onError,\n  chainId,\n} = props;\n\nconst router02List = [56, 8453, 42220, 43114];\n\nconst is02 = router02List.indexOf(chainId) > -1;\n\nconst getRouterAbi = () => {\n  if (is02) {\n    return swapRouerV302Abi;\n  }\n  return swapRouterV3Abi;\n};\n\nif (!swapping || !chainId) return \"\";\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst value = expandToken(inputCurrencyAmount, inputCurrency.decimals).toFixed(\n  0\n);\n\nconst signer = Ethers.provider().getSigner();\n\nconst abi = is02 ? swapRouerV302Abi : swapRouterV3Abi;\nconst iface = new ethers.utils.Interface(abi);\n\nconst deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\nconst tokenIn =\n  inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\nconst tokenOut =\n  outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\nconst options = {\n  gasLimit: 250000,\n  value: inputCurrency.address === \"native\" ? value : \"0\",\n};\n\nconst inputs = !is02\n  ? [\n      {\n        tokenIn,\n        tokenOut,\n        fee: fee,\n        recipient:\n          outputCurrency.address === \"native\"\n            ? \"0x0000000000000000000000000000000000000000\"\n            : account,\n        deadline: deadline.toFixed(),\n        amountIn: value,\n        amountOutMinimum: \"0\",\n        sqrtPriceLimitX96: \"0\",\n      },\n    ]\n  : [\n      {\n        tokenIn,\n        tokenOut,\n        fee: fee,\n        recipient:\n          outputCurrency.address === \"native\"\n            ? \"0x0000000000000000000000000000000000000000\"\n            : account,\n        amountIn: value,\n        amountOutMinimum: \"0\",\n        sqrtPriceLimitX96: \"0\",\n      },\n    ];\n\n// Ethers get gas price\n\nconst multicallParams = [];\nconst encodedDataCallSwap = iface.encodeFunctionData(\n  \"exactInputSingle\",\n  inputs\n);\n\nmulticallParams.push(encodedDataCallSwap);\n\nif (outputCurrency.address === \"native\") {\n  multicallParams.push(iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account]));\n}\n\nconst multicallContract = new ethers.Contract(routerAddress, abi, signer);\n\nconst multicallit = () => {\n  return multicallContract\n    .multicall(multicallParams, options)\n    .then((res) => {\n      onSuccess(res);\n    })\n    .catch((err) => {\n      console.log(err);\n      onError(err);\n    });\n};\n\nmulticallContract.estimateGas\n  .multicall(multicallParams, options)\n  .then((gas) => {\n    const gasLimit = gas.toString();\n\n    return Big(gasLimit).times(1.1).toFixed(0);\n  })\n  .then((gasLimit) => {\n    return multicallContract\n      .multicall(multicallParams, { value: options.value, gasLimit })\n      .then((res) => {\n        onSuccess(res);\n      })\n      .catch((err) => {\n        console.log(err);\n        onError(err);\n      });\n  })\n  .catch((err) => {\n    if (err.code === \"UNPREDICTABLE_GAS_LIMIT\") {\n      return multicallit();\n    }\n\n    console.log(err);\n    onError(err);\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Uniswap.Swap.HandlerV3", "fact_widget_deployments_id": "7f45c39dfe608151d64466e0c2e8590f", "inserted_timestamp": "2023-10-20T21:23:33.161Z", "modified_timestamp": "2023-10-20T21:23:33.161Z", "__row_index": 3}