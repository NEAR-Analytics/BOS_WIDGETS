{"tx_hash": "ieJz8v1mc7eK5jXd33A9C7RZVh2k5g1pZok4LQCLfCX", "action_id_social": "C8RcPiF39CtQPs7m5fN2CEwSKLLNgcVyYCeeVbVmGom9-0-widget", "block_id": 106834558, "block_timestamp": "2023-11-29T23:46:19.216Z", "signer_id": "dapdapbos.near", "widget_name": "Uniswap.Swap.CurrencyInput", "source_code": "// styled area\n\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  border-radius: 16px;\n\n  padding: 20px;\n\n  background: #1b1b1b;\n`;\nconst InputField = styled.div`\n  margin-right: 8px;\n  @media (max-width: 768px) {\n    width: calc(100% - 165px);\n  }\n`;\nconst InputWarpper = styled.div`\n  height: 46px;\n  padding: 10px 0px;\n  @media (max-width: 900px) {\n    height: 40px;\n  }\n`;\nconst Input = styled.input`\n  font-size: 32px;\n  color: #fff;\n  font-weight: 500;\n\n  width: 300px;\n\n  background-color: transparent;\n  outline: none;\n  border: none;\n  height: 40px;\n  vertical-align: bottom;\n  @media (max-width: 900px) {\n    font-size: 20px;\n    height: 34px;\n  }\n`;\nconst Value = styled.div`\n  padding-top: 10px;\n  color: var(--thirdary-text-color);\n  font-size: 14px;\n  line-height: 16px;\n`;\nconst CurrencyField = styled.div`\n  max-width: 150px;\n  flex-shrink: 0;\n`;\nconst CurrencySelect = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: 1px solid #242424;\n  border-radius: 24px;\n  padding: 3px 10px 3px 8px;\n\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  cursor: pointer;\n  background: linear-gradient(0deg, #131313, #131313),\n    linear-gradient(0deg, #242424, #242424);\n\n  svg {\n    color: var(--button-color);\n  }\n  @media (max-width: 768px) {\n    svg {\n      width: 12px !important;\n    }\n    padding: 0px 12px 0px 6px;\n  }\n`;\n\nconst CurrencySelectNoToken = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: 1px solid #242424;\n  border-radius: 24px;\n  padding: 6px 10px 6px 10px;\n\n  background: #e97ef8;\n  color: white;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  cursor: pointer;\n\n  svg {\n    color: var(--button-color);\n  }\n  @media (max-width: 768px) {\n    svg {\n      width: 12px !important;\n    }\n    padding: 0px 12px 0px 6px;\n  }\n`;\n\nconst CurrencyWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  @media (max-width: 768px) {\n    width: calc(100% - 12px);\n  }\n`;\nconst CurrencyIcon = styled.img`\n  width: 22px;\n  height: 22px;\n  border-radius: 50%;\n  @media (max-width: 768px) {\n    width: 22px;\n    height: 22px;\n  }\n`;\nconst CurrencySymbol = styled.div`\n  font-size: 18px;\n  color: #fff;\n  margin-left: 7px;\n  white-space: nowrap;\n  .fz-14 {\n    font-size: 14px;\n  }\n  @media (max-width: 768px) {\n    width: calc(100% - 30px);\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 14px;\n    .fz-14 {\n      font-size: 12px;\n    }\n  }\n`;\nconst Amount = styled.div`\n  padding-top: 18px;\n  color: var(--thirdary-text-color);\n  font-size: 14px;\n  line-height: 16px;\n  text-align: right;\n  cursor: pointer;\n`;\n// styled area end\n\nState.init({\n  balanceLoaded: false,\n  balance: \"0\",\n});\n\nconst utils = {\n  balanceFormated: () => {\n    if (!props.currency?.address) return \"-\";\n    if (!state.balanceLoaded) return \"Loading\";\n    if (state.balance === \"0\" || Big(state.balance).eq(0)) return \"0\";\n    if (Big(state.balance).lt(0.0001)) return \"<0.0001\";\n    return Big(state.balance).toFixed(4, 0);\n  },\n  valueFormated: (amount) => {\n    const prices = Storage.privateGet(\"tokensPrice\");\n    const price = prices[props.currency?.symbol];\n    if (!price) return \"-\";\n    const value = Big(price).mul(amount || 0);\n    if (value.lt(0.01)) return value.toPrecision(1);\n    return value.toFixed(2);\n  },\n};\n\nconst handlers = {\n  handleDisplayCurrencySelect: () => {\n    State.update({\n      balanceLoaded: false,\n    });\n    props?.onCurrencySelectOpen();\n  },\n  handleInputChange: (ev) => {\n    if (isNaN(Number(ev.target.value))) return;\n    props.onAmountChange?.(ev.target.value);\n  },\n};\n\nconst DELAY = 1000 * 60 * 5;\nconst timer = Storage.privateGet(\"priceTimer\");\nconst AccessKey = Storage.get(\n  \"AccessKey\",\n  \"guessme.near/widget/ZKEVMWarmUp.add-to-quest-card\"\n);\nfunction getPrice() {\n  asyncFetch(\"/dapdap/get-token-price-by-dapdap\", {\n    headers: { Authorization: AccessKey },\n  })\n    .then((res) => {\n      const data = res.body.data;\n      data.native = data.aurora;\n      delete data.aurora;\n      Storage.privateSet(\"tokensPrice\", data);\n      setTimeout(getPrice, DELAY);\n    })\n    .catch((err) => {\n      setTimeout(getPrice, DELAY);\n    });\n}\nif (!Storage.privateGet(\"priceTimer\")) {\n  getPrice();\n\n  Storage.privateSet(\"priceTimer\", 1);\n}\n\n// getPrice();\n\nreturn (\n  <Wrapper>\n    <Widget\n      src=\"dapdapbos.near/widget/Uniswap.Swap.CurrencyBalance\"\n      props={{\n        address: props.currency?.address,\n        onLoad: (balance) => {\n          State.update({\n            balance: ethers.utils.formatUnits(balance, props.currency.decimals),\n            balanceLoaded: true,\n          });\n          props?.onUpdateCurrencyBalance(balance);\n        },\n      }}\n    />\n    <InputField>\n      <InputWarpper>\n        <Input\n          value={props.amount}\n          disabled={props.disabled}\n          onChange={handlers.handleInputChange}\n        />\n      </InputWarpper>\n      <Value>\u2248 ${utils.valueFormated(props.amount)}</Value>\n    </InputField>\n    <CurrencyField>\n      {props.currency.symbol ? (\n        <CurrencySelect onClick={handlers.handleDisplayCurrencySelect}>\n          <CurrencyWrapper>\n            {props.currency?.icon && <CurrencyIcon src={props.currency.icon} />}\n            <CurrencySymbol>{props.currency.symbol}</CurrencySymbol>\n          </CurrencyWrapper>\n          <Widget src=\"dapdapbos.near/widget/Uniswap.Swap.ArrowIcon\" />\n        </CurrencySelect>\n      ) : (\n        <CurrencySelectNoToken onClick={handlers.handleDisplayCurrencySelect}>\n          <span\n            className=\"fz-14\"\n            style={{\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            Select a token\n          </span>\n\n          <Widget src=\"dapdapbos.near/widget/Uniswap.Swap.ArrowIcon\" />\n        </CurrencySelectNoToken>\n      )}\n      {account && !props.chainIdNotSupport && (\n        <Amount\n          onClick={() => {\n            const formatedBalance = utils.balanceFormated();\n            if (![\"-\", \"Loading\", \"0\"].includes(formatedBalance))\n              props.onAmountChange?.(state.balance);\n          }}\n        >\n          Balance:{\" \"}\n          <span\n            style={{\n              textDecoration: props.disabled ? \"none\" : \"underline\",\n            }}\n          >\n            {utils.balanceFormated()}\n          </span>\n        </Amount>\n      )}\n    </CurrencyField>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Uniswap.Swap.CurrencyInput", "fact_widget_deployments_id": "67448468325f4d064b0d20985213d6e7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}