{"tx_hash": "96aztAktsEU4hsLHjZywsWRmzUS48tHXhjYcGdiQA5AU", "action_id_social": "3UEWaipDYz6xHRTrRv2y7xKWNzHJsb1ftVBV1W3GumSJ-0-widget", "block_id": 104286083, "block_timestamp": "2023-10-27T02:38:00.822Z", "signer_id": "dapdapbos.near", "widget_name": "Swap.SwapV2", "source_code": "const {\n  title,\n  chainId,\n  chainName,\n  wethAddress,\n  dexConfig,\n  amountOutFn,\n  quoterV3,\n  handlerV2,\n  handlerV3,\n  handlerSolidly,\n  QuoterSolidly,\n  handleSyncswap,\n  QuoterSyncswap,\n  account,\n} = props;\n\nconst {\n  name,\n  CHAIN_LIST,\n  DEFAULT_CHAIN_ID,\n  dappConfig,\n  curChainId,\n  chains,\n  dappSrc,\n} = props;\n\nconst chainIdNotSupport = !CHAIN_LIST.find(\n  (chain) => chain.chainId === curChainId\n);\n\nconst defaultChain = CHAIN_LIST.find(\n  (chain) => chain.chainId === DEFAULT_CHAIN_ID\n);\n\nconst curChain = CHAIN_LIST.find((chain) => chain.chainId === curChainId);\n\nconst prevTitle = Storage.privateGet(\"prevTitle\");\nif (prevTitle !== title || !state.inputCurrency) {\n  State.update({\n    inputCurrency: dexConfig.defaultCurrencies.input,\n    outputCurrency: dexConfig.defaultCurrencies.output,\n    uniType: dexConfig.type,\n    inputCurrencyAmount: \"1\",\n    outputCurrencyAmount: \"\",\n    maxInputBalance: \"0\",\n    maxOutputBalance: \"0\",\n    tradeType: \"in\",\n    targetUnitAmount: 0,\n    noPair: false,\n    updateInputTokenBalance: true,\n    updateOutputTokenBalance: true,\n    loading: true,\n    displayCurrencySelect: false,\n    selectedTokenAddress: \"\",\n    currencySelectType: 0,\n    debounce: (fn, wait) => {\n      let timer;\n      return () => {\n        clearTimeout(timer);\n        timer = setTimeout(fn, wait);\n      };\n    },\n  });\n  Storage.privateSet(\"prevTitle\", title);\n}\n// styled area\n\nconst PanelLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n\n  color: white;\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 22px;\n\n  .chain-icon {\n    width: 26px;\n    height: 26px;\n    border-radius: 8px;\n  }\n`;\n\nconst SwapContainer = styled.div``;\n\nconst BackRoute = styled.div`\n  position: absolute;\n  width: 100vw;\n  left: 0;\n  top: 0;\n  border-bottom: 1px solid #343838;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  .back-icon {\n    padding-left: 100px;\n    padding-right: 8px;\n  }\n\n  .dapp-logo {\n    width: 32px;\n    height: 32px;\n    cursor: pointer;\n  }\n\n  .dapp-name {\n    font-size: 16px;\n    font-style: italic;\n    font-weight: 900;\n    line-height: 24px;\n    letter-spacing: 0em;\n    text-align: left;\n    color: var(--button-color);\n  }\n`;\n\nconst Panel = styled.div`\n  width: 100%;\n  border-radius: 16px;\n  border: 1px solid var(--border-color);\n\n  position: relative;\n\n  padding: 24px 8px 12px;\n\n  background-color: #181a27;\n`;\n\nconst ExchangeIconWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 10px;\n`;\n\nconst ExchangeIcon = styled.div`\n  height: 34px;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  left: 50%;\n  top: 50%;\n  svg {\n    color: var(--text-color);\n  }\n`;\nconst PanelLabel = styled.div``;\n\nconst Price = styled.div`\n  font-size: 14px;\n  color: var(--thirdary-text-color);\n  text-align: right;\n  margin-bottom: 20px;\n  margin-top: 20px;\n\n  @media (max-width: 768px) {\n    margin-top: 10px;\n  }\n`;\n\n// styled area end\n\nconst getBestTrade = () => {\n  State.update({\n    loading: true,\n  });\n};\n\nconst backIcon = (\n  <svg\n    width=\"8\"\n    height=\"13\"\n    viewBox=\"0 0 8 13\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M7 12L2 6.5L7 1\"\n      stroke=\"#979ABE\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\n\nconst getUnitAmount = () => {\n  const bigInputAmount = Big(state.inputCurrencyAmount || 0);\n  const bigOutputAmount = Big(state.outputCurrencyAmount || 0);\n  if (bigInputAmount.eq(0) || bigOutputAmount.eq(0)) return \"-\";\n  const unitAmount = bigOutputAmount.div(bigInputAmount);\n  if (unitAmount.lt(0.001)) return unitAmount.toPrecision(1);\n  return unitAmount.toFixed(3);\n};\n\nreturn (\n  <SwapContainer>\n    <BackRoute>\n      <a className=\"back-icon\" href=\"/\">\n        {backIcon}\n      </a>\n\n      <img className=\"dapp-logo\" src={dexConfig.logo} />\n\n      <div className=\"dapp-name\">{dexConfig.name}</div>\n    </BackRoute>\n\n    <Panel>\n      {chainIdNotSupport && (\n        <Widget\n          src=\"dapdapbos.near/widget/Swap.ChainWarnigBox\"\n          props={{\n            chain: defaultChain,\n          }}\n        />\n      )}\n      <PanelLabelWrapper>\n        <PanelLabel>Swap on</PanelLabel>\n        <img className=\"chain-icon\" src={curChain.icon || defaultChain.icon} />\n        <Widget\n          props={{\n            CHAIN_LIST,\n            curChain,\n          }}\n          src=\"dapdapbos.near/widget/Swap.ChainListDropDown\"\n        />\n      </PanelLabelWrapper>\n\n      <Widget\n        src=\"dapdapbos.near/widget/Swap.CurrencyInput\"\n        props={{\n          currency: state.inputCurrency,\n          chainIdNotSupport,\n          amount: state.inputCurrencyAmount,\n          updateTokenBalance: state.updateInputTokenBalance,\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: true,\n              currencySelectType: 0,\n              selectedTokenAddress: state.inputCurrency.address,\n            });\n          },\n          onUpdateCurrencyBalance: (balance) => {\n            State.update({\n              maxInputBalance: ethers.utils.formatUnits(\n                balance,\n                state.inputCurrency.decimals\n              ),\n              updateInputTokenBalance: false,\n            });\n          },\n          onAmountChange: (val) => {\n            State.update({\n              inputCurrencyAmount: val,\n              tradeType: \"in\",\n              loading:\n                val &&\n                Number(val) &&\n                state.inputCurrency.address &&\n                state.outputCurrency.address,\n            });\n            if (val && Number(val)) state.debounce(getBestTrade, 500)();\n          },\n        }}\n      />\n      <ExchangeIconWrapper>\n        <ExchangeIcon\n          onClick={() => {\n            const [inputCurrency, outputCurrency] = [\n              state.outputCurrency,\n              state.inputCurrency,\n            ];\n            State.update({\n              inputCurrency,\n              outputCurrency,\n              outputCurrencyAmount: \"\",\n              tradeType: \"in\",\n              updateInputTokenBalance: true,\n              updateOutputTokenBalance: true,\n              loading: true,\n            });\n            if (Big(state.inputCurrencyAmount || 0).gt(0)) getBestTrade();\n          }}\n        >\n          <Widget src=\"dapdapbos.near/widget/Swap.ExchangeIcon\" />\n        </ExchangeIcon>\n      </ExchangeIconWrapper>\n\n      <Widget\n        src=\"dapdapbos.near/widget/Swap.CurrencyInput\"\n        props={{\n          currency: state.outputCurrency,\n          chainIdNotSupport,\n          amount: state.outputCurrencyAmount,\n          updateTokenBalance: state.updateOutputTokenBalance,\n          disabled: true,\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: true,\n              currencySelectType: 1,\n              selectedTokenAddress: state.outputCurrency.address,\n            });\n          },\n          onUpdateCurrencyBalance: () => {\n            State.update({\n              updateOutputTokenBalance: false,\n            });\n          },\n        }}\n      />\n      <Price>\n        1 {state.inputCurrency.symbol}\u2248 {getUnitAmount()}{\" \"}\n        {state.outputCurrency.symbol}\n      </Price>\n      <Widget\n        src=\"dapdapbos.near/widget/Swap.SwapButton\"\n        props={{\n          routerAddress: dexConfig.routerAddress,\n          wethAddress,\n          title,\n          chainName,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          inputCurrencyAmount: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          maxInputBalance: state.maxInputBalance,\n          handleSyncswap,\n          handlerV2,\n          handlerV3: dexConfig.handler || handlerV3,\n          handlerSolidly,\n          onSuccess: () => {\n            State.update({\n              updateInputTokenBalance: true,\n              updateOutputTokenBalance: true,\n            });\n          },\n          noPair: state.noPair,\n          loading: state.loading,\n          fee: state.v3Fee,\n          stable: state.stable,\n          syncSwapPoolAddress: state.syncSwapPoolAddress,\n          uniType: dexConfig.uniType,\n        }}\n      />\n    </Panel>\n    {state.displayCurrencySelect && (\n      <Widget\n        src=\"dapdapbos.near/widget/Swap.CurrencySelect\"\n        props={{\n          display: state.displayCurrencySelect,\n          chainIdNotSupport,\n          selectedTokenAddress: state.selectedTokenAddress,\n          title: props.title,\n          chainId: props.chainId,\n          tokens: dexConfig.tokens,\n          onClose: () => {\n            State.update({\n              displayCurrencySelect: false,\n            });\n          },\n          onSelect: (currency) => {\n            const updatedParams = {\n              outputCurrencyAmount: \"\",\n              noPair: false,\n              updateInputTokenBalance: true,\n            };\n            if (state.currencySelectType === 0) {\n              updatedParams.inputCurrency = currency;\n              if (currency.address === state.outputCurrency.address)\n                updatedParams.outputCurrency = null;\n            }\n            if (state.currencySelectType === 1) {\n              updatedParams.outputCurrency = currency;\n              if (currency.address === state.inputCurrency.address) {\n                updatedParams.inputCurrency = null;\n                updatedParams.inputCurrencyAmount = \"\";\n              }\n            }\n            if (\n              state.inputCurrencyAmount &&\n              Number(state.inputCurrencyAmount) &&\n              state.inputCurrency?.address\n            ) {\n              updatedParams.loading = true;\n            }\n            State.update(updatedParams);\n            if (updatedParams.loading) getBestTrade();\n          },\n        }}\n      />\n    )}\n\n    {dexConfig.uniType === \"v3\" && !chainIdNotSupport && account && (\n      <Widget\n        src={quoterV3}\n        props={{\n          amountIn: state.inputCurrencyAmount,\n          tokenIn: state.inputCurrency,\n          tokenOut: state.outputCurrency,\n          quoterContractId: dexConfig.quoterAddress,\n          wethAddress,\n          loadAmountOut: (data) => {\n            State.update({\n              outputCurrencyAmount: data.amountOut,\n              v3Fee: data.fee,\n              loading: false,\n            });\n          },\n        }}\n      />\n    )}\n    {dexConfig.uniType === \"v2\" && !chainIdNotSupport && account && (\n      <Widget\n        src={amountOutFn}\n        props={{\n          update: state.loading,\n          routerAddress: dexConfig.routerAddress,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          inputCurrencyAmount: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          tradeType: state.tradeType,\n          wethAddress,\n          onLoad: (data) => {\n            State.update({\n              loading: false,\n              ...data,\n            });\n          },\n        }}\n      />\n    )}\n\n    {dexConfig.uniType === \"solidly\" && !chainIdNotSupport && account && (\n      <Widget\n        src={QuoterSolidly}\n        props={{\n          update: state.loading,\n          routerAddress: dexConfig.routerAddress,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          inputCurrencyAmount: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          tradeType: state.tradeType,\n          wethAddress,\n          onLoad: (data) => {\n            State.update({\n              loading: false,\n              ...data,\n            });\n          },\n        }}\n      />\n    )}\n\n    {dexConfig.uniType === \"Syncswap\" && !chainIdNotSupport && account && (\n      <Widget\n        src={QuoterSyncswap}\n        props={{\n          ...dexConfig,\n          update: state.loading,\n          routerAddress: dexConfig.routerAddress,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          inputCurrencyAmount: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          tradeType: state.tradeType,\n          wethAddress,\n          onLoad: (data) => {\n            State.update({\n              loading: false,\n              ...data,\n            });\n          },\n        }}\n      />\n    )}\n  </SwapContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Swap.SwapV2", "fact_widget_deployments_id": "606ee99cdbc2d3cfc2db5bffdb091549", "inserted_timestamp": "2023-10-27T04:28:53.099Z", "modified_timestamp": "2023-10-27T04:28:53.099Z", "__row_index": 0}