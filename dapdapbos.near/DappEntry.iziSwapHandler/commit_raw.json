{"tx_hash": "6LqD6MoY9oezQP3W1WtrX7uFeu7F5TXr5RkVFG1DC4bJ", "action_id_social": "3e3S2aUJ9AeBgZ1UQBimWvaK8oXTArkeWMdSPCL2djHw-0-widget", "block_id": 104285073, "block_timestamp": "2023-10-27T02:15:35.339Z", "signer_id": "dapdapbos.near", "widget_name": "DappEntry.iziSwapHandler", "source_code": "const abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_factory\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_weth\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"WETH9\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"factory\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenX\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenY\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint24\",\n        name: \"fee\",\n        type: \"uint24\",\n      },\n    ],\n    name: \"pool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"refundETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapAmountParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cost\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"acquire\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"desire\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapDesireParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapDesire\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cost\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"acquire\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapX2Y\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"swapX2YCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapX2YDesireY\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapY2X\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"swapY2XCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapY2XDesireX\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"sweepToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"minAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst {\n  inputCurrencyAmount,\n  outputCurrencyAmount,\n  inputCurrency,\n  outputCurrency,\n  wethAddress,\n  account,\n  fee,\n  chainId,\n  routerAddress,\n  swapping: swapping,\n  title,\n  onError,\n  onSuccess,\n} = props;\nconsole.log(\"props: \", props);\n\nif (!swapping || !account) return \"\";\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst value = expandToken(inputCurrencyAmount, inputCurrency.decimals).toFixed(\n  0\n);\n\nconst signer = Ethers.provider().getSigner();\n\nconst deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\nconst iface = new ethers.utils.Interface(abi);\nconst tokenInAddress =\n  inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\nconst tokenOutAddress =\n  outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\nconst isX2Y = tokenInAddress.toLowerCase() < tokenOutAddress.toLowerCase();\nconst boundaryPt = isX2Y ? -799999 : 799999;\n\nconst multicallParams = [];\n\nconst parsedAmountIn = ethers.utils.parseUnits(\n  inputCurrencyAmount,\n  inputCurrency.decimals\n);\n\nconsole.log(\"multicallParams: \", multicallParams);\n\nconst options = {\n  from: account,\n  value: \"0\",\n};\n\nif (inputCurrency.address === \"native\") {\n  options.value = parsedAmountIn;\n}\n\nif (isX2Y) {\n  const inputs = [\n    {\n      tokenX: tokenInAddress,\n      tokenY: tokenOutAddress,\n      fee: fee,\n      boundaryPt: boundaryPt,\n      recipient:\n        outputCurrency.address === \"native\"\n          ? \"0x0000000000000000000000000000000000000000\"\n          : account,\n      amount: parsedAmountIn,\n      maxPayed: \"0\",\n      minAcquired: \"0\",\n      deadline: deadline.toFixed(),\n    },\n  ];\n\n  console.log(\"inputs: \", inputs);\n\n  const encodedDataCallSwap = iface.encodeFunctionData(\"swapX2Y\", inputs);\n\n  multicallParams.push(encodedDataCallSwap);\n} else {\n  const inputs = [\n    {\n      tokenX: tokenOutAddress,\n      tokenY: tokenInAddress,\n      fee: fee,\n      boundaryPt: boundaryPt,\n      recipient:\n        outputCurrency.address === \"native\"\n          ? \"0x0000000000000000000000000000000000000000\"\n          : account,\n      amount: parsedAmountIn,\n      maxPayed: \"0\",\n      minAcquired: \"0\",\n      deadline: deadline.toFixed(),\n    },\n  ];\n\n  console.log(\"inputs: \", inputs);\n\n  const encodedDataCallSwap = iface.encodeFunctionData(\"swapY2X\", inputs);\n\n  multicallParams.push(encodedDataCallSwap);\n}\n\nif (outputCurrency.address === \"native\") {\n  multicallParams.push(iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account]));\n}\n\nconst multicallit = () => {\n  return multicallContract\n    .multicall(multicallParams, options)\n    .then((res) => {\n      onSuccess(res);\n    })\n    .catch((err) => {\n      console.log(err);\n      onError(err);\n    });\n};\n\nconst multicallContract = new ethers.Contract(routerAddress, abi, signer);\n\nmulticallContract.estimateGas\n  .multicall(multicallParams, { ...options, gasLimit: 5000000 })\n  .then((gas) => {\n    console.log(\"gas: \", gas);\n\n    const gasLimit = gas.toString();\n\n    return Big(gasLimit).times(1.1).toFixed(0);\n  })\n  .then((gasLimit) => {\n    return multicallContract\n      .multicall(multicallParams, { value: options.value, gasLimit })\n      .then((res) => {\n        onSuccess(res);\n      })\n      .catch((err) => {\n        console.log(err);\n        onError(err);\n      });\n  })\n  .catch((err) => {\n    if (err.code === \"UNPREDICTABLE_GAS_LIMIT\") {\n      return multicallit();\n    }\n\n    onError(err);\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/DappEntry.iziSwapHandler", "fact_widget_deployments_id": "cb4ef8ce3fc4bb1ac3fca18268dd2ebf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}