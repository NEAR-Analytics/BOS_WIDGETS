{"tx_hash": "FXfX2nXk2rx9SxmFhga7SrgDGQrxBEgrRmusHXYBdWQN", "action_id_social": "Aa3iMLer5qsw2BUjyEhRu6ZGkfvXLyXEXu1s74frjKSk-0-widget", "block_id": 121143138, "block_timestamp": "2024-06-14T11:37:30.013Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.Handler", "source_code": "const { account, dexConfig, addAction, toast, onLoad } = props;\n\nconst { positionManagerAddress, targetAddress, v2Address } = dexConfig;\n\nuseEffect(() => {\n  const handleAction = ({\n    type,\n    id,\n    pool,\n    amount,\n    method,\n    price,\n    symbol,\n    onSuccess,\n    onError,\n  }) => {\n    let Contract = null;\n    if (type === \"V2\") {\n      Contract = new ethers.Contract(\n        v2Address,\n        [\n          {\n            inputs: [\n              { internalType: \"address\", name: \"_lpToken\", type: \"address\" },\n              { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n              { internalType: \"uint256\", name: \"_lock\", type: \"uint256\" },\n            ],\n            name: \"stake\",\n            outputs: [],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n          {\n            inputs: [\n              { internalType: \"address\", name: \"_lpToken\", type: \"address\" },\n              { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n            ],\n            name: \"unstake\",\n            outputs: [],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n        ],\n        Ethers.provider().getSigner()\n      );\n    } else {\n      Contract = new ethers.Contract(\n        method === \"safeTransferFrom\" ? positionManagerAddress : targetAddress,\n        [\n          {\n            inputs: [\n              {\n                components: [\n                  { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n                  {\n                    internalType: \"address\",\n                    name: \"recipient\",\n                    type: \"address\",\n                  },\n                  {\n                    internalType: \"uint128\",\n                    name: \"amount0Max\",\n                    type: \"uint128\",\n                  },\n                  {\n                    internalType: \"uint128\",\n                    name: \"amount1Max\",\n                    type: \"uint128\",\n                  },\n                ],\n                internalType:\n                  \"struct INonfungiblePositionManagerStruct.CollectParams\",\n                name: \"params\",\n                type: \"tuple\",\n              },\n            ],\n            name: \"collect\",\n            outputs: [\n              { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n              { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n            ],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n          {\n            inputs: [\n              { internalType: \"uint256\", name: \"_tokenId\", type: \"uint256\" },\n            ],\n            name: \"withdraw\",\n            outputs: [],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n          {\n            inputs: [\n              { internalType: \"address\", name: \"from\", type: \"address\" },\n              { internalType: \"address\", name: \"to\", type: \"address\" },\n              { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n            ],\n            name: \"safeTransferFrom\",\n            outputs: [],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n        ],\n        Ethers.provider().getSigner()\n      );\n    }\n\n    let params = [];\n    if (method === \"collect\") {\n      params = [\n        [\n          pool.id,\n          account,\n          \"340282366920938463463374607431768211455\",\n          \"340282366920938463463374607431768211455\",\n        ],\n      ];\n    }\n    if (method === \"withdraw\") {\n      params = [pool.id];\n    }\n    if (method === \"safeTransferFrom\") {\n      params = [account, targetAddress, pool.id];\n    }\n    const _amount = Big(amount || 0)\n      .mul(Big(10).pow(18))\n      .toFixed(0);\n    if (method === \"stake\") {\n      params = [id, _amount, 0];\n    }\n    if (method === \"unstake\") {\n      params = [id, _amount];\n    }\n    Contract.estimateGas[method](...params)\n      .then((res) => {\n        console.log(\"estimateGas\", res);\n        let toastId = toast.loading({\n          title: \"Confirming...\",\n        });\n        Contract[method](...params, { gasLimit: Big(res).mul(1.2).toFixed(0) })\n          .then((tx) => {\n            toast.dismiss(toastId);\n            toastId = toast.loading({\n              title: \"Pending...\",\n            });\n            const action =\n              method === \"collect\"\n                ? \"Collect Fees\"\n                : [\"withdraw\", \"unstake\"].includes(method)\n                ? \"Unstake\"\n                : \"Stake\";\n            tx.wait()\n              .then((res) => {\n                const { status, transactionHash } = res;\n                toast.dismiss(toastId);\n                if (status === 1) {\n                  onSuccess();\n                  toast.success({\n                    title: `${action} successfully!`,\n                  });\n                } else {\n                  onError();\n                  toast.fail({\n                    title: `${action} faily!`,\n                  });\n                }\n                if (method !== \"collect\") {\n                  const extraData =\n                    type === \"V2\"\n                      ? {\n                          token: symbol,\n                          amount,\n                          price,\n                        }\n                      : {\n                          token0Symbol: pool.token0.symbol,\n                          token1Symbol: pool.token1.symbol,\n                          amount0: pool.amount0.toString(),\n                          amount1: pool.amount1.toString(),\n                          price0: pool.price0,\n                          price1: pool.price1,\n                          fee: pool.fee,\n                        };\n                  addAction({\n                    type: \"Staking\",\n                    template: \"Hyperlock\",\n                    account,\n                    status,\n                    transactionHash,\n                    amount,\n                    extra_data: JSON.stringify({\n                      action,\n                      ...extraData,\n                    }),\n                  });\n                }\n              })\n              .catch((err) => {\n                toast.dismiss(toastId);\n                onError(err);\n              });\n          })\n          .catch((err) => {\n            toast.dismiss(toastId);\n            toast.fail({\n              title: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : `Add faily!`,\n            });\n            onError(err);\n          });\n      })\n      .catch((err) => {\n        onError(err);\n      });\n  };\n\n  onLoad(handleAction);\n}, []);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.Handler", "fact_widget_deployments_id": "e0cac6db6f42f69f0f243bf6f9f94f34", "inserted_timestamp": "2024-06-14T12:58:35.020Z", "modified_timestamp": "2024-06-14T13:55:14.613Z", "__row_index": 0}