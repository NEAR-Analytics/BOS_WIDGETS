{"tx_hash": "EC9f32MbqbUMtKgTQ74XuhqMsS1yy5bq8RecnbcyqFfq", "action_id_social": "ApSLximzk4m5q86CDdk6LmRGCtPtapDN8R6zze73dSS6-0-widget", "block_id": 117880095, "block_timestamp": "2024-04-29T11:25:01.682Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.Handler", "source_code": "const { account, dexConfig, addAction, toast, onLoad } = props;\n\nconst { positionManagerAddress, targetAddress } = dexConfig;\nuseEffect(() => {\n  const handleAction = ({ pool, method, onSuccess, onError }) => {\n    const Contract = new ethers.Contract(\n      method === \"safeTransferFrom\" ? positionManagerAddress : targetAddress,\n      [\n        {\n          inputs: [\n            {\n              components: [\n                { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n                { internalType: \"address\", name: \"recipient\", type: \"address\" },\n                {\n                  internalType: \"uint128\",\n                  name: \"amount0Max\",\n                  type: \"uint128\",\n                },\n                {\n                  internalType: \"uint128\",\n                  name: \"amount1Max\",\n                  type: \"uint128\",\n                },\n              ],\n              internalType:\n                \"struct INonfungiblePositionManagerStruct.CollectParams\",\n              name: \"params\",\n              type: \"tuple\",\n            },\n          ],\n          name: \"collect\",\n          outputs: [\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n          ],\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n        {\n          inputs: [\n            { internalType: \"uint256\", name: \"_tokenId\", type: \"uint256\" },\n          ],\n          name: \"withdraw\",\n          outputs: [],\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n        {\n          inputs: [\n            { internalType: \"address\", name: \"from\", type: \"address\" },\n            { internalType: \"address\", name: \"to\", type: \"address\" },\n            { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n          ],\n          name: \"safeTransferFrom\",\n          outputs: [],\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    let params = [];\n    if (method === \"collect\") {\n      params = [\n        [\n          pool.id,\n          account,\n          \"340282366920938463463374607431768211455\",\n          \"340282366920938463463374607431768211455\",\n        ],\n      ];\n    }\n    if (method === \"withdraw\") {\n      params = [pool.id];\n    }\n    if (method === \"safeTransferFrom\") {\n      params = [account, targetAddress, pool.id];\n    }\n    Contract.estimateGas[method](...params)\n      .then((res) => {\n        console.log(\"estimateGas\", res);\n        let toastId = toast.loading({\n          title: \"Confirming...\",\n        });\n        Contract[method](...params, { gasLimit: Big(res).mul(1.2).toFixed(0) })\n          .then((tx) => {\n            toast.dismiss(toastId);\n            toastId = toast.loading({\n              title: \"Pending...\",\n            });\n            const action =\n              method === \"collect\"\n                ? \"Collect Fees\"\n                : method === \"withdraw\"\n                ? \"Unstake\"\n                : \"Stake\";\n            tx.wait()\n              .then((res) => {\n                const { status, transactionHash } = res;\n                toast.dismiss(toastId);\n                if (status === 1) {\n                  onSuccess();\n                  toast.success({\n                    title: `${action} successfully!`,\n                  });\n                } else {\n                  onError();\n                  toast.fail({\n                    title: `${action} faily!`,\n                  });\n                }\n\n                addAction({\n                  type: \"Staking\",\n                  template: \"Hyperlock\",\n                  account,\n                  action,\n                  token: {\n                    symbol: pool.name,\n                  },\n                  status,\n                  transactionHash,\n                });\n              })\n              .catch((err) => {\n                toast.dismiss(toastId);\n                onError(err);\n              });\n          })\n          .catch((err) => {\n            toast.dismiss(toastId);\n            toast.fail({\n              title: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : `Add faily!`,\n            });\n            onError(err);\n          });\n      })\n      .catch((err) => {\n        onError(err);\n      });\n  };\n\n  onLoad(handleAction);\n}, []);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.Handler", "fact_widget_deployments_id": "1a83947c8043927b1faef5a649e8bdbc", "inserted_timestamp": "2024-04-29T12:48:04.052Z", "modified_timestamp": "2024-04-29T13:40:15.700Z", "__row_index": 1}