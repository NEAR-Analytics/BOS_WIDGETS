{"tx_hash": "GZ4ddqxAwpmbgSdYTmorjd5oBni9BYjQFmiKvf2hE23r", "action_id_social": "E6q57vqDiuTWuuge8SZSyr8RRQpohA2wVrSDHdL8HLjs-0-widget", "block_id": 104522114, "block_timestamp": "2023-10-30T07:55:13.530Z", "signer_id": "dapdapbos.near", "widget_name": "Uniswap.Swap.SwapButton", "source_code": "const SwapButtonConnectWrapper = styled.button`\n  border: none;\n  width: 100%;\n  background: transparent;\n\n  .connect-button {\n    width: 100%;\n    height: 60px;\n    border-radius: 10px;\n    background-color: #2e1d30;\n    color: #e97ef8;\n    font-size: 18px;\n    line-height: 22px;\n    border: none;\n    transition: 0.5s;\n    cursor: pointer;\n    font-weight: 700;\n    :hover {\n      opacity: 0.8;\n    }\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n    @media (max-width: 900px) {\n      height: 40px;\n      font-size: 16px;\n    }\n  }\n`;\n\nconst SwapButton = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  background-color: rgb(252, 114, 255);\n\n  color: white;\n  font-size: 18px;\n  line-height: 22px;\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  font-weight: 700;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n  @media (max-width: 900px) {\n    height: 40px;\n    font-size: 16px;\n  }\n`;\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!account) {\n  return (\n    <SwapButtonConnectWrapper>\n      <Web3Connect className=\"connect-button\" connectLabel=\"Connect Wallet\" />\n    </SwapButtonConnectWrapper>\n  );\n}\n\nif (props.noPair) {\n  return <SwapButton disabled>Insufficient Liquidity</SwapButton>;\n}\n\nif (props.loading) {\n  return <SwapButton disabled>Getting Trade Info...</SwapButton>;\n}\n\nconst {\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  outputCurrencyAmount,\n  maxInputBalance,\n  onSuccess,\n  routerAddress,\n  wethAddress,\n  title,\n  fee,\n  uniType,\n  chainName,\n  handlerV2,\n  handlerV3,\n  handlerSolidly,\n  handleSyncswap,\n  stable,\n  syncSwapPoolAddress,\n  chainId,\n} = props;\nconsole.log(\"props: \", props);\n\nif (Big(inputCurrencyAmount || 0).eq(0)) {\n  return <SwapButton disabled>Enter An Amount</SwapButton>;\n}\nif (!inputCurrency || !outputCurrency) {\n  return <SwapButton disabled>Select a token</SwapButton>;\n}\nif (Big(inputCurrencyAmount || 0).gt(maxInputBalance)) {\n  return (\n    <SwapButton disabled>\n      Insufficient {inputCurrency?.symbol} Balance\n    </SwapButton>\n  );\n}\n\nState.init({\n  isApproved: false,\n  approving: false,\n  swapping: false,\n  wrapping: false,\n});\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    inputCurrency.address,\n    [\n      {\n        constant: true,\n        inputs: [\n          {\n            name: \"_owner\",\n            type: \"address\",\n          },\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n        ],\n        name: \"allowance\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"uint256\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, routerAddress).then((allowanceRaw) => {\n    State.update({\n      isApproved: !Big(\n        ethers.utils.formatUnits(allowanceRaw._hex, inputCurrency.decimals)\n      ).lt(inputCurrencyAmount),\n    });\n  });\n};\n\nif (inputCurrency.address !== \"native\") {\n  getAllowance();\n} else {\n  State.update({ isApproved: true });\n}\n\nconst wrapType =\n  inputCurrency.address === \"native\" && outputCurrency.address === wethAddress\n    ? 1\n    : inputCurrency.address === wethAddress &&\n      outputCurrency.address === \"native\"\n    ? 2\n    : 0;\nconst handleApprove = () => {\n  State.update({\n    approving: true,\n  });\n  const TokenContract = new ethers.Contract(\n    inputCurrency.address,\n    [\n      {\n        constant: false,\n        inputs: [\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n          {\n            name: \"_value\",\n            type: \"uint256\",\n          },\n        ],\n        name: \"approve\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"bool\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.approve(\n    routerAddress,\n    ethers.utils.parseUnits(inputCurrencyAmount, inputCurrency.decimals)\n  )\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status, transactionHash } = res;\n        State.update({\n          isApproved: status === 1,\n          approving: false,\n        });\n      });\n    })\n    .catch(() => {\n      State.update({\n        approving: false,\n      });\n    });\n};\n\nif (!state.isApproved && wrapType === 0) {\n  return (\n    <SwapButton onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? \" Approving...\" : \" Approve\"}\n    </SwapButton>\n  );\n}\n\nfunction add_action(param_body) {\n  asyncFetch(\"https://bos-api.delink.one/add-action-data\", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(param_body),\n  });\n}\n\nfunction successCallback(tx, callback) {\n  tx.wait().then((res) => {\n    const { status, transactionHash } = res;\n    callback?.();\n    const uuid = Storage.get(\n      \"zkevm-warm-up-uuid\",\n      \"dapdapbos.near/widget/ZKEVMWarmUp.generage-uuid\"\n    );\n    add_action({\n      action_title: `Swap ${inputCurrencyAmount} ${inputCurrency.symbol} on ${title}`,\n      action_type: \"Swap\",\n      action_tokens: JSON.stringify([\n        `${inputCurrency.symbol}`,\n        `${outputCurrency.symbol}`,\n      ]),\n      action_amount: inputCurrencyAmount,\n      account_id: account,\n      account_info: uuid,\n      template: title,\n      action_status: status === 1 ? \"Success\" : \"Failed\",\n      tx_id: transactionHash,\n      action_network_id: chainName,\n    });\n    if (status === 1) {\n      onSuccess?.();\n    }\n  });\n}\n\nconst handleWrap = (type, onSuccess, onError) => {\n  const WethContract = new ethers.Contract(\n    wethAddress,\n    [\n      {\n        constant: false,\n        inputs: [],\n        name: \"deposit\",\n        outputs: [],\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"function\",\n      },\n      {\n        constant: false,\n        inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n        name: \"withdraw\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  if (type === 1) {\n    WethContract.deposit({\n      value: ethers.utils.parseEther(inputCurrencyAmount),\n    })\n      .then((tx) => {\n        tx.wait().then((res) => {\n          onSuccess?.(res);\n        });\n      })\n      .catch((err) => {\n        onError?.();\n      });\n  } else {\n    WethContract.withdraw(ethers.utils.parseEther(inputCurrencyAmount))\n      .then((tx) => {\n        tx.wait().then((res) => {\n          onSuccess?.(res);\n        });\n      })\n      .catch((err) => {\n        onError?.();\n      });\n  }\n};\n\nif (wrapType) {\n  return (\n    <SwapButton\n      onClick={() => {\n        State.update({\n          wrapping: true,\n        });\n        handleWrap(\n          wrapType,\n          (res) => {\n            successCallback(res, () => {\n              State.update({ wrapping: false });\n            });\n          },\n          () => {\n            State.update({\n              wrapping: false,\n            });\n          }\n        );\n      }}\n      disabled={state.wrapping}\n    >\n      {wrapType === 1\n        ? state.wrapping\n          ? \"Wrapping...\"\n          : \"Wrap\"\n        : state.wrapping\n        ? \"Unwrapping...\"\n        : \"Unwrap\"}\n    </SwapButton>\n  );\n}\n\nreturn (\n  <>\n    {uniType === \"v3\" && state.swapping ? (\n      <Widget\n        src={handlerV3}\n        props={{\n          inputCurrencyAmount,\n          outputCurrencyAmount,\n          inputCurrency,\n          outputCurrency,\n          wethAddress,\n          account,\n          fee,\n          chainId,\n          routerAddress,\n          swapping: state.swapping,\n          title,\n          onSuccess: (res) => {\n            successCallback(res, () => {\n              State.update({ swapping: false });\n            });\n          },\n          onError: (err) => {\n            State.update({ swapping: false });\n          },\n        }}\n      />\n    ) : (\n      \"\"\n    )}\n\n    {/* {uniType === \"v3\" && state.swapping && (\n      <Widget\n        src={handlerV3}\n        props={{\n          inputCurrencyAmount,\n          inputCurrency,\n          wethAddress,\n          outputCurrency,\n          account,\n          fee,\n          routerAddress,\n          swapping: state.swapping,\n          onSuccess: (res) => {\n            successCallback(res, () => {\n              State.update({ swapping: false });\n            });\n          },\n          onError: (err) => {\n            State.update({ swapping: false });\n          },\n        }}\n      />\n    )} */}\n\n    <SwapButton\n      onClick={() => {\n        State.update({ swapping: true });\n      }}\n      disabled={state.swapping}\n    >\n      {state.swapping ? \"Swapping...\" : \"Swap\"}\n    </SwapButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Uniswap.Swap.SwapButton", "fact_widget_deployments_id": "ac3fb62c817e36b37e6a845af8ad08cc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}