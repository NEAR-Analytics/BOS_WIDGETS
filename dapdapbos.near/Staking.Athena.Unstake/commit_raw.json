{"tx_hash": "DmF97i2ou8LgLo2hLPZyprvsfZtduhatGvUPDKi5FPdR", "action_id_social": "7YYMeB5p9sN1hYREXhcYyPmUPVqNvykUB2bm2kntg6Ji-0-widget", "block_id": 114625943, "block_timestamp": "2024-03-13T11:39:20.801Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Athena.Unstake", "source_code": "const StakePanel = styled.div`\n  width: 510px;\n  margin: 0 auto;\n  /* reset input */\n  .bos-input-number {\n    background-color: var(--dark);\n    color: var(--white);\n    border: none;\n    border-radius: 10px !important;\n  }\n  .input-group {\n    column-gap: 5px;\n  }\n  .append-token {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    position: absolute;\n    right: 12px;\n    /* top: 4px; */\n    height: 36px;\n    z-index: 5;\n  }\n\n  .avatars {\n    margin-right: 20px;\n  }\n`;\nconst AmountList = styled.div`\n  display: flex;\n  font-size: var(--fz12);\n  color: var(--purple);\n  justify-content: space-between;\n  padding: 10px 0 16px;\n  .amount-left {\n  }\n  .amount-right {\n  }\n  .amount-white {\n    color: var(--white);\n    text-decoration: underline;\n  }\n`;\n\nconst UnStakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 22px;\n  align-items: center;\n  .switch-wrap {\n    display: flex;\n    align-items: center;\n    column-gap: 8px;\n    color: var(--purple);\n  }\n`;\n\nconst ChainBtnWrap = styled.div`\n  margin-top: 16px;\n  display: flex;\n`;\n\nconst { data, account, TOKENS, startUnlockIndex, addAction } = props;\nconst curToken = data.tokenAddress;\nconst {\n  poolType,\n  poolName,\n  totalDeposit,\n  unlocking,\n  StakingAddress,\n  stakedAmount,\n} = data;\n\nState.init({\n  // isClaimRewards: false,\n  inputValue: \"\",\n  canUnstake: false,\n  unstaking: false,\n  stakedAmountShow: Number(stakedAmount).toFixed(2),\n});\n\nconst handleInputChange = (e) => {\n  State.update({\n    inputValue: e.target.value,\n  });\n};\n\nuseEffect(() => {\n  if (\n    !state.inputValue ||\n    !Big(Number(state.inputValue)).gt(0) ||\n    Big(Number(state.inputValue)).gt(Big(stakedAmount || 0))\n  ) {\n    State.update({\n      canUnstake: false,\n    });\n  } else {\n    State.update({\n      canUnstake: true,\n    });\n  }\n}, [state.inputValue]);\n\nfunction handleUnStake() {\n  if (poolType === \"Locking\") {\n    handleUnStakeLocking();\n  }\n  if (poolType === \"MasterChief\") {\n    handleUnStakeMasterChief();\n  }\n}\n\nfunction handleUnStakeLocking() {\n  State.update({\n    unstaking: true,\n  });\n  const UnstakeContract = new ethers.Contract(\n    StakingAddress,\n    [\n      {\n        type: \"function\",\n        stateMutability: \"nonpayable\",\n        outputs: [],\n        name: \"startUnlock\",\n        inputs: [\n          {\n            type: \"uint256\",\n            name: \"strategyIndex\",\n            internalType: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n            name: \"amount\",\n            internalType: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n            name: \"slotIndex\",\n            internalType: \"uint256\",\n          },\n        ],\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  UnstakeContract.startUnlock(\n    0,\n    ethers.utils.parseUnits(state.inputValue),\n    startUnlockIndex,\n    {\n      gasLimit: 5000000,\n    }\n  )\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n            addAction?.({\n              type: \"Staking\",\n              action: \"Unstake\",\n              token: TOKENS[curToken],\n              amount: state.inputValue,\n              template: \"Athena\",\n              add: false,\n              status,\n              transactionHash,\n            });\n            updateStakedAmount();\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            unstaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        unstaking: false,\n      });\n      console.log(\"handleUnStakeLocking_error:\", err);\n    });\n}\n\nfunction handleUnStakeMasterChief() {\n  State.update({\n    unstaking: true,\n  });\n  const UnstakeContract = new ethers.Contract(\n    StakingAddress,\n    [\n      {\n        type: \"function\",\n        stateMutability: \"nonpayable\",\n        outputs: [],\n        name: \"withdraw\",\n        inputs: [\n          {\n            type: \"address\",\n            name: \"_lp\",\n            internalType: \"address\",\n          },\n          {\n            type: \"uint256\",\n            name: \"_amount\",\n            internalType: \"uint256\",\n          },\n        ],\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  UnstakeContract.withdraw(curToken, ethers.utils.parseUnits(state.inputValue))\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n            addAction?.({\n              type: \"Staking\",\n              action: \"Unstake\",\n              token: TOKENS[curToken],\n              amount: state.inputValue,\n              template: \"Athena\",\n              add: false,\n              status,\n              transactionHash,\n            });\n            updateStakedAmount();\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            unstaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        unstaking: false,\n      });\n      console.log(\"handleUnStakeMasterChief_error:\", err);\n    });\n}\n\nfunction updateStakedAmount() {\n  State.update({\n    stakedAmountShow: state.stakedAmountShow - state.inputValue,\n  });\n}\n\nfunction fillBalance() {\n  State.update({\n    inputValue: stakedAmount,\n  });\n}\nreturn (\n  <StakePanel>\n    <div className=\"input-group\">\n      <input\n        value={state.inputValue}\n        type=\"number\"\n        className=\"form-control bos-input-number\"\n        placeholder=\"0.0\"\n        onChange={handleInputChange}\n      />\n      <div className=\"append-token\">\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Avatar\"\n          props={{ src: TOKENS[curToken].icon, size: 20 }}\n        />\n      </div>\n    </div>\n    <AmountList>\n      <span></span>\n      <span onClick={fillBalance}>\n        Balance: <span className=\"amount-white\">{state.stakedAmountShow}</span>\n        {/* {TOKENS[curToken].symbol} */}\n      </span>\n    </AmountList>\n    <UnStakeBtnWrap>\n      <Widget\n        src=\"dapdapbos.near/widget/UI.Button\"\n        props={{\n          text: \"Unstake\",\n          type: \"green\",\n          style: { flex: 1 },\n          loading: state.unstaking,\n          disabled: !state.canUnstake,\n          onClick: handleUnStake,\n        }}\n      />\n    </UnStakeBtnWrap>\n  </StakePanel>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Athena.Unstake", "fact_widget_deployments_id": "e908601909a6de59a2023167490698a6", "inserted_timestamp": "2024-03-13T13:25:52.848Z", "modified_timestamp": "2024-03-13T13:25:52.848Z", "__row_index": 9}