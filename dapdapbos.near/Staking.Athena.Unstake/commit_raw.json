{"tx_hash": "27n8bUJEfP9cV6ez267xs3DBPhBBmdvTcwv8PeamSweR", "action_id_social": "AmNCBXfP1S4xF75Np94C7zijp9RFWwXVR98ZpZSQEZ3d-0-widget", "block_id": 110316406, "block_timestamp": "2024-01-13T16:09:23.428Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Athena.Unstake", "source_code": "// switch begin\nconst SwitchRoot = styled(\"Switch.Root\")`\n  all: unset;\n  display: block;\n  width: 42px;\n  height: 24px;\n  background-color: #232534;\n  border-radius: 9999px;\n  position: relative;\n  box-shadow: 0 2px 10px #232534;\n  border: 1px solid #373a53;\n  &[data-state=\"checked\"] {\n    background-color: #783ae3;\n  }\n`;\n\nconst SwitchThumb = styled(\"Switch.Thumb\")`\n  all: unset;\n  display: block;\n  width: 18px;\n  height: 18px;\n  background-color: white;\n  border-radius: 9999px;\n  box-shadow: 0 2px 2px var(--blackA7);\n  transition: transform 100ms;\n  transform: translateX(2px);\n  will-change: transform;\n  border: 1px solid #373a53;\n  &[data-state=\"checked\"] {\n    transform: translateX(19px);\n  }\n`;\n// switch end\n\nconst StakePanel = styled.div`\n  width: 510px;\n  margin: 0 auto;\n  /* reset input */\n  .bos-input-number {\n    background-color: var(--dark);\n    color: var(--white);\n    border: none;\n    border-radius: 10px !important;\n  }\n  .input-group {\n    column-gap: 5px;\n  }\n  .append-token {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    position: absolute;\n    right: 12px;\n    /* top: 4px; */\n    height: 36px;\n    z-index: 5;\n  }\n\n  .avatars {\n    margin-right: 20px;\n  }\n`;\nconst AmountList = styled.div`\n  display: flex;\n  font-size: var(--fz12);\n  color: var(--purple);\n  justify-content: space-between;\n  padding: 10px 0 16px;\n  .amount-left {\n  }\n  .amount-right {\n  }\n  .amount-white {\n    color: var(--white);\n  }\n`;\nconst StakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 14px;\n`;\nconst UnStakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 22px;\n  align-items: center;\n  .switch-wrap {\n    display: flex;\n    align-items: center;\n    column-gap: 8px;\n    color: var(--purple);\n  }\n`;\n\nconst ChainBtnWrap = styled.div`\n  margin-top: 16px;\n  display: flex;\n`;\n\nconst { data, chainId, account, TOKENS, CHAIN_ID, switchChain, slotLength } =\n  props;\nconst curToken = data.tokenAddress;\nconst {\n  poolName,\n  totalDeposit,\n  unlocking,\n  StakingAddress,\n  //\n\n  reward,\n  Rewards_contract_address,\n  Rewards_depositor_contract_address,\n  LP_token_address,\n} = data;\n\nconst stakedAmount =\n  !isNaN(Number(totalDeposit)) && !isNaN(Number(unlocking))\n    ? `${Big(totalDeposit).minus(Big(unlocking))}`\n    : 0;\n\nState.init({\n  // isClaimRewards: false,\n  inputValue: \"\",\n  canUnstake: false,\n  unstaking: false,\n});\n\n// const handleSwitch = (isChecked) => {\n//   State.update({\n//     isClaimRewards: isChecked,\n//   });\n// };\n\nconst handleInputChange = (e) => {\n  State.update({\n    inputValue: e.target.value,\n  });\n};\n\nuseEffect(() => {\n  if (\n    !isNaN(Number(state.inputValue)) &&\n    Big(state.inputValue || 0).lt(stakedAmount || 0)\n  ) {\n    State.update({\n      canUnstake: true,\n    });\n  } else {\n    State.update({\n      canUnstake: false,\n    });\n  }\n}, [state.inputValue]);\n\nconst handleUnStake = () => {\n  State.update({\n    unstaking: true,\n  });\n  const UnstakeContract = new ethers.Contract(\n    StakingAddress,\n    [\n      {\n        type: \"function\",\n        stateMutability: \"nonpayable\",\n        outputs: [],\n        name: \"startUnlock\",\n        inputs: [\n          {\n            type: \"uint256\",\n            name: \"strategyIndex\",\n            internalType: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n            name: \"amount\",\n            internalType: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n            name: \"slotIndex\",\n            internalType: \"uint256\",\n          },\n        ],\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  UnstakeContract.startUnlock(\n    0,\n    ethers.utils.parseUnits(state.inputValue),\n    slotLength\n  )\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            unstaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        unstaking: false,\n      });\n      console.log(\"getPoolTokens_error:\", err);\n    });\n};\n\nconst renderExtra = () => {\n  if (chainId !== CHAIN_ID) {\n    return (\n      <ChainBtnWrap>\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Button\"\n          props={{\n            text: \"Switch to Gnosis\",\n            type: \"green\",\n            style: { flex: 1 },\n            onClick: switchChain,\n          }}\n        />\n      </ChainBtnWrap>\n    );\n  }\n  return (\n    <>\n      <AmountList>\n        <span></span>\n        <span>\n          Balance: <span className=\"amount-white\">{stakedAmount}</span>\n          {/* {TOKENS[curToken].symbol} */}\n        </span>\n      </AmountList>\n      <UnStakeBtnWrap>\n        <div className=\"switch-wrap\"></div>\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Button\"\n          props={{\n            text: \"Unstake\",\n            type: \"green\",\n            style: { flex: 1 },\n            loading: state.unstaking,\n            disabled: !state.canUnstake,\n            onClick: handleUnStake,\n          }}\n        />\n      </UnStakeBtnWrap>\n    </>\n  );\n};\n\nreturn (\n  <StakePanel>\n    <div className=\"input-group\">\n      <input\n        value={state.inputValue}\n        type=\"number\"\n        className=\"form-control bos-input-number\"\n        placeholder=\"0.0\"\n        onChange={handleInputChange}\n      />\n      <div className=\"append-token\">\n        <Widget\n          src=\"dapdapbos.near/widget/UI.Avatar\"\n          props={{ src: TOKENS[curToken].icon, size: 20 }}\n        />\n        {/* {TOKENS[curToken].symbol} */}\n      </div>\n    </div>\n    {renderExtra()}\n  </StakePanel>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Athena.Unstake", "fact_widget_deployments_id": "5ac3efc2f3acb0218d312c761679acd6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}