{"tx_hash": "EzJFeEU8TXZ8HyTWffRDx9FgPihm1CZW6Ucu1mafdz6A", "action_id_social": "6Ew8pSWddRbQ532we1e5VZ9CGF7bUMpKjHrSgTPp6FX8-0-widget", "block_id": 117367661, "block_timestamp": "2024-04-22T07:53:40.003Z", "signer_id": "dapdapbos.near", "widget_name": "Bridge.Index", "source_code": "const { \n    bridge, \n    icon, \n    name,\n    color,\n    tool, \n    account,\n    chainList, \n    toggleDocClickHandler, \n    getQuote, \n    getAllToken, \n    getChainScan,\n    getStatus,\n    prices,\n    currentChainId,\n    setChain,\n    setToChain,\n    toChainId,\n    execute,\n} = props\n\nconst BridgePanel = styled.div`\n  width: 478px;\n  margin: 80px auto;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst BridgeIcon = styled.div`\n    height: 28px;\n    overflow: hidden;\n    img {\n        height: 100%;\n    }\n`\n\nconst BridgeName = styled.div`\n    color: #fff;\n    font-size: 20px;\n    font-weight: 700;\n    line-height: 24px;\n    margin-left: 10px;\n`\n\nconst Content = styled.div`\n    border: 1px solid #373A53;\n    border-radius: 16px;\n    background: #262836;\n    margin-top: 30px;\n    padding: 16px;\n`\n\nconst MainTitle = styled.div`\n    font-size: 18px;\n    font-weight: 700;\n    line-height: 22px;\n    color: #fff;\n    padding-top: 10px;\n`\n\nconst ChainPairs = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 16px 0;\n    gap: 10px;\n`\n\n\nconst ChainArrow = styled.div`\n    cursor: pointer;\n`\n\nconst TokenSpace = styled.div`\n    height: ${props => {\n        return props.height ? props.height : '6px'\n    }};\n    position: relative;\n    z-index: 10;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst TransformArrow = styled.div`\n    width: 34px;\n    height: 34px;\n    border-radius: 8px;\n    background: #2E3142;\n    border: 4px solid rgba(38, 40, 54, 1);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst {\n    getAllPossibleConnections,\n    getBalance,\n    getRoute,\n    computeDuration,\n    addressFormated,\n    balanceFormated,\n    checkAndSetAllowance,\n    getTransaction,\n    saveTransaction,\n} = VM.require('dapdapbos.near/widget/Bridge.Utils');\n\n\n\nState.init({\n    chainFrom: chainList[0],\n    chainTo: chainList[1],\n    allTokens: {},\n    otherAddressChecked: false,\n    inputTokens: [],\n    _inputTokens: [],\n    outputTokens: [],\n    _outputTokens: [],\n    selectInputToken: null,\n    selectOutputToken: null,\n    sendAmount: '',\n    receiveAmount: '',\n    inputBalance: '',\n    inputBalanceLoading: false,\n    outputBalance: '',\n    outputBalanceLoading: false,\n    duration: '',\n    gasCostUSD: '',\n    fromUSD: '',\n    toUSD: '',\n    toAddress: '',\n    isValidAddress: false,\n    showWarning: false,\n    loading: false,\n    showConfirm: false,\n    route: null,\n    canRoute: false,\n    isSending: false,\n    sendingDisabeld: false,\n    btnText: 'Send',\n    transactionList: [],\n    signer: null,\n    transitionUpdate: Date.now(),\n    timeOut: null\n})\n\nfunction refreshTransactionList() {\n    const transactionObj = getTransaction(`bridge-${account}-${tool}`)\n\n    State.update({\n        transactionList: transactionObj.transactionList,\n    })\n}\n\nfunction validateInput() {\n    const { sendAmount, selectInputToken, selectOutputToken, toAddress, otherAddressChecked, isValidAddress } = state\n    const canRoute = sendAmount && Number(sendAmount) > 0 && selectInputToken && selectOutputToken\n        && ((otherAddressChecked && toAddress && isValidAddress) || !otherAddressChecked)\n\n    return canRoute\n}\n\nfunction getTokenBalance(chain, token) {\n    const address = chain.nativeCurrency.symbol === token.symbol ? 'native' : token.address\n    return getBalance(address, account, chain.rpcUrls[0], token.decimals)\n}\n\nfunction debounce(fn, wait) {\n    let timer;\n    return () => {\n        clearTimeout(timer);\n        timer = setTimeout(fn, wait);\n    };\n}\n\nfunction getTrade() {\n    const { sendAmount, selectInputToken, selectOutputToken, toAddress, otherAddressChecked, isValidAddress } = state\n\n    const canRoute = validateInput()\n\n    if (canRoute) {\n        State.update({\n            loading: true,\n            duration: '',\n            gasCostUSD: '',\n            receiveAmount: '',\n            toUSD: '',\n            route: null\n        })\n\n        getQuote({\n            fromChainId: state.chainFrom.chainId,\n            toChainId: state.chainTo.chainId,\n            fromToken: {\n                address: selectInputToken.address,\n                symbol: selectInputToken.symbol,\n                decimals: selectInputToken.decimals,\n            },\n            toToken: {\n                address: selectOutputToken.address,\n                symbol: selectOutputToken.symbol,\n                decimals: selectOutputToken.decimals,\n            },\n            fromAddress: account,\n            destAddress: otherAddressChecked ? toAddress : account,\n            amount: new Big(sendAmount).times(Math.pow(10, selectInputToken.decimals)),\n            engine: [tool]\n        }, Ethers.provider().getSigner()).then(res => {\n            console.log('route: ', res)\n            if (res && res.length) {\n                let maxReceiveAmount = 0\n                let maxRoute\n                res.forEach(route => {\n                    if (Number(route.receiveAmount) > maxReceiveAmount) {\n                        maxReceiveAmount = Number(route.receiveAmount)\n                        maxRoute = route\n                    }\n                })\n\n                console.log('maxRoute: ', maxRoute)\n\n                State.update({\n                    duration: maxRoute.duration,\n                    gasCostUSD: maxRoute.feeType === 1 ? prices['ETH'] * maxRoute.gas : maxRoute.gas,\n                    receiveAmount: new Big(maxRoute.receiveAmount).div(Math.pow(10, selectOutputToken.decimals)).toString(),\n                    route: maxRoute,\n                    loading: false,\n                })\n\n            } else {\n                State.update({\n                    loading: false,\n                })\n            }\n        }).catch(e => {\n            console.log(e)\n        })\n    }\n}\n\nuseEffect(() => {\n    const chainFrom = chainList.filter(chain => chain.chainId === parseInt(currentChainId))[0]\n    const chainTo = chainList.filter(chain => chain.chainId === parseInt(toChainId))[0]\n    \n    \n    State.update({\n        chainFrom,\n        chainTo,\n        // signer: provider.getSigner(),\n    })\n}, [])\n\nuseEffect(() => {\n    getAllToken().then(res => {\n        State.update({\n            allTokens: res\n        })\n    })\n}, [])\n\nuseEffect(() => {\n    if (state.allTokens[1]) {\n        State.update({\n            inputTokens: state.allTokens[state.chainFrom.chainId],\n            selectInputToken: null,\n            inputBalance: '0.0',\n        })\n        setToChain(state.chainTo.chainId)\n        setChain({ chainId: `0x${state.chainFrom.chainId.toString(16)}` })\n    }\n}, [state.chainFrom, state.allTokens])\n\nuseEffect(() => {\n    if (state.allTokens[1]) {\n        State.update({\n            outputTokens: state.allTokens[state.chainTo.chainId],\n            selectOutputToken: null,\n            outputBalance: '0.0',\n        })\n    }\n}, [state.chainTo, state.allTokens])\n\n\nuseEffect(() => {\n    const inter = setInterval(() => {\n        State.update({\n            transitionUpdate: Date.now()\n        })\n    }, 10000)\n    \n    return () => {\n        clearInterval(inter)\n    }\n}, [])\n\n\n\nuseEffect(() => {\n    if (state.timeOut) {\n        clearTimeout(state.timeOut)\n    }\n    const timeOut = setTimeout(() => {\n        getTrade(sendAmount, selectInputToken, selectOutputToken, toAddress, otherAddressChecked)\n    }, 500)\n\n    State.update({\n        timeOut\n    })\n    return () => {\n        clearTimeout(timeOut)\n    }\n}, [state.sendAmount, state.selectInputToken, state.selectOutputToken, state.toAddress])\n\nuseEffect(() => {\n    if (state.sendAmount && state.inputBalance) {\n        const canRoute = validateInput()\n        if (!canRoute) {\n            State.update({\n                btnText: 'Send',\n            })\n            return\n        }\n\n        if (Number(state.sendAmount) > Number(state.inputBalance)) {\n            State.update({\n                btnText: 'Insufficient balance',\n                canRoute: false,\n            })\n            return\n        }\n\n        if (!state.route && !state.loading) {\n            State.update({\n                btnText: 'No Route',\n                canRoute: false,\n            })\n            return\n        }\n\n        if (currentChainId !== state.chainFrom.chainId) {\n            State.update({\n                btnText: 'Switch Chain',\n                canRoute: true,\n            })\n            return\n        }\n\n        State.update({\n            btnText: 'Send',\n            canRoute: true,\n        })\n    }\n}, [state.sendAmount, state.inputBalance, state.route])\n\n\nreturn <BridgePanel>\n    <Header>\n        <BridgeIcon>\n            <img src={icon} />\n        </BridgeIcon>\n        <BridgeName>{name}</BridgeName>\n    </Header>\n    <Content>\n        <MainTitle>Bridge</MainTitle>\n        <ChainPairs>\n            <Widget props={{\n                chain: state.chainFrom,\n                chainList,\n                toggleDocClickHandler,\n                onChainChange: (chain) => {\n                    State.update({\n                        chainFrom: chain\n                    })\n                },\n            }} src=\"dapdapbos.near/widget/Bridge.ChainSelector\" />\n\n            <ChainArrow onClick={() => {\n                const chainTo = state.chainFrom\n                const chainFrom = state.chainTo\n                State.update({\n                    chainFrom,\n                    chainTo,\n                })\n            }}>\n                <svg width=\"16\" height=\"12\" viewBox=\"0 0 16 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M1 6L13.7273 6M13.7273 6L8.87869 11.0002M13.7273 6L8.87869 1\" stroke=\"#979ABE\" stroke-width=\"2\" stroke-linecap=\"round\" />\n                </svg>\n            </ChainArrow>\n            <Widget props={{\n                chain: state.chainTo,\n                chainList,\n                toggleDocClickHandler,\n                onChainChange: (chain) => {\n                    State.update({\n                        chainTo: chain\n                    })\n                },\n            }} src=\"dapdapbos.near/widget/Bridge.ChainSelector\" />\n        </ChainPairs>\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.Token\"\n            props={{\n                title: 'Send',\n                selectToken: state.selectInputToken,\n                tokens: state.inputTokens,\n                amount: state.sendAmount,\n                balance: state.inputBalance,\n                loadingBalance: state.inputBalanceLoading,\n                disabled: false,\n                prices,\n                amountUSD: state.fromUSD,\n                onTokenChange: (token) => {\n                    State.update({\n                        selectInputToken: token,\n                        sendAmount: '',\n                        receiveAmount: '',\n                        inputBalance: '0',\n                        outputBalance: '0',\n                        inputBalanceLoading: true,\n                    })\n\n                    getTokenBalance(state.chainFrom, token).then(balance => {\n                        State.update({\n                            inputBalance: balance,\n                            inputBalanceLoading: false,\n                        })\n                    })\n                },\n                onInputChange: (val) => {\n                    State.update({\n                        sendAmount: val\n                    })\n                }\n            }}\n        />\n\n        <TokenSpace>\n            <TransformArrow>\n                <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M6.49992 1V11.5M6.49992 11.5L1 6M6.49992 11.5L12 6\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" />\n                </svg>\n            </TransformArrow>\n        </TokenSpace>\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.Token\"\n            props={{\n                title: 'Receive',\n                selectToken: null,\n                disabled: true,\n                balance: state.outputBalance,\n                loadingBalance: state.outputBalanceLoading,\n                selectToken: state.selectOutputToken,\n                tokens: state.outputTokens,\n                amount: state.receiveAmount,\n                amountUSD: state.toUSD,\n                prices,\n                onTokenChange: (token) => {\n                    State.update({\n                        selectOutputToken: token,\n                        outputBalanceLoading: true,\n                    })\n                    getTokenBalance(state.chainTo, token).then(balance => {\n                        State.update({\n                            outputBalance: balance,\n                            outputBalanceLoading: false,\n                        })\n                    })\n                },\n            }}\n        />\n\n        {/* <Widget\n            src=\"dapdapbos.near/widget/Bridge.AddressInput\"\n            props={{\n                checked: state.otherAddressChecked,\n                address: state.toAddress,\n                isValidAddress: state.isValidAddress,\n                onCheck: () => {\n                    State.update({\n                        otherAddressChecked: !state.otherAddressChecked\n                    })\n                },\n                onChange: (value) => {\n                    State.update({\n                        toAddress: value,\n                    })\n\n                    const isValidAddress = ethers.utils.isAddress(value)\n\n                    State.update({\n                        isValidAddress\n                    })\n\n                }\n            }}\n        /> */}\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.FeeMsg\"\n            props={{\n                duration: state.duration,\n                gasCostUSD: state.gasCostUSD ? balanceFormated(state.gasCostUSD) : '',\n            }}\n        />\n\n        {\n            state.showWarning ? <Widget\n                src=\"dapdapbos.near/widget/Bridge.Alert\"\n                props={{\n\n                }}\n            /> : null\n        }\n\n        <TokenSpace height={'12px'} />\n\n        <Widget\n            src=\"dapdapbos.near/widget/UI.Button\"\n            props={{\n                text: state.btnText,\n                type: 'primary',\n                block: true,\n                className: 'pink',\n                disabled: !state.canRoute,\n                loading: state.loading,\n                style: { backgroundColor: color },\n                onClick: () => {\n                    if (state.btnText === 'Switch Chain') {\n                        setChain({ chainId: `0x${state.chainFrom.chainId.toString(16)}` })\n                        return\n                    }\n                    State.update({\n                        showConfirm: true\n                    })\n                }\n            }}\n        />\n    </Content>\n\n    <TokenSpace height={'16px'} />\n\n    {\n        state.showConfirm ? <Widget\n            src=\"dapdapbos.near/widget/Bridge.Confirm\"\n            props={{\n                color: color,\n                chainFrom: state.chainFrom,\n                chainTo: state.chainTo,\n                loading: state.isSending,\n                disabled: state.isSendingDisabled,\n                toAddress: addressFormated(state.otherAddressChecked ? state.toAddress : account),\n                duration: state.duration,\n                gasCostUSD: state.gasCostUSD,\n                sendAmount: balanceFormated(state.sendAmount) + state.selectInputToken.symbol,\n                receiveAmount: balanceFormated(state.receiveAmount) + state.selectOutputToken.symbol,\n                onClose: () => {\n                    if (!state.isSending) {\n                        State.update({\n                            showConfirm: false,\n                        })\n                    }\n                },\n                onSend: () => {\n                    const { route } = state\n\n                    State.update({\n                        isSending: true,\n                        isSendingDisabled: true,\n                    })\n\n                    console.log('route: ', route, props)\n\n                    execute(route, Ethers.provider().getSigner()).then(txHash => {\n                        console.log('txHash: ', txHash)\n                        if (!txHash) {\n                            return\n                        }\n\n                        getTokenBalance(state.chainFrom, state.selectInputToken)\n                            .then(balance => {\n                                State.update({\n                                    inputBalance: balance,\n                                })\n                            })\n\n                        getTokenBalance(state.chainTo, state.selectOutputToken)\n                            .then(balance => {\n                                State.update({\n                                    outputBalance: balance,\n                                })\n                            })\n\n                        State.update({\n                            showConfirm: false,\n                            isSending: false,\n                            isSendingDisabled: false,\n                        })\n\n                        saveTransaction(`bridge-${account}-${tool}`, {\n                            hash: txHash, \n                            link: getChainScan(state.chainFrom.chainId), \n                            duration: route.duration,\n                            fromChainId: state.chainFrom.chainId,\n                            fromChainLogo: state.chainFrom.icon,\n                            fromTokenLogo: state.selectInputToken.logoURI,\n                            fromAmount: state.sendAmount,\n                            fromTokenSymbol: state.selectInputToken.symbol,\n                            toChainId: state.chainTo.chainId,\n                            toChainLogo: state.chainTo.icon,\n                            toTokenLogo: state.selectOutputToken.logoURI,\n                            toAmout: state.receiveAmount,\n                            toToenSymbol: state.selectOutputToken.symbol,\n                            time: Date.now(),\n                        })\n\n                        props.toast.success({\n                            title: 'Transaction success',\n                            text: '',\n                        })\n\n                        refreshTransactionList()\n\n                    }).catch(err => {\n                        console.log(err)\n\n                        props.toast.fail({\n                            title: 'Transaction failed',\n                            text: err.message ? err.message : '',\n                        })\n   \n                        State.update({\n                            // showConfirm: false,\n                            isSending: false,\n                            isSendingDisabled: false,\n                        })\n                    })\n                }\n            }}\n        /> : null\n    }\n\n    <Widget\n        src=\"dapdapbos.near/widget/Bridge.Transaction\"\n        props={{\n            transactionList: state.transactionList,\n            updater: state.transitionUpdate,\n            storageKey: `bridge-${account}-${tool}`,\n            getStatus,\n            tool,\n            account,\n            onRefresh: () => {\n                refreshTransactionList()\n            }\n        }}\n    />\n\n    <div style={{ display: 'none' }}>\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.Utils\" />\n    </div>\n\n\n\n</BridgePanel>", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Bridge.Index", "fact_widget_deployments_id": "d334aeabc464316a6ca98bd6306edf31", "inserted_timestamp": "2024-04-22T09:44:15.425Z", "modified_timestamp": "2024-04-22T09:44:15.425Z", "__row_index": 0}