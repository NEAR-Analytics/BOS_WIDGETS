{"tx_hash": "9PGJA3MxHcyucxTuMinrGBHqcgCy7KCXBS6qY8aTCXgt", "action_id_social": "8qwQ2S2G83SYAqp73czzFrRs2LpQxTGZZh3NZn2c3jHo-0-widget", "block_id": 111754434, "block_timestamp": "2024-01-31T07:24:49.392Z", "signer_id": "dapdapbos.near", "widget_name": "Bridge.Index", "source_code": "const { bridge, chainFrom, chainTo, getLifi } = props\n\nconst BridgePanel = styled.div`\n  width: 478px;\n  margin: 80px auto;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst BridgeIcon = styled.img`\n    width: 28px;\n    height: 28px;\n`\n\nconst BridgeName = styled.div`\n    color: #fff;\n    font-size: 20px;\n    font-weight: 700;\n    line-height: 24px;\n    margin-left: 10px;\n`\n\nconst Content = styled.div`\n    border: 1px solid #373A53;\n    border-radius: 16px;\n    background: #262836;\n    margin-top: 30px;\n    padding: 16px;\n`\n\nconst MainTitle = styled.div`\n    font-size: 18px;\n    font-weight: 700;\n    line-height: 22px;\n    color: #fff;\n    padding-top: 10px;\n`\n\nconst ChainPairs = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 16px 0;\n`\n\nconst ChainItem = styled.div`\n    display: flex;\n    align-items: center;\n    flex: 1;\n    &.right {\n        padding-left: 30px;\n    }\n`\nconst ChainIcon = styled.img`\n    width: 28px;\n    height: 28px;\n    border-radius: 8px;\n    &.ml30 {\n        margin-left: 30px;\n    }\n`\nconst ChainName = styled.div`\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 22px;\n    color: #fff;\n    margin-left: 7px;\n`\nconst ChainArrow = styled.div`\n    /* margin-right: 30px; */\n`\n\nconst TokenSpace = styled.div`\n    height: ${props => {\n        return props.height ? props.height : '6px'\n    }};\n    position: relative;\n    z-index: 10;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst TransformArrow = styled.div`\n    width: 34px;\n    height: 34px;\n    border-radius: 8px;\n    background: #2E3142;\n    border: 4px solid rgba(38, 40, 54, 1);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\nconst {\n    getAllPossibleConnections,\n    getBalance,\n    getRoute,\n    computeDuration,\n    addressFormated,\n    balanceFormated,\n    checkAndSetAllowance,\n    getTransaction,\n} = VM.require('dapdapbos.near/widget/Bridge.Utils');\n\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nState.init({\n    otherAddressChecked: false,\n    inputTokens: [],\n    _inputTokens: [],\n    outputTokens: [],\n    _outputTokens: [],\n    selectInputToken: null,\n    selectOutputToken: null,\n    sendAmount: '',\n    receiveAmount: '',\n    inputBalance: '',\n    outputBalance: '',\n    duration: '',\n    gasCostUSD: '',\n    fromUSD: '',\n    toUSD: '',\n    toAddress: '',\n    isValidAddress: false,\n    showWarning: false,\n    loading: false,\n    showConfirm: false,\n    route: null,\n    canRoute: false,\n    isSending: false,\n    sendingDisabeld: false,\n    btnText: 'Send',\n    transactionList: [],\n})\n\nfunction refreshTransactionList() {\n    const transactionList = getTransaction()\n    State.update({\n        transactionList,\n    })\n}\n\nfunction validateInput() {\n    const { sendAmount, selectInputToken, selectOutputToken, toAddress, otherAddressChecked, isValidAddress } = state\n    const canRoute = sendAmount && selectInputToken && selectOutputToken\n        && ((otherAddressChecked && toAddress && isValidAddress) || !otherAddressChecked)\n\n    return canRoute\n}\n\nfunction getTokenBalance(chain, token) {\n    const address = chain.nativeToken.address === token.address ? 'native' : token.address\n    return getBalance(address, account, chain.metamask.rpcUrls[0], token.decimals)\n    //                 .then(balance => {\n    //                     console.log('balance: ', balance)\n    //                     State.update({\n    //                         inputBalance: balance,\n    //                     })\n    //                 })\n}\n\nuseEffect(() => {\n    const tokensP = asyncFetch(\"https://li.quest/v1/tokens\")\n\n    tokensP.then(res => {\n        const { tokens } = res.body\n        const inputTokens = tokens[chainFrom.id].filter(item => !!item.logoURI)\n        // const outputTokens = tokens[chainTo.id].filter(item => !!item.logoURI)\n\n        State.update({\n            // _inputTokens: inputTokens,\n            // _outputTokens: outputTokens,\n            inputTokens: inputTokens.slice(0, 20),\n            outputTokens: [],\n        })\n    })\n}, [])\n\n\nuseEffect(() => {\n    refreshTransactionList()\n}, [])\n\n\nuseEffect(() => {\n    const timer = setTimeout(() => {\n        const { sendAmount, selectInputToken, selectOutputToken, toAddress, otherAddressChecked, isValidAddress } = state\n\n        const canRoute = validateInput()\n\n        if (canRoute) {\n            State.update({\n                loading: true,\n                duration: '',\n                gasCostUSD: '',\n                receiveAmount: '',\n                toUSD: '',\n                route: null\n            })\n\n            getRoute({\n                fromChainId: chainFrom.id,\n                toChainId: chainTo.id,\n                fromTokenAddress: selectInputToken.address,\n                toTokenAddress: selectOutputToken.address,\n                fromAmount: new Big(sendAmount).times(Math.pow(10, selectInputToken.decimals)).toString(),\n                fromAddress: account,\n                toAddress: otherAddressChecked ? toAddress : account,\n            }, bridge.key).then(route => {\n                if (route) {\n                    const duration = computeDuration(route)\n                    const gasCostUSD = route.gasCostUSD\n                    const fromUSD = route.fromAmountUSD\n                    const toUSD = route.toAmountUSD\n                    const receiveAmount = new Big(route.toAmount).div(Math.pow(10, selectOutputToken.decimals)).toString()\n                    State.update({\n                        duration,\n                        gasCostUSD,\n                        receiveAmount,\n                        fromUSD,\n                        toUSD,\n                        route,\n                    })\n                }\n\n                State.update({\n                    loading: false\n                })\n            })\n        } else {\n            State.update({\n                canRoute: false,\n            })\n        }\n    }, 1000);\n\n    return () => {\n        clearTimeout(timer);\n    };\n}, [state.sendAmount, state.selectInputToken, state.selectOutputToken, state.toAddress])\n\nuseEffect(() => {\n    if (state.sendAmount && state.inputBalance) {\n        const canRoute = validateInput()\n        console.log('canRoute: ', canRoute)\n        if (!canRoute) {\n            State.update({\n                btnText: 'Send',\n            })\n            return\n        }\n\n        if (Number(state.sendAmount) > Number(state.inputBalance)) {\n            State.update({\n                btnText: 'Insufficient balance',\n                canRoute: false,\n            })\n            return\n        }\n\n        if (!state.route && !state.loading) {\n            State.update({\n                btnText: 'No Route',\n                canRoute: false,\n            })\n            return\n        }\n\n        State.update({\n            btnText: 'Send',\n            canRoute: true,\n        })\n    }\n}, [state.sendAmount, state.inputBalance, state.route])\n\nreturn <BridgePanel>\n    <Header>\n        <BridgeIcon src={bridge.logoURI} />\n        <BridgeName>{bridge.name}</BridgeName>\n    </Header>\n    <Content>\n        <MainTitle>Bridge</MainTitle>\n        <ChainPairs>\n            <ChainItem>\n                <ChainIcon src={chainFrom.logoURI} />\n                <ChainName>{chainFrom.name}</ChainName>\n            </ChainItem>\n            <ChainArrow>\n                <svg width=\"16\" height=\"12\" viewBox=\"0 0 16 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M1 6L13.7273 6M13.7273 6L8.87869 11.0002M13.7273 6L8.87869 1\" stroke=\"#979ABE\" stroke-width=\"2\" stroke-linecap=\"round\" />\n                </svg>\n            </ChainArrow>\n            <ChainItem>\n                <ChainIcon className=\"ml30\" src={chainTo.logoURI} />\n                <ChainName>{chainTo.name}</ChainName>\n            </ChainItem>\n        </ChainPairs>\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.Token\"\n            props={{\n                title: 'Send',\n                selectToken: state.selectInputToken,\n                tokens: state.inputTokens,\n                amount: state.sendAmount,\n                balance: state.inputBalance,\n                disabled: false,\n                amountUSD: state.fromUSD,\n                onTokenChange: (token) => {\n\n                    State.update({\n                        selectInputToken: token,\n                        sendAmount: '',\n                        receiveAmount: '',\n                        inputBalance: '0',\n                        outputBalance: '0',\n                    })\n\n                    getAllPossibleConnections({\n                        fromChain: chainFrom.id,\n                        toChain: chainTo.id,\n                        fromToken: token.address\n                    })\n                        .then((tokens) => {\n                            State.update({\n                                outputTokens: tokens.filter(item => !!item.logoURI).slice(0, 10)\n                            })\n                        })\n\n                    getTokenBalance(chainFrom, token).then(balance => {\n                        console.log('balance: ', balance)\n                        State.update({\n                            inputBalance: balance,\n                        })\n                    })\n                },\n                onInputChange: (val) => {\n                    State.update({\n                        sendAmount: val\n                    })\n                }\n            }}\n        />\n\n        <TokenSpace>\n            <TransformArrow>\n                <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M6.49992 1V11.5M6.49992 11.5L1 6M6.49992 11.5L12 6\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" />\n                </svg>\n            </TransformArrow>\n        </TokenSpace>\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.Token\"\n            props={{\n                title: 'Receive',\n                selectToken: null,\n                disabled: true,\n                balance: state.outputBalance,\n                selectToken: state.selectOutputToken,\n                tokens: state.outputTokens,\n                amount: state.receiveAmount,\n                amountUSD: state.toUSD,\n                onTokenChange: (token) => {\n                    State.update({\n                        selectOutputToken: token\n                    })\n\n                    getTokenBalance(chainTo, token).then(balance => {\n                        console.log('balance: ', balance)\n                        State.update({\n                            outputBalance: balance,\n                        })\n                    })\n                },\n            }}\n        />\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.AddressInput\"\n            props={{\n                checked: state.otherAddressChecked,\n                address: state.toAddress,\n                isValidAddress: state.isValidAddress,\n                onCheck: () => {\n                    State.update({\n                        otherAddressChecked: !state.otherAddressChecked\n                    })\n                },\n                onChange: (value) => {\n                    State.update({\n                        toAddress: value,\n                    })\n\n                    const isValidAddress = ethers.utils.isAddress(value)\n\n                    State.update({\n                        isValidAddress\n                    })\n\n                }\n            }}\n        />\n\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.FeeMsg\"\n            props={{\n                duration: state.duration,\n                gasCostUSD: state.gasCostUSD,\n            }}\n        />\n\n        {\n            state.showWarning ? <Widget\n                src=\"dapdapbos.near/widget/Bridge.Alert\"\n                props={{\n\n                }}\n            /> : null\n        }\n\n        <TokenSpace height={'12px'} />\n\n        <Widget\n            src=\"dapdapbos.near/widget/UI.Button\"\n            props={{\n                text: state.btnText,\n                type: 'primary',\n                block: true,\n                className: 'pink',\n                disabled: !state.canRoute,\n                loading: state.loading,\n                onClick: () => {\n                    State.update({\n                        showConfirm: true\n                    })\n                }\n            }}\n        />\n    </Content>\n\n    <TokenSpace height={'16px'} />\n\n    {\n        state.showConfirm ? <Widget\n            src=\"dapdapbos.near/widget/Bridge.Confirm\"\n            props={{\n                chainFrom: chainFrom,\n                chainTo: chainTo,\n                loading: state.isSending,\n                disabled: state.isSendingDisabled,\n                toAddress: addressFormated(state.otherAddressChecked ? state.toAddress : account),\n                duration: state.duration,\n                gasCostUSD: state.gasCostUSD,\n                sendAmount: balanceFormated(state.sendAmount) + state.selectInputToken.symbol,\n                receiveAmount: balanceFormated(state.receiveAmount) + state.selectOutputToken.symbol,\n                onClose: () => {\n                    if (!state.isSending) {\n                        State.update({\n                            showConfirm: false,\n                        })\n                    }\n                },\n                onSend: () => {\n                    const { route } = state\n\n                    console.log('route', route)\n\n                    State.update({\n                        isSending: true,\n                        isSendingDisabled: true,\n                    })\n\n                    checkAndSetAllowance(\n                        chainFrom.metamask.rpcUrls[0],\n                        route,\n                        getLifi,\n                    ).then(res => {\n                        console.log(res)\n\n                        getTokenBalance(chainFrom, state.selectInputToken)\n                            .then(balance => {\n                                State.update({\n                                    inputBalance: balance,\n                                })\n                            })\n\n                        getTokenBalance(chainTo, state.selectOutputToken)\n                            .then(balance => {\n                                State.update({\n                                    outputBalance: balance,\n                                })\n                            })\n\n                        State.update({\n                            showConfirm: false,\n                            isSending: false,\n                            isSendingDisabled: false,\n                        })\n\n                        refreshTransactionList()\n\n                        props.toast.success({\n                            title: 'Transaction success',\n                            text: '',\n                        })\n\n                    }).catch(err => {\n                        props.toast.fail({\n                            title: 'Transaction failed',\n                            text: err,\n                        })\n                    })\n                }\n            }}\n        /> : null\n    }\n\n    <Widget\n        src=\"dapdapbos.near/widget/Bridge.Transaction\"\n        props={{\n            transactionList: state.transactionList,\n            onRefresh: () => {\n                refreshTransactionList()\n            }\n        }}\n    />\n\n    <div style={{ display: none }}>\n        <Widget\n            src=\"dapdapbos.near/widget/Bridge.Utils\" />\n    </div>\n</BridgePanel>", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Bridge.Index", "fact_widget_deployments_id": "7a316cb63565cc31c948c3c6763ca851", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}