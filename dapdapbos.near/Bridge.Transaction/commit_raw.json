{"tx_hash": "4MwE86YPJAot9VV9EZ615aEcUz2Fd8MYgcBFjbzzZpBN", "action_id_social": "Gu6dqJK4rctBC2Z5ajgindVDb3ogTfbbzgJp29H4L6pe-0-widget", "block_id": 117020419, "block_timestamp": "2024-04-17T07:06:33.329Z", "signer_id": "dapdapbos.near", "widget_name": "Bridge.Transaction", "source_code": "const TransactionWapper = styled.div`\n    width: 478px;\n    padding: 16px;\n    border-radius: 10px;\n    border: 1px solid rgba(55, 58, 83, 1);\n    background: #262836;\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  .list {\n    flex: 1;\n    .tx-line {\n      &:not(:last-child) {\n        border-bottom: 1px solid #343838;\n      } \n    }\n    .claim-line {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px 0;\n      \n    }\n\n  }\n  .fresh {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n  .chain-token-status {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    padding-top: 20px;\n    .chain-token {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      img {\n        height: 22px;\n      }\n    }\n    .btn {\n        cursor: pointer;\n        background-color: #EBF479;\n        color: #000;\n        width: 90px;\n        height: 32px;\n        line-height: 16px;\n        text-align: center;\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n    .complete {\n      color: #979ABE;\n    }\n    .proccessing {\n      color: #00D1FF;\n    }\n  }\n  .time {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n    padding-bottom: 20px;\n    margin-top: 10px;\n    \n    .format-time-link {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      a {\n        color: #64B5FF;\n      }\n    }\n  }\n`\n\nconst RefreshText = styled.div`\n  text-decoration: underline;\n  font-size: 14px;\n  font-weight: 400;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ArrowIcon = styled.div`\n  transform: rotate(180deg);\n  cursor: pointer;\n`;\n\nconst { updater, storageKey, getStatus, tool, account } = props\n\nState.init({\n    isFold: true,\n    isLoadingTx: {},\n    proccessSum: 0,\n    refreshTransactionList: [],\n    isLoading: false,\n})\n\nconst {\n    getTransaction,\n    saveTransaction,\n    saveAllTransaction,\n    balanceFormated,\n} = VM.require('dapdapbos.near/widget/Bridge.Utils');\n\nfunction refreshTransactionList() {\n    State.update({\n        isLoading: true\n    })\n    const transactionObj = getTransaction(storageKey)\n\n    const transactionList = []\n    let proccessSum = 0\n\n    console.log('transactionObj: ', transactionObj)\n\n    const pList = transactionObj.transactionList.map(item => {\n        if (item.status === 2) {\n            transactionList.push(item)\n            return\n        }\n        return getStatus({\n            hash: item.hash,\n            chainId: item.fromChainId,\n            address: account,\n            fromChainId: item.fromChainId,\n            toChainId: item.toChainId,\n        }, tool).then(isComplate => {\n            if (isComplate) {\n                item.status = 2\n            } else {\n                proccessSum ++\n                item.status = 3\n            }\n\n            transactionList.push(item)\n        }).catch(err => {\n            transactionList.push(item)\n        })\n    })\n\n    Promise.all(pList).then(() => {\n        // console.log('transactionObj.transactionList: ', transactionList.length, transactionList)\n        if (transactionList.length > 0) {\n            saveAllTransaction(storageKey, transactionList)\n        }\n        // saveAllTransaction(storageKey, transactionList)\n        const isFold = proccessSum > 0\n        State.update({\n            transactionList,\n            isLoading: false,\n            proccessSum,\n            isFold,\n        })\n    }).catch(err => {\n        if (transactionList.length > 0) {\n            saveAllTransaction(storageKey, transactionList)\n        }\n        // saveAllTransaction(storageKey, transactionList)\n        const isFold = proccessSum > 0\n        State.update({\n            transactionList,\n            isLoading: false,\n            proccessSum,\n            isFold,\n        })\n    })\n}\n\nuseEffect(() => {\n    refreshTransactionList()\n}, [updater])\n\nreturn <TransactionWapper>\n    <div className=\"header\">\n        <div className=\"title\">\n            <span>Transaction History</span>\n            <span>{state.proccessSum} Processing</span>\n        </div>\n        <div className=\"fresh\">\n            <RefreshText onClick={() => {\n                refreshTransactionList()\n            }}>\n                {state.isLoading && (\n                    <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                            size: 16,\n                        }}\n                    />\n                )}\n                Refresh\n            </RefreshText>\n            <ArrowIcon onClick={() => {\n                State.update({\n                    isFold: !state.isFold\n                })\n            }}>\n                <Widget\n                    src=\"bluebiu.near/widget/Arbitrum.Swap.ArrowIcon\"\n                    props={{ size: 12 }}\n                />\n            </ArrowIcon>\n        </div>\n    </div>\n    {\n        state.isFold ? <div className=\"list\">\n            {\n                (state.transactionList || []).map(tx => {\n                    return <div className=\"tx-line\" key={tx.hash}>\n                        <div className=\"chain-token-status\">\n                            <div className=\"chain-token\">\n                                <img src={tx.fromChainLogo} />\n                                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                                <img src={tx.toChainLogo} />\n                                <img src={tx.fromTokenLogo} />\n                                <div>{balanceFormated(tx.fromAmount)} {tx.fromTokenSymbol}</div>\n                                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                                <img src={tx.toTokenLogo} />\n                                <div>{balanceFormated(tx.toAmout)} {tx.toToenSymbol}</div>\n                            </div>\n                            <div>\n                                {\n                                    tx.status === 1 && <div className=\"btn\" onClick={() => {\n                                        if (state.isLoadingTx[tx.hash]) {\n                                            return\n                                        }\n                                        // handleClaim(tx.claim_info, tx.hash)\n\n                                    }}>\n                                        {state.isLoadingTx[tx.hash] && (\n                                            <Widget\n                                                src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                                                props={{\n                                                    size: 16,\n                                                }}\n                                            />\n                                        )}\n                                        Claim\n                                    </div>\n                                }\n                                {\n                                    tx.status === 2 && <div className=\"complete\">Complete</div>\n                                }\n                                {\n                                    tx.status === 3 && <div className=\"processing\">Processing</div>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"time\">\n                            <div className=\"format-time-link\">\n                                <div className=\"format-time\">\n                                    <Widget\n                                        src=\"bluebiu.near/widget/Base.Bridge.FormateTxDate\"\n                                        props={{\n                                            date: tx.time,\n                                        }}\n                                    />\n                                </div>\n                                <a target=\"_blank\" className=\"tx-link\" href={`${tx.link}/tx/${tx.hash}`}>Tx</a>\n                            </div>\n                            {\n                                tx.status === 3 ? <div>~{ tx.duration } min</div> : null\n                            }\n                        </div>\n                    </div>\n                })\n            }\n        </div> : null\n    }\n\n\n</TransactionWapper>", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Bridge.Transaction", "fact_widget_deployments_id": "6c42b89972952ebd5fa80c245a021bb7", "inserted_timestamp": "2024-04-17T08:41:25.542Z", "modified_timestamp": "2024-04-17T08:41:25.542Z", "__row_index": 1}