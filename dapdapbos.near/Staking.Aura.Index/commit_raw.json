{"tx_hash": "9qhPmAEnG7A9RwTLfwJnTFjwJgSR8MUzYNR7R6pCMbaF", "action_id_social": "71rFAQRrtJYac3ZeepjWHNYyY4QXvZhKidVVk9bSW43R-0-widget", "block_id": 110730321, "block_timestamp": "2024-01-18T17:52:43.383Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Aura.Index", "source_code": "const Wrapper = styled.div`\n  --bg-1: #262836;\n  --bg-2: #373a53;\n  --bg-3: #2e3142;\n  --white: #fff;\n  --purple: #979abe;\n  --dark: #1b1e27;\n\n  --fz-12: 12px;\n  --fz-14: 14px;\n  --fz-16: 16px;\n  --fz-24: 24px;\n\n  --primary: #783ae3;\n  /* --secondary: #6c757d; */\n\n  color: var(--white);\n\n  input[type=\"number\"]::-webkit-inner-spin-button,\n  input[type=\"number\"]::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  .grid-pool-head {\n    max-width: 1244px;\n    margin: 0 auto 12px;\n    font-size: 14px;\n    color: var(--purple);\n  }\n`;\nconst HeadWrapper = styled.div`\n  /* border-radius: 16px; */\n  max-width: 1244px;\n  margin: 0 auto;\n  color: var(--white);\n  font-size: var(--fz-14);\n  .pool-head {\n    border-radius: 16px;\n    height: 84px;\n    align-items: center;\n    cursor: pointer;\n    background-color: var(--bg-1);\n  }\n  .title-primary {\n    font-size: var(--fz-16);\n    font-weight: 500;\n  }\n  .title-secondary {\n  }\n  .title-sub {\n    font-size: var(--fz-12);\n    color: var(--purple);\n  }\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 40% 12% 12% 12% 24%;\n`;\n\nconst GridItem = styled.div`\n  padding-left: 24px;\n  &.action-item {\n    display: flex;\n    column-gap: 10px;\n    padding-right: 18px;\n    justify-content: center;\n  }\n  &.action-item-head {\n    display: flex;\n    justify-content: center;\n  }\n`;\nconst PoolItem = styled.div`\n  margin-bottom: 10px;\n`;\nconst TabsList = styled(\"Tabs.List\")`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  width: 420px;\n  height: 46px;\n  background-color: var(--bg-1);\n  border-radius: 10px;\n  color: var(--white);\n  padding: 0 5px;\n  margin-bottom: 30px;\n  .tab-head-item {\n    flex: 1;\n    display: flex;\n    height: 36px;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    border-radius: 5px;\n    color: var(--white);\n    cursor: pointer;\n  }\n  .tab-head-item.active {\n    background-color: var(--bg-2);\n  }\n`;\n\n// assets begin\nconst AssetsWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  column-gap: 18px;\n  max-width: 1244px;\n  margin: 0 auto 42px;\n`;\nconst AssetsPanel = styled.div`\n  flex: 1;\n  border-radius: 16px;\n  border: 1px solid #373a53;\n  background: #2e3142;\n  padding: 20px 18px 0;\n  height: 105px;\n  .as-title {\n    color: var(--purple);\n    font-size: var(--fz-16);\n  }\n  .as-amount {\n    color: var(--white);\n    font-size: var(--fz-24);\n    padding-top: 16px;\n  }\n  .as-sub {\n    font-size: var(--fz-14);\n    color: var(--purple);\n  }\n  .as-action {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\nconst EmptyWrap = styled.div`\n  padding-top: 150px;\n  .empty-title {\n    color: #fff;\n    text-align: center;\n    font-size: 18px;\n    font-weight: 400;\n    margin-bottom: 13px;\n  }\n  .empty-intro {\n    color: #979abe;\n    text-align: center;\n    font-size: 14px;\n    font-weight: 400;\n  }\n`;\n// assets end\n\n// support chain\nconst CHAIN_ID = 100;\n\nconst POOL_TYPES = {\n  WeightedPool: \"WeightedPool\",\n  ComposableStablePool: \"ComposableStablePool\",\n  StablePool: \"StablePool\",\n};\n\nconst POOLS = [\n  {\n    poolName: \"WETH-wstETH\",\n    Rewards_contract_address: \"0x026d163C28cC7dbf57d6ED57f14208Ee412CA526\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0xbad20c15a773bf03ab973302f61fabcea5101f0a\",\n    Balancer_Gauge: \"0x27519F69b2Ac912aeb6fE066180FB25a17c71755\",\n    Aura_Stash: \"0xe2F2499474B4Bef0a7320c1D2b0FEfFD5430Acf8\",\n    Balancer_Pool_ID:\n      \"0xbad20c15a773bf03ab973302f61fabcea5101f0a000000000000000000000034\",\n    Aura_Pool_ID: 0,\n    poolType: POOL_TYPES.WeightedPool,\n  },\n  {\n    poolName: \"staBAL3-EURe\",\n    Rewards_contract_address: \"0xf4116f1be90057e6f85b0dcc14c47c84cc4575da\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x0c1b9ce6bf6c01f587c2ee98b0ef4b20c6648753\",\n    Balancer_Gauge: \"0x492cd2290e5b971eab622d6325cef6a329cf8a58\",\n    Aura_Stash: \"0x727d3d124bc9880d06aa7508c78c2c1f4e7369b2\",\n    Balancer_Pool_ID:\n      \"0x0c1b9ce6bf6c01f587c2ee98b0ef4b20c6648753000000000000000000000050\",\n    Aura_Pool_ID: 14,\n    poolType: POOL_TYPES.ComposableStablePool,\n  },\n  {\n    poolName: \"USDT-sDAI-USDC\",\n    Rewards_contract_address: \"0x7513105d6cf9d18756d95ded81d6d3f68db4b8da\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x7644fa5d0ea14fcf3e813fdf93ca9544f8567655\",\n    Balancer_Gauge: \"0xdec0362b3229690fbe4f88c57472610588bb9a2e\",\n    Aura_Stash: \"0xffd046ed3635697c98c5ee1ac92f6c7ed1c9da54\",\n    Balancer_Pool_ID:\n      \"0x7644fa5d0ea14fcf3e813fdf93ca9544f8567655000000000000000000000066\",\n    Aura_Pool_ID: 21,\n    poolType: POOL_TYPES.ComposableStablePool,\n  },\n  {\n    poolName: \"stEUR-EURe\",\n    Rewards_contract_address: \"0x408883e983695dec78cf66480e6efef907a73c21\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x06135a9ae830476d3a941bae9010b63732a055f4\",\n    Balancer_Gauge: \"0x49b7c059bf0a71583918928d33c84dcb2aa001f8\",\n    Aura_Stash: \"0xf2a9d8ea9bebf593977e98da1e642403c8834e06\",\n    Balancer_Pool_ID:\n      \"0x06135a9ae830476d3a941bae9010b63732a055f4000000000000000000000065\",\n    Aura_Pool_ID: 22,\n    poolType: POOL_TYPES.ComposableStablePool,\n  },\n  {\n    poolName: \"wstETH-GNO\",\n    Rewards_contract_address: \"0x14a81c9283cc16897daa3f466847baa260b770eb\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x4683e340a8049261057d5ab1b29c8d840e75695e\",\n    Balancer_Gauge: \"0xb812249d60b80c7cbc9398e382ed6dfdf82e23d2\",\n    Aura_Stash: \"0x95d41829eb179d549ede8e6db31c10818c7a4e0f\",\n    Balancer_Pool_ID:\n      \"0x4683e340a8049261057d5ab1b29c8d840e75695e00020000000000000000005a\",\n    Aura_Pool_ID: 15,\n    poolType: POOL_TYPES.WeightedPool,\n  },\n  {\n    poolName: \"staBAL3-GNO\",\n    Rewards_contract_address: \"0x7e6ccd111b56dd650af9d598e23f0cb0da7e59e7\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x274dedb9356c3e1e24bfe2bf3d4349fbdbfa0d14\",\n    Balancer_Gauge: \"0x4489dc0ff2a43023f2a85efdc4614d250612dd0d\",\n    Aura_Stash: \"0x429dc5616f9c78131a4bb592b1a0eb6f5e996c0e\",\n    Balancer_Pool_ID:\n      \"0x274dedb9356c3e1e24bfe2bf3d4349fbdbfa0d14000200000000000000000054\",\n    Aura_Pool_ID: 12,\n    poolType: POOL_TYPES.WeightedPool,\n  },\n  {\n    poolName: \"staBAL3-WETH-WBTC\",\n    Rewards_contract_address: \"0x112EA63D3A70bB7926F95DA81EaDF71Aba0f0955\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x66888e4f35063ad8bb11506a6fde5024fb4f1db0\",\n    Balancer_Gauge: \"0x9fF4e3925B88B6885083A88c2283a21CD504D3d4\",\n    Aura_Stash: \"0x353a64558c8670974216BDa16c3d420FADE65293\",\n    Balancer_Pool_ID:\n      \"0x66888e4f35063ad8bb11506a6fde5024fb4f1db0000100000000000000000053\",\n    Aura_Pool_ID: 13,\n    poolType: POOL_TYPES.WeightedPool,\n  },\n\n  // {\n  //   poolName: \"wstETH-BAL-AURA\",\n  //   Rewards_contract_address: \"0x51867537e5532186E76BA5380235512A9A4ca52a\",\n  //   Rewards_depositor_contract_address:\n  //     \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n  //   LP_token_address: \"0x00df7f58e1cf932ebe5f54de5970fb2bdf0ef06d\",\n  //   Balancer_Gauge: \"0x64cee2356f959E78DB36A4C23a28f0454447C3dF\",\n  //   Aura_Stash: \"0xbcb983169F5206E7a01DdB75f22489965fB9eF66\",\n  //   Balancer_Pool_ID:\n  //     \"0x00df7f58e1cf932ebe5f54de5970fb2bdf0ef06d00010000000000000000005b\",\n  //   Aura_Pool_ID: 17,\n  //   poolType: POOL_TYPES.WeightedPool,\n  // },\n  // {\n  //   poolName: \"crvUSD-sDAI\",\n  //   Rewards_contract_address: \"0xfad4505c5bf3d3654ba7c97a0cea6e7b35882959\",\n  //   Rewards_depositor_contract_address:\n  //     \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n  //   LP_token_address: \"0xc9f00c3a713008ddf69b768d90d4978549bfdf94\",\n  //   Balancer_Gauge: \"0xb079bd76dd9b5f9a8d3954e4250fc25be0549ac0\",\n  //   Aura_Stash: \"0x19e21f4a9283f940e871f648efd07051cd274eaa\",\n  //   Balancer_Pool_ID:\n  //     \"0xc9f00c3a713008ddf69b768d90d4978549bfdf9400000000000000000000006d\",\n  //   Aura_Pool_ID: 23,\n  //   poolType: POOL_TYPES.ComposableStablePool,\n  // },\n  {\n    poolName: \"wstETH-COW\",\n    Rewards_contract_address: \"0x85298595d4f6f8fa91f8658ba9c10f9a85b17f62\",\n    Rewards_depositor_contract_address:\n      \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n    LP_token_address: \"0x4cdabe9e07ca393943acfb9286bbbd0d0a310ff6\",\n    Balancer_Gauge: \"0xce18a3d0d928ab8883f355b5009d2de07d5c1d83\",\n    Aura_Stash: \"0x918a3d87ddb20f225647e1560f4f66f8e0590311\",\n    Balancer_Pool_ID:\n      \"0x4cdabe9e07ca393943acfb9286bbbd0d0a310ff600020000000000000000005c\",\n    Aura_Pool_ID: 20,\n    poolType: POOL_TYPES.WeightedPool,\n  },\n  // {\n  //   poolName: \"sDAI-wstETH\",\n  //   Rewards_contract_address: \"0x49aadc30b5ccc57bddd55ac8bd7d8db7cf1f2b8b\",\n  //   Rewards_depositor_contract_address:\n  //     \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n  //   LP_token_address: \"0xbc2acf5e821c5c9f8667a36bb1131dad26ed64f9\",\n  //   Balancer_Gauge: \"0x4d13d387f372dbe5125b7d78e75094ac85b31edc\",\n  //   Aura_Stash: \"0x6363d0c1f5cbc85e49af00cd8da1827f7a417b19\",\n  //   Balancer_Pool_ID:\n  //     \"0xbc2acf5e821c5c9f8667a36bb1131dad26ed64f9000200000000000000000063\",\n  //   Aura_Pool_ID: 19,\n  //   poolType: POOL_TYPES.WeightedPool,\n  // },\n  // {\n  //   poolName: \"sDAI-EURe\",\n  //   Rewards_contract_address: \"0xde151980d461696543aa07a19bbe2603b20ecbae\",\n  //   Rewards_depositor_contract_address:\n  //     \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n  //   LP_token_address: \"0xdd439304a77f54b1f7854751ac1169b279591ef7\",\n  //   Balancer_Gauge: \"0xbb2598b89202596a743be0b615001d7d5164f167\",\n  //   Aura_Stash: \"0x6068eb7490748a1a49830b58524c002b545c1ce2\",\n  //   Balancer_Pool_ID:\n  //     \"0xdd439304a77f54b1f7854751ac1169b279591ef7000000000000000000000064\",\n  //   Aura_Pool_ID: 18,\n  //   poolType: POOL_TYPES.ComposableStablePool,\n  // },\n  // {\n  //   poolName: \"staBAL3-wstETH\",\n  //   Rewards_contract_address: \"0xddb26f9864da5cf70c680942be91fc7e9aa2401c\",\n  //   Rewards_depositor_contract_address:\n  //     \"0x0fec3d212bcc29ef3e505b555d7a7343df0b7f76\",\n  //   LP_token_address: \"0xeb30c85cc528537f5350cf5684ce6a4538e13394\",\n  //   Balancer_Gauge: \"0xef23c2ec60a1ea3ed6a44681fb72356cb411177e\",\n  //   Aura_Stash: \"0x44b9143e4582b5141b654b9486a52b4124d9b623\",\n  //   Balancer_Pool_ID:\n  //     \"0xeb30c85cc528537f5350cf5684ce6a4538e13394000200000000000000000059\",\n  //   Aura_Pool_ID: 16,\n  //   poolType: POOL_TYPES.WeightedPool,\n  // },\n];\nconst TOKENS = {\n  \"0x8e5bBbb09Ed1ebdE8674Cda39A0c169401db4252\": {\n    address: \"0x8e5bBbb09Ed1ebdE8674Cda39A0c169401db4252\",\n    chainId: CHAIN_ID,\n    name: \"WBTC\",\n    symbol: \"WBTC\",\n    icon: \"https://assets-cdn.trustwallet.com/blockchains/ethereum/assets/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599/logo.png\",\n    decimals: 8,\n  },\n  \"0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1\": {\n    address: \"0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1\",\n    chainId: CHAIN_ID,\n    name: \"WETH\",\n    symbol: \"WETH\",\n    icon: \"https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.png\",\n    decimals: 18,\n  },\n  \"0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb\": {\n    address: \"0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb\",\n    chainId: CHAIN_ID,\n    name: \"GNO\",\n    symbol: \"GNO\",\n    icon: \"https://assets-cdn.trustwallet.com/blockchains/ethereum/assets/0x6810e776880C02933D47DB1b9fc05908e5386b96/logo.png\",\n    decimals: 18,\n  },\n  \"0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6\": {\n    address: \"0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6\",\n    chainId: CHAIN_ID,\n    name: \"wstETH\",\n    symbol: \"wstETH\",\n    icon: \"https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0.png\",\n    decimals: 18,\n  },\n  \"0x1509706a6c66CA549ff0cB464de88231DDBe213B\": {\n    address: \"0x1509706a6c66CA549ff0cB464de88231DDBe213B\",\n    chainId: CHAIN_ID,\n    name: \"AURA\",\n    symbol: \"AURA\",\n    icon: \"https://app.aura.finance/assets/aura-362899d2.png\",\n    decimals: 18,\n  },\n  \"0xaBEf652195F98A91E490f047A5006B71c85f058d\": {\n    address: \"0xaBEf652195F98A91E490f047A5006B71c85f058d\",\n    chainId: CHAIN_ID,\n    name: \"crvUSD\",\n    symbol: \"crvUSD\",\n    icon: \"https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/0xabef652195f98a91e490f047a5006b71c85f058d.png\",\n    decimals: 18,\n  },\n  \"0xaf204776c7245bF4147c2612BF6e5972Ee483701\": {\n    address: \"0xaf204776c7245bF4147c2612BF6e5972Ee483701\",\n    chainId: CHAIN_ID,\n    name: \"sDAI\",\n    symbol: \"sDAI\",\n    icon: \"https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/0x83f20f44975d03b1b09e64809b757c47f942beea.png\",\n    decimals: 18,\n  },\n  \"0x2086f52651837600180dE173B09470F54EF74910\": {\n    address: \"0x2086f52651837600180dE173B09470F54EF74910\",\n    chainId: CHAIN_ID,\n    name: \"staBAL3\",\n    symbol: \"staBAL3\",\n    icon: \"https://assets-cdn.trustwallet.com/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png\",\n    decimals: 18,\n  },\n  \"0x7eF541E2a22058048904fE5744f9c7E4C57AF717\": {\n    address: \"0x7eF541E2a22058048904fE5744f9c7E4C57AF717\",\n    chainId: CHAIN_ID,\n    name: \"BAL\",\n    symbol: \"BAL\",\n    icon: \"https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/0xba100000625a3754423978a60c9317c58a424e3d.png\",\n    decimals: 18,\n  },\n  \"0x4ECaBa5870353805a9F068101A40E0f32ed605C6\": {\n    address: \"0x4ECaBa5870353805a9F068101A40E0f32ed605C6\",\n    chainId: CHAIN_ID,\n    name: \"USDT\",\n    symbol: \"USDT\",\n    icon: \"https://assets-cdn.trustwallet.com/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png\",\n    decimals: 6,\n  },\n  \"0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83\": {\n    address: \"0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83\",\n    chainId: CHAIN_ID,\n    name: \"USDC\",\n    symbol: \"USDC\",\n    icon: \"https://assets-cdn.trustwallet.com/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png\",\n    decimals: 6,\n  },\n  \"0x177127622c4A00F3d409B75571e12cB3c8973d3c\": {\n    address: \"0x177127622c4A00F3d409B75571e12cB3c8973d3c\",\n    chainId: CHAIN_ID,\n    name: \"COW\",\n    symbol: \"COW\",\n    icon: \"https://raw.githubusercontent.com/balancer/tokenlists/main/src/assets/images/tokens/0xdef1ca1fb7fbcdc777520aa7f396b4e015f497ab.png\",\n    decimals: 18,\n  },\n  \"0xcB444e90D8198415266c6a2724b7900fb12FC56E\": {\n    address: \"0xcB444e90D8198415266c6a2724b7900fb12FC56E\",\n    chainId: CHAIN_ID,\n    name: \"EURe\",\n    symbol: \"EURe\",\n    icon: \"https://assets.coingecko.com/coins/images/23354/large/eur.png?1643926562\",\n    decimals: 18,\n  },\n  \"0x004626A008B1aCdC4c74ab51644093b155e59A23\": {\n    address: \"0x004626A008B1aCdC4c74ab51644093b155e59A23\",\n    chainId: CHAIN_ID,\n    name: \"stEUR\",\n    symbol: \"stEUR\",\n    icon: \"https://assets.coingecko.com/coins/images/32036/large/stEUR-x4.png\",\n    decimals: 18,\n  },\n};\nconst RewardsContractABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"maxWithdraw\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"newRewardRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"rewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalAssets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"assets\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"convertToShares\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst RewardPoolDepositWrapper = \"0x0Fec3d212BcC29eF3E505B555D7a7343DF0B7F76\";\nconst PoolContractWrapper = \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\";\n\nconst RewardPoolDepositABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardPoolAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_inputAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_balancerPoolId\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"maxAmountsIn\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IBalancerVault.JoinPoolRequest\",\n        name: \"_request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"depositSingle\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst PoolContractABI = [\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"poolId\", type: \"bytes32\" }],\n    name: \"getPoolTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      { internalType: \"uint256[]\", name: \"balances\", type: \"uint256[]\" },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst LPTokenABI = [\n  {\n    inputs: [],\n    name: \"getActualSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst COINGECKO_IDS = {\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  sDAI: \"savings-xdai\",\n  WBTC: \"wrapped-bitcoin\",\n  WETH: \"weth\",\n  wstETH: \"wrapped-steth\",\n  crvUSD: \"crvusd\",\n  AURA: \"aura-finance\",\n  BAL: \"balancer\",\n  staBAL3: \"balancer-stable-usd\",\n  COW: \"cow-protocol\",\n  stEUR: \"staked-ageur\",\n  EURe: \"monerium-eur-money\",\n  GNO: \"gnosis\",\n};\n\nconst initList = POOLS.map((item) => ({ ...item, stakedAmount: 0, reward: 0 }));\nconst { toast } = props;\nState.init({\n  currentTab: \"TAB_POOL\",\n  chainId: \"\", // current chain\n  account: \"\", // current wallet address\n  poolsList: initList, //\n  myPoolsList: [],\n  totalDepositAmount: 0,\n  totalRewardsAmount: 0,\n  isClaiming: false,\n  isAllClaiming: false,\n  tokenPrices: \"\",\n  flag1: false,\n  flag2: false,\n  flag3: false,\n  flag4: false,\n});\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nfunction initPoolList() {\n  for (let i = 0; i < state.poolsList.length; i++) {\n    const item = state.poolsList[i];\n    getMultiRewards(item, i);\n    getMultiLPToken(item, i);\n  }\n\n  getMultiPoolTokens();\n}\n\nfunction multiCallV2(abi, calls, options, onSuccess, onError) {\n  // for gnosis 100\n  const MULTICALL_ADDRESS = \"0xAbd2FE441318a73414e3fa93297D3Bdb036CB2Fa\";\n  const MULTICALL_ABI = [\n    {\n      inputs: [\n        { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n        {\n          components: [\n            { internalType: \"address\", name: \"target\", type: \"address\" },\n            { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n          ],\n          internalType: \"struct Multicall2.Call[]\",\n          name: \"calls\",\n          type: \"tuple[]\",\n        },\n      ],\n      name: \"tryAggregate\",\n      outputs: [\n        {\n          components: [\n            { internalType: \"bool\", name: \"success\", type: \"bool\" },\n            { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n          ],\n          internalType: \"struct Multicall2.Result[]\",\n          name: \"returnData\",\n          type: \"tuple[]\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  ];\n  const MulticallContract = new ethers.Contract(\n    MULTICALL_ADDRESS,\n    MULTICALL_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n}\nfunction getMultiRewards(pool, index) {\n  const calls = [\n    {\n      address: pool.Rewards_contract_address,\n      name: \"balanceOf\",\n      params: [account],\n    },\n    {\n      address: pool.Rewards_contract_address,\n      name: \"rewardRate\",\n    },\n    {\n      address: pool.Rewards_contract_address,\n      name: \"totalSupply\",\n    },\n    {\n      address: pool.Rewards_contract_address,\n      name: \"rewards\",\n      params: [account],\n    },\n  ];\n\n  multiCallV2(\n    RewardsContractABI,\n    calls,\n    {},\n    (res) => {\n      console.log(\"getMultiRewards res:\", res);\n      const temp = [...state.poolsList];\n      const [[balance], [rewardRate], [totalSupply], [rewards]] = res;\n\n      temp[index].rewardRate = rewardRate;\n      temp[index].stakedAmount = Big(\n        ethers.utils.formatUnits(balance) || 0\n      ).toFixed(2);\n      temp[index].rewardTotalSupply = totalSupply;\n      temp[index].reward = Big(ethers.utils.formatUnits(rewards) || 0).toFixed(\n        2\n      );\n      State.update({\n        poolsList: temp,\n        flag1: true,\n      });\n    },\n    (err) => {\n      console.log(\"multicall_error\", err);\n    }\n  );\n}\n\nfunction getMultiLPToken(pool, index) {\n  const calls = [\n    {\n      address: pool.LP_token_address,\n      name: \"balanceOf\",\n      params: [account],\n    },\n    {\n      address: pool.LP_token_address,\n      name: \"getActualSupply\",\n    },\n  ];\n\n  multiCallV2(\n    LPTokenABI,\n    calls,\n    {},\n    (res) => {\n      console.log(\"getMultiLPToken res:\", res);\n      const temp = [...state.poolsList];\n      const [[balance], [totalSupply]] = res;\n\n      temp[index].bptAmount = ethers.utils.formatUnits(balance);\n      temp[index].bptTotalSupply = totalSupply;\n\n      State.update({\n        poolsList: temp,\n        flag2: true,\n      });\n    },\n    (err) => {\n      console.log(\"multicall_error\", err);\n    }\n  );\n}\n\nfunction getMultiPoolTokens() {\n  const ids = state.poolsList.map((item) => item.Balancer_Pool_ID);\n\n  const calls = ids.map((id) => ({\n    address: PoolContractWrapper,\n    name: \"getPoolTokens\",\n    params: [id],\n  }));\n  // https://gnosisscan.io/address/0xba12222222228d8ba445958a75a0704d566bf2c8#readContract\n  multiCallV2(\n    PoolContractABI,\n    calls,\n    {},\n    (res) => {\n      console.log(\"getMultiPoolTokens res:\", res);\n      const temp = [...state.poolsList];\n      for (let i = 0; i < res.length; i++) {\n        const addrArray = res[i][0];\n        const tokenBalArray = res[i][1];\n        temp[i].tokenAssets = addrArray;\n        temp[i].tokenBalance = tokenBalArray;\n        temp[i].tokens = addrArray\n          ? addrArray.map((addr) => TOKENS[addr].symbol)\n          : [];\n      }\n      State.update({\n        poolsList: temp,\n        flag3: true,\n      });\n    },\n    (err) => {\n      console.log(\"multicall_error\", err);\n    }\n  );\n}\n\nfunction fetchTokenPrice(tokenIds) {\n  return asyncFetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=${tokenIds}&vs_currencies=usd`\n  ).then((res) => {\n    if (res.ok) {\n      return res.body;\n    }\n    return 0;\n  });\n}\n\nfunction getTokenPrices() {\n  const ids = Object.values(COINGECKO_IDS).join();\n  fetchTokenPrice(ids)\n    .then((res) => {\n      State.update({\n        tokenPrices: res,\n        flag4: true,\n      });\n    })\n    .catch((error) => {\n      console.error(\"getTokenPrices_error: \", error);\n    });\n}\n\nfunction calcTVL() {\n  const temp = [...state.poolsList];\n  for (let i = 0; i < temp.length; i++) {\n    const tokens = temp[i].tokens;\n    const tokenBalance = temp[i].tokenBalance;\n    const bptTotalSupply = temp[i].bptTotalSupply;\n    const rewardTotalSupply = temp[i].rewardTotalSupply;\n    const rewardRate = temp[i].rewardRate;\n\n    if (\n      tokens &&\n      tokenBalance &&\n      state.tokenPrices &&\n      bptTotalSupply &&\n      rewardTotalSupply\n    ) {\n      try {\n        const sum = tokens?.reduce((total, cur, j) => {\n          if (cur) {\n            const tokenId = COINGECKO_IDS[cur];\n            const price = state.tokenPrices[tokenId]?.usd || 0;\n\n            return Big(total)\n              .plus(\n                Big(ethers.utils.formatUnits(tokenBalance[j] || 0)).times(\n                  Big(price || 0)\n                )\n              )\n              .toFixed();\n          } else {\n            return total;\n          }\n        }, 0);\n\n        const bptPriceUsd = Big(sum).div(Big(bptTotalSupply));\n\n        const TVL = Big(rewardTotalSupply).times(bptPriceUsd).toFixed(0);\n\n        // temp[i].poolValueUsd = sum;\n        temp[i].bptPriceUsd = bptPriceUsd;\n        temp[i].TVL = TVL;\n\n        // calc bal apr\n        const rewardPerYear = Big(ethers.utils.formatUnits(rewardRate)).times(\n          Big(86400).times(365)\n        );\n\n        const rewardPerYearUsd = rewardPerYear.times(\n          Big(state.tokenPrices[\"balancer\"][\"usd\"])\n        );\n\n        temp[i].BAL_APR = rewardPerYearUsd.div(TVL).times(100).toFixed(2);\n      } catch (error) {\n        console.log(\"calcTVL_error\", error);\n      }\n    }\n  }\n}\n\nfunction getAuraMintAmount(balEarned, global) {\n  const reductionPerCliff = BigNumber.from(global.auraReductionPerCliff);\n  const maxSupply = BigNumber.from(global.auraMaxSupply);\n  const totalSupply = BigNumber.from(global.auraTotalSupply);\n  const totalCliffs = BigNumber.from(global.auraTotalCliffs);\n  const minterMinted = BigNumber.from(0);\n\n  // e.g. emissionsMinted = 6e25 - 5e25 - 0 = 1e25;\n  const emissionsMinted = totalSupply.sub(maxSupply).sub(minterMinted);\n\n  // e.g. reductionPerCliff = 5e25 / 500 = 1e23\n  // e.g. cliff = 1e25 / 1e23 = 100\n  const cliff = emissionsMinted.div(reductionPerCliff);\n\n  // e.g. 100 < 500\n  if (cliff.lt(totalCliffs)) {\n    // e.g. (new) reduction = (500 - 100) * 2.5 + 700 = 1700;\n    // e.g. (new) reduction = (500 - 250) * 2.5 + 700 = 1325;\n    // e.g. (new) reduction = (500 - 400) * 2.5 + 700 = 950;\n    const reduction = totalCliffs.sub(cliff).mul(5).div(2).add(700);\n    // e.g. (new) amount = 1e19 * 1700 / 500 =  34e18;\n    // e.g. (new) amount = 1e19 * 1325 / 500 =  26.5e18;\n    // e.g. (new) amount = 1e19 * 950 / 500  =  19e17;\n    let amount = simpleToExact(balEarned).mul(reduction).div(totalCliffs);\n\n    // e.g. amtTillMax = 5e25 - 1e25 = 4e25\n    const amtTillMax = maxSupply.sub(emissionsMinted);\n    if (amount.gt(amtTillMax)) {\n      amount = amtTillMax;\n    }\n\n    return amount;\n  }\n\n  return BigNumber.from(0);\n}\n\nuseEffect(() => {\n  State.update({ account });\n  if (account && state.chainId === CHAIN_ID) {\n    initPoolList();\n  }\n}, [account]);\n\nuseEffect(() => {\n  getTokenPrices();\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    })\n    .catch(() => {});\n}, []);\n\nuseEffect(() => {\n  if (state.chainId === CHAIN_ID) {\n    console.log(\n      \"----------------\",\n      state.flag1,\n      state.flag2,\n      state.flag3,\n      state.flag4,\n      state\n    );\n    if (state.flag1 && state.flag2 && state.flag3 && state.flag4) {\n      try {\n        const totalDepositAmount = state.poolsList.reduce((total, cur) => {\n          return Big(cur.stakedAmount || 0)\n            .plus(total)\n            .toFixed(2);\n        }, 0);\n        const totalRewardsAmount = state.poolsList.reduce((total, cur) => {\n          return Big(cur.reward || 0)\n            .plus(total)\n            .toFixed(2);\n        }, 0);\n\n        const temp = state.poolsList.filter((item) =>\n          Big(item.stakedAmount || 0).gt(0)\n        );\n\n        calcTVL();\n        State.update({\n          totalDepositAmount,\n          totalRewardsAmount,\n          myPoolsList: temp,\n        });\n      } catch (error) {\n        console.log(333, error);\n      }\n    }\n  }\n}, [state.flag1, state.flag2, state.flag3, state.flag4]);\n\nconst handleChangeTabs = (value) => {\n  State.update({\n    currentTab: value,\n  });\n};\nconst getPoolIcon = (tokenAssets) => {\n  if (tokenAssets) {\n    const icons = tokenAssets?.map((addr, index) => TOKENS[addr].icon);\n    const usefulIcons = icons.filter((n) => n);\n    return usefulIcons;\n  } else {\n    return [];\n  }\n};\n\nconst renderPoolIcon = () => {\n  const icons = getPoolIcon(tokenAssets);\n  if (icons) {\n    return icons.map((addr, index) => {\n      if (TOKENS[addr]) {\n        return (\n          <span key={index} style={{ marginRight: -12 }}>\n            <Widget\n              src=\"dapdapbos.near/widget/UI.Avatar\"\n              props={{ src: TOKENS[addr].icon }}\n            />\n          </span>\n        );\n      }\n      return null;\n    });\n  }\n};\n\nconst switchChain = () => {\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${Number(CHAIN_ID).toString(16)}` },\n  ]);\n};\n\nconst handleClaim = (address) => {\n  State.update({\n    isClaiming: true,\n  });\n  const ClaimRewardsContract = new ethers.Contract(\n    address,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"address\",\n            name: \"_account\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"_claimExtras\",\n            type: \"bool\",\n          },\n        ],\n        name: \"getReward\",\n        outputs: [\n          {\n            internalType: \"bool\",\n            name: \"\",\n            type: \"bool\",\n          },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  return ClaimRewardsContract.getReward(account, true)\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            isClaiming: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(\"getPoolTokens_error:\", err);\n      State.update({\n        isClaiming: false,\n      });\n    });\n};\n\nconst handleClaimAll = () => {\n  State.update({\n    isAllClaiming: true,\n  });\n  let getClaimAllArray = [];\n\n  for (let i = 0; i < state.myPoolsList.length; i++) {\n    const addr = state.myPoolsList[i].Rewards_contract_address;\n    getClaimAllArray.push(handleClaim(addr));\n  }\n  Promise.allSettled(getClaimAllArray)\n    .then((res) => {\n      console.info(\"getClaimAllArray: \", res);\n    })\n    .catch((error) => {\n      console.info(\"getClaimAllArray: \", error);\n    })\n    .finally(() => {\n      State.update({\n        isAllClaiming: false,\n      });\n    });\n};\nconsole.info(\"STATE: \", state);\nreturn (\n  <Wrapper>\n    <Tabs.Root value={state.currentTab} onValueChange={handleChangeTabs}>\n      <TabsList>\n        <Tabs.Trigger value=\"TAB_POOL\" asChild>\n          <div\n            className={`tab-head-item ${\n              state.currentTab === \"TAB_POOL\" ? \"active\" : \"\"\n            }`}\n          >\n            All Pools\n          </div>\n        </Tabs.Trigger>\n        <Tabs.Trigger value=\"TAB_ASSETS\" asChild>\n          <div\n            className={`tab-head-item ${\n              state.currentTab === \"TAB_ASSETS\" ? \"active\" : \"\"\n            }`}\n          >\n            Your Assets\n          </div>\n        </Tabs.Trigger>\n      </TabsList>\n      <Tabs.Content value=\"TAB_POOL\">\n        <GridContainer className=\"grid-pool-head\">\n          <GridItem>Pool</GridItem>\n          <GridItem>APR</GridItem>\n          <GridItem>TVL</GridItem>\n          <GridItem>You Staked</GridItem>\n          <GridItem>Your rewards</GridItem>\n        </GridContainer>\n        <Accordion.Root type=\"single\" collapsible>\n          {state.poolsList.map((item) => (\n            <PoolItem>\n              <Widget\n                src=\"dapdapbos.near/widget/Staking.Aura.Pool\"\n                props={{\n                  ...props,\n                  data: item,\n                  chainId: state.chainId,\n                  account: state.account,\n                  TOKENS,\n                  CHAIN_ID,\n                  RewardPoolDepositWrapper,\n                  RewardPoolDepositABI,\n                  switchChain,\n                  tokenIcons: getPoolIcon(item.tokenAssets),\n                }}\n                key={item.poolName}\n              />\n            </PoolItem>\n          ))}\n        </Accordion.Root>\n      </Tabs.Content>\n      <Tabs.Content value=\"TAB_ASSETS\">\n        <AssetsWrapper>\n          <AssetsPanel>\n            <div className=\"as-title\">You deposit</div>\n            <div className=\"as-amount\">${state.totalDepositAmount}</div>\n          </AssetsPanel>\n          <AssetsPanel>\n            <div className=\"as-title\">Claimable Rewards</div>\n            <div className=\"as-action\">\n              <div className=\"as-amount\">\n                ${state.totalRewardsAmount}\n                <span className=\"as-sub\"></span>\n              </div>\n              {state.myPoolsList.length ? (\n                <Widget\n                  src=\"dapdapbos.near/widget/UI.Button\"\n                  props={{\n                    text: \"Claim All\",\n                    type: \"primary\",\n                    style: { width: 118 },\n                    loading: state.isAllClaiming,\n                    disabled: !state.myPoolsList.length,\n                    onClick: handleClaimAll,\n                  }}\n                />\n              ) : null}\n            </div>\n          </AssetsPanel>\n        </AssetsWrapper>\n        {state.myPoolsList.length ? (\n          <GridContainer className=\"grid-pool-head\">\n            <GridItem>Pool</GridItem>\n            <GridItem>APR</GridItem>\n            <GridItem>You Staked</GridItem>\n            <GridItem>Your rewards</GridItem>\n            <GridItem className=\"action-item-head\">Action</GridItem>\n          </GridContainer>\n        ) : null}\n\n        <HeadWrapper>\n          {state.myPoolsList.length ? (\n            state.myPoolsList?.map((item, index) => (\n              <PoolItem key={index}>\n                <GridContainer className=\"pool-head\">\n                  <GridItem>\n                    <div className=\"title-primary\">\n                      {renderPoolIcon(item.tokenAssets)}\n\n                      <span style={{ marginLeft: 20 }}>{item.poolName}</span>\n                    </div>\n                  </GridItem>\n                  <GridItem>\n                    <div className=\"title-secondary\">%</div>\n                    <div className=\"title-sub\">proj. %</div>\n                  </GridItem>\n                  <GridItem>\n                    <div className=\"title-secondary\">${item.stakedAmount}</div>\n                  </GridItem>\n                  <GridItem>\n                    <div className=\"title-secondary\">${item.reward}</div>\n                    <div className=\"title-sub\"></div>\n                  </GridItem>\n                  <GridItem className=\"action-item\">\n                    {/* <Widget\n                        src=\"dapdapbos.near/widget/UI.Button\"\n                        props={{\n                          text: \"Unstake\",\n                          type: \"secondary\",\n                          style: { width: 118 },\n                          disabled: true,\n                          onClick: () => {},\n                        }}\n                      /> */}\n                    <Widget\n                      src=\"dapdapbos.near/widget/UI.Button\"\n                      props={{\n                        text: \"Claim\",\n                        type: \"primary\",\n                        style: { width: 118 },\n                        loading: state.isClaiming,\n                        onClick: () => {\n                          handleClaim(item.Rewards_contract_address);\n                        },\n                      }}\n                    />\n                  </GridItem>\n                </GridContainer>\n              </PoolItem>\n            ))\n          ) : (\n            <EmptyWrap>\n              <div className=\"empty-title\">No productive assets detected</div>\n              <div className=\"empty-intro\">\n                Head over to the pools list and make a deposit to start earning\n                yield!\n              </div>\n            </EmptyWrap>\n          )}\n        </HeadWrapper>\n      </Tabs.Content>\n    </Tabs.Root>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Aura.Index", "fact_widget_deployments_id": "cfbd2331a0e2463912c67332e07eda49", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}