{"tx_hash": "FkU7iqqWoae8hLSAnqphZaUKczcH7WyD7vNQZhXkzrCP", "action_id_social": "2ciowniBdtfodpJsqYhT7hBYq3Z5YVeZgrHETpwCHnZW-0-widget", "block_id": 104821478, "block_timestamp": "2023-11-03T06:56:38.107Z", "signer_id": "dapdapbos.near", "widget_name": "Uniswap.Swap.SwapV2", "source_code": "const {\n  title,\n  chainId,\n  chainName,\n  wethAddress,\n  dexConfig,\n  amountOutFn,\n  quoterV3,\n  handlerV2,\n  handlerV3,\n  handlerSolidly,\n  QuoterSolidly,\n  handleSyncswap,\n  QuoterSyncswap,\n  chainIdNotSupport,\n} = props;\n\nconst prevTitle = Storage.privateGet(\"prevTitle\");\nif (prevTitle !== title || !state.inputCurrency) {\n  State.update({\n    inputCurrency: dexConfig.defaultCurrencies.input,\n    outputCurrency: dexConfig.defaultCurrencies.output,\n    uniType: dexConfig.type,\n    inputCurrencyAmount: \"1\",\n    outputCurrencyAmount: \"\",\n    maxInputBalance: \"0\",\n    maxOutputBalance: \"0\",\n    tradeType: \"in\",\n    targetUnitAmount: 0,\n    noPair: false,\n    chainId,\n    updateInputTokenBalance: true,\n    updateOutputTokenBalance: true,\n    loading: true,\n    displayCurrencySelect: false,\n    selectedTokenAddress: \"\",\n    currencySelectType: 0,\n    debounce: (fn, wait) => {\n      let timer;\n      return () => {\n        clearTimeout(timer);\n        timer = setTimeout(fn, wait);\n      };\n    },\n  });\n  Storage.privateSet(\"prevTitle\", title);\n}\n\nif (chainId !== state.chainId) {\n  State.update({\n    chainId,\n    inputCurrency: dexConfig.defaultCurrencies.input,\n    outputCurrency: dexConfig.defaultCurrencies.output,\n  });\n}\n\nconst SwapContainer = styled.div`\n  .borderShadow {\n    border-radius: 24px;\n    background-color: #131313;\n    font-size: 16px;\n    line-height: 1.6;\n    position: relative;\n    background-image: linear-gradient(#131313, #131313),\n      linear-gradient(135deg, 292429 0%, 292429 100%);\n    background-origin: border-box;\n    background-clip: content-box, border-box;\n  }\n\n  .borderShadow:before {\n    content: \"\";\n    z-index: 0;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background: linear-gradient(135deg, #e97ef8 0%, #e97ef8 100%);\n    filter: blur(30px);\n    opacity: 0.2;\n    transition: opacity 0.3s;\n    border-radius: inherit;\n  }\n\n  .borderShadow::after {\n    content: \"\";\n    z-index: -1;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background: inherit;\n    border-radius: inherit;\n  }\n`;\n\nconst DexIconWrapper = styled.div`\n  text-align: center;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  padding-bottom: 16px;\n`;\n\nconst DexIcon = styled.img`\n  text-align: center;\n  margin: 0 auto;\n  width: 30px;\n`;\n\nconst Title = styled.div`\n  color: var(--text-color);\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-left: 30px;\n  padding-bottom: 10px;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst Panel = styled.div`\n  width: 100%;\n  border-radius: 24px;\n\n  border: 1px solid #3d363d;\n\n  padding: 24px 8px 12px;\n  position: relative;\n  background: linear-gradient(0deg, #131313, #131313),\n    linear-gradient(0deg, #292429, #292429);\n`;\nconst ExchangeIcon = styled.div`\n  /* width: 60px; */\n  height: 34px;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  left: 50%;\n  top: 50%;\n  svg {\n    color: var(--text-color);\n  }\n`;\n\nconst ExchangeIconWrapper = styled.div`\n  /* width: 60px; */\n  position: relative;\n  width: 100%;\n  height: 10px;\n`;\nconst PanelLabel = styled.div`\n  color: white;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n`;\nconst Price = styled.div`\n  font-size: 14px;\n  color: var(--thirdary-text-color);\n  text-align: right;\n  margin-bottom: 20px;\n  margin-top: 20px;\n\n  @media (max-width: 768px) {\n    margin-top: 10px;\n  }\n`;\nconst SwapButton = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  background-color: var(--button-color);\n  color: #fff;\n  font-size: 18px;\n  line-height: 22px;\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n\nconst Power = styled.div`\n  width: 100%;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: center;\n  padding-top: 8px;\n\n  color: #8e8e8e;\n`;\n\nconst getBestTrade = () => {\n  State.update({\n    loading: true,\n  });\n};\n\nconst debouncedGetBestTrade = state.debounce(getBestTrade, 500);\n\nconst getUnitAmount = () => {\n  const bigInputAmount = Big(state.inputCurrencyAmount || 0);\n  const bigOutputAmount = Big(state.outputCurrencyAmount || 0);\n  if (bigInputAmount.eq(0) || bigOutputAmount.eq(0)) return \"-\";\n  const unitAmount = bigOutputAmount.div(bigInputAmount);\n  if (unitAmount.lt(0.001)) return unitAmount.toPrecision(1);\n  return unitAmount.toFixed(3);\n};\n\nreturn (\n  <SwapContainer>\n    <div className=\"borderShadow\">\n      <Panel className=\"\">\n        <PanelLabel>Swap</PanelLabel>\n        <Widget\n          src=\"dapdapbos.near/widget/Uniswap.Swap.CurrencyInput\"\n          props={{\n            currency: state.inputCurrency,\n            amount: state.inputCurrencyAmount,\n            chainIdNotSupport,\n            updateTokenBalance: state.updateInputTokenBalance,\n            onCurrencySelectOpen: () => {\n              State.update({\n                displayCurrencySelect: true,\n                currencySelectType: 0,\n                selectedTokenAddress: state.inputCurrency.address,\n              });\n            },\n            onUpdateCurrencyBalance: (balance) => {\n              State.update({\n                maxInputBalance: ethers.utils.formatUnits(\n                  balance,\n                  state.inputCurrency.decimals\n                ),\n                updateInputTokenBalance: false,\n              });\n            },\n            onAmountChange: (val) => {\n              State.update({\n                inputCurrencyAmount: val,\n              });\n              if (val && Number(val)) {\n                console.log(\"111\");\n                debouncedGetBestTrade();\n              }\n            },\n          }}\n        />\n\n        <ExchangeIconWrapper>\n          <ExchangeIcon\n            onClick={() => {\n              const [inputCurrency, outputCurrency] = [\n                state.outputCurrency,\n                state.inputCurrency,\n              ];\n              State.update({\n                inputCurrency,\n                outputCurrency,\n                outputCurrencyAmount: \"\",\n                inputCurrencyAmount: !state.inputCurrencyAmount\n                  ? \"1\"\n                  : Big(\n                      Big(state.inputCurrencyAmount)\n                        .times(Big(10).pow(state.outputCurrency.decimals))\n                        .toFixed(0)\n                    )\n                      .div(Big(10).pow(state.outputCurrency.decimals))\n                      .toFixed(),\n                tradeType: \"in\",\n                updateInputTokenBalance: true,\n                updateOutputTokenBalance: true,\n                loading: true,\n              });\n              if (Big(state.inputCurrencyAmount || 0).gt(0)) getBestTrade();\n            }}\n          >\n            <Widget src=\"dapdapbos.near/widget/Uniswap.Swap.ExchangeIcon\" />\n          </ExchangeIcon>\n        </ExchangeIconWrapper>\n\n        <Widget\n          src=\"dapdapbos.near/widget/Uniswap.Swap.CurrencyInput\"\n          props={{\n            currency: state.outputCurrency,\n            amount:\n              state.inputCurrency && state.outputCurrency\n                ? state.outputCurrencyAmount\n                : \"\",\n            updateTokenBalance: state.updateOutputTokenBalance,\n            chainIdNotSupport,\n            disabled: true,\n            onCurrencySelectOpen: () => {\n              State.update({\n                displayCurrencySelect: true,\n                currencySelectType: 1,\n                selectedTokenAddress: state.outputCurrency.address,\n              });\n            },\n            onUpdateCurrencyBalance: () => {\n              State.update({\n                updateOutputTokenBalance: false,\n              });\n            },\n          }}\n        />\n        <Price>\n          1 {state.inputCurrency.symbol}\u2248 {getUnitAmount()}{\" \"}\n          {state.outputCurrency.symbol}\n        </Price>\n        <Widget\n          src=\"dapdapbos.near/widget/Uniswap.Swap.SwapButton\"\n          props={{\n            routerAddress: dexConfig.routerAddress,\n            wethAddress,\n            title,\n            chainName,\n            inputCurrency: state.inputCurrency,\n            outputCurrency: state.outputCurrency,\n            inputCurrencyAmount: state.inputCurrencyAmount,\n            outputCurrencyAmount: state.outputCurrencyAmount,\n            maxInputBalance: state.maxInputBalance,\n            handleSyncswap,\n            handlerV2,\n            handlerV3,\n            handlerSolidly,\n            onSuccess: () => {\n              State.update({\n                updateInputTokenBalance: true,\n                updateOutputTokenBalance: true,\n              });\n            },\n            noPair: state.noPair,\n            loading: state.loading,\n            fee: state.fee,\n            stable: state.stable,\n            chainId,\n            syncSwapPoolAddress: state.syncSwapPoolAddress,\n            uniType: dexConfig.uniType,\n          }}\n        />\n      </Panel>\n    </div>\n\n    <Power>\n      {/* <img height={22} src={dexConfig.powerByIcon} /> */}\n      Powered by DapDap & BOS\n    </Power>\n\n    {state.displayCurrencySelect && (\n      <Widget\n        src=\"dapdapbos.near/widget/Uniswap.Swap.CurrencySelect\"\n        props={{\n          display: state.displayCurrencySelect,\n          selectedTokenAddress: state.selectedTokenAddress,\n          chainIdNotSupport,\n          title: props.title,\n          chainId: props.chainId,\n          tokens: dexConfig.tokens,\n          onClose: () => {\n            State.update({\n              displayCurrencySelect: false,\n            });\n          },\n          onSelect: (currency) => {\n            const updatedParams = {\n              outputCurrencyAmount: \"\",\n              noPair: false,\n              updateInputTokenBalance: true,\n            };\n            if (state.currencySelectType === 0) {\n              updatedParams.inputCurrency = currency;\n              if (currency.address === state.outputCurrency.address)\n                updatedParams.outputCurrency = null;\n            }\n            if (state.currencySelectType === 1) {\n              updatedParams.outputCurrency = currency;\n              if (currency.address === state.inputCurrency.address) {\n                updatedParams.inputCurrency = null;\n                updatedParams.inputCurrencyAmount = \"\";\n              }\n            }\n            if (\n              state.inputCurrencyAmount &&\n              Number(state.inputCurrencyAmount) &&\n              state.inputCurrency?.address\n            ) {\n              updatedParams.loading = true;\n            }\n            State.update(updatedParams);\n            if (updatedParams.loading) getBestTrade();\n          },\n        }}\n      />\n    )}\n\n    {dexConfig.uniType === \"v3\" && (\n      <Widget\n        src={amountOutFn}\n        props={{\n          update: state.loading,\n          routerAddress: dexConfig.routerAddress,\n          tokenIn: state.inputCurrency,\n          tokenOut: state.outputCurrency,\n          amountIn: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          tradeType: state.tradeType,\n          quoterAddress: dexConfig.quoterAddress,\n          wethAddress,\n          chainId,\n          loadAmountOut: (data) => {\n            State.update({\n              loading: false,\n              ...data,\n            });\n          },\n        }}\n      />\n    )}\n  </SwapContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Uniswap.Swap.SwapV2", "fact_widget_deployments_id": "b0df73c5b7042c52675b7e4b489ce26c", "inserted_timestamp": "2023-11-03T08:48:08.807Z", "modified_timestamp": "2023-11-03T08:48:08.807Z", "__row_index": 0}