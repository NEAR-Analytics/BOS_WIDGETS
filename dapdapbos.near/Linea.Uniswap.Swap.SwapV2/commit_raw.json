{"tx_hash": "4THpcfa3HV1uKLpH3SDgC27xCDCqnLv2r5HHd5xBcr8N", "action_id_social": "9RjzAWfmwywMrZqGLvm6RvzEWAdvzBtVLc3X18moLmgT-0-widget", "block_id": 105591920, "block_timestamp": "2023-11-13T07:10:38.636Z", "signer_id": "dapdapbos.near", "widget_name": "Linea.Uniswap.Swap.SwapV2", "source_code": "const {\n  title,\n  chainId,\n  chainName,\n  wethToken,\n  dexConfig,\n  amountOutFn,\n  slippage,\n  handlerV3,\n  handleSyncswap,\n  QuoterSyncswap,\n  onImport,\n  onSetSlippage,\n  onAddHistoryToken,\n} = props;\n\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (account) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ currentChainId: chainId });\n    })\n    .catch(() => {});\n}\n\nState.init({\n  inputCurrency: dexConfig.defaultCurrencies.input,\n  outputCurrency: null,\n  uniType: dexConfig.type,\n  inputCurrencyAmount: \"1\",\n  outputCurrencyAmount: \"\",\n  maxInputBalance: \"0\",\n  maxOutputBalance: \"0\",\n  tradeType: \"in\",\n  targetUnitAmount: 0,\n  noPair: false,\n  chainId,\n  updateInputTokenBalance: true,\n  updateOutputTokenBalance: true,\n  loading: false,\n  displayCurrencySelect: false,\n  selectedTokenAddress: \"\",\n  currencySelectType: 0,\n  debounce: (fn, wait) => {\n    let timer;\n    return () => {\n      clearTimeout(timer);\n      timer = setTimeout(fn, wait);\n    };\n  },\n});\nconst SwapContainer = styled.div``;\n\nconst DexIconWrapper = styled.div`\n  text-align: center;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  padding-bottom: 16px;\n`;\n\nconst DexIcon = styled.img`\n  text-align: center;\n  margin: 0 auto;\n  width: 30px;\n`;\n\nconst Title = styled.div`\n  color: var(--text-color);\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-left: 30px;\n  padding-bottom: 10px;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst Panel = styled.div`\n  width: 100%;\n  border-radius: 24px;\n  box-shadow: 0px 0px 20px 10px rgba(96, 222, 255, 0.1);\n  border: 1px solid #3d363d;\n  padding: 24px 8px 12px;\n  position: relative;\n  background: #131313;\n`;\nconst ExchangeIcon = styled.div`\n  /* width: 60px; */\n  height: 34px;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  left: 50%;\n  top: 50%;\n  svg {\n    color: var(--text-color);\n  }\n`;\n\nconst ExchangeIconWrapper = styled.div`\n  /* width: 60px; */\n  position: relative;\n  width: 100%;\n  height: 10px;\n`;\nconst PanelLabel = styled.div`\n  color: white;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-bottom: 16px;\n  padding-left: 16px;\n  display: flex;\n  justify-content: space-between;\n  .setting-btn {\n    cursor: pointer;\n    position: relative;\n  }\n`;\nconst SwapButton = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  background-color: var(--button-color);\n  color: #fff;\n  font-size: 18px;\n  line-height: 22px;\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n\nconst Power = styled.div`\n  width: 100%;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  letter-spacing: 0em;\n  text-align: center;\n  padding-top: 10px;\n  color: #8e8e8e;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  .view-code {\n    display: flex;\n    gap: 5px;\n    cursor: pointer;\n  }\n  .view-code-icon {\n    width: 15px;\n    height: 15px;\n  }\n`;\n\nconst getBestTrade = () => {\n  if (\n    !state.inputCurrency ||\n    !state.outputCurrency ||\n    !state.inputCurrencyAmount\n  )\n    return;\n  State.update({\n    loading: true,\n    state: null,\n  });\n  onAddHistoryToken?.({\n    [state.inputCurrency.address]: state.inputCurrency,\n    [state.outputCurrency.address]: state.outputCurrency,\n  });\n};\n\nconst debouncedGetBestTrade = state.debounce?.(getBestTrade, 500);\n\nconst getUnitAmount = () => {\n  const bigInputAmount = Big(state.inputCurrencyAmount || 0);\n  const bigOutputAmount = Big(state.outputCurrencyAmount || 0);\n  if (bigInputAmount.eq(0) || bigOutputAmount.eq(0)) return \"-\";\n  const unitAmount = bigOutputAmount.div(bigInputAmount);\n  if (unitAmount.lt(0.001)) return unitAmount.toPrecision(1);\n  return unitAmount.toFixed(3);\n};\n\nreturn (\n  <>\n    <SwapContainer>\n      <Panel className=\"\">\n        <PanelLabel>\n          <div>Swap</div>\n          <div\n            className=\"setting-btn\"\n            onClick={(ev) => {\n              State.update({\n                showSlippageSetting: !state.showSlippageSetting,\n                clientX: ev.clientX,\n                clientY: ev.clientY,\n              });\n            }}\n          >\n            <svg\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 18 18\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M17.5879 7.375C17.584 7.33984 17.5801 7.31055 17.5742 7.29297V7.27734L17.5664 7.23438C17.4277 6.55859 16.9805 6.12305 16.4238 6.12305H16.332C15.3828 6.12305 14.6133 5.34961 14.6133 4.4043C14.6133 4.18555 14.7148 3.875 14.7578 3.76562C15.0273 3.13672 14.7402 2.41992 14.0742 2.05469L11.9785 0.869141L11.9395 0.855469C11.7832 0.804687 11.6016 0.744141 11.3984 0.744141C11.0195 0.744141 10.5938 0.919922 10.3301 1.18359C10 1.50977 9.33008 1.99609 8.93164 1.99609C8.53516 1.99609 7.86328 1.51172 7.5332 1.18359C7.25195 0.90625 6.86328 0.744141 6.46484 0.744141C6.25586 0.744141 6.08008 0.802734 5.92383 0.855469L5.88867 0.869141L3.69141 2.05859L3.67773 2.06641C3.14453 2.40039 2.92773 3.16602 3.19922 3.77344L3.20312 3.78125L3.20703 3.78906C3.25 3.88477 3.38281 4.20898 3.38281 4.49219C3.38281 5.44141 2.60938 6.21094 1.66406 6.21094H1.57227C0.990234 6.21094 0.554687 6.64063 0.429687 7.33008L0.421875 7.36914V7.38281C0.421875 7.40234 0.414062 7.42969 0.408203 7.46484C0.359375 7.75977 0.242188 8.45508 0.242188 9.02344C0.242188 9.5918 0.357422 10.2871 0.408203 10.582C0.412109 10.6172 0.416016 10.6465 0.421875 10.6641V10.6797L0.429687 10.7227C0.568359 11.3984 1.01562 11.834 1.57227 11.834H1.61914C2.56836 11.834 3.33789 12.6074 3.33789 13.5527C3.33789 13.7715 3.23633 14.082 3.19336 14.1914C2.93359 14.7832 3.17969 15.543 3.75391 15.9258L3.76953 15.9336L5.83984 17.0859L5.87891 17.0996C6.03516 17.1504 6.21289 17.2109 6.41602 17.2109C6.84961 17.2109 7.24023 17.0449 7.48438 16.7715C7.50781 16.7539 7.53125 16.7305 7.55859 16.707C7.80859 16.4883 8.48047 15.9102 8.92383 15.9102C9.25391 15.9102 9.80664 16.2559 10.3633 16.8125C10.6445 17.0898 11.0332 17.252 11.4316 17.252C11.7012 17.252 11.9004 17.1777 12.127 17.0664L12.1348 17.0625L14.2578 15.8887L14.2656 15.8809C14.7988 15.5469 15.0156 14.7813 14.7441 14.1738L14.7402 14.166L14.7363 14.1582C14.7324 14.1562 14.5664 13.8105 14.5977 13.5L14.6016 13.4805V13.4609C14.6016 12.5117 15.375 11.7422 16.3203 11.7422H16.418C17 11.7422 17.4355 11.3125 17.5605 10.623L17.5684 10.584V10.5703C17.5723 10.5547 17.5762 10.5312 17.582 10.5C17.6328 10.2129 17.75 9.54297 17.75 8.92969C17.7539 8.36328 17.6387 7.66992 17.5879 7.375ZM8.99414 11.7188C7.49219 11.7188 6.27539 10.502 6.27539 9C6.27539 7.49805 7.49219 6.28125 8.99414 6.28125C10.4961 6.28125 11.7129 7.49805 11.7129 9C11.7129 10.502 10.4961 11.7188 8.99414 11.7188Z\"\n                fill=\"#8E8E8E\"\n              />\n            </svg>\n          </div>\n        </PanelLabel>\n        <Widget\n          src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.CurrencyInput\"\n          props={{\n            currency: state.inputCurrency,\n            amount: state.inputCurrencyAmount,\n            updateTokenBalance: state.updateInputTokenBalance,\n            isCorrectNetwork: state.currentChainId === chainId,\n            labelText: \"You pay\",\n            onCurrencySelectOpen: () => {\n              if (chainId !== state.currentChainId) return;\n              State.update({\n                displayCurrencySelect: true,\n                currencySelectType: 0,\n                selectedTokenAddress: state.inputCurrency.address,\n              });\n            },\n            onUpdateCurrencyBalance: (balance) => {\n              State.update({\n                maxInputBalance: ethers.utils.formatUnits(\n                  balance,\n                  state.inputCurrency.decimals\n                ),\n                updateInputTokenBalance: false,\n              });\n            },\n            onAmountChange: (val) => {\n              State.update({\n                inputCurrencyAmount: val,\n              });\n              if (val && Number(val)) {\n                debouncedGetBestTrade();\n              }\n            },\n          }}\n        />\n        <ExchangeIconWrapper>\n          <ExchangeIcon\n            onClick={() => {\n              if (!state.outputCurrency || state.loading || state.pending)\n                return;\n              const [inputCurrency, outputCurrency] = [\n                state.outputCurrency,\n                state.inputCurrency,\n              ];\n              State.update({\n                inputCurrency,\n                outputCurrency,\n                outputCurrencyAmount: \"\",\n                inputCurrencyAmount: !state.inputCurrencyAmount\n                  ? \"1\"\n                  : Big(\n                      Big(state.inputCurrencyAmount)\n                        .times(Big(10).pow(state.outputCurrency.decimals))\n                        .toFixed(0)\n                    )\n                      .div(Big(10).pow(state.outputCurrency.decimals))\n                      .toFixed(),\n                tradeType: \"in\",\n                updateInputTokenBalance: true,\n                updateOutputTokenBalance: true,\n                loading: true,\n              });\n              if (Big(state.inputCurrencyAmount || 0).gt(0)) getBestTrade();\n            }}\n          >\n            <Widget src=\"dapdapbos.near/widget/Uniswap.Swap.ExchangeIcon\" />\n          </ExchangeIcon>\n        </ExchangeIconWrapper>\n        <Widget\n          src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.CurrencyInput\"\n          props={{\n            currency: state.outputCurrency,\n            labelText: \"You receive\",\n            amount:\n              state.inputCurrency && state.outputCurrency\n                ? state.outputCurrencyAmount\n                : \"\",\n            isCorrectNetwork: state.currentChainId === chainId,\n            updateTokenBalance: state.updateOutputTokenBalance,\n            disabled: true,\n            onCurrencySelectOpen: () => {\n              if (chainId !== state.currentChainId) return;\n              State.update({\n                displayCurrencySelect: true,\n                currencySelectType: 1,\n                selectedTokenAddress: state.outputCurrency.address,\n              });\n            },\n            onUpdateCurrencyBalance: () => {\n              State.update({\n                updateOutputTokenBalance: false,\n              });\n            },\n          }}\n        />\n        {state.trade && state.inputCurrencyAmount && (\n          <Widget\n            src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.Result\"\n            props={{\n              trade: {\n                ...state.trade,\n                inputCurrency: state.inputCurrency,\n                outputCurrency: state.outputCurrency,\n                inputCurrencyAmount: state.inputCurrencyAmount,\n                outputCurrencyAmount: state.outputCurrencyAmount,\n                slippage,\n              },\n            }}\n          />\n        )}\n        <Widget\n          src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.SwapButton\"\n          props={{\n            routerAddress: dexConfig.routerAddress,\n            wethAddress: wethToken.address,\n            title,\n            chainName,\n            currentChainId: state.currentChainId,\n            inputCurrency: state.inputCurrency,\n            outputCurrency: state.outputCurrency,\n            inputCurrencyAmount: state.inputCurrencyAmount,\n            outputCurrencyAmount: state.outputCurrencyAmount,\n            maxInputBalance: state.maxInputBalance,\n            handleSyncswap,\n            handlerV3,\n            slippage,\n            trade: state.trade,\n            onSuccess: () => {\n              State.update({\n                updateInputTokenBalance: true,\n                updateOutputTokenBalance: true,\n              });\n              onAddHistoryToken?.({\n                [state.inputCurrency.address]: state.inputCurrency,\n                [state.outputCurrency.address]: state.outputCurrency,\n              });\n            },\n            onPending: (pending) => {\n              State.update({\n                pending,\n              });\n            },\n            noPair: state.noPair,\n            loading: state.loading,\n            stable: state.stable,\n            chainId,\n            syncSwapPoolAddress: state.syncSwapPoolAddress,\n            uniType: dexConfig.uniType,\n          }}\n        />\n      </Panel>\n      {account && (\n        <Widget\n          src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.BridegeTips\"\n          props={{\n            onClick: () => {\n              props.onOpenBridge();\n            },\n          }}\n        />\n      )}\n      <Power>\n        <div\n          className=\"view-code\"\n          onClick={() => {\n            props.onOpenCode();\n          }}\n        >\n          <svg\n            width=\"15\"\n            height=\"15\"\n            viewBox=\"0 0 15 15\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g clip-path=\"url(#clip0_2_166)\">\n              <path\n                d=\"M5.33524 7.50357C5.33522 7.66313 5.39812 7.81627 5.51028 7.92977C5.62244 8.04326 5.77482 8.10797 5.93438 8.10984H9.27247C9.43232 8.10984 9.58562 8.04634 9.69865 7.93331C9.81168 7.82028 9.87518 7.66698 9.87518 7.50713C9.87518 7.34728 9.81168 7.19398 9.69865 7.08095C9.58562 6.96792 9.43232 6.90442 9.27247 6.90442H5.93438C5.77605 6.90627 5.62473 6.96999 5.51277 7.08195C5.40081 7.19392 5.33709 7.34524 5.33524 7.50357ZM2.33951 7.93866C2.39518 7.99451 2.46132 8.03883 2.53415 8.06907C2.60697 8.09931 2.68505 8.11488 2.76391 8.11488C2.84276 8.11488 2.92084 8.09931 2.99367 8.06907C3.0665 8.03883 3.13264 7.99451 3.1883 7.93866L5.53495 5.58488C5.59081 5.52922 5.63512 5.46307 5.66536 5.39025C5.6956 5.31742 5.71117 5.23934 5.71117 5.16048C5.71117 5.08163 5.6956 5.00355 5.66536 4.93072C5.63512 4.85789 5.59081 4.79175 5.53495 4.73609L3.1883 2.35378C3.13257 2.29758 3.06631 2.25291 2.99332 2.22231C2.92032 2.19172 2.84201 2.1758 2.76286 2.17547C2.68372 2.17514 2.60528 2.1904 2.53203 2.22038C2.45878 2.25036 2.39215 2.29448 2.33595 2.35021C2.27975 2.40595 2.23508 2.4722 2.20448 2.5452C2.17389 2.6182 2.15797 2.6965 2.15764 2.77565C2.15697 2.9355 2.21983 3.08907 2.33238 3.20257L4.2796 5.14979L2.33238 7.08274C2.27545 7.13852 2.23021 7.20511 2.19934 7.27859C2.16846 7.35208 2.15255 7.43099 2.15255 7.5107C2.15255 7.59041 2.16846 7.66932 2.19934 7.7428C2.23021 7.81629 2.27545 7.88287 2.33238 7.93866H2.33951ZM13.7946 13.7946H1.20542V1.20542H13.7946V13.7946ZM13.7946 0H1.20542C0.885723 0 0.57912 0.126999 0.35306 0.35306C0.126999 0.57912 0 0.885723 0 1.20542L0 13.7946C0.00560989 14.1106 0.135082 14.4117 0.360537 14.6331C0.585992 14.8546 0.889396 14.9787 1.20542 14.9786H13.7946C14.1069 14.9731 14.4049 14.8466 14.6257 14.6257C14.8466 14.4049 14.9731 14.1069 14.9786 13.7946V1.20542C14.9787 0.889396 14.8546 0.585992 14.6331 0.360537C14.4117 0.135082 14.1106 0.00560989 13.7946 0Z\"\n                fill=\"#8E8E8E\"\n              />\n            </g>\n            <defs>\n              <clipPath id=\"clip0_2_166\">\n                <rect width=\"15\" height=\"15\" fill=\"white\" />\n              </clipPath>\n            </defs>\n          </svg>\n\n          <div>View Code</div>\n        </div>\n        <div>Powered by DapDap & BOS</div>\n      </Power>\n      {state.displayCurrencySelect && (\n        <Widget\n          src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.CurrencySelect\"\n          props={{\n            display: state.displayCurrencySelect,\n            selectedTokenAddress: state.selectedTokenAddress,\n            title: props.title,\n            chainId: props.chainId,\n            explor: props.explor,\n            tokens: dexConfig.tokens,\n            historyTokens: dexConfig.historyTokens,\n            onImport,\n            onClose: () => {\n              State.update({\n                displayCurrencySelect: false,\n              });\n            },\n            onSelect: (currency) => {\n              const updatedParams = {\n                outputCurrencyAmount: \"\",\n                noPair: false,\n                updateInputTokenBalance: true,\n              };\n              if (state.currencySelectType === 0) {\n                updatedParams.inputCurrency = currency;\n                if (currency.address === state.outputCurrency.address)\n                  updatedParams.outputCurrency = null;\n              }\n              if (state.currencySelectType === 1) {\n                updatedParams.outputCurrency = currency;\n                if (currency.address === state.inputCurrency.address) {\n                  updatedParams.inputCurrency = null;\n                  updatedParams.inputCurrencyAmount = \"\";\n                }\n              }\n              State.update(updatedParams);\n              debouncedGetBestTrade();\n            },\n          }}\n        />\n      )}\n\n      {dexConfig.uniType === \"v3\" && (\n        <Widget\n          src={amountOutFn}\n          props={{\n            update: state.loading,\n            routerAddress: dexConfig.routerAddress,\n            inputCurrency: state.inputCurrency,\n            outputCurrency: state.outputCurrency,\n            inputCurrencyAmount: state.inputCurrencyAmount,\n            outputCurrencyAmount: state.outputCurrencyAmount,\n            tradeType: state.tradeType,\n            quoterAddress: dexConfig.quoterAddress,\n            wethAddress: wethToken.address,\n            chainId,\n            loadAmountOut: (data) => {\n              State.update({\n                loading: false,\n                ...data,\n              });\n            },\n          }}\n        />\n      )}\n    </SwapContainer>\n    {state.showSlippageSetting && (\n      <Widget\n        src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.SlippageSetting\"\n        props={{\n          clientX: state.clientX,\n          clientY: state.clientY,\n          slippage,\n          onSetSlippage: onSetSlippage,\n          onClose: () => {\n            State.update({\n              showSlippageSetting: false,\n            });\n          },\n        }}\n      />\n    )}\n    <Widget src=\"dapdapbos.near/widget/Linea.Uniswap.Swap.TokensPrice\" />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Linea.Uniswap.Swap.SwapV2", "fact_widget_deployments_id": "f5899c72e83cf45bac340fb6ee8dbe78", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}