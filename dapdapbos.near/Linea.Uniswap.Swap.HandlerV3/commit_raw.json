{"tx_hash": "BfetpAZEztDJGprPsZFFbCj5piJ41F3QwtiZr1kQQ8oJ", "action_id_social": "q5wLMCHTWQQwR44p5rGYcFKsUA99gvfZyrr9jP8eYwT-0-widget", "block_id": 107998762, "block_timestamp": "2023-12-15T10:30:14.372Z", "signer_id": "dapdapbos.near", "widget_name": "Linea.Uniswap.Swap.HandlerV3", "source_code": "const swapRouterV3Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IV3SwapRouter.ExactInputParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInput\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountMinimum\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" },\n    ],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  routerAddress,\n  wethAddress,\n  account,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrencyAmount,\n  outputCurrency,\n  swapping,\n  onSuccess,\n  onError,\n  chainId,\n  trade,\n} = props;\n\nconst slippage = props.slippage || 0.5;\n\nif (!swapping || !chainId || state.fetching) return \"\";\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst value = expandToken(inputCurrencyAmount, inputCurrency.decimals).toFixed(\n  0\n);\nconst signer = Ethers.provider().getSigner();\n\nconst iface = new ethers.utils.Interface(swapRouterV3Abi);\n\nconst tokenIn =\n  inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\nconst tokenOut =\n  outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\nconst routes = trade.routes || [];\n\nconst calldatas = [];\nconst amountOutMinimum = expandToken(\n  Big(outputCurrencyAmount)\n    .mul(1 - slippage / 100)\n    .toString(),\n  outputCurrency.decimals\n);\nlet _pathTypes = [];\nlet _path = [];\nroutes.forEach((route, i) => {\n  const tokenPath = route.tokenPath || [];\n  route.route.forEach((path, j) => {\n    _pathTypes.push(\"address\");\n    _path.push(tokenPath[j].address);\n    _pathTypes.push(\"uint24\");\n    _path.push(path.fee);\n    if (j === route.route.length - 1) {\n      _pathTypes.push(\"address\");\n      _path.push(tokenPath[j + 1].address);\n    }\n  });\n});\nconsole.log(_path);\ncalldatas.push(\n  iface.encodeFunctionData(\"exactInput\", [\n    {\n      path: ethers.utils.solidityPack(_pathTypes, _path),\n      recipient: outputCurrency.address === \"native\" ? routerAddress : account,\n      amountIn: value,\n      amountOutMinimum: amountOutMinimum.toFixed(0),\n    },\n  ])\n);\n\nlet _ethValue = inputCurrency.address === \"native\" ? value : 0;\n\nconst multicallContract = new ethers.Contract(\n  routerAddress,\n  swapRouterV3Abi,\n  signer\n);\n\nconst options = {\n  value: _ethValue,\n};\n\nif (outputCurrency.address === \"native\") {\n  calldatas.push(iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account]));\n}\nState.update({\n  fetching: true,\n});\nconst multicallit = (gasLimit) => {\n  multicallContract\n    .multicall(Math.ceil(Date.now() / 1000) + 60, calldatas, {\n      ...options,\n      gasLimit: gasLimit || 500000,\n    })\n    .then((res) => {\n      onSuccess(res);\n      setTimeout(() => {\n        State.update({\n          pending: false,\n        });\n      }, 500);\n    })\n    .catch((err) => {\n      console.log(\"call-err\", err);\n      onError(err);\n    });\n};\nmulticallContract.estimateGas\n  .multicall(Math.ceil(Date.now() / 1000) + 60, calldatas, options)\n  .then((gas) => {\n    const gasLimit = Big(gas.toString()).times(1.1).toFixed(0);\n    multicallit(gasLimit);\n  })\n  .catch((err) => {\n    console.log(\"estimate-err\", err);\n    multicallit();\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Linea.Uniswap.Swap.HandlerV3", "fact_widget_deployments_id": "4318c1f4663a4b18be820e36ab7987c1", "inserted_timestamp": "2023-12-15T12:59:20.451Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}