{"tx_hash": "27n8bUJEfP9cV6ez267xs3DBPhBBmdvTcwv8PeamSweR", "action_id_social": "AmNCBXfP1S4xF75Np94C7zijp9RFWwXVR98ZpZSQEZ3d-0-widget", "block_id": 110316406, "block_timestamp": "2024-01-13T16:09:23.428Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Athena.Index", "source_code": "const Wrapper = styled.div`\n  --bg-1: #262836;\n  --bg-2: #373a53;\n  --bg-3: #2e3142;\n  --white: #fff;\n  --purple: #979abe;\n  --dark: #1b1e27;\n\n  --fz-12: 12px;\n  --fz-14: 14px;\n  --fz-16: 16px;\n  --fz-24: 24px;\n\n  --primary: #1aca8a;\n  /* --secondary: #6c757d; */\n\n  color: var(--white);\n\n  input[type=\"number\"]::-webkit-inner-spin-button,\n  input[type=\"number\"]::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  .grid-pool-head {\n    max-width: 1244px;\n    margin: 0 auto 12px;\n    font-size: 14px;\n    color: var(--purple);\n  }\n`;\nconst HeadWrapper = styled.div`\n  /* border-radius: 16px; */\n  max-width: 1244px;\n  margin: 0 auto;\n  color: var(--white);\n  font-size: var(--fz-14);\n  .pool-head {\n    border-radius: 16px;\n    height: 84px;\n    align-items: center;\n    cursor: pointer;\n    background-color: var(--bg-1);\n  }\n  .title-primary {\n    font-size: var(--fz-16);\n    font-weight: 500;\n  }\n  .title-secondary {\n  }\n  .title-sub {\n    font-size: var(--fz-12);\n    color: var(--purple);\n  }\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 40% 12% 12% 12% 24%;\n`;\n\nconst GridItem = styled.div`\n  padding-left: 24px;\n  &.action-item {\n    display: flex;\n    column-gap: 10px;\n    padding-right: 18px;\n    justify-content: center;\n  }\n  &.action-item-head {\n    display: flex;\n    justify-content: center;\n  }\n`;\nconst PoolItem = styled.div`\n  margin-bottom: 10px;\n`;\nconst TabsList = styled(\"Tabs.List\")`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  width: 420px;\n  height: 46px;\n  background-color: var(--bg-1);\n  border-radius: 10px;\n  color: var(--white);\n  padding: 0 5px;\n  margin-bottom: 30px;\n  .tab-head-item {\n    flex: 1;\n    display: flex;\n    height: 36px;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    border-radius: 5px;\n    color: var(--white);\n    cursor: pointer;\n  }\n  .tab-head-item.active {\n    background-color: var(--bg-2);\n  }\n`;\n\n// assets begin\nconst AssetsWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  column-gap: 18px;\n  max-width: 1244px;\n  margin: 0 auto 42px;\n`;\nconst AssetsPanel = styled.div`\n  flex: 1;\n  border-radius: 16px;\n  border: 1px solid #373a53;\n  background: #2e3142;\n  padding: 20px 18px 0;\n  height: 105px;\n  .as-title {\n    color: var(--purple);\n    font-size: var(--fz-16);\n  }\n  .as-amount {\n    color: var(--white);\n    font-size: var(--fz-24);\n    padding-top: 16px;\n  }\n  .as-sub {\n    font-size: var(--fz-14);\n    color: var(--purple);\n  }\n  .as-action {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n// assets end\n\n// support chain\nconst CHAIN_ID = 1088;\n\nconst POOLS = [\n  {\n    poolName: \"Locked ATH\",\n    tokenAddress: \"0xa4ee142e34d0676edc2b760dd0016003d99a4cec\",\n    StakingAddress: \"0xD481eD22a20708839aeB7f1d07E1d01cbc526184\", // Locking\n    poolType: \"Locking\", // Locking MasterChief Staking\n  },\n  {\n    poolName: \"HUM-xHUM\",\n    tokenAddress: \"0x31cfdA26D5841d92333D8F9B3acbd5efEedb39c1\",\n    StakingAddress: \"0x652a63c4df14e29080Ab058d6f151aBa61F86c10\", // Locking\n    poolType: \"MasterChief\", // Locking MasterChief Staking\n  },\n];\nconst TOKENS = {\n  \"0xa4ee142e34d0676edc2b760dd0016003d99a4cec\": {\n    address: \"0xa4ee142e34d0676edc2b760dd0016003d99a4cec\",\n    chainId: CHAIN_ID,\n    name: \"ATH\",\n    symbol: \"ATH\",\n    icon: \"https://www.athenafinance.io/assets/tokens/LATH.svg\",\n    decimals: 18,\n  },\n  \"0x31cfdA26D5841d92333D8F9B3acbd5efEedb39c1\": {\n    address: \"0x31cfdA26D5841d92333D8F9B3acbd5efEedb39c1\",\n    chainId: CHAIN_ID,\n    name: \"vAMM-HUM/xHUM\",\n    symbol: \"vAMM-HUM/xHUM\",\n    icon: \"https://www.athenafinance.io/assets/tokens/HUMxHUM.svg\",\n    decimals: 18,\n  },\n};\nconst RewardsContractABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"maxWithdraw\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"newRewardRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"rewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalAssets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"assets\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"convertToShares\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst RewardPoolDepositWrapper = \"0x0Fec3d212BcC29eF3E505B555D7a7343DF0B7F76\";\nconst PoolContractWrapper = \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\";\n\nconst RewardPoolDepositABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardPoolAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_inputAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_balancerPoolId\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"contract IAsset[]\",\n            name: \"assets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"maxAmountsIn\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IBalancerVault.JoinPoolRequest\",\n        name: \"_request\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"depositSingle\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst PoolContractABI = [\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"poolId\", type: \"bytes32\" }],\n    name: \"getPoolTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n      { internalType: \"uint256[]\", name: \"balances\", type: \"uint256[]\" },\n      {\n        internalType: \"uint256\",\n        name: \"lastChangeBlock\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst LPTokenABI = [\n  {\n    inputs: [],\n    name: \"getActualSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst COINGECKO_IDS = {\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  sDAI: \"savings-xdai\",\n  WBTC: \"wrapped-bitcoin\",\n  WETH: \"weth\",\n  wstETH: \"wrapped-steth\",\n  crvUSD: \"crvusd\",\n  AURA: \"aura-finance\",\n  BAL: \"balancer\",\n  staBAL3: \"balancer-stable-usd\",\n  COW: \"cow-protocol\",\n  stEUR: \"staked-ageur\",\n  EURe: \"monerium-eur-money\",\n  GNO: \"gnosis\",\n};\n\nconst LockingABI = [\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"contract IERC20\",\n      },\n    ],\n    name: \"ATH\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"DENOMINATOR\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"__LockerV2_init_\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_masterchief\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"_maxSlots\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"address\",\n        name: \"_rewarder\",\n        internalType: \"address\",\n      },\n      {\n        type: \"address\",\n        name: \"_stakingToken\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"addNewStrategy\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"_lockTime\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"_rewardPercent\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"_forfeitPercent\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"_instantUnstakePercent\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"bool\",\n        name: \"_isLinear\",\n        internalType: \"bool\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"addToUnlock\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"slotIndex\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"allowance\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"owner\",\n        internalType: \"address\",\n      },\n      {\n        type: \"address\",\n        name: \"spender\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"approve\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"spender\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"balanceOf\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"account\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n    name: \"bribeManager\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"cancelUnlock\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"slotIndex\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"address[]\",\n        name: \"rewardTokens\",\n        internalType: \"address[]\",\n      },\n      {\n        type: \"uint256[]\",\n        name: \"earnedRewards\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    name: \"claim\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"address[]\",\n        name: \"rewardTokens\",\n        internalType: \"address[]\",\n      },\n      {\n        type: \"uint256[]\",\n        name: \"earnedRewards\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    name: \"claimFor\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_for\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint8\",\n        name: \"\",\n        internalType: \"uint8\",\n      },\n    ],\n    name: \"decimals\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"spender\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"subtractedValue\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"deposit\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"_amount\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"depositFor\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_for\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"_amount\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"tuple[]\",\n        name: \"slots\",\n        internalType: \"struct LockerV2.UserUnlocking[]\",\n        components: [\n          {\n            type: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n          },\n          {\n            type: \"uint256\",\n          },\n        ],\n      },\n    ],\n    name: \"getAllUserUnlocking\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_user\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"startTime\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"endTime\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"unlockingStrategy\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"alreadyUnstaked\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"alreadyWithdrawn\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"getUserNthSlot\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_user\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"n\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"rewardPercentage\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"getUserRewardPercentage\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_user\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"getUserSlotLength\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_user\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"getUserTotalDeposit\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_user\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"harvest\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"spender\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"addedValue\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n    name: \"masterchief\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"maxSlot\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"migrated\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"string\",\n        name: \"\",\n        internalType: \"string\",\n      },\n    ],\n    name: \"name\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n    name: \"owner\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"pause\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"paused\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"renounceOwnership\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"contract IBaseRewardPoolLocker\",\n      },\n    ],\n    name: \"rewarder\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"setBribeManager\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"setMaxSlots\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"_maxDeposits\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"setStrategyStatus\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"strategyIndex\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"bool\",\n        name: \"status\",\n        internalType: \"bool\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"setWhitelistForTransfer\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"_for\",\n        internalType: \"address\",\n      },\n      {\n        type: \"bool\",\n        name: \"status\",\n        internalType: \"bool\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"stakeInMasterChief\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n    name: \"stakingToken\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"startUnlock\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"strategyIndex\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"slotIndex\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"string\",\n        name: \"\",\n        internalType: \"string\",\n      },\n    ],\n    name: \"symbol\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"totalLocked\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"totalSupply\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"totalUnlocking\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"transfer\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"recipient\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"transferFrom\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"sender\",\n        internalType: \"address\",\n      },\n      {\n        type: \"address\",\n        name: \"recipient\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"transferOwnership\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"newOwner\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"bool\",\n        name: \"\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"transferWhitelist\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"unlock\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"slotIndex\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"unlockTime\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"forfeitPercent\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"rewardPercent\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"instantUnstakePercent\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"bool\",\n        name: \"isLinear\",\n        internalType: \"bool\",\n      },\n      {\n        type: \"bool\",\n        name: \"isActive\",\n        internalType: \"bool\",\n      },\n    ],\n    name: \"unlockingStrategies\",\n    inputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [],\n    name: \"unpause\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"userUnlocking\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [\n      {\n        type: \"uint256\",\n        name: \"startTime\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"endTime\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"unlockingStrategy\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"alreadyUnstaked\",\n        internalType: \"uint256\",\n      },\n      {\n        type: \"uint256\",\n        name: \"alreadyWithdrawn\",\n        internalType: \"uint256\",\n      },\n    ],\n    name: \"userUnlockings\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"\",\n        internalType: \"address\",\n      },\n      {\n        type: \"uint256\",\n        name: \"\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"event\",\n    name: \"Approval\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"owner\",\n        indexed: true,\n      },\n      {\n        type: \"address\",\n        name: \"spender\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"value\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Claim\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"user\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"timestamp\",\n        indexed: true,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"NewDeposit\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"user\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"timestamp\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"OwnershipTransferred\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"previousOwner\",\n        indexed: true,\n      },\n      {\n        type: \"address\",\n        name: \"newOwner\",\n        indexed: true,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Paused\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"account\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"ResetSlot\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"user\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"timestamp\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        indexed: false,\n      },\n      {\n        type: \"uint256\",\n        name: \"slotIndex\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Transfer\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"from\",\n        indexed: true,\n      },\n      {\n        type: \"address\",\n        name: \"to\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"value\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Unlock\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"user\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"timestamp\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"UnlockStarts\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"user\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"timestamp\",\n        indexed: true,\n      },\n      {\n        type: \"uint256\",\n        name: \"amount\",\n        indexed: false,\n      },\n      {\n        type: \"uint256\",\n        name: \"strategyIndex\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Unpaused\",\n    inputs: [\n      {\n        type: \"address\",\n        name: \"account\",\n        indexed: false,\n      },\n    ],\n    anonymous: false,\n  },\n];\n\nconst initList = POOLS.map((item) => ({ ...item, stakedAmount: 0, reward: 0 }));\nconst { toast } = props;\nState.init({\n  currentTab: \"TAB_POOL\",\n  chainId: \"\", // current chain\n  account: \"\", // current wallet address\n  poolsList: initList, //\n  slotLength: 0,\n  myPoolsList: [],\n  totalDepositAmount: 0,\n  totalRewardsAmount: 0,\n  fresh: 1,\n  isClaiming: false,\n  isAllClaiming: false,\n  tokenPrices: \"\",\n  TVLS: [],\n});\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nfunction initPoolList() {\n  for (let i = 0; i < state.poolsList.length; i++) {\n    const item = state.poolsList[i];\n\n    if (i === 0) {\n      const temp = [...state.poolsList];\n      // Locking\n      getUserTotalDeposit(item).then((total) => {\n        temp[0].totalDeposit = total;\n        State.update({\n          poolsList: temp,\n          fresh: state.fresh + 1,\n        });\n      });\n      getUserUnlocking(item).then((unlocking) => {\n        temp[0].unlocking = unlocking;\n        State.update({\n          poolsList: temp,\n          fresh: state.fresh + 1,\n        });\n      });\n      getUserSlotLength(item).then((slotLength) => {\n        State.update({\n          slotLength,\n        });\n      });\n      getAllUserUnlocking(item);\n      // userUnlockings(item);\n      // getUserRewardPercentage(item);\n    }\n  }\n}\n\nfunction fetchTokenPrice(tokenIds) {\n  return asyncFetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=${tokenIds}&vs_currencies=usd`\n  ).then((res) => {\n    if (res.ok) {\n      return res.body;\n    }\n    return 0;\n  });\n}\n\nfunction getTokenPrices() {\n  const ids = Object.values(COINGECKO_IDS).join();\n  fetchTokenPrice(ids)\n    .then((res) => {\n      State.update({\n        tokenPrices: res,\n      });\n    })\n    .catch((error) => {\n      console.error(\"getTokenPrices_error: \", error);\n    });\n}\n\nfunction getUserUnlocking(pool) {\n  const LockingContract = new ethers.Contract(\n    pool.StakingAddress,\n    LockingABI,\n    Ethers.provider()\n  );\n\n  return LockingContract.userUnlocking(account)\n    .then((res) => {\n      console.log(\n        \"userUnlocking: \",\n        res,\n        res.toString(),\n        Big(ethers.utils.formatUnits(res)).toFixed(2)\n      );\n      return Big(ethers.utils.formatUnits(res)).toFixed(2);\n    })\n    .catch((err) => {\n      console.log(\"getUserUnlocking_error:\", err);\n    });\n}\n\nfunction getUserSlotLength(pool) {\n  const LockingContract = new ethers.Contract(\n    pool.StakingAddress,\n    LockingABI,\n    Ethers.provider()\n  );\n\n  return LockingContract.getUserSlotLength(account)\n    .then((res) => {\n      return res.toString();\n    })\n    .catch((err) => {\n      console.log(\"getUserSlotLength_error:\", err);\n    });\n}\n\nfunction getAllUserUnlocking(pool) {\n  const LockingContract = new ethers.Contract(\n    pool.StakingAddress,\n    LockingABI,\n    Ethers.provider()\n  );\n\n  return LockingContract.getAllUserUnlocking(account)\n    .then((res) => {\n      console.log(\n        \"getAllUserUnlocking: \",\n        res\n        // res.toString(),\n        // Big(ethers.utils.formatUnits(res)).toFixed(2)\n      );\n      // return Big(ethers.utils.formatUnits(res)).toFixed(2);\n    })\n    .catch((err) => {\n      console.log(\"getAllUserUnlocking_error:\", err);\n    });\n}\n\n// function userUnlockings(pool) {\n//   console.log(1111111, Ethers.provider());\n//   console.log(1111111, Ethers);\n//   const LockingContract = new ethers.Contract(\n//     pool.StakingAddress,\n//     LockingABI,\n//     Ethers.provider()\n//   );\n\n//   return LockingContract.userUnlockings(account, 0)\n//     .then((res) => {\n//       console.log(\n//         \"22222: \",\n//         res,\n//         res.toString(),\n//         Big(ethers.utils.formatUnits(res)).toFixed(2)\n//       );\n//       return Big(ethers.utils.formatUnits(res)).toFixed(2);\n//     })\n//     .catch((err) => {\n//       console.log(\"3333:\", err);\n//     });\n// }\n\nfunction getUserTotalDeposit(pool) {\n  const LockingContract = new ethers.Contract(\n    pool.StakingAddress,\n    LockingABI,\n    Ethers.provider()\n  );\n\n  return LockingContract.getUserTotalDeposit(account)\n    .then((res) => {\n      console.log(\n        \"getUserTotalDeposit: \",\n        res,\n        res.toString(),\n        Big(ethers.utils.formatUnits(res)).toFixed(2)\n      );\n      return Big(ethers.utils.formatUnits(res)).toFixed(2);\n    })\n    .catch((err) => {\n      console.log(\"getUserTotalDeposit_error:\", err);\n    });\n}\n\nfunction getUserRewardPercentage(pool) {\n  const LockingContract = new ethers.Contract(\n    pool.StakingAddress,\n    LockingABI,\n    Ethers.provider()\n  );\n\n  return LockingContract.getUserRewardPercentage(account)\n    .then((res) => {\n      console.log(\n        \"getUserRewardPercentage: \",\n        res,\n        res.toString()\n        // Big(ethers.utils.formatUnits(res)).toFixed(2)\n      );\n      // return Big(ethers.utils.formatUnits(res)).toFixed(2);\n    })\n    .catch((err) => {\n      console.log(\"getUserRewardPercentage_error:\", err);\n    });\n}\n\nuseEffect(() => {\n  State.update({ account });\n  if (account) {\n    // getUserTotalDeposit(\"0xD481eD22a20708839aeB7f1d07E1d01cbc526184\");\n    initPoolList();\n  }\n}, [account]);\n\nuseEffect(() => {\n  getTokenPrices();\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    })\n    .catch(() => {});\n}, []);\n\nuseEffect(() => {\n  console.log(\"state:\", state.poolsList);\n}, [state.poolsList]);\n\nconst handleChangeTabs = (value) => {\n  State.update({\n    currentTab: value,\n  });\n};\n\nconst switchChain = () => {\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: `0x${Number(CHAIN_ID).toString(16)}` },\n  ]);\n};\n\n// const handleClaim = (address) => {\n//   State.update({\n//     isClaiming: true,\n//   });\n//   const ClaimRewardsContract = new ethers.Contract(\n//     address,\n//     [\n//       {\n//         inputs: [\n//           {\n//             internalType: \"address\",\n//             name: \"_account\",\n//             type: \"address\",\n//           },\n//           {\n//             internalType: \"bool\",\n//             name: \"_claimExtras\",\n//             type: \"bool\",\n//           },\n//         ],\n//         name: \"getReward\",\n//         outputs: [\n//           {\n//             internalType: \"bool\",\n//             name: \"\",\n//             type: \"bool\",\n//           },\n//         ],\n//         stateMutability: \"nonpayable\",\n//         type: \"function\",\n//       },\n//     ],\n//     Ethers.provider().getSigner()\n//   );\n\n//   return ClaimRewardsContract.getReward(account, true)\n//     .then((tx) => {\n//       console.log(\"tx: \", tx);\n//       tx.wait()\n//         .then((res) => {\n//           const { status, transactionHash } = res;\n//           console.info(\"tx_res: \", res);\n//           if (status === 1) {\n//             toast.success?.({\n//               title: \"Transaction Successful!\",\n//               text: `transactionHash ${transactionHash}`,\n//             });\n//           } else {\n//             toast.fail?.({\n//               title: \"Transaction Failed!\",\n//               text: `transactionHash ${transactionHash}`,\n//             });\n//           }\n//         })\n//         .finally(() => {\n//           State.update({\n//             isClaiming: false,\n//           });\n//         });\n//     })\n//     .catch((err) => {\n//       console.log(\"getPoolTokens_error:\", err);\n//       State.update({\n//         isClaiming: false,\n//       });\n//     });\n// };\n\n// const handleClaimAll = () => {\n//   State.update({\n//     isAllClaiming: true,\n//   });\n//   // let getClaimAllArray = [];\n\n//   // for (let i = 0; i < state.myPoolsList.length; i++) {\n//   //   const addr = state.myPoolsList[i].Rewards_contract_address;\n//   //   getClaimAllArray.push(handleClaim(addr));\n//   // }\n//   // Promise.allSettled(getClaimAllArray)\n//   //   .then((res) => {\n//   //     console.info(\"getClaimAllArray: \", res);\n//   //   })\n//   //   .catch((error) => {\n//   //     console.info(\"getClaimAllArray: \", error);\n//   //   })\n//   //   .finally(() => {\n//   //     State.update({\n//   //       isAllClaiming: false,\n//   //     });\n//   //   });\n// };\n\nreturn (\n  <Wrapper>\n    <Tabs.Root value={state.currentTab} onValueChange={handleChangeTabs}>\n      <TabsList>\n        <Tabs.Trigger value=\"TAB_POOL\" asChild>\n          <div\n            className={`tab-head-item ${\n              state.currentTab === \"TAB_POOL\" ? \"active\" : \"\"\n            }`}\n          >\n            All Pools\n          </div>\n        </Tabs.Trigger>\n        <Tabs.Trigger value=\"TAB_ASSETS\" asChild>\n          <div\n            className={`tab-head-item ${\n              state.currentTab === \"TAB_ASSETS\" ? \"active\" : \"\"\n            }`}\n          >\n            Your Assets\n          </div>\n        </Tabs.Trigger>\n      </TabsList>\n      <Tabs.Content value=\"TAB_POOL\">\n        <GridContainer className=\"grid-pool-head\">\n          <GridItem>Pool</GridItem>\n          <GridItem>APR</GridItem>\n          <GridItem>TVL</GridItem>\n          <GridItem>You Staked</GridItem>\n          <GridItem>Your rewards</GridItem>\n        </GridContainer>\n        <Accordion.Root type=\"single\" collapsible>\n          {state.poolsList.map((item) => (\n            <PoolItem>\n              <Widget\n                src=\"dapdapbos.near/widget/Staking.Athena.Pool\"\n                props={{\n                  ...props,\n                  data: item,\n                  chainId: state.chainId,\n                  account: state.account,\n                  TOKENS,\n                  CHAIN_ID,\n                  LockingABI,\n                  slotLength: state.slotLength,\n                  //\n                  RewardPoolDepositWrapper,\n                  RewardPoolDepositABI,\n                  switchChain,\n                  // tokenIcons: getPoolIcon(item.tokenAssets),\n                  TVLS: state.TVLS,\n                }}\n                key={item.poolName}\n              />\n            </PoolItem>\n          ))}\n        </Accordion.Root>\n      </Tabs.Content>\n      <Tabs.Content value=\"TAB_ASSETS\">\n        <AssetsWrapper>\n          <AssetsPanel>\n            <div className=\"as-title\">You deposit</div>\n            <div className=\"as-amount\">${state.totalDepositAmount}</div>\n          </AssetsPanel>\n          <AssetsPanel>\n            <div className=\"as-title\">Claimable Rewards</div>\n            <div className=\"as-action\">\n              <div className=\"as-amount\">\n                ${state.totalRewardsAmount}\n                <span className=\"as-sub\"></span>\n              </div>\n              <Widget\n                src=\"dapdapbos.near/widget/UI.Button\"\n                props={{\n                  text: \"Claim All\",\n                  type: \"green\",\n                  style: { width: 118 },\n                  loading: state.isAllClaiming,\n                  disabled: !state.myPoolsList.length,\n                  onClick: handleClaimAll,\n                }}\n              />\n            </div>\n          </AssetsPanel>\n        </AssetsWrapper>\n        <GridContainer className=\"grid-pool-head\">\n          <GridItem>Pool</GridItem>\n          <GridItem>APR</GridItem>\n          <GridItem>You Staked</GridItem>\n          <GridItem>Your rewards</GridItem>\n          <GridItem className=\"action-item-head\">Action</GridItem>\n        </GridContainer>\n        <HeadWrapper>\n          {state.myPoolsList.length\n            ? state.myPoolsList?.map((item, index) => (\n                <PoolItem key={index}>\n                  <GridContainer className=\"pool-head\">\n                    <GridItem>\n                      <div className=\"title-primary\">\n                        <Widget\n                          src=\"dapdapbos.near/widget/UI.Avatar\"\n                          props={{ src: TOKENS[tokenAddress].icon }}\n                        />\n\n                        <span style={{ marginLeft: 8 }}>{item.poolName}</span>\n                      </div>\n                    </GridItem>\n                    <GridItem>\n                      <div className=\"title-secondary\">%</div>\n                      <div className=\"title-sub\">proj. %</div>\n                    </GridItem>\n                    <GridItem>\n                      <div className=\"title-secondary\">\n                        ${item.stakedAmount}\n                      </div>\n                    </GridItem>\n                    <GridItem>\n                      <div className=\"title-secondary\">${item.reward}</div>\n                      <div className=\"title-sub\"></div>\n                    </GridItem>\n                    <GridItem className=\"action-item\">\n                      <Widget\n                        src=\"dapdapbos.near/widget/UI.Button\"\n                        props={{\n                          text: \"Claim\",\n                          type: \"green\",\n                          style: { width: 118 },\n                          loading: state.isClaiming,\n                          onClick: () => {\n                            // handleClaim(item.Rewards_contract_address);\n                          },\n                        }}\n                      />\n                    </GridItem>\n                  </GridContainer>\n                </PoolItem>\n              ))\n            : null}\n        </HeadWrapper>\n      </Tabs.Content>\n    </Tabs.Root>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Athena.Index", "fact_widget_deployments_id": "35d1c1cf3d8e4c492dc4b0148ea97aa2", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}