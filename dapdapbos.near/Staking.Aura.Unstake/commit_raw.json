{"tx_hash": "C2SchndhcvdEhu6d2Ua5yeEMNF1PEtLiweYVGT6FDbNY", "action_id_social": "7XeV6UFamKDphyKvgcYT7H32wJxcPTbsj7jyg9SBguLi-0-widget", "block_id": 114673017, "block_timestamp": "2024-03-14T05:06:45.796Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Aura.Unstake", "source_code": "// switch begin\nconst SwitchRoot = styled(\"Switch.Root\")`\n  all: unset;\n  display: block;\n  width: 42px;\n  height: 24px;\n  background-color: #232534;\n  border-radius: 9999px;\n  position: relative;\n  box-shadow: 0 2px 10px #232534;\n  border: 1px solid #373a53;\n  &[data-state=\"checked\"] {\n    background-color: #783ae3;\n  }\n`;\n\nconst SwitchThumb = styled(\"Switch.Thumb\")`\n  all: unset;\n  display: block;\n  width: 18px;\n  height: 18px;\n  background-color: white;\n  border-radius: 9999px;\n  box-shadow: 0 2px 2px var(--blackA7);\n  transition: transform 100ms;\n  transform: translateX(2px);\n  will-change: transform;\n  border: 1px solid #373a53;\n  &[data-state=\"checked\"] {\n    transform: translateX(19px);\n  }\n`;\n// switch end\n\nconst Wrap = styled.div`\n  width: 510px;\n  margin: 0 auto;\n  .bos-input-number {\n    background-color: var(--dark);\n    color: var(--white);\n    border: none;\n    border-radius: 10px !important;\n  }\n  .input-group {\n    column-gap: 5px;\n  }\n  .avatars {\n    margin-right: 20px;\n  }\n  .input-group-append {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 138px;\n    height: 34px;\n    background: #2e3142;\n    border: 1px solid #d0d5dd;\n    box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);\n    border-radius: 10px !important;\n    color: white;\n    font-size: 14px;\n  }\n`;\n\nconst AmountList = styled.div`\n  display: flex;\n  font-size: var(--fz12);\n  color: var(--purple);\n  justify-content: space-between;\n  padding: 10px 0 16px;\n  .amount-left {\n  }\n  .amount-right {\n  }\n  .amount-white {\n    color: var(--white);\n    text-decoration: underline;\n  }\n`;\nconst StakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 14px;\n`;\nconst UnStakeBtnWrap = styled.div`\n  display: flex;\n  column-gap: 22px;\n  align-items: center;\n  .switch-wrap {\n    display: flex;\n    align-items: center;\n    column-gap: 8px;\n    color: var(--purple);\n  }\n`;\n\nconst ChainBtnWrap = styled.div`\n  margin-top: 16px;\n  display: flex;\n`;\n\nconst { data, account, TOKENS, switchChain, toast, addAction } = props;\nconst {\n  poolName,\n  tokenAssets,\n  stakedAmount,\n  reward,\n  Rewards_contract_address,\n  Rewards_depositor_contract_address,\n  LP_token_address,\n} = data;\nState.init({\n  isClaimRewards: false,\n  inputValue: \"\",\n  canUnstake: false,\n  unstaking: false,\n});\n\nconst handleSwitch = (isChecked) => {\n  State.update({\n    isClaimRewards: isChecked,\n  });\n};\n\nconst handleInputChange = (e) => {\n  const { value } = e.target;\n  if (isNaN(Number(value))) return;\n  const isZero = Big(value || 0).eq(0);\n  if (isZero) {\n    State.update({\n      inputValue: value,\n      canUnstake: false,\n    });\n    return;\n  }\n  const obj = {};\n  obj.inputValue = value;\n\n  if (Big(value || 0).lt(stakedAmount || 0)) {\n    obj.canUnstake = true;\n  } else {\n    obj.canUnstake = false;\n  }\n  State.update({\n    ...obj,\n  });\n};\n\nconst handleUnStake = () => {\n  State.update({\n    unstaking: true,\n  });\n  const UnstakeContract = new ethers.Contract(\n    Rewards_contract_address,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"claim\",\n            type: \"bool\",\n          },\n        ],\n        name: \"withdrawAndUnwrap\",\n        outputs: [\n          {\n            internalType: \"bool\",\n            name: \"\",\n            type: \"bool\",\n          },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  UnstakeContract.withdrawAndUnwrap(\n    ethers.utils.parseUnits(state.inputValue),\n    state.isClaimRewards\n  )\n    .then((tx) => {\n      console.log(\"tx: \", tx);\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"tx_res: \", res);\n          if (status === 1) {\n            toast.success?.({\n              title: \"Transaction Successful!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n            addAction?.({\n              type: \"Staking\",\n              action: \"Unstake\",\n              token: { symbol: \"BPT\" },\n              amount: state.inputValue,\n              template: \"Aura Finance\",\n              add: false,\n              status,\n              transactionHash,\n            });\n          } else {\n            toast.fail?.({\n              title: \"Transaction Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            unstaking: false,\n          });\n        });\n    })\n    .catch((err) => {\n      if (!err?.message.includes(\"user rejected transaction\")) {\n        toast.fail?.({\n          title: \"Transaction Failed\",\n          text: err?.data?.message || err?.message,\n        });\n      } else {\n        toast.fail?.({\n          title: \"Transaction Failed\",\n          text: `User rejected the request. Details: \n          MetaMask Tx Signature: User denied transaction signature. `,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({\n        unstaking: false,\n      });\n    });\n};\n\nconst renderPoolIcon = () => {\n  if (tokenAssets) {\n    return tokenAssets.map((addr, index) => {\n      if (TOKENS[addr]) {\n        return (\n          <span key={index} style={{ marginRight: -12 }}>\n            <Widget\n              src=\"dapdapbos.near/widget/UI.Avatar\"\n              props={{ src: TOKENS[addr].icon }}\n            />\n          </span>\n        );\n      }\n      return null;\n    });\n  }\n};\nfunction fillBalance() {\n  State.update({\n    inputValue: stakedAmount,\n  });\n}\n\nreturn (\n  <Wrap>\n    <div className=\"input-group\">\n      <input\n        value={state.inputValue}\n        className=\"form-control bos-input-number\"\n        placeholder=\"0.0\"\n        onChange={handleInputChange}\n      />\n      <div className=\"input-group-append\">\n        <span className=\"avatars\">{renderPoolIcon()}</span>\n        BPT\n      </div>\n    </div>\n\n    <AmountList>\n      {/* <span>${stakedAmount}</span> */}\n      <span></span>\n      <span>\n        You Staked:{\" \"}\n        <span className=\"amount-white\" onClick={fillBalance}>\n          {stakedAmount}\n        </span>{\" \"}\n        BPT\n      </span>\n    </AmountList>\n    <UnStakeBtnWrap>\n      <div className=\"switch-wrap\">\n        <SwitchRoot\n          checked={state.isClaimRewards}\n          onCheckedChange={handleSwitch}\n        >\n          <SwitchThumb />\n        </SwitchRoot>\n        <span>Claim Rewards</span>\n      </div>\n      <Widget\n        src=\"dapdapbos.near/widget/UI.Button\"\n        props={{\n          text: \"Unstake\",\n          type: \"primary\",\n          style: { flex: 1 },\n          loading: state.unstaking,\n          disabled: !state.canUnstake,\n          onClick: handleUnStake,\n        }}\n      />\n    </UnStakeBtnWrap>\n  </Wrap>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Aura.Unstake", "fact_widget_deployments_id": "dec7f47e7935d9bc87fcbce14cdcb2be", "inserted_timestamp": "2024-03-14T06:26:16.405Z", "modified_timestamp": "2024-03-14T06:26:16.405Z", "__row_index": 9}