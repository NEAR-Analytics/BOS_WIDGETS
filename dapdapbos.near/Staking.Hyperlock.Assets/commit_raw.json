{"tx_hash": "EwuUX7nwQ46dn1jZWsbZnEqriB2L8FajqzdRxkpw7hXx", "action_id_social": "FrdiK8GXfkxtyFppidbgZiHxZbbsR7UzXia83sngr3Ac-0-widget", "block_id": 118416552, "block_timestamp": "2024-05-07T06:02:15.259Z", "signer_id": "dapdapbos.near", "widget_name": "Staking.Hyperlock.Assets", "source_code": "const StyledContainer = styled.div`\n  width: 1060px;\n  margin: 20px auto 0px;\n`;\n\nconst StyledHeader = styled.div`\n  border-bottom: 1px solid #373a53;\n  padding: 20px 0px 20px 15px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StyledHeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 188px;\n  font-family: Gantari;\n  flex-grow: 1;\n`;\n\nconst StyledLabel = styled.div`\n  color: #fff;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n`;\n\nconst StyledValue = styled.div`\n  color: var(--primary);\n  font-size: 26px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`;\n\nconst Empty = styled.div`\n  padding-top: 90px;\n  text-align: center;\n  width: 100%;\n  color: #979abe;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  .link {\n    margin-top: 11px;\n  }\n`;\nconst TabsList = styled(\"Tabs.List\")`\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  width: 234px;\n  height: 46px;\n  background-color: var(--bg-1);\n  border-radius: 10px;\n  color: var(--white);\n  padding: 0 5px;\n  border: 1px solid #262836;\n  .tab-head-item {\n    flex: 1;\n    display: flex;\n    height: 36px;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    border-radius: 5px;\n    color: var(--white);\n    cursor: pointer;\n  }\n  .tab-head-item.active {\n    background-color: var(--bg-2);\n  }\n`;\nconst Tokens = styled.div`\n  padding-top: 28px;\n  display: flex;\n  gap: 17px;\n  flex-wrap: wrap;\n`;\n\nState.init({\n  currentTab: \"IN_WALLET\",\n});\n\nconst { pools, handler, fees, dappLink, onSuccess } = props;\n\nconst unstaked = props.unstaked || [];\nconst staked = props.staked || [];\nlet totalDeposit = Big(0);\nlet totalFees = Big(0);\n\nuseEffect(() => {\n  if (staked.length === 0) {\n    State.update({\n      totalFees: 0,\n      totalDeposit: 0,\n    });\n  }\n}, [staked]);\n\nreturn (\n  <StyledContainer>\n    <Tabs.Root\n      value={state.currentTab}\n      onValueChange={(value) => {\n        State.update({\n          currentTab: value,\n        });\n      }}\n    >\n      <StyledHeader>\n        <StyledHeaderLeft>\n          <div>\n            <StyledLabel>You Deposit</StyledLabel>\n            <StyledValue>\n              <Widget\n                src=\"bluebiu.near/widget/Avalanche.Lending.Total\"\n                props={{\n                  total: state.totalDeposit,\n                  digit: 2,\n                  unit: \"$\",\n                }}\n              />\n            </StyledValue>\n          </div>\n          <div>\n            <StyledLabel>Unclaimed Fees</StyledLabel>\n            <StyledValue>\n              <Widget\n                src=\"bluebiu.near/widget/Avalanche.Lending.Total\"\n                props={{\n                  total: state.totalFees,\n                  digit: 2,\n                  unit: \"$\",\n                }}\n              />\n            </StyledValue>\n          </div>\n        </StyledHeaderLeft>\n\n        <TabsList>\n          <Tabs.Trigger value=\"IN_WALLET\" asChild>\n            <div\n              className={`tab-head-item ${\n                state.currentTab === \"IN_WALLET\" ? \"active\" : \"\"\n              }`}\n            >\n              In Wallet\n            </div>\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"DEPOSITED\" asChild>\n            <div\n              className={`tab-head-item ${\n                state.currentTab === \"DEPOSITED\" ? \"active\" : \"\"\n              }`}\n            >\n              Deposited\n            </div>\n          </Tabs.Trigger>\n        </TabsList>\n      </StyledHeader>\n      <Tabs.Content value=\"IN_WALLET\">\n        <Tokens>\n          {unstaked\n            .filter((item) => pools[item.pool.id])\n            .map((item) => {\n              const pool = pools[item.pool.id];\n              const _token0 = Big(\n                ethers.utils.formatUnits(\n                  item.token0Amount || 0,\n                  item.token0.decimals\n                )\n              );\n              const _token1 = Big(\n                ethers.utils.formatUnits(\n                  item.token1Amount || 0,\n                  item.token1.decimals\n                )\n              );\n              return (\n                <Widget\n                  key={item.id}\n                  src=\"dapdapbos.near/widget/Staking.Hyperlock.TokenCard\"\n                  props={{\n                    from: \"in-wallet\",\n                    name: pool.name,\n                    amount0: _token0,\n                    amount1: _token1,\n                    price0: pool.token0.price,\n                    price1: pool.token1.price,\n                    token0: pool.token0,\n                    token1: pool.token1,\n                    id: item.id,\n                    fee: pool.fee,\n                    active: false,\n                    depositing: state[`deposit-${item.id}`],\n                    onDeposit: () => {\n                      State.update({\n                        [`deposit-${item.id}`]: true,\n                      });\n                      handler({\n                        pool: {\n                          id: item.id,\n                          name: pool.name,\n                          amount0: _token0.toString(),\n                          amount1: _token1.toString(),\n                          token0: pool.token0,\n                          token1: pool.token1,\n                          price0: pool.token0.price,\n                          price1: pool.token1.price,\n                        },\n                        method: \"safeTransferFrom\",\n                        onSuccess: () => {\n                          State.update({\n                            [`deposit-${item.id}`]: false,\n                          });\n                          onSuccess();\n                        },\n                        onError: () => {\n                          State.update({\n                            [`deposit-${item.id}`]: false,\n                          });\n                        },\n                      });\n                    },\n                  }}\n                />\n              );\n            })}\n        </Tokens>\n      </Tabs.Content>\n      <Tabs.Content value=\"DEPOSITED\">\n        <Tokens>\n          {staked\n            .filter((item) => pools[item.pool.id])\n            .map((item, i) => {\n              const pool = pools[item.pool.id];\n              const _token0 = Big(\n                ethers.utils.formatUnits(\n                  item.token0Amount || 0,\n                  item.token0.decimals\n                )\n              );\n              const _token1 = Big(\n                ethers.utils.formatUnits(\n                  item.token1Amount || 0,\n                  item.token1.decimals\n                )\n              );\n\n              totalDeposit = totalDeposit\n                .add(_token0.mul(pool.token0.price || 0))\n                .add(_token1.mul(pool.token1.price || 0));\n\n              const _fee0 = Big(\n                ethers.utils.formatUnits(\n                  fees[item.id].token0 || 0,\n                  pool.token0.decimals\n                )\n              );\n              const _fee1 = Big(\n                ethers.utils.formatUnits(\n                  fees[item.id].token1 || 0,\n                  pool.token1.decimals\n                )\n              );\n\n              totalFees = totalFees\n                .add(_fee0.mul(pool.token0.price || 0))\n                .add(_fee1.mul(pool.token1.price || 0));\n\n              if (i === staked.length - 1) {\n                State.update({\n                  totalDeposit,\n                  totalFees,\n                });\n              }\n              return (\n                <Widget\n                  key={item.id}\n                  src=\"dapdapbos.near/widget/Staking.Hyperlock.TokenCard\"\n                  props={{\n                    from: \"deposited\",\n                    name: pool.name,\n                    amount0: _token0,\n                    amount1: _token1,\n                    price0: pool.token0.price,\n                    price1: pool.token1.price,\n                    token0: pool.token0,\n                    token1: pool.token1,\n                    id: item.id,\n                    fee: pool.fee,\n                    active: false,\n                    claiming: state[`claim-${item.id}`],\n                    withdrawing: state[`withdraw-${item.id}`],\n                    feeAmount0: _fee0,\n                    feeAmount1: _fee1,\n                    onClaim: () => {\n                      State.update({\n                        [`claim-${item.id}`]: true,\n                      });\n                      handler({\n                        pool: {\n                          id: item.id,\n                          name: pool.name,\n                          amount0: _token0.toString(),\n                          amount1: _token1.toString(),\n                          token0: pool.token0,\n                          token1: pool.token1,\n                          price0: pool.token0.price,\n                          price1: pool.token1.price,\n                        },\n                        method: \"collect\",\n                        onSuccess: () => {\n                          State.update({\n                            [`claim-${item.id}`]: false,\n                          });\n                          onSuccess();\n                        },\n                        onError: () => {\n                          State.update({\n                            [`claim-${item.id}`]: false,\n                          });\n                        },\n                      });\n                    },\n                    onWithdraw: () => {\n                      State.update({\n                        [`withdraw-${item.id}`]: true,\n                      });\n                      handler({\n                        pool: {\n                          id: item.id,\n                          name: pool.name,\n                          amount0: _token0.toString(),\n                          amount1: _token1.toString(),\n                          token0: pool.token0,\n                          token1: pool.token1,\n                          price0: pool.token0.price,\n                          price1: pool.token1.price,\n                        },\n                        method: \"withdraw\",\n                        onSuccess: () => {\n                          State.update({\n                            [`withdraw-${item.id}`]: false,\n                          });\n                          onSuccess();\n                        },\n                        onError: () => {\n                          State.update({\n                            [`withdraw-${item.id}`]: false,\n                          });\n                        },\n                      });\n                    },\n                  }}\n                />\n              );\n            })}\n        </Tokens>\n      </Tabs.Content>\n    </Tabs.Root>\n    {((state.currentTab === \"IN_WALLET\" && !unstaked.length) ||\n      (state.currentTab === \"DEPOSITED\" && !staked.length)) && (\n      <Empty>\n        <div>No positions were found</div>\n        <div className=\"link\">\n          <a className=\"link-text\" href={dappLink} target=\"_blank\">\n            Create new\u00a0position on Thruster\n          </a>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"5\"\n            height=\"8\"\n            viewBox=\"0 0 5 8\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1L4 4L1 7\"\n              stroke=\"currentColor\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n      </Empty>\n    )}\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Staking.Hyperlock.Assets", "fact_widget_deployments_id": "a602dbc073a4f02f2c8448ef6c4132c7", "inserted_timestamp": "2024-05-07T07:38:38.711Z", "modified_timestamp": "2024-05-07T07:38:38.711Z", "__row_index": 1}