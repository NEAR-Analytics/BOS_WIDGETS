{"tx_hash": "9vB4KoTByd7S6DK6hC2uCrmEMozA1D8yc5RnLviU74Uu", "action_id_social": "J2zXhntiYz3psGMbAG7FhN16aXWpSLc2wVJhem44Q1m5-0-widget", "block_id": 104547267, "block_timestamp": "2023-10-30T15:52:58.953Z", "signer_id": "dapdapbos.near", "widget_name": "Swap.SwapConnector", "source_code": "const account = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst {\n  chainId,\n  chainName,\n  displayChainName,\n  dexs,\n  defalutDex,\n  connectProps,\n  ...restProps\n} = props;\n\nconst {\n  name,\n  CHAIN_LIST,\n  DEFAULT_CHAIN_ID,\n  dappConfig,\n  curChainId,\n  chains,\n  dappSrc,\n} = props;\n\nconst chainIdNotSupport = !CHAIN_LIST.find(\n  (chain) => chain.chainId === curChainId\n);\n\nconst CONNECT_PROPS = {\n  ...connectProps,\n  chainId,\n  chainName,\n};\n// if (!account) {\n//   return (\n//     <Widget\n//       src=\"dapdapbos.near/widget/Swap.ConnectButton\"\n//       props={{\n//         ...CONNECT_PROPS,\n//         isWrongNetwork: false,\n//       }}\n//     />\n//   );\n// }\nconst DEXS = Object.values(dexs || {});\n\nState.init({\n  chainId: -1,\n  selectedDex: defalutDex,\n});\n\nif (account) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    })\n    .catch(() => {});\n}\n\n// if (state.chainId !== chainId) {\n//   return (\n//     <Widget\n//       src=\"dapdapbos.near/widget/Swap.ConnectButton\"\n//       props={{\n//         ...CONNECT_PROPS,\n//         isWrongNetwork: true,\n//       }}\n//     />\n//   );\n// }\n\nconst Dex = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 50px;\n  @media (max-width: 900px) {\n    padding-top: 0px;\n    flex-direction: column;\n  }\n`;\nconst Sider = styled.div`\n  margin-right: 10px;\n`;\nconst Title = styled.div`\n  color: var(--text-color);\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-left: 30px;\n  padding-bottom: 10px;\n  @media (max-width: 900px) {\n    padding-left: 0px;\n  }\n`;\nconst List = styled.div`\n  width: 250px;\n  border-radius: 16px;\n  border: 1px solid var(--border-color);\n  padding: 10px;\n  background-color: #181a27;\n  @media (max-width: 900px) {\n    width: 100%;\n    display: flex;\n    flex-wrap: nowrap;\n    background-color: transparent;\n    border: none;\n    border-radius: 0px;\n    overflow-x: auto;\n    padding-left: 0px;\n  }\n`;\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: transparent;\n  transition: 0.5s;\n  color: rgba(255, 255, 255, 0.5);\n  &:hover {\n    background-color: var(--dex-hover-bg-color);\n  }\n  &.active {\n    color: var(--dex-active-text-color);\n    background-color: var(--button-color);\n  }\n  @media (max-width: 900px) {\n    margin-left: 10px;\n    height: 42px;\n    padding: 5px 10px;\n    border-radius: 10px;\n    &:first-child {\n      margin-left: 0px;\n    }\n  }\n`;\n\nconst IconWrapper = styled.div`\n  width: 30px;\n  height: 30px;\n  border: 1px solid var(--button-color);\n  border-radius: 10px;\n  margin-right: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n  background-color: #000;\n  opacity: 0.5;\n  &.active {\n    opacity: 1;\n  }\n  @media (max-width: 900px) {\n    margin-right: 10px;\n  }\n`;\n\nconst Icon = styled.img`\n  width: 26px;\n`;\nconst ChainName = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 20px;\n  @media (max-width: 900px) {\n    font-size: 13px;\n  }\n`;\nconst DexName = styled.div`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 22px;\n  @media (max-width: 900px) {\n    font-size: 15px;\n    white-space: nowrap;\n  }\n`;\nconst WidgetWrapper = styled.div`\n  width: 560px;\n  @media (max-width: 900px) {\n    width: 100%;\n    margin-top: 10px;\n  }\n`;\n\nconst curChain = restProps.chains[chainId];\n\nconst BridgeBanner = styled.div`\n  width: 560px;\n  border-radius: 16px;\n  color: var(--text-color);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n  background: var(--dex-hover-bg-color);\n  padding: 16px;\n  margin: 0 auto;\n\n  margin-top: 12px;\n\n  .bridge-text {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    .icon {\n      height: 30px;\n    }\n\n    .text-wrapper {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n    .text-l {\n      font-size: 16px;\n      font-weight: 600;\n      line-height: 22px;\n      letter-spacing: 0em;\n      text-align: center;\n    }\n    .text-m {\n      font-size: 14px;\n      font-weight: 400;\n      line-height: 19px;\n      letter-spacing: 0em;\n      text-align: center;\n    }\n  }\n`;\n\nconst ArrowRight = (\n  <svg\n    width=\"7\"\n    height=\"12\"\n    viewBox=\"0 0 7 12\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M1 11L5 6L1 1\" stroke=\"currentColor\" stroke-width=\"2\" />\n  </svg>\n);\n\nreturn (\n  <Dex>\n    <WidgetWrapper>\n      <Widget\n        src=\"dapdapbos.near/widget/Swap.SwapV2\"\n        props={{\n          title: state.selectedDex,\n          dexConfig: dexs[state.selectedDex],\n          account,\n          chainId,\n          chainIdNotSupport,\n          ...restProps,\n          ...props,\n        }}\n      />\n\n      <BridgeBanner\n        onClick={() => {\n          if (chainIdNotSupport) return;\n          restProps?.bridgeCb();\n        }}\n      >\n        <div className=\"bridge-text \">\n          <img className=\"icon\" src={curChain.icon} />\n\n          <div className=\"text-wrapper\">\n            <div className=\"text-l\">\n              {curChain.chainName} Chain token bridge\n            </div>\n\n            <div className=\"text-m\">\n              {curChain.chainName} Chain token bridge\n            </div>\n          </div>\n        </div>\n\n        {ArrowRight}\n      </BridgeBanner>\n    </WidgetWrapper>\n  </Dex>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Swap.SwapConnector", "fact_widget_deployments_id": "29dbe09eb4501974ac4bb697e8a130ab", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}