{"tx_hash": "EvpNxPYDWAn8H516ghwg1gn5RrY598FE7JC6eutUC8eo", "action_id_social": "6o94VcayisNeozkNcMTG5FsqaUTma7oWmsQwze2VNaDM-0-widget", "block_id": 105530638, "block_timestamp": "2023-11-12T12:24:04.426Z", "signer_id": "dapdapbos.near", "widget_name": "Linea.Uniswap.Swap.QuoterV3UniApi", "source_code": "const {\n  update,\n  routerAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  chainId,\n  loadAmountOut,\n  quoterAddress,\n  tradeType,\n} = props;\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (\n  !update ||\n  !inputCurrency.address ||\n  !outputCurrency.address ||\n  state.fetching\n) {\n  return;\n}\n\nconst WETH_ADDRESS = props.wethAddress;\n\nconst wrapType =\n  inputCurrency.address === \"native\" && outputCurrency.address === wethAddress\n    ? 1\n    : inputCurrency.address === wethAddress &&\n      outputCurrency.address === \"native\"\n    ? 2\n    : 0;\n\nconst onError = () => {\n  loadAmountOut({\n    loading: false,\n    success: true,\n    noPair: false,\n  });\n  return \"\";\n};\nif (wrapType > 0) {\n  loadAmountOut({\n    amountOut: inputCurrencyAmount,\n    outputCurrencyAmount: inputCurrencyAmount,\n    fee: 0,\n    noPair: false,\n    loading: false,\n  });\n  return \"\";\n}\nif (Big(inputCurrencyAmount || \"0\").eq(0)) {\n  onError();\n  return \"\";\n}\nconst realTokenIn =\n  inputCurrency.address === \"native\" ? WETH_ADDRESS : inputCurrency.address;\n\nconst realTokenOut =\n  outputCurrency.address === \"native\" ? WETH_ADDRESS : outputCurrency.address;\n\nconst AccessKey = Storage.get(\n  \"AccessKey\",\n  \"guessme.near/widget/ZKEVMWarmUp.add-to-quest-card\"\n);\nState.update({\n  fetching: true,\n});\nconst _amountIn = Big(inputCurrencyAmount)\n  .mul(Big(10).pow(inputCurrency.decimals))\n  .toFixed();\nconst fetchTradeInfo = () => {\n  asyncFetch(\n    `https://api.dapdap.net/api/uniswap/v2/quote?token_in=${realTokenIn}&token_out=${realTokenOut}&chain_id=${chainId}&amount=${_amountIn}`\n  )\n    .then((res) => {\n      if (res?.body && res.body.code === \"0\" && res.body.data?.quote) {\n        const data = res.body.data.quote;\n        loadAmountOut({\n          ...data,\n          outputCurrencyAmount: data.quoteDecimals,\n          noPair: data.noPair,\n          trade: {\n            gasCost: Big(data.gasUseEstimate || 0)\n              .div(Big(10).pow(18))\n              .toFixed(),\n            priceImpact: data.priceImpact,\n            routes: data.route,\n            tokenPath: data.tokenPath,\n          },\n        });\n        setTimeout(() => {\n          State.update({\n            fetching: false,\n          });\n        }, 500);\n        return;\n      }\n      if (\n        res.body &&\n        res.body.data === null &&\n        res.body.msg === \"no pair exist\"\n      ) {\n        loadAmountOut({\n          outputCurrencyAmount: 0,\n          noPair: true,\n          loading: false,\n        });\n        setTimeout(() => {\n          State.update({\n            fetching: false,\n          });\n        }, 500);\n        return;\n      }\n      setTimeout(() => {\n        fetchTradeInfo();\n      }, 2000);\n    })\n    .catch(() => {\n      onError();\n      return \"\";\n    });\n};\n\nfetchTradeInfo();\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Linea.Uniswap.Swap.QuoterV3UniApi", "fact_widget_deployments_id": "2549ddac6afe50e97586e0470872cb42", "inserted_timestamp": "2023-11-12T14:04:06.217Z", "modified_timestamp": "2023-11-12T14:04:06.217Z", "__row_index": 2}