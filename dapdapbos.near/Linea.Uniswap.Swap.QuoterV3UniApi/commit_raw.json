{"tx_hash": "8Exck5GbEhKDv8dLcYN55dNE6kKUyghCAaTQgh3joPLh", "action_id_social": "CHVjWEMWEsZbDJ5j2k1Y9e9nQbyB1jEn85WXx7gdYJxD-0-widget", "block_id": 119087566, "block_timestamp": "2024-05-17T02:08:22.053Z", "signer_id": "dapdapbos.near", "widget_name": "Linea.Uniswap.Swap.QuoterV3UniApi", "source_code": "const {\n  update,\n  routerAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  chainId,\n  loadAmountOut,\n  quoterAddress,\n  tradeType,\n} = props;\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (\n  !update ||\n  !inputCurrency.address ||\n  !outputCurrency.address ||\n  state.fetching\n) {\n  return \"\";\n}\n\nconst WETH_ADDRESS = props.wethAddress;\n\nconst wrapType =\n  inputCurrency.address === \"native\" && outputCurrency.address === wethAddress\n    ? 1\n    : inputCurrency.address === wethAddress &&\n      outputCurrency.address === \"native\"\n    ? 2\n    : 0;\n\nconst onError = () => {\n  loadAmountOut({\n    loading: false,\n    success: true,\n    noPair: false,\n  });\n  return \"\";\n};\nif (wrapType > 0) {\n  loadAmountOut({\n    amountOut: inputCurrencyAmount,\n    outputCurrencyAmount: inputCurrencyAmount,\n    fee: 0,\n    noPair: false,\n    loading: false,\n  });\n  return \"\";\n}\nif (Big(inputCurrencyAmount || \"0\").eq(0)) {\n  onError();\n  return \"\";\n}\nconst realTokenIn =\n  inputCurrency.address === \"native\" ? WETH_ADDRESS : inputCurrency.address;\n\nconst realTokenOut =\n  outputCurrency.address === \"native\" ? WETH_ADDRESS : outputCurrency.address;\nState.update({\n  fetching: true,\n});\nconst _amountIn = Big(inputCurrencyAmount)\n  .mul(Big(10).pow(inputCurrency.decimals))\n  .toFixed();\n\nconst fetchTradeInfo = () => {\n  asyncFetch(`/dapdap/uniswap/v2/quote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      token_in: realTokenIn,\n      token_out: realTokenOut,\n      amount: _amountIn,\n      chain_id: chainId,\n    }),\n  })\n    .then((res) => {\n      if (res.body.data?.result?.quote) {\n        const data = res.body.data.result.quote;\n        loadAmountOut({\n          ...data,\n          outputCurrencyAmount: data.quoteDecimals,\n          noPair: data.noPair,\n          trade: {\n            gasCost: data.gasUseEstimateUSD,\n            priceImpact: Number(data.priceImpact) ? data.priceImpact : 0,\n            routes: data.route,\n            gas: Big(data.gasPriceWei || 0)\n              .mul(data.gasUseEstimate)\n              .div(Big(10).pow(18))\n              .toString(),\n          },\n        });\n        setTimeout(() => {\n          State.update({\n            fetching: false,\n          });\n        }, 500);\n        return;\n      }\n      if (res.body && res.body.error.message === \"no pair exist\") {\n        loadAmountOut({\n          outputCurrencyAmount: 0,\n          noPair: true,\n          loading: false,\n        });\n        setTimeout(() => {\n          State.update({\n            fetching: false,\n          });\n        }, 500);\n        return;\n      }\n      setTimeout(() => {\n        fetchTradeInfo();\n      }, 5000);\n    })\n    .catch(() => {\n      onError();\n      return \"\";\n    });\n};\n\nfetchTradeInfo();\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapdapbos.near/widget/Linea.Uniswap.Swap.QuoterV3UniApi", "fact_widget_deployments_id": "1cf2760b893efc6f2e0f8e2c15fb62e3", "inserted_timestamp": "2024-05-17T03:50:29.706Z", "modified_timestamp": "2024-05-17T03:50:29.706Z", "__row_index": 0}