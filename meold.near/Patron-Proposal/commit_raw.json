{"tx_hash": "47yMUveDnLi81Vf54aymtcouYKwDg4eHYsgzQqquiLZq", "action_id_social": "Emk6mvPUNcNnAStwVSxCFXnR3TpZCLMLWEPCi6vNnEM6-0-widget", "block_id": 99619144, "block_timestamp": "2023-08-25T10:24:52.987Z", "signer_id": "meold.near", "widget_name": "Patron-Proposal", "source_code": "return (\n  <div>\n    <div class=\"\">\n      <p>\n        <strong>Overview</strong>\n      </p>\n\n      <p>Patron works now on Polkadot ecosystem https://patron.works</p>\n      <p>\n        Nowadays, smart contracts are one of the main instruments of development\n        in the blockchain world. As blockchain itself should be open and\n        reliable, we want to create a registry of all available contracts, so\n        everyone could understand the risks and check whether a specific\n        contract is safe or not.\n      </p>\n      <p>\n        The other side of it - manager of smart contracts, so every developer\n        could manage his own contracts just like using GitHub. It is very\n        important for users to have connection with what developers do, so that\n        will increase trust between them.\n      </p>\n      <p>\n        <strong>Existing problems</strong>\n      </p>\n      <p>\n        1. Seamless verification \u2705. An ability to seamless get your on-chain\n        deployed contract logic verified and matched with existing source code,\n        using the usual deployment flow without obscure actions.\n      </p>\n      <p>\n        2. Cumbersome build/local deploy/debug flow. No automatic\n        build/deploy/debug flow results in multiple repetitive manual actions.\n      </p>\n      <p>\n        3. Inefficient contract deployment. CLI/script deployment usually are\n        not sufficient for local/testnet development while existing UI\n        instruments are rather complicated . Also, there is no common deploy\n        flow for every stage - local/testnet/production, a tool that would\n        combine both CLI automation and UI playground.\n      </p>\n      <p>\n        4. Unified contract management. Deployed smart contract management is\n        currently done with the usage of hard-to-use CLI tools or UI instruments\n        with just the basic features available. Also, developer contract\n        management(UI used during development) and post-deployment contract\n        management are different tools and interfaces(UIs).\n      </p>\n      <p>\n        5. Vulnerability research is done mostly ad-hoc, with no unified\n        platform being available to assist users in covering common\n        vulnerabilities. Ecosystem also lacks automatic vulnerability scanning\n        platform, which will catch common mistakes in smart contracts that could\n        lead to security issues.\n      </p>\n      <p>\n        6. Interaction with external resources (like HTTP APIs) based on events\n        is obscure and has to be implemented manually.\n      </p>\n\n      <p>\n        <strong>Solution</strong>\n      </p>\n      <p>\n        The Patron team is requesting $159,000 over 6 months ($26,500/mo) to\n        integrate the smart contract verification in the Near ecosystem. The\n        expected outcomes from this proposal include:\n      </p>\n      <p>\n        <strong>Milestone 1 (Integration with ecosystem)</strong>\n      </p>\n      <ol>\n        <li>\n          We will provide API documentation for contributors to get along with\n          the codebase.\n        </li>\n        <li>\n          Ensure that database supports different networks with their own\n          traits. Migrate existing data to this new database schema.\n        </li>\n        <li>\n          Refactoring of internal infrastructure to handle different networks\n          with different RPC SDKs. Implementation of initialize and watch\n          commands using NEAR Lake Framework(traverse command is not needed\n          here, since initialization process is done starting from the genesis\n          block).\n        </li>\n        <li>\n          Support different build schemas for various chains, choosing the\n          required one based on the build session configuration. Test image\n          isolation capabilities with the existing build schema.\n        </li>\n        <li>\n          Ensure that routes that accept signed messages support NEAR's SDK for\n          signature checks (primarily used for authentication purposes). If\n          possible, migrate the payment check route to use NEAR's SDK.\n        </li>\n        <li>Integrate NEAR Wallet Selector. Updates to use new api.</li>\n      </ol>\n      <p>\n        <strong>Milestone 2 (Server image update, Caller UI)</strong>\n      </p>\n      <ol>\n        <li>\n          We will provide API documentation for contributors to get along with\n          the codebase.\n        </li>\n        <li>\n          Utilize ecosystem verification image on a server in an isolated manner\n          to ensure server safety of both our and self-hosted environments.\n        </li>\n        <li>\n          We will implement a new subcommand, which automatically checks server\n          code hash against the local build code hash using the local source\n          code. This will ensure that developer can trust our remote build\n          server, because code hash of the remote build is the same as local\n          machine\u2019s local builds.\n        </li>\n        <li>\n          We will provide users with functionality to perform calls to smart\n          contracts from our UI. We will implement a dynamically generated\n          front-end for smart contract invocation purposes. Parsing of contract\n          metadata will be implemented on the client-side.\n        </li>\n      </ol>\n      <p>\n        <strong>Milestone 3 (Build developer environment)</strong>\n      </p>\n      <ol>\n        <li>\n          We will implement local build capabilities that don\u2019t use Docker, to\n          improve user flow for contract testing cases, where quick builds are\n          required. To improve the developer experience itself, we are planning\n          to implement the watch command, which will handle the automatic\n          upload, instantiation and debug UI loading.\n        </li>\n        <li>\n          Automatic or guided tool installation will be implemented where\n          possible, simplifying user interaction with CLI.\n        </li>\n        <li>\n          We will design CLI in a way reduces any usage friction as much as\n          possible. Website UI will be extended with local node information.\n        </li>\n        <li>\n          We will support projects where multiple crates are providing multiple\n          contracts.\n        </li>\n        <li>\n          Integrate filesystem watch capabilities that will automatically open\n          contract method call UI.\n        </li>\n      </ol>\n\n      <p>\n        <strong>Budget &amp; Financing</strong>\n      </p>\n      <p>Monthly breakdown as follows :</p>\n      <p>\n        The team consists of 4 engineering roles, 1 design role and 1 business\n        development role. The team has been working together since 2020 and are\n        all based in Ukraine. Below salaries include 13th-month wages, local tax\n        and corporate taxes. NearBlocks does not rent or own an office. With\n        this transition, each team member will be able to work full-time on\n        Nearblocks.\n      </p>\n      <ul>\n        <li>Co-Founders ($4,000/mo)</li>\n        <li>Lead Engineer ($6,500/mo)</li>\n        <li>Senior Full Stack ($4,000/mo)</li>\n        <li>Sys/Devops ($3,500/mo)</li>\n        <li>Front-end ($2,500/mo)</li>\n        <li>Web Designer ($2,000/mo)</li>\n        <li>Product Lead/Business Development ($3,000/mo)</li>\n        <li>Server Hosting, Database, High Availability, Backups ($1000/mo)</li>\n      </ul>\n      <p>\n        <strong>Technical Timeline</strong>\n      </p>\n      <ul>\n        <li>Milestone 1 (0-2 months) \u2013 Integration with ecosystem;</li>\n        <li>Milestone 2 (2-4 months) \u2013 Server image update, Caller UI;</li>\n        <li>Milestone 3 (4-6 months) \u2013 Build developer environment.</li>\n      </ul>\n      <p>\n        <strong>Reporting Structure &amp; Payment Schedule</strong>\n      </p>\n      <p>\n        To ensure Patron meets the expectations of DevHub, we propose to break\n        up the proposed funding into milestones that are paid out before the\n        start of a new milestone.\n      </p>\n      <ul>\n        <li>Milestone 1 ($59,625): September 2023</li>\n        <li>Milestone 2 ($66,250): November 2023</li>\n        <li>Milestone 3 ($33,125): February 2024</li>\n      </ul>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meold.near/widget/Patron-Proposal", "fact_widget_deployments_id": "3cffe393f40756f1a34873ce9c930e03", "inserted_timestamp": "2023-08-25T12:25:34.432Z", "modified_timestamp": "2023-08-25T12:25:34.432Z", "__row_index": 0}