{"tx_hash": "6vL3eixYPPt2dBmcSw9fnuv9oMQWtXQxH2sKBFpGxDx6", "action_id_social": "4MurH8EATVR58vtqe5rhQMoArv45uR4mSBY5sFqtNi7h-0-widget", "block_id": 105911136, "block_timestamp": "2023-11-17T15:41:35.113Z", "signer_id": "detextre4.near", "widget_name": "poke-fight", "source_code": "// * STYLES\nconst Wrapper = styled.div`\n  --size: 220px;\n  \n  min-height: 100vh;\n  background-image: linear-gradient(#ffffff 1.1rem, #ccc 1.2rem);\n  background-size: 100% 1.2rem;\n\n  &.finished {\n    display: grid;\n    place-content: center;\n  }\n\n  * {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family: Fantasy;\n  }\n\n  h2 {\n    text-align: center;\n    margin-bottom: 14px;\n  }\n`,\n  Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(min(100%, var(--size)), 1fr));\n  place-items: center;\n  gap: 40px;`,\n  Pokeball = styled.div`\n--primary: #f71b1b;\n--accent: #000;\n--bg: #f7f7f7;\n--br: 50%;\n\n  position: relative;\n  width: var(--size);\n  height: var(--size);\n  background: var(--bg);\n  box-shadow: 2px 2px 6px 2px rgba(0, 0, 0, .4);\n  display: grid;\n  place-items: center;\n  font-size: 25px;\n  font-weight: bold;\n  border-radius: var(--br);\n  isolation: isolate;\n  transition: all var(--animationDuration) ease;\n\n  &.deleted {\n    translate: 0 -100px;\n    opacity: 0;\n  }\n\n  &:before, &:after { pointer-events: none }\n\n  &:before {\n    position: absolute;\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 25px;\n    font-weight: bold;\n    border: 4px solid var(--accent);\n\n    background: linear-gradient(to bottom left, var(--primary), var(--primary) 49%, var(--accent) 49%, var(--accent) 50.5%, var(--bg) 50.5%);\n    top: 0;\n    right: 0;\n    border-radius: var(--br);\n    transition: all 0.5s;\n  }\n\n  &:hover:before, &.opened:before {\n    width: 20%;\n    height: 20%;\n    border-radius: 0 var(--br) 0 100%;\n\n    background: linear-gradient(to bottom left, var(--primary), var(--primary) 72%, var(--accent) 72%, var(--accent) 70%, var(--bg) 70%);\n    transition: all 0.5s;\n  }\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    margin: auto;\n    width: 40px;\n    height: 40px;\n    background: var(--bg);\n    border: 4px solid var(--accent);\n    border-radius: 50%;\n    z-index: 1;\n    transition: all var(--animationDuration);\n  }\n  &:hover:after, &.opened:after {\n    opacity: 0;\n    translate: -70px 70px;\n    scale: .5;\n  }\n\n  * {\n    z-index: -1;\n    pointer-events: none;\n    user-select: none;\n  }\n  &:hover * { pointer-events: all }\n\n  .pokemon {\n    width: 60%;\n    object-fit: cover;\n    cursor: grab;\n  }\n\n  .pokemon-element-type {\n    position: absolute;\n    object-fit: cover;\n    top: 5%;\n    width: 50px;\n    height: 50px;\n  }\n\n  h5 {\n    position: absolute;\n    bottom: 10%;\n    pointer-events: none;\n  }\n\n  .health-bar {\n    position: absolute;\n    right: 10%;\n    width: 20px;\n    height: 50%;\n  }\n`;\n\n// * SCRIPT\nState.init({\n  pokemons: [],\n  loading: true,\n  splashLoaded: false,\n  currentDrag: null,\n});\n\n// config constants\nconst API = \"https://pokeapi.co/api/v2\",\n  LIMIT = props.limit,\n  OFFSET = props.offset,\n  animationDuration = 200;\n\n// initial fetch to get all pokemons.\n// the const `loading` is used to excecute once\nfunction getPokemons() {\n  if (!state.loading) return;\n\n  setTimeout(() => State.update({ splashLoaded: true }), 2000);\n\n  // fetch data based on `LIMIT` which corresponds to pokemons amount\n  // and `OFFSET` which corresponds to index of complete collection from\n  // which the data is brought\n  asyncFetch(`${API}/pokemon?limit=${LIMIT}&offset=${OFFSET}`)\n    .then(({ body }) => {\n      let pokemons = [];\n\n      for (const item of body.results) {\n        const { body } = fetch(item.url);\n\n        pokemons.push({\n          name: body.name,\n          image: body.sprites.other[\"official-artwork\"].front_default,\n          moves: body.moves?.map((item) => item.move.name),\n          type: body.types[0].type.name,\n          health: [1, 2, 3, 4],\n        });\n      }\n\n      State.update({ pokemons: shuffleArray(pokemons), loading: false });\n    })\n    .catch((error) => console.error(error));\n}\ngetPokemons();\n\n/* Randomize array in-place using Durstenfeld shuffle algorithm */\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nfunction getRandomInt(max) {\n  const min = 0;\n  max = Math.floor(max);\n\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction onDragStart(pokemonIndex) {\n  const pokemons = state.pokemons,\n    pokemon = pokemons[state.currentDrag];\n\n  // validate if current element exists\n  if (pokemon) {\n    pokemon.opened = false;\n    pokemon.attack = null;\n  }\n\n  State.update({ pokemons, currentDrag: pokemonIndex });\n}\n\nfunction openPokeball(event, pokemonIndex) {\n  // prevent vanilla events to can drop elements inside\n  event.preventDefault();\n\n  const pokemons = state.pokemons,\n    pokemon = pokemons[pokemonIndex];\n\n  if (pokemon.opened) return;\n\n  pokemon.opened = true;\n  State.update({ pokemons });\n}\n\nfunction closePokeball(pokemonIndex) {\n  // prevent execution in other pokeballs than the objective\n  if (state.currentDrag == pokemonIndex) return;\n\n  const pokemons = state.pokemons,\n    currentPokemon = pokemons[state.currentDrag],\n    pokemon = pokemons[pokemonIndex];\n\n  pokemon.opened = false;\n  currentPokemon.attack = null;\n  State.update({ pokemons });\n}\n\nfunction attack(pokemonIndex) {\n  if (state.currentDrag == pokemonIndex) return;\n  const pokemons = state.pokemons,\n    currentPokemon = pokemons[state.currentDrag],\n    pokemon = pokemons[pokemonIndex];\n\n  // show attack dialog\n  if (currentPokemon)\n    currentPokemon.attack =\n      currentPokemon.moves[getRandomInt(currentPokemon.moves.length)];\n\n  // animation decrease helath\n  pokemon.health[0] = 0;\n  State.update({ pokemons });\n\n  // decrease helath\n  setTimeout(() => decreaseHealth(pokemons, pokemonIndex), animationDuration);\n}\n\nfunction decreaseHealth(pokemons, pokemonIndex) {\n  const pokemon = pokemons[pokemonIndex];\n\n  // delete pokemon if health goes too low.\n  if (pokemon.health.length <= 1) return deletePokemon(pokemons, pokemonIndex);\n\n  pokemon.health.shift();\n  State.update({ pokemons });\n}\n\nfunction deletePokemon(pokemons, pokemonIndex) {\n  const currentPokemon = pokemons[state.currentDrag],\n    pokemon = pokemons[pokemonIndex];\n\n  // clear attack dialog showed on pokemon\n  currentPokemon.attack = null;\n\n  // animation delete pokemon\n  pokemon.deleted = true;\n  State.update({ pokemons });\n\n  // delete pokemon\n  setTimeout(() => {\n    pokemons.splice(pokemonIndex, 1);\n    State.update({ pokemons });\n  }, animationDuration);\n}\n\n// * TEMPLATE RENDER\nconst splashScreen = <Widget src=\"detextre4.near/widget/splash-screen\" />,\n  minigame = (\n    <Wrapper className={state.pokemons.length > 1 ? \"\" : \"finished\"}>\n      <h2>\n        {/* validate if game is culminated */}\n        {state.pokemons.length > 1\n          ? \"Drag pokemons to attack\"\n          : `${state.pokemons[0].name} won !!`}\n      </h2>\n      <Grid>\n        {state.pokemons.map((pokemon, index) => (\n          <Pokeball\n            // pass classes and custom properties dynamically\n            className={`${pokemon.deleted ? \"deleted\" : \"\"} ${\n              pokemon.opened ? \"opened\" : \"\"\n            }`}\n            style={{ \"--animationDuration\": `${animationDuration}ms` }}\n            onDrop={(_) => attack(index)}\n            onDragOver={(event) => openPokeball(event, index)}\n            onDragLeave={(_) => closePokeball(index)}\n            onMouseLeave={(_) => closePokeball(index)}\n          >\n            {/* pokemon element type widget */}\n            <Widget\n              src=\"detextre4.near/widget/pokemon-element-types\"\n              props={{\n                type: pokemon.type,\n                alt: `type ${pokemon.type}`,\n              }}\n            />\n            {/* health bar widget */}\n            <Widget\n              src=\"detextre4.near/widget/health-bar\"\n              props={{ healthBars: pokemon.health, bg: \"#000\" }}\n            />\n            <OverlayTrigger\n              // show attack dialog when pokemon is attacking\n              show={!!pokemon.attack}\n              overlay={<Tooltip>{pokemon.attack}</Tooltip>}\n              placement=\"top\"\n            >\n              <img\n                className=\"pokemon\"\n                src={pokemon.image}\n                alt={`${pokemon.name}'s image`}\n                onDragStart={(_) => onDragStart(index)}\n              />\n            </OverlayTrigger>\n            <h5>{pokemon.name}</h5>\n          </Pokeball>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n\n// show splash page while data is loading\nif (state.loading || !state.splashLoaded) return splashScreen;\nreturn minigame;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/detextre4.near/widget/poke-fight", "fact_widget_deployments_id": "d028715bf2821f2f311d5ed4068ad98d", "inserted_timestamp": "2023-11-17T17:38:37.614Z", "modified_timestamp": "2023-11-17T17:38:37.614Z", "__row_index": 0}