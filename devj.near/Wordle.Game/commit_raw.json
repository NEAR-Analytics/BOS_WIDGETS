{"tx_hash": "5fYM84WEjvJNss3kNHxq9nBDtwvzSuemyRS6T3RRhq55", "action_id_social": "HNCGaw7LE2HihuTuiLkRokPYNgEtrJAKqPguVunTBanZ-0-widget", "block_id": 111028336, "block_timestamp": "2024-01-22T09:57:14.827Z", "signer_id": "devj.near", "widget_name": "Wordle.Game", "source_code": "if (context.accountId === null) return \"Please sign in using your Near account\";\n\nconst CONTRACT = \"w0rdle.near\";\nconst API = \"https://nearwordle.com/api\";\n\nState.init({\n  loading: true,\n  currentGuess: \"\",\n});\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"X-Account-ID\": context.accountId,\n  \"X-Auth-Key\": props.key,\n};\n\nconst loadGame = () => {\n  asyncFetch(`${API}/game/info`, {\n    method: \"GET\",\n    headers,\n  }).then((res) => {\n    if (!res.ok) return props.handleToast(\"error\", \"Error\", \"\");\n    if (res.body.error)\n      return props.handleToast(\n        \"error\",\n        \"Fail to load the game\",\n        res.body.message\n      );\n    State.update({ ...res.body, loading: false });\n  });\n};\n\nconst handleKeys = (key) => {\n  if (state.guesses.length > 5) return;\n  if (state.isWinner) return;\n\n  if (key === \"Backspace\") {\n    State.update({ currentGuess: state.currentGuess.slice(0, -1) });\n\n    return;\n  }\n  if (/^[A-Za-z]$/.test(key)) {\n    if (state.currentGuess.length < 5) {\n      State.update({ currentGuess: state.currentGuess + key });\n    }\n    return;\n  }\n  if (key === \"Enter\") {\n    if (state.currentGuess.length !== 5) return;\n\n    asyncFetch(`${API}/game/guess`, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({ guess: state.currentGuess }),\n    }).then((res) => {\n      if (!res.ok) return props.handleToast(\"error\", \"Error\", \"\");\n      if (res.body.error)\n        return props.handleToast(\"info\", \"Oops\", res.body.message);\n      const { formattedGuess, isWinner } = res.body;\n      console.log(res);\n      State.update({\n        currentGuess: \"\",\n        isWinner,\n        guesses: [...state.guesses, formattedGuess],\n      });\n    });\n  }\n};\n\nconst formatGuesses = () => {\n  const currentGuessArray = [...state.currentGuess];\n  let formattedCurrentGuess;\n  if (!state.isWinner) {\n    if (state.guesses.length < 6) {\n      formattedCurrentGuess = currentGuessArray.map((l, i) => {\n        return { key: currentGuessArray[i], hit: 0 };\n      });\n      formattedCurrentGuess = [\n        ...formattedCurrentGuess,\n        ...Array(5 - formattedCurrentGuess.length).fill({\n          key: \"\",\n          hit: 0,\n        }),\n      ];\n    }\n  }\n\n  const undefinedGuess = Array(5).fill({\n    key: \"\",\n    hit: state.isWinner ? 3 : 0,\n  });\n\n  const guesses = [\n    ...state.guesses,\n    ...(formattedCurrentGuess ? [formattedCurrentGuess] : []),\n    ...Array(6 - state.guesses.length - (formattedCurrentGuess ? 1 : 0)).fill(\n      undefinedGuess\n    ),\n  ];\n\n  return guesses;\n};\n\nuseEffect(() => {\n  loadGame();\n}, []);\n\nif (state.loading)\n  return <p class=\"text-center text-white py-4\">Loading ...</p>;\n\nif (!state.loading) {\n  const formattedGuesses = formatGuesses();\n\n  return (\n    <div class=\"container\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-12 col-md-8 col-lg-6 col-xl-4\">\n          <div class=\"\">\n            <Widget src=\"devj.near/widget/Wordle.Game.Countdown\" />\n          </div>\n          <div class=\"mt-4\">\n            <Widget\n              src=\"devj.near/widget/Wordle.Game.Field\"\n              props={{\n                formattedGuesses,\n              }}\n            />\n          </div>\n          <div class=\"mt-4\">\n            <Widget\n              src=\"devj.near/widget/Wordle.Game.Keyboard\"\n              props={{\n                handleKeys,\n                guesses: state.guesses,\n              }}\n            />\n          </div>\n          <div class=\"mt-4\">\n            <Widget\n              src=\"devj.near/widget/Wordle.Game.Menu\"\n              props={{\n                isWinner: state.isWinner,\n                attempts: state.guesses.length,\n                gameNumber: state.gameNumber,\n                formattedGuesses,\n                key: props.key,\n                handleToast: props.handleToast,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/devj.near/widget/Wordle.Game", "fact_widget_deployments_id": "7343f584a1dd7b0ef22b00cfeed71e58", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}