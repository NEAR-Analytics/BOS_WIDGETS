{"tx_hash": "21EFKr6Bj5YFWWAAVYEMbtjwcmT5LWzcYs3G7gs1jj8R", "action_id_social": "CeDZusWjKiLw3AHeaa3hVC6tWrbK7Y2Q4GXWXMHCNK9u-0-widget", "block_id": 102763152, "block_timestamp": "2023-10-06T16:57:49.336Z", "signer_id": "fran-cali.near", "widget_name": "imgtest", "source_code": "const {\n  nft: propNft,\n  contractId: propContractId,\n  tokenId: propTokenId,\n  className: propClassName,\n  style,\n  alt,\n  thumbnail,\n  fallbackUrl,\n  loadingUrl = \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\",\n} = props;\n\nconst [localState, setLocalState] = useState({\n  contractId: propNft?.contractId || propContractId,\n  tokenId: propNft?.tokenId || propTokenId,\n  imageUrl: null,\n  oldUrl: null,\n});\n\nuseEffect(() => {\n  if (\n    propContractId !== localState.contractId ||\n    propTokenId !== localState.tokenId\n  ) {\n    setLocalState({\n      contractId: propContractId,\n      tokenId: propTokenId,\n      imageUrl: null,\n    });\n  }\n}, [propContractId, propTokenId, localState.contractId, localState.tokenId]);\n\nconst nftMetadata =\n  nft.contractMetadata ?? Near.view(contractId, \"nft_metadata\");\nconst tokenMetadata =\n  nft.tokenMetadata ??\n  Near.view(contractId, \"nft_token\", {\n    token_id: tokenId,\n  }).metadata;\n\nlet imageUrl = null;\n\nif (nftMetadata && tokenMetadata) {\n  let tokenMedia = tokenMetadata.media || \"\";\n\n  imageUrl =\n    tokenMedia.startsWith(\"https://\") ||\n    tokenMedia.startsWith(\"http://\") ||\n    tokenMedia.startsWith(\"data:image\")\n      ? tokenMedia\n      : nftMetadata.base_uri\n      ? `${nftMetadata.base_uri}/${tokenMedia}`\n      : tokenMedia.startsWith(\"Qm\") || tokenMedia.startsWith(\"ba\")\n      ? `https://ipfs.near.social/ipfs/${tokenMedia}`\n      : tokenMedia;\n\n  if (!tokenMedia && tokenMetadata.reference) {\n    if (\n      nftMetadata.base_uri === \"https://arweave.net\" &&\n      !tokenMetadata.reference.startsWith(\"https://\")\n    ) {\n      const res = fetch(`${nftMetadata.base_uri}/${tokenMetadata.reference}`);\n      imageUrl = res.body.media;\n    } else if (\n      tokenMetadata.reference.startsWith(\"https://\") ||\n      tokenMetadata.reference.startsWith(\"http://\")\n    ) {\n      const res = fetch(tokenMetadata.reference);\n      imageUrl = JSON.parse(res.body).media;\n    } else if (tokenMetadata.reference.startsWith(\"ar://\")) {\n      const res = fetch(\n        `${\"https://arweave.net\"}/${tokenMetadata.reference.split(\"//\")[1]}`\n      );\n      imageUrl = JSON.parse(res.body).media;\n    }\n  }\n\n  if (!imageUrl) {\n    imageUrl = false;\n  }\n}\n// ... (rest of the logic regarding fetching data from Near remains unchanged)\n\nconst replaceIpfs = useCallback(\n  (imageUrl) => {\n    const rex =\n      /^(?:https?:\\/\\/)(?:[^\\/]+\\/ipfs\\/)?(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(?:\\.[^\\/]+)?(\\/.*)?$/g;\n\n    if (localState.oldUrl !== imageUrl && imageUrl) {\n      const match = rex.exec(imageUrl);\n      if (match) {\n        const newImageUrl = `https://ipfs.near.social/ipfs/${match[1]}${\n          match[2] || \"\"\n        }`;\n        if (newImageUrl !== imageUrl) {\n          setLocalState((prevState) => ({\n            ...prevState,\n            oldUrl: imageUrl,\n            imageUrl: newImageUrl,\n          }));\n          return;\n        }\n      }\n    }\n    if (localState.imageUrl !== false) {\n      setLocalState((prevState) => ({\n        ...prevState,\n        imageUrl: false,\n      }));\n    }\n  },\n  [localState]\n);\n\nconst thumb = (imageUrl) =>\n  thumbnail && imageUrl && !imageUrl.startsWith(\"data:image/\")\n    ? `https://i.near.social/${thumbnail}/${imageUrl}`\n    : imageUrl;\n\nconst img = localState.imageUrl !== null ? localState.imageUrl : imageUrl;\nconst src = img !== false ? img : fallbackUrl;\n\nreturn (\n  <img\n    className={propClassName || \"img-fluid\"}\n    style={style}\n    src={src !== null ? thumb(src) : loadingUrl}\n    alt={alt}\n    onError={() => replaceIpfs(img)}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fran-cali.near/widget/imgtest", "fact_widget_deployments_id": "5ebcb8d95f9cbadbf8cdeb063ca258f7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}