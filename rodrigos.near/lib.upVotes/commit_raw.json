{"tx_hash": "DKmPxMGfYjGBKNAGwkweJJJmGfYM7JEyS4CmVWK7cKKy", "action_id_social": "7CPfVqbzUzQQ2K5CTUL82FeZNd3QjkyedNHomDsTSmgA-0-widget", "block_id": 113193819, "block_timestamp": "2024-02-20T02:49:23.896Z", "signer_id": "rodrigos.near", "widget_name": "lib.upVotes", "source_code": "// lib.upVotes\n\nconst {\n  mainStateUpdate,\n  isTest,\n  stateUpdate,\n  functionsToCallByLibrary,\n  callLibs,\n  baseAction,\n  widgets,\n  usersSBTs,\n} = props;\n\nconst libName = \"upVotes\"; // EDIT: set lib name\nconst functionsToCall = functionsToCallByLibrary[libName];\n\nlet resultFunctionsToCallByLibrary = Object.assign(\n  {},\n  functionsToCallByLibrary\n);\nlet resultFunctionsToCall = [];\n\nconst currentVersion = \"0.0.2\"; // EDIT: Set version\n\nconst prodAction = `${baseAction}_v${currentVersion}`;\nconst testAction = `test_${prodAction}`;\nconst action = isTest ? testAction : prodAction;\n\n// START LIB CALLS SECTION\n// interface FunctionCall {\n//     functionName: string,\n//     key: string, // The state of the caller will be updated with this string as a key\n//     props: Record<string, any> // function parameters as object\n// }\n\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\n\nconst libSrcArray = [widgets.libs.libSBT]; // string to lib widget // EDIT: set libs to call\n\nconst imports = { notifications: [\"getNotificationData\"] };\n\nconst otherFunctionsToCallByLibrary = {};\nlibSrcArray.forEach((libSrc) => {\n  const libName = libSrc.split(\"lib.\")[1];\n  otherFunctionsToCallByLibrary[libName] = [];\n});\n\nState.init({\n  functionsToCallByLibrary: otherFunctionsToCallByLibrary, // is a LibsCalls object\n  notifications: {},\n});\n// END LIB CALLS SECTION\n\nfunction log(message) {\n  console.log(`lib.${libName}`, message);\n}\n\nfunction logError(message) {\n  console.error(`lib.${libName}`, message);\n}\n\nfunction libStateUpdate(obj) {\n  State.update(obj);\n}\n\n// START LIB FUNCTIONS: EDIT set functions you need\nfunction canUserUpVote(props) {\n  const { env, accountId, sbtsNames } = props;\n\n  if (sbtsNames.includes(\"public\")) return true;\n\n  if (accountId) {\n    setAreValidUsers([accountId], sbtsNames);\n  } else {\n    return false;\n  }\n\n  let allSBTsValidations = [];\n\n  let result;\n\n  let userCredentials =\n    usersSBTs.find((data) => data.user === accountId).credentials ??\n    state[`isValidUser-${accountId}`];\n\n  if (userCredentials) {\n    const allSBTs = Object.keys(userCredentials);\n\n    allSBTs.forEach((sbt) => {\n      sbt !== \"public\" && allSBTsValidations.push(userCredentials[sbt]);\n    });\n\n    result = allSBTsValidations.includes(true);\n  }\n\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n    const discardCondition =\n      call.functionName === \"canUserUpVote\" && result !== undefined;\n    return !discardCondition;\n  });\n\n  return result;\n}\n\nfunction setAreValidUsers(accountIds, sbtsNames) {\n  const newLibsCalls = Object.assign({}, state.functionsToCallByLibrary);\n\n  if (!newLibsCalls.SBT) {\n    logError(\"Key SBT is not set in lib.\", libName);\n  }\n\n  accountIds.forEach((accountId) => {\n    const isCallPushed =\n      newLibsCalls.SBT.find((libCall) => {\n        return (\n          libCall.functionName === \"isValidUser\" &&\n          libCall.props.accountId === accountId\n        );\n      }) !== undefined;\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\n\n    if (isCallPushed || isCallReturned) {\n      return;\n    }\n\n    const existingUserSBTs = usersSBTs.find(\n      (userSBTs) => userSBTs.user === accountId\n    );\n\n    if (!existingUserSBTs) {\n      newLibsCalls.SBT.push({\n        functionName: \"isValidUser\",\n        key: `isValidUser-${accountId}`,\n        props: {\n          accountId,\n          sbtsNames,\n        },\n      });\n    }\n  });\n\n  State.update({ functionsToCallByLibrary: newLibsCalls });\n}\n\nfunction addVote(props) {\n  const { id, articleSbts, articleAuthor } = props;\n  saveUpVote(id, articleSbts, articleAuthor);\n\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n    return call.functionName !== \"addVote\";\n  });\n\n  // return upVote;\n}\n\nfunction deleteVote(props) {\n  const { id, upVoteId } = props;\n\n  saveDeleteVote(id, upVoteId);\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n    return call.functionName !== \"deleteVote\";\n  });\n}\n\nfunction getNotificationData(type, accountId, url) {\n  if (state.notifications.getNotificationData) {\n    return state.notifications.getNotificationData(type, accountId, url);\n  }\n}\n\nconst saveDeleteVote = (id, upVoteId, onCommit, onCancel) => {\n  if (id && upVoteId) {\n    const newData = composeDeleteUpVoteData(id, upVoteId);\n\n    Social.set(newData, {\n      force: true,\n      onCommit,\n      onCancel,\n    });\n  } else {\n    logError(\"delete upVote props are wrong\");\n  }\n};\n\nfunction composeDeleteUpVoteData(id, upVoteId) {\n  const data = {\n    index: {\n      [action]: JSON.stringify({\n        key: id,\n        value: {\n          isDelete: true,\n          upVoteId,\n        },\n      }),\n    },\n  };\n\n  return data;\n}\n\nconst saveUpVote = (id, articleSbts, articleAuthor, onCommit, onCancel) => {\n  if (id) {\n    const newData = composeUpVoteData(id, articleSbts, articleAuthor);\n\n    Social.set(newData, {\n      force: true,\n      onCommit,\n      onCancel,\n    });\n  } else {\n    logError(\"upVote id is missing\");\n  }\n};\n\nfunction composeUpVoteData(id, articleSbts, articleAuthor) {\n  const data = {\n    index: {\n      [action]: JSON.stringify({\n        key: id,\n        value: {\n          upVoteId: `uv-${context.accountId}-${Date.now()}`,\n          sbts: articleSbts,\n        },\n      }),\n    },\n  };\n\n  const dataToAdd = getNotificationData(\n    \"upVote\",\n    [articleAuthor],\n    `https://near.social/${widgets.thisForum}?sharedArticleId=${id}${\n      isTest ? \"&isTest=t\" : \"\"\n    }`\n  );\n\n  data.post = dataToAdd.post;\n  data.index.notify = dataToAdd.index.notify;\n\n  return data;\n}\n\nfunction getUpVoteBlackListByBlockHeight() {\n  return [];\n}\n\nfunction getUpVotesData(action, id, subscribe) {\n  return Social.index(action, id, {\n    order: \"desc\",\n    subscribe,\n  });\n}\n\nfunction getupVotesNormalized(id) {\n  const upVotesByVersion = Object.keys(versions).map((version, index, arr) => {\n    const action = versions[version].action;\n    const subscribe = index + 1 === arr.length;\n    const allUpVotes = getUpVotesData(action, id, subscribe);\n    if (!allUpVotes) return undefined;\n\n    const validUpVotes = filterInvalidUpVotes(env, allUpVotes);\n    const latestEdits = getLatestEdits(validUpVotes);\n\n    const nonDeletedVotes = latestEdits.filter((vote) => {\n      return !vote.value.isDelete;\n    });\n    return nonDeletedVotes;\n  });\n  if (upVotesByVersion.includes(undefined)) return undefined;\n\n  return normalizeLibData(upVotesByVersion);\n}\n\nfunction getLatestEdits(upVotes) {\n  return upVotes.filter((obj) => {\n    const userLatestInteraction = upVotes.find(\n      (vote) => vote.accountId === obj.accountId\n    );\n    return JSON.stringify(userLatestInteraction) === JSON.stringify(obj);\n  });\n}\n\nfunction filterInvalidUpVotes(env, upVotes) {\n  return upVotes\n    .filter((upVote) => upVote.value.upVoteId) // Has id\n    .filter(\n      (upVote) =>\n        !getUpVoteBlackListByBlockHeight().includes(upVote.blockHeight) // Blockheight is not in blacklist\n    );\n}\n\nfunction getUpVotes(props) {\n  const { sbtsNames: articleSbts, id } = props;\n  // Call other libs\n  const normUpVotes = getupVotesNormalized(id);\n  if (!normUpVotes) return undefined;\n\n  const lastUpVotesAuthors = normUpVotes.map((upVote) => {\n    return upVote.accountId;\n  });\n  setAreValidUsers(lastUpVotesAuthors, articleSbts);\n\n  lastUpVotesAuthors.forEach((accountId) => {\n    resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n      const discardCondition =\n        call.functionName === \"getUpVotes\" &&\n        state[`isValidUser-${accountId}`] !== undefined;\n      return !discardCondition;\n    });\n  });\n\n  const finalUpVotes = filterValidUpVotes(normUpVotes, articleSbts);\n  const finalUpVotesMapped = {};\n\n  articleSbts.forEach((sbt) => {\n    finalUpVotesMapped[sbt] = finalUpVotes;\n  });\n\n  return finalUpVotesMapped;\n}\n\nfunction filterValidator(upVotes, articleSbts) {\n  if (articleSbts.includes(\"public\")) return upVotes;\n\n  return upVotes.filter((upVote) => {\n    let allSBTsValidations = [];\n\n    let result;\n\n    let userCredentials =\n      usersSBTs.find((data) => data.user === upVote.accountId).credentials ??\n      state[`isValidUser-${upVote.accountId}`];\n\n    if (userCredentials) {\n      const allSBTs = Object.keys(userCredentials);\n\n      allSBTs.forEach((sbt) => {\n        sbt !== \"public\" && allSBTsValidations.push(userCredentials[sbt]);\n      });\n\n      result = allSBTsValidations.includes(true);\n    }\n\n    return result;\n\n    // return (\n    //   articleSbts.find((sbt) => {\n    //     return (\n    //       state[`isValidUser-${upVote.accountId}`][sbt] || sbt === \"public\"\n    //     );\n    //   }) !== undefined\n    // );\n  });\n}\n\nfunction filterValidUpVotes(upVotes, articleSbts) {\n  let filteredUpVotes = filterValidator(\n    filteredUpVotes ?? upVotes,\n    articleSbts\n  );\n\n  return filteredUpVotes;\n}\n\n// END LIB FUNCTIONS\n\n// EDIT: set functions you want to export\nfunction callFunction(call) {\n  if (call.functionName === \"canUserUpVote\") {\n    return canUserUpVote(call.props);\n  } else if (call.functionName === \"addVote\") {\n    return addVote(call.props);\n  } else if (call.functionName === \"deleteVote\") {\n    return deleteVote(call.props);\n  } else if (call.functionName === \"getUpVotes\") {\n    return getUpVotes(call.props);\n  }\n}\n\n// EDIT: set versions you want to handle, considering their action to Social.index and the way to transform to one version to another (normalization)\nfunction normalizeOldToV_0_0_1(upVote) {\n  return upVote;\n}\n\nfunction normalizeFromV0_0_1ToV0_0_2(upVote) {\n  upVote.sbts = [\"public\"];\n  return upVote;\n}\n\nfunction normalizeFromV0_0_2ToV0_0_3(upVote) {\n  return upVote;\n}\n\nconst versions = {\n  old: {\n    normalizationFunction: normalizeOldToV_0_0_1,\n    action: props.isTest ? `test_${baseAction}` : baseAction,\n  },\n  \"v0.0.1\": {\n    normalizationFunction: normalizeFromV0_0_1ToV0_0_2,\n    action: props.isTest ? `test_${baseAction}-v0.0.1` : `${baseAction}-v0.0.1`,\n  },\n  \"v0.0.2\": {\n    normalizationFunction: normalizeFromV0_0_2ToV0_0_3,\n    action: props.isTest ? `test_${baseAction}_v0.0.2` : `${baseAction}_v0.0.2`,\n  },\n};\n\nfunction normalizeLibData(libDataByVersion) {\n  let libData;\n\n  Object.keys(versions).forEach((version, index, array) => {\n    const normFn = versions[version].normalizationFunction;\n    const normLibData = libDataByVersion[index].map((libData, i) => {\n      return normFn(libData);\n    });\n\n    if (index + 1 === array.length) {\n      // Last index\n      libData = normLibData;\n      return;\n    }\n    libDataByVersion[index + 1] =\n      libDataByVersion[index + 1].concat(normLibData);\n  });\n\n  return libData;\n}\n\nif (functionsToCall && functionsToCall.length > 0) {\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\n  resultFunctionsToCall = [...functionsToCall];\n  functionsToCall.forEach((call) => {\n    updateObj[call.key] = callFunction(call);\n  });\n\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\n\n  const oldUsersSBTs = usersSBTs;\n  // {\n  //   user: string,\n  //   credentials: {},\n  // }\n\n  const newUsersSBTs = Object.keys(state).map((key) => {\n    if (key.includes(\"isValidUser-\")) {\n      if (state[key] !== undefined) {\n        const user = key.split(\"isValidUser-\")[1];\n        const credentials = state[key];\n\n        const oldUsers = oldUsersSBTs.map((userSbts) => userSbts.user);\n\n        if (!oldUsers.includes(user)) {\n          return {\n            user,\n            credentials,\n          };\n        }\n      }\n    }\n  });\n\n  const finalUsersSBTs = [...oldUsersSBTs, ...newUsersSBTs].filter(\n    (userSBTs) => userSBTs !== undefined\n  );\n\n  if (finalUsersSBTs[0]) {\n    mainStateUpdate({ usersSBTs: finalUsersSBTs });\n  }\n\n  stateUpdate(updateObj);\n}\n\nreturn (\n  <>\n    {libSrcArray.map((src) => {\n      return callLibs(\n        src,\n        libStateUpdate,\n        state.functionsToCallByLibrary,\n        {},\n        `lib.${libName}`\n      );\n    })}\n\n    <Widget\n      src={`${widgets.libs.libNotifications}`}\n      props={{\n        stateUpdate: libStateUpdate,\n        imports: imports[\"notifications\"],\n        fatherNotificationsState: state.notifications,\n      }}\n    />\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/lib.upVotes", "fact_widget_deployments_id": "237a1d042e178db3bb0efdc7d08b264c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}