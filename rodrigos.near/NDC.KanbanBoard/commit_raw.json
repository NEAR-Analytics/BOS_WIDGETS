{"tx_hash": "BP2d3xJVPbhRXKVKbjtuR3vVe4nL22f4PJiAaHoBdsVf", "action_id_social": "Cq8JRBx7X4Ma7wEvRAM1UMNgu5ir387MXUB1MrpuPp5A-0-widget", "block_id": 113194166, "block_timestamp": "2024-02-20T02:55:56.209Z", "signer_id": "rodrigos.near", "widget_name": "NDC.KanbanBoard", "source_code": "// NDC.KanbanBoard\n\nconst {\n  isTest,\n  widgets,\n  kanbanColumns,\n  finalArticles,\n  handleOpenArticle,\n  handleShareButton,\n  handleFilterArticles,\n  authorForWidget,\n  kanbanRequiredTags,\n  kanbanExcludedTags,\n  sbts,\n  baseActions,\n  callLibs,\n} = props;\n\n//Commented so you can test if needed\n\n// function callLibs(\n//   src,\n//   stateUpdate,\n//   functionsToCallByLibrary,\n//   extraProps,\n//   callerWidget\n// ) {\n//   return (\n//     <Widget\n//       src={src}\n//       props={{\n//         isTest,\n//         stateUpdate,\n//         functionsToCallByLibrary,\n//         callLibs,\n//         widgets,\n//         callerWidget,\n//         ...extraProps,\n//       }}\n//     />\n//   );\n// }\n\n//This is here so the code dosn't brake if the functions are not passed\nif (!handleFilterArticles) {\n  handleFilterArticles = () => {\n    console.log(\"handleFilterArticles clicked\");\n  };\n}\nif (!handleOpenArticle) {\n  handleOpenArticle = () => {\n    console.log(\"handleOpenArticle clicked\");\n  };\n}\nif (!handleShareButton) {\n  handleShareButton = () => {\n    console.log(\"handleShareButton clicked\");\n  };\n}\n\nconst articles = finalArticles[sbts[0]];\n\nif (!articles) {\n  return (\n    <h4 className=\"text-danger\">\n      Prop \"articles\" passed wrongly to NDC.KanbanBoard\n    </h4>\n  );\n}\n\nif (!kanbanRequiredTags) {\n  kanbanRequiredTags = [];\n}\n\nif (!kanbanExcludedTags) {\n  kanbanExcludedTags = [];\n}\n\nif (!kanbanColumns) {\n  kanbanColumns = [\"widget\", \"integration\", \"feature-request\"];\n}\n\nconst CursorPointer = styled.p`\n    cursor: pointer;\n  `;\n\nconst articlesPerLabel = kanbanColumns.map((cl) => {\n  let articlesOnThisColumn = articles.filter((article) => {\n    const lowerCaseCL = cl.toLocaleLowerCase().replace(` `, \"-\");\n\n    return article.tags.includes(lowerCaseCL);\n  });\n  return { label: cl, articles: articlesOnThisColumn };\n});\n\nfunction getColumnWidth() {\n  if (articlesPerLabel.length <= 3) {\n    return \"4\";\n  } else {\n    return \"3\";\n  }\n}\n\nreturn (\n  <div>\n    <div className=\"row mb-2\">\n      {kanbanRequiredTags.length > 0 ? (\n        <div className=\"col\">\n          <small className=\"text-muted\">\n            Required tags:\n            {kanbanRequiredTags.map((label) => {\n              return (\n                <CursorPointer\n                  onClick={() =>\n                    handleFilterArticles({\n                      filterBy: \"tag\",\n                      value: { label },\n                    })\n                  }\n                >\n                  <Widget\n                    src={\n                      widgets.views.standardWidgets.newStyledComponents.Element\n                        .Badge\n                    }\n                    props={{\n                      children: label,\n                      variant: \"round info\",\n                      size: \"lg\",\n                    }}\n                  />\n                </CursorPointer>\n              );\n            })}\n          </small>\n        </div>\n      ) : null}\n      {kanbanExcludedTags.length > 0 ? (\n        <div className=\"col\">\n          <small className=\"text-muted\">\n            Excluded labels:\n            {kanbanExcludedTags.map((label) => {\n              return (\n                <CursorPointer\n                  onClick={() =>\n                    handleFilterArticles({\n                      filterBy: \"tag\",\n                      value: { label },\n                    })\n                  }\n                >\n                  <Widget\n                    src={\n                      widgets.views.standardWidgets.newStyledComponents.Element\n                        .Badge\n                    }\n                    props={{\n                      children: label,\n                      variant: \"round info\",\n                      size: \"lg\",\n                    }}\n                  />\n                </CursorPointer>\n              );\n            })}\n          </small>\n        </div>\n      ) : null}\n    </div>\n\n    <div className=\"row\">\n      {articlesPerLabel.map((col) => {\n        return (\n          <div className={`col-${getColumnWidth()}`}>\n            <div className=\"card\">\n              <div className=\"card-body border-secondary\">\n                <h6 className=\"card-title\">\n                  {col.label.toUpperCase()}({col.articles.length})\n                </h6>\n                {col.articles.map((article) => {\n                  return (\n                    <Widget\n                      src={widgets.views.editableWidgets.compactPost}\n                      props={{\n                        widgets,\n                        article,\n                        kanbanColumns,\n                        handleOpenArticle,\n                        handleFilterArticles,\n                        handleShareButton,\n                        colLabel: col.label,\n                        baseActions,\n                        callLibs,\n                      }}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/NDC.KanbanBoard", "fact_widget_deployments_id": "877aab997fc41dbab478281a292cfe5a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}