{"tx_hash": "2ZADFAMjK2KVXj6446MEvWmG6UJ3H3iqEEHEKvKgxaAD", "action_id_social": "2KKyMWgET8z8kwr2DHBPfno5mCwCz4MzZnQCYcBWNDHY-0-widget", "block_id": 113193964, "block_timestamp": "2024-02-20T02:52:07.032Z", "signer_id": "rodrigos.near", "widget_name": "NDC.UpVoteButton", "source_code": "//NDC.UpVoteButton\n\nconst {\n  isTest,\n  authorForWidget,\n  reactedElementData,\n  widgets,\n  disabled,\n  articleSbts,\n  upVotes: articleUpVotes,\n  callLibs,\n  baseActions,\n} = props;\n\nconst data = reactedElementData;\n\nconst libSrcArray = [widgets.libs.libUpVotes];\n\nconst initLibCalls = {\n  upVotes: [\n    {\n      functionName: \"getUpVotes\",\n      key: \"upVotesBySBT\",\n      props: {\n        id: data.id ?? `${data.author}-${data.timeCreate}`,\n        sbtsNames: articleSbts,\n      },\n    },\n  ],\n};\nconst initUpVotesBySBT = {};\n\nif (!articleUpVotes) {\n  State.init({\n    functionsToCallByLibrary: initLibCalls,\n    articleUpVotes: [],\n    upVotesBySBT: initUpVotesBySBT,\n  });\n} else {\n  State.init({\n    articleUpVotes,\n    functionsToCallByLibrary: { upVotes: [] },\n  });\n}\n\nif (state.upVotesBySBT && Object.keys(state.upVotesBySBT).length > 0) {\n  const key = Object.keys(state.upVotesBySBT)[0]; // There should always be one for now\n  const newUpvotes = state.upVotesBySBT[key];\n  if (JSON.stringify(state.articleUpVotes) !== JSON.stringify(newUpvotes)) {\n    State.update({ articleUpVotes: newUpvotes });\n  }\n}\n\nlet upVotesData = state.articleUpVotes;\n\nlet userVote = upVotesData.find((vote) => vote.accountId === context.accountId);\n\nlet hasUserVoted = userVote !== undefined;\n\nfunction getUpVoteButtonClass() {\n  if (hasUserVoted) {\n    return \"info\";\n  } else {\n    return \"info outline\";\n  }\n}\n\nfunction stateUpdate(obj) {\n  State.update(obj);\n}\n\nfunction upVoteButtonListener() {\n  let newLibCalls = Object.assign({}, state.functionsToCallByLibrary);\n\n  if (!hasUserVoted) {\n    newLibCalls.upVotes.push({\n      functionName: \"addVote\",\n      key: \"newVote\",\n      props: {\n        id: data.id ?? `${data.author}-${data.timeCreate}`,\n        articleSbts: data.sbts,\n        articleAuthor: data.author,\n      },\n    });\n  } else {\n    newLibCalls.upVotes.push({\n      functionName: \"deleteVote\",\n      key: \"deletedVote\",\n      props: {\n        id: data.id ?? `${data.author}-${data.timeCreate}`,\n        upVoteId: userVote.value.upVoteId,\n      },\n    });\n  }\n  State.update({ functionsToCallByLibrary: newLibCalls });\n}\n\nconst IconContainer = styled.div`\n    transform: rotate(-90deg);\n  `;\n\nconst Icon = styled.i`\n    margin: 0px !important;\n  `;\n\nconst CallLibrary = styled.div`\n    display: none;\n  `;\n\nreturn (\n  <>\n    <div title={disabled && \"You don't own this SBT\"}>\n      <Widget\n        src={widgets.views.standardWidgets.newStyledComponents.Input.Button}\n        props={{\n          children: (\n            <div className=\"d-flex\">\n              <span>{`+${upVotesData.length}`}</span>\n              <IconContainer>\n                <Icon\n                  className={`bi bi-fast-forward-fill ${\n                    !disabled && \"text-success\"\n                  }`}\n                ></Icon>\n              </IconContainer>\n            </div>\n          ),\n          disabled,\n          className: `${getUpVoteButtonClass()}`,\n          size: \"sm\",\n          onClick: upVoteButtonListener,\n        }}\n      />\n    </div>\n\n    <CallLibrary>\n      {libSrcArray.map((src) => {\n        return callLibs(\n          src,\n          stateUpdate,\n          state.functionsToCallByLibrary,\n          { baseAction: baseActions.upVoteBaseAction },\n          \"Up vote button\"\n        );\n      })}\n    </CallLibrary>\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/NDC.UpVoteButton", "fact_widget_deployments_id": "30cee004962ed36073f464b5aafeb35b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}