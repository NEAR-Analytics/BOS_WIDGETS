{"tx_hash": "7FxWA3Rg8uMtyoSkxgRJPMAex2cmnGgvjJqXuAuU1BCf", "action_id_social": "FD2PkbCVuAVpseigHymxHND9mdpjnvqwqBfHt4Q5etfs-0-widget", "block_id": 97405764, "block_timestamp": "2023-07-26T21:50:45.115Z", "signer_id": "rodrigos.near", "widget_name": "MetaPoolStakeEth", "source_code": "State.init({\n  openModal: false,\n  loading: false,\n});\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 5) {\n  return <p>Switch to Ethereum Goerli</p>;\n}\n\n// FETCH LIDO ABI\n\nconst stakingAddress = \"0x748c905130CC15b92B97084Fd1eEBc2d2419146f\";\nconst tokenDecimals = 18;\n\nconst metapoolAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst iface = new ethers.utils.Interface(metapoolAbi);\n\n// FETCH LIDO STAKING APR\n\nif (state.metrics === undefined) {\n  const resp = fetch(\"https://eth-metapool.narwallets.com/metrics_json\");\n  console.log(resp);\n  if (!resp) return;\n  State.update({ metrics: resp?.body ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: stakingAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    stakingAddress,\n    metapoolAbi,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  State.update({ loading: true });\n\n  erc20\n    .depositETH(state.sender, { value: amount })\n    .then((txResp) => {\n      txResp\n        .wait()\n        .then((waitResp) =>\n          State.update({ openModal: true, loading: false, strEther: 0 })\n        );\n    })\n    .catch((waitResp) => State.update({ loading: false }));\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\n// STYLED COMPONENTS\n\nconst LidoContainer = styled.div`\n  box-sizing: border-box;\n  margin: 0px auto;\n  min-width: 320px;\n  width: 100%;\n  padding: 0px 32px 32px 32px;\n  max-width: 560px;\n  position: relative;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  background:  linear-gradient( rgb(206, 255, 26) 0%, rgb(206, 255, 26) 40%, rgb(247, 249, 251) 40%, rgb(247, 249, 251) 100%);\n`;\n\nconst Header = styled.div`\n  font-weight: 800;\n  font-size: 26px;\n  padding-top: 15px;\n  margin-bottom: 0.2em;\n  line-height: 1.2em;\n  text-align: center;\n`;\n\nconst LidoForm = styled.div`\n  background: rgb(12, 34, 70);\n  margin-bottom: -20px;\n  border-bottom-left-radius: 0px;\n  border-bottom-right-radius: 0px;\n  padding-bottom: 52px;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.6em;\n  border-radius: 20px;\n  margin: 0px;\n  padding: 12px 32px 32px 32px;\n  box-shadow: none;\n  color: #fff;    \n`;\n\nconst LidoFormTopContainer = styled.div`\n  margin-top: 0px;\n  display: flex;\n  margin: 10px 0px;\n`;\n\nconst LidoFormTopContainerLeft = styled.div`\n  margin-right: 18px;\n  flex-basis: 50%;\n  -webkit-box-flex: 1;\n  flex-grow: 1;\n  font-size: 12px;\n  line-height: 1.6em;\n`;\n\nconst LidoFormTopContainerLeftContent1 = styled.div`\n  display: flex;\n  flex-direction: row;\n  -webkit-box-pack: start;\n  justify-content: flex-start;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst LidoFormTopContainerLeftContent1Container = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst LidoFormTopContainerLeftContent1Circle = styled.div`\n  background-color: #53BA95;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  margin-left: 8px;\n`;\n\nconst LidoFormTopContainerLeftContent2 = styled.div`\n  margin-top: 2px;\n  font-size: 18px;\n  line-height: 1.4em;\n  font-weight: 800;\n  white-space: nowrap;\n  display: block;\n`;\n\nconst LidoFormTopContainerCenter = styled.div`\n  flex-basis: 50%;\n  -webkit-box-flex: 1;\n  flex-grow: 1;\n  font-size: 12px;\n  line-height: 1.6em;\n`;\n\nconst LidoFormTopContainerCenterContent1 = styled.div`\n  display: flex;\n  flex-direction: row;\n  -webkit-box-pack: start;\n  justify-content: center;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst LidoFormTopContainerCenterContent1Container = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst LidoFormTopContainerCenterContent2 = styled.div`\n  margin-top: 2px;\n  font-size: 18px;\n  line-height: 1.4em;\n  font-weight: 800;\n  white-space: nowrap;\n  text-align: center;\n  display: block;\n`;\n\nconst LidoFormTopContainerRight = styled.div`\n  margin-left: 18px;\n  flex-basis: 50%;\n  -webkit-box-flex: 1;\n  flex-grow: 1;\n  font-size: 12px;\n  line-height: 1.6em;\n`;\n\nconst LidoFormTopContainerRightContent1 = styled.div`\n  display: flex;\n  flex-direction: row;\n  -webkit-box-pack: start;\n  justify-content: flex-end;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst LidoFormTopContainerRightContent1Container = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst LidoFormTopContainerRightContent2 = styled.div`\n  margin-top: 2px;\n  font-size: 18px;\n  line-height: 1.4em;\n  font-weight: 800;\n  white-space: nowrap;\n  text-align: end;\n  display: block;\n`;\n\nconst StakeFormWrapper = styled.div`\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n  border-radius: 16px;\n  width: 100%;\n  align-items: center;\n  div {\n    gap: 20px;\n  }\n  padding: 20px 20px 20px 20px;\n  margin-top: -30px;\n  border:1px solid rgb(212, 224, 231)\n`;\n\nconst Spacer = styled.div`\n  height: 20px;\n`;\n\nreturn (\n  <Theme>\n    <LidoContainer>\n      <Header>\n        <div class=\"LidoFormTopContainerRight\">\n          <div class=\"LidoFormTopContainerRightContent1\">\n            <div class=\"LidoFormTopContainerRightContent1Text\">\n              <span>{getSender()}</span>\n            </div>\n          </div>\n        </div>\n        <Widget\n          src={`pierre-dev.near/widget/MetaPool.Element.TitleAndDescription`}\n        />\n      </Header>\n\n      <LidoForm>\n        {state.sender && (\n          <LidoFormTopContainer>\n            <LidoFormTopContainerLeft>\n              <LidoFormTopContainerLeftContent1>\n                <LidoFormTopContainerLeftContent1Container>\n                  <span>Available to stake</span>\n                  <LidoFormTopContainerLeftContent1Circle />\n                </LidoFormTopContainerLeftContent1Container>\n              </LidoFormTopContainerLeftContent1>\n              <LidoFormTopContainerLeftContent2>\n                <span>\n                  {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                </span>\n              </LidoFormTopContainerLeftContent2>\n            </LidoFormTopContainerLeft>\n\n            <LidoFormTopContainerCenter>\n              <LidoFormTopContainerCenterContent1>\n                <LidoFormTopContainerCenterContent1Container>\n                  APY\n                </LidoFormTopContainerCenterContent1Container>\n              </LidoFormTopContainerCenterContent1>\n              <LidoFormTopContainerCenterContent2>\n                {state.metrics?.mp_eth_30_day_apy\n                  ? state.metrics.mp_eth_30_day_apy.toFixed(2)\n                  : \"...\"}\n                %\n              </LidoFormTopContainerCenterContent2>\n            </LidoFormTopContainerCenter>\n\n            <LidoFormTopContainerRight>\n              <LidoFormTopContainerRightContent1>\n                <LidoFormTopContainerRightContent1Container>\n                  <span>Staked amount</span>\n                </LidoFormTopContainerRightContent1Container>\n              </LidoFormTopContainerRightContent1>\n              <LidoFormTopContainerRightContent2>\n                <span>\n                  {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                  &nbsp;mpETH\n                </span>\n              </LidoFormTopContainerRightContent2>\n            </LidoFormTopContainerRight>\n          </LidoFormTopContainer>\n        )}\n      </LidoForm>\n      {false && (\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\n              ></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (state.balance > 0.05\n                  ? parseFloat(state.balance) - 0.05\n                  : 0\n                ).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n      )}\n      {!!state.sender ? (\n        <>\n          {false && (\n            <button\n              class=\"LidoStakeFormSubmitContainer\"\n              onClick={() => submitEthers(state.strEther, state.sender)}\n            >\n              <span>Submit</span>\n            </button>\n          )}\n          <StakeFormWrapper>\n            <Widget\n              src={`rodrigos.near/widget/MetaPoolStakeEth.Input`}\n              props={{\n                placeholder: \"Enter ETH amount\",\n                value: state.strEther,\n                onChange: (e) => State.update({ strEther: e.target.value }),\n                onClickMax: () => {\n                  State.update({\n                    strEther: (state.balance > 0.05\n                      ? parseFloat(state.balance) - 0.05\n                      : 0\n                    ).toFixed(2),\n                  });\n                },\n                inputError: state.inputError,\n                balance: nearBalance,\n                iconName: \"NEAR\",\n                iconUrl:\n                  \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n              }}\n            />\n            <Widget\n              src={`pierre-dev.near/widget/MetaPool.Element.YouWillGet`}\n              props={{\n                value:\n                  state.strEther && state.metrics\n                    ? (state.strEther * state.metrics.mpethPrice).toFixed(2)\n                    : 0,\n                price: 1,\n                iconName: \"mpETH\",\n                iconUrl:\n                  \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n              }}\n            />\n            <Widget\n              src={`rodrigos.near/widget/MetaPoolStakeEth.Button`}\n              props={{\n                onClick: () => submitEthers(state.strEther, state.sender),\n                disabled: state.loading,\n                text: state.loading ? \"Wait...\" : \"Stake ETH\",\n              }}\n            />\n          </StakeFormWrapper>\n          <Widget\n            src={\"rodrigos.near/widget/MetaPoolStakeEth.PopUp\"}\n            props={{\n              open: state.openModal,\n              onClose: () => State.update({ openModal: false }),\n            }}\n          />\n        </>\n      ) : (\n        <Web3Connect\n          className=\"LidoStakeFormSubmitContainer\"\n          connectLabel=\"Connect with Web3\"\n        />\n      )}\n    </LidoContainer>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/MetaPoolStakeEth", "fact_widget_deployments_id": "6f01ff263685a821e0e60822fa2ccd3c", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 19}