{"tx_hash": "ESRx4T6dBsdzKD7X6U1Am7Dmtjj5G7aen49rGkAaqZe5", "action_id_social": "5QGYQW5v638xMCqauzfjMnBe7hq7JF4yNgbRXoHuQPCV-0-widget", "block_id": 113193777, "block_timestamp": "2024-02-20T02:48:28.666Z", "signer_id": "rodrigos.near", "widget_name": "lib.emojis", "source_code": "// lib.emojis\n\nconst {\n  mainStateUpdate,\n  isTest,\n  stateUpdate,\n  functionsToCallByLibrary,\n  callLibs,\n  baseAction,\n  widgets,\n  usersSBTs,\n} = props;\n\nconst libName = \"emojis\"; // EDIT: set lib name\nconst functionsToCall = functionsToCallByLibrary[libName];\n\nlet resultFunctionsToCallByLibrary = Object.assign(\n  {},\n  functionsToCallByLibrary\n);\nlet resultFunctionsToCall = [];\n\nconst currentVersion = \"0.0.1\"; // EDIT: Set version\n\nconst prodAction = `${baseAction}_v${currentVersion}`;\nconst testAction = `test_${prodAction}`;\nconst versionsBaseActions = isTest ? `test_${baseAction}` : baseAction;\nconst action = isTest ? testAction : prodAction;\n\n// START LIB CALLS SECTION\n// interface FunctionCall {\n//     functionName: string,\n//     key: string, // The state of the caller will be updated with this string as a key\n//     props: Record<string, any> // function parameters as object\n// }\n\n// type LibsCalls = Record<string, FunctionCall> // Key is lib name after lib.\n\nconst libSrcArray = [widgets.libs.libSBT]; // string to lib widget // EDIT: set libs to call\n\nconst libsCalls = {};\nlibSrcArray.forEach((libSrc) => {\n  const libName = libSrc.split(\"lib.\")[1];\n  libsCalls[libName] = [];\n});\n\nState.init({\n  libsCalls, // is a LibsCalls object\n});\n// END LIB CALLS SECTION\n\nfunction log(message) {\n  console.log(`lib.${libName}`, message);\n}\n\nfunction logError(message) {\n  console.error(`lib.${libName}`, message);\n}\n\nfunction libStateUpdate(obj) {\n  State.update(obj);\n}\n\n// START LIB FUNCTIONS: EDIT set functions you need\nfunction canUserReact(props) {\n  const { env, accountId, sbtsNames } = props;\n\n  if (sbtsNames.includes(\"public\")) return true;\n\n  if (accountId) {\n    setAreValidUsers([accountId], sbtsNames);\n  } else {\n    return false;\n  }\n\n  let allSBTsValidations = [];\n\n  let result;\n\n  let userCredentials =\n    usersSBTs.find((data) => data.user === accountId).credentials ??\n    state[`isValidUser-${accountId}`];\n\n  if (userCredentials) {\n    const allSBTs = Object.keys(userCredentials);\n\n    allSBTs.forEach((sbt) => {\n      sbt !== \"public\" && allSBTsValidations.push(userCredentials[sbt]);\n    });\n\n    result = allSBTsValidations.includes(true);\n  }\n\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n    const discardCondition =\n      call.functionName === \"canUserReact\" && result !== undefined;\n    return !discardCondition;\n  });\n\n  return result;\n}\n\nfunction setAreValidUsers(accountIds, sbtsNames) {\n  const newLibsCalls = Object.assign({}, state.libsCalls);\n  if (!newLibsCalls.SBT) {\n    logError(\"Key SBT is not set in lib.\", libName);\n  }\n\n  accountIds.forEach((accountId) => {\n    const isCallPushed =\n      newLibsCalls.SBT.find((libCall) => {\n        return (\n          libCall.functionName === \"isValidUser\" &&\n          libCall.props.accountId === accountId\n        );\n      }) !== undefined;\n    const isCallReturned = state[`isValidUser-${accountId}`] !== undefined;\n\n    if (isCallPushed || isCallReturned) {\n      return;\n    }\n\n    const existingUserSBTs = usersSBTs.find(\n      (userSBTs) => userSBTs.user === accountId\n    );\n\n    if (!existingUserSBTs) {\n      newLibsCalls.SBT.push({\n        functionName: \"isValidUser\",\n        key: `isValidUser-${accountId}`,\n        props: {\n          accountId,\n          sbtsNames,\n        },\n      });\n    }\n  });\n  State.update({ libsCalls: newLibsCalls });\n}\n\nfunction createEmoji(props) {\n  const { reaction, elementReactedId, articleSbts, onCommit, onCancel } = props;\n\n  saveHandler(reaction, elementReactedId, articleSbts, onCommit, onCancel);\n\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n    return call.functionName !== \"createEmoji\";\n  });\n\n  return reaction;\n}\n\nconst saveHandler = (\n  reaction,\n  elementReactedId,\n  articleSbts,\n  onCommit,\n  onCancel\n) => {\n  if (reaction) {\n    const newData = composeReactionData(\n      reaction,\n      elementReactedId,\n      articleSbts\n    );\n\n    Social.set(newData, {\n      force: true,\n      onCommit,\n      onCancel,\n    });\n  } else {\n    logError(\"Reaction is missing\");\n  }\n};\n\nfunction composeReactionData(reaction, elementReactedId, articleSbts) {\n  const data = {\n    index: {\n      [action]: JSON.stringify({\n        key: elementReactedId,\n        value: {\n          reactionId: `r-${context.accountId}-${Date.now()}`,\n          reaction,\n          sbts: articleSbts,\n        },\n      }),\n    },\n  };\n\n  return data;\n}\n\nfunction getReactionBlackListByBlockHeight() {\n  return [];\n}\n\nfunction getReactions(action, elementReactedId) {\n  return Social.index(action, elementReactedId, {\n    order: \"desc\",\n    subscribe: true,\n  });\n}\n\nfunction getEmojisNormalized(env, elementReactedId) {\n  const emojisByVersion = Object.keys(versions).map((version) => {\n    const action = versions[version].action;\n\n    const allReactions = getReactions(action, elementReactedId);\n    if (!allReactions) return [];\n    const validReactions = filterInvalidReactions(env, allReactions);\n\n    return getLatestEdits(validReactions);\n  });\n\n  return normalizeLibData(emojisByVersion);\n}\n\nfunction getLatestEdits(reactions) {\n  return reactions.filter((obj) => {\n    const userLatestInteraction = reactions.find(\n      (vote) => vote.accountId === obj.accountId\n    );\n    return JSON.stringify(userLatestInteraction) === JSON.stringify(obj);\n  });\n}\n\nfunction filterInvalidReactions(env, reactions) {\n  return reactions\n    .filter((reaction) => reaction.value.reactionId) // Has id\n    .filter(\n      (reaction) =>\n        !getReactionBlackListByBlockHeight().includes(reaction.blockHeight) // Blockheight is not in blacklist\n    );\n}\n\nfunction getEmojis(props) {\n  const { env, sbtsNames: articleSbts, elementReactedId } = props;\n\n  // Call other libs\n  const normReations = getEmojisNormalized(env, elementReactedId);\n\n  // Keep last edit from every reaction\n  const lastReactions = normReations.filter((reaction) => {\n    return normReations.find(\n      (compReaction) =>\n        JSON.stringify(compReaction) === JSON.stringify(reaction)\n    );\n  });\n\n  const lastReactionsAuthors = lastReactions.map((reaction) => {\n    return reaction.accountId;\n  });\n\n  setAreValidUsers(lastReactionsAuthors, articleSbts);\n\n  resultFunctionsToCall = resultFunctionsToCall.filter((call) => {\n    const discardCondition =\n      call.functionName === \"getEmojis\" &&\n      state[`isValidUser-${call.props.accountId}`] !== undefined;\n    return !discardCondition;\n  });\n\n  const finalReactions = filterValidEmojis(lastReactions, articleSbts);\n\n  const finalEmojisMapped = {};\n  articleSbts.forEach((sbtName) => {\n    const sbtEmojis = finalReactions.filter((reaction) => {\n      if (!reaction.value.sbts) return false;\n      return reaction.value.sbts.indexOf(sbtName) !== -1;\n    });\n    finalEmojisMapped[sbtName] = sbtEmojis;\n  });\n\n  const groupedReactions = groupReactions(finalEmojisMapped);\n\n  return groupedReactions;\n}\n\nfunction groupReactions(emojisBySBT) {\n  const userReaction = undefined;\n  const accountsGroupedByReaction = {};\n\n  Object.keys(emojisBySBT).forEach((sbtKey) => {\n    const sbtReactions = emojisBySBT[sbtKey];\n    sbtReactions.forEach((reaction) => {\n      if (reaction.accountId === context.accountId) {\n        userReaction = reaction;\n      }\n      const emoji = reaction.value.reaction.split(\" \")[0];\n      if (!accountsGroupedByReaction[emoji]) {\n        accountsGroupedByReaction[emoji] = [];\n      }\n      accountsGroupedByReaction[emoji].push(reaction.accountId);\n    });\n  });\n\n  const reactionsStatistics = Object.keys(accountsGroupedByReaction).map(\n    (reaction) => {\n      return {\n        accounts: accountsGroupedByReaction[reaction],\n        emoji: reaction,\n      };\n    }\n  );\n\n  return { reactionsStatistics, userReaction };\n}\n\nfunction filterValidator(emojis, articleSbts) {\n  if (articleSbts.includes(\"public\")) return emojis;\n\n  return emojis.filter((emoji) => {\n    let allSBTsValidations = [];\n\n    let result;\n\n    let userCredentials =\n      usersSBTs.find((data) => data.user === emoji.accountId).credentials ??\n      state[`isValidUser-${emoji.accountId}`];\n\n    if (userCredentials) {\n      const allSBTs = Object.keys(userCredentials);\n\n      allSBTs.forEach((sbt) => {\n        sbt !== \"public\" && allSBTsValidations.push(userCredentials[sbt]);\n      });\n\n      result = allSBTsValidations.includes(true);\n    }\n\n    return result;\n\n    // return emojis.filter((emoji) => {\n    //   return (\n    //     articleSbts.find((articleSBT) => {\n    //       return (\n    //         state[`isValidUser-${emoji.accountId}`][articleSBT] ||\n    //         articleSBT === \"public\"\n    //       );\n    //     }) !== undefined\n    //   );\n  });\n}\n\nfunction filterValidEmojis(emojis, articleSbts) {\n  let filteredEmojis = filterValidator(filteredEmojis ?? emojis, articleSbts);\n\n  return filteredEmojis;\n}\n\nfunction normalizeOldToV_0_0_1(reaction) {\n  reaction.value.sbts = [\"public\"];\n\n  return reaction;\n}\n\nfunction normalizeFromV0_0_1ToV0_0_2(reaction) {\n  return reaction;\n}\n\n// END LIB FUNCTIONS\n// EDIT: set functions you want to export\nfunction callFunction(call) {\n  if (call.functionName === \"canUserReact\") {\n    return canUserReact(call.props);\n  } else if (call.functionName === \"createEmoji\") {\n    return createEmoji(call.props);\n  } else if (call.functionName === \"getEmojis\") {\n    return getEmojis(call.props);\n  }\n}\n\n// EDIT: set versions you want to handle, considering their action to Social.index and the way to transform to one version to another (normalization)\nconst versions = {\n  old: {\n    normalizationFunction: normalizeOldToV_0_0_1,\n    action: versionsBaseActions,\n  },\n  \"0.0.1\": {\n    normalizationFunction: normalizeFromV0_0_1ToV0_0_2,\n    action: `${versionsBaseActions}_v0.0.1`,\n  },\n};\n\nfunction normalizeLibData(libDataByVersion) {\n  let libData;\n\n  Object.keys(versions).forEach((version, index, array) => {\n    const normFn = versions[version].normalizationFunction;\n    const normLibData = libDataByVersion[index].map((libData, i) => {\n      return normFn(libData);\n    });\n\n    if (index + 1 === array.length) {\n      // Last index\n      libData = normLibData;\n      return;\n    }\n    libDataByVersion[index + 1] =\n      libDataByVersion[index + 1].concat(normLibData);\n  });\n\n  return libData;\n}\n\nif (functionsToCall && functionsToCall.length > 0) {\n  const updateObj = Object.assign({}, functionsToCallByLibrary);\n  resultFunctionsToCall = [...functionsToCall];\n  functionsToCall.forEach((call) => {\n    updateObj[call.key] = callFunction(call);\n  });\n\n  resultFunctionsToCallByLibrary[libName] = resultFunctionsToCall;\n  updateObj.functionsToCallByLibrary = resultFunctionsToCallByLibrary;\n\n  const oldUsersSBTs = usersSBTs;\n  // {\n  //   user: string,\n  //   credentials: {},\n  // }\n\n  const newUsersSBTs = Object.keys(state).map((key) => {\n    if (key.includes(\"isValidUser-\")) {\n      if (state[key] !== undefined) {\n        const user = key.split(\"isValidUser-\")[1];\n        const credentials = state[key];\n\n        const oldUsers = oldUsersSBTs.map((userSbts) => userSbts.user);\n\n        if (!oldUsers.includes(user)) {\n          return {\n            user,\n            credentials,\n          };\n        }\n      }\n    }\n  });\n\n  const finalUsersSBTs = [...oldUsersSBTs, ...newUsersSBTs].filter(\n    (userSBTs) => userSBTs !== undefined\n  );\n\n  if (finalUsersSBTs[0]) {\n    mainStateUpdate({ usersSBTs: finalUsersSBTs });\n  }\n\n  stateUpdate(updateObj);\n}\n\nreturn (\n  <>\n    {libSrcArray.map((src) => {\n      return callLibs(\n        src,\n        libStateUpdate,\n        state.libsCalls,\n        {},\n        `lib.${libName}`\n      );\n    })}\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/lib.emojis", "fact_widget_deployments_id": "ceb610b7f75ccb6181d42b97e3bd2662", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}