{"tx_hash": "rsjfPz86XxMYXscCQ6ZCRKArQyxw9Maq2akqJWRW1Kk", "action_id_social": "2ht7dYXjz23pWCQuY1m82SuWs1eLf3A2JfDoAusWTiz6-0-widget", "block_id": 98434539, "block_timestamp": "2023-08-09T17:00:32.801Z", "signer_id": "rodrigos.near", "widget_name": "workshop-example", "source_code": "// INIT STATE\n\nState.init({\n  chainId: undefined,\n  userAddress: undefined,\n  ethBalance: undefined,\n  mpEthBalance: undefined,\n  amount: \"\",\n});\n\n// CONSTANTS\n\nconst STAKING_ADDRESS = \"0x748c905130CC15b92B97084Fd1eEBc2d2419146f\";\nconst TOKEN_DECIMALS = 18;\nconst METAPOOL_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\n// CONFIGURE CHAIN\n\nif (state.chainId === undefined && ethers !== undefined) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nif (state.chainId !== undefined && state.chainId !== 5) {\n  return <p>Switch to Goerli</p>;\n}\n\n// GET USER ADDRESS\n\nif (state.userAddress === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ userAddress: accounts[0] });\n  }\n}\n\n// GET ETH BALANCE\n\nconst getEthBalance = () => {\n  return Ethers.provider()\n    .getBalance(state.userAddress)\n    .then((balance) => {\n      State.update({\n        ethBalance: Big(balance).div(Big(10).pow(18)).toFixed(5),\n      });\n    });\n};\n\nif (state.ethBalance === undefined && state.userAddress) {\n  getEthBalance();\n}\n\n// GET MPETH BALANCE\n\nconst getMpEthBalance = () => {\n  const iface = new ethers.utils.Interface(METAPOOL_ABI);\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [\n    state.userAddress,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: STAKING_ADDRESS,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      State.update({\n        mpEthBalance: Big(receiverBalanceHex.toString())\n          .div(Big(10).pow(TOKEN_DECIMALS))\n          .toFixed(5),\n      });\n    });\n};\n\nif (state.mpEthBalance === undefined && state.userAddress) {\n  getMpEthBalance();\n}\n\n// STAKE ETH\n\nconst stakeEth = (amount, receiver) => {\n  const erc20 = new ethers.Contract(\n    STAKING_ADDRESS,\n    METAPOOL_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const parseAmount = ethers.utils\n    .parseUnits(amount, tokenDecimals)\n    .toHexString();\n\n  erc20\n    .depositETH(receiver, { value: parseAmount })\n    .then((txResp) => {\n      txResp.wait().then(() => {\n        getEthBalance();\n        getMpEthBalance();\n      });\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n};\n\nreturn (\n  <div\n    style={{\n      display: \"flex\",\n      width: \"100%\",\n      justifyContent: \"center\",\n    }}\n  >\n    {state.userAddress ? (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"10px\",\n          width: \"400px\",\n          alignItems: \"center\",\n        }}\n      >\n        <div>ETH balance: {state.ethBalance || \"loading...\"}</div>\n        <div>mpETH balance: {state.mpEthBalance || \"loading...\"}</div>\n        <input\n          placeHolder=\"Enter ETH amount\"\n          style={{ width: \"200px\" }}\n          value={state.amount}\n          onChange={(e) => State.update({ amount: e.target.value })}\n        ></input>\n        <button onClick={() => stakeEth(state.amount, state.userAddress)}>\n          Stake\n        </button>\n      </div>\n    ) : (\n      <Web3Connect connectLabel=\"Connect with Ethereum wallet\" />\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/workshop-example", "fact_widget_deployments_id": "045515b96882383aea348b2e76010151", "inserted_timestamp": "2023-08-09T18:38:04.250Z", "modified_timestamp": "2023-08-09T18:38:04.250Z", "__row_index": 0}