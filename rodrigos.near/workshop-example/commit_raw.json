{"tx_hash": "CvtHvBujLqZjxvnRXK6Mm2NFNaXLDfJq5hmidznpiGud", "action_id_social": "6cqBBGUbN1xLEM3xZ76RD3rJ25c7vvYHFkp13GW1V5eX-0-widget", "block_id": 98500981, "block_timestamp": "2023-08-10T15:50:33.913Z", "signer_id": "rodrigos.near", "widget_name": "workshop-example", "source_code": "// INIT STATE\n\nState.init({\n  chainId: undefined,\n  userAddress: undefined,\n  ethBalance: undefined,\n  mpEthBalance: undefined,\n  amount: \"\",\n});\n\n// CONSTANTS\n\nconst STAKING_ADDRESS = \"0x748c905130CC15b92B97084Fd1eEBc2d2419146f\";\nconst TOKEN_DECIMALS = 18;\nconst METAPOOL_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\n// CONFIGURE CHAIN\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nif (state.chainId !== undefined && state.chainId !== 5) {\n  return <p style={{ textAlign: \"center\" }}>Switch to Goerli Network</p>;\n}\n\n// GET USER ADDRESS\n\nif (state.userAddress === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ userAddress: accounts[0] });\n  }\n}\n\n// UPDATE ETH BALANCE\n\nconst updateEthBalance = () => {\n  return Ethers.provider()\n    .getBalance(state.userAddress)\n    .then((balance) => {\n      State.update({\n        ethBalance: Big(balance).div(Big(10).pow(18)).toFixed(5),\n      });\n    });\n};\n\nif (state.ethBalance === undefined && state.userAddress) {\n  updateEthBalance();\n}\n\n// UPDATE MPETH BALANCE\n\nconst updateMpEthBalance = () => {\n  const iface = new ethers.utils.Interface(METAPOOL_ABI);\n\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [\n    state.userAddress,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: STAKING_ADDRESS,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      State.update({\n        mpEthBalance: Big(receiverBalanceHex.toString())\n          .div(Big(10).pow(TOKEN_DECIMALS))\n          .toFixed(5),\n      });\n    });\n};\n\nif (state.mpEthBalance === undefined && state.userAddress) {\n  updateMpEthBalance();\n}\n\n// STAKE ETH\n\nconst stakeEth = (amount, receiver) => {\n  const erc20 = new ethers.Contract(\n    STAKING_ADDRESS,\n    METAPOOL_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const parseAmount = ethers.utils\n    .parseUnits(amount, tokenDecimals)\n    .toHexString();\n\n  erc20\n    .depositETH(receiver, { value: parseAmount })\n    .then((txResp) => txResp.wait())\n    .then(() => {\n      updateEthBalance();\n      updateMpEthBalance();\n      State.update({ amount: \"\" });\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n};\n\n// STYLED COMPONENTS\n\nconst MainContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n`;\n\nconst StakeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 300px;\n  align-items: center;\n  border: 2px gray solid;\n  padding: 16px;\n  border-radius: 8px;\n  margin: 20px;\n  input{\n    text-align: end\n  }\n  button{\n    width: 100%;\n  }\n`;\n\nconst BalanceContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%\n`;\n\nreturn (\n  <MainContainer>\n    <StakeContainer>\n      <h1>Stake ETH</h1>\n      {state.userAddress ? (\n        <>\n          <BalanceContainer>\n            <span>ETH balance:</span>\n            <span>{state.ethBalance || \"loading...\"}</span>\n          </BalanceContainer>\n          <BalanceContainer>\n            <span>mpETH balance:</span>\n            <span>{state.mpEthBalance || \"loading...\"}</span>\n          </BalanceContainer>\n          <input\n            placeHolder=\"0\"\n            value={state.amount}\n            onChange={(e) => State.update({ amount: e.target.value })}\n          />\n          <button onClick={() => stakeEth(state.amount, state.userAddress)}>\n            Stake\n          </button>\n        </>\n      ) : (\n        <Web3Connect connectLabel=\"Connect with Ethereum wallet\" />\n      )}\n    </StakeContainer>\n  </MainContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/rodrigos.near/widget/workshop-example", "fact_widget_deployments_id": "0d7e44b18c309e174bbc0519d3f01da0", "inserted_timestamp": "2023-08-10T16:46:49.100Z", "modified_timestamp": "2023-08-10T16:46:49.100Z", "__row_index": 6}