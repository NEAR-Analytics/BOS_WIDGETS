{"tx_hash": "7JXtd7nv6WsNZoUrrdb7bECRwE9AnivXsGCki9t9Cd8Y", "action_id_social": "2V4wRTC7H4X4aXT3Tg8mi2KRqwqL1QYW82skKpEVkBzo-0-widget", "block_id": 116918240, "block_timestamp": "2024-04-15T20:14:50.140Z", "signer_id": "fdaomultixender.near", "widget_name": "MultiXender_main", "source_code": "// used for the mainpage\nconst Mainpage = styled.div` \n  background-color: #edf0f4;\n  height: auto;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center; \n`;\n\n// used for the first text\nconst Text_style = styled.div`\nfont-family: 'Lato', sans-serif;\ncolor: #072754;\nmargin-top: 100px; \nfont-weight: bold;\ndisplay: flex;\ntext-align: center;\njustify-content: center;\nfont-size: 3rem;\n@media screen and (max-width: 500px) {\n    display: flex;\n    font-size: 2rem;\n    }\n\n`;\n\n//used for the second text\nconst Second_p = styled.div`\n  font-family: 'Lato', sans-serif;\n  // font-weight: bold;\n  display: flex;\n  justify-content: center;\n  color: #072754;\n  font-size: 2rem;\n  margin-top : 10px;\n  text-align: center;\n  @media screen and (max-width: 500px) {\n  font-size: 1.5rem;\n  display: flex;\n  margin: 10px auto;\n  justify-content: center;\n  text-align: center;\n  }\n \n`;\n\nconst Third_p = styled.p`\n  color: #072754;\n  font-family: 'Lato', sans-serif;\n  font-weight: bold;\n  margin-top : 50px;\n  // font-weight : 500;\n  display: flex;\n  justify-content: center;\n  font-size: 2.5rem;\n  \n  span {\n    color: #ff0000; /* Red color for the 'X' */\n  }\n`;\n\n//to display first text\nfunction text() {\n  return (\n    <Text_style>\n      <p>Send Tokens to Multiple Adresses</p>\n    </Text_style>\n  );\n}\n\n//to display second text\nfunction text2() {\n  return (\n    <Second_p>\n      <p>Empowered by NEAR Protocol's cutting-edge technology</p>\n    </Second_p>\n  );\n}\n\nfunction text3() {\n  return (\n    <Third_p>\n      Multi<span>X</span>ender\n    </Third_p>\n  );\n}\n\n//container of popup sample\nconst PopupContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\n// popup  content\nconst PopupContent = styled.div`\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  text-align: center;\n  z-index: 1000;\n`;\n\n// handling popup\nconst Popup = ({ onClose }) => {\n  return (\n    <PopupContainer>\n      <PopupContent>\n        <img\n          src=\"https://i.postimg.cc/J7YBFNhM/Screenshot-2024-01-07-225153.png\"\n          alt=\"Popup Image\"\n          style={{ maxWidth: \"100%\", maxHeight: \"200px\", margin: \"15px 0\" }}\n        />\n        <SampleButton onClick={onClose}>Close</SampleButton>\n      </PopupContent>\n    </PopupContainer>\n  );\n};\n\n// next button stles\nconst NextUpper = styled.button`\n  font-family: 'Lato', sans-serif;\n  height: 60px; /* Increase height for a bigger button */\n  width: 200px; /* Adjust width as needed */\n  margin-top: 20px; /* Increase top margin */\n  border: none; /* Remove border */\n  border-radius: 30px; /* Adjust border radius */\n  background-color: #f8931f;\n  color: #000;\n  font-weight: bold;\n  font-size: 18px; /* Increase font size */\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease; /* Smooth transition for animations */\n  \n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 300%;\n    height: 300%;\n    background-color: rgba(255, 255, 255, 0.1);\n    transition: all 0.3s ease; /* Smooth transition for animations */\n    border-radius: 50%;\n    z-index: 0;\n    transform: translate(-50%, -50%);\n  }\n\n  &:hover:before {\n    width: 0;\n    height: 0;\n  }\n\n  &:hover {\n    color: #000;\n    background-color: #df841c;\n  }\n\n  &:active {\n    transform: scale(0.95); /* Add slight scale down effect on click */\n  }\n\n  &:focus {\n    outline: none; /* Remove default focus outline */\n  }\n   @media screen and (max-width: 500px) {\n    width: 150px; /* Adjust width for mobile view */\n    font-size: 16px; /* Adjust font size for mobile view */\n  }\n`;\n\nconst NextLower = styled.button`\n  font-family: 'Lato', sans-serif;\n  height: 60px; /* Increase height for a bigger button */\n  width: 200px; /* Adjust width as needed */\n  margin-top: 20px; /* Increase top margin */\n  margin-right: 10px; /* Add margin between buttons */\n  border: none; /* Remove border */\n  border-radius: 30px; /* Adjust border radius */\n  background-color: #f8931f;\n  color: #000;\n  font-weight: bold;\n  font-size: 18px; /* Increase font size */\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease; /* Smooth transition for animations */\n  \n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 300%;\n    height: 300%;\n    background-color: rgba(255, 255, 255, 0.1);\n    transition: all 0.3s ease; /* Smooth transition for animations */\n    border-radius: 50%;\n    z-index: 0;\n    transform: translate(-50%, -50%);\n  }\n\n  &:hover:before {\n    width: 0;\n    height: 0;\n  }\n\n  &:hover {\n    color: #000;\n    background-color: #df841c;\n  }\n\n  &:active {\n    transform: scale(0.95); /* Add slight scale down effect on click */\n  }\n\n  &:focus {\n    outline: none; /* Remove default focus outline */\n  }\n\n   @media screen and (max-width: 500px) {\n    width: 150px; /* Adjust width for mobile view */\n    font-size: 16px; /* Adjust font size for mobile view */\n  }\n`;\n\n// styling of simple popup\nconst SimplePopup = styled.div`\n  position: fixed;\n  top: 85%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: white;\n  padding: 8px;\n  border-radius: 10px;\n  z-index: 1000;\n   @media screen and (max-width: 500px) {\n    top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n   }\n`;\n\nconst InputLabel = styled.label`\n  font-weight: bold;\n  display: flex;\n  justify-content: space-between;\n  color: white;\n  align-items: center;\n  font-size: 1.5rem;\n  margin-bottom: 5px;\n\n  @media screen and (max-width: 500px) {\n    display: none;\n  }\n`;\n\nconst Label1 = styled.label`\n  display: flex;\n  justify-content: center;\n  font-family: 'Lato', sans-serif;\n  color: #072754;\n  font-size: 1.5rem;\n  margin: 20px;\n\n  @media screen and (max-width: 500px) {\n    margin-bottom: 5px; /* Adjust margin bottom for better alignment */\n    margin-left: 0%;\n    text-align: center;\n  }\n`;\n\nconst Label2 = styled.label`\n  display: flex;\n  color: #072754;\n  font-family: 'Lato', sans-serif;\n  font-size: 1.5rem;\n  margin-right: 40px;\n  align-items: center;\n  justify-content: center;\n  @media screen and (max-width: 500px) {\n    margin-bottom: 5px; /* Adjust margin bottom for better alignment */\n    margin-left: 0%;\n    text-align: center;\n  }\n`;\n\n// close button\nconst CloseButton = styled.button`\n  margin-top: 5px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background: #f1f1f1;\n  cursor: pointer;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\nmargin-top: 100px;\n`;\n\nconst Inputdiv = styled.div`\n  height: auto;\n  display: flex;\n  justify-content: center; /* Horizontally center items */\n  align-items: center; /* Vertically center items */\n  flex-direction: column;\n\n  @media screen and (max-width: 500px) {\n    margin-bottom: 5px; /* Adjust margin bottom for better alignment */\n    flex-direction: column;\n    align-items: center; \n    justify-content: center;\n    margin-top: -100px; \n  }\n`;\n\nconst Plus = styled.div`\n  background-color: white;\n  color: black;\n  padding: 10px; /* Increased padding for better touch area */\n  width: 50%;\n  border-radius: 8px; /* Increased border-radius for a smoother look */\n  margin-left: 23%;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  border: 2px solid transparent; /* Added border for better contrast */\n  transition: background-color 0.3s, border-color 0.3s; /* Transition border color along with background color */\n\n  &:hover {\n    background-color: #072754;\n    border-color: #072754; \n  }\n  .plus-icon {\n    color: red; /* Change the color of the plus icon */\n  }\n  @media screen and (max-width: 500px) {\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  }\n  \n`;\n\nconst Submit = styled.div``;\nconst Divbutton = styled.div`\ndisplay: flex;\nwidth: 100%;\nmargin-top: 20px;\njustify-content: center;\n`;\nconst DeleteButton = styled.button`\n  width: 50px; /* Set the initial width of the button */\n  display: inline-block;\n  transition: width 0.3s ease; /* Smooth transition effect for width */\n\n  &:hover {\n    width: 50px; /* Adjust the width when hovered */\n    transform: scale(1.1); /* Scale up the content by 10% on hover */\n  }\n\n  @media screen and (max-width: 500px) {\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  }\n\n`;\n\nconst InputAddress = styled.input`\nheight: 40px;\n  padding: 8px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  font-size: 16px;\nborder-radius: 10px;\n @media screen and (max-width: 500px) {\n   margin: auto;\n  display: flex;\n  justify-content: center;\n  }\n\t\n`;\nconst InputAmount = styled.input`\n  height: 40px;\n  padding: 8px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  border-radius: 10px;\n  width: 100px; \n     @media screen and (max-width: 500px) {\n    margin: auto;\n  display: flex;\n  justify-content: center;\n  }\n`;\nconst User = \"fdaomultixender.near\";\nconst Content3 = ({ distributeInput }) => (\n  <div>\n    <Widget\n      src={`${user}/widget/MultiXender_distribute`}\n      distributeInput={distributeInput}\n    />\n  </div>\n);\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n      };\n    case \"testnet\":\n      return {\n        nodeUrl: \"https://rpc.testnet.near.org\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(\"mainnet\");\n\n// Main component working\nconst Main = () => {\n  const [isSimplePopupVisible, setSimplePopupVisibility] = useState(false);\n  const [addressList, setAddressList] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [popupContent, setPopupContent] = useState(\"\");\n  const [distributeInput, setDistributeInput] = useState(\"\");\n  const [isTransferCompleted, setTransferCompleted] = useState(false);\n  const [isSubmitClicked, setIsSubmitClicked] = useState(false);\n\n  //used to open simple popup gas one\n  const handleOpenSimplePopup = () => {\n    setSimplePopupVisibility(true);\n  };\n\n  //used to close simple popup\n  const handleCloseSimplePopup = () => {\n    setSimplePopupVisibility(false);\n  };\n\n  // list json handling\n  const handleStoreList = () => {\n    const newList = handleSubmit();\n\n    // Check for duplicate addresses\n    const addressSet = new Set();\n    const hasDuplicate = newList.some((item) => {\n      if (addressSet.has(item.address)) {\n        console.log(`Duplicate address found: ${item.address}`);\n        setPopupContent(\"Repeated accounts were found.\");\n        setSimplePopupVisibility(true); // Show the popup\n        return true;\n      }\n      addressSet.add(item.address);\n      return false;\n    });\n\n    // If duplicates found, return an empty object\n    if (hasDuplicate || newList.length === 0) {\n      return {};\n    }\n\n    // Calculate the sum of amounts\n    const sumOfAmounts = Object.values(newList).reduce(\n      (total, item) => total + parseFloat(item.amount || 0),\n      0\n    );\n\n    // Display different messages based on the sum of amounts\n    if (sumOfAmounts < 1) {\n      // Display the popup content for amounts less than 1 NEAR\n      setPopupContent(\"Sum of amount must be more than 1 NEAR.\");\n      setSimplePopupVisibility(true); // Show the popup\n      return {}; // Return empty object as there's no valid distribution\n    } else {\n      // Calculate the percentage based on the number of keys\n      let platformAmount = 0;\n      if (newList.length >= 1 && newList.length <= 10) {\n        platformAmount = sumOfAmounts * 0.01;\n      } else if (newList.length >= 11 && newList.length <= 25) {\n        platformAmount = sumOfAmounts * 0.02;\n      } else if (newList.length >= 26 && newList.length <= 50) {\n        platformAmount = sumOfAmounts * 0.03;\n      } else if (newList.length >= 50 && newList.length <= 100) {\n        platformAmount = sumOfAmounts * 0.04;\n      } else {\n        platformAmount = sumOfAmounts * 0.06;\n      }\n\n      const calculatedTotalAmount = sumOfAmounts + platformAmount;\n\n      // Display the popup with total amount and gas amount\n      setPopupContent(\n        `Total Amount: ${calculatedTotalAmount}\\nPlatform Amount: ${platformAmount}\\nGas Fees: 0.0001`\n      );\n\n      const recipients = Object.values(newList).map((item) => ({\n        account_id: item.address,\n        amount: Number((item.amount * 1e24).toString())\n          .toLocaleString(\"fullwide\", { useGrouping: false })\n          .toString(),\n      }));\n\n      // Show the simple popup\n      setSimplePopupVisibility(true);\n      // Return an object with the necessary values\n      return {\n        calculatedTotalAmount,\n        distributeInput: {\n          input: JSON.stringify({ recipients }),\n        },\n      };\n    }\n  };\n\n  const handleSubmit = () => {\n    const newList = inputs;\n    return newList;\n  };\n\n  const handleMethod = () => {\n    // Check if the account ID is not valid\n    for (let index = 0; index < inputs.length; index++) {\n      if (state[`validAccount_${index}`] === false) {\n        setPopupContent(\"Enter valid Account id\");\n        setSimplePopupVisibility(true);\n        return;\n      } else if (inputs[index].address.trim() === \"\") {\n        setPopupContent(\"Account id should not blank\");\n        setSimplePopupVisibility(true);\n        return;\n      }\n    }\n    // Destructure the result of handleStoreList\n    const { calculatedTotalAmount, distributeInput } = handleStoreList();\n\n    // Check if calculatedTotalAmount or distributeInput is not valid\n    if (!calculatedTotalAmount || !distributeInput || distributeInput === \"\") {\n      // Set disp to true if any of the conditions are met\n      State.update({\n        disp: true,\n      });\n\n      // Return an empty string for distributeInput\n      return \"\";\n    }\n\n    // Set simple popup visibility to false\n    setSimplePopupVisibility(false);\n\n    const Contract = \"multi.fdaomultixender.near\";\n    const Method = \"transfer\";\n    const transferAccountId = \"\";\n    const Gas = 100000000000000;\n    const newcalculatedTotalAmount = calculatedTotalAmount * 1e24;\n\n    try {\n      Near.call(\n        Contract,\n        Method,\n        distributeInput,\n        transferAccountId,\n        newcalculatedTotalAmount\n      );\n    } catch (error) {\n      console.error(\"Error during Near.call:\", error);\n    }\n  };\n\n  // getting address json list\n  const getAddressList = () => {\n    if (typeof textAreaContent === \"string\") {\n      const jsonArray = textAreaContent\n        .split(\"\\n\")\n        .filter((line) => line.trim() !== \"\")\n        .map((line, index) => {\n          const [address, amount] = line.split(\",\").map((item) => item.trim());\n          return {\n            key: index + 1,\n            address,\n            amount: parseFloat(amount) || 0,\n          };\n        });\n\n      return jsonArray;\n    } else {\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    setAddressList(getAddressList());\n  }, [textAreaContent]);\n\n  const [inputs, setInputs] = useState([{ key: 1, address: \"\", amount: \"\" }]);\n\n  const handleAdd = () => {\n    setInputs((prevInputs) => [\n      ...prevInputs,\n      { key: prevInputs.length + 1, address: \"\", amount: \"\" },\n    ]);\n  };\n\n  const handleDelete = () => {\n    if (inputs.length > 1) {\n      setInputs((prevInputs) => prevInputs.slice(0, -1));\n    }\n  };\n\n  const handleDeleteInput = (index) => {\n    setInputs((prevInputs) => prevInputs.filter((input, i) => i !== index));\n  };\n\n  const handleInputChange = (event, index, field) => {\n    const { value } = event.target;\n\n    // Check if the field is 'amount' and the value is empty\n    if (field === \"amount\" && value === \"\") {\n      // In this case, set the amount to 0 to avoid any NaN issues\n      setInputs((prevInputs) =>\n        prevInputs.map((input, i) =>\n          i === index ? { ...input, [field]: 0 } : input\n        )\n      );\n    } else {\n      // Otherwise, proceed normally\n      const parsedValue = field === \"amount\" ? parseFloat(value) : value;\n      setInputs((prevInputs) =>\n        prevInputs.map((input, i) =>\n          i === index ? { ...input, [field]: parsedValue } : input\n        )\n      );\n    }\n  };\n\n  const initialValidationStates = inputs.map(() => undefined);\n  const [validationStates, setValidationStates] = useState(\n    initialValidationStates\n  );\n\n  const updateValidationState = (index, isValid) => {\n    setValidationStates((prevStates) => {\n      const newValidationStates = [...prevStates];\n      newValidationStates[index] = isValid;\n      return newValidationStates;\n    });\n  };\n\n  return (\n    <Container>\n      <InputLabel>\n        <Label1>Account Id</Label1>\n        <Label2>Token Amount</Label2>\n      </InputLabel>\n      <Inputdiv>\n        {inputs.map((input, index) => (\n          <div key={input.key} className=\"flex justify-between mb-2\">\n            {state[`validAccount_${index}`] === false && (\n              <div\n                style={{\n                  color: \"red\",\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                Account does not exist\n              </div>\n            )}\n            <InputAddress\n              value={input.address}\n              name=\"address\"\n              placeholder=\"Enter account ID\"\n              style={{\n                border:\n                  state[`validAccount_${index}`] === false\n                    ? \"2px solid red\"\n                    : state[`validAccount_${index}`]\n                    ? \"2px solid green\"\n                    : \"none\",\n              }}\n              onChange={(event) => {\n                handleInputChange(event, index, \"address\");\n\n                const value = event.target.value;\n\n                // debounce\n                clearTimeout(state.timer);\n                State.update({\n                  timer: setTimeout(() => {\n                    if (value !== \"\") {\n                      asyncFetch(config.nodeUrl, {\n                        method: \"POST\",\n                        headers: {\n                          \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({\n                          jsonrpc: \"2.0\",\n                          id: \"dontcare\",\n                          method: \"query\",\n                          params: {\n                            request_type: \"view_account\",\n                            finality: \"final\",\n                            account_id: value,\n                          },\n                        }),\n                      }).then((response) => {\n                        if (response.body.error) {\n                          State.update({ [`validAccount_${index}`]: false });\n                        } else {\n                          State.update({ [`validAccount_${index}`]: true });\n                        }\n                      });\n                    } else {\n                      State.update({\n                        [`validAccount_${index}`]: undefined,\n                      });\n                    }\n                  }, 300),\n                });\n              }}\n            />\n            <InputAmount\n              type=\"Number\"\n              className=\"m-2 p-2 w-1/2 amount\"\n              placeholder=\"NEAR\"\n              name=\"Amount\"\n              value={input.amount}\n              onChange={(event) => handleInputChange(event, index, \"amount\")}\n              style={{ textAlign: \"centre\" }}\n            />\n            <DeleteButton onClick={() => handleDeleteInput(index)}>\n              \u274c\n            </DeleteButton>\n          </div>\n        ))}\n      </Inputdiv>\n\n      <Plus onClick={handleAdd}>\n        <span role=\"img\" aria-label=\"Add Icon\" className=\"plus-icon\">\n          \u2795\n        </span>\n      </Plus>\n\n      <Divbutton>\n        <NextUpper onClick={handleStoreList} style={{ marginRight: \"20px\" }}>\n          Show fees\n        </NextUpper>\n        <NextLower onClick={handleMethod}>Multisend</NextLower>\n      </Divbutton>\n      {isSimplePopupVisible && (\n        <SimplePopup>\n          <div>{popupContent}</div>\n          <CloseButton onClick={handleCloseSimplePopup}>\u274c</CloseButton>\n        </SimplePopup>\n      )}\n      {isSubmitClicked && <Content3 distributeInput={distributeInput} />}\n    </Container>\n  );\n};\n\nconst FooterContainer = styled.div`\n  height: 80px;\n  margin-top: 200px;\n  color: #000;\n  background-color: #edf0f4; /* Dark background color */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: Arial, sans-serif; /* Example font family */\n\n  p {\n    font-size: 1.5rem;\n    margin: 0; /* Remove default margin */\n  }\n\n  @media screen and (max-width: 500px) {\n    height: 120px; /* Adjust height for smaller screens */\n    margin-top: 100px; /* Adjust margin for smaller screens */\n    padding: 20px; /* Add padding for better spacing */\n    text-align: center; /* Center text on smaller screens */\n    p{\n    font-size: 1.1rem;\n    }\n  }\n`;\n\nconst Footer = () => {\n  return (\n    <FooterContainer>\n      <p>&copy; 2024 Multixender All rights reserved.</p>\n    </FooterContainer>\n  );\n};\n\n// function multisender\nfunction Multisender() {\n  return (\n    <Mainpage>\n      {text()}\n      {text2()}\n      {text3()}\n      <Main />\n      <Footer />\n    </Mainpage>\n  );\n}\n\nreturn <Multisender />;\n", "metadata": {"fork_of": "fdaomultixender.near/widget/MultiXender_main@116917496"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fdaomultixender.near/widget/MultiXender_main", "fact_widget_deployments_id": "265cbd081683174cba315f3fcac9b9ce", "inserted_timestamp": "2024-04-15T21:42:14.093Z", "modified_timestamp": "2024-04-15T21:42:14.093Z", "__row_index": 3}