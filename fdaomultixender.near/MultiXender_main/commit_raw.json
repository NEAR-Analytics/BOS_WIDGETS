{"tx_hash": "A2GDb1Y37FAaSFWWsMysADYe14cthw5FX2AQhCuyziGm", "action_id_social": "3chx9SJEQnhtGH4QkX6zdtFbHGTfgxtbpN6FaES3TNtc-0-widget", "block_id": 113831315, "block_timestamp": "2024-02-29T17:46:55.620Z", "signer_id": "fdaomultixender.near", "widget_name": "MultiXender_main", "source_code": "State.init({\n  disp: false,\n});\n// used for the mainpage\nconst Mainpage = styled.div` \n  background-color: #22252a;\n  height: 1200px;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\n// used for the first text\nconst Text_style = styled.div`\ncolor: #fff;\nmargin-top: 300px;\nfont-weight: bold;\ndisplay: flex;\njustify-content: center;\n\n@media screen and (min-width: 414px) {\n    font-size: 20px;\n    }\n@media screen and (min-width: 768px){\n    font-size: 30px;\n  }\n@media screen and (min-width: 1400px){\n    font-size: 40px;\n  }\n`;\n\n//used for the second text\nconst Second_p = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-left:10px; \n  color: #fff;\n  margin-top : 10px;\n  margin-left: 20px;\n  font-weight: normal;\n\n  @media screen and (min-width: 414px) {\n    font-size: 17px;\n    }\n  @media screen and (min-width: 768px){\n    font-size: 25px;\n  }\n  @media screen and (min-width: 1400px){\n    font-size: 30px;\n  }\n  \n`;\n\n//to display first text\nfunction text() {\n  return (\n    <Text_style>\n      <p>Send Tokens to Multiple Adresses</p>\n    </Text_style>\n  );\n}\n\n//to display second text\nfunction text2() {\n  return (\n    <Second_p>\n      <p>Empowered by NEAR Protocol's cutting-edge technology</p>\n    </Second_p>\n  );\n}\n\n// container for the main multisender\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 500px;\n  margin: 0 auto;\n  margin-top: 90px;\n  border-radius: 20px;\n  background-color: #ccc;\n\n  @media screen and (min-width: 414px) {\n    width: 60%;\n  }\n\n  @media screen and (min-width: 768px){\n    width: 60%;\n  }\n\n  @media screen and (min-width: 1400px){\n    width: 60%;\n`;\n\n// used for the label\nconst CsvLabel = styled.label`\n  font-weight: bold;\n  margin-top: 15px;\n  margin: 0 auto;\n   @media screen and (min-width: 414px){\n    margin-top: 20px;\n    margin-left: 10px;\n    font-size: 1.3rem;\n  }\n\n  @media screen and (min-width: 768px){\n    margin-top: 20px;\n    margin-left: 10px;\n    font-size: 1.3rem;\n  }\n\n  @media screen and (min-width: 1400px){\n    margin-top: 20px;\n    margin-left: 10px;\n    font-size: 1.3rem;\n  }\n `;\n\nconst Alert = styled.label`\n  font-weight: bold;\n  margin: 15px;\n  margin: 0 auto;\n  display : ${state.disp ? \"block\" : \"none\"}\n `;\n\n// used for container it contains the text area\nconst CSVContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n  width: 80%;\n  height: 250px;\n`;\n\n//container of sample button used to set sample\nconst SampleButtonContainer = styled.div`\n   display: flex;\n   align-items: center;\n   margin-top: -5px;\n   width: 80%;\n   height: 50px;\n\n`;\n\n//sample button\nconst SampleButton = styled.button`\n  height: 40px;\n  margin-top : -40px;\n  font-size: 1rem;\n  border-radius: 0px 0px 30px 30px;\n  background-color: #04041b;\n  color: #fff;\n  font-weight: bold;\n  position: relative;\n  \n\n  @media screen and (min-width: 414px){\n    \n    width: 100%;\n  }\n\n  @media screen and (min-width: 768px){\n   \n    width: 100%;\n  }\n\n  @media screen and (min-width: 1400px){\n    \n    width: 100%;\n  }\n  p{\n  margin-top: 5px;\n  }\n  \n`;\n\n//area to add the addresses\nconst TextArea = styled.textarea`\n  background-color: #fff;\n  border-radius: 15px;\n  border: 1px solid black;\n  margin-bottom: 10px;\n  overflow-y: scroll;\n  @media screen and (min-width: 414px) {\n    width: 100%;\n    height: 100%;\n  }\n\n  @media screen and (min-width: 768px){\n    width: 100%;\n    height: 100%\n  }\n\n  @media screen and (min-width: 1400px){\n    width: 100%;\n    height: 100%\n`;\n\n//container of popup sample\nconst PopupContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\n// popup  content\nconst PopupContent = styled.div`\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  text-align: center;\n  z-index: 1000;\n`;\n\n// handling popup\nconst Popup = ({ onClose }) => {\n  return (\n    <PopupContainer>\n      <PopupContent>\n        <img\n          src=\"https://i.postimg.cc/J7YBFNhM/Screenshot-2024-01-07-225153.png\"\n          alt=\"Popup Image\"\n          style={{ maxWidth: \"100%\", maxHeight: \"200px\", margin: \"15px 0\" }}\n        />\n        <SampleButton onClick={onClose}>Close</SampleButton>\n      </PopupContent>\n    </PopupContainer>\n  );\n};\n\n// next button stles\nconst Next = styled.button`\nheight: 40px;\nwidth: 100%;\nmargin-top: 10px;\nborder: 1px solid black;\nborder-radius: 15px;\nbackground-color: #04041b;\ncolor: #fff;\nfont-weight: bold;\n\n`;\n\n// styling of simple popup\nconst SimplePopup = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  z-index: 1000;\n`;\n\n// close button\nconst CloseButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background: #f1f1f1;\n  cursor: pointer;\n`;\nconst user = \"fdaomultixender.near\";\nconst Content3 = ({ distributeInput }) => (\n  <div>\n    <Widget\n      src={`${user}/widget/MultiXender_distribute`}\n      distributeInput={distributeInput}\n    />\n  </div>\n);\n\n// Main component working\nconst Main = () => {\n  const [isSamplePopupVisible, setSamplePopupVisibility] = useState(false);\n  const [isSimplePopupVisible, setSimplePopupVisibility] = useState(false);\n  const [addressList, setAddressList] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [textAreaContent, setTextAreaContent] = useState(\"\");\n  const [popupContent, setPopupContent] = useState(\"\");\n  const [distributeInput, setDistributeInput] = useState(\"\");\n  const [isTransferCompleted, setTransferCompleted] = useState(false);\n  const [isSubmitClicked, setIsSubmitClicked] = useState(false);\n\n  // used to open sample popup\n  const handleOpenSamplePopup = () => {\n    setSamplePopupVisibility(true);\n  };\n\n  //used to open simple popup gas one\n  const handleOpenSimplePopup = () => {\n    setSimplePopupVisibility(true);\n  };\n\n  // used to close sample popup\n  const handleCloseSamplePopup = () => {\n    setSamplePopupVisibility(false);\n  };\n\n  //used to close simple popup\n  const handleCloseSimplePopup = () => {\n    setSimplePopupVisibility(false);\n  };\n\n  //text area change handling\n  const handleTextAreaChange = (event) => {\n    setTextAreaContent(event.target.value);\n  };\n\n  // list json handling\n  const handleStoreList = () => {\n    const newList = getAddressList();\n\n    console.log(newList);\n\n    //  Check for duplicate addresses\n    const addressSet = new Set();\n    const hasDuplicate = newList.some((item) => {\n      if (addressSet.has(item.address)) {\n        console.log(`Duplicate address found: ${item.address}`);\n        State.update({\n          disp: true,\n        });\n        return true;\n      }\n      addressSet.add(item.address);\n      return false;\n    });\n\n    // If duplicates found, return an empty array\n    if (hasDuplicate || newList.length === 0) {\n      return \"\";\n    }\n\n    // Calculate the sum of amounts\n    const sumOfAmounts = Object.values(newList).reduce(\n      (total, item) => total + parseFloat(item.amount || 0),\n      0\n    );\n\n    // Display different messages based on the sum of amounts\n    if (sumOfAmounts < 1) {\n      setPopupContent(`Amount should be more than 1 NEAR.`);\n    } else {\n      // Calculate the percentage based on the number of keys\n      let platformAmount = 0;\n      if (newList.length >= 1 && newList.length <= 10) {\n        platformAmount = sumOfAmounts * 0.01;\n      } else if (newList.length >= 11 && newList.length <= 25) {\n        platformAmount = sumOfAmounts * 0.02;\n      } else if (newList.length >= 26 && newList.length <= 50) {\n        platformAmount = sumOfAmounts * 0.03;\n      } else if (newList.length >= 50 && newList.length <= 100) {\n        platformAmount = sumOfAmounts * 0.04;\n      } else {\n        platformAmount = sumOfAmounts * 0.06;\n      }\n\n      const calculatedTotalAmount = sumOfAmounts + platformAmount;\n\n      // Display the popup with total amount and gas amount\n      setPopupContent(\n        `Total Amount: ${calculatedTotalAmount}\\nPlatform Amount: ${platformAmount}\\nGas Fees: 0.0001`\n      );\n\n      const recipients = Object.values(newList).map((item) => ({\n        account_id: item.address,\n        amount: Number((item.amount * 1e24).toString())\n          .toLocaleString(\"fullwide\", { useGrouping: false })\n          .toString(),\n      }));\n\n      // Show the simple popup\n      setSimplePopupVisibility(true);\n      // Return an object with the necessary values\n      return {\n        calculatedTotalAmount,\n        distributeInput: {\n          input: JSON.stringify({ recipients }),\n        },\n      };\n    }\n  };\n\n  const handleMethod = () => {\n    // Destructure the result of handleStoreList\n    const { calculatedTotalAmount, distributeInput } = handleStoreList();\n\n    if (!calculatedTotalAmount || !distributeInput || distributeInput === \"\") {\n      // Set disp to true if any of the conditions are met\n      State.update({\n        disp: true,\n      });\n\n      // Return an empty string for distributeInput\n      return \"\";\n    }\n\n    // Set simple popup visibility to false\n    setSimplePopupVisibility(false);\n\n    const Contract = \"fdaomultixender.near\";\n    const Method = \"transfer\";\n    const transferAccountId = \"\";\n    const Gas = 100000000000000;\n    const newcalculatedTotalAmount = calculatedTotalAmount * 1e24;\n\n    try {\n      Near.call(\n        Contract,\n        Method,\n        distributeInput,\n        transferAccountId,\n        newcalculatedTotalAmount\n      );\n    } catch (error) {\n      console.error(\"Error during Near.call:\", error);\n    }\n  };\n\n  // getting address json list\n  const getAddressList = () => {\n    if (typeof textAreaContent === \"string\") {\n      const jsonArray = textAreaContent\n        .split(\"\\n\")\n        .filter((line) => line.trim() !== \"\")\n        .map((line, index) => {\n          const [address, amount] = line.split(\",\").map((item) => item.trim());\n          return {\n            key: index + 1,\n            address,\n            amount: parseFloat(amount) || 0,\n          };\n        });\n\n      //   // Check for duplicate addresses\n      //   const addressSet = new Set();\n      //   const hasDuplicate = jsonArray.some((item) => {\n      //     if (addressSet.has(item.address)) {\n      //       console.log(`Duplicate address found: ${item.address}`);\n      //       return true;\n      //     }\n      //     addressSet.add(item.address);\n      //     return false;\n      //   });\n\n      //   // If duplicates found, return an empty array\n      //   if (hasDuplicate) {\n      //     State.update({\n      //       disp: true,\n      //     });\n      //   }\n\n      return jsonArray;\n    } else {\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    setAddressList(getAddressList());\n  }, [textAreaContent]);\n\n  return (\n    <Container>\n      <CsvLabel>List of Addresses in Near</CsvLabel>\n\n      <CSVContainer>\n        <TextArea\n          id=\"addressTextArea\"\n          rows=\"100\"\n          cols=\"30\"\n          value={textAreaContent}\n          placeholder=\"Enter addresses here...\"\n          onChange={handleTextAreaChange}\n        />\n      </CSVContainer>\n      <SampleButtonContainer>\n        <SampleButton onClick={handleOpenSamplePopup}>Sample CSV</SampleButton>\n      </SampleButtonContainer>\n      <Alert>\n        Alert! No Accounts or Repeated Accounts were Found or sum of amount must\n        be more than 1 NEAR.\n      </Alert>\n      <Next onClick={handleStoreList}>Show fees</Next>\n      <Next onClick={handleMethod}>Submit</Next>\n      {isSamplePopupVisible && <Popup onClose={handleCloseSamplePopup} />}\n      {isSimplePopupVisible && (\n        <SimplePopup>\n          <div>{popupContent}</div>\n          <CloseButton onClick={handleCloseSimplePopup}>Close</CloseButton>\n        </SimplePopup>\n      )}\n      {isSubmitClicked && <Content3 distributeInput={distributeInput} />}\n    </Container>\n  );\n};\n\nconst FooterContainer = styled.div`\nheight: 80px;\nmargin-top: 200px;\ncolor: #fff;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n\np{\nfont-size: 1.5rem;\n}\n`;\n\nconst Footer = () => {\n  return (\n    <FooterContainer>\n      <p>&copy; 2024 Multisender All rights reserved.</p>\n    </FooterContainer>\n  );\n};\n\n// function multisender\nfunction Multisender() {\n  return (\n    <Mainpage>\n      {text()}\n      {text2()}\n      <Main />\n      <Footer />\n    </Mainpage>\n  );\n}\n\nreturn <Multisender />;\n", "metadata": {"description": "main File for MultiXender ", "name": "MultiXender_main", "tags": {"multixender": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fdaomultixender.near/widget/MultiXender_main", "fact_widget_deployments_id": "2123b7c022645f6f76d4c2d44b8b1c79", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}