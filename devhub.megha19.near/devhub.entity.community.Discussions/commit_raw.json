{"tx_hash": "DFYU8M5jBusf3PxAzjGGMZsiMJ7ofQmC9Zoc4bShHa6m", "action_id_social": "3HjBxwRUo5DGFcLQM4F8uyrwYX9yk5dkdrtNUExJzL1m-0-widget", "block_id": 119431780, "block_timestamp": "2024-05-21T17:31:02.177Z", "signer_id": "devhub.megha19.near", "widget_name": "devhub.entity.community.Discussions", "source_code": "const NEW_DISCUSSION_POSTED_CONTENT_STORAGE_KEY =\n  \"new_discussion_posted_content\";\nconst { handle } = props;\nconst { getCommunity, setCommunitySocialDB } = VM.require(\n  \"devhub.megha19.near/widget/core.adapter.devhub-contract\"\n);\n\ngetCommunity = getCommunity || (() => <></>);\nsetCommunitySocialDB = setCommunitySocialDB || (() => <></>);\n\nconst communityData = getCommunity({ handle });\n\nconst MainContent = styled.div`\n  padding-left: 2rem;\n  flex: 3;\n  @media screen and (max-width: 960px) {\n    padding-left: 0rem;\n  }\n  .post:hover {\n    background-color: inherit !important;\n  }\n`;\n\nconst SidebarContainer = styled.div`\n  flex: 1;\n`;\n\nconst Heading = styled.div`\n  font-size: 19px;\n  font-weight: 600;\n`;\n\nconst SubHeading = styled.div`\n  font-size: 15px;\n  font-weight: 600;\n`;\n\nconst Container = styled.div`\n  flex-wrap: no-wrap;\n  max-width: 100%;\n\n  .max-width-100 {\n    max-width: 100%;\n  }\n  @media screen and (max-width: 960px) {\n    flex-wrap: wrap;\n  }\n\n  .card {\n    border-radius: 1rem !important;\n  }\n\n  .display-none {\n    display: none;\n  }\n`;\n\nconst Tag = styled.div`\n  border-top-right-radius: 50px;\n  border-bottom-right-radius: 50px;\n  border-top-left-radius: 50px;\n  border-bottom-left-radius: 50px;\n  padding-inline: 0.8rem;\n  padding-block: 0.3rem;\n  display: flex;\n  gap: 0.5rem;\n  border-width: 1px;\n  border-style: solid;\n  font-size: 14px;\n  color: rgba(0, 236, 151, 1);\n  font-weight: 800;\n`;\n\nconst [sort, setSort] = useState(\"desc\");\nconst [isTransactionFinished, setIsTransactionFinished] = useState(false);\n\nconst discussionsAccountId =\n  \"discussions.\" + handle + \".community.devhub.near\";\n\nfunction checkIfReposted(blockHeight) {\n  Near.asyncView(\"social.near\", \"get\", {\n    keys: [`${discussionsAccountId}/index/**`],\n  })\n    .then((response) => {\n      const repost = response[discussionsAccountId].index.repost;\n\n      if (repost && repost.indexOf(`\"blockHeight\":${blockHeight}`) > -1) {\n        setIsTransactionFinished(true);\n      } else {\n        setTimeout(() => checkIfReposted(), 500);\n      }\n    })\n    .catch((error) => {\n      console.error(\n        \"DevHub Error [Discussions]: checkIfReposted failed\",\n        error\n      );\n    });\n}\n\nfunction repostOnDiscussions(blockHeight) {\n  Near.call([\n    {\n      contractName: \"devhub.near\",\n      methodName: \"create_discussion\",\n      args: {\n        handle,\n        block_height: blockHeight,\n      },\n      gas: Big(10).pow(14),\n    },\n  ]);\n  checkIfReposted(blockHeight);\n}\n\nasync function checkHashes() {\n  if (props.transactionHashes) {\n    asyncFetch(\"https://rpc.mainnet.near.org\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: \"dontcare\",\n        method: \"tx\",\n        params: [props.transactionHashes, context.accountId],\n      }),\n    }).then((transaction) => {\n      if (transaction !== null) {\n        const transaction_method_name =\n          transaction?.body?.result?.transaction?.actions[0].FunctionCall\n            .method_name;\n\n        if (transaction_method_name === \"set\") {\n          getBlockHeightAndRepost();\n        }\n\n        // show the latest created post to user\n        if (transaction_method_name === \"create_discussion\") {\n          console.log(\"Discussions created in the last call, show it to user.\");\n        }\n      }\n    });\n  }\n}\n\nfunction getBlockHeightAndRepost() {\n  const newDiscussionPostedContent = Storage.get(\n    NEW_DISCUSSION_POSTED_CONTENT_STORAGE_KEY\n  );\n  console.log(\"new discussion content\", newDiscussionPostedContent);\n\n  Near.asyncView(\"social.near\", \"get\", {\n    keys: [`${context.accountId}/post/**`],\n    options: {\n      with_block_height: true,\n    },\n  })\n    .then((response) => {\n      const post_main = response[context.accountId].post.main;\n      const content = post_main[\"\"];\n      if (content === newDiscussionPostedContent) {\n        const blockHeight = post_main[\":block\"];\n        console.log(\"content matches\", blockHeight, post_main);\n        repostOnDiscussions(blockHeight);\n      } else {\n        console.log(\n          \"content does not match (yet)\",\n          post_main,\n          newDiscussionPostedContent\n        );\n        setTimeout(() => getBlockHeightAndRepost(), 500);\n      }\n    })\n    .catch((error) => {\n      console.log(\n        \"DevHub Error [Discussions]: getBlockHeightAndRepost failed\",\n        error\n      );\n    });\n}\n\ncheckHashes();\n\nreturn (\n  <div className=\"w-100\" style={{ maxWidth: \"100%\" }}>\n    <Container className=\"d-flex gap-3 m-3 pl-2\">\n      <MainContent className=\"max-width-100\">\n        <div className=\"d-flex flex-column gap-4\">\n          {context.accountId && (\n            <div className=\"card p-4\">\n              <Widget\n                src={\"devhub.megha19.near/widget/devhub.entity.community.Compose\"}\n                props={{\n                  isFinished: () => isTransactionFinished,\n                  onSubmit: (v) => {\n                    console.log(\"ON SUBMIT\");\n                    Storage.set(\n                      NEW_DISCUSSION_POSTED_CONTENT_STORAGE_KEY,\n                      v.post.main\n                    );\n\n                    Social.set(v, {\n                      force: true,\n                      onCommit: () => {\n                        getBlockHeightAndRepost();\n                      },\n                    });\n                  },\n                  profileAccountId: context.accountId,\n                }}\n              />\n            </div>\n          )}\n          <div className=\"d-flex flex-wrap justify-content-between\">\n            <Heading>Discussions</Heading>\n            <div className={\"d-flex align-items-center gap-2\"}>\n              <select\n                name=\"sort\"\n                id=\"sort\"\n                class=\"form-select\"\n                value={sort}\n                onChange={(e) => {\n                  setSort(e.target.value);\n                }}\n              >\n                <option selected value=\"desc\">\n                  Latest\n                </option>\n                <option value=\"recentcommentdesc\">Last Commented</option>\n              </select>\n            </div>\n          </div>\n          <div className={\"card p-4\"}>\n            <Widget\n              key=\"feed\"\n              src=\"devhub.megha19.near/widget/devhub.components.feed.SubscribedFeed\"\n              props={{\n                sort: sort,\n                accounts: [\n                  `discussions.${handle}.community.devhub.near`,\n                ],\n              }}\n            />\n          </div>\n        </div>\n      </MainContent>\n      <SidebarContainer>\n        <div className=\"d-flex flex-column gap-3\">\n          <div className=\"card p-4\">\n            <div className=\"mb-2\">{communityData?.description}</div>\n            <div className=\"d-flex gap-2 flex-wrap\">\n              <Tag>{communityData?.tag} </Tag>\n            </div>\n          </div>\n          <div className=\"card p-4 d-flex flex-column gap-2\">\n            <SubHeading>Community Admins</SubHeading>\n            {(communityData?.admins ?? []).map((accountId) => (\n              <div\n                key={accountId}\n                className=\"d-flex\"\n                style={{ fontWeight: 500 }}\n              >\n                <Widget\n                  src=\"devhub.megha19.near/widget/devhub.components.molecule.ProfileCard\"\n                  props={{ accountId }}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      </SidebarContainer>\n    </Container>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.megha19.near/widget/devhub.entity.community.Discussions", "fact_widget_deployments_id": "20ed7ac2fe789743639e20ffa74a3733", "inserted_timestamp": "2024-05-21T18:54:56.178Z", "modified_timestamp": "2024-05-21T19:52:57.460Z", "__row_index": 9}