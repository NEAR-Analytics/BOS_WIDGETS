{"tx_hash": "Vu1HUPbdTe4ocSSossYsrcuQ4LLLbk6BfXfaf3R82YH", "action_id_social": "9Xw48cRx7SqjBWcGURSgvsjzt9GLGWGrj5dFcKJovfqN-0-widget", "block_id": 119414974, "block_timestamp": "2024-05-21T11:54:26.187Z", "signer_id": "devhub.megha19.near", "widget_name": "devhub.components.molecule.Input", "source_code": "const TextInput = ({\n  className,\n  format,\n  inputProps: { className: inputClassName, ...inputProps },\n  key,\n  label,\n  multiline,\n  onChange,\n  placeholder,\n  type,\n  value,\n  skipPaddingGap,\n  style,\n  error,\n  ...otherProps\n}) => {\n  State.init({\n    data: value,\n    error: error,\n  });\n\n  useEffect(() => {\n    const inputError = \"\";\n    if (value !== state.data) {\n      // check for input number error (since type: number doesn't work on firefox/safari)\n      if (inputProps.inputmode === \"numeric\") {\n        const inputValue = state.data;\n        if (!inputValue) {\n          return;\n        }\n        let isValidInteger = /^[1-9][0-9]*$/.test(inputValue);\n        if (!isValidInteger) {\n          inputError = \"Please enter the nearest positive whole number.\";\n        }\n        State.update({ error: inputError });\n      }\n      const handler = setTimeout(() => {\n        onChange({ target: { value: state.data }, error: inputError });\n      }, 30);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    }\n  }, [state.data]);\n\n  useEffect(() => {\n    if (value !== state.data) {\n      State.update({ data: value });\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (error !== state.error) {\n      State.update({ error: error });\n    }\n  }, [error]);\n\n  const typeAttribute =\n    type === \"text\" ||\n    type === \"password\" ||\n    type === \"number\" ||\n    type === \"date\"\n      ? type\n      : \"text\";\n\n  const isValid = () => {\n    if (!state.data || state.data.length === 0) {\n      return !inputProps.required;\n    } else if (inputProps.min && inputProps.min > state.data?.length) {\n      return false;\n    } else if (inputProps.max && inputProps.max < state.data?.length) {\n      return false;\n    } else if (\n      inputProps.allowCommaAndSpace === false &&\n      /^[^,\\s]*$/.test(state.data) === false\n    ) {\n      return false;\n    } else if (\n      inputProps.validUrl === true &&\n      /^(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/.test(\n        state.data\n      ) === false\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  const renderedLabels = [\n    (label?.length ?? 0) > 0 ? (\n      <span className=\"d-inline-flex gap-1 text-wrap\">\n        <span>{label}</span>\n\n        {inputProps.required ? <span className=\"text-danger\">*</span> : null}\n      </span>\n    ) : null,\n\n    format === \"markdown\" ? (\n      <i class=\"bi bi-markdown text-muted\" title=\"Markdown\" />\n    ) : null,\n\n    format === \"comma-separated\" ? (\n      <span\n        className={`d-inline-flex align-items-center ${\n          isValid() ? \"text-muted\" : \"text-danger\"\n        }`}\n        style={{ fontSize: 12 }}\n      >\n        {format}\n      </span>\n    ) : null,\n\n    (inputProps.max ?? null) !== null ? (\n      <span\n        className={`d-inline-flex ${isValid() ? \"text-muted\" : \"text-danger\"}`}\n        style={{ fontSize: 12 }}\n      >{`${state.data?.length ?? 0} / ${inputProps.max}`}</span>\n    ) : null,\n  ].filter((label) => label !== null);\n\n  const onKeyDown = props.onKeyDown ?? (() => {});\n\n  return (\n    <div\n      className={[\n        \"d-flex flex-column flex-1 align-items-start justify-content-evenly\",\n        skipPaddingGap ? \"\" : \"gap-1 p-2\",\n        className ?? \"\",\n      ].join(\" \")}\n      style={style}\n      {...otherProps}\n    >\n      {renderedLabels.length > 0 ? (\n        <span\n          className=\"d-flex justify-content-between align-items-center gap-3 w-100\"\n          id={key}\n        >\n          {renderedLabels.map((label) => label)}\n        </span>\n      ) : null}\n\n      {!multiline ? (\n        <div className=\"w-100\">\n          <div className=\"input-group\">\n            {inputProps.prefix && (\n              <span className=\"input-group-text bg-white border-end-0\">\n                {inputProps.prefix}\n              </span>\n            )}\n            <input\n              aria-describedby={key}\n              data-testid={key}\n              aria-label={label}\n              className={[\n                \"form-control border\",\n                inputClassName,\n                inputProps.prefix ? \"border-start-0\" : \"\",\n              ].join(\" \")}\n              type={typeAttribute}\n              maxLength={inputProps.max}\n              value={state.data}\n              onChange={(e) => State.update({ data: e.target.value })}\n              onBlur={(e) => {\n                if (props.onBlur) {\n                  onBlur({ target: { value: e.target.value } });\n                }\n              }}\n              onKeyDown={onKeyDown}\n              {...{ placeholder, ...inputProps }}\n            />\n          </div>\n          {state.error && (\n            <div style={{ color: \"red\" }} className=\"text-sm\">\n              {state.error}\n            </div>\n          )}\n        </div>\n      ) : (\n        <textarea\n          aria-describedby={key}\n          data-testid={key}\n          aria-label={label}\n          className={[\"form-control border\", inputClassName].join(\" \")}\n          placeholder={\n            placeholder + (inputProps.required ? \" ( required )\" : \"\")\n          }\n          style={{ resize: inputProps.resize ?? \"vertical\" }}\n          type={typeAttribute}\n          maxLength={inputProps.max}\n          value={state.data}\n          onChange={(e) => State.update({ data: e.target.value })}\n          onBlur={(e) => {\n            if (props.onBlur) {\n              onBlur({ target: { value: e.target.value } });\n            }\n          }}\n          onKeyDown={onKeyDown}\n          {...{ placeholder, ...inputProps }}\n        />\n      )}\n    </div>\n  );\n};\n\nreturn TextInput(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devhub.megha19.near/widget/devhub.components.molecule.Input", "fact_widget_deployments_id": "2ffc215f3bac32fa143e06d2a22ddaaa", "inserted_timestamp": "2024-05-21T13:52:16.407Z", "modified_timestamp": "2024-05-21T13:52:16.407Z", "__row_index": 5}