{"tx_hash": "D9Czesw1NVTrNbZoFJvD7Lebpf2GEWAKqR5jabTkrFYp", "action_id_social": "9it3JVYGHSampPWoXbBz5xBAhgDRhLho23EccZe6B48j-0-widget", "block_id": 118098612, "block_timestamp": "2024-05-02T15:24:03.451Z", "signer_id": "events-committee.near", "widget_name": "devhub.entity.addon.github.kanban_board", "source_code": "const { DataRequest } = VM.require(\n  \"events-committee.near/widget/core.lib.data-request\"\n);\nDataRequest || (DataRequest = { paginated: () => {} });\n\nconst resPerPage = 100;\n\nfunction extractOwnerAndRepo(url) {\n  // Remove any leading or trailing slashes and split the URL by \"/\"\n  const parts = url\n    .trim()\n    .replace(/^\\/+|\\/+$/g, \"\")\n    .split(\"/\");\n\n  // Check if the URL matches the GitHub repository format\n  if (parts.length === 5 && parts[2] === \"github.com\") {\n    const owner = parts[3];\n    const repo = parts[4];\n    return { owner, repo };\n  } else {\n    return null;\n  }\n}\n\nconst GithubKanbanBoard = ({\n  columns,\n  title,\n  description,\n  repoURL,\n  ticketState,\n  dataTypesIncluded,\n  metadata,\n}) => {\n  State.init({\n    ticketsLastPage: false,\n    fetchedTicketsCount: {},\n    ticketsByColumn: {},\n    cachedItems: {},\n    displayCount: 40,\n    noTicketsFound: false,\n    error: null,\n  });\n\n  const ticketStateFilter = ticketState ?? \"all\";\n\n  function fetchTickets(columnId, labelSearchTerms, allLabelsMust) {\n    const pageNumber = !state.fetchedTicketsCount[columnId]\n      ? 1\n      : state.fetchedTicketsCount[columnId] / resPerPage + 1;\n    const { repo, owner } = extractOwnerAndRepo(repoURL);\n    const type =\n      dataTypesIncluded.issue && dataTypesIncluded.pullRequest\n        ? \"\"\n        : dataTypesIncluded.issue\n        ? \"type:issue\"\n        : \"type:pr\";\n    const labels = allLabelsMust\n      ? (labelSearchTerms ?? []).map((item) => `label:${item}`).join(\" \")\n      : `label:${(labelSearchTerms ?? []).join(\",\")}`;\n    const state =\n      ticketStateFilter === \"all\" ? \"\" : `state:${ticketStateFilter}`;\n    const q = encodeURIComponent(\n      `${labels} repo:${owner}/${repo} ${state} ${type}`\n    );\n    const res = fetch(\n      `https://api.github.com/search/issues?per_page=${resPerPage}&page=${pageNumber}&q=${q}`\n    );\n\n    if (res !== null) {\n      if (res.status !== 200) {\n        State.update({\n          error:\n            \"The listed users and repositories cannot be searched either because the resources do not exist or you do not have permission to view them.\",\n        });\n      } else {\n        if (!res.body.incomplete_results) {\n          State.update({\n            ticketsLastPage: true,\n          });\n        }\n        if (res.body.total_count === 0) {\n          State.update({\n            noTicketsFound: true,\n          });\n        } else {\n          State.update((lastKnownState) => ({\n            ...lastKnownState,\n            fetchedTicketsCount: {\n              ...lastKnownState.fetchedTicketsCount,\n              [columnId]:\n                lastKnownState.fetchedTicketsCount[columnId] ?? 0 + resPerPage,\n            },\n            ticketsByColumn: {\n              ...lastKnownState.ticketsByColumn,\n              [columnId]: [\n                ...(lastKnownState?.ticketsByColumn?.[columnId] ?? []),\n                ...res.body.items,\n              ],\n            },\n          }));\n        }\n      }\n    }\n  }\n\n  if (\n    repoURL &&\n    Object.keys(state.ticketsByColumn).length !== Object.keys(columns).length\n  ) {\n    Object.keys(columns).map((item) => {\n      const columnId = item;\n      const columnData = columns[columnId];\n      fetchTickets(\n        columnId,\n        columnData?.labelSearchTerms,\n        columnData.allLabelsMust\n      );\n    });\n  }\n\n  const renderItem = (ticket) => (\n    <Widget\n      src={`events-committee.near/widget/devhub.entity.addon.${metadata.ticket.type}`}\n      props={{ metadata: metadata.ticket, payload: ticket }}\n      key={ticket.id}\n    />\n  );\n\n  const cachedRenderItem = (item, index) => {\n    const key = JSON.stringify(item);\n\n    if (!(key in state.cachedItems)) {\n      state.cachedItems[key] = renderItem(item, index);\n      State.update();\n    }\n    return state.cachedItems[key];\n  };\n\n  const makeMoreItems = (columnId, labelSearchTerms, allLabelsMust) => {\n    const addDisplayCount = 20;\n    const newDisplayCount = state.displayCount + addDisplayCount;\n    State.update({\n      displayCount: newDisplayCount,\n    });\n    if (state.fetchedTicketsCount[columnId] < 2 * newDisplayCount) {\n      fetchTickets(columnId, labelSearchTerms, allLabelsMust);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"d-flex flex-column align-items-center gap-2 pb-4\">\n        <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n          <span>{title}</span>\n        </h5>\n\n        <p className=\"m-0 py-1 text-secondary text-center\">{description}</p>\n      </div>\n\n      <div className=\"d-flex gap-3 w-100\" style={{ overflowX: \"auto\" }}>\n        {Object.keys(columns).length === 0 ? (\n          <div\n            className={[\n              \"d-flex align-items-center justify-content-center\",\n              \"w-100 text-black-50 opacity-50\",\n            ].join(\" \")}\n            style={{ height: 384 }}\n          >\n            No columns were created so far.\n          </div>\n        ) : null}\n        {Object.values(columns ?? {})?.map((column) => {\n          const tickets = state.ticketsByColumn[column.id]\n            ? state.ticketsByColumn[column.id].slice(0, state.displayCount)\n            : [];\n          const renderedItems = tickets.map(cachedRenderItem);\n\n          return (\n            <div\n              className=\"col-3\"\n              style={{ minWidth: \"300px\" }}\n              key={`column-${column.id}-view`}\n            >\n              <div className=\"card rounded-4\">\n                <div\n                  style={{ height: \"75vh\", overflow: \"auto\" }}\n                  className={[\n                    \"card-body d-flex flex-column gap-3 p-2\",\n                    \"border border-1 rounded-4\",\n                  ].join(\" \")}\n                  id={column.id}\n                >\n                  <span className=\"d-flex flex-column py-1\">\n                    <h6 className=\"card-title h6 m-0\">{column.title}</h6>\n                    <p class=\"text-secondary m-0\">{column.description}</p>\n                  </span>\n                  {state.error && (\n                    <div className=\"alert alert-danger\">\n                      Error: {state.error}\n                    </div>\n                  )}\n                  {state.noTicketsFound && <p>No tickets found</p>}\n                  {state.fetchedTicketsCount[column.id] > 0 && (\n                    <InfiniteScroll\n                      loadMore={() =>\n                        makeMoreItems(\n                          column.id,\n                          column?.labelSearchTerms,\n                          column.allLabelsMust\n                        )\n                      }\n                      hasMore={!state.ticketsLastPage}\n                      loader={<>Loading...</>}\n                      useWindow={false}\n                      threshold={80}\n                    >\n                      <div class=\"d-flex flex-column gap-2\">\n                        {renderedItems}\n                      </div>\n                    </InfiniteScroll>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nreturn GithubKanbanBoard(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events-committee.near/widget/devhub.entity.addon.github.kanban_board", "fact_widget_deployments_id": "9759526344c7dbdbeb3e924f96f7424c", "inserted_timestamp": "2024-05-02T16:41:38.192Z", "modified_timestamp": "2024-05-02T16:41:38.192Z", "__row_index": 1}