{"tx_hash": "3XRha6sH5sTcyGg8qSxfNn7gUopJHPDgj5oVu8fz9MRb", "action_id_social": "5vDZ5YRv9NXuczHzXeuTWTp2XRGTrdyaskXXJqqDQx2M-0-widget", "block_id": 118439893, "block_timestamp": "2024-05-07T14:10:44.724Z", "signer_id": "events-committee.near", "widget_name": "devhub.entity.proposal.MultiSelectLabelsDropdown", "source_code": "const availableOptions = [\n  { label: \"Bounty\", value: \"Bounty\", color: \"#7C66DC\" },\n  { label: \"Bounty booster\", value: \"Bounty booster\", color: \"#DCC266\" },\n  { label: \"Hackathon\", value: \"Hackathon\", color: \"#04A46E\" },\n  { label: \"Hackbox\", value: \"Hackbox\", color: \"#DC6666\" },\n  {\n    label: \"Event sponsorship\",\n    value: \"Event sponsorship\",\n    color: \"#0DAEBB\",\n  },\n  { label: \"Meetup\", value: \"Meetup\", color: \"#DC9866\" },\n  { label: \"Travel expenses\", value: \"Travel expenses\", color: \"#D366DC\" },\n  { label: \"Other\", value: \"Other\", color: \"#9BA1A6\" },\n];\n\nconst { href } = VM.require(`events-committee.near/widget/core.lib.url`);\nhref || (href = () => {});\n\nconst { selected, onChange, disabled, hideDropdown } = props;\n\nconst [selectedOptions, setSelectedOptions] = useState([]);\nconst [isOpen, setIsOpen] = useState(false);\n\nconst toggleDropdown = () => {\n  setIsOpen(!isOpen);\n};\n\nuseEffect(() => {\n  if (JSON.stringify(selectedOptions) !== JSON.stringify(selected)) {\n    if ((selected ?? []).some((i) => !i.value)) {\n      setSelectedOptions(\n        selected.map((i) => availableOptions.find((t) => t.value === i)),\n      );\n    } else {\n      setSelectedOptions(selected);\n    }\n  }\n}, [selected]);\n\nuseEffect(() => {\n  if (JSON.stringify(selectedOptions) !== JSON.stringify(selected)) {\n    onChange(selectedOptions);\n  }\n}, [selectedOptions]);\n\nconst Container = styled.div`\n  .drop-btn {\n    width: 100%;\n    text-align: left;\n    padding-inline: 10px;\n  }\n\n  .dropdown-toggle:after {\n    position: absolute;\n    top: 46%;\n    right: 2%;\n  }\n\n  .dropdown-menu {\n    width: 100%;\n  }\n\n  .dropdown-item.active,\n  .dropdown-item:active {\n    background-color: #f0f0f0 !important;\n    color: black;\n  }\n\n  .disabled {\n    background-color: #f8f8f8 !important;\n    cursor: not-allowed !important;\n    border-radius: 5px;\n    opacity: inherit !important;\n  }\n\n  .disabled.dropdown-toggle::after {\n    display: none !important;\n  }\n\n  .custom-select {\n    position: relative;\n  }\n\n  .selected {\n    background-color: #f0f0f0;\n  }\n\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .text-wrap {\n    overflow: hidden;\n    white-space: normal;\n  }\n`;\n\nconst handleOptionClick = (option) => {\n  if (!selectedOptions.some((item) => item.value === v.value)) {\n    setSelectedOptions([...selectedOptions, option]);\n  }\n  setIsOpen(false);\n};\n\nconst Item = ({ option }) => {\n  return <div> {option.label}</div>;\n};\n\nreturn (\n  <>\n    <div className=\"d-flex gap-2 align-items-center\">\n      {selectedOptions.map((option) => {\n        return (\n          <div\n            style={{\n              color: \"white\",\n              backgroundColor: option.color,\n              width: \"max-content\",\n            }}\n            className=\"d-flex gap-2 align-items-center badge rounded-lg p-2 h6 mb-0\"\n          >\n            {option.label}\n            {!disabled && (\n              <div\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  const updatedOptions = selectedOptions.filter(\n                    (item) => item.value !== option.value,\n                  );\n                  setSelectedOptions(updatedOptions);\n                }}\n              >\n                <i class=\"bi bi-trash3-fill\"></i>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n    {!hideDropdown && (\n      <Container>\n        <div\n          className=\"custom-select w-100\"\n          tabIndex=\"0\"\n          onBlur={() => setIsOpen(false)}\n        >\n          <div\n            className={\n              \"dropdown-toggle bg-white border rounded-2 btn drop-btn w-100 \" +\n              (disabled ? \"disabled\" : \"\")\n            }\n            onClick={!disabled && toggleDropdown}\n          >\n            <div className={`selected-option`}>Select Category</div>\n          </div>\n\n          {isOpen && (\n            <div className=\"dropdown-menu rounded-2 dropdown-menu-end dropdown-menu-lg-start px-2 shadow show w-100\">\n              <div>\n                {availableOptions.map((option) => (\n                  <div\n                    key={option.value}\n                    className={`dropdown-item cursor-pointer w-100 my-1 ${\n                      (selectedOptions ?? []).find(\n                        (item) => item.value === option.value,\n                      )\n                        ? \"selected\"\n                        : \"\"\n                    }`}\n                    onClick={() => handleOptionClick(option)}\n                  >\n                    <Item option={option} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </Container>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/events-committee.near/widget/devhub.entity.proposal.MultiSelectLabelsDropdown", "fact_widget_deployments_id": "e6ccde2f860cd3d943eb08ec97e1da13", "inserted_timestamp": "2024-05-07T15:40:01.544Z", "modified_timestamp": "2024-05-07T15:40:01.544Z", "__row_index": 1}