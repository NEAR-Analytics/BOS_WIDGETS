{"tx_hash": "4xxvuTfN7bNqeWDbfWgF8DsefD7snNizdA5xKcGxhcky", "action_id_social": "6bPhZAdwTK4w7ayhRgekzSSacxxCbYoYqLehhkyJssHw-0-widget", "block_id": 96447563, "block_timestamp": "2023-07-14T10:49:48.324Z", "signer_id": "eugenewolf507.near", "widget_name": "Gigs_AllArticlesList", "source_code": "//TODO !!!!!! update authorForWidget\n// const authorForWidget = \"neardigitalcollective.near\";\nconst authorForWidget = \"eugenewolf507.near\";\nconst accountId = props.accountId ?? context.accountId;\nconst addressForArticles = \"ndcGigArticle\";\nconst authorsWhitelist = props.writersWhiteList ?? [\n  \"neardigitalcollective.near\",\n  \"blaze.near\",\n  \"jlw.near\",\n  \"kazanderdad.near\",\n  \"joep.near\",\n  \"sarahkornfeld.near\",\n  \"yuensid.near\",\n  \"eugenewolf507.near\",\n];\nconst sharedArticleId = props.articleId;\nconst articleBlackList = [91092435, 91092174, 91051228, 91092223, 91051203];\nconst statusTagsArr = [\"open\", \"claimed\", \"closed\"];\n\n// ========== LOCAL STORAGE ==========\nconst myData = JSON.parse(Storage.privateGet(\"sortedArticlesByTagFromStorage\"));\nconst doesDataFresh = myData.time ? Date.now() - myData.time < 3000 : false;\nconsole.log(\"1 === doesDataFresh = \", doesDataFresh);\nconsole.log(\n  \".time= \",\n  myData.time,\n  \".sortedArticlesByTag= \",\n  !!myData.sortedArticlesByTag\n);\nif (doesDataFresh && myData.sortedArticlesByTag) {\n  console.log(\"2 Use data from Storage - IF PART\");\n  // ========== STATE INIT ==========\n  State.init(myData.sortedArticlesByTag);\n} else {\n  Storage.privateSet(\"sortedArticlesByTagFromStorage\", \"\");\n  console.log(\"2 Get data from nearSocial - IF PART\");\n\n  // ========== GET INDEX ARRAY FOR ARTICLES ==========\n  const postsIndex = Social.index(addressForArticles, \"main\", {\n    order: \"desc\",\n    accountId: undefined,\n  });\n\n  // ========== GET ALL ARTICLES ==========\n  const resultArticles =\n    postsIndex &&\n    postsIndex\n      .reduce((acc, { accountId, blockHeight }) => {\n        const postData = Social.get(\n          `${accountId}/${addressForArticles}/main`,\n          blockHeight\n        );\n        const postDataWithBlockHeight = {\n          ...JSON.parse(postData),\n          blockHeight,\n        };\n        return [...acc, postDataWithBlockHeight];\n      }, [])\n      .filter((article) =>\n        authorsWhitelist.some((addr) => addr === article.author)\n      )\n      .filter((article) => !articleBlackList.includes(article.blockHeight));\n  // ========== FILTER DUPLICATES ==========\n  const filteredArticles =\n    resultArticles.length &&\n    resultArticles.reduce((acc, article) => {\n      if (!acc.some(({ articleId }) => articleId === article.articleId)) {\n        return [...acc, article];\n      } else {\n        return acc;\n      }\n    }, []);\n\n  const sortArticlesByTag = () => {\n    if (filteredArticles === 0 || filteredArticles === undefined) {\n      return;\n    }\n    const result =\n      filteredArticles &&\n      filteredArticles.reduce(\n        (acc, article) => {\n          if (article.statusTag === \"claimed\") {\n            const claimed = [...acc.claimed, article];\n            const tempRes = { claimed };\n            return { ...acc, ...tempRes };\n          }\n          if (article.statusTag === \"closed\") {\n            const closed = [...acc.closed, article];\n            const tempRes = { closed };\n            return { ...acc, ...tempRes };\n          }\n          const intermediateArticle = { ...article, statusTag: \"open\" };\n          const open = [...acc.open, intermediateArticle];\n          const tempRes = { open };\n          return { ...acc, ...tempRes };\n        },\n        { open: [], claimed: [], closed: [] }\n      );\n    return result;\n  };\n\n  // ========== STATE INIT ==========\n  const sortedArticlesByTag = sortArticlesByTag();\n  sortedArticlesByTag && State.init(sortedArticlesByTag);\n\n  const dataForStorage = {\n    sortedArticlesByTag,\n    time: Date.now(),\n  };\n  Storage.privateSet(\n    \"sortedArticlesByTagFromStorage\",\n    JSON.stringify(dataForStorage)\n  );\n}\n\nconsole.log(\"*********** STATE\", state);\n\n// ========== UTILS ==========\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst composeData = (gigObject) => {\n  const data = {\n    ndcGigArticle: {\n      main: JSON.stringify(gigObject),\n    },\n    index: {\n      ndcGigArticle: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n  return data;\n};\n\nconst doesUserCanChangeStatus = authorsWhitelist.some(\n  (whiteAddr) => whiteAddr === accountId\n);\n\n// ========== HANDLER ==========\nconst clickHandler = (oldStatus, newStatus, articleId) => {\n  const actualTag = oldStatus.toLowerCase();\n  const newTag = newStatus.toLowerCase();\n  // Find the index of the object to be moved\n  const objectIndex = state[actualTag].findIndex(\n    (obj) => obj.articleId === articleId\n  );\n  // Check if an object was found and user have permission to change status\n  if (objectIndex !== -1 && doesUserCanChangeStatus) {\n    const objectToMove = state[actualTag].slice(objectIndex, 1)[0];\n    const updatedObjectToMove = {\n      ...objectToMove,\n      lastEditor: accountId,\n      timeLastEdit: Date.now(),\n      statusTag: newStatus,\n    };\n    const newData = composeData(updatedObjectToMove);\n    Social.set(newData, {\n      force: true,\n      onCommit: () => {\n        state[actualTag].splice(objectIndex, 1);\n        state[newTag].unshift(updatedObjectToMove);\n        State.update();\n      },\n    });\n  }\n};\n\n// ========== JSX ==========\nconst ScrollWrapper = styled.div`\n  overflow-x: scroll !important;\n  position: relative;\n  padding-bottom: 15px;\n`;\n\nreturn (\n  <ScrollWrapper>\n    <div class=\"row gx-2 d-flex flex-nowrap\">\n      {statusTagsArr.map((tag) => (\n        <div class=\"col\">\n          <div class=\"border border-dark rounded-2 px-3 pb-3\">\n            <div className=\"row card-group\">\n              <h4 className=\"pt-2 text-center\">{capitalize(tag)}</h4>\n              {state[tag].length > 0 &&\n                state[tag].map((item) => (\n                  <Widget\n                    src={`${authorForWidget}/widget/Gigs_AllArticlesList.Card`}\n                    props={{\n                      article: item,\n                      statusChangeHandler: clickHandler,\n                      statusTagsArr,\n                      sharedArticleId,\n                      doesUserCanChangeStatus,\n                    }}\n                  />\n                ))}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  </ScrollWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/eugenewolf507.near/widget/Gigs_AllArticlesList", "fact_widget_deployments_id": "34c3c2e30f88296cd68016269dde4970", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 39}