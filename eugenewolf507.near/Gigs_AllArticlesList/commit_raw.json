{"tx_hash": "EKqW86A9EM3aPwXx7z61cqp5XT4v71RMQo5vu84Tx6fn", "action_id_social": "13m5fkoCpxhzxZWMqzhxcfUSBZLbvUKYnUNJKcv69RYg-0-widget", "block_id": 97761203, "block_timestamp": "2023-07-31T12:02:13.244Z", "signer_id": "eugenewolf507.near", "widget_name": "Gigs_AllArticlesList", "source_code": "//TODO !!!!!! update authorForWidget and authorsWhitelist!!!\r\n// const authorForWidget = \"neardigitalcollective.near\";\r\nconst authorForWidget = \"eugenewolf507.near\";\r\nconst accountId = props.accountId ?? context.accountId;\r\nconst addressForArticles = \"ndcGigArticle\";\r\nconst authorsWhitelist = props.writersWhiteList ?? [\r\n  \"neardigitalcollective.near\",\r\n  \"blaze.near\",\r\n  \"jlw.near\",\r\n  \"kazanderdad.near\",\r\n  \"joep.near\",\r\n  \"sarahkornfeld.near\",\r\n  \"yuensid.near\",\r\n  \"james.near\",\r\n  \"ndcplug.near\",\r\n  \"eugenewolf507.near\",\r\n];\r\n// const authorsWhitelist = props.writersWhiteList ?? [\r\n// \"neardigitalcollective.near\",\r\n// \"blaze.near\",\r\n// \"jlw.near\",\r\n// \"kazanderdad.near\",\r\n// \"joep.near\",\r\n// \"sarahkornfeld.near\",\r\n// \"yuensid.near\",\r\n// \"james.near\",\r\n// \"ndcplug.near\",\r\n// ];\r\nconst sharedArticleId = props.articleId;\r\nconst articleBlackList = [91092435, 91092174, 91051228, 91092223, 91051203];\r\nconst statusTagsArr = [\"open\", \"claimed\", \"closed\"];\r\n\r\nconst getActualArticles = () => {\r\n  // ========== GET INDEX ARRAY FOR ARTICLES ==========\r\n  const postsIndex = Social.index(addressForArticles, \"main\", {\r\n    order: \"desc\",\r\n    accountId: undefined,\r\n  });\r\n  // ========== GET ALL ARTICLES ==========\r\n  const resultArticles =\r\n    postsIndex &&\r\n    postsIndex\r\n      .reduce((acc, { accountId, blockHeight }) => {\r\n        const postData = Social.get(\r\n          `${accountId}/${addressForArticles}/main`,\r\n          blockHeight\r\n        );\r\n        const postDataWithBlockHeight = {\r\n          ...JSON.parse(postData),\r\n          blockHeight,\r\n        };\r\n        return [...acc, postDataWithBlockHeight];\r\n      }, [])\r\n      .filter((article) =>\r\n        authorsWhitelist.some((addr) => addr === article.author)\r\n      )\r\n      .filter((article) => !articleBlackList.includes(article.blockHeight));\r\n  // ========== FILTER DUPLICATES ==========\r\n  const filteredArticles =\r\n    resultArticles.length &&\r\n    resultArticles.reduce((acc, article) => {\r\n      if (!acc.some(({ articleId }) => articleId === article.articleId)) {\r\n        return [...acc, article];\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, []);\r\n\r\n  if (filteredArticles === 0 || filteredArticles === undefined) {\r\n    return;\r\n  }\r\n  const result =\r\n    filteredArticles &&\r\n    filteredArticles.reduce(\r\n      (acc, article) => {\r\n        if (article.statusTag === \"claimed\") {\r\n          const claimed = [...acc.claimed, article];\r\n          const tempRes = { claimed };\r\n          return { ...acc, ...tempRes };\r\n        }\r\n        if (article.statusTag === \"closed\") {\r\n          const closed = [...acc.closed, article];\r\n          const tempRes = { closed };\r\n          return { ...acc, ...tempRes };\r\n        }\r\n        const intermediateArticle = { ...article, statusTag: \"open\" };\r\n        const open = [...acc.open, intermediateArticle];\r\n        const tempRes = { open };\r\n        return { ...acc, ...tempRes };\r\n      },\r\n      { open: [], claimed: [], closed: [] }\r\n    );\r\n  return result;\r\n};\r\n\r\n// ========== LOCAL STORAGE ==========\r\nconst localStorageData = JSON.parse(\r\n  Storage.privateGet(\"sortedArticlesByTagFromStorage\")\r\n);\r\nconst doesDataFresh = localStorageData.time\r\n  ? Date.now() - localStorageData.time < 4000\r\n  : false;\r\n\r\nconst initialCardWithOpenModal = { cardWithOpenModal: sharedArticleId };\r\n\r\nif (doesDataFresh && localStorageData.sortedArticlesByTag) {\r\n  // ========== STATE INIT ========== with articles from Storage\r\n  State.init({\r\n    ...localStorageData.sortedArticlesByTag,\r\n    ...initialCardWithOpenModal,\r\n  });\r\n} else {\r\n  Storage.privateSet(\"sortedArticlesByTagFromStorage\", \"\");\r\n\r\n  // ========== STATE INIT ========== with articles from near.social\r\n  const sortedArticlesByTag = getActualArticles();\r\n  sortedArticlesByTag &&\r\n    State.init({ ...sortedArticlesByTag, ...initialCardWithOpenModal });\r\n\r\n  const dataForStorage = {\r\n    sortedArticlesByTag,\r\n    time: Date.now(),\r\n  };\r\n  Storage.privateSet(\r\n    \"sortedArticlesByTagFromStorage\",\r\n    JSON.stringify(dataForStorage)\r\n  );\r\n}\r\n\r\n// ========== UTILS ==========\r\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nconst composeData = (gigObject) => {\r\n  const data = {\r\n    ndcGigArticle: {\r\n      main: JSON.stringify(gigObject),\r\n    },\r\n    index: {\r\n      ndcGigArticle: JSON.stringify({\r\n        key: \"main\",\r\n        value: {\r\n          type: \"md\",\r\n        },\r\n      }),\r\n    },\r\n  };\r\n  return data;\r\n};\r\n\r\nconst doesUserCanChangeStatus = authorsWhitelist.some(\r\n  (whiteAddr) => whiteAddr === accountId\r\n);\r\n\r\n// if (sharedArticleId) {\r\n//   State.update({ cardWithOpenModal: sharedArticleId });\r\n// }\r\n\r\n// ========== HANDLER ==========\r\nconst openModalHandler = (text) => {\r\n  State.update({ cardWithOpenModal: text });\r\n};\r\n\r\nconst closeModalHandler = () => {\r\n  State.update({ cardWithOpenModal: false });\r\n};\r\n\r\nconst updateStatusHandler = (oldStatus, newStatus, articleId) => {\r\n  const actualTag = oldStatus.toLowerCase();\r\n  const newTag = newStatus.toLowerCase();\r\n  // Find the index of the object to be moved\r\n  const objectIndex = state[actualTag].findIndex(\r\n    (obj) => obj.articleId === articleId\r\n  );\r\n  // Check if an object was found and user have permission to change status\r\n  if (objectIndex !== -1 && doesUserCanChangeStatus) {\r\n    const objectToMove = state[actualTag].slice(objectIndex, 1)[0];\r\n    const updatedObjectToMove = {\r\n      ...objectToMove,\r\n      lastEditor: accountId,\r\n      timeLastEdit: Date.now(),\r\n      statusTag: newStatus,\r\n    };\r\n    const newData = composeData(updatedObjectToMove);\r\n    Social.set(newData, {\r\n      force: true,\r\n      onCommit: () => {\r\n        state[actualTag].splice(objectIndex, 1);\r\n        state[newTag].unshift(updatedObjectToMove);\r\n        state.cardWithOpenModal = \"\";\r\n        State.update();\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\n// ========== JSX ==========\r\nconst ScrollWrapper = styled.div`\r\n  overflow-x: scroll !important;\r\n  position: relative;\r\n  padding-bottom: 15px;\r\n`;\r\n\r\nreturn (\r\n  <ScrollWrapper>\r\n    <div class=\"row gx-2 d-flex flex-nowrap\">\r\n      {statusTagsArr.map((tag) => (\r\n        <div class=\"col\">\r\n          <div class=\"border border-dark rounded-2 px-3 px-xl-4\">\r\n            <div className=\"row card-group\">\r\n              <h4 className=\"pt-2 text-center\">{capitalize(tag)}</h4>\r\n              {state[tag].length > 0 &&\r\n                state[tag].map((item) => (\r\n                  <Widget\r\n                    src={`${authorForWidget}/widget/Gigs_AllArticlesList.Card`}\r\n                    props={{\r\n                      article: item,\r\n                      statusChangeHandler: updateStatusHandler,\r\n                      statusTagsArr,\r\n                      sharedArticleId,\r\n                      doesUserCanChangeStatus,\r\n                      openModalHandler,\r\n                      closeModalHandler,\r\n                      cardWithOpenModal: state.cardWithOpenModal,\r\n                    }}\r\n                  />\r\n                ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </ScrollWrapper>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/eugenewolf507.near/widget/Gigs_AllArticlesList", "fact_widget_deployments_id": "d040dfd9cd86ab1b543426ac17aa2278", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 42}