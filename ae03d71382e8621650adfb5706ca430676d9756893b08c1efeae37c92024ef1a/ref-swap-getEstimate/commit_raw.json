{"tx_hash": "ATw7skjesgXzmaT8q9kX1tBi28J2sRPv251K8oyg6hu7", "action_id_social": "BV1VoM7GqqHVvpuwZucxgsbx5Uyr7CWQThBm58Mg3aTw-0-widget", "block_id": 91606586, "block_timestamp": "2023-05-11T12:27:48.603Z", "signer_id": "ae03d71382e8621650adfb5706ca430676d9756893b08c1efeae37c92024ef1a", "widget_name": "ref-swap-getEstimate", "source_code": "const shrinkToken = (value, decimals) => {\n  return new Big(value || 0).div(new Big(10).pow(decimals || 24));\n};\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst {\n  tokenIn: tokenInFromProps,\n  tokenOut: tokenOutFromProps,\n  amountIn,\n  loadRes,\n  reloadPools,\n  setReloadPools,\n} = props;\n\nconst tokenIn =\n  tokenInFromProps.id === \"NEAR\"\n    ? { ...tokenInFromProps, id: \"wrap.near\" }\n    : tokenInFromProps;\n\nconst tokenOut =\n  tokenOutFromProps.id === \"NEAR\"\n    ? { ...tokenOutFromProps, id: \"wrap.near\" }\n    : tokenOutFromProps;\n\nconst FEE_DIVISOR = 10000;\n\nconst getSinglePoolEstimate = (tokenIn, tokenOut, pool, amountIn) => {\n  const allocation = amountIn;\n\n  const amount_with_fee =\n    Number(allocation) * (FEE_DIVISOR - pool.total_fee || pool.fee || 0);\n\n  const in_balance = shrinkToken(\n    pool.amounts[pool.token_account_ids[0] === tokenIn.id ? 0 : 1],\n    tokenIn.decimals\n  );\n\n  const out_balance = shrinkToken(\n    pool.amounts[pool.token_account_ids[0] === tokenIn.id ? 1 : 0],\n\n    tokenOut.decimals\n  );\n\n  const estimate = new Big(\n    (\n      (amount_with_fee * Number(out_balance)) /\n      (FEE_DIVISOR * Number(in_balance) + amount_with_fee)\n    ).toString()\n  ).toFixed();\n\n  return {\n    estimate,\n    pool,\n    tokenIn,\n    tokenOut,\n  };\n};\n\nconst returnNull = (sig) => {\n  loadRes({ sig });\n  return <div />;\n};\n\nconst wrapOperation =\n  [tokenIn, tokenOut].every((meta) => meta.id === \"wrap.near\") &&\n  !![tokenIn, tokenOut].find((meta) => meta.symbol === \"NEAR\");\n\nif (wrapOperation) {\n  loadRes({\n    estimate: amountIn,\n    tokenIn,\n    tokenOut,\n    pool: \"wrap\",\n  });\n\n  return <div />;\n}\n\nif (tokenIn.id === tokenOut.id) return returnNull();\n\nlet topPools = JSON.parse(\n  fetch(\"https://indexer.ref.finance/list-top-pools\").body\n);\n\nconst reloadTopPools = () => {\n  asyncFetch(\"https://indexer.ref.finance/list-top-pools\").then((res) => {\n    const data = res.body;\n    topPools = JSON.parse(data);\n    setReloadPools(false);\n  });\n};\n\nif (reloadPools) {\n  reloadTopPools();\n}\n\nif (!topPools) return returnNull();\n\nif (Number(amountIn) === 0) {\n  return returnNull();\n}\n\nconst poolsThisPair = topPools.filter(\n  (p) =>\n    p.token_account_ids.includes(tokenIn.id) &&\n    p.token_account_ids.includes(tokenOut.id)\n);\n\nconst poolThisPair = poolsThisPair.find((p) => p.token_account_ids.length > 2)\n  ? poolsThisPair.find((p) => p.token_account_ids.length > 2)\n  : poolsThisPair[0];\n\nif (!poolThisPair || poolThisPair.amounts.some((a) => Number(a) === 0)) {\n  return returnNull(\"no_pool\");\n}\n\nif (poolThisPair.pool_kind === \"SIMPLE_POOL\") {\n  const res = getSinglePoolEstimate(tokenIn, tokenOut, poolThisPair, amountIn);\n\n  loadRes(res);\n} else {\n  return (\n    <Widget\n      src=\"weige.near/widget/ref-stable-swap-algorithm\"\n      props={{\n        loadRes: loadRes,\n        tokenIn,\n        tokenOut,\n\n        amountIn: amountIn,\n        pool: poolThisPair,\n      }}\n    />\n  );\n}\n\nreturn <div />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ae03d71382e8621650adfb5706ca430676d9756893b08c1efeae37c92024ef1a/widget/ref-swap-getEstimate", "fact_widget_deployments_id": "b57237117b545c8e7ff4b806a888a987", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}