{"tx_hash": "G4hWKp3QZU2kXNxr7LSVoUhrZX7jqD5wzgGELSfNpcBX", "action_id_social": "F3h8o1beWpZVmtDjypJW2PsJWeXA7z9x5ZMaMJZR93zR-0-widget", "block_id": 89666857, "block_timestamp": "2023-04-15T21:43:05.920Z", "signer_id": "connectamey.near", "widget_name": "Everything.Create.Document", "source_code": "// Repository: https://github.com/near-everything/idea-creator\r\nconst externalAppUrl = \"https://near-thing-creator-v99j.vercel.app/\";\r\n\r\n/**\r\n * Initial Path (optional but recommended)\r\n */\r\nconst path = props.path;\r\n/**\r\n * Initial view height (optional but recommended)\r\n */\r\nconst initialViewHeight = 500;\r\nconst initialPayload = {};\r\n\r\n/**\r\n * Request Handlers - Backend.\r\n *\r\n * - request: payload sent by External App\r\n *\r\n * - response: method to send the answer back to the External App\r\n *\r\n * - utils: Utils features like\r\n *      - promisify: (caller, resolve, reject)\r\n *      There's no Promisse for some features yet, So this is util for when you need to get cached data using DiscoveryAPI, e.g:\r\n *      utils.promisify(() => Social.getr(`${context.accountId}/profile`), (res) => console.log(res), (err) => console.log(err))\r\n *\r\n * @param {{type: string, payload: {}}} request request with payload sent by External App\r\n * @param {(request) => {send: () => void}} response send the answer back to the External App\r\n * @param {{promisify:(caller: () => void, resolve: (data) => void, reject: (error) => void)}} utils Utils features like\r\n */\r\nconst requestHandler = (request, response, Utils) => {\r\n  switch (request.type) {\r\n    case \"create-thing\":\r\n      handleCreatePost(request, response);\r\n      break;\r\n  }\r\n};\r\n\r\nconst handleCreatePost = (request, response) => {\r\n  const { payload } = request;\r\n  if (payload) {\r\n    asyncFetch(\"https://monkfish-app-ginhc.ondigitalocean.app/graphql\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-Everything\": \"simple\",\r\n      },\r\n      body: JSON.stringify({\r\n        query:\r\n          \"mutation createPost($title: String, $description: String) { posts { create(name: $title) { entities { id } } appendContentToDescription(value: $description) { entities { id   } } } }\",\r\n        variables: payload,\r\n      }),\r\n    }).then((res) => {\r\n      if (res.body.errors) {\r\n        response(request).send(res.body.errors);\r\n      } else {\r\n        Social.set(\r\n          {\r\n            thing: {\r\n              main: JSON.stringify({\r\n                thingId: res.body.data.posts.create.entities[0].id,\r\n              }),\r\n            },\r\n            index: {\r\n              abc: JSON.stringify({\r\n                key: \"main\",\r\n                value: {\r\n                  type: \"connectamey.near/type/Post\",\r\n                },\r\n              }),\r\n            },\r\n          },\r\n          {\r\n            force: true,\r\n            onCommit: () => {\r\n              response(request).send({ success: true });\r\n            },\r\n            onCancel: () => {\r\n              response(request).send({ error: \"the action was canceled\" });\r\n            },\r\n          }\r\n        );\r\n        response(request).send(res.body.data);\r\n      }\r\n    });\r\n    return;\r\n  }\r\n  // Error\r\n  response(request).send({\r\n    error: \"content must be provided\",\r\n  });\r\n};\r\n\r\nreturn (\r\n  <Widget\r\n    src={\"wendersonpires.near/widget/NearSocialBridgeCore\"}\r\n    props={{\r\n      externalAppUrl,\r\n      path,\r\n      initialViewHeight,\r\n      initialPayload,\r\n      requestHandler,\r\n    }}\r\n  />\r\n);\r\n", "metadata": null, "branch": {"draft": {"": null, "metadata": null}}, "widget_modules_used": null, "widget_url": "https://near.social/#/connectamey.near/widget/Everything.Create.Document", "fact_widget_deployments_id": "5deede9dd25461cb6a7a1643bbee8e78", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 13}