{"tx_hash": "5yiVWExhme1dwxH6SWBUAbgPREt5MxTui4jErijyhmKH", "action_id_social": "9qaWEyyndnhbmnpBNmrNcGED2PzVqoE5dnTS498G3gfw-0-widget", "block_id": 106947438, "block_timestamp": "2023-12-01T19:26:49.776Z", "signer_id": "mattlock.near", "widget_name": "zk-bridge", "source_code": "// constants\n\nconst GOERLI_CHAIN_ID = 5;\nconst ZKSYNC_GOERLI_CHAIN_ID = 280;\n\n// state\nconst defaultDeposit = {\n  network: {\n    id: \"l1\",\n    name: \"Ethereum\",\n  },\n  assets: [\n    {\n      id: \"weth\",\n      name: \"wETH\",\n      selected: false,\n      balance: \"0.00\",\n    },\n    {\n      id: \"usdc\",\n      name: \"USDC\",\n      selected: true,\n      balance: \"0.00\",\n    },\n  ],\n};\nconst defaultWithdraw = {\n  network: {\n    id: \"l2\",\n    name: \"zkSync Era\",\n  },\n  assets: [\n    {\n      id: \"weth\",\n      name: \"wETH\",\n      selected: false,\n      balance: \"0.00\",\n    },\n    {\n      id: \"usdc\",\n      name: \"USDC\",\n      selected: true,\n      balance: \"0.00\",\n    },\n  ],\n};\nif (!state.initialized) {\n  initState({\n    initialized: true,\n    deposit: defaultDeposit,\n    withdraw: defaultWithdraw,\n    amount: \"0.0\",\n  });\n  return \"\";\n}\n\n// providers\nconst goerliProvider = new ethers.providers.JsonRpcProvider(\n  \"https://rpc.ankr.com/eth_goerli\"\n);\n\nconst zksyncGoerliProvider = new ethers.providers.JsonRpcProvider(\n  \"https://testnet.era.zksync.dev\"\n);\n// get account\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\n// fetch ABIs\nconst zkL2Abi = fetch(\n  \"https://gist.githubusercontent.com/mattlockyer/628e679517ba187b2ddca79de3b33673/raw/8a12d5abfb375f2b6a3003e649c0bd6dfaf68e52/zksyncL2Abi.json\"\n);\n\nconst zkAbi = fetch(\n  \"https://gist.githubusercontent.com/kcole16/3aa22a29b14ea6a1a7377b38463697ef/raw/c8a7249231ac00c7c3c9f1dc6188fbf28c262cb5/abi.json\"\n);\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\n\nif (!zkAbi.ok || !erc20Abi.ok || !zkL2Abi.ok) {\n  return \"\";\n}\n\nconst iface = new ethers.utils.Interface(zkAbi.body);\nconst ifaceL2 = new ethers.utils.Interface(zkL2Abi.body);\n\nif (!state.chainId) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      const network =\n        chainId === GOERLI_CHAIN_ID || chainId === ZKSYNC_GOERLI_CHAIN_ID\n          ? \"testnet\"\n          : \"mainnet\";\n      console.log(\"chainId\", chainId, \"network\", network);\n      State.update({ chainId, network });\n    });\n  return \"\";\n}\nconst { chainId, network } = state;\n\n// https://era.zksync.io/docs/dev/building-on-zksync/useful-address.html\nconst contracts = {\n  mainnet: {\n    bridge: {\n      L1ERC20BridgeProxy: \"0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063\",\n      L2ERC20Bridge: \"0x11f943b2c77b743AB90f4A0Ae7d5A4e7FCA3E102\",\n    },\n    weth: {\n      deposit: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // l1 token\n      withdraw: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\", // l2 token\n      decimals: 18,\n    },\n    usdc: {\n      //deposit: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // l1 token\n      deposit: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // l1 token\n      withdraw: \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\", // l2 token\n      decimals: 6,\n    },\n  },\n  testnet: {\n    bridge: {\n      L1ERC20BridgeProxy: \"0x927DdFcc55164a59E0F33918D13a2D559bC10ce7\",\n      L2ERC20Bridge: \"0x00ff932A6d70E2B8f1Eb4919e1e09C1923E7e57b\",\n    },\n    weth: {\n      // deposit: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n      deposit: \"0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4\",\n      withdraw: undefined, // not found yet\n      decimals: 18,\n    },\n    usdc: {\n      // deposit: \"0x07865c6e87b9f70255377e024ace6630c1eaa37f\",\n      deposit: \"0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4\",\n      withdraw: \"0x0faF6df7054946141266420b43783387A78d82A9\",\n      decimals: 6,\n    },\n  },\n};\n\nconst l2TxGasLimit = \"900000\";\nconst l2TxGasPerPubdataByte = \"800\";\n\nconst tokens = {\n  weth: {\n    decimals: 18,\n  },\n  usdc: {\n    decimals: 6,\n  },\n};\n\nconst L2ERC20Bridge = new ethers.Contract(\n  \"0x00ff932A6d70E2B8f1Eb4919e1e09C1923E7e57b\",\n  zkL2Abi.body,\n  zksyncGoerliProvider\n);\n\nif (!state.bridgeAddress) {\n  L2ERC20Bridge.l1Bridge().then((bridgeAddress) => {\n    console.log(\"bridgeAddress\", bridgeAddress);\n    State.update({ bridgeAddress });\n  });\n  return \"\";\n}\n\nconst onAction = (data) => {\n  if (!data.amount) return;\n  if (data.action === \"deposit\") handleDeposit(data);\n  if (data.action === \"withdraw\") handleWithdraw(data);\n};\n\nconst handleDeposit = (data) => {\n  console.log(\"handleDeposit\", data);\n  State.update({ isLoading: true, log: undefined, explorerLink: undefined });\n  const l1Token = contracts[network][data.assetId].deposit;\n  const amountBig = ethers.utils.parseUnits(\n    data.amount,\n    tokens[data.assetId].decimals\n  );\n  const ethTransferCost = ethers.utils.parseUnits(\n    \"0.000581642\",\n    tokens.weth.decimals\n  );\n\n  const encodedData = iface.encodeFunctionData(\n    \"deposit(address,address,uint256,uint256,uint256)\",\n    [sender, l1Token, amountBig, l2TxGasLimit, l2TxGasPerPubdataByte]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: contracts[network].bridge.L1ERC20BridgeProxy,\n      data: encodedData,\n      value: ethTransferCost,\n      gasLimit: ethers.BigNumber.from(\"500000\"),\n    });\n  // .then(() => handleApprove(data))\n  // .catch((e) => {\n  //   console.error(\"deposit error:\", e);\n  //   State.update({ isLoading: false });\n  // });\n};\n\nconst handleApprove = (data) => {\n  console.log(\"handleApprove\", data);\n  const contract = new ethers.Contract(\n    contracts[network][data.assetId].deposit,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const amountBig = ethers.utils.parseUnits(data.amount, tokenDecimals);\n\n  contract\n    .approve(contracts[network].bridge.L1ERC20BridgeProxy, amountBig)\n    .then((tx) => {\n      console.log(\"approved: \", tx);\n\n      State.update({\n        log: \"The TX hash is: \" + tx.hash,\n        explorerLink:\n          `https://${network === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/` +\n          tx.hash,\n        isLoading: false,\n      });\n    })\n    .catch((e) => {\n      console.error(\"approve error:\", e);\n      State.update({ isLoading: false });\n    });\n};\n\nconst handleWithdraw = (data) => {\n  console.log(\"handleWithdraw\", data);\n  State.update({ isLoading: true, log: undefined, explorerLink: undefined });\n  const l2Token = contracts[network][data.assetId].withdraw;\n  const amountBig = ethers.utils.parseUnits(\n    data.amount,\n    tokens[data.assetId].decimals\n  );\n  console.log(\"encodedData\", sender, l2Token, amountBig);\n  const encodedData = ifaceL2.encodeFunctionData(\n    \"withdraw(address,address,uint256)\",\n    [sender, l2Token, amountBig]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: contracts[network].bridge.L2ERC20Bridge,\n      data: encodedData,\n      gasLimit: ethers.BigNumber.from(\"500000\"),\n    })\n    .then((d) => {\n      console.log(\"d\", d);\n    })\n    .catch((e) => {\n      console.error(\"withdraw error:\", e);\n      State.update({ isLoading: false });\n    });\n};\n\nconst getTokenBalance = (\n  sender,\n  _chainId,\n  tokenAddress,\n  decimals,\n  callback\n) => {\n  if (!sender) return;\n  const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const iface = new ethers.utils.Interface(erc20Abi);\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [sender]);\n  const provider =\n    _chainId === GOERLI_CHAIN_ID ? goerliProvider : zksyncGoerliProvider;\n\n  provider\n    .call({\n      to: tokenAddress,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n      const balance = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(decimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n\n      console.log(\"getTokenBalance balance\", balance, _chainId, tokenAddress);\n\n      if (callback) callback(balance);\n    });\n};\n\n// FETCH SENDER ETH BALANCE\nif (sender) {\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      // console.log(\n      //   \"balance of eth:\",\n      //   Big(balance).div(Big(10).pow(tokenDecimals)).toFixed(4)\n      // );\n    });\n}\n\nconst tab = !state.tab || state.tab === \"deposit\" ? \"deposit\" : \"withdraw\";\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst { deposit, withdraw } = state;\n\nif (!state.balancesUpdated) {\n  // update token balances\n  // l1\n  // getTokenBalance(sender, contracts[network].weth.deposit, tokens.weth.decimals, (balance) => {\n  //   if (!deposit) return;\n  //   const cloned = clone(deposit);\n  //   cloned.assets[0].balance = balance;\n  //   State.update({ deposit: cloned });\n  // });\n\n  // goerli USDC\n  getTokenBalance(\n    sender,\n    GOERLI_CHAIN_ID,\n    contracts[network].usdc.deposit,\n    tokens.usdc.decimals,\n    (balance) => {\n      const cloned = clone(deposit || defaultDeposit);\n      cloned.assets[1].balance = balance;\n      State.update({ deposit: cloned });\n    }\n  );\n\n  //l2;\n  // getTokenBalance(sender, contracts[network].weth.withdraw, tokens.weth.decimals, (balance) => {\n  //   if (!withdraw) return;\n  //   const cloned = clone(withdraw);\n  //   cloned.assets[0].balance = balance;\n  //   State.update({ withdraw: cloned });\n  // });\n\n  // zksync usdc\n  getTokenBalance(\n    sender,\n    ZKSYNC_GOERLI_CHAIN_ID,\n    contracts[network].usdc.withdraw,\n    tokens.usdc.decimals,\n    (balance) => {\n      const cloned = clone(withdraw || defaultWithdraw);\n      cloned.assets[1].balance = balance;\n      State.update({ withdraw: cloned });\n    }\n  );\n\n  State.update({ balancesUpdated: true });\n\n  return \"\";\n}\n\nconst onTabChange = (tab) => {\n  // console.log(\"onTabChange\", deposit, withdraw);\n  // State.update({ deposit: clone(withdraw), withdraw: clone(deposit), tab });\n};\n\nconsole.log(deposit.assets, withdraw.assets);\n\nreturn (\n  <Widget\n    src=\"mattlock.near/widget/bridge-ui\"\n    props={{ ...state, onTabChange, onAction, title: \"zkBridge\" }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/zk-bridge", "fact_widget_deployments_id": "0664ca41e83993fcd3563fba1ce5e452", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}