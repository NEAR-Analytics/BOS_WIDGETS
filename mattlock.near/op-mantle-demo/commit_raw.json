{"tx_hash": "7oR1tnxH4asmULG7fdHMXN6NMd78We4jhP6ba234KNDG", "action_id_social": "5Are2JmB9m3ouQNxpi9wRxDjoMQjMZWpx7UFgCmz6oVc-0-widget", "block_id": 100594490, "block_timestamp": "2023-09-07T14:17:21.998Z", "signer_id": "mattlock.near", "widget_name": "op-mantle-demo", "source_code": "// for goerli\nconst MNT_CONTRACT_GOERLI = `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`;\nconst MNT_SPENDER_GOERLI = `0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330`;\nconst MNT_CONTRACT_MANTLE_GOERLI = `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`;\nconst MNT_MIN_GAS = `200000`;\nconst ERC20_APPROVE_GAS = `81942`;\nconst ERC20_TRANSFER_GAS = `192460`;\nconst HASH_ZERO =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nState.init({\n  console: \"Welcome!\",\n  readingContract: false,\n  // inputs\n  bridgeAmountMNT: \"0\",\n  // read from contract\n  allowance: \"0\",\n  allowanceFormatted: \"0\",\n  balance: \"0\",\n  balanceFormatted: \"0\",\n});\n\nconst { chainId } = state;\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isMantleGoerli = chainId === 5001;\nconst isGoerli = chainId === 5;\n\n// const goerliProvider = new ethers.providers.JsonRpcProvider(\n//   \"https://rpc.ankr.com/eth_goerli\"\n// );\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\n// abis\n\nconst mntAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        type: \"address\",\n      },\n      {\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        type: \"address\",\n      },\n      {\n        type: \"address\",\n      },\n      {\n        type: \"uint256\",\n      },\n      {\n        type: \"uint32\",\n      },\n      {\n        type: \"bytes\",\n      },\n    ],\n    name: \"depositERC20\",\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        type: \"address\",\n      },\n      {\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        type: \"uint256\",\n      },\n    ],\n    name: \"allowance\",\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        type: \"uint256\",\n      },\n    ],\n    name: \"balanceOf\",\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst mntIface = new ethers.utils.Interface(mntAbi);\nconst mntContractGoerli = new ethers.Contract(\n  MNT_CONTRACT_GOERLI,\n  mntIface,\n  provider.getSigner()\n);\nconst mntSpenderGoerli = new ethers.Contract(\n  MNT_SPENDER_GOERLI,\n  mntIface,\n  provider.getSigner()\n);\n\n// functional\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n\n  function getMNTAllowance() {\n    if (!isGoerli) return;\n    if (state.readingContract) return;\n    State.update({ readingContract: true });\n    console.log(`getMNTAllowance`);\n\n    mntContractGoerli\n      .allowance(sender, MNT_SPENDER_GOERLI)\n      .then((allowanceRaw) => {\n        const allowance = allowanceRaw.toString();\n\n        console.log(allowance);\n\n        State.update({\n          allowance,\n          allowanceFormatted: ethers.utils.formatEther(allowance),\n        });\n      });\n\n    mntContractGoerli.balanceOf(sender).then((balanceRaw) => {\n      const balance = balanceRaw.toString();\n      State.update({\n        balance,\n        balanceFormatted: ethers.utils.formatEther(balance),\n      });\n    });\n  }\n\n  getMNTAllowance();\n}\n\nfunction handleApproveMNT() {\n  mntContractGoerli.approve(MNT_SPENDER_GOERLI, state.balance, {\n    gasLimit: ERC20_APPROVE_GAS,\n  });\n}\n\nfunction handleDepositMNT() {\n  const amount = ethers.utils.parseUnits(state.bridgeAmountMNT, `ether`);\n  if (Big(amount).gt(Big(state.allowance))) {\n    State.update({ console: `Not enough balance` });\n    return;\n  }\n\n  mntSpenderGoerli.depositERC20(\n    MNT_CONTRACT_GOERLI,\n    MNT_CONTRACT_MANTLE_GOERLI,\n    amount,\n    MNT_MIN_GAS,\n    [],\n    {\n      gasLimit: ERC20_TRANSFER_GAS,\n    }\n  );\n}\n\n// end functional\n\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <h3>Console:</h3>\n    <p>{state.console}</p>\n    {!isGoerli && !isMantleGoerli && (\n      <p>Please switch to ETH Goerli or OP Goerli</p>\n    )}\n    {isGoerli && (\n      <>\n        <h3>Deposits</h3>\n        <p>MNT tokens: {state.balanceFormatted}</p>\n        <p>Approved to Bridge: {state.allowanceFormatted}</p>\n        <h4>Approve MNT Tokens to Bridge</h4>\n        <button onClick={handleApproveMNT}>Approve</button>\n        <br />\n        <br />\n        <h4>Bridge MNT Tokens</h4>\n        <input\n          value={state.bridgeAmountMNT}\n          onChange={({ target: { value } }) =>\n            State.update({ bridgeAmountMNT: value })\n          }\n        />\n        <br />\n        <button onClick={handleDepositMNT}>Bridge</button>\n        <br />\n        <br />\n      </>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/op-mantle-demo", "fact_widget_deployments_id": "657680471abbf4a302c07e2a9b087890", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}