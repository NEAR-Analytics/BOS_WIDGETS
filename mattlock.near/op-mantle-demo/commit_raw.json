{"tx_hash": "GFPrKJUDHpstkNwe3NzDBQSGGjvQ9i9gPoByZhZurWgw", "action_id_social": "AMDf3D7x6YwN1bec636mL3raHSLSaaGG4BFaN65Ua5Ls-0-widget", "block_id": 100530204, "block_timestamp": "2023-09-06T16:51:54.269Z", "signer_id": "mattlock.near", "widget_name": "op-mantle-demo", "source_code": "// for goerli\nconst MNT_CONTRACT_GOERLI = `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`;\nconst MNT_SPENDER_GOERLI = `0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330`;\nconst MNT_CONTRACT_MANTLE_GOERLI = `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`;\nconst MNT_MIN_GAS = `200000`;\nconst ERC20_TRANSFER_GAS = `192460`;\n\nconst OP_BRIDGE_DEPOSIT_CONTRACT = \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\";\nconst OP_BRIDGE_WITHDRAW_CONTRACT =\n  \"0x4200000000000000000000000000000000000010\";\nconst ETH_ADDR = \"0x0000000000000000000000000000000000000000\";\nconst ETH_ADDR_L1 = `0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000`;\nconst DEFAULT_AMOUNT_ETH = \"0.01\";\nconst DEFAULT_AMOUNT = ethers.utils.parseUnits(DEFAULT_AMOUNT_ETH, 18);\nconst L2_OUTPUT_ORACLE_CONTRACT = `0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0`;\nconst L1_OPTIMISM_PORTAL_CONTRACT = `0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383`;\nconst HASH_ZERO =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n// Withdrawal target TX info\n// Call initiateWithdraw so the L2 message is passed\n// Following TX example here: https://goerli-optimism.etherscan.io/tx/0xb59ff0af1db39be0cc03e7410621ed21ce60e5833f8c4bf97d8747bd8d033bc8\n// Manually adjusted amount to 0.01\nconst ETH_WITHDRAWAL_MESSAGE = `0x32b7006d000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead0000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000`;\nconst L2_L1_MESSAGE_PASSER_CONTRACT = `0x4200000000000000000000000000000000000016`;\nconst ETH_WITHDRAWAL_TARGET = `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`;\n\n// Storage keys\nconst STORAGE_RESOLVED = \"__STORAGE_RESOLVED\";\nconst STORAGE_MESSAGE_SLOT = \"__STORAGE_MESSAGE_SLOT\";\nconst STORAGE_L2_INDEX = \"__STORAGE_L2_INDEX\";\n\nState.init({\n  console: \"Welcome!\",\n  gettingAllowance: false,\n  allowance: \"0\",\n  allowanceFormatted: \"0\",\n});\n\nconst { chainId } = state;\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isMantleGoerli = chainId === 5001;\nconst isGoerli = chainId === 5;\n\nconst opGoerliProvider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism-goerli.gateway.tenderly.co/\"\n);\nconst opGoerliProviderOG = new ethers.providers.JsonRpcProvider(\n  \"https://goerli.optimism.io\"\n);\nconst goerliProvider = new ethers.providers.JsonRpcProvider(\n  \"https://rpc.ankr.com/eth_goerli\"\n);\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\n// abis\n\nconst mntAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        type: \"address\",\n      },\n      {\n        type: \"address\",\n      },\n      {\n        type: \"uint256\",\n      },\n      {\n        type: \"uint32\",\n      },\n      {\n        type: \"bytes\",\n      },\n    ],\n    name: \"depositERC20\",\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"allowance\",\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst mntIface = new ethers.utils.Interface(mntAbi);\nconst mntContractGoerli = new ethers.Contract(\n  MNT_CONTRACT_GOERLI,\n  mntIface,\n  provider.getSigner()\n);\nconst mntContractDepositGoerli = new ethers.Contract(\n  MNT_SPENDER_GOERLI,\n  mntIface,\n  provider.getSigner()\n);\n\n// functional\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n\n  function getMNTAllowance() {\n    if (!isGoerli) return;\n    if (state.gettingAllowance) return;\n    State.update({ gettingAllowance: true });\n    console.log(`getMNTAllowance`);\n\n    mntContractGoerli\n      .allowance(sender, MNT_SPENDER_GOERLI)\n      .then((allowanceRaw) => {\n        const allowance = allowanceRaw.toString();\n        State.update({\n          allowance,\n          allowanceFormatted: ethers.utils.formatEther(allowance),\n        });\n      });\n  }\n\n  getMNTAllowance();\n}\n\nfunction handleDepositMNT() {\n  const amount = ethers.utils.parseUnits(state.bridgeAmountMNT, `ether`);\n  if (Big(amount).gt(Big(state.allowance))) {\n    State.update({ console: `Not enough balance` });\n    return;\n  }\n\n  mntContractDepositGoerli.depositERC20(\n    MNT_CONTRACT_GOERLI,\n    MNT_CONTRACT_MANTLE_GOERLI,\n    amount,\n    MNT_MIN_GAS,\n    [],\n    {\n      gasLimit: ERC20_TRANSFER_GAS,\n    }\n  );\n}\n\n// end functional\n\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <h3>Console:</h3>\n    <p>{state.console}</p>\n    {!isGoerli && !isMantleGoerli && (\n      <p>Please switch to ETH Goerli or OP Goerli</p>\n    )}\n    {isGoerli && (\n      <>\n        <h3>Deposits</h3>\n        <p>Allowance to Bridge: {state.allowanceFormatted}</p>\n        <input\n          value={state.bridgeAmountMNT}\n          onChange={({ target: { value } }) =>\n            State.update({ bridgeAmountMNT: value })\n          }\n        />\n        <button onClick={handleDepositMNT}>Bridge</button>\n      </>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/op-mantle-demo", "fact_widget_deployments_id": "f10ac25df149cbc4db27464c85410c62", "inserted_timestamp": "2023-09-06T18:43:02.607Z", "modified_timestamp": "2023-09-06T18:43:02.607Z", "__row_index": 3}