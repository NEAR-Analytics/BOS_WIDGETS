{"tx_hash": "6SHZP2Uf2GQJDpHmKmp8ebjEkCMunDH3ucKEdmrqvaC7", "action_id_social": "25BEgv9uxhvcertX1ZY3hdKUwnfvKBpxSsqVHLveM8b4-0-widget", "block_id": 100459769, "block_timestamp": "2023-09-05T17:33:38.809Z", "signer_id": "mattlock.near", "widget_name": "op-mantle-demo", "source_code": "// for goerli\nconst OP_BRIDGE_DEPOSIT_CONTRACT = \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\";\nconst OP_BRIDGE_WITHDRAW_CONTRACT =\n  \"0x4200000000000000000000000000000000000010\";\nconst ETH_ADDR = \"0x0000000000000000000000000000000000000000\";\nconst ETH_ADDR_L1 = `0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000`;\nconst DEFAULT_AMOUNT_ETH = \"0.01\";\nconst DEFAULT_AMOUNT = ethers.utils.parseUnits(DEFAULT_AMOUNT_ETH, 18);\nconst L2_OUTPUT_ORACLE_CONTRACT = `0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0`;\nconst L1_OPTIMISM_PORTAL_CONTRACT = `0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383`;\nconst HASH_ZERO =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n// Withdrawal target TX info\n// Call initiateWithdraw so the L2 message is passed\n// Following TX example here: https://goerli-optimism.etherscan.io/tx/0xb59ff0af1db39be0cc03e7410621ed21ce60e5833f8c4bf97d8747bd8d033bc8\n// Manually adjusted amount to 0.01\nconst ETH_WITHDRAWAL_MESSAGE = `0x32b7006d000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead0000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000`;\nconst L2_L1_MESSAGE_PASSER_CONTRACT = `0x4200000000000000000000000000000000000016`;\nconst ETH_WITHDRAWAL_TARGET = `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`;\n\n// Storage keys\nconst STORAGE_RESOLVED = \"__STORAGE_RESOLVED\";\nconst STORAGE_MESSAGE_SLOT = \"__STORAGE_MESSAGE_SLOT\";\nconst STORAGE_L2_INDEX = \"__STORAGE_L2_INDEX\";\n\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isMantleGoerli = chainId === 5001;\nconst isGoerli = chainId === 5;\n\nState.init({\n  console: \"Welcome!\",\n  transactionHash: `0x38082f56332ef0c5640487a47412aace70db81cdd0bb40e9a896a85953324ba0`,\n  resolved: Storage.privateGet(STORAGE_RESOLVED),\n  messageSlot: Storage.privateGet(STORAGE_MESSAGE_SLOT),\n  l2OutputIndex: Storage.privateGet(STORAGE_L2_INDEX),\n  withdrawals: [],\n  gettingWithdrawals: false,\n});\n\nconst opGoerliProvider = new ethers.providers.JsonRpcProvider(\n  \"https://optimism-goerli.gateway.tenderly.co/\"\n);\nconst opGoerliProviderOG = new ethers.providers.JsonRpcProvider(\n  \"https://goerli.optimism.io\"\n);\nconst goerliProvider = new ethers.providers.JsonRpcProvider(\n  \"https://rpc.ankr.com/eth_goerli\"\n);\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n\n  function getETHWithdrawals() {\n    if (state.gettingWithdrawals) return;\n    State.update({ gettingWithdrawals: true });\n    console.log(\"getETHWithdrawals\");\n\n    const bridgeAbiWithdrawal = [\n      {\n        anonymous: false,\n        inputs: [\n          {\n            indexed: true,\n            internalType: \"address\",\n            name: \"l1Token\",\n            type: \"address\",\n          },\n          {\n            indexed: true,\n            internalType: \"address\",\n            name: \"l2Token\",\n            type: \"address\",\n          },\n          {\n            indexed: true,\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            indexed: false,\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            indexed: false,\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            indexed: false,\n            internalType: \"bytes\",\n            name: \"extraData\",\n            type: \"bytes\",\n          },\n        ],\n        name: \"WithdrawalInitiated\",\n        type: \"event\",\n      },\n    ];\n\n    const bridgeContractWithdrawal = new ethers.Contract(\n      OP_BRIDGE_WITHDRAW_CONTRACT,\n      bridgeAbiWithdrawal,\n      opGoerliProvider\n    );\n\n    const withdrawals = [];\n\n    bridgeContractWithdrawal\n      .queryFilter(\n        bridgeContractWithdrawal.filters.WithdrawalInitiated(\n          undefined,\n          undefined,\n          sender\n        )\n      )\n      .then((events) => {\n        events\n          .sort((a, b) => b.blockNumber - a.blockNumber)\n          .forEach((event) => {\n            const { args, blockNumber, transactionHash } = event;\n\n            const messagePasserAbi = [\n              \"event MessagePassed (uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)\",\n            ];\n\n            const messagePasserContract = new ethers.Contract(\n              L2_L1_MESSAGE_PASSER_CONTRACT,\n              messagePasserAbi,\n              opGoerliProvider\n            );\n\n            messagePasserContract\n              .queryFilter(\n                messagePasserContract.filters.MessagePassed(\n                  undefined,\n                  undefined,\n                  \"0x5086d1eEF304eb5284A0f6720f79403b4e9bE294\",\n                  undefined,\n                  undefined,\n                  undefined,\n                  undefined\n                ),\n                blockNumber - 150,\n                blockNumber\n              )\n              .then((events) => {\n                const event = events.filter(\n                  ({ data }) => data.indexOf(sender.substring(2)) > -1\n                )[0];\n\n                const [\n                  messageNonce,\n                  sender,\n                  target,\n                  value,\n                  minGasLimit,\n                  message,\n                  withdrawalHash,\n                ] = event.args;\n\n                let withdrawal = {\n                  blockNumber,\n                  transactionHash,\n                  messageNonce,\n                  sender,\n                  target,\n                  value,\n                  minGasLimit,\n                  message,\n                  withdrawalHash,\n                };\n\n                withdrawals.push(withdrawal);\n\n                State.update({\n                  withdrawals,\n                });\n              });\n          });\n      });\n  }\n\n  getETHWithdrawals();\n}\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      { internalType: \"uint32\", name: \"_l2Gas\", type: \"uint32\" },\n      { internalType: \"bytes\", name: \"_data\", type: \"bytes\" },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHDepositInitiated\",\n    type: \"event\",\n  },\n];\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nfunction handleDepositETH() {\n  if (!isGoerli)\n    return State.update({\n      console: `switch to Goerli Testnet (not Optimism Goerli, ETH Goerli) to deposit ETH to OP Goerli`,\n    });\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"depositETH(uint32, bytes)\",\n    [200000, 0]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: OP_BRIDGE_DEPOSIT_CONTRACT,\n      data: encodedData,\n      value: DEFAULT_AMOUNT,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\n// end functional\n\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\nconsole.log(\"state.withdrawals\", Object.values(state.withdrawals));\n\nreturn (\n  <div>\n    <h3>Console:</h3>\n    <p>{state.console}</p>\n    {!isGoerli && !isMantleGoerli && (\n      <p>Please switch to ETH Goerli or OP Goerli</p>\n    )}\n    {isGoerli && (\n      <>\n        <h3>Deposits & Withdrawals</h3>\n        <Widget src={`ciocan.near/widget/op-bridge-list`} />\n\n        <button onClick={handleDepositETH}>\n          Deposit {DEFAULT_AMOUNT_ETH} ETH to L2\n        </button>\n        <br />\n        <br />\n        <p>To initiate a withdraw, switch to OP Goerli network</p>\n\n        {state.withdrawals.length === 0 && <h3>Loading Withdrawals</h3>}\n        {!isGoerli && <p>To prove withdrawals switch to ETH Goerli</p>}\n        {state.withdrawals.map(({ blockNumber, transactionHash }, i) => {\n          return (\n            <>\n              <br />\n              <br />\n              <p>TX hash: {transactionHash}</p>\n              <button onClick={() => handleWithdrawalProve(i)}>\n                Prove Withdrawal\n              </button>\n              <button onClick={() => handleWithdrawalClaim(i)}>\n                Claim Withdrawal\n              </button>\n            </>\n          );\n        })}\n      </>\n    )}\n    {isMantleGoerli && (\n      <>\n        <h3>Deposits & Withdrawals</h3>\n        <Widget src={`ciocan.near/widget/op-bridge-list`} />\n\n        <button onClick={handleWithdrawalInitiating}>\n          Initiate Withdrawal of {DEFAULT_AMOUNT_ETH} ETH on L2\n        </button>\n        <br />\n        <br />\n        <p>\n          To make a deposit, or prove a withdraw, switch to ETH Goerli network\n        </p>\n      </>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/op-mantle-demo", "fact_widget_deployments_id": "ac1abeed9d163fdd51c28f7688a7a224", "inserted_timestamp": "2023-09-05T19:34:39.475Z", "modified_timestamp": "2023-09-05T19:34:39.475Z", "__row_index": 1}