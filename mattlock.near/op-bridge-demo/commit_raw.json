{"tx_hash": "5DsfEBh9QK3uGb2WBUACgPSs5YTAE6cNN8LxSRZM1mhN", "action_id_social": "DyxQMQdQQ5rsyyswZvdtRRXcrZsuF8gRGV9ixtS5iz15-0-widget", "block_id": 99102787, "block_timestamp": "2023-08-18T16:57:18.470Z", "signer_id": "mattlock.near", "widget_name": "op-bridge-demo", "source_code": "// for goerli\nconst OP_BRIDGE_DEPOSIT_CONTRACT = \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\";\nconst OP_BRIDGE_WITHDRAW_CONTRACT =\n  \"0x4200000000000000000000000000000000000010\";\nconst ETH_ADDR = \"0x0000000000000000000000000000000000000000\";\nconst ETH_ADDR_L1 = `0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000`;\nconst DEFAULT_AMOUNT_ETH = \"0.01\";\nconst DEFAULT_AMOUNT = ethers.utils.parseUnits(DEFAULT_AMOUNT_ETH, 18);\nconst L2_OUTPUT_ORACLE_CONTRACT = `0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0`;\nconst L2_TO_L1_MESSAGE_PASSER = `0x50CcA47c1e06084459dc83c9E964F4a158cB28Ae`;\n\n// Withdrawal target TX info\n// Call initiateWithdraw so the L2 message is passed\n// Following TX example here: https://goerli-optimism.etherscan.io/tx/0xb59ff0af1db39be0cc03e7410621ed21ce60e5833f8c4bf97d8747bd8d033bc8\n// Manually adjusted amount to 0.01\nconst ETH_WITHDRAWAL_MESSAGE = `0x32b7006d000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead0000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000`;\nconst ETH_WITHDRAWAL_CONTRACT = `0x4200000000000000000000000000000000000016`;\nconst ETH_WITHDRAWAL_TARGET = `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`;\n\n// Storage keys\nconst STORAGE_RESOLVED = \"__STORAGE_RESOLVED\";\nconst STORAGE_MESSAGE_SLOT = \"__STORAGE_MESSAGE_SLOT\";\n\nState.init({\n  console: \"Welcome!\",\n  transactionHash: `0x38082f56332ef0c5640487a47412aace70db81cdd0bb40e9a896a85953324ba0`,\n  resolved: Storage.privateGet(STORAGE_RESOLVED),\n  messageSlot: Storage.privateGet(STORAGE_MESSAGE_SLOT),\n});\n\nconsole.log(state);\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isOPGoerli = chainId === 420;\nconst isGoerli = chainId === 5;\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      { internalType: \"uint32\", name: \"_l2Gas\", type: \"uint32\" },\n      { internalType: \"bytes\", name: \"_data\", type: \"bytes\" },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHDepositInitiated\",\n    type: \"event\",\n  },\n];\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nconst withdrawAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l2Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"_minGasLimit\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\nconst withdrawIface = new ethers.utils.Interface(withdrawAbi);\n\nconst outputAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_l2BlockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getL2OutputIndexAfter\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    inputs: [\n      {\n        name: \"_l2OutputIndex\",\n        internalType: \"uint256\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getL2Output\",\n    outputs: [\n      {\n        name: \"\",\n        internalType: \"struct Types.OutputProposal\",\n        type: \"tuple\",\n        components: [\n          {\n            name: \"outputRoot\",\n            internalType: \"bytes32\",\n            type: \"bytes32\",\n          },\n          {\n            name: \"timestamp\",\n            internalType: \"uint128\",\n            type: \"uint128\",\n          },\n          {\n            name: \"l2BlockNumber\",\n            internalType: \"uint128\",\n            type: \"uint128\",\n          },\n        ],\n      },\n    ],\n  },\n];\nconst outputIface = new ethers.utils.Interface(outputAbi);\n\nconst crossDomainAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_target\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_gasLimit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"initiateWithdrawal\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\nconst crossDomainIface = new ethers.utils.Interface(crossDomainAbi);\n\nfunction handleDepositETH() {\n  if (!isGoerli)\n    return State.update({\n      console: `switch to Goerli Testnet (not Optimism Goerli, ETH Goerli) to deposit ETH to OP Goerli`,\n    });\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"depositETH(uint32, bytes)\",\n    [200000, 0]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: OP_BRIDGE_DEPOSIT_CONTRACT,\n      data: encodedData,\n      value: DEFAULT_AMOUNT,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\nfunction handleWithdrawalInitiating() {\n  if (!isOPGoerli)\n    return State.update({\n      console: `switch to OP Goerli testnet to initiate a withdrawal transaction`,\n    });\n\n  console.log(\"withdraw\");\n\n  const encodedData = crossDomainIface.encodeFunctionData(\n    \"initiateWithdrawal(address, uint256, bytes)\",\n    [ETH_WITHDRAWAL_TARGET, 0, ETH_WITHDRAWAL_MESSAGE]\n  );\n\n  console.log(\"encoded\");\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: ETH_WITHDRAWAL_CONTRACT,\n      data: encodedData,\n      value: DEFAULT_AMOUNT,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\nconst handleWithdrawalReceipt = () => {\n  if (!isOPGoerli) {\n    return State.update({ console: `please switch to OP Goerli` });\n  }\n\n  const { transactionHash } = state;\n\n  const receiptError =\n    \"error getting receipt for txHash, check hash and try again\";\n\n  provider\n    .getTransaction(transactionHash)\n    .then((receipt) => {\n      if (!receipt) {\n        return State.update({ console: receiptError });\n      }\n\n      const {\n        nonce: messageNonce,\n        from: sender,\n        to: target,\n        value,\n        data: message,\n        blockNumber,\n      } = receipt;\n\n      const resolved = {\n        messageNonce,\n        sender,\n        target,\n        value: value.toString(),\n        minGasLimit: 0,\n        message,\n        direction: 1,\n        logIndex: 0,\n        blockNumber,\n        transactionHash,\n      };\n\n      Storage.privateSet(STORAGE_RESOLVED, resolved);\n      State.update({ console: JSON.stringify(resolved) });\n    })\n    .catch((e) => {\n      console.log(e);\n      State.update({\n        console: receiptError,\n      });\n    });\n};\n\nconst getMessageBedrockOutput = (l2BlockNumber, callback) => {\n  const encodedData = outputIface.encodeFunctionData(\"getL2OutputIndexAfter\", [\n    l2BlockNumber,\n  ]);\n\n  Ethers.provider()\n    .call({\n      to: L2_OUTPUT_ORACLE_CONTRACT,\n      data: encodedData,\n    })\n    .then((l2OutputIndexRaw) => {\n      const l2OutputIndex = outputIface.decodeFunctionResult(\n        \"getL2OutputIndexAfter(uint256)\",\n        l2OutputIndexRaw\n      )[0];\n\n      console.log(\"l2OutputIndex:\", l2OutputIndex.toString());\n\n      const encodedData = outputIface.encodeFunctionData(\"getL2Output\", [\n        l2OutputIndex.toString(),\n      ]);\n\n      Ethers.provider()\n        .call({\n          to: L2_OUTPUT_ORACLE_CONTRACT,\n          data: encodedData,\n        })\n        .then((l2OutputRaw) => {\n          console.log(\"l2OutputRaw:\", l2OutputRaw);\n\n          const proposal = outputIface.decodeFunctionResult(\n            \"getL2Output(uint256)\",\n            l2OutputRaw\n          );\n\n          callback({\n            outputRoot: proposal[0][0],\n            l1Timestamp: proposal[0][1].toNumber(),\n            l2BlockNumber: proposal[0][2].toNumber(),\n            l2OutputIndex: l2OutputIndex.toNumber(),\n          });\n        })\n        .catch((e) => {\n          console.log(\"view error 2:\", e);\n        });\n    })\n    .catch((e) => {\n      console.log(\"view error 1:\", e);\n    });\n};\n\nconst hashLowLevelMessage = (withdrawal) => {\n  const types = [\n    \"uint256\",\n    \"address\",\n    \"address\",\n    \"uint256\",\n    \"uint256\",\n    \"bytes\",\n  ];\n  const encoded = ethers.utils.defaultAbiCoder.encode(types, [\n    withdrawal.messageNonce,\n    withdrawal.sender,\n    withdrawal.target,\n    withdrawal.value,\n    withdrawal.minGasLimit,\n    withdrawal.message,\n    // ETH_WITHDRAWAL_MESSAGE,\n  ]);\n  return ethers.utils.keccak256(encoded);\n};\n\nconst hashMessageHash = (messageHash) => {\n  const data = ethers.utils.defaultAbiCoder.encode(\n    [\"bytes32\", \"uint256\"],\n    [ethers.utils.hexlify(messageHash), 0]\n  );\n  return ethers.utils.keccak256(data);\n};\n\nconst handleWithdrawalProof = () => {\n  console.log(\"handleWithdrawalProof\");\n\n  const { resolved } = state;\n  // TODO translate resolved back to Big instead of replacing here\n  resolved.value = DEFAULT_AMOUNT;\n\n  getMessageBedrockOutput(resolved.blockNumber, (output) => {\n    console.log(\"getMessageBedrockOutput:\", output);\n    const hash = hashLowLevelMessage(resolved);\n    console.log(\"hash\", hash);\n    const messageSlot = hashMessageHash(hash);\n    console.log(\"messageSlot\", messageSlot);\n\n    Storage.privateSet(STORAGE_MESSAGE_SLOT, messageSlot);\n  });\n};\n\nconst handleWithdrawalProve = () => {\n  // const opGoerliProvider = Ethers.provider(\n  //   \"https://optimism-goerli.blockpi.network/v1/rpc/public\"\n  // );\n  // console.log(opGoerliProvider);\n\n  const { resolved, messageSlot } = state;\n\n  console.log(\"messageSlot\", messageSlot);\n\n  provider\n    .send(\"eth_getProof\", [\n      sender,\n      [messageSlot],\n      \"0x\" + resolved.blockNumber.toString(16),\n    ])\n    .then((proof) => {\n      console.log({\n        accountProof: proof.accountProof,\n        storageProof: proof.storageProof[0].proof,\n        storageValue: BigNumber.from(proof.storageProof[0].value),\n        storageRoot: proof.storageHash,\n      });\n    });\n};\n\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <h3>Console:</h3>\n    <p>{state.console}</p>\n    {!isGoerli && !isOPGoerli && (\n      <p>Please switch to ETH Goerli or OP Goerli</p>\n    )}\n    {isGoerli && (\n      <>\n        <h3>Deposits:</h3>\n        <Widget src={`ciocan.near/widget/op-bridge-list`} />\n        <button onClick={handleDepositETH}>\n          Deposit {DEFAULT_AMOUNT_ETH} ETH to L2\n        </button>\n        <br />\n        <br />\n        <p>To initiate a withdraw, switch to OP Goerli network</p>\n\n        <h3>Get Withdrawal Proof from L1:</h3>\n        <input\n          placeholder=\"withdrawal tx hash\"\n          value={JSON.stringify(state.resolved)}\n          onChange={(e) => State.update({ resolved: e.target.value })}\n          type=\"text\"\n        />\n        <br />\n        <button onClick={handleWithdrawalProof}>\n          Prove Withdrawal of {DEFAULT_AMOUNT_ETH} ETH on L2\n        </button>\n      </>\n    )}\n    {isOPGoerli && (\n      <>\n        <button onClick={handleWithdrawalInitiating}>\n          Initiate Withdrawal of {DEFAULT_AMOUNT_ETH} ETH on L2\n        </button>\n        <br />\n        <br />\n        <p>\n          To make a deposit, or prove a withdraw, switch to ETH Goerli network\n        </p>\n\n        <h3>Get Withdrawal Receipt from L2:</h3>\n        <input\n          placeholder=\"withdrawal tx hash\"\n          value={state.transactionHash}\n          onChange={(e) => State.update({ transactionHash: e.target.value })}\n          type=\"text\"\n        />\n        <br />\n        <button onClick={handleWithdrawalReceipt}>Get Receipt</button>\n\n        <h3>Get Withdrawal Proof from L2:</h3>\n        <input\n          placeholder=\"messageSlot hash\"\n          value={state.messageSlot}\n          onChange={(e) => State.update({ messageSlot: e.target.value })}\n          type=\"text\"\n        />\n        <br />\n        <button onClick={handleWithdrawalProve}>Get Proof</button>\n      </>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/op-bridge-demo", "fact_widget_deployments_id": "088c018648c7da90e8cfc698ff13650c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 21}