{"tx_hash": "GUkCn6Yn6WVm9YPbJscAfFRq5z5k4NKxqD8Fb3VWQz1Q", "action_id_social": "5Xt9Q49whxRMqFNfKCrYQUDYWA6EfL2m299LxRgVesAX-0-widget", "block_id": 98316427, "block_timestamp": "2023-08-08T03:00:39.414Z", "signer_id": "mattlock.near", "widget_name": "op-bridge-demo", "source_code": "State.init({ console: \"Welcome!\" });\n// for goerli\nconst OP_BRIDGE_DEPOSIT_CONTRACT = \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\";\nconst OP_BRIDGE_WITHDRAW_CONTRACT =\n  \"0x4200000000000000000000000000000000000010\";\nconst L2_TO_L1_MESSAGE_PASSER = `0x4200000000000000000000000000000000000016`;\nconst ETH_ADDR = \"0x0000000000000000000000000000000000000000\";\nconst WITHDRAW_MESSAGE = `0x32b7006d000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000`;\nconst WITHDRAW_TARGET = `0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000`;\nconst DEFAULT_AMOUNT = ethers.utils.parseUnits(\"0.05\", 18);\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isOPGoerli = chainId === 420;\nconst isGoerli = chainId === 5;\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      { internalType: \"uint32\", name: \"_l2Gas\", type: \"uint32\" },\n      { internalType: \"bytes\", name: \"_data\", type: \"bytes\" },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHDepositInitiated\",\n    type: \"event\",\n  },\n];\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nconst L2MessageAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_target\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_gasLimit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"initiateWithdrawal\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\nconst L2MessageIface = new ethers.utils.Interface(L2MessageAbi);\n\nfunction getDeposits() {\n  console.log(\"getDeposits\");\n  if (!isGoerli)\n    return State.update({\n      console: `Switch to ETH Goerli to see your deposits`,\n    });\n  const bridgeContract = new ethers.Contract(\n    OP_BRIDGE_DEPOSIT_CONTRACT,\n    bridgeAbi,\n    Ethers.provider().getSigner()\n  );\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ETHDepositInitiated(sender))\n    .then((events) => {\n      console.log(events);\n      State.update({\n        deposits: JSON.stringify(\n          events.map(({ transactionHash }) => transactionHash)\n        ),\n      });\n      events.forEach((ev) => {\n        ev.getTransaction().then((tx) => console.log(\"tx\", tx));\n        ev.getTransactionReceipt().then((tx) => console.log(\"txr\", tx));\n      });\n    });\n}\n\nfunction handleDepositETH() {\n  if (!isGoerli)\n    return State.update({\n      console: `switch to Goerli Testnet (not Optimism Goerli, ETH Goerli) to deposit ETH to OP Goerli`,\n    });\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"depositETH(uint32, bytes)\",\n    [200000, 0]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: OP_BRIDGE_DEPOSIT_CONTRACT,\n      data: encodedData,\n      value: DEFAULT_AMOUNT,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\nfunction handleWithdrawInitiating() {\n  if (!isOPGoerli)\n    return State.update({\n      console: `switch to OP Goerli testnet to initiate a withdrawal transaction`,\n    });\n\n  console.log(\"withdraw\");\n\n  console.log(ethers.utils.isHexString(WITHDRAW_MESSAGE));\n\n  const encodedData = L2MessageIface.encodeFunctionData(\n    \"initiateWithdrawal(address, uint256, bytes)\",\n    [WITHDRAW_TARGET, 0, ethers.utils.arrayify(WITHDRAW_MESSAGE)]\n  );\n\n  console.log(\"encoded\");\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: L2_TO_L1_MESSAGE_PASSER,\n      data: encodedData,\n      value: DEFAULT_AMOUNT,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <h3>Console:</h3>\n    <p>{state.console}</p>\n    <button onClick={getDeposits}>Show Deposits</button>\n    <br />\n    <br />\n    <button onClick={handleDepositETH}>Deposit 0.05 ETH to L2</button>\n    <br />\n    <br />\n    <button onClick={handleWithdrawInitiating}>Withdraw 0.05 ETH on L2</button>\n    <br />\n    <br />\n    {state.deposits && state.deposits.length > 0 && (\n      <>\n        <h3>Deposit Hashes:</h3>\n        <div>{state.deposits}</div>\n      </>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/op-bridge-demo", "fact_widget_deployments_id": "d373fe29a3499e4aaf9797b5968ed2c6", "inserted_timestamp": "2023-08-08T04:32:14.064Z", "modified_timestamp": "2023-08-08T04:32:14.064Z", "__row_index": 7}