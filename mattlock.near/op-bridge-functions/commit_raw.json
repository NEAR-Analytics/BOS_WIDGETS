{"tx_hash": "CWne4J8sHMKcHXLPDanqetBeiUJEGkYFXo5bETn7wBTv", "action_id_social": "APFHigaDep5UXYCnTvK8hJ6B5vULJuuDpZHmD69tpYht-0-widget", "block_id": 104547251, "block_timestamp": "2023-10-30T15:52:39.366Z", "signer_id": "mattlock.near", "widget_name": "op-bridge-functions", "source_code": "const ABI = {\n  DEPOSIT: [\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes\",\n          name: \"extraData\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"ETHDepositInitiated\",\n      type: \"event\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_l1Token\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"_l2Token\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint32\",\n          name: \"_minGasLimit\",\n          type: \"uint32\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"_extraData\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"depositERC20\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"l1Token\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"l2Token\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes\",\n          name: \"extraData\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"ERC20DepositInitiated\",\n      type: \"event\",\n    },\n  ],\n  WITHDRAWAL: [\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"l1Token\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"l2Token\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes\",\n          name: \"extraData\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"ERC20WithdrawalFinalized\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes\",\n          name: \"extraData\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"ETHWithdrawalFinalized\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"l1Token\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"l2Token\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes\",\n          name: \"extraData\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"WithdrawalInitiated\",\n      type: \"event\",\n    },\n  ],\n};\n\nconst NETWORKS = {\n  // eth\n  1: {\n    DEPOSIT_CONTRACT: \"0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1\",\n  },\n  // goerli\n  5: {\n    DEPOSIT_CONTRACT: \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\",\n    provider:\n      props.depositProvider ||\n      new ethers.providers.JsonRpcProvider(\n        \"https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"\n      ),\n  },\n  // optimism mainnet\n  10: {\n    WITHDRAWAL_CONTRACT: \"0x4200000000000000000000000000000000000010\",\n  },\n  // optimism goerli\n  420: {\n    WITHDRAWAL_CONTRACT: \"0x4200000000000000000000000000000000000010\",\n    provider:\n      props.withdrawalProvider ||\n      new ethers.providers.JsonRpcProvider(\n        // \"https://goerli.optimism.io\"\n        // \"https://optimism-goerli.publicnode.com\"\n        \"https://optimism-goerli.gateway.tenderly.co/\"\n      ),\n    archivalProvider:\n      props.withdrawalArchivalProvider ||\n      new ethers.providers.JsonRpcProvider(\"https://goerli.optimism.io\"),\n  },\n};\n\n// props override defaults (ETH & OP Goerli)\n// parent should handle connecting to ETH wallet, for convenience request the active account\nconst sender = props.sender || Ethers.send(\"eth_requestAccounts\", [])[0];\nconst tokens = props.tokens ?? [];\n\n// init state\nState.init({\n  ethDeposits: [],\n  ercDeposits: [],\n  ethWithdrawals: [],\n  chainId: null,\n});\n\n// without chainId can't proceed\nconst chainId = props.chainId || state.chainId;\nif (sender && !chainId) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\nif (!chainId) return;\n\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isTestnet = chainId === 5 || chainId === 420;\nconst depositChainId = isTestnet ? 5 : 1;\nconst withdrawalChainId = isTestnet ? 420 : 10;\n\nconst bridgeIface = new ethers.utils.Interface(ABI.DEPOSIT);\nconst bridgeContract = new ethers.Contract(\n  NETWORKS[depositChainId].DEPOSIT_CONTRACT,\n  ABI.DEPOSIT,\n  //   Ethers.provider().getSigner()\n  NETWORKS[depositChainId].provider\n);\n\nconst bridgeContractWithdrawal = new ethers.Contract(\n  NETWORKS[withdrawalChainId].WITHDRAWAL_CONTRACT,\n  ABI.WITHDRAWAL,\n  //   Ethers.provider().getSigner()\n  NETWORKS[withdrawalChainId].provider\n);\n\n// deposits\n\nfunction getETHDeposits() {\n  const deposits = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      console.log(\"done\");\n      State.update({\n        ethDeposits: [...deposits].map(([transactionHash, data]) => ({\n          ...data,\n          transactionHash,\n        })),\n      });\n    }\n  }\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ETHDepositInitiated(sender))\n    .then((events) => {\n      // console.log(events);\n      totalOperations = events.length * 3; // Three async operations for each event\n\n      events.forEach((ev) => {\n        const { blockNumber, transactionHash } = ev;\n        deposits.set(transactionHash, { blockNumber, symbol: \"ETH\" });\n\n        ev.getTransaction().then((tx) => {\n          const { value, hash } = tx;\n          // console.log(\"tx\", tx);\n          const amount = ethers.utils.formatUnits(value, 18);\n          deposits.set(hash, {\n            ...deposits.get(hash),\n            amount,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getTransactionReceipt().then((tx) => {\n          // console.log(\"txr\", tx);\n          const { status, type, transactionHash } = tx;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            status,\n            type,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getBlock().then((block) => {\n          // console.log(transactionHash, \"block\", block);\n          const { timestamp } = block;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            timestamp,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n      });\n    });\n}\n\nfunction getERC20Deposits() {\n  console.log(\"getERC20Deposits\");\n  const deposits = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      console.log(\"done\");\n      State.update({\n        ercDeposits: [...deposits].map(([transactionHash, data]) => ({\n          ...data,\n          transactionHash,\n        })),\n      });\n    }\n  }\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ERC20DepositInitiated(_, _, sender))\n    .then((events) => {\n      // console.log(events);\n      totalOperations = events.length * 3; // Three async operations for each event\n\n      events.forEach((ev) => {\n        const { blockNumber, transactionHash } = ev;\n        deposits.set(transactionHash, { blockNumber });\n\n        ev.getTransaction().then((tx) => {\n          // console.log(\"tx\", tx);\n          const { hash, data } = tx;\n          const decodedData = bridgeIface.parseTransaction({ data });\n          const [l1Token, l2Token, value] = decodedData.args;\n          const token = tokens.find((t) => t.address === l1Token);\n          const amount = ethers.utils.formatUnits(value, token?.decimals || 6);\n          deposits.set(hash, {\n            ...deposits.get(hash),\n            amount,\n            symbol: token?.symbol || \"???\",\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getTransactionReceipt().then((tx) => {\n          // console.log(\"txr\", tx);\n          const { status, type, transactionHash } = tx;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            status,\n            type,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getBlock().then((block) => {\n          // console.log(transactionHash, \"block\", block);\n          const { timestamp } = block;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            timestamp,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n      });\n    });\n}\n\nif (props.ethDeposits) {\n  getETHDeposits();\n}\n\nif (props.ercDeposits) {\n  getERC20Deposits();\n}\n\n// withdrawals\n\nfunction getETHWithdrawals() {\n  if (state.gettingWithdrawals) return;\n  State.update({ gettingWithdrawals: true });\n  console.log(\"getETHWithdrawals\");\n\n  const ethWithdrawals = [];\n\n  bridgeContractWithdrawal\n    .queryFilter(\n      bridgeContractWithdrawal.filters.WithdrawalInitiated(\n        undefined,\n        undefined,\n        sender\n      )\n    )\n    .then((events) => {\n      events\n        .sort((a, b) => b.blockNumber - a.blockNumber)\n        .forEach((event) => {\n          const { args, blockNumber, transactionHash } = event;\n\n          const messagePasserAbi = [\n            \"event MessagePassed (uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)\",\n          ];\n\n          const messagePasserContract = new ethers.Contract(\n            L2_L1_MESSAGE_PASSER_CONTRACT,\n            messagePasserAbi,\n            opGoerliProvider\n          );\n\n          messagePasserContract\n            .queryFilter(\n              messagePasserContract.filters.MessagePassed(\n                undefined,\n                undefined,\n                \"0x5086d1eEF304eb5284A0f6720f79403b4e9bE294\",\n                undefined,\n                undefined,\n                undefined,\n                undefined\n              ),\n              blockNumber - 150,\n              blockNumber\n            )\n            .then((events) => {\n              const event = events.filter(\n                ({ data }) => data.indexOf(sender.substring(2)) > -1\n              )[0];\n\n              const [\n                messageNonce,\n                sender,\n                target,\n                value,\n                minGasLimit,\n                message,\n                withdrawalHash,\n              ] = event.args;\n\n              let withdrawal = {\n                blockNumber,\n                transactionHash,\n                messageNonce,\n                sender,\n                target,\n                value,\n                minGasLimit,\n                message,\n                withdrawalHash,\n              };\n\n              ethWithdrawals.push(withdrawal);\n\n              console.log(ethWithdrawals);\n\n              State.update({\n                ethWithdrawals,\n              });\n            });\n        });\n    });\n}\n\ngetETHWithdrawals();\n\n// debug rendering\n\nfunction renderDeposit(deposit) {\n  //   console.log(\"deposit\", deposit);\n  const { timestamp, amount, transactionHash, symbol } = deposit;\n  const date = new Date(timestamp * 1000);\n  const href = `https://${\n    isTestnet ? \"goerli.\" : \"\"\n  }etherscan.io/tx/${transactionHash}`;\n  const hash = `${transactionHash.substr(0, 6)}...${transactionHash.substr(\n    -4\n  )}`;\n  return (\n    <tr>\n      <td>{date.toUTCString()}</td>\n      <td>{amount}</td>\n      <td>{symbol}</td>\n      <td>\n        <a href={href} target=\"_blank\">\n          {hash}\n        </a>\n      </td>\n    </tr>\n  );\n}\n\nconst { ethDeposits, ercDeposits } = state;\nconst deposits = [...ethDeposits, ...ercDeposits].sort(\n  (a, b) => b.timestamp - a.timestamp\n);\n\nreturn (\n  <table>\n    <thead>\n      <tr>\n        <th>Time</th>\n        <th>Amount</th>\n        <th>Token</th>\n        <th>Transaction</th>\n      </tr>\n    </thead>\n    <tbody>{deposits.map(renderDeposit)}</tbody>\n  </table>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mattlock.near/widget/op-bridge-functions", "fact_widget_deployments_id": "7883dd7481ae75c8048d1055b9779ff6", "inserted_timestamp": "2023-10-30T17:45:23.678Z", "modified_timestamp": "2023-10-30T17:45:23.678Z", "__row_index": 0}