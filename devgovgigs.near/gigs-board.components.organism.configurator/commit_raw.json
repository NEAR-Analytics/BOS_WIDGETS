{"tx_hash": "i1YXg5TStTGgdpaUbJe4BCQgaJ67xrTLryXxGi5TYrf", "action_id_social": "2Z77U9iitgn4TyE9mk25xKzKUsv1a52AMbyjjCG3UGbZ-0-widget", "block_id": 102526968, "block_timestamp": "2023-10-03T13:53:58.302Z", "signer_id": "devgovgigs.near", "widget_name": "gigs-board.components.organism.configurator", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/lib/gui/form\" */\nconst defaultFieldUpdate = ({\n  input,\n  lastKnownValue,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\": {\n      if (Array.isArray(input) && typeof lastKnownValue === \"string\") {\n        return input.join(arrayDelimiter ?? \",\");\n      } else {\n        return Array.isArray(lastKnownValue)\n          ? [...lastKnownValue, ...input]\n          : { ...lastKnownValue, ...input };\n      }\n    }\n\n    case \"string\":\n      return Array.isArray(lastKnownValue)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownValue) {\n          case \"boolean\":\n            return !lastKnownValue;\n\n          default:\n            return lastKnownValue;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ initialValues, onUpdate, stateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[stateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [stateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n\n        {\n          input: fieldInput?.target?.value ?? fieldInput,\n          params,\n          path,\n\n          via:\n            typeof customFieldUpdate === \"function\"\n              ? customFieldUpdate\n              : defaultFieldUpdate,\n        }\n      );\n\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n\n        [stateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n\n          values: updatedValues,\n        },\n      }));\n\n      if (\n        typeof onUpdate === \"function\" &&\n        !Struct.isEqual(updatedValues, initialFormState.values)\n      ) {\n        onUpdate(updatedValues);\n      }\n    };\n\n  if (\n    !uninitialized &&\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    stateKey,\n    update: formUpdate,\n  };\n};\n/* END_INCLUDE: \"core/lib/gui/form\" */\n\nconst ValueView = styled.div`\n  & > p {\n    margin: 0;\n  }\n`;\n\nconst fieldParamsByType = {\n  array: {\n    name: \"components.molecule.text-input\",\n    inputProps: { type: \"text\" },\n  },\n\n  boolean: {\n    name: \"components.atom.toggle\",\n  },\n\n  string: {\n    name: \"components.molecule.text-input\",\n    inputProps: { type: \"text\" },\n  },\n};\n\nconst defaultFieldsRender = ({ schema, form, isEditable, isUnlocked }) => (\n  <>\n    {Object.entries(schema).map(\n      (\n        [key, { format, inputProps, noop, label, order, style, ...fieldProps }],\n        idx\n      ) => {\n        const fieldKey = `${idx}-${key}`,\n          fieldValue = form.values[key];\n\n        const fieldType = Array.isArray(fieldValue)\n          ? \"array\"\n          : typeof (fieldValue ?? \"\");\n\n        const isDisabled =\n          (noop ?? inputProps.disabled ?? false) || !isUnlocked;\n\n        const viewClassName = [\n          (fieldValue?.length ?? 0) > 0 ? \"\" : \"text-muted\",\n          \"m-0\",\n        ].join(\" \");\n\n        return (\n          <>\n            <div\n              className={[\n                \"d-flex gap-3\",\n                isEditable || noop ? \"d-none\" : \"\",\n              ].join(\" \")}\n              key={fieldKey}\n              style={{ order }}\n            >\n              <label className=\"fw-bold w-25\">{label}</label>\n\n              <ValueView className={[viewClassName, \"w-75\"].join(\" \")}>\n                {format !== \"markdown\" ? (\n                  <span>\n                    {(fieldType === \"array\" && format === \"comma-separated\"\n                      ? fieldValue\n                          .filter((string) => string.length > 0)\n                          .join(\", \")\n                      : fieldValue\n                    )?.toString?.() || \"none\"}\n                  </span>\n                ) : (fieldValue?.length ?? 0) > 0 ? (\n                  widget(\"components.molecule.markdown-viewer\", {\n                    text: fieldValue,\n                  })\n                ) : (\n                  <span>none</span>\n                )}\n              </ValueView>\n            </div>\n\n            {widget(fieldParamsByType[fieldType].name, {\n              ...fieldProps,\n\n              className: [\n                \"w-100\",\n                fieldProps.className ?? \"\",\n                isEditable && !noop ? \"\" : \"d-none\",\n              ].join(\" \"),\n\n              disabled: isDisabled,\n              format,\n              key: `${fieldKey}--editable`,\n              label,\n              onChange: form.update({ path: [key] }),\n              style: { ...style, order },\n\n              value:\n                fieldType === \"array\" && format === \"comma-separated\"\n                  ? fieldValue.join(\", \")\n                  : fieldValue,\n\n              inputProps: {\n                ...(inputProps ?? {}),\n                disabled: isDisabled,\n\n                title:\n                  noop ?? false\n                    ? \"Temporarily disabled due to technical reasons.\"\n                    : inputProps.title,\n\n                ...(fieldParamsByType[fieldType].inputProps ?? {}),\n                tabIndex: order,\n              },\n            })}\n          </>\n        );\n      }\n    )}\n  </>\n);\n\nconst Configurator = ({\n  actionsAdditional,\n  cancelLabel,\n  classNames,\n  externalState,\n  fieldsRender: customFieldsRender,\n  formatter: toFormatted,\n  fullWidth,\n  heading,\n  isEmbedded,\n  isHidden,\n  isUnlocked,\n  isValid,\n  noBorder,\n  noFrame,\n  onCancel,\n  onChange,\n  onSubmit,\n  schema,\n  submitIcon,\n  submitLabel,\n  ...otherProps\n}) => {\n  const fieldsRender =\n    typeof customFieldsRender === \"function\"\n      ? customFieldsRender\n      : defaultFieldsRender;\n\n  State.init({\n    isActive: otherProps.isActive ?? false,\n  });\n\n  const isActive = otherProps.isActive ?? state.isActive;\n\n  const initialValues = Struct.typeMatch(schema)\n    ? Struct.pick(externalState ?? {}, Object.keys(schema))\n    : {};\n\n  const form = useForm({ initialValues, onUpdate: onChange, stateKey: \"form\" });\n\n  const formFormattedValues =\n    typeof toFormatted === \"function\" ? toFormatted(form.values) : form.values;\n\n  const isFormValid =\n    typeof isValid === \"function\" ? isValid(formFormattedValues) : true;\n\n  const formToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isActive: forcedState ?? !lastKnownState.isActive,\n    }));\n\n  const onCancelClick = () => {\n    if (!isActive) formToggle(false);\n    form.reset();\n    if (isEmbedded && typeof onSubmit === \"function\") onSubmit(initialValues);\n    if (typeof onCancel === \"function\") onCancel();\n  };\n\n  const onSubmitClick = () => {\n    if (typeof onSubmit === \"function\" && isFormValid) {\n      onSubmit(formFormattedValues);\n    }\n\n    formToggle(false);\n  };\n\n  return widget(\"components.molecule.tile\", {\n    className: classNames.root,\n    fullWidth,\n    heading,\n    isHidden,\n    noBorder,\n    noFrame,\n    ...otherProps,\n\n    headerSlotRight:\n      isUnlocked && !isActive\n        ? widget(\"components.molecule.button\", {\n            classNames: { root: \"btn-sm btn-secondary\" },\n            icon: { type: \"bootstrap_icon\", variant: \"bi-pen-fill\" },\n            label: \"Edit\",\n            onClick: () => formToggle(true),\n          })\n        : null,\n\n    children: (\n      <div className=\"flex-grow-1 d-flex flex-column gap-4\">\n        <div className={`d-flex flex-column gap-${isActive ? 1 : 4}`}>\n          {fieldsRender({\n            form,\n            isEditable: isUnlocked && isActive,\n            isUnlocked,\n            schema,\n          })}\n        </div>\n\n        {!noFrame ? (\n          <div\n            className={[\n              \"d-flex align-items-center justify-content-end gap-3 mt-auto\",\n              isUnlocked && isActive && typeof onChange !== \"function\"\n                ? \"\"\n                : \"d-none\",\n            ].join(\" \")}\n          >\n            {actionsAdditional ? (\n              <div className=\"me-auto\">{actionsAdditional}</div>\n            ) : null}\n\n            {widget(\"components.molecule.button\", {\n              classNames: { root: \"btn-outline-danger shadow-none border-0\" },\n              label: cancelLabel ?? \"Cancel\",\n              onClick: onCancelClick,\n            })}\n\n            {widget(\"components.molecule.button\", {\n              classNames: { root: classNames.submit ?? \"btn-success\" },\n              disabled: !form.hasUnsubmittedChanges || !isFormValid,\n\n              icon: submitIcon ?? {\n                type: \"bootstrap_icon\",\n                variant: \"bi-check-circle-fill\",\n              },\n\n              label: submitLabel ?? \"Submit\",\n              onClick: onSubmitClick,\n            })}\n          </div>\n        ) : null}\n      </div>\n    ),\n  });\n};\n\nreturn Configurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.near/widget/gigs-board.components.organism.configurator", "fact_widget_deployments_id": "a6362f62615dd005040520f1c46620d0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}