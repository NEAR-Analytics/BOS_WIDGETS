{"tx_hash": "GFTqhC2chd9XKLn8UF9fPCdFvf5patZXpAxAmaBdVLMY", "action_id_social": "EvdYAmVG5Ws2qjEi5aNk2Ejjm4HoFEVsKEowbVBdw93C-0-widget", "block_id": 98528809, "block_timestamp": "2023-08-11T00:52:52.949Z", "signer_id": "devgovgigs.near", "widget_name": "gigs-board.pages.community.teams", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n\nconst communityData = DevHub.get_community({ handle: props.handle }) ?? null;\nconst root_members = DevHub.get_root_members() ?? null;\n\nif (communityData === null || root_members === null) {\n  return <div>Loading...</div>;\n}\n\nconst moderators = (root_members ?? {})?.[\"team:moderators\"]?.children;\nconst admins = communityData.admins;\n\nconst UserList = (name, users) => {\n  return (\n    <div>\n      {(users ?? []).map((user, i) => (\n        <div className={`row ${i < users.length - 1 ? \"mb-3\" : \"\"}`}>\n          <div class=\"col-3\">\n            <b>{name + \" #\" + (i + 1)}</b>\n          </div>\n          <div class=\"col-9\">\n            <span\n              key={user}\n              className=\"d-inline-flex\"\n              style={{ fontWeight: 500 }}\n            >\n              <Widget\n                src=\"neardevgov.near/widget/ProfileLine\"\n                props={{\n                  accountId: user,\n                  hideAccountId: true,\n                  tooltip: true,\n                }}\n              />\n            </span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Teams = (\n  <div class=\"d-flex flex-column align-items-center gap-4 p-4\">\n    {widget(\"components.molecule.tile\", {\n      heading: \"Admins\",\n      minHeight: 0,\n      children: UserList(\"Admin\", admins),\n    })}\n    {widget(\"components.molecule.tile\", {\n      heading: \"Community Moderators\",\n      minHeight: 0,\n      children: UserList(\"Moderator\", moderators),\n    })}\n  </div>\n);\n\nreturn widget(\"components.template.community-page\", {\n  handle: props.handle,\n  title: \"Teams\",\n  children: Teams,\n});\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.near/widget/gigs-board.pages.community.teams", "fact_widget_deployments_id": "b096981b021baebb70ff014349eeee16", "inserted_timestamp": "2023-08-11T02:31:28.803Z", "modified_timestamp": "2023-08-11T02:31:28.803Z", "__row_index": 0}