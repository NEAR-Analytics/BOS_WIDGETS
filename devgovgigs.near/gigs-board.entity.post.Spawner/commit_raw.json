{"tx_hash": "FsPVPsehYdUQbiDCC7QRCByhwweGy5yFF3f9R4cF16Fx", "action_id_social": "7pB1r8YA4Hc5tCv1JasC5WqWem3onsNV4uSHwrbWgrU2-0-widget", "block_id": 104790782, "block_timestamp": "2023-11-02T21:12:17.375Z", "signer_id": "devgovgigs.near", "widget_name": "gigs-board.entity.post.Spawner", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/draftstate\" */\nconst DRAFT_STATE_STORAGE_KEY = \"POST_DRAFT_STATE\";\nlet is_edit_or_add_post_transaction = false;\nlet transaction_method_name;\n\nif (props.transactionHashes) {\n  const transaction = fetch(\"https://rpc.mainnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"tx\",\n      params: [props.transactionHashes, context.accountId],\n    }),\n  });\n  transaction_method_name =\n    transaction?.body?.result?.transaction?.actions[0].FunctionCall.method_name;\n\n  is_edit_or_add_post_transaction =\n    transaction_method_name == \"add_post\" ||\n    transaction_method_name == \"edit_post\";\n\n  if (is_edit_or_add_post_transaction) {\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\n  }\n}\n\nconst onDraftStateChange = (draftState) =>\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\nlet draftState;\ntry {\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\n} catch (e) {}\n/* END_INCLUDE: \"core/lib/draftstate\" */\n\nconst activeOptionStyle = {\n  backgroundColor: \"#0C7283\",\n  color: \"#f3f3f3\",\n};\n\nconst postTypeOptions = {\n  Idea: {\n    name: \"Idea\",\n    icon: \"bi-lightbulb\",\n\n    description:\n      \"Get feedback from the community about a problem, opportunity, or need.\",\n  },\n\n  Solution: {\n    name: \"Solution\",\n    icon: \"bi-rocket\",\n\n    description:\n      \"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\",\n  },\n};\n\nconst PostSpawner = ({ isHidden, onCancel, tags, transactionHashes }) => {\n  const recoveredPostType = Storage.privateGet(\"post_type\");\n\n  const initialState = {\n    post_type: recoveredPostType ?? postTypeOptions.Idea.name,\n  };\n\n  State.init(initialState);\n\n  const stateReset = () => {\n    Storage.privateSet(\"post_type\", null);\n    State.update(initialState);\n  };\n\n  if (typeof transactionHashes === \"string\") stateReset();\n\n  if (recoveredPostType !== null) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      post_type: recoveredPostType,\n    }));\n  }\n\n  const typeSwitch = (optionName) => {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      post_type: optionName,\n    }));\n\n    Storage.privateSet(\"post_type\", optionName);\n  };\n\n  const onCancelClick = () => {\n    if (typeof onCancel === \"function\") onCancel();\n    stateReset();\n  };\n\n  return (\n    <div\n      className={`flex-column gap-3 py-4 collapse ${\n        isHidden ? \"\" : \"d-flex show\"\n      }`}\n      id={`${state.post_type}_post_spawner`}\n    >\n      <div className=\"d-flex flex-column gap-3\">\n        <p className=\"card-title fw-bold fs-6\">What do you want to create?</p>\n\n        <div className=\"d-flex gap-3\">\n          {Object.values(postTypeOptions).map((option) => (\n            <button\n              className={`btn btn-${\n                state.post_type === option.name\n                  ? \"primary\"\n                  : \"outline-secondary\"\n              }`}\n              key={option.name}\n              onClick={() => typeSwitch(option.name)}\n              style={state.post_type === option.name ? activeOptionStyle : null}\n              type=\"button\"\n            >\n              <i className={`bi ${option.icon}`} />\n              <span>{option.name}</span>\n            </button>\n          ))}\n        </div>\n\n        <p className=\"text-muted w-75\">\n          {postTypeOptions[state.post_type].description}\n        </p>\n      </div>\n\n      {widget(\"entity.post.PostEditor\", {\n        mode: \"Create\",\n        onCancel: onCancelClick,\n        parent_id: null,\n        post_type: state.post_type,\n        tags,\n        transactionHashes,\n      })}\n    </div>\n  );\n};\n\nreturn PostSpawner(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.near/widget/gigs-board.entity.post.Spawner", "fact_widget_deployments_id": "a1be4cbc92dca9ba38d67997c0b66c6d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}