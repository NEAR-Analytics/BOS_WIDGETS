{"tx_hash": "4x9C1CeDpS4qBdQSPA3W3joeznWBjZGsiTHsj8bjYfSn", "action_id_social": "3p7k8VLR3Rx1eRrQHgDPX7U5ASsjiokj4Kz53Apqr3Gs-0-widget", "block_id": 113295175, "block_timestamp": "2024-02-21T15:24:50.796Z", "signer_id": "dropcast.near", "widget_name": "dashboard", "source_code": "const accountId = context.accountId;\nconst Owner = \"dropcast.near\";\nconst API_URL = props.API_URL || \"http://localhost:3000\";\nconst USER = props.USER || {};\nconst TOKEN = props.TOKEN || \"\";\nconst Logout = props.Logout;\n\n//Styles\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    padding: 64px;\n    position: relative;\n    align-items: stretch;\n    flex-direction: column;\n    color: rgb(229 229 229);\n    background: rgb(23,23,23);\n    @media (max-width: 620px) {\n      padding: 29px;\n    }\n`;\n\nconst Tabs = styled.div`\n  gap: 20px;\n  width: 100%;\n  height: 52px;\n  display: flex;\n  border-bottom: 1px solid #e5e7eb;\n`;\n\nconst Tab = styled.div`\n  gap: 6px;\n  height: 100%;\n  display: flex;\n  cursor: pointer;\n  padding: 16px 4px;\n  position: relative;\n  align-items: center;\n  @media (max-width: 620px) {\n    text-align: center;\n  }\n`;\n\nconst Counter = styled.span`\n  font-size: 12px;\n  padding: 2px 10px;\n  border-radius: 50px;\n  background-image: linear-gradient(to right, rgb(250, 204, 21), rgb(234, 88, 12));\n  @media (max-width: 620px) {\n    padding: 2px 7px;\n  }\n`;\n\nconst SelectedTab = styled.span`\n  left: -2px;\n  height: 4px;\n  width: 100%;\n  bottom: -1.75px;\n  position: absolute;\n  border-radius: 50px;\n  background-image: linear-gradient(to right, rgb(250, 204, 21), rgb(234, 88, 12));\n`;\n\nconst GridWrapper = styled.div`\n  gap: 10px;\n  display: grid;\n  grid-template-columns: repeat(3,minmax(0,1fr));\n  @media (max-width: 935px) {\n    grid-template-columns: repeat(1,minmax(0,1fr));\n  }\n  @media (min-width: 935px) and (max-width: 1400px) {\n    grid-template-columns: repeat(2,minmax(0,1fr));\n  }\n`;\n\nconst MyProjectCard = styled.div`\n  gap: 16px;\n  display: flex;\n  padding: 25px 0;\n  align-items: center;\n  justify-content: space-between;\n  @media (max-width: 620px) {\n    flex-direction: column;\n\n    .w-50 {\n      width: 100% !important;\n    }\n  }\n`;\n\nconst TABS = [\n  {\n    label: \"My Projects\",\n    value: \"my_projects\",\n    count: 0,\n  },\n  {\n    label: \"Other Projects\",\n    value: \"other_projects\",\n    count: 12,\n  },\n  {\n    label: \"Past Projects\",\n    value: \"past_projects\",\n    count: 5,\n  },\n];\n\nconst MEMBER_OPTIONS = [\n  {\n    text: \"All\",\n    value: \"all\",\n  },\n  {\n    text: \"Whitelist Status: Active\",\n    value: \"status_active\",\n  },\n  {\n    text: \"Whitelist Status: Closed\",\n    value: \"status_closed\",\n  },\n  {\n    text: \"Whitelist Obtained: All\",\n    value: \"obtained_all\",\n  },\n  {\n    text: \"Whitelist Obtained: Yes\",\n    value: \"obtained_yes\",\n  },\n  {\n    text: \"Whitelist Obtained: No\",\n    value: \"obtained_no\",\n  },\n];\n\nState.init({\n  detail: false,\n  selected: {},\n  loaded: false,\n  my_projects: [],\n  other_projects: [],\n  past_projects: [],\n  tab: \"my_projects\",\n  member_option: \"all\",\n});\n\nconst changeTab = (tab) => {\n  State.update({ ...state, tab });\n};\n\nconst changeMemberOption = (value) => {\n  State.update({\n    ...state,\n    member_option: value,\n  });\n};\n\nconst getList = () => {\n  let promise = asyncFetch(`${API_URL}/api/project?type=${state.tab}`, {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"x-auth-token\": TOKEN,\n    },\n    method: \"GET\",\n  });\n\n  promise\n    .then((data) => {\n      if (data.status === 200) {\n        State.update({\n          ...state,\n          ...data.body,\n          loaded: true,\n        });\n      } else {\n        State.update({\n          ...state,\n          error: data.body,\n        });\n        Logout();\n      }\n    })\n    .catch(() => {\n      Logout();\n    });\n};\n\nconst showDetail = (project) => {\n  State.update({\n    ...state,\n    detail: true,\n    selected: project,\n  });\n};\n\nif (!state.loaded) getList();\n\nreturn (\n  <Wrapper>\n    <Tabs>\n      {TABS.map((tab) => (\n        <Tab\n          key={tab.value}\n          onClick={() => changeTab(tab.value)}\n          style={{ opacity: tab.value === state.tab ? 1 : 0.5 }}\n        >\n          <p className=\"m-0\">{tab.label}</p>\n          <Counter>{state[tab.value].length}</Counter>\n          {tab.value === state.tab && <SelectedTab />}\n        </Tab>\n      ))}\n    </Tabs>\n    {state.detail && state.selected && (\n      <Widget\n        props={{\n          project: state.selected,\n        }}\n        src={`${Owner}/widget/detail`}\n      />\n    )}\n\n    {!state.detail && state.tab === \"my_projects\" && (\n      <>\n        <MyProjectCard>\n          <div className=\"d-flex flex-column w-50\">\n            <p>{`These are the projects on Vulcan which you're a member of.`}</p>\n            <div style={{ width: 240 }}>\n              <Widget\n                props={{\n                  noLabel: true,\n                  value: state.member_option,\n                  options: MEMBER_OPTIONS,\n                  onChange: changeMemberOption,\n                }}\n                src={`${Owner}/widget/Select`}\n              />\n            </div>\n          </div>\n          <div\n            className=\"d-flex flex-column w-50 p-4 rounded-3\"\n            style={{ backgroundColor: \"rgb(38, 38, 38)\" }}\n          >\n            <h6>{`Note`}</h6>\n            <p\n              className=\"m-0\"\n              style={{ fontSize: 14, color: \"rgb(163, 163, 163)\" }}\n            >\n              {`The wallet address put forward to projects for whitelisting is the address that is configured as \"Default\" on your Account. This can be changed as many times up until the project finishes whitelisting and has fully exported their whitelist addresses.`}\n            </p>\n          </div>\n        </MyProjectCard>\n        <GridWrapper>\n          {!state.loaded && <h5>Loading...</h5>}\n          {state.my_projects\n            .filter(\n              (e) =>\n                state.member_option === \"all\" ||\n                (state.member_option === \"status_active\" &&\n                  e.whitelist === true) ||\n                (state.member_option === \"status_closed\" &&\n                  e.whitelist === false)\n            )\n            .map((project) => (\n              <Widget\n                props={{ API_URL, TOKEN, project, type: \"my\", showDetail }}\n                key={project._id}\n                src={`${Owner}/widget/project`}\n              />\n            ))}\n        </GridWrapper>\n      </>\n    )}\n\n    {!state.detail && state.tab === \"other_projects\" && (\n      <div className=\"d-flex flex-column gap-4 py-4\">\n        <p className=\"m-0\">{`These are the projects on Vulcan which you're a member of.`}</p>\n        <GridWrapper>\n          {state.other_projects.map((project) => (\n            <Widget\n              props={{ API_URL, TOKEN, project }}\n              key={project._id}\n              src={`${Owner}/widget/project`}\n            />\n          ))}\n        </GridWrapper>\n      </div>\n    )}\n\n    {!state.detail && state.tab === \"past_projects\" && (\n      <div className=\"d-flex flex-column gap-4 py-4\">\n        <p className=\"m-0\">{`These are past projects on Vulcan which have already minted.`}</p>\n        <GridWrapper>\n          {state.past_projects.map((project) => (\n            <Widget\n              props={{ API_URL, TOKEN, project, type: \"past\" }}\n              key={project._id}\n              src={`${Owner}/widget/project`}\n            />\n          ))}\n        </GridWrapper>\n      </div>\n    )}\n  </Wrapper>\n);\n", "metadata": {"fork_of": "dropcast.near/widget/dashboard@113293333"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dropcast.near/widget/dashboard", "fact_widget_deployments_id": "b8b49b89f7c686f09f92c3ead91785de", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 54}