{"tx_hash": "AXwdGiz5VChgXSy8ChhvWzindNcZJQNbkMUFNhG97Sc", "action_id_social": "EZm36ZsUt46WPGaFeCeYKE7YP9caH3FYDvQzFfXDXVW5-0-widget", "block_id": 117378048, "block_timestamp": "2024-04-22T11:21:53.135Z", "signer_id": "dropcast.near", "widget_name": "airdrop", "source_code": "const accountId = context.accountId;\nconst Owner = \"dropcast.near\";\nconst API_URL = props.API_URL || \"http://localhost:2402\";\nconst USER = props.USER || {};\nconst TOKEN = props.TOKEN || \"\";\nconst Logout = props.Logout;\n\n//Styles\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 64px;\n  height: fit-content;\n  position: relative;\n  align-items: stretch;\n  flex-direction: column;\n  color: rgb(229 229 229);\n  background: rgb(23,23,23);\n  @media (max-width: 510px) {\n      padding: 30px;\n  }\n`;\n\nconst Card = styled.div`\n    gap: 24px;\n    display: flex;\n    width: 100%;\n    padding: 48px;\n    border-radius: 8px;\n    position: relative;\n    flex-direction: column;\n    background: rgb(38, 38, 38);\n    @media (max-width: 620px) {\n      padding: 15px;\n      height: 100%;\n      .menu {\n        width: 74vw;\n      }\n    }  \n`;\n\nconst Label = styled.label`\n    font-size: 14px;\n    margin-bottom: 4px;\n`;\n\nconst Button = styled.button`\n    color: #FFF;\n    padding: 12px;\n    border-radius: 6px;\n    background-image: linear-gradient(to right, rgb(147, 51, 234), rgb(99, 102, 241));\n`;\n\nconst NEAR_TOKEN = [\n  {\n    text: \"> 1 $NEAR\",\n    value: \"near1\",\n  },\n  {\n    text: \"> 10 $NEAR\",\n    value: \"near2\",\n  },\n  {\n    text: \"> 100 $NEAR\",\n    value: \"near3\",\n  },\n  {\n    text: \"> 1000 $NEAR\",\n    value: \"near4\",\n  },\n  {\n    text: \"Not Applicable\",\n    value: \"near0\",\n  },\n];\n\nconst AGE_ACCOUNT = [\n  {\n    text: \"> 1 Month\",\n    value: \"age1\",\n  },\n  {\n    text: \"> 6 Month\",\n    value: \"age2\",\n  },\n  {\n    text: \"> 1 Year\",\n    value: \"age3\",\n  },\n  {\n    text: \"> 2 Year\",\n    value: \"age4\",\n  },\n  {\n    text: \"Not Applicable\",\n    value: \"age0\",\n  },\n];\n\nconst TRANSACTION = [\n  {\n    text: \"> 10 Transactions\",\n    value: \"transaction1\",\n  },\n  {\n    text: \"> 50 Transactions\",\n    value: \"transaction2\",\n  },\n  {\n    text: \"> 1000 Transactions\",\n    value: \"transaction3\",\n  },\n  {\n    text: \"> 10000 Transactions\",\n    value: \"transaction4\",\n  },\n  {\n    text: \"Not Applicable\",\n    value: \"transaction0\",\n  },\n];\n\nconst BOOL = [\n  {\n    text: \"Yes\",\n    value: \"yes\",\n  },\n  {\n    text: \"Not Applicable\",\n    value: \"no\",\n  },\n];\n\nState.init({\n  near: \"near0\",\n  age: \"age0\",\n  transaction: \"transaction0\",\n  nft: \"no\",\n  meme: \"no\",\n  activity: \"no\",\n  error: \"\",\n  download: false,\n  file: \"\",\n  loading: false,\n});\n\nconst changeOption = (key, value) => {\n  State.update({\n    ...state,\n    [key]: value,\n  });\n};\n\nconst convertObject = (params) => {\n  return Object.keys(params)\n    .map((param) => `${param}=${params[param]}`)\n    .join(\"&\");\n};\n\nconst onSubmit = () => {\n  State.update({\n    ...state,\n    loading: true,\n    download: false,\n    file: \"\",\n  });\n  let promise = asyncFetch(`${API_URL}/api/auth/download`, {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"x-auth-token\": TOKEN,\n    },\n    method: \"POST\",\n    body: convertObject({\n      near: state.near,\n      age: state.age,\n      transaction: state.transaction,\n      nft: state.nft,\n      meme: state.meme,\n      activity: state.activity,\n    }),\n  });\n\n  promise\n    .then((data) => {\n      if (data.status === 200) {\n        if (data.body?.error) {\n          State.update({\n            ...state,\n            loading: false,\n            error: data.body,\n          });\n        } else {\n          State.update({\n            ...state,\n            loading: false,\n            download: true,\n            file: data.body,\n          });\n        }\n      } else {\n        State.update({\n          ...state,\n          loading: false,\n          error: data.body,\n        });\n      }\n    })\n    .catch(() => {\n      State.update({\n        ...state,\n        loading: false,\n        error: \"Api error\",\n      });\n    });\n};\n\nreturn (\n  <Wrapper>\n    <Card>\n      <div>\n        <h5 className=\"m-0\" style={{ fontSize: 18 }}>\n          {`Custom Allowlist`}\n        </h5>\n      </div>\n      <div>\n        <Label>{`Minimum $NEAR balance`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: NEAR_TOKEN,\n            value: state.near,\n            onChange: (val) => changeOption(\"near\", val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n      </div>\n      <div>\n        <Label>{`Age of the Account`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: AGE_ACCOUNT,\n            value: state.age,\n            onChange: (val) => changeOption(\"age\", val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n      </div>\n      <div>\n        <Label>{`Transaction Count`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: TRANSACTION,\n            value: state.transaction,\n            onChange: (val) => changeOption(\"transaction\", val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n      </div>\n      <div>\n        <Label>{`Holds NFTs`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: BOOL,\n            value: state.nft,\n            onChange: (val) => changeOption(\"nft\", val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n      </div>\n      <div>\n        <Label>{`Holds Meme Coins`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: BOOL,\n            value: state.meme,\n            onChange: (val) => changeOption(\"meme\", val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n        <p\n          style={{ fontSize: 14, color: \"grey\", margin: 0 }}\n        >{`Any meme coin ($Neko/$Lonk/$Blackdragon/$Shitzu)`}</p>\n      </div>\n      {/*\n      <div>\n        <Label>{`Has Near Social Activity`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: BOOL,\n            value: state.activity,\n            onChange: (val) => changeOption(\"activity\", val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n      </div> */}\n      <Button className=\"btn\" onClick={onSubmit} disabled={state.loading}>\n        {state.loading ? `Processing...` : `Submit`}\n      </Button>\n      {state.download && state.file && (\n        <div className=\"d-flex mt-1 justify-content-center align-items-center mb-2\">\n          <a href={`${API_URL}/${state.file}`}>Download CSV</a>\n        </div>\n      )}\n    </Card>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dropcast.near/widget/airdrop", "fact_widget_deployments_id": "368d3c5b61c436c9fac7f13eaac7b935", "inserted_timestamp": "2024-04-22T12:39:08.143Z", "modified_timestamp": "2024-04-22T13:36:01.149Z", "__row_index": 0}