{"tx_hash": "35mEgzz9ZqVEon2Ny5BPa8mWp2zRbjBa1U2sUjfVPMpm", "action_id_social": "3H3xSh6ATkKnanKSeKEjTYQBnLnLMJ92waqJgXnkATNx-0-widget", "block_id": 117538110, "block_timestamp": "2024-04-24T18:32:13.111Z", "signer_id": "dropcast.near", "widget_name": "airdrop", "source_code": "const accountId = context.accountId;\nconst Owner = \"dropcast.near\";\nconst API_URL = props.API_URL || \"http://localhost:2402\";\nconst USER = props.USER || {};\nconst TOKEN = props.TOKEN || \"\";\nconst Logout = props.Logout;\nconst Admin = \"humans-of-near.near\";\n\n//Styles\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 64px;\n  height: fit-content;\n  position: relative;\n  align-items: stretch;\n  flex-direction: column;\n  color: rgb(229 229 229);\n  background: rgb(23,23,23);\n  @media (max-width: 510px) {\n      padding: 30px;\n  }\n`;\n\nconst Label = styled.label`\n    font-size: 14px;\n    margin-bottom: 4px;\n`;\n\nconst Card = styled.div`\n    gap: 24px;\n    display: flex;\n    width: 100%;\n    padding: 48px;\n    border-radius: 8px;\n    position: relative;\n    flex-direction: column;\n    background: rgb(38, 38, 38);\n    @media (max-width: 620px) {\n      padding: 15px;\n      height: 100%;\n      .menu {\n        width: 74vw;\n      }\n    }  \n`;\n\nconst DropBox = styled.label`\n    margin: 10px 0;\n    padding: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    border: 3px dotted #a3a3a3;\n    border-radius: 5px;\n`;\n\nconst Button = styled.button`\n    color: #FFF;\n    padding: 12px;\n    border-radius: 6px;\n    background-image: linear-gradient(to right, rgb(147, 51, 234), rgb(99, 102, 241));\n`;\n\nconst UploadButton = styled.button`\n    text-decoration: none;\n    background-color: #005af0;\n    color: #ffffff;\n    padding: 10px 20px;\n    border: none;\n    outline: none;\n    transition: 0.3s;\n`;\nconst DepButton = styled.button`\n    color: #FFF;\n    padding: 1px 4px;\n    border-radius: 6px;\n    background-image: linear-gradient(to right, rgb(147, 51, 234), rgb(99, 102, 241), rgb(99, 102, 241));\n`;\n\nconst CardText = styled.h3`\n    font-size: 22px;\n    font-weight: 600;\n`;\n\nconst DropBoxText1 = styled.h4`\n    font-size: 17px;\n    font-weight: 400;\n`;\nconst DropBoxText2 = styled.h4`\n    margin-top: 10px;\n    margin-bottom: 20px;\n    font-size: 12px;\n    color: #a3a3a3;\n`;\n\nconst [file, setFile] = useState(null);\nconst [uploaded, setUploaded] = useState(\n  Storage.get(\"airdropData\").uploaded || false\n);\nconst [selectedToken, setSelectedToken] = useState(\n  { value: Storage.get(\"airdropData\").token_contract } || {}\n);\nconst [tokenList, setTokenList] = useState([]);\nconst [airdropFee, setAirdropFee] = useState(\n  Storage.get(\"airdropData\").airdropFee || 0\n);\nconst [airdropTotalAmount, setAirdropTotalAmount] = useState(\n  Storage.get(\"airdropData\").totalAmount || 0\n);\nconst [notification, setNotification] = useState(\"\");\n\nconst changeOption = (value) => {\n  setSelectedToken({ value });\n};\n\nconst handleFileChange = (files) => {\n  setFile(files[0]);\n};\n\nconst toFixed = (x) => {\n  if (Math.abs(x) < 1.0) {\n    var e = parseInt(x.toString().split(\"e-\")[1]);\n    if (e) {\n      x *= Math.pow(10, e - 1);\n      x = \"0.\" + new Array(e).join(\"0\") + x.toString().substring(2);\n    }\n  } else {\n    var e = parseInt(x.toString().split(\"+\")[1]);\n    if (e) {\n      e -= 20;\n      x /= Math.pow(10, e);\n      x += new Array(e + 1).join(\"0\");\n    }\n  }\n  return x.toString();\n};\n\nconst handleFeeDeposit = async () => {\n  if (!airdropFee) {\n    setNotification(\"First, upload file, then you will get fee amount.\");\n    return;\n  }\n  const oneTeraGas = 1000000000000;\n  const oneNEARInYoctoNEAR = 1000000000000000000000000;\n  Storage.set(\"transfering\", \"near\");\n  Near.call(\n    \"transfer-near.near\",\n    \"transfer_near\",\n    Admin,\n    oneTeraGas,\n    Number(airdropFee) * oneNEARInYoctoNEAR\n  );\n};\nconst handleTokenDeposit = async () => {\n  if (!airdropTotalAmount) {\n    setNotification(\n      \"First, upload file, then you will get total token amount.\"\n    );\n    return;\n  }\n  const contract = Storage.get(\"airdropData\").token_contract;\n  const oneTeraGas = 1000000000000;\n  const tokenData = Near.view(contract, \"ft_metadata\");\n\n  Storage.set(\"transfering\", \"token\");\n\n  Near.call(\n    Storage.get(\"airdropData\").token_contract,\n    \"ft_transfer\",\n    {\n      receiver_id: Admin,\n      amount: `${toFixed(\n        airdropTotalAmount * Math.pow(10, tokenData.decimals)\n      )}`,\n    },\n    oneTeraGas\n  );\n};\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  // if (\n  //   !confirm(\n  //     \"You have already uploaded sheet file, Do you want to upload new file?\"\n  //   )\n  // ) {\n  //   return;\n  // }\n\n  if (!file) {\n    setNotification(\"Please select file\");\n    return;\n  }\n\n  if (!selectedToken.value) {\n    setNotification(\"Please select aridrop token in your list\");\n    return;\n  }\n  const reader = new FileReader();\n\n  reader.onload = () => {\n    const fileData = reader.result;\n    try {\n      const response = asyncFetch(\"http://localhost:2402/api/project/airdrop\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          data: fileData,\n          //   name: file.name,\n          userId: USER?._id || \"65dc747ae9ed2a19c505e1c2\",\n          token_contract: selectedToken.value,\n          accountId,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          // \"x-a uth-token\": TOKEN,\n        },\n      });\n      response.then(({ body }) => {\n        if (body.status === true) {\n          setNotification(\"You have uploaded file successfully.\");\n          setAirdropFee(body.airdropFee);\n          setAirdropTotalAmount(body.totalAmount);\n          Storage.set(\"airdropData\", {\n            timeId: body.timeId,\n            uploaded: true,\n            isNPaid: false,\n            isTPaid: false,\n            totalAmount: body.totalAmount,\n            airdropFee: body.airdropFee,\n            token_contract: selectedToken.value,\n          });\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  reader.readAsDataURL(file);\n};\n\nuseEffect(() => {\n  const response = asyncFetch(\n    `http://localhost:2402/api/project/get_token_list`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        accountId,\n      }),\n\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-auth-token\": TOKEN,\n      },\n    }\n  );\n  response.then(({ body }) => {\n    setTokenList(body.data);\n  });\n}, []);\n\nuseEffect(() => {\n  console.log(\"Storage.get('airdropData')\", Storage.get(\"airdropData\"));\n  if (props.transactionHashes && Storage.get(\"airdropData\")) {\n    asyncFetch(\"https://rpc.mainnet.near.org\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: \"dontcare\",\n        method: \"tx\",\n        params: [props.transactionHashes, accountId],\n      }),\n    }).then((tx) => {\n      console.log(tx);\n      if (tx.ok) {\n        const response = asyncFetch(\n          `http://localhost:2402/api/project/verifytx`,\n          {\n            method: \"POST\",\n            body: JSON.stringify({\n              time_id: Storage.get(\"airdropData\").timeId,\n              tx_hash: props.transactionHashes,\n              userId: USER?._id || \"65dc747ae9ed2a19c505e1c2\",\n              isToken: Storage.get(\"transfering\") === \"near\" ? false : true,\n            }),\n\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"x-auth-token\": TOKEN,\n            },\n          }\n        );\n        response.then(({ body }) => {\n          const data = Storage.get(\"airdropData\");\n          if (Storage.get(\"transfering\") === \"near\") {\n            Storage.set(\"airdropData\", { ...data, isNPaid: true });\n          } else {\n            Storage.set(\"airdropData\", { ...data, isTPaid: true });\n          }\n        });\n      }\n    });\n  }\n}, [Storage.get(\"airdropData\")]);\n\nreturn (\n  <Wrapper>\n    <Card>\n      <div>\n        <Label>{`Select airdrop token`}</Label>\n        <Widget\n          props={{\n            noLabel: true,\n            width: \"40vw\",\n            options: tokenList,\n            value: selectedToken.value,\n            onChange: (val) => changeOption(val),\n          }}\n          src={`${Owner}/widget/Select`}\n        />\n      </div>\n      <div>\n        <Label>Airdrop Token Total Amount</Label>\n        <div className=\"d-flex flex-row\">\n          <input\n            type=\"number\"\n            name=\"airdrop_total\"\n            value={airdropTotalAmount}\n            className=\"w-full px-2 py-1 rounded-3 border-0\"\n            onChange={(e) => {}}\n            style={{ fontSize: 14, width: \"90%\" }}\n          />\n          <DepButton className=\"btn\" onClick={handleTokenDeposit}>\n            Deposit\n          </DepButton>\n        </div>\n      </div>\n      <div>\n        <Label>Airdrop Fee(NEAR)</Label>\n        <div className=\"d-flex flex-row\">\n          <input\n            type=\"number\"\n            name=\"airdrop_fee\"\n            value={airdropFee}\n            className=\"w-full px-2 py-1 rounded-3 border-0\"\n            onChange={(e) => {}}\n            style={{ fontSize: 14, width: \"90%\" }}\n          />\n          <DepButton className=\"btn\" onClick={handleFeeDeposit}>\n            Deposit\n          </DepButton>\n        </div>\n      </div>\n      <CardText>Upload Files</CardText>\n      <DropBox>\n        <DropBoxText1>Select File here</DropBoxText1>\n        <DropBoxText2>Files Supported: .xls, .xlsx</DropBoxText2>\n        <Files onChange={handleFileChange} clickable multiple={false}>\n          {file && (\n            <div id=\"fileName\" className=\"px-3 py-1 mt-3 rounded-pill\">\n              {file?.name}\n            </div>\n          )}\n        </Files>\n        <UploadButton onClick={handleSubmit}>Upload</UploadButton>\n      </DropBox>\n      {notification && (\n        <div\n          className=\"d-flex justify-content-end position-absolute\"\n          style={{ right: 10 }}\n        >\n          <Widget\n            props={{\n              text: notification,\n              type: \"info\",\n              setNotification,\n            }}\n            src={`${Owner}/widget/Alert`}\n          />\n        </div>\n      )}\n    </Card>\n  </Wrapper>\n);\n", "metadata": {"fork_of": "dropcast.near/widget/airdrop@117537116"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dropcast.near/widget/airdrop", "fact_widget_deployments_id": "f96d8e875810f33b422c8ef1ebc208b0", "inserted_timestamp": "2024-04-24T20:07:33.785Z", "modified_timestamp": "2024-04-24T21:05:34.614Z", "__row_index": 22}