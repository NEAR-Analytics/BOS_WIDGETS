{"tx_hash": "ErfKohjRZBnKhAdiP4aQBRSLnb3KTzy5H6qGz15TBLb6", "action_id_social": "D8yThg1KWo8T5aKPpsmbqEkfa6MHqvcn5G5pyL3ywkYT-0-widget", "block_id": 103559320, "block_timestamp": "2023-10-17T04:55:03.371Z", "signer_id": "chess-game.near", "widget_name": "ChessGameTab.Default", "source_code": "const { accountId } = context;\r\nconst { isRegistered } = props;\r\nif (!accountId) {\r\n  return \"You need to login with your Near wallet first!\";\r\n}\r\nconst game_id =\r\n  props.game_id && typeof props.game_id === \"string\"\r\n    ? JSON.parse(decodeURIComponent(props.game_id))\r\n    : props.game_id;\r\n\r\nconst contractId = \"app.chess-game.near\";\r\nconst gameWidget = \"chess-game.near/widget/ChessGame\";\r\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\r\nconst challengeWidget = \"chess-game.near/widget/ChessGameChallenge\";\r\nconst aiWidget = \"chess-game.near/widget/ChessGameAi\";\r\n\r\nconst minBlockDiffCancel = 60 * 60 * 24 * 3;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  gap: 0.4rem 0;\r\n\r\n  h2, h3, h4 {\r\n    align-self: center;\r\n  }\r\n`;\r\nconst GameSelector = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n\r\n  > * {\r\n    flex: 1 1 1000px;\r\n  }\r\n`;\r\n\r\nState.init({\r\n  gameIds: null,\r\n  game_id: state.game_id ?? game_id,\r\n});\r\n\r\nconst selectGame = (gameId) => {\r\n  State.update({\r\n    game_id: gameId,\r\n  });\r\n};\r\nconst resign = () => {\r\n  Near.call(contractId, \"resign\", {\r\n    game_id: state.game_id,\r\n  });\r\n  // TODO await tx before navigation\r\n  selectGame(null);\r\n};\r\nconst cancel = () => {\r\n  Near.call(contractId, \"cancel\", {\r\n    game_id: state.game_id,\r\n  });\r\n  // TODO await tx before navigation\r\n  selectGame(null);\r\n};\r\n\r\nif (state.game_id) {\r\n  const res = fetch(\"https://rpc.mainnet.near.org\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      jsonrpc: \"2.0\",\r\n      id: \"dontcare\",\r\n      method: \"status\",\r\n      params: [],\r\n    }),\r\n  });\r\n  if (!res.ok || res.body.error) {\r\n    return `Something went wrong: ${res.body.error}`;\r\n  }\r\n  const currentBlockHeight = res.body.result.sync_info.latest_block_height;\r\n  const currentBlockTime = new Date(\r\n    res.body.result.sync_info.latest_block_time\r\n  );\r\n  const gameInfo = Near.view(contractId, \"game_info\", {\r\n    game_id: state.game_id,\r\n  });\r\n  if (!gameInfo) return;\r\n  const blockDiffCancel =\r\n    gameInfo.last_block_height - currentBlockHeight + minBlockDiffCancel;\r\n  const cancelDate = new Date(\r\n    currentBlockTime.valueOf() + blockDiffCancel * 1_100\r\n  );\r\n  return (\r\n    <Content>\r\n      <Widget\r\n        src={buttonWidget}\r\n        props={{\r\n          onClick: () => selectGame(null),\r\n          alignSelf: \"center\",\r\n          content: \"Close\",\r\n        }}\r\n      />\r\n      <Widget\r\n        src={buttonWidget}\r\n        props={{\r\n          onClick: resign,\r\n          alignSelf: \"center\",\r\n          content: \"Resign\",\r\n        }}\r\n      />\r\n      <Widget\r\n        src={buttonWidget}\r\n        props={{\r\n          onClick: cancel,\r\n          alignSelf: \"center\",\r\n          content: \"Cancel\",\r\n          disabled: cancelDate.valueOf() > Date.now(),\r\n        }}\r\n      />\r\n      <Widget src={gameWidget} props={{ game_id: state.game_id, cancelDate }} />\r\n    </Content>\r\n  );\r\n}\r\n\r\nif (isRegistered) {\r\n  Near.asyncView(contractId, \"get_game_ids\", {\r\n    account_id: accountId,\r\n  }).then((gameIds) =>\r\n    State.update({\r\n      gameIds,\r\n    })\r\n  );\r\n} else {\r\n  State.update({\r\n    gameIds: [],\r\n  });\r\n}\r\nif (!state.gameIds) {\r\n  return <Widget src=\"chess-game.near/widget/ChessGameLoading\" />;\r\n}\r\n\r\nconst renderGameIds = (gameIds) =>\r\n  gameIds.map((gameId) => {\r\n    const gameInfo = Near.view(contractId, \"game_info\", {\r\n      game_id: gameId,\r\n    });\r\n    return (\r\n      <Widget\r\n        src={buttonWidget}\r\n        props={{\r\n          onClick: () => selectGame(gameId),\r\n          flexDirection: \"column\",\r\n          content: (\r\n            <>\r\n              <div>ID: {gameId[0]}</div>\r\n              {gameInfo && (\r\n                <div>\r\n                  VS:{\" \"}\r\n                  {gameInfo.black.Ai ? (\r\n                    <>AI ({gameInfo.black.Ai})</>\r\n                  ) : (\r\n                    <>\r\n                      Player\r\n                      {gameInfo.black.Human === accountId ? (\r\n                        <> ({gameInfo.white.Human})</>\r\n                      ) : (\r\n                        <> ({gameInfo.black.Human})</>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </>\r\n          ),\r\n        }}\r\n      />\r\n    );\r\n  });\r\n\r\nreturn (\r\n  <Content>\r\n    <h2>Select Game:</h2>\r\n    <GameSelector>\r\n      {state.gameIds.length > 0 ? (\r\n        renderGameIds(state.gameIds)\r\n      ) : (\r\n        <span>\r\n          No open games found.\r\n          <br />\r\n          Challenge your first opponent or create an AI game!\r\n        </span>\r\n      )}\r\n    </GameSelector>\r\n  </Content>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameTab.Default", "fact_widget_deployments_id": "c7b07e95e8c07b41e84db5a51aaa50ae", "inserted_timestamp": "2023-10-17T06:50:47.097Z", "modified_timestamp": "2023-10-17T06:50:47.097Z", "__row_index": 0}