{"tx_hash": "6oJmiXHnyBZ7hmggLcPUbt6CG7h8CktsLzkcez3SxCES", "action_id_social": "4MRXirFc6HrVCh2CXWVMSWiHnY4okXtyCtjiRfJ68xNN-0-widget", "block_id": 103559204, "block_timestamp": "2023-10-17T04:52:36.510Z", "signer_id": "chess-game.near", "widget_name": "ChessGame", "source_code": "const { game_id, cancelDate } = props;\r\n\r\nconst contractId = \"app.chess-game.near\";\r\nconst chessBoardWidget = \"chess-game.near/widget/ChessBoard\";\r\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\r\nconst loadingWidget = \"chess-game.near/widget/ChessGameLoading\";\r\n\r\nif (!game_id) return <div>\"game_id\" prop required</div>;\r\n\r\nNear.asyncView(contractId, \"get_board\", {\r\n  game_id,\r\n})\r\n  .then((board) => {\r\n    State.update({\r\n      board,\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n    State.update({\r\n      error: err,\r\n    });\r\n  });\r\nNear.asyncView(contractId, \"game_info\", {\r\n  game_id,\r\n})\r\n  .then((gameInfo) => {\r\n    State.update({\r\n      gameInfo,\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n    State.update({\r\n      error: err,\r\n    });\r\n  });\r\n\r\nState.init({\r\n  board: state.board,\r\n  gameInfo: state.gameInfo,\r\n  move: \"\",\r\n  assetType: state.assetType ?? \"default\",\r\n  error: state.error,\r\n});\r\n\r\nif (!state.board || !state.gameInfo) {\r\n  return <Widget src={loadingWidget} />;\r\n}\r\nif (state.error) {\r\n  return \"The game no longer exists. Please return to lobby\";\r\n}\r\n\r\nconst BoardView = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst GameInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  font-size: 1.4rem;\r\n  margin: 1rem;\r\n`;\r\n\r\nconst renderPlayer = (color, player) => {\r\n  if (player.Human) {\r\n    return (\r\n      <div>\r\n        Player {color}: {player.Human}\r\n      </div>\r\n    );\r\n  } else if (player.Ai) {\r\n    return (\r\n      <div>\r\n        Player {color}: AI ({player.Ai})\r\n      </div>\r\n    );\r\n  } else {\r\n    const err = new Error(`Unable to render player: ${player}`);\r\n    console.error(err);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nconst TurnInput = styled.input`\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n`;\r\nconst SendButton = styled.button`\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst updateMove = (event) => {\r\n  State.update({\r\n    move: event.target.value,\r\n  });\r\n};\r\nconst selectAsset = (event) => {\r\n  State.update({\r\n    assetType: event.target.value,\r\n  });\r\n};\r\n\r\nconst playMove = () => {\r\n  if (!state.move) return;\r\n  Near.call(\r\n    contractId,\r\n    \"play_move\",\r\n    {\r\n      game_id,\r\n      mv: state.move,\r\n    },\r\n    \"300000000000000\"\r\n  );\r\n};\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: 2rem;\r\n  max-width: 400px;\r\n`;\r\n\r\nconst text = `\r\n  _A valid move will be parsed from a string._\r\n  \r\n  _Possible valid formats include:_\r\n  - \\\"e2e4\\\"\r\n  - \\\"e2 e4\\\"\r\n  - \\\"e2 to e4\\\"\r\n  - \\\"castle queenside\\\"\r\n  - \\\"castle kingside\\\"'\r\n\r\n  _If a game stalls because players stop sending moves, it can be stopped after ~3 days._\r\n  _Cancelling a game won't affect your ELO rating, but resigning will result in a lost match._\r\n`;\r\nconst assetText = `\r\n  _Assets are free to use right now, but will later be unlocked via NFTs._\r\n`;\r\n\r\nreturn (\r\n  <BoardView>\r\n    <GameInfo>\r\n      <div>ID: {game_id[0]}</div>\r\n      {renderPlayer(\"White\", state.gameInfo.white)}\r\n      {renderPlayer(\"Black\", state.gameInfo.black)}\r\n      <div>Turn: {state.gameInfo.turn_color}</div>\r\n      {cancelDate && <div>Cancellable: {cancelDate.toLocaleString()}</div>}\r\n    </GameInfo>\r\n    <Widget\r\n      src={chessBoardWidget}\r\n      props={{ board: state.board, assetType: state.assetType }}\r\n    />\r\n    <Footer>\r\n      <h3>Your Move:</h3>\r\n      <div class=\"text-center\">\r\n        <TurnInput\r\n          type=\"text\"\r\n          required\r\n          autocomplete=\"off\"\r\n          id=\"turn\"\r\n          value={state.move}\r\n          onChange={updateMove}\r\n        />\r\n        <Widget\r\n          src={buttonWidget}\r\n          props={{\r\n            onClick: playMove,\r\n            fontSize: \"1.2rem\",\r\n            content: \"Play\",\r\n            inline: true,\r\n          }}\r\n        />\r\n      </div>\r\n      <Markdown text={text} />\r\n\r\n      {\r\n        // <h3>Assets:</h3>\r\n        // <select onChange={selectAsset} value={state.assetType}>\r\n        //   <option value=\"default\">Regular</option>\r\n        //   <option value=\"hk\">Hollow Knight Style</option>\r\n        // </select>\r\n        // <Markdown text={assetText} />\r\n      }\r\n    </Footer>\r\n  </BoardView>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGame", "fact_widget_deployments_id": "6aae90163edee97217443a844151c6f1", "inserted_timestamp": "2023-10-17T06:48:33.792Z", "modified_timestamp": "2023-10-17T06:48:33.792Z", "__row_index": 8}