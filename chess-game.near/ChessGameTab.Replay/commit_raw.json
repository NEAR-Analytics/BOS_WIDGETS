{"tx_hash": "EwNNgBkQdd6WQ5cbuXaT4wdF4sj2Jioupht9RahSvBna", "action_id_social": "AhcBQbJc5TXmqJ696KdKTUhnwsQQx7weDRXG8WHpaawn-0-widget", "block_id": 103558483, "block_timestamp": "2023-10-17T04:37:11.990Z", "signer_id": "chess-game.near", "widget_name": "ChessGameTab.Replay", "source_code": "const { accountId } = context;\r\nconst { isRegistered } = props;\r\nconsole.log(\"props.game_id\", props.game_id, typeof props.game_id);\r\nconst game_id =\r\n  props.game_id && typeof props.game_id === \"string\"\r\n    ? JSON.parse(decodeURIComponent(props.game_id))\r\n    : props.game_id;\r\nconsole.log(\"game_id\", game_id);\r\n\r\nconst contractId = \"app.chess-game.near\";\r\nconst replayWidget = \"chess-game.near/widget/ChessGameReplay\";\r\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\r\nconst loadingWidget = \"chess-game.near/widget/ChessGameLoading\";\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  gap: 0.4rem 0;\r\n`;\r\nconst GameSelector = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 1rem;\r\n\r\n  > * {\r\n    flex: 1 1 1000px;\r\n  }\r\n`;\r\n\r\nState.init({\r\n  game_id: state.game_id ?? game_id,\r\n  finishedGames: state.finishedGames ?? null,\r\n  recentFinishedGames: state.recentFinishedGames ?? null,\r\n});\r\n\r\nconst selectGame = (gameId) => {\r\n  State.update({\r\n    game_id: gameId,\r\n  });\r\n};\r\n\r\nif (state.game_id) {\r\n  return (\r\n    <Content>\r\n      <Widget\r\n        src={buttonWidget}\r\n        props={{\r\n          onClick: () => selectGame(null),\r\n          alignSelf: \"center\",\r\n          content: \"Close\",\r\n        }}\r\n      />\r\n      <Widget src={replayWidget} props={{ game_id: state.game_id }} />\r\n    </Content>\r\n  );\r\n}\r\n\r\nif (isRegistered && accountId) {\r\n  Near.asyncView(contractId, \"finished_games\", {\r\n    account_id: accountId,\r\n  }).then((finishedGames) => {\r\n    finishedGames.sort((a, b) => b[0] - a[0]);\r\n    State.update({\r\n      finishedGames,\r\n    });\r\n  });\r\n} else {\r\n  State.update({\r\n    finishedGames: [],\r\n  });\r\n}\r\nNear.asyncView(contractId, \"recent_finished_games\", {}).then(\r\n  (recentFinishedGames) => {\r\n    State.update({\r\n      recentFinishedGames,\r\n    });\r\n  }\r\n);\r\n\r\nif (!state.finishedGames || !state.recentFinishedGames) {\r\n  return <Widget src={loadingWidget} />;\r\n}\r\n\r\nconst renderGameIds = (gameIds, displayPlayers) =>\r\n  gameIds.map((gameId) => {\r\n    return (\r\n      <Widget\r\n        src={buttonWidget}\r\n        props={{\r\n          onClick: () => selectGame(gameId),\r\n          flexDirection: \"column\",\r\n          content: (\r\n            <>\r\n              <div>ID: {gameId[0]}</div>\r\n              {displayPlayers && (\r\n                <>\r\n                  <div>White: {gameId[1]}</div>\r\n                  {gameId[2] && <div>Black: {gameId[2]}</div>}\r\n                </>\r\n              )}\r\n            </>\r\n          ),\r\n        }}\r\n      />\r\n    );\r\n  });\r\n\r\nreturn (\r\n  <>\r\n    {state.finishedGames.length > 0 && (\r\n      <div>\r\n        <h2>Replay your finished games:</h2>\r\n        <GameSelector>{renderGameIds(state.finishedGames, false)}</GameSelector>\r\n      </div>\r\n    )}\r\n    {state.recentFinishedGames.length > 0 && (\r\n      <div class=\"mt-4\">\r\n        <h2>Replay recently finished games:</h2>\r\n        <GameSelector>\r\n          {renderGameIds(state.recentFinishedGames, true)}\r\n        </GameSelector>\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameTab.Replay", "fact_widget_deployments_id": "d2037ec60f0c6b2df379cf44cab636d2", "inserted_timestamp": "2023-10-17T06:38:57.137Z", "modified_timestamp": "2023-10-17T06:38:57.137Z", "__row_index": 5}