{"tx_hash": "8Jjv7YZqSw8rJwXWasK5qNQz8M82jA7UZA9UNyQwpC8N", "action_id_social": "A934mK8tmAyxXDRoe18eAxyfyB5C2QCmnH1MbnxRoUqa-0-widget", "block_id": 103003045, "block_timestamp": "2023-10-09T20:44:39.313Z", "signer_id": "chess-game.near", "widget_name": "ChessGameTab.Replay", "source_code": "const { accountId } = context;\nconst { isRegistered } = props;\nconst game_id =\n  props.game_id && typeof props.game_id === \"string\"\n    ? JSON.parse(props.game_id)\n    : props.game_id;\n\nconst contractId = \"app.chess-game.near\";\nconst replayWidget = \"chess-game.near/widget/ChessGameReplay\";\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\nconst loadingWidget = \"chess-game.near/widget/ChessGameLoading\";\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  gap: 0.4rem 0;\n`;\nconst GameSelector = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  gap: 1rem;\n`;\n\nState.init({\n  game_id: state.game_id ?? game_id,\n  finishedGames: state.finishedGames ?? null,\n  recentFinishedGames: state.recentFinishedGames ?? null,\n});\n\nconst selectGame = (gameId) => {\n  State.update({\n    game_id: gameId,\n  });\n};\n\nif (state.game_id) {\n  return (\n    <Content>\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: () => selectGame(null),\n          alignSelf: \"center\",\n          content: \"Close\",\n        }}\n      />\n      <Widget src={replayWidget} props={{ game_id: state.game_id }} />\n    </Content>\n  );\n}\n\nif (isRegistered && accountId) {\n  Near.asyncView(contractId, \"finished_games\", {\n    account_id: accountId,\n  }).then((finishedGames) => {\n    finishedGames.sort((a, b) => b[0] - a[0]);\n    State.update({\n      finishedGames,\n    });\n  });\n} else {\n  State.update({\n    finishedGames: [],\n  });\n}\nNear.asyncView(contractId, \"recent_finished_games\", {}).then(\n  (recentFinishedGames) => {\n    State.update({\n      recentFinishedGames,\n    });\n  }\n);\n\nif (!state.finishedGames || !state.recentFinishedGames) {\n  return <Widget src={loadingWidget} />;\n}\n\nconst renderGameIds = (gameIds, displayPlayers) =>\n  gameIds.map((gameId) => {\n    return (\n      <Widget\n        src={buttonWidget}\n        props={{\n          onClick: () => selectGame(gameId),\n          content: (\n            <>\n              <div>ID: {gameId[0]}</div>\n              {displayPlayers && (\n                <>\n                  <div>White: {gameId[1]}</div>\n                  {gameId[2] && <div>Black: {gameId[2]}</div>}\n                </>\n              )}\n            </>\n          ),\n        }}\n      />\n    );\n  });\n\nreturn (\n  <>\n    {state.finishedGames.length > 0 && (\n      <div>\n        <h2>Replay your finished games:</h2>\n        <GameSelector>{renderGameIds(state.finishedGames, false)}</GameSelector>\n      </div>\n    )}\n    {state.recentFinishedGames.length > 0 && (\n      <div>\n        <h2>Replay recently finished games:</h2>\n        <GameSelector>\n          {renderGameIds(state.recentFinishedGames, true)}\n        </GameSelector>\n      </div>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameTab.Replay", "fact_widget_deployments_id": "b614b1e5e2186d824c860834dc8028ff", "inserted_timestamp": "2023-10-09T22:38:16.742Z", "modified_timestamp": "2023-10-09T22:38:16.742Z", "__row_index": 0}