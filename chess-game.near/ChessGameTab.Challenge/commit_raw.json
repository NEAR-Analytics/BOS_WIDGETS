{"tx_hash": "FMMPKp5tzXX8yA1oYMSHXAwkYUQi1aog1CvgSEEduUMA", "action_id_social": "BhJABAmUQMznBw6LDKXw21muF7SJBRxbtjLspn9Lm7d2-0-widget", "block_id": 103003780, "block_timestamp": "2023-10-09T20:59:01.990Z", "signer_id": "chess-game.near", "widget_name": "ChessGameTab.Challenge", "source_code": "const { accountId } = context;\nif (!accountId) {\n  return \"You need to login with your Near wallet first!\";\n}\n\nconst contractId = \"app.chess-game.near\";\nconst buttonWidget = \"chess-game.near/widget/ChessGameButton\";\n\n// afterConfirmTx((txConfirmations) => {\n//   console.log(\"afterConfirmTx\", txConfirmations);\n//   for (const tx of txConfirmations) {\n//     const actions = tx?.transaction?.actions;\n//     if (Array.isArray(actions)) {\n//       for (const action of actions) {\n//         console.log(\"action\", action);\n//         const methodName = action.FunctionCall?.method_name;\n//         console.log(\"methodName\", methodName);\n//         if (!methodName) continue;\n//         if (\n//           methodName === \"challenge\" ||\n//           methodName === \"accept_challenge\" ||\n//           methodName === \"reject_challenge\"\n//         ) {\n//           updateOpenChallenges();\n//         }\n//       }\n//     }\n//   }\n// });\n\nconst Challenge = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  font-size: 1.2rem;\n  flex-wrap: wrap;\n  gap: 0.2rem;\n  border-radius: 0.4rem;\n  border: 1px solid black;\n  padding: 0.3rem;\n`;\nconst ChallengeInfo = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  line-height: 1.2rem;\n  margin-bottom: 0.4rem;\n`;\nconst GameSelector = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n\n  > * {\n    margin: 1rem;\n  }\n`;\nconst GameCreator = styled.div`\n  margin-top: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  > *:not(h2) {\n    margin: 0.2rem 0;\n  }\n\n  h2, h3, h4 {\n    align-self: center;\n  }\n`;\nconst AccountSearch = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  max-height: 400px;\n  max-width: 100%;\n  overflow: auto;\n`;\nconst SearchResult = styled.div`\n  background: #ddd;\n  line-height: 2rem;\n  padding: 0.5rem;\n  cursor: pointer;\n\n  &:hover {\n    background: #bbf;\n  }\n`;\n\nfunction updateOpenChallenges() {\n  Near.asyncView(contractId, \"get_challenges\", {\n    account_id: accountId,\n    is_challenger: true,\n  }).then((challenges0) => {\n    Near.asyncView(contractId, \"get_challenges\", {\n      account_id: accountId,\n      is_challenger: false,\n    }).then((challenges1) => {\n      if (challenges0 == null || challenges1 == null) {\n        return \"\";\n      }\n      const openChallenges = [\n        ...challenges0.map((id) => ({\n          challenge_id: id,\n          is_challenger: true,\n        })),\n        ...challenges1.map((id) => ({\n          challenge_id: id,\n          is_challenger: false,\n        })),\n      ];\n      State.update({\n        openChallenges,\n      });\n    });\n  });\n}\n\nlet eloRatings = [...(state?.eloRatings ?? [])];\nif (!state.eloRatings) {\n  let skip = 0;\n  const limit = 100;\n  while (true) {\n    let newEloRatings = Near.view(contractId, \"get_elo_ratings\", {\n      skip,\n      limit,\n    });\n    if (newEloRatings == null) return \"\";\n    skip += limit;\n    if (newEloRatings.length === 0) break;\n    eloRatings = eloRatings.concat(newEloRatings);\n    if (newEloRatings < limit) break;\n  }\n}\neloRatings.sort((a, b) => b[1] - a[1]);\n\nState.init({\n  challenged_id: \"\",\n  eloRatings,\n  displaySearch: state.displaySearch ?? false,\n  openChallenges: null,\n});\nupdateOpenChallenges();\n\nconst updateChallengedId = ({ target }) => {\n  State.update({ challenged_id: target.value });\n};\nconst challenge = () => {\n  Near.asyncView(contractId, \"storage_balance_of\", {\n    account_id: state.challenged_id,\n  }).then((isRegistered) => {\n    isRegistered = !!isRegistered;\n    console.log(\"isRegistered\", isRegistered);\n    if (isRegistered) {\n      Near.call(contractId, \"challenge\", {\n        challenged_id: state.challenged_id,\n      });\n    } else {\n      asyncFetch(\"https://rpc.mainnet.near.org\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: \"dontcare\",\n          method: \"query\",\n          params: {\n            request_type: \"view_account\",\n            finality: \"final\",\n            account_id: state.challenged_id,\n          },\n        }),\n      }).then((res) => {\n        console.log(\"RES\", res);\n        if (!res.ok || res.body.error) {\n          return;\n        }\n        Near.call([\n          {\n            contractName: contractId,\n            methodName: \"storage_deposit\",\n            args: {\n              account_id: state.challenged_id,\n            },\n            deposit: \"50000000000000000000000\",\n          },\n          {\n            contractName: contractId,\n            methodName: \"challenge\",\n            args: {\n              challenged_id: state.challenged_id,\n            },\n          },\n        ]);\n      });\n    }\n  });\n};\nconst acceptChallenge = (challenge_id) => () => {\n  Near.call(contractId, \"accept_challenge\", {\n    challenge_id,\n  });\n};\nconst rejectChallenge = (challenge_id, is_challenger) => () => {\n  Near.call(contractId, \"reject_challenge\", {\n    challenge_id,\n    is_challenger,\n  });\n};\n\nconst renderOpenChallenges = (challenges) => {\n  if (challenges == null) {\n    return \"\";\n  }\n  return (\n    <GameSelector>\n      {challenges.map(({ challenge_id, is_challenger }) => {\n        const [challengerId, challengedId] = challenge_id.split(\"-vs-\");\n        const challengerElo = state.eloRatings.find(\n          ([accountId]) => accountId === challengerId\n        )?.[1];\n        const challengedElo = state.eloRatings.find(\n          ([accountId]) => accountId === challengedId\n        )?.[1];\n        return (\n          <Challenge>\n            <ChallengeInfo>\n              <div>\n                {challengerId.length > 20\n                  ? challengerId.substr(0, 20) + \"...\"\n                  : challengerId}{\" \"}\n                {challengerElo != null && <>({challengerElo.toFixed(1)})</>}\n              </div>\n              <div>vs</div>\n              <div>\n                {challengedId.length > 20\n                  ? challengedId.substr(0, 20) + \"...\"\n                  : challengedId}{\" \"}\n                {challengedElo != null && <>({challengedElo.toFixed(1)})</>}\n              </div>\n            </ChallengeInfo>\n            {!is_challenger && (\n              <Widget\n                src={buttonWidget}\n                props={{\n                  onClick: acceptChallenge(challenge_id),\n                  content: \"Accept\",\n                }}\n              />\n            )}\n            <Widget\n              src={buttonWidget}\n              props={{\n                onClick: rejectChallenge(challenge_id, is_challenger),\n                content: \"Reject\",\n              }}\n            />\n          </Challenge>\n        );\n      })}\n    </GameSelector>\n  );\n};\n\nconst onFocus = () => {\n  State.update({\n    displaySearch: true,\n  });\n};\nconst onBlur = () => {\n  State.update({\n    displaySearch: false,\n  });\n};\nconst selectPlayer = (accountId) => () => {\n  State.update({ challenged_id: accountId });\n};\n\nconst renderEloRatings = (eloRatings) => {\n  if (state.challenged_id == null || !Array.isArray(eloRatings)) return \"\";\n  return eloRatings\n    .filter((val) => val != null)\n    .filter(([accountId]) =>\n      state.challenged_id.split(\" \").some((val) => accountId.includes(val))\n    )\n    .map(([accountId, eloRating]) => (\n      <SearchResult onClick={selectPlayer(accountId)}>\n        {accountId.length > 20 ? accountId.substr(0, 20) + \"...\" : accountId}{\" \"}\n        (ELO: {eloRating.toFixed(1)})\n      </SearchResult>\n    ));\n};\n\nconst overlayContent = (\n  <AccountSearch visible={state.displaySearch}>\n    {renderEloRatings(eloRatings)}\n  </AccountSearch>\n);\n\nreturn (\n  <GameCreator>\n    <h2>PvP:</h2>\n    <h3>Open challenges:</h3>\n    {state.openChallenges && state.openChallenges.length === 0 ? (\n      <span>\n        No open challenges found.\n        <br />\n        Challenge your first opponent now below!\n        <br />\n        If your opponent already registered with the contract, he will show up\n        in the list. If he is not registered you need to pay the storage deposit\n        for him.\n      </span>\n    ) : (\n      renderOpenChallenges(state.openChallenges)\n    )}\n    <span>Account ID:</span>\n    <OverlayTrigger\n      show={state.displaySearch}\n      delay={{ show: 250, hide: 300 }}\n      placement=\"bottom\"\n      overlay={overlayContent}\n    >\n      <input\n        onChange={updateChallengedId}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        value={state.challenged_id}\n      />\n    </OverlayTrigger>\n    <Widget\n      src={buttonWidget}\n      props={{\n        onClick: challenge,\n        fontSize: \"1.4rem\",\n        content: \"Challenge!\",\n      }}\n    />\n  </GameCreator>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chess-game.near/widget/ChessGameTab.Challenge", "fact_widget_deployments_id": "8b788652755f0678f803a88a1ea82078", "inserted_timestamp": "2023-10-09T22:46:51.424Z", "modified_timestamp": "2023-10-09T22:46:51.424Z", "__row_index": 1}