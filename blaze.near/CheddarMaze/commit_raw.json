{"tx_hash": "93BpniGCsy5kN1Pxa7SgL7D2XrmMs687zqvHgLKCrGCY", "action_id_social": "Ao9ChALqdDd9YJ8GDYX9TA8aRMioMce81xQRNdiHbUd8-0-widget", "block_id": 117450235, "block_timestamp": "2024-04-23T12:36:55.331Z", "signer_id": "blaze.near", "widget_name": "CheddarMaze", "source_code": "const srcDoc = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>NEAR Mouse Maze Demo</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        .maze {\n            border: 1px solid black;\n            width: 400px;\n            height: 400px;\n            display: grid;\n            grid-template-columns: repeat(10, 1fr);\n        }\n        .maze-cell {\n            border: thin solid black;\n            text-align: center;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .path {\n            background-color: gray;\n        }\n        .active {\n            background-image: url('https://ipfs.near.social/ipfs/bafkreiejk6zjvhxevdatofxpznf4fedluwuavptaryvbixie6bcz4u5goe'); /* Highlight the player's current position */\n        }\n        #score {\n            position: fixed;\n            top: 10px;\n            left: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>NEAR Mouse Maze Demo</h1>\n    <div id=\"score\">Score: 0</div>\n    <div id=\"timer\">Time Left: 2:00</div>\n    <div class=\"maze\" id=\"maze\"></div>\n\n<script>\n    const mazeEl = document.getElementById('maze');\n    const scoreEl = document.getElementById('score');\n    const timerEl = document.getElementById('timer');\n    let score = 0;\n    let playerPosition = { x: 1, y: 1 }; // Starting position of the player\n    let cheeseCooldown = false; // Cooldown for collecting cheese\n    let moves = 0; // Number of moves made by the player\n    let enemyPresent = false; // Flag to track if an enemy is present\n    let gameOverFlag = false; // Flag to indicate if the game is over\n    let timerInterval;\n\n    const mazeData = [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n        [1, 0, 1, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n        [1, 0, 1, 1, 0, 1, 1, 1, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 1, 1, 1, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 0, 0, 0, 1, 0, 1],\n        [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    ];\n\n    function createMaze() {\n        mazeEl.innerHTML = ''; // Clear previous maze state\n        for (let i = 0; i < mazeData.length; i++) {\n            const row = mazeData[i];\n            for (let j = 0; j < row.length; j++) {\n                const cellEl = document.createElement('div');\n                cellEl.classList.add('maze-cell');\n                if (row[j] === 0) {\n                    cellEl.classList.add('path');\n                    cellEl.innerHTML = '\u26ac';\n                }\n                mazeEl.appendChild(cellEl);\n            }\n        }\n        // Randomly set the player position until it's not the last block\n        do {\n            playerPosition.x = Math.floor(Math.random() * (mazeData[0].length - 2)) + 1;\n            playerPosition.y = Math.floor(Math.random() * (mazeData.length - 2)) + 1;\n        } while (mazeData[playerPosition.y][playerPosition.x] === 1 || \n                 (playerPosition.y === mazeData.length - 2 && playerPosition.x === mazeData[0].length - 2));\n        updatePlayerPosition();\n        startTimer();\n    }\n\n    function updatePlayerPosition() {\n        const cells = document.querySelectorAll('.maze-cell');\n        cells.forEach(cell => cell.classList.remove('active'));\n        const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n        cells[index].classList.add('active');\n        encounterEnemy();\n    }\n\nfunction checkForCheese(cell) {\n    if (cell.classList.contains('path') && !cheeseCooldown && !enemyPresent) {\n        score++;\n        scoreEl.textContent = 'Score: ' + score;\n        cell.innerHTML = '\ud83e\uddc0'; // Display cheese emoji\n        cheeseCooldown = true;\n        const cooldownPeriod = Math.floor(Math.random() * 5000) + 1000; // Random cooldown period between 1 to 5 seconds (in milliseconds)\n        setTimeout(() => {\n            cheeseCooldown = false;\n        }, cooldownPeriod);\n    }\n}\n\nfunction triggerCheeseCooldown() {\n    cheeseCooldown = true;\n    setTimeout(() => {\n        cheeseCooldown = false;\n    }, 3000); // Cooldown period of 3 seconds\n}\n\nfunction encounterEnemy() {\n    if (moves >= 10 && !enemyPresent) {\n        const chance = Math.random(); // Random chance of encountering an enemy\n        if (chance < 0.3) { // 30% chance of encounter\n            cells[index].classList.remove('active');\n            const enemyType = Math.random() < 0.5 ? '\ud83d\udc31' : '\ud83d\udc75'; // Randomly choose between cat and old lady\n            const cells = document.querySelectorAll('.maze-cell');\n            const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n            cells[index].innerHTML = enemyType; // Display enemy emoji icon\n            if (Math.random() < 0.5) { // 50% chance of enemy winning\n                gameOver('Enemy won! Game Over!');\n            } else {\n                cells[index].classList.add('active');\n            }\n        } else {\n            enemyPresent = true; // Enemy is present\n            const cells = document.querySelectorAll('.maze-cell');\n            const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n            cells[index].innerHTML = '\ud83e\uddb9\u200d\u2642\ufe0f'; // Emoji icon for enemy\n        }\n    }\n}\n\nfunction checkForEnd() {\n    const totalCells = mazeData.length * mazeData[0].length;\n    const navigatedCells = moves;\n    const percentNavigated = (navigatedCells / totalCells) * 100;\n    if (percentNavigated >= 75 && Math.random() < 0.5) {\n        const cells = document.querySelectorAll('.maze-cell');\n        const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n        cells[index].innerHTML = '\ud83d\udeaa'; // Emoji icon end\n        cells[index].classList.remove('active');\n        gameOver('Congratulations! You reached the end of the maze!');\n    }\n}\n\nfunction startTimer() {\n    let timeLeft = 120; // 2 minutes in seconds\n    timerInterval = setInterval(() => {\n        timeLeft--;\n        const minutes = Math.floor(timeLeft / 60);\n        const seconds = timeLeft % 60;\n        timerEl.textContent = \\`Time Left: ${minutes}:${\n  seconds < 10 ? \"0\" : \"\"\n}${seconds}\\`;\n        if (timeLeft === 0) {\n            clearInterval(timerInterval);\n            gameOver(\"Time's up! Game Over!\");\n        }\n    }, 1000); // Update timer every second\n}\n\nfunction gameOver(message) {\n    const gameOverEl = document.createElement('div');\n    gameOverEl.textContent = message;\n    gameOverEl.style.color = 'red';\n    document.body.appendChild(gameOverEl);\n    document.removeEventListener('keydown', handleKeyDown);\n    gameOverFlag = true; // Set the game over flag\n}\n\nfunction handleKeyDown(event) {\n    if (gameOverFlag) return; // Prevent moving after the game has ended\n    const key = event.key;\n    let newX = playerPosition.x;\n    let newY = playerPosition.y;\n\n    switch (key) {\n        case 'ArrowUp':    newY--; break;\n        case 'ArrowDown':  newY++; break;\n        case 'ArrowLeft':  newX--; break;\n        case 'ArrowRight': newX++; break;\n        default: return;\n    }\n\n    if (newY >= 0 && newY < mazeData.length && newX >= 0 && newX < mazeData[0].length && mazeData[newY][newX] === 0) {\n        moves++; // Increment moves count\n        playerPosition.x = newX;\n        playerPosition.y = newY;\n        updatePlayerPosition();\n        const cellIndex = newY * mazeData[0].length + newX;\n        checkForCheese(document.querySelectorAll('.maze-cell')[cellIndex]);\n        checkForEnd(); // Check for reaching the end after each move\n    }\n}\n\ndocument.addEventListener('keydown', handleKeyDown);\n\ncreateMaze();\n</script>\n\n\n</body>\n</html>`;\n\nreturn <iframe style={{ width: \"100%\", height: \"650px\" }} srcDoc={srcDoc} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/blaze.near/widget/CheddarMaze", "fact_widget_deployments_id": "0a538b7542a25460987f386b758e9c5f", "inserted_timestamp": "2024-04-30T19:47:44.840Z", "modified_timestamp": "2024-04-30T19:47:44.840Z", "__row_index": 8}