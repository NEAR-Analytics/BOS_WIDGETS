{"tx_hash": "6r176maZmbijnVLYrMPYcnnJQQ8iQSWoGAKPMMhEqSTW", "action_id_social": "BYtrZEbrqVHe14sBgSLxoz2f73sHbzoA3tBqcSDcTX7b-0-widget", "block_id": 117458188, "block_timestamp": "2024-04-23T15:23:08.278Z", "signer_id": "blaze.near", "widget_name": "CheddarMaze", "source_code": "const srcDoc = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CheddarMaze\ud83e\uddc0</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        .maze {\n            border: 1px solid black;\n            width: 400px;\n            height: 400px;\n            display: grid;\n            grid-template-columns: repeat(10, 1fr);\n        }\n        .maze-cell {\n            border: thin solid black;\n            text-align: center;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .path {\n            background-color: gray;\n        }\n        .active {\n            background-image: url('https://ipfs.near.social/ipfs/bafkreiejk6zjvhxevdatofxpznf4fedluwuavptaryvbixie6bcz4u5goe'); /* Highlight the player's current position */\n        }\n        #score {\n            position: fixed;\n            top: 10px;\n            left: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Cheddar Maze </h1>\n    <div id=\"score\">Score: 0</div>\n    <div id=\"timer\">Time Left: 2:00</div>\n    <div class=\"maze\" id=\"maze\"></div>\n\n<script>\n    const mazeEl = document.getElementById('maze');\n    const scoreEl = document.getElementById('score');\n    const timerEl = document.getElementById('timer');\n    let score = 0;\n    let playerPosition = { x: 1, y: 1 }; // Starting position of the player\n    let cheeseCooldown = false; // Cooldown for collecting cheese\n    let moves = 0; // Number of moves made by the player\n    let enemyPresent = false; // Flag to track if an enemy is present\n    let gameOverFlag = false; // Flag to indicate if the game is over\n    let timerInterval;\n    const timeLimitInSeconds = 120; // 2 minutes\n\n    function generateMazeData(rows, cols) {\n        const maze = [];\n        for (let i = 0; i < rows; i++) {\n            const row = [];\n            for (let j = 0; j < cols; j++) {\n                row.push(1); // Initially, mark all cells as walls\n            }\n            maze.push(row);\n        }\n        // Start from a random position and carve out the maze\n        let startX = Math.floor(Math.random() * (rows - 2)) + 1;\n        let startY = Math.floor(Math.random() * (cols - 2)) + 1;\n        carveMaze(maze, startX, startY);\n        return maze;\n    }\n\n    function carveMaze(maze, x, y) {\n        maze[y][x] = 0; // Carve the current cell\n        const directions = shuffleDirections();\n        for (const direction of directions) {\n            const newX = x + direction[0];\n            const newY = y + direction[1];\n            if (newX >= 0 && newX < maze[0].length && newY >= 0 && newY < maze.length && maze[newY][newX] === 1) {\n                maze[y + direction[1] / 2][x + direction[0] / 2] = 0; // Carve the wall between the current cell and the neighbor\n                maze[newY][newX] = 0; // Carve the neighbor cell\n                carveMaze(maze, newX, newY); // Recursively carve the neighbor cell\n            }\n        }\n    }\n\n    function shuffleDirections() {\n        const directions = [\n            [-2, 0], // Up\n            [0, 2],  // Right\n            [2, 0],  // Down\n            [0, -2]  // Left\n        ];\n        for (let i = directions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [directions[i], directions[j]] = [directions[j], directions[i]]; // Swap directions randomly\n        }\n        return directions;\n    }\n\n    const mazeRows = 10;\n    const mazeCols = 10;\n    const mazeData = generateMazeData(mazeRows, mazeCols);\n\n    function createMaze() {\n        mazeEl.innerHTML = ''; // Clear previous maze state\n        for (let i = 0; i < mazeData.length; i++) {\n            const row = mazeData[i];\n            for (let j = 0; j < row.length; j++) {\n                const cellEl = document.createElement('div');\n                cellEl.classList.add('maze-cell');\n                if (row[j] === 0) {\n                    cellEl.classList.add('path');\n                    cellEl.innerHTML = '\u26ac';\n                }\n                mazeEl.appendChild(cellEl);\n            }\n        }\n        // Randomly set the player position until it's not the last block\n        do {\n            playerPosition.x = Math.floor(Math.random() * (mazeData[0].length - 2)) + 1;\n            playerPosition.y = Math.floor(Math.random() * (mazeData.length - 2)) + 1;\n        } while (mazeData[playerPosition.y][playerPosition.x] === 1 || \n                 (playerPosition.y === mazeData.length - 2 && playerPosition.x === mazeData[0].length - 2));\n        updatePlayerPosition();\n        startTimer();\n    }\n\n    function updatePlayerPosition() {\n        const cells = document.querySelectorAll('.maze-cell');\n        cells.forEach(cell => cell.classList.remove('active'));\n        const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n        cells[index].classList.add('active');\n        encounterEnemy();\n    }\n\n    function checkForCheese(cell) {\n        if (cell.classList.contains('path') && !cheeseCooldown && !enemyPresent) {\n            score++;\n            scoreEl.textContent = 'Score: ' + score;\n            cell.innerHTML = '\ud83e\uddc0'; // Display cheese emoji\n            cheeseCooldown = true;\n            const cooldownPeriod = Math.floor(Math.random() * 5000) + 1000; // Random cooldown period between 1 to 5 seconds (in milliseconds)\n            setTimeout(() => {\n                cheeseCooldown = false;\n            }, cooldownPeriod);\n        }\n    }\n\n    function triggerCheeseCooldown() {\n        cheeseCooldown = true;\n        setTimeout(() => {\n            cheeseCooldown = false;\n        }, 3000); // Cooldown period of 3 seconds\n    }\n\n    function encounterEnemy() {\n        if (moves >= 10 && !enemyPresent) {\n            const chance = Math.random(); // Random chance of encountering an enemy\n            if (chance < 0.3) { // 30% chance of encounter\n                cells[index].classList.remove('active');\n                const enemyType = Math.random() < 0.5 ? '\ud83d\udc31' : '\ud83d\udc75'; // Randomly choose between cat and old lady\n                const cells = document.querySelectorAll('.maze-cell');\n                const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n                cells[index].innerHTML = enemyType; // Display enemy emoji icon\n                if (Math.random() < 0.5) { // 50% chance of enemy winning\n                    gameOver('Enemy won! Game Over!');\n                } else {\n                    cells[index].classList.add('active');\n                }\n            } else {\n                enemyPresent = true; // Enemy is present\n                const cells = document.querySelectorAll('.maze-cell');\n                const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n                cells[index].innerHTML = '\ud83e\uddb9\u200d\u2642\ufe0f'; // Emoji icon for enemy\n            }\n        }\n    }\n\n    function checkForEnd() {\n        const totalCells = mazeData.length * mazeData[0].length;\n        const navigatedCells = moves;\n        const percentNavigated = (navigatedCells / totalCells) * 100;\n        if (percentNavigated >= 75 && Math.random() < 0.5) {\n            const cells = document.querySelectorAll('.maze-cell');\n            const index = playerPosition.y * mazeData[0].length + playerPosition.x;\n            cells[index].innerHTML = '\ud83d\udeaa'; // Emoji icon end\n            cells[index].classList.remove('active');\n            gameOver('Congratulations! You reached the end of the maze!');\n        }\n    }\n\n\n    function startTimer() {\n    let timeLeft = timeLimitInSeconds; // Time limit in seconds\n    timerInterval = setInterval(() => {\n        timeLeft--;\n        const minutes = Math.floor(timeLeft / 60);\n        const seconds = timeLeft % 60;\n        timerEl.textContent = \\`Time Left: $\\{minutes}:\\${seconds < 10 ? '0' : ''}$\\{seconds}\\`;\n        if (timeLeft === 0) {\n            clearInterval(timerInterval);\n            gameOver(\"Time's up! Game Over!\");\n        }\n    }, 1000); // Update timer every second\n}\n\n    function restartGame() {\n        clearInterval(timerInterval); // Stop the timer interval\n        score = 0;\n        playerPosition = { x: 1, y: 1 };\n        cheeseCooldown = false;\n        moves = 0;\n        enemyPresent = false;\n        gameOverFlag = false;\n        scoreEl.textContent = 'Score: 0';\n        timerEl.textContent = 'Time Left: 2:00';\n        createMaze();\n        document.removeEventListener('keydown', handleKeyDown); // Remove the event listener\n\n        const existingRestartButton = document.getElementById('restart-button');\n        if (existingRestartButton) {\n            existingRestartButton.remove(); // Remove existing restart button if it exists\n        }\n\n        const existingGameOverMessage = document.getElementById('game-over-message');\n        if (existingGameOverMessage) {\n            existingGameOverMessage.remove(); // Remove existing game over message if it exists\n        }\n\n        document.addEventListener('keydown', handleKeyDown); // Reattach the event listener\n    }\n\n    function gameOver(message) {\n        const gameOverEl = document.createElement('div');\n        gameOverEl.textContent = message;\n        gameOverEl.id = 'game-over-message'; // Set a unique ID for the game over message\n        gameOverEl.style.color = 'red';\n        document.body.appendChild(gameOverEl);\n        document.removeEventListener('keydown', handleKeyDown);\n        gameOverFlag = true; // Set the game over flag\n\n        if (timerEl.textContent === 'Time Left: 0:00') {\n            score = 0; // Reset score if time is up\n            scoreEl.textContent = 'Score: 0';\n        }\n\n        const restartButton = document.createElement('button');\n        restartButton.textContent = 'Restart Game';\n        restartButton.id = 'restart-button'; // Set a unique ID for the restart button\n        restartButton.addEventListener('click', restartGame);\n        document.body.appendChild(restartButton);\n    }\n\n    function handleKeyDown(event) {\n        if (gameOverFlag) return; // Prevent moving after the game has ended\n        const key = event.key;\n        let newX = playerPosition.x;\n        let newY = playerPosition.y;\n\n        switch (key) {\n            case 'ArrowUp':    newY--; break;\n            case 'ArrowDown':  newY++; break;\n            case 'ArrowLeft':  newX--; break;\n            case 'ArrowRight': newX++; break;\n            default: return;\n        }\n\n        if (newY >= 0 && newY < mazeData.length && newX >= 0 && newX < mazeData[0].length && mazeData[newY][newX] === 0) {\n            moves++; // Increment moves count\n            playerPosition.x = newX;\n            playerPosition.y = newY;\n            updatePlayerPosition();\n            const cellIndex = newY * mazeData[0].length + newX;\n            checkForCheese(document.querySelectorAll('.maze-cell')[cellIndex]);\n            checkForEnd(); // Check for reaching the end after each move\n        }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    createMaze();\n</script>\n\n<ol>\n<li>click a cell to start</li>\n<li>navigate the maze with keyboard</li>\n<li>get dat cheddar\ud83e\uddc0</li>\n<li>kook out for cats\ud83d\ude3c n old ladies with brooms\ud83d\udc75</li>\n<li>find the hidden door\ud83d\udeaa and win before time is up\u23f0</li>\n</ol>\n\n</body>\n</html>\n`;\n\nreturn <iframe style={{ width: \"100%\", height: \"650px\" }} srcDoc={srcDoc} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/blaze.near/widget/CheddarMaze", "fact_widget_deployments_id": "0141b04824bb8111e449b259feadca93", "inserted_timestamp": "2024-04-23T17:54:15.847Z", "modified_timestamp": "2024-04-23T17:54:15.847Z", "__row_index": 7}