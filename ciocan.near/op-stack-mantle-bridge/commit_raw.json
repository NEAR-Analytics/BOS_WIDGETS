{"tx_hash": "482x9yiQKK1B7UdttMSXUeCehgYpwLMnWzM5EQ2EB753", "action_id_social": "79E9a4pdiL9jTWRZ4seGn6bqNaxebZrx7HLeoxUSp1Y7-0-widget", "block_id": 100953282, "block_timestamp": "2023-09-12T10:38:05.709Z", "signer_id": "ciocan.near", "widget_name": "op-stack-mantle-bridge", "source_code": "const Container = styled.div`\n  display: flex;\n  gap: 8px;\n\n  .side {\n    margin-top: 20px;\n  }\n\n  .w3button button {\n    background-color: #854ce6;\n    color: white;\n    border: none;\n    border-radius: 30px;\n    padding: 12px 15px;\n  }\n`;\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  .title {\n    margin-left: 20px;\n    color: #666;\n  }\n`;\n\nconst { tokens, bridgeAbi } = VM.require(\"ciocan.near/widget/op-stack-module\");\n\nconst l2Network = \"mantle\";\nconst l2TestnetId = 5001;\nconst l2MainnetId = 5000;\nconst l2Networks = {\n  [l2MainnetId]: \"Mantle\",\n  [l2TestnetId]: \"Mantle Testnet\",\n};\nconst l2IconUrl = \"https://token-list.mantle.xyz/data/Mantle/logo.svg\";\n\nState.init({\n  gasLimit: ethers.BigNumber.from(\"300000\"),\n  isToastOpen: false,\n});\n\nconst { chainId, variant, title, description, isToastOpen, gasLimit } = state;\nconst isMainnet = chainId === 1 || chainId === l2MainnetId;\n\nconst onOpenChange = (v) => {\n  State.update({\n    isToastOpen: false,\n  });\n};\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nfunction handleDepositETH(props) {\n  console.log(\"deposit\", props);\n  const { amount, token } = props;\n  const amountBig = ethers.utils.parseUnits(`${amount}`, 18);\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"depositETH(uint32, bytes)\",\n    [200000, 0]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: token.extensions.optimismBridgeAddress,\n      data: encodedData,\n      value: amountBig,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\nfunction handleDepositERC20(props) {\n  console.log(\"handleDepositERC20\", props);\n}\n\nconst onConfirm = (props) => {\n  console.log(\"onConfirm\", props);\n  const { network, token } = props;\n  if (network !== \"ethereum\") return;\n  if (token.symbol === \"ETH\") {\n    handleDepositETH(props);\n  } else {\n    handleDepositERC20(props);\n  }\n};\n\nconst onChangeAmount = (props) => {\n  console.log(\"onChangeAmount\", props);\n};\n\nconst onUpdateToken = (props) => {\n  console.log(\"onUpdateToken\", props);\n};\n\nif (!sender) {\n  return (\n    <Container>\n      <div className=\"w3button\">\n        <Web3Connect connectLabel=\"Connect to a wallet\" />\n      </div>\n    </Container>\n  );\n}\n\nreturn (\n  <Layout>\n    <div class=\"title\">\n      <h5>Mantle Bridge</h5>\n    </div>\n    <Container>\n      <Widget\n        src=\"ciocan.near/widget/op-stack-bridge-ui\"\n        props={{\n          onConfirm,\n          onUpdateToken,\n          onChangeAmount,\n          tokens,\n          l2Network,\n          l2TestnetId,\n          l2MainnetId,\n          l2Networks,\n          l2IconUrl,\n        }}\n      />\n      <Widget\n        src=\"ciocan.near/widget/toast\"\n        props={{ open: isToastOpen, variant, title, description, onOpenChange }}\n      />\n    </Container>\n  </Layout>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/op-stack-mantle-bridge", "fact_widget_deployments_id": "6c55a0bcc185f97fbf92c9ad9ed47214", "inserted_timestamp": "2023-09-12T12:35:33.339Z", "modified_timestamp": "2023-09-12T12:35:33.339Z", "__row_index": 9}