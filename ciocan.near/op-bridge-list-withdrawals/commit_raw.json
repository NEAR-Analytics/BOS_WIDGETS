{"tx_hash": "4ebjFgbCoTXv5te2hWiCrMKVn93WfGyHbqZNP5ko1jmm", "action_id_social": "CvifBFDxtbqbi7RvzTTzCiDzPogAfwC4PDi5dmN411bT-0-widget", "block_id": 99912862, "block_timestamp": "2023-08-29T07:45:30.786Z", "signer_id": "ciocan.near", "widget_name": "op-bridge-list-withdrawals", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst tokens = props.tokens ?? [];\n\nState.init({\n  withdrawals: [],\n});\n\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isTestnet = chainId === 5 || chainId === 420;\nconst isCorrectNetwork = isMainnet || isTestnet;\n\nif (![10, 420].includes(chainId)) {\n  return <h6>Switch to Optimism network to see the deposits list.</h6>;\n}\n\nconst OP_BRIDGE_DEPOSIT_CONTRACT = isTestnet\n  ? \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\"\n  : \"0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1\";\n\nconst OP_BRIDGE_WITHDRAW_CONTRACT = isTestnet\n  ? \"0x4200000000000000000000000000000000000010\"\n  : \"0x4200000000000000000000000000000000000010\";\n\nconst bridgeAbiDeposit = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l1Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l2Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ERC20WithdrawalFinalized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHWithdrawalFinalized\",\n    type: \"event\",\n  },\n];\n\nconst bridgeAbiWithdrawal = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l1Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l2Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"WithdrawalInitiated\",\n    type: \"event\",\n  },\n];\n\nconst bridgeIfaceDeposit = new ethers.utils.Interface(bridgeAbiDeposit);\nconst bridgeContractDeposit = new ethers.Contract(\n  OP_BRIDGE_DEPOSIT_CONTRACT,\n  bridgeAbiDeposit,\n  Ethers.provider().getSigner()\n);\n\nconst bridgeContractWithdrawal = new ethers.Contract(\n  OP_BRIDGE_WITHDRAW_CONTRACT,\n  bridgeAbiWithdrawal,\n  Ethers.provider().getSigner()\n);\n\nfunction getETHWithdrawals() {\n  // console.log(\"getETHWithdrawals\");\n  const withdrawals = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      // console.log(\"done\");\n      State.update({\n        withdrawals,\n      });\n    }\n  }\n\n  // bridgeContractDeposit\n  //   .queryFilter(bridgeContractDeposit.filters.ETHWithdrawalFinalized(sender))\n  //   .then((events) => {\n  //     console.log(\"finalized\", events);\n  //   });\n\n  bridgeContractWithdrawal\n    .queryFilter(\n      bridgeContractWithdrawal.filters.WithdrawalInitiated(\n        undefined,\n        undefined,\n        sender\n      )\n    )\n    .then((events) => {\n      console.log(\"WithdrawalInitiated\", events);\n      totalOperations = events.length * 1; // async operations for each event\n\n      events\n        .sort((a, b) => b.blockNumber - a.blockNumber)\n        .forEach((event) => {\n          const { args, logIndex, blockNumber, transactionHash } = event;\n          const [l1token, l2token, from, to, amount, extraData] = args;\n          // console.log(transactionHash, event);\n          const token = tokens.find((t) => t.address === l1token);\n\n          withdrawals.set(transactionHash, {\n            l1token,\n            l2token,\n            // from,\n            // to,\n            symbol: token?.symbol ?? \"????\",\n            amount: ethers.utils.formatUnits(amount, token?.decimals || 18),\n            extraData,\n            logIndex,\n            blockNumber,\n            transactionHash,\n          });\n\n          event.getBlock().then((block) => {\n            // console.log(transactionHash, \"block\", block);\n            const { timestamp } = block;\n            withdrawals.set(transactionHash, {\n              ...withdrawals.get(transactionHash),\n              timestamp,\n            });\n            completedOperations++;\n            checkAllOperationsComplete();\n          });\n\n          event.getTransactionReceipt().then((receipt) => {\n            console.log(\"receipt\", receipt);\n            const abi = [\n              \"event Transfer (address indexed from, address indexed to, uint256 value)\",\n              \"event Burn (address indexed _account, uint256 _amount)\",\n              \"event SentMessage (address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)\",\n              \"event WithdrawalInitiated (address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)\",\n            ];\n            const iface = new ethers.utils.Interface(abi);\n            Ethers.provider()\n              .getTransactionReceipt(receipt.transactionHash)\n              .then((l2Rcpt) => {\n                const logEvents = l2Rcpt.logs\n                  .map((x) => {\n                    try {\n                      const res = iface.parseLog(x);\n                      res.address = x.address;\n                      return res;\n                    } catch (e) {}\n                  })\n                  .filter((e) => e != undefined);\n                console.log(\"logEvents\", logEvents);\n              });\n          });\n        });\n    });\n}\n\ngetETHWithdrawals();\n\nfunction renderWithdrawal([_, withdrawal]) {\n  // console.log(\"withdraw\", withdrawal);\n  const { timestamp, amount, transactionHash, symbol } = withdrawal;\n  const date = new Date(timestamp * 1000);\n  const href = `https://${\n    isTestnet ? \"goerli-optimism.etherscan.io\" : \"optimistic.etherscan.io\"\n  }/tx/${transactionHash}`;\n  const hash = `${transactionHash.substr(0, 6)}...${transactionHash.substr(\n    -4\n  )}`;\n  return (\n    <tr>\n      <td>{date.toUTCString()}</td>\n      <td>{amount}</td>\n      <td>{symbol}</td>\n      <td>\n        <a href={href} target=\"_blank\">\n          {hash}\n        </a>\n      </td>\n      <td>status</td>\n      <td>\n        <button>action</button>\n      </td>\n    </tr>\n  );\n}\n\nreturn (\n  <table>\n    <thead>\n      <tr>\n        <th>Time</th>\n        <th>Amount</th>\n        <th>Token</th>\n        <th>Transaction</th>\n        <th>Status</th>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>{[...state.withdrawals].map(renderWithdrawal)}</tbody>\n  </table>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/op-bridge-list-withdrawals", "fact_widget_deployments_id": "66b38a5fdf9f5e4f7772a538de8e0431", "inserted_timestamp": "2023-08-29T09:22:41.003Z", "modified_timestamp": "2023-08-29T09:22:41.003Z", "__row_index": 2}