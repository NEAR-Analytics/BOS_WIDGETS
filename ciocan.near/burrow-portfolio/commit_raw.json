{"tx_hash": "BtETzKyoV9iMtw49g8e1i8Ht85QEmV6AHXLtnrnSeZL4", "action_id_social": "2EGMG9UmroB1opsJ3fQ3uUcYSjrGsPjunQFu2JyfL2kY-0-widget", "block_id": 85361171, "block_timestamp": "2023-02-16T15:43:04.279Z", "signer_id": "ciocan.near", "widget_name": "burrow-portfolio", "source_code": "let accountId = context.accountId;\n\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\n\nconst toAPY = (v) => Math.round(v * 100) / 100;\n\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals)).toFixed(fixed);\n};\n\nconst { assets, rewards, account } = state;\n\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\n\nconst onLoad = (data) => {\n  State.update(data);\n};\n\nconst suppliedAssets = hasData\n  ? account.supplied.map((suppliedAsset) => {\n      const asset = assets.find((a) => a.token_id === suppliedAsset.token_id);\n      const r = rewards.find((a) => a.token_id === asset.token_id);\n      const totalApy = r.apyBase + r.apyRewardTvl + r.apyReward;\n\n      const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n      const deposited = Number(shrinkToken(suppliedAsset.balance, decimals));\n      const usd = (deposited * asset.price.usd).toFixed(2);\n\n      return (\n        <tr>\n          <td>{asset.metadata.symbol}</td>\n          <td class=\"text-end\">{toAPY(totalApy)}%</td>\n          <td class=\"text-end\">{deposited.toFixed(6)}</td>\n          <td class=\"text-end\">${usd}</td>\n        </tr>\n      );\n    })\n  : undefined;\n\nconst borrowedAssets = hasData\n  ? account.borrowed.map((borrowedAsset) => {\n      const asset = assets.find((a) => a.token_id === borrowedAsset.token_id);\n      const r = rewards.find((a) => a.token_id === asset.token_id);\n      const totalApy = r.apyBase + r.apyRewardTvl + r.apyReward;\n\n      const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n      const borrowed = Number(shrinkToken(borrowedAsset.balance, decimals));\n      const usd = (borrowed * asset.price.usd).toFixed(2);\n\n      return (\n        <tr>\n          <td>{asset.metadata.symbol}</td>\n          <td class=\"text-end\">{toAPY(totalApy)}%</td>\n          <td class=\"text-end\">{borrowed.toFixed(6)}</td>\n          <td class=\"text-end\">${usd}</td>\n        </tr>\n      );\n    })\n  : undefined;\n\nreturn (\n  <div>\n    {!hasData && (\n      <Widget src=\"ciocan.near/widget/burrow-data\" props={{ onLoad }} />\n    )}\n    <table class=\"table\">\n      <thead>\n        <tr\n          style={{\n            color: \"rgba(0, 0, 0, 0.4)\",\n          }}\n        >\n          <th scope=\"col\">Deposited Assets</th>\n          <th scope=\"col\" class=\"text-end\">\n            APY\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            Deposited\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            $\n          </th>\n        </tr>\n      </thead>\n      <tbody>{suppliedAssets}</tbody>\n    </table>\n\n    <table class=\"table\">\n      <thead>\n        <tr\n          style={{\n            color: \"rgba(0, 0, 0, 0.4)\",\n          }}\n        >\n          <th scope=\"col\">Borrowed Assets</th>\n          <th scope=\"col\" class=\"text-end\">\n            APY\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            Deposited\n          </th>\n          <th scope=\"col\" class=\"text-end\">\n            $\n          </th>\n        </tr>\n      </thead>\n      <tbody>{borrowedAssets}</tbody>\n    </table>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/burrow-portfolio", "fact_widget_deployments_id": "300d24d2a4860e81df29a62dcae169ea", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 3}