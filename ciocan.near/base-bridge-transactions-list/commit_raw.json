{"tx_hash": "HHjdvK4zmG6KfTVxWNfjAsEsp3oRCtDPvQ5tio3N7vQC", "action_id_social": "D7HaLM4muNTiP3Nz3hzDnTnnzuVNogRwwiQgGuKQ5AhL-0-widget", "block_id": 100871570, "block_timestamp": "2023-09-11T08:36:23.057Z", "signer_id": "ciocan.near", "widget_name": "base-bridge-transactions-list", "source_code": "const tokens = [\n  // eth testnet assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 5,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n  {\n    address: \"0x07865c6E87B9F70255377e024ace6630C1Eaa37F\",\n    chainId: 5,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png\",\n  },\n  // eth mainnet assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 1,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n  {\n    address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    chainId: 1,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png\",\n  },\n];\n\nconst Container = styled.div`\n    --op-primary-600: #EB0822;\n\n    td, th {\n        padding: 2px 5px;\n        font-size: 12px;\n    }\n    button,\n    fieldset,\n    input {\n        all: unset;\n    }\n\n    .TabsRoot {\n        display: flex;\n        flex-direction: column;\n        max-width: 640px;\n    }\n\n    .TabsList {\n        flex-shrink: 0;\n        display: flex;\n        border-bottom: 1px solid var(--mauve-6);\n    }\n\n    .TabsTrigger {\n        font-family: inherit;\n        background-color: white;\n        padding: 0 20px;\n        height: 45px;\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 15px;\n        line-height: 1;\n        user-select: none;\n    }\n    .TabsTrigger:first-child {\n        border-top-left-radius: 6px;\n    }\n    .TabsTrigger:last-child {\n        border-top-right-radius: 6px;\n    }\n    .TabsTrigger[data-state='active'] {\n        box-shadow: inset 0 -1px 0 0 var(--op-primary-600), 0 1px 0 0 var(--op-primary-600);\n    }\n\n    .TabsContent {\n        flex-grow: 1;\n        padding: 20px;\n        background-color: white;\n        border-bottom-left-radius: 6px;\n        border-bottom-right-radius: 6px;\n        outline: none;\n    }\n`;\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nState.init({\n  ethdeposits: [],\n  ercdeposits: [],\n  withdrawals: [],\n});\n\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst isMainnet = chainId === 1 || chainId === 8453;\nconst isTestnet = chainId === 5 || chainId === 84531;\nconst isCorrectNetwork = isMainnet || isTestnet;\nconst isEthNetwork = [1, 5].includes(chainId);\nconst isBaseNetwork = [8453, 84531].includes(chainId);\n\nconst BASE_BRIDGE_DEPOSIT_CONTRACT = isTestnet\n  ? //\n    \"0xfA6D8Ee5BE770F84FC001D098C4bD604Fe01284a\"\n  : // \"0xe93c8cD0D409341205A592f8c4Ac1A5fe5585cfA\"\n    \"0x3154Cf16ccdb4C6d922629664174b904d80F2C35\";\n\nconst BASE_BRIDGE_WITHDRAW_CONTRACT = isTestnet\n  ? \"0x4200000000000000000000000000000000000010\"\n  : \"0x4200000000000000000000000000000000000010\";\n\nconst bridgeAbiDeposit = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l1Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_l2Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"_minGasLimit\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"depositERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHDepositInitiated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l1Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l2Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ERC20DepositInitiated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l1Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l2Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ERC20WithdrawalFinalized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHWithdrawalFinalized\",\n    type: \"event\",\n  },\n];\n\nconst bridgeAbiWithdrawal = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l1Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"l2Token\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"WithdrawalInitiated\",\n    type: \"event\",\n  },\n];\n\nconst bridgeIface = new ethers.utils.Interface(bridgeAbiDeposit);\nconst bridgeContract = new ethers.Contract(\n  BASE_BRIDGE_DEPOSIT_CONTRACT,\n  bridgeAbiDeposit,\n  Ethers.provider().getSigner()\n);\n\nfunction getETHDeposits() {\n  console.log(\"getETHDeposits\");\n  const deposits = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      console.log(\"done\");\n      State.update({\n        ethdeposits: [...deposits].map(([transactionHash, data]) => ({\n          ...data,\n          transactionHash,\n        })),\n      });\n    }\n  }\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ETHDepositInitiated(sender))\n    .then((events) => {\n      // console.log(events);\n      totalOperations = events.length * 3; // Three async operations for each event\n\n      events.forEach((ev) => {\n        const { blockNumber, transactionHash } = ev;\n        deposits.set(transactionHash, { blockNumber, symbol: \"ETH\" });\n\n        ev.getTransaction().then((tx) => {\n          const { value, hash } = tx;\n          // console.log(\"tx\", tx);\n          const amount = ethers.utils.formatUnits(value, 18);\n          deposits.set(hash, {\n            ...deposits.get(hash),\n            amount,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getTransactionReceipt().then((tx) => {\n          // console.log(\"txr\", tx);\n          const { status, type, transactionHash } = tx;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            status,\n            type,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getBlock().then((block) => {\n          // console.log(transactionHash, \"block\", block);\n          const { timestamp } = block;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            timestamp,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n      });\n    });\n}\n\nfunction getERC20Deposits() {\n  console.log(\"getERC20Deposits\");\n  const deposits = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      console.log(\"done\");\n      State.update({\n        ercdeposits: [...deposits].map(([transactionHash, data]) => ({\n          ...data,\n          transactionHash,\n        })),\n      });\n    }\n  }\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ERC20DepositInitiated(_, _, sender))\n    .then((events) => {\n      // console.log(events);\n      totalOperations = events.length * 3; // Three async operations for each event\n\n      events.forEach((ev) => {\n        const { blockNumber, transactionHash } = ev;\n        deposits.set(transactionHash, { blockNumber });\n\n        ev.getTransaction().then((tx) => {\n          // console.log(\"tx\", tx);\n          const { hash, data } = tx;\n          const decodedData = bridgeIface.parseTransaction({ data });\n          const [l1Token, l2Token, value] = decodedData.args;\n          const token = tokens.find((t) => t.address === l1Token);\n          const amount = ethers.utils.formatUnits(value, token?.decimals || 6);\n          deposits.set(hash, {\n            ...deposits.get(hash),\n            amount,\n            symbol: token?.symbol || \"???\",\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getTransactionReceipt().then((tx) => {\n          // console.log(\"txr\", tx);\n          const { status, type, transactionHash } = tx;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            status,\n            type,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getBlock().then((block) => {\n          // console.log(transactionHash, \"block\", block);\n          const { timestamp } = block;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            timestamp,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n      });\n    });\n}\n\ngetETHDeposits();\ngetERC20Deposits();\n\nfunction renderDeposit(deposit) {\n  //   console.log(\"deposit\", deposit);\n  const { timestamp, amount, transactionHash, symbol } = deposit;\n  const date = new Date(timestamp * 1000);\n  const href = `https://${\n    isTestnet ? \"goerli.\" : \"\"\n  }etherscan.io/tx/${transactionHash}`;\n  const hash = `${transactionHash.substr(0, 6)}...${transactionHash.substr(\n    -4\n  )}`;\n  return (\n    <tr>\n      <td>{date.toUTCString()}</td>\n      <td>{amount}</td>\n      <td>{symbol}</td>\n      <td>\n        <a href={href} target=\"_blank\">\n          {hash}\n        </a>\n      </td>\n    </tr>\n  );\n}\n\nconst { ethdeposits, ercdeposits } = state;\nconst deposits = [...ethdeposits, ...ercdeposits].sort(\n  (a, b) => b.timestamp - a.timestamp\n);\n\nconst bridgeContractWithdrawal = new ethers.Contract(\n  BASE_BRIDGE_WITHDRAW_CONTRACT,\n  bridgeAbiWithdrawal,\n  Ethers.provider().getSigner()\n);\n\nfunction getETHWithdrawals() {\n  // console.log(\"getETHWithdrawals\");\n  const withdrawals = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      // console.log(\"done\");\n      State.update({\n        withdrawals,\n      });\n    }\n  }\n\n  bridgeContractWithdrawal\n    .queryFilter(\n      bridgeContractWithdrawal.filters.WithdrawalInitiated(\n        undefined,\n        undefined,\n        sender\n      )\n    )\n    .then((events) => {\n      console.log(\"WithdrawalInitiated\", events);\n      totalOperations = events.length * 1; // Three async operations for each event\n\n      events\n        .sort((a, b) => b.blockNumber - a.blockNumber)\n        .forEach((event) => {\n          const { args, logIndex, blockNumber, transactionHash } = event;\n          const [l1token, l2token, from, to, amount, extraData] = args;\n          // console.log(transactionHash, event);\n          const token = tokens.find((t) => t.address === l1token);\n\n          withdrawals.set(transactionHash, {\n            l1token,\n            l2token,\n            // from,\n            // to,\n            symbol: token?.symbol ?? \"????\",\n            amount: ethers.utils.formatUnits(amount, token?.decimals || 18),\n            extraData,\n            logIndex,\n            blockNumber,\n            transactionHash,\n          });\n\n          event.getBlock().then((block) => {\n            // console.log(transactionHash, \"block\", block);\n            const { timestamp } = block;\n            withdrawals.set(transactionHash, {\n              ...withdrawals.get(transactionHash),\n              timestamp,\n            });\n            completedOperations++;\n            checkAllOperationsComplete();\n          });\n        });\n    });\n}\n\ngetETHWithdrawals();\n\nfunction renderWithdrawal([_, withdrawal]) {\n  // console.log(\"withdraw\", withdrawal);\n  const { timestamp, amount, transactionHash, symbol } = withdrawal;\n  const date = new Date(timestamp * 1000);\n  const href = `https://${\n    isTestnet ? \"goerli-optimism.etherscan.io\" : \"optimistic.etherscan.io\"\n  }/tx/${transactionHash}`;\n  const hash = `${transactionHash.substr(0, 6)}...${transactionHash.substr(\n    -4\n  )}`;\n  return (\n    <tr>\n      <td>{date.toUTCString()}</td>\n      <td>{amount}</td>\n      <td>{symbol}</td>\n      <td>\n        <a href={href} target=\"_blank\">\n          {hash}\n        </a>\n      </td>\n      <td>status</td>\n      <td>\n        <button>action</button>\n      </td>\n    </tr>\n  );\n}\n\nreturn (\n  <Container>\n    <Tabs.Root className=\"TabsRoot\" defaultValue=\"deposits\">\n      <Tabs.List className=\"TabsList\" aria-label=\"Transactions List\">\n        <Tabs.Trigger className=\"TabsTrigger\" value=\"deposits\">\n          Deposits\n        </Tabs.Trigger>\n        <Tabs.Trigger className=\"TabsTrigger\" value=\"withdrawals\">\n          Withdrawals\n        </Tabs.Trigger>\n      </Tabs.List>\n      <Tabs.Content className=\"TabsContent\" value=\"deposits\">\n        {!isEthNetwork ? (\n          <h6>Switch to Ethereum network to see the deposits list.</h6>\n        ) : (\n          <>\n            <table>\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>Amount</th>\n                  <th>Token</th>\n                  <th>Transaction</th>\n                </tr>\n              </thead>\n              <tbody>{deposits.map(renderDeposit)}</tbody>\n            </table>\n          </>\n        )}\n      </Tabs.Content>\n      <Tabs.Content className=\"TabsContent\" value=\"withdrawals\">\n        {!isBaseNetwork ? (\n          <h6>Switch to BASE network to see the withdrawal list.</h6>\n        ) : (\n          <>\n            <table>\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>Amount</th>\n                  <th>Token</th>\n                  <th>Transaction</th>\n                  <th>Status</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>{[...state.withdrawals].map(renderWithdrawal)}</tbody>\n            </table>\n          </>\n        )}\n      </Tabs.Content>\n    </Tabs.Root>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/base-bridge-transactions-list", "fact_widget_deployments_id": "dd66bcbe448ac6c89a78c7fb1bdfce10", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}