{"tx_hash": "ASdF1ewQWU6L5h6cvTYCz1NmFYyAD2YnpbBEoCaUMxRj", "action_id_social": "2ZuccQPJGVn8xdGxajgb9xRch7MqEgXqVkKnbF8tFbFj-0-widget", "block_id": 98295085, "block_timestamp": "2023-08-07T19:41:50.743Z", "signer_id": "ciocan.near", "widget_name": "op-bridge-demo", "source_code": "// for goerli\nconst OP_BRIDGE_DEPOSIT_CONTRACT = \"0x636Af16bf2f682dD3109e60102b8E1A089FedAa8\";\nconst OP_BRIDGE_WITHDRAW_CONTRACT =\n  \"0x4200000000000000000000000000000000000010\";\nconst ETH_ADDR = \"0x0000000000000000000000000000000000000000\";\n\nconst provider = Ethers.provider();\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst isMainnet = chainId === 1 || chainId === 10;\nconst isTestnet = chainId === 5 || chainId === 420;\nconst isCorrectNetwork = isMainnet || isTestnet;\n\nconsole.log(\"isCorrectNetwork\", isCorrectNetwork);\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      { internalType: \"uint32\", name: \"_l2Gas\", type: \"uint32\" },\n      { internalType: \"bytes\", name: \"_data\", type: \"bytes\" },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ETHDepositInitiated\",\n    type: \"event\",\n  },\n];\n\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nfunction getDeposits() {\n  console.log(\"getDeposits\");\n  const bridgeContract = new ethers.Contract(\n    OP_BRIDGE_DEPOSIT_CONTRACT,\n    bridgeAbi,\n    Ethers.provider().getSigner()\n  );\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ETHDepositInitiated(sender))\n    .then((events) => {\n      console.log(events);\n    });\n}\n\ngetDeposits();\n\nfunction handleDepositETH() {\n  console.log(\"deposit\", isTestnet);\n  if (!isCorrectNetwork) return;\n  if (!isTestnet) return;\n\n  const amountBig = ethers.utils.parseUnits(\"0.05\", 18);\n\n  const encodedData = bridgeIface.encodeFunctionData(\n    \"depositETH(uint32, bytes)\",\n    [200000, 0]\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .sendTransaction({\n      to: OP_BRIDGE_DEPOSIT_CONTRACT,\n      data: encodedData,\n      value: amountBig,\n      gasLimit,\n    })\n    .then((tx) => {\n      consle.log(\"tx:\", tx);\n    })\n    .catch((e) => {\n      console.log(\"bridge error:\", e);\n    });\n}\n\nfunction handleWithdraw() {\n  console.log(\"withdraw\");\n  if (!isCorrectNetwork) return;\n  if (!isTestnet) return;\n}\n\nif (!sender) {\n  return (\n    <div className=\"w3button\">\n      <Web3Connect connectLabel=\"Connect to a wallet\" />\n    </div>\n  );\n}\n\nreturn (\n  <div>\n    <button onClick={handleDepositETH}>Deposit 0.05 ETH to L2</button>\n    <button onClick={handleWithdraw}>Withdraw 0.05 ETH</button>\n  </div>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/op-bridge-demo", "fact_widget_deployments_id": "e10b81604e7c0c959b369b60e9c87784", "inserted_timestamp": "2023-08-07T20:42:53.979Z", "modified_timestamp": "2023-08-07T20:42:53.979Z", "__row_index": 4}