{"tx_hash": "6PPoDPv7Cdr24oCaxKUfhrRVJjM1Ak2tirqA6eEmb1o2", "action_id_social": "7mrYDp1oqyPe8JQ7mfrTCDMzDMUU1St6ESfgGwNd4cMQ-0-widget", "block_id": 101405548, "block_timestamp": "2023-09-18T13:56:31.373Z", "signer_id": "ciocan.near", "widget_name": "op-stack-list-deposits", "source_code": "const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst { tokens, ethAbi, erc20Abi } = VM.require(\n  \"ciocan.near/widget/op-stack-module\"\n);\n\nState.init({\n  ethdeposits: [],\n  ercdeposits: [],\n});\n\nconst { chainId } = state;\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst {\n  opTestnetChainId,\n  opMainnetChainId,\n  opTestnetBridgeAddress,\n  opMainnetBridgeAddress,\n} = props;\n\nconst isTestnet = chainId === 5 || chainId === opTestnetChainId;\n\nif (![1, 5].includes(chainId)) {\n  return <h6>Switch to Ethereum network to see the deposits list.</h6>;\n}\n\nconst OP_BRIDGE_DEPOSIT_CONTRACT = isTestnet\n  ? opTestnetBridgeAddress ?? \"0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330\"\n  : opMainnetBridgeAddress ?? \"0x95fC37A27a2f68e3A647CDc081F0A89bb47c3012\";\n\nconst bridgeAbi = [...ethAbi, ...erc20Abi];\n\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\nconst bridgeContract = new ethers.Contract(\n  OP_BRIDGE_DEPOSIT_CONTRACT,\n  bridgeAbi,\n  Ethers.provider().getSigner()\n);\n\nfunction getETHDeposits() {\n  // console.log(\"getETHDeposits\");\n  const deposits = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      console.log(\"done\");\n      State.update({\n        ethdeposits: [...deposits].map(([transactionHash, data]) => ({\n          ...data,\n          transactionHash,\n        })),\n      });\n    }\n  }\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ETHDepositInitiated(sender))\n    .then((events) => {\n      // console.log(events);\n      totalOperations = events.length * 3; // Three async operations for each event\n\n      events.forEach((ev) => {\n        const { blockNumber, transactionHash } = ev;\n        deposits.set(transactionHash, { blockNumber, symbol: \"ETH\" });\n\n        ev.getTransaction().then((tx) => {\n          const { value, hash } = tx;\n          // console.log(\"tx\", tx);\n          const amount = ethers.utils.formatUnits(value, 18);\n          deposits.set(hash, {\n            ...deposits.get(hash),\n            amount,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getTransactionReceipt().then((tx) => {\n          // console.log(\"txr\", tx);\n          const { status, type, transactionHash } = tx;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            status,\n            type,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getBlock().then((block) => {\n          // console.log(transactionHash, \"block\", block);\n          const { timestamp } = block;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            timestamp,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n      });\n    });\n}\n\nfunction getERC20Deposits() {\n  console.log(\"getERC20Deposits\");\n  const deposits = new Map();\n  let completedOperations = 0;\n  let totalOperations = 0;\n\n  function checkAllOperationsComplete() {\n    if (completedOperations === totalOperations) {\n      console.log(\"done\");\n      State.update({\n        ercdeposits: [...deposits].map(([transactionHash, data]) => ({\n          ...data,\n          transactionHash,\n        })),\n      });\n    }\n  }\n\n  bridgeContract\n    .queryFilter(bridgeContract.filters.ERC20DepositInitiated(_, _, sender))\n    .then((events) => {\n      // console.log(events);\n      totalOperations = events.length * 3; // Three async operations for each event\n\n      events.forEach((ev) => {\n        const { blockNumber, transactionHash } = ev;\n        deposits.set(transactionHash, { blockNumber });\n\n        ev.getTransaction().then((tx) => {\n          // console.log(\"tx\", tx);\n          const { hash, data } = tx;\n          const decodedData = bridgeIface.parseTransaction({ data });\n          const [l1Token, l2Token, value] = decodedData.args;\n          const token = tokens.find((t) => t.address === l1Token);\n          const amount = ethers.utils.formatUnits(value, token?.decimals || 6);\n          deposits.set(hash, {\n            ...deposits.get(hash),\n            amount,\n            symbol: token?.symbol || \"???\",\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getTransactionReceipt().then((tx) => {\n          // console.log(\"txr\", tx);\n          const { status, type, transactionHash } = tx;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            status,\n            type,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n        ev.getBlock().then((block) => {\n          // console.log(transactionHash, \"block\", block);\n          const { timestamp } = block;\n          deposits.set(transactionHash, {\n            ...deposits.get(transactionHash),\n            timestamp,\n          });\n          completedOperations++;\n          checkAllOperationsComplete();\n        });\n      });\n    });\n}\n\ngetETHDeposits();\ngetERC20Deposits();\n\nfunction renderDeposit(deposit) {\n  //   console.log(\"deposit\", deposit);\n  const { timestamp, amount, transactionHash, symbol } = deposit;\n  const date = new Date(timestamp * 1000);\n  const href = `https://${\n    isTestnet ? \"goerli.\" : \"\"\n  }etherscan.io/tx/${transactionHash}`;\n  const hash = `${transactionHash.substr(0, 6)}...${transactionHash.substr(\n    -4\n  )}`;\n\n  return (\n    <tr>\n      <td>{date.toLocaleString()}</td>\n      <td>{amount}</td>\n      <td>{symbol}</td>\n      <td>\n        <a href={href} target=\"_blank\">\n          {hash}\n        </a>\n      </td>\n    </tr>\n  );\n}\n\nconst { ethdeposits, ercdeposits } = state;\nconst deposits = [...ethdeposits, ...ercdeposits].sort(\n  (a, b) => b.timestamp - a.timestamp\n);\n\nreturn (\n  <table>\n    <thead>\n      <tr>\n        <th>Date</th>\n        <th>Amount</th>\n        <th>Token</th>\n        <th>Transaction</th>\n      </tr>\n    </thead>\n    <tbody>{deposits.map(renderDeposit)}</tbody>\n  </table>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ciocan.near/widget/op-stack-list-deposits", "fact_widget_deployments_id": "23e095081a8b4774c380c84ab2c849bf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}