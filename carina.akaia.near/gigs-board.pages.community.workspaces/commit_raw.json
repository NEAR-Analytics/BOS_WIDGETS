{"tx_hash": "8y6Dm7LvkcxofL6rrufZuZRS8qs1SCDUr7PKEEoVasWo", "action_id_social": "FanrK1DzitybxvbSXYDphHyPgZVATZJjmGavswaAspjn-0-widget", "block_id": 98750627, "block_timestamp": "2023-08-14T01:24:36.077Z", "signer_id": "carina.akaia.near", "widget_name": "gigs-board.pages.community.workspaces", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  edit_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"edit_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  edit_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"edit_community_board\", { handle, board }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst Viewer = {\n  can: {\n    editCommunity: (communityData) =>\n      Struct.typeMatch(communityData) &&\n      (communityData.admins.includes(context.accountId) ||\n        Viewer.role.isDevHubModerator),\n  },\n\n  communityPermissions: ({ handle }) =>\n    DevHub.useQuery(\"account_community_permissions\", {\n      account_id: context.account_id,\n      community_handle: handle,\n    }).data ?? {\n      can_configure: false,\n      can_delete: false,\n    },\n\n  role: {\n    isDevHubModerator:\n      DevHub.has_moderator({ account_id: context.accountId }) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst workspaceSchema = {\n  name: {\n    inputProps: {\n      min: 2,\n      max: 30,\n      placeholder: \"Workspace name\",\n      required: true,\n    },\n\n    label: \"Name\",\n    order: 1,\n  },\n\n  description: {\n    label: \"Description\",\n    order: 2,\n\n    inputProps: {\n      min: 2,\n      max: 60,\n      placeholder: \"A short sentence describing the purpose of this workspace\",\n      required: true,\n    },\n  },\n};\n\nconst CommunityWorkspacesPage = ({ handle }) => {\n  State.init({\n    isNewWorkspaceFormDisplayed: false,\n  });\n\n  const isToolbarHidden = state.isNewWorkspaceFormDisplayed;\n\n  const community = DevHub.useQuery({ name: \"community\", params: { handle } });\n\n  const workspacesMetadata = DevHub.useQuery({\n    name: \"community_workspaces_metadata\",\n    params: { community_handle: handle },\n  });\n\n  const onNewWorkspaceSubmit = ({ name, description }) =>\n    typeof name === \"string\" && typeof description === \"string\"\n      ? DevHub.create_workspace({\n          author_community_handle: handle,\n          metadata: { name, description },\n        })\n      : null;\n\n  return workspacesMetadata.data === null && workspacesMetadata.isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    widget(\"entity.community.layout\", {\n      handle,\n      path: [{ label: \"Communities\", pageId: \"communities\" }],\n      title: \"Workspaces\",\n\n      children: (\n        <div className=\"d-flex flex-column gap-4\">\n          {!isToolbarHidden ? (\n            <div className=\"d-flex justify-content-end gap-3\">\n              {Viewer.communityPermissions({ handle }).can_configure\n                ? widget(\"components.atom.button\", {\n                    classNames: { adornment: \"bi bi-tools\" },\n                    label: \"New workspace\",\n\n                    onClick: () =>\n                      State.update({ isNewWorkspaceFormDisplayed: true }),\n                  })\n                : null}\n            </div>\n          ) : null}\n\n          {state.isNewWorkspaceFormDisplayed &&\n            widget(\"components.organism.configurator\", {\n              fullWidth: true,\n              heading: \"New workspace\",\n              isActive: true,\n\n              isUnlocked: Viewer.communityPermissions({ handle }).can_configure,\n\n              onCancel: () =>\n                State.update({ isNewWorkspaceFormDisplayed: false }),\n\n              onChangesSubmit: onNewWorkspaceSubmit,\n              submitLabel: \"Create\",\n              schema: workspaceSchema,\n            })}\n\n          {workspacesMetadata.data === null ? (\n            <div\n              className=\"d-flex flex-column align-items-center justify-content-center gap-4\"\n              style={{ height: 384 }}\n            >\n              <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n                This community doesn't own any workspaces\n              </h5>\n            </div>\n          ) : (\n            <div className=\"d-flex flex-wrap gap-4 w-100 h-100\">\n              {workspacesMetadata.data.map((metadata) =>\n                widget(\n                  \"entity.workspace.card\",\n\n                  {\n                    link: href(\"workspace\", { id: metadata.id, dir: handle }),\n                    metadata,\n                  },\n\n                  metadata.id\n                )\n              )}\n            </div>\n          )}\n        </div>\n      ),\n    })\n  );\n};\n\nreturn CommunityWorkspacesPage(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/carina.akaia.near/widget/gigs-board.pages.community.workspaces", "fact_widget_deployments_id": "f831ea850c554b940286b0d9160cb946", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}