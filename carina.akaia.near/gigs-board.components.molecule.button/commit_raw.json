{"tx_hash": "68eVG4Q5JTtEt7kn1E562zE1ohd3eGCR2E7MWXZ3vyEx", "action_id_social": "2mWFPtibwywMT2sJJJWMMbUdoEMYjbyEB2yAQ73CsBC6-0-widget", "block_id": 101090692, "block_timestamp": "2023-09-14T07:01:52.675Z", "signer_id": "carina.akaia.near", "widget_name": "gigs-board.components.molecule.button", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n\nconst styles = `\n  padding: 0.5rem 1.2rem !important;\n  min-height: 42;\n  line-height: 1.5;\n  text-decoration: none !important;\n\n  &:not(.shadow-none) {\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n    transition: box-shadow 0.6s;\n  }\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n\n  &.btn-sm {\n    padding: 0.4rem 1rem !important;\n    min-height: 32;\n    line-height: 1;\n  }\n\n  &.btn-lg {\n    padding: 1rem 1.5rem !important;\n    min-height: 48;\n  }\n\n  &.btn-primary {\n    border: none;\n    --bs-btn-color: #ffffff;\n    --bs-btn-bg: #087990;\n    --bs-btn-border-color: #087990;\n    --bs-btn-hover-color: #ffffff;\n    --bs-btn-hover-bg: #055160;\n    --bs-btn-hover-border-color: #055160;\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\n    --bs-btn-active-color: #ffffff;\n    --bs-btn-active-bg: #055160;\n    --bs-btn-active-border-color: #055160;\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n    --bs-btn-disabled-color: #ffffff;\n    --bs-btn-disabled-bg: #0551604a;\n  }\n\n\t&.btn-outline-primary {\n\t\t--bs-btn-color: #087990;\n\t\t--bs-btn-border-color: #087990;\n\t\t--bs-btn-hover-color: #ffffff;\n\t\t--bs-btn-hover-bg: #087990;\n\t\t--bs-btn-hover-border-color: #087990;\n\t\t--bs-btn-focus-shadow-rgb: 49, 132, 253;\n\t\t--bs-btn-active-color: #ffffff;\n\t\t--bs-btn-active-bg: #087990;\n\t\t--bs-btn-active-border-color: #087990;\n\t\t--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n\t\t--bs-btn-disabled-border-color: #0551604a;\n\t}\n\n  &[class*=\"btn-outline-\"] {\n    border-width: 2px;\n  }\n\n  &.btn-outline-primary {\n    --bs-btn-disabled-color: #6c757d8f;\n  }\n\n  &.btn-secondary {\n    border: none;\n  }\n\n  &.btn-outline-secondary {\n    --bs-btn-disabled-color: #6c757d8f;\n  }\n\n  &.btn-success {\n    border: none;\n    --bs-btn-disabled-bg: #35482a4a;\n  }\n\n  &.btn-outline-success {\n    --bs-btn-disabled-color: #6c757d8f;\n  }\n\n  &.btn-danger {\n    border: none;\n  }\n\n  &.btn-outline-danger {\n    --bs-btn-disabled-color: #6c757d8f;\n  }\n\n  &.btn-warning {\n    border: none;\n  }\n\n  &.btn-outline-warning {\n    --bs-btn-disabled-color: #6c757d8f;\n  }\n\n  &.btn-info {\n    border: none;\n  }\n\n  &.btn-outline-info {\n    --bs-btn-disabled-color: #6c757d8f;\n  }\n`;\n\nconst rootElementByType = (type) =>\n  type === \"link\"\n    ? styled.a`\n        ${styles}\n      `\n    : styled.button`\n        ${styles}\n      `;\n\nconst Button = ({\n  classNames,\n  icon: iconProps,\n  isHidden,\n  label,\n  type,\n  ...restProps\n}) => {\n  const ButtonRoot = rootElementByType(type);\n\n  return (\n    <ButtonRoot\n      className={[\n        \"btn d-inline-flex align-items-center gap-2 rounded-pill\",\n        classNames?.root ?? \"btn-primary\",\n        isHidden ?? false ? \"d-none\" : \"\",\n      ].join(\" \")}\n      style={{ width: \"fit-content\" }}\n      {...restProps}\n    >\n      {Struct.typeMatch(iconProps) && widget(\"components.atom.icon\", iconProps)}\n\n      <span className={classNames?.label} style={{ lineHeight: \"inherit\" }}>\n        {label}\n      </span>\n    </ButtonRoot>\n  );\n};\n\nreturn Button(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/carina.akaia.near/widget/gigs-board.components.molecule.button", "fact_widget_deployments_id": "5aa22458c77578a9658ce3a056405bf0", "inserted_timestamp": "2023-09-14T08:52:03.085Z", "modified_timestamp": "2023-09-14T08:52:03.085Z", "__row_index": 0}