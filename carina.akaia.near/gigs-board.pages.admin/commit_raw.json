{"tx_hash": "23UeSj7GFsfqjm9SBggqui2Xvebdo5SW72uNNX6ZPjt8", "action_id_social": "AGYB7VDQEPgtHnktZzFH3XB7Lqe8xTWjYwkBBit7doko-0-widget", "block_id": 103770050, "block_timestamp": "2023-10-20T00:36:43.102Z", "signer_id": "carina.akaia.near", "widget_name": "gigs-board.pages.admin", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  create_community: ({ inputs }) =>\n    Near.call(devHubAccountId, \"create_community\", { inputs }),\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_account_community_permissions: ({ account_id, community_handle }) =>\n    Near.view(devHubAccountId, \"get_account_community_permissions\", {\n      account_id,\n      community_handle,\n    }) ?? null,\n\n  update_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"update_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  update_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"update_community_board\", { handle, board }),\n\n  update_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"update_community_github\", { handle, github }),\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities_metadata: () =>\n    Near.view(devHubAccountId, \"get_all_communities_metadata\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  useQuery: (name, params) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst Viewer = {\n  communityPermissions: ({ handle }) =>\n    DevHub.get_account_community_permissions({\n      account_id: context.accountId,\n      community_handle: handle,\n    }) ?? {\n      can_configure: false,\n      can_delete: false,\n    },\n\n  role: {\n    isDevHubModerator:\n      DevHub.has_moderator({ account_id: context.accountId }) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst AdministrationSettings = {\n  communities: {\n    maxFeatured: 4,\n  },\n};\n\nconst CommunityFeaturingSchema = {\n  handle: {\n    label: \"Community handle\",\n\n    hints: {\n      disabled: `You can only add ${AdministrationSettings.communities.maxFeatured} communities at a time`,\n    },\n\n    inputProps: { min: 3, max: 40, required: true },\n  },\n};\n\nconst AdminPage = () => {\n  const featuredCommunities = DevHub.useQuery(\"featured_communities\"),\n    featuredCommunityList = featuredCommunities.data ?? [];\n\n  const featuredCommunityHandles = featuredCommunityList.map(\n    ({ handle }) => handle\n  );\n\n  const addFeaturedCommunity = ({ handle }) =>\n    Near.call(devHubAccountId, \"set_featured_communities\", {\n      handles: Array.from(\n        new Set(featuredCommunityHandles).add(handle).values()\n      ),\n    });\n\n  const removeFeaturedCommunity = ({ handle: input }) =>\n    Near.call(devHubAccountId, \"set_featured_communities\", {\n      handles: featuredCommunityHandles.filter((handle) => handle !== input),\n    });\n\n  return widget(\"components.template.app-layout\", {\n    path: [{ label: \"Administration\", pageId: \"admin\" }],\n    viewer: Viewer,\n\n    banner: Viewer.role.isDevHubModerator ? null : (\n      <div\n        className=\"d-flex flex-column justify-content-center align-items-center\"\n        style={{ height: 384 }}\n      >\n        <h2 className=\"alert alert-danger\">\n          Your account does not have administration permissions.\n        </h2>\n      </div>\n    ),\n\n    children: (\n      <div className=\"d-flex flex-column gap-4 p-4\">\n        {widget(\"components.atom.spinner\", {\n          isHidden: !featuredCommunities.isLoading,\n        })}\n\n        {widget(\"components.molecule.tile\", {\n          heading: \"Featured communities\",\n\n          isHidden:\n            featuredCommunities.isLoading || !Viewer.role.isDevHubModerator,\n\n          noBorder: true,\n          noFrame: true,\n\n          children: (\n            <>\n              <div className=\"d-flex flex-wrap align-content-start gap-4\">\n                {featuredCommunityList.map((community) =>\n                  widget(\"entity.community.card\", {\n                    actions: (\n                      <div className=\"d-flex justify-content-center align-items-center\">\n                        {widget(\"components.molecule.button\", {\n                          classNames: { root: \"btn-outline-danger vertical\" },\n                          icon: { type: \"bootstrap_icon\", variant: \"bi-x-lg\" },\n                          title: \"Remove from featured\",\n                          onClick: () => removeFeaturedCommunity(community),\n                        })}\n                      </div>\n                    ),\n\n                    format: \"small\",\n                    metadata: community,\n                    target: \"_blank\",\n                  })\n                )}\n              </div>\n\n              {widget(\"components.organism.configurator\", {\n                heading: \"Add featured community\",\n                isActive: true,\n\n                isUnlocked:\n                  featuredCommunityList.length <\n                  AdministrationSettings.communities.maxFeatured,\n\n                schema: CommunityFeaturingSchema,\n                onSubmit: addFeaturedCommunity,\n              })}\n            </>\n          ),\n        })}\n      </div>\n    ),\n  });\n};\n\nreturn AdminPage(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/carina.akaia.near/widget/gigs-board.pages.admin", "fact_widget_deployments_id": "a8b7bfb6776705593c156d8a4b449346", "inserted_timestamp": "2023-10-20T02:43:02.362Z", "modified_timestamp": "2023-10-20T02:43:02.362Z", "__row_index": 4}