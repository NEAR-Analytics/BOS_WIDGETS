{"tx_hash": "rk7hdaNGB1taRYziVgVs2DJNLVA5Tb3q6dxUKacTTpW", "action_id_social": "5zEiaU9VXkPgpDWc5jfZcFvPdLwth5d5tyZjdxuy5brf-0-widget", "block_id": 98273691, "block_timestamp": "2023-08-07T12:12:20.137Z", "signer_id": "carina.akaia.near", "widget_name": "gigs-board.pages.project", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/gui/navigation\" */\nconst NavUnderline = styled.ul`\n  border-bottom: 1px #eceef0 solid;\n\n  a {\n    color: #687076;\n    text-decoration: none;\n  }\n\n  a.active {\n    font-weight: bold;\n    color: #0c7283;\n    border-bottom: 4px solid #0c7283;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/navigation\" */\n/* INCLUDE: \"core/lib/uuid\" */\nconst uuid = () =>\n  [Date.now().toString(16)]\n    .concat(\n      Array.from(\n        { length: 4 },\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\n      ).map((value) => value.toString(16))\n    )\n    .join(\"-\");\n\nconst withUUIDIndex = (data) => {\n  const id = uuid();\n\n  return Object.fromEntries([[id, { ...data, id }]]);\n};\n/* END_INCLUDE: \"core/lib/uuid\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  create_project: ({ tag, name, description }) =>\n    Near.call(devHubAccountId, \"create_project\", { tag, name, description }) ??\n    null,\n\n  update_project_metadata: ({ metadata }) =>\n    Near.call(devHubAccountId, \"update_project_metadata\", { metadata }) ?? null,\n\n  get_project_views_metadata: ({ project_id }) =>\n    Near.view(devHubAccountId, \"get_project_views_metadata\", { project_id }) ??\n    null,\n\n  create_project_view: ({ project_id, view }) =>\n    Near.call(devHubAccountId, \"create_project_view\", { project_id, view }) ??\n    null,\n\n  get_project_view: ({ project_id, view_id }) =>\n    Near.view(devHubAccountId, \"get_project_view\", { project_id, view_id }) ??\n    null,\n\n  update_project_view: ({ project_id, view }) =>\n    Near.call(devHubAccountId, \"create_project_view\", { project_id, view }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst access_control_info = DevHub.useQuery({\n  name: \"access_control_info\",\n});\n\nconst Viewer = {\n  can: {\n    editCommunity: (communityData) =>\n      Struct.typeMatch(communityData) &&\n      (communityData.admins.includes(context.accountId) ||\n        Viewer.role.isDevHubModerator),\n  },\n\n  projectPermissions: (projectId) =>\n    Near.view(devHubAccountId, \"get_project_permissions\", {\n      id: projectId,\n    }) ?? { can_configure: true },\n\n  role: {\n    isDevHubModerator:\n      access_control_info.data === null || access_control_info.isLoading\n        ? false\n        : access_control_info.data.members_list[\n            \"team:moderators\"\n          ]?.children?.includes?.(context.accountId) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst project_mock = {\n  metadata: {\n    id: \"3456345\",\n    tag: \"i-am-a-project-tag\",\n    name: \"Test Project\",\n    description: \"Test project please ignore\",\n    owner_community_handles: [\"devhub-test\"],\n  },\n};\n\nconst views_metadata_mock = [\n  { kind: \"kanban-view\", title: \"Lorem\", id: \"fj3938fh\" },\n  { kind: \"kanban-view\", title: \"Ipsum\", id: \"f34tf3ea45\" },\n  { kind: \"kanban-view\", title: \"Yet another kanban\", id: \"y45iwt4e\" },\n];\n\nconst ProjectPage = ({ dir, id, view: selectedViewId }) => {\n  const permissions = Viewer.projectPermissions(id);\n\n  const project =\n    {\n      data: project_mock,\n    } ?? DevHub.useQuery({ name: \"project\", params: { id } });\n\n  const viewsMetadata =\n    views_metadata_mock ??\n    DevHub.get_project_views_metadata({ project_id: id });\n\n  return project.data === null && project.isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    widget(\"entity.project.layout\", {\n      id,\n\n      path: [\n        {\n          label: \"Projects\",\n          pageId: typeof dir === \"string\" ? \"community.projects\" : \"projects\",\n          params: typeof dir === \"string\" ? { handle: dir } : null,\n        },\n      ],\n\n      configurator: widget(\"feature.project.configurator\", {\n        metadata: project.data?.metadata,\n        permissions,\n      }),\n\n      children:\n        project.data === null ? (\n          <div class=\"alert alert-danger\" role=\"alert\">\n            {`Project with id ${id} doesn't exist`}\n          </div>\n        ) : (\n          <div className=\"d-flex flex-column\">\n            <NavUnderline className=\"nav\">\n              {viewsMetadata.map((metadata) => (\n                <li className=\"nav-item\" key={metadata.id}>\n                  <a\n                    aria-current={defaultActive && \"page\"}\n                    className={[\n                      \"nav-link d-inline-flex gap-2\",\n                      metadata.id === selectedViewId ? \"active\" : \"\",\n                    ].join(\" \")}\n                    href={href(\"project\", {\n                      id: project.data.metadata.id,\n                      view: metadata.id,\n                      dir,\n                    })}\n                  >\n                    <span>{metadata.title}</span>\n                  </a>\n                </li>\n              ))}\n\n              {permissions.can_configure ? (\n                <li class=\"nav-item\">\n                  <a\n                    href={href(\"project\", { id, view: \"new\", dir })}\n                    className={[\n                      \"nav-link d-flex gap-2\",\n                      selectedViewId === \"new\" ? \"active\" : \"\",\n                    ].join(\" \")}\n                  >\n                    <i class=\"bi bi-plus-lg\" />\n                    <span>New view</span>\n                  </a>\n                </li>\n              ) : null}\n            </NavUnderline>\n\n            <div class=\"tab-content\">\n              {viewsMetadata.map((metadata) => (\n                <div\n                  class={`tab-pane pt-4 fade ${\n                    metadata.id === selectedViewId ? \"show active\" : \"\"\n                  }`}\n                  role=\"tabpanel\"\n                  tabindex=\"0\"\n                  key={metadata.id}\n                >\n                  {widget(\n                    permissions.can_configure\n                      ? \"feature.project.view-configurator\"\n                      : [\"entity.project\", metadata.kind].join(\".\"),\n                    {\n                      link: href(\"project\", { id, view: metadata.id, dir }),\n                      metadata,\n                      permissions,\n                      projectId: id,\n                    }\n                  )}\n                </div>\n              ))}\n\n              {permissions.can_configure ? (\n                <div\n                  class={`tab-pane fade ${\n                    selectedViewId === \"new\" ? \"show active\" : \"\"\n                  }`}\n                  role=\"tabpanel\"\n                  tabindex=\"0\"\n                  key={view.id}\n                >\n                  {widget(\"feature.project.view-configurator\", {\n                    permissions,\n                    projectId: id,\n                  })}\n                </div>\n              ) : null}\n            </div>\n          </div>\n        ),\n    })\n  );\n};\n\nreturn ProjectPage(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/carina.akaia.near/widget/gigs-board.pages.project", "fact_widget_deployments_id": "2328bac3e251a5532036b016031f9ec1", "inserted_timestamp": "2023-08-07T13:27:20.649Z", "modified_timestamp": "2023-08-07T13:27:20.649Z", "__row_index": 0}