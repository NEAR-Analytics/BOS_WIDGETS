{"tx_hash": "H4QmTD4Nb9VRNwREnHT4hpAt4U7uVpHWBQTycxsjHotH", "action_id_social": "DEFso9cGWSJ35yjfaqcy6kuretVvxyFPwY3mfg7zAWVg-0-widget", "block_id": 98233943, "block_timestamp": "2023-08-06T23:08:46.555Z", "signer_id": "carina.akaia.near", "widget_name": "gigs-board.feature.project.configurator", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/lib/gui/form\" */\nconst defaultFieldUpdate = ({\n  input,\n  lastKnownValue,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\":\n      return Array.isArray(input) && typeof lastKnownValue === \"string\"\n        ? input.join(arrayDelimiter ?? \",\")\n        : input;\n\n    case \"string\":\n      return Array.isArray(lastKnownValue)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownValue) {\n          case \"boolean\":\n            return !lastKnownValue;\n\n          default:\n            return lastKnownValue;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ initialValues, stateKey: formStateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[formStateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [formStateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, ...params }) =>\n    (fieldInput) => {\n      const updatedValues = Struct.deepFieldUpdate(\n        formState?.values ?? {},\n\n        {\n          input: fieldInput?.target?.value ?? fieldInput,\n          params,\n          path,\n\n          via:\n            typeof customFieldUpdate === \"function\"\n              ? customFieldUpdate\n              : defaultFieldUpdate,\n        }\n      );\n\n      State.update((lastKnownComponentState) => ({\n        ...lastKnownComponentState,\n\n        [formStateKey]: {\n          hasUnsubmittedChanges: !Struct.isEqual(\n            updatedValues,\n            initialFormState.values\n          ),\n\n          values: updatedValues,\n        },\n      }));\n    };\n\n  if (\n    !uninitialized &&\n    (formState === null ||\n      (Object.keys(formState?.values ?? {}).length > 0 &&\n        !formState.hasUnsubmittedChanges &&\n        !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    update: formUpdate,\n  };\n};\n/* END_INCLUDE: \"core/lib/gui/form\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  create_project: ({ tag, name, description }) =>\n    Near.call(devHubAccountId, \"create_project\", { tag, name, description }) ??\n    null,\n\n  update_project_metadata: ({ metadata }) =>\n    Near.call(devHubAccountId, \"update_project_metadata\", { metadata }) ?? null,\n\n  get_project_views_metadata: ({ project_id }) =>\n    Near.view(devHubAccountId, \"get_project_views_metadata\", { project_id }) ??\n    null,\n\n  create_project_view: ({ project_id, view }) =>\n    Near.call(devHubAccountId, \"create_project_view\", { project_id, view }) ??\n    null,\n\n  get_project_view: ({ project_id, view_id }) =>\n    Near.view(devHubAccountId, \"get_project_view\", { project_id, view_id }) ??\n    null,\n\n  update_project_view: ({ project_id, view }) =>\n    Near.call(devHubAccountId, \"create_project_view\", { project_id, view }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n\nconst ProjectConfigurator = ({ metadata, permissions }) => {\n  State.init({\n    isConfiguratorActive: false,\n  });\n\n  const configuratorToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isConfiguratorActive: forcedState ?? !lastKnownState.isConfiguratorActive,\n    }));\n\n  const form = useForm({ initialValues: { metadata }, stateKey: \"project\" });\n\n  const onCancel = () => {\n    form.reset();\n    configuratorToggle(false);\n  };\n\n  const onSubmit = () => DevHub.update_project_metadata(form.values);\n\n  return (\n    <div className=\"d-flex justify-content-between gap-3 w-100\">\n      <div className=\"d-flex flex-column gap-2 justify-content-end\">\n        {state.isConfiguratorActive ? (\n          widget(\"components.molecule.text-input\", {\n            className: \"w-100 p-0 gap-0\",\n            inputProps: { className: \"h-75 border-0 bg-dark text-white fs-1\" },\n            key: `project-${form.values.metadata.id}-name`,\n            multiline: false,\n            onChange: form.update({ path: [\"metadata\", \"name\"] }),\n            placeholder: \"Project name\",\n            value: form.values.metadata.name,\n            skipPaddingGap: true,\n          })\n        ) : (\n          <h1 className=\"m-0 px-2 py-2\">{metadata.name}</h1>\n        )}\n\n        {state.isConfiguratorActive ? (\n          widget(\"components.molecule.text-input\", {\n            className: \"w-100 border-none\",\n            inputProps: { className: \"h-75 border-0 bg-dark text-white\" },\n            key: `project-${form.values.metadata.id}-description`,\n            multiline: false,\n            onChange: form.update({ path: [\"metadata\", \"description\"] }),\n            placeholder: \"Project description\",\n            value: form.values.metadata.description,\n            skipPaddingGap: true,\n          })\n        ) : (\n          <p className=\"m-0 px-2 py-2\">{metadata.description}</p>\n        )}\n      </div>\n\n      <div className=\"d-flex flex-column gap-3 justify-content-between align-items-end h-100\">\n        {state.isConfiguratorActive ? (\n          widget(\"components.molecule.text-input\", {\n            className: \"w-100\",\n            inputProps: {\n              className: \"h-75 text-end border-0 bg-dark text-white\",\n            },\n            key: `project-${form.values.metadata.id}-tag`,\n            multiline: false,\n            onChange: form.update({ path: [\"metadata\", \"tag\"] }),\n            placeholder: \"project-tag\",\n            value: form.values.metadata.tag,\n            skipPaddingGap: true,\n          })\n        ) : (\n          <span\n            class=\"badge bg-primary rounded-4 text-decoration-none\"\n            style={{ cursor: \"default\" }}\n            title=\"DevHub tag\"\n          >\n            {metadata.tag}\n          </span>\n        )}\n\n        {permissions.can_configure ? (\n          <div className=\"d-flex gap-3\">\n            {widget(\"components.atom.button\", {\n              classNames: {\n                root: [\n                  \"btn-danger\",\n                  !state.isConfiguratorActive ? \"d-none\" : \"\",\n                ].join(\" \"),\n              },\n              label: \"Cancel\",\n              onClick: onCancel,\n            })}\n\n            {widget(\"components.atom.button\", {\n              classNames: {\n                root: [\n                  \"btn-success\",\n                  !state.isConfiguratorActive ? \"d-none\" : \"\",\n                ].join(\" \"),\n                adornment: \"bi-check-circle-fill\",\n              },\n              disabled: !form.hasUnsubmittedChanges,\n              label: \"Save\",\n              onClick: onSubmit,\n            })}\n\n            {widget(\"components.atom.button\", {\n              classNames: {\n                root: [\n                  \"btn-primary\",\n                  state.isConfiguratorActive ? \"d-none\" : \"\",\n                ].join(\" \"),\n                adornment: \"bi bi-gear-fill\",\n              },\n              label: \"Configure project\",\n              onClick: () => configuratorToggle(true),\n            })}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nreturn ProjectConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/carina.akaia.near/widget/gigs-board.feature.project.configurator", "fact_widget_deployments_id": "042e109dfd503c6fe7193f01e6d31a3e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}