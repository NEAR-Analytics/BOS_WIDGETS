{"tx_hash": "8y6Dm7LvkcxofL6rrufZuZRS8qs1SCDUr7PKEEoVasWo", "action_id_social": "FanrK1DzitybxvbSXYDphHyPgZVATZJjmGavswaAspjn-0-widget", "block_id": 98750627, "block_timestamp": "2023-08-14T01:24:36.077Z", "signer_id": "carina.akaia.near", "widget_name": "gigs-board.feature.workspace.view-configurator", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/lib/gui/form\" */\nconst defaultFieldUpdate = ({\n  input,\n  lastKnownValue,\n  params: { arrayDelimiter },\n}) => {\n  switch (typeof input) {\n    case \"boolean\":\n      return input;\n\n    case \"object\":\n      return Array.isArray(input) && typeof lastKnownValue === \"string\"\n        ? input.join(arrayDelimiter ?? \",\")\n        : input;\n\n    case \"string\":\n      return Array.isArray(lastKnownValue)\n        ? input.split(arrayDelimiter ?? \",\").map((string) => string.trim())\n        : input;\n\n    default: {\n      if ((input ?? null) === null) {\n        switch (typeof lastKnownValue) {\n          case \"boolean\":\n            return !lastKnownValue;\n\n          default:\n            return lastKnownValue;\n        }\n      } else return input;\n    }\n  }\n};\n\nconst useForm = ({ initialValues, stateKey: formStateKey, uninitialized }) => {\n  const initialFormState = {\n    hasUnsubmittedChanges: false,\n    values: initialValues ?? {},\n  };\n\n  const formState = state[formStateKey] ?? null,\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\n\n  const formReset = () =>\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n      [formStateKey]: initialFormState,\n      hasUnsubmittedChanges: false,\n    }));\n\n  const formUpdate = ({ path, via: customFieldUpdate, ...params }) => (\n    fieldInput\n  ) => {\n    const updatedValues = Struct.deepFieldUpdate(\n      formState?.values ?? {},\n\n      {\n        input: fieldInput?.target?.value ?? fieldInput,\n        params,\n        path,\n\n        via:\n          typeof customFieldUpdate === \"function\"\n            ? customFieldUpdate\n            : defaultFieldUpdate,\n      }\n    );\n\n    State.update((lastKnownComponentState) => ({\n      ...lastKnownComponentState,\n\n      [formStateKey]: {\n        hasUnsubmittedChanges: !Struct.isEqual(\n          updatedValues,\n          initialFormState.values\n        ),\n\n        values: updatedValues,\n      },\n    }));\n  };\n\n  if (\n    !uninitialized &&\n    (formState === null ||\n      (Object.keys(formState?.values ?? {}).length > 0 &&\n        !formState.hasUnsubmittedChanges &&\n        !isSynced))\n  ) {\n    formReset();\n  }\n\n  return {\n    ...(formState ?? initialFormState),\n    isSynced,\n    reset: formReset,\n    update: formUpdate,\n  };\n};\n/* END_INCLUDE: \"core/lib/gui/form\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n/* INCLUDE: \"core/lib/uuid\" */\nconst uuid = () =>\n  [Date.now().toString(16)]\n    .concat(\n      Array.from(\n        { length: 4 },\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\n      ).map((value) => value.toString(16))\n    )\n    .join(\"-\");\n\nconst withUUIDIndex = (data) => {\n  const id = uuid();\n\n  return Object.fromEntries([[id, { ...data, id }]]);\n};\n/* END_INCLUDE: \"core/lib/uuid\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  edit_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"edit_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  edit_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"edit_community_github\", { handle, github }) ??\n    null,\n\n  edit_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"edit_community_board\", { handle, board }) ??\n    null,\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities: () =>\n    Near.view(devHubAccountId, \"get_all_communities\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  useQuery: ({ name, params }) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst Viewer = {\n  can: {\n    editCommunity: (communityData) =>\n      Struct.typeMatch(communityData) &&\n      (communityData.admins.includes(context.accountId) ||\n        Viewer.role.isDevHubModerator),\n  },\n\n  communityPermissions: ({ handle }) =>\n    DevHub.useQuery(\"account_community_permissions\", {\n      account_id: context.account_id,\n      community_handle: handle,\n    }).data ?? {\n      can_configure: false,\n      can_delete: false,\n    },\n\n  role: {\n    isDevHubModerator:\n      DevHub.has_moderator({ account_id: context.accountId }) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst WorkspaceViewConfiguratorSettings = {\n  maxColumnsNumber: 20,\n};\n\nconst CompactContainer = styled.div`\n  width: fit-content !important;\n  max-width: 100%;\n`;\n\nconst WorkspaceViewMetadataDefaults = {\n  kind: \"kanban-view\",\n  title: \"\",\n  description: \"\",\n};\n\nconst WorkspaceViewConfigDefaults = {\n  ticket_kind: \"post-ticket\",\n  tags: { excluded: [], required: [] },\n  columns: {},\n};\n\nconst WorkspaceViewConfigurator = ({\n  link,\n  metadata,\n  permissions,\n  workspaceId,\n}) => {\n  const isNewView = (metadata ?? null) === null;\n\n  State.init({\n    editingMode: \"form\",\n    isActive: isNewView,\n  });\n\n  const config = DevHub.useQuery({\n    name: \"workspace_view_config\",\n    params: { id: metadata.id },\n  });\n\n  const form = useForm({\n    initialValues: {\n      metadata: metadata ?? WorkspaceViewMetadataDefaults,\n\n      config: isNewView\n        ? WorkspaceViewConfigDefaults\n        : JSON.parse(config.data ?? \"{}\"),\n    },\n\n    stateKey: \"view\",\n  });\n\n  const viewDelete = () => DevHub.delete_workspace_view({ id: metadata.id });\n\n  const formToggle = (forcedState) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      isActive: forcedState ?? !lastKnownState.isActive,\n    }));\n\n  const editingModeSwitch = ({ target: { value } }) =>\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      editingMode: value,\n    }));\n\n  const columnsCreateNew = ({ lastKnownValue }) =>\n    Object.keys(lastKnownValue).length <\n    WorkspaceViewConfiguratorSettings.maxColumnsNumber\n      ? {\n          ...(lastKnownValue ?? {}),\n          ...withUUIDIndex({ tag: \"\", title: \"New column\", description: \"\" }),\n        }\n      : lastKnownValue;\n\n  const columnsDeleteById = (id) => ({ lastKnownValue }) =>\n    Object.fromEntries(\n      Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\n    );\n\n  const onCancel = () => {\n    form.reset();\n    formToggle(false);\n  };\n\n  const onSubmit = () =>\n    DevHub[isNewView ? \"create_workspace_view\" : \"update_workspace_view\"]({\n      view: {\n        metadata: {\n          ...form.values.metadata,\n          workspace_id: parseInt(workspaceId),\n        },\n        config: JSON.stringify(form.values.config),\n      },\n    });\n\n  const formElement =\n    Object.keys(form.values.metadata).length > 0 &&\n    Object.keys(form.values.config).length > 0 ? (\n      <>\n        <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n          {widget(\"components.molecule.text-input\", {\n            className: \"flex-shrink-0\",\n            key: `${form.values.metadata.id ?? \"new-view\"}-title`,\n            label: \"Name\",\n            onChange: form.update({ path: [\"metadata\", \"title\"] }),\n            placeholder: \"NEAR Protocol NEPs\",\n            value: form.values.metadata.title,\n          })}\n        </div>\n\n        <CompactContainer>\n          <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n            {widget(\"components.molecule.text-input\", {\n              className: \"flex-shrink-0\",\n              format: \"comma-separated\",\n              key: `${form.values.metadata.id ?? \"new-view\"}-tags-required`,\n              label: \"All the tags MUST be presented in posts\",\n              onChange: form.update({ path: [\"config\", \"tags\", \"required\"] }),\n              placeholder: \"near-protocol-neps, \",\n              value: form.values.config.tags.required.join(\", \"),\n            })}\n          </div>\n\n          <div className=\"d-flex gap-3 flex-column flex-lg-row\">\n            {widget(\"components.molecule.text-input\", {\n              className: \"flex-shrink-0\",\n              format: \"comma-separated\",\n              key: `${form.values.metadata.id ?? \"new-view\"}-tags-excluded`,\n              label: \"All the tags MUST NOT be presented in posts\",\n              onChange: form.update({ path: [\"config\", \"tags\", \"excluded\"] }),\n              placeholder: \"near-protocol-neps, \",\n              value: form.values.config.tags.excluded.join(\", \"),\n            })}\n          </div>\n        </CompactContainer>\n\n        {widget(\"components.molecule.text-input\", {\n          className: \"w-100\",\n          inputProps: { className: \"h-75\" },\n          key: `${form.values.metadata.id ?? \"new-view\"}-description`,\n          label: \"Description\",\n          multiline: true,\n          onChange: form.update({ path: [\"metadata\", \"description\"] }),\n          placeholder: \"Latest NEAR Enhancement Proposals by status.\",\n          value: form.values.metadata.description,\n        })}\n\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <span className=\"d-inline-flex gap-2 m-0\">\n            <i className=\"bi bi-list-task\" />\n\n            <span>\n              {`Columns ( max. ${WorkspaceViewConfiguratorSettings.maxColumnsNumber} )`}\n            </span>\n          </span>\n        </div>\n\n        <div className=\"d-flex flex-column align-items-center gap-3\">\n          {Object.values(form.values.config?.columns ?? {}).map(\n            ({ id, description, tag, title }) => (\n              <div\n                className=\"d-flex gap-3 border border-secondary rounded-4 p-3 w-100\"\n                key={id}\n              >\n                <div className=\"d-flex flex-column gap-1 w-100\">\n                  {widget(\"components.molecule.text-input\", {\n                    className: \"flex-grow-1\",\n                    key: `column-${id}-title`,\n                    label: \"Title\",\n\n                    onChange: form.update({\n                      path: [\"config\", \"columns\", id, \"title\"],\n                    }),\n\n                    placeholder: \"\ud83d\udc40 Review\",\n                    value: title,\n                  })}\n\n                  {widget(\"components.molecule.text-input\", {\n                    className: \"flex-grow-1\",\n                    key: `column-${id}-description`,\n                    label: \"Description\",\n\n                    onChange: form.update({\n                      path: [\"config\", \"columns\", id, \"description\"],\n                    }),\n\n                    placeholder:\n                      \"NEPs that need a review by Subject Matter Experts.\",\n\n                    value: description,\n                  })}\n\n                  {widget(\"components.molecule.text-input\", {\n                    key: `${\n                      form.values.metadata.id ?? \"new-view\"\n                    }-column-${id}-tag`,\n\n                    label: \"Tag\",\n\n                    onChange: form.update({\n                      path: [\"config\", \"columns\", id, \"tag\"],\n                    }),\n\n                    placeholder: \"\",\n                    value: tag,\n                  })}\n                </div>\n\n                <div\n                  className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                  style={{ marginTop: -16, marginBottom: -16 }}\n                >\n                  <button\n                    className=\"btn btn-outline-danger shadow\"\n                    onClick={form.update({\n                      path: [\"config\", \"columns\"],\n                      via: columnsDeleteById(id),\n                    })}\n                    title=\"Delete column\"\n                  >\n                    <i className=\"bi bi-trash-fill\" />\n                  </button>\n                </div>\n              </div>\n            )\n          )}\n        </div>\n      </>\n    ) : null;\n\n  return !isNewView && config.isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    <div className=\"d-flex flex-column gap-4\">\n      {state.isActive && Object.keys(form.values).length > 0 ? (\n        <AttractableDiv className=\"d-flex flex-column gap-3 p-3 w-100 rounded-4\">\n          <div className=\"d-flex align-items-center justify-content-between gap-3\">\n            <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n              <i className=\"bi bi-gear-wide-connected\" />\n              <span>View configuration</span>\n            </h5>\n\n            {widget(\"components.molecule.button-switch\", {\n              currentValue: state.editingMode,\n              key: \"editingMode\",\n              onChange: editingModeSwitch,\n\n              options: [\n                { label: \"Form\", value: \"form\" },\n                { label: \"JSON\", value: \"JSON\" },\n              ],\n\n              title: \"Editing mode selection\",\n            })}\n          </div>\n\n          {state.editingMode === \"form\" ? (\n            formElement\n          ) : (\n            <div className=\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\">\n              <textarea\n                className=\"form-control\"\n                disabled\n                rows=\"12\"\n                type=\"text\"\n                value={JSON.stringify(form.values ?? {}, null, \"\\t\")}\n              />\n            </div>\n          )}\n\n          <div className=\"d-flex align-items-center justify-content-end gap-3\">\n            <button\n              className=\"btn shadow btn-outline-secondary d-inline-flex gap-2 me-auto\"\n              disabled={\n                form.values.columns.length >=\n                WorkspaceViewConfiguratorSettings.maxColumnsNumber\n              }\n              onClick={form.update({\n                path: [\"config\", \"columns\"],\n                via: columnsCreateNew,\n              })}\n            >\n              <i className=\"bi bi-plus-lg\" />\n              <span>New column</span>\n            </button>\n\n            <button\n              className=\"btn btn-outline-danger border-0 d-inline-flex gap-2 align-items-center\"\n              onClick={onCancel}\n              style={{ width: \"fit-content\" }}\n            >\n              <span>Cancel</span>\n            </button>\n\n            <button\n              disabled={!form.hasUnsubmittedChanges}\n              className=\"btn shadow btn-success d-inline-flex gap-2 align-items-center\"\n              onClick={onSubmit}\n              style={{ width: \"fit-content\" }}\n            >\n              <i className=\"bi bi-cloud-arrow-up-fill\" />\n              <span>Save</span>\n            </button>\n          </div>\n        </AttractableDiv>\n      ) : null}\n\n      {widget([\"entity.workspace\", form.values.metadata.kind].join(\".\"), {\n        ...form.values,\n        onConfigureClick: () => formToggle(true),\n        onDeleteClick: isNewView ? null : viewDelete,\n        link,\n        permissions,\n      })}\n    </div>\n  );\n};\n\nreturn WorkspaceViewConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/carina.akaia.near/widget/gigs-board.feature.workspace.view-configurator", "fact_widget_deployments_id": "329c38129b13ebb7bbaddf0e4169aa84", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}