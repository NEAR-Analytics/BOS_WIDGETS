{"tx_hash": "G1vc1widcnd6KeHtSKAeeiZxAS3M4HGXuUZY52p5qYK8", "action_id_social": "85v7qufJa4o2nDAWGJmDABugnoETSMT9PH2DJpVywNcn-0-widget", "block_id": 103203860, "block_timestamp": "2023-10-12T12:40:15.667Z", "signer_id": "relayer-demo.near", "widget_name": "RelayerJokes", "source_code": "State.init({\n  newMessage: \"\",\n});\n\nconst userAccount = context.accountId;\nconst relayerAccount = \"relayer-address.near\";\n\nconst userAccountStatus = fetch(\"https://rpc.mainnet.near.org\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    jsonrpc: \"2.0\",\n    id: \"dontcare\",\n    method: \"query\",\n    params: {\n      request_type: \"view_account\",\n      finality: \"final\",\n      account_id: userAccount,\n    },\n  }),\n});\n\nconst relayerAccountStatus = fetch(\"https://rpc.mainnet.near.org\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    jsonrpc: \"2.0\",\n    id: \"dontcare\",\n    method: \"query\",\n    params: {\n      request_type: \"view_account\",\n      finality: \"final\",\n      account_id: relayerAccount,\n    },\n  }),\n});\n\nconst contract = \"guest-book.near\";\nconst messages = Near.view(contract, \"getMessages\", {}).reverse();\n\nconst addNewMessage = async () => {\n  if (state.newMessage.trim() === \"\") {\n    console.log(\"No message to add\");\n    return;\n  }\n  Near.call(contract, \"addMessage\", {\n    text: state.newMessage,\n  });\n};\n\nconst StyledDemo = styled.div`\n  .input-wrapper {\n    display: flex;\n    align-items: center;\n    width: 100%;\n  }\n\n  li {\n    list-style: none;\n    margin-bottom: 1rem;\n    display: flex;\n\n    div {\n      margin: 10px;\n    }\n  }\n`;\n\nconst nearAmount = (yocto) => parseInt(yocto) / Math.pow(10, 24);\n\nreturn (\n  <StyledDemo>\n    <h1>Relayer Jokes</h1>\n    <h5>\n      Post a joke to the blockchain at zero cost to you. The relayer will pay\n      the gas fees.\n    </h5>\n    ------------------------\n    <h5>\n      Your account: <b>{userAccount}</b>\n    </h5>\n    <h5>\n      Your balance: <b>{nearAmount(userAccountStatus.body.result.amount)}</b>\n    </h5>\n    ------------------------\n    <h5>\n      Relayer account: <b>{relayerAccount}</b>\n    </h5>\n    <h5>\n      Relayer balance:{\" \"}\n      <b>{nearAmount(relayerAccountStatus.body.result.amount)}</b>\n    </h5>\n    ------------------------\n    <div className=\"input-wrapper\">\n      <Widget\n        src=\"near/widget/DIG.Input\"\n        props={{\n          placeholder: \"Say GM to the world\",\n          onInput: async (e) => State.update({ newMessage: e.target.value }),\n          value: state.newMessage,\n        }}\n      />\n      <Widget\n        src=\"near/widget/DIG.Button\"\n        props={{\n          label: \"Use a random joke\",\n          onClick: (e) => {\n            asyncFetch(\"https://icanhazdadjoke.com/\", {\n              headers: { Accept: \"application/json\" },\n            }).then((res) => {\n              const joke = res.body.joke;\n              State.update({ newMessage: \"\" });\n              State.update({ newMessage: joke });\n            });\n          },\n          size: \"large\",\n          variant: \"secondary\",\n        }}\n      />\n    </div>\n    <Widget\n      src=\"near/widget/DIG.Button\"\n      props={{\n        label: \"Add to Blockhain\",\n        onClick: (e) => addNewMessage(e),\n        size: \"large\",\n      }}\n    />\n    <div>\n      <ul>\n        {messages.map((data, key) => {\n          return (\n            <li class=\"text-center\">\n              <div>{data.sender}</div>\n              <div>{data.text}</div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  </StyledDemo>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer-demo.near/widget/RelayerJokes", "fact_widget_deployments_id": "cc72d27bceca502a061163b89fa504af", "inserted_timestamp": "2023-10-12T14:30:24.716Z", "modified_timestamp": "2023-10-12T14:30:24.716Z", "__row_index": 4}