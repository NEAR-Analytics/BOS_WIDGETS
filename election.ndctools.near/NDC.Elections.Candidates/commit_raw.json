{"tx_hash": "6EJ4ykruiqkUDYeK6ApLR2CEVTz3a47p9FdHjR5iCGuA", "action_id_social": "8DKEChjczeeSqSZNWEiq1Ln4TY17txtuf7s7zLDhNTJ1-0-widget", "block_id": 98283924, "block_timestamp": "2023-08-07T15:48:15.124Z", "signer_id": "election.ndctools.near", "widget_name": "NDC.Elections.Candidates", "source_code": "const {\n  electionContract,\n  ndcOrganization,\n  myVotes,\n  id,\n  typ,\n  ref_link,\n  winnerIds,\n  quorum,\n  seats,\n  voters_num,\n  result,\n  isIAmHuman,\n  candidateId,\n} = props;\n\nconst widgets = {\n  voters: \"election.ndctools.near/widget/NDC.Elections.Voters\",\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  modal: \"nomination.ndctools.near/widget/NDC.Modal\",\n  verifyHuman: \"nomination.ndctools.near/widget/NDC.VerifyHuman\",\n};\n\nconst H4 = styled.h4`\n  margin-bottom: 0;\n`;\n\nconst H3 = styled.h3`\n  margin-bottom: 0;\n`;\n\nconst Container = styled.div`\n  position: relative:\n  font-family: Avenir;\n  font-size: 16px;\n`;\n\nconst StyledLink = styled.a`\n  color: inherit !important;\n  width: 90px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 14px;\n  padding-top: 2px;\n\n  @media (max-width: 400px) {\n    width: 60px;\n  }\n`;\n\nconst CandidateItem = styled.div`\n  padding: 0 20px;\n  height: 48px;\n  border-radius: 12px;\n  margin-bottom: 8px;\n  border: 1px solid;\n  background: ${(props) =>\n    props.winnerId ? \"#239F28\" : props.selected ? \"#4aa6ee\" : \"#F8F8F9\"};\n  border-color: ${(props) =>\n    props.winnerId ? \"#239F28\" : props.selected ? \"#4aa6ee\" : \"#F8F8F9\"};\n  color: ${(props) => (props.selected || props.winnerId ? \"white\" : \"inherit\")};\n\n  &:hover {\n    background: ${(props) =>\n      props.winnerId ? \"#239F28\" : props.selected ? \"#4aa6ee\" : \"#d4e4f461\"};\n  \n  @media (max-width: 400px) {\n    padding: 0 10px;\n  }\n`;\n\nconst Bookmark = styled.div`\n  width: 90px;\n  cursor: pointer;\n\n  #bookmark.bi-bookmark-fill {\n    color: ${(props) =>\n      props.winnerId || props.selected ? \"#fff\" : \"#4F46E5\"};\n  }\n\n  @media (max-width: 400px) {\n    width: auto;\n    margin-right: 15px;\n  }\n`;\n\nconst Expand = styled.div`\n  width: 35px;\n  cursor: pointer;\n\n  @media (max-width: 400px) {\n    width: 20px;\n    margin-right: 10px;\n  }\n`;\n\nconst Votes = styled.div``;\n\nconst Action = styled.div``;\n\nconst Nomination = styled.div``;\n\nconst FilterRow = styled.div`\n  padding: 15px 20px;\n  font-size: 13px;\n`;\n\nconst Info = styled.i`\n  font-size: 12px;\n  margin: 0 !important;\n`;\n\nconst CandidatesContainer = styled.div`\n  overflow-y: scroll;\n  max-height: 490px;\n  width: 100%;\n`;\n\nconst StickyContainer = styled.div`\n  position: \"fixed\",\n  left: 0;\n  bottom: 0;\n  height: 60px;\n  width: 100%;\n`;\n\nconst Icon = styled.i`\n  font-size: 14px;\n`;\n\nconst CastVotesSection = styled.div`\n  background: #fdfeff;\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  padding: 16px;\n\n  @media (max-width: 400px) {\n    flex-direction: column;\n  }\n\n  .wrapper {\n    @media (max-width: 400px) {\n      width: 100%;\n    }\n  }\n\n  button {\n    @media (max-width: 400px) {\n      width: 100%;\n    }\n  }\n\n  h3,\n  h4 {\n    margin: 0 3px;\n  }\n\n  h3 {\n    font-weight: 900;\n  }\n\n  .text-secondary {\n    margin: 0 10px;\n  }\n\n  &.not-verified {\n    h4 {\n      font-size: 16px;\n      margin: 0 0 5px 0;\n      font-weight: 600;\n    }\n\n    h5 {\n      margin: 0;\n      font-size: 12px;\n    }\n  }\n`;\n\nconst Winner = styled.i`\n  margin-left: 10px;\n  font-size: 14px;\n`;\n\nconst Section = styled.div`\n  gap: 8px;\n  margin-bottom: 10px;\n`;\n\nconst currentUser = context.accountId;\nconst housesMapping = {\n  CouncilOfAdvisors: \"Council Of Advisors\",\n  HouseOfMerit: \"House of Merit\",\n  TransparencyCommission: \"Transparency Commission\",\n};\n\nconst alreadyVoted = (candidateId) =>\n  myVotes.some((voter) => voter.candidate === candidateId);\n\nconst filteredCandidates = () => {\n  let candidates = result;\n\n  if (state.filterOption === \"bookmark\")\n    candidates = state.filter.bookmark\n      ? state.candidates.filter(([candidateId, _votes], _index) =>\n          state.bookmarked.includes(candidateId)\n        )\n      : result;\n  if (state.filterOption === \"candidates\")\n    candidates = candidates.sort((a, b) =>\n      state.filter.candidates\n        ? a[0].localeCompare(b[0])\n        : b[0].localeCompare(a[0])\n    );\n  if (state.filterOption === \"votes\")\n    candidates = candidates.sort((a, b) =>\n      state.filter.votes ? a[1] - b[1] : b[1] - a[1]\n    );\n  if (state.filterOption === \"my_votes\")\n    candidates = state.filter.my_votes\n      ? state.candidates.filter(([candidateId, _votes], _index) =>\n          alreadyVoted(candidateId)\n        )\n      : result;\n  if (candidateId)\n    candidates = result.filter(([candidate, _vote], _index) =>\n      candidate.toLowerCase().includes(candidateId.toLowerCase())\n    );\n\n  return candidates;\n};\n\nconst handleSelectCandidate = (candidateId) => {\n  const selectedItems = state.selectedCandidates.includes(candidateId)\n    ? state.selectedCandidates.filter((el) => el !== candidateId)\n    : [...state.selectedCandidates, candidateId];\n\n  const currentVotes = seats - myVotesForHouse().length - selectedItems.length;\n  if (currentVotes < 0) return;\n\n  State.update({\n    selectedCandidates: selectedItems,\n    availableVotes: currentVotes,\n  });\n};\n\nconst selectedBookmarks = (candidateId) => {\n  let selectedItems = state.bookmarked.includes(candidateId)\n    ? state.bookmarked.filter((el) => el !== candidateId)\n    : [...state.bookmarked, candidateId];\n\n  return [...new Set(selectedItems)];\n};\n\nconst handleBookmarkCandidate = (candidateId) => {\n  let selectedItems = selectedBookmarks(candidateId);\n  State.update({ loading: candidateId });\n\n  Social.set(\n    {\n      index: {\n        [currentUser]: JSON.stringify({\n          key: `${ndcOrganization}/${typ}`,\n          value: selectedBookmarks(candidateId),\n        }),\n      },\n    },\n    {\n      force: true,\n      onCommit: () => {\n        if (selectedItems.length === 0)\n          State.update({ selectedCandidates: result });\n        State.update({ bookmarked: selectedItems, loading: false });\n      },\n      onCancel: () => State.update({ loading: false }),\n    }\n  );\n};\n\nconst handleVote = () =>\n  Near.call(\n    electionContract,\n    \"vote\",\n    { prop_id: id, vote: state.selectedCandidates },\n    \"70000000000000\",\n    2000000000000000000000\n  ).then((data) => State.update({ bountyProgramModal: false }));\n\nconst handleAcceptToS = () => {\n  State.update({ loading: true });\n\n  Social.set(\n    {\n      index: {\n        [currentUser]: JSON.stringify({\n          key: \"ndc_election_tos\",\n          value: true,\n        }),\n      },\n    },\n    {\n      force: true,\n      onCommit: () =>\n        State.update({\n          showToSModal: false,\n          bountyProgramModal: true,\n          loading: false,\n        }),\n      onCancel: () =>\n        State.update({\n          loading: false,\n        }),\n    }\n  );\n};\n\nconst filterBy = (option) => {\n  let filterOption = \"\";\n  let filter = {};\n\n  if (option.bookmark) {\n    filterOption = \"bookmark\";\n    filter = { bookmark: !state.filter.bookmark };\n  }\n  if (option.candidates) {\n    filterOption = \"candidates\";\n    filter = { candidates: !state.filter.candidates };\n  }\n  if (option.votes) {\n    filterOption = \"votes\";\n    filter = { votes: !state.filter.votes };\n  }\n  if (option.my_votes) {\n    filterOption = \"my_votes\";\n    filter = { my_votes: !state.filter.my_votes };\n  }\n\n  State.update({ filterOption, filter });\n};\n\nconst loadInitData = () => {\n  State.update({ candidates: filteredCandidates() });\n};\n\nconst loadSocialDBData = () => {\n  let _bookmarked = Social.index(currentUser, `${ndcOrganization}/${typ}`);\n  let _tosAccepted = Social.index(currentUser, \"ndc_election_tos\");\n\n  State.update({\n    bookmarked:\n      _bookmarked && _bookmarked[_bookmarked.length - 1]\n        ? _bookmarked[_bookmarked.length - 1].value\n        : [],\n    tosAgreement:\n      _tosAccepted && _tosAccepted[_tosAccepted.length - 1]\n        ? _tosAccepted[_tosAccepted.length - 1].value\n        : false,\n  });\n};\n\nconst myVotesForHouse = () => myVotes.filter((vote) => vote.house === typ);\n\nState.init({\n  start: true,\n  loading: false,\n  availableVotes: seats - myVotesForHouse().length,\n  selected: null,\n  bookmarked: [],\n  tosAgreement: false,\n  selectedCandidates: [],\n  voters: [],\n  candidates: result,\n  filter: {\n    bookmark: false,\n    candidates: false,\n    votes: false,\n    my_votes: false,\n  },\n  filterOption: \"\",\n  showToSModal: false,\n  bountyProgramModal: false,\n});\n\nloadInitData();\nloadSocialDBData();\n\nconst UserLink = ({ title, src }) => (\n  <div className=\"d-flex mr-3\">\n    <StyledLink href={src} target=\"_blank\">\n      {title}\n    </StyledLink>\n    <div>\n      <Icon className=\"bi bi-arrow-up-right\" />\n    </div>\n  </div>\n);\n\nconst Loader = () => (\n  <span\n    className=\"spinner-grow spinner-grow-sm me-1\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  />\n);\n\nconst CandidateList = ({ candidateId, votes }) => (\n  <div>\n    <CandidateItem\n      className=\"d-flex align-items-center justify-content-between\"\n      selected={state.selected === candidateId}\n      winnerId={winnerIds.includes(candidateId)}\n    >\n      <div className=\"d-flex w-100 align-items-center\">\n        <Expand>\n          <i\n            className={`${\n              state.selected === candidateId\n                ? \"bi bi-chevron-down\"\n                : \"bi bi-chevron-right\"\n            }`}\n            onClick={(e) =>\n              State.update({\n                selected: state.selected === candidateId ? null : candidateId,\n              })\n            }\n          />\n        </Expand>\n\n        {isIAmHuman && (\n          <Bookmark\n            selected={state.selected === candidateId}\n            winnerId={winnerIds.includes(candidateId)}\n          >\n            {state.loading === candidateId ? (\n              <Loader />\n            ) : (\n              <i\n                id=\"bookmark\"\n                onClick={() => handleBookmarkCandidate(candidateId)}\n                className={`bi ${\n                  state.bookmarked.includes(candidateId)\n                    ? \"bi-bookmark-fill\"\n                    : \"bi-bookmark\"\n                }`}\n              />\n            )}\n          </Bookmark>\n        )}\n        <div className=\"d-flex align-items-center\">\n          <Widget\n            src=\"mob.near/widget/ProfileImage\"\n            props={{\n              accountId: candidateId,\n              imageClassName: \"rounded-circle w-100 h-100\",\n              style: { width: \"24px\", height: \"24px\", marginRight: 5 },\n            }}\n          />\n          <UserLink\n            src={`https://near.org/near/widget/ProfilePage?accountId=${candidateId}`}\n            title={candidateId}\n          />\n          {winnerIds.includes(candidateId) && (\n            <Winner className=\"bi bi-trophy p-1\" />\n          )}\n        </div>\n      </div>\n      <div className=\"d-flex w-100 align-items-center justify-content-between\">\n        <Widget\n          src={widgets.styledComponents}\n          props={{\n            Link: {\n              size: \"sm\",\n              className: \"secondary dark\",\n              text: \"Nomination\",\n              icon: <i className=\"bi bi-box-arrow-up-right\" />,\n              href: ref_link,\n              inverse:\n                state.selected === candidateId ||\n                winnerIds.includes(candidateId),\n            },\n          }}\n        />\n        <Votes>{votes}</Votes>\n        {isIAmHuman && (\n          <Votes>\n            <input\n              id=\"input\"\n              disabled={alreadyVoted(candidateId)}\n              onClick={() => handleSelectCandidate(candidateId)}\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              checked={\n                state.selectedCandidates.includes(candidateId) ||\n                alreadyVoted(candidateId)\n              }\n            />\n          </Votes>\n        )}\n      </div>\n    </CandidateItem>\n    {state.selected === candidateId && (\n      <Widget src={widgets.voters} props={{ candidateId, isIAmHuman }} />\n    )}\n  </div>\n);\n\nconst Filters = () => (\n  <FilterRow className=\"d-flex align-items-center justify-content-between\">\n    <div className=\"d-flex align-items-center w-100\">\n      <Expand />\n      {isIAmHuman && (\n        <Bookmark\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ bookmark: true })}\n        >\n          <small>Bookmark</small>\n          <i\n            className={`bi ${\n              state.filter.bookmark ? \"bi-funnel-fill\" : \"bi-funnel\"\n            }`}\n          />\n        </Bookmark>\n      )}\n      <div\n        className=\"text-secondary\"\n        onClick={() => filterBy({ candidates: true })}\n      >\n        <small>Candidate</small>\n        <i\n          className={`bi ${\n            state.filter.candidates ? \"bi-arrow-down\" : \"bi-arrow-up\"\n          }`}\n        />\n      </div>\n    </div>\n    <div className=\"d-flex w-100 align-items-center justify-content-between\">\n      <Nomination className=\"text-secondary text-end text-md-start\">\n        <small>Nomination</small>\n      </Nomination>\n      <Votes\n        role=\"button\"\n        className=\"text-secondary\"\n        onClick={() => filterBy({ votes: true })}\n      >\n        <small>Total votes</small>\n        <i\n          className={`bi ${\n            state.filter.votes ? \"bi-arrow-down\" : \"bi-arrow-up\"\n          }`}\n        />\n      </Votes>\n      {isIAmHuman && (\n        <Action\n          role=\"button\"\n          className=\"text-secondary\"\n          onClick={() => filterBy({ my_votes: true })}\n        >\n          <small>My votes</small>\n          <i\n            className={`bi ${\n              state.filter.my_votes ? \"bi-funnel-fill\" : \"bi-funnel\"\n            }`}\n          />\n        </Action>\n      )}\n    </div>\n  </FilterRow>\n);\n\nconst CastVotes = () => (\n  <CastVotesSection className=\"d-flex align-items-center justify-content-between gap-3\">\n    <div className=\"wrapper\">\n      <div className=\"d-flex align-items-end\">\n        <H3>\n          {seats - myVotesForHouse().length - state.selectedCandidates.length}\n        </H3>\n        <span>/</span>\n        <H4>{seats}</H4>\n        <span className=\"text-secondary\">votes left</span>\n        {state.selectedCandidates.length > 0 && (\n          <Widget\n            src={widgets.styledComponents}\n            props={{\n              Button: {\n                size: \"sm\",\n                className: \"secondary\",\n                text: \"Reset Selection\",\n                onClick: () =>\n                  State.update({\n                    selectedCandidates: [],\n                    availableVotes: seats - myVotesForHouse().length,\n                  }),\n              },\n            }}\n          />\n        )}\n      </div>\n      <Info className=\"text-secondary\">\n        <i class=\"bi bi-info-circle\"></i>\n        Make sure you selected all {seats} candidates\n      </Info>\n    </div>\n    <Widget\n      src={widgets.styledComponents}\n      props={{\n        Button: {\n          className: \"primary justify-content-center\",\n          disabled: state.selectedCandidates.length === 0,\n          text: `Cast ${state.selectedCandidates.length || \"\"} Votes`,\n          onClick: () =>\n            state.tosAgreement\n              ? handleVote()\n              : State.update({ showToSModal: true }),\n        },\n      }}\n    />\n  </CastVotesSection>\n);\n\nconst ALink = ({ title, href }) => (\n  <a href={href} target={\"_blank\"} rel={\"noopener\"}>\n    {title}\n  </a>\n);\n\nreturn (\n  <>\n    {state.showToSModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: (\n            <div>\n              <img src=\"https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/\" />\n              <div className=\"mt-4\">\n                Before you vote, please review the Fair Voting Policy.\n              </div>\n            </div>\n          ),\n          description: (\n            <>\n              Please make sure to read and understand the{\" \"}\n              <ALink\n                title=\"Fair Voting Policy.\"\n                href=\"https://bafkreieiqabf6k675f3doqdztej53qmiybmhiaqgjaqmj673wbxxq5muke.ipfs.nftstorage.link/\"\n              />\n              which outlines the responsibilities of each voter.\n            </>\n          ),\n          content: (\n            <Section className=\"d-flex justify-content-center w-100 my-4\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                checked={state.tosAgreement}\n                onClick={() =>\n                  State.update({ tosAgreement: !state.tosAgreement })\n                }\n              />\n              I agree with{\" \"}\n              <ALink\n                title=\"Fair Voting Policy.\"\n                href=\"https://bafkreieiqabf6k675f3doqdztej53qmiybmhiaqgjaqmj673wbxxq5muke.ipfs.nftstorage.link/\"\n              />\n            </Section>\n          ),\n          Button: {\n            title: state.loading ? (\n              <Loader />\n            ) : (\n              <>Agree to Fair Voting Policy</>\n            ),\n            disabled: !state.tosAgreement,\n            onCancel: () =>\n              State.update({ showToSModal: false, tosAgreement: false }),\n            onSubmit: handleAcceptToS,\n          },\n        }}\n      />\n    )}\n    {state.bountyProgramModal && (\n      <Widget\n        src={widgets.modal}\n        props={{\n          title: (\n            <div>\n              <img src=\"https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/\" />\n              <div className=\"mt-4\">You are about to cast your votes.</div>\n            </div>\n          ),\n          description: (\n            <>\n              <p>\n                Do you know about the{\" \"}\n                <ALink\n                  title=\"Whistleblower Bounty Program\"\n                  href=\"https://www.notion.so/NDC-Whistleblower-Program-and-Bounty-Framework-for-the-Election-b91e8d34a8cb4f17a6b9a9a7e7b5fa5c\"\n                />\n                ? The Whistleblower Bounty Program offers up to 2,000 NEAR for\n                whistleblowers who come forward to share instances of vote\n                buying, account buying, election fraud, and other violations of\n                the{\" \"}\n                <ALink\n                  title=\"Fair Voting Policy\"\n                  href=\"https://bafkreieiqabf6k675f3doqdztej53qmiybmhiaqgjaqmj673wbxxq5muke.ipfs.nftstorage.link/\"\n                />\n                .\n              </p>\n              <p>\n                You will be bonding xN during the election period. This bond\n                will be returned to you after the election results are reviewed\n                and validated.\n              </p>\n              <p>\n                Make sure you vote for all the seats in this house. You can only\n                vote once and past votes cannot be changed.\n              </p>\n            </>\n          ),\n          content: (\n            <Section className=\"d-flex d-flex justify-content-center w-100 my-4\">\n              I understand the{\" \"}\n              <ALink\n                title=\"Whistleblower Bounty Program\"\n                href=\"https://www.notion.so/NDC-Whistleblower-Program-and-Bounty-Framework-for-the-Election-b91e8d34a8cb4f17a6b9a9a7e7b5fa5c\"\n              />\n              .\n            </Section>\n          ),\n          Button: {\n            title: \"Cast Votes\",\n            onCancel: () => State.update({ bountyProgramModal: false }),\n            onSubmit: handleVote,\n          },\n        }}\n      />\n    )}\n\n    <Container>\n      <h1>{housesMapping[typ]}</h1>\n      {state.candidates.length > 0 ? (\n        <>\n          <Filters />\n          <CandidatesContainer>\n            {state.candidates.map(([candidateId, votes], index) => (\n              <CandidateList\n                candidateId={candidateId}\n                votes={votes}\n                key={index}\n              />\n            ))}\n          </CandidatesContainer>\n        </>\n      ) : (\n        <div className=\"d-flex p-5 justify-content-center\">\n          There are no candidates found\n        </div>\n      )}\n      <div>\n        {isIAmHuman ? (\n          <CastVotes />\n        ) : (\n          <Widget\n            src={widgets.verifyHuman}\n            props={{\n              title: \"Want to vote?\",\n              description: \"Click on Verify as a Human to proceed.\",\n            }}\n          />\n        )}\n      </div>\n    </Container>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/election.ndctools.near/widget/NDC.Elections.Candidates", "fact_widget_deployments_id": "235ef82075768a559c8e1ce33166e1c4", "inserted_timestamp": "2023-08-07T16:46:20.979Z", "modified_timestamp": "2023-08-07T16:46:20.979Z", "__row_index": 570}