{"tx_hash": "4ury84mNY7Dv8xTLa6SmnjNmL3f1TYmhFaEH4R35JNeh", "action_id_social": "H1whRpqdQbDeUyT1YnotbUyVvCiPPBzHLPSzTbt2DhZp-0-widget", "block_id": 100519328, "block_timestamp": "2023-09-06T12:58:44.670Z", "signer_id": "election.ndctools.near", "widget_name": "NDC.Elections.Main", "source_code": "let { ids, election_contract } = props;\n\nids = ids ? JSON.parse(ids) : [1, 2, 3, 4];\nconst budgetId = ids[3];\n\nconst electionContract = election_contract ?? \"elections-v1.gwg-testing.near\";\nconst registryContract = \"registry-v1.gwg-testing.near\";\nconst apiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\n\nconst NFT_SERIES = [190, 191];\nconst QUERY_API_ENDPOINT = \"https://graph.mintbase.xyz/mainnet\";\n\nconst widgets = {\n  header: \"election.ndctools.near/widget/NDC.Elections.Header\",\n  filter: \"election.ndctools.near/widget/NDC.Elections.Filter\",\n  houses: \"election.ndctools.near/widget/NDC.Elections.Houses\",\n  progress: \"election.ndctools.near/widget/NDC.Elections.Progress\",\n  candidates: \"election.ndctools.near/widget/NDC.Elections.Candidates\",\n  statistic: \"election.ndctools.near/widget/NDC.Elections.Statistic\",\n  activities: \"election.ndctools.near/widget/NDC.Elections.Activities\",\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  stepper: \"election.ndctools.near/widget/NDC.Stepper\",\n};\n\nState.init({\n  selectedHouse: ids[0],\n  myVotes: [],\n  winnerIds: [],\n  isIAmHuman: false,\n  blacklisted: false,\n  greylisted: false,\n  candidateFilterId: \"\",\n  isBonded: false,\n  reload: true,\n  houses: [],\n  acceptedPolicy: false,\n  hasVotedOnAllProposals: false,\n  hasPolicyNFT: null,\n  hasIVotedNFT: null,\n  hasIVotedSbt: false,\n});\n\nconst currentUser = context.accountId;\n\nconst steps = [\n  {\n    title: \"Accepted Policy\",\n    completed: state.acceptedPolicy || state.hasIVotedSbt,\n  },\n  {\n    title: 'Minted \"Fair Voting Policy\" NFT',\n    completed: state.hasPolicyNFT,\n  },\n  {\n    title: \"Voting Completed\",\n    completed: state.hasVotedOnAllProposals || state.hasIVotedSbt,\n  },\n  {\n    title: 'Minted \"I Voted\" NFT',\n    completed: state.hasIVotedNFT,\n  },\n  {\n    title: 'Unbonded & Minted \"I Voted SBT\"',\n    completed: state.hasIVotedSbt,\n  },\n];\n\nfunction fetchGraphQL(series) {\n  return asyncFetch(QUERY_API_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"mb-api-key\": \"anon\", \"x-hasura-role\": electionContract },\n    body: JSON.stringify({\n      query: `\n        query MyQuery {\n          nft_tokens(\n            where: {\n              nft_contract_id: {\n                _eq: \"mint.sharddog.near\"\n              },\n              token_id: {_regex: \"^${series}:\"},\n              owner: {_eq: \"${currentUser}\"}}\n            order_by: {minted_timestamp: asc}\n          ) {\n            last_transfer_timestamp\n          }\n        }\n      `,\n      variables: {},\n      operationName: \"MyQuery\",\n    }),\n  });\n}\n\nconst processNFTAvailability = (result, key) => {\n  if (result.status === 200) {\n    let data = result.body.data;\n    if (data) {\n      const tokens = data.nft_tokens;\n\n      State.update({\n        [key]: tokens.length > 0 && tokens[0].last_transfer_timestamp === null,\n      });\n    }\n  }\n};\n\nif (currentUser && state.reload) {\n  let houses = [\n    Near.view(electionContract, \"proposal\", { prop_id: ids[0] }),\n    Near.view(electionContract, \"proposal\", { prop_id: ids[1] }),\n    Near.view(electionContract, \"proposal\", { prop_id: ids[2] }),\n    Near.view(electionContract, \"proposal\", { prop_id: ids[3] }),\n  ];\n\n  const isHuman = Near.view(registryContract, \"is_human\", {\n    account: currentUser,\n  });\n\n  const flagged = Near.view(registryContract, \"account_flagged\", {\n    account: currentUser,\n  });\n\n  let isBonded;\n  if (isHuman) {\n    isBonded = Near.view(electionContract, \"bond_by_sbt\", {\n      sbt: isHuman[0][1][0],\n    });\n  }\n\n  const acceptedPolicy = Near.view(electionContract, \"accepted_policy\", {\n    user: currentUser,\n  });\n\n  const winnerIds = Near.view(electionContract, \"winners_by_proposal\", {\n    prop_id: state.selectedHouse,\n  });\n\n  const hasVotedOnAllProposals = Near.view(\n    electionContract,\n    \"has_voted_on_all_proposals\",\n    { user: currentUser }\n  );\n\n  const ivotedSbts = Near.view(registryContract, \"sbt_tokens\", {\n    issuer: electionContract,\n  });\n\n  fetchGraphQL(NFT_SERIES[0]).then((result) =>\n    processNFTAvailability(result, \"hasPolicyNFT\")\n  );\n\n  fetchGraphQL(NFT_SERIES[1]).then((result) =>\n    processNFTAvailability(result, \"hasIVotedNFT\")\n  );\n\n  asyncFetch(\n    `https://api.pikespeak.ai/election/votes-by-voter?voter=${currentUser}&contract=${electionContract}`,\n    { headers: { \"x-api-key\": apiKey } }\n  ).then((resp) => {\n    if (resp.body) {\n      const myVotes = resp.body.filter((vote) =>\n        ids.includes(parseInt(vote.proposal_id))\n      );\n\n      State.update({ myVotes, reload: false });\n    }\n  });\n\n  State.update({\n    isIAmHuman: isHuman && isHuman[0][1].length > 0,\n    winnerIds,\n    blacklisted: flagged === \"Blacklisted\",\n    greylisted: flagged !== \"Blacklisted\" && flagged !== \"Verified\",\n    houses,\n    isbonded: isBonded > 0,\n    acceptedPolicy,\n    hasVotedOnAllProposals,\n    hasIVotedSbt: ivotedSbts.some((sbt) => sbt.owner === currentUser),\n  });\n}\n\nconst handleSelect = (item) => {\n  State.update({ selectedHouse: item.id });\n};\n\nconst handleUnbond = () => {\n  Near.call(\n    registryContract,\n    \"is_human_call\",\n    { ctr: electionContract, function: \"unbond\", payload: \"{}\" },\n    \"110000000000000\"\n  ).then((data) => State.update({ isBonded: false }));\n};\n\nconst handleFilter = (e) => State.update({ candidateFilterId: e.target.value });\n\nconst votesLeft = (house) =>\n  house.seats - state.myVotes.filter((vote) => vote.house === house.typ).length;\n\nconst Container = styled.div`\n  padding: 20px 0;\n`;\n\nconst ActivityContainer = styled.div`\n  overflow-y: scroll;\n`;\n\nconst Left = styled.div`\n  padding: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst Filter = styled.div`\n  margin-top: 20px;\n`;\n\nconst Stepper = styled.div`\n  margin-top: 32px;\n`;\n\nconst Right = styled.div`\n  padding: 20px;\n  margin-bottom: 20px;\n  background: #f8f8f9;\n  border-radius: 8px;\n`;\n\nconst H5 = styled.h5`\n  margin-bottom: 20px;\n`;\n\nconst UnbondContainer = styled.div`\n  background: #fdfeff;\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  padding: 16px;\n  h3,\n  h4 {\n    margin: 0 3px;\n  }\n  h3 {\n    font-weight: 900;\n  }\n  .text-secondary {\n    margin: 0 10px;\n  }\n  &.not-verified {\n    h4 {\n      font-size: 16px;\n      margin: 0 0 5px 0;\n      font-weight: 600;\n    }\n    h5 {\n      margin: 0;\n      font-size: 12px;\n    }\n  }\n`;\n\nconst rand = (array) => {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n};\n\nreturn (\n  <>\n    <div>\n      {state.houses.map((house) => (\n        <>\n          {house.id === state.selectedHouse && (\n            <Widget\n              key={i}\n              src={widgets.header}\n              props={{\n                startTime: house.start,\n                endTime: house.end,\n                cooldown: house.cooldown,\n                type: \"Election\",\n                isWhistleblower: true,\n                ids,\n              }}\n            />\n          )}\n        </>\n      ))}\n      <Stepper>\n        <Widget src={widgets.stepper} props={{ steps }} />\n      </Stepper>\n      {state.selectedHouse !== budgetId && (\n        <Filter>\n          <Widget\n            src={widgets.filter}\n            props={{\n              handleFilter,\n              candidateId: state.candidateFilterId,\n              placeholder: \"Search by candidate name\",\n            }}\n          />\n        </Filter>\n      )}\n      <Container className=\"d-flex row\">\n        <Left className=\"h-screen col-lg-3 d-flex flex-column justify-content-between\">\n          <div>\n            <H5>To Vote</H5>\n            <Widget\n              src={widgets.houses}\n              props={{\n                selectedHouse: state.selectedHouse,\n                houses: state.houses,\n                ids,\n                handleSelect,\n                votesLeft,\n              }}\n            />\n          </div>\n\n          {currentUser &&\n          state.isIAmHuman &&\n          state.winnerIds.length > 0 &&\n          !state.hasIVotedSbt ? (\n            <UnbondContainer className={`not-verified d-flex flex-column`}>\n              <div>\n                <h4>Unbond NEAR & Mint SBT</h4>\n                <h5 className=\"text-secondary\">\n                  Congratulations! You can now unbond NEAR and mint the \u201cI\n                  Voted\u201d SBT\n                </h5>\n              </div>\n              <div className=\"mt-3\">\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      className: \"primary w-100 justify-content-center\",\n                      disabled: !state.isBonded,\n                      text: \"Unbond & Mint I Voted SBT\",\n                      onClick: handleUnbond,\n                    },\n                  }}\n                />\n              </div>\n            </UnbondContainer>\n          ) : (\n            <>\n              {currentUser && state.isIAmHuman && (\n                <Widget\n                  src={widgets.progress}\n                  props={{ houses: state.houses, handleSelect, votesLeft }}\n                />\n              )}\n            </>\n          )}\n        </Left>\n\n        <div className=\"col-lg-6 p-2 p-md-3\">\n          {state.houses.map((house) => (\n            <>\n              {house.id === state.selectedHouse && (\n                <Widget\n                  key={i}\n                  src={widgets.candidates}\n                  props={{\n                    electionContract,\n                    registryContract,\n                    ndcOrganization: \"NDC\",\n                    ids,\n                    ...state,\n                    ...house,\n                    result:\n                      state.winnerIds.length > 0\n                        ? house.result.sort((a, b) => b[1] - a[1])\n                        : rand(house.result),\n                  }}\n                />\n              )}\n            </>\n          ))}\n        </div>\n\n        <div className=\"col-lg-3\">\n          <Right className=\"col\">\n            <H5>General</H5>\n            <div className=\"d-flex justify-content-center\">\n              <Widget src={widgets.statistic} props={{ electionContract }} />\n            </div>\n          </Right>\n          {state.myVotes.length > 0 && (\n            <Right className=\"col\">\n              <H5>My voting activity</H5>\n              <ActivityContainer className=\"d-flex justify-content-center\">\n                <Widget\n                  src={widgets.activities}\n                  props={{ myVotes: state.myVotes }}\n                />\n              </ActivityContainer>\n            </Right>\n          )}\n        </div>\n      </Container>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/election.ndctools.near/widget/NDC.Elections.Main", "fact_widget_deployments_id": "c3c73c4499089c1bb10ab8d4d48dcefe", "inserted_timestamp": "2023-09-06T14:51:37.059Z", "modified_timestamp": "2023-09-06T14:51:37.059Z", "__row_index": 215}