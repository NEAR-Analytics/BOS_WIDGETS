{"tx_hash": "4Es3LgcXgpWkKaHWCSWELMT2qw3jvrJsVBTNyfmaJwGD", "action_id_social": "7ebrjdmSWivxppDgBwQD7weUNd5iKGKyx5h68SuZG94G-0-widget", "block_id": 100962050, "block_timestamp": "2023-09-12T13:28:46.417Z", "signer_id": "f1adcbb9027dc03c9a41829126bc871a98869c45c6506698dc4aa10481b7a87a", "widget_name": "collegium.bos.wk2.LiquityOpenTroveSepoliaExample", "source_code": "/**\r\n * @description\r\n * Initialize State for UI rendering\r\n */\r\nState.init({\r\n  displayColl: \"\",\r\n  displayBorrow: \"\",\r\n  coll: 0,\r\n  borrow: 0,\r\n  borrowingFee: 0,\r\n  totalcoll: 0,\r\n  collateralRatio: 0,\r\n  liquidationReserve: 0,\r\n  complete: false,\r\n  loading: false,\r\n  msg: \"\",\r\n  borrowRateRaw: 0,\r\n  borrowRate: 0,\r\n  address: undefined,\r\n  chainId: undefined,\r\n  balance: undefined,\r\n  price: 0,\r\n  isOpenTrove: undefined,\r\n  isRecoveryMode: undefined,\r\n  isBlocked: true,\r\n  isGasAllocated: false,\r\n  isBorrowingRate: false,\r\n  borrowWrapperStyle: undefined,\r\n});\r\n\r\n/**\r\n *\r\n * @param depositChangeEvent\r\n * @description\r\n * Update 'coll' when user fills ETH to number field.\r\n * Recalculate collateral ratio when ETH and LUSD number field is updated.\r\n * Collateral ratio : ((ETH * cueerent ETH price) / (borowwing LUSD + liquidation reserve + borrowing fee)) * 100\r\n * Check requirements for an active \"Open Trove\" button.\r\n */\r\nconst setcoll = (depositChangeEvent) => {\r\n  const value = depositChangeEvent.target.value.replace(/[^.0-9]/g, \"\");\r\n  const coll = Number(value);\r\n  const { totalcoll } = state;\r\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\r\n\r\n  State.update({\r\n    displayColl: value,\r\n    coll,\r\n    collateralRatio,\r\n  });\r\n\r\n  validateTrove();\r\n};\r\n\r\n/**\r\n *\r\n * @param borrowChangeEvent\r\n * @description\r\n * Update 'borrow' when user fills LUSD to number field.\r\n * Calculate borrowing fee and total coll(=== total debt)\r\n * Borrowing fee formula cases.\r\n *   1. recovery mode : 0\r\n *   2. normal mode: (borrow * borrow rate) / 100\r\n *\r\n * Collateral ratio formula : ((ETH * cueerent ETH price) / (borowwing LUSD + liquidation reserve + borrowing fee)) * 100\r\n * Check requirements for an active \"Open Trove\" button.\r\n */\r\nconst setBorrow = (borrowChangeEvent) => {\r\n  const { coll, liquidationReserve, borrowRate, isRecoveryMode } = state;\r\n  const value = borrowChangeEvent.target.value.replace(/[^.0-9]/g, \"\");\r\n  const borrow = Number(value);\r\n  const borrowingFee =\r\n    isRecoveryMode === true ? 0 : (borrow * borrowRate) / 100;\r\n  const totalcoll =\r\n    borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\r\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\r\n\r\n  State.update({\r\n    displayBorrow: value,\r\n    borrow,\r\n    borrowingFee,\r\n    totalcoll,\r\n    collateralRatio,\r\n  });\r\n  validateTrove();\r\n};\r\n\r\n/**\r\n *\r\n * @description\r\n * check list for an active \"Open Trove\" button.\r\n *   1. LUSD being borrowed must be over 1800(LUSD).\r\n *   2. if the system is in recovery mode, the collateral ratio must exceed 150%.\r\n *   3. if the system is in normal mode, the collateral ratio must exceed 110%.\r\n *   4. you can only add coll(ETH) on your ETH balance.\r\n */\r\nconst validateTrove = () => {\r\n  const { coll, borrow, totalcoll, balance, isRecoveryMode } = state;\r\n\r\n  if (borrow < 1800) {\r\n    State.update({\r\n      msg: \"Borrow must be at least 1800 LUSD\",\r\n      isBlocked: true,\r\n    });\r\n    return;\r\n  }\r\n\r\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\r\n\r\n  if (isRecoveryMode === true) {\r\n    if (collateralRatio < 150) {\r\n      State.update({\r\n        msg: \"Collateral ratio must be at least 150%\",\r\n        isBlocked: true,\r\n      });\r\n      return;\r\n    }\r\n  } else {\r\n    if (collateralRatio < 110) {\r\n      State.update({\r\n        msg: \"Collateral ratio must be at least 110%\",\r\n        isBlocked: true,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (coll > Number(balance)) {\r\n    State.update({\r\n      msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH`,\r\n      isBlocked: true,\r\n    });\r\n    return;\r\n  }\r\n\r\n  State.update({ msg: \"\", isBlocked: false });\r\n};\r\n\r\n/**\r\n * @description\r\n * 5 out of all contracts are being used for open trove.\r\n * Only the used functions are defined in the abi objects.\r\n * The contract address is registered on the Ethereum mainnet.\r\n *\r\n * Contract list.\r\n *   1. borrowerOperation\r\n *   2. troveManager\r\n *   3. priceFeed\r\n *   4. sortedTroves\r\n *   5. hintHelpers\r\n */\r\nconst borrowerOperationAddress = \"0xD69fC8928D4F3229341cb431263F1EBd87B1ade8\";\r\nconst borrowerOperationABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"_maxFeePercentage\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"_LUSDAmount\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"_upperHint\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_lowerHint\", type: \"address\" },\r\n    ],\r\n    name: \"openTrove\",\r\n    outputs: [],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nconst troveManagerAddress = \"0x0ECDF34731eE8Dd46caa99a1AAE173beD1B32c67\";\r\n\r\nconst troveManagerABI = [\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_borrower\", type: \"address\" }],\r\n    name: \"getTroveStatus\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\r\n    name: \"getTCR\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"LUSD_GAS_COMPENSATION\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"_LUSDDebt\", type: \"uint256\" }],\r\n    name: \"getBorrowingFeeWithDecay\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"getBorrowingRateWithDecay\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\r\n    name: \"checkRecoveryMode\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nconst priceFeedAddress = \"0x07dD4Ce17De84bA13Fc154A7FdB46fC362a41E2C\";\r\nconst priceFeedABI = [\r\n  {\r\n    inputs: [],\r\n    name: \"getPrice\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nconst sortedtrovesAddress = \"0x136eF31a3aF35929e3Fc870dDB9b7c071DAB1B97\";\r\nconst sortedtrovesABI = [\r\n  {\r\n    inputs: [],\r\n    name: \"getSize\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"_NICR\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"_prevId\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_nextId\", type: \"address\" },\r\n    ],\r\n    name: \"findInsertPosition\",\r\n    outputs: [\r\n      { internalType: \"address\", name: \"\", type: \"address\" },\r\n      { internalType: \"address\", name: \"\", type: \"address\" },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nconst hintHelpersAddress = \"0x5E24dC4C8f8052903c5dBe801F5A5faC18561a83\";\r\nconst hintHelpersABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"_CR\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"_numTrials\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"_inputRandomSeed\", type: \"uint256\" },\r\n    ],\r\n    name: \"getApproxHint\",\r\n    outputs: [\r\n      { internalType: \"address\", name: \"hintAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"diff\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"latestRandomSeed\", type: \"uint256\" },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n/**\r\n * @description\r\n * Calculate two hints to reduce the gas cost; in which the gas spent is to insert the money into the trove list before calling the transaction.\r\n * The gas cost is O(n) in the worst case, but we want to reduce it for efficient O(1).\r\n * Call transaction \"borrowingOperation.openTrove()\" user click Open Trove button.\r\n * Example Borrower Operations with Hints reference link is \"https://github.com/liquity/dev#example-borrower-operations-with-hints\".\r\n */\r\nconst openTrove = async () => {\r\n  if (state.complete) {\r\n    State.update({ complete: false, hash: null });\r\n  }\r\n\r\n  const borrowerOperationContract = new ethers.Contract(\r\n    borrowerOperationAddress,\r\n    borrowerOperationABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const sortedTroveContract = new ethers.Contract(\r\n    sortedtrovesAddress,\r\n    sortedtrovesABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const hintHelpersContract = new ethers.Contract(\r\n    hintHelpersAddress,\r\n    hintHelpersABI,\r\n    Ethers.provider().getSigner()\r\n  );\r\n\r\n  const LUSDAmount = ethers.BigNumber.from(\r\n    ethers.utils.parseEther(state.borrow.toString())\r\n  );\r\n\r\n  const expectedDebt = ethers.BigNumber.from(\r\n    ethers.utils.parseEther(state.totalcoll.toString())\r\n  );\r\n\r\n  const _1e20 = ethers.BigNumber.from(ethers.utils.parseEther(\"100\"));\r\n\r\n  const ETHColl = ethers.BigNumber.from(\r\n    ethers.utils.parseEther(state.coll.toString())\r\n  );\r\n\r\n  /** Mission 3. NICR\uc758 \uac12\uc744 \uad6c\ud574\uc8fc\uc138\uc694\r\n   * \uacc4\uc0b0 \uc2dd: NICR = ETHColl * 1e20 / expectedDebt\r\n   * \uc544\ub798\uc758 \uacc4\uc0b0 \ubc29\ubc95\uc744 \uc774\uc6a9\ud558\ub418 ethersjs\uc758 BigNumber API\ub97c \uc774\uc6a9\ud558\uc138\uc694\r\n   * \ucc38\uace0 \ubb38\uc11c: https://docs.ethers.org/v5/api/utils/bignumber/#BigNumber--BigNumber--methods--math-operations\r\n   * \uc785\ub825\ucc3d\uc5d0 2ETH, 1800LUSD\ub97c \uc785\ub825\ud588\uc744 \ub54c NICR.toString()\uc758 \uacb0\uacfc \uac12: \"99552015928322548\"\r\n   */\r\n  // const NICR = null;\r\n  //   const NICR = (ETHColl * _1e20) / expectedDebt;\r\n  const NICR = ETHColl.mul(_1e20).div(expectedDebt);\r\n  console.log({ NICR: NICR.toString() });\r\n  sortedTroveContract.getSize().then((numTroves) => {\r\n    const _numTrials = numTroves.mul(ethers.BigNumber.from(\"15\"));\r\n\r\n    hintHelpersContract\r\n      .getApproxHint(NICR.toString(), _numTrials.toString(), 42)\r\n      .then((approxHintRes) => {\r\n        const approxHint = approxHintRes[0];\r\n\r\n        sortedTroveContract\r\n          .findInsertPosition(NICR.toString(), approxHint, approxHint)\r\n          .then((hintRes) => {\r\n            const upperHint = hintRes[0];\r\n            const lowerHint = hintRes[1];\r\n\r\n            borrowerOperationContract\r\n              .openTrove(\r\n                state.borrowRateRaw,\r\n                LUSDAmount,\r\n                upperHint,\r\n                lowerHint,\r\n                {\r\n                  value: ETHColl,\r\n                }\r\n              )\r\n              .then((transactionHash) => {\r\n                State.update({\r\n                  loading: true,\r\n                  hash: transactionHash.hash,\r\n                  borrow: 0,\r\n                  displayBorrow: \"\",\r\n                  coll: 0,\r\n                  displayColl: \"\",\r\n                  borrowingFee: 0,\r\n                  totalcoll: state.liquidationReserve,\r\n                  collateralRatio: 0,\r\n                  liquidationReserve: state.liquidationReserve,\r\n                });\r\n              });\r\n          });\r\n      });\r\n  });\r\n};\r\n\r\n/**\r\n * @description\r\n * This code block initializes sceanario\r\n * The checklist assumes you have already connected your wallet.\r\n * Check List\r\n *   1. The network must be the Ethereum mainnet.\r\n *   2. Get ETH balance in your wallet.\r\n *   3. Check your trove is already open.\r\n *   4. Get liquity system LUSD_GAS_COMPENSATION.\r\n *   5. Get liquity system borrowing rate.\r\n *   6. Get ETH:USD price.\r\n *   7. Get liquity system called TCR(total collateral ratio).\r\n *   8. Get liquity system is recovery mode.\r\n */\r\nif (Ethers.provider()) {\r\n  const signer = Ethers.provider().getSigner();\r\n  signer.getAddress().then((address) => {\r\n    State.update({ address });\r\n    if (state.chainId === 11155111) {\r\n      const troveManagerContract = new ethers.Contract(\r\n        troveManagerAddress,\r\n        troveManagerABI,\r\n        Ethers.provider().getSigner()\r\n      );\r\n\r\n      if (state.balance === undefined) {\r\n        Ethers.provider()\r\n          .getBalance(address)\r\n          .then((balance) => {\r\n            State.update({\r\n              balance: Big(balance).div(Big(10).pow(18)).toFixed(2),\r\n            });\r\n          });\r\n      }\r\n\r\n      if (state.isOpenTrove === undefined) {\r\n        troveManagerContract.getTroveStatus(address).then((res) => {\r\n          const isOpenTrove = ethers.utils.formatEther(res).includes(\"1\");\r\n          State.update({ isOpenTrove });\r\n        });\r\n      }\r\n\r\n      if (state.isGasAllocated === false) {\r\n        troveManagerContract\r\n          .LUSD_GAS_COMPENSATION()\r\n          .then((liquidationReserveRes) => {\r\n            const liquidationReserve = Number(\r\n              ethers.utils.formatEther(liquidationReserveRes)\r\n            );\r\n\r\n            State.update({\r\n              isGasAllocated: true,\r\n              totalcoll: liquidationReserve,\r\n              liquidationReserve: liquidationReserve,\r\n            });\r\n          });\r\n      }\r\n\r\n      if (state.isBorrowingRate === false) {\r\n        troveManagerContract\r\n          .getBorrowingRateWithDecay()\r\n          .then((borrowingRateRes) => {\r\n            State.update({\r\n              isBorrowingRate: true,\r\n              borrowRateRaw: borrowingRateRes,\r\n              borrowRate:\r\n                Number(\r\n                  ethers.utils.formatEther(borrowingRateRes).substring(0, 6)\r\n                ) * 100,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  });\r\n\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((chainIdData) => {\r\n      if (chainIdData?.chainId) {\r\n        State.update({ chainId: chainIdData.chainId });\r\n      }\r\n    });\r\n\r\n  if (state.price === 0) {\r\n    const priceFeedContract = new ethers.Contract(\r\n      priceFeedAddress,\r\n      priceFeedABI,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    const troveManagerContract = new ethers.Contract(\r\n      troveManagerAddress,\r\n      troveManagerABI,\r\n      Ethers.provider().getSigner()\r\n    );\r\n\r\n    priceFeedContract.getPrice().then((priceRes) => {\r\n      const price = Number(ethers.utils.formatEther(priceRes));\r\n\r\n      State.update({ price });\r\n      troveManagerContract.getTCR(priceRes).then((tcrRes) => {\r\n        const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\r\n\r\n        State.update({ tcr });\r\n      });\r\n\r\n      troveManagerContract\r\n        .checkRecoveryMode(ethers.BigNumber.from(priceRes))\r\n        .then((isRecoveryMode) => {\r\n          State.update({ isRecoveryMode: isRecoveryMode });\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nconst complete = () => {\r\n  State.update({ complete: true });\r\n};\r\n\r\n/**\r\n * @description\r\n * Present the current status of the UI where the transaction is in progress.\r\n */\r\nEthers.provider() &&\r\n  Ethers.provider()\r\n    .waitForTransaction(state.hash)\r\n    .then((res) => {\r\n      State.update({\r\n        loading: false,\r\n      });\r\n      complete();\r\n    })\r\n    .catch((err) => {\r\n      State.update({ loading: false });\r\n    });\r\n\r\n/**\r\n * Mission 2. `borrowWrapper` \ucef4\ud3ec\ub10c\ud2b8\uc758 \uc2a4\ud0c0\uc77c\uc744 \uc678\ubd80 css\ud30c\uc77c\uc744 \ubd88\ub7ec\uc640\uc11c \uc801\uc6a9\ud574\ubcf4\uc138\uc694.\r\n * \uc678\ubd80 css \ud30c\uc77c \ub9c1\ud06c: \"https://raw.githubusercontent.com/LudiumAgwn/collegium-bos-wk2/main/assets/code/liquity-widget.css\"\r\n * \uc5ec\uae30\ub97c \uace0\uccd0\uc8fc\uc138\uc694.\r\n */\r\nconst cssLink =\r\n  \"https://raw.githubusercontent.com/LudiumAgwn/collegium-bos-wk2/main/assets/code/liquity-widget.css\";\r\nconst cssData = fetch(cssLink).body;\r\n\r\n/**\r\n * \uc5ec\uae30\ub294 \uace0\uce58\uc9c0 \ub9c8\uc138\uc694!\r\n */\r\nif (cssLink !== \"PUT CSS FILE LINK\") {\r\n  if (!cssData) return \"\";\r\n}\r\n\r\nif (state.borrowWrapperStyle === undefined) {\r\n  State.update({\r\n    borrowWrapperStyle: styled.div`\r\n      width: 100%;\r\n      ${cssData}\r\n  `,\r\n  });\r\n}\r\n\r\n/**\r\n * @description\r\n * This UI style uses the the \"Styled Component\" library.\r\n * Update this code block to change the style.\r\n */\r\nconst BorrowWrapper = state.borrowWrapperStyle;\r\n\r\n/**\r\n * @description\r\n * This code block is HTML tags for building the UI structure.\r\n *\r\n * The UI is activated when the conditions below are satisfied.\r\n * 1. Connect your wallet.\r\n * 2. Network is Ethereum mainnet.\r\n * 3. Passes the \"validateTrove\" function result.\r\n * 4. There should be no active trove.\r\n * 5. Enter a value greater than 0 in the \"coll\" and \"borrow\" Number fields.\r\n */\r\nreturn (\r\n  <BorrowWrapper>\r\n    <div className=\"input-section deposit\">\r\n      <div className=\"input-label\">Deposit (ETH)</div>\r\n      <div className=\"input-wrapper\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"0.0000 ETH\"\r\n          disabled={\r\n            !state.address || state.isOpenTrove || state.chainId !== 11155111\r\n          }\r\n          onChange={setcoll}\r\n          value={state.displayColl}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n    <div className=\"input-section\">\r\n      <div className=\"input-label\">Borrow (LUSD)</div>\r\n      <div className=\"input-wrapper\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"0.0000 LUSD\"\r\n          disabled={\r\n            !state.address || state.isOpenTrove || state.chainId !== 11155111\r\n          }\r\n          onChange={setBorrow}\r\n          value={state.displayBorrow}\r\n        />\r\n      </div>\r\n    </div>\r\n    <div className=\"error-message\">{state.msg}</div>\r\n    <div className=\"info-wrapper\">\r\n      <div className=\"detail-info-wrapper\">\r\n        <div className=\"detail-info-label\">Liquidation Reserve</div>\r\n        <div className=\"detail-info-value\">\r\n          <span className=\"\">{state.liquidationReserve}</span>\r\n          <span className=\"info-unit\">LUSD</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"detail-info-wrapper\">\r\n        <div className=\"detail-info-label\">Borrowing Fee</div>\r\n        <div className=\"detail-info-value\">\r\n          <span className=\"\">{state.borrowingFee.toFixed(2)}</span>{\" \"}\r\n          <span className=\"info-unit\">\r\n            LUSD (\r\n            {state.isRecoveryMode === true ? 0 : state.borrowRate.toFixed(2)}%)\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"detail-info-wrapper\">\r\n        <div className=\"detail-info-label\">Recieve</div>\r\n        <div className=\"detail-info-value\">\r\n          <span className=\"\">{state.borrow.toFixed(2)}</span>\r\n          <span className=\"info-unit\">LUSD</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"detail-info-wrapper\">\r\n        <div className=\"detail-info-label\">Total debt</div>\r\n        <div className=\"detail-info-value\">\r\n          <span className=\"\">{state.totalcoll.toFixed(2)}</span>\r\n          <span className=\"info-unit\">LUSD</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"detail-info-wrapper\">\r\n        <div className=\"detail-info-label\">Collateral ratio</div>\r\n        <div className=\"detail-info-value\">\r\n          <span>{state.collateralRatio.toFixed(1)}</span>\r\n          <span className=\"info-unit\">%</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"confirm-wrapper\">\r\n      {state.address ? (\r\n        <button\r\n          className={`confirm ${state.isBlocked ? \"not-ok\" : \"ok\"}`}\r\n          disabled={state.isBlocked}\r\n          onClick={openTrove}\r\n        >\r\n          {Ethers.provider() && state.chainId !== 11155111\r\n            ? \"Change network to Sepolia\"\r\n            : /**\r\n             * Mission 1. \"\uc774 \uc9c0\uac11\uc740 \uc774\ubbf8 \ud65c\uc131\ud654\ub41c \ud2b8\ub85c\ube0c\uac00 \uc788\uc2b5\ub2c8\ub2e4.\" \uba54\uc2dc\uc9c0\ub97c \ucd94\uac00\ud574\uc8fc\uc138\uc694.\r\n             */\r\n            state.isOpenTrove === true\r\n            ? \"\uc774 \uc9c0\uac11\uc740 \uc774\ubbf8 \ud65c\uc131\ud654\ub41c \ud2b8\ub85c\ube0c\uac00 \uc788\uc2b5\ub2c8\ub2e4.\"\r\n            : state.loading\r\n            ? \"Loading...\"\r\n            : state.complete\r\n            ? \"Done \u2705\"\r\n            : state.coll === 0 || state.borrow === 0\r\n            ? \"Enter input value\"\r\n            : state.isBlocked\r\n            ? \"Check stats\"\r\n            : \"Open Trove\"}\r\n        </button>\r\n      ) : (\r\n        <Web3Connect className=\"connect-wallet\" />\r\n      )}\r\n    </div>\r\n  </BorrowWrapper>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/f1adcbb9027dc03c9a41829126bc871a98869c45c6506698dc4aa10481b7a87a/widget/collegium.bos.wk2.LiquityOpenTroveSepoliaExample", "fact_widget_deployments_id": "8fbda4e0a88882f28b615fa743d358e3", "inserted_timestamp": "2023-09-12T15:29:43.503Z", "modified_timestamp": "2023-09-12T15:29:43.503Z", "__row_index": 31}