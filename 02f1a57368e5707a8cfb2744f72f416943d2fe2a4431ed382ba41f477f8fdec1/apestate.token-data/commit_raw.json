{"tx_hash": "3LEStbuXd3JH7kHjBPxfhkHSXEMoPg9T7coZGzaPFZxy", "action_id_social": "4rFrnmwaknqQ9arinzHTapogyLtbL741p27U1MtxhwqZ-0-widget", "block_id": 108108013, "block_timestamp": "2023-12-16T18:35:52.161Z", "signer_id": "02f1a57368e5707a8cfb2744f72f416943d2fe2a4431ed382ba41f477f8fdec1", "widget_name": "apestate.token-data", "source_code": "const { tokenId, coinGeckoTokenId } = props;\n\nconst wethAddress = \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\";\n\nconst ethAddress = \"0x0000000000000000000000000000000000000000\";\n\nconst accountId = context.accountId;\nconst debug = props.debug ?? false;\n\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_ZKEVM = \"ZKEVM\";\nconst NETWORK_AURORA = \"AURORA\";\nconst NETWORK_POLYGON = \"POLYGON\";\n\nconst network = NETWORK_ZKEVM;\n\nif (!tokenId) return;\n\nconst getLandBalance = (tokenId, receiver) => {\n  const iface = new ethers.utils.Interface(state.landAbi);\n\n  const decimals = 18;\n\n  const encodedBalanceData = iface.encodeFunctionData(\"balanceOf\", [\n    receiver,\n    tokenId,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: \"0x02a28267A27545D2c4B5BB700d04319117154959\",\n      data: encodedBalanceData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return {\n        decimals: decimals,\n        balance: Big(receiverBalanceHex).toFixed(),\n      };\n    });\n};\n\nconst getErc20Tokendata = (tokenId) => {\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${tokenId}`;\n\n  const data = fetch(dataUrl);\n  if (!data.ok) {\n    return \"Loading\";\n  }\n\n  const tokenData = data.body;\n  const metadata = {\n    name: tokenData.name,\n    symbol: tokenData.symbol,\n    icon: tokenData.image.small,\n  };\n\n  const price = Number(tokenData.market_data.current_price.usd);\n\n  return { metadata, price };\n};\n\nconst getNativeBalance = () => {\n  const provider = Ethers.provider();\n  return provider.getBalance(state.ethAccountId).then((rawBalance) => {\n    return rawBalance.toString();\n  });\n};\n\nconst ethMetadata = {\n  icon: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png?1595348880\",\n  name: \"ETH\",\n  symbol: \"ETH\",\n  decimals: 18,\n};\n\nconst USDCMetadata = {\n  icon: \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png?1547042389\",\n  name: \"USDC Coin\",\n  symbol: \"USDC\",\n  decimals: 6,\n};\n\nconst tokenMetas = {\n  \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\": USDCMetadata,\n  \"0x0000000000000000000000000000000000000000\": ethMetadata,\n  \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\": {\n    icon: \"https://assets.coingecko.com/coins/images/2518/small/weth.png?1628852295\",\n    name: \"Wrapped Ether\",\n    symbol: \"WETH\",\n    decimals: 18,\n  },\n  \"0xea034fb02eb1808c2cc3adbc15f447b93cbe08e1\": {\n    name: \"Wrapped BTC\",\n    symbol: \"WBTC\",\n    decimals: 8,\n    icon: \"https://assets.coingecko.com/coins/images/7598/small/wrapped_bitcoin_wbtc.png?1548822744\",\n  },\n  \"0xa2036f0538221a77a3937f1379699f44945018d0\": {\n    symbol: \"MATIC\",\n    name: \"Matic Token\",\n    decimals: 18,\n    icon: \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png?1624446912\",\n  },\n  \"0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4\": {\n    symbol: \"DAI\",\n    name: \"Dai Stablecoin\",\n    decimals: 18,\n    icon: \"https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508\",\n  },\n  \"0x1E4a5963aBFD975d8c9021ce480b42188849D41d\": {\n    symbol: \"USDT\",\n    name: \"Tether USD\",\n    decimals: 6,\n    icon: \"https://assets.coingecko.com/coins/images/325/small/Tether-logo.png?1598003707\",\n  },\n  \"0x0000000000000000000000000000000000000001\": {\n    symbol: \"PYT\",\n    name: \"Phaya Thai\",\n    decimals: 18,\n    icon: \"https://apestate-chainlink.vercel.app/gps-blue.png\",\n    price: 150000,\n  },\n  \"0x0000000000000000000000000000000000000002\": {\n    symbol: \"TLR\",\n    name: \"Thonglor\",\n    decimals: 18,\n    icon: \"https://apestate-chainlink.vercel.app/gps-yellow.png\",\n    price: 462500,\n  },\n  \"0x0000000000000000000000000000000000000003\": {\n    symbol: \"LPO\",\n    name: \"Lat Phrao\",\n    decimals: 18,\n    icon: \"https://apestate-chainlink.vercel.app/gps-green.png\",\n    price: 45000,\n  },\n  \"0x0000000000000000000000000000000000000004\": {\n    symbol: \"STN\",\n    name: \"Sathon\",\n    decimals: 18,\n    icon: \"https://apestate-chainlink.vercel.app/gps-red.png\",\n    price: 74000,\n  },\n};\n\nif (state.ethAccountId === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ ethAccountId: accounts[0] });\n  }\n}\n\nif (state.erc20Abi === undefined) {\n  const erc20Abi = fetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  );\n  if (!erc20Abi.ok) {\n    return \"Loading\";\n  }\n\n  State.update({ erc20Abi: erc20Abi.body });\n}\n\nif (state.landAbi === undefined) {\n  const landAbi = fetch(\n    \"https://gist.githubusercontent.com/Chomtana/8c3e04956fce0ab2e1c2de10235278ba/raw/5bb5edb179c14652bdc9b4ca49355dc252354811/LandExchangeAbi.json\"\n  );\n  if (!landAbi.ok) {\n    return \"Loading\";\n  }\n\n  State.update({ landAbi: landAbi.body });\n}\n\nif (state.ethAccountId && state.erc20Abi && state.landAbi) {\n  if (tokenId !== ethAddress) {\n    getLandBalance(tokenId, state.ethAccountId).then(\n      ({ decimals, balance }) => {\n        if (balance !== undefined && balance !== null) {\n          State.update({ balance });\n        }\n        if (state.metadata !== undefined) {\n          const metadata = state.metadata;\n          metadata.decimals = decimals;\n          State.update({ metadata });\n        }\n        State.update({ tokenDecimals: decimals });\n      }\n    );\n\n    State.update({\n      metadata: tokenMetas[tokenId],\n      price: tokenMetas[tokenId].price,\n    });\n  } else {\n    getNativeBalance().then((balance) => {\n      State.update({ balance, tokenDecimals: 18, metadata: ethMetadata });\n    });\n\n    const { price } = getErc20Tokendata(coinGeckoTokenId);\n\n    if (state.tokenDecimals && metadata && !metadata.decimals) {\n      metadata.decimals = state.tokenDecimals;\n    }\n    State.update({ metadata: ethMetadata, price });\n  }\n}\n\nif (\n  state.balance !== undefined &&\n  state.balance !== null\n\n  // &&\n  // state.metadata !== undefined &&\n  // state.price !== undefined\n) {\n  const res = {\n    balance: state.balance,\n    balance_hr: new Big(state?.balance ?? 0)\n      .div(new Big(10).pow(state?.metadata?.decimals ?? 1))\n      .toFixed(4),\n    balance_hr_full: new Big(state?.balance ?? 0)\n      .div(new Big(10).pow(state?.metadata?.decimals ?? 1))\n      .toFixed(),\n    price: state.price,\n    metadata: state.metadata,\n  };\n\n  if (typeof props.onLoad === \"function\") {\n    props.onLoad(res);\n  }\n\n  console.log(\"res: \", res);\n}\n\nreturn <div />;\n", "metadata": {"fork_of": "02f1a57368e5707a8cfb2744f72f416943d2fe2a4431ed382ba41f477f8fdec1/widget/apestate.token-data@108102560"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/02f1a57368e5707a8cfb2744f72f416943d2fe2a4431ed382ba41f477f8fdec1/widget/apestate.token-data", "fact_widget_deployments_id": "5ff0a2110cab633c384d32cbf4508522", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}