{"tx_hash": "G573E8ntpMBRRb2wNrVADzt1Hx6KpLvrc1r5Z3AJfCR2", "action_id_social": "7Th7iB4ED8WUFFjisBa3TMPztVv4BJcU8ZpTJdC7UaZJ-0-widget", "block_id": 98960503, "block_timestamp": "2023-08-16T19:57:15.957Z", "signer_id": "testbrrr.near", "widget_name": "intents", "source_code": "const CreatePrompt = styled.div`\n        margin:auto;\n        width:100%;\n        max-width: 400px;\n        border: 1px solid rgba(0,0,0, .15);\n        padding: 1.5rem;\n        border-radius: .7rem;\n        box-shadow: .3rem .3rem 1rem rgba(0,0,0, .1);\n        h1 {\n            font-size: 1.5rem;\n            font-weight: 600;\n            margin-bottom: 2rem;\n        }\n        input, textarea {\n            resize: none;\n            &::placeholder {\n                font-size: .8rem;\n            }\n            &::-webkit-inner-spin-button {\n                -webkit-appearance: none;\n            }\n\n            &:placeholder-shown {\n                & + label {\n                    opacity: 0;\n                    visibility: hidden;\n                    transform: translateY(-1rem);\n                }\n                & + .eth-label {\n                    opacity: 0;\n                    visibility: hidden;\n                    transform: translateX(-18rem);\n                }\n            }\n        }\n\n        label {\n            font-size: .8rem;\n            color: rgba(0,0,0,.4);\n            margin-left: .8rem;\n            margin-top: .2rem;\n            display: block;\n            transition: all .3s;\n        }\n\n        ul { \n          list-style-type: none;\n          position: relative;\n        }\n\n        li {\n          width: 100%;\n          position: absolute;\n          border: 1px solid rgba(0,0,0, .1);\n          top: 2px;\n          left: 0;\n          padding: 8px;\n          border-radius: 5px; \n          background-color: white;\n          box-shadow: 1px 4px 8px rgba(0,0,0,.2);\n          font-size: .8rem;\n\n          &:hover {\n            cursor: pointer;\n            background-color: #f0eded;\n          }\n        }\n\n        .eth-label {\n            margin-top: -1.7rem;\n            margin-left: 19rem;\n            margin-bottom: 2.6rem;\n        }\n        .form-group {\n            margin-bottom: .5rem;\n        }\n        .selected {\n          display: none;\n        }\n`;\n\nconst Button = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    font-weight:bold;\n    color:#fff;\n    width:100%;\n    height:50px;\n    border-radius:10px;\n    background-color:#2fbc2f;\n    text-align:center;\n    cursor: pointer;\n    user-select: none;\n    box-shadow: 0 3px 3px rgba(0,0,0,.3);\n\n    &:active {\n      box-shadow: 0 0 0 rgba(0,0,0,0);\n      transform: translateY(2px);\n    }\n`;\n\nState.init({\n  prompt: null,\n  response: \"\",\n  widget: null,\n  isLoading: false,\n});\n\nconst resendPrompt = (error) => {\n  console.log(\"Error\");\n  console.log(error);\n  const res = fetch(\n    `https://cmvfgq7owf7agld24uu4azhr5m0plyil.lambda-url.us-east-1.on.aws/`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        prompt: `What is missing from these inputs: ${error.inference} ?`,\n      }),\n    }\n  );\n\n  if (!res.body || res.body.error) return;\n  // console.log(\"getNamesForOwner raw res\", res.body);\n\n  const inference = res.body;\n  console.log(inference);\n  State.update({ response: inference });\n};\n\nconst sendPrompt = () => {\n  State.update({ isLoading: true });\n\n  asyncFetch(\n    `https://wf46uonphsiphh2tncdm2eigx40wluwj.lambda-url.us-east-1.on.aws/`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        prompt: state.prompt,\n      }),\n    }\n  ).then((res) => {\n    if (!res.body || res.body.error) return;\n    // console.log(\"getNamesForOwner raw res\", res.body);\n\n    const inference = res.body;\n    const parsed = JSON.parse(inference);\n    if (parsed.protocol && parsed.protocol === \"WETH\") {\n      const widget = (\n        <Widget\n          src=\"testbrrr.near/widget/WETH-Intent\"\n          props={{\n            ...parsed,\n            resendPrompt: resendPrompt,\n            inference: inference,\n            onClose: () => State.update({ response: null }),\n          }}\n        />\n      );\n      State.update({ response: parsed.text, widget: widget, isLoading: false });\n    } else if (parsed.protocol && parsed.protocol === \"Liquity\") {\n      const widget = (\n        <Widget\n          src=\"testbrrr.near/widget/Liquity-Intent\"\n          props={{\n            ...parsed,\n            resendPrompt: resendPrompt,\n            inference: inference,\n            onClose: () => State.update({ response: null }),\n          }}\n        />\n      );\n      State.update({ response: parsed.text, widget: widget, isLoading: false });\n    } else {\n      State.update({ response: inference, isLoading: false });\n    }\n  });\n};\n\nreturn (\n  <CreatePrompt>\n    <div\n      style={{\n        display: \"none\",\n      }}\n    ></div>\n\n    <h1>Intents</h1>\n    <div className=\"form-group\">\n      <input\n        id=\"name\"\n        type=\"text\"\n        placeholder=\"What is Intents?\"\n        value={state.prompt}\n        onChange={(event) => State.update({ prompt: event.target.value })}\n        required\n      />\n    </div>\n\n    {state.isLoading ? (\n      <img\n        height=\"20\"\n        width=\"70\"\n        style={{ margin: 10 }}\n        src=\"https://ipfs.io/ipfs/bafkreidmr43cuwv5kre4fzrum4lgpkkiwwj47nl54hunfsvgutyhocklza\"\n      />\n    ) : null}\n\n    {!state.isLoading ? <p>{state.response ? state.response : null}</p> : null}\n\n    {state.widget}\n\n    <Button onClick={() => sendPrompt()}>Send</Button>\n  </CreatePrompt>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testbrrr.near/widget/intents", "fact_widget_deployments_id": "f8bd83cdeb2c9375f132e8906e2e228f", "inserted_timestamp": "2023-08-16T21:45:08.725Z", "modified_timestamp": "2023-08-16T21:45:08.725Z", "__row_index": 8}