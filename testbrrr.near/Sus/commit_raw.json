{"tx_hash": "5ysQxzqqF7g9KWbrB5o8vt9CoheEM59uASkSHjgDMWuL", "action_id_social": "6XukVKXNog1GLki6npuTiMAXm6xsWyJaT4Wf7G3uRunQ-0-widget", "block_id": 99813814, "block_timestamp": "2023-08-28T00:20:37.748Z", "signer_id": "testbrrr.near", "widget_name": "Sus", "source_code": "const availableAssets = {\n  // rETH: \"0x62bc478ffc429161115a6e4090f819ce5c50a5d9\",\n  WETH: \"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3\",\n  // cbETH: \"0x178e141a0e3b34152f73ff610437a7bf9b83267a\",\n  // stETH: \"0xcef9cd8bb310022b5582e55891af043213110783\",\n};\n\nconst assetsArray = [\n  // \"0x62bc478ffc429161115a6e4090f819ce5c50a5d9\",\n  \"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3\",\n  // \"0x178e141a0e3b34152f73ff610437a7bf9b83267a\",\n  // \"0xcef9cd8bb310022b5582e55891af043213110783\",\n];\n\nconst getAsset = (asset) => {\n  return availableAssets[asset];\n};\n\nconst getAssetFromAddress = (address) => {\n  return Object.keys(availableAssets).find(\n    (key) => availableAssets[key] === address\n  );\n};\n\nconst Button = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    font-weight:bold;\n    color:#fff;\n    width:100%;\n    max-width: 400px\n    height:50px;\n    border-radius:10px;\n    background-color:#2fbc2f;\n    text-align:center;\n    cursor: pointer;\n    user-select: none;\n    box-shadow: 0 3px 3px rgba(0,0,0,.3);\n    margin-top: 15px;\n\n    &:active {\n      box-shadow: 0 0 0 rgba(0,0,0,0);\n      transform: translateY(2px);\n    }\n`;\n\nState.init({\n  coll: null,\n  borrow: 0,\n  borrowingFee: 0,\n  totalcoll: 200,\n  collateralRatio: 0,\n  liquidationReserve: 200,\n  txLock: false,\n  msg: \"\",\n  sender: undefined,\n  chainId: undefined,\n  balance: undefined,\n  price: 0,\n  isOpenVessel: undefined,\n  isBlocked: true,\n  debt: null,\n  pendingLUSDDebtReward: null,\n  pendingETHReward: null,\n  tx: null,\n  balances: [],\n  stopReload: false,\n  stabilityBalances: 0,\n  success: false,\n});\n\nconst setcoll = (depositChangeEvent) => {\n  const coll = Number(depositChangeEvent.target.value);\n  const { totalcoll } = state;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({ coll, collateralRatio });\n\n  validateVessel();\n};\n\nconst setBorrow = (borrowChangeEvent) => {\n  const { coll, liquidationReserve } = state;\n  const borrow = Number(borrowChangeEvent.target.value);\n  const borrowingFee = (borrow * 0.5) / 100;\n  const totalcoll =\n    borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({ borrow, borrowingFee, totalcoll, collateralRatio });\n  validateVessel();\n};\n\nconst validateVessel = () => {\n  const { coll, borrow, totalcoll, balance } = state;\n\n  if (borrow < 1800) {\n    State.update({\n      msg: \"Borrow must be at least 1800 LUSD.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n  if (collateralRatio < 110) {\n    State.update({\n      msg: \"Collateral ratio must be at least 110%.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  if (coll > Number(balance)) {\n    State.update({\n      msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH.`,\n      isBlocked: true,\n    });\n    return;\n  }\n\n  if (state.isOpenVessel === true) {\n    State.update({\n      msg: \"you already have an active Vessel.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  State.update({ msg: \"\", isBlocked: false });\n};\n\nconst borrowerOperationAddress = \"0xf58cc15b92ee257bc55958c846100dbb38775595\";\n\nconst vesselManagerAddress = \"0x2979F8010b9fA8Da13Cc4Ff42bd0115dC855A779\";\n\nconst stabilityPoolAddress = \"0x8f8941F1900E9C0cE06Dce3Af19aA8DF26a6964f\";\n\nconst borrowerOperationAbi = fetch(\n  \"https://api.etherscan.io/api?module=contract&action=getabi&address=0x9c4e709632b752b4744a37bd991ba31f320fa82b\"\n);\n\nconst vesselManagerAbi = fetch(\n  \"https://gist.githubusercontent.com/kcole16/667331152bdb1e9cef785e7cd07d6087/raw/52b5f915793ca9ef1d5314c47ab20bddf90aa463/test.json\"\n);\n\nconst stabilityPoolAbi = fetch(\n  \"https://gist.githubusercontent.com/kcole16/7b83188f08f15112d2221bd08e15a893/raw/91c3f7b06b1aa9e5405fc4c993a51dcb7fd6b8ac/abi.json\"\n);\n\nconst priceFeedAddress = \"0x07dD4Ce17De84bA13Fc154A7FdB46fC362a41E2C\";\nconst priceFeedAbi = fetch(\n  \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/price-feed-abi.json\"\n);\n\nconst lUSDAddress = \"0xb0e99590cF3Ddfdc19e68F91f7fe0626790cDb53\";\nconst AssetContractAbi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\n\nif (!borrowerOperationAbi.ok) return \"loading...\";\nif (!priceFeedAbi.ok) return \"loading...\";\n\n// const iface = new ethers.utils.Interface(borrowerOperationAbi.body);\n\nconst openVessel = () => {\n  const asset = getAsset(props.asset);\n  const assetContract = new ethers.Contract(\n    asset,\n    AssetContractAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  const vesselManagerContract = new ethers.Contract(\n    vesselManagerAddress,\n    vesselManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  vesselManagerContract.isVesselActive(asset, state.sender).then((isActive) => {\n    console.log(isActive);\n    if (isActive) {\n      console.log(\"Vessel is already active for this asset\");\n      return;\n    }\n\n    if (!state.txLock) {\n      State.update({ txLock: true });\n      assetContract\n        .approve(\n          borrowerOperationAddress,\n          ethers.BigNumber.from(props.collateralAmount * 100)\n            .mul(\"10000000000000000\")\n            .toString()\n        )\n        .then((approveTx) => {\n          State.update({ tx: approveTx.hash });\n          return approveTx.wait();\n        })\n        .then(() => {\n          borrowerOperationContract.openVessel(\n            asset,\n            ethers.BigNumber.from(props.collateralAmount * 100)\n              .mul(\"10000000000000000\")\n              .toString(),\n            ethers.BigNumber.from(props.susAmount * 100)\n              .mul(\"10000000000000000\")\n              .toString(),\n            \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n            \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n            {\n              gasLimit: 2500000,\n            }\n          );\n        })\n        .then((finalTx) => {\n          State.update({ tx: finalTx.hash });\n          return finalTx.wait();\n        })\n        .then(() => {\n          State.update({ txLock: false, success: true });\n          getEntireDebtAndColl();\n        });\n    }\n  });\n};\n\nconst withdrawDebtTokens = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract\n    .withdrawDebtTokens(\n      getAsset(props.asset),\n      ethers.BigNumber.from(props.amount * 100)\n        .mul(\"10000000000000000\")\n        .toString(),\n      // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\"\n    )\n    .then((finalTx) => {\n      State.update({ tx: finalTx.hash });\n      return finalTx.wait();\n    })\n    .then(() => {\n      State.update({ txLock: false, success: true });\n      getEntireDebtAndColl();\n    });\n};\n\nconst withdrawColl = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract\n    .withdrawColl(\n      getAsset(props.asset),\n      ethers.BigNumber.from(props.amount * 100)\n        .mul(\"10000000000000000\")\n        .toString(),\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      {\n        // gasPrice: state.gasPrice,\n        gasLimit: 25000000,\n      }\n    )\n    .then((finalTx) => {\n      State.update({ tx: finalTx.hash });\n      return finalTx.wait();\n    })\n    .then(() => {\n      State.update({ txLock: false, success: true });\n      getEntireDebtAndColl();\n    });\n};\n\nconst repayDebtTokens = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n  if (!state.txLock) {\n    State.update({ txLock: true });\n    borrowerOperationContract\n      .repayDebtTokens(\n        getAsset(props.asset),\n        ethers.BigNumber.from(props.amount * 100)\n          .mul(\"10000000000000000\")\n          .toString(),\n        \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n        \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n        {\n          gasLimit: 25000000,\n        }\n      )\n      .then((finalTx) => {\n        State.update({ tx: finalTx.hash });\n        return finalTx.wait();\n      })\n      .then(() => {\n        State.update({ txLock: false, success: true });\n        getEntireDebtAndColl();\n      });\n  }\n};\n\nconst addColl = () => {\n  const asset = getAsset(props.asset);\n  const assetContract = new ethers.Contract(\n    asset,\n    AssetContractAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  assetContract\n    .approve(\n      borrowerOperationAddress,\n      ethers.BigNumber.from(props.amount * 100)\n        .mul(\"10000000000000000\")\n        .toString()\n    )\n    .then((approveTx) => {\n      State.update({ tx: approveTx.hash });\n      return approveTx.wait();\n    })\n    .then(() => {\n      borrowerOperationContract.addColl(\n        asset,\n        ethers.BigNumber.from(props.amount * 100)\n          .mul(\"10000000000000000\")\n          .toString(),\n        \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n        \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n        {\n          gasLimit: 25000000,\n        }\n      );\n    })\n    .then((finalTx) => {\n      State.update({ tx: finalTx.hash });\n      return finalTx.wait();\n    })\n    .then(() => {\n      State.update({ txLock: false, success: true });\n      getEntireDebtAndColl();\n    });\n};\n\nconst closeVessel = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract\n    .closeVessel(getAsset(props.asset))\n    .then((finalTx) => {\n      State.update({ tx: finalTx.hash });\n      return finalTx.wait();\n    })\n    .then(() => {\n      State.update({ txLock: false, success: true });\n      getEntireDebtAndColl();\n    });\n};\n\nconst claimCollateral = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract\n    .claimCollateral(getAsset(props.asset))\n    .then((finalTx) => {\n      State.update({ tx: finalTx.hash });\n      return finalTx.wait();\n    })\n    .then(() => {\n      State.update({ txLock: false, success: true });\n      getEntireDebtAndColl();\n    });\n};\n\nconst provideToSP = () => {\n  const stabilityPoolContract = new ethers.Contract(\n    stabilityPoolAddress,\n    stabilityPoolAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  if (!state.txLock) {\n    State.update({ txLock: true });\n    stabilityPoolContract\n      .provideToSP(\n        ethers.BigNumber.from(props.amount * 100)\n          .mul(\"10000000000000000\")\n          .toString(),\n        assetsArray\n      )\n      .then((finalTx) => {\n        State.update({ tx: finalTx.hash });\n        return finalTx.wait();\n      })\n      .then(() => {\n        State.update({ txLock: false, success: true });\n        getEntireDebtAndColl();\n      });\n  }\n};\n\nconst withdrawFromSP = () => {\n  const stabilityPoolContract = new ethers.Contract(\n    stabilityPoolAddress,\n    stabilityPoolAbi.body,\n    Ethers.provider().getSigner()\n  );\n  if (!state.txLock) {\n    State.update({ txLock: true });\n    stabilityPoolContract\n      .withdrawFromSP(\n        ethers.BigNumber.from(props.amount * 100)\n          .mul(\"10000000000000000\")\n          .toString(),\n        assetsArray\n      )\n      .then((finalTx) => {\n        State.update({ tx: finalTx.hash });\n        return finalTx.wait();\n      })\n      .then(() => {\n        State.update({ txLock: false, success: true });\n        getEntireDebtAndColl();\n      });\n  }\n};\n\nconst vesselManagerContract = new ethers.Contract(\n  vesselManagerAddress,\n  vesselManagerAbi.body,\n  Ethers.provider().getSigner()\n);\n\nlet assets = Object.values(availableAssets);\n\nconst processAsset = (index, balances) => {\n  let asset = assets[index];\n  if (asset && !state.stopReload) {\n    vesselManagerContract\n      .getEntireDebtAndColl(asset, state.sender)\n      .then((results) => {\n        balances.push({\n          asset: getAssetFromAddress(asset),\n          debt: results[0].div(\"1000000000000000000\").toString(),\n          coll: ethers.utils.formatEther(results[1].toString()),\n          pendingDebtTokenReward: results[2].toString(),\n          pendingAssetReward: results[3].toString(),\n        });\n        processAsset(index + 1, balances); // Process the next asset.\n      });\n  } else {\n    State.update({ balances: balances, stopReload: true });\n  }\n};\n\nconst getEntireDebtAndColl = () => {\n  let balances = [...state.balances];\n\n  const stabilityPoolContract = new ethers.Contract(\n    stabilityPoolAddress,\n    stabilityPoolAbi.body,\n    Ethers.provider().getSigner()\n  );\n  stabilityPoolContract\n    .getCompoundedDebtTokenDeposits(state.sender)\n    .then((results) => {\n      console.log(results);\n      State.update({\n        stabilityBalances: results.div(\"1000000000000000000\").toString(),\n      });\n    })\n    .then(() => {\n      processAsset(0, balances); // Start the chain with the first asset.\n    });\n};\n\nconst renderConfirmationUI = (props) => {\n  if (props.action === \"display\") {\n    getEntireDebtAndColl();\n  } else {\n    return (\n      <div>\n        <h5>Transaction Details</h5>\n        {Object.entries(props)\n          .filter(\n            ([key, value]) => typeof value !== \"function\" && key !== \"text\"\n          )\n          .map(([key, value]) => (\n            <div key={key}>\n              <strong>{key}:</strong> {value.toString()}\n            </div>\n          ))}\n      </div>\n    );\n  }\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// if (\n//   state.sender &&\n//   Ethers.send(\"eth_requestAccounts\", [])[0] &&\n//   state.chainId === 11155111 &&\n//   state.price === 0\n// ) {\n//   const priceFeedContract = new ethers.Contract(\n//     priceFeedAddress,\n//     priceFeedAbi.body,\n//     Ethers.provider().getSigner()\n//   );\n\n//   const vesselManagerContract = new ethers.Contract(\n//     vesselManagerAddress,\n//     vesselManagerAbi.body,\n//     Ethers.provider().getSigner()\n//   );\n\n//   priceFeedContract.getPrice().then((priceRes) => {\n//     const price = Number(ethers.utils.formatEther(priceRes));\n\n//     State.update({ price });\n//     vesselManagerContract.getTCR(priceRes).then((tcrRes) => {\n//       const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\n\n//       State.update({ tcr });\n//     });\n//   });\n// }\n\n// if (\n//   state.sender &&\n//   state.chainId === 11155111 &&\n//   state.isOpenVessel === undefined\n// ) {\n//   const vesselManagerContract = new ethers.Contract(\n//     vesselManagerAddress,\n//     vesselManagerAbi.body,\n//     Ethers.provider().getSigner()\n//   );\n\n//   vesselManagerContract.getVesselStatus(state.sender).then((res) => {\n//     const isOpenVessel = ethers.utils.formatEther(res).includes(\"1\");\n//     State.update({ isOpenVessel });\n//   });\n// }\n\nconst confirmAction = () => {\n  if (\n    props.action === \"borrow\" &&\n    props.susAmount &&\n    props.collateralAmount &&\n    props.asset\n  ) {\n    if (\n      typeof props.susAmount === \"number\" &&\n      typeof props.collateralAmount === \"number\" &&\n      props.collateralAmount > 0\n    ) {\n      openVessel();\n    } else {\n      props.resendPrompt(props);\n    }\n  } else if (props.action === \"repay\") {\n    repayDebtTokens();\n  } else if (props.action === \"display\") {\n    getEntireDebtAndColl();\n  } else if (props.action === \"withdraw\") {\n    withdrawColl();\n  } else if (props.action === \"deposit\") {\n    addColl();\n  } else if (props.action === \"close\") {\n    closeVessel();\n  } else if (props.action === \"claim\") {\n    claimCollateral();\n  } else if (props.action === \"provide\") {\n    provideToSP();\n  } else if (props.action === \"remove\") {\n    withdrawFromSP();\n  } else {\n    props.resendPrompt(props);\n  }\n};\n\nlet confirmUI = renderConfirmationUI(props);\n\nreturn (\n  <div>\n    {!state.success ? confirmUI : <p>Transaction complete</p>}\n\n    {state.tx && !state.success ? (\n      <div>\n        <p>\n          View your transaction:{\" \"}\n          <a\n            href={\"https://goerli.etherscan.io/tx/\" + state.tx}\n            target=\"_blank\"\n          >\n            {state.tx}\n          </a>\n        </p>\n      </div>\n    ) : (\n      <div></div>\n    )}\n\n    {state.balances.map((balance) => {\n      return (\n        <div>\n          <p>Debt: {balance.debt} SUS</p>\n          <p>\n            Collateral: {balance.coll} {balance.asset}\n          </p>\n          <p>Pending Asset Reward: {balance.pendingAssetReward} ETH</p>\n          <p>Pending SUS Debt Reward: {balance.pendingDebtTokenReward} SUS</p>\n        </div>\n      );\n    })}\n\n    {state.stabilityBalances !== 0 ? (\n      <div>\n        <p>Stability Pool: {state.stabilityBalances} SUS</p>\n      </div>\n    ) : null}\n\n    {props.action !== \"display\" && !state.success ? (\n      <Button onClick={() => confirmAction()}>Confirm Action</Button>\n    ) : null}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testbrrr.near/widget/Sus", "fact_widget_deployments_id": "12dccaf35e622a9fdaeeabca2dc86bdb", "inserted_timestamp": "2023-08-28T02:28:04.585Z", "modified_timestamp": "2023-08-28T02:28:04.585Z", "__row_index": 39}