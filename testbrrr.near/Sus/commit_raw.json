{"tx_hash": "GUABRyiiEdLn5XC8jJ78p3NyPasrZ6Za6NLAaEj4Bkne", "action_id_social": "G3vhnznBgkdjVJNEe48Dp8WpF3ygW8GHA3bSeyTpZeSB-0-widget", "block_id": 98606980, "block_timestamp": "2023-08-12T01:59:10.044Z", "signer_id": "testbrrr.near", "widget_name": "Sus", "source_code": "const availableAssets = {\n  rETH: \"0x62bc478ffc429161115a6e4090f819ce5c50a5d9\",\n  wETH: \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\",\n  cbETH: \"0x178e141a0e3b34152f73ff610437a7bf9b83267a\",\n  stETH: \"0xcef9cd8bb310022b5582e55891af043213110783\",\n};\n\nconst getAsset = (asset) => {\n  return availableAssets[asset];\n};\n\nconst setcoll = (depositChangeEvent) => {\n  const coll = Number(depositChangeEvent.target.value);\n  const { totalcoll } = state;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({ coll, collateralRatio });\n\n  validateVessel();\n};\n\nconst setBorrow = (borrowChangeEvent) => {\n  const { coll, liquidationReserve } = state;\n  const borrow = Number(borrowChangeEvent.target.value);\n  const borrowingFee = (borrow * 0.5) / 100;\n  const totalcoll =\n    borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({ borrow, borrowingFee, totalcoll, collateralRatio });\n  validateVessel();\n};\n\nconst validateVessel = () => {\n  const { coll, borrow, totalcoll, balance } = state;\n\n  if (borrow < 1800) {\n    State.update({\n      msg: \"Borrow must be at least 1800 LUSD.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n  if (collateralRatio < 110) {\n    State.update({\n      msg: \"Collateral ratio must be at least 110%.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  if (coll > Number(balance)) {\n    State.update({\n      msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH.`,\n      isBlocked: true,\n    });\n    return;\n  }\n\n  if (state.isOpenVessel === true) {\n    State.update({\n      msg: \"you already have an active Vessel.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  State.update({ msg: \"\", isBlocked: false });\n};\n\nconst borrowerOperationAddress = \"0xC2AE62aC744c03E9B7288CB04abaa1E3aDBD6ec0\";\n\nconst vesselManagerAddress = \"0x30B52bfa3A923D14BbBA08BDfC3Ff05A7a02527E\";\n\nconst stabilityPoolAddress = \"0xBF4145c4C2E9D448787f3be6d90a677b54aec9ef\";\n\nconst borrowerOperationAbi = fetch(\n  \"https://api-sepolia.etherscan.io/api?module=contract&action=getabi&address=0xcb306e2509ca52872c2d04160F3c1fa7bc013064\"\n);\n\nconst vesselManagerAbi = fetch(\n  \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/trove-manager-abi.json\"\n);\n\nconst priceFeedAddress = \"0x07dD4Ce17De84bA13Fc154A7FdB46fC362a41E2C\";\nconst priceFeedAbi = fetch(\n  \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/price-feed-abi.json\"\n);\n\nconst lUSDAddress = \"0xb0e99590cF3Ddfdc19e68F91f7fe0626790cDb53\";\nconst lUSDContractAbi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\n\nif (!borrowerOperationAbi.ok) return \"loading...\";\nif (!priceFeedAbi.ok) return \"loading...\";\n\n// const iface = new ethers.utils.Interface(borrowerOperationAbi.body);\n\nconst openVessel = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n  console.log(props);\n  borrowerOperationContract.openVessel(\n    getAsset(props.asset),\n    ethers.BigNumber.from(props.collateralAmount * 100)\n      .mul(\"10000000000000000\")\n      .toString(),\n    ethers.BigNumber.from(props.susAmount * 100)\n      .mul(\"10000000000000000\")\n      .toString(),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      gasLimit: 25000000,\n    }\n  );\n};\n\nconst withdrawDebtTokens = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.withdrawDebtTokens(\n    getAsset(props.asset),\n    ethers.BigNumber.from(props.borrow * 100)\n      .mul(\"10000000000000000\")\n      .toString(),\n    // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\"\n  );\n};\n\nconst withdrawColl = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.withdrawColl(\n    getAsset(props.asset),\n    ethers.utils.parseUnits(props.ethCollateralAmount.toString(), \"ether\"),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      // gasPrice: state.gasPrice,\n      gasLimit: 25000000,\n    }\n  );\n};\n\nconst repayLUSD = () => {\n  const lUSDContract = new ethers.Contract(\n    lUSDAddress,\n    lUSDContractAbi.body,\n    Ethers.provider().getSigner()\n  );\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n  console.log(props);\n\n  lUSDContract\n    .approve(\n      borrowerOperationAddress,\n      ethers.BigNumber.from(props.amount * 100)\n        .mul(\"10000000000000000\")\n        .toString()\n    )\n    .then((approveTx) => {\n      return approveTx.wait();\n    })\n    .then(() => {\n      borrowerOperationContract.repayLUSD(\n        ethers.BigNumber.from(props.amount * 100)\n          .mul(\"10000000000000000\")\n          .toString(),\n        \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n        \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n        {\n          gasLimit: 25000000,\n        }\n      );\n    });\n};\n\nconst addColl = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.addColl(\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      value: ethers.BigNumber.from(\n        (props.coll * 1000000000000000000).toString()\n      ),\n      // gasPrice: state.gasPrice,\n      // gasLimit: 25000000,\n    }\n  );\n};\n\nconst moveETHGainToVessel = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.moveETHGainToVessel(\n    state.sender,\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\"\n  );\n};\n\nconst closeVessel = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.closeVessel();\n};\n\nconst claimCollateral = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.claimCollateral();\n};\n\nconst getEntireDebtAndColl = () => {\n  const vesselManagerContract = new ethers.Contract(\n    vesselManagerAddress,\n    vesselManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  vesselManagerContract.getEntireDebtAndColl(state.sender).then((results) => {\n    console.log(debt);\n    State.update({\n      debt: results[0].div(\"1000000000000000000\").toString(),\n      coll: ethers.utils.formatEther(results[1].toString()),\n      pendingLUSDDebtReward: results[2].toString(),\n      pendingETHReward: results[3].toString(),\n    });\n  });\n};\n\nState.init({\n  coll: null,\n  borrow: 0,\n  borrowingFee: 0,\n  totalcoll: 200,\n  collateralRatio: 0,\n  liquidationReserve: 200,\n  msg: \"\",\n  sender: undefined,\n  chainId: undefined,\n  balance: undefined,\n  price: 0,\n  isOpenVessel: undefined,\n  isBlocked: true,\n  debt: null,\n  pendingLUSDDebtReward: null,\n  pendingETHReward: null,\n});\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\nif (\n  state.sender &&\n  Ethers.send(\"eth_requestAccounts\", [])[0] &&\n  state.chainId === 11155111 &&\n  state.price === 0\n) {\n  const priceFeedContract = new ethers.Contract(\n    priceFeedAddress,\n    priceFeedAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const vesselManagerContract = new ethers.Contract(\n    vesselManagerAddress,\n    vesselManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  priceFeedContract.getPrice().then((priceRes) => {\n    const price = Number(ethers.utils.formatEther(priceRes));\n\n    State.update({ price });\n    vesselManagerContract.getTCR(priceRes).then((tcrRes) => {\n      const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\n\n      State.update({ tcr });\n    });\n  });\n}\n\nif (\n  state.sender &&\n  state.chainId === 11155111 &&\n  state.isOpenVessel === undefined\n) {\n  const vesselManagerContract = new ethers.Contract(\n    vesselManagerAddress,\n    vesselManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  vesselManagerContract.getVesselStatus(state.sender).then((res) => {\n    const isOpenVessel = ethers.utils.formatEther(res).includes(\"1\");\n    State.update({ isOpenVessel });\n  });\n}\n\nif (\n  props.action === \"borrow\" &&\n  props.susAmount &&\n  props.collateralAmount &&\n  props.asset\n) {\n  if (\n    typeof props.susAmount === \"number\" &&\n    typeof props.collateralAmount === \"number\" &&\n    props.collateralAmount > 0\n  ) {\n    openVessel();\n  } else {\n    props.resendPrompt(props);\n  }\n} else if (props.action === \"repay\") {\n  repayDebtTokens();\n} else if (props.action === \"display\") {\n  getEntireDebtAndColl();\n} else if (props.action === \"withdraw\") {\n  withdrawColl();\n} else {\n  props.resendPrompt(props);\n}\n\nreturn (\n  <div>\n    {state.debt ? (\n      <div>\n        <p>Debt: {state.debt} LUSD</p>\n        <p>Collateral: {state.coll} ETH</p>\n        <p>Pending ETH Reward: {state.pendingETHReward} ETH</p>\n        <p>Pending LUSD Debt Reward: {state.pendingLUSDDebtReward} LUSD</p>\n      </div>\n    ) : (\n      <div></div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testbrrr.near/widget/Sus", "fact_widget_deployments_id": "4c1fa3b89d2116e6f7bc16b400cc592d", "inserted_timestamp": "2023-08-12T03:37:54.191Z", "modified_timestamp": "2023-08-12T03:37:54.191Z", "__row_index": 3}