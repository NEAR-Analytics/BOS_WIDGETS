{"tx_hash": "FXSYjLiymdFVsfUX4428e54xgWY96XVNWeXPifT8TiiG", "action_id_social": "AWuxw9g6KMT49FACi9bsLjtvA3LUDWAQyqP9sike64j7-0-widget", "block_id": 98167794, "block_timestamp": "2023-08-06T02:04:24.378Z", "signer_id": "testbrrr.near", "widget_name": "Untitled-1", "source_code": "const setcoll = (depositChangeEvent) => {\n    const coll = Number(depositChangeEvent.target.value);\n    const { totalcoll } = state;\n    const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n  \n    State.update({ coll, collateralRatio });\n  \n    validateTrove();\n  };\n  \n  const setBorrow = (borrowChangeEvent) => {\n    const { coll, liquidationReserve } = state;\n    const borrow = Number(borrowChangeEvent.target.value);\n    const borrowingFee = (borrow * 0.5) / 100;\n    const totalcoll =\n      borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\n    const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n  \n    State.update({ borrow, borrowingFee, totalcoll, collateralRatio });\n    validateTrove();\n  };\n  \n  const validateTrove = () => {\n    const { coll, borrow, totalcoll, balance } = state;\n  \n    if (borrow < 1800) {\n      State.update({\n        msg: \"Borrow must be at least 1800 LUSD.\",\n        isBlocked: true,\n      });\n      return;\n    }\n  \n    const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n    if (collateralRatio < 110) {\n      State.update({\n        msg: \"Collateral ratio must be at least 110%.\",\n        isBlocked: true,\n      });\n      return;\n    }\n  \n    if (coll > Number(balance)) {\n      State.update({\n        msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH.`,\n        isBlocked: true,\n      });\n      return;\n    }\n  \n    if (state.isOpenTrove === true) {\n      State.update({\n        msg: \"you already have an active Trove.\",\n        isBlocked: true,\n      });\n      return;\n    }\n  \n    State.update({ msg: \"\", isBlocked: false });\n  };\n  \n  const borrowerOperationAddress = \"0xD69fC8928D4F3229341cb431263F1EBd87B1ade8\";\n  \n  const troveManagerAddress = \"0x0ECDF34731eE8Dd46caa99a1AAE173beD1B32c67\";\n  \n  const stabilityPoolAddress = \"\"\n  \n  const borrowerOperationAbi = fetch(\n    \"https://api-sepolia.etherscan.io/api?module=contract&action=getabi&address=0xcb306e2509ca52872c2d04160F3c1fa7bc013064\"\n  );\n  \n  const troveManagerAbi = fetch(\n    \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/trove-manager-abi.json\"\n  );\n  \n  const priceFeedAddress = \"0x07dD4Ce17De84bA13Fc154A7FdB46fC362a41E2C\";\n  const priceFeedAbi = fetch(\n    \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/price-feed-abi.json\"\n  );\n  \n  if (!borrowerOperationAbi.ok) return \"loading...\";\n  if (!priceFeedAbi.ok) return \"loading...\";\n  \n  // const iface = new ethers.utils.Interface(borrowerOperationAbi.body);\n  \n  const openTrove = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.openTrove(\n      ethers.BigNumber.from(5000000000000000),\n      ethers.BigNumber.from(props.borrow * 100)\n        .mul(\"10000000000000000\")\n        .toString(),\n      // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      {\n        value: ethers.BigNumber.from(\n          (props.coll * 1000000000000000000).toString()\n        ),\n        // gasPrice: state.gasPrice,\n        // gasLimit: 25000000,\n      }\n    );\n  };\n  \n  const withdrawLUSD = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.withdrawLUSD(\n      ethers.BigNumber.from(5000000000000000),\n      ethers.BigNumber.from(props.borrow * 100)\n        .mul(\"10000000000000000\")\n        .toString(),\n      // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      {\n        value: ethers.BigNumber.from(\n          (props.coll * 1000000000000000000).toString()\n        ),\n        // gasPrice: state.gasPrice,\n        // gasLimit: 25000000,\n      }\n    );\n  };\n  \n  const withdrawColl = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.withdrawColl(\n        ethers.utils.parseUnits(props.amount,\"ether\")\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      {\n        value: ethers.BigNumber.from(\n          (props.coll * 1000000000000000000).toString()\n        ),\n        // gasPrice: state.gasPrice,\n        // gasLimit: 25000000,\n      }\n    );\n  };\n  \n  const repayLUSD = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.repayLUSD(\n      ethers.BigNumber.from(props.borrow * 100)\n        .mul(\"10000000000000000\")\n        .toString(),\n      // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      {\n        value: ethers.BigNumber.from(\n          (props.coll * 1000000000000000000).toString()\n        ),\n        // gasPrice: state.gasPrice,\n        // gasLimit: 25000000,\n      }\n    );\n  };\n  \n  const addColl = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.addColl(\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      {\n        value: ethers.BigNumber.from(\n          (props.coll * 1000000000000000000).toString()\n        ),\n        // gasPrice: state.gasPrice,\n        // gasLimit: 25000000,\n      }\n    );\n  };\n  \n  const moveETHGainToTrove = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.moveETHGainToTrove(\n      state.sender,\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n      \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\"\n    );\n  };\n  \n  const closeTrove = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.closeTrove();\n  };\n  \n  const claimCollateral = () => {\n    const borrowerOperationContract = new ethers.Contract(\n      borrowerOperationAddress,\n      borrowerOperationAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    borrowerOperationContract.claimCollateral();\n  };\n\n  const getEntireDebtAndColl = () => {\n    const troveManagerContract = new ethers.Contract(\n      troveManagerAddress,\n      troveManagerAbi.body.result,\n      Ethers.provider().getSigner()\n    );\n  \n    troveManagerContract.callStatic.getEntireDebtAndColl(state.sender).then((debt, coll, pendingLUSDDebtReward, pendingETHReward) => {\n        console.log(debt, coll, pendingLUSDDebtReward, pendingETHReward)\n        State.update({ debt, coll, pendingLUSDDebtReward, pendingETHReward });\n      });\n  };\n  \n  State.init({\n    coll: 0,\n    borrow: 0,\n    borrowingFee: 0,\n    totalcoll: 200,\n    collateralRatio: 0,\n    liquidationReserve: 200,\n    msg: \"\",\n    sender: undefined,\n    chainId: undefined,\n    balance: undefined,\n    price: 0,\n    isOpenTrove: undefined,\n    isBlocked: true,\n  });\n  \n  if (state.sender === undefined) {\n    const accounts = Ethers.send(\"eth_requestAccounts\", []);\n    if (accounts.length) {\n      State.update({ sender: accounts[0] });\n    }\n  }\n  \n  if (state.balance === undefined && state.sender) {\n    Ethers.provider()\n      .getBalance(state.sender)\n      .then((balance) => {\n        State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n      });\n  }\n  \n  if (\n    state.sender &&\n    Ethers.send(\"eth_requestAccounts\", [])[0] &&\n    state.chainId === 11155111 &&\n    state.price === 0\n  ) {\n    const priceFeedContract = new ethers.Contract(\n      priceFeedAddress,\n      priceFeedAbi.body,\n      Ethers.provider().getSigner()\n    );\n  \n    const troveManagerContract = new ethers.Contract(\n      troveManagerAddress,\n      troveManagerAbi.body,\n      Ethers.provider().getSigner()\n    );\n  \n    priceFeedContract.getPrice().then((priceRes) => {\n      const price = Number(ethers.utils.formatEther(priceRes));\n  \n      State.update({ price });\n      troveManagerContract.getTCR(priceRes).then((tcrRes) => {\n        const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\n  \n        State.update({ tcr });\n      });\n    });\n  }\n  \n  if (\n    state.sender &&\n    state.chainId === 11155111 &&\n    state.isOpenTrove === undefined\n  ) {\n    const troveManagerContract = new ethers.Contract(\n      troveManagerAddress,\n      troveManagerAbi.body,\n      Ethers.provider().getSigner()\n    );\n  \n    troveManagerContract.getTroveStatus(state.sender).then((res) => {\n      const isOpenTrove = ethers.utils.formatEther(res).includes(\"1\");\n      State.update({ isOpenTrove });\n    });\n  }\n  \n  if (props.action === \"borrow\") {\n    openTrove();\n  } else if (props.action === \"repay\") {\n    closeTrove();\n  } else if (props.action === \"display\") {\n    getEntireDebtAndColl()\n  }\n  \n  return <div></div>;\n  ", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testbrrr.near/widget/Untitled-1", "fact_widget_deployments_id": "8315819a31188ed710a489d34f7a4648", "inserted_timestamp": "2023-08-06T03:38:40.483Z", "modified_timestamp": "2023-08-06T03:38:40.483Z", "__row_index": 37}