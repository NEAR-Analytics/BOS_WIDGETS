{"tx_hash": "5JbmeumJgafEkF4trrt1NrdmPYy7qm1qHjjm4LJMgsSJ", "action_id_social": "EN5A8895ZHR2Q4MszDcnWK27656ktspzjWZM5wAyoPjj-0-widget", "block_id": 98171020, "block_timestamp": "2023-08-06T03:04:28.811Z", "signer_id": "testbrrr.near", "widget_name": "Untitled-1", "source_code": "const setcoll = (depositChangeEvent) => {\n  const coll = Number(depositChangeEvent.target.value);\n  const { totalcoll } = state;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({ coll, collateralRatio });\n\n  validateTrove();\n};\n\nconst setBorrow = (borrowChangeEvent) => {\n  const { coll, liquidationReserve } = state;\n  const borrow = Number(borrowChangeEvent.target.value);\n  const borrowingFee = (borrow * 0.5) / 100;\n  const totalcoll =\n    borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({ borrow, borrowingFee, totalcoll, collateralRatio });\n  validateTrove();\n};\n\nconst validateTrove = () => {\n  const { coll, borrow, totalcoll, balance } = state;\n\n  if (borrow < 1800) {\n    State.update({\n      msg: \"Borrow must be at least 1800 LUSD.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n  if (collateralRatio < 110) {\n    State.update({\n      msg: \"Collateral ratio must be at least 110%.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  if (coll > Number(balance)) {\n    State.update({\n      msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH.`,\n      isBlocked: true,\n    });\n    return;\n  }\n\n  if (state.isOpenTrove === true) {\n    State.update({\n      msg: \"you already have an active Trove.\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  State.update({ msg: \"\", isBlocked: false });\n};\n\nconst borrowerOperationAddress = \"0xD69fC8928D4F3229341cb431263F1EBd87B1ade8\";\n\nconst troveManagerAddress = \"0x0ECDF34731eE8Dd46caa99a1AAE173beD1B32c67\";\n\nconst stabilityPoolAddress = \"\";\n\nconst borrowerOperationAbi = fetch(\n  \"https://api-sepolia.etherscan.io/api?module=contract&action=getabi&address=0xcb306e2509ca52872c2d04160F3c1fa7bc013064\"\n);\n\nconst troveManagerAbi = fetch(\n  \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/trove-manager-abi.json\"\n);\n\nconst priceFeedAddress = \"0x07dD4Ce17De84bA13Fc154A7FdB46fC362a41E2C\";\nconst priceFeedAbi = fetch(\n  \"https://raw.githubusercontent.com/IDKNWHORU/liquity-sepolia/main/price-feed-abi.json\"\n);\n\nif (!borrowerOperationAbi.ok) return \"loading...\";\nif (!priceFeedAbi.ok) return \"loading...\";\n\n// const iface = new ethers.utils.Interface(borrowerOperationAbi.body);\n\nconst openTrove = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.openTrove(\n    ethers.BigNumber.from(5000000000000000),\n    ethers.BigNumber.from(props.borrow * 100)\n      .mul(\"10000000000000000\")\n      .toString(),\n    // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      value: ethers.BigNumber.from(\n        (props.coll * 1000000000000000000).toString()\n      ),\n      // gasPrice: state.gasPrice,\n      // gasLimit: 25000000,\n    }\n  );\n};\n\nconst withdrawLUSD = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.withdrawLUSD(\n    ethers.BigNumber.from(5000000000000000),\n    ethers.BigNumber.from(props.borrow * 100)\n      .mul(\"10000000000000000\")\n      .toString(),\n    // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      value: ethers.BigNumber.from(\n        (props.coll * 1000000000000000000).toString()\n      ),\n      // gasPrice: state.gasPrice,\n      // gasLimit: 25000000,\n    }\n  );\n};\n\nconst withdrawColl = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.withdrawColl(\n    ethers.utils.parseUnits(props.amount, \"ether\"),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      value: ethers.BigNumber.from(\n        (props.coll * 1000000000000000000).toString()\n      ),\n      // gasPrice: state.gasPrice,\n      // gasLimit: 25000000,\n    }\n  );\n};\n\nconst repayLUSD = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.repayLUSD(\n    ethers.BigNumber.from(props.borrow * 100)\n      .mul(\"10000000000000000\")\n      .toString(),\n    // ethers.BigNumber.from((state.borrow * 10000000000000000).toString()),\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      value: ethers.BigNumber.from(\n        (props.coll * 1000000000000000000).toString()\n      ),\n      // gasPrice: state.gasPrice,\n      // gasLimit: 25000000,\n    }\n  );\n};\n\nconst addColl = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.addColl(\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    {\n      value: ethers.BigNumber.from(\n        (props.coll * 1000000000000000000).toString()\n      ),\n      // gasPrice: state.gasPrice,\n      // gasLimit: 25000000,\n    }\n  );\n};\n\nconst moveETHGainToTrove = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.moveETHGainToTrove(\n    state.sender,\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\",\n    \"0x1Bc65296aa95A0fD41d6A8AEb34C49665c6de81d\"\n  );\n};\n\nconst closeTrove = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.closeTrove();\n};\n\nconst claimCollateral = () => {\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationAbi.body.result,\n    Ethers.provider().getSigner()\n  );\n\n  borrowerOperationContract.claimCollateral();\n};\n\nconst getEntireDebtAndColl = () => {\n  const troveManagerContract = new ethers.Contract(\n    troveManagerAddress,\n    troveManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  troveManagerContract\n    .getEntireDebtAndColl(state.sender)\n    .then((debt, coll, pendingLUSDDebtReward, pendingETHReward) => {\n      console.log(debt, coll, pendingLUSDDebtReward, pendingETHReward);\n      State.update({\n        debt: debt.toString(),\n        coll: coll.toString(),\n        pendingLUSDDebtReward: pendingLUSDDebtReward.toString(),\n        pendingETHReward: pendingETHReward.toString(),\n      });\n    });\n};\n\nState.init({\n  coll: null,\n  borrow: 0,\n  borrowingFee: 0,\n  totalcoll: 200,\n  collateralRatio: 0,\n  liquidationReserve: 200,\n  msg: \"\",\n  sender: undefined,\n  chainId: undefined,\n  balance: undefined,\n  price: 0,\n  isOpenTrove: undefined,\n  isBlocked: true,\n  debt: null,\n  pendingLUSDDebtReward: null,\n  pendingETHReward: null,\n});\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\nif (\n  state.sender &&\n  Ethers.send(\"eth_requestAccounts\", [])[0] &&\n  state.chainId === 11155111 &&\n  state.price === 0\n) {\n  const priceFeedContract = new ethers.Contract(\n    priceFeedAddress,\n    priceFeedAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  const troveManagerContract = new ethers.Contract(\n    troveManagerAddress,\n    troveManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  priceFeedContract.getPrice().then((priceRes) => {\n    const price = Number(ethers.utils.formatEther(priceRes));\n\n    State.update({ price });\n    troveManagerContract.getTCR(priceRes).then((tcrRes) => {\n      const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\n\n      State.update({ tcr });\n    });\n  });\n}\n\nif (\n  state.sender &&\n  state.chainId === 11155111 &&\n  state.isOpenTrove === undefined\n) {\n  const troveManagerContract = new ethers.Contract(\n    troveManagerAddress,\n    troveManagerAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  troveManagerContract.getTroveStatus(state.sender).then((res) => {\n    const isOpenTrove = ethers.utils.formatEther(res).includes(\"1\");\n    State.update({ isOpenTrove });\n  });\n}\n\nif (props.action === \"borrow\") {\n  openTrove();\n} else if (props.action === \"repay\") {\n  closeTrove();\n} else if (props.action === \"display\") {\n  console.log(\"This stuff\");\n  getEntireDebtAndColl();\n}\n\nreturn (\n  <div>\n    <p>{state.debt}</p>\n    <p>{state.pendingETHReward}</p>\n    <p>{state.pendingLUSDDebtReward}</p>\n    <p>{state.coll}</p>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/testbrrr.near/widget/Untitled-1", "fact_widget_deployments_id": "b9b1aa687f8b03955d9d9adc15848e71", "inserted_timestamp": "2023-08-06T04:38:00.323Z", "modified_timestamp": "2023-08-06T04:38:00.323Z", "__row_index": 67}