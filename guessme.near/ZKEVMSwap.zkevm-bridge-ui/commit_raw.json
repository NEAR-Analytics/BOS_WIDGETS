{"tx_hash": "5ieV7pYQCTFdGBUrW815VPSMArE65dvSz3BdrYA6hHSw", "action_id_social": "DgvizDn8BXcCvLbU8PVUfzeMBDsscVAmdRaEwWtbjNw-0-widget", "block_id": 101106535, "block_timestamp": "2023-09-14T12:11:49.242Z", "signer_id": "guessme.near", "widget_name": "ZKEVMSwap.zkevm-bridge-ui", "source_code": "const DeskLayout = styled.div`\n  /* height: 100vh; */\n\n  /* The scrollbar track */\n  width: 560px;\n\n  @media (max-width: 1023px) {\n    width: 100%;\n  }\n`;\n\nconst Layout = styled.div`\n  position: relative;\n  width: 100%;\n  background-color: #151718;\n  border-radius: 10px;\n  border: 1px solid #332c4b;\n\n  color: #8c7ebd;\n\n  background: linear-gradient(0deg, #161825, #161825),\n    linear-gradient(0deg, #332c4b, #332c4b);\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  .container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 0;\n  }\n\n  .container-button {\n    position: relative;\n    font-family: \"Inter\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 10px;\n    line-height: 12px;\n    cursor: pointer;\n  }\n\n  .separator {\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    margin-left: 8px;\n    margin-right: 8px;\n  }\n\n  .invalid-balance-tip {\n    color: #ff61d3;\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 22px;\n    letter-spacing: 0em;\n    text-align: left;\n  }\n\n  .info {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    font-family: \"Inter\";\n    font-style: normal;\n    font-weight: 400;\n    font-size: 10px;\n    line-height: 12px;\n    list-style: none;\n    padding: 0 8px 0 8px;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    color: #fff;\n\n    li {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .value {\n      color: #ba90ff;\n      font-weight: 600;\n    }\n  }\n`;\n\nconst arrowDown = (\n  <svg\n    width=\"17\"\n    height=\"9\"\n    viewBox=\"0 0 17 9\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1 1L8.5 7.5L16 1\"\n      stroke=\"#8C7EBD\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\n\nconst ContainerNetwork = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`;\n\nconst ArrowDownWrapper = styled.div`\n  position: absolute;\n  right: 16px;\n  top: 18px;\n\n  @media (max-width: 1023px) {\n    right: 12px;\n\n    transform: scale(0.9);\n  }\n`;\n\nconst NetworkList = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 12px;\n  width: 145px;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    border-radius: 12px;\n  }\n\n  li {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 4px 8px 4px 4px;\n    gap: 4px;\n    flex: 1;\n    width: 100%;\n    color: #fff;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n`;\n\nconst BridgeContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  gap: 12px;\n  position: relative;\n\n  width: 100%;\n\n  background: linear-gradient(0deg, #222436, #222436),\n    linear-gradient(0deg, #332c4b, #332c4b);\n\n  border-radius: 10px;\n\n  border: 1px solid #332c4b;\n\n  font-style: normal;\n  font-size: 16px;\n\n  color: #ffffff;\n\n  :hover {\n    cursor: pointer;\n  }\n\n  .token-container {\n    display: flex;\n    flex-direction: column;\n    gap: 0;\n  }\n`;\n\nconst BridgeName = styled.div`\n  font-size: 18px;\n  font-weight: 500;\n  color: white;\n  line-height: 22px;\n  @media (max-width: 1023px) {\n    font-size: 15px;\n  }\n`;\n\nconst Input = styled.input`\n  background: none;\n  color: #fff;\n  text-align: left;\n  border: none;\n  outline: none;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 26px;\n  line-height: 19px;\n  padding: 8px 0px 8px 8px;\n  width: 100%;\n  ::placeholder {\n    color: #40435c;\n  }\n`;\n\nconst Seperator = styled.div`\n  border: 1px solid #332c4b;\n  height: 1px;\n  width: 367px;\n\n  @media (max-width: 1023px) {\n    width: 50%;\n  }\n  position: absolute;\n  bottom: 0px;\n`;\n\nconst ActionButton = styled.button`\n  background: #794fdd;\n  border-radius: 4px;\n  border: 0;\n  font-family: \"Inter\";\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media (max-width: 1023px) {\n    height: 40px;\n    border-radius: 10px;\n  }\n\n  line-height: 17px;\n  color: #fff;\n  padding: 18px 12px;\n  :disabled {\n    opacity: 0.3;\n  }\n`;\n\nconst alertIcon = (\n  <svg\n    width=\"34\"\n    height=\"34\"\n    viewBox=\"0 0 34 34\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M17 1.46643e-06C26.3733 2.28587e-06 34 7.62549 34 17C34 26.3733 26.3733 34 17 34C7.62548 34 -3.0269e-06 26.3745 -2.20736e-06 17C-1.38781e-06 7.62548 7.62548 6.4688e-07 17 1.46643e-06ZM17 31.5606C25.0292 31.5606 31.5606 25.0292 31.5606 17C31.5606 8.97202 25.0292 2.43938 17 2.43938C8.97202 2.43937 2.43937 8.9708 2.43937 17C2.43937 25.0292 8.97202 31.5606 17 31.5606ZM18.8295 24.928C18.8295 24.4427 18.6368 23.9774 18.2937 23.6343C17.9506 23.2912 17.4852 23.0984 17 23.0984C16.5148 23.0984 16.0494 23.2912 15.7063 23.6343C15.3632 23.9774 15.1705 24.4427 15.1705 24.928C15.1705 25.4132 15.3632 25.8785 15.7063 26.2216C16.0494 26.5647 16.5148 26.7575 17 26.7575C17.4852 26.7575 17.9506 26.5647 18.2937 26.2216C18.6368 25.8785 18.8295 25.4132 18.8295 24.928ZM17 7.2425C17.6733 7.2425 18.2197 7.7877 18.2197 8.46219L18.2197 19.4394C18.2197 20.1126 17.6733 20.6591 17 20.6591C16.3267 20.6591 15.7803 20.1126 15.7803 19.4394L15.7803 8.46219C15.7803 7.7877 16.3267 7.2425 17 7.2425Z\"\n      fill=\"#FF61D3\"\n    />\n  </svg>\n);\n\nconst Alert = styled.div`\n  position: absolute;\n  color: #ff61d3;\n  z-index: 120;\n  padding: 8px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 18px;\n  width: 334px;\n  top: 25%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  left: 50%;\n  text-align: center;\n  transform: translate(-50%);\n  background: #373a53;\n  box-shadow: 0px 0px 16px 0px #00000040;\n  border-radius: 16px;\n  padding: 20px 20px;\n  gap: 20px;\n\n  .alert-detail {\n    font-size: 18px;\n    font-weight: 500;\n    line-height: 22px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #ffffff;\n  }\n  .alert-button {\n    width: 268px;\n    height: 60px;\n    border-radius: 10px;\n    background: #794fdd;\n    color: white;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nconst Dialog = styled.div`\n  position: absolute;\n  right: 32px;\n  left: 32px;\n  top: 25%;\n  background: #2d2f30;\n  z-index: 10;\n  box-shadow: inset 0px 0px 0px 1px #999;\n  border-radius: 12px;\n  padding: 16px 8px;\n  font-family: \"Inter\";\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n  }\n\n  li {\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n    color: #fff;\n\n    &:hover {\n      color: #ccc;\n    }\n  }\n\n  .token {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n  }\n`;\n\nconst DropDownContainer = styled.div`\n  display: flex;\n  padding: 16px 0px;\n  gap: 8px;\n  position: absolute;\n  width: 100%;\n  flex-direction: column;\n  background: #373a53;\n  border-radius: 16px;\n  box-shadow: 0px 0px 16px 0px #00000040;\n  top: 36px;\n  left: 0px;\n  z-index: 100;\n  overflow: hidden;\n  color: #ffffff;\n\n  li {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 12px 16px;\n    position: relative;\n    :hover {\n      background: rgba(24, 26, 39, 0.3);\n    }\n  }\n`;\n\nconst SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 100%;\n`;\n\nconst ReceiveWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n\n  .result {\n    display: flex;\n    flex-direction: column;\n    align-items: end;\n    gap: 8px;\n\n    color: #40435c;\n  }\n`;\n\nconst tokens = props.tokens ?? [\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 5,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n];\n\nconst curChainTokens = tokens.filter((t) => t.chainId === props.chainId);\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      updateChainId(chainId);\n    });\n}\n\nconst networks = {\n  1: \"Ethereum Mainnet\",\n  5: \"Ethereum Goerli\",\n  1101: \"Polygon zkEVM\",\n  1442: \"Polygon zkEVM Goerli\",\n};\n\nconst coinsMap = {\n  ethereum: \"ETH\",\n  \"usd-coin\": \"USDC\",\n  \"matic-network\": \"MATIC\",\n  dai: \"DAI\",\n  uniswap: \"UNI\",\n};\n\nState.init({\n  selectedToken: \"ETH\",\n  isNetworkSelectOpen: 0,\n  isTokenDialogOpen: false,\n  amount: \"\",\n  balances: {},\n  prices: {},\n  isToastOpen: false,\n  add: false,\n  onChangeAdd: (add) => {\n    State.update({ add });\n  },\n});\n\nconst switchNetwork = (chainId) => {\n  Ethers.provider()\n    .send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${chainId.toString(16)}` },\n    ])\n    .catch((err) => {\n      console.log(\"err: \", err);\n      if (err.code === 4902) {\n        Ethers.provider()\n          .send(\"wallet_addEthereumChain\", [walletChains[chainId]])\n          .then(() => {\n            Ethers.provider().send(\"wallet_switchEthereumChain\", [\n              { chainId: `0x${chainId.toString(16)}` },\n            ]);\n          });\n      }\n    });\n};\n\nconst {\n  isNetworkSelectOpen,\n  selectedToken,\n  isTokenDialogOpen,\n  amount,\n  balances,\n  prices,\n} = state;\nconsole.log(\"balances: \", balances, prices, state.amount, selectedToken);\n\nconst { chainId, updateChainId } = props;\n\nconst selectedNetwork =\n  chainId === 1 || chainId === 5\n    ? \"ethereum\"\n    : chainId === 1101 || chainId === 1442\n    ? \"polygon\"\n    : \"ethereum\";\n\nconst isTestnet = chainId === 5 || chainId === 1442;\nconst isMainnet = chainId === 1 || chainId === 1101 || !isTestnet;\n\nconst walletChains = {\n  1442: {\n    chainId: `0x5a2`,\n    chainName: \"zkEVM Testnet\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://rpc.public.zkevm-test.net/\"],\n    blockExplorerUrls: [\"https://testnet-zkevm.polygonscan.com/\"],\n  },\n  1101: {\n    chainId: `0x44d`,\n    chainName: \"zkEVM Mainnet\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://zkevm-rpc.com\"],\n    blockExplorerUrls: [\"https://zkevm.polygonscan.com/\"],\n  },\n};\n\nconst coins = Object.keys(coinsMap);\nconst pricesUrl = `https://api.coingecko.com/api/v3/simple/price?ids=${coins.join(\n  \",\"\n)}&vs_currencies=usd`;\n\nif (!prices[selectedToken]) {\n  asyncFetch(pricesUrl).then((res) => {\n    if (!res.ok) return;\n    const prices = {};\n    coins.forEach((coin) => (prices[coinsMap[coin]] = res.body[coin].usd));\n    State.update({ prices });\n  });\n}\n\nconsole.log(\"prices[selectedToken]: \", prices[selectedToken]);\n\nconst updateBalance = (token) => {\n  const { address, decimals, symbol } = token;\n\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(sender)\n      .then((balanceBig) => {\n        const adjustedBalance = ethers.utils.formatEther(balanceBig);\n        console.log(\"adjustedBalance: \", adjustedBalance);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: new Big(adjustedBalance || 0).toFixed(),\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract\n      .balanceOf(sender)\n      .then((balanceBig) => {\n        console.log(\"balanceBig: \", balanceBig);\n        const adjustedBalance = Big(balanceBig.toString())\n          .div(Big(10).pow(decimals))\n          .toFixed();\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: new Big(adjustedBalance || 0).toFixed(),\n          },\n        });\n      })\n      .catch((e) => console.log(\"error\", e));\n  }\n};\n\n// if (Object.keys(balances).length === 0) {\ntokens.filter((t) => t.chainId === chainId).map(updateBalance);\n// }\n\nconst changeNetwork = (network) => {\n  if (isTestnet) {\n    if (network === \"polygon\") {\n      switchNetwork(1442);\n    } else {\n      switchNetwork(5);\n    }\n  } else {\n    if (network === \"polygon\") {\n      switchNetwork(1101);\n    } else {\n      switchNetwork(1);\n    }\n  }\n  State.update({\n    isNetworkSelectOpen: 0,\n    selectedNetwork: network,\n  });\n};\n\nconst openNetworkList = (tag) => {\n  State.update({ isNetworkSelectOpen: tag, isTokenDialogOpen: false });\n};\n\nconst isCorrectNetwork =\n  Object.keys(networks)\n    .map((n) => Number(n))\n    .includes(chainId) || chainId === undefined;\n\nconst getFromNetworkLabel = () => {\n  switch (selectedNetwork) {\n    case \"ethereum\":\n      return isMainnet ? networks[1] : networks[5];\n    case \"polygon\":\n      return isMainnet ? networks[1101] : networks[1442];\n    default:\n      return \"unknown\";\n  }\n};\n\nconst getToNetworkLabel = () => {\n  switch (selectedNetwork) {\n    case \"ethereum\":\n      return isMainnet ? networks[1101] : networks[1442];\n    case \"polygon\":\n      return isMainnet ? networks[1] : networks[5];\n    default:\n      return \"unknown\";\n  }\n};\n\nconst getNetworkSrc = (network) => {\n  switch (network) {\n    case \"ethereum\":\n      return \"https://assets.ref.finance/images/eth-bridge.png\";\n    case \"polygon\":\n      return \"https://assets.ref.finance/images/matic-bridge.png\";\n    default:\n      return \"\";\n  }\n};\n\nconst checkIcon = (\n  <svg\n    width=\"17\"\n    height=\"12\"\n    viewBox=\"0 0 17 12\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1 3.69231L6.21739 9.75L16 1\"\n      stroke=\"#794FDD\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\n\nlet networkListRender = [\n  {\n    label: \"ethereum\",\n    src: getNetworkSrc(\"ethereum\"),\n    selected: selectedNetwork === \"ethereum\",\n    onSelect: () => changeNetwork(\"ethereum\"),\n    name:\n      selectedNetwork === \"ethereum\"\n        ? getFromNetworkLabel()\n        : getToNetworkLabel(),\n  },\n  {\n    label: \"polygon\",\n    src: getNetworkSrc(\"polygon\"),\n    selected: selectedNetwork === \"polygon\",\n    onSelect: () => changeNetwork(\"polygon\"),\n    name:\n      selectedNetwork === \"polygon\"\n        ? getFromNetworkLabel()\n        : getToNetworkLabel(),\n  },\n];\n\nif (selectedNetwork === \"polygon\") {\n  networkListRender = networkListRender.reverse();\n}\n\nconst selectNetWorkDropDown = (\n  <DropDownContainer>\n    <li\n      onClick={(e) => {\n        networkListRender[0].onSelect();\n      }}\n      style={{\n        position: \"relative\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"12px\",\n        }}\n      >\n        <img style={{ width: \"32px\" }} src={networkListRender[0].src} />\n        <span>{networkListRender[0].name}</span>\n\n        {networkListRender[0].selected && checkIcon}\n      </div>\n\n      <div\n        style={{\n          position: \"relative\",\n          transform: \"rotate(180deg)\",\n          right: \"32px\",\n          top: \"28px\",\n\n          zIndex: 101,\n        }}\n      >\n        <ArrowDownWrapper>{arrowDown}</ArrowDownWrapper>\n      </div>\n    </li>\n\n    <li\n      onClick={(e) => {\n        networkListRender[1].onSelect();\n      }}\n      style={{\n        position: \"relative\",\n      }}\n    >\n      <img style={{ width: \"32px\" }} src={networkListRender[1].src} />\n      <span>{networkListRender[1].name}</span>\n\n      {selectedNetwork === networkListRender[1].label && checkIcon}\n    </li>\n  </DropDownContainer>\n);\n\nconst selectNetWorkDropDownReverse = (\n  <DropDownContainer>\n    <li\n      onClick={(e) => {\n        networkListRender[0].onSelect();\n      }}\n      style={{\n        position: \"relative\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"12px\",\n        }}\n      >\n        <img style={{ width: \"32px\" }} src={networkListRender[1].src} />\n        <span>{networkListRender[1].name}</span>\n\n        {networkListRender[0].selected && checkIcon}\n      </div>\n\n      <div\n        style={{\n          position: \"relative\",\n          transform: \"rotate(180deg)\",\n          zIndex: 101,\n\n          right: \"32px\",\n          top: \"28px\",\n        }}\n      >\n        <ArrowDownWrapper>{arrowDown}</ArrowDownWrapper>\n      </div>\n    </li>\n    <li\n      onClick={(e) => {\n        networkListRender[1].onSelect();\n      }}\n      style={{\n        position: \"relative\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"12px\",\n        }}\n      >\n        <img style={{ width: \"32px\" }} src={networkListRender[0].src} />\n        <span>{networkListRender[0].name}</span>\n        {networkListRender[1].selected && checkIcon}\n      </div>\n    </li>\n  </DropDownContainer>\n);\n\nconst getToken = (tokenSymbol) =>\n  tokens\n    .filter(\n      (t) =>\n        t.chainId ===\n        (isMainnet\n          ? selectedNetwork === \"ethereum\"\n            ? 1\n            : 1101\n          : selectedNetwork === \"ethereum\"\n          ? 5\n          : 1442)\n    )\n    .find((t) => t.symbol === tokenSymbol);\n\nconst updateToken = (tokenSymbol) => {\n  State.update({ selectedToken: tokenSymbol, isTokenDialogOpen: false });\n\n  const { onUpdateToken } = props;\n  if (onUpdateToken) {\n    const token = getToken(tokenSymbol);\n\n    onUpdateToken({ amount, token, network: selectedNetwork });\n  }\n};\n\nconst openTokenDialog = () => {\n  State.update({ isTokenDialogOpen: true });\n};\n\nconst changeAmount = (e) => {\n  const targetValue = e.target.value;\n  if (targetValue !== \"\" && !targetValue.match(/^(0|([1-9]\\d*))(\\.\\d*)?$/)) {\n    return;\n  }\n  let amount = targetValue.replace(/^0+/, \"0\"); // remove prefix 0\n\n  const curToken = curChainTokens.find((t) => t.symbol === selectedToken);\n\n  if (!curToken) return;\n\n  State.update({ amount });\n\n  const { onChangeAmount } = props;\n  if (onChangeAmount) {\n    const token = getToken(selectedToken);\n    onChangeAmount({ amount, token, network: selectedNetwork });\n  }\n};\n\nconst onOpenChange = (v) => {\n  State.update({\n    isToastOpen: false,\n  });\n};\n\nconst handleConfirm = () => {\n  const isValidAmount =\n    Big(amount || 0).gt(0) && Big(amount || 0).lt(balances[selectedToken] || 0);\n\n  if (!isValidAmount) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid amount\",\n      description: \"Amount should be less than token balance\",\n    });\n    return;\n  }\n\n  const isPolygonNetwork = chainId === 1101 || chainId === 1442;\n  if (selectedNetwork === \"ethereum\" && isPolygonNetwork) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid network\",\n      description: \"Please switch to polygon zkevm network\",\n    });\n    return;\n  }\n\n  if (selectedNetwork === \"polygon\" && !isPolygonNetwork) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid network\",\n      description: \"Please switch to ethereum network\",\n    });\n    return;\n  }\n\n  const { onConfirm } = props;\n  if (onConfirm) {\n    const token = getToken(selectedToken);\n    onConfirm({ amount, token, network: selectedNetwork });\n  }\n};\n\nconst networkList = isMainnet ? [1, 1101] : [5, 1442];\nconst token = tokens.find((t) => t.symbol === selectedToken);\n\nconst { isToastOpen, variant, title, description } = state;\n\nconst { source } = props;\n\nlet params = Storage.get(\n  \"zk-evm-bridge-params\",\n  \"guessme.near/widget/ZKEVMWarmUp.quest-card\"\n);\nconst params_from_question_list = Storage.get(\n  \"zk-evm-bridge-params\",\n  \"guessme.near/widget/ZKEVM.QuestionList\"\n);\n\nconst params_from_trend_card = Storage.get(\n  \"zk-evm-bridge-params\",\n  \"guessme.near/widget/ZKEVMWarmUp.trend-card\"\n);\n\nif (props.source == \"question_list\" && params_from_question_list) {\n  params = params_from_question_list;\n}\n\nif (props.source == \"trend\" && params_from_trend_card) {\n  params = params_from_trend_card;\n}\n\nconst storedSymbol = params?.symbol;\n\nconst hideCondition =\n  params &&\n  source === \"quest-card\" &&\n  params.symbol === selectedToken &&\n  ((params?.chain === \"Ethereum\" && chainId === 1) ||\n    (params?.chain &&\n      params?.chain?.toLowerCase().includes(\"zkevm\") &&\n      chainId === 1101));\n\nif (!hideCondition) {\n  props.updateHide && props.updateHide(false);\n} else {\n  props.updateHide && props.updateHide(true);\n}\n\nconsole.log(\"params: \", params);\n\nif (params && !!params?.symbol && !state.storeUsed) {\n  State.update({\n    selectedToken: params.symbol,\n    storeUsed: true,\n  });\n}\n\nif (params && !!params?.amount && !state.amountUsed) {\n  State.update({\n    amount: params.amount,\n    amountUsed: true,\n  });\n}\n\nif (\n  (params?.chain === \"Ethereum\" && chainId === 1) ||\n  (params?.chain &&\n    params?.chain?.toLowerCase().includes(\"zkevm\") &&\n    chainId === 1101)\n) {\n  const chainId = params?.chain === \"Ethereum\" ? 1001 : 1;\n\n  switchNetwork(chainId);\n}\n\nconsole.log(\"state.amount\", state.amount);\n\nconst canSwap =\n  !!state.amount &&\n  Number(state.amount) !== \"NaN\" &&\n  Object.keys(balances).length > 0 &&\n  new Big(Number(state.amount) === \"NaN\" ? 0 : state.amount || 0).lt(\n    balances[selectedToken] || 0\n  ) &&\n  new Big(Number(state.amount) === \"NaN\" ? 0 : state.amount || 0).gt(\n    new Big(0)\n  );\n\nreturn (\n  <DeskLayout>\n    <Layout>\n      {!isCorrectNetwork && (\n        <Alert>\n          {alertIcon}\n\n          <span className=\"alert-detail\">\n            Please switch to Ethereum or Polygon zkEVM\n          </span>\n\n          <div\n            className=\"alert-button\"\n            onClick={() => {\n              switchNetwork(1);\n            }}\n          >\n            <span>Switch Network</span>\n          </div>\n        </Alert>\n      )}\n      {!isCorrectNetwork && (\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            zIndex: 110,\n          }}\n        ></div>\n      )}\n\n      <div class=\"container\">\n        <ContainerNetwork>\n          <span class=\"label\">From</span>\n        </ContainerNetwork>\n        <BridgeContainer\n          onClick={() => {\n            openNetworkList(1);\n          }}\n        >\n          <img style={{ width: \"32px\" }} src={getNetworkSrc(selectedNetwork)} />\n          <div class=\"token-container\">\n            <BridgeName>\n              <span>{getFromNetworkLabel()}</span>\n            </BridgeName>\n          </div>\n\n          <ArrowDownWrapper>{arrowDown}</ArrowDownWrapper>\n        </BridgeContainer>\n\n        {state.isNetworkSelectOpen === 1 && selectNetWorkDropDown}\n      </div>\n      <div class=\"container\">\n        <ContainerNetwork>\n          <span class=\"label\">To</span>\n        </ContainerNetwork>\n        <BridgeContainer\n          onClick={() => {\n            openNetworkList(2);\n          }}\n        >\n          <img\n            style={{ width: \"32px\" }}\n            src={getNetworkSrc(\n              selectedNetwork === \"ethereum\" ? \"polygon\" : \"ethereum\"\n            )}\n          />\n          <div class=\"token-container\">\n            <BridgeName>\n              <span>{getToNetworkLabel()}</span>\n            </BridgeName>\n          </div>\n\n          <ArrowDownWrapper>{arrowDown}</ArrowDownWrapper>\n        </BridgeContainer>\n\n        {state.isNetworkSelectOpen === 2 && selectNetWorkDropDownReverse}\n      </div>\n\n      <SendWrapper>\n        <div>Send</div>\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            position: \"relative\",\n          }}\n        >\n          <Input\n            class=\"zkevm-bridge-input\"\n            placeholder=\"0.00\"\n            onChange={changeAmount}\n            value={state.amount}\n          />\n\n          <Seperator></Seperator>\n          <Widget\n            src=\"guessme.near/widget/ZKEVMSwap.zkevm-bridge-token-list\"\n            props={{\n              tokens: curChainTokens,\n              selectedToken,\n              balances,\n              onSelect: updateToken,\n            }}\n          />\n        </div>\n      </SendWrapper>\n      {!!state.amount &&\n        Number(state.amount) !== \"NaN\" &&\n        Object.keys(balances).length > 0 &&\n        new Big(Number(state.amount) === \"NaN\" ? 0 : state.amount || 0).gt(\n          balances[selectedToken] || 0\n        ) &&\n        new Big(Number(state.amount) === \"NaN\" ? 0 : state.amount || 0).gt(\n          new Big(0)\n        ) && (\n          <div className=\"invalid-balance-tip\">\n            Invalid amount! Amount should be less than token balance\n          </div>\n        )}\n\n      <ReceiveWrapper>\n        <span>Receive</span>\n\n        <div className=\"result\">\n          <div>\n            {amount} {selectedToken}\n          </div>\n\n          <div>\n            \u2248$\n            {!prices?.[selectedToken] || !state.amount\n              ? \"-\"\n              : new Big(prices?.[selectedToken] || 0)\n                  .times(Big(state.amount || 0))\n                  .toFixed()}\n          </div>\n        </div>\n      </ReceiveWrapper>\n\n      <ActionButton\n        onClick={handleConfirm}\n        disabled={!isCorrectNetwork || !canSwap}\n      >\n        Confirm\n      </ActionButton>\n\n      <Widget\n        src=\"ciocan.near/widget/toast\"\n        props={{ open: isToastOpen, variant, title, description, onOpenChange }}\n      />\n    </Layout>\n  </DeskLayout>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/guessme.near/widget/ZKEVMSwap.zkevm-bridge-ui", "fact_widget_deployments_id": "c940825d0df93dca06a38cef71dc847d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}