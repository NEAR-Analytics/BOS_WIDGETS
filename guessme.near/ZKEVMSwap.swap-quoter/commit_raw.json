{"tx_hash": "4SAemvWPDYT71ZerkSkSU6tUd7wJ17bg8HYE6FktDdje", "action_id_social": "DmAixRtRkgEmQjgVBRAFwVSBnaP68sgY3hHwPQSrZ5Ja-0-widget", "block_id": 108843878, "block_timestamp": "2023-12-26T08:46:32.840Z", "signer_id": "guessme.near", "widget_name": "ZKEVMSwap.swap-quoter", "source_code": "const {\n  update,\n  routerAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  outputCurrencyAmount,\n  tradeType,\n  title,\n  onLoad,\n} = props;\n\nif (!update) return \"\";\n\nif (!inputCurrency.address || !outputCurrency.address || !inputCurrencyAmount) {\n  onLoad({});\n  return \"\";\n}\n\nconst wrapType =\n  inputCurrency.address === \"native\" && outputCurrency.address === wethAddress\n    ? 1\n    : inputCurrency.address === wethAddress &&\n      outputCurrency.address === \"native\"\n    ? 2\n    : 0;\nif (wrapType) {\n  onLoad(\n    tradeType === \"in\"\n      ? {\n          outputCurrencyAmount: inputCurrencyAmount,\n          loading: false,\n          noPair: false,\n        }\n      : {\n          inputCurrencyAmount: outputCurrencyAmount,\n          loading: false,\n          noPair: false,\n        }\n  );\n  return;\n}\nconst currentCurrency = tradeType === \"in\" ? inputCurrency : outputCurrency;\nconst currentAmount = Big(\n  tradeType === \"in\" ? inputCurrencyAmount : outputCurrencyAmount\n)\n  .mul(0.995)\n  .toFixed(5);\nconst outCurrency = tradeType === \"in\" ? outputCurrency : inputCurrency;\n\nconst path = [\n  currentCurrency.address === \"native\" ? wethAddress : currentCurrency.address,\n  outCurrency.address === \"native\" ? wethAddress : outCurrency.address,\n];\n\nconst QuoteContractAddress = \"0x55BeE1bD3Eb9986f6d2d963278de09eE92a3eF1D\";\n\nconst iface = new ethers.utils.Interface([\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"path\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"quoteExactInput\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16[]\",\n        name: \"fees\",\n        type: \"uint16[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n]);\n\nconst pathBytes = \"0x\" + path.map((address) => address.substr(2)).join(\"\");\n\nconst inputs = [\n  pathBytes,\n  ethers.utils.parseUnits(currentAmount, currentCurrency.decimals),\n];\n\nconst encodedData = iface.encodeFunctionData(\"quoteExactInput\", inputs);\nif (title === \"Balancer\") {\n  const pools = [\n    [\n      [\n        \"0xa2036f0538221a77a3937f1379699f44945018d0\",\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\",\n      ],\n      \"0xc951aebfa361e9d0063355b9e68f5fa4599aa3d1000100000000000000000017\",\n    ],\n    [\n      [\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4\",\n      ],\n      \"0xa7f602cfaf75a566cb0ed110993ee81c27fa3f53000200000000000000000009\",\n    ],\n    [\n      [\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4\",\n        \"0x1E4a5963aBFD975d8c9021ce480b42188849D41d\",\n      ],\n      \"0xe8ca7400eb61d5bdfc3f8f2ea99e687e0a4dbf78000100000000000000000019\",\n    ],\n    [\n      [\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\",\n      ],\n      \"0x53ddc1f1ef585b426c03674f278f8107f1524ade000200000000000000000012\",\n    ],\n  ];\n\n  const finalPool = pools\n    .filter(\n      (poolData) =>\n        poolData[0].includes(_inputCurrencyAddress) &&\n        poolData[0].includes(_outputCurrencyAddress)\n    )\n    .map((poolData) => poolData[1]);\n\n  if (finalPool.length === 0) {\n    onLoad({\n      loading: false,\n      noPair: true,\n    });\n    return \"\";\n  }\n}\n\nEthers.provider()\n  .call({\n    to: QuoteContractAddress,\n    data: encodedData,\n  })\n  .then((data) => {\n    const decodedData = iface.decodeFunctionResult(\"quoteExactInput\", data);\n    // decodedData = [amountOut, fee]\n    const amountOut = decodedData[0];\n    // const fee = decodedData[1];\n    const estimate = Big(amountOut.toString())\n      .div(Big(10).pow(outCurrency.decimals))\n      .toFixed(18);\n    onLoad({\n      outputCurrencyAmount: Big(estimate).gt(0.01)\n        ? estimate\n        : Big(estimate).toFixed(10),\n      noPair: false,\n    });\n  })\n  .catch((err) => {\n    onLoad({\n      loading: false,\n      noPair: true,\n    });\n  });\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/guessme.near/widget/ZKEVMSwap.swap-quoter", "fact_widget_deployments_id": "8d3a96ef21e2fbbc296d4a58e1a15239", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}