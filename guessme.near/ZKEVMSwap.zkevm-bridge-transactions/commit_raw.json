{"tx_hash": "3ENCaWZBT6AZ4b6YVGqhBqiHSR8YgtHorGudeePFXFJ6", "action_id_social": "7j2QxUP1VCZ1cQ2tmgyzipA1VMq3vn1dRRm1qHpxKkf3-0-widget", "block_id": 104316233, "block_timestamp": "2023-10-27T12:58:13.113Z", "signer_id": "guessme.near", "widget_name": "ZKEVMSwap.zkevm-bridge-transactions", "source_code": "const Layout = styled.div`\n  position: relative;\n  font-style: normal;\n  font-weight: 500;\n\n  font-size: 18px;\n  line-height: 14px;\n  padding: 12px 16px;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 4px;\n  align-items: start;\n  color: #fff;\n  width: 560px;\n\n  @media (max-width: 1023px) {\n    width: 100%;\n    font-size: 16px;\n  }\n\n  border: 1px solid #332c4b;\n\n  background: linear-gradient(0deg, #161825, #161825),\n    linear-gradient(0deg, #332c4b, #332c4b);\n\n  .refresh {\n    border: none;\n    text-decoration: underline;\n    color: #8c7ebd;\n    background: none;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    font-size: 14px;\n    width: 100%;\n    margin-top: 12px;\n    align-items: center;\n    li {\n      padding: 4px 8px;\n      display: flex;\n      gap: 4px;\n\n      justify-content: space-between;\n      width: 100%;\n      .info {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        gap: 4px;\n        width: 100%;\n\n        .token {\n          font-size: 16px;\n        }\n        a {\n          color: #5285df;\n          text-decoration: underline;\n        }\n        .date {\n          color: #7c7f96;\n        }\n\n        button {\n          color: #fff;\n          background: #8247e5;\n          border: none;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          width: 100px;\n          :disabled {\n            cursor: not-allowed;\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst bridgeAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[32]\",\n        name: \"smtProof\",\n        type: \"bytes32[32]\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"index\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"mainnetExitRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"rollupExitRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"originNetwork\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"originTokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"destinationNetwork\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"destinationAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"metadata\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"claimAsset\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst bridgeIface = new ethers.utils.Interface(bridgeAbi);\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst tokens = props.tokens ?? [];\n\nconst arrowUp = (\n  <svg\n    width=\"17\"\n    height=\"10\"\n    viewBox=\"0 0 17 10\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1 8.5L8.5 2L16 8.5\"\n      stroke=\"#8C7EBD\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\n\nfunction add_action(param_body) {\n  asyncFetch(\"https://test-api.dapdap.net/api/action/add\", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(param_body),\n  });\n}\n\nif (sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then(({ chainId }) => {\n      State.update({ chainId });\n    });\n}\n\nconst pendingIcon = (\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M17.25 18.25H16.25V16.25C16.25 15.125 15.75 14 14.875 13.125L13.375 11.625L12.625 10.875L12.375 10.75C12.375 10.75 12.25 10.75 12.25 10.625C12.125 10.5 12 10.25 12 10C12 9.75 12.125 9.5 12.25 9.375C12.25 9.375 12.25 9.25 12.375 9.25L12.75 9L12.875 8.75L13.375 8.25L15 6.75C15.875 6 16.25 4.875 16.25 3.75V1.75H17.25C17.75 1.75 18.25 1.375 18.25 1C18.25 0.625 17.875 0.25 17.25 0.25H2.5C2 0.25 1.5 0.625 1.5 1C1.5 1.375 1.875 1.75 2.5 1.75H3.5V3.625C3.5 4.75 4 5.875 4.875 6.75L5.5 7.375L7.125 9L7.25 9.125L7.5 9.25L7.625 9.375C7.75 9.5 7.875 9.75 7.875 10V10.25C7.875 10.375 7.75 10.625 7.625 10.75H7.5L7.25 11L5.5 12.625L4.875 13.25C4 14 3.5 15.125 3.5 16.375V18.375H2.375C1.875 18.375 1.375 18.75 1.375 19.125C1.375 19.5 1.75 19.875 2.375 19.875H17.25C17.75 19.875 18.25 19.5 18.25 19.125C18.25 18.625 17.875 18.25 17.25 18.25ZM5 16.25C5 15.5 5.375 14.75 5.875 14.25L7.625 12.5L9 11.25C9.125 11 9.125 10.875 9.25 10.625C9.25 10.375 9.375 10.25 9.375 10V9.375C9.375 9.25 9.375 9.125 9.25 9V8.875C9 8.75 9 8.75 8.875 8.625L7.5 7.25L5.875 5.625C5.25 5.125 5 4.375 5 3.625V1.75H14.875V3.625C14.875 4.375 14.5 5.125 14 5.625L12 7.5L11.25 8.25L11.125 8.375L11 8.5C10.875 8.75 10.75 9.125 10.75 9.375V9.875C10.75 10.125 10.75 10.25 10.875 10.5C10.875 10.875 11 11.375 11.25 11.625L11.875 12.25L13.875 14.25C14.5 14.75 14.75 15.5 14.75 16.25V18.25H5V16.25Z\"\n      fill=\"#794FDD\"\n    />\n    <path\n      d=\"M10.625 13.375C10.375 13.125 9.875 13.125 9.5 13.375L7.625 15C7.25 15.25 7 15.75 7 16.25V17.125H13V16.25C13 15.875 12.75 15.375 12.375 15L10.625 13.375Z\"\n      fill=\"#794FDD\"\n    />\n  </svg>\n);\n\nState.init({\n  deposit: [],\n  withdraw: [],\n  isToastOpen: false,\n  add: false,\n  onChangeAdd: (add) => {\n    State.update({ add });\n  },\n\n  showPending: true,\n});\n\nconst onOpenChange = (v) => {\n  State.update({\n    isToastOpen: false,\n  });\n};\n\nconst { chainId, withdraw, deposit, isToastOpen, variant, title, description } =\n  state;\n\nconst isMainnet = chainId === 1 || chainId === 1101;\n\nconst BRIDGE_CONTRACT_ADDRESS = isMainnet\n  ? \"0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe\"\n  : \"0xF6BEEeBB578e214CA9E23B0e9683454Ff88Ed2A7\";\n\nfunction formatDateToLocal(inputDate) {\n  const dateObj = new Date(inputDate);\n  const formattedDate = dateObj.toLocaleString(); // \u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684\u672c\u5730\u65f6\u533a\u8fdb\u884c\u8f6c\u6362\n  return formattedDate;\n}\n\nconst getTransactions = (type) => {\n  if (!sender) return;\n\n  asyncFetch(\n    `https://open-api-v2-staging.polygon.technology/zkevm-${\n      isMainnet ? \"mainnet\" : \"testnet\"\n    }/${type}/address?userAddress=${sender}`\n  ).then((res) => {\n    if (!res.body.success) {\n      return;\n    }\n\n    const list = res.body.result.filter((t) =>\n      type === \"deposit\" ? t.status === \"BRIDGED\" : t.status !== \"CLAIMED\"\n    );\n\n    State.update({\n      [type]: list,\n    });\n  });\n};\n\nconst refreshList = () => {\n  getTransactions(\"withdraw\");\n  getTransactions(\"deposit\");\n};\n\nrefreshList();\n\nconst claimTransaction = (tx) => {\n  console.log(\"chainId\", chainId);\n  const isPolygonNetwork = chainId === 1101 || chainId === 1442;\n  if (isPolygonNetwork) {\n    State.update({\n      isToastOpen: true,\n      variant: \"error\",\n      title: \"Invalid network\",\n      description: \"Switch to ethereum network to claim transactions\",\n    });\n    return;\n  }\n\n  const url = `https://proof-generator.polygon.technology/api/zkevm/${\n    isMainnet ? \"mainnet\" : \"testnet\"\n  }/merkle-proof?net_id=1&deposit_cnt=${tx.counter}`;\n\n  asyncFetch(url).then((res) => {\n    if (!res.ok) {\n      console.log(\"merkele proof errror\", res);\n      return;\n    }\n\n    const { proof } = res.body;\n\n    const encodedData = bridgeIface.encodeFunctionData(\n      \"claimAsset(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)\",\n      [\n        proof[\"merkle_proof\"],\n        tx.counter,\n        proof[\"main_exit_root\"],\n        proof[\"rollup_exit_root\"],\n        0,\n        tx.childToken,\n        0,\n        tx.depositReceiver,\n        tx.amounts[0],\n        \"0x\",\n      ]\n    );\n\n    Ethers.provider()\n      .getSigner()\n      .sendTransaction({\n        to: BRIDGE_CONTRACT_ADDRESS,\n        data: encodedData,\n        value: amountBig,\n        gasLimit: ethers.BigNumber.from(\"500000\"),\n      })\n      .then((tx) => {\n        consle.log(\"tx:\", tx);\n        refreshList();\n      })\n      .catch((e) => {\n        console.log(\"error:\", e);\n        refreshList();\n      });\n  });\n};\n\nconst noWithdrawls = withdraw?.length === 0;\nconst noDeposits = deposit?.length === 0;\nconst isEmpty = noWithdrawls && noDeposits;\n\nreturn (\n  <>\n    <Layout>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          width: \"100%\",\n        }}\n      >\n        <span\n          className=\"\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"3px\",\n          }}\n        >\n          {pendingIcon}\n\n          {(withdraw?.length || 0) + (deposit?.length || 0)}\n          <span\n            style={{\n              color: \"#8C7EBD\",\n            }}\n          >\n            Pending transactions\n          </span>\n          {(withdraw?.length || 0) + (deposit?.length || 0) > 0}\n          <span\n            style={{\n              transform: !state.showPending ? \"rotate(180deg)\" : \"rotate(0deg)\",\n              marginLeft: \"8px\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              State.update({\n                showPending: !state.showPending,\n              });\n            }}\n          >\n            {arrowUp}\n          </span>\n        </span>\n\n        <button className=\"refresh\" onClick={refreshList}>\n          Refresh\n        </button>\n      </div>\n\n      {state.showPending && (\n        <ul>\n          {/* {!noWithdrawls && <div>Withdrawls:</div>} */}\n          {withdraw.map((t) => {\n            const txUrl = `https://${\n              isMainnet ? \"\" : \"testnet-\"\n            }zkevm.polygonscan.com/tx/${t.transactionHash}`;\n\n            const token = tokens.find(\n              (token) =>\n                t.childToken.toLowerCase() === token.address.toLowerCase()\n            );\n\n            if (!token) return null;\n\n            const amount = ethers.utils.formatUnits(\n              t.amounts[0],\n              token?.decimals || 18\n            );\n\n            const isPending = t.status === \"BRIDGED\";\n\n            return (\n              <li>\n                <div class=\"info\">\n                  <span class=\"token\">\n                    {amount} {token?.symbol}\n                  </span>\n\n                  <div\n                    style={{\n                      fontSize: \"14px\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      gap: \"8px\",\n                      alignItems: \"end\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"8px\",\n                      }}\n                    >\n                      <span class=\"date\">{formatDateToLocal(t.timestamp)}</span>\n                      <a href={txUrl} target=\"_blank\">\n                        Tx\n                      </a>\n\n                      <button\n                        disabled={isPending}\n                        onClick={() => claimTransaction(t)}\n                      >\n                        <span>Claim</span>\n                      </button>\n                    </div>\n\n                    {isPending && <span>(pending... arrive in ~60 mins)</span>}\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n\n          {/* {!noDeposits && <div>Deposits:</div>} */}\n\n          {deposit.map((t) => {\n            const txUrl = `https://${\n              isMainnet ? \"\" : \"goerli.\"\n            }etherscan.io/tx/${t.transactionHash}`;\n\n            const token = tokens.find(\n              (token) =>\n                t.rootToken.toLowerCase() === token.address.toLowerCase()\n            );\n\n            if (!token) return null;\n\n            const amount = ethers.utils.formatUnits(\n              t.amounts[0],\n              token?.decimals || 18\n            );\n\n            return (\n              <li>\n                <div class=\"info\">\n                  <span class=\"token\">\n                    {amount} {token?.symbol}\n                  </span>\n\n                  <div\n                    style={{\n                      fontSize: \"14px\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      gap: \"8px\",\n                      alignItems: \"end\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"8px\",\n                      }}\n                    >\n                      <span class=\"date\">{t.timestamp}</span>\n\n                      <a href={txUrl} target=\"_blank\">\n                        Tx\n                      </a>\n\n                      {/* <button\n                      disabled={isPending}\n                      onClick={() => claimTransaction(t)}\n                    >\n                      <span>Claim</span>\n                    </button> */}\n                    </div>\n\n                    <span>Funds will arrive in ~15 mins</span>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </Layout>\n\n    <Widget\n      src=\"ciocan.near/widget/toast\"\n      props={{ open: isToastOpen, variant, title, description, onOpenChange }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/guessme.near/widget/ZKEVMSwap.zkevm-bridge-transactions", "fact_widget_deployments_id": "c37f469723ccc3b51f1f8f11107caca9", "inserted_timestamp": "2023-10-27T14:48:42.526Z", "modified_timestamp": "2023-10-27T14:48:42.526Z", "__row_index": 0}