{"tx_hash": "6DzMdqE1MMcySnYAcY7CswYqDUr9qVd1rEibaenqyK29", "action_id_social": "EALK9oeVzWGp4xLCpG7RSktmRBHw6PxX7Gf9qWBmka9x-0-widget", "block_id": 97887343, "block_timestamp": "2023-08-02T03:32:19.450Z", "signer_id": "guessme.near", "widget_name": "ZKEVMSwap.zkevm-token-data", "source_code": "const { tokenId, coinGeckoTokenId } = props;\n\nconst accountId = context.accountId;\nconst debug = props.debug ?? false;\n\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_ZKEVM = \"ZKEVM\";\nconst NETWORK_AURORA = \"AURORA\";\nconst NETWORK_POLYGON = \"POLYGON\";\n\nconst network = NETWORK_ZKEVM;\n\nif (!tokenId) return;\n\n// ETH *******************************\nconst getErc20Balance = (tokenId, receiver) => {\n  const iface = new ethers.utils.Interface(state.erc20Abi);\n\n  // find out token decimals\n  const encodedTokenDecimalsData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: tokenId,\n      data: encodedTokenDecimalsData,\n    })\n    .then((tokenDecimalsHex) => {\n      const tokenDecimals = iface.decodeFunctionResult(\n        \"decimals\",\n        tokenDecimalsHex\n      );\n\n      // find out token balance\n      const encodedBalanceData = iface.encodeFunctionData(\"balanceOf\", [\n        receiver,\n      ]);\n\n      return Ethers.provider()\n        .call({\n          to: tokenId,\n          data: encodedBalanceData,\n        })\n        .then((rawBalance) => {\n          const receiverBalanceHex = iface.decodeFunctionResult(\n            \"balanceOf\",\n            rawBalance\n          );\n\n          return {\n            decimals: tokenDecimals[0],\n            balance: Big(receiverBalanceHex).toFixed(),\n          };\n        });\n    });\n};\n\nconst getErc20Tokendata = (tokenId) => {\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${tokenId}`;\n  if (network === NETWORK_AURORA) {\n    dataUrl = `https://api.coingecko.com/api/v3/coins/aurora/contract/${tokenId}`;\n  }\n  const data = fetch(dataUrl);\n  console.log(\"datatokenData111111: \", data);\n  if (!data.ok) {\n    return \"Loading\";\n  }\n\n  const tokenData = data.body;\n  console.log(\"tokenData111111: \", tokenId, tokenData);\n  const metadata = {\n    name: tokenData.name,\n    symbol: tokenData.symbol,\n    icon: tokenData.image.small,\n  };\n\n  const price = Number(tokenData.market_data.current_price.usd);\n\n  return { metadata, price };\n};\n\nif (state.ethAccountId === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ ethAccountId: accounts[0] });\n  }\n}\n\nif (state.erc20Abi === undefined) {\n  const erc20Abi = fetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  );\n  if (!erc20Abi.ok) {\n    return \"Loading\";\n  }\n\n  State.update({ erc20Abi: erc20Abi.body });\n}\n\nif (state.ethAccountId && state.erc20Abi) {\n  getErc20Balance(tokenId, state.ethAccountId).then(({ decimals, balance }) => {\n    if (balance !== undefined && balance !== null) {\n      State.update({ balance });\n    }\n\n    // save decimals to metadata if it is already exists\n    if (state.metadata !== undefined) {\n      const metadata = state.metadata;\n      console.log(\"metadata: \", metadata);\n      metadata.decimals = decimals;\n      State.update({ metadata });\n    }\n\n    // temp value to update metadata after the coingecko responce\n    State.update({ tokenDecimals: decimals });\n  });\n\n  let tokenIdForCoingeckoAPI;\n  if ([NETWORK_ZKSYNC, NETWORK_ZKEVM, NETWORK_POLYGON].includes(network)) {\n    tokenIdForCoingeckoAPI = coinGeckoTokenId;\n    console.log(\"coinGeckoTokenId: \", tokenId, coinGeckoTokenId);\n  }\n\n  const { metadata, price } = getErc20Tokendata(tokenIdForCoingeckoAPI);\n\n  if (state.tokenDecimals && metadata && !metadata.decimals) {\n    metadata.decimals = state.tokenDecimals;\n  }\n  State.update({ metadata, price });\n}\n\nconsole.log(\"state token data\", { state }, tokenId);\n\nif (\n  state.balance !== undefined &&\n  state.balance !== null &&\n  state.metadata !== undefined &&\n  state.price !== undefined\n) {\n  const res = {\n    balance: state.balance,\n    balance_hr: new Big(state?.balance ?? 0)\n      .div(new Big(10).pow(state?.metadata?.decimals ?? 1))\n      .toFixed(4),\n    balance_hr_full: new Big(state?.balance ?? 0)\n      .div(new Big(10).pow(state?.metadata?.decimals ?? 1))\n      .toFixed(),\n    price: state.price,\n    metadata: state.metadata,\n  };\n\n  if (typeof props.onLoad === \"function\") {\n    props.onLoad(res);\n  }\n}\n\nreturn <div />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/guessme.near/widget/ZKEVMSwap.zkevm-token-data", "fact_widget_deployments_id": "6d4ff534755e844ec76350e916f2828c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}