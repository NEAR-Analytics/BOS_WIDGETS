{"tx_hash": "Di8jX6aGxY2Ry6NWdJC1voV8JTEYwqzjmYnwyi7VyCAC", "action_id_social": "D6YJb5o6oS8RwWFP6SEiB7dzQkvNn3zVBtopafkrs1Dh-0-widget", "block_id": 101167062, "block_timestamp": "2023-09-15T07:58:02.371Z", "signer_id": "guessme.near", "widget_name": "ZKEVMSwap.zkevm-token-data", "source_code": "const { tokenId, coinGeckoTokenId } = props;\n\nconst wethAddress = \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\";\n\nconst ethAddress = \"0x0000000000000000000000000000000000000000\";\n\nconst accountId = context.accountId;\nconst debug = props.debug ?? false;\n\nconst NETWORK_ETH = \"ETH\";\nconst NETWORK_ZKSYNC = \"ZKSYNC\";\nconst NETWORK_ZKEVM = \"ZKEVM\";\nconst NETWORK_AURORA = \"AURORA\";\nconst NETWORK_POLYGON = \"POLYGON\";\n\nconst network = NETWORK_ZKEVM;\n\nif (!tokenId) return;\n\nconst getErc20Balance = (tokenId, receiver) => {\n  const iface = new ethers.utils.Interface(state.erc20Abi);\n\n  // find out token decimals\n  const encodedTokenDecimalsData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: tokenId,\n      data: encodedTokenDecimalsData,\n    })\n    .then((tokenDecimalsHex) => {\n      const tokenDecimals = iface.decodeFunctionResult(\n        \"decimals\",\n        tokenDecimalsHex\n      );\n\n      const encodedBalanceData = iface.encodeFunctionData(\"balanceOf\", [\n        receiver,\n      ]);\n\n      return Ethers.provider()\n        .call({\n          to: tokenId,\n          data: encodedBalanceData,\n        })\n        .then((rawBalance) => {\n          const receiverBalanceHex = iface.decodeFunctionResult(\n            \"balanceOf\",\n            rawBalance\n          );\n\n          return {\n            decimals: tokenDecimals[0],\n            balance: Big(receiverBalanceHex).toFixed(),\n          };\n        });\n    });\n};\n\nconst getErc20Tokendata = (tokenId) => {\n  let dataUrl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${tokenId}`;\n\n  const data = fetch(dataUrl);\n  if (!data.ok) {\n    return \"Loading\";\n  }\n\n  const tokenData = data.body;\n  const metadata = {\n    name: tokenData.name,\n    symbol: tokenData.symbol,\n    icon: tokenData.image.small,\n  };\n\n  const price = Number(tokenData.market_data.current_price.usd);\n\n  return { metadata, price };\n};\n\nconst getNativeBalance = () => {\n  const provider = Ethers.provider();\n  return provider.getBalance(state.ethAccountId).then((rawBalance) => {\n    return rawBalance.toString();\n  });\n};\n\nconst ethMetadata = {\n  icon: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png?1595348880\",\n  name: \"ETH\",\n  symbol: \"ETH\",\n  decimals: 18,\n};\n\nconst USDCMetadata = {\n  icon: \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png?1547042389\",\n  name: \"USDC Coin\",\n  symbol: \"USDC\",\n  decimals: 6,\n};\n\nconst tokenMetas = {\n  \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\": USDCMetadata,\n  ethAddress: ethMetadata,\n};\n\nif (state.ethAccountId === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ ethAccountId: accounts[0] });\n  }\n}\n\nif (state.erc20Abi === undefined) {\n  const erc20Abi = fetch(\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n  );\n  if (!erc20Abi.ok) {\n    return \"Loading\";\n  }\n\n  State.update({ erc20Abi: erc20Abi.body });\n}\n\nif (state.ethAccountId && state.erc20Abi) {\n  if (tokenId !== ethAddress) {\n    getErc20Balance(tokenId, state.ethAccountId).then(\n      ({ decimals, balance }) => {\n        if (balance !== undefined && balance !== null) {\n          State.update({ balance });\n        }\n        if (state.metadata !== undefined) {\n          const metadata = state.metadata;\n          metadata.decimals = decimals;\n          State.update({ metadata });\n        }\n        State.update({ tokenDecimals: decimals });\n      }\n    );\n\n    let tokenIdForCoingeckoAPI;\n    if ([NETWORK_ZKSYNC, NETWORK_ZKEVM, NETWORK_POLYGON].includes(network)) {\n      tokenIdForCoingeckoAPI = coinGeckoTokenId;\n    }\n\n    const { metadata, price } = getErc20Tokendata(tokenIdForCoingeckoAPI);\n    console.log(\"metadata: \", metadata);\n\n    if (state.tokenDecimals && metadata && !metadata.decimals) {\n      metadata.decimals = state.tokenDecimals;\n    }\n\n    State.update({\n      metadata: tokenMetas[tokenId.toLowerCase()] || metadata,\n      price,\n    });\n  } else {\n    getNativeBalance().then((balance) => {\n      State.update({ balance, tokenDecimals: 18, metadata: ethMetadata });\n    });\n\n    const { price } = getErc20Tokendata(coinGeckoTokenId);\n\n    if (state.tokenDecimals && metadata && !metadata.decimals) {\n      metadata.decimals = state.tokenDecimals;\n    }\n    State.update({ metadata: ethMetadata, price });\n  }\n}\n\nif (\n  state.balance !== undefined &&\n  state.balance !== null\n\n  // &&\n  // state.metadata !== undefined &&\n  // state.price !== undefined\n) {\n  const res = {\n    balance: state.balance,\n    balance_hr: new Big(state?.balance ?? 0)\n      .div(new Big(10).pow(state?.metadata?.decimals ?? 1))\n      .toFixed(4),\n    balance_hr_full: new Big(state?.balance ?? 0)\n      .div(new Big(10).pow(state?.metadata?.decimals ?? 1))\n      .toFixed(),\n    price: state.price,\n    metadata: state.metadata,\n  };\n\n  if (typeof props.onLoad === \"function\") {\n    props.onLoad(res);\n    console.log(\"res: \", res);\n  }\n}\n\nreturn <div />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/guessme.near/widget/ZKEVMSwap.zkevm-token-data", "fact_widget_deployments_id": "5f134647c375f88ae8b0df8ea99067ce", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}