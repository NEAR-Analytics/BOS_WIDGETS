{"tx_hash": "Cf84CAuoJTDLCge7jpL9Rrvsam1LwBdW2QKCFEJ6Jre6", "action_id_social": "6RE9oTvgvZTSN67DTQbStT5kGKcYeZmwpkQTPjXZ2c6a-0-widget", "block_id": 99478359, "block_timestamp": "2023-08-23T14:14:47.740Z", "signer_id": "guessme.near", "widget_name": "ZKEVMWarmUp.search-config", "source_code": "const { search, onLoad } = props;\n\nif (!search) {\n  onLoad([]);\n\n  return <div />;\n}\n\nconst [action, quantityOrSymbol, symbolOrOn, onOrNetwork, network] =\n  search.split(/\\s+/);\n\nconst bridgeTokens = [\n  // eth mainnet assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 1,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n  {\n    address: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\",\n    chainId: 1,\n    symbol: \"MATIC\",\n    decimals: 18,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\",\n  },\n  {\n    address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    chainId: 1,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png\",\n  },\n  {\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    symbol: \"DAI\",\n    decimals: 18,\n    chainId: 1,\n    logoURI: \"https://assets.coingecko.com/coins/images/9956/small/4943.png\",\n  },\n  {\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    chainId: 1,\n    symbol: \"USDT\",\n    decimals: 6,\n    logoURI: \"https://assets.coingecko.com/coins/images/325/small/Tether.png\",\n  },\n  {\n    address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    chainId: 1,\n    symbol: \"WBTC\",\n    decimals: 8,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/7598/small/wrapped_bitcoin_wbtc.png\",\n  },\n\n  // zkevm assets\n  {\n    address: \"0x0000000000000000000000000000000000000000\",\n    chainId: 1101,\n    symbol: \"ETH\",\n    decimals: 18,\n    logoURI: \"https://assets.coingecko.com/coins/images/279/small/ethereum.png\",\n  },\n  {\n    address: \"0xa2036f0538221a77A3937F1379699f44945018d0\",\n    chainId: 1101,\n    symbol: \"MATIC\",\n    decimals: 18,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\",\n  },\n  {\n    address: \"0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035\",\n    chainId: 1101,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png\",\n  },\n];\n\nconst SwapTokens = [\n  {\n    address: \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n    chainId: 1101,\n    symbol: \"WETH\",\n    decimals: 18,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/2518/small/weth.png?1628852295\",\n  },\n  {\n    address: \"0xa2036f0538221a77A3937F1379699f44945018d0\",\n    chainId: 1101,\n    symbol: \"MATIC\",\n    extra: true,\n    decimals: 18,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png\",\n  },\n  {\n    address: \"0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4\",\n    chainId: 1101,\n    symbol: \"DAI\",\n    extra: true,\n    decimals: 18,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508\",\n  },\n  {\n    address: \"0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035\",\n    chainId: 1101,\n    symbol: \"USDC\",\n    decimals: 6,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png\",\n  },\n\n  {\n    address: \"0x1E4a5963aBFD975d8c9021ce480b42188849D41d\",\n    chainId: 1101,\n    symbol: \"USDT\",\n    decimals: 6,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/325/small/Tether.png?1668148663\",\n  },\n  {\n    address: \"0xea034fb02eb1808c2cc3adbc15f447b93cbe08e1\",\n    chainId: 1101,\n    symbol: \"WBTC\",\n    decimals: 8,\n    extra: true,\n    logoURI:\n      \"https://assets.coingecko.com/coins/images/7598/small/wrapped_bitcoin_wbtc.png?1548822744\",\n  },\n];\n\nconst Dexs = [\"Pancake Swap\", \"Balancer\", \"QuickSwap\"];\n\nconst mapBridgeTokens = bridgeTokens.map((token) => {\n  return {\n    ...token,\n    highlight: `Bridge ${token.symbol} from ${\n      token.chainId === 1 ? \"Ethereum\" : \"zkEVM\"\n    }`,\n    network: token.chainId === 1 ? \"Ethereum\" : \"zkEVM\",\n  };\n});\n\nconst mapSwapTokensQuick = SwapTokens.map((token) => {\n  return {\n    ...token,\n    highlight: `Swap 1 ${token.symbol} on QuickSwap`,\n    network: \"QuickSwap\",\n    dappName: \"QuickSwap\",\n    chainName: \"ZKEvm\",\n  };\n});\n\nconst mapSwapTokensBalancer = SwapTokens.map((token) => {\n  return {\n    ...token,\n    highlight: `Swap 1 ${token.symbol} on Balancer`,\n    network: \"Balancer\",\n    dappName: \"Balancer\",\n    chainName: \"ZKEvm\",\n  };\n});\n\nconst mapSwapTokensPancake = SwapTokens.filter((t) => !t.extra).map((token) => {\n  return {\n    ...token,\n    highlight: `Swap 1 ${token.symbol} on PancakeSwap`,\n    network: \"PancakeSwap\",\n    dappName: \"Pancake Swap\",\n    chainName: \"ZKEvm\",\n  };\n});\n\nconst mapSwapTokens = [\n  ...mapSwapTokensBalancer,\n  ...mapSwapTokensQuick,\n  ...mapSwapTokensPancake,\n];\n\nconst isActonBridge = \"bridge\".includes(action.toLowerCase());\n\nconst isActionSwap = \"swap\".includes(action.toLowerCase());\n\nconst isActionSupply = \"supply\".includes(action.toLowerCase());\n\nconst isActionBorrow = \"borrow\".includes(action.toLowerCase());\n\nconst isActionRepay = \"repay\".includes(action.toLowerCase());\n\nconsole.log(\"isActionSwap: \", isActionSwap, isActonBridge);\n\nif (\n  !isActionSwap &&\n  !isActonBridge &&\n  !isActionBorrow &&\n  !isActionSupply &&\n  !isActionRepay\n) {\n  onLoad([]);\n\n  return <div />;\n}\n\nif (isActonBridge) {\n  const hintList = mapBridgeTokens.map((token) => {\n    let highlightArray = token.highlight.split(\" \");\n    console.log(\"highlightArray: \", highlightArray);\n\n    const matchOnSymbol =\n      quantityOrSymbol &&\n      token.symbol.toLowerCase().includes(quantityOrSymbol.toLowerCase());\n\n    const matchOnNetwork =\n      onOrNetwork &&\n      token.network.toLowerCase().includes(onOrNetwork.toLowerCase());\n\n    // 0 bridge  1 symbol 2 on 3 network\n\n    const highlight = highlightArray.reduce((acc, cur, index) => {\n      if (index === 0) {\n        return cur + \" \";\n      }\n\n      if (index === 1) {\n        return acc + (matchOnSymbol ? cur + \" \" : \"\");\n      }\n\n      if (index === 3) {\n        return acc + (matchOnNetwork ? `from ${cur} ` : \"\");\n      }\n\n      return acc;\n    }, \"\");\n\n    return {\n      ...token,\n      highlight,\n      full: token.highlight,\n      left: token.highlight.substring(highlight.length, token.highlight.length),\n      dappName: \"zkEVM-bridge\",\n      matched:\n        (matchOnSymbol || !quantityOrSymbol) &&\n        (matchOnNetwork || !onOrNetwork),\n    };\n  });\n\n  const finalList = hintList.filter((t) => !!t.matched);\n\n  onLoad(finalList);\n\n  return <div />;\n}\nif (isActionSwap) {\n  const hintList = mapSwapTokens.map((token) => {\n    const positiveIntegerPattern = /^[1-9]\\d*$/;\n\n    if (positiveIntegerPattern.test(quantityOrSymbol)) {\n      const tmpArr = token.highlight.split(\" \");\n      tmpArr[1] = quantityOrSymbol;\n      token.highlight = tmpArr.join(\" \");\n    }\n\n    let highlightArray = token.highlight.split(\" \");\n    console.log(\"highlightArray: \", highlightArray);\n\n    const matchOnSymbol =\n      symbolOrOn &&\n      token.symbol.toLowerCase().includes(symbolOrOn.toLowerCase());\n\n    const matchOnAmount = positiveIntegerPattern.test(quantityOrSymbol);\n\n    const matchOnNetwork =\n      network && token.network.toLowerCase().includes(network.toLowerCase());\n\n    // 0 swap  1 amount 2 symbol 3 on 4 network\n\n    const highlight = highlightArray.reduce((acc, cur, index) => {\n      if (index === 0) {\n        return cur + \" \";\n      }\n\n      if (index === 1) {\n        return acc + (matchOnAmount ? cur + \" \" : \"\");\n      }\n\n      if (index === 2) {\n        return acc + (matchOnSymbol ? cur + \" \" : \"\");\n      }\n\n      if (index === 4) {\n        return acc + (matchOnNetwork ? `on ${cur} ` : \"\");\n      }\n\n      return acc;\n    }, \"\");\n\n    return {\n      ...token,\n      highlight,\n      left: token.highlight.substring(highlight.length, token.highlight.length),\n      dappName: token.dappName || \"ZkEvm\",\n      full: token.highlight,\n\n      matched:\n        (matchOnSymbol || !symbolOrOn) &&\n        (matchOnNetwork || !network) &&\n        (matchOnAmount || !quantityOrSymbol),\n    };\n  });\n\n  const finalList = hintList.filter((t) => !!t.matched);\n\n  onLoad(finalList);\n\n  return <div />;\n}\n\nif (isActionSupply) {\n  const hintList = [\n    {\n      full: \"Supply on AAVE\",\n      highlight: \"Supply on AAVE\",\n      dexName: \"AAVE\",\n    },\n  ];\n  const matchOnDex =\n    symbolOrOn &&\n    hintList[0].dexName.toLowerCase().includes(symbolOrOn.toLowerCase());\n\n  const list = hintList.map((item) => {\n    return {\n      full: item.full,\n      highlight: matchOnDex ? item.highlight : \"Supply\",\n      left: matchOnDex ? \"\" : \"on AAVE\",\n      dappName: item.dexName,\n      matched: true,\n    };\n  });\n  onLoad(list);\n  return <div />;\n}\n\nif (isActionBorrow) {\n  const hintList = [\n    {\n      full: \"Borrow on AAVE\",\n      highlight: \"Borrow on AAVE\",\n      dexName: \"AAVE\",\n    },\n  ];\n  const matchOnDex =\n    symbolOrOn &&\n    hintList[0].dexName.toLowerCase().includes(symbolOrOn.toLowerCase());\n\n  const list = hintList.map((item) => {\n    return {\n      full: item.full,\n      highlight: matchOnDex ? item.highlight : \"Borrow\",\n      left: matchOnDex ? \"\" : \"on AAVE\",\n      dappName: item.dexName,\n      matched: true,\n    };\n  });\n  onLoad(list);\n  return <div />;\n}\n\nif (isActionRepay) {\n  const hintList = [\n    {\n      full: \"Repay on AAVE\",\n      highlight: \"Repay on AAVE\",\n      dexName: \"AAVE\",\n    },\n  ];\n  const matchOnDex =\n    symbolOrOn &&\n    hintList[0].dexName.toLowerCase().includes(symbolOrOn.toLowerCase());\n\n  const list = hintList.map((item) => {\n    return {\n      full: item.full,\n      highlight: matchOnDex ? item.highlight : \"Repay\",\n      left: matchOnDex ? \"\" : \"on AAVE\",\n      dappName: item.dexName,\n      matched: true,\n    };\n  });\n  onLoad(list);\n\n  return <div />;\n}\n\nreturn <div />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/guessme.near/widget/ZKEVMWarmUp.search-config", "fact_widget_deployments_id": "b1628c988bf3ac5ef7309cf4eb309ddf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}