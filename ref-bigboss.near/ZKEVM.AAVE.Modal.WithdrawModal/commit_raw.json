{"tx_hash": "GxaEkW83tuDQyHfn8dDMWUhoA3UueaZi6faobWvHpFja", "action_id_social": "2VUxw9d8gmMTEHfLqFsJ28BMJU6UGPsiyRGatqyEKAYH-0-widget", "block_id": 97301202, "block_timestamp": "2023-07-25T13:01:17.922Z", "signer_id": "ref-bigboss.near", "widget_name": "ZKEVM.AAVE.Modal.WithdrawModal", "source_code": "const {\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  withdrawETHGas,\n  withdrawERC20Gas,\n  formatHealthFactor,\n} = props;\n\nif (!data) {\n  return <div />;\n}\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  underlyingAsset,\n  decimals,\n  symbol,\n  underlyingBalance,\n  underlyingBalanceUSD,\n  marketReferencePriceInUsd,\n  aTokenAddress,\n  availableLiquidity,\n  healthFactor,\n} = data;\n\nconst availableLiquidityAmount = Big(availableLiquidity)\n  .div(Big(10).pow(decimals))\n  .toFixed();\n\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  .splitDiv{\n    height:1px;\n   .splitLine{\n     position:absolute;\n     left:0;\n     right:0;\n     width:100%;\n     border-top:1px solid #332C4B;\n   }\n }\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n  .balanceValue{\n    text-decoration:underline;\n    cursor:pointer;\n  }\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 16px;\n  color: white;\n`;\nconst DeepPurpleTexture = styled.div`\n  font-size: 14px;\n  color: #7C7F96;\n`\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nconst InputContainer = styled.div`\n   display: flex;\n   justify-content: space-between;\n   align-items:center;\n   background-color:rgba(53, 55, 73, 0.5);\n   height:55px;\n   border-radius:10px;\n   padding:0 12px;\n`\nconst BalanceContainer = styled.div`\n   display: flex;\n   justify-content: space-between;\n   align-items:center;  \n   margin-top:10px;\n`\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  allowanceAmount: 0,\n  needApprove: false,\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n});\n\nfunction updateGas() {\n  if ([\"ETH\", \"WETH\"].includes(symbol)) {\n    withdrawETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    withdrawERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\n\nconst _remainingSupply = Number(underlyingBalance) - Number(state.amount);\nconst remainingSupply = isNaN(_remainingSupply)\n  ? underlyingBalance\n  : Big(_remainingSupply).toFixed(2);\n\nfunction withdrawErc20(asset, actualAmount, shownAmount) {\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const pool = new ethers.Contract(\n        config.aavePoolV3Address,\n        config.aavePoolV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n\n      return pool[\"withdraw(address,uint256,address)\"](\n        asset,\n        actualAmount,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You withdraw ${Big(shownAmount).toFixed(8)} ${symbol}`,\n            callback: () => {\n              onRequestClose();\n              State.update({\n                loading: false,\n              });\n            },\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n          State.update({\n            loading: false,\n          });\n        }\n      });\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction withdrawETH(actualAmount, shownAmount) {\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n\n      return wrappedTokenGateway.withdrawETH(\n        config.aavePoolV3Address,\n        actualAmount,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You withdraw ${Big(shownAmount).toFixed(8)} ${symbol}`,\n            callback: () => {\n              onRequestClose();\n              State.update({\n                loading: false,\n              });\n            },\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n          State.update({\n            loading: false,\n          });\n        }\n      });\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction approveForGateway(tokenAddress, amount) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.approve(config.wrappedTokenGatewayV3Address, amount);\n}\n\nfunction allowanceForGateway(tokenAddress) {\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const token = new ethers.Contract(\n        tokenAddress,\n        config.erc20Abi.body,\n        Ethers.provider().getSigner()\n      );\n      return token.allowance(address, config.wrappedTokenGatewayV3Address);\n    });\n}\n\n/**\n *\n * @param {string} chainId\n * @param {string} address user address\n * @param {string} asset asset address\n * @param {string} action 'deposit' | 'withdraw' | 'borrow' | 'repay'\n * @param {string} amount amount in USD with 2 fixed decimals\n * @returns\n */\nfunction getNewHealthFactor(chainId, address, asset, action, amount) {\n  const url = `https://aave-api.pages.dev/${chainId}/health/${address}`;\n  return asyncFetch(`${url}?asset=${asset}&action=${action}&amount=${amount}`);\n}\n\nfunction update() {\n  allowanceForGateway(aTokenAddress)\n    .then((amount) => Number(amount.toString()))\n    .then((amount) =>\n      State.update({\n        allowanceAmount: Big(amount).div(Big(10).pow(decimals)).toNumber(),\n      })\n    );\n\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\n\nupdate();\n\nfunction bigMin(_a, _b) {\n  const a = Big(_a);\n  const b = Big(_b);\n  return a.gt(b) ? b : a;\n}\n\nconst actualMaxValue =\n  isValid(underlyingBalance) && isValid(availableLiquidityAmount)\n    ? Big(underlyingBalance).lt(availableLiquidityAmount)\n      ? config.MAX_UINT_256\n      : Big(availableLiquidityAmount)\n          .mul(Big(10).pow(decimals))\n          .toFixed(0, ROUND_DOWN)\n    : \"0\";\nconst shownMaxValue =\n  isValid(underlyingBalance) && isValid(availableLiquidityAmount)\n    ? bigMin(underlyingBalance, availableLiquidityAmount).toFixed(decimals)\n    : Big(\"0\").toFixed(decimals);\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      getNewHealthFactor(\n        chainId,\n        address,\n        data.underlyingAsset,\n        \"withdraw\",\n        state.amountInUSD\n      ).then((response) => {\n        const newHealthFactor = formatHealthFactor(JSON.parse(response.body));\n        State.update({ newHealthFactor });\n      });\n    });\n}, 1000);\n\nconst changeValue = (value) => {\n  if (Number(value) > shownMaxValue) {\n    value = shownMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value)\n      .mul(marketReferencePriceInUsd)\n      .toFixed(2, ROUND_DOWN);\n    State.update({\n      amountInUSD,\n    });\n    updateNewHealthFactor();\n  } else {\n    State.update({\n      amountInUSD: \"0.00\",\n      newHealthFactor: \"-\",\n    });\n  }\n  State.update({ amount: value });\n};\n\nconst disabled =\n  state.newHealthFactor !== \"\u221e\" &&\n  (!isValid(state.newHealthFactor) ||\n    state.newHealthFactor === \"\" ||\n    Big(state.newHealthFactor).lt(1));\n\nreturn (\n  <Widget\n    src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.BaseModal`}\n    props={{\n      title: `Withdraw ${symbol}`,\n      onRequestClose: props.onRequestClose,\n      children: (\n        <WithdrawContainer>\n          <Widget\n            src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Amount\",\n              config,\n              children: (\n                <>\n                   <InputContainer>\n                      <TokenTexture>\n                        <Input\n                          type=\"number\"\n                          value={state.amount}\n                          onChange={(e) => {\n                            changeValue(e.target.value);\n                          }}\n                          placeholder=\"0\"\n                        />\n                      </TokenTexture>\n                      <TokenWrapper>\n                          <img\n                            width={26}\n                            height={26}\n                            src={`https://app.aave.com/icons/tokens/${symbol.toLowerCase()}.svg`}\n                          />\n                          <TokenTexture>{symbol}</TokenTexture>\n                        </TokenWrapper>\n                   </InputContainer>\n                   <BalanceContainer>\n                      <GrayTexture>${state.amountInUSD}</GrayTexture>\n                      <GrayTexture>\n                        Balance: <span className=\"balanceValue\" onClick={() => {changeValue(shownMaxValue);}}>{Big(underlyingBalance).toFixed(3, ROUND_DOWN)}</span>\n                      </GrayTexture>\n                    </BalanceContainer>\n                </>\n              ),\n            }}\n          />\n          <div className=\"splitDiv\">\n               <div className=\"splitLine\"></div>\n            </div>\n          <Widget\n            src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Transaction Overview\",\n              config,\n              children: (\n                <TransactionOverviewContainer>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <WhiteTexture>Remaining Supply</WhiteTexture>,\n                      right: (\n                        <WhiteTexture>\n                          {remainingSupply} {symbol}\n                        </WhiteTexture>\n                      ),\n                    }}\n                  />\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <WhiteTexture>Health Factor</WhiteTexture>,\n                      right: (\n                        <div style={{ textAlign: \"right\" }}>\n                          <GreenTexture>\n                            {healthFactor}\n                            <img\n                              src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                              width={16}\n                              height={16}\n                            />{\" \"}\n                            {state.newHealthFactor}\n                          </GreenTexture>\n                          <DeepPurpleTexture>\n                            Liquidation at &lt; {config.FIXED_LIQUIDATION_VALUE}\n                          </DeepPurpleTexture>\n                        </div>\n                      ),\n                    }}\n                  />\n                </TransactionOverviewContainer>\n              ),\n            }}\n          />\n          <div className=\"splitDiv\">\n              <div className=\"splitLine\"></div>\n          </div>\n          <div style={{display:'flex',justifyContent:'flex-end'}}> \n            <Widget\n              src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n              props={{ gas: state.gas, config }}\n            />\n          </div>\n          \n          {state.needApprove && symbol === \"ETH\" && (\n            <Widget\n              src={`ref-bigboss.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n              props={{\n                config,\n                loading: state.loading,\n                children: `Approve ${symbol}`,\n                disabled,\n                onClick: () => {\n                  State.update({\n                    loading: true,\n                  });\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  approveForGateway(aTokenAddress, amount)\n                    .then((tx) => {\n                      tx.wait().then((res) => {\n                        const { status } = res;\n                        if (status === 1) {\n                          State.update({ needApprove: false, loading: false });\n                        }\n                      });\n                    })\n                    .catch(() => State.update({ loading: false }));\n                },\n              }}\n            />\n          )}\n          {!(state.needApprove && symbol === \"ETH\") && (\n            <Widget\n              src={`ref-bigboss.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n              props={{\n                config,\n                loading: state.loading,\n                children: \"Withdraw\",\n                disabled,\n                onClick: () => {\n                  const actualAmount =\n                    state.amount === shownMaxValue\n                      ? actualMaxValue\n                      : Big(state.amount)\n                          .mul(Big(10).pow(decimals))\n                          .toFixed(0, ROUND_DOWN);\n                  const shownAmount = state.amount;\n                  if (symbol === \"ETH\" || symbol === \"WETH\") {\n                    // supply weth\n                    withdrawETH(actualAmount, shownAmount);\n                  } else {\n                    // supply common\n                    withdrawErc20(underlyingAsset, actualAmount, shownAmount);\n                  }\n                },\n              }}\n            />\n          )}\n        </WithdrawContainer>\n      ),\n      config,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-bigboss.near/widget/ZKEVM.AAVE.Modal.WithdrawModal", "fact_widget_deployments_id": "8d3c89b8a3b2e1fcda69169ac6b50d4e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 10}