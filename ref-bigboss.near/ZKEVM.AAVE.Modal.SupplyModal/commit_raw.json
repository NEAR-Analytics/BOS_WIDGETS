{"tx_hash": "HNX9k916DAQw3yFpVfQyKWsRZYyDT6PxbvD1QrpfrgDX", "action_id_social": "9ESU8ed8kQXPrAsougjQtocykDLSaQAUJY2D9LhK9ME6-0-widget", "block_id": 97300486, "block_timestamp": "2023-07-25T12:47:59.672Z", "signer_id": "ref-bigboss.near", "widget_name": "ZKEVM.AAVE.Modal.SupplyModal", "source_code": "const {\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  depositETHGas,\n  depositERC20Gas,\n  formatHealthFactor,\n} = props;\n\nif (!data) {\n  return <div />;\n}\n\nconst MIN_ETH_GAS_FEE = 0.001;\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  symbol,\n  balance,\n  marketReferencePriceInUsd,\n  supplyAPY,\n  usageAsCollateralEnabled,\n  decimals,\n  token,\n  name: tokenName,\n  healthFactor,\n} = data;\n\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  .splitDiv{\n     height:1px;\n    .splitLine{\n      position:absolute;\n      left:0;\n      right:0;\n      width:100%;\n      border-top:1px solid #332C4B;\n    }\n  }\n  \n`;\n\nconst TokenTexture = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #7C7F96;\n  .balanceValue{\n    text-decoration:underline;\n    cursor:pointer;\n  }\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 16px;\n  color: white;\n`;\nconst DeepPurpleTexture = styled.div`\n  font-size: 14px;\n  color: #7C7F96;\n`\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nconst InputContainer = styled.div`\n   display: flex;\n   justify-content: space-between;\n   align-items:center;\n   background-color:rgba(53, 55, 73, 0.5);\n   height:55px;\n   border-radius:10px;\n   padding:0 12px;\n`\nconst BalanceContainer = styled.div`\n   display: flex;\n   justify-content: space-between;\n   align-items:center;  \n   margin-top:10px;\n`\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n});\n\nfunction updateGas() {\n  if ([\"ETH\", \"WETH\"].includes(symbol)) {\n    depositETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    depositERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\n\nfunction getNonce(tokenAddress, userAddress) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.nonces(userAddress).then((nonce) => nonce.toNumber());\n}\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} tokenName token name\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @returns raw signature string will could be used in supplyWithPermit\n */\nfunction signERC20Approval(user, reserve, tokenName, amount, deadline) {\n  return getNonce(reserve, user).then((nonce) => {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: \"name\", type: \"string\" },\n          { name: \"version\", type: \"string\" },\n          { name: \"chainId\", type: \"uint256\" },\n          { name: \"verifyingContract\", type: \"address\" },\n        ],\n        Permit: [\n          { name: \"owner\", type: \"address\" },\n          { name: \"spender\", type: \"address\" },\n          { name: \"value\", type: \"uint256\" },\n          { name: \"nonce\", type: \"uint256\" },\n          { name: \"deadline\", type: \"uint256\" },\n        ],\n      },\n      primaryType: \"Permit\",\n      domain: {\n        name: tokenName,\n        version: \"1\",\n        chainId,\n        verifyingContract: reserve,\n      },\n      message: {\n        owner: user,\n        spender: config.aavePoolV3Address,\n        value: amount,\n        nonce,\n        deadline,\n      },\n    };\n\n    const dataToSign = JSON.stringify(typeData);\n\n    return Ethers.provider().send(\"eth_signTypedData_v4\", [user, dataToSign]);\n  });\n}\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @param {string} rawSig signature from signERC20Approval\n * @returns txn object\n */\nfunction supplyWithPermit(user, reserve, amount, deadline, rawSig) {\n  const sig = ethers.utils.splitSignature(rawSig);\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    config.aavePoolV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n  return pool[\n    \"supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)\"\n  ](reserve, amount, user, 0, deadline, sig.v, sig.r, sig.s);\n}\n\nfunction depositETH(amount) {\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n      return wrappedTokenGateway.depositETH(\n        config.aavePoolV3Address,\n        address,\n        0,\n        {\n          value: amount,\n        }\n      );\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status, blockHash } = res;\n        console.log('res', res);\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You supplied ${Big(amount)\n              .div(Big(10).pow(decimals))\n              .toFixed(8)} ${symbol}`,\n            callback: () => {\n              onRequestClose();\n              State.update({\n                loading: false,\n              });\n            },\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n          State.update({\n            loading: false,\n          });\n        }\n        add_action({\n          \"action_title\": `Supply ${symbol} on AAVE`,\n          \"action_type\": \"Supply\",\n          \"action_tokens\": JSON.stringify([`${symbol}`]),\n          \"action_amount\": null,\n          \"account_id\": eth_account_id,\n          \"account_info\": \"\",\n          \"template\": \"AAVE\",\n          \"action_status\": status === 1 ? \"Success\": \"Failed\",\n          \"tx_id\": blockHash,\n        })\n      });\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction add_action(param_body) {\n  asyncFetch(\"http://139.162.85.48:8100/add-action-data\", {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(param_body)\n  })\n}\n\nfunction depositErc20(amount) {\n  State.update({\n    loading: true,\n  });\n  const deadline = Math.floor(Date.now() / 1000 + 3600); // after an hour\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      signERC20Approval(userAddress, token, tokenName, amount, deadline)\n        .then((rawSig) => {\n          return supplyWithPermit(userAddress, token, amount, deadline, rawSig);\n        })\n        .then((tx) => {\n          tx.wait().then((res) => {\n            const { status, blockHash } = res;\n            if (status === 1) {\n              onActionSuccess({\n                msg: `You supplied ${Big(amount)\n                  .div(Big(10).pow(decimals))\n                  .toFixed(8)} ${symbol}`,\n                callback: () => {\n                  onRequestClose();\n                  State.update({\n                    loading: false,\n                  });\n                },\n              });\n              console.log(\"tx succeeded\", res);\n            } else {\n              State.update({\n                loading: false,\n              });\n              console.log(\"tx failed\", res);\n            }\n            add_action({\n              \"action_title\": `Supply ${symbol} on AAVE`,\n              \"action_type\": \"Supply\",\n              \"action_tokens\": JSON.stringify([`${symbol}`]),\n              \"action_amount\": null,\n              \"account_id\": eth_account_id,\n              \"account_info\": \"\",\n              \"template\": \"AAVE\",\n              \"action_status\": status === 1 ? \"Success\": \"Failed\",\n              \"tx_id\": blockHash,\n            })\n          });\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\n/**\n *\n * @param {string} chainId\n * @param {string} address user address\n * @param {string} asset asset address\n * @param {string} action 'deposit' | 'withdraw' | 'borrow' | 'repay'\n * @param {string} amount amount in USD with 2 fixed decimals\n * @returns\n */\nfunction getNewHealthFactor(chainId, address, asset, action, amount) {\n  const url = `https://aave-api.pages.dev/${chainId}/health/${address}`;\n  return asyncFetch(`${url}?asset=${asset}&action=${action}&amount=${amount}`);\n}\n\nconst maxValue =\n  symbol === \"ETH\" || symbol === \"WETH\"\n    ? Big(balance).minus(MIN_ETH_GAS_FEE).toFixed(decimals)\n    : Big(balance).toFixed(decimals);\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      getNewHealthFactor(\n        chainId,\n        address,\n        data.underlyingAsset,\n        \"deposit\",\n        state.amountInUSD\n      ).then((response) => {\n        const newHealthFactor = formatHealthFactor(JSON.parse(response.body));\n        State.update({ newHealthFactor });\n      });\n    });\n}, 1000);\n\nconst changeValue = (value) => {\n  if (Number(value) > Number(maxValue)) {\n    value = maxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value)\n      .mul(marketReferencePriceInUsd)\n      .toFixed(2, ROUND_DOWN);\n    State.update({\n      amountInUSD,\n    });\n    updateNewHealthFactor();\n  } else {\n    State.update({\n      amountInUSD: \"0.00\",\n      newHealthFactor: \"-\",\n    });\n  }\n  State.update({ amount: value });\n};\nconst eth_account_id = Ethers.send(\"eth_requestAccounts\", [])[0];\nreturn (\n  <>\n    <Widget\n      src={`ref-admin.near/widget/ZKEVM.AAVE.Modal.BaseModal`}\n      props={{\n        title: `Supply ${symbol}`,\n        onRequestClose: onRequestClose,\n        children: (\n          <WithdrawContainer>\n            <Widget\n              src={`ref-admin.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Amount\",\n                config,\n                children: (\n                  <>\n                    <InputContainer>\n                      <TokenTexture>\n                        <Input\n                          type=\"number\"\n                          value={state.amount}\n                          onChange={(e) => {\n                            changeValue(e.target.value);\n                          }}\n                          placeholder=\"0\"\n                        />\n                      </TokenTexture>\n                      <TokenWrapper>\n                        <img\n                          width={22}\n                          height={22}\n                          src={`https://app.aave.com/icons/tokens/${symbol.toLowerCase()}.svg`}\n                        />\n                        <TokenTexture>{symbol}</TokenTexture>\n                      </TokenWrapper>\n                    </InputContainer>\n                    <BalanceContainer>\n                      <GrayTexture>${state.amountInUSD}</GrayTexture>\n                      <GrayTexture>\n                        Balance: <span className=\"balanceValue\" onClick={() => {changeValue(maxValue);}}>{balance}</span>\n                      </GrayTexture>\n                    </BalanceContainer>\n                  </>\n                ),\n              }}\n            />\n            <div className=\"splitDiv\">\n               <div className=\"splitLine\"></div>\n            </div>\n            \n            <Widget\n              src={`ref-admin.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Transaction Overview\",\n                config,\n                children: (\n                  <TransactionOverviewContainer>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <WhiteTexture>Supply APY</WhiteTexture>,\n                        right: (\n                          <WhiteTexture>\n                            {(Number(supplyAPY) * 100).toFixed(2)}%\n                          </WhiteTexture>\n                        ),\n                      }}\n                    />\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <WhiteTexture>Collateralization</WhiteTexture>,\n                        right: usageAsCollateralEnabled ? (\n                          <GreenTexture>Enabled</GreenTexture>\n                        ) : (\n                          <RedTexture>Disabled</RedTexture>\n                        ),\n                      }}\n                    />\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <WhiteTexture>Health Factor</WhiteTexture>,\n                        right: (\n                          <div style={{ textAlign: \"right\" }}>\n                            <GreenTexture>\n                              {healthFactor}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />{\" \"}\n                              {state.newHealthFactor}\n                            </GreenTexture>\n                            <DeepPurpleTexture>\n                              Liquidation at &lt;{\" \"}\n                              {config.FIXED_LIQUIDATION_VALUE}\n                            </DeepPurpleTexture>\n                          </div>\n                        ),\n                      }}\n                    />\n                  </TransactionOverviewContainer>\n                ),\n              }}\n            />\n            <div className=\"splitDiv\">\n               <div className=\"splitLine\"></div>\n            </div>\n            <div style={{\n              display:'flex',\n              justifyContent:'flex-end'\n            }}>\n              <Widget\n                src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n                props={{ gas: state.gas, config }}\n              />\n            </div>\n            <Widget\n              src={`ref-admin.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n              props={{\n                config,\n                children: `Supply ${symbol}`,\n                loading: state.loading,\n                onClick: () => {\n                  const amount = Big(state.amount || 0)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  if (symbol === \"ETH\" || symbol === \"WETH\") {\n                    // supply weth\n                    depositETH(amount);\n                  } else {\n                    // supply common\n                    depositErc20(amount);\n                  }\n                },\n              }}\n            />\n          </WithdrawContainer>\n        ),\n        config,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-bigboss.near/widget/ZKEVM.AAVE.Modal.SupplyModal", "fact_widget_deployments_id": "930e5405e24cf960ad3e6509e46c6b44", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 24}