{"tx_hash": "BsAgURKTgd9XZSpJEjk2o4RKsJnvcMd3d518Pt7WCVkP", "action_id_social": "B8qqX1jhvkbcBjfjEHFkP1S9rK5vVAtNAjrgq2TssmDK-0-widget", "block_id": 97846777, "block_timestamp": "2023-08-01T14:52:51.972Z", "signer_id": "ref-bigboss.near", "widget_name": "ZKEVM.AAVE.Modal.BorrowModal", "source_code": "const {\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  borrowETHGas,\n  borrowERC20Gas,\n  formatHealthFactor,\n} = props;\n\nif (!data) {\n  return <div />;\n}\n\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  symbol,\n  marketReferencePriceInUsd,\n  healthFactor,\n  availableBorrows,\n  availableBorrowsUSD,\n  decimals,\n  underlyingAsset,\n  variableDebtTokenAddress,\n} = data;\n\nconst BorrowContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  .splitDiv {\n    height: 1px;\n    .splitLine {\n      position: absolute;\n      left: 0;\n      right: 0;\n      width: 100%;\n      border-top: 1px solid #332c4b;\n    }\n  }\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7f96;\n  .balanceValue {\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 16px;\n  color: white;\n`;\nconst DeepPurpleTexture = styled.div`\n  font-size: 14px;\n  color: #7c7f96;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: rgba(53, 55, 73, 0.5);\n  height: 55px;\n  border-radius: 10px;\n  padding: 0 12px;\n`;\nconst BalanceContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n`;\n\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  allowanceAmount: 0,\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n});\n\nfunction updateGas() {\n  if (symbol === config.nativeCurrency.symbol) {\n    borrowETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    borrowERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\nconst maxValue = Big(availableBorrows).toFixed(decimals);\nconst questionSwitch = Storage.get(\"zkevm-aave-question-switch\", \"ref-bigboss.near/widget/ZKEVM.switch_quest_card\");\nconst eth_account_id = Ethers.send(\"eth_requestAccounts\", [])[0];\n\n/**\n *\n * @param {string} chainId\n * @param {string} address user address\n * @param {string} asset asset address\n * @param {string} action 'deposit' | 'withdraw' | 'borrow' | 'repay'\n * @param {string} amount amount in USD with 2 fixed decimals\n * @returns\n */\nfunction getNewHealthFactor(chainId, address, asset, action, amount) {\n  const url = `${config.AAVE_API_BASE_URL}/${chainId}/health/${address}`;\n  return asyncFetch(`${url}?asset=${asset}&action=${action}&amount=${amount}`);\n}\n\n/**\n * @param {string} vwETHAddress\n * @param {string} userAddress\n * @returns {BigNumber}\n */\nfunction borrowAllowance(vwETHAddress, userAddress) {\n  const vToken = new ethers.Contract(\n    vwETHAddress,\n    config.variableDebtTokenABI.body,\n    Ethers.provider().getSigner()\n  );\n\n  return vToken.borrowAllowance(\n    userAddress,\n    config.wrappedTokenGatewayV3Address\n  );\n}\n\nfunction approveDelegation(vwETHAddress) {\n  const vToken = new ethers.Contract(\n    vwETHAddress,\n    config.variableDebtTokenABI.body,\n    Ethers.provider().getSigner()\n  );\n  const maxUint256 = ethers.BigNumber.from(\n    \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n  );\n  return vToken.approveDelegation(\n    config.wrappedTokenGatewayV3Address,\n    maxUint256\n  );\n}\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      getNewHealthFactor(\n        chainId,\n        address,\n        data.underlyingAsset,\n        \"borrow\",\n        state.amountInUSD\n      ).then((response) => {\n        const newHealthFactor = formatHealthFactor(response.body);\n        State.update({ newHealthFactor });\n      });\n    });\n}, 1000);\n\nconst changeValue = (value) => {\n  let amountInUSD = \"0.00\";\n  if (Number(value) > Number(maxValue)) {\n    value = maxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    amountInUSD = Big(value)\n      .mul(marketReferencePriceInUsd)\n      .toFixed(2, ROUND_DOWN);\n  }\n  State.update({ amount: value, amountInUSD });\n  updateNewHealthFactor();\n};\n\nfunction borrowERC20(amount) {\n  State.update({ loading: true });\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    config.aavePoolV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      return pool[\"borrow(address,uint256,uint256,uint16,address)\"](\n        underlyingAsset,\n        amount,\n        2, // variable interest rate\n        0,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status, transactionHash } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You borrowed ${Big(amount)\n              .div(Big(10).pow(decimals))\n              .toFixed(8)} ${symbol}`,\n            callback: () => {\n              onRequestClose();\n              State.update({\n                loading: false,\n              });\n            },\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n          State.update({\n            loading: false,\n          });\n        }\n        add_action({\n          action_title: `Borrow ${symbol} on AAVE`,\n          action_type: \"Borrow\",\n          action_tokens: JSON.stringify([`${symbol}`]),\n          action_amount: null,\n          account_id: eth_account_id,\n          account_info: \"\",\n          template: \"AAVE\",\n          action_switch: questionSwitch == \"on\" ? '1': '0',\n          action_status: status === 1 ? \"Success\" : \"Failed\",\n          tx_id: transactionHash,\n        });\n      });\n    })\n    .catch(() => State.update({ loading: false }));\n}\nfunction add_action(param_body) {\n  asyncFetch(\"https://bos-api.delink.one/add-action-data\", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(param_body),\n  });\n}\nfunction borrowETH(amount) {\n  const wrappedTokenGateway = new ethers.Contract(\n    config.wrappedTokenGatewayV3Address,\n    config.wrappedTokenGatewayV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n  State.update({ loading: true });\n  return wrappedTokenGateway\n    .borrowETH(\n      config.aavePoolV3Address,\n      amount,\n      2, // variable interest rate\n      0\n    )\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status, transactionHash } = res;\n        if (status === 1) {\n          onActionSuccess({\n            msg: `You borrowed ${Big(amount)\n              .div(Big(10).pow(decimals))\n              .toFixed(8)} ${symbol}`,\n            callback: () => {\n              onRequestClose();\n              State.update({\n                loading: false,\n              });\n            },\n          });\n          console.log(\"tx succeeded\", res);\n        } else {\n          console.log(\"tx failed\", res);\n          State.update({\n            loading: false,\n          });\n        }\n        add_action({\n          action_title: `Borrow ${symbol} on AAVE`,\n          action_type: \"Borrow\",\n          action_tokens: JSON.stringify([`${symbol}`]),\n          action_amount: null,\n          account_id: eth_account_id,\n          account_info: \"\",\n          template: \"AAVE\",\n          action_switch: questionSwitch == \"on\" ? '1': '0',\n          action_status: status === 1 ? \"Success\" : \"Failed\",\n          tx_id: transactionHash,\n        });\n      });\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction update() {\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      borrowAllowance(variableDebtTokenAddress, address)\n        .then((amountRaw) => amountRaw.toString())\n        .then((amount) => {\n          State.update({\n            allowanceAmount: Big(amount).div(Big(10).pow(decimals)).toNumber(),\n          });\n        });\n    });\n\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\nfunction add_action(param_body) {\n  asyncFetch(\"https://bos-api.delink.one/add-action-data\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(param_body),\n    });\n}\nupdate();\nconst is_disabled = state.loading || Big(state.amount || 0).lte(0) || Big(availableBorrows || 0).lte(0);\nreturn (\n  <>\n    <Widget\n      src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.BaseModal`}\n      props={{\n        title: `Borrow ${symbol}`,\n        onRequestClose: onRequestClose,\n        children: (\n          <BorrowContainer>\n            <Widget\n              src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Amount\",\n                config,\n                children: (\n                  <>\n                  <InputContainer>\n                    <TokenTexture>\n                      <Input\n                        type=\"number\"\n                        value={state.amount}\n                        onChange={(e) => {\n                          changeValue(e.target.value);\n                        }}\n                        placeholder=\"0\"\n                      />\n                    </TokenTexture>\n                    <TokenWrapper>\n                      <img\n                        width={22}\n                        height={22}\n                        src={`https://app.aave.com/icons/tokens/${symbol.toLowerCase()}.svg`}\n                      />\n                      <TokenTexture>{symbol}</TokenTexture>\n                    </TokenWrapper>\n                  </InputContainer>\n                  <BalanceContainer>\n                    <GrayTexture>${state.amountInUSD}</GrayTexture>\n                    <GrayTexture>\n                      Available:{\" \"}\n                      <span\n                        onClick={() => {\n                          changeValue(maxValue);\n                        }}\n                        className=\"balanceValue\"\n                      >\n                        {isValid(availableBorrows) && availableBorrows !== \"-\"\n                          ? Big(availableBorrows).toFixed(7)\n                          : availableBorrows}\n                      </span>\n                    </GrayTexture>\n                  </BalanceContainer>\n                </>\n                ),\n              }}\n            />\n            <div className=\"splitDiv\">\n              <div className=\"splitLine\"></div>\n            </div>\n            <Widget\n              src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Transaction Overview\",\n                config,\n                children: (\n                  <TransactionOverviewContainer>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Health Factor</PurpleTexture>,\n                        right: (\n                          <div style={{ textAlign: \"right\" }}>\n                            <GreenTexture>\n                              {healthFactor}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />{\" \"}\n                              {state.newHealthFactor}\n                            </GreenTexture>\n                            <DeepPurpleTexture>\n                              Liquidation at &lt;{\" \"}\n                              {config.FIXED_LIQUIDATION_VALUE}\n                            </DeepPurpleTexture>\n                          </div>\n                        ),\n                      }}\n                    />\n                  </TransactionOverviewContainer>\n                ),\n              }}\n            />\n             <div className=\"splitDiv\">\n              <div className=\"splitLine\"></div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n              }}\n            >\n              <Widget\n                src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n                props={{ gas: state.gas, config }}\n              />\n            </div>\n            {state.needApprove && symbol === config.nativeCurrency.symbol && (\n              <Widget\n                src={`ref-bigboss.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n                props={{\n                  config,\n                  loading: state.loading,\n                  disabled: is_disabled,\n                  children: `Approve ${symbol}`,\n                  onClick: () => {\n                    State.update({\n                      loading: true,\n                    });\n                    const amount = Big(state.amount)\n                      .mul(Big(10).pow(decimals))\n                      .toFixed(0);\n\n                    approveDelegation(variableDebtTokenAddress)\n                      .then((tx) => {\n                        tx.wait().then((res) => {\n                          const { status } = res;\n                          if (status === 1) {\n                            State.update({\n                              needApprove: false,\n                              loading: false,\n                            });\n                          }\n                        });\n                      })\n                      .catch(() => State.update({ loading: false }));\n                  },\n                }}\n              />\n            )}\n            {!(\n              state.needApprove && symbol === config.nativeCurrency.symbol\n            ) && (\n              <Widget\n                src={`ref-bigboss.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n                props={{\n                  config,\n                  children: `Borrow ${symbol}`,\n                  loading: state.loading,\n                  disabled: is_disabled,\n                  onClick: () => {\n                    const amount = Big(state.amount)\n                      .mul(Big(10).pow(decimals))\n                      .toFixed(0);\n                    if (symbol === config.nativeCurrency.symbol) {\n                      // borrow weth\n                      borrowETH(amount);\n                    } else {\n                      // borrow common\n                      borrowERC20(amount);\n                    }\n                  },\n                }}\n              />\n            )}\n          </BorrowContainer>\n        ),\n        config,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-bigboss.near/widget/ZKEVM.AAVE.Modal.BorrowModal", "fact_widget_deployments_id": "3cc6e0f856f61e33d1ebd5768dcbbf1a", "inserted_timestamp": "2023-08-01T16:42:25.368Z", "modified_timestamp": "2023-08-01T16:42:25.368Z", "__row_index": 1}