{"tx_hash": "GvDyCqKivZWJFrGNfqMKGhE6SFiwjZMnL9saHofxVdm3", "action_id_social": "EBmDfeRWhco3Yqa5R51pDNUzv8HBpxaPcf1mxMpYmPNC-0-widget", "block_id": 97843517, "block_timestamp": "2023-08-01T13:49:06.486Z", "signer_id": "ref-bigboss.near", "widget_name": "ZKEVM.AAVE.Modal.RepayModal", "source_code": "const {\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  onlyOneBorrow,\n  repayETHGas,\n  repayERC20Gas,\n  formatHealthFactor,\n} = props;\n\nif (!data) {\n  return <div />;\n}\n\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  symbol,\n  marketReferencePriceInUsd,\n  healthFactor,\n  availableBorrows,\n  availableBorrowsUSD,\n  decimals,\n  underlyingAsset,\n  variableBorrows,\n  name: tokenName,\n  balance,\n  supportPermit,\n} = data;\n\nconst RepayContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  .splitDiv{\n    height:1px;\n   .splitLine{\n     position:absolute;\n     left:0;\n     right:0;\n     width:100%;\n     border-top:1px solid #332C4B;\n   }\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n  .balanceValue {\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 16px;\n  color: white;\n`;\nconst DeepPurpleTexture = styled.div`\n  font-size: 14px;\n  color: #7c7f96;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: rgba(53, 55, 73, 0.5);\n  height: 55px;\n  border-radius: 10px;\n  padding: 0 12px;\n`;\nconst BalanceContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n`;\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n  allowanceAmount: \"0\",\n  needApprove: false,\n});\n\nfunction updateGas() {\n  if (symbol === config.nativeCurrency.symbol) {\n    repayETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    repayERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\nconst questionSwitch = Storage.get(\"zkevm-aave-question-switch\", \"ref-bigboss.near/widget/ZKEVM.switch_quest_card\");\nconst eth_account_id = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nfunction bigMin(_a, _b) {\n  const a = Big(_a);\n  const b = Big(_b);\n  return a.gt(b) ? b : a;\n}\n\nfunction getAvailableBalance() {\n  if (symbol === config.nativeCurrency.symbol) {\n    const newBalance = Number(balance) - 0.01;\n    if (newBalance <= 0) {\n      return 0;\n    } else {\n      return newBalance;\n    }\n  } else {\n    return balance;\n  }\n}\n\nconst actualMaxValue =\n  isValid(balance) && isValid(variableBorrows)\n    ? bigMin(\n        getAvailableBalance(),\n        Big(variableBorrows).times(1.01).toNumber()\n      ).toFixed()\n    : \"0\";\nconst shownMaxValue =\n  isValid(balance) && isValid(variableBorrows)\n    ? bigMin(getAvailableBalance(), variableBorrows).toFixed(decimals)\n    : Big(\"0\").toFixed(decimals);\n\n/**\n *\n * @param {string} chainId\n * @param {string} address user address\n * @param {string} asset asset address\n * @param {string} action 'deposit' | 'withdraw' | 'borrow' | 'repay'\n * @param {string} amount amount in USD with 2 fixed decimals\n * @returns\n */\nfunction getNewHealthFactor(chainId, address, asset, action, amount) {\n  const url = `${config.AAVE_API_BASE_URL}/${chainId}/health/${address}`;\n  return asyncFetch(`${url}?asset=${asset}&action=${action}&amount=${amount}`);\n}\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      getNewHealthFactor(\n        chainId,\n        address,\n        data.underlyingAsset,\n        \"repay\",\n        state.amountInUSD\n      ).then((response) => {\n        const newHealthFactor = formatHealthFactor(response.body);\n        State.update({ newHealthFactor });\n      });\n    });\n}, 1000);\n\nconst changeValue = (value) => {\n  let amountInUSD = \"0.00\";\n  if (Number(value) > Number(shownMaxValue)) {\n    value = shownMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    amountInUSD = Big(value)\n      .mul(marketReferencePriceInUsd)\n      .toFixed(2, ROUND_DOWN);\n  }\n  State.update({ amount: value, amountInUSD });\n  updateNewHealthFactor();\n};\n\nfunction getNonce(tokenAddress, userAddress) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.nonces(userAddress).then((nonce) => nonce.toNumber());\n}\n\nfunction getAllowance() {\n  const tokenAddress = underlyingAsset;\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      const token = new ethers.Contract(\n        tokenAddress,\n        config.erc20Abi.body,\n        Ethers.provider().getSigner()\n      );\n      token\n        .allowance(userAddress, config.aavePoolV3Address)\n        .then((allowanceAmount) => allowanceAmount.toString())\n        .then((allowanceAmount) => {\n          State.update({\n            allowanceAmount: Big(allowanceAmount)\n              .div(Big(10).pow(decimals))\n              .toFixed(),\n          });\n        });\n    });\n}\ngetAllowance();\n\nfunction repayFromApproval(amount) {\n  const tokenAddress = underlyingAsset;\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    config.aavePoolV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      return pool[\"repay(address,uint256,uint256,address)\"](\n        tokenAddress,\n        amount,\n        2, // variable interest rate\n        userAddress\n      );\n    });\n}\n\nfunction approve(amount) {\n  const tokenAddress = underlyingAsset;\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n  return token[\"approve(address,uint256)\"](config.aavePoolV3Address, amount);\n}\n\nfunction update() {\n  if (supportPermit) {\n    return;\n  }\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\nupdate();\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} tokenName token name\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @returns raw signature string will could be used in supplyWithPermit\n */\nfunction signERC20Approval(user, reserve, tokenName, amount, deadline) {\n  return getNonce(reserve, user).then((nonce) => {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: \"name\", type: \"string\" },\n          { name: \"version\", type: \"string\" },\n          { name: \"chainId\", type: \"uint256\" },\n          { name: \"verifyingContract\", type: \"address\" },\n        ],\n        Permit: [\n          { name: \"owner\", type: \"address\" },\n          { name: \"spender\", type: \"address\" },\n          { name: \"value\", type: \"uint256\" },\n          { name: \"nonce\", type: \"uint256\" },\n          { name: \"deadline\", type: \"uint256\" },\n        ],\n      },\n      primaryType: \"Permit\",\n      domain: {\n        name: tokenName,\n        version: \"1\",\n        chainId,\n        verifyingContract: reserve,\n      },\n      message: {\n        owner: user,\n        spender: config.aavePoolV3Address,\n        value: amount,\n        nonce,\n        deadline,\n      },\n    };\n\n    const dataToSign = JSON.stringify(typeData);\n\n    return Ethers.provider().send(\"eth_signTypedData_v4\", [user, dataToSign]);\n  });\n}\n\n/**\n *\n * @param {*} rawSig signature from signERC20Approval\n * @param {string} address user address\n * @param {string} asset asset address (e.g. USDT)\n * @param {string} amount repay amount in full decimals\n * @param {number} deadline UNIX timestamp in SECONDS\n * @returns\n */\nfunction repayERC20(shownAmount, actualAmount) {\n  State.update({\n    loading: true,\n  });\n  const asset = underlyingAsset;\n  const deadline = Math.floor(Date.now() / 1000 + 3600); // after an hour\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      if (!supportPermit) {\n        repayFromApproval(actualAmount)\n          .then((tx) => {\n            tx.wait().then((res) => {\n              const { status, transactionHash } = res;\n              if (status === 1) {\n                onActionSuccess({\n                  msg: `You repaid ${Big(shownAmount).toFixed(8)} ${symbol}`,\n                  callback: () => {\n                    onRequestClose();\n                    State.update({\n                      loading: false,\n                    });\n                  },\n                });\n                console.log(\"tx succeeded\", res);\n              } else {\n                State.update({\n                  loading: false,\n                });\n                console.log(\"tx failed\", res);\n              }\n              add_action({\n                action_title: `Repay ${symbol} on AAVE`,\n                action_type: \"Repay\",\n                action_tokens: JSON.stringify([`${symbol}`]),\n                action_amount: null,\n                account_id: eth_account_id,\n                account_info: \"\",\n                template: \"AAVE\",\n                action_switch: questionSwitch == \"on\" ? '1': '0',\n                action_status: status === 1 ? \"Success\" : \"Failed\",\n                tx_id: transactionHash,\n              });\n            });\n          })\n          .catch(() => State.update({ loading: false }));\n      } else {\n        return signERC20Approval(\n          address,\n          asset,\n          tokenName,\n          actualAmount,\n          deadline\n        )\n          .then((rawSig) => {\n            const sig = ethers.utils.splitSignature(rawSig);\n            const pool = new ethers.Contract(\n              config.aavePoolV3Address,\n              config.aavePoolV3ABI.body,\n              Ethers.provider().getSigner()\n            );\n\n            return pool[\n              \"repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)\"\n            ](\n              asset,\n              actualAmount,\n              2, // variable interest rate\n              address,\n              deadline,\n              sig.v,\n              sig.r,\n              sig.s\n            ).then((tx) => {\n              tx.wait().then((res) => {\n                const { status, transactionHash } = res;\n                if (status === 1) {\n                  onActionSuccess({\n                    msg: `You repaid ${Big(shownAmount).toFixed(8)} ${symbol}`,\n                    callback: () => {\n                      onRequestClose();\n                      State.update({\n                        loading: false,\n                      });\n                    },\n                  });\n                  console.log(\"tx succeeded\", res);\n                } else {\n                  State.update({\n                    loading: false,\n                  });\n                  console.log(\"tx failed\", res);\n                }\n                add_action({\n                  action_title: `Repay ${symbol} on AAVE`,\n                  action_type: \"Repay\",\n                  action_tokens: JSON.stringify([`${symbol}`]),\n                  action_amount: null,\n                  account_id: eth_account_id,\n                  account_info: \"\",\n                  template: \"AAVE\",\n                  action_switch: questionSwitch == \"on\" ? '1': '0',\n                  action_status: status === 1 ? \"Success\" : \"Failed\",\n                  tx_id: transactionHash,\n                });\n              });\n            });\n          })\n          .catch(() => State.update({ loading: false }));\n      }\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction repayETH(shownAmount, actualAmount) {\n  State.update({ loading: true });\n  const wrappedTokenGateway = new ethers.Contract(\n    config.wrappedTokenGatewayV3Address,\n    config.wrappedTokenGatewayV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      wrappedTokenGateway\n        .repayETH(\n          config.aavePoolV3Address,\n          actualAmount,\n          2, // variable interest rate\n          address,\n          {\n            value: actualAmount,\n          }\n        )\n        .then((tx) => {\n          tx.wait().then((res) => {\n            const { status, transactionHash } = res;\n            if (status === 1) {\n              onActionSuccess({\n                msg: `You repaid ${Big(shownAmount).toFixed(8)} ${symbol}`,\n                callback: () => {\n                  onRequestClose();\n                  State.update({\n                    loading: false,\n                  });\n                },\n              });\n              console.log(\"tx succeeded\", res);\n            } else {\n              State.update({\n                loading: false,\n              });\n              console.log(\"tx failed\", res);\n            }\n            add_action({\n              action_title: `Repay ${symbol} on AAVE`,\n              action_type: \"Repay\",\n              action_tokens: JSON.stringify([`${symbol}`]),\n              action_amount: null,\n              account_id: eth_account_id,\n              account_info: \"\",\n              template: \"AAVE\",\n              action_switch: questionSwitch == \"on\" ? '1': '0',\n              action_status: status === 1 ? \"Success\" : \"Failed\",\n              tx_id: transactionHash,\n            });\n          });\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\nfunction add_action(param_body) {\n  asyncFetch(\"https://bos-api.delink.one/add-action-data\", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(param_body),\n  });\n}\nreturn (\n  <>\n    <Widget\n      src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.BaseModal`}\n      props={{\n        title: `Repay ${symbol}`,\n        onRequestClose: onRequestClose,\n        children: (\n          <RepayContainer>\n            <Widget\n              src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Amount\",\n                config,\n                children: (\n                  <>\n                    <InputContainer>\n                      <TokenTexture>\n                        <Input\n                          type=\"number\"\n                          value={state.amount}\n                          onChange={(e) => {\n                            changeValue(e.target.value);\n                          }}\n                          placeholder=\"0\"\n                        />\n                      </TokenTexture>\n                      <TokenWrapper>\n                        <img\n                          width={26}\n                          height={26}\n                          src={`https://app.aave.com/icons/tokens/${symbol.toLowerCase()}.svg`}\n                        />\n                        <TokenTexture>{symbol}</TokenTexture>\n                      </TokenWrapper>\n                    </InputContainer>\n                    <BalanceContainer>\n                      <GrayTexture>${state.amountInUSD}</GrayTexture>\n                      <GrayTexture>\n                        Balance:{\" \"}\n                        <span\n                          className=\"balanceValue\"\n                          onClick={() => {\n                            changeValue(shownMaxValue);\n                          }}\n                        >\n                          {balance === \"\" || !isValid(balance)\n                            ? \"-\"\n                            : Number(balance).toFixed(7)}\n                        </span>\n                      </GrayTexture>\n                    </BalanceContainer>\n                  </>\n                ),\n              }}\n            />\n            <div className=\"splitDiv\">\n              <div className=\"splitLine\"></div>\n            </div>\n            <Widget\n              src={`ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Transaction Overview\",\n                config,\n                children: (\n                  <TransactionOverviewContainer>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Remaining Debt</PurpleTexture>,\n                        right: (\n                          <div style={{ textAlign: \"right\" }}>\n                            <DeepPurpleTexture>\n                              {Number(variableBorrows).toFixed(7) +\n                                ` ${symbol}`}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />{\" \"}\n                              {isValid(state.amount)\n                                ? Big(variableBorrows)\n                                    .minus(state.amount)\n                                    .toFixed(7) + ` ${symbol}`\n                                : `- ${symbol}`}\n                            </DeepPurpleTexture>\n                            <WhiteTexture>\n                              {isValid(variableBorrows) &&\n                              isValid(marketReferencePriceInUsd)\n                                ? \"$ \" +\n                                  Big(variableBorrows)\n                                    .times(marketReferencePriceInUsd)\n                                    .toFixed(2)\n                                : \"$ -\"}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />{\" \"}\n                              {isValid(state.amount) &&\n                              isValid(state.amount) &&\n                              isValid(marketReferencePriceInUsd)\n                                ? \"$ \" +\n                                  Big(variableBorrows)\n                                    .minus(state.amount)\n                                    .times(marketReferencePriceInUsd)\n                                    .toFixed(2)\n                                : \"$ -\"}\n                            </WhiteTexture>\n                          </div>\n                        ),\n                      }}\n                    />\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Health Factor</PurpleTexture>,\n                        right: (\n                          <div style={{ textAlign: \"right\" }}>\n                            <GreenTexture>\n                              {healthFactor}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />{\" \"}\n                              {state.newHealthFactor}\n                            </GreenTexture>\n                            <DeepPurpleTexture>\n                              Liquidation at &lt;{\" \"}\n                              {config.FIXED_LIQUIDATION_VALUE}\n                            </DeepPurpleTexture>\n                          </div>\n                        ),\n                      }}\n                    />\n                  </TransactionOverviewContainer>\n                ),\n              }}\n            />\n           <div className=\"splitDiv\">\n              <div className=\"splitLine\"></div>\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n              <Widget\n                src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n                props={{ gas: state.gas, config }}\n              />\n            </div>\n            {state.needApprove && (\n              <Widget\n                src={`rref-bigboss.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n                props={{\n                  config,\n                  loading: state.loading,\n                  children: `Approve ${symbol}`,\n                  disabled,\n                  onClick: () => {\n                    State.update({\n                      loading: true,\n                    });\n                    const amount = Big(state.amount)\n                      .mul(Big(10).pow(decimals))\n                      .toFixed(0);\n                    approve(amount)\n                      .then((tx) => {\n                        tx.wait().then((res) => {\n                          const { status } = res;\n                          if (status === 1) {\n                            State.update({\n                              needApprove: false,\n                              loading: false,\n                            });\n                          }\n                        });\n                      })\n                      .catch(() => State.update({ loading: false }));\n                  },\n                }}\n              />\n            )}\n            {!state.needApprove && (\n              <Widget\n                src={`ref-bigboss.near/widget/ZKEVM.AAVE.ModalPrimaryButton`}\n                props={{\n                  config,\n                  children: `Repay ${symbol}`,\n                  loading: state.loading,\n                  onClick: () => {\n                    const actualAmount = Big(\n                      state.amount === shownMaxValue\n                        ? actualMaxValue\n                        : state.amount\n                    )\n                      .mul(Big(10).pow(decimals))\n                      .toFixed(0);\n                    const shownAmount = state.amount;\n                    if (symbol === config.nativeCurrency.symbol) {\n                      repayETH(shownAmount, actualAmount);\n                    } else {\n                      repayERC20(shownAmount, actualAmount);\n                    }\n                  },\n                }}\n              />\n            )}\n          </RepayContainer>\n        ),\n        config,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-bigboss.near/widget/ZKEVM.AAVE.Modal.RepayModal", "fact_widget_deployments_id": "11803d3064c7c971302633df14883a0c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}