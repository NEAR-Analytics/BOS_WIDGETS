{"tx_hash": "7TCGJU7qukmCvNsmcWFs4hRBesAmBfCKx4frJJB8gmQ8", "action_id_social": "75CY7FZm7Mv17bgspUtcnUWhDpGzKrk7yn5CsfZjRjxW-0-widget", "block_id": 114260525, "block_timestamp": "2024-03-07T10:39:42.582Z", "signer_id": "shillgpt.near", "widget_name": "PoolsChart", "source_code": "let contractId = props.contractId ?? \"v1.shillgpt.near\";\nlet pools = props.pools ?? Near.view(contractId, \"get_pools\");\n\nlet pricesData =\n  props.pricesData ?? fetch(\"https://indexer.ref.finance/list-token-price\");\n\nif (!pricesData || !pricesData.ok || !pools) {\n  return \"Loading\";\n}\n\nlet prices = JSON.parse(pricesData?.body ?? \"{}\");\n\nconst [message, setMessage] = useState(null);\n\nlet allTokens = props.allTokens ?? {\n  \"token.lonkingnearbackto2024.near\": {\n    name: \"LONK\",\n    decimals: 8,\n  },\n  \"ftv2.nekotoken.near\": {\n    name: \"NEKO\",\n    decimals: 24,\n  },\n  \"blackdragon.tkn.near\": {\n    name: \"BLACKDRAGON\",\n    decimals: 24,\n  },\n  \"token.0xshitzu.near\": {\n    name: \"SHITZU\",\n    decimals: 18,\n  },\n};\n\nconst getFtBalance = (tokenId, balance, decimals) => {\n  if (decimals == undefined) {\n    decimals = 10;\n  }\n  if (balance === undefined || balance === null) {\n    return \"Undefined\";\n  }\n  return Number(\n    Big(balance).div(Big(10).pow(allTokens[tokenId].decimals)).toFixed(decimals)\n  );\n};\n\nconst shuffle = (array) => {\n  if (!array) {\n    return [];\n  }\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n};\n\nlet poolsData = {};\nshuffle(pools).map((p) => {\n  let tokenBalance = getFtBalance(p[0], p[1].total_balance, 2);\n  console.log(p, tokenBalance);\n\n  let tokenValue = (\n    parseFloat(prices[p[0]]?.price ?? 0) * parseFloat(tokenBalance ?? 0)\n  ).toFixed(2);\n\n  poolsData[allTokens[p[0]].name] = tokenValue;\n});\n\nconsole.log(\"poolsData\", poolsData);\n\nsetMessage({\n  poolsData,\n});\n\nconst code = `\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n\n<script src=\"https://d3js.org/d3.v4.js\"></script>\n<div id=\"my_dataviz\" key=\"piechart\"></div>\n\n<script src=\"https://d3js.org/d3-scale-chromatic.v1.min.js\"></script>\n\n<script>\n\nconst run = (eventData) => {    \n    var width = 700\n    height = 450\n    margin = 40\n\n    var radius = Math.min(width, height) / 2 - margin\n\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n    var data = eventData.poolsData;\n\n    var color = d3.scaleOrdinal()\n    .domain([\"LONK\", \"NEKO\", \"BLACKDRAGON\", \"SHITZU\"])\n    .range(d3.schemeDark2);\n\n    var pie = d3.pie()\n    .sort(null) // Do not sort group by size\n    .value(function(d) {return d.value; })\n\n    var data_ready = pie(d3.entries(data))\n\n    var arc = d3.arc()\n    .innerRadius(radius * 0.5)  \n    .outerRadius(radius * 0.8)\n\n    var outerArc = d3.arc()\n    .innerRadius(radius * 0.9)\n    .outerRadius(radius * 0.9)\n\n    svg\n    .selectAll('allSlices')\n    .data(data_ready)\n    .enter()\n    .append('path')\n    .attr('d', arc)\n    .attr('fill', function(d){ return(color(d.data.key)) })\n    .attr(\"stroke\", \"white\")\n    .style(\"stroke-width\", \"2px\")\n    .style(\"opacity\", 0.7)\n\n    svg.append(\"text\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-family\", \"Tahoma\")\n    .attr(\"fill\", \"darkgrey\")\n    .style('font-size', '12px')\n    .text(\"@ShillGPT\");\n\n    svg\n    .selectAll('allPolylines')\n    .data(data_ready)\n    .enter()\n    .append('polyline')\n    .attr(\"stroke\", \"black\")\n    .style(\"fill\", \"none\")\n    .attr(\"stroke-width\", 1)\n    .attr('points', function(d) {\n    var posA = arc.centroid(d) \n    var posB = outerArc.centroid(d) \n    var posC = outerArc.centroid(d); \n    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n    posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); \n    return [posA, posB, posC]\n    })\n\n    svg\n    .selectAll('allLabels')\n    .data(data_ready)\n    .enter()\n    .append('text')\n    .attr(\"font-family\", \"Tahoma\")\n    .text( function(d) { console.log(d.data.key) ; return d.data.key } )\n    .attr('transform', function(d) {\n    var pos = outerArc.centroid(d);\n    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n    pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n    return 'translate(' + pos + ')';\n    })\n    .style('font-size', '12px')\n    .style('text-anchor', function(d) {\n    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n    return (midangle < Math.PI ? 'start' : 'end')\n    })\n\n};\n\n\nlet simulation = null;\n\nwindow.addEventListener(\"message\", (event) => {\n  if (simulation) {\n    simulation.stop();\n    d3.select(\"#graph\").selectAll(\"*\").remove();\n  }\n  if (event.data) {\n    simulation = run(event.data);\n  }\n});\n\n\n</script>\n`;\n\nconst [onMessage] = useState(() => {\n  return (data) => {\n    if (data) {\n      setSelectedAccountId(data);\n    }\n  };\n});\n\nreturn (\n  <div>\n    <div>\n      <iframe\n        className={prols.className ?? \"w-100 h-100\"}\n        style={{ minHeight: props.minHeight ?? \"500px\" }}\n        srcDoc={code}\n        message={message}\n        onMessage={onMessage}\n      />\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/shillgpt.near/widget/PoolsChart", "fact_widget_deployments_id": "a68e8a2697df6762a63b36d949350277", "inserted_timestamp": "2024-03-07T12:27:25.794Z", "modified_timestamp": "2024-03-07T12:27:25.794Z", "__row_index": 0}