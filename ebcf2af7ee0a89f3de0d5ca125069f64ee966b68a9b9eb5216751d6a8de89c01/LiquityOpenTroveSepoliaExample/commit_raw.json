{"tx_hash": "HHtMvkdyd6H99HwfT1SGCQXhGrrSC3UvH3iLj656K36u", "action_id_social": "qFC4AboUSEjRDNneQnJVsQ9PU3Xod3akYmLXdQT8zMd-0-widget", "block_id": 100949147, "block_timestamp": "2023-09-12T09:19:42.265Z", "signer_id": "ebcf2af7ee0a89f3de0d5ca125069f64ee966b68a9b9eb5216751d6a8de89c01", "widget_name": "LiquityOpenTroveSepoliaExample", "source_code": "/**\n * @description\n * Initialize State for UI rendering\n */\nState.init({\n  displayColl: \"\",\n  displayBorrow: \"\",\n  coll: 0,\n  borrow: 0,\n  borrowingFee: 0,\n  totalcoll: 0,\n  collateralRatio: 0,\n  liquidationReserve: 0,\n  complete: false,\n  loading: false,\n  msg: \"\",\n  borrowRateRaw: 0,\n  borrowRate: 0,\n  address: undefined,\n  chainId: undefined,\n  balance: undefined,\n  price: 0,\n  isOpenTrove: undefined,\n  isRecoveryMode: undefined,\n  isBlocked: true,\n  isGasAllocated: false,\n  isBorrowingRate: false,\n  borrowWrapperStyle: undefined,\n});\n\n/**\n *\n * @param depositChangeEvent\n * @description\n * Update 'coll' when user fills ETH to number field.\n * Recalculate collateral ratio when ETH and LUSD number field is updated.\n * Collateral ratio : ((ETH * cueerent ETH price) / (borowwing LUSD + liquidation reserve + borrowing fee)) * 100\n * Check requirements for an active \"Open Trove\" button.\n */\nconst setcoll = (depositChangeEvent) => {\n  const value = depositChangeEvent.target.value.replace(/[^.0-9]/g, \"\");\n  const coll = Number(value);\n  const { totalcoll } = state;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({\n    displayColl: value,\n    coll,\n    collateralRatio,\n  });\n\n  validateTrove();\n};\n\n/**\n *\n * @param borrowChangeEvent\n * @description\n * Update 'borrow' when user fills LUSD to number field.\n * Calculate borrowing fee and total coll(=== total debt)\n * Borrowing fee formula cases.\n *   1. recovery mode : 0\n *   2. normal mode: (borrow * borrow rate) / 100\n *\n * Collateral ratio formula : ((ETH * cueerent ETH price) / (borowwing LUSD + liquidation reserve + borrowing fee)) * 100\n * Check requirements for an active \"Open Trove\" button.\n */\nconst setBorrow = (borrowChangeEvent) => {\n  const { coll, liquidationReserve, borrowRate, isRecoveryMode } = state;\n  const value = borrowChangeEvent.target.value.replace(/[^.0-9]/g, \"\");\n  const borrow = Number(value);\n  const borrowingFee =\n    isRecoveryMode === true ? 0 : (borrow * borrowRate) / 100;\n  const totalcoll =\n    borrow + Number(borrowingFee.toFixed(2)) + liquidationReserve;\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  State.update({\n    displayBorrow: value,\n    borrow,\n    borrowingFee,\n    totalcoll,\n    collateralRatio,\n  });\n  validateTrove();\n};\n\n/**\n *\n * @description\n * check list for an active \"Open Trove\" button.\n *   1. LUSD being borrowed must be over 1800(LUSD).\n *   2. if the system is in recovery mode, the collateral ratio must exceed 150%.\n *   3. if the system is in normal mode, the collateral ratio must exceed 110%.\n *   4. you can only add coll(ETH) on your ETH balance.\n */\nconst validateTrove = () => {\n  const { coll, borrow, totalcoll, balance, isRecoveryMode } = state;\n\n  if (borrow < 1800) {\n    State.update({\n      msg: \"Borrow must be at least 1800 LUSD\",\n      isBlocked: true,\n    });\n    return;\n  }\n\n  const collateralRatio = ((coll * state.price) / Number(totalcoll)) * 100;\n\n  if (isRecoveryMode === true) {\n    if (collateralRatio < 150) {\n      State.update({\n        msg: \"Collateral ratio must be at least 150%\",\n        isBlocked: true,\n      });\n      return;\n    }\n  } else {\n    if (collateralRatio < 110) {\n      State.update({\n        msg: \"Collateral ratio must be at least 110%\",\n        isBlocked: true,\n      });\n      return;\n    }\n  }\n\n  if (coll > Number(balance)) {\n    State.update({\n      msg: `The amount you're trying to deposit exceeds your balance by ${coll} ETH`,\n      isBlocked: true,\n    });\n    return;\n  }\n\n  State.update({ msg: \"\", isBlocked: false });\n};\n\n/**\n * @description\n * 5 out of all contracts are being used for open trove.\n * Only the used functions are defined in the abi objects.\n * The contract address is registered on the Ethereum mainnet.\n *\n * Contract list.\n *   1. borrowerOperation\n *   2. troveManager\n *   3. priceFeed\n *   4. sortedTroves\n *   5. hintHelpers\n */\nconst borrowerOperationAddress = \"0xD69fC8928D4F3229341cb431263F1EBd87B1ade8\";\nconst borrowerOperationABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_maxFeePercentage\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_LUSDAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_upperHint\", type: \"address\" },\n      { internalType: \"address\", name: \"_lowerHint\", type: \"address\" },\n    ],\n    name: \"openTrove\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst troveManagerAddress = \"0x0ECDF34731eE8Dd46caa99a1AAE173beD1B32c67\";\n\nconst troveManagerABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"_borrower\", type: \"address\" }],\n    name: \"getTroveStatus\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\n    name: \"getTCR\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"LUSD_GAS_COMPENSATION\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_LUSDDebt\", type: \"uint256\" }],\n    name: \"getBorrowingFeeWithDecay\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBorrowingRateWithDecay\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_price\", type: \"uint256\" }],\n    name: \"checkRecoveryMode\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst priceFeedAddress = \"0x07dD4Ce17De84bA13Fc154A7FdB46fC362a41E2C\";\nconst priceFeedABI = [\n  {\n    inputs: [],\n    name: \"getPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst sortedtrovesAddress = \"0x136eF31a3aF35929e3Fc870dDB9b7c071DAB1B97\";\nconst sortedtrovesABI = [\n  {\n    inputs: [],\n    name: \"getSize\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_NICR\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_prevId\", type: \"address\" },\n      { internalType: \"address\", name: \"_nextId\", type: \"address\" },\n    ],\n    name: \"findInsertPosition\",\n    outputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst hintHelpersAddress = \"0x5E24dC4C8f8052903c5dBe801F5A5faC18561a83\";\nconst hintHelpersABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_CR\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_numTrials\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_inputRandomSeed\", type: \"uint256\" },\n    ],\n    name: \"getApproxHint\",\n    outputs: [\n      { internalType: \"address\", name: \"hintAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"diff\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"latestRandomSeed\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @description\n * Calculate two hints to reduce the gas cost; in which the gas spent is to insert the money into the trove list before calling the transaction.\n * The gas cost is O(n) in the worst case, but we want to reduce it for efficient O(1).\n * Call transaction \"borrowingOperation.openTrove()\" user click Open Trove button.\n * Example Borrower Operations with Hints reference link is \"https://github.com/liquity/dev#example-borrower-operations-with-hints\".\n */\nconst openTrove = async () => {\n  if (state.complete) {\n    State.update({ complete: false, hash: null });\n  }\n\n  const borrowerOperationContract = new ethers.Contract(\n    borrowerOperationAddress,\n    borrowerOperationABI,\n    Ethers.provider().getSigner()\n  );\n\n  const sortedTroveContract = new ethers.Contract(\n    sortedtrovesAddress,\n    sortedtrovesABI,\n    Ethers.provider().getSigner()\n  );\n\n  const hintHelpersContract = new ethers.Contract(\n    hintHelpersAddress,\n    hintHelpersABI,\n    Ethers.provider().getSigner()\n  );\n\n  const LUSDAmount = ethers.BigNumber.from(\n    ethers.utils.parseEther(state.borrow.toString())\n  );\n\n  const expectedDebt = ethers.BigNumber.from(\n    ethers.utils.parseEther(state.totalcoll.toString())\n  );\n\n  const _1e20 = ethers.BigNumber.from(ethers.utils.parseEther(\"100\"));\n\n  const ETHColl = ethers.BigNumber.from(\n    ethers.utils.parseEther(state.coll.toString())\n  );\n\n  /** Mission 3. NICR\uc758 \uac12\uc744 \uad6c\ud574\uc8fc\uc138\uc694\n   * \uacc4\uc0b0 \uc2dd: NICR = ETHColl * 1e20 / expectedDebt\n   * \uc544\ub798\uc758 \uacc4\uc0b0 \ubc29\ubc95\uc744 \uc774\uc6a9\ud558\ub418 ethersjs\uc758 BigNumber API\ub97c \uc774\uc6a9\ud558\uc138\uc694\n   * \ucc38\uace0 \ubb38\uc11c: https://docs.ethers.org/v5/api/utils/bignumber/#BigNumber--BigNumber--methods--math-operations\n   * \uc785\ub825\ucc3d\uc5d0 2ETH, 1800LUSD\ub97c \uc785\ub825\ud588\uc744 \ub54c NICR.toString()\uc758 \uacb0\uacfc \uac12: \"99552015928322548\"\n   */\n\n  const NICR = ETHColl.mul(_1e20).div(expectedDebt);\n  console.log({ NICR: NICR.toString() });\n  sortedTroveContract.getSize().then((numTroves) => {\n    const _numTrials = numTroves.mul(ethers.BigNumber.from(\"15\"));\n\n    hintHelpersContract\n      .getApproxHint(NICR.toString(), _numTrials.toString(), 42)\n      .then((approxHintRes) => {\n        const approxHint = approxHintRes[0];\n\n        sortedTroveContract\n          .findInsertPosition(NICR.toString(), approxHint, approxHint)\n          .then((hintRes) => {\n            const upperHint = hintRes[0];\n            const lowerHint = hintRes[1];\n\n            borrowerOperationContract\n              .openTrove(\n                state.borrowRateRaw,\n                LUSDAmount,\n                upperHint,\n                lowerHint,\n                {\n                  value: ETHColl,\n                }\n              )\n              .then((transactionHash) => {\n                State.update({\n                  loading: true,\n                  hash: transactionHash.hash,\n                  borrow: 0,\n                  displayBorrow: \"\",\n                  coll: 0,\n                  displayColl: \"\",\n                  borrowingFee: 0,\n                  totalcoll: state.liquidationReserve,\n                  collateralRatio: 0,\n                  liquidationReserve: state.liquidationReserve,\n                });\n              });\n          });\n      });\n  });\n};\n\n/**\n * @description\n * This code block initializes sceanario\n * The checklist assumes you have already connected your wallet.\n * Check List\n *   1. The network must be the Ethereum mainnet.\n *   2. Get ETH balance in your wallet.\n *   3. Check your trove is already open.\n *   4. Get liquity system LUSD_GAS_COMPENSATION.\n *   5. Get liquity system borrowing rate.\n *   6. Get ETH:USD price.\n *   7. Get liquity system called TCR(total collateral ratio).\n *   8. Get liquity system is recovery mode.\n */\nif (Ethers.provider()) {\n  const signer = Ethers.provider().getSigner();\n  signer.getAddress().then((address) => {\n    State.update({ address });\n    if (state.chainId === 11155111) {\n      const troveManagerContract = new ethers.Contract(\n        troveManagerAddress,\n        troveManagerABI,\n        Ethers.provider().getSigner()\n      );\n\n      if (state.balance === undefined) {\n        Ethers.provider()\n          .getBalance(address)\n          .then((balance) => {\n            State.update({\n              balance: Big(balance).div(Big(10).pow(18)).toFixed(2),\n            });\n          });\n      }\n\n      if (state.isOpenTrove === undefined) {\n        troveManagerContract.getTroveStatus(address).then((res) => {\n          const isOpenTrove = ethers.utils.formatEther(res).includes(\"1\");\n          State.update({ isOpenTrove });\n        });\n      }\n\n      if (state.isGasAllocated === false) {\n        troveManagerContract\n          .LUSD_GAS_COMPENSATION()\n          .then((liquidationReserveRes) => {\n            const liquidationReserve = Number(\n              ethers.utils.formatEther(liquidationReserveRes)\n            );\n\n            State.update({\n              isGasAllocated: true,\n              totalcoll: liquidationReserve,\n              liquidationReserve: liquidationReserve,\n            });\n          });\n      }\n\n      if (state.isBorrowingRate === false) {\n        troveManagerContract\n          .getBorrowingRateWithDecay()\n          .then((borrowingRateRes) => {\n            State.update({\n              isBorrowingRate: true,\n              borrowRateRaw: borrowingRateRes,\n              borrowRate:\n                Number(\n                  ethers.utils.formatEther(borrowingRateRes).substring(0, 6)\n                ) * 100,\n            });\n          });\n      }\n    }\n  });\n\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n\n  if (state.price === 0) {\n    const priceFeedContract = new ethers.Contract(\n      priceFeedAddress,\n      priceFeedABI,\n      Ethers.provider().getSigner()\n    );\n\n    const troveManagerContract = new ethers.Contract(\n      troveManagerAddress,\n      troveManagerABI,\n      Ethers.provider().getSigner()\n    );\n\n    priceFeedContract.getPrice().then((priceRes) => {\n      const price = Number(ethers.utils.formatEther(priceRes));\n\n      State.update({ price });\n      troveManagerContract.getTCR(priceRes).then((tcrRes) => {\n        const tcr = Number(ethers.utils.formatEther(tcrRes)) * 100;\n\n        State.update({ tcr });\n      });\n\n      troveManagerContract\n        .checkRecoveryMode(ethers.BigNumber.from(priceRes))\n        .then((isRecoveryMode) => {\n          State.update({ isRecoveryMode: isRecoveryMode });\n        });\n    });\n  }\n}\n\nconst complete = () => {\n  State.update({ complete: true });\n};\n\n/**\n * @description\n * Present the current status of the UI where the transaction is in progress.\n */\nEthers.provider() &&\n  Ethers.provider()\n    .waitForTransaction(state.hash)\n    .then((res) => {\n      State.update({\n        loading: false,\n      });\n      complete();\n    })\n    .catch((err) => {\n      State.update({ loading: false });\n    });\n\n/**\n * Mission 2. `borrowWrapper` \ucef4\ud3ec\ub10c\ud2b8\uc758 \uc2a4\ud0c0\uc77c\uc744 \uc678\ubd80 css\ud30c\uc77c\uc744 \ubd88\ub7ec\uc640\uc11c \uc801\uc6a9\ud574\ubcf4\uc138\uc694.\n * \uc678\ubd80 css \ud30c\uc77c \ub9c1\ud06c: \"https://raw.githubusercontent.com/LudiumAgwn/collegium-bos-wk2/main/assets/code/liquity-widget.css\"\n * \uc5ec\uae30\ub97c \uace0\uccd0\uc8fc\uc138\uc694.\n */\nconst cssLink =\n  \"https://raw.githubusercontent.com/LudiumAgwn/collegium-bos-wk2/main/assets/code/liquity-widget.css\";\nconst cssData = fetch(cssLink).body;\n\n/**\n * \uc5ec\uae30\ub294 \uace0\uce58\uc9c0 \ub9c8\uc138\uc694!\n */\nif (cssLink !== \"PUT CSS FILE LINK\") {\n  if (!cssData) return \"\";\n}\n\nif (state.borrowWrapperStyle === undefined) {\n  State.update({\n    borrowWrapperStyle: styled.div`\n    width: 100%;\n    ${cssData}\n`,\n  });\n}\n\n/**\n * @description\n * This UI style uses the the \"Styled Component\" library.\n * Update this code block to change the style.\n */\nconst BorrowWrapper = state.borrowWrapperStyle;\n\n/**\n * @description\n * This code block is HTML tags for building the UI structure.\n *\n * The UI is activated when the conditions below are satisfied.\n * 1. Connect your wallet.\n * 2. Network is Ethereum mainnet.\n * 3. Passes the \"validateTrove\" function result.\n * 4. There should be no active trove.\n * 5. Enter a value greater than 0 in the \"coll\" and \"borrow\" Number fields.\n */\n\nreturn (\n  <BorrowWrapper>\n    <div className=\"input-section deposit\">\n      <div className=\"input-label\">Deposit (ETH)</div>\n      <div className=\"input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"0.0000 ETH\"\n          disabled={\n            !state.address || state.isOpenTrove || state.chainId !== 11155111\n          }\n          onChange={setcoll}\n          value={state.displayColl}\n        ></input>\n      </div>\n    </div>\n    <div className=\"input-section\">\n      <div className=\"input-label\">Borrow (LUSD)</div>\n      <div className=\"input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"0.0000 LUSD\"\n          disabled={\n            !state.address || state.isOpenTrove || state.chainId !== 11155111\n          }\n          onChange={setBorrow}\n          value={state.displayBorrow}\n        />\n      </div>\n    </div>\n    <div className=\"error-message\">{state.msg}</div>\n    <div className=\"info-wrapper\">\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Liquidation Reserve</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.liquidationReserve}</span>\n          <span className=\"info-unit\">LUSD</span>\n        </div>\n      </div>\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Borrowing Fee</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.borrowingFee.toFixed(2)}</span>{\" \"}\n          <span className=\"info-unit\">\n            LUSD (\n            {state.isRecoveryMode === true ? 0 : state.borrowRate.toFixed(2)}%)\n          </span>\n        </div>\n      </div>\n\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Recieve</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.borrow.toFixed(2)}</span>\n          <span className=\"info-unit\">LUSD</span>\n        </div>\n      </div>\n\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Total debt</div>\n        <div className=\"detail-info-value\">\n          <span className=\"\">{state.totalcoll.toFixed(2)}</span>\n          <span className=\"info-unit\">LUSD</span>\n        </div>\n      </div>\n      <div className=\"detail-info-wrapper\">\n        <div className=\"detail-info-label\">Collateral ratio</div>\n        <div className=\"detail-info-value\">\n          <span>{state.collateralRatio.toFixed(1)}</span>\n          <span className=\"info-unit\">%</span>\n        </div>\n      </div>\n    </div>\n    <div className=\"confirm-wrapper\">\n      {state.address ? (\n        <>\n          <button\n            className={`confirm ${state.isBlocked ? \"not-ok\" : \"ok\"}`}\n            disabled={state.isBlocked}\n            onClick={openTrove}\n          >\n            {Ethers.provider() && state.chainId !== 11155111\n              ? \"Change network to Sepolia\"\n              : /**\n               * Mission 1. \"\uc774 \uc9c0\uac11\uc740 \uc774\ubbf8 \ud65c\uc131\ud654\ub41c \ud2b8\ub85c\ube0c\uac00 \uc788\uc2b5\ub2c8\ub2e4.\" \uba54\uc2dc\uc9c0\ub97c \ucd94\uac00\ud574\uc8fc\uc138\uc694.\n               */\n              state.isOpenTrove\n              ? \"\uc774 \uc9c0\uac11\uc740 \uc774\ubbf8 \ud65c\uc131\ud654\ub41c \ud2b8\ub85c\ube0c\uac00 \uc788\uc2b5\ub2c8\ub2e4.\"\n              : state.loading\n              ? \"Loading...\"\n              : state.complete\n              ? \"Done \u2705\"\n              : state.coll === 0 || state.borrow === 0\n              ? \"Enter input value\"\n              : state.isBlocked\n              ? \"Check stats\"\n              : \"Open Trove\"}\n          </button>\n        </>\n      ) : (\n        <Web3Connect className=\"connect-wallet\" />\n      )}\n    </div>\n  </BorrowWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ebcf2af7ee0a89f3de0d5ca125069f64ee966b68a9b9eb5216751d6a8de89c01/widget/LiquityOpenTroveSepoliaExample", "fact_widget_deployments_id": "f397273f815ee4382d92eb0d10f787a1", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}