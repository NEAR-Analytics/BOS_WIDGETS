{"tx_hash": "E8GfZG4h7uSgS5hTJFs6b4RVZfsN7mBppysEoSMnHCMF", "action_id_social": "5urSSMjZv8G3dF1cMtYwbh8iH1pZeggYNGRqDz2Jef5t-0-widget", "block_id": 101626147, "block_timestamp": "2023-09-21T12:53:06.236Z", "signer_id": "socializer.near", "widget_name": "Profile", "source_code": "const accountId = context.accountId;\nconst Owner = \"socializer.near\";\nconst Admin = \"humans-of-near.near\";\nconst profile = Social.getr(`${accountId}/profile`);\nconst widgets = Social.getr(`${accountId}/widget`) ?? {};\n\nconst API_URL = props?.API_URL || \"http://localhost:3000\";\n\nState.init({\n  myAvatar: `https://i.near.social/magic/large/https://near.social/magic/img/account/${accountId}`,\n  tokens: [],\n  history: [],\n  loaded: false,\n  error: \"\",\n  loading: false,\n});\n\nconst columns = [\n  {\n    title: \"Token Name\",\n    key: \"name\",\n    width: 25,\n    align: \"left\",\n  },\n  {\n    title: \"Token Contract Address\",\n    key: \"contract\",\n    width: 25,\n    align: \"center\",\n  },\n  {\n    title: \"Token Deposited\",\n    key: \"balance\",\n    width: 25,\n    align: \"center\",\n  },\n  {\n    title: \"\",\n    key: \"action\",\n    width: 25,\n    align: \"center\",\n    action: true,\n  },\n];\n\nconst tx_columns = [\n  {\n    title: \"S.No\",\n    key: \"no\",\n    width: 20,\n    align: \"left\",\n  },\n  {\n    title: \"Amount\",\n    key: \"amount\",\n    width: 20,\n    align: \"left\",\n  },\n  {\n    title: \"Transaction\",\n    key: \"hash\",\n    width: 20,\n    align: \"left\",\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"30\"\n        height=\"30\"\n        viewBox=\"0 0 48 48\"\n      >\n        <g\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"4\"\n        >\n          <rect width=\"30\" height=\"36\" x=\"9\" y=\"8\" rx=\"2\" />\n          <path\n            stroke-linecap=\"round\"\n            d=\"M18 4v6m12-6v6m-14 9h16m-16 8h12m-12 8h8\"\n          />\n        </g>\n      </svg>\n    ),\n    link: true,\n    click: () => {},\n  },\n  {\n    title: \"Transaction Type\",\n    key: \"type\",\n    width: 20,\n    align: \"left\",\n  },\n  {\n    title: \"Date\",\n    key: \"date\",\n    width: 20,\n    align: \"left\",\n  },\n];\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background: #FAFAFA;\n  flex-direction: column;\n  padding: 18px;\n  gap: 18px;\n`;\n\nconst WalletComponent = styled.div`\n  display: flex;\n  width: 100%;\n  background: #F3F3F3;\n  flex-direction: column;\n  padding: 24px;\n  border-radius: 8px;\n  border: 1px solid var(--light_90, #E6E6E6);\n  gap: 20px;\n`;\n\nconst TokenComponent = styled.div`\n  display: flex;\n  width: 100%;\n  background: #F3F3F3;\n  flex-direction: column;\n  padding: 6px 24px;\n  border-radius: 8px;\n  border: 1px solid var(--light_90, #E6E6E6);\n  gap: 20px;\n`;\n\nconst TxComponent = styled.div`\n  display: flex;\n  width: 100%;\n  background: #F3F3F3;\n  flex-direction: column;\n  padding: 6px 24px;\n  border-radius: 8px;\n  border: 1px solid var(--light_90, #E6E6E6);\n  gap: 20px;\n`;\n\nconst Avatar = styled.img`\n  display: flex;\n  width: 100px;\n  height: 100px;\n  border-radius: 100px;\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 8px 9px 8px 28px;\n  display: flex;\n  gap: 7px;\n  border-radius: 6px;\n  border: 1px solid var(--light_90, #E6E6E6);\n  background: var(--Dark, #121212);\n  text-align: center;\n  color: var(--light_95, #F3F3F3);\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: capitalize;\n  margin: auto;\n`;\n\nconst Table = styled.table`\n  border-radius: 8px;\n  background: #F5F1F1;\n  margin: 0;\n`;\n\nconst Input = styled.input`\n  width: 80px;\n`;\n\nconst getTokenData = () => {\n  return asyncFetch(API_URL + `/api/token?accountId=${accountId}`).then(\n    (res) => {\n      if (res.ok) {\n        const { token, history } = res.body;\n        State.update({\n          tokens: token,\n          history,\n          loaded: true,\n          loading: false,\n        });\n      }\n    }\n  );\n};\n\nif (!state.loaded) getTokenData();\n\nconst toFixed = (x) => {\n  if (Math.abs(x) < 1.0) {\n    var e = parseInt(x.toString().split(\"e-\")[1]);\n    if (e) {\n      x *= Math.pow(10, e - 1);\n      x = \"0.\" + new Array(e).join(\"0\") + x.toString().substring(2);\n    }\n  } else {\n    var e = parseInt(x.toString().split(\"+\")[1]);\n    if (e) {\n      e -= 20;\n      x /= Math.pow(10, e);\n      x += new Array(e + 1).join(\"0\");\n    }\n  }\n  return x.toString();\n};\n\nconst deposit = async (item) => {\n  if (state.loading) return;\n\n  const amount = Number(state[item.id]);\n  let oneTeraGas = 100000000000000;\n  let oneNEARInYoctoNEAR = Number(item.yocto_near);\n\n  if (!amount || amount <= 0) return;\n  if (item.id === \"NEAR\") {\n    Near.call(\n      item.contract,\n      item.method,\n      Admin,\n      oneTeraGas,\n      amount * oneNEARInYoctoNEAR\n    );\n  } else {\n    let amt = toFixed((amount + 0.00001) * oneNEARInYoctoNEAR);\n    const data = {\n      receiver_id: Admin,\n      amount: amt,\n      memo: \"Token transfer\",\n    };\n    Near.call(item.contract, item.method, data, oneTeraGas, 1);\n  }\n};\n\nconst withdraw = async (item) => {\n  if (state.loading) return;\n  const amount = Number(state[item.id]);\n\n  if (!amount || amount <= 0) return;\n\n  if (amount > item.balance)\n    return State.update({ error: \"Balance is not enough.\" });\n\n  let data = {\n    accountId,\n    amount,\n    token: item._id,\n  };\n\n  State.update({ error: \"\", loading: true });\n  asyncFetch(API_URL + `/api/balance/withdraw`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((res) => {\n    if (res.ok) {\n      const { error, data } = res.body;\n      if (error) State.update({ error, loading: false });\n      else if (data && data === \"success\") {\n        State.update({\n          loaded: false,\n        });\n      }\n    }\n  });\n};\n\nconst registry = async (item) => {\n  if (item.id == \"NEAR\" || item.token != \"0\") return;\n  const oneTeraGas = 300000000000000;\n  const oneNEARInYoctoNEAR = 100000000000000000000000;\n  return Near.call(\n    item.contract,\n    \"storage_deposit\",\n    {\n      account_id: accountId,\n      registration_only: true,\n    },\n    oneTeraGas,\n    oneNEARInYoctoNEAR\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div className=\"d-flex align-items-center\" style={{ gap: 24 }}>\n      <Avatar\n        src={state.myAvatar}\n        onError={() => {\n          State.update({\n            myAvatar:\n              \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n          });\n        }}\n      />\n      <div>\n        <h4>Hi, {profile.name ? profile.name : accountId}</h4>\n        <h5>\n          <b>Wallet ID:</b>\n          {accountId}\n        </h5>\n      </div>\n    </div>\n\n    {state.history.length !== 0 && (\n      <TxComponent>\n        <h4>{`Transaction Ledger`}</h4>\n        <Widget\n          src={`${Owner}/widget/table-pagination`}\n          props={{\n            API_URL,\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.history,\n            columns: tx_columns,\n            rowsCount: 4,\n          }}\n        />\n      </TxComponent>\n    )}\n  </Wrapper>\n);\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/socializer.near/widget/Profile", "fact_widget_deployments_id": "1bfa23806691318ec2afd7d3ef024674", "inserted_timestamp": "2023-09-21T14:44:24.707Z", "modified_timestamp": "2023-09-21T14:44:24.707Z", "__row_index": 31}