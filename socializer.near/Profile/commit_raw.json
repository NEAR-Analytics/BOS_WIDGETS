{"tx_hash": "7YxvVVnj3zmHvmZtL49biCAEqdc2cRUn1JKbc9cPnDcd", "action_id_social": "ERKtkuYaHY4YgVJFf8vaGdsZDmC8aNUdRHchqKzinJpK-0-widget", "block_id": 114926119, "block_timestamp": "2024-03-18T02:09:59.376Z", "signer_id": "socializer.near", "widget_name": "Profile", "source_code": "const accountId = context.accountId;\nconst Owner = \"socializer.near\";\nconst Admin = \"humans-of-near.near\";\nconst profile = Social.getr(`${accountId}/profile`);\nconst widgets = Social.getr(`${accountId}/widget`) ?? {};\n\nconst API_URL = props?.API_URL || \"http://localhost:3000\";\n\nState.init({\n  myAvatar: `https://i.near.social/magic/large/https://near.social/magic/img/account/${accountId}`,\n  tokens: [],\n  history: [],\n  loaded: false,\n  error: \"\",\n  loading: false,\n});\n\nconst columns = [\n  {\n    title: \"Token Name\",\n    key: \"name\",\n    width: 25,\n    align: \"left\",\n  },\n  {\n    title: \"Token Contract Address\",\n    key: \"contract\",\n    width: 25,\n    align: \"center\",\n  },\n  {\n    title: \"Token Deposited\",\n    key: \"balance\",\n    width: 25,\n    align: \"center\",\n  },\n  {\n    title: \"\",\n    key: \"action\",\n    width: 25,\n    align: \"center\",\n    action: true,\n  },\n];\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background: #FAFAFA;\n  flex-direction: column;\n  padding: 18px;\n  gap: 18px;\n`;\n\nconst WalletComponent = styled.div`\n  display: flex;\n  width: 100%;\n  background: #F3F3F3;\n  flex-direction: column;\n  padding: 24px;\n  border-radius: 8px;\n  border: 1px solid var(--light_90, #E6E6E6);\n  gap: 20px;\n`;\n\nconst TokenComponent = styled.div`\n  gap: 20px;\n  width: 100%;\n  display: flex;\n  padding: 6px 24px;\n  border-radius: 8px;\n  background: #F3F3F3;\n  flex-direction: column;\n  border: 1px solid var(--light_90, #E6E6E6);\n`;\n\nconst Avatar = styled.img`\n  display: flex;\n  width: 100px;\n  height: 100px;\n  border-radius: 100px;\n`;\n\nconst Table = styled.table`\n  margin: 0;\n  border-radius: 8px;\n  background: #F5F1F1;\n`;\n\nconst Input = styled.input`\n  width: 80px;\n`;\n\nconst getTokenData = () => {\n  return asyncFetch(API_URL + `/api/token?accountId=${accountId}`).then(\n    (res) => {\n      if (res.ok) {\n        const { token, history } = res.body;\n        State.update({\n          tokens: token,\n          history,\n          loaded: true,\n          loading: false,\n        });\n      } else {\n        State.update({\n          ...state,\n          loaded: true,\n          error: res.error,\n        });\n      }\n    }\n  );\n};\n\nconst toFixed = (x) => {\n  if (Math.abs(x) < 1.0) {\n    var e = parseInt(x.toString().split(\"e-\")[1]);\n    if (e) {\n      x *= Math.pow(10, e - 1);\n      x = \"0.\" + new Array(e).join(\"0\") + x.toString().substring(2);\n    }\n  } else {\n    var e = parseInt(x.toString().split(\"+\")[1]);\n    if (e) {\n      e -= 20;\n      x /= Math.pow(10, e);\n      x += new Array(e + 1).join(\"0\");\n    }\n  }\n  return x.toString();\n};\n\nconst deposit = async (item) => {\n  if (state.loading) return;\n\n  const amount = Number(state[item.id]);\n  let oneTeraGas = 100000000000000;\n  let oneNEARInYoctoNEAR = Number(item.yocto_near);\n\n  if (!amount || amount <= 0) return;\n  if (item.id === \"NEAR\") {\n    Near.call(\n      item.contract,\n      item.method,\n      Admin,\n      oneTeraGas,\n      amount * oneNEARInYoctoNEAR\n    );\n  } else {\n    let amt = toFixed((amount + 0.00001) * oneNEARInYoctoNEAR);\n    const data = {\n      receiver_id: Admin,\n      amount: amt,\n      memo: \"Token transfer\",\n    };\n    Near.call(item.contract, item.method, data, oneTeraGas, 1);\n  }\n};\n\nconst withdraw = async (item) => {\n  if (state.loading) return;\n  const amount = Number(state[item.id]);\n\n  if (!amount || amount <= 0) return;\n\n  if (amount > item.balance)\n    return State.update({ error: \"Balance is not enough.\" });\n\n  let data = {\n    accountId,\n    amount,\n    token: item._id,\n  };\n\n  State.update({ error: \"\", loading: true });\n  asyncFetch(API_URL + `/api/base/withdraw`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((res) => {\n    if (res.ok) {\n      const { error, data } = res.body;\n      if (error) State.update({ ...state, error, loading: false });\n      else if (data && data === \"success\") {\n        State.update({\n          ...state,\n          loaded: false,\n        });\n      }\n    }\n  });\n};\n\nconst registry = async (item) => {\n  if (item.id == \"NEAR\" || item.token != \"0\") return;\n  const oneTeraGas = 300000000000000;\n  const oneNEARInYoctoNEAR = 100000000000000000000000;\n  return Near.call(\n    item.contract,\n    \"storage_deposit\",\n    {\n      account_id: accountId,\n      registration_only: true,\n    },\n    oneTeraGas,\n    oneNEARInYoctoNEAR\n  );\n};\n\nif (!state.loaded) getTokenData();\n\nif (!state.loaded) return <Widget src={`${Owner}/widget/preload`} />;\n\nreturn (\n  <Wrapper>\n    <div className=\"d-flex align-items-center\" style={{ gap: 24 }}>\n      <Avatar\n        src={state.myAvatar}\n        onError={() => {\n          State.update({\n            myAvatar:\n              \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n          });\n        }}\n      />\n      <div>\n        <h4>\n          Hi,{\" \"}\n          {profile.name\n            ? profile.name\n            : accountId.length > 30\n            ? `${accountId.slice(0, 30)}...`\n            : accountId}\n        </h4>\n        <h6>\n          <b>Wallet ID:</b>\n          {accountId}\n        </h6>\n      </div>\n    </div>\n    <TokenComponent>\n      <Widget src={`${Owner}/widget/TokenBalance`} />\n      <div className=\"d-flex overflow-auto\">\n        <Table\n          className={`table table-hover table-striped table-borderless ${props.className}`}\n        >\n          <thead>\n            <tr>\n              {columns.map((th) => (\n                <th\n                  key={th.title}\n                  className=\"col-1\"\n                  style={{\n                    fontSize: 16,\n                    width: `${th.width}%`,\n                    verticalAlign: \"middle\",\n                    textAlign: th.align,\n                  }}\n                  scope=\"col\"\n                >\n                  <div>\n                    <span>{th.title}</span>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {state.tokens.length > 0 &&\n              state.tokens.map((row, i) => {\n                return (\n                  <tr key={row.key}>\n                    {columns.map((td) => {\n                      const key = td.key ? row[td.key] : i + 1;\n                      return (\n                        <td\n                          style={{\n                            color:\n                              td.colors ||\n                              themeColor?.table_pagination?.columntextcolor,\n                            fontSize: 16,\n                            textAlign: td.align,\n                            verticalAlign: \"middle\",\n                          }}\n                        >\n                          {td.action ? (\n                            <div\n                              style={{\n                                display: \"flex\",\n                                gap: 10,\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                value={state[row.id] ?? \"\"}\n                                onChange={(e) => {\n                                  if (Number(e.target.value) <= 0) return;\n                                  State.update({\n                                    [row.id]: e.target.value,\n                                  });\n                                }}\n                              />\n                              <a\n                                href=\"#\"\n                                onClick={() => deposit(row)}\n                                className=\"text-decoration-underline\"\n                              >\n                                {`Deposit`}\n                              </a>\n                              <a\n                                href=\"#\"\n                                onClick={() => withdraw(row)}\n                                style={{ color: state.loading && \"red\" }}\n                                className=\"text-decoration-underline\"\n                              >\n                                {`Withdraw`}\n                              </a>\n                              <a\n                                href=\"#\"\n                                onClick={() => registry(row)}\n                                style={{\n                                  color:\n                                    (row.id == \"NEAR\" || row.token != \"0\") &&\n                                    \"gray\",\n                                }}\n                                className=\"text-decoration-underline\"\n                              >\n                                {`Register`}\n                              </a>\n                            </div>\n                          ) : (\n                            key\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      </div>\n    </TokenComponent>\n\n    {state.history.length != 0 && (\n      <Widget\n        src={`${Owner}/widget/TxHistory`}\n        props={{\n          API_URL,\n          data: state.history,\n        }}\n      />\n    )}\n  </Wrapper>\n);\n", "metadata": {"fork_of": "socializer.near/widget/Profile@114186402"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/socializer.near/widget/Profile", "fact_widget_deployments_id": "0f08599499e687d766c087c735aa8dd0", "inserted_timestamp": "2024-03-18T03:25:17.214Z", "modified_timestamp": "2024-03-18T03:25:17.214Z", "__row_index": 115}