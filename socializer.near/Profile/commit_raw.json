{"tx_hash": "7ZqyyNKJT8fMZt4dDUxJJbeT7SrZxCLGsEzBLAVTJojb", "action_id_social": "26cPG1GT7mMCvYe3xoXfTNKw9zjMFSmZ9VQ1oUMNvWRy-0-widget", "block_id": 114964894, "block_timestamp": "2024-03-18T16:18:11.259Z", "signer_id": "socializer.near", "widget_name": "Profile", "source_code": "const accountId = context.accountId;\r\nconst Owner = \"socializer.near\";\r\nconst Admin = \"humans-of-near.near\";\r\nconst profile = Social.getr(`${accountId}/profile`);\r\nconst widgets = Social.getr(`${accountId}/widget`) ?? {};\r\n\r\nconst API_URL = props?.API_URL || \"http://localhost:3000\";\r\n\r\nState.init({\r\n  myAvatar: `https://i.near.social/magic/large/https://near.social/magic/img/account/${accountId}`,\r\n  tokens: [],\r\n  history: [],\r\n  loaded: false,\r\n  error: \"\",\r\n  loading: false,\r\n});\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Token Name\",\r\n    key: \"name\",\r\n    width: 25,\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Token Contract Address\",\r\n    key: \"contract\",\r\n    width: 25,\r\n    align: \"center\",\r\n  },\r\n  {\r\n    title: \"Token Deposited\",\r\n    key: \"balance\",\r\n    width: 25,\r\n    align: \"center\",\r\n  },\r\n  {\r\n    title: \"\",\r\n    key: \"action\",\r\n    width: 25,\r\n    align: \"center\",\r\n    action: true,\r\n  },\r\n];\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n  background: #FAFAFA;\r\n  flex-direction: column;\r\n  padding: 18px;\r\n  gap: 18px;\r\n`;\r\n\r\nconst WalletComponent = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  background: #F3F3F3;\r\n  flex-direction: column;\r\n  padding: 24px;\r\n  border-radius: 8px;\r\n  border: 1px solid var(--light_90, #E6E6E6);\r\n  gap: 20px;\r\n`;\r\n\r\nconst TokenComponent = styled.div`\r\n  gap: 20px;\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 6px 24px;\r\n  border-radius: 8px;\r\n  background: #F3F3F3;\r\n  flex-direction: column;\r\n  border: 1px solid var(--light_90, #E6E6E6);\r\n`;\r\n\r\nconst Avatar = styled.img`\r\n  display: flex;\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 100px;\r\n`;\r\n\r\nconst Table = styled.table`\r\n  margin: 0;\r\n  border-radius: 8px;\r\n  background: #F5F1F1;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 80px;\r\n`;\r\n\r\nconst getTokenData = () => {\r\n  return asyncFetch(API_URL + `/api/token?accountId=${accountId}`).then(\r\n    (res) => {\r\n      if (res.ok) {\r\n        const { token, history } = res.body;\r\n        State.update({\r\n          tokens: token,\r\n          history,\r\n          loaded: true,\r\n          loading: false,\r\n        });\r\n      } else {\r\n        State.update({\r\n          ...state,\r\n          loaded: true,\r\n          error: res.error,\r\n        });\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nconst toFixed = (x) => {\r\n  if (Math.abs(x) < 1.0) {\r\n    var e = parseInt(x.toString().split(\"e-\")[1]);\r\n    if (e) {\r\n      x *= Math.pow(10, e - 1);\r\n      x = \"0.\" + new Array(e).join(\"0\") + x.toString().substring(2);\r\n    }\r\n  } else {\r\n    var e = parseInt(x.toString().split(\"+\")[1]);\r\n    if (e) {\r\n      e -= 20;\r\n      x /= Math.pow(10, e);\r\n      x += new Array(e + 1).join(\"0\");\r\n    }\r\n  }\r\n  return x.toString();\r\n};\r\n\r\nconst deposit = async (item) => {\r\n  if (state.loading) return;\r\n\r\n  const amount = Number(state[item.id]);\r\n  let oneTeraGas = 100000000000000;\r\n  let oneNEARInYoctoNEAR = Number(item.yocto_near);\r\n\r\n  if (!amount || amount <= 0) return;\r\n  if (item.id === \"NEAR\") {\r\n    Near.call(\r\n      item.contract,\r\n      item.method,\r\n      Admin,\r\n      oneTeraGas,\r\n      amount * oneNEARInYoctoNEAR\r\n    );\r\n  } else {\r\n    let amt = toFixed((amount + 0.00001) * oneNEARInYoctoNEAR);\r\n    const data = {\r\n      receiver_id: Admin,\r\n      amount: amt,\r\n      memo: \"Token transfer\",\r\n    };\r\n    Near.call(item.contract, item.method, data, oneTeraGas, 1);\r\n  }\r\n};\r\n\r\nconst withdraw = async (item) => {\r\n  if (state.loading) return;\r\n  const amount = Number(state[item.id]);\r\n\r\n  if (!amount || amount <= 0) return;\r\n\r\n  if (amount > item.balance)\r\n    return State.update({ error: \"Balance is not enough.\" });\r\n\r\n  let data = {\r\n    accountId,\r\n    amount,\r\n    token: item._id,\r\n  };\r\n\r\n  State.update({ error: \"\", loading: true });\r\n  asyncFetch(API_URL + `/api/base/withdraw`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  }).then((res) => {\r\n    if (res.ok) {\r\n      const { error, data, code } = res.body;\r\n      if (error) {\r\n        State.update({ ...state, error, loading: false });\r\n        if(code && code == 404) await registry(item);\r\n      } else if (data && data === \"success\") {\r\n        State.update({\r\n          ...state,\r\n          loaded: false,\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst registry = async (item) => {\r\n  if (item.id == \"NEAR\") return;\r\n  const oneTeraGas = 300000000000000;\r\n  const oneNEARInYoctoNEAR = 100000000000000000000000;\r\n  return Near.call(\r\n    item.contract,\r\n    \"storage_deposit\",\r\n    {\r\n      account_id: accountId,\r\n      registration_only: true,\r\n    },\r\n    oneTeraGas,\r\n    oneNEARInYoctoNEAR\r\n  );\r\n};\r\n\r\nif (!state.loaded) getTokenData();\r\n\r\nif (!state.loaded) return <Widget src={`${Owner}/widget/preload`} />;\r\n\r\nreturn (\r\n  <Wrapper>\r\n    <div className=\"d-flex align-items-center\" style={{ gap: 24 }}>\r\n      <Avatar\r\n        src={state.myAvatar}\r\n        onError={() => {\r\n          State.update({\r\n            myAvatar:\r\n              \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\r\n          });\r\n        }}\r\n      />\r\n      <div>\r\n        <h4>\r\n          Hi,{\" \"}\r\n          {profile.name\r\n            ? profile.name\r\n            : accountId.length > 30\r\n            ? `${accountId.slice(0, 30)}...`\r\n            : accountId}\r\n        </h4>\r\n        <h6>\r\n          <b>Wallet ID:</b>\r\n          {accountId}\r\n        </h6>\r\n      </div>\r\n    </div>\r\n    <TokenComponent>\r\n      <Widget src={`${Owner}/widget/TokenBalance`} />\r\n      {state.error && (\r\n        <p className=\"m-0\" style={{ color: \"red\" }}>\r\n          {state.error}\r\n        </p>\r\n      )}\r\n      <div className=\"d-flex overflow-auto\">\r\n        <Table\r\n          className={`table table-hover table-striped table-borderless ${props.className}`}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              {columns.map((th) => (\r\n                <th\r\n                  key={th.title}\r\n                  className=\"col-1\"\r\n                  style={{\r\n                    fontSize: 16,\r\n                    width: `${th.width}%`,\r\n                    verticalAlign: \"middle\",\r\n                    textAlign: th.align,\r\n                  }}\r\n                  scope=\"col\"\r\n                >\r\n                  <div>\r\n                    <span>{th.title}</span>\r\n                  </div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {state.tokens.length > 0 &&\r\n              state.tokens.map((row, i) => {\r\n                return (\r\n                  <tr key={row.key}>\r\n                    {columns.map((td) => {\r\n                      const key = td.key ? row[td.key] : i + 1;\r\n                      return (\r\n                        <td\r\n                          style={{\r\n                            color:\r\n                              td.colors ||\r\n                              themeColor?.table_pagination?.columntextcolor,\r\n                            fontSize: 16,\r\n                            textAlign: td.align,\r\n                            verticalAlign: \"middle\",\r\n                          }}\r\n                        >\r\n                          {td.action ? (\r\n                            <div\r\n                              style={{\r\n                                display: \"flex\",\r\n                                gap: 10,\r\n                                alignItems: \"center\",\r\n                              }}\r\n                            >\r\n                              <Input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                value={state[row.id] ?? \"\"}\r\n                                onChange={(e) => {\r\n                                  if (Number(e.target.value) <= 0) return;\r\n                                  State.update({\r\n                                    [row.id]: e.target.value,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              <a\r\n                                href=\"#\"\r\n                                onClick={() => deposit(row)}\r\n                                className=\"text-decoration-underline\"\r\n                              >\r\n                                {`Deposit`}\r\n                              </a>\r\n                              <a\r\n                                href=\"#\"\r\n                                onClick={() => withdraw(row)}\r\n                                style={{ color: state.loading && \"red\" }}\r\n                                className=\"text-decoration-underline\"\r\n                              >\r\n                                {`Withdraw`}\r\n                              </a>\r\n                              <a\r\n                                href=\"#\"\r\n                                onClick={() => registry(row)}\r\n                                style={{\r\n                                  color:\r\n                                    (row.id == \"NEAR\" || row.token != \"0\") &&\r\n                                    \"gray\",\r\n                                }}\r\n                                className=\"text-decoration-underline\"\r\n                              >\r\n                                {`Register`}\r\n                              </a>\r\n                            </div>\r\n                          ) : (\r\n                            key\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </TokenComponent>\r\n\r\n    {state.history.length != 0 && (\r\n      <Widget\r\n        src={`${Owner}/widget/TxHistory`}\r\n        props={{\r\n          API_URL,\r\n          data: state.history,\r\n        }}\r\n      />\r\n    )}\r\n  </Wrapper>\r\n);\r\n", "metadata": {"fork_of": "socializer.near/widget/Profile@114964837"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/socializer.near/widget/Profile", "fact_widget_deployments_id": "15f94c3f0d85729e4b2ec22317ef7730", "inserted_timestamp": "2024-03-18T17:27:30.541Z", "modified_timestamp": "2024-03-18T17:27:30.541Z", "__row_index": 90}