{"tx_hash": "HamnBTxbb8tcmCqU93p4Fz2DdY5q6KYRz4egdcLVNCDu", "action_id_social": "9Bz4FidNyb7PYVnRWoAyZCy1zB3vVCiwAnsTwE6jEY8-0-widget", "block_id": 103341351, "block_timestamp": "2023-10-14T07:52:19.803Z", "signer_id": "socializer.near", "widget_name": "NewCampaign", "source_code": "const accountId = context.accountId;\nconst Owner = \"socializer.near\";\nconst profile = Social.getr(`${accountId}/profile`);\nconst API_URL = props?.API_URL || \"http://localhost:3000\";\n\nconst changePage = props?.changePage || (() => {});\nconst page = props?.page || \"\";\n\nconst requirementsOptions = [\n  { name: \"Follow\", value: \"follow\" },\n  { name: \"Like\", value: \"like\" },\n  { name: \"Repost\", value: \"repost\" },\n  { name: \"Comment\", value: \"comment\" },\n  { name: \"I-Am-Human Verified\", value: \"human\" },\n];\n\nconst hrOption = [];\nconst minOption = [];\n\nfor (let i = 0; i <= 50; i++) {\n  let hr = i + 12;\n  let min = i * 10;\n  if (min == 0) min = \"00\";\n  if (i <= 5) minOption.push({ text: min.toString(), value: min.toString() });\n  hrOption.push({ text: hr.toString(), value: hr.toString() });\n}\n\nState.init({\n  requirements: [],\n  username: profile.name ? profile.name : accountId,\n  post_link: \"\",\n  amount: 0.1,\n  token: \"NEAR\",\n  winners: 1,\n  total_reward: \"\",\n  duration_hr: \"12\",\n  duration_min: \"00\",\n  tokens: [],\n  error: \"\",\n  balance: 0,\n  loading: false,\n  notification: \"\",\n});\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background: #FAFAFA;\n  flex-direction: column;\n  padding: 18px;\n`;\n\nconst HeadComponent = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  padding: 32px 14px;\n  justify-content: space-between;\n  border-bottom: 1px solid #B3B3B3;\n`;\n\nconst MainComponent = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  padding: 32px 14px;\n  gap: 24px;\n  & p {\n    margin : 0\n  }\n`;\n\nconst Input = styled.input`\n  padding: 12px 20px;\n  font-size: 12px;\n  color: #595959;\n  font-weight: 600;\n  line-height: normal;\n  letter-spacing: -0.36px;\n  border-radius: 4px;\n  border: 1px solid var(--light_70, #B3B3B3);\n\n`;\n\nconst Button = styled.button`\n  display: inline-flex;\n  padding: 12px 24px;\n  align-items: flex-start;\n  gap: 10px;\n  border-radius: 6px;\n  background: var(--Dark, #121212); \n  color: var(--light_95, #F3F3F3);\n  text-align: center;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: capitalize;\n  line-height: normal;\n`;\n\nconst getTokenData = () => {\n  return asyncFetch(API_URL + `/api/token?accountId=${accountId}`).then(\n    (res) => {\n      if (res.ok) {\n        let balance = 0;\n        const tokens = res.body.token.map((item) => {\n          if (item.id === \"NEAR\") balance = item.balance;\n          return {\n            ...item,\n            value: item.id,\n            text: item.id,\n          };\n        });\n\n        State.update({\n          tokens,\n          balance,\n        });\n      }\n    }\n  );\n};\n\nif (!state.tokens.length) getTokenData();\n\nconst changeRequirement = (label) => {\n  State.update({\n    requirements: label,\n  });\n};\n\nconst createCampaign = () => {\n  const {\n    requirements,\n    username,\n    post_link,\n    amount,\n    token,\n    winners,\n    total_reward,\n    duration_hr,\n    duration_min,\n  } = state;\n  if (\n    !requirements.length ||\n    !username ||\n    !post_link ||\n    !amount ||\n    !token ||\n    !winners ||\n    !total_reward ||\n    !duration_hr ||\n    !duration_min\n  )\n    return State.update({ error: \"Please fill out all form fields\" });\n\n  State.update({ error: \"\", loading: true });\n  asyncFetch(API_URL + `/api/campaign`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ ...state, accountId }),\n  }).then((res) => {\n    if (res.ok) {\n      const { error, data } = res.body;\n      if (error) State.update({ error, loading: false });\n      else if (data && data === \"success\") {\n        State.update({ loading: false, notification: \"Campaign created!\" });\n        changePage(\"dashboard\");\n      }\n    }\n  });\n};\n\nreturn (\n  <Wrapper>\n    <div className=\"d-flex\">\n      <p\n        style={{ color: \"#B3B3B3\", cursor: \"pointer\" }}\n        onClick={() => {\n          changePage(\"dashboard\");\n        }}\n      >\n        {\"< GoBack\"}\n      </p>\n    </div>\n\n    <HeadComponent>\n      <div\n        style={{\n          position: \"relative\",\n          flexDirection: \"column\",\n          display: \"flex\",\n          gap: 14,\n        }}\n      >\n        <h4 style={{ margin: 0 }}>{\"Create New Campaign\"}</h4>\n        <p style={{ fontSize: 14, margin: 0 }}>\n          {\"Fill the form to start a new campaign\"}\n        </p>\n        {state.error && (\n          <p style={{ fontSize: 14, margin: 0, color: \"red\" }}>{state.error}</p>\n        )}\n      </div>\n    </HeadComponent>\n\n    {state.notification && (\n      <div\n        className=\"d-flex justify-content-end absolute position-fixed\"\n        style={{ right: 10 }}\n      >\n        <Widget\n          props={{\n            text: \"success\",\n          }}\n          src={`${Owner}/widget/Alert`}\n        />\n      </div>\n    )}\n  </Wrapper>\n);\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/socializer.near/widget/NewCampaign", "fact_widget_deployments_id": "d03aa8c84ef4c52b9f276e26e0126f51", "inserted_timestamp": "2023-10-14T09:47:29.147Z", "modified_timestamp": "2023-10-14T09:47:29.147Z", "__row_index": 6}