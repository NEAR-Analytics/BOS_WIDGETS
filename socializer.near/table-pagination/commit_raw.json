{"tx_hash": "6vwmTx24t2Zp3oqdAP5PfEypkLCcVPNmiDVoDqFgWQzp", "action_id_social": "6mZfgMJFUcJuy76tdSqkzHUfPcHr5hNQBLsNC6sT54Ch-0-widget", "block_id": 100874803, "block_timestamp": "2023-09-11T09:37:38.243Z", "signer_id": "socializer.near", "widget_name": "table-pagination", "source_code": "if (!props.data || !props.columns) {\n  return \"column and data props are required.\";\n}\n\nconst data = props.data || [];\nconst columns = props.columns;\n\nState.init({ currentPage: 1, searchValue: \"\" });\nconst rowsCount = props.rowsCount || 5;\nconst themeColor = props.themeColor;\nconst handleSearch = (event) => {\n  const value = event.target.value;\n  State.update({ searchValue: value });\n};\nconst handlePagination = () => {\n  if (!rowsCount) return { table: data };\n  const currentPage = state.currentPage;\n  const totalPages = Math.ceil(data.length / rowsCount);\n  const currentTableData = data.slice(\n    (currentPage - 1) * rowsCount,\n    rowsCount * currentPage\n  );\n  const buttons = Array(totalPages).fill(0);\n  buttons[currentPage - 1] = 1;\n  return { buttons, table: currentTableData };\n};\nconst Table = styled.table`\n  --bs-table-color: ${themeColor?.table_pagination?.table_color};\n  --bs-table-bg: ${themeColor?.table_pagination?.table_bg};\n  --bs-table-border-color: ${themeColor?.table_pagination?.table_border_color};\n  --bs-table-accent-bg: ${themeColor?.table_pagination?.table_accent_bg};\n  --bs-table-striped-color: ${themeColor?.table_pagination?.table_striped_color};\n  --bs-table-striped-bg: ${themeColor?.table_pagination?.table_striped_bg};\n  --bs-table-hover-color: ${themeColor?.table_pagination?.table_hover_color};\n  --bs-table-hover-bg:${themeColor?.table_pagination?.table_hover_bg};\n  --bs-table-hover-bg:${themeColor?.table_pagination?.columntextcolor};\n  border-radius: 8px;\n  background: #F5F1F1;\n  margin: 0;\n`;\n\nconst Button = styled.button`\n  padding: 4px 16px;\n  border-radius: 6px;\n  background: var(--Dark, #121212);\n  text-transform: capitalize;\n  font-weight: 600;\n  font-size: 12px;\n  color: #FFF;\n`;\n\nconst onHandelId = (id) => {\n  let customId = \"\";\n  if (id.length > 15) {\n    customId += id.substring(0, 3);\n    customId += \"...\";\n    customId += id.substring(id.length - 3);\n    return customId;\n  } else {\n    return id;\n  }\n};\n\nreturn (\n  <div className=\"table-responsive\" style={{ backgroundColor: \"#FAFAFA\" }}>\n    <div style={{ borderRadius: 8, border: \"1px solid #AAA\" }}>\n      <Table\n        className={`table table-hover table-striped table-borderless ${props.className}`}\n      >\n        <thead>\n          <tr>\n            {columns.map((th) => (\n              <th\n                key={th.title}\n                className=\"col-1\"\n                style={{ fontSize: 12, width: `${th.width}%` }}\n                scope=\"col\"\n              >\n                <div>\n                  {th.description ? (\n                    <OverlayTrigger\n                      placement={th.position || \"top\"}\n                      overlay={<Tooltip>{th.description}</Tooltip>}\n                    >\n                      <span>{th.title}</span>\n                    </OverlayTrigger>\n                  ) : (\n                    <span>{th.title}</span>\n                  )}\n                </div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {data.length > 0 &&\n            handlePagination()\n              .table.filter((row) =>\n                Object.values(row).some((value) =>\n                  value.toString().includes(state.searchValue)\n                )\n              )\n              .map((row, i) => {\n                return (\n                  <tr key={row.key}>\n                    {columns.map((td) => {\n                      const key = td.key ? row[td.key] : i + 1;\n                      return (\n                        <td\n                          style={{\n                            color:\n                              td.colors ||\n                              themeColor?.table_pagination?.columntextcolor,\n                            fontSize: 12,\n                            textAlign: td.align,\n                            verticalAlign: \"middle\",\n                          }}\n                        >\n                          {td.project ? (\n                            <div\n                              style={{\n                                display: \"flex\",\n                                gap: 10,\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <img\n                                style={{\n                                  width: 40,\n                                  height: 40,\n                                  borderRadius: 50,\n                                }}\n                                src={row.avatar}\n                              />\n                              {key}\n                            </div>\n                          ) : td.link ? (\n                            <a\n                              className=\"d-inline-block\"\n                              target=\"_blank\"\n                              href={`${key}`}\n                              style={{\n                                \"text-decoration\": \"none\",\n                              }}\n                            >\n                              <svg\n                                width=\"20\"\n                                height=\"20\"\n                                viewBox=\"0 0 20 20\"\n                                fill=\"none\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                              >\n                                <path\n                                  d=\"M12.9167 5.25001L12.9167 1.75001M12.9167 1.75001H9.41674M12.9167 1.75001L7.66675 7M6.50008 1.75H5.21675C4.23666 1.75 3.74661 1.75 3.37226 1.94074C3.04298 2.10852 2.77527 2.37623 2.60749 2.70552C2.41675 3.07986 2.41675 3.56991 2.41675 4.55V9.45C2.41675 10.4301 2.41675 10.9201 2.60749 11.2945C2.77527 11.6238 3.04298 11.8915 3.37226 12.0593C3.74661 12.25 4.23666 12.25 5.21675 12.25H10.1167C11.0968 12.25 11.5869 12.25 11.9612 12.0593C12.2905 11.8915 12.5582 11.6238 12.726 11.2945C12.9167 10.9201 12.9167 10.4301 12.9167 9.45V8.16667\"\n                                  stroke=\"#806ce1\"\n                                  stroke-width=\"2.5\"\n                                  stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\"\n                                />\n                              </svg>\n                            </a>\n                          ) : td.button ? (\n                            <Button>{key}</Button>\n                          ) : (\n                            key\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n        </tbody>\n      </Table>\n    </div>\n\n    {/* <input\n      type=\"text\"\n      placeholder=\"Search...\"\n      onChange={handleSearch}\n      style={{\n        width: \"20%\",\n        height: \"30px\",\n        borderRadius: \"50px\",\n        \"margin-left\": \"2px\",\n      }}\n    />*/}\n\n    {!rowsCount ? (\n      \"\"\n    ) : (\n      <div className=\"d-flex justify-content-end\">\n        <div>\n          <ul\n            className=\"pagination pagination-sm gap-2 mb-0 \"\n            style={{ height: 56, backgroundColor: \"white\", padding: 12 }}\n          >\n            <li className=\"page-item\">\n              <button\n                onClick={() => {\n                  const page = state.currentPage - 1;\n                  if (page > 0) State.update({ currentPage: page });\n                }}\n                className=\"page-link btn\"\n                style={{\n                  width: 32,\n                  height: 32,\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  borderRadius: 8,\n                  color: themeColor?.table_pagination?.btn_color ?? \"#000\",\n                }}\n              >\n                <svg\n                  width=\"17\"\n                  height=\"16\"\n                  viewBox=\"0 0 17 16\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M10.3292 12L11.2692 11.06L8.21589 8L11.2692 4.94L10.3292 4L6.32923 8L10.3292 12Z\"\n                    fill=\"black\"\n                  />\n                </svg>\n              </button>\n            </li>\n            {data.length > 0 &&\n              handlePagination().buttons.map((btn, i) => {\n                return (\n                  <li key={i} className=\"page-item\">\n                    <button\n                      onClick={() => State.update({ currentPage: i + 1 })}\n                      className=\"page-link btn\"\n                      style={{\n                        width: 32,\n                        height: 32,\n                        padding: 6,\n                        borderRadius: 8,\n                        background:\n                          state.currentPage === i ? \"#121212\" : \"#000\",\n                        borderColor:\n                          themeColor?.table_pagination?.btn_border ?? \"#000\",\n                        color: state.currentPage === i ? \"#000\" : \"#fff\",\n                      }}\n                    >\n                      {i + 1}\n                    </button>\n                  </li>\n                );\n              })}\n            <li className=\"page-item\">\n              <button\n                onClick={() => {\n                  const page = state.currentPage + 1;\n                  if (handlePagination().buttons.length > page)\n                    State.update({ currentPage: page });\n                }}\n                className=\"page-link btn\"\n                style={{\n                  width: 32,\n                  height: 32,\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  borderRadius: 8,\n                  color: themeColor?.table_pagination?.btn_color ?? \"#000\",\n                }}\n              >\n                <svg\n                  width=\"17\"\n                  height=\"16\"\n                  viewBox=\"0 0 17 16\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M6.20923 4L5.26923 4.94L8.32256 8L5.26923 11.06L6.20923 12L10.2092 8L6.20923 4Z\"\n                    fill=\"black\"\n                  />\n                </svg>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    )}\n  </div>\n);\n\n// const props = {\n//   data: [],\n//   columns: [\n//     { title: \"id\" }, //if key does not provided , rows will be ascending numbers\n//     { title: \"title\", key: \"key in data\" ,description:\"here is a\",position:\"top/right/buttom/left\",\n//    link: \"yes\",\n//      beforehref: \"https://near.social/mob.near/widget/ProfilePage?accountId=\",\n//      afterhref: \"\",\n//      colors: \"green\"},\n\n//   ],\n//   rowsCount: 2, // if zero or null , the whole table will be render\n//   className: \"table-bordered\",\n//   themeColor: {\n//     table_pagination: {\n//       table_bg: \"rgb(25,33,50)\",\n//       table_color: \"rgb(255,255,255)\",\n//       table_border_color: \"\",\n//       table_accent_bg: \"\",\n//       table_striped_color: \"rgb(255,255,255)\",\n//       table_striped_bg: \"\",\n//       table_hover_color: \"rgb(255,255,255)\",\n//       table_hover_bg: \"\",\n//       btn_border: \"#fff\",\n//       btn_bg: \"rgba(49, 62, 89,0.5)\",\n//       btn_bg_active: \"rgb(25,33,50)\",\n//       btn_color: \"#fff\",\n//       columntextcolor: \"\"\n//     },\n//   },\n// };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/socializer.near/widget/table-pagination", "fact_widget_deployments_id": "abf09d8e16593fcc77e653bdbb9fd8ce", "inserted_timestamp": "2023-09-11T11:35:19.330Z", "modified_timestamp": "2023-09-11T11:35:19.330Z", "__row_index": 10}