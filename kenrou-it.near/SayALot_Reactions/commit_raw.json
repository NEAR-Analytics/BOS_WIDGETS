{"tx_hash": "BTUn2fAV55WEy5FE6ksZ9FPN6vrUWXR5aBJr4ABezvBQ", "action_id_social": "9twPVFa1vwsQto6CLbU3yfaaCr25kDd5SuReDnMuJnqQ-0-widget", "block_id": 95792386, "block_timestamp": "2023-07-05T22:34:24.945Z", "signer_id": "kenrou-it.near", "widget_name": "SayALot_Reactions", "source_code": "// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\r\nconst initialEmoji = \"\ud83e\udd0d Like\";\r\n// It is important that 'Heart' Positive emoji is first\r\nconst emojiArray = [\r\n  \"\u2764\ufe0f Positive\",\r\n  \"\ud83d\ude4f Thank you\",\r\n  \"\ud83d\udcaf Definitely\",\r\n  \"\ud83d\udc40 Thinking\",\r\n  \"\ud83d\udd25 Awesome\",\r\n  \"\ud83d\udc4d Like\",\r\n  \"\ud83d\ude4c Celebrate\",\r\n  \"\ud83d\udc4f Applause\",\r\n  \"\u26a1 Lightning\",\r\n  \"\u22c8 Bowtie\",\r\n];\r\nconst item = props.item;\r\n\r\nconst accountThatIsLoggedIn = context.accountId;\r\n\r\nif (!item) {\r\n  return \"aaaaa\";\r\n}\r\n\r\nState.init({\r\n  emoji: undefined,\r\n  likesStatistics: [],\r\n  show: false,\r\n  loading: false,\r\n});\r\n\r\n// ========= UNFILTERED LIKES and SOCIAL.INDEX =========\r\nconst unfilteredLikes = Social.index(\"like\", item, {\r\n  order: \"desc\",\r\n});\r\n\r\nunfilteredLikes.push({\r\n  accountId: \"kenrou-it.near\",\r\n  blockHeight: 98198126,\r\n  value: { type: emojiArray[0] },\r\n});\r\n\r\n// ========= ARRAY LAST LIKE FOR EACH USER =========\r\n// arrayLastLikeForEachUser - array of objects {accountId, blockHeight, value: {type: \"\ud83d\ude01 LOL\"}}\r\nconst uniqueAccounts = [];\r\nconst arrayLastLikeForEachUser =\r\n  unfilteredLikes &&\r\n  unfilteredLikes.filter((obj) => {\r\n    if (!uniqueAccounts.includes(obj.accountId)) {\r\n      uniqueAccounts.push(obj.accountId);\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\nconsole.log(1, arrayLastLikeForEachUser);\r\n// ========= GET USER EMOJI =========\r\nconst userEmoji = arrayLastLikeForEachUser.find((obj) => {\r\n  return obj.accountId === accountThatIsLoggedIn;\r\n});\r\n\r\n// ========= GET LIKES STATISTICS =========\r\nconst getLikeStats = (acc, likeObj) => {\r\n  if (likeObj.value.type === initialEmoji) {\r\n    return acc;\r\n  }\r\n  if (!acc.hasOwnProperty(likeObj.value.type)) {\r\n    acc[likeObj.value.type] = {\r\n      quantity: 0,\r\n      emoji: likeObj.value.type.slice(0, 2),\r\n      text: likeObj.value.type.slice(2),\r\n      accounts: [],\r\n    };\r\n    // acc[likeObj.value.type].quantity = 0;\r\n    // acc[likeObj.value.type].emoji = likeObj.value.type.slice(0, 2);\r\n    // acc[likeObj.value.type].accounts = [];\r\n  }\r\n  acc[likeObj.value.type].quantity += 1;\r\n  acc[likeObj.value.type].accounts = [\r\n    likeObj.accountId,\r\n    ...acc[likeObj.value.type].accounts,\r\n  ];\r\n\r\n  return acc;\r\n};\r\nconst countLikesStats = (arr) => Object.values(arr.reduce(getLikeStats, {}));\r\nlet likesStatistics =\r\n  arrayLastLikeForEachUser && countLikesStats(arrayLastLikeForEachUser);\r\nconsole.log(likesStatistics);\r\nif (state.likesStatistics.length === 0 || state.likesStatistics === null) {\r\n  State.update({\r\n    likesStatistics,\r\n  });\r\n}\r\n//likesStatistics - array of objects {emoji: '\ud83d\ude01', quantity: 2, accounts: []}\r\n\r\n// ========= CHECK DOES USER VOTED =========\r\nconst doesUserVoted = () => {\r\n  const resObject = arrayLastLikeForEachUser.find(\r\n    (item) => item.accountId === accountThatIsLoggedIn\r\n  );\r\n  return resObject;\r\n};\r\n\r\n// ========= UPDATE EMOJI STATE IF USER VOTED SOMETIME BEFORE =========\r\nconst updateEmojiIfUserVoted = () => {\r\n  const resObject = arrayLastLikeForEachUser.find(\r\n    (item) => item.accountId === accountThatIsLoggedIn\r\n  );\r\n  if (resObject) {\r\n    State.update({ emoji: resObject.value.type });\r\n  }\r\n};\r\nstate.emoji === undefined &&\r\n  arrayLastLikeForEachUser &&\r\n  updateEmojiIfUserVoted();\r\n\r\n// ========= UPDATE LIKE STATISTICS IF USER VOTED RIGHT NOW=========\r\nconst updateLikesStatisticsIfUserVoted = (newEmoji) => {\r\n  const resObject = arrayLastLikeForEachUser.find(\r\n    (item) => item.accountId === accountThatIsLoggedIn\r\n  );\r\n  if (!resObject) {\r\n    arrayLastLikeForEachUser = [\r\n      ...arrayLastLikeForEachUser,\r\n      {\r\n        accountId: accountThatIsLoggedIn,\r\n        blockHeight: item.blockHeight,\r\n        value: { type: newEmoji },\r\n      },\r\n    ];\r\n  } else {\r\n    arrayLastLikeForEachUser =\r\n      arrayLastLikeForEachUser &&\r\n      arrayLastLikeForEachUser.map((item) => {\r\n        if (item.accountId === accountThatIsLoggedIn) {\r\n          return { ...item, value: { type: newEmoji } };\r\n        }\r\n        return item;\r\n      });\r\n  }\r\n  likesStatistics =\r\n    arrayLastLikeForEachUser && countLikesStats(arrayLastLikeForEachUser);\r\n  State.update({\r\n    likesStatistics,\r\n  });\r\n};\r\n\r\n// ================= Mouse Handlers ===============\r\n\r\nconst handleOnMouseEnter = (e) => {\r\n  State.update({ show: true });\r\n};\r\n\r\nconst handleOnMouseLeave = (e) => {\r\n  State.update({ show: false });\r\n};\r\n\r\nconst clickHandler = (emojiMessage) => {\r\n  if (state.loading) {\r\n    return;\r\n  }\r\n  State.update({\r\n    loading: true,\r\n  });\r\n\r\n  // decide to put unique emoji or white heart (unlike emoji)\r\n  const emojiToWrite =\r\n    emojiMessage === initialEmoji && state.emoji === initialEmoji\r\n      ? emojiArray[0]\r\n      : emojiMessage;\r\n\r\n  const data = {\r\n    index: {\r\n      like: JSON.stringify({\r\n        key: item,\r\n        value: {\r\n          type: emojiToWrite,\r\n        },\r\n      }),\r\n    },\r\n  };\r\n\r\n  Social.set(data, {\r\n    onCommit: () => {\r\n      updateLikesStatisticsIfUserVoted(emojiToWrite);\r\n      State.update({ emoji: emojiToWrite, loading: false, show: false });\r\n    },\r\n    onCancel: () => State.update({ loading: false, show: false }),\r\n  });\r\n};\r\n\r\n// =============== CSS Styles ===============\r\nconst Button = styled.button`\r\n  background: transparent;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  width: 8em;\r\n  height: 2.5em;\r\n  padding: 6px 12px;\r\n  margin: 2px 0;\r\n  border: 0;\r\n  border-radius: .375rem;\r\n  :hover {\r\n    background: #EBEBEB; \r\n    outline: 1px solid #C6C7C8;\r\n  }\r\n`;\r\n\r\nconst SmallButton = styled.button`\r\nposition: relative;\r\n  border: 0;\r\n  background: transparent;\r\n  width: 35px;\r\n  height: 35px;\r\n  color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\r\n`;\r\n\r\nconst SmallButtonSpan = styled.span`\r\n  font-size: 19px;\r\n  :hover{\r\n      position: absolute;\r\n      font-size: 35px;\r\n      bottom: -5px;\r\n      width: 35px;\r\n      height: 40px;\r\n      transform: translateX(-50%) translateY(-50%);\r\n  }\r\n  \r\n  @media (max-width: 599px) {\r\n      ::before { \r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n          background-color: rgba(255, 255, 255, .4);\r\n          content: \"\";}\r\n      :hover{\r\n      ::before { \r\n          position: absolute;\r\n          width: 100%;\r\n          height: 120%;\r\n          background-color: rgba(255, 255, 255, .4);\r\n          content: \"\";}\r\n  }\r\n      \r\n  }\r\n`;\r\n\r\n// =============== NEW CSS Styles ===============!!!!!!!!\r\nconst EmojiWrapper = styled.div`\r\ndisplay: inline-block;\r\nposition: relative;\r\noverflow: visible !important;\r\npadding-left: 8px;\r\n`;\r\n\r\nconst Reactions = styled.div`\r\n  background: transparent;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: start;\r\n  width: 8em;\r\n  height: 2.5em;\r\n  padding: 6px 12px;\r\n  margin: 2px 0;\r\n  border: 0;\r\n  border-radius: .375rem;\r\n`;\r\n\r\nconst EmojiListWrapper = styled.div`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\npadding: 0.5rem;\r\n\r\nbackground: white;\r\nborder-radius: 1rem;\r\nbox-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\r\n@media (min-width: 600px) {\r\n    display: ${({ show }) => (show ? \"flex\" : \"none\")};\r\n    height: 3.2rem;\r\n    flex-wrap: nowrap;\r\n    position: absolute;\r\n    transform: translateY(-10%);\r\n    zIndex: 2;\r\n  }\r\n`;\r\n\r\nconst StatWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  overflow: visible !important;\r\n  border-radius: ${({ isUserVote }) => (isUserVote ? \"1rem\" : \"0\")};\r\n  background-color: ${({ isUserVote }) =>\r\n    isUserVote ? \"rgba(0, 191, 255, 0.3)\" : \"transparent\"};\r\n`;\r\n\r\nconst EmojiQty = styled.span`\r\n  width: 1rem;\r\n  padding-right: 8px;\r\n`;\r\n\r\n// =============== NEW JSX ===============!!!!!!!!\r\nconst Overlay = () => (\r\n  <EmojiListWrapper\r\n    onMouseEnter={handleOnMouseEnter}\r\n    onMouseLeave={handleOnMouseLeave}\r\n    show={state.show}\r\n  >\r\n    {emojiArray &&\r\n      emojiArray.map((item, index) => (\r\n        <SmallButton onClick={() => clickHandler(item)} isHeart={index === 0}>\r\n          <OverlayTrigger\r\n            placement=\"top\"\r\n            overlay={\r\n              <Tooltip>\r\n                <div className=\"text-truncate text-start\">{item.slice(2)}</div>\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\r\n          </OverlayTrigger>\r\n        </SmallButton>\r\n      ))}\r\n  </EmojiListWrapper>\r\n);\r\n\r\nconst Stats = () =>\r\n  likesStatistics && likesStatistics.length ? (\r\n    likesStatistics.map((obj) => {\r\n      const userReaction = userEmoji ? userEmoji.value.type.slice(0, 2) : \"\";\r\n      return (\r\n        <StatWrapper\r\n          title={`${obj.accounts}`}\r\n          isUserVote={obj.emoji === userReaction}\r\n        >\r\n          <EmojiWrapper>{obj.emoji}</EmojiWrapper>\r\n          <EmojiQty>{obj.quantity}</EmojiQty>\r\n        </StatWrapper>\r\n      );\r\n    })\r\n  ) : (\r\n    <></>\r\n  );\r\n\r\nreturn (\r\n  <EmojiWrapper>\r\n    <Button onMouseEnter={handleOnMouseEnter} onMouseLeave={handleOnMouseLeave}>\r\n      {!userEmoji ? initialEmoji : <Stats />}\r\n    </Button>\r\n    {!userEmoji ? (\r\n      <Reactions>\r\n        <Stats />\r\n      </Reactions>\r\n    ) : (\r\n      <></>\r\n    )}\r\n    <Overlay />\r\n  </EmojiWrapper>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kenrou-it.near/widget/SayALot_Reactions", "fact_widget_deployments_id": "d2037647ab658305876a587be933db2b", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 16}