{"tx_hash": "HWneiuWMgtqtLjUd5tLtgd3hcm3cmnbc8zCJyhmPpg9k", "action_id_social": "8R6z3K3Goz2BpLkrV7sv2e2dgZymMsFyjkXs4e3h7txx-0-widget", "block_id": 110577204, "block_timestamp": "2024-01-16T21:24:32.795Z", "signer_id": "evaluator.near", "widget_name": "Curriculum.HelloNearMD", "source_code": "const { userAccountId } = props;\n\nconst evaluation_name = \"Hello Near\";\nconst evaluation_method = \"evaluate_hello_near\";\nconst accent_color = \"#BEF264\";\n\nconst text = (`\n# Hello Near\n\n### Concept:\nNEAR smart contracts are capable of storing and returning  values by exposing methods that we can interact with.\n\n### Resources:\n- [https://docs.near.org/develop/contracts/quickstart](https://docs.near.org/develop/contracts/quickstart)\n\n### Task:\nIn this evaluation we will create a simple contract that will store a **'greeting'** and expose two methods (**'set_greeting'**) and **'get_greeting'**) interact with.\n\n### TODO:\n- Add a public function **'get_greeting'** that returns the stored greeting from the contracts state\n- Add a public function **'set_greeting'** that takes a **greeting: string** as a parameter, such as 'howdy', and saves it to the contracts state\n\n### Interacting with the contract:\n\\`\\`\\`bash\n$ near call mycontract.${userAccountId} set_greeting '{\"greeting\": \"howdy\"}' --accountId ${userAccountId}\n# > ''\n\\`\\`\\`\n\n\\`\\`\\`bash\n$ near view mycontract.${userAccountId} get_greeting\n# > 'howdy'\n\\`\\`\\`\n\n### Run the tests:\n\nAfter we have made sure we are in the relevant directory we can run the tests by \\`npm run test - ts\\` or \\`npm run test - rs\\`\n`);\n\nreturn { evaluation_name, evaluation_method, accent_color, text }\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evaluator.near/widget/Curriculum.HelloNearMD", "fact_widget_deployments_id": "afa550ba50b93e360c01c08a50f699d9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}