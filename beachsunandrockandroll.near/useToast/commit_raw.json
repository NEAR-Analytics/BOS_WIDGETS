{"tx_hash": "3ipjPmHLfjKXinkCbMmSiMohvSYVt6YaZewkSpt7d9UY", "action_id_social": "GaUNT21kjKT6g2WgUTwGisZpUXgqMdrZG6wje7TVVVtG-0-widget", "block_id": 117833870, "block_timestamp": "2024-04-28T20:33:25.115Z", "signer_id": "beachsunandrockandroll.near", "widget_name": "useToast", "source_code": "\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\nconst toastTimeouts = new Map();\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners = [];\n\nlet memoryState = { toasts: [] };\n\nfunction dispatch(action) {\n  console.log('aca');\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    \n    listener(memoryState);\n  });\n  console.log(listeners);\n  \n}\n\nfunction toast({ ...props }) {\n  const id = genId();\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n  console.log(id);\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nconst useToast = () => {\n  const [state, setState] = useState(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n};\n\nreturn { useToast, toast }\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/beachsunandrockandroll.near/widget/useToast", "fact_widget_deployments_id": "018eff1b59fc80e17c2b05d51e5a14b4", "inserted_timestamp": "2024-04-28T21:40:35.512Z", "modified_timestamp": "2024-04-28T22:39:53.625Z", "__row_index": 0}