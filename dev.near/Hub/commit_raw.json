{"tx_hash": "4Uxmm1z6fzttpfpoa3nfNoRdrfwiBQjnDKLC7zRr8G6r", "action_id_social": "DkCsKgxqCqgdvaarmKPKfuqHBxyA8PXahUFR1kXar2yW-0-widget", "block_id": 121679639, "block_timestamp": "2024-06-21T17:23:53.891Z", "signer_id": "dev.near", "widget_name": "Hub", "source_code": "const ACCOUNT_ID = \"dev.near\";\nconst API_URL = \"https://hub.nearspace.info/api\";\nconst SIGNATURE_RECIPIENT = \"ai.near\";\nconst STORAGE_KEY = `session_storage`;\n\nconst referer = fetch(`https://annotation.nearspace.info/api/get_referer/`, {\n  method: \"POST\",\n}).body;\nif (!referer) return \"\";\n\nconst CALLBACK_URL = `${referer}${ACCOUNT_ID}/widget/Hub`;\n\nconst CSS_URL =\n  \"https://gist.githubusercontent.com/zavodil/10ed1d07c893e04571332f1cb2408226/raw/d65b8f258eb23217c5f58d05248fdb8aab4c5768/add.style.css\";\n\nconst css = fetch(CSS_URL).body;\nif (!css) return \"\";\n\nif (state === undefined) {\n  State.init({\n    resetSession: false,\n    pendingAuth: false,\n    pendingRequest: false,\n    nonce: 0,\n    updateDockerStatus: true,\n    theme: styled.div`${css}\n    \n    body{\n  background-color: rgb(0, 0, 0);\n}\n\n.Cur_Input_Line{\n    position: relative;\n    width: 100%;\n    height: 10%;\n    /* border: 1px solid white; */\n    font-size: 20px;\n}\nspan{\n    font-family: monospace;\n    font-weight: 700;\n}\n.Ter_Green{\n    color:chartreuse\n}\n.Ter_Blue{\n    color:cyan\n}\n.Ter_Gray{\n    color: rgb(167, 166, 166);\n}\n\n.commandLog {\n  display: inline-flex;\n        color: #fff;\n    font-size: 20px;\n    font-weight: 700;\n    font-family: monospace;\n\n    border: none;\n    border-color: transparent;\n    background-color: rgb(0, 0, 0);\n    width: 100%;\n}\n\n\ninput{\n    color: #fff;\n    font-size: 20px;\n    font-weight: 700;\n    font-family: monospace;\n\n    border: none;\n    border-color: transparent;\n    background-color: rgb(0, 0, 0);\n    width: 75%;\n}\ninput:focus{\n    color: #fff;\n    font-size: 20px;\n    font-weight: 700;\n    font-family: monospace;\n\n    border: none;\n    border-color: transparent;\n    outline: none;\n    background-color:rgb(0, 0, 0);\n\n    width: 75%;\n    // caret-color: #000;\n}\n\n.Ter_Input{\n    width: 75%;\n\n}\n\n@keyframes Blink_Ani {\n    from{ background-color: #000;}\n    to{ background-color: #fff;}\n}\n.Blink{\n    position:absolute;\n    left:310px;\n    top: 3px;\n    height: 20px;\n    width: 12px;\n    background-color: #fff;\n    opacity: 1;\n    z-index: 5;\n\n}`,\n  });\n\n  // Auto refresh docker status\n  setInterval(() => {\n    State.update((state) => ({\n      ...state,\n      nonce:\n        !!state.sessionId && !!state.updateDockerStatus\n          ? state.nonce + 1\n          : state.nonce,\n    }));\n  }, 3000);\n}\n\nconst loadDockerStatus = () => {\n  if (state.sessionId) {\n    asyncFetch(`${API_URL}/is_running`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        session_id: state.sessionId,\n        account_id: context.accountId,\n      }),\n    }).then((res) => {\n      console.log(\"is_running res\", res);\n      if (res.ok) {\n        if (res.body.is_session_valid) {\n          State.update({ isRunning: res.body.is_running ?? false });\n        } else {\n          console.log(\"is_session_valid FALSE. state\", state);\n\n          State.update({\n            //resetSession: true,\n            resetSession: !state.resetSession,\n            sessionId: null,\n            isSessionValid: false,\n            pendingRequest: false,\n          });\n        }\n      } else {\n        State.update({ updateDockerStatus: false });\n      }\n    });\n  }\n};\n\nuseEffect(() => {\n  loadDockerStatus();\n}, [state.nonce]);\n\nconst Theme = state.theme;\n\nconst onAuth = (data) => {\n  const isSessionValid = !!data.is_signature_valid && !!data.session_id;\n  console.log(\"onAuth Index\", data, isSessionValid);\n  State.update({\n    sessionId: data.session_id,\n    isSessionValid,\n    resetSession: false,\n    pendingAuth: false,\n  });\n  Storage.privateSet(STORAGE_KEY, data.session_id);\n};\n\nconst hashParams = (window?.location?.hash ?? \"\")\n  .split(\"&\")\n  .reduce((acc, param) => {\n    const [key, value] = param.split(\"=\");\n    if (key) {\n      acc[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n    return acc;\n  }, {});\n\nconst onLogout = () => {\n  console.log(\"onLogout\");\n  Storage.privateSet(STORAGE_KEY, null);\n  State.update({\n    isSessionValid: false,\n    sessionId: null,\n    resetSession: true,\n    pendingRequest: false,\n    pendingAuth: false,\n  });\n};\n\nconst sessionContainer = (\n  <>\n    <Widget\n      src={`${ACCOUNT_ID}/widget/op-session`}\n      props={{\n        storageKey: STORAGE_KEY,\n        message: \"Welcome to NEAR.AI\",\n        recipient: SIGNATURE_RECIPIENT,\n        callbackUrl: CALLBACK_URL,\n        apiUrl: API_URL,\n        signature: hashParams?.signature,\n        publicKey: hashParams?.publicKey,\n        onAuth,\n        onLogout,\n        className: \"btn btn-primary p-2\",\n        resetSession: state.resetSession,\n        setResetSession: (resetSession) => {\n          console.log(\"setResetSession\", resetSession);\n          State.update({ resetSession });\n        },\n        pendingAuth: state.pendingAuth,\n        setPendingAuth: (pendingAuth) => {\n          State.update({ pendingAuth });\n        },\n      }}\n    />\n  </>\n);\n\nconst showSessionContainer =\n  state.resetSession || (!state.pendingRequest && !state.isSessionValid);\n\nlet isGetTask = false;\n\nconsole.log(\n  \"Index: \",\n  state.pendingRequest,\n  state.isSessionValid,\n  \"showSessionContainer\",\n  showSessionContainer\n);\n\nconst setDataUrlFromBlob = (file) => {\n  if (!file?.dataUrl) {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      if (!file?.dataUrl) {\n        console.log(\"reader.result\", reader.result);\n        let files = state.files ?? [];\n        files.push({ file, dataUrl: reader.result });\n\n        console.log(\"files\", files);\n\n        State.update({ files });\n      }\n    };\n    reader.readAsDataURL(file);\n  }\n};\n\nconst filesOnChange = (file) => {\n  console.log(\"filesOnChange 0\", file);\n  if (file?.length > 0) {\n    const body = file[0];\n    console.log(\"filesOnChange\", file, file[0]);\n\n    setDataUrlFromBlob(body);\n  } else {\n    State.update({\n      files: [],\n    });\n  }\n};\n\nconst filesUpload = () => {\n  console.log(\"filesUpload\");\n  if ((state.files ?? []).length > 0) {\n    const boundary =\n      \"----WebKitFormBoundary\" + Math.random().toString(36).substr(2);\n    const body = [];\n\n    body.push(\"--\" + boundary);\n    body.push('Content-Disposition: form-data; name=\"account_id\"');\n    body.push(\"\");\n    body.push(context.accountId);\n\n    body.push(\"--\" + boundary);\n    body.push('Content-Disposition: form-data; name=\"session_id\"');\n    body.push(\"\");\n    body.push(state.sessionId);\n\n    for (let i = 0; i < state.files.length; i++) {\n      const file_item = state.files[i];\n      body.push(\"--\" + boundary);\n      body.push(\n        'Content-Disposition: form-data; name=\"file\"; filename=\"' +\n          file_item.file.name +\n          '\"'\n      );\n      body.push(\"Content-Type: \" + file_item.file.type);\n      body.push(\"\");\n      body.push(file_item.dataUrl);\n    }\n    body.push(\"--\" + boundary + \"--\");\n\n    const requestBody = body.join(\"\\r\\n\");\n\n    console.log(\"body\", body);\n\n    asyncFetch(`${API_URL}/file_upload`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"multipart/form-data; boundary=\" + boundary,\n      },\n      body: requestBody,\n    }).then((res) => {\n      console.log(\"res filesUpload\", res);\n      State.update({ files: [] });\n    });\n  }\n};\n\nconst submitUserCommand = () => {\n  if (state.userCommand && !state.userCommandPending) {\n    State.update({ userCommandPending: true });\n    let commandsLog = state.commandsLog ?? [];\n    commandsLog.push(state.userCommand);\n    asyncFetch(`${API_URL}/run`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        command: state.userCommand,\n        session_id: state.sessionId,\n        account_id: context.accountId,\n      }),\n    }).then((res) => {\n      console.log(\"res\", res);\n      console.log(\"res2\", res.body.body.split(\"\\r\\n\"));\n      if (res.ok && res.body.exit_code == 0) {\n        res.body.body.split(\"\\r\\n\").map((item) => {\n          let itemCleaned = removeAnsiCodes(item);\n          if (!itemCleaned) itemCleaned = \"Done\";\n          commandsLog.push(itemCleaned);\n        });\n      } else {\n        commandsLog.push(`Error ${res.body.exit_code}`);\n      }\n\n      console.log(\"commandsLog\", commandsLog);\n      State.update({ commandsLog, userCommand: \"\", userCommandPending: false });\n    });\n  }\n};\n\nconst commandLogPrefix = (\n  <>\n    <span class=\"Ter_Green\">user</span>\n    <span class=\"Ter_Gray\">@near-ai</span>\n    <span class=\"Ter_Green\">~</span>\n    <span class=\"Ter_Gray\">&gt;</span>\n  </>\n);\n\nconst removeAnsiCodes = (str) => {\n  const ansiRegex = /\\x1B\\[[0-9;]*[a-zA-Z]/g;\n  return str.replace(ansiRegex, \"\");\n};\n\nreturn (\n  <Theme class=\"w-100\" style={{ overflowY: \"scroll\" }}>\n    {state.pendingRequest && <Widget src={`${ACCOUNT_ID}/widget/op-loading`} />}\n\n    {(!showSessionContainer || state.sessionId) && (\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col\" style={{ backgroundColor: \"black\" }}>\n            {(state.commandsLog ?? []).map((item) => (\n              <div class=\"commandLog\">\n                {commandLogPrefix}\n                <input class=\"Ter_Input\" readonly value={item} />\n              </div>\n            ))}\n            <div class=\"commandLog\">\n              {commandLogPrefix}\n              <input\n                style={{ caretColor: \"white\" }}\n                type=\"text\"\n                class=\"Ter_Input\"\n                value={state.userCommandPending ? \"\" : state.userCommand ?? \"\"}\n                onChange={(e) => {\n                  State.update({ userCommand: e.target.value });\n                }}\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") {\n                    submitUserCommand();\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-2\">\n            <h4>Docker</h4>\n            <Files\n              multiple={false}\n              minFileSize={1}\n              clickable\n              className=\"btn btn-outline-primary\"\n              onChange={filesOnChange}\n            >\n              Add file\n            </Files>\n\n            {(state.files ?? []).map((file_item) => (\n              <li>{file_item.file.name}</li>\n            ))}\n            {\n              /*state.isRunning &&*/ (state.files ?? []).length > 0 && (\n                <button onClick={() => filesUpload()}>Upload</button>\n              )\n            }\n            {/*\n          </div>\n          <div class=\"col-2\">\n           \n            {<button\n              onClick={() => {\n                asyncFetch(`${API_URL}/start_docker`, {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({\n                    session_id: state.sessionId,\n                    account_id: context.accountId,\n                  }),\n                }).then((res) => {\n                  console.log(\"start_docker\", res);\n                  State.update({ updateDockerStatus: true });\n                });\n              }}\n            >\n              start_docker\n            </button>*/}\n            {state.isRunning && <div>Docker is active</div>}\n          </div>\n          <div class=\"col-6 hidden\">\n            <h4>Run Command</h4>\n            <div>\n              <textarea\n                value={state.command1}\n                onChange={(e) => State.update({ command1: e.target.value })}\n              />\n            </div>\n            <button\n              onClick={() => {\n                asyncFetch(`${API_URL}/run`, {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({\n                    command: state.command1,\n                    session_id: state.sessionId,\n                    account_id: context.accountId,\n                  }),\n                }).then((res) => {\n                  console.log(\"res\", res);\n                  State.update({ value1: res.ok ? res.body : \"Error\" });\n                });\n              }}\n            >\n              Run\n            </button>\n            <pre>{JSON.stringify(state.value1)}</pre>\n          </div>\n          <div class=\"col-4\">\n            <h4>Run Server</h4>\n            <button\n              onClick={() => {\n                asyncFetch(`${API_URL}/start_server`, {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({\n                    session_id: state.sessionId,\n                    account_id: context.accountId,\n                  }),\n                }).then((res) => {\n                  State.update({ value2: res.ok ? res.body : \"Error\" });\n                  console.log(res);\n                });\n              }}\n            >\n              start_server\n            </button>\n            <pre>{JSON.stringify(state.value2)}</pre>\n          </div>\n        </div>\n      </div>\n    )}\n\n    {showSessionContainer && sessionContainer}\n  </Theme>\n);\n", "metadata": {"fork_of": "dev.near/widget/Index@120867984"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dev.near/widget/Hub", "fact_widget_deployments_id": "38979162ba28e29ea8fdebda311e58fe", "inserted_timestamp": "2024-06-21T18:54:34.640Z", "modified_timestamp": "2024-06-21T18:54:34.640Z", "__row_index": 1}