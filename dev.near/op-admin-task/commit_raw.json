{"tx_hash": "ADKg22CVzRm2mfTruT97skFArz3Zeqvu5cqw8AZwT4TA", "action_id_social": "CcU7hufqeY19Hr35snqCPUFhhfyc8zFq3BBpq6za4riF-0-widget", "block_id": 120353502, "block_timestamp": "2024-06-03T14:44:35.658Z", "signer_id": "dev.near", "widget_name": "op-admin-task", "source_code": "const USER = \"user\";\nconst AI = \"ai\";\nconst ACCOUNT_ID = \"dev.near\";\nconst API_URL = \"https://annotation.nearspace.info/api\";\nconst PROBLEM_ID = 1;\nconst STATUS_ANNOTATION_PENDING = 0;\nconst STORAGE_KEY = `task_storage`;\n\nconst CSS_URL =\n  \"https://gist.githubusercontent.com/zavodil/10ed1d07c893e04571332f1cb2408226/raw/8bad3b0836bec04845cdbaa78bbad771a48a23f7/add.style.css\";\nconst css = fetch(CSS_URL).body;\nif (!css) return \"\";\n\nState.init({\n  theme: styled.div`${css}\n  .styled-message ol, .styled-message ul {\n      padding-left: 20px;\n  }\n  `,\n});\nconst Theme = state.theme;\n\nconst {\n  apiUrl,\n  sessionId,\n  annotationId,\n  problemId,\n  pendingRequest,\n  setPendingRequest,\n  onRequest,\n  showDiff,\n  showMessage,\n  showPrompt,\n  showSpec,\n} = props;\nconst storageKey = props.storageKey ?? STORAGE_KEY;\n\nif (typeof setPendingRequest !== \"function\") {\n  setPendingRequest = (data) => console.log(\"setPendingRequest\", data);\n}\n\nif (typeof onRequest !== \"function\") {\n  onRequest = (data) => console.log(\"onRequest\", data);\n}\n\nif (!annotationId) {\n  return \"No data\";\n}\n\nif (state.currentAnnotationId && state.currentAnnotationId != annotationId) {\n  State.update({\n    currentAnnotationId: null,\n    taskLoaded: false,\n    taskLoading: false,\n  });\n}\n\nconst getArray = (items) => (Array.isArray(items) ? items : []);\n\nlet getUserTaskData = () => {\n  setPendingRequest(true);\n  asyncFetch(`${apiUrl}/admin/get_user_annotation_by_id/`, {\n    method: \"POST\",\n\n    body: JSON.stringify({\n      annotation_id: annotationId,\n      account_id: context.accountId,\n      session_id: sessionId,\n      problem_id: problemId,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      console.log(\"get_user_annotation_by_id\", sessionId, res);\n      if (res.body.is_session_valid) {\n        let task = res.body.task;\n        let chat = JSON.parse(task.content);\n        State.update({\n          currentAnnotationId: annotationId,\n          currentAccountId: task.account_id,\n          taskLoading: false,\n          taskLoaded: true,\n          chat: getArray(chat),\n        });\n      }\n      // returns {is_session_valid, task}\n      onRequest(res.body);\n    }\n    console.log(\"request_annotation_by_id resp\", res.ok, res.body);\n    setPendingRequest(false);\n  });\n};\n\nif (!state.taskLoaded && !state.taskLoading && !pendingRequest) {\n  State.update({ taskLoading: true });\n  console.log(\"getUserTaskData\", state);\n  getUserTaskData();\n}\n\nconst getLastReplyFromAI = (index, chat) => {\n  let item = null;\n  for (let i = index - 1; i > 0; i--) {\n    if (chat[i].person == AI) {\n      item = chat[i];\n      item.index = i;\n      break;\n    }\n  }\n\n  return item;\n};\n\nconst getPreviousSpecFromAI = (index, chat) => {\n  return getLastReplyFromAI(index, chat)?.spec ?? \"\";\n};\n\nconst getMessageDiffClass = (item) => {\n  return item.person != USER ? \"code-diff-start\" : \"pt-1 code-diff-end\";\n};\n\nconst getMessageDiff = (item, index) => {\n  if (item.person == AI) {\n    let prevSpec = getPreviousSpecFromAI(index, state.chat);\n\n    if (isSpecExists(prevSpec)) {\n      let diffs = codeDiff(prevSpec, item.spec);\n      console.log(\"diffs\", diffs);\n      let diffContents = (diffs ?? [])\n        .filter((line) => line != \"\\n\")\n        .map((line) => {\n          if (Array.isArray(line)) {\n            return (\n              <div class=\"p-1\" style={{ backgroundColor: line[1] }}>\n                {line[0]}\n              </div>\n            );\n          } else {\n            return <div class=\"p-0\">{line}</div>;\n          }\n        });\n\n      return (\n        <div\n          class={`mt-1 small code-diff rounded-3 ${getMessageDiffClass(item)}`}\n        >\n          {diffContents}\n        </div>\n      );\n    }\n  }\n\n  return <></>;\n};\n\nconst codeDiff = (old_code, new_code) => {\n  let newVal;\n  let result = [];\n  let codes = [old_code, new_code];\n  let allLiness = [[], []];\n  let liness = [[], []];\n  let h = [[], []];\n  for (let i = 0; i < 2; ++i) {\n    allLiness[i] = codes[i].split(\"\\n\");\n  }\n\n  let left = 0;\n  let right = 0;\n  let l1 = allLiness[0].length;\n  let l2 = allLiness[1].length;\n  while (\n    left < l1 &&\n    left < l2 &&\n    allLiness[0][left].trim() == allLiness[1][left].trim()\n  ) {\n    ++left;\n  }\n  while (\n    left + right < l1 &&\n    left + right < l2 &&\n    allLiness[0][l1 - right - 1].trim() == allLiness[1][l2 - right - 1].trim()\n  ) {\n    ++right;\n  }\n  if (left == Math.min(l1, l2)) {\n    result.push(\"/* no code changes */\");\n    return result;\n  }\n  for (let i = left; i < l1 - right; ++i) {\n    liness[0].push(allLiness[0][i]);\n  }\n  for (let i = left; i < l2 - right; ++i) {\n    liness[1].push(allLiness[1][i]);\n  }\n\n  let dp = [];\n  for (let j = 0; j < liness[1].length; ++j) {\n    h[1].push(1);\n  }\n\n  for (let i = 0; i < liness[0].length; ++i) {\n    h[0].push(1);\n    dp.push([]);\n    for (let j = 0; j < liness[1].length; ++j) {\n      let val = 0;\n      if (i && dp[i - 1][j] > val) {\n        val = dp[i - 1][j];\n      }\n      if (j && dp[i][j - 1] > val) {\n        val = dp[i][j - 1];\n      }\n      if (liness[0][i].trim() == liness[1][j].trim()) {\n        if (i && j) newVal = dp[i - 1][j - 1] + 1;\n        else newVal = 1;\n        if (newVal > val) val = newVal;\n      }\n      dp[i].push(val);\n    }\n  }\n\n  let i = liness[0].length - 1;\n  let j = liness[1].length - 1;\n  while (i >= 0 && j >= 0) {\n    if (\n      liness[0][i].trim() == liness[1][j].trim() &&\n      ((i && j && dp[i][j] == dp[i - 1][j - 1] + 1) ||\n        ((!i || !j) && dp[i][j] == 1))\n    ) {\n      h[0][i] = 0;\n      h[1][j] = 0;\n      --i;\n      --j;\n    } else if (i && dp[i][j] == dp[i - 1][j]) --i;\n    else --j;\n  }\n\n  if (left > 3) {\n    result.push(\"...\\n\");\n  }\n\n  for (let i = Math.max(0, left - 3); i < left; ++i) {\n    result.push(allLiness[0][i] + \"\\n\");\n  }\n\n  let bgColors = [\"#FFD0D0\", \"#D0FFD0\"];\n  let ord1 = 0;\n  let ord2 = 0;\n  while (ord1 < liness[0].length || ord2 < liness[1].length) {\n    if (ord1 < liness[0].length && h[0][ord1]) {\n      result.push([liness[0][ord1] + \"\\n\", bgColors[0]]);\n      ++ord1;\n    } else if (ord2 < liness[1].length && h[1][ord2]) {\n      result.push([liness[1][ord2] + \"\\n\", bgColors[1]]);\n      ++ord2;\n    } else {\n      result.push(liness[1][ord2] + \"\\n\");\n      ++ord1;\n      ++ord2;\n    }\n  }\n\n  for (let i = right - 1; i >= Math.max(right - 3, 0); --i) {\n    result.push(allLiness[0][l1 - i - 1] + \"\\n\");\n  }\n\n  if (right > 3) {\n    result.push(\"...\\n\");\n  }\n\n  return result;\n};\n\nconst isSpecExists = (spec) => spec != \"\" && spec != \"N/A\";\n\nconst styleMessage = (item, index) => {\n  return (\n    <li class=\"styled-message\">\n      <strong>{item.person == USER ? state.currentAccountId : \"AI\"}</strong>:\n      {showMessage && (\n        <div\n          class={`alert alert-${item.person == USER ? \"success\" : \"primary\"}`}\n          role=\"alert\"\n        >\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{item.message}</div>\n        </div>\n      )}\n      {showSpec && !!item.spec && (\n        <div class=\"alert alert-secondary\" role=\"alert\">\n          <h6>SPEC</h6>\n          <Markdown class=\"card h-100\" text={item.spec} />\n        </div>\n      )}\n      {showPrompt && !!item.prompt_message && (\n        <div class=\"alert alert-light\" role=\"alert\">\n          <h6>PROMPT FOR MESSAGE</h6>\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{item.prompt_message}</div>\n        </div>\n      )}\n      {showPrompt && !!item.prompt_spec && (\n        <div class=\"alert alert-light\" role=\"alert\">\n          <h6>PROMPT FOR SPEC</h6>\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{item.prompt_spec}</div>\n        </div>\n      )}\n      {showDiff && getMessageDiff(item, index)}\n    </li>\n  );\n};\n\nif (!getArray(state.chat).length) {\n  return \"No data\";\n}\n\nreturn (\n  <Theme>\n    <ul>{state.chat.map((message, index) => styleMessage(message, index))}</ul>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dev.near/widget/op-admin-task", "fact_widget_deployments_id": "73daf65ec0cc90684bbafa1c9187048a", "inserted_timestamp": "2024-06-03T16:43:44.628Z", "modified_timestamp": "2024-06-03T16:43:44.628Z", "__row_index": 0}