{"tx_hash": "78CY9F2N9rvvUkGrmEuvAEoyWpKQsMovVrn8tU9J5m6Z", "action_id_social": "7X8kpqcFkNsvoZ2Z7WaXzkQ13CkmKEPQZboZ4toSBTmL-0-widget", "block_id": 120496931, "block_timestamp": "2024-06-05T14:03:17.219Z", "signer_id": "dev.near", "widget_name": "Index", "source_code": "const ACCOUNT_ID = \"dev.near\";\nconst API_URL = \"https://annotation.nearspace.info/api\";\nconst PROBLEM_ID = 1;\nconst STATUS_ANNOTATION_PENDING = 0;\nconst SIGNATURE_RECIPIENT = \"ai.near\";\nconst STORAGE_KEY = `session_storage`;\n//const CALLBACK_URL = `https://dev.near.social/${ACCOUNT_ID}/widget/Index`;\n\nconst CSS_URL =\n  \"https://gist.githubusercontent.com/zavodil/10ed1d07c893e04571332f1cb2408226/raw/d65b8f258eb23217c5f58d05248fdb8aab4c5768/add.style.css\";\n\nconst css = fetch(CSS_URL).body;\nif (!css) return \"\";\n\n// TODO - replace `referer` with window.location\nconst referer = fetch(`${API_URL}/get_referer/`, { method: \"POST\" }).body;\nif (!referer) return \"\";\nconst CALLBACK_URL = `${referer}${ACCOUNT_ID}/widget/Index`;\n\nState.init({\n  resetSession: false,\n  pendingAuth: false,\n  pendingRequest: false,\n\n  theme: styled.div`${css}`,\n});\n\nconst Theme = state.theme;\n\nif (!context.accountId) {\n  return (\n    <Theme>\n      <div class=\"row h-100 text-center\">\n        <div class=\"col-sm-12 my-auto\">\n          <h2>AI developer (preview)</h2>\n          <h4>Specification iteration</h4>\n          <div class=\"pt-3\">Sign in to Continue</div>\n        </div>\n      </div>\n    </Theme>\n  );\n}\n\nconst getTask = () => {\n  console.log(\"index get Task\", state.sessionId);\n  State.update({ pendingRequest: true });\n  asyncFetch(`${API_URL}/get_annotation_ids/`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      session_id: state.sessionId,\n      account_id: context.accountId,\n      problem_id: PROBLEM_ID,\n      status: STATUS_ANNOTATION_PENDING,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      if (res.body.is_session_valid) {\n        console.log(\"Index session valid\");\n        State.update({\n          annotations: res.body.annotations ?? [],\n          annotationId:\n            state.annotationId ?? (res.body.annotations ?? [])?.[0]?.id ?? 0,\n          requestTask: (res.body.annotations ?? []).length == 0,\n          isSessionValid: res.body.is_session_valid,\n          pendingRequest: false,\n          refreshUserAnnotations: false,\n        });\n      } else {\n        console.log(\"Session NOT valid\", state);\n\n        State.update({\n          resetSession: !state.resetSession,\n          sessionId: null,\n          isSessionValid: false,\n          pendingRequest: false,\n        });\n      }\n    }\n    console.log(\"get_annotation_ids resp\", res.ok, res.body);\n  });\n};\n\nconst onAuth = (data) => {\n  const isSessionValid = !!data.is_signature_valid && !!data.session_id;\n  console.log(\"onAuth Index\", data, isSessionValid);\n  State.update({\n    sessionId: data.session_id,\n    isSessionValid,\n    resetSession: false,\n    pendingAuth: false,\n  });\n  Storage.privateSet(STORAGE_KEY, data.session_id);\n};\n\nconst hashParams = (window?.location?.hash ?? \"\")\n  .split(\"&\")\n  .reduce((acc, param) => {\n    const [key, value] = param.split(\"=\");\n    if (key) {\n      acc[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n    return acc;\n  }, {});\n\nconst onLogout = () => {\n  Storage.privateSet(STORAGE_KEY, null);\n  State.update({\n    isSessionValid: false,\n    sessionId: null,\n    resetSession: true,\n    pendingRequest: false,\n    pendingAuth: false,\n  });\n};\n\nconst sessionContainer = (\n  <>\n    <Widget\n      src={`${ACCOUNT_ID}/widget/op-session`}\n      props={{\n        storageKey: STORAGE_KEY,\n        message: \"Welcome to NEAR.AI\",\n        recipient: SIGNATURE_RECIPIENT,\n        callbackUrl: CALLBACK_URL,\n        apiUrl: `${API_URL}/auth/`,\n        signature: hashParams?.signature,\n        publicKey: hashParams?.publicKey,\n        onAuth,\n        onLogout,\n        className: \"btn btn-primary p-2\",\n        resetSession: state.resetSession,\n        setResetSession: (resetSession) => {\n          console.log(\"setResetSession\", resetSession);\n          State.update({ resetSession });\n        },\n        pendingAuth: state.pendingAuth,\n        setPendingAuth: (pendingAuth) => {\n          State.update({ pendingAuth });\n        },\n      }}\n    />\n  </>\n);\n\nconst onRequestTask = (data) => {\n  console.log(\"Index onRequestTask\", data);\n  if (data.is_session_valid) {\n    let annotations = state.annotations;\n    console.log(\"annotations\", annotations);\n    annotations.push({ id: data.annotation_id });\n    State.update({\n      isSessionValid: data.is_session_valid,\n      annotationId: data.annotation_id,\n      annotations,\n      requestTask: false,\n    });\n  } else {\n    State.update({\n      resetSession: true,\n      isSessionValid: false,\n      pendingRequest: false,\n    });\n  }\n};\n\nconst onTask = (data) => {\n  console.log(\"Index onTask\", data);\n  if (!data.is_session_valid) {\n    State.update({\n      resetSession: true,\n      isSessionValid: false,\n      pendingRequest: false,\n    });\n  } else {\n    if (data.refreshUserAnnotations) {\n      State.update({ refreshUserAnnotations: true });\n    }\n  }\n};\n\nconst requestTaskContainer = (\n  <Widget\n    src={`${ACCOUNT_ID}/widget/op-create-task`}\n    props={{\n      apiUrl: API_URL,\n      sessionId: state.sessionId,\n      annotations: state.annotations,\n      problemId: PROBLEM_ID,\n      onRequest: onRequestTask,\n      className: \"btn btn-primary p-2\",\n      pendingRequest: state.pendingRequest,\n      setPendingRequest: (pendingRequest) => {\n        State.update({ pendingRequest });\n      },\n    }}\n  />\n);\n\nlet isGetTask = false;\n\nif (!state.pendingRequest && !state.pendingAuth && !state.requestTask) {\n  if (state.sessionId && (!state.annotations || state.refreshUserAnnotations)) {\n    isGetTask = true;\n  }\n}\n\nif (isGetTask) {\n  getTask();\n}\n\nconst showSessionContainer =\n  state.resetSession || (!state.pendingRequest && !state.isSessionValid);\n\nconst showRequestTaskContainer =\n  !showSessionContainer && state.isSessionValid && state.requestTask;\nconst showTaskContainer =\n  !showRequestTaskContainer &&\n  !showSessionContainer &&\n  state.isSessionValid &&\n  (state.annotations ?? []).length > 0;\n\nconst taskContainer = (\n  <Widget\n    src={`${ACCOUNT_ID}/widget/op-task`}\n    props={{\n      sessionId: state.sessionId,\n      apiUrl: API_URL,\n      storageKey: STORAGE_KEY,\n      annotationId: state.annotationId ?? (state.annotations ?? [])?.[0]?.id,\n      problemId: PROBLEM_ID,\n      onRequest: onTask,\n      pendingRequest: state.pendingRequest,\n      setPendingRequest: (pendingRequest) => {\n        State.update({ pendingRequest });\n      },\n    }}\n  />\n);\n\nreturn (\n  <Theme style={{ padding: \"0 20px\", overflowY: \"scroll\" }}>\n    {state.pendingRequest && <Widget src={`${ACCOUNT_ID}/widget/op-loading`} />}\n\n    {showSessionContainer && sessionContainer}\n\n    {!showSessionContainer && (\n      <div class=\"d-flex flex-row\">\n        <div class=\"pe-2\" style={{ width: \"150px\" }}>\n          {!state.requestTask && <h4 style={{ height: \"38px\" }}>Projects</h4>}\n          <ul class=\"list-group\">\n            {(state.annotations ?? []).map((annotation) => {\n              return (\n                annotation.id && (\n                  <li\n                    title={`id: ${annotation.id}`}\n                    role=\"button\"\n                    class={`list-group-item ${\n                      !state.requestTask && state.annotationId == annotation.id\n                        ? \"active\"\n                        : \"\"\n                    }`}\n                    onClick={() => {\n                      State.update({\n                        annotationId: annotation.id,\n                        requestTask: false,\n                      });\n                    }}\n                  >\n                    {annotation.title ?? \"[Untitled]\"}\n                  </li>\n                )\n              );\n            })}\n            {!state.requestTask && (\n              <li\n                class={`list-group-item ${state.requestTask ? \"active\" : \"\"}`}\n                role=\"button\"\n                onClick={() => {\n                  State.update({ requestTask: true });\n                }}\n              >\n                Create New\n              </li>\n            )}\n          </ul>\n        </div>\n        <div class=\"flex-grow-1\">\n          {showRequestTaskContainer && requestTaskContainer}\n          {showTaskContainer && taskContainer}\n        </div>\n      </div>\n    )}\n\n    <div class=\"mt-5 hidden\">\n      {!showSessionContainer && (\n        <div class=\"d-block\">\n          <button disabled={pendingRequest} onClick={() => onLogout()}>\n            {state.isSessionValid\n              ? \"Logout\"\n              : state.pendingAuth\n              ? \"Restart Login\"\n              : \"LogIn\"}\n          </button>\n        </div>\n      )}\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dev.near/widget/Index", "fact_widget_deployments_id": "8ae9634db6aa98b57a0ceefef325cfec", "inserted_timestamp": "2024-06-05T15:07:50.854Z", "modified_timestamp": "2024-06-05T15:07:50.854Z", "__row_index": 5}