{"tx_hash": "dNxarKx1cjEJxonGJsdJi7rX87AfyY1pMTxH3YaSbjs", "action_id_social": "5rAXEEUw4TBoUti9LcvbxfMXnEhGeZJ79Cg9tEVeK6yT-0-widget", "block_id": 101036933, "block_timestamp": "2023-09-13T13:35:23.335Z", "signer_id": "marior.near", "widget_name": "StorageFreeing", "source_code": "const { accountId } = context;\nconst loadingWidget = \"chess-game.near/widget/ChessGameLoading\";\nconst rpcServer = \"https://1rpc.io/near\";\n// const rpcServer = \"https://rpc.mainnet.near.org\";\n\nif (!accountId) return \"Please login\";\n\nconst txs = [...(state?.txs ?? [])];\nlet storageDeposits = [...(state?.storageDeposits ?? [])];\nState.init({\n  txs,\n  page: state?.page ?? 1,\n  doneTxs: state?.doneTxs ?? false,\n  storageDeposits,\n  doneRpc: state?.doneRpc ?? false,\n});\n\nconst Centered = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nif (!state.doneTxs) {\n  asyncFetch(\n    `https://api.nearblocks.io/v1/account/${accountId}/txns?method=storage_deposit&order=desc&page=${state.page}&per_page=25`\n  ).then((res) => {\n    if (\n      !res.ok ||\n      !Array.isArray(res.body?.txns) ||\n      res.body.txns.length === 0\n    ) {\n      State.update({\n        doneTxs: true,\n      });\n      return;\n    }\n    State.update({\n      txs: txs.concat(res.body.txns),\n      page: state.page + 1,\n      doneTxs: state.page > 3,\n    });\n  });\n  return (\n    <Widget\n      src={loadingWidget}\n      props={{\n        content: <div>Loading transactions...</div>,\n      }}\n    />\n  );\n}\n\nif (!state.doneRpc) {\n  const tx = txs.pop();\n  asyncFetch(rpcServer, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"tx\",\n      params: [tx.transaction_hash, tx.predecessor_account_id],\n    }),\n  }).then((res) => {\n    if (!res.ok || !Array.isArray(res.body.result?.transaction?.actions)) {\n      State.update({\n        doneRpc: true,\n      });\n      return;\n    }\n    const storageDeposit = res.body.result.transaction.actions.find(\n      (action) => {\n        const args = action.FunctionCall?.args;\n        if (args == null) return false;\n        const actionArgs = JSON.parse(Buffer.from(args, \"base64\").toString());\n        return actionArgs.receiver_id === accountId;\n      }\n    );\n    if (storageDeposit != null) {\n      storageDeposits.push(tx.receiver_account_id);\n    }\n    const doneRpc = txs.length === 0;\n    if (doneRpc) {\n      storageDeposits = Array.from(new Set(storageDeposits));\n    }\n    State.update({\n      txs: [...txs],\n      storageDeposits: [...storageDeposits],\n      doneRpc,\n    });\n  });\n  return (\n    <Widget\n      src={loadingWidget}\n      props={{\n        content: (\n          <Centered>\n            <div>Scanning transactions...</div>\n            <div>Remaining: {txs.length}</div>\n          </Centered>\n        ),\n      }}\n    />\n  );\n}\n\nconst storageInfo = {};\nfor (const contractId of state.storageDeposits) {\n  try {\n    const storageBalanceOf = Near.view(contractId, \"storage_balance_of\", {\n      account_id: accountId,\n    });\n    const storageBalanceBounds = Near.view(\n      contractId,\n      \"storage_balance_bounds\",\n      {}\n    );\n    if (storageBalanceOf != null && storageBalanceBounds != null) {\n      storageInfo[contractId] = {\n        storageBalanceOf,\n        storageBalanceBounds,\n      };\n    }\n  } catch (err) {}\n}\n\nconsole.log(\"state\", state);\nconsole.log(\"storageInfo\", storageInfo);\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: stretch;\n  max-width: 50rem;\n  margin: 0 auto 2rem;\n`;\n\nconst Header = styled.h1`\n  margin-bottom: 1rem;\n  text-align: center;\n  padding: 3rem;\n  font-weight: 600;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  align-items: stretch;\n`;\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  font-size: 1.1rem;\n  border-radius: 1rem;\n  background-color: #c3e4ee;\n`;\n\nconst CardHeader = styled.h3`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 1rem;\n`;\n\nconst CardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  padding: 0.6rem;\n  align-items: stretch;\n  flex-wrap: wrap;\n  gap: 0.4rem;\n`;\n\nconst storageWithdraw = (contractId) => {\n  Near.call(contractId, \"storage_withdraw\", {}, \"30000000000000\", \"1\");\n};\n\nconst storageUnregister = (contractId) => {\n  Near.call(contractId, \"storage_unregister\", {}, \"30000000000000\", \"1\");\n};\n\nconst renderStorageInfos = (storageInfos) =>\n  Object.entries(storageInfos)\n    .filter(\n      ([_, { storageBalanceBounds, storageBalanceOf }]) =>\n        storageBalanceBounds != null &&\n        storageBalanceOf != null &&\n        !!storageBalanceOf.total &&\n        !!storageBalanceOf.available\n    )\n    .map(([contractId, { storageBalanceBounds, storageBalanceOf }]) => {\n      const total = Big(storageBalanceOf.total).div(Big(10).pow(24)).toFixed(3);\n      const available = Big(storageBalanceOf.available)\n        .div(Big(10).pow(24))\n        .toFixed(3);\n      return (\n        <Card>\n          <CardHeader>{contractId}</CardHeader>\n          <CardContent>\n            <div>Staked: {total}</div>\n            <div>Available: {available}</div>\n            {storageBalanceOf.available && (\n              <button onClick={() => storageWithdraw(contractId)}>\n                Free {available} NEAR\n              </button>\n            )}\n            <button onClick={() => storageWithdraw(contractId)}>\n              Unregister account for {total} NEAR\n            </button>\n          </CardContent>\n        </Card>\n      );\n    });\n\nreturn (\n  <Wrapper>\n    <Header>Free unused NEAR used for storage staking</Header>\n    <Content>{renderStorageInfos(storageInfo)}</Content>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/marior.near/widget/StorageFreeing", "fact_widget_deployments_id": "1b0ef888a5e6aca9f61b09cc89655897", "inserted_timestamp": "2023-09-13T15:32:28.088Z", "modified_timestamp": "2023-09-13T15:32:28.088Z", "__row_index": 1}