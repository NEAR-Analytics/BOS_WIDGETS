{"tx_hash": "FsdsPfk7kxbi4h2SpnutUPgry8RBgRkxR1LnJg4iD39w", "action_id_social": "ASpRgWB7X7StJ1yaY6APrX3BPUeXLKXEpEMhVbVEpM54-0-widget", "block_id": 100690510, "block_timestamp": "2023-09-08T21:52:03.375Z", "signer_id": "marior.near", "widget_name": "NDCElections", "source_code": "const nominationsContractId = \"nominations.ndc-gwg.near\";\nconst electionsContractId = \"elections.ndc-gwg.near\";\nconst loadingWidget = \"chess-game.near/widget/ChessGameLoading\";\nconst waitTime = 25;\nconst waitTimeOnErr = 500;\n\nconst snapshot = false;\n\nconst fetchOptions = {\n  headers: {\n    \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\n  },\n};\n\nlet nominees = [...(state?.nominees ?? [])];\nif (!state.nominees) {\n  let offset = 0;\n  while (true) {\n    const res = fetch(\n      `https://api.pikespeak.ai/nominations/candidates?contract=${nominationsContractId}&offset=${offset}`,\n      fetchOptions\n    );\n    offset += 50;\n    if (!res.ok) {\n      return `Pikespeak API returned error: ${JSON.stringify(res)}`;\n    }\n    console.log(\"res\", res.body);\n\n    if (res.body.length === 0) break;\n    if (snapshot) {\n      nominees = nominees.concat(res.body.slice(0, 10));\n      break;\n    } else {\n      nominees = nominees.concat(res.body);\n      if (res.body.length < 50) break;\n    }\n  }\n}\n\nlet candidates = [...(state?.candidates ?? [])];\nState.init({\n  nominees: [...nominees],\n  candidates: [...candidates],\n  selectedCandidate: null,\n  errCount: state?.errCount ?? 0,\n});\n\nif (nominees.length > 0) {\n  const nominee = nominees.pop();\n\n  asyncFetch(\n    `https://api.pikespeak.ai/election/votes-by-candidate?contract=${electionsContractId}&candidate=${nominee.nominee}`,\n    fetchOptions\n  ).then(({ ok, body }) => {\n    if (!ok) {\n      setTimeout(() => {\n        State.update({\n          errCount: state.errCount + 1,\n        });\n      }, waitTimeOnErr);\n      return;\n    }\n    console.log(\"body\", nominee.nominee, body);\n    if (Array.isArray(body) && body.length > 0) {\n      nominee.voters = body.map(({ voter }) => voter);\n    } else {\n      nominee.voters = [];\n    }\n\n    asyncFetch(\n      `https://api.nearblocks.io/v1/account/${nominee.nominee}/inventory`\n    ).then(({ ok, body }) => {\n      if (!ok) {\n        setTimeout(() => {\n          State.update({\n            errCount: state.errCount + 1,\n          });\n        }, waitTimeOnErr);\n        return;\n      }\n      nominee.inventory = body.inventory;\n\n      candidates.push(nominee);\n\n      setTimeout(() => {\n        State.update({\n          nominees,\n          candidates: [...candidates],\n        });\n      }, waitTime);\n    });\n  });\n\n  return (\n    <Widget\n      src={loadingWidget}\n      props={{\n        content: (\n          <div>\n            Loading data via Pikespeak & Nearblocks API. Remaining:{\" \"}\n            {nominees.length}\n          </div>\n        ),\n      }}\n    />\n  );\n}\n\nconsole.log(\"state\", state);\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: stretch;\n  max-width: 50rem;\n  margin: 0 auto 2rem;\n\n  &::before {    \n    content: \"\";\n    background-image: url(\"https://arweave.net/qOfmpZZNqQ0bHBJ4UTgPC_pjvs1oYOjTAVwfxD8fd2o\");\n    background-attachment: fixed;\n    background-size: contain;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    opacity: 0.6;\n    z-index: -1;\n  }\n`;\n\nconst Header = styled.h1`\n  margin-bottom: 1rem;\n  text-align: center;\n  padding: 3rem;\n  font-weight: 600;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  align-items: stretch;\n`;\n\nconst House = styled.h2`\n  font-weight: 600;\n  margin: 3rem 1rem 0;\n`;\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  font-size: 1.1rem;\n  border-radius: 1rem;\n  background-color: ${({ selected, isWinning }) =>\n    selected\n      ? isWinning\n        ? \"lightblue !important\"\n        : \"#faa !important\"\n      : isWinning\n      ? \"lightgrey\"\n      : \"#fcc\"}};\n  cursor: ${({ selected }) => (selected ? \"unset;\" : \"pointer;\")};\n\n  &:hover {\n    background-color: #d3ecf4;\n  }\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  align-items: center;\n\n  img {\n    border-radius: 0.3rem;\n    width: 4rem;\n    height: 4rem;\n    margin: 0.6rem;\n  }\n\n  h3 {\n    flex: 1 1 auto;\n  }\n\n  svg {\n    width: 3rem;\n    height: 3rem;\n    cursor: pointer;\n    margin-right: 1rem;\n\n    &:hover {\n      color: blue;\n    }\n  }\n\n  &:last-child {\n    flex: 1 1 auto;\n  }\n`;\n\nconst CardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  padding: 0.6rem;\n  align-items: stretch;\n  flex-wrap: wrap;\n  gap: 0.4rem;\n\n  h3 {\n    width: 100%;\n    font-size: 1.4rem;\n    font-weight: 600;\n    text-align: center;\n  }\n`;\n\nconst List = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  padding: 0.4rem 2rem;\n  gap: 0.4rem;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n\n  &:not(:last-child) {\n    border-bottom: 1px dashed darkgrey;\n  }\n\n  > *:not(img) {\n    flex: 1 1 12rem;\n    padding: 0.2rem 0.4rem;\n  }\n\n  img {\n    width: 2rem;\n    height: 2rem;\n  }\n\n  svg {\n    width: 1.4rem;\n    height: 1.4rem;\n  }\n\n  .balance {\n    text-align: right;\n  }\n\n  .symbol {\n    min-width: 5rem;\n    max-width: 5rem;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n`;\n\nconst selectCandidate = (candidateId) => {\n  if (candidateId === state.selectedCandidate) return;\n  State.update({\n    selectedCandidate: candidateId,\n  });\n};\n\nconst renderVoters = (voters) => (\n  <List>\n    {voters.map((voter) => (\n      <Row key={voter}>\n        <img\n          src={`https://i.near.social/magic/thumbnail/https://near.social/magic/img/account/${voter}`}\n          alt={voter}\n        />\n        <div>\n          <a\n            href={`mob.near/widget/ProfilePage?accountId=${voter}`}\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            {voter}{\" \"}\n            <svg viewBox=\"0 0 24 24\">\n              <path\n                fill=\"currentColor\"\n                d=\"M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z\"\n              ></path>\n            </svg>\n          </a>\n        </div>\n      </Row>\n    ))}\n  </List>\n);\n\nconst renderFts = (fts) => (\n  <List>\n    {fts.map((ft) => (\n      <Row key={ft.contract}>\n        <img src={ft.ft_metas.icon} alt={`${ft.ft_metas.symbol} icon`} />\n        <div>{ft.ft_metas.name}</div>\n        <div className=\"balance\">\n          {Big(ft.amount).div(Big(10).pow(ft.ft_metas.decimals)).toFixed(2)}\n        </div>\n        <div className=\"symbol\">{ft.ft_metas.symbol}</div>\n      </Row>\n    ))}\n  </List>\n);\n\nconst renderNfts = (nfts) => (\n  <List>\n    {nfts.map((nft) => (\n      <Row key={nft.contract}>\n        <img src={nft.nft_meta.icon} alt={`${nft.nft_meta.symbol} icon`} />\n        <div>{nft.nft_meta.name}</div>\n        <div className=\"balance\">{nft.quantity}</div>\n        <div className=\"symbol\">{nft.nft_meta.symbol}</div>\n      </Row>\n    ))}\n  </List>\n);\n\nconst renderCandidates = (title, candidates, threshold) => (\n  <>\n    <House>{title}</House>\n    {candidates.map((candidate, index) => {\n      const selected = candidate.nominee === state.selectedCandidate;\n      const isWinning = index < threshold;\n      return (\n        <Card\n          onClick={\n            selected ? undefined : () => selectCandidate(candidate.nominee)\n          }\n          selected={selected}\n          key={candidate.nominee}\n          isWinning={isWinning}\n        >\n          <CardHeader>\n            <img\n              src={`https://i.near.social/magic/thumbnail/https://near.social/magic/img/account/${candidate.nominee}`}\n              alt={candidate.nominee}\n            />\n            <h3>{candidate.nominee}</h3>\n            {selected && (\n              <svg viewBox=\"0 0 24 24\" onClick={() => selectCandidate(null)}>\n                <path\n                  fill=\"currentColor\"\n                  d=\"M4,12H20V14H4V12M4,9H20V11H4V9M16,4L12,8L8,4H11V1H13V4H16M8,19L12,15L16,19H13V22H11V19H8Z\"\n                ></path>\n              </svg>\n            )}\n          </CardHeader>\n          <CardContent>\n            <div>Votes: {candidate.voters.length}</div>\n            {selected && renderVoters(candidate.voters)}\n            <div>Total Fungible Tokens: {candidate.inventory.fts.length}</div>\n            {selected && renderFts(candidate.inventory.fts)}\n            <div>\n              Total Non Fungible Tokens: {candidate.inventory.nfts.length}\n            </div>\n            {selected && renderNfts(candidate.inventory.nfts)}\n          </CardContent>\n        </Card>\n      );\n    })}\n  </>\n);\n\nconst hom = state.candidates.filter(({ house }) => house === \"HouseOfMerit\");\nhom.sort((a, b) => b.voters.length - a.voters.length);\nconst coa = state.candidates.filter(\n  ({ house }) => house === \"CouncilOfAdvisors\"\n);\ncoa.sort((a, b) => b.voters.length - a.voters.length);\nconst tc = state.candidates.filter(\n  ({ house }) => house === \"TransparencyCommission\"\n);\ntc.sort((a, b) => b.voters.length - a.voters.length);\n\nreturn (\n  <Wrapper>\n    <Header>NDC Elections Stats</Header>\n    <Content>{renderCandidates(\"House Of Merit\", hom, 15)}</Content>\n    <Content>{renderCandidates(\"Council Of Advisors\", coa, 7)}</Content>\n    <Content>{renderCandidates(\"Transparency Commission\", tc, 7)}</Content>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/marior.near/widget/NDCElections", "fact_widget_deployments_id": "64e27d373f613dafd892ab8669cb05fd", "inserted_timestamp": "2023-09-08T23:43:33.074Z", "modified_timestamp": "2023-09-08T23:43:33.074Z", "__row_index": 3}