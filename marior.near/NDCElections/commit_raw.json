{"tx_hash": "4cast5CMYTHMXH4UrTfi4ER7neagxybEUYMUx2Lc7Wpv", "action_id_social": "ASgi2BfjXxph8Xo9uosBQmNBEJfSWvYT6uXzYPgVHyZY-0-widget", "block_id": 100757371, "block_timestamp": "2023-09-09T19:39:28.522Z", "signer_id": "marior.near", "widget_name": "NDCElections", "source_code": "const nominationsContractId = \"nominations.ndc-gwg.near\";\nconst electionsContractId = \"elections.ndc-gwg.near\";\nconst cardWidget = \"marior.near/widget/NDCElectionsCard\";\nconst loadingWidget = \"chess-game.near/widget/ChessGameLoading\";\nconst waitTime = 25;\nconst waitTimeOnErr = 500;\n\nconst snapshot = false;\n\nconst fetchOptions = {\n  headers: {\n    \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\n  },\n};\n\nlet nominees = [...(state?.nominees ?? [])];\nif (!state.nominees) {\n  let offset = 0;\n  while (true) {\n    const res = fetch(\n      `https://api.pikespeak.ai/nominations/candidates?contract=${nominationsContractId}&offset=${offset}`,\n      fetchOptions\n    );\n    offset += 50;\n    if (!res.ok) {\n      return `Pikespeak API returned error: ${JSON.stringify(res)}`;\n    }\n    console.log(\"res\", res.body);\n\n    if (res.body.length === 0) break;\n    if (snapshot) {\n      nominees = nominees.concat(res.body.slice(0, 10));\n      break;\n    } else {\n      nominees = nominees.concat(res.body);\n      if (res.body.length < 50) break;\n    }\n  }\n}\n\nlet hom = [...(state?.hom ?? [])];\nlet coa = [...(state?.coa ?? [])];\nlet tc = [...(state?.tc ?? [])];\nState.init({\n  nominees: [...nominees],\n  hom: [...hom],\n  coa: [...coa],\n  tc: [...tc],\n  selectedCandidate: null,\n  errCount: state?.errCount ?? 0,\n});\n\nif (nominees.length > 0) {\n  const nominee = nominees.pop();\n\n  asyncFetch(\n    `https://api.pikespeak.ai/election/votes-by-candidate?contract=${electionsContractId}&candidate=${nominee.nominee}`,\n    fetchOptions\n  ).then(({ ok, body }) => {\n    if (!ok) {\n      setTimeout(() => {\n        State.update({\n          errCount: state.errCount + 1,\n        });\n      }, waitTimeOnErr);\n      return;\n    }\n    console.log(\"body\", nominee.nominee, body);\n    if (Array.isArray(body) && body.length > 0) {\n      nominee.voters = body.map(({ voter }) => voter);\n    } else {\n      nominee.voters = [];\n    }\n\n    asyncFetch(\n      `https://api.nearblocks.io/v1/account/${nominee.nominee}/inventory`\n    ).then(({ ok, body }) => {\n      if (!ok) {\n        setTimeout(() => {\n          State.update({\n            errCount: state.errCount + 1,\n          });\n        }, waitTimeOnErr);\n        return;\n      }\n      nominee.inventory = body.inventory;\n\n      if (nominee.house === \"HouseOfMerit\") {\n        hom.push(nominee);\n        hom.sort((a, b) => b.voters.length - a.voters.length);\n      } else if (nominee.house === \"CouncilOfAdvisors\") {\n        coa.push(nominee);\n        coa.sort((a, b) => b.voters.length - a.voters.length);\n      } else if (nominee.house === \"TransparencyCommission\") {\n        tc.push(nominee);\n        tc.sort((a, b) => b.voters.length - a.voters.length);\n      }\n\n      setTimeout(() => {\n        State.update({\n          nominees,\n          hom: [...hom],\n          coa: [...coa],\n          tc: [...tc],\n        });\n      }, waitTime);\n    });\n  });\n\n  return (\n    <Widget\n      src={loadingWidget}\n      props={{\n        content: (\n          <div>\n            Loading data via Pikespeak & Nearblocks API. Remaining:{\" \"}\n            {nominees.length}\n          </div>\n        ),\n      }}\n    />\n  );\n}\n\nconsole.log(\"state\", state);\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: stretch;\n  max-width: 50rem;\n  margin: 0 auto 2rem;\n\n  &::before {    \n    content: \"\";\n    background-image: url(\"https://arweave.net/qOfmpZZNqQ0bHBJ4UTgPC_pjvs1oYOjTAVwfxD8fd2o\");\n    background-attachment: fixed;\n    background-size: contain;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    opacity: 0.6;\n    z-index: -1;\n  }\n`;\n\nconst Header = styled.h1`\n  margin-bottom: 1rem;\n  text-align: center;\n  padding: 3rem;\n  font-weight: 600;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  align-items: stretch;\n`;\n\nconst House = styled.h2`\n  font-weight: 600;\n  margin: 3rem 1rem 0;\n`;\n\nconst selectCandidate = (candidateId) => {\n  if (candidateId === state.selectedCandidate) return;\n  State.update({\n    selectedCandidate: candidateId,\n  });\n};\n\nconst renderCandidates = (title, candidates, threshold) => (\n  <>\n    <House>{title}</House>\n    {candidates.map((candidate, index) => {\n      const selected = candidate.nominee === state.selectedCandidate;\n      const isWinning = index < threshold;\n      return (\n        <Widget\n          src={cardWidget}\n          props={{\n            candidate,\n            selected,\n            isWinning,\n            selectCandidate,\n          }}\n        />\n      );\n    })}\n  </>\n);\n\nreturn (\n  <Wrapper>\n    <Header>NDC Elections Stats</Header>\n    <Content>{renderCandidates(\"House Of Merit\", hom, 15)}</Content>\n    <Content>{renderCandidates(\"Council Of Advisors\", coa, 7)}</Content>\n    <Content>{renderCandidates(\"Transparency Commission\", tc, 7)}</Content>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/marior.near/widget/NDCElections", "fact_widget_deployments_id": "7fa7167c5521912f3c0b929b856083c1", "inserted_timestamp": "2023-09-09T21:35:14.448Z", "modified_timestamp": "2023-09-09T21:35:14.448Z", "__row_index": 5}