{"tx_hash": "B8L3XEymvrxj6z7DrpJSBHVZwnBVABpNzzXhzGfZepJM", "action_id_social": "8g6fQuVMot9WzvgP9r1zEbY3dWYGWVHkbLeCz1gBmK4m-0-widget", "block_id": 101780144, "block_timestamp": "2023-09-23T14:40:52.550Z", "signer_id": "weige.near", "widget_name": "get-balance", "source_code": "const { onLoad, sender, inputToken, config } = props;\n\nconst chains = config.chains;\n\nconst address =\n  props.chainId === chains.l1.id ? inputToken.addressL1 : inputToken.addressL2;\n\nconst Erc20Abi = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst parseBalance = (rawBalance) => {\n  return Big(rawBalance).div(Big(10).pow(inputToken.decimals)).toFixed();\n};\n\nconst getErc20Balance = () => {\n  const Interface = new ethers.utils.Interface(Erc20Abi);\n  return Ethers.provider()\n    .call({\n      to: address,\n      data: Interface.encodeFunctionData(\"balanceOf\", [sender]),\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = Interface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n      onLoad({ balance: parseBalance(receiverBalanceHex.toString()) });\n    });\n};\n\nconst getNativeBalance = () => {\n  const provider = Ethers.provider();\n  provider.getBalance(sender).then((res) => {\n    onLoad({\n      balance: parseBalance(res.toString()),\n    });\n  });\n};\n\nif (inputToken.symbol == \"ETH\") {\n  getNativeBalance();\n} else {\n  getErc20Balance();\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/weige.near/widget/get-balance", "fact_widget_deployments_id": "ef09164871a8096f95ec11daf408bd27", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}