{"tx_hash": "B8L3XEymvrxj6z7DrpJSBHVZwnBVABpNzzXhzGfZepJM", "action_id_social": "8g6fQuVMot9WzvgP9r1zEbY3dWYGWVHkbLeCz1gBmK4m-0-widget", "block_id": 101780144, "block_timestamp": "2023-09-23T14:40:52.550Z", "signer_id": "weige.near", "widget_name": "transfer-action", "source_code": "const { sender, amount, inputToken, actionOn, cb, config, chainId } = props;\n\nconst fromL2toL1 = chainId === config.chains.l2.id;\n\nconst fromL1toL2 = chainId === config.chains.l1.id;\n\nconst l2NodeUrl = \"https://arb1.arbitrum.io/rpc\";\n\nconst l1NodeUrl = \"https://rpc.ankr.com/eth\";\n\nconst l2Provider = new ethers.providers.JsonRpcProvider(l2NodeUrl);\n\nconst l1Provider = new ethers.providers.JsonRpcProvider(l1NodeUrl);\n\nl2Provider.getGasPrice().then((res) => {\n  State.update({ gasPrice: res.toString() });\n});\n\nif (!actionOn) {\n  State.update({\n    actionOn: false,\n  });\n\n  return \"\";\n}\n\nconst successCb = ({ from, to, type, amount, symbol, tx }) => {\n  const currenList = Storage.get(\"arb-bridge-pending-list-withdraw\") || [];\n\n  const newList = [\n    ...currenList,\n    {\n      from,\n      to,\n      type,\n      amount,\n      symbol,\n      tx,\n    },\n  ];\n\n  Storage.set(\"arb-bridge-pending-list-withdraw\", newList);\n};\n\nconst l2BridgeRouterAddress = config.bridges.l2GatewayRouter;\n\nconst l2BridgeAddressAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l1Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"outboundTransfer\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst l1BridgeRouterAddress = config.bridges.l1GatewayRouter;\n\nconst l1BridgeAddressAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_maxGas\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_gasPriceBid\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"outboundTransfer\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst depositETHAbi = [\n  {\n    inputs: [],\n    name: \"depositEth\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst withdrawETHAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"destination\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawEth\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst signer = Ethers.provider().getSigner();\n\nconst options = {\n  gasLimit: 300000,\n};\n\nconst rawAmount = Big(amount)\n  .times(Big(10).pow(inputToken.decimals))\n  .toFixed(0);\n\nconst handleWithdraw = () => {\n  const L2BridgeContract = new ethers.Contract(\n    l2BridgeRouterAddress,\n    l2BridgeAddressAbi,\n    signer\n  );\n\n  return L2BridgeContract[\"outboundTransfer(address,address,uint256,bytes)\"](\n    inputToken.addressL1,\n    sender,\n    Big(amount).times(Big(10).pow(inputToken.decimals)).toFixed(0),\n    \"0x\"\n  )\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      if (status === 1) {\n        successCb({\n          from: config.chains.l2.name,\n          to: config.chains.l1.name,\n          amount: amount,\n          symbol: inputToken.symbol,\n          type: \"Withdraw\",\n          tx: transactionHash,\n        });\n      }\n    })\n    .finally(() => cb());\n};\n\nconst handleWithdrawETH = () => {\n  const withdrawETHContract = new ethers.Contract(\n    config.ethBridges.arb_sys,\n    withdrawETHAbi,\n    signer\n  );\n\n  return withdrawETHContract\n    .withdrawEth(sender, {\n      ...options,\n      value: rawAmount,\n    })\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      if (status === 1) {\n        successCb({\n          from: config.chains.l2.name,\n          to: config.chains.l1.name,\n          amount: amount,\n          symbol: inputToken.symbol,\n          type: \"Withdraw\",\n          tx: transactionHash,\n        });\n      }\n    })\n    .finally(() => cb());\n};\n\nconst handleDepositETH = () => {\n  const depositETHContract = new ethers.Contract(\n    config.ethBridges.inbox,\n    depositETHAbi,\n    signer\n  );\n\n  return depositETHContract\n    .depositEth({\n      ...options,\n      value: rawAmount,\n    })\n    .finally(() => cb());\n};\n\nconst estimatesMaxSubmissionCost = (callData) => {\n  const inboxAddress = config.ethBridges.inbox;\n  const abi = [\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"dataLength\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"baseFee\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"calculateRetryableSubmissionFee\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ];\n  const contract = new ethers.Contract(inboxAddress, abi, l1Provider);\n\n  const dataSize = ethers.utils.hexDataLength(callData);\n\n  return l1Provider\n    .getBlock(\"latest\")\n    .then((block) => {\n      const baseFeePerGas = block.baseFeePerGas;\n      return contract.calculateRetryableSubmissionFee(\n        dataSize,\n        baseFeePerGas.toString()\n      );\n    })\n    .then((fee) => {\n      const maxSubmissionCost = fee.toString();\n      return maxSubmissionCost;\n    });\n};\n\nconst handleDeposit = () => {\n  const iface = new ethers.utils.Interface(l1BridgeAddressAbi);\n\n  const L1BridgeContract = new ethers.Contract(\n    l1BridgeRouterAddress,\n    l1BridgeAddressAbi,\n    signer\n  );\n\n  const _token = inputToken.addressL1;\n\n  const _to = sender;\n\n  const _amount = rawAmount;\n\n  const _maxGas = 2500000;\n\n  const _gasPriceBid = Big(state.gasPrice).times(Big(1.05)).toFixed(0);\n\n  const _data = ethers.utils.defaultAbiCoder.encode(\n    [\"uint256\", \"bytes\"],\n    [1, \"0x\"]\n  );\n\n  const callData = iface.encodeFunctionData(\"outboundTransfer\", [\n    _token,\n    _to,\n    _amount,\n    _maxGas,\n    _gasPriceBid,\n    _data,\n  ]);\n\n  estimatesMaxSubmissionCost(callData).then((maxSubmissionCost) => {\n    const _data = ethers.utils.defaultAbiCoder.encode(\n      [\"uint256\", \"bytes\"],\n      [maxSubmissionCost, \"0x\"]\n    );\n    return L1BridgeContract.outboundTransfer(\n      _token,\n      _to,\n      _amount,\n      _maxGas,\n      _gasPriceBid,\n      _data,\n      {\n        ...options,\n        value: Big(_maxGas)\n          .times(_gasPriceBid)\n          .plus(Big(maxSubmissionCost).times(1.05).toFixed(0))\n          .toFixed(0),\n      }\n    ).finally(() => cb());\n  });\n};\n\nif (state.actionOn === actionOn || !state.gasPrice) {\n  return \"\";\n} else {\n  State.update({\n    actionOn,\n  });\n\n  if (fromL2toL1) {\n    if (inputToken.addressL2 === config.eth.addressL2) {\n      handleWithdrawETH();\n    } else {\n      handleWithdraw();\n    }\n  }\n\n  if (fromL1toL2) {\n    if (inputToken.addressL1 === config.eth.addressL1) {\n      handleDepositETH();\n    } else {\n      handleDeposit();\n    }\n  }\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/weige.near/widget/transfer-action", "fact_widget_deployments_id": "4e323ddae26c8e9fac2c9211c7acbce9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}