{"tx_hash": "2TzzSydum79biLr3CXCKqm2b7q7ZJoMKWUyJREKYMToh", "action_id_social": "56sxYhMmTQdqsM5WEfiMUWopxDMdMQx5Lmh7F2TC2FQu-0-widget", "block_id": 99884088, "block_timestamp": "2023-08-28T22:46:32.453Z", "signer_id": "1386e29ec7f4c7f33a83b268feadc5307d2136b197de0f2823cbb729c23549ef", "widget_name": "stack-chart", "source_code": "const themeColor = props.themeColor;\nconst theme = themeColor?.chart\n  ? {\n      title: {\n        style: {\n          color: themeColor.chart?.title,\n        },\n      },\n      subtitle: {\n        style: {\n          color: themeColor.chart?.subtitle,\n        },\n      },\n      xAxis: { labels: { style: { color: themeColor.chart?.xAxis } } },\n      yAxis: { labels: { style: { color: themeColor.chart?.yAxis } } },\n\n      legend: {\n        itemStyle: {\n          color: themeColor.chart?.legend,\n        },\n        itemHoverStyle: {\n          color: themeColor.chart?.legendHover,\n        },\n      },\n      rangeSelector: {\n        buttonTheme: {\n          fill: themeColor?.chart?.rangeSelector?.btn_bg,\n\n          style: {\n            color: themeColor?.chart?.rangeSelector?.btn_color,\n          },\n          states: {\n            hover: {\n              fill: themeColor?.chart?.rangeSelector?.btn_hover_bg,\n              style: {\n                color: themeColor?.chart?.rangeSelector?.btn_hover_color,\n              },\n            },\n            select: {\n              fill: themeColor?.chart?.rangeSelector?.btn_active_bg,\n              style: {\n                color: themeColor?.chart?.rangeSelector?.btn_active_color,\n              },\n            },\n          },\n        },\n\n        inputStyle: {\n          color: themeColor?.chart?.rangeSelector?.inputColor,\n        },\n        labelStyle: {\n          color: themeColor?.chart?.rangeSelector?.labels,\n        },\n      },\n    }\n  : {};\n\nif (!props.data && !props.charts) return \"charts and data props are required.\";\nconst data = props.data ?? [];\nconst charts = props.charts ?? [];\nlet colors = props.colors ?? [\n  \"#A084E8\",\n  \"#6F61C0\",\n  \"#241468\",\n  \"#9F0D7F\",\n  \"#EA1179\",\n  \"#F79BD3\",\n];\nconst overrideOptions = props.overrideOptions || {};\nconst extraButtons = props.extraButtons || {};\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\n  color1: props?.spinnerColors[0],\n  color2: props?.spinnerColors[1],\n};\nconst other_colors = [\n  \"#1f77b4\",\n  \"#ff7f0e\",\n  \"#2ca02c\",\n  \"#d62728\",\n  \"#9467bd\",\n  \"#8c564b\",\n  \"#e377c2\",\n  \"#7f7f7f\",\n  \"#bcbd22\",\n  \"#17becf\",\n];\nif (series.length > colors.length) {\n  for (let i = colors.length; i < series.length; i++) {\n    colors.push(other_colors[i % other_colors.length]);\n  }\n}\nconst Container = styled.div`\n  .tabContent{\n    display:inline-flex;\n    align-items:center;\n    background: rgba(26, 46, 51, 0.25);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n    padding:3px 4px;\n    list-style-type:none;\n  }\n  .tab-item .active{\n    background: #304352;\n  }\n  .tab-item button{\n    background-color:transparent;\n    border-radius: 8px;\n    font-weight: 500;\n    font-size: 14px;\n    color:#fff;\n    height:30px;\n    padding:0 22px;\n    border:none;\n    width:max-content;\n  }\n\n`;\nconst chartOption = () => {\n  const chart = charts[state.selectedChart - 1];\n  const seriesData = data.reduce(\n    (t, row) => {\n      t[0].data.push([row[chart.dateKey] * 1000, row[chart.oppKey]]);\n      t[1].data.push([row[chart.dateKey] * 1000, row[chart.negKey]]);\n      return t;\n    },\n    [{ data: [] }, { data: [] }]\n  );\n\n  seriesData[0].name = chart.oppTitle;\n  seriesData[1].name = chart.negTitle;\n  seriesData[0].type = chart.type;\n  seriesData[1].type = chart.type;\n  const type = chart.type;\n  const title = chart.title;\n  const subtitle = chart.subtitle;\n  return { seriesData, title, subtitle, yAxis: 1, type };\n};\n5;\nState.init({\n  tab: charts?.[0].title,\n  isLoading: true,\n  selectedChart: \"1\",\n});\n\nconst code = `\n<html>\n  <head>\n    <script\n      type=\"text/javascript\"\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"\n    ></script>\n    <script src=\"https://code.highcharts.com/stock/highstock.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\n  </head>\n  <body>\n    <div id=\"container\"></div>\n  </body> \n  <script>\n  \nwindow.addEventListener(\"message\", function (event) {}, false);\n\nconst handleMessage = (message) => {\n  const { colors, chartOption, overrideOptions, theme } = message;\n    Highcharts.setOptions(theme);\n  const chart = Highcharts.stockChart(\"container\", {\n    chart: {\n      backgroundColor:\"rgb(0,0,0,0)\",\n      zooming: {\n          mouseWheel: false,\n        },\n    },\n    colors: colors,\n    navigator: {\n      enabled: false,\n    },\n    title: {\n      text: chartOption.title,\n      align: \"left\",\n    },\n    subtitle: {\n      text: chartOption.subtitle,\n      align: \"left\",\n    },\n    plotOptions: {\n      column: {\n        stacking: \"normal\",\n      },\n    },\n    yAxis: chartOption.yAxis,\n    xAxis: {\n      type: \"datetime\",\n    },\n    rangeSelector: {\n\n      buttons: [\n        {\n          type: \"day\",\n          count: 2,\n          text: \"1d\",\n        },\n        {\n          type: \"week\",\n          count: 1,\n          text: \"1w\",\n        },\n        {\n          type: \"month\",\n          count: 1,\n          text: \"1m\",\n        },\n        {\n          type: \"all\",\n          count: 1,\n          text: \"All\",\n        },\n      ],\n      selected: 3,\n      inputEnabled: true,\n    },\n    lang: {\n      noData: \"no data to display\",\n    },\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n      },\n    },\n    series: chartOption.seriesData,\n    ...overrideOptions\n  });\n\n  window.iFrameResizer.onMessage = () => {};\n};\n\nwindow.iFrameResizer = {\n  onMessage: handleMessage,\n};\n  </script>\n</html>\n`;\nreturn (\n  <div\n    className=\"w-100\"\n    style={{\n      minHeight: \"300px\",\n      minWidth: \"300px\",\n    }}\n  >\n    <div className=\"d-flex justify-content-center align-items-center\">\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\n        <Widget\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n          props={{ ...spinnerColors }}\n        />\n      </div>\n      <iframe\n        iframeResizer\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\n        srcDoc={code}\n        message={{\n          colors,\n          chartOption: chartOption(),\n          overrideOptions,\n          theme,\n        }}\n        onLoad={() => {\n          State.update({\n            isLoading: false,\n          });\n        }}\n      />\n    </div>\n    <div\n      className={`w-100 justify-content-center ${\n        state.isLoading ? \"d-none\" : \"d-flex\"\n      }`}\n    >\n      <Container>\n        <ul className=\"tabContent\">\n          {charts.map((op, i) => (\n            <li key={i} className=\"tab-item\">\n              <button\n                className={`${state.tab === op.title ? \"active\" : \"\"}`}\n                aria-current=\"page\"\n                onClick={() =>\n                  State.update({ tab: op.title, selectedChart: i + 1 })\n                }\n              >\n                {op.title}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </Container>\n    </div>\n  </div>\n);\n// const props = {\n//   data: [\n//     {\n//       week: 1604188800,\n//       opposite1: 2,\n//       opposite2: 8,\n//       negative1: -6,\n//       negative2: -2,\n//       .\n//       .\n//     },\n//   ],\n//   charts: [\n//     {\n//       title: \"title\",\n//       subtitle: \"sub\",\n//       dateKey: \"week\", // the key of date in data obj\n//       oppKey: \"opposite1\", // opposite key\n//       negKey: \"negative1\", //negative key\n//       oppTitle: \"opposite\",\n//       negTitle: \"negative\",\n//       type: \"area\", // chart type\n//     },\n//   ],\n\n//   colors: [\"yellow\", \"brown\"], // optional\n//   spinnerColors: [\"yellow\", \"brown\"], // optional , two colors\n//   overrideOptions: {}, //opt to over ride chart options\n//   themeColor: {\n//     chart: {\n//       title: \"red\",\n//       subtitle: \"blue\",\n//       xAxis: \"red\",\n//       yAxis: \"blue\",\n//       legend: \"green\",\n//       legendHover: \"blue\",\n//       rangeSelector: {\n//         labels: \"red\",\n//         inputColor: \"blue\",\n//         btn_bg: \"red\",\n//         btn_color: \"blue\",\n//         btn_hover_bg: \"red\",\n//         btn_hover_color: \"blue\",\n//         btn_active_bg: \"red\",\n//         btn_active_color: \"blue\",\n//       },\n//     },\n//   },\n// };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/1386e29ec7f4c7f33a83b268feadc5307d2136b197de0f2823cbb729c23549ef/widget/stack-chart", "fact_widget_deployments_id": "d3d05dca51c8bbe4c67265abe86b1d8a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}