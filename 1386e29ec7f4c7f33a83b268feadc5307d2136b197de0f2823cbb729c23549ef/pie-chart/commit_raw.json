{"tx_hash": "BRvyYRsbBYHJJ8pXHBPkuUL37yGXKdhWNnEDq53vn6CU", "action_id_social": "UX36Fb2U3djXtTk2xNRk9PwKZmqgGgcprjcWV9mgdYY-0-widget", "block_id": 99884001, "block_timestamp": "2023-08-28T22:44:59.137Z", "signer_id": "1386e29ec7f4c7f33a83b268feadc5307d2136b197de0f2823cbb729c23549ef", "widget_name": "pie-chart", "source_code": "const themeColor = props.themeColor;\nconst theme = themeColor?.chart\n  ? {\n      title: {\n        style: {\n          color: themeColor.chart?.title,\n        },\n      },\n      subtitle: {\n        style: {\n          color: themeColor.chart?.subtitle,\n        },\n      },\n      xAxis: { labels: { style: { color: themeColor.chart?.xAxis } } },\n      yAxis: { labels: { style: { color: themeColor.chart?.yAxis } } },\n\n      legend: {\n        itemStyle: {\n          color: themeColor.chart?.legend,\n        },\n        itemHoverStyle: {\n          color: themeColor.chart?.legendHover,\n        },\n      },\n    }\n  : {};\nconst data = props.data ?? [];\nlet colors = props.colors ?? [\n  \"#A084E8\",\n  \"#6F61C0\",\n  \"#241468\",\n  \"#9F0D7F\",\n  \"#EA1179\",\n  \"#F79BD3\",\n];\nconst chartOption = {\n  title: \"chart title\",\n  type: \"pie\",\n  legend: false,\n  connector: true,\n  ...props.chartOption,\n};\nconst overrideOptions = props.overrideOptions || {};\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\n  color1: props?.spinnerColors[0],\n  color2: props?.spinnerColors[1],\n};\nconst other_colors = [\n  \"#1f77b4\",\n  \"#ff7f0e\",\n  \"#2ca02c\",\n  \"#d62728\",\n  \"#9467bd\",\n  \"#8c564b\",\n  \"#e377c2\",\n  \"#7f7f7f\",\n  \"#bcbd22\",\n  \"#17becf\",\n];\nif (data.length > colors.length) {\n  for (let i = colors.length; i < data.length; i++) {\n    colors.push(other_colors[i % other_colors.length]);\n  }\n}\nif (data.length > colors.length) {\n  for (let i = colors.length; i < data.length; i++) {\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n  }\n}\nState.init({\n  isLoading: true,\n});\n\nconst code = `\n<html>\n  <head>\n    <script\n      type=\"text/javascript\"\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"\n    ></script>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n   <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\n  </head>\n  <body>\n  <div id=\"container\">\n  </div>\n  <script>\nwindow.addEventListener(\"message\", function (event) {}, false);\n\nconst formatNumber = (num) => {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"b\";\n  }\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"m\";\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"k\";\n  }\n  return num;\n};\n\nconst handleMessage = (message) => {\n  const { data, colors, chartOption, overrideOptions, theme } = message;\n  const total = data.reduce((t, i) => {\n    return t + i[1];\n  }, 0);\n  const totalFormated = formatNumber(total);\n  const titleText = chartOption.title;\n  const chartType = chartOption.type;\n  const hasConnector = chartOption.connector;\n  const hasLegend = chartOption.legend;\n  let subtitleText;\n  if (data.length > 0) {\n    subtitleText =\n      chartType === \"donut\"\n        ? \"Total</br>\" + totalFormated\n        : \"Total : \" + totalFormated;\n  } else {\n    subtitleText = \"\";\n  }\n\n  const subtitleOption =\n    chartType === \"donut\"\n      ? {\n          style: {\n            fontSize: \"1.2rem\",\n            padding: \"15px 0\",\n            textAlign: \"center\",\n            fontWeight: \"bold\",\n          },\n          y: 20,\n          verticalAlign: \"middle\",\n        }\n      : {\n          style: {\n            fontSize: \"1.2rem\",\n            padding: \"15px 0\",\n          },\n        };\n\n    Highcharts.theme=theme;\n    Highcharts.setOptions( Highcharts.theme);\n  const chart = Highcharts.chart(\"container\", {\n    colors,\n    chart: {\n      type: \"pie\",\n      backgroundColor: \"transparent\"\n    },\n\n    title: {\n      text: titleText,\n      style: {\n        fontSize: \"1.5rem\",\n        padding: \"1rem 0\",\n      },\n    },\n    subtitle: {\n      text: subtitleText,\n      useHTML: true,\n      ...subtitleOption,\n    },\n    tooltip: {\n      useHTML: true,\n      outside: true,\n      formatter: function () {\n        const percent = (this.y / total) * 100;\n        const formatedValue = formatNumber(this.y);\n        const text =\n          chartType === \"donut\"\n            ? this.key + \" <br/> \" + formatedValue\n            : this.key + \" : \" + formatedValue;\n        this.series.chart.setTitle(null, { text: text });\n        const tooltipText =\n          '<span style=\"font-size:14px\">' +\n          this.key +\n          \" : \" +\n          formatedValue +\n          '</span><br><span style=\"font-size: 12px\">percent: <b> ' +\n          percent.toFixed(2) +\n          \"</b> %</span>\";\n\n        return tooltipText;\n      },\n    },\n    lang: {\n      noData: \"no data to display\",\n    },\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n      },\n    },\n    legend: {\n      float: true,\n      maxHeight: 50,\n    },\n    plotOptions: {\n      series: {\n        dataLabels: {\n          enabled: true,\n          distance: hasConnector ? 20 : -30,\n          connectorWidth: hasConnector ? 1 : 0,\n        },\n      },\n      pie: {\n        showInLegend: hasLegend,\n        innerSize: chartType === \"donut\" ? \"65%\" : \"\",\n        events: {\n          mouseOut: function () {\n            this.chart.setTitle(null, { text: subtitleText });\n          },\n        },\n      },\n    },\n    series: [\n      {\n        data,\n      },\n    ],\n    ...overrideOptions\n  });\n  window.iFrameResizer.onMessage = () => {};\n};\n\nwindow.iFrameResizer = {\n  onMessage: handleMessage,\n};\n</script>\n</html>\n`;\n\nreturn (\n  <div\n    className=\"w-100 d-flex justify-content-center align-items-center\"\n    style={{\n      minHeight: \"300px\",\n      minWidth: \"300px\",\n    }}\n  >\n    <>\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\n        <Widget\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n          props={{\n            ...spinnerColors,\n          }}\n        />\n      </div>\n      <iframe\n        iframeResizer\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\n        srcDoc={code}\n        message={{\n          data,\n          colors,\n          chartOption,\n          overrideOptions,\n          theme,\n        }}\n        onLoad={() => {\n          State.update({\n            isLoading: false,\n          });\n        }}\n      />\n    </>\n  </div>\n);\n\n//  props = {\n//   data: [\n//     [\"value1\", 1],\n//     [\"value2\", 2],\n//   ],\n//   colors: [\"blue\", \"red\"], //optional : tow colors\n//   chartOption: {\n//     title: \"chart title\",\n//     type: \"pie or donut\",\n//     legend: false,\n//     connector: false,\n//   },\n//   spinnerColors: [], //optional : tow colors\n//   overrideOptions:{} // opt\n//   themeColor: {\n//     chart: { //optional\n//       title: \"red\",\n//       subtitle: \"blue\",\n//       xAxis: \"red\",\n//       yAxis: \"blue\",\n//       legend: \"green\",\n//       legendHover: \"blue\",\n//       rangeSelector: {\n//         labels: \"red\",\n//         inputColor: \"blue\",\n//         btn_bg: \"red\",\n//         btn_color: \"blue\",\n//         btn_hover_bg: \"red\",\n//         btn_hover_color: \"blue\",\n//         btn_active_bg: \"red\",\n//         btn_active_color: \"blue\",\n//       },\n//     },\n//   },\n// };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/1386e29ec7f4c7f33a83b268feadc5307d2136b197de0f2823cbb729c23549ef/widget/pie-chart", "fact_widget_deployments_id": "8c4d059d46bcea6091a1c853777c9447", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}