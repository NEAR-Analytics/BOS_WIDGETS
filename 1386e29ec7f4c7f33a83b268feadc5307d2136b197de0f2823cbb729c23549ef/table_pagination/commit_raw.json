{"tx_hash": "3HpgqQM1gsVYfk1nxdCZvEM4a5zWmnSQ32SyVSi2A2Gr", "action_id_social": "6K6gbDwAa6D1gdpQ74ADZ4QQUR4WpYJM5QrKcuwr15cP-0-widget", "block_id": 99884118, "block_timestamp": "2023-08-28T22:47:05.363Z", "signer_id": "1386e29ec7f4c7f33a83b268feadc5307d2136b197de0f2823cbb729c23549ef", "widget_name": "table_pagination", "source_code": "if (!props.data || !props.columns) {\n  return \"column and data props are required.\";\n}\nState.init({ currentPage: 1 });\nconst data = props.data || [];\nconst rowsCount = props.rowsCount || null;\nconst themeColor = props.themeColor;\n\nconst handlePagination = () => {\n  if (!rowsCount) return { table: data };\n  const currentPage = state.currentPage;\n  const totalPages = Math.ceil(data.length / rowsCount);\n  const currentTableData = data.slice(\n    (currentPage - 1) * rowsCount,\n    rowsCount * currentPage\n  );\n  const buttons = Array(totalPages).fill(0);\n  buttons[currentPage - 1] = 1;\n  return { buttons, table: currentTableData };\n};\nconst Table = styled.table`\n  --bs-table-color: ${themeColor?.table_pagination?.table_color};\n  --bs-table-bg: ${themeColor?.table_pagination?.table_bg};\n  --bs-table-border-color: ${themeColor?.table_pagination?.table_border_color};\n  --bs-table-accent-bg: ${themeColor?.table_pagination?.table_accent_bg};\n  --bs-table-striped-color: ${themeColor?.table_pagination?.table_striped_color};\n  --bs-table-striped-bg: ${themeColor?.table_pagination?.table_striped_bg};\n  --bs-table-hover-color: ${themeColor?.table_pagination?.table_hover_color};\n  --bs-table-hover-bg:${themeColor?.table_pagination?.table_hover_bg}\n`;\nreturn (\n  <div className=\"table-responsive\">\n    <Table\n      className={`table table-hover table-striped table-borderless ${props.className}`}\n    >\n      <thead>\n        <tr>\n          {props.columns.map((th) => (\n            <th key={th.title} className=\"col-1\" scope=\"col\">\n              {th.title}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.length > 0 &&\n          handlePagination().table.map((row, i) => {\n            return (\n              <tr key={row.project}>\n                {props.columns.map((td) => {\n                  const key = td.key ? row[td.key] : i + 1;\n                  return <td>{key}</td>;\n                })}\n              </tr>\n            );\n          })}\n      </tbody>\n    </Table>\n    {!props.rowsCount ? (\n      \"\"\n    ) : (\n      <div className=\"py-4\">\n        <div>\n          <ul className=\"pagination pagination-sm gap-2 justify-content-center\">\n            {props.data.length > 0 &&\n              handlePagination().buttons.map((btn, i) => {\n                return (\n                  <li key={i} className=\"page-item\">\n                    <button\n                      onClick={() => State.update({ currentPage: i + 1 })}\n                      className=\"page-link btn\"\n                      style={{\n                        borderColor:\n                          themeColor?.table_pagination?.btn_border ?? \"#000\",\n                        color:\n                          themeColor?.table_pagination?.btn_color ?? \"#000\",\n                        backgroundColor: btn\n                          ? themeColor?.table_pagination?.btn_bg_active ??\n                            \"gray\"\n                          : themeColor?.table_pagination?.btn_bg ??\n                            \"transparent\",\n                      }}\n                    >\n                      {i + 1}\n                    </button>\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      </div>\n    )}\n  </div>\n);\n\n// const props = {\n//   data: [],\n//   columns: [\n//     { title: \"id\" }, //if key does not provided , rows will be ascending numbers\n//     { title: \"title\", key: \"key in data\" },\n//   ],\n//   rowsCount: 2, // if zero or null , the whole table will be render\n//   className: \"table-bordered\",\n//   themeColor: {\n//     table_pagination: {\n//       table_bg: \"rgb(25,33,50)\",\n//       table_color: \"rgb(255,255,255)\",\n//       table_border_color: \"\",\n//       table_accent_bg: \"\",\n//       table_striped_color: \"rgb(255,255,255)\",\n//       table_striped_bg: \"\",\n//       table_hover_color: \"rgb(255,255,255)\",\n//       table_hover_bg: \"\",\n//       btn_border: \"#fff\",\n//       btn_bg: \"rgba(49, 62, 89,0.5)\",\n//       btn_bg_active: \"rgb(25,33,50)\",\n//       btn_color: \"#fff\",\n//     },\n//   },\n// };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/1386e29ec7f4c7f33a83b268feadc5307d2136b197de0f2823cbb729c23549ef/widget/table_pagination", "fact_widget_deployments_id": "39f19ae8c84b74bfcf4fa19e8c506d3d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}