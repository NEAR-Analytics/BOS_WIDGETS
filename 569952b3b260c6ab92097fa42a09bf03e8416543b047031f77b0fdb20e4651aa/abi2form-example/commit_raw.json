{"tx_hash": "8ti6JCpkNztsFC1uxgLRkY32pZHMqX5HguvLersEn68a", "action_id_social": "6TZXe8UoLEcUk5iPJ49G69PjQSGA7VJEyGM7XnfNq3vt-0-widget", "block_id": 101940513, "block_timestamp": "2023-09-25T18:13:47.880Z", "signer_id": "569952b3b260c6ab92097fa42a09bf03e8416543b047031f77b0fdb20e4651aa", "widget_name": "abi2form-example", "source_code": null, "metadata": null, "branch": {"draft": {"": "State.init({\n  contractAddress: \"trustcore.near\",\n  contractAbi: {\n    schema_version: \"0.3.0\",\n    metadata: {\n      name: \"hello_near\",\n      version: \"1.0.0\",\n      authors: [],\n      build: {\n        compiler: \"tsc 4.7.4\",\n        builder: \"near-sdk-js 1.0.0\",\n      },\n    },\n    body: {\n      functions: [\n        {\n          name: \"getUrl\",\n          kind: \"view\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"name\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n          result: {\n            serialization_type: \"json\",\n            type_schema: {\n              type: \"string\",\n            },\n          },\n        },\n        {\n          name: \"didParticipate\",\n          kind: \"view\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"user\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n          result: {\n            serialization_type: \"json\",\n            type_schema: {\n              type: \"boolean\",\n            },\n          },\n        },\n        {\n          name: \"participateArray\",\n          kind: \"view\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n          result: {\n            serialization_type: \"json\",\n            type_schema: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n              },\n            },\n          },\n        },\n        {\n          name: \"getAllPrompts\",\n          kind: \"view\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [],\n          },\n          result: {\n            serialization_type: \"json\",\n            type_schema: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n              },\n            },\n          },\n        },\n        {\n          name: \"getVotes\",\n          kind: \"view\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n          result: {\n            serialization_type: \"json\",\n            type_schema: {\n              type: \"array\",\n              items: {\n                type: \"number\",\n              },\n            },\n          },\n        },\n        {\n          name: \"getCandidatePair\",\n          kind: \"view\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n          result: {\n            serialization_type: \"json\",\n            type_schema: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n              },\n            },\n          },\n        },\n        {\n          name: \"addCandidatePair\",\n          kind: \"call\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"name1\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"name2\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"url1\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"url2\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n        },\n        {\n          name: \"initializeVotes\",\n          kind: \"call\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n        },\n        {\n          name: \"addToPromptArray\",\n          kind: \"call\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n        },\n        {\n          name: \"clearPromptArray\",\n          kind: \"call\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [],\n          },\n        },\n        {\n          name: \"addVote\",\n          kind: \"call\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"index\",\n                type_schema: {\n                  type: \"number\",\n                },\n              },\n            ],\n          },\n        },\n        {\n          name: \"recordUser\",\n          kind: \"call\",\n          modifiers: [],\n          params: {\n            serialization_type: \"json\",\n            args: [\n              {\n                name: \"prompt\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n              {\n                name: \"user\",\n                type_schema: {\n                  type: \"string\",\n                },\n              },\n            ],\n          },\n        },\n      ],\n      root_schema: {\n        type: \"object\",\n        additionalProperties: false,\n        patternProperties: {\n          \"^[0-9]+$\": {\n            type: \"string\",\n          },\n        },\n        $schema: \"http://json-schema.org/draft-07/schema#\",\n      },\n    },\n  },\n  contractError,\n  contractAbiCall,\n  contractAbiView,\n  response,\n  contractAbiArg: [],\n});\n\nconst onInputChangeContractAddress = ({ target }) => {\n  State.update({ contractAddress: target.value });\n};\nconst onInputChangeContractAbi = ({ target }) => {\n  State.update({ contractAbi: target.value });\n};\n\nconst onInputChangeContractArg = (obj) => {\n  const data = state.contractAbiArg;\n  const isExist = false;\n  const indexData = null;\n\n  data.forEach((item, index) => {\n    if (item.functions == obj.functions && item.name == obj.name) {\n      isExist = true;\n      indexData = index;\n    }\n  });\n\n  if (isExist) {\n    data[indexData].value = obj.value;\n  } else {\n    data.push(obj);\n  }\n\n  State.update({ contractAbiArg: data });\n};\n\nconst onBtnClickCall = (e) => {\n  const argsArr = [];\n  const data = state.contractAbiArg;\n  data.forEach((item) => {\n    if (item.functions == e.target.dataset.name) {\n      if (item.type == \"number\") {\n        item.value = parseInt(item.value);\n      }\n      if (item.type == \"array\") {\n        item.value = item.value.split(\"|\");\n      }\n      argsArr.push(item);\n    }\n  });\n\n  const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\n  const args = {};\n  argMap.forEach((item) => {\n    Object.assign(args, item);\n  });\n  if (e.target.dataset.action == \"view\") {\n    asyncFetch(\"https://rpc.near.org/\", {\n      body: JSON.stringify({\n        method: \"query\",\n        params: {\n          request_type: \"call_function\",\n          account_id: state.contractAddress,\n          method_name: e.target.dataset.name,\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"), //fix here\n          finality: \"final\",\n        },\n        id: 154,\n        jsonrpc: \"2.0\",\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n    }).then((res) => {\n      if (res.body.result.result) {\n        const result = new Buffer.from(res.body.result.result).toString();\n        State.update({\n          response: {\n            [e.target.dataset.name]: { value: result, error: false },\n          },\n        });\n      }\n      if (res.body.result.error) {\n        const error = res.body.result.error;\n        State.update({\n          response: {\n            [e.target.dataset.name]: { value: error, error: true },\n          },\n        });\n      }\n    });\n  }\n  if (e.target.dataset.action == \"call\") {\n    const data = Near.call(state.contractAddress, e.target.dataset.name, args);\n  }\n};\nconst loadAbi = () => {\n  //   const res = fetch(\n  //     \"https://raw.githubusercontent.com/kurodenjiro/verify-contract-near/main/abi.json\"\n  //   ).body;\n  const abi = state.contractAbi;\n  if (abi.body.functions) {\n    const contractCall = [];\n    const contractView = [];\n    abi.body.functions.forEach((item) => {\n      if (item.kind == \"call\") {\n        contractCall.push(item);\n      }\n      if (item.kind == \"view\") {\n        contractView.push(item);\n      }\n      State.update({ contractAbiCall: contractCall });\n      State.update({ contractAbiView: contractView });\n    });\n    State.update({ contractError: null });\n  } else {\n    State.update({ contractError: \"Can not parse ABI\" });\n    State.update({ contractAbiCall: null });\n    State.update({ contractAbiView: null });\n  }\n};\nloadAbi();\nconst onBtnClickBuildForm = () => {\n  const abi = JSON.parse(state.contractAbi);\n  console.log(\"abi\", abi);\n  if (abi.body.functions) {\n    const contractCall = [];\n    const contractView = [];\n    abi.body.functions.forEach((item) => {\n      if (item.kind == \"call\") {\n        contractCall.push(item);\n      }\n      if (item.kind == \"view\") {\n        contractView.push(item);\n      }\n      State.update({ contractAbiCall: contractCall });\n      State.update({ contractAbiView: contractView });\n    });\n    State.update({ contractError: \"\" });\n  } else {\n    State.update({ contractAbiCall: null });\n    State.update({ contractAbiView: null });\n    State.update({ contractError: \"Can not parse ABI\" });\n  }\n};\n\n// Define components\nconst contractForm = (\n  <>\n    <div class=\"border border-black p-3\">\n      <input\n        class=\"form-control mb-3\"\n        value={state.contractAddress}\n        placeholder=\"Contract Address\"\n        onChange={onInputChangeContractAddress}\n      />\n      <textarea\n        class=\"form-control\"\n        placeholder=\"Contract ABI\"\n        value={state.contractAbi}\n        onChange={onInputChangeContractAbi}\n      ></textarea>\n      <button class=\"btn btn-primary mt-2\" onClick={onBtnClickBuildForm}>\n        Build Form\n      </button>\n    </div>\n  </>\n);\n\nconst notLoggedInWarning = (\n  <p class=\"text-center py-2\"> Login to Usint this Tool </p>\n);\n\n// Render\nreturn (\n  <>\n    <div class=\"container border border-info p-3\">\n      {context.accountId ? contractForm : notLoggedInWarning}\n      <h3 class=\"text-center\">\n        Address:\n        <span class=\"text-decoration-underline\"> {state.contractAddress} </span>\n      </h3>\n      {state.contractError}\n      {state.contractAbiView &&\n        state.contractAbiView.map((functions) => (\n          <div class=\"card mb-2\">\n            <div class=\"card-header\">{functions.name}</div>\n            <div class=\"card-body\">\n              {functions.params.args &&\n                functions.params.args.map((args) => {\n                  return (\n                    <div class=\"form-group pb-2\">\n                      <label>{args.name}</label>\n                      <input\n                        class=\"form-control\"\n                        data-name={args.name}\n                        data-type={\n                          args.type_schema.type == \"string\" ||\n                          args.type_schema.type[0] == \"string\"\n                            ? \"text\"\n                            : args.type_schema.type == \"integer\" ||\n                              args.type_schema.type[0] == \"integer\"\n                            ? \"number\"\n                            : args.type_schema.type == \"array\"\n                            ? \"array\"\n                            : args.type_schema.$ref\n                            ? \"text\"\n                            : \"text\"\n                        }\n                        type={\n                          args.type_schema.type == \"string\" ||\n                          args.type_schema.type[0] == \"string\"\n                            ? \"text\"\n                            : args.type_schema.type == \"integer\" ||\n                              args.type_schema.type[0] == \"integer\"\n                            ? \"number\"\n                            : args.type_schema.type == \"array\"\n                            ? \"array\"\n                            : args.type_schema.$ref\n                            ? \"text\"\n                            : \"text\"\n                        }\n                        placeholder={\n                          args.type_schema.type == \"string\" ||\n                          args.type_schema.type[0] == \"string\"\n                            ? \"string\"\n                            : args.type_schema.type == \"integer\" ||\n                              args.type_schema.type[0] == \"integer\"\n                            ? \"number\"\n                            : args.type_schema.type == \"array\"\n                            ? \"array : a|b\"\n                            : args.type_schema.$ref\n                            ? \"Account Address\"\n                            : \"text\"\n                        }\n                        onChange={(e) =>\n                          onInputChangeContractArg({\n                            functions: functions.name,\n                            name: args.name,\n                            type:\n                              args.type_schema.type == \"string\" ||\n                              args.type_schema.type[0] == \"string\"\n                                ? \"text\"\n                                : args.type_schema.type == \"integer\" ||\n                                  args.type_schema.type[0] == \"integer\"\n                                ? \"number\"\n                                : args.type_schema.type == \"array\"\n                                ? \"array\"\n                                : args.type_schema.$ref\n                                ? \"text\"\n                                : \"text\",\n                            value: e.target.value,\n                          })\n                        }\n                      />\n                    </div>\n                  );\n                })}\n              {state.response[functions.name] ? (\n                <>\n                  <div\n                    className={\n                      state.response[functions.name].error\n                        ? \"alert  alert-danger\"\n                        : \"alert  alert-primary\"\n                    }\n                    role=\"alert\"\n                  >\n                    {state.response[functions.name].value}\n                  </div>\n                </>\n              ) : (\n                \"\"\n              )}\n              <button\n                class=\"btn btn-primary\"\n                data-action=\"view\"\n                data-name={functions.name}\n                onClick={onBtnClickCall}\n              >\n                View\n              </button>\n            </div>\n          </div>\n        ))}\n\n      {state.contractAbiCall &&\n        state.contractAbiCall.map((functions) => (\n          <div class=\"card mb-2\">\n            <div class=\"card-header\">{functions.name}</div>\n            <div class=\"card-body\">\n              {functions.params.args &&\n                functions.params.args.map((args) => {\n                  return (\n                    <div class=\"form-group pb-2\">\n                      <label>{args.name}</label>\n                      <input\n                        class=\"form-control\"\n                        data-name={args.name}\n                        data-type={\n                          args.type_schema.type == \"string\" ||\n                          args.type_schema.type[0] == \"string\"\n                            ? \"text\"\n                            : args.type_schema.type == \"integer\" ||\n                              args.type_schema.type[0] == \"integer\"\n                            ? \"number\"\n                            : args.type_schema.type == \"array\"\n                            ? \"array\"\n                            : args.type_schema.$ref\n                            ? \"text\"\n                            : \"text\"\n                        }\n                        type={\n                          args.type_schema.type == \"string\" ||\n                          args.type_schema.type[0] == \"string\"\n                            ? \"text\"\n                            : args.type_schema.type == \"integer\" ||\n                              args.type_schema.type[0] == \"integer\"\n                            ? \"number\"\n                            : args.type_schema.type == \"array\"\n                            ? \"array\"\n                            : args.type_schema.$ref\n                            ? \"text\"\n                            : \"text\"\n                        }\n                        placeholder={\n                          args.type_schema.type == \"string\" ||\n                          args.type_schema.type[0] == \"string\"\n                            ? \"string\"\n                            : args.type_schema.type == \"integer\" ||\n                              args.type_schema.type[0] == \"integer\"\n                            ? \"number\"\n                            : args.type_schema.type == \"array\"\n                            ? \"array : a|b\"\n                            : args.type_schema.$ref\n                            ? \"Account Address\"\n                            : \"text\"\n                        }\n                        onChange={(e) =>\n                          onInputChangeContractArg({\n                            functions: functions.name,\n                            name: args.name,\n                            type:\n                              args.type_schema.type == \"string\" ||\n                              args.type_schema.type[0] == \"string\"\n                                ? \"text\"\n                                : args.type_schema.type == \"integer\" ||\n                                  args.type_schema.type[0] == \"integer\"\n                                ? \"number\"\n                                : args.type_schema.type == \"array\"\n                                ? \"array\"\n                                : args.type_schema.$ref\n                                ? \"text\"\n                                : \"text\",\n                            value: e.target.value,\n                          })\n                        }\n                      />\n                    </div>\n                  );\n                })}\n              {state.response[functions.name] ? (\n                <p class=\"card-text\">{state.response[functions.name]}</p>\n              ) : (\n                \"\"\n              )}\n              <button\n                class=\"btn btn-primary\"\n                data-action=\"call\"\n                data-name={functions.name}\n                onClick={onBtnClickCall}\n              >\n                Call\n              </button>\n            </div>\n          </div>\n        ))}\n    </div>\n  </>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/569952b3b260c6ab92097fa42a09bf03e8416543b047031f77b0fdb20e4651aa/widget/abi2form-example", "fact_widget_deployments_id": "3300c836be613fd1eabb57cf98b883c9", "inserted_timestamp": "2023-09-25T20:20:28.666Z", "modified_timestamp": "2023-09-25T20:20:28.666Z", "__row_index": 2}