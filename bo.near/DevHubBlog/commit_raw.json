{"tx_hash": "Ep2eSHNSoU1SpLGURbj5SCa47H9xythrAKx1zhQiXDNE", "action_id_social": "D1y4zNFC57JshvxEReLzrN5czhs2bZfieEDgM6dxX4xm-0-widget", "block_id": 114508451, "block_timestamp": "2024-03-11T08:19:28.146Z", "signer_id": "bo.near", "widget_name": "DevHubBlog", "source_code": "/* Social DB Schema:\n\"x.community.devhub.near\": {\n  \"devhub-blog\": {\n      \"categories\": {\"guide\": \"\", \"intro\": \"\"},\n      \"blogs\": {\n        \"0\": {\"category\": \"guide\", \"content\": ..., \"deleted\": true},\n        \"1\": {},\n      },\n      \"lists\": {\n        \"page1\": {\"blogs\": \"[0,1]\", \"title\": \"aaa\", \"subtitle\": \"\"},\n        \"page2\": ...\n      }\n  }\n}\n*/\n\nconst blog_owner = props.community || context.accountId;\nconst data = Social.getr(`${blog_owner}/devhub-blog`);\n\nif (data === null) {\n  return \"Loading ...\";\n}\n\nlet devhubBlog = data || {};\n\nState.init({\n  title: \"\",\n  subtitle: \"\",\n  category: null,\n  author: \"\",\n  date: \"\",\n  content: \"\",\n  id: null,\n  category: \"\",\n  listName: \"\",\n  listTitle: \"\",\n  listSubtitle: \"\",\n  blogIds: \"[]\",\n  currentSelect: null,\n});\n\nlet categories = devhubBlog.categories || {};\n\nlet lists = devhubBlog.lists || {};\n\nconst saveBlog = () => {\n  let nextId = Number(devhubBlog.nextId || \"0\");\n  let id = state.id || nextId;\n  let newBlog = {\n    title: state.title,\n    subtitle: state.subtitle,\n    category: state.category,\n    author: state.author,\n    date: state.date,\n    content: state.content,\n  };\n  State.update({\n    title: \"\",\n    subtitle: \"\",\n    category: null,\n    author: \"\",\n    date: \"\",\n    content: \"\",\n    id: null,\n  });\n  Social.set({\n    \"devhub-blog\": {\n      blogs: { [id.toString()]: newBlog },\n      nextId: id == nextId ? nextId + 1 : nextId,\n    },\n  });\n};\n\nconst editBlog = (i, blog) => {\n  State.update({\n    title: blog.title,\n    subtitle: blog.subtitle,\n    category: blog.category,\n    author: blog.author,\n    date: blog.date,\n    content: blog.content,\n    id: i,\n  });\n};\n\nconst deleteBlog = (i) => {\n  Social.set(\n    {\n      \"devhub-blog\": {\n        blogs: {\n          [i.toString()]: {\n            title: null,\n            subtitle: null,\n            category: null,\n            author: null,\n            date: null,\n            content: null,\n          },\n        },\n      },\n    },\n    { force: true }\n  );\n};\n\nconst deleteCategory = (category) => {\n  Social.set({\n    \"devhub-blog\": {\n      categories: {\n        [category]: null,\n      },\n    },\n  });\n};\n\nconst renderBlogs = (blogs) => {\n  return Object.entries(blogs)\n    .filter(([i, blog]) => blog)\n    .map(([i, blog]) => (\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"card-title\">\n            <h5>{blog.title}</h5>\n          </div>\n\n          <p>author: {blog.author}</p>\n          <button onClick={() => editBlog(i, blog)}>edit</button>\n          <button class=\"btn btn-danger\" onClick={() => deleteBlog(i)}>\n            delete\n          </button>\n        </div>\n      </div>\n    ));\n};\n\nconst renderCategories = (categories) => {\n  return Object.entries(categories).map(([category, _]) => (\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <p>{category}</p>\n        <button class=\"btn btn-danger\" onClick={() => deleteCategory(category)}>\n          delete\n        </button>\n      </div>\n    </div>\n  ));\n};\n\nconst addCategory = () => {\n  const category = state.category;\n  State.update({ category: \"\" });\n  Social.set({\n    \"devhub-blog\": {\n      categories: { [category]: \"\" },\n    },\n  });\n};\n\nfunction recursivelySetNull(obj) {\n  for (var key in obj) {\n    if (typeof obj[key] === \"object\" && obj[key] !== null) {\n      recursivelySetNull(obj[key]);\n    } else {\n      obj[key] = null;\n    }\n  }\n}\n\nconst addList = () => {\n  const listName = state.listName;\n\n  const listTitle = state.listTitle;\n  const listSubtitle = state.listSubtitle;\n  const blogIds = state.blogIds;\n  State.update({\n    listName: \"\",\n    listTitle: \"\",\n    listSubtitle: \"\",\n    blogIds: \"[]\",\n  });\n  Social.set({\n    \"devhub-blog\": {\n      lists: {\n        [listName]: {\n          title: listTitle,\n          subtitle: listSubtitle,\n          blogs: blogIds,\n        },\n      },\n    },\n  });\n};\n\nconst deleteList = (list, listData) => {\n  Social.set({\n    \"devhub-blog\": {\n      lists: {\n        [list]: { title: null, subtitle: null, blogs: null },\n      },\n    },\n  });\n};\n\nconst renderBlogLists = (lists) => {\n  return Object.entries(lists).map(([list, listData]) => (\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <p>{list}</p>\n        <button onClick={() => State.update({ currentSelect: listData })}>\n          show\n        </button>\n        <button\n          class=\"btn btn-danger\"\n          onClick={() => deleteList(list, listData)}\n        >\n          delete\n        </button>\n      </div>\n    </div>\n  ));\n};\n\nconst renderBlogList = (data) => {\n  console.log(data);\n  const blogIds = JSON.parse(data.blogs);\n  console.log(blogIds);\n  const blogs = Social.getr(\n    blogIds.map((blogId) => `${blog_owner}/devhub-blog/blogs/${blogId}`)\n  );\n  console.log(blogs);\n  return (\n    <div>\n      <h3>{data.title}</h3>\n      <h4>{data.subtitle}</h4>\n      {renderBlogs(\n        blogs.title\n          ? { [blogIds[0]]: blogs }\n          : blogs[blog_owner][\"devhub-blog\"].blogs\n      )}\n    </div>\n  );\n};\n\nreturn (\n  <div class=\"d-flex flex-column flex-1 align-items-start justify-content-evenly\">\n    <h1>Community Blog in SocialDB</h1>\n    <h2>instance of blog list</h2>\n    {renderBlogLists(lists)}\n    {state.currentSelect\n      ? renderBlogList(state.currentSelect)\n      : \"please select a blog list\"}\n    <input\n      placeholder=\"list name\"\n      onChange={(e) => State.update({ listName: e.target.value })}\n      value={state.listName}\n    ></input>\n    <input\n      placeholder=\"list title\"\n      onChange={(e) => State.update({ listTitle: e.target.value })}\n      value={state.listTitle}\n    ></input>\n    <input\n      placeholder=\"list subtitle\"\n      onChange={(e) => State.update({ listSubtitle: e.target.value })}\n      value={state.listSubtitle}\n    ></input>\n    <input\n      placeholder=\"blogIds\"\n      onChange={(e) => State.update({ blogIds: e.target.value })}\n      value={state.blogIds}\n    ></input>\n    <button onClick={addList}>add list</button>\n\n    <h2>categories</h2>\n    {renderCategories(categories)}\n    <input\n      placeholder=\"category\"\n      onChange={(e) => State.update({ category: e.target.value })}\n      value={state.category}\n    ></input>\n    <button onClick={addCategory}>add category</button>\n\n    <h2>editor</h2>\n    <input\n      placeholder=\"title\"\n      onChange={(e) => State.update({ title: e.target.value })}\n      value={state.title}\n    ></input>\n    <input\n      placeholder=\"subtitle\"\n      onChange={(e) => State.update({ subtitle: e.target.value })}\n      value={state.subtitle}\n    ></input>\n    <div class=\"dropdown w-100\">\n      <button\n        class=\"btn drop-btn text-truncate dropdown-toggle bg-white border rounded-2\"\n        type=\"button\"\n        data-bs-toggle=\"dropdown\"\n        aria-expanded=\"false\"\n      >\n        category: {state.category}\n      </button>\n      <ul class=\"dropdown-menu dropdown-menu-end dropdown-menu-lg-start px-2 shadow\">\n        {Object.keys(categories).map((item) => (\n          <li\n            style={{ borderRadius: \"5px\" }}\n            class=\"dropdown-item cursor-pointer link-underline link-underline-opacity-0\"\n            onClick={() => State.update({ category: item })}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n    <input\n      placeholder=\"author\"\n      onChange={(e) => State.update({ author: e.target.value })}\n      value={state.author}\n    ></input>\n    <input\n      placeholder=\"date\"\n      onChange={(e) => State.update({ date: e.target.value })}\n      value={state.date}\n    ></input>\n\n    <textarea\n      placeholder=\"content\"\n      onInput={(e) => State.update({ content: e.target.value })}\n      value={state.content}\n    ></textarea>\n    <button onClick={saveBlog}>save blog</button>\n    <h2>all blogs</h2>\n    <div>{devhubBlog.blogs ? renderBlogs(devhubBlog.blogs) : \"no blogs\"}</div>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/bo.near/widget/DevHubBlog", "fact_widget_deployments_id": "782df6fa5fe5ce69b7615bf59dfe4e19", "inserted_timestamp": "2024-03-11T09:28:40.534Z", "modified_timestamp": "2024-03-11T09:28:40.534Z", "__row_index": 0}