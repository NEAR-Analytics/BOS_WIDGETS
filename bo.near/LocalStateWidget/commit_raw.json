{"tx_hash": "9uo3CU9eBLHtebCnoAScNcLxjz5mUkUoLwuoZSHhk8kH", "action_id_social": "3yQiFjSXfm6hiixzrNAyaP4QW2EHZ8YHFZxgtEwvDnTw-0-widget", "block_id": 93512099, "block_timestamp": "2023-06-05T12:46:42.593Z", "signer_id": "bo.near", "widget_name": "LocalStateWidget", "source_code": "const WrapperWidget = ({ children, id, storageType }) => {\r\n  // This function handles the state change for the children widgets\r\n  const handleStateChange = (key, value) => {\r\n    // Use the unique identifier to create a unique storage key\r\n    const storageKey = `${id}_${key}`;\r\n\r\n    if (storageType === \"local\") {\r\n      // Update the local storage with the new state\r\n      Storage.set(storageKey, JSON.stringify(value));\r\n    }\r\n  };\r\n\r\n  // This function initializes the state of the children widgets\r\n  const initState = (key, defaultValue) => {\r\n    // Use the unique identifier to create a unique storage key\r\n    const storageKey = `${id}_${key}`;\r\n\r\n    let storedValue;\r\n    if (storageType === \"local\") {\r\n      storedValue = Storage.get(storageKey);\r\n    }\r\n\r\n    if (storedValue) {\r\n      return JSON.parse(storedValue);\r\n    }\r\n    return defaultValue;\r\n  };\r\n\r\n  // Render the children widgets and pass the state management functions as props\r\n  // return React.Children.map(children, (child) =>\r\n  //   React.cloneElement(child, { handleStateChange, initState })\r\n  // );\r\n  console.log(React.cloneElement);\r\n\r\n  return children.map((child) => child);\r\n};\r\n\r\n// This function handles the state change for the children widgets\r\nconst handleStateChange = (key, value) => {\r\n  // Use the unique identifier to create a unique storage key\r\n  const storageKey = `${id}_${key}`;\r\n\r\n  if (storageType === \"local\") {\r\n    // Update the local storage with the new state\r\n    Storage.set(storageKey, JSON.stringify(value));\r\n  }\r\n};\r\n\r\n// This function initializes the state of the children widgets\r\nconst initState = (key, defaultValue) => {\r\n  // Use the unique identifier to create a unique storage key\r\n  const storageKey = `${id}_${key}`;\r\n\r\n  let storedValue;\r\n  if (storageType === \"local\") {\r\n    storedValue = Storage.get(storageKey);\r\n  }\r\n\r\n  if (storedValue) {\r\n    return JSON.parse(storedValue);\r\n  }\r\n  return defaultValue;\r\n};\r\n\r\nState.init({ name: Storage.get(\"name\") });\r\n\r\nreturn (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Name:\r\n    <input\r\n      type=\"text\"\r\n      value={state.name}\r\n      onChange={(event) => {\r\n        State.update({ name: event.target.value });\r\n        handleStateChange(\"name\", event.target.value);\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bo.near/widget/LocalStateWidget", "fact_widget_deployments_id": "36dd6070359f6ca83b374da8e332f43e", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 9}