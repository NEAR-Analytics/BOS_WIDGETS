{"tx_hash": "5kKv9sCTa13tPTLX3Ux27EPXinYh7Nu8yaf3TZ4TLJAq", "action_id_social": "DbAv4s4Kiw1NmukfpvJpydn1KiMwa9ez3PtucCupHM9t-0-widget", "block_id": 103180564, "block_timestamp": "2023-10-12T05:17:35.587Z", "signer_id": "bo.near", "widget_name": "DevHubSearch", "source_code": "const QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\n\nconst queryName =\n  props.queryName ?? `bo_near_devhub_v15_posts_with_latest_snapshot`;\n\nState.init({\n  data: [],\n\n  author: null,\n  title: null,\n  content: null,\n\n  limit: 10,\n  offset: 0,\n});\n\nconst query = `query DevhubPostsQuery($limit: Int = 10, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\n  ${queryName}(\n    limit: $limit\n    offset: $offset\n    order_by: {block_height: desc}\n    where: $where\n  ) {\n    post_id\n  }\n}\n`;\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `bo_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nfunction search() {\n  let where = {};\n  if (state.author) {\n    where = { author_id: { _eq: state.author }, ...where };\n  }\n  if (state.content) {\n    where = { description: { _like: `%${state.content}%` }, ...where };\n  }\n  if (state.title) {\n    where = { name: { _like: `%${state.tilte}%` }, ...where };\n  }\n  console.log(\"searching for\", where);\n  fetchGraphQL(query, \"DevhubPostsQuery\", {\n    limit: state.limit,\n    offset: state.offset,\n    where,\n  }).then((result) => {\n    if (result.status === 200) {\n      console.log(\"search success\");\n      if (result.body.data) {\n        const data = result.body.data[queryName];\n        State.update({ data });\n        console.log(\"found:\");\n        console.log(data);\n      }\n    } else {\n      console.error(\"error:\", result.body);\n    }\n  });\n}\n\nconst renderData = (a) => {\n  return (\n    <Widget\n      src={`devgovgigs.near/widget/gigs-board.entity.post.Post`}\n      props={{ id: a.post_id }}\n      key={a.post_id}\n    />\n  );\n};\nconst renderedData = state.data.map(renderData);\n\nreturn (\n  <div>\n    <div>\n      <input\n        placeholder=\"author\"\n        onChange={(e) => State.update({ author: e.target.value })}\n      ></input>\n      <input\n        placeholder=\"title\"\n        onChange={(e) => State.update({ title: e.target.value })}\n      ></input>\n      <input\n        placeholder=\"content\"\n        onChange={(e) => State.update({ content: e.target.value })}\n      ></input>\n      <button onClick={search}>search</button>\n    </div>\n    <div>{renderedData}</div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bo.near/widget/DevHubSearch", "fact_widget_deployments_id": "e9eddbba4293442c3911f77240773a82", "inserted_timestamp": "2023-10-12T06:46:15.025Z", "modified_timestamp": "2023-10-12T06:46:15.025Z", "__row_index": 5}