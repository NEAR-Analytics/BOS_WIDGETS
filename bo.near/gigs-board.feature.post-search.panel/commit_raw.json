{"tx_hash": "2CwnBmrKh1vxjLE7nAmy2f78B7mgbWk4Lp2wSC7zoEbX", "action_id_social": "EfebnowUmqvBKvYAjypwbNbPrBTzj2nUKUXBkghZWhzB-0-widget", "block_id": 103268793, "block_timestamp": "2023-10-13T09:15:26.181Z", "signer_id": "bo.near", "widget_name": "gigs-board.feature.post-search.panel", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\n\nconst queryName =\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\n\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\n    ${queryName}(\n      limit: $limit\n      offset: $offset\n      order_by: {block_height: desc}\n      where: $where\n    ) {\n      post_id\n    }\n  }\n`;\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `bo_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nfunction search() {\n  State.update({ loading: true });\n  let where = {};\n  if (props.authorQuery && props.authorQuery.author) {\n    where = { author_id: { _eq: props.authorQuery.author }, ...where };\n  }\n  if (state.term) {\n    where = { description: { _like: `%${state.term}%` }, ...where };\n  }\n  if (props.tagQuery && props.tagQuery.tag) {\n    where = { labels: { _contains: props.tagQuery.tag }, ...where };\n  }\n  console.log(\"searching for\", where);\n  fetchGraphQL(query, \"DevhubPostsQuery\", {\n    limit: 100,\n    offset: 0,\n    where,\n  }).then((result) => {\n    if (result.status === 200) {\n      console.log(\"search success\");\n      if (result.body.data) {\n        const data = result.body.data[queryName];\n        State.update({\n          searchResult: {\n            postIds: data.map((p) => p.post_id),\n            keywords: state.term ? [state.term] : undefined,\n          },\n        });\n        console.log(\"found:\");\n        console.log(data);\n      }\n    } else {\n      console.error(\"error:\", result.body);\n    }\n    State.update({ loading: false });\n  });\n}\n\nconst updateInput = (term) => {\n  State.update({\n    term,\n  });\n};\n\nconst buttonStyle = {\n  backgroundColor: \"#0C7283\",\n  color: \"#f3f3f3\",\n};\n\nreturn (\n  <>\n    <div className=\"d-flex flex-row gap-4\">\n      <div class=\"dropdown\">\n        {widget(\"feature.post-search.by-author\", {\n          authorQuery: props.authorQuery,\n          onAuthorSearch: props.onAuthorSearch,\n        })}\n      </div>\n      <div>\n        {widget(\"feature.post-search.by-tag\", {\n          tagQuery: props.tagQuery,\n          onTagSearch: props.onTagSearch,\n        })}\n      </div>\n      <div className=\"d-flex flex-row position-relative w-25\">\n        <input\n          type=\"search\"\n          className=\"form-control border border-0 bg-light\"\n          value={state.term ?? \"\"}\n          onChange={(e) => updateInput(e.target.value)}\n          placeholder={props.placeholder ?? `Search by content`}\n        />\n      </div>\n      <button class=\"btn btn-light\" style={buttonStyle} onClick={search}>\n        {state.loading ? (\n          <span\n            className=\"spinner-grow spinner-grow-sm m-auto\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          />\n        ) : (\n          <i class=\"bi bi-search m-auto\"></i>\n        )}{\" \"}\n        Search\n      </button>\n      {state.searchResult ? (\n        <button\n          class=\"btn btn-light\"\n          onClick={() => State.update({ searchResult: null })}\n        >\n          Clear Result\n        </button>\n      ) : (\n        \"\"\n      )}\n      <div className=\"d-flex flex-row-reverse flex-grow-1\">\n        {props.children}\n      </div>\n    </div>\n    {state.searchResult\n      ? widget(\"entity.post.List\", {\n          searchResult: state.searchResult,\n          recency: props.recency,\n        })\n      : widget(\"entity.post.List\", {\n          recency: props.recency,\n          transactionHashes: props.transactionHashes,\n        })}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bo.near/widget/gigs-board.feature.post-search.panel", "fact_widget_deployments_id": "78fc2dc0ea411b8dc0b4d0e4b6c5b13e", "inserted_timestamp": "2023-10-13T11:20:39.397Z", "modified_timestamp": "2023-10-13T11:20:39.397Z", "__row_index": 5}