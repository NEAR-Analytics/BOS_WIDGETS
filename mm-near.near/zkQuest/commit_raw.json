{"tx_hash": "FdxHPE9arEnUZMnU59AjUCVUT4Q8fTSWJjKpTPNDHZfJ", "action_id_social": "EPM1vGN2iigs5VFEB2iPFANPMdTmy1RP3ZqDqTHj7i8s-0-widget", "block_id": 105138028, "block_timestamp": "2023-11-07T09:41:08.128Z", "signer_id": "mm-near.near", "widget_name": "zkQuest", "source_code": "// Welcome to quest 7.\n//\n// In this quest, you'll help zkSync team, by fixing the alternative frontend.\n// BOS.gg allows you to edit this code live, and execute it, when you click preview.\n//\n// OPTIONAL: If you want to save your work, you need to have NEAR account - but no worries, as a part of the zkQuest\n// you can create a NEAR account with some free NEAR - just follow this link: XXXX\n\n// There are 3 steps to this quest - look at FIXMEs in the code below.\n\nconst DESTINATION_CHAIN = 280;\nconst QUEST_ADDRESS = \"0x55b6BA72330ce98946956CC3dfb38dEb6D784058\";\nconst QUEST_ID = 7;\nconst QUEST_NAME = \"008\";\n\nconst QUEST_ABI = [\n  \"function submitInvalid(string memory questId)\",\n  \"function getQuests() public view returns (tuple(string, string, string, uint256, uint16, address, bool, uint16 attempts)[])\",\n];\n\nState.init({\n  accountBalance: 0,\n  chainId: 0,\n  attempted: false,\n  questAttempts: 0,\n  questSolved: false,\n  transactionHash: \"\",\n  transactionStatus: \"\",\n});\n\nlet account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (account) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      State.update({\n        chainId: chainIdData.chainId,\n      });\n    });\n}\n\nfunction changeChain() {\n  Ethers.setChain({ chainId: DESTINATION_CHAIN });\n}\n\nfunction getQuestStatus() {\n  const questContract = new ethers.Contract(\n    QUEST_ADDRESS,\n    QUEST_ABI,\n    Ethers.provider().getSigner()\n  );\n  questContract.getQuests().then((result) => {\n    State.update({\n      questSolved: result[QUEST_ID][6],\n      questAttempts: result[QUEST_ID][7],\n    });\n  });\n}\n\nfunction sendSolution() {\n  const questContract = new ethers.Contract(\n    QUEST_ADDRESS,\n    QUEST_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  let transactionHash = \"\";\n\n  // FIXME: find and use the correct method name.\n  // Hint: you can replay mainnet transactions from your previous submissions with era-test-node, with --show-calls=user --resolve-hashes\n\n  // FIXME: use the proper payload - it will be the keccak of the answer, your address and number of attempts.\n  //let answerHash = ethers.utils.solidityKeccak256([\"string\", \"address\", \"uint16\"], [ANSWER, ADDRESS, attempts]);\n\n  // FIXME: oh, and the answer - is the private key of the first 'rich' account from era-test-node (including the 0x prefix).\n\n  questContract\n    .submitInvalid(QUEST_NAME, { gasLimit: 1000000 })\n    .then((transaction) => {\n      console.log(\"Hash is: \");\n      console.log(transaction.hash);\n      transactionHash = transaction.hash;\n\n      transaction\n        .wait()\n        .then((receipt) => {\n          State.update({\n            transactionStatus: \"ok\",\n          });\n        })\n        .catch((error) => {\n          State.update({\n            transactionStatus: \"failed\",\n          });\n        });\n    })\n    .catch((error) => console.log(\"Error submitting transaction: \" + error))\n    .finally(() =>\n      State.update({\n        transactionHash: transactionHash,\n        attempted: true,\n      })\n    );\n}\n\nfunction step1WalletConnection() {\n  if (account) {\n    return [\n      true,\n      <div>\n        <h2>Step 1: Wallet selection - DONE</h2>\n      </div>,\n    ];\n  } else {\n    return [\n      false,\n      <div>\n        <h2>Step 1: Wallet selection</h2>\n        <h4> Let's start - connect wallet </h4>\n        <p> There should be a button at the top right corner</p>\n      </div>,\n    ];\n  }\n}\n\nfunction step2ChainSelection() {\n  if (state.chainId == DESTINATION_CHAIN) {\n    return [\n      true,\n      <div>\n        <h2>Step 2: Chain selection - DONE</h2>\n      </div>,\n    ];\n  } else {\n    return [\n      false,\n      <div>\n        <h2>Step 2: Chain selection</h2>\n        Now we have to make sure that we're on the right chain.\n        <p>Current chain: {state.chainId}</p>\n        <button onClick={() => changeChain()}>Change chain</button>\n      </div>,\n    ];\n  }\n}\n\nfunction displayTaskDetails() {\n  return (\n    <div>\n      <h1 style={{ color: \"red\" }}>Did you think it would be THAT easy??</h1>\n      Did you even check what you signed?? <br />\n      But no worries - this is the advantage of BOS - you can fix the code and\n      try again. <br />\n      Start by clicking on the three lines in the top right corner - and select{\" \"}\n      <b>Fork widget</b> <br />\n      Then you can see the source code, and edit it live. <br />\n      More instructions are in the code.\n    </div>\n  );\n}\n\nfunction step3SendTheTransaction() {\n  getQuestStatus();\n  if (state.attempted == false) {\n    return [\n      false,\n      <div>\n        <h2>Step 3: Send Transaction</h2>\n        <button onClick={() => sendSolution()}>Send Solution</button>\n      </div>,\n    ];\n  } else {\n    return [\n      true,\n      <div>\n        <h2>Step 3: Send Transaction</h2>\n        Transaction Hash: {state.transactionHash} <br />\n        Transaction Status: {state.transactionStatus} <br />\n        {state.transactionStatus == \"failed\"\n          ? displayTaskDetails()\n          : \"congrats\"}\n      </div>,\n    ];\n  }\n}\n\nfunction allSteps() {\n  let steps = [];\n  const [step1Success, step1Payload] = step1WalletConnection();\n  steps.push(step1Payload);\n  if (!step1Success) {\n    return steps;\n  }\n  const [step2Success, step2Payload] = step2ChainSelection();\n  steps.push(step2Payload);\n  if (!step2Success) {\n    return steps;\n  }\n\n  const [step3Success, step3Payload] = step3SendTheTransaction();\n  steps.push(step3Payload);\n  if (!step3Success) {\n    return steps;\n  }\n\n  return steps;\n}\n\nif (state.questSolved) {\n  return (\n    <div>\n      <h1>Quest is solved - good job.</h1>\n    </div>\n  );\n}\n\nreturn (\n  <>\n    <div class=\"container border border-info p-3 text-center\">\n      <h1>Welcome to zkQuest - The Other frontend</h1>\n      <br />\n      In this quest, we'll be using zkSync Javascript SDK to interact with the\n      blockchain.\n      <br />\n      The code that you see right now is hosted on NEAR blockchain - via BOS\n      (Blockchain Operating System).\n      <br />\n      <br />\n      You can see more details{\" \"}\n      <a href=\"https://docs.near.org/bos/tutorial/ethers-js\">HERE</a>\n      <br />\n      <div>{allSteps()}</div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mm-near.near/widget/zkQuest", "fact_widget_deployments_id": "5787fb23cadbade4b5b71def1dda9737", "inserted_timestamp": "2023-11-07T11:38:35.209Z", "modified_timestamp": "2023-11-07T11:38:35.209Z", "__row_index": 2}