{"tx_hash": "4Eekx8T9aEkJgUQhm7VALbFhJyfwXHncQvUJEy3p3K6e", "action_id_social": "HHNKFftApTeiatK7TjCWKyawCsFv435eDNd4R4mcRXXN-0-widget", "block_id": 92928800, "block_timestamp": "2023-05-28T20:15:33.750Z", "signer_id": "jgdev.near", "widget_name": "DevGov.Notification.Item.Left", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n  const linkPropsQuery = Object.entries(linkProps)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n\nconst WrapperWidget = ({ children, id }) => {\n  // This function handles the state change for the children widgets\n  const handleStateChange = (key, value) => {\n    // Use the unique identifier to create a unique storage key\n    const storageKey = `${id}_${key}`;\n\n    // Update the local storage with the new state\n    localStorage.setItem(storageKey, JSON.stringify(value));\n  };\n\n  // This function initializes the state of the children widgets\n  const initState = (key, defaultValue) => {\n    // Use the unique identifier to create a unique storage key\n    const storageKey = `${id}_${key}`;\n\n    let storedValue = localStorage.getItem(storageKey);\n\n    if (storedValue) {\n      try {\n        return JSON.parse(storedValue);\n      } catch (e) {\n        console.error(\"Error parsing JSON from storage\", e);\n      }\n    }\n    return defaultValue;\n  };\n\n  // Render the children widgets and pass the state management functions as props\n  return React.Children.map(children, (child) =>\n    child && typeof child === \"object\"\n      ? React.cloneElement(child, { handleStateChange, initState })\n      : child\n  );\n};\n/* END_INCLUDE: \"common.jsx\" */\n\nif (!props.type) {\n  return \"Loading ...\";\n}\n\nconst type = props.type.split(\"/\")[1];\nreturn props.type ? (\n  <>\n    {type == \"like\"\n      ? \"liked\"\n      : type == \"reply\"\n      ? \"replied\"\n      : type == \"edit\"\n      ? \"edited\"\n      : \"???\"}{\" \"}\n    your\n    <a className=\"fw-bold text-muted\" href={href(\"Post\", { id: props.post })}>\n      Developer Governance post\n    </a>\n  </>\n) : (\n  \"Loading ...\"\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgdev.near/widget/DevGov.Notification.Item.Left", "fact_widget_deployments_id": "7b08e86ac01b63d60a72f601652cf5b8", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 14}