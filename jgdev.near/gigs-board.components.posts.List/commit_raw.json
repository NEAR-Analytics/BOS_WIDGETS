{"tx_hash": "BcYe9d89evL3vjVgdMnwpbvibpPbNXySho5zk1qFTWu8", "action_id_social": "8jUgEYkCNyTF1npBCbQmHvbFhY773i4jcLadCZxM2aWT-0-widget", "block_id": 94645739, "block_timestamp": "2023-06-20T22:27:53.588Z", "signer_id": "jgdev.near", "widget_name": "gigs-board.components.posts.List", "source_code": "// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\r\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\r\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\r\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\r\n\r\n/* INCLUDE: \"common.jsx\" */\r\nconst nearDevGovGigsContractAccountId =\r\n  props.nearDevGovGigsContractAccountId ||\r\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\r\n\r\nconst nearDevGovGigsWidgetsAccountId =\r\n  props.nearDevGovGigsWidgetsAccountId ||\r\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\r\n\r\nfunction widget(widgetName, widgetProps, key) {\r\n  widgetProps = {\r\n    ...widgetProps,\r\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\r\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\r\n    referral: props.referral,\r\n  };\r\n\r\n  return (\r\n    <Widget\r\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\r\n      props={widgetProps}\r\n      key={key}\r\n    />\r\n  );\r\n}\r\n\r\nfunction href(widgetName, linkProps) {\r\n  linkProps = { ...linkProps };\r\n\r\n  if (props.nearDevGovGigsContractAccountId) {\r\n    linkProps.nearDevGovGigsContractAccountId =\r\n      props.nearDevGovGigsContractAccountId;\r\n  }\r\n\r\n  if (props.nearDevGovGigsWidgetsAccountId) {\r\n    linkProps.nearDevGovGigsWidgetsAccountId =\r\n      props.nearDevGovGigsWidgetsAccountId;\r\n  }\r\n\r\n  if (props.referral) {\r\n    linkProps.referral = props.referral;\r\n  }\r\n\r\n  const linkPropsQuery = Object.entries(linkProps)\r\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\r\n    .map(([key, value]) => `${key}=${value}`)\r\n    .join(\"&\");\r\n\r\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\r\n    linkPropsQuery ? \"?\" : \"\"\r\n  }${linkPropsQuery}`;\r\n}\r\n/* END_INCLUDE: \"common.jsx\" */\r\n\r\ninitState({\r\n  period: \"week\",\r\n});\r\n\r\nfunction defaultRenderItem(postId, additionalProps) {\r\n  if (!additionalProps) {\r\n    additionalProps = {};\r\n  }\r\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\r\n  return (\r\n    <div style={{ minHeight: \"150px\" }}>\r\n      {widget(\r\n        `components.posts.Post`,\r\n        {\r\n          id: postId,\r\n          expandable: true,\r\n          defaultExpanded: false,\r\n          isInList: true,\r\n          ...additionalProps,\r\n        },\r\n        postId\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst renderItem = props.renderItem ?? defaultRenderItem;\r\n\r\nconst cachedRenderItem = (item, i) => {\r\n  if (props.searchResult && props.searchResult.keywords[item]) {\r\n    return renderItem(item, {\r\n      searchKeywords: props.searchResult.keywords[item],\r\n    });\r\n  }\r\n\r\n  const key = JSON.stringify(item);\r\n\r\n  if (!(key in state.cachedItems)) {\r\n    state.cachedItems[key] = renderItem(item);\r\n    State.update();\r\n  }\r\n  return state.cachedItems[key];\r\n};\r\n\r\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\r\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\r\n\r\nfunction getPostsByLabel() {\r\n  let postIds = Near.view(\r\n    nearDevGovGigsContractAccountId,\r\n    \"get_posts_by_label\",\r\n    {\r\n      label: props.label,\r\n    }\r\n  );\r\n  if (postIds) {\r\n    postIds.reverse();\r\n  }\r\n  return postIds;\r\n}\r\n\r\nfunction getPostsByAuthor() {\r\n  let postIds = Near.view(\r\n    nearDevGovGigsContractAccountId,\r\n    \"get_posts_by_author\",\r\n    {\r\n      author: props.author,\r\n    }\r\n  );\r\n  if (postIds) {\r\n    postIds.reverse();\r\n  }\r\n  return postIds;\r\n}\r\n\r\nfunction intersectPostsWithLabel(postIds) {\r\n  if (props.label) {\r\n    let postIdLabels = getPostsByLabel();\r\n    if (postIdLabels === null) {\r\n      // wait until postIdLabels are loaded\r\n      return null;\r\n    }\r\n    postIdLabels = new Set(postIdLabels);\r\n    return postIds.filter((id) => postIdLabels.has(id));\r\n  }\r\n  return postIds;\r\n}\r\n\r\nfunction intersectPostsWithAuthor(postIds) {\r\n  if (props.author) {\r\n    let postIdsByAuthor = getPostsByAuthor();\r\n    if (postIdsByAuthor == null) {\r\n      // wait until postIdsByAuthor are loaded\r\n      return null;\r\n    } else {\r\n      postIdsByAuthor = new Set(postIdsByAuthor);\r\n      return postIds.filter((id) => postIdsByAuthor.has(id));\r\n    }\r\n  }\r\n  return postIds;\r\n}\r\n\r\nconst ONE_DAY = 60 * 60 * 24 * 1000;\r\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\r\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\r\n\r\nfunction getHotnessScore(post) {\r\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\r\n  //post.likes.length - linear value\r\n  const age = Math.pow(post.id, 5);\r\n  const comments = post.comments;\r\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\r\n  const totalAge = age + commentAge;\r\n  //use log functions to make likes score and exponentially big age score close to each other\r\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\r\n}\r\n\r\nconst getPeriodText = (period) => {\r\n  let text = \"Last 24 hours\";\r\n  if (period === \"week\") {\r\n    text = \"Last week\";\r\n  }\r\n  if (period === \"month\") {\r\n    text = \"Last month\";\r\n  }\r\n  return text;\r\n};\r\n\r\nconst findHottestsPosts = (postIds, period) => {\r\n  let allPosts;\r\n  if (!state.allPosts) {\r\n    allPosts = Near.view(\"devgovgigs.near\", \"get_posts\");\r\n    if (!allPosts) {\r\n      return [];\r\n    }\r\n    State.update({ allPosts });\r\n  } else {\r\n    allPosts = state.allPosts;\r\n  }\r\n  let postIdsSet = new Set(postIds);\r\n  let posts = allPosts.filter((post) => postIdsSet.has(post.id));\r\n\r\n  let periodTime = ONE_DAY;\r\n  if (period === \"week\") {\r\n    periodTime = ONE_WEEK;\r\n  }\r\n  if (period === \"month\") {\r\n    periodTime = ONE_MONTH;\r\n  }\r\n  const periodLimitedPosts = posts.filter((post) => {\r\n    const timestamp = post.snapshot.timestamp / 1000000;\r\n    return Date.now() - timestamp < periodTime;\r\n  });\r\n  const modifiedPosts = periodLimitedPosts.map((post) => {\r\n    const comments =\r\n      Near.view(\"devgovgigs.near\", \"get_children_ids\", {\r\n        post_id: post.id,\r\n      }) || [];\r\n    post = { ...post, comments };\r\n    return {\r\n      ...post,\r\n      postScore: getHotnessScore(post),\r\n    };\r\n  });\r\n  modifiedPosts.sort((a, b) => b.postScore - a.postScore);\r\n  return modifiedPosts.map((post) => post.id);\r\n};\r\n\r\nlet postIds;\r\nif (props.searchResult) {\r\n  postIds = props.searchResult.postIds;\r\n  postIds = intersectPostsWithLabel(postIds);\r\n  postIds = intersectPostsWithAuthor(postIds);\r\n} else if (props.label) {\r\n  postIds = getPostsByLabel();\r\n  postIds = intersectPostsWithAuthor(postIds);\r\n} else if (props.author) {\r\n  postIds = getPostsByAuthor();\r\n} else if (props.recency == \"all\") {\r\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_all_post_ids\");\r\n  if (postIds) {\r\n    postIds.reverse();\r\n  }\r\n} else {\r\n  postIds = Near.view(nearDevGovGigsContractAccountId, \"get_children_ids\");\r\n  if (postIds) {\r\n    postIds.reverse();\r\n  }\r\n}\r\n\r\nif (props.recency == \"hot\") {\r\n  postIds = findHottestsPosts(postIds, state.period);\r\n}\r\n\r\nconst loader = (\r\n  <div className=\"loader\" key={\"loader\"}>\r\n    <span\r\n      className=\"spinner-grow spinner-grow-sm me-1\"\r\n      role=\"status\"\r\n      aria-hidden=\"true\"\r\n    />\r\n    Loading ...\r\n  </div>\r\n);\r\n\r\nif (postIds === null) {\r\n  return loader;\r\n}\r\nconst initialItems = postIds;\r\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \"get_post\", { post_id: postId }) }));\r\n\r\n// const computeFetchFrom = (items, limit) => {\r\n//   if (!items || items.length < limit) {\r\n//     return false;\r\n//   }\r\n//   const blockHeight = items[items.length - 1].blockHeight;\r\n//   return index.options.order === \"desc\" ? blockHeight - 1 : blockHeight + 1;\r\n// };\r\n\r\n// const mergeItems = (newItems) => {\r\n//   const items = [\r\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\r\n//   ].map((i) => JSON.parse(i));\r\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\r\n//   if (index.options.order === \"desc\") {\r\n//     items.reverse();\r\n//   }\r\n//   return items;\r\n// };\r\n\r\nconst jInitialItems = JSON.stringify(initialItems);\r\nif (state.jInitialItems !== jInitialItems) {\r\n  // const jIndex = JSON.stringify(index);\r\n  // if (jIndex !== state.jIndex) {\r\n  State.update({\r\n    jIndex,\r\n    jInitialItems,\r\n    items: initialItems,\r\n    fetchFrom: false,\r\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\r\n    nextFetchFrom: false,\r\n    displayCount: initialRenderLimit,\r\n    cachedItems: {},\r\n  });\r\n  // } else {\r\n  //   State.update({\r\n  //     jInitialItems,\r\n  //     items: mergeItems(initialItems),\r\n  //   });\r\n  // }\r\n}\r\n\r\nif (state.fetchFrom) {\r\n  console.log(\"TODO: fetchFrom\");\r\n  // const limit = addDisplayCount;\r\n  // const newItems = Social.index(\r\n  //   index.action,\r\n  //   index.key,\r\n  //   Object.assign({}, index.options, {\r\n  //     from: state.fetchFrom,\r\n  //     subscribe: undefined,\r\n  //     limit,\r\n  //   })\r\n  // );\r\n  // if (newItems !== null) {\r\n  //   State.update({\r\n  //     items: mergeItems(newItems),\r\n  //     fetchFrom: false,\r\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\r\n  //   });\r\n  // }\r\n}\r\n\r\nconst makeMoreItems = () => {\r\n  State.update({\r\n    displayCount: state.displayCount + addDisplayCount,\r\n  });\r\n  if (\r\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\r\n    !state.fetchFrom &&\r\n    state.nextFetchFrom &&\r\n    state.nextFetchFrom !== state.fetchFrom\r\n  ) {\r\n    State.update({\r\n      fetchFrom: state.nextFetchFrom,\r\n    });\r\n  }\r\n};\r\n\r\nconst fetchMore =\r\n  props.manual &&\r\n  (state.fetchFrom && state.items.length < state.displayCount\r\n    ? loader\r\n    : state.displayCount < state.items.length && (\r\n        <div key={\"loader more\"}>\r\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\r\n            {props.loadMoreText ?? \"Load more...\"}\r\n          </a>\r\n        </div>\r\n      ));\r\n\r\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\r\n\r\nconsole.log(items);\r\nconst renderedItems = items.map(cachedRenderItem);\r\n\r\nconst Head =\r\n  props.recency == \"hot\" ? (\r\n    <div class=\"row\">\r\n      <div class=\"fs-5 col-6 align-self-center\">\r\n        <i class=\"bi-fire\"></i>\r\n        <span>Hottest Posts</span>\r\n      </div>\r\n      <div class=\"col-6 dropdown d-flex justify-content-end\">\r\n        <a\r\n          class=\"btn btn-secondary dropdown-toggle\"\r\n          href=\"#\"\r\n          role=\"button\"\r\n          id=\"dropdownMenuLink\"\r\n          data-bs-toggle=\"dropdown\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          {getPeriodText(state.period)}\r\n        </a>\r\n\r\n        <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n          <li>\r\n            <button\r\n              class=\"dropdown-item\"\r\n              onClick={() => {\r\n                State.update({ period: \"day\" });\r\n              }}\r\n            >\r\n              {getPeriodText(\"day\")}\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              class=\"dropdown-item\"\r\n              onClick={() => {\r\n                State.update({ period: \"week\" });\r\n              }}\r\n            >\r\n              {getPeriodText(\"week\")}\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              class=\"dropdown-item\"\r\n              onClick={() => {\r\n                State.update({ period: \"month\" });\r\n              }}\r\n            >\r\n              {getPeriodText(\"month\")}\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n\r\nreturn (\r\n  <>\r\n    {Head}\r\n    {state.items.length > 0 ? (\r\n      <InfiniteScroll\r\n        pageStart={0}\r\n        loadMore={makeMoreItems}\r\n        hasMore={state.displayCount < state.items.length}\r\n        loader={loader}\r\n      >\r\n        {renderedItems}\r\n      </InfiniteScroll>\r\n    ) : (\r\n      <p class=\"text-secondary\">\r\n        No posts {props.searchResult ? \"matches search\" : \"\"}\r\n        {props.recency == \"hot\"\r\n          ? \" in \" + getPeriodText(state.period).toLowerCase()\r\n          : \"\"}\r\n      </p>\r\n    )}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgdev.near/widget/gigs-board.components.posts.List", "fact_widget_deployments_id": "f2ea2bb3095eb960bf75934264e6f206", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}