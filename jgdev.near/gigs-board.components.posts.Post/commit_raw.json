{"tx_hash": "8MN7NN9NVxZ4Q3mhevqw6odBQDzd5jwKetfyU7yjUc87", "action_id_social": "8bAwLdpUXbVW465Kf51Lc7kE9X5LUsCqy4J8YrN887JF-0-widget", "block_id": 95170389, "block_timestamp": "2023-06-27T18:48:34.186Z", "signer_id": "jgdev.near", "widget_name": "gigs-board.components.posts.Post", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  // (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n  (context.widgetSrc ?? \"jgdev.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\nconst post =\n  props.post ??\n  Near.view(nearDevGovGigsContractAccountId, \"get_post\", { post_id: postId });\nif (!post) {\n  return <div>Loading ...</div>;\n}\n\nconst snapshot = post.snapshot;\n// If this post is displayed under another post. Used to limit the size.\nconst isUnderPost = props.isUnderPost ? true : false;\nconst parentId = Near.view(nearDevGovGigsContractAccountId, \"get_parent_id\", {\n  post_id: postId,\n});\n\nconst childPostIdsUnordered =\n  Near.view(nearDevGovGigsContractAccountId, \"get_children_ids\", {\n    post_id: postId,\n  }) ?? [];\n\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\nconst expandable = props.isPreview ? false : props.expandable ?? false;\nconst defaultExpanded = expandable ? props.defaultExpanded : false;\n\nfunction readableDate(timestamp) {\n  var a = new Date(timestamp);\n  return a.toDateString() + \" \" + a.toLocaleTimeString();\n}\n\nconst timestamp = readableDate(\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\n);\n\nconst postSearchKeywords = props.searchKeywords ? (\n  <div style={{ \"font-family\": \"monospace\" }} key=\"post-search-keywords\">\n    <span>Found keywords: </span>\n    {props.searchKeywords.map((label) => {\n      return <span class=\"badge text-bg-info me-1\">{label}</span>;\n    })}\n  </div>\n) : (\n  <div key=\"post-search-keywords\"></div>\n);\n\nconst searchKeywords = props.searchKeywords ? (\n  <div class=\"mb-1\" key=\"search-keywords\">\n    <small class=\"text-muted\">{postSearchKeywords}</small>\n  </div>\n) : (\n  <div key=\"search-keywords\"></div>\n);\n\nconst linkToParent =\n  isUnderPost || !parentId ? (\n    <div key=\"link-to-parent\"></div>\n  ) : (\n    <div className=\"card-header\" key=\"link-to-parent\">\n      <a href={href(\"Post\", { id: parentId })}>\n        <i class=\"bi bi-arrow-90deg-up\"></i>Go to parent{\" \"}\n      </a>\n    </div>\n  );\n\nconst allowedToEdit =\n  !props.isPreview &&\n  Near.view(nearDevGovGigsContractAccountId, \"is_allowed_to_edit\", {\n    post_id: postId,\n    editor: context.accountId,\n  });\n\nconst btnEditorWidget = (postType, name) => {\n  return (\n    <li>\n      <a\n        class=\"dropdown-item\"\n        data-bs-toggle=\"collapse\"\n        href={`#collapse${postType}Editor${postId}`}\n        role=\"button\"\n        aria-expanded=\"false\"\n        aria-controls={`collapse${postType}Editor${postId}`}\n      >\n        {name}\n      </a>\n    </li>\n  );\n};\n\nconst editControl = allowedToEdit ? (\n  <div class=\"btn-group\" role=\"group\">\n    <a\n      class=\"card-link px-2\"\n      role=\"button\"\n      title=\"Edit post\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n      type=\"button\"\n    >\n      <div class=\"bi bi-pencil-square\"></div>\n    </a>\n    <ul class=\"dropdown-menu\">\n      {btnEditorWidget(\"Idea\", \"Edit as an idea\")}\n      {btnEditorWidget(\"Submission\", \"Edit as a solution\")}\n      {btnEditorWidget(\"Attestation\", \"Edit as an attestation\")}\n      {btnEditorWidget(\"Sponsorship\", \"Edit as a sponsorship\")}\n      {btnEditorWidget(\"Comment\", \"Edit as a comment\")}\n    </ul>\n  </div>\n) : (\n  <div></div>\n);\n\nconst shareButton = props.isPreview ? (\n  <div></div>\n) : (\n  <a\n    class=\"card-link\"\n    href={href(\"Post\", { id: postId })}\n    role=\"button\"\n    target=\"_blank\"\n    title=\"Open in new tab\"\n    style={{ color: \"rgb(0,128,128)\", border: \"1em\" }}\n  >\n    <div class=\"bi bi-share\"></div>\n  </a>\n);\n\nconst StyledLink = styled.a`\n  color: rgba(0, 0, 0, 0.8);\n  font-size: inherit;\n  font-style: italic;\n  font-weight: bold;\n  opacity: 0.75;\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: end;\n  align-items: center;\n  width: 100%;\n  color: rgba(0, 0, 0, 0.8);\n  // padding: \"15px\";\n  margin-right: 16px;\n  font-size: 1.2em;\n`;\n\nconst ResponsiveDiv = styled.div`\n  display: flex;\n  justify-content: end;\n  align-items: center;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nconst accountId = post.author_id;\n\nconst header = (\n  <ResponsiveDiv className=\"py-1 px-3\" style={{ fontSize: \"1em\" }}>\n    <div className=\"d-flex align-items-center justify-content-between\">\n      <div\n        className=\"col-auto d-flex align-items-center\"\n        style={{ padding: \"20px\" }}\n      >\n        <div\n          className=\"square rounded-circle\"\n          style={{\n            overflow: \"hidden\",\n            width: \"3.33em\",\n            height: \"3.33em\",\n            backgroundColor: \"#008080\",\n          }}\n        >\n          <Widget\n            key=\"image\"\n            src=\"mob.near/widget/ProfileImage\"\n            props={{\n              style: { width: \"100%\", height: \"100%\" },\n              profile,\n              accountId,\n            }}\n          />\n        </div>\n        <div style={{ marginLeft: \"1em\" }}>\n          <span style={{ fontSize: \"1.35em\", fontWeight: \"700\" }}>\n            {post.author_id}\n          </span>\n          <span\n            key=\"accountId\"\n            className=\"text-muted \"\n            style={{\n              display: \"block\",\n              fontSize: \"1.2em\",\n              fontWeight: \"500\",\n              marginTop: \"-8px\",\n            }}\n          >\n            @{post.author_id}\n          </span>\n        </div>\n      </div>\n    </div>\n    <StyledDiv>\n      {editControl}\n      <span className=\"px-2\">{timestamp}</span>\n      <div className=\"bi bi-clock-history px-2\"></div>\n      {shareButton}\n    </StyledDiv>\n  </ResponsiveDiv>\n);\n\nconst emptyIcons = {\n  Idea: \"bi-lightbulb\",\n  Comment: \"bi-chat\",\n  Submission: \"bi-rocket\",\n  Attestation: \"bi-check-circle\",\n  Sponsorship: \"bi-cash-coin\",\n  Github: \"bi-github\",\n  Like: \"bi-heart\",\n  Reply: \"bi-reply\",\n};\n\nconst fillIcons = {\n  Idea: \"bi-lightbulb-fill\",\n  Comment: \"bi-chat-fill\",\n  Submission: \"bi-rocket-fill\",\n  Attestation: \"bi-check-circle-fill\",\n  Sponsorship: \"bi-cash-coin\",\n  Github: \"bi-github\",\n  Like: \"bi-heart-fill\",\n  Reply: \"bi-reply-fill\",\n};\n\nconst borders = {\n  Idea: \"border-secondary\",\n  Comment: \"border-secondary\",\n  Submission: \"border-secondary\",\n  Attestation: \"border-secondary\",\n  Sponsorship: \"border-secondary\",\n  Github: \"border-secondary\",\n};\n\nconst containsLike = props.isPreview\n  ? false\n  : post.likes.find((l) => l.author_id == context.accountId);\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearDevGovGigsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\nconst onLike = () => {\n  if (!context.accountId) {\n    return;\n  }\n  let likeTxn = [\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_like\",\n      args: {\n        post_id: postId,\n      },\n      deposit: Big(10).pow(21).mul(2),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ];\n\n  if (grantNotify === false) {\n    likeTxn.unshift({\n      contractName: \"social.near\",\n      methodName: \"grant_write_permission\",\n      args: {\n        predecessor_id: nearDevGovGigsContractAccountId,\n        keys: [context.accountId + \"/index/notify\"],\n      },\n      deposit: Big(10).pow(23),\n      gas: Big(10).pow(12).mul(30),\n    });\n  }\n  Near.call(likeTxn);\n};\n\nconst btnCreatorWidget = (postType, icon, name, desc) => {\n  return (\n    <li class=\"py-1\">\n      <a\n        class=\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\"\n        style={{ color: \"rgb(55,109,137)\" }}\n        data-bs-toggle=\"collapse\"\n        href={`#collapse${postType}Creator${postId}`}\n        role=\"button\"\n        aria-expanded=\"false\"\n        aria-controls={`collapse${postType}Creator${postId}`}\n      >\n        <i class={`bi ${icon}`} style={{ fontSize: \"1.5rem\" }}>\n          {\" \"}\n        </i>\n        <div class=\"ps-2 text-wrap\" style={{ width: \"18rem\" }}>\n          <div>{name}</div>\n          <small class=\"fw-light text-secondary\">{desc}</small>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nconst buttonsFooter = props.isPreview ? null : (\n  <div class=\"row \" key=\"buttons-footer\">\n    <div class=\"col-8\">\n      <div\n        class=\"btn-group text-sm\"\n        role=\"group\"\n        aria-label=\"Basic outlined example\"\n      >\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-secondary\"\n          style={{ border: \"0px\", opacity: \"0.7\" }}\n          onClick={onLike}\n        >\n          <i class={`bi ${likeBtnClass}`}> </i>\n          {post.likes.length == 0\n            ? \"Like\"\n            : widget(\"components.layout.LikeButton.Faces\", {\n                likesByUsers: Object.fromEntries(\n                  post.likes.map(({ author_id }) => [author_id, \"\"])\n                ),\n              })}\n        </button>\n        <div class=\"btn-group text-sm\" role=\"group\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-secondary\"\n            style={{ border: \"0px\", opacity: \"0.84\" }}\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            <i class={`bi ${emptyIcons.Reply}`}> </i> Reply\n          </button>\n          <ul class=\"dropdown-menu\">\n            {btnCreatorWidget(\n              \"Idea\",\n              emptyIcons.Idea,\n              \"Idea\",\n              \"Get feedback from the community about a problem, opportunity, or need.\"\n            )}\n            {btnCreatorWidget(\n              \"Submission\",\n              emptyIcons.Submission,\n              \"Solution\",\n              \"Provide a specific proposal or implementation to an idea, optionally requesting funding.\"\n            )}\n            {btnCreatorWidget(\n              \"Attestation\",\n              emptyIcons.Attestation,\n              \"Attestation\",\n              \"Formally review or validate a solution as a recognized expert.\"\n            )}\n            {btnCreatorWidget(\n              \"Sponsorship\",\n              emptyIcons.Sponsorship,\n              \"Sponsorship\",\n              \"Offer to fund projects, events, or proposals that match your needs.\"\n            )}\n            <li>\n              <hr class=\"dropdown-divider\" />\n            </li>\n            {btnCreatorWidget(\n              \"Comment\",\n              emptyIcons.Comment,\n              \"Comment\",\n              \"Ask a question, provide information, or share a resource that is relevant to the thread.\"\n            )}\n          </ul>\n        </div>\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-secondary text-sm\"\n          style={{ border: \"0px\", opacity: \"0.84\" }}\n          data-bs-toggle=\"collapse\"\n          href={`#collapseChildPosts${postId}`}\n          aria-expanded={defaultExpanded}\n          aria-controls={`collapseChildPosts${postId}`}\n        >\n          <i class=\"bi bi-arrows-expand\"> </i>{\" \"}\n          {`Expand Replies (${childPostIds.length})`}\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nconst CreatorWidget = (postType) => {\n  return (\n    <div\n      class=\"collapse\"\n      id={`collapse${postType}Creator${postId}`}\n      data-bs-parent={`#accordion${postId}`}\n    >\n      {widget(\"components.posts.PostEditor\", {\n        postType,\n        parentId: postId,\n        mode: \"Create\",\n      })}\n    </div>\n  );\n};\n\nconst EditorWidget = (postType) => {\n  return (\n    <div\n      class=\"collapse\"\n      id={`collapse${postType}Editor${postId}`}\n      data-bs-parent={`#accordion${postId}`}\n    >\n      {widget(\"components.posts.PostEditor\", {\n        postType,\n        postId,\n        mode: \"Edit\",\n        author_id: post.author_id,\n        name: post.snapshot.name,\n        description: post.snapshot.description,\n        labels: post.snapshot.labels,\n        amount: post.snapshot.amount,\n        token: post.snapshot.sponsorship_token,\n        supervisor: post.snapshot.supervisor,\n        githubLink: post.snapshot.github_link,\n      })}\n    </div>\n  );\n};\n\nconst editorsFooter = props.isPreview ? null : (\n  <div class=\"row\" id={`accordion${postId}`} key=\"editors-footer\">\n    {CreatorWidget(\"Comment\")}\n    {EditorWidget(\"Comment\")}\n    {CreatorWidget(\"Idea\")}\n    {EditorWidget(\"Idea\")}\n    {CreatorWidget(\"Submission\")}\n    {EditorWidget(\"Submission\")}\n    {CreatorWidget(\"Attestation\")}\n    {EditorWidget(\"Attestation\")}\n    {CreatorWidget(\"Sponsorship\")}\n    {EditorWidget(\"Sponsorship\")}\n    {CreatorWidget(\"Github\")}\n    {EditorWidget(\"Github\")}\n  </div>\n);\n\nconst renamedPostType =\n  snapshot.post_type == \"Submission\" ? \"Solution\" : snapshot.post_type;\n\nconst postLabels = post.snapshot.labels ? (\n  <div class=\"card-title\" key=\"post-labels\">\n    {post.snapshot.labels.map((label) => {\n      return (\n        <>\n          <a href={href(\"Feed\", { label })} key={label}>\n            <span\n              className=\"badge ms-1\"\n              style={{\n                color: \"rgba(0, 0, 0, 0.7)\",\n                fontSize: \"1em\",\n                fontWeight: \"normal\",\n                padding: \"0.2em 0.5em\",\n                border: \"1px solid rgba(0, 80, 80, 0.2)\",\n              }}\n            >\n              {label}\n            </span>\n          </a>\n        </>\n      );\n    })}\n  </div>\n) : (\n  <div key=\"post-labels\"></div>\n);\n\nconst postTitle =\n  snapshot.post_type == \"Comment\" ? (\n    <div key=\"post-title\"></div>\n  ) : (\n    <h5 class=\"card-title\" key=\"post-title\">\n      <div\n        className=\"row justify-content-between\"\n        style={{ fontSize: \"1.3em\", fontWeight: \"600\" }}\n      >\n        <div class=\"col-12\">\n          <i class={`bi ${emptyIcons[snapshot.post_type]}`}> </i>\n          {renamedPostType}: {snapshot.name}\n        </div>\n      </div>\n    </h5>\n  );\n\nconst postExtra =\n  snapshot.post_type == \"Sponsorship\" ? (\n    <div key=\"post-extra\">\n      <h6 class=\"card-subtitle  text-muted\">\n        Maximum amount: {snapshot.amount} {snapshot.sponsorship_token}\n      </h6>\n      <h6 class=\"card-subtitle  text-muted\">\n        Supervisor:{\" \"}\n        <Widget\n          src={`neardevgov.near/widget/ProfileLine`}\n          props={{ accountId: snapshot.supervisor }}\n        />\n      </h6>\n    </div>\n  ) : (\n    <div></div>\n  );\n\nconst postsList =\n  props.isPreview || childPostIds.length == 0 ? (\n    <div key=\"posts-list\"></div>\n  ) : (\n    <div class=\"row\" key=\"posts-list\">\n      <div\n        class={`collapse ${defaultExpanded ? \"show\" : \"\"}`}\n        id={`collapseChildPosts${postId}`}\n      >\n        {childPostIds.map((childId) =>\n          widget(\n            \"components.posts.Post\",\n            { id: childId, isUnderPost: true },\n            `subpost${childId}of${postId}`\n          )\n        )}\n      </div>\n    </div>\n  );\n\nconst Card = styled.div`\n  &:hover {\n    box-shadow: none;\n  }\n  box-shadow: none;\n  border: 3px solid #008080;\n  border-radius: 5px;\n`;\n\n// Determine if located in the post page.\nconst isInList = props.isInList;\nconst contentArray = snapshot.description.split(\"\\n\");\nconst needClamp = isInList && contentArray.length > 5;\n\n// Initialize 'clamp' to 'true' if the content is long enough, otherwise 'false'\ninitState({\n  clamp: needClamp,\n});\n\nconst onMention = (accountId) => (\n  <span key={accountId} className=\"d-inline-flex\" style={{ fontWeight: 500 }}>\n    <Widget\n      src=\"neardevgov.near/widget/ProfileLine\"\n      props={{\n        accountId: accountId.toLowerCase(),\n        hideAccountId: true,\n        tooltip: true,\n      }}\n    />\n  </span>\n);\n\n// Determine whether the content is longer than 4 lines\nconst isContentLong = contentArray.length > 5;\n\nconst clampedContent = state.clamp\n  ? contentArray.slice(0, 5).join(\"\\n\")\n  : snapshot.description;\n\n// Your CSS classes for styling. Make sure the names match exactly with the ones you're using in your divs.\nconst limitedMarkdown = styled.div`\n  max-height: 23em;\n`;\n\nconst clampMarkdown = styled.div`\n  .clamp {\n    display: -webkit-box;\n    -webkit-line-clamp: 5;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n`;\n\nconst descriptionArea = isUnderPost ? (\n  <limitedMarkdown\n    className=\"overflow-auto\"\n    key=\"description-area\"\n    style={{ paddingLeft: \"15px\", paddingRight: \"15px\", marginBottom: \"-30px\" }}\n  >\n    <Markdown\n      className=\"card-text\"\n      text={snapshot.description}\n      onMention={onMention}\n    />\n  </limitedMarkdown>\n) : (\n  <clampMarkdown>\n    <div\n      className={state.clamp ? \"clamp\" : \"\"}\n      style={{\n        fontSize: \"1.25rem\",\n        paddingLeft: \"15px\",\n        paddingRight: \"15px\",\n        marginBottom: \"-10px\",\n      }}\n    >\n      <Markdown\n        className=\"card-text --bs-btn-hover-color: #008080;\"\n        text={state.clamp ? clampedContent : snapshot.description}\n        onMention={onMention}\n        key=\"description-area\"\n      ></Markdown>\n    </div>\n    {state.clamp && isContentLong ? (\n      <div className=\"d-flex justify-content-end\">\n        <StyledLink>\n          <a\n            style={{ fontSize: \"1rem\", fontWeight: 800 }}\n            className=\"btn btn-link text-black\"\n            onClick={() => State.update({ clamp: false })}\n          >\n            <br></br>\n            See More...\n          </a>\n        </StyledLink>\n      </div>\n    ) : !state.clamp && isContentLong ? (\n      <div className=\"d-flex justify-content-end\">\n        <StyledLink>\n          <a\n            style={{ fontSize: \"1rem\", fontWeight: 800 }}\n            className=\"btn btn-link text-black\"\n            onClick={() => State.update({ clamp: true })}\n          >\n            ^ Close\n          </a>\n        </StyledLink>\n      </div>\n    ) : null}\n  </clampMarkdown>\n);\n\nreturn (\n  <Card className={`card my-2`}>\n    {linkToParent}\n    {header}\n    <div className=\"card-body \">\n      {searchKeywords}\n      {postTitle}\n      <br></br>\n      {postExtra}\n      {descriptionArea}\n      {postLabels}\n      {buttonsFooter}\n      {editorsFooter}\n      {postsList}\n    </div>\n  </Card>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgdev.near/widget/gigs-board.components.posts.Post", "fact_widget_deployments_id": "96efdf4d84da00428a0eed18d4e2f1c4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}