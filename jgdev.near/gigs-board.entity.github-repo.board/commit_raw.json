{"tx_hash": "BcYe9d89evL3vjVgdMnwpbvibpPbNXySho5zk1qFTWu8", "action_id_social": "8jUgEYkCNyTF1npBCbQmHvbFhY773i4jcLadCZxM2aWT-0-widget", "block_id": 94645739, "block_timestamp": "2023-06-20T22:27:53.588Z", "signer_id": "jgdev.near", "widget_name": "gigs-board.entity.github-repo.board", "source_code": "/* INCLUDE: \"common.jsx\" */\r\nconst nearDevGovGigsContractAccountId =\r\n  props.nearDevGovGigsContractAccountId ||\r\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\r\n\r\nconst nearDevGovGigsWidgetsAccountId =\r\n  props.nearDevGovGigsWidgetsAccountId ||\r\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\r\n\r\nfunction widget(widgetName, widgetProps, key) {\r\n  widgetProps = {\r\n    ...widgetProps,\r\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\r\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\r\n    referral: props.referral,\r\n  };\r\n\r\n  return (\r\n    <Widget\r\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\r\n      props={widgetProps}\r\n      key={key}\r\n    />\r\n  );\r\n}\r\n\r\nfunction href(widgetName, linkProps) {\r\n  linkProps = { ...linkProps };\r\n\r\n  if (props.nearDevGovGigsContractAccountId) {\r\n    linkProps.nearDevGovGigsContractAccountId =\r\n      props.nearDevGovGigsContractAccountId;\r\n  }\r\n\r\n  if (props.nearDevGovGigsWidgetsAccountId) {\r\n    linkProps.nearDevGovGigsWidgetsAccountId =\r\n      props.nearDevGovGigsWidgetsAccountId;\r\n  }\r\n\r\n  if (props.referral) {\r\n    linkProps.referral = props.referral;\r\n  }\r\n\r\n  const linkPropsQuery = Object.entries(linkProps)\r\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\r\n    .map(([key, value]) => `${key}=${value}`)\r\n    .join(\"&\");\r\n\r\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\r\n    linkPropsQuery ? \"?\" : \"\"\r\n  }${linkPropsQuery}`;\r\n}\r\n/* END_INCLUDE: \"common.jsx\" */\r\n\r\n/* INCLUDE: \"shared/lib/gui\" */\r\nconst Card = styled.div`\r\n  &:hover {\r\n    box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;\r\n  }\r\n`;\r\n\r\nconst CompactContainer = styled.div`\r\n  width: fit-content !important;\r\n  max-width: 100%;\r\n`;\r\n/* END_INCLUDE: \"shared/lib/gui\" */\r\n\r\nconst dataToColumns = (data, columns) =>\r\n  Object.values(columns).reduce(\r\n    (registry, column) => ({\r\n      ...registry,\r\n\r\n      [column.id]: [\r\n        ...(registry[column.id] ?? []),\r\n\r\n        ...data.filter((ticket) =>\r\n          column?.labelSearchTerms.every((searchTerm) =>\r\n            searchTerm.length > 0\r\n              ? ticket.labels.some((label) =>\r\n                  label.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n                )\r\n              : true\r\n          )\r\n        ),\r\n      ],\r\n    }),\r\n\r\n    {}\r\n  );\r\n\r\nconst withType = (type) => (data) => ({ ...data, type });\r\n\r\nconst GithubRepoBoard = ({\r\n  columns,\r\n  dataTypesIncluded,\r\n  description,\r\n  editorTrigger,\r\n  isEditable,\r\n  pageURL,\r\n  repoURL,\r\n  ticketState,\r\n  title,\r\n}) => {\r\n  const ticketStateForSure =\r\n    ticketState === \"open\" || ticketState === \"closed\" || ticketState === \"all\"\r\n      ? ticketState\r\n      : \"all\";\r\n\r\n  State.init({\r\n    ticketsByColumn: {},\r\n  });\r\n\r\n  if (repoURL) {\r\n    const pullRequests = dataTypesIncluded.PullRequest\r\n      ? (\r\n          fetch(\r\n            `https://api.github.com/repos/${repoURL\r\n              .split(\"/\")\r\n              .slice(-2)\r\n              .concat([\"pulls\"])\r\n              .join(\"/\")}?state=${ticketStateForSure}`\r\n          ).body ?? []\r\n        ).map(withType(\"PullRequest\"))\r\n      : [];\r\n\r\n    const issues = dataTypesIncluded.Issue\r\n      ? (\r\n          fetch(\r\n            `https://api.github.com/repos/${repoURL\r\n              .split(\"/\")\r\n              .slice(-2)\r\n              .concat([\"issues\"])\r\n              .join(\"/\")}state=${ticketStateForSure}`\r\n          ).body ?? []\r\n        ).map(withType(\"Issue\"))\r\n      : [];\r\n\r\n    State.update({\r\n      ticketsByColumn: dataToColumns([...issues, ...pullRequests], columns),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column gap-4 pb-4\">\r\n      <div className=\"d-flex flex-column align-items-center gap-2\">\r\n        <h5 className=\"h5 d-inline-flex gap-2 m-0\">\r\n          <i className=\"bi bi-kanban-fill\" />\r\n          <span>{title}</span>\r\n        </h5>\r\n\r\n        <p className=\"m-0 py-1 text-secondary text-center\">{description}</p>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-end gap-3\">\r\n        {pageURL ? (\r\n          <a\r\n            className=\"card-link d-inline-flex me-auto\"\r\n            href={pageURL}\r\n            rel=\"noreferrer\"\r\n            role=\"button\"\r\n            target=\"_blank\"\r\n            title=\"Link to this board\"\r\n          >\r\n            <span className=\"hstack gap-2\">\r\n              <i className=\"bi bi-share\" />\r\n              <span>Open in new tab</span>\r\n            </span>\r\n          </a>\r\n        ) : null}\r\n\r\n        {pageURL ? (\r\n          <button\r\n            className=\"btn btn-sm btn-outline-secondary d-inline-flex gap-2\"\r\n            onClick={() => clipboard.writeText(pageURL)}\r\n          >\r\n            <i className=\"bi bi-clipboard-fill\" />\r\n            <span>Copy link</span>\r\n          </button>\r\n        ) : null}\r\n\r\n        {isEditable ? (\r\n          <button\r\n            className=\"btn btn-sm btn-primary d-inline-flex gap-2\"\r\n            onClick={editorTrigger}\r\n          >\r\n            <i className=\"bi bi-wrench-adjustable-circle-fill\" />\r\n            <span>Configure</span>\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n\r\n      <div className=\"d-flex gap-3\" style={{ overflowX: \"auto\" }}>\r\n        {Object.keys(columns).length > 0 ? (\r\n          Object.values(columns).map((column) => (\r\n            <div className=\"col-3\" key={column.id}>\r\n              <div className=\"card\">\r\n                <div\r\n                  className={[\r\n                    \"card-body d-flex flex-column gap-3\",\r\n                    \"border border-2 border-secondary rounded-2\",\r\n                  ].join(\" \")}\r\n                >\r\n                  <h6 className=\"card-title h6 d-flex align-items-center gap-2 m-0\">\r\n                    {column.title}\r\n\r\n                    <span className=\"badge rounded-pill bg-secondary\">\r\n                      {(state.ticketsByColumn[column.id] ?? []).length}\r\n                    </span>\r\n                  </h6>\r\n\r\n                  <p class=\"text-secondary m-0\">{column.description}</p>\r\n\r\n                  <div class=\"d-flex flex-column gap-3\">\r\n                    {(state.ticketsByColumn[column.id] ?? []).map((data) =>\r\n                      widget(\"entity.github-repo.ticket\", { data }, data.id)\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div\r\n            className={[\r\n              \"d-flex align-items-center justify-content-center\",\r\n              \"w-100 text-black-50 opacity-50\",\r\n            ].join(\" \")}\r\n            style={{ height: 384 }}\r\n          >\r\n            No columns were created so far.\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn GithubRepoBoard(props);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgdev.near/widget/gigs-board.entity.github-repo.board", "fact_widget_deployments_id": "ca52675425deaedac4051c466f39ddc5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}