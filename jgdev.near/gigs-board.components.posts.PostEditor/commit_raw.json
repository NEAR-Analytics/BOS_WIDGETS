{"tx_hash": "BcYe9d89evL3vjVgdMnwpbvibpPbNXySho5zk1qFTWu8", "action_id_social": "8jUgEYkCNyTF1npBCbQmHvbFhY773i4jcLadCZxM2aWT-0-widget", "block_id": 94645739, "block_timestamp": "2023-06-20T22:27:53.588Z", "signer_id": "jgdev.near", "widget_name": "gigs-board.components.posts.PostEditor", "source_code": "/* INCLUDE: \"common.jsx\" */\r\nconst nearDevGovGigsContractAccountId =\r\n  props.nearDevGovGigsContractAccountId ||\r\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\r\n\r\nconst nearDevGovGigsWidgetsAccountId =\r\n  props.nearDevGovGigsWidgetsAccountId ||\r\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\r\n\r\nfunction widget(widgetName, widgetProps, key) {\r\n  widgetProps = {\r\n    ...widgetProps,\r\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\r\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\r\n    referral: props.referral,\r\n  };\r\n\r\n  return (\r\n    <Widget\r\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\r\n      props={widgetProps}\r\n      key={key}\r\n    />\r\n  );\r\n}\r\n\r\nfunction href(widgetName, linkProps) {\r\n  linkProps = { ...linkProps };\r\n\r\n  if (props.nearDevGovGigsContractAccountId) {\r\n    linkProps.nearDevGovGigsContractAccountId =\r\n      props.nearDevGovGigsContractAccountId;\r\n  }\r\n\r\n  if (props.nearDevGovGigsWidgetsAccountId) {\r\n    linkProps.nearDevGovGigsWidgetsAccountId =\r\n      props.nearDevGovGigsWidgetsAccountId;\r\n  }\r\n\r\n  if (props.referral) {\r\n    linkProps.referral = props.referral;\r\n  }\r\n\r\n  const linkPropsQuery = Object.entries(linkProps)\r\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\r\n    .map(([key, value]) => `${key}=${value}`)\r\n    .join(\"&\");\r\n\r\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\r\n    linkPropsQuery ? \"?\" : \"\"\r\n  }${linkPropsQuery}`;\r\n}\r\n/* END_INCLUDE: \"common.jsx\" */\r\n\r\nconst postType = props.postType ?? \"Sponsorship\";\r\nconst parentId = props.parentId ?? null;\r\nconst postId = props.postId ?? null;\r\nconst mode = props.mode ?? \"Create\";\r\n\r\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\r\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\r\nconst labels = labelStrings.map((s) => {\r\n  return { name: s };\r\n});\r\n\r\nconst initState = props.initState;\r\nconst handleStateChange = props.handleStateChange;\r\n\r\ninitState({\r\n  author_id: context.accountId,\r\n  // Should be a list of objects with field \"name\".\r\n  labels,\r\n  // Should be a list of labels as strings.\r\n  // Both of the label structures should be modified together.\r\n  labelStrings,\r\n  postType,\r\n  name: props.name ?? \"\",\r\n  description: props.description ?? \"\",\r\n  amount: props.amount ?? \"0\",\r\n  token: props.token ?? \"Near\",\r\n  supervisor: props.supervisor ?? \"\",\r\n  githubLink: props.githubLink ?? \"\",\r\n  warning: \"\",\r\n});\r\nconst savedState = Storage.getItem(\"widgetState\");\r\nif (savedState) {\r\n  handleStateChange(JSON.parse(savedState));\r\n}\r\n\r\nlet fields = {\r\n  Comment: [\"description\"],\r\n  Idea: [\"name\", \"description\"],\r\n  Submission: [\"name\", \"description\"],\r\n  Attestation: [\"name\", \"description\"],\r\n  Sponsorship: [\r\n    \"name\",\r\n    \"description\",\r\n    \"amount\",\r\n    \"sponsorship_token\",\r\n    \"supervisor\",\r\n  ],\r\n  Github: [\"githubLink\", \"name\", \"description\"],\r\n}[postType];\r\n\r\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\r\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\r\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\r\n  predecessor_id: nearDevGovGigsContractAccountId,\r\n  key: context.accountId + \"/index/notify\",\r\n});\r\nif (grantNotify === null) {\r\n  return;\r\n}\r\nconst onSubmit = () => {\r\n  let labels = state.labelStrings;\r\n  var body = {\r\n    Comment: { description: state.description, comment_version: \"V2\" },\r\n    Idea: {\r\n      name: state.name,\r\n      description: state.description,\r\n      idea_version: \"V1\",\r\n    },\r\n    Submission: {\r\n      name: state.name,\r\n      description: state.description,\r\n      submission_version: \"V1\",\r\n    },\r\n    Attestation: {\r\n      name: state.name,\r\n      description: state.description,\r\n      attestation_version: \"V1\",\r\n    },\r\n    Sponsorship: {\r\n      name: state.name,\r\n      description: state.description,\r\n      amount: state.amount,\r\n      sponsorship_token: state.token,\r\n      supervisor: state.supervisor,\r\n      sponsorship_version: \"V1\",\r\n    },\r\n    Github: {\r\n      name: state.name,\r\n      description: state.description,\r\n      github_version: \"V0\",\r\n      github_link: state.githubLink,\r\n    },\r\n  }[postType];\r\n  body[\"post_type\"] = postType;\r\n  if (!context.accountId) {\r\n    return;\r\n  }\r\n  let txn = [];\r\n  if (mode == \"Create\") {\r\n    txn.push({\r\n      contractName: nearDevGovGigsContractAccountId,\r\n      methodName: \"add_post\",\r\n      args: {\r\n        parent_id: parentId,\r\n        labels,\r\n        body,\r\n      },\r\n      deposit: Big(10).pow(21).mul(2),\r\n      gas: Big(10).pow(12).mul(100),\r\n    });\r\n  } else if (mode == \"Edit\") {\r\n    txn.push({\r\n      contractName: nearDevGovGigsContractAccountId,\r\n      methodName: \"edit_post\",\r\n      args: {\r\n        id: postId,\r\n        labels,\r\n        body,\r\n      },\r\n      deposit: Big(10).pow(21).mul(2),\r\n      gas: Big(10).pow(12).mul(100),\r\n    });\r\n  }\r\n  if (mode == \"Create\" || mode == \"Edit\") {\r\n    if (grantNotify === false) {\r\n      txn.unshift({\r\n        contractName: \"social.near\",\r\n        methodName: \"grant_write_permission\",\r\n        args: {\r\n          predecessor_id: nearDevGovGigsContractAccountId,\r\n          keys: [context.accountId + \"/index/notify\"],\r\n        },\r\n        deposit: Big(10).pow(23),\r\n        gas: Big(10).pow(12).mul(30),\r\n      });\r\n    }\r\n    Near.call(txn);\r\n  }\r\n};\r\n\r\nconst githubLinkDiv = fields.includes(\"githubLink\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Github Issue URL:\r\n    <input\r\n      type=\"text\"\r\n      value={state.githubLink}\r\n      onChange={(event) => State.update({ githubLink: event.target.value })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst nameDiv = fields.includes(\"name\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Name:\r\n    <input\r\n      type=\"text\"\r\n      value={state.name}\r\n      onChange={(event) => State.update({ name: event.target.value })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst descriptionDiv = fields.includes(\"description\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Description:\r\n    <textarea\r\n      rows=\"5\"\r\n      value={state.description}\r\n      onChange={(event) => State.update({ description: event.target.value })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst amountDiv = fields.includes(\"amount\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Amount:\r\n    <input\r\n      type=\"text\"\r\n      value={state.amount}\r\n      onChange={(event) => State.update({ amount: event.target.value })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst tokenDiv = fields.includes(\"sponsorship_token\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Token:\r\n    <input\r\n      type=\"text\"\r\n      value={state.token}\r\n      onChange={(event) => State.update({ token: event.target.value })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst supervisorDiv = fields.includes(\"supervisor\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Supervisor:\r\n    <input\r\n      type=\"text\"\r\n      value={state.supervisor}\r\n      onChange={(event) => State.update({ supervisor: event.target.value })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst labelDiv = fields.includes(\"labels\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Labels:\r\n    <input\r\n      type=\"text\"\r\n      value={state.labelStrings.join(\",\")}\r\n      onChange={(event) => {\r\n        let labels = event.target.value.split(\",\");\r\n        labels = labels.map((o) => {\r\n          o = o.trim();\r\n          checkLabel(o);\r\n          return { name: o };\r\n        });\r\n        State.update({ labels, labelStrings: event.target.value.split(\",\") });\r\n      }}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst postTypeDiv = fields.includes(\"post_type\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Post Type:\r\n    <select\r\n      value={state.postType}\r\n      onChange={(event) => State.update({ postType: event.target.value })}\r\n    >\r\n      <option value=\"Proposal\">Proposal</option>\r\n      <option value=\"Issue\">Issue</option>\r\n      <option value=\"Grant\">Grant</option>\r\n    </select>\r\n  </div>\r\n) : null;\r\n\r\nconst grantNotifyDiv = fields.includes(\"grantNotify\") ? (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Grant Notify:\r\n    <input\r\n      type=\"checkbox\"\r\n      checked={state.grantNotify}\r\n      onChange={(event) => State.update({ grantNotify: event.target.checked })}\r\n    />\r\n  </div>\r\n) : null;\r\n\r\nconst normalizeLabel = (label) =>\r\n  label\r\n    .replaceAll(/[- \\.]/g, \"_\")\r\n    .replaceAll(/[^\\w]+/g, \"\")\r\n    .replaceAll(/_+/g, \"-\")\r\n    .replace(/^-+/, \"\")\r\n    .replace(/-+$/, \"\")\r\n    .toLowerCase()\r\n    .trim(\"-\");\r\n\r\nconst checkLabel = (label) => {\r\n  Near.asyncView(nearDevGovGigsContractAccountId, \"is_allowed_to_use_labels\", {\r\n    editor: context.accountId,\r\n    labels: [label],\r\n  }).then((allowed) => {\r\n    if (allowed) {\r\n      State.update({ warning: \"\" });\r\n    } else {\r\n      State.update({\r\n        warning:\r\n          'The label \"' +\r\n          label +\r\n          '\" is protected and can only be added by moderators',\r\n      });\r\n      return;\r\n    }\r\n  });\r\n};\r\n\r\nconst setLabels = (labels) => {\r\n  labels = labels.map((o) => {\r\n    o.name = normalizeLabel(o.name);\r\n    return o;\r\n  });\r\n  if (labels.length < state.labels.length) {\r\n    let oldLabels = new Set(state.labels.map((label) => label.name));\r\n    for (let label of labels) {\r\n      oldLabels.delete(label.name);\r\n    }\r\n    let removed = oldLabels.values().next().value;\r\n    Near.asyncView(\r\n      nearDevGovGigsContractAccountId,\r\n      \"is_allowed_to_use_labels\",\r\n      { editor: context.accountId, labels: [removed] }\r\n    ).then((allowed) => {\r\n      if (allowed) {\r\n        let labelStrings = labels.map(({ name }) => name);\r\n        State.update({ labels, labelStrings });\r\n      } else {\r\n        State.update({\r\n          warning:\r\n            'The label \"' +\r\n            removed +\r\n            '\" is protected and can only be updated by moderators',\r\n        });\r\n        return;\r\n      }\r\n    });\r\n  } else {\r\n    let labelStrings = labels.map((o) => {\r\n      return o.name;\r\n    });\r\n    State.update({ labels, labelStrings });\r\n  }\r\n};\r\nconst existingLabelStrings =\r\n  Near.view(nearDevGovGigsContractAccountId, \"get_all_allowed_labels\", {\r\n    editor: context.accountId,\r\n  }) ?? [];\r\nconst existingLabelSet = new Set(existingLabelStrings);\r\nconst existingLabels = existingLabelStrings.map((s) => {\r\n  return { name: s };\r\n});\r\n\r\nconst labelEditor = (\r\n  <div className=\"col-lg-12  mb-2\">\r\n    Labels:\r\n    <Typeahead\r\n      multiple\r\n      labelKey=\"name\"\r\n      onInputChange={checkLabel}\r\n      onChange={setLabels}\r\n      options={existingLabels}\r\n      placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\r\n      selected={state.labels}\r\n      positionFixed\r\n      allowNew={(results, props) => {\r\n        return (\r\n          !existingLabelSet.has(props.text) &&\r\n          props.selected.filter((selected) => selected.name === props.text)\r\n            .length == 0 &&\r\n          Near.view(\r\n            nearDevGovGigsContractAccountId,\r\n            \"is_allowed_to_use_labels\",\r\n            { editor: context.accountId, labels: [props.text] }\r\n          )\r\n        );\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst disclaimer = (\r\n  <p>\r\n    <i>\r\n      * Note, all projects that were granted sponsorships are required to pass\r\n      KYC to receive the funding.\r\n    </i>\r\n  </p>\r\n);\r\n\r\nconst renamedPostType = postType == \"Submission\" ? \"Solution\" : postType;\r\n// Below there is a weird code with fields.includes(\"githubLink\") ternary operator.\r\n// This is to hack around rendering bug of near.social.\r\nreturn (\r\n  <div className=\"card\">\r\n    <div className=\"card-header\">\r\n      {mode} {renamedPostType}\r\n    </div>\r\n\r\n    <div class=\"card-body\">\r\n      {state.warning ? (\r\n        <div\r\n          class=\"alert alert-warning alert-dismissible fade show\"\r\n          role=\"alert\"\r\n        >\r\n          {state.warning}\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn-close\"\r\n            data-bs-dismiss=\"alert\"\r\n            aria-label=\"Close\"\r\n            onClick={() => State.update({ warning: \"\" })}\r\n          ></button>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {fields.includes(\"githubLink\") ? (\r\n        <div className=\"row\">\r\n          {githubLinkDiv}\r\n          {labelEditor}\r\n          {nameDiv}\r\n          {descriptionDiv}\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          {labelEditor}\r\n          {nameDiv}\r\n          {amountDiv}\r\n          {tokenDiv}\r\n          {supervisorDiv}\r\n          {descriptionDiv}\r\n        </div>\r\n      )}\r\n\r\n      <a className=\"btn btn-outline-primary mb-2\" onClick={onSubmit}>\r\n        Submit\r\n      </a>\r\n      {disclaimer}\r\n    </div>\r\n    <div class=\"card-footer\">\r\n      Preview:\r\n      {widget(\"components.posts.Post\", {\r\n        isPreview: true,\r\n        id: 0, // irrelevant\r\n        post: {\r\n          author_id: state.author_id,\r\n          likes: [],\r\n          snapshot: {\r\n            editor_id: state.editor_id,\r\n            labels: state.labelStrings,\r\n            post_type: postType,\r\n            name: state.name,\r\n            description: state.description,\r\n            amount: state.amount,\r\n            sponsorship_token: state.token,\r\n            supervisor: state.supervisor,\r\n            github_link: state.githubLink,\r\n          },\r\n        },\r\n      })}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/jgdev.near/widget/gigs-board.components.posts.PostEditor", "fact_widget_deployments_id": "cf698aad8382d7d98e737e886c5b2d3b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 12}