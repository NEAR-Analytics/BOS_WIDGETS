{"tx_hash": "5A914CVx5wp4PrmV4vR8ZPqG1XWz5x5XUAa3rWZPMEfn", "action_id_social": "An2wEwLfL4s1vpUGMuDCqWmMpAScyqwVTjVriT7jLdXk-0-widget", "block_id": 101802626, "block_timestamp": "2023-09-23T21:49:03.107Z", "signer_id": "azbang.near", "widget_name": "plaid", "source_code": "const PLAID_API = \"http://localhost:3000\";\nState.init({\n  origin: null,\n  selected: null,\n  accessToken: \"access-sandbox-ba9ee489-90fd-4b20-be28-96f9828cc5da\",\n});\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return \"Please connect Ethereum wallet\";\nconst signer = Ethers.provider().getSigner(sender);\n\nconst AppContainer = styled.div`\n  width: 400px;\n  margin: auto;\n  overflow-y: auto;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst Transaction = styled.div`\n  padding: 16px;\n  border-radius: 12px;\n  margin: 0 12px 12px;\n  border: 1px solid #ccc;\n  position: relative;\n  cursor: pointer;\n  transition: 0.2s box-shadow;\n  p { margin: 0; }\n\n  &:hover {\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst Checkbox = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n\n  display: block;\n  border: 2px solid var(--bs-body-bg, #fff); \n  box-shadow: 0 0 0 4px #255ff4;\n  transition: 0.2s background-color;\n  background-color: transparent;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n\n  &.active {\n    background-color: #255ff4;\n  }\n\n`;\n\nconst VerifyButton = styled.button`\n  color: #fff;\n  font-size: 16px;\n  display: flex;\n  flex-direction: center;\n  align-items: center;\n  background-color: #255ff4;\n  position: absolute;\n  bottom: 0;\n  padding: 16px;\n  width: 250px;\n  border-radius: 32px;\n  border: none;\n  left: 50%;\n  margin-left: -125px;\n  text-align: center;\n  font-weight: bold;\n  transition: 0.2s background-color;\n  height: 64px;\n  &:hover {\n    color: #fff;\n    text-decoration: none;\n    background-color: rgb(107 148 255);\n  }\n`;\n\nconst accessToken = state.accessToken || Storage.privateGet(\"plaidAccessToken\");\nif (accessToken === null) return null;\n\nif (accessToken) {\n  const response = fetch(`${PLAID_API}/transactions?token=${accessToken}`);\n  if (!response.ok) return null;\n\n  const handleVerify = () => {\n    if (state.verifing) return;\n    State.update({ verifing: true });\n    const tr_num = response.body.added.findIndex(\n      (t) => t.transaction_id === state.selected\n    );\n\n    State.update({\n      iframe: {\n        type: \"verify\",\n        date: tx.date,\n        access_token: state.accessToken,\n        tr_num,\n      },\n    });\n  };\n\n  const handleVerified = (data) => {\n    if (data.type !== \"verified\") return;\n    const address = \"0xFB7eF820cF2316f922CD6C55082B00232c643604\";\n    const abi = [\n      \"function addTransaction(bytes memory serializedData, bytes32 r, bytes32 s, uint8 v)\",\n    ];\n\n    const contract = new ethers.Contract(address, abi, Ethers.provider());\n    const r = ethers.utils.arrayify(data.r);\n    const s = ethers.utils.arrayify(data.s);\n    const bytes = ethers.utils.arrayify(data.data);\n    contract.addTransaction(bytes, r, s, data.v).then((tx) => {\n      tx.wait().then(() => State.update({ verifing: false }));\n    });\n  };\n\n  const signedMessage =\n    \"localhost wants you to sign in with your Ethereum account:\\n\" +\n    \"0xf915Aa479b06d4c81cbba39EB939E4c2EF27ADae\\n\" +\n    \"\\n\" +\n    \"This is a test statement.  You can put anything you want here.\\n\" +\n    \"\\n\" +\n    \"URI: https://localhost/login\\n\" +\n    \"Version: 1\\n\" +\n    \"Chain ID: 1\\n\" +\n    \"Nonce: qkyHZMeNi5oGjroWK\\n\" +\n    \"Issued At: 2023-09-23T20:16:52.328Z\";\n\n  const iframeSrc = `\n    <script>\n        let litNodeClient;\n        fetch(\"https://cdn.jsdelivr.net/npm/@lit-protocol/lit-node-client-vanilla/lit-node-client.js\").then(res => res.text()).then(code => {\n            const script = document.createElement('script');\n            eval(code.replaceAll(\"window.localStorage\", \"window.MockLocalStorage\").replace(\"var LitJsSdk_litNodeClient\", \"window.LitJsSdk_litNodeClient\"))\n\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    const sdk = window.LitJsSdk_litNodeClient\n                    litNodeClient = new sdk.LitNodeClientNodeJs({\n                        alertWhenUnauthorized: false,\n                        litNetwork: \"serrano\",\n                        debug: true,\n                    });\n                    \n                    resolve(litNodeClient)\n                }, 1000);\n            })\n\n        })\n\n        window.addEventListener(\"message\", async ({ data }) => {\n            if (data?.type !== \"verify\") return;\n            const { date, access_token, tr_num } = data;\n            \n            const pkpPubKey = \"0x04f80a948f038f5d69855268f749457d5b465b78fd7bf603de13bd4bf01d718175bf512c828414e227a8289e7512b331658394c4d37a34aec3eca9c585056b7180\";\n            await litNodeClient.connect();\n\n            const {signatures, response, logs} = await litNodeClient.executeJs({\n                ipfsId: \"QmVSUsJAcQY3PB84dcVKZYsjizScYB1pXZHp9oVnR4QRHU\",\n                authSig: {\n                    sig: '0x90fd44268518c4e7eb28a879f71af07bb4b8722e0c52c7537f616665c368c3761f7275e311f14a5a5a4eacc61f223b4e2a233adadc110a8d58d827029a1a146c1b',\n                    derivedVia: 'web3.eth.personal.sign',\n                    signedMessage: \\`${signedMessage}\\`,\n                    address: '0xf915Aa479b06d4c81cbba39EB939E4c2EF27ADae'\n                },\n                jsParams: {\n                    chain: \"ethereum\",\n                    publicKey: pkpPubKey,\n                    sigName: \"sig1\",\n                    access_token,\n                    transaction_id,\n                    start_date: date,\n                    end_date: date,\n                    client_id: \"650ec5e216ecbb001b12ca1d\",\n                    secret: \"3618a4c3bb886629ad11e32c2e139b\",\n                    tr_num\n                },\n            });\n\n            window.top.postMessage({ type: \"verified\", data: response }, \"*\");\n        }, false);\n    </script>  \n  `;\n\n  const appStyle = { marginTop: 48, paddingBottom: 24, position: \"relative\" };\n  return (\n    <div>\n      <iframe\n        srcDoc={iframeSrc}\n        message={state.iframe}\n        onMessage={handleVerified}\n        style={{ display: \"none\" }}\n      ></iframe>\n      <AppContainer style={appStyle}>\n        <h4 style={{ fontWeight: \"bold\" }}>Plaid x Blockhain</h4>\n        <p>Select payment to verify it on-chain:</p>\n        <AppContainer style={{ height: 500 }}>\n          {response.body?.added.map((tx) => (\n            <Transaction\n              key={tx.transaction_id}\n              onClick={() => State.update({ selected: tx.transaction_id })}\n            >\n              <p style={{ fontWeight: \"bold\" }}>{tx.name}</p>\n              <p>\n                {tx.amount} {tx.iso_currency_code}\n              </p>\n              <Checkbox\n                key={tx.transaction_id}\n                onClick={() => State.update({ selected: tx.transaction_id })}\n                className={state.selected === tx.transaction_id && \"active\"}\n              />\n            </Transaction>\n          ))}\n        </AppContainer>\n        <VerifyButton onClick={() => handleVerify()}>\n          {state.verifing ? (\n            <Widget\n              src=\"azbang.near/widget/dots-spinner\"\n              props={{\n                style: {\n                  height: 32,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  margin: \"auto\",\n                },\n              }}\n            />\n          ) : (\n            <div style={{ margin: \"auto\" }}>Verify transaction</div>\n          )}\n        </VerifyButton>\n      </AppContainer>\n    </div>\n  );\n}\n\n// Connecting bank\nif (props.public_token) {\n  const response = fetch(`${PLAID_API}/exchange-public-token`, {\n    body: JSON.stringify({ public_token: props.public_token }),\n    headers: { \"Content-Type\": \"application/json\" },\n    method: \"POST\",\n  });\n\n  if (response?.ok) {\n    Storage.privateSet(\"plaidAccessToken\", response.body.access_token);\n    State.update({ accessToken: response.body.access_token });\n    return null;\n  }\n}\n\nconst isBOSgg = state.origin?.includes(\"bos.gg\");\nconst location = `${state.origin}${isBOSgg ? \"#\" : \"\"}/${context.widgetSrc}`;\nconst src = `\n<script>\nconst origin = document.location.ancestorOrigins[0];\nwindow.top.postMessage(origin, \"*\")\n</script>\n`;\n\nreturn (\n  <div style={{ marginTop: 48, background: \"#fff\" }}>\n    <a href={`${PLAID_API}?return_url=${location}`}>\n      <VerifyButton style={{ position: \"initial\", margin: \"auto\" }}>\n        <span style={{ margin: \"auto\" }}>Connect bank</span>\n      </VerifyButton>\n    </a>\n\n    <iframe\n      style={{ display: \"none\" }}\n      onMessage={(origin) => State.update({ origin })}\n      srcDoc={src}\n    ></iframe>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/azbang.near/widget/plaid", "fact_widget_deployments_id": "747d6faa63d35400760e449a2fcfc859", "inserted_timestamp": "2023-09-23T23:40:35.114Z", "modified_timestamp": "2023-09-23T23:40:35.114Z", "__row_index": 92}