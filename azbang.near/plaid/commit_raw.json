{"tx_hash": "Af58q27Z2EzwCrjARWtC1L9BjBph8hQXF6hww1sfDTRR", "action_id_social": "CsAqVkWeUV4kpWX6NdGyUui7QQ69SCeEYMqr4pSjQMCY-0-widget", "block_id": 101855926, "block_timestamp": "2023-09-24T15:01:50.400Z", "signer_id": "azbang.near", "widget_name": "plaid", "source_code": "State.init({ origin: null, selected: null });\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return \"Please connect Ethereum wallet\";\nconst signer = Ethers.provider().getSigner(sender);\n\nconst PLAID_API = \"https://ethnyc.herewallet.app\";\nconst PLAID_ADDR = \"0xa52210eA78f678D10e0dD47DeC64ff6ACD3Fbe8B\"; // Eth goerli\nconst PLAID_ABI = [\n  \"function addTransaction(bytes memory serializedData, bytes32 r, bytes32 s, uint8 v)\",\n];\nconst PLAID_CONTRACT = new ethers.Contract(PLAID_ADDR, PLAID_ABI, signer);\n\nconst AppContainer = styled.div`\n  width: 400px;\n  margin: auto;\n  overflow-y: auto;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  * {\n    font-family:  -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n  }\n`;\n\nconst Transaction = styled.div`\n  padding: 16px;\n  border-radius: 12px;\n  margin-bottom: 16px;\n  border: 1px solid #ccc;\n  position: relative;\n  cursor: pointer;\n  transition: 0.2s box-shadow;\n  p { margin: 0; }\n`;\n\nconst Checkbox = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n\n  display: block;\n  border: 2px solid var(--bs-body-bg, #fff); \n  box-shadow: 0 0 0 4px #255ff4;\n  transition: 0.2s background-color;\n  background-color: transparent;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n\n  &.active {\n    background-color: #255ff4;\n  }\n\n`;\n\nconst VerifyButton = styled.button`\n  color: #fff;\n  font-size: 16px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #255ff4;\n  position: absolute;\n  bottom: 0;\n  padding: 16px;\n  width: 250px;\n  border-radius: 32px;\n  border: none;\n  left: 50%;\n  margin-left: -125px;\n  text-align: center;\n  font-weight: bold;\n  transition: 0.2s background-color;\n  height: 64px;\n  &:hover {\n    color: #fff;\n    text-decoration: none;\n    background-color: rgb(107 148 255);\n  }\n`;\n\nconst accessToken = state.accessToken || Storage.privateGet(\"plaidAccessToken\");\nif (accessToken === null) return \"\";\n\nif (accessToken) {\n  console.log(accessToken);\n  const response = fetch(`${PLAID_API}/transactions?token=${accessToken}`);\n  if (!response.ok) return \"\";\n  const transactions = response.body?.added || [];\n\n  const handleVerify = () => {\n    if (props.debug) {\n      props.onVerified({\n        transactionId:\n          \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      });\n      return;\n    }\n\n    if (state.verifing) return;\n    const trx = transactions.find((t) => t.transaction_id === state.selected);\n    const fetchTrxs = `${PLAID_API}/transactions/get?token=${accessToken}&date=${trx.date}`;\n    const trxId = trx.transaction_id;\n    State.update({ verifing: true });\n\n    signer.getAddress().then((address) => {\n      const fetchSiweFormat = `${PLAID_API}/siwe-message?address=${address}&msg=Verify bank transaction`;\n      asyncFetch(fetchSiweFormat).then((signedMessageResponse) => {\n        const signedMessage = signedMessageResponse.body.siwe;\n        console.log(signedMessage);\n\n        signer.signMessage(signedMessage).then((signed) => {\n          asyncFetch(fetchTrxs).then((resp) => {\n            const list = resp.body.transactions;\n            const tr_num = list.findIndex((t) => t.transaction_id === trxId);\n            State.update({\n              iframe: {\n                type: \"verify\",\n                date: list[tr_num].date,\n                access_token: accessToken,\n                signedMessage,\n                address,\n                signed,\n                tr_num,\n              },\n            });\n          });\n        });\n      });\n    });\n  };\n\n  const handleVerified = ({ type, data }) => {\n    if (type !== \"verified\") return;\n    const r = ethers.utils.arrayify(data.r);\n    const s = ethers.utils.arrayify(data.s);\n    const bytes = ethers.utils.arrayify(data.data);\n    PLAID_CONTRACT.addTransaction(bytes, r, s, data.v).then((tx) => {\n      tx.wait().then(() => {\n        State.update({ verifing: false });\n        if (props.onVerified) props.onVerified(data);\n      });\n    });\n  };\n\n  const handleLogout = () => {\n    Storage.privateSet(\"plaidAccessToken\", undefined);\n    State.update({ accessToken: undefined });\n  };\n\n  const iframeSrc = `\n    <script>\n        const litNodeClientTask = fetch(\"https://cdn.jsdelivr.net/npm/@lit-protocol/lit-node-client-vanilla/lit-node-client.js\").then(res => res.text()).then(code => {\n            const script = document.createElement('script');\n            eval(code.replaceAll(\"window.localStorage\", \"window.MockLocalStorage\").replace(\"var LitJsSdk_litNodeClient\", \"window.LitJsSdk_litNodeClient\"))\n\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    const sdk = window.LitJsSdk_litNodeClient\n                    litNodeClient = new sdk.LitNodeClientNodeJs({\n                        alertWhenUnauthorized: false,\n                        litNetwork: \"serrano\",\n                        debug: true,\n                    });\n\n                    resolve(litNodeClient)\n                }, 1000);\n            })\n        })\n\n        window.addEventListener(\"message\", async ({ data }) => {\n            if (data?.type !== \"verify\") return;\n            const litNodeClient = await litNodeClientTask\n            const { date,signedMessage, address, signed, access_token, tr_num } = data;\n            console.log(data)\n            \n            const pkpPubKey = \"0x049fc61db9b056619fbd8b59fce3483b6baa9a7a00a251e7905e92a40a18ec5895e0a712ef9ef00db3f6ce8082a985472062440fb311df9cdc350ec7e8919f31f2\";\n            await litNodeClient.connect();\n\n            const {signatures, response, logs} = await litNodeClient.executeJs({\n                ipfsId: \"QmTioWBHeq1rSKdtBZwwsmw59WabAmPr6c8dVcWDHiP7cY\",\n                authSig: {\n                    sig: signed,\n                    derivedVia: 'web3.eth.personal.sign',\n                    signedMessage: signedMessage,\n                    address: address\n                },\n                jsParams: {\n                    chain: \"ethereum\",\n                    publicKey: pkpPubKey,\n                    sigName: \"sig1\",\n                    access_token,\n                    start_date: date,\n                    end_date: date,\n                    client_id: \"650ec5e216ecbb001b12ca1d\",\n                    secret: \"3618a4c3bb886629ad11e32c2e139b\",\n                    tr_num\n                },\n            });\n\n            window.top.postMessage({ type: \"verified\", data: response }, \"*\");\n        }, false);\n    </script>  \n  `;\n\n  const appStyle = { marginTop: 48, paddingBottom: 24, position: \"relative\" };\n  return (\n    <div>\n      <iframe\n        srcDoc={iframeSrc}\n        message={state.iframe}\n        onMessage={handleVerified}\n        style={{ display: \"none\" }}\n      ></iframe>\n\n      <AppContainer style={appStyle}>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div style={{ flex: 1 }}>\n            <h4 style={{ fontWeight: \"bold\" }}>Plaid x Blockhain</h4>\n            <p>Select payment to verify it on-chain:</p>\n          </div>\n\n          <VerifyButton\n            onClick={() => handleLogout()}\n            style={{\n              width: 100,\n              height: 42,\n              position: \"initial\",\n              margin: \"auto\",\n            }}\n          >\n            Logout\n          </VerifyButton>\n        </div>\n\n        <AppContainer style={{ height: 500 }}>\n          {transactions.map((tx) => (\n            <Transaction\n              key={tx.transaction_id}\n              onClick={() => State.update({ selected: tx.transaction_id })}\n            >\n              <p style={{ fontWeight: \"bold\" }}>{tx.name}</p>\n              <p>\n                {tx.amount} {tx.iso_currency_code}\n              </p>\n              <Checkbox\n                key={tx.transaction_id}\n                onClick={() => State.update({ selected: tx.transaction_id })}\n                className={state.selected === tx.transaction_id && \"active\"}\n              />\n            </Transaction>\n          ))}\n        </AppContainer>\n        {state.selected && (\n          <VerifyButton onClick={() => handleVerify()}>\n            {state.verifing ? (\n              <Widget\n                src=\"azbang.near/widget/dots-spinner\"\n                props={{\n                  style: {\n                    height: 32,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    margin: \"auto\",\n                  },\n                }}\n              />\n            ) : (\n              <div style={{ margin: \"auto\" }}>Verify transaction</div>\n            )}\n          </VerifyButton>\n        )}\n      </AppContainer>\n    </div>\n  );\n}\n\n// Connecting bank\nif (props.public_token) {\n  const response = fetch(`${PLAID_API}/exchange-public-token`, {\n    body: JSON.stringify({ public_token: props.public_token }),\n    headers: { \"Content-Type\": \"application/json\" },\n    method: \"POST\",\n  });\n\n  if (response?.ok) {\n    Storage.privateSet(\"plaidAccessToken\", response.body.access_token);\n    State.update({ accessToken: response.body.access_token });\n    return \"\";\n  }\n}\n\nconst isBOSgg = state.origin ? state.origin.includes(\"bos.gg\") : false;\nconst location = `${state.origin}${isBOSgg ? \"#\" : \"/\"}${\n  props.widgetSrc || context.widgetSrc\n}`;\nconst src = `\n<script>\nconst origin = document.location.ancestorOrigins[0];\nwindow.top.postMessage(origin, \"*\")\n</script>\n`;\n\nreturn (\n  <div style={{ marginTop: 48 }}>\n    <a\n      style={{ width: 300, display: \"block\" }}\n      href={`${PLAID_API}?return_url=${location}`}\n    >\n      <VerifyButton style={{ width: 300, position: \"initial\", margin: \"auto\" }}>\n        Connect bank via Plaid\n      </VerifyButton>\n    </a>\n\n    <p style={{ marginTop: 8 }}>\n      For debug use this credentials: user_good, pass_good\n    </p>\n\n    <iframe\n      style={{ display: \"none\" }}\n      onMessage={(origin) => State.update({ origin })}\n      srcDoc={src}\n    ></iframe>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/azbang.near/widget/plaid", "fact_widget_deployments_id": "6d68ca17bcef5dcd0fdbb3e25a33d933", "inserted_timestamp": "2023-09-24T16:46:57.007Z", "modified_timestamp": "2023-09-24T16:46:57.007Z", "__row_index": 0}