{"tx_hash": "rsGTeqt18PU7qCpGNbavgfmAszxJrPHyJRpN9opuuFw", "action_id_social": "7MKpkR8q8gUGrC3yZCSuiN3JxRVbZCt54JscmvNrpiHx-0-widget", "block_id": 101845014, "block_timestamp": "2023-09-24T11:29:16.563Z", "signer_id": "azbang.near", "widget_name": "xmtp-chat", "source_code": "State.init({\n  receiver: null,\n  messages: [],\n  iframe: {},\n});\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return \"Please login first\";\n\nconst signer = Ethers.provider().getSigner(sender);\n\nconst onIframe = (data) => {\n  console.log(data);\n  if (data.type === \"signMessage\") {\n    signer.signMessage(data.data).then((res) => {\n      console.log(res);\n      State.update({ iframe: { id: data.id, resolve: res } });\n    });\n  }\n\n  if (data.type === \"getAddress\") {\n    signer.getAddress().then((addr) => {\n      State.update({ iframe: { id: data.id, resolve: addr } });\n    });\n  }\n\n  if (data.type === \"getItem\") {\n    const result = Storage.privateGet(data.data);\n    State.update({ iframe: { id: data.id, resolve: { result } } });\n  }\n\n  if (data.type === \"setItem\") {\n    Storage.privateSet(data.data.key, data.data.value);\n    State.update({ iframe: { id: data.id, resolve: true } });\n  }\n\n  if (data.type === \"loadMessages\") {\n    State.update({\n      iframe: { id: data.id, resolve: true },\n      messages: data.data,\n    });\n  }\n\n  if (data.type === \"newMessage\") {\n    State.update({\n      iframe: { id: data.id, resolve: true },\n      messages: state.messages.concat([data.data]),\n    });\n  }\n};\n\nconst handleStartChat = (receiver) => {\n  State.update({\n    receiver: receiver || state.msgValue,\n    msgValue: \"\",\n    iframe: {\n      type: \"startChat\",\n      data: receiver || state.msgValue,\n    },\n  });\n};\n\nconst handleMessage = () => {\n  State.update({\n    msgValue: \"\",\n    iframe: {\n      type: \"message\",\n      data: state.msgValue,\n    },\n  });\n};\n\nconsole.log(props.receiver);\nif (props.receiver && state.receiver == null) {\n  handleStartChat(props.receiver);\n}\n\nconst xmtpMessages = `\n<script src=\"https://nftstorage.link/ipfs/bafybeifophz4lgi5iyz5rpjmvy7pujqidloqkv4skanhvy3z7p5airwjdu\"></script>\n<script>\n class IframeRPC {\n    _id = 0;\n    _tasks = new Map();\n    _subs = new Map();\n\n    constructor() {\n        window.addEventListener(\"message\", (event) => {\n            const data = event.data\n            let task = this._tasks.get(data.id)\n            console.log(data);\n\n            if (data.resolve) task.resolve(data.resolve)\n            if (data.reject) task.reject(data.reject)\n            if (data.type) this._subs.get(data.type)?.forEach(cb => cb(data.data))\n        }, false);\n    }\n\n    call(type, data) {\n        const id = this._id++;\n        window.top.postMessage({ type, data, id }, \"*\");\n        return new Promise((resolve, reject) => {\n            this._tasks.set(id, { resolve, reject })\n        })\n    }\n\n    on(type, cb) {\n        const listeners = this._subs.get(type)\n        if (listeners == null) return this._subs.set(type, new Set([cb]));\n        listeners.set(cb);\n    }\n }\n \nclass RemoteSigner {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n\n    getAddress() {\n        return this.rpc.call(\"getAddress\")\n    }\n\n    signMessage(data) {\n        return this.rpc.call(\"signMessage\", data)\n    }\n}\n\nconst rpc = new IframeRPC();\nconst signer = new RemoteSigner(rpc);\nwindow.MockLocalStorage = {\n    setItem(key, value) {\n        return rpc.call(\"setItem\", { key, value })\n    },\n    getItem(key) {\n        return rpc.call(\"getItem\", key).then(t => t.result)\n    }\n}\n\nlet conversation;\nrpc.on(\"message\", (data) => {\n    conversation.send(data);\n})\n\nrpc.on(\"startChat\", async (address) => {\n    const xmtp = await window.xmtp.Client.create(signer, {\n      basePersistence: window.MockLocalStorage,\n      env: \"production\",\n    });\n\n    conversation = await xmtp.conversations.newConversation(address);\n    const messages = await conversation.messages();\n    rpc.call(\"loadMessages\", messages.map(t => ({ text: t.content })));\n\n    for await (const message of await conversation.streamMessages()) {\n        rpc.call(\"newMessage\", { text: message.content });\n    }\n});\n</script>\n`;\n\nconst App = styled.div`\n  * {\n    font-family:  -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n  }\n`;\n\nconst MessageForm = styled.div`\n    display: flex;\n    flex-direction: row;\n    height: 60px;\n    input { \n        border-radius: 8px 0 0 8px; \n        flex: 1; \n    }\n\n    button { \n        border-radius: 0 8px 8px 0; \n        flex-shrink: 0;\n        height: 100%;\n    }\n`;\n\nconst ChatView = styled.div`\n    border: 1px solid #6c757d;\n    width: 400px;\n    height: 600px;\n    border-radius: 16px;\n`;\n\nconst Message = styled.div`\n    border-radius: 12px;\n    border: 1px solid #6c757d;\n    padding: 12px;\n    margin-bottom: 8px;\n`;\n\nreturn (\n  <App>\n    <iframe\n      style={{ display: \"none\" }}\n      srcDoc={xmtpMessages}\n      message={state.iframe}\n      onMessage={onIframe}\n    ></iframe>\n\n    <ChatView>\n      <div style={{ flex: 1, height: 500, padding: 16, overflowY: \"auto\" }}>\n        {state.messages.map((t) => (\n          <Message>{t.text}</Message>\n        ))}\n      </div>\n\n      <div style={{ padding: 16 }}>\n        <MessageForm>\n          <input\n            value={state.msgValue}\n            onChange={(e) => State.update({ msgValue: e.target.value })}\n            placeholder={\n              state.receiver != null ? \"Enter message\" : \"Enter Eth address\"\n            }\n          />\n          {state.receiver != null ? (\n            <button onClick={handleMessage}>Send</button>\n          ) : (\n            <button onClick={handleStartChat}>Start chat</button>\n          )}\n        </MessageForm>\n      </div>\n    </ChatView>\n  </App>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/azbang.near/widget/xmtp-chat", "fact_widget_deployments_id": "3157f340ae80610a4b83ad800649a768", "inserted_timestamp": "2023-09-24T13:29:29.955Z", "modified_timestamp": "2023-09-24T13:29:29.955Z", "__row_index": 0}