{"tx_hash": "9QVx8WexyQQAfk1kmxJsrHUB89NccakL2HyAr2JAqfyk", "action_id_social": "GeUyBfFHoxaMZ5Fgdfunr61DJMD6We8ph522z5Z26zW1-0-widget", "block_id": 115815038, "block_timestamp": "2024-03-30T23:22:09.925Z", "signer_id": "kiskesis.near", "widget_name": "stake-weighted-checker", "source_code": "const Input = styled.input`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0.5em 0.75em;\n  gap: 0.5em;\n  background: #ffffff;\n  border: 1px solid #d0d5dd;\n  box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);\n  border-radius: 4px;\n`;\n\nconst LabelArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 0.25em;\n  margin-bottom: 0.5em;\n  flex-wrap: wrap;\n`;\n\nconst Error = styled.small`\n  color: red;\n`;\n\nconst CodeSnippet = styled.div`\n  font-family: monospace;\n  white-space: pre-wrap;\n  margin: 0;\n`;\n\nconst CardContainer = styled.div`\n  background-color: #ffebee; /* Soft red color */\n  padding: 20px;\n  border-radius: 8px;\n  max-width: 500px;\n  margin: 20px auto;\n`;\n\nconst Message = styled.p`\n  color: #b71c1c; /* Darker red color for emphasis */\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nconst Link = styled.a`\n  color: #b71c1c; /* Darker red color for emphasis */\n  text-decoration: underline;\n  cursor: pointer;\n`;\n\nState.init({\n  valid: true,\n  accountId: \"\",\n  errorMessage: <></>,\n  votingPower: null,\n  voterInfo: null,\n});\n\nconst validate = (accountId) => {\n  const accountIdRegex =\n    /^(([a-z\\d]+[\\-_])*[a-z\\d]+\\.)*([a-z\\d]+[\\-_])*[a-z\\d]+$/;\n\n  if (typeof accountId !== \"string\") {\n    State.update({\n      accountId: \"\",\n      valid: false,\n      errorMessage: \"Account ID must be a text value!\",\n    });\n    return;\n  }\n\n  if (accountId.length < 2) {\n    State.update({\n      accountId: \"\",\n      valid: false,\n      errorMessage: \"Account ID must be at least 2 characters long!\",\n    });\n    return;\n  }\n\n  if (accountId.length > 64) {\n    State.update({\n      accountId: \"\",\n      valid: false,\n      errorMessage: \"Account ID must be at most 64 characters long!\",\n    });\n    return;\n  }\n\n  if (!accountIdRegex.test(accountId)) {\n    State.update({\n      accountId: \"\",\n      valid: false,\n      errorMessage: (\n        <>\n          Account ID must follow the rules specified{\" \"}\n          <a href=\"https://nomicon.io/DataStructures/Account#account-id-rules\">\n            here\n          </a>\n          and ends on .near!\n        </>\n      ),\n    });\n    return;\n  }\n\n  State.update({ valid: true, errorMessage: \"\", accountId });\n};\n\nconst accountId = props.accountId ?? \"Login with NEAR Wallet\";\n\nconst getVotingPower = (accountId) => {\n  const votingPower = asyncFetch(\"https://rpc.testnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: \"dontcare\",\n      method: \"query\",\n      jsonrpc: \"2.0\",\n      params: {\n        request_type: \"call_function\",\n        finality: \"final\",\n        account_id: \"snapshot-test.testnet\",\n        method_name: \"get_vote_power\",\n        args_base64: btoa(JSON.stringify({ voter: `${accountId}` })),\n      },\n    }),\n  }).then((res) => {\n    State.update({\n      votingPower: String.fromCharCode(...res.body.result.result),\n    });\n  });\n\n  const voterInfo = asyncFetch(\"https://rpc.testnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: \"dontcare\",\n      method: \"query\",\n      jsonrpc: \"2.0\",\n      params: {\n        request_type: \"call_function\",\n        finality: \"final\",\n        account_id: \"snapshot-test.testnet\",\n        method_name: \"get_eligible_voter_info\",\n        args_base64: btoa(JSON.stringify({ account_id: `${accountId}` })),\n      },\n    }),\n  }).then((res) => {\n    State.update({\n      voterInfo: JSON.parse(String.fromCharCode(...res.body.result.result)),\n    });\n  });\n};\n\nconst Card = ({ children, className }) => {\n  return (\n    <div\n      className={`card ${className}`}\n      style={{ maxWidth: \"800px\", padding: \"2px\" }}\n    >\n      <div className=\"card-body p-2\">{children}</div>\n    </div>\n  );\n};\n\nconst CardTitle = ({ children, className }) => {\n  return <p className={`card-title ${className}`}>{children}</p>;\n};\n\nconst codeSnippet = `stakepower = if stake > 1000 (configurable) \n  1000 + sqrt(stake - 1000)\nelse {\n  stake\n}\nactivity_power = 20 * active_months\n\nresult = stake_power + activity_power`;\n\nreturn (\n  <div className=\"d-flex flex-column align-items-center p-4\">\n    <h1>Check your voting power for NDC Stake-Weighted mechanism</h1>\n    <CardContainer>\n      <Message>\n        Your vote matters! Please take a moment to cast your vote and help shape\n        the future of our community.\n      </Message>\n      <p>\n        Don't forget to{\" \"}\n        <Link href=\"https://near.org/astraplusplus.ndctools.near/widget/home?page=dao&tab=proposals&daoId=voting-body-v1.ndc-gwg.near&proposalId=11\">\n          cast your vote\n        </Link>{\" \"}\n        to support this stake-weighted solution or reject it if you didn't like\n        it.\n      </p>\n    </CardContainer>\n    <p>\n      Type the account which you want to validate 'XXX.near' and click button to\n      see your voting power and related information\n    </p>\n    <LabelArea>\n      <div className=\"d-flex flex-column justify-content-center align-items-center\">\n        <Input\n          id\n          type=\"text\"\n          value={v}\n          onChange={(e) => validate(e.target.value)}\n          className=\"w-100\"\n          style={{ maxWidth: \"200px\" }}\n        />\n        <Error>{state.valid ? <></> : state.errorMessage}</Error>\n      </div>\n    </LabelArea>\n    <button onClick={() => getVotingPower(state.accountId)}>\n      Get Voting Power\n    </button>\n    {state.votingPower && (\n      <div>\n        <b>Voting Power:</b> {state.votingPower}\n      </div>\n    )}\n    {state.voterInfo && (\n      <div>\n        <div>\n          <b>Active Months:</b> {state.voterInfo.active_months}\n        </div>\n        <div>\n          <b>Stake:</b> {state.voterInfo.stake}\n        </div>\n      </div>\n    )}\n    <Card className=\"mt-3\">\n      <CardTitle>Calculation of Voting Power</CardTitle>\n      <pre\n        style={{\n          backgroundColor: \"#f3f3f3\",\n          padding: \"10px\",\n          borderRadius: \"5px\",\n          overflowX: \"auto\",\n        }}\n      >\n        <CodeSnippet>{codeSnippet}</CodeSnippet>\n      </pre>\n    </Card>\n    <p>\n      Explanation of voting power: The maximum voting power for the tokens is\n      1000 <br></br>\n      <br></br> Additionally if you ever staked with your account you can have\n      20*active onchain months voting power Total is around 150k accounts that\n      can potentially vote\n    </p>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/kiskesis.near/widget/stake-weighted-checker", "fact_widget_deployments_id": "cdcd384e1667e396dd91fb45885ff62b", "inserted_timestamp": "2024-03-31T00:50:56.529Z", "modified_timestamp": "2024-03-31T02:01:46.772Z", "__row_index": 1}