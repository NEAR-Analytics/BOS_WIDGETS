{"tx_hash": "HNMHgh98WMKKj8cNkEgxRZ2H4JwXcg2uuwgm23Lkax2t", "action_id_social": "G8gS2HfsHkWMbU28RUtaZSADHugNgbLZ8qtPdYaPJPgs-0-widget", "block_id": 117167165, "block_timestamp": "2024-04-19T10:55:04.490Z", "signer_id": "bos.bluntdao.near", "widget_name": "RequestSesh", "source_code": "const accountId = props.accountId;\nconst questionBlockHeight = props.questionBlockHeight;\n// console.log(\"questionBlockHeight: \", questionBlockHeight);\nconst currentAccountId = context.accountId;\nconst profile = Social.getr(`${accountId}/profile`);\n// You can use this code to know the blockheights of your question in case you need to test. Just use one blockheight in the props.\n// const testBlockHeights = Social.keys(\n//   `${accountId}/post/poll_question/*`,\n//   \"final\",\n//   {\n//     return_type: \"History\",\n//   }\n// );\n// console.log(\"testBlockHeights: \", testBlockHeights);\nconst question = Social.get(\n  `${accountId}/post/poll_question/question`,\n  questionBlockHeight\n);\n// console.log(\"question: \", question);\nconst questionTimestamp = Social.get(\n  `${accountId}/post/poll_question/question_timestamp`, // maybe be wrong\n  questionBlockHeight\n);\nconst profileLink = (c) => (\n  <a\n    className=\"text-decoration-none link-dark\"\n    href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n  >\n    {c}\n  </a>\n);\nconst answerDataFromBlockHeight = Social.keys(\n  `*/post/answer_poll/${questionBlockHeight}`, // forked from poll, need to display results properly\n  \"final\",\n  {\n    return_type: \"History\",\n  }\n);\n// console.log(\"answerDataFromBlockHeight: \", answerDataFromBlockHeight);\nlet answersData = Object.keys(answerDataFromBlockHeight).map((key) => {\n  return {\n    accountId: key,\n    // Social.keys returns in the end a an array of blockHeight related to the query.\n    // In our case, we only care for one answer, so it's always the first one\n    blockHeightOfAnswer:\n      answerDataFromBlockHeight[key].post.answer_poll[questionBlockHeight][0],\n  };\n});\n// console.log(\"answData: \", answersData);\nconst haveThisUserAlreadyVoted = () => {\n  if (answersData.length == 0) {\n    return false;\n  }\n  for (let i = 0; i < answersData.length; i++) {\n    return answersData[i].accountId == currentAccountId;\n  }\n};\nlet countVotes = answersData.reduce(\n  (acc, curr) => {\n    let answer = Social.get(\n      `${curr.accountId}/post/answer_poll/${questionBlockHeight}/user_vote`,\n      curr.blockHeightOfAnswer\n    );\n    if (answer == 0) {\n      return [acc[0], acc[1], acc[2] + 1];\n    } else if (answer == 1) {\n      return [acc[0], acc[1] + 1, acc[2]];\n    } else {\n      return [acc[0], acc[1], acc[2] + 1];\n    }\n    // return answer == 1 ? [acc[0] + 1, acc[1]] : [acc[0], acc[1] + 1];\n  },\n  [0, 0, 0] // need to change this too to a conditional inceremnting each one, dont know if its going background // changed from [0,0]\n);\nconst loadComments = () => {\n  for (let i = 0; i < answersData.length; i++) {\n    let answer = Social.get(\n      `${answersData.accountId}/post/answer_poll/${answersData[i].blockHeightOfAnswer}/user_answers`\n    );\n    console.log(\"answer: \", answer);\n    let answerTimeStamp = Social.get(\n      `${answersData.accountId}/post/answer_poll/${answersData[i].blockHeightOfAnswer}/answer_timestamps`\n    );\n    console.log(\"answerTimeStamp: \", answerTimeStamp);\n    if (answer != undefined) {\n      return (\n        <Widget\n          src=\"bluntdao.near/widget/PickAStick\" // changed this from poll\n          props={{ answer, answerTimeStamp }}\n        />\n      );\n    }\n  }\n};\nState.init({ vote: \"\", currentAnswer: \"\" });\n// console.log(\"input vote value: \", state.vote, \"textarea value: \", state.currentAnswer);\nconst getForm = () => (\n  <div\n    style={{\n      border: \"1px solid #e9e9e9\",\n      borderRadius: \"20px\",\n      padding: \"1rem\",\n    }}\n  >\n    <h5>Which smoking stick do you pick? \ud83d\uddf3\ufe0f\ud83d\udca8\ud83c\udf43</h5>\n    <p style={{ marginBottom: \"0\" }}>Vote:</p>\n    <div className=\"form-check\">\n      <input\n        key={state.vote}\n        disabled={haveThisUserAlreadyVoted()}\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"flexRadioDefault\"\n        id=\"voteBlunt\"\n        value=\"2\"\n        onChange={onValueChange}\n        checked={state.vote == \"2\"}\n      />\n      <label className=\"form-check-label\" for=\"voteBlunt\">\n        Blunt\n      </label>\n    </div>\n    <div className=\"form-check\">\n      <input\n        key={state.vote}\n        disabled={haveThisUserAlreadyVoted()}\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"flexRadioDefault\"\n        id=\"voteBlunt\"\n        value=\"1\"\n        onChange={onValueChange}\n        checked={state.vote == \"1\"}\n      />\n      <label className=\"form-check-label\" for=\"voteJoint\">\n        Joint\n      </label>\n    </div>\n    <div className=\"form-check\">\n      <input\n        key={state.vote}\n        disabled={haveThisUserAlreadyVoted()}\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"flexRadioDefault\"\n        id=\"voteSpliff\"\n        value=\"0\"\n        onChange={onValueChange}\n        checked={state.vote == \"0\"}\n      />\n      <label className=\"form-check-label\" for=\"voteSpliff\">\n        Spliff\n      </label>\n    </div>\n    {haveThisUserAlreadyVoted() && (\n      <p className=\"text-danger\">You burned \ud83d\udd25 your only answer</p>\n    )}\n    <div className=\"form-group\">\n      <label for=\"answer\" className=\"font-weight-bold\">\n        Write answer:\n      </label>\n      <textarea\n        className=\"form-control mb-1\"\n        id=\"answer\"\n        rows=\"3\"\n        value={state.currentAnswer}\n        onChange={(e) => {\n          const currentAnswer = e.target.value;\n          State.update({ currentAnswer });\n        }}\n      ></textarea>\n    </div>\n    <CommitButton\n      data={{\n        post: {\n          answer_poll: {\n            [questionBlockHeight]: {\n              user_vote: state.vote == \"\" ? answer.userVote : state.vote,\n              user_answers: currentAnswer,\n              answer_timestamps: Date.now(),\n            },\n          },\n        },\n      }}\n    >\n      Confirm\n    </CommitButton>\n  </div>\n);\nfunction onValueChange(e) {\n  const vote = e.target.value;\n  State.update({ vote });\n}\nconst timeAgo = (diffSec) =>\n  diffSec < 60000\n    ? `${(diffSec / 1000) | 0} seconds ago`\n    : diffSec < 3600000\n    ? `${(diffSec / 60000) | 0} minutes ago`\n    : diffSec < 86400000\n    ? `${(diffSec / 3600000) | 0} hours ago`\n    : `${(diffSec / 86400000) | 0} days ago`;\nreturn (\n  <div style={{ maxWidth: \"40em\" }}>\n    <div\n      className=\"d-flex align-items-start\"\n      style={{\n        padding: \"1.5rem 0\",\n        borderBottom: \"1px solid #e9e9e9\",\n      }}\n    >\n      <div>\n        {profileLink(\n          <Widget src=\"mob.near/widget/ProfileImage\" props={{ accountId }} />\n        )}\n      </div>\n      <div className=\"ms-2 flex-grow-1\" style={{ minWidth: 0 }}>\n        <div className=\"d-flex justify-content-start\">\n          <div className=\"flex-grow-1 me-1 text-truncate\">\n            {profileLink(\n              <>\n                <span className=\"fw-bold\">{profile.name}</span>\n                <span className=\"text-secondary\">@{accountId}</span>\n              </>\n            )}\n          </div>\n          <div>\n            <small className=\"ps-1 text-nowrap text-muted ms-auto\">\n              <i className=\"bi bi-clock me-1\"></i>\n              {timeAgo(Date.now() - questionTimestamp)}\n            </small>\n          </div>\n        </div>\n        <div>{question}</div>\n        <div className=\"d-flex align-items-start\">\n          <i\n            className=\"bi bi-3-circle-fill\" // maybe change bootstrap icon or number the questions\n            style={{ padding: \"0 0.3rem\" }}\n          ></i>\n          <p className=\"text-secondary\">{countVotes[2]}</p>\n          <i\n            className=\"bi bi-2-circle-fill\"\n            style={{ padding: \"0 0.3rem\" }}\n          ></i>\n          <p className=\"text-secondary\">{countVotes[1]}</p>\n          <i\n            className=\"bi bi-1-circle-fill\"\n            style={{ padding: \"0 0.5rem 0 1rem\" }}\n          ></i>\n          <p className=\"text-secondary\">{countVotes[0]}</p>\n        </div>\n        <>{loadComments()}</>\n        <>{getForm()}</>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.bluntdao.near/widget/RequestSesh", "fact_widget_deployments_id": "0525af7b86c5cffba967fa1f1e3ec702", "inserted_timestamp": "2024-04-19T12:36:52.445Z", "modified_timestamp": "2024-04-19T12:36:52.445Z", "__row_index": 0}