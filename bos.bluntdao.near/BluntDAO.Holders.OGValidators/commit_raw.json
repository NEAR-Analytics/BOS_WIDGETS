{"tx_hash": "HNMHgh98WMKKj8cNkEgxRZ2H4JwXcg2uuwgm23Lkax2t", "action_id_social": "G8gS2HfsHkWMbU28RUtaZSADHugNgbLZ8qtPdYaPJPgs-0-widget", "block_id": 117167165, "block_timestamp": "2024-04-19T10:55:04.490Z", "signer_id": "bos.bluntdao.near", "widget_name": "BluntDAO.Holders.OGValidators", "source_code": "const limit = 20;\nconst series = props.series ?? \"1\"; // add series filter\nconst title = props.title ?? \"Total OG BluntDAO\";\nconst showHeader = props.showHeader ?? true;\nconst showImage = props.showImage ?? false;\n// add what nft they have and then add filter of unique people, add link to collection\n// add condition if no props fetch all collection\n// add condition to only propose if you have privalige\n// fix limit\nState.init({\n  offset: 0,\n  tokens: [],\n  hasMore: true,\n});\nconst roleCheckThisUser = props.roleCheckThisUser ?? context.accountId; // maybe make conditional if not in dao\nconst isOG = false;\nconst roleToCheck = props.roleToCheck ?? \"OG BLUNT VALIDATORS\";\nconst proposalKinds = {\n  ChangeConfig: \"config\",\n  ChangePolicy: \"policy\",\n  AddMemberToRole: \"add_member_to_role\",\n  RemoveMemberFromRole: \"remove_member_from_role\",\n  FunctionCall: \"call\",\n  UpgradeSelf: \"upgrade_self\",\n  UpgradeRemote: \"upgrade_remote\",\n  Transfer: \"transfer\",\n  SetStakingContract: \"set_vote_token\",\n  AddBounty: \"add_bounty\",\n  BountyDone: \"bounty_done\",\n  Vote: \"vote\",\n  FactoryInfoUpdate: \"factory_info_update\",\n  ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n  ChangePolicyRemoveRole: \"policy_remove_role\",\n  ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n  ChangePolicyUpdateParameters: \"policy_update_parameters\",\n};\nconst actions = {\n  AddProposal: \"AddProposal\",\n  VoteApprove: \"VoteApprove\",\n  VoteReject: \"VoteReject\",\n  VoteRemove: \"VoteRemove\",\n};\n// -- Get all the roles from the DAO policy\nlet roles = Near.view(daoId, \"get_policy\");\nroles = roles === null ? [] : roles.roles;\nconst getUserRoles = (user) => {\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (user && role.kind.Group && role.kind.Group.includes(user)) {\n      userRoles.push(role.name);\n    }\n  }\n  return userRoles;\n};\nconst isUserAllowedTo = (user, kind, action) => {\n  // -- Filter the user roles\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (user && role.kind.Group && role.kind.Group.includes(user)) {\n      userRoles.push(role);\n    }\n  }\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n  userRoles\n    .filter(({ permissions }) => {\n      const allowedRole =\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n        permissions.includes(`${kind.toString()}:*`) ||\n        permissions.includes(`*:${action.toString()}`) ||\n        permissions.includes(\"*:*\");\n      allowed = allowed || allowedRole;\n      return allowedRole;\n    })\n    .map((role) => role.name);\n  return allowed;\n};\nconst userRoles = accountId ? getUserRoles(roleCheckThisUser) : [];\nisOG = userRoles.includes(roleToCheck);\nfunction fetchTokens() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n            mb_views_nft_tokens(\n               \n                offset: ${state.offset}\n              where: { nft_contract_id: { _eq: \"bluntdao.snft.near\" } token_id: {_regex: \"^${series}:\"}}\n              order_by: {minted_timestamp: desc}\n            ) {\n              media\n              owner\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      const tokens = res.body.data.mb_views_nft_tokens;\n      if (tokens.length > 0) {\n        State.update({\n          tokens: [...state.tokens, ...tokens],\n          offset: state.offset + limit,\n          hasMore: true,\n        });\n      } else {\n        State.update({\n          hasMore: false,\n        });\n      }\n    }\n  });\n}\nfunction Sharddog({ owner, media }) {\n  const size = \"100px\";\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-3\">\n        {showImage && (\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: {\n                url: media,\n              },\n              style: {\n                width: size,\n                height: size,\n                objectFit: \"cover\",\n                minWidth: size,\n                minHeight: size,\n                maxWidth: size,\n                maxHeight: size,\n                overflowWrap: \"break-word\",\n              },\n            }}\n          />\n        )}\n      </div>\n      <div className=\"col-sm-12\">\n        <Widget\n          src=\"bos.bluntdao.near/widget/BluntDAO.member\"\n          props={{\n            accountId: owner,\n            isOG: isOG,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\nconst size = \"144px\";\nconst Grid = styled.div`\n  display: row;\n`;\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading ...\n  </div>\n);\nreturn (\n  <>\n    {showHeader && (\n      <h1>\n        {title}: {state.tokens.length}\n      </h1>\n    )}\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={fetchTokens}\n      hasMore={state.hasMore}\n      loader={loader}\n    >\n      <Grid>\n        {state.tokens?.map((it) => {\n          return <Sharddog owner={it.owner} media={it.media} />;\n        })}\n      </Grid>\n    </InfiniteScroll>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.bluntdao.near/widget/BluntDAO.Holders.OGValidators", "fact_widget_deployments_id": "9ab1b1d00896ea5e5f901605a66a60dc", "inserted_timestamp": "2024-04-19T12:36:52.445Z", "modified_timestamp": "2024-04-19T12:36:52.445Z", "__row_index": 1}