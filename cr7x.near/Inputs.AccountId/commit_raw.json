{"tx_hash": "HeGpJ7e8D9N9fjE1fDsdvkrBHKi8KHVGfx5HAwqtsuGG", "action_id_social": "FKdxBKfQ4ae8SufjeMPdZs6FxksJ6oQ3JYcHVJsY2PwJ-0-widget", "block_id": 99454438, "block_timestamp": "2023-08-23T06:48:30.350Z", "signer_id": "cr7x.near", "widget_name": "Inputs.AccountId", "source_code": null, "metadata": null, "branch": {"draft": {"": "const ownerId = \"cr7x.near\";\nconst label = props.label ?? \"Account ID\";\nconst placeholder = props.placeholder ?? \"Enter your account ID\";\nconst value = props.value ?? \"\";\nconst onChange = props.onChange ?? (() => {});\nconst addInfo = props.addInfo ?? (() => {});\nconst accountIdRegex =\n  /^(([a-z\\d]+[\\-_])*[a-z\\d]+\\.)*([a-z\\d]+[\\-_])*[a-z\\d]+$/;\n\nconst canEdit = (accountId) => {\n  return Near.asyncView(\n    \"social.near\",\n    \"is_write_permission_granted\",\n    { predecessor_id: context.accountId, key: accountId },\n    \"final\",\n    false\n  );\n};\n\nconst checkIsProject = (accountId) => {\n  return Near.asyncView(\n    ownerId,\n    \"check_is_project\",\n    { account_id: accountId },\n    \"final\",\n    false\n  );\n};\n\nconst checkIsTester = (accountId) => {\n  return Near.asyncView(\n    ownerId,\n    \"check_is_tester\",\n    { account_id: accountId },\n    \"final\",\n    false\n  );\n};\n\nconst checkIsTaken = {\n  project: checkIsProject,\n  vendor: checkIsTester,\n}[props.type ?? \"project\"];\n\nState.init({\n  valid: true,\n  errorMessage: <></>,\n});\n\nconst validate = async () => {\n  if (typeof value !== \"string\") {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be a text value!\",\n    });\n    addInfo(false);\n    return;\n  }\n\n  if (value.length < 2) {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be at least 2 characters long!\",\n    });\n    addInfo(false);\n    return;\n  }\n\n  if (value.length > 64) {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be at most 64 characters long!\",\n    });\n    addInfo(false);\n    return;\n  }\n\n  if (!accountIdRegex.test(value)) {\n    State.update({\n      valid: false,\n      errorMessage: (\n        <>\n          Account ID must follow the rules specified{\" \"}\n          <a\n            href=\"https://nomicon.io/DataStructures/Account#account-id-rules\"\n            target=\"_blank\"\n          >\n            here\n          </a>\n          !\n        </>\n      ),\n    });\n    addInfo(false);\n    return;\n  }\n\n  checkIsTaken(value).then((isProject) => {\n    if (isProject) {\n      State.update({\n        valid: false,\n        errorMessage: \"This account ID is already taken!\",\n      });\n      addInfo(false);\n      return;\n    }\n\n    if (!props.addInfo) {\n      // if (forbiddenIds.has(value)) {\n      //   State.update({\n      //     valid: false,\n      //     errorMessage: \"This account ID has already been used!\",\n      //   });\n      //   return;\n      // }\n      //\n      State.update({ valid: true, errorMessage: \"\" });\n      addInfo(false);\n    }\n\n    canEdit(value).then((editPermission) => {\n      if (!editPermission) {\n        if (value !== context.accountId) {\n          State.update({\n            valid: false,\n            errorMessage: \"You do not have permission to edit this account!\",\n          });\n        }\n\n        State.update({ valid: true, errorMessage: \"\" });\n        addInfo(true);\n        return;\n      }\n\n      State.update({ valid: true, errorMessage: \"\" });\n      addInfo(false);\n    });\n  });\n};\n\nreturn (\n  <Widget\n    src={`${ownerId}/widget/Inputs.Text`}\n    props={{\n      label,\n      placeholder,\n      value,\n      onChange,\n      validate,\n      error: state.errorMessage,\n    }}\n  />\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/cr7x.near/widget/Inputs.AccountId", "fact_widget_deployments_id": "ad365c02d6ebbb46f50d976c50cbea69", "inserted_timestamp": "2023-08-23T08:35:01.227Z", "modified_timestamp": "2023-08-23T08:35:01.227Z", "__row_index": 31}