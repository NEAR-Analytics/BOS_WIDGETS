{"tx_hash": "EjyCJLeV3ZJmnxHZXRoUZ63yqzDF78watanusm3G1Zed", "action_id_social": "DN9sv53D3wPgM1z87MsgiaZr7qyMWC18smKsHhKPFgZj-0-widget", "block_id": 117923699, "block_timestamp": "2024-04-30T02:56:50.403Z", "signer_id": "embeds.near", "widget_name": "Embed", "source_code": "const Wrapper = styled.div`\n  border-radius: 0.5em;\n  width: 100%;\n  white-space: normal;\n  margin-top: 12px;\n`;\nconst accountId = context.accountId;\n// Default Embeds\nconst EmbedMap = new Map([\n  [\n    \"mob.near/widget/MainPage.N.Post.Page\",\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n  ],\n  [\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n    \"mob.near/widget/MainPage.N.Post.Embed\",\n  ],\n  [\"${alias_video_every}/widget/app\", \"${alias_video_every}/widget/card\"],\n]);\nif (accountId) {\n  const installedEmbeds = JSON.parse(\n    Social.get(`${accountId}/settings/every/embed`, \"final\") || \"null\"\n  );\n  if (installedEmbeds) {\n    installedEmbeds.forEach((embed) => {\n      EmbedMap.set(embed.src, embed.embedSrc);\n    });\n  }\n}\nconst href = props.href;\nconst assertString = (s) => {\n  if (typeof s !== \"string\") {\n    return null;\n  }\n};\n// checks for use of \"**\" in src string\nconst containsGlob = (path) => /\\*\\*/.test(path);\nconst findWithKey = (key, href) => {\n  let fragments = key.split(\"**\").filter((f) => f != \"\");\n  const hasFragment = (str, fragment) => str.search(fragment) != -1;\n  while (fragments.length > 0) {\n    if (hasFragment(href, fragments[0])) {\n      fragments.shift();\n    } else {\n      return null;\n    }\n  }\n  return true;\n};\nconst parseUrl = (url) => {\n  assertString(url);\n  if (url.startsWith(\"/\")) {\n    url = `https://near.social${url}`;\n  }\n  try {\n    return new URL(url);\n  } catch {\n    return null;\n  }\n};\nconst parseGlob = (path) => {\n  assertString(path);\n  const keysWithGlobs = [...EmbedMap.keys()].filter((key) => containsGlob(key));\n  const keysThatMatch = keysWithGlobs.filter((key) => findWithKey(key, href));\n  if (keysThatMatch.length >= 1) {\n    try {\n      return keysThatMatch[0];\n    } catch {\n      return null;\n    }\n  }\n  return null;\n};\nconst parsed = useMemo(() => {\n  // try parsing embed link to URL\n  const url = parseUrl(href);\n  if (!!url) {\n    return {\n      src: url.pathname.substring(1),\n      props: Object.fromEntries([...url.searchParams.entries()]),\n    };\n  }\n  // try parsing embed link to glob if url failed\n  const src = parseGlob(href);\n  if (!!src) {\n    return {\n      src,\n      props: {\n        href,\n      },\n    };\n  }\n  // neither valid url nor valid glob\n  return null;\n}, [href]);\nfunction filterBysrc(obj, srcValue) {\n  let result = [];\n  function recurse(currentObj) {\n    if (typeof currentObj === \"object\" && currentObj !== null) {\n      if (currentObj.metadata && currentObj.metadata.src === srcValue) {\n        result.push(currentObj);\n      }\n      Object.values(currentObj).forEach((value) => recurse(value));\n    }\n  }\n  recurse(obj);\n  return result;\n}\nif (!parsed || !EmbedMap.has(parsed.src)) {\n  return (\n    <Wrapper>\n      <div\n        className=\"d-flex justify-content-center align-items-center\"\n        style={{ height: \"200px\" }}\n      >\n        <div className=\"text-center\">\n          <p>You do not have a plugin installed to render this embedding.</p>\n          <Link\n            to={`/embeds.near/widget/Plugin.Index?type=embed&src=${href}`}\n            className=\"btn btn-primary mb-3\"\n          >\n            <i className=\"bi bi-plug\" /> Install one from the marketplace\n            &#8594;\n          </Link>\n          <div>\n            <span>\n              {`or `}\n              <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n                click here\n              </a>\n              {` to view`}\n            </span>\n          </div>\n        </div>\n      </div>\n    </Wrapper>\n  );\n}\nconst src = EmbedMap.get(parsed.src);\nreturn (\n  <Wrapper>\n    <Widget loading=\"\" src={src} props={parsed.props} />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/embeds.near/widget/Embed", "fact_widget_deployments_id": "dee3f63b8e72054903aeb6df462c0813", "inserted_timestamp": "2024-04-30T04:40:21.988Z", "modified_timestamp": "2024-04-30T04:40:21.988Z", "__row_index": 0}