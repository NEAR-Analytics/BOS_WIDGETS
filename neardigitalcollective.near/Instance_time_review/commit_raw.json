{"tx_hash": "HeGfd5puSUL2U81VLuqdoHfiu2TiWc52JhjAFhnSJvH8", "action_id_social": "AiwtqJghsYCAdjkr6FUMY6a7a5vGGfipERKxsm1s9DGR-0-widget", "block_id": 91414520, "block_timestamp": "2023-05-08T23:33:33.953Z", "signer_id": "neardigitalcollective.near", "widget_name": "Instance_time_review", "source_code": "const data = props.data;\n\nconst thisWidgetClassNames = props.allWidgetsClassNames.instance_time_review;\nconst thisWidgetInlineStyles =\n  props.allWidgetsInlineStyles.instance_time_review;\n\nconst _account = props.accountId ?? \"All\";\nconst tabs = props.tabs;\nconst text = props.text;\nconst updateInstanceTimeState = props.updateInstanceTimeState;\n\nState.init({\n  intervalId: -1,\n  is_on: [],\n  accounts: [],\n});\n\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nvar sortedData =\n  data && data.length\n    ? data.sort((d1, d2) => d2.blockHeight - d1.blockHeight)\n    : [];\nvar finalData = [];\nvar accountIds = [\"All\"];\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  const flag1 = data.indexOf(0);\n  if (flag) temp.push(0, 168);\n  var sortedTimeData =\n    temp && temp.length ? temp.sort((d2, d1) => d2 - d1) : [];\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) {\n      if (\n        !(\n          (flag1 && sortedTimeData[k] == 0) ||\n          (flag1 && sortedTimeData[k] == 168)\n        )\n      )\n        final.push(sortedTimeData[k]);\n    }\n  }\n  return final;\n};\n\nvar date = new Date();\nvar utc_offset = -date.getTimezoneOffset() / 60;\nfor (let i = 0; i < sortedData.length; i++) {\n  if (accountIds.indexOf(sortedData[i].accountId) < 0) {\n    accountIds.push(sortedData[i].accountId);\n\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew =\n      final && final.length ? final.sort((d2, d1) => d2 - d1) : [];\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n\n    finalData.push({\n      accountId: sortedData[i].accountId,\n      is_on: sortedData[i].value._is_on,\n      time_zone: sortedData[i].value._time_zone,\n      value: {\n        _data: weeklyData,\n      },\n    });\n  }\n}\n\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  let formated =\n    hours > 12\n      ? `${hours - 12}:${mins == 0 ? \"00\" : mins} PM`\n      : `${hours}:${mins == 0 ? \"00\" : mins} AM`;\n  return formated;\n};\n\nfunction intervalFunction() {\n  const day = new Date().getDay() == 0 ? 6 : new Date().getDay() - 1;\n  const hours = new Date().getHours();\n  const mins = new Date().getMinutes();\n  const now = hours + mins / 60;\n  var is_on_all = [];\n  var accounts = [];\n  for (var i = 0; i < finalData.length; i++) {\n    var is_on = false;\n    var temp = finalData[i].value._data[day];\n    if (temp.on_off == \"on\") {\n      for (var j = 0; j < temp.data.length; j++) {\n        if (now >= temp.data[j]._from && now < temp.data[j]._to) {\n          is_on = true;\n        }\n      }\n    }\n    accounts.push(finalData[i].accountId);\n    is_on_all.push(is_on);\n  }\n\n  State.update({ is_on: is_on_all, accounts: accounts });\n}\n\nif (state.intervalId === -1) {\n  const intervalId = setInterval(intervalFunction, 20 * 1000);\n  State.update({ intervalId });\n}\n\nfunction makeStringShorter(string, length) {\n  if (string.length > length) {\n    return string.slice(0, length) + \"...\";\n  }\n  return string;\n}\n\nconsole.log(\"FD:\", finalData);\nconsole.log(\"_account:\", _account);\n\nreturn (\n  <div\n    className={thisWidgetClassNames.generalContainer}\n    style={thisWidgetInlineStyles.generalContainer}\n  >\n    <div className={thisWidgetClassNames.widgetHeaderContainer}>\n      <h2 style={thisWidgetInlineStyles.titleInHeader}>{text}</h2>\n      <p\n        className={thisWidgetClassNames.textInheader}\n        style={thisWidgetInlineStyles.textInheader}\n      >\n        {`Your time is UTC ${getFormatedTime(\n          new Date().getTimezoneOffset() / 60\n        )} ${new Date()\n          .toLocaleDateString(undefined, {\n            day: \"2-digit\",\n            timeZoneName: \"long\",\n          })\n          .substring(4)}`}\n      </p>\n    </div>\n    <div\n      className={thisWidgetClassNames.cardsContainer}\n      style={thisWidgetInlineStyles.cardsContainer}\n    >\n      {finalData\n        ? finalData.map((d) => {\n            console.log(1, _account, d.accountId);\n            if (_account == \"All\" || _account == d.accountId) {\n              console.log(2, _account, d.accountId);\n              const profileName = Social.getr(`${d.accountId}/profile`).name;\n\n              if (!profileName) {\n                return \"Loading\";\n              }\n              return (\n                <div\n                  className={thisWidgetClassNames.cardGeneralContainer}\n                  style={thisWidgetInlineStyles.cardGeneralContainer}\n                  onClick={() => {\n                    updateInstanceTimeState({\n                      userScheduleShown: d.accountId,\n                      prevTab:\n                        _account == \"All\"\n                          ? tabs.ALL_SCHEDULE.id\n                          : tabs.MY_SCHEDULE.id,\n                      tab: tabs.OPEN_SCHEDULE.id,\n                    });\n                  }}\n                >\n                  <div style={thisWidgetInlineStyles.cardContainer}>\n                    <div\n                      style={thisWidgetInlineStyles.cardHeaderGeneralContainer}\n                    >\n                      <div style={thisWidgetInlineStyles.cardHeaderUserInfo}>\n                        <Widget\n                          src=\"mob.near/widget/ProfileImage\"\n                          props={{\n                            accountId: d.accountId,\n                            className: \"d-inline-block\",\n                            style: {\n                              width: \"2em\",\n                              height: \"2em\",\n                              fontSize: \"xx-large\",\n                            },\n                          }}\n                        />\n                        <div>{profileName}</div>\n                      </div>\n                      <div style={thisWidgetInlineStyles.cardBodyContainer}>\n                        <div\n                          style={thisWidgetInlineStyles.cardBodyUserInfo}\n                          title={d.accountId}\n                        >\n                          {makeStringShorter(d.accountId, 12)}\n                        </div>\n                        <div\n                          style={\n                            thisWidgetInlineStyles.cardBodyContentContainer\n                          }\n                        >\n                          <div>\n                            <div\n                              style={thisWidgetInlineStyles.contentSeparation}\n                            >\n                              <span\n                                style={\n                                  state.is_on[\n                                    state.accounts.indexOf(d.accountId)\n                                  ]\n                                    ? thisWidgetInlineStyles.statusIndicationOn\n                                    : thisWidgetInlineStyles.statusIndicationOff\n                                }\n                              >\n                                {state.is_on[\n                                  state.accounts.indexOf(d.accountId)\n                                ]\n                                  ? \"on\"\n                                  : \"off\"}\n                              </span>\n                            </div>\n                          </div>\n                          <div>{d.time_zone}</div>\n                        </div>\n                      </div>\n                    </div>\n                    {d.value._data.map((week, index) => {\n                      return (\n                        <div style={thisWidgetInlineStyles.valuesContainer}>\n                          <div style={thisWidgetInlineStyles.daysContainer}>\n                            {`${days[index]}`}\n                          </div>\n                          <div className=\"d-flex\">\n                            {week.on_off == \"on\" ? (\n                              week.data.map((y) => (\n                                <p style={thisWidgetInlineStyles.timeContainer}>\n                                  {getFormatedTime(y._from)}~\n                                  {getFormatedTime(y._to)}\n                                </p>\n                              ))\n                            ) : (\n                              <span\n                                style={thisWidgetInlineStyles.offIndication}\n                              >\n                                Off\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            }\n          })\n        : \"Loading...\"}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/Instance_time_review", "fact_widget_deployments_id": "42b5b85426918cdca94e1426dbc199a7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 23}