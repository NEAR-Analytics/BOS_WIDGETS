{"tx_hash": "6RQPcTtUPyuiydsm3AYXHuzcPw2yVqb9CXmsrUwAJNJn", "action_id_social": "7b4YVVvENqKeNJPnPtazRBq793GuDXVNbtN3KvSTEWAQ-0-widget", "block_id": 91415236, "block_timestamp": "2023-05-08T23:47:18.838Z", "signer_id": "neardigitalcollective.near", "widget_name": "Instance_time_card", "source_code": "const data = props.data ?? Social.index(\"OfficeHours_v01\", \"schedule\");\n\nif (!data) {\n  return \"Loading datas\";\n}\n\nconst thisWidgetInlineStyles = props.allWidgetsInlineStyles.instance_time_card;\nconst thisWidgetClassNames = props.allWidgetsClassNames.instance_time_card;\n\nconst accountId = props.accountId ?? context.accountId;\nconst updateInstanceTimeState = props.updateInstanceTimeState;\nconst tabs = props.tabs;\nconst style = props.style ?? \"large\";\nconst font_small = style == \"small\" ? \"0.8rem\" : \"0.9rem\";\nconst font_big = style == \"small\" ? \"0.8rem\" : \"1rem\";\n\nconst widgetOwner = \"neardigitalcollective.near\";\n\nState.init({\n  is_on: false,\n});\n\nvar sortedData =\n  data && data.length\n    ? data.sort((d1, d2) => d1.blockHeight - d2.blockHeight)\n    : [];\nvar finalData = {\n  accountId: \"\",\n  time_zone: \"(UTC-04:00) Atlantic Time\",\n  value: {\n    _data: [\n      {\n        on_off: \"off\",\n        data: [],\n      },\n      {\n        on_off: \"off\",\n        data: [],\n      },\n      {\n        on_off: \"off\",\n        data: [],\n      },\n      {\n        on_off: \"off\",\n        data: [],\n      },\n      {\n        on_off: \"off\",\n        data: [],\n      },\n      {\n        on_off: \"off\",\n        data: [],\n      },\n      {\n        on_off: \"off\",\n        data: [],\n      },\n    ],\n  },\n};\n\nconst sortAndRemoveRepeated = (flag, data) => {\n  var temp = data;\n  const flag1 = data.indexOf(0);\n  if (flag) temp.push(0, 168);\n  var sortedTimeData =\n    temp && temp.length ? temp.sort((d2, d1) => d2 - d1) : [];\n\n  var final = [];\n  for (var k = 0; k < sortedTimeData.length; k++) {\n    var repeated = false;\n    for (var l = 0; l < sortedTimeData.length; l++) {\n      if (k != l && sortedTimeData[k] == sortedTimeData[l]) {\n        repeated = true;\n      }\n    }\n    if (!repeated) {\n      if (\n        !(\n          (flag1 && sortedTimeData[k] == 0) ||\n          (flag1 && sortedTimeData[k] == 168)\n        )\n      )\n        final.push(sortedTimeData[k]);\n    }\n  }\n\n  return final;\n};\n\nconst getFormatedTime = (time) => {\n  const hours = parseInt(time);\n  const mins = (time - hours) * 60;\n  let formated =\n    hours > 12\n      ? `${hours - 12}:${mins == 0 ? \"00\" : mins} PM`\n      : `${hours}:${mins == 0 ? \"00\" : mins} AM`;\n  return formated;\n};\n\nvar date = new Date();\nvar utc_offset = -date.getTimezoneOffset() / 60;\nfor (let i = 0; i < sortedData.length; i++) {\n  if (sortedData[i].accountId == accountId) {\n    var times = sortedData[i].value._data;\n    var temp = [];\n    var flag = false;\n    for (var j = 0; j < times.length; j++) {\n      const time = times[j] + utc_offset;\n      if (time > 168) {\n        temp.push(time - 168);\n        flag = true;\n      } else if (time < 0) {\n        temp.push(time + 168);\n        flag = true;\n      } else temp.push(time);\n    }\n    const final = sortAndRemoveRepeated(flag, temp);\n    for (var m = 0; m < final.length - 1; m += 2) {\n      const _from = final[m];\n      const _to = final[m + 1];\n      for (var o = 1; o < 7; o++) {\n        if (o * 24 > _from && o * 24 < _to) {\n          final.push(o * 24, o * 24);\n        }\n      }\n    }\n    var sortedTimeDataNew =\n      final && final.length ? final.sort((d2, d1) => d2 - d1) : [];\n    var weeklyData = [];\n    for (var t = 0; t < 7; t++) {\n      var dailyData = [];\n      var exist = false;\n      for (var p = 0; p < sortedTimeDataNew.length - 1; p += 2) {\n        var _from = sortedTimeDataNew[p];\n        var _to = sortedTimeDataNew[p + 1];\n        if (_to > t * 24 && _to <= (t + 1) * 24) {\n          dailyData.push({\n            _from: _from - t * 24,\n            _to: _to - t * 24,\n          });\n          exist = true;\n        }\n      }\n      if (!exist) weeklyData.push({ on_off: \"off\", data: [] });\n      else weeklyData.push({ on_off: \"on\", data: dailyData });\n    }\n    finalData = {\n      accountId: sortedData[i].accountId,\n      is_on: sortedData[i].value._is_on,\n      time_zone: sortedData[i].value._time_zone,\n      value: {\n        _data: weeklyData,\n      },\n    };\n  }\n}\n\nfunction sliceString(string, newStringLength) {\n  if (string.length > newStringLength) {\n    return string.slice(0, newStringLength) + \"...\";\n  }\n  return string;\n}\n\nconst code = `\n<script>\n    window.addEventListener(\"message\", (event) => {\n        setInterval(() => event.source.postMessage(\"ping\", \"*\"), event.data.timeout);\n    });\n</script>\n`;\n\nfunction onInterval() {\n  const day = new Date().getDay() == 0 ? 6 : new Date().getDay() - 1;\n  const hours = new Date().getHours();\n  const mins = new Date().getMinutes();\n  const now = hours + mins / 60;\n  var is_on = false;\n  var temp = finalData.value._data[day];\n  if (temp.on_off == \"on\") {\n    for (var j = 0; j < temp.data.length; j++) {\n      if (now >= temp.data[j]._from && now < temp.data[j]._to) {\n        is_on = true;\n      }\n    }\n  }\n  State.update({ is_on: is_on });\n}\n\nreturn (\n  <div>\n    <iframe\n      style={{ height: \"0px\" }}\n      srcDoc={code}\n      message={{ timeout: 1000 }}\n      onMessage={onInterval}\n    />\n\n    <div\n      className={thisWidgetClassNames.widgetGeneralContainer}\n      style={thisWidgetInlineStyle.widgetGeneralContainer}\n    >\n      <div style={thisWidgetInlineStyles.generalContainer}>\n        <div className={thisWidgetClassNames.widgetHeaderContainer}>\n          <h2 style={thisWidgetInlineStyles.widgetTitle}>\n            {tabs.OPEN_SCHEDULE.text}\n          </h2>\n          <i\n            className={thisWidgetClassNames.closeIcon}\n            style={thisWidgetInlineStyles.closeIcon}\n            onClick={() => {\n              updateInstanceTimeState({\n                tab: props.prevTab,\n              });\n            }}\n          ></i>\n        </div>\n        <div className={thisWidgetClassNames.widgetBodyContainer}>\n          <div className={thisWidgetClassNames.userInfoContainer}>\n            <Widget\n              src=\"mob.near/widget/ProfileImage\"\n              props={{\n                accountId,\n                className: \"float-start d-inline-block me-2\",\n                style: {\n                  width: style == \"small\" ? \"2.5rem\" : \"3.5rem\",\n                  height: style == \"small\" ? \"2.5rem\" : \"3.5rem\",\n                  aspectRatio: \"1\",\n                  marginLeft: font_small,\n                  borderRadius: \"100%\",\n                  overflow: \"hidden\",\n                },\n              }}\n            />\n            <div>\n              <p style={thisWidgetInlineStyles.shceduleOfText}>Schedule of</p>\n              <p style={thisWidgetInlineStyles.showAccountId}>\n                {sliceString(accountId, 18)}\n              </p>\n            </div>\n          </div>\n          <div className={thisWidgetClassNames.sheculeStatusContainer}>\n            <span\n              style={\n                state.is_on\n                  ? thisWidgetInlineStyles.scheduleStatusOn\n                  : thisWidgetInlineStyles.scheduleStatusOff\n              }\n            >\n              {state.is_on ? \"on\" : \"off\"}\n            </span>\n            {accountId == context.accountId && (\n              <button\n                onClick={updateInstanceTimeState({\n                  tab: tabs.NEW_SCHEDULE.id,\n                  prevTab: tabs.OPEN_SCHEDULE.id,\n                })}\n                onMouseEnter={() => {\n                  State.update({ hoveringElement: \"edit\" });\n                }}\n                onMouseLeave={() => {\n                  State.update({ hoveringElement: \"\" });\n                }}\n                style={\n                  state.hoveringElement == \"edit\"\n                    ? thisWidgetInlineStyles.editScheduleButtonHovering\n                    : thisWidgetInlineStyles.editScheduleButton\n                }\n              >\n                Edit Schedules\n              </button>\n            )}\n          </div>\n        </div>\n        <div className={thisWidgetClassNames.instanceTimeTextContainer}>\n          <div style={thisWidgetInlineStyles.instanceTimeTextDecorativeDiv}>\n            {/*Decorative div, do not delete*/}\n          </div>\n          <h2 style={thisWidgetInlineStyles.instanceTimeText}>Instance Time</h2>\n        </div>\n        <div\n          style={thisWidgetInlineStyles.otherWidgetsContainer}\n          className={thisWidgetClassNames.otherWidgetsContainer}\n        >\n          <div style={thisWidgetInlineStyles.instanceTimeShareGeneralContainer}>\n            <div style={thisWidgetInlineStyles.instanceTimeShareContainer}>\n              <Widget\n                src={`${widgetOwner}/widget/Instance_time_share`}\n                props={{\n                  accountId,\n                }}\n              />\n            </div>\n          </div>\n\n          <div style={thisWidgetInlineStyles.showCurrentTimecontainer}>\n            <Widget\n              src={`${widgetOwner}/widget/ShowCurrentTime`}\n              props={{\n                time_zone: finalData.time_zone,\n                style: {\n                  display: \"flex\",\n                },\n              }}\n            />\n          </div>\n        </div>\n        <Widget\n          src={`${widgetOwner}/widget/Instance_time_schedule_card`}\n          props={{\n            schedule_data: finalData,\n            style: {\n              display: \"flex\",\n            },\n          }}\n        />\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/neardigitalcollective.near/widget/Instance_time_card", "fact_widget_deployments_id": "ad1624d72313426a81e6cbbda54c1cf9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 17}