{"tx_hash": "FhQ6Fqa9uVLjGtmy3ckQ4d6k8wiC8kCvVW8MN8MVLcqN", "action_id_social": "Em4NZqvPW3f76SPCkHbkkZZBSBYrpE8FfFQyAQZvSrjK-0-widget", "block_id": 101408611, "block_timestamp": "2023-09-18T15:03:46.184Z", "signer_id": "nearhorizon.near", "widget_name": "Request.EditForm", "source_code": "const ownerId = \"nearhorizon.near\";\nconst accountId = props.accountId;\n\nconst createDate = (date) => {\n  const d = date ? new Date(date) : new Date();\n  const month = `${d.getMonth() + 1}`;\n  const day = `${d.getDate()}`;\n  return `${d.getFullYear()}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n};\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n  gap: 1em;\n`;\n\nconst FormHeader = styled.h3`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 0px 0px 0.5em;\n  border-bottom: 1px solid #eceef0;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.125em;\n  line-height: 1.25em;\n  color: #000000;\n  width: 100%;\n`;\n\nconst FormFooter = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 3em;\n  padding-top: 2em;\n  padding-bottom: 3em;\n`;\n\nconst Header = styled.h1`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 2em;\n  line-height: 1.4em;\n  margin-bottom: 0.5em;\n  text-align: center;\n  color: #000000;\n`;\n\nconst SubHeader = styled.h2`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 0.95em;\n  line-height: 1.25em;\n  text-align: center;\n  color: #101828;\n`;\n\nconst ProgressBar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  gap: 0.375em;\n  width: 100%;\n  height: 0.5em;\n  padding: 0;\n  margin: 0;\n\n  div {\n    flex-grow: 1;\n    height: 100%;\n    width: 50%;\n    background: #00ec97;\n  }\n\n  &.half {\n    div:last-child {\n      background: #eceef0;\n    }\n  }\n`;\n\nconst CancelButton = styled.a`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 0.75em 1em;\n  gap: 0.5em;\n  background: #ffffff;\n  border: 1px solid #eceef0;\n  border-radius: 50px;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 0.95em;\n  line-height: 1em;\n  text-align: center;\n  color: #101828;\n`;\n\nState.init({\n  project: null,\n  projectIsFetched: false,\n  tags: [],\n  tagsError: \"\",\n  title: \"\",\n  titleError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  requestType: null,\n  requestTypes: [],\n  requestTypeError: \"\",\n  paymentType: null,\n  paymentTypes: [],\n  paymentTypeError: \"\",\n  paymentSource: null,\n  paymentSources: [],\n  paymentSourceError: \"\",\n  budget: null,\n  budgetError: \"\",\n  deadline: createDate(),\n  deadlineError: \"\",\n});\n\nconst validateForm = () => {\n  return (\n    state.title &&\n    state.titleError === \"\" &&\n    state.description &&\n    state.descriptionError === \"\" &&\n    state.requestType &&\n    state.requestTypeError === \"\" &&\n    state.paymentType &&\n    state.paymentTypeError === \"\" &&\n    state.paymentSource &&\n    (state.project.credits || state.paymentSource.value === \"Other\") &&\n    state.paymentSourceError === \"\" &&\n    state.budget &&\n    state.budgetError === \"\" &&\n    state.deadline &&\n    state.deadlineError === \"\"\n  );\n};\n\nif (!state.projectIsFetched) {\n  Near.asyncView(ownerId, \"get_payment_types\", {}, \"final\", false).then(\n    (paymentTypes) =>\n      State.update({\n        paymentTypes: paymentTypes.map((value) => ({ value, text: value })),\n      }),\n  );\n  Near.asyncView(ownerId, \"get_payment_sources\", {}, \"final\", false).then(\n    (paymentSources) =>\n      State.update({\n        paymentSources: paymentSources.map((value) => ({ value, text: value })),\n      }),\n  );\n  Near.asyncView(ownerId, \"get_request_types\", {}, \"final\", false).then(\n    (requestTypes) =>\n      State.update({\n        requestTypes: requestTypes.map((value) => ({ value, text: value })),\n      }),\n  );\n  Near.asyncView(\n    ownerId,\n    \"get_project\",\n    { account_id: props.accountId },\n    \"final\",\n    false,\n  ).then((project) => {\n    State.update({ project, projectIsFetched: true });\n  });\n  Near.asyncView(\n    ownerId,\n    \"get_request\",\n    { account_id: props.accountId, cid: props.cid },\n    \"final\",\n    false,\n  ).then((request) => {\n    State.update({\n      title: request.title,\n      description: request.description,\n      requestType: { value: request.request_type },\n      paymentType: { value: request.payment_type },\n      paymentSource: { value: request.source },\n      budget: request.budget,\n      deadline: createDate(Number(request.deadline)),\n    });\n  });\n  return <>Loading...</>;\n}\n\nconst HalfWidth = styled.div`\n  width: 50%;\n`;\n\nreturn (\n  <Container>\n    <Form>\n      <Widget\n        src={`${ownerId}/widget/Inputs.Text`}\n        props={{\n          label: \"Title\",\n          placeholder: \"\",\n          value: state.title,\n          onChange: (title) => State.update({ title }),\n          validate: () => {\n            if (state.title.length < 3) {\n              State.update({\n                titleError: \"Title must be at least 3 characters\",\n              });\n              return;\n            }\n\n            if (state.title.length > 50) {\n              State.update({\n                titleError: \"Title must be less than 50 characters\",\n              });\n              return;\n            }\n\n            State.update({ titleError: \"\" });\n          },\n          error: state.titleError,\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.TextArea`}\n        props={{\n          label: \"Description\",\n          placeholder: \"\",\n          value: state.description,\n          onChange: (description) => State.update({ description }),\n          validate: () => {\n            if (state.description.length < 10) {\n              State.update({\n                descriptionError: \"Description must be at least 10 characters\",\n              });\n              return;\n            }\n\n            if (state.description.length > 5000) {\n              State.update({\n                descriptionError:\n                  \"Description must be less than 5000 characters\",\n              });\n              return;\n            }\n\n            State.update({ descriptionError: \"\" });\n          },\n          error: state.descriptionError,\n        }}\n      />\n      {/*<Widget\n        src={`${ownerId}/widget/Inputs.MultiSelect`}\n        props={{\n          label: \"Tags\",\n          placeholder: \"Start typing\",\n          options: [{ name: \"Wallets\" }, { name: \"Games\" }],\n          value: state.tags,\n          onChange: (tags) =>\n            State.update({\n              tags: tags.map(({ name }) => ({\n                name: name.trim().replaceAll(/\\s+/g, \"-\"),\n              })),\n            }),\n        }}\n      />*/}\n      <HalfWidth>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Select`}\n          props={{\n            label: \"Request type *\",\n            options: state.requestTypes,\n            value: state.requestType,\n            onChange: (requestType) => State.update({ requestType }),\n          }}\n        />\n      </HalfWidth>\n      <HalfWidth>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Select`}\n          props={{\n            label: \"Payment type *\",\n            options: state.paymentTypes,\n            value: state.paymentType,\n            onChange: (paymentType) => State.update({ paymentType }),\n          }}\n        />\n      </HalfWidth>\n      <HalfWidth>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Select`}\n          props={{\n            label: \"Payment source *\",\n            options: state.paymentSources.filter(\n              ({ value }) => state.project.credits || value === \"Other\",\n            ),\n            value: state.paymentSource,\n            onChange: (paymentSource) => State.update({ paymentSource }),\n          }}\n        />\n      </HalfWidth>\n      <HalfWidth>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Number`}\n          props={{\n            label: \"Budget *\",\n            placeholder: 0.0,\n            hasDollar: true,\n            value: state.budget,\n            onChange: (budget) => State.update({ budget }),\n            validate: () => {\n              if (state.budget < 1) {\n                State.update({\n                  budgetError: \"Budget must be at least 1\",\n                });\n                return;\n              }\n\n              State.update({ budgetError: \"\" });\n            },\n            error: state.budgetError,\n          }}\n        />\n      </HalfWidth>\n      <HalfWidth>\n        <Widget\n          src={`${ownerId}/widget/Inputs.Date`}\n          props={{\n            label: \"Deadline *\",\n            value: state.deadline,\n            onChange: (deadline) => State.update({ deadline }),\n            validate: () => {\n              if (new Date(state.deadline) < new Date()) {\n                State.update({\n                  deadlineError: \"Deadline must be in the future\",\n                });\n                return;\n              }\n\n              State.update({ deadlineError: \"\" });\n            },\n            error: state.deadlineError,\n          }}\n        />\n      </HalfWidth>\n      <FormFooter>\n        <Widget\n          src={`${ownerId}/widget/Buttons.Green`}\n          props={{\n            disabled: !validateForm(),\n            onClick: () => {\n              if (!validateForm()) return;\n              Near.call(ownerId, \"edit_request\", {\n                cid: props.cid,\n                request: {\n                  project_id: props.accountId,\n                  title: state.title,\n                  description: state.description,\n                  open: true,\n                  request_type: state.requestType.value,\n                  payment_type: state.paymentType.value,\n                  tags: state.tags.map(({ name }) => name),\n                  source: state.paymentSource.value,\n                  deadline: `${new Date(state.deadline).getTime()}`,\n                  budget: Number(state.budget),\n                },\n              });\n            },\n            text: (\n              <>\n                <svg\n                  width=\"18\"\n                  height=\"18\"\n                  viewBox=\"0 0 18 18\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M7.87464 10.1251L15.7496 2.25013M7.97033 10.3712L9.94141 15.4397C10.1151 15.8862 10.2019 16.1094 10.327 16.1746C10.4354 16.2311 10.5646 16.2312 10.6731 16.1748C10.7983 16.1098 10.8854 15.8866 11.0596 15.4403L16.0023 2.77453C16.1595 2.37164 16.2381 2.1702 16.1951 2.04148C16.1578 1.92969 16.0701 1.84197 15.9583 1.80462C15.8296 1.76162 15.6281 1.84023 15.2252 1.99746L2.55943 6.94021C2.11313 7.11438 1.88997 7.20146 1.82494 7.32664C1.76857 7.43516 1.76864 7.56434 1.82515 7.67279C1.89033 7.7979 2.11358 7.88472 2.56009 8.05836L7.62859 10.0294C7.71923 10.0647 7.76455 10.0823 7.80271 10.1095C7.83653 10.1337 7.86611 10.1632 7.89024 10.1971C7.91746 10.2352 7.93508 10.2805 7.97033 10.3712Z\"\n                    stroke=\"#11181C\"\n                    stroke-width=\"1.66667\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n                Update request\n              </>\n            ),\n          }}\n        />\n      </FormFooter>\n    </Form>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearhorizon.near/widget/Request.EditForm", "fact_widget_deployments_id": "1e08a4e1743618bd65b893a3ed9e1f8f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}