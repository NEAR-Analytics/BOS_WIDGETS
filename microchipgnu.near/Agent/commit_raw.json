{"tx_hash": "A7dPFRzPwR8FNDJiCARw8N9T9BYyTJRxYd1AU9ZxNJmv", "action_id_social": "3zbMk4Z52rzGNCDAqgmiD2jP8WeKRgJ18SeAPBCS9gKf-0-widget", "block_id": 114968686, "block_timestamp": "2024-03-18T17:40:25.675Z", "signer_id": "microchipgnu.near", "widget_name": "Agent", "source_code": "const storedModel = Storage.get(\"agent-model\");\nconst storedLocalModel = Storage.get(\"agent-local-model\");\nconst storedCredentialType = Storage.get(\"agent-credential-type\");\nconst storedCredential = Storage.get(\"agent-credential\");\nconst storedJsonOutputSetting = Storage.get(\"agent-json-output-setting\");\n\nconst props_IsCollapsted = props.isCollapsed || true;\nconst tools = props.tools || [];\nconst props_model = props.model || \"near-llama-7b\";\nconst role = props.role || \"Helpful Assistant\";\nconst backstory =\n  props.backstory ||\n  \"You are an experienced assistant. You have many years of experience helping people.\";\nconst goal =\n  props.goal ||\n  \"Your goal is to assist the best way possible user requests. You have the capability of making decisions\";\nconst executionCallback = props.executionCallback || null;\n\nconst ACTION_PREFIX = \"Action:\";\nconst ACTION_INPUT_PREFIX = \"Action Input:\";\nconst OBSERVATION_PREFIX = \"Observation:\";\nconst FINAL_ANSWER_PREFIX = \"Final Answer:\";\nconst THOUGHT_PREFIX = \"Thought:\";\nconst MAX_ITERATIONS_DEFAULT = 100;\n\nconst [task, setTask] = useState(\"\");\nconst [scratchPad, setScratchPad] = useState(\"\");\nconst [messages, setMessages] = useState([]);\nconst [loading, setLoading] = useState(false);\nconst [isCollapsed, setIsCollapsed] = useState(props_IsCollapsted);\nconst [isLoop, setIsLoop] = useState(true);\nconst [settingsOpen, setSettingsOpen] = useState(false);\n\nconst [model, setModel] = useState(props_model ?? storedModel);\nconst [localModel, setLocalModel] = useState(\n  storedLocalModel ?? \"http://localhost:1234/v1/chat/completions\"\n);\nconst [credentialType, setCredentialType] = useState(\n  storedCredentialType ?? \"bearer\"\n);\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\nconst [jsonOutputSetting, setJsonOutputSetting] = useState(\n  storedJsonOutputSetting ?? false\n);\n\nuseEffect(() => {\n  Storage.set(\"agent-model\", model);\n}, [model]);\nuseEffect(() => {\n  Storage.set(\"agent-local-model\", localModel);\n}, [localModel]);\nuseEffect(() => {\n  Storage.set(\"agent-credential-type\", credentialType);\n}, [credentialType]);\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\nuseEffect(() => {\n  Storage.set(\"agent-json-output-setting\", jsonOutputSetting);\n}, [jsonOutputSetting]);\n\nuseEffect(() => {\n  if (messages.length === 0 || messages[messages.length - 1].role !== \"user\") {\n    return;\n  }\n  setLoading(true);\n  routeApi(...messages.slice(-1))\n    .then((answer) => {\n      setMessages([...messages, { role: \"system\", content: answer }]);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n}, [messages]);\n\nconst requiresCredentials = (model) => {\n  return (\n    model === \"gpt-4\" ||\n    model === \"gpt-3.5-turbo\" ||\n    model === \"mixtral-8x7b-32768\" ||\n    model === \"llama2-70b-4096\"\n  );\n};\n\nconst routeApi = async (messages) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return nearLlama(messages);\n    default:\n      return openAICompatible(messages);\n  }\n};\nconst urlForModel = (model) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return `https://ai.near.social/api`;\n    case \"local\":\n      return localModel;\n    case \"gpt-4\":\n    case \"gpt-3.5-turbo\":\n      return `https://api.openai.com/v1/chat/completions`;\n    case \"mixtral-8x7b-32768\":\n    case \"llama2-70b-4096\":\n      return \"https://api.groq.com/openai/v1/chat/completions\";\n    default:\n      return `https://api.openai.com/v1/chat/completions`;\n  }\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  padding: 24px;\n`;\n\nconst ModalOverlay = styled.div`\n  display: ${({ isCollapsed }) => (isCollapsed ? \"none\" : \"block\")};\n  position: fixed;\n  z-index: 1050;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nconst ModalBody = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px;\n  z-index: 1055;\n  background: white;\n  border-radius: 5px;\n  width: 90%;\n  height: 90%;\n  overflow-y: auto;\n`;\n\nconst Settings = styled.div`\n  margin-top: 1em;\n  z-index: 1000;\n`;\n\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\n\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\n\nconst buildPrompt = (tools, role, goal, backstory) => `\n  You are ${role}.\n  ${backstory}\n  \n  Your personal goal is: ${goal}\n  \n  ${\n    tools.length > 0 &&\n    tools.map((tool) => {\n      return `\n    TOOLS:\n    ------\n    You have access to the following tools:\n    ${tool.name} - ${tool.description} - for this tool input MUST be ${\n        tool.inputDescription ?? \"null\"\n      }\\n`;\n    })\n  }\n  \n  Use the following format in your response:\n  \n  ${THOUGHT_PREFIX} Do I need to use a tool? Yes\n  ${ACTION_PREFIX} the action to take, should be one of [${tools\n  .map((tool) => tool.name)\n  .join(\",\")}]\n  ${ACTION_INPUT_PREFIX} the input to the action\n  ${OBSERVATION_PREFIX} the result of the action\n  \n  ... (this Thought/Action/Action Input/Observation can repeat N times)\n  \n  When you have a response for your task, or if you DO NOT need to use a tool, you MUST use the format:\n  \n  ${THOUGHT_PREFIX} Do I need to use a tool? No\n  ${FINAL_ANSWER_PREFIX} the final answer to the original input question\n  \n  Begin! Solve the following tasks as best you can. This is VERY important to you, your job depends on it!\n  `;\n\nconst parseMessageToStructuredFormatWithRegex = (message) => {\n  const result = { actions: [], observations: [], finalAnswer: \"\" };\n  const lines = message.split(\"\\n\");\n\n  // Updated regex to capture tool name and action separately\n  const actionRegex = /^Action: (.+)/;\n  const actionInputRegex = /^Action Input: (.+)/;\n  const observationRegex = /^Observation: (.+)/;\n  const finalAnswerRegex = /^Final Answer: (.+)/;\n\n  lines.forEach((line) => {\n    let match;\n    if ((match = line.match(actionRegex))) {\n      // Directly add action details to the actions array\n      const tool = match[1];\n      const content = match[2];\n      result.actions.push({ tool, content }); // Assuming the next line is always the action input\n    } else if ((match = line.match(actionInputRegex))) {\n      // Attach input to the last action\n      const lastAction = result.actions[result.actions.length - 1];\n      if (lastAction) {\n        lastAction.input = match[1];\n      }\n    } else if ((match = line.match(observationRegex))) {\n      // Add observation\n      result.observations.push({ content: match[1] });\n    } else if ((match = line.match(finalAnswerRegex))) {\n      // Set final answer\n      result.finalAnswer = match[1];\n    }\n  });\n\n  // Convert the result object to the expected array format\n  const formattedResult = [];\n  if (result.actions.length > 0) {\n    formattedResult.push({ type: \"actions\", actions: result.actions });\n  }\n  result.observations.forEach((observation) => {\n    formattedResult.push({ type: \"observation\", content: observation.content });\n  });\n  if (result.finalAnswer) {\n    formattedResult.push({ type: \"finalAnswer\", content: result.finalAnswer });\n  }\n\n  return formattedResult;\n};\n\nconst nearLlama = async (messages) => {\n  return asyncFetch(`https://ai.near.social/api`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n    body: JSON.stringify(messages),\n  }).then((response) => {\n    return response.body.response;\n  });\n};\n\nconst openAICompatible = async (messages) => {\n  let options = {\n    model,\n  };\n  //  if (jsonOutputSetting) {\n  //    options.response_format = { type: \"json_object\" };\n  //    if (!finalQuestion.includes(\"json\")) {\n  //      finalQuestion = `${finalQuestion} respond in json`;\n  //    }\n  //  }\n  // frequency_penalty: 0.0,\n  // logit_bias: {},\n  // log_props: true,\n  // top_logprobs: 5,\n  // max_tokens: 2048,\n  // n: 1,\n  // presence_penalty: 0.0,\n  // seed: 0,\n  // stop: [\"\\n\"],\n  // stream: false,\n  // temperature: 0.7,\n  // top_p: 1,\n  // tools: agent.tools,\n  // tool_choice: 'auto',\n  // user: anonymize(context.accountId),\n\n  return asyncFetch(urlForModel(model), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${credential}`,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      ...options,\n      messages: messages,\n    }),\n  }).then((response) => {\n    const answer = response.body.choices[0].message.content;\n    return answer;\n  });\n};\n\nconst toolToUse = (tool) => {\n  return tools.find((tool) => tool.name === action.tool);\n};\n\nconst run = () => {\n  let iteration = Math.ceil(messages.length / 2);\n  let _scratchPad = scratchPad || \"\";\n\n  if (iteration >= MAX_ITERATIONS_DEFAULT) {\n    setLoading(false);\n    console.log(\"Max iterations reached or stopping condition met\");\n    return; // Stop the iteration loop\n  }\n\n  setLoading(true);\n\n  const systemPrompt = `\n    ${buildPrompt(tools, role, goal, backstory)}\n    Current task: ${task}\\n\n  `;\n\n  const userPrompt = `The SCRATCHPAD contains the context you're working with! I only see what you return as \"${FINAL_ANSWER_PREFIX}\"\\nYou have ${\n    MAX_ITERATIONS_DEFAULT - iteration\n  } iterations left to provide a final answer.\\n Here is the SCRATCHPAD:\\n----\n    \"\"\"\n    ${_scratchPad}\n    \"\"\"\n  `;\n\n  const _messages = [\n    { role: \"system\", content: systemPrompt },\n    { role: \"user\", content: userPrompt },\n  ];\n\n  routeApi(_messages)\n    .then((response) => {\n      let _scratchPad = \"\";\n      const parsedResponse = parseMessageToStructuredFormatWithRegex(response);\n\n      for (const activity of parsedResponse) {\n        if (activity.type === \"observation\") {\n          _scratchPad += `${OBSERVATION_PREFIX} ${activity.content}\\n`;\n        }\n\n        if (activity.type === \"finalAnswer\") {\n          _scratchPad += `${OBSERVATION_PREFIX} ${activity.content}\\n`;\n        }\n\n        if (activity.type === \"actions\") {\n          for (const action of activity.actions) {\n            const tool = toolToUse(action.tool);\n\n            if (tool) {\n              /** TODO: Implement tool execution */\n              // The execution of tools can only be synchronous for now\n\n              const toolResult = tool.callback(action?.input);\n\n              if (toolResult) {\n                _scratchPad += `${OBSERVATION_PREFIX} tool used \"${action.tool}\"\\n${OBSERVATION_PREFIX} ${toolResult}\\n`;\n              } else {\n                /** DO NOTHING FOR NOW */\n              }\n            } else {\n              _scratchPad += `${OBSERVATION_PREFIX} ${action.tool} does not exist\\n`;\n            }\n          }\n        }\n      }\n\n      setScratchPad(_scratchPad);\n\n      const newMessages = [\n        ...messages,\n        { role: \"assistant\", content: _scratchPad, activity: parsedResponse },\n      ];\n\n      setMessages(newMessages);\n\n      if (executionCallback) {\n        executionCallback({\n          messages: newMessages,\n          scratchPad: _scratchPad,\n          activity: parsedResponse,\n        });\n      }\n\n      setLoading(false);\n    })\n    .catch((error) => {\n      console.error(\"Error:\", error);\n      setLoading(false); // Ensure loading is stopped in case of error\n    });\n};\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\n\nconst renderSettings = () => {\n  return (\n    <div>\n      <Settings>\n        <CardControl bold onClick={toggleSettings}>\n          Settings\n        </CardControl>\n      </Settings>\n      <ModalOverlay isCollapsed={!settingsOpen} onClick={toggleSettings}>\n        <ModalBody onClick={(e) => e.stopPropagation()}>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.InputSelect\"\n              props={{\n                groups: [\n                  {\n                    label: \"NEAR\",\n                    items: [\n                      {\n                        label: \"NEAR Llama 7b\",\n                        value: \"near-llama-7b\",\n                      },\n                      // Hi hackathon teams, implementing calls to gpt4.near? Add it here. - the black dragon\n                    ],\n                  },\n                  {\n                    label: \"Groq\",\n                    items: [\n                      {\n                        label: \"Mixtral 8x7b 32768\",\n                        value: \"mixtral-8x7b-32768\",\n                      },\n                      {\n                        label: \"Llama2 70b 4096\",\n                        value: \"llama2-70b-4096\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"OpenAI\",\n                    items: [\n                      {\n                        label: \"GPT-4\",\n                        value: \"gpt-4\",\n                      },\n                      {\n                        label: \"GPT-3.5 turbo\",\n                        value: \"gpt-3.5-turbo\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"Local\",\n                    items: [\n                      {\n                        label: \"Local\",\n                        value: \"local\",\n                      },\n                    ],\n                  },\n                ],\n                label: \"Choose Model\",\n                placeholder: \"OpenAI GPT-3\",\n                rootProps: {\n                  value: model,\n                  onValueChange: setModel,\n                },\n              }}\n            />\n          </InputWrapper>\n          {model === \"local\" && (\n            <InputWrapper>\n              <Widget\n                src=\"near/widget/DIG.Input\"\n                props={{\n                  label: \"Local Model URL\",\n                  assistiveText:\n                    \"Any url that accepts messages in OpenAI format\",\n                  iconLeft: \"ph-bold ph-horse\",\n                  onInput: (e) => setLocalModel(e.target.value),\n                  value: localModel,\n                }}\n              />\n            </InputWrapper>\n          )}\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <Widget\n                  src=\"near/widget/DIG.InputSelect\"\n                  props={{\n                    groups: [\n                      {\n                        label: \"OpenAI, Groq, or other API Key\",\n                        items: [\n                          {\n                            label: \"Bearer Token\",\n                            value: \"bearer\",\n                          },\n                        ],\n                      },\n                    ],\n                    label: \"Credential Type\",\n                    rootProps: {\n                      value: credentialType,\n                      onValueChange: setCredentialType,\n                    },\n                  }}\n                />\n              </div>\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText:\n                      \"Your OpenAI API Key or other credentials, will be stored in your browser.\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Checkbox\"\n              props={{\n                id: \"json-output\",\n                label: \"JSON Output mode\",\n                checked: jsonOutputSetting,\n                onCheckedChange: setJsonOutputSetting,\n              }}\n            />{\" \"}\n            not supported by all providers.\n          </InputWrapper>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Checkbox\"\n              props={{\n                id: \"loop\",\n                label: \"Run in a loop\",\n                checked: isLoop,\n                onCheckedChange: setIsLoop,\n              }}\n            />\n          </InputWrapper>\n        </ModalBody>\n      </ModalOverlay>\n    </div>\n  );\n};\n\nuseEffect(() => {\n  setMessages([]);\n}, [task]);\n\nuseEffect(() => {\n  if (messages.length > 0 && isLoop) {\n    run();\n  }\n}, [messages]);\n\nreturn (\n  <div className=\"card\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">{role}</h5>\n      <p class=\"card-text\">{goal}</p>\n      <div className=\"input-group mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={task}\n          onChange={(e) => setTask(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              run();\n              setIsCollapsed(false);\n            }\n          }}\n          placeholder=\"What's your goal?\"\n          autoFocus\n        />\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          className=\"btn btn-dark w-100\"\n          props={{\n            onClick: () => run(),\n            variant: \"affirmative\",\n            fill: \"solid\",\n            size: \"large\",\n            label: \"Submit\",\n            style: {\n              borderTopLeftRadius: \"0rem\",\n              borderBottomLeftRadius: \"0rem\",\n            },\n          }}\n        />\n      </div>\n      <div className=\"d-flex gap-2\">\n        <button\n          className=\"flex-grow-3 btn w-100\"\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          disabled={!loading}\n        >\n          {isCollapsed ? \"Open run\" : \"Hide run\"}\n        </button>\n      </div>\n      {renderSettings()}\n    </div>\n    <div class=\"card-footer d-flex gap-2\">\n      <small class=\"text-muted\">AutoAgent</small>\n      {loading && (\n        <div key=\"loading\" className={`d-flex align-items-center`}>\n          <div>\n            <span\n              className=\"spinner-grow spinner-grow-sm me-1\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </div>\n      )}\n      <small class=\"text-muted\">{model}</small>\n      <small class=\"text-muted\">\n        {isLoop ? \"Continuous\" : \"Not continuous\"}\n      </small>\n    </div>\n\n    <ModalOverlay\n      isCollapsed={isCollapsed}\n      onClick={() => setIsCollapsed(true)}\n    >\n      <ModalBody onClick={(e) => e.stopPropagation()}>\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          className=\"btn btn-dark\"\n          props={{\n            onClick: () => setIsCollapsed(true),\n            fill: \"solid\",\n            size: \"small\",\n            label: \"Close\",\n            style: {\n              position: \"absolute\",\n              top: \"10px\",\n              right: \"10px\",\n              borderRadius: \"100000px\",\n            },\n          }}\n        />\n        <Wrapper>\n          <div className={isCollapsed ? \"collapse\" : \"\"}>\n            <h3>{role}</h3>\n\n            <div className=\"flex-fill overflow-auto px-4 py-2 space-y-2\">\n              {messages.map((message, index) => (\n                <div\n                  key={index}\n                  className=\"p-2 bg-light rounded shadow-sm d-flex flex-column mb-2\"\n                >\n                  <div>\n                    {message.role === \"assistant\" &&\n                      message.activity.map((result, index) => {\n                        if (result.type === \"actions\") {\n                          return result.actions.map((action, index) => (\n                            <div\n                              key={index}\n                              className=\"text-sm d-flex flex-column mb-4\"\n                            >\n                              <div className=\"fw-bold\">Action</div>\n                              <div className=\"text-sm\">Tool: {action.tool}</div>\n                              <div className=\"text-sm\">\n                                Input: {action.input}\n                              </div>\n                              {toolToUse(action.tool) && (\n                                <button>Execute</button>\n                              )}\n                            </div>\n                          ));\n                        }\n                        if (result.type === \"observation\") {\n                          return (\n                            <div\n                              key={index}\n                              className=\"text-sm mb-4 d-flex flex-column\"\n                            >\n                              <div className=\"fw-bold\">Observation </div>\n                              {result.content}\n                            </div>\n                          );\n                        }\n                        if (result.type === \"finalAnswer\") {\n                          return (\n                            <div\n                              key={index}\n                              className=\"text-sm mb-4 d-flex flex-column\"\n                            >\n                              <div className=\"fw-bold\">Final Answer </div>\n                              {result.content}\n                            </div>\n                          );\n                        }\n                      })}\n                  </div>\n                </div>\n              ))}\n\n              {loading && (\n                <div key=\"loading\" className={`d-flex align-items-center`}>\n                  <div>\n                    <span\n                      className=\"spinner-grow spinner-grow-sm me-1\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              {messages.length > 0 && !loading && (\n                <button\n                  onClick={() => run()}\n                  className=\"btn btn-dark w-100 mt-2\"\n                >\n                  Continue\n                </button>\n              )}\n              {messages.length > 0 && isLoop && loading && (\n                <button\n                  onClick={() => setIsLoop(false)}\n                  className=\"btn btn-dark w-100 mt-2\"\n                >\n                  Stop\n                </button>\n              )}\n            </div>\n          </div>\n        </Wrapper>\n      </ModalBody>\n    </ModalOverlay>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/microchipgnu.near/widget/Agent", "fact_widget_deployments_id": "de13cb993e92679cdd59e835da97eb9f", "inserted_timestamp": "2024-03-18T19:26:38.597Z", "modified_timestamp": "2024-03-18T19:26:38.597Z", "__row_index": 3}