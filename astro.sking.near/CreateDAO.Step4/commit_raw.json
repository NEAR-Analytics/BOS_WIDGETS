{"tx_hash": "BCZFvt32d6xFKZHUbsX2ZjMFo1iFspGq5cxUtobZDgSJ", "action_id_social": "FwF9XNeBEChnoZFgvXKttPHK3q3rDjRvf1KSbGR5TpAR-0-widget", "block_id": 97969183, "block_timestamp": "2023-08-03T08:15:59.998Z", "signer_id": "astro.sking.near", "widget_name": "CreateDAO.Step4", "source_code": "const { formState, errors, renderFooter } = props;\nconst { accountId } = context;\n\nconst initialAnswers = {\n  policy: formState.policy,\n};\n\n// not using formState because, the formState doesn't match the ui state\n\nconst initialMembers = [];\n\nfor (const role of initialAnswers.policy.roles) {\n  for (const member of role.kind.Group) {\n    initialMembers.push({\n      role: role.name,\n      name: member,\n    });\n  }\n}\n\nconst initialState = {\n  roles: initialAnswers.policy.roles.length\n    ? initialAnswers.policy.roles.map((r) => r.name)\n    : [\"council\"],\n  members: initialMembers.length\n    ? initialMembers\n    : [{ role: \"council\", name: accountId }],\n};\n\nState.init({\n  answers: initialState,\n});\n\n// -- roles\nconst onAddEmptyRole = () => {\n  State.update({\n    answers: {\n      ...state.answers,\n      roles: [...state.answers.roles, \"\"],\n    },\n  });\n};\n\nconst onRemoveRole = (index) => {\n  State.update({\n    answers: {\n      ...state.answers,\n      roles: state.answers.roles.map((role, i) => (i === index ? null : role)),\n    },\n  });\n};\n\nconst onSetRoleName = (index, name) => {\n  State.update({\n    answers: {\n      ...state.answers,\n      roles: state.answers.roles.map((role, i) => (i === index ? name : role)),\n    },\n  });\n};\n\n// -- members\nconst onAddEmptyMember = () => {\n  State.update({\n    answers: {\n      ...state.answers,\n      members: [\n        ...state.answers.members,\n        { name: \"\", role: state.answers.roles[0] },\n      ],\n    },\n  });\n};\n\nconst onRemoveMember = (index) => {\n  State.update({\n    answers: {\n      ...state.answers,\n      members: state.answers.members.map((member, i) =>\n        i === index ? null : member\n      ),\n    },\n  });\n};\n\nconst onSetMemberName = (index, name) => {\n  State.update({\n    answers: {\n      ...state.answers,\n      members: state.answers.members.map((member, i) =>\n        i === index ? { ...member, name } : member\n      ),\n    },\n  });\n};\n\nconst onSetMemberRole = (index, role) => {\n  State.update({\n    answers: {\n      ...state.answers,\n      members: state.answers.members.map((member, i) =>\n        i === index ? { ...member, role } : member\n      ),\n    },\n  });\n};\n\n// Make the state back to formState format\nconst finalState = {\n  policy: {\n    ...formState.policy,\n    roles: state.answers.roles\n      .filter((role, i) => role !== null && role !== \"\")\n      .map((role, i) => ({\n        name: role,\n        kind: {\n          Group: state.answers.members\n            .filter((m) => m.role === role && m !== null && m.name !== \"\")\n            .map((m) => m.name),\n        },\n        permissions:\n          formState.policy.roles[i]?.permissions || role === \"council\"\n            ? [\"*:*\"]\n            : [],\n        vote_policy: formState.policy.roles[i]?.vote_policy || {},\n      })),\n  },\n};\n\nreturn (\n  <div className=\"mt-4 ndc-card p-4\">\n    <div className=\"d-flex flex-column gap-4\">\n      <h2 className=\"h5 fw-bold\">\n        <span\n          className=\"rounded-circle d-inline-flex align-items-center justify-content-center fw-bolder h5 me-2\"\n          style={{\n            width: \"48px\",\n            height: \"48px\",\n            border: \"1px solid #82E299\",\n          }}\n        >\n          4\n        </span>\n        Add Groups & Members\n      </h2>\n\n      <div className=\"mb-3\">\n        <div className=\"d-flex gap-2 justify-content-between\">\n          <div>\n            <h3 className=\"h6 fw-bold\">Add Groups</h3>\n            <p className=\"text-black-50 fw-light small\">\n              Adding groups to DAO during creation is not supported using web\n              based wallets. Anyway, you can add more groups later in DAO\n              settings\n            </p>\n          </div>\n          <Widget\n            src=\"nui.sking.near/widget/Input.Button\"\n            props={{\n              children: <i className=\"bi bi-plus-lg\" />,\n              variant: \"icon info outline\",\n              size: \"lg\",\n              onClick: onAddEmptyRole,\n            }}\n          />\n        </div>\n        {state.answers.roles.map((r, i) => (\n          <div\n            className={[\n              \"d-flex align-items-center gap-2 mt-2\",\n              r === null ? \"d-none\" : \"\",\n            ].join(\" \")}\n            key={i}\n          >\n            <Widget\n              src=\"nui.sking.near/widget/Input.ExperimentalText\"\n              props={{\n                placeholder: \"Group 1\",\n                size: \"lg\",\n                disabled: r === \"council\",\n                value: r === \"council\" ? \"council\" : undefined,\n                onChange: (v) => onSetRoleName(i, v),\n                useTimeout: true,\n                error:\n                  errors.policy.roles[\n                    finalState.policy.roles.findIndex((role) => role.name === r)\n                  ].name,\n\n                inputProps: { defaultValue: r },\n              }}\n            />\n            {r !== \"council\" && (\n              <Widget\n                src=\"nui.sking.near/widget/Input.Button\"\n                props={{\n                  children: <i className=\"bi bi-trash\" />,\n                  variant: \"icon danger outline\",\n                  size: \"lg\",\n                  onClick: () => onRemoveRole(i),\n                }}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div>\n        <div className=\"d-flex gap-2 justify-content-between\">\n          <div>\n            <h3 className=\"h6 fw-bold\">Add Members</h3>\n            <p className=\"text-black-50 fw-light small\">\n              Add members to the DAO and set their{\" \"}\n              <a\n                href=\"\"\n                target=\"_blank\"\n                style={{\n                  color: \"#4498E0\",\n                }}\n              >\n                roles\n              </a>\n              .\n            </p>\n          </div>\n          <Widget\n            src=\"nui.sking.near/widget/Input.Button\"\n            props={{\n              children: <i className=\"bi bi-plus-lg\" />,\n              variant: \"icon info outline\",\n              size: \"lg\",\n              onClick: onAddEmptyMember,\n            }}\n          />\n        </div>\n\n        {state.answers.members.map((member, i) => {\n          const trueRoleIndex =\n            member !== null &&\n            finalState.policy.roles.findIndex(\n              (role) => role.name === member.role\n            );\n          const trueMemberIndex =\n            member !== null &&\n            trueRoleIndex !== -1 &&\n            finalState.policy.roles[trueRoleIndex].kind.Group.findIndex(\n              (m) => m === member.name\n            );\n\n          return (\n            <div\n              className={[\n                \"d-flex align-items-center gap-2 mt-2\",\n                member === null ? \"d-none\" : \"\",\n              ].join(\" \")}\n              key={i}\n            >\n              <Widget\n                src=\"nui.sking.near/widget/Input.ExperimentalText\"\n                props={{\n                  placeholder: \"user.near\",\n                  size: \"lg\",\n                  useTimeout: true,\n                  inputProps: { defaultValue: member.name },\n                  onChange: (v) => onSetMemberName(i, v),\n                  disabled: i === 0,\n                  error:\n                    errors.policy.roles[trueRoleIndex].kind.Group[\n                      trueMemberIndex\n                    ],\n                }}\n              />\n              <Widget\n                src=\"nui.sking.near/widget/Input.Select\"\n                props={{\n                  placeholder: \"Role\",\n                  size: \"lg\",\n                  options: state.answers.roles\n                    .filter((r) => r !== null && r !== \"\")\n                    .map((r) => ({\n                      title: r,\n                      value: r,\n                    })),\n                  value: member.role,\n                  onChange: (v) => onSetMemberRole(i, v),\n                  disabled: i === 0,\n                }}\n              />\n              {i > 0 && (\n                <Widget\n                  src=\"nui.sking.near/widget/Input.Button\"\n                  props={{\n                    children: <i className=\"bi bi-trash\" />,\n                    variant: \"icon danger outline\",\n                    size: \"lg\",\n                    onClick: () => onRemoveMember(i),\n                  }}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n\n    {renderFooter(finalState)}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astro.sking.near/widget/CreateDAO.Step4", "fact_widget_deployments_id": "dd0cf5b5127d831b47a0ae9fa70c2eab", "inserted_timestamp": "2023-08-03T09:28:40.596Z", "modified_timestamp": "2023-08-03T09:28:40.596Z", "__row_index": 1}