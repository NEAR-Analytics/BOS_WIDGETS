{"tx_hash": "Bac7MMdFrp9brdmS6R5NsxJFVuhe7VYy8xK5m6KiyZ4R", "action_id_social": "BHfJFiitnFwnwm5gWuaKbFXCmUwHiTCQQmvKH7FgYmAc-0-widget", "block_id": 100516368, "block_timestamp": "2023-09-06T11:56:19.261Z", "signer_id": "genadrop.near", "widget_name": "GenaDrop.DAO.NFTMint", "source_code": "/**\n * To Do\n * Check if policies get updated for different dao\n * Check if gas is right amount\n * Error happening inside of funcition call\n * can propose is not updating correctly\n */\nconst nearContract = \"nft.genadrop.near\";\nconst nft_gas = 200000000000000;\nconst nft_deposit = 10000000000000000000000;\nconst proposal_gas = 219000000000000;\nconst method_name = \"nft_mint\";\nconst daoId = props.daoId ?? \"drop.sputnik-dao.near\";\nconst nearOnly = true;\nlet accountId = context.accountId;\nconst contractAddresses = {\n  0: [nearContract, \"Near\"],\n};\nconst chains = [\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\n\nconst proposalKinds = {\n  ChangeConfig: \"config\",\n  ChangePolicy: \"policy\",\n  AddMemberToRole: \"add_member_to_role\",\n  RemoveMemberFromRole: \"remove_member_from_role\",\n  FunctionCall: \"call\",\n  UpgradeSelf: \"upgrade_self\",\n  UpgradeRemote: \"upgrade_remote\",\n  Transfer: \"transfer\",\n  SetStakingContract: \"set_vote_token\",\n  AddBounty: \"add_bounty\",\n  BountyDone: \"bounty_done\",\n  Vote: \"vote\",\n  FactoryInfoUpdate: \"factory_info_update\",\n  ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n  ChangePolicyRemoveRole: \"policy_remove_role\",\n  ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n  ChangePolicyUpdateParameters: \"policy_update_parameters\",\n};\n\nconst actions = {\n  AddProposal: \"AddProposal\",\n  VoteApprove: \"VoteApprove\",\n  VoteReject: \"VoteReject\",\n  VoteRemove: \"VoteRemove\",\n};\n\n// Helper Functions\nfunction showAlertMessage(message) {\n  State.update({\n    showAlert: true,\n    toastMessage: message,\n  });\n  setTimeout(() => {\n    State.update({ showAlert: false });\n  }, 3000);\n}\n\nState.init({\n  title: \"\",\n  description: \"\",\n  recipient: context.accountId,\n  isSoulBound: false,\n  showAlert: false,\n  toastMessage: \"\",\n  selectIsOpen: false,\n  selectedChain: \"0\",\n  daoId: daoId,\n  proposal_args: null,\n  image: null,\n});\n\n// -- Get all the roles from the DAO policy\nconst roles = Near.view(state.daoId, \"get_policy\");\nconst daoBond = roles.proposal_bond;\nroles = roles ? roles.roles : [];\n\nconst isUserAllowedTo = (roles, user, kind, action) => {\n  // Filter the user roles\n  const userRoles = roles.filter((role) => {\n    if (role.kind === \"Everyone\") return true;\n    return role.kind.Group && role.kind.Group.includes(user);\n  });\n\n  // Check if the user is allowed to perform the action\n  const allowed = userRoles.some(({ permissions }) => {\n    return (\n      permissions.includes(`${kind}:${action}`) ||\n      permissions.includes(`${kind}:*`) ||\n      permissions.includes(`*:${action}`) ||\n      permissions.includes(\"*:*\")\n    );\n  });\n\n  return allowed;\n};\n\nconst canPropose = isUserAllowedTo(\n  roles,\n  context.accountId,\n  proposalKinds.FunctionCall,\n  actions.AddProposal\n);\n\nconsole.log(\n  \"Can Propose Function call  for \" +\n    daoId +\n    \" |  \" +\n    context.accountId +\n    \" \" +\n    canPropose\n);\n\nfunction prepareMetadata(callback) {\n  if (!state.image.cid) {\n    return;\n  }\n  if (!accountId) {\n    showAlertMessage(\"Please log in before continuing\");\n  } else if (!state.title) {\n    showAlertMessage(\"Please enter a title for the NFT\");\n  } else if (!state.description) {\n    showAlertMessage(\"Please enter a description for the NFT\");\n  } else {\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      const cid = res.body.cid;\n\n      console.log(\"State Image CID: \" + state.image.cid);\n      console.log(\"Reference CID: \" + cid);\n\n      const metadata = {\n        token_id: `${Date.now()}`,\n        metadata: {\n          title: state.title,\n          description: state.description,\n          media: `https://ipfs.io/ipfs/${state.image.cid}`,\n          reference: `ipfs://${cid}`,\n        },\n        receiver_id: state.recipient,\n      };\n      callback(metadata);\n    });\n  }\n}\n\nconst handlePropose = () => {\n  prepareMetadata((metadata) => {\n    const proposal_args = Buffer.from(\n      JSON.stringify(metadata),\n      \"utf-8\"\n    ).toString(\"base64\");\n    Near.call([\n      {\n        contractName: state.daoId,\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: \"create proposal to mint NFT\",\n            kind: {\n              FunctionCall: {\n                receiver_id: nearContract,\n                actions: [\n                  {\n                    method_name: method_name,\n                    args: proposal_args,\n                    deposit: \"10000000000000000000000\",\n                    gas: \"\" + nft_gas,\n                    receiver_id: `${state.recipient ?? context.accountId}`,\n                  },\n                ],\n              },\n            },\n          },\n        },\n        deposit: daoBond,\n        gas: \"\" + proposal_gas,\n      },\n    ]);\n  });\n};\n\nconst handleMint = () => {\n  prepareMetadata((metadata) => {\n    Near.call([\n      {\n        contractName: \"nft.genadrop.near\",\n        methodName: method_name,\n        args: metadata,\n        gas: gas,\n        deposit: deposit,\n      },\n    ]);\n  });\n};\n\nfunction getAccountsWithProfile() {\n  const data = Social.keys(\"*/profile\", \"final\");\n\n  if (!data) {\n    return \"Loading\";\n  }\n\n  const accounts = Object.entries(data);\n\n  const allProfiles = [];\n\n  for (let i = 0; i < accounts.length; ++i) {\n    const accountId = accounts[i][0];\n    allProfiles.push(accountId);\n  }\n  return allProfiles;\n}\n\nconst onChangeRecipient = (recipient) => {\n  State.update({\n    recipient: state.selectedChain === \"0\" ? recipient[0] : recipient,\n  });\n};\n\nconst Heading = styled.p`\n  margin: 3rem auto 0px auto;\n  font-size: 1em;\n  color: #0f1d40;\n  line-height: 2.1rem;\n  width: 60%;\n  text-align: center;\n  font-family: \"SF Pro Display\", sans-serif;\n`;\nconst SubHeading = styled.p`\n  margin: 0 auto 3px auto;\n  font-size: 1em;\n  color: #0f1d40;\n  line-height: 1.4rem;\n  width: 60%;\n  text-align: center;\n  font-family: \"SF Pro Display\", sans-serif;\n`;\n\nconst ImageUploadCard = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  width: 80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0, 0, 0, 0.2);\n  margin: 30px auto;\n  padding: 1.5rem;\n  text-align: center;\n`;\n\nconst Main = styled.div`\n  display: grid;\n  gap: 3rem;\n  align-content: center;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  margin-top: 5px;\n  width: 100%;\n  padding: 1rem;\n  .button {\n    padding: 0.75em 2em;\n    border-radius: 0.7em;\n    border: 1px solid #0d99ff;\n    transition: all 0.3s;\n    cursor: pointer;\n    color: #fff;\n    background: #0d99ff;\n    &:hover {\n      color: #0d99ff;\n      background: #fff;\n    }\n    @media screen and (max-width: 540px) {\n      padding: 0.5em 2em;\n    }\n  }\n`;\n\nconst Text = styled.p`\n  font-size: 0.9rem;\n  color: #525c76;\n  line-height: 1rem;\n  margin: 3px;\n`;\n\nconst Elipse = styled.div`\n  background-color: #dff3f9;\n  height: 100px;\n  width: 100px;\n  border-radius: 50%;\n`;\n\nconst Card = styled.div`\n  padding: 1em;\n  border: 1px solid #e5e8eb;\n  gap: 2em;\n  margin: 10px auto;\n  border-radius: 0.7em;\n  & input {\n    display: block;\n    padding: 0.5em;\n    width: 100%;\n    border: 1px solid #e5e8eb;\n    border-radius: 10px;\n    outline: none;\n    background: #f4f5f6;\n    color: #525c76;\n    :focus {\n      box-shadow: none;\n      border: 1px solid #0d99ff;\n    }\n    &::placeholder {\n      color: palevioletred;\n    }\n  }\n  .soulbound {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n`;\n\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height: 100%;\n  max-height: 100%;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  & > img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding: 0.5em;\n  width: 100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus {\n    border: 1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  display: block;\n  padding: 0.5em;\n  width: 100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus {\n    border: 1px solid #0d99ff;\n  }\n`;\n\nconsole.log(\n  \"Here \ud83e\udd14 \" +\n    state.selectedChain +\n    \" \" +\n    chains\n      .filter((chain) => {\n        return state.selectedChain.toString() == chain.id;\n      })\n      .map((c) => c.url)\n);\n\nreturn (\n  <>\n    {state.showAlert && (\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n    )}\n    <Heading className=\"text-center fs-2 fw-bold\">\n      Mint NFT / DAO Propose on NEAR\n    </Heading>\n\n    <Main className=\"container-fluid\">\n      {!state.image.cid ? (\n        <div className=\"flex-grow-1\">\n          <SubHeading>Upload an image to create an NFT on NEAR</SubHeading>\n          <ImageUploadCard className=\"flex-grow-1\">\n            <Elipse />\n            <>\n              <IpfsImageUpload\n                image={state.image}\n                className=\"btn text-decoration-none link-primary pe-auto\"\n              />\n              <div>\n                <Text>\n                  We support .jpg, .jpeg, .png, .svg files and mint to Near\n                </Text>\n              </div>\n            </>\n          </ImageUploadCard>\n        </div>\n      ) : (\n        <>\n          <Card className=\"d-flex flex-column align-items-center w-100\">\n            <div>\n              <IpfsImageUpload\n                image={state.image}\n                className=\"btn btn-outline-primary border-0 rounded-3\"\n              />\n            </div>\n            <ImageCard>\n              <img\n                src={`https://ipfs.io/ipfs/` + state.image.cid}\n                alt=\"uploaded image\"\n                width=\"100%\"\n                height=\"100%\"\n                className=\"rounded-3\"\n              />\n            </ImageCard>\n          </Card>\n          <div>\n            <Card>\n              <Card>\n                Title:\n                <Input\n                  type=\"text\"\n                  value={state.title || \"\"}\n                  onChange={(e) =>\n                    State.update({\n                      title: e.target.value,\n                    })\n                  }\n                />\n              </Card>\n              <Card>\n                Description:\n                <TextArea\n                  type=\"text\"\n                  value={state.description || \"\"}\n                  onChange={(e) =>\n                    State.update({ description: e.target.value })\n                  }\n                />\n              </Card>\n              <Card>\n                Propose to Mint To:\n                <Typeahead\n                  id=\"async-example\"\n                  className=\"type-ahead\"\n                  isLoading={isLoading}\n                  labelKey=\"search\"\n                  minLength={1}\n                  options={getAccountsWithProfile()}\n                  onChange={(value) => onChangeRecipient(value)}\n                  placeholder={\n                    state.selectedChain == \"0\" ? accountId : state.sender\n                  }\n                />\n              </Card>\n              <Card>\n                DAO to Propose to Mint\n                <Typeahead\n                  id=\"async-example\"\n                  className=\"type-ahead\"\n                  isLoading={isLoading}\n                  labelKey=\"search\"\n                  minLength={1}\n                  options={getAccountsWithProfile()}\n                  onChange={(value) => State.update({ daoId: value[0] })}\n                  placeholder={state.daoId}\n                />\n              </Card>\n            </Card>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary d-flex flex-column align-items-center mx-auto\"\n              onClick={handleMint}\n            >\n              Mint to {contractAddresses[state.selectedChain][1]}\n            </button>\n            {(true || canPropose) && state.title && state.description ? (\n              <button\n                type=\"button\"\n                className=\"btn btn-primary d-flex flex-column align-items-center mx-auto\"\n                onClick={handlePropose}\n                disabled={!canPropose}\n              >\n                {`${canPropose ? \"\" : \"Cannot \"}Propose to Mint to NEAR to ${\n                  state.daoId\n                }`}\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"btn btn-danger d-flex flex-column align-items-center mx-auto\"\n              >\n                {`Finish User Args To Propose to Mint to NEAR to ${state.daoId}`}\n              </button>\n            )}\n          </div>\n        </>\n      )}\n    </Main>\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\n  </>\n);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/genadrop.near/widget/GenaDrop.DAO.NFTMint", "fact_widget_deployments_id": "695674be60c6407505c2dcb90524ce80", "inserted_timestamp": "2023-09-06T13:51:12.069Z", "modified_timestamp": "2023-09-06T13:51:12.069Z", "__row_index": 0}