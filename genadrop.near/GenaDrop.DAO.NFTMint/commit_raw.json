{"tx_hash": "5CqVcjdigDHYVbF3RC19XXedv13vf9hMz83Cchz3JR28", "action_id_social": "7BHajDr21369cZ9WfYVJYuxpfEYQLopKivTbiwDnDJjP-0-widget", "block_id": 100409150, "block_timestamp": "2023-09-04T23:58:11.495Z", "signer_id": "genadrop.near", "widget_name": "GenaDrop.DAO.NFTMint", "source_code": "/**\n * To Do\n * Add DAO Policy and whether can propose\n */\nconst nearContract = \"nft.genadrop.near\";\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst daoId = props.daoId ?? \"\";\nconst nearOnly = true;\nlet accountId = context.accountId;\nconst contractAddresses = {\n  0: [nearContract, \"Near\"],\n};\nconst chains = [\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\nconst handleMint = () => {\n  if (!state.image.cid) {\n    return;\n  }\n  if (!accountId) {\n    console.log(\"Please login\"); // add share dogvwallet\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please log in before continuing\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.title) {\n    console.log(\"Please Enter title\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n    console.log(\"come\", metadata);\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      console.log(\"GO ON SOUN\", res);\n      const cid = res.body.cid;\n      const gas = 200000000000000;\n      const deposit = 10000000000000000000000;\n      console.log(\"State Image CID: \" + state.image.cid);\n      console.log(\"Reference CID: \" + cid);\n      Near.call([\n        {\n          contractName: \"nft.genadrop.near\",\n          methodName: \"nft_mint\",\n          args: {\n            token_id: `${Date.now()}`,\n            metadata: {\n              title: state.title,\n              description: state.description,\n              media: `https://ipfs.io/ipfs/${state.image.cid}`,\n              reference: `ipfs://${cid}`,\n            },\n            receiver_id: state.recipient,\n          },\n          gas: gas,\n          deposit: deposit,\n        },\n      ]);\n    });\n  }\n};\n\n\n\nState.init({\n  title: \"\",\n  description: \"\",\n  recipient: \"\",\n  isSoulBound: false,\n  showAlert: false,\n  toastMessage: \"\",\n  selectIsOpen: false,\n  selectedChain: \"0\",\n  daoId:  daoId,\n});\n\n//select tag\nconst handleSelectClick = () => {\n  State.update({\n    selectIsOpen: !state.selectIsOpen,\n  });\n};\n\n// const handleOptionClick = (option) => {\n//   setSelectedOption(option);\n//   setIsOpen(false);\n// };\n\nconst handleOutsideClick = (e) => {\n  if (!e.target.closest(\".select-replica__select\")) {\n    State.update({\n      selectIsOpen: false,\n    });\n  }\n};\n\nconst onChangeTitle = (title) => {\n  console.log(\"go daddy\", state.recipient);\n  State.update({\n    title,\n  });\n};\n\nconst data = Social.keys(\"*/profile\", \"final\");\n\nif (!data) {\n  return \"Loading\";\n}\n\nconst accounts = Object.entries(data);\n\nconst allWidgets = [];\n\nfor (let i = 0; i < accounts.length; ++i) {\n  const accountId = accounts[i][0];\n  allWidgets.push(accountId);\n}\n\nconst onChangeRecipient = (recipient) => {\n  state.selectedChain === \"0\"\n    ? State.update({\n        recipient: recipient[0],\n      })\n    : State.update({\n        recipient,\n      });\n};\nconst onChangeDAO = (daoId) => {\n State.update({\n        daoId,\n      });\n};\n\nconst handleChainChange = (chain_id) => {\n  console.log(\n    \"get what we doing:\",\n    chain_id || \"no value from event?\",\n    chain_id == \"0\",\n    !accountId\n  );\n  if (chain_id == \"0\") {\n    if (!accountId) {\n      console.log(\"not what we thought,:\", accountId);\n      State.update({\n        showAlert: true,\n        toastMessage: \"Please log in before continuing\",\n      });\n      return;\n    }\n    State.update({\n      selectedChain: chain_id,\n    });\n  }\n  console.log(\"encts here\", Ethers.send);\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0x\" + Number(chain_id).toString(16),\n    },\n  ]).then((data) => console.log(\"done!!!\", data));\n  console.log(\"what happens after\");\n  State.update({\n    selectedChain: chain_id,\n  });\n  console.log(\"afters\", state.selectedChain);\n};\n\nconst onChangeDesc = (description) => {\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\n  State.update({\n    description,\n  });\n};\n\nconst handleToggle = () => {\n  State.update({\n    isSoulBound: !state.isSoulBound,\n  });\n};\n// if (state.sender === undefined) {\n//   console.log(\"of course it's undefined\", ethers);\n//   const accounts = Ethers.send(\"eth_requestAccounts\", []);\n//   console.log(\"account\", accounts);\n//   if (accounts.length) {\n//     State.update({ sender: accounts[0] });\n//     console.log(\"set sender\", accounts[0]);\n//   }\n// }\n\nconst Heading = styled.p`\n  margin: 3rem auto 0px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  line-height:2.1rem;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\nconst SubHeading = styled.p`\n  margin: 0 auto 3px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  line-height:1.4rem;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst ImageUploadCard = styled.div`\ndisplay:flex;\nflex-flow: column nowrap;\nalign-items: center;\n  width:80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\n  margin:30px auto;\n  padding:1.5rem;\n  text-align: center;\n`;\n\nconst Main = styled.div`\n  display: grid;\n  gap: 3rem;\n  align-content:center;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  margin-top: 5px;\n  width:100%;\n  padding: 1rem;\n  .button{\n    padding: .75em 2em;\n    border-radius: .7em;\n    border: 1px solid #0d99ff;\n    transition: all .3s;\n    cursor: pointer;\n    color: #fff;\n    background: #0d99ff;\n    &:hover{\n        color: #0d99ff;\n        background:#fff;\n    }\n  @media screen and (max-width: 540px){\n      padding: .5em 2em;    \n      }\n  }\n`;\n\nconst Text = styled.p`\nfont-size: .9rem;\ncolor: #525c76;\nline-height:1.rem;\nmargin: 3px;\n`;\n\nconst Elipse = styled.div`\nbackground-color:#dff3f9;\nheight: 100px;\nwidth: 100px;\nborder-radius: 50%;\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n& input{\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n  box-shadow:none;\n    border:1px solid #0d99ff;\n  }\n  &::placeholder {\n    color: palevioletred;\n  }\n  }\n  .soulbound{\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n`;\n\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height:100%;\n  max-height:100%;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  &>img{\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  }\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n`;\n\nconst SelectTag = styled.select`\n  height: fit-content;\n  width: 300px;\n`;\n\nconst ChainIcon = styled.option`\n  display: flex;\n  height: 130px;\n  padding: 1rem auto;\n  &>img{\n    height:100px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\n\nconst SelectReplicaContainer = styled.div`\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  z-index: 1;\n  & .select-replica__select {\n    position: relative;\n  }\n\n  & .select-replica__selected {\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    // padding: 3px;\n    border: 1px solid #ccc;\n    gap: 10px;\n    border-radius: 4px;\n    background-color: #fff;\n    width: 200px;\n    & > img {\n      height: 100%;\n      width: 100px;\n      object-fit: contain;\n    }\n  }\n\n  & .select-replica__options {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    width: 100%;\n    /* height: fit-content; */\n    overflow-y: auto;\n    border: 1px solid #ccc;\n    border-top: none;\n    border-radius: 0 0 4px 4px;\n    background-color: #fff;\n    max-height: 250px;\n    display: none;\n  }\n\n  & .select-replica__options.open {\n    display: block;\n  }\n\n  & .select-replica__option {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    background-color: #fff;\n    padding: 3px;\n    border-bottom: 1px solid gray;\n  }\n\n  & .select-replica__option.selected {\n    background-color: #f0f0f0;\n  }\n\n  & .select-replica__option img {\n    height: 60px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\n\nconst SelectGroup = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  gap: 1rem;\n  margin: 2rem auto;\n`;\n\nconst ToggleButton = styled.div`\n   /* The switch - the box around the slider */\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  height: 34px;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 26px;\n  width: 26px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\ninput:checked + .slider {\n  background-color: #2196F3;\n}\n\ninput:focus + .slider {\n  box-shadow: 0 0 1px #2196F3;\n}\n\ninput:checked + .slider:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 34px;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n} \n`;\n\nconsole.log(\n  \"Here \ud83e\udd14 \" +\n    state.selectedChain +\n    \" \" +\n    chains\n      .filter((chain) => {\n        return state.selectedChain.toString() == chain.id;\n      })\n      .map((c) => c.url)\n);\n\nreturn (\n  <>\n    {state.showAlert && (\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n    )}\n    <Heading className=\"text-center fs-2 fw-bold\">Mint NFT on NEAR</Heading>\n\n    <Main className=\"container-fluid\">\n      {!state.image.cid ? (\n        <div className=\"flex-grow-1\">\n          <SubHeading>Upload an image to create an NFT on NEAR</SubHeading>\n          <ImageUploadCard className=\"flex-grow-1\">\n            <Elipse />\n            <>\n              <IpfsImageUpload\n                image={state.image}\n                className=\"btn text-decoration-none link-primary pe-auto\"\n              />\n              <div>\n                <Text>\n                  We support .jpg, .jpeg, .png, .svg files and mint to Near\n                </Text>\n              </div>\n            </>\n          </ImageUploadCard>\n        </div>\n      ) : (\n        <>\n          <Card className=\"d-flex flex-column align-items-center w-100\">\n            <div>\n              <IpfsImageUpload\n                image={state.image}\n                className=\"btn btn-outline-primary border-0 rounded-3\"\n              />\n            </div>\n            <ImageCard>\n              <img\n                src={`https://ipfs.io/ipfs/` + state.image.cid}\n                alt=\"uploaded image\"\n                width=\"100%\"\n                height=\"100%\"\n                className=\"rounded-3\"\n              />\n            </ImageCard>\n          </Card>\n          <div>\n            <Card>\n              <Card>\n                Title:\n                <Input\n                  type=\"text\"\n                  value={state.title || \"\"}\n                  onChange={(e) => onChangeTitle(e.target.value)}\n                />\n              </Card>\n              <Card>\n                Description:\n                <TextArea\n                  type=\"text\"\n                  value={state.description || \"\"}\n                  onChange={(e) => onChangeDesc(e.target.value)}\n                />\n              </Card>\n              <Card>\n                Propose to Mint To:\n\n                  <Typeahead\n                    id=\"async-example\"\n                    className=\"type-ahead\"\n                    isLoading={isLoading}\n                    labelKey=\"search\"\n                    minLength={1}\n                    options={allWidgets}\n                    onChange={(value) => onChangeRecipient(value)}\n                    placeholder={\n                      state.selectedChain == \"0\" ? accountId : state.sender\n                    }\n                  />\n            \n              </Card>\n                            <Card>\n                DAO to Propose to Mint\n\n                  <Typeahead\n                    id=\"async-example\"\n                    className=\"type-ahead\"\n                    isLoading={isLoading}\n                    labelKey=\"search\"\n                    minLength={1}\n                    options={allWidgets}\n                    onChange={(value) => onChangeDAO(value)}\n                    placeholder={state.daoId\n                    }\n                  />\n            \n              </Card>\n            </Card>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary d-flex flex-column align-items-center mx-auto\"\n              onClick={handleMint}\n            >\n              Propose to Mint to {contractAddresses[state.selectedChain][1]}\n            </button>\n          </div>\n        </>\n      )}\n    </Main>\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/genadrop.near/widget/GenaDrop.DAO.NFTMint", "fact_widget_deployments_id": "72a304be5ac94a07a9a0c0a9efbf9744", "inserted_timestamp": "2023-09-05T01:56:31.012Z", "modified_timestamp": "2023-09-05T01:56:31.012Z", "__row_index": 1}