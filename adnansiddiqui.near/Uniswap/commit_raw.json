{"tx_hash": "A3BBXDAJXmajiniLJa5GjDaeB3m8QXvctUweJkZ9Pten", "action_id_social": "By9J7A8LBta5mbyqt6BWPqpHoA6g7hCrcc41kcjowvDA-0-widget", "block_id": 116056825, "block_timestamp": "2024-04-03T15:50:52.863Z", "signer_id": "adnansiddiqui.near", "widget_name": "Uniswap", "source_code": "// FETCH LIDO ABI\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst mainnetLidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst rinkebyLidoContract = \"0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD\";\nconst kovanLidoContract = \"0x4b7FCBC11BB45075b9A1F953128C09bC97D6a0D7\";\nconst gorliLidoContract = \"0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F\";\nconst tokenDecimals = 18;\n\nconst network = \"gorli\"; // \"gorli\" // \"rinkeby\" // \"mainnet\"\n\nswitch (network) {\n  case \"kovan\":\n    lidoContract = kovanLidoContract;\n    break;\n  case \"gorli\":\n    lidoContract = gorliLidoContract;\n    break;\n  case \"rinkeby\":\n    lidoContract = rinkebyLidoContract;\n    break;\n  case \"mainnet\":\n    lidoContract = mainnetLidoContract;\n    break;\n  default:\n    lidoContract = mainnetLidoContract;\n    break;\n}\n\n// Fetching The Lido Contract ABI\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\n\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// FETCH LIDO STAKING APR\nif (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// DETECT SENDER\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH TX COST // only applies to lido\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  // change to uniswap\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">\ud83e\udd84 Swap on Uniswap </div>\n      <div class=\"SubHeader\">Swap Using Uniswap v2 Contracts.</div>\n\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to stake</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\">\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;stETH\n              </span>\n            </div>\n          </div>\n          <div class=\"LidoFormTopContainerRight\">\n            <div class=\"LidoAprContainer\">\n              <div class=\"LidoAprTitle\">Lido APR</div>\n              <div class=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\"></span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (parseFloat(state.balance) - 0.05).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitEthers(state.strEther, state.sender)}\n          >\n            <span>Swap</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <div class=\"LidoFooterContainer\">\n          {state.sender && (\n            <div class=\"LidoFooterRaw\">\n              <div class=\"LidoFooterRawLeft\">You will receive</div>\n              <div class=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\n            </div>\n          )}\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Transaction cost</div>\n            <div class=\"LidoFooterRawRight\">{state.txCost}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": {"description": "** This component is about interacting with a smart contract deployed by Lido. **\n\n Lido is an Ethereum 2.0 liquid staking protocol that allows users to deposit their ether into Lido smart contracts and receive stETH, a tokenized version of their staked ether, in return.\nInitializing Contract Addresses. This declares the (immutable) addresses of the Lido contract on different Ethereum networks:\n```\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst mainnetLidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst rinkebyLidoContract = \"0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD\";\nconst kovanLidoContract = \"0x4b7FCBC11BB45075b9A1F953128C09bC97D6a0D7\";\nconst gorliLidoContract = \"0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F\";\n```\n\n`tokenDecimals` represents the decimal precision used by the token:\n```\nconst tokenDecimals = 18;\n```\n \nSelecting A Contract Based On Network:\n```\nconst network = \"gorli\";\n```\n\nThe application can work on different Ethereum networks. It determines the contract address to use based on the `network` value:\n```\nswitch (network) {\n  case \"kovan\":\n    lidoContract = kovanLidoContract;\n    break;\n  //...other switches\n}\n```\n\nFetching The Lido Contract ABI:\n```\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\n```\n\nFetching the APR for staking on Lido from an API endpoint:\n```\nconst apr = fetch(\n  \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n);\n```\nHelper Functions/Conditions:\n - `getStakedBalance`: retrieves the staked balance of a user or receiver.\n```\nconst getStakedBalance = (receiver) => { /*...*/ };\n```\n\n - `submitEthers`: initiates the staking (submitting ethers function) on the contract.\n```\nconst submitEthers = (strEther, _referral) => { /*...*/ };\n```\n\n - Detect Sender And Fetch Balance\n```\nif (state.sender === undefined) { /*...*/ }\nif (state.balance === undefined && state.sender) { /*...*/ }\n```\n - Fetches the estimated transaction cost for the transaction. It does so by calculating gas fees in Ethereum and converting it to USD.\n```\nif (state.txCost === undefined) { /*...*/ }\n```\n\n - Fetching Stylesheets\n```\nconst cssFont = fetch(/*...*/);\nconst css = fetch(/*...*/);\n```\n\nReturning the JSX syntax is used to render the user interface.\n```\nreturn (\n    // JSX codes\n);\n```", "image": {"ipfs_cid": "bafkreie3pnykdgggpxcforqfpvdehv6wum7zcpghavjhirxkt45iqzw3wi"}, "linktree": {"website": "onboarddao.org"}, "name": "Uniswap v2 (WIP)", "tags": {"defi": "", "swap": "", "uniswap": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/adnansiddiqui.near/widget/Uniswap", "fact_widget_deployments_id": "f3d14ae324e9525e58c6a2e606d3bdf7", "inserted_timestamp": "2024-04-03T17:40:04.451Z", "modified_timestamp": "2024-04-03T17:40:04.451Z", "__row_index": 4}