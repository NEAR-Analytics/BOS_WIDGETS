{"tx_hash": "AXtSzdxPxEMMHu8yAj12ndXJ1aMnYMbHdDNGnV3rQCQP", "action_id_social": "EMhKaLHRr9Y7TwYryCYsHffGwLb4pgnyEjGjkXM7RWcd-0-widget", "block_id": 116050049, "block_timestamp": "2024-04-03T13:18:58.045Z", "signer_id": "adnansiddiqui.near", "widget_name": "mft_transfer", "source_code": "const accountId = context.accountId; //account ID from a context object\nconst contract = \"v2.ref-finance.near\"; // name of a smart contract\n\n// Initianlizing State\nState.init({\n  receiverId: \"\",\n  amount: \"\",\n  tokenId: \"\",\n  mft_balance: \"\",\n});\n\n// This is triggered when the user changes the `tokenId` field\nconst onTokenIdChange = ({ target: { value } }) => {\n  State.update({ tokenId: value });\n\n  if (value) {\n    Near.asyncView(\n      contract,\n      \"mft_balance_of\",\n      { account_id: accountId, token_id: `:${value}` },\n      \"final\",\n      false\n    ).then((balance) => State.update({ mft_balance: balance }));\n  } else {\n    State.update({ mft_balance: \"\" });\n  }\n};\n\n// This is triggered when the `amount` field is edited by the user\nconst onAmountChange = ({ target: { value } }) => {\n  State.update({ amount: value === \"0\" ? state.mft_balance : value });\n};\n\n//  This is triggered when the `receiverId` field is edited\nconst onInputChange = ({ target: { value } }) => {\n  State.update({ receiverId: value });\n};\n\n// This is invoked when the `Register` button is clicked.\nconst onRegBtnClick = () => {\n  if (state.tokenId) {\n    Near.call([\n      {\n        contractName: contract,\n        methodName: \"mft_register\",\n        args: {\n          account_id: state.receiverId,\n          token_id: `:${state.tokenId}`,\n        },\n        deposit: 30000000000000000000000,\n      },\n    ]);\n  } else {\n    alert(\"Please enter a token ID.\");\n  }\n};\n\n  // This action happens when the `Send Tokens` button is clicked\nconst onSendBtnClick = () => {\n  const amount = state.amount || state.mft_balance;\n\n  Near.call([\n    {\n      contractName: contract,\n      methodName: \"mft_transfer\",\n      args: {\n        amount: amount,\n        receiver_id: state.receiverId,\n        token_id: `:${state.tokenId}`,\n      },\n      deposit: 1,\n    },\n  ]);\n};\n\nconst sendingForm = (\n  <>\n    <div class=\"border border-black p-3\">\n      <label>receiver_id</label>\n      <input placeholder=\"acvzii.tg\" onChange={onInputChange} />\n      <button class=\"btn btn-primary mt-2\" onClick={onRegBtnClick}>\n        Register\n      </button>\n      <button class=\"btn btn-primary mt-2\" onClick={onSendBtnClick}>\n        Send\n      </button>\n    </div>\n  </>\n);\n\n// If user is not logged in\nconst notLoggedInWarning = <p class=\"text-center py-2\"> Please login </p>;\n\n// Render\nreturn (\n  <>\n    {\n      <div class=\"container py-5\">\n        <div class=\"row justify-content-center\">\n          <div class=\"col-md-6\">\n            <h1 class=\"text-center mb-4\">Welcome, {accountId}!</h1>\n            <div class=\"card shadow\">\n              <div class=\"card-body\">\n                <p class=\"card-text\">\n                  Here you can check your LP balance and send tokens to other\n                  accounts.\n                </p>\n                <div class=\"d-flex align-items-center mb-3 balance-info\">\n                  <i class=\"fas fa-wallet fa-2x mr-3\"></i>\n                  <div>\n                    <h2 class=\"h5 mb-0\">LP Balance:</h2>\n                    <span\n                      class=\"text-muted\"\n                      data-toggle=\"tooltip\"\n                      title=\"This is the amount of Frax-USDC LP tokens you currently hold.\"\n                    >\n                      {state.mft_balance || \"0\"}\n                    </span>\n                  </div>\n                </div>\n                {context.accountId ? (\n                  <div class=\"border border-secondary rounded p-3\">\n                    <div class=\"form-group\">\n                      <label for=\"tokenId\">Token ID</label>\n                      <input\n                        id=\"tokenId\"\n                        class=\"form-control form-control-lg\"\n                        placeholder=\"Enter the token ID\"\n                        onChange={onTokenIdChange}\n                      />\n                    </div>\n                    <div class=\"form-group\">\n                      <label for=\"amount\">Amount</label>\n                      <input\n                        id=\"amount\"\n                        class=\"form-control form-control-lg\"\n                        placeholder=\"Enter the amount of tokens to send (0 for max)\"\n                        onChange={onAmountChange}\n                      />\n                    </div>\n                    <div class=\"form-group mb-4\">\n                      <label for=\"receiverId\">Receiver ID</label>\n                      <div class=\"input-group\">\n                        <input\n                          id=\"receiverId\"\n                          class=\"form-control form-control-lg\"\n                          placeholder=\"Enter the account ID of the recipient\"\n                          onChange={onInputChange}\n                        />\n                        <div class=\"input-group-append\">\n                          {state.tokenId && (\n                            <button\n                              class=\"btn btn-outline-secondary btn-lg\"\n                              onClick={onRegBtnClick}\n                            >\n                              <i class=\"fas fa-user-plus\"></i> Register\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                      <small class=\"form-text text-muted\">\n                        If the recipient hasn't registered for the LP token,\n                        they need to do so before you can send tokens to them.\n                      </small>\n                    </div>\n                    <button\n                      class=\"btn btn-primary btn-lg btn-block\"\n                      onClick={onSendBtnClick}\n                    >\n                      <i class=\"fas fa-paper-plane\"></i> Send Tokens\n                    </button>\n                  </div>\n                ) : (\n                  <div\n                    class=\"alert alert-warning text-center mb-0\"\n                    role=\"alert\"\n                  >\n                    Please log in to view your balance and send tokens.\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    }\n  </>\n);\n", "metadata": {"description": "This code is about sending and registering for tokens on the Near Protocol blockchain.\n\nVariables are defined as `accountId` extracts user's account ID from a context object and `contract` stores the name of a smart contract.\n\n```\nconst accountId = context.accountId;\nconst contract = \"v2.ref-finance.near\";\n```\n\nThe application state is initialized with the `State.init` method, which sets the default values for `receiverId`, `amount`, `tokenId`, `mft_balance`.\n\n```\nState.init({\n  receiverId: \"\",\n  amount: \"\",\n  tokenId: \"\",\n  mft_balance: \"\",\n});\n```\n\n**Event HandlersMultiple event handlers are defined for various user actions:**\n\n- onTokenIdChange: This is triggered when the user changes the `tokenId` field. It updates the `tokenId` in the application state and fetches the corresponding token balance using the `mft_balance_of` method from the contract.\n\n```\nconst onTokenIdChange = ({ target: { value } }) => {\n  // ...\n};\n```\n\n- onAmountChange: This is triggered when the `amount` field is edited by the user. It updates the `amount` in the application state. If `0` is entered, it defaults to the total balance (`mft_balance`).\n\n```\nconst onAmountChange = ({ target: { value } }) => {\n  // ...\n};\n```\n\n- onInputChange: This is triggered when the `receiverId` field is edited. `receiverId` is updated in the state.\n\n```\nconst onInputChange = ({ target: { value } }) => {\n  // ...\n};\n```\n\n- onRegBtnClick: This is invoked when the `Register` button is clicked. It calls the `mft_register` method from the contract, which registers the account for the specified `tokenId`.\n\n```\nconst onRegBtnClick = () => {\n  // ...\n};\n```\n\n- onSendBtnClick: This action happens when the `Send` button is clicked. It calculates the `amount` (if not explicitly entered) and it calls the `mft_transfer` method from the contract, which transfers the tokens to the `receiverId`.\n\n```\nconst onSendBtnClick = () => {\n  // ...\n};\n```\n\nReturning the JSX syntax is used to render the user interface. The user interface has input fields for entering tokenId, amount, receiverId. Buttons are provided for Register and Send actions.The applicaiton checks if the user is logged in or not. If yes, it displays the input fields and buttons. If not logged in, it shows a alert message urging them to login.\n\n```\nreturn (\n  // JSX code goes here...\n);\n```\n", "image": {}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/adnansiddiqui.near/widget/mft_transfer", "fact_widget_deployments_id": "0cf840d11960fb95c49e0b468a51268a", "inserted_timestamp": "2024-04-03T14:38:26.149Z", "modified_timestamp": "2024-04-03T15:41:01.808Z", "__row_index": 10}