{"tx_hash": "5Uec2Gw94YWheGSvX8xAKXfo4bcvd6WEoX7G4ooHC63U", "action_id_social": "taPzzaQdjK2TvqyUAeF62wTSrjq1aunwXL2z4ivjENX-0-widget", "block_id": 116038419, "block_timestamp": "2024-04-03T09:07:04.513Z", "signer_id": "adnansiddiqui.near", "widget_name": "mft_transfer", "source_code": null, "metadata": {"description": "This code is about sending and registering for tokens on the Near Protocol blockchain.\nVariables and State InitializationFirstly, two constants are defined: `accountId` and `contract`. `accountId` extracts user's account ID from a context object and `contract` stores the name of a smart contract.\n\n```\nconst accountId = context.accountId;\nconst contract = \"v2.ref-finance.near\";\n```\n\nThe application state is initialized with the `State.init` method, which sets the default values for `receiverId`, `amount`, `tokenId`, `mft_balance`.\n\n```\nState.init({\n  receiverId: \"\",\n  amount: \"\",\n  tokenId: \"\",\n  mft_balance: \"\",\n});\n```\n\n### Event HandlersMultiple event handlers are defined for various user actions:\n\n - onTokenIdChange: This is triggered when the user changes the `tokenId` field. It updates the `tokenId` in the application state and fetches the corresponding token balance using the `mft_balance_of` method from the contract.\n\n```\nconst onTokenIdChange = ({ target: { value } }) => {\n  // ...\n};\n```\n\n - onAmountChange: This is triggered when the `amount` field is edited by the user. It updates the `amount` in the application state. If `0` is entered, it defaults to the total balance (`mft_balance`).\n\n```\nconst onAmountChange = ({ target: { value } }) => {\n  // ...\n};\n```\n\n - onInputChange: This is triggered when the `receiverId` field is edited. `receiverId` is updated in the state.\n\n```\nconst onInputChange = ({ target: { value } }) => {\n  // ...\n};\n```\n\n - onRegBtnClick: This is invoked when the `Register` button is clicked. It calls the `mft_register` method from the contract, which registers the account for the specified `tokenId`.\n\n```\nconst onRegBtnClick = () => {\n  // ...\n};\n```\n\n - onSendBtnClick: This action happens when the `Send` button is clicked. It calculates the `amount` (if not explicitly entered) and it calls the `mft_transfer` method from the contract, which transfers the tokens to the `receiverId`.\n\n```\nconst onSendBtnClick = () => {\n  // ...\n};\n```\n\nRenderingThe JSX syntax is used to render the user interface. The user interface has input fields for entering tokenId, amount, receiverId. Buttons are provided for Register and Send actions.The applicaiton checks if the user is logged in or not. If yes, it displays the input fields and buttons. If not logged in, it shows a alert message urging them to login.\n\n```\nreturn (\n  // JSX code goes here...\n);\n```\n\nThe codes are all enclosed in separate function calls or event handlers and hence, well modularized for efficient management. Each function does its own task based on user input or button click action.", "image": {}, "name": "Sending tokens on the Near Protocol blockchain."}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/adnansiddiqui.near/widget/mft_transfer", "fact_widget_deployments_id": "eaaa054945ecf7888c9a40628901c70e", "inserted_timestamp": "2024-04-03T10:40:22.338Z", "modified_timestamp": "2024-04-03T10:40:22.338Z", "__row_index": 2}