{"tx_hash": "7AnNCuQydJg5Y3t9VZhuSHkUQBvLjMEo498HrJ1vZsBA", "action_id_social": "Gm1LHfCRg9U5qYrWoVHWxkt5MpznrQ6JtZX1an6p45Y-0-widget", "block_id": 107462851, "block_timestamp": "2023-12-08T20:30:37.608Z", "signer_id": "fastvault.near", "widget_name": "EncryptedIpfsUpload", "source_code": "const buttonText = props.buttonText || \"Upload a file\";\nconst ipfsUrl = props.ipfsUrl ?? \"https://ipfs.near.social/add\";\n\n// Headers for IPFS request.\nconst headers = props.headers ?? {\n  Accept: \"application/json\",\n};\n\n// Optional: will load from local storage or recover from account id and password.\nconst encryptSk = props.encryptSk;\n\n// Required to pass in.\nconst password = props.password;\n\nif (!password) {\n  return <> \"props.password is required for EncryptedIpfsUpload\" </>;\n}\n\nconst { encrypt, encryptObject, newSecretKey } = VM.require(\n  \"fastvault.near/widget/module.crypto\"\n);\n\nconst onUpload =\n  props.onUpload ??\n  ((metadata, encryptedMetadata) => {\n    if (props.debug) {\n      console.log(\n        `Uploaded metadata=${metadata}. Encrypted form can be decrypted w/ password: ${encryptedMetadata}`\n      );\n    }\n  });\n\ninitState({\n  uploading: false,\n  files: [],\n});\n\nconst [storageSk, _] = useState(() => {\n  if (encryptSk) {\n    // encryptSk is available. use it instead of recovering\n    if (password) {\n      console.log(\"Utilizing encryptSk over password\");\n    }\n    return encryptSk;\n  }\n  const localSk = Storage.privateGet(\"storage_secret\");\n  if (localSk && !password) {\n    return localSk;\n  }\n  const sk = newSecretKey(context.accountId, password);\n  console.log(\"recovered encryption key for local storage\");\n  Storage.privateSet(\"storage_secret\", sk);\n  return sk;\n});\n\n/**\n * Kicks off file upload\n * @param {File[]} files limited to 1\n */\nconst filesOnChange = ([file]) => {\n  console.log(\"file\", file);\n  State.update({\n    uploading: true,\n  });\n  if (file) {\n    const reader = new FileReader();\n    reader.onload = (_) => {\n      const buf = new Uint8Array(reader.result);\n      const { nonce, ciphertext } = encrypt(buf, storageSk);\n      const body = JSON.stringify({\n        name: file.name,\n        nonce,\n        ciphertext,\n      });\n\n      // Upload to IPFS\n      asyncFetch(ipfsUrl, {\n        method: \"POST\",\n        headers,\n        body,\n      }).then((res) => {\n        if (onUpload) {\n          const metadata = {\n            filename: file.name,\n            filetype: file.type,\n            byteSize: ciphertext.length,\n            cid: res.body.cid,\n          };\n          const encryptedMetadata = encryptObject(metadata, storageSk);\n          onUpload(metadata, encryptedMetadata);\n          State.update({ uploading: false });\n        }\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  } else {\n    State.update({\n      uploading: false,\n    });\n  }\n};\n\nreturn (\n  <div className=\"d-inline-block\">\n    {state.uploading ? (\n      <div className=\"w-100\" style={{ textAlign: \"center\" }}>\n        Uploading...\n      </div>\n    ) : (\n      <Files\n        multiple={false}\n        // accepts={[\"image/*\"]}\n        minFileSize={1}\n        maxFileSize={500000000}\n        clickable\n        className=\"btn btn-outline-primary h-100 w-100 align-middle\"\n        onChange={filesOnChange}\n      >\n        Upload a file\n      </Files>\n    )}\n    {props.debug && (\n      <div>\n        <p>Debug Data:</p>\n        <pre>{JSON.stringify(state, undefined, 2)}</pre>\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fastvault.near/widget/EncryptedIpfsUpload", "fact_widget_deployments_id": "3f0e15226ef75c67f947a61c58e77d96", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}