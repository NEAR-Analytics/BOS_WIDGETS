{"tx_hash": "8GFn8MoxYXDd7LtpRNERJpcAMuKa2MxSC4NRZpddhaoX", "action_id_social": "2QYFn8k7Q5FWo2LvhXWcKTackP7w2Lx6CDJWeSMjkyH4-0-widget", "block_id": 107468142, "block_timestamp": "2023-12-08T22:04:45.388Z", "signer_id": "fastvault.near", "widget_name": "voyager.content.index", "source_code": "const Content = styled.div`\n  flex: 1;\n  padding: 20px;\n  background-color: #f9f9f9;\n  width: 100%;\n  overflow: auto;\n  // position: relative;\n`;\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 50%;\n  background-color: #fff;\n`;\n\nconst Grid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n\n  @media (min-width: 600px) {\n    gap: 20px;\n  }\n`;\n\nconst GridItem = styled.div`\n  flex: 1 0 calc(33.333% - 10px); // Three per row by default\n\n  @media (min-width: 600px) {\n    flex: 1 0 calc(25% - 20px); // Four per row on wider screens\n  }\n`;\n\nconst Columns = styled.div`\n  display: flex;\n`;\n\nconst Column = styled.div`\n  min-width: 200px;\n  border-right: 1px solid #e0e0e0;\n`;\n\nconst layout = props.layout || \"LIST\";\nconst setPath = props.setPath || (() => {});\nconst path = props.path || context.accountId;\n\nconst showPreview = props.showPreview || false;\nconst setSelectedPath = props.setSelectedPath || (() => {});\nconst selectedPath = props.selectedPath || \"\";\nconst password = props.password || \"\";\n\nconst { newSecretKey, decryptObject } = VM.require(\n  \"fastvault.near/widget/module.crypto\"\n);\n\nconst [storageSk, _] = useState(() => {\n  if (decryptSk) {\n    // decryptSk is available. use it instead of recovering\n    if (password) {\n      console.log(\"Utilizing decryptSk over password\");\n    }\n    return decryptSk;\n  }\n  const localSk = Storage.privateGet(\"storage_secret\");\n  if (localSk && !password) {\n    return localSk;\n  }\n  const sk = newSecretKey(context.accountId, password);\n  console.log(\"recovered decryption key from local storage\");\n  Storage.privateSet(\"storage_secret\", sk);\n  return sk;\n});\n\n// --- FV START ---\nconst files = Social.index(\"fastvault_experimental\", \"add\", {\n  accountId: context.accountId,\n});\n\nconsole.log(\"indexed\", files);\nlet data = {};\nif (files) {\n  data = files.reduce((acc, file) => {\n    const encryptedMetadata = file.value;\n    if (!encryptedMetadata.nonce || !encryptedMetadata.ciphertext) {\n      console.log(\"invalid file metadata to be decrypted\", file);\n      return acc;\n    }\n\n    const metadata = decryptObject(\n      new Uint8Array(encryptedMetadata.nonce),\n      new Uint8Array(encryptedMetadata.ciphertext),\n      storageSk\n    );\n\n    // acc[metadata.filename] = metadata.cid + \"|\" + (metadata.filetype ?? \"???\");\n    acc[metadata.filename] = {\n      value: metadata.cid + \"|\" + (metadata.filetype ?? \"???\"),\n      cid: metadata.cid,\n      filetype: metadata.filetype,\n      byteSize: metadata.byteSize,\n    };\n\n    return acc;\n  }, {});\n}\n// --- FV END ---\n\n// console.log(selectedPath);\n\nif (!data) {\n  return <p>Loading...</p>;\n}\n\nState.init({\n  activePath: [],\n  selectedPath: \"\",\n  showTextDialog: false,\n  dataToDisplay: null\n});\n\nfunction setActivePath(v) {\n  State.update({ activePath: v });\n}\n\nconst ArrowIcon = styled.span`\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-top: 2px solid black;\n  border-right: 2px solid black;\n  transform: ${(props) =>\n    props.isExpanded ? \"rotate(135deg)\" : \"rotate(45deg)\"};\n  margin-right: 5px;\n`;\n\nconst ItemContainer = styled.span`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n  font-size: 18px;\n`;\n\nconst ItemInfo = styled.span`\n  display: flex;\n  gap: 10px;\n  width: 200px;\n  justify-content: space-between;\n`;\n\nconst ItemDetails = styled.span`\n  display: flex;\n  gap: 4px;\n  align-items: center;\n`;\n\nconst IconDiv = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 5em;\n  height: 5em;\n  cursor: pointer;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: scale(0.95);\n    background-color: #f0f0f0;\n  }\n`;\n\nconst { ContextMenu } = VM.require(\"efiz.near/widget/Module.ContextMenu\");\n\nContextMenu = ContextMenu || (() => <></>);\n\nfunction deleteFile(path) {\n  function buildObjectWithLastNull(path) {\n    const parts = path.split(\"/\").slice(1); // Remove the first part of the path\n    let currentObj = {};\n    let pointer = currentObj;\n\n    parts.forEach((component, i) => {\n      if (i === parts.length - 1) {\n        pointer[component] = null;\n      } else {\n        pointer[component] = {};\n        pointer = pointer[component];\n      }\n    });\n\n    return currentObj;\n  }\n\n  const result = buildObjectWithLastNull(path);\n  Social.set(result);\n}\n\nfunction deleteFolder(path, data) {\n  function setLeavesToNull(obj) {\n    Object.keys(obj).forEach((key) => {\n      if (typeof obj[key] === \"object\" && obj[key] !== null) {\n        obj[key] = setLeavesToNull(obj[key]);\n      } else {\n        obj[key] = null;\n      }\n    });\n    return obj;\n  }\n\n  function buildObjectWithPath(path, data) {\n    const parts = path.split(\"/\").slice(1);\n    const value = parts.reduce(\n      (current, part) => (current && current[part] ? current[part] : undefined),\n      data\n    );\n    let currentObj = {};\n    let pointer = currentObj;\n\n    parts.forEach((component, i) => {\n      if (i === parts.length - 1) {\n        pointer[component] = setLeavesToNull(value);\n      } else {\n        pointer[component] = {};\n        pointer = pointer[component];\n      }\n    });\n    return currentObj;\n  }\n\n  const newData = buildObjectWithPath(path, data);\n  Social.set(newData);\n}\n\nfunction calculateSize(data) {\n  const str = typeof data === \"object\" ? JSON.stringify(data) : data;\n  let sizeInBytes = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    if (charCode <= 0x7f) {\n      sizeInBytes += 1;\n    } else if (charCode <= 0x7ff) {\n      sizeInBytes += 2;\n    } else if (charCode <= 0xffff) {\n      sizeInBytes += 3;\n    } else {\n      sizeInBytes += 4;\n    }\n  }\n\n  if (sizeInBytes < 1024) {\n    return sizeInBytes + \" Bytes\";\n  } else if (sizeInBytes < 1024 * 1024) {\n    return (sizeInBytes / 1024).toFixed(2) + \" KB\";\n  } else {\n    return (sizeInBytes / (1024 * 1024)).toFixed(2) + \" MB\";\n  }\n}\n\nfunction determineType(path, data) {\n  const parts = path.split(\"/\");\n  if (parts.length === 1) {\n    return \"account\";\n  } else {\n    const v = parts[1];\n    return v;\n  }\n}\n\nconst iconMap = {\n  nametag: \"bi bi-person-badge\",\n  profile: \"bi bi-person-circle\",\n  index: \"bi bi-list-ol\",\n  graph: \"bi bi-graph-up\",\n  widget: \"bi bi-layout-text-sidebar-reverse\",\n  post: \"bi bi-file-post\",\n  thing: \"bi bi-box\",\n  type: \"bi bi-type\",\n  settings: \"bi bi-gear\",\n};\n\nconst handleColumnClick = (key) => {\n  setActivePath([...state.activePath, key]);\n};\n\nfunction RenderData({ data, layout }) {\n  switch (layout) {\n    case \"LIST\":\n      const dataList =\n        state.activePath.length === 0 ? data : getNestedData(data, activePath);\n\n      return (\n        <>\n          {Object.keys(dataList).map((key) => (\n            <div key={key}>\n              <Widget\n                src=\"fastvault.near/widget/voyager.item\"\n                loading={<></>}\n                props={{\n                  path: key,\n                  data: dataList[key],\n                  level: 0,\n                  eFile: ({ key, data, level }) => {\n                    const updatedPath = [path, key].join(\"/\");\n                    return (\n                      <ContextMenu\n                        Item={() => (\n                          // TODO: Honestly, eFile and eFolder should be the same component.\n                          <ItemContainer\n                            onDoubleClick={() => setPath(updatedPath)} // open file\n                            onClick={() => {\n                              if (data.filetype.includes('text')) {\n                              console.log(\"clicked file ln 325\", data)\n                              data.key = key;\n                              State.update({ dataToDisplay: data });\n                              } \n                            }}\n                            style={{\n                              marginLeft: level * 20,\n                              backgroundColor:\n                                selectedPath === updatedPath\n                                  ? \"#f0f0f0\"\n                                  : \"transparent\",\n                            }}\n                          >\n                            <ItemDetails>\n                              <i className=\"bi bi-file\"></i>  \n                              <span>{key.split(\"/\").pop()}</span>\n                            </ItemDetails>\n                            <ItemInfo>\n                              <span>{formatBytes(data.byteSize)}</span>\n                              {/* ^^TODO */}\n                              <span>{data.filetype}</span>\n                              <span />\n                            </ItemInfo>\n                          </ItemContainer>\n                        )}\n                        passProps={{\n                          delete: { path: updatedPath, data },\n                        }}\n                        handlers={{\n                          delete: ({ path }) => {\n                            deleteFile(path);\n                          },\n                        }}\n                        items={{\n                          delete: () => (\n                            <>\n                              <i className=\"menu__item__icon bi bi-x-lg\" />\n                              Delete\n                            </>\n                          ),\n                        }}\n                      />\n                    );\n                  },\n                  eFolder: ({ toggleExpand, isExpanded, key, level }) => {\n                    const updatedPath = [path, key].join(\"/\");\n                    return (\n                      <ContextMenu\n                        Item={() => (\n                          <ItemContainer\n                            onDoubleClick={() => setPath(updatedPath)} // open folder\n                            onClick={() => {\n                              toggleExpand();\n                            }}\n                            style={{\n                              marginLeft: level * 20,\n                            }}\n                          >\n                            <ItemDetails>\n                              <ArrowIcon isExpanded={isExpanded} />\n                              <i className=\"bi bi-folder\"></i>\n                              <span>{key.split(\"/\").pop()}</span>{\" \"}\n                            </ItemDetails>\n                            <ItemInfo>\n                              <span>--</span>\n                              <span>Folder</span>\n                              <span />\n                            </ItemInfo>\n                          </ItemContainer>\n                        )}\n                        passProps={{\n                          delete: { path: updatedPath, data },\n                        }}\n                        handlers={{\n                          delete: ({ path, data }) => {\n                            // TODO: This is broken, I think because of the adjusted data object.\n                            deleteFolder(path, data);\n                          },\n                        }}\n                        items={{\n                          delete: () => (\n                            <>\n                              <i className=\"menu__item__icon bi bi-x-lg\" />\n                              Delete\n                            </>\n                          ),\n                        }}\n                      />\n                    );\n                  },\n                }}\n              />\n            </div>\n          ))}\n        </>\n      );\n\n    case \"GRID\":\n      return password ? (\n        <Grid>\n          {Object.keys(data).map((key) => {\n            const updatedPath = [path, key].join(\"/\");\n            return (\n              <GridItem key={key}>\n                <Widget\n                  src=\"fastvault.near/widget/EncryptedImage\"\n                  props={{\n                    password: password,\n                    image: { ipfs_cid: data[key].cid },\n                    style: { height: \"200px\", width: \"200px\" },\n                    fallbackUrl:\n                      \"https://ipfs.near.social/ipfs/bafkreihdxorcz6wflgfhrwtguibaf6pbizp7mpavkwuhqxniaqloq3f2ae\",\n                  }}\n                />\n                <p>{key}</p>\n              </GridItem>\n            );\n          })}\n        </Grid>\n      ) : (\n        <p>Password was not provided</p>\n      );\n\n    default:\n      return null;\n  }\n}\n\nfunction getNestedData(data, pathArray) {\n  return pathArray.reduce((currentData, key) => currentData[key] || {}, data);\n}\n\n// --- FV START ---\n// https://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\nfunction formatBytes(bytes) {\n  const decimals = 2;\n  if (!bytes) return \"0 Bytes\";\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\n    \"Bytes\",\n    \"KiB\",\n    \"MiB\",\n    \"GiB\",\n    \"TiB\",\n    \"PiB\",\n    \"EiB\",\n    \"ZiB\",\n    \"YiB\",\n  ];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n}\n// --- FV END ---\n\nreturn (\n  <Content>\n    <RenderData layout={layout} data={data} />\n    {showPreview && (\n      <Overlay>\n        <div key={selectedPath}>\n          <p>lol it's way to slow to allow preview rn</p>\n        </div>\n      </Overlay>\n    )}\n          <Widget\n            src=\"near/widget/DIG.Dialog\"\n            props={{\n              type: \"dialog\",\n              open: !!state.dataToDisplay,\n              confirmButtonText: \"Close\",\n              actionButtons: <></>,\n              content: <Widget\n              src=\"fastvault.near/widget/EncryptedText\"\n              props={{\n                password: password,\n                cid: state.dataToDisplay?.cid,\n                fileType: state.dataToDisplay?.filetype,\n                key: state.dataToDisplay?.key,\n              }}\n               />,\n              onOpenChange: (value) => State.update({ dataToDisplay: null }),\n            }}\n          />\n  </Content>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fastvault.near/widget/voyager.content.index", "fact_widget_deployments_id": "bc901615fe246ced5ac66a93c8884281", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}