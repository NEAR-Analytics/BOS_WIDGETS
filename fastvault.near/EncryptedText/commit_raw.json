{"tx_hash": "7AnNCuQydJg5Y3t9VZhuSHkUQBvLjMEo498HrJ1vZsBA", "action_id_social": "Gm1LHfCRg9U5qYrWoVHWxkt5MpznrQ6JtZX1an6p45Y-0-widget", "block_id": 107462851, "block_timestamp": "2023-12-08T20:30:37.608Z", "signer_id": "fastvault.near", "widget_name": "EncryptedText", "source_code": "const password = props.password;\nconst cid = props.cid;\nconst fileType = props.fileType;\nconst key = props.key;\nconst ipfsUrl =\n  props.ipfsUrl ?? ((cid) => `https://ipfs.near.social/ipfs/${cid}`);\n\n  console.log('props: ', props);\nconsole.log('cid: ', cid);\nconsole.log('password', password);\n\n// Optional: will load from local storage or recover from account id and password.\nconst decryptSk = props.decryptSk;\n\nif (!password) {\n  return <> \"props.password is required for EncryptedIpfsUpload\" </>;\n}\n\nconst { decrypt, newSecretKey } = VM.require(\n  \"fastvault.near/widget/module.crypto\"\n);\n\nState.init({\n  text,\n  dialogOpen: false,\n})\n\nconst [storageSk, _] = useState(() => {\n  if (decryptSk) {\n    // decryptSk is available. use it instead of recovering\n    if (password) {\n      console.log(\"Utilizing decryptSk over password\");\n    }\n    return decryptSk;\n  }\n  const localSk = Storage.privateGet(\"storage_secret\");\n  if (localSk && !password) {\n    return localSk;\n  }\n  const sk = newSecretKey(context.accountId, password);\n  console.log(\"recovered decryption key for local storage\");\n  Storage.privateSet(\"storage_secret\", sk);\n  return sk;\n});\n\nconst fetchFile = (cid) => {\n  console.log(`fetching file '${cid}'`);\n  asyncFetch(ipfsUrl(cid)).then((file) => {\n    if (!file.ok) {\n      console.log(\"IPFS fetch not ok\", file);\n      return;\n    }\n\n    // Expect ciphertext and nonce to be Array type. Convert to Uint8Array.\n    const ciphertext = new Uint8Array(file.body.ciphertext);\n    const nonce = new Uint8Array(file.body.nonce);\n    const bytes = decrypt(nonce, ciphertext, storageSk);\n\n    if (bytes) {\n      \n      new Blob([bytes]).text().then((text) => {\n        console.log('text: ', text)\n        State.update({\n          text,\n        });\n      });\n      \n    } else {\n      console.log(`could not decrypt '${file.body.name}'`);\n      State.update({\n        imageUrl: unableToDecryptUrl,\n      });\n    }\n  });\n};\n\nuseEffect(() => {\n  if (cid) {\n    fetchFile(cid);\n  }\n},[cid]);\n\nreturn(\n  <>\n  <h2>{key}</h2>\n  <p>{state.text}</p>\n  </>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fastvault.near/widget/EncryptedText", "fact_widget_deployments_id": "2e200ece05446482d118436a4fbede17", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}