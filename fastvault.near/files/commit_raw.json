{"tx_hash": "BiEGhxeCAbAk1JtPcAPKspbM7jgsKozFwFkfPBpXWSS6", "action_id_social": "k9xYR8mv3hapxdgzmCasRE9xHjSfTDVpTGgw8DdPFgU-0-widget", "block_id": 107463533, "block_timestamp": "2023-12-08T20:42:29.420Z", "signer_id": "fastvault.near", "widget_name": "files", "source_code": "const accountId = props.accountId ?? context.accountId;\n\nconst savedPassword = Storage.privateGet(\"encryptionPassword\");\nif (savedPassword && !state.ipfsCreds) {\n  State.update({ password: JSON.parse(savedPassword) });\n}\n\nState.init({\n  uploading: false,\n  dialogIsOpen: false,\n});\n\n/**\n * Write event to SocialDB that a file was added\n * @param {string} name\n * @param {string} cid\n */\nconst writeAddToIndex = (encryptedMetadata) => {\n  Social.set(\n    {\n      index: {\n        fastvault_experimental: JSON.stringify({\n          key: \"add\",\n          // encryptedMetadata is of the form { nonce, ciphertext },\n          value: encryptedMetadata,\n        }),\n      },\n    },\n    {\n      onCommit: () => {\n        State.update({ uploading: false });\n      },\n    }\n  );\n};\n\n/**\n * Convert file to Data URL which can be passed into img src attribute for display\n * @param {*} blob\n */\nconst setDataUrlFromBlob = (blob) => {\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    console.log(\"reader.result\", reader.result);\n    State.update({ dataUrl: reader.result, dialogIsOpen: true });\n    // const base64data = reader.result.split(\",\")[1];\n    // console.log(\"base64data\", base64data);\n  };\n  reader.readAsDataURL(blob);\n};\n\nconst disclaimer =\n  \"This is a hackathon project. Please do not upload large amounts of data or any sensitive information\";\nconst DisclaimerBanner = styled.div`\n  height: 2rem;\n  width: 100%;\n  background-color: #ffe484;\n  color: #21252a;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 1rem;\n  border-radius: 0.5rem;\n`;\n\n// Show setup form if user has not entered IPFS credentials\nif (!state.password) {\n  return (\n    <>\n      <DisclaimerBanner>{disclaimer}</DisclaimerBanner>\n      <div className=\"d-flex flex-column gap-1\">\n        <h2>Please enter encryption password</h2>\n        <p>\n          This will be used to encrypt future files and to attempt to decrypt\n          existing files.\n          <strong>\n            Changing this will not affect the encryption of previously uploaded\n            files\n          </strong>\n        </p>\n        <div className=\"d-flex flex-row gap-2\">\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            placeholder=\"password\"\n            onChange={(e) => State.update({ formPassword: e.target.value })}\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{ label: \"Save\" }}\n            onClick={() => {\n              Storage.privateSet(\n                \"encryptionPassword\",\n                JSON.stringify(state.formPassword)\n              );\n              State.update({\n                password: state.formPassword,\n              });\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn accountId ? (\n  <div>\n    <DisclaimerBanner>{disclaimer}</DisclaimerBanner>\n    <div className=\"d-flex flex-column gap-1\">\n      <div className=\"d-flex flex-row justify-content-end\">\n        <Widget\n          src=\"near/widget/DIG.Button\"\n          props={{ label: \"Switch encryption password\" }}\n          onClick={() => {\n            Storage.privateSet(\"encryptionPassword\", null);\n            State.update({\n              password: null,\n            });\n          }}\n        />\n      </div>\n      {state.password && (\n        <Widget\n          src=\"fastvault.near/widget/EncryptedIpfsUpload\"\n          props={{\n            password: state.password,\n            onUpload: (_metadata, encryptedMetadata) => {\n              writeAddToIndex(encryptedMetadata);\n            },\n          }}\n        />\n      )}\n      {\n        /* example of displaying an image in dialog */\n        state.dataUrl && (\n          <Widget\n            src=\"near/widget/DIG.Dialog\"\n            props={{\n              type: \"dialog\",\n              // title: \"Header\",\n              // description: \"Some description\",\n              // onCancel: handleCancelFunction,\n              // onConfirm: handleConfirmFunction,\n              // cancelButtonText: \"Cancel\",\n              // confirmButtonText: \"Confirm\",\n              open: state.dialogIsOpen,\n              content: <img src={state.dataUrl} />,\n              onOpenChange: (value) => State.update({ dialogIsOpen: value }),\n            }}\n          />\n        )\n      }\n      <Widget\n        src=\"fastvault.near/widget/voyager.index\"\n        props={{\n          password: state.password,\n        }}\n      />\n    </div>\n  </div>\n) : (\n  <div>You must log-in in order to use the app</div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/fastvault.near/widget/files", "fact_widget_deployments_id": "97130152fcd20a563869c6767ce42790", "inserted_timestamp": "2023-12-08T22:38:46.845Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}