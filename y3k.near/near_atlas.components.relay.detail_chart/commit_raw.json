{"tx_hash": "8np1k2T2qg1tMxwu31jTMfMYQrxRjsGuyVuHz5TLNqN3", "action_id_social": "CTp4HwXPYj2TLtsMSQJsdVaoTnM2b6d7XecUrWH62XMA-0-widget", "block_id": 106286394, "block_timestamp": "2023-11-22T16:12:26.653Z", "signer_id": "y3k.near", "widget_name": "near_atlas.components.relay.detail_chart", "source_code": "const initialState = {\n  selectedMetric: \"MAU\",\n  processedData: processedData,\n  metric_period: \"Monthly\",\n  project_name: props.project_name || \"Sweat Economy\",\n};\n\nconsole.log(initialState);\n\nstate = State.init(initialState);\n\nfunction filterByProjectName(arr, project_name) {\n  return arr.filter((obj) => obj.project_name === project_name);\n}\n\nfunction sortByActivityDate(arr) {\n  return arr.sort(\n    (a, b) => new Date(a.activity_date) - new Date(b.activity_date)\n  );\n}\n\nlet static_file_param = \"atlas_project_kpis.csv\";\n\nlet rawData = fetch(\n  \"https://github-near-data-api.vercel.app/api/static_file_param?filename=\" +\n    static_file_param,\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nfunction parseUTCDate(dateString) {\n  const [year, month, day] = dateString\n    .split(\"-\")\n    .map((str) => parseInt(str, 10));\n  // Subtract 1 from the month, as JavaScript months are zero-based\n  const utcTimestamp = Date.UTC(year, month - 1, day);\n  return new Date(utcTimestamp);\n}\n\nlet Style = styled.div`\n  .bar {\n    transition: fill 0.2s;\n  }\n\n  .bar:hover {\n    fill: #ffa726;\n  }\n\n  .bar-chart {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n    svg {\n      width: 80%;\n    }\n\n    rect {\n      shape-rendering: crispEdges;\n      fill: #61dafb;\n      stroke: #333;\n      stroke-width: 1;\n    }\n`;\n\nconst colorGenerator = () => {\n  const colors = [\n    \"rgb(255, 99, 132)\",\n    \"rgb(75, 192, 192)\",\n    \"rgb(153, 102, 255)\",\n    \"rgb(255, 159, 64)\",\n    \"rgb(54, 162, 235)\",\n    \"rgb(201, 203, 207)\",\n    \"rgb(255, 205, 86)\",\n    \"rgb(255, 99, 71)\",\n    \"rgb(147, 112, 219)\",\n    \"rgb(0, 128, 128)\",\n    \"rgb(100, 149, 237)\",\n    \"rgb(127, 255, 0)\",\n  ];\n\n  let index = 0;\n\n  return () => {\n    if (index >= colors.length) {\n      index = 0;\n    }\n\n    return colors[index++];\n  };\n};\n\nfunction updateProcessedData(filteredSortedData, selectedMetric) {\n  const processedData = [];\n\n  filteredSortedData.forEach((datum) => {\n    if (!datum.activity_date) {\n      return;\n    }\n\n    const activity_date = parseUTCDate(datum.activity_date);\n\n    const month =\n      months[\n        parseInt(activity_date.toISOString().slice(0, 10).split(\"-\")[1]) - 1\n      ];\n\n    let monthData = processedData.find((data) => data.label === month);\n\n    if (!monthData) {\n      monthData = {\n        label: month,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      };\n      processedData.push(monthData);\n    }\n\n    monthData.data[activity_date.toISOString().slice(0, 10)] =\n      datum[selectedMetric];\n  });\n\n  return processedData;\n}\n\nconst finalData = rawData.body;\n\nif (!finalData) {\n  return <h1> \ud83e\ude84 Loading MAGIC \ud83e\ude84</h1>;\n}\n\n// const project_name = props.project_name || \"Sweat Economy\";\n\nconst METRIC_NAME = `\"${state.project_name}'s ${state.metric_period}\"`;\n\nconst filteredData = filterByProjectName(finalData, state.project_name) || [];\n\nconst filteredSortedData = sortByActivityDate(filteredData) || [];\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\n// logic start\n\nconst getBackgroundColor = colorGenerator();\n\nlet processedData = [];\n\ntry {\n  filteredSortedData.forEach((datum) => {\n    if (!datum.activity_date) {\n      return;\n    }\n\n    const activity_date = parseUTCDate(datum.activity_date);\n\n    const month =\n      months[\n        parseInt(activity_date.toISOString().slice(0, 10).split(\"-\")[1]) - 1\n      ];\n\n    let monthData = processedData.find((data) => data.label === month);\n\n    if (!monthData) {\n      monthData = {\n        label: month,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      };\n      processedData.push(monthData);\n    }\n\n    monthData.data[activity_date.toISOString().slice(0, 10)] = datum.MAU;\n  });\n} catch (err) {\n  console.log(err);\n}\n\n// logic end\n\nconst v_bar_labels = months;\n\nconst v_bar_data = {\n  v_bar_labels,\n  datasets: processedData,\n};\n\nconst v_bar_options = {\n  responsive: true,\n  scales: {\n    y: {\n      stacked: true,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n        borderColor: \"rgb(240,255,240)\",\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n    x: {\n      stacked: true,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n  },\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: true,\n      text: \"\",\n    },\n  },\n};\n\n// ...Other code...\n\n// logic part-3\n\nconst header_map = {\n  daa: \"Daily Active Accounts\",\n  wau: \"Weekly Active Accounts\",\n  mau: \"Monthly Active Accounts\",\n  m2_retention: \"Retention Rate\",\n  new_maa: \"New MAAs\",\n  percent_new: \"% New Accounts\",\n  txns: \"Transactions\",\n};\n\n// adding project selector:\n\n// 1. Create a function to extract unique project names:\nfunction getUniqueProjectNames(data) {\n  const projectNamesSet = new Set();\n  data.forEach((item) => {\n    if (item.project_name) {\n      projectNamesSet.add(item.project_name);\n    }\n  });\n  return [...projectNamesSet];\n}\n\n// 2. Get the unique project names from `finalData`:\nconst uniqueProjectNames = getUniqueProjectNames(finalData);\n\n// 3. Create a handler for the project name dropdown change:\nconst handleProjectDropdownChange = (e) => {\n  // console.log(\"selectedProject:\", e.target.value);\n  State.update({\n    project_name: e.target.value,\n  });\n};\n\nconst handleDropdownChange = (e) => {\n  // console.log(\"selectedMetric:\", e.target.value);\n  State.update({\n    selectedMetric: e.target.value,\n  });\n};\n\nconst getBarData = () => {\n  const { selectedMetric } = state;\n  // console.log(selectedMetric);\n  State.update({ processedData: [] });\n\n  let newProcessedData = updateProcessedData(\n    filteredSortedData,\n    selectedMetric\n  );\n\n  State.update({\n    processedData: newProcessedData,\n    metric_period: header_map[selectedMetric],\n  });\n\n  console.log(state);\n\n  return {\n    v_bar_labels,\n    datasets: newProcessedData,\n  };\n};\n\nfunction renderWidgetBasedOnProject(projectName) {\n  if (projectName === \"Sweat Economy\") {\n    return (\n      <Widget\n        src=\"y3k.near/widget/near_atlas.components.CohortSweat\"\n        props={{}}\n      />\n    );\n  } else if (projectName === \"Play Ember\") {\n    return (\n      <Widget\n        src=\"y3k.near/widget/near_atlas.components.CohortPlayEmber\"\n        props={{}}\n      />\n    );\n  } else if (projectName === \"Kai-Ching\") {\n    return (\n      <Widget\n        src=\"y3k.near/widget/near_atlas.components.CohortCosmose\"\n        props={{}}\n      />\n    );\n  } else if (projectName === \"Overall\") {\n    return (\n      <Widget src=\"y3k.near/widget/near_atlas.components.Overall\" props={{}} />\n    );\n  }\n  return null;\n}\n\nreturn (\n  <Style>\n    <div className=\"bg-dark container rounded-4 p-3 mb-4\">\n      {data !== null ? (\n        <>\n          <div class=\"\">\n            <div class=\"\">\n              <div>\n                <h2 className=\"text-white\">Metric: {METRIC_NAME}</h2>\n\n                <label\n                  htmlFor=\"metric-dropdown\"\n                  className=\"text-white block text-sm font-medium\"\n                >\n                  Select metric:{\" \"}\n                </label>\n                <select\n                  id=\"metric-dropdown\"\n                  value={selectedMetric}\n                  onChange={handleDropdownChange}\n                  className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring focus:border-blue-300 sm:text-sm rounded-md\"\n                >\n                  <option value=\"mau\">MAA</option>\n                  <option value=\"wau\">WAA</option>\n                  <option value=\"daa\">DAA</option>\n                  <option value=\"m2_retention\">Retention Rate</option>\n                  <option value=\"new_maa\">New MAAs</option>\n                  <option value=\"percent_new\">% New Accounts</option>\n                  <option value=\"txns\">Transactions</option>\n                </select>\n                <label\n                  htmlFor=\"project-dropdown\"\n                  htmlFor=\"metric-dropdown\"\n                  className=\"text-white block text-sm font-medium\"\n                >\n                  Select Project:{\" \"}\n                </label>\n                <select\n                  id=\"project-dropdown\"\n                  value={project_name}\n                  className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring focus:border-blue-300 sm:text-sm rounded-md\"\n                  onChange={handleProjectDropdownChange}\n                >\n                  {uniqueProjectNames.map((name) => (\n                    <option\n                      key={name}\n                      value={name}\n                      selected={name === state.project_name}\n                    >\n                      {name}\n                    </option>\n                  ))}\n                </select>\n                <BarEl options={v_bar_options} data={getBarData()} />\n              </div>\n            </div>\n          </div>\n          <br />\n          <br />\n          <hr />\n          {renderWidgetBasedOnProject(state.project_name)}\n\n          <div></div>\n        </>\n      ) : (\n        <div>Loading ...</div>\n      )}\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.components.relay.detail_chart", "fact_widget_deployments_id": "fddb8c8f515bec569644ec77d8ec7287", "inserted_timestamp": "2023-11-22T18:19:32.196Z", "modified_timestamp": "2023-11-22T18:19:32.196Z", "__row_index": 1}