{"tx_hash": "GAvyLViJyVtJGLVEXe8EVfzVb95pTzZUPuVXgwpYB2hi", "action_id_social": "4G4X2H3ikmrACNo62VgHPAoG1vTPermqSNWERhg6jvXm-0-widget", "block_id": 101442876, "block_timestamp": "2023-09-19T02:21:56.770Z", "signer_id": "y3k.near", "widget_name": "near_atlas.components.Vis.Social_Activity_Overtime", "source_code": "let raw_data = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/f22d1d23-8993-45ea-9cbb-d27eba5b106d/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nconst initialState = {\n  selectedDateRange: \"1Y\",\n  rawData: [],\n};\n\nstate = State.init(initialState);\n\nconst handleDateRangeChange = (range) => {\n  State.update({\n    selectedDateRange: range,\n  });\n};\n\nconst data = raw_data.body || [];\nState.update({ rawData: data });\n\nlet Style = styled.div`\n                `;\n\nconst processData = (rawData, dateRange) => {\n  const endDate = new Date();\n  let startDate = new Date();\n\n  switch (dateRange) {\n    case \"1M\":\n      startDate.setMonth(endDate.getMonth() - 1);\n      break;\n    case \"3M\":\n      startDate.setMonth(endDate.getMonth() - 3);\n      break;\n    case \"YTD\":\n      startDate = new Date(endDate.getFullYear(), 0, 1); // start of the year\n      break;\n    case \"1Y\":\n      startDate.setFullYear(endDate.getFullYear() - 1);\n      break;\n    case \"3Y\":\n      startDate.setFullYear(endDate.getFullYear() - 3);\n      break;\n  }\n\n  const processedData = rawData.filter((entry) => {\n    const entryDate = new Date(entry[\"DATE\"]);\n    return entryDate >= startDate && entryDate <= endDate;\n  });\n\n  // Sort the processed data by date\n  return processedData.sort(\n    (a, b) => new Date(a[\"DATE\"]) - new Date(b[\"DATE\"])\n  );\n};\n\nconst dataToDisplay = processData(state.rawData, state.selectedDateRange);\n\nconst dates = dataToDisplay.map((entry) => entry[\"DATE\"]);\n\nconst POSTS_COUNT = {};\nconst LIKES_COUNT = {};\nconst REPLIES_COUNT = {};\n\ndataToDisplay.forEach((entry) => {\n  POSTS_COUNT[entry[\"DATE\"]] = entry[\"POSTS_COUNT\"];\n  LIKES_COUNT[entry[\"DATE\"]] = entry[\"LIKES_COUNT\"];\n  REPLIES_COUNT[entry[\"DATE\"]] = entry[\"REPLIES_COUNT\"];\n});\n\nconst stacked_options = {\n  maintainAspectRatio: true,\n  interaction: {\n    mode: \"index\",\n    intersect: false,\n  },\n  stacked: false,\n  plugins: {\n    legend: {\n      display: true,\n      position: \"bottom\",\n    },\n  },\n  scales: {\n    y: {\n      type: \"linear\",\n      display: true,\n      position: \"left\",\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n    y1: {\n      type: \"linear\",\n      display: true,\n      position: \"right\",\n\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n      grid: {\n        drawOnChartArea: false,\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n    },\n    y2: {\n      type: \"linear\",\n      display: false,\n      position: \"right\",\n\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n      grid: {\n        drawOnChartArea: false,\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n    },\n    x: {\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n  },\n};\n\nconst stacked_bar_data = {\n  dates,\n  datasets: [\n    {\n      label: \"Replies\",\n      type: \"bar\",\n      data: REPLIES_COUNT,\n      backgroundColor: \"rgb(0,255,159)\",\n      yAxisID: \"y2\",\n    },\n    {\n      label: \"Posts\",\n      type: \"line\",\n      data: POSTS_COUNT,\n      backgroundColor: \"rgb(250,164,58)\",\n      yAxisID: \"y1\",\n    },\n    {\n      label: \"Likes\",\n      type: \"bar\",\n      data: LIKES_COUNT,\n      backgroundColor: \"rgb(13,131,171)\",\n      yAxisID: \"y\",\n    },\n  ],\n};\n\nreturn (\n  <Style>\n    <div className=\"relative text-bg-dark rounded-4 p-3 mb-4\">\n      <div className=\"absolute top-0 right-0 flex space-x-2 p-3\">\n        {[\"1M\", \"3M\", \"YTD\", \"1Y\", \"3Y\"].map((range) => (\n          <button\n            key={range}\n            onClick={() => handleDateRangeChange(range)}\n            className={`px-3 py-1 rounded transition-colors duration-200 ease-in ${\n              state.selectedDateRange === range\n                ? \"bg-blue-500 text-white\"\n                : \"bg-gray-800 text-gray-400 hover:bg-gray-700\"\n            }`}\n          >\n            {range}\n          </button>\n        ))}\n      </div>\n      <div className=\"rounded-4 p-3 mb-4 pt-16\">\n        {\" \"}\n        {data !== null ? (\n          <div>\n            <BarEl options={stacked_options} data={stacked_bar_data} />\n          </div>\n        ) : (\n          <div>Loading ...</div>\n        )}\n      </div>\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.components.Vis.Social_Activity_Overtime", "fact_widget_deployments_id": "58a5e0030a7cf30ff3ee2c6b62a70bf1", "inserted_timestamp": "2023-09-19T04:18:38.595Z", "modified_timestamp": "2023-09-19T04:18:38.595Z", "__row_index": 1}