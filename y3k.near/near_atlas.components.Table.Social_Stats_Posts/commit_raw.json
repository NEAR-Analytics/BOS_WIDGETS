{"tx_hash": "7JSmy2T5pJXnbpMUsaKcMJKk6M1ad2rvJLAQYMenE1xq", "action_id_social": "Ey6DUKmGKtVTJBJpDtFnpPYqKFHvdBW3AFNBkJo46VPU-0-widget", "block_id": 101476701, "block_timestamp": "2023-09-19T13:06:23.293Z", "signer_id": "y3k.near", "widget_name": "near_atlas.components.Table.Social_Stats_Posts", "source_code": "// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/d2ce85fd-b06c-47ff-b519-3ddad749beea/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\n// data.body = data.body.sort((a, b) => new Date(a.MONTH) - new Date(b.MONTH));\n\nState.init({\n  setSortConfig: { key: \"TOTAL_POSTS\", direction: \"desc\" },\n  currentPage: 1,\n});\n\nfunction getNodesForCurrentPage(allNodes) {\n  const startIndex = (state.currentPage - 1) * 20;\n  const endIndex = startIndex + 20;\n  return allNodes.slice(startIndex, endIndex);\n}\n\nfunction nextPage() {\n  if (state.currentPage < Math.ceil(sortedNodes.length / 10)) {\n    State.update({ currentPage: state.currentPage + 1 });\n  }\n}\n\nfunction previousPage() {\n  if (state.currentPage > 1) {\n    State.update({ currentPage: state.currentPage - 1 });\n  }\n}\n\nlet Style = styled.div`\n  .table-header {\n    background-color: #000000; /* Set this to the desired dark color for the header */\n    color: #ffffff;\n    text-align: center;\n    font-weight: 600;\n  }\n`;\nlet nodes = rawData.body || [];\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white text-sm p-2\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a className=\"text-red-50 whitespace-normal break-words block max-w-xs\">\n      {text}\n    </a>\n  );\n}\n\nfunction formatCellHref(text) {\n  return (\n    <a\n      href={`https://near.org/near/widget/ProfilePage?accountId=${text}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"text-red-50 whitespace-normal break-words block max-w-xs\"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-red-600\">{number}%</span>; // Red color for negative numbers\n  } else if (number > 0) {\n    return <span className=\"text-green-600\">{number}%</span>; // Green color for positive numbers\n  } else {\n    return <span className=\"text-yellow-600\">{number}%</span>; // Yellow color for zero\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\nconst createColumn = (label, key) => {\n  const alignCenter = [\n    \"TOTAL_POSTS\",\n    \"TOTAL_POSTS_7D\",\n    \"TOTAL_REPLIES\",\n    \"TOTAL_REPLIES_7D\",\n    \"TOTAL_LIKES_RECEIVED\",\n    \"TOTAL_LIKES_RECEIVED_7D\",\n    \"TOTAL_LIKES_GIVEN\",\n    \"TOTAL_LIKES_GIVEN_7D\",\n  ];\n  return {\n    label: (\n      <p\n        className={`text-white text-sm font-semibold p-2 text-wrap ${\n          alignCenter.includes(key) ? \"text-center\" : \"\"\n        }`}\n      >\n        {label.replace(\"_\", \" \")}\n      </p>\n    ),\n    renderCell: (item) => formatCell(item[key]),\n    sort: { sortKey: key },\n  };\n};\n\nconst createColumnProfile = (label, key) => {\n  const alignCenter = [\n    \"TOTAL_POSTS\",\n    \"TOTAL_POSTS_7D\",\n    \"TOTAL_REPLIES\",\n    \"TOTAL_REPLIES_7D\",\n    \"TOTAL_LIKES_RECEIVED\",\n    \"TOTAL_LIKES_RECEIVED_7D\",\n    \"TOTAL_LIKES_GIVEN\",\n    \"TOTAL_LIKES_GIVEN_7D\",\n  ];\n  return {\n    label: (\n      <p\n        className={`text-white text-sm font-semibold p-2 text-wrap ${\n          alignCenter.includes(key) ? \"text-center\" : \"\"\n        }`}\n      >\n        {label.replace(\"_\", \" \")}\n      </p>\n    ),\n    renderCell: (item) => formatCellHref(item[key]),\n    sort: { sortKey: key },\n  };\n};\n\nconst COLUMNS = [\n  createColumnProfile(\"SIGNER_ID\", \"SIGNER_ID\"),\n  createColumn(\"TOTAL_POSTS\", \"TOTAL_POSTS\"),\n  createColumn(\"TOTAL_POSTS_7D\", \"TOTAL_POSTS_7D\"),\n  createColumn(\"TOTAL_REPLIES\", \"TOTAL_REPLIES\"),\n  createColumn(\"TOTAL_REPLIES_7D\", \"TOTAL_REPLIES_7D\"),\n  createColumn(\"TOTAL_LIKES_RECEIVED\", \"TOTAL_LIKES_RECEIVED\"),\n  createColumn(\"TOTAL_LIKES_RECEIVED_7D\", \"TOTAL_LIKES_RECEIVED_7D\"),\n  createColumn(\"TOTAL_LIKES_GIVEN\", \"TOTAL_LIKES_GIVEN\"),\n  createColumn(\"TOTAL_LIKES_GIVEN_7D\", \"TOTAL_LIKES_GIVEN_7D\"),\n];\n\nfunction sort_update(sortKey, direction) {\n  // Update the sort state\n  State.update({\n    setSortConfig: { key: sortKey, direction },\n  });\n}\nfunction getSortedNodes(fieldName) {\n  // If fieldName is provided, set it as the sort key\n  if (fieldName) {\n    state.setSortConfig = {\n      key: fieldName,\n      direction: state.setSortConfig.direction || \"desc\", // default to ascending if direction is not set\n    };\n  }\n\n  // Rest of the function remains the same as before\n  const sortConfig = state.setSortConfig;\n\n  if (sortConfig && sortConfig.key && sortConfig.direction) {\n    const sortedNodes = [...(nodes || [])];\n\n    sortedNodes.sort((a, b) => {\n      if (typeof a[sortConfig.key] === \"string\") {\n        return sortConfig.direction === \"asc\"\n          ? a[sortConfig.key].localeCompare(b[sortConfig.key])\n          : b[sortConfig.key].localeCompare(a[sortConfig.key]);\n      } else {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"asc\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"asc\" ? 1 : -1;\n        }\n      }\n      return 0;\n    });\n\n    return sortedNodes;\n  }\n\n  return nodes;\n}\n\nconst sortedNodes = getSortedNodes();\nconst nodesForRendering = getNodesForCurrentPage(sortedNodes);\nreturn (\n  <div className=\"bg-dark rounded-lg mb-12 overflow-hidden w-full\">\n    {data !== null ? (\n      <div\n        style={{ \"min-width\": \"780px\" }}\n        className=\"bg-dark w-full overflow-x-auto overflow-y-auto\"\n      >\n        <table className=\"table-auto w-full overflow-scroll\">\n          <thead className=\"bg-gray-700\">\n            <tr>\n              {COLUMNS.map((column) => (\n                <th\n                  className=\"text-white text-center font-semibold p-2 border-b border-gray-300 cursor-pointer\"\n                  onClick={() => {\n                    const direction =\n                      state.setSortConfig.direction === \"asc\" ? \"desc\" : \"asc\";\n                    sort_update(column.sort.sortKey, direction);\n                  }}\n                >\n                  {column.label}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {nodesForRendering.map((row, rowIndex) => (\n              <tr\n                className={rowIndex % 2 === 0 ? \"bg-gray-800\" : \"bg-gray-900\"}\n              >\n                {COLUMNS.map((column) => (\n                  <td\n                    className={`text-white text-center p-2 ${\n                      column.sort.sortKey === \"SIGNER ID\" ? \"max-w-xs\" : \"\"\n                    }`}\n                  >\n                    {column.renderCell(row)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"px-5 py-5 bg-gray-800 border-t flex flex-col xs:flex-row items-center xs:justify-between\">\n          <span className=\"text-xs xs:text-sm text-white\">\n            Showing {(state.currentPage - 1) * 10 + 1} to\n            {Math.min(state.currentPage * 10, sortedNodes.length)} of{\" \"}\n            {sortedNodes.length} Entries\n          </span>\n          <div className=\"inline-flex mt-2 xs:mt-0\">\n            <button\n              onClick={previousPage}\n              className=\"text-sm bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-l\"\n            >\n              Prev\n            </button>\n            <button\n              onClick={nextPage}\n              className=\"text-sm bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-r\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div className=\"text-white text-center p-4\">Loading ...</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.components.Table.Social_Stats_Posts", "fact_widget_deployments_id": "5bd4d8e77638426cdf71961f8c32824c", "inserted_timestamp": "2023-09-19T14:52:41.433Z", "modified_timestamp": "2023-09-19T14:52:41.433Z", "__row_index": 0}