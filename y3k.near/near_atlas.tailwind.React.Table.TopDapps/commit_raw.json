{"tx_hash": "BmLTYtvX6zobSUMvtV5roczFbWQ21cZCT3TYkeR6G9zo", "action_id_social": "VdzcF4ccbfZUmfTkVPQP5jMT7nG4GRGnLMV3PiYiExq-0-widget", "block_id": 102072695, "block_timestamp": "2023-09-27T12:57:19.304Z", "signer_id": "y3k.near", "widget_name": "near_atlas.tailwind.React.Table.TopDapps", "source_code": "// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/2122b458-2138-4d4b-b030-efa784fc04d3/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\n// data.body = data.body.sort((a, b) => new Date(a.MONTH) - new Date(b.MONTH));\n\nState.init({\n  setSortConfig: { key: null, direction: \"asc\" },\n  currentPage: 1,\n  rowsPerPage: 10, // You can change this as needed.\n});\n\nfunction getPaginatedData(data) {\n  const startIndex = (state.currentPage - 1) * state.rowsPerPage;\n  const endIndex = startIndex + state.rowsPerPage;\n  return data.slice(startIndex, endIndex);\n}\n\nlet Style = styled.div`\n  .table-header {\n    background-color: #000000; /* Set this to the desired dark color for the header */\n    color: #ffffff;\n    text-align: center;\n    font-weight: 600;\n  }\n`;\nlet nodes = rawData.body || [];\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white text-sm p-2\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a\n      href={\n        \"https://nearatlas.com/#/y3k.near/widget/near_atlas.components.detail_chart?project_name=\" +\n        text\n      }\n      className=\"text-red-50 text-wrap \"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-red-600\">{number}%</span>; // Red color for negative numbers\n  } else if (number > 0) {\n    return <span className=\"text-green-600\">{number}%</span>; // Green color for positive numbers\n  } else {\n    return <span className=\"text-yellow-600\">{number}%</span>; // Yellow color for zero\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\n\nconst COLUMNS = [\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap\">\n        Project\n      </p>\n    ),\n    renderCell: (item) => formatCell(item[\"Contract Address\"]),\n    sort: { sortKey: \"ContractAddress\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Past 30 Days\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Past 30 Days\"]),\n    sort: { sortKey: \"Past 30 Days\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Last Month\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"30-60 Days Ago\"]),\n    sort: { sortKey: \"30-60 Days Ago\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        M/M\n      </p>\n    ),\n    renderCell: (item) => formatText(item[\"M/M\"]),\n    sort: { sortKey: \"M/M\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        New MAAs\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"New MAAs\"]),\n    sort: { sortKey: \"New MAAs\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        M2 Retention\n      </p>\n    ),\n    renderCell: (item) => formatPercentNew(item[\"M2 Retention\"]),\n    sort: { sortKey: \"M2 Retention\" },\n  },\n\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Average DAU\n      </p>\n    ),\n    renderCell: (item) => formatNumberDecimal(item[\"Daily Average\"]),\n    sort: { sortKey: \"Daily Average\" },\n  },\n\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        Stickiness\n      </p>\n    ),\n    renderCell: (item) => formatPercentNew(item[\"DAU / MAU\"]),\n    sort: { sortKey: \"DAU / MAU\" },\n  },\n\n  {\n    label: (\n      <p className=\"text-center text-white text-wrap \">Total Transactions</p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Total Transactions\"]),\n    sort: { sortKey: \"Total Transactions\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-wrap \">\n        Transactions - 30 Days\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"Transactions - 30 Days\"]),\n    sort: { sortKey: \"Transactions - 30 Days\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">Avg Txn per MAU</p>,\n    renderCell: (item) => formatNumber(item[\"Avg Txn per MAU\"]),\n    sort: { sortKey: \"Avg Txn per MAU\" },\n  },\n];\n\nfunction sort_update(sortKey, direction) {\n  // Update the sort state\n  State.update({\n    setSortConfig: { key: sortKey, direction },\n  });\n}\n\n// Function to get the sorted nodes\nfunction getSortedNodes() {\n  // Get the current sort configuration from the state\n  const sortConfig = state.setSortConfig;\n\n  // Apply sorting if there's a sort key and direction\n  if (sortConfig && sortConfig.key && sortConfig.direction) {\n    const sortedNodes = [...nodes];\n    sortedNodes.sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) {\n        return sortConfig.direction === \"asc\" ? -1 : 1;\n      }\n      if (a[sortConfig.key] > b[sortConfig.key]) {\n        return sortConfig.direction === \"asc\" ? 1 : -1;\n      }\n      return 0;\n    });\n    return sortedNodes;\n  }\n  return nodes; // Return original nodes if no sorting\n}\n\nreturn (\n  <div className=\"bg-dark rounded-lg mb-12 overflow-hidden w-full\">\n    {data !== null ? (\n      <div\n        style={{ \"min-width\": \"780px\" }}\n        className=\"bg-dark w-full overflow-x-auto overflow-y-auto\"\n      >\n        <table className=\"table-auto w-full overflow-scroll\">\n          <thead className=\"bg-gray-700\">\n            <tr>\n              {COLUMNS.map((column, index) => (\n                <th\n                  key={index}\n                  className=\"text-white text-center font-semibold p-2 border-b border-gray-300 cursor-pointer\"\n                  onClick={() => {\n                    const direction =\n                      state.setSortConfig.direction === \"asc\" ? \"desc\" : \"asc\";\n                    sort_update(column.sort.sortKey, direction);\n                  }}\n                >\n                  {column.label}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {getPaginatedData(getSortedNodes()).map((row, rowIndex) => (\n              <tr\n                key={rowIndex}\n                className={` ${\n                  rowIndex % 2 === 0 ? \"bg-gray-800\" : \"bg-gray-900\"\n                }`}\n              >\n                {COLUMNS.map((column, colIndex) => (\n                  <td key={colIndex} className=\"text-center p-2 \">\n                    {column.renderCell(row)}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"text-center mt-4 bg-gray-800 p-4 rounded\">\n          <button\n            onClick={() => {\n              if (state.currentPage > 1) {\n                State.update({ currentPage: state.currentPage - 1 });\n              }\n            }}\n            className=\"px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 active:bg-gray-500\"\n          >\n            Previous\n          </button>\n          <span className=\"mx-2 text-white\">\n            Page {state.currentPage} of{\" \"}\n            {Math.ceil(nodes.length / state.rowsPerPage)}\n          </span>\n          <button\n            onClick={() => {\n              if (\n                state.currentPage < Math.ceil(nodes.length / state.rowsPerPage)\n              ) {\n                State.update({ currentPage: state.currentPage + 1 });\n              }\n            }}\n            className=\"px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 active:bg-gray-500\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div className=\"text-white text-center p-4\">Loading ...</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.tailwind.React.Table.TopDapps", "fact_widget_deployments_id": "ab45a67c6694d91b9f8e94a513441205", "inserted_timestamp": "2023-09-27T14:47:21.814Z", "modified_timestamp": "2023-09-27T14:47:21.814Z", "__row_index": 0}