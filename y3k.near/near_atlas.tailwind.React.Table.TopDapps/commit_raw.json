{"tx_hash": "GPAnsu9q65PbJt6rNVkqJ6yRqQ3Yjo5LifxXNsCuho3t", "action_id_social": "Cu6h49MkesAYCkE6ZFhbwAi4qkYu8zc41mneVom8dmvo-0-widget", "block_id": 98356210, "block_timestamp": "2023-08-08T16:14:35.650Z", "signer_id": "y3k.near", "widget_name": "near_atlas.tailwind.React.Table.TopDapps", "source_code": "let rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/2122b458-2138-4d4b-b030-efa784fc04d3/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\n// data.body = data.body.sort((a, b) => new Date(a.MONTH) - new Date(b.MONTH));\n\nlet Style = styled.div`\n\n          `;\n\nlet nodes = rawData.body || [];\n\nconst sub_widget_map = {\n  \"Play Ember\": \"https://nearatlas.com/#/y3k.near/widget/WAU_PlayEmber\",\n};\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a\n      href={\n        \"https://nearatlas.com/#/y3k.near/widget/NEART.ATLAS.DETAILED_PROJECT_DASHBOARD?project_name=\" +\n        text\n      }\n      className=\"text-warning text-wrap \"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-danger\">{number}%</span>;\n  } else if (number > 0) {\n    return <span className=\"text-success\">{number}%</span>;\n  } else {\n    return <span className=\"text-warning\">{number}%</span>;\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\n\nconst COLUMNS = [\n  {\n    label: <p className=\"text-center text-white text-wrap\">Project</p>,\n    renderCell: (item) => formatCell(item[\"Contract Address\"]),\n    sort: { sortKey: \"ContractAddress\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">Past 30 Days</p>,\n    renderCell: (item) => formatNumber(item[\"Past 30 Days\"]),\n    sort: { sortKey: \"Past 30 Days\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">Last Month</p>,\n    renderCell: (item) => formatNumber(item[\"30-60 Days Ago\"]),\n    sort: { sortKey: \"30-60 Days Ago\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">M/M</p>,\n    renderCell: (item) => formatText(item[\"M/M\"]),\n    sort: { sortKey: \"M/M\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">New MAAs</p>,\n    renderCell: (item) => formatNumber(item[\"New MAAs\"]),\n    sort: { sortKey: \"New MAAs\" },\n  },\n  {\n    label: <p className=\"text-center text-white text-wrap \">M2 Retention</p>,\n    renderCell: (item) => formatPercentNew(item[\"M2 Retention\"]),\n    sort: { sortKey: \"M2 Retention\" },\n  },\n\n  {\n    label: <p className=\"text-center text-white text-wrap \">Average DAU</p>,\n    renderCell: (item) => formatNumberDecimal(item[\"Daily Average\"]),\n    sort: { sortKey: \"Daily Average\" },\n  },\n\n  {\n    label: <p className=\"text-center text-white text-wrap \">Stickiness</p>,\n    renderCell: (item) => formatPercentNew(item[\"DAU / MAU\"]),\n    sort: { sortKey: \"DAU / MAU\" },\n  },\n];\nconst sortFns = {\n  ContractAddress: (array) =>\n    array.sort((a, b) =>\n      a[\"Contract Address\"].localeCompare(b[\"Contract Address\"])\n    ),\n  \"Past 30 Days\": (array) =>\n    array.sort((a, b) => a[\"Past 30 Days\"] - b[\"Past 30 Days\"]),\n  \"30-60 Days Ago\": (array) =>\n    array.sort((a, b) => a[\"30-60 Days Ago\"] - b[\"30-60 Days Ago\"]),\n  \"M/M\": (array) => array.sort((a, b) => a[\"M/M\"] - b[\"M/M\"]),\n  \"New MAAs\": (array) => array.sort((a, b) => a[\"New MAAs\"] - b[\"New MAAs\"]),\n  \"M2 Retention\": (array) =>\n    array.sort((a, b) => a[\"M2 Retention\"] - b[\"M2 Retention\"]),\n  \"Daily Average\": (array) =>\n    array.sort((a, b) => a[\"Daily Average\"] - b[\"Daily Average\"]),\n  \"DAU / MAU\": (array) => array.sort((a, b) => a[\"DAU / MAU\"] - b[\"DAU / MAU\"]),\n};\n\nreturn (\n  <div className=\"text-bg-dark rounded-4 mb-12\">\n    {data !== null ? (\n      <div Style={{ \"min-width\": \"780px\" }} className=\"bg-dark\">\n        <BasicTable columns={COLUMNS} data={data} sortFns={sortFns} />\n      </div>\n    ) : (\n      <div>Loading ...</div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.tailwind.React.Table.TopDapps", "fact_widget_deployments_id": "cab3488beca222b7a70f26b58ace7834", "inserted_timestamp": "2023-08-08T17:34:14.056Z", "modified_timestamp": "2023-08-08T17:34:14.056Z", "__row_index": 10}