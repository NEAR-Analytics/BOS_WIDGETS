{"tx_hash": "HdtySKX7CH5oFbH3zo2tns3Yv23uGjoAMFvwA8CPf4zq", "action_id_social": "EvnaopZQeURChMzCq1qbLy1cn37c2XAp8dSPUtbnpkzT-0-widget", "block_id": 101410038, "block_timestamp": "2023-09-18T15:34:44.692Z", "signer_id": "y3k.near", "widget_name": "near_atlas.components.vis.chain_comparisons", "source_code": "let raw_data = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/b5d7e3a4-2428-4598-9ebd-d40f04159025/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nconst initialState = {\n  selectedDateRange: \"1M\",\n  rawData: [],\n};\n\nstate = State.init(initialState);\n\nconst handleDateRangeChange = (range) => {\n  State.update({\n    selectedDateRange: range,\n  });\n};\n\nconst data = raw_data.body || [];\nState.update({ rawData: data });\n\nlet Style = styled.div`\n`;\n// logic start\n\nconst COLORS = [\n  \"rgb(255, 99, 132)\",\n  \"rgb(75, 192, 192)\",\n  \"rgb(153, 102, 255)\",\n  \"rgb(255, 159, 64)\",\n  \"rgb(54, 162, 235)\",\n  \"rgb(201, 203, 207)\",\n  \"rgb(255, 205, 86)\",\n  \"rgb(255, 99, 71)\",\n  \"rgb(147, 112, 219)\",\n  \"rgb(0, 128, 128)\",\n  \"rgb(100, 149, 237)\",\n  \"rgb(127, 255, 0)\",\n];\n\nconst processData = (rawData, dateRange) => {\n  const endDate = new Date(); // current date\n  let startDate = new Date();\n\n  switch (dateRange) {\n    case \"1M\":\n      startDate.setMonth(endDate.getMonth() - 1);\n      break;\n    case \"3M\":\n      startDate.setMonth(endDate.getMonth() - 3);\n      break;\n    case \"YTD\":\n      startDate = new Date(endDate.getFullYear(), 0, 1); // start of the year\n      break;\n    case \"1Y\":\n      startDate.setFullYear(endDate.getFullYear() - 1);\n      break;\n    case \"3Y\":\n      startDate.setFullYear(endDate.getFullYear() - 3);\n      break;\n    case \"10Y\":\n      startDate.setFullYear(endDate.getFullYear() - 10);\n      break;\n  }\n\n  const sortedData = rawData.sort(\n    (a, b) => new Date(a[\"DATE\"]) - new Date(b[\"DATE\"])\n  );\n  return rawData.filter((entry) => {\n    const entryDate = new Date(entry[\"DATE\"]);\n    return entryDate >= startDate && entryDate <= endDate;\n  });\n};\n\nconst generateDatasets = (processedData) => {\n  const groupedByChain = {};\n\n  // Group data by the 'CHAIN' field\n  processedData.forEach((entry) => {\n    if (!groupedByChain[entry.CHAIN]) {\n      groupedByChain[entry.CHAIN] = [];\n    }\n    groupedByChain[entry.CHAIN].push(entry);\n  });\n\n  // Now create a dataset for each unique 'CHAIN' value\n  return Object.keys(groupedByChain).map((chainName, index) => {\n    const sortedChainData = groupedByChain[chainName].sort((a, b) => {\n      return new Date(a[\"DATE\"]) - new Date(b[\"DATE\"]);\n    });\n\n    return {\n      label: chainName,\n      data: sortedChainData.map((entry) => ({\n        x: entry.DATE,\n        y: entry.TXNS,\n      })),\n      backgroundColor: COLORS[index % COLORS.length],\n      borderColor: COLORS[index % COLORS.length],\n      fill: false,\n      type: \"line\",\n    };\n  });\n};\n\nconst dataToDisplay = processData(state.rawData, state.selectedDateRange);\nconst datasets = generateDatasets(dataToDisplay);\n\nconst dates = dataToDisplay.map((entry) => entry[\"DATE\"]);\n\n// styles\nconst maxYValue = Math.max(...dataToDisplay.map((d) => d.TXNS));\n\nlet maxMilestone;\nif (maxYValue <= 20e3) {\n  maxMilestone = 20e3;\n} else if (maxYValue <= 100e3) {\n  maxMilestone = 100e3;\n} else if (maxYValue <= 200e3) {\n  maxMilestone = 200e3;\n} else if (maxYValue <= 400e3) {\n  maxMilestone = 400e3;\n} else if (maxYValue <= 1e6) {\n  maxMilestone = 1e6;\n} else {\n  maxMilestone = 2e6;\n}\nlet yTicks;\n\nswitch (maxMilestone) {\n  case 20e3:\n    yTicks = [0, 10e3, 20e3];\n    break;\n  case 100e3:\n    yTicks = [0, 20e3, 40e3, 100e3];\n    break;\n  case 200e3:\n    yTicks = [0, 100e3, 200e3];\n    break;\n  case 400e3:\n    yTicks = [0, 200e3, 400e3];\n    break;\n  case 1e6:\n    yTicks = [0, 400e3, 1e6];\n    break;\n  case 2e6:\n    yTicks = [0, 1e6, 2e6];\n    break;\n}\n\nconst stacked_options = {\n  maintainAspectRatio: true,\n  plugins: {\n    legend: {\n      display: true,\n      position: \"bottom\",\n    },\n  },\n  scales: {\n    y: {\n      stacked: false,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n        borderColor: \"rgb(240,255,240)\",\n      },\n      ticks: {\n        callback: (value) => {\n          if (value >= 1e6) {\n            return value / 1e6 + \"m\";\n          } else if (value >= 1e3) {\n            return value / 1e3 + \"k\";\n          } else {\n            return value;\n          }\n        },\n        color: \"rgb(240,255,240)\",\n        autoSkip: false, // ensures all ticks are shown\n        maxTicksLimit: 8, // Adjust if necessary\n        suggestedMin: 0,\n        suggestedMax: 2e6,\n        stepSize: 10e3, // this determines the difference between consecutive tick marks\n      },\n    },\n    x: {\n      stacked: false,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n  },\n};\n\nconst chartConfig = {\n  dates,\n  datasets: datasets,\n};\n\nreturn (\n  <Style>\n    <div className=\"relative text-bg-dark container\">\n      <div className=\"absolute top-0 right-0 flex space-x-2 p-3 mb-5\">\n        {[\"1M\", \"3M\", \"YTD\", \"1Y\", \"3Y\", \"10Y\"].map((range) => (\n          <button\n            key={range}\n            onClick={() => handleDateRangeChange(range)}\n            className={`px-3 py-1 rounded transition-colors duration-200 ease-in ${\n              state.selectedDateRange === range\n                ? \"bg-blue-500 text-white\"\n                : \"bg-gray-800 text-gray-400 hover:bg-gray-700\"\n            }`}\n          >\n            {range}\n          </button>\n        ))}\n      </div>\n      {data !== null ? (\n        <div className=\"rounded-4 p-3 mb-4\">\n          <div className=\"\">\n            <BarEl options={stacked_options} data={chartConfig} />\n          </div>\n        </div>\n      ) : (\n        <div>Loading ...</div>\n      )}\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.components.vis.chain_comparisons", "fact_widget_deployments_id": "e5df16dc11f7edd241a25dbe3c2f5381", "inserted_timestamp": "2023-09-18T17:29:08.012Z", "modified_timestamp": "2023-09-18T17:29:08.012Z", "__row_index": 2}