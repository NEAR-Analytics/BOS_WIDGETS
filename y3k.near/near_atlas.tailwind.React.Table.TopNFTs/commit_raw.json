{"tx_hash": "AWew1MezDgJGBdnHiiA4k66JsNGYmJPU3WZifuziZ3gM", "action_id_social": "F5cVS2573QNHcaxWMyGQ3MDNGMAVRh1n86EVmPcVQ9hD-0-widget", "block_id": 99856797, "block_timestamp": "2023-08-28T14:02:28.201Z", "signer_id": "y3k.near", "widget_name": "near_atlas.tailwind.React.Table.TopNFTs", "source_code": "// Monthly Active Accounts Example\nlet rawData = fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/9bfa85f4-7b2d-4219-b6b6-a08f5ed2880b/data/latest\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\n// data.body = data.body.sort((a, b) => new Date(a.MONTH) - new Date(b.MONTH));\n\nState.init({\n  setSortConfig: { key: \"\", direction: \"asc\" },\n  currentPage: 1,\n});\n\nfunction getNodesForCurrentPage() {\n  const startIndex = (state.currentPage - 1) * 10;\n  const endIndex = startIndex + 10;\n  return nodesTop100.slice(startIndex, endIndex);\n}\n\nfunction nextPage() {\n  if (state.currentPage < Math.ceil(nodesTop100.length / 10)) {\n    State.update({ currentPage: state.currentPage + 1 });\n  }\n}\n\nfunction previousPage() {\n  if (state.currentPage > 1) {\n    State.update({ currentPage: state.currentPage - 1 });\n  }\n}\n\nlet Style = styled.div`\n  .table-header {\n    background-color: #000000; /* Set this to the desired dark color for the header */\n    color: #ffffff;\n    text-align: center;\n    font-weight: 600;\n  }\n`;\nlet nodes = rawData.body || [];\n\nfunction formatPercentNew(text) {\n  let number = parseFloat(text);\n  return <span className=\"text-white\">{number}%</span>;\n}\n\nfunction formatNumber(num) {\n  return (\n    <span className=\"text-white text-sm p-2\">\n      {num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatNumberDecimal(text) {\n  let number = parseInt(text);\n  return (\n    <span className=\"text-white\">\n      {number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}\n    </span>\n  );\n}\n\nfunction formatCell(text) {\n  return (\n    <a\n      // href={\n      //   \"https://beta.nearatlas.com/#/y3k.near/widget/near_atlas.components.detail_chart?project_name=\" +\n      //   text\n      // }\n      className=\"text-red-50 text-wrap \"\n    >\n      {text}\n    </a>\n  );\n}\n\nfunction formatText(text) {\n  let number = parseFloat(text);\n  if (number < 0) {\n    return <span className=\"text-red-600\">{number}%</span>; // Red color for negative numbers\n  } else if (number > 0) {\n    return <span className=\"text-green-600\">{number}%</span>; // Green color for positive numbers\n  } else {\n    return <span className=\"text-yellow-600\">{number}%</span>; // Yellow color for zero\n  }\n}\n\nconst data = {\n  nodes: nodes,\n};\n\nconst COLUMNS = [\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap\">\n        RECEIVER_ID\n      </p>\n    ),\n    renderCell: (item) => formatCell(item[\"RECEIVER_ID\"]),\n    sort: { sortKey: \"RECEIVER_ID\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        TRANSFERS_LAST_3_DAYS\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"TRANSFERS_LAST_3_DAYS\"]),\n    sort: { sortKey: \"TRANSFERS_LAST_3_DAYS\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        TRANSFERS_LAST_24_HOURS\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"TRANSFERS_LAST_24_HOURS\"]),\n    sort: { sortKey: \"TRANSFERS_LAST_24_HOURS\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        TOTAL_TRANSFERS\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"TOTAL_TRANSFERS\"]),\n    sort: { sortKey: \"TOTAL_TRANSFERS\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        TOTAL_DEPOSIT\n      </p>\n    ),\n    renderCell: (item) => formatNumberDecimal(item[\"TOTAL_DEPOSIT\"]),\n    sort: { sortKey: \"TOTAL_DEPOSIT\" },\n  },\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        TOTAL_GAS_USED\n      </p>\n    ),\n    renderCell: (item) => formatNumberDecimal(item[\"TOTAL_GAS_USED\"]),\n    sort: { sortKey: \"TOTAL_GAS_USED\" },\n  },\n\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        HOLDERS_COUNT\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"HOLDERS_COUNT\"]),\n    sort: { sortKey: \"HOLDERS_COUNT\" },\n  },\n\n  {\n    label: (\n      <p className=\"text-center text-white text-sm font-semibold p-2 text-wrap \">\n        TOKEN_COUNT\n      </p>\n    ),\n    renderCell: (item) => formatNumber(item[\"TOKEN_COUNT\"]),\n    sort: { sortKey: \"TOKEN_COUNT\" },\n  },\n];\n\nfunction sort_update(sortKey, direction) {\n  // Update the sort state\n  State.update({\n    setSortConfig: { key: sortKey, direction },\n  });\n}\n\n// Function to get the sorted nodes\nfunction getSortedNodes() {\n  // Get the current sort configuration from the state\n  const sortConfig = state.setSortConfig;\n\n  //   console.log(sortConfig.key);\n\n  // Apply sorting if there's a sort key and direction\n  if (sortConfig && sortConfig.key && sortConfig.direction) {\n    const sortedNodes = [...(nodes || [])];\n    sortedNodes.sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) {\n        return sortConfig.direction === \"asc\" ? -1 : 1;\n      }\n      if (a[sortConfig.key] > b[sortConfig.key]) {\n        return sortConfig.direction === \"asc\" ? 1 : -1;\n      }\n      return 0;\n    });\n    console.log(sortedNodes);\n\n    return sortedNodes;\n  }\n\n  //   //\n  //   if (!sortedNodes || sortedNodes.length === 0) {\n  //     return [];\n  //   }\n  //   console.log(\"state:\", state); // Check if state is defined and has the expected structure\n  //   console.log(\"nodes:\", nodes); // Check if nodes is defined and has the expected structure\n  //   console.log(\"sortedNodes:\", sortedNodes); // Check if state is defined and has the expected structure\n\n  return nodes; // Return original nodes if no sorting\n}\n\n// Function to get the top 100 sorted nodes based on TRANSFERS_LAST_3_DAYS\nfunction getTop100SortedNodes() {\n  // First, ensure nodes is defined and is an array\n  if (!nodes || !Array.isArray(nodes)) {\n    return [];\n  }\n\n  // Sort based on TRANSFERS_LAST_3_DAYS in descending order\n  const sortedNodes = [...nodes].sort((a, b) => {\n    return b[\"TRANSFERS_LAST_3_DAYS\"] - a[\"TRANSFERS_LAST_3_DAYS\"];\n  });\n\n  // Return top 100 items after sorting\n  return sortedNodes.slice(0, 100);\n}\nconst nodesTop100 = getTop100SortedNodes();\nconst nodesForCurrentPage = getNodesForCurrentPage();\n\nreturn (\n  <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto bg-dark\">\n    <div className=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\n      <table className=\"min-w-full leading-normal\">\n        <thead>\n          <tr>\n            {COLUMNS.map((column) => (\n              <th\n                className=\"px-5 py-3 border-b-2 border-gray-700 bg-gray-900 text-left text-xs font-semibold text-white uppercase tracking-wider cursor-pointer\"\n                onClick={() => {\n                  const direction =\n                    state.setSortConfig.direction === \"asc\" ? \"desc\" : \"asc\";\n                  sort_update(column.sort.sortKey, direction);\n                }}\n              >\n                {column.label}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {nodesForCurrentPage.map((row, rowIndex) => (\n            <tr className={rowIndex % 2 === 0 ? \"bg-gray-800\" : \"bg-gray-900\"}>\n              {COLUMNS.map((column) => (\n                <td className=\"px-5 py-5 border-b border-gray-700 text-sm\">\n                  {column.renderCell(row)}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"px-5 py-5 bg-gray-800 border-t flex flex-col xs:flex-row items-center xs:justify-between\">\n        <span className=\"text-xs xs:text-sm text-white\">\n          Showing {(state.currentPage - 1) * 10 + 1} to\n          {Math.min(state.currentPage * 10, nodesTop100.length)} of{\" \"}\n          {nodesTop100.length} Entries\n        </span>\n        <div className=\"inline-flex mt-2 xs:mt-0\">\n          <button\n            onClick={previousPage}\n            className=\"text-sm bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-l\"\n          >\n            Prev\n          </button>\n          <button\n            onClick={nextPage}\n            className=\"text-sm bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-r\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.tailwind.React.Table.TopNFTs", "fact_widget_deployments_id": "31d2f24a6da9da05281ea9abef426101", "inserted_timestamp": "2023-08-28T15:49:36.205Z", "modified_timestamp": "2023-08-28T15:49:36.205Z", "__row_index": 4}