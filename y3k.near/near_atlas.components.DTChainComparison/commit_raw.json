{"tx_hash": "HQiYSvVWRa85donh9bRfxsaXYeZM5LVgwQJW48ukapHP", "action_id_social": "6Gr6nbMvzEPno9M3wDVNSAouoxbp8BGFUoDsPmMudxqg-0-widget", "block_id": 103050909, "block_timestamp": "2023-10-10T12:31:40.579Z", "signer_id": "y3k.near", "widget_name": "near_atlas.components.DTChainComparison", "source_code": "let query_url_obj = [\n  { name: \"Arbitrum\", url_address: \"7548f19b-d7cb-4fb2-8ed1-75ffefebae15\" },\n  { name: \"Avalanche\", url_address: \"278d4896-0e1a-4697-9551-f12529567920\" },\n  { name: \"Axelar\", url_address: \"9ebbfd40-82f3-432f-a321-a20f721eb422\" },\n  { name: \"Base\", url_address: \"61ccca7a-7ac7-4582-9036-555e34d6adcf\" },\n  { name: \"Bitcoin\", url_address: \"07283929-e901-4f7d-b2fc-09dc60208438\" },\n  { name: \"BSC\", url_address: \"63ef97f1-0b06-4278-8117-b0307986ea72\" },\n  { name: \"Ethereum\", url_address: \"7c3aca82-c59a-40fe-8724-d6494ecaa26e\" },\n  { name: \"Flow\", url_address: \"97332a17-7c1d-4c98-bc84-6e5708a89362\" },\n  { name: \"Gnosis\", url_address: \"2c70775d-2b28-41f1-a433-09b7b014fcee\" },\n  { name: \"NEAR\", url_address: \"929c5e31-1d31-4612-a4f1-eed2ae04af02\" },\n  { name: \"Optimism\", url_address: \"2d27ae0a-2dcf-430d-9e6f-03e49d2357a1\" },\n  { name: \"Osmosis\", url_address: \"c96898d0-677b-4ae4-820c-a45ee86f1199\" },\n  { name: \"Polygon\", url_address: \"171c5bf3-a695-4b95-9fcf-ced70ba18be3\" },\n  { name: \"Sei\", url_address: \"4cc1b6a1-0582-441d-8f1e-ae893e656325\" },\n  { name: \"Solana\", url_address: \"936a3f9a-caa4-4609-9c14-7dbfd04e4a03\" },\n];\n\n//  add dynamic parameters to url\nlet query_url =\n  \"https://api.flipsidecrypto.com/api/v2/queries/PLACEHOLDER/data/latest\";\n\n// Create a new array with updated items\nlet updated_url_obj = query_url_obj.map((item) => {\n  return {\n    ...item,\n    url_address: query_url.replace(\"PLACEHOLDER\", item.url_address),\n  };\n});\n\n// console.log(updated_url_obj);\n\nlet resultObject = {};\n\n// fetch data from url\nupdated_url_obj.forEach((item) => {\n  let raw_data = fetch(item.url_address, {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  });\n  // Note: without using async/await or .then(), you won't get the body directly\n  // so you may need additional handling here.\n  resultObject[item.name] = raw_data.body || [];\n});\n\n// console.log(resultObject);\n\nconst initialState = {\n  selectedDateRange: \"1Y\",\n  _raw_data: [],\n};\n\nstate = State.init(initialState);\n\nconst handleDateRangeChange = (range) => {\n  State.update({\n    selectedDateRange: range,\n  });\n};\n\nconst _raw_data = resultObject || [];\n\nState.update({ _raw_data: _raw_data });\n\nlet Style = styled.div``;\n\nconst darkColors = [\n  \"rgb(250,164,58)\", // Bright Orange\n  \"rgb(13,131,171)\", // Ocean Blue\n  \"rgb(255,85,85)\", // Light Red\n  \"rgb(85,255,85)\", // Light Green\n  \"rgb(85,85,255)\", // Light Blue\n  \"rgb(255,255,85)\", // Bright Yellow\n  \"rgb(240,130,130)\", // Soft Pink\n  \"rgb(130,240,240)\", // Aqua\n  \"rgb(240,240,130)\", // Soft Gold\n  \"rgb(130,130,240)\", // Periwinkle\n  \"rgb(200,100,150)\", // Mauve\n  \"rgb(150,200,100)\", // Olive Green\n  \"rgb(100,150,200)\", // Sky Blue\n  \"rgb(200,150,100)\", // Sandstone\n  \"rgb(150,100,200)\", // Lavender\n];\n\nlet colorIndex = 0;\nfunction generateDarkColor() {\n  const color = darkColors[colorIndex];\n  colorIndex = (colorIndex + 1) % darkColors.length; // Cycle back to 0 if we reach the end\n  return color;\n}\n\nconst processData = (dataObjects, dateRange) => {\n  const endDate = new Date();\n  let startDate = new Date();\n\n  switch (dateRange) {\n    case \"1M\":\n      startDate.setMonth(endDate.getMonth() - 1);\n      break;\n    case \"3M\":\n      startDate.setMonth(endDate.getMonth() - 3);\n      break;\n    case \"YTD\":\n      startDate = new Date(endDate.getFullYear(), 0, 1); // start of the year\n      break;\n    case \"1Y\":\n      startDate.setFullYear(endDate.getFullYear() - 1);\n      break;\n    case \"3Y\":\n      startDate.setFullYear(endDate.getFullYear() - 3);\n      break;\n  }\n\n  const result = {};\n  // console.log(\"dataObjects\")\n  // console.log(dataObjects)\n\n  Object.entries(dataObjects).forEach(([name, data]) => {\n    const processedData = data.filter((entry) => {\n      const entryDate = new Date(entry[\"Date\"]);\n      return entryDate >= startDate && entryDate <= endDate;\n    });\n\n    // Here, you can't set properties on a string or an array directly.\n    // If you want to associate a color with each name, you'd need a separate structure.\n    // dataObj.color = generateDarkColor(); // This line is problematic.\n\n    // Sort the processed data by date\n    result[name] = {\n      data: processedData.sort(\n        (a, b) => new Date(a[\"Date\"]) - new Date(b[\"Date\"])\n      ),\n      color: generateDarkColor(),\n    };\n  });\n\n  return result;\n};\n\nconst dataSetsInfo = processData(state._raw_data, state.selectedDateRange);\n\nconst stacked_bar_data = {\n  datasets: [],\n};\n\nObject.entries(dataSetsInfo).forEach(([name, datasetInfo]) => {\n  const DAA = {};\n\n  if (datasetInfo.data) {\n    // Check if dataset exists for the given name\n    datasetInfo.data.forEach((entry) => {\n      DAA[entry[\"Date\"]] = entry[\"Values\"];\n    });\n\n    stacked_bar_data.datasets.push({\n      label: name, // Using the 'name' as label\n      data: DAA,\n      backgroundColor: datasetInfo.color, // Using the color we attached earlier\n    });\n  }\n});\n\n// Extract dates\nif (Object.values(dataSetsInfo).length > 0) {\n  stacked_bar_data.dates = Object.values(dataSetsInfo)[0].data.map(\n    (entry) => entry[\"Date\"]\n  );\n}\n\n// console.log(\"stacked_bar_data\");\n// console.log(stacked_bar_data);\n\n// stacked_bar_data.dates = dataSetsInfo[0].data.map((entry) => entry[\"Date\"]);\n\nconst stacked_options = {\n  maintainAspectRatio: true,\n  plugins: {\n    legend: {\n      display: true,\n      position: \"bottom\",\n    },\n  },\n  scales: {\n    y: {\n      stacked: true,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n        borderColor: \"rgb(240,255,240)\",\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n    x: {\n      stacked: true,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n  },\n};\n\nreturn (\n  <Style>\n    <div className=\"relative text-bg-dark rounded-4 p-3 mb-4\">\n      <div className=\"absolute top-0 right-0 flex space-x-2 p-3\">\n        {[\"1M\", \"3M\", \"YTD\", \"1Y\", \"3Y\"].map((range) => (\n          <button\n            key={range}\n            onClick={() => handleDateRangeChange(range)}\n            className={`px-3 py-1 rounded transition-colors duration-200 ease-in ${\n              state.selectedDateRange === range\n                ? \"bg-blue-500 text-white\"\n                : \"bg-gray-800 text-gray-400 hover:bg-gray-700\"\n            }`}\n          >\n            {range}\n          </button>\n        ))}\n        <button className=\"px-3 py-1 rounded transition-colors duration-200 ease-in bg-gray-800 text-gray-400 hover:bg-gray-700\">\n          <a\n            href=\"https://api.flipsidecrypto.com/api/v2/queries/c493c7b1-cfcc-4aee-ad79-869b4ed8ca90/data/latest\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-red-50 whitespace-normal break-words block max-w-xs\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1.5}\n              stroke=\"currentColor\"\n              className=\"w-6 h-6\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3\"\n              />\n            </svg>\n          </a>\n        </button>\n      </div>\n      <div className=\"rounded-4 p-3 mb-4 pt-16\">\n        {\" \"}\n        {data !== null ? (\n          <div>\n            <BarEl options={stacked_options} data={stacked_bar_data} />\n          </div>\n        ) : (\n          <div>Loading ...</div>\n        )}\n      </div>\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.components.DTChainComparison", "fact_widget_deployments_id": "4250657433f8582185c75846a06d6ca1", "inserted_timestamp": "2023-10-10T14:30:43.220Z", "modified_timestamp": "2023-10-10T14:30:43.220Z", "__row_index": 0}