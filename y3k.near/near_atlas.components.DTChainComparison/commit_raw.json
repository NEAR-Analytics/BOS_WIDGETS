{"tx_hash": "9UUBQWPxzPb6be1MhtNZUYKqNiW2sWiToDSQXaaDp8cn", "action_id_social": "7VsyBVE5RqAPDG5aTopBLFDJRFJrT9jUVbYt13g5fZTy-0-widget", "block_id": 103052958, "block_timestamp": "2023-10-10T13:10:25.455Z", "signer_id": "y3k.near", "widget_name": "near_atlas.components.DTChainComparison", "source_code": "let query_url_obj = [\n  { name: \"Arbitrum\", url_address: \"792225e3-f606-4d19-b99b-6957013105c0\" },\n  { name: \"Avalanche\", url_address: \"6069b95f-3a7f-4103-b729-f88fb2aaab36\" },\n  { name: \"Axelar\", url_address: \"f9b18156-5a72-4e4f-88f1-ac2af5cb40e5\" },\n  { name: \"Base\", url_address: \"3e85f75b-b685-4601-8652-cf0f428d8581\" },\n  { name: \"Bitcoin\", url_address: \"567aaa02-c60b-43a2-8354-5b6dbfa35ff2\" },\n  { name: \"BSC\", url_address: \"438ad14f-d1a2-44d6-a3ab-65f1521c702b\" },\n  { name: \"Ethereum\", url_address: \"71d58a08-af9f-4203-b0f8-e88d1a7c6c9e\" },\n  { name: \"Flow\", url_address: \"9a41fa07-24b0-4824-9bb4-821a05d527ef\" },\n  { name: \"Gnosis\", url_address: \"0d8670e1-c3c0-4126-814a-42b1ebaac84e\" },\n  { name: \"NEAR\", url_address: \"929c5e31-1d31-4612-a4f1-eed2ae04af02\" },\n  { name: \"Optimism\", url_address: \"c7f9455c-23ea-4539-a4b3-734d075981c9\" },\n  { name: \"Osmosis\", url_address: \"eb069a78-abe6-45de-9af8-8b399bc5c5c5\" },\n  { name: \"Polygon\", url_address: \"39eb7c48-cf52-4f62-9a48-7919ce474da0\" },\n  { name: \"Sei\", url_address: \"33fc6fd5-2451-41c0-ad4d-d7a442faca71\" },\n  { name: \"Solana\", url_address: \"2fd5b627-ddee-4699-8fa1-9e7037584b2b\" },\n];\n\n//  add dynamic parameters to url\nlet query_url =\n  \"https://api.flipsidecrypto.com/api/v2/queries/PLACEHOLDER/data/latest\";\n\n// Create a new array with updated items\nlet updated_url_obj = query_url_obj.map((item) => {\n  return {\n    ...item,\n    url_address: query_url.replace(\"PLACEHOLDER\", item.url_address),\n  };\n});\n\n// console.log(updated_url_obj);\n\nlet resultObject = {};\n\n// fetch data from url\nupdated_url_obj.forEach((item) => {\n  let raw_data = fetch(item.url_address, {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  });\n  // Note: without using async/await or .then(), you won't get the body directly\n  // so you may need additional handling here.\n  resultObject[item.name] = raw_data.body || [];\n});\n\n// console.log(resultObject);\n\nconst initialState = {\n  selectedDateRange: \"1Y\",\n  _raw_data: [],\n};\n\nstate = State.init(initialState);\n\nconst handleDateRangeChange = (range) => {\n  State.update({\n    selectedDateRange: range,\n  });\n};\n\nconst _raw_data = resultObject || [];\n\nState.update({ _raw_data: _raw_data });\n\nlet Style = styled.div``;\n\nconst darkColors = [\n  \"rgb(250,164,58)\", // Bright Orange\n  \"rgb(13,131,171)\", // Ocean Blue\n  \"rgb(255,85,85)\", // Light Red\n  \"rgb(85,255,85)\", // Light Green\n  \"rgb(85,85,255)\", // Light Blue\n  \"rgb(255,255,85)\", // Bright Yellow\n  \"rgb(240,130,130)\", // Soft Pink\n  \"rgb(130,240,240)\", // Aqua\n  \"rgb(240,240,130)\", // Soft Gold\n  \"rgb(130,130,240)\", // Periwinkle\n  \"rgb(200,100,150)\", // Mauve\n  \"rgb(150,200,100)\", // Olive Green\n  \"rgb(100,150,200)\", // Sky Blue\n  \"rgb(200,150,100)\", // Sandstone\n  \"rgb(150,100,200)\", // Lavender\n];\n\nlet colorIndex = 0;\nfunction generateDarkColor() {\n  const color = darkColors[colorIndex];\n  colorIndex = (colorIndex + 1) % darkColors.length; // Cycle back to 0 if we reach the end\n  return color;\n}\n\nconst processData = (dataObjects, dateRange) => {\n  const endDate = new Date();\n  let startDate = new Date();\n\n  switch (dateRange) {\n    case \"1M\":\n      startDate.setMonth(endDate.getMonth() - 1);\n      break;\n    case \"3M\":\n      startDate.setMonth(endDate.getMonth() - 3);\n      break;\n    case \"YTD\":\n      startDate = new Date(endDate.getFullYear(), 0, 1); // start of the year\n      break;\n    case \"1Y\":\n      startDate.setFullYear(endDate.getFullYear() - 1);\n      break;\n    case \"3Y\":\n      startDate.setFullYear(endDate.getFullYear() - 3);\n      break;\n  }\n\n  const result = {};\n  // console.log(\"dataObjects\")\n  // console.log(dataObjects)\n\n  Object.entries(dataObjects).forEach(([name, data]) => {\n    const processedData = data.filter((entry) => {\n      const entryDate = new Date(entry[\"Date\"]);\n      return entryDate >= startDate && entryDate <= endDate;\n    });\n\n    // Here, you can't set properties on a string or an array directly.\n    // If you want to associate a color with each name, you'd need a separate structure.\n    // dataObj.color = generateDarkColor(); // This line is problematic.\n\n    // Sort the processed data by date\n    result[name] = {\n      data: processedData.sort(\n        (a, b) => new Date(a[\"Date\"]) - new Date(b[\"Date\"])\n      ),\n      color: generateDarkColor(),\n    };\n  });\n\n  return result;\n};\n\nconst dataSetsInfo = processData(state._raw_data, state.selectedDateRange);\n\nconst stacked_bar_data = {\n  datasets: [],\n};\n\nObject.entries(dataSetsInfo).forEach(([name, datasetInfo]) => {\n  const DAA = {};\n\n  if (datasetInfo.data) {\n    // Check if dataset exists for the given name\n    datasetInfo.data.forEach((entry) => {\n      DAA[entry[\"Date\"]] = entry[\"Values\"];\n    });\n\n    stacked_bar_data.datasets.push({\n      label: name, // Using the 'name' as label\n      data: DAA,\n      backgroundColor: datasetInfo.color, // Using the color we attached earlier\n    });\n  }\n});\n\n// Extract dates\nif (Object.values(dataSetsInfo).length > 0) {\n  stacked_bar_data.dates = Object.values(dataSetsInfo)[0].data.map(\n    (entry) => entry[\"Date\"]\n  );\n}\n\n// console.log(\"stacked_bar_data\");\n// console.log(stacked_bar_data);\n\n// stacked_bar_data.dates = dataSetsInfo[0].data.map((entry) => entry[\"Date\"]);\n\nconst stacked_options = {\n  maintainAspectRatio: true,\n  plugins: {\n    legend: {\n      display: true,\n      position: \"bottom\",\n    },\n  },\n  scales: {\n    y: {\n      stacked: true,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n        borderColor: \"rgb(240,255,240)\",\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n    x: {\n      stacked: true,\n      grid: {\n        color: \"rgb(41,51,64)\", // This will change the gridline color\n      },\n      ticks: {\n        color: \"rgb(240,255,240)\", // This will change the axis text label color\n      },\n    },\n  },\n};\n\nreturn (\n  <Style>\n    <div className=\"relative text-bg-dark rounded-4 p-3 mb-4\">\n      <div className=\"absolute top-0 right-0 flex space-x-2 p-3\">\n        {[\"1M\", \"3M\", \"YTD\", \"1Y\", \"3Y\"].map((range) => (\n          <button\n            key={range}\n            onClick={() => handleDateRangeChange(range)}\n            className={`px-3 py-1 rounded transition-colors duration-200 ease-in ${\n              state.selectedDateRange === range\n                ? \"bg-blue-500 text-white\"\n                : \"bg-gray-800 text-gray-400 hover:bg-gray-700\"\n            }`}\n          >\n            {range}\n          </button>\n        ))}\n        <button className=\"px-3 py-1 rounded transition-colors duration-200 ease-in bg-gray-800 text-gray-400 hover:bg-gray-700\">\n          <a\n            href=\"https://api.flipsidecrypto.com/api/v2/queries/c493c7b1-cfcc-4aee-ad79-869b4ed8ca90/data/latest\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-red-50 whitespace-normal break-words block max-w-xs\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1.5}\n              stroke=\"currentColor\"\n              className=\"w-6 h-6\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3\"\n              />\n            </svg>\n          </a>\n        </button>\n      </div>\n      <div className=\"rounded-4 p-3 mb-4 pt-16\">\n        {\" \"}\n        {data !== null ? (\n          <div>\n            <BarEl options={stacked_options} data={stacked_bar_data} />\n          </div>\n        ) : (\n          <div>Loading ...</div>\n        )}\n      </div>\n    </div>\n  </Style>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/near_atlas.components.DTChainComparison", "fact_widget_deployments_id": "54ede8326f02b9e9ee9efa41c35d7e65", "inserted_timestamp": "2023-10-10T15:17:19.832Z", "modified_timestamp": "2023-10-10T15:17:19.832Z", "__row_index": 1}