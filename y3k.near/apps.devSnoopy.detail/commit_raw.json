{"tx_hash": "2yFtCsveaB4X92q6QGVivVRpDhtvFVY9rKcLXWKNXS6y", "action_id_social": "9NmHg97fvGG5EkWBaizDgHG5N57ecSGdraqkCC9ysyhE-0-widget", "block_id": 107456471, "block_timestamp": "2023-12-08T18:36:33.597Z", "signer_id": "y3k.near", "widget_name": "apps.devSnoopy.detail", "source_code": "const SERIES_TITLE = props.SERIES_TITLE || \"Onchain African\";\n\nlet rawData = fetch(\n  \"https://raw.githubusercontent.com/NEAR-Analytics/NEAR-Social/main/data/output_snoopy_pipeline_benchmark.json\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nfunction createRegistry(data) {\n  const registry = {};\n\n  data.forEach((item) => {\n    // Destructure necessary fields from each item\n    const {\n      nft_receiver_id,\n      token_ids,\n      series_title,\n      mint_timestamp_utc,\n      originated_from_transaction_hash,\n    } = item;\n\n    // If this is the first NFT for this receiver, initialize an array\n    if (!registry[nft_receiver_id]) {\n      registry[nft_receiver_id] = [];\n    }\n\n    // Add this NFT's info to the receiver's array\n    registry[nft_receiver_id].push({\n      token_ids,\n      series_title,\n      mint_timestamp_utc,\n      originated_from_transaction_hash,\n    });\n  });\n\n  return registry;\n}\n\nfunction transformDataToDesiredFormat(registry) {\n  let transformedData = [];\n\n  Object.entries(registry).forEach(([key, items]) => {\n    items.forEach((item) => {\n      // Create a new object for each item\n      let transformedEntry = {};\n\n      // Copy all key-value pairs from the original item to the new object\n      Object.keys(item).forEach((itemKey) => {\n        transformedEntry[itemKey] = item[itemKey];\n      });\n\n      // Optionally, add or transform any additional keys as needed\n      transformedEntry[\"address\"] = key; // Example of adding a new key\n\n      transformedData.push(transformedEntry);\n    });\n  });\n\n  return transformedData;\n}\n\nconst rawdataRegistry = createRegistry(JSON.parse(rawData.body).data);\n\nfunction filterDataBySeriesTitle(data, filterTitle) {\n  // Filter data to only include items with the specified series_title\n  const filteredData = data.filter((item) => item.series_title === filterTitle);\n\n  return filteredData;\n}\n\nconst nonAggData = transformDataToDesiredFormat(rawdataRegistry);\n\nconst tData = filterDataBySeriesTitle(nonAggData, SERIES_TITLE);\n\nfunction generateDynamicTableHeaders(tableData, thStyle) {\n  // Check if tableData is an array and not empty\n  if (!Array.isArray(tableData) || tableData.length === 0) {\n    return null;\n  }\n\n  // Ensure the first element is an object\n  const firstItem = tableData[0];\n  if (typeof firstItem !== \"object\" || firstItem === null) {\n    return null;\n  }\n\n  // Extract keys from the first object in the data array as column names\n  const columnNames = Object.keys(firstItem);\n  console.log(columnNames);\n\n  return columnNames.map((columnName, index) => (\n    <th key={index} style={thStyle}>\n      {columnName.replace(/_/g, \" \")}\n    </th>\n  ));\n}\n\nconst tableStyle = {\n  borderCollapse: \"collapse\",\n  width: \"100%\",\n  borderRadius: \"0.25rem\",\n  overflow: \"hidden\",\n};\n\nconst thStyle = {\n  backgroundColor: \"#000000\", // Black background\n  color: \"#FFFFFF\", // White text\n  padding: \"8px\",\n  textAlign: \"left\",\n  borderBottom: \"1px solid #e5e7eb\",\n};\n\nconst tdStyle = {\n  padding: \"8px\",\n  textAlign: \"left\",\n  borderBottom: \"1px solid #e5e7eb\",\n};\n\n// Function to alternate row colors\nconst getRowStyle = (index) => ({\n  backgroundColor: index % 2 === 0 ? \"#f2f2f2\" : \"#e5e7eb\", // Alternating colors\n});\n\n// Assume State is a global object with init and update methods\nState.init({\n  currentPage: 1,\n  rowsPerPage: 10, // You can change this as needed.\n  data: tData, // tData is your filtered or full dataset\n});\n\nfunction getPaginatedData() {\n  const currentPage = state.currentPage;\n  const rowsPerPage = state.rowsPerPage;\n  const startIndex = (currentPage - 1) * rowsPerPage;\n  const endIndex = startIndex + rowsPerPage;\n  return state.data.slice(startIndex, endIndex);\n}\n\nfunction updatePagination(newPage) {\n  const totalPages = Math.ceil(state.data.length / state.rowsPerPage);\n  // Ensure newPage is within the page limits\n  if (newPage >= 1 && newPage <= totalPages) {\n    State.update({ currentPage: newPage });\n  }\n}\n\n// Use these functions in the onclick handlers for your Previous and Next buttons\nfunction goToPrevPage() {\n  const currentPage = state.currentPage;\n  if (currentPage > 1) {\n    updatePagination(currentPage - 1);\n  }\n}\n\nfunction goToNextPage() {\n  const currentPage = state.currentPage;\n  const totalPages = Math.ceil(state.data.length / state.rowsPerPage);\n  if (currentPage < totalPages) {\n    updatePagination(currentPage + 1);\n  }\n}\n\nconst paginatedData = getPaginatedData();\n\nreturn (\n  <div>\n    <Widget src=\"y3k.near/widget/apps.devSnoopy.menu\" props={{}} />\n    <div class=\"container my-5\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2 class=\"text-center mb-4\">{SERIES_TITLE} Event</h2>\n        </div>\n      </div>\n      <div class=\"row text-center\">\n        <div class=\"col-md-6 mb-6\">\n          <div class=\"\">\n            <div class=\"card-body\">\n              <h3 class=\"card-title\">\ud83c\udf1f New Account Ratio</h3>\n              <Widget\n                src=\"y3k.near/widget/apps.devSnoopy.components.drawChart\"\n                props={{ SERIES_TITLE: SERIES_TITLE }}\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6 mb-6\">\n          <div class=\"\">\n            <div class=\"card-body\">\n              <h3 class=\"card-title\">\ud83d\ude80 Benchmark: New Account Ratio</h3>\n\n              <Widget\n                src=\"y3k.near/widget/apps.devSnoopy.components.drawChart\"\n                props={{ SERIES_TITLE: \"BENCHMARK\" }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <table style={tableStyle}>\n      <thead>\n        <tr>\n          <th style={thStyle}>Address</th>\n          <th style={thStyle}>Mint Timestamp UTC</th>\n          <th style={thStyle}>Token IDs</th>\n        </tr>\n      </thead>\n      <tbody>\n        {paginatedData.map((item, index) => (\n          <tr key={item.address} style={getRowStyle(index)}>\n            <td style={tdStyle}>{item.address}</td>\n            <td style={tdStyle}>{item.mint_timestamp_utc}</td>\n            <td style={tdStyle}>{item.token_ids}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n    <div className=\"text-center mt-4 bg-gray-800 p-4 rounded\">\n      <button\n        onClick={goToPrevPage()}\n        className=\"px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 active:bg-gray-500\"\n      >\n        Previous\n      </button>\n      <span className=\"mx-2 text-white\">\n        Page {state.currentPage} of{\" \"}\n        {Math.ceil(state.data.length / state.rowsPerPage)}\n      </span>\n      <button\n        onClick={goToNextPage()}\n        className=\"px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 active:bg-gray-500\"\n      >\n        Next\n      </button>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/apps.devSnoopy.detail", "fact_widget_deployments_id": "0d61f39d556da2abd2b3adda31269d66", "inserted_timestamp": "2023-12-08T20:35:51.939Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 4}