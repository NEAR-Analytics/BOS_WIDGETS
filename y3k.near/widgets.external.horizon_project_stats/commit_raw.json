{"tx_hash": "9eKseqbkN7Y9xuMwpp7zHmqbHqfvWA7xThPiEVL7qgxq", "action_id_social": "7KkMqgbB3ghknBVaWcmFwqDBb4UdDtzon7oPZXj7rXAr-0-widget", "block_id": 98495433, "block_timestamp": "2023-08-10T13:51:07.361Z", "signer_id": "y3k.near", "widget_name": "widgets.external.horizon_project_stats", "source_code": "const initialState = {\n  selectedMetric: props.selectedMetric || \"MAU\",\n  processedData: processedData,\n  metric_period: \"Monthly\",\n  project_name: props.project_name || \"social.near\",\n};\n\nstate = State.init(initialState);\n\nconst stateJSON = JSON.stringify(state);\n\nconst generateIframeCode = (stateJSON) => `\n<script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n\n<canvas id=\"myChart\" style=\"position: relative; height:80vh; width:80vw\"></canvas>\n\n<script>\n\n\n\n\n\nconst initialState = JSON.parse('${stateJSON}');\n\n\n\n\nconst colorGenerator = () => {\n  const colors = [\n    \"rgb(255, 99, 132)\",\n    \"rgb(75, 192, 192)\",\n    \"rgb(153, 102, 255)\",\n    \"rgb(255, 159, 64)\",\n    \"rgb(54, 162, 235)\",\n    \"rgb(201, 203, 207)\",\n    \"rgb(255, 205, 86)\",\n    \"rgb(255, 99, 71)\",\n    \"rgb(147, 112, 219)\",\n    \"rgb(0, 128, 128)\",\n    \"rgb(100, 149, 237)\",\n    \"rgb(127, 255, 0)\",\n  ];\n\n  let index = 0;\n\n  return () => {\n    if (index >= colors.length) {\n      index = 0;\n    }\n\n    return colors[index++];\n  };\n};\n\nconst getBackgroundColor = colorGenerator();\n\nfunction filterByProjectName(arr, project_name) {\n  return arr.filter((obj) => obj.PROJECT_NAME === project_name);\n}\n\nfunction sortByActivityDate(arr) {\n  return arr.sort(\n    (a, b) => new Date(a.ACTIVITY_DATE) - new Date(b.ACTIVITY_DATE)\n  );\n}\n\n\nfunction parseUTCDate(dateString) {\n  const [year, month, day] = dateString\n    .split(\"-\")\n    .map((str) => parseInt(str, 10));\n  // Subtract 1 from the month, as JavaScript months are zero-based\n  const utcTimestamp = Date.UTC(year, month - 1, day);\n  return new Date(utcTimestamp);\n}\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\n\n\nfunction updateProcessedData(filteredSortedData, selectedMetric) {\n  const processedData = [];\n\n  filteredSortedData.forEach((datum) => {\n    if (!datum.ACTIVITY_DATE) {\n      return;\n    }\n\n    const activity_date = parseUTCDate(datum.ACTIVITY_DATE);\n\n    const month =\n      months[\n        parseInt(activity_date.toISOString().slice(0, 10).split(\"-\")[1]) - 1\n      ];\n\n    let monthData = processedData.find((data) => data.label === month);\n\n    if (!monthData) {\n      monthData = {\n        label: month,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      };\n      processedData.push(monthData);\n    }\n\n    monthData.data[activity_date.toISOString().slice(0, 10)] =\n      datum[selectedMetric];\n  });\n\n  return processedData;\n}\n\n\n\n\nasync function fetchData() {\n\n  let response = await fetch(\n  \"https://api.flipsidecrypto.com/api/v2/queries/199c1d8b-b26e-4155-b578-36515f75a57e/data/latest\",\n    {\n        subscribe: true,\n        method: \"GET\",\n        headers: {\n        Accept: \"*/*\",\n        },\n    }\n    );\n  \nlet data = await response.json();\nconst filteredData = filterByProjectName(data, initialState.project_name) || [];\nconst filteredSortedData = sortByActivityDate(filteredData) || [];\n\n\n\n\nlet processedData = [];\n\ntry {\n  filteredSortedData.forEach((datum) => {\n    if (!datum.ACTIVITY_DATE) {\n      return;\n    }\n\n    const activity_date = parseUTCDate(datum.ACTIVITY_DATE);\n\n    const month =\n      months[\n        parseInt(activity_date.toISOString().slice(0, 10).split(\"-\")[1]) - 1\n      ];\n\n    let monthData = processedData.find((data) => data.label === month);\n\n    if (!monthData) {\n      monthData = {\n        label: month,\n        data: {},\n        backgroundColor: getBackgroundColor(),\n      };\n      processedData.push(monthData);\n    }\n\n    monthData.data[activity_date.toISOString().slice(0, 10)] = datum.MAU;\n  });\n} catch (err) {\n  console.log(err);\n}\n\n\n  let newProcessedData = updateProcessedData(\n    filteredSortedData,\n    initialState.selectedMetric\n  );\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n          labels: months,\n          datasets: newProcessedData\n      },\n      options: {\n  scales: {\n      y: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n          borderColor: \"rgb(240,255,240)\",\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n      x: {\n        stacked: true,\n        grid: {\n          color: \"rgba(255, 0, 0, 0.2)\", // This will change the gridline color\n        },\n        ticks: {\n          color: \"rgb(0,0,0)\", // This will change the axis text label color\n        },\n      },\n    },\n      }\n  });\n}\n\n\nfetchData();\n</script>\n\n`;\n\nreturn (\n  <div>\n    <h1>{state.project_name}</h1>\n\n    <iframe\n      iframeResizer\n      className=\"w-100\"\n      style={{ height: \"300px\" }}\n      srcDoc={generateIframeCode(stateJSON)} // Use the function to generate the code\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/widgets.external.horizon_project_stats", "fact_widget_deployments_id": "bd4c1c14790cf1a936e0ea4fc5dc6054", "inserted_timestamp": "2023-08-10T14:47:29.345Z", "modified_timestamp": "2023-08-10T14:47:29.345Z", "__row_index": 6}