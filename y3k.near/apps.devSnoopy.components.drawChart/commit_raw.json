{"tx_hash": "BJhfgUX8JXNCBqaNkRmme6Gkjf8HcFFpBm2rgxf7Lr4u", "action_id_social": "5BXG2axmtdNrdtbNqA43oAX415Je2srZcHDFb4h7KDV9-0-widget", "block_id": 107456425, "block_timestamp": "2023-12-08T18:35:45.638Z", "signer_id": "y3k.near", "widget_name": "apps.devSnoopy.components.drawChart", "source_code": "const SERIES_TITLE = props.SERIES_TITLE || \"Onchain African\";\n\nlet rawData = fetch(\n  \"https://raw.githubusercontent.com/NEAR-Analytics/NEAR-Social/main/data/output_snoopy_pipeline_benchmark.json\",\n  {\n    subscribe: true,\n    method: \"GET\",\n    headers: {\n      Accept: \"*/*\",\n    },\n  }\n);\n\nconst parsedData = JSON.parse(rawData.body);\n\n// Filtering to get series where is_new_account is false\nlet jsObject = parsedData.data.filter(\n  (item) => item.series_title === SERIES_TITLE\n);\n\nif (SERIES_TITLE == \"BENCHMARK\") {\n  // Filtering to get series where is_new_account is false\n  jsObject = parsedData.data;\n}\n\n// console.log(\"jsObject\", jsObject);\n\n// const jsObject = JSON.parse(rawData.body);\n\n// // Filtering to get series where is_new_account is true\n// const seriesNewAccount = jsObject.data.filter(\n//   (item) => item.is_new_account === true\n// );\n\n// // Filtering to get series where is_new_account is false\n// const seriesExistingAccount = jsObject.data.filter(\n//   (item) => item.is_new_account === false\n// );\n// console.log(\"Series with New Accounts:\", seriesNewAccount);\n// console.log(\"Series with Existing Accounts:\", seriesExistingAccount);\n\n// Calculate total accounts\nconst totalAccounts = jsObject.length;\n\n// Function to aggregate the data and calculate percentage\nconst aggregateData = (data, is_new_account) => {\n  const count = data.filter(\n    (item) => item.is_new_account === is_new_account\n  ).length;\n  const percentage =\n    totalAccounts > 0 ? ((count / totalAccounts) * 100).toFixed(2) : 0;\n  return [count, parseFloat(percentage)];\n};\n\n// Creating the series\nconst series = [\n  {\n    data: [aggregateData(jsObject, true)[1]], // percentage of new accounts\n    type: \"bar\",\n    stack: \"a\",\n    name: \"New Accounts\",\n\n    label: {\n      show: true,\n      formatter: \"{c}%\",\n    },\n  },\n  {\n    data: [aggregateData(jsObject, false)[1]], // percentage of existing accounts\n    type: \"bar\",\n    stack: \"a\",\n    name: \"Existing Accounts\",\n\n    label: {\n      show: true,\n      formatter: \"{c}%\",\n    },\n  },\n];\n\nconst stackInfo = {};\nfor (let i = 0; i < series[0].data.length; ++i) {\n  for (let j = 0; j < series.length; ++j) {\n    const stackName = series[j].stack;\n    if (!stackName) {\n      continue;\n    }\n    if (!stackInfo[stackName]) {\n      stackInfo[stackName] = {\n        stackStart: [],\n        stackEnd: [],\n      };\n    }\n    const info = stackInfo[stackName];\n    const data = series[j].data[i];\n    if (data && data !== \"-\") {\n      if (info.stackStart[i] == null) {\n        info.stackStart[i] = j;\n      }\n      info.stackEnd[i] = j;\n    }\n  }\n}\nfor (let i = 0; i < series.length; ++i) {\n  const data = series[i].data;\n  const info = stackInfo[series[i].stack];\n  for (let j = 0; j < series[i].data.length; ++j) {\n    // const isStart = info.stackStart[j] === i;\n    const isEnd = info.stackEnd[j] === i;\n    const topBorder = isEnd ? 20 : 0;\n    const bottomBorder = 0;\n    data[j] = {\n      value: data[j],\n      itemStyle: {\n        borderRadius: [topBorder, topBorder, bottomBorder, bottomBorder],\n      },\n    };\n  }\n}\n\nconst fetchResult = fetch(\n  \"https://storage.googleapis.com/databricks-near-query-runner/output/total_fast_auth_by_date.json\"\n);\n\nif (!fetchResult) {\n  return \"Loading data...\";\n}\nif (!fetchResult.ok) {\n  return \"Failed to fetch data\";\n}\n\nconst parsed = JSON.parse(fetchResult.body);\nconst dataset = parsed.data\n  .sort((a, b) => a.start_of_the_week - b.start_of_the_week)\n  .map((row) => ({\n    \"Total Fast Auth Accounts\": row.total_fast_auth_acounts,\n    Date: new Date(row.start_of_the_week).toISOString().substring(0, 10),\n  }));\n\nconst definition = {\n  legend: {},\n\n  grid: {\n    containLabel: true,\n  },\n  tooltip: {\n    trigger: \"axis\",\n    axisPointer: {\n      // Use axis to trigger tooltip\n      type: \"shadow\", // 'shadow' as default; can also be 'line' or 'shadow'\n    },\n  },\n  xAxis: {\n    type: \"category\",\n    data: [SERIES_TITLE],\n  },\n  yAxis: {\n    type: \"value\",\n  },\n  series: series,\n};\n\nreturn (\n  <div>\n    <Widget src={`nearpavel.near/widget/EChart`} props={{ definition }} />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/y3k.near/widget/apps.devSnoopy.components.drawChart", "fact_widget_deployments_id": "40102c73f3d5f86a50467b6227afcf44", "inserted_timestamp": "2023-12-08T20:34:42.050Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 3}