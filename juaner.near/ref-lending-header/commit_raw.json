{"tx_hash": "BeXLWFFqHvm1Uig1K3bqiXU1ELaWp7Up7BEKcQdsHpwu", "action_id_social": "ApKwFgfvBdxoGV6UV75SUUtZgF9E6Hz3pm6wKFMYrxN4-0-widget", "block_id": 99523023, "block_timestamp": "2023-08-24T04:18:25.788Z", "signer_id": "juaner.near", "widget_name": "ref-lending-header", "source_code": "const accountId = context.accountId;\n\nState.init({\n  type: accountId ? \"yours\" : \"market\",\n});\n\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value || 0).div(new Big(10).pow(decimals || 0)).toFixed(fixed);\n};\n// get all assets data from burrow contracts\n\nconst {\n  assets,\n  rewards,\n  account,\n  balances,\n  selectedTokenId,\n  selectedTokenMeta,\n  type,\n  showModal,\n} = state;\n\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\nconst rewardsMap = rewards\n  ? rewards.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nconst assetsMap = assets\n  ? assets.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nconst onLoad = (data) => {\n  State.update(data);\n};\n// get unclaimed rewards\nconst unclaimedRewardsMap = account\n  ? account.farms?.reduce((prev, curr) => {\n      for (const reward of curr.rewards) {\n        const t = prev[reward.reward_token_id];\n        if (t) {\n          prev[reward.reward_token_id] = Big(t)\n            .plus(Big(reward.unclaimed_amount))\n            .toFixed();\n        } else {\n          prev[reward.reward_token_id] = Big(reward.unclaimed_amount).toFixed();\n        }\n      }\n      return prev;\n    }, {})\n  : {};\nlet unclaimedRewards$ = Big(0);\nconst unclaimedRewardsIcons = Object.keys(unclaimedRewardsMap).map((id) => {\n  const asset = assets.find((a) => a.token_id === id);\n  const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const unclaimed = shrinkToken(unclaimedRewardsMap[id], decimals);\n  unclaimedRewards$ = unclaimedRewards$.plus(\n    Big(unclaimed).mul(asset.price.usd || 0)\n  );\n  return {\n    id,\n    icon: asset.metadata.icon,\n  };\n});\n// get net apy\nconst getNetAPY = (assets, account) => {\n  const extraDaily = getExtraDaily(assets, account);\n  const [gainCollateral, totalCollateral] = getGains(\n    account,\n    assets,\n    \"collateral\"\n  );\n  const [gainSupplied, totalSupplied] = getGains(account, assets, \"supplied\");\n  const [gainBorrowed] = getGains(account, assets, \"borrowed\");\n\n  const gainExtra = extraDaily * 365;\n\n  const netGains = gainCollateral + gainSupplied + gainExtra - gainBorrowed;\n  const netTotals = totalCollateral + totalSupplied;\n  const netAPY = (netGains / netTotals) * 100;\n\n  return netAPY || 0;\n};\nfunction getExtraDaily(assets, account) {\n  const farms = account.farms.filter(\n    (farm) => !!(farm.farm_id[\"Supplied\"] || farm.farm_id[\"Borrowed\"])\n  );\n  const farmsRewards = farms\n    .map((farm) => {\n      const token_id = farm.farm_id.Borrowed || farm.farm_id.Supplied;\n      const asset = assets.find((asset) => asset.token_id == token_id);\n      const assetDecimals =\n        asset.metadata.decimals + asset.config.extra_decimals;\n      const rewards = farm.rewards.map((reward) => {\n        const { reward_token_id, boosted_shares, asset_farm_reward } = reward;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const rewardAssetDecimals =\n          assetReward.metadata.decimals + assetReward.config.extra_decimals;\n        const boostedShares = Number(\n          shrinkToken(boosted_shares, assetDecimals)\n        );\n        const totalBoostedShares = Number(\n          shrinkToken(asset_farm_reward.boosted_shares, assetDecimals)\n        );\n        const totalRewardsPerDay = Number(\n          shrinkToken(asset_farm_reward.reward_per_day, rewardAssetDecimals)\n        );\n        const dailyAmount =\n          (boostedShares / totalBoostedShares) * totalRewardsPerDay;\n        return { dailyAmount, reward_token_id, token_id };\n      });\n      return rewards;\n    })\n    .flat();\n  const extraDaily$ = farmsRewards.reduce((acc, cur) => {\n    const { dailyAmount, reward_token_id } = cur;\n    const assetReward = assets.find(\n      (asset) => asset.token_id == reward_token_id\n    );\n    const price = assetReward.price.usd || 0;\n    return acc + dailyAmount * price;\n  }, 0);\n  return extraDaily$ || 0;\n}\nfunction getGains(account, assets, source) {\n  return account[source]\n    .map((accountAsset) => {\n      const { token_id, balance, apr } = accountAsset;\n      const asset = assets.find((asset) => asset.token_id == token_id);\n      const netTvlMultiplier = asset.config.net_tvl_multiplier / 10000;\n      const balanceUSD = toUsd(balance, asset);\n      return [balanceUSD * (withNetTvlMultiplier ? netTvlMultiplier : 1), apr];\n    })\n    .reduce(\n      ([gain, sum], [balance, apr]) => [gain + balance * apr, sum + balance],\n      [0, 0]\n    );\n}\nconst toUsd = (balance, asset) =>\n  asset?.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\nlet apyNetValue;\nif (assets && account && rewards) {\n  const netAPY = getNetAPY(assets, account);\n  const r = rewards[0].apyRewardTvl || 0;\n  apyNetValue = Big(netAPY || 0)\n    .plus(r)\n    .toFixed(2);\n}\n\nconst handleClaimAll = () => {\n  Near.call({\n    contractName: \"contract.main.burrow.near\",\n    methodName: \"account_farm_claim_all\",\n  });\n};\n// get portfolio borrowed assets\nfunction getSuppliedUSD(totalSuppliedUSD) {\n  let yourSuppliedUSD;\n  const big_total_supplied_usd = Big(totalSuppliedUSD || 0);\n  if (big_total_supplied_usd.gt(0)) {\n    yourSuppliedUSD = big_total_supplied_usd.lt(0.01)\n      ? \"<$0.01\"\n      : \"$\" + big_total_supplied_usd.toFixed(2);\n  }\n  return yourSuppliedUSD;\n}\n\nfunction getBurrowedUSD(totalBurrowedUSD) {\n  let yourBurrowedUSD;\n\n  const big_total_burrowed_usd = Big(totalBurrowedUSD || 0);\n  if (big_total_burrowed_usd.gt(0)) {\n    yourBurrowedUSD = big_total_burrowed_usd.lt(0.01)\n      ? \"<$0.01\"\n      : \"$\" + big_total_burrowed_usd.toFixed(2);\n  }\n  return yourBurrowedUSD;\n}\n\nfunction closeModal() {\n  State.update({\n    showModal: false,\n  });\n}\n\nfunction toggleType(type) {\n  State.update({\n    type,\n  });\n}\n\nreturn (\n  <>\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* Header */}\n    <div class=\"header pb-2\">\n      <div class=\"title\">Lending</div>\n      <div class=\"switch\">\n        <div\n          class={`switch_item ${type === \"yours\" ? \"active\" : \"\"}`}\n          onClick={() => toggleType(\"yours\")}\n        >\n          Yours\n        </div>\n        <div\n          class={`switch_item ${type === \"market\" ? \"active\" : \"\"}`}\n          onClick={() => toggleType(\"market\")}\n        >\n          Market\n        </div>\n      </div>\n    </div>\n\n    {/* Yours */}\n    {state.type === \"yours\" && (\n      <div class=\"flex\">\n        {!accountId ? null : (\n          <div class=\"block\">\n            <label class=\"t\">Net APY</label>\n            <span class=\"v\">{apyNetValue || \"0\"}%</span>\n          </div>\n        )}\n        <div class=\"block\">\n          <label class=\"t\">Supplied</label>\n          <span class=\"v\">\n            {getSuppliedUSD(props.total_supplied_usd) || \"$0\"}\n          </span>\n        </div>\n        <div class=\"block\">\n          <label class=\"t\">Borrowed</label>\n          <span class=\"v\">\n            {getBurrowedUSD(props.total_burrowed_usd) || \"$0\"}\n          </span>\n        </div>\n        <div class=\"block\">\n          <label class=\"t\">Health Factor</label>\n          <span class=\"v\" style={{ color: \"#00FFA3\" }}>\n            <Widget src=\"juaner.near/widget/ref-burrow-healthFactor\"></Widget>\n          </span>\n        </div>\n        <div class=\"block noBorder\">\n          <label class=\"t\">Unclaimed Rewards</label>\n          <div>\n            <div class=\"flex_center\">\n              {unclaimedRewardsIcons.length ? (\n                <>\n                  <div class=\"flex_center\">\n                    <span class=\"v mr_10\">${unclaimedRewards$.toFixed(2)}</span>\n                    {unclaimedRewardsIcons.map((reward) => (\n                      <img src={reward.icon} class=\"rewardIcon\"></img>\n                    ))}\n                  </div>\n                  <div class=\"claim_button\" onClick={handleClaimAll}>\n                    Claim\n                  </div>\n                </>\n              ) : (\n                <span class=\"v mr_10\">$0</span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    )}\n    {/* Market */}\n    {state.type === \"market\" && (\n      <div class=\"flex\">\n        <div class=\"block\">\n          <label class=\"t\">Total Supplied</label>\n          <span class=\"v\">\n            ${state.supplied ? parseInt(state.supplied).toLocaleString() : \"0\"}\n          </span>\n        </div>\n        <div class=\"block\">\n          <label class=\"t\">Total Borrowed</label>\n          <span class=\"v\">\n            ${state.borrowed ? parseInt(state.borrowed).toLocaleString() : \"0\"}\n          </span>\n        </div>\n        <div class=\"block\">\n          <label class=\"t\">Available Liquidity</label>\n          <span class=\"v\">\n            $\n            {parseInt(\n              Big(state.supplied || 0)\n                .minus(state.borrowed || 0)\n                .toNumber()\n            ).toLocaleString() || \"0\"}\n          </span>\n        </div>\n        <div class=\"block noBorder\">\n          <label class=\"t\">Daily Rewards</label>\n          <span class=\"v\">${state.dailyRewards || \"0\"}</span>\n        </div>\n      </div>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-lending-header", "fact_widget_deployments_id": "f04009f6e62c46e21f49b8439bd869e2", "inserted_timestamp": "2023-08-24T09:50:09.261Z", "modified_timestamp": "2023-08-24T09:50:09.261Z", "__row_index": 0}