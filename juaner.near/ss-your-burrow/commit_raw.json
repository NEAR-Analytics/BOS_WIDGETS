{"tx_hash": "y2VRuwVhz2adcZuZjpScMzqtDhfryzbBX4TKePnJ1zg", "action_id_social": "DM4P9Y4syKisBXfMZo1nrKyMv3xD7CjvSdzbY7skX7Ub-0-widget", "block_id": 100578962, "block_timestamp": "2023-09-07T09:01:48.035Z", "signer_id": "juaner.near", "widget_name": "ss-your-burrow", "source_code": "const Container = styled.div`\n  .tokenIcon {\n    width: 26px;\n    height: 26px;\n    border-radius: 100px;\n    margin-right: 4px;\n  }\n  .rewardIcon {\n    width: 16px;\n    height: 16px;\n    border-radius: 100px;\n  }\n  .flex-end {\n    display: flex;\n    align-items: center;\n    justify-content: end;\n    height: 50px;\n  }\n  .assets_table {\n    display: block;\n    width: 100%;\n    tr {\n      color: #7c7f96;\n      border: none;\n      height: 50px;\n    }\n    th,\n    td {\n      border: none;\n      font-size: 14px;\n    }\n    td {\n      color: #fff;\n    }\n    th:first-child,\n    td:first-child {\n      padding-left: 20px;\n      min-width: 160px;\n    }\n    th:nth-child(2) {\n      padding-right: 10px;\n      min-width: 120px;\n    }\n    tbody {\n      tr {\n        line-height: 40px;\n      }\n      .table_handlers div {\n        background-color: rgba(0, 255, 163, 0.6);\n        transition: 0.5s;\n      }\n      tr:hover {\n        background-color: #373a53;\n        border-radius: 12px;\n        .table_handlers div {\n          background-color: #00ffa3;\n        }\n      }\n    }\n    .table_handlers {\n      display: flex;\n      justify-content: end;\n      margin-top: 12px;\n      padding-right: 10px;\n    }\n  }\n  .burrow_title {\n    font-size: 18px;\n    color: #fff;\n    padding-left: 20px;\n  }\n  .double_lines {\n    line-height: 16px;\n    margin-top: 4px;\n  }\n  @media (max-width: 900px) {\n    .assets_table {\n      display: none;\n    }\n  }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\n\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\nState.init({ tableData: [] });\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals || 0)).toFixed(fixed);\n};\nlet total_burrowed_usd = Big(0);\nfunction getExtraApy(asset, account, assets) {\n  const asset_token_id = asset.token_id;\n  const borrowFarm = asset.farms.find(\n    (farm) =>\n      farm[\"farm_id\"][\"Borrowed\"] && Object.keys(farm.rewards || {}).length\n  );\n  if (!borrowFarm) return 0;\n  const assetDecimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const totalBorrowUSD = toUsd(asset.borrowed.balance, asset);\n  const rewards = borrowFarm.rewards;\n  let userFarm;\n  if (account) {\n    userFarm = account.farms.find((farm) => {\n      return (\n        farm[\"farm_id\"][\"Borrowed\"] == asset.token_id && farm.rewards.length\n      );\n    });\n  }\n  if (!userFarm) {\n    return Object.keys(rewards)\n      .map((reward_token_id) => {\n        const farmData = rewards[reward_token_id];\n        const { reward_per_day, boosted_shares } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const totalRewardsUsd = toUsd(\n          B(reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        if (B(totalBorrowUSD).eq(0)) return 0;\n        const apy = B(totalRewardsUsd).div(totalBorrowUSD).mul(100).toFixed();\n        return apy;\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  } else {\n    return userFarm.rewards\n      .map((farmData) => {\n        const { reward_token_id, boosted_shares, asset_farm_reward } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const borrowedShares = Number(\n          shrinkToken(boosted_shares || 0, assetDecimals)\n        );\n        const totalBoostedShares = Number(\n          shrinkToken(asset_farm_reward.boosted_shares, assetDecimals)\n        );\n        const boosterLogBase = Number(\n          shrinkToken(\n            asset_farm_reward.booster_log_base,\n            config.booster_decimals\n          )\n        );\n        const xBRRRAmount = Number(\n          shrinkToken(\n            account.booster_staking[\"x_booster_amount\"] || 0,\n            config.booster_decimals\n          )\n        );\n        const log = Math.log(xBRRRAmount) / Math.log(boosterLogBase);\n        const multiplier = log >= 0 ? 1 + log : 1;\n        const userBorrowedBalance =\n          account.borrowed.find((asset) => asset.token_id == asset_token_id)\n            .balance || 0;\n        const totalUserAssetUSD = toUsd(userBorrowedBalance, asset);\n        const totalRewardsUsd = toUsd(\n          B(asset_farm_reward.reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        return B(totalRewardsUsd)\n          .mul(borrowedShares / totalBoostedShares)\n          .mul(multiplier)\n          .div(totalUserAssetUSD)\n          .mul(100)\n          .toFixed();\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  }\n}\nconst toUsd = (balance, asset) =>\n  asset.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\nconst {\n  assets,\n  rewards,\n  account,\n  balances,\n  showModal,\n  selectedTokenId,\n  selectedTokenMeta,\n  wnearbase64,\n  closeButtonBase64,\n} = state;\nconst { onLoadState } = props;\nfunction changeSelectedToken(asset, type) {\n  const { token_id, metadata } = asset;\n  State.update({\n    selectedTokenId: token_id,\n    selectedTokenMeta: metadata,\n    type,\n    showModal: true,\n  });\n}\nfunction closeModal() {\n  State.update({\n    showModal: false,\n  });\n}\nfunction getPortfolioRewards(type, token_id, data) {\n  const { account, assets } = data;\n  const targetFarm = account.farms.find((farm) => {\n    return farm[\"farm_id\"][type] == token_id;\n  });\n  if (targetFarm) {\n    const asset = assets.find((a) => a.token_id == token_id);\n    const rewards = targetFarm[\"rewards\"] || [];\n    const totalRewards =\n      type == \"Supplied\" ? asset.farms[0].rewards : asset.farms[1].rewards;\n    const result = rewards.map((reward) => {\n      const { reward_token_id } = reward;\n      const assetDecimals =\n        asset.metadata.decimals + asset.config.extra_decimals;\n      const rewardAsset = assets.find((a) => a.token_id == reward_token_id);\n      const rewardTokenDecimals =\n        rewardAsset.metadata.decimals + rewardAsset.config.extra_decimals;\n\n      const boostedShares = Number(\n        shrinkToken(reward.boosted_shares, assetDecimals)\n      );\n      const totalBoostedShares = Number(\n        shrinkToken(totalRewards[reward_token_id].boosted_shares, assetDecimals)\n      );\n      const totalRewardsPerDay = Number(\n        shrinkToken(\n          totalRewards[reward_token_id].reward_per_day,\n          rewardTokenDecimals\n        )\n      );\n      const rewardPerDay =\n        (boostedShares / totalBoostedShares) * totalRewardsPerDay || 0;\n      return { rewardPerDay, metadata: rewardAsset.metadata, rewardAsset };\n    });\n    return result;\n  }\n  return [];\n}\nconst formatAssets = (data) => {\n  const { account, rewards, assets } = data;\n  return account?.borrowed.map((borrowedAsset) => {\n    const asset = assets.find((a) => a.token_id === borrowedAsset.token_id);\n    const r = rewards.find((a) => a.token_id === asset.token_id);\n    const totalApy = r.apyBaseBorrow;\n    const extraApy = getExtraApy(asset, account, assets);\n    const apy = totalApy - extraApy;\n    const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n    const borrowed = Number(shrinkToken(borrowedAsset.balance, decimals));\n    const usd = borrowed * asset.price.usd;\n    total_burrowed_usd = total_burrowed_usd.plus(usd);\n    const rewardsList =\n      getPortfolioRewards(\"Borrowed\", borrowedAsset.token_id, data) || [];\n    return {\n      icon: asset.metadata.icon,\n      symbol: asset.metadata.symbol,\n      apy,\n      rewardsList,\n      borrowed,\n      usd,\n      token_id: asset.token_id,\n      asset,\n    };\n  });\n};\nconst onLoad = (data) => {\n  State.update(data);\n  // get market can deposit assets\n  if (data.assets?.length && data.rewards?.length && data.account) {\n    State.update({ tableData: formatAssets(data) });\n    onLoadState &&\n      onLoadState({\n        total_burrowed_usd: total_burrowed_usd.toFixed(),\n      });\n  }\n};\n\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\nconst formatValue = (v) => {\n  if (Big(v).eq(0)) return \"0\";\n  if (Big(v).lt(0.01)) return hasDollar ? \"<$0.01\" : \"<0.01\";\n  return Big(v).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n};\nconst renderAssets = (assets) =>\n  assets.map((item) => {\n    const { token_id, icon, symbol, apy, rewardsList, borrowed, usd, asset } =\n      item;\n    return (\n      <tr key={token_id}>\n        <td>\n          <img src={icon || wnearbase64} class=\"tokenIcon\"></img>\n          {symbol !== \"wNEAR\" ? symbol : \"NEAR\"}\n        </td>\n        <td>{toAPY(apy)}%</td>\n        <td>\n          {rewardsList.length == 0\n            ? \"-\"\n            : rewardsList.map((reward) => {\n                const { rewardPerDay, metadata, rewardAsset } = reward;\n                return (\n                  <div class=\"flex_center\">\n                    $\n                    {formatValue(\n                      Big(rewardPerDay || 0)\n                        .mul(rewardAsset?.price?.usd || 0)\n                        .toString(),\n                      true\n                    )}\n                    <img\n                      class=\"rewardIcon ml_5\"\n                      src={metadata.icon || wnearbase64}\n                    />\n                  </div>\n                );\n              })}\n        </td>\n        <td>\n          <div className=\"double_lines\">\n            <div>{formatValue(borrowed)}</div>\n            <div class=\"text_grey_color\">(${formatValue(usd, true)})</div>\n          </div>\n        </td>\n        <td class=\"table_handlers\">\n          <Widget\n            src=\"juaner.near/widget/ref-operation-button\"\n            props={{\n              clickEvent: () => {\n                changeSelectedToken(asset, \"burrow\");\n              },\n              buttonType: \"solid\",\n              actionName: \"Repay\",\n              hoverOn: true,\n            }}\n          />\n        </td>\n      </tr>\n    );\n  });\nconst renderMbAssets = (data, hasDollar) =>\n  data.map((item) => {\n    const { token_id, icon, symbol, apy, rewardsList, borrowed, usd, asset } =\n      item;\n    return (\n      <div className=\"mb_row\" key={token_id}>\n        <div className=\"mb_row_header\">\n          <div className=\"mb_row_token\">\n            <img src={icon || wnearbase64} class=\"tokenIcon\"></img>\n            {symbol !== \"wNEAR\" ? symbol : \"NEAR\"}\n          </div>\n          <div className=\"double_lines\">\n            <div>{formatValue(borrowed)}</div>\n            <div class=\"text_grey_color\">(${formatValue(usd, true)})</div>\n          </div>\n        </div>\n        <div className=\"mb_row_item\">\n          <div className=\"mb_row_label\">Borrow Apy</div>\n          <div className=\"mb_row_value\">{toAPY(totalApy)}%</div>\n        </div>\n        <div className=\"mb_row_item\">\n          <div className=\"mb_row_label\">Rewards</div>\n          <div className=\"mb_row_value\">\n            {rewardsList.length == 0\n              ? \"-\"\n              : rewardsList.map((reward) => {\n                  const { rewardPerDay, metadata, rewardAsset } = reward;\n                  return (\n                    <div class=\"flex_center\">\n                      $\n                      {formatValue(\n                        Big(rewardPerDay || 0)\n                          .mul(rewardAsset?.price?.usd || 0)\n                          .toString(),\n                        true\n                      )}\n                      <img\n                        class=\"rewardIcon ml_5\"\n                        src={metadata.icon || wnearbase64}\n                      />\n                    </div>\n                  );\n                })}\n          </div>\n        </div>\n        <div className=\"mb_row_actions\">\n          <div className=\"action_btn\">\n            <Widget\n              src=\"juaner.near/widget/ref-operation-button\"\n              props={{\n                clickEvent: () => {\n                  changeSelectedToken(asset, \"burrow\");\n                },\n                buttonType: \"solid\",\n                actionName: \"Repay\",\n                hoverOn: true,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  });\n\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nreturn (\n  <Container className=\"pt-3\">\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget src=\"juaner.near/widget/ref-icons\" props={{ getWnearIcon }} />\n    <div class=\"burrow_title\">You Borrowed</div>\n    <table class=\"assets_table click\">\n      <thead>\n        <tr>\n          <th scope=\"col\" width=\"20%\">\n            Assets\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"20%\">\n            Borrow APY\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"20%\">\n            Rewards\n          </th>\n          <th scope=\"col\" class=\"text-start\" width=\"15%\">\n            Borrowed\n          </th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n\n      {accountId && <tbody>{renderAssets(state.tableData)}</tbody>}\n    </table>\n    <div className=\"mb_table\">{renderMbAssets(state.tableData)}</div>\n    {/** modal */}\n    <Widget\n      src=\"juaner.near/widget/ref-market-burrow-repay\"\n      props={{ selectedTokenId, selectedTokenMeta, showModal, closeModal }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ss-your-burrow", "fact_widget_deployments_id": "0d7bc0679a2fc671a2cb221f50662ddc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}