{"tx_hash": "Div3g37fVfXLzCyvpeKTqsM8dy5W1T84NDdFpR2mBdFf", "action_id_social": "B4hqap2XfHadn5nQbjDxRbjw3xVzFVJx6BXjNk6hb6SP-0-widget", "block_id": 99521241, "block_timestamp": "2023-08-24T03:45:05.285Z", "signer_id": "juaner.near", "widget_name": "ref-market-burrow-assets", "source_code": "const Container = styled.div`\n  background-color: #25283a;\n  border-radius: 12px;\n  .template {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-left: 6px;\n  }\n  .assets_table {\n    width: 100%;\n    tr {\n      color: #7c7f96;\n      border: none;\n      height: 50px;\n    }\n    th,\n    td {\n      border: none;\n      font-size: 14px;\n    }\n    td {\n      color: #fff;\n    }\n    th:first-child,\n    td:first-child {\n      padding-left: 20px;\n      min-width: 160px;\n    }\n    th:nth-child(5) {\n      min-width: 120px;\n    }\n    tbody {\n      .table_handlers div {\n        background-color: rgba(0, 255, 163, 0.6);\n        transition: 0.5s;\n      }\n      tr:hover {\n        background-color: #373a53;\n        border-radius: 12px;\n        .table_handlers div {\n          background-color: #00ffa3;\n        }\n      }\n      tr:last-child td:first-child {\n        border-bottom-left-radius: 12px;\n      }\n      tr:last-child td:last-child {\n        border-bottom-right-radius: 12px;\n      }\n    }\n    .table_handlers {\n      display: flex;\n      justify-content: end;\n      align-items: center;\n      padding-right: 10px;\n    }\n  }\n\n  .tokenIcon {\n    width: 26px;\n    height: 26px;\n    border-radius: 100px;\n    margin-right: 8px;\n  }\n  .rewardIcon {\n    width: 16px;\n    height: 16px;\n    border-radius: 100px;\n  }\n  .text_red_color {\n    color: #ff6ba9;\n  }\n  .ml_4_ne {\n    margin-left: -4px;\n  }\n  .font-18 {\n    font-size: 18px;\n  }\n  .title {\n    padding-left: 20px;\n  }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\n// if (!accountId) {\n//   return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n// }\nlet MAX_RATIO = 10_000;\nlet BURROW_CONTRACT = \"contract.main.burrow.near\";\nlet B = Big();\nB.DP = 60; // set precision to 60 decimals\n\nState.init({ tableData: [] });\n\nconst toAPY = (v) => (v ? (Math.round(v * 100) / 100).toFixed(2) : 0);\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nconst shrinkToken = (value, decimals) => {\n  return B(value).div(B(10).pow(decimals || 0));\n};\n\nconst expandToken = (value, decimals) => {\n  return B(value).mul(B(10).pow(decimals || 0));\n};\n\nconst formatToken = (v) => Math.floor(v * 10_000) / 10_000;\n\nconst power = (x, y) => {\n  if (y === 0) {\n    return 1;\n  } else if (y % 2 === 0) {\n    return power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  } else {\n    return x * power(x, parseInt(y / 2)) * power(x, parseInt(y / 2));\n  }\n};\nconst nFormat = (num, digits) => {\n  const lookup = [\n    { value: 1, symbol: \"\" },\n    { value: 1e3, symbol: \"K\" },\n    { value: 1e6, symbol: \"M\" },\n  ];\n  var item = lookup\n    .slice()\n    .reverse()\n    .find((item) => num >= item.value);\n  return item ? (num / item.value).toFixed(digits) + item.symbol : \"0\";\n};\nconst {\n  rewards,\n  account,\n  balances,\n  selectedTokenId,\n  amount,\n  hasError,\n  assets,\n  tabName,\n  showModal,\n  wnearbase64,\n  closeButtonBase64,\n} = state;\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\n/** base tool end */\nconst config = Near.view(BURROW_CONTRACT, \"get_config\");\nconst formatAssets = (data) => {\n  const rewardsMap = data.rewards\n    ? data.rewards.reduce((acc, cur) => {\n        return {\n          ...acc,\n          [cur.token_id]: cur,\n        };\n      }, {})\n    : {};\n  const assetsMap = data.assets\n    ? data.assets.reduce((acc, cur) => {\n        return {\n          ...acc,\n          [cur.token_id]: cur,\n        };\n      }, {})\n    : {};\n  State.update({\n    activeArrow: \"up-liquidity\",\n  });\n  return data.assets\n    .filter(\n      (a) => a.config.can_borrow && ![\"meta-token.near\"].includes(a.token_id)\n    )\n    .map((asset) => {\n      const { token_id, metadata, price, config } = asset;\n      const r = data.rewards.find((a) => a.token_id === asset.token_id);\n      const borrowApy = r.apyBaseBorrow;\n      const extraApy = getExtraApy(asset, data.account, data.assets);\n      const apy = borrowApy - extraApy;\n      const token_usd_price = price && price.usd;\n      const liquidity = B(asset.availableLiquidity || 0)\n        .mul(token_usd_price || 0)\n        .toNumber();\n      const { volatility_ratio } = config;\n\n      const hasRewards = rewardsMap[token_id] && assetsMap[token_id];\n      const rewardMap = hasRewards && rewardsMap[token_id];\n      const rewardTokens = rewardMap && rewardMap.rewardTokensBorrow;\n      return {\n        icon: metadata.icon,\n        symbol: metadata.symbol,\n        apy,\n        rewardTokens,\n        volatility_ratio,\n        token_id,\n        liquidity,\n      };\n    })\n    .sort((a, b) => b.liquidity - a.liquidity);\n};\nconst onLoad = (data) => {\n  console.log(\"onLoad\");\n  State.update(data);\n  // get market can deposit assets\n  if (data.assets && data.assets.length) {\n    State.update({ tableData: formatAssets(data) });\n  }\n};\nconst rewardsMap = rewards\n  ? rewards.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nconst assetsMap = assets\n  ? assets.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.token_id]: cur,\n      };\n    }, {})\n  : {};\nfunction getExtraApy(asset, account, assets) {\n  const asset_token_id = asset.token_id;\n  const borrowFarm = asset.farms.find(\n    (farm) =>\n      farm[\"farm_id\"][\"Borrowed\"] && Object.keys(farm.rewards || {}).length\n  );\n  if (!borrowFarm) return 0;\n  const assetDecimals = asset.metadata.decimals + asset.config.extra_decimals;\n  const totalBorrowUSD = toUsd(asset.borrowed.balance, asset);\n  const rewards = borrowFarm.rewards;\n  let userFarm;\n  if (account) {\n    userFarm = account.farms.find((farm) => {\n      return (\n        farm[\"farm_id\"][\"Borrowed\"] == asset.token_id && farm.rewards.length\n      );\n    });\n  }\n  if (!userFarm) {\n    return Object.keys(rewards)\n      .map((reward_token_id) => {\n        const farmData = rewards[reward_token_id];\n        const { reward_per_day, boosted_shares } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const totalRewardsUsd = toUsd(\n          B(reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        if (B(totalBorrowUSD).eq(0)) return 0;\n        const apy = B(totalRewardsUsd).div(totalBorrowUSD).mul(100).toFixed();\n        return apy;\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  } else {\n    return userFarm.rewards\n      .map((farmData) => {\n        const { reward_token_id, boosted_shares, asset_farm_reward } = farmData;\n        const assetReward = assets.find(\n          (asset) => asset.token_id == reward_token_id\n        );\n        const borrowedShares = Number(\n          shrinkToken(boosted_shares || 0, assetDecimals)\n        );\n        const totalBoostedShares = Number(\n          shrinkToken(asset_farm_reward.boosted_shares, assetDecimals)\n        );\n        const boosterLogBase = Number(\n          shrinkToken(\n            asset_farm_reward.booster_log_base,\n            config.booster_decimals\n          )\n        );\n        const xBRRRAmount = Number(\n          shrinkToken(\n            account.booster_staking[\"x_booster_amount\"] || 0,\n            config.booster_decimals\n          )\n        );\n        const log = Math.log(xBRRRAmount) / Math.log(boosterLogBase);\n        const multiplier = log >= 0 ? 1 + log : 1;\n        const userBorrowedBalance =\n          account.borrowed.find((asset) => asset.token_id == asset_token_id)\n            .balance || 0;\n        const totalUserAssetUSD = toUsd(userBorrowedBalance, asset);\n        const totalRewardsUsd = toUsd(\n          B(asset_farm_reward.reward_per_day).mul(365).toFixed(),\n          assetReward\n        );\n        return B(totalRewardsUsd)\n          .mul(borrowedShares / totalBoostedShares)\n          .mul(multiplier)\n          .div(totalUserAssetUSD)\n          .mul(100)\n          .toFixed();\n      })\n      .reduce((acc, cur) => acc + Number(cur), 0);\n  }\n}\nconst toUsd = (balance, asset) =>\n  asset.price?.usd\n    ? Number(\n        shrinkToken(\n          balance,\n          asset.metadata.decimals + asset.config.extra_decimals\n        )\n      ) * asset.price.usd\n    : 0;\n// get market can burrow assets\nconst renderAssets = (data) =>\n  data.map((asset) => {\n    const {\n      icon,\n      symbol,\n      apy,\n      rewardTokens,\n      volatility_ratio,\n      token_id,\n      liquidity,\n    } = asset;\n    const rewardTokensImg =\n      rewardTokens &&\n      rewardTokens.map((token_id, index) => {\n        const metadata = assetsMap[token_id].metadata;\n        return (\n          <img\n            class={`rewardIcon ${index > 0 ? \"ml_4_ne\" : \"\"}`}\n            src={metadata.icon}\n          ></img>\n        );\n      });\n    const cf = volatility_ratio / 100;\n    const liquidity_display = nFormat(liquidity, 2);\n    return (\n      <tr key={token_id}>\n        <td>\n          <img src={icon || wnearbase64} class=\"tokenIcon\"></img>\n          {symbol !== \"wNEAR\" ? symbol : \"NEAR\"}\n        </td>\n        <td>{toAPY(apy)}%</td>\n        <td class=\"text-white\">\n          {rewardTokensImg.length == 0 ? \"-\" : rewardTokensImg}\n        </td>\n        <td>{cf || \"-\"}%</td>\n        <td>${liquidity_display}</td>\n        <td>\n          <div class=\"table_handlers\">\n            <Widget\n              src=\"juaner.near/widget/ref-operation-button\"\n              props={{\n                clickEvent: () => {\n                  handleSelect(token_id);\n                },\n                buttonType: \"solid\",\n                actionName: \"Borrow\",\n                hoverOn: true,\n              }}\n            />\n          </div>\n        </td>\n      </tr>\n    );\n  });\nconst handleSelect = (token_id) => {\n  State.update({\n    selectedTokenId: token_id,\n    showModal: true,\n  });\n};\nfunction closeModal() {\n  State.update({\n    showModal: false,\n  });\n}\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nconst selectedToken = (selectedTokenId && assetsMap[selectedTokenId]) || {};\nconst selectedTokenMeta = selectedToken.metadata || {};\n\nconst handleSort = (type, key) => {\n  console.log(type, key, state.tableData);\n  if (!state.tableData.length) return;\n  State.update({\n    tableData: state.tableData.sort((a, b) =>\n      type === \"down\" ? a[key] - b[key] : b[key] - a[key]\n    ),\n    activeArrow: `${type}-${key}`,\n  });\n};\nreturn (\n  <Container>\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    {/* market */}\n    <div class=\"fw-bold text-white pt-3 font-18 title\">\n      <span class=\"text_red_color\">Borrow</span> Market\n    </div>\n    <table class=\"assets_table click\">\n      <thead>\n        <tr>\n          <th scope=\"col\" width=\"20%\">\n            Assets\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            <div className=\"table_sorter\">\n              <span>APY</span>\n              <div className=\"arrows\">\n                <div className=\"arrow-wrap\">\n                  <div\n                    className={`arrow arrow-up ${\n                      state.activeArrow === \"up-apy\" && \"active\"\n                    }`}\n                    onClick={() => {\n                      handleSort(\"up\", \"apy\");\n                    }}\n                  />\n                </div>\n                <div className=\"arrow-wrap\">\n                  <div\n                    className={`arrow arrow-down ${\n                      state.activeArrow === \"down-apy\" && \"active\"\n                    }`}\n                    onClick={() => {\n                      handleSort(\"down\", \"apy\");\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            Rewards\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            C.F.\n          </th>\n          <th scope=\"col\" width=\"20%\">\n            <div className=\"table_sorter\">\n              <span>Liquidity</span>\n              <div className=\"arrows\">\n                <div className=\"arrow-wrap\">\n                  <div\n                    className={`arrow arrow-up ${\n                      state.activeArrow === \"up-liquidity\" && \"active\"\n                    }`}\n                    onClick={() => {\n                      handleSort(\"up\", \"liquidity\");\n                    }}\n                  />\n                </div>\n                <div className=\"arrow-wrap\">\n                  <div\n                    className={`arrow arrow-down ${\n                      state.activeArrow === \"down-liquidity\" && \"active\"\n                    }`}\n                    onClick={() => {\n                      handleSort(\"down\", \"liquidity\");\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </th>\n          <th scope=\"col\" width=\"15%\"></th>\n        </tr>\n      </thead>\n      <tbody>{renderAssets(state.tableData) || \"\"}</tbody>\n    </table>\n    {/* Modal*/}\n    <Widget\n      src=\"juaner.near/widget/ref-market-burrow-burrow\"\n      props={{ selectedTokenId, selectedTokenMeta, showModal, closeModal }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ref-market-burrow-assets", "fact_widget_deployments_id": "a1725a9152735f67fb8cb047ccbe761d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}