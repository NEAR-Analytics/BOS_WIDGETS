{"tx_hash": "GFsKBNWG5uctWZ3iJeiPYNpLYes33YK3SBA1zXM8FZTf", "action_id_social": "5wYdX8bwZ3aXWSywDA85YrHhk3DocGK6yVmeRK9ABCzT-0-widget", "block_id": 99478329, "block_timestamp": "2023-08-23T14:14:13.145Z", "signer_id": "juaner.near", "widget_name": "ss-your-supply", "source_code": "const Container = styled.div`\n  .tokenIcon {\n    width: 26px;\n    height: 26px;\n    border-radius: 100px;\n    margin-right: 4px;\n  }\n  .rewardIcon {\n    width: 16px;\n    height: 16px;\n    border-radius: 100px;\n  }\n  .assets_table {\n    width: 100%;\n    tr {\n      color: #7c7f96;\n      border: none;\n      height: 50px;\n    }\n    th,\n    td {\n      border: none;\n      font-size: 14px;\n    }\n    td {\n      color: #fff;\n    }\n    th:first-child,\n    td:first-child {\n      padding-left: 20px;\n      min-width: 160px;\n    }\n    th:nth-child(2) {\n      min-width: 120px;\n    }\n    th:nth-child(5) {\n      min-width: 120px;\n    }\n    th:nth-child(6) {\n      min-width: 140px;\n    }\n    tbody {\n      tr {\n        line-height: 40px;\n      }\n      .adjust_btn {\n        margin-right: 4px;\n      }\n      .withdraw_btn {\n        flex-shrink: 0;\n      }\n      .table_handlers .adjust_btn div {\n        background-color: rgba(0, 255, 163, 0.6);\n        transition: 0.5s;\n      }\n      .table_handlers .withdraw_btn div {\n        border-color: rgba(0, 255, 163, 0.6);\n        color: rgba(0, 255, 163, 0.6);\n        transition: 0.5s;\n      }\n      tr:hover {\n        background-color: #373a53;\n        border-radius: 12px;\n        .table_handlers .adjust_btn div {\n          background-color: #00ffa3;\n        }\n        .table_handlers .withdraw_btn div {\n          border-color: #00ffa3;\n          color: #00ffa3;\n        }\n      }\n    }\n    .table_handlers {\n      display: flex;\n      justify-content: end;\n      margin-top: 12px;\n      padding-right: 10px;\n    }\n  }\n  .supply_title {\n    font-size: 18px;\n    color: #fff;\n    padding-left: 20px;\n  }\n  .double_lines {\n    line-height: 16px;\n    margin-top: 4px;\n  }\n`;\n/** base tool start  */\nlet accountId = context.accountId;\n// if (!accountId) {\n//   return <Widget src=\"juaner.near/widget/ref_account-signin\" />;\n// }\nconst toAPY = (v) => Math.round(v * 100) / 100;\nconst shrinkToken = (value, decimals, fixed) => {\n  return new Big(value).div(new Big(10).pow(decimals || 0)).toFixed(fixed);\n};\nState.init({ tableData: [] });\nlet total_supplied_usd = Big(0);\nconst {\n  assets,\n  rewards,\n  account,\n  balances,\n  showModalName,\n  selectedTokenId,\n  selectedTokenMeta,\n  wnearbase64,\n  closeButtonBase64,\n} = state;\nconst { onLoadState } = props;\nfunction changeSelectedToken(asset, type) {\n  const { token_id, metadata } = asset;\n  State.update({\n    selectedTokenId: token_id,\n    selectedTokenMeta: metadata,\n    showModalName: type,\n  });\n}\nfunction closeModal() {\n  State.update({\n    showModalName: \"\",\n  });\n}\nconst formatAssets = (data) => {\n  const { account, rewards, assets } = data;\n  const { supplied, collateral } = account;\n  if (!supplied?.length && !collateral?.length) return [];\n  const tokens = new Set([\n    ...supplied.map((a) => a.token_id),\n    ...collateral.map((a) => a.token_id),\n  ]);\n  return [...tokens].map((depositedTokenId) => {\n    const asset = assets.find((a) => a.token_id === depositedTokenId);\n    const netTvlMultiplier = asset.config.net_tvl_multiplier / 10000;\n    const r = rewards.find((a) => a.token_id === asset.token_id);\n    const totalApy =\n      r.apyBase + r.apyRewardTvl * netTvlMultiplier + r.apyReward;\n\n    const decimals = asset.metadata.decimals + asset.config.extra_decimals;\n    const { can_use_as_collateral } = asset.config;\n\n    const suppliedRecord = supplied.find(\n      (s) => s.token_id === depositedTokenId\n    );\n\n    const depositedBalance = suppliedRecord\n      ? Number(shrinkToken(suppliedRecord.balance, decimals))\n      : 0;\n\n    const collateralRecord = collateral.find(\n      (c) => c.token_id === depositedTokenId\n    );\n\n    const collateralBalance = collateralRecord\n      ? Number(shrinkToken(collateralRecord.balance, decimals))\n      : 0;\n\n    const totalBalance = depositedBalance + collateralBalance;\n    const usd = totalBalance * asset.price.usd;\n    const collateralUsd = collateralBalance * asset.price.usd;\n    total_supplied_usd = total_supplied_usd.plus(usd);\n    const rewardsList =\n      getPortfolioRewards(\"Supplied\", depositedTokenId, data) || [];\n    return {\n      icon: asset.metadata.icon,\n      symbol: asset.metadata.symbol,\n      totalApy,\n      rewardsList,\n      collateralBalance,\n      collateralUsd,\n      totalBalance,\n      usd,\n      can_use_as_collateral,\n      token_id: depositedTokenId,\n      asset,\n    };\n  });\n};\nconst onLoad = (data) => {\n  State.update(data);\n  if (data.assets?.length && data.rewards?.length && data.account) {\n    State.update({ tableData: formatAssets(data) });\n\n    onLoadState &&\n      onLoadState({\n        total_supplied_usd: total_supplied_usd.toFixed(),\n      });\n  }\n};\n\nconst hasData = assets.length > 0 && rewards.length > 0 && account;\nfunction getPortfolioRewards(type, token_id, data) {\n  const { account, assets } = data;\n  const targetFarm = account.farms.find((farm) => {\n    return farm[\"farm_id\"][type] == token_id;\n  });\n  if (targetFarm) {\n    const asset = assets.find((a) => a.token_id == token_id);\n    const rewards = targetFarm[\"rewards\"] || [];\n    const totalRewards =\n      type == \"Supplied\" ? asset.farms[0].rewards : asset.farms[1].rewards;\n    const result = rewards.map((reward) => {\n      const { reward_token_id } = reward;\n      const assetDecimals =\n        asset.metadata.decimals + asset.config.extra_decimals;\n      const rewardAsset = assets.find((a) => a.token_id == reward_token_id);\n      const rewardTokenDecimals =\n        rewardAsset.metadata.decimals + rewardAsset.config.extra_decimals;\n\n      const boostedShares = Number(\n        shrinkToken(reward.boosted_shares || 0, assetDecimals)\n      );\n      const totalBoostedShares = Number(\n        shrinkToken(\n          totalRewards[reward_token_id].boosted_shares || 0,\n          assetDecimals\n        )\n      );\n      const totalRewardsPerDay = Number(\n        shrinkToken(\n          totalRewards[reward_token_id].reward_per_day || 0,\n          rewardTokenDecimals\n        )\n      );\n      const rewardPerDay =\n        (boostedShares / totalBoostedShares) * totalRewardsPerDay || 0;\n      return { rewardPerDay, metadata: asset.metadata, rewardAsset };\n    });\n    return result;\n  }\n  return [];\n}\n// get portfolio deposited assets\nconst renderAssets = (data, hasDollar) => {\n  const formatValue = (v) => {\n    if (Big(v).eq(0)) return \"0\";\n    if (Big(v).lt(0.01)) return hasDollar ? \"<$0.01\" : \"<0.01\";\n    return Big(v).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n  };\n  return data.map((item) => {\n    const {\n      icon,\n      symbol,\n      totalApy,\n      rewardsList,\n      collateralBalance,\n      collateralUsd,\n      totalBalance,\n      usd,\n      can_use_as_collateral,\n      token_id,\n      asset,\n    } = item;\n    return (\n      <tr key={token_id}>\n        <td>\n          <img src={icon || wnearbase64} class=\"tokenIcon\"></img>\n          {symbol !== \"wNEAR\" ? symbol : \"NEAR\"}\n        </td>\n        <td>{toAPY(totalApy)}%</td>\n        <td>\n          {rewardsList.length == 0\n            ? \"-\"\n            : rewardsList.map((reward) => {\n                const { rewardPerDay, metadata, rewardAsset } = reward;\n                return (\n                  <div class=\"flex_center\">\n                    $\n                    {formatValue(\n                      Big(rewardPerDay || 0)\n                        .mul(rewardAsset?.price?.usd || 0)\n                        .toString(),\n                      true\n                    )}\n                    <img\n                      class=\"rewardIcon ml_5\"\n                      src={metadata.icon || wnearbase64}\n                    />\n                  </div>\n                );\n              })}\n        </td>\n        <td>\n          <div className=\"double_lines\">\n            <div>{formatValue(collateralBalance)}</div>\n            <div class=\"text_grey_color\">\n              (${formatValue(collateralUsd, true)})\n            </div>\n          </div>\n        </td>\n        <td>\n          <div className=\"double_lines\">\n            <div>{formatValue(totalBalance)}</div>\n            <div class=\"text_grey_color\">(${formatValue(usd, true)})</div>\n          </div>\n        </td>\n\n        <td class=\"table_handlers\">\n          {!can_use_as_collateral ? null : (\n            <div class=\"adjust_btn\">\n              <Widget\n                src=\"juaner.near/widget/ref-operation-button\"\n                props={{\n                  clickEvent: () => {\n                    changeSelectedToken(asset, \"adjust\");\n                  },\n                  buttonType: \"solid\",\n                  actionName: \"Adjust\",\n                  hoverOn: true,\n                }}\n              />\n            </div>\n          )}\n          <div class=\"withdraw_btn\">\n            <Widget\n              src=\"juaner.near/widget/ref-operation-button\"\n              props={{\n                clickEvent: () => {\n                  changeSelectedToken(asset, \"withdraw\");\n                },\n                buttonType: \"line\",\n                actionName: \"Withdraw\",\n                hoverOn: true,\n              }}\n            />\n          </div>\n        </td>\n      </tr>\n    );\n  });\n};\n\nfunction getWnearIcon(icon) {\n  State.update({\n    wnearbase64: icon,\n  });\n}\nfunction getCloseButtonIcon(icon) {\n  State.update({\n    closeButtonBase64: icon,\n  });\n}\nreturn (\n  <Container className=\"pt-3\">\n    {/* load data */}\n    {!hasData && (\n      <Widget src=\"juaner.near/widget/ref_burrow-data\" props={{ onLoad }} />\n    )}\n    {/* load icons */}\n    <Widget\n      src=\"juaner.near/widget/ref-icons\"\n      props={{ getWnearIcon, getCloseButtonIcon }}\n    />\n    <div class=\"supply_title\">You Supplied</div>\n\n    <table class=\"assets_table click\">\n      <thead>\n        <tr>\n          <th scope=\"col\" width=\"20%\">\n            Assets\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            Supply APY\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            Rewards\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            Collateral\n          </th>\n          <th scope=\"col\" width=\"15%\">\n            You Supplied\n          </th>\n          <th scope=\"col\" width=\"20%\"></th>\n        </tr>\n      </thead>\n\n      {accountId && <tbody>{renderAssets(state.tableData)}</tbody>}\n    </table>\n\n    {/** modal */}\n    <Widget\n      src=\"juaner.near/widget/ref-market-supply-adjust\"\n      props={{\n        showModal: showModalName == \"adjust\",\n        closeModal,\n        selectedTokenId,\n        selectedTokenMeta,\n      }}\n    />\n    <Widget\n      src=\"juaner.near/widget/ref-market-supply-withdraw\"\n      props={{\n        showModal: showModalName == \"withdraw\",\n        closeModal,\n        selectedTokenId,\n        selectedTokenMeta,\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/juaner.near/widget/ss-your-supply", "fact_widget_deployments_id": "17b577721dda1d59d18367759bac4910", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}