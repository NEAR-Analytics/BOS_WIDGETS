{"tx_hash": "Ha6Tn6k4XkcC1rs3pkcLryWcend6wWrSajxic6zDrbTz", "action_id_social": "D975NfYWym67QVTbjsw2Kj5DDokg2zjqxZkxAtGaBAVY-0-widget", "block_id": 96981738, "block_timestamp": "2023-07-21T09:31:17.477Z", "signer_id": "proofofvibes.near", "widget_name": "Vibes.Tastemakers.main", "source_code": "// check role in DAO\nconst daoId = \"vibes.sputnik-dao.near\"; // add tastemaker logic here\nconst isTasteMaker = true;\nconst accountId = context.accountId;\n\nconst sharedButtonStyles = `\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  height: 32px;\n  border-radius: 50px;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  text-align: center;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    outline: none;\n  }\n\n  i {\n    color: #7E868C;\n  }\n\n  .bi-16 {\n    font-size: 16px;\n  }\n`;\n\nconst Button = styled.button`\n  ${sharedButtonStyles}\n  color: ${(p) => (p.primary ? \"#09342E\" : \"#11181C\")} !important;\n  background: ${(p) => (p.primary ? \"#59E692\" : \"#FBFCFD\")};\n  border: ${(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\n\n  &:hover,\n  &:focus {\n    background: ${(p) => (p.primary ? \"rgb(112 242 164)\" : \"#ECEDEE\")};\n  }\n`;\n\nconst ButtonLink = styled.a`\n  ${sharedButtonStyles}\n  color: ${(p) => (p.primary ? \"#09342E\" : \"#11181C\")} !important;\n  background: ${(p) => (p.primary ? \"#59E692\" : \"#FBFCFD\")};\n  border: ${(p) => (p.primary ? \"none\" : \"1px solid #D7DBDF\")};\n\n  &:hover,\n  &:focus {\n    background: ${(p) => (p.primary ? \"rgb(112 242 164)\" : \"#ECEDEE\")};\n  }\n`;\nif (!accountId) {\n  return (\n    <div>\n      <p>Login to NEAR with your \ud83e\udd42 tastemaker approved wallet</p>\n      <ButtonLink href=\"https://ProofOfVibes.com/wallet\" target=\"_blank\">\n        <i className=\"bi bi-wallet\"></i> Get A NEAR Wallet\n      </ButtonLink>\n      <p>Apply to be a tastemaker here</p>\n      <ButtonLink href=\"https://ProofOfVibes.com/apply\" target=\"_blank\">\n        <i className=\"bi bi-pencil-fill\"></i> Apply to Be A Tastemaker\n      </ButtonLink>\n    </div>\n  );\n}\n\n// const accountId = props.accountId ?? context.accountId;\n\nconst proposalKinds = {\n  ChangeConfig: \"config\",\n  ChangePolicy: \"policy\",\n  AddMemberToRole: \"add_member_to_role\",\n  RemoveMemberFromRole: \"remove_member_from_role\",\n  FunctionCall: \"call\",\n  UpgradeSelf: \"upgrade_self\",\n  UpgradeRemote: \"upgrade_remote\",\n  Transfer: \"transfer\",\n  SetStakingContract: \"set_vote_token\",\n  AddBounty: \"add_bounty\",\n  BountyDone: \"bounty_done\",\n  Vote: \"vote\",\n  FactoryInfoUpdate: \"factory_info_update\",\n  ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n  ChangePolicyRemoveRole: \"policy_remove_role\",\n  ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n  ChangePolicyUpdateParameters: \"policy_update_parameters\",\n};\n\nconst actions = {\n  AddProposal: \"AddProposal\",\n  VoteApprove: \"VoteApprove\",\n  VoteReject: \"VoteReject\",\n  VoteRemove: \"VoteRemove\",\n};\n\n// -- Get all the roles from the DAO policy\nlet roles = Near.view(daoId, \"get_policy\");\nroles = roles === null ? [] : roles.roles;\n\nconst isUserAllowedTo = (user, kind, action) => {\n  // -- Filter the user roles\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n      userRoles.push(role);\n    }\n  }\n\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n\n  userRoles\n    .filter(({ permissions }) => {\n      const allowedRole =\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n        permissions.includes(`${kind.toString()}:*`) ||\n        permissions.includes(`*:${action.toString()}`) ||\n        permissions.includes(\"*:*\");\n      allowed = allowed || allowedRole;\n      return allowedRole;\n    })\n    .map((role) => role.name);\n\n  return allowed;\n};\n\nconsole.log(\n  \"Is User Allowed To 'Add a Proposal' of type 'FunctionCall'?\",\n  isUserAllowedTo(accountId, proposalKinds.FunctionCall, actions.AddProposal)\n);\n\nconsole.log(\n  \"Is User Allowed To 'Vote Yes' on a proposal of type 'FunctionCall'?\",\n  isUserAllowedTo(accountId, proposalKinds.FunctionCall, actions.VoteApprove)\n);\n\nconsole.log(\n  \"Is User Allowed To 'Add a Proposal' of type 'AddMemberToRole'?\",\n  isUserAllowedTo(accountId, proposalKinds.AddMemberToRole, actions.AddProposal)\n);\nconst canPropose = isUserAllowedTo(\n  accountId,\n  proposalKinds.FunctionCall,\n  actions.AddProposal\n);\n\nreturn (\n  <div>\n    {isTasteMaker && (\n      <Widget src=\"proofofvibes.near/widget/Vibes.Tastemakers.tapIn\" />\n    )}\n  </div>\n);\n", "metadata": {"platform": "nearpad"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/proofofvibes.near/widget/Vibes.Tastemakers.main", "fact_widget_deployments_id": "b02ccd7bb2fc4fe2d206798a4e3314de", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}