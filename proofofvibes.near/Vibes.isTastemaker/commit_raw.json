{"tx_hash": "3K1m1qnAixFENco8yanKGN8K7AkYhFGJNh9gRhHhZLbj", "action_id_social": "F7kWKFqdRbfaVh9R26r58vKoLr6y9SgTkQiN7yubFdWw-0-widget", "block_id": 97995989, "block_timestamp": "2023-08-03T17:30:30.164Z", "signer_id": "proofofvibes.near", "widget_name": "Vibes.isTastemaker", "source_code": "const isTastemaker = false;\nconst daoId = props.daoId ?? \"vibes.sputnik-dao.near\";\nconst role = props.role ?? \"tastemaker\";\nconst accountId = props.accountId ?? context.accountId; // maybe make conditional if not in dao\n\nconst proposalKinds = {\n  ChangeConfig: \"config\",\n  ChangePolicy: \"policy\",\n  AddMemberToRole: \"add_member_to_role\",\n  RemoveMemberFromRole: \"remove_member_from_role\",\n  FunctionCall: \"call\",\n  UpgradeSelf: \"upgrade_self\",\n  UpgradeRemote: \"upgrade_remote\",\n  Transfer: \"transfer\",\n  SetStakingContract: \"set_vote_token\",\n  AddBounty: \"add_bounty\",\n  BountyDone: \"bounty_done\",\n  Vote: \"vote\",\n  FactoryInfoUpdate: \"factory_info_update\",\n  ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n  ChangePolicyRemoveRole: \"policy_remove_role\",\n  ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n  ChangePolicyUpdateParameters: \"policy_update_parameters\",\n};\n\nconst actions = {\n  AddProposal: \"AddProposal\",\n  VoteApprove: \"VoteApprove\",\n  VoteReject: \"VoteReject\",\n  VoteRemove: \"VoteRemove\",\n};\n\n// -- Get all the roles from the DAO policy\nlet roles = Near.view(daoId, \"get_policy\");\nroles = roles === null ? [] : roles.roles;\n\nconst getUserRoles = (user) => {\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (user && role.kind.Group && role.kind.Group.includes(user)) {\n      userRoles.push(role.name);\n    }\n  }\n  return userRoles;\n};\n\nconst isUserAllowedTo = (user, kind, action) => {\n  // -- Filter the user roles\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (user && role.kind.Group && role.kind.Group.includes(user)) {\n      userRoles.push(role);\n    }\n  }\n\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n\n  userRoles\n    .filter(({ permissions }) => {\n      const allowedRole =\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n        permissions.includes(`${kind.toString()}:*`) ||\n        permissions.includes(`*:${action.toString()}`) ||\n        permissions.includes(\"*:*\");\n      allowed = allowed || allowedRole;\n      return allowedRole;\n    })\n    .map((role) => role.name);\n\n  return allowed;\n};\n\nconsole.log(\n  \"Is User Allowed To 'Add a Proposal' of type 'FunctionCall'?\",\n  isUserAllowedTo(accountId, proposalKinds.FunctionCall, actions.AddProposal)\n);\n\nconsole.log(\n  \"Is User Allowed To 'Vote Yes' on a proposal of type 'FunctionCall'?\",\n  isUserAllowedTo(accountId, proposalKinds.FunctionCall, actions.VoteApprove)\n);\n\nconsole.log(\n  \"Is User Allowed To 'Add a Proposal' of type 'AddMemberToRole'?\",\n  isUserAllowedTo(accountId, proposalKinds.AddMemberToRole, actions.AddProposal)\n);\n\nconst userRoles = accountId ? getUserRoles(accountId) : [];\n\nconsole.log(\"Is User a Tastemaker\", userRoles.includes(\"tastemaker\"));\n\nisTastemaker = userRoles.includes(\"tastemaker\");\n\nconsole.log(\"Is User part of the DAO\", userRoles.length > 0);\nreturn isTastemaker;\n", "metadata": {"description": "Helper function to see if a user logged in or passed in through the props is part of a dao role", "image": {"ipfs_cid": "bafkreievzivskwxnjqetpr2yc2yaxjzvpdn5w3fvmp67vknjvz5eotpfjq"}, "linktree": {"website": "proofofvibes.com"}, "name": "Is Tastemaker?", "platform": "jutsu.ai", "tags": {"dao": "", "helper-function": "", "vibes": ""}}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/proofofvibes.near/widget/Vibes.isTastemaker", "fact_widget_deployments_id": "63031882aff7c1542bdb7fa9bec1e2dc", "inserted_timestamp": "2023-08-03T18:38:48.694Z", "modified_timestamp": "2023-08-03T18:38:48.694Z", "__row_index": 0}