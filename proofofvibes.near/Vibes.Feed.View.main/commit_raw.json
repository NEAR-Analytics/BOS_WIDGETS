{"tx_hash": "UPgPQecnvmp83845xqH85rwDhRsyYFSFecfS1HEqTQp", "action_id_social": "Av2AXtPZ1cyF7SedyvGQATwK3B8MYb8wegWa9iEdRHn2-0-widget", "block_id": 98047943, "block_timestamp": "2023-08-04T09:41:51.078Z", "signer_id": "proofofvibes.near", "widget_name": "Vibes.Feed.View.main", "source_code": "/**\n * Do tastemaker check, see if toast notifcation works, add to nft, add default cid for minting images, add title with day\n * add human check\n * Check is tastemaker\n * Set amount based on how much bond. check proposal for this\n */\nconst path = props.path;\nconst blockHeight =\n  props?.blockHeight === \"now\" ? \"now\" : parseInt(props?.blockHeight);\nconst subscribe = !!props.subscribe;\nconst parts = path.split(\"/\");\nconst accountId = parts[0] || props.accountId;\n// const accountId=jeanrocha.near;\n// const blockHeight=98038817;\nconst notifyAccountId = accountId;\nconst issuer = props.issuer ?? \"issuer.proofofvibes.near\";\nconst receiver = props.receiver ?? accountId; // for sbt receiver // default the poster\nconst showReciever = props.showReciever ?? true;\nconst showIssuer = props.showIssuer ?? true;\nconst showReference = props.showReference ?? true;\nconst showDAO = props.showDAO ?? true;\nconst showClass = props.showClass ?? true;\nconst showHeader = props.showHeader ?? true;\nconst nftDescription =\n  props.nftDescription ?? \"Proof of Vibe NFT powered by GenaDrop\"; // pull from post\nconst classId = props.classId ?? 1;\nconst reference =\n  props.reference ??\n  \"https://genadrop.mypinata.cloud/ipfs/QmQ1662QyTESnzWK8gBJdD7BtwQ3ddfXCMy6Hh3FHdmjMk?_gl=1*wrbb39*_ga*MTQ0ODg3NzEzNS4xNjgyNjA0ODQy*_ga_5RMPXG14TE*MTY4OTY4Njc3Ni44LjEuMTY4OTY4NjgyMi4xNC4wLjA\";\nconst accountLoggedIn = context.accountId; // use this just in case\nconst postUrl = `https://near.org#/near/widget/PostPage?accountId=${accountId}&blockHeight=${blockHeight}`;\nconst profile = Social.getr(`${accountId}/profile`);\nconst profileName = accountId;\nif (!!profile) {\n  profileName = profile.name; // profile name\n  console.log(\"Profile Name: \" + profileName);\n}\nconst daoId = props.daoId ?? \"vibes.sputnik-dao.near\";\nconst role = props.role ?? \"vibee\";\nconst badges = [\"og\", \"vibes\", \"regen\", \"human\"];\n\n// const formatDate = (timestamp) => {\n//   const date = new Date(timestamp);\n//   const month = date.getMonth() + 1; // Months are zero-based, so we add 1\n//   const day = date.getDate();\n//   const year = date.getFullYear();\n//   return `${month}/${day}/${year}`;\n// };\n\nconst formatDateBlockHeight = (blockHeight) => {\n  const block = Near.block(blockHeight);\n  console.log(\"Block: \" + block);\n  const timeMs = parseFloat(block.header.timestamp_nanosec) / 1e6;\n  const date = new Date(timeMs);\n  console.log(\"Date: \" + date);\n  return date.toDateString();\n};\n\nconst formattedPostDate = formatDateBlockHeight(blockHeight); // this is showing as error\n\n// const formattedDate = formatDate(Date.now());\n\nconst res = fetch(`https://api.near.social/time?blockHeight=${blockHeight}`);\nif (!res) {\n  return \"Loading\";\n}\nif (!res.ok || res.body === \"null\") {\n  return \"unknown\";\n}\n\nconst timeMs = parseFloat(res.body);\n\nconst date = new Date(timeMs);\nconst postDate = `${date.toLocaleDateString([], {\n  day: \"numeric\",\n  month: \"short\",\n  year: \"numeric\",\n})}`;\n\n// const titleWithDate = \"Proof of Vibes \" + accountId + \" \" + formattedDate; // add event later\nconst titleWithDate = `${\n  profile.name || accountId.split(\".near\")[0]\n} ${postDate}`;\n\nconst nftTitle = props.nftTitle ?? titleWithDate; // see about adding title and person that vibes them // also date should be when post was posted\n\nconst content =\n  props.content ??\n  JSON.parse(Social.get(path || `${accountId}/post/main`, blockHeight));\nconst image = content.image;\nconst type = content.type;\nconsole.log(\"content\", content);\nconsole.log(\"Content type: \" + type);\nconst metadata = content.metadata;\nconsole.log(\"Content Metadata: \" + metadata);\nif (content.text) {\n  State.update({\n    description: content.text,\n  });\n  console.log(\"Content Text: \" + content.text);\n}\n\nconst item = {\n  type: \"social\",\n  path: path,\n  blockHeight,\n};\nState.init({\n  receiver: receiver,\n  issuer: issuer,\n  reference: reference,\n  daoId: daoId,\n  classId: classId,\n  toastMessage: \"\",\n  showAlert: false,\n  description: nftDescription,\n  title: nftTitle,\n  imageCid: \"bafkreiak7jzkpmrv365dskqk4thmlki3ts7kzq44hqr62dmrimbn47676e\",\n  cid: \"bafkreifsrsklegk4r3jft4fucwvo4pzzwczjecsfg5qrjgp2arevnel2ee\",\n  image,\n  content,\n});\n\nconst hasImageInPost = content.image; // need to check if image in post\nconsole.log(\"hasImage?\", content.image);\n// need to get image url\n\n// const accountId = context.accountId;\n\nconst post_args = JSON.stringify({\n  receiver: accountId, // accountId is the person who wrote the post\n  metadata: {\n    class: state.classId,\n  },\n  reference: state.reference,\n});\nconst proposal_args = Buffer.from(post_args, \"utf-8\").toString(\"base64\");\n//   const gas = 200000000000000;\n//   const deposit = 80000000000000000000000; // 0.008 //\nconst policy = Near.view(daoId, \"get_policy\");\n// const accountId = props.accountId ?? context.accountId;\n\nconst proposalKinds = {\n  ChangeConfig: \"config\",\n  ChangePolicy: \"policy\",\n  AddMemberToRole: \"add_member_to_role\",\n  RemoveMemberFromRole: \"remove_member_from_role\",\n  FunctionCall: \"call\",\n  UpgradeSelf: \"upgrade_self\",\n  UpgradeRemote: \"upgrade_remote\",\n  Transfer: \"transfer\",\n  SetStakingContract: \"set_vote_token\",\n  AddBounty: \"add_bounty\",\n  BountyDone: \"bounty_done\",\n  Vote: \"vote\",\n  FactoryInfoUpdate: \"factory_info_update\",\n  ChangePolicyAddOrUpdateRole: \"policy_add_or_update_role\",\n  ChangePolicyRemoveRole: \"policy_remove_role\",\n  ChangePolicyUpdateDefaultVotePolicy: \"policy_update_default_vote_policy\",\n  ChangePolicyUpdateParameters: \"policy_update_parameters\",\n};\n\nconst actions = {\n  AddProposal: \"AddProposal\",\n  VoteApprove: \"VoteApprove\",\n  VoteReject: \"VoteReject\",\n  VoteRemove: \"VoteRemove\",\n};\n\n// -- Get all the roles from the DAO policy\nlet roles = Near.view(daoId, \"get_policy\");\nroles = roles === null ? [] : roles.roles;\n\nconst getUserRoles = (user) => {\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (user && role.kind.Group && role.kind.Group.includes(user)) {\n      userRoles.push(role.name);\n    }\n  }\n  return userRoles;\n};\nconst isUserAllowedTo = (user, kind, action) => {\n  // -- Filter the user roles\n  const userRoles = [];\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (user && role.kind.Group && role.kind.Group.includes(user)) {\n      userRoles.push(role);\n    }\n  }\n\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n\n  userRoles\n    .filter(({ permissions }) => {\n      const allowedRole =\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n        permissions.includes(`${kind.toString()}:*`) ||\n        permissions.includes(`*:${action.toString()}`) ||\n        permissions.includes(\"*:*\");\n      allowed = allowed || allowedRole;\n      return allowedRole;\n    })\n    .map((role) => role.name);\n\n  return allowed;\n};\n\nconsole.log(\n  \"Is User Allowed To 'Add a Proposal' of type 'FunctionCall'?\",\n  isUserAllowedTo(accountId, proposalKinds.FunctionCall, actions.AddProposal)\n);\n\nconsole.log(\n  \"Is User Allowed To 'Vote Yes' on a proposal of type 'FunctionCall'?\",\n  isUserAllowedTo(accountId, proposalKinds.FunctionCall, actions.VoteApprove)\n);\n\nconsole.log(\n  \"Is User Allowed To 'Add a Proposal' of type 'AddMemberToRole'?\",\n  isUserAllowedTo(accountId, proposalKinds.AddMemberToRole, actions.AddProposal)\n);\n// this dont work\nconst canPropose = isUserAllowedTo(\n  context.accountId,\n  proposalKinds.FunctionCall,\n  actions.AddProposal\n);\nconst canProposeMemberAdd = isUserAllowedTo(\n  context.accountId,\n  proposalKinds.AddMemberToRole,\n  actions.AddProposal\n);\nconsole.log(\n  \"Can loggedin user propose to add member to dao: \" + canProposeMemberAdd\n);\nconst userRoles = accountId ? getUserRoles(accountId) : [];\nconst isPosterTastemaker = userRoles.includes(\"tastemaker\");\nconst isPosterVibee = userRoles.includes(\"vibee\");\nconsole.log(\n  `Is ${accountId} a tastemaker: ` +\n    isPosterTastemaker +\n    `Is ${accountId} a vibee: ` +\n    isPosterVibee\n);\n// IAH Verification\nconst getFirstSBTToken = (issuerContract) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: accountId,\n    issuer: issuerContract,\n  });\n  return view?.[0]?.[1]?.[0];\n};\n\nconst isHuman = getFirstSBTToken(\"fractal.i-am-human.near\") !== undefined;\nconst isVibe = getFirstSBTToken(\"issuer.proofofvibes.near\") !== undefined;\n\nconst Post = styled.div`\n  position: relative;\n\n  &::before {\n    content: \"\";\n    display: block;\n    position: absolute;\n    left: 19px;\n    top: 52px;\n    bottom: 12px;\n    width: 2px;\n    background: #eceef0;\n  }\n`;\n\nconst Header = styled.div`\n  margin-bottom: 0;\n  display: inline-flex;\n`;\n\nconst Body = styled.div`\n  padding-left: 52px;\n  padding-bottom: 1px;\n`;\n\nconst Content = styled.div`\n  img {\n    display: block;\n    max-width: 100%;\n    max-height: 80vh;\n    margin: 0 0 12px;\n  }\n`;\n\nconst Text = styled.p`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n  color: #687076;\n  white-space: nowrap;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin: -6px -6px 6px;\n`;\n\nconst getImageUrl = () => {\n  State.update({\n    description: state?.content?.text,\n    profile: Social.get(`${accountId}/profile/**`, \"final\"),\n    content: JSON.parse(\n      Social.get(`${accountId}/post/main`, blockHeight) ?? \"null\"\n    ),\n  });\n  console.log(postDate);\n  return state?.content?.image.ipfs_cid\n    ? State.update({\n        imageUrl: `https://ipfs.near.social/ipfs/${state?.content?.image.ipfs_cid}`,\n      })\n    : State.update({\n        imageUrl: state?.content?.image.url,\n      }) || fallbackUrl;\n};\n\ngetImageUrl();\n\nfunction renderContent() {\n  console.log(\n    \"Content Image: Type: \" + typeof content.image + \" Image \" + content.image\n  );\n\n  if (type === \"md\" || type === \"social\") {\n    return (\n      <>\n        {content.text && (\n          <Widget\n            src=\"near/widget/SocialMarkdown\"\n            props={{ text: content.text }}\n          />\n        )}\n\n        {content.image && (\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: content.image,\n            }}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconsole.log(\"title\", nftTitle);\n\nState.update({\n  title: nftTitle,\n});\n// may need to comment out\n// need to check role if tastemaker\n\nconst checkMintersJson = Near.view(issuer, \"class_minter\", { class: classId }); // need to extract all value and check if user is in minters array. // maybe conditional logic for dao\nconst mintAuthorities = checkMintersJson.minters;\nconst isMintAuthority = mintAuthorities.includes(context.accountId);\nconst daoIsMinter = mintAuthorities.includes(daoId);\nconst proposeVibee = () => {\n  const gas = 200000000000000;\n  const deposit = 10000000000000000000000;\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"Recommended as a vibee\",\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: \"vibee\",\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\nconst proposeTastemaker = () => {\n  const gas = 200000000000000;\n  const deposit = 10000000000000000000000;\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"Recommended as a tastemaker\",\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: \"tastemaker\",\n            },\n          },\n        },\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\nconst sbtMint = () => {\n  const gas = 200000000000000;\n  const deposit = 80000000000000000000000; // 0.008 // maybe change zero\n  Near.call([\n    {\n      contractName: state.issuer,\n      methodName: \"sbt_mint\",\n      args: {\n        receiver: accountId,\n        metadata: {\n          class: classId,\n        },\n        reference: reference,\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\nconst nftMint = () => {\n  //   if (!state.image.cid) {\n  //     return;\n  //   }\n  if (!accountId) {\n    console.log(\"Please login\"); // add share dogvwallet\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please log in before continuing\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.title) {\n    console.log(\"Please Enter title\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    const metadata = {\n      name: state?.title,\n      description: state?.description,\n      properties: [],\n      image: `${state.image.url}`,\n\n      //   image: `ipfs://${state.image.ipfs_cid}`,\n      //   image: `ipfs://${state.image.cid}`,\n      //   image: `ipfs://${state.imageCid}`,\n    };\n    console.log(\"come\", metadata);\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      console.log(\"GO ON SOUN\", res);\n      const cid = res.body.cid;\n      const gas = 200000000000000;\n      const deposit = 10000000000000000000000;\n      Near.call([\n        {\n          contractName: \"nft.genadrop.near\",\n          methodName: \"nft_mint\",\n          args: {\n            token_id: `${Date.now()}`,\n            metadata: {\n              title: state.title,\n              description: state.description,\n              //   media: `https://ipfs.io/ipfs/${state.imageCid}`,\n              // media: `https://ipfs.io/ipfs/${state.image.cid}`,\n              media: `${state.imageUrl}`,\n\n              //   media: `https://ipfs.io/ipfs/${state.image.ipfs_cid}`,\n              reference: `ipfs://${cid}`,\n              //   reference: `ipfs://${state.cid}`,\n            },\n            receiver_id: accountId,\n          },\n          gas: gas,\n          deposit: deposit,\n        },\n      ]);\n    });\n  }\n};\n\n// change this\nconst sbtDAOMint = () => {\n  Near.call([\n    {\n      contractName: state.daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"create proposal to mint SBT\",\n          kind: {\n            FunctionCall: {\n              receiver_id: state.issuer,\n              actions: [\n                {\n                  method_name: \"sbt_mint\",\n                  args: proposal_args,\n                  deposit: \"80000000000000000000000\",\n                  gas: \"200000000000000\",\n                },\n              ],\n            },\n          },\n        },\n      },\n      deposit: deposit,\n      gas: \"219000000000000\",\n    },\n  ]);\n};\n\nreturn (\n  <div className=\"border-bottom pt-3 pb-1\">\n    <div>\n      <div className=\"d-flex flex-row align-items-center\">\n        <div className=\"flex-grow-1 text-truncate\">\n          <a\n            className=\"text-dark text-decoration-none text-truncate\"\n            href={`#/mob.near/widget/ProfilePage?accountId=${accountId}`}\n          >\n            <Widget\n              src=\"mob.near/widget/Profile.ShortInlineBlock\"\n              props={{ accountId, tooltip: true }}\n            />\n          </a>\n        </div>\n\n        <span className=\"text-nowrap text-muted\">\n          {isPosterTastemaker && <>\ud83e\udd42</>}\n          {badges.map((badge) => (\n            <Widget\n              src=\"proofofvibes.near/widget/sbtEmojiHelper\"\n              props={{ accountId: accountId, badgeType: badge }}\n            />\n          ))}\n          <small>\n            {blockHeight === \"now\" ? (\n              \"now\"\n            ) : (\n              <a className=\"text-muted\" href={link}>\n                <Widget src=\"mob.near/widget/TimeAgo\" props={{ blockHeight }} />\n              </a>\n            )}\n          </small>\n          {true && blockHeight !== \"now\" && (\n            <div>\n              <span>\n                <a\n                  href=\"javascript:void\"\n                  className=\"link-secondary ms-2\"\n                  data-bs-toggle=\"dropdown\"\n                  aria-expanded=\"false\"\n                >\n                  <i className=\"fs-6 bi bi-three-dots\" />\n                </a>\n                <ul className=\"dropdown-menu col\">\n                  {hasImageInPost && (\n                    <li className=\"dropdown-item row\">\n                      <a\n                        className=\"link-dark text-decoration-none\"\n                        onClick={nftMint}\n                      >\n                        <i className=\"bi bi-emoji-gift\" /> Mint to User As NFT\n                      </a>\n                    </li>\n                  )}\n                  {isMintAuthority && isHuman && !isVibe && (\n                    <li className=\"dropdown-item row\">\n                      <a\n                        className=\"link-dark text-decoration-none\"\n                        onClick={sbtMint}\n                      >\n                        <i className=\"bi bi-shield\" /> Issue SBT\n                      </a>\n                    </li>\n                  )}\n\n                  {canPropose && !isPosterVibee && (\n                    <li className=\"dropdown-item row\">\n                      <a\n                        className=\"link-dark text-decoration-none\"\n                        onClick={proposeVibee}\n                      >\n                        <i className=\"bi bi-emoji-sunglasses\" /> Recommend as\n                        Vibee\n                      </a>\n                    </li>\n                  )}\n                  {canPropose && !isPosterTastemaker && (\n                    <li className=\"dropdown-item row\">\n                      <a\n                        className=\"link-dark text-decoration-none\"\n                        onClick={proposeTastemaker}\n                      >\n                        <i className=\"bi bi-cup-straw\" /> Recommend as\n                        Tastemaker\n                      </a>\n                    </li>\n                  )}\n\n                  {canPropose && daoIsMinter && isHuman && !isVibe && (\n                    <li className=\"dropdown-item row\">\n                      <a\n                        className=\"link-dark text-decoration-none\"\n                        onClick={sbtDAOMint}\n                      >\n                        <i className=\"bi bi-shield-lock\" /> Propose to Mint\n                        Proof of Vibe SBT\n                      </a>\n                    </li>\n                  )}\n                </ul>\n              </span>\n            </div>\n          )}\n        </span>\n      </div>\n    </div>\n    <div className=\"mt-3 text-break\">\n      <Widget\n        src=\"mob.near/widget/MainPage.Post.Content\"\n        props={{ content, raw }}\n      />\n    </div>\n    {blockHeight !== \"now\" && (\n      <div className=\"mt-1 d-flex justify-content-between\">\n        <div className=\"me-4\">\n          <Widget\n            src=\"mob.near/widget/CommentButton\"\n            props={{\n              onClick: () =>\n                !state.showReply && State.update({ showReply: true }),\n            }}\n          />\n        </div>\n        <div className=\"me-4\">\n          <Widget\n            src=\"mob.near/widget/LikeButton\"\n            props={{\n              notifyAccountId,\n              item,\n            }}\n          />\n        </div>\n        <div>\n          <Widget\n            src=\"mob.near/widget/MainPage.Post.ShareButton\"\n            props={{ accountId, blockHeight, postType: \"post\" }}\n          />\n        </div>\n      </div>\n    )}\n    <div className=\"mt-3 ps-5\">\n      {state.showReply && (\n        <div className=\"mb-2\">\n          <Widget\n            src=\"mob.near/widget/MainPage.Comment.Compose\"\n            props={{\n              notifyAccountId,\n              item,\n              onComment: () => State.update({ showReply: false }),\n            }}\n          />\n        </div>\n      )}\n      <Widget\n        src=\"mob.near/widget/MainPage.Comment.Feed\"\n        props={{\n          item,\n          highlightComment: props.highlightComment,\n          limit: props.commentsLimit,\n          subscribe,\n          raw,\n        }}\n      />\n    </div>\n    {state.showAlert && (\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/proofofvibes.near/widget/Vibes.Feed.View.main", "fact_widget_deployments_id": "1130c7c6993793498437585e58d6198a", "inserted_timestamp": "2023-08-04T11:28:57.483Z", "modified_timestamp": "2023-08-04T11:28:57.483Z", "__row_index": 4}