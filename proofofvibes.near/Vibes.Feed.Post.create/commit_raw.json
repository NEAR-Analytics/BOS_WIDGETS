{"tx_hash": "CrnC3seD1VTvanUibiLsW3YbcQBxKC9gbHqMNpu1hGXg", "action_id_social": "GtEtrFHvqvUkZZGaFkokkE2szQD29rstfMy5VjwKYa4Q-0-widget", "block_id": 97836492, "block_timestamp": "2023-08-01T11:37:51.672Z", "signer_id": "proofofvibes.near", "widget_name": "Vibes.Feed.Post.create", "source_code": "/** To-DO\n * - add slider logic, add automatic tagging for proof of vibes.near\n * - map sliders amount into emojis w markdown friednliness \u2764\ufe0f diversity \ud83c\udf08 desntiy \ud83e\uddca energy \u26a1\ufe0f\n * requrie image to post, put genealert\n * add mint button\n * detect change and if no change on sliders dont let post, show genalert\n * add tool tips\n */\nconst location = props.location; // just adding this\nconst embedHashtags = props.embedHashtags || [];\nconst embedMentions = props.embedMentions || [];\nconst showSliders = props.showSliders ?? true;\nif (!context.accountId) return <></>;\nconst maxSliderPoints = 10;\nState.init({\n  image: {},\n  text: `${embedHashtags.map((it) => `#${it} `).join(\"\")} ${embedMentions.map(\n    (it) => `@${it}`\n  )} @proofofvibes.near`,\n  showPreview: false,\n  friendliness: 5,\n  energy: 5,\n  density: 5,\n  diversity: 5,\n  location,\n});\n\nconst handleSliderFriendliness = (event) => {\n  const value = event.target.value;\n  State.update({ friendliness: value });\n  console.log(\"New Friendliness Score: \" + state.friendliness);\n};\nconst handleSliderEnergy = (event) => {\n  const value = event.target.value;\n  const newText = state.text; // adds to many needs better indicator of this\n  State.update({ energy: value, text: newText });\n  console.log(\"New Energy Score: \" + state.energy);\n};\nconst handleSliderDensity = (event) => {\n  const value = event.target.value;\n  State.update({ density: value });\n  console.log(\"New Density Score: \" + state.density);\n};\nconst handleSliderDiversity = (event) => {\n  const value = event.target.value;\n  State.update({ diversity: value });\n  console.log(\"New Diversity Score: \" + state.diversity);\n};\nconst profile = Social.getr(`${context.accountId}/profile`);\nconst autocompleteEnabled = true;\n\nconst content = {\n  type: \"md\",\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  text: state.text,\n  metadata: {\n    tastemaker: embedMentions,\n  },\n};\n// add sliders\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  return Array.from(text.matchAll(mentionRegex), (match) =>\n    match[1].toLowerCase()\n  );\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\n\nconst extractHashtags = (text) => {\n  const hashtagRegex = /#(\\w+)/gi;\n  return Array.from(text.matchAll(hashtagRegex), (match) =>\n    match[1].toLowerCase()\n  );\n};\nfunction checkImage() {\n  if (content.image === undefined) {\n    <Widget\n      src=\"jgodwill.near/widget/genalert\"\n      props={{ toastMessage: \"you must upload an image to do a vibe check\" }}\n    />;\n  }\n}\ncheckImage();\n\nfunction composeData() {\n  content.text =\n    content.text +\n    \" Friendliness: \" +\n    state.friendliness +\n    \"/\" +\n    maxSliderPoints +\n    \" Energy: \" +\n    state.energy +\n    \"/\" +\n    maxSliderPoints +\n    \" Density: \" +\n    state.density +\n    \"/\" +\n    maxSliderPoints +\n    \" Diversity: \" +\n    state.diversity +\n    \"/\" +\n    maxSliderPoints;\n  const data = {\n    post: {\n      main: JSON.stringify(content),\n      rating:\n        parseInt(state.friendliness) +\n        parseInt(state.energy) +\n        parseInt(state.density) +\n        parseInt(state.diversity),\n      friendliness: state.friendliness,\n      energy: state.energy,\n      density: state.density,\n      diversity: state.diversity,\n      location: state.location,\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n\n  const hashtags = extractHashtags(content.text);\n  hashtags = hashtags.concat(embedHashtags);\n\n  const item = {\n    type: \"social\",\n    path: `${context.accountId}/post/main`,\n  };\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item,\n      }))\n    );\n  }\n\n  const notifications = extractTagNotifications(state.text, item);\n\n  if (embedMentions.length) {\n    const mentions = embedMentions.map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n    notifications = notifications.concat(mentions);\n  }\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  return data;\n}\n\nfunction onCommit() {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n}\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst Wrapper = styled.div`\n  --padding: 24px;\n  position: relative;\n\n  @media (max-width: 1200px) {\n    --padding: 12px;\n  }\n\n`;\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n`;\n\nconst SliderWrapper = styled.div`\n\n  .slider-container {\n  width: 100%;\n  margin: 1em;\n  text-align: center;\n}\n\n.slider {\n  width: 100%;\n  height: 1em;\n  background: #ddd;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: #4CAF50;\n  cursor: pointer;\n}\n\n.slider-value {\n  display: block;\n  margin-top: 10px;\n}\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  pointer-events: none;\n  position: absolute;\n  top: var(--padding);\n  left: var(--padding);\n\n  img {\n    object-fit: cover;\n    border-radius: 40px;\n    width: 100%;\n    height: 100%;\n  }\n\n  @media (max-width: 992px) {\n    display: none;\n  }\n`;\n\nconst Textarea = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n\n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 164px;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2))\n      calc(40px + (var(--padding) * 2));\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n\n    @media (max-width: 1200px) {\n      min-height: 124px;\n    }\n\n    @media (max-width: 992px) {\n      padding-left: var(--padding);\n    }\n  }\n\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n\n  textarea {\n    transition: all 200ms;\n\n    &::placeholder {\n      opacity: 1;\n      color: #687076;\n    }\n\n    &:empty + p {\n      display: block;\n    }\n\n    &:focus {\n      box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nconst TextareaDescription = styled.p`\n  position: absolute;\n  top: calc(var(--padding) + 24px);\n  left: calc(42px + (var(--padding) * 2));\n  right: var(--padding);\n  font-size: 10px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n  pointer-events: none;\n  display: none;\n\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n\n    &:hover,\n    &:focus {\n      color: #000;\n      text-decoration: underline;\n    }\n  }\n\n  @media (max-width: 992px) {\n    left: var(--padding);\n  }\n`;\n\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n\n  .commit-post-button,\n  .preview-post-button {\n    background: #59e692;\n    color: #09342e;\n    border-radius: 40px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &:hover,\n    &:focus {\n      background: rgb(112 242 164);\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .preview-post-button {\n    color: #11181c;\n    background: #f1f3f5;\n    padding: 0;\n    width: 40px;\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n  }\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\n\nconst Domain = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  left: var(--padding);\n`;\n\nconst PreviewWrapper = styled.div`\n  position: relative;\n  padding: var(--padding);\n  padding-bottom: calc(40px + (var(--padding) * 2));\n`;\n\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nreturn (\n  <>\n    <Card>\n      <Wrapper>\n        {state.showPreview ? (\n          <PreviewWrapper>\n            <Widget\n              src=\"near/widget/Posts.Post\"\n              props={{\n                accountId: context.accountId,\n                blockHeight: \"now\",\n                content,\n              }}\n            />\n          </PreviewWrapper>\n        ) : (\n          <>\n            <Avatar>\n              <Widget\n                src=\"mob.near/widget/Image\"\n                props={{\n                  image: profile.image,\n                  alt: profile.name,\n                  fallbackUrl:\n                    \"https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm\",\n                }}\n              />\n            </Avatar>\n            <Textarea data-value={state.text}>\n              <textarea\n                placeholder=\"Vibe check!\"\n                onInput={(event) => textareaInputHandler(event.target.value)}\n                onKeyUp={(event) => {\n                  if (event.key === \"Escape\") {\n                    State.update({ showAccountAutocomplete: false });\n                  }\n                }}\n                value={state.text}\n              />\n            </Textarea>\n          </>\n        )}\n        {autocompleteEnabled && state.showAccountAutocomplete && (\n          <AutoComplete>\n            <Widget\n              src=\"near/widget/AccountAutocomplete\"\n              props={{\n                term: state.text.split(\"@\").pop(),\n                onSelect: autoCompleteAccountId,\n                onClose: () => State.update({ showAccountAutocomplete: false }),\n              }}\n            />\n          </AutoComplete>\n        )}\n\n        <Actions>\n          {!state.showPreview && (\n            <IpfsImageUpload\n              image={state.image}\n              className=\"upload-image-button bi bi-image\"\n            />\n          )}\n          <button\n            type=\"button\"\n            disabled={!state.text}\n            className=\"preview-post-button\"\n            title={state.showPreview ? \"Edit Post\" : \"Preview Post\"}\n            onClick={() => State.update({ showPreview: !state.showPreview })}\n          >\n            {state.showPreview ? (\n              <i className=\"bi bi-pencil\" />\n            ) : (\n              <i className=\"bi bi-eye-fill\" />\n            )}\n          </button>\n\n          <CommitButton\n            disabled={!state.text}\n            force\n            data={composeData}\n            onCommit={onCommit}\n            className=\"commit-post-button\"\n          >\n            Vibe Check\n          </CommitButton>\n        </Actions>\n      </Wrapper>\n      <SliderWrapper>\n        {showSliders && (\n          <div>\n            <label className=\"slider-label\" for=\"friendlySlider\">\n              \u2764\ufe0f Friendliness :{\" \"}\n            </label>\n            <div className=\"slider-container\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                id=\"friendlySlider\"\n                max={maxSliderPoints}\n                value={state.friendliness}\n                onChange={handleSliderFriendliness}\n                className=\"slider\"\n              />\n              <span className=\"slider-value\">{sliderValue}</span>\n            </div>\n            <label className=\"slider-label\" for=\"energySlider\">\n              \u26a1\ufe0f Energy :{\" \"}\n            </label>\n            <div className=\"slider-container\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                id=\"energySlider\"\n                max={maxSliderPoints}\n                value={state.energy}\n                onChange={handleSliderEnergy}\n                className=\"slider\"\n              />\n              <span className=\"slider-value\">{sliderValue}</span>\n            </div>\n            <label className=\"slider-label\" for=\"densitySlider\">\n              \ud83e\uddca Density :{\" \"}\n            </label>\n            <div className=\"slider-container\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                id=\"densitySlider\"\n                max={maxSliderPoints}\n                value={state.density}\n                onChange={handleSliderDensity}\n                className=\"slider\"\n              />\n              <span className=\"slider-value\">{sliderValue}</span>\n            </div>\n            <label className=\"slider-label\" for=\"diversitySlider\">\n              \ud83c\udf08 Diversity :{\" \"}\n            </label>\n            <div className=\"slider-container\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                id=\"diversitySlider\"\n                max={maxSliderPoints}\n                value={state.diversity}\n                onChange={handleSliderDiversity}\n                className=\"slider\"\n              />\n              <span className=\"slider-value\">{sliderValue}</span>\n            </div>\n          </div>\n        )}\n      </SliderWrapper>\n    </Card>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/proofofvibes.near/widget/Vibes.Feed.Post.create", "fact_widget_deployments_id": "5595ce1130b4101cc738d392a9fcff5e", "inserted_timestamp": "2023-08-01T13:34:45.605Z", "modified_timestamp": "2023-08-01T13:34:45.605Z", "__row_index": 23}