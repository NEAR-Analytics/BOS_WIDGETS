{"tx_hash": "FHmEwKA3qBDtqWtZmXVoWGGdPk6DbLrkug4br4uhoKtZ", "action_id_social": "ALyUUYGjCVRViL1pFRwwHCBA5dJ5uDmCR7i9ZAof9rNy-0-widget", "block_id": 101131107, "block_timestamp": "2023-09-14T20:25:16.372Z", "signer_id": "itexpert120-contra.near", "widget_name": "EventForm", "source_code": "const UUID = {\r\n  generate: (template) => {\r\n    if (typeof template !== \"string\") {\r\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\r\n    }\r\n    return template.replace(/[xy]/g, (c) => {\r\n      var r = (Math.random() * 16) | 0;\r\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n      return v.toString(16);\r\n    });\r\n  },\r\n};\r\n\r\nconst getCurrentDate = (date, time) => {\r\n  const currentDate = date && time ? new Date(`${date}T${time}`) : new Date();\r\n\r\n  const year = currentDate.getFullYear();\r\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, \"0\"); // Months are 0-indexed\r\n  const day = currentDate.getDate().toString().padStart(2, \"0\");\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst getCurrentTime = (date, time) => {\r\n  const currentDate = date && time ? new Date(`${date}T${time}`) : new Date();\r\n\r\n  const hours = currentDate.getHours().toString().padStart(2, \"0\");\r\n  const minutes = currentDate.getMinutes().toString().padStart(2, \"0\");\r\n\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\nconst isoTime = (date, time) => {\r\n  const temp = new Date(`${date} ${time}`);\r\n  const now = temp.toISOString();\r\n\r\n  return now.split(\"T\")[1];\r\n};\r\n\r\nconst isoDate = (date, time) => {\r\n  const temp = new Date(`${date} ${time}`);\r\n  const now = temp.toISOString();\r\n\r\n  return now.split(\"T\")[0];\r\n};\r\n\r\n\r\nconst data = props.data;\r\n\r\nconst accountId = context.accountId;\r\n\r\nif (!accountId) {\r\n  return \"Please connect your NEAR account\";\r\n}\r\n\r\nconst addEvent = props.addEvent;\r\nconst proposeEvent = props.proposeEvent;\r\n\r\nlet user_account = context.accountId;\r\n\r\nif (!data) {\r\n  State.init({\r\n    id: UUID.generate(),\r\n    title: \"\",\r\n    description: {\r\n      content: \"# New Event Description\",\r\n    },\r\n    start: getCurrentDate(),\r\n    startTime: getCurrentTime(),\r\n    end: getCurrentDate(),\r\n    endTime: getCurrentTime(),\r\n    location: \"\",\r\n    link: \"\",\r\n    organizer: user_account,\r\n    isAllDay: false,\r\n    category: \"\",\r\n    logo: null,\r\n    background: null,\r\n    customWidget: \"\",\r\n    daoId: \"\",\r\n    tempHash: \"\",\r\n    hashTags: [],\r\n  });\r\n} else {\r\n  State.init({\r\n    id: data.id || UUID.generate(),\r\n    title: data.title,\r\n    description: data.description,\r\n    start: getCurrentDate(data.start, data.startTime),\r\n    startTime: getCurrentTime(data.start, data.startTime),\r\n    end: getCurrentDate(data.end, data.endTime),\r\n    endTime: getCurrentTime(data.end, data.endTime),\r\n    location: data.location,\r\n    link: data.link,\r\n    organizer: data.organizer,\r\n    isAllDay: data.isAllDay,\r\n    category: data.category,\r\n    logo: data.logo,\r\n    background: data.background,\r\n    customWidget: data.customWidget,\r\n    daoId: data.daoId,\r\n    tempHash: \"\",\r\n    hashTags: JSON.parse(data.hashTags),\r\n  });\r\n}\r\n\r\nconst onTitleChange = ({ target }) => {\r\n  State.update({ title: target.value });\r\n};\r\n\r\nconst onDescriptionChange = (target) => {\r\n  State.update({ description: target });\r\n};\r\n\r\nconst onStartChange = ({ target }) => {\r\n  State.update({ start: target.value });\r\n};\r\n\r\nconst onStartTimeChange = ({ target }) => {\r\n  State.update({ startTime: target.value });\r\n};\r\n\r\nconst onEndChange = ({ target }) => {\r\n  State.update({ end: target.value });\r\n};\r\n\r\nconst onEndTimeChange = ({ target }) => {\r\n  State.update({ endTime: target.value });\r\n};\r\n\r\nconst onLocationChange = ({ target }) => {\r\n  State.update({ location: target.value });\r\n};\r\n\r\nconst onLinkChange = ({ target }) => {\r\n  State.update({ link: target.value });\r\n};\r\n\r\nconst onOrganizerChange = ({ target }) => {\r\n  State.update({ organizer: target.value });\r\n};\r\n\r\nconst onCategoryChange = ({ target }) => {\r\n  State.update({ category: target.value });\r\n};\r\n\r\nconst onIsAllDayChange = () => {\r\n  State.update({ isAllDay: !state.isAllDay });\r\n};\r\n\r\nconst onLogoChange = (target) => {\r\n  State.update({ logo: target });\r\n};\r\n\r\nconst onBackgroundChange = (target) => {\r\n  State.update({ background: target });\r\n};\r\n\r\nconst onTempHashChange = ({ target }) => {\r\n  State.update({ tempHash: target.value });\r\n};\r\n\r\nconst onHashTagAdd = () => {\r\n  State.update({ hashTags: [...state.hashTags, state.tempHash] });\r\n  State.update({ tempHash: \"\" });\r\n};\r\n\r\nconst onHashTagRemove = (target) => {\r\n  const newTags = state.hashTags.filter((item) => item !== target);\r\n  State.update({ hashTags: newTags });\r\n};\r\n\r\nconst onCustomWidgetChange = ({ target }) => {\r\n  State.update({ customWidget: target.value });\r\n};\r\n\r\nconst onDaoIDChange = ({ target }) => {\r\n  State.update({ daoId: target.value });\r\n};\r\n\r\nconst clearFields = () => {\r\n  State.update({\r\n    title: \"\",\r\n    description: {\r\n      content: \"# New Event Description\",\r\n    },\r\n    start: getCurrentDate(),\r\n    startTime: getCurrentTime(),\r\n    end: getCurrentDate(),\r\n    endTime: getCurrentTime(),\r\n    location: \"\",\r\n    link: \"\",\r\n    organizer: user_account,\r\n    isAllDay: false,\r\n    category: \"\",\r\n    logo: null,\r\n    background: null,\r\n    tempHash: \"\",\r\n    customWidget: \"\",\r\n    daoId: \"\",\r\n    hashTags: [],\r\n  });\r\n};\r\n\r\nconst createNewEvent = () => {\r\n  const newEvent = {\r\n    data: {\r\n      id: state.id,\r\n      title: state.title,\r\n      description: state.description,\r\n      start: isoDate(state.start, state.startTime),\r\n      startTime: isoTime(state.start, state.startTime),\r\n      end: isoDate(state.end, state.endTime),\r\n      endTime: isoTime(state.end, state.endTime),\r\n      location: state.location,\r\n      link: state.link,\r\n      organizer: state.organizer,\r\n      isAllDay: state.isAllDay,\r\n      category: state.category,\r\n      logo: state.logo,\r\n      background: state.background,\r\n      hashTags: state.hashTags,\r\n    },\r\n    template: {\r\n      src: \"itexpert120-contra.near/widget/EventView\",\r\n    },\r\n    type: \"every.near/type/event\",\r\n  };\r\n\r\n  return newEvent;\r\n};\r\n\r\nconst handleProposeEvent = () => {\r\n  const newEvent = createNewEvent();\r\n\r\n  proposeEvent(newEvent);\r\n  clearFields();\r\n};\r\n\r\nconst handleEventEdit = () => {\r\n  const newEvent = {\r\n    data: {\r\n      id: state.id,\r\n      title: state.title,\r\n      description: state.description,\r\n      start: isoDate(state.start, state.startTime),\r\n      startTime: isoTime(state.start, state.startTime),\r\n      end: isoDate(state.end, state.endTime),\r\n      endTime: isoTime(state.end, state.endTime),\r\n      location: state.location,\r\n      link: state.link,\r\n      organizer: state.organizer,\r\n      isAllDay: state.isAllDay,\r\n      category: state.category,\r\n      logo: state.logo,\r\n      background: state.background,\r\n      hashTags: state.hashTags,\r\n    },\r\n    template: {\r\n      src: \"itexpert120-contra.near/widget/EventView\",\r\n    },\r\n    type: \"every.near/type/event\",\r\n  };\r\n\r\n  addEvent(newEvent);\r\n};\r\n\r\nconst handleNewEvent = () => {\r\n  const newEvent = {\r\n    data: {\r\n      id: state.id,\r\n      title: state.title,\r\n      description: state.description,\r\n      start: isoDate(state.start, state.startTime),\r\n      startTime: isoTime(state.start, state.startTime),\r\n      end: isoDate(state.end, state.endTime),\r\n      endTime: isoTime(state.end, state.endTime),\r\n      location: state.location,\r\n      link: state.link,\r\n      organizer: state.organizer,\r\n      isAllDay: state.isAllDay,\r\n      category: state.category,\r\n      logo: state.logo,\r\n      background: state.background,\r\n      hashTags: state.hashTags,\r\n    },\r\n    template: {\r\n      src: \"itexpert120-contra.near/widget/EventView\",\r\n    },\r\n    type: \"every.near/type/event\",\r\n  };\r\n\r\n  addEvent(newEvent);\r\n  clearFields();\r\n};\r\n\r\nconst EventForm = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"title\">\r\n            Event Title\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"title\"\r\n            value={state.title}\r\n            onChange={onTitleChange}\r\n            placeholder=\"New Event Title\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"description\">\r\n            Event Description\r\n          </label>\r\n          <Widget\r\n            src=\"efiz.near/widget/every.markdown.create\"\r\n            props={{\r\n              data: state.description,\r\n              onChange: onDescriptionChange,\r\n              height: \"250px\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col\">\r\n            <label for=\"start\">Event Start Date</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"start\"\r\n              type=\"date\"\r\n              value={state.start}\r\n              onChange={onStartChange}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label for=\"startTime\">Event Start Time</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"startTime\"\r\n              type=\"time\"\r\n              value={state.startTime}\r\n              onChange={onStartTimeChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row  mb-3\">\r\n          <div className=\"col\">\r\n            <label for=\"end\">Event End Date</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"end\"\r\n              type=\"date\"\r\n              value={state.end}\r\n              onChange={onEndChange}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label for=\"endTime\">Event End Time</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"endTime\"\r\n              type=\"time\"\r\n              value={state.endTime}\r\n              onChange={onEndTimeChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"location\">\r\n            Event Location\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"location\"\r\n            value={state.location}\r\n            onChange={onLocationChange}\r\n            placeholder=\"New Event Location\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"link\">\r\n            Event Link\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"link\"\r\n            type=\"url\"\r\n            value={state.link}\r\n            onChange={onLinkChange}\r\n            placeholder=\"New Event Link\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"organizer\">\r\n            Event Organizer\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"organizer\"\r\n            value={state.organizer}\r\n            onChange={onOrganizerChange}\r\n            placeholder=\"New Event Organizer\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <div class=\"form-check\">\r\n            <label class=\"form-check-label\" for=\"isAllDay\">\r\n              All Day Event\r\n            </label>\r\n            <input\r\n              value={state.isAllDay}\r\n              checked={state.isAllDay}\r\n              class=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"isAllDay\"\r\n              onChange={onIsAllDayChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"category\">\r\n            Event Category\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"category\"\r\n            value={state.category}\r\n            onChange={onCategoryChange}\r\n            placeholder=\"New Event Category\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"customWidget\">\r\n            Custom Event Card Source\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"customWidget\"\r\n            value={state.customWidget}\r\n            onChange={onCustomWidgetChange}\r\n            placeholder=\"Custom Event Card Source\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3 row \">\r\n          <div className=\"col\">\r\n            <label>Logo Image</label>\r\n            <Widget\r\n              src=\"near/widget/ImageEditorTabs\"\r\n              props={{ image: state.logo, onChange: onLogoChange }}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Background Image</label>\r\n            <Widget\r\n              src=\"near/widget/ImageEditorTabs\"\r\n              props={{ image: state.background, onChange: onBackgroundChange }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label for=\"hashtags\">\r\n            <p>\r\n              Hashtags:{\" \"}\r\n              {state.hashTags.length !== 0 &&\r\n                state.hashTags.map((item) => (\r\n                  <>\r\n                    <span className=\"badge text-bg-primary\">\r\n                      {item}{\" \"}\r\n                      <i\r\n                        className=\"bi bi-x ms-2 p-1\"\r\n                        onClick={() => onHashTagRemove(item)}\r\n                      ></i>\r\n                    </span>{\" \"}\r\n                  </>\r\n                ))}\r\n            </p>\r\n          </label>\r\n          <div className=\"mb-3 d-flex gap-3\">\r\n            <input\r\n              id=\"hashtags\"\r\n              value={state.tempHash}\r\n              onChange={onTempHashChange}\r\n              placeholder=\"New Event Tags\"\r\n            />\r\n            <button onClick={onHashTagAdd}>Add</button>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label for=\"daoId\">DAO ID</label>\r\n            <input\r\n              id=\"daoId\"\r\n              name=\"daoId\"\r\n              value={state.daoId}\r\n              onChange={onDaoIDChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <div className=\"row\">\r\n            {!data ? (\r\n              <div className=\"col\">\r\n                <button onClick={handleNewEvent}>Add Event</button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"col\">\r\n                <button onClick={handleEventEdit}>Edit Event</button>\r\n              </div>\r\n            )}\r\n            <div className=\"col\">\r\n              <Widget\r\n                src=\"itexpert120-contra.near/widget/EventProposalButton\"\r\n                props={{ daoId: state.daoId, event: createNewEvent() }}\r\n              />\r\n            </div>\r\n            <div className=\"col\">\r\n              <button onClick={clearFields}>Clear Fields</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn <EventForm />;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/itexpert120-contra.near/widget/EventForm", "fact_widget_deployments_id": "e07f236000174c81da2390593b186c60", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}