{"tx_hash": "Bc8SngkXHbA94xdBw9m35Kr3i1g6ogezwHv4WJdRtB4q", "action_id_social": "GFzUEWKBnDV47mBVBw6YqMx5eBPvd5ow3GbCkotFepxn-0-widget", "block_id": 109069500, "block_timestamp": "2023-12-29T07:59:54.611Z", "signer_id": "itexpert120-contra.near", "widget_name": "devhub.entity.post.PostEditor", "source_code": "const cleanDescription = (description) => {\n  return description\n    ? description.replace(\n        /###### Requested amount: .+?\\n###### Requested sponsor: @[^\\s]+\\n/g,\n        \"\"\n      )\n    : description;\n};\n\nconst postType = props.postType ?? \"Sponsorship\";\nconst parentId = props.parentId ?? null;\nconst postId = props.postId ?? null;\nconst mode = props.mode ?? \"Create\";\nconst toggleEditor = props.toggleEditor;\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\n\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\ninitState({\n  seekingFunding: props.seekingFunding ?? false,\n  author_id: context.accountId,\n  // Should be a list of objects with field \"name\".\n  labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings: [],\n  postType,\n  name: props.name ?? \"\",\n  description:\n    (props.postType === \"Solution\"\n      ? cleanDescription(props.description)\n      : props.description) ?? \"\",\n  amount: props.amount ?? \"0\",\n  token: props.token ?? \"USDT\",\n  supervisor: props.supervisor ?? \"neardevdao.near\",\n  githubLink: props.githubLink ?? \"\",\n  warning: \"\",\n  draftStateApplied: false,\n  mentionInput: \"\", // text next to @ tag\n  mentionsArray: [], // all the mentions in the description\n});\n\n/* INCLUDE: \"core/lib/autocomplete\" */\nconst autocompleteEnabled = true;\n\nconst AutoComplete = styled.div`\n  z-index: 5;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nif (props.transactionHashes) {\n  const transaction = useCache(\n    () =>\n      asyncFetch(\"https://rpc.mainnet.near.org\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: \"dontcare\",\n          method: \"tx\",\n          params: [props.transactionHashes, context.accountId],\n        }),\n      }).then((res) => res),\n    props.transactionHashes + context.accountId,\n    { subscribe: false }\n  );\n\n  if (transaction !== null) {\n    const transaction_method_name =\n      transaction?.body?.result?.transaction?.actions[0].FunctionCall\n        .method_name;\n\n    const is_edit_or_add_post_transaction =\n      transaction_method_name == \"add_post\" ||\n      transaction_method_name == \"edit_post\";\n\n    if (is_edit_or_add_post_transaction) {\n      props.onDraftStateChange(null);\n    }\n  }\n}\n\nfunction textareaInputHandler(value) {\n  const words = value.split(/\\s+/);\n  const allMentiones = words\n    .filter((word) => word.startsWith(\"@\"))\n    .map((mention) => mention.slice(1));\n  const newMentiones = allMentiones.filter(\n    (item) => !state.mentionsArray.includes(item)\n  );\n\n  State.update((lastKnownState) => ({\n    ...lastKnownState,\n    text: value,\n    showAccountAutocomplete: newMentiones?.length > 0,\n    mentionsArray: allMentiones,\n    mentionInput: newMentiones?.[0] ?? \"\",\n  }));\n}\n\nfunction autoCompleteAccountId(id) {\n  // to make sure we update the @ at correct index\n  let currentIndex = 0;\n  const updatedDescription = state.description.replace(\n    /(?:^|\\s)(@[^\\s]*)/g,\n    (match) => {\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\n        currentIndex++;\n        return ` @${id}`;\n      } else {\n        currentIndex++;\n        return match;\n      }\n    }\n  );\n  State.update((lastKnownState) => ({\n    ...lastKnownState,\n    handler: \"autocompleteSelected\",\n    description: updatedDescription,\n    showAccountAutocomplete: false,\n  }));\n}\n\n/* END_INCLUDE: \"core/lib/autocomplete\" */\n\nif (!state.draftStateApplied && props.draftState) {\n  State.update({ ...props.draftState, draftStateApplied: true });\n}\n\nlet fields = {\n  Comment: [\"description\"],\n  Idea: [\"name\", \"description\"],\n  Solution: [\"name\", \"description\", \"fund_raising\"],\n  Attestation: [\"name\", \"description\"],\n  Sponsorship: [\n    \"name\",\n    \"description\",\n    \"amount\",\n    \"sponsorship_token\",\n    \"supervisor\",\n  ],\n  Github: [\"githubLink\", \"name\", \"description\"],\n}[postType];\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: \"devgovgigs.near\",\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst tokenMapping = {\n  NEAR: \"NEAR\",\n  USDT: {\n    NEP141: {\n      address: \"usdt.tether-token.near\",\n    },\n  },\n  USDC: {\n    NEP141: {\n      address:\n        \"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\",\n    },\n  },\n};\n\nconst onSubmit = () => {\n  let labels = state.labelStrings;\n  var body = {\n    Comment: { description: state.description, comment_version: \"V2\" },\n    Idea: {\n      name: state.name,\n      description: state.description,\n      idea_version: \"V1\",\n    },\n    Solution: {\n      name: state.name,\n      description: generateDescription(\n        state.description,\n        state.amount,\n        state.token,\n        state.supervisor,\n        state.seekingFunding\n      ),\n      solution_version: \"V1\",\n    },\n    Attestation: {\n      name: state.name,\n      description: state.description,\n      attestation_version: \"V1\",\n    },\n    Sponsorship: {\n      name: state.name,\n      description: state.description,\n      amount: state.amount,\n      sponsorship_token: tokenMapping[state.token],\n      supervisor: state.supervisor,\n      sponsorship_version: \"V1\",\n    },\n    Github: {\n      name: state.name,\n      description: state.description,\n      github_version: \"V0\",\n      github_link: state.githubLink,\n    },\n  }[postType];\n  body[\"post_type\"] = postType;\n  if (!context.accountId) {\n    return;\n  }\n  let txn = [];\n  if (mode == \"Create\") {\n    props.onDraftStateChange(\n      Object.assign({}, state, { parent_post_id: parentId })\n    );\n    txn.push({\n      contractName: \"devgovgigs.near\",\n      methodName: \"add_post\",\n      args: {\n        parent_id: parentId,\n        labels,\n        body,\n      },\n      gas: Big(10).pow(14),\n    });\n  } else if (mode == \"Edit\") {\n    props.onDraftStateChange(\n      Object.assign({}, state, { edit_post_id: postId })\n    );\n    txn.push({\n      contractName: \"devgovgigs.near\",\n      methodName: \"edit_post\",\n      args: {\n        id: postId,\n        labels,\n        body,\n      },\n      gas: Big(10).pow(14),\n    });\n  }\n  if (mode == \"Create\" || mode == \"Edit\") {\n    if (grantNotify === false) {\n      txn.unshift({\n        contractName: \"social.near\",\n        methodName: \"grant_write_permission\",\n        args: {\n          predecessor_id: \"devgovgigs.near\",\n          keys: [context.accountId + \"/index/notify\"],\n        },\n        gas: Big(10).pow(14),\n        deposit: Big(10).pow(22),\n      });\n    }\n    Near.call(txn);\n  }\n};\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst checkLabel = (label) => {\n  Near.asyncView(\"devgovgigs.near\", \"is_allowed_to_use_labels\", {\n    editor: context.accountId,\n    labels: [label],\n  }).then((allowed) => {\n    if (allowed) {\n      State.update({ warning: \"\" });\n    } else {\n      State.update({\n        warning:\n          'The label \"' +\n          label +\n          '\" is protected and can only be added by moderators',\n      });\n      return;\n    }\n  });\n};\n\nconst setLabels = (labels) => {\n  labels = labels.map((o) => {\n    o.name = normalizeLabel(o.name);\n    return o;\n  });\n  if (labels.length < state.labels.length) {\n    let oldLabels = new Set(state.labels.map((label) => label.name));\n    for (let label of labels) {\n      oldLabels.delete(label.name);\n    }\n    let removed = oldLabels.values().next().value;\n    Near.asyncView(\"devgovgigs.near\", \"is_allowed_to_use_labels\", {\n      editor: context.accountId,\n      labels: [removed],\n    }).then((allowed) => {\n      if (allowed) {\n        let labelStrings = labels.map(({ name }) => name);\n        State.update({ labels, labelStrings });\n      } else {\n        State.update({\n          warning:\n            'The label \"' +\n            removed +\n            '\" is protected and can only be updated by moderators',\n        });\n        return;\n      }\n    });\n  } else {\n    let labelStrings = labels.map((o) => {\n      return o.name;\n    });\n    State.update({ labels, labelStrings });\n  }\n};\nconst existingLabelStrings =\n  Near.view(\"devgovgigs.near\", \"get_all_allowed_labels\", {\n    editor: context.accountId,\n  }) ?? [];\nconst existingLabelSet = new Set(existingLabelStrings);\nconst existingLabels = existingLabelStrings\n  .filter((it) => it !== \"blog\") // remove blog label so users cannot publish blogs from feed\n  .map((s) => {\n    return { name: s };\n  });\n\nconst labelEditor = (\n  <div className=\"col-lg-12  mb-2\">\n    Labels:\n    <Typeahead\n      multiple\n      labelKey=\"name\"\n      onInputChange={checkLabel}\n      onChange={setLabels}\n      options={existingLabels}\n      placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n      selected={state.labels}\n      positionFixed\n      allowNew={(results, props) => {\n        return (\n          !existingLabelSet.has(props.text) &&\n          props.text.toLowerCase() !== \"blog\" && // dont allow adding \"Blog\"\n          props.selected.filter((selected) => selected.name === props.text)\n            .length == 0 &&\n          Near.view(\"devgovgigs.near\", \"is_allowed_to_use_labels\", {\n            editor: context.accountId,\n            labels: [props.text],\n          })\n        );\n      }}\n    />\n  </div>\n);\n\nconst githubLinkDiv = (\n  <div className=\"col-lg-12  mb-2\">\n    Github Issue URL:\n    <input\n      type=\"text\"\n      value={state.githubLink}\n      onChange={(event) => State.update({ githubLink: event.target.value })}\n    />\n  </div>\n);\n\nconst nameDiv = (\n  <div className=\"col-lg-6  mb-2\">\n    Title:\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n);\n\nconst amountDiv = (\n  <div className=\"col-lg-6  mb-2\">\n    Amount:\n    <input\n      type=\"text\"\n      value={state.amount}\n      onChange={(event) => State.update({ amount: event.target.value })}\n    />\n  </div>\n);\n\nconst tokenDiv = (\n  <div className=\"col-lg-6 mb-2\">\n    Currency\n    <select\n      onChange={(event) => State.update({ token: event.target.value })}\n      class=\"form-select\"\n      aria-label=\"Select currency\"\n      value={state.token}\n    >\n      <option value=\"USDT\">USDT</option>\n      <option value=\"NEAR\">NEAR</option>\n      <option value=\"USDC\">USDC</option>\n    </select>\n  </div>\n);\n\nconst supervisorDiv = (\n  <div className=\"col-lg-6 mb-2\">\n    Supervisor:\n    <input\n      type=\"text\"\n      value={state.supervisor}\n      onChange={(event) => State.update({ supervisor: event.target.value })}\n    />\n  </div>\n);\n\nconst callDescriptionDiv = () => {\n  return (\n    <div className=\"col-lg-12  mb-2\">\n      Description:\n      <br />\n      <Widget\n        src={\"itexpert120-contra.nera/widget/devhub.components.molecule.MarkdownEditor\"}\n        props={{\n          data: { handler: state.handler, content: state.description },\n          onChange: (content) => {\n            State.update({ description: content, handler: \"update\" });\n            textareaInputHandler(content);\n          },\n        }}\n      />\n      {autocompleteEnabled && state.showAccountAutocomplete && (\n        <AutoComplete>\n          <Widget\n            src=\"itexpert120-contra.nera/widget/devhub.components.molecule.AccountAutocomplete\"\n            props={{\n              term: state.mentionInput,\n              onSelect: autoCompleteAccountId,\n              onClose: () => State.update({ showAccountAutocomplete: false }),\n            }}\n          />\n        </AutoComplete>\n      )}\n    </div>\n  );\n};\n\nconst disclaimer = (\n  <p>\n    <i>\n      * Note, all projects that were granted sponsorships are required to pass\n      KYC to receive the funding.\n    </i>\n  </p>\n);\n\nconst isFundraisingDiv = (\n  // This is jank with just btns and not radios. But the radios were glitchy af\n  <>\n    <div class=\"mb-2\">\n      <p class=\"fs-6 fw-bold mb-1\">\n        Are you seeking funding for your solution?\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: true })}\n          />\n          Yes\n        </label>\n      </div>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: !state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: false })}\n          />\n          No\n        </label>\n      </div>\n    </div>\n  </>\n);\n\nconst fundraisingDiv = (\n  <div class=\"d-flex flex-column mb-2\">\n    <div className=\"col-lg-6 mb-2\">\n      Currency\n      <select\n        onChange={(event) => State.update({ token: event.target.value })}\n        class=\"form-select\"\n        aria-label=\"Default select example\"\n        value={state.token}\n      >\n        <option value=\"USDT\">USDT</option>\n        <option value=\"NEAR\">NEAR</option>\n        <option value=\"USDC\">USDC</option>\n      </select>\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      Requested amount\n      <span class=\"text-muted fw-normal\">(Numbers Only)</span>\n      <input\n        type=\"number\"\n        value={parseInt(state.amount) > 0 ? state.amount : \"\"}\n        min={0}\n        onChange={(event) => {\n          State.update({\n            amount: Number(\n              event.target.value.toString().replace(/e/g, \"\")\n            ).toString(),\n          });\n        }}\n      />\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      <p class=\"mb-1\">\n        Requested sponsor\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <p style={{ fontSize: \"13px\" }} class=\"m-0 text-muted fw-light\">\n        If you are requesting funding from a specific sponsor, please enter\n        their username.\n      </p>\n      <div class=\"input-group flex-nowrap\">\n        <span class=\"input-group-text\" id=\"addon-wrapping\">\n          @\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Enter username\"\n          value={state.supervisor}\n          onChange={(event) => State.update({ supervisor: event.target.value })}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\n  const fundingText =\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\n` : \"\";\n  const supervisorText = supervisor\n    ? `###### Requested sponsor: @${supervisor}\\n`\n    : \"\";\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\n}\n\nconst [tab, setTab] = useState(\"editor\");\n\nconst renamedPostType = postType == \"Submission\" ? \"Solution\" : postType;\n// Below there is a weird code with fields.includes(\"githubLink\") ternary operator.\n// This is to hack around rendering bug of near.social.\nreturn (\n  <div className=\"card\">\n    <div className=\"card-header\">\n      <div>\n        <ul class=\"nav nav-tabs\">\n          <li class=\"nav-item\">\n            <button\n              class={`nav-link ${tab === \"editor\" ? \"active\" : \"\"}`}\n              onClick={() => setTab(\"editor\")}\n            >\n              Editor\n            </button>\n          </li>\n          <li class=\"nav-item\">\n            <button\n              class={`nav-link ${tab === \"preview\" ? \"active\" : \"\"}`}\n              onClick={() => setTab(\"preview\")}\n            >\n              Preview\n            </button>\n          </li>\n        </ul>\n      </div>\n      {tab === \"editor\" && (\n        <div className=\"my-3\">\n          {mode} {renamedPostType}\n        </div>\n      )}\n      {tab === \"preview\" && <div className=\"my-3\">Post Preview</div>}\n    </div>\n\n    {tab === \"editor\" && (\n      <div class=\"card-body\">\n        {state.warning && (\n          <div\n            class=\"alert alert-warning alert-dismissible fade show\"\n            role=\"alert\"\n          >\n            {state.warning}\n            <button\n              type=\"button\"\n              class=\"btn-close\"\n              data-bs-dismiss=\"alert\"\n              aria-label=\"Close\"\n              onClick={() => State.update({ warning: \"\" })}\n            ></button>\n          </div>\n        )}\n        {/* This statement around the githubLinkDiv creates a weird render bug\n      where the title renders extra on state change. */}\n        {fields.includes(\"githubLink\") ? (\n          <div className=\"row\">\n            {fields.includes(\"githubLink\") && githubLinkDiv}\n            {labelEditor}\n            {fields.includes(\"name\") && nameDiv}\n            {fields.includes(\"description\") && callDescriptionDiv()}\n          </div>\n        ) : (\n          <div className=\"row\">\n            {labelEditor}\n            {fields.includes(\"name\") && nameDiv}\n            {fields.includes(\"amount\") && amountDiv}\n            {fields.includes(\"sponsorship_token\") && tokenDiv}\n            {fields.includes(\"supervisor\") && supervisorDiv}\n            {fields.includes(\"description\") && callDescriptionDiv()}\n            {fields.includes(\"fund_raising\") && isFundraisingDiv}\n            {state.seekingFunding &&\n              fields.includes(\"fund_raising\") &&\n              fundraisingDiv}\n          </div>\n        )}\n        <button\n          style={{\n            width: \"7rem\",\n            backgroundColor: \"#0C7283\",\n            color: \"#f3f3f3\",\n          }}\n          disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\n          className=\"btn btn-light mb-2 p-3\"\n          onClick={onSubmit}\n        >\n          Submit\n        </button>\n        <button\n          style={{\n            width: \"7rem\",\n            backgroundColor: \"#fff\",\n            color: \"#000\",\n          }}\n          className=\"btn btn-light mb-2 p-3\"\n          onClick={toggleEditor}\n        >\n          Cancel\n        </button>\n        {disclaimer}\n      </div>\n    )}\n    {tab === \"preview\" && (\n      <div class=\"card-body\">\n        <Widget\n          src=\"itexpert120-contra.nera/widget/devhub.entity.post.Post\"\n          props={{\n            isPreview: true,\n            id: 0, // irrelevant\n            post: {\n              author_id: state.author_id,\n              likes: [],\n              snapshot: {\n                editor_id: state.editor_id,\n                labels: state.labelStrings,\n                post_type: postType,\n                name: state.name,\n                description:\n                  postType == \"Solution\"\n                    ? generateDescription(\n                        state.description,\n                        state.amount,\n                        state.token,\n                        state.supervisor,\n                        state.seekingFunding\n                      )\n                    : state.description,\n                amount: state.amount,\n                sponsorship_token: state.token,\n                supervisor: state.supervisor,\n                github_link: state.githubLink,\n              },\n            },\n          }}\n        />\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/itexpert120-contra.near/widget/devhub.entity.post.PostEditor", "fact_widget_deployments_id": "e310a8a4b404c0274a2c0c4c9566325e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 26}