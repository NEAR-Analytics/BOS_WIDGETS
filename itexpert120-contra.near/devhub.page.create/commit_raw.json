{"tx_hash": "5B1X6qxaMRbaqY1FL1xmdzyVa2qhGn3ffYvapSNLPG1h", "action_id_social": "DzMfEqC9r6A2L2qvRD8yNPB7twFNKSekNAytGNVD8LQZ-0-widget", "block_id": 108957235, "block_timestamp": "2023-12-27T21:38:01.880Z", "signer_id": "itexpert120-contra.near", "widget_name": "devhub.page.create", "source_code": "const CenteredMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 384px;\n`;\n\nif (!context.accountId) {\n  return (\n    <CenteredMessage height={\"384px\"}>\n      <h2>Please sign in to create a post.</h2>\n    </CenteredMessage>\n  );\n}\n\nconst postTypeOptions = {\n  Idea: {\n    name: \"Idea\",\n    icon: \"bi-lightbulb\",\n\n    description:\n      \"Get feedback from the community about a problem, opportunity, or need.\",\n  },\n\n  Solution: {\n    name: \"Solution\",\n    icon: \"bi-rocket\",\n\n    description:\n      \"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\",\n  },\n};\n\nconst typeSwitch = (optionName) => {\n  State.update({\n    postType: optionName,\n  });\n};\n\nfunction initLabels() {\n  const labels = [];\n  if (props.labels) {\n    labels.push(...props.labels.split(\",\"));\n  }\n  if (props.referral) {\n    labels.push(`referral:${props.referral}`);\n  }\n  return labels;\n}\n\nState.init({\n  seekingFunding: false,\n  labels: initLabels(),\n  postType: \"Idea\",\n  name: props.name ?? \"\",\n  description: props.description ?? \"\",\n  amount: props.amount ?? \"\",\n  token: props.token ?? \"USDT\",\n  supervisor: props.supervisor ?? \"neardevdao.near\",\n  warning: \"\",\n  mentionInput: \"\", // text next to @ tag\n  mentionsArray: [], // all the mentions in the description\n});\n\nconst autocompleteEnabled = true;\n\nconst AutoComplete = styled.div`\n  z-index: 5;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nfunction textareaInputHandler(value) {\n  const words = value.split(/\\s+/);\n  const allMentions = words\n    .filter((word) => word.startsWith(\"@\"))\n    .map((mention) => mention.slice(1));\n  const newMentions = allMentions.filter(\n    (item) => !state.mentionsArray.includes(item)\n  );\n\n  State.update({\n    text: value,\n    showAccountAutocomplete: newMentions?.length > 0,\n    mentionsArray: allMentions,\n    mentionInput: newMentions?.[0] ?? \"\",\n  });\n}\n\nfunction autoCompleteAccountId(id) {\n  // to make sure we update the @ at correct index\n  let currentIndex = 0;\n  const updatedDescription = state.description.replace(\n    /(?:^|\\s)(@[^\\s]*)/g,\n    (match) => {\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\n        currentIndex++;\n        return ` @${id}`;\n      } else {\n        currentIndex++;\n        return match;\n      }\n    }\n  );\n\n  State.update({\n    handler: \"autocompleteSelected\",\n    description: updatedDescription,\n    showAccountAutocomplete: false,\n  });\n}\n\nconst { href } = VM.require(\"itexpert120-contra.near/widget/core.lib.url\");\n\nif (!href) {\n  return <p>Loading modules...</p>;\n}\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: \"devgovgigs.near\",\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst onSubmit = () => {\n  let body = {\n    name: state.name,\n    description: generateDescription(\n      state.description,\n      state.amount,\n      state.token,\n      state.supervisor,\n      state.seekingFunding\n    ),\n  };\n\n  if (state.postType === \"Solution\") {\n    body = {\n      ...body,\n      post_type: \"Solution\",\n      solution_version: \"V1\",\n    };\n  } else {\n    // Idea\n    body = {\n      ...body,\n      post_type: \"Idea\",\n      idea_version: \"V1\",\n    };\n  }\n\n  let txn = [];\n\n  txn.push({\n    contractName: \"devgovgigs.near\",\n    methodName: \"add_post\",\n    args: {\n      parent_id: null,\n      labels: state.labels,\n      body: body,\n    },\n    gas: Big(10).pow(14),\n  });\n\n  if (grantNotify === false) {\n    txn.unshift({\n      contractName: \"social.near\",\n      methodName: \"grant_write_permission\",\n      args: {\n        predecessor_id: \"devgovgigs.near\",\n        keys: [context.accountId + \"/index/notify\"],\n      },\n      gas: Big(10).pow(14),\n      deposit: Big(10).pow(22),\n    });\n  }\n\n  Near.call(txn);\n};\n\nconst onIdeaClick = () => {\n  State.update({ postType: \"Idea\", seekingFunding: false });\n};\n\nconst onSolutionClick = () => {\n  State.update({ postType: \"Solution\" });\n};\n\nconst normalizeLabel = (label) =>\n  label\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst checkLabel = (label) => {\n  Near.asyncView(\"devgovgigs.near\", \"is_allowed_to_use_labels\", {\n    editor: context.accountId,\n    labels: [label],\n  }).then((allowed) => {\n    if (allowed) {\n      State.update({ warning: \"\" });\n    } else {\n      State.update({\n        warning:\n          'The label \"' +\n          label +\n          '\" is protected and can only be added by moderators',\n      });\n      return;\n    }\n  });\n};\n\nconst setLabels = (labels) => {\n  const normalizedLabels = labels.map((o) =>\n    o.customOption ? normalizeLabel(o.label) : normalizeLabel(o)\n  );\n  const uniqueLabels = [...new Set(normalizedLabels)];\n\n  if (uniqueLabels.length < state.labels.length) {\n    const removedLabel = state.labels.find(\n      (label) => !uniqueLabels.includes(label)\n    );\n\n    const allowed = Near.asyncView(\n      \"devgovgigs.near\",\n      \"is_allowed_to_use_labels\",\n      {\n        editor: context.accountId,\n        labels: [removedLabel],\n      }\n    );\n\n    if (allowed) {\n      State.update({ labels: uniqueLabels });\n    } else {\n      State.update({\n        warning: `The label \"${removedLabel}\" is protected and can only be updated by moderators`,\n      });\n    }\n  } else {\n    State.update({ labels: uniqueLabels });\n  }\n};\n\nconst existingLabels =\n  Near.view(\"devgovgigs.near\", \"get_all_allowed_labels\", {\n    editor: context.accountId,\n  }) ?? [];\nconst allowedLabels = existingLabels.filter((it) => it !== \"blog\"); // remove blog label so users cannot publish blogs from feed\n\nfunction NameEditor() {\n  return (\n    <div className=\"col-lg-12 mb-2\">\n      <label htmlFor=\"title\" className=\"fs-6 fw-bold mb-1\">\n        Title\n      </label>\n      <input\n        name=\"title\"\n        id=\"title\"\n        data-testid=\"name-editor\"\n        type=\"text\"\n        value={state.name}\n        onChange={(event) => State.update({ name: event.target.value })}\n      />\n    </div>\n  );\n}\n\nfunction DescriptionEditor() {\n  return (\n    <div className=\"col-lg-12 mb-2\">\n      <label htmlFor=\"description\" className=\"fs-6 fw-bold mb-1\">\n        Description\n      </label>\n      <Widget\n        src=\"itexpert120-contra.near/widget/devhub.components.molecule.MarkdownEditor\"\n        props={{\n          data: { handler: state.handler, content: state.description },\n          onChange: (content) => {\n            State.update({ description: content, handler: \"update\" });\n            textareaInputHandler(content);\n          },\n        }}\n      />\n      {autocompleteEnabled && state.showAccountAutocomplete && (\n        <AutoComplete>\n          <Widget\n            src=\"itexpert120-contra.near/widget/devhub.components.molecule.AccountAutocomplete\"\n            props={{\n              term: state.mentionInput,\n              onSelect: autoCompleteAccountId,\n              onClose: () => State.update({ showAccountAutocomplete: false }),\n            }}\n          />\n        </AutoComplete>\n      )}\n    </div>\n  );\n}\n\nfunction LabelsEditor() {\n  return (\n    <div className=\"col-lg-12 mb-2\">\n      <label htmlFor=\"labels\" className=\"fs-6 fw-bold mb-1\">\n        Labels\n      </label>\n      <Typeahead\n        multiple\n        onInputChange={checkLabel}\n        onChange={setLabels}\n        options={allowedLabels}\n        placeholder=\"near.social, widget, NEP, standard, protocol, tool\"\n        selected={state.labels}\n        positionFixed\n        allowNew={(results, props) => {\n          return (\n            !allowedLabels.includes(props.text) &&\n            props.text.toLowerCase() !== \"blog\" && // dont allow adding \"Blog\"\n            props.selected.filter((selected) => selected.name === props.text)\n              .length == 0 &&\n            Near.view(\"devgovgigs.near\", \"is_allowed_to_use_labels\", {\n              editor: context.accountId,\n              labels: [props.text],\n            })\n          );\n        }}\n      />\n    </div>\n  );\n}\n\nfunction FundraisingToggle() {\n  return (\n    <>\n      <div class=\"mb-2\">\n        <p class=\"fs-6 fw-bold mb-1\">\n          Are you seeking funding for your solution?\n          <span class=\"text-muted fw-normal\">(Optional)</span>\n        </p>\n        <div class=\"form-check form-check-inline\">\n          <label class=\"form-check-label\">\n            <button\n              className=\"btn btn-light p-0\"\n              style={{\n                backgroundColor: state.seekingFunding ? \"#0C7283\" : \"inherit\",\n                color: \"#f3f3f3\",\n                border: \"solid #D9D9D9\",\n                borderRadius: \"100%\",\n                height: \"20px\",\n                width: \"20px\",\n              }}\n              onClick={() => State.update({ seekingFunding: true })}\n            />\n            Yes\n          </label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n          <label class=\"form-check-label\">\n            <button\n              className=\"btn btn-light p-0\"\n              style={{\n                backgroundColor: !state.seekingFunding ? \"#0C7283\" : \"inherit\",\n                color: \"#f3f3f3\",\n                border: \"solid #D9D9D9\",\n                borderRadius: \"100%\",\n                height: \"20px\",\n                width: \"20px\",\n              }}\n              onClick={() => State.update({ seekingFunding: false })}\n            />\n            No\n          </label>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction Fundraising() {\n  return (\n    <div class=\"d-flex flex-column mb-2\">\n      <div className=\"col-lg-6  mb-2\">\n        Currency\n        <select\n          onChange={(event) => State.update({ token: event.target.value })}\n          class=\"form-select\"\n          aria-label=\"Default select\"\n        >\n          <option selected value=\"USDT\">\n            USDT\n          </option>\n          <option value=\"NEAR\">NEAR</option>\n          <option value=\"USDC\">USDC</option>\n        </select>\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        Requested amount{\" \"}\n        <span class=\"text-muted fw-normal\">(Numbers Only)</span>\n        <input\n          data-testid=\"requested-amount-editor\"\n          type=\"number\"\n          value={parseInt(state.amount) > 0 ? state.amount : \"\"}\n          min={0}\n          onChange={(event) =>\n            State.update({\n              amount: Number(\n                event.target.value.toString().replace(/e/g, \"\")\n              ).toString(),\n            })\n          }\n        />\n      </div>\n      <div className=\"col-lg-6 mb-2\">\n        <p class=\"mb-1\">\n          Requested sponsor <span class=\"text-muted fw-normal\">(Optional)</span>\n        </p>\n        <p style={{ fontSize: \"13px\" }} class=\"m-0 text-muted fw-light\">\n          If you are requesting funding from a specific sponsor, please enter\n          their username.\n        </p>\n        <div class=\"input-group flex-nowrap\">\n          <span class=\"input-group-text\" id=\"addon-wrapping\">\n            @\n          </span>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"Enter username\"\n            value={state.supervisor}\n            onChange={(event) =>\n              State.update({ supervisor: event.target.value })\n            }\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\n  const fundingText =\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\n` : \"\";\n  const supervisorText = supervisor\n    ? `###### Requested sponsor: @${supervisor}\\n`\n    : \"\";\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\n}\n\nconst [tab, setTab] = useState(\"editor\");\n\nreturn (\n  <div class=\"bg-light d-flex flex-column flex-grow-1 w-100\">\n    <div class=\"mx-2 mx-md-5 mb-5\">\n      {props.transactionHashes ? (\n        <>\n          Post created successfully. Back to{\" \"}\n          <Link\n            style={{\n              color: \"#3252A6\",\n            }}\n            className=\"fw-bold\"\n            to={href({\n              widgetSrc: \"itexpert120-contra.near/widget/app\",\n              params: { page: \"feed\" },\n            })}\n          >\n            feed\n          </Link>\n        </>\n      ) : (\n        <>\n          <div className=\"card\">\n            <div className=\"card-header pb-0\">\n              <div>\n                <ul class=\"nav nav-tabs\">\n                  <li class=\"nav-item\">\n                    <button\n                      class={`nav-link ${tab === \"editor\" ? \"active\" : \"\"}`}\n                      onClick={() => setTab(\"editor\")}\n                    >\n                      Editor\n                    </button>\n                  </li>\n                  <li class=\"nav-item\">\n                    <button\n                      class={`nav-link ${tab === \"preview\" ? \"active\" : \"\"}`}\n                      onClick={() => setTab(\"preview\")}\n                    >\n                      Preview\n                    </button>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div class=\"card border-light\">\n              {tab === \"editor\" && (\n                <>\n                  <div class=\"card-body\">\n                    <p class=\"card-title fw-bold fs-6\">\n                      What do you want to create?\n                    </p>\n                    <div class=\"d-flex flex-row gap-2\">\n                      {Object.values(postTypeOptions).map((option) => (\n                        <button\n                          className={`btn btn-${\n                            state.postType === option.name\n                              ? \"primary\"\n                              : \"outline-secondary\"\n                          }`}\n                          data-testid={`btn-${option.name.toLowerCase()}`}\n                          key={option.name}\n                          onClick={() => typeSwitch(option.name)}\n                          style={\n                            state.postType === option.name\n                              ? {\n                                  backgroundColor: \"#0C7283\",\n                                  color: \"#f3f3f3\",\n                                }\n                              : null\n                          }\n                          type=\"button\"\n                        >\n                          <i className={`bi ${option.icon}`} />\n                          <span>{option.name}</span>\n                        </button>\n                      ))}\n                    </div>\n                    <p class=\"text-muted w-100 my-1\">\n                      {postTypeOptions[state.postType].description}\n                    </p>\n                    {state.warning && (\n                      <div\n                        class=\"alert alert-warning alert-dismissible fade show\"\n                        role=\"alert\"\n                      >\n                        {state.warning}\n                        <button\n                          type=\"button\"\n                          class=\"btn-close\"\n                          data-bs-dismiss=\"alert\"\n                          aria-label=\"Close\"\n                          onClick={() => State.update({ warning: \"\" })}\n                        ></button>\n                      </div>\n                    )}\n                    <div className=\"row mt-3\">\n                      <NameEditor />\n                      <DescriptionEditor />\n                      <LabelsEditor />\n                      {state.postType === \"Solution\" && <FundraisingToggle />}\n                      {state.seekingFunding && <Fundraising />}\n                    </div>\n                    <button\n                      data-testid=\"submit-create-post\"\n                      style={{\n                        width: \"7rem\",\n                        backgroundColor: \"#0C7283\",\n                        color: \"#f3f3f3\",\n                      }}\n                      disabled={\n                        (state.seekingFunding &&\n                          (!state.amount || state.amount < 1)) ||\n                        state.name === \"\" ||\n                        state.description === \"\"\n                      }\n                      className=\"btn btn-light mb-2 p-3\"\n                      onClick={onSubmit}\n                    >\n                      Submit\n                    </button>\n                  </div>\n                </>\n              )}\n              {tab === \"preview\" && (\n                <div class=\"card-body\">\n                  <p class=\"card-title fw-bold fs-6\">Preview</p>\n                  <div>\n                    <Widget\n                      src=\"itexpert120-contra.near/widget/devhub.entity.post.Post\"\n                      props={{\n                        isPreview: true,\n                        id: 0, // irrelevant\n                        post: {\n                          author_id: context.accountId,\n                          likes: [],\n                          snapshot: {\n                            labels: state.labels,\n                            post_type: state.postType,\n                            name: state.name,\n                            description: generateDescription(\n                              state.description,\n                              state.amount,\n                              state.token,\n                              state.supervisor,\n                              state.seekingFunding\n                            ),\n                          },\n                        },\n                      }}\n                    />\n                  </div>\n                  <button\n                    data-testid=\"submit-create-post\"\n                    style={{\n                      width: \"7rem\",\n                      backgroundColor: \"#0C7283\",\n                      color: \"#f3f3f3\",\n                    }}\n                    disabled={\n                      (state.seekingFunding &&\n                        (!state.amount || state.amount < 1)) ||\n                      state.name === \"\" ||\n                      state.description === \"\"\n                    }\n                    className=\"btn btn-light my-2 p-3\"\n                    onClick={onSubmit}\n                  >\n                    Submit\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/itexpert120-contra.near/widget/devhub.page.create", "fact_widget_deployments_id": "9d0e412b8f92d48df030cf28d05f7f62", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}