{"tx_hash": "9gkENF5CSiByhCS9nBQyYSenNDmUMWDUH7h7CHwKLp7T", "action_id_social": "739zpDpjSjhEoDknSFYuaBJhb5o3PEAwnAeArKAQwmaA-0-widget", "block_id": 113240679, "block_timestamp": "2024-02-20T20:04:57.367Z", "signer_id": "balaianu.near", "widget_name": "CoretoDRSRSSgetAccountScores", "source_code": "/*\n * CoretoDRS::RSS::getAccountScores (DEMO) - Get the CoretoDRS scores for an accountId.\n *\n * The CoretoDRS scores are a user's Reputation (TRUST and PERFORMANCE) scores,\n * tracked and calculated by the Coreto Decentralized Reputation System\n * on platforms that are connected to the system.\n *\n * After including this widget inside your own widget, you can access the results\n * using 'let results = Storage.get(`drs.scores.${accountId}`);' and display them\n * or use them as part of your own widget.\n *\n * In order for the data to be up to date, you will need to ensure that this widget\n * is loaded and has the needed accountId value set in the props.\n *\n * This widget will ensure that the data is always up to date, so you don't have to.\n *\n * Parameters:\n * - props (optional): { accountId: 'some-valid-account.near' }\n *\n * NOTE: if no accountId is given via props, it will get the scores for the current\n * user's account.\n *\n */\n\n// Function for getting an account's Coreto DID\nfunction getAccountDid(accountId) {\n  let response = {\n    data: null,\n    errors: null,\n  };\n\n  // Search for a Coreto DID for the account\n  const getDidResponse = useCache(\n    () =>\n      asyncFetch(\"https://drt.coreto.io/did/get_did\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ account_id: accountId }),\n      }),\n    `getDidResponse_${accountId}`,\n    { subscribe: true }\n  );\n\n  // Handle API call errors\n  if (getDidResponse.ok != true) {\n    response.errors = [\n      {\n        message: \"Cound not get a DID for this account.\",\n        body: getDidResponse.body,\n      },\n    ];\n    return response;\n  }\n\n  // Handle response data errors or missing\n  if (\n    getDidResponse.body.length == 0 ||\n    typeof getDidResponse.body !== \"string\"\n  ) {\n    response.errors = [\n      {\n        message: \"Cound not find a DID for this account.\",\n        body: getDidResponse.body,\n      },\n    ];\n\n    return response;\n  }\n\n  // Set response data\n  response.data = getDidResponse.body;\n\n  return response;\n}\n\n// Function for getting an account's CoretoDRS\n// scores based on their Coreto DID\nfunction getAccountDidScores(accountDid) {\n  let response = {\n    data: null,\n    errors: null,\n  };\n\n  // Fetch reputation data for the account\n  const getScoresResponse = useCache(\n    () => asyncFetch(`https://rss.coreto.io/api/v1/scores/${accountDid}`),\n    `getAccountScores_${accountDid}`,\n    { subscribe: true }\n  );\n\n  // Handle API call errors\n  if (getScoresResponse.ok != true) {\n    response.errors = [\n      {\n        message: \"Cound not get scores for this account.\",\n        body: getScoresResponse.body,\n      },\n    ];\n    return response;\n  }\n\n  // Handle response data errors or missing\n  if (\n    getScoresResponse.body.length == 0 ||\n    typeof getScoresResponse.body !== \"object\"\n  ) {\n    response.errors = [\n      {\n        message: \"Cound not find scores for this account.\",\n        body: getScoresResponse.body,\n      },\n    ];\n    return response;\n  }\n\n  // Set response data\n  response.data = getScoresResponse.body;\n\n  return response;\n}\n\n// Main function for getting an account's CoretoDRS\n// scores based on the user's accountId\nfunction getAccountScores(accountId) {\n  let response = {\n    account_id: accountId,\n    data: null,\n    errors: null,\n  };\n\n  // Get the account's Coreto DID\n  let did = getAccountDid(accountId);\n\n  // Handle errors\n  if (did.errors !== null) {\n    response.errors = { did: did.errors };\n    Storage.set(`drs.scores.${accountId}`, response);\n    return response;\n  }\n\n  // Get the account's CoretoDRS scores\n  let scores = getAccountDidScores(did.data);\n\n  // Handle errors\n  if (scores.errors !== null) {\n    response.errors = { scores: scores.errors };\n    Storage.set(`drs.scores.${accountId}`, response);\n    return response;\n  }\n\n  // Set response data\n  response.data = scores.data;\n  Storage.set(`drs.scores.${accountId}`, response);\n  return response;\n}\n\n/* ----- */\n\nconst accountId = props.accountId ?? context.accountId;\nlet accountScores = getAccountScores(accountId);\n\nreturn Storage.get(`drs.scores.${accountId}`);\n", "metadata": {"fork_of": "balaianu.near/widget/Untitled-0@113240602"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/balaianu.near/widget/CoretoDRSRSSgetAccountScores", "fact_widget_deployments_id": "808547a8aa9611f9cd79d2ad066fba3a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}