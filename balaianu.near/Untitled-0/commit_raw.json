{"tx_hash": "HWN7qy1q6o6gectaBazPZTcaQeZ9yewHU4U9pw3mqFnz", "action_id_social": "2W3Zts5yJmLgiu8x6XF5LLiBfZbS2oK5PsnzzFCQnc7a-0-widget", "block_id": 113240602, "block_timestamp": "2024-02-20T20:03:23.849Z", "signer_id": "balaianu.near", "widget_name": "Untitled-0", "source_code": "/*\n * CoretoDRS::RSS::getAccountScores (DEMO) - Get the CoretoDRS scores for an accountId.\n *\n * The CoretoDRS scores are a user's Reputation (TRUST and PERFORMANCE) scores,\n * tracked and calculated by the Coreto Decentralized Reputation System\n * on platforms that are connected to the system.\n *\n * Access the results using the returned object, or\n * by using 'let results = Storage.get(`drs.scores.${accountId}`);'\n *\n * Params\n * - accountId: \"some-valid-account.near\"\n * - source (optional): \"a-valid-source.near\"\n *\n */\n\n// Function for getting an account's Coreto DID\nfunction getAccountDid(accountId) {\n  let response = {\n    data: null,\n    errors: null,\n  };\n\n  // Search for a Coreto DID for the account\n  const getDidResponse = useCache(\n    () =>\n      asyncFetch(\"https://drt.coreto.io/did/get_did\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ account_id: accountId }),\n      }),\n    `getDidResponse_${accountId}`,\n    { subscribe: true }\n  );\n\n  // Handle API call errors\n  if (getDidResponse.ok != true) {\n    response.errors = [\n      {\n        code: 500,\n        message: \"Cound not get a DID for this account.\",\n        body: getDidResponse.body,\n      },\n    ];\n    return response;\n  }\n\n  // Handle response data errors or missing\n  if (\n    getDidResponse.body.length == 0 ||\n    typeof getDidResponse.body !== \"string\"\n  ) {\n    response.errors = [\n      {\n        code: 404,\n        message: \"Cound not find a DID for this account.\",\n        body: getDidResponse.body,\n      },\n    ];\n\n    return response;\n  }\n\n  // Set response data\n  response.data = getDidResponse.body;\n\n  return response;\n}\n\n// Function for getting an account's CoretoDRS\n// scores based on their Coreto DID\nfunction getAccountDidScores(accountDid, source) {\n  let url = `https://rss.coreto.io/api/v1/scores/${accountDid}`;\n  let response = {\n    data: null,\n    errors: null,\n  };\n\n  if (source !== undefined) {\n    url = url + `/sources/${source}`;\n  }\n\n  // Fetch reputation data for the account\n  const getScoresResponse = useCache(\n    () => asyncFetch(url),\n    `getAccountScores_${accountDid}`,\n    { subscribe: true }\n  );\n\n  // Handle API call errors\n  if (getScoresResponse.ok != true) {\n    response.errors = [\n      {\n        code: 500,\n        message: \"Cound not get scores for this account.\",\n        body: getScoresResponse.body,\n      },\n    ];\n    return response;\n  }\n\n  // Handle response data errors or missing\n  if (\n    getScoresResponse.body.length == 0 ||\n    typeof getScoresResponse.body !== \"object\"\n  ) {\n    response.errors = [\n      {\n        code: 500,\n        message: \"Cound not find scores for this account.\",\n        body: getScoresResponse.body,\n      },\n    ];\n    return response;\n  }\n\n  // Set response data\n  response.data = getScoresResponse.body;\n\n  return response;\n}\n\n// Main function for getting an account's CoretoDRS\n// scores based on the user's accountId\nfunction getAccountScores(accountId, source) {\n  let response = {\n    account_id: accountId,\n    data: null,\n    errors: null,\n  };\n\n  // Get the account's Coreto DID\n  let did = getAccountDid(accountId);\n\n  // Handle errors\n  if (did.errors !== null) {\n    response.errors = { did: did.errors };\n    Storage.set(`drs.scores.${accountId}`, response);\n    return response;\n  }\n\n  // Get the account's CoretoDRS scores\n  let scores = getAccountDidScores(did.data, source);\n\n  // Handle errors\n  if (scores.errors !== null) {\n    response.errors = { scores: scores.errors };\n    Storage.set(`drs.scores.${accountId}`, response);\n    return response;\n  }\n\n  // Set response data\n  response.data = scores.data;\n  Storage.set(`drs.scores.${accountId}`, response);\n  return response;\n}\n\nreturn { getAccountScores };\n", "metadata": {"description": "CoretoDRS::RSS::getAccountScores (DEMO) - Get the CoretoDRS scores for an accountId.\n\nThe CoretoDRS scores are a user's Reputation (TRUST and PERFORMANCE) scores, tracked and calculated by the Coreto Decentralized Reputation System on platforms that are connected to the system.\n\nAccess the results importing the `getAccountScores` function and using the returned object directly, or by reading 'Storage.get(`drs.scores.${accountId}`);'\n\nParams\n- accountId: \"some-valid-account.near\"\n- source (optional): \"a-valid-source.near\"", "image": {}, "name": "CoretoDRS::RSS::getAccountScores", "platform": "jutsu.ai", "tags": {"component": "", "coreto": "", "data": "", "dev": "", "reputation": ""}, "website": "https://coreto.io/"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/balaianu.near/widget/Untitled-0", "fact_widget_deployments_id": "011d5aa4c31fb33e126d8a37cec03657", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 76}