{"tx_hash": "f4SUx1nUGAw7rXfaxrrKvnoLh8QgrZD2kXpj8suGCk1", "action_id_social": "2g49HqESbK5kSQyXZNRnwuKfEfvb1A6yqjxuYm87HpND-0-widget", "block_id": 107416901, "block_timestamp": "2023-12-08T06:26:52.219Z", "signer_id": "monkeypatcher.near", "widget_name": "App.DevResultGraph", "source_code": "const chartMaxHeight = 340;\nconst yInnerMaxHeight = 290;\nconst ySingleUnit = yInnerMaxHeight/10;\nconst freeTierCount = 20000;\nconst tier1Count = 100000;\nconst tier2Count = 500000;\n\nconst devGraphStyles = {\n    row: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-evenly\",\n        alignItems: \"center\",\n        padding: \"5px\",\n        margin: \"-15px\",\n    },\n    column: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"5px\",\n        margin: \"0px\",\n    },\n    column2: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"5px\",\n        margin: \"0px\",\n        width: \"15%\",\n    },\n    header: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100%\",\n        width: \"100%\",\n        fontSize: \"2rem\",\n    },\n    body: {\n        width: \"100%\",\n        margin: \"10px\",\n        padding: \"10px\",\n    },\n    textLayout: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        padding: \"5px\",\n        margin: \"0px\",\n    },\n    svgWrapper: {\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        height: \"100%\",\n        width: \"100%\",\n    },\n    svgStyle: {\n        width: \"800\",\n        height: chartMaxHeight,\n        border: \"1px solid #ccc\",\n        padding: \"10px\",\n        margin: \"10px\",\n    },\n    lineStyle1: {\n        fill: \"none\",\n        stroke: \"blue\",\n        strokeWidth: \"3\",\n    },\n    lineStyle2: {\n        fill: \"none\",\n        stroke: \"red\",\n        strokeWidth: \"3\",\n    },\n    lineStyle3: {\n        fill: \"none\",\n        stroke: \"green\",\n        strokeWidth: \"3\",\n    },\n    lineStyle4: {\n        fill: \"none\",\n        stroke: \"orange\",\n        strokeWidth: \"3\",\n    },\n    lineStyle5: {\n        fill: \"none\",\n        stroke: \"purple\",\n        strokeWidth: \"3\",\n    },\n    axisStyleMain: {\n        fill: \"none\",\n        stroke: \"black\",\n        shapeRendering: \"crispEdges\",\n        strokeWidth: \"2\",\n    },\n    axisStyleCross: {\n        fill: \"none\",\n        stroke: \"black\",\n        shapeRendering: \"crispEdges\",\n        strokeWidth: \".5\",\n    },\n    freeTierBack: {\n        fill: \"lightgreen\",\n        stroke: \"none\",\n        opacity: \".5\",\n        width: \"700px\",\n    },\n    tierOneBack: {\n        fill: \"lightblue\",\n        stroke: \"none\",\n        opacity: \".5\",\n        width: \"700px\",\n    },\n    tiertwoBack: {\n        fill: \"purple\",\n        stroke: \"none\",\n        opacity: \".25\",\n        width: \"700px\",\n    },\n    freeTierSquare: {\n        fill: \"lightgreen\",\n        stroke: \"none\",\n        opacity: \".5\",\n        width: \"30px\",\n        height: \"30px\",\n    },\n    tierOneSquare: {\n        fill: \"lightblue\",\n        stroke: \"none\",\n        opacity: \".5\",\n        width: \"30px\",\n        height: \"30px\",\n    },\n    tiertwoSquare: {\n        fill: \"purple\",\n        stroke: \"none\",\n        opacity: \".25\",\n        width: \"30px\",\n        height: \"30px\",\n    },\n    textStyle: {\n        fontSize: \"12px\",\n    },\n    textStyle1: {\n        fontSize: \"14px\",\n        stroke: \"blue\",\n    },\n    textStyle2: {\n        fontSize: \"14px\",\n        stroke: \"red\",\n    },\n    textStyle3: {\n        fontSize: \"14px\",\n        stroke: \"green\",\n    },\n    textStyle4: {\n        fontSize: \"14px\",\n        stroke: \"orange\",\n    },\n    textStyle5: {\n        fontSize: \"14px\",\n        stroke: \"purple\",\n    },\n    textStyle6: {\n        fontSize: \"12px\",\n        fontWeight: \"bold\",\n    },\n    textStyleUnderGraph: {\n        fontSize: \"12px\",\n        fontStyle: \"italic\",\n        fontWeight: \"bold\",\n    },\n    circleStyle: {\n        fill: \"black\",\n    },\n    svg: {\n        height: \"30px\",\n    }\n  };\n\n  function nearestRoundUp(number) {\n    const magnitude = Math.pow(10, Math.floor(Math.log10(number))); // Find the nearest power of 10\n\n    let roundedUp;\n    if (number < 10) {\n        roundedUp = Math.ceil(number / 10) * 10; // If it's a single digit, round up to nearest 10s\n    } else {\n        const firstTwoDigits = Math.ceil(number / magnitude); // Get the first two digits\n        roundedUp = Math.ceil(firstTwoDigits) * magnitude; // Round up and multiply back by the magnitude\n    }\n\n    return roundedUp;\n};\n\nfunction abstractNumber(number) {\n    if (number < 1000) {\n        return number.toString(); // If number is less than 1000, return as is\n    } else if (number < 1000000) {\n        const rounded = Math.round(number / 100) / 10; // Round to one decimal place\n        return (rounded % 1 === 0 ? rounded.toFixed(0) : rounded) + 'k'; // Convert to thousands (k)\n    } else if (number < 1000000000) {\n        const rounded = Math.round(number / 100000) / 10; // Round to one decimal place\n        return (rounded % 1 === 0 ? rounded.toFixed(0) : rounded) + 'M'; // Convert to millions (M)\n    } else {\n        const rounded = Math.round(number / 100000000) / 10; // Round to one decimal place\n        return (rounded % 1 === 0 ? rounded.toFixed(0) : rounded) + 'B'; // Convert to billions (B)\n    }\n};\n\nfunction calculateYPoint(point, yMax) {\n    // Calculate the y-coordinate point based on the data point and maximum value\n    const raw = yInnerMaxHeight - Math.round((point / yMax) * yInnerMaxHeight);\n\n    // Clamp the raw value to ensure it stays within the chart's boundaries\n    return Math.min(Math.max(raw, 5), yInnerMaxHeight - 5);\n}\n\nfunction textToNumber(text) {\n    const multiplier = {\n        k: 1000,\n        m: 1000000,\n        b: 1000000000\n    };\n\n    const numberString = text.toLowerCase().replace(/[^\\d.kmb]/g, ''); // Extract numbers, k, m, b\n\n    const suffix = numberString.slice(-1);\n    const numberPart = parseFloat(numberString);\n\n    if (multiplier.hasOwnProperty(suffix)) {\n        return numberPart * multiplier[suffix];\n    } else {\n        return numberPart;\n    }\n}\n\nconst {\n    phase1,\n    phase2,\n    phase3,\n    phase4,\n    phase5,\n} = props.developerProfile;\n\nconst point1 = textToNumber(phase1);\nconst point2 = textToNumber(phase2);\nconst point3 = textToNumber(phase3);\nconst point4 = textToNumber(phase4);\nconst point5 = textToNumber(phase5);\n\nconst yMax = nearestRoundUp(Math.max(point1, point2, point3, point4, point5));\n\n// Scaling\nconst yPoint1 = calculateYPoint(point1, yMax);\nconst yPoint2 = calculateYPoint(point2, yMax);\nconst yPoint3 = calculateYPoint(point3, yMax);\nconst yPoint4 = calculateYPoint(point4, yMax);\nconst yPoint5 = calculateYPoint(point5, yMax);\n\nconst renderBackgroundLines = () => {\n    const elements = [];\n    const labelSpacing = yInnerMaxHeight / 10;\n\n    for (let i = 0; i < 10; i++) {\n        const y = labelSpacing * i;\n\n        // Ensure labels are within the visible area of the chart\n        const yPos = Math.min(Math.max(y, 10), yInnerMaxHeight - 10);\n\n        // text push\n        elements.push(<text key={`${i}_y_label`} x=\"15\" y={yPos + 5} style={devGraphStyles.textStyle}>{abstractNumber(yMax - (yMax / 10 * i))}</text>);\n        // line push\n        elements.push(<line key={`${i}_y_line`} x1=\"50\" y1={yPos} x2=\"750\" y2={yPos} style={devGraphStyles.axisStyleCross}></line>);\n    }\n    return elements;\n};\n    \nfunction calculateTierHeight(currentTierCount, previousTierCount, style) {\n    const previousY = calculateYPoint(previousTierCount, yMax);\n    const currentY = calculateYPoint(currentTierCount, yMax);\n\n    // Calculate the height of the tier relative to y-axis lines\n    const height = previousY - currentY;\n\n    // meaning that tier is too high so skip render\n    if (!height) {\n        return null;\n    }\n\n    // Calculate the y-position of the tier based on y-axis lines\n    const yPosition = Math.min(previousY - height, yInnerMaxHeight - 5);\n\n    // if too small, barely render\n    if (yInnerMaxHeight - ySingleUnit < yPosition) {\n        return <rect x=\"50\" y={previousY + 1} style={style} height={1}></rect>;\n    }\n\n\n    return <rect x=\"50\" y={yPosition} style={style} height={Math.max(height, 29)}></rect>;\n}\n\nreturn (\n    <div style={devGraphStyles.body}>\n        <div style={devGraphStyles.row}>\n            <div style={devGraphStyles.column}>\n                <div style={devGraphStyles.svgWrapper}>\n                    <svg style={devGraphStyles.svgStyle}>\n                    {/* Y-axis */}\n                    <g height={yInnerMaxHeight}>\n                        <line x1=\"50\" y1=\"5\" x2=\"50\" y2=\"290\" style={devGraphStyles.axisStyleMain}></line>\n                        {/* Background boxes by tier */}\n                        { calculateTierHeight(freeTierCount, 0, devGraphStyles.freeTierBack) }\n                        { calculateTierHeight(tier1Count, freeTierCount, devGraphStyles.tierOneBack) }\n                        { calculateTierHeight(yMax, tier1Count, devGraphStyles.tiertwoBack) }\n                        {/* Veritical Labels & Lines */}\n                        <g>\n                        {renderBackgroundLines().map((c) => {\n                            if (c.type === 'text') {\n                                return (<text {...c.props} />);\n                            }\n                            return <line {...c.props} />;\n                        })}\n                        </g>\n                    </g>\n\n                    {/* X-axis */}\n                    <g>\n                        <line x1=\"50\" y1=\"290\" x2=\"750\" y2=\"290\" style={devGraphStyles.axisStyleMain}></line>\n                        {/* Horizontal Labels */}\n                        <text x=\"100\" y=\"305\" style={devGraphStyles.textStyle1}>Phase1</text>\n                        <text x=\"250\" y=\"305\" style={devGraphStyles.textStyle2}>Phase2</text>\n                        <text x=\"400\" y=\"305\" style={devGraphStyles.textStyle3}>Phase3</text>\n                        <text x=\"550\" y=\"305\" style={devGraphStyles.textStyle4}>Phase4</text>\n                        <text x=\"700\" y=\"305\" style={devGraphStyles.textStyle5}>Phase5</text>\n                    </g>\n\n                    {/* Line Graph */}\n                    <polyline points={`50,${yInnerMaxHeight - 5} 115,${yPoint1}`} style={devGraphStyles.lineStyle1}></polyline>\n                    <polyline points={`115,${yPoint1} 265,${yPoint2}`} style={devGraphStyles.lineStyle2}></polyline>\n                    <polyline points={`265,${yPoint2} 415,${yPoint3}`} style={devGraphStyles.lineStyle3}></polyline>\n                    <polyline points={`415,${yPoint3} 565,${yPoint4}`} style={devGraphStyles.lineStyle4}></polyline>\n                    <polyline points={`565,${yPoint4} 715,${yPoint5}`} style={devGraphStyles.lineStyle5}></polyline>\n\n                    {/* Data Points */}\n                    <circle cx=\"50\" cy={yInnerMaxHeight - 5} r=\"4\" style={devGraphStyles.circleStyle}></circle>\n                    <circle cx=\"115\" cy={yPoint1} r=\"4\" style={devGraphStyles.circleStyle}></circle>\n                    <circle cx=\"265\" cy={yPoint2} r=\"4\" style={devGraphStyles.circleStyle}></circle>\n                    <circle cx=\"415\" cy={yPoint3} r=\"4\" style={devGraphStyles.circleStyle}></circle>\n                    <circle cx=\"565\" cy={yPoint4} r=\"4\" style={devGraphStyles.circleStyle}></circle>\n                    <circle cx=\"715\" cy={yPoint5} r=\"4\" style={devGraphStyles.circleStyle}></circle>\n                    </svg>\n                </div>\n            </div>\n        </div>\n        <div style={devGraphStyles.row}>\n            <div style={devGraphStyles.column}></div>\n            <div style={devGraphStyles.column}>\n                <div style={devGraphStyles.center}>\n                    <div style={devGraphStyles.textStyleUnderGraph}>Vertical = requests per month. Horizontal = phases of project.</div>\n                </div>\n            </div>\n            <div style={devGraphStyles.column}></div>\n        </div>\n        <div style={devGraphStyles.row}>\n            <div style={devGraphStyles.column2}>\n                <svg style={devGraphStyles.svg}>\n                    <g>\n                        <rect x=\"0\" y=\"0\" style={devGraphStyles.freeTierSquare}></rect>\n                        <text x=\"35\" y=\"20\" style={devGraphStyles.textStyle6}>Free Tier</text>\n                    </g>\n                </svg>\n            </div>\n            <div style={devGraphStyles.column2}>\n            <svg style={devGraphStyles.svg}>\n                <g>\n                    <rect x=\"0\" y=\"0\" style={devGraphStyles.tierOneSquare}></rect>\n                    <text x=\"35\" y=\"20\" style={devGraphStyles.textStyle6}>Tier 1</text>\n                </g>\n            </svg>\n            </div>\n            <div style={devGraphStyles.column2}>\n            <svg style={devGraphStyles.svg}>\n                <g>\n                    <rect x=\"0\" y=\"0\" style={devGraphStyles.tiertwoSquare}></rect>\n                    <text x=\"35\" y=\"20\" style={devGraphStyles.textStyle6}>Tier 2</text>\n                </g>\n            </svg>\n            </div>\n        </div>\n    </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/monkeypatcher.near/widget/App.DevResultGraph", "fact_widget_deployments_id": "c436243092e65abc747950fae63d12b9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}