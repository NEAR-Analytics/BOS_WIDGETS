{"tx_hash": "db3XdqsH5HvPeyafuA6gbU3Zf2noCZ4QePNbqdGULwb", "action_id_social": "4CUtpUxRCXkqwi8T4MyWYo11F1iaEXtB6ufKSE5pMrJo-0-widget", "block_id": 103198616, "block_timestamp": "2023-10-12T11:00:04.053Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Proposals.MultiVote", "source_code": "const view = props.view ?? \"multiVote\";\nconst isCongressDaoID = props.isCongressDaoID;\n\nconst daoId = props.daoId;\n\nconst STORAGE_KEY = \"proposalsMultiVote\";\nconst STORAGE = Storage.get(STORAGE_KEY);\n\nif (view === \"submit\") {\n    State.init({\n        openModal: false,\n        page: 0\n    });\n\n    if (STORAGE === null) return \"\";\n    const onHideMultiSelect = props.onHideMultiSelect;\n\n    const noVotes = Object.keys(STORAGE[daoId] || {}).length < 1;\n\n    const proposal_ids = Object.keys(STORAGE[daoId] || {}).map((id) =>\n        parseInt(id)\n    );\n\n    const handleSubmit = () => {\n        const calls = [];\n        Object.keys(STORAGE[daoId]).forEach((id) => {\n            let vote = STORAGE[daoId][id];\n            switch (`${vote}`) {\n                case \"0\":\n                    vote = \"VoteApprove\";\n                    break;\n                case \"1\":\n                    vote = \"VoteReject\";\n                    break;\n                case \"2\":\n                    vote = \"VoteRemove\";\n                    break;\n                default:\n                    console.error(\"Invalid vote\");\n                    break;\n            }\n            let args = {\n                id: parseInt(id)\n            };\n            if (isCongressDaoID) {\n                args[\"vote\"] = vote.replace(\"Vote\", \"\");\n            } else {\n                args[\"action\"] = vote;\n            }\n            calls.push({\n                contractName: daoId,\n                methodName: isCongressDaoID ? \"vote\" : \"act_proposal\",\n                args: args,\n                gas: 200000000000000\n            });\n        });\n        return Near.call(calls);\n    };\n\n    let Wrapper = styled.div`\n        position: fixed;\n        bottom: 12px;\n        left: 50%;\n        transform: translateX(-50%);\n        min-width: 500px;\n        max-width: 100vw;\n        background-color: #fff;\n    `;\n\n    const indexToVote = (i) => {\n        if (i === \"0\") return \"Yes\";\n        if (i === \"1\") return \"No\";\n        if (i === \"2\") return \"Spam\";\n    };\n    return (\n        <Wrapper className=\"ndc-card p-4\">\n            <h4>Voting on multiple proposals</h4>\n            <p>\n                {Object.keys(STORAGE[daoId] || {})\n                    .map((id) => parseInt(id))\n                    .map(\n                        (id) =>\n                            \"#\" + id + \": \" + indexToVote(STORAGE[daoId][id])\n                    )\n                    .reverse()\n                    .join(\", \")}\n            </p>\n            <div className=\"d-flex justify-content-end mt-4 gap-3\">\n                <Widget\n                    src=\"nearui.near/widget/Input.Button\"\n                    props={{\n                        children: \"Cancel\",\n                        onClick: () => {\n                            onHideMultiSelect();\n                        },\n                        variant: \"secondary outline\",\n                        className: \"me-auto\"\n                    }}\n                />\n                <Widget\n                    src=\"nearui.near/widget/Input.Button\"\n                    props={{\n                        children: \"Clear\",\n                        onClick: () => {\n                            Storage.set(STORAGE_KEY, {});\n                        },\n                        variant: \"secondary outline\"\n                    }}\n                />\n                <Widget\n                    src=\"nearui.near/widget/Input.Button\"\n                    props={{\n                        children: \"Submit\",\n                        onClick: () => {\n                            handleSubmit();\n                        },\n                        variant: \"secondary\"\n                    }}\n                />\n            </div>\n        </Wrapper>\n    );\n}\n\nconst proposal = props.proposal;\nconst canVote = props.canVote;\nconst selectedVote = STORAGE[daoId][proposal.id];\n\nconst handleClick = (e) => {\n    const [proposalId, vote] = e.target.value.split(\",\");\n\n    // using Storage.privateSet instead of State to avoid re-rendering everything\n    // using daoId as key so that the storage doesn't grow indefinitely\n    Storage.set(STORAGE_KEY, {\n        [daoId]: {\n            ...STORAGE[daoId],\n            [proposalId]: vote\n        }\n    });\n};\n\nconst Wrapper = styled.div`\n    .form-check {\n        padding: 6px 14px;\n        border-radius: 16px;\n        color: #000;\n        display: flex;\n        align-items: center;\n        gap: 6px;\n        margin-bottom: 6px;\n        cursor: pointer;\n\n        &.disabled {\n            cursor: not-allowed !important;\n            opacity: 0.7;\n\n            span {\n                cursor: not-allowed !important;\n            }\n        }\n\n        input {\n            margin: 0 !important;\n        }\n\n        span {\n            flex: 1;\n            font-weight: 600;\n            cursor: pointer;\n        }\n\n        &:first-child {\n            background-color: #82e29930;\n\n            &.active {\n                background-color: #82e299;\n            }\n        }\n        &:nth-child(2) {\n            background-color: #ff646430;\n\n            &.active {\n                background-color: #ff6464;\n            }\n        }\n        &:nth-child(3) {\n            background-color: #ffd50d30;\n\n            &.active {\n                background-color: #ffd50d;\n            }\n        }\n    }\n`;\n\nreturn (\n    <Wrapper className=\"d-flex gap-1\" {...(props.containerProps || {})}>\n        {[\"Yes\", \"No\", \"Spam\"].map((option, index) => {\n            return (\n                <label\n                    key={index}\n                    className={`form-check flex-fill ${\n                        Number(selectedVote) === index ? \"active\" : \"\"\n                    } ${canVote ? \"\" : \"disabled\"}`}\n                    htmlFor={`vote-p-${proposal.id}-${index}`}\n                >\n                    <input\n                        className=\"form-check-input\"\n                        type=\"radio\"\n                        value={[proposal.id, index]}\n                        id={`vote-p-${proposal.id}-${index}`}\n                        checked={Number(selectedVote) === index}\n                        onClick={handleClick}\n                        disabled={!canVote}\n                    />\n                    <span className=\"form-check-label\">{option}</span>\n                </label>\n            );\n        })}\n    </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Proposals.MultiVote", "fact_widget_deployments_id": "3a4d23ef189ba71d2630312293a014e1", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 10}