{"tx_hash": "BGiWYxnTVbhD3MhRPtGoASG6mgSwgzQbzZ1F4fGiYk2v", "action_id_social": "F5WyTYxyer9t6jRLZ8g5qQYypzuDCUTaFmQ5JaMXwYu7-0-widget", "block_id": 111601786, "block_timestamp": "2024-01-29T10:55:56.284Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "CreateDAO.Step1", "source_code": "const {\n  formState,\n  errors,\n  renderFooter,\n  showSteps,\n  isConfigScreen,\n  updateParentState\n} = props;\n\nupdateParentState || (updateParentState = () => {});\n\nconst initialAnswers = {\n  name: formState.name,\n  address: formState.address,\n  soulBoundTokenIssuer: formState.soulBoundTokenIssuer,\n  purpose: formState.purpose,\n  legalStatus: formState.legalStatus,\n  legalDocument: formState.legalDocument\n};\n\nState.init({\n  answers: initialAnswers\n});\n\nconst onValueChange = (key, value) => {\n  State.update({\n    answers: {\n      ...state.answers,\n      [key]: value\n    }\n  });\n};\n\nuseEffect(() => {\n  let timeoutId;\n\n  // Debounced function to update parent state\n  const debouncedUpdate = (value) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      updateParentState(value);\n    }, 300); // Adjust the debounce delay as needed\n  };\n\n  // Call the debounced function when local value changes\n  debouncedUpdate({ ...formState, ...state.answers });\n\n  return () => {\n    // Cleanup on unmount\n    clearTimeout(timeoutId);\n  };\n}, [state.answers]);\n\nreturn (\n  <div className=\"mt-4 ndc-card p-4\">\n    <div className=\"d-flex flex-column gap-4\">\n      {showSteps && (\n        <h2 className=\"h5 fw-bold\">\n          <span\n            className=\"rounded-circle d-inline-flex align-items-center justify-content-center fw-bolder h5 me-2\"\n            style={{\n              width: \"48px\",\n              height: \"48px\",\n              border: \"1px solid #82E299\"\n            }}\n          >\n            1\n          </span>\n          DAO Info & KYC\n        </h2>\n      )}\n      <Widget\n        src=\"nearui.near/widget/Input.ExperimentalText\"\n        props={{\n          label: \"DAO Name\",\n          placeholder: \"Lorem Ipsum\",\n          size: \"md\",\n          onChange: (v) => {\n            onValueChange(\"name\", v);\n            // generate address\n            onValueChange(\n              \"address\",\n              `${v\n                .toLowerCase()\n                .replace(/\\s/g, \"-\")\n                .replace(/[^a-zA-Z0-9-]/g, \"\")}.sputnik-dao.near`\n            );\n          },\n          inputProps: {\n            name: \"name\",\n            defaultValue: state.answers.name\n          },\n          error: errors[\"name\"]\n        }}\n      />\n      {!isConfigScreen && (\n        <div className=\"d-flex flex-column gap-4\">\n          <Widget\n            src=\"nearui.near/widget/Input.ExperimentalText\"\n            props={{\n              label: (\n                <>\n                  DAO Address{\" \"}\n                  <span className=\"text-black-50 fw-light small\">\n                    (auto-filled)\n                  </span>\n                </>\n              ),\n              placeholder: \"sample-dao-name.sputnik-dao.near\",\n              value:\n                state.answers.address === \"\"\n                  ? undefined\n                  : state.answers.address,\n              size: \"md\",\n              disabled: true,\n              onChange: (v) => onValueChange(\"address\", v),\n              inputProps: {\n                name: \"address\",\n                defaultValue: state.answers.address\n              },\n              error: errors[\"address\"]\n            }}\n          />\n          <Widget\n            src=\"nearui.near/widget/Input.ExperimentalText\"\n            props={{\n              label: (\n                <>\n                  Soul Bound Token Issuer{\" \"}\n                  <span className=\"text-black-50 fw-light small\">\n                    (optional)\n                  </span>\n                </>\n              ),\n              placeholder: \"The address of the token issuer\",\n              size: \"md\",\n              onChange: (v) => onValueChange(\"soulBoundTokenIssuer\", v),\n              error: errors[\"soulBoundTokenIssuer\"],\n              inputProps: {\n                name: \"soulBoundTokenIssuer\",\n                defaultValue: state.answers.soulBoundTokenIssuer\n              }\n            }}\n          />\n        </div>\n      )}\n      <Widget\n        src=\"nearui.near/widget/Input.ExperimentalText\"\n        props={{\n          label: \"Purpose\",\n          placeholder: \"Please add the purpose of your DAO\",\n          size: \"md\",\n          textarea: true,\n          inputProps: {\n            rows: 5,\n            name: \"purpose\",\n            defaultValue: state.answers.purpose\n          },\n          onChange: (v) => onValueChange(\"purpose\", v),\n          error: errors[\"purpose\"]\n        }}\n      />\n      <h3 className=\"h5 fw-bold\">\n        KYC <span className=\"text-black-50 fw-light small\">(optional)</span>\n      </h3>\n      <Widget\n        src=\"nearui.near/widget/Input.ExperimentalText\"\n        props={{\n          label: (\n            <>\n              Please explain your DAO&apos;s Legal Status and Jurisdiction{\" \"}\n              <span className=\"text-black-50 fw-light small\">(if known)</span>\n            </>\n          ),\n          placeholder: \"LLC\",\n          size: \"md\",\n          onChange: (v) => onValueChange(\"legalStatus\", v),\n          error: errors[\"legalStatus\"],\n          inputProps: {\n            name: \"legalStatus\",\n            defaultValue: state.answers.legalStatus\n          }\n        }}\n      />\n      {!isConfigScreen && (\n        <Widget\n          src=\"nearui.near/widget/Input.ExperimentalText\"\n          props={{\n            label: (\n              <>\n                Please provide a link to your DAO&apos;s Legal Document{\" \"}\n                <span className=\"text-black-50 fw-light small\">(if any)</span>\n              </>\n            ),\n            placeholder: \"https://Legal_Document\",\n            size: \"md\",\n            onChange: (v) => onValueChange(\"legalDocument\", v),\n            error: errors[\"legalDocument\"],\n            inputProps: {\n              name: \"legalDocument\",\n              defaultValue: state.answers.legalDocument\n            }\n          }}\n        />\n      )}\n    </div>\n\n    {renderFooter(state.answers)}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/CreateDAO.Step1", "fact_widget_deployments_id": "d7fdf99d2248c791f76d6209bc2a7e0a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}