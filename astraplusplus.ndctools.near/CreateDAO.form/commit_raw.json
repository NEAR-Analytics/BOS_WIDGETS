{"tx_hash": "CnJ8DKFu1v5BeTCfxYzpbR1BaKr9w96ewxK3NEYQohiH", "action_id_social": "B5EK3Y1op5bRmwsST2kn2KLB2ESrHYPS6Nqr4DhrZUwY-0-widget", "block_id": 114745961, "block_timestamp": "2024-03-15T08:47:41.066Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "CreateDAO.form", "source_code": "const { typeToEmptyData, validateType, types } = props;\n\nconst initialFormState = typeToEmptyData(types[\"astraplusplus.ndctools.near/type/dao\"]);\n\n// Set default values here\ninitialFormState.gracePeriod = 1;\ninitialFormState.profileImage =\n  \"https://ipfs.near.social/ipfs/bafkreiad5c4r3ngmnm7q6v52joaz4yti7kgsgo6ls5pfbsjzclljpvorsu\";\ninitialFormState.coverImage =\n  \"https://ipfs.near.social/ipfs/bafkreicd7wmjfizslx72ycmnsmo7m7mnvfsyrw6wghsaseq45ybslbejvy\";\n\nState.init({\n  step: 0,\n  form: initialFormState,\n  errors: null\n});\n\nconst handleStepComplete = (value) => {\n  const stepValid = true;\n  Object.keys(value).forEach((key) => {\n    const properties = types[\"astraplusplus.ndctools.near/type/dao\"].properties.find(\n      (p) => p.name === key\n    );\n    const validation = validateType(properties.type, value[key], properties);\n    if (validation) {\n      State.update({\n        errors: {\n          ...state.errors,\n          [key]: validation\n        }\n      });\n      stepValid = false;\n    } else {\n      State.update({\n        errors: {\n          ...state.errors,\n          [key]: null\n        }\n      });\n    }\n  });\n\n  if (!stepValid) return;\n\n  if (state.step === 6) {\n    const finalAnswers = {\n      ...state.form,\n      ...value\n    };\n\n    State.update({\n      step: state.step,\n      form: finalAnswers\n    });\n    setShowNote(true);\n    return;\n  }\n  State.update({\n    step: state.step + 1,\n    form: {\n      ...state.form,\n      ...value\n    }\n  });\n};\nconst [showNoteModal, setShowNote] = useState(false);\nconst [copied, setCopied] = useState(false);\n\nuseEffect(() => {\n  let timeoutId;\n\n  if (copied) {\n    timeoutId = setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n  }\n\n  return () => {\n    clearTimeout(timeoutId);\n  };\n}, [copied]);\n\nconst NoteContainer = styled.div`\n  a {\n    color: #4498e0;\n    text-decoration: none;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst NoteModal = () => {\n  const url = `https://near.org/astraplusplus.ndctools.near/widget/home?tab=proposals&daoId=${state.form.address}&page=dao`;\n  return (\n    <Widget\n      src=\"astraplusplus.ndctools.near/widget/Layout.Modal\"\n      props={{\n        open: showNoteModal,\n        onOpenChange: (open) => {\n          setShowNote(open);\n        },\n        toggle: <></>,\n        content: (\n          <NoteContainer className=\"ndc-card p-4 d-flex flex-column gap-2\">\n            <h6 className=\"mb-0\">\n              Please note that upon confirming the transaction, your DAO will\n              appear within the next hour in both the \"My DAOs\" and \"All DAOs\"\n              sections.\n              <br />\n              <br /> To access it beforehand, please copy the following{\" \"}\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                link.\n              </a>\n            </h6>\n            <div className=\"d-flex gap-2 justify-content-end\">\n              <Widget\n                src=\"nearui.near/widget/Input.Button\"\n                props={{\n                  children: \"Cancel\",\n                  variant: \"danger outline\",\n                  onClick: () => setShowNote(false)\n                }}\n              />\n              <Widget\n                src=\"nearui.near/widget/Input.Button\"\n                props={{\n                  children: \"Copy link\",\n                  variant: \"info\",\n                  onClick: () => {\n                    clipboard.writeText(url).then(() => {\n                      setCopied(true);\n                      handleFormComplete(state.form);\n                      setShowNote(false);\n                    });\n                  }\n                }}\n              />\n            </div>\n          </NoteContainer>\n        )\n      }}\n    />\n  );\n};\n\nfunction handleFormComplete(value) {\n  const sputnikFactoryArgs = {\n    name: value.address.replaceAll(\".sputnik-dao.near\", \"\"),\n    // encode args to base64\n    args: {\n      purpose: typeof value.purpose === \"string\" ? value.purpose : \"\",\n      bond: \"100000000000000000000000\",\n      vote_period: \"604800000000000\",\n      grace_period: Big(\n        typeof value.gracePeriod === \"number\" ? parseInt(value.gracePeriod) : 1\n      ).times(86400000000000),\n      policy: {\n        roles: value.policy.roles,\n        default_vote_policy: {\n          weight_kind: \"RoleWeight\",\n          quorum: \"0\",\n          threshold: [1, 2]\n        },\n        proposal_bond: \"100000000000000000000000\",\n        proposal_period: \"604800000000000\",\n        bounty_bond: \"100000000000000000000000\",\n        bounty_forgiveness_period: \"604800000000000\"\n      },\n      config: {\n        purpose: typeof value.purpose === \"string\" ? value.purpose : \"\",\n        name: value.address.replaceAll(\".sputnik-dao.near\", \"\"),\n        // encode metadata to base64\n        metadata: {\n          soulBoundTokenIssuer:\n            typeof value.soulBoundTokenIssuer === \"string\"\n              ? value.soulBoundTokenIssuer\n              : undefined,\n          links: Array.isArray(value.links) ? value.links : [],\n          flagCover:\n            typeof value.coverImage === \"string\" ? value.coverImage : \"\",\n          flagLogo:\n            typeof value.profileImage === \"string\" ? value.profileImage : \"\",\n          displayName: typeof value.name === \"string\" ? value.name : \"\",\n          legal: {\n            legalStatus:\n              typeof value.legalStatus === \"string\" ? value.legalStatus : \"\",\n            legalLink:\n              typeof value.legalDocument === \"string\" ? value.legalDocument : \"\"\n          }\n        }\n      }\n    }\n  };\n\n  // encode metadata and args to base64\n  const finalSputnikFactoryArgs = {\n    ...sputnikFactoryArgs,\n    args: Buffer.from(\n      JSON.stringify({\n        ...sputnikFactoryArgs.args,\n        config: {\n          ...sputnikFactoryArgs.args.config,\n          metadata: Buffer.from(\n            JSON.stringify(sputnikFactoryArgs.args.config.metadata)\n          ).toString(\"base64\")\n        }\n      })\n    ).toString(\"base64\")\n  };\n  Near.call([\n    {\n      contractName: \"sputnik-dao.near\",\n      methodName: \"create\",\n      args: finalSputnikFactoryArgs,\n      deposit: \"6000000000000000000000000\", // 6N\n      gas: 250000000000000\n    }\n  ]);\n}\n\nconst steps = [\n  {\n    title: \"DAO Info & KYC\",\n    active: state.step === 0,\n    icon: state.step > 0 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 0 ? \"active-outline\" : undefined\n  },\n  {\n    title: \"Links & Socials\",\n    active: state.step === 1,\n    icon: state.step > 1 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 1 ? \"active-outline\" : undefined\n  },\n  {\n    title: \"Cool Down Period\",\n    active: state.step === 2,\n    icon: state.step > 2 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 2 ? \"active-outline\" : undefined\n  },\n  {\n    title: \"Add Groups & Members\",\n    active: state.step === 3,\n    icon: state.step > 3 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 3 ? \"active-outline\" : undefined\n  },\n  {\n    title: \"Proposal & Voting Permission\",\n    active: state.step === 4,\n    icon: state.step > 4 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 4 ? \"active-outline\" : undefined\n  },\n  {\n    title: \"Quorum\",\n    active: state.step === 5,\n    icon: state.step > 5 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 5 ? \"active-outline\" : undefined\n  },\n  {\n    title: \"DAO Assets\",\n    active: state.step === 6,\n    icon: state.step > 6 ? <i className=\"bi bi-check2\"></i> : undefined,\n    className: state.step > 6 ? \"active-outline\" : undefined\n  }\n];\n\nreturn (\n  <>\n    <h1 className=\"h3 fw-bold mb-4\">Create a new DAO</h1>\n    <NoteModal />\n    <Widget\n      src={`nearui.near/widget/Navigation.Steps`}\n      props={{\n        steps: steps,\n        onClick: (i) => {\n          if (i > state.step) return;\n          State.update({\n            step: i\n          });\n        }\n      }}\n    />\n    <Widget\n      src=\"near/widget/DIG.Toast\"\n      props={{\n        title: \"Copied\",\n        open: copied\n      }}\n    />\n    <Widget\n      src={`astraplusplus.ndctools.near/widget/CreateDAO.Step${state.step + 1}`}\n      props={{\n        formState: state.form,\n        onComplete: handleStepComplete,\n        errors: state.errors,\n        renderFooter: (stepState, otherProps) => (\n          <Widget\n            src={`astraplusplus.ndctools.near/widget/CreateDAO.Footer`}\n            props={{\n              isLast: state.step >= steps.length - 1,\n              hasPrevious: state.step > 0,\n              onNext: () => {\n                handleStepComplete(stepState);\n              },\n              onPrevious: () => {\n                State.update({\n                  step: state.step - 1\n                });\n              },\n              onReset: () => {\n                State.update({\n                  step: 0,\n                  form: initialFormState,\n                  errors: null\n                });\n              },\n\n              ...otherProps\n            }}\n          />\n        ),\n        showSteps: true,\n        showCreateNewDAOInfo: true,\n        isConfigScreen: false\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/CreateDAO.form", "fact_widget_deployments_id": "37e7d0f5156a65fa7ef4c82b9f87c37e", "inserted_timestamp": "2024-03-15T10:28:38.912Z", "modified_timestamp": "2024-03-15T10:28:38.912Z", "__row_index": 10}