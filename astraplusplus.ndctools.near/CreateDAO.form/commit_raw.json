{"tx_hash": "26u7cSnoSYDM7Nky4YCxaddn285AgywnevvKMz77NWSc", "action_id_social": "Faw65SsjHuhegWkPbSHQBAC8KBXe2WxuaKJHuxTFNTMQ-0-widget", "block_id": 108488516, "block_timestamp": "2023-12-21T15:30:49.971Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "CreateDAO.form", "source_code": "const { typeToEmptyData, validateType, types } = props;\n\nconst initialFormState = typeToEmptyData(types[\"astraplusplus.ndctools.near/type/dao\"]);\n\n// Set default values here\ninitialFormState.gracePeriod = 1;\ninitialFormState.profileImage =\n    \"https://ipfs.near.social/ipfs/bafkreiad5c4r3ngmnm7q6v52joaz4yti7kgsgo6ls5pfbsjzclljpvorsu\";\ninitialFormState.coverImage =\n    \"https://ipfs.near.social/ipfs/bafkreicd7wmjfizslx72ycmnsmo7m7mnvfsyrw6wghsaseq45ybslbejvy\";\n\nState.init({\n    step: 0,\n    form: initialFormState,\n    errors: null\n});\n\nconst handleStepComplete = (value) => {\n    const stepValid = true;\n    Object.keys(value).forEach((key) => {\n        const properties = types[\n            \"astraplusplus.ndctools.near/type/dao\"\n        ].properties.find((p) => p.name === key);\n        const validation = validateType(\n            properties.type,\n            value[key],\n            properties\n        );\n        if (validation) {\n            State.update({\n                errors: {\n                    ...state.errors,\n                    [key]: validation\n                }\n            });\n            stepValid = false;\n        } else {\n            State.update({\n                errors: {\n                    ...state.errors,\n                    [key]: null\n                }\n            });\n        }\n    });\n\n    if (!stepValid) return;\n\n    if (state.step === 5) {\n        const finalAnswers = {\n            ...state.form,\n            ...value\n        };\n\n        State.update({\n            step: state.step,\n            form: finalAnswers\n        });\n        handleFormComplete(finalAnswers);\n        return;\n    }\n    State.update({\n        step: state.step + 1,\n        form: {\n            ...state.form,\n            ...value\n        }\n    });\n};\n\nfunction handleFormComplete(value) {\n    const sputnikFactoryArgs = {\n        name: value.address.replaceAll(\".sputnik-dao.near\", \"\"),\n        // encode args to base64\n        args: {\n            purpose: typeof value.purpose === \"string\" ? value.purpose : \"\",\n            bond: \"100000000000000000000000\",\n            vote_period: \"604800000000000\",\n            grace_period: Big(\n                typeof value.gracePeriod === \"number\"\n                    ? parseInt(value.gracePeriod)\n                    : 1\n            ).times(86400000000000),\n            policy: {\n                roles: value.policy.roles,\n                default_vote_policy: {\n                    weight_kind: \"RoleWeight\",\n                    quorum: \"0\",\n                    threshold: [1, 2]\n                },\n                proposal_bond: \"100000000000000000000000\",\n                proposal_period: \"604800000000000\",\n                bounty_bond: \"100000000000000000000000\",\n                bounty_forgiveness_period: \"604800000000000\"\n            },\n            config: {\n                purpose: typeof value.purpose === \"string\" ? value.purpose : \"\",\n                name: value.address.replaceAll(\".sputnik-dao.near\", \"\"),\n                // encode metadata to base64\n                metadata: {\n                    soulBoundTokenIssuer:\n                        typeof value.soulBoundTokenIssuer === \"string\"\n                            ? value.soulBoundTokenIssuer\n                            : undefined,\n                    links: Array.isArray(value.links) ? value.links : [],\n                    flagCover:\n                        typeof value.coverImage === \"string\"\n                            ? value.coverImage\n                            : \"\",\n                    flagLogo:\n                        typeof value.profileImage === \"string\"\n                            ? value.profileImage\n                            : \"\",\n                    displayName:\n                        typeof value.name === \"string\" ? value.name : \"\",\n                    legal: {\n                        legalStatus:\n                            typeof value.legalStatus === \"string\"\n                                ? value.legalStatus\n                                : \"\",\n                        legalLink:\n                            typeof value.legalDocument === \"string\"\n                                ? value.legalDocument\n                                : \"\"\n                    }\n                }\n            }\n        }\n    };\n\n    // encode metadata and args to base64\n    const finalSputnikFactoryArgs = {\n        ...sputnikFactoryArgs,\n        args: Buffer.from(\n            JSON.stringify({\n                ...sputnikFactoryArgs.args,\n                config: {\n                    ...sputnikFactoryArgs.args.config,\n                    metadata: Buffer.from(\n                        JSON.stringify(sputnikFactoryArgs.args.config.metadata)\n                    ).toString(\"base64\")\n                }\n            })\n        ).toString(\"base64\")\n    };\n\n    Near.call([\n        {\n            contractName: \"sputnik-dao.near\",\n            methodName: \"create\",\n            args: finalSputnikFactoryArgs,\n            deposit: \"6000000000000000000000000\", // 6N\n            gas: 250000000000000\n        }\n    ]);\n}\n\nconst steps = [\n    {\n        title: \"DAO Info & KYC\",\n        active: state.step === 0,\n        icon: state.step > 0 ? <i className=\"bi bi-check2\"></i> : undefined,\n        className: state.step > 0 ? \"active-outline\" : undefined\n    },\n    {\n        title: \"Links & Socials\",\n        active: state.step === 1,\n        icon: state.step > 1 ? <i className=\"bi bi-check2\"></i> : undefined,\n        className: state.step > 1 ? \"active-outline\" : undefined\n    },\n    {\n        title: \"Cool Down Period\",\n        active: state.step === 2,\n        icon: state.step > 2 ? <i className=\"bi bi-check2\"></i> : undefined,\n        className: state.step > 2 ? \"active-outline\" : undefined\n    },\n    {\n        title: \"Add Groups & Members\",\n        active: state.step === 3,\n        icon: state.step > 3 ? <i className=\"bi bi-check2\"></i> : undefined,\n        className: state.step > 3 ? \"active-outline\" : undefined\n    },\n    {\n        title: \"Proposal & Voting Permission\",\n        active: state.step === 4,\n        icon: state.step > 4 ? <i className=\"bi bi-check2\"></i> : undefined,\n        className: state.step > 4 ? \"active-outline\" : undefined\n    },\n    {\n        title: \"DAO Assets\",\n        active: state.step === 5,\n        icon: state.step > 5 ? <i className=\"bi bi-check2\"></i> : undefined,\n        className: state.step > 5 ? \"active-outline\" : undefined\n    }\n];\n\nreturn (\n    <>\n        <h1 className=\"h3 fw-bold mb-4\">Create a new DAO</h1>\n        <Widget\n            src={`nearui.near/widget/Navigation.Steps`}\n            props={{\n                steps: steps,\n                onClick: (i) => {\n                    if (i > state.step) return;\n                    State.update({\n                        step: i\n                    });\n                }\n            }}\n        />\n        <Widget\n            src={`astraplusplus.ndctools.near/widget/CreateDAO.Step${state.step + 1}`}\n            props={{\n                formState: state.form,\n                onComplete: handleStepComplete,\n                errors: state.errors,\n                renderFooter: (stepState, otherProps) => (\n                    <Widget\n                        src={`astraplusplus.ndctools.near/widget/CreateDAO.Footer`}\n                        props={{\n                            isLast: state.step >= steps.length - 1,\n                            hasPrevious: state.step > 0,\n                            onNext: () => {\n                                handleStepComplete(stepState);\n                            },\n                            onPrevious: () => {\n                                State.update({\n                                    step: state.step - 1\n                                });\n                            },\n                            onReset: () => {\n                                State.update({\n                                    step: 0,\n                                    form: initialFormState,\n                                    errors: null\n                                });\n                            },\n                            ...otherProps\n                        }}\n                    />\n                )\n            }}\n        />\n    </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/CreateDAO.form", "fact_widget_deployments_id": "d50649617806dbd88b69cb15d7f378f2", "inserted_timestamp": "2023-12-21T17:54:30.839Z", "modified_timestamp": "2023-12-21T18:24:01.888Z", "__row_index": 1}