{"tx_hash": "D4ppAdRunotWuX7B1R9swCNrGWd9kRMoWmgZj8UbzDPj", "action_id_social": "CQKGZXYaW51GutJmXPb1RJHepifuthPmwVZ6W4f3qxR-0-widget", "block_id": 99619593, "block_timestamp": "2023-08-25T10:33:16.374Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Members.index", "source_code": "const daoId = props.daoId;\n\nState.init({\n  filterByRole,\n});\n\nconst processPolicy = (policy) => {\n  const obj = {\n    policy,\n    users: {},\n    roles: {},\n    everyone: {},\n  };\n  policy.roles.forEach((role) => {\n    if (role.kind === \"Everyone\") {\n      obj.everyone = role;\n    }\n    if (role.kind.Group) {\n      if (!obj.roles[role.name]) {\n        obj.roles[role.name] = role;\n      }\n      role.kind.Group.forEach((user) => {\n        if (!obj.users[user]) {\n          obj.users[user] = [];\n        }\n\n        obj.users[user].push(role.name);\n      });\n    }\n  });\n\n  return obj;\n};\n\nconst policy = useCache(\n  () =>\n    Near.asyncView(daoId, \"get_policy\").then((policy) => processPolicy(policy)),\n  daoId + \"-processed_policy\",\n  { subscribe: false }\n);\n\nif (policy === null) return \"\";\n\nconst isUserAllowedTo = (user, kind, action) => {\n  const userRoles = policy.users[user] || [\"Everyone\"];\n\n  let allowed = false;\n\n  userRoles.forEach((role) => {\n    let permissions = policy.roles[role].permissions;\n    if (role === \"Everyone\") {\n      permissions = policy.everyone.permissions;\n    }\n    const allowedRole =\n      permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n      permissions.includes(`${kind.toString()}:*`) ||\n      permissions.includes(`*:${action.toString()}`) ||\n      permissions.includes(\"*:*\");\n    allowed = allowed || allowedRole;\n    return allowedRole;\n  });\n\n  return allowed;\n};\n\nconst onRemoveUserProposal = (memberId, roleId) => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: \"Remove DAO member\",\n          kind: {\n            RemoveMemberFromRole: {\n              member_id: memberId,\n              role: roleId ?? \"council\",\n            },\n          },\n        },\n      },\n      gas: 219000000000000,\n      deposit: policy.policy.proposal_bond,\n    },\n  ]);\n};\n\nconst Wrapper = styled.div`\n  .userRow {\n    width: 100%;\n    @media screen and (min-width: 600px) {\n      width: calc(50% - 1rem);\n    }\n    @media screen and (min-width: 1400px) {\n      width: calc(33% - 1rem);\n    }\n  }\n`;\n\nconst renderUserRow = (user, roles, i) => {\n  return (\n    <div key={i} className=\"ndc-card ratio ratio-1x1 userRow\">\n      <div className=\" d-flex flex-column p-4\">\n        <Widget\n          src=\"nearui.near/widget/Element.User\"\n          props={{\n            accountId: user,\n            options: {\n              showHumanBadge: true,\n              showImage: true,\n              showSocialName: true,\n            },\n          }}\n        />\n        <div className=\"d-flex gap-1 mt-3 flex-wrap mb-3\">\n          {roles.map((role, i) => {\n            return (\n              <Widget\n                src=\"nearui.near/widget/Input.Button\"\n                props={{\n                  children: role,\n                  size: \"sm\",\n                  variant: \"default\",\n                  className: \"text-capitalize\",\n                }}\n                key={i}\n              />\n            );\n          })}\n        </div>\n        <div className=\"d-flex flex-column gap-2 mt-auto flex-wrap w-100\">\n          <Widget\n            src=\"nearui.near/widget/Social.FollowButton\"\n            props={{\n              accountId: user,\n              size: \"sm\",\n              className: \"w-100\",\n            }}\n          />\n          <Widget\n            src=\"nearui.near/widget/Input.Button\"\n            props={{\n              children: \"Propose to Mint SBT\",\n              size: \"sm\",\n              variant: [\"secondary\", \"outline\"],\n              className: \"w-100\",\n            }}\n          />\n          {isUserAllowedTo(\n            context.accountId,\n            \"remove_member_from_role\",\n            \"AddProposal\"\n          ) && (\n            <Widget\n              src=\"nearui.near/widget/Layout.Modal\"\n              props={{\n                toggle: (\n                  <Widget\n                    src=\"nearui.near/widget/Input.Button\"\n                    props={{\n                      children: \"Propose to Remove\",\n                      size: \"sm\",\n                      variant: [\"danger\", \"outline\"],\n                      className: \"w-100\",\n                    }}\n                  />\n                ),\n                content: (\n                  <div className=\"ndc-card p-4\">\n                    <Widget\n                      src=\"nearui.near/widget/Input.Select\"\n                      props={{\n                        label: \"Propose to remove from role:\",\n                        options: roles.map((r) => {\n                          return {\n                            title: r,\n                            value: r,\n                          };\n                        }),\n                        onChange: (v) => State.update({ removeFromRole: v }),\n                        value: state.removeFromRole,\n                      }}\n                    />\n                    <Widget\n                      src=\"nearui.near/widget/Input.Button\"\n                      props={{\n                        children: \"Propose to Remove\",\n                        size: \"sm\",\n                        variant: [\"danger\"],\n                        className: \"w-100\",\n                        onClick: () =>\n                          onRemoveUserProposal(user, state.removeFromRole),\n                      }}\n                    />\n                  </div>\n                ),\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderGroups = () => {\n  return (\n    <div className=\"d-flex gap-2 flex-wrap\">\n      <Widget\n        src=\"nearui.near/widget/Input.Button\"\n        props={{\n          children: `all (${Object.keys(policy.users).length})`,\n          size: \"sm\",\n          variant: !state.filterByRole ? \"primary\" : \"default\",\n          className: \"text-capitalize\",\n          onClick: () =>\n            State.update({\n              filterByRole: null,\n            }),\n        }}\n        key={i}\n      />\n      {Object.keys(policy.roles).map((role, i) => {\n        return (\n          <Widget\n            src=\"nearui.near/widget/Input.Button\"\n            props={{\n              children: `${role} (${policy.roles[role].kind.Group.length})`,\n              size: \"sm\",\n              variant: state.filterByRole === role ? \"primary\" : \"default\",\n              className: \"text-capitalize\",\n              onClick: () =>\n                State.update({\n                  filterByRole: role,\n                }),\n            }}\n            key={i}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst actions = {\n  AddProposal: \"create proposal\",\n  VoteApprove: \"vote approve\",\n  VoteReject: \"vote reject\",\n  VoteRemove: \"vote remove\",\n};\n\nconst kinds = {\n  config: \"Change config\",\n  policy: \"Change policy\",\n  add_member_to_role: \"Add member to role\",\n  remove_member_from_role: \"Remove member from role\",\n  call: \"Call\",\n  upgrade_self: \"Upgrade self\",\n  upgrade_remote: \"Upgrade remote\",\n  transfer: \"Transfer\",\n  set_vote_token: \"Set staking contract\",\n  add_bounty: \"Add bounty\",\n  bounty_done: \"Bounty done\",\n  vote: \"Vote\",\n  factory_info_update: \"Factory info update\",\n  policy_add_or_update_role: \"Change policy add or update role\",\n  policy_remove_role: \"Change policy remove role\",\n  policy_update_default_vote_policy: \"Change policy update default vote policy\",\n  policy_update_parameters: \"Change policy update parameters\",\n  \"*\": \"All types\",\n};\n\nconst renderPermissions = (role) => {\n  const permissions = new Map();\n\n  const rolePermissions =\n    role === \"all\"\n      ? policy.everyone?.permissions\n      : policy.roles[role].permissions;\n\n  rolePermissions?.forEach((p) => {\n    const [kindKey, actionKey] = p.split(\":\");\n\n    const kind = kinds[kindKey] || kindKey;\n    const action = actions[actionKey] || actionKey;\n\n    if (!permissions.has(action)) {\n      permissions.set(action, new Set());\n    }\n\n    permissions.get(action).add(kind);\n  });\n\n  const filteredPermissions = new Map(\n    [...permissions].filter(([action, kindsSet]) => kindsSet.size > 0)\n  );\n\n  const sortedPermissions = Array.from(filteredPermissions.entries()).sort(\n    (a, b) => {\n      if (a[0] === actions.AddProposal) {\n        return -1;\n      }\n      if (b[0] === actions.AddProposal) {\n        return 1;\n      }\n      return 0;\n    }\n  );\n\n  return sortedPermissions.map(([action, kindsSet], i) => (\n    <li key={i}>\n      <span className=\"text-capitalize\">{action}</span>{\" \"}\n      {action === actions.AddProposal\n        ? \"of the following types:\"\n        : \"on proposals of the following types:\"}\n      <ul>\n        {Array.from(kindsSet).map((kind, j) => (\n          <li key={j}>{kind}</li>\n        ))}\n      </ul>\n    </li>\n  ));\n};\n\nconst users = !state.filterByRole\n  ? Object.keys(policy.users)\n  : Object.keys(policy.users).filter((user) =>\n      policy.users[user].includes(state.filterByRole)\n    );\n\nreturn (\n  <Wrapper className=\"d-flex flex-column gap-4\">\n    <h2>Members & Policy</h2>\n    <div className=\"ndc-card p-4\">\n      <h4 className=\"mb-3 text-capitalize\">Groups</h4>\n      {renderGroups()}\n      <div className=\"mt-4\">\n        <h4 className=\"mb-2 muted\">\n          <span className=\"text-capitalize\">\n            {state.filterByRole || \"Everyone\"}\n          </span>{\" \"}\n          have permission to:{\" \"}\n        </h4>\n        {renderPermissions(state.filterByRole || \"all\")}\n      </div>\n    </div>\n    <div className=\"d-flex gap-4 flex-wrap\">\n      {users.map((user, i) => renderUserRow(user, policy.users[user], i))}\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Members.index", "fact_widget_deployments_id": "907b7c954e1451947748d917ece69ca7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}