{"tx_hash": "5Xw5rfRFFi3zT5AAyntQ2Ymfyo148sETu85D7gEi3tq3", "action_id_social": "BKEmP5DZiYJrp32u7d7QuJ4sdkhhzCUCA92B8NWg8J1L-0-widget", "block_id": 104124928, "block_timestamp": "2023-10-24T19:43:53.988Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Members.index", "source_code": "const daoId = props.daoId;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst baseApi = \"https://api.pikespeak.ai\";\nlet voters = [];\n\nconst CoADaoId = props.dev\n    ? \"coa.gwg-testing.near\"\n    : \"congress-coa-v1.ndc-gwg.near\";\nconst VotingBodyDaoId = props.dev\n    ? \"voting-body-v1.gwg-testing.near\"\n    : \"\";\nconst TCDaoId = props.dev\n    ? \"tc.gwg-testing.near\"\n    : \"congress-tc-v1.ndc-gwg.near\";\nconst HoMDaoId = props.dev\n    ? \"hom.gwg-testing.near\"\n    : \"congress-hom-v1.ndc-gwg.near\";\n\nconst isCongressDaoID =\n    daoId === HoMDaoId || daoId === CoADaoId || daoId === TCDaoId;\n\nfunction fetchIsHuman(account) {\n    const userSBTs = Near.view(\"registry.i-am-human.near\", \"is_human\", {\n        account: account\n    });\n    let isHuman = false;\n    if (userSBTs) {\n        userSBTs.forEach((sbt) => {\n            if (\"fractal.i-am-human.near\" === sbt[0]) {\n                isHuman = true;\n            }\n        });\n    }\n    return isHuman;\n}\n\nfunction fetchIsUserFollowed(account) {\n    const followEdge = Social.keys(\n        `${context.accountId}/graph/follow/${account}`,\n        undefined,\n        {\n            values_only: true\n        }\n    );\n    return Object.keys(followEdge || {}).length > 0;\n}\n\nfunction addNonVotedMembers() {\n    if (!policy?.users) {\n        return;\n    }\n    Object.keys(policy.users)?.map((item) => {\n        const index = voters.findIndex((d) => d.account === item);\n        if (index === -1) {\n            voters.push({\n                account: item,\n                groups: policy.users?.[item],\n                approve: 0,\n                rejected: 0,\n                isHuman: fetchIsHuman(item),\n                isUserFollowed: fetchIsUserFollowed(item)\n            });\n        }\n    });\n}\n\nfunction fetchVotes() {\n    const res = fetch(`${baseApi}/daos/votes/${daoId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": publicApiKey\n        }\n    });\n\n    if (res?.body?.length) {\n        res?.body?.map((item) => {\n            item.voters?.map((voterData) => {\n                const accountIndex = voters.findIndex(\n                    (d) => d.account === voterData.account\n                );\n                if (accountIndex !== -1) {\n                    voters[accountIndex] = {\n                        ...voters[accountIndex],\n                        rejected:\n                            voters[accountIndex].rejected + voterData.rejected,\n                        approve:\n                            voters[accountIndex].approve + voterData.approve\n                    };\n                } else {\n                    voters.push({\n                        ...voterData,\n                        isHuman: fetchIsHuman(voterData.account),\n                        isUserFollowed: fetchIsUserFollowed(voterData.account)\n                    });\n                }\n            });\n        });\n        // if any member have not voted on any proposal their data is not their in voters API\n        if (policy?.users) {\n            addNonVotedMembers();\n        }\n    } else {\n        addNonVotedMembers();\n    }\n}\n\nconst processPolicy = (policy) => {\n    const obj = {\n        policy,\n        users: {},\n        roles: {},\n        everyone: {}\n    };\n    policy.roles.forEach((role) => {\n        if (role.kind === \"Everyone\") {\n            obj.everyone = role;\n        }\n        if (role.kind.Group) {\n            if (!obj.roles[role.name]) {\n                obj.roles[role.name] = role;\n            }\n            role.kind.Group.forEach((user) => {\n                if (!obj.users[user]) {\n                    obj.users[user] = [];\n                }\n\n                obj.users[user].push(role.name);\n            });\n        }\n    });\n\n    return obj;\n};\n\nfunction processCongressMembers(members) {\n    let group = \"\";\n    switch (daoId) {\n        case HoMDaoId:\n            group = \"HoM Member\";\n            break;\n        case CoADaoId:\n            group = \"CoA Member\";\n            break;\n\n        case TCDaoId:\n            group = \"Transparency Commission Member\";\n            break;\n    }\n    const obj = {\n        policy,\n        users: {},\n        roles: {\n            [group]: {\n                permissions: members?.permissions\n            }\n        },\n        everyone: {}\n    };\n\n    members?.members?.map((item) => {\n        obj.users[item] = [group];\n    });\n    return obj;\n}\n\nconst policy = isCongressDaoID\n    ? useCache(\n          () =>\n              Near.asyncView(daoId, \"get_members\").then((members) =>\n                  processCongressMembers(members)\n              ),\n          daoId + \"-processed_congress_policy\",\n          { subscribe: false }\n      )\n    : daoId === VotingBodyDaoId\n    ? null\n    : useCache(\n          () =>\n              Near.asyncView(daoId, \"get_policy\").then((policy) =>\n                  processPolicy(policy)\n              ),\n          daoId + \"-processed_policy\",\n          { subscribe: false }\n      );\n\nif (policy === null) return \"\";\n\nfetchVotes();\n\nconst Wrapper = styled.div`\n    .userRow {\n        width: 100%;\n        @media screen and (min-width: 600px) {\n            width: calc(50% - 1rem);\n        }\n        @media screen and (min-width: 1400px) {\n            width: calc(33% - 1rem);\n        }\n    }\n`;\n\nreturn (\n    <div>\n        <Wrapper className=\"d-flex flex-column gap-4\">\n            <Widget\n                src=\"astraplusplus.ndctools.near/widget/DAO.Members.MembersGroup\"\n                props={{\n                    data: voters,\n                    policy: policy,\n                    isCongressDaoID: isCongressDaoID,\n                    isVotingBodyDao: daoId === VotingBodyDaoId\n                }}\n            />\n        </Wrapper>\n    </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Members.index", "fact_widget_deployments_id": "e849cfbfb4ef12568bed9725df1b00ef", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}