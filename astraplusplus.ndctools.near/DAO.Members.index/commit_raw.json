{"tx_hash": "HU7tXvudYdBCZR4BaoUKAtUj18YYQVZYGww9KTX3vwGH", "action_id_social": "9NB16ja78L9KQbtAaG6UW5ZULoRgitEbEfqRzHxJ7itf-0-widget", "block_id": 101934746, "block_timestamp": "2023-09-25T16:22:22.916Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Members.index", "source_code": "const daoId = props.daoId;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst baseApi = \"https://api.pikespeak.ai\";\nlet voters = [];\n\nfunction fetchIsHuman(account) {\n    const userSBTs = Near.view(\"registry.i-am-human.near\", \"is_human\", {\n        account: account\n    });\n    let isHuman = false;\n    if (userSBTs) {\n        userSBTs.forEach((sbt) => {\n            if (\"fractal.i-am-human.near\" === sbt[0]) {\n                isHuman = true;\n            }\n        });\n    }\n    return isHuman;\n}\n\nfunction fetchIsUserFollowed(account) {\n    const followEdge = Social.keys(\n        `${context.accountId}/graph/follow/${account}`,\n        undefined,\n        {\n            values_only: true\n        }\n    );\n    return Object.keys(followEdge || {}).length > 0;\n}\n\nfunction fetchVotes() {\n    const res = fetch(`${baseApi}/daos/votes/${daoId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": publicApiKey\n        }\n    });\n    if (res?.body?.length) {\n        res?.body?.map((item) => {\n            item.voters?.map((voterData) => {\n                const accountIndex = voters.findIndex(\n                    (d) => d.account === voterData.account\n                );\n                if (accountIndex !== -1) {\n                    voters[accountIndex] = {\n                        ...voters[accountIndex],\n                        rejected:\n                            voters[accountIndex].rejected + voterData.rejected,\n                        approve:\n                            voters[accountIndex].approve + voterData.approve\n                    };\n                } else {\n                    voters.push({\n                        ...voterData,\n                        isHuman: fetchIsHuman(voterData.account),\n                        isUserFollowed: fetchIsUserFollowed(voterData.account)\n                    });\n                }\n            });\n        });\n        // if any member have not voted on any proposal their data is not their in voters API\n        if (policy?.users) {\n            Object.keys(policy.users)?.map((item) => {\n                const index = voters.findIndex((d) => d.account === item);\n                if (index === -1) {\n                    voters.push({\n                        account: item,\n                        groups: policy.users?.[item],\n                        approve: 0,\n                        rejected: 0,\n                        isHuman: fetchIsHuman(item),\n                        isUserFollowed: fetchIsUserFollowed(item)\n                    });\n                }\n            });\n        }\n    }\n}\n\nconst processPolicy = (policy) => {\n    const obj = {\n        policy,\n        users: {},\n        roles: {},\n        everyone: {}\n    };\n    policy.roles.forEach((role) => {\n        if (role.kind === \"Everyone\") {\n            obj.everyone = role;\n        }\n        if (role.kind.Group) {\n            if (!obj.roles[role.name]) {\n                obj.roles[role.name] = role;\n            }\n            role.kind.Group.forEach((user) => {\n                if (!obj.users[user]) {\n                    obj.users[user] = [];\n                }\n\n                obj.users[user].push(role.name);\n            });\n        }\n    });\n\n    return obj;\n};\n\nconst policy = useCache(\n    () =>\n        Near.asyncView(daoId, \"get_policy\").then((policy) =>\n            processPolicy(policy)\n        ),\n    daoId + \"-processed_policy\",\n    { subscribe: false }\n);\n\nif (policy === null) return \"\";\n\nfetchVotes();\n\nconst Wrapper = styled.div`\n    .userRow {\n        width: 100%;\n        @media screen and (min-width: 600px) {\n            width: calc(50% - 1rem);\n        }\n        @media screen and (min-width: 1400px) {\n            width: calc(33% - 1rem);\n        }\n    }\n`;\n\nreturn (\n    <div>\n        <Wrapper className=\"d-flex flex-column gap-4\">\n            <Widget\n                src=\"astraplusplus.ndctools.near/widget/DAO.Members.MembersGroup\"\n                props={{\n                    data: voters,\n                    policy: policy\n                }}\n            />\n        </Wrapper>\n    </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Members.index", "fact_widget_deployments_id": "96c4d501f164d283961c4f1d43e9131e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 35}