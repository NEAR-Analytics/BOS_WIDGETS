{"tx_hash": "8mUY5UpgJrGBrTVVtHZkgcfzziJxnSH8PA76ZXshRB61", "action_id_social": "6bf39P4X6c25tiffZJ81s322QceBdyrrYHXwvNJjPaPM-0-widget", "block_id": 100283814, "block_timestamp": "2023-09-03T06:36:30.303Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Members.index", "source_code": "const daoId = props.daoId;\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst baseApi = \"https://api.pikespeak.ai\";\nlet voters = [];\n\nfunction fetchVotes() {\n  const res = fetch(`${baseApi}/daos/votes/${daoId}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": publicApiKey,\n    },\n  });\n  if (res?.body?.length) {\n    res?.body?.map((item) => {\n      item.voters?.map((voterData) => {\n        const accountIndex = voters.findIndex(\n          (d) => d.account === voterData.account,\n        );\n        if (accountIndex !== -1) {\n          voters[accountIndex] = {\n            ...voters[accountIndex],\n            rejected: voters[accountIndex].rejected + voterData.rejected,\n            approve: voters[accountIndex].approve + voterData.approve,\n          };\n        } else {\n          const userSBTs = Near.view(\"registry.i-am-human.near\", \"is_human\", {\n            account: voterData.account,\n          });\n          let isHuman = false;\n          if (userSBTs) {\n            userSBTs.forEach((sbt) => {\n              if (\"fractal.i-am-human.near\" === sbt[0]) {\n                isHuman = true;\n              }\n            });\n          }\n          const followEdge = Social.keys(\n            `${context.accountId}/graph/follow/${voterData.account}`,\n            undefined,\n            {\n              values_only: true,\n            },\n          );\n          voters.push({\n            ...voterData,\n            isHuman: isHuman,\n            isUserFollowed: Object.keys(followEdge || {}).length > 0,\n          });\n        }\n      });\n    });\n  }\n}\n\nfetchVotes();\n\nconst processPolicy = (policy) => {\n  const obj = {\n    policy,\n    users: {},\n    roles: {},\n    everyone: {},\n  };\n  policy.roles.forEach((role) => {\n    if (role.kind === \"Everyone\") {\n      obj.everyone = role;\n    }\n    if (role.kind.Group) {\n      if (!obj.roles[role.name]) {\n        obj.roles[role.name] = role;\n      }\n      role.kind.Group.forEach((user) => {\n        if (!obj.users[user]) {\n          obj.users[user] = [];\n        }\n\n        obj.users[user].push(role.name);\n      });\n    }\n  });\n\n  return obj;\n};\n\nconst policy = useCache(\n  () =>\n    Near.asyncView(daoId, \"get_policy\").then((policy) => processPolicy(policy)),\n  daoId + \"-processed_policy\",\n  { subscribe: false },\n);\n\nif (policy === null) return \"\";\n\nconst Wrapper = styled.div`\n  .userRow {\n    width: 100%;\n    @media screen and (min-width: 600px) {\n      width: calc(50% - 1rem);\n    }\n    @media screen and (min-width: 1400px) {\n      width: calc(33% - 1rem);\n    }\n  }\n`;\n\nreturn (\n  <div>\n    <Wrapper className=\"d-flex flex-column gap-4\">\n      <Widget\n        src=\"astraplusplus.ndctools.near/widget/DAO.Members.MembersGroup\"\n        props={{\n          data: voters,\n          policy: policy,\n        }}\n      />\n    </Wrapper>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Members.index", "fact_widget_deployments_id": "104bceab55d4a5f20aaa9243f7c2712a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 20}