{"tx_hash": "AF66E2vyqw35XHwnMx53VDxG1zb3VCfVPQtnek65Ezpg", "action_id_social": "Kzh1wViJ6iUvys9x8sGct7vUnnKkivziu2722T7Bp2u-0-widget", "block_id": 112228673, "block_timestamp": "2024-02-06T10:58:32.513Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Proposal.Common.NotificationRolesSelector", "source_code": "const DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\");\n\nif (!DaoSDK) {\n  return <></>;\n}\nconst [groupsAndMembers, setGroupsAndMembers] = useState([]);\nconst [selectedRoles, setSelectedRoles] = useState({}); // { role:boolean }\nconst daoId = props.daoId;\nconst accountId = props.accountId ?? context.accountId;\nconst onUpdate = props.onUpdate ?? (() => {});\nconst proposalType = props.proposalType;\n\nconst sdk = DaoSDK(daoId);\nconst CoADaoId = props.dev\n  ? \"coa.gwg-testing.near\"\n  : \"congress-coa-v1.ndc-gwg.near\";\nconst VotingBodyDaoId = props.dev\n  ? \"voting-body-v1.gwg-testing.near\"\n  : \"voting-body-v1.ndc-gwg.near\";\nconst TCDaoId = props.dev\n  ? \"tc.gwg-testing.near\"\n  : \"congress-tc-v1.ndc-gwg.near\";\nconst HoMDaoId = props.dev\n  ? \"hom.gwg-testing.near\"\n  : \"congress-hom-v1.ndc-gwg.near\";\n\nconst isCongressDaoID =\n  props.daoId === HoMDaoId ||\n  props.daoId === CoADaoId ||\n  props.daoId === TCDaoId;\nconst isVotingBodyDao = props.daoId === VotingBodyDaoId;\n\nuseEffect(() => {\n  if (isCongressDaoID) {\n    const data = Near.view(daoId, \"get_members\");\n    if (data === null) {\n      return;\n    }\n    setGroupsAndMembers([{ name: \"Council\", members: data.members }]);\n  } else {\n    const group = sdk.getGroupsAndMembers();\n    if (group === null || !group.length) {\n      return;\n    }\n    setGroupsAndMembers(group);\n  }\n}, []);\n\nconst handleCheckboxChange = (role) => {\n  setSelectedRoles((prevRoles) => {\n    // Check if the role already exists in the state\n    if (prevRoles.hasOwnProperty(role)) {\n      // If it exists, update the 'selected' value\n      return {\n        ...prevRoles,\n        [role]: !prevRoles[role]\n      };\n    } else {\n      // If it doesn't exist, add it with 'selected' set to true\n      return {\n        ...prevRoles,\n        [role]: true\n      };\n    }\n  });\n};\n\nconst createNotificationsData = () => {\n  const someRoleSelected = Object.values(selectedRoles).some(\n    (value) => value === true\n  );\n  if (!someRoleSelected) {\n    return null;\n  }\n  const membersToNotify = [];\n  Object.keys(selectedRoles).map((item) => {\n    if (selectedRoles[item] === true) {\n      membersToNotify = membersToNotify.concat(\n        groupsAndMembers.find((group) => group.name === item).members\n      );\n    }\n  });\n  const uniqueMembersArray = [...new Set(membersToNotify)];\n  const notification = {\n    [accountId]: {\n      index: {\n        notify: JSON.stringify(\n          uniqueMembersArray.map((account) => {\n            return {\n              key: account,\n              value: {\n                message: `${accountId} created ${proposalType} proposal for ${daoId}`,\n                params: {\n                  daoId: daoId,\n                  tab: \"proposals\",\n                  page: \"dao\"\n                },\n                type: \"custom\",\n                widget: \"astraplusplus.ndctools.near/widget/home\"\n              }\n            };\n          })\n        )\n      }\n    }\n  };\n  const call = {\n    contractName: \"social.near\",\n    methodName: \"set\",\n    args: { data: notification, options: { refund_unused_deposit: true } },\n    deposit: 100000000000000000000000\n  };\n  return call;\n};\n\nuseEffect(() => {\n  onUpdate(createNotificationsData());\n}, [selectedRoles]);\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst groupList = useMemo(() => {\n  return (\n    Array.isArray(groupsAndMembers) &&\n    groupsAndMembers.map((group) => {\n      const membersLength = group?.members.length;\n      if (!membersLength) {\n        return null;\n      }\n      return (\n        <Widget\n          src=\"nearui.near/widget/Input.Checkbox\"\n          props={{\n            label: (\n              <div>\n                {capitalizeFirstLetter(group.name)} ({membersLength} members)\n              </div>\n            ),\n            onChange: (checked) => handleCheckboxChange(group.name),\n            checked: selectedRoles[group.name] ?? false\n          }}\n        />\n      );\n    })\n  );\n}, [groupsAndMembers, selectedRoles]);\n\nif (isVotingBodyDao) {\n  return;\n}\n\nreturn (\n  <div>\n    <div>\n      Send notification to following roles:{\" \"}\n      <span className=\"text-muted\">(Optional)</span>\n    </div>\n    {groupList}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Proposal.Common.NotificationRolesSelector", "fact_widget_deployments_id": "224e8213b6408fec536d15d86f50a071", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}