{"tx_hash": "HDxPKLCmbTbRV83n9pXvciwsRZKZHkYaJ3fgKx93T3Hv", "action_id_social": "7dfj7XJYtrQZtF5grUJtZn6pSur518XdE9iPGb5PxfEE-0-widget", "block_id": 113145744, "block_timestamp": "2024-02-19T09:56:23.650Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Proposals.Table.index", "source_code": "const {\n  proposals,\n  resPerPage,\n  state,\n  update,\n  isCongressDaoID,\n  daoConfig,\n  isVotingBodyDao\n} = props;\nconst { daoId, multiSelectMode } = state;\nconst accountId = props.accountId ?? context.accountId ?? \"\";\n\nconst isHuman = useCache(\n  () =>\n    asyncFetch(\n      `https://api.pikespeak.ai/sbt/sbt-by-owner?holder=${accountId}&registry=registry.i-am-human.near`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\"\n        }\n      }\n    ).then((res) => res?.body?.length > 0),\n  daoId + \"-is-human-pikespeak-api\",\n  { subscribe: false }\n);\n\nif (isHuman === null) {\n  return <Widget src=\"nearui.near/widget/Feedback.Spinner\" />;\n}\n\nconst Table = styled.div`\n  font-size: 14px;\n  max-width: 100%;\n  overflow-x: auto;\n  height: 100%;\n  min-height: 100%;\n\n  td,\n  th {\n    vertical-align: middle;\n    padding-block: 5px;\n  }\n\n  tr {\n    height: 65px;\n  }\n\n  .id-value {\n    border: 1px solid #4498e0;\n    color: #4498e0;\n    padding: 4px 8px;\n    background: rgba(68, 152, 224, 0.1);\n    border-radius: 100px;\n    font-size: 12px;\n    font-weight: 500;\n  }\n`;\n\nconst roles = isCongressDaoID\n  ? Near.view(daoId, \"get_members\")\n  : isVotingBodyDao\n  ? null\n  : Near.view(daoId, \"get_policy\");\n\nroles = roles === null ? [] : roles?.roles ?? roles;\n\n// -- Filter the user roles\nconst userRoles = [];\nif (Array.isArray(roles)) {\n  for (const role of roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n      userRoles.push(role);\n    }\n  }\n}\n\nif (isCongressDaoID) {\n  userRoles = [\n    {\n      name: \"all\",\n      kind: \"Everyone\",\n      permissions: roles?.permissions,\n      vote_policy: {}\n    }\n  ];\n}\n\nif (isVotingBodyDao) {\n  userRoles = [\n    {\n      name: \"all\",\n      kind: \"Everyone\",\n      permissions: {},\n      vote_policy: {}\n    }\n  ];\n}\n\nconst isAllowedTo = (kind, action) => {\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n  userRoles\n    .filter(({ permissions }) => {\n      if (isCongressDaoID) {\n        const allowedRole =\n          permissions.includes(`${kind.toString()}`) &&\n          roles?.members?.includes(accountId);\n        allowed = allowed || allowedRole;\n        return allowedRole;\n      } else {\n        const allowedRole =\n          permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n          permissions.includes(`${kind.toString()}:*`) ||\n          permissions.includes(`*:${action.toString()}`) ||\n          permissions.includes(\"*:*\");\n        allowed = allowed || allowedRole;\n        return allowedRole;\n      }\n    })\n    .map((role) => role.name);\n  return allowed;\n};\n\nreturn (\n  <Table\n    class=\"table-responsive my-3\"\n    style={{\n      minHeight: 65 * (proposals?.length ?? resPerPage)\n    }}\n  >\n    {proposals === null ? (\n      <>\n        <Widget src=\"nearui.near/widget/Feedback.Spinner\" />\n      </>\n    ) : (\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">ID</th>\n            <th scope=\"col\">Date</th>\n            <th scope=\"col\">Proposer</th>\n            <th scope=\"col\" className=\"text-center\">\n              Type\n            </th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">Votes</th>\n            <th scope=\"col\" className=\"text-center\">\n              Status\n            </th>\n            <th scope=\"col\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {proposals !== null &&\n            proposals.map(({ proposal, proposal_type, proposal_id }, i) => {\n              if (!isCongressDaoID && !isVotingBodyDao) {\n                proposal.kind = {\n                  [proposal_type]: {\n                    ...proposal.kind\n                  }\n                };\n              }\n              proposal.id = proposal_id;\n              if (proposal.status === \"Removed\") return <></>;\n              return (\n                <Widget\n                  src=\"astraplusplus.ndctools.near/widget/DAO.Proposals.Table.Row\"\n                  props={{\n                    proposal,\n                    proposal_type,\n                    proposal_id,\n                    i,\n                    daoId,\n                    multiSelectMode,\n                    isAllowedTo,\n                    isCongressDaoID,\n                    isVotingBodyDao,\n                    daoConfig,\n                    isHuman,\n                    dev: props.dev\n                  }}\n                />\n              );\n            })}\n        </tbody>\n      </table>\n    )}\n  </Table>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Proposals.Table.index", "fact_widget_deployments_id": "2bc1c667238ab6d2683ee223dbd04cb9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}