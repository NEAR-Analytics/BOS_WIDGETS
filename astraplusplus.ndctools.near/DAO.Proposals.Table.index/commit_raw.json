{"tx_hash": "EayjN3WTdyFNbACz9Z16M9frNLvHkPFhvm6VZAhNYb5Z", "action_id_social": "FDYjvNTS4Jep9Y5cA72ZFpjtEp49X3oJ2TC2dAU2kU91-0-widget", "block_id": 99484389, "block_timestamp": "2023-08-23T16:10:50.269Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Proposals.Table.index", "source_code": "const { proposals, resPerPage, state, update } = props;\nconst { daoId, multiSelectMode } = state;\n\nconst Table = styled.div`\n  font-size: 13px;\n  font-weight: 600;\n  max-width: 100%;\n  overflow-x: auto;\n  height: 100%;\n  min-height: 100%;\n\n  td,\n  th {\n    vertical-align: middle;\n  }\n\n  tr {\n    height: 58px;\n  }\n\n  .id-value {\n    border: 1px solid #4498e0;\n    color: #4498e0;\n    padding: 4px 8px;\n    background: rgba(68, 152, 224, 0.1);\n    border-radius: 100px;\n    font-size: 12px;\n    font-weight: 500;\n  }\n`;\n\nconst roles = Near.view(daoId, \"get_policy\");\n\nroles = roles === null ? [] : roles.roles;\n\n// -- Filter the user roles\nconst userRoles = [];\nfor (const role of roles) {\n  if (role.kind === \"Everyone\") {\n    userRoles.push(role);\n    continue;\n  }\n  if (!role.kind.Group) continue;\n  if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n    userRoles.push(role);\n  }\n}\n\nconst isAllowedTo = (kind, action) => {\n  // -- Check if the user is allowed to perform the action\n  let allowed = false;\n  userRoles\n    .filter(({ permissions }) => {\n      const allowedRole =\n        permissions.includes(`${kind.toString()}:${action.toString()}`) ||\n        permissions.includes(`${kind.toString()}:*`) ||\n        permissions.includes(`*:${action.toString()}`) ||\n        permissions.includes(\"*:*\");\n      allowed = allowed || allowedRole;\n      return allowedRole;\n    })\n    .map((role) => role.name);\n  return allowed;\n};\n\nreturn (\n  <Table\n    class=\"table-responsive my-3\"\n    style={{\n      minHeight: 65 * (proposals?.length ?? resPerPage),\n    }}\n  >\n    {proposals === null ? (\n      <>\n        <Widget src=\"nearui.near/widget/Feedback.Spinner\" />\n      </>\n    ) : (\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">ID</th>\n            <th scope=\"col\">Date</th>\n            <th scope=\"col\">Proposer</th>\n            <th scope=\"col\" className=\"text-center\">\n              Type\n            </th>\n            <th scope=\"col\" className=\"text-center\">\n              Status\n            </th>\n            <th scope=\"col\"></th>\n            <th scope=\"col\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {proposals !== null &&\n            proposals.map(({ proposal, proposal_type, proposal_id }, i) => {\n              proposal.kind = {\n                [proposal_type]: {\n                  ...proposal.kind,\n                },\n              };\n              proposal.id = proposal_id;\n              if (proposal.status === \"Removed\") return <></>;\n              Object.keys(proposal.vote_counts).forEach((k) => {\n                if (typeof proposal.vote_counts[k] == \"string\") {\n                  proposal.vote_counts[k] = proposal.vote_counts[k]\n                    .match(/.{1,2}/g)\n                    .map((x) => parseInt(x));\n                }\n              });\n              return (\n                <Widget\n                  src=\"astraplusplus.ndctools.near/widget/DAO.Proposals.Table.Row\"\n                  props={{\n                    proposal,\n                    proposal_type,\n                    proposal_id,\n                    i,\n                    daoId,\n                    multiSelectMode,\n                    isAllowedTo,\n                  }}\n                />\n              );\n            })}\n        </tbody>\n      </table>\n    )}\n  </Table>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Proposals.Table.index", "fact_widget_deployments_id": "ee6625080a2fd1020a5e3b2be90e8959", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 17}