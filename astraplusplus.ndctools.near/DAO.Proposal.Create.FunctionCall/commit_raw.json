{"tx_hash": "DDkmecmikk3EwdPMsouUj7tDGtM8rn76x7K7f5xd9ukp", "action_id_social": "5sZQTq1uKkbcrSB6kKWfReqvp3DFjUXr2BcVMTWw1wGb-0-widget", "block_id": 105206997, "block_timestamp": "2023-11-08T07:57:43.057Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Proposal.Create.FunctionCall", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst contractId = props.contractId;\nconst onClose = props.onClose;\nconst daoId = props.daoId;\nconst isCongressDaoID = props.isCongressDaoID;\nconst powerType = props.powerType;\nconst showPowers = props.showPowers ?? true;\nconst registry = props.registry;\nconst isVotingBodyDao = props.isVotingBodyDao;\n\nconst CoADaoId = props.dev\n    ? \"coa.gwg-testing.near\"\n    : \"congress-coa-v1.ndc-gwg.near\";\nconst VotingBodyDaoId = props.dev\n    ? \"voting-body-v1.gwg-testing.near\"\n    : \"voting-body-v1.ndc-gwg.near\";\nconst TCDaoId = props.dev\n    ? \"tc.gwg-testing.near\"\n    : \"congress-tc-v1.ndc-gwg.near\";\nconst HoMDaoId = props.dev\n    ? \"hom.gwg-testing.near\"\n    : \"congress-hom-v1.ndc-gwg.near\";\n\nif (!accountId) {\n    return \"Please connect your NEAR wallet :)\";\n}\n\nfunction isEmpty(value) {\n    return !value || value === \"\";\n}\n\nState.init({\n    contractId: state.contractId,\n    method_name: state.method_name,\n    args: state.args || \"{}\",\n    deposit: state.deposit || \"0\",\n    gas: \"300000000000000\",\n    error: undefined,\n    receiver_id: null,\n    description: null,\n    powerType,\n    member: null, // for dismiss and ban hook\n    house: null, // for dismiss and ban hook\n    accounts: null, // for unban hook\n    memo: null, // for unban hook\n    showReceiverAsOptions: false,\n    disableReceiverField: false,\n    attachDeposit: 0,\n    proposalQueue: null\n});\n\nconst fc_args = Buffer.from(state.args, \"utf-8\").toString(\"base64\");\n\nfunction isNearAddress(address) {\n    const ACCOUNT_ID_REGEX =\n        /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n    return (\n        address.length >= 2 &&\n        address.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(address)\n    );\n}\n\nconst handleFunctionCall = () => {\n    if (!isCongressDaoID && !VotingBodyDaoId) {\n        if (isEmpty(state.contractId) || !isNearAddress(state.contractId)) {\n            State.update({\n                error: \"Please enter a valid contract ID\"\n            });\n            return;\n        }\n    }\n    if (state.powerType !== \"Unban\" && state.powerType !== \"DismissAndBan\") {\n        if (isEmpty(state.method_name)) {\n            State.update({\n                error: \"Please enter a valid method name\"\n            });\n            return;\n        }\n\n        const is_valid_json = (str) => {\n            try {\n                JSON.parse(str);\n            } catch (e) {\n                return false;\n            }\n            return true;\n        };\n\n        if (isEmpty(state.args) || !is_valid_json(state.args)) {\n            State.update({\n                error: \"Please enter a valid JSON arguments\"\n            });\n            return;\n        }\n        if (isEmpty(state.deposit) || state.deposit < 0) {\n            State.update({\n                error: \"Please enter a valid deposit\"\n            });\n            return;\n        }\n        if (isEmpty(state.gas) || state.gas <= 0) {\n            State.update({\n                error: \"Please enter a valid gas\"\n            });\n            return;\n        }\n    }\n\n    const deposit = Big(state.deposit).mul(Big(10).pow(24)).toFixed();\n    if (isVotingBodyDao) {\n        if (isEmpty(state.description)) {\n            State.update({\n                error: \"Please enter a description\"\n            });\n            return;\n        }\n        Near.call([\n            {\n                contractName: registry,\n                methodName: \"is_human_call\",\n                args: {\n                    ctr: daoId,\n                    function: \"create_proposal\",\n                    payload: JSON.stringify({\n                        kind: {\n                            FunctionCall: {\n                                receiver_id: state.receiver_id,\n                                actions: [\n                                    {\n                                        method_name: state.method_name,\n                                        args: fc_args,\n                                        deposit: deposit,\n                                        gas: state.gas\n                                    }\n                                ]\n                            }\n                        },\n                        caller: accountId,\n                        description: state.description\n                    })\n                },\n                deposit: state.attachDeposit\n                    ? Big(state.attachDeposit)\n                    : 100000000000000000000000,\n                gas: 20000000000000\n            }\n        ]);\n    } else {\n        if (isCongressDaoID) {\n            if (isEmpty(state.description)) {\n                State.update({\n                    error: \"Please enter a description\"\n                });\n                return;\n            }\n            let args = {};\n            if (state.powerType === \"Unban\") {\n                const accountsArray = state.accounts\n                    ?.split(\",\")\n                    .map((item) => item.trim());\n                if (\n                    !accountsArray?.length ||\n                    accountsArray?.some((item) => !isNearAddress(item))\n                ) {\n                    State.update({\n                        error: \"Please enter valid account IDs\"\n                    });\n                    return;\n                }\n                if (isEmpty(state.memo)) {\n                    State.update({\n                        error: \"Please enter a valid memo\"\n                    });\n                    return;\n                }\n\n                args = {\n                    kind: {\n                        FunctionCall: {\n                            receiver_id: registry,\n                            actions: [\n                                {\n                                    method_name: \"admin_unflag_accounts\",\n                                    args: Buffer.from(\n                                        JSON.stringify({\n                                            accounts: accountsArray,\n                                            memo: state.memo\n                                        }),\n                                        \"utf-8\"\n                                    ).toString(\"base64\"),\n                                    deposit: deposit,\n                                    gas: \"20000000000000\"\n                                }\n                            ]\n                        }\n                    },\n                    description: state.description\n                };\n            } else {\n                if (state.powerType === \"DismissAndBan\") {\n                    if (isEmpty(state.house) || !isNearAddress(state.house)) {\n                        State.update({\n                            error: \"Please enter a valid house contract ID\"\n                        });\n                        return;\n                    }\n\n                    if (isEmpty(state.member) || !isNearAddress(state.member)) {\n                        State.update({\n                            error: \"Please enter a valid member ID\"\n                        });\n                        return;\n                    }\n                    args = {\n                        kind: {\n                            DismissAndBan: {\n                                member: state.member,\n                                house: state.house\n                            }\n                        },\n                        description: state.description\n                    };\n                } else {\n                    if (\n                        isEmpty(state.receiver_id) ||\n                        !isNearAddress(state.receiver_id)\n                    ) {\n                        State.update({\n                            error: \"Please enter a valid recipient address\"\n                        });\n                        return;\n                    }\n                    args = {\n                        kind: {\n                            FunctionCall: {\n                                receiver_id: state.receiver_id,\n                                actions: [\n                                    {\n                                        method_name: state.method_name,\n                                        args: fc_args,\n                                        deposit: deposit,\n                                        gas: state.gas\n                                    }\n                                ]\n                            }\n                        },\n                        description: state.description\n                    };\n                }\n            }\n            Near.call([\n                {\n                    contractName: daoId,\n                    methodName: \"create_proposal\",\n                    args: args,\n                    deposit: 100000000000000000000000,\n                    gas: 20000000000000\n                }\n            ]);\n        } else {\n            Near.call([\n                {\n                    contractName: state.contractId,\n                    methodName: state.method_name,\n                    args: {\n                        Arguments: fc_args\n                    },\n                    deposit: deposit,\n                    gas: state.gas ?? \"200000000000000\"\n                }\n            ]);\n        }\n    }\n};\n\nconst onChangeContract = (contractId) => {\n    State.update({\n        contractId,\n        error: undefined\n    });\n};\n\nconst onChangeMethod = (method_name) => {\n    State.update({\n        method_name,\n        error: undefined\n    });\n};\n\nconst onChangeArgs = (args) => {\n    State.update({\n        args,\n        error: undefined\n    });\n};\n\nconst onChangeGas = (gas) => {\n    State.update({\n        gas,\n        error: undefined\n    });\n};\n\nconst onChangeDeposit = (deposit) => {\n    State.update({\n        deposit,\n        error: undefined\n    });\n};\n\nconst onChangeDescription = (description) => {\n    State.update({\n        description,\n        error: undefined\n    });\n};\n\nconst onChangeRecipient = (receiver_id) => {\n    State.update({\n        receiver_id,\n        error: undefined\n    });\n};\n\nconst onChangeHouse = (house) => {\n    State.update({\n        house,\n        error: undefined\n    });\n};\n\nconst onChangeMember = (member) => {\n    State.update({\n        member,\n        error: undefined\n    });\n};\n\nconst onChangeAccounts = (accounts) => {\n    State.update({\n        accounts,\n        error: undefined\n    });\n};\n\nconst onChangeMemo = (memo) => {\n    State.update({\n        memo,\n        error: undefined\n    });\n};\n\nconst onChangeQueue = ({ amount, queue }) => {\n    State.update({\n        attachDeposit: amount,\n        proposalQueue: queue\n    });\n};\n\nconst defaultDescription =\n    \"### [Your Title Here]\\n\\n#### Description\\n\\n[Detailed description of what the proposal is about.]\\n\\n#### Why This Proposal?\\n\\n[Explanation of why this proposal is necessary or beneficial.]\\n\\n#### Execution Plan\\n\\n[Description of how the proposal will be implemented.]\\n\\n#### Budget\\n\\n[If applicable, outline the budget required to execute this proposal.]\\n\\n#### Timeline\\n\\n[Proposed timeline for the execution of the proposal.]\";\n\nreturn (\n    <>\n        <Widget\n            src=\"astraplusplus.ndctools.near/widget/DAO.Proposal.Common.ProposalQueue\"\n            props={{\n                daoId: daoId,\n                onUpdate: onChangeQueue,\n                dev: props.dev\n            }}\n        />\n\n        {state.powerType === \"DismissAndBan\" ? (\n            <>\n                <div className=\"mb-3\">\n                    <h5>Member</h5>\n                    <input\n                        type=\"text\"\n                        value={state.member}\n                        onChange={(e) => onChangeMember(e.target.value)}\n                        placeholder=\"Specify member account\"\n                    />\n                </div>\n                <Widget\n                    src=\"astraplusplus.ndctools.near/widget/DAO.Proposal.Common.CongressHouseDropdown\"\n                    props={{\n                        daoId: daoId,\n                        label: \"House\",\n                        placeholder: \"Select house account\",\n                        onUpdate: (house) => {\n                            State.update({\n                                house: house,\n                                error: undefined\n                            });\n                        }\n                    }}\n                />\n            </>\n        ) : (\n            <>\n                {state.powerType === \"Unban\" ? (\n                    <>\n                        <div className=\"mb-3\">\n                            <h5>Accounts List (separated by comma)</h5>\n                            <input\n                                type=\"text\"\n                                value={state.accounts}\n                                onChange={(e) =>\n                                    onChangeAccounts(e.target.value)\n                                }\n                            />\n                        </div>\n                        <div className=\"mb-3\">\n                            <h5>Memo</h5>\n                            <Widget\n                                src=\"sking.near/widget/Common.Inputs.Markdown\"\n                                props={{\n                                    value: state.memo,\n                                    onChange: (value) => onChangeMemo(value),\n                                    height: \"160px\",\n                                    initialText: \"\"\n                                }}\n                            />\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        {!isCongressDaoID && !isVotingBodyDao && (\n                            <div className=\"mb-3\">\n                                <h5>Contract</h5>\n                                <input\n                                    type=\"text\"\n                                    value={state.contractId}\n                                    onChange={(e) =>\n                                        onChangeContract(e.target.value)\n                                    }\n                                />\n                            </div>\n                        )}\n                        <div className=\"mb-3\">\n                            <h5>Method</h5>\n                            <input\n                                disabled={state.powerType && state.method_name}\n                                type=\"text\"\n                                value={state.method_name}\n                                onChange={(e) => onChangeMethod(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"mb-3\">\n                            <h5>Arguments (JSON)</h5>\n                            <textarea\n                                type=\"text\"\n                                value={state.args}\n                                onChange={(e) => onChangeArgs(e.target.value)}\n                                className=\"form-control\"\n                                defaultValue={state.args}\n                            />\n                        </div>\n                        {state.showReceiverAsOptions && (\n                            <div className=\"mb-3\">\n                                <Widget\n                                    src=\"astraplusplus.ndctools.near/widget/DAO.Proposal.Common.CongressHouseDropdown\"\n                                    props={{\n                                        daoId: daoId,\n                                        label: \"Recipient\",\n                                        placeholder: \"Select Recipient account\",\n                                        onUpdate: (house) => {\n                                            State.update({\n                                                receiver_id: house,\n                                                error: undefined\n                                            });\n                                        }\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {((isCongressDaoID && !state.showReceiverAsOptions) ||\n                            isVotingBodyDao) && (\n                            <div className=\"mb-3\">\n                                <h5>Recipient</h5>\n                                <input\n                                    disabled={state.disableReceiverField}\n                                    type=\"text\"\n                                    value={state.receiver_id}\n                                    onChange={(e) =>\n                                        onChangeRecipient(e.target.value)\n                                    }\n                                    placeholder=\"Specify target account\"\n                                />\n                            </div>\n                        )}\n                        {!isCongressDaoID && !isVotingBodyDao && (\n                            <div className=\"mb-3\">\n                                <h5>Gas</h5>\n                                <input\n                                    type=\"number\"\n                                    value={state.gas}\n                                    onChange={(e) =>\n                                        onChangeGas(e.target.value)\n                                    }\n                                    defaultValue=\"300000000000000\"\n                                />\n                            </div>\n                        )}\n                    </>\n                )}\n                <div className=\"mb-3\">\n                    <h5>\n                        Deposit{\" \"}\n                        {(isCongressDaoID || isVotingBodyDao) && \"(NEAR)\"}\n                    </h5>\n                    <input\n                        type=\"number\"\n                        value={state.deposit}\n                        onChange={(e) => onChangeDeposit(e.target.value)}\n                        defaultValue={0}\n                    />\n                </div>\n            </>\n        )}\n        {(isCongressDaoID || isVotingBodyDao) && (\n            <div className=\"mb-3\">\n                <h5>Description</h5>\n                <Widget\n                    src=\"sking.near/widget/Common.Inputs.Markdown\"\n                    props={{\n                        value: state.description,\n                        onChange: (value) => onChangeDescription(value),\n                        height: \"270px\",\n                        initialText: defaultDescription\n                    }}\n                />\n            </div>\n        )}\n        {state.error && <div className=\"text-danger\">{state.error}</div>}\n        <div className=\"ms-auto\">\n            <Widget\n                src=\"sking.near/widget/Common.Button\"\n                props={{\n                    children: \"Propose Function Call\",\n                    onClick: handleFunctionCall,\n                    className: \"mt-2\",\n                    variant: \"success\"\n                }}\n            />\n            {onClose && (\n                <Widget\n                    src=\"sking.near/widget/Common.Button\"\n                    props={{\n                        children: \"Close\",\n                        onClick: onClose,\n                        className: \"mt-2\"\n                    }}\n                />\n            )}\n        </div>\n    </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Proposal.Create.FunctionCall", "fact_widget_deployments_id": "1d969c4bbdf09efb589b5239d39fac12", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 40}