{"tx_hash": "D6ujGU68TyJtwamzabUiDRCiMv7NDK11yecYNTg5Stka", "action_id_social": "9XkQgQ4QznKHFrCu3BNepNtp9ikiZZx6S8rmGXFM5kme-0-widget", "block_id": 115912669, "block_timestamp": "2024-04-01T10:40:40.975Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Feed", "source_code": "const daoId = props.daoId;\nconst [showComposeModal, setShowComposeModal] = useState(false);\nconst [postContent, setPostContent] = useState(null);\n\nconst policy = Near.view(daoId, \"get_policy\");\n\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\n\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== daoId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item\n      }\n    }));\n}\n\nfunction composeData(content) {\n  const data = {\n    post: {\n      main: JSON.stringify(content)\n    },\n    index: {\n      post: JSON.stringify({\n        key: \"main\",\n        value: {\n          type: \"md\"\n        }\n      })\n    }\n  };\n\n  const notifications = extractTagNotifications(content.text, {\n    type: \"social\",\n    path: `${daoId}/post/main`\n  });\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n  return data;\n}\n\nfunction addProposal(content) {\n  const base64 = Buffer.from(\n    JSON.stringify({\n      data: {\n        [daoId]: composeData(content)\n      },\n      options: { refund_unused_deposit: true }\n    }),\n    \"utf-8\"\n  ).toString(\"base64\");\n  Near.call({\n    contractName: daoId,\n    methodName: \"add_proposal\",\n    args: {\n      proposal: {\n        description: `Social Feed post created by ${context.accountId}`,\n        kind: {\n          FunctionCall: {\n            receiver_id: \"social.near\",\n            actions: [\n              {\n                method_name: \"set\",\n                args: base64,\n                deposit: \"100000000000000000000000\",\n                gas: \"200000000000000\"\n              }\n            ]\n          }\n        }\n      }\n    },\n    deposit: policy?.proposal_bond || 100000000000000000000000,\n    gas: 200000000000000\n  });\n}\n\nconst Wrapper = styled.div`\n  .border-vertical {\n    border-top: 1px solid rgb(236, 238, 240);\n    border-bottom: 1px solid rgb(236, 238, 240);\n    margin-bottom: 2rem;\n  }\n`;\n\nreturn (\n  <Wrapper>\n    <div className=\"d-flex flex-column gap-2\">\n      <h3>DAO Feed</h3>\n      <div className=\"border-vertical\">\n        <Widget\n          src=\"astraplusplus.ndctools.near/widget/Common.Components.Compose\"\n          props={{ accountId: daoId, onPostClick: addProposal }}\n        />\n      </div>\n    </div>\n    <Widget\n      src=\"astraplusplus.ndctools.near/widget/Common.Components.Feed\"\n      props={{\n        accounts: [daoId]\n      }}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Feed", "fact_widget_deployments_id": "ef08b96959e0a19949f8a03277e639c3", "inserted_timestamp": "2024-04-01T12:33:40.493Z", "modified_timestamp": "2024-04-01T12:33:40.493Z", "__row_index": 1}