{"tx_hash": "ztPKatkCAAT3FqYh16ZnQFKte2rg9373kFeUvmtNjEq", "action_id_social": "ANKxwChGGrfXHAJZs7ifybYcJ3jcWvcKPFkBnt1AGohB-0-widget", "block_id": 114574868, "block_timestamp": "2024-03-12T15:20:42.868Z", "signer_id": "astraplusplus.ndctools.near", "widget_name": "DAO.Proposal.Create.Dismiss", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId;\nconst onClose = props.onClose;\nconst registry = props.registry;\nconst isHookCall = props.isHookCall;\n\nif (!accountId) {\n  return \"Please connect your NEAR wallet :)\";\n}\n\nState.init({\n  dao: null,\n  member: null,\n  error: null,\n  attachDeposit: 0,\n  proposalQueue: null,\n  description: null,\n  notificationsData: {}\n});\n\nfunction isEmpty(value) {\n  return !value || value === \"\";\n}\n\nfunction isNearAddress(address) {\n  const ACCOUNT_ID_REGEX =\n    /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n  return (\n    address.length >= 2 &&\n    address.length <= 64 &&\n    ACCOUNT_ID_REGEX.test(address)\n  );\n}\n\nconst handleProposal = () => {\n  let error;\n  let args;\n  const gas = 20000000000000;\n  const deposit = state.attachDeposit\n    ? Big(state.attachDeposit)\n    : 100000000000000000000000;\n\n  if (!isHookCall) {\n    if (isEmpty(state.dao) || !isNearAddress(state.dao))\n      error = \"Please select a house\";\n    if (isEmpty(state.member) || !isNearAddress(state.member))\n      error = \"Please enter a valid member ID\";\n    if (isEmpty(state.description)) error = \"Please enter a description\";\n    if (!state.proposalQueue) error = \"Please select proposal queue\";\n\n    if (error) {\n      State.update({ error });\n      return;\n    }\n  }\n  const calls = [];\n  if (isHookCall) {\n    const fc_args = Buffer.from(\n      JSON.stringify({ member: state.member }),\n      \"utf-8\"\n    ).toString(\"base64\");\n\n    args = {\n      kind: {\n        FunctionCall: {\n          receiver_id: state.dao,\n          actions: [\n            {\n              method_name: \"dismiss_hook\",\n              args: fc_args,\n              gas: \"50000000000000\",\n              deposit: \"0\"\n            }\n          ]\n        }\n      },\n      description: state.description\n    };\n    calls.push({\n      contractName: daoId,\n      methodName: \"create_proposal\",\n      args: args,\n      deposit: 100000000000000000000000,\n      gas: 200000000000000\n    });\n  } else {\n    const args = JSON.stringify({\n      description: state.description,\n      kind: { Dismiss: { dao: state.dao, member: state.member } },\n      caller: accountId\n    });\n\n    calls.push({\n      contractName: registry,\n      methodName: \"is_human_call\",\n      args: {\n        ctr: daoId,\n        function: \"create_proposal\",\n        payload: args\n      },\n      gas: gas,\n      deposit: deposit\n    });\n  }\n  if (state.notificationsData) {\n    calls.push(state.notificationsData);\n  }\n\n  Near.call(calls);\n};\n\nconst onChangeDao = (dao) => {\n  State.update({\n    dao,\n    error: undefined\n  });\n};\n\nconst onChangeMember = (member) => {\n  State.update({\n    member,\n    error: undefined\n  });\n};\n\nconst onChangeDescription = (description) => {\n  State.update({\n    description,\n    error: undefined\n  });\n};\n\nconst onChangeQueue = ({ amount, queue }) => {\n  State.update({\n    attachDeposit: amount,\n    proposalQueue: queue\n  });\n};\n\nconst defaultDescription =\n  \"### [Your Title Here]\\n\\n#### Description\\n\\n[Detailed description of what the proposal is about.]\\n\\n#### Why This Proposal?\\n\\n[Explanation of why this proposal is necessary or beneficial.]\\n\\n#### Execution Plan\\n\\n[Description of how the proposal will be implemented.]\\n\\n#### Budget\\n\\n[If applicable, outline the budget required to execute this proposal.]\\n\\n#### Timeline\\n\\n[Proposed timeline for the execution of the proposal.]\";\n\nreturn (\n  <>\n    {!isHookCall && (\n      <Widget\n        src=\"astraplusplus.ndctools.near/widget/DAO.Proposal.Common.ProposalQueue\"\n        props={{\n          daoId: daoId,\n          onUpdate: onChangeQueue,\n          dev: props.dev\n        }}\n      />\n    )}\n    <Widget\n      src=\"astraplusplus.ndctools.near/widget/DAO.Proposal.Common.CongressHouseDropdown\"\n      props={{\n        daoId: daoId,\n        label: \"House\",\n        placeholder: \"Select house account\",\n        onUpdate: onChangeDao,\n        dev: props.dev\n      }}\n    />\n    <div className=\"mb-3\">\n      <h5>Member</h5>\n      <input\n        type=\"text\"\n        onChange={(e) => onChangeMember(e.target.value)}\n        placeholder=\"Member Account ID\"\n      />\n    </div>\n    <div className=\"mb-3\">\n      <h5>Proposal Description</h5>\n      <Widget\n        src=\"sking.near/widget/Common.Inputs.Markdown\"\n        props={{\n          onChange: (value) => onChangeDescription(value),\n          height: \"270px\",\n          initialText: defaultDescription\n        }}\n      />\n    </div>\n    <Widget\n      src=\"astraplusplus.ndctools.near/widget/DAO.Proposal.Common.NotificationRolesSelector\"\n      props={{\n        daoId: daoId,\n        dev: props.dev,\n        onUpdate: (v) => {\n          State.update({ notificationsData: v });\n        },\n        proposalType: \"Dismiss\"\n      }}\n    />\n    {state.error && <div className=\"text-danger\">{state.error}</div>}\n    <div className=\"ms-auto\">\n      <Widget\n        src=\"sking.near/widget/Common.Button\"\n        props={{\n          children: \"Create Proposal\",\n          onClick: handleProposal,\n          className: \"mt-2\",\n          variant: \"success\"\n        }}\n      />\n      {onClose && (\n        <Widget\n          src=\"sking.near/widget/Common.Button\"\n          props={{\n            children: \"Close\",\n            onClick: onClose,\n            className: \"mt-2\"\n          }}\n        />\n      )}\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/astraplusplus.ndctools.near/widget/DAO.Proposal.Create.Dismiss", "fact_widget_deployments_id": "9e342cc9d1d02d63a93ff9f395b51370", "inserted_timestamp": "2024-03-12T16:30:13.632Z", "modified_timestamp": "2024-03-12T16:30:13.632Z", "__row_index": 1}