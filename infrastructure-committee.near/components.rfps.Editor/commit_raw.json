{"tx_hash": "4Q7yr7KcLx9Lo5dYuoRNksVBuKn1VBMVXBJ5js3AuFgs", "action_id_social": "4Uh472Ftkv8JVat6ucETB7n9vzWyX9pJXmYximN4dFYq-0-widget", "block_id": 120709548, "block_timestamp": "2024-06-08T12:38:26.705Z", "signer_id": "infrastructure-committee.near", "widget_name": "components.rfps.Editor", "source_code": "/*\nLicense: MIT\nAuthor: devhub.near\nHomepage: https://github.com/NEAR-DevHub/near-prpsls-bos#readme\n*/\n/* INCLUDE: \"includes/common.jsx\" */\nconst REPL_DEVHUB = \"devhub.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE = \"infrastructure-committee.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT =\n  \"infrastructure-committee.near\";\nconst REPL_RPC_URL = \"https://rpc.mainnet.near.org\";\nconst REPL_NEAR = \"near\";\nconst RFP_IMAGE =\n  \"https://ipfs.near.social/ipfs/bafkreicbygt4kajytlxij24jj6tkg2ppc2dw3dlqhkermkjjfgdfnlizzy\";\n\nconst RFP_FEED_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_rfps_with_latest_snapshot\";\n\nconst RFP_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_rfp_snapshots\";\n\nconst PROPOSAL_FEED_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_proposals_with_latest_snapshot\";\n\nconst PROPOSAL_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_proposal_snapshots\";\nconst RFP_TIMELINE_STATUS = {\n  ACCEPTING_SUBMISSIONS: \"ACCEPTING_SUBMISSIONS\",\n  EVALUATION: \"EVALUATION\",\n  PROPOSAL_SELECTED: \"PROPOSAL_SELECTED\",\n  CANCELLED: \"CANCELLED\",\n};\n\nconst PROPOSAL_TIMELINE_STATUS = {\n  DRAFT: \"DRAFT\",\n  REVIEW: \"REVIEW\",\n  APPROVED: \"APPROVED\",\n  REJECTED: \"REJECTED\",\n  CANCELED: \"CANCELLED\",\n  APPROVED_CONDITIONALLY: \"APPROVED_CONDITIONALLY\",\n  PAYMENT_PROCESSING: \"PAYMENT_PROCESSING\",\n  FUNDED: \"FUNDED\",\n};\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql`;\n\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `polyprogrammist_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst CANCEL_RFP_OPTIONS = {\n  CANCEL_PROPOSALS: \"CANCEL_PROPOSALS\",\n  UNLINK_PROPOSALS: \"UNLINK_PROPOSALSS\",\n  NONE: \"NONE\",\n};\n\nfunction parseJSON(json) {\n  if (typeof json === \"string\") {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      return json;\n    }\n  } else {\n    return json;\n  }\n}\n\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\n\nconst PROPOSALS_APPROVED_STATUS_ARRAY = [\n  PROPOSAL_TIMELINE_STATUS.APPROVED,\n  PROPOSAL_TIMELINE_STATUS.APPROVED_CONDITIONALLY,\n  PROPOSAL_TIMELINE_STATUS.PAYMENT_PROCESSING,\n  PROPOSAL_TIMELINE_STATUS.FUNDED,\n];\n\nfunction getLinkUsingCurrentGateway(url) {\n  const data = fetch(`https://httpbin.org/headers`);\n  const gatewayURL = data?.body?.headers?.Origin ?? \"\";\n  return `https://${\n    gatewayURL.includes(\"near.org\") ? \"dev.near.org\" : \"near.social\"\n  }/${url}`;\n}\n/* END_INCLUDE: \"includes/common.jsx\" */\n\nconst { href } = VM.require(`${REPL_DEVHUB}/widget/core.lib.url`);\n\nconst draftKey = \"INFRA_RFP_EDIT\";\nhref || (href = () => {});\n\nconst { getGlobalLabels } = VM.require(\n  `${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.core.lib.contract`\n) || { getGlobalLabels: () => {} };\nconst { id, timestamp } = props;\n\nconst isEditPage = typeof id === \"string\";\nconst author = context.accountId;\nconst FundingDocs =\n  \"https://github.com/near/Infrastructure-Working-Group/wiki/Funding-Process-%E2%80%90-Company\";\nconst ToCDocs =\n  \"https://github.com/near/Infrastructure-Working-Group/wiki/Terms-&-Conditions\";\nconst CoCDocs =\n  \"https://github.com/near/Infrastructure-Working-Group/wiki/Code-Of-Conduct\";\n\nconst rfpLabelOptions = getGlobalLabels();\nconst isAllowedToWriteRfp = Near.view(\n  REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT,\n  \"is_allowed_to_write_rfps\",\n  {\n    editor: context.accountId,\n  }\n);\n\nif (!author || !isAllowedToWriteRfp) {\n  return (\n    <Widget src={`${REPL_DEVHUB}/widget/devhub.entity.proposal.LoginScreen`} />\n  );\n}\n\nlet editRfpData = null;\nlet draftRfpData = null;\n\nif (isEditPage) {\n  editRfpData = Near.view(\n    `${REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT}`,\n    \"get_rfp\",\n    {\n      rfp_id: parseInt(id),\n    }\n  );\n}\n\nconst Container = styled.div`\n  input {\n    font-size: 14px !important;\n  }\n\n  .card.no-border {\n    border-left: none !important;\n    border-right: none !important;\n    margin-bottom: -3.5rem;\n  }\n\n  textarea {\n    font-size: 14px !important;\n  }\n\n  .full-width-div {\n    width: 100vw;\n    position: relative;\n    left: 50%;\n    right: 50%;\n    margin-left: -50vw;\n    margin-right: -50vw;\n  }\n\n  .text-sm {\n    font-size: 13px;\n  }\n\n  .h5 {\n    font-size: 18px !important;\n  }\n\n  @media screen and (max-width: 768px) {\n    .h6 {\n      font-size: 14px !important;\n    }\n\n    .h5 {\n      font-size: 16px !important;\n    }\n\n    .text-sm {\n      font-size: 11px;\n    }\n\n    .gap-6 {\n      gap: 0.5rem !important;\n    }\n  }\n\n  .border-bottom {\n    border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);\n  }\n\n  .text-xs {\n    font-size: 10px;\n  }\n\n  .flex-2 {\n    flex: 2;\n  }\n\n  .flex-1 {\n    flex: 1;\n  }\n  .bg-grey {\n    background-color: #f4f4f4;\n  }\n\n  .border-bottom {\n    border-bottom: 1px solid grey;\n  }\n\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .border-1 {\n    border: 1px solid #e2e6ec;\n  }\n\n  .black-btn {\n    background-color: #000 !important;\n    border: none;\n    color: white;\n    &:active {\n      color: white;\n    }\n  }\n\n  .dropdown-toggle:after {\n    position: absolute;\n    top: 46%;\n    right: 5%;\n  }\n\n  .drop-btn {\n    max-width: none !important;\n  }\n\n  .dropdown-menu {\n    width: 100%;\n    border-radius: 0.375rem !important;\n  }\n\n  .input-icon {\n    display: flex;\n    height: 100%;\n    align-items: center;\n    border-right: 1px solid #dee2e6;\n    padding-right: 10px;\n  }\n\n  /* Tooltip container */\n  .custom-tooltip {\n    position: relative;\n    display: inline-block;\n  }\n\n  /* Tooltip text */\n  .custom-tooltip .tooltiptext {\n    visibility: hidden;\n    width: 250px;\n    background-color: #fff;\n    color: #6c757d;\n    text-align: center;\n    padding: 10px;\n    border-radius: 6px;\n    font-size: 12px;\n    border: 0.2px solid #6c757d;\n\n    /* Position the tooltip text */\n    position: absolute;\n    z-index: 1;\n    bottom: 125%;\n    left: -30px;\n\n    /* Fade in tooltip */\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n\n  /* Tooltip arrow */\n  .custom-tooltip .tooltiptext::after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 15%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: #555 transparent transparent transparent;\n  }\n\n  /* Show the tooltip text when you mouse over the tooltip container */\n  .custom-tooltip:hover .tooltiptext {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  .form-check-input:checked {\n    background-color: #04a46e !important;\n    border-color: #04a46e !important;\n  }\n\n  .gap-6 {\n    gap: 2.5rem;\n  }\n\n  a.no-space {\n    display: inline-block;\n  }\n\n  .fw-light-bold {\n    font-weight: 600 !important;\n  }\n\n  .disabled .circle {\n    opacity: 0.5;\n  }\n\n  .circle {\n    width: 6px;\n    height: 6px;\n    border-radius: 50%;\n  }\n\n  .grey {\n    background-color: #818181;\n  }\n\n  @media screen and (max-width: 970px) {\n    .gap-6 {\n      gap: 1.5rem !important;\n    }\n  }\n\n  @media screen and (max-width: 570px) {\n    .gap-6 {\n      gap: 0.5rem !important;\n    }\n  }\n`;\n\nconst Heading = styled.div`\n  font-size: 24px;\n  font-weight: 700;\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nfunction getTimestamp(date) {\n  // in nanoseconds\n  const parsedDate = date ? new Date(date) : new Date();\n  return Math.floor(parsedDate.getTime() * 1000000).toString();\n}\n\nfunction getDate(timestamp) {\n  const stamp =\n    !timestamp || timestamp === \"0\" || timestamp === \"NaN\" ? null : timestamp;\n  return new Date(parseFloat(stamp / 1000000)).toISOString().split(\"T\")[0];\n}\n\nconst [labels, setLabels] = useState([]);\nconst [title, setTitle] = useState(null);\nconst [description, setDescription] = useState(null);\nconst [summary, setSummary] = useState(null);\nconst [consent, setConsent] = useState({ toc: false, coc: false });\nconst [submissionDeadline, setSubmissionDeadline] = useState(null);\nconst [allowDraft, setAllowDraft] = useState(true);\n\nconst [loading, setLoading] = useState(true);\nconst [disabledSubmitBtn, setDisabledSubmitBtn] = useState(false);\nconst [isDraftBtnOpen, setDraftBtnOpen] = useState(false);\n\nconst [showRfpViewModal, setShowRfpViewModal] = useState(false); // when user creates/edit a RFP and confirm the txn, this is true\nconst [rfpId, setRfpId] = useState(null);\nconst [rfpIdsArray, setRfpIdsArray] = useState(null);\nconst [isTxnCreated, setCreateTxn] = useState(false);\nconst [oldRfpData, setOldRfpData] = useState(null);\nconst [timeline, setTimeline] = useState({\n  status: RFP_TIMELINE_STATUS.ACCEPTING_SUBMISSIONS,\n});\n\nif (allowDraft) {\n  draftRfpData = Storage.privateGet(draftKey);\n}\n\nconst memoizedDraftData = useMemo(\n  () => ({\n    id: editRfpData.id ?? null,\n    snapshot: {\n      name: title,\n      description: description,\n      labels: labels,\n      summary: summary,\n      submission_deadline: getTimestamp(submissionDeadline),\n    },\n  }),\n  [title, summary, description, submissionDeadline, labels]\n);\n\nuseEffect(() => {\n  if (allowDraft) {\n    let data = editRfpData || JSON.parse(draftRfpData);\n    let snapshot = data.snapshot;\n    if (data) {\n      if (timestamp) {\n        snapshot =\n          data.snapshot_history.find((item) => item.timestamp === timestamp) ??\n          data.snapshot;\n      }\n      if (\n        draftRfpData &&\n        editRfpData &&\n        editRfpData.id === JSON.parse(draftRfpData).id\n      ) {\n        snapshot = {\n          ...editRfpData.snapshot,\n          ...JSON.parse(draftRfpData).snapshot,\n        };\n      }\n      setRfpId(data.id);\n      setLabels(snapshot.labels);\n      setTitle(snapshot.name);\n      setSummary(snapshot.summary);\n      setDescription(snapshot.description);\n      setSubmissionDeadline(getDate(snapshot.submission_deadline));\n      setTimeline(parseJSON(snapshot.timeline));\n      if (isEditPage) {\n        setConsent({ toc: true, coc: true });\n      }\n    }\n  }\n}, [editRfpData, draftRfpData, allowDraft]);\n\n// show loader until LS data is set in state\nuseEffect(() => {\n  const handler = setTimeout(() => {\n    setAllowDraft(false);\n    setLoading(false);\n  }, 200);\n\n  return () => clearTimeout(handler);\n}, []);\n\nuseEffect(() => {\n  if (showRfpViewModal) {\n    return;\n  }\n  setDisabledSubmitBtn(\n    !title ||\n      !description ||\n      !summary ||\n      !(labels ?? []).length ||\n      !submissionDeadline ||\n      !consent.toc ||\n      !consent.coc\n  );\n  const handler = setTimeout(() => {\n    Storage.privateSet(draftKey, JSON.stringify(memoizedDraftData));\n  }, 10000);\n\n  return () => clearTimeout(handler);\n}, [\n  memoizedDraftData,\n  draftKey,\n  draftRfpData,\n  consent,\n  isTxnCreated,\n  showRfpViewModal,\n]);\n\nconst InputContainer = ({ heading, description, children }) => {\n  return (\n    <div className=\"d-flex flex-column gap-1 gap-sm-2 w-100\">\n      <b className=\"h6 mb-0\">{heading}</b>\n      {description && (\n        <div className=\"text-muted w-100 text-sm\">{description}</div>\n      )}\n      {children}\n    </div>\n  );\n};\n\n// show RFP created after txn approval for popup wallet\nuseEffect(() => {\n  if (isTxnCreated) {\n    if (editRfpData) {\n      setOldRfpData(editRfpData);\n      if (\n        editRfpData &&\n        typeof editRfpData === \"object\" &&\n        oldRfpData &&\n        typeof oldRfpData === \"object\" &&\n        JSON.stringify(editRfpData) !== JSON.stringify(oldRfpData)\n      ) {\n        setCreateTxn(false);\n        setRfpId(editRfpData.id);\n        setShowRfpViewModal(true);\n      }\n    } else {\n      const rfpIds = Near.view(\n        REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT,\n        \"get_all_rfp_ids\"\n      );\n      if (Array.isArray(rfpIds) && !rfpIdsArray) {\n        setRfpIdsArray(rfpIds);\n      }\n      if (\n        Array.isArray(rfpIds) &&\n        Array.isArray(rfpIdsArray) &&\n        rfpIds.length !== rfpIdsArray.length\n      ) {\n        setCreateTxn(false);\n        setRfpId(rfpIds[rfpIds.length - 1]);\n        setShowRfpViewModal(true);\n      }\n    }\n  }\n});\n\nuseEffect(() => {\n  if (props.transactionHashes) {\n    setLoading(true);\n    useCache(\n      () =>\n        asyncFetch(REPL_RPC_URL, {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            jsonrpc: \"2.0\",\n            id: \"dontcare\",\n            method: \"tx\",\n            params: [props.transactionHashes, context.accountId],\n          }),\n        }).then((transaction) => {\n          const transaction_method_name =\n            transaction?.body?.result?.transaction?.actions[0].FunctionCall\n              .method_name;\n\n          const is_edit_or_add_rfp_transaction =\n            transaction_method_name == \"add_rfp\" ||\n            transaction_method_name == \"edit_rfp\";\n\n          if (is_edit_or_add_rfp_transaction) {\n            setShowRfpViewModal(true);\n            Storage.privateSet(draftKey, null);\n          }\n          // show the latest created rfp to user\n          if (transaction_method_name == \"add_rfp\") {\n            useCache(\n              () =>\n                Near.asyncView(\n                  REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT,\n                  \"get_all_rfp_ids\"\n                ).then((rfpIdsArray) => {\n                  setRfpId(rfpIdsArray?.[rfpIdsArray?.length - 1]);\n                }),\n              props.transactionHashes + \"rfpIds\",\n              { subscribe: false }\n            );\n          } else {\n            setRfpId(id);\n          }\n          setLoading(false);\n        }),\n      props.transactionHashes + context.accountId,\n      { subscribe: false }\n    );\n  } else {\n    if (showRfpViewModal) {\n      setShowRfpViewModal(false);\n    }\n  }\n}, [props.transactionHashes]);\n\nconst LoadingButtonSpinner = (\n  <span\n    className=\"submit-rfp-loading-indicator spinner-border spinner-border-sm\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  ></span>\n);\n\nconst onSubmit = () => {\n  setCreateTxn(true);\n  const body = {\n    rfp_body_version: \"V0\",\n    name: title,\n    description: description,\n    summary: summary,\n    submission_deadline: getTimestamp(submissionDeadline),\n    timeline: timeline,\n  };\n  const args = { labels: (labels ?? []).map((i) => i.value), body: body };\n  if (isEditPage) {\n    args[\"id\"] = editRfpData.id;\n  }\n\n  Near.call([\n    {\n      contractName: REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT,\n      methodName: isEditPage ? \"edit_rfp\" : \"add_rfp\",\n      args: args,\n      gas: 270000000000000,\n    },\n  ]);\n};\n\nfunction cleanDraft() {\n  Storage.privateSet(draftKey, null);\n}\n\nif (loading) {\n  return (\n    <div\n      style={{ height: \"50vh\" }}\n      className=\"d-flex justify-content-center align-items-center w-100\"\n    >\n      <Widget\n        src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Spinner`}\n      />\n    </div>\n  );\n}\n\nconst [collapseState, setCollapseState] = useState({});\n\nconst CollapsibleContainer = ({ title, children, noPaddingTop }) => {\n  return (\n    <div\n      className={\n        \"border-bottom py-4 \" +\n        (noPaddingTop && \"pt-0 \") +\n        (collapseState[title] && \" pb-0\")\n      }\n    >\n      <div className={\"d-flex justify-content-between \"}>\n        <div className=\"h5 text-muted mb-2 mb-sm-3\">{title}</div>\n        <div\n          className=\"d-flex d-sm-none cursor-pointer\"\n          onClick={() =>\n            setCollapseState((prevState) => ({\n              ...prevState,\n              [title]: !prevState[title],\n            }))\n          }\n        >\n          {!collapseState[title] ? (\n            <i className=\"bi bi-chevron-up h4\"></i>\n          ) : (\n            <i className=\"bi bi-chevron-down h4\"></i>\n          )}\n        </div>\n      </div>\n      <div className={!collapseState[title] ? \"\" : \"d-none\"}>{children}</div>\n    </div>\n  );\n};\n\nconst CategoryDropdown = useMemo(() => {\n  return (\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.molecule.MultiSelectCategoryDropdown`}\n      props={{\n        selected: labels,\n        onChange: (v) => setLabels(v),\n        disabled: false,\n        availableOptions: rfpLabelOptions,\n      }}\n    />\n  );\n}, [draftRfpData]);\n\nconst TitleComponent = useMemo(() => {\n  return (\n    <Widget\n      src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Input`}\n      props={{\n        className: \"flex-grow-1\",\n        value: title,\n        onBlur: (e) => {\n          setTitle(e.target.value);\n        },\n        skipPaddingGap: true,\n        inputProps: {\n          max: 80,\n        },\n      }}\n    />\n  );\n}, [draftRfpData]);\n\nconst SummaryComponent = useMemo(() => {\n  return (\n    <Widget\n      src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Input`}\n      props={{\n        className: \"flex-grow-1\",\n        value: summary,\n        multiline: true,\n        onBlur: (e) => {\n          setSummary(e.target.value);\n        },\n        skipPaddingGap: true,\n        inputProps: {\n          max: 500,\n        },\n      }}\n    />\n  );\n}, [draftRfpData]);\n\nconst DescriptionComponent = useMemo(() => {\n  return (\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.molecule.Compose`}\n      props={{\n        data: description,\n        onChange: setDescription,\n        autocompleteEnabled: true,\n        autoFocus: false,\n      }}\n    />\n  );\n}, [draftRfpData]);\n\nconst ConsentComponent = useMemo(() => {\n  return (\n    <div className=\"d-flex flex-column gap-2\">\n      <Widget\n        src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Checkbox`}\n        props={{\n          value: \"toc\",\n          label: (\n            <>\n              I\u2019ve agree to{\" \"}\n              <a\n                href={ToCDocs}\n                className=\"text-decoration-underline\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Terms and Conditions\n              </a>\n              and commit to honoring it\n            </>\n          ),\n          isChecked: consent.toc,\n          onClick: (value) =>\n            setConsent((prevConsent) => ({\n              ...prevConsent,\n              toc: value,\n            })),\n        }}\n      />\n      <Widget\n        src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Checkbox`}\n        props={{\n          value: \"coc\",\n          label: (\n            <>\n              I\u2019ve read{\" \"}\n              <a\n                href={CoCDocs}\n                className=\"text-decoration-underline\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Code of Conduct\n              </a>\n              and commit to honoring it\n            </>\n          ),\n          isChecked: consent.coc,\n          onClick: (value) =>\n            setConsent((prevConsent) => ({\n              ...prevConsent,\n              coc: value,\n            })),\n        }}\n      />\n    </div>\n  );\n}, [draftRfpData]);\n\nconst SubmissionDeadline = useMemo(() => {\n  return (\n    <Widget\n      src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Input`}\n      props={{\n        className: \"flex-grow-1\",\n        value: submissionDeadline,\n        onBlur: (e) => {\n          setSubmissionDeadline(e.target.value);\n        },\n        skipPaddingGap: true,\n        type: \"date\",\n        inputProps: {\n          required: true,\n        },\n      }}\n    />\n  );\n}, [draftRfpData]);\n\nreturn (\n  <Container className=\"w-100 py-2 px-0 px-sm-2 d-flex flex-column gap-3\">\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.rfps.ViewRfpModal`}\n      props={{\n        isOpen: showRfpViewModal,\n        isEdit: isEditPage,\n        rfpId: rfpId,\n      }}\n    />\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.rfps.ConfirmCancelModal`}\n      props={{\n        isOpen: isCancelModalOpen,\n        onCancelClick: () => {\n          setCancelModal(false);\n          setTimeline({ status: RFP_TIMELINE_STATUS.EVALUATION });\n        },\n        onConfirmClick: (value) => {\n          setCancelModal(false);\n          onCancelRFP(value);\n        },\n        linkedProposalIds: editRfpData.snapshot.linked_proposals,\n      }}\n    />\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.rfps.WarningModal`}\n      props={{\n        isOpen: isWarningModalOpen,\n        onConfirmClick: () => {\n          setWarningModal(false);\n          setTimeline({ status: RFP_TIMELINE_STATUS.EVALUATION });\n        },\n      }}\n    />\n    <Heading className=\"px-2 px-sm-0\">\n      {isEditPage ? \"Edit\" : \"Create\"} RFP\n    </Heading>\n    <div className=\"card no-border rounded-0 px-2 p-lg-0 full-width-div\">\n      <div className=\"container-xl py-4 d-flex flex-wrap gap-6 w-100\">\n        <div\n          style={{ minWidth: \"350px\" }}\n          className=\"flex-2 w-100 order-2 order-md-1\"\n        >\n          <div className=\"d-flex gap-3 w-100\">\n            <div className=\"d-none d-sm-flex\">\n              <img src={RFP_IMAGE} height={35} width={35} />\n            </div>\n            <div className=\"d-flex flex-column gap-4 w-100\">\n              <InputContainer\n                heading=\"Category\"\n                description={\n                  <>\n                    Select the relevant categories to help users quickly\n                    understand the nature of the need. Need guidance? See{\" \"}\n                    <a\n                      href={FundingDocs}\n                      className=\"text-decoration-underline no-space\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Funding Docs\n                    </a>\n                    .\n                  </>\n                }\n              >\n                {CategoryDropdown}\n              </InputContainer>\n              <InputContainer\n                heading=\"Title\"\n                description=\"Highlight the essence of your RFP in a few words. This will appear on your RFP\u2019s detail page and the main RFP feed. Keep it short, please :)\"\n              >\n                {TitleComponent}\n              </InputContainer>\n              <InputContainer\n                heading=\"Summary\"\n                description=\"Explain your RFP briefly. What is the problem or need, desired outcome, and benefit to the NEAR developer community.\"\n              >\n                {SummaryComponent}\n              </InputContainer>\n              <InputContainer\n                heading=\"Description\"\n                description={\n                  \"Expand on your summary with any relevant details like a detailed explanation of the problem and the expected solution, scope, and deliverables. Also include an estimate range for the project if you have a specific budget. And the selection criteria.\"\n                }\n              >\n                {DescriptionComponent}\n              </InputContainer>\n              <InputContainer heading=\"Final Consent\">\n                {ConsentComponent}\n              </InputContainer>\n              <div className=\"d-flex justify-content-end gap-2 align-items-center\">\n                <Link\n                  to={\n                    isEditPage\n                      ? href({\n                          widgetSrc: `${REPL_INFRASTRUCTURE_COMMITTEE}/widget/app`,\n                          params: {\n                            page: \"rfp\",\n                            id: parseInt(id),\n                          },\n                        })\n                      : href({\n                          widgetSrc: `${REPL_INFRASTRUCTURE_COMMITTEE}/widget/app`,\n                          params: {\n                            page: \"rfps\",\n                          },\n                        })\n                  }\n                >\n                  <Widget\n                    src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Button`}\n                    props={{\n                      classNames: {\n                        root: \"d-flex h-100 text-muted fw-bold btn-outline shadow-none border-0 btn-sm\",\n                      },\n                      label: \"Discard Changes\",\n                      onClick: cleanDraft,\n                    }}\n                  />\n                </Link>\n                <Widget\n                  src={`${REPL_DEVHUB}/widget/devhub.components.molecule.Button`}\n                  props={{\n                    classNames: {\n                      root: \"d-flex h-100 fw-light-bold btn-outline shadow-none border-1\",\n                    },\n                    label: (\n                      <div className=\"d-flex align-items-center gap-2\">\n                        <div className=\"circle grey\"></div> <div>Submit</div>\n                      </div>\n                    ),\n                    onClick: onSubmit,\n                    disabled: disabledSubmitBtn,\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          style={{ minWidth: \"350px\" }}\n          className=\"flex-1 w-100 order-1 order-md-2\"\n        >\n          <CollapsibleContainer noPaddingTop={true}>\n            <div className=\"d-flex flex-column gap-3 gap-sm-4\">\n              <InputContainer\n                heading=\"Submission Deadline\"\n                description=\"Enter the deadline for submitting proposals.\"\n              >\n                {SubmissionDeadline}\n              </InputContainer>\n            </div>\n          </CollapsibleContainer>\n          <div className=\"my-2\">\n            <CollapsibleContainer title=\"Timeline\">\n              <Widget\n                src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.rfps.TimelineConfigurator`}\n                props={{\n                  timeline: timeline,\n                  setTimeline: (v) => {\n                    if (editRfpData.snapshot.timeline.status === v.status) {\n                      return;\n                    }\n                    // if proposal selected timeline is selected and no approved proposals exist, show warning\n                    if (\n                      v.status === RFP_TIMELINE_STATUS.PROPOSAL_SELECTED &&\n                      Array.isArray(approvedProposals) &&\n                      !approvedProposals.length\n                    ) {\n                      setWarningModal(true);\n                    }\n\n                    if (v.status === RFP_TIMELINE_STATUS.CANCELLED) {\n                      setCancelModal(true);\n                    }\n                    setTimeline(v);\n                  },\n                  disabled: isEditPage ? false : true,\n                }}\n              />\n            </CollapsibleContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/infrastructure-committee.near/widget/components.rfps.Editor", "fact_widget_deployments_id": "d48eab9b329df7d3c7d4e4aeff3a905a", "inserted_timestamp": "2024-06-08T14:04:05.979Z", "modified_timestamp": "2024-06-08T14:04:05.979Z", "__row_index": 1}