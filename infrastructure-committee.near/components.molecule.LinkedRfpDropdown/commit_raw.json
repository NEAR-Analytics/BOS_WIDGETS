{"tx_hash": "B7BhZ3Y6cXQ4hKwDDMCXTpxk4LxrDqaZeCwnZqKMhrRg", "action_id_social": "5DEGcYzh8stYTgco5RLm1MHaYu6PhruprU6CgavN15bJ-0-widget", "block_id": 120923131, "block_timestamp": "2024-06-11T10:37:01.607Z", "signer_id": "infrastructure-committee.near", "widget_name": "components.molecule.LinkedRfpDropdown", "source_code": "/*\nLicense: MIT\nAuthor: devhub.near\nHomepage: https://github.com/NEAR-DevHub/near-prpsls-bos#readme\n*/\n/* INCLUDE: \"includes/common.jsx\" */\nconst REPL_DEVHUB = \"devhub.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE = \"infrastructure-committee.near\";\nconst REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT =\n  \"infrastructure-committee.near\";\nconst REPL_RPC_URL = \"https://rpc.mainnet.near.org\";\nconst REPL_NEAR = \"near\";\nconst RFP_IMAGE =\n  \"https://ipfs.near.social/ipfs/bafkreicbygt4kajytlxij24jj6tkg2ppc2dw3dlqhkermkjjfgdfnlizzy\";\n\nconst RFP_FEED_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_rfps_with_latest_snapshot\";\n\nconst RFP_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_rfp_snapshots\";\n\nconst PROPOSAL_FEED_INDEXER_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_proposals_with_latest_snapshot\";\n\nconst PROPOSAL_QUERY_NAME =\n  \"polyprogrammist_near_devhub_ic_v1_proposal_snapshots\";\nconst RFP_TIMELINE_STATUS = {\n  ACCEPTING_SUBMISSIONS: \"ACCEPTING_SUBMISSIONS\",\n  EVALUATION: \"EVALUATION\",\n  PROPOSAL_SELECTED: \"PROPOSAL_SELECTED\",\n  CANCELLED: \"CANCELLED\",\n};\n\nconst PROPOSAL_TIMELINE_STATUS = {\n  DRAFT: \"DRAFT\",\n  REVIEW: \"REVIEW\",\n  APPROVED: \"APPROVED\",\n  REJECTED: \"REJECTED\",\n  CANCELED: \"CANCELLED\",\n  APPROVED_CONDITIONALLY: \"APPROVED_CONDITIONALLY\",\n  PAYMENT_PROCESSING: \"PAYMENT_PROCESSING\",\n  FUNDED: \"FUNDED\",\n};\n\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql`;\n\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(QUERYAPI_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"x-hasura-role\": `polyprogrammist_near` },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst CANCEL_RFP_OPTIONS = {\n  CANCEL_PROPOSALS: \"CANCEL_PROPOSALS\",\n  UNLINK_PROPOSALS: \"UNLINK_PROPOSALSS\",\n  NONE: \"NONE\",\n};\n\nfunction parseJSON(json) {\n  if (typeof json === \"string\") {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      return json;\n    }\n  } else {\n    return json;\n  }\n}\n\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\n\nconst PROPOSALS_APPROVED_STATUS_ARRAY = [\n  PROPOSAL_TIMELINE_STATUS.APPROVED,\n  PROPOSAL_TIMELINE_STATUS.APPROVED_CONDITIONALLY,\n  PROPOSAL_TIMELINE_STATUS.PAYMENT_PROCESSING,\n  PROPOSAL_TIMELINE_STATUS.FUNDED,\n];\n\nfunction getLinkUsingCurrentGateway(url) {\n  const data = fetch(`https://httpbin.org/headers`);\n  const gatewayURL = data?.body?.headers?.Origin ?? \"\";\n  return `https://${\n    gatewayURL.includes(\"near.org\") ? \"dev.near.org\" : \"near.social\"\n  }/${url}`;\n}\n/* END_INCLUDE: \"includes/common.jsx\" */\n\nconst { href } = VM.require(`${REPL_DEVHUB}/widget/core.lib.url`);\nhref || (href = () => {});\n\nconst { linkedRfp, onChange, disabled, onDeleteRfp } = props;\n\nconst isModerator = Near.view(\n  REPL_INFRASTRUCTURE_COMMITTEE_CONTRACT,\n  \"is_allowed_to_write_rfps\",\n  {\n    editor: context.accountId,\n  }\n);\n\nconst [selectedRFP, setSelectedRFP] = useState(null);\nconst [acceptingRfpsOptions, setAcceptingRfpsOption] = useState([]);\nconst [allRfpOptions, setAllRfpOptions] = useState([]);\nconst [searchRFPId, setSearchRfpId] = useState(\"\");\nconst [initialStateApplied, setInitialState] = useState(false);\n\nconst queryName = RFP_FEED_INDEXER_QUERY_NAME;\nconst query = `query GetLatestSnapshot($offset: Int = 0, $limit: Int = 10, $where: ${queryName}_bool_exp = {}) {\n  ${queryName}(\n    offset: $offset\n    limit: $limit\n    order_by: {rfp_id: desc}\n    where: $where\n  ) {\n    name\n    rfp_id\n    timeline\n  }\n  }`;\n\nfunction separateNumberAndText(str) {\n  const numberRegex = /\\d+/;\n\n  if (numberRegex.test(str)) {\n    const number = str.match(numberRegex)[0];\n    const text = str.replace(numberRegex, \"\").trim();\n    return { number: parseInt(number), text };\n  } else {\n    return { number: null, text: str.trim() };\n  }\n}\n\nconst buildWhereClause = () => {\n  // show only accepting submissions stage rfps\n  let where = {};\n  const { number, text } = separateNumberAndText(searchRFPId);\n\n  if (number) {\n    where = { rfp_id: { _eq: number }, ...where };\n  }\n\n  if (text) {\n    where = {\n      _or: [\n        { name: { _iregex: `${text}` } },\n        { summary: { _iregex: `${text}` } },\n        { description: { _iregex: `${text}` } },\n      ],\n      ...where,\n    };\n  }\n\n  return where;\n};\n\nconst fetchRfps = () => {\n  const FETCH_LIMIT = 30;\n  const variables = {\n    limit: FETCH_LIMIT,\n    offset: 0,\n    where: buildWhereClause(),\n  };\n  fetchGraphQL(query, \"GetLatestSnapshot\", variables).then(async (result) => {\n    if (result.status === 200) {\n      if (result.body.data) {\n        const rfpsData = result.body.data?.[queryName];\n        const data = [];\n        const acceptingData = [];\n        for (const prop of rfpsData) {\n          const timeline = parseJSON(prop.timeline);\n          const label = \"# \" + prop.rfp_id + \" : \" + prop.name;\n          const value = prop.rfp_id;\n          if (timeline.status === RFP_TIMELINE_STATUS.ACCEPTING_SUBMISSIONS) {\n            acceptingData.push({\n              label,\n              value,\n            });\n          }\n          data.push({\n            label,\n            value,\n          });\n        }\n        setAcceptingRfpsOption(acceptingData);\n        setAllRfpOptions(data);\n      }\n    }\n  });\n};\n\nuseEffect(() => {\n  fetchRfps();\n}, [searchRFPId]);\n\nuseEffect(() => {\n  if (JSON.stringify(linkedRfp) !== JSON.stringify(selectedRFP)) {\n    if (allRfpOptions.length > 0) {\n      if (typeof linkedRfp !== \"object\") {\n        setSelectedRFP(allRfpOptions.find((i) => linkedRfp === i.value));\n      } else {\n        setSelectedRFP(linkedRfp);\n      }\n      setInitialState(true);\n    }\n  } else {\n    setInitialState(true);\n  }\n}, [linkedRfp, allRfpOptions]);\n\nuseEffect(() => {\n  if (\n    JSON.stringify(linkedRfp) !== JSON.stringify(selectedRFP) &&\n    initialStateApplied\n  ) {\n    onChange(selectedRFP);\n  }\n}, [selectedRFP, initialStateApplied]);\n\nreturn (\n  <>\n    {selectedRFP && (\n      <div className=\"d-flex gap-2 align-items-center\">\n        <a\n          className=\"text-decoration-underline flex-1\"\n          href={href({\n            widgetSrc: `${REPL_INFRASTRUCTURE_COMMITTEE}/widget/app`,\n            params: {\n              page: \"rfp\",\n              id: selectedRFP.value,\n            },\n          })}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {selectedRFP.label}\n        </a>\n        {!disabled && (\n          <div\n            className=\"cursor-pointer\"\n            onClick={() => {\n              onDeleteRfp();\n              setSelectedRFP(null);\n            }}\n          >\n            <i className=\"bi bi-trash3-fill\"></i>\n          </div>\n        )}\n      </div>\n    )}\n    <Widget\n      src={`${REPL_INFRASTRUCTURE_COMMITTEE}/widget/components.molecule.DropDownWithSearch`}\n      props={{\n        disabled: disabled,\n        selectedValue: selectedRFP.value,\n        onChange: (v) => {\n          setSelectedRFP(v);\n        },\n        options: isModerator ? allRfpOptions : acceptingRfpsOptions,\n        showSearch: true,\n        searchInputPlaceholder: \"Search by Id\",\n        defaultLabel: \"Search RFP\",\n        searchByValue: true,\n        onSearch: (value) => {\n          setSearchRfpId(value);\n        },\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/infrastructure-committee.near/widget/components.molecule.LinkedRfpDropdown", "fact_widget_deployments_id": "4f662cf3d8b8c3baa20c4e7f9e0c144b", "inserted_timestamp": "2024-06-11T12:05:37.054Z", "modified_timestamp": "2024-06-11T12:05:37.054Z", "__row_index": 3}