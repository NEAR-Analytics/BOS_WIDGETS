{"tx_hash": "Hg83JyjniC9bXJxyqcppAPZp6ivDpZxmGEihMaL5xWfY", "action_id_social": "5VapEXqZkngJLZUuiGjRjN9GqMBLKFwySofPUsTBWjsE-0-widget", "block_id": 124163023, "block_timestamp": "2024-07-24T17:38:30.779Z", "signer_id": "infrastructure-committee.near", "widget_name": "components.molecule.ComposeComment", "source_code": "const proposalId = props.proposalId;\nconst rfpId = props.rfpId;\nconst draftKey = \"INFRA_COMMENT_DRAFT\" + proposalId;\nlet draftComment = \"\";\nconst ComposeEmbeddCSS = `\n  .CodeMirror {\n    border: none !important;\n    min-height: 50px !important;\n  }\n  .editor-toolbar {\n    border: none !important;\n  }\n  .CodeMirror-scroll{\n    min-height: 50px !important;\n    max-height: 300px !important;\n  }\n`;\nconst notifyAccountIds = props.notifyAccountIds ?? [];\nconst accountId = context.accountId;\nconst item = props.item;\nconst [allowGetDraft, setAllowGetDraft] = useState(true);\nconst [comment, setComment] = useState(null);\nconst [isTxnCreated, setTxnCreated] = useState(false);\nconst [handler, setHandler] = useState(\"update\"); // to update editor state on draft and txn approval\nconst [showCommentToast, setCommentToast] = useState(false);\nif (allowGetDraft) {\n  draftComment = Storage.privateGet(draftKey);\n}\nuseEffect(() => {\n  if (draftComment) {\n    setComment(draftComment);\n    setAllowGetDraft(false);\n    setHandler(\"refreshEditor\");\n  }\n}, [draftComment]);\nuseEffect(() => {\n  if (draftComment === comment) {\n    return;\n  }\n  const handler = setTimeout(() => {\n    Storage.privateSet(draftKey, comment);\n  }, 1000);\n  return () => {\n    clearTimeout(handler);\n  };\n}, [comment]);\nuseEffect(() => {\n  if (handler === \"update\") {\n    return;\n  }\n  const handler = setTimeout(() => {\n    setHandler(\"update\");\n  }, 3000);\n  return () => {\n    clearTimeout(handler);\n  };\n}, [handler]);\nif (!accountId) {\n  return (\n    <div\n      style={{\n        marginLeft: 10,\n        backgroundColor: \"#ECF8FB\",\n        border: \"1px solid #E2E6EC\",\n      }}\n      className=\"d-flex align-items-center gap-1 p-4 rounded-2 flex-wrap flex-md-nowrap\"\n    >\n      <Link to=\"https://near.org/signup\">\n        <Widget\n          src={`devhub.near/widget/devhub.components.molecule.Button`}\n          props={{\n            classNames: { root: \"grey-btn\" },\n            label: \"Sign up\",\n          }}\n        />\n      </Link>\n      <div className=\"fw-bold\">to join this conversation.</div>\n      <div>Already have an account?</div>\n      <a className=\"text-decoration-underline\" href=\"https://near.org/signin\">\n        Log in to comment\n      </a>\n    </div>\n  );\n}\nfunction extractMentions(text) {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n}\nfunction extractTagNotifications(text, item) {\n  return extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item,\n      },\n    }));\n}\nfunction composeData() {\n  setTxnCreated(true);\n  const data = {\n    post: {\n      comment: JSON.stringify({\n        type: \"md\",\n        text: comment,\n        item,\n      }),\n    },\n    index: {\n      comment: JSON.stringify({\n        key: item,\n        value: {\n          type: \"md\",\n        },\n      }),\n    },\n  };\n  const notifications = extractTagNotifications(comment, {\n    type: \"social\",\n    path: `${accountId}/post/comment`,\n  });\n  if (notifyAccountIds.length > 0) {\n    notifyAccountIds.map((account) => {\n      if (account !== context.accountId) {\n        notifications.push({\n          key: account,\n          value: proposalId\n            ? {\n                type: \"proposal/reply\",\n                item,\n                proposal: proposalId,\n                widgetAccountId: \"infrastructure-committee.near\",\n              }\n            : {\n                type: \"rfp/reply\",\n                item,\n                rfp: rfpId,\n                widgetAccountId: \"infrastructure-committee.near\",\n              },\n        });\n      }\n    });\n  }\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n  Social.set(data, {\n    force: true,\n    onCommit: () => {\n      setCommentToast(true);\n      setComment(\"\");\n      Storage.privateSet(draftKey, \"\");\n      setHandler(\"committed\");\n      setTxnCreated(false);\n    },\n    onCancel: () => {\n      setTxnCreated(false);\n    },\n  });\n}\nuseEffect(() => {\n  if (props.transactionHashes && comment) {\n    setComment(\"\");\n  }\n}, [props.transactionHashes]);\nconst LoadingButtonSpinner = (\n  <span\n    class=\"comment-btn-spinner spinner-border spinner-border-sm\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  ></span>\n);\nconst Compose = useMemo(() => {\n  return (\n    <Widget\n      src={`infrastructure-committee.near/widget/components.molecule.Compose`}\n      props={{\n        data: comment,\n        onChangeKeyup: setComment,\n        autocompleteEnabled: true,\n        placeholder: \"Add your comment here...\",\n        height: \"250\",\n        embeddCSS: ComposeEmbeddCSS,\n        handler: handler,\n        showProposalIdAutoComplete: true,\n        sortedRelevantUsers: props.sortedRelevantUsers,\n      }}\n    />\n  );\n}, [draftComment, handler, props.sortedRelevantUsers]);\nreturn (\n  <div className=\"d-flex gap-2\">\n    <Widget\n      src={`near/widget/DIG.Toast`}\n      props={{\n        title: \"Comment Submitted Successfully\",\n        type: \"success\",\n        open: showCommentToast,\n        onOpenChange: (v) => setCommentToast(v),\n        trigger: <></>,\n        providerProps: { duration: 3000 },\n      }}\n    />\n    <Widget\n      src={`devhub.near/widget/devhub.entity.proposal.Profile`}\n      props={{\n        accountId: accountId,\n      }}\n    />\n    <div className=\"d-flex flex-column gap-2 w-100\">\n      <b className=\"mt-1\">Add a comment</b>\n      {Compose}\n      <div className=\"d-flex gap-2 align-content-center justify-content-end\">\n        <Widget\n          src={`devhub.near/widget/devhub.components.molecule.Button`}\n          props={{\n            label: isTxnCreated ? LoadingButtonSpinner : \"Comment\",\n            [\"data-testid\"]: \"compose-comment\",\n            disabled: !comment || isTxnCreated,\n            classNames: { root: \"green-btn btn-sm\" },\n            onClick: () => {\n              composeData();\n            },\n          }}\n        />\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/infrastructure-committee.near/widget/components.molecule.ComposeComment", "fact_widget_deployments_id": "ffdccf014eaa122111f5a6bee31c3c87", "inserted_timestamp": "2024-07-24T18:56:26.724Z", "modified_timestamp": "2024-07-24T18:56:26.724Z", "__row_index": 1}