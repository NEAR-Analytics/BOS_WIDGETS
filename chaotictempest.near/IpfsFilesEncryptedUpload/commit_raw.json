{"tx_hash": "3JyZmi9zCRu3cXz6wWRAa8oHZRTvTVXLqL6jXKc5Khwc", "action_id_social": "66S3xtaxcm5G3BaLZmgz3VnrXrUoaE73onmnJVrL85Jr-0-widget", "block_id": 107331473, "block_timestamp": "2023-12-07T04:06:44.925Z", "signer_id": "chaotictempest.near", "widget_name": "IpfsFilesEncryptedUpload", "source_code": "const fileAccept = props.fileAccept || \"*.*\";\nconst fileIcon = props.fileIcon || \"bi-file\";\nconst buttonText = props.buttonText || \"Upload a file\";\n\nconst defaultPassword = \"ipfs-files-encrypted-upload-supplied-password\";\n\ninitState({\n  uploading: false,\n  files: [],\n});\n\nconst str2array = (str) => {\n  return new Uint8Array(Array.from(str).map((letter) => letter.charCodeAt(0)));\n};\n\nconst new_sk = () => {\n  const hashed_id = nacl.hash(str2array(context.accountId));\n  const hashed_pw =\n    props.hashedPassword ?? nacl.hash(str2array(defaultPassword));\n  const sk = new Uint8Array(nacl.secretbox.keyLength);\n  for (var i = 0; i < hashed_id.length; i++) {\n    const sk_i = i % sk.length;\n    if (i >= sk.length) {\n      sk[sk_i] = sk[sk_i] + (hashed_id[i] + hashed_pw[i]);\n    } else {\n      sk[sk_i] = hashed_id[i] + hashed_pw[i];\n    }\n  }\n  return sk;\n};\n\nconst [storageSk, _] = useState(() => {\n  if (props.encryptSk) {\n    return props.encryptSk;\n  }\n  const localSk = Storage.privateGet(\"storage_secret\");\n  if (localSk && !props.hashedPassword) {\n    return localSk;\n  }\n  const sk = new_sk();\n  console.log(\"created a new secret key to be set to local storage\");\n  Storage.privateSet(\"storage_secret\", sk);\n  return sk;\n});\n\nconst new_nonce = (message) => {\n  const encoded = nacl.hash(message);\n  const nonce = new Uint8Array(nacl.secretbox.nonceLength);\n  for (var i = 0; i < nonce.length; i++) {\n    if (i >= encoded.length) {\n      nonce[i] = i & 0xff;\n    } else {\n      nonce[i] = i & encoded[i];\n    }\n  }\n  return nonce;\n};\n\nconst encrypt = (message) => {\n  const nonce = new_nonce(message);\n  const sealed = nacl.secretbox(message, nonce, storageSk);\n  return [nonce, sealed];\n};\n\nconst decrypt = (nonce, sealed) => {\n  return nacl.secretbox.open(sealed, nonce, storageSk);\n};\n\nconst filesOnChange = (files) => {\n  State.update({\n    uploading: true,\n    files: [],\n  });\n  if (files?.length > 0) {\n    files.map((file, index) => {\n      const reader = new FileReader();\n      reader.onload = (_) => {\n        const buf = new Uint8Array(reader.result);\n        const [nonce, ciphertext] = encrypt(buf);\n        const body = JSON.stringify({\n          name: file.name,\n          // convert uint8array to Array since stringify does weird formatting.\n          nonce: Array.from(nonce),\n          ciphertext: Array.from(ciphertext),\n        });\n\n        // Upload to IPFS\n        asyncFetch(\"https://ipfs.near.social/add\", {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n          },\n          body,\n        }).then((res) => {\n          const cid = res.body.cid;\n          console.log(\"uploaded to IPFS with cid\", cid);\n          State.update({\n            files: [...state.files, { index, name: file.name, cid, nonce }],\n          });\n        });\n\n        State.update({ uploading: false });\n        if (props.update) {\n          props.update(state.files);\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  } else {\n    State.update({\n      uploading: false,\n      files: null,\n    });\n  }\n};\n\nconst onClickDelete = (index) => {\n  const filesUpdated = state.files.filter((file) => file.index !== index);\n  State.update({ files: filesUpdated });\n};\n\nconst filesUploaded = () => {\n  if (state.files.length > 0) {\n    return state.files.map((file) => (\n      <div class=\"d-flex flex-row gap-2 align-items-center\">\n        <button\n          class=\"btn btn-danger rounded-0\"\n          type=\"button\"\n          data-toggle=\"tooltip\"\n          data-placement=\"top\"\n          title=\"Delete\"\n          onClick={() => onClickDelete(file.index)}\n        >\n          <i class=\"bi bi-trash\" />\n        </button>\n        <i class={`bi fs-3 ${fileIcon}`} />\n        <p>{file.name}</p>\n      </div>\n    ));\n  }\n  return <></>;\n};\n\nreturn (\n  <div className=\"d-inline-block\">\n    {filesUploaded()}\n    <Files\n      multiple={true}\n      minFileSize={1}\n      clickable\n      className=\"btn btn-outline-primary\"\n      onChange={filesOnChange}\n    >\n      {state.uploading\n        ? \"Uploading\"\n        : state.files.length > 0\n        ? \"Replace All\"\n        : buttonText}\n    </Files>\n    {props.debug && (\n      <div>\n        <p>Debug Data:</p>\n        <pre>{JSON.stringify(state, undefined, 2)}</pre>\n      </div>\n    )}\n\n    {state.image && (\n      <div>\n        <img alt=\"hello\" src={state.image} />\n      </div>\n    )}\n  </div>\n);\n", "metadata": {"fork_of": "manzanal.near/widget/IpfsFilesUpload@89019980"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chaotictempest.near/widget/IpfsFilesEncryptedUpload", "fact_widget_deployments_id": "4fcf531113d6c584e1b57928aa3c9834", "inserted_timestamp": "2023-12-07T06:17:57.521Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}