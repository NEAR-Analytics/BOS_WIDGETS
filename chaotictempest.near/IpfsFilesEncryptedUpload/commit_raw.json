{"tx_hash": "F1QRWLH98fAGnAzpaovxbP5huR9Tt1Tcvqpjy4BvWUud", "action_id_social": "78KnHyXREbpyEbDdMwE65GXeT2CPLZPXQypeM1fvYfDc-0-widget", "block_id": 107341796, "block_timestamp": "2023-12-07T07:11:58.461Z", "signer_id": "chaotictempest.near", "widget_name": "IpfsFilesEncryptedUpload", "source_code": "const buttonText = props.buttonText || \"Upload a file\";\nconst ipfsUrl = props.ipfsUrl ?? \"https://ipfs.near.social/add\";\nconst encryptSk = props.encryptSk;\nconst onUpload =\n  props.onUpload ??\n  ((filename, cid) => {\n    if (props.debug) {\n      console.log(\n        `uploaded encrypted file=${filename} to ipfs with cid=${cid}`\n      );\n    }\n  });\n\ninitState({\n  uploading: false,\n  files: [],\n});\n\nconst str2array = (str) => {\n  return new Uint8Array(Array.from(str).map((letter) => letter.charCodeAt(0)));\n};\n\nconst recover_sk = () => {\n  const defaultPassword = \"ipfs-files-encrypted-upload-supplied-password\";\n  const hashed_id = nacl.hash(str2array(context.accountId));\n  const hashed_pw =\n    props.hashedPassword ?? nacl.hash(str2array(defaultPassword));\n  const sk = new Uint8Array(nacl.secretbox.keyLength);\n  for (var i = 0; i < hashed_id.length; i++) {\n    const sk_i = i % sk.length;\n    if (i >= sk.length) {\n      sk[sk_i] = sk[sk_i] + (hashed_id[i] + hashed_pw[i]);\n    } else {\n      sk[sk_i] = hashed_id[i] + hashed_pw[i];\n    }\n  }\n  return sk;\n};\n\nconst [storageSk, _] = useState(() => {\n  if (encryptSk) {\n    return encryptSk;\n  }\n  const localSk = Storage.privateGet(\"storage_secret\");\n  if (localSk && !props.hashedPassword) {\n    return localSk;\n  }\n  const sk = recover_sk();\n  console.log(\"created a new secret key to be set to local storage\");\n  Storage.privateSet(\"storage_secret\", sk);\n  return sk;\n});\n\nconst new_nonce = (message) => {\n  const encoded = nacl.hash(message);\n  const nonce = new Uint8Array(nacl.secretbox.nonceLength);\n  for (var i = 0; i < nonce.length; i++) {\n    if (i >= encoded.length) {\n      nonce[i] = i & 0xff;\n    } else {\n      nonce[i] = i & encoded[i];\n    }\n  }\n  return nonce;\n};\n\nconst encrypt = (message) => {\n  const nonce = new_nonce(message);\n  const sealed = nacl.secretbox(message, nonce, storageSk);\n  return [nonce, sealed];\n};\n\nconst onFilesChange = (files) => {\n  State.update({\n    uploading: true,\n    files: [],\n  });\n  if (files?.length > 0) {\n    files.map((file, index) => {\n      const reader = new FileReader();\n      reader.onload = (_) => {\n        const buf = new Uint8Array(reader.result);\n        const [nonce, ciphertext] = encrypt(buf);\n        const body = JSON.stringify({\n          name: file.name,\n          // convert uint8array to Array since stringify does weird formatting.\n          nonce: Array.from(nonce),\n          ciphertext: Array.from(ciphertext),\n        });\n\n        // Upload to IPFS\n        asyncFetch(ipfsUrl, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n          },\n          body,\n        }).then((res) => {\n          const cid = res.body.cid;\n          State.update({\n            files: [...state.files, { index, name: file.name, cid, nonce }],\n          });\n\n          if (onUpload) {\n            onUpload(file.name, cid);\n          }\n        });\n\n        State.update({ uploading: false });\n        if (props.update) {\n          props.update(state.files);\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  } else {\n    State.update({\n      uploading: false,\n      files: null,\n    });\n  }\n};\n\nreturn (\n  <div className=\"d-inline-block\">\n    <Files\n      multiple={true}\n      minFileSize={1}\n      clickable\n      className=\"btn btn-outline-primary\"\n      onChange={onFilesChange}\n    >\n      {state.uploading\n        ? \"Uploading\"\n        : state.files.length > 0\n        ? \"Replace All\"\n        : buttonText}\n    </Files>\n    {props.debug && (\n      <div>\n        <p>Debug Data:</p>\n        <pre>{JSON.stringify(state, undefined, 2)}</pre>\n      </div>\n    )}\n  </div>\n);\n", "metadata": {"fork_of": "chaotictempest.near/widget/IpfsFilesEncryptedUpload@107331473"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chaotictempest.near/widget/IpfsFilesEncryptedUpload", "fact_widget_deployments_id": "4a04210cb48854d5a03cce4a00edbd2d", "inserted_timestamp": "2023-12-07T09:17:44.330Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}