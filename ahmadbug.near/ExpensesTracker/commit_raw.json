{"tx_hash": "C3PL85xW5cKM7BKAXsLEEk5DnzgPBEDcKXrb98vbQjto", "action_id_social": "CtXUsvT46Xg2fe2GwbUQ3prXjGWtkZ3y2ekGHZ9Zozs2-0-widget", "block_id": 107740072, "block_timestamp": "2023-12-12T06:42:29.637Z", "signer_id": "ahmadbug.near", "widget_name": "ExpensesTracker", "source_code": "const [expenses, setExpenses] = useState([]);\nconst [budget, setBudget] = useState(1000);\nconst [isEditing, setIsEditing] = useState(false);\nconst [editedBudget, setEditedBudget] = useState(budget);\nconst [description, setDescription] = useState(\"\");\nconst [amount, setAmount] = useState(\"\");\nconst [category, setCategory] = useState(\"\");\nconst [searchQuery, setSearchQuery] = useState(\"\");\nconst [editModalOpen, setEditModalOpen] = useState(false);\nconst [expenseToEdit, setExpenseToEdit] = useState(null);\n\nconst onAddExpense = (newExpense) => {\n  setExpenses([...expenses, newExpense]);\n};\n\nconst onDeleteExpense = (id) => {\n  const updatedExpenses = expenses.filter((expense) => expense.id !== id);\n  setExpenses(updatedExpenses);\n};\n\nconst onEditExpense = (editedExpense) => {\n  const updatedExpenses = expenses.map((expense) =>\n    expense.id === editedExpense.id ? editedExpense : expense\n  );\n  setExpenses(updatedExpenses);\n};\n\nconst onEditBudget = (newBudget) => {\n  setBudget(newBudget);\n};\n\nconst categorizeExpense = (description) => {\n  // ... (unchanged)\n\n  return \"others\"; // Default category if no match\n};\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  if (!description || !amount) return;\n\n  const expenseCategory = categorizeExpense(description);\n\n  const newExpense = {\n    id: Date.now(),\n    description,\n    amount: parseFloat(amount),\n    category: category || expenseCategory,\n  };\n\n  onAddExpense(newExpense);\n\n  setDescription(\"\");\n  setAmount(\"\");\n  setCategory(\"\");\n};\n\nconst handleEdit = () => {\n  onEditBudget(editedBudget);\n  setIsEditing(false);\n};\n\nconst openEditModal = (expense) => {\n  setExpenseToEdit(expense);\n  setEditModalOpen(true);\n};\n\nconst closeEditModal = () => {\n  setExpenseToEdit(null);\n  setEditModalOpen(false);\n};\n\nconst handleEditExpense = () => {\n  onEditExpense(expenseToEdit);\n  closeEditModal();\n};\n\nconst filteredExpenses = expenses.filter(\n  (expense) =>\n    expense.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    expense.category.toLowerCase().includes(searchQuery.toLowerCase())\n);\n\nuseEffect(() => {\n  if (expenseToEdit) {\n    setDescription(expenseToEdit.description);\n    setAmount(expenseToEdit.amount.toString());\n    setCategory(expenseToEdit.category);\n  }\n}, [expenseToEdit]);\n\nconst handleEditmodel = () => {\n  const editedExpense = {\n    ...expenseToEdit,\n    description,\n    amount: parseFloat(amount),\n    category,\n  };\n\n  onEditExpense(editedExpense);\n  onClose();\n};\nreturn (\n  <div className=\"app-container\">\n    <h1 className=\"header\">Expense Tracker</h1>\n\n    <div>\n      <h2>Budget Overview</h2>\n      {isEditing ? (\n        <div>\n          <label>\n            New Budget:\n            <input\n              type=\"number\"\n              value={editedBudget}\n              onChange={(e) => setEditedBudget(parseFloat(e.target.value))}\n            />\n          </label>\n          <button onClick={handleEdit} className=\"edit\">\n            Save\n          </button>\n        </div>\n      ) : (\n        <>\n          <div className=\"budget-overview\">\n            <p className=\"budget\">Budget: \u20a6{budget.toFixed(2)}</p>\n            <p className=\"expense\">\n              Total Expenses: \u20a6\n              {expenses\n                .reduce((total, expense) => total + expense.amount, 0)\n                .toFixed(2)}\n            </p>\n\n            <p className=\"remain\">\n              Remaining Budget: \u20a6\n              {(\n                budget -\n                expenses.reduce((total, expense) => total + expense.amount, 0)\n              ).toFixed(2)}\n            </p>\n          </div>\n          <button onClick={() => setIsEditing(true)} className=\"edit\">\n            Edit Budget\n          </button>\n        </>\n      )}\n    </div>\n    <div className=\"form-ex\">\n      <br />\n      <div className=\"form-input\">\n        <label>\n          Description:\n          <textarea\n            type=\"text\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n        </label>\n        <label>\n          Amount:\n          <input\n            type=\"number\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n          />\n        </label>\n        <label>\n          Category:\n          <input\n            type=\"text\"\n            value={category}\n            onChange={(e) => setCategory(e.target.value)}\n          />\n        </label>\n      </div>\n      <br />\n      <button onClick={handleSubmit}>Add Expense</button>\n    </div>\n    <div>\n      <h2>Expense List</h2>\n      {/* Search input */}\n      <input\n        type=\"text\"\n        placeholder=\"Search expenses...\"\n        value={searchQuery}\n        onChange={(e) => setSearchQuery(e.target.value)}\n      />\n      <ul>\n        {/* Display filtered expenses */}\n        {filteredExpenses.map((expense) => (\n          <li key={expense.id}>\n            <div>\n              <strong>{expense.description}</strong>\n              <span>{expense.category}</span>\n              <span>${expense.amount}</span>\n            </div>\n            <div>\n              <button onClick={() => openEditModal(expense)}>Edit</button>\n              <button onClick={() => onDeleteExpense(expense.id)}>\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n      <div className={`modal ${editModalOpen ? \"open\" : \"\"}`}>\n        <div className=\"modal-content\">\n          <span className=\"close\" onClick={closeEditModal}>\n            &times;\n          </span>\n          <h2>Edit Expense</h2>\n          <label>\n            Description:\n            <input\n              type=\"text\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </label>\n          <label>\n            Amount:\n            <input\n              type=\"number\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            />\n          </label>\n          <label>\n            Category:\n            <input\n              type=\"text\"\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n            />\n          </label>\n          <button onClick={handleEditmodel}>Save Changes</button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ahmadbug.near/widget/ExpensesTracker", "fact_widget_deployments_id": "d0d8923818c13a80702258cb85f6aaa2", "inserted_timestamp": "2023-12-12T08:52:19.101Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}