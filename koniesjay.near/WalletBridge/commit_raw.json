{"tx_hash": "DGm7CeDfJJcqj4YuG1La11zF7vtG53z1N1uYyM9BbgP7", "action_id_social": "GENSSga33tRxQg6Q43u7dXBNgjtiDMr9bAfBxqFSvmjj-0-widget", "block_id": 106804656, "block_timestamp": "2023-11-29T12:01:40.786Z", "signer_id": "koniesjay.near", "widget_name": "WalletBridge", "source_code": "const userId = context.accountId;\n\nconst [networkName, setNetworkName] = useState(null);\nconst [chainId, setChainId] = useState(null);\nconst [accountId, setAccountId] = useState(null);\nconst [accounts, setAccounts] = useState(null);\nconst [accountDetails, setAccountDetails] = useState(null);\n\nconst handleString = (string) => {\n  return string.slice(0, 6) + \"...\" + string.slice(-4);\n};\n\nuseEffect(() => {\n  setAccounts(JSON.parse(Storage.get(`${userId}`)));\n});\n\nuseEffect(() => {\n  if (networkName) {\n    if (!accounts) {\n      setAccountDetails([\n        {\n          accountId,\n          accountDetails: [\n            { networkName, chainId, accountId, status: \"Connected\" },\n          ],\n        },\n      ]);\n      Storage.set(\n        `${userId}`,\n        JSON.stringify([\n          {\n            accountId,\n            accountDetails: [\n              { networkName, chainId, accountId, status: \"Connected\" },\n            ],\n          },\n        ])\n      );\n    }\n    if (accounts) {\n      let accountExist = false;\n      for (let i = 0; i < accounts.length; i++) {\n        if (accountId == accounts[i].accountId) {\n          accountExist = true;\n          const cA = accounts[i].accountDetails;\n          if (cA.length < 1) {\n            cA = [{ networkName, chainId, accountId, status: \"Connected\" }];\n            accounts[i].accountDetails = cA;\n          } else {\n            let chainExist = false;\n            for (let j = 0; j < accounts[i].accountDetails.length; j++) {\n              if (networkName == accounts[i].accountDetails[j].networkName) {\n                chainExist = true;\n                accounts[i].accountDetails[j].status = \"Connected\";\n                setAccountDetails(accounts[i].accountDetails);\n                Storage.set(`${userId}`, JSON.stringify(accounts));\n              } else if (networkName != accounts[i].networkName) {\n                accounts[i].accountDetails[j].status = \"Disconnected\";\n                setAccountDetails(accounts[i].accountDetails);\n                Storage.set(`${userId}`, JSON.stringify(accounts));\n              }\n            }\n            if (!chainExist) {\n              cA = [\n                ...cA,\n                { networkName, chainId, accountId, status: \"Connected\" },\n              ];\n              accounts[i].accountDetails = cA;\n              setAccountDetails(accounts[i].accountDetails);\n              Storage.set(`${userId}`, JSON.stringify(accounts));\n            }\n          }\n        }\n      }\n      if (!accountExist) {\n        setAccountDetails([\n          {\n            accountId,\n            accountDetails: [\n              { networkName, chainId, accountId, status: \"Connected\" },\n            ],\n          },\n        ]);\n        Storage.set(\n          `${userId}`,\n          JSON.stringify([\n            ...accounts,\n            {\n              accountId,\n              accountDetails: [\n                { networkName, chainId, accountId, status: \"Connected\" },\n              ],\n            },\n          ])\n        );\n      }\n    }\n  }\n}, [networkName, chainId, accountId, accountDetails]);\n\nuseEffect(() => {\n  if (Ethers.provider()) {\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        setNetworkName(chainIdData.name);\n      });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        setChainId(chainIdData.chainId);\n      });\n\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((data) => {\n        setAccountId(data);\n      });\n  }\n}, []);\n\nreturn (\n  <div>\n    <h3>Hello {userId}</h3>\n    <div>\n      <p>Here are all the accounts you've Interracted with:</p>\n      {accounts &&\n        accounts.map((item, index) => (\n          <div key={index}>\n            <div>\n              <h4>#{index + 1}</h4>\n              <h6>\n                <strong>Account ID: </strong> {handleString(item.accountId)}\n              </h6>\n              <h6>\n                <strong>Status: </strong>\n                {item.accountId == accountId ? \"Connected\" : \"Not Connected\"}\n              </h6>\n            </div>\n            <hr />\n          </div>\n        ))}\n    </div>\n    {networkName ? <div></div> : <Web3Connect />}\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/koniesjay.near/widget/WalletBridge", "fact_widget_deployments_id": "8d931bda3108732e46530cede5f3d9e4", "inserted_timestamp": "2023-11-29T14:17:51.663Z", "modified_timestamp": "2023-12-20T00:36:59.366Z", "__row_index": 1}