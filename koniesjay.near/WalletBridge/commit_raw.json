{"tx_hash": "AQpSXGBZ21CsSjZjm4169ZxJqUo7GS5nFysedKPGHzXP", "action_id_social": "E7odFDJTK8yjycZ7tCmPgLGLvo3axGCzKjXc49E9JsWZ-0-widget", "block_id": 106818348, "block_timestamp": "2023-11-29T17:25:10.621Z", "signer_id": "koniesjay.near", "widget_name": "WalletBridge", "source_code": "const [userId, setUserId] = useState(context.accountId);\n\nconst [networkName, setNetworkName] = useState(null);\nconst [chainId, setChainId] = useState(null);\nconst [accountId, setAccountId] = useState(null);\nconst [accounts, setAccounts] = useState(null);\nconst [accountDetails, setAccountDetails] = useState(null);\n\nconst handleString = (string) => {\n  return string.slice(0, 6) + \"...\" + string.slice(-4);\n};\n\nconst bb = {\n  11155111: {\n    name: \"Sepolia\",\n    image:\n      \"https://w7.pngwing.com/pngs/268/1013/png-transparent-ethereum-eth-hd-logo-thumbnail.png\",\n    blockUrl: \"https://sepolia.etherscan.io/address/\",\n  },\n  5: {\n    name: \"Goerli\",\n    image:\n      \"https://w7.pngwing.com/pngs/268/1013/png-transparent-ethereum-eth-hd-logo-thumbnail.png\",\n    blockUrl: \"https://goerli.etherscan.io/address/\",\n  },\n  1: {\n    name: \"Ethereum\",\n    image:\n      \"https://w7.pngwing.com/pngs/268/1013/png-transparent-ethereum-eth-hd-logo-thumbnail.png\",\n    blockUrl: \"https://etherscan.io/address/\",\n  },\n  80001: {\n    name: \"Mumbai\",\n    image:\n      \"https://seeklogo.com/images/P/polygon-matic-logo-1DFDA3A3A8-seeklogo.com.png\",\n    blockUrl: \"https://mumbai.polygonscan.com/address/\",\n  },\n  137: {\n    name: \"Polygon\",\n    image:\n      \"https://seeklogo.com/images/P/polygon-matic-logo-1DFDA3A3A8-seeklogo.com.png\",\n    blockUrl: \"https://polygonscan.com/address/\",\n  },\n  43114: {\n    name: \"Avalanche\",\n    image: \"https://cryptologos.cc/logos/avalanche-avax-logo.png\",\n    blockUrl: \"https://snowtrace.io/address/\",\n  },\n  59144: {\n    name: \"Linea\",\n    image:\n      \"https://images.ctfassets.net/6g6hg01fg28j/2XZ3qN4qlcorV9RJPxwBlO/b15c5985cc31dded61273bbec7f5f696/Infura_Linea-Hero-Image.svg\",\n    blockUrl: \"https://lineascan.build/address/\",\n  },\n  1313161554: {\n    name: \"Aurora\",\n    image: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    blockUrl: \"https://explorer.aurora.dev/address/\",\n  },\n  100: {\n    name: \"Gnosis\",\n    image:\n      \"https://w7.pngwing.com/pngs/327/711/png-transparent-gnosis-hd-logo.png\",\n    blockUrl: \"https://gnosisscan.io/address/\",\n  },\n  324: {\n    name: \"Zsync\",\n    image: \"https://lite.zksync.io/images/logo-no-letters.svg\",\n    blockUrl: \"https://explorer.zksync.io/address/\",\n  },\n  42161: {\n    name: \"Arbitrum\",\n    image:\n      \"https://strapi.mewapi.io/uploads/large_arbitrum_shield_3f24102a28.png\",\n    blockUrl: \"https://arbiscan.io/address/\",\n  },\n  56: {\n    name: \"BNB\",\n    image:\n      \"https://seeklogo.com/images/B/binance-coin-bnb-logo-97F9D55608-seeklogo.com.png\",\n    blockUrl: \"https://bscscan.com/address/\",\n  },\n};\n\n// sepolia 11155111, georli 5, ethereum 1, mumbai 80001, polygon 137, avalanche 43114 aurora 1313161554 arbitrum zsync\n\nconsole.log(bb[\"1115511\"]);\n\nuseEffect(() => {\n  setUserId(userId);\n}, [context.accountId]);\n\nuseEffect(() => {\n  setAccounts(JSON.parse(Storage.get(`${userId}`)));\n});\n\nuseEffect(() => {\n  if (networkName) {\n    if (!accounts) {\n      setAccountDetails([\n        {\n          accountId,\n          accountDetails: [\n            { networkName, chainId, accountId, status: \"Connected\" },\n          ],\n        },\n      ]);\n      Storage.set(\n        `${userId}`,\n        JSON.stringify([\n          {\n            accountId,\n            accountDetails: [\n              { networkName, chainId, accountId, status: \"Connected\" },\n            ],\n          },\n        ])\n      );\n    }\n    if (accounts) {\n      let accountExist = false;\n      for (let i = 0; i < accounts.length; i++) {\n        if (accountId == accounts[i].accountId) {\n          accountExist = true;\n          const cA = accounts[i].accountDetails;\n          if (cA.length < 1) {\n            cA = [{ networkName, chainId, accountId, status: \"Connected\" }];\n            accounts[i].accountDetails = cA;\n          } else {\n            let chainExist = false;\n            for (let j = 0; j < accounts[i].accountDetails.length; j++) {\n              if (networkName == accounts[i].accountDetails[j].networkName) {\n                chainExist = true;\n                accounts[i].accountDetails[j].status = \"Connected\";\n                setAccountDetails(accounts[i].accountDetails);\n                Storage.set(`${userId}`, JSON.stringify(accounts));\n              } else if (networkName != accounts[i].networkName) {\n                accounts[i].accountDetails[j].status = \"Disconnected\";\n                setAccountDetails(accounts[i].accountDetails);\n                Storage.set(`${userId}`, JSON.stringify(accounts));\n              }\n            }\n            if (!chainExist) {\n              cA = [\n                ...cA,\n                { networkName, chainId, accountId, status: \"Connected\" },\n              ];\n              accounts[i].accountDetails = cA;\n              setAccountDetails(accounts[i].accountDetails);\n              Storage.set(`${userId}`, JSON.stringify(accounts));\n            }\n          }\n        }\n      }\n      if (!accountExist) {\n        setAccountDetails([\n          {\n            accountId,\n            accountDetails: [\n              { networkName, chainId, accountId, status: \"Connected\" },\n            ],\n          },\n        ]);\n        Storage.set(\n          `${userId}`,\n          JSON.stringify([\n            ...accounts,\n            {\n              accountId,\n              accountDetails: [\n                { networkName, chainId, accountId, status: \"Connected\" },\n              ],\n            },\n          ])\n        );\n      }\n    }\n  }\n}, [networkName, chainId, accountId, accountDetails]);\n\nuseEffect(() => {\n  if (Ethers.provider()) {\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        setNetworkName(chainIdData.name);\n      });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        setChainId(chainIdData.chainId);\n      });\n\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((data) => {\n        setAccountId(data);\n      });\n  }\n}, []);\n\nreturn (\n  <div>\n    {userId ? (\n      <div>\n        {\" \"}\n        <h3>Hello {userId}</h3>\n        <div>\n          <p>Here are all the accounts you've Interracted with:</p>\n          {accounts &&\n            accounts.map((item, index) => (\n              <div key={index}>\n                <div>\n                  <h4>#{index + 1}</h4>\n                  <h6>\n                    <strong>Account ID: </strong> {handleString(item.accountId)}\n                  </h6>\n                  <h6>\n                    <strong>Status: </strong>\n                    {item.accountId == accountId\n                      ? \"Connected\"\n                      : \"Not Connected\"}\n                  </h6>\n                  <h6>\n                    <strong>Explorer Url: </strong>\n                    {bb[`${chainId}`] ? (\n                      <a href={bb[`${chainId}`] + item.accountId}>Click Here</a>\n                    ) : (\n                      \"Not Found\"\n                    )}\n                  </h6>\n                </div>\n                <hr />\n              </div>\n            ))}\n        </div>\n      </div>\n    ) : (\n      <h1>Sign In your NEAR profile</h1>\n    )}\n    {networkName ? <div></div> : <Web3Connect />}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/koniesjay.near/widget/WalletBridge", "fact_widget_deployments_id": "1d0cabc47fcbca855072875e483639c9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}