{"tx_hash": "G5hiLZqXWEsXNbobcjsC5YpQYA9VyGvnvwgM6ZjZ2VtF", "action_id_social": "51XEhfAVssooG35bLSKD26KGiKzs8J3dbk14LTM5nsqg-0-widget", "block_id": 106809105, "block_timestamp": "2023-11-29T13:45:28.855Z", "signer_id": "koniesjay.near", "widget_name": "WalletBridge", "source_code": "const [userId, setUserId] = useState(context.accountId);\n\nconst [networkName, setNetworkName] = useState(null);\nconst [chainId, setChainId] = useState(null);\nconst [accountId, setAccountId] = useState(null);\nconst [accounts, setAccounts] = useState(null);\nconst [accountDetails, setAccountDetails] = useState(null);\n\nconst handleString = (string) => {\n  return string.slice(0, 6) + \"...\" + string.slice(-4);\n};\n\nconst blockUrl = [\n  {\n    chainId: 11155111,\n    blockUrl: \"https://sepolia.etherscan.io/address/\",\n  },\n  {\n    chainId: 5,\n    blockUrl: \"https://goerli.etherscan.io/address/\",\n  },\n  {\n    chainId: 1,\n    blockUrl: \"https://etherscan.io/address/\",\n  },\n  {\n    chainId: 80001,\n    blockUrl: \"https://mumbai.polygonscan.com/address/\",\n  },\n  {\n    chainId: 137,\n    blockUrl: \"https://polygonscan.com/address/\",\n  },\n  {\n    chainId: 43114,\n    blockUrl: \"https://snowtrace.io/address/\",\n  },\n];\n\nconst bb = {\n  11155111: \"https://sepolia.etherscan.io/address/\",\n  5: \"https://goerli.etherscan.io/address/\",\n  1: \"https://etherscan.io/address/\",\n  80001: \"https://mumbai.polygonscan.com/address/\",\n  137: \"https://polygonscan.com/address/\",\n  43114: \"https://snowtrace.io/address/\",\n};\n\n// sepolia 11155111, georli 5, ethereum 1, mumbai 80001, polygon 137, avalanche 43114\n\nconsole.log(bb[\"1115511\"]);\n\nuseEffect(() => {\n  setUserId(userId);\n}, [context.accountId]);\n\nuseEffect(() => {\n  setAccounts(JSON.parse(Storage.get(`${userId}`)));\n});\n\nuseEffect(() => {\n  if (networkName) {\n    if (!accounts) {\n      setAccountDetails([\n        {\n          accountId,\n          accountDetails: [\n            { networkName, chainId, accountId, status: \"Connected\" },\n          ],\n        },\n      ]);\n      Storage.set(\n        `${userId}`,\n        JSON.stringify([\n          {\n            accountId,\n            accountDetails: [\n              { networkName, chainId, accountId, status: \"Connected\" },\n            ],\n          },\n        ])\n      );\n    }\n    if (accounts) {\n      let accountExist = false;\n      for (let i = 0; i < accounts.length; i++) {\n        if (accountId == accounts[i].accountId) {\n          accountExist = true;\n          const cA = accounts[i].accountDetails;\n          if (cA.length < 1) {\n            cA = [{ networkName, chainId, accountId, status: \"Connected\" }];\n            accounts[i].accountDetails = cA;\n          } else {\n            let chainExist = false;\n            for (let j = 0; j < accounts[i].accountDetails.length; j++) {\n              if (networkName == accounts[i].accountDetails[j].networkName) {\n                chainExist = true;\n                accounts[i].accountDetails[j].status = \"Connected\";\n                setAccountDetails(accounts[i].accountDetails);\n                Storage.set(`${userId}`, JSON.stringify(accounts));\n              } else if (networkName != accounts[i].networkName) {\n                accounts[i].accountDetails[j].status = \"Disconnected\";\n                setAccountDetails(accounts[i].accountDetails);\n                Storage.set(`${userId}`, JSON.stringify(accounts));\n              }\n            }\n            if (!chainExist) {\n              cA = [\n                ...cA,\n                { networkName, chainId, accountId, status: \"Connected\" },\n              ];\n              accounts[i].accountDetails = cA;\n              setAccountDetails(accounts[i].accountDetails);\n              Storage.set(`${userId}`, JSON.stringify(accounts));\n            }\n          }\n        }\n      }\n      if (!accountExist) {\n        setAccountDetails([\n          {\n            accountId,\n            accountDetails: [\n              { networkName, chainId, accountId, status: \"Connected\" },\n            ],\n          },\n        ]);\n        Storage.set(\n          `${userId}`,\n          JSON.stringify([\n            ...accounts,\n            {\n              accountId,\n              accountDetails: [\n                { networkName, chainId, accountId, status: \"Connected\" },\n              ],\n            },\n          ])\n        );\n      }\n    }\n  }\n}, [networkName, chainId, accountId, accountDetails]);\n\nuseEffect(() => {\n  if (Ethers.provider()) {\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        setNetworkName(chainIdData.name);\n      });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        setChainId(chainIdData.chainId);\n      });\n\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((data) => {\n        setAccountId(data);\n      });\n  }\n}, []);\n\nreturn (\n  <div>\n    {userId ? (\n      <div>\n        {\" \"}\n        <h3>Hello {userId}</h3>\n        <div>\n          <p>Here are all the accounts you've Interracted with:</p>\n          {accounts &&\n            accounts.map((item, index) => (\n              <div key={index}>\n                <div>\n                  <h4>#{index + 1}</h4>\n                  <h6>\n                    <strong>Account ID: </strong> {handleString(item.accountId)}\n                  </h6>\n                  <h6>\n                    <strong>Status: </strong>\n                    {item.accountId == accountId\n                      ? \"Connected\"\n                      : \"Not Connected\"}\n                  </h6>\n                  <h6>\n                    <strong>Explorer Url: </strong>\n                    {bb[`${chainId}`] ? (\n                      <a href={bb[`${chainId}`] + item.accountId}>Click Here</a>\n                    ) : (\n                      \"Not Found\"\n                    )}\n                  </h6>\n                </div>\n                <hr />\n              </div>\n            ))}\n        </div>\n      </div>\n    ) : (\n      <h1>Sign In your NEAR profile</h1>\n    )}\n    {networkName ? <div></div> : <Web3Connect />}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/koniesjay.near/widget/WalletBridge", "fact_widget_deployments_id": "93538d9290059bfef5ed54ed1a977a29", "inserted_timestamp": "2023-11-29T15:42:06.518Z", "modified_timestamp": "2023-12-20T00:36:59.366Z", "__row_index": 0}