{"tx_hash": "EtVyjY7BgkJbAk5XP8sYakwVVWUS7mvtJWGETkdr3QMA", "action_id_social": "5R6a88BAvxUT2oLvYqFpK6aDRJim1kmHFXugjzXfCaSR-0-widget", "block_id": 98340599, "block_timestamp": "2023-08-08T11:13:02.792Z", "signer_id": "ch1ch0gz.near", "widget_name": "SafeCreateAndSignTx", "source_code": "if (!props.apiBaseUrl || !props.safeAddress)\n  return \"[New Transaction] One of the following props is missing: apiBaseUrl, safeAddress\";\n\nState.init({\n  recipient: \"\",\n  value: Number(0), //initialized to 0 to avoid ethers complaints and enable valueless tx\n  contract: \"\",\n  tokenDecimals: 0,\n  data: \"0x\", // transaction calldata\n  operation: 0,\n  gasToken: \"0x0000000000000000000000000000000000000000\",\n  safeTxGas: 0,\n  baseGas: 0,\n  gasPrice: 0,\n  refundReceiver: \"0x0000000000000000000000000000000000000000\",\n  nonce: 0,\n  txHash: \"0x\",\n  sender: null,\n  signature: \"\",\n  origin: \"NEAR Blockchain Operating System\",\n});\n\nif (state.sender === null) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n    State.update({ sender: checksummedAddr });\n  } else {\n    return <Web3Connect />;\n  }\n}\n\nconst getAbi = () => {\n  // fetch abi\n  const url =\n    \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\";\n  const erc20Abi = fetch(url);\n  let iface;\n  if (erc20Abi.ok) iface = new ethers.utils.Interface(erc20Abi.body);\n\n  // get token decimals, parse units via decimals\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  Ethers.provider()\n    .call({\n      to: state.contract,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n    });\n\n  const amount = ethers.utils.parseUnits(\n    state.value.toString(),\n    state.tokenDecimals\n  );\n\n  State.update({\n    data: iface.encodeFunctionData(\"transfer\", [\n      state.recipient.toString(),\n      amount,\n    ]),\n  });\n};\n\nconst getNonce = (_contract, _addr, _to, _value) => {\n  // support ERC20 tokens\n  const contract = _contract;\n  if (contract) getAbi();\n\n  const addr = ethers.utils.getAddress(_addr); // convert input addrs to checksum\n  const to = ethers.utils.getAddress(_to);\n  const value = Number(_value);\n\n  State.update({ safeAddress: addr });\n  State.update({ recipient: to });\n  State.update({ value: value });\n\n  const url = props.apiBaseUrl + `api/v1/safes/${addr}/`;\n\n  // http options\n  const options = {\n    headers: {\n      accept: \"application/json\",\n    },\n    mode: \"no-cors\",\n  };\n\n  // get nonce\n  const res = fetch(url, options);\n  State.update({ nonce: res.body.nonce });\n};\n\nconst getAndSignTxHash = () => {\n  // get txhash from contract\n  // The Gnosis Safe contract ABI\n  const safeAbi = fetch(\n    \"https://raw.githubusercontent.com/safe-global/safe-deployments/main/src/assets/v1.3.0/gnosis_safe_l2.json\"\n  ).body;\n  const abiJson = JSON.parse(safeAbi)[\"abi\"];\n  const signer = Ethers.provider().getSigner();\n  const safe = new ethers.Contract(props.safeAddress, abiJson, signer);\n\n  // obtain txHash\n  const txHash = safe\n    .getTransactionHash(\n      state.recipient,\n      state.value,\n      state.data,\n      state.operation,\n      state.safeTxGas,\n      state.baseGas,\n      state.gasPrice,\n      state.gasToken,\n      state.refundReceiver,\n      state.nonce\n    )\n    .then((res) => {\n      State.update({ txHash: res });\n      // sign contractTransactionHash using private key of Gnosis Safe owner (or deployer)\n      const signature = signer\n        .signMessage(ethers.utils.arrayify(res))\n        .then((sig) => {\n          const alterV = ethers.utils.hexDataSlice(sig, 0, 64) + \"1f\";\n          State.update({ signature: ethers.utils.hexlify(alterV) });\n        });\n    });\n};\n\nconst postToSafeApi = () => {\n  // craft transaction from state vars\n  const transaction = {\n    safe: props.safeAddress,\n    to: state.recipient,\n    value: state.value,\n    data: state.data,\n    operation: state.operation,\n    gasToken: state.gasToken,\n    safeTxGas: state.safeTxGas,\n    baseGas: state.baseGas,\n    gasPrice: state.gasPrice,\n    refundReceiver: state.refundReceiver,\n    nonce: state.nonce, // Nonce of the Safe, transaction cannot be executed until Safe's nonce is accurate\n    contractTransactionHash: state.txHash, // Contract transaction hash calculated from all the fields\n    sender: state.sender, // must be checksummed Owner of the Safe\n    signature: state.signature, // One or more ECDSA signatures of the `contractTransactionHash` as an hex string\n    origin: state.origin,\n  };\n\n  const transactionsUrl =\n    props.apiBaseUrl +\n    `/api/v1/safes/${props.safeAddress}/multisig-transactions/`;\n  const params = JSON.stringify(transaction);\n  const proposalOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    mode: \"no-cors\",\n    body: params,\n  };\n\n  // post to gnosis API backend\n  asyncFetch(transactionsUrl, proposalOptions).then((res) => console.log(res));\n};\n\nconst TWStyles = state.styles;\nconst css = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/658b6ee444d26dd69f0d5150797077dd/raw/d8f929729176bb30d86e2839443fddb83a87a685/tw-all-classes.css\"\n);\n\nif (!css.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\n\nif (!state.styles) {\n  const colors = {\n    primaryGreen: \"#00EC97\",\n    primaryBlack: \"#151718\",\n    accentYellow: \"#F2FF9F\",\n    accentGreen: \"#17D9D4\",\n    accentBlue: \"#3D7FFF\",\n    darkGray: \"#3E3E3E\",\n    lightGray: \"#B6B6B6\",\n  };\n\n  State.update({\n    styles: styled.div`\n      ${css.body}\n      .bg-primary-black {\n        background-color: ${colors.primaryBlack}\n      }\n      .bg-primary-green {\n        background-color: ${colors.primaryGreen}\n      }\n      .bg-dark-gray {\n        background-color: ${colors.darkGray}\n      }\n      .text-gray {\n        color: ${colors.lightGray}\n      }\n      .text-green {\n        color: ${colors.primaryGreen}\n      }\n      .dot {\n        height: 40px;\n        width: 40px;\n        background-color: #bbb;\n        border-radius: 50%;\n        display: inline-block;\n      }\n      ul {\n        list-style-type: none;\n      }\n      .border-b {\n        border-bottom: 1px solid ${colors.darkGray};\n      }\n      .border {\n        border: 1px solid ${colors.darkGray};\n      }\n      .input-border {\n        border: 1px solid ${colors.darkGray};\n        border-radius: 25px;\n      }\n      .cta {\n        border: 1px solid ${colors.primaryGreen};\n        border-radius: 25px;\n        background-color: ${colors.primaryBlack}\n        text-align: center;\n        color: ${colors.primaryGreen}\n\n      }\n      input:active\n      {\n        border: 1px solid ${colors.primaryGreen}\n        background-color: ${colors.primaryGreen}\n      }\n    `,\n  });\n}\n\nfunction signButton() {\n  return (\n    <button\n      onClick={() =>\n        getNonce(\n          state.contract,\n          props.safeAddress,\n          state.recipient,\n          state.value\n        ).then(getAndSignTxHash())\n      }\n      label=\"SignButton\"\n      className=\"cta px-10 py-2 w-full bg-primary-black\"\n    >\n      <span>Sign Transaction</span>\n    </button>\n  );\n}\n\nfunction proposeButton() {\n  return (\n    <button\n      onClick={() => postToSafeApi()}\n      label=\"ProposeButton\"\n      className=\"cta px-10 py-2 w-full bg-primary-black\"\n    >\n      <span>Propose Transaction</span>\n    </button>\n  );\n}\n\nreturn (\n  <TWStyles>\n    <div className=\"bg-primary-black text-white border\">\n      <h1 className=\"text-xl font-bold border-b py-3 px-8 text-green\">\n        New Transaction\n      </h1>\n      <div className=\"flex flex-col\">\n        <div className=\"border-b px-8 py-4\">\n          <p className=\"text-gray\">Sending from</p>\n          <p>{props.safeAddress}</p>\n\n          <input\n            value={state.recipient}\n            onChange={(e) => State.update({ recipient: e.target.value })}\n            placeholder=\"Recipient address\"\n            label=\"RecipientAddressInput\"\n            className=\"w-full px-4 py-2 bg-dark-gray input-border mb-3 text-gray\"\n          />\n\n          <input\n            value={state.contract}\n            onChange={(e) => State.update({ contract: e.target.value })}\n            placeholder=\"ERC20 address - leave empty if performing native currency transfer (ETH, MATIC, xDAI)\"\n            label=\"TokenAddressInput\"\n            className=\"w-full px-4 py-2 bg-dark-gray input-border mb-3 text-gray\"\n          />\n        </div>\n        <div className=\"border-b py-4 px-8\">\n          <input\n            value={state.value}\n            onChange={(e) => State.update({ value: e.target.value })}\n            placeholder=\"ETH Amount\"\n            label=\"ETHValueInput\"\n            className=\"w-full px-4 py-2 bg-dark-gray input-border mb-3 text-gray\"\n          />\n          {state.signature === \"\" ? signButton() : proposeButton()}\n        </div>\n      </div>\n    </div>\n  </TWStyles>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ch1ch0gz.near/widget/SafeCreateAndSignTx", "fact_widget_deployments_id": "374771032fb34ee5d4ed429a6f197f78", "inserted_timestamp": "2023-08-08T12:28:23.858Z", "modified_timestamp": "2023-08-08T12:28:23.858Z", "__row_index": 0}