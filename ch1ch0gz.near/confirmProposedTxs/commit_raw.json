{"tx_hash": "3GZiiXaTqjVah5c2HKvpUEJ54DxYhHfKdfgKmHGgLoCy", "action_id_social": "Hiz4pgKVvpZ1KdNKzCHSAAnNCRa2o5ZQbT7xXEpHbBMD-0-widget", "block_id": 97928469, "block_timestamp": "2023-08-02T17:50:05.407Z", "signer_id": "ch1ch0gz.near", "widget_name": "confirmProposedTxs", "source_code": "State.init({\n  chainId: null,\n  baseUrl: \"\",\n  sender: null,\n  queuedTransactions: [],\n  executedTransactions: [],\n  openStates: [],\n});\n\n// connect account\nif (state.sender === null) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n  if (accounts.length) {\n    State.update({ sender: checksummedAddr });\n\n    Ethers.provider()\n      .getNetwork()\n      .then((chainIdData) => {\n        if (chainIdData?.chainId == 1) {\n          State.update({\n            chainId: \"mainnet\",\n          });\n        } else if (chainIdData?.chainId == 5) {\n          State.update({\n            chainId: \"goerli\",\n          });\n        } else if (chainIdData?.chainId == 100) {\n          State.update({\n            chainId: \"gnosis-chain\",\n          });\n        }\n      });\n  }\n}\n\nfunction isERC20Transfer(tx) {\n  return (\n    tx.value === \"0\" &&\n    tx.data &&\n    tx.dataDecoded &&\n    tx.dataDecoded.method === \"transfer\"\n  );\n}\n\nfunction isNativeTokenTransfer(tx) {\n  return tx.value && !tx.data;\n}\n\n// detect and set given safe address to state\nif (props.safeAddress) {\n  const _baseUrl = `https://safe-transaction-${state.chainId}.safe.global/api`;\n  State.update({ baseUrl: _baseUrl });\n\n  // get proposed transactions from the backend\n  const url = _baseUrl + `/v1/safes/${props.safeAddress}/all-transactions`;\n  const response = fetch(url);\n  if (response.ok) {\n    const notExecuted = response.body.results.filter(\n      (tx) =>\n        tx.executionDate === null &&\n        tx.to != props.safeAddress &&\n        (isNativeTokenTransfer(tx) || isERC20Transfer(tx))\n    );\n\n    const formattedQueuedTxs = notExecuted.map((tx) => {\n      if (isNativeTokenTransfer(tx)) {\n        return {\n          safeTxHash: tx.safeTxHash,\n          to: tx.to,\n          value: tx.value,\n          symbol: \"xDai\",\n          decimals: 18,\n          confirmationsRequired: tx.confirmationsRequired,\n          confirmations: tx.confirmations,\n        };\n      }\n      if (isERC20Transfer(tx)) {\n        const token = fetch(`${state.baseUrl}/v1/tokens/${tx.to}`);\n        return {\n          safeTxHash: tx.safeTxHash,\n          to: tx.dataDecoded.parameters[0].value,\n          value: tx.dataDecoded.parameters[1].value,\n          symbol: token.body.symbol,\n          decimals: token.body.decimals,\n          confirmationsRequired: tx.confirmationsRequired,\n          confirmations: tx.confirmations,\n        };\n      }\n    });\n    const executed = response.body.results.filter(\n      (tx) => tx.executionDate !== null\n    );\n    State.update({ queuedTransactions: formattedQueuedTxs });\n    State.update({ executedTransactions: executed });\n  }\n}\n\n// choose relevant transaction to sign and confirm\nconst selectTransaction = (tx) => {\n  State.update({ selectedTransaction: tx });\n};\n\n// sign relevant transaction\nconst signTransaction = (safeTxHash) => {\n  if (state.selectedTransaction) {\n    const signer = Ethers.provider().getSigner();\n    signer.signMessage(ethers.utils.arrayify(safeTxHash)).then((sig) => {\n      const setV = ethers.utils.hexDataSlice(sig, 0, 64) + \"1f\";\n\n      const url =\n        state.baseUrl +\n        `/v1/multisig-transactions/${safeTxHash}/confirmations/`;\n      const params = JSON.stringify({ signature: setV });\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: params,\n      };\n\n      //   post confirmed sig with set V to gnosis API backend\n      asyncFetch(url, options).then((res) => {\n        // if status is 201 then confirmation was successful\n        console.log(res);\n      });\n    });\n  } else {\n    console.log(\"Please select a transaction to sign.\");\n  }\n};\n\n// I don't know any CSS so please forgive the following fuckery\nconst Selection = styled.button`\n  background: ${(tx) =>\n    state.selectedTransaction == tx ? \"palevioletred\" : \"white\"};\n  color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 10px;\n`;\n\nconst TWStyles = state.styles;\nconst css = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/658b6ee444d26dd69f0d5150797077dd/raw/d8f929729176bb30d86e2839443fddb83a87a685/tw-all-classes.css\"\n);\n\nif (!css.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\n\nif (!state.styles) {\n  const colors = {\n    primaryGreen: \"#00EC97\",\n    primaryBlack: \"#151718\",\n    accentYellow: \"#F2FF9F\",\n    accentGreen: \"#17D9D4\",\n    accentBlue: \"#3D7FFF\",\n    darkGray: \"#3E3E3E\",\n    lightGray: \"#B6B6B6\",\n  };\n\n  State.update({\n    styles: styled.div`\n      ${css.body}\n      ${fontAwesome.body}\n      .bg-primary-black {\n        background-color: ${colors.primaryBlack}\n      }\n      .bg-primary-green {\n        background-color: ${colors.primaryGreen}\n      }\n      .bg-dark-gray {\n        background-color: ${colors.darkGray}\n      }\n      .text-gray {\n        color: ${colors.lightGray}\n      }\n      .text-green {\n        color: ${colors.primaryGreen}\n      }\n      .dot {\n        height: 40px;\n        width: 40px;\n        background-color: #bbb;\n        border-radius: 50%;\n        display: inline-block;\n      }\n      ul {\n        list-style-type: none;\n      }\n      .border-b {\n        border-bottom: 1px solid ${colors.darkGray};\n      }\n      .border {\n        border: 1px solid ${colors.darkGray};\n      }\n      .input-border {\n        border: 1px solid ${colors.darkGray};\n        border-radius: 25px;\n      }\n      .cta {\n        border: 1px solid ${colors.primaryGreen};\n        border-radius: 25px;\n        background-color: ${colors.primaryBlack}\n        text-align: center;\n        color: ${colors.primaryGreen}\n\n      }\n      input:active\n      {\n        border: 1px solid ${colors.primaryGreen}\n        background-color: ${colors.primaryGreen}\n      }\n    `,\n  });\n}\n\nfunction toggleOpen(index) {\n  State.update({\n    openStates: state.openStates.map((val, idx) =>\n      idx === index ? !val : val\n    ),\n  });\n}\n\nreturn (\n  <TWStyles>\n    <div className=\"bg-primary-black text-white border\">\n      <div className=\"border-b px-8 py-4\">\n        <h1 className=\"text-xl font-bold text-green\">Transactions</h1>\n        <p className=\"text-sm text-gray\">\n          {\" \"}\n          **Only token transfers are listed **\n        </p>\n      </div>\n\n      <Tabs.Root className=\"\" defaultValue=\"tab1\">\n        <Tabs.List className=\"grid grid-cols-2 text-center \" aria-label=\"\">\n          <Tabs.Trigger\n            className=\"py-3 px-5 border border-gray-dark hover:text-primary-green focus:text-primary-green focus:border-b-primary-green focus:border-b\"\n            value=\"tab1\"\n          >\n            Queue\n          </Tabs.Trigger>\n          <Tabs.Trigger\n            className=\"py-3 px-5 border border-gray-dark hover:text-primary-green focus:text-primary-green focus:border-b-primary-green focus:border-b\"\n            value=\"tab2\"\n          >\n            History\n          </Tabs.Trigger>\n        </Tabs.List>\n        {/* TX QUEUE */}\n        <Tabs.Content className=\"\" value=\"tab1\">\n          <ul className=\"p-4 flex flex-col gap-2\">\n            {state.queuedTransactions.map((tx, index) => (\n              <li className=\"px-4 py-3 bg-gray-dark rounded-md\" key={index}>\n                <Collapsible.Root\n                  className=\"\"\n                  open={openStates[index]}\n                  onOpenChange={() => toggleOpen(index)}\n                >\n                  <div className=\"flex justify-between\">\n                    <span>To: {tx.to}</span>\n                    <span>\n                      {tx.value / Math.pow(10, tx.decimals)} {tx.symbol}\n                    </span>\n                    <Collapsible.Trigger asChild>\n                      <button className=\"\">\n                        {openStates[index] ? (\n                          <svg\n                            fill=\"none\"\n                            stroke=\"#00ec97\"\n                            className=\"h-8 w-8\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            {\" \"}\n                            <path\n                              d=\"m9 13 3-3 3 3\"\n                              stroke=\"#00ec97\"\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                              stroke-width=\"2\"\n                            />{\" \"}\n                          </svg>\n                        ) : (\n                          <svg\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            className=\"h-8 w-8\"\n                          >\n                            <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                            <g\n                              id=\"SVGRepo_tracerCarrier\"\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                            ></g>\n                            <g id=\"SVGRepo_iconCarrier\">\n                              {\" \"}\n                              <g id=\"Arrow / Caret_Down_SM\">\n                                {\" \"}\n                                <path\n                                  id=\"Vector\"\n                                  d=\"M15 11L12 14L9 11\"\n                                  stroke=\"#00ec97\"\n                                  stroke-width=\"2\"\n                                  stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\"\n                                ></path>{\" \"}\n                              </g>{\" \"}\n                            </g>\n                          </svg>\n                        )}\n                      </button>\n                    </Collapsible.Trigger>\n                  </div>\n\n                  <Collapsible.Content>\n                    <div className=\"p-3\">\n                      <div className=\"flex justify-between\">\n                        <p>\n                          Confirmations: {tx.confirmations?.length}/\n                          {tx.confirmationsRequired}\n                        </p>\n                        {tx.confirmations?.length ==\n                        tx.confirmationsRequired ? (\n                          <button> Execute </button>\n                        ) : (\n                          <button\n                            onClick={() => signTransaction(tx.safeTxHash)}\n                          >\n                            {\" \"}\n                            Confirm{\" \"}\n                          </button>\n                        )}\n                      </div>\n                      <ul className=\"px-3\">\n                        {tx.confirmations.map((conf) => (\n                          <li>{conf.owner}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </Collapsible.Content>\n                </Collapsible.Root>\n              </li>\n            ))}\n          </ul>\n        </Tabs.Content>\n        <Tabs.Content className=\"TabsContent\" value=\"tab2\">\n          <ul className=\"p-4 flex flex-col gap-2\">\n            {state.executedTransactions.map((tx, index) => (\n              <li className=\"px-4 py-3 bg-gray-dark rounded-md\" key={index}>\n                <Collapsible.Root\n                  className=\"\"\n                  open={openStates[index]}\n                  onOpenChange={() => toggleOpen(index)}\n                >\n                  <div className=\"flex justify-between\">\n                    <span>\n                      {tx.to === safeAddr ? \"Received\" : \"Sent\"} -{\" \"}\n                      {tx.executionDate === null ? \"Queued\" : \"Executed\"}\n                    </span>\n                    <Collapsible.Trigger asChild>\n                      <button className=\"\">\n                        {openStates[index] ? (\n                          <svg\n                            fill=\"none\"\n                            stroke=\"#00ec97\"\n                            className=\"h-8 w-8\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            {\" \"}\n                            <path\n                              d=\"m9 13 3-3 3 3\"\n                              stroke=\"#00ec97\"\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                              stroke-width=\"2\"\n                            />{\" \"}\n                          </svg>\n                        ) : (\n                          <svg\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            className=\"h-8 w-8\"\n                          >\n                            <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                            <g\n                              id=\"SVGRepo_tracerCarrier\"\n                              stroke-linecap=\"round\"\n                              stroke-linejoin=\"round\"\n                            ></g>\n                            <g id=\"SVGRepo_iconCarrier\">\n                              {\" \"}\n                              <g id=\"Arrow / Caret_Down_SM\">\n                                {\" \"}\n                                <path\n                                  id=\"Vector\"\n                                  d=\"M15 11L12 14L9 11\"\n                                  stroke=\"#00ec97\"\n                                  stroke-width=\"2\"\n                                  stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\"\n                                ></path>{\" \"}\n                              </g>{\" \"}\n                            </g>\n                          </svg>\n                        )}\n                      </button>\n                    </Collapsible.Trigger>\n                  </div>\n\n                  <Collapsible.Content>\n                    <div className=\"p-3\">\n                      <p>To: {tx.to}</p>\n                      {tx.to !== safeAddr && (\n                        <div>\n                          <p>\n                            Confirmations: {tx.confirmations?.length}/\n                            {tx.confirmationsRequired}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </Collapsible.Content>\n                </Collapsible.Root>\n              </li>\n            ))}\n          </ul>\n        </Tabs.Content>\n      </Tabs.Root>\n    </div>\n  </TWStyles>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ch1ch0gz.near/widget/confirmProposedTxs", "fact_widget_deployments_id": "c177a84bea7b95f4a98e222318a9ccfb", "inserted_timestamp": "2023-08-02T18:45:50.980Z", "modified_timestamp": "2023-08-02T18:45:50.980Z", "__row_index": 0}