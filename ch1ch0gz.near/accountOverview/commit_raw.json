{"tx_hash": "GcJsrwoemmmAJSrprQPE2WhHGrnWVfELADdXSsDQgKx1", "action_id_social": "Fqnhxdif7RUQ7tHkq9Bcokp351BV7yNF5JDC31D6kEyE-0-widget", "block_id": 97928306, "block_timestamp": "2023-08-02T17:46:31.783Z", "signer_id": "ch1ch0gz.near", "widget_name": "accountOverview", "source_code": "const { chain, safeAddr, apiBaseURL, chainNativeToken } = props;\n\nState.init({\n  threshold: null,\n  valueInUSD: null,\n  owners: [],\n  balances: [],\n  openOwners: false,\n  openBalances: false,\n});\n\nfunction fetchData() {\n  // Fetch onwers and threshold\n  asyncFetch(`${props.apiBaseUrl}/api/v1/safes/${props.safeAddr}`).then(\n    (res) => {\n      State.update({\n        threshold: res.body.threshold,\n        owners: res.body.owners,\n      });\n    }\n  );\n\n  // Fetch balances\n  asyncFetch(\n    `${props.apiBaseUrl}/api/v1/safes/${props.safeAddr}/balances/usd?trusted=false&exclude_spam=false`\n  ).then((res) => {\n    let safeBalances = [\n      {\n        icon: props.chainNativeToken.icon,\n        symbol: props.chainNativeToken.symbol,\n        amount:\n          res.body[0].balance / Math.pow(10, props.chainNativeToken.decimals),\n      },\n    ];\n\n    const totalValueUSD = res.body.reduce(\n      (acc, token) => acc + Number(token.fiatBalance),\n      0\n    );\n\n    console.log(\"Logo URI\", res.body[1].token.logoUri);\n\n    res.body\n      .filter((item) => item.token != null)\n      .forEach((item) =>\n        safeBalances.push({\n          icon: item.token.logoUri,\n          symbol: item.token.symbol,\n          amount: item.balance / Math.pow(10, item.token.decimals),\n        })\n      );\n    console.log(totalValueUSD);\n    State.update({\n      balances: safeBalances,\n      valueInUSD: totalValueUSD,\n    });\n  });\n}\n\nfetchData();\n\nconst TWStyles = state.styles;\nconst css = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/658b6ee444d26dd69f0d5150797077dd/raw/d8f929729176bb30d86e2839443fddb83a87a685/tw-all-classes.css\"\n);\nconst fontAwesome = fetch(\n  \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\n);\n\nif (!css.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\n\nif (!state.styles) {\n  const colors = {\n    primaryGreen: \"#00EC97\",\n    primaryBlack: \"#151718\",\n    accentYellow: \"#F2FF9F\",\n    accentGreen: \"#17D9D4\",\n    accentBlue: \"#3D7FFF\",\n    darkGray: \"#3E3E3E\",\n    lightGray: \"#B6B6B6\",\n  };\n\n  State.update({\n    styles: styled.div`\n      ${css.body}\n      ${fontAwesome.body}\n      .bg-primary-black {\n        background-color: ${colors.primaryBlack}\n      }\n      .bg-primary-green {\n        background-color: ${colors.primaryGreen}\n      }\n      .text-gray {\n        color: ${colors.lightGray}\n      }\n      .dot {\n        height: 40px;\n        width: 40px;\n        background-color: #bbb;\n        border-radius: 50%;\n        display: inline-block;\n      }\n      ul {\n        list-style-type: none;\n      }\n      .border-b {\n        border-bottom: 1px solid ${colors.darkGray};\n      }\n      .border {\n        border: 1px solid ${colors.darkGray};\n      }\n    `,\n  });\n}\n\nreturn (\n  <TWStyles>\n    <div className=\"bg-primary-black text-white border\">\n      <h1 className=\"text-xl font-bold border-b py-3 px-8\">Overview</h1>\n      <div className=\"py-5 flex flex-col gap-3\">\n        <div className=\"px-8\">\n          <p>Account</p>\n          <div className=\"grid grid-cols-12 gap-4 items-center mb-3\">\n            <div className=\"\">{props.safeAddr}</div>\n            <div className=\"col-start-11 col-span-2 bg-primary-green rounded-3xl h-full flex items-center justify-center\">\n              <span className=\"\">{props.chain}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-8 flex justify-between items-center border-b border-gray-dark\">\n          <div className=\"\">\n            <p className=\"text-gray\">Value</p>\n            <p>${state.valueInUSD}</p>\n          </div>\n          <div className=\"\">\n            <p className=\"text-gray\">Threshold</p>\n            <p>{state.threshold}</p>\n          </div>\n          <div className=\"\">\n            <p className=\"text-gray\">Owners</p>\n            <p>{state.owners.length}</p>\n          </div>\n        </div>\n        <br></br>\n        <Collapsible.Root\n          className=\"px-8 border-b\"\n          open={state.openOwners}\n          onOpenChange={() => State.update({ openOwners: !state.openOwners })}\n        >\n          <div className=\"flex justify-between\">\n            <p> Owners </p>\n            <Collapsible.Trigger asChild>\n              <span className=\"\">\n                {state.openOwners ? (\n                  <svg viewBox=\"0 0 24 24\" fill=\"none\" className=\"h-8 w-8\">\n                    <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                    <g\n                      id=\"SVGRepo_tracerCarrier\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    ></g>\n                    <g id=\"SVGRepo_iconCarrier\">\n                      {\" \"}\n                      <g id=\"Arrow / Caret_Down_SM\">\n                        {\" \"}\n                        <path\n                          id=\"Vector\"\n                          d=\"M15 11L12 14L9 11\"\n                          stroke=\"#00ec97\"\n                          stroke-width=\"2\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                        ></path>{\" \"}\n                      </g>{\" \"}\n                    </g>\n                  </svg>\n                ) : (\n                  <svg\n                    fill=\"none\"\n                    stroke=\"#00ec97\"\n                    className=\"h-8 w-8\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    {\" \"}\n                    <path\n                      d=\"m9 13 3-3 3 3\"\n                      stroke=\"#00ec97\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                      stroke-width=\"2\"\n                    />{\" \"}\n                  </svg>\n                )}\n              </span>\n            </Collapsible.Trigger>\n          </div>\n\n          <Collapsible.Content className=\"px-3\">\n            <ul>\n              {state.owners.map((owner) => (\n                <li key={owner}>{owner}</li>\n              ))}\n            </ul>\n          </Collapsible.Content>\n        </Collapsible.Root>\n\n        <Collapsible.Root\n          className=\"px-8 border-b\"\n          open={state.openBalances}\n          onOpenChange={() =>\n            State.update({ openBalances: !state.openBalances })\n          }\n        >\n          <div className=\"flex justify-between\">\n            <p> Balances </p>\n            <Collapsible.Trigger asChild>\n              <span className=\"\">\n                {state.openBalances ? (\n                  <svg viewBox=\"0 0 24 24\" fill=\"none\" className=\"h-8 w-8\">\n                    <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                    <g\n                      id=\"SVGRepo_tracerCarrier\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    ></g>\n                    <g id=\"SVGRepo_iconCarrier\">\n                      {\" \"}\n                      <g id=\"Arrow / Caret_Down_SM\">\n                        {\" \"}\n                        <path\n                          id=\"Vector\"\n                          d=\"M15 11L12 14L9 11\"\n                          stroke=\"#00ec97\"\n                          stroke-width=\"2\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                        ></path>{\" \"}\n                      </g>{\" \"}\n                    </g>\n                  </svg>\n                ) : (\n                  <svg\n                    fill=\"none\"\n                    stroke=\"#00ec97\"\n                    className=\"h-8 w-8\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    {\" \"}\n                    <path\n                      d=\"m9 13 3-3 3 3\"\n                      stroke=\"#00ec97\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                      stroke-width=\"2\"\n                    />{\" \"}\n                  </svg>\n                )}\n              </span>\n            </Collapsible.Trigger>\n          </div>\n\n          <Collapsible.Content>\n            <ul className=\"px-3\">\n              {state.balances.map((token) => (\n                <li className=\"flex gap-4 items-center mb-3\" key={token.symbol}>\n                  {token.icon ? (\n                    <img\n                      className=\"inline h-8 w-8 rounded-full\"\n                      src={token.icon}\n                    />\n                  ) : (\n                    <span className=\"dot\"></span>\n                  )}\n\n                  <span className=\"inline\">{token.symbol}</span>\n                  <span className=\"justify-self-end\">{token.amount}</span>\n                </li>\n              ))}\n            </ul>\n          </Collapsible.Content>\n        </Collapsible.Root>\n      </div>\n    </div>\n  </TWStyles>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ch1ch0gz.near/widget/accountOverview", "fact_widget_deployments_id": "425c4f157b34f40bd9fa3c334a8d55a9", "inserted_timestamp": "2023-08-02T18:44:30.503Z", "modified_timestamp": "2023-08-02T18:44:30.503Z", "__row_index": 0}