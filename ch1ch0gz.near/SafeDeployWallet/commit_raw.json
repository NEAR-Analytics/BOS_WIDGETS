{"tx_hash": "UMqSV7JrnxrDRcMRYEqXFUrh1k7ZdJw1K8yZMHzkh4j", "action_id_social": "GXA1LW6Ky78sC7CLWw5kAeh8jyhvhma4Myp9zi9J2mcQ-0-widget", "block_id": 98340472, "block_timestamp": "2023-08-08T11:10:42.568Z", "signer_id": "ch1ch0gz.near", "widget_name": "SafeDeployWallet", "source_code": "// Connect to Wallet\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\ninitState({\n  factoryContractAddress: \"\",\n  singletonAddress: \"\",\n  walletOwners: [],\n  walletNonce: 0,\n  threshold: \"\",\n  encondeDatas: \"\",\n  inputValue: \"\",\n});\n\nif (state.walletOwners.length == 0) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    const checksummedAddr = ethers.utils.getAddress(accounts[0]);\n    State.update({ walletOwners: [checksummedAddr] });\n  } else {\n    return <Web3Connect />;\n  }\n}\n\n//SelectGnosisSafeProxyFactory contract based on current chain ID\nconst proxyFactory = fetch(\n  \"https://raw.githubusercontent.com/safe-global/safe-deployments/main/src/assets/v1.3.0/proxy_factory.json\"\n).body;\n\nconst safeProxyFactoryContractAddress =\n  JSON.parse(proxyFactory)[\"networkAddresses\"][state.chainId.toString()];\nState.update({ factoryContractAddress: safeProxyFactoryContractAddress });\n\n//ABI contract proxyFactory\nconst safeProxyFactoryContractAbi = JSON.parse(proxyFactory)[\"abi\"];\n\n//const iface = new ethers.utils.Interface(safeProxyFactoryContractAbi);\n\n//Select Singleton contract based on current chain ID\nconst singleton = fetch(\n  \"https://raw.githubusercontent.com/safe-global/safe-deployments/main/src/assets/v1.3.0/gnosis_safe_l2.json\"\n).body;\nconst singletonAddress =\n  JSON.parse(singleton)[\"networkAddresses\"][state.chainId.toString()];\nState.update({ singletonAddress: singletonAddress });\n\n//ABI contract singleton\nconst singletonAbi = JSON.parse(singleton)[\"abi\"];\n\nconst iface = new ethers.utils.Interface(singletonAbi);\n\n// Variable definition for setup\n\nconst address0 = \"0x0000000000000000000000000000000000000000\";\nconst bytes0 = new Uint8Array(0);\n\nconst createSafeWallet = () => {\n  //Retrieve current nonce\n  Ethers.provider()\n    .getTransactionCount(ownersAddress[0])\n    .then((res) => {\n      State.update({ walletNonce: res });\n    });\n  console.log(\"walletOwners\", state.walletOwners);\n  const safeProxyFactory = new ethers.Contract(\n    state.factoryContractAddress,\n    safeProxyFactoryContractAbi,\n    Ethers.provider().getSigner()\n  );\n\n  safeProxyFactory\n    .createProxyWithNonce(\n      state.singletonAddress,\n      state.encondeDatas,\n      state.walletNonce\n    )\n    .then((tx) => {\n      console.log(\"tx \", tx);\n      if (state.chainId === 1) {\n        State.update({ txHash: \"https://etherscan.io/tx/\" + tx.hash });\n      } else if (state.chainId === 100) {\n        State.update({ txHash: \"https://gnosisscan.io/tx\" + tx.hash });\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n      State.update({ error: true });\n    });\n};\n\nconst TWStyles = state.styles;\nconst css = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/658b6ee444d26dd69f0d5150797077dd/raw/d8f929729176bb30d86e2839443fddb83a87a685/tw-all-classes.css\"\n);\n\nif (!css.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\n\nif (!state.styles) {\n  const colors = {\n    primaryGreen: \"#00EC97\",\n    primaryBlack: \"#151718\",\n    accentYellow: \"#F2FF9F\",\n    accentGreen: \"#17D9D4\",\n    accentBlue: \"#3D7FFF\",\n    darkGray: \"#3E3E3E\",\n    lightGray: \"#B6B6B6\",\n  };\n\n  State.update({\n    styles: styled.div`\n      ${css.body}\n      ${fontAwesome.body}\n      .bg-primary-black {\n        background-color: ${colors.primaryBlack}\n      }\n      .bg-primary-green {\n        background-color: ${colors.primaryGreen}\n      }\n      .bg-primary-dark-gray {\n        background-color: ${colors.darkGray}\n      }\n      .text-gray {\n        color: ${colors.lightGray}\n      }\n      .text-green {\n        color: ${colors.primaryGreen}\n      }\n      .cta {\n        border: 1px solid ${colors.primaryGreen};\n        border-radius: 25px;\n        background-color: ${colors.primaryBlack};\n        text-align: center;\n        color: ${colors.primaryGreen};\n\n        &:active {\n          background: ${colors.primaryGreen} !important;\n          color: white !important;\n        }\n      }\n      ul {\n        list-style-type: none;\n      }\n      .border-b {\n        border-bottom: 1px solid ${colors.darkGray};\n      }\n      .border {\n        border: 1px solid ${colors.darkGray};\n      }\n      .text-input {\n        &:active {\n          border: 1px solid ${colors.primaryGreen} !important;\n        }\n      }\n    `,\n  });\n}\n\nreturn (\n  <TWStyles>\n    <div className=\"border bg-primary-black text-white py-3\">\n      <h1 className=\"text-xl font-bold text-green border-b py-3 px-8\">\n        Create Safe\n      </h1>\n      <div className=\"border-b\">\n        <div className=\"px-8 py-3\">\n          <p className=\"text-lg\">Owners and Confimations</p>\n          <ul>\n            {state.walletOwners.map((owner, index) => (\n              <li key={index}>\n                <div className=\"flex gap-2 items-center\">\n                  <div>{owner}</div>\n\n                  <button\n                    className=\"bg-transparent border-none\"\n                    onClick={() => {\n                      const a = [...state.walletOwners];\n                      a.splice(index, 1);\n                      State.update({ walletOwners: a });\n                    }}\n                  >\n                    <svg viewBox=\"0 0 20 20\" fill=\"#00EC97\" className=\"w-5 h-5\">\n                      <path\n                        fill-rule=\"evenodd\"\n                        d=\"M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 10.23 1.482l.149-.022.841 10.518A2.75 2.75 0 007.596 19h4.807a2.75 2.75 0 002.742-2.53l.841-10.52.149.023a.75.75 0 00.23-1.482A41.03 41.03 0 0014 4.193V3.75A2.75 2.75 0 0011.25 1h-2.5zM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4zM8.58 7.72a.75.75 0 00-1.5.06l.3 7.5a.75.75 0 101.5-.06l-.3-7.5zm4.34.06a.75.75 0 10-1.5-.06l-.3 7.5a.75.75 0 101.5.06l.3-7.5z\"\n                        clip-rule=\"evenodd\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n          <p className=\"text-gray\">Add new owner</p>\n          <div className=\"flex gap-2\">\n            <input\n              className=\"rounded-full border-opacity-25 bg-primary-dark-gray py-1 px-6 text-white w-1/2 text-input\"\n              type=\"text\"\n              value={state.inputValue}\n              onChange={(e) => State.update({ inputValue: e.target.value })}\n            />\n            <button\n              className=\"bg-transparent border-none\"\n              onClick={() => {\n                const a = [...state.walletOwners];\n                a.push(state.inputValue);\n                State.update({ walletOwners: a });\n              }}\n            >\n              <svg fill=\"none\" viewBox=\"0 0 24 24\" className=\"w-8 h-8\">\n                <path\n                  d=\"m6 12h6m0 0h6m-6 0v6m0-6v-6\"\n                  stroke=\"#00EC97\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-8 py-4\">\n        <p className=\"text-lg\">Threshold</p>\n        <p className=\"text-gray\">\n          Any transaction requires the confirmation of:\n        </p>\n        <input\n          className=\"text-input rounded-full border-opacity-25 bg-primary-dark-gray py-1 px-6 text-white w-1/2\"\n          type=\"text\"\n          value={threshold}\n          onChange={(e) => {\n            let a = e.target.value;\n            State.update({ threshold: a });\n          }}\n        />\n\n        <button\n          className=\"cta px-10 py-2 w-full bg-primary-black mt-5\"\n          onClick={() => {\n            let a = iface.encodeFunctionData(\n              \"setup(address[],uint256, address,bytes, address, address, uint256, address)\",\n              [\n                state.walletOwners,\n                state.threshold,\n                address0,\n                bytes0,\n                address0,\n                address0,\n                0,\n                address0,\n              ]\n            );\n            State.update({ encondeDatas: a });\n            createSafeWallet();\n          }}\n        >\n          Create Wallet\n        </button>\n      </div>\n    </div>\n  </TWStyles>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ch1ch0gz.near/widget/SafeDeployWallet", "fact_widget_deployments_id": "3d27cd68df00c8b41d0e33971f67e137", "inserted_timestamp": "2023-08-08T12:27:14.060Z", "modified_timestamp": "2023-08-08T12:27:14.060Z", "__row_index": 0}