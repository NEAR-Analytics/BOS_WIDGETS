{"tx_hash": "BSiqm6XqEqjqNrLM44ff8N4dw14Rkp6h2uvLGPzXhcDP", "action_id_social": "KuXUVNPDPGDK1TWkrt9G39cxycwDvLZN1176wnCr98D-0-widget", "block_id": 106862636, "block_timestamp": "2023-11-30T10:36:51.924Z", "signer_id": "93068afd39801c0c63a2861d84ee5789d40d5b9d5df54666a50ea0e19718a5fe", "widget_name": "tester.testers-fork", "source_code": "const accountId = \"indonesiaguild.near\";\n\nif (!accountId) {\n  return \"\";\n}\n\n// Retrieve followers\nlet followers = Social.keys(`*/graph/follow/${accountId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\nif (followers === null) {\n  return \"Loading\";\n}\n\nfollowers = Object.entries(followers || {});\nfollowers.sort(\n  (a, b) => b.graph.follow[accountId][1] - a.graph.follow[accountId][1]\n);\n\n// Total followers count\nconst totalFollowersCount = followers.length;\n\n// Retrieve following\nlet following = Social.keys(`${accountId}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\nif (following === null) {\n  return \"Loading\";\n}\n\nfollowing = Object.entries(following[accountId].graph.follow || {});\nfollowing.sort((a, b) => b[1] - a[1]);\n\n// Total following count\nconst totalFollowingCount = following.length;\n\nconst [mutualFollowers, setMutualFollowers] = useState([]);\n\nconst updateMutualFollowers = () => {\n  const filteredFollowers = followers.filter(([followerId]) =>\n    following.some(([followingId]) => followerId === followingId)\n  );\n  // Set the state with the filtered followers, avoiding duplicates\n  setMutualFollowers((prevMutualFollowers) => {\n    const uniqueFollowers = new Set([\n      ...prevMutualFollowers.map(([prevFollowerId]) => prevFollowerId),\n      ...filteredFollowers.map(([followerId]) => followerId),\n    ]);\n    return [...uniqueFollowers].map((followerId) =>\n      filteredFollowers.find(([id]) => id === followerId)\n    );\n  });\n};\n\nuseEffect(() => {\n  updateMutualFollowers();\n}, []);\n\n// Total mutual followers count\nconst totalMutualFollowersCount = mutualFollowers.length;\n\nconst [responses, setResponses] = useState([]);\n\nconst [totalTxCount, setTotalTxCount] = useState(0);\nconst [totalBoughtNFT, setTotalBoughtNFT] = useState(0);\nconst [totalBoughtSold, setTotalBoughtSold] = useState(0);\n\nconst processData = (data) => {\n  const accounts = Object.entries(data);\n\n  const allItems = accounts\n    .map((account) => {\n      const accountId = account[0];\n      return Object.entries(account[1].widget).map((kv) => ({\n        accountId,\n        widgetName: kv[0],\n        blockHeight: kv[1],\n      }));\n    })\n    .flat();\n\n  allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n  return allItems;\n};\n\n///widget data\nconst [walletDataWidget, setWalletDataWidget] = useState({});\n\nconst fetchPromisesAccount = [];\n\nfor (const [mutualAccountId] of mutualFollowers) {\n  fetchPromisesAccount.push(mutualAccountId);\n}\n\nPromise.all(fetchPromisesAccount)\n  .then((responses) => {})\n  .then((data) => {\n    // Handle the aggregated data if needed\n  })\n  .catch((error) => {\n    // Handle errors\n  });\n\n// Check if mutualFollowers is an array\nif (Array.isArray(mutualFollowers)) {\n  const fetchPromises = fetchPromisesAccount.map((mutualAccountId) =>\n    // const fetchPromises = mutualFollowers.map(([mutualAccountId]) =>\n    asyncFetch(\n      `https://magenta-syrniki-be7abd.netlify.app/.netlify/functions/api/users/search?accountid=${mutualAccountId}`,\n      {\n        method: \"GET\",\n        mode: \"no-cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        responseType: \"json\",\n      }\n    )\n  );\n\n  // Using Promise.all to wait for all requests to complete\n  Promise.all(fetchPromises)\n    .then((responses) => {\n      //  console.log(\"After fetchPromises: test\", mutualFollowers);\n\n      const firstElements = responses.map((response) => {\n        const element = response.body[0];\n\n        // TOTAL DEVELOPMENT\n        let keys = `${element.accountid ?? \"*\"}/widget/*`;\n\n        if (tag) {\n          const taggedWidgets = Social.keys(\n            `${element.accountid ?? \"*\"}/widget/*/metadata/tags/${tag}`,\n            \"final\"\n          );\n\n          if (taggedWidgets === null) {\n            // return { status: 'load' };\n          }\n\n          keys = Object.entries(taggedWidgets)\n            .map((kv) =>\n              Object.keys(kv[1].widget).map((w) => `${kv[0]}/widget/${w}`)\n            )\n            .flat();\n\n          if (!keys.length) {\n            // return { status: 'no widget found' };\n          }\n        }\n\n        const data = Social.keys(keys, \"final\", {\n          return_type: \"BlockHeight\",\n        });\n\n        if (data === null) {\n          return null;\n        }\n\n        // Process data\n        const processedData = processData(data);\n        const totalWidgetCount = processedData.length;\n\n        const walletName = element.accountid;\n        const totalCommit = 0;\n        const last24HoursCommit = 0;\n        const last7DaysCommit = 0;\n        const last30DaysCommit = 0;\n\n        // Loop melalui setiap item dalam processedData\n        processedData.forEach((item) => {\n          const path = `${element.accountid}/widget/${item.widgetName}`;\n\n          if (typeof path !== \"string\") {\n            return;\n          }\n\n          const historyBlocksRequest = Social.keys(path, \"final\", {\n            return_type: \"History\",\n          });\n\n          if (historyBlocksRequest === null) {\n            return;\n          }\n\n          const [widgetAccountId, _, widgetName] = path.split(\"/\");\n\n          let blocksChanges =\n            historyBlocksRequest[widgetAccountId]?.[\"widget\"]?.[widgetName];\n\n          if (props.count) props.count(blocksChanges.length);\n\n          if (blocksChanges) {\n            blocksChanges = blocksChanges?.sort((a, b) => b - a);\n          }\n\n          // Filter blocksChanges for the last 24 hours\n          const last24HoursBlocks = blocksChanges.filter((blockHeight) => {\n            const blockDate = new Date(\n              Near.block(blockHeight).header.timestamp_nanosec / 1e6\n            );\n            const currentDate = new Date();\n            return currentDate - blockDate <= 24 * 60 * 60 * 1000;\n          });\n\n          // Filter blocksChanges for the last 7 days\n          const last7DaysBlocks = blocksChanges.filter((blockHeight) => {\n            const blockDate = new Date(\n              Near.block(blockHeight).header.timestamp_nanosec / 1e6\n            );\n            const currentDate = new Date();\n            return currentDate - blockDate <= 7 * 24 * 60 * 60 * 1000;\n          });\n\n          // Filter blocksChanges for the last 30 days\n          const last30DaysBlocks = blocksChanges.filter((blockHeight) => {\n            const blockDate = new Date(\n              Near.block(blockHeight).header.timestamp_nanosec / 1e6\n            );\n            const currentDate = new Date();\n            return currentDate - blockDate <= 30 * 24 * 60 * 60 * 1000;\n          });\n\n          // Akumulasi commit untuk setiap wallet\n          totalCommit += blocksChanges.length;\n          last24HoursCommit += last24HoursBlocks.length;\n          last7DaysCommit += last7DaysBlocks.length;\n          last30DaysCommit += last30DaysBlocks.length;\n        });\n\n        // Update walletData state\n        setWalletDataWidget((prevWalletData) => {\n          const updatedWalletData = { ...prevWalletData };\n\n          if (!updatedWalletData[walletName]) {\n            updatedWalletData[walletName] = {\n              totalCommit: 0,\n              last24HoursCommit: 0,\n              last7DaysCommit: 0,\n              last30DaysCommit: 0,\n            };\n          }\n\n          updatedWalletData[walletName].totalCommit = totalCommit;\n          updatedWalletData[walletName].last24HoursCommit = last24HoursCommit;\n          updatedWalletData[walletName].last7DaysCommit = last7DaysCommit;\n          updatedWalletData[walletName].last30DaysCommit = last30DaysCommit;\n\n          return updatedWalletData;\n        });\n\n        // Add totalWidgetCount to the element\n        return {\n          ...element,\n          totalWidgetCount: totalWidgetCount,\n        };\n      });\n\n      const totalTxCount = firstElements.reduce((sum, element) => {\n        if (element && typeof element.txCount !== \"undefined\") {\n          return sum + element.txCount;\n        }\n        return sum;\n      }, 0);\n\n      const totalBoughtNFT = firstElements.reduce((sum, element) => {\n        if (element && typeof element.bought_nft !== \"undefined\") {\n          return sum + element.bought_nft;\n        }\n        return sum;\n      }, 0);\n\n      const totalBoughtSold = firstElements.reduce((sum, element) => {\n        if (element && typeof element.sold_nft !== \"undefined\") {\n          return sum + element.sold_nft;\n        }\n        return sum;\n      }, 0);\n\n      // Update totalTxCount state\n      setTotalTxCount(totalTxCount);\n\n      // Update totalBoughtNFT state\n      setTotalBoughtNFT(totalBoughtNFT);\n\n      // Update totalBoughtSold state\n      setTotalBoughtSold(totalBoughtSold);\n\n      // Update responses state\n      setResponses(firstElements);\n    })\n    .catch((error) => {\n      // console.error(\"Error fetching data:\", error);\n    });\n} else {\n  // console.error(\"mutualFollowers is not an array\");\n}\n\nconst [displayCount, setDisplayCount] = useState(5);\n\nconst displayedFollowers = responses.slice(0, displayCount);\n\nconst handleShowMore = () => {\n  setDisplayCount(displayCount + 5);\n};\n\n// useEffect(() => {\n// //   console.log(\"Updated Responses:\", responses); a\n// }, [responses]);\n\n/////////// WIDGET  COUNT\nconst [totalWidgetCount, setTotalWidgetCount] = useState(0);\n\nif (Array.isArray(mutualFollowers)) {\n  const fetchPromises2 = mutualFollowers.map(([mutualAccountIdWidget]) => {\n    let keys = `${mutualAccountIdWidget ?? \"*\"}/widget/*`;\n\n    if (tag) {\n      const taggedWidgets = Social.keys(\n        `${mutualAccountIdWidget ?? \"*\"}/widget/*/metadata/tags/${tag}`,\n        \"final\"\n      );\n\n      if (taggedWidgets === null) {\n        return Promise.resolve({ status: \"load\" });\n      }\n\n      keys = Object.entries(taggedWidgets)\n        .map((kv) =>\n          Object.keys(kv[1].widget).map((w) => `${kv[0]}/widget/${w}`)\n        )\n        .flat();\n\n      if (!keys.length) {\n        return Promise.resolve({ status: \"no widget found\" });\n      }\n    }\n\n    const data = Social.keys(keys, \"final\", {\n      return_type: \"BlockHeight\",\n    });\n\n    if (data === null) {\n      return Promise.resolve(null);\n    }\n\n    // Process data\n    const processedData = processData(data);\n    const totalWidgetCount = processedData.length;\n    // console.log(`Total Widget Count for ${mutualAccountId}:`, totalWidgetCount);\n\n    return Promise.resolve({ status: \"success\", count: totalWidgetCount });\n  });\n\n  // Using Promise.all to wait for all requests to complete\n  Promise.all(fetchPromises2)\n    .then((results) => {\n      const validWidgetCounts = results\n        .filter((result) => result.status === \"success\")\n        .map((result) => result.count);\n\n      const totalWidgetCount = validWidgetCounts.reduce(\n        (acc, count) => acc + count,\n        0\n      );\n      setTotalWidgetCount(totalWidgetCount);\n      // console.log(\"Total Widget Counts:\", totalWidgetCount);\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n} else {\n  // console.error(\"mutualFollowers is not an array\");\n}\n\nconst code = `\n  <html>\n    <head>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css\">\n  <!-- Data Table CSS -->\n  <link rel='stylesheet' href='https://cdn.datatables.net/1.13.5/css/dataTables.bootstrap5.min.css'>\n  <!-- Font Awesome CSS -->\n  <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css'>\n    \n    </head>\n    <body>\n  \n        <!-- jQuery -->\n  <script src='https://code.jquery.com/jquery-3.7.0.js'></script>\n  <!-- Data Table JS -->\n  <script src='https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js'></script>\n  <script src='https://cdn.datatables.net/responsive/2.1.0/js/dataTables.responsive.min.js'></script>\n  <script src='https://cdn.datatables.net/1.13.5/js/dataTables.bootstrap5.min.js'></script>\n  \n  <script>\n    async function fetchData(url) {\n      let response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          Accept: \"*/*\",\n        },\n      });\n      return await response.json();\n    }\n  \n  \n    async function displayData(apiUrl, tableId, title) {\n      let data = await fetchData(apiUrl);\n  \n      // Add an h1 element above the table\n      let h1Element = document.createElement('h1');\n      h1Element.innerHTML = 'Table: ' + title;\n      document.body.appendChild(h1Element);\n  \n      // Create a container div for the table\n      let tableContainer = document.createElement('div');\n      tableContainer.id = tableId + '-container';\n      document.body.appendChild(tableContainer);\n  \n      // Generate HTML table\n      let tableHtml = \"<table class='table table-striped table-bordered' id='\" + tableId + \"'><thead><tr>\";\n      Object.keys(data[0]).forEach(key => {\n        tableHtml += \"<th>\" + key + \"</th>\";\n      });\n      tableHtml += \"</tr></thead><tbody>\";\n      data.forEach(row => {\n        tableHtml += \"<tr>\";\n        Object.values(row).forEach(value => {\n          tableHtml += \"<td>\" + value + \"</td>\";\n        });\n        tableHtml += \"</tr>\";\n      });\n      tableHtml += \"</tbody><tfoot><tr>\";\n      Object.keys(data[0]).forEach(key => {\n        tableHtml += \"<th>\" + key + \"</th>\";\n      });\n      tableHtml += \"</tr></tfoot></table>\";\n  \n      // Append table to the container\n      tableContainer.innerHTML = tableHtml;\n  \n      // Initialize DataTables with pagination\n      $(document).ready(function () {\n        $('#' + tableId).DataTable({\n          // disable sorting on last column\n          \"columnDefs\": [\n            { \"orderable\": false, \"targets\": Object.keys(data[0]).length - 1 }\n          ],\n          language: {\n            // customize pagination prev and next buttons: use arrows instead of words\n            'paginate': {\n              'previous': '<span class=\"fa fa-chevron-left\"></span>',\n              'next': '<span class=\"fa fa-chevron-right\"></span>'\n            },\n            // customize number of elements to be displayed\n            \"lengthMenu\": 'Display <select class=\"form-control input-sm\">' +\n              '<option value=\"10\">10</option>' +\n              '<option value=\"20\">20</option>' +\n              '<option value=\"30\">30</option>' +\n              '<option value=\"40\">40</option>' +\n              '<option value=\"50\">50</option>' +\n              '<option value=\"-1\">All</option>' +\n              '</select> results'\n          }\n        });\n      });\n    }\n  \n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/84e3bf99-a78b-4a0e-97af-e9af193ce868/data/latest\", \"tabel\", \"Daily Commit Stats\");\n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/9af0e6b4-e764-460b-a0af-a36a920c76df/data/latest\", \"tabel2\",\"Daily Dev Stats\");\n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/557a8f29-833f-45ae-bcae-89f251698b8f/data/latest\", \"tabel3\",\"Monthly Commit Stats\");\n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/551b5ea9-a7ab-4d55-abbc-7cacf806387e/data/latest\", \"tabel4\",\"Monthly Dev Stats\");\n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/4af27116-754d-4f99-a9ea-cea237969bad/data/latest\", \"tabel5\",\"Activity Transactions Global\");\n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/210578f5-8691-443c-80bf-3513b016cf47/data/latest\", \"tabel6\",\"Activity Transactions Near Social\");\n    displayData(\"https://api.flipsidecrypto.com/api/v2/queries/ab7beb14-e49a-41fc-bcae-5f9e7ecce91f/data/latest\", \"tabel7\",\"Github Account\");\n  \n  </script>\n  \n      \n    </body>\n  </html>\n  `;\n\nreturn (\n  <>\n    <div className=\"mb-3\">Total Followers: {totalFollowersCount}</div>\n    <div className=\"mb-3\">Total Following: {totalFollowingCount}</div>\n    <div className=\"mb-3\">Total Wallet: {totalMutualFollowersCount}</div>\n    <div className=\"mb-3\">Total Transaction: {totalTxCount}</div>\n    <div className=\"mb-3\">Total Development: {totalWidgetCount}</div>\n    <div className=\"mb-3\">Total Bought NFT: {totalBoughtNFT}</div>\n    <div className=\"mb-3\">Total Sold NFT: {totalBoughtSold}</div>\n\n    {displayedFollowers.map((response, i) => (\n      <div key={i} className=\"d-flex justify-content-between mb-3\">\n        <div className=\"me-4\">{response && response.accountid}</div>\n        <div>\n          {/* Display txCount here */}\n          {response && typeof response.txCount !== \"undefined\" && (\n            <div>Transaction: {response.txCount}</div>\n          )}\n          {response && typeof response.transaction_1_days !== \"undefined\" && (\n            <div>Transaction 1 Days: {response.transaction_1_days}</div>\n          )}\n          {response && typeof response.transaction_7_days !== \"undefined\" && (\n            <div>Transaction 7 Days: {response.transaction_7_days}</div>\n          )}\n          {response && typeof response.transaction_30_days !== \"undefined\" && (\n            <div>Transaction 1 Month: {response.transaction_30_days}</div>\n          )}\n          {response && typeof response.bought_nft !== \"undefined\" && (\n            <div>Bought: {response.bought_nft}</div>\n          )}\n          {response && typeof response.sold_nft !== \"undefined\" && (\n            <div>Sold: {response.sold_nft}</div>\n          )}\n          {response && typeof response.holdings_count_nft !== \"undefined\" && (\n            <div>Total NFT: {response.holdings_count_nft}</div>\n          )}\n          {response && typeof response.totalWidgetCount !== \"undefined\" && (\n            <div>Total Development: {response.totalWidgetCount}</div>\n          )}\n        </div>\n      </div>\n    ))}\n\n    {mutualFollowers.length > displayCount && (\n      <button\n        className=\"list-group-item active\"\n        type=\"button\"\n        onClick={handleShowMore}\n      >\n        Show more ({mutualFollowers.length - displayCount} more)\n      </button>\n    )}\n\n    <div>\n      <h2>Analytic Development</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Wallet Name</th>\n            <th>Total Commit</th>\n            <th>Last 24 Hours Commit</th>\n            <th>Last 7 Days Commit</th>\n            <th>Last 30 Days Commit</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Tampilkan data wallet */}\n          {Object.entries(walletDataWidget).map(([walletName, commitData]) => (\n            <tr key={walletName}>\n              <td>{walletName}</td>\n              <td>{commitData.totalCommit}</td>\n              <td>{commitData.last24HoursCommit}</td>\n              <td>{commitData.last7DaysCommit}</td>\n              <td>{commitData.last30DaysCommit}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n\n    <div>\n      <iframe\n        srcDoc={code}\n        title=\"Embedded Script\"\n        style={{ width: \"100%\", height: \"600px\" }}\n      />\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/93068afd39801c0c63a2861d84ee5789d40d5b9d5df54666a50ea0e19718a5fe/widget/tester.testers-fork", "fact_widget_deployments_id": "603b503c7521e7d18113c570bd30407a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}