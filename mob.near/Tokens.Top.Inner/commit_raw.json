{"tx_hash": "GkTWau17vHzrFShULa4LWhj1z514wUik3u7DT1adyzj5", "action_id_social": "BSrMoHMkh9ZLrYy7LCrdMUXGZMf46W29uT1on4B1aKu7-0-widget", "block_id": 115737835, "block_timestamp": "2024-03-29T19:44:02.638Z", "signer_id": "mob.near", "widget_name": "Tokens.Top.Inner", "source_code": "const tokenId = props.tokenId;\nif (!tokenId) {\n  return \"\";\n}\n\nconst [top, setTop] = useState(false);\nconst [loading, setLoading] = useState(true);\n\nconst { bigToString, MutedDecimals } = VM.require(\n  \"mob.near/widget/Token.utils\"\n);\n\nconst refPrices = JSON.parse(\n  fetch(\"https://indexer.ref.finance/list-token-price\").body || \"{}\"\n);\n\nuseEffect(() => {\n  setTop(false);\n  setLoading(true);\n  asyncFetch(`https://api.fastnear.com/v1/ft/${tokenId}/top`)\n    .then((res) => {\n      if (!res.ok) {\n        console.error(\"Failed to fetch ft top\", res);\n        return;\n      }\n      setTop(\n        Object.fromEntries(\n          (res.body.accounts || [])\n            .filter(({ balance }) => !!balance)\n            .map(({ account_id, balance }) => [account_id, balance])\n        )\n      );\n    })\n    .finally(() => setLoading(false));\n}, [tokenId]);\n\nconst topWithPrices = useMemo(() => {\n  if (!top) {\n    return top;\n  }\n  const computeUsdBalance = (tokenId, balance) => {\n    if (balance === null) {\n      return \"0\";\n    }\n    const price =\n      tokenId === \"near\"\n        ? refPrices[\"wrap.near\"]\n        : refPrices[tokenId] || {\n            price: \"0\",\n            decimal: 1,\n          };\n    return Big(price.price)\n      .mul(Big(balance))\n      .div(Big(10).pow(price.decimal))\n      .toFixed(6);\n  };\n  const st = Object.entries(top).map(([accountId, balance]) => ({\n    accountId,\n    balance,\n    usdBalance: computeUsdBalance(tokenId, balance),\n  }));\n  st.sort((a, b) => parseFloat(b.balance) - parseFloat(a.balance));\n  st.sort((a, b) => parseFloat(b.usdBalance) - parseFloat(a.usdBalance));\n  return st;\n}, [top, refPrices, accountBalance]);\n\nconst Wrapper = styled.div`\n.header {\n  margin-bottom: 1em;\n}\n.token {\n  margin-bottom: 1em;\n  overflow: hidden;\n}\n`;\n\nconst renderToken = ({ accountId, balance, usdBalance }) => {\n  return (\n    <Widget\n      loading=\"\"\n      src=\"mob.near/widget/Tokens.AccountWithBalance\"\n      props={{ tokenId, accountId, balance, usdBalance }}\n    />\n  );\n};\n\nconst usdSum = topWithPrices\n  ? topWithPrices\n      .map(({ usdBalance }) => parseFloat(usdBalance || \"0\"))\n      .reduce((s, v) => s + v, 0)\n  : 0;\n\nreturn (\n  <Wrapper>\n    <div className=\"header\">\n      <Widget src=\"mob.near/widget/Tokens.Token\" props={{ tokenId }} />\n      {usdSum > 0 && (\n        <div>\n          Total USD sum:\n          <span className=\"font-monospace fw-bold d-inline-flex\">\n            <span className=\"text-secondary\">~$</span>\n            <MutedDecimals value={bigToString(usdSum)} />\n          </span>\n        </div>\n      )}\n    </div>\n    <div className=\"actions\">\n      {topWithPrices\n        ? topWithPrices\n            .filter((t) => t.balance !== null)\n            .map((t) => (\n              <div key={t.tokenId} className=\"token\">\n                {renderToken(t)}\n              </div>\n            ))\n        : \"Loading\"}\n    </div>\n  </Wrapper>\n);\n", "metadata": {"fork_of": "mob.near/widget/ActionsInner@113257441"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/mob.near/widget/Tokens.Top.Inner", "fact_widget_deployments_id": "967c9b248201baa7b2439163f0d1419c", "inserted_timestamp": "2024-03-29T21:31:23.898Z", "modified_timestamp": "2024-03-29T21:31:23.898Z", "__row_index": 0}