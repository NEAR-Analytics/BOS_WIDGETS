{"tx_hash": "ErBTDyvZY9eNWD9zN3agaTV8ytHkRUb9Qo1AkB34bJj6", "action_id_social": "Fi8k7zCKpBZtgyW3TK2fos8yerVyxUewNEUxX87QqpEc-0-widget", "block_id": 115691911, "block_timestamp": "2024-03-29T03:20:10.321Z", "signer_id": "communityvoice.ndctools.near", "widget_name": "NDC.Forum.Create", "source_code": "//NDC.Forum.Create\nconst { createArticle, editArticle, buildArticle } = VM.require(\"communityvoice.ndctools.near/widget/lib.article\")\nconst { getConfig } = VM.require(\"communityvoice.ndctools.near/widget/config.CommunityVoice\")\n\n\nconst {\n  isTest,\n  addressForArticles,\n  authorForWidget,\n  stateUpdate,\n  initialBody,\n  initialCreateState,\n  editArticleData,\n  widgets,\n  handleFilterArticles,\n  handleEditArticle,\n  handlerStateUpdate,\n  canLoggedUserCreateArticles,\n  baseActions,\n  handleOnCommitArticle,\n  category\n} = props;\n\nconst errTextNoBody = \"ERROR: no article Body\",\n  errTextNoId = \"ERROR: no article Id\",\n  errTextDublicatedId = \"ERROR: there is article with such name\";\n\nState.init({\n  ...initialCreateState,\n  initialBody: props.initialBody ?? \"\",\n  tags:[]\n});\n\nfunction createStateUpdate(obj) {\n  State.update(obj);\n}\n\nconst tagsArray =\n  editArticleData && !state.tagsModified ? editArticleData.value.articleData.tags : state.tags;\n  \nconst accountId = context.accountId;\n\nfunction getRealArticleId() {\n  if (editArticleData) {\n    return (\n      editArticleData.value.metadata.id ??\n      `article/${editArticleData.value.metadata.author}/${editArticleData.value.metadata.createdTimestamp}`\n    );\n  } else {\n    return `article/${accountId}/${Date.now()}`;\n  }\n}\n\nfunction getArticleData() {\n  const args = {\n    title: editArticleData.value.articleData.title ?? state.title,\n    author: editArticleData.value.metadata.author ?? accountId,\n    lastEditor: accountId,\n    timeLastEdit: Date.now(),\n    timeCreate: editArticleData.value.metadata.createdTimestamp ?? Date.now(),\n    body: state.articleBody,\n    version: editArticleData ? editArticleData.value.metadata.versionKey + 1 : 0,\n    navigation_id: null,\n    tags: tagsArray ?? [],\n    id: getRealArticleId(),\n    category: editArticleData.value.articleData.category ?? category,\n  };\n  return args;\n}\n\nfunction onCommit(articleId) {\n  State.update({\n    title: \"\",\n    clearArticleId: true,\n    tags: [],\n    clearTags: true,\n    articleBody: \"\",\n    clearArticleBody: true,\n    initalBody: \"\",\n    // showCreatedArticle: true,\n    showPreview: false,\n    saving: true,\n  });\n\n  //if (!Array.isArray(article.tags)) article.tags = Object.keys(article.tags);\n\n  handleOnCommitArticle(articleId);\n}\n\nfunction onCancel() {\n  State.update({\n    createdArticle: undefined,\n    saving: false,\n  });\n}\n\nconst handleCreate = () => {\n  const {title, body, tags, category} = getArticleData()\n\n  const articleData = { title, body, tags, category}\n  \n  const metadataHelper = {\n    author: context.accountId,\n  }\n  createArticle(getConfig(isTest), articleData, metadataHelper, (id) => onCommit(id), onCancel)\n}\n\nconst handleEdit = () => {\n  const {title, body, tags, id, category} = getArticleData()\n\n  const articleData = { title, body, tags, category }\n\n  const articleMetadata = editArticleData.value.metadata \n  \n  editArticle(getConfig(isTest), articleData, articleMetadata, ()=>onCommit(id), onCancel)\n}\n\nfunction getInitialMarkdownBody() {\n  if (\n    editArticleData &&\n    (!state.articleBody || state.articleBody === editArticleData.value.articleData.body)\n  ) {\n    return editArticleData.value.articleData.body;\n  } else if (state.articleBody && state.articleBody !== editArticleData.value.articleData.body) {\n    return state.articleBody;\n  } else {\n    return state.initialBody == \"\" || !state.initialBody\n      ? \"Post content (markdown supported)\"\n      : state.initialBody;\n  }\n}\n\nfunction switchShowPreview() {\n  State.update({\n    showPreview: !state.showPreview,\n    initialBody: state.articleBody,\n  });\n}\n\nconst GeneralContainer = styled.div`\n    background-color: rgb(248, 248, 249);\n    margin: 0;\n  `;\n\nconst Button = styled.button` \n    margin: 0px 1rem; \n    display: inline-block; \n    text-align: center; \n    vertical-align: middle; \n    cursor: pointer; \n    user-select: none; \n    transition: color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out; \n   \n    border: 2px solid transparent; \n    font-weight: 500; \n    padding: 0.3rem 0.5rem; \n    background-color: #010A2D; \n    border-radius: 12px; \n    color: white; \n    text-decoration: none;   \n   \n    &:hover { \n      color: #010A2D; \n      background-color: white; \n    } \n  `;\n\nconst CreationContainer = styled.div`\n    background-color: rgb(230, 230, 230);\n    border-radius: 20px;\n    padding: 1rem 0;\n    position: relative;\n  `;\n\nconst SecondContainer = styled.div`\n    min-width: 360px;\n    background-color: white;\n    padding: 1rem;\n  `;\n\nconst BoxShadow = styled.div`\n    box-shadow: rgba(140, 149, 159, 0.1) 0px 4px 28px 0px;\n  `;\n\nconst SpinnerContainer = styled.div`\n    height: 1rem;\n    width: 1rem;\n    marginTop: 2px;\n  `;\n\nconst Spinner = () => {\n  return (\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\n      <span className=\"sr-only\" title=\"Loading...\"></span>\n    </SpinnerContainer>\n  );\n};\n\nconst initialTagsObject = {};\n\nArray.isArray(tagsArray) &&\n  tagsArray.forEach((tag) => {\n    initialTagsObject[tag] = true;\n  });\n\nif(state.saving){\n  return (\n    <Widget\n      src={widgets.views.standardWidgets.newStyledComponents.Feedback.Spinner}\n    />\n  )\n}\n\nreturn (\n  <div>\n    <GeneralContainer className=\"pt-2 row card-group\">\n      <BoxShadow className=\"rounded-3 p-3 m-3 bg-white col-lg-8 col-md-8 col-sm-12\">\n        <div>\n          <SecondContainer className=\"rounded\">\n            {state.showPreview ? (\n              <Widget\n                src={widgets.views.editableWidgets.generalCard}\n                props={{\n                  widgets,\n                  isTest,\n                  data: {\n                    blockHeight:-1,\n                    accountId,\n                    value:{\n                      ...buildArticle({\n                        title: state.title,\n                        body: state.articleBody,\n                        tags: tagsArray,\n                      },{\n                        author: accountId,\n                      })\n                    }\n                  },\n                  addressForArticles,\n                  handleOpenArticle: () => {},\n                  handleFilterArticles: () => {},\n                  authorForWidget,\n                  handleShareButton: () => {},\n                  baseActions,\n                  switchShowPreview,\n                  isPreview: state.showPreview\n                }}\n              />\n            ) : (\n              <div>\n                <div className=\"d-flex flex-column pt-3\">\n                  <label for=\"inputArticleId\" className=\"small text-danger\">\n                    {state.errorId}\n                  </label>\n                  <Widget\n                    src={widgets.views.standardWidgets.fasterTextInput}\n                    props={{\n                      firstText: state.title,\n                      forceClear: state.clearArticleId,\n                      stateUpdate: (obj) => State.update(obj),\n                      filterText: (e) => e.target.value,\n                      placeholder: \"Post title (case-sensitive)\",\n                      editable: editArticleData,\n                    }}\n                  />\n                </div>\n                <div className=\"d-flex flex-column pt-3\">\n                  <label\n                    for=\"textareaArticleBody\"\n                    className=\"small text-danger\"\n                  >\n                    {state.errorBody}\n                  </label>\n                  <div className=\"d-flex gap-2\">\n                    <Widget\n                      src={widgets.views.standardWidgets.markownEditorIframe}\n                      props={{\n                        initialText: getInitialMarkdownBody(),\n                        onChange: (articleBody) =>\n                          State.update({\n                            articleBody,\n                            clearArticleBody: false,\n                          }),\n                        clearArticleBody: state.clearArticleBody,\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"d-flex flex-column pt-3\">\n                  <Widget\n                    src={widgets.views.editableWidgets.tagsEditor}\n                    props={{\n                      forceClear: state.clearTags,\n                      stateUpdate: (obj) => State.update(obj),\n                      initialTagsObject,\n                      placeholder: \"Input tags\",\n                      setTagsObject: (tags) => {\n                        // state.tags = Object.keys(tags);\n                        State.update({\n                          tagsModified: true,\n                          tags: Object.keys(tags),\n                        });\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n            <div className=\"mt-2 d-flex justify-content-end\">\n              <Widget\n                src={\n                  widgets.views.standardWidgets.newStyledComponents.Input.Button\n                }\n                props={{\n                  className: \"info outline mx-2\",\n                  disabled:\n                    state.title.length === 0 || state.articleBody.length === 0,\n                  onClick: switchShowPreview,\n                  children: (\n                    <i\n                      className={`bi ${\n                        state.showPreview ? \"bi-pencil\" : \"bi-eye-fill\"\n                      }`}\n                    ></i>\n                  ),\n                }}\n              />\n              <Widget\n                src={\n                  widgets.views.standardWidgets.newStyledComponents.Input.Button\n                }\n                props={{\n                  className: \"info \",\n                  disabled:\n                    state.title.length === 0 || state.articleBody.length === 0,\n                  onClick: editArticleData ? handleEdit : handleCreate,\n                  children: (\n                    <div className=\"d-flex justify-conten-center align-items-center\">\n                      {state.saving ? (\n                        <Spinner />\n                      ) : (\n                        <>\n                          <span>\n                            {editArticleData ? \"Save edition\" : \"Post\"}\n                          </span>\n                          <i className=\"bi bi-check2\"></i>\n                        </>\n                      )}\n                    </div>\n                  ),\n                }}\n              />\n            </div>\n          </SecondContainer>\n        </div>\n      </BoxShadow>\n    </GeneralContainer>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/communityvoice.ndctools.near/widget/NDC.Forum.Create", "fact_widget_deployments_id": "7c07658963f01102f883c37f75a287f5", "inserted_timestamp": "2024-03-29T04:30:46.452Z", "modified_timestamp": "2024-03-29T04:30:46.452Z", "__row_index": 14}