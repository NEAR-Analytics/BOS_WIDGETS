{"tx_hash": "8u1ms9J9mBFsumHBiQaMYRnXbkMCnBCxMLGF5hRcDdJN", "action_id_social": "2htq4jpCgEE1qKkL57bv3ctDbZXenThVKDpWzH1VfDSK-0-widget", "block_id": 100364009, "block_timestamp": "2023-09-04T08:56:43.203Z", "signer_id": "communityvoice.ndctools.near", "widget_name": "pages.feed.post", "source_code": "const {\n  accountId,\n  blockHeight,\n  Config,\n  Post,\n  key,\n  communities,\n  onCommentsModal,\n} = props;\nconst update = (s) => State.update(s);\nconst refresh = (ms) => setTimeout(() => update({ rd: Math.random() }), ms);\n\nconst community = props.community ?? communities.find((c) => c.id === key);\n\nState.init({});\n\n// -- Filters\nif (Array.isArray(community.rules.posting.SBTs)) {\n  // author should have the SBTs\n  let isValid = false;\n\n  community.rules.posting.SBTs.forEach((SBT) => {\n    const allSBTs = Near.view(Config.SBTRegistry, \"sbt_tokens_by_owner\", {\n      account: accountId,\n    });\n    if (allSBTs === null) return \"\";\n    const hasSBT = allSBTs.find((s) => s[0] === SBT)[1].length > 0;\n    isValid = isValid && hasSBT;\n  });\n  if (!isValid) {\n    return \"\";\n  }\n}\n\n// --\nconst post = Post.get(accountId, blockHeight);\nconst likesByUsers = Post.getLikes(accountId, blockHeight);\nconst reactionsByUsers = Post.getReactions(accountId, blockHeight);\n\nif (post === null) {\n  refresh(500);\n  return <>loading post</>;\n}\n\nif (likesByUsers === null || reactionsByUsers === null) {\n  refresh(500);\n  return <>Loading LIKES</>;\n}\n\nif (state.forcedLike !== undefined) {\n  if (state.forcedLike) {\n    likesByUsers[context.accountId] = likesByUsers[context.accountId] || {\n      accountId: context.accountId,\n      value: {\n        type: \"like\",\n      },\n    };\n  } else {\n    delete likesByUsers[context.accountId];\n  }\n}\n\npost.stats = {\n  likes: Object.keys(likesByUsers).length,\n  reactions: {},\n};\n\nObject.entries(reactionsByUsers).forEach(([_, reaction]) => {\n  post.stats.reactions[reaction] = 1 + (post.stats.reactions[reaction] || 0);\n});\n\npost.reaction = state.forcedReaction ?? reactionsByUsers[context.accountId];\n\nif (state.forcedReaction !== undefined) {\n  if (post.reaction) {\n    post.stats.reactions[post.reaction] =\n      (post.stats.reactions[post.reaction] || 0) - 1;\n  }\n  post.stats.reactions[state.forcedReaction] =\n    (post.stats.reactions[state.forcedReaction] || 0) + 1;\n}\n\npost.liked = !!likesByUsers[context.accountId];\n\nconst on = {\n  like: () => {\n    Post.like(\n      {\n        postAuthor: accountId,\n        postBlockHeight: blockHeight,\n        dataKey: Config.postDataKey,\n      },\n      post.liked ? true : false,\n      () => update({ forcedLike: post.liked ? false : true }),\n      () => console.log(\"canceled\"),\n    );\n  },\n  react: (newReaction) => {\n    Post.react(\n      {\n        postAuthor: accountId,\n        postBlockHeight: blockHeight,\n        dataKey: Config.postDataKey,\n      },\n      newReaction,\n      () => update({ forcedReaction: newReaction }),\n      () => console.log(\"canceled\"),\n    );\n  },\n  showComments: onCommentsModal\n    ? () => {\n        onCommentsModal(accountId, blockHeight);\n      }\n    : undefined,\n};\n\nreturn (\n  <Widget\n    src=\"nearui.near/widget/Social.PostCard\"\n    props={{\n      post,\n      on,\n      containerProps: {\n        className: \"mb-4\",\n      },\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/communityvoice.ndctools.near/widget/pages.feed.post", "fact_widget_deployments_id": "14c9a2df4ce1772c13d591031892859b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}