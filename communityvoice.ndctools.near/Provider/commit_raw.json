{"tx_hash": "8u1ms9J9mBFsumHBiQaMYRnXbkMCnBCxMLGF5hRcDdJN", "action_id_social": "2htq4jpCgEE1qKkL57bv3ctDbZXenThVKDpWzH1VfDSK-0-widget", "block_id": 100364009, "block_timestamp": "2023-09-04T08:56:43.203Z", "signer_id": "communityvoice.ndctools.near", "widget_name": "Provider", "source_code": "/** Contains Business Logic **/\n\n// --- Init\nconst isDev = true;\nconst { widget } = props;\n\n// --- Helpers\n\nconst UUID = {\n  generate: (template) => {\n    if (typeof template !== \"string\") {\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\n    }\n    return template.replace(/[xy]/g, (c) => {\n      var r = (Math.random() * 16) | 0;\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  },\n};\n\nconst Helpers = {\n  post: {\n    validate: (post) => {\n      if (typeof post.body !== \"string\") return \"Post body is required!\";\n      if (post.body.length < 4)\n        return \"Post body should contains at least 4 characters!\";\n      if (!Config.postTypes.includes(post.type))\n        return `Invalid post type, expected one of the following: ${Config.postTypes.join(\n          \", \",\n        )}`;\n      if (!Array.isArray(post.tags))\n        return \"Invalid post tags, expected an array\";\n      if (post.tags.length > 9) return \"Maximum 10 tags per post\";\n      return null;\n    },\n    prepare: (post) => {\n      return {\n        [Config.postDataKey]: {\n          main: JSON.stringify({\n            type: post.type ?? \"md\",\n            community: post.community ?? \"general\",\n            tags: post.tags ?? [],\n            author: context.accountId,\n            updatedAt: post.updatedAt || post.createdAt || Date.now(),\n            createdAt: post.createdAt || Date.now(),\n            body: post.body,\n            version: Config.version,\n          }),\n        },\n        index: {\n          // TODO, index by tags\n          [Config.postDataKey]: JSON.stringify({\n            key: post.community ?? \"general\",\n            value: {\n              type: post.type ?? \"md\",\n            },\n          }),\n        },\n      };\n    },\n    prepareComment: (comment, postAuthor, postBlockHeight) => {\n      return {\n        [Config.commentDataKey]: {\n          main: JSON.stringify({\n            type: comment.type ?? \"md\",\n            community: comment.community ?? \"general\",\n            tags: comment.tags ?? [],\n            author: context.accountId,\n            updatedAt: comment.updatedAt || comment.createdAt || Date.now(),\n            createdAt: comment.createdAt || Date.now(),\n            body: comment.body,\n            version: Config.version,\n          }),\n        },\n        index: {\n          // TODO, index by tags\n          [Config.commentDataKey]: JSON.stringify({\n            key: {\n              type: \"social\",\n              path: `${postAuthor}/${Config.postDataKey}/main`,\n              blockHeight: postBlockHeight,\n            },\n            value: {\n              type: comment.type ?? \"md\",\n            },\n          }),\n          [Config.notifyKey]: JSON.stringify({\n            key: postAuthor,\n            value: {\n              type: \"comment\",\n              item: {\n                type: \"social\",\n                path: `${postAuthor}/${Config.postDataKey}/main`,\n                blockHeight: postBlockHeight,\n              },\n            },\n          }),\n        },\n      };\n    },\n  },\n};\n\n// --- Main\nconst Post = {\n  get: (author, blockHeight, dataKey) => {\n    return JSON.parse(\n      Social.get(\n        `${author}/${dataKey ?? Config.postDataKey}/main`,\n        blockHeight,\n        {\n          subscribe: false,\n        },\n      ) ?? \"null\",\n    );\n  },\n  getLikes: (author, blockHeight, dataKey) => {\n    const likesArray = Social.index(\n      Config.likeKey,\n      {\n        type: \"social\",\n        blockHeight: blockHeight,\n        path: `${author}/${dataKey ?? Config.postDataKey}/main`,\n      },\n      {\n        subscribe: false,\n      },\n    );\n    if (likesArray === null) return null;\n    const likesByUsers = {};\n    (likesArray || []).forEach((like) => {\n      if (like.value.type === \"like\") {\n        likesByUsers[like.accountId] = like;\n      } else if (like.value.type === \"unlike\") {\n        delete likesByUsers[like.accountId];\n      }\n    });\n    return likesByUsers;\n  },\n  getReactions: (author, blockHeight, dataKey) => {\n    const reactionsArray = Social.index(\n      Config.reactKey,\n      {\n        type: \"social\",\n        blockHeight: blockHeight,\n        path: `${author}/${dataKey ?? Config.postDataKey}/main`,\n      },\n      {\n        subscribe: false,\n      },\n    );\n    if (reactionsArray === null) return null;\n    const reactionsByUsers = {};\n    (reactionsArray || []).forEach((reaction) => {\n      if (reaction.value.type === \"null\") {\n        delete reactionsByUsers[like.accountId];\n      } else {\n        reactionsByUsers[reaction.accountId] = reaction.value.type;\n      }\n    });\n    return reactionsByUsers;\n  },\n\n  create: (post, onCommit, onCancel, onError) => {\n    const error = Helpers.post.validate(post);\n    if (error !== null) {\n      return onError(error);\n    }\n    const commit = Helpers.post.prepare(post);\n    Social.set(commit, { force: true, onCommit, onCancel });\n  },\n  like: (\n    { postAuthor, postBlockHeight, dataKey },\n    unlike,\n    onCommit,\n    onCancel,\n  ) => {\n    const postItem = {\n      type: \"social\", // TODO: IDK if this should be changed\n      blockHeight: postBlockHeight,\n      path: `${postAuthor}/${dataKey ?? Config.postDataKey}/main`,\n    };\n    const commit = {\n      index: {\n        [Config.likeKey]: JSON.stringify({\n          key: postItem,\n          value: {\n            type: unlike ? \"unlike\" : \"like\",\n          },\n        }),\n        [Config.notifyKey]: JSON.stringify({\n          key: postAuthor,\n          value: {\n            type: unlike ? \"unlike\" : \"like\",\n            item: postItem,\n          },\n        }),\n      },\n    };\n    Social.set(commit, { force: true, onCommit, onCancel });\n  },\n  react: (\n    { postAuthor, postBlockHeight, dataKey },\n    reaction,\n    onCommit,\n    onCancel,\n  ) => {\n    const postItem = {\n      type: \"social\", // TODO: IDK if this should be changed\n      blockHeight: postBlockHeight,\n      path: `${postAuthor}/${dataKey ?? Config.postDataKey}/main`,\n    };\n    const commit = {\n      index: {\n        [Config.reactKey]: JSON.stringify({\n          key: postItem,\n          value: {\n            type: reaction ? reaction : \"null\",\n          },\n        }),\n      },\n    };\n\n    if (reaction) {\n      commit.index[Config.notifyKey] = JSON.stringify({\n        key: postAuthor,\n        value: {\n          type: reaction ? reaction : \"null\",\n          item: postItem,\n        },\n      });\n    }\n\n    Social.set(commit, { force: true, onCommit, onCancel });\n  },\n  comment: (\n    comment,\n    postAuthor,\n    postBlockHeight,\n    onCommit,\n    onCancel,\n    onError,\n  ) => {\n    const error = Helpers.post.validate(comment);\n    if (error !== null) {\n      return onError(error);\n    }\n    const commit = Helpers.post.prepareComment(\n      comment,\n      postAuthor,\n      postBlockHeight,\n    );\n    Social.set(commit, { force: true, onCommit, onCancel });\n  },\n};\n\nconst Config = {\n  postDataKey: isDev ? \"voice-dev\" : \"voice\",\n  commentDataKey: isDev ? \"echo-dev\" : \"echo\",\n  postTypes: [\"md\"],\n  likeKey: \"like\",\n  reactKey: \"react\",\n  notifyKey: \"notify\",\n  version: \"0\" + (isDev ? \".alpha\" : \"\"),\n  SBTRegistry: \"registry.i-am-human.near\",\n};\n\n// --- Return\nreturn (\n  <Widget\n    src={widget}\n    props={{\n      ...props,\n      Config,\n      Post,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/communityvoice.ndctools.near/widget/Provider", "fact_widget_deployments_id": "b183c632c31ddc033177d00fb51e3219", "inserted_timestamp": "2023-09-04T10:45:16.110Z", "modified_timestamp": "2023-09-04T10:45:16.110Z", "__row_index": 0}