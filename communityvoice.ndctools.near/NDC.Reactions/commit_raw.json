{"tx_hash": "8fx3VsRxp2nMss6G93WBZ1JwGgJEsDN48rCv9d7aA91N", "action_id_social": "A4ja5uFVPaqHsFbb3Je75GXm2b5oAh8qtUyDcKbrK3bs-0-widget", "block_id": 115691956, "block_timestamp": "2024-03-29T03:21:06.543Z", "signer_id": "communityvoice.ndctools.near", "widget_name": "NDC.Reactions", "source_code": "// NDC.Reactions\nconst { getReactions, createReaction } = VM.require(\"communityvoice.ndctools.near/widget/lib.reactions\")\nconst { getConfig } = VM.require(\"communityvoice.ndctools.near/widget/config.CommunityVoice\")\n\nconst {\n  isTest,\n  authorForWidget,\n  elementReactedId,\n  widgets,\n  disabled,\n  baseActions,\n} = props;\n// Don't forget to put space between emoji and text -> \"\u2764\ufe0f Positive\"\nconst initialEmoji = \"\ud83e\udd0d Like\";\n// It is important that 'Heart' Positive emoji is first\nconst emojiArray = [\n  \"\u2764\ufe0f Positive\",\n  \"\ud83d\ude4f Thank you\",\n  \"\ud83d\udcaf Definitely\",\n  \"\ud83d\udc40 Thinking\",\n  \"\ud83d\udd25 Awesome\",\n  \"\ud83d\udc4d Like\",\n  \"\ud83d\ude4c Celebrate\",\n  \"\ud83d\udc4f Applause\",\n  \"\u26a1 Lightning\",\n  \"\u22c8 Bowtie\",\n];\n\nconst [reactionsData, setReactionsData] = useState({reactionsStatistics: [], userEmoji: undefined})\nconst [showEmojiList, setShowEmojiList] = useState(false)\nconst [loading, setLoading] = useState(true)\n\nfunction loadReactions() {\n  getReactions( getConfig(isTest), elementReactedId, context.accountId).then((reactions) => {\n    setReactionsData(reactions)\n    setLoading(false)\n  })\n}\n\nuseEffect(() => {\n    loadReactions()\n    setInterval(() => {\n      loadReactions()\n    }, 30000)\n}, [])\n\n// ================= Mouse Handlers ===============\n\nfunction handleOnMouseEnter() {\n  if (!disabled) {\n    setShowEmojiList(true)\n  }\n}\n\nfunction handleOnMouseLeave() {\n  setShowEmojiList(false)\n}\n\nfunction onCommit() {\n  setLoading(true)\n  setTimeout(() => {\n    loadReactions()\n  }, 3000);\n}\n\nfunction onCancel() {\n  setLoading(false)\n}\n\nfunction reactListener(emojiToWrite) {\n  if (loading || disabled) {\n    return;\n  }\n  setLoading(true)\n\n  // decide to put unique emoji or white heart (unreaction emoji)\n  // const emojiToWrite =\n  //   emojiMessage === initialEmoji ? emojiArray[0] : emojiMessage;\n\n  const author = context.accountId\n  const result = createReaction(getConfig(isTest), emojiToWrite, elementReactedId, author, onCommit, onCancel)\n  if(result.error) {\n      console.error(result.data)\n  }\n\n}\n\n// =============== CSS Styles ===============\nconst Button = styled.button`\n    min-width: fit-content;\n    background: transparent;\n    display: inline-flex;\n    align-items: center;\n    justify-content: start;\n    height: 2.5em;\n    padding: 6px 12px;\n    margin: 2px 0;\n    border: 0;\n    border-radius: .375rem;\n    ${\n      !disabled &&\n      `:hover {\n      background: #EBEBEB; \n      outline: 1px solid #C6C7C8;\n      }`\n    }\n    \n  `;\n\nconst SmallReactButton = styled.button`\n    background: transparent;\n    display: inline-flex;\n    align-items: center;\n    justify-content: start;\n    width: fit-content;\n    height: 2.5em;\n    padding: 6px 12px;\n    margin: 2px 0;\n    border: 0;\n    border-radius: .375rem;\n    ${\n      !disabled &&\n      `:hover {\n      background: #EBEBEB; \n      outline: 1px solid #C6C7C8;\n      }`\n    }\n  `;\n\nconst SmallButton = styled.button`\n  position: relative;\n    border: 0;\n    background: transparent;\n    width: 35px;\n    height: 35px;\n    color: ${({ isHeart }) => (isHeart ? \"red\" : \"\")};\n  `;\n\nconst SmallButtonSpan = styled.span`\n    font-size: 19px;\n    :hover{\n        position: absolute;\n        font-size: 35px;\n        bottom: -5px;\n        width: 35px;\n        height: 40px;\n        transform: translateX(-50%) translateY(-50%);\n    }\n    \n    @media (max-width: 599px) {\n        ::before { \n            position: absolute;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(255, 255, 255, .4);\n            content: \"\";}\n        :hover{\n        ::before { \n            position: absolute;\n            width: 100%;\n            height: 120%;\n            background-color: rgba(255, 255, 255, .4);\n            content: \"\";}\n    }\n        \n    }\n  `;\n\n// =============== NEW CSS Styles ===============!!!!!!!!\nconst EmojiWrapper = styled.div`\n    display: inline-block;\n    position: relative;\n    overflow: visible !important;\n    padding-left: 8px;\n  `;\n\nconst EmojiListWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    padding: 0.5rem;\n    \n    background: white;\n    border-radius: 1rem;\n    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;\n    position: absolute;\n    right: 0;\n    width: 370px;\n    max-width: 35vw;\n    flex-wrap: wrap;\n    display: ${({ show }) => (show ? \"flex\" : \"none\")};\n    transform: translateY(-10%);\n    zIndex: 2;\n  `;\n\nconst SpinnerContainer = styled.div`\n    height: 1rem;\n    width: 1rem;\n    marginTop: 2px;\n  `;\n\nconst CallLibrary = styled.div`\n    display: none;\n  `;\n\n// =============== NEW JSX ===============!!!!!!!!\nconst Overlay = () => {\n  return (\n    <EmojiListWrapper\n      onMouseEnter={handleOnMouseEnter}\n      onMouseLeave={handleOnMouseLeave}\n      show={showEmojiList}\n    >\n      {emojiArray &&\n        emojiArray.map((item) => {\n          return (\n            <SmallButton\n              onClick={() => reactListener(item)}\n              isHeart={index === 0}\n            >\n              <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                  <Tooltip>\n                    <div className=\"text-truncate text-start\">\n                      {item.slice(2)}\n                    </div>\n                  </Tooltip>\n                }\n              >\n                <SmallButtonSpan>{item.slice(0, 2)}</SmallButtonSpan>\n              </OverlayTrigger>\n            </SmallButton>\n          );\n        })}\n    </EmojiListWrapper>\n  );\n};\n\nconst Spinner = () => {\n  return (\n    <SpinnerContainer className=\"spinner-border text-secondary\" role=\"status\">\n      <span className=\"sr-only\" title=\"Loading...\"></span>\n    </SpinnerContainer>\n  );\n};\n\nconst renderReaction = (item, isInButton) => {\n  return (\n    ((item.accounts.includes(context.accountId) && isInButton) ||\n      (!item.accounts.includes(context.accountId) && !isInButton)) && (\n      <span>\n        <Widget\n          src={widgets.views.standardWidgets.wikiOnSocialDB_TooltipProfiles}\n          className={isInButton ? \"ps-3\" : \"\"}\n          props={{ accounts: item.accounts, emoji: item.emoji }}\n        />\n      </span>\n    )\n  );\n};\n\nreturn (\n  <>\n    <EmojiWrapper>\n      {!disabled && (\n        <>\n          {reactionsData.userEmoji ? (\n            <SmallReactButton\n              onMouseEnter={handleOnMouseEnter}\n              onMouseLeave={handleOnMouseLeave}\n            >\n              {loading ? \n                <Spinner /> \n              :\n                reactionsData.reactionsStatistics &&\n                  reactionsData.reactionsStatistics.map((item) =>\n                  renderReaction(item, true)\n                  )\n              }\n            </SmallReactButton>\n          ) : (\n            <Button\n              onMouseEnter={handleOnMouseEnter}\n              onMouseLeave={handleOnMouseLeave}\n            >\n              {loading ? \n                <Spinner />\n              :\n                initialEmoji\n              }\n            </Button>\n          )}\n        </>\n      )}\n      <Overlay />\n      {reactionsData.reactionsStatistics &&\n        reactionsData.reactionsStatistics.map((item) =>\n          renderReaction(item, false)\n        )}\n    </EmojiWrapper>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/communityvoice.ndctools.near/widget/NDC.Reactions", "fact_widget_deployments_id": "937bbecd38a9f857e2ce1e59f1c3508e", "inserted_timestamp": "2024-03-29T04:30:46.452Z", "modified_timestamp": "2024-03-29T04:30:46.452Z", "__row_index": 4}