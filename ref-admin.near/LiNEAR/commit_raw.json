{"tx_hash": "GzAEzcr4bfkqdPRQHJZwQNTEcDcuAW2JBU8U1nvWTPjG", "action_id_social": "CAd3de7bZmXvmgex8B8GRncky9hxSWJWiMzkSkBuADAi-0-widget", "block_id": 100590912, "block_timestamp": "2023-09-07T13:02:32.903Z", "signer_id": "ref-admin.near", "widget_name": "LiNEAR", "source_code": "/** common lib start */\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst NEAR_DECIMALS = 24;\nconst LiNEAR_DECIMALS = 24;\nconst BIG_ROUND_DOWN = 0;\nconst MIN_BALANCE_CHANGE = 0.5;\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n/** common lib end */\nfunction getConfig() {\n  return {\n    ownerId: \"ref-admin.near\",\n    contractId: \"linear-protocol.near\",\n    nodeUrl: \"https://rpc.mainnet.near.org\",\n    appUrl: \"https://app.linearprotocol.org\",\n  };\n}\nconst config = getConfig(context.networkId);\nconst { tabName } = state;\nState.init({\n  tabName: \"stake\", // stake | unstake,\n  nearBalance: \"\",\n});\n// Account balances\n\nfunction updateNearBalance(account, onInvalidate) {\n  const { amount, storage_usage } = account.body.result;\n  const COMMON_MIN_BALANCE = 0.05;\n\n  let newBalance = \"-\";\n  if (amount) {\n    const availableBalance = Big(amount || 0).minus(\n      Big(storage_usage).mul(Big(10).pow(19))\n    );\n    const balance = availableBalance\n      .div(Big(10).pow(NEAR_DECIMALS))\n      .minus(COMMON_MIN_BALANCE);\n    newBalance = balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN);\n  }\n  State.update({\n    nearBalance: newBalance,\n  });\n  if (onInvalidate) {\n    onInvalidate(nearBalance, newBalance);\n  }\n}\n\nfunction getNearBalance(accountId, onInvalidate) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  };\n  asyncFetch(config.nodeUrl, options).then((account) =>\n    updateNearBalance(account, onInvalidate)\n  );\n}\n\nfunction getLinearBalance(accountId, subscribe) {\n  const linearBalanceRaw = Near.view(\n    config.contractId,\n    \"ft_balance_of\",\n    {\n      account_id: accountId,\n    },\n    undefined,\n    subscribe\n  );\n  if (!linearBalanceRaw) return \"-\";\n  const balance = Big(linearBalanceRaw).div(Big(10).pow(LiNEAR_DECIMALS));\n  return balance.lt(0) ? \"0\" : balance.toFixed();\n}\n\nconst nearBalance = state.nearBalance;\n// Initial fetch of account NEAR balance\nif (accountId && !isValid(nearBalance)) {\n  getNearBalance(accountId);\n}\nconst linearBalance = accountId ? getLinearBalance(accountId) : \"-\";\n\nfunction updateAccountInfo(callback) {\n  const interval = setInterval(() => {\n    getNearBalance(accountId, (oldBalance, newBalance) => {\n      if (\n        newBalance !== \"-\" &&\n        oldBalance !== \"-\" &&\n        Big(newBalance).sub(oldBalance).abs().gt(MIN_BALANCE_CHANGE)\n      ) {\n        // now update LiNEAR balance after NEAR balance has been updated\n        getLinearBalance(accountId, true);\n        // stop polling and invoke callback functions if any\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    });\n  }, 500);\n}\nconst Main = styled.div`\n  width: 500px;\n  position: relative;\n\n  @media (max-width: 770px) {\n    width: 100%;\n  }\n`;\n\nconst updateTabName = (tabName) =>\n  State.update({\n    tabName,\n  });\nreturn (\n  <Main>\n    {props.tabName === \"stake\" && (\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Stake`}\n        props={{\n          config,\n          updateTabName,\n          nearBalance,\n          linearBalance,\n          updateAccountInfo,\n        }}\n      />\n    )}\n    {props.tabName === \"unstake\" && (\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Unstake`}\n        props={{ config, updateTabName, linearBalance, updateAccountInfo }}\n      />\n    )}\n  </Main>\n);\n", "metadata": {"name": "linear"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-admin.near/widget/LiNEAR", "fact_widget_deployments_id": "334915b095b0275f12f2cfdb22871445", "inserted_timestamp": "2023-09-07T14:50:51.013Z", "modified_timestamp": "2023-09-07T14:50:51.013Z", "__row_index": 1}