{"tx_hash": "EAsJsh8SmAAoa37PND7eSgBrCoaU5FWpuuGznaXdxrib", "action_id_social": "3PBtp8qDBPnkV7CiREfKQuPyATi1pQ6cqxxoFhBLVeVf-0-widget", "block_id": 91370920, "block_timestamp": "2023-05-08T09:44:32.489Z", "signer_id": "ref-admin.near", "widget_name": "TagsEditor", "source_code": "const Container = styled.div`\n  .rbt-input-multi{\n     display:flex;\n     align-items:center;\n     background-color: rgba(26, 46, 51, 0.25);\n     border: 1px solid rgba(255, 255, 255, 0.3);\n     border-radius: 10px;\n     height: 47px;\n     width:100%;\n     color:rgba(255, 255, 255, 0.3);\n     padding:0 10px;\n  }\n  .rbt-input-multi.focus{\n    box-shadow:none;\n  }\n  .rbt-input-multi .rbt-input-wrapper{\n    width:100%;\n  }\n  .dropdown-menu{\n    background: #13181A;\n    border: 1px solid #3A4244;\n    border-radius: 10px;\n    margin-top:3px;\n  }\n  .dropdown-menu .dropdown-item {\n    font-weight: 500;\n    font-size: 16px;\n    color:#fff;\n    text-decoration:none;\n  }\n  .dropdown-menu .dropdown-item:hover{\n    background-color:#304352;\n  }\n  .rbt-token{\n    display:flex;\n    align-items:center;\n    height:26px;\n    background-color:rgba(26, 46, 51, 0.25);\n    border: 0.5px solid rgba(255, 255, 255, 0.3);\n    border-radius: 38px;\n    color:#fff;\n    padding:0 10px;\n  }\n  .rbt-token .rbt-token-remove-button{\n      align-items:center;\n  }\n  .rbt-token-label {\n      padding:0;\n  }\n  .btn-close{\n    padding:0;\n    color:#7E8A93;\n    font-weight: 700;\n  }\n`;\nconst tagsPattern = props.tagsPattern ?? \"*/profile/tags/*\";\nconst placeholder = props.placeholder ?? \"Tags\";\nconst initialTagsObject = props.initialTagsObject || {};\n\nconst tagsObject = Social.keys(tagsPattern, \"final\");\n\nif (tagsObject === null) {\n  return \"Loading\";\n}\n\nconst normalizeTag = (tag) =>\n  tag\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst tagsCount = {};\n\nconst processTagsObject = (obj) => {\n  Object.entries(obj).forEach((kv) => {\n    if (typeof kv[1] === \"object\") {\n      processTagsObject(kv[1]);\n    } else {\n      const tag = normalizeTag(kv[0]);\n      tagsCount[tag] = (tagsCount[tag] || 0) + 1;\n    }\n  });\n};\n\nconst getTags = () => {\n  processTagsObject(tagsObject);\n  const tags = Object.entries(tagsCount);\n  tags.sort((a, b) => b[1] - a[1]);\n  return tags.map((t) => ({\n    name: t[0],\n    count: t[1],\n  }));\n};\n\nif (!state.allTags) {\n  initState({\n    allTags: getTags(),\n    tags: Object.keys(initialTagsObject).map((tag) => ({\n      name: normalizeTag(tag),\n    })),\n    originalTags: Object.fromEntries(\n      Object.keys(initialTagsObject).map((tag) => [tag, null])\n    ),\n    id: `tags-selector-${Date.now()}`,\n  });\n}\n\nconst setTags = (tags) => {\n  tags = tags.map((o) => {\n    o.name = normalizeTag(o.name);\n    return o;\n  });\n  State.update({ tags });\n  if (props.setTagsObject) {\n    props.setTagsObject(\n      Object.assign(\n        {},\n        state.originalTags,\n        Object.fromEntries(tags.map((tag) => [tag.name, \"\"]))\n      )\n    );\n  }\n};\n\nreturn (\n  <Container>\n    <Typeahead\n      id={state.id}\n      multiple\n      labelKey=\"name\"\n      onChange={setTags}\n      options={state.allTags}\n      placeholder={placeholder}\n      selected={state.tags}\n      positionFixed\n      allowNew\n    />\n    {props.debug && (\n      <div>\n        Debugging tags:\n        <pre>{JSON.stringify(state.tags)}</pre>\n      </div>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ref-admin.near/widget/TagsEditor", "fact_widget_deployments_id": "6deccdaa84bd869fe9d0dff2f127b776", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 23}