{"tx_hash": "9iuTw9msgt5RRe3D5oeAzNwWbyT5SdHa6HcQnEfDkCoF", "action_id_social": "FtohrM9V1fejriYMPhYhTx7LgHoh5CFmUVExV5ozfpco-0-widget", "block_id": 101369343, "block_timestamp": "2023-09-18T01:57:10.621Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.TradeMintOutPut", "source_code": "const OutPut = styled.div``;\nconst OutPutItem = styled.div`\n  display: flex;\n  padding: 10px 20px;\n  background-color: #222436;\n  border-radius: 12px;\n  margin-top: 20px;\n`;\nconst Amount = styled.div`\n  font-size: 20px;\n  font-weight: 500;\n  color: #fff;\n`;\nconst Value = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #787da1;\n`;\nconst AmountWrapper = styled.div`\n  width: 60%;\n  border-right: 1px solid #2c334b;\n`;\nconst TokenWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  width: 40%;\n  padding-left: 20px;\n`;\nconst TokenIcon = styled.img`\n  width: 30px;\n  height: 30px;\n  margin-right: 6px;\n`;\nconst TokenSymbol = styled.div`\n  font-size: 18px;\n  font-weight: 500;\n  color: #fff;\n  white-space: nowrap;\n`;\nconst Expiry = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #787da1;\n`;\n\nconst { onLoadMint } = props;\n\nconst staticRouter = \"0xAdB09F65bd90d19e3148D9ccb693F3161C6DB3E8\";\n\nconst staticMintAbis = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"YT\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyToMint\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mintPyFromSyStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPYOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"YT\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenIn\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"mintPyFromTokenStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPyOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"SY\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenIn\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"mintSyFromTokenStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netSyOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst wethAddress = \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\";\n\nconst {\n  inputCurrency,\n  inputCurrencyAmount,\n  mintType,\n  SuccessCallBack,\n  market,\n} = props;\n\nState.init({\n  quoting: false,\n  amount: \"\",\n});\n\nconst signer = Ethers.provider().getSigner();\n\nconst contract = new ethers.Contract(staticRouter, staticMintAbis, signer);\n\nconst YT = market.yt.address;\n\nconst getStaticMintSY = (amountIn) => {\n  return contract\n    .mintPyFromSyStatic(market.yt.address, amountIn)\n    .then((res) => {\n      const netPYOutRaw = res.toString();\n\n      const parsedOut = ethers.utils.formatUnits(\n        netPYOutRaw,\n        market.pt.decimals\n      );\n\n      State.update({\n        amount: parsedOut,\n        quoting: false,\n        errorMsg: \"\",\n      });\n\n      onLoadMint({\n        amount: parsedOut,\n        quoitng: false,\n      });\n    })\n    .catch((e) => {\n      State.update({\n        amount: \"\",\n        quoting: false,\n        errorMsg: \"\",\n      });\n\n      onLoadMint({\n        amount: \"\",\n        quoitng: false,\n      });\n    });\n};\n\nconst getkyberData = (tokenIn, tokenOut, amount, isUnderlying) => {\n  const url = `https://aggregator-api.kyberswap.com/arbitrum/route/encode?tokenIn=${tokenIn}&tokenOut=${tokenOut}&amountIn=${amount}&to=0x0000000001e4ef00d069e71d6ba041b0a16f7ea0`;\n\n  return asyncFetch(url)\n    .then((res) => {\n      if (isUnderlying) {\n        return { amount };\n      } else {\n        const { outputAmount, routerAddress, encodedSwapData } = res.body;\n        return { amount: outputAmount, routerAddress, encodedSwapData };\n      }\n    })\n    .catch((e) => {\n      return {\n        error: true,\n        amount,\n      };\n    });\n};\n\nconst getStaticMint = () => {\n  const amountIn = ethers.utils.parseUnits(\n    inputCurrencyAmount,\n    inputCurrency.decimals\n  );\n\n  State.update({\n    quoting: true,\n  });\n  if (inputCurrency.baseType === \"SY\") {\n    return getStaticMintSY(amountIn);\n  } else {\n    const tokenIn =\n      inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\n    const netTokenIn = Big(inputCurrencyAmount)\n      .times(Big(10).pow(inputCurrency.decimals))\n      .toFixed(0);\n\n    const bulk = \"0x0000000000000000000000000000000000000000\";\n\n    contract\n      .mintPyFromTokenStatic(YT, tokenIn, netTokenIn, bulk)\n      .then((rawAmount) => {\n        // const isUnderlying =\n        //   inputCurrency.address.toLowerCase() ===\n        //   market.underlyingAsset.address.toLowerCase();\n\n        // if (isUnderlying) {\n        State.update({\n          amount: ethers.utils.formatUnits(\n            rawAmount.toString(),\n            market.pt.decimals\n          ),\n          quoting: false,\n          errorMsg: \"\",\n        });\n\n        onLoadMint({\n          amount: ethers.utils.formatUnits(\n            rawAmount.toString(),\n            market.pt.decimals\n          ),\n        });\n\n        return;\n        // }\n\n        // getkyberData(\n        //   tokenIn,\n        //   market.underlyingAsset.address,\n        //   netTokenIn,\n        //   inputCurrency.address.toLowerCase() ===\n        //     market.underlyingAsset.address.toLowerCase()\n        // ).then(({ amount, error, routerAddress, encodedSwapData }) => {\n        //   const useOrigin = !amount;\n\n        //   if (useOrigin) {\n        //     State.update({\n        //       amount: ethers.utils.formatUnits(\n        //         rawAmount.toString(),\n        //         market.pt.decimals\n        //       ),\n        //       quoting: false,\n        //       errorMsg: \"\",\n        //     });\n\n        //     return;\n        //   }\n\n        //   contract\n        //     .mintPyFromTokenStatic(\n        //       YT,\n        //       market.underlyingAsset.address,\n        //       amount,\n        //       bulk\n        //     )\n        //     .then((res) => {\n        //       const netPYOutRaw = res.toString();\n\n        //       const badRoute = Big(rawAmount.toString()).gt(netPYOutRaw);\n\n        //       const parsedOut = ethers.utils.formatUnits(\n        //         netPYOutRaw,\n        //         market.pt.decimals\n        //       );\n\n        //       if (badRoute) {\n        //         State.update({\n        //           amount: ethers.utils.formatUnits(\n        //             rawAmount.toString(),\n        //             market.pt.decimals\n        //           ),\n        //           quoting: false,\n        //           errorMsg: \"Bad Route\",\n        //         });\n        //         return;\n        //       } else {\n        //         State.update({\n        //           amount: parsedOut,\n        //           quoting: false,\n        //           errorMsg: \"\",\n        //           mintParams: {\n        //             swapType: 1,\n        //             routerAddress,\n        //             encodedSwapData,\n        //           },\n        //         });\n\n        //         const mintParams = {\n        //           swapType: 1,\n        //           routerAddress,\n        //           encodedSwapData,\n        //         };\n\n        //         onLoadMint({\n        //           mintParams,\n        //         });\n        //       }\n        //     })\n        //     .catch((e) => {\n        //       State.update({\n        //         amount: \"\",\n        //         quoting: false,\n        //         errorMsg: e.message,\n        //       });\n        //     });\n        // });\n      })\n      .catch((e) => {\n        State.update({\n          amount: \"\",\n          quoting: false,\n          errorMsg: e.message,\n        });\n      });\n  }\n};\n\nconst qs = `${inputCurrencyAmount} ${inputCurrency.address} to ${mintType}`;\n\nif (inputCurrencyAmount && inputCurrency && market && qs !== state.qs) {\n  State.update({\n    qs,\n  });\n  getStaticMint();\n}\n\nconst pt = props.pt || {};\nconst yt = props.yt || {};\n\nconst formatValue = (currency) => {\n  if (!state.amount || !currency.price) return \"\";\n  return Big(state.amount).mul(currency.price.usd).toFixed(2);\n};\n\nreturn (\n  <OutPut>\n    <OutPutItem>\n      <AmountWrapper>\n        <Amount>{state.amount || 0}</Amount>\n        <Value>\u2248 ${formatValue(pt)}</Value>\n      </AmountWrapper>\n      <TokenWrapper>\n        <TokenIcon src={pt.proIcon} />\n        <div>\n          <TokenSymbol>{pt.proSymbol}</TokenSymbol>\n          <Expiry>\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.FormatExpiryDate\"\n              props={{\n                date: props.expiry,\n              }}\n            />\n          </Expiry>\n        </div>\n      </TokenWrapper>\n    </OutPutItem>\n    <OutPutItem>\n      <AmountWrapper>\n        <Amount>{state.amount || 0}</Amount>\n        <Value>\u2248 ${formatValue(yt)}</Value>\n      </AmountWrapper>\n      <TokenWrapper>\n        <TokenIcon src={yt.proIcon} />\n        <div>\n          <TokenSymbol>{yt.proSymbol}</TokenSymbol>\n          <Expiry>\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.FormatExpiryDate\"\n              props={{\n                date: props.expiry,\n              }}\n            />\n          </Expiry>\n        </div>\n      </TokenWrapper>\n    </OutPutItem>\n  </OutPut>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.TradeMintOutPut", "fact_widget_deployments_id": "84f10ee14757977db60a73388316d329", "inserted_timestamp": "2023-09-18T03:34:58.726Z", "modified_timestamp": "2023-09-18T03:34:58.726Z", "__row_index": 0}