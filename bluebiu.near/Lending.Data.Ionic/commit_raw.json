{"tx_hash": "AvVxey5cpTe5c1ShDGysQ9cJB3jUaix4kSZphUd8papz", "action_id_social": "J348BrbcBATJ5dpNexuqrQBf6iKiRV4r5yStkUSyS3zc-0-widget", "block_id": 119550150, "block_timestamp": "2024-05-23T08:11:27.973Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Ionic", "source_code": "const OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"borrowBalanceCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAssetsIn\",\n    outputs: [\n      { internalType: \"contract OToken[]\", name: \"\", type: \"address[]\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n      { internalType: \"bool\", name: \"isQied\", type: \"bool\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  collateralAddress,\n  multicallAddress,\n  unitrollerAddress,\n  oracleAddress,\n  account,\n  update,\n  name,\n  onLoad,\n  markets,\n  multicall,\n  prices,\n} = props;\n\nconst { formatUnits, parseUnits } = ethers.utils;\n\nuseEffect(() => {\n  if (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\n\n  console.log(`${name}-update`);\n\n  let _cTokensData = {};\n  let _loanToValue = null;\n  let _underlyPrice = {};\n  let _liquidity = null;\n  let _underlyingBalance = null;\n  let _userMerberShip = null;\n  let _collateralMap = {};\n  let _minBorrowMap = {};\n  let _borrowCapsRes = {};\n  let count = 0;\n  let oTokensLength = Object.values(markets).length;\n\n  const calcApy = (rateAsNumber) => {\n    const blocksPerMin = 30;\n    const daysPerYear = 365;\n    const blocksPerDay = blocksPerMin * 60 * 24;\n    const dailyGrowthRate = Big(rateAsNumber || 0)\n      .mul(blocksPerDay)\n      .toString();\n    const annualGrowth =\n      Math.exp(daysPerYear * Math.log1p(dailyGrowthRate)) - 1;\n    const apy = Big(annualGrowth).mul(100);\n    return apy;\n  };\n\n  const formatedData = (key) => {\n    console.log(`${name}-${key}`, count);\n    if (count < 7) return;\n    count = 0;\n    oTokensLength = Object.values(markets).length;\n    let totalSupplyUsd = Big(0);\n    let totalBorrowUsd = Big(0);\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let userTotalCollateralUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n    const markets = {};\n\n    Object.values(_cTokensData).forEach((market) => {\n      // const underlyingPrice = _underlyPrice[market.address] || 1;\n\n      let underlyingPrice =\n        market.underlyingToken.symbol === \"weETH.mode\"\n          ? prices[\"weETH\"]\n          : prices[market.underlyingToken.symbol];\n      underlyingPrice = underlyingPrice || 1;\n\n      const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n      const marketBorrowUsd = Big(market.totalBorrows || 0).mul(\n        underlyingPrice\n      );\n      totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n      totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(\n        Big(market.userSupply).mul(underlyingPrice)\n      );\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(\n        Big(market.userBorrow).mul(underlyingPrice)\n      );\n\n      if (_collateralMap[market.address]) {\n        totalCollateralUsd = totalCollateralUsd.plus(\n          Big(market.userSupply)\n            .mul(underlyingPrice)\n            .mul(market[\"COLLATERAL_FACTOR\"])\n        );\n        userTotalCollateralUsd = userTotalCollateralUsd.plus(\n          Big(market.userSupply).mul(underlyingPrice)\n        );\n      }\n      // for ionic, every token's collateral usd\n      const _userCollateralUSD = _collateralMap[market.address]\n        ? Big(market.userSupply).mul(underlyingPrice).toString()\n        : 0;\n      const supplyApy = calcApy(market.supplyRatePerBlock);\n\n      const borrowApy = calcApy(market.borrowRatePerBlock);\n\n      const _minBorrowAmount = Big(\n        formatUnits(_minBorrowMap[market.address][0])\n      )\n        .times(Big(prices[\"ETH\"] || 0))\n        .div(underlyingPrice)\n        .toFixed(6, 0);\n\n      // const _borrowCaps = _borrowCapsRes[market.address]\n      //   ? _borrowCapsRes[market.address].toString()\n      //   : 0;\n\n      const _borrowCaps = _borrowCapsRes[market.address]\n        ? ethers.utils.formatUnits(\n            _borrowCapsRes[market.address][0],\n            market.decimals\n          )\n        : 0;\n      markets[market.address] = {\n        ...market,\n        // loanToValue: _loanToValue[market.address],\n        liquidity: _liquidity[market.address],\n        underlyingPrice: underlyingPrice,\n        userCollateralUSD: _userCollateralUSD,\n\n        userUnderlyingBalance: _underlyingBalance[market.address],\n        userMerberShip: _collateralMap[market.address] ? true : false,\n        // userMerberShip: _userMerberShip[market.address],\n        supplyApy: supplyApy.toFixed(2) + \"%\",\n        borrowApy: borrowApy.toFixed(2) + \"%\",\n        minBorrowAmount: _minBorrowAmount,\n        borrowCaps: _borrowCaps,\n        dapp: name,\n      };\n    });\n\n    onLoad({\n      markets,\n      totalSupplyUsd: totalSupplyUsd.toString(),\n      totalBorrowUsd: totalBorrowUsd.toString(),\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      userTotalCollateralUsd: userTotalCollateralUsd.toString(),\n      totalCollateralUsd: totalCollateralUsd.toString(),\n    });\n  };\n\n  const getUnderlyPrice = () => {\n    if (!oracleAddress) return;\n    const oTokens = Object.keys(markets);\n    const calls = oTokens.map((token) => ({\n      address: oracleAddress,\n      name: \"getUnderlyingPrice\",\n      params: [token],\n    }));\n    multicall({\n      abi: ORACLE_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyPrice = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            36 - markets[oTokens[i]].underlyingToken.decimals\n          );\n        }\n        count++;\n        formatedData(\"getUnderlyPrice\");\n      })\n      .catch((err) => {\n        console.log(\"error-getUnderlyPrice\", err);\n      });\n  };\n  const getOTokenLiquidity = () => {\n    const assets = Object.values(markets);\n    let nativeOToken = \"\";\n    const calls = assets\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        address: market.underlyingToken.address,\n        name: \"balanceOf\",\n        params: [market.address],\n      }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _liquidity = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const oToken = markets[calls[i].params[0]];\n          _liquidity[oToken.address] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            oToken.underlyingToken.decimals\n          );\n        }\n        const provider = Ethers.provider();\n        if (nativeOToken) {\n          provider.getBalance(nativeOToken).then((rawBalance) => {\n            _liquidity[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"getOTokenLiquidity\");\n          });\n        } else {\n          count++;\n          formatedData(\"getOTokenLiquidity\");\n        }\n      })\n      .catch(() => {\n        setTimeout(() => {\n          getOTokenLiquidity();\n        }, 500);\n      });\n  };\n  const getWalletBalance = () => {\n    let nativeOToken = \"\";\n    const underlyingTokens = Object.values(markets)\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        ...market.underlyingToken,\n        oTokenAddress: market.address,\n      }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyingBalance = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyingBalance[underlyingTokens[i].oTokenAddress] = res[i][0]\n            ? ethers.utils.formatUnits(\n                res[i][0]._hex,\n                underlyingTokens[i].decimals\n              )\n            : \"0\";\n        }\n        if (nativeOToken) {\n          const provider = Ethers.provider();\n          provider.getBalance(account).then((rawBalance) => {\n            _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"underlyingTokens\");\n          });\n        } else {\n          count++;\n          formatedData(\"underlyingTokens\");\n        }\n      })\n      .catch(() => {\n        setTimeout(() => {\n          getWalletBalance();\n        }, 500);\n      });\n  };\n  const getCTokenData = (oToken) => {\n    if (oTokensLength === 0) return;\n    const calls = [\n      {\n        address: oToken.address,\n        name: \"exchangeRateCurrent\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalSupply\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalBorrows\",\n      },\n      {\n        address: oToken.address,\n        name: \"balanceOf\",\n        params: [account],\n      },\n      {\n        address: oToken.address,\n        name: \"borrowBalanceCurrent\",\n        params: [account],\n      },\n      {\n        address: oToken.address,\n        name: \"borrowRatePerBlock\",\n      },\n      {\n        address: oToken.address,\n        name: \"supplyRatePerBlock\",\n      },\n    ];\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        oTokensLength--;\n        const exchangeRateStored = res[0][0]\n          ? ethers.utils.formatUnits(res[0][0], 18)\n          : \"0\";\n\n        const totalSupply = res[1][0]\n          ? ethers.utils.formatUnits(res[1][0]._hex, oToken.decimals)\n          : \"0\";\n\n        const userSupply = res[3][0]\n          ? ethers.utils.formatUnits(res[3][0]._hex, oToken.decimals)\n          : \"0\";\n\n        const _totalSupply = Big(totalSupply)\n          .mul(exchangeRateStored)\n          .toString();\n\n        const _totalBorrows = res[2][0]\n          ? ethers.utils.formatUnits(\n              res[2][0]._hex,\n              oToken.underlyingToken.decimals\n            )\n          : \"0\";\n        const supplyRatePerBlock = res[6][0]\n          ? ethers.utils.formatUnits(res[6][0]._hex, 18)\n          : \"0\";\n        const borrowRatePerBlock = res[5][0]\n          ? ethers.utils.formatUnits(res[5][0]._hex, 18)\n          : \"0\";\n        const _userSupply = Big(userSupply).mul(exchangeRateStored).toString();\n        const _userBorrow = res[4][0]\n          ? ethers.utils.formatUnits(\n              res[4][0]._hex,\n              oToken.underlyingToken.decimals\n            )\n          : \"0\";\n\n        _cTokensData[oToken.address] = {\n          ...oToken,\n          exchangeRateStored,\n          totalSupply: _totalSupply,\n          totalBorrows: _totalBorrows,\n          supplyRatePerBlock,\n          borrowRatePerBlock,\n          userSupply: _userSupply,\n          userBorrow: _userBorrow,\n        };\n        if (oTokensLength === 0) {\n          count++;\n          formatedData(\"oTokens data\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"getCTokensData err\", err);\n        // setTimeout(() => {\n        //   getCTokenData(oToken);\n        // }, 1000);\n      });\n  };\n\n  const getCTokensData = () => {\n    Object.values(markets).forEach((market) => {\n      getCTokenData(market);\n    });\n  };\n  const getCollateralStatus = () => {\n    const oTokens = Object.values(markets);\n    const contract = new ethers.Contract(\n      collateralAddress,\n      UNITROLLER_ABI,\n      Ethers.provider()\n    );\n    contract\n      .getAssetsIn(account)\n      .then((res) => {\n        console.log(\"getCollateralStatus-res:\", res, oTokens);\n\n        if (Array.isArray(res) && res.length) {\n          _collateralMap = {};\n          res.forEach((addr) => {\n            const _market = oTokens.find(\n              (item) =>\n                item.address.toLocaleLowerCase() === addr.toLocaleLowerCase()\n            );\n\n            if (_market) {\n              _collateralMap[_market.address] = true;\n            }\n          });\n        }\n\n        count++;\n        formatedData(\"User Borrows\");\n      })\n      .catch((err) => {\n        console.log(\"CATCH_getCollateralStatus_ERROR:\", err);\n      });\n  };\n  const getBorrowCaps = () => {\n    const cTokens = Object.keys(markets);\n    const calls = cTokens.map((_cToken) => ({\n      address: collateralAddress,\n      name: \"borrowCaps\",\n      params: [_cToken],\n    }));\n    multicall({\n      abi: [\n        {\n          inputs: [\n            {\n              internalType: \"address\",\n              name: \"\",\n              type: \"address\",\n            },\n          ],\n          name: \"borrowCaps\",\n          outputs: [\n            {\n              internalType: \"uint256\",\n              name: \"\",\n              type: \"uint256\",\n            },\n          ],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getBorrowCaps-res:\", res);\n\n        if (Array.isArray(res) && res.length) {\n          _borrowCapsRes = {};\n          res.forEach((amount, index) => {\n            _borrowCapsRes[cTokens[index]] = amount;\n          });\n        }\n\n        count++;\n        formatedData(\"getBorrowCaps\");\n      })\n      .catch((err) => {\n        console.log(\"CATCH_getBorrowCaps_ERROR:\", err);\n      });\n  };\n  const getMinBorrow = () => {\n    const cTokens = Object.keys(markets);\n\n    const calls = cTokens.map((_cToken) => ({\n      address: \"0x8ea3fc79D9E463464C5159578d38870b770f6E57\",\n      name: \"getMinBorrowEth\",\n      params: [_cToken],\n    }));\n    multicall({\n      abi: [\n        {\n          inputs: [\n            {\n              internalType: \"contract ICErc20\",\n              name: \"_ctoken\",\n              type: \"address\",\n            },\n          ],\n          name: \"getMinBorrowEth\",\n          outputs: [\n            {\n              internalType: \"uint256\",\n              name: \"\",\n              type: \"uint256\",\n            },\n          ],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getMinBorrow-res:\", res);\n\n        if (Array.isArray(res) && res.length) {\n          _minBorrowMap = {};\n          res.forEach((_rawMinAmount, index) => {\n            _minBorrowMap[cTokens[index]] = _rawMinAmount;\n          });\n        }\n\n        count++;\n        formatedData(\"getMinBorrow\");\n      })\n      .catch((err) => {\n        console.log(\"CATCH_getMinBorrow_ERROR:\", err);\n      });\n  };\n\n  // getUnitrollerData();\n  getUnderlyPrice();\n  getBorrowCaps();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  getCollateralStatus();\n  getMinBorrow();\n}, [update, account]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Ionic", "fact_widget_deployments_id": "45d86f96eaef88bc4baab5bda03c7020", "inserted_timestamp": "2024-05-23T09:50:20.397Z", "modified_timestamp": "2024-05-23T09:50:20.397Z", "__row_index": 5}