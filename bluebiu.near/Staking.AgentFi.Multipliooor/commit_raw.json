{"tx_hash": "DSbAVdTtUy8dLNcneUE4tHgLThbSxAmAwH3ZmZgNTxSt", "action_id_social": "FcuzZhSq5JibVdJ7XwsCTH4NQVrhG37fu6qDPr53CHQ-0-widget", "block_id": 120859283, "block_timestamp": "2024-06-10T14:04:13.984Z", "signer_id": "bluebiu.near", "widget_name": "Staking.AgentFi.Multipliooor", "source_code": "const StyledContainer = styled.div`\n  \n`;\nconst StyledButton = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  line-height: 56px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: 20px;\n  text-align: center;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst StyledDexTips = styled.div`\n  color: #979ABE;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-top: 10px;\n`;\n\nconst DEPOSIT_POOL_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"rootAgentAddress\", type: \"address\" },\n    ],\n    name: \"createMultipliooorAgentForRoot\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nconst {\n  prices,\n  getTokenBalance,\n  dexConfig,\n  currentStrategy,\n  account,\n  rootAgent,\n  onSuccess,\n  addAction,\n  toast,\n  chainId,\n} = props;\n\nconst { StakeTokens } = dexConfig;\n\nState.init({\n  pending: false,\n  balance: 0,\n});\n\nconst amount = '0.003';\nconst actionText = 'Stake';\n\nconst formatAddAction = (actionText, _amount, status, transactionHash, tokenSymbol) => {\n  addAction?.({\n    type: \"Staking\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: props.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nconst handleSubmit = () => {\n  if (!state.balance || !rootAgent.agentAddress) return;\n  State.update({\n    pending: true,\n  });\n  const params = [rootAgent.agentAddress];\n\n  const contract = new ethers.Contract(\n    currentStrategy.meta.contract,\n    DEPOSIT_POOL_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const eth = StakeTokens.find((it) => it.symbol === 'ETH');\n\n  const getTx = (gas) => {\n    const contractOption = {\n      gasLimit: gas || 4000000,\n      value: parseUnits(amount, eth?.decimals || 18),\n    }\n    contract.createMultipliooorAgentForRoot(...params, contractOption)\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            State.update({\n              pending: false,\n            });\n            if (status !== 1) throw new Error(\"\");\n            onSuccess();\n            formatAddAction(actionText, amount, status, transactionHash, 'ETH');\n            toast?.success({\n              title: `${actionText} Successfully!`,\n              text: `${actionText} ${amount} ETH`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            console.log('tx error: ', err);\n            State.update({\n              pending: false,\n            });\n            toast?.fail({\n              title: `${actionText} Failed!`,\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : ``,\n            });\n          });\n      })\n      .catch((err) => {\n        console.log('contract fn error: ', err);\n        State.update({\n          pending: false,\n        });\n        toast?.fail({\n          title: `${actionText} Failed!`,\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : ``,\n        });\n      });\n  };\n\n  const estimateGas = () => {\n    contract.estimateGas.createMultipliooorAgentForRoot(\n      ...params,\n      { value: parseUnits(amount, eth?.decimals || 18) }\n    ).then((gas) => {\n      getTx(gas);\n    }).catch((err) => {\n      console.log('get gas failed: ', err);\n      getTx();\n    });\n  };\n\n  estimateGas();\n};\n\nconst {\n  pending,\n  balance,\n} = state;\n\nuseEffect(() => {\n  const eth = StakeTokens.find((it) => it.symbol === 'ETH');\n  eth && getTokenBalance(eth).then((value) => {\n    State.update({\n      balance: value,\n    });\n  });\n}, []);\n\nreturn (\n  <StyledContainer>\n    <StyledDexTips>\n      You can withdraw any remaining funds at the end of the Blast Multiplier program.\n    </StyledDexTips>\n    <StyledButton\n      disabled={pending || !balance || !rootAgent.agentAddress}\n      onClick={handleSubmit}\n    >\n      {pending ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (Big(balance).gte(Big(amount)) ? 'DEPOSIT ' + amount + ' ETH' : 'INSUFFICIENT BALANCE')}\n    </StyledButton>\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.AgentFi.Multipliooor", "fact_widget_deployments_id": "c339a7419547cc703eb08dddd7a5695f", "inserted_timestamp": "2024-06-10T16:05:32.153Z", "modified_timestamp": "2024-06-10T16:05:32.153Z", "__row_index": 0}