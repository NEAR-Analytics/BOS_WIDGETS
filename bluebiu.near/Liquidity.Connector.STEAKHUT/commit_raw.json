{"tx_hash": "79WRSrDmuNLVTT5DYZS78BxKe3SyKBRkySRmHycbd85a", "action_id_social": "5xN2Bj2HabNt7wziZeYb8hrh6fswYHezPq3YR8FcLoXh-0-widget", "block_id": 115905951, "block_timestamp": "2024-04-01T08:14:37.430Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Connector.STEAKHUT", "source_code": "\nconst StyledColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst StyledRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst StyledVaultImage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  img {\n    width: 26px;\n    height: 26px;\n    border-radius: 50%;\n  }\n`\nconst SvgIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &.icon-right {\n    position: absolute;\n    right: 28px;\n    top: 50%;\n    transform: translateY(-50%);\n\n    &.rotate {\n      transform: translateY(-50%) rotate(90deg);\n    }\n  }\n`\nconst StyledDashedUndeline = styled.div`\n  padding: 2px 0;\n  border-bottom: 1px dashed #979ABE;\n`\nconst TdTxt = styled.div`\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  &.gray {\n    color: #979ABE;\n    font-size: 12px;\n  }\n`\nconst PoolPercentage = styled.div`\n  padding: 3px 8px;\n  border-radius: 24px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\n\nconst StrategyTxt = styled.div`\n  padding: 7px 10px;\n  border-radius: 6px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst TitleText = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 32px;\n  color: #ffffff;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst ContainerLogin = styled.div`\n  display: flex;\n  max-width: 500px;\n\n  flex-direction: column;\n  margin: 80px auto auto auto;\n\n  .web3-connect {\n    width: 480px;\n    height: 60px;\n    border-radius: 10px;\n    background-color: #fff;\n    color: #0f1126;\n    font-size: 18px;\n    font-weight: 500;\n    border: none;\n    margin-top: 20px;\n  }\n\n  @media (max-width: 736px) {\n    max-width: 100%;\n    .web3-connect {\n      width: 100%;\n\n      font-size: 16px;\n      height: 40px;\n    }\n  }\n`;\nState.init({\n  allData: null,\n  loading: false,\n  dataList: [],\n  filterList: [],\n  dataIndex: -1,\n  categoryIndex: 0,\n  chainIndex: 0,\n  token: '',\n})\nconst IconRight = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"8\" height=\"10\" viewBox=\"0 0 8 10\" fill=\"none\">\n    <path d=\"M7.18407 4.21913C7.68448 4.61945 7.68448 5.38054 7.18407 5.78087L2.28485 9.70024C1.63009 10.2241 0.660156 9.75788 0.660156 8.91937L0.660156 1.08062C0.660156 0.242118 1.63009 -0.224055 2.28485 0.299756L7.18407 4.21913Z\" fill=\"#979ABE\" />\n  </svg>\n)\nconst {\n  toast,\n  CHAIN_LIST,\n  multicallAddress,\n  dexConfig,\n  curChain,\n  isChainSupported,\n  onSwitchChain,\n  addAction,\n  connectProps,\n  prices,\n} = props\n\nconst formatFiat = (value) => {\n  const number = Number(value).toLocaleString(\"en\", {\n    currency: \"USD\",\n    style: \"currency\",\n    compactDisplay: \"short\",\n    notation: \"compact\",\n    maximumFractionDigits: 2,\n  });\n  return number;\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) {\n  return (\n    <Widget\n      style={dexConfig.theme}\n      src=\"bluebiu.near/widget/Arbitrum.Swap.ConnectButton\"\n      props={{\n        ...connectProps,\n        isWrongNetwork: false,\n      }}\n    />\n  );\n}\n\nconst {\n  pairs,\n  addresses,\n  proxyAddress,\n  ALL_DATA_URL,\n  ICON_VAULT_MAP,\n  USER_DATA_BASE,\n  LAST_SNAP_SHOT_DATA_URL,\n} = dexConfig\nfunction fetchAllData() {\n  State.update({\n    loading: true\n  });\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      asyncFetch(ALL_DATA_URL, {\n        method: 'POST',\n        body: JSON.stringify({\n          \"variables\": {},\n          \"query\": \"{\\n  vaults(first: 100, where: {IsWhitelisted: true}) {\\n    id\\n    underlyingX\\n    underlyingY\\n    tokenX {\\n      id\\n      name\\n      symbol\\n      priceUSD\\n      decimals\\n      __typename\\n    }\\n    tokenY {\\n      id\\n      name\\n      symbol\\n      priceUSD\\n      decimals\\n      __typename\\n    }\\n    name\\n    shares\\n    strategy {\\n      id\\n      harvests(\\n        orderBy: blockTimestamp\\n        orderDirection: desc\\n        first: 1000\\n        where: {blockTimestamp_gte: 1710172800}\\n      ) {\\n        id\\n        amountX\\n        amountY\\n        amountXBefore\\n        amountYBefore\\n        lastHarvest\\n        blockTimestamp\\n        __typename\\n      }\\n      __typename\\n    }\\n    users(first: 1, where: {address: \\\"\" + address + \"\\\"}) {\\n      id\\n      address\\n      amount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n\n        })\n      }).then((res) => {\n        if (!res.ok) return;\n        State.update({\n          allData: res.body?.data?.vaults ?? [],\n          loading: false\n        })\n      })\n    })\n}\n\nfunction handleChangeDataIndex(index) {\n  state.dataIndex === index ? State.update({\n    dataIndex: -1\n  }) : State.update({\n    dataIndex: index\n  })\n}\nfunction handleChangeCategoryIndex(index) {\n  State.update({\n    categoryIndex: index\n  })\n}\nfunction handleChangeChainIndex(index) {\n  const chain = CHAIN_LIST[index]\n  onSwitchChain({\n    chainId: `0x${Number(chain.chain_id).toString(16)}`,\n  });\n}\nfunction handleSearchInput(event) {\n  State.update({\n    token: event.target.value\n  })\n}\nfunction refetch() {\n  fetchAllData()\n}\n\nuseEffect(() => {\n  if (state.dataList) {\n    let filterList = []\n    if (state.categoryIndex === 0) {\n      filterList = state.dataList.filter(data => {\n        const source = data.id.toUpperCase()\n        const target = (state.token || '').toUpperCase()\n        return source.indexOf(target) > -1\n      })\n    } else if (state.categoryIndex === 1) {\n      state.dataList.forEach(data => {\n        if (data.initialData.users.length > 0) {\n          filterList.push(data)\n        }\n      })\n    }\n    State.update({\n      filterList\n    })\n  }\n}, [state.dataList, state.token, state.categoryIndex])\n\nuseEffect(() => {\n  const index = CHAIN_LIST.findIndex(chain => chain.id === curChain.id)\n  if (index > -1) {\n    State.update({\n      chainIndex: index,\n      allData: null,\n      dataList: [],\n      categoryIndex: 0,\n      userPositions: null\n    })\n    fetchAllData()\n  }\n}, [curChain])\nconst columnList = [{\n  width: '40%',\n  key: 'pool',\n  label: 'Pool',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <>\n        <StyledVaultImage>\n          <img style={{ marginRight: -6 }} src={ICON_VAULT_MAP[data.token0]} alt={data.token0} />\n          <img src={ICON_VAULT_MAP[data.token1]} alt={data.token1} />\n        </StyledVaultImage>\n        <TdTxt>{data.token0} / {data.token1}</TdTxt>\n      </>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'chain',\n  label: 'Chain',\n  type: 'slot',\n  render: () => <img style={{ width: 26 }} src={curChain.logo} alt={curChain.name} />\n}, {\n  width: '10%',\n  key: 'strategy',\n  label: 'Strategy',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <StrategyTxt>{data.strategy2 ? data.strategy2 : data.strategy}</StrategyTxt>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'tvlUSD',\n  label: 'TVL',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <TdTxt>{formatFiat(data.tvlUSD)}</TdTxt>\n    )\n  }\n}, {\n  width: '15%',\n  key: 'Fee APR',\n  label: 'Fee APR',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <StyledDashedUndeline>\n        <TdTxt>{data.feeApr}</TdTxt>\n      </StyledDashedUndeline>\n    )\n  }\n}, {\n  width: '15%',\n  direction: 'column',\n  key: 'liquidity',\n  label: 'Your Liquidity',\n  type: 'slot',\n  render: (data, index) => {\n    return (\n      <>\n        <TdTxt>{data.liquidity ? `${formatFiat(data.liquidity)}` : \"-\"}</TdTxt>\n        {/* {data.liquidity && <TdTxt className=\"gray\">{data.liquidity} LP</TdTxt>} */}\n        <SvgIcon className={[\"icon-right\", index === state.dataIndex ? \"rotate\" : \"\"]}>\n          {IconRight}\n        </SvgIcon>\n      </>\n    )\n  }\n}]\n\nreturn state.loading ? <Widget src=\"bluebiu.near/widget/0vix.LendingSpinner\" /> : (\n  <StyledColumn>\n    {state.allData && (\n      <Widget\n        src={\"bluebiu.near/widget/Liquidity.Data.STEAKHUT\"}\n        props={{\n          pairs,\n          addresses,\n          allData: state.allData,\n          prices,\n          curChain,\n          multicallAddress,\n          LAST_SNAP_SHOT_DATA_URL,\n          onLoad: (data) => {\n            State.update({\n              dataList: data.dataList,\n              loading: false\n            })\n          }\n        }}\n      />\n    )}\n    <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.Filter\"}\n      props={{\n        token: state.token,\n        chains: CHAIN_LIST,\n        categoryIndex: state.categoryIndex,\n        chainIndex: state.chainIndex,\n        onSearchInput: handleSearchInput,\n        onChangeCategoryIndex: handleChangeCategoryIndex,\n        onChangeChainIndex: handleChangeChainIndex,\n      }}\n    />\n    <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.STEAKHUT.List\"}\n      props={{\n        toast,\n        prices,\n        refetch,\n        columnList,\n        userPositions: state.userPositions,\n        dataIndex: state.dataIndex,\n        onChangeDataIndex: handleChangeDataIndex,\n        dataList: state.filterList,\n        addresses,\n        addAction,\n        proxyAddress,\n        multicallAddress,\n        ICON_VAULT_MAP,\n      }}\n    />\n    {!isChainSupported && (\n      <Widget\n        src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n        props={{\n          chain: curChain,\n          onSwitchChain: onSwitchChain,\n          switchingChain: switchingChain,\n          theme: dexConfig.theme?.button,\n        }}\n      />\n    )}\n  </StyledColumn>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Connector.STEAKHUT", "fact_widget_deployments_id": "758cdedcb48c9744f027ebd35ab32093", "inserted_timestamp": "2024-04-01T09:36:38.862Z", "modified_timestamp": "2024-04-01T09:36:38.862Z", "__row_index": 3}