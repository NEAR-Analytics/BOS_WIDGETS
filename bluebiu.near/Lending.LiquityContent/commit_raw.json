{"tx_hash": "3H3uKfwCB9jV19rWXKcke6y2FFrANLndqeW2vsN3tc4i", "action_id_social": "7cPP6HqQwyoLi2he7xXJNPHexbWk331GaaUBiwUygyn6-0-widget", "block_id": 111780288, "block_timestamp": "2024-01-31T15:19:42.258Z", "signer_id": "bluebiu.near", "widget_name": "Lending.LiquityContent", "source_code": "const StyledContainer = styled.div`\n  padding-top: 18px;\n`;\n\nconst {\n  dexConfig,\n  wethAddress,\n  multicallAddress,\n  chainIdNotSupport,\n  multicall,\n  prices,\n  account,\n  addAction,\n  toast,\n  chainId,\n  nativeCurrency,\n  tab,\n} = props;\n\nconst { markets, VesselManagerOperations } = dexConfig;\n\nState.init({\n  newMarkets: markets,\n});\n\nconst getWalletBalance = () => {\n  if (!markets) return;\n  let nativeOToken = \"\";\n  const underlyingTokens = Object.values(markets)\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = wethAddress;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      ...market.underlyingToken,\n    }));\n  const calls = underlyingTokens.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n\n  multicall({\n    abi: [\n      {\n        constant: true,\n        inputs: [\n          {\n            name: \"_owner\",\n            type: \"address\",\n          },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n          {\n            name: \"balance\",\n            type: \"uint256\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      for (let i = 0, len = res.length; i < len; i++) {\n        markets[underlyingTokens[i].address].userUnderlyingBalance = res[i][0]\n          ? ethers.utils.formatUnits(\n              res[i][0]._hex,\n              underlyingTokens[i].decimals\n            )\n          : \"0\";\n      }\n\n      if (nativeOToken) {\n        const provider = Ethers.provider();\n        provider.getBalance(account).then((rawBalance) => {\n          markets[nativeOToken].userUnderlyingBalance =\n            ethers.utils.formatUnits(rawBalance._hex, 18);\n\n          // count++;\n          // formatedData(\"getWalletBalance\");\n        });\n      } else {\n        // count++;\n        // formatedData(\"getWalletBalance\");\n      }\n\n      State.update({\n        newMarkets: markets,\n      });\n    })\n    .catch((err) => {\n      console.log(\"getWalletBalance error\", err);\n    });\n};\n\nconst getMinted = () => {\n  const underlyingTokens = Object.values(markets);\n\n  const calls = underlyingTokens.map((item) => ({\n    address: VesselManagerOperations,\n    name: \"getEntireSystemDebt\",\n    params: [item.underlyingToken.address],\n  }));\n\n  multicall({\n    abi: [\n      {\n        inputs: [{ internalType: \"address\", name: \"_asset\", type: \"address\" }],\n        name: \"getEntireSystemDebt\",\n        outputs: [\n          {\n            internalType: \"uint256\",\n            name: \"entireSystemDebt\",\n            type: \"uint256\",\n          },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      for (let i = 0, len = res.length; i < len; i++) {\n        markets[underlyingTokens[i].underlyingToken.address][\"MINTED\"] = res[\n          i\n        ][0]\n          ? ethers.utils.formatUnits(res[i][0]._hex)\n          : \"0\";\n      }\n      State.update({\n        newMarkets: markets,\n      });\n    })\n    .catch((err) => {\n      console.log(\"getMinted_err\", err);\n    });\n};\n\nuseEffect(() => {\n  State.update({\n    loading: !chainIdNotSupport,\n  });\n}, []);\nuseEffect(() => {\n  getWalletBalance();\n  getMinted();\n}, [dexConfig]);\n\nreturn (\n  <StyledContainer>\n    {tab === \"market\" && (\n      <Widget\n        src=\"bluebiu.near/widget/Lending.LiquityMarkets\"\n        props={{\n          addAction,\n          toast,\n          chainId,\n          nativeCurrency,\n          dexConfig: {\n            ...dexConfig,\n            markets: state.newMarkets,\n          },\n          account,\n          prices,\n          onSuccess: () => {\n            State.update({\n              loading: true,\n            });\n          },\n        }}\n      />\n    )}\n    {tab === \"yours\" && (\n      <Widget\n        src=\"bluebiu.near/widget/Lending.LiquityYours\"\n        props={{\n          ...props,\n          dexConfig: {\n            ...dexConfig,\n            markets: state.newMarkets,\n          },\n          onSuccess: () => {\n            State.update({\n              loading: true,\n            });\n          },\n        }}\n      />\n    )}\n    {/* <Widget\n      src={dexConfig.data}\n      props={{\n        update: state.loading,\n        account,\n        wethAddress,\n        multicallAddress,\n        multicall,\n        prices,\n        ...dexConfig,\n        onLoad: (data) => {\n          State.update({\n            loading: false,\n            timestamp: Date.now(),\n            ...data,\n          });\n        },\n      }}\n    /> */}\n    {/* <Widget\n      src=\"bluebiu.near/widget/Avalanche.Lending.Dialog\"\n      props={{\n        display: state.showDialog,\n        data: state.tableButtonClickData,\n        chainId,\n        addAction,\n        toast,\n        source: \"dapp\",\n        onClose: () => {\n          State.update({\n            showDialog: false,\n          });\n        },\n        onSuccess: () => {\n          State.update({\n            loading: true,\n          });\n        },\n      }}\n    /> */}\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.LiquityContent", "fact_widget_deployments_id": "8933fb7c6d8b3d1867d279ef878e8c68", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}