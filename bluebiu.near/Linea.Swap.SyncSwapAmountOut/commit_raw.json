{"tx_hash": "AVSw4bUfpythCMCChe12ufhedRgJYPMSdKWUE9gmg71i", "action_id_social": "36QqGB4Rvzfms9gsRydsmDspPhGeVnUSGHKZJRLKhRau-0-widget", "block_id": 117561912, "block_timestamp": "2024-04-25T02:20:10.269Z", "signer_id": "bluebiu.near", "widget_name": "Linea.Swap.SyncSwapAmountOut", "source_code": "const POOL_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst PAIR_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_tokenIn\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amountIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAmountOut\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getReserves\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_reserve0\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_reserve1\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"pool\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n              },\n              {\n                internalType: \"address\",\n                name: \"callback\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"callbackData\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct IRouter.SwapStep[]\",\n            name: \"steps\",\n            type: \"tuple[]\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IRouter.SwapPath[]\",\n        name: \"paths\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountOutMin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IPool.TokenAmount\",\n        name: \"amountOut\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  classicPoolAddres,\n  stablePoolAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater || !routerAddress || !classicPoolAddres || !stablePoolAddress)\n    return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    const WethContract = new ethers.Contract(\n      wethAddress,\n      [\n        {\n          constant: false,\n          inputs: [],\n          name: \"deposit\",\n          outputs: [],\n          payable: true,\n          stateMutability: \"payable\",\n          type: \"function\",\n        },\n        {\n          constant: false,\n          inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n          name: \"withdraw\",\n          outputs: [],\n          payable: false,\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    let params = [];\n    let options = {};\n    let method = \"\";\n    if (wrapType === 1) {\n      method = \"deposit\";\n      options.value = ethers.utils.parseEther(\n        Big(inputCurrencyAmount).toFixed(18).toString()\n      );\n    } else {\n      method = \"withdraw\";\n      params = [\n        ethers.utils.parseEther(\n          Big(inputCurrencyAmount).toFixed(18).toString()\n        ),\n      ];\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n      routes: null,\n      routerStr: \"\",\n      gas: \"\",\n    };\n    const getTx = (_gas) => {\n      WethContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas || 4000000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      WethContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          console.log(err);\n          getTx();\n        });\n    };\n    estimateGas();\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.isNative ? wethAddress : inputCurrency.address,\n    outputCurrency.isNative ? wethAddress : outputCurrency.address,\n  ];\n\n  const getStablePoolAddress = () => {\n    const StablePoolContract = new ethers.Contract(\n      stablePoolAddress,\n      POOL_ABI,\n      Ethers.provider().getSigner()\n    );\n    StablePoolContract.getPool(...path)\n      .then((pool) => {\n        if (pool === ZERO_ADDRESS) {\n          onLoad({\n            inputCurrency,\n            inputCurrencyAmount,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n            noPair: true,\n          });\n        } else {\n          getAmountOut(pool);\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          outputCurrencyAmount: \"\",\n          noPair: true,\n        });\n      });\n  };\n\n  const getPoolAddress = () => {\n    const ClassicPoolContract = new ethers.Contract(\n      classicPoolAddres,\n      POOL_ABI,\n      Ethers.provider().getSigner()\n    );\n    ClassicPoolContract.getPool(...path)\n      .then((pool) => {\n        if (pool === ZERO_ADDRESS) {\n          getStablePoolAddress();\n        } else {\n          getAmountOut(pool);\n        }\n      })\n      .catch((err) => {\n        getStablePoolAddress();\n      });\n  };\n  const getAmountOut = (_poolAddress) => {\n    const PairContract = new ethers.Contract(\n      _poolAddress,\n      PAIR_ABI,\n      Ethers.provider().getSigner()\n    );\n    PairContract.getAmountOut(path[0], amount, account)\n      .then((res) => {\n        const amountoutDesimals = Big(\n          ethers.utils.formatUnits(res, outputCurrency.decimals)\n        );\n\n        if (amountoutDesimals.gt(0)) {\n          getTransaction({\n            amountOut: res,\n            amountoutDesimals: amountoutDesimals.toString(),\n            poolAddress: _poolAddress,\n          });\n        } else {\n          onLoad({\n            noPair: true,\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n        });\n      });\n  };\n\n  const getTransaction = ({ amountOut, amountoutDesimals, poolAddress }) => {\n    const RouterContract = new ethers.Contract(\n      routerAddress,\n      ROUTER_ABI,\n      Ethers.provider().getSigner()\n    );\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n    const _amountOut = Big(amountOut)\n      .mul(1 - (slippage || 0.005))\n      .toFixed(0);\n    let priceImpact = \"0\";\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(amountoutDesimals).div(inputCurrencyAmount);\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n    const withdrawMode = outputCurrency.isNative ? 1 : 2;\n    const options = {\n      value: inputCurrency.isNative ? amount : 0,\n    };\n    const swapData = ethers.utils.defaultAbiCoder.encode(\n      [\"address\", \"address\", \"uint8\"],\n      [path[0], account, withdrawMode]\n    );\n    const steps = [\n      {\n        pool: poolAddress,\n        data: swapData,\n        callback: ZERO_ADDRESS, // we don't have a callback\n        callbackData: \"0x\",\n      },\n    ];\n    const paths = [\n      {\n        steps: steps,\n        tokenIn: inputCurrency.isNative ? ZERO_ADDRESS : inputCurrency.address,\n        amountIn: amount,\n      },\n    ];\n\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(amountoutDesimals).gt(0.01)\n        ? Big(amountoutDesimals).toPrecision(10)\n        : Big(amountoutDesimals).toFixed(10),\n      priceImpact,\n    };\n\n    const params = [paths, _amountOut, deadline];\n\n    const createTx = (_gas) => {\n      RouterContract.populateTransaction\n        .swap(...params, {\n          ...options,\n          gasLimit: _gas || 5000000,\n        })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n          });\n        });\n    };\n\n    RouterContract.estimateGas\n      .swap(...params, options)\n      .then((_gas) => {\n        createTx(_gas);\n      })\n      .catch((err) => {\n        createTx();\n      });\n  };\n  getPoolAddress();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Linea.Swap.SyncSwapAmountOut", "fact_widget_deployments_id": "45edc8e7268f03e1ff712c3416d09c17", "inserted_timestamp": "2024-04-25T04:04:00.243Z", "modified_timestamp": "2024-04-25T04:04:00.243Z", "__row_index": 5}