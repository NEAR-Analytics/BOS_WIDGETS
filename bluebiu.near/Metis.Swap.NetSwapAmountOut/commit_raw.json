{"tx_hash": "4hiYYpAdeL2Won9bYEwtVM2FfSqeiw14gDm2VsP6Vh5p", "action_id_social": "7aea7oM22L5C21TXs366CEpiwR56V53BS6NrHyDSpDdP-0-widget", "block_id": 115010053, "block_timestamp": "2024-03-19T08:01:59.499Z", "signer_id": "bluebiu.near", "widget_name": "Metis.Swap.NetSwapAmountOut", "source_code": "const ROUTER_ABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n    ],\n    name: \"getAmountsOut\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountInMax\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"path\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactTokensForTokens\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOutMin\",\n        type: \"uint256\",\n      },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"swapExactMetisForTokens\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      {\n        internalType: \"uint256\",\n        name: \"amountOutMin\",\n        type: \"uint256\",\n      },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"swapExactTokensForMetis\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst PAIR_ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"getReserves\",\n    outputs: [\n      { internalType: \"uint112\", name: \"_reserve0\", type: \"uint112\" },\n      { internalType: \"uint112\", name: \"_reserve1\", type: \"uint112\" },\n      {\n        internalType: \"uint32\",\n        name: \"_blockTimestampLast\",\n        type: \"uint32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst FACTORY_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"token1\", type: \"address\" },\n      { internalType: \"address\", name: \"token2\", type: \"address\" },\n    ],\n    name: \"getPair\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  factoryAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address,\n    inputCurrency.address === \"native\" ? wethAddress : outputCurrency.address,\n  ];\n\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    ROUTER_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const getAmountOut = () => {\n    RouterContract.getAmountsOut(amount, path)\n      .then((res) => {\n        const _amount = Big(\n          ethers.utils.formatUnits(res[1], outputCurrency.decimals)\n        );\n        if (_amount.gt(0)) {\n          getTransaction({\n            amountoutDesimals: _amount.toString(),\n            amountOut: res[1],\n          });\n        } else {\n          onLoad({\n            noPair: true,\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n        });\n      });\n  };\n\n  const getTransaction = ({ amountOut, amountoutDesimals }) => {\n    let method = \"\";\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n    const _amountOut = Big(amountOut)\n      .mul(1 - (slippage || 0.05))\n      .toFixed(0);\n    let priceImpact = null;\n\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(amountoutDesimals).div(inputCurrencyAmount);\n\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice.eq(0) ? 1 : poolPrice)\n        .mul(100)\n        .toString();\n    }\n    const options = {};\n    const params = [_amountOut, path, account, deadline];\n    if (inputCurrency.isNative) {\n      method = \"swapExactMetisForTokens\";\n      options.value = amount;\n    } else if (outputCurrency.isNative) {\n      method = \"swapExactTokensForMetis\";\n      params.unshift(amount);\n    } else {\n      method = \"swapExactTokensForTokens\";\n      params.unshift(amount);\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(amountoutDesimals).gt(0.01)\n        ? Big(amountoutDesimals).toPrecision(10)\n        : Big(amountoutDesimals).toFixed(10),\n      priceImpact,\n      noPair: false,\n    };\n\n    RouterContract.estimateGas[method](...params, options)\n      .then((_gas) => {\n        RouterContract.populateTransaction[method](...params, {\n          ...options,\n          gasLimit: _gas,\n        })\n          .then((res) => {\n            onLoad({\n              ...returnData,\n              gas: _gas,\n              unsignedTx: res,\n            });\n          })\n          .catch((err) => {\n            onLoad({\n              ...returnData,\n              gas: _gas,\n            });\n          });\n      })\n      .catch((err) => {\n        onLoad({\n          ...returnData,\n        });\n      });\n  };\n  getAmountOut();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Metis.Swap.NetSwapAmountOut", "fact_widget_deployments_id": "cabb998abbf2779c7230db8a36c67377", "inserted_timestamp": "2024-03-19T09:34:29.241Z", "modified_timestamp": "2024-03-19T09:34:29.241Z", "__row_index": 5}