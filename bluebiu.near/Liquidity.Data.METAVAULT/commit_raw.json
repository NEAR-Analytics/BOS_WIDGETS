{"tx_hash": "GYaeHu1Tw8RYKwN62EZjPo3vjXGR9Rfbiv1D4j4F4qnM", "action_id_social": "HXpEvy58wLRTtcyvGjLQTgCRRPRZ1b1vmm2aUWSfifZt-0-widget", "block_id": 116378635, "block_timestamp": "2024-04-08T07:42:24.486Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.METAVAULT", "source_code": "const {\n  pairs,\n  addresses,\n  onLoad,\n  curChain,\n  multicallAddress,\n  storeAddress,\n  prices\n} = props\n\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_asset\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getBalance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_asset\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getGlobalUPL\",\n    \"outputs\": [\n      {\n        \"internalType\": \"int256\",\n        \"name\": \"\",\n        \"type\": \"int256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\n\nlet loading = false\nlet dataList = []\nfunction formatedData() {\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    dataList.push(pair)\n  })\n  formatedData('getDataList')\n}\nfunction getMyBalance() {\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"_assets\",\n        \"type\": \"address[]\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getUserBalances\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"\",\n        \"type\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }]\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(storeAddress),\n    abi,\n    Ethers.provider()\n  );\n  contract\n    .getUserBalances(dataList.map(data => addresses[data.id]), sender)\n    .then((result) => {\n      for (let i = 0; i < result.length; i++) {\n        const data = dataList[i]\n        const element = result[i];\n        dataList[i].myBalance = Big(ethers.utils.formatUnits(element, data.decimals)).toFixed(6)\n      }\n      formatedData('getMyBalance')\n    })\n    .catch((e) => {\n      setTimeout(() => {\n        getMyBalance();\n      }, 500);\n    });\n}\nfunction getPoolBalance() {\n  const calls = []\n  for (let i = 0; i < dataList.length; i++) {\n    const data = dataList[i]\n    calls.push({\n      address: ethers.utils.getAddress(storeAddress),\n      name: \"getBalance\",\n      params: [addresses[data.id]],\n    })\n  }\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const data = dataList[i]\n        const element = result[i];\n        dataList[i].poolBalance = Big(ethers.utils.formatUnits(element[0], data.decimals)).toFixed(3)\n      }\n      formatedData('getPoolBalance')\n    },\n    (error) => {\n      setTimeout(() => {\n        getPoolBalance();\n      }, 500);\n    }\n  )\n}\nfunction getTrader() {\n  const calls = []\n  for (let i = 0; i < dataList.length; i++) {\n    const data = dataList[i]\n    calls.push({\n      address: ethers.utils.getAddress(storeAddress),\n      name: \"getGlobalUPL\",\n      params: [addresses[data.id]],\n    })\n  }\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      console.log('===result', result)\n      for (let i = 0; i < result.length; i++) {\n        const data = dataList[i]\n        const element = result[i];\n        dataList[i].trader = Big(ethers.utils.formatUnits(element[0], data.decimals)).times(prices[data.token]).toFixed(2)\n      }\n      formatedData('getTrader')\n    },\n    (error) => {\n      setTimeout(() => {\n        getTrader();\n      }, 500);\n    }\n  )\n}\n\nuseEffect(() => {\n  getDataList()\n  // getFees()\n  getMyBalance()\n  getPoolBalance()\n  getTrader()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.METAVAULT", "fact_widget_deployments_id": "2b37147b94419febc1d1db633562f0c1", "inserted_timestamp": "2024-04-08T09:30:33.775Z", "modified_timestamp": "2024-04-08T09:30:33.775Z", "__row_index": 1}