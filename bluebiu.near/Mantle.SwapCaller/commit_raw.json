{"tx_hash": "FoyakR9JS4dm92ZWPgssuxcpktFcHApPuxzmngs91Utb", "action_id_social": "DzFp7hKt4Aj5z5coEaxD4vTF4rMVNXfyaQN69nYc4rrb-0-widget", "block_id": 99921764, "block_timestamp": "2023-08-29T10:39:35.097Z", "signer_id": "bluebiu.near", "widget_name": "Mantle.SwapCaller", "source_code": "const {\n  tokenIn,\n  tokenOut,\n  config,\n  selectedDex,\n  onLoadSwapCall,\n  sender,\n  amountIn,\n  onSwapCallBack,\n} = props;\n\nconst qs = `${tokenIn.address}-${tokenOut.address}-${amountIn}-${selectedDex}`;\n\nif (qs !== state.cacheQs) {\n  State.update({\n    cacheQs: qs,\n  });\n} else {\n  return \"\";\n}\n\nif (!sender) {\n  return \"\";\n}\n\nconst exactInputAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInputSingle\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"refundETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountMinimum\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: selectedDex === \"Agni Finance\" ? \"unwrapWMNT\" : \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst swapAmountAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_factory\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_weth\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"WETH9\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"factory\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenX\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenY\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint24\",\n        name: \"fee\",\n        type: \"uint24\",\n      },\n    ],\n    name: \"pool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"refundETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapAmountParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cost\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"acquire\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"desire\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapDesireParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapDesire\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cost\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"acquire\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapX2Y\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"swapX2YCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapX2YDesireY\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapY2X\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"swapY2XCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapY2XDesireX\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"sweepToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"minAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\n\nconst selectedDexItem = config.dapps.find((dapp) => dapp.name === selectedDex);\n\nconst signer = Ethers.provider().getSigner();\n\nconst callSwap = (fee) => {\n  const value = expandToken(amountIn, tokenIn.decimals).toFixed();\n  const abi = exactInputAbi;\n\n  const iface = new ethers.utils.Interface(abi);\n  const deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\n  const tokenInAddress =\n    tokenIn.symbol === config.NATIVE_TOKEN_SYMBOL\n      ? config.WRAP_NATIVE_TOKEN_ADDRESS\n      : tokenIn.address;\n\n  const options = {\n    gasPrice: ethers.utils.parseUnits(gasPrice ?? \"10\", \"gwei\"),\n    gasLimit: gasLimit ?? 300000,\n    value: tokenIn.symbol === config.NATIVE_TOKEN_SYMBOL ? value : \"0\",\n  };\n\n  const tokenOutAddress =\n    tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL\n      ? config.WRAP_NATIVE_TOKEN_ADDRESS\n      : tokenOut.address;\n\n  const inputs = [\n    {\n      tokenIn: tokenInAddress,\n      tokenOut: tokenOutAddress,\n      fee: fee,\n      recipient:\n        tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL\n          ? tokenOut.address\n          : sender,\n      deadline: deadline.toFixed(),\n      amountIn: ethers.utils.parseUnits(amountIn, tokenIn.decimals),\n      amountOutMinimum: \"0\",\n      sqrtPriceLimitX96: \"0\",\n    },\n  ];\n\n  const multicallParams = [];\n\n  const encodedDataCallSwap = iface.encodeFunctionData(\n    \"exactInputSingle\",\n    inputs\n  );\n\n  multicallParams.push(encodedDataCallSwap);\n\n  if (\n    tokenIn.symbol === config.NATIVE_TOKEN_SYMBOL &&\n    selectedDex !== \"Agni Finance\"\n  ) {\n    multicallParams.push(iface.encodeFunctionData(\"refundETH\", []));\n  }\n\n  if (tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL) {\n    multicallParams.push(\n      iface.encodeFunctionData(\n        selectedDex === \"Agni Finance\" ? \"unwrapWMNT\" : \"unwrapWETH9\",\n        [\"0\", sender]\n      )\n    );\n  }\n\n  const multicallContract = new ethers.Contract(\n    selectedDexItem.swapRouter,\n    abi,\n    signer\n  );\n\n  multicallContract\n    .multicall(multicallParams, options)\n    .then((tx) => {\n      tx.wait().then((receipt) => {\n        const { status, transactionHash } = receipt;\n        console.log(\"transactionHash: \", transactionHash);\n        onSwapCallBack();\n      });\n    })\n    .catch(() => {});\n};\n\nconst callSwapIzi = (fee) => {\n  const deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\n  const abi = swapAmountAbi;\n\n  const iface = new ethers.utils.Interface(abi);\n\n  const tokenInAddress =\n    tokenIn.symbol === config.NATIVE_TOKEN_SYMBOL\n      ? config.WRAP_NATIVE_TOKEN_ADDRESS\n      : tokenIn.address;\n\n  const tokenOutAddress =\n    tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL\n      ? config.WRAP_NATIVE_TOKEN_ADDRESS\n      : tokenOut.address;\n\n  const isX2Y = tokenInAddress.toLowerCase() < tokenOutAddress.toLowerCase();\n  const boundaryPt = isX2Y ? -799999 : 799999;\n\n  const multicallParams = [];\n\n  const parsedAmountIn = ethers.utils.parseUnits(amountIn, tokenIn.decimals);\n\n  const options = {\n    from: sender,\n    value: \"0\",\n  };\n\n  if (tokenIn.symbol === config.NATIVE_TOKEN_SYMBOL) {\n    options.value = parsedAmountIn;\n  }\n\n  if (isX2Y) {\n    const inputs = [\n      {\n        tokenX: tokenInAddress,\n        tokenY: tokenOutAddress,\n        fee: fee,\n        boundaryPt: boundaryPt,\n        recipient:\n          tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL\n            ? tokenOut.address\n            : sender,\n        amount: ethers.utils.parseUnits(amountIn, tokenIn.decimals),\n        maxPayed: \"0\",\n        minAcquired: \"0\",\n        deadline: deadline.toFixed(),\n      },\n    ];\n    const encodedDataCallSwap = iface.encodeFunctionData(\"swapX2Y\", inputs);\n\n    multicallParams.push(encodedDataCallSwap);\n  } else {\n    const inputs = [\n      {\n        tokenX: tokenOutAddress,\n        tokenY: tokenInAddress,\n        fee: fee,\n        boundaryPt: boundaryPt,\n        recipient:\n          tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL\n            ? tokenOut.address\n            : sender,\n        amount: ethers.utils.parseUnits(amountIn, tokenIn.decimals),\n        maxPayed: \"0\",\n        minAcquired: \"0\",\n        deadline: deadline.toFixed(),\n      },\n    ];\n    const encodedDataCallSwap = iface.encodeFunctionData(\"swapY2X\", inputs);\n\n    multicallParams.push(encodedDataCallSwap);\n  }\n\n  if (tokenIn.symbol === config.NATIVE_TOKEN_SYMBOL) {\n    multicallParams.push(iface.encodeFunctionData(\"refundETH\", []));\n  }\n\n  if (tokenOut.symbol === config.NATIVE_TOKEN_SYMBOL) {\n    multicallParams.push(\n      iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", sender])\n    );\n  }\n\n  const multicallContract = new ethers.Contract(\n    selectedDexItem.swapRouter,\n    abi,\n    signer\n  );\n\n  const multicallData = iface.encodeFunctionData(\"multicall\", [\n    multicallParams,\n  ]);\n\n  console.log(\"multicallData: \", multicallParams, multicallData);\n\n  const txdata = {\n    ...options,\n    to: selectedDexItem.swapRouter,\n    from: sender,\n    data: multicallData,\n  };\n\n  // return Ethers.provider().getSigner().sendTransaction(txdata);\n\n  multicallContract\n    .multicall(multicallParams, options)\n    .then((tx) => {\n      tx.wait().then((receipt) => {\n        const { status, transactionHash } = receipt;\n        onSwapCallBack();\n      });\n    })\n    .catch(() => {});\n};\n\nif (Number(amountIn) > 0 && onLoadSwapCall) {\n  if (selectedDex === \"iZiSwap\") {\n    onLoadSwapCall({ callSwap: callSwapIzi });\n  } else {\n    onLoadSwapCall({ callSwap });\n  }\n}\n\nreturn <div></div>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Mantle.SwapCaller", "fact_widget_deployments_id": "43ea8ab35c4522423e8b25d9825699a5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}