{"tx_hash": "4hiYYpAdeL2Won9bYEwtVM2FfSqeiw14gDm2VsP6Vh5p", "action_id_social": "7aea7oM22L5C21TXs366CEpiwR56V53BS6NrHyDSpDdP-0-widget", "block_id": 115010053, "block_timestamp": "2024-03-19T08:01:59.499Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.Mute", "source_code": "const ROUTER_ABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n    ],\n    name: \"getAmountsOutExpanded\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n      { internalType: \"bool[]\", name: \"stable\", type: \"bool[]\" },\n      { internalType: \"uint256[]\", name: \"fees\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"bool[]\", name: \"stable\", type: \"bool[]\" },\n    ],\n    name: \"swapExactTokensForTokens\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"bool[]\", name: \"stable\", type: \"bool[]\" },\n    ],\n    name: \"swapExactETHForTokens\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"bool[]\", name: \"stable\", type: \"bool[]\" },\n    ],\n    name: \"swapExactTokensForETH\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"tokenA\", type: \"address\" },\n      { internalType: \"address\", name: \"tokenB\", type: \"address\" },\n      { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n    ],\n    name: \"getReserves\",\n    outputs: [\n      { internalType: \"uint256\", name: \"reserveA\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"reserveB\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.address === \"native\" && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress &&\n        outputCurrency.address === \"native\"\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.isNative ? wethAddress : inputCurrency.address,\n    outputCurrency.isNative ? wethAddress : outputCurrency.address,\n  ];\n\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    ROUTER_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const getAmountOut = () => {\n    RouterContract.getAmountsOutExpanded(amount, path)\n      .then((res) => {\n        const _amount = Big(\n          ethers.utils.formatUnits(res[0][1], outputCurrency.decimals)\n        );\n        if (_amount.gt(0)) {\n          getTransaction({\n            amountoutDesimals: _amount.toString(),\n            amountOut: res[0][1],\n            stable: res[1],\n          });\n        } else {\n          onLoad({\n            noPair: true,\n            outputCurrencyAmount: \"\",\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n          outputCurrencyAmount: \"\",\n        });\n      });\n  };\n\n  const getTransaction = ({ amountOut, amountoutDesimals, stable }) => {\n    let method = \"\";\n    const deadline = Math.ceil(Date.now() / 1000) + 120;\n    const _amountOut = Big(amountOut)\n      .mul(1 - (slippage || 0.05))\n      .toFixed(0);\n\n    let priceImpact = null;\n\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(amountoutDesimals).div(inputCurrencyAmount);\n\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n\n    const options = {};\n    const params = [_amountOut, path, account, deadline, stable];\n    if (inputCurrency.isNative) {\n      method = \"swapExactETHForTokens\";\n      options.value = amount;\n    } else if (outputCurrency.isNative) {\n      method = \"swapExactTokensForETH\";\n      params.unshift(amount);\n    } else {\n      method = \"swapExactTokensForTokens\";\n      params.unshift(amount);\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(amountoutDesimals).gt(0.01)\n        ? Big(amountoutDesimals).toPrecision(10)\n        : Big(amountoutDesimals).toFixed(10),\n      priceImpact,\n    };\n    const createTx = (gasLimit) => {\n      RouterContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: gasLimit || 500000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: gasLimit,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: gasLimit,\n          });\n        });\n    };\n    RouterContract.estimateGas[method](...params, options)\n      .then((_gas) => {\n        createTx(_gas);\n      })\n      .catch((err) => {\n        onLoad({\n          ...returnData,\n          noPair: false,\n        });\n      });\n  };\n\n  getAmountOut();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.Mute", "fact_widget_deployments_id": "8f8af464bc2bd7dc1be791d6021bb2b9", "inserted_timestamp": "2024-03-19T09:34:29.241Z", "modified_timestamp": "2024-03-19T09:34:29.241Z", "__row_index": 0}