{"tx_hash": "AgFybVHmTjffo1V2TWW3c3fPiGFhn3i5JXamiW3PD6GV", "action_id_social": "4goAATbfcLYe73juU9MbJaBN5cCkY4q3c3yFuAWwDmYH-0-widget", "block_id": 111108080, "block_timestamp": "2024-01-23T09:51:50.160Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.TenderFinance", "source_code": "const OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liquidationThresholdMantissa\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissaVip\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liquidationThresholdMantissaVip\",\n        type: \"uint256\",\n      },\n      { internalType: \"bool\", name: \"isComped\", type: \"bool\" },\n      { internalType: \"bool\", name: \"isPrivate\", type: \"bool\" },\n      {\n        internalType: \"bool\",\n        name: \"onlyWhitelistedBorrow\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"compSupplySpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"compBorrowSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"compAccrued\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  lensAddress,\n  oracleAddress,\n  account,\n  update,\n  dapp,\n  onLoad,\n  markets,\n  multicall,\n} = props;\n\nif (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\n\nlet _cTokensData = {};\nlet _loanToValue = null;\nlet _underlyPrice = {};\nlet _liquidity = null;\nlet _underlyingBalance = null;\nlet _userMerberShip = null;\nlet _rewards = {};\nlet _accountRewards = {};\nlet count = 0;\nlet oTokensLength = Object.values(markets).length;\n\nconst formatedData = (key) => {\n  console.log(`${dapp}-${key}`, count);\n  if (count < 5) return;\n  count = 0;\n  oTokensLength = Object.values(markets).length;\n  let totalSupplyUsd = Big(0);\n  let totalBorrowUsd = Big(0);\n  let userTotalSupplyUsd = Big(0);\n  let userTotalBorrowUsd = Big(0);\n  let totalCollateralUsd = Big(0);\n\n  const markets = {};\n  Object.values(_cTokensData).forEach((market) => {\n    const underlyingPrice = _underlyPrice[market.address] || 1;\n    const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n    const marketBorrowUsd = Big(market.totalBorrows || 0).mul(underlyingPrice);\n    totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n    totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n    userTotalSupplyUsd = userTotalSupplyUsd.plus(\n      Big(market.userSupply).mul(underlyingPrice)\n    );\n    userTotalBorrowUsd = userTotalBorrowUsd.plus(\n      Big(market.userBorrow).mul(underlyingPrice)\n    );\n    if (_userMerberShip[market.address]) {\n      totalCollateralUsd = totalCollateralUsd.plus(\n        Big(market.userSupply)\n          .mul(underlyingPrice)\n          .mul(_loanToValue[market.address])\n          .div(100)\n      );\n    }\n\n    const supplyApy = Big(market.supplyRatePerBlock)\n      .mul(4 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      .mul(100 * 1.2559808612440193);\n\n    const borrowApy = Big(market.borrowRatePerBlock)\n      .mul(4 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      .mul(100 * 1.2559808612440193);\n\n    markets[market.address] = {\n      ...market,\n      loanToValue: _loanToValue[market.address],\n      liquidity: _liquidity[market.address],\n      underlyingPrice: underlyingPrice,\n      userUnderlyingBalance: _underlyingBalance[market.address],\n      userMerberShip: _userMerberShip[market.address],\n      supplyApy: supplyApy.toFixed(2) + \"%\",\n      borrowApy: borrowApy.toFixed(2) + \"%\",\n      distributionApy: [],\n      dapp,\n    };\n  });\n\n  onLoad({\n    markets,\n    rewards: [],\n    totalSupplyUsd: totalSupplyUsd.toString(),\n    totalBorrowUsd: totalBorrowUsd.toString(),\n    userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n    userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n    totalCollateralUsd: totalCollateralUsd.toString(),\n  });\n};\nconst getUnitrollerData = () => {\n  const calls = [];\n  const oTokens = Object.values(markets);\n  oTokens.forEach((token) => {\n    calls.push({\n      address: unitrollerAddress,\n      name: \"markets\",\n      params: [token.address],\n    });\n    calls.push({\n      address: unitrollerAddress,\n      name: \"checkMembership\",\n      params: [account, token.address],\n    });\n  });\n  calls.push({\n    address: unitrollerAddress,\n    name: \"compAccrued\",\n    params: [account],\n  });\n  multicall({\n    abi: UNITROLLER_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      _loanToValue = {};\n      _userMerberShip = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        if (i === res.length - 1) {\n          _accountRewards.reward = res[i][0]\n            ? ethers.utils.formatUnits(res[i][0]._hex, 18)\n            : \"0\";\n          count++;\n          formatedData(\"getUnitrollerData\");\n          return;\n        }\n        const index = Math.floor(i / (account ? 2 : 1));\n        const mod = i % (account ? 2 : 1);\n        switch (mod) {\n          case 0:\n            _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n              res[i][1]._hex,\n              16\n            );\n            break;\n          case 1:\n            _userMerberShip[oTokens[index].address] = res[i][0];\n            break;\n          default:\n        }\n      }\n    })\n    .catch((err) => {\n      console.log(\"error-getUnitrollerData\", err);\n      setTimeout(() => {\n        getUnitrollerData();\n      }, 1000);\n    });\n};\nconst getUnderlyPrice = () => {\n  if (!oracleAddress) return;\n  const oTokens = Object.keys(markets);\n  const calls = oTokens.map((token) => ({\n    address: oracleAddress,\n    name: \"getUnderlyingPrice\",\n    params: [token],\n  }));\n  multicall({\n    abi: ORACLE_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      _underlyPrice = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          36 - markets[oTokens[i]].underlyingToken.decimals\n        );\n      }\n      count++;\n      formatedData(\"getUnderlyPrice\");\n    })\n    .catch((err) => {\n      console.log(\"error-getUnderlyPrice\", err);\n    });\n};\nconst getOTokenLiquidity = () => {\n  const assets = Object.values(markets);\n  let nativeOToken = \"\";\n  const calls = assets\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      address: market.underlyingToken.address,\n      name: \"balanceOf\",\n      params: [market.address],\n    }));\n  multicall({\n    abi: ERC20_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      _liquidity = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const oToken = markets[calls[i].params[0]];\n        _liquidity[oToken.address] = res[i][0]\n          ? ethers.utils.formatUnits(\n              res[i][0]._hex,\n              oToken.underlyingToken.decimals\n            )\n          : \"0\";\n      }\n      const provider = Ethers.provider();\n      if (nativeOToken) {\n        provider.getBalance(nativeOToken).then((rawBalance) => {\n          _liquidity[nativeOToken] = rawBalance\n            ? ethers.utils.formatUnits(rawBalance._hex, 18)\n            : 0;\n          count++;\n          formatedData(\"getOTokenLiquidity\");\n        });\n      } else {\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      }\n    })\n    .catch(() => {\n      setTimeout(() => {\n        getOTokenLiquidity();\n      }, 500);\n    });\n};\nconst getWalletBalance = () => {\n  let nativeOToken = \"\";\n  const underlyingTokens = Object.values(markets)\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n  const calls = underlyingTokens.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n  multicall({\n    abi: ERC20_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      _underlyingBalance = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyingBalance[underlyingTokens[i].oTokenAddress] = res[i][0]\n          ? ethers.utils.formatUnits(\n              res[i][0]._hex,\n              underlyingTokens[i].decimals\n            )\n          : \"0\";\n      }\n      const provider = Ethers.provider();\n      if (nativeOToken) {\n        provider.getBalance(account).then((rawBalance) => {\n          _underlyingBalance[nativeOToken] = rawBalance\n            ? ethers.utils.formatUnits(rawBalance._hex, 18)\n            : \"0\";\n          count++;\n          formatedData(\"getWalletBalance\");\n        });\n      } else {\n        count++;\n        formatedData(\"getWalletBalance\");\n      }\n    })\n    .catch((err) => {\n      console.log(\"getWalletBalance error\", err);\n      setTimeout(() => {\n        getWalletBalance();\n      }, 500);\n    });\n};\nconst getCTokenData = (oToken) => {\n  if (oTokensLength === 0) return;\n  const calls = [\n    {\n      address: oToken.address,\n      name: \"exchangeRateCurrent\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalSupply\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalBorrows\",\n    },\n    {\n      address: oToken.address,\n      name: \"supplyRatePerBlock\",\n    },\n    {\n      address: oToken.address,\n      name: \"borrowRatePerBlock\",\n    },\n    {\n      address: oToken.address,\n      name: \"getAccountSnapshot\",\n      params: [account],\n    },\n  ];\n  multicall({\n    abi: OTOKEN_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      oTokensLength--;\n      const exchangeRateStored = ethers.utils.formatUnits(\n        res[0][0]._hex,\n        10 + oToken.underlyingToken.decimals\n      );\n      const userSupply = ethers.utils.formatUnits(\n        res[5][1]._hex,\n        oToken.decimals\n      );\n      const totalSupply = ethers.utils.formatUnits(\n        res[1][0]._hex,\n        oToken.decimals\n      );\n      _cTokensData[oToken.address] = {\n        ...oToken,\n        exchangeRateStored,\n        totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n        totalBorrows: ethers.utils.formatUnits(\n          res[2][0]._hex,\n          oToken.underlyingToken.decimals\n        ),\n        supplyRatePerBlock: ethers.utils.formatUnits(res[3][0]._hex, 18),\n        borrowRatePerBlock: ethers.utils.formatUnits(res[4][0]._hex, 18),\n        userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n        userBorrow: ethers.utils.formatUnits(\n          res[5][2]._hex,\n          oToken.underlyingToken.decimals\n        ),\n      };\n      if (oTokensLength === 0) {\n        count++;\n        formatedData(\"oTokens data\");\n      }\n    })\n    .catch(() => {\n      setTimeout(() => {\n        getCTokenData(oToken);\n      }, 500);\n    });\n};\n\nconst getCTokensData = () => {\n  Object.values(markets).forEach((market) => {\n    getCTokenData(market);\n  });\n};\n\nconst getCTokenReward = ({ price, cTokens, index }) => {\n  const token = cTokens[index];\n  const calls = [\n    {\n      address: unitrollerAddress,\n      name: \"compBorrowSpeeds\",\n      params: [token],\n    },\n    {\n      address: unitrollerAddress,\n      name: \"compSupplySpeeds\",\n      params: [token],\n    },\n  ];\n  multicall({\n    abi: UNITROLLER_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      const borrow = res[0][0]\n        ? Big(ethers.utils.formatUnits(res[0][0]._hex, 18)).mul(price)\n        : Big(0);\n      const supply = res[1][0]\n        ? Big(ethers.utils.formatUnits(res[1][0]._hex, 18)).mul(price)\n        : Big(0);\n      _rewards[token] = {\n        borrow: borrow.mul(60 * 60 * 24 * 365),\n        supply: supply.mul(60 * 60 * 24 * 365),\n      };\n      if (index === cTokens.length - 1) {\n        count++;\n        formatedData(\"rewards\");\n      } else {\n        getCTokenReward({\n          price,\n          cTokens,\n          index: index + 1,\n        });\n      }\n    })\n    .catch((err) => {\n      console.log(\"error-rewards\", err);\n    });\n};\n\nuseEffect(() => {\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n}, []);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.TenderFinance", "fact_widget_deployments_id": "58ab3ee96cd943b8a5764afef0da1671", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}