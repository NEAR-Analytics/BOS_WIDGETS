{"tx_hash": "4cYsdYEopDXM6PrDMuPisVJ3ewo7TvEPLpeXd8rtKCgD", "action_id_social": "Ctp2iAwrsicSxC7c4WbsMRFzLDiG3ithwR1NGWvxmuvc-0-widget", "block_id": 102379672, "block_timestamp": "2023-10-01T14:41:47.206Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Lending.RadiantHandlerCollateral", "source_code": "const abi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"bool\", name: \"useAsCollateral\", type: \"bool\" },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst {\n  actionText,\n  loading,\n  unitrollerAddress,\n  marketAddress,\n  onSuccess,\n  onError,\n  data,\n} = props;\n\nif (!loading) return \"\";\n\nconst isEnter = actionText === \"Enable as Collateral\";\n\nconst CollateralContract = new ethers.Contract(\n  data.lendingPoolAddress,\n  abi,\n  Ethers.provider().getSigner()\n);\n\nCollateralContract.setUserUseReserveAsCollateral(\n  data.underlyingAsset.address,\n  isEnter\n)\n  .then((tx) => {\n    tx.wait().then((res) => {\n      onSuccess(res);\n    });\n  })\n  .catch(() => {\n    onError();\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Lending.RadiantHandlerCollateral", "fact_widget_deployments_id": "dbd9423c5eca37151715969d8472e479", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}