{"tx_hash": "9uesvvxyvbfcyNzZ1xBdoVBtQWQ7kgZqMQnYYso8Yvno", "action_id_social": "ErWXTAHUqD81nVsYpPYs6fNHanNuzhrt3fbPzYssvD7m-0-widget", "block_id": 104673065, "block_timestamp": "2023-11-01T08:19:56.879Z", "signer_id": "bluebiu.near", "widget_name": "Base.Bridge.HandlerSwap", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n} = props;\nif (!loading) return \"\";\nconst QuoteRouterContract = new ethers.Contract(\n  routerAddress,\n  [\n    {\n      inputs: [\n        { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n        { internalType: \"uint8\", name: \"_functionType\", type: \"uint8\" },\n        { internalType: \"bytes\", name: \"_toAddress\", type: \"bytes\" },\n        {\n          internalType: \"bytes\",\n          name: \"_transferAndCallPayload\",\n          type: \"bytes\",\n        },\n        {\n          components: [\n            {\n              internalType: \"uint256\",\n              name: \"dstGasForCall\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"dstNativeAmount\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"bytes\",\n              name: \"dstNativeAddr\",\n              type: \"bytes\",\n            },\n          ],\n          internalType: \"struct IStargateRouter.lzTxObj\",\n          name: \"_lzTxParams\",\n          type: \"tuple\",\n        },\n      ],\n      name: \"quoteLayerZeroFee\",\n      outputs: [\n        { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\nQuoteRouterContract.quoteLayerZeroFee(target.dstId, 1, target.address, \"0x\", {\n  dstGasForCall: 0,\n  dstNativeAmount: 0,\n  dstNativeAddr: \"0x0000000000000000000000000000000000000001\",\n})\n  .then((quoteRes) => {\n    const _amount = ethers.utils.parseUnits(\n      Big(amount).toFixed(currency.decimals).toString(),\n      currency.decimals\n    );\n    const RouterContract = currency.isNative\n      ? new ethers.Contract(\n          routerEthAddress,\n          [\n            {\n              inputs: [\n                {\n                  internalType: \"uint16\",\n                  name: \"_dstChainId\",\n                  type: \"uint16\",\n                },\n                {\n                  internalType: \"address payable\",\n                  name: \"_refundAddress\",\n                  type: \"address\",\n                },\n                { internalType: \"bytes\", name: \"_toAddress\", type: \"bytes\" },\n                {\n                  internalType: \"uint256\",\n                  name: \"_amountLD\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_minAmountLD\",\n                  type: \"uint256\",\n                },\n              ],\n              name: \"swapETH\",\n              outputs: [],\n              stateMutability: \"payable\",\n              type: \"function\",\n            },\n          ],\n          Ethers.provider().getSigner()\n        )\n      : new ethers.Contract(\n          routerAddress,\n          [\n            {\n              inputs: [\n                {\n                  internalType: \"uint16\",\n                  name: \"_dstChainId\",\n                  type: \"uint16\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_srcPoolId\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_dstPoolId\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"address payable\",\n                  name: \"_refundAddress\",\n                  type: \"address\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_amountLD\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_minAmountLD\",\n                  type: \"uint256\",\n                },\n                {\n                  components: [\n                    {\n                      internalType: \"uint256\",\n                      name: \"dstGasForCall\",\n                      type: \"uint256\",\n                    },\n                    {\n                      internalType: \"uint256\",\n                      name: \"dstNativeAmount\",\n                      type: \"uint256\",\n                    },\n                    {\n                      internalType: \"bytes\",\n                      name: \"dstNativeAddr\",\n                      type: \"bytes\",\n                    },\n                  ],\n                  internalType: \"struct IStargateRouter.lzTxObj\",\n                  name: \"_lzTxParams\",\n                  type: \"tuple\",\n                },\n                { internalType: \"bytes\", name: \"_to\", type: \"bytes\" },\n                { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n              ],\n              name: \"swap\",\n              outputs: [],\n              stateMutability: \"payable\",\n              type: \"function\",\n            },\n          ],\n          Ethers.provider().getSigner()\n        );\n    const method = currency.isNative ? \"swapETH\" : \"swap\";\n    const minAmount = ethers.utils.parseUnits(\n      Big(amount || 0)\n        .mul(0.995)\n        .toFixed(currency.decimals),\n      currency.decimals\n    );\n    const params = currency.isNative\n      ? [\n          target.dstId,\n          account,\n          account,\n          _amount.toString(),\n          minAmount.toString(),\n          {\n            value: Big(quoteRes[0].toString())\n              .add(_amount.toString())\n              .toString(),\n          },\n        ]\n      : [\n          target.dstId,\n          currency.poolId,\n          target.poolId,\n          account,\n          _amount,\n          minAmount,\n          { dstGasForCall: 0, dstNativeAmount: 0, dstNativeAddr: \"0x\" },\n          account,\n          \"0x\",\n          { value: quoteRes[0] },\n        ];\n    RouterContract[method](...params)\n      .then((tx) => {\n        tx.wait().then((res) => {\n          onSuccess(res);\n        });\n      })\n      .catch((err) => {\n        onError();\n      });\n  })\n  .catch((err) => {\n    onError();\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.Bridge.HandlerSwap", "fact_widget_deployments_id": "ca5dc3077b56c32f0f045365dfce76b0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}