{"tx_hash": "Am12N9dQwP49YzjvQBmmFQ5WEr1S56CtU85vS5bHpain", "action_id_social": "DZMUczn46cbkbR6dfJQ7TtKoip3q4aJAJ3Sji3kNijwv-0-widget", "block_id": 119325600, "block_timestamp": "2024-05-20T06:25:41.853Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Liquity.AdjustButton", "source_code": "const ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst Button = styled.button`\n  background-color: var(--switch-color);\n  height: 46px;\n  line-height: 46px;\n  border-radius: 10px;\n  color: var(--button-text-color);\n  font-size: 18px;\n  font-weight: 500;\n  border: none;\n  width: 100%;\n  transition: 0.5s;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n  &.borrow {\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.repay {\n    background-color: var(--repay-bg-hover-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.close {\n    width: 408px;\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n`;\n\nconst {\n  actionText,\n  _assetAmount,\n  data,\n  chainId,\n  onSuccess,\n  toast,\n  addAction,\n  unsignedTx,\n  loading: estimating,\n  gas,\n  _debtTokenAmount,\n  onApprovedSuccess,\n\n  isDebtBigerThanBalance,\n  yourLTV,\n  _maxFeePercentage,\n  IS_ETHOS_DAPP,\n  IS_PREON_DAPP,\n  IS_GRAVITA_DAPP,\n  IS_LYVE_DAPP,\n} = props;\n\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst tokenSymbol = data.underlyingToken.symbol;\nif (!actionText) return;\n\nuseEffect(() => {\n  State.update({\n    approving: false,\n    isApproved: false,\n    isGasEnough: true,\n  });\n}, []);\n\n// useEffect(() => {\n//   if (!account || !gas) return;\n//   const provider = Ethers.provider();\n//   provider.getBalance(account).then((rawBalance) => {\n//     State.update({\n//       gasBalance: rawBalance.toString(),\n//       isGasEnough: !Big(rawBalance.toString()).lt(gas.toString()),\n//       gas: ethers.utils.formatUnits(gas, 18),\n//     });\n//   });\n// }, [account, gas]);\n\nif (!_assetAmount && !_debtTokenAmount) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Enter An Amount\n    </Button>\n  );\n}\n\nif (isDebtBigerThanBalance) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Insufficient Balance\n    </Button>\n  );\n}\n\n// if (Big(_debtTokenAmount || 0).lt(data[\"MIN_DEBT\"])) {\n//   return (\n//     <Button disabled={true} className={actionText.toLowerCase()}>\n//       A minimum of {data[\"MIN_DEBT\"]} {data.BORROW_TOKEN}\n//     </Button>\n//   );\n// }\n\nif (Big(yourLTV || 0).gt(Big(data.MAX_LTV).mul(100))) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      LTV must be below {Big(data.MAX_LTV).mul(100).toFixed()}%\n    </Button>\n  );\n}\n\nconst tokenAddr = data.underlyingToken.address;\nconst spender = data.config.BorrowerOperations;\n\nconsole.log(\"APPROVE: \", tokenAddr, spender, props);\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    tokenAddr,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, spender).then((allowanceRaw) => {\n    console.log(\"ALLOWANCE:\", allowanceRaw.toString());\n    State.update({\n      isApproved: !Big(\n        ethers.utils.formatUnits(\n          allowanceRaw._hex,\n          data.underlyingToken.decimals\n        )\n      ).lt(Big(_assetAmount || 0)),\n    });\n  });\n};\n\ngetAllowance();\n\nif (!state.isApproved) {\n  const handleApprove = () => {\n    const toastId = toast?.loading({\n      title: `Approve ${Big(_assetAmount).toFixed(2)} ${tokenSymbol}`,\n    });\n    State.update({\n      approving: true,\n    });\n\n    const TokenContract = new ethers.Contract(\n      tokenAddr,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(\n      spender,\n      ethers.utils.parseUnits(_assetAmount, data.underlyingToken.decimals)\n    )\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              isApproved: true,\n              approving: false,\n            });\n            toast?.success({\n              title: \"Approve Successfully!\",\n              text: `Approve ${Big(_assetAmount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n            onApprovedSuccess();\n          })\n          .catch((err) => {\n            State.update({\n              isApproved: false,\n              approving: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approve ${Big(_assetAmount).toFixed(2)} ${tokenSymbol}`,\n        });\n        onLoad?.(false);\n      });\n  };\n  return (\n    <Button onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Approve\"\n      )}\n    </Button>\n  );\n}\n\nfunction makeAdjustContract() {\n  const _asset = data.underlyingToken.address;\n  const _assetSent = _assetAmount ? ethers.utils.parseUnits(_assetAmount) : 0;\n  const _collWithdrawal = 0;\n  const _debtTokenChange = _debtTokenAmount\n    ? ethers.utils.parseUnits(_debtTokenAmount)\n    : 0;\n  const _isDebtIncrease = Big(_debtTokenAmount || 0).gt(0);\n  let _upperHint;\n  let _lowerHint;\n\n  let params;\n  let abi;\n  if (IS_GRAVITA_DAPP || IS_PREON_DAPP || IS_LYVE_DAPP) {\n    _upperHint = \"0xA1B7bbade134DB3B14B56056480e81c60Ab77377\";\n    _lowerHint = \"0x0000000000000000000000000000000000000000\";\n    abi = [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"_asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"_assetSent\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"_collWithdrawal\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"_debtTokenChange\",\n            type: \"uint256\",\n          },\n          { internalType: \"bool\", name: \"_isDebtIncrease\", type: \"bool\" },\n          { internalType: \"address\", name: \"_upperHint\", type: \"address\" },\n          { internalType: \"address\", name: \"_lowerHint\", type: \"address\" },\n        ],\n        name: \"adjustVessel\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ];\n    params = [\n      _asset,\n      _assetSent,\n      _collWithdrawal,\n      _debtTokenChange,\n      _isDebtIncrease,\n      _upperHint,\n      _lowerHint,\n    ];\n    return new ethers.Contract(\n      data.config.BorrowerOperations,\n      abi,\n      Ethers.provider().getSigner()\n    ).adjustVessel(...params, {\n      gasLimit: 700000,\n    });\n  }\n  if (IS_ETHOS_DAPP) {\n    _upperHint = account;\n    _lowerHint = account;\n    abi = [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"_collateral\", type: \"address\" },\n          {\n            internalType: \"uint256\",\n            name: \"_maxFeePercentage\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"_collTopUp\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"_collWithdrawal\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"_LUSDChange\", type: \"uint256\" },\n          { internalType: \"bool\", name: \"_isDebtIncrease\", type: \"bool\" },\n          { internalType: \"address\", name: \"_upperHint\", type: \"address\" },\n          { internalType: \"address\", name: \"_lowerHint\", type: \"address\" },\n        ],\n        name: \"adjustTrove\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ];\n    params = [\n      _asset,\n      _maxFeePercentage,\n      _assetSent,\n      _collWithdrawal,\n      _debtTokenChange,\n      _isDebtIncrease,\n      _upperHint,\n      _lowerHint,\n    ];\n    console.log(33333, params);\n    return new ethers.Contract(\n      data.config.BorrowerOperations,\n      abi,\n      Ethers.provider().getSigner()\n    ).adjustTrove(...params, {\n      gasLimit: 700000,\n    });\n  }\n}\n\nfunction handleAdjust() {\n  State.update({\n    pending: true,\n  });\n\n  makeAdjustContract()\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          State.update({\n            pending: false,\n          });\n\n          if (status === 1) {\n            onSuccess?.(data.dapp);\n            toast?.success({\n              title: `${tokenSymbol} ${actionText.toLowerCase()} request successed!`,\n              tx: transactionHash,\n              chainId,\n            });\n          } else {\n            toast?.fail({\n              title: `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n              tx: transactionHash,\n              chainId,\n            });\n          }\n        })\n        .catch((err) => {\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(\"handleAdjust_error:\", err);\n      State.update({\n        pending: false,\n      });\n\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n        tx: err ? err.hash : \"\",\n        chainId,\n      });\n    });\n}\n\nreturn (\n  <Button\n    disabled={state.pending || estimating || !state.isGasEnough}\n    className={actionText.toLowerCase()}\n    onClick={handleAdjust}\n  >\n    {state.pending || estimating ? (\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    ) : !state.isGasEnough ? (\n      `Not enough gas(${Big(state.gas || 0).toFixed(2)}) needed`\n    ) : (\n      actionText\n    )}\n  </Button>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Liquity.AdjustButton", "fact_widget_deployments_id": "14e210b6f0f6d5e260d45312fdb28ac2", "inserted_timestamp": "2024-05-20T07:51:07.344Z", "modified_timestamp": "2024-05-20T07:51:07.344Z", "__row_index": 0}