{"tx_hash": "HTgJKHGqDK5SGQWSTMZg89x7qPzExwiLSHETFneGbPzA", "action_id_social": "3CqmhJTe3kQBYcg4sb636zym6AKMW4seqGNZthgpAHwc-0-widget", "block_id": 115972792, "block_timestamp": "2024-04-02T08:53:42.771Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.Gamma", "source_code": "\nconst {\n  pairs,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  LAST_SNAP_SHOT_DATA_URL,\n  prices\n} = props\n\nlet loading = false\nlet dataList = []\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardRate\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"globalState\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint160\",\n        \"name\": \"price\",\n        \"type\": \"uint160\"\n      },\n      {\n        \"internalType\": \"int24\",\n        \"name\": \"tick\",\n        \"type\": \"int24\"\n      },\n      {\n        \"internalType\": \"uint16\",\n        \"name\": \"fee\",\n        \"type\": \"uint16\"\n      },\n      {\n        \"internalType\": \"uint16\",\n        \"name\": \"timepointIndex\",\n        \"type\": \"uint16\"\n      },\n      {\n        \"internalType\": \"uint16\",\n        \"name\": \"communityFeeToken0\",\n        \"type\": \"uint16\"\n      },\n      {\n        \"internalType\": \"uint16\",\n        \"name\": \"communityFeeToken1\",\n        \"type\": \"uint16\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"unlocked\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nconst fetchFusionsData = () => {\n  asyncFetch(\"https://api.lynex.fi/api/v1/fusions\").then((res) => {\n    if (!res.ok) return;\n    State.update({\n      fusionsData: res?.body?.data,\n    });\n  });\n}\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\nfunction formatedData() {\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    const vaultAddress = addresses[pair.id]\n    const data = allData[vaultAddress]\n    dataList.push({\n      ...data,\n      ...pair,\n      vaultAddress,\n    })\n  })\n  formatedData('dataList')\n}\n\nfunction getLiquidity() {\n  const calls = [];\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  dataList.forEach(data => {\n    calls.push({\n      address: data.vaultAddress,\n      name: \"balanceOf\",\n      params: [sender],\n    });\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      for (let i = 0, len = res.length; i < len; i++) {\n        if (res[i]) {\n          dataList[i].liquidity = Big(ethers.utils.formatUnits(res[i][0]._hex)).toFixed(2)\n        }\n      }\n      formatedData('getLiquidity')\n    },\n    (error) => {\n      setTimeout(() => {\n        getLiquidity();\n      }, 500);\n    }\n  )\n}\nfunction getTotalApr() {\n  const chain_id = curChain.chain_id\n  if ([8453, 10, 1101, 5000].includes(chain_id)) {\n    dataList = dataList.map(data => {\n      data.totalApr = formatPercent(data.returns.weekly.feeApr)\n      return data\n    })\n    formatedData('getTotalApr')\n  }\n  if (chain_id === 59144) {\n    asyncFetch(\"https://api.lynex.fi/api/v1/fusions\").then((res) => {\n      if (!res.ok) return;\n      const fusionsData = res?.body?.data\n      dataList = dataList.map(data => {\n        const fusionData = fusionsData.find(fusionData => fusionData.address === data.vaultAddress)\n        data.totalApr = ((fusionData?.gauge?.tvl ?? 0 > 0) ? Big(fusionData?.gauge?.rewardPerSecond ?? 0)\n          .times(365 * 24 * 60 * 60)\n          .times(prices?.Lynex ?? 0)\n          .times(100)\n          .div(fusionData?.gauge?.tvl ?? 0).toFixed(2) : '0.00') + '%'\n        return data\n      })\n      formatedData('getTotalApr')\n    });\n  }\n  if (chain_id === 56) {\n    const calls = [];\n    const addressMap = {\n      'N ETH-WBNB-0': '0xD777E84b0D29128351A35045D7AE728780dEf54D',\n      'N BTCB-WBNB-0': '0x65E40E779560199F5e68126Bc95bdc03083e5AA4',\n      'S USDT-USDC-0': '0x1011530830c914970CAa96a52B9DA1C709Ea48fb',\n      'N USDT-WBNB-0': '0xf50Af14BC4953Dcf9d27EbCA8BB3625855F5B42d',\n      'P ankrBNB-WBNB-0': '0xf50Af14BC4953Dcf9d27EbCA8BB3625855F5B42d',\n      'P BNBx-WBNB-0': '0xf50Af14BC4953Dcf9d27EbCA8BB3625855F5B42d',\n    }\n    dataList.forEach(data => {\n      addressMap[data.id] && calls.push({\n        address: addressMap[data.id],\n        name: \"rewardRate\",\n      });\n    })\n    multicallv2(\n      ERC20_ABI,\n      calls,\n      {},\n      res => {\n        for (let i = 0, len = res.length; i < len; i++) {\n          dataList[i]['totalApr'] = (dataList[i].tvlUSD > 0 ? Big(ethers.utils.formatUnits(res[i][0]._hex))\n            .mul(365 * 24 * 60 * 60)\n            .mul(prices['THE'])\n            .div(dataList[i].tvlUSD)\n            .toFixed(2) : '0.00') + '%'\n        }\n        formatedData('getTotalApr')\n      },\n      error => {\n        setTimeout(() => {\n          getTotalApr()\n        }, 500)\n      }\n    )\n  }\n}\nfunction getFeeTiers() {\n  const chain_id = curChain.chain_id\n  if ([59144, 56].includes(chain_id)) {\n    const calls = [];\n    dataList.forEach(data => {\n      calls.push({\n        address: data.poolAddress,\n        name: \"globalState\",\n      });\n    })\n    multicallv2(\n      ERC20_ABI,\n      calls,\n      {},\n      res => {\n        for (let i = 0, len = res.length; i < len; i++) {\n          dataList[i]['fee'] = Big(res[i][2]).div(10000).toFixed(4)\n        }\n        formatedData('getFeeTiers')\n      },\n      error => {\n        setTimeout(() => {\n          getFeeTiers()\n        }, 500)\n      }\n    )\n  } else {\n    asyncFetch(LAST_SNAP_SHOT_DATA_URL)\n      .then(res => {\n        if (res.ok) {\n          dataList.forEach((data, index) => {\n            const findIndex = res.body.findIndex(source => data.vaultAddress === source.address)\n            if (findIndex > -1) {\n              dataList[index]['fee'] = Big(res.body[findIndex].fee).div(100).toFixed(2)\n            }\n          })\n          formatedData('getFeeTiers')\n        }\n      })\n      .catch(error => {\n        console.log('error', error)\n      })\n  }\n}\n\nuseEffect(() => {\n  getDataList()\n  getLiquidity()\n  getFeeTiers()\n  getTotalApr()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.Gamma", "fact_widget_deployments_id": "49c15832201a747b6a208e4f57c83be7", "inserted_timestamp": "2024-04-02T10:32:53.983Z", "modified_timestamp": "2024-04-02T10:32:53.983Z", "__row_index": 5}