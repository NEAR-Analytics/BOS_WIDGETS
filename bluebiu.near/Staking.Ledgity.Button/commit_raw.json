{"tx_hash": "Ez34XfeevEBD52mP75aG1PXKaXYLEwV2dB4qhA9wYv4c", "action_id_social": "9QUBwhjMpSZpRcdaFumsNCgH2WsU6pZD8RnvctucYo8N-0-widget", "block_id": 119552925, "block_timestamp": "2024-05-23T09:08:36.498Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Ledgity.Button", "source_code": "const ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst DEPOSIT_POOL_ABI = [\n  {\n    inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst WITHDRAW_ABI = [\n  {\n    inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    name: \"instantWithdrawal\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst Button = styled.button`\n  background-color: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  color: white;\n  background-color: #075a5a;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: 20px;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n  /* &.borrow {\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  } */\n`;\n\nconst {\n  account,\n  actionText,\n  amount,\n  data,\n  chainId,\n  onSuccess,\n  toast,\n  addAction,\n  loading: estimating,\n  gas,\n  dexConfig,\n  stakeToken,\n  onSwitchChain,\n} = props;\nconsole.log(\"BUTTON--\", props);\nconst { DepositPool, ExchangeToken, WithdrawalContract } = dexConfig;\nconst { parseUnits, formatUnits } = ethers.utils;\n\nlet tokenSymbol;\nlet tokenDecimals;\nlet tokenAddr;\nlet spender;\nif (actionText === \"Stake\") {\n  tokenSymbol = stakeToken.symbol;\n  tokenDecimals = stakeToken.decimals;\n  tokenAddr = stakeToken.address;\n  spender = DepositPool;\n}\n\nif (!actionText) return;\n\nif (!amount) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Enter An Amount\n    </Button>\n  );\n}\n\nuseEffect(() => {\n  State.update({\n    approving: false,\n    isApproved: false,\n  });\n}, []);\nfunction getAllowance() {\n  State.update({\n    pending: true,\n  });\n  const TokenContract = new ethers.Contract(\n    tokenAddr,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, spender)\n    .then((allowanceRaw) => {\n      console.log(\"ALLOWANCE:\", allowanceRaw.toString());\n      State.update({\n        pending: false,\n        isApproved: !Big(formatUnits(allowanceRaw, tokenDecimals)).lt(\n          amount || \"0\"\n        ),\n      });\n    })\n    .catch((err) => {\n      console.log(\"getAllowance-error:\", err);\n      State.update({\n        pending: false,\n      });\n    });\n}\nuseEffect(() => {\n  if ([\"Stake\"].includes(actionText) && !stakeToken.isNative) {\n    getAllowance();\n  } else {\n    State.update({\n      isApproved: true,\n    });\n  }\n}, [amount, actionText]);\n\nif (!state.isApproved) {\n  function handleApprove() {\n    const toastId = toast?.loading({\n      title: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n    });\n    State.update({\n      approving: true,\n    });\n\n    const TokenContract = new ethers.Contract(\n      tokenAddr,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(spender, parseUnits(amount, tokenDecimals))\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              isApproved: true,\n              approving: false,\n            });\n            toast?.success({\n              title: \"Approve Successfully!\",\n              text: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            State.update({\n              isApproved: false,\n              approving: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n        });\n        onLoad?.(false);\n      });\n  }\n  return (\n    <Button onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Approve\"\n      )}\n    </Button>\n  );\n}\n\nfunction formatAddAction(actionText, _amount, status, transactionHash) {\n  addAction?.({\n    type: \"Staking\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: dexConfig.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nfunction handleDepositErc20() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    DepositPool,\n    DEPOSIT_POOL_ABI,\n    Ethers.provider().getSigner()\n  );\n  contract\n    .deposit(parseUnits(amount, tokenDecimals), {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleDeposit-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\n\nfunction handleWithdraw() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    WithdrawalContract,\n    WITHDRAW_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .instantWithdrawal(parseUnits(amount, ExchangeToken.decimals), {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleDeposit-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\nfunction handleClick() {\n  if (actionText === \"Stake\") {\n    handleDepositErc20();\n  }\n  if (actionText === \"Unstake\") {\n    handleWithdraw();\n  }\n}\n\nreturn (\n  <Button\n    disabled={state.pending}\n    className={actionText.toLowerCase()}\n    onClick={handleClick}\n  >\n    {state.pending ? (\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    ) : (\n      actionText\n    )}\n  </Button>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Ledgity.Button", "fact_widget_deployments_id": "5b90e131481616bc8cf90e02787eab2b", "inserted_timestamp": "2024-05-23T10:52:14.304Z", "modified_timestamp": "2024-05-23T10:52:14.304Z", "__row_index": 0}