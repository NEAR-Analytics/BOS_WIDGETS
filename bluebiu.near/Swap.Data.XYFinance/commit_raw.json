{"tx_hash": "AVSw4bUfpythCMCChe12ufhedRgJYPMSdKWUE9gmg71i", "action_id_social": "36QqGB4Rvzfms9gsRydsmDspPhGeVnUSGHKZJRLKhRau-0-widget", "block_id": 117561912, "block_timestamp": "2024-04-25T02:20:10.269Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.XYFinance", "source_code": "const {\n  updater,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  multicall,\n  multicallAddress,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    const WethContract = new ethers.Contract(\n      wethAddress,\n      [\n        {\n          constant: false,\n          inputs: [],\n          name: \"deposit\",\n          outputs: [],\n          payable: true,\n          stateMutability: \"payable\",\n          type: \"function\",\n        },\n        {\n          constant: false,\n          inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n          name: \"withdraw\",\n          outputs: [],\n          payable: false,\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    let params = [];\n    let options = {};\n    let method = \"\";\n    if (wrapType === 1) {\n      method = \"deposit\";\n      options.value = ethers.utils.parseEther(\n        Big(inputCurrencyAmount).toFixed(18).toString()\n      );\n    } else {\n      method = \"withdraw\";\n      params = [\n        ethers.utils.parseEther(\n          Big(inputCurrencyAmount).toFixed(18).toString()\n        ),\n      ];\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n      routes: null,\n      routerStr: \"\",\n      gas: \"\",\n    };\n    const getTx = (_gas) => {\n      WethContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas || 4000000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      WethContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          console.log(err);\n          getTx();\n        });\n    };\n    estimateGas();\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.address === \"native\"\n      ? \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n      : inputCurrency.address,\n    outputCurrency.address === \"native\"\n      ? \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n      : outputCurrency.address,\n  ];\n  const getAmountsOut = () => {\n    const params = `src_chain_id=${\n      inputCurrency.chainId\n    }&src_quote_token_address=${\n      path[0]\n    }&src_quote_token_amount=${amount}&dst_chain_id=${\n      outputCurrency.chainId\n    }&dst_quote_token_address=${path[1]}&slippage=${\n      slippage * 100 || 0.5\n    }&commission_rate=1000&affiliate=0x6F78C36F8a645509744250B127646ABE4150103b`;\n\n    asyncFetch(`https://router-api.xy.finance/xy_router/quote?${params}`)\n      .then((res) => {\n        const data = res.body?.routes?.[0];\n        if (!data) {\n          onLoad({\n            inputCurrency,\n            inputCurrencyAmount,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n            noPair: true,\n          });\n          return;\n        }\n\n        asyncFetch(\n          `https://router-api.xy.finance/xy_router/build_tx?src_chain_id=${data.src_chain_id}&src_quote_token_address=${data.src_quote_token_address}&src_quote_token_amount=${data.src_quote_token_amount}&dst_chain_id=${data.dst_chain_id}&dst_quote_token_address=${data.dst_quote_token_address}&slippage=${data.slippage}&receiver=${account}&src_swap_provider=${data.src_swap_description.provider}&commission_rate=1000&affiliate=0x6F78C36F8a645509744250B127646ABE4150103b`\n        )\n          .then((txRes) => {\n            const txData = txRes.body;\n            const amountoutDesimals = ethers.utils.formatUnits(\n              data.dst_quote_token_amount,\n              outputCurrency.decimals\n            );\n            if (!txData.success) {\n              onLoad({\n                inputCurrency,\n                inputCurrencyAmount,\n                outputCurrency,\n                outputCurrencyAmount: amountoutDesimals,\n                noPair: true,\n              });\n              return;\n            }\n            let priceImpact = null;\n\n            if (prices) {\n              const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n                prices[outputCurrency.symbol] || 1\n              );\n              const amountoutPrice =\n                Big(amountoutDesimals).div(inputCurrencyAmount);\n\n              priceImpact = poolPrice\n                .minus(amountoutPrice)\n                .div(poolPrice)\n                .mul(100)\n                .toString();\n            }\n\n            onLoad({\n              inputCurrency,\n              inputCurrencyAmount,\n              outputCurrency,\n              outputCurrencyAmount: amountoutDesimals,\n              noPair: false,\n              priceImpact,\n              routerAddress: txData.route.contract_address,\n              gas: txData.route.estimated_gas,\n              unsignedTx: txData.tx,\n            });\n          })\n          .catch((err) => {\n            onLoad({\n              inputCurrency,\n              inputCurrencyAmount,\n              outputCurrency,\n              outputCurrencyAmount: \"\",\n              noPair: true,\n            });\n          });\n      })\n      .catch((err) => {\n        onLoad({\n          inputCurrency,\n          inputCurrencyAmount,\n          outputCurrency,\n          outputCurrencyAmount: \"\",\n          noPair: true,\n        });\n      });\n  };\n\n  getAmountsOut();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.XYFinance", "fact_widget_deployments_id": "2822c419167c5949fccc142068a414e5", "inserted_timestamp": "2024-04-25T04:04:00.243Z", "modified_timestamp": "2024-04-25T04:04:00.243Z", "__row_index": 0}