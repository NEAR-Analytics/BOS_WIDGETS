{"tx_hash": "FbV4vCiVF7cb9hYvMtdf4LtPHSVrUmQNr4HXJUEZVKVx", "action_id_social": "5Ycb2KV8dwTeiQVBdDzjbw7pexUBfs1xmChKwd2iGxxx-0-widget", "block_id": 101671540, "block_timestamp": "2023-09-22T03:22:35.037Z", "signer_id": "bluebiu.near", "widget_name": "Metis.Swap.HandlerV2", "source_code": "const {\n  routerAddress,\n  wethAddress,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrencyAmount,\n  outputCurrency,\n  account,\n  onSuccess,\n  onError,\n  swapping,\n  title,\n} = props;\n\nif (!swapping) return;\n\nconst type =\n  inputCurrency.symbol === \"METIS\"\n    ? 1\n    : outputCurrency.symbol === \"METIS\"\n    ? 2\n    : 0;\n\nconst RouterContract = new ethers.Contract(\n  routerAddress,\n  [\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountOut\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amountInMax\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address[]\",\n          name: \"path\",\n          type: \"address[]\",\n        },\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"deadline\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"swapExactTokensForTokens\",\n      outputs: [\n        {\n          internalType: \"uint256[]\",\n          name: \"amounts\",\n          type: \"uint256[]\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      type: \"function\",\n      stateMutability: \"payable\",\n      outputs: [\n        { type: \"uint256[]\", name: \"amounts\", internalType: \"uint256[]\" },\n      ],\n      name: \"swapExactMetisForTokens\",\n      inputs: [\n        { type: \"uint256\", name: \"amountOutMin\", internalType: \"uint256\" },\n        { type: \"address[]\", name: \"path\", internalType: \"address[]\" },\n        { type: \"address\", name: \"to\", internalType: \"address\" },\n        { type: \"uint256\", name: \"deadline\", internalType: \"uint256\" },\n      ],\n    },\n    {\n      type: \"function\",\n      stateMutability: \"nonpayable\",\n      outputs: [\n        { type: \"uint256[]\", name: \"amounts\", internalType: \"uint256[]\" },\n      ],\n      name: \"swapExactTokensForMetis\",\n      inputs: [\n        { type: \"uint256\", name: \"amountIn\", internalType: \"uint256\" },\n        { type: \"uint256\", name: \"amountOutMin\", internalType: \"uint256\" },\n        { type: \"address[]\", name: \"path\", internalType: \"address[]\" },\n        { type: \"address\", name: \"to\", internalType: \"address\" },\n        { type: \"uint256\", name: \"deadline\", internalType: \"uint256\" },\n      ],\n    },\n  ],\n  Ethers.provider().getSigner()\n);\nif (type === 0) {\n  RouterContract.swapExactTokensForTokens(\n    ethers.utils.parseUnits(inputCurrencyAmount, inputCurrency.decimals),\n    \"0\",\n    [inputCurrency.address, outputCurrency.address],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n    { gasLimit: 5000000 }\n  )\n    .then((tx) => {\n      onSuccess(tx);\n    })\n    .catch((err) => {\n      onError(err);\n    });\n  return;\n}\nif (type === 1) {\n  RouterContract.swapExactMetisForTokens(\n    Big(ethers.utils.parseUnits(outputCurrencyAmount, outputCurrency.decimals))\n      .mul(0.995)\n      .toString(),\n    [inputCurrency.address, outputCurrency.address],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n    {\n      gasLimit: 5000000,\n      value: ethers.utils.parseEther(inputCurrencyAmount),\n    }\n  )\n    .then((tx) => {\n      onSuccess(tx);\n    })\n    .catch((err) => {\n      onError(err);\n    });\n  return;\n}\nif (type === 2) {\n  RouterContract.swapExactTokensForMetis(\n    ethers.utils.parseUnits(inputCurrencyAmount, inputCurrency.decimals),\n    Big(ethers.utils.parseUnits(outputCurrencyAmount, outputCurrency.decimals))\n      .mul(0.995)\n      .toString(),\n    [inputCurrency.address, outputCurrency.address],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n    { gasLimit: 5000000 }\n  )\n    .then((tx) => {\n      onSuccess(tx);\n    })\n    .catch((err) => {\n      onError(err);\n    });\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Metis.Swap.HandlerV2", "fact_widget_deployments_id": "e15a11571d117de76e38c5f78bd1bf47", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}