{"tx_hash": "GpmGzpQVFEDwAnYeSYnEKwcHAcVRA4N36MnLUQQGtnPG", "action_id_social": "AtRNXskHYGfminnU2wDLVbQxBmFCKbHiEfHN5ZBhoemB-0-widget", "block_id": 119840489, "block_timestamp": "2024-05-27T08:18:10.939Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Bridge.STEER.Detail", "source_code": "\nconst {\n  // defaultPair,\n  // pair,\n  data,\n  toast,\n  prices,\n  curChain,\n  refetch,\n  addresses,\n  proxyAddress,\n  addAction,\n  defaultDex,\n  userPositions,\n  ICON_VAULT_MAP\n} = props;\nconst STEER_PERIPHERY_ADDRESS = curChain.chain_id === 169 ? '0xD90c8970708FfdFC403bdb56636621e3E9CCe921' : '0x806c2240793b3738000fcb62C66BF462764B903F'\n\nconst {\n  StyledFont,\n  StyledFlex,\n  Row,\n  Column,\n  DetailWrapper,\n  FilterButtonList,\n  FilterButton,\n  InputWrapList,\n  InputWrap,\n  Input,\n  InputSuffix,\n  StyledImageList,\n  PriceWrap,\n  TotalPrice,\n  BalancePrice,\n  StyledButtonList,\n  StyledButton,\n} = VM.require('bluebiu.near/widget/Liquidity.Handler.Styles')\n\nconst defaultDeposit = props.tab === \"deposit\" || !props.tab;\n\n// const curPositionUSD = userPositions[data.vaultAddress]?.balanceUSD;\n\nState.init({\n  isDeposit: defaultDeposit,\n  lpBalance: \"\",\n  balances: [],\n  amount0: \"\",\n  amount1: \"\",\n  lpAmount: \"\",\n  isError: false,\n  isLoading: false,\n  isToken0Approved: true,\n  isToken1Approved: true,\n  isToken0Approving: false,\n  isToken1Approving: false,\n  loadingMsg: \"\",\n  isPostTx: false,\n  showPairs: false,\n});\n\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst { token0, token1, decimals0, decimals1, id, poolAddress, liquidity } = data || defaultPair;\n\nconst vaultAddress = addresses[id];\n\nconst updateLPBalance = () => {\n  const abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(vaultAddress),\n    abi,\n    Ethers.provider()\n  );\n  contract.balanceOf(sender).then((balanceBig) => {\n    const adjustedBalance = ethers.utils.formatUnits(balanceBig, 18);\n    State.update({\n      lpBalance: adjustedBalance,\n    });\n  });\n};\nconst updateBalance = (token) => {\n  const { address, decimals, symbol } = token;\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(sender)\n      .then((balanceBig) => {\n        const adjustedBalance = ethers.utils.formatEther(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract.balanceOf(sender).then((balanceBig) => {\n      const adjustedBalance = Big(\n        ethers.utils.formatUnits(balanceBig, decimals)\n      ).toFixed();\n      State.update({\n        balances: {\n          ...state.balances,\n          [symbol]: adjustedBalance,\n        },\n      });\n    });\n  }\n};\n\nconst {\n  isDeposit,\n  balances,\n  amount0,\n  amount1,\n  isLoading,\n  isError,\n  isToken0Approved,\n  isToken1Approved,\n  isToken0Approving,\n  isToken1Approving,\n  loadingMsg,\n  lpBalance,\n  lpAmount,\n  isPostTx,\n} = state;\n\nconst detailLoading = Object.keys(balances).length < 2 && lpBalance === \"\"\nconst handleCheckApproval = (symbol, amount, decimals) => {\n  const wei = ethers.utils.parseUnits(\n    Big(amount).toFixed(decimals),\n    decimals\n  );\n  const abi = [\n    \"function allowance(address, address) external view returns (uint256)\",\n  ];\n\n  const contract = new ethers.Contract(\n    addresses[symbol],\n    abi,\n    Ethers.provider()\n  );\n\n  contract\n    .allowance(sender, vaultAddress)\n    .then((allowance) => {\n      State.update({\n        [symbol === token0 ? 'isToken0Approved' : 'isToken1Approved']: !new Big(allowance.toString()).lt(wei),\n      });\n    })\n    .catch((e) => console.log(e));\n\n}\nconst checkApproval = (amount, otherAmount, symbol) => {\n  const otherSymbol = symbol === token0 ? token1 : token0\n  const decimals = symbol === token0 ? decimals0 : decimals1\n  const otherDecimals = symbol === token0 ? decimals1 : decimals0\n\n  handleCheckApproval(symbol, amount, decimals)\n  handleCheckApproval(otherSymbol, otherAmount, otherDecimals)\n};\nconst changeMode = (isDeposit) => {\n  State.update({ isDeposit });\n};\n\nconst handleMax = (isToken0) => {\n  if (isToken0) handleTokenChange(balances[token0], token0);\n  else handleTokenChange(balances[token1], token1);\n};\n\nconst handleTokenChange = (amount, symbol) => {\n  State.update({\n    [symbol === token0 ? 'amount0' : 'amount1']: amount\n  })\n  if (Number(amount) === 0) {\n    State.update({\n      [symbol === token0 ? 'amount1' : 'amount0']: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true\n    })\n    return;\n  }\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\"\n  })\n  const abi = [\n    \"function getTotalAmounts() external view returns (uint256 total0, uint256 total1)\"\n  ];\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(vaultAddress),\n    abi,\n    Ethers.provider()\n  );\n  contract\n    .getTotalAmounts()\n    .then((response) => {\n      const total0 = ethers.utils.formatUnits(response[0], decimals0)\n      const total1 = ethers.utils.formatUnits(response[1], decimals1)\n      const otherAmount = (symbol === token0 ?\n        Big(amount).times(total1).div(total0) :\n        Big(amount).times(total0).div(total1)).toFixed()\n      State.update({\n        isLoading: false,\n        [symbol === token0 ? 'amount1' : 'amount0']: otherAmount.toFixed(),\n      })\n      checkApproval(amount, otherAmount, symbol);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        loadingMsg: \"Something went wrong. Please try again.\"\n      })\n      State.update({\n        [symbol === token0 ? 'amount1' : 'amount0']: 0\n      })\n    });\n};\nconst handleGetUnderlyingAssets = (amount) => {\n  const abi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_shares\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getUnderlyingAssets\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"totalX\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"totalY\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ];\n\n  try {\n    const contract = new ethers.Contract(\n      ethers.utils.getAddress(poolAddress),\n      abi,\n      Ethers.provider().getSigner()\n    );\n    contract\n      .getUnderlyingAssets(Big(amount)\n        .mul(Big(10).pow(18))\n        .toFixed(0))\n      .then(result => {\n        const amountX = Number(ethers.utils.formatUnits(result[0], decimals0)).toFixed(5)\n        const amountY = Number(ethers.utils.formatUnits(result[1], decimals1)).toFixed(5)\n        State.update({\n          amountX,\n          amountY\n        })\n      })\n  } catch (error) {\n    console.log(error)\n  }\n\n}\nconst handleLPChange = (amount) => {\n  State.update({\n    lpAmount: amount,\n  });\n};\n\nconst handleApprove = (isToken0) => {\n  const _token = isToken0 ? token0 : token1;\n  const payload = isToken0\n    ? { isToken0Approving: true }\n    : { isToken1Approving: true };\n\n  const amount = isToken0\n    ? Big(amount0).toFixed(decimals0)\n    : Big(amount1).toFixed(decimals1);\n\n  const toastId = toast?.loading({\n    title: `Approve ${amount} ${_token}`,\n  });\n\n  State.update({\n    ...payload,\n    isLoading: true,\n    loadingMsg: `Approving ${_token}...`,\n  });\n\n  const tokenWei = ethers.utils.parseUnits(\n    amount,\n    isToken0 ? decimals0 : decimals1\n  );\n\n  const abi = [\"function approve(address, uint) public\"];\n\n  const contract = new ethers.Contract(\n    addresses[_token],\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .approve(ethers.utils.getAddress(STEER_PERIPHERY_ADDRESS), tokenWei)\n    .then((tx) => tx.wait())\n    .then((receipt) => {\n      const payload = isToken0\n        ? { isToken0Approved: true, isToken0Approving: false }\n        : { isToken1Approved: true, isToken1Approving: false };\n\n      State.update({ ...payload, isLoading: false, loadingMsg: \"\" });\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Approve Successfully!\",\n        text: `Approve ${amount} ${_token}`,\n        tx: receipt.transactionHash,\n        chainId: props.chainId,\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n        isToken0Approving: false,\n        isToken1Approving: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Approve Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Approve ${amount} ${_token}`,\n      });\n    });\n};\nconst handleDeposit = () => {\n  const toastId = toast?.loading({\n    title: `Depositing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const amount0Desired = Big(amount0)\n    .mul(Big(10).pow(decimals0))\n    .toFixed(0);\n  const amount1Desired = Big(amount1)\n    .mul(Big(10).pow(decimals1))\n    .toFixed(0);\n\n\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"vaultAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount0Desired\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount1Desired\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount0Min\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount1Min\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"deposit\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(STEER_PERIPHERY_ADDRESS),\n    abi,\n    Ethers.provider().getSigner()\n  );\n  contract\n    .deposit(vaultAddress, amount0Desired, amount1Desired, 0, 0, sender)\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Deposit\",\n        token0,\n        token1,\n        amount: amount0,\n        template: defaultDex,\n        status: status,\n        add: 1,\n        transactionHash,\n        chain_id: props.chainId,\n        extra_data: JSON.stringify({\n          action: \"Deposit\",\n          amount0,\n          amount1,\n        })\n      });\n\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      if (refetch) refetch();\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Deposit Successfully!\",\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Deposit Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : \"\",\n      });\n    });\n};\n\nconst handleWithdraw = () => {\n  const toastId = toast?.loading({\n    title: `Withdrawing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Withdrawing...\",\n  });\n  const shares = Big(lpAmount)\n    .mul(Big(10).pow(18))\n    .toFixed(0)\n\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"shares\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount0Min\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount1Min\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount0\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount1\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(addresses[data.id]),\n    abi,\n    Ethers.provider().getSigner()\n  );\n  contract\n    .withdraw(shares, 0, 0, sender)\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Withdraw\",\n        token0,\n        token1,\n        amount: lpAmount,\n        template: defaultDex,\n        status: status,\n        add: 0,\n        transactionHash,\n        chain_id: state.chainId,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      if (refetch) refetch();\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Withdraw Successfully!\",\n      });\n    })\n    .catch((error) => {\n      console.log('===error', error)\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Withdraw Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : \"\",\n      });\n    });\n};\n\nconst tokensPrice = prices;\n\nconst isInSufficient =\n  Number(amount0) > Number(balances[token0]) ||\n  Number(amount1) > Number(balances[token1]);\n\nconst isWithdrawInsufficient = Number(lpAmount) > Number(lpBalance);\n\nconst balance0 =\n  !amount0 || !tokensPrice?.[token0]\n    ? \"-\"\n    : parseFloat(Big(amount0).times(tokensPrice[token0]).toFixed(4));\n\nconst balance1 =\n  !amount1 || !tokensPrice?.[token1]\n    ? \"-\"\n    : parseFloat(Big(amount1).times(tokensPrice[token1]).toFixed(4));\n\n\nconst balanceLp =\n  !lpAmount || !lpBalance || !liquidity\n    ? \"-\"\n    : parseFloat(\n      Big(lpAmount)\n        .div(lpBalance)\n        .times(liquidity)\n        .toFixed(4)\n    );\n\nconst onUpdateLpPercent = (percent) => {\n  State.update({\n    lpPercent: percent,\n  });\n};\n\nconst onChangeSlider = (percent) => {\n  console.log(\"percent: \", percent);\n  const newLpValue = Big(percent)\n    .div(100)\n    .times(lpBalance || 0)\n    .toFixed(6);\n\n  handleLPChange(newLpValue);\n};\n\nuseEffect(() => {\n  if (!sender || !token0 || !token1) return;\n  [\n    { symbol: token0, address: addresses[token0], decimals: decimals0 },\n    { symbol: token1, address: addresses[token1], decimals: decimals1 },\n  ].map(updateBalance);\n\n  updateLPBalance();\n}, [sender, token0, token1]);\n\nuseEffect(() => {\n  if (amount0) {\n    handleTokenChange(amount0, token0);\n  }\n}, [data]);\n\nreturn (\n  <DetailWrapper>\n    <FilterButtonList>\n      <FilterButton className={isDeposit ? 'isActive' : ''} onClick={() => changeMode(true)}>Deposit</FilterButton>\n      <FilterButton className={!isDeposit ? 'isActive' : ''} onClick={() => changeMode(false)}>Withdraw</FilterButton>\n    </FilterButtonList>\n    {\n      detailLoading ? (\n        <div style={{ padding: \"30px 0 45px\" }}>\n          <Widget\n            props={{\n              color: \"#999\"\n            }}\n            src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\"\n          />\n        </div>\n      ) : (\n        <>\n          {\n            isDeposit ? <>\n              <Row className=\"price-input\">\n                <Column>\n                  <InputWrap className={Number(amount0) > Number(balances[token0]) ? \"inSufficient\" : \"\"}>\n                    <Input value={amount0} type=\"number\" onChange={(e) => handleTokenChange(e.target.value, token0)} />\n                    <InputSuffix>\n                      <img src={ICON_VAULT_MAP[token0]} alt={token0} />\n                      <span>{token0}</span>\n                    </InputSuffix>\n                  </InputWrap>\n                  <PriceWrap>\n                    <TotalPrice>${balance0}</TotalPrice>\n                    <BalancePrice>Balance:<span onClick={() => handleMax(true)}>{Big(balances[token0] ?? 0).toFixed(6)}</span> {token0}</BalancePrice>\n                  </PriceWrap>\n                </Column>\n                <Column>\n                  <InputWrap className={Number(amount1) > Number(balances[token1]) ? \"inSufficient\" : \"\"}>\n                    <Input value={amount1} type=\"number\" onChange={(e) => handleTokenChange(e.target.value, token1)} />\n                    <InputSuffix>\n                      <img src={ICON_VAULT_MAP[token1]} alt={token1} />\n                      <span>{token1}</span>\n                    </InputSuffix>\n                  </InputWrap>\n                  <PriceWrap>\n                    <TotalPrice>${balance1}</TotalPrice>\n                    <BalancePrice>Balance:<span onClick={() => handleMax(false)}>{Big(balances[token1] ?? 0).toFixed(6)}</span> {token1}</BalancePrice>\n                  </PriceWrap>\n                </Column>\n              </Row>\n              <StyledButtonList>\n                {isInSufficient && <StyledButton disabled>InSufficient Balance</StyledButton>}\n                {\n                  !isInSufficient &&\n                  (isToken0Approved &&\n                    isToken1Approved &&\n                    !isToken0Approving &&\n                    !isToken1Approving ? (\n\n                    <StyledButton disabled={isLoading || !amount0 || !amount1} onClick={handleDeposit}>\n                      {\n                        isLoading ? (\n                          <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                        ) : (\n                          \"Deposit\"\n                        )\n                      }\n                    </StyledButton>\n                  ) : (\n                    <>\n                      <StyledButton disabled={isToken0Approved || isToken0Approving} onClick={() => handleApprove(true)}>{\n                        isToken0Approving ? (\n                          <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                        ) : (\n                          <>\n                            {isToken0Approved ? \"Approved\" : \"Approve\"} {token0}\n                          </>\n                        )}\n                      </StyledButton>\n                      <StyledButton disabled={isToken1Approved || isToken1Approving} onClick={() => handleApprove(false)}>{\n                        isToken1Approving ? (\n                          <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                        ) : (\n                          <>\n                            {isToken1Approved ? \"Approved\" : \"Approve\"} {token1}\n                          </>\n                        )}\n                      </StyledButton>\n                    </>\n                  ))\n                }\n              </StyledButtonList>\n            </> : <>\n              <Row className=\"price-input\">\n                <Column>\n                  <InputWrap>\n                    <Input value={lpAmount} type=\"number\" onChange={(e) => {\n                      handleLPChange(e.target.value);\n\n                      const value = e.target.value;\n\n                      if (!value) {\n                        onUpdateLpPercent(0);\n                      }\n\n                      if (value && Big(value).gt(0)) {\n                        const newSliderPercent = Big(value || 0)\n                          .div(Big(lpBalance).gt(0) ? lpBalance : 1)\n                          .times(100)\n                          .toFixed(0);\n                        onUpdateLpPercent(newSliderPercent);\n                      }\n                    }} />\n\n                    <InputSuffix>\n                      <StyledImageList>\n                        <img src={ICON_VAULT_MAP[token0]} alt={token0} />\n                        <img src={ICON_VAULT_MAP[token1]} alt={token1} style={{ marginLeft: -6 }} />\n                      </StyledImageList>\n                      <span>{token0}/{token1}</span>\n                    </InputSuffix>\n                  </InputWrap>\n                  <PriceWrap>\n                    <TotalPrice>${balanceLp}</TotalPrice>\n                    <BalancePrice>Balance: <span\n                      onClick={() => {\n                        const newSliderPercent = Big(lpBalance || 0)\n                          .div(Big(lpBalance).gt(0) ? lpBalance : 1)\n                          .times(100)\n                          .toFixed(0);\n\n                        onUpdateLpPercent(newSliderPercent);\n\n                        handleLPChange(lpBalance);\n                      }}\n                      className=\"v\"\n                    >\n                      {lpBalance}\n                    </span></BalancePrice>\n                  </PriceWrap>\n                </Column>\n              </Row>\n              <StyledButtonList>\n                <StyledButton\n                  disabled={isWithdrawInsufficient || isLoading || !lpAmount}\n                  onClick={handleWithdraw}\n                >\n                  {isLoading ? (\n                    <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                  ) : (\n                    <>\n                      {isWithdrawInsufficient ? \"InSufficient Balance\" : \"Withdraw\"}\n                    </>\n                  )}\n                </StyledButton>\n\n              </StyledButtonList>\n            </>\n          }\n        </>\n      )\n    }\n  </DetailWrapper>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Bridge.STEER.Detail", "fact_widget_deployments_id": "beb0faedaafe28bc3a16d53666d88291", "inserted_timestamp": "2024-05-27T10:09:20.097Z", "modified_timestamp": "2024-05-27T10:09:20.097Z", "__row_index": 9}