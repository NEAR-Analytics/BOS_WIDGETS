{"tx_hash": "A75tj5b9T4ZnU2JkbuZWJLaYB3XJGmX8NdgDiYEJQsiv", "action_id_social": "HNuzbU1b3xrBRD4uF2iQbxXSmNcG8LG3MjrcaW12HQDm-0-widget", "block_id": 102379579, "block_timestamp": "2023-10-01T14:40:03.261Z", "signer_id": "bluebiu.near", "widget_name": "Optimism.Lending.SonneData", "source_code": "const markets = {\n  \"0xAFdf91f120DEC93c65fd63DBD5ec372e5dcA5f82\": {\n    underlyingToken: {\n      address: \"0xc40F949F8a4e094D1b49a23ea9241D289B7b2819\",\n      decimals: 18,\n      symbol: \"LUSD\",\n    },\n    decimals: 8,\n    symbol: \"soLUSD\",\n    address: \"0xAFdf91f120DEC93c65fd63DBD5ec372e5dcA5f82\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreihne6zw3myw5dwh72giml63vjjksmixrf435hf7cnsg5f3ubgdnde\",\n  },\n  \"0x5569b83de187375d43FBd747598bfe64fC8f6436\": {\n    underlyingToken: {\n      address: \"0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1\",\n      decimals: 18,\n      symbol: \"DAI\",\n    },\n    decimals: 8,\n    symbol: \"soDAI\",\n    address: \"0x5569b83de187375d43FBd747598bfe64fC8f6436\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreieuxntkdzi2mzkzdcbk6kahwxqpftxnipxcwc4oe4p4jm2rhj2xhu\",\n  },\n  \"0xE7De932d50EfC9ea0a7a409Fc015B4f71443528e\": {\n    underlyingToken: {\n      address: \"0xdFA46478F9e5EA86d57387849598dbFB2e964b02\",\n      decimals: 18,\n      symbol: \"MAI\",\n    },\n    decimals: 8,\n    symbol: \"soMAI\",\n    address: \"0xE7De932d50EfC9ea0a7a409Fc015B4f71443528e\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiavgjilh3v3pss6tlwggljopf2vw5np7x37evcjbxkdb5s3xb6ice\",\n  },\n  \"0x8cD6b19A07d754bF36AdEEE79EDF4F2134a8F571\": {\n    underlyingToken: {\n      address: \"0x4200000000000000000000000000000000000042\",\n      decimals: 18,\n      symbol: \"OP\",\n    },\n    decimals: 8,\n    symbol: \"soOP\",\n    address: \"0x8cD6b19A07d754bF36AdEEE79EDF4F2134a8F571\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiemkl7qtrrqnk5mexf7r4cr3mkznna6qvxrzhovlmt4djbkx366ae\",\n  },\n  \"0xD7dAabd899D1fAbbC3A9ac162568939CEc0393Cc\": {\n    underlyingToken: {\n      address: \"0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4\",\n      decimals: 18,\n      symbol: \"SNX\",\n    },\n    decimals: 8,\n    symbol: \"soSNX\",\n    address: \"0xD7dAabd899D1fAbbC3A9ac162568939CEc0393Cc\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiblu4utwynt7ajvretbjzqtm2v7e7p2hkyyp7jamb742zkwpdzmu4\",\n  },\n  \"0xEC8FEa79026FfEd168cCf5C627c7f486D77b765F\": {\n    underlyingToken: {\n      address: \"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\",\n      decimals: 6,\n      symbol: \"USDC\",\n    },\n    decimals: 8,\n    symbol: \"soUSDC\",\n    address: \"0xEC8FEa79026FfEd168cCf5C627c7f486D77b765F\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreie4jihoa76mgyzxhw2yrapihzu2qhkjz6m7u4opoxjebzg6zc2lla\",\n  },\n  \"0x5Ff29E4470799b982408130EFAaBdeeAE7f66a10\": {\n    underlyingToken: {\n      address: \"0x94b008aA00579c1307B0EF2c499aD98a8ce58e58\",\n      decimals: 6,\n      symbol: \"USDT\",\n    },\n    decimals: 8,\n    symbol: \"soUSDT\",\n    address: \"0x5Ff29E4470799b982408130EFAaBdeeAE7f66a10\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreih45jy7ggj45ck34rf736kb67smsoa52wd7e46c2grh6etd3bhe5i\",\n  },\n  \"0x33865E09A572d4F1CC4d75Afc9ABcc5D3d4d867D\": {\n    underlyingToken: {\n      address: \"0x68f180fcCe6836688e9084f035309E29Bf0A2095\",\n      decimals: 8,\n      symbol: \"WBTC\",\n    },\n    decimals: 8,\n    symbol: \"soWBTC\",\n    address: \"0x33865E09A572d4F1CC4d75Afc9ABcc5D3d4d867D\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreigdklwcldjo4w7viyrym54hdb43wgpv23mbicetszygzapttbgo7q\",\n  },\n  \"0xf7B5965f5C117Eb1B5450187c9DcFccc3C317e8E\": {\n    underlyingToken: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      decimals: 18,\n      symbol: \"WETH\",\n    },\n    decimals: 8,\n    symbol: \"soWETH\",\n    address: \"0xf7B5965f5C117Eb1B5450187c9DcFccc3C317e8E\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreihyzmiuawyekwiyofkzm25xzrrfenhvadi6lb42juvq7tah2u7ha4\",\n  },\n  \"0xd14451E0Fa44B18f08aeB1E4a4d092B823CaCa68\": {\n    underlyingToken: {\n      address: \"0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9\",\n      decimals: 18,\n      symbol: \"sUSD\",\n    },\n    decimals: 8,\n    symbol: \"soSUSD\",\n    address: \"0xd14451E0Fa44B18f08aeB1E4a4d092B823CaCa68\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiaum6qcvs7gqjwfmbfoh5dde244fqd6bji4id5wlyn6q5e3vvsorm\",\n  },\n  \"0x26AaB17f27CD1c8d06a0Ad8E4a1Af8B1032171d5\": {\n    underlyingToken: {\n      address: \"0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb\",\n      decimals: 18,\n      symbol: \"wstETH\",\n    },\n    decimals: 8,\n    symbol: \"sowstETH\",\n    address: \"0x26AaB17f27CD1c8d06a0Ad8E4a1Af8B1032171d5\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibukwahpp2ei74ax5acm6p7uwcnbsfvdzkizsdzqu26yfbxndpvra\",\n  },\n};\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateStored\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n      { internalType: \"bool\", name: \"isQied\", type: \"bool\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"compSupplySpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"compBorrowSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  oracleAddress,\n  account,\n  update,\n  dapp,\n  onLoad,\n} = props;\n\nif (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\nconsole.log(`${dapp}-update`);\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nlet _cTokensData = {};\nlet _loanToValue = null;\nlet _underlyPrice = {};\nlet _liquidity = null;\nlet _underlyingBalance = null;\nlet _userMerberShip = null;\nlet _rewards = {};\nlet count = 0;\nlet oTokensLength = Object.values(markets).length;\n\nconst formatedData = (key) => {\n  console.log(`${dapp}-${key}`, count);\n  if (count < 5) return;\n  count = 0;\n  oTokensLength = Object.values(markets).length;\n  let totalSupplyUsd = Big(0);\n  let totalBorrowUsd = Big(0);\n  let userTotalSupplyUsd = Big(0);\n  let userTotalBorrowUsd = Big(0);\n  let totalCollateralUsd = Big(0);\n  const markets = {};\n  Object.values(_cTokensData).forEach((market) => {\n    const underlyingPrice = _underlyPrice[market.address] || 1;\n    const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n    const marketBorrowUsd = Big(market.totalBorrows || 0).mul(underlyingPrice);\n    totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n    totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n    userTotalSupplyUsd = userTotalSupplyUsd.plus(\n      Big(market.userSupply).mul(underlyingPrice)\n    );\n    userTotalBorrowUsd = userTotalBorrowUsd.plus(\n      Big(market.userBorrow).mul(underlyingPrice)\n    );\n    totalCollateralUsd = totalCollateralUsd.plus(\n      Big(market.userSupply)\n        .mul(underlyingPrice)\n        .mul(_loanToValue[market.address])\n        .div(100)\n    );\n\n    // const distributionSupplyApy = _rewards[market.address].supply.div(\n    //   marketSupplyUsd.eq(0) ? 1 : marketSupplyUsd\n    // );\n    // const distributionBorrowApy = _rewards[market.address].borrow.div(\n    //   marketBorrowUsd.eq(0) ? 1 : marketBorrowUsd\n    // );\n    const supplyApy = Big(market.supplyRatePerBlock)\n      .mul(60 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      // .add(distributionSupplyApy)\n      .mul(100);\n\n    const borrowApy = Big(market.borrowRatePerBlock)\n      .mul(60 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      // .minus(distributionBorrowApy)\n      .mul(100);\n\n    markets[market.address] = {\n      ...market,\n      loanToValue: _loanToValue[market.address],\n      liquidity: _liquidity[market.address],\n      underlyingPrice: underlyingPrice,\n      userUnderlyingBalance: _underlyingBalance[market.address],\n      userMerberShip: _userMerberShip[market.address],\n      supplyApy: supplyApy.toFixed(2) + \"%\",\n      borrowApy: borrowApy.toFixed(2) + \"%\",\n      dapp,\n    };\n  });\n  onLoad({\n    markets,\n    totalSupplyUsd: totalSupplyUsd.toString(),\n    totalBorrowUsd: totalBorrowUsd.toString(),\n    userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n    userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n    totalCollateralUsd: totalCollateralUsd.toString(),\n  });\n};\nconst getUnitrollerData = () => {\n  const calls = [];\n  const oTokens = Object.values(markets);\n  oTokens.forEach((token) => {\n    calls.push({\n      address: unitrollerAddress,\n      name: \"markets\",\n      params: [token.address],\n    });\n    if (account) {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"checkMembership\",\n        params: [account, token.address],\n      });\n    }\n  });\n  multicallv2(\n    UNITROLLER_ABI,\n    calls,\n    {},\n    (res) => {\n      _loanToValue = {};\n      _userMerberShip = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const index = Math.floor(i / (account ? 2 : 1));\n        const mod = i % (account ? 2 : 1);\n        switch (mod) {\n          case 0:\n            _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n              res[i][1]._hex,\n              16\n            );\n            break;\n          case 1:\n            _userMerberShip[oTokens[index].address] = res[i][0];\n            break;\n          default:\n        }\n      }\n      count++;\n      formatedData(\"getUnitrollerData\");\n    },\n    (err) => {\n      console.log(\"error-getUnitrollerData\", err);\n      setTimeout(() => {\n        getUnitrollerData();\n      }, 1000);\n    }\n  );\n};\nconst getUnderlyPrice = () => {\n  if (!oracleAddress) return;\n  const oTokens = Object.keys(markets);\n  const calls = oTokens.map((token) => ({\n    address: oracleAddress,\n    name: \"getUnderlyingPrice\",\n    params: [token],\n  }));\n  multicallv2(\n    ORACLE_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyPrice = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          36 - markets[oTokens[i]].underlyingToken.decimals\n        );\n      }\n      count++;\n      formatedData(\"getUnderlyPrice\");\n    },\n    (err) => {\n      console.log(\"error-getUnderlyPrice\", err);\n    }\n  );\n};\nconst getOTokenLiquidity = () => {\n  const assets = Object.values(markets);\n  let nativeOToken = \"\";\n  const calls = assets\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      address: market.underlyingToken.address,\n      name: \"balanceOf\",\n      params: [market.address],\n    }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _liquidity = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const oToken = markets[calls[i].params[0]];\n        _liquidity[oToken.address] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          oToken.underlyingToken.decimals\n        );\n      }\n      const provider = Ethers.provider();\n      if (nativeOToken) {\n        provider.getBalance(nativeOToken).then((rawBalance) => {\n          _liquidity[nativeOToken] = ethers.utils.formatUnits(\n            rawBalance._hex,\n            18\n          );\n          count++;\n          formatedData(\"getOTokenLiquidity\");\n        });\n      } else {\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getOTokenLiquidity();\n      }, 500);\n    }\n  );\n};\nconst getWalletBalance = () => {\n  let nativeOToken = \"\";\n  const underlyingTokens = Object.values(markets)\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n  const calls = underlyingTokens.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyingBalance = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyingBalance[underlyingTokens[i].oTokenAddress] =\n          ethers.utils.formatUnits(\n            res[i][0]._hex,\n            underlyingTokens[i].decimals\n          );\n      }\n      const provider = Ethers.provider();\n      provider.getBalance(account).then((rawBalance) => {\n        _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n          rawBalance._hex,\n          18\n        );\n        count++;\n        formatedData(\"underlyingTokens\");\n      });\n    },\n    () => {\n      setTimeout(() => {\n        getWalletBalance();\n      }, 500);\n    }\n  );\n};\nconst getCTokenData = (oToken) => {\n  if (oTokensLength === 0) return;\n  const calls = [\n    {\n      address: oToken.address,\n      name: \"exchangeRateStored\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalSupply\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalBorrows\",\n    },\n    {\n      address: oToken.address,\n      name: \"supplyRatePerBlock\",\n    },\n    {\n      address: oToken.address,\n      name: \"borrowRatePerBlock\",\n    },\n    {\n      address: oToken.address,\n      name: \"getAccountSnapshot\",\n      params: [account],\n    },\n  ];\n  multicallv2(\n    OTOKEN_ABI,\n    calls,\n    {},\n    (res) => {\n      oTokensLength--;\n      const exchangeRateStored = ethers.utils.formatUnits(\n        res[0][0]._hex,\n        10 + oToken.underlyingToken.decimals\n      );\n      const userSupply = ethers.utils.formatUnits(\n        res[5][1]._hex,\n        oToken.decimals\n      );\n      const totalSupply = ethers.utils.formatUnits(\n        res[1][0]._hex,\n        oToken.decimals\n      );\n      _cTokensData[oToken.address] = {\n        ...oToken,\n        exchangeRateStored,\n        totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n        totalBorrows: ethers.utils.formatUnits(\n          res[2][0]._hex,\n          oToken.underlyingToken.decimals\n        ),\n        supplyRatePerBlock: ethers.utils.formatUnits(res[3][0]._hex, 18),\n        borrowRatePerBlock: ethers.utils.formatUnits(res[4][0]._hex, 18),\n        userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n        userBorrow: ethers.utils.formatUnits(\n          res[5][2]._hex,\n          oToken.underlyingToken.decimals\n        ),\n      };\n      if (oTokensLength === 0) {\n        count++;\n        formatedData(\"oTokens data\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getCTokenData(oToken);\n      }, 500);\n    }\n  );\n};\n\nconst getCTokensData = () => {\n  Object.values(markets).forEach((market) => {\n    getCTokenData(market);\n  });\n};\n\nconst getCTokenReward = ({ price, cTokens, index }) => {\n  const token = cTokens[index];\n  const calls = [\n    {\n      address: unitrollerAddress,\n      name: \"compBorrowSpeeds\",\n      params: [token],\n    },\n    {\n      address: unitrollerAddress,\n      name: \"compSupplySpeeds\",\n      params: [token],\n    },\n  ];\n  multicallv2(\n    UNITROLLER_ABI,\n    calls,\n    {},\n    (res) => {\n      const borrow = Big(ethers.utils.formatUnits(res[0][0]._hex, 18)).mul(\n        price\n      );\n      const supply = Big(ethers.utils.formatUnits(res[1][0]._hex, 18)).mul(\n        price\n      );\n      _rewards[token] = {\n        borrow: borrow.mul(60 * 60 * 24 * 365),\n        supply: supply.mul(60 * 60 * 24 * 365),\n      };\n      if (index === cTokens.length - 1) {\n        count++;\n        formatedData(\"rewards\");\n      } else {\n        getCTokenReward({\n          price,\n          cTokens,\n          index: index + 1,\n        });\n      }\n    },\n    (err) => {\n      console.log(\"error-rewards\", err);\n    }\n  );\n};\n\nconst getRewards = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=sonne-finance&vs_currencies=usd\"\n  ).then((response) => {\n    const data = response.body || [];\n    const price = data[\"sonne-finance\"].usd;\n    const cTokens = Object.keys(markets);\n    getCTokenReward({\n      price,\n      cTokens,\n      index: 0,\n    });\n  });\n};\n\nconst init = () => {\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  // getRewards();\n};\n\ninit();\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Optimism.Lending.SonneData", "fact_widget_deployments_id": "0b9a17201a6cc66ce954300d9ea838d8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}