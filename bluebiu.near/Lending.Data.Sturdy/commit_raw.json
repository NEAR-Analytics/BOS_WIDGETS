{"tx_hash": "4eUnkyCgBjQYcSTK8gwgEX4AcPPQpK7SoUERT95avS4C", "action_id_social": "8TLUsGRB6ap16oVQBnW6GSQjF7A3P7cgNo7FZBDufQ6w-0-widget", "block_id": 119057903, "block_timestamp": "2024-05-16T16:40:17.454Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Sturdy", "source_code": "const {\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  dexConfig,\n  update,\n  onLoad,\n} = props;\nconst { rawMarkets, TOKENS } = dexConfig;\n\nconst ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrow\",\n    outputs: [\n      {\n        internalType: \"uint128\",\n        name: \"amount\",\n        type: \"uint128\",\n      },\n      {\n        internalType: \"uint128\",\n        name: \"shares\",\n        type: \"uint128\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalAssets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_address\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUserSnapshot\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_userAssetShares\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_userBorrowShares\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_userCollateralBalance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_shares\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"convertToAssets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_assets\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cleanLiquidationFee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maxLTV\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst { formatUnits } = ethers.utils;\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n  let count = 0;\n  let _balanceRes = [];\n  let _totalBorrowRes = [];\n  let _totalAssetsRes = [];\n  let _liquidationFeeRes = [];\n  let _maxLTVRes = [];\n  let _totalSupplyRes = [];\n  let _yourBorrows = [];\n  let _yourCollaterals = [];\n  let _yourLends = [];\n\n  function formatData(params) {\n    console.log(params, count);\n    if (count < 9) return;\n    count = 0;\n    for (let i = 0; i < rawMarkets.length; i++) {\n      rawMarkets[i].totalSupplied = formatUnits(\n        _totalSupplyRes[i][0],\n        rawMarkets[i].TOKEN_B.decimals\n      ).toString();\n      rawMarkets[i].totalBorrows = _totalBorrowRes[i]\n        ? _totalBorrowRes[i][0]\n        : 0;\n      rawMarkets[i].totalAssets = _totalAssetsRes[i]\n        ? _totalAssetsRes[i][0]\n        : 0;\n\n      rawMarkets[i].liquidationFee = formatUnits(_liquidationFeeRes[i][0], 5);\n      rawMarkets[i].maxLTV = formatUnits(_maxLTVRes[i][0], 5);\n\n      const yourBorrow = _yourBorrows[i]\n        ? formatUnits(_yourBorrows[i][0], rawMarkets[i].TOKEN_B.decimals)\n        : 0;\n      rawMarkets[i].yourBorrow = yourBorrow;\n      rawMarkets[i].yourBorrowUSD = Big(yourBorrow)\n        .times(Big(prices[rawMarkets[i].TOKEN_B.symbol] || 1))\n        .toFixed();\n\n      const yourCollateral = _yourCollaterals[i]\n        ? formatUnits(_yourCollaterals[i][0], rawMarkets[i].TOKEN_A.decimals)\n        : 0;\n      rawMarkets[i].yourCollateral = yourCollateral;\n      rawMarkets[i].yourCollateralUSD = Big(yourCollateral)\n        .times(Big(prices[rawMarkets[i].TOKEN_A.symbol] || 1))\n        .toFixed();\n      const yourLends = _yourLends[i]\n        ? formatUnits(_yourLends[i][0], rawMarkets[i].TOKEN_B.decimals)\n        : 0;\n\n      rawMarkets[i].yourLends = yourLends;\n      rawMarkets[i].yourLendsUSD = Big(yourLends)\n        .times(Big(prices[rawMarkets[i].TOKEN_B.symbol] || 1))\n        .toFixed();\n    }\n    for (let i = 0; i < rawMarkets.length; i++) {\n      rawMarkets[i].Utilization = Big(rawMarkets[i].totalBorrows)\n        .div(Big(rawMarkets[i].totalAssets))\n        .toFixed(4);\n    }\n\n    for (let i = 0; i < _balanceRes.length; i++) {\n      TOKENS[i].balance = formatUnits(\n        _balanceRes[i] ? _balanceRes[i][0] : 0,\n        TOKENS[i].decimals\n      );\n    }\n\n    const yourTotalCollateraledUSD = rawMarkets.reduce((total, item) => {\n      return Big(total).plus(Big(item.yourCollateralUSD)).toFixed();\n    }, 0);\n    const yourTotalBorrowUSD = rawMarkets.reduce((total, item) => {\n      return Big(total).plus(Big(item.yourBorrowUSD)).toFixed();\n    }, 0);\n    const yourTotalDepositUSD = rawMarkets.reduce((total, item) => {\n      return Big(total).plus(Big(item.yourLendsUSD)).toFixed();\n    }, 0);\n    onLoad({\n      markets: rawMarkets,\n      TOKENS,\n      yourTotalCollateraledUSD,\n      yourTotalBorrowUSD,\n      yourTotalDepositUSD,\n    });\n  }\n\n  function getTotalBorrow() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"totalBorrow\",\n      // params: [],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalBorrow_res\", res);\n        _totalBorrowRes = res;\n        count++;\n        formatData(\"getTotalBorrow\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalAssets_error:\", err);\n      });\n  }\n  function getTotalAssets() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"totalAssets\",\n      // params: [],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalAssets--\", res);\n        _totalAssetsRes = res;\n        count++;\n        formatData(\"getTotalAssets\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalAssets_error:\", err);\n      });\n  }\n\n  function getLiquidationFee() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"cleanLiquidationFee\",\n      // params: [],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"get cleanLiquidationFee--\", res);\n        _liquidationFeeRes = res;\n        count++;\n        formatData(\"getLiquidationFee\");\n      })\n      .catch((err) => {\n        console.log(\"getcleanLiquidationFee_error:\", err);\n      });\n  }\n\n  function getMaxLTV() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"maxLTV\",\n      // params: [],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"get getMaxLTV--\", res);\n        _maxLTVRes = res;\n        count++;\n        formatData(\"getMaxLTV\");\n      })\n      .catch((err) => {\n        console.log(\"get MaxLTV_error:\", err);\n      });\n  }\n  function getTotalSupply() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"totalSupply\",\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalSupply--\", res);\n        _totalSupplyRes = res;\n        count++;\n        formatData(\"getTotalSupply\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalSupply-error:\", err);\n      });\n  }\n\n  function getUserSnapshot() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"getUserSnapshot\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserSnapshot--\", res);\n        return res;\n      })\n      .then((snapshot) => {\n        const calls = rawMarkets.map((item, index) => {\n          const snapshotItem = snapshot[index] ? snapshot[index] : [0, 0, 0];\n          const [rest, borrowShares, collateralShares] = snapshotItem;\n          return {\n            address: item.POOL_MANAGER,\n            name: \"convertToAssets\",\n            params: [borrowShares],\n          };\n        });\n\n        multicall({\n          abi: ABI,\n          calls,\n          options: {},\n          multicallAddress,\n          provider: Ethers.provider(),\n        }).then((res) => {\n          // console.log(\"convertToAssets--\", res);\n          _yourBorrows = res;\n          count++;\n          formatData(\"getUserSnapshot\");\n        });\n        return snapshot;\n      })\n      .then((snapshot) => {\n        const calls = rawMarkets.map((item, index) => {\n          const snapshotItem = snapshot[index] ? snapshot[index] : [0, 0, 0];\n          const [rest, borrowShares, collateralShares] = snapshotItem;\n          return {\n            address: item.POOL_MANAGER,\n            name: \"convertToAssets\",\n            params: [collateralShares],\n          };\n        });\n\n        multicall({\n          abi: ABI,\n          calls,\n          options: {},\n          multicallAddress,\n          provider: Ethers.provider(),\n        }).then((res) => {\n          console.log(\"convertToAssets--\", res);\n          _yourCollaterals = res;\n          count++;\n          formatData(\"convertToAssets\");\n        });\n      })\n      .catch((err) => {\n        console.log(\"getUserSnapshot-error:\", err);\n      });\n  }\n  function getUserLends() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserLends--\", res);\n        return res;\n      })\n      .then((lendShare) => {\n        const calls = rawMarkets.map((item, index) => {\n          const _lendShare = lendShare[index] ? lendShare[index][0] : 0;\n          return {\n            address: item.POOL_MANAGER,\n            name: \"convertToAssets\",\n            params: [_lendShare],\n          };\n        });\n\n        multicall({\n          abi: ABI,\n          calls,\n          options: {},\n          multicallAddress,\n          provider: Ethers.provider(),\n        }).then((res) => {\n          console.log(\"convertToAssets--\", res);\n          _yourLends = res;\n          count++;\n          formatData(\"getUserLends\");\n        });\n      })\n\n      .catch((err) => {\n        console.log(\"getUserSnapshot-error:\", err);\n      });\n  }\n\n  function getWalletBalance() {\n    let nativeOToken = \"\";\n\n    const calls = TOKENS.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: [\n        {\n          constant: true,\n          inputs: [\n            {\n              name: \"_owner\",\n              type: \"address\",\n            },\n          ],\n          name: \"balanceOf\",\n          outputs: [\n            {\n              name: \"balance\",\n              type: \"uint256\",\n            },\n          ],\n          payable: false,\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"get_wallet_bal_res:\", res);\n        _balanceRes = res;\n        count++;\n        formatData(\"getWalletBalance\");\n      })\n      .catch((err) => {\n        console.log(\"getWalletBalance_error\", err);\n      });\n  }\n\n  getTotalBorrow();\n  getTotalAssets();\n  getLiquidationFee();\n  getMaxLTV();\n  getTotalSupply();\n  getUserSnapshot();\n  getUserLends();\n  getWalletBalance();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Sturdy", "fact_widget_deployments_id": "7e33abd27e06dcbfdf5d8c47e7ce2a1a", "inserted_timestamp": "2024-05-16T18:51:52.015Z", "modified_timestamp": "2024-05-16T18:51:52.015Z", "__row_index": 0}