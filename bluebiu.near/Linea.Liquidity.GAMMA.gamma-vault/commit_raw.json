{"tx_hash": "Dhp9t42KmrULNknDnuwi82Ww24pXjo9wrErevSUEpo76", "action_id_social": "B45Y286UXJmnsAnijw9mK9TR4gxVVznLUwx6jzAZvo7J-0-widget", "block_id": 104021364, "block_timestamp": "2023-10-23T09:18:51.092Z", "signer_id": "bluebiu.near", "widget_name": "Linea.Liquidity.GAMMA.gamma-vault", "source_code": "const {\n  addresses,\n  pairs,\n  proxyAddress,\n  defaultPair,\n  userPositions,\n  pair,\n  chainName,\n} = props;\n\nconst curPositionUSD = userPositions[addresses[pair.id]]?.balanceUSD;\n\nconst HStack = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst VStack = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  border-radius: 16px;\n  border: 1px solid #332c4b;\n  background-color: #181a27;\n  overflow: hidden;\n\n  @media (max-width: 736px) {\n    border: none;\n\n    background-color: transparent;\n  }\n`;\nconst VStackNoColor = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  border-radius: 16px;\n  overflow: hidden;\n`;\n\nconst Comment = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  margin-bottom: 12px;\n  color: ${(props) => (props.isError ? \"#E25D58\" : \"#7C7F96\")};\n`;\n\nconst { can_add_action, poolsData, handlePairClick } = props;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 350px;\n\n  font-family: \"Inter\";\n  color: #fff;\n  border-radius: 8px;\n  overflow: hidden;\n\n  input[type=\"number\"]::-webkit-outer-spin-button,\n  input[type=\"number\"]::-webkit-inner-spin-button,\n  input[type=\"number\"] {\n    -webkit-appearance: none;\n    margin: 0;\n    -moz-appearance: textfield !important;\n  }\n`;\n\nconst SliderContainer = styled.div`\n  margin: 0 auto;\n  position: relative;\n  width: 100%;\n  .slider {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 100%;\n    height: 10px;\n    border-radius: 10px;\n    outline: none;\n    background: #353749;\n    background-image: linear-gradient(#979abe, #979abe);\n    background-size: 0% 100%;\n    background-repeat: no-repeat;\n  }\n\n  .slider::-webkit-slider-runnable-track {\n    -webkit-appearance: none;\n    box-shadow: none;\n    border: none;\n    background: transparent;\n  }\n  .slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    background: #ffffff;\n\n    border: 2px solid #181a27;\n    border-radius: 50%;\n    cursor: pointer;\n  }\n\n  .quick-buttons {\n    margin-top: 10px;\n\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  .quick-button-100 {\n    margin-right: -5px;\n  }\n\n  .quick-button {\n    display: inline-block;\n    cursor: pointer;\n    color: #7c7f96;\n    font-size: 12px;\n  }\n\n  .quick-button-25 {\n    position: relative;\n    left: 5px;\n  }\n\n  .quick-button-50 {\n    position: relative;\n    left: 5px;\n  }\n\n  .quick-button-75 {\n    position: relative;\n    left: 5px;\n  }\n`;\n\nconst Info = styled.div`\n  background: #1d1e1f;\n  width: 320px;\n\n  font-family: \"Inter\";\n  color: #fff;\n  border-radius: 8px;\n  padding: 12px;\n  font-size: 14px;\n  text-align: center;\n`;\nconst SubWrapper = styled.div`\n  display: flex;\n  padding: 20px;\n  flex-direction: column;\n  justify-content: center;\n  gap: 32px;\n\n  /* background-color: #181a27; */\n\n  @media (max-width: 736px) {\n    background-color: #181a27;\n    border: 1px solid #332c4b;\n    border-radius: 16px;\n  }\n`;\nconst InputWrapper = styled.div`\n  display: flex;\n  position: relative;\n  flex-direction: column;\n  gap: 4px;\n  .title {\n    font-size: 14px;\n    color: #7c7f96;\n    .pair-filed {\n      color: #fff;\n    }\n  }\n\n  .input-info-filed {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 12px;\n  }\n\n  .price-filed {\n    color: rgb(124, 127, 150);\n  }\n\n  .balance {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    color: #7c7f96;\n    .v {\n      text-decoration: underline;\n      cursor: pointer;\n    }\n  }\n`;\n\nconst ArrowDownIcon = (\n  <svg\n    width=\"14\"\n    height=\"8\"\n    viewBox=\"0 0 14 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1 1L7 6L13 1\"\n      stroke=\"white\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n);\n\nconst InputFiledWrapper = styled.div`\n  border: none;\n  background: rgba(53, 55, 73, 0.5);\n  outline: none;\n  color: #fff;\n  padding-right: 12px;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  display: flex;\n\n  justify-content: space-between;\n\n  align-items: center;\n\n  .token-filed {\n    @media (min-width: 736px) {\n      display: none;\n    }\n\n    padding-right: 12px;\n\n    flex-shrink: 0;\n\n    white-space: nowrap;\n\n    gap: 8px;\n    color: #ffffff;\n    font-size: 15px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: right;\n  }\n`;\n\nconst Input = styled.input`\n  border: none;\n  outline: none;\n  color: #fff;\n  padding: 14px 12px;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  background: transparent;\n\n  @media (max-width: 736px) {\n    width: 100%;\n  }\n`;\n\nconst Button = styled.button`\n  background: #fff;\n  border-radius: 10px;\n  width: 100%;\n  border: none;\n  color: #0f1126;\n  padding: 8px 0;\n  font-weight: 700;\n  font-size: 16px;\n  position: relative;\n  height: 50px;\n  cursor: pointer;\n  &:disabled {\n    background: rgba(255, 255, 255, 0.3);\n    color: #ccc;\n    cursor: not-allowed;\n  }\n`;\nconst Tab = styled.div`\n  display: flex;\n  gap: 1px;\n\n  @media (max-width: 736px) {\n    border: 1px solid #332c4b;\n\n    border-radius: 10px;\n    overflow: hidden;\n\n    background: linear-gradient(0deg, #181a27, #181a27);\n\n    margin-bottom: 12px;\n  }\n`;\nconst TabItem = styled.div`\n  flex: 1;\n  padding: 16px 24px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  color: ${(props) => (props.isActive ? \"#fff\" : \"#7C7F96\")};\n  background: ${(props) => (props.isActive ? \"#181A27\" : \"#272838\")};\n  &:hover {\n    background: #181a27;\n  }\n\n  @media (max-width: 736px) {\n    padding: 10px 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\nconst MaxButton = styled.button`\n  position: absolute;\n  background: transparent;\n  border: none;\n  color: #fff;\n  padding: 8px;\n  font-size: 14px;\n  right: 0;\n  bottom: 28%;\n`;\n\nconst Spinner = styled.i`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin: calc(24px * -0.5) auto 0;\n  width: 24px;\n  height: 24px;\n  font-size: 24px;\n  line-height: 24px;\n  animation: spin 800ms infinite linear;\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst SelectPairs = styled.div`\n  background: #25273a;\n  position: fixed;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  bottom: 0;\n  left: 0;\n  flex-direction: column;\n\n  border-top-left-radius: 16px;\n  border-top-right-radius: 16px;\n\n  z-index: 1000;\n\n  .close-modal-icon {\n    display: flex;\n    align-items: end;\n    justify-content: end;\n    width: 100%;\n\n    padding-top: 20px;\n    padding-right: 20px;\n  }\n\n  max-height: 40vh;\n\n  overflow: auto;\n\n  .pair-line {\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 19px;\n    letter-spacing: 0em;\n    text-align: center;\n\n    padding: 12px 0;\n    color: white;\n    cursor: pointer;\n\n    :hover {\n      background: #181a27;\n    }\n    position: relative;\n\n    width: 100%;\n    .type-box {\n      border-radius: 13px;\n      min-width: 61px;\n      height: 26px;\n      font-size: 13px;\n      padding: 0px 6px;\n      position: absolute;\n\n      right: 24px;\n\n      top: 10px;\n\n      font-weight: 400;\n      line-height: 16px;\n      letter-spacing: 0em;\n      text-align: left;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      background: #d9d9d91a;\n    }\n  }\n`;\n\nfunction add_action(param_body) {\n  asyncFetch(\"https://test-api.dapdap.net/api/action/add-action-data\", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(param_body),\n  });\n}\n\nconst defaultDeposit = props.tab === \"deposit\" || !props.tab;\n\nState.init({\n  isDeposit: defaultDeposit,\n  lpBalance: \"\",\n  balances: [],\n  amount0: \"\",\n  amount1: \"\",\n  lpAmount: \"\",\n  isError: false,\n  isLoading: false,\n  isToken0Approved: true,\n  isToken1Approved: true,\n  isToken0Approving: false,\n  isToken1Approving: false,\n  loadingMsg: \"\",\n  isPostTx: false,\n  showPairs: false,\n});\n\nconst getFromDepositAmount = (depositAmount, tokenDecimal) => {\n  let a = new Big(depositAmount[0].toString());\n  let b = new Big(depositAmount[1].toString());\n\n  if (a.eq(0) && b.eq(0)) return \"0\";\n\n  let diff;\n  let midpoint;\n  if (a.gt(b)) {\n    diff = a.minus(b);\n    midpoint = diff.div(new Big(2)).plus(b);\n  } else {\n    diff = b.minus(a);\n    midpoint = diff.div(new Big(2)).plus(a);\n  }\n\n  for (let i = tokenDecimal; i > 0; i--) {\n    const midpointFixed = midpoint\n      .div(new Big(10).pow(tokenDecimal))\n      .toFixed(i);\n    if (\n      a.div(new Big(10).pow(tokenDecimal)).lte(midpointFixed) &&\n      b.div(new Big(10).pow(tokenDecimal)).gte(midpointFixed)\n    ) {\n      return midpointFixed;\n    }\n  }\n\n  return \"0\";\n};\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst { token0, token1, decimals0, decimals1, id } = props.pair || defaultPair;\nconst hypeAddress = addresses[id];\n\nconst updateLPBalance = () => {\n  const abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const vaultContract = new ethers.Contract(\n    hypeAddress,\n    abi,\n    Ethers.provider()\n  );\n  vaultContract.balanceOf(sender).then((balanceBig) => {\n    const adjustedBalance = ethers.utils.formatUnits(balanceBig, 18);\n    State.update({\n      lpBalance: adjustedBalance,\n    });\n  });\n};\nconst updateBalance = (token) => {\n  const { address, decimals, symbol } = token;\n\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(sender)\n      .then((balanceBig) => {\n        const adjustedBalance = ethers.utils.formatEther(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract.balanceOf(sender).then((balanceBig) => {\n      const adjustedBalance = ethers.utils.formatUnits(balanceBig, decimals);\n      State.update({\n        balances: {\n          ...state.balances,\n          [symbol]: adjustedBalance,\n        },\n      });\n    });\n  }\n};\n\nif (sender) {\n  [\n    { symbol: token0, address: addresses[token0], decimals: decimals0 },\n    { symbol: token1, address: addresses[token1], decimals: decimals1 },\n  ].map(updateBalance);\n\n  updateLPBalance();\n}\n\nconst {\n  isDeposit,\n  balances,\n  amount0,\n  amount1,\n  isLoading,\n  isError,\n  isToken0Approved,\n  isToken1Approved,\n  isToken0Approving,\n  isToken1Approving,\n  loadingMsg,\n  lpBalance,\n  lpAmount,\n  isPostTx,\n} = state;\n\nconst checkApproval = (token0Amount, token1Amount) => {\n  const token0Wei = new Big(ethers.utils.parseUnits(token0Amount, decimals0));\n  const token1Wei = new Big(ethers.utils.parseUnits(token1Amount, decimals1));\n\n  const abi = [\n    \"function allowance(address, address) external view returns (uint256)\",\n  ];\n\n  const token0Contract = new ethers.Contract(\n    addresses[token0],\n    abi,\n    Ethers.provider()\n  );\n\n  token0Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance0) => {\n      State.update({\n        isToken0Approved: !new Big(allowance0.toString()).lt(token0Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n\n  const token1Contract = new ethers.Contract(\n    addresses[token1],\n    abi,\n    Ethers.provider()\n  );\n\n  token1Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance1) => {\n      State.update({\n        isToken1Approved: !new Big(allowance1.toString()).lt(token1Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n};\n\nconst changeMode = (isDeposit) => {\n  State.update({ isDeposit });\n};\n\nconst handleMax = (isToken0) => {\n  if (isToken0) handleToken0Change(balances[token0]);\n  else handleToken1Change(balances[token1]);\n};\n\nconst handleToken0Change = (amount) => {\n  State.update({ amount0: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount1: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(amount, decimals0).toString();\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n\n  proxyContract\n    .getDepositAmount(hypeAddress, addresses[token0], token0Wei)\n    .then((depositAmount) => {\n      const amount1 = getFromDepositAmount(depositAmount, decimals1);\n      State.update({ amount1 });\n      State.update({ isLoading: false });\n      checkApproval(amount, amount1);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        amount1: 0,\n        loadingMsg: \"Something went wrong. Please try again.\",\n      });\n    });\n};\n\nconst handleToken1Change = (amount) => {\n  State.update({ amount1: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount0: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n  const token1Wei = ethers.utils.parseUnits(amount, decimals1).toString();\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n\n  proxyContract\n    .getDepositAmount(hypeAddress, addresses[token1], token1Wei)\n    .then((depositAmount) => {\n      const amount0 = getFromDepositAmount(depositAmount, decimals0);\n      State.update({ amount0 });\n      State.update({ isLoading: false });\n      checkApproval(amount0, amount);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        amount0: 0,\n        loadingMsg: \"Something went wrong. Please try again.\",\n      });\n    });\n};\n\nconst handleLPChange = (amount) => {\n  State.update({\n    lpAmount: amount,\n  });\n};\n\nconst handleApprove = (isToken0) => {\n  const _token = isToken0 ? token0 : token1;\n  const payload = isToken0\n    ? { isToken0Approving: true }\n    : { isToken1Approving: true };\n\n  State.update({\n    ...payload,\n    isLoading: true,\n    loadingMsg: `Approving ${_token}...`,\n  });\n\n  const tokenWei = ethers.utils.parseUnits(\n    isToken0 ? amount0 : amount1,\n    isToken0 ? decimals0 : decimals1\n  );\n\n  const abi = [\"function approve(address, uint) public\"];\n\n  const tokenContract = new ethers.Contract(\n    addresses[_token],\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  tokenContract\n    .approve(hypeAddress, tokenWei)\n    .then((tx) => tx.wait())\n    .then((receipt) => {\n      const payload = isToken0\n        ? { isToken0Approved: true, isToken0Approving: false }\n        : { isToken1Approved: true, isToken1Approving: false };\n\n      State.update({ ...payload, isLoading: false, loadingMsg: \"\" });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n    });\n};\n\nconst handleDeposit = () => {\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(amount0, decimals0);\n  const token1Wei = ethers.utils.parseUnits(amount1, decimals1);\n\n  const proxyAbi = [\n    \"function deposit(uint256, uint256,address,address,uint256[4] memory)  external returns (uint256)\",\n  ];\n\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider().getSigner()\n  );\n\n  proxyContract\n    .deposit(token0Wei, token1Wei, sender, hypeAddress, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      const uuid = Storage.get(\n        \"zkevm-warm-up-uuid\",\n        \"guessme.near/widget/ZKEVMWarmUp.generage-uuid\"\n      );\n\n      add_action({\n        action_title: `Deposit ${token0}-${token1} on Gamma`,\n        action_type: \"Deposit\",\n        action_tokens: JSON.stringify([token0, token1]),\n        action_amount: \"\",\n        account_id: sender,\n        action_network_id: chainName || \"zkEVM\",\n        account_info: uuid,\n        template: \"Gamma\",\n        action_status: status === 1 ? \"Success\" : \"Failed\",\n        action_switch: can_add_action ? 1 : 0,\n        tx_id: transactionHash,\n      });\n\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      const { refetch } = props;\n      if (refetch) refetch();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n    });\n};\n\nconst handleWithdraw = () => {\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Withdrawing...\",\n  });\n\n  const lpWeiAmount = ethers.utils.parseUnits(lpAmount, 18);\n  const abi = [\n    \"function withdraw(uint256, address, address,uint256[4] memory) external returns (uint256, uint256)\",\n  ];\n\n  const hypeContract = new ethers.Contract(\n    hypeAddress,\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  hypeContract\n    .withdraw(lpWeiAmount, sender, sender, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      const { status, transactionHash } = receipt;\n\n      const uuid = Storage.get(\n        \"zkevm-warm-up-uuid\",\n        \"guessme.near/widget/ZKEVMWarmUp.generage-uuid\"\n      );\n\n      add_action({\n        action_title: `Withdraw ${token0}-${token1} on Gamma`,\n        action_type: \"Withdraw\",\n        action_tokens: JSON.stringify([token0, token1]),\n        action_amount: lpAmount,\n        account_id: sender,\n        action_network_id: chainName || \"zkEVM\",\n        account_info: uuid,\n        template: \"Gamma\",\n        action_status: status === 1 ? \"Success\" : \"Failed\",\n        action_switch: can_add_action ? 1 : 0,\n        tx_id: transactionHash,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      const { refetch } = props;\n      if (refetch) refetch();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n    });\n};\n\nconst DELAY = 1000 * 60 * 5;\nconst timer = Storage.privateGet(\"priceTimer\");\nfunction getPrice() {\n  asyncFetch(\"https://test-api.dapdap.net/get-token-price-by-dapdap\")\n    .then((res) => {\n      const data = JSON.parse(res.body);\n      data.native = data.aurora;\n      delete data.aurora;\n      Storage.privateSet(\"tokensPrice\", data);\n      setTimeout(getPrice, DELAY);\n    })\n    .catch((err) => {\n      setTimeout(getPrice, DELAY);\n    });\n}\nif (!Storage.privateGet(\"priceTimer\")) {\n  getPrice();\n  Storage.privateSet(\"priceTimer\", 1);\n}\n\nconst tokensPrice = Storage.privateGet(\"tokensPrice\");\n\nconst Layer = styled.div`\n  position: fixed;\n  z-index: 999;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  background: rgba(20, 22, 43, 0.8);\n`;\n\nconst isInSufficient =\n  Number(amount0) > Number(balances[token0]) ||\n  Number(amount1) > Number(balances[token1]);\n\nconst isWithdrawInsufficient = Number(lpAmount) > Number(lpBalance);\n\nconst balance0 =\n  !amount0 || !tokensPrice?.[token0]\n    ? \"-\"\n    : parseFloat(Big(amount0).times(tokensPrice[token0]).toFixed(4));\n\nconst balance1 =\n  !amount1 || !tokensPrice?.[token1]\n    ? \"-\"\n    : parseFloat(Big(amount1).times(tokensPrice[token1]).toFixed(4));\n\nconst balanceLp =\n  !lpAmount || !lpBalance || !curPositionUSD\n    ? \"-\"\n    : parseFloat(\n        Big(lpAmount)\n          .div(lpBalance || 1)\n          .times(curPositionUSD)\n          .toFixed(4)\n      );\n\nconst onUpdateLpPercent = (percent) => {\n  State.update({\n    lpPercent: percent,\n  });\n};\n\nconst onChangeSlider = (percent) => {\n  console.log(\"percent: \", percent);\n  const newLpValue = Big(percent)\n    .div(100)\n    .times(lpBalance || 0)\n    .toFixed();\n\n  handleLPChange(newLpValue);\n};\n\nconsole.log(\"state.lpPercent: \", state.lpPercent);\n\nreturn (\n  <VStack>\n    <Wrapper>\n      <Tab>\n        <TabItem isActive={isDeposit} onClick={() => changeMode(true)}>\n          Deposit\n        </TabItem>\n        <TabItem isActive={!isDeposit} onClick={() => changeMode(false)}>\n          Withdraw\n        </TabItem>\n      </Tab>\n      {isDeposit ? (\n        <SubWrapper>\n          <InputWrapper>\n            <span className=\"title\">\n              Amount of\n              <span className=\"pair-filed\">{token0}</span>\n            </span>\n\n            <InputFiledWrapper>\n              <Input\n                value={amount0}\n                type=\"number\"\n                onChange={(e) => handleToken0Change(e.target.value)}\n              />\n\n              <div\n                className=\"token-filed\"\n                onClick={() =>\n                  State.update({\n                    showPairs: true,\n                  })\n                }\n              >\n                {token0}\n\n                {ArrowDownIcon}\n              </div>\n            </InputFiledWrapper>\n\n            <div className=\"input-info-filed\">\n              <div className=\"price-filed\">\u2248$ {balance0}</div>\n\n              <div className=\"balance\">\n                Balance:{\" \"}\n                <span onClick={() => handleMax(true)} className=\"v\">\n                  {balances[token0]}\n                </span>\n              </div>\n            </div>\n          </InputWrapper>\n          <InputWrapper>\n            <span className=\"title\">\n              Amount of\n              <span className=\"pair-filed\">{token1}</span>\n            </span>\n\n            <InputFiledWrapper>\n              <Input\n                value={amount1}\n                type=\"number\"\n                onChange={(e) => handleToken1Change(e.target.value)}\n              />\n\n              <div className=\"token-filed\">{token1}</div>\n            </InputFiledWrapper>\n\n            <div className=\"input-info-filed\">\n              <div className=\"price-filed\">\u2248$ {balance1}</div>\n\n              <div className=\"balance\">\n                Balance:{\" \"}\n                <span onClick={() => handleMax(false)} className=\"v\">\n                  {balances[token1]}\n                </span>\n              </div>\n            </div>\n          </InputWrapper>\n          <VStackNoColor>\n            {isLoading && <Comment isError={isError}>{loadingMsg}</Comment>}\n            {isInSufficient && <Button disabled>InSufficient Balance</Button>}\n            {!isInSufficient &&\n              (isToken0Approved &&\n              isToken1Approved &&\n              !isToken0Approving &&\n              !isToken1Approving ? (\n                <Button\n                  disabled={isLoading || !amount0 || !amount1}\n                  onClick={handleDeposit}\n                >\n                  {isLoading ? (\n                    <Spinner className=\"ph-bold ph-circle-notch\" />\n                  ) : (\n                    \"Deposit\"\n                  )}\n                </Button>\n              ) : (\n                <HStack>\n                  <Button\n                    disabled={isToken0Approved || isToken0Approving}\n                    onClick={() => handleApprove(true)}\n                  >\n                    {isToken0Approving ? (\n                      <Spinner className=\"ph-bold ph-circle-notch\" />\n                    ) : (\n                      <>\n                        {isToken0Approved ? \"Approved\" : \"Approve\"} {token0}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    disabled={isToken1Approved || isToken1Approving}\n                    onClick={() => handleApprove(false)}\n                  >\n                    {isToken1Approving ? (\n                      <Spinner className=\"ph-bold ph-circle-notch\" />\n                    ) : (\n                      <>\n                        {isToken1Approved ? \"Approved\" : \"Approve\"} {token1}\n                      </>\n                    )}\n                  </Button>\n                </HStack>\n              ))}\n          </VStackNoColor>\n        </SubWrapper>\n      ) : (\n        <SubWrapper>\n          <InputWrapper>\n            <span className=\"title\">\n              Amount of{\" \"}\n              <span className=\"pair-filed\">\n                {token0}-{token1}\n              </span>\n            </span>\n\n            <InputFiledWrapper>\n              <Input\n                value={lpAmount}\n                type=\"number\"\n                onChange={(e) => {\n                  handleLPChange(e.target.value);\n\n                  const value = e.target.value;\n\n                  if (!value) {\n                    onUpdateLpPercent(0);\n                  }\n\n                  if (value && Big(value).gt(0)) {\n                    const newSliderPercent = Big(value || 0)\n                      .div(lpBalance || 1)\n                      .times(100)\n                      .toFixed(0);\n                    onUpdateLpPercent(newSliderPercent);\n                  }\n                }}\n              />\n\n              <div className=\"token-filed-pc\">{`${token0}-${token1}`}</div>\n\n              <div\n                className=\"token-filed\"\n                onClick={() =>\n                  State.update({\n                    showPairs: true,\n                  })\n                }\n              >\n                {`${token0}-${token1}`}\n\n                {ArrowDownIcon}\n              </div>\n            </InputFiledWrapper>\n\n            <div className=\"input-info-filed\">\n              <div className=\"price-filed\">\n                \u2248$\n                {balanceLp}\n              </div>\n\n              <div className=\"balance\">\n                Balance:{\" \"}\n                <span\n                  onClick={() => {\n                    const newSliderPercent = Big(lpBalance || 0)\n                      .div(lpBalance || 1)\n                      .times(100)\n                      .toFixed(0);\n\n                    onUpdateLpPercent(newSliderPercent);\n\n                    handleLPChange(lpBalance);\n                  }}\n                  className=\"v\"\n                >\n                  {lpBalance}\n                </span>\n              </div>\n            </div>\n          </InputWrapper>\n\n          <SliderContainer>\n            <div class=\"slider-container\">\n              <input\n                type=\"range\"\n                id=\"slider\"\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                value={state.lpPercent || 0}\n                style={{\n                  backgroundSize: `${state.lpPercent}% 100%`,\n                }}\n                className=\"slider\"\n                onChange={(e) => {\n                  const percent = e.target.value;\n                  onChangeSlider(percent);\n                  onUpdateLpPercent(percent);\n                }}\n              />\n            </div>\n            <div class=\"quick-buttons\">\n              {[0, 25, 50, 75, 100].map((percent) => {\n                return (\n                  <div\n                    className={`quick-button quick-button-${percent}`}\n                    onClick={() => {\n                      onChangeSlider(percent);\n                      onUpdateLpPercent(percent);\n                    }}\n                  >\n                    {percent}%\n                  </div>\n                );\n              })}\n            </div>\n          </SliderContainer>\n\n          <VStack\n            style={{\n              border: \"none\",\n            }}\n          >\n            {isLoading && <Comment isError={isError}>{loadingMsg}</Comment>}\n\n            <Button\n              disabled={isWithdrawInsufficient || isLoading || !lpAmount}\n              onClick={handleWithdraw}\n            >\n              {isLoading ? (\n                <Spinner className=\"ph-bold ph-circle-notch\" />\n              ) : (\n                <>\n                  {isWithdrawInsufficient ? \"InSufficient Balance\" : \"Withdraw\"}\n                </>\n              )}\n            </Button>\n          </VStack>\n        </SubWrapper>\n      )}\n    </Wrapper>\n\n    {isPostTx && (\n      <Info>\n        If you dont see the updated balance in the table after 1 minute, please\n        click the refresh button above.\n      </Info>\n    )}\n\n    <Widget src=\"guessme.near/widget/ZKEVMWarmUp.generage-uuid\" />\n    {state.showPairs && poolsData && (\n      <SelectPairs>\n        <div className=\"close-modal-icon\">\n          <svg\n            width=\"12\"\n            height=\"12\"\n            viewBox=\"0 0 12 12\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            onClick={() => {\n              State.update({\n                showPairs: false,\n              });\n            }}\n          >\n            <path\n              d=\"M7.73284 6.00004L11.7359 1.99701C12.0368 1.696 12.0882 1.2593 11.8507 1.0219L10.9779 0.14909C10.7404 -0.0884125 10.3043 -0.0363122 10.0028 0.264491L6.00013 4.26743L1.99719 0.264591C1.69619 -0.036712 1.25948 -0.0884125 1.02198 0.14939L0.149174 1.0223C-0.0882276 1.2594 -0.0368271 1.6961 0.264576 1.99711L4.26761 6.00004L0.264576 10.0033C-0.0363271 10.3041 -0.0884276 10.7405 0.149174 10.978L1.02198 11.8509C1.25948 12.0884 1.69619 12.0369 1.99719 11.736L6.00033 7.73276L10.0029 11.7354C10.3044 12.037 10.7405 12.0884 10.978 11.8509L11.8508 10.978C12.0882 10.7405 12.0368 10.3041 11.736 10.0029L7.73284 6.00004Z\"\n              fill=\"#C0C4E9\"\n            />\n          </svg>\n        </div>\n\n        {pairs.map((pair) => {\n          const pairDisplay = `${pair.token0}-${pair.token1}`;\n\n          return (\n            <div\n              className=\"pair-line\"\n              style={{\n                background:\n                  activePair.id === pair.id ? \"rgba(24,26,39,0.3)\" : \"\",\n              }}\n              onClick={() => {\n                handlePairClick(pair);\n\n                State.update({\n                  showPairs: false,\n                });\n              }}\n            >\n              {pairDisplay}\n              <div className=\"type-box\">\n                {pair.strategy2 ? pair.strategy2 : pair.strategy}\n              </div>\n            </div>\n          );\n        })}\n      </SelectPairs>\n    )}\n\n    {state.showPairs && poolsData && (\n      <Layer\n        onClick={() => {\n          State.update({\n            showPairs: false,\n          });\n        }}\n      />\n    )}\n  </VStack>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Linea.Liquidity.GAMMA.gamma-vault", "fact_widget_deployments_id": "35f6c9f71ff49802f0fa11be492b800f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}