{"tx_hash": "6ZMvRN6RBTUrGU9GDwgPDrsU53NkK24YApis4UrfEBRZ", "action_id_social": "G6HRLWeYRJAmvNoPnB8H25Dta7fyk8NqT2YSSm3VBfML-0-widget", "block_id": 112164992, "block_timestamp": "2024-02-05T14:31:07.130Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.STEAKHUT", "source_code": "\nconst StyledColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst StyledRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst StyledVaultImage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst SvgIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &.icon-right {\n    position: absolute;\n    right: 28px;\n    top: 50%;\n    transform: translateY(-50%);\n\n    &.rotate {\n      transform: translateY(-50%) rotate(90deg);\n    }\n  }\n`\nconst TdTxt = styled.div`\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  &.gray {\n    color: #979ABE;\n    font-size: 12px;\n  }\n`\nconst PoolPercentage = styled.div`\n  padding: 3px 8px;\n  border-radius: 24px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\n\nconst StrategyTxt = styled.div`\n  padding: 7px 10px;\n  border-radius: 6px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst TitleText = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 32px;\n  color: #ffffff;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst ContainerLogin = styled.div`\n  display: flex;\n  max-width: 500px;\n\n  flex-direction: column;\n  margin: 80px auto auto auto;\n\n  .web3-connect {\n    width: 480px;\n    height: 60px;\n    border-radius: 10px;\n    background-color: #fff;\n    color: #0f1126;\n    font-size: 18px;\n    font-weight: 500;\n    border: none;\n    margin-top: 20px;\n  }\n\n  @media (max-width: 736px) {\n    max-width: 100%;\n    .web3-connect {\n      width: 100%;\n\n      font-size: 16px;\n      height: 40px;\n    }\n  }\n`;\nState.init({\n  allData: null,\n  loading: false,\n  dataList: [],\n  filterList: [],\n  dataIndex: -1,\n  categoryIndex: 0,\n  chainIndex: 0,\n  token: '',\n})\nconst IconRight = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"8\" height=\"10\" viewBox=\"0 0 8 10\" fill=\"none\">\n    <path d=\"M7.18407 4.21913C7.68448 4.61945 7.68448 5.38054 7.18407 5.78087L2.28485 9.70024C1.63009 10.2241 0.660156 9.75788 0.660156 8.91937L0.660156 1.08062C0.660156 0.242118 1.63009 -0.224055 2.28485 0.299756L7.18407 4.21913Z\" fill=\"#979ABE\" />\n  </svg>\n)\nconst {\n  CHAIN_LIST,\n  multicallAddress,\n  dexConfig,\n  curChain,\n  isChainSupported,\n  onSwitchChain,\n  prices\n} = props\nconst formatFiat = (value) => {\n  const number = Number(value).toLocaleString(\"en\", {\n    currency: \"USD\",\n    style: \"currency\",\n    compactDisplay: \"short\",\n    notation: \"compact\",\n    maximumFractionDigits: 2,\n  });\n  return number;\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) {\n  return (\n    <Widget\n      src=\"bluebiu.near/widget/Linea.Liquidity.ConnectButton\"\n      props={{\n        ...CONNECT_PROPS,\n        isWrongNetwork: false,\n      }}\n    />\n  );\n} else {\n  const index = CHAIN_LIST.findIndex(chain => chain.id === curChain.id)\n  if (index > -1) {\n    State.update({\n      chainIndex: index,\n    })\n  }\n}\n// const ALL_DATA_URL = 'https://api.thegraph.com/subgraphs/name/0xsirloin/steakhutlb'\nconst {\n  pairs,\n  addresses,\n  ALL_DATA_URL,\n  ICON_VAULT_MAP,\n  USER_DATA_BASE,\n  LAST_SNAP_SHOT_DATA_URL,\n} = {\n  ALL_DATA_URL: 'https://api.thegraph.com/subgraphs/name/0xsirloin/steakhutlb',\n  // USER_DATA_BASE: 'https://wire2.gamma.xyz/quickswap/polygon/user/',\n  LAST_SNAP_SHOT_DATA_URL: 'https://wire2.gamma.xyz/database/quickswap/polygon/hypervisors/lastSnapshot',\n  pairs: [{\n    id: \"SHLB_USDC.e-USDC_C\",\n    strategy: \"Balanced\",\n    strategy2: \"Concentrated\",\n    token0: \"USDC.e\",\n    token1: \"USDC\",\n  }, {\n    id: \"SHLB_USDT-USDC_B\",\n    strategy: \"Balanced\",\n    strategy2: \"Concentrated\",\n    token0: \"USDC.e\",\n    token1: \"USDC\",\n    ammName: 'QuickSwap',\n    ammImage: 'https://app.gamma.xyz/_next/static/media/icon.ea1fec4d.svg'\n  }, {\n    id: \"SHLB_USDC.e-USDC_C\",\n    strategy: \"Balanced\",\n    strategy2: \"Concentrated\",\n    token0: \"USDC.e\",\n    token1: \"USDC\",\n    ammName: 'QuickSwap',\n    ammImage: 'https://app.gamma.xyz/_next/static/media/icon.ea1fec4d.svg'\n  }],\n  addresses: {\n    'USDC.e': \"0xa7d7079b0fead91f3e65f86e8915cb59c1a4c664\",\n    'USDC': \"0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e\",\n    'USDt': '0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7',\n    'USDT.e': '0xc7198437980c041c805a1edcba50c1ce5db95118',\n    'JOE': '0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd',\n    'WAVAX': '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',\n    'WETH.e': '0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab',\n    'BTC.b': '0x152b9d0fdc40c096757f570a51e494bd4b943e50',\n\n    \"SHLB_USDC.e-USDC_C\": \"0x37e0f0513ae3d3c4403e7b11c8a15b06c7cb1412\",\n    \"SHLB_USDT-USDC_B\": \"0xb41506675a0977a34e8cec7da8c061d6753b5b03\",\n    \"SHLB_USDT-USDC_C\": \"0xc4bbd4ba96eaf7ccb3d0f2e0819b1f6e5c900b16\",\n    \"SHLB_USDT.e-USDt_B\": \"0x07462883abb2350e5243b94aeb27f4d37e3238e8\",\n    \"SHLB_USDT.e-USDt_C\": \"0x9f44e67ba256c18411bb041375e572e3dd11fa72\",\n    \"SHLB_USDC.e-USDC_B\": \"0x3b27aee8df3a3791eb57b59a770a530a93dc0221\",\n    \"SHLB_JOE-AVAX_B\": \"0x89547441489262feb5cee346fdacb9037c2574db\",\n    \"SHLB_AVAX-USDC_B\": \"0x668530302c6ecc4ebe693ec877b79300ac72527c\",\n    \"SHLB_WETH-AVAX_B\": \"0x9c9cea14731821f4d08889717043977e6dee766a\",\n    \"BTC.b/USDC_B\": \"0x9cc15d1204d768380cec8d35bc1d8e1945083397\",\n    \"SHLB_BTC.b-AVAX_B\": \"0x536d7e7423e8fb799549caf574cfa12aae95ffcd\",\n  },\n  ICON_VAULT_MAP: {\n    'USDC.e': 'https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0xB6076C93701D6a07266c31066B298AeC6dd65c2d/logo.png',\n    'USDC': '',\n    'USDt': ''\n  }\n}\nfunction fetchAllData() {\n  State.update({\n    loading: true\n  });\n  asyncFetch(ALL_DATA_URL).then((res) => {\n    if (!res.ok) return;\n    State.update({\n      allData: res.body,\n      loading: false\n    })\n  })\n}\nfunction fetchUserData() {\n  asyncFetch(USER_DATA_BASE + `${sender}`).then((res) => {\n    if (!res.ok) return;\n    State.update({\n      userPositions: res.body[sender],\n    });\n  });\n};\nfunction handleChangeDataIndex(index) {\n  State.update({\n    dataIndex: state.dataIndex > -1 ? -1 : index\n  })\n}\nfunction handleChangeCategoryIndex(index) {\n  State.update({\n    categoryIndex: index\n  })\n}\nfunction handleChangeChainIndex(index) {\n  const chain = CHAIN_LIST[index]\n  onSwitchChain({\n    chainId: `0x${Number(chain.chain_id).toString(16)}`,\n  });\n  State.update({\n    allData: null,\n    dataList: [],\n    categoryIndex: 0,\n    userPositions: null\n  })\n}\nfunction handleSearchInput(event) {\n  State.update({\n    token: event.target.value\n  })\n}\nuseEffect(() => {\n  if (state.dataList) {\n    let filterList = []\n    if (state.categoryIndex === 0) {\n      filterList = state.dataList.filter(data => {\n        const source = data.id.toUpperCase()\n        const target = (state.token || '').toUpperCase()\n        return source.indexOf(target) > -1\n      })\n    } else if (state.categoryIndex === 1 && state.userPositions) {\n      state.dataList.forEach(data => {\n        if (userPositions && addresses[data.id] in userPositions) {\n          filterList.push(data)\n        }\n      })\n    }\n    State.update({\n      filterList\n    })\n  }\n}, [state.dataList, state.token, state.categoryIndex])\nif (!state.allData) {\n  fetchAllData()\n}\nif (sender && state.userPositions === undefined) {\n  fetchUserData();\n}\nconst columnList = [{\n  width: '30%',\n  key: 'pool',\n  label: 'Pool',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <>\n        <StyledVaultImage>\n          <img style={{ marginRight: -6 }} src={ICON_VAULT_MAP[data.token0]} alt={data.token0} />\n          <img src={ICON_VAULT_MAP[data.token1]} alt={data.token1} />\n        </StyledVaultImage>\n        <TdTxt>{data.token0} / {data.token1}</TdTxt>\n        <PoolPercentage>{data.fee}%</PoolPercentage>\n      </>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'chain',\n  label: 'Chain',\n  type: 'slot',\n  render: () => <img style={{ width: 26 }} src={curChain.logo} alt={curChain.name} />\n}, {\n  width: '20%',\n  key: 'amm',\n  label: 'AMM',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <>\n        <img src={data.ammImage} alt={data.ammName} style={{ width: 22 }} />\n        <TdTxt>{data.ammName}</TdTxt>\n      </>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'strategy',\n  label: 'Strategy',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <StrategyTxt>{data.strategy2 ? data.strategy2 : data.strategy}</StrategyTxt>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'tvlUSD',\n  label: 'TVL',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <TdTxt>{formatFiat(data.tvlUSD)}</TdTxt>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'totalApr',\n  label: 'Total APR',\n}, {\n  width: '10%',\n  direction: 'column',\n  key: 'liquidity',\n  label: 'Your Liquidity',\n  type: 'slot',\n  render: (data, index) => {\n    const userPositions = state.userPositions\n    const userBalance = userPositions && addresses[data.id] in userPositions\n      ? userPositions[addresses[data.id]].balanceUSD\n      : undefined;\n    return (\n      <>\n        <TdTxt>{userBalance ? `${formatFiat(userBalance)}` : \"-\"}</TdTxt>\n        {data.liquidity && <TdTxt className=\"gray\">{data.liquidity} LP</TdTxt>}\n        <SvgIcon className={[\"icon-right\", index === state.dataIndex ? \"rotate\" : \"\"]}>\n          {IconRight}\n        </SvgIcon>\n      </>\n    )\n  }\n}]\n\nreturn (\n  <StyledColumn>\n    {state.allData && (\n      <Widget\n        src={\"bluebiu.near/widget/Liquidity.Data.Gamma\"}\n        props={{\n          pairs,\n          addresses,\n          allData: state.allData,\n          prices,\n          curChain,\n          multicallAddress,\n          LAST_SNAP_SHOT_DATA_URL,\n          onLoad: (data) => {\n            State.update({\n              dataList: data.dataList,\n              loading: false\n            })\n          }\n        }}\n      />\n    )}\n    {/* <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.Logo\"}\n    /> */}\n    <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.Filter\"}\n      props={{\n        token: state.token,\n        chains: CHAIN_LIST,\n        categoryIndex: state.categoryIndex,\n        chainIndex: state.chainIndex,\n        onSearchInput: handleSearchInput,\n        onChangeCategoryIndex: handleChangeCategoryIndex,\n        onChangeChainIndex: handleChangeChainIndex,\n      }}\n    />\n    <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.List\"}\n      props={{\n        columnList,\n        loading: state.loading,\n        dataIndex: state.dataIndex,\n        onChangeDataIndex: handleChangeDataIndex,\n        dataList: state.filterList,\n        addresses,\n        multicallAddress,\n        ICON_VAULT_MAP\n      }}\n    />\n    {!isChainSupported && (\n      <Widget\n        src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n        props={{\n          chain: curChain,\n          onSwitchChain: onSwitchChain,\n          switchingChain: switchingChain,\n          theme: dexConfig.theme?.button,\n        }}\n      />\n    )}\n  </StyledColumn>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.STEAKHUT", "fact_widget_deployments_id": "b2f6f4a250526f9d1d1c1638e3ea234a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}