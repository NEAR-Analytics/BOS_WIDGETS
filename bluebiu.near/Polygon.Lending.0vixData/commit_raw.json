{"tx_hash": "8YAsitY8wNNwDikYfmBa6VEyUDKEjU2jdn7xFTyEQjQb", "action_id_social": "22WAzQNKo6zXSXurHZt4fQSenp7HrzMT25AY2uy1TWuc-0-widget", "block_id": 104308560, "block_timestamp": "2023-10-27T10:29:37.154Z", "signer_id": "bluebiu.near", "widget_name": "Polygon.Lending.0vixData", "source_code": "const markets = {\n  \"0xb2D9646A1394bf784E376612136B3686e74A325F\": {\n    underlyingToken: {\n      address: \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n      decimals: 18,\n      symbol: \"WETH\",\n    },\n    decimals: 8,\n    symbol: \"oWETH\",\n    address: \"0xb2D9646A1394bf784E376612136B3686e74A325F\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibspnls7q67q25r2ifv2rrfmvzl744pzuh3s5ekigeqkmyycl2auq\",\n  },\n  \"0xEBb865Bf286e6eA8aBf5ac97e1b56A76530F3fBe\": {\n    underlyingToken: {\n      address: \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n      decimals: 6,\n      symbol: \"USDC\",\n    },\n    decimals: 8,\n    symbol: \"oUSDC\",\n    address: \"0xEBb865Bf286e6eA8aBf5ac97e1b56A76530F3fBe\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreie4jihoa76mgyzxhw2yrapihzu2qhkjz6m7u4opoxjebzg6zc2lla\",\n  },\n  \"0xf06eda703c62b9889c75dccde927b93bde1ae654\": {\n    underlyingToken: {\n      address: \"0x03b54a6e9a984069379fae1a4fc4dbae93b3bccd\",\n      decimals: 18,\n      symbol: \"wstETH\",\n    },\n    decimals: 8,\n    symbol: \"owstETH\",\n    address: \"0xf06eda703c62b9889c75dccde927b93bde1ae654\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibukwahpp2ei74ax5acm6p7uwcnbsfvdzkizsdzqu26yfbxndpvra\",\n  },\n  \"0x1372c34acC14F1E8644C72Dad82E3a21C211729f\": {\n    underlyingToken: {\n      address: \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\",\n      decimals: 6,\n      symbol: \"USDT\",\n    },\n    decimals: 8,\n    symbol: \"oUSDT\",\n    address: \"0x1372c34acC14F1E8644C72Dad82E3a21C211729f\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreih45jy7ggj45ck34rf736kb67smsoa52wd7e46c2grh6etd3bhe5i\",\n  },\n  \"0x6F063Fe661d922e4fd77227f8579Cb84f9f41F0B\": {\n    underlyingToken: {\n      address: \"0x91993f2101cc758d0deb7279d41e880f7defe827\",\n      decimals: 18,\n      symbol: \"gDAI\",\n    },\n    decimals: 8,\n    symbol: \"oGDAI\",\n    address: \"0x6F063Fe661d922e4fd77227f8579Cb84f9f41F0B\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreidyl5mh5janomilkrfyv5e6igjqtb44ku6kplmtfw27zekugek43u\",\n  },\n  \"0xDc3C5E5c01817872599e5915999c0dE70722D07f\": {\n    underlyingToken: {\n      address: \"0x3a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4\",\n      decimals: 18,\n      symbol: \"stMATIC\",\n    },\n    decimals: 8,\n    symbol: \"ostMATIC\",\n    address: \"0xDc3C5E5c01817872599e5915999c0dE70722D07f\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibasgci4r7u34vv4qhzmhgahgnuzzy7jlgojysnkroqio7yc237se\",\n  },\n  \"0x3B9128Ddd834cE06A60B0eC31CCfB11582d8ee18\": {\n    underlyingToken: {\n      address: \"0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6\",\n      decimals: 8,\n      symbol: \"WBTC\",\n    },\n    decimals: 8,\n    symbol: \"oWBTC\",\n    address: \"0x3B9128Ddd834cE06A60B0eC31CCfB11582d8ee18\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreigdklwcldjo4w7viyrym54hdb43wgpv23mbicetszygzapttbgo7q\",\n  },\n  \"0xE554E874c9c60E45F1Debd479389C76230ae25A8\": {\n    underlyingToken: {\n      address: \"native\",\n      decimals: 18,\n      symbol: \"MATIC\",\n    },\n    decimals: 8,\n    symbol: \"oMatic\",\n    address: \"0xE554E874c9c60E45F1Debd479389C76230ae25A8\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreih5yowurclpyrr5bwzonh76ywld22riv4mjp2scne6ye7746dcjl4\",\n  },\n  \"0x2175110F2936bf630a278660E9B6E4EFa358490A\": {\n    underlyingToken: {\n      address: \"0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\",\n      decimals: 18,\n      symbol: \"DAI\",\n    },\n    decimals: 8,\n    symbol: \"oDai\",\n    address: \"0x2175110F2936bf630a278660E9B6E4EFa358490A\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreieuxntkdzi2mzkzdcbk6kahwxqpftxnipxcwc4oe4p4jm2rhj2xhu\",\n  },\n  \"0xAAcc5108419Ae55Bc3588E759E28016d06ce5F40\": {\n    underlyingToken: {\n      address: \"0xfa68fb4628dff1028cfec22b4162fccd0d45efb6\",\n      decimals: 18,\n      symbol: \"MaticX\",\n    },\n    decimals: 8,\n    symbol: \"oMATICX\",\n    address: \"0xAAcc5108419Ae55Bc3588E759E28016d06ce5F40\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiehdd3jx2dmv7wky3v254e2ltbf5x3uexsrkwr6dmv43q7gtow33i\",\n  },\n  \"0xC57E5e261d49Af3026446de3eC381172f17bB799\": {\n    underlyingToken: {\n      address: \"0xa3fa99a148fa48d14ed51d610c367c61876997f1\",\n      decimals: 18,\n      symbol: \"MAI\",\n    },\n    decimals: 8,\n    symbol: \"oMAI\",\n    address: \"0xC57E5e261d49Af3026446de3eC381172f17bB799\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiavgjilh3v3pss6tlwggljopf2vw5np7x37evcjbxkdb5s3xb6ice\",\n  },\n};\n\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateStored\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerTimestamp\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerTimestamp\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      { internalType: \"bool\", name: \"autoCollaterize\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountLiquidity\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  oracleAddress,\n  account,\n  update,\n  dapp,\n  onLoad,\n} = props;\nif (!markets || !multicallAddress || !unitrollerAddress || !update) return \"\";\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nlet _cTokensData = {};\nlet _loanToValue = null;\nlet _underlyPrice = {};\nlet _liquidity = null;\nlet _underlyingBalance = null;\nlet _userMerberShip = null;\nlet count = 0;\nlet oTokensLength = Object.values(markets).length;\n\nconst formatedData = (key) => {\n  if (count < 5) return;\n  count = 0;\n  oTokensLength = Object.values(markets).length;\n  let totalSupplyUsd = Big(0);\n  let totalBorrowUsd = Big(0);\n  let userTotalSupplyUsd = Big(0);\n  let userTotalBorrowUsd = Big(0);\n  let totalCollateralUsd = Big(0);\n  const markets = {};\n  Object.values(_cTokensData).map((market) => {\n    const underlyingPrice = _underlyPrice[market.address];\n    totalSupplyUsd = totalSupplyUsd.plus(\n      Big(market.totalSupply).mul(underlyingPrice)\n    );\n    totalBorrowUsd = totalBorrowUsd.plus(\n      Big(market.totalBorrows).mul(underlyingPrice)\n    );\n    userTotalSupplyUsd = userTotalSupplyUsd.plus(\n      Big(market.userSupply).mul(underlyingPrice)\n    );\n    userTotalBorrowUsd = userTotalBorrowUsd.plus(\n      Big(market.userBorrow).mul(underlyingPrice)\n    );\n    if (_userMerberShip[market.address]) {\n      totalCollateralUsd = totalCollateralUsd.plus(\n        Big(market.userSupply)\n          .mul(underlyingPrice)\n          .mul(_loanToValue[market.address])\n          .div(100)\n      );\n    }\n    const supplyApy = Big(market.supplyRatePerTimestamp)\n      .mul(60 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      .mul(100)\n      .toFixed(2);\n    const borrowApy = Big(market.borrowRatePerTimestamp)\n      .mul(60 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      .mul(100)\n      .toFixed(2);\n    markets[market.address] = {\n      ...market,\n      loanToValue: _loanToValue[market.address],\n      liquidity: _liquidity[market.address],\n      underlyingPrice: underlyingPrice,\n      userUnderlyingBalance: _underlyingBalance[market.address],\n      userMerberShip: _userMerberShip[market.address],\n      supplyApy: supplyApy + \"%\",\n      borrowApy: borrowApy + \"%\",\n      dapp,\n    };\n  });\n\n  onLoad({\n    markets,\n    totalSupplyUsd: totalSupplyUsd.toString(),\n    totalBorrowUsd: totalBorrowUsd.toString(),\n    userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n    userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n    totalCollateralUsd: totalCollateralUsd.toString(),\n  });\n};\n\nconst getDataFromGecko = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=matic-network,usd-coin,tether,ethereum,bitcoin,ethereum&order=market_cap_desc&sparkline=false&locale=en&precision=full\"\n  ).then((res) => {\n    const data = res.body || [];\n    Object.values(markets).forEach((market) => {\n      _underlyPrice[market.address] = data.find(\n        (item) => item.id === market.geckoId\n      )?.current_price;\n    });\n    count++;\n    formatedData(\"getDataFromGecko\");\n  });\n};\nconst getUnitrollerData = () => {\n  const calls = [];\n  const oTokens = Object.values(markets);\n  oTokens.forEach((token) => {\n    calls.push({\n      address: unitrollerAddress,\n      name: \"markets\",\n      params: [token.address],\n    });\n    if (account) {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"checkMembership\",\n        params: [account, token.address],\n      });\n    }\n  });\n  multicallv2(\n    UNITROLLER_ABI,\n    calls,\n    {},\n    (res) => {\n      _loanToValue = {};\n      _userMerberShip = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const index = Math.floor(i / (account ? 2 : 1));\n        const mod = i % (account ? 2 : 1);\n        switch (mod) {\n          case 0:\n            _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n              res[i][2]._hex,\n              16\n            );\n            break;\n          case 1:\n            _userMerberShip[oTokens[index].address] = res[i][0];\n            break;\n          default:\n        }\n      }\n      count++;\n      formatedData(\"getUnitrollerData\");\n    },\n    (err) => {\n      setTimeout(() => {\n        getUnitrollerData();\n      }, 1000);\n    }\n  );\n};\nconst getUnderlyPrice = () => {\n  if (!oracleAddress) return;\n  const oTokens = Object.keys(markets);\n  const calls = oTokens.map((token) => ({\n    address: oracleAddress,\n    name: \"getUnderlyingPrice\",\n    params: [token],\n  }));\n  multicallv2(\n    ORACLE_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyPrice = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          36 - markets[oTokens[i]].underlyingToken.decimals\n        );\n      }\n      count++;\n      formatedData(\"getUnderlyPrice\");\n    },\n    () => {\n      getDataFromGecko();\n    }\n  );\n};\nconst getOTokenLiquidity = () => {\n  const assets = Object.values(markets);\n  let nativeOToken = \"\";\n  const calls = assets\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      address: market.underlyingToken.address,\n      name: \"balanceOf\",\n      params: [market.address],\n    }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _liquidity = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const oToken = markets[calls[i].params[0]];\n        _liquidity[oToken.address] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          oToken.underlyingToken.decimals\n        );\n      }\n      const provider = Ethers.provider();\n\n      provider.getBalance(nativeOToken).then((rawBalance) => {\n        _liquidity[nativeOToken] = ethers.utils.formatUnits(\n          rawBalance._hex,\n          18\n        );\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      });\n    },\n    () => {\n      setTimeout(() => {\n        getOTokenLiquidity();\n      }, 500);\n    }\n  );\n};\nconst getWalletBalance = () => {\n  if (!account) {\n    _balance = {};\n    return;\n  }\n  let nativeOToken = \"\";\n  const underlyingTokens = Object.values(markets)\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n  const calls = underlyingTokens.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyingBalance = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyingBalance[underlyingTokens[i].oTokenAddress] =\n          ethers.utils.formatUnits(\n            res[i][0]._hex,\n            underlyingTokens[i].decimals\n          );\n      }\n      const provider = Ethers.provider();\n      provider.getBalance(account).then((rawBalance) => {\n        _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n          rawBalance._hex,\n          18\n        );\n        count++;\n        formatedData(\"underlyingTokens\");\n      });\n    },\n    () => {\n      setTimeout(() => {\n        getWalletBalance();\n      }, 500);\n    }\n  );\n};\nconst getCTokenData = (oToken) => {\n  if (oTokensLength === 0) return;\n  const calls = [\n    {\n      address: oToken.address,\n      name: \"exchangeRateStored\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalSupply\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalBorrows\",\n    },\n    {\n      address: oToken.address,\n      name: \"supplyRatePerTimestamp\",\n    },\n    {\n      address: oToken.address,\n      name: \"borrowRatePerTimestamp\",\n    },\n    {\n      address: oToken.address,\n      name: \"getAccountSnapshot\",\n      params: [account],\n    },\n  ];\n  multicallv2(\n    OTOKEN_ABI,\n    calls,\n    {},\n    (res) => {\n      oTokensLength--;\n      const exchangeRateStored = ethers.utils.formatUnits(\n        res[0][0]._hex,\n        10 + oToken.underlyingToken.decimals\n      );\n      const userSupply = ethers.utils.formatUnits(\n        res[5][1]._hex,\n        oToken.decimals\n      );\n      const totalSupply = ethers.utils.formatUnits(\n        res[1][0]._hex,\n        oToken.decimals\n      );\n      _cTokensData[oToken.address] = {\n        ...oToken,\n        exchangeRateStored,\n        totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n        totalBorrows: ethers.utils.formatUnits(\n          res[2][0]._hex,\n          oToken.underlyingToken.decimals\n        ),\n        supplyRatePerTimestamp: ethers.utils.formatUnits(res[3][0]._hex, 18),\n        borrowRatePerTimestamp: ethers.utils.formatUnits(res[4][0]._hex, 18),\n        userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n        userBorrow: ethers.utils.formatUnits(\n          res[5][2]._hex,\n          oToken.underlyingToken.decimals\n        ),\n      };\n      if (oTokensLength === 0) {\n        count++;\n        formatedData(\"oTokens data\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getCTokenData(oToken);\n      }, 500);\n    }\n  );\n};\n\nconst getCTokensData = () => {\n  Object.values(markets).forEach((market) => {\n    getCTokenData(market);\n  });\n};\n\nconst init = () => {\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n};\n\ninit();\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Polygon.Lending.0vixData", "fact_widget_deployments_id": "625702cf725c5233f529335546192032", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}