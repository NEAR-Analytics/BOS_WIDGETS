{"tx_hash": "ByPNXJ7vu31fgm4LsMiPHkrCjVzj2AHGbAeEKdRcpEfr", "action_id_social": "79P8i8HsvAdcJSuQb84haHTYpnBPcgYB2rrjCXgrtfPH-0-widget", "block_id": 116671462, "block_timestamp": "2024-04-12T08:34:08.104Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Venus", "source_code": "const OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n      { internalType: \"bool\", name: \"isQied\", type: \"bool\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"supplyRewardSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"borrowRewardSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"venusBorrowSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"venusSupplySpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst REWARD_PRIME_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"market\", type: \"address\" },\n      { internalType: \"address\", name: \"user\", type: \"address\" },\n      { internalType: \"uint256\", name: \"borrow\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"supply\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"xvsStaked\", type: \"uint256\" },\n    ],\n    name: \"estimateAPR\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"supplyAPR\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"borrowAPR\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"totalScore\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"userScore\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"xvsBalanceForScore\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"capital\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"cappedSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"cappedBorrow\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"supplyCapUSD\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"borrowCapUSD\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IPrime.APRInfo\",\n        name: \"aprInfo\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"address\", name: \"holder\", type: \"address\" },\n      {\n        internalType: \"contract ComptrollerInterface\",\n        name: \"comptroller\",\n        type: \"address\",\n      },\n    ],\n    name: \"pendingRewards\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"distributorAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"rewardTokenAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"totalRewards\",\n            type: \"uint256\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"vTokenAddress\",\n                type: \"address\",\n              },\n              { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n            ],\n            internalType: \"struct VenusLens.PendingReward[]\",\n            name: \"pendingRewards\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct VenusLens.RewardSummary\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  rewardPrimeAddress,\n  oracleAddress,\n  rewardAddress,\n  account,\n  update,\n  name,\n  onLoad,\n  multicall,\n  markets,\n  rewardsPrimeData,\n  rewardToken,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\n\n  let _cTokensData = {};\n  let _loanToValue = null;\n  let _underlyPrice = {};\n  let _liquidity = null;\n  let _underlyingBalance = null;\n  let _userMerberShip = null;\n  let count = 0;\n  let _accountRewards = Big(0);\n  const _rewardsPrimeApy = {};\n  const _rewardsSupplyRate = {};\n  const _rewardsBorrowRate = {};\n\n  let oTokensLength = Object.values(markets).length;\n\n  const formatedData = (key) => {\n    console.log(`${name}-${key}`, count);\n    if (count < 6) return;\n    count = 0;\n    oTokensLength = Object.values(markets).length;\n    let totalSupplyUsd = Big(0);\n    let totalBorrowUsd = Big(0);\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n    let totalAccountDistributionApy = Big(0);\n    const rewardPrice = prices[rewardToken.symbol] || 12.28;\n    const markets = {};\n    Object.values(_cTokensData).forEach((market) => {\n      const underlyingPrice = _underlyPrice[market.address] || 1;\n      const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n      const marketBorrowUsd = Big(market.totalBorrows || 0).mul(\n        underlyingPrice\n      );\n      totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n      totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(\n        Big(market.userSupply).mul(underlyingPrice)\n      );\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(\n        Big(market.userBorrow).mul(underlyingPrice)\n      );\n      if (_userMerberShip[market.address]) {\n        totalCollateralUsd = totalCollateralUsd.plus(\n          Big(market.userSupply)\n            .mul(underlyingPrice)\n            .mul(_loanToValue[market.address])\n            .div(100)\n        );\n      }\n      const supplyApy = Big(market.supplyRatePerBlock)\n        .mul(20 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .mul(100);\n\n      const borrowApy = Big(market.borrowRatePerBlock)\n        .mul(20 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .mul(100);\n\n      let distributionApy = [];\n\n      const distributionSupplyApy = marketSupplyUsd.eq(0)\n        ? 0\n        : Big(_rewardsSupplyRate[market.address])\n            .mul(20 * 60 * 24)\n            .mul(12.28)\n            .div(marketSupplyUsd)\n            .plus(1)\n            .pow(365)\n            .minus(1)\n            .mul(100)\n            .plus(_rewardsPrimeApy[market.address]?.supplyApy || 0)\n            .toFixed(2);\n\n      const distributionBorrowApy = marketBorrowUsd.eq(0)\n        ? 0\n        : Big(_rewardsBorrowRate[market.address])\n            .mul(20 * 60 * 24)\n            .mul(rewardPrice)\n            .div(marketBorrowUsd)\n            .plus(1)\n            .pow(365)\n            .minus(1)\n            .mul(100)\n            .plus(_rewardsPrimeApy[market.address]?.borrowApy || 0)\n            .toFixed(2);\n\n      totalAccountDistributionApy = totalAccountDistributionApy\n        .plus(distributionSupplyApy)\n        .plus(distributionBorrowApy);\n\n      distributionApy.push({\n        ...rewardToken,\n        supply: distributionSupplyApy + \"%\",\n        borrow: distributionBorrowApy + \"%\",\n      });\n\n      markets[market.address] = {\n        ...market,\n        loanToValue: _loanToValue[market.address],\n        liquidity: _liquidity[market.address],\n        underlyingPrice: underlyingPrice,\n        userUnderlyingBalance: _underlyingBalance[market.address],\n        userMerberShip: _userMerberShip[market.address],\n        supplyApy: supplyApy.toFixed(2) + \"%\",\n        borrowApy: borrowApy.toFixed(2) + \"%\",\n        dapp: name,\n        distributionApy,\n      };\n    });\n\n    let rewards = [];\n    if (_accountRewards.gt(0)) {\n      const dailyRewards = totalAccountDistributionApy\n        .mul(userTotalSupplyUsd.add(userTotalBorrowUsd))\n        .div(365 * 100)\n        .div(rewardPrice);\n      rewards.push({\n        ...rewardToken,\n        dailyRewards: dailyRewards.toString(),\n        price: rewardPrice,\n        unclaimed: _accountRewards.toFixed(rewardToken.decimals),\n      });\n    }\n\n    onLoad({\n      markets,\n      rewards,\n      totalSupplyUsd: totalSupplyUsd.toString(),\n      totalBorrowUsd: totalBorrowUsd.toString(),\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      totalCollateralUsd: totalCollateralUsd.toString(),\n    });\n  };\n  const getUnitrollerData = () => {\n    const calls = [];\n    const oTokens = Object.values(markets);\n    oTokens.forEach((token) => {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"markets\",\n        params: [token.address],\n      });\n      calls.push({\n        address: unitrollerAddress,\n        name: \"checkMembership\",\n        params: [account, token.address],\n      });\n      calls.push({\n        address: unitrollerAddress,\n        name: \"venusSupplySpeeds\",\n        params: [token.address],\n      });\n      calls.push({\n        address: unitrollerAddress,\n        name: \"venusBorrowSpeeds\",\n        params: [token.address],\n      });\n    });\n\n    multicall({\n      abi: UNITROLLER_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _loanToValue = {};\n        _userMerberShip = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const index = Math.floor(i / 4);\n          const mod = i % 4;\n          switch (mod) {\n            case 0:\n              _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n                res[i][1]._hex,\n                16\n              );\n              break;\n            case 1:\n              _userMerberShip[oTokens[index].address] = res[i][0] || false;\n              break;\n            case 2:\n              _rewardsSupplyRate[oTokens[index].address] =\n                ethers.utils.formatUnits(res[i][0]?._hex || 0, 18);\n            case 3:\n              _rewardsBorrowRate[oTokens[index].address] =\n                ethers.utils.formatUnits(res[i][0]?._hex || 0, 18);\n            default:\n          }\n        }\n        count++;\n        formatedData(\"getUnitrollerData\");\n      })\n      .catch((err) => {\n        console.log(\"error-getUnitrollerData\", err);\n        // setTimeout(() => {\n        //   getUnitrollerData();\n        // }, 1000);\n      });\n  };\n  const getUnderlyPrice = () => {\n    if (!oracleAddress) return;\n    const oTokens = Object.keys(markets);\n    const calls = oTokens.map((token) => ({\n      address: oracleAddress,\n      name: \"getUnderlyingPrice\",\n      params: [token],\n    }));\n    multicall({\n      abi: ORACLE_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyPrice = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            36 - markets[oTokens[i]].underlyingToken.decimals\n          );\n        }\n        count++;\n        formatedData(\"getUnderlyPrice\");\n      })\n      .catch((err) => {\n        console.log(\"error-getUnderlyPrice\", err);\n      });\n  };\n  const getOTokenLiquidity = () => {\n    const assets = Object.values(markets);\n    let nativeOToken = \"\";\n    const calls = assets\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        address: market.underlyingToken.address,\n        name: \"balanceOf\",\n        params: [market.address],\n      }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _liquidity = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const oToken = markets[calls[i].params[0]];\n          _liquidity[oToken.address] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            oToken.underlyingToken.decimals\n          );\n        }\n        const provider = Ethers.provider();\n        if (nativeOToken) {\n          provider.getBalance(nativeOToken).then((rawBalance) => {\n            _liquidity[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"getOTokenLiquidity\");\n          });\n        } else {\n          count++;\n          formatedData(\"getOTokenLiquidity\");\n        }\n      })\n      .catch(() => {\n        // setTimeout(() => {\n        //   getOTokenLiquidity();\n        // }, 500);\n      });\n  };\n  const getWalletBalance = () => {\n    let nativeOToken = \"\";\n    const underlyingTokens = Object.values(markets)\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        ...market.underlyingToken,\n        oTokenAddress: market.address,\n      }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyingBalance = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyingBalance[underlyingTokens[i].oTokenAddress] = res[i][0]\n            ? ethers.utils.formatUnits(\n                res[i][0]._hex,\n                underlyingTokens[i].decimals\n              )\n            : \"0\";\n        }\n        if (nativeOToken) {\n          const provider = Ethers.provider();\n          provider.getBalance(account).then((rawBalance) => {\n            _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"underlyingTokens\");\n          });\n        } else {\n          count++;\n          formatedData(\"underlyingTokens\");\n        }\n      })\n      .catch(() => {\n        // setTimeout(() => {\n        //   getWalletBalance();\n        // }, 500);\n      });\n  };\n  const getCTokenData = (oToken) => {\n    if (oTokensLength === 0) return;\n    const calls = [\n      {\n        address: oToken.address,\n        name: \"exchangeRateCurrent\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalSupply\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalBorrows\",\n      },\n      {\n        address: oToken.address,\n        name: \"supplyRatePerBlock\",\n      },\n      {\n        address: oToken.address,\n        name: \"borrowRatePerBlock\",\n      },\n      {\n        address: oToken.address,\n        name: \"getAccountSnapshot\",\n        params: [account],\n      },\n    ];\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        oTokensLength--;\n        const exchangeRateStored = ethers.utils.formatUnits(\n          res[0][0]._hex,\n          10 + oToken.underlyingToken.decimals\n        );\n        const userSupply = ethers.utils.formatUnits(\n          res[5][1]._hex,\n          oToken.decimals\n        );\n        const totalSupply = ethers.utils.formatUnits(\n          res[1][0]._hex,\n          oToken.decimals\n        );\n        _cTokensData[oToken.address] = {\n          ...oToken,\n          exchangeRateStored,\n          totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n          totalBorrows: ethers.utils.formatUnits(\n            res[2][0]._hex,\n            oToken.underlyingToken.decimals\n          ),\n          supplyRatePerBlock: ethers.utils.formatUnits(res[3][0]._hex, 18),\n          borrowRatePerBlock: ethers.utils.formatUnits(res[4][0]._hex, 18),\n          userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n          userBorrow: ethers.utils.formatUnits(\n            res[5][2]._hex,\n            oToken.underlyingToken.decimals\n          ),\n        };\n        if (oTokensLength === 0) {\n          count++;\n          formatedData(\"oTokens data\");\n        }\n      })\n      .catch(() => {\n        // setTimeout(() => {\n        //   getCTokenData(oToken);\n        // }, 500);\n      });\n  };\n\n  const getCTokensData = () => {\n    Object.values(markets).forEach((market) => {\n      getCTokenData(market);\n    });\n  };\n\n  const getRewarsApy = () => {\n    const rewardMarkets = Object.keys(rewardsPrimeData);\n    const calls = rewardMarkets.map((market) => ({\n      address: rewardPrimeAddress,\n      name: \"estimateAPR\",\n      params: [\n        market,\n        account,\n        Big(rewardsPrimeData[market].borrow || 0)\n          .mul(Big(10).pow(18))\n          .toFixed(0),\n        Big(rewardsPrimeData[market].supply || 0)\n          .mul(Big(10).pow(18))\n          .toFixed(0),\n        Big(rewardsPrimeData[market].stake || 0)\n          .mul(Big(10).pow(18))\n          .toFixed(0),\n      ],\n    }));\n    calls.push({\n      address: rewardAddress,\n      name: \"pendingRewards\",\n      params: [account, unitrollerAddress],\n    });\n    multicall({\n      abi: REWARD_PRIME_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        res.forEach((item, i) => {\n          if (i === res.length - 1) {\n            count++;\n            formatedData(\"getRewarsApy data\");\n            _accountRewards = Big(\n              ethers.utils.formatUnits(\n                item ? item[0][2] || 0 : 0,\n                rewardToken.decimals\n              )\n            );\n            return;\n          }\n          const data = item[0];\n          const supplyApr = data[0];\n          const borrowApr = data[1];\n          const supplyApy = Big(supplyApr?.toString() || 0)\n            .div(10000)\n            .div(365)\n            .plus(1)\n            .pow(365)\n            .minus(1)\n            .mul(100)\n            .toFixed(2);\n          const borrowApy = Big(borrowApr?.toString() || 0)\n            .div(10000)\n            .div(365)\n            .plus(1)\n            .pow(365)\n            .minus(1)\n            .mul(100)\n            .toFixed(2);\n          _rewardsPrimeApy[rewardMarkets[i]] = {\n            supplyApy,\n            borrowApy,\n          };\n        });\n      })\n      .catch((err) => {\n        console.log(\"err - 599\", err);\n      });\n  };\n\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  getRewarsApy();\n}, [update, account]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Venus", "fact_widget_deployments_id": "65c8fd993d5ac8628c7dbacecc5a739c", "inserted_timestamp": "2024-04-12T10:36:03.279Z", "modified_timestamp": "2024-04-12T10:36:03.279Z", "__row_index": 0}