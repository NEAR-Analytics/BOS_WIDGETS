{"tx_hash": "Ddomf7RHfqsA2fK8HQwj3SD8SpG5cTERfCuENX6nV65b", "action_id_social": "GhnUiuCve19T6P1Fv7jq2e2pJCFiKAeGopZrsQhEeCfT-0-widget", "block_id": 117854156, "block_timestamp": "2024-04-29T02:59:16.019Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Connector.BLASTOFF", "source_code": "\nconst StyledBlastoff = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\nconst StyledCapsuleButtonList = styled.div`\n  margin-top: 33px;\n  display: flex;\n  align-items: center;\n  padding: 4px;\n  /* gap: 20px; */\n\n  border-radius: 8px;\n  border: 1px solid #373A53;\n  background: rgba(33, 35, 48, 0.5);\n`\nconst StyledCapsuleButton = styled.div`\n  padding: 8px 33px;\n  border-radius: 8px;\n  border: 1px solid transparent;\n  background: transparent;\n  cursor: pointer;\n\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StyledVaultContainer = styled.div`\n  margin-top: 20px;\n  width: 478px;\n  height: 655px;\n  padding: 20px 18px;\n  border-radius: 16px;\n  border: 1px solid #373A53;\n  background: #262836;\n`\nconst StyledVaultTop = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nconst StyledVaultTitle = styled.div`\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n`\n\nconst StyledVaultImage = styled.img`\n  width: 37px;\n`\nconst StyledTokenButtonList = styled.div`\n  margin: 28px 0 20px;\n  display: flex;\n  align-items: center;\n  gap: 9px;\n`\nconst StyledTokenButton = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 218px;\n  height: 37px;\n  border-radius: 8px;\n  border: 1px solid var(--button-color);\n  cursor: pointer;\n\n  color: var(--button-color);\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  &.active {\n    color: var(--button-text-color);\n    background: var(--button-color);\n  }\n  \n`\nconst StyledVaultTipsList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`\nconst StyledVaultTips = styled.div`\n  width: 100%;\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StyledStackedRectangle = styled.div`\n  margin: 20px 0;\n  height: 213px;\n  border-radius: 12px;\n  border: 1px solid #373A53;\n  padding: 13px 12px 15px;\n\n`\nconst StyledStackedRectangleTop = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nconst StackedRectangleBalance = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`\nconst StackedRectangleBalanceTitle = styled.div`\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StackedRectangleBalanceSubTitle = styled.div`\n  color: #F49102;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`\nconst StyledStackedRectangleMiddle = styled.div`\n  margin: 14px 0;\n  padding: 10px 14px;\n  height: 71px;\n  border-radius: 8px;\n  border: 1px solid #373A53;\n  background: #2E3142;\n`\nconst StyledStackedRectangleMiddleTop = styled.div`\n  margin-bottom: 3px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nconst StyledStackedRectangleMiddleTitle = styled.div`\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StyledStackedRectangleMiddleMax = styled.div`\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  text-decoration-line: underline;\n  cursor: pointer;\n`\nconst StyledStackedRectangleMiddleInput = styled.input`\n  padding: 0;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 26px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n`\nconst StyledStackedRectangleBottom = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nconst StyledStakeButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 60px;\n  border-radius: 8px;\n  background: var(--button-color);\n  cursor: pointer;\n\n  color: var(--button-text-color);\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n  &[disabled] {\n    opacity: 0.3;\n  }\n`\nconst StyledStakeLoadingButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 60px;\n  border-radius: 8px;\n  background: var(--button-color);\n  opacity: 0.3;\n`\nconst StyledPositionsContainer = styled.div`\n\n`\nconst StyledPositionsTips = styled.div`\n  margin-top: 73px;\n  text-align: center;\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StyledPostions = styled.div`\n  margin-top: 35px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n`\nconst StyledPostion = styled.div`\n  display: flex;\n  align-items: center;\n\n  padding: 0 22px;\n  width: 1200px;\n  height: 97px;\n  border-radius: 16px;\n  border: 1px solid #373A53;\n  background: #262836;\n`\nconst StyledPostionColumn = styled.div`\n  width: 10%;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`\nconst StyledPostionRow = styled.div`\n  display: flex;\n  gap: 10px;\n`\n\nconst StyledPostionLabel = styled.div`\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StyledPostionValue = styled.div`\n  color: #F49102;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`\nconst StyledClaimButton = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 182px;\n  height: 46px;\n  flex-shrink: 0;\n  border-radius: 8px;\n  cursor: pointer;\n\n  color: #000;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  background: #FFF;\n  \n`\nconst StyledUnstakeButton = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 182px;\n  height: 46px;\n  flex-shrink: 0;\n  border-radius: 8px;\n  cursor: pointer;\n\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  border: 1px solid #FFF;\n`\nconst {\n  toast,\n  chainId,\n  CHAIN_LIST,\n  multicallAddress,\n  dexConfig,\n  curChain,\n  isChainSupported,\n  switchingChain,\n  onSwitchChain,\n  addAction,\n  connectProps,\n  prices,\n} = props\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) {\n  return (\n    <Widget\n      style={dexConfig.theme}\n      src=\"bluebiu.near/widget/Arbitrum.Swap.ConnectButton\"\n      props={{\n        ...connectProps,\n        isWrongNetwork: false,\n      }}\n    />\n  );\n}\n\n\nState.init({\n  categoryList: [\"Vaults\", \"Positions\"],\n  categoryIndex: 0,\n  symbolList: [\"ETH\", \"USDB\"],\n  symbolIndex: 0,\n  pool: null,\n  positionList: [],\n  stakeLoading: false,\n  stakedAmount: \"\",\n})\n\nconst {\n  pool,\n  categoryList,\n  categoryIndex,\n  symbolList,\n  symbolIndex,\n  stakedAmount,\n  stakeLoading,\n  positionList,\n} = state\n\nconst COLUMN_LIST = [{\n  key: \"userStakePosition\",\n  type: \"money\",\n  width: \"15%\",\n}, {\n  key: \"yield\",\n  label: \"Yield Earned\",\n  type: \"money\",\n  width: \"15%\",\n}, {\n  key: \"off\",\n  label: \"$OFFxPoints / Hour\",\n  width: \"15%\",\n}, {\n  key: \"bx\",\n  label: \"$BxPoints / Hour\",\n  width: \"15%\",\n}, {\n  key: \"operation\",\n  label: \"\",\n  width: \"40%\",\n}]\nconst contractAddress = \"0xd9747a98624f0B64B4412632C420672E16432334\"\nconst isInSufficient = Number(stakedAmount) > Number(pool?.walletBalance)\n\nfunction promiseContractQuery(address, abi, method, data) {\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(address),\n    abi,\n    Ethers.provider().getSigner()\n  );\n  return new Promise((resolve, reject) => {\n    contract[method](...data).then(resolve).catch(reject)\n  })\n}\nfunction queryPool(poolId) {\n  const promiseArray = []\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"poolInfo\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"yieldAPY\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"yieldToken\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"stakeToken\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalStaked\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"enabled\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"poolId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getUserStakePosition\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"amount\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"lastCalcTs\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"pendingReward\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct INonLockStaking.StakePosition\",\n        \"name\": \"\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }]\n  // query poolInfo\n  promiseArray.push(promiseContractQuery(\n    contractAddress,\n    abi,\n    \"poolInfo\",\n    [poolId]\n  ))\n  // query getUserStakePosition\n  promiseArray.push(promiseContractQuery(\n    contractAddress,\n    abi,\n    \"getUserStakePosition\",\n    [poolId, sender]\n  ))\n  return new Promise((resolve, reject) => {\n    Promise.all(promiseArray)\n      .then(result => {\n        const [poolInfoResult, getUserStakePositionResult] = result\n        const yieldAPY = Big(poolInfoResult[0]).div(1000).toString()\n        const stakeToken = poolInfoResult[2]\n        const userStakePosition = ethers.utils.formatUnits(getUserStakePositionResult[0], 18)\n        if (poolId === 0) {\n          Ethers.provider()\n            .getBalance(sender)\n            .then((balanceResult) => {\n              const walletBalance = Big(ethers.utils.formatEther(balanceResult)).toFixed(6);\n              const pool = {\n                yieldAPY,\n                stakeToken,\n                walletBalance,\n                userStakePosition\n              }\n              resolve(pool)\n            });\n        } else {\n          const contract = new ethers.Contract(\n            stakeToken,\n            [\"function balanceOf(address) view returns (uint256)\"],\n            Ethers.provider()\n          );\n          contract.balanceOf(sender)\n            .then(balanceResult => {\n              const walletBalance = Big(ethers.utils.formatUnits(balanceResult, 18)).toFixed(6);\n              const pool = {\n                yieldAPY,\n                stakeToken,\n                walletBalance,\n                userStakePosition\n              }\n              resolve(pool)\n            })\n        }\n      })\n      .catch(reject)\n  })\n\n}\nfunction handleQueryPool(poolId) {\n  queryPool(poolId).then(pool => {\n    State.update({\n      pool\n    })\n  }).catch(error => {\n    console.log('=error', error)\n  })\n}\nfunction handleStakedAmountChange(amount) {\n  if (Number(amount) === 0) {\n    State.update({\n      stakedAmount: amount\n    })\n    return\n  }\n  State.update({\n    stakedAmount: amount\n  })\n}\nfunction handleQueryPositions() {\n  const promiseArray = []\n  promiseArray.push(queryPool(0))\n  promiseArray.push(queryPool(1))\n  Promise.all(promiseArray)\n    .then(result => {\n      State.update({\n        positionList: result.map((pool, poolId) => {\n          return {\n            poolId,\n            ...pool,\n          }\n        }).filter(position => Big(position.userStakePosition).gt(0))\n      })\n    })\n}\nfunction doStake(_amount) {\n  const toastId = toast?.loading({\n    title: `Stake ${stakedAmount} ${symbolList[symbolIndex]}`,\n  });\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"poolId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"stake\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  }]\n  const contract = new ethers.Contract(\n    ethers.utils.getAddress(contractAddress),\n    abi,\n    Ethers.provider().getSigner()\n  );\n  const params = symbolIndex === 0 ? [symbolIndex, _amount, { value: _amount }] : [symbolIndex, _amount]\n  contract.stake(...params)\n    .then((tx) => tx.wait())\n    .then(result => {\n      const { status, transactionHash } = result;\n      toast?.dismiss(toastId);\n      if (status !== 1) throw new Error(\"\");\n      toast?.success({\n        title: \"Stake Successfully!\",\n        text: `Stake ${stakedAmount} ${symbolList[symbolIndex]}`,\n        tx: transactionHash,\n        chainId,\n      });\n      State.update({\n        stakeLoading: false\n      })\n      if (status === 1) {\n        addAction?.({\n          type: \"Staking\",\n          action: \"Stake\",\n          token: symbolList[symbolIndex],\n          amount: stakedAmount,\n          template: \"BlastOff\",\n          add: true,\n          status,\n          transactionHash,\n        });\n        handleQueryPool(symbolIndex)\n      }\n    })\n    .catch(error => {\n      State.update({\n        stakeLoading: false\n      })\n      toast?.fail({\n        title: \"Stake Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Stake ${stakedAmount} ${symbolList[symbolIndex]}`,\n      });\n    })\n}\nfunction handleStake() {\n  const _amount = Big(stakedAmount)\n    .mul(Big(10).pow(18))\n    .toFixed(0);\n  State.update({\n    stakeLoading: true\n  })\n  if (symbolIndex === 0) {\n    doStake(_amount)\n  } else {\n    const toastId = toast?.loading({\n      title: `Approve ${stakedAmount} ${symbolList[symbolIndex]}`,\n    });\n    const abi = [{\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }]\n    const contract = new ethers.Contract(\n      ethers.utils.getAddress(pool.stakeToken),\n      abi,\n      Ethers.provider().getSigner()\n    );\n    contract\n      .approve(contractAddress, _amount)\n      .then(tx => tx.wait())\n      .then((result) => {\n        const { status, transactionHash } = result;\n        toast?.dismiss(toastId);\n        if (status !== 1) throw new Error(\"\");\n        toast?.success({\n          title: \"Approve Successfully!\",\n          text: `Approved ${stakedAmount} ${symbolList[symbolIndex]}`,\n          tx: transactionHash,\n          chainId,\n        });\n        doStake(_amount)\n      })\n      .catch(error => {\n        State.update({\n          stakeLoading: false\n        })\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: error?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approved ${stakedAmount} ${symbolList[symbolIndex]}`,\n        });\n      })\n  }\n}\nfunction handleClaim(index) {\n  const position = positionList[index]\n  const toastId = toast?.loading({\n    title: `Claim ${position.userStakePosition} ${symbolList[position.poolId]}`,\n  });\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"poolId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"claimPendingReward\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }]\n  const contract = new ethers.Contract(\n    contractAddress,\n    abi,\n    Ethers.provider().getSigner()\n  );\n  contract.claimPendingReward(position.poolId)\n    .then(tx => tx.wait())\n    .then(result => {\n      const { status, transactionHash } = result;\n      toast?.dismiss(toastId);\n      if (status !== 1) throw new Error(\"\");\n\n      toast?.success({\n        title: \"Claim Successfully!\",\n        text: `Claimed ${position.userStakePosition} ${symbolList[position.poolId]}`,\n        tx: transactionHash,\n        chainId,\n      });\n      if (status === 1) {\n        addAction?.({\n          type: \"Staking\",\n          action: \"Claim\",\n          token: symbolList[symbolIndex],\n          amount: position.userStakePosition,\n          template: \"BlastOff\",\n          add: true,\n          status,\n          transactionHash,\n        });\n        handleQueryPositions()\n      }\n    })\n}\nfunction handleUnstake(index) {\n  const position = positionList[index]\n  const toastId = toast?.loading({\n    title: `unstake ${position.userStakePosition} ${symbolList[position.poolId]}`,\n  });\n  const abi = [{\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"poolId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"unstake\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }]\n  const contract = new ethers.Contract(\n    contractAddress,\n    abi,\n    Ethers.provider().getSigner()\n  );\n  contract.unstake(position.poolId)\n    .then(tx => tx.wait())\n    .then(result => {\n      const { status, transactionHash } = result;\n      toast?.dismiss(toastId);\n      if (status !== 1) throw new Error(\"\");\n      toast?.success({\n        title: \"unstake Successfully!\",\n        text: `unstaked ${position.userStakePosition} ${symbolList[position.poolId]}`,\n        tx: transactionHash,\n        chainId,\n      });\n      if (status === 1) {\n        addAction?.({\n          type: \"Staking\",\n          action: \"UnStake\",\n          token: symbolList[symbolIndex],\n          amount: position.userStakePosition,\n          template: \"BlastOff\",\n          add: false,\n          status,\n          transactionHash,\n        });\n        handleQueryPositions()\n      }\n\n    })\n}\nfunction handleMax() {\n  State.update({\n    stakedAmount: state.pool?.walletBalance\n  })\n}\nuseEffect(() => {\n  handleQueryPool(symbolIndex)\n  State.update({\n    stakedAmount: \"\"\n  })\n}, [symbolIndex])\nuseEffect(() => {\n  if (categoryIndex > 0) {\n    handleQueryPositions()\n  } else {\n    handleQueryPool(symbolIndex)\n  }\n}, [categoryIndex])\nreturn (\n  <StyledBlastoff>\n    <StyledCapsuleButtonList>\n      {\n        categoryList.map((category, index) => (\n          <StyledCapsuleButton\n            key={index}\n            style={{\n              background: categoryIndex === index ? \"#32364B\" : \"transparent\",\n              borderColor: categoryIndex === index ? \"#373A53\" : \"transparent\",\n              color: categoryIndex === index ? \"#FFF\" : \"#979ABE\"\n            }}\n            onClick={() => {\n              State.update({\n                categoryIndex: index\n              })\n            }}\n          >{category}</StyledCapsuleButton>\n        ))\n      }\n\n    </StyledCapsuleButtonList>\n    {\n      categoryIndex === 0 ? (\n        <StyledVaultContainer>\n          <StyledVaultTop>\n            <StyledVaultTitle>GEN1 YIELD VAULT</StyledVaultTitle>\n            <StyledVaultImage src=\"https://ipfs.near.social/ipfs/bafkreiclfxa6oqmufyey4qmawb73i2b6gfmfs5fa7b3uflnbk72blgxrhu\" />\n\n          </StyledVaultTop>\n          <StyledTokenButtonList>\n            {\n              symbolList.map((symbol, index) => (\n                <StyledTokenButton\n                  key={index}\n                  className={symbolIndex === index ? \"active\" : \"\"}\n                  onClick={() => {\n                    State.update({\n                      symbolIndex: index\n                    })\n                  }}\n                >{symbol}</StyledTokenButton>\n              ))\n            }\n          </StyledTokenButtonList>\n          <StyledVaultTipsList>\n            <StyledVaultTips>The Staking Vault generates Future Yield Tokens that can be used in YIDOs and runs strategies to accumulate Points across Blast Projects.</StyledVaultTips>\n            <StyledVaultTips>Every 1 ETH Staked generates 100 $OFFxPoints Daily.</StyledVaultTips>\n            <StyledVaultTips>Every 1 ETH Staked generates 30 $BPoints Daily. Earlier participation will be rewarded with higher daily distribution.</StyledVaultTips>\n            <StyledVaultTips>To withdraw Staked ETH head over to \u201cPositions\u201d and \u201cRequest Unstake\u201d, assets will be available to withdraw after 24 Hours.</StyledVaultTips>\n          </StyledVaultTipsList>\n          <StyledStackedRectangle>\n            <StyledStackedRectangleTop>\n              <StackedRectangleBalance>\n                <StackedRectangleBalanceTitle>Staked {symbolList[symbolIndex]} Balance</StackedRectangleBalanceTitle>\n                <StackedRectangleBalanceSubTitle>{state.pool?.userStakePosition} {symbolList[symbolIndex]}</StackedRectangleBalanceSubTitle>\n              </StackedRectangleBalance>\n              <StackedRectangleBalance>\n                <StackedRectangleBalanceTitle>Wallet Balance</StackedRectangleBalanceTitle>\n                <StackedRectangleBalanceSubTitle>{state.pool?.walletBalance} {symbolList[symbolIndex]}</StackedRectangleBalanceSubTitle>\n              </StackedRectangleBalance>\n            </StyledStackedRectangleTop>\n            <StyledStackedRectangleMiddle>\n              <StyledStackedRectangleMiddleTop>\n                <StyledStackedRectangleMiddleTitle>Staked {symbolList[symbolIndex]}</StyledStackedRectangleMiddleTitle>\n                <StyledStackedRectangleMiddleMax onClick={handleMax}>Max</StyledStackedRectangleMiddleMax>\n              </StyledStackedRectangleMiddleTop>\n              <StyledStackedRectangleMiddleInput type=\"number\" placeholder=\"0\" value={stakedAmount} onChange={(event) => handleStakedAmountChange(event.target.value)} />\n            </StyledStackedRectangleMiddle>\n            <StyledStackedRectangleBottom>\n              <StackedRectangleBalance>\n                <StackedRectangleBalanceTitle>Future Yield APR</StackedRectangleBalanceTitle>\n                <StackedRectangleBalanceSubTitle>{state.pool?.yieldAPY}% fy{symbolList[symbolIndex]}</StackedRectangleBalanceSubTitle>\n              </StackedRectangleBalance>\n              <StackedRectangleBalance>\n                <StackedRectangleBalanceTitle>$BxPoints</StackedRectangleBalanceTitle>\n                <StackedRectangleBalanceSubTitle>1x</StackedRectangleBalanceSubTitle>\n              </StackedRectangleBalance>\n              <StackedRectangleBalance>\n                <StackedRectangleBalanceTitle>$OFFxPoints</StackedRectangleBalanceTitle>\n                <StackedRectangleBalanceSubTitle>1x</StackedRectangleBalanceSubTitle>\n              </StackedRectangleBalance>\n            </StyledStackedRectangleBottom>\n          </StyledStackedRectangle>\n\n\n          {\n            isInSufficient ? (\n              <StyledStakeButton disabled>InSufficient Balance</StyledStakeButton>\n            ) : stakeLoading ? (\n              <StyledStakeLoadingButton disabled>\n                <Widget src={\"bluebiu.near/widget/Liquidity.Bridge.Loading\"} />\n              </StyledStakeLoadingButton>\n            ) : (\n              <StyledStakeButton disabled={state.stakedAmount > 0 ? false : true} onClick={handleStake}>Stake {symbolList[symbolIndex]}</StyledStakeButton>\n            )\n          }\n        </StyledVaultContainer>\n      ) : (\n        <StyledPositionsContainer>\n          {\n            state.positionList.length > 0 ? (\n              <StyledPostions>\n                {\n                  state.positionList.map((position, index) => {\n                    return (\n                      <StyledPostion>\n                        {\n                          COLUMN_LIST.map(column => {\n                            return column.key === \"operation\" ? (\n                              <StyledPostionRow\n                                key={column.key}\n                                style={{ width: column.width }}\n                              >\n                                <StyledClaimButton onClick={() => handleClaim(index)}>Claim Yield</StyledClaimButton>\n                                <StyledUnstakeButton onClick={() => handleUnstake(index)}>Unstake</StyledUnstakeButton>\n                              </StyledPostionRow>\n                            ) : (\n                              <StyledPostionColumn\n                                key={column.key}\n                                style={{ width: column.width }}\n                              >\n                                <StyledPostionLabel>{column.key === \"userStakePosition\" ? `Staked ${symbolList[position.poolId]}` : column.label}</StyledPostionLabel>\n                                {\n                                  column.type === \"money\" ? (\n                                    <StyledPostionValue>{position[column.key] ?? \"1\"} {symbolList[position.poolId]}</StyledPostionValue>\n                                  ) : (\n                                    <StyledPostionValue>{position[column.key] ?? \"1\"}</StyledPostionValue>\n                                  )\n                                }\n                              </StyledPostionColumn>\n                            )\n                          })\n                        }\n                      </StyledPostion>\n                    )\n                  })\n                }\n              </StyledPostions>\n            ) : (\n              <StyledPositionsTips>Your positions will appear here.</StyledPositionsTips>\n            )\n          }\n        </StyledPositionsContainer>\n      )\n    }\n    {!isChainSupported && (\n      <Widget\n        src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n        props={{\n          chain: curChain,\n          onSwitchChain: onSwitchChain,\n          switchingChain: switchingChain,\n          theme: dexConfig.theme?.button,\n        }}\n      />\n    )}\n  </StyledBlastoff>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Connector.BLASTOFF", "fact_widget_deployments_id": "acd2bafd0f0a1c63d42aa865f99bc415", "inserted_timestamp": "2024-04-29T04:40:36.818Z", "modified_timestamp": "2024-04-29T04:40:36.818Z", "__row_index": 2}