{"tx_hash": "6Hipq47GVtEjuH7Jk7Kfusao1V41HGjnjA9wAZXmHJyx", "action_id_social": "nwHFq3VJXBnC1jLcwwH75PQ2RGfRjSyGsCSkwubDgRE-0-widget", "block_id": 108988555, "block_timestamp": "2023-12-28T07:14:12.414Z", "signer_id": "bluebiu.near", "widget_name": "ZKEVM.gamma-zkevm-vault", "source_code": "const addresses = {\n  Chef: \"0x1e2d8f84605d32a2cbf302e30bfd2387badf35dd\",\n  DAI: \"0xc5015b9d9161dca7e18e32f6f25c4ad850731fd4\",\n  MATIC: \"0xa2036f0538221a77a3937f1379699f44945018d0\",\n  \"N MATIC-USDC\": \"0x19f4ebc0a1744b93a355c2320899276ae7f79ee5\",\n  \"N USDC-WBTC\": \"0x9783c45564232c0aff8dc550a9c247c42e8c8b98\",\n  \"N WETH-MATIC\": \"0x2f39293c9ed046822c014143fb18d5ae0479be93\",\n  \"N WETH-USDC\": \"0x04c6b11e1ffe1f1032bd62adb343c9d07767489c\",\n  \"N WETH-WBTC\": \"0x1cc4ee0cb063e9db36e51f5d67218ff1f8dbfa0f\",\n  USDC: \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\",\n  \"USDC-DAI\": \"0xafad6e114cfbc8a19e91b8d7d04da740a7698595\",\n  USDT: \"0x1e4a5963abfd975d8c9021ce480b42188849d41d\",\n  \"USDT-DAI\": \"0xcd36b8a47a072e3e05e894b6ec89d294bec3d3ed\",\n  \"USDT-USDC\": \"0x145d55ae4848f9782efcac785a655e3e5dce1bcd\",\n  \"W MATIC-USDC\": \"0x8462e4173d63f8769f94bf7ae5bc1ac7ab5d96e3\",\n  \"W USDC-WBTC\": \"0x83de646a7125ac04950fea7e322481d4be66c71d\",\n  \"W WETH-MATIC\": \"0x5ada298913d53aa823824de69b4a6e790aed9327\",\n  \"W WETH-USDC\": \"0xfb3a24c0f289e695ceb87b32fc18a2b8bd896167\",\n  \"W WETH-WBTC\": \"0x64e78e990b2a45fad8b64b43e62a67d69a156042\",\n  WBTC: \"0xea034fb02eb1808c2cc3adbc15f447b93cbe08e1\",\n  WETH: \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n  stMATIC: \"0x83b874c1e09d316059d929da402dcb1a98e92082\",\n  \"stMATIC-MATIC\": \"0x9616052273a598bc04bd1ad7f7a753157c24f77e\",\n};\nconst proxyAddress = \"0x8480199e5d711399abb4d51bda329e064c89ad77\";\n\nconst defaultPair = {\n  id: \"N WETH-USDC\",\n  token0: \"WETH\",\n  token1: \"USDC\",\n  decimals0: 18,\n  decimals1: 6,\n};\n\nconst HStack = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst VStack = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  overflow: hidden;\n`;\nconst VStackNoColor = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  border-radius: 16px;\n  overflow: hidden;\n`;\n\nconst Comment = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  margin-bottom: -24px;\n  color: ${(props) => (props.isError ? \"#E25D58\" : \"#7C7F96\")};\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  font-family: \"Inter\";\n  color: #fff;\n  border-radius: 8px;\n\n  input[type=\"number\"]::-webkit-outer-spin-button,\n  input[type=\"number\"]::-webkit-inner-spin-button,\n  input[type=\"number\"] {\n    -webkit-appearance: none;\n    margin: 0;\n    -moz-appearance: textfield !important;\n  }\n  .top-title {\n    display: flex;\n    justify-content: space-between;\n    .title-text {\n      font-size: 20px;\n      font-weight: 700;\n    }\n  }\n  @media (max-width: 900px) {\n    .top-title {\n      display: block;\n      padding: 0 24px;\n      .title-text {\n        display: none;\n      }\n    }\n  }\n`;\n\nconst Info = styled.div`\n  background: #1d1e1f;\n  width: 100%;\n  font-family: \"Inter\";\n  color: #fff;\n  border-radius: 8px;\n  padding: 12px;\n  font-size: 14px;\n  text-align: center;\n`;\nconst SubWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  .input-flex {\n    display: flex;\n  }\n  @media (max-width: 900px) {\n    display: block;\n    margin: 0 24px 24px 24px;\n    padding: 24px;\n    background: #292c3c;\n    border-radius: 10px;\n    .input-flex {\n      display: block;\n    }\n  }\n`;\nconst InputWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  position: relative;\n  margin-right: 32px;\n  margin-bottom: 20px;\n  flex-direction: column;\n  gap: 4px;\n  .title {\n    font-size: 14px;\n    color: #7c7f96;\n  }\n  .merge {\n    display: flex;\n    .title {\n      color: #7c7f96;\n      font-size: 14px;\n      margin-bottom: 0;\n      font-weight: 500;\n      white-space: nowrap;\n      margin-right: 12px;\n      span {\n        color: #ffffff;\n      }\n    }\n  }\n  .balance {\n    display: inline-flex;\n    align-items: center;\n    color: #7c7f96;\n    font-size: 12px;\n    margin-left: auto;\n    white-space: nowrap;\n    .v {\n      text-decoration: underline;\n      cursor: pointer;\n    }\n  }\n  @media (max-width: 900px) {\n    margin: 0;\n    .merge {\n      p {\n        display: inline-block;\n      }\n    }\n  }\n`;\nconst Input = styled.input`\n  border: none;\n  background: rgba(53, 55, 73, 0.5);\n  outline: none;\n  color: #fff;\n  padding: 14px 12px;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  height: 55px;\n`;\n\nconst InputLpAmount = styled.input`\n  border: none;\n  outline: none;\n  background: transparent;\n  width: 100%;\n  color: #fff;\n  padding: 14px 12px;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  height: 55px;\n`;\n\nconst Button = styled.button`\n  margin-top: 22px;\n  background: #fff;\n  border-radius: 10px;\n  width: 200px;\n  border: none;\n  color: #0f1126;\n  padding: 8px 0;\n  font-weight: 700;\n  font-size: 16px;\n  position: relative;\n  height: 55px;\n  cursor: pointer;\n  &:disabled {\n    background: rgba(255, 255, 255, 0.3);\n    color: #ccc;\n    cursor: not-allowed;\n  }\n  @media (max-width: 900px) {\n    width: 100%;\n    box-shadow: 0px 1px 8px 0px #af8dffb0;\n    border: 0.3px solid #794fdd;\n    background: linear-gradient(0deg, #794fdd, #794fdd),\n      linear-gradient(0deg, #ffffff, #ffffff);\n    border-radius: 30px;\n  }\n`;\nconst Tab = styled.div`\n  display: flex;\n  margin-left: auto;\n  gap: 1px;\n  border: 1px solid #332c4b;\n  background: #222436;\n  border-radius: 10px;\n  padding: 2px;\n  height: 40px;\n  line-height: 20px;\n  margin-bottom: 26px;\n  @media (max-width: 736px) {\n    border: 1px solid #332c4b;\n    border-radius: 10px;\n    overflow: hidden;\n    background: linear-gradient(0deg, #181a27, #181a27);\n    margin-bottom: 12px;\n  }\n`;\nconst TabItem = styled.div`\n  border-radius: 10px;\n  flex: 1;\n  padding: 8px 32px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  color: ${(props) => (props.isActive ? \"#fff\" : \"#7C7F96\")};\n  background: ${(props) => (props.isActive ? \"#794FDD\" : \"#222436\")};\n  @media (max-width: 736px) {\n    padding: 10px 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\nconst MaxButton = styled.button`\n  position: absolute;\n  background: transparent;\n  border: none;\n  color: #fff;\n  padding: 8px;\n  font-size: 14px;\n  right: 0;\n  bottom: 28%;\n`;\n\nconst Spinner = styled.i`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin: calc(24px * -0.5) auto 0;\n  width: 24px;\n  height: 24px;\n  font-size: 24px;\n  line-height: 24px;\n  animation: spin 800ms infinite linear;\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst InputFiledWrapper = styled.div`\n  border: none;\n  background: rgba(53, 55, 73, 0.5);\n  outline: none;\n  color: #fff;\n  padding-right: 12px;\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  display: flex;\n\n  .token-filed-pc {\n    white-space: nowrap;\n  }\n\n  justify-content: space-between;\n\n  align-items: center;\n\n  .token-filed {\n    @media (min-width: 736px) {\n      display: none;\n    }\n\n    padding-right: 12px;\n\n    flex-shrink: 0;\n\n    white-space: nowrap;\n\n    gap: 8px;\n    color: #ffffff;\n    font-size: 15px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: right;\n  }\n`;\n\nState.init({\n  isDeposit: true,\n  lpBalance: \"\",\n  balances: [],\n  amount0: \"\",\n  amount1: \"\",\n  lpAmount: \"\",\n  isError: false,\n  isLoading: false,\n  isToken0Approved: true,\n  isToken1Approved: true,\n  isToken0Approving: false,\n  isToken1Approving: false,\n  loadingMsg: \"\",\n  isPostTx: false,\n});\n\nconst getFromDepositAmount = (depositAmount, tokenDecimal) => {\n  let a = new Big(depositAmount[0].toString());\n  let b = new Big(depositAmount[1].toString());\n\n  if (a.eq(0) && b.eq(0)) return \"0\";\n\n  let diff;\n  let midpoint;\n  if (a.gt(b)) {\n    diff = a.minus(b);\n    midpoint = diff.div(new Big(2)).plus(b);\n  } else {\n    diff = b.minus(a);\n    midpoint = diff.div(new Big(2)).plus(a);\n  }\n\n  for (let i = tokenDecimal; i > 0; i--) {\n    const midpointFixed = midpoint\n      .div(new Big(10).pow(tokenDecimal))\n      .toFixed(i);\n    if (\n      a.div(new Big(10).pow(tokenDecimal)).lte(midpointFixed) &&\n      b.div(new Big(10).pow(tokenDecimal)).gte(midpointFixed)\n    ) {\n      return midpointFixed;\n    }\n  }\n\n  return \"0\";\n};\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst { token0, token1, decimals0, decimals1, id } = props.pair || defaultPair;\nconst hypeAddress = addresses[id];\n\nconst updateLPBalance = () => {\n  const abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const vaultContract = new ethers.Contract(\n    hypeAddress,\n    abi,\n    Ethers.provider()\n  );\n  vaultContract.balanceOf(sender).then((balanceBig) => {\n    const adjustedBalance = ethers.utils.formatUnits(balanceBig, 18);\n    State.update({\n      lpBalance: adjustedBalance,\n    });\n  });\n};\nconst updateBalance = (token) => {\n  const { address, decimals, symbol } = token;\n\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(sender)\n      .then((balanceBig) => {\n        const adjustedBalance = ethers.utils.formatEther(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract.balanceOf(sender).then((balanceBig) => {\n      const adjustedBalance = ethers.utils.formatUnits(balanceBig, decimals);\n      State.update({\n        balances: {\n          ...state.balances,\n          [symbol]: adjustedBalance,\n        },\n      });\n    });\n  }\n};\n\nif (sender) {\n  [\n    { symbol: token0, address: addresses[token0], decimals: decimals0 },\n    { symbol: token1, address: addresses[token1], decimals: decimals1 },\n  ].map(updateBalance);\n\n  updateLPBalance();\n}\n\nconst {\n  isDeposit,\n  balances,\n  amount0,\n  amount1,\n  isLoading,\n  isError,\n  isToken0Approved,\n  isToken1Approved,\n  isToken0Approving,\n  isToken1Approving,\n  loadingMsg,\n  lpBalance,\n  lpAmount,\n  isPostTx,\n} = state;\n\nconst { can_add_action } = props;\nconst AccessKey = Storage.get(\n  \"AccessKey\",\n  \"guessme.near/widget/ZKEVMWarmUp.add-to-quest-card\"\n);\n\nconst checkApproval = (token0Amount, token1Amount) => {\n  const token0Wei = new Big(ethers.utils.parseUnits(token0Amount, decimals0));\n  const token1Wei = new Big(ethers.utils.parseUnits(token1Amount, decimals1));\n\n  const abi = [\n    \"function allowance(address, address) external view returns (uint256)\",\n  ];\n\n  const token0Contract = new ethers.Contract(\n    addresses[token0],\n    abi,\n    Ethers.provider()\n  );\n\n  token0Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance0) => {\n      State.update({\n        isToken0Approved: !new Big(allowance0.toString()).lt(token0Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n\n  const token1Contract = new ethers.Contract(\n    addresses[token1],\n    abi,\n    Ethers.provider()\n  );\n\n  token1Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance1) => {\n      State.update({\n        isToken1Approved: !new Big(allowance1.toString()).lt(token1Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n};\n\nconst changeMode = (isDeposit) => {\n  State.update({ isDeposit });\n};\n\nconst handleMax = (isToken0) => {\n  if (isToken0) handleToken0Change(balances[token0]);\n  else handleToken1Change(balances[token1]);\n};\n\nconst handleToken0Change = (amount) => {\n  State.update({ amount0: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount1: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(amount, decimals0).toString();\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n\n  proxyContract\n    .getDepositAmount(hypeAddress, addresses[token0], token0Wei)\n    .then((depositAmount) => {\n      const amount1 = getFromDepositAmount(depositAmount, decimals1);\n      State.update({ amount1 });\n      State.update({ isLoading: false });\n      checkApproval(amount, amount1);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        amount1: 0,\n        loadingMsg: \"Something went wrong. Please try again.\",\n      });\n    });\n};\n\nconst handleToken1Change = (amount) => {\n  State.update({ amount1: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount0: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n  const token1Wei = ethers.utils.parseUnits(amount, decimals1).toString();\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n\n  proxyContract\n    .getDepositAmount(hypeAddress, addresses[token1], token1Wei)\n    .then((depositAmount) => {\n      const amount0 = getFromDepositAmount(depositAmount, decimals0);\n      State.update({ amount0 });\n      State.update({ isLoading: false });\n      checkApproval(amount0, amount);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        amount0: 0,\n        loadingMsg: \"Something went wrong. Please try again.\",\n      });\n    });\n};\n\nconst handleLPChange = (amount) => {\n  State.update({\n    lpAmount: amount,\n  });\n};\n\nconst handleApprove = (isToken0) => {\n  const _token = isToken0 ? token0 : token1;\n  const payload = isToken0\n    ? { isToken0Approving: true }\n    : { isToken1Approving: true };\n\n  const amount = isToken0\n    ? Big(amount0).toFixed(decimals0)\n    : Big(amount1).toFixed(decimals1);\n\n  const toastId = props.toast?.loading({\n    title: `Approve ${amount} ${_token}`,\n  });\n\n  State.update({\n    ...payload,\n    isLoading: true,\n    loadingMsg: `Approving ${_token}...`,\n  });\n\n  const tokenWei = ethers.utils.parseUnits(\n    amount,\n    isToken0 ? decimals0 : decimals1\n  );\n\n  const abi = [\"function approve(address, uint) public\"];\n\n  const tokenContract = new ethers.Contract(\n    addresses[_token],\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  tokenContract\n    .approve(hypeAddress, tokenWei)\n    .then((tx) => tx.wait())\n    .then((receipt) => {\n      const payload = isToken0\n        ? { isToken0Approved: true, isToken0Approving: false }\n        : { isToken1Approved: true, isToken1Approving: false };\n\n      State.update({ ...payload, isLoading: false, loadingMsg: \"\" });\n      props.toast?.dismiss(toastId);\n      props.toast?.success({\n        title: \"Approve Successfully!\",\n        text: `Approve ${amount} ${_token}`,\n        tx: receipt.transactionHash,\n        chainId: state.chainId,\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n        isToken0Approving: false,\n        isToken1Approving: false,\n      });\n      props.toast?.dismiss(toastId);\n      props.toast?.fail({\n        title: \"Approve Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Approve ${amount} ${_token}`,\n      });\n    });\n};\n\nconst handleDeposit = () => {\n  const toastId = props.toast?.loading({\n    title: `Depositing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(amount0, decimals0);\n  const token1Wei = ethers.utils.parseUnits(amount1, decimals1);\n\n  const proxyAbi = [\n    \"function deposit(uint256, uint256,address,address,uint256[4] memory)  external returns (uint256)\",\n  ];\n\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider().getSigner()\n  );\n\n  proxyContract\n    .deposit(token0Wei, token1Wei, sender, hypeAddress, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      props.addAction?.({\n        type: \"Liquidity\",\n        action: \"Deposit\",\n        token0,\n        token1,\n        amount: amount0,\n        template: \"Gamma\",\n        status: status,\n        add: can_add_action,\n        transactionHash,\n        extra_data: JSON.stringify({\n          amount0,\n          amount1,\n          pairId: id,\n        }),\n      });\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      props.toast?.dismiss(toastId);\n      props.toast?.success({\n        title: \"Deposit Successfully!\",\n      });\n      const { refetch } = props;\n      if (refetch) refetch();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n\n      props.toast?.dismiss(toastId);\n      props.toast?.fail({\n        title: \"Deposit Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : \"\",\n      });\n    });\n};\n\nconst handleWithdraw = () => {\n  const toastId = props.toast?.loading({\n    title: `Withdrawing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Withdrawing...\",\n  });\n\n  const lpWeiAmount = ethers.utils.parseUnits(lpAmount, 18);\n  const abi = [\n    \"function withdraw(uint256, address, address,uint256[4] memory) external returns (uint256, uint256)\",\n  ];\n\n  const hypeContract = new ethers.Contract(\n    hypeAddress,\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  hypeContract\n    .withdraw(lpWeiAmount, sender, sender, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Withdraw\",\n        token0,\n        token1,\n        amount: lpAmount,\n        template: \"Gamma\",\n        status: status,\n        add: can_add_action,\n        transactionHash,\n      });\n\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      const { refetch } = props;\n      if (refetch) refetch();\n\n      props.toast?.dismiss(toastId);\n      props.toast?.success({\n        title: \"Withdraw Successfully!\",\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      props.toast?.dismiss(toastId);\n      props.toast?.fail({\n        title: \"Withdraw Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : \"\",\n      });\n    });\n};\n\nconst isInSufficient =\n  Number(amount0) > Number(balances[token0]) ||\n  Number(amount1) > Number(balances[token1]);\n\nconst isWithdrawInsufficient = Number(lpAmount) > Number(lpBalance);\n\nreturn (\n  <VStack>\n    <Wrapper>\n      <div className=\"top-title\">\n        <div className=\"title-text\">Liquidity Manage</div>\n        <Tab>\n          <TabItem isActive={isDeposit} onClick={() => changeMode(true)}>\n            Deposit\n          </TabItem>\n          <TabItem isActive={!isDeposit} onClick={() => changeMode(false)}>\n            Withdraw\n          </TabItem>\n        </Tab>\n      </div>\n\n      {isDeposit ? (\n        <SubWrapper>\n          <div className=\"input-flex\">\n            <InputWrapper>\n              <div className=\"merge\">\n                <p className=\"title\">\n                  Amount of <span>{token0}</span>\n                </p>\n                <div className=\"balance\">\n                  Balance:{\" \"}\n                  <span onClick={() => handleMax(true)} className=\"v\">\n                    {balances[token0]}\n                  </span>\n                </div>\n              </div>\n              <Input\n                value={amount0}\n                type=\"number\"\n                onChange={(e) => handleToken0Change(e.target.value)}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <div className=\"merge\">\n                <p className=\"title\">\n                  Amount of <span>{token1}</span>\n                </p>\n                <div className=\"balance\">\n                  Balance:{\" \"}\n                  <span onClick={() => handleMax(false)} className=\"v\">\n                    {balances[token1]}\n                  </span>\n                </div>\n              </div>\n              <Input\n                value={amount1}\n                type=\"number\"\n                onChange={(e) => handleToken1Change(e.target.value)}\n              />\n            </InputWrapper>\n            <VStackNoColor>\n              {isLoading && <Comment isError={isError}>{loadingMsg}</Comment>}\n              {isInSufficient && <Button disabled>InSufficient Balance</Button>}\n              {!isInSufficient &&\n                (isToken0Approved &&\n                isToken1Approved &&\n                !isToken0Approving &&\n                !isToken1Approving ? (\n                  <Button\n                    disabled={isLoading || !amount0 || !amount1}\n                    onClick={handleDeposit}\n                  >\n                    {isLoading ? (\n                      <Spinner className=\"ph-bold ph-circle-notch\" />\n                    ) : (\n                      \"Deposit\"\n                    )}\n                  </Button>\n                ) : (\n                  <HStack>\n                    <Button\n                      disabled={isToken0Approved || isToken0Approving}\n                      onClick={() => handleApprove(true)}\n                    >\n                      {isToken0Approving ? (\n                        <Spinner className=\"ph-bold ph-circle-notch\" />\n                      ) : (\n                        <>\n                          {isToken0Approved ? \"Approved\" : \"Approve\"} {token0}\n                        </>\n                      )}\n                    </Button>\n                    <Button\n                      disabled={isToken1Approved || isToken1Approving}\n                      onClick={() => handleApprove(false)}\n                    >\n                      {isToken1Approving ? (\n                        <Spinner className=\"ph-bold ph-circle-notch\" />\n                      ) : (\n                        <>\n                          {isToken1Approved ? \"Approved\" : \"Approve\"} {token1}\n                        </>\n                      )}\n                    </Button>\n                  </HStack>\n                ))}\n            </VStackNoColor>\n          </div>\n        </SubWrapper>\n      ) : (\n        <SubWrapper>\n          <div className=\"input-flex\">\n            <InputWrapper>\n              <div className=\"merge\">\n                <p className=\"title\">\n                  Amount of{\" \"}\n                  <span>\n                    {token0}-{token1}\n                  </span>\n                </p>\n                <div className=\"balance\">\n                  Balance:{\" \"}\n                  <span onClick={() => handleLPChange(lpBalance)} className=\"v\">\n                    {lpBalance}\n                  </span>\n                </div>\n              </div>\n\n              <InputFiledWrapper>\n                <InputLpAmount\n                  value={lpAmount}\n                  type=\"number\"\n                  onChange={(e) => handleLPChange(e.target.value)}\n                />\n\n                <div className=\"token-filed-pc\">{`${token0}-${token1}`}</div>\n              </InputFiledWrapper>\n            </InputWrapper>\n            <VStack>\n              {isLoading && <Comment isError={isError}>{loadingMsg}</Comment>}\n              <Button\n                disabled={isWithdrawInsufficient || isLoading || !lpAmount}\n                onClick={handleWithdraw}\n              >\n                {isLoading ? (\n                  <Spinner className=\"ph-bold ph-circle-notch\" />\n                ) : (\n                  <>\n                    {isWithdrawInsufficient\n                      ? \"InSufficient Balance\"\n                      : \"Withdraw\"}\n                  </>\n                )}\n              </Button>\n            </VStack>\n          </div>\n        </SubWrapper>\n      )}\n    </Wrapper>\n    {isPostTx && (\n      <Info>\n        If you don't see the updated balance in the table after 1 minute, please\n        click the refresh button above.\n      </Info>\n    )}\n  </VStack>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/ZKEVM.gamma-zkevm-vault", "fact_widget_deployments_id": "07eb323e44faee704987c809bc332169", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}