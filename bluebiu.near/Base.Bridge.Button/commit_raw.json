{"tx_hash": "FNiMdfSwhi229LwQ7chtBgQ58CCofurF1bnnZCmKgEE7", "action_id_social": "6okNSm5RinaGZPP9MN3z6sMPRkkhdCKxj1L74rZ5yoYy-0-widget", "block_id": 113079540, "block_timestamp": "2024-02-18T10:42:26.578Z", "signer_id": "bluebiu.near", "widget_name": "Base.Bridge.Button", "source_code": "const Button = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  background-color: var(--button-color);\n  line-height: 60px;\n  border: none;\n  font-size: 18px;\n  font-weight: 500;\n  color: var(--button-text-color);\n  margin-top: 20px;\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst {\n  disabled,\n  amount,\n  maxInputBalance,\n  currency,\n  from,\n  target,\n  handlerSwap,\n  addAction,\n  toast,\n  gasCost,\n  isGasEnough,\n  onSuccess,\n} = props;\n\nif (disabled) return <Button disabled={disabled}>Confrim</Button>;\nif (Big(amount || 0).eq(0))\n  return <Button disabled={true}>Enter An Amount</Button>;\nif (Big(amount || 0).gt(maxInputBalance || 0) || !currency) {\n  return <Button disabled>Insufficient {currency?.symbol} Balance</Button>;\n}\n\nState.init({\n  isApproved: false,\n  loading: false,\n});\nif (!isGasEnough) {\n  return (\n    <Button disabled>\n      Not enough gas, {Big(gasCost || 0).toFixed(3)} needed\n    </Button>\n  );\n}\nconst spender = currency\n  ? currency.oftAddress\n    ? currency.oftAddress\n    : currency.isNative\n    ? from.routerEthAddress\n    : from.routerAddress\n  : \"\";\n\nconst getAllowance = () => {\n  if (!spender) return;\n  const TokenContract = new ethers.Contract(\n    currency.address,\n    [\n      {\n        constant: true,\n        inputs: [\n          {\n            name: \"_owner\",\n            type: \"address\",\n          },\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n        ],\n        name: \"allowance\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"uint256\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers?.provider()?.getSigner()\n  );\n  TokenContract?.allowance(account, spender)\n    .then((allowanceRaw) => {\n      State.update({\n        isApproved: !Big(\n          ethers.utils.formatUnits(allowanceRaw._hex, currency.decimals)\n        ).lt(amount),\n      });\n    })\n    .catch((err) => {});\n};\n\nif (!currency?.isNative) {\n  getAllowance();\n} else {\n  State.update({ isApproved: true });\n}\n\nconst handleApprove = () => {\n  const toastId = toast?.loading({\n    title: `Approve ${amount} ${currency?.symbol}`,\n  });\n  State.update({\n    loading: true,\n  });\n  const TokenContract = new ethers.Contract(\n    currency.address,\n    [\n      {\n        constant: false,\n        inputs: [\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n          {\n            name: \"_value\",\n            type: \"uint256\",\n          },\n        ],\n        name: \"approve\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"bool\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.approve(\n    spender,\n    ethers.utils.parseUnits(amount, currency.decimals)\n  )\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          if (status !== 1) throw new Error(\"\");\n          toast?.dismiss(toastId);\n          State.update({\n            isApproved: true,\n            loading: false,\n          });\n          toast?.success({\n            title: \"Approve Successfully!\",\n            text: `Approve ${amount} ${currency?.symbol}`,\n            tx: transactionHash,\n            chainId: from.id,\n          });\n        })\n        .catch((err) => {\n          State.update({\n            isApproved: false,\n            loading: false,\n          });\n          toast?.dismiss(toastId);\n          toast?.fail({\n            title: \"Approve Failed!\",\n            text: `Approve ${amount} ${currency?.symbol}`,\n            tx: transactionHash,\n            chainId: from.id,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        loading: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Approve Failed!\",\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Approve ${amount} ${currency?.symbol}`,\n      });\n    });\n};\n\nif (!state.isApproved) {\n  return (\n    <Button onClick={handleApprove} disabled={state.loading}>\n      {state.loading ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Approve\"\n      )}\n    </Button>\n  );\n}\n\nreturn (\n  <>\n    <Widget\n      src={handlerSwap}\n      props={{\n        amount,\n        account,\n        currency,\n        routerAddress: from.routerAddress,\n        routerEthAddress: from.routerEthAddress,\n        loading: state.loading,\n        target,\n        onSuccess: (res) => {\n          State.update({ loading: false });\n          const { status, transactionHash } = res;\n          addAction?.({\n            type: \"Bridge\",\n            fromChainId: from.id,\n            toChainId: target.id,\n            token: currency,\n            amount: amount,\n            template: \"Stargate Bridge\",\n            add: false,\n            status,\n            transactionHash,\n          });\n          toast?.dismiss(state.toastId);\n          if (status === 1) {\n            onSuccess?.(transactionHash);\n            toast?.success({\n              title: \"Bridge Successfully!\",\n              text: `Bridge ${amount} ${inputCurrency.symbol} from ${from.name} to ${target.name}`,\n              tx: transactionHash,\n              chainId: from.id,\n            });\n          } else {\n            toast?.fail({\n              title: \"Bridge Failed!\",\n              text: `Bridge ${amount} ${inputCurrency.symbol} from ${from.name} to ${target.name}`,\n              tx: transactionHash,\n              chainId: from.id,\n            });\n          }\n        },\n        onError: (tx) => {\n          State.update({ loading: false });\n          toast?.dismiss(state.toastId);\n          toast?.fail({\n            title: \"Bridge Failed!\",\n            text: tx?.message?.includes(\"user rejected transaction\")\n              ? \"User rejected transaction\"\n              : `Bridge ${amount} ${inputCurrency.symbol} from ${from.name} to ${target.name}`,\n            tx: tx ? tx.hash : \"\",\n            chainId,\n          });\n        },\n      }}\n    />\n    <Button\n      onClick={() => {\n        console.log(from, target);\n        const toastId = toast?.loading({\n          title: `Bridge ${amount} ${inputCurrency.symbol} from ${from.name} to ${target.name}`,\n        });\n        State.update({ loading: true, toastId });\n      }}\n      disabled={state.loading}\n    >\n      {state.loading ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Confirm\"\n      )}\n    </Button>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.Bridge.Button", "fact_widget_deployments_id": "fd75c6d34810eaf3f1162d5ee77fa4ce", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}