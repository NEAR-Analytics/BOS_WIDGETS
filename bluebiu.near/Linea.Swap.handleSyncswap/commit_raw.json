{"tx_hash": "Ajd9ZGNbqaRMn4Kcr7LKsLhqRXhfV5VGDYeuA8pD8XpW", "action_id_social": "2Au1oBNmbGU8ay3AG45jH8ZxDXDYV6ry1fHPdP7RtCPz-0-widget", "block_id": 103559001, "block_timestamp": "2023-10-17T04:48:27.303Z", "signer_id": "bluebiu.near", "widget_name": "Linea.Swap.handleSyncswap", "source_code": "const {\n  routerAddress,\n  wethAddress,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrencyAmount,\n  outputCurrency,\n  account,\n  onSuccess,\n  onError,\n  swapping,\n  title,\n  syncSwapPoolAddress,\n} = props;\n\nif (!swapping) return;\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst type =\n  inputCurrency.address === \"native\"\n    ? 1\n    : outputCurrency.address === \"native\"\n    ? 2\n    : 0;\n\nconst RouterContract = new ethers.Contract(\n  routerAddress,\n  [\n    {\n      inputs: [\n        {\n          components: [\n            {\n              components: [\n                {\n                  internalType: \"address\",\n                  name: \"pool\",\n                  type: \"address\",\n                },\n                {\n                  internalType: \"bytes\",\n                  name: \"data\",\n                  type: \"bytes\",\n                },\n                {\n                  internalType: \"address\",\n                  name: \"callback\",\n                  type: \"address\",\n                },\n                {\n                  internalType: \"bytes\",\n                  name: \"callbackData\",\n                  type: \"bytes\",\n                },\n              ],\n              internalType: \"struct IRouter.SwapStep[]\",\n              name: \"steps\",\n              type: \"tuple[]\",\n            },\n            {\n              internalType: \"address\",\n              name: \"tokenIn\",\n              type: \"address\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"amountIn\",\n              type: \"uint256\",\n            },\n          ],\n          internalType: \"struct IRouter.SwapPath[]\",\n          name: \"paths\",\n          type: \"tuple[]\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amountOutMin\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"deadline\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"swap\",\n      outputs: [\n        {\n          components: [\n            {\n              internalType: \"address\",\n              name: \"token\",\n              type: \"address\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"amount\",\n              type: \"uint256\",\n            },\n          ],\n          internalType: \"struct IPool.TokenAmount\",\n          name: \"amountOut\",\n          type: \"tuple\",\n        },\n      ],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\n\nconst withdrawMode = outputCurrency.address === \"native\" ? 1 : 2; // 1 or 2 to withdraw to user's wallet\n\nconst pathIn = type === 1 ? wethAddress : inputCurrency.address;\n\nconst tokenIn = type === 1 ? ZERO_ADDRESS : inputCurrency.address;\n\nconst swapData = ethers.utils.defaultAbiCoder.encode(\n  [\"address\", \"address\", \"uint8\"],\n  [pathIn, account, withdrawMode] // tokenIn, to, withdraw mode\n);\n\nconst steps = [\n  {\n    pool: syncSwapPoolAddress,\n    data: swapData,\n    callback: ZERO_ADDRESS, // we don't have a callback\n    callbackData: \"0x\",\n  },\n];\n\nconst amountIn = ethers.utils.parseUnits(\n  inputCurrencyAmount,\n  inputCurrency.decimals\n);\n\nconst value = type === 1 ? amountIn : 0;\n\nconst paths = [\n  {\n    steps: steps,\n    tokenIn: tokenIn,\n    amountIn: amountIn,\n  },\n];\n\nRouterContract.swap(\n  paths,\n  0,\n  new Big(Math.floor(Date.now() / 1000)).add(new Big(1800)).toFixed(0),\n  { gasLimit: 800000, value }\n)\n  .then((tx) => {\n    onSuccess(tx);\n  })\n  .catch((err) => {\n    console.log(\"err: \", err);\n    onError(err);\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Linea.Swap.handleSyncswap", "fact_widget_deployments_id": "c17e9d656cfafec7f0f9156d32df2a0c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}