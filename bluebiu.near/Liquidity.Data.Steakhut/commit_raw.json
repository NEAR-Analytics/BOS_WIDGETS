{"tx_hash": "DsF3Kz6BYnnTimzawXtuRZgDZDXJp24xgktmefwbKB4e", "action_id_social": "HjLuTDVbpNefqbyAB2iDi5uRhaLdtFptPqpvh29zyc33-0-widget", "block_id": 111845190, "block_timestamp": "2024-02-01T10:33:37.330Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.Steakhut", "source_code": "\nconst {\n  pairs,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  LAST_SNAP_SHOT_DATA_URL,\n  prices\n} = props\n\n// const MULTICALL_ADDRESS = \"0xcA11bde05977b3631167028862bE2a173976CA11\"\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardRate\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\n\nuseEffect(() => {\n  let loading = false\n  let dataList = []\n  function formatedData() {\n    onLoad({\n      loading,\n      dataList\n    })\n  }\n  function getDataList() {\n    pairs.forEach(pair => {\n      const vaultAddress = addresses[pair.id]\n      const data = allData[vaultAddress]\n      dataList.push({\n        \n      })\n    })\n    formatedData('dataList')\n  }\n  function getBalance() {\n\n  }\n  function getLiquidity() {\n    const calls = [];\n    const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n    dataList.forEach(data => {\n      calls.push({\n        address: data.vaultAddress,\n        name: \"balanceOf\",\n        params: [sender],\n      });\n    })\n    multicallv2(\n      ERC20_ABI,\n      calls,\n      {},\n      (res) => {\n        console.log('====res', res)\n        for (let i = 0, len = res.length; i < len; i++) {\n          if (res[i]) {\n            dataList[i].liquidity = Big(ethers.utils.formatUnits(res[i][0]._hex)).toFixed(2)\n          }\n        }\n        formatedData('getLiquidity')\n      },\n      (error) => {\n        setTimeout(() => {\n          getLiquidity();\n        }, 500);\n      }\n    )\n  }\n  function getTotalApr() {\n    const name = curChain.name\n    if (['Base', 'Optimism', 'Linea', 'Polygon zkEVM'].includes(name)) {\n      dataList = dataList.map(data => {\n        data.totalApr = formatPercent(data.returns.weekly.feeApr)\n        return data\n      })\n    }\n    if (name === 'BSC') {\n      const calls = [];\n      const addressMap = {\n        'ETH-WBNB-0': '0xD777E84b0D29128351A35045D7AE728780dEf54D',\n        'BTCB-WBNB-0': '0x65E40E779560199F5e68126Bc95bdc03083e5AA4',\n        'USDT-USDC-0': '0x1011530830c914970CAa96a52B9DA1C709Ea48fb',\n        'USDT-WBNB-0': '0xf50Af14BC4953Dcf9d27EbCA8BB3625855F5B42d',\n        'BNBx-WBNB-0': '0xf50Af14BC4953Dcf9d27EbCA8BB3625855F5B42d',\n      }\n      dataList.forEach(data => {\n        calls.push({\n          address: addressMap[data.id],\n          name: \"rewardRate\",\n        });\n      })\n      multicallv2(\n        ERC20_ABI,\n        calls,\n        {},\n        res => {\n          for (let i = 0, len = res.length; i < len; i++) {\n            dataList[i]['totalApr'] = dataList[i].tvlUSD > 0 ? Big(ethers.utils.formatUnits(res[i][0]._hex))\n              .mul(365 * 24 * 60 * 60)\n              .mul(prices['ETH'])\n              .div(dataList[i].tvlUSD)\n              .toFixed(2) : '0.00'\n          }\n          formatedData('getTotalApr')\n        },\n        error => {\n          // console.log('=====error', error)\n          setTimeout(() => {\n            getTotalApr()\n          }, 500)\n        }\n      )\n    }\n    if (name === 'Polygon') {\n\n    }\n    formatedData('getTotalApr')\n  }\n  function getFeeTiers() {\n    asyncFetch(LAST_SNAP_SHOT_DATA_URL)\n      .then(res => {\n        if (res.ok) {\n          dataList.forEach((data, index) => {\n            const findIndex = res.body.findIndex(source => data.vaultAddress === source.address)\n            if (findIndex > -1) {\n              dataList[index]['fee'] = Big(res.body[findIndex].fee).div(100).toFixed(2)\n            }\n          })\n          formatedData('getFeeTiers')\n        }\n      })\n      .catch(error => {\n        console.log('error', error)\n      })\n  }\n  getDataList()\n  getLiquidity()\n  getBalance()\n  getFeeTiers()\n  getTotalApr()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.Steakhut", "fact_widget_deployments_id": "6f413c2bb7ad02ec2c197e03b30d3e49", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}