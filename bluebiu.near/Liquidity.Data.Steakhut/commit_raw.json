{"tx_hash": "9PWTp5WCk3Nzn75NUetUuSfH4P2qZvrbZVxF4bCK6NXv", "action_id_social": "2ZMAoDXc49BV2QUEtMhjkkK8zD6sLsf33Y1rwZHu2Epv-0-widget", "block_id": 116037073, "block_timestamp": "2024-04-03T08:37:44.815Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.STEAKHUT", "source_code": "const {\n  pairs,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  LAST_SNAP_SHOT_DATA_URL,\n  prices\n} = props\n\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_shares\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getUnderlyingAssets\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalX\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalY\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  \"function balanceOf(address) view returns (uint256)\",\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\n\nlet loading = false\nlet dataList = []\nfunction formatedData() {\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    const findIndex = allData.findIndex(data => pair.poolAddress === data.id)\n    console.log('=findIndex', findIndex)\n    if (findIndex > -1) {\n      dataList.push({\n        ...pair,\n        initialData: allData[findIndex],\n        feeApr: 'NaN%',\n      })\n    }\n  })\n  formatedData('getDataList')\n}\nfunction getTvlUsd() {\n  for (let i = 0; i < dataList.length; i++) {\n    const { underlyingX, underlyingY, tokenX, tokenY } = dataList[i].initialData\n    dataList[i].tvlUSD = Big(Big(ethers.utils.formatUnits(underlyingX, tokenX.decimals)).times(tokenX.priceUSD))\n      .plus(Big(ethers.utils.formatUnits(underlyingY, tokenY.decimals)).times(tokenY.priceUSD)).toString(2)\n  }\n  formatedData('getTvlUsd')\n}\nfunction handleGetLiquidity(i, users) {\n  const data = dataList[i]\n  const calls = []\n  users.forEach(user => {\n    calls.push({\n      address: data.initialData.id,\n      name: 'getUnderlyingAssets',\n      params: [user.amount]\n    })\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      const { tokenX, tokenY } = data.initialData\n      let liquidity = Big(0)\n      for (let j = 0; j < result.length; j++) {\n        const element = result[j];\n        const totalX = ethers.utils.formatUnits(element[0], tokenX.decimals)\n        const totalY = ethers.utils.formatUnits(element[1], tokenY.decimals)\n        const amount = Big(Big(totalX).times(tokenX.priceUSD)).plus(Big(totalY).times(tokenY.priceUSD))\n        liquidity = liquidity.plus(amount)\n      }\n      dataList[i].liquidity = liquidity.toFixed(4)\n      formatedData('getLiquidity')\n    },\n    (error) => {\n      setTimeout(() => {\n        getLiquidity();\n      }, 500);\n    }\n  )\n}\nfunction getLiquidity() {\n  for (let i = 0; i < dataList.length; i++) {\n    const data = dataList[i];\n    const users = data.initialData.users\n    if (users.length > 0) {\n      handleGetLiquidity(i, users)\n    }\n  }\n}\nfunction getBalance() {\n  const calls = [];\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  dataList.forEach(data => {\n    calls.push({\n      address: ethers.utils.getAddress(data.initialData.id),\n      name: \"balanceOf\",\n      params: [sender],\n    });\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        dataList[i].balance = ethers.utils.formatUnits(element[0], 18)\n      }\n      formatedData('getBalance')\n    },\n    (error) => {\n      setTimeout(() => {\n        getBalance();\n      }, 500);\n    }\n  )\n}\nuseEffect(() => {\n  getDataList()\n  getTvlUsd()\n  getBalance()\n  getLiquidity()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.STEAKHUT", "fact_widget_deployments_id": "8a50c1723c3678453d5b8c10d10fd599", "inserted_timestamp": "2024-04-03T10:40:22.338Z", "modified_timestamp": "2024-04-03T10:40:22.338Z", "__row_index": 1}