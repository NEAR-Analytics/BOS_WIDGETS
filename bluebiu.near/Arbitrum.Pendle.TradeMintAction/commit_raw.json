{"tx_hash": "2aerWQW8gsjueaCaWC1jo7cT26LNxrFKGfaCU2J7kaLm", "action_id_social": "6K9MrmeeBHTFuQnkt8tPnPJLBzQ3v1geLTWzDNjBv9im-0-widget", "block_id": 101114046, "block_timestamp": "2023-09-14T14:43:18.762Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.TradeMintAction", "source_code": "const {\n  onSuccess,\n  onError,\n  inputCurrencyAmount,\n  inputCurrency,\n  wethAddress,\n  outputCurrency,\n  routerAddress,\n  account,\n  market,\n  swapping,\n} = props;\n\nif (!swapping) return;\n\nconst abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"YT\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minPyOut\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mintPyFromSy\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPyOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"YT\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minPyOut\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"netTokenIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenMintSy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"bulk\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"pendleSwap\",\n            type: \"address\",\n          },\n          {\n            components: [\n              {\n                internalType: \"enum SwapType\",\n                name: \"swapType\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"address\",\n                name: \"extRouter\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"extCalldata\",\n                type: \"bytes\",\n              },\n              {\n                internalType: \"bool\",\n                name: \"needScale\",\n                type: \"bool\",\n              },\n            ],\n            internalType: \"struct SwapData\",\n            name: \"swapData\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct TokenInput\",\n        name: \"input\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mintPyFromToken\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPyOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst hanleMint = () => {\n  const signer = Ethers.provider().getSigner();\n\n  const contract = new ethers.Contract(routerAddress, abi, signer);\n\n  const receiver = account;\n  const YT = market.yt.address;\n\n  const minPyOut = \"0\";\n\n  // const netTokenIn = ethers.utils.parseUnits(\n  //   inputCurrencyAmount,\n  //   inputCurrency.decimals\n  // );\n\n  const netTokenIn = Big(inputCurrencyAmount)\n    .times(Big(10).pow(inputCurrency.decimals))\n    .toFixed(0);\n\n  const bulk = \"0x0000000000000000000000000000000000000000\";\n\n  const pendleSwap = \"0x38812C3AC3563Bf200482ac9D096952D7cB55f9b\";\n\n  const options = {\n    gasLimit: 5000000,\n    value: inputCurrency.address === \"native\" ? netTokenIn : \"0\",\n  };\n\n  if (inputCurrency.baseType === \"SY\") {\n    contract\n      .mintPyFromSy(receiver, YT, netTokenIn, minPyOut, options)\n      .then((res) => {\n        onSuccess?.();\n      })\n      .catch(() => {\n        onError?.();\n      });\n  } else {\n    const tokenIn =\n      inputCurrency.address == \"native\"\n        ? \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n        : inputCurrency.address;\n\n    // const params = {\n    //   tokenIn: tokenIn,\n    //   netTokenIn,\n    //   tokenMintSy: market.sy.address,\n    //   bulk,\n    //   pendleSwap,\n    //   swapData: {\n    //     swapType: 0,\n    //     extRouter: bulk,\n    //     extCalldata: \"0x00\",\n    //     needScale: false,\n    //   },\n    // };\n\n    const params = [\n      tokenIn,\n      netTokenIn,\n      tokenIn,\n      bulk,\n      pendleSwap,\n      [0, bulk, \"0x00\", false],\n    ];\n\n    return contract\n      .mintPyFromToken(receiver, YT, minPyOut, params, options)\n      .then((res) => {\n        onSuccess?.(res);\n      })\n      .catch((e) => {\n        onError?.();\n      });\n  }\n};\n\nif (swapping === state.swapping) {\n  return;\n} else {\n  State.update({\n    swapping,\n  });\n  hanleMint();\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.TradeMintAction", "fact_widget_deployments_id": "4a2fb938cac1a806eec50a9b0dfc08df", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}