{"tx_hash": "22J4gpUSuhQfVBqe49NoYCGbeyVGXju5yxEDbrfUoM3J", "action_id_social": "21DfVvvfg5Y2eCQLNQb8hR9xnHDHbPju9pyCqVPhACoR-0-widget", "block_id": 117959146, "block_timestamp": "2024-04-30T15:41:51.256Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Orbit.Dialog", "source_code": "const Dialog = styled.div`\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: none;\n  &.display {\n    display: block;\n  }\n`;\nconst Overlay = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(5px);\n  position: absolute;\n  z-index: 8000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  @media (max-width: 640px) {\n    align-items: flex-end;\n  }\n`;\nconst Content = styled.div`\n  background-color: #273046;\n  border-radius: 16px;\n  width: 396px;\n  @media (max-width: 640px) {\n    width: 100%;\n    border-radius: 16px 16px 0px 0px;\n  }\n`;\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nconst Title = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  color: #fff;\n  display: flex;\n  align-items: center;\n`;\nconst Apy = styled.span`\n  margin-left: 8px;\n  font-size: 16px;\n  font-weight: 400;\n  color: #fff;\n  &.supply-color {\n    color: var(--supply-color);\n  }\n  &.borrow-color {\n    color: var(--borrow-color);\n  }\n`;\nconst CloseIcon = styled.div`\n  color: #979abe;\n`;\nconst AssetWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n`;\nconst Token = styled.div`\n  display: flex;\n  flex-shrink: 0;\n`;\nconst TokenLogo = styled.img`\n  width: 22px;\n  height: 22px;\n  border-radius: 50%;\n  margin-right: 4px;\n`;\nconst TokenSymbol = styled.div`\n  font-size: 16px;\n  color: #fff;\n  font-weight: 400;\n`;\nconst InputWrapper = styled.div`\n  height: 55px;\n  border-radius: 10px;\n  background-color: rgba(22, 24, 38, 0.5);\n  display: flex;\n  align-items: center;\n  margin-top: 20px;\n  padding: 0px 10px;\n`;\nconst Input = styled.input`\n  font-size: 18px;\n  color: #fff;\n  font-weight: 500;\n  background-color: transparent;\n  outline: none;\n  border: none;\n  height: 22px;\n  vertical-align: bottom;\n  flex-grow: 1;\n\n  &::placeholder {\n    color: #979abe;\n  }\n`;\nconst InputBalance = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 12px;\n  font-weight: 400;\n  color: #979abe;\n  margin-top: 4px;\n  margin-bottom: 10px;\n`;\nconst BalanceValue = styled.div``;\nconst BalanceWrapper = styled.div`\n  text-align: right;\n  cursor: pointer;\n`;\nconst Balance = styled.span`\n  font-weight: 400;\n  text-decoration: underline;\n`;\nconst Row = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 0px;\n  font-size: 16px;\n  font-weight: 400;\n  &.justfiy-start {\n    justify-content: flex-start;\n    gap: 10px;\n  }\n`;\nconst Label = styled.div`\n  color: #979abe;\n`;\nconst Value = styled.div`\n  color: #fff;\n  text-align: right;\n  &.range {\n    text-decoration: line-through;\n  }\n`;\nconst Tips = styled.div`\n  border-radius: 6px;\n  background-color: var(--switch-color);\n  display: flex;\n  align-items: center;\n  color: #fff;\n  padding: 5px;\n  margin: 10px 0;\n  line-height: 1;\n  font-size: 14px;\n  .icon {\n    margin-right: 4px;\n    flex-shrink: 0;\n    margin-top: -1px;\n  }\n`;\nconst ValuesWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  .mx_5 {\n    margin: 0px 5px;\n  }\n`;\nconst CollateralToken = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #fff;\n  display: flex;\n  gap: 4px;\n  padding-top: 20px;\n`;\nconst AssetLabel = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #979abe;\n`;\nconst Dapp = styled.div`\n  padding: 0px 6px;\n  height: 26px;\n  border-radius: 6px;\n  background-color: rgba(151, 154, 190, 0.2);\n  gap: 6px;\n  display: flex;\n  align-items: center;\n  padding: 10px;\n`;\nconst DappIcon = styled.img`\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n`;\nconst DappName = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  color: #fff;\n`;\nconst TokenSelect = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #fff;\n`;\nconst TopBox = styled.div`\n  padding: 30px 20px 10px;\n  border-bottom: 1px dashed #454967;\n\n  &.none-border {\n    border-bottom: none;\n  }\n`;\nconst BottomBox = styled.div`\n  padding: 10px 20px 20px;\n`;\nconst RewardApyItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-left: 8px;\n`;\nconst RewardIcon = styled.img`\n  width: 14px;\n  height: 14px;\n`;\nconst RewardApy = styled.div`\n  font-weight: 400;\n  line-height: 14px;\n  color: rgba(255, 255, 255, 0.5);\n  font-size: 12px;\n`;\n\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  display,\n  data,\n  orbitTab,\n  chainId,\n  onClose,\n  onSuccess,\n  source,\n  account,\n} = props;\nconsole.log(\"DIALOG--\", props);\nif (!data) return \"\";\nconst {\n  userTotalBorrowUsd,\n  userTotalSupplyUsd,\n  totalCollateralUsd,\n  userSupply,\n  underlyingPrice,\n} = data;\n\nconst actionText = data.actionText;\nconst isSupply = [\"Deposit\", \"Withdraw\"].includes(actionText);\nconst isBorrow = [\"Repay\", \"Borrow\"].includes(actionText);\nconst isForCollateral = !isSupply && !isBorrow;\nconst tokenSymbol = data.underlyingToken.symbol;\nconst currentLTV =\n  userTotalBorrowUsd && userTotalSupplyUsd\n    ? Big(userTotalBorrowUsd || 1)\n        .div(Big(userTotalSupplyUsd || 0))\n        .times(100)\n        .toFixed(2)\n    : \"-\";\nState.init({\n  amount: \"\",\n  newLTV: undefined,\n});\nconst formatBorrowLimit = (digits, round) => {\n  if (Big(data.totalCollateralUsd).gt(data.userTotalBorrowUsd)) {\n    return Big(data.totalCollateralUsd)\n      .minus(data.userTotalBorrowUsd)\n      .toFixed(digits || 2, round || 1);\n  }\n  return \"0.00\";\n};\n\nconst formatBalance = () => {\n  if (state.balanceLoading) return \"Loading\";\n  if (!state.balance) return \"-\";\n  if (Big(state.balance).eq(0)) return \"0\";\n  if (Big(state.balance).lt(0.0001)) return \"<0.0001\";\n  return Big(state.balance).toFixed(4, 0);\n};\nconst handleAmountChange = (_amount) => {\n  const amount = _amount.replace(/\\s+/g, \"\");\n\n  if (isNaN(Number(amount))) return;\n  const isZero = Big(amount || 0).eq(0);\n\n  if (isZero) {\n    State.update({\n      amount,\n      buttonClickable: false,\n      borrowLimit: \"\",\n      borrowLimitUsed: \"\",\n      borrowBalance: \"\",\n      isEmpty: Number(amount) === 0 && amount !== \"\",\n      isOverSize: false,\n      isBigerThanBalance: false,\n      newLTV: undefined,\n    });\n    return;\n  }\n\n  const params = {\n    amount: amount,\n  };\n  let isOverSize = false;\n\n  const value = Big(\n    Big(amount)\n      .mul(data.underlyingPrice || 1)\n      .toFixed(20)\n  );\n\n  if (isSupply) {\n    if (actionText === \"Withdraw\") {\n      if (!isZero) {\n        params.newLTV = Big(userTotalBorrowUsd || 1)\n          .div(Big(userTotalSupplyUsd || 0).minus(value))\n          .times(100)\n          .toFixed(2);\n      }\n      isOverSize = Big(data.userTotalBorrowUsd).eq(0)\n        ? false\n        : Big(data.totalCollateralUsd || 0)\n            .minus(value)\n            .mul(data.loanToValue)\n            .lt(data.userTotalBorrowUsd || 0);\n    }\n  }\n  if (isBorrow) {\n    if (actionText === \"Repay\") {\n      params.borrowBalance = Big(data.userTotalBorrowUsd).minus(value);\n      if (!isZero) {\n        params.newLTV = Big(userTotalBorrowUsd || 1)\n          .minus(value)\n          .div(Big(userTotalSupplyUsd || 0))\n          .times(100)\n          .toFixed(2);\n      }\n\n      isOverSize = value.gt(data.userTotalBorrowUsd);\n    }\n  }\n\n  params.isBigerThanBalance = Big(amount).gt(state.balance);\n  params.buttonClickable = !isOverSize && !params.isBigerThanBalance;\n  params.isOverSize = isOverSize;\n  params.isEmpty = false;\n  State.update(params);\n\n  state.debouncedGetTrade();\n};\n\nconst getAvailable = (_balance) => {\n  if (!_balance) return \"-\";\n  if (actionText !== \"Repay\") return _balance;\n  if (Big(_balance).lte(data.userBorrow || 0)) return _balance;\n  if (Big(_balance).gt(data.userBorrow || 0)) return data.userBorrow;\n};\n\nconst getBalance = () => {\n  const isUnderlying = [\"Deposit\", \"Repay\"].includes(actionText);\n  State.update({\n    balanceLoading: true,\n  });\n  if (isUnderlying && data.underlyingToken.isNative) {\n    Ethers.provider()\n      .getBalance(account)\n      .then((rawBalance) => {\n        State.update({\n          balance: getAvailable(ethers.utils.formatUnits(rawBalance._hex, 18)),\n          balanceLoading: false,\n        });\n      });\n    return;\n  }\n  if (isUnderlying && data.underlyingToken.address) {\n    const TokenContract = new ethers.Contract(\n      data.underlyingToken.address,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.balanceOf(account).then((rawBalance) => {\n      const _rawBalance = ethers.utils.formatUnits(\n        rawBalance._hex,\n        data.underlyingToken.decimals\n      );\n\n      State.update({\n        balance: getAvailable(_rawBalance),\n        balanceLoading: false,\n      });\n    });\n    return;\n  }\n  if (actionText === \"Withdraw\") {\n    State.update({\n      balance: Big(data.userSupply).toFixed(6),\n      balanceLoading: false,\n    });\n    return;\n  }\n};\nconst handleClose = () => {\n  State.update({\n    amount,\n    buttonClickable: false,\n    borrowLimit: \"\",\n    borrowLimitUsed: \"\",\n    borrowBalance: \"\",\n    isEmpty: Number(amount) === 0 && amount !== \"\",\n    isOverSize: false,\n    isBigerThanBalance: false,\n    newLTV: undefined,\n  });\n  onClose?.();\n  Storage.privateSet(\"prevAddress\", \"\");\n};\nif (Storage.privateGet(\"prevAddress\") !== data.address && display) {\n  let buttonClickable = false;\n  if (actionText === \"Enable as Collateral\") {\n    buttonClickable = true;\n  }\n  if (actionText === \"Disable as Collateral\") {\n    buttonClickable = Big(data.userTotalBorrowUsd).eq(0)\n      ? true\n      : Big(totalCollateralUsd)\n          .minus(Big(userSupply).mul(Big(underlyingPrice || 1)))\n          .gt(userTotalBorrowUsd);\n  }\n  State.update({\n    amount: \"\",\n    buttonClickable,\n    borrowBalance: \"\",\n  });\n  getBalance();\n  Storage.privateSet(\"prevAddress\", data.address);\n}\n\nuseEffect(() => {\n  const debounce = (fn, wait) => {\n    let timer;\n    return () => {\n      clearTimeout(timer);\n      timer = setTimeout(fn, wait);\n    };\n  };\n\n  const getTrade = () => {\n    State.update({\n      loading: true,\n    });\n  };\n\n  const debouncedGetTrade = debounce(getTrade, 500);\n\n  State.update({\n    debouncedGetTrade,\n    getTrade,\n  });\n}, []);\nconsole.log(\"DIALOG-STATE:\", state);\nreturn (\n  <Dialog className={display ? \"display\" : \"\"}>\n    <Overlay\n      onClick={() => {\n        handleClose();\n      }}\n    >\n      <Content\n        onClick={(ev) => {\n          ev.stopPropagation();\n        }}\n      >\n        <TopBox className={isForCollateral && \"none-border\"}>\n          <Header>\n            <Title>\n              <span>\n                {isForCollateral ? \"Collateral\" : actionText}{\" \"}\n                {!isForCollateral && tokenSymbol}\n              </span>\n              {!isForCollateral && source !== \"dapp\" && (\n                <>\n                  <Apy className={isSupply ? \"supply-color\" : \"borrow-color\"}>\n                    APY {isSupply ? data.supplyApy : data.borrowApy}\n                  </Apy>\n                  {data.distributionApy &&\n                    data.distributionApy\n                      .filter((reward) => reward.supply !== \"0.00%\")\n                      .map((reward) => (\n                        <RewardApyItem key={reward.symbol}>\n                          <RewardIcon src={reward.icon} />\n                          <RewardApy>{reward.supply}</RewardApy>\n                        </RewardApyItem>\n                      ))}\n                </>\n              )}\n            </Title>\n            <CloseIcon>\n              <Widget\n                src=\"bluebiu.near/widget/Arbitrum.Swap.CloseIcon\"\n                props={{ onClose: handleClose, size: 18 }}\n              />\n            </CloseIcon>\n          </Header>\n          {isForCollateral && (\n            <CollateralToken>\n              {actionText === \"Disable as Collateral\"\n                ? \"Disabling\"\n                : \"Enabling\"}\n              <Token>\n                <TokenLogo src={data.underlyingToken.icon} />\n                <TokenSymbol>{tokenSymbol}</TokenSymbol>\n              </Token>\n              as Collateral\n            </CollateralToken>\n          )}\n          {!isForCollateral && (\n            <>\n              {source !== \"dapp\" && (\n                <AssetWrapper>\n                  <AssetLabel>Asset from</AssetLabel>\n                  <Dapp>\n                    <DappIcon src={data.dappIcon} />\n                    <DappName>{data.dappName}</DappName>\n                  </Dapp>\n                </AssetWrapper>\n              )}\n              <InputWrapper>\n                <Input\n                  value={state.amount}\n                  onChange={(ev) => {\n                    if (isNaN(Number(ev.target.value))) return;\n                    handleAmountChange(ev.target.value.replace(/\\s+/g, \"\"));\n                    State.update({\n                      isMax: Big(ev.target.value.replace(/\\s+/g, \"\") || 0).eq(\n                        state.balance || 0\n                      ),\n                    });\n                  }}\n                  placeholder=\"0.0\"\n                />\n                <TokenSelect>\n                  <TokenSymbol>{tokenSymbol}</TokenSymbol>\n                </TokenSelect>\n              </InputWrapper>\n              <InputBalance>\n                <BalanceValue>\n                  \u2248 $\n                  {state.amount\n                    ? Big(state.amount).mul(data.underlyingPrice).toFixed(2)\n                    : \"-\"}\n                </BalanceValue>\n                <BalanceWrapper\n                  onClick={(ev) => {\n                    if (state.balanceLoading || isNaN(state.balance)) return;\n                    handleAmountChange(state.balance);\n                    State.update({\n                      amount: Big(state.balance || 0).toFixed(12),\n                      isMax: true,\n                    });\n                  }}\n                >\n                  Available\n                  <Balance>{formatBalance()}</Balance>\n                </BalanceWrapper>\n              </InputBalance>\n            </>\n          )}\n        </TopBox>\n        <BottomBox>\n          {actionText === \"Repay\" || actionText === \"Withdraw\" ? (\n            <Row className={isForCollateral && \"justfiy-start\"}>\n              <Label>New LTV</Label>\n              <ValuesWrapper>\n                <Value>{currentLTV}</Value>\n                {!!state.newLTV && !state.isOverSize && !state.isEmpty && (\n                  <>\n                    <div className=\"mx_5\">\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingArrowIcon\"\n                        props={{ color: \"#979ABE\" }}\n                        className=\"mx_5\"\n                      />\n                    </div>\n                    <Value>{state.newLTV}%</Value>\n                  </>\n                )}\n              </ValuesWrapper>\n            </Row>\n          ) : null}\n\n          {actionText === \"Repay\" && (\n            <Row>\n              <Label>Remaining Debt</Label>\n              <ValuesWrapper>\n                <Value className={!!state.borrowBalance && \"range\"}>\n                  ${Big(data.userTotalBorrowUsd).toFixed(2)}\n                </Value>\n                {!!(isBorrow && state.borrowBalance) && (\n                  <>\n                    <div className=\"mx_5\">\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingArrowIcon\"\n                        props={{ color: \"#979ABE\" }}\n                        className=\"mx_5\"\n                      />\n                    </div>\n                    <Value>\n                      $\n                      {Big(state.borrowBalance).lte(0)\n                        ? 0\n                        : Big(state.borrowBalance).toFixed(2)}\n                    </Value>\n                  </>\n                )}\n              </ValuesWrapper>\n            </Row>\n          )}\n          {!!state.isOverSize && (\n            <Tips>\n              <div className=\"icon\">\n                <Widget src=\"bluebiu.near/widget/0vix.LendingInfoIcon\" />\n              </div>\n              Amount must be &lt;= 99% borrow limit.\n            </Tips>\n          )}\n          {!!state.isEmpty && (\n            <Tips>\n              <div className=\"icon\">\n                <Widget src=\"bluebiu.near/widget/0vix.LendingInfoIcon\" />\n              </div>\n              Amount must be &gt;0\n            </Tips>\n          )}\n          {!!state.isBigerThanBalance && (\n            <Tips>\n              <div className=\"icon\">\n                <Widget src=\"bluebiu.near/widget/0vix.LendingInfoIcon\" />\n              </div>\n              Amount must be &lt;= balance\n            </Tips>\n          )}\n          {!state.buttonClickable && (\n            <Tips>\n              <div className=\"icon\">\n                <Widget src=\"bluebiu.near/widget/0vix.LendingInfoIcon\" />\n              </div>\n              You currently have borrowed assets. Please repay them first.\n            </Tips>\n          )}\n          <Widget\n            src=\"bluebiu.near/widget/Avalanche.Lending.DialogButton\"\n            props={{\n              disabled: !state.buttonClickable,\n              actionText,\n              amount: state.isMax ? state.balance : state.amount,\n              data: data,\n              addAction: props.addAction,\n              toast: props.toast,\n              chainId,\n              unsignedTx: state.unsignedTx,\n              isError: state.isError,\n              loading: state.loading,\n              gas: state.gas,\n              account,\n              onApprovedSuccess: () => {\n                if (!state.gas) state.getTrade();\n              },\n              onSuccess: () => {\n                handleClose();\n                onSuccess?.();\n              },\n            }}\n          />\n        </BottomBox>\n      </Content>\n    </Overlay>\n    {data.config.handler && (\n      <Widget\n        src={data.config.handler}\n        props={{\n          update: state.loading,\n          display,\n          data: data,\n          amount: state.amount,\n          account,\n          orbitTab,\n          onLoad: (_data) => {\n            console.log(\"HANDLER_ONLOAD\", _data);\n            onSuccess?.();\n            State.update({\n              ..._data,\n              loading: false,\n            });\n          },\n        }}\n      />\n    )}\n  </Dialog>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Orbit.Dialog", "fact_widget_deployments_id": "b2cd15d50389850648f25051f41dbd94", "inserted_timestamp": "2024-04-30T17:40:52.856Z", "modified_timestamp": "2024-04-30T17:40:52.856Z", "__row_index": 5}