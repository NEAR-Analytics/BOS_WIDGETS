{"tx_hash": "AZuTS1SsKQZ96h5oxVzhh5D1oev8V6jZBWrwTfPEc31e", "action_id_social": "Fo5dGBi9RA2BWu84EsbzA9yXzr2QJ3e6hnhqhSBxu9u9-0-widget", "block_id": 101541011, "block_timestamp": "2023-09-20T09:36:52.702Z", "signer_id": "bluebiu.near", "widget_name": "Polygon.Swap.QuoterV3", "source_code": "const WETH_ADDRESS = props.wethAddress;\n\nconst abi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n      { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n      { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint160\", name: \"sqrtPriceLimitX96\", type: \"uint160\" },\n    ],\n    name: \"quoteExactInputSingle\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst { amountIn, tokenIn, tokenOut, loadAmountOut, quoterContractId } = props;\n\nconst feeList = [100, 500, 3000, 10000];\n\nconst queryString = `${tokenIn.address}-${tokenOut.address}-${amountIn}`;\n\nif (state.cacheString !== queryString) {\n  State.update({\n    cacheString: queryString,\n    quoteDone: false,\n    quoting: false,\n  });\n}\n\nconst quoteSingle = (amountIn, tokenIn, tokenOut, fee, finalList) => {\n  const iface = new ethers.utils.Interface(abi);\n\n  const inputs = [\n    tokenIn.address === \"native\" ? WETH_ADDRESS : tokenIn.address,\n    tokenOut.address === \"native\" ? WETH_ADDRESS : tokenOut.address,\n    fee,\n\n    ethers.utils.parseUnits(amountIn, tokenIn.decimals),\n    0,\n  ];\n\n  const encodedData = iface.encodeFunctionData(\"quoteExactInputSingle\", inputs);\n\n  return Ethers.provider()\n    .call({\n      to: quoterContractId,\n      data: encodedData,\n    })\n    .then((data) => {\n      const res = iface.decodeFunctionResult(\"quoteExactInputSingle\", data);\n\n      const rawAmountOut = Big(res.amountOut.toString()).toFixed();\n\n      const parsedAmountOut = new Big(rawAmountOut)\n        .div(Big(10).pow(tokenOut.decimals))\n        .toFixed();\n\n      return [\n        ...finalList,\n        {\n          fee: fee,\n          amountOut: parsedAmountOut,\n          success: true,\n        },\n      ];\n    })\n    .catch((e) => {\n      return [\n        ...finalList,\n        {\n          fee: fee,\n          amountOut: \"0\",\n          success: false,\n        },\n      ];\n    });\n};\n\nconst quoteAll = () => {\n  State.update({\n    quoting: true,\n  });\n\n  quoteSingle(amountIn, tokenIn, tokenOut, feeList[0], [])\n    .then((finalList0) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[1], finalList0);\n    })\n    .then((finalList1) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[2], finalList1);\n    })\n    .then((finalList2) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[3], finalList2);\n    })\n    .then((finalList3) => {\n      const maxAmountOutEstimate = finalList3.reduce((prev, current) => {\n        if (Number(prev.amountOut) > Number(current.amountOut)) {\n          return prev;\n        } else {\n          return current;\n        }\n      }, finalList3[0]);\n\n      State.update({ quoteDone: true, quoting: false });\n      loadAmountOut({\n        ...maxAmountOutEstimate,\n        quoteDone,\n        quoting,\n      });\n    });\n};\n\nconst wrapType =\n  tokenIn.address === \"native\" && tokenOut.symbol === \"WETH\"\n    ? 1\n    : tokenIn.symbol === \"WETH\" && tokenOut.address === \"native\"\n    ? 2\n    : 0;\n\nif (Number(amountIn) > 0 && !state.quoteDone && !state.quoting) {\n  if (wrapType > 0) {\n    loadAmountOut({\n      amountOut: amountIn,\n      fee: 0,\n      success: true,\n      quoteDone: true,\n      quoting: false,\n    });\n  } else {\n    quoteAll();\n  }\n}\nreturn <div></div>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Polygon.Swap.QuoterV3", "fact_widget_deployments_id": "39c976521e5562f4a57097707e86537b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}