{"tx_hash": "DXsVS1wygvQhGV4aSBw8L2iXaC4dUp6MyJi2muD7mxXW", "action_id_social": "4jBvHV3h73adeFf5ZLqXxsjeifHeg6Zet84P3mTiZrbH-0-widget", "block_id": 112236273, "block_timestamp": "2024-02-06T13:27:26.566Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Gamma.DialogButton", "source_code": "const StyledButtonList = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 14px;\n`\nconst StyledLoading = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: rotate 1.5s linear  infinite;\n  @keyframes rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\nconst StyledButton = styled.button`\n  width: 100%;\n  height: 48px;\n  border-radius: 12px;\n  background: linear-gradient(180deg, #eef3bf 0%, #e9f456 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #000;\n  text-align: center;\n  font-size: 18px;\n  line-height: 22px;\n  font-weight: 700;\n  line-height: normal;\n  cursor: pointer;\n  transition: 0.3s;\n  border: none;\n  float: right;\n  margin-bottom: 20px;\n\n  &:disabled {\n    background: linear-gradient(180deg, #5f614d 0%, #3a3d11 100%);\n  }\n  &:not(disabled):hover {\n    opacity: 0.9;\n  }\n\n  &:active {\n    opacity: 0.8;\n  }\n`;\nconst iconCircle = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n    <path d=\"M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8\" stroke=\"#1E2028\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n  </svg>\n)\nconst {\n  toast,\n  token0,\n  token1,\n  amount0,\n  amount1,\n  balance0,\n  balance1,\n  addAction,\n  addresses,\n  hypeAddress,\n  setAmount0,\n  setAmount1,\n  currentPair,\n  proxyAddress,\n  onLoad,\n  onSuccess,\n\n} = props\n\n\nState.init({\n  isLoading: false,\n  isError: false,\n  loadingMsg: '',\n  isToken0Approved: false,\n  isToken1Approved: false,\n  isToken0Approving: false,\n  isToken1Approving: false,\n})\n\nconst {\n  isLoading,\n  isError,\n  loadingMsg,\n  isToken0Approved,\n  isToken1Approved,\n  isToken0Approving,\n  isToken1Approving\n} = state\n\n\nconst isInSufficient = Number(amount0) > Number(balance0) || Number(amount1) > Number(balance1)\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst getFromDepositAmount = (depositAmount, tokenDecimal) => {\n  let a = new Big(depositAmount[0].toString());\n  let b = new Big(depositAmount[1].toString());\n\n  if (a.eq(0) && b.eq(0)) return \"0\";\n\n  let diff;\n  let midpoint;\n  if (a.gt(b)) {\n    diff = a.minus(b);\n    midpoint = diff.div(new Big(2)).plus(b);\n  } else {\n    diff = b.minus(a);\n    midpoint = diff.div(new Big(2)).plus(a);\n  }\n\n  for (let i = tokenDecimal; i > 0; i--) {\n    const midpointFixed = midpoint\n      .div(new Big(10).pow(tokenDecimal))\n      .toFixed(i);\n    if (\n      a.div(Big(10).pow(tokenDecimal)).lte(midpointFixed) &&\n      b.div(Big(10).pow(tokenDecimal)).gte(midpointFixed)\n    ) {\n      return midpointFixed;\n    }\n  }\n\n  return \"0\";\n};\nconst checkApproval = (token0Amount, token1Amount) => {\n  const token0Wei = ethers.utils.parseUnits(\n    Big(token0Amount).toFixed(token0.decimals),\n    token0.decimals\n  );\n  const token1Wei = ethers.utils.parseUnits(\n    Big(token1Amount).toFixed(token1.decimals),\n    token1.decimals\n  );\n  const abi = [\n    \"function allowance(address, address) external view returns (uint256)\",\n  ];\n\n  const token0Contract = new ethers.Contract(\n    addresses[token0.symbol],\n    abi,\n    Ethers.provider()\n  );\n\n  token0Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance0) => {\n      State.update({\n        isToken0Approved: !new Big(allowance0.toString()).lt(token0Wei),\n      })\n    })\n    .catch((e) => console.log(e));\n\n  const token1Contract = new ethers.Contract(\n    addresses[token0.symbol],\n    abi,\n    Ethers.provider()\n  );\n\n  token1Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance1) => {\n      State.update({\n        isToken1Approved: !new Big(allowance1.toString()).lt(token1Wei),\n      })\n    })\n    .catch((e) => console.log(e));\n};\n\nconst handleTokenChange = (amount, symbol) => {\n  console.log('=====amount', amount, '=====symbol', symbol)\n  symbol === token0.symbol ? setAmount0(amount) : setAmount1(amount)\n\n  if (Number(amount) === 0) {\n    symbol === token0.symbol ? setAmount1(\"\") : setAmount0(\"\")\n    State.update({\n      isToken0Approved: true,\n      isToken1Approved: true\n    })\n    return;\n  }\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\"\n  })\n\n  const decimals = symbol === token0.symbol ? token0.decimals : token1.decimals\n  const otherDecimals = symbol === token0.symbol ? token1.decimals : token0.decimals\n\n  const tokenWei = ethers.utils.parseUnits(\n    Big(amount).toFixed(decimals),\n    decimals\n  );\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n  console.log('proxyAddress', proxyAddress, '====hypeAddress', hypeAddress, 'addresses[symbol]', addresses[symbol], 'tokenWei', tokenWei)\n  proxyContract\n    .getDepositAmount(ethers.utils.getAddress(hypeAddress), addresses[symbol], tokenWei)\n    .then((depositAmount) => {\n      console.log('===depositAmount', depositAmount)\n      const otherAmount = getFromDepositAmount(depositAmount, otherDecimals);\n      symbol === token0.symbol ? setAmount1(otherAmount) : setAmount0(otherAmount)\n      State.update({\n        isLoading: false,\n      })\n      checkApproval(amount, otherAmount);\n    })\n    .catch((e) => {\n      console.log('====e', e)\n      State.update({\n        isLoading: true,\n        isError: true,\n        loadingMsg: \"Something went wrong. Please try again.\"\n      })\n      symbol === token0.symbol ? setAmount1(0) : setAmount0(0)\n    });\n};\n\nconst handleApprove = (symbol) => {\n  const isToken0 = symbol === token0.symbol\n  const payload = isToken0\n    ? { isToken0Approving: true }\n    : { isToken1Approving: true };\n  const amount = isToken0 ? Big(amount0).toFixed(token0.decimals) : Big(amount1).toFixed(token1.decimals);\n  const toastId = toast?.loading({\n    title: `Approve ${amount} ${symbol}`,\n  });\n\n  State.update({\n    ...payload,\n    isLoading: true,\n    loadingMsg: `Approving ${_token}...`,\n  });\n  const tokenWei = ethers.utils.parseUnits(\n    amount,\n    isToken0 ? token0.decimals : token1.decimals\n  );\n  const abi = [\"function approve(address, uint) public\"];\n  const tokenContract = new ethers.Contract(\n    addresses[symbol],\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  tokenContract\n    .approve(hypeAddress, tokenWei)\n    .then((tx) => tx.wait())\n    .then((receipt) => {\n      const payload = isToken0\n        ? { isToken0Approved: true, isToken0Approving: false }\n        : { isToken1Approved: true, isToken1Approving: false };\n      State.update({ ...payload, isLoading: false, loadingMsg: \"\" });\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Approve Successfully!\",\n        text: `Approve ${amount} ${symbol}`,\n        tx: receipt.transactionHash,\n        chainId,\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n        isToken0Approving: false,\n        isToken1Approving: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Approve Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Approve ${amount} ${symbol}`,\n      });\n    });\n};\nconst handleDeposit = () => {\n  const toastId = toast?.loading({\n    title: `Depositing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(\n    Big(amount0).toFixed(token0.decimals),\n    token0.decimals\n  );\n  const token1Wei = ethers.utils.parseUnits(\n    Big(amount1).toFixed(token1.decimals),\n    token1.decimals\n  );\n\n  const proxyAbi = [\n    \"function deposit(uint256, uint256,address,address,uint256[4] memory)  external returns (uint256)\",\n  ];\n\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider().getSigner()\n  );\n  proxyContract\n    .deposit(token0Wei, token1Wei, sender, hypeAddress, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Deposit\",\n        token0,\n        token1,\n        amount: amount0,\n        template: \"Gamma\",\n        status: status,\n        transactionHash,\n        chain_id: chainId,\n      });\n      State.update({\n        isLoading: false,\n      });\n      onSuccess()\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Deposit Successfully!\",\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Deposit Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : \"\",\n      });\n    });\n};\n\nonLoad({\n  onTokenChange: handleTokenChange\n})\nreturn (\n  <StyledButtonList>\n    {isInSufficient && <StyledButton disabled>InSufficient Balance</StyledButton>}\n    {\n      !isInSufficient &&\n      (isToken0Approved &&\n        isToken1Approved &&\n        !isToken0Approving &&\n        !isToken1Approving ? (\n\n        <StyledButton disabled={isLoading || !amount0 || !amount1} onClick={handleDeposit}>\n          {\n            isLoading ? (\n              <StyledLoading>{iconCircle}</StyledLoading>\n            ) : (\n              \"Deposit\"\n            )\n          }\n        </StyledButton>\n      ) : (\n        <>\n          <StyledButton disabled={isToken0Approved || isToken0Approving} onClick={() => handleApprove(token0.symbol)}>{\n            isToken0Approving ? (\n              <StyledLoading>{iconCircle}</StyledLoading>\n            ) : (\n              <>\n                {isToken0Approved ? \"Approved\" : \"Approve\"} {currentPair.token0}\n              </>\n            )}\n          </StyledButton>\n          <StyledButton disabled={isToken1Approved || isToken1Approving} onClick={() => handleApprove(token1.symbol)}>{\n            isToken1Approving ? (\n              <StyledLoading>{iconCircle}</StyledLoading>\n            ) : (\n              <>\n                {isToken1Approved ? \"Approved\" : \"Approve\"} {currentPair.token1}\n              </>\n            )}\n          </StyledButton>\n        </>\n      ))\n    }\n  </StyledButtonList>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Gamma.DialogButton", "fact_widget_deployments_id": "a43705c967e7e19ce9deb0c811517af7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}