{"tx_hash": "43bCi3Rp7jy3eiVLYBxGAbioYgR585XjhreZRk31wsV6", "action_id_social": "4SNpeKj9zo6vTARUEKQHcpVc5KcuMvMDjTQhdnipLJjf-0-widget", "block_id": 107136831, "block_timestamp": "2023-12-04T12:31:06.129Z", "signer_id": "bluebiu.near", "widget_name": "0vix.LendingDialogButton", "source_code": "const ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst CTOKEN_ABI = [\n  {\n    inputs: [{ internalType: \"uint256\", name: \"mintAmount\", type: \"uint256\" }],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"redeemAmount\", type: \"uint256\" },\n    ],\n    name: \"redeemUnderlying\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"borrowAmount\", type: \"uint256\" },\n    ],\n    name: \"borrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"repayAmount\", type: \"uint256\" }],\n    name: \"repayBorrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address[]\", name: \"oTokens\", type: \"address[]\" }],\n    name: \"enterMarkets\",\n    outputs: [{ internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"oTokenAddress\", type: \"address\" },\n    ],\n    name: \"exitMarket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst Button = styled.button`\n  background-color: #8b71c2;\n  line-height: 48px;\n  border-radius: 6px;\n  color: #fff;\n  font-size: 18px;\n  font-weight: 500;\n  border: none;\n  width: 100%;\n  transition: 0.5s;\n  margin-top: 10px;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.3;\n  }\n`;\nconst ApproveTips = styled.div`\n  background-color: rgba(121, 79, 221, 0.25);\n  border-radius: 24px;\n  padding: 0px 10px;\n  line-height: 28px;\n  font-size: 14px;\n  font-weight: 400;\n  color: #fff;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n  .icon {\n    margin-right: 4px;\n    flex-shrink: 0;\n    margin-top: -1px;\n  }\n`;\nState.init({\n  approving: false,\n  isApproved: false,\n});\nconst {\n  disabled,\n  actionText,\n  amount,\n  market,\n  unitrollerAddress,\n  onSuccess,\n  onMessage,\n} = props;\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst tokenSymbol = market.symbol.slice(1).toUpperCase();\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    market.underlyingToken.address,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, market.address).then((allowanceRaw) => {\n    State.update({\n      isApproved: !Big(\n        ethers.utils.formatUnits(\n          allowanceRaw._hex,\n          market.underlyingToken.decimals\n        )\n      ).lt(amount || \"0\"),\n    });\n  });\n};\nif (\n  [\"Supply\", \"Repay\"].includes(actionText) &&\n  market.underlyingToken.address !== \"native\"\n) {\n  getAllowance();\n} else {\n  State.update({ isApproved: true });\n  onLoad?.(true);\n}\nif (!state.isApproved) {\n  const handleApprove = () => {\n    State.update({\n      approving: true,\n    });\n    onMessage?.({\n      status: 3,\n      open: true,\n      text: `Submitting ${tokenSymbol} approval request...`,\n    });\n    const TokenContract = new ethers.Contract(\n      market.underlyingToken.address,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(\n      market.address,\n      ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n    )\n      .then((tx) => {\n        tx.wait().then((res) => {\n          const { status } = res;\n          State.update({\n            isApproved: status === 1,\n            approving: false,\n          });\n          onMessage?.({\n            status: status === 1 ? 1 : 2,\n            open: true,\n            text: status === 1 ? \"Approved successed!\" : \"Approved failed!\",\n          });\n          onLoad?.(status === 1);\n        });\n      })\n      .catch(() => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        onMessage?.({\n          status: 2,\n          open: true,\n          text: \"Approved failed!\",\n        });\n        onLoad?.(false);\n      });\n  };\n  return (\n    <>\n      <ApproveTips>\n        <div className=\"icon\">\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingInfoIcon\"\n            props={{ color: \"#C7FF18\" }}\n          />\n        </div>\n        You must approve {tokenSymbol} first.\n      </ApproveTips>\n      <Button onClick={handleApprove} disabled={state.approving}>\n        Approve {tokenSymbol}\n        {state.approving && \"...\"}\n      </Button>\n    </>\n  );\n}\n\nif (actionText.includes(\"Collateral\")) {\n  return (\n    <>\n      <Button\n        disabled={state.loading}\n        onClick={() => {\n          State.update({\n            loading: true,\n          });\n          onMessage?.({\n            status: 3,\n            open: true,\n            text: `Submitting ${tokenSymbol} ${\n              isEnter ? \"enable\" : \"disable\"\n            } as collateral request...`,\n          });\n          const isEnter = actionText === \"Enable as Collateral\";\n          const CollateralContract = new ethers.Contract(\n            unitrollerAddress,\n            UNITROLLER_ABI,\n            Ethers.provider().getSigner()\n          );\n          const method = isEnter ? \"enterMarkets\" : \"exitMarket\";\n          const parameters = isEnter ? [market.address] : market.address;\n          CollateralContract[method](parameters)\n            .then((tx) => {\n              tx.wait().then((res) => {\n                const { status } = res;\n                State.update({\n                  loading: false,\n                });\n\n                if (status === 1) onSuccess?.();\n                State.update({\n                  loading: false,\n                });\n                onMessage?.({\n                  status: status === 1 ? 1 : 2,\n                  open: true,\n                  text: `${tokenSymbol} ${\n                    isEnter ? \"enable\" : \"disable\"\n                  } as collateral request ${\n                    status === 1 ? \"successed!\" : \"failed!\"\n                  }`,\n                });\n              });\n            })\n            .catch(() => {\n              State.update({\n                loading: false,\n              });\n              onMessage?.({\n                status: 2,\n                open: true,\n                text: `${tokenSymbol} ${\n                  isEnter ? \"enable\" : \"disable\"\n                } as collateral request failed!\n                `,\n              });\n            });\n        }}\n      >\n        {actionText}\n        {state.loading && \"...\"}\n      </Button>\n    </>\n  );\n}\n\nconst CTokenContract = new ethers.Contract(\n  market.address,\n  CTOKEN_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst CNativeTokenContract = new ethers.Contract(\n  market.address,\n  [\n    {\n      inputs: [],\n      name: \"mint\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\n\nconst getParametersAndOptions = () => {\n  const parameters = [];\n  const options = {};\n  if ([\"Supply\", \"Repay\"]) {\n    if (market.underlyingToken.address !== \"native\") {\n      parameters.push(\n        ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n      );\n    } else {\n      options.value = ethers.utils.parseUnits(\n        amount,\n        market.underlyingToken.decimals\n      );\n    }\n    return [parameters, options];\n  }\n  parameters.push(\n    ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n  );\n  return [parameters, options];\n};\n\nconst AccessKey = Storage.get(\n  \"AccessKey\",\n  \"guessme.near/widget/ZKEVMWarmUp.add-to-quest-card\"\n);\n\nfunction add_action(param_body) {\n  asyncFetch(\"/dapdap/api/action/add \", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: AccessKey,\n    },\n    body: JSON.stringify(param_body),\n  });\n}\nconst questionSwitch = Storage.get(\n  \"zkevm-is-quest\",\n  \"bluebiu.near/widget/0vix.LendingQuest\"\n);\n\nconst uuid = Storage.get(\n  \"zkevm-warm-up-uuid\",\n  \"guessme.near/widget/ZKEVMWarmUp.generage-uuid\"\n);\n\nreturn (\n  <>\n    <Button\n      disabled={state.loading || disabled}\n      onClick={() => {\n        State.update({\n          loading: true,\n        });\n        onMessage?.({\n          status: 3,\n          open: true,\n          text: `Submitting ${tokenSymbol} ${actionText.toLowerCase()} request...`,\n        });\n        const handleSuccess = (tx, type) => {\n          tx.wait().then((res) => {\n            const { status, transactionHash } = res;\n            State.update({\n              loading: false,\n            });\n            onMessage?.({\n              status: status === 1 ? 1 : 2,\n              open: true,\n              text: `${tokenSymbol} ${actionText.toLowerCase()} request ${\n                status === 1 ? \" successed!\" : \" failed!\"\n              }`,\n            });\n\n            if (status === 1) {\n              const symbol = market.symbol.slice(1);\n              if (type) {\n                add_action({\n                  action_title: `${type} ${symbol} on 0vix`,\n                  action_type: type,\n                  action_tokens: JSON.stringify([`${symbol}`]),\n                  action_amount: amount,\n                  account_id: account,\n                  account_info: uuid,\n                  template: \"Lending\",\n                  action_switch: questionSwitch === \"on\" ? \"1\" : \"0\",\n                  action_status: status === 1 ? \"Success\" : \"Failed\",\n                  tx_id: transactionHash,\n                  action_network_id: \"zkEVM\",\n                });\n              }\n              onSuccess?.();\n            }\n          });\n        };\n        const handleError = () => {\n          State.update({\n            loading: false,\n          });\n          onMessage?.({\n            status: 2,\n            open: true,\n            text: `${tokenSymbol} ${actionText.toLowerCase()} request\n            failed!\n           `,\n          });\n        };\n        if (actionText === \"Supply\") {\n          if (market.underlyingToken.address === \"native\") {\n            CNativeTokenContract.mint({\n              value: ethers.utils.parseUnits(amount, 18),\n            })\n              .then((tx) => {\n                handleSuccess(tx, \"Supply\");\n              })\n              .catch((err) => {\n                console.log(err);\n                handleError();\n              });\n          } else {\n            CTokenContract.mint(\n              ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n            )\n              .then((tx) => {\n                handleSuccess(tx, \"Supply\");\n              })\n              .catch((err) => {\n                console.log(err);\n                handleError();\n              });\n          }\n          return;\n        }\n        if (actionText === \"Withdraw\") {\n          CTokenContract.redeemUnderlying(\n            ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n          )\n            .then((tx) => {\n              handleSuccess(tx, \"Withdraw\");\n            })\n            .catch((err) => {\n              console.log(err);\n              handleError();\n            });\n          return;\n        }\n        if (actionText === \"Borrow\") {\n          CTokenContract.borrow(\n            ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n          )\n            .then((tx) => {\n              handleSuccess(tx, \"Borrow\");\n            })\n            .catch((err) => {\n              console.log(err);\n              handleError();\n            });\n          return;\n        }\n        if (actionText === \"Repay\") {\n          CTokenContract.repayBorrow(\n            ethers.utils.parseUnits(amount, market.underlyingToken.decimals)\n          )\n            .then((tx) => {\n              handleSuccess(tx, \"Repay\");\n            })\n            .catch((err) => {\n              console.log(err);\n              handleError();\n            });\n        }\n      }}\n    >\n      {actionText} {tokenSymbol}\n      {state.loading && \"...\"}\n    </Button>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/0vix.LendingDialogButton", "fact_widget_deployments_id": "327420b86c2be12351c6a33c5ba0043e", "inserted_timestamp": "2023-12-04T14:23:25.429Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}