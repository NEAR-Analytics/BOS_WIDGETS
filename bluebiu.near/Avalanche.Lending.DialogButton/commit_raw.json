{"tx_hash": "zxg3E8SW21Qm4akk33LbaZ8CoD8g4TQMhEQKaX1Eokr", "action_id_social": "FbDqznmNkosFiSNpYjDVRYLS9yEcTXe7TAPtjwsvi7Te-0-widget", "block_id": 111210419, "block_timestamp": "2024-01-24T15:24:48.514Z", "signer_id": "bluebiu.near", "widget_name": "Avalanche.Lending.DialogButton", "source_code": "const ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst Button = styled.button`\n  background-color: var(--switch-color);\n  line-height: 46px;\n  border-radius: 10px;\n  color: var(--button-text-color);\n  font-size: 18px;\n  font-weight: 500;\n  border: none;\n  width: 100%;\n  transition: 0.5s;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n  &.borrow {\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.repay {\n    background-color: var(--repay-bg-hover-color);\n    border: 1px solid var(--repay-border-color);\n  }\n`;\n\nconst {\n  disabled,\n  actionText,\n  amount,\n  data,\n  chainId,\n  onSuccess,\n  toast,\n  addAction,\n  unsignedTx,\n  loading: estimating,\n  gas,\n  onApprovedSuccess,\n} = props;\n\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst tokenSymbol = data.underlyingToken.symbol;\nif (!actionText) return;\nconsole.log(\"data---\", data);\nuseEffect(() => {\n  State.update({\n    approving: false,\n    isApproved: false,\n    isGasEnough: true,\n  });\n}, []);\n\nuseEffect(() => {\n  if (!account || !gas) return;\n  const provider = Ethers.provider();\n  provider.getBalance(account).then((rawBalance) => {\n    State.update({\n      gasBalance: rawBalance.toString(),\n      isGasEnough: !Big(rawBalance.toString()).lt(gas.toString()),\n      gas: ethers.utils.formatUnits(gas, 18),\n    });\n  });\n}, [account, gas]);\n\nif (actionText.includes(\"Collateral\")) {\n  return (\n    <>\n      <Button\n        disabled={state.loading || disabled || estimating || !state.isGasEnough}\n        onClick={() => {\n          const isEnter = actionText === \"Enable as Collateral\";\n          const toastId = toast?.loading({\n            title: `Submitting ${tokenSymbol} ${\n              isEnter ? \"enable\" : \"disable\"\n            } as collateral request...`,\n          });\n          State.update({\n            loading: true,\n          });\n          Ethers.provider()\n            .getSigner()\n            .sendTransaction(unsignedTx)\n            .then((tx) => {\n              tx.wait()\n                .then((res) => {\n                  const { status, transactionHash } = res;\n                  toast?.dismiss(toastId);\n                  if (status !== 1) throw new Error(\"\");\n                  State.update({\n                    loading: false,\n                  });\n                  toast?.success({\n                    title: `${tokenSymbol} ${\n                      isEnter ? \"enable\" : \"disable\"\n                    } as collateral request successed!`,\n                    tx: transactionHash,\n                    chainId,\n                  });\n                  onSuccess?.(data.dapp);\n                })\n                .catch((err) => {\n                  State.update({\n                    loading: false,\n                  });\n                });\n            })\n            .catch((err) => {\n              State.update({\n                loading: false,\n              });\n              toast?.dismiss(toastId);\n              toast?.fail({\n                title: err?.message?.includes(\"user rejected transaction\")\n                  ? \"User rejected transaction\"\n                  : `${tokenSymbol} ${\n                      isEnter ? \"enable\" : \"disable\"\n                    } as collateral request failed!`,\n                tx: err ? err.hash : \"\",\n                chainId,\n              });\n            });\n        }}\n      >\n        {state.loading || estimating ? (\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n            props={{\n              size: 16,\n            }}\n          />\n        ) : !state.isGasEnough ? (\n          `Not enough gas(${Big(state.gas || 0).toFixed(2)}) needed`\n        ) : (\n          \"Confirm\"\n        )}\n      </Button>\n    </>\n  );\n}\nif (!amount) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Enter An Amount\n    </Button>\n  );\n}\n\nconst getAAVE2TokenAddress = () => {\n  return data.underlyingToken.address === \"native\"\n    ? data.address\n    : data.underlyingToken.address;\n};\n\nconst getAAVE2ApproveAddress = () => {\n  return data.underlyingToken.address === \"native\"\n    ? data.config.wethGateway\n    : data.config.lendingPoolAddress;\n};\n\nconst tokenAddr =\n  data.config.type === \"aave2\"\n    ? getAAVE2TokenAddress()\n    : data.underlyingToken.address;\nconst spender =\n  data.config.type == \"aave2\" ? getAAVE2ApproveAddress() : data.address;\nconsole.log(\"APPROVE: \", tokenAddr, spender);\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    tokenAddr,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, spender).then((allowanceRaw) => {\n    console.log(\"ALLOWANCE:\", allowanceRaw.toString());\n    State.update({\n      isApproved: !Big(\n        ethers.utils.formatUnits(\n          allowanceRaw._hex,\n          data.underlyingToken.decimals\n        )\n      ).lt(amount || \"0\"),\n    });\n  });\n};\n\nif (data.underlyingToken.address === \"native\") {\n  if ([\"Deposit\", \"Repay\"].includes(actionText)) {\n    State.update({ isApproved: true });\n    onLoad?.(true);\n  }\n  if ([\"Withdraw\", \"Borrow\"].includes(actionText)) {\n    getAllowance();\n  }\n} else {\n  if ([\"Deposit\", \"Repay\"].includes(actionText)) {\n    getAllowance();\n  }\n  if ([\"Withdraw\", \"Borrow\"].includes(actionText)) {\n    State.update({ isApproved: true });\n    onLoad?.(true);\n  }\n}\n\nif (!state.isApproved) {\n  const handleApprove = () => {\n    const toastId = toast?.loading({\n      title: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n    });\n    State.update({\n      approving: true,\n    });\n\n    const TokenContract = new ethers.Contract(\n      tokenAddr,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(\n      spender,\n      ethers.utils.parseUnits(amount, data.underlyingToken.decimals)\n    )\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              isApproved: true,\n              approving: false,\n            });\n            toast?.success({\n              title: \"Approve Successfully!\",\n              text: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n            onApprovedSuccess();\n          })\n          .catch((err) => {\n            State.update({\n              isApproved: false,\n              approving: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n        });\n        onLoad?.(false);\n      });\n  };\n  return (\n    <Button onClick={handleApprove} disabled={state.approving}>\n      {state.approving && (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      )}\n      Approve\n    </Button>\n  );\n}\n\nreturn (\n  <>\n    <Button\n      disabled={state.pending || disabled || estimating || !state.isGasEnough}\n      className={actionText.toLowerCase()}\n      onClick={() => {\n        const toastId = toast?.loading({\n          title: `Submitting ${tokenSymbol} ${actionText.toLowerCase()} request...`,\n        });\n        State.update({\n          pending: true,\n        });\n        Ethers.provider()\n          .getSigner()\n          .sendTransaction(unsignedTx)\n          .then((tx) => {\n            tx.wait()\n              .then((res) => {\n                const { status, transactionHash } = res;\n                toast?.dismiss(toastId);\n                State.update({\n                  pending: false,\n                });\n                addAction?.({\n                  type: \"Lending\",\n                  action: actionText,\n                  token: data.underlyingToken,\n                  amount,\n                  template: data.dappName,\n                  add: false,\n                  status,\n                  transactionHash,\n                });\n                if (status === 1) {\n                  onSuccess?.(data.dapp);\n                  toast?.success({\n                    title: `${tokenSymbol} ${actionText.toLowerCase()} request successed!`,\n                    tx: transactionHash,\n                    chainId,\n                  });\n                } else {\n                  toast?.fail({\n                    title: `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n                    tx: transactionHash,\n                    chainId,\n                  });\n                }\n              })\n              .catch((err) => {\n                State.update({\n                  pending: false,\n                });\n              });\n          })\n          .catch((err) => {\n            State.update({\n              pending: false,\n            });\n            console.log(\"err\", err);\n            toast?.dismiss(toastId);\n            toast?.fail({\n              title: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n              tx: err ? err.hash : \"\",\n              chainId,\n            });\n          });\n      }}\n    >\n      {state.pending || estimating ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : !state.isGasEnough ? (\n        `Not enough gas(${Big(state.gas || 0).toFixed(2)}) needed`\n      ) : (\n        actionText\n      )}\n    </Button>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Avalanche.Lending.DialogButton", "fact_widget_deployments_id": "0d2b329d96dfd828cca548f966fe1666", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 12}