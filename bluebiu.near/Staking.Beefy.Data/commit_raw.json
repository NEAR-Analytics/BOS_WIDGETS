{"tx_hash": "6sMtREhv98eimU3bXBNfdRUCyDhWGSPjvA12KoABQjyb", "action_id_social": "732gbKJASAR3npF5qmYCFSfdYpprZZigH5KSy5ZnG99J-0-widget", "block_id": 119983840, "block_timestamp": "2024-05-29T08:49:44.689Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Beefy.Data", "source_code": "const {\n  CHAIN_LIST,\n  curChain,\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  update,\n  onLoad,\n  pairs,\n  chainId,\n  addresses,\n} = props;\n\nconst { formatUnits, parseUnits } = ethers.utils;\n\nconst ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPricePerFullShare\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n  const pairIds = pairs.map((pair) => pair.id);\n  let count = 0;\n  let _lpsDataRes = {};\n  let _apyDataRes = {};\n  let _totalSupplyRes = [];\n  let _yourDepositsRes = [];\n  let _pricePerFullShareRes = [];\n  let _userPositionsRes = [];\n\n  function formatData(params) {\n    console.log(params, count);\n\n    if (count < 5) return;\n    count = 0;\n    console.log(\"_lpsDataRes--\", _lpsDataRes);\n    for (let i = 0; i < pairs.length; i++) {\n      const lpsData = _lpsDataRes[pairs[i].id];\n      const apyData = _apyDataRes[pairs[i].id];\n      pairs[i].detail = { ...lpsData, ...apyData };\n\n      pairs[i].deposits = _yourDepositsRes[i] ? _yourDepositsRes[i][0] : 0;\n\n      const _beefyTVL = Big(formatUnits(_totalSupplyRes[i][0]))\n        .times(formatUnits(_pricePerFullShareRes[i][0]))\n        .times(lpsData.price || 0)\n        .toString();\n      const _gammaTVL = Big(lpsData.price || 0)\n        .times(lpsData.totalSupply)\n        .toString();\n      pairs[i].beefyTVL = _beefyTVL;\n      pairs[i].gammaTVL = _gammaTVL;\n      pairs[i].APY = Big(apyData.totalApy).times(100).toFixed(2);\n      const _pow = 1 / 365;\n      pairs[i].DAILY = Number(\n        (Math.pow(Big(1).plus(apyData.totalApy).toString(), _pow) - 1) * 100\n      ).toFixed(4);\n\n      //   const _addr = pairs[i].vaultAddress.toLocaleLowerCase();\n      //   const { token0, token1 } = _lpsDataRes[_addr];\n      //   let token0TVL = Big(token0.tvl).times(token0.shareTokenPrice);\n      //   let token1TVL = Big(token1.tvl).times(token1.shareTokenPrice);\n      //   let _apr = 0;\n      //   let _aum = 0;\n      //   if (token0TVL.gt(token1TVL)) {\n      //     _apr = token0.shareTokenApr;\n      //     let _token0 = pairs[i].token0;\n      //     _aum = Big(formatUnits(token0.tvl, pairs[i].decimals0))\n      //       .times(prices[_token0] || 0)\n      //       .toString();\n      //   } else {\n      //     _apr = token1.shareTokenApr;\n      //     let _token1 = pairs[i].token1;\n      //     _aum = Big(formatUnits(token1.tvl, pairs[i].decimals1))\n      //       .times(prices[_token1] || 0)\n      //       .toString();\n      //   }\n      //   if (\n      //     pairs[i].id === \"USDC-USDT-Oku\" ||\n      //     pairs[i].id === \"USDC-USDT-PancakeSwap\" ||\n      //     pairs[i].id === \"USDC-WETH-PancakeSwap\"\n      //   ) {\n      //     _apr = token0.shareTokenApr;\n      //   }\n      //   pairs[i].APR = Big(_apr).div(10000).toFixed(2, 0);\n      //   pairs[i].AUM = _aum;\n      //   let _totalSupply = _totalSupplyRes[i][0].toString();\n      //   let _totalAmount0 = _underlyingAssetsRes[i][0].toString();\n      //   let _totalAmount1 = _underlyingAssetsRes[i][1].toString();\n      //   let _shares = _userPositionsRes[i]\n      //     ? formatUnits(_userPositionsRes[i][0])\n      //     : 0;\n      //   pairs[i].totalSupply = _totalSupply;\n      //   pairs[i].totalAmount0 = _totalAmount0;\n      //   pairs[i].totalAmount1 = _totalAmount1;\n      //   pairs[i].shares = _shares;\n      //   // pairs[i].shares = _userPositionsRes[i]\n      //   //   ? formatUnits(_userPositionsRes[i][0])\n      //   //   : 0;\n      //   if (_userPositionsRes[i]) {\n      //     let _token0Amount = Big(_shares)\n      //       .times(_totalAmount0)\n      //       .div(_totalSupply)\n      //       .toString();\n      //     let _token1Amount = Big(_shares)\n      //       .times(_totalAmount1)\n      //       .div(_totalSupply)\n      //       .toString();\n      //     pairs[i].token0Amount = _token0Amount;\n      //     pairs[i].token1Amount = _token1Amount;\n      //     pairs[i].token0Value = Big(_token0Amount)\n      //       .times(prices[token0] || 0)\n      //       .toString();\n      //     pairs[i].token1Value = Big(_token1Amount)\n      //       .times(prices[token0] || 0)\n      //       .toString();\n      //   }\n    }\n\n    onLoad({\n      dataList: pairs,\n    });\n  }\n  function getLpsData() {\n    asyncFetch(\"https://api.beefy.finance/lps/breakdown\")\n      .then((res) => {\n        pairIds.forEach((pairId) => {\n          _lpsDataRes[pairId] = res.body[pairId];\n        });\n      })\n      .catch((err) => {\n        console.log(\"catch-getLpsData-error--\", err);\n      })\n      .finally(() => {\n        count++;\n        formatData(\"getLpsData\");\n      });\n  }\n  function getApyData() {\n    asyncFetch(\"https://api.beefy.finance/apy/breakdown\")\n      .then((res) => {\n        pairIds.forEach((pairId) => {\n          _apyDataRes[pairId] = res.body[pairId];\n        });\n      })\n      .catch((err) => {\n        console.log(\"catch-getLpsData-error--\", err);\n      })\n      .finally(() => {\n        count++;\n        formatData(\"getLpsData\");\n      });\n  }\n\n  function getTotalSupply() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"totalSupply\",\n      //   params: [],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalSupply--\", res);\n        _totalSupplyRes = res;\n        count++;\n        formatData(\"getTotalSupply\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalSupply-error--\", err);\n      });\n  }\n  function getPricePerFullShare() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"getPricePerFullShare\",\n      //   params: [],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getPricePerFullShare--\", res);\n        _pricePerFullShareRes = res;\n        count++;\n        formatData(\"getPricePerFullShare\");\n      })\n      .catch((err) => {\n        console.log(\"getPricePerFullShare-error--\", err);\n      });\n  }\n  function getYourDeposits() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getYourDeposits--\", res);\n        _yourDepositsRes = res;\n        count++;\n        formatData(\"getYourDeposits\");\n      })\n      .catch((err) => {\n        console.log(\"getYourDeposits-error--\", err);\n      });\n  }\n\n  getLpsData();\n  getApyData();\n  getTotalSupply();\n  getPricePerFullShare();\n  getYourDeposits();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Beefy.Data", "fact_widget_deployments_id": "67d79bc9b378bdf1a6d02dfd0f9a3ef7", "inserted_timestamp": "2024-05-29T10:55:46.491Z", "modified_timestamp": "2024-05-29T10:55:46.491Z", "__row_index": 0}