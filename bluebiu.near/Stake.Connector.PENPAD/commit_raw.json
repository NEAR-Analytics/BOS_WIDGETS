{"tx_hash": "Ddomf7RHfqsA2fK8HQwj3SD8SpG5cTERfCuENX6nV65b", "action_id_social": "GhnUiuCve19T6P1Fv7jq2e2pJCFiKAeGopZrsQhEeCfT-0-widget", "block_id": 117854156, "block_timestamp": "2024-04-29T02:59:16.019Z", "signer_id": "bluebiu.near", "widget_name": "Stake.Connector.PENPAD", "source_code": "const StyledPenpadContainer = styled.div`\n  margin: 30px auto 0;\n  width: 478px;\n  /* height: 430px; */\n  border-radius: 16px;\n  border: 1px solid #373A53;\n  background: #262836;\n`\nconst StyledPenpadTitle = styled.div`\n  padding: 24px 21px 16px;\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n`\nconst StyledPenpadTop = styled.div`\n  padding: 0 21px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nconst StyledPenpadColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`\nconst StyledPenpadLabel = styled.div`\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst StyledPenpadValue = styled.div`\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`\nconst StyledPenpadInput = styled.input`\n  padding: 0;\n  border: none;\n  outline: none;\n  background: transparent;\n  \n  color: #FFF;\n  font-family: Gantari;\n  font-size: 26px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`\nconst StyledPenpadMiddleContainer = styled.div`\n  padding: 16px 16px 20px;\n`\nconst StyledPenpadMiddle = styled.div`\n  height: 213px;\n  border-radius: 12px;\n  border: 1px solid #373A53;\n`\nconst StyledPenpadMiddleTop = styled.div`\n  padding: 13px 22px 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nconst StyledPenpadMiddleMiddleContainer = styled.div`\n  padding: 14px 12px;\n`\nconst StyledPenpadMiddleMiddle = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 10px;\n  height: 71px;\n  border-radius: 8px;\n  border: 1px solid #373A53;\n  background: #2E3142;\n`\nconst StyledPenpadMiddleBottom = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 22px 15px;\n`\nconst StyledPenpadBottom = styled.div`\n  padding: 0 16px 16px;\n`\nconst StyledPenpadButton = styled.button`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n  border-radius: 8px;\n  background: var(--button-color);\n  color: var(--button-text-color);\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`\nconst PROXY_ADDRESS = \"0x8F53fA7928305Fd4f78c12BA9d9DE6B2420A2188\"\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst {\n  toast,\n  prices,\n  dexConfig,\n  connectProps,\n  multicall,\n  multicallAddress,\n} = props\n// if (!sender) {\n//   return (\n//     <Widget\n//       style={dexConfig.theme}\n//       src=\"bluebiu.near/widget/Arbitrum.Swap.ConnectButton\"\n//       props={{\n//         ...connectProps,\n//         isWrongNetwork: false,\n//       }}\n//     />\n//   );\n// }\nState.init({\n  stakeAmount: \"\",\n  stakeLoading: false,\n  data: {\n  }\n})\nconst isInSufficient = Number(stakedAmount) > Number(state.data.balance)\nfunction promiseFetchQuery(url) {\n  return new Promise((resolve, reject) => {\n    asyncFetch(url).then(result => {\n      if (result.ok) {\n        resolve(result.body)\n      } else {\n        reject(result.status)\n      }\n    }).catch(reject)\n  })\n}\nfunction handleStakeAmountChange(amount) {\n  if (Number(amount) < 0) {\n    return\n  }\n  if (Number(amount) === 0) {\n    State.update({\n      stakeAmount: amount,\n    })\n    return\n  }\n  State.update({\n    stakeAmount: amount\n  })\n}\nfunction handleStake() {\n\n}\nfunction handleQueryData() {\n  const calls = []\n  const abi = [\n    {\n      \"inputs\": [],\n      \"name\": \"maxTotalValueLocked\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"userStakeAmounts\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ]\n  calls.push({\n    address: PROXY_ADDRESS,\n    name: \"maxTotalValueLocked\"\n  })\n  calls.push({\n    address: PROXY_ADDRESS,\n    name: \"userStakeAmounts\",\n    params: [sender]\n  })\n\n  multicall({\n    abi,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  }).then(firstResult => {\n    const [maxTotalValueLockedResult, userStakeAmountsResult] = firstResult\n    const promiseArray = []\n    promiseArray.push(promiseFetchQuery(\"http://penpad.io/api/pub/dapdap/staked/participated/user\"))\n    promiseArray.push(promiseFetchQuery(\"http://penpad.io/api/pub/dapdap/point/user/\" + sender))\n    Promise.all(promiseArray)\n      .then(secondResult => {\n        console.log('=secondResult', secondResult)\n        const totalStaked = maxTotalValueLockedResult ? ethers.utils.formatUnits(maxTotalValueLockedResult[0]) : 0\n        const yourStaked = userStakeAmountsResult ? ethers.utils.formatUnits(userStakeAmountsResult[0]) : 0\n        State.update({\n          data: {\n            totalStaked,\n            yourStaked,\n            yourPoolShare: Big(yourStaked).div(totalStaked).toString(),\n            paticipatedUsers: secondResult[0],\n            yourPoints: secondResult[1]\n          }\n        })\n\n      })\n  }).catch(error => {\n    setTimeout(() => {\n      handleQueryData()\n    }, 1000)\n  })\n}\nuseEffect(() => {\n  sender && handleQueryData()\n}, [sender])\n\nreturn (\n  <StyledPenpadContainer>\n    <StyledPenpadTitle>ETH</StyledPenpadTitle>\n    <StyledPenpadTop>\n      <StyledPenpadColumn>\n        <StyledPenpadLabel>Total Staked</StyledPenpadLabel>\n        <StyledPenpadValue>{Big(state.data?.totalStaked ?? 0).toFixed(2)} ETH</StyledPenpadValue>\n      </StyledPenpadColumn>\n      <StyledPenpadColumn>\n        <StyledPenpadLabel>Paticipated Users</StyledPenpadLabel>\n        <StyledPenpadValue>{state.data.paticipatedUsers}</StyledPenpadValue>\n      </StyledPenpadColumn>\n    </StyledPenpadTop>\n    <StyledPenpadMiddleContainer>\n      <StyledPenpadMiddle>\n        <StyledPenpadMiddleTop>\n          <StyledPenpadColumn>\n            <StyledPenpadLabel>Your Pool Share</StyledPenpadLabel>\n            <StyledPenpadValue>{state.data.yourPoolShare}%</StyledPenpadValue>\n          </StyledPenpadColumn>\n          <StyledPenpadColumn>\n            <StyledPenpadLabel>Wallet Balance</StyledPenpadLabel>\n            <StyledPenpadValue>0 ETH</StyledPenpadValue>\n          </StyledPenpadColumn>\n        </StyledPenpadMiddleTop>\n        <StyledPenpadMiddleMiddleContainer>\n          <StyledPenpadMiddleMiddle>\n            <StyledPenpadColumn>\n              <StyledPenpadLabel>Staked ETH</StyledPenpadLabel>\n              <StyledPenpadInput type=\"number\" placeholder=\"0.0\" value={state.stakeAmount} onChange={event => handleStakeAmountChange(event.target.value)} />\n              {/* <StyledPenpadValue>0 ETH</StyledPenpadValue> */}\n            </StyledPenpadColumn>\n            <StyledPenpadColumn>\n              <StyledPenpadLabel style={{\n                textDecoration: \"underline\"\n              }}>Max</StyledPenpadLabel>\n            </StyledPenpadColumn>\n          </StyledPenpadMiddleMiddle>\n        </StyledPenpadMiddleMiddleContainer>\n        <StyledPenpadMiddleBottom>\n          <StyledPenpadColumn>\n            <StyledPenpadLabel>You Staked ETH</StyledPenpadLabel>\n            <StyledPenpadValue>0 ETH</StyledPenpadValue>\n          </StyledPenpadColumn>\n          <StyledPenpadColumn>\n            <StyledPenpadLabel>Your Points</StyledPenpadLabel>\n            <StyledPenpadValue>{state.data.yourPoints} Points</StyledPenpadValue>\n          </StyledPenpadColumn>\n        </StyledPenpadMiddleBottom>\n      </StyledPenpadMiddle>\n    </StyledPenpadMiddleContainer>\n    <StyledPenpadBottom>\n      {\n        isInSufficient ? (\n          <StyledPenpadButton disabled>InSufficient Balance</StyledPenpadButton>\n        ) : state.stakeLoading ? (\n          <StyledPenpadButton disabled>\n            <Widget src={\"bluebiu.near/widget/Liquidity.Bridge.Loading\"} />\n          </StyledPenpadButton>\n        ) : state.stakeAmount > 0 ? (\n          <StyledPenpadButton onClick={handleStake}>Stake ETH</StyledPenpadButton>\n        ) : (\n          <StyledPenpadButton disabled>Stake ETH</StyledPenpadButton>\n        )\n      }\n      {/* <StyledPenpadButton>Stake ETH</StyledPenpadButton> */}\n    </StyledPenpadBottom>\n  </StyledPenpadContainer>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Stake.Connector.PENPAD", "fact_widget_deployments_id": "e558169b51ff31dfcdbdfcf470bbd261", "inserted_timestamp": "2024-04-29T04:40:36.818Z", "modified_timestamp": "2024-04-29T04:40:36.818Z", "__row_index": 0}