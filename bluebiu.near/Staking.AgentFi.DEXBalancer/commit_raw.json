{"tx_hash": "CW1CZvtshkbVhSjMdDGZN9Q9c4kHDPczHpehWPDrWSK8", "action_id_social": "HpRnGHiqBSKoNuo7ypUc3n8FujxAPPanEwa2utnYwe1q-0-widget", "block_id": 121077673, "block_timestamp": "2024-06-13T12:31:56.573Z", "signer_id": "bluebiu.near", "widget_name": "Staking.AgentFi.DEXBalancer", "source_code": "const StyledContainer = styled.div`\n  \n`;\nconst StyledFormItem = styled.div`\n  border-bottom: 1px solid #373A53;\n  padding-bottom: 18px;\n  padding-top: 18px;\n  \n  &.inline {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  &:first-child {\n    padding-top: 0;\n  }\n`;\nconst StyledFormItemTitle = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 17px;\n  color: #979ABE;\n`;\nconst StyledFormItemBody = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n`;\nconst StyledFormItemFoot = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14.4px;\n  color: rgba(151, 154, 190, 1);\n`;\nconst StyledInput = styled.input`\n  flex: 1;\n  width: 0;\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst StyledList = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n  gap: 8px;\n  margin-top: 8px;\n`;\nconst StyledListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n\n  .label {\n    color: #979ABE;\n  }\n  .value {\n    color: #fff;\n  }\n`;\nconst StyledButton = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  line-height: 56px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: 20px;\n  text-align: center;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst StyledFullSelect = styled.div`\n  width: 100%;\n\n  > div {\n    width: 100%;\n    \n    > div[type=\"button\"] {\n      width: 100%;\n    }\n  }\n`;\n\nconst StyledProtocolList = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\nconst StyledProtocol = styled.a`\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0;\n  width: 117px;\n  height: 95px;\n  border: 1px solid #373A53;\n  border-radius: 16px;\n  padding: 8px;\n  \n  .protocol-icon {\n    width: 50px;\n    height: 50px;\n  }\n  .protocol-name {\n    color: #979ABE;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: normal;\n    text-decoration: none;\n  }\n`;\nconst StyledDexTips = styled.div`\n  color: #979ABE;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-top: 10px;\n`;\n\nconst DEPOSIT_POOL_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"token\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"deposit0\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          { internalType: \"address\", name: \"token\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"deposit1\",\n        type: \"tuple\",\n      },\n      { internalType: \"address\", name: \"receiver\", type: \"address\" },\n    ],\n    name: \"createDexBalancerAgentAndExplorerAndRefundExcess\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"token\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"deposit0\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          { internalType: \"address\", name: \"token\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"deposit1\",\n        type: \"tuple\",\n      },\n      { internalType: \"address\", name: \"rootAgentAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"receiver\", type: \"address\" },\n    ],\n    name: \"createDexBalancerAgentForRootAndRefundExcess\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nconst {\n  prices,\n  currentStrategy,\n  dexConfig,\n  getTokenBalance,\n  account,\n  rootAgent,\n  onSuccess,\n  addAction,\n  toast,\n  chainId,\n  handleApprove,\n} = props;\n\nconst { StakeTokens } = dexConfig;\n\nconst actionText = 'Stake';\n\nState.init({\n  currentEthToken: {},\n  ethAmount: '',\n  ethTokens: [],\n  currentEthTokenBalance: 0,\n  pending: false,\n\n  usdAmount: '',\n  usdTokens: [],\n  currentUsdToken: {},\n  currentUsdTokenBalance: 0,\n});\n\nconst handleEthAmount = (ev) => {\n  if (isNaN(Number(ev.target.value))) return;\n  let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n  if (!amount) {\n    State.update({\n      ethAmount: '',\n      usdAmount: '',\n    });\n    return;\n  }\n\n  if (Big(amount || 0).gt(Big(state.currentEthTokenBalance || 0))) {\n    amount = Big(state.currentEthTokenBalance || 0).toFixed(4, 0);\n  }\n  State.update({\n    ethAmount: amount,\n    usdAmount: Big(amount).times(prices[state.currentEthToken.value]).div(prices[state.currentUsdToken.value]).toFixed(state.currentUsdToken.decimals, 0),\n  });\n};\n\nconst handleEthToken = (option) => {\n  if (option.value === state.currentEthToken.value) return;\n  State.update({\n    currentEthToken: option,\n    ethAmount: '',\n  });\n  const currToken = StakeTokens.find((it) => it.symbol === option.value);\n  currToken && getTokenBalance(currToken).then((value) => {\n    State.update({\n      currentEthTokenBalance: value,\n    });\n  });\n};\n\nconst handleEthBalance = (value) => {\n  // auto enter usd amount\n  const updates = {\n    ethAmount: Big(value).toFixed(4, 0),\n  };\n  updates.usdAmount = Big(updates.ethAmount).times(prices[state.currentEthToken.value]).div(prices[state.currentUsdToken.value]).toFixed(state.currentUsdToken.decimals, 0)\n  State.update(updates);\n};\n\nconst formatAddAction = (actionText, _amount, status, transactionHash, tokenSymbol) => {\n  addAction?.({\n    type: \"Staking\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: props.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nconst handleSubmit = () => {\n  if (Big(state.ethAmount).lte(0) || Big(state.usdAmount).lte(0)) return;\n  // if rootAgent.agentAddress: use createDexBalancerAgentForRootAndRefundExcess\n  // else: use createDexBalancerAgentAndExplorerAndRefundExcess\n  State.update({\n    pending: true,\n  });\n  const approveList = [\n    handleApprove(currentStrategy.meta.contract, state.currentEthToken.address, state.ethAmount, state.currentEthToken.decimals),\n    handleApprove(currentStrategy.meta.contract, state.currentUsdToken.address, state.usdAmount, state.currentUsdToken.decimals),\n  ];\n  Promise.all(approveList).then((approveRes) => {\n   if (approveRes.some((approved) => !approved)) {\n     State.update({\n       pending: false,\n     });\n     return;\n   }\n    const ethAmountShown = Big(state.ethAmount || 0).toFixed(state.currentEthToken.decimals, Big.roundDown).toString();\n    const usdAmountShown = Big(state.usdAmount || 0).toFixed(state.currentUsdToken.decimals, Big.roundDown).toString();\n    let method = 'createDexBalancerAgentAndExplorerAndRefundExcess';\n    const params = [\n      [\n        // token\n        state.currentEthToken.address,\n        // amount\n        parseUnits(ethAmountShown, state.currentEthToken.decimals),\n      ],\n      [\n        // token\n        state.currentUsdToken.address,\n        // amount\n        parseUnits(usdAmountShown, state.currentUsdToken.decimals),\n      ],\n      // receiver\n      account,\n    ];\n\n    if (rootAgent && rootAgent.agentAddress) {\n      // rootAgentAddress\n      params.splice(2, 0, rootAgent.agentAddress);\n      method = 'createDexBalancerAgentForRootAndRefundExcess';\n    }\n\n    const contract = new ethers.Contract(\n      currentStrategy.meta.contract,\n      DEPOSIT_POOL_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    const getTx = (gas) => {\n      const contractOption = {\n        gasLimit: gas || 4000000,\n      }\n      if (['ETH'].includes(state.currentEthToken.value)) {\n        contractOption.value = parseUnits(ethAmountShown, state.currentEthToken.decimals);\n      }\n      contract[method](...params, contractOption)\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              const { status, transactionHash } = res;\n              State.update({\n                pending: false,\n              });\n              if (status !== 1) throw new Error(\"\");\n              onSuccess();\n              formatAddAction(actionText, ethAmountShown, status, transactionHash, state.currentEthToken.value);\n              toast?.success({\n                title: `${actionText} Successfully!`,\n                text: `${actionText} ${Big(state.ethAmount).toFixed(2)} ${state.currentEthToken.value} & ${Big(state.usdAmount).toFixed(2)} ${state.currentUsdToken.value}`,\n                tx: transactionHash,\n                chainId,\n              });\n            })\n            .catch((err) => {\n              console.log('tx error: ', err);\n              State.update({\n                pending: false,\n              });\n              toast?.fail({\n                title: `${actionText} Failed!`,\n                text: err?.message?.includes(\"user rejected transaction\")\n                  ? \"User rejected transaction\"\n                  : ``,\n              });\n            });\n        })\n        .catch((err) => {\n          console.log('contract fn error: ', err);\n          State.update({\n            pending: false,\n          });\n          toast?.fail({\n            title: `${actionText} Failed!`,\n            text: err?.message?.includes(\"user rejected transaction\")\n              ? \"User rejected transaction\"\n              : ``,\n          });\n        });\n    };\n\n    const estimateGas = () => {\n      contract.estimateGas[method](\n        ...params,\n        { value: parseUnits(ethAmountShown, state.currentEthToken.decimals) }\n      ).then((gas) => {\n        getTx(gas);\n      }).catch((err) => {\n        console.log('get gas failed: ', err);\n        getTx();\n      });\n    };\n\n    estimateGas();\n  });\n};\n\nconst handleUsdAmount = (ev) => {\n  if (isNaN(Number(ev.target.value))) return;\n  let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n  if (!amount) {\n    State.update({\n      ethAmount: '',\n      usdAmount: '',\n    });\n    return;\n  }\n\n  if (Big(amount || 0).gt(Big(state.currentUsdTokenBalance || 0))) {\n    amount = Big(state.currentUsdTokenBalance || 0).toFixed(4, 0);\n  }\n  State.update({\n    usdAmount: amount,\n    ethAmount: Big(amount).times(prices[state.currentUsdToken.value]).div(prices[state.currentEthToken.value]).toFixed(state.currentEthToken.decimals, 0),\n  });\n};\n\nconst handleUsdToken = (option) => {\n  if (option.value === state.currentUsdToken.value) return;\n  State.update({\n    currentUsdToken: option,\n    usdAmount: '',\n    ethAmount: '',\n  });\n  const currToken = StakeTokens.find((it) => it.symbol === option.value);\n  currToken && getTokenBalance(currToken).then((value) => {\n    State.update({\n      currentUsdTokenBalance: value,\n    });\n  });\n};\n\nconst handleUsdBalance = (value) => {\n  // auto enter eth amount\n  const updates = {\n    usdAmount: Big(value).toFixed(4, 0),\n  };\n  updates.ethAmount = Big(updates.usdAmount).times(prices[state.currentUsdToken.value]).div(prices[state.currentEthToken.value]).toFixed(state.currentEthToken.decimals, 0)\n  State.update(updates);\n};\n\nconst {\n  pending,\n  ethAmount,\n  currentEthToken,\n  ethTokens,\n  currentEthTokenBalance,\n  usdAmount,\n  usdTokens,\n  currentUsdToken,\n  currentUsdTokenBalance,\n} = state;\n\nuseEffect(() => {\n  const _ethTokens = [];\n  const _usdTokens = [];\n  const EthStakeTokens = StakeTokens.filter((it) => ['ETH', 'WETH'].includes(it.symbol));\n  const UsdStakeTokens = StakeTokens.filter((it) => ['USDB'].includes(it.symbol));\n  EthStakeTokens.forEach((it) => {\n    _ethTokens.push({\n      ...it,\n      text: it.symbol,\n      value: it.symbol,\n      icons: [it.icon],\n      address: it.address === 'native' ? '0x0000000000000000000000000000000000000000' : it.address,\n    });\n  });\n  UsdStakeTokens.forEach((it) => {\n    _usdTokens.push({\n      ...it,\n      text: it.symbol,\n      value: it.symbol,\n      icons: [it.icon],\n    });\n  });\n  State.update({\n    ethTokens: _ethTokens,\n    currentEthToken: _ethTokens[0],\n    usdTokens: _usdTokens,\n    currentUsdToken: _usdTokens[0],\n  });\n  getTokenBalance(EthStakeTokens[0]).then((value) => {\n    State.update({\n      currentEthTokenBalance: value,\n    });\n  });\n  getTokenBalance(UsdStakeTokens[0]).then((value) => {\n    State.update({\n      currentUsdTokenBalance: value,\n    });\n  });\n}, []);\n\nreturn (\n  <StyledContainer>\n    <StyledProtocolList>\n      {\n        currentStrategy.meta.protocolList.map((it, idx) => (\n          <StyledProtocol href={it.link} key={idx + ''} rel=\"nofollow\" target=\"_blank\">\n            <img className=\"protocol-icon\" src={it.iconUrl} alt=\"\" />\n            <span className=\"protocol-name\">{it.name}</span>\n          </StyledProtocol>\n        ))\n      }\n    </StyledProtocolList>\n    <StyledDexTips>\n      Add assets below - your funds will be allocated evenly across our partner protocols. Hit deposit to launch the strategy.\n    </StyledDexTips>\n    <StyledFormItem>\n      <StyledFormItemTitle>\n        Assets and Amounts\n      </StyledFormItemTitle>\n      <StyledFormItemBody>\n        <StyledInput\n          type=\"text\"\n          placeholder=\"0\"\n          value={ethAmount}\n          onChange={handleEthAmount}\n        />\n        <Widget\n          src=\"bluebiu.near/widget/UI.Select.Index\"\n          props={{\n            options: ethTokens,\n            value: currentEthToken,\n            onChange: handleEthToken,\n          }}\n        />\n      </StyledFormItemBody>\n      <StyledFormItemFoot>\n        <div className=\"prices\">\n          ${Big(ethAmount || 0).times(Big(prices[currentEthToken.value] || 1)).toFixed(2, 0)}\n        </div>\n        <div className=\"balance\">\n          Balance:\n          <Widget\n            src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n            props={{\n              value: currentEthTokenBalance,\n              digit: 5,\n              onClick: handleEthBalance,\n              symbol: currentEthToken.value,\n            }}\n          />\n        </div>\n      </StyledFormItemFoot>\n      <StyledFormItemBody>\n        <StyledInput\n          type=\"text\"\n          placeholder=\"0\"\n          value={usdAmount}\n          onChange={handleUsdAmount}\n        />\n        <Widget\n          src=\"bluebiu.near/widget/UI.Select.Index\"\n          props={{\n            options: usdTokens,\n            value: currentUsdToken,\n            onChange: handleUsdToken,\n          }}\n        />\n      </StyledFormItemBody>\n      <StyledFormItemFoot>\n        <div className=\"prices\">\n          ${Big(usdAmount || 0).times(Big(prices[currentUsdToken.value] || 1)).toFixed(2, 0)}\n        </div>\n        <div className=\"balance\">\n          Balance:\n          <Widget\n            src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n            props={{\n              value: currentUsdTokenBalance,\n              digit: 5,\n              onClick: handleUsdBalance,\n              symbol: currentUsdToken.value,\n            }}\n          />\n        </div>\n      </StyledFormItemFoot>\n    </StyledFormItem>\n    <StyledButton\n      disabled={pending || !ethAmount}\n      onClick={handleSubmit}\n    >\n      {pending ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : 'Launch Strategy'}\n    </StyledButton>\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.AgentFi.DEXBalancer", "fact_widget_deployments_id": "c75571ec8eb6ae0366c0e71f76db67c2", "inserted_timestamp": "2024-06-13T14:04:50.879Z", "modified_timestamp": "2024-06-13T14:04:50.879Z", "__row_index": 3}