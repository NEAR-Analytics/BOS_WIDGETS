{"tx_hash": "AfX4fyhZ8pCEsmCZ4GGSoyuhjyR8AYYXDCcYp7QFtE7S", "action_id_social": "26hL2Nh4uM2b3kxUzbvzBxHAg4bQf9TDQazGS2La5hEh-0-widget", "block_id": 101465862, "block_timestamp": "2023-09-19T09:41:52.368Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.TradeSwap", "source_code": "const account = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst CHAIN_ID = 42161;\nconst ROUTER_ADDRESS = \"0x0000000001E4ef00d069e71d6bA041b0A16F7eA0\";\nconst CONNECT_PROPS = {\n  imgProps: {\n    src: \"https://ipfs.near.social/ipfs/bafkreiawjxeh46j7c63vvqpg2t3juh4pdlhk6iic4dkqlpsjq3loqarooa\",\n    style: {\n      width: \"434px\",\n      height: \"176px\",\n      marginTop: \"80px\",\n    },\n  },\n  noAccountTips: \"Pendle\",\n  wrongNetworkTips: \"To proceed, kindly switch to Arbitrum One Chain.\",\n  chainId: CHAIN_ID,\n  chainName: \"Arbitrum One\",\n};\nconst theme = {\n  textColor: \"#7794D3\",\n  buttonColor: \"#33549C\",\n};\n\nconst BasicTokens = {};\n\nif (!account) {\n  return (\n    <Widget\n      src=\"bluebiu.near/widget/Arbitrum.Swap.ConnectButton\"\n      props={{\n        ...CONNECT_PROPS,\n        theme,\n        isWrongNetwork: false,\n      }}\n    />\n  );\n}\nState.init({\n  chainId: -1,\n  activeTab: \"Swap\",\n  mintType: \"Mint\",\n  updateInputTokenBalance: true,\n  swapping: false,\n  onInputTag: 0,\n});\nEthers.provider()\n  .getNetwork()\n  .then(({ chainId }) => {\n    State.update({ chainId });\n  })\n  .catch(() => {});\n\nif (state.chainId !== CHAIN_ID) {\n  return (\n    <Widget\n      src=\"bluebiu.near/widget/Arbitrum.Swap.ConnectButton\"\n      props={{\n        ...CONNECT_PROPS,\n        theme,\n        isWrongNetwork: true,\n      }}\n    />\n  );\n}\n\nconst Container = styled.div`\n  max-width: 560px;\n  width: 90vw;\n  padding-top: 50px;\n  margin: 0 auto;\n  .token-icon {\n    width: 36px;\n    height: 36px;\n  }\n  .token-symbol {\n    font-size: 16px;\n    line-height: 19px;\n  }\n  .token-name {\n    font-size: 12px;\n    line-height: 18px;\n    color: rgba(255, 255, 255, 0.5);\n  }\n`;\n\nconst backIcon = (\n  <svg\n    width=\"18\"\n    height=\"16\"\n    viewBox=\"0 0 18 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M17 9C17.5523 9 18 8.55228 18 8C18 7.44772 17.5523 7 17 7V9ZM0.292892 7.29289C-0.0976315 7.68342 -0.0976315 8.31658 0.292892 8.70711L6.65685 15.0711C7.04738 15.4616 7.68054 15.4616 8.07107 15.0711C8.46159 14.6805 8.46159 14.0474 8.07107 13.6569L2.41421 8L8.07107 2.34315C8.46159 1.95262 8.46159 1.31946 8.07107 0.928932C7.68054 0.538408 7.04738 0.538408 6.65685 0.928932L0.292892 7.29289ZM17 7L1 7V9L17 9V7Z\"\n      fill=\"#979ABE\"\n    />\n  </svg>\n);\n\nconst BackIconWrapper = styled.a`\n  /* position: absolute; */\n  text-decoration: none;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  color: #979abe;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 17px;\n  letter-spacing: 0em;\n  text-align: left;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  color: #fff;\n  font-weight: 400;\n  .token-icon {\n    margin-right: 8px;\n  }\n`;\nconst HeaderToken = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst Expiry = styled.div`\n  text-align: right;\n  .expiry-days {\n    font-size: 14px;\n    line-height: 22px;\n    color: #979abe;\n  }\n`;\nconst Content = styled.div`\n  padding-top: 20px;\n`;\nconst Panel = styled.div`\n  border: 1px solid #2c334b;\n  border-top: none;\n  background-color: #181a27;\n  padding: 20px 30px;\n  border-radius: 0px 0px 20px 20px;\n`;\nconst ExchangeIcon = styled.div`\n  width: 60px;\n  margin: 20px auto;\n  svg {\n    color: #4982ff;\n  }\n`;\nconst ArrowIcon = styled.div`\n  width: 36px;\n  height: 36px;\n  text-align: center;\n  line-height: 36px;\n  border-radius: 50%;\n  background-color: #222436;\n  color: #4982ff;\n  margin: 20px auto;\n`;\nconst InputLabel = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #979abe;\n`;\nconst RedeemTips = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #6797ff;\n  margin-top: 20px;\n  margin-bottom: 30px;\n  .fw {\n    font-weight: bold;\n  }\n`;\n\nconst marketAddress = props.market_address;\nconst isPT = props.type === \"pt\";\nif (!marketAddress) return \"\";\n\nconst toAddress = (address) =>\n  address !== \"0x0000000000000000000000000000000000000000\" ? address : \"native\";\n\nconst getMarketData = () => {\n  State.update({\n    loading: true,\n  });\n  asyncFetch(\n    `https://api-v2.pendle.finance/core/v1/42161/markets/${marketAddress}`\n  )\n    .then((res) => {\n      const market = res.body || {};\n\n      if (market.address === \"0x7d49e5adc0eaad9c027857767638613253ef125f\") {\n        const SGLPToken = market.inputTokens.find(\n          (token) => token.symbol === \"sGLP\"\n        );\n        market.underlyingAsset = { ...SGLPToken, baseType: \"IB\" };\n      }\n      State.update({\n        loading: false,\n        market,\n        inputCurrency: handleInputCurrency({ market }),\n        outputCurrency: handleOutputCurrency({ market }),\n      });\n    })\n    .catch((err) => {\n      State.update({\n        loading: false,\n        market: {},\n      });\n    });\n};\n\nif (!state.loading && !state.market) {\n  getMarketData();\n}\n\nconst handleSelectTokens = () => {\n  const market = state.market;\n  if (state.activeTab === \"Swap\") {\n    if (market.inputTokens?.length) {\n      market.inputTokens.forEach((token) => {\n        if (token.symbol === \"sGLP\") {\n          token.baseType = \"IB\";\n          token.types = [\"IB\"];\n        }\n        BasicTokens[token.address] = {\n          ...token,\n          address: toAddress(token.address),\n          icon: token.proIcon,\n          name: token.proName,\n          symbol: token.proSymbol,\n        };\n      });\n    }\n    if (market.sy)\n      BasicTokens[market.sy.address] = {\n        ...market.sy,\n        icon: market.sy.proIcon,\n        name: market.sy.proName,\n        symbol: (\n          <div\n            className=\"sy-symbol\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"6px\",\n            }}\n          >\n            {market.sy.proSymbol}{\" \"}\n            <Widget src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSyIcon\" />\n          </div>\n        ),\n      };\n    if (!isPT && market.pt) {\n      BasicTokens[market.pt.address] = {\n        ...market.pt,\n        icon: market.pt.proIcon,\n        name: market.pt.proName,\n        symbol: market.pt.proSymbol,\n      };\n    }\n    if (isPT && market.yt) {\n      BasicTokens[market.yt.address] = {\n        ...market.yt,\n        icon: market.yt.proIcon,\n        name: market.yt.proName,\n        symbol: market.yt.proSymbol,\n      };\n    }\n    return Object.values(BasicTokens);\n  }\n  if (state.activeTab === \"Mint\") {\n    const tokens = market.outputTokens.map((token) => {\n      return {\n        ...token,\n        address: toAddress(token.address),\n        icon: token.proIcon,\n        name: token.proName,\n        symbol: token.proSymbol,\n      };\n    });\n    if (market.sy) {\n      tokens.push({\n        ...market.sy,\n        icon: market.sy.proIcon,\n        name: market.sy.proName,\n        symbol: (\n          <>\n            {market.sy.proSymbol}{\" \"}\n            <Widget src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSyIcon\" />\n          </>\n        ),\n      });\n    }\n    return tokens;\n  }\n};\nconst handleInputCurrency = (params) => {\n  const market = params.market || state.market;\n  const activeTab = params.activeTab || state.activeTab;\n  const mintType = params.mintType || state.mintType;\n  if (activeTab === \"Swap\") {\n    if (market.underlyingAsset?.symbol === \"gDAI\") {\n      return {\n        ...market.accountingAsset,\n        icon: market.accountingAsset.proIcon,\n        address: toAddress(market.accountingAsset.address),\n      };\n    }\n    return {\n      ...market.underlyingAsset,\n      icon: market.underlyingAsset.proIcon,\n      address: toAddress(market.underlyingAsset.address),\n    };\n  }\n  if (mintType === \"Mint\") {\n    return {\n      ...market.underlyingAsset,\n      icon: market.underlyingAsset.proIcon,\n    };\n  }\n  if (mintType === \"Redeem\") {\n    return {\n      ...market.pt,\n      icon: market.pt.proIcon,\n      name: market.pt.proName,\n      symbol: market.pt.proSymbol,\n    };\n  }\n};\nconst handleOutputCurrency = (params) => {\n  const market = params.market || state.market;\n  const activeTab = params.activeTab || state.activeTab;\n  const mintType = params.mintType || state.mintType;\n  if (activeTab === \"Swap\") {\n    let outputCurrency = isPT ? market.pt : market.yt;\n    if (outputCurrency) {\n      outputCurrency.icon = outputCurrency.proIcon;\n      outputCurrency.symbol = outputCurrency.proSymbol;\n    }\n    return outputCurrency;\n  }\n  if (mintType === \"Redeem\") {\n    return {\n      ...market.underlyingAsset,\n      icon: market.underlyingAsset.proIcon,\n      address: toAddress(market.underlyingAsset.address),\n    };\n  }\n};\nconst getBestTrade = () => {\n  State.update({\n    gettingTrade: true,\n  });\n};\nfunction debounce(fn, wait) {\n  let timer;\n  return () => {\n    clearTimeout(timer);\n    timer = setTimeout(fn, wait);\n  };\n}\nconst debouncedGetBestTrade = debounce(getBestTrade, 500);\n\nreturn (\n  <>\n    <BackIconWrapper\n      style={{\n        textDecoration: \"none\",\n      }}\n      href=\"/bluebiu.near/widget/Arbitrum.Pendle.TradeMarkets\"\n    >\n      {backIcon} <span>Back</span>{\" \"}\n    </BackIconWrapper>\n    <Container>\n      {state.loading && (\n        <Widget src=\"bluebiu.near/widget/0vix.LendingSpinner\" />\n      )}\n      <Header>\n        <HeaderToken>\n          <img\n            className=\"token-icon\"\n            src={isPT ? state.market?.pt.proIcon : state.market?.yt.proIcon}\n          />\n          <div>\n            <div className=\"token-symbol\">\n              {isPT ? state.market?.pt.proSymbol : state.market?.yt.proSymbol}\n            </div>\n            <div className=\"token-name\">{state.market?.protocol}</div>\n          </div>\n        </HeaderToken>\n        <Expiry>\n          <div className=\"token-symbol\">\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.FormatExpiryDate\"\n              props={{\n                date: state.market?.expiry,\n              }}\n            />\n          </div>\n          <div className=\"expiry-days\">\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.FormatExpiryDistanceDays\"\n              props={{\n                date: state.market?.expiry,\n              }}\n            />\n          </div>\n        </Expiry>\n      </Header>\n      <Content>\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapTabs\"\n          props={{\n            tabs: [\"Swap\", \"Mint\"],\n            activeTab: state.activeTab,\n            onChangeTab: (activeTab) => {\n              State.update({\n                activeTab,\n                inputCurrency: handleInputCurrency({ activeTab }),\n                outputCurrency: handleOutputCurrency({ activeTab }),\n                swapping: false,\n              });\n            },\n          }}\n        />\n        <Panel>\n          {state.activeTab === \"Mint\" && (\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapSwitcher\"\n              props={{\n                type: state.mintType,\n                onChange: (mintType) => {\n                  State.update({\n                    mintType,\n                    inputCurrency: handleInputCurrency({ mintType }),\n                    outputCurrency: handleOutputCurrency({ mintType }),\n                    swapping: false,\n                  });\n                },\n              }}\n            />\n          )}\n          {state.activeTab === \"Mint\" && state.mintType === \"Redeem\" && (\n            <RedeemTips>\n              <span className=\"fw\">Tip:</span> Before maturity, both PT and YT\n              are required for redemption. After maturity, only PT is required.\n            </RedeemTips>\n          )}\n          <InputLabel>Input</InputLabel>\n          <Widget\n            src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapCurrencyInput\"\n            props={{\n              currency: state.inputCurrency,\n              amount: state.inputCurrencyAmount,\n              swapping: state.swapping,\n              updateTokenBalance: state.updateInputTokenBalance,\n              disableSelect:\n                state.activeTab === \"Swap\"\n                  ? isPT\n                    ? state.inputCurrency.baseType === \"PT\"\n                    : state.inputCurrency.baseType === \"YT\"\n                  : state.mintType === \"Redeem\",\n              tokenDesc:\n                state.mintType === \"Redeem\" ? (\n                  <Widget\n                    src=\"bluebiu.near/widget/Arbitrum.Pendle.FormatExpiryDate\"\n                    props={{\n                      date: state.market?.expiry,\n                    }}\n                  />\n                ) : null,\n              onCurrencySelectOpen: () => {\n                State.update({\n                  displayCurrencySelect: true,\n                  currencySelectType: 0,\n                  selectedTokenAddress: state.inputCurrency.address,\n                  tokens: handleSelectTokens(),\n                });\n              },\n              onUpdateCurrencyBalance: (balance) => {\n                State.update({\n                  maxInputBalance: ethers.utils.formatUnits(\n                    balance,\n                    state.inputCurrency.decimals\n                  ),\n                  updateInputTokenBalance: false,\n                });\n              },\n              disableAutoFocus: state.onInputTag !== 0,\n              onAmountChange: (val) => {\n                State.update({\n                  inputCurrencyAmount: val,\n                  outputCurrencyAmount: \"\",\n                  onInputTag: 0,\n                });\n\n                if (val && Number(val)) debouncedGetBestTrade();\n              },\n            }}\n          />\n          {state.activeTab === \"Mint\" &&\n            state.mintType === \"Redeem\" &&\n            (!state.market ||\n              new Date(state.market.expiry).getTime() > Date.now()) && (\n              <Widget\n                src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapCurrencyInput\"\n                props={{\n                  currency: state.market?.yt\n                    ? {\n                        ...state.market?.yt,\n                        icon: state.market.yt.proIcon,\n                        name: state.market.yt.proName,\n                        symbol: state.market.yt.proSymbol,\n                      }\n                    : {},\n                  swapping: state.swapping,\n                  amount: state.inputCurrencyAmount,\n                  updateTokenBalance: state.updateInputTokenBalance,\n                  disableSelect: true,\n                  tokenDesc:\n                    state.mintType === \"Redeem\" ? (\n                      <Widget\n                        src=\"bluebiu.near/widget/Arbitrum.Pendle.FormatExpiryDate\"\n                        props={{\n                          date: state.market?.expiry,\n                        }}\n                      />\n                    ) : null,\n                  onUpdateCurrencyBalance: (balance) => {\n                    State.update({\n                      maxInputBalanceExtra: ethers.utils.formatUnits(\n                        balance,\n                        state.inputCurrency.decimals\n                      ),\n                      updateInputTokenBalance: false,\n                    });\n                  },\n                  disableAutoFocus: state.onInputTag !== 1,\n                  onAmountChange: (val) => {\n                    State.update({\n                      inputCurrencyAmount: val,\n                      outputCurrencyAmount: \"\",\n                      onInputTag: 1,\n                    });\n                    // if (val && Number(val)) debouncedGetBestTrade();\n                  },\n                }}\n              />\n            )}\n          {state.activeTab === \"Swap\" && (\n            <ExchangeIcon\n              onClick={() => {\n                const [inputCurrency, outputCurrency] = [\n                  state.outputCurrency,\n                  state.inputCurrency,\n                ];\n                State.update({\n                  inputCurrency,\n                  outputCurrency,\n                  inputCurrencyAmount: state.outputCurrencyAmount,\n                  outputCurrencyAmount: \"\",\n                });\n                if (\n                  state.inputCurrencyAmount &&\n                  Number(state.inputCurrencyAmount)\n                )\n                  debouncedGetBestTrade();\n              }}\n            >\n              <Widget src=\"bluebiu.near/widget/Arbitrum.Swap.ExchangeIcon\" />\n            </ExchangeIcon>\n          )}\n          {state.activeTab === \"Mint\" && (\n            <ArrowIcon>\n              <Widget src=\"bluebiu.near/widget/Arbitrum.Pendle.ArrowIcon\" />\n            </ArrowIcon>\n          )}\n          <InputLabel>Output</InputLabel>\n          {(state.activeTab === \"Swap\" || state.mintType === \"Redeem\") && (\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapCurrencyInput\"\n              props={{\n                currency: state.outputCurrency,\n                amount: state.outputCurrencyAmount,\n                updateTokenBalance: state.updateOutputTokenBalance,\n                disableInput: true,\n                swapping: state.swapping,\n                disableSelect:\n                  state.activeTab === \"Swap\" && isPT\n                    ? state.outputCurrency.baseType === \"PT\"\n                    : state.outputCurrency.baseType === \"YT\",\n\n                onCurrencySelectOpen: () => {\n                  State.update({\n                    displayCurrencySelect: true,\n                    currencySelectType: 1,\n                    selectedTokenAddress: state.outputCurrency.address,\n                    tokens: handleSelectTokens(),\n                  });\n                },\n                onUpdateCurrencyBalance: () => {\n                  State.update({\n                    updateOutputTokenBalance: false,\n                  });\n                },\n                onAmountChange: (val) => {\n                  State.update({\n                    outputCurrencyAmount: val,\n                  });\n                },\n              }}\n            />\n          )}\n          {state.activeTab === \"Mint\" && state.mintType === \"Mint\" && (\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeMintOutPut\"\n              props={{\n                pt: state.market?.pt,\n                yt: state.market?.yt,\n                expiry: state.market?.expiry,\n                inputCurrency: state.inputCurrency,\n                inputCurrencyAmount: state.inputCurrencyAmount,\n                mintType: state.mintType,\n                market: state.market,\n                onLoadMint: ({ amount }) =>\n                  State.update({\n                    outputCurrencyAmount: amount,\n                    gettingTrade: false,\n                  }),\n              }}\n            />\n          )}\n\n          {state.activeTab === \"Mint\" && state.mintType === \"Redeem\" && (\n            <Widget\n              src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeRedeemOutput\"\n              props={{\n                inputCurrency: state.inputCurrency,\n                inputCurrencyAmount: state.inputCurrencyAmount,\n                mintType: state.mintType,\n                market: state.market,\n                account,\n                outputCurrency: state.outputCurrency,\n                onLoadOut: ({ amount, redeemParams }) => {\n                  console.log(\"amountre: \", amount);\n                  State.update({\n                    outputCurrencyAmount: amount,\n                    redeemParams,\n                    gettingTrade: false,\n                  });\n                },\n              }}\n            />\n          )}\n\n          {state.activeTab === \"Swap\" &&\n            (state.tradeInfo || state.gettingTrade) && (\n              <Widget\n                src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapResult\"\n                props={{\n                  inputCurrency: state.inputCurrency,\n                  outputCurrency: state.outputCurrency,\n                  tradeInfo: state.tradeInfo,\n                  loading: state.gettingTrade,\n                }}\n              />\n            )}\n          <Widget\n            src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapButton\"\n            props={{\n              inputCurrency: state.inputCurrency,\n              updateInputTokenBalance: state.updateInputTokenBalance,\n              extraInputCurrency: state.market?.yt\n                ? {\n                    ...state.market?.yt,\n                    icon: state.market.yt.proIcon,\n                    name: state.market.yt.proName,\n                    symbol: state.market.yt.proSymbol,\n                  }\n                : {},\n              outputCurrency: state.outputCurrency,\n              aggregatorTokenOut: state.tradeInfo?.aggregatorTokenOut,\n              inputCurrencyAmount: state.inputCurrencyAmount,\n              outputCurrencyAmount: state.outputCurrencyAmount,\n              maxInputBalance: state.maxInputBalance,\n              maxInputBalanceExtra: state.maxInputBalanceExtra,\n              onSuccess: () => {},\n              routerAddress: ROUTER_ADDRESS,\n              swapping: state.swapping,\n              updateSwapping: (swapping) =>\n                State.update({\n                  swapping,\n                }),\n              actionType: state.activeTab === \"Mint\" ? state.mintType : \"Swap\",\n              theme,\n              netOut: state.tradeInfo?.netOut,\n              market: state.market,\n              tradeInfo: state.tradeInfo,\n              mintParams: state.mintParams,\n              redeemParams: state.redeemParams,\n              gettingTrade: state.gettingTrade,\n              onMessage: (params) => {\n                State.update({\n                  message: params,\n                });\n              },\n            }}\n          />\n        </Panel>\n      </Content>\n      {state.displayCurrencySelect && (\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Swap.CurrencySelect\"\n          props={{\n            display: state.displayCurrencySelect,\n            selectedTokenAddress: state.selectedTokenAddress,\n            tokens: state.tokens,\n            onClose: () => {\n              State.update({\n                displayCurrencySelect: false,\n              });\n            },\n            onSelect: (currency) => {\n              const params =\n                state.currencySelectType === 1\n                  ? {\n                      outputCurrency: currency,\n                      updateOutputTokenBalance: true,\n                      outputCurrencyAmount: \"\",\n                    }\n                  : {\n                      inputCurrency: currency,\n                      updateInputTokenBalance: true,\n                      outputCurrencyAmount: \"\",\n                    };\n\n              State.update({\n                ...params,\n                displayCurrencySelect: false,\n              });\n              if (\n                state.inputCurrencyAmount &&\n                Number(state.inputCurrencyAmount)\n              )\n                debouncedGetBestTrade();\n            },\n          }}\n        />\n      )}\n      {state.message?.open && (\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Pendle.Message\"\n          props={{\n            status: state.message.status,\n            title: state.message.title,\n            text: state.message.text,\n            hash: state.message.hash,\n            chainId: CHAIN_ID,\n            onClose: () => {\n              State.update({\n                message: { open: false },\n              });\n            },\n          }}\n        />\n      )}\n      {state.activeTab === \"Swap\" && state.gettingTrade && (\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapAmountOut\"\n          props={{\n            update: state.gettingTrade,\n            market: state.market,\n            inputCurrency: state.inputCurrency,\n            outputCurrency: state.outputCurrency,\n            inputCurrencyAmount: state.inputCurrencyAmount,\n            isPT,\n            onLoad: (data) => {\n              State.update({\n                gettingTrade: false,\n                tradeInfo: data,\n                outputCurrencyAmount: data.netOut,\n              });\n            },\n          }}\n        />\n      )}\n    </Container>\n  </>\n);\n", "metadata": {"image": {"ipfs_cid": "bafkreiedaqqpcuw6oj5mao263fizx3gksybdmw5x2p7xeka7wngzip5zeu"}, "name": "Pendle"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.TradeSwap", "fact_widget_deployments_id": "a902e1f5c9e82200b2891d50ec242455", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}