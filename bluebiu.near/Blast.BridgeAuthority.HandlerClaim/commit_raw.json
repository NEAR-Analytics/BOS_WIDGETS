{"tx_hash": "9G8CdnTeFBfxJBYkQ2K1CjJqeBFDqUxg9PdFDyTVbjSM", "action_id_social": "pRYrEbR9fbBBPe548ryMpGZXoi7Qu1swEFBGr6BJqC9-0-widget", "block_id": 117564355, "block_timestamp": "2024-04-25T03:08:07.971Z", "signer_id": "bluebiu.near", "widget_name": "Blast.BridgeAuthority.HandlerClaim", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n  currentChainId,\n  mainnet,\n  toast,\n  txs,\n} = props;\n\nconst {\n  getETHWithdrawalsFromOp,\n  getWithdrawalStatus,\n  getProveData,\n  getWithdrawData,\n  getCliamUSDBData,\n} = VM.require('bluebiu.near/widget/Blast.BridgeAuthority.Util');\n\nconst Transactions = styled.div`\n  /* display: flex;\n  justify-content: space-between;\n  align-items: flex-start; */\n  color: var(--label-color);\n  gap: 20px;\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  .list {\n    flex: 1;\n    .tx-line {\n      &:not(:last-child) {\n        border-bottom: 1px solid #343838;\n      } \n    }\n    .claim-line {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px 0;\n      \n    }\n\n  }\n  .fresh {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n  .chain-token-status {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    padding-top: 20px;\n    .chain-token {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      img {\n        height: 22px;\n      }\n    }\n    .btn {\n        cursor: pointer;\n        background-color: #EBF479;\n        color: #000;\n        width: 90px;\n        height: 32px;\n        line-height: 16px;\n        text-align: center;\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n    .complete {\n      color: #979ABE;\n    }\n    .proccessing {\n      color: #00D1FF;\n    }\n  }\n  .time {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n    padding-bottom: 20px;\n    margin-top: 10px;\n    \n    .format-time-link {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      a {\n        color: #64B5FF;\n      }\n    }\n  }\n`\n\nconst RefreshText = styled.div`\n  text-decoration: underline;\n  font-size: 14px;\n  font-weight: 400;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ArrowIcon = styled.div`\n  transform: rotate(180deg);\n  cursor: pointer;\n`;\n\n\nState.init({\n  isFold: false,\n  isLoadingTx: {},\n  proccessSum: 0,\n  txsUpdated: [],\n  filteredTxs: [],\n  isLoading: false,\n})\n\nconst signer = Ethers.provider().getSigner()\nfunction switchChain() {\n  if (currentChainId !== mainnet.id) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(mainnet.id).toString(16)}` },\n    ]);\n  }\n}\n\nlet toastId\n\n\n\nfunction handleProve(hash) {\n  if (currentChainId !== mainnet.id) {\n    switchChain()\n    return\n  }\n\n  toastId = toast?.loading({\n    title: `Prove Withdrawal From ETH`,\n  });\n\n  getProveData(hash, account).then(body => {\n    console.log('body: ', body)\n    signer.sendTransaction(body).then(tx => {\n      console.log('tx:', tx)\n      // Storage.privateSet(tx.hash, tx);\n      return tx.wait()\n    }).then(res => {\n      toast?.dismiss(toastId);\n      delete state.isLoadingTx[hash]\n      State.update({\n        isLoadingTx: state.isLoadingTx\n      })\n      toast?.success({\n        title: \"Prove Withdrawal Successfully!\",\n        text: `Prove Withdrawal Successfully`,\n        tx: tx,\n        chainId: currentChainId,\n      });\n    }).catch(err => {\n      console.log(err)\n      toast?.fail({\n        title: \"Prove Withdrawal Failed!\",\n        text: `Prove Withdrawal Failed`,\n        tx: '',\n        chainId: currentChainId,\n      });\n      delete state.isLoadingTx[hash]\n      State.update({\n        isLoadingTx: state.isLoadingTx\n      })\n    })\n  })\n}\n\nfunction handleWithdraw() {\n  if (currentChainId !== mainnet.id) {\n    switchChain()\n    return\n  }\n\n  toastId = toast?.loading({\n    title: `Withdrawal From ETH`,\n  });\n\n  getWithdrawData(hash, account).then(body => {\n    console.log('body: ', body)\n    signer.sendTransaction(body).then(tx => {\n      console.log('tx:', tx)\n      // Storage.privateSet(tx.hash, tx);\n      return tx.wait()\n    }).then(res => {\n      toast?.dismiss(toastId);\n      delete state.isLoadingTx[hash]\n      State.update({\n        isLoadingTx: state.isLoadingTx\n      })\n      toast?.success({\n        title: \"Withdrawal Successfully!\",\n        text: `Withdrawal Successfully`,\n        tx: tx,\n        chainId: currentChainId,\n      });\n    }).catch(err => {\n      console.log(err)\n      toast?.fail({\n        title: \"Withdrawal Failed!\",\n        text: `Withdrawal Failed`,\n        tx: '',\n        chainId: currentChainId,\n      });\n      delete state.isLoadingTx[hash]\n      State.update({\n        isLoadingTx: state.isLoadingTx\n      })\n    })\n  })\n}\n\nfunction handleClaimUSDB() {\n  if (currentChainId !== mainnet.id) {\n    switchChain()\n    return\n  }\n\n  toastId = toast?.loading({\n    title: `Claim USDB From ETH`,\n  });\n\n  getCliamUSDBData(hash, account).then(body => {\n    console.log('body: ', body)\n    signer.sendTransaction(body).then(tx => {\n      console.log('tx:', tx)\n      // Storage.privateSet(tx.hash, tx);\n      return tx.wait()\n    }).then(res => {\n      toast?.dismiss(toastId);\n      delete state.isLoadingTx[hash]\n      State.update({\n        isLoadingTx: state.isLoadingTx\n      })\n      toast?.success({\n        title: \"Claim USDB Successfully!\",\n        text: `Claim USDB Successfully`,\n        tx: tx,\n        chainId: currentChainId,\n      });\n    }).catch(err => {\n      console.log(err)\n      toast?.fail({\n        title: \"Claim USDB Failed!\",\n        text: `Claim USDB Failed`,\n        tx: '',\n        chainId: currentChainId,\n      });\n      delete state.isLoadingTx[hash]\n      State.update({\n        isLoadingTx: state.isLoadingTx\n      })\n    })\n  })\n}\n\nfunction getAllStatus(txs) {\n  if (txs && !state.isLoading) {\n\n    State.update({\n      isLoading: true\n    })\n    const pArray = []\n    let needFold = true\n    let proccessSum = 0\n    pArray = Object.keys(txs).map(key => {\n      const currentTx = txs[key]\n      if (!currentTx.status) {\n        currentTx.status = 1\n      }\n\n      if (currentTx.status === 2) {\n        return\n      }\n\n      if (currentTx.fromChainId === 81457) {\n        return getWithdrawalStatus(key, account).then(res => {\n          console.log('status:', res)\n          switch (res.status) {\n            case 'ReadyToProve':\n              currentTx.status = 3\n              break\n            case 'WaitingForFinalization':\n              currentTx.status = 4\n              break\n            case 'ReadyToFinalize':\n              currentTx.status = 5\n              break\n            case 'WaitingForAdminFinalization':\n              currentTx.status = 6\n              break\n            case 'ReadyToClaim':\n              currentTx.status = 7\n              break\n            case 'Done':\n              currentTx.status = 2\n              break\n            default:\n              currentTx.status = 1\n          }\n        })\n      } else {\n        currentTx.status = 2\n      }\n\n      // console.log('txs: ', txs)\n    })\n\n    Promise.all(pArray).then((res) => {\n      // Storage.privateSet(\"blast_claim_txs\", txs);\n      State.update({\n        txsUpdated: Object.values(txs),\n        isFold: needFold,\n        proccessSum,\n        isLoading: false\n      })\n    })\n  }\n}\n\n/**\n1: progress \n2: complete \n3: ReadyToProve  \n4: WaitingForFinalization \n5: ReadyToFinalize \n6: WaitingForAdminFinalization\n7: ReadyToClaim\n*/\nuseEffect(() => {\n  getAllStatus(txs)\n}, [txs])\n\n\nreturn <Transactions>\n  <div className=\"header\">\n    <div className=\"title\">\n      <span>Transaction History</span>\n      <span>{state.proccessSum} Processing</span>\n    </div>\n    <div className=\"fresh\">\n      <RefreshText onClick={() => {\n        getAllStatus(txs)\n      }}>\n        {state.isLoading && (\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n            props={{\n              size: 16,\n            }}\n          />\n        )}\n        Refresh\n      </RefreshText>\n      <ArrowIcon onClick={() => {\n        State.update({\n          isFold: !state.isFold\n        })\n      }}>\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Swap.ArrowIcon\"\n          props={{ size: 12 }}\n        />\n      </ArrowIcon>\n    </div>\n  </div>\n  {\n    state.isFold ? <div className=\"list\">\n      {\n        (state.txsUpdated || []).map(tx => {\n\n          return <div className=\"tx-line\" key={tx.hash}>\n            <div className=\"chain-token-status\">\n              <div className=\"chain-token\">\n                <img src={tx.fromLogo} />\n                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                <img src={tx.toLogo} />\n                <img src={tx.tokenLogo} />\n                <div>{tx.amount} {tx.symbol}</div>\n                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                <img src={tx.tokenLogo} />\n                <div>{tx.amount} {tx.symbol}</div>\n              </div>\n              <div>\n                {\n                  tx.status === 1 && <div className=\"processing\">Processing</div>\n                }\n                {\n                  tx.status === 2 && <div className=\"complete\">Complete</div>\n                }\n                {\n                  tx.status === 3 && <div className=\"btn\" onClick={() => {\n                    if (state.isLoadingTx[tx.hash]) {\n                      return\n                    }\n                    handleProve(tx.hash)\n                    state.isLoadingTx[tx.hash] = true\n                    State.update({\n                      isLoadingTx: state.isLoadingTx\n                    })\n                  }}>\n                    {state.isLoadingTx[tx.hash] && (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    )}\n                    Prove\n                  </div>\n                }\n                {\n                  tx.status === 4 && <div className=\"processing\">WaitingForFinalization</div>\n                }\n                {\n                  tx.status === 5 && <div className=\"btn\" onClick={() => {\n                    if (state.isLoadingTx[tx.hash]) {\n                      return\n                    }\n                    handleWithdraw(tx.hash)\n                    state.isLoadingTx[tx.hash] = true\n                    State.update({\n                      isLoadingTx: state.isLoadingTx\n                    })\n                  }}>\n                    {state.isLoadingTx[tx.hash] && (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    )}\n                    Withdraw\n                  </div>\n                }\n                {\n                  tx.status === 6 && <div className=\"processing\">WaitingForAdminFinalization</div>\n                }\n                {\n                  tx.status === 7 && <div className=\"btn\" onClick={() => {\n                    if (state.isLoadingTx[tx.hash]) {\n                      return\n                    }\n                    handleClaimUSDB(tx.hash)\n                    state.isLoadingTx[tx.hash] = true\n                    State.update({\n                      isLoadingTx: state.isLoadingTx\n                    })\n                  }}>\n                    {state.isLoadingTx[tx.hash] && (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    )}\n                    Withdraw\n                  </div>\n                }\n              </div>\n            </div>\n            <div className=\"time\">\n              <div className=\"format-time-link\">\n                <div className=\"format-time\">\n                  <Widget\n                    src=\"bluebiu.near/widget/Base.Bridge.FormateTxDate\"\n                    props={{\n                      date: tx.time,\n                    }}\n                  />\n                </div>\n                <a target=\"_blank\" className=\"tx-link\" href={tx.link}>Tx</a>\n              </div>\n              {\n                tx.status !== 2 ? <div>~14 day</div> : null\n              }\n            </div>\n          </div>\n        })\n      }\n    </div> : null\n  }\n\n  <div style={{ display: 'none' }}>\n    <Widget\n      src=\"bluebiu.near/widget/Blast.BridgeAuthority.Util\"\n    />\n  </div>\n</Transactions>;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Blast.BridgeAuthority.HandlerClaim", "fact_widget_deployments_id": "51c63b25501a2481509761704071e656", "inserted_timestamp": "2024-04-25T05:01:36.380Z", "modified_timestamp": "2024-04-25T05:01:36.380Z", "__row_index": 0}