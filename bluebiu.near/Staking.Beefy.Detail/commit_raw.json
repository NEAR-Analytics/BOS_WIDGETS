{"tx_hash": "9xAqse7CBWzLKUzyTFwtwJGKRQSkB8hYkrs2AHzmYh23", "action_id_social": "B9igAnTn49EHscnehMt9hvPLuijSzdXTzhXPaoSSDd6k-0-widget", "block_id": 120037706, "block_timestamp": "2024-05-30T03:18:33.193Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Beefy.Detail", "source_code": "const {\n  Row,\n  Column,\n  DetailWrapper,\n  FilterButtonList,\n  FilterButton,\n  InputWrapList,\n  InputWrap,\n  InputSuffix,\n  StyledImageList,\n  PriceWrap,\n  TotalPrice,\n  BalancePrice,\n  StyledButtonList,\n  StyledButton,\n} = VM.require(\"bluebiu.near/widget/Staking.Beefy.Styles\");\n\nconst Panel = styled.div`\n  width: 500px;\n  margin: 0 auto 20px;\n  border-radius: 12px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  background-color: rgba(46, 49, 66, 1);\n  padding: 15px;\n  margin-bottom: 20px;\n  .title {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 16.8px;\n    color: rgba(151, 154, 190, 1);\n  }\n  .body {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n  }\n\n  .foot {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n    justify-content: space-between;\n    font-size: 12px;\n    font-weight: 400;\n    line-height: 14.4px;\n    color: rgba(151, 154, 190, 1);\n  }\n`;\nconst Input = styled.input`\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  width: 300px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nconst ABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_amount0Max\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_amount1Max\", type: \"uint256\" },\n    ],\n    name: \"deposit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"depositedAmount0\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"depositedAmount1\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_amount0Min\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"_amount1Min\", type: \"uint256\" },\n    ],\n    name: \"withdraw\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"withdrawnAmount0\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"withdrawnAmount1\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst {\n  account,\n  data,\n  toast,\n  prices,\n  defaultDex,\n  addAction,\n  userPositions,\n  dexConfig,\n} = props;\n\nconst { formatUnits, parseUnits } = ethers.utils;\nconst { tokenList } = dexConfig;\nconst defaultDeposit = props.tab === \"deposit\" || !props.tab;\n\nconst curPositionUSD = userPositions[data.vaultAddress]?.balanceUSD;\n\nconsole.log(\"DETAIL--\", props);\n\nlet _options = tokenList.map((item) => ({\n  text: item.symbol,\n  value: item.symbol,\n  icons: [item.icon],\n}));\n\nState.init({\n  isDeposit: defaultDeposit,\n  lpBalance: \"\",\n  balances: [],\n  amount0: \"\",\n  amount1: \"\",\n  lpAmount: \"\",\n  isError: false,\n  isLoading: false,\n  isToken0Approved: true,\n  isToken1Approved: true,\n  isToken0Approving: false,\n  isToken1Approving: false,\n  loadingMsg: \"\",\n  isPostTx: false,\n  showPairs: false,\n  updater: 0,\n  options: _options,\n});\n\nconst {\n  vaultAddress,\n  token0,\n  token1,\n  decimals0,\n  decimals1,\n  totalAmount0,\n  totalAmount1,\n  totalSupply,\n} = data;\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst updateLPBalance = () => {\n  console.log(\"updateLPBalance--\");\n  const abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const vaultContract = new ethers.Contract(\n    vaultAddress,\n    abi,\n    Ethers.provider()\n  );\n  vaultContract.balanceOf(account).then((balanceBig) => {\n    const adjustedBalance = formatUnits(balanceBig, 18);\n    State.update({\n      lpBalance: adjustedBalance,\n    });\n  });\n};\nconst updateBalance = (token) => {\n  console.log(\"updateBalance--\");\n  const { address, decimals, symbol } = token;\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(account)\n      .then((balanceBig) => {\n        const adjustedBalance = formatUnits(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract\n      .balanceOf(account)\n      .then((balanceBig) => {\n        const adjustedBalance = Big(\n          formatUnits(balanceBig, decimals)\n        ).toFixed();\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      })\n      .catch((error) => {\n        console.log(\"error: \", error);\n        setTimeout(() => {\n          updateBalance(token);\n        }, 1500);\n      });\n  }\n};\n\n// useEffect(() => {\n//   if (!account || !token0 || !token1) return;\n\n//   [\n//     { symbol: token0, address: addresses[token0], decimals: decimals0 },\n//     { symbol: token1, address: addresses[token1], decimals: decimals1 },\n//   ].map(updateBalance);\n\n//   updateLPBalance();\n// }, [account, token0, token1, state.updater]);\n\nconst {\n  isDeposit,\n  balances,\n  amount0,\n  amount1,\n  isLoading,\n  isError,\n  isToken0Approved,\n  isToken1Approved,\n  isToken0Approving,\n  isToken1Approving,\n  loadingMsg,\n  lpBalance,\n  lpAmount,\n  isPostTx,\n} = state;\n\n// const detailLoading = Object.keys(balances).length < 2 && lpBalance === \"\";\nconst detailLoading = false;\n\n// const checkApproval = (token0Amount, token1Amount) => {\n//   const token0Wei = parseUnits(Big(token0Amount).toFixed(decimals0), decimals0);\n//   const token1Wei = parseUnits(Big(token1Amount).toFixed(decimals1), decimals1);\n\n//   const abi = [\n//     \"function allowance(address, address) external view returns (uint256)\",\n//   ];\n\n//   const token0Contract = new ethers.Contract(\n//     addresses[token0],\n//     abi,\n//     Ethers.provider()\n//   );\n\n//   token0Contract\n//     .allowance(account, vaultAddress)\n//     .then((allowance0) => {\n//       State.update({\n//         isToken0Approved: !new Big(allowance0.toString()).lt(token0Wei),\n//       });\n//     })\n//     .catch((e) => console.log(e));\n\n//   const token1Contract = new ethers.Contract(\n//     addresses[token1],\n//     abi,\n//     Ethers.provider()\n//   );\n\n//   token1Contract\n//     .allowance(account, vaultAddress)\n//     .then((allowance1) => {\n//       State.update({\n//         isToken1Approved: !new Big(allowance1.toString()).lt(token1Wei),\n//       });\n//     })\n//     .catch((e) => console.log(e));\n// };\nconst changeMode = (isDeposit) => {\n  State.update({ isDeposit });\n};\n\nconst handleMax = (isToken0) => {\n  if (isToken0) handleToken0Change(balances[token0]);\n  else handleToken1Change(balances[token1]);\n};\nconst handleToken0Change = (amount) => {\n  State.update({ amount0: amount });\n  if (Number(amount) === 0) {\n    State.update({\n      amount1: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n\n  const amount1 = calcAmount1(amount);\n  State.update({ amount1 });\n  State.update({ isLoading: false });\n  checkApproval(amount, amount1);\n};\n\nconst handleToken1Change = (amount) => {\n  State.update({ amount1: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount0: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n\n  const amount0 = calcAmount0(amount);\n  State.update({ amount0 });\n  State.update({ isLoading: false });\n  checkApproval(amount0, amount);\n};\n\nconst handleLPChange = (amount) => {\n  State.update({\n    lpAmount: amount,\n  });\n};\n\n// const handleApprove = (isToken0) => {\n//   const _token = isToken0 ? token0 : token1;\n//   const payload = isToken0\n//     ? { isToken0Approving: true }\n//     : { isToken1Approving: true };\n\n//   const amount = isToken0\n//     ? Big(amount0).toFixed(decimals0)\n//     : Big(amount1).toFixed(decimals1);\n\n//   const toastId = toast?.loading({\n//     title: `Approve ${amount} ${_token}`,\n//   });\n\n//   State.update({\n//     ...payload,\n//     isLoading: true,\n//     loadingMsg: `Approving ${_token}...`,\n//   });\n\n//   const tokenWei = parseUnits(amount, isToken0 ? decimals0 : decimals1);\n\n//   const abi = [\"function approve(address, uint) public\"];\n\n//   const tokenContract = new ethers.Contract(\n//     addresses[_token],\n//     abi,\n//     Ethers.provider().getSigner()\n//   );\n\n//   tokenContract\n//     .approve(vaultAddress, tokenWei)\n//     .then((tx) => tx.wait())\n//     .then((receipt) => {\n//       const payload = isToken0\n//         ? { isToken0Approved: true, isToken0Approving: false }\n//         : { isToken1Approved: true, isToken1Approving: false };\n\n//       State.update({ ...payload, isLoading: false, loadingMsg: \"\" });\n//       toast?.dismiss(toastId);\n//       toast?.success({\n//         title: \"Approve Successfully!\",\n//         text: `Approve ${amount} ${_token}`,\n//         tx: receipt.transactionHash,\n//         chainId: props.chainId,\n//       });\n//     })\n//     .catch((error) => {\n//       State.update({\n//         isError: true,\n//         isLoading: false,\n//         loadingMsg: error,\n//         isToken0Approving: false,\n//         isToken1Approving: false,\n//       });\n//       toast?.dismiss(toastId);\n//       toast?.fail({\n//         title: \"Approve Failed!\",\n//         text: error?.message?.includes(\"user rejected transaction\")\n//           ? \"User rejected transaction\"\n//           : `Approve ${amount} ${_token}`,\n//       });\n//     });\n// };\nconst handleDeposit = () => {\n  const toastId = toast?.loading({\n    title: `Depositing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const token0Wei = parseUnits(\n    Big(amount0).times(1.01).toFixed(decimals0),\n    decimals0\n  );\n  const token1Wei = parseUnits(\n    Big(amount1).times(1.01).toFixed(decimals1),\n    decimals1\n  );\n  const _shares = parseUnits(calcShares(amount0));\n\n  const depositContract = new ethers.Contract(\n    vaultAddress,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n  depositContract\n    .deposit(_shares, token0Wei, token1Wei)\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Deposit\",\n        token0,\n        token1,\n        amount: amount0,\n        template: defaultDex,\n        status: status,\n        add: false,\n        transactionHash,\n        chain_id: props.chainId,\n      });\n\n      State.update({\n        amount0: \"\",\n        amount1: \"\",\n        isLoading: false,\n        isPostTx: true,\n        updater: new Date().getTime(),\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Deposit Successfully!\",\n      });\n    })\n    .catch((error) => {\n      console.log(\"error: \", error);\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Deposit Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : error?.message ?? \"\",\n      });\n    });\n};\n\nconst handleWithdraw = () => {\n  const toastId = toast?.loading({\n    title: `Withdrawing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Withdrawing...\",\n  });\n\n  const lpWeiAmount = parseUnits(Big(lpAmount).toFixed(18));\n  const { _token0, _token1 } = calcShareToTokens(lpAmount);\n  const token0Amount = parseUnits(Big(_token0).toFixed(decimals0), decimals0);\n  const token1Amount = parseUnits(Big(_token1).toFixed(decimals1), decimals1);\n  const withdrawContract = new ethers.Contract(\n    vaultAddress,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n\n  withdrawContract\n    .withdraw(lpWeiAmount, token0Amount, token1Amount, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        lpAmount: \"\",\n        isLoading: false,\n        isPostTx: true,\n        updater: new Date().getTime(),\n      });\n\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Withdraw\",\n        token0,\n        token1,\n        amount: lpAmount,\n        template: defaultDex,\n        status: status,\n        add: false,\n        transactionHash,\n        chain_id: state.chainId,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Withdraw Successfully!\",\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Withdraw Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : error?.message ?? \"\",\n      });\n    });\n};\n\nreturn (\n  <DetailWrapper>\n    <FilterButtonList>\n      <FilterButton\n        className={isDeposit ? \"isActive\" : \"\"}\n        onClick={() => changeMode(true)}\n      >\n        Deposit\n      </FilterButton>\n      <FilterButton\n        className={!isDeposit ? \"isActive\" : \"\"}\n        onClick={() => changeMode(false)}\n      >\n        Withdraw\n      </FilterButton>\n    </FilterButtonList>\n    {detailLoading ? (\n      <div style={{ padding: \"30px 0 45px\" }}>\n        <Widget\n          props={{\n            color: \"#999\",\n          }}\n          src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\"\n        />\n      </div>\n    ) : (\n      <>\n        <Panel>\n          <div className=\"title\"></div>\n          <div className=\"body\">\n            <Input\n              type=\"text\"\n              placeholder=\"0\"\n              value={state.stakeAmount}\n              onChange={(ev) => {\n                if (isNaN(Number(ev.target.value))) return;\n                let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n                if (Big(amount || 0).gt(Big(state.tokenBal || 0))) {\n                  amount = Big(state.tokenBal || 0).toFixed(4, 0);\n                }\n                State.update({\n                  stakeAmount: amount,\n                });\n              }}\n            />\n            <Widget\n              src=\"bluebiu.near/widget/UI.Select.Index\"\n              props={{\n                options: state.options,\n                value: state.options.find(\n                  (obj) => obj.value === state.curToken\n                ),\n                onChange: (option) => {\n                  console.log(\"onchange--\", option);\n                  State.update({\n                    curToken: option.value,\n                  });\n                },\n              }}\n            />\n          </div>\n          <div className=\"foot\">\n            <div class=\"prices\">\n              $\n              {Big(state.stakeAmount || 0)\n                .times(Big(prices[state.curToken] || 1))\n                .toFixed(2, 0)}\n            </div>\n            <div class=\"balance\">\n              Balance:\n              <Widget\n                src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n                props={{\n                  value: state.tokenBal,\n                  digit: 4,\n                  onClick: clickBalance,\n                  symbol:\n                    tab === \"Stake\" ? state.curToken : ExchangeToken.symbol,\n                }}\n              />\n            </div>\n          </div>\n        </Panel>\n        <StyledButtonList>\n          {isToken0Approved &&\n          isToken1Approved &&\n          !isToken0Approving &&\n          !isToken1Approving ? (\n            <StyledButton\n              disabled={isLoading || !amount0 || !amount1}\n              onClick={handleDeposit}\n            >\n              {isLoading ? (\n                <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n              ) : (\n                \"Deposit\"\n              )}\n            </StyledButton>\n          ) : (\n            <>\n              <StyledButton\n                disabled={isToken0Approved || isToken0Approving}\n                onClick={() => handleApprove(true)}\n              >\n                {isToken0Approving ? (\n                  <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                ) : (\n                  <>\n                    {isToken0Approved ? \"Approved\" : \"Approve\"} {token0}\n                  </>\n                )}\n              </StyledButton>\n              <StyledButton\n                disabled={isToken1Approved || isToken1Approving}\n                onClick={() => handleApprove(false)}\n              >\n                {isToken1Approving ? (\n                  <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                ) : (\n                  <>\n                    {isToken1Approved ? \"Approved\" : \"Approve\"} {token1}\n                  </>\n                )}\n              </StyledButton>\n            </>\n          )}\n        </StyledButtonList>\n      </>\n    )}\n  </DetailWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Beefy.Detail", "fact_widget_deployments_id": "f4b1bac0122c04a47250ba5965ff3ed5", "inserted_timestamp": "2024-05-30T04:44:15.027Z", "modified_timestamp": "2024-05-30T04:44:15.027Z", "__row_index": 0}