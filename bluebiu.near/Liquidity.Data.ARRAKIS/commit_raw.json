{"tx_hash": "Cx7SPDbg4NrTyWKX3qro8U4zUnQVrE2inMnQLiR8o463", "action_id_social": "Cs9hZUe2PJ3n65xxbwSv8wtU8J9ACCMwnuPsKdYhLiyp-0-widget", "block_id": 119908570, "block_timestamp": "2024-05-28T07:28:10.483Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.ARRAKIS", "source_code": "const {\n  pairs,\n  sender,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  LAST_SNAP_SHOT_DATA_URL,\n  prices\n} = props\n\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_shares\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getUnderlyingAssets\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalX\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalY\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  \"function balanceOf(address) view returns (uint256)\",\n  {\n    \"inputs\": [],\n    \"name\": \"getUnderlyingBalances\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount0Current\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount1Current\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\n\nlet loading = false\nlet dataList = []\nfunction formatedData() {\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    const findIndex = allData.findIndex(data => addresses[pair.id].toLowerCase() === data.id)\n    if (findIndex > -1) {\n      dataList.push({\n        initialData: allData[findIndex],\n        ...pair,\n      })\n    }\n  })\n  formatedData('getDataList')\n}\nfunction getTvlUSD() {\n  const calls = []\n  dataList.forEach(data => {\n    calls.push({\n      address: addresses[data.id],\n      name: \"getUnderlyingBalances\",\n    })\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const data = dataList[i]\n        const [amount0Current, amount1Current] = result[i];\n        dataList[i].tvlUSD = Big(ethers.utils.formatUnits(amount0Current, data.decimals0)).times(prices[data.token0]).plus(Big(ethers.utils.formatUnits(amount1Current, data.decimals1)).times(prices[data.token1])).toFixed(2)\n      }\n      formatedData('getTvlUSD')\n    }\n  )\n\n\n}\nfunction handleGetFeeApr(id) {\n  return new Promise((resolve, reject) => {\n    const query = `\n    query {\n      vaults(where: {id: \"${id.toLowerCase()}\"}) {\n        id\n        blockCreated\n        manager\n        address\n        uniswapPool\n        token0 {\n          address\n          name\n          symbol\n        }\n        token1 {\n          address\n          name\n          symbol\n        }\n        feeTier\n        liquidity\n        lowerTick\n        upperTick\n        totalSupply\n        positionId\n        managerFee\n        name\n        reranges {\n          lowerTick\n          upperTick\n          timestamp\n        }\n        snapshots {\n          apr\n          startTimestamp\n          endTimestamp\n        }\n        numSnapshots\n        apr {\n          averageApr\n          timestamp\n        }\n      }\n    }\n  `\n    asyncFetch('https://api.thegraph.com/subgraphs/name/arrakisfinance/vault-v1-optimism', {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      })\n    }).then(result => {\n      if (result.ok) {\n        resolve(result?.body?.data?.vaults ?? [])\n      } else {\n        reject('')\n      }\n    }).catch(reject)\n  })\n}\nfunction getFeeApr() {\n  const promiseArray = []\n  dataList.forEach(data => {\n    promiseArray.push(handleGetFeeApr(addresses[data.id]))\n  })\n  Promise.all(promiseArray)\n    .then(result => {\n      for (let i = 0; i < result.length; i++) {\n        dataList[i].feeApr = result[i][0] ? (Big(result[i][0]?.apr?.averageApr ?? 0).toFixed(2) + '%') : '-'\n        formatedData('getFeeApr')\n      }\n    })\n}\nfunction getLiquidity() {\n  const firstCalls = []\n  const secondColls = []\n  dataList.forEach(data => {\n    firstCalls.push({\n      address: addresses[data.id],\n      name: 'totalSupply'\n    })\n    secondColls.push({\n      address: addresses[data.id],\n      name: \"getUnderlyingBalances\",\n    })\n  })\n  multicallv2(\n    ERC20_ABI,\n    firstCalls,\n    {},\n    firstResult => {\n      multicallv2(\n        ERC20_ABI,\n        secondColls,\n        {},\n        secondResult => {\n          for (let i = 0; i < dataList.length; i++) {\n            const data = dataList[i]\n            const [total0, total1] = secondResult[i]\n            const priceLp = Big(Big(ethers.utils.formatUnits(total0, 18)).times(prices[data.token0]).plus(Big(ethers.utils.formatUnits(total1, 18)).times(prices[data.token1]))).div(ethers.utils.formatUnits(firstResult[i][0], 18)).toFixed()\n            const amountLp = data.balance\n            dataList[i].liquidity = Big(priceLp).times(amountLp).toFixed()\n          }\n          formatedData('getLiquidity')\n        },\n        error => {\n          console.log('error', error)\n        }\n      )\n    },\n    error => {\n      console.log('error', error)\n    }\n  )\n}\nfunction getBalance() {\n  const calls = [];\n  dataList.forEach(data => {\n    calls.push({\n      address: ethers.utils.getAddress(addresses[data.id]),\n      name: \"balanceOf\",\n      params: [sender],\n    });\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        dataList[i].balance = ethers.utils.formatUnits(element[0], 18)\n      }\n      formatedData('getBalance')\n      getLiquidity()\n    },\n    (error) => {\n      setTimeout(() => {\n        getBalance();\n      }, 500);\n    }\n  )\n}\nuseEffect(() => {\n  getDataList()\n  getTvlUSD()\n  getFeeApr()\n  getBalance()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.ARRAKIS", "fact_widget_deployments_id": "5f11d20da1d9013801e2e3fabb1d5761", "inserted_timestamp": "2024-05-28T08:56:32.229Z", "modified_timestamp": "2024-05-28T09:55:42.279Z", "__row_index": 2}