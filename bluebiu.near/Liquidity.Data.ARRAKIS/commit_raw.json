{"tx_hash": "HxCb1JTahQMFgq8FUHM5RsvdCceTQre1TVBhD4RYbeQm", "action_id_social": "ErhdWAk7Kxz3rmmKTgnMX4ZYK9W3NxTGbeVgB6twNgcw-0-widget", "block_id": 127334452, "block_timestamp": "2024-09-05T07:41:11.697Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.ARRAKIS", "source_code": "const {\n  pairs,\n  sender,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  LAST_SNAP_SHOT_DATA_URL,\n  prices\n} = props\n\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_shares\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getUnderlyingAssets\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalX\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalY\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  \"function balanceOf(address) view returns (uint256)\",\n  {\n    \"inputs\": [],\n    \"name\": \"getUnderlyingBalances\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount0Current\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount1Current\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\n\nlet loading = false\nlet dataList = []\nfunction formatedData() {\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    const findIndex = allData.findIndex(data => addresses[pair.id].toLowerCase() === data.id)\n    if (findIndex > -1) {\n      dataList.push({\n        initialData: allData[findIndex],\n        ...pair,\n      })\n    }\n  })\n  formatedData('getDataList')\n}\nfunction getTvlUSD() {\n  const calls = []\n  dataList.forEach(data => {\n    calls.push({\n      address: addresses[data.id],\n      name: \"getUnderlyingBalances\",\n    })\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const data = dataList[i]\n        const [amount0Current, amount1Current] = result[i];\n        dataList[i].tvlUSD = Big(ethers.utils.formatUnits(amount0Current, data.decimals0)).times(prices[data.token0]).plus(Big(ethers.utils.formatUnits(amount1Current, data.decimals1)).times(prices[data.token1])).toFixed(2)\n      }\n      formatedData('getTvlUSD')\n    }\n  )\n\n\n}\n\nfunction getFeeApr() {\n  for (let i = 0; i < dataList.length; i++) {\n    dataList[i].feeApr = dataList[i]?.initialData ? (Big(dataList[i]?.initialData?.averageApr ?? 0).toFixed(2) + '%') : '-'\n  }\n  formatedData('getFeeApr')\n\n}\nfunction getLiquidity() {\n  const firstCalls = []\n  const secondColls = []\n  dataList.forEach(data => {\n    firstCalls.push({\n      address: addresses[data.id],\n      name: 'totalSupply'\n    })\n    secondColls.push({\n      address: addresses[data.id],\n      name: \"getUnderlyingBalances\",\n    })\n  })\n  multicallv2(\n    ERC20_ABI,\n    firstCalls,\n    {},\n    firstResult => {\n      multicallv2(\n        ERC20_ABI,\n        secondColls,\n        {},\n        secondResult => {\n          for (let i = 0; i < dataList.length; i++) {\n            const data = dataList[i]\n            const [total0, total1] = secondResult[i]\n            const priceLp = Big(Big(ethers.utils.formatUnits(total0, 18)).times(prices[data.token0]).plus(Big(ethers.utils.formatUnits(total1, 18)).times(prices[data.token1]))).div(ethers.utils.formatUnits(firstResult[i][0], 18)).toFixed()\n            const amountLp = data.balance\n            dataList[i].liquidity = Big(priceLp).times(amountLp).toFixed()\n          }\n          formatedData('getLiquidity')\n        },\n        error => {\n          console.log('error', error)\n        }\n      )\n    },\n    error => {\n      console.log('error', error)\n    }\n  )\n}\nfunction getBalance() {\n  const calls = [];\n  dataList.forEach(data => {\n    calls.push({\n      address: ethers.utils.getAddress(addresses[data.id]),\n      name: \"balanceOf\",\n      params: [sender],\n    });\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        dataList[i].balance = ethers.utils.formatUnits(element[0], 18)\n      }\n      formatedData('getBalance')\n      getLiquidity()\n    },\n    (error) => {\n      setTimeout(() => {\n        getBalance();\n      }, 500);\n    }\n  )\n}\nuseEffect(() => {\n  getDataList()\n  getTvlUSD()\n  getFeeApr()\n  getBalance()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.ARRAKIS", "fact_widget_deployments_id": "1bb9d0c33c545b1f9e868f87a6ea9988", "inserted_timestamp": "2024-09-05T08:56:54.853Z", "modified_timestamp": "2024-09-05T09:57:40.904Z", "__row_index": 0}