{"tx_hash": "HeBibTkUgEtpqiiZPLXUkuXyamntGw65RSuYBBG576bP", "action_id_social": "BL2e8XvSMJ8k5FTK36inc1437k9rRCkZEESgfh6xZX7V-0-widget", "block_id": 106839779, "block_timestamp": "2023-11-30T01:44:11.292Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.DashBoard.claim-all", "source_code": "const { claimList, onLoadGas, onLoadFunc, sender, callback } = props;\n\nif (claimList.length === 0) return \"\";\n\nconst DELAY = 1000 * 60 * 5;\nconst timer = Storage.privateGet(\"priceTimer\");\nconst AccessKey = Storage.get(\n  \"AccessKey\",\n  \"guessme.near/widget/ZKEVMWarmUp.add-to-quest-card\"\n);\nfunction getPrice() {\n  asyncFetch(\"/dapdap/get-token-price-by-dapdap\", {\n    Authorization: AccessKey,\n  })\n    .then((res) => {\n      const data = JSON.parse(res.body);\n      data.native = data.aurora;\n      delete data.aurora;\n      Storage.privateSet(\"tokensPrice\", data);\n      setTimeout(getPrice, DELAY);\n    })\n    .catch((err) => {\n      setTimeout(getPrice, DELAY);\n    });\n}\nif (!Storage.privateGet(\"priceTimer\")) {\n  getPrice();\n  Storage.privateSet(\"priceTimer\", 1);\n}\nconsole.log(\"getPrice: \", getPrice);\n\nconst abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"sys\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"yts\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"markets\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"redeemDueInterestAndRewards\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst prices = Storage.privateGet(\"tokensPrice\");\n\nconst ETHPrice = prices?.[\"ETH\"];\nconsole.log(\"ETHPrice: \", ETHPrice);\n\nconst l2NodeUrl = \"https://arb1.arbitrum.io/rpc\";\n\nconst user = sender;\n\nconst signer = Ethers.provider().getSigner();\n\nconst sys = claimList\n  .filter((claim) => claim.type === \"SY\")\n  .map((claim) => claim.address);\n\nconst yts = claimList\n  .filter((claim) => claim.type === \"YT\")\n  .map((claim) => claim.address);\n\nconst markets = claimList\n  .filter((claim) => claim.type === \"PENDLE_LP\")\n  .map((claim) => claim.address);\n\nconst inputs = [user, sys, yts, markets];\n\n//   use ethers to estimate gas on redeemDueInterestAndRewards\n\nconst contractAddress = \"0x0000000001E4ef00d069e71d6bA041b0A16F7eA0\";\n\nconst contract = new ethers.Contract(contractAddress, abi, signer);\n\nconst estimateGasPrice = () => {\n  console.log(\"gas11111: \", claimList);\n\n  const gasPrice = Ethers.getGasPrice();\n  if (gasPrice) {\n    State.update({ gasPrice: Number(gasPrice._hex).toString() });\n  }\n};\n\nconst estimateGasLimit = () => {\n  // if (claimList.length === 0) return;\n\n  const contractAddress = \"0x0000000001E4ef00d069e71d6bA041b0A16F7eA0\";\n\n  const contract = new ethers.Contract(contractAddress, abi, signer);\n\n  const iface = new ethers.utils.Interface(abi);\n\n  console.log(\"inputs: \", inputs);\n\n  contract.estimateGas\n    .redeemDueInterestAndRewards(...inputs)\n    .then((gasLimit) => {\n      console.log(\"gasLimit111: \", gasLimit);\n      State.update({ gasLimit });\n    })\n    .catch((err) => {\n      console.log(\"err: \", err);\n    });\n};\n\nconst claimAction = (gasLimit) => {\n  const contract = new ethers.Contract(contractAddress, abi, signer);\n\n  contract.redeemDueInterestAndRewards(...inputs, { gasLimit }).then((tx) => {\n    callback(tx);\n  });\n};\n\nif (!state.gasPrice) {\n  estimateGasPrice();\n}\n\nconst qs = claimList.length;\n\nif (qs !== state.qs) {\n  estimateGasLimit();\n}\n\nif (state.gasPrice && state.gasLimit && ETHPrice && qs !== state.qs) {\n  console.log(\n    \"state.gasPrice  state.gasLimit: \",\n    state.gasPrice.toString(),\n    state.gasLimit.toString()\n  );\n  const cost = ethers.utils.formatEther(\n    Big(state.gasPrice).times(Big(state.gasLimit)).toFixed()\n  );\n\n  const gasValue = \"$\" + parseFloat(Big(cost).times(Big(ETHPrice)).toFixed(8));\n\n  if (state.gasLimit && qs !== state.qs) {\n    onLoadFunc(() => claimAction(state.gasLimit));\n  }\n\n  onLoadGas({\n    gasCost: cost + \"ETH\",\n    gasValue,\n  });\n\n  State.update({\n    qs,\n  });\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.DashBoard.claim-all", "fact_widget_deployments_id": "374015e5a72daa62d518205f69aced5c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}