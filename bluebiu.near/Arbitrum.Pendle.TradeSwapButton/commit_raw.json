{"tx_hash": "HeBibTkUgEtpqiiZPLXUkuXyamntGw65RSuYBBG576bP", "action_id_social": "BL2e8XvSMJ8k5FTK36inc1437k9rRCkZEESgfh6xZX7V-0-widget", "block_id": 106839779, "block_timestamp": "2023-11-30T01:44:11.292Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.TradeSwapButton", "source_code": "const SwapButton = styled.button`\n  width: 100%;\n  height: 50px;\n  border-radius: 10px;\n  background-color: ${props.theme.buttonColor};\n  color: #fff;\n  font-size: 18px;\n  line-height: 22px;\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n  @media (max-width: 900px) {\n    height: 40px;\n    font-size: 16px;\n  }\n`;\nconst Buttons = styled.div`\n  display: flex;\n  gap: 10px;\n`;\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (props.loading) {\n  return <SwapButton disabled>Getting Trade Info...</SwapButton>;\n}\n\nconst {\n  inputCurrency,\n  extraInputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  outputCurrencyAmount,\n  aggregatorTokenOut,\n  maxInputBalance,\n  maxInputBalanceExtra,\n  tradeInfo,\n  onSuccess,\n  routerAddress,\n  actionType,\n  market,\n  mintParams,\n  gettingTrade,\n  swapping,\n  updateSwapping,\n  onMessage,\n  updateInputTokenBalance,\n} = props;\n\nState.init({\n  isApproved: false,\n  isExtraApproved: false,\n  loadAllowanceDone: false,\n  approving: false,\n  wrapping: false,\n});\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    inputCurrency.address,\n    [\n      {\n        constant: true,\n        inputs: [\n          {\n            name: \"_owner\",\n            type: \"address\",\n          },\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n        ],\n        name: \"allowance\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"uint256\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, routerAddress).then((inputAllowance) => {\n    if (actionType === \"Redeem\") {\n      TokenContract.allowance(account, routerAddress).then(\n        (extraInputAllowance) => {\n          State.update({\n            isExtraApproved: !Big(\n              ethers.utils.formatUnits(\n                extraInputAllowance._hex,\n                inputCurrency.decimals\n              )\n            ).lt(inputCurrencyAmount),\n            isApproved: !Big(\n              ethers.utils.formatUnits(\n                inputAllowance._hex,\n                inputCurrency.decimals\n              )\n            ).lt(inputCurrencyAmount),\n            loadAllowanceDone: true,\n          });\n        }\n      );\n    } else {\n      State.update({\n        isApproved: !Big(\n          ethers.utils.formatUnits(inputAllowance._hex, inputCurrency.decimals)\n        ).lt(inputCurrencyAmount),\n        isExtraApproved: true,\n        loadAllowanceDone: true,\n      });\n    }\n  });\n};\n\nif (gettingTrade && actionType == \"Swap\") {\n  return (\n    <SwapButton disabled>\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n      Get Best Trade\n    </SwapButton>\n  );\n}\n\nconsole.log({ state, props });\n\nif (updateInputTokenBalance) {\n  return (\n    <SwapButton disabled>\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    </SwapButton>\n  );\n}\n\nif (Big(inputCurrencyAmount || 0).eq(0)) {\n  return <SwapButton disabled>Enter An Amount</SwapButton>;\n}\nif (!inputCurrency || (actionType === \"Swap\" && !outputCurrency)) {\n  return <SwapButton disabled>Select a token</SwapButton>;\n}\n\nif (Big(inputCurrencyAmount || 0).gt(maxInputBalance || 0)) {\n  return (\n    <SwapButton disabled>\n      Insufficient {inputCurrency?.symbol} Balance\n    </SwapButton>\n  );\n}\n\nif (\n  actionType === \"Redeem\" &&\n  Big(inputCurrencyAmount || 0).gt(maxInputBalanceExtra || 0)\n) {\n  return (\n    <SwapButton disabled>\n      Insufficient {extraInputCurrency?.symbol} Balance\n    </SwapButton>\n  );\n}\n\nconst handleApprove = (isExtra) => {\n  State.update({\n    approving: true,\n  });\n  const TokenContract = new ethers.Contract(\n    isExtra ? extraInputCurrency.address : inputCurrency.address,\n    [\n      {\n        constant: false,\n        inputs: [\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n          {\n            name: \"_value\",\n            type: \"uint256\",\n          },\n        ],\n        name: \"approve\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"bool\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.approve(\n    routerAddress,\n    ethers.utils.parseUnits(inputCurrencyAmount, inputCurrency.decimals)\n  )\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status, transactionHash } = res;\n        const params = isExtra\n          ? { isExtraApproved: status === 1 }\n          : { isApproved: status === 1 };\n        onMessage?.({\n          status: status === 1 ? 1 : 2,\n          open: true,\n          title: status === 1 ? \"Approved successed!\" : \"Approved failed!\",\n          hash: transactionHash,\n        });\n        State.update({\n          ...params,\n          approving: false,\n        });\n      });\n    })\n    .catch(() => {\n      State.update({\n        approving: false,\n      });\n      onMessage?.({\n        status: 2,\n        open: true,\n        title: \"Approved failed!\",\n      });\n    });\n};\n\nconst allowanceQs = `${inputCurrencyAmount}-${inputCurrency.address}-${actionType}`;\n\nif (allowanceQs !== state.allowanceQs) {\n  State.update({\n    allowanceQs,\n    loadAllowanceDone: false,\n  });\n  if (inputCurrency.address !== \"active\") {\n    getAllowance();\n  } else {\n    State.update({ isApproved: true, loadAllowanceDone: true });\n  }\n}\n\nif (!state.loadAllowanceDone) {\n  return (\n    <SwapButton disabled>\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    </SwapButton>\n  );\n}\n\nif (!state.isApproved || !state.isExtraApproved) {\n  return (\n    <Buttons>\n      {!state.isApproved && (\n        <SwapButton\n          onClick={() => {\n            handleApprove(false);\n          }}\n          disabled={state.approving}\n        >\n          {state.approving && (\n            <Widget\n              src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n              props={{\n                size: 16,\n              }}\n            />\n          )}\n          Approve {inputCurrency.symbol}\n        </SwapButton>\n      )}\n      {actionType === \"Redeem\" && !state.isExtraApproved && (\n        <SwapButton\n          onClick={() => {\n            handleApprove(true);\n          }}\n          disabled={state.approving}\n        >\n          {state.approving && (\n            <Widget\n              src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n              props={{\n                size: 16,\n              }}\n            />\n          )}\n          Approve {extraInputCurrency.symbol}\n        </SwapButton>\n      )}\n    </Buttons>\n  );\n}\n\nif (Big(outputCurrencyAmount || 0).lte(0)) {\n  return <SwapButton disabled>{actionType}</SwapButton>;\n}\n\nconst AccessKey = Storage.get(\n  \"AccessKey\",\n  \"guessme.near/widget/ZKEVMWarmUp.add-to-quest-card\"\n);\n\nfunction add_action(param_body) {\n  asyncFetch(\"/dapdap/api/action/add \", {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: AccessKey,\n    },\n    body: JSON.stringify(param_body),\n  });\n}\n\nfunction successCallback(tx, callback) {\n  tx.wait().then((res) => {\n    const { status, transactionHash } = res;\n    callback?.();\n    const uuid = Storage.get(\n      \"zkevm-warm-up-uuid\",\n      \"bluebiu.near/widget/ZKEVMWarmUp.generage-uuid\"\n    );\n    add_action({\n      action_title: `${actionType} ${inputCurrencyAmount} ${inputCurrency.symbol} on Pendle`,\n      action_type: actionType,\n      action_tokens: JSON.stringify([\n        `${inputCurrency.symbol}`,\n        `${outputCurrency.symbol}`,\n      ]),\n      action_amount: inputCurrencyAmount,\n      account_id: account,\n      account_info: uuid,\n      template: \"Pendle\",\n      action_status: status === 1 ? \"Success\" : \"Failed\",\n      tx_id: transactionHash,\n      action_network_id: \"Arbitrum\",\n    });\n    if (status === 1) {\n      onSuccess?.();\n    }\n    onMessage?.({\n      status: status === 1 ? 1 : 2,\n      open: true,\n      title: `${actionType} ${\n        status === 1 ? \"Mint Successfully!\" : \"Mint Failed!\"\n      }`,\n      hash: transactionHash,\n    });\n  });\n}\n\nreturn (\n  <>\n    {actionType === \"Swap\" && swapping && (\n      <Widget\n        src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeSwapAction\"\n        props={{\n          routerAddress,\n          swapping: swapping,\n          account,\n          tradeInfo,\n          market: market,\n          inputCurrency,\n          outputCurrency,\n          inputCurrencyAmount,\n          aggregatorTokenOut,\n          onSuccess: (res) => {\n            onMessage?.({\n              status: 3,\n              open: true,\n              title: \"Transaction Submitted!\",\n              text: `Swap ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}!`,\n              hash: res.hash,\n            });\n            successCallback(res, () => {\n              updateSwapping(false);\n            });\n          },\n          onError: (err) => {\n            updateSwapping(false);\n            onMessage?.({\n              status: 2,\n              open: true,\n              title: \"Swap Failed!\",\n              text: err.reason,\n            });\n          },\n        }}\n      />\n    )}\n    {actionType === \"Mint\" && swapping && (\n      <Widget\n        src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeMintAction\"\n        props={{\n          inputCurrencyAmount,\n          inputCurrency,\n          wethAddress,\n          outputCurrency,\n          account,\n          fee,\n          routerAddress,\n          swapping: swapping,\n          market,\n          onSuccess: (res) => {\n            onMessage?.({\n              status: 3,\n              open: true,\n              title: \"Transaction Submitted!\",\n              text: `Mint PT and YT from ${inputCurrencyAmount} ${inputCurrency.symbol}!`,\n              hash: res.hash,\n            });\n            successCallback(res, () => {\n              updateSwapping(false);\n            });\n          },\n          onError: (err) => {\n            updateSwapping(false);\n            onMessage?.({\n              status: 2,\n              open: true,\n              title: \"Mint Failed!\",\n              text: err.reason,\n            });\n          },\n        }}\n      />\n    )}\n    {actionType === \"Redeem\" && swapping && (\n      <Widget\n        src=\"bluebiu.near/widget/Arbitrum.Pendle.TradeRedeemAction\"\n        props={{\n          inputCurrencyAmount,\n          inputCurrency,\n          wethAddress,\n          outputCurrency,\n          account,\n          fee,\n          market,\n          routerAddress,\n          swapping: swapping,\n          onSuccess: (res) => {\n            onMessage?.({\n              status: 3,\n              open: true,\n              title: \"Transaction Submitted!\",\n              text: `Redeem ${inputCurrencyAmount} PT and ${inputCurrencyAmount} YT to ${outputCurrency.symbol}!`,\n              hash: res.hash,\n            });\n            successCallback(res, () => {\n              updateSwapping(false);\n            });\n          },\n          onError: (err) => {\n            updateSwapping(false);\n            onMessage?.({\n              status: 2,\n              open: true,\n              title: \"Redeem Failed!\",\n              text: err.reason,\n            });\n          },\n        }}\n      />\n    )}\n\n    <SwapButton\n      onClick={() => {\n        updateSwapping(true);\n      }}\n      disabled={swapping}\n    >\n      {swapping && (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      )}\n      {actionType}\n    </SwapButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.TradeSwapButton", "fact_widget_deployments_id": "174bb441b885deb57fe810aca7293f0b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}