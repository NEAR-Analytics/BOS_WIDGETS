{"tx_hash": "3mRWzPr7omtdShHcMUUGMuQcHcMJvchZdgt9ZzQPR3Vb", "action_id_social": "BWmgqi22dVhrnAhAYRaLpVTFRHeURbdNYGrsdGhJkenH-0-widget", "block_id": 111258705, "block_timestamp": "2024-01-25T05:46:49.206Z", "signer_id": "bluebiu.near", "widget_name": "PolygonZkevm.Swap.BalancerAmountOut", "source_code": "const QUOTER_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"path\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"quoteExactInput\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16[]\",\n        name: \"fees\",\n        type: \"uint16[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256[]\",\n        name: \"limits\",\n        type: \"int256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"batchSwap\",\n    outputs: [\n      {\n        internalType: \"int256[]\",\n        name: \"assetDeltas\",\n        type: \"int256[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  quoterAddress,\n  multicallAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  fees,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater || !prices) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const path = [\n    inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address,\n    outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address,\n  ];\n\n  const pools = [\n    [\n      [\n        \"0xa2036f0538221a77a3937f1379699f44945018d0\",\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\",\n      ],\n      \"0xc951aebfa361e9d0063355b9e68f5fa4599aa3d1000100000000000000000017\",\n    ],\n    [\n      [\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4\",\n      ],\n      \"0xa7f602cfaf75a566cb0ed110993ee81c27fa3f53000200000000000000000009\",\n    ],\n    [\n      [\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xC5015b9d9161Dca7e18e32f6f25C4aD850731Fd4\",\n        \"0x1E4a5963aBFD975d8c9021ce480b42188849D41d\",\n      ],\n      \"0xe8ca7400eb61d5bdfc3f8f2ea99e687e0a4dbf78000100000000000000000019\",\n    ],\n    [\n      [\n        \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n        \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\",\n      ],\n      \"0x53ddc1f1ef585b426c03674f278f8107f1524ade000200000000000000000012\",\n    ],\n  ];\n\n  const finalPool = pools\n    .filter(\n      (poolData) =>\n        poolData[0].includes(path[0].toLowerCase()) &&\n        poolData[0].includes(path[1].toLowerCase())\n    )\n    .map((poolData) => poolData[1]);\n\n  if (finalPool.length === 0) {\n    onLoad({\n      noPair: true,\n    });\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const Iface = new ethers.utils.Interface(QUOTER_ABI);\n\n  const getAmountOut = () => {\n    const pathBytes = \"0x\" + path.map((address) => address.substr(2)).join(\"\");\n    const encodedData = Iface.encodeFunctionData(\"quoteExactInput\", [\n      pathBytes,\n      amount,\n    ]);\n    Ethers.provider()\n      .call({\n        to: quoterAddress,\n        data: encodedData,\n      })\n      .then((res) => {\n        const data = Iface.decodeFunctionResult(\"quoteExactInput\", res);\n        getTransaction({ amountOut: data.amountOut });\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n        });\n      });\n  };\n\n  const getTransaction = (result) => {\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n\n    const _inputAddress =\n      inputCurrency.address === \"native\"\n        ? \"0x0000000000000000000000000000000000000000\"\n        : inputCurrency.address;\n    const _outputAddress =\n      outputCurrency.address === \"native\"\n        ? \"0x0000000000000000000000000000000000000000\"\n        : outputCurrency.address;\n    const assets = [_inputAddress, _outputAddress];\n    const funds = [account, false, account, false];\n\n    const swap_steps = [\n      {\n        poolId: finalPool[0],\n        assetIn: _inputAddress,\n        assetOut: _outputAddress,\n        amount,\n      },\n    ];\n\n    const token_indices = {};\n    for (let i = 0; i < assets.length; i++) {\n      token_indices[assets[i]] = i;\n    }\n    const swap_steps_struct = [];\n    for (const step of swap_steps) {\n      const swap_step_struct = [\n        step[\"poolId\"],\n        token_indices[step[\"assetIn\"]],\n        token_indices[step[\"assetOut\"]],\n        step[\"amount\"],\n        \"0x\",\n      ];\n      swap_steps_struct.push(swap_step_struct);\n    }\n    const _amountOut = Big(result.amountOut)\n      .mul(1 - (slippage || 0.05))\n      .toFixed(0);\n\n    const token_limits = [amount, _amountOut];\n\n    const params = [\n      0,\n      swap_steps_struct,\n      assets,\n      funds,\n      token_limits,\n      deadline.toFixed(),\n    ];\n    const options = {\n      value: inputCurrency.isNative ? amount : \"0\",\n    };\n\n    const RouterContract = new ethers.Contract(\n      routerAddress,\n      ROUTER_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    const _amount = Big(\n      ethers.utils.formatUnits(result.amountOut, outputCurrency.decimals)\n    );\n\n    let priceImpact = null;\n\n    if (prices) {\n      const isReverse = Number(path[0]) > Number(path[1]);\n\n      const poolPrice = Big(\n        prices[isReverse ? inputCurrency.symbol : outputCurrency.symbol] || 0\n      ).div(\n        prices[!isReverse ? inputCurrency.symbol : outputCurrency.symbol] || 0\n      );\n\n      const amountoutPrice = !isReverse\n        ? Big(inputCurrencyAmount).div(_amount)\n        : Big(_amount).div(inputCurrencyAmount);\n\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n\n    const returnData = {\n      outputCurrencyAmount: Big(_amount).gt(0.01)\n        ? Big(_amount).toPrecision(10)\n        : Big(_amount).toFixed(10),\n      priceImpact,\n      noPair: false,\n    };\n\n    const getTx = (gas) => {\n      RouterContract.populateTransaction\n        .batchSwap(...params, { ...options, gasLimit: gas })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            gas,\n          });\n        });\n    };\n\n    RouterContract.estimateGas\n      .batchSwap(...params, options)\n      .then((gas) => {\n        getTx(gas);\n      })\n      .catch((err) => {\n        getTx();\n      });\n  };\n\n  getAmountOut();\n}, [updater, prices]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/PolygonZkevm.Swap.BalancerAmountOut", "fact_widget_deployments_id": "8e9c928e83f76edd678fd58bcb255e66", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}