{"tx_hash": "4hiYYpAdeL2Won9bYEwtVM2FfSqeiw14gDm2VsP6Vh5p", "action_id_social": "7aea7oM22L5C21TXs366CEpiwR56V53BS6NrHyDSpDdP-0-widget", "block_id": 115010053, "block_timestamp": "2024-03-19T08:01:59.499Z", "signer_id": "bluebiu.near", "widget_name": "PolygonZkevm.Swap.BalancerAmountOut", "source_code": "const ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          { internalType: \"bytes32\", name: \"poolId\", type: \"bytes32\" },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n          { internalType: \"bytes\", name: \"userData\", type: \"bytes\" },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          { internalType: \"address\", name: \"sender\", type: \"address\" },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"queryBatchSwap\",\n    outputs: [{ internalType: \"int256[]\", name: \"\", type: \"int256[]\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IVault.SwapKind\",\n        name: \"kind\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"poolId\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetInIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assetOutIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"userData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IVault.BatchSwapStep[]\",\n        name: \"swaps\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"contract IAsset[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256[]\",\n        name: \"limits\",\n        type: \"int256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"batchSwap\",\n    outputs: [\n      {\n        internalType: \"int256[]\",\n        name: \"assetDeltas\",\n        type: \"int256[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"bytes32\", name: \"poolId\", type: \"bytes32\" },\n          {\n            internalType: \"enum IVault.SwapKind\",\n            name: \"kind\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IAsset\",\n            name: \"assetOut\",\n            type: \"address\",\n          },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n          { internalType: \"bytes\", name: \"userData\", type: \"bytes\" },\n        ],\n        internalType: \"struct IVault.SingleSwap\",\n        name: \"singleSwap\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          { internalType: \"address\", name: \"sender\", type: \"address\" },\n          {\n            internalType: \"bool\",\n            name: \"fromInternalBalance\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"toInternalBalance\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IVault.FundManagement\",\n        name: \"funds\",\n        type: \"tuple\",\n      },\n      { internalType: \"uint256\", name: \"limit\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"swap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountCalculated\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  fees,\n  prices,\n  pools,\n  poolsGraph,\n} = props;\n\nuseEffect(() => {\n  if (!updater || !prices) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const path = [\n    inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address,\n    outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address,\n  ];\n\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    ROUTER_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const finalPool = pools\n    ?.filter(\n      (poolData) =>\n        poolData[0].includes(path[0].toLowerCase()) &&\n        poolData[0].includes(path[1].toLowerCase())\n    )\n    .map((poolData) => poolData[1]);\n\n  if (finalPool.length === 0) {\n    onLoad({\n      noPair: true,\n      outputCurrencyAmount: \"\",\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const _inputAddress =\n    inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n  const _outputAddress =\n    outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\n  const assets = [_inputAddress, _outputAddress];\n  const funds = [account, false, account, false];\n\n  const swap_steps = [\n    {\n      poolId: finalPool[0],\n      assetIn: _inputAddress,\n      assetOut: _outputAddress,\n      amount,\n    },\n  ];\n\n  const token_indices = {};\n  for (let i = 0; i < assets.length; i++) {\n    token_indices[assets[i]] = i;\n  }\n  const swap_steps_struct = [];\n  for (const step of swap_steps) {\n    const swap_step_struct = [\n      step[\"poolId\"],\n      token_indices[step[\"assetIn\"]],\n      token_indices[step[\"assetOut\"]],\n      step[\"amount\"],\n      \"0x\",\n    ];\n    swap_steps_struct.push(swap_step_struct);\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const options = {\n    value: inputCurrency.isNative ? amount : \"0\",\n  };\n  const getAmountOut = () => {\n    RouterContract.callStatic\n      .queryBatchSwap(0, swap_steps_struct, assets, funds)\n      .then((res) => {\n        const _amountOut = res[1]?.abs() || Big(0);\n        if (_amountOut.gt(0)) {\n          getTransaction({ amountOut: _amountOut });\n        } else {\n          onLoad({\n            noPair: true,\n            outputCurrencyAmount: \"\",\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n          outputCurrencyAmount: \"\",\n        });\n      });\n  };\n\n  const getTransaction = (result) => {\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n\n    const _amountOut = Big(result.amountOut)\n      .mul(1 - (slippage || 0.05))\n      .toFixed(0);\n\n    const params = [\n      [finalPool[0], 0, _inputAddress, _outputAddress, amount, \"0x\"],\n      funds,\n      _amountOut,\n      deadline.toFixed(),\n    ];\n\n    const _amount = Big(\n      ethers.utils.formatUnits(result.amountOut, outputCurrency.decimals)\n    );\n\n    let priceImpact = null;\n\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(_amount).div(inputCurrencyAmount);\n\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(_amount).gt(0.01)\n        ? Big(_amount).toPrecision(10)\n        : Big(_amount).toFixed(10),\n      priceImpact,\n      noPair: false,\n    };\n    const getTx = (gas) => {\n      RouterContract.populateTransaction\n        .swap(...params, { ...options, gasLimit: gas })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            gas,\n          });\n        });\n    };\n    RouterContract.estimateGas\n      .swap(...params, options)\n      .then((gas) => {\n        getTx(gas);\n      })\n      .catch((err) => {\n        getTx();\n      });\n  };\n\n  getAmountOut();\n}, [updater, prices]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/PolygonZkevm.Swap.BalancerAmountOut", "fact_widget_deployments_id": "e304641809abd13820673cf2eef1342d", "inserted_timestamp": "2024-03-19T09:34:29.241Z", "modified_timestamp": "2024-03-19T09:34:29.241Z", "__row_index": 2}