{"tx_hash": "2tGTohwGu3shNsvtL4tqqrQ1mb8ehYrJ6csEasRXET81", "action_id_social": "FTz5JMDATzLuUiqG29L6XsrcjCgGP6y6j2o7nWBjrmgN-0-widget", "block_id": 108923922, "block_timestamp": "2023-12-27T10:50:49.211Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Swap.HandlerV2", "source_code": "const {\n  routerAddress,\n  wethAddress,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrencyAmount,\n  outputCurrency,\n  account,\n  onSuccess,\n  onError,\n  swapping,\n  title,\n  gas,\n  isEstimateGas,\n  onLoadEstimateGas,\n} = props;\n\nconst handleCamelotSwap = (type) => {\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    [\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"address\", name: \"referrer\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"address\", name: \"referrer\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactETHForTokensSupportingFeeOnTransferTokens\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n      },\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"address\", name: \"referrer\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactTokensForETHSupportingFeeOnTransferTokens\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  if (type === 0) {\n    const params = [\n      ethers.utils.parseUnits(\n        Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n        inputCurrency.decimals\n      ),\n      ethers.utils.parseUnits(\n        Big(outputCurrencyAmount).toFixed(outputCurrency.decimals),\n        outputCurrency.decimals\n      ),\n      [inputCurrency.address, outputCurrency.address],\n      account,\n      \"0x0000000000000000000000000000000000000000\",\n      Math.ceil(Date.now() / 1000) + 60,\n    ];\n    if (isEstimateGas) {\n      RouterContract.estimateGas\n        .swapExactTokensForTokensSupportingFeeOnTransferTokens(...params)\n        .then((_gas) => {\n          onLoadEstimateGas(_gas.toString());\n        });\n    } else {\n      RouterContract.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        ...params,\n        {\n          gasLimit: gas,\n        }\n      )\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError?.(err);\n        });\n    }\n  }\n  if (type === 1) {\n    const params = [\n      ethers.utils.parseUnits(\n        Big(outputCurrencyAmount).toFixed(outputCurrencyAmount.decimals),\n        outputCurrency.decimals\n      ),\n      [wethAddress, outputCurrency.address],\n      account,\n      \"0x0000000000000000000000000000000000000000\",\n      Math.ceil(Date.now() / 1000) + 60,\n    ];\n    if (isEstimateGas) {\n      RouterContract.estimateGas\n        .swapExactETHForTokensSupportingFeeOnTransferTokens(...params, {\n          value: ethers.utils.parseEther(inputCurrencyAmount),\n        })\n        .then((_gas) => {\n          onLoadEstimateGas(_gas.toString());\n        })\n        .catch((err) => {});\n    } else {\n      RouterContract.swapExactETHForTokensSupportingFeeOnTransferTokens(\n        ...params,\n        {\n          gasLimit: gas || 50000,\n          value: ethers.utils.parseEther(inputCurrencyAmount),\n        }\n      )\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError?.(err);\n        });\n    }\n  }\n  if (type === 2) {\n    const params = [\n      ethers.utils.parseUnits(\n        Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n        inputCurrency.decimals\n      ),\n      ethers.utils.parseUnits(\n        Big(outputCurrencyAmount).toFixed(outputCurrencyAmount.decimals),\n        outputCurrency.decimals\n      ),\n      [inputCurrency.address, wethAddress],\n      account,\n      \"0x0000000000000000000000000000000000000000\",\n      Math.ceil(Date.now() / 1000) + 60,\n    ];\n    if (isEstimateGas) {\n      RouterContract.estimateGas\n        .swapExactTokensForETHSupportingFeeOnTransferTokens(...params)\n        .then((_gas) => {\n          onLoadEstimateGas(_gas.toString());\n        });\n    } else {\n      RouterContract.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        ...params,\n        {\n          gasLimit: gas,\n        }\n      )\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          console.log(err);\n          onError?.(err);\n        });\n    }\n  }\n};\n\nconst handleSwap = (type) => {\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"amountOut\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountInMax\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"path\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        name: \"swapExactTokensForTokens\",\n        outputs: [\n          {\n            internalType: \"uint256[]\",\n            name: \"amounts\",\n            type: \"uint256[]\",\n          },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactETHForTokens\",\n        outputs: [\n          { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n      },\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactTokensForETH\",\n        outputs: [\n          { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  if (type === 0) {\n    const params = [\n      ethers.utils.parseUnits(\n        Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n        inputCurrency.decimals\n      ),\n      \"0\",\n      [inputCurrency.address, outputCurrency.address],\n      account,\n      Math.ceil(Date.now() / 1000) + 60,\n    ];\n    if (isEstimateGas) {\n      RouterContract.estimateGas\n        .swapExactTokensForTokens(...params)\n        .then((_gas) => {\n          onLoadEstimateGas(_gas.toString());\n        });\n    } else {\n      RouterContract.swapExactTokensForTokens(...params, { gasLimit: gas })\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    }\n    return \"\";\n  }\n  if (type === 1) {\n    const params = [\n      \"0\",\n      [wethAddress, outputCurrency.address],\n      account,\n      Math.ceil(Date.now() / 1000) + 60,\n    ];\n    if (isEstimateGas) {\n      RouterContract.estimateGas\n        .swapExactETHForTokens(...params, {\n          value: ethers.utils.parseEther(Big(inputCurrencyAmount).toFixed(18)),\n        })\n        .then((_gas) => {\n          onLoadEstimateGas(_gas.toString());\n        })\n        .catch((err) => {});\n    } else {\n      RouterContract.swapExactETHForTokens(...params, {\n        gasLimit: gas,\n        value: ethers.utils.parseEther(Big(inputCurrencyAmount).toFixed(18)),\n      })\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    }\n\n    return \"\";\n  }\n  if (type === 2) {\n    const params = [\n      ethers.utils.parseUnits(\n        Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n        inputCurrency.decimals\n      ),\n      \"0\",\n      [inputCurrency.address, wethAddress],\n      account,\n      Math.ceil(Date.now() / 1000) + 60,\n    ];\n    if (isEstimateGas) {\n      RouterContract.estimateGas\n        .swapExactTokensForETH(...params)\n        .then((_gas) => {\n          onLoadEstimateGas(_gas.toString());\n        })\n        .catch((err) => {});\n    } else {\n      RouterContract.swapExactTokensForETH(...params, {\n        gasLimit: gas,\n      })\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    }\n  }\n};\n\nuseEffect(() => {\n  if (\n    Big(outputCurrencyAmount || 0).eq(0) ||\n    Big(inputCurrencyAmount || 0).eq(0) ||\n    (!swapping && !isEstimateGas)\n  )\n    return;\n  const type =\n    inputCurrency.address === \"native\"\n      ? 1\n      : outputCurrency.address === \"native\"\n      ? 2\n      : 0;\n  if (title === \"Camelot\") {\n    handleCamelotSwap(type);\n  } else {\n    handleSwap(type);\n  }\n}, [swapping, isEstimateGas, outputCurrencyAmount, inputCurrencyAmount]);\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Swap.HandlerV2", "fact_widget_deployments_id": "a504894adc6b953b544b802e42cbf3a6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}