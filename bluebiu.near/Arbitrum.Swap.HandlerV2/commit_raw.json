{"tx_hash": "8dceU7h7qUH9wG6ZjD4AWnRvGSTren5PVd44sXV3Adcq", "action_id_social": "5APs3WmbRXyyr5Xk6tExw9Pz2udR36R1LQ3BdpBBdqmK-0-widget", "block_id": 108464392, "block_timestamp": "2023-12-21T07:39:55.845Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Swap.HandlerV2", "source_code": "const {\n  routerAddress,\n  wethAddress,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrencyAmount,\n  outputCurrency,\n  account,\n  onSuccess,\n  onError,\n  swapping,\n  title,\n} = props;\n\nif (!swapping) return \"\";\n\nconst handleCamelotSwap = (type) => {\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    [\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"address\", name: \"referrer\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"address\", name: \"referrer\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactETHForTokensSupportingFeeOnTransferTokens\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n      },\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMin\",\n            type: \"uint256\",\n          },\n          { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"address\", name: \"referrer\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n        ],\n        name: \"swapExactTokensForETHSupportingFeeOnTransferTokens\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  if (type === 0) {\n    RouterContract.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n      ethers.utils.parseUnits(\n        Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n        inputCurrency.decimals\n      ),\n      ethers.utils.parseUnits(\n        Big(outputCurrencyAmount).toFixed(outputCurrency.decimals),\n        outputCurrency.decimals\n      ),\n      [inputCurrency.address, outputCurrency.address],\n      account,\n      \"0x0000000000000000000000000000000000000000\",\n      Math.ceil(Date.now() / 1000) + 60,\n      { gasLimit: 5000000 }\n    )\n      .then((tx) => {\n        onSuccess(tx);\n      })\n      .catch((err) => {\n        onError?.(err);\n      });\n    return \"\";\n  }\n  if (type === 1) {\n    RouterContract.swapExactETHForTokensSupportingFeeOnTransferTokens(\n      ethers.utils.parseUnits(\n        Big(outputCurrencyAmount).toFixed(outputCurrencyAmount.decimals),\n        outputCurrency.decimals\n      ),\n      [wethAddress, outputCurrency.address],\n      account,\n      \"0x0000000000000000000000000000000000000000\",\n      Math.ceil(Date.now() / 1000) + 60,\n      { gasLimit: 5000000, value: ethers.utils.parseEther(inputCurrencyAmount) }\n    )\n      .then((tx) => {\n        onSuccess(tx);\n      })\n      .catch((err) => {\n        onError?.(err);\n      });\n    return \"\";\n  }\n  if (type === 2) {\n    RouterContract.swapExactTokensForETHSupportingFeeOnTransferTokens(\n      ethers.utils.parseUnits(\n        Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n        inputCurrency.decimals\n      ),\n      ethers.utils.parseUnits(\n        Big(outputCurrencyAmount).toFixed(outputCurrencyAmount.decimals),\n        outputCurrency.decimals\n      ),\n      [inputCurrency.address, wethAddress],\n      account,\n      \"0x0000000000000000000000000000000000000000\",\n      Math.ceil(Date.now() / 1000) + 60,\n      { gasLimit: 5000000 }\n    )\n      .then((tx) => {\n        onSuccess(tx);\n      })\n      .catch((err) => {\n        console.log(err);\n        onError?.(err);\n      });\n  }\n};\n\nconst type =\n  inputCurrency.address === \"native\"\n    ? 1\n    : outputCurrency.address === \"native\"\n    ? 2\n    : 0;\n\nif (title === \"Camelot\") {\n  handleCamelotSwap(type);\n  return \"\";\n}\nconst RouterContract = new ethers.Contract(\n  routerAddress,\n  [\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountOut\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amountInMax\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address[]\",\n          name: \"path\",\n          type: \"address[]\",\n        },\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"deadline\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"swapExactTokensForTokens\",\n      outputs: [\n        {\n          internalType: \"uint256[]\",\n          name: \"amounts\",\n          type: \"uint256[]\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountOutMin\",\n          type: \"uint256\",\n        },\n        { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"swapExactETHForTokens\",\n      outputs: [\n        { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n      ],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        {\n          internalType: \"uint256\",\n          name: \"amountOutMin\",\n          type: \"uint256\",\n        },\n        { internalType: \"address[]\", name: \"path\", type: \"address[]\" },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"swapExactTokensForETH\",\n      outputs: [\n        { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\nif (type === 0) {\n  const params = [\n    ethers.utils.parseUnits(\n      Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n      inputCurrency.decimals\n    ),\n    \"0\",\n    [inputCurrency.address, outputCurrency.address],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n  ];\n  RouterContract.estimateGas\n    .swapExactTokensForTokens(...params)\n    .then((gas) => {\n      RouterContract.swapExactTokensForTokens(...params, { gasLimit: gas })\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n  return \"\";\n}\nif (type === 1) {\n  const params = [\n    \"0\",\n    [wethAddress, outputCurrency.address],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n  ];\n  RouterContract.estimateGas\n    .swapExactETHForTokens(...params, {\n      value: ethers.utils.parseEther(Big(inputCurrencyAmount).toFixed(18)),\n    })\n    .then((gas) => {\n      RouterContract.swapExactETHForTokens(...params, {\n        gasLimit: gas,\n        value: ethers.utils.parseEther(Big(inputCurrencyAmount).toFixed(18)),\n      })\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n  return \"\";\n}\nif (type === 2) {\n  const params = [\n    ethers.utils.parseUnits(\n      Big(inputCurrencyAmount).toFixed(inputCurrency.decimals),\n      inputCurrency.decimals\n    ),\n    \"0\",\n    [inputCurrency.address, wethAddress],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n  ];\n  RouterContract.estimateGas\n    .swapExactTokensForETH(...params)\n    .then((gas) => {\n      RouterContract.swapExactTokensForETH(...params, {\n        gasLimit: gas,\n      })\n        .then((tx) => {\n          onSuccess(tx);\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Swap.HandlerV2", "fact_widget_deployments_id": "db96e0412a41c4ddfec98f5621f79be8", "inserted_timestamp": "2023-12-21T09:53:44.132Z", "modified_timestamp": "2023-12-21T10:23:25.605Z", "__row_index": 0}