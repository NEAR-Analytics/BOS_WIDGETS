{"tx_hash": "DNQ1rqA4mLv5eGzu3MmTqYNbzuPja2QRe73RoURy7pvq", "action_id_social": "iDsixPuR64mUG2Px4GLsx3QgHhUdRqHP4BBxgPgNC9p-0-widget", "block_id": 108461664, "block_timestamp": "2023-12-21T06:47:01.376Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Lending.RadiantActionHandler", "source_code": "const abi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n      { internalType: \"uint16\", name: \"referralCode\", type: \"uint16\" },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n    ],\n    name: \"withdraw\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"interestRateMode\", type: \"uint256\" },\n      { internalType: \"uint16\", name: \"referralCode\", type: \"uint16\" },\n      { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n    ],\n    name: \"borrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"rateMode\", type: \"uint256\" },\n      { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n    ],\n    name: \"repay\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"bool\", name: \"useAsCollateral\", type: \"bool\" },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst wethGateWayAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"weth\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n    ],\n    name: \"authorizeLendingPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interesRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"borrowETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"emergencyEtherTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"emergencyTokenTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWETHAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repayETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst { market, actionText, amount, loading, onSuccess, onError, account } =\n  props;\n\nconst isETH = market.underlyingAsset.address === market.wethAddress;\n\nconst wethGateway = market.wethGateway;\n\nconst lendingPoolAddress = market.lendingPoolAddress;\n\nif (!loading) return \"\";\n\nconst addressTo = isETH\n  ? market.lendingPoolAddress\n  : market.underlyingAsset.address;\n\nconst contract = new ethers.Contract(\n  isETH ? wethGateway : lendingPoolAddress,\n  isETH ? wethGateWayAbi : abi,\n  Ethers.provider().getSigner()\n);\n\nconst parsedAmount = ethers.utils.parseUnits(\n  amount,\n  market.underlyingToken.decimals\n);\n\nconsole.log(\"parsedAmount: \", parsedAmount.toString());\n\nconst options = {\n  value:\n    isETH && (actionText === \"Deposit\" || actionText === \"Repay\")\n      ? parsedAmount\n      : \"0\",\n  gasLimit: 4000000,\n};\n\nconst deposit = () => {\n  const method = isETH ? \"depositETH\" : \"deposit\";\n\n  const inputs = isETH\n    ? [addressTo, account, 0]\n    : [addressTo, parsedAmount, account, 0];\n\n  contract.estimateGas[method](...inputs, options)\n    .then((gas) => {\n      contract[method](...inputs, { ...options, gasLimit: gas })\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              onSuccess(res);\n            })\n            .catch((err) => {\n              onError(tx);\n            });\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\n\nconst withdraw = () => {\n  const method = isETH ? \"withdrawETH\" : \"withdraw\";\n\n  contract.estimateGas[method](addressTo, parsedAmount, account, options)\n    .then((gas) => {\n      contract[method](addressTo, parsedAmount, account, {\n        ...options,\n        gasLimit: gas,\n      })\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              onSuccess(res);\n            })\n            .catch((err) => {\n              onError(tx);\n            });\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\n\nconst borrow = () => {\n  if (isETH) return checkDebtETHAllowanceAndBorrow();\n\n  const method = \"borrow\";\n\n  const inputs = [addressTo, parsedAmount, 2, 0, account];\n\n  contract.estimateGas[method](...inputs, options)\n    .then((gas) => {\n      contract[method](...inputs, {\n        ...options,\n        gasLimit: gas,\n      })\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              onSuccess(res);\n            })\n            .catch((err) => {\n              onError(tx);\n            });\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\n\nconst borrowETH = () => {\n  const method = \"borrowETH\";\n\n  const inputs = [addressTo, parsedAmount, 2, 0];\n\n  contract.estimateGas[method](...inputs, options)\n    .then((gas) => {\n      contract[method](...inputs, {\n        ...options,\n        gasLimit: gas,\n      })\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              onSuccess(res);\n            })\n            .catch((err) => {\n              onError(tx);\n            });\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\nconst checkDebtETHAllowanceAndBorrow = () => {\n  const debtTokenAbi = [\n    {\n      inputs: [\n        { internalType: \"address\", name: \"delegatee\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      ],\n      name: \"approveDelegation\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        { internalType: \"address\", name: \"fromUser\", type: \"address\" },\n        { internalType: \"address\", name: \"toUser\", type: \"address\" },\n      ],\n      name: \"borrowAllowance\",\n      outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ];\n\n  const debtTokenAddres = market.variableDebtTokenAddress;\n\n  const deptTokenContract = new ethers.Contract(\n    debtTokenAddres,\n    debtTokenAbi,\n    Ethers.provider().getSigner()\n  );\n\n  return deptTokenContract\n    .borrowAllowance(account, market.wethGateway)\n    .then((res) => {\n      console.log(\"res111: \", res);\n      if (Big(res.toString()).lt(parsedAmount)) {\n        return deptTokenContract\n          .approveDelegation(market.wethGateway, parsedAmount)\n          .then((tx) => {\n            return tx.wait().then(() => {\n              return borrowETH();\n            });\n          });\n      } else {\n        return borrowETH();\n      }\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\n\nconst repay = () => {\n  const method = isETH ? \"repayETH\" : \"repay\";\n  contract.estimateGas[method](addressTo, parsedAmount, 2, account, options)\n    .then((gas) => {\n      contract[method](addressTo, parsedAmount, 2, account, {\n        ...options,\n        gasLimit: gas,\n      })\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              onSuccess(res);\n            })\n            .catch((err) => {\n              onError(tx);\n            });\n        })\n        .catch((err) => {\n          onError(err);\n        });\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\n\nconst main = () => {\n  if (actionText === \"Deposit\") {\n    deposit();\n  }\n  if (actionText === \"Withdraw\") {\n    withdraw();\n  }\n  if (actionText === \"Borrow\") {\n    borrow();\n  }\n  if (actionText === \"Repay\") {\n    repay();\n  }\n};\n\nmain();\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Lending.RadiantActionHandler", "fact_widget_deployments_id": "3c696b325d8ce3591270c702b02c9372", "inserted_timestamp": "2023-12-21T08:51:42.403Z", "modified_timestamp": "2023-12-21T09:22:13.738Z", "__row_index": 0}