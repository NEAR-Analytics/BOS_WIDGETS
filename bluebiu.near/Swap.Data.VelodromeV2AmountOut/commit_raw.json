{"tx_hash": "AVSw4bUfpythCMCChe12ufhedRgJYPMSdKWUE9gmg71i", "action_id_social": "36QqGB4Rvzfms9gsRydsmDspPhGeVnUSGHKZJRLKhRau-0-widget", "block_id": 117561912, "block_timestamp": "2024-04-25T02:20:10.269Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.VelodromeV2AmountOut", "source_code": "const ROUTER_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"tokenA\", type: \"address\" },\n      { internalType: \"address\", name: \"tokenB\", type: \"address\" },\n      { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n      { internalType: \"address\", name: \"_factory\", type: \"address\" },\n    ],\n    name: \"poolFor\",\n    outputs: [{ internalType: \"address\", name: \"pool\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"from\", type: \"address\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n          { internalType: \"address\", name: \"factory\", type: \"address\" },\n        ],\n        internalType: \"struct IRouter.Route[]\",\n        name: \"routes\",\n        type: \"tuple[]\",\n      },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"swapExactTokensForTokens\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"from\", type: \"address\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n          { internalType: \"address\", name: \"factory\", type: \"address\" },\n        ],\n        internalType: \"struct IRouter.Route[]\",\n        name: \"routes\",\n        type: \"tuple[]\",\n      },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"swapExactETHForTokens\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"from\", type: \"address\" },\n          { internalType: \"address\", name: \"to\", type: \"address\" },\n          { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n          { internalType: \"address\", name: \"factory\", type: \"address\" },\n        ],\n        internalType: \"struct IRouter.Route[]\",\n        name: \"routes\",\n        type: \"tuple[]\",\n      },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"swapExactTokensForETH\",\n    outputs: [\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst POOL_ABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n    ],\n    name: \"getAmountOut\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getReserves\",\n    outputs: [\n      { internalType: \"uint112\", name: \"_reserve0\", type: \"uint112\" },\n      { internalType: \"uint112\", name: \"_reserve1\", type: \"uint112\" },\n      {\n        internalType: \"uint32\",\n        name: \"_blockTimestampLast\",\n        type: \"uint32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  factoryAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    const WethContract = new ethers.Contract(\n      wethAddress,\n      [\n        {\n          constant: false,\n          inputs: [],\n          name: \"deposit\",\n          outputs: [],\n          payable: true,\n          stateMutability: \"payable\",\n          type: \"function\",\n        },\n        {\n          constant: false,\n          inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n          name: \"withdraw\",\n          outputs: [],\n          payable: false,\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    let params = [];\n    let options = {};\n    let method = \"\";\n    if (wrapType === 1) {\n      method = \"deposit\";\n      options.value = ethers.utils.parseEther(\n        Big(inputCurrencyAmount).toFixed(18).toString()\n      );\n    } else {\n      method = \"withdraw\";\n      params = [\n        ethers.utils.parseEther(\n          Big(inputCurrencyAmount).toFixed(18).toString()\n        ),\n      ];\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n      routes: null,\n      routerStr: \"\",\n      gas: \"\",\n    };\n    const getTx = (_gas) => {\n      WethContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas || 4000000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      WethContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          console.log(err);\n          getTx();\n        });\n    };\n    estimateGas();\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.isNative ? wethAddress : inputCurrency.address,\n    outputCurrency.isNative ? wethAddress : outputCurrency.address,\n  ];\n\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    ROUTER_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const getPoolAddress = () => {\n    RouterContract.poolFor(path[0], path[1], false, factoryAddress)\n      .then((res) => {\n        if (res) {\n          getAmountOut(res);\n        } else {\n          onLoad({\n            noPair: true,\n            inputCurrency,\n            inputCurrencyAmount,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n          inputCurrency,\n          inputCurrencyAmount,\n          outputCurrency,\n          outputCurrencyAmount: \"\",\n        });\n      });\n  };\n\n  const getAmountOut = (poolAddress) => {\n    const PoolContract = new ethers.Contract(\n      poolAddress,\n      POOL_ABI,\n      Ethers.provider().getSigner()\n    );\n    PoolContract.getAmountOut(amount, path[0])\n      .then((res) => {\n        const _amount = Big(\n          ethers.utils.formatUnits(res, outputCurrency.decimals)\n        );\n        if (_amount.gt(0)) {\n          getReverse({\n            amountoutDesimals: _amount.toString(),\n            amountOut: res,\n            poolAddress: poolAddress,\n          });\n        } else {\n          onLoad({\n            noPair: true,\n            inputCurrency,\n            inputCurrencyAmount,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n          inputCurrency,\n          inputCurrencyAmount,\n          outputCurrency,\n          outputCurrencyAmount: \"\",\n        });\n      });\n  };\n  const getReverse = ({ amountOut, amountoutDesimals, poolAddress }) => {\n    const PoolContract = new ethers.Contract(\n      poolAddress,\n      POOL_ABI,\n      Ethers.provider().getSigner()\n    );\n    PoolContract.getReserves()\n      .then((res) => {\n        const isReverse = Number(path[0]) > Number(path[1]);\n\n        const token0 = Big(\n          ethers.utils.formatUnits(\n            res[0],\n            isReverse ? outputCurrency.decimals : inputCurrency.decimals\n          )\n        );\n        const token1 = Big(\n          ethers.utils.formatUnits(\n            res[1],\n            isReverse ? inputCurrency.decimals : outputCurrency.decimals\n          )\n        );\n        const poolPrice = token1.div(token0);\n\n        const amountoutPrice = isReverse\n          ? Big(inputCurrencyAmount).div(amountoutDesimals)\n          : Big(amountoutDesimals).div(inputCurrencyAmount);\n\n        const priceImpact = poolPrice\n          .minus(amountoutPrice)\n          .div(poolPrice)\n          .mul(100)\n          .toString();\n        getTransaction({\n          priceImpact,\n          amountoutDesimals,\n          amountOut,\n        });\n      })\n      .catch((err) => {\n        getTransaction({\n          amountoutDesimals,\n          amountOut,\n        });\n      });\n  };\n\n  const getTransaction = ({ amountOut, amountoutDesimals, priceImpact }) => {\n    let method = \"\";\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n    const _amountOut = Big(amountOut)\n      .mul(1 - (slippage || 0.005))\n      .toFixed(0);\n    const options = {};\n    const params = [\n      _amountOut,\n      [\n        {\n          from: path[0],\n          to: path[1],\n          factory: factoryAddress,\n        },\n      ],\n      account,\n      deadline,\n    ];\n    if (inputCurrency.isNative) {\n      method = \"swapExactETHForTokens\";\n      options.value = amount;\n    } else if (outputCurrency.isNative) {\n      method = \"swapExactTokensForETH\";\n      params.unshift(amount);\n    } else {\n      method = \"swapExactTokensForTokens\";\n      params.unshift(amount);\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(amountoutDesimals).gt(0.01)\n        ? Big(amountoutDesimals).toPrecision(10)\n        : Big(amountoutDesimals).toFixed(10),\n      priceImpact,\n    };\n\n    const getTx = (_gas, gasPrice) => {\n      RouterContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas ? _gas : 4000000,\n        gasPrice,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n          });\n        });\n    };\n\n    const getGasPrice = (_gas) => {\n      Ethers.provider()\n        .getGasPrice()\n        .then((gasPrice) => {\n          getTx(_gas, gasPrice);\n        })\n        .catch((err) => {\n          getTx(_gas, null);\n        });\n    };\n    const estimateGas = () => {\n      RouterContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getGasPrice(_gas);\n        })\n        .catch((err) => {\n          getGasPrice(null);\n        });\n    };\n\n    estimateGas();\n  };\n  getPoolAddress();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.VelodromeV2AmountOut", "fact_widget_deployments_id": "288feca0612d0bba734387c0159594f5", "inserted_timestamp": "2024-04-25T04:04:00.243Z", "modified_timestamp": "2024-04-25T04:04:00.243Z", "__row_index": 6}