{"tx_hash": "Eg255vdkMXqE3brDyrUUMcvNFZKK438S1VR2cPHaJn4g", "action_id_social": "B5rFc8KjuTVwSWN7i9thYeh6gTzsNQoNQAjq5NTQcRSs-0-widget", "block_id": 119033649, "block_timestamp": "2024-05-16T08:44:49.696Z", "signer_id": "bluebiu.near", "widget_name": "Mode.BridgeAuthority.HandlerClaim", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n  currentChainId,\n  mainnet,\n  toast,\n  txs,\n} = props;\n\nconst {\n  getETHWithdrawalsFromOp,\n  handleWithdrawalProve,\n  checkOutputFinalized,\n  handleWithdrawalClaim,\n  checkMessageOutput,\n} = VM.require('bluebiu.near/widget/Mode.BridgeAuthority.Util');\n\nconst Transactions = styled.div`\n  /* display: flex;\n  justify-content: space-between;\n  align-items: flex-start; */\n  color: var(--label-color);\n  gap: 20px;\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 18px;\n    padding: 5px 0;\n    color: rgb(151, 154, 190);\n    font-weight: 500;\n  }\n  .list {\n    flex: 1;\n    .tx-line {\n      &:not(:last-child) {\n        border-bottom: 1px solid #343838;\n      } \n    }\n    .claim-line {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px 0;\n      \n    }\n\n  }\n  .fresh {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n  .chain-token-status {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    padding-top: 20px;\n    .chain-token {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      img {\n        height: 22px;\n      }\n    }\n    .btn {\n        cursor: pointer;\n        background-color: #EBF479;\n        color: #000;\n        width: 90px;\n        height: 32px;\n        line-height: 16px;\n        text-align: center;\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n    .complete {\n      color: #979ABE;\n    }\n    .proccessing {\n      color: #00D1FF;\n    }\n  }\n  .time {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n    padding-bottom: 20px;\n    margin-top: 10px;\n    \n    .format-time-link {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      a {\n        color: #64B5FF;\n      }\n    }\n  }\n`\n\nconst RefreshText = styled.div`\n  text-decoration: underline;\n  font-size: 14px;\n  font-weight: 400;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ArrowIcon = styled.div`\n  transform: rotate(180deg);\n  cursor: pointer;\n`;\n\n\nState.init({\n  isFold: false,\n  isLoadingTx: {},\n  proccessSum: 0,\n  txsUpdated: [],\n  filteredTxs: [],\n  isLoading: false,\n})\n\nconst signer = Ethers.provider().getSigner()\nfunction switchChain() {\n  if (currentChainId !== mainnet.id) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(mainnet.id).toString(16)}` },\n    ]);\n  }\n}\n\nlet toastId\n\nfunction handleProve(tx) {\n  if (currentChainId !== mainnet.id) {\n    switchChain()\n    return\n  }\n\n  toastId = toast?.loading({\n    title: `Prove Withdrawal From ETH`,\n  });\n\n\n\n  handleWithdrawalProve(tx.proveData, () => {\n    toast?.dismiss(toastId);\n    delete state.isLoadingTx[tx.hash]\n    // getAllStatus(txs)\n    State.update({\n      isLoadingTx: state.isLoadingTx\n    })\n    txs[tx.hash].status = 4\n    Storage.privateSet(\"mode_claim_txs\", txs);\n    getAllStatus(txs)\n    toast?.success({\n      title: \"Prove Withdrawal Successfully!\",\n      text: `Prove Withdrawal Successfully`,\n      tx: tx,\n      chainId: currentChainId,\n    });\n  }, (e) => {\n    console.log(err)\n    toast?.fail({\n      title: \"Prove Withdrawal Failed!\",\n      text: `Prove Withdrawal Failed`,\n      tx: '',\n      chainId: currentChainId,\n    });\n    delete state.isLoadingTx[tx.hash]\n    State.update({\n      isLoadingTx: state.isLoadingTx\n    })\n  })\n\n}\n\nfunction handleCliaim(tx) {\n  if (currentChainId !== mainnet.id) {\n    switchChain()\n    return\n  }\n\n  toastId = toast?.loading({\n    title: `Prove Withdrawal From ETH`,\n  });\n\n  handleWithdrawalClaim(tx.proveData, () => {\n    toast?.dismiss(toastId);\n    delete state.isLoadingTx[tx.hash]\n    // getAllStatus(txs)\n    State.update({\n      isLoadingTx: state.isLoadingTx\n    })\n    txs[tx.hash].status = 2\n    Storage.privateSet(\"mode_claim_txs\", txs);\n    getAllStatus(txs)\n\n    toast?.success({\n      title: \"Cliam Successfully!\",\n      text: `Cliam Successfully`,\n      tx: tx,\n      chainId: currentChainId,\n    });\n  }, (e) => {\n    console.log(err)\n    toast?.fail({\n      title: \"Cliam Failed!\",\n      text: `Cliam Failed`,\n      tx: '',\n      chainId: currentChainId,\n    });\n    delete state.isLoadingTx[tx.hash]\n    State.update({\n      isLoadingTx: state.isLoadingTx\n    })\n  })\n\n}\n\nfunction getAllStatus(txs) {\n  if (txs && !state.isLoading) {\n    State.update({\n      isLoading: true\n    })\n\n    const pArray = []\n    let needFold = true\n    pArray = Object.keys(txs).map(key => {\n      return new Promise((resolve, reject) => {\n        const currentTx = txs[key]\n        if (currentTx.status === 2) {\n          resolve(currentTx)\n          return\n        }\n\n        if (!currentTx.status) {\n          currentTx.status = 1\n        }\n\n        if (key === '0x3f56616a5ef981a38e28425b48b4779cd2a5952a0ef21609018eeeb1aa202d6f') {\n          currentTx.status = 1\n        }\n\n\n        if (currentTx.fromChainId === 34443) {\n            getETHWithdrawalsFromOp(account, currentTx.symbol === 'ETH' ? 1 : 2, currentTx.hash, (proveData) => {\n              // console.log('proveData:', proveData)\n              \n              currentTx.proveData = proveData\n              if (currentTx.status === 1) { \n                checkMessageOutput(proveData.blockNumber, (l2OutputIndex) => {\n                  if (l2OutputIndex) {\n                    currentTx.status = 3 // need prove\n                  } \n                  resolve(currentTx)\n                })\n              }\n\n              if (currentTx.status === 4) { // wating 7 days \n                checkOutputFinalized(proveData, (isFinalized) => {\n                  if (isFinalized) {\n                    currentTx.status = 5 // can cliam\n                  }\n                  resolve(currentTx)\n                }, (err) => {\n                  console.log(err)\n                })\n              } else {\n                resolve(currentTx)\n              }\n            })\n        } else {\n          currentTx.status = 2\n          resolve(currentTx)\n        }\n\n      })\n    })\n\n    Promise.all(pArray).then((res) => {\n      const txList = Object.values(txs)\n      if (txList.length) {\n        Storage.privateSet(\"mode_claim_txs\", txs);\n      }\n\n      const proccessSum = txList.filter(item => item.status !== 2).length\n\n      State.update({\n        txsUpdated: txList,\n        isFold: needFold,\n        proccessSum,\n        isLoading: false\n      })\n    })\n  }\n}\n\nuseEffect(() => {\n  getAllStatus(txs)\n}, [txs])\n\nuseEffect(() => {\n  const inter = setInterval(() => {\n    // getAllStatus(txs)\n  }, 30000)\n\n  return () => {\n    clearInterval(inter)\n  }\n}, [txs])\n\n\nreturn <Transactions>\n  <div className=\"header\">\n    <div className=\"title\">\n      <span>Transaction History</span>\n      <span>{state.proccessSum} Processing</span>\n    </div>\n    <div className=\"fresh\">\n      <RefreshText onClick={() => {\n        getAllStatus(txs)\n      }}>\n        {state.isLoading && (\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n            props={{\n              size: 16,\n            }}\n          />\n        )}\n        Refresh\n      </RefreshText>\n      <ArrowIcon onClick={() => {\n        State.update({\n          isFold: !state.isFold\n        })\n      }}>\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Swap.ArrowIcon\"\n          props={{ size: 12 }}\n        />\n      </ArrowIcon>\n    </div>\n  </div>\n  {\n    state.isFold ? <div className=\"list\">\n      {\n        (state.txsUpdated || []).map(tx => {\n\n          return <div className=\"tx-line\" key={tx.hash}>\n            <div className=\"chain-token-status\">\n              <div className=\"chain-token\">\n                <img src={tx.fromLogo} />\n                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                <img src={tx.toLogo} />\n                <img src={tx.tokenLogo} />\n                <div>{tx.amount} {tx.symbol}</div>\n                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                <img src={tx.tokenLogo} />\n                <div>{tx.amount} {tx.symbol}</div>\n              </div>\n              <div>\n                {\n                  tx.status === 1 && <div className=\"processing\">Processing</div>\n                }\n                {\n                  tx.status === 2 && <div className=\"complete\">Complete</div>\n                }\n                {\n                  tx.status === 3 && <div className=\"btn\" onClick={() => {\n                    if (state.isLoadingTx[tx.hash]) {\n                      return\n                    }\n                    handleProve(tx)\n                    state.isLoadingTx[tx.hash] = true\n                    State.update({\n                      isLoadingTx: state.isLoadingTx\n                    })\n                  }}>\n                    {state.isLoadingTx[tx.hash] && (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    )}\n                    Prove\n                  </div>\n                }\n                {\n                  tx.status === 4 && <div className=\"processing\">Wait for 7 days</div>\n                }\n                {\n                  tx.status === 5 && <div className=\"btn\" onClick={() => {\n                    if (state.isLoadingTx[tx.hash]) {\n                      return\n                    }\n                    handleWithdrawalClaim(tx)\n                    state.isLoadingTx[tx.hash] = true\n                    State.update({\n                      isLoadingTx: state.isLoadingTx\n                    })\n                  }}>\n                    {state.isLoadingTx[tx.hash] && (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    )}\n                    Prove\n                  </div>\n                }\n\n              </div>\n            </div>\n            <div className=\"time\">\n              <div className=\"format-time-link\">\n                <div className=\"format-time\">\n                  <Widget\n                    src=\"bluebiu.near/widget/Base.Bridge.FormateTxDate\"\n                    props={{\n                      date: tx.time,\n                    }}\n                  />\n                </div>\n                <a target=\"_blank\" className=\"tx-link\" href={tx.link}>Tx</a>\n              </div>\n              {\n                tx.status !== 2 ? <div>~7 day</div> : null\n              }\n            </div>\n          </div>\n        })\n      }\n    </div> : null\n  }\n\n  <div style={{ display: 'none' }}>\n    <Widget\n      src=\"bluebiu.near/widget/Mode.BridgeAuthority.Util\"\n    />\n  </div>\n</Transactions>;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Mode.BridgeAuthority.HandlerClaim", "fact_widget_deployments_id": "0db0ccb2c644eedaee9a610c17225099", "inserted_timestamp": "2024-05-16T10:49:18.810Z", "modified_timestamp": "2024-05-16T10:49:18.810Z", "__row_index": 4}