{"tx_hash": "3eGTCZaC8f7pAk5BzSApZrxbsRwBQuAnSBGhJwtRW9G8", "action_id_social": "C9wuL74TB2pYNoQUmHw2Z1bjWom76HKvMZ7sW3jgr1vw-0-widget", "block_id": 101383672, "block_timestamp": "2023-09-18T06:30:12.007Z", "signer_id": "bluebiu.near", "widget_name": "MetaPool.StakeInput", "source_code": "const Container = styled.div`\n  margin-top: 20px;\n  .error {\n    color: #ff61d3;\n  }\n`;\nconst Label = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  color: #787da1;\n`;\nconst InputWrapper = styled.div`\n  display: flex;\n  border-bottom: 1px solid #787da1;\n  padding: 10px 0px;\n  width: 100%;\n  @media (max-width: 768px) {\n    position: relative;\n  }\n`;\nconst Input = styled.input`\n  padding-left: 8px;\n  color: #fff;\n  outline: none;\n  background-color: transparent;\n  border: none;\n  font-size: 26px;\n  font-weight: 500;\n  height: 30px;\n  width: 100%;\n\n  &::placeholder {\n    color: #787da1;\n  }\n`;\nconst Token = styled.div`\n  flex-shrink: 0;\n  display: flex;\n  @media (max-width: 768px) {\n    position: absolute;\n    right: 0;\n  }\n`;\nconst TokenIcon = styled.img`\n  width: 26px;\n  height: 26px;\n  border-radius: 50%;\n  margin-right: 4px;\n`;\nconst TokenSymbol = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  color: #787da1;\n`;\nconst ValueWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  font-weight: 500;\n  color: #787da1;\n  margin-top: 8px;\n`;\nconst BalanceWrapper = styled.div`\n  text-align: right;\n  cursor: pointer;\n`;\nconst Balance = styled.span`\n  text-decoration: underline;\n`;\nconst ErrorTips = styled.div`\n  font-size: 16px;\n  margin-top: 4px;\n`;\n\nconst {\n  price,\n  amount,\n  balance,\n  token,\n  stakeType,\n  lpToken,\n  isNear,\n  errorTips,\n  balanceLoading,\n  onAmountChange,\n} = props;\n\nconst formatValue = () => {\n  if (!price) return \"-\";\n  const value = Big(price).mul(amount || 0);\n  if (value.lt(0.01)) return value.toPrecision(1);\n  return value.toFixed(2);\n};\n\nconst handleInputChange = (value) => {\n  if (isNaN(Number(value))) return;\n  let error = \"\";\n  if (value && Big(value).gt(0)) {\n    if (Big(value).lt(token.symbol === \"ETH\" ? \"0.01\" : \"1\")) {\n      error = `The minimum amount is ${token.symbol === \"ETH\" ? \"0.01\" : \"1\"} ${\n        stakeType === 0 ? token.symbol : lpToken.symbol\n      }.`;\n    }\n    if (Number(balance) && Big(value).gt(balance)) {\n      error = `You don\u2019t have enough ${\n        stakeType === 0 ? token.symbol : lpToken.symbol\n      }.`;\n    }\n  }\n\n  props.onAmountChange?.(value, error);\n};\n\nreturn (\n  <Container>\n    <Label>Enter Amount</Label>\n    <InputWrapper>\n      <Input\n        className={errorTips && \"error\"}\n        value={amount}\n        placeholder=\"0\"\n        onChange={(ev) => {\n          handleInputChange(ev.target.value);\n        }}\n      />\n      {stakeType === 0 ? (\n        <Token>\n          <TokenIcon src={token.icon} />\n          <TokenSymbol>{token.symbol}</TokenSymbol>\n        </Token>\n      ) : (\n        <Token>\n          <TokenIcon src={lpToken.icon} />\n          <TokenSymbol>{lpToken.symbol}</TokenSymbol>\n        </Token>\n      )}\n    </InputWrapper>\n    <ValueWrapper>\n      <div>\u2248 ${formatValue()}</div>\n      <BalanceWrapper\n        className={errorTips && \"error\"}\n        onClick={() => {\n          if (!balance) return;\n          handleInputChange(\n            stakeType === 0 &&\n              token.symbol === \"NEAR\" &&\n              Big(balance || 0).gt(0.1)\n              ? Big(balance || 0)\n                  .minus(0.1)\n                  .toString()\n              : balance\n          );\n        }}\n      >\n        Balance:{\" \"}\n        <Balance>{balanceLoading ? \"Loading\" : balance || \"0\"}</Balance>\n        {errorTips && <ErrorTips>{errorTips}</ErrorTips>}\n      </BalanceWrapper>\n    </ValueWrapper>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/MetaPool.StakeInput", "fact_widget_deployments_id": "fa7a19f35ddd070a4b6cd9b84ba97c0d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}