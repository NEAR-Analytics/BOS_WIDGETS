{"tx_hash": "3hBUePSqjRqC7QdWdCniGXGXrkx4qgW14WXbDJfGUa7L", "action_id_social": "7THx8ruFevx7eK2hf2FkmjBwzwpY6ZNP65mShGVbPov-0-widget", "block_id": 117522325, "block_timestamp": "2024-04-24T12:54:35.772Z", "signer_id": "bluebiu.near", "widget_name": "Base.Bridge.Swap", "source_code": "const Flex = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst Chains = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n`;\nconst ChainWrapper = styled.div`\n  &:first-child {\n    width: 60%;\n  }\n  &:nth-child(2) {\n    width: 40%;\n  }\n  \n`;\nconst Label = styled.div`\n  font-family: Gantari;\n  font-size: 18px;\n  font-weight: 500;\n  color: #979abe;\n  &.spe {\n    color: var(--spe-text-color);\n  }\n`;\nconst ChainLogo = styled.img`\n  width: 44px;\n  height: 44px;\n  border-radius: 10px;\n`;\nconst ChainName = styled.div`\n  font-family: Gantari;\n  font-size: 18px;\n  font-weight: 500;\n  color: var(--chain-name-color);\n`;\nconst ExchangeIcon = styled.div`\n  color: #979abe;\n  transform: rotate(90deg);\n  margin-right: 30px;\n  margin-top: 20px;\n`;\nconst Chain = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  margin-top: 20px;\n`;\nconst Receive = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n`;\nconst AmountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: right;\n`;\nconst Amount = styled.div`\n  font-size: 18px;\n  font-weight: 500;\n  color: var(--chain-name-color);\n`;\nconst Value = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  color: var(--thirdary-text-color);\n`;\nconst Send = styled.div`\n  position: relative;\n`;\nconst ErrorTips = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #ff61d3;\n`;\n\nconst {\n  chain,\n  mainnet,\n  tokens,\n  amountOutFn,\n  chainId,\n  handlerSwap,\n  handleStargateTx,\n  showNetwrokDialog,\n  account,\n  prices,\n} = props;\n\nconst reverseCurrency = (_currency) => {\n  const [_address, _decimals, _poolId] = [\n    _currency.address,\n    _currency.decimals,\n    _currency.poolId,\n  ];\n  _currency.address = _currency.targetAddress;\n  _currency.decimals = _currency.targetDecimals;\n  _currency.poolId = _currency.targetPoolId;\n  _currency.targetAddress = _address;\n  _currency.targetDecimals = _decimals;\n  _currency.targetPoolId = _poolId;\n\n  return _currency;\n};\n\nconst checkGas = (gasCost) => {\n  if (!account || !gasCost) return;\n  const provider = Ethers.provider();\n  State.update({ checkingGas: true });\n  provider.getBalance(account).then((rawBalance) => {\n    const balance = ethers.utils.formatUnits(rawBalance._hex, 18);\n    const _balance = state.currency.isNative\n      ? Big(balance || 0).minus(state.amount || 0)\n      : Big(balance || 0);\n\n    State.update({\n      isGasEnough: !_balance.lt(gasCost || 0),\n      checkingGas: false,\n    });\n  });\n};\n\nuseEffect(() => {\n  if (Big(state.amount || 0).gt(state.maxInputBalance || 0)) {\n    State.update({\n      errorTips: \"Invalid amount! Amount should be less than token balance\",\n    });\n    return;\n  }\n  State.update({\n    errorTips: \"\",\n  });\n}, [state.maxInputBalance, state.amount]);\n\nuseEffect(() => {\n  const chains = chainId === chain.id ? [chain, mainnet] : [mainnet, chain];\n  const params = {\n    from: chains[0],\n    to: chains[1],\n    amount: \"1\",\n    currency:\n      chainId === mainnet.id\n        ? cached_token || reverseCurrency(tokens[0])\n        : cached_token || tokens[0],\n    updateInputTokenBalance: true,\n    loading: true,\n  };\n  if (chainId === mainnet.id) {\n    params.tokens = tokens.map((token) => reverseCurrency(token));\n  }\n  State.update(params);\n}, [chainId]);\n\nuseEffect(() => {\n  function debounce(fn, wait) {\n    let timer;\n    return () => {\n      clearTimeout(timer);\n      timer = setTimeout(fn, wait);\n    };\n  }\n\n  const getTrade = () => {\n    State.update({\n      loading: true,\n      isGasEnough: true,\n    });\n  };\n\n  const debouncedGetTrade = debounce(getTrade, 500);\n\n  State.update({\n    debouncedGetTrade,\n  });\n}, []);\n\nreturn (\n  <>\n    <Chains\n      onClick={() => {\n        State.update({ displayCurrencySelect: false });\n      }}\n    >\n      <ChainWrapper >\n        <Label className=\"spe\">Bridge from</Label>\n        <Flex>\n          <Chain>\n            {state.from.logo && <ChainLogo src={state.from.logo} />}\n            <ChainName>{state.from.name}</ChainName>\n          </Chain>\n          <ExchangeIcon\n            onClick={() => {\n              showNetwrokDialog(state.to.id);\n            }}\n          >\n            <Widget src=\"bluebiu.near/widget/Arbitrum.Swap.ExchangeIcon\" />\n          </ExchangeIcon>\n        </Flex>\n      </ChainWrapper>\n      <ChainWrapper>\n        <Label className=\"spe\">To</Label>\n        <Chain>\n          {state.to.logo && <ChainLogo src={state.to.logo} />}\n          <ChainName>{state.to.name}</ChainName>\n        </Chain>\n      </ChainWrapper>\n    </Chains>\n    <Send>\n      <Label>Send</Label>\n      <Widget\n        src=\"bluebiu.near/widget/Base.Bridge.Input\"\n        props={{\n          currency: state.currency,\n          amount: state.amount,\n          updateTokenBalance: state.updateInputTokenBalance,\n          account,\n          price: prices[state.currency.symbol],\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: !state.displayCurrencySelect,\n              selectedTokenAddress: state.currency.address,\n            });\n          },\n          onUpdateCurrencyBalance: (balance) => {\n            State.update({\n              maxInputBalance: ethers.utils.formatUnits(\n                balance,\n                state.currency.decimals\n              ),\n              updateInputTokenBalance: false,\n            });\n          },\n          onAmountChange: (val) => {\n            const params = {\n              amount: val,\n            };\n            if (val && Number(val) && state.currency.address)\n              state.debouncedGetTrade();\n            State.update(params);\n          },\n        }}\n      />\n      <ErrorTips>{state.errorTips}</ErrorTips>\n      <Widget\n        src=\"bluebiu.near/widget/Base.Bridge.TokenList\"\n        props={{\n          display: state.displayCurrencySelect,\n          selectedTokenAddress: state.selectedTokenAddress,\n          tokens: state.tokens || tokens || [],\n          onClose: () => {\n            State.update({\n              displayCurrencySelect: false,\n            });\n          },\n          onSelect: (currency) => {\n            const params = {\n              displayCurrencySelect: false,\n              currency,\n              updateInputTokenBalance: true,\n            };\n            if (state.amount) state.debouncedGetTrade();\n            State.update(params);\n          },\n        }}\n      />\n    </Send>\n    <Receive>\n      <Label>Receive</Label>\n      <AmountWrapper>\n        <Amount>\n          {!state.received\n            ? \"-\"\n            : Big(state.received || 0).lt(0.01)\n            ? \"<0.01\"\n            : Big(state.received).toFixed(2, 0)}{\" \"}\n          {state.currency?.symbol}\n        </Amount>\n        <Value>\n          \u2248 $\n          <Widget\n            src=\"bluebiu.near/widget/Base.Bridge.Value\"\n            props={{\n              price: prices[state.currency.symbol],\n              amount: state.received,\n            }}\n          />\n        </Value>\n      </AmountWrapper>\n    </Receive>\n    <Widget\n      src=\"bluebiu.near/widget/Base.Bridge.Button\"\n      props={{\n        disabled: state.errorTips,\n        amount: state.amount,\n        maxInputBalance: state.maxInputBalance,\n        currency: state.currency,\n        target: {\n          id: state.to?.id,\n          dstId: state.to?.dstId,\n          address: state.currency?.targetAddress,\n          poolId: state.currency?.targetPoolId,\n          name: state.to?.name,\n        },\n        from: state.from,\n        gasCost: state.gasCost,\n        isGasEnough: state.isGasEnough,\n        handlerSwap,\n        addAction: props.addAction,\n        toast: props.toast,\n        loading: state.loading || state.checkingGas,\n        account,\n        quote: state.quote,\n        onSuccess: (hash) => {\n          handleStargateTx({\n            hash,\n            amount: state.amount,\n            price: prices[state.currency.symbol],\n            from: state.from,\n            to: state.to,\n            currency: state.currency,\n          });\n          State.update({\n            updateInputTokenBalance: true,\n          });\n        },\n      }}\n    />\n    <Widget\n      src={amountOutFn}\n      props={{\n        loading: state.loading,\n        amount: state.amount,\n        target: {\n          dstId: state.to?.dstId,\n          address: state.currency?.targetAddress,\n        },\n        source: {\n          decimals: state.currency.decimals,\n          address: state.currency?.address,\n        },\n        currency: state.currency,\n        from: state.from,\n        to: state.to,\n        routerAddress: state.from?.routerAddress,\n        onLoad: (data) => {\n          console.log(\"data:\", data);\n          if (typeof data.amount === 'undefined' || data.amount === state.amount) {\n            State.update({\n              loading: false,\n              ...data,\n            });\n          }\n          checkGas(data.gasCost);\n        },\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.Bridge.Swap", "fact_widget_deployments_id": "9801fae61b1dfd9f8ba35465d23d9bb4", "inserted_timestamp": "2024-04-24T14:41:50.718Z", "modified_timestamp": "2024-04-24T14:41:50.718Z", "__row_index": 16}