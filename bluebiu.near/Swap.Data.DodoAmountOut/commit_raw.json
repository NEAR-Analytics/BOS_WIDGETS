{"tx_hash": "4hiYYpAdeL2Won9bYEwtVM2FfSqeiw14gDm2VsP6Vh5p", "action_id_social": "7aea7oM22L5C21TXs366CEpiwR56V53BS6NrHyDSpDdP-0-widget", "block_id": 115010053, "block_timestamp": "2024-03-19T08:01:59.499Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.DodoAmountOut", "source_code": "const {\n  updater,\n  routerAddress,\n  DVMFactory,\n  DPPFactory,\n  DSPFactory,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  multicall,\n  multicallAddress,\n  rpc,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.address === \"native\"\n      ? \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n      : inputCurrency.address,\n    outputCurrency.address === \"native\"\n      ? \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\"\n      : outputCurrency.address,\n  ];\n  const getAmountsOut = () => {\n    const params = encodeURIComponent(\n      `chainId=${inputCurrency.chainId}&fromAmount=${amount}&fromTokenAddress=${\n        path[0]\n      }&toTokenAddress=${path[1]}&rpc=${rpc}&slippage=${\n        slippage || 0.5\n      }&userAddr=${account}`\n    );\n    asyncFetch(`/dapdap/dodo/swap?params=${params}`)\n      .then((res) => {\n        const data = res.body?.data?.data;\n        if (data?.resAmount) {\n          const wallet = Ethers.provider().getSigner();\n          const returnData = {\n            inputCurrency,\n            inputCurrencyAmount,\n            outputCurrency,\n            outputCurrencyAmount: data.resAmount,\n            priceImpact: data.priceImpact,\n            noPair: false,\n            routerAddress: data.targetApproveAddr,\n          };\n          wallet\n            .estimateGas({\n              to: data.to,\n              data: data.data,\n              value: inputCurrency.isNative ? amount : 0,\n            })\n            .then((gasRes) => {\n              const tx = {\n                from: account,\n                to: data.to,\n                value: inputCurrency.isNative ? amount : 0,\n                data: data.data,\n                gasLimit: gasRes,\n              };\n              onLoad({\n                ...returnData,\n                gas: gasRes,\n                unsignedTx: tx,\n              });\n            })\n            .catch((err) => {\n              console.log(\"err\");\n              onLoad(returnData);\n            });\n        } else {\n          onLoad({\n            outputCurrencyAmount: \"\",\n            noPair: true,\n          });\n        }\n      })\n      .catch((err) => {\n        onLoad({\n          outputCurrencyAmount: \"\",\n          noPair: true,\n        });\n      });\n  };\n\n  getAmountsOut();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.DodoAmountOut", "fact_widget_deployments_id": "34c59130f508b4be3b8fbc80f0f92855", "inserted_timestamp": "2024-03-19T09:34:29.241Z", "modified_timestamp": "2024-03-19T09:34:29.241Z", "__row_index": 3}