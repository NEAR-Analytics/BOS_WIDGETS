{"tx_hash": "8YAsitY8wNNwDikYfmBa6VEyUDKEjU2jdn7xFTyEQjQb", "action_id_social": "22WAzQNKo6zXSXurHZt4fQSenp7HrzMT25AY2uy1TWuc-0-widget", "block_id": 104308560, "block_timestamp": "2023-10-27T10:29:37.154Z", "signer_id": "bluebiu.near", "widget_name": "MetaPool.StakeEth", "source_code": "const Button = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: rgba(51, 44, 75, 1);\n  background-color: #c7ff18;\n  border-radius: 6px;\n  width: 80px;\n  height: 36px;\n  line-height: 36px;\n  text-align: center;\n  flex-shrink: 0;\n  margin-left: 10px;\n  cursor: pointer;\n`;\nconst StakeWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0px 20px 20px;\n  }\n`;\n\nconst ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst ethAccount = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst { chain, liquidAddress, mpethPrice, ethApy, token, lpToken, chainId } =\n  props;\nState.init({\n  stakeType: 0, // 0 for stake, 1 for fastunstake, 2 for delayed stake\n  stakable: false,\n  amount: \"\",\n  errorTips: \"\",\n  withdrawalsStartTime: 0,\n  balanceLoading: false,\n  amountOut: \"\",\n  updateStakeBalance: true,\n});\n\n// handle chainId for eth\n\nif (\n  chain === \"ETH\" &&\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  ethAccount\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nconst fetchContractData = () => {\n  const resp = fetch(\"https://eth-metapool.narwallets.com/metrics_front\");\n  if (!resp || !resp.body) return;\n  const { stakingData, withdrawData } = resp.body;\n\n  State.update({\n    contractData: {\n      stakingData: stakingData,\n      withdrawalsStartTime:\n        (withdrawData?.withdrawalsStartEpoch || 0) * 7 * 24 * 60 * 60 * 1000 +\n        withdrawData?.startTimestamp * 1000,\n    },\n  });\n};\n\nconst fetchEthPrice = () => {\n  const resp = fetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\"\n  );\n  const ethUsdPrice = resp?.body?.ethereum.usd;\n  if (ethUsdPrice && !isNaN(ethUsdPrice)) {\n    State.update({ ethUsdPrice: ethUsdPrice });\n  }\n};\nconst getBalance = () => {\n  if (!ethAccount) return;\n  Ethers.provider()\n    .getBalance(ethAccount)\n    .then((_balance) => {\n      const balance = ethers.utils.formatEther(_balance._hex);\n      State.update({\n        balanceLoading: false,\n        balance: Big(balance || 0)?.eq(0) ? \"0\" : Big(balance).toFixed(4, 0),\n      });\n    })\n    .catch((err) => {\n      State.update({\n        balanceLoading: false,\n        balance: \"0\",\n      });\n    });\n};\nconst getStakedBalance = () => {\n  if (!ethAccount) return;\n  const Erc20Contract = new ethers.Contract(\n    lpToken.address,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n  Erc20Contract.balanceOf(ethAccount)\n    .then((_balance) => {\n      const balance = ethers.utils.formatEther(_balance._hex);\n      State.update({\n        balanceLoading: false,\n        stakedBalance: Big(balance || 0)?.eq(0)\n          ? \"0\"\n          : Big(balance).toFixed(4, 0),\n      });\n    })\n    .catch(() => {\n      State.update({\n        balanceLoading: false,\n        stakedBalance: \"0\",\n      });\n    });\n};\nconst getAmountOut = () => {\n  const LiquidContract = new ethers.Contract(\n    liquidAddress,\n    [\n      {\n        inputs: [\n          { internalType: \"uint256\", name: \"_amountIn\", type: \"uint256\" },\n        ],\n        name: \"getAmountOut\",\n        outputs: [\n          { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"feeAmount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  LiquidContract.getAmountOut(\n    ethers.utils.parseEther(state.amount).toString()\n  ).then((_amountOut) => {\n    State.update({\n      amountOut: Big(ethers.utils.formatEther(_amountOut[0]))\n        .mul(0.995)\n        .toFixed(5),\n    });\n  });\n};\nconst getRedeemAmountOut = () => {\n  const LiquidContract = new ethers.Contract(\n    liquidAddress,\n    [\n      {\n        inputs: [{ internalType: \"uint256\", name: \"shares\", type: \"uint256\" }],\n        name: \"previewRedeem\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  LiquidContract.previewRedeem(\n    ethers.utils.parseEther(state.amount).toString()\n  ).then((_amountOut) => {\n    State.update({\n      amountOut: Big(ethers.utils.formatEther(_amountOut))\n        .mul(0.995)\n        .toFixed(5),\n    });\n  });\n};\n\nif (state.ethUsdPrice === undefined) {\n  fetchEthPrice();\n}\nif (!state.contractData) {\n  fetchContractData();\n}\nif (!state.balance) {\n  getBalance();\n}\n\nconst utils = {\n  formatGetValue: (amount) => {\n    if (!amount || parseFloat(amount) <= 0 || !mpethPrice) {\n      State.update({\n        amountOut: 0,\n      });\n      return;\n    }\n    if (state.stakeType === 0) {\n      State.update({\n        amountOut: (amount / mpethPrice).toFixed(5),\n      });\n      return;\n    }\n    if (state.stakeType === 1) {\n      getAmountOut();\n      return;\n    }\n    if (state.stakeType === 2) {\n      getRedeemAmountOut();\n    }\n  },\n  formatWithdrawalsTime: () => {\n    if (!state.contractData.withdrawalsStartTime) return \"\";\n    const monthsStr = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const date = new Date(state.contractData.withdrawalsStartTime);\n    const monthStr = monthsStr[date.getMonth()];\n    const day = date.getDate();\n    let dayStr = \"\";\n    const molValue = day % 10;\n    switch (molValue) {\n      case 1:\n        dayStr = day + \"st\";\n        break;\n      case 2:\n        dayStr = day + \"nd\";\n        break;\n      case 3:\n        dayStr = day + \"rd\";\n        break;\n      default:\n        dayStr = day + \"th\";\n    }\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    return `${monthStr} ${dayStr}, ${hour < 10 ? \"0\" + hour : hour}:${\n      minute < 10 ? \"0\" + minute : minute\n    }`;\n  },\n};\n\nconst showTips = () => {\n  if (state.stakeType === 0) return false;\n  if (!state.stakedBalance) return true;\n  if (\n    [1, 2].includes(state.stakeType) &&\n    state.contractData.withdrawalsStartTime &&\n    state.contractData.withdrawalsStartTime > Date.now()\n  )\n    return true;\n  return false;\n};\n\nconst renderButton = () => {\n  if (state.chainId !== chainId || !ethAccount) {\n    return (\n      <Widget\n        src=\"bluebiu.near/widget/MetaPool.ConnectButton\"\n        props={{\n          isWrongNetwork: state.chainId !== chainId,\n          chainId: chainId,\n          account: ethAccount,\n          chainName: \"Ethereum\",\n        }}\n      />\n    );\n  }\n  return (\n    <Widget\n      src=\"bluebiu.near/widget/MetaPool.StakeEthButton\"\n      props={{\n        disabled: !state.stakable,\n        amount: state.amount,\n        ethAccount,\n        lpToken,\n        liquidAddress,\n        stakeType: state.stakeType,\n        minAmountOut: state.amountOut,\n        onSuccess: () => {\n          if (state.stakeType === 0) {\n            getBalance();\n          } else {\n            getStakedBalance();\n          }\n          State.update({\n            amount: \"\",\n            errorTips: \"\",\n            amountOut: \"\",\n            updateStakeBalance: true,\n          });\n        },\n      }}\n    />\n  );\n};\n\nreturn (\n  <>\n    <Widget\n      src=\"bluebiu.near/widget/MetaPool.StakeEthDetails\"\n      props={{\n        ethUsdPrice: state.ethUsdPrice,\n        stakingData: state.contractData.stakingData,\n        abi: ABI,\n        address: lpToken.address,\n      }}\n    />\n    <Widget\n      src=\"bluebiu.near/widget/MetaPool.Switcher\"\n      props={{\n        type: state.stakeType,\n        onChange: (stakeType) => {\n          if (stakeType === 0) {\n            getBalance();\n          } else {\n            getStakedBalance();\n          }\n          State.update({\n            stakeType,\n            amount: \"\",\n            errorTips: \"\",\n            amountOut: \"\",\n          });\n        },\n      }}\n    />\n\n    <StakeWrapper>\n      {showTips() ? (\n        <div className=\"mt_20\">\n          <Widget\n            src=\"bluebiu.near/widget/MetaPool.Alert\"\n            props={{\n              text: (\n                <span>\n                  The promotional launch period is a great opportunity to earn\n                  up to {ethApy}% APY, but keep in mind that your tokens will be\n                  locked until{\" \"}\n                  <span className=\"fw_700\">\n                    {utils.formatWithdrawalsTime()}\n                  </span>\n                  . After that, you'll be able to unstake them and withdraw your\n                  earnings.\n                </span>\n              ),\n            }}\n          />\n        </div>\n      ) : (\n        <>\n          {state.stakeType === 2 && (\n            <div className=\"mt_20\">\n              <Widget\n                src=\"bluebiu.near/widget/MetaPool.Alert\"\n                props={{\n                  text: `Delayed unstake takes up to 21 days to complete.`,\n                  button: (\n                    <Button\n                      onClick={() => {\n                        State.update({\n                          stakeType: 1,\n                          amount: \"\",\n                          amountOut: \"\",\n                          errorTips: \"\",\n                        });\n                      }}\n                    >\n                      Try fast\n                    </Button>\n                  ),\n                }}\n              />\n            </div>\n          )}\n          <Widget\n            src=\"bluebiu.near/widget/MetaPool.StakeInput\"\n            props={{\n              price: state.ethUsdPrice,\n              amount: state.amount,\n              errorTips: state.errorTips,\n              balance: state.stakeType ? state.stakedBalance : state.balance,\n              balanceLoading: state.balanceLoading,\n              stakeType: state.stakeType,\n              token,\n              lpToken,\n              onAmountChange: (amount, errorTips) => {\n                const balance = state.stakeType\n                  ? state.stakedBalance\n                  : state.balance;\n                State.update({\n                  amount,\n                  errorTips,\n                  stakable:\n                    Number(amount) &&\n                    !isNaN(Number(balance)) &&\n                    !Big(balance).lt(amount) &&\n                    !Big(amount).lt(0.01),\n                });\n                utils.formatGetValue(amount);\n              },\n            }}\n          />\n          <Widget\n            src=\"bluebiu.near/widget/MetaPool.StakeResult\"\n            props={{\n              chain,\n              lpToken,\n              token,\n              stakeType: state.stakeType,\n              value: state.amountOut,\n            }}\n          />\n          {state.stakeType === 1 && (\n            <div className=\"mt_20\">\n              <Widget\n                src=\"bluebiu.near/widget/MetaPool.Alert\"\n                props={{\n                  text: `Fee is 0%`,\n                }}\n              />\n            </div>\n          )}\n          {state.stakeType === 2 && !!Number(state.amount) && (\n            <div className=\"mt_20\">\n              <Widget\n                src=\"bluebiu.near/widget/MetaPool.Alert\"\n                props={{\n                  text: `Funds will be available in approximately 2 days 0 hours.\n                    You will NOT receive rewards during that period.`,\n                }}\n              />\n            </div>\n          )}\n          <div className=\"mt_20\">{renderButton()}</div>\n        </>\n      )}\n    </StakeWrapper>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/MetaPool.StakeEth", "fact_widget_deployments_id": "79cbcd7baf6b88e0d6039cb9d28f9333", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}