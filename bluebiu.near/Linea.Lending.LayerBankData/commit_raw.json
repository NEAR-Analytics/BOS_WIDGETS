{"tx_hash": "A75tj5b9T4ZnU2JkbuZWJLaYB3XJGmX8NdgDiYEJQsiv", "action_id_social": "HNuzbU1b3xrBRD4uF2iQbxXSmNcG8LG3MjrcaW12HQDm-0-widget", "block_id": 102379579, "block_timestamp": "2023-10-01T14:40:03.261Z", "signer_id": "bluebiu.near", "widget_name": "Linea.Lending.LayerBankData", "source_code": "const markets = {\n  \"0xEa0F73296a6147FB56bAE29306Aae0FFAfF9De5F\": {\n    underlyingToken: {\n      address: \"0x3aab2285ddcddad8edf438c1bab47e1a9d05a9b4\",\n      decimals: 8,\n      symbol: \"WBTC\",\n    },\n    decimals: 18,\n    symbol: \"lWBTC\",\n    address: \"0xEa0F73296a6147FB56bAE29306Aae0FFAfF9De5F\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreigdklwcldjo4w7viyrym54hdb43wgpv23mbicetszygzapttbgo7q\",\n  },\n  \"0xc7D8489DaE3D2EbEF075b1dB2257E2c231C9D231\": {\n    underlyingToken: {\n      address: \"native\",\n      decimals: 18,\n      symbol: \"ETH\",\n    },\n    decimals: 18,\n    symbol: \"lETH\",\n    address: \"0xc7D8489DaE3D2EbEF075b1dB2257E2c231C9D231\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibspnls7q67q25r2ifv2rrfmvzl744pzuh3s5ekigeqkmyycl2auq\",\n  },\n  \"0x2aD69A0Cf272B9941c7dDcaDa7B0273E9046C4B0\": {\n    underlyingToken: {\n      address: \"0x176211869ca2b568f2a7d4ee941e073a821ee1ff\",\n      decimals: 6,\n      symbol: \"USDC\",\n    },\n    decimals: 18,\n    symbol: \"lUSDC\",\n    address: \"0x2aD69A0Cf272B9941c7dDcaDa7B0273E9046C4B0\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreie4jihoa76mgyzxhw2yrapihzu2qhkjz6m7u4opoxjebzg6zc2lla\",\n  },\n};\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrow\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRate\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"accountSnapshot\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"gTokenBalance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"borrowBalance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"exchangeRate\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Constant.AccountSnapshot\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCash\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalReserve\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"reserveFactor\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"marketInfos\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      { internalType: \"uint256\", name: \"supplyCap\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"borrowCap\", type: \"uint256\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactor\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"supplyRewardSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"borrowRewardSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [{ internalType: \"address[]\", name: \"gTokens\", type: \"address[]\" }],\n    name: \"getUnderlyingPrices\",\n    outputs: [{ internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"priceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"priceInUSD\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst RATE_ABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"cash\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"borrows\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"reserves\", type: \"uint256\" },\n    ],\n    name: \"getBorrowRate\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"cash\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"borrows\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"reserves\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"reserveFactor\", type: \"uint256\" },\n    ],\n    name: \"getSupplyRate\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst DISTRIBUTION_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"market\", type: \"address\" }],\n    name: \"distributionInfoOf\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"supplySpeed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"borrowSpeed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"totalBoostedSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"totalBoostedBorrow\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"accPerShareSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"accPerShareBorrow\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"accruedAt\", type: \"uint256\" },\n        ],\n        internalType: \"struct Constant.DistributionInfo\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"market\", type: \"address\" },\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n    ],\n    name: \"accountDistributionInfoOf\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"accuredLAB\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"boostedSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"boostedBorrow\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"accPerShareSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"accPerShareBorrow\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Constant.DistributionAccountInfo\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  rateModelSlopeAddress,\n  distributionAddress,\n  oracleAddress,\n  account,\n  update,\n  dapp,\n  onLoad,\n} = props;\n\nif (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\nconsole.log(`${dapp}-update`);\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nlet _cTokensData = {};\nlet _loanToValue = null;\nlet _underlyPrice = {};\nlet _liquidity = null;\nlet _underlyingBalance = null;\nlet _userMerberShip = null;\nlet _rewards = {};\nlet _accountRewards = {};\nlet count = 0;\nlet oTokensLength = Object.values(markets).length;\n\nconst formatedData = (key) => {\n  console.log(`${dapp}-${key}`, count);\n  if (count < 6) return;\n  try {\n    count = 0;\n    oTokensLength = Object.values(markets).length;\n    let totalSupplyUsd = Big(0);\n    let totalBorrowUsd = Big(0);\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n    const markets = {};\n    Object.values(_cTokensData).forEach((market) => {\n      const underlyingPrice = _underlyPrice[market.address] || 1;\n      const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n      const marketBorrowUsd = Big(market.totalBorrows || 0).mul(\n        underlyingPrice\n      );\n      totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n      totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(\n        Big(market.userSupply).mul(underlyingPrice)\n      );\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(\n        Big(market.userBorrow).mul(underlyingPrice)\n      );\n      totalCollateralUsd = totalCollateralUsd.plus(\n        Big(market.userSupply)\n          .mul(underlyingPrice)\n          .mul(_loanToValue[market.address])\n          .div(100)\n      );\n      const distributionSupplyApy = _rewards[market.address].supply.div(\n        marketSupplyUsd.eq(0) ? 1 : marketSupplyUsd\n      );\n      const distributionBorrowApy = _rewards[market.address].borrow.div(\n        marketBorrowUsd.eq(0) ? 1 : marketBorrowUsd\n      );\n      const supplyApy = Big(market.supplyRatePerTimestamp)\n        .mul(60 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .add(distributionSupplyApy)\n        .mul(100);\n\n      const borrowApy = Big(market.borrowRatePerTimestamp)\n        .mul(60 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .minus(distributionBorrowApy)\n        .mul(100);\n      let rewards;\n      const reward = _accountRewards[market.address];\n      if (reward && Big(reward.reward || 0).gt(0)) {\n        rewards = [\n          {\n            icon: \"https://ipfs.near.social/ipfs/bafkreiecfhuuc6grbyfxfv4uzgaciofdug6sdqv7efruu4uwmzclfqmcs4\",\n            symbol: \"LAB\",\n            dailyRewards: Big(_rewards[market.address].borrow)\n              .plus(_rewards[market.address].supply)\n              .toString(),\n            price: reward.price,\n            unclaimed: reward.reward,\n          },\n        ];\n      }\n      markets[market.address] = {\n        ...market,\n        loanToValue: _loanToValue[market.address],\n        liquidity: _liquidity[market.address],\n        underlyingPrice: underlyingPrice,\n        userUnderlyingBalance: _underlyingBalance[market.address],\n        userMerberShip: _userMerberShip[market.address],\n        supplyApy: supplyApy.toFixed(2) + \"%\",\n        borrowApy: borrowApy.toFixed(2) + \"%\",\n        dapp,\n        rewards,\n      };\n    });\n\n    onLoad({\n      markets,\n      totalSupplyUsd: totalSupplyUsd.toString(),\n      totalBorrowUsd: totalBorrowUsd.toString(),\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      totalCollateralUsd: totalCollateralUsd.toString(),\n    });\n  } catch (err) {\n    console.log(\"format error\", err);\n  }\n};\nconst getUnitrollerData = () => {\n  const calls = [];\n  const oTokens = Object.values(markets);\n  oTokens.forEach((token) => {\n    calls.push({\n      address: unitrollerAddress,\n      name: \"marketInfos\",\n      params: [token.address],\n    });\n    if (account) {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"checkMembership\",\n        params: [account, token.address],\n      });\n    }\n  });\n  multicallv2(\n    UNITROLLER_ABI,\n    calls,\n    {},\n    (res) => {\n      _loanToValue = {};\n      _userMerberShip = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const index = Math.floor(i / (account ? 2 : 1));\n        const mod = i % (account ? 2 : 1);\n        switch (mod) {\n          case 0:\n            _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n              res[i][3]._hex,\n              16\n            );\n            break;\n          case 1:\n            _userMerberShip[oTokens[index].address] = res[i][0];\n            break;\n          default:\n        }\n      }\n      count++;\n      formatedData(\"getUnitrollerData\");\n    },\n    (err) => {\n      console.log(\"error-getUnitrollerData\", err);\n      setTimeout(() => {\n        getUnitrollerData();\n      }, 1000);\n    }\n  );\n};\nconst getUnderlyPrice = () => {\n  if (!oracleAddress) return;\n  const oTokens = Object.keys(markets);\n  const UnderlyingContract = new ethers.Contract(\n    oracleAddress,\n    ORACLE_ABI,\n    Ethers.provider().getSigner()\n  );\n  UnderlyingContract.getUnderlyingPrices(oTokens)\n    .then((res) => {\n      _underlyPrice = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(res[i]._hex, 18);\n      }\n      count++;\n      formatedData(\"getUnderlyPrice\");\n    })\n    .catch((err) => {\n      console.log(\"error-getUnderlyPrice\", err);\n    });\n};\nconst getOTokenLiquidity = () => {\n  const assets = Object.values(markets);\n  let nativeOToken = \"\";\n  const calls = assets\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      address: market.underlyingToken.address,\n      name: \"balanceOf\",\n      params: [market.address],\n    }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _liquidity = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const oToken = markets[calls[i].params[0]];\n        _liquidity[oToken.address] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          oToken.underlyingToken.decimals\n        );\n      }\n      const provider = Ethers.provider();\n      if (nativeOToken) {\n        provider.getBalance(nativeOToken).then((rawBalance) => {\n          _liquidity[nativeOToken] = ethers.utils.formatUnits(\n            rawBalance._hex,\n            18\n          );\n          count++;\n          formatedData(\"getOTokenLiquidity\");\n        });\n      } else {\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getOTokenLiquidity();\n      }, 500);\n    }\n  );\n};\nconst getWalletBalance = () => {\n  let nativeOToken = \"\";\n  const underlyingTokens = Object.values(markets)\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n  const calls = underlyingTokens.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyingBalance = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyingBalance[underlyingTokens[i].oTokenAddress] =\n          ethers.utils.formatUnits(\n            res[i][0]._hex,\n            underlyingTokens[i].decimals\n          );\n      }\n      if (nativeOToken) {\n        const provider = Ethers.provider();\n        provider.getBalance(account).then((rawBalance) => {\n          _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n            rawBalance._hex,\n            18\n          );\n          count++;\n          formatedData(\"underlyingTokens\");\n        });\n      } else {\n        count++;\n        formatedData(\"underlyingTokens\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getWalletBalance();\n      }, 500);\n    }\n  );\n};\nconst getCTokenData = (oToken) => {\n  if (oTokensLength === 0) return;\n  const calls = [\n    {\n      address: oToken.address,\n      name: \"exchangeRate\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalSupply\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalBorrow\",\n    },\n    {\n      address: oToken.address,\n      name: \"accountSnapshot\",\n      params: [account],\n    },\n    {\n      address: oToken.address,\n      name: \"getCash\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalReserve\",\n    },\n    {\n      address: oToken.address,\n      name: \"reserveFactor\",\n    },\n  ];\n  multicallv2(\n    OTOKEN_ABI,\n    calls,\n    {},\n    (res) => {\n      const exchangeRateStored = ethers.utils.formatUnits(res[0][0]._hex, 18);\n      const userSupply = ethers.utils.formatUnits(\n        res[3][0][0]._hex,\n        oToken.decimals\n      );\n      const totalSupply = ethers.utils.formatUnits(\n        res[1][0]._hex,\n        oToken.underlyingToken.decimals\n      );\n      _cTokensData[oToken.address] = {\n        ...oToken,\n        exchangeRateStored,\n        totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n        totalBorrows: ethers.utils.formatUnits(\n          res[2][0]._hex,\n          oToken.underlyingToken.decimals\n        ),\n        userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n        userBorrow: ethers.utils.formatUnits(\n          res[3][0][1]._hex,\n          oToken.underlyingToken.decimals\n        ),\n      };\n      const rateCalls = [\n        {\n          address: rateModelSlopeAddress,\n          name: \"getBorrowRate\",\n          params: [res[4][0], res[2][0], res[5][0]],\n        },\n        {\n          address: rateModelSlopeAddress,\n          name: \"getSupplyRate\",\n          params: [res[4][0], res[2][0], res[5][0], res[6][0]],\n        },\n      ];\n      multicallv2(\n        RATE_ABI,\n        rateCalls,\n        {},\n        (rateRes) => {\n          oTokensLength--;\n          _cTokensData[oToken.address].borrowRatePerTimestamp =\n            ethers.utils.formatUnits(rateRes[0][0]._hex, 18);\n          _cTokensData[oToken.address].supplyRatePerTimestamp =\n            ethers.utils.formatUnits(rateRes[1][0]._hex, 18);\n          if (oTokensLength === 0) {\n            count++;\n            formatedData(\"oTokens data\");\n          }\n        },\n        (err) => {}\n      );\n    },\n    () => {\n      setTimeout(() => {\n        getCTokenData(oToken);\n      }, 500);\n    }\n  );\n};\nconst getCTokensData = () => {\n  Object.values(markets).forEach((market) => {\n    getCTokenData(market);\n  });\n};\nconst getRewards = () => {\n  const PriceToken = new ethers.Contract(\n    oracleAddress,\n    ORACLE_ABI,\n    Ethers.provider().getSigner()\n  );\n  PriceToken.priceOf(\"0xB97F21D1f2508fF5c73E7B5AF02847640B1ff75d\").then(\n    (priceRes) => {\n      const price = Big(ethers.utils.formatUnits(priceRes._hex, 18)).toString();\n      const cTokens = Object.keys(markets);\n      const calls = cTokens.map((token) => ({\n        address: distributionAddress,\n        name: \"distributionInfoOf\",\n        params: [token],\n      }));\n      multicallv2(\n        DISTRIBUTION_ABI,\n        calls,\n        {},\n        (res) => {\n          for (let i = 0, len = cTokens.length; i < len; i++) {\n            const token = cTokens[i];\n            const supply = Big(\n              ethers.utils.formatUnits(res[i][0][0]._hex, 18)\n            ).mul(price);\n            const borrow = Big(\n              ethers.utils.formatUnits(res[i][0][1]._hex, 18)\n            ).mul(price);\n            _rewards[token] = {\n              borrow: supply.mul(60 * 60 * 24 * 365),\n              supply: borrow.mul(60 * 60 * 24 * 365),\n            };\n          }\n          getUserRewards(price);\n        },\n        (err) => {\n          console.log(\"error-rewards\", err);\n        }\n      );\n    }\n  );\n};\nconst getUserRewards = (price) => {\n  const cTokens = Object.keys(markets);\n  const calls = cTokens.map((token) => ({\n    address: distributionAddress,\n    name: \"accountDistributionInfoOf\",\n    params: [token, account],\n  }));\n  multicallv2(\n    DISTRIBUTION_ABI,\n    calls,\n    {},\n    (res) => {\n      for (let i = 0, len = cTokens.length; i < len; i++) {\n        const token = cTokens[i];\n        const accured = Big(\n          ethers.utils.formatUnits(res[i][0][0]._hex, 18)\n        ).toString();\n        _accountRewards[token] = {\n          price,\n          reward: accured,\n        };\n      }\n      count++;\n      formatedData(\"rewards\");\n    },\n    (err) => {\n      console.log(\"error-rewards\", err);\n    }\n  );\n};\n\nconst init = () => {\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  getRewards();\n};\n\ninit();\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Linea.Lending.LayerBankData", "fact_widget_deployments_id": "3eb18fbeda40985038e3b24aead987d0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}