{"tx_hash": "BevaV4xmhqreuKJseb5e2NUKWhRHAtRXA11japegT5Mn", "action_id_social": "DFseY7SLthAY4vpvJxF7xLGGNizgPwB8dT7GRNz3xfDp-0-widget", "block_id": 119431488, "block_timestamp": "2024-05-21T17:25:12.692Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Kelp.Data", "source_code": "const {\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  dexConfig,\n  update,\n  onLoad,\n} = props;\nconst { StakeTokens } = dexConfig;\n\nconst ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrow\",\n    outputs: [\n      {\n        internalType: \"uint128\",\n        name: \"amount\",\n        type: \"uint128\",\n      },\n      {\n        internalType: \"uint128\",\n        name: \"shares\",\n        type: \"uint128\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalAssets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_address\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUserSnapshot\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_userAssetShares\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_userBorrowShares\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_userCollateralBalance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_shares\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"convertToAssets\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_assets\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cleanLiquidationFee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maxLTV\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst { formatUnits, parseUnits } = ethers.utils;\n\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n  let count = 0;\n\n  let _balanceRes = {};\n  let _APY = \"\";\n  let _TVL = \"\";\n\n  function formatData(params) {\n    console.log(params, count);\n\n    if (count < 3) return;\n    count = 0;\n    console.log(\"_balanceRes--\", _balanceRes);\n    for (let i = 0; i < StakeTokens.length; i++) {\n      StakeTokens[i].balance = _balanceRes[StakeTokens[i].address];\n    }\n\n    onLoad({\n      StakeTokens,\n      APY: _APY + \"%\",\n      TVL: _TVL,\n    });\n  }\n\n  function getTotalBorrow() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"totalBorrow\",\n      // params: [],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalBorrow_res\", res);\n        _totalBorrowRes = res;\n        count++;\n        formatData(\"getTotalBorrow\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalAssets_error:\", err);\n      });\n  }\n  function fetchData(url) {\n    return asyncFetch(url);\n  }\n  function getAPY() {\n    const url = `https://universe.kelpdao.xyz/rseth/apy`;\n    fetchData(url)\n      .then((res) => {\n        _APY = res.body.value || \"-\";\n        count++;\n        formatData(\"getAPY\");\n      })\n      .catch((err) => {\n        console.log(\"Catch-getAPY--\", err);\n      });\n  }\n  function getTVL() {\n    const url = `https://universe.kelpdao.xyz/rseth/tvl/?lrtToken`;\n    fetchData(url)\n      .then((res) => {\n        _TVL = res.body.usdTvl || \"-\";\n        count++;\n        formatData(\"getTVL\");\n      })\n      .catch((err) => {\n        console.log(\"Catch-getTVL--\", err);\n      });\n  }\n\n  function getWalletBalance() {\n    // not eth\n    const underlyingTokens = StakeTokens.filter((market) => {\n      return market.address && !market.isNative;\n    });\n\n    Ethers.provider()\n      .getBalance(account)\n      .then((rawBalance) => {\n        _balanceRes[\"native\"] = ethers.utils.formatUnits(rawBalance, 18);\n\n        if (underlyingTokens.length) {\n          const calls = underlyingTokens.map((token) => ({\n            address: token.address,\n            name: \"balanceOf\",\n            params: [account],\n          }));\n\n          multicall({\n            abi: [\n              {\n                constant: true,\n                inputs: [\n                  {\n                    name: \"_owner\",\n                    type: \"address\",\n                  },\n                ],\n                name: \"balanceOf\",\n                outputs: [\n                  {\n                    name: \"balance\",\n                    type: \"uint256\",\n                  },\n                ],\n                payable: false,\n                stateMutability: \"view\",\n                type: \"function\",\n              },\n            ],\n            calls,\n            options: {},\n            multicallAddress,\n            provider: Ethers.provider(),\n          })\n            .then((res) => {\n              console.log(\"getWalletBalance--\", res);\n\n              for (let i = 0, len = res.length; i < len; i++) {\n                _balanceRes[underlyingTokens[i].address] = res[i]\n                  ? ethers.utils.formatUnits(\n                      res[i][0],\n                      underlyingTokens[i].decimals\n                    )\n                  : \"0\";\n              }\n\n              count++;\n              formatData(\"getWalletBalance\");\n            })\n            .catch((err) => {\n              console.log(\"getWalletBalance-error--\", err);\n              // setTimeout(() => {\n              //   getWalletBalance();\n              // }, 500);\n            });\n        } else {\n          count++;\n          formatData(\"getWalletBalance\");\n        }\n      });\n  }\n  // getMaxLTV();\n  getWalletBalance();\n  getAPY();\n  getTVL();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Kelp.Data", "fact_widget_deployments_id": "0c14ebbdc03664cd853aafdd2680beba", "inserted_timestamp": "2024-05-21T18:54:56.178Z", "modified_timestamp": "2024-05-21T19:52:57.460Z", "__row_index": 0}