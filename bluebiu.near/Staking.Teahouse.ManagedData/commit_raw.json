{"tx_hash": "CdJXtiSA1SPKHLiEmpXRFy3Ydys1t3nPtwEuQU4oy3jv", "action_id_social": "J5eozYZe2m98mgJ99H5CNKwW1FovJLr1QSZo3jdPctmj-0-widget", "block_id": 121136614, "block_timestamp": "2024-06-14T09:20:05.871Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Teahouse.ManagedData", "source_code": "const {\n  CHAIN_LIST,\n  curChain,\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  update,\n  onLoad,\n  pairs,\n  managed,\n  chainId,\n  addresses,\n} = props;\n\nconst { formatUnits, parseUnits } = ethers.utils;\n\nconst ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vaultAllUnderlyingAssets\",\n    outputs: [\n      { internalType: \"uint256\", name: \"amount0\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"amount1\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n  console.log(\"managed-data--\");\n  if (!managed) {\n    onLoad({\n      dataList: [],\n    });\n    return;\n  }\n  let count = 0;\n  let _pairsDataRes = {};\n  let _totalSupplyRes = [];\n  let _underlyingAssetsRes = [];\n  let _userPositionsRes = [];\n\n  function formatData(params) {\n    console.log(params, count);\n\n    if (count < 1) return;\n    count = 0;\n\n    for (let i = 0; i < managed.length; i++) {\n      const _addr = managed[i].vaultAddress.toLocaleLowerCase();\n      const { shareTokenApr, shareTokenPrice, tvl } = _pairsDataRes[_addr];\n\n      managed[i].APR = Big(shareTokenApr).div(10000).toFixed(2, 0);\n      managed[i].AUM = Big(tvl).div(1000000).toString();\n      // let _totalSupply = _totalSupplyRes[i][0].toString();\n      // let _totalAmount0 = _underlyingAssetsRes[i][0].toString();\n      // let _totalAmount1 = _underlyingAssetsRes[i][1].toString();\n      // let _shares = _userPositionsRes[i]\n      //   ? formatUnits(_userPositionsRes[i][0])\n      //   : 0;\n      // pairs[i].totalSupply = _totalSupply;\n      // pairs[i].totalAmount0 = _totalAmount0;\n      // pairs[i].totalAmount1 = _totalAmount1;\n      // pairs[i].shares = _shares;\n      // pairs[i].shares = _userPositionsRes[i]\n      //   ? formatUnits(_userPositionsRes[i][0])\n      //   : 0;\n      // if (_userPositionsRes[i]) {\n      //   let _token0Amount = Big(_shares)\n      //     .times(_totalAmount0)\n      //     .div(_totalSupply)\n      //     .toString();\n      //   let _token1Amount = Big(_shares)\n      //     .times(_totalAmount1)\n      //     .div(_totalSupply)\n      //     .toString();\n      //   pairs[i].token0Amount = _token0Amount;\n      //   pairs[i].token1Amount = _token1Amount;\n      //   pairs[i].token0Value = Big(_token0Amount)\n      //     .times(prices[token0] || 0)\n      //     .toString();\n      //   pairs[i].token1Value = Big(_token1Amount)\n      //     .times(prices[token0] || 0)\n      //     .toString();\n      // }\n    }\n\n    onLoad({\n      dataList: managed,\n    });\n  }\n  function getPairsData() {\n    asyncFetch(\"https://vault-api.teahouse.finance/vaults/type/managed\")\n      .then((res) => {\n        const _addrs = managed.map((item) => item.vaultAddress);\n\n        const _curChainRes = res.body.vaults.filter((item) =>\n          _addrs.includes(item.address.toLocaleLowerCase())\n        );\n\n        _curChainRes.forEach(({ address, latestInfo }) => {\n          let _addr = address.toLocaleLowerCase();\n          _pairsDataRes[_addr] = latestInfo;\n        });\n      })\n      .catch((err) => {\n        console.log(\"catch-getPairsData-error--\", err);\n      })\n      .finally(() => {\n        count++;\n        formatData(\"getPairsData\");\n      });\n  }\n\n  function getUserPositions() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserPositions--\", res);\n        _userPositionsRes = res;\n        count++;\n        formatData(\"getUserPositions\");\n      })\n      .catch((err) => {\n        console.log(\"getUserPositions-error--\", err);\n      });\n  }\n  function getTotalSupply() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"totalSupply\",\n      //   params: [],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalSupply--\", res);\n        _totalSupplyRes = res;\n        count++;\n        formatData(\"getTotalSupply\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalSupply-error--\", err);\n      });\n  }\n  function getAllUnderlyingAssets() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"vaultAllUnderlyingAssets\",\n      //   params: [],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getAllUnderlyingAssets--\", res);\n        _underlyingAssetsRes = res;\n        count++;\n        formatData(\"getAllUnderlyingAssets\");\n      })\n      .catch((err) => {\n        console.log(\"getAllUnderlyingAssets-error--\", err);\n      });\n  }\n\n  getPairsData();\n  // getTotalSupply();\n  // getAllUnderlyingAssets();\n  // getUserPositions();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Teahouse.ManagedData", "fact_widget_deployments_id": "aff96c269915c3357dc45620c9dc26b8", "inserted_timestamp": "2024-06-14T10:54:59.940Z", "modified_timestamp": "2024-06-14T10:54:59.940Z", "__row_index": 0}