{"tx_hash": "HX2gxsycPcLtnEDwbyXhnFUzAvBiFc4y6eM24HLweCnA", "action_id_social": "92XKtawuUCsMs48WKUHFZXDbN6xwH9rgwzqJvUsdYmc8-0-widget", "block_id": 121572316, "block_timestamp": "2024-06-20T06:44:23.259Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Teahouse.ManagedData", "source_code": "const {\n  CHAIN_LIST,\n  curChain,\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  update,\n  onLoad,\n  pairs,\n  managed,\n  chainId,\n  addresses,\n} = props;\n\nconst { formatUnits, parseUnits } = ethers.utils;\n\nconst ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"globalState\",\n    outputs: [\n      { internalType: \"uint128\", name: \"depositLimit\", type: \"uint128\" },\n      { internalType: \"uint128\", name: \"lockedAssets\", type: \"uint128\" },\n      { internalType: \"uint32\", name: \"cycleIndex\", type: \"uint32\" },\n      {\n        internalType: \"uint64\",\n        name: \"cycleStartTimestamp\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"fundingLockTimestamp\",\n        type: \"uint64\",\n      },\n      { internalType: \"bool\", name: \"fundClosed\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_owner\", type: \"address\" }],\n    name: \"requestedFunds\",\n    outputs: [\n      { internalType: \"uint256\", name: \"assets\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"shares\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"userState\",\n    outputs: [\n      {\n        internalType: \"uint128\",\n        name: \"requestedDeposits\",\n        type: \"uint128\",\n      },\n      { internalType: \"uint128\", name: \"owedShares\", type: \"uint128\" },\n      {\n        internalType: \"uint128\",\n        name: \"requestedWithdrawals\",\n        type: \"uint128\",\n      },\n      { internalType: \"uint128\", name: \"owedAssets\", type: \"uint128\" },\n      {\n        internalType: \"uint32\",\n        name: \"requestCycleIndex\",\n        type: \"uint32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n  console.log(\"managed-data--\");\n  if (!managed) {\n    onLoad({\n      dataList: [],\n    });\n    return;\n  }\n  let count = 0;\n  let _pairsDataRes = {};\n  let _vaultStateRes = [];\n  let _userStateRes = [];\n  let _shareInfo = {};\n  let _totalSupplyRes = [];\n  let _userPositionsRes = [];\n\n  function formatData(params) {\n    console.log(params, count);\n\n    if (count < 4) return;\n    count = 0;\n\n    for (let i = 0; i < managed.length; i++) {\n      const _addr = managed[i].vaultAddress.toLocaleLowerCase();\n      const { shareTokenApr, shareTokenPrice, tvl } = _pairsDataRes[_addr];\n\n      managed[i].APR = Big(shareTokenApr).div(10000).toFixed(2, 0);\n      managed[i].AUM = Big(tvl).div(1000000).toString();\n      // let _totalSupply = _totalSupplyRes[i][0].toString();\n      // let _totalAmount0 = _vaultStateRes[i][0].toString();\n      // let _totalAmount1 = _vaultStateRes[i][1].toString();\n      const [\n        depositLimit,\n        lockedAssets,\n        cycleIndex,\n        cycleStartTimestamp,\n        fundingLockTimestamp,\n        fundClosed,\n      ] = _vaultStateRes[i];\n      const [\n        requestedDeposits,\n        owedShares,\n        requestedWithdrawals,\n        owedAssets,\n        requestCycleIndex,\n      ] = _userStateRes[i];\n\n      managed[i].depositLimit = depositLimit;\n      managed[i].lockedAssets = lockedAssets;\n      managed[i].cycleIndex = cycleIndex;\n      managed[i].cycleStartTimestamp = cycleStartTimestamp;\n      managed[i].fundingLockTimestamp = fundingLockTimestamp;\n      managed[i].fundClosed = fundClosed;\n      managed[i].pendingAssets = requestedDeposits.toString();\n      managed[i].shares = formatUnits(_shareInfo[\"amount\"]);\n      managed[i].requestedWithdrawals = formatUnits(requestedWithdrawals);\n    }\n\n    onLoad({\n      dataList: managed,\n    });\n  }\n  function getPairsData() {\n    asyncFetch(\"https://vault-api.teahouse.finance/vaults/type/managed\")\n      .then((res) => {\n        const _addrs = managed.map((item) => item.vaultAddress);\n\n        const _curChainRes = res.body.vaults.filter((item) =>\n          _addrs.includes(item.address.toLocaleLowerCase())\n        );\n\n        _curChainRes.forEach(({ address, latestInfo }) => {\n          let _addr = address.toLocaleLowerCase();\n          _pairsDataRes[_addr] = latestInfo;\n        });\n      })\n      .catch((err) => {\n        console.log(\"catch-getPairsData-error--\", err);\n      })\n      .finally(() => {\n        count++;\n        formatData(\"getPairsData\");\n      });\n  }\n\n  function getUserPositions() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserPositions--\", res);\n        _userPositionsRes = res;\n        count++;\n        formatData(\"getUserPositions\");\n      })\n      .catch((err) => {\n        console.log(\"getUserPositions-error--\", err);\n      });\n  }\n  function getTotalSupply() {\n    const calls = pairs.map((item) => ({\n      address: item.vaultAddress,\n      name: \"totalSupply\",\n      //   params: [],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalSupply--\", res);\n        _totalSupplyRes = res;\n        count++;\n        formatData(\"getTotalSupply\");\n      })\n      .catch((err) => {\n        console.log(\"getTotalSupply-error--\", err);\n      });\n  }\n  function getVaultState() {\n    const calls = managed.map((item) => ({\n      address: item.vaultAddress,\n      name: \"globalState\",\n      //   params: [],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getVaultState--\", res);\n        _vaultStateRes = res;\n        count++;\n        formatData(\"getVaultState\");\n      })\n      .catch((err) => {\n        console.log(\"getVaultState-error--\", err);\n      });\n  }\n  function getUserState() {\n    const calls = managed.map((item) => ({\n      address: item.vaultAddress,\n      name: \"userState\",\n      params: [account],\n    }));\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserState--\", res);\n        _userStateRes = res;\n        count++;\n        formatData(\"getUserState\");\n      })\n      .catch((err) => {\n        console.log(\"getUserState-error--\", err);\n      });\n  }\n  function getUserShares() {\n    asyncFetch(\n      `https://vault-api.teahouse.finance/vaults/managed/position/42161/${managed[0].vaultAddress}/${account}`\n    )\n      .then((res) => {\n        _shareInfo = res.body.shareInfo;\n      })\n      .catch((err) => {\n        console.log(\"catch-getUserShares-error--\", err);\n      })\n      .finally(() => {\n        count++;\n        formatData(\"getUserShares\");\n      });\n  }\n\n  getPairsData();\n  getVaultState();\n  getUserState();\n  getUserShares();\n  // getTotalSupply();\n  // getAllUnderlyingAssets();\n  // getUserPositions();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Teahouse.ManagedData", "fact_widget_deployments_id": "2fbf34605ed32cbbbedf8ed573dcd399", "inserted_timestamp": "2024-06-20T07:54:27.794Z", "modified_timestamp": "2024-06-20T08:54:37.557Z", "__row_index": 0}