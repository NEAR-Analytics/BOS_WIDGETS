{"tx_hash": "E5yihf4csoFrFGUXd2V8o7vf9RVbooYPSCBV9JBH9MEB", "action_id_social": "FcjjWbqp9paE1pDPd77eyqx6vjUqWDjPUHrbLZnz8rq7-0-widget", "block_id": 121882180, "block_timestamp": "2024-06-24T09:32:34.450Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.AggLayerAmountOut", "source_code": "const {\n  updater,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  prices,\n  name,\n  quoterPath,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    const WethContract = new ethers.Contract(\n      wethAddress,\n      [\n        {\n          constant: false,\n          inputs: [],\n          name: \"deposit\",\n          outputs: [],\n          payable: true,\n          stateMutability: \"payable\",\n          type: \"function\",\n        },\n        {\n          constant: false,\n          inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n          name: \"withdraw\",\n          outputs: [],\n          payable: false,\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    let params = [];\n    let options = {};\n    let method = \"\";\n    if (wrapType === 1) {\n      method = \"deposit\";\n      options.value = ethers.utils.parseEther(\n        Big(inputCurrencyAmount).toFixed(18).toString()\n      );\n    } else {\n      method = \"withdraw\";\n      params = [\n        ethers.utils.parseEther(\n          Big(inputCurrencyAmount).toFixed(18).toString()\n        ),\n      ];\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n      routes: null,\n      routerStr: \"\",\n      gas: \"\",\n      priceImpact: \"\",\n    };\n    const getTx = (_gas) => {\n      WethContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas || 4000000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      WethContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          console.log(err);\n          getTx();\n        });\n    };\n    estimateGas();\n    return;\n  }\n  asyncFetch(quoterPath, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      template: name,\n      inputCurrency,\n      outputCurrency,\n      inputAmount: inputCurrencyAmount,\n      slippage: slippage || 0.005,\n      account,\n    }),\n  })\n    .then((res) => {\n      const data = res.body?.data;\n      if (!data || data.noPair) throw Error;\n      let priceImpact = null;\n\n      if (\n        prices &&\n        prices[inputCurrency.symbol] &&\n        prices[outputCurrency.symbol]\n      ) {\n        const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n          prices[outputCurrency.symbol] || 1\n        );\n        const amountoutPrice = Big(data.outputCurrencyAmount).div(\n          inputCurrencyAmount\n        );\n\n        priceImpact = poolPrice\n          .minus(amountoutPrice)\n          .div(poolPrice)\n          .mul(100)\n          .toString();\n      }\n      onLoad({\n        inputCurrency,\n        inputCurrencyAmount,\n        outputCurrency,\n        priceImpact,\n        gas: data.txn.gasLimit,\n        ...data,\n        unsignedTx: data.txn,\n      });\n    })\n    .catch((err) => {\n      onLoad({\n        inputCurrency,\n        inputCurrencyAmount,\n        outputCurrency,\n        outputCurrencyAmount: \"\",\n        noPair: true,\n        routes: null,\n        routerStr: \"\",\n        gas: \"\",\n        priceImpact: \"\",\n      });\n    });\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.AggLayerAmountOut", "fact_widget_deployments_id": "cfb82983d64e2f7e6915ded5bfc3a981", "inserted_timestamp": "2024-06-24T10:54:23.231Z", "modified_timestamp": "2024-06-24T10:54:23.231Z", "__row_index": 0}