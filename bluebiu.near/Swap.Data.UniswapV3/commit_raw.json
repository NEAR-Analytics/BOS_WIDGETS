{"tx_hash": "AVSw4bUfpythCMCChe12ufhedRgJYPMSdKWUE9gmg71i", "action_id_social": "36QqGB4Rvzfms9gsRydsmDspPhGeVnUSGHKZJRLKhRau-0-widget", "block_id": 117561912, "block_timestamp": "2024-04-25T02:20:10.269Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.UniswapV3", "source_code": "const ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IV3SwapRouter.ExactInputParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInput\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountMinimum\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" },\n    ],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  wethAddress,\n  routerAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    const WethContract = new ethers.Contract(\n      wethAddress,\n      [\n        {\n          constant: false,\n          inputs: [],\n          name: \"deposit\",\n          outputs: [],\n          payable: true,\n          stateMutability: \"payable\",\n          type: \"function\",\n        },\n        {\n          constant: false,\n          inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n          name: \"withdraw\",\n          outputs: [],\n          payable: false,\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    let params = [];\n    let options = {};\n    let method = \"\";\n    if (wrapType === 1) {\n      method = \"deposit\";\n      options.value = ethers.utils.parseEther(\n        Big(inputCurrencyAmount).toFixed(18).toString()\n      );\n    } else {\n      method = \"withdraw\";\n      params = [\n        ethers.utils.parseEther(\n          Big(inputCurrencyAmount).toFixed(18).toString()\n        ),\n      ];\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n      routes: null,\n      routerStr: \"\",\n      gas: \"\",\n    };\n    const getTx = (_gas) => {\n      WethContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas || 4000000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      WethContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          console.log(err);\n          getTx();\n        });\n    };\n    estimateGas();\n    return;\n  }\n\n  const amount = Big(\n    ethers.utils.parseUnits(\n      Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n      inputCurrency.decimals\n    )\n  ).toFixed(0);\n\n  const path = [\n    inputCurrency.isNative ? wethAddress : inputCurrency.address,\n    outputCurrency.isNative ? wethAddress : outputCurrency.address,\n  ];\n  const getAmountsOut = () => {\n    asyncFetch(`https://api.dapdap.net/api/uniswap/v2/quote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        token_in: path[0],\n        token_out: path[1],\n        amount,\n        chain_id: inputCurrency.chainId,\n      }),\n    })\n      .then((res) => {\n        if (res.body.data?.result?.quote) {\n          const data = res.body.data.result.quote;\n\n          getTransaction({\n            routes: data.route,\n            priceImpact: Number(data.priceImpact) ? data.priceImpact : 0,\n            outputCurrencyAmount: data.quoteDecimals,\n            quote: data.quote,\n          });\n        }\n        if (res.body && res.body.error.message === \"no pair exist\") {\n          onLoad({\n            inputCurrency,\n            inputCurrencyAmount,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n            noPair: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        onLoad({\n          inputCurrency,\n          inputCurrencyAmount,\n          outputCurrency,\n          outputCurrencyAmount: \"\",\n          noPair: false,\n        });\n      });\n  };\n\n  const getTransaction = ({\n    routes,\n    priceImpact,\n    outputCurrencyAmount,\n    quote,\n  }) => {\n    const deadline = Math.ceil(Date.now() / 1000) + 120;\n    const _amountOut = Big(quote)\n      .mul(1 - (slippage || 0.005))\n      .toFixed(0);\n    const Iface = new ethers.utils.Interface(ROUTER_ABI);\n    const calldatas = [];\n    const _pathTypes = [];\n    const _path = [];\n    routes.forEach((route, i) => {\n      const tokenPath = route.tokenPath || [];\n      route.route.forEach((path, j) => {\n        _pathTypes.push(\"address\");\n        _path.push(tokenPath[j].address);\n        _pathTypes.push(\"uint24\");\n        _path.push(path.fee);\n        if (j === route.route.length - 1) {\n          _pathTypes.push(\"address\");\n          _path.push(tokenPath[j + 1].address);\n        }\n      });\n    });\n    calldatas.push(\n      Iface.encodeFunctionData(\"exactInput\", [\n        {\n          path: ethers.utils.solidityPack(_pathTypes, _path),\n          recipient:\n            outputCurrency.address === \"native\" ? routerAddress : account,\n          amountIn: amount,\n          amountOutMinimum: _amountOut,\n        },\n      ])\n    );\n    if (outputCurrency.isNative) {\n      calldatas.push(Iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account]));\n    }\n    const options = {\n      value: inputCurrency.isNative ? amount : \"0\",\n    };\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount,\n      priceImpact,\n    };\n\n    const RouterContract = new ethers.Contract(\n      routerAddress,\n      ROUTER_ABI,\n      Ethers.provider().getSigner()\n    );\n    const createTx = (gasLimit) => {\n      RouterContract.populateTransaction\n        .multicall(deadline, calldatas, {\n          ...options,\n          gasLimit: gasLimit || 500000,\n        })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: gasLimit,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: gasLimit,\n          });\n        });\n    };\n    RouterContract.estimateGas\n      .multicall(deadline, calldatas, options)\n      .then((_gas) => {\n        createTx(_gas);\n      })\n      .catch((err) => {\n        onLoad({\n          ...returnData,\n          noPair: false,\n        });\n      });\n  };\n\n  getAmountsOut();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.UniswapV3", "fact_widget_deployments_id": "3c6b4345abb2cd088d60182b20ea2ba2", "inserted_timestamp": "2024-04-25T04:04:00.243Z", "modified_timestamp": "2024-04-25T04:04:00.243Z", "__row_index": 1}