{"tx_hash": "9xAqse7CBWzLKUzyTFwtwJGKRQSkB8hYkrs2AHzmYh23", "action_id_social": "B9igAnTn49EHscnehMt9hvPLuijSzdXTzhXPaoSSDd6k-0-widget", "block_id": 120037706, "block_timestamp": "2024-05-30T03:18:33.193Z", "signer_id": "bluebiu.near", "widget_name": "Wrap.Index", "source_code": "const StyledDialog = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n`;\nconst StyledMasker = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 99;\n`;\nconst StyledWrapContainer = styled.div`\n  position: relative;\n  width: 420px;\n  height: 253px;\n  flex-shrink: 0;\n\n  border-radius: 16px;\n  border: 1px solid #373a53;\n  background: #262836;\n  z-index: 999;\n`;\nconst StyledWrapContainerTop = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #373a53;\n`;\nconst StyledClose = styled.div`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 20px;\n  top: 20px;\n`;\nconst StyledWrapContainerTopButton = styled.div`\n  position: relative;\n  padding: 15px 0 17px;\n  flex: 1;\n  text-align: center;\n  color: #979abe;\n  font-family: Gantari;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n  cursor: pointer;\n  &.active {\n    color: #fff;\n    &:after {\n      content: \"\";\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      height: 3px;\n      background: #fff;\n    }\n  }\n`;\nconst StyledWrapContainerBottom = styled.div`\n  padding: 30px 20px 0;\n`;\nconst StyledWrapOrUnwrapInput = styled.div`\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #373a53;\n  background: #1b1e27;\n  height: 71px;\n`;\nconst StyledWrapOrUnwrapInputTop = styled.div`\n  margin-bottom: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst StyledWrapOrUnwrapInputBottom = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst StyledWrapOrUnwrapInputTopType = styled.div`\n  color: #979abe;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\nconst StyledWrapOrUnwrapInputTopBalance = styled.div`\n  color: #979abe;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  span {\n    color: #fff;\n    text-decoration-line: underline;\n  }\n`;\nconst StyledWrapOrUnwrapInputBottomInput = styled.input`\n  padding: 0;\n  border: none;\n  outline: none;\n  background: transparent;\n\n  color: #fff;\n  font-family: Gantari;\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\nconst StyledWrapOrUnwrapInputBottomSymbol = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n`;\nconst StyledTokenIcon = styled.img`\n  width: 20px;\n`;\nconst StyledTokenSymbol = styled.div`\n  color: #fff;\n  font-family: Gantari;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\nconst StyledWrapOrUnwrapInputBottomInputTxt = styled.div`\n  color: #5e617e;\n  font-family: Gantari;\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n`;\nconst StyledWrapOrUnwrapButton = styled.div`\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 380px;\n  height: 48px;\n  flex-shrink: 0;\n  cursor: pointer;\n  border-radius: 8px;\n  background-color: #075a5a;\n  color: white;\n  font-family: Montserrat;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.3;\n  }\n`;\n\nconst WABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nState.init({\n  categoryList: [\"Wrap\", \"Unwrap\"],\n  categoryIndex: 0,\n  wrapAmount: \"\",\n  unwrapAmount: \"\",\n  wrapLoading: false,\n  unwrapLoading: false,\n  isApproving: false,\n  balances: {},\n  allowances: {},\n});\nconst {\n  account,\n  toast,\n  chainId,\n  addAction,\n  onCloseWrap,\n  tokenPairs,\n  multicall,\n  multicallAddress,\n  dexConfig,\n} = props;\nconst { formatUnits, parseUnits } = ethers.utils;\n\nconst isWrapInSufficient =\n  Number(state?.wrapAmount ?? 0) >\n  Number(state?.balances[tokenPairs[0].symbol] ?? 0);\nconst isUnwrapInSufficient =\n  Number(state?.unwrapAmount ?? 0) >\n  Number(state?.balances[tokenPairs[1].symbol] ?? 0);\n\nfunction handleQueryBalances() {\n  const calls = tokenPairs.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n\n  multicall({\n    abi: [\n      {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      console.log(\"get_wallet_bal_res:\", res);\n      let _balances = {};\n      tokenPairs.forEach((token, i) => {\n        const _symbol = token.symbol;\n        _balances[_symbol] = res[i]\n          ? formatUnits(res[i][0], token.decimals)\n          : 0;\n      });\n\n      State.update({\n        balances: _balances,\n      });\n    })\n    .catch((err) => {\n      console.log(\"getWalletBalance_error\", err);\n    });\n}\n\nfunction getBatchAllowance() {\n  const calls = tokenPairs.map((token) => ({\n    address: token.address,\n    name: \"allowance\",\n    params: [account, tokenPairs[1].address],\n  }));\n\n  multicall({\n    abi: [\n      \"function allowance(address owner, address spender) external view returns (uint256)\",\n    ],\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      console.log(\"get_allowances_res:\", res);\n\n      let _allowances = {};\n      tokenPairs.forEach((token, i) => {\n        const _symbol = token.symbol;\n        _allowances[_symbol] = res[i]\n          ? formatUnits(res[i][0], token.decimals)\n          : 0;\n      });\n\n      State.update({\n        allowances: _allowances,\n      });\n    })\n    .catch((err) => {\n      console.log(\"get_allowances_error\", err);\n    });\n}\nfunction handleAmountChange(amount) {\n  if (Number(amount) < 0) {\n    return;\n  }\n  const keyArray = [\"wrapAmount\", \"unwrapAmount\"];\n  if (Number(amount) === 0) {\n    State.update({\n      [keyArray[state.categoryIndex]]: amount,\n    });\n    return;\n  }\n  State.update({\n    [keyArray[state.categoryIndex]]: amount,\n  });\n}\nfunction handleWrap() {\n  State.update({\n    wrapLoading: true,\n  });\n  const toastId = toast?.loading({\n    title: `Wrap ${state.wrapAmount} ${tokenPairs[0].symbol}`,\n  });\n\n  const contract = new ethers.Contract(\n    tokenPairs[1].address,\n    WABI,\n    Ethers.provider().getSigner()\n  );\n  const _amount = parseUnits(state.wrapAmount, tokenPairs[0].decimals);\n  const _asset = tokenPairs[0].address;\n  contract\n    .deposit(_asset, _amount)\n    .then((tx) => tx.wait())\n    .then((result) => {\n      const { status, transactionHash } = result;\n      toast?.dismiss(toastId);\n\n      State.update({\n        wrapLoading: false,\n      });\n      toast?.success({\n        title: \"Wrap Successfully!\",\n        text: `Wrap ${state.wrapAmount} ${tokenPairs[0].symbol}`,\n        tx: transactionHash,\n        chainId,\n      });\n      addAction?.({\n        type: \"Staking\",\n        action: \"Wrap\",\n        template: dexConfig?.name,\n        token0: tokenPairs[0].symbol,\n        token1: tokenPairs[1].symbol,\n        amount: state?.wrapAmount,\n        template: dexConfig.name,\n        add: true,\n        status,\n        transactionHash,\n      });\n      handleRefresh();\n    })\n    .catch((error) => {\n      console.log(\"=error\", error);\n      State.update({\n        wrapLoading: false,\n      });\n      toast?.fail({\n        title: \"Wrap Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Wrap ${state.wrapAmount} ${tokenPairs[0].symbol}`,\n      });\n    });\n}\nfunction handleUnwrap() {\n  State.update({\n    unwrapLoading: true,\n  });\n  const toastId = toast?.loading({\n    title: `Unwrap ${state.wrapAmount} ${tokenPairs[1].symbol}`,\n  });\n\n  const contract = new ethers.Contract(\n    tokenPairs[1].address,\n    WABI,\n    Ethers.provider().getSigner()\n  );\n  const _amount = parseUnits(state.unwrapAmount, tokenPairs[1].decimals);\n  const _asset = tokenPairs[0].address;\n  contract\n    .withdraw(_asset, _amount)\n    .then((tx) => tx.wait())\n    .then((result) => {\n      const { status, transactionHash } = result;\n      toast?.dismiss(toastId);\n\n      State.update({\n        unwrapLoading: false,\n      });\n      toast?.success({\n        title: \"Unwrap Successfully!\",\n        text: `Unwrap ${state.unwrapAmount} ${tokenPairs[1].symbol}`,\n        tx: transactionHash,\n        chainId,\n      });\n      addAction?.({\n        type: \"Staking\",\n        template: dexConfig?.name,\n        action: \"Unwrap\",\n        token0: tokenPairs[1].symbol,\n        token1: tokenPairs[0].symbol,\n        amount: state?.unwrapAmount,\n        template: dexConfig.name,\n        add: false,\n        status,\n        transactionHash,\n      });\n      handleRefresh();\n    })\n    .catch((error) => {\n      console.log(\"=error\", error);\n      State.update({\n        unwrapLoading: false,\n      });\n      toast?.fail({\n        title: \"Unwrap Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Unwrap ${state.unwrapAmount} ${tokenPairs[1].symbol}`,\n      });\n    });\n}\nfunction handleApprove(_token, _spender, _amount, _decimals) {\n  State.update({\n    isApproving: true,\n  });\n  const TokenContract = new ethers.Contract(\n    _token,\n    [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"spender\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"approve\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  console.log(`${_token} approve ${_spender} ${_amount} ${_decimals}`);\n\n  TokenContract.approve(_spender, parseUnits(_amount, _decimals))\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.info(\"approve_tx_res:\", res);\n          State.update({\n            // isApproved: status === 1,\n            isApproving: false,\n          });\n          if (status === 1) {\n            toast.success?.({\n              title: \"Approve Success!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n            getBatchAllowance();\n          } else {\n            toast.fail?.({\n              title: \"Approve Failed!\",\n              text: `transactionHash ${transactionHash}`,\n            });\n          }\n        })\n        .finally(() => {\n          State.update({\n            isApproving: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.info(\"approve_error: \", err);\n      State.update({\n        isApproving: false,\n      });\n      toast?.fail({\n        title: \"Approve Failed!\",\n        text: err?.message || \"\",\n      });\n    });\n}\n\nfunction handleMaxWrap() {\n  State.update({\n    wrapAmount: state.balances[tokenPairs[0].symbol],\n  });\n}\nfunction handleMaxUnwrap() {\n  State.update({\n    unwrapAmount: state.balances[tokenPairs[1].symbol],\n  });\n}\n\nfunction handleRefresh() {\n  handleQueryBalances();\n  getBatchAllowance();\n}\n\nuseEffect(() => {\n  handleRefresh();\n}, []);\nconsole.log(\"balance--\", state.balances, \"allowances--\", state.allowances);\nreturn (\n  <StyledDialog>\n    <StyledMasker onClick={onCloseWrap} />\n    <StyledWrapContainer>\n      <StyledWrapContainerTop>\n        {state.categoryList.map((category, index) => (\n          <StyledWrapContainerTopButton\n            key={index}\n            className={state.categoryIndex === index ? \"active\" : \"\"}\n            onClick={() => {\n              State.update({\n                categoryIndex: index,\n              });\n            }}\n          >\n            {category}\n          </StyledWrapContainerTopButton>\n        ))}\n        <StyledClose onClick={onCloseWrap}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"12\"\n            height=\"12\"\n            viewBox=\"0 0 12 12\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M7.73284 6.00004L11.7359 1.99701C12.0368 1.696 12.0882 1.2593 11.8507 1.0219L10.9779 0.14909C10.7404 -0.0884124 10.3043 -0.0363122 10.0028 0.264491L6.00013 4.26743L1.99719 0.264591C1.69619 -0.036712 1.25948 -0.0884125 1.02198 0.14939L0.149174 1.0223C-0.0882277 1.2594 -0.0368271 1.6961 0.264576 1.99711L4.26761 6.00004L0.264576 10.0033C-0.0363271 10.3041 -0.0884277 10.7405 0.149174 10.978L1.02198 11.8509C1.25948 12.0884 1.69619 12.0369 1.99719 11.736L6.00033 7.73276L10.0029 11.7354C10.3044 12.037 10.7405 12.0884 10.978 11.8509L11.8508 10.978C12.0882 10.7405 12.0368 10.3041 11.736 10.0029L7.73284 6.00004Z\"\n              fill=\"#979ABE\"\n            />\n          </svg>\n        </StyledClose>\n      </StyledWrapContainerTop>\n      {state.categoryIndex === 0 ? (\n        <StyledWrapContainerBottom>\n          <StyledWrapOrUnwrapInput>\n            <StyledWrapOrUnwrapInputTop>\n              <StyledWrapOrUnwrapInputTopType>\n                Deposit\n              </StyledWrapOrUnwrapInputTopType>\n              <StyledWrapOrUnwrapInputTopBalance>\n                Balance:{\" \"}\n                <span onClick={handleMaxWrap}>\n                  <Widget\n                    src={\"bluebiu.near/widget/Utils.FormatBalance\"}\n                    props={{\n                      value: state.balances[tokenPairs[0].symbol],\n                      digits: 4,\n                    }}\n                  />\n                </span>\n              </StyledWrapOrUnwrapInputTopBalance>\n            </StyledWrapOrUnwrapInputTop>\n            <StyledWrapOrUnwrapInputBottom>\n              <StyledWrapOrUnwrapInputBottomInput\n                type=\"number\"\n                placeholder=\"0.0\"\n                value={state.wrapAmount}\n                onChange={(event) => handleAmountChange(event.target.value)}\n              />\n              <StyledWrapOrUnwrapInputBottomSymbol>\n                <StyledTokenIcon src={tokenPairs[0].icon} />\n                <StyledTokenSymbol>{tokenPairs[0].symbol}</StyledTokenSymbol>\n              </StyledWrapOrUnwrapInputBottomSymbol>\n            </StyledWrapOrUnwrapInputBottom>\n          </StyledWrapOrUnwrapInput>\n          {isWrapInSufficient ? (\n            <StyledWrapOrUnwrapButton disabled>\n              InSufficient Balance\n            </StyledWrapOrUnwrapButton>\n          ) : state.wrapLoading || state.isApproving ? (\n            <StyledWrapOrUnwrapButton disabled>\n              <Widget src={\"bluebiu.near/widget/Liquidity.Bridge.Loading\"} />\n            </StyledWrapOrUnwrapButton>\n          ) : state.wrapAmount > state.allowances[tokenPairs[0].symbol] ? (\n            <StyledWrapOrUnwrapButton\n              onClick={(e) =>\n                handleApprove(\n                  tokenPairs[0].address,\n                  tokenPairs[1].address,\n                  state.wrapAmount,\n                  tokenPairs[0].decimals\n                )\n              }\n            >\n              Approve\n            </StyledWrapOrUnwrapButton>\n          ) : state.wrapAmount > 0 ? (\n            <StyledWrapOrUnwrapButton onClick={handleWrap}>\n              Wrap\n            </StyledWrapOrUnwrapButton>\n          ) : (\n            <StyledWrapOrUnwrapButton disabled>Wrap</StyledWrapOrUnwrapButton>\n          )}\n        </StyledWrapContainerBottom>\n      ) : (\n        <StyledWrapContainerBottom>\n          <StyledWrapOrUnwrapInput>\n            <StyledWrapOrUnwrapInputTop>\n              <StyledWrapOrUnwrapInputTopType>\n                Withdraw\n              </StyledWrapOrUnwrapInputTopType>\n              <StyledWrapOrUnwrapInputTopBalance>\n                Balance:{\" \"}\n                <span onClick={handleMaxUnwrap}>\n                  <Widget\n                    src={\"bluebiu.near/widget/Utils.FormatBalance\"}\n                    props={{\n                      value: state.balances[tokenPairs[1].symbol],\n                      digits: 4,\n                    }}\n                  />\n                </span>\n              </StyledWrapOrUnwrapInputTopBalance>\n            </StyledWrapOrUnwrapInputTop>\n            <StyledWrapOrUnwrapInputBottom>\n              <StyledWrapOrUnwrapInputBottomInput\n                type=\"number\"\n                placeholder=\"0.0\"\n                value={state.unwrapAmount}\n                onChange={(event) => handleAmountChange(event.target.value)}\n              />\n              <StyledWrapOrUnwrapInputBottomSymbol>\n                <StyledTokenIcon src={tokenPairs[1].icon} />\n                <StyledTokenSymbol>{tokenPairs[1].symbol}</StyledTokenSymbol>\n              </StyledWrapOrUnwrapInputBottomSymbol>\n            </StyledWrapOrUnwrapInputBottom>\n          </StyledWrapOrUnwrapInput>\n          {isUnwrapInSufficient ? (\n            <StyledWrapOrUnwrapButton disabled>\n              InSufficient Balance\n            </StyledWrapOrUnwrapButton>\n          ) : state.unwrapLoading || state.isApproving ? (\n            <StyledWrapOrUnwrapButton disabled>\n              <Widget src={\"bluebiu.near/widget/Liquidity.Bridge.Loading\"} />\n            </StyledWrapOrUnwrapButton>\n          ) : state.unwrapAmount > state.allowances[tokenPairs[1].symbol] ? (\n            <StyledWrapOrUnwrapButton\n              onClick={(e) =>\n                handleApprove(\n                  tokenPairs[1].address,\n                  tokenPairs[1].address,\n                  state.unwrapAmount,\n                  tokenPairs[1].decimals\n                )\n              }\n            >\n              Approve\n            </StyledWrapOrUnwrapButton>\n          ) : state.unwrapAmount > 0 ? (\n            <StyledWrapOrUnwrapButton onClick={handleUnwrap}>\n              Unwrap\n            </StyledWrapOrUnwrapButton>\n          ) : (\n            <StyledWrapOrUnwrapButton disabled>Unwrap</StyledWrapOrUnwrapButton>\n          )}\n        </StyledWrapContainerBottom>\n      )}\n    </StyledWrapContainer>\n  </StyledDialog>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Wrap.Index", "fact_widget_deployments_id": "fbac4049396356e5b02bead43f43c7f0", "inserted_timestamp": "2024-05-30T04:44:15.027Z", "modified_timestamp": "2024-05-30T04:44:15.027Z", "__row_index": 1}