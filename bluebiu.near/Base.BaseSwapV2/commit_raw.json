{"tx_hash": "7BTtUSL9cqY5e6MLY3aDWGowTy9QWcHBgZ1WYyL5bhCL", "action_id_social": "D4cvqMeWhGRL9niSL6JJWHovcWTc3GcsJ1cUMkAb51hi-0-widget", "block_id": 100563136, "block_timestamp": "2023-09-07T03:31:27.182Z", "signer_id": "bluebiu.near", "widget_name": "Base.BaseSwapV2", "source_code": "const { title } = props;\nconst WETH_ADDRESS = \"0x4200000000000000000000000000000000000006\";\nconst DexConfig = {\n  BaseSwap: {\n    factoryAddress: \"0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB\",\n    routerAddress: \"0x327Df1E6de05895d2ab08513aaDD9313Fe505d86\",\n    uniType: \"v2\",\n\n    defaultCurrencies: {\n      input: {\n        chainId: 8453,\n        address: \"native\",\n        decimals: 18,\n        symbol: \"ETH\",\n        name: \"Ether\",\n        icon: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\",\n      },\n      output: {\n        chainId: 8453,\n        address: \"0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9\",\n        decimals: 18,\n        symbol: \"BSWAP\",\n        name: \"Baseswap Token\",\n        icon: \"https://baseswap.fi/images/tokens/0x78a087d713be963bf307b18f2ff8122ef9a63ae9.png\",\n      },\n    },\n  },\n  RocketSwap: {\n    factoryAddress: \"0x1B8128c3A1B7D20053D10763ff02466ca7FF99FC\",\n    routerAddress: \"0x4cf76043B3f97ba06917cBd90F9e3A2AAC1B306e\",\n    uniType: \"v2\",\n\n    defaultCurrencies: {\n      input: {\n        chainId: 8453,\n        address: \"native\",\n        decimals: 18,\n        symbol: \"ETH\",\n        name: \"Ether\",\n        icon: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\",\n      },\n      output: {\n        chainId: 8453,\n        address: \"0x6653dD4B92a0e5Bf8ae570A98906d9D6fD2eEc09\",\n        decimals: 18,\n        symbol: \"RCKT\",\n        name: \"RocketSwap\",\n        icon: \"https://app.rocketswap.cc/_next/image?url=https%3A%2F%2Ftoken.g34gsgv.top%2Flogo.png&w=256&q=75\",\n      },\n    },\n  },\n  SwapBased: {\n    factoryAddress: \"0x04C9f118d21e8B767D2e50C946f0cC9F6C367300\",\n    routerAddress: \"0xaaa3b1F1bd7BCc97fD1917c18ADE665C5D31F066\",\n    uniType: \"v2\",\n    defaultCurrencies: {\n      input: {\n        chainId: 8453,\n        address: \"native\",\n        decimals: 18,\n        symbol: \"ETH\",\n        name: \"Ether\",\n        icon: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\",\n      },\n      output: {\n        chainId: 8453,\n        address: \"0xd07379a755A8f11B57610154861D694b2A0f615a\",\n        decimals: 18,\n        symbol: \"BASE\",\n        name: \"BASE Token\",\n        icon: \"https://swapbased.finance/static/media/0xd07379a755a8f11b57610154861d694b2a0f615a.8e4c7d33.png\",\n      },\n    },\n  },\n  Synthswap: {\n    factoryAddress: \"0x4bd16d59A5E1E0DB903F724aa9d721a31d7D720D\",\n    routerAddress: \"0x8734B3264Dbd22F899BCeF4E92D442d538aBefF0\",\n    uniType: \"v2\",\n\n    defaultCurrencies: {\n      input: {\n        chainId: 8453,\n        address: \"native\",\n        decimals: 18,\n        symbol: \"ETH\",\n        name: \"Ether\",\n        icon: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\",\n      },\n      output: {\n        chainId: 8453,\n        address: \"0xbd2DBb8eceA9743CA5B16423b4eAa26bDcfE5eD2\",\n        decimals: 18,\n        symbol: \"SYNTH\",\n        name: \"Synth Token\",\n        icon: \"https://www.synthswap.io/_next/image?url=%2Fimages%2Ftokens%2Fsynth.png&w=64&q=100\",\n      },\n    },\n  },\n  HorizonDEX: {\n    factoryAddress: \"0x07AceD5690e09935b1c0e6E88B772d9440F64718\",\n    routerAddress: \"0x99AEC509174Cbf06F8F7E15dDEeB7bcC32363827\",\n    quoterAddress: \"0x94ddDe405A00180891eD79Dc1147F0d841c30D73\",\n    uniType: \"v3\",\n    defaultCurrencies: {\n      input: {\n        chainId: 8453,\n        address: \"native\",\n        decimals: 18,\n        symbol: \"ETH\",\n        name: \"Ether\",\n        icon: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\",\n      },\n      output: {\n        chainId: 8453,\n        address: \"0x081AD949deFe648774C3B8deBe0E4F28a80716dc\",\n        decimals: 18,\n        symbol: \"HZN\",\n        name: \"Horizon\",\n        icon: \"https://assets.coingecko.com/coins/images/31156/small/Circle_logo_black_%281%29.png?1691040942\",\n      },\n    },\n  },\n};\nlet initialLoading = false;\nif (Storage.privateGet(\"prevTitle\") !== title || !state.config) {\n  State.update({\n    config: DexConfig[title],\n    inputCurrency: DexConfig[title].defaultCurrencies.input,\n    outputCurrency: DexConfig[title].defaultCurrencies.output,\n    uniType: DexConfig[title].type,\n    inputCurrencyAmount: \"1\",\n    outputCurrencyAmount: \"\",\n    maxInputBalance: \"0\",\n    maxOutputBalance: \"0\",\n    tradeType: \"in\",\n    targetUnitAmount: 0,\n    noPair: false,\n    updateInputTokenBalance: true,\n    updateOutputTokenBalance: true,\n    loading: true,\n    displayCurrencySelect: false,\n    selectedTokenAddress: \"\",\n    currencySelectType: 0,\n  });\n  initialLoading = true;\n  Storage.privateSet(\"prevTitle\", title);\n}\n// styled area\nconst BaseSwap = styled.div``;\nconst Title = styled.div`\n  color: #3d76ff;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n  padding-left: 30px;\n  padding-bottom: 10px;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst Panel = styled.div`\n  width: 100%;\n  border-radius: 16px;\n  border: 1px solid #2c334b;\n  padding: 30px;\n  background-color: #181a27;\n`;\nconst ExchangeIcon = styled.div`\n  width: 60px;\n  margin: 20px auto;\n  svg {\n    color: #82a7ff;\n  }\n`;\nconst PanelLabel = styled.div`\n  color: #82a7ff;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 22px;\n`;\nconst Price = styled.div`\n  font-size: 14px;\n  color: #4f5375;\n  text-align: right;\n  margin-bottom: 30px;\n  margin-top: 20px;\n  @media (max-width: 768px) {\n    margin-top: 10px;\n  }\n`;\nconst SwapButton = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  background-color: #004bfc;\n  color: #fff;\n  font-size: 18px;\n  line-height: 22px;\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n// styled area end\n\nconst getPairContract = (_pairAddress) =>\n  new ethers.Contract(\n    _pairAddress,\n    [\n      {\n        constant: true,\n        inputs: [],\n        name: \"getReserves\",\n        outputs: [\n          { internalType: \"uint112\", name: \"_reserve0\", type: \"uint112\" },\n          { internalType: \"uint112\", name: \"_reserve1\", type: \"uint112\" },\n          {\n            internalType: \"uint32\",\n            name: \"_blockTimestampLast\",\n            type: \"uint32\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n      {\n        constant: true,\n        inputs: [],\n        name: \"token0\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\nconst RouterContract = new ethers.Contract(\n  state.config.routerAddress,\n  [\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountOut\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"reserveIn\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"reserveOut\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getAmountIn\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountIn\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"pure\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountIn\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"reserveIn\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"reserveOut\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getAmountOut\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountOut\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"pure\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\n\nconst FactoryContract = new ethers.Contract(\n  state.config.factoryAddress,\n  [\n    {\n      constant: true,\n      inputs: [\n        { internalType: \"address\", name: \"\", type: \"address\" },\n        { internalType: \"address\", name: \"\", type: \"address\" },\n      ],\n      name: \"getPair\",\n      outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\nconst getBestTrade = () => {\n  if (!state.inputCurrency.address || !state.outputCurrency.address) {\n    State.update({\n      loading: false,\n    });\n    return;\n  }\n  const wrapType =\n    state.inputCurrency.address === \"native\" &&\n    state.outputCurrency.symbol === \"WETH\"\n      ? 1\n      : state.inputCurrency.symbol === \"WETH\" &&\n        state.outputCurrency.address === \"native\"\n      ? 2\n      : 0;\n  if (wrapType) {\n    State.update(\n      state.tradeType === \"in\"\n        ? {\n            outputCurrencyAmount: state.inputCurrencyAmount,\n            loading: false,\n            noPair: false,\n          }\n        : {\n            inputCurrencyAmount: state.outputCurrencyAmount,\n            loading: false,\n            noPair: false,\n          }\n    );\n    return;\n  }\n\n  const curDexUniType = DexConfig[title].uniType;\n  console.log(\"curDexUniType: \", curDexUniType);\n\n  if (curDexUniType === \"v3\") return;\n\n  FactoryContract.getPair(\n    state.inputCurrency.address === \"native\"\n      ? WETH_ADDRESS\n      : state.inputCurrency.address,\n    state.outputCurrency.address === \"native\"\n      ? WETH_ADDRESS\n      : state.outputCurrency.address\n  )\n    .then((_pairAddress) => {\n      if (\n        !_pairAddress ||\n        !ethers.utils.isAddress(_pairAddress) ||\n        _pairAddress === \"0x0000000000000000000000000000000000000000\"\n      ) {\n        State.update({\n          noPair: true,\n        });\n        throw Error(\"Get pair address error\");\n      }\n      const PairContract = getPairContract(_pairAddress);\n      PairContract[\"token0\"]()\n        .then((_token0) => {\n          PairContract.getReserves()\n            .then((res) => {\n              const [reserve0, reserve1] = res;\n\n              const currentCurrency =\n                state.tradeType === \"in\"\n                  ? state.inputCurrency\n                  : state.outputCurrency;\n              const currentAmount = Big(\n                state.tradeType === \"in\"\n                  ? state.inputCurrencyAmount\n                  : state.outputCurrencyAmount\n              )\n                .mul(0.995)\n                .toFixed(5);\n              const type =\n                _token0 ===\n                (currentCurrency.address === \"native\"\n                  ? WETH_ADDRESS\n                  : currentCurrency.address)\n                  ? \"in\"\n                  : \"out\";\n\n              RouterContract[type === \"in\" ? \"getAmountOut\" : \"getAmountIn\"](\n                ethers.utils.parseUnits(\n                  currentAmount,\n                  currentCurrency.decimals\n                ),\n                reserve0,\n                reserve1\n              )\n                .then((_outAmount) => {\n                  const outCurrency =\n                    state.tradeType === \"in\"\n                      ? state.outputCurrency\n                      : state.inputCurrency;\n                  const outAmount = Big(\n                    ethers.utils.formatUnits(_outAmount, outCurrency.decimals)\n                  ).toFixed(4);\n                  State.update(\n                    state.tradeType === \"in\"\n                      ? {\n                          outputCurrencyAmount: outAmount,\n                          loading: false,\n                          noPair: false,\n                        }\n                      : {\n                          inputCurrencyAmount: outAmount,\n                          loading: false,\n                          noPair: false,\n                        }\n                  );\n                })\n                .catch(() => {\n                  State.update({\n                    loading: false,\n                    noPair: true,\n                  });\n                });\n            })\n            .catch(() => {\n              State.update({\n                loading: false,\n                noPair: true,\n              });\n            });\n        })\n        .catch(() => {\n          State.update({\n            loading: false,\n            noPair: true,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(err);\n      State.update({\n        loading: false,\n      });\n    });\n};\n\nif (initialLoading) {\n  getBestTrade();\n}\n\nfunction debounce(fn, wait) {\n  let timer;\n  return () => {\n    clearTimeout(timer);\n    timer = setTimeout(fn, wait);\n  };\n}\nconst debouncedGetBestTrade = debounce(getBestTrade, 500);\n\nconst getUnitAmount = () => {\n  const bigInputAmount = Big(state.inputCurrencyAmount || 0);\n  const bigOutputAmount = Big(state.outputCurrencyAmount || 0);\n  if (bigInputAmount.eq(0) || bigOutputAmount.eq(0)) return \"-\";\n  const unitAmount = bigOutputAmount.div(bigInputAmount);\n  if (unitAmount.lt(0.001)) return unitAmount.toPrecision(1);\n  return unitAmount.toFixed(3);\n};\n\nreturn (\n  <BaseSwap>\n    <Title>{title}</Title>\n    <Panel>\n      <PanelLabel>Swap From</PanelLabel>\n      <Widget\n        src=\"bluebiu.near/widget/Base.BaseCurrencyInput\"\n        props={{\n          currency: state.inputCurrency,\n          amount: state.inputCurrencyAmount,\n          updateTokenBalance: state.updateInputTokenBalance,\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: true,\n              currencySelectType: 0,\n              selectedTokenAddress: state.inputCurrency.address,\n            });\n          },\n          onUpdateCurrencyBalance: (balance) => {\n            State.update({\n              maxInputBalance: ethers.utils.formatUnits(\n                balance,\n                state.inputCurrency.decimals\n              ),\n              updateInputTokenBalance: false,\n            });\n          },\n          onAmountChange: (val) => {\n            State.update({\n              inputCurrencyAmount: val,\n              tradeType: \"in\",\n              loading:\n                val &&\n                Number(val) &&\n                state.inputCurrency.address &&\n                state.outputCurrency.address,\n            });\n            if (val && Number(val)) debouncedGetBestTrade();\n          },\n        }}\n      />\n      <ExchangeIcon\n        onClick={() => {\n          const [inputCurrency, outputCurrency] = [\n            state.outputCurrency,\n            state.inputCurrency,\n          ];\n          State.update({\n            inputCurrency,\n            outputCurrency,\n            outputCurrencyAmount: \"\",\n            tradeType: \"in\",\n            updateInputTokenBalance: true,\n            updateOutputTokenBalance: true,\n            loading: true,\n          });\n          if (Big(state.inputCurrencyAmount || 0).gt(0)) getBestTrade();\n        }}\n      >\n        <Widget src=\"bluebiu.near/widget/Base.BaseExchangeIcon\" />\n      </ExchangeIcon>\n      <PanelLabel>To</PanelLabel>\n      <Widget\n        src=\"bluebiu.near/widget/Base.BaseCurrencyInput\"\n        props={{\n          currency: state.outputCurrency,\n          amount: state.outputCurrencyAmount,\n          updateTokenBalance: state.updateOutputTokenBalance,\n          disabled: true,\n          onCurrencySelectOpen: () => {\n            State.update({\n              displayCurrencySelect: true,\n              currencySelectType: 1,\n              selectedTokenAddress: state.outputCurrency.address,\n            });\n          },\n          onUpdateCurrencyBalance: () => {\n            State.update({\n              updateOutputTokenBalance: false,\n            });\n          },\n        }}\n      />\n      <Price>\n        1 {state.inputCurrency.symbol}\u2248 {getUnitAmount()}{\" \"}\n        {state.outputCurrency.symbol}\n      </Price>\n      <Widget\n        src=\"bluebiu.near/widget/Base.BaseSwapButton\"\n        props={{\n          routerAddress: state.config.routerAddress,\n          wethAddress: WETH_ADDRESS,\n          title,\n          inputCurrency: state.inputCurrency,\n          outputCurrency: state.outputCurrency,\n          inputCurrencyAmount: state.inputCurrencyAmount,\n          outputCurrencyAmount: state.outputCurrencyAmount,\n          maxInputBalance: state.maxInputBalance,\n          onSuccess: () => {\n            State.update({\n              updateInputTokenBalance: true,\n              updateOutputTokenBalance: true,\n            });\n          },\n          noPair: state.noPair,\n          loading: state.loading,\n          fee: state.v3Fee,\n          uniType: DexConfig[title].uniType,\n        }}\n      />\n    </Panel>\n    {state.displayCurrencySelect && (\n      <Widget\n        src=\"bluebiu.near/widget/Base.BaseCurrencySelect\"\n        props={{\n          display: state.displayCurrencySelect,\n          selectedTokenAddress: state.selectedTokenAddress,\n          title: props.title,\n          onClose: () => {\n            State.update({\n              displayCurrencySelect: false,\n            });\n          },\n          onSelect: (currency) => {\n            const updatedParams = {\n              outputCurrencyAmount: \"\",\n              noPair: false,\n              updateInputTokenBalance: true,\n            };\n            if (state.currencySelectType === 0) {\n              updatedParams.inputCurrency = currency;\n              if (currency.address === state.outputCurrency.address)\n                updatedParams.outputCurrency = null;\n            }\n            if (state.currencySelectType === 1) {\n              updatedParams.outputCurrency = currency;\n              if (currency.address === state.inputCurrency.address) {\n                updatedParams.inputCurrency = null;\n                updatedParams.inputCurrencyAmount = \"\";\n              }\n            }\n            if (\n              state.inputCurrencyAmount &&\n              Number(state.inputCurrencyAmount) &&\n              state.inputCurrency?.address\n            ) {\n              updatedParams.loading = true;\n            }\n            State.update(updatedParams);\n            if (updatedParams.loading) getBestTrade();\n          },\n        }}\n      />\n    )}\n\n    {DexConfig[title].uniType === \"v3\" && (\n      <Widget\n        src=\"bluebiu.near/widget/Base.BaseQuoterV3\"\n        props={{\n          amountIn: state.inputCurrencyAmount,\n          tokenIn: state.inputCurrency,\n          tokenOut: state.outputCurrency,\n          quoterContractId: DexConfig[title].quoterAddress,\n          loadAmountOut: (data) => {\n            State.update({\n              outputCurrencyAmount: data.amountOut,\n              v3Fee: data.fee,\n              loading: false,\n            });\n          },\n        }}\n      />\n    )}\n  </BaseSwap>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.BaseSwapV2", "fact_widget_deployments_id": "b97d257e5cc6202451eb391a67bf8032", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}