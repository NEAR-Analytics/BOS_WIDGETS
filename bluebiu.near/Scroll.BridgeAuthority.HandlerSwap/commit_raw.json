{"tx_hash": "Ci5t3amamzoZZtfZ6dUq82bVvikxyus51X5TqJSeX6Rx", "action_id_social": "87yncx4Jmt8ryyreRT8BRBoBERTDw64RXRnJs74HMvZs-0-widget", "block_id": 117575010, "block_timestamp": "2024-04-25T06:45:16.399Z", "signer_id": "bluebiu.near", "widget_name": "Scroll.BridgeAuthority.HandlerSwap", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n} = props;\nif (!loading) return \"\";\n\nconst L1FeeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"estimateCrossDomainMessageFee\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n\nconst L1StandardBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"depositETH\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  // {\n  //   \"inputs\": [\n  //     {\n  //       \"internalType\": \"address\",\n  //       \"name\": \"_token\",\n  //       \"type\": \"address\"\n  //     },\n  //     {\n  //       \"internalType\": \"address\",\n  //       \"name\": \"_to\",\n  //       \"type\": \"address\"\n  //     },\n  //     {\n  //       \"internalType\": \"uint256\",\n  //       \"name\": \"_amount\",\n  //       \"type\": \"uint256\"\n  //     },\n  //     {\n  //       \"internalType\": \"uint256\",\n  //       \"name\": \"_gasLimit\",\n  //       \"type\": \"uint256\"\n  //     }\n  //   ],\n  //   \"name\": \"depositERC20\",\n  //   \"outputs\": [],\n  //   \"stateMutability\": \"payable\",\n  //   \"type\": \"function\"\n  // },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"depositERC20\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n];\n\nconst L1MessageBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_message\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"sendMessage\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_nonce\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_message\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"batchIndex\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"bytes\",\n            \"name\": \"merkleProof\",\n            \"type\": \"bytes\"\n          }\n        ],\n        \"internalType\": \"struct IL1ScrollMessenger.L2MessageProof\",\n        \"name\": \"_proof\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"relayMessageWithProof\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n];\n\nconst L2StandardBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdrawERC20\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n];\n\nconst L2MessageBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_message\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"sendMessage\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n]\n\nconsole.log(target)\nif (target.id === 534352) {\n  const L1BridgeFeeContract = new ethers.Contract(\n    '0x0d7E906BD9cAFa154b048cFa766Cc1E54E39AF9B',\n    L1FeeAbi,\n    Ethers.provider().getSigner()\n  )\n\n  const L1BridgeContract = new ethers.Contract(\n    '0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6',\n    L1StandardBridgeAbi,\n    Ethers.provider().getSigner()\n  )\n\n  const L1MessageBridgeContract = new ethers.Contract(\n    '0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367',\n    L1MessageBridgeAbi,\n    Ethers.provider().getSigner()\n  )\n\n  const gasLimit = 392000\n  const l2GasLimit = 170000;\n\n  L1BridgeFeeContract.estimateCrossDomainMessageFee(gasLimit).then(res => {\n    const fee = ethers.utils.formatUnits(res._hex, 18);\n    const rawAmount = new Big(amount).mul(Math.pow(10, currency.decimals))\n\n    // return L1BridgeContract.depositETH(account, rawAmount.toString(), l2GasLimit, {\n    //   value: rawAmount.plus(Big(fee).mul(Math.pow(10, currency.decimals))).toString(),\n    //   gasLimit,\n    // })\n    if (currency.address === 'native') {\n      return L1MessageBridgeContract.sendMessage(account, rawAmount.toString(), '0x', l2GasLimit, {\n        value: rawAmount.plus(Big(fee).mul(Math.pow(10, currency.decimals))).toString(),\n        // gasLimit,\n      })\n    } else {\n      return L1BridgeContract.depositERC20(\n        currency.address,\n        // account,\n        rawAmount.toString(),\n        l2GasLimit,\n        {\n          value: Big(fee).mul(Math.pow(10, 18)).toString(),\n          // gasLimit,\n        }\n      )\n    }\n  }).then((tx) => {\n    console.log(tx)\n    tx.wait()\n      .then((res) => {\n        onSuccess(res);\n      })\n      .catch((err) => {\n        onError(tx);\n      });\n  })\n    .catch((err) => {\n      console.log(err)\n      onError(err);\n    });\n} else {\n  const l1GasLimit = 170000;\n  const L2MessageBridgeContract = new ethers.Contract(\n    '0x781e90f1c8Fc4611c9b7497C3B47F99Ef6969CbC',\n    L2MessageBridgeAbi,\n    Ethers.provider().getSigner()\n  )\n\n  const L2BridgeContract = new ethers.Contract(\n    '0x4C0926FF5252A435FD19e10ED15e5a249Ba19d79',\n    L2StandardBridgeAbi,\n    Ethers.provider().getSigner()\n  )\n\n  const gasLimit = 392000\n  const rawAmount = new Big(amount).mul(Math.pow(10, currency.decimals))\n\n  let p\n  if (currency.address === 'native') {\n    p = L2MessageBridgeContract.sendMessage(account, rawAmount.toString(), '0x', l1GasLimit, {\n      value: rawAmount.toString(),\n      // gasLimit\n    })\n  } else {\n    p = L2BridgeContract.withdrawERC20(\n      currency.address,\n      // account,\n      rawAmount.toString(),\n      0,\n      {\n        // gasLimit,\n      }\n    )\n  }\n\n  p.then((tx) => {\n    console.log(tx)\n    tx.wait()\n      .then((res) => {\n        onSuccess(res);\n      })\n      .catch((err) => {\n        onError(tx);\n      });\n  })\n    .catch((err) => {\n      console.log(err)\n      onError(err);\n    });\n\n}\n\n\nreturn \"\";", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Scroll.BridgeAuthority.HandlerSwap", "fact_widget_deployments_id": "03c3dbc44f59a747c03024cda8ccecd6", "inserted_timestamp": "2024-04-25T14:01:49.942Z", "modified_timestamp": "2024-04-25T14:01:49.942Z", "__row_index": 0}