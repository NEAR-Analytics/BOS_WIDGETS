{"tx_hash": "3H3uKfwCB9jV19rWXKcke6y2FFrANLndqeW2vsN3tc4i", "action_id_social": "7cPP6HqQwyoLi2he7xXJNPHexbWk331GaaUBiwUygyn6-0-widget", "block_id": 111780288, "block_timestamp": "2024-01-31T15:19:42.258Z", "signer_id": "bluebiu.near", "widget_name": "Lending.LiquityMarketButton", "source_code": "const ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst Button = styled.button`\n  background-color: var(--switch-color);\n  height: 46px;\n  line-height: 46px;\n  border-radius: 10px;\n  color: var(--button-text-color);\n  font-size: 18px;\n  font-weight: 500;\n  border: none;\n  width: 100%;\n  transition: 0.5s;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n  &.borrow {\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.repay {\n    background-color: var(--repay-bg-hover-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.close {\n    width: 408px;\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n`;\n\nconst {\n  disabled,\n  actionText,\n  amount,\n  data,\n  chainId,\n  onSuccess,\n  toast,\n  addAction,\n  unsignedTx,\n  loading: estimating,\n  gas,\n  _assetAmount,\n  _debtTokenAmount,\n  onApprovedSuccess,\n  isBigerThanBalance,\n} = props;\n\nconst account = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst tokenSymbol = data.underlyingToken.symbol;\nif (!actionText) return;\n\nuseEffect(() => {\n  State.update({\n    approving: false,\n    isApproved: false,\n    isGasEnough: true,\n  });\n}, []);\n\nuseEffect(() => {\n  if (!account || !gas) return;\n  const provider = Ethers.provider();\n  provider.getBalance(account).then((rawBalance) => {\n    State.update({\n      gasBalance: rawBalance.toString(),\n      isGasEnough: !Big(rawBalance.toString()).lt(gas.toString()),\n      gas: ethers.utils.formatUnits(gas, 18),\n    });\n  });\n}, [account, gas]);\n\nfunction handleClose() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.BorrowerOperations,\n    [\n      {\n        inputs: [{ internalType: \"address\", name: \"_asset\", type: \"address\" }],\n        name: \"closeVessel\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .closeVessel(data.underlyingToken.address, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          State.update({\n            pending: false,\n          });\n          // addAction?.({\n          //   type: \"Lending\",\n          //   action: actionText,\n          //   token: data.underlyingToken,\n          //   amount,\n          //   template: data.dappName,\n          //   add: false,\n          //   status,\n          //   transactionHash,\n          // });\n          if (status === 1) {\n            onSuccess?.(data.dapp);\n            toast?.success({\n              title: `${tokenSymbol} ${actionText.toLowerCase()} request successed!`,\n              tx: transactionHash,\n              chainId,\n            });\n          } else {\n            toast?.fail({\n              title: `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n              tx: transactionHash,\n              chainId,\n            });\n          }\n        })\n        .catch((err) => {\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(\"closeVessel_error:\", err);\n      State.update({\n        pending: false,\n      });\n\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n        tx: err ? err.hash : \"\",\n        chainId,\n      });\n    });\n}\n\nif (actionText === \"Close\") {\n  return (\n    <Button\n      onClick={handleClose}\n      disabled={state.pending || disabled}\n      className={actionText.toLowerCase()}\n    >\n      {state.pending ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Close Vessel\"\n      )}\n    </Button>\n  );\n}\n\nif (!amount) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Enter An Amount\n    </Button>\n  );\n}\n\nif (isBigerThanBalance) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Insufficient Balance\n    </Button>\n  );\n}\n\nif (Big(_debtTokenAmount || 0).lt(data[\"MIN_DEBT\"])) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      A minimum of {data[\"MIN_DEBT\"]} {data.BORROW_TOKEN}\n    </Button>\n  );\n}\n\nconst tokenAddr = data.underlyingToken.address;\nconst spender = data.BorrowerOperations;\n\nconsole.log(\"APPROVE: \", tokenAddr, spender, props);\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    tokenAddr,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, spender).then((allowanceRaw) => {\n    console.log(\"ALLOWANCE:\", allowanceRaw.toString());\n    State.update({\n      isApproved: !Big(\n        ethers.utils.formatUnits(\n          allowanceRaw._hex,\n          data.underlyingToken.decimals\n        )\n      ).lt(amount || \"0\"),\n    });\n  });\n};\n\nif ([\"Borrow\"].includes(actionText)) {\n  getAllowance();\n}\n\nif (!state.isApproved) {\n  const handleApprove = () => {\n    const toastId = toast?.loading({\n      title: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n    });\n    State.update({\n      approving: true,\n    });\n\n    const TokenContract = new ethers.Contract(\n      tokenAddr,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(\n      spender,\n      ethers.utils.parseUnits(amount, data.underlyingToken.decimals)\n    )\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              isApproved: true,\n              approving: false,\n            });\n            toast?.success({\n              title: \"Approve Successfully!\",\n              text: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n            onApprovedSuccess();\n          })\n          .catch((err) => {\n            State.update({\n              isApproved: false,\n              approving: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n        });\n        onLoad?.(false);\n      });\n  };\n  return (\n    <Button onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Approve\"\n      )}\n    </Button>\n  );\n}\n\nfunction handleBorrow() {\n  State.update({\n    pending: true,\n  });\n  const _upperHint = \"0x544f96434f77437425d5aC40fd4755C0cf39399A\";\n  const _lowerHint = \"0xA1B7bbade134DB3B14B56056480e81c60Ab77377\";\n\n  const contract = new ethers.Contract(\n    data.BorrowerOperations,\n    [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"_asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"_assetAmount\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"_debtTokenAmount\",\n            type: \"uint256\",\n          },\n          { internalType: \"address\", name: \"_upperHint\", type: \"address\" },\n          { internalType: \"address\", name: \"_lowerHint\", type: \"address\" },\n        ],\n        name: \"openVessel\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .openVessel(\n      data.underlyingToken.address,\n      ethers.utils.parseUnits(_assetAmount),\n      ethers.utils.parseUnits(_debtTokenAmount),\n      _upperHint,\n      _lowerHint,\n      {\n        gasLimit: 4000000,\n      }\n    )\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          State.update({\n            pending: false,\n          });\n          addAction?.({\n            type: \"Lending\",\n            action: actionText,\n            token: data.underlyingToken,\n            amount,\n            template: data.dappName,\n            add: false,\n            status,\n            transactionHash,\n          });\n          if (status === 1) {\n            onSuccess?.(data.dapp);\n            toast?.success({\n              title: `${tokenSymbol} ${actionText.toLowerCase()} request successed!`,\n              tx: transactionHash,\n              chainId,\n            });\n          } else {\n            toast?.fail({\n              title: `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n              tx: transactionHash,\n              chainId,\n            });\n          }\n        })\n        .catch((err) => {\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(\"openVessel_error:\", err);\n      State.update({\n        pending: false,\n      });\n\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `${tokenSymbol} ${actionText.toLowerCase()} request failed!`,\n        tx: err ? err.hash : \"\",\n        chainId,\n      });\n    });\n}\n\nreturn (\n  <>\n    <Button\n      disabled={state.pending || disabled || estimating || !state.isGasEnough}\n      className={actionText.toLowerCase()}\n      onClick={handleBorrow}\n    >\n      {state.pending || estimating ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : !state.isGasEnough ? (\n        `Not enough gas(${Big(state.gas || 0).toFixed(2)}) needed`\n      ) : (\n        actionText\n      )}\n    </Button>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.LiquityMarketButton", "fact_widget_deployments_id": "2e238c34137ee762f2f4043beaed9b8b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}