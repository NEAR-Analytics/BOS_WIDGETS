{"tx_hash": "HX2gxsycPcLtnEDwbyXhnFUzAvBiFc4y6eM24HLweCnA", "action_id_social": "92XKtawuUCsMs48WKUHFZXDbN6xwH9rgwzqJvUsdYmc8-0-widget", "block_id": 121572316, "block_timestamp": "2024-06-20T06:44:23.259Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Teahouse.ManagedDetail", "source_code": "const {\n  Row,\n  Column,\n  DetailWrapper,\n  FilterButtonList,\n  FilterButton,\n  InputWrapList,\n  InputWrap,\n  Input,\n  InputSuffix,\n  StyledImageList,\n  PriceWrap,\n  TotalPrice,\n  BalancePrice,\n  StyledButtonList,\n  StyledButton,\n  CycleWrap,\n  TokenImg,\n} = VM.require(\"bluebiu.near/widget/Staking.Teahouse.Styles\");\nconst ABI = [\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_assets\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_receiver\", type: \"address\" },\n    ],\n    name: \"claimAndRequestDeposit\",\n    outputs: [{ internalType: \"uint256\", name: \"assets\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\n      { internalType: \"address\", name: \"_owner\", type: \"address\" },\n    ],\n    name: \"claimAndRequestWithdraw\",\n    outputs: [{ internalType: \"uint256\", name: \"shares\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_receiver\", type: \"address\" }],\n    name: \"claimOwedAssets\",\n    outputs: [{ internalType: \"uint256\", name: \"assets\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst {\n  account,\n  data,\n  toast,\n  prices,\n  addresses,\n  defaultDex,\n  addAction,\n  userPositions,\n  ICON_VAULT_MAP,\n  onSuccess,\n} = props;\n\nconst { formatUnits, parseUnits } = ethers.utils;\n\nconst defaultDeposit = props.tab === \"deposit\" || !props.tab;\n\nconst curPositionUSD = userPositions[data.vaultAddress]?.balanceUSD;\n\nState.init({\n  isDeposit: true,\n  lpBalance: \"\",\n  balances: [],\n  amount0: \"\",\n  lpAmount: \"\",\n  isError: false,\n  isLoading: false,\n  isToken0Approved: true,\n  isToken0Approving: false,\n  loadingMsg: \"\",\n  isPostTx: false,\n  showPairs: false,\n  updater: 0,\n});\n\nconst { vaultAddress, token0, decimals0, totalAmount0, totalSupply } = data;\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst updateBalance = (token) => {\n  console.log(\"updateBalance--\", token, account);\n  const { address, decimals, symbol } = token;\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(account)\n      .then((balanceBig) => {\n        const adjustedBalance = formatUnits(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract\n      .balanceOf(account)\n      .then((balanceBig) => {\n        const adjustedBalance = Big(\n          formatUnits(balanceBig, decimals)\n        ).toFixed();\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      })\n      .catch((error) => {\n        console.log(\"error: \", error);\n        // setTimeout(() => {\n        //   updateBalance(token);\n        // }, 1500);\n      });\n  }\n};\n\nuseEffect(() => {\n  if (!account || !token0) return;\n\n  [{ symbol: token0, address: addresses[token0], decimals: decimals0 }].map(\n    updateBalance\n  );\n}, [account, token0, state.updater]);\n\nconst {\n  isDeposit,\n  balances,\n  amount0,\n\n  isLoading,\n  isError,\n  isToken0Approved,\n  isToken0Approving,\n  loadingMsg,\n  lpBalance,\n  lpAmount,\n  isPostTx,\n} = state;\n\n// const detailLoading = Object.keys(balances).length < 2 && lpBalance === \"\";\nconst detailLoading = false;\n\nconst checkApproval = (token0Amount) => {\n  const token0Wei = parseUnits(Big(token0Amount).toFixed(decimals0), decimals0);\n\n  const abi = [\n    \"function allowance(address, address) external view returns (uint256)\",\n  ];\n\n  const token0Contract = new ethers.Contract(\n    addresses[token0],\n    abi,\n    Ethers.provider()\n  );\n\n  token0Contract\n    .allowance(account, vaultAddress)\n    .then((allowance0) => {\n      State.update({\n        isToken0Approved: !new Big(allowance0.toString()).lt(token0Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n};\nconst changeMode = (isDeposit) => {\n  State.update({ isDeposit });\n};\n\nconst handleMax = () => {\n  handleToken0Change(balances[token0]);\n};\nconst handleToken0Change = (amount) => {\n  State.update({ amount0: amount });\n  if (Number(amount) === 0) {\n    State.update({\n      isToken0Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n\n  State.update({ isLoading: false });\n  checkApproval(amount);\n};\n\nconst handleLPChange = (amount) => {\n  State.update({\n    lpAmount: amount,\n  });\n};\n\nconst handleApprove = (isToken0) => {\n  const _token = token0;\n  const payload = { isToken0Approving: true };\n\n  const amount = Big(amount0).toFixed(decimals0);\n\n  const toastId = toast?.loading({\n    title: `Approve ${amount} ${_token}`,\n  });\n\n  State.update({\n    ...payload,\n    isLoading: true,\n    loadingMsg: `Approving ${_token}...`,\n  });\n\n  const tokenWei = parseUnits(amount, decimals0);\n\n  const abi = [\"function approve(address, uint) public\"];\n\n  const tokenContract = new ethers.Contract(\n    addresses[_token],\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  tokenContract\n    .approve(vaultAddress, tokenWei)\n    .then((tx) => tx.wait())\n    .then((receipt) => {\n      const payload = { isToken0Approved: true, isToken0Approving: false };\n\n      State.update({ ...payload, isLoading: false, loadingMsg: \"\" });\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Approve Successfully!\",\n        text: `Approve ${amount} ${_token}`,\n        tx: receipt.transactionHash,\n        chainId: props.chainId,\n      });\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n        isToken0Approving: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Approve Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Approve ${amount} ${_token}`,\n      });\n    });\n};\nconst handleDeposit = () => {\n  const toastId = toast?.loading({\n    title: `Depositing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const token0Wei = parseUnits(Big(amount0).toFixed(decimals0), decimals0);\n\n  // const _shares = parseUnits(calcShares(amount0));\n\n  const depositContract = new ethers.Contract(\n    vaultAddress,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n  depositContract\n    .claimAndRequestDeposit(token0Wei, account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Deposit\",\n        token0,\n        amount: amount0,\n        template: defaultDex,\n        status: status,\n        add: false,\n        transactionHash,\n        chain_id: props.chainId,\n      });\n\n      State.update({\n        amount0: \"\",\n        isLoading: false,\n        isPostTx: true,\n        updater: new Date().getTime(),\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Deposit Successfully!\",\n      });\n      onSuccess?.();\n    })\n    .catch((error) => {\n      console.log(\"error: \", error);\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Deposit Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : error?.message ?? \"\",\n      });\n    });\n};\n\nconst handleRedeem = () => {\n  const toastId = toast?.loading({\n    title: `Redeeming...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Redeeming...\",\n  });\n\n  const lpWeiAmount = parseUnits(Big(lpAmount).toFixed(18));\n\n  const withdrawContract = new ethers.Contract(\n    vaultAddress,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n\n  withdrawContract\n    .claimAndRequestWithdraw(lpWeiAmount, account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        lpAmount: \"\",\n        isLoading: false,\n        isPostTx: true,\n        updater: new Date().getTime(),\n      });\n\n      const { status, transactionHash } = receipt;\n\n      // addAction?.({\n      //   type: \"Liquidity\",\n      //   action: \"Withdraw\",\n      //   token0,\n      //   amount: lpAmount,\n      //   template: defaultDex,\n      //   status: status,\n      //   add: false,\n      //   transactionHash,\n      //   chain_id: state.chainId,\n      // });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Redeem Successfully!\",\n      });\n      onSuccess?.();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Redeem Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : error?.message ?? \"\",\n      });\n    });\n};\nconst handleWithdraw = () => {\n  const toastId = toast?.loading({\n    title: `Withdrawing...`,\n  });\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Withdrawing...\",\n  });\n\n  const lpWeiAmount = parseUnits(Big(lpAmount).toFixed(18));\n\n  const withdrawContract = new ethers.Contract(\n    vaultAddress,\n    ABI,\n    Ethers.provider().getSigner()\n  );\n\n  withdrawContract\n    .claimOwedAssets(account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        lpAmount: \"\",\n        isLoading: false,\n        isPostTx: true,\n        updater: new Date().getTime(),\n      });\n\n      const { status, transactionHash } = receipt;\n\n      addAction?.({\n        type: \"Liquidity\",\n        action: \"Withdraw\",\n        token0,\n        amount: lpAmount,\n        template: defaultDex,\n        status: status,\n        add: false,\n        transactionHash,\n        chain_id: state.chainId,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      toast?.dismiss(toastId);\n      toast?.success({\n        title: \"Withdraw Successfully!\",\n      });\n      onSuccess?.();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Withdraw Failed!\",\n        text: error?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : error?.message ?? \"\",\n      });\n    });\n};\n\nconst isInSufficient = Number(amount0) > Number(balances[token0]);\n\nconst isWithdrawInsufficient = Number(lpAmount) > Number(data?.shares);\n\nconst balance0 =\n  !amount0 || !prices?.[token0]\n    ? \"-\"\n    : parseFloat(Big(amount0).times(prices[token0]).toFixed(4));\n\n// const onUpdateLpPercent = (percent) => {\n//   State.update({\n//     lpPercent: percent,\n//   });\n// };\n\nuseEffect(() => {\n  if (amount0) {\n    handleToken0Change(amount0);\n  }\n}, [data]);\n\nreturn (\n  <DetailWrapper>\n    <FilterButtonList>\n      <FilterButton\n        className={isDeposit ? \"isActive\" : \"\"}\n        onClick={() => changeMode(true)}\n      >\n        Deposit\n      </FilterButton>\n      <FilterButton\n        className={!isDeposit ? \"isActive\" : \"\"}\n        onClick={() => changeMode(false)}\n      >\n        Withdraw\n      </FilterButton>\n    </FilterButtonList>\n    <CycleWrap>\n      <span>Round #{data?.cycleIndex} in progress</span>\n      <span className=\"times\">\n        <Widget\n          src=\"bluebiu.near/widget/Utils.CountDown\"\n          props={{\n            time: data?.fundingLockTimestamp - Date.now() / 1000,\n          }}\n        />\n      </span>\n    </CycleWrap>\n    {detailLoading ? (\n      <div style={{ padding: \"30px 0 45px\" }}>\n        <Widget\n          props={{\n            color: \"#999\",\n          }}\n          src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\"\n        />\n      </div>\n    ) : (\n      <>\n        {isDeposit ? (\n          <>\n            <Row className=\"price-input\">\n              <Column>\n                <InputWrap\n                  className={\n                    Number(amount0) > Number(balances[token0])\n                      ? \"inSufficient\"\n                      : \"\"\n                  }\n                >\n                  <Input\n                    value={amount0}\n                    type=\"number\"\n                    onChange={(e) => handleToken0Change(e.target.value)}\n                  />\n                  <InputSuffix>\n                    <img src={ICON_VAULT_MAP[token0]} alt={token0} />\n                    <span>{token0}</span>\n                  </InputSuffix>\n                </InputWrap>\n                <PriceWrap>\n                  <TotalPrice>${balance0}</TotalPrice>\n                  <BalancePrice>\n                    Balance:\n                    <span onClick={() => handleMax(true)}>\n                      {Big(balances[token0] ?? 0).toFixed(6)}\n                    </span>{\" \"}\n                    {token0}\n                  </BalancePrice>\n                </PriceWrap>\n              </Column>\n            </Row>\n            <StyledButtonList>\n              {isInSufficient && (\n                <StyledButton disabled>InSufficient Balance</StyledButton>\n              )}\n              {!isInSufficient &&\n                (isToken0Approved && !isToken0Approving ? (\n                  <StyledButton\n                    disabled={isLoading || !amount0}\n                    onClick={handleDeposit}\n                  >\n                    {isLoading ? (\n                      <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                    ) : (\n                      \"Deposit\"\n                    )}\n                  </StyledButton>\n                ) : (\n                  <>\n                    <StyledButton\n                      disabled={isToken0Approved || isToken0Approving}\n                      onClick={() => handleApprove(true)}\n                    >\n                      {isToken0Approving ? (\n                        <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                      ) : (\n                        <>\n                          {isToken0Approved ? \"Approved\" : \"Approve\"} {token0}\n                        </>\n                      )}\n                    </StyledButton>\n                  </>\n                ))}\n            </StyledButtonList>\n            <CycleWrap>\n              <span\n                className=\"assets\"\n                title=\"Amount will be deployed after processing.\nThis may take up to 2 workdays in the UTC+8 timezone.\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  className=\"svg\"\n                >\n                  <path fill=\"#8DC0D6\" d=\"M6 4h12v.895H6z\"></path>\n                  <path\n                    fill=\"#8DC0D6\"\n                    fill-rule=\"evenodd\"\n                    d=\"M8.23 4.895H7.154V8.1a4.846 4.846 0 1 0 9.693 0V4.895h-1.078v3.388a3.77 3.77 0 1 1-7.539 0V4.895Z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                  <path fill=\"#8DC0D6\" d=\"M18 21H6v-.895h12z\"></path>\n                  <path\n                    fill=\"#8DC0D6\"\n                    fill-rule=\"evenodd\"\n                    d=\"M15.77 20.105h1.076V16.9a4.846 4.846 0 1 0-9.693 0v3.206h1.078v-3.388a3.77 3.77 0 1 1 7.539 0v3.388Z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                  <path\n                    fill=\"#F4D2B9\"\n                    d=\"M9.308 7.579h5.384v.886a2.692 2.692 0 0 1-5.384 0V7.58ZM8.23 17.421h7.538v2.684H8.23z\"\n                  ></path>\n                </svg>\n                <span className=\"title\">Pending</span>\n              </span>\n              <span className=\"assets\">\n                <TokenImg src={ICON_VAULT_MAP[token0]} alt={token0} />\n                {formatUnits(data?.pendingAssets, decimals0)}\n              </span>\n            </CycleWrap>\n          </>\n        ) : (\n          <>\n            <Row className=\"price-input\">\n              <Column>\n                <InputWrap>\n                  <Input\n                    value={lpAmount}\n                    type=\"number\"\n                    onChange={(e) => {\n                      handleLPChange(e.target.value);\n                    }}\n                  />\n\n                  <InputSuffix>\n                    <StyledImageList>\n                      <img\n                        src=\"https://ipfs.near.social/ipfs/bafkreid5qrwbz7xq56opxfhi5pxukxf2kxs53ciuxpnhfqugaf7c4rw4jy\"\n                        alt=\"\"\n                      />\n                    </StyledImageList>\n                    {/* <span>{token0}</span> */}\n                  </InputSuffix>\n                </InputWrap>\n                <PriceWrap>\n                  <TotalPrice>{/* ${balanceLp} */}</TotalPrice>\n                  <BalancePrice>\n                    Balance:{\" \"}\n                    <span\n                      onClick={() => {\n                        handleLPChange(data?.shares);\n                      }}\n                    >\n                      {Number(data?.shares).toFixed(4)}\n                    </span>\n                    Shares\n                  </BalancePrice>\n                </PriceWrap>\n              </Column>\n            </Row>\n            <StyledButtonList>\n              <StyledButton\n                disabled={\n                  true\n                  // isWithdrawInsufficient || isLoading || Number(lpAmount) <= 0\n                }\n                onClick={handleRedeem}\n              >\n                {isLoading ? (\n                  <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                ) : (\n                  <>\n                    {isWithdrawInsufficient ? \"InSufficient Balance\" : \"Redeem\"}\n                  </>\n                )}\n              </StyledButton>\n            </StyledButtonList>\n            <CycleWrap>\n              <span\n                className=\"assets\"\n                title={`Amount will be exchanged back into ${token0} after processing.\nThis may take up to 2 workdays in the UTC+8 timezone.`}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  className=\"svg\"\n                >\n                  <path fill=\"#8DC0D6\" d=\"M6 4h12v.895H6z\"></path>\n                  <path\n                    fill=\"#8DC0D6\"\n                    fill-rule=\"evenodd\"\n                    d=\"M8.23 4.895H7.154V8.1a4.846 4.846 0 1 0 9.693 0V4.895h-1.078v3.388a3.77 3.77 0 1 1-7.539 0V4.895Z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                  <path fill=\"#8DC0D6\" d=\"M18 21H6v-.895h12z\"></path>\n                  <path\n                    fill=\"#8DC0D6\"\n                    fill-rule=\"evenodd\"\n                    d=\"M15.77 20.105h1.076V16.9a4.846 4.846 0 1 0-9.693 0v3.206h1.078v-3.388a3.77 3.77 0 1 1 7.539 0v3.388Z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                  <path\n                    fill=\"#F4D2B9\"\n                    d=\"M9.308 7.579h5.384v.886a2.692 2.692 0 0 1-5.384 0V7.58ZM8.23 17.421h7.538v2.684H8.23z\"\n                  ></path>\n                </svg>\n                <span className=\"title\">Pending</span>\n              </span>\n              <span className=\"assets\">\n                <TokenImg\n                  src=\"https://ipfs.near.social/ipfs/bafkreid5qrwbz7xq56opxfhi5pxukxf2kxs53ciuxpnhfqugaf7c4rw4jy\"\n                  alt=\"\"\n                />\n                {data?.requestedWithdrawals}\n              </span>\n            </CycleWrap>\n            <CycleWrap>\n              <span\n                className=\"assets\"\n                title=\"Amount ready to be claimed and moved to your wallet\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  className=\"svg\"\n                >\n                  <path\n                    fill=\"#8DC0D6\"\n                    d=\"M4.455 20.727H17.69v1.026H4.455v-1.026Z\"\n                  ></path>\n                  <path\n                    stroke=\"#8DC0D6\"\n                    stroke-width=\"1.2\"\n                    d=\"M5.054 8.237h11.891v9a1.8 1.8 0 0 1-1.8 1.8h-8.29a1.8 1.8 0 0 1-1.8-1.8v-9Z\"\n                  ></path>\n                  <path\n                    stroke=\"#8DC0D6\"\n                    stroke-width=\"1.3\"\n                    d=\"M18 9.35h-.65v4.573h2.032c.8 0 1.45-.65 1.45-1.45V10.8c0-.8-.65-1.45-1.45-1.45H18Z\"\n                  ></path>\n                  <path\n                    fill=\"#F4D2B9\"\n                    d=\"m9.95 16.257-2.128-2.378a.397.397 0 0 1 0-.517l.463-.517a.304.304 0 0 1 .463 0l1.433 1.601 3.07-3.43a.304.304 0 0 1 .462 0l.463.518a.397.397 0 0 1 0 .517l-3.764 4.206a.304.304 0 0 1-.462 0Z\"\n                  ></path>\n                  <path\n                    fill=\"#FFE9D9\"\n                    d=\"M8.528 2.247h1.018v3.08H8.528zM12.602 3.273h1.018v2.053h-1.018z\"\n                  ></path>\n                </svg>\n                <span className=\"title\">Ready</span>\n              </span>\n              <span className=\"assets\">\n                <TokenImg src={ICON_VAULT_MAP[token0]} alt={token0} />\n                {/* {formatUnits(data?.pendingAssets, decimals0)} */}\n              </span>\n            </CycleWrap>\n            <StyledButtonList>\n              <StyledButton disabled={true} onClick={handleWithdraw}>\n                {isLoading ? (\n                  <Widget src=\"bluebiu.near/widget/Liquidity.Bridge.Loading\" />\n                ) : (\n                  \"Withdraw\"\n                )}\n              </StyledButton>\n            </StyledButtonList>\n          </>\n        )}\n      </>\n    )}\n  </DetailWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Teahouse.ManagedDetail", "fact_widget_deployments_id": "a0c567bb176c3beb0e8883f6443e6eff", "inserted_timestamp": "2024-06-20T07:54:27.794Z", "modified_timestamp": "2024-06-20T08:54:37.557Z", "__row_index": 0}