{"tx_hash": "5JzKBFH3wubDjdvU1MVNJsJstfmiDLmtMYWMWvP9u9D3", "action_id_social": "E6nohW6g9Yu5PZWPtqMs9FYv9iSVjP9Z61f7EL3j4bPu-0-widget", "block_id": 103796626, "block_timestamp": "2023-10-20T09:49:22.543Z", "signer_id": "bluebiu.near", "widget_name": "Base.Lending.GranaryData", "source_code": "const native = {\n  address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n  decimals: 18,\n  symbol: \"ETH\",\n  name: \"ETH\",\n  description: \"native\",\n  icon: \"https://ipfs.near.social/ipfs/bafkreibspnls7q67q25r2ifv2rrfmvzl744pzuh3s5ekigeqkmyycl2auq\",\n};\n\nconst wethAddress = \"0x4200000000000000000000000000000000000006\";\n\nconst Tokens = {\n  \"0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA\": {\n    address: \"0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA\",\n    decimals: 6,\n    symbol: \"USDbC\",\n    name: \"USDbC\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreie4jihoa76mgyzxhw2yrapihzu2qhkjz6m7u4opoxjebzg6zc2lla\",\n  },\n  \"0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22\": {\n    address: \"0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22\",\n    decimals: 18,\n    symbol: \"CBETH\",\n    name: \"CBETH\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreif6fax6u2xtetbjv5c27ubxedwqjzrqsreytqbppflryagvm5ix7u\",\n  },\n\n  \"0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb\": {\n    address: \"0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb\",\n    decimals: 18,\n    symbol: \"DAI\",\n    name: \"DAI\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreieuxntkdzi2mzkzdcbk6kahwxqpftxnipxcwc4oe4p4jm2rhj2xhu\",\n  },\n\n  \"0x4200000000000000000000000000000000000006\": {\n    address: \"0x4200000000000000000000000000000000000006\",\n    decimals: 18,\n    symbol: \"WETH\",\n    name: \"WETH\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreihyzmiuawyekwiyofkzm25xzrrfenhvadi6lb42juvq7tah2u7ha4\",\n  },\n};\n\nconst aaveProtocolDataProviderAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract ILendingPoolAddressesProvider\",\n        name: \"addressesProvider\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"ADDRESSES_PROVIDER\",\n    outputs: [\n      {\n        internalType: \"contract ILendingPoolAddressesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllATokens\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"string\", name: \"symbol\", type: \"string\" },\n          { internalType: \"address\", name: \"tokenAddress\", type: \"address\" },\n        ],\n        internalType: \"struct AaveProtocolDataProvider.TokenData[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllReservesTokens\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"string\", name: \"symbol\", type: \"string\" },\n          { internalType: \"address\", name: \"tokenAddress\", type: \"address\" },\n        ],\n        internalType: \"struct AaveProtocolDataProvider.TokenData[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getReserveConfigurationData\",\n    outputs: [\n      { internalType: \"uint256\", name: \"decimals\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"ltv\", type: \"uint256\" },\n      {\n        internalType: \"uint256\",\n        name: \"liquidationThreshold\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"liquidationBonus\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"reserveFactor\", type: \"uint256\" },\n      { internalType: \"bool\", name: \"usageAsCollateralEnabled\", type: \"bool\" },\n      { internalType: \"bool\", name: \"borrowingEnabled\", type: \"bool\" },\n      { internalType: \"bool\", name: \"stableBorrowRateEnabled\", type: \"bool\" },\n      { internalType: \"bool\", name: \"isActive\", type: \"bool\" },\n      { internalType: \"bool\", name: \"isFrozen\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getReserveData\",\n    outputs: [\n      { internalType: \"uint256\", name: \"availableLiquidity\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"totalStableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"totalVariableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"liquidityRate\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"variableBorrowRate\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"stableBorrowRate\", type: \"uint256\" },\n      {\n        internalType: \"uint256\",\n        name: \"averageStableBorrowRate\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"liquidityIndex\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"variableBorrowIndex\", type: \"uint256\" },\n      { internalType: \"uint40\", name: \"lastUpdateTimestamp\", type: \"uint40\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getReserveTokensAddresses\",\n    outputs: [\n      { internalType: \"address\", name: \"aTokenAddress\", type: \"address\" },\n      {\n        internalType: \"address\",\n        name: \"stableDebtTokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"variableDebtTokenAddress\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"address\", name: \"user\", type: \"address\" },\n    ],\n    name: \"getUserReserveData\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"currentATokenBalance\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"currentStableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"currentVariableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"principalStableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"scaledVariableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"stableBorrowRate\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"liquidityRate\", type: \"uint256\" },\n      { internalType: \"uint40\", name: \"stableRateLastUpdated\", type: \"uint40\" },\n      { internalType: \"bool\", name: \"usageAsCollateralEnabled\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst ORACLE_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getAssetPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address[]\", name: \"assets\", type: \"address[]\" }],\n    name: \"getAssetsPrices\",\n    outputs: [{ internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  aaveProtocolDataProviderAddress,\n  oracleAddress,\n  account,\n  update,\n  onLoad,\n  PoolAddressProvider,\n  lendingPoolAddress,\n  wethGateway,\n  initConfig,\n  loaded,\n  multicallAddress,\n} = props;\n\nif (!aaveProtocolDataProviderAddress || !oracleAddress || !update || !account)\n  return \"\";\n\nconst signer = Ethers.provider().getSigner();\n\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst multicallv2 = (abi, calls, options, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n\n  const MulticallContract = new ethers.Contract(\n    multicallAddress,\n    MULTICALL_ABI,\n    signer\n  );\n  return MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      return res.map((call, i) => {\n        const [result, data] = call;\n        return result && data !== \"0x\"\n          ? itf.decodeFunctionResult(calls[i].name, data)\n          : null;\n      });\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\n\nconst dataProviderContract = new ethers.Contract(\n  aaveProtocolDataProviderAddress,\n  aaveProtocolDataProviderAbi,\n  signer\n);\n\nconst getTokensPrices = () => {\n  const oracleContract = new ethers.Contract(oracleAddress, ORACLE_ABI, signer);\n  oracleContract.getAssetsPrices(Object.keys(Tokens)).then((res) => {\n    const parsedRes = res.map((price, i) => {\n      return Big(price.toString()).div(100000000).toFixed();\n    });\n\n    const tokensPrice = {};\n    Object.keys(Tokens).forEach((address, index) => {\n      tokensPrice[address] = parsedRes[index];\n    });\n    State.update({\n      tokensPrice,\n    });\n  });\n};\n\nconst getMarkets = () => {\n  dataProviderContract.getAllReservesTokens().then((marketsRaw) => {\n    const markets = marketsRaw.filter((market) => {\n      const add = market[1];\n      return Object.keys(Tokens)\n        .map((t) => t.toLowerCase())\n        .includes(add.toLowerCase());\n    });\n\n    State.update({\n      markets: markets,\n    });\n  });\n};\n\nconst formateTokenReserveData = (\n  data,\n  tokenAddress,\n  symbol,\n  price,\n  aTokenAddress,\n  variableDebtTokenAddress,\n  loanToValue,\n  userReserveParsed\n) => {\n  const [\n    availableLiquidity,\n    totalStableDebt,\n    totalVariableDebt,\n    liquidityRate,\n    variableBorrowRate,\n    stableBorrowRate,\n    averageStableBorrowRate,\n    liquidityIndex,\n    variableBorrowIndex,\n    lastUpdateTimestamp,\n  ] = data;\n\n  const decimalBig = Big(10).pow(Tokens[tokenAddress].decimals);\n\n  const totalDebt = Big(totalStableDebt.toString())\n    .plus(totalVariableDebt.toString())\n    .div(decimalBig)\n    .toFixed();\n\n  const totalDebtRaw = Big(totalStableDebt.toString())\n    .plus(totalVariableDebt.toString())\n    .toFixed();\n\n  const totalDeposit = Big(availableLiquidity.toString())\n    .plus(totalDebtRaw)\n    .div(decimalBig)\n    .toFixed();\n\n  const marketSize = Big(availableLiquidity.toString())\n    .div(decimalBig)\n    .toFixed();\n\n  const Ray = Big(10).pow(27);\n\n  const SECONDS_PER_YEAR = 31536000;\n\n  const depositAPR = Big(liquidityRate).div(Ray);\n\n  const variableBorrowAPR = Big(variableBorrowRate).div(Ray);\n\n  const depositAPY0 = Big(1)\n    .plus(depositAPR.div(Big(SECONDS_PER_YEAR)))\n    .toNumber();\n\n  const depositAPY = Big(\n    100 * (Math.pow(depositAPY0, SECONDS_PER_YEAR) - 1)\n  ).toFixed(2);\n\n  const variableBorrowAPY0 = Big(1)\n    .plus(Big(variableBorrowAPR).div(Big(SECONDS_PER_YEAR)))\n    .toNumber();\n\n  const variableBorrowAPYRaw = Big(\n    100 * (Math.pow(variableBorrowAPY0, SECONDS_PER_YEAR) - 1)\n  );\n\n  const variableBorrowAPY = Big(\n    100 * (Math.pow(variableBorrowAPY0, SECONDS_PER_YEAR) - 1)\n  ).toFixed(2);\n\n  const netApyBig = Big(depositAPY0).minus(variableBorrowAPYRaw);\n\n  return {\n    [tokenAddress]: {\n      availableLiquidity,\n      totalStableDebt,\n      totalVariableDebt,\n      totalBorrows: !price ? \"-\" : Big(totalDebt).toFixed(4),\n      totalSupply: !price ? \"-\" : Big(totalDeposit).toFixed(4),\n      liquidity: !price ? \"-\" : Big(marketSize).toFixed(4),\n      liquidityRate,\n      variableBorrowRate,\n      stableBorrowRate,\n      averageStableBorrowRate,\n      liquidityIndex,\n      variableBorrowIndex,\n      lastUpdateTimestamp,\n      tokenAddress,\n      depositAPY,\n      loanToValue,\n      supplyApy: depositAPY + \"%\",\n      variableBorrowAPY,\n      borrowApy: variableBorrowAPY + \"%\",\n      underlyingPrice: price,\n      underlyingToken:\n        tokenAddress.toLowerCase() === wethAddress.toLowerCase()\n          ? native\n          : Tokens[tokenAddress],\n      dapp: initConfig.name,\n      dappName: initConfig.name,\n      address: tokenAddress,\n      ...(tokenAddress.toLowerCase() === wethAddress.toLowerCase()\n        ? native\n        : Tokens[tokenAddress]),\n      netApy: netApyBig.toFixed(),\n      aTokenAddress,\n      variableDebtTokenAddress,\n      wethAddress,\n      userReserveParsed,\n    },\n  };\n};\n\nconst formatUserReserveData = (data, address) => {\n  const underlyingAsset = Tokens[address];\n\n  const scaledATokenBalance = Big(data[0].toString())\n    .div(Big(10).pow(underlyingAsset.decimals))\n    .toFixed();\n\n  const scaledATokenBalanceUsd = Big(data[0].toString())\n    .div(Big(10).pow(underlyingAsset.decimals))\n    .times(state.tokensPrice[address])\n    .toFixed();\n\n  const aTokenBalance = Big(data[0].toString())\n    .div(Big(10).pow(underlyingAsset.decimals))\n    .toFixed();\n\n  const usageAsCollateralEnabledOnUser = data[8];\n\n  const scaledVariableDebt = Big(data[2].toString())\n    .div(Big(10).pow(underlyingAsset.decimals))\n\n    .toFixed();\n\n  const scaledVariableDebtUsd = Big(data[2].toString())\n    .div(Big(10).pow(underlyingAsset.decimals))\n    .times(state.tokensPrice[address])\n    .toFixed();\n\n  const userReserveParsed = {\n    address,\n    underlyingAsset,\n    scaledATokenBalanceUsd,\n    scaledATokenBalance,\n    usageAsCollateralEnabledOnUser,\n    scaledVariableDebt,\n    scaledVariableDebtUsd,\n    aTokenBalance,\n    userMerberShip: usageAsCollateralEnabledOnUser,\n  };\n\n  return userReserveParsed;\n};\n\nif (!state.tokensPrice) {\n  getTokensPrices();\n}\n\nif (!state.markets && state.tokensPrice) {\n  getMarkets();\n}\n\nif (\n  state.markets &&\n  Object.keys(state).length === 2 &&\n  !state.userDataLoading\n) {\n  State.update({\n    userDataLoading: true,\n  });\n\n  const userReserveDataCalls = state.markets.map((market) => {\n    return {\n      address: aaveProtocolDataProviderAddress,\n      name: \"getUserReserveData\",\n      params: [market[1], account],\n    };\n  });\n\n  const tokenReserveDataCals = state.markets.map((market) => {\n    return {\n      address: aaveProtocolDataProviderAddress,\n      name: \"getReserveData\",\n      params: [market[1]],\n    };\n  });\n\n  const reserveConfigurationDataCalls = state.markets\n    .map((market) => {\n      return [\n        {\n          address: aaveProtocolDataProviderAddress,\n          name: \"getReserveConfigurationData\",\n          params: [market[1]],\n        },\n\n        {\n          address: aaveProtocolDataProviderAddress,\n          name: \"getReserveTokensAddresses\",\n          params: [market[1]],\n        },\n      ];\n    })\n    .flat();\n\n  // get user reserve data\n  multicallv2(aaveProtocolDataProviderAbi, userReserveDataCalls, {})\n    .then((res) => {\n      const userReserveParsedDataList = res.map((data, i) => {\n        return formatUserReserveData(data, state.markets[i][1]);\n      });\n      return userReserveParsedDataList;\n    })\n    .then((userReserveParsedDataList) => {\n      //  get configuration data\n      multicallv2(\n        aaveProtocolDataProviderAbi,\n        reserveConfigurationDataCalls,\n        {}\n      )\n        .then((res) => {\n          const loanToValues = [];\n\n          const aTokenAddressList = [];\n\n          const variableDebtTokenAddressList = [];\n\n          res.forEach((data, i) => {\n            if (i % 2 == 0) {\n              const loanToValue = Big(data[1].toString()).div(100).toNumber();\n              loanToValues.push(loanToValue);\n            }\n          });\n\n          res.forEach((data, i) => {\n            if (i % 2 == 1) {\n              const aTokenAddress = data[0];\n              const variableDebtTokenAddress = data[2];\n              aTokenAddressList.push(aTokenAddress);\n              variableDebtTokenAddressList.push(variableDebtTokenAddress);\n            }\n          });\n\n          return loanToValues.map((loanToValue, i) => {\n            return {\n              loanToValue,\n              aTokenAddress: aTokenAddressList[i],\n              variableDebtTokenAddress: variableDebtTokenAddressList[i],\n            };\n          });\n        })\n        .then((configurationList) => {\n          multicallv2(\n            aaveProtocolDataProviderAbi,\n            tokenReserveDataCals,\n            {}\n          ).then((tokenReserveDataList) => {\n            const formattedTokenReserveDataList = tokenReserveDataList.map(\n              (data, index) => {\n                return formateTokenReserveData(\n                  data,\n\n                  state.markets[index][1],\n                  state.markets[index][0],\n                  state.tokensPrice[state.markets[index][1]],\n                  configurationList[index].aTokenAddress,\n                  configurationList[index].variableDebtTokenAddress,\n                  configurationList[index].loanToValue,\n                  userReserveParsedDataList[index]\n                );\n              }\n            );\n\n            const toUpdateObj = {};\n\n            formattedTokenReserveDataList.forEach((data) => {\n              const address = Object.keys(data)[0];\n              toUpdateObj[address] = data[address];\n            });\n\n            console.log(\"toUpdateObj: \", toUpdateObj);\n\n            State.update(toUpdateObj);\n          });\n        });\n    });\n}\n\nif (\n  state.markets &&\n  state.tokensPrice &&\n  Object.keys(state).length === state.markets.length + 3\n) {\n  const { markets, tokensPrice, balances, userDataLoading, ...marketData } =\n    state;\n\n  const parsedData = [];\n\n  Object.keys(marketData).forEach((address) => {\n    const market = marketData[address];\n\n    parsedData.push(market.userReserveParsed);\n  });\n\n  let userTotalSupplyUsd = Big(0);\n  let userTotalBorrowUsd = Big(0);\n\n  parsedData.forEach((data) => {\n    userTotalSupplyUsd = userTotalSupplyUsd.plus(data.scaledATokenBalanceUsd);\n\n    userTotalBorrowUsd = userTotalBorrowUsd.plus(data.scaledVariableDebtUsd);\n  });\n\n  State.update({\n    userData: {\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      parsedData,\n    },\n  });\n}\nif (\n  state.userData &&\n  state.markets &&\n  Object.keys(state).length === state.markets.length + 4\n) {\n  const {\n    markets,\n    tokensPrice,\n    balances,\n    userData,\n    userDataLoading,\n    ...marketData\n  } = state;\n\n  userData.parsedData.forEach((d) => {\n    const { address } = d;\n    marketData[address].userMerberShip = d.userMerberShip;\n  });\n\n  let netApy = Big(0);\n\n  userData.parsedData.forEach((d) => {\n    const { address } = d;\n    marketData[address] = {\n      ...marketData[address],\n      ...d,\n      userSupply: d.scaledATokenBalance,\n      userBorrow: d.scaledVariableDebt,\n    };\n  });\n\n  let totalCollateralUsd = Big(0);\n\n  Object.keys(marketData).forEach((address, i) => {\n    const market = marketData[address];\n\n    const { netApy: netApyRaw } = market;\n    netApy = netApy.plus(netApyRaw);\n\n    market.userUnderlyingBalance = market.aTokenBalance;\n\n    market.lendingPoolAddress = lendingPoolAddress;\n\n    market.wethGateway = wethGateway;\n\n    market.address = market.aTokenAddress;\n\n    if (userData.parsedData[i]) {\n      const data = userData.parsedData[i];\n      if (data.usageAsCollateralEnabledOnUser) {\n        totalCollateralUsd = totalCollateralUsd\n          .plus(data.scaledATokenBalanceUsd)\n          .times(market.loanToValue / 100);\n      }\n    }\n  });\n\n  userData.totalCollateralUsd = totalCollateralUsd.toFixed();\n\n  userData.netApy = netApy.toFixed(2);\n\n  const parsedMarketData = {};\n\n  Object.entries(marketData).map(([address, market]) => {\n    parsedMarketData[market.aTokenAddress] = market;\n  });\n\n  onLoad({\n    ...{ ...userData, ...props },\n    markets: parsedMarketData,\n    name: initConfig.name,\n  });\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.Lending.GranaryData", "fact_widget_deployments_id": "fc89a72068d8b0f593a61ca4bdbaa0bc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 10}