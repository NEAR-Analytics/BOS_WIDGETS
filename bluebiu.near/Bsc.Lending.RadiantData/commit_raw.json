{"tx_hash": "A75tj5b9T4ZnU2JkbuZWJLaYB3XJGmX8NdgDiYEJQsiv", "action_id_social": "HNuzbU1b3xrBRD4uF2iQbxXSmNcG8LG3MjrcaW12HQDm-0-widget", "block_id": 102379579, "block_timestamp": "2023-10-01T14:40:03.261Z", "signer_id": "bluebiu.near", "widget_name": "Bsc.Lending.RadiantData", "source_code": "const native = {\n  address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n  decimals: 18,\n  symbol: \"BNB\",\n  name: \"BNB\",\n  description: \"native\",\n  icon: \"https://ipfs.near.social/ipfs/bafkreiaeq6ca67je5ocago6vk2efwxiqurxgemputx7p2nt6n2p3zo65xq\",\n};\n\nconst wethAddress = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n\nconst Tokens = {\n  \"0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c\": {\n    address: \"0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c\",\n    decimals: 18,\n    symbol: \"BTCB\",\n    name: \"BTCB\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreigdklwcldjo4w7viyrym54hdb43wgpv23mbicetszygzapttbgo7q\",\n  },\n\n  \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\": {\n    address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n    decimals: 18,\n    symbol: \"WBNB\",\n    name: \"WBNB\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreiev2yrk7g4ugo3aytnqydxvtwlfw7ycxrxhk7ph6k2334z7djqd3e\",\n  },\n  \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\": {\n    address: \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\",\n    decimals: 18,\n    symbol: \"BUSD\",\n    name: \"BUSD\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibp36dfkfjzgnnbb7u4jxh57gpjmfjerc6pefmyzhueulz5ovd5xy\",\n  },\n  \"0x55d398326f99059fF775485246999027B3197955\": {\n    address: \"0x55d398326f99059fF775485246999027B3197955\",\n    decimals: 18,\n    symbol: \"USDT\",\n    name: \"USDT\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreih45jy7ggj45ck34rf736kb67smsoa52wd7e46c2grh6etd3bhe5i\",\n  },\n\n  \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\": {\n    address: \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\",\n    decimals: 18,\n    symbol: \"USDC\",\n    name: \"USDC\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreie4jihoa76mgyzxhw2yrapihzu2qhkjz6m7u4opoxjebzg6zc2lla\",\n  },\n\n  \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\": {\n    address: \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n    decimals: 18,\n    symbol: \"ETH\",\n    name: \"ETH\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreibspnls7q67q25r2ifv2rrfmvzl744pzuh3s5ekigeqkmyycl2auq\",\n  },\n};\n\nconst aaveProtocolDataProviderAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract ILendingPoolAddressesProvider\",\n        name: \"addressesProvider\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"ADDRESSES_PROVIDER\",\n    outputs: [\n      {\n        internalType: \"contract ILendingPoolAddressesProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllATokens\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"string\", name: \"symbol\", type: \"string\" },\n          { internalType: \"address\", name: \"tokenAddress\", type: \"address\" },\n        ],\n        internalType: \"struct AaveProtocolDataProvider.TokenData[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllReservesTokens\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"string\", name: \"symbol\", type: \"string\" },\n          { internalType: \"address\", name: \"tokenAddress\", type: \"address\" },\n        ],\n        internalType: \"struct AaveProtocolDataProvider.TokenData[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getReserveConfigurationData\",\n    outputs: [\n      { internalType: \"uint256\", name: \"decimals\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"ltv\", type: \"uint256\" },\n      {\n        internalType: \"uint256\",\n        name: \"liquidationThreshold\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"liquidationBonus\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"reserveFactor\", type: \"uint256\" },\n      { internalType: \"bool\", name: \"usageAsCollateralEnabled\", type: \"bool\" },\n      { internalType: \"bool\", name: \"borrowingEnabled\", type: \"bool\" },\n      { internalType: \"bool\", name: \"stableBorrowRateEnabled\", type: \"bool\" },\n      { internalType: \"bool\", name: \"isActive\", type: \"bool\" },\n      { internalType: \"bool\", name: \"isFrozen\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getReserveData\",\n    outputs: [\n      { internalType: \"uint256\", name: \"availableLiquidity\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"totalStableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"totalVariableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"liquidityRate\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"variableBorrowRate\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"stableBorrowRate\", type: \"uint256\" },\n      {\n        internalType: \"uint256\",\n        name: \"averageStableBorrowRate\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"liquidityIndex\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"variableBorrowIndex\", type: \"uint256\" },\n      { internalType: \"uint40\", name: \"lastUpdateTimestamp\", type: \"uint40\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getReserveTokensAddresses\",\n    outputs: [\n      { internalType: \"address\", name: \"aTokenAddress\", type: \"address\" },\n      {\n        internalType: \"address\",\n        name: \"stableDebtTokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"variableDebtTokenAddress\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"address\", name: \"user\", type: \"address\" },\n    ],\n    name: \"getUserReserveData\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"currentATokenBalance\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"currentStableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"currentVariableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"principalStableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"scaledVariableDebt\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"stableBorrowRate\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"liquidityRate\", type: \"uint256\" },\n      { internalType: \"uint40\", name: \"stableRateLastUpdated\", type: \"uint40\" },\n      { internalType: \"bool\", name: \"usageAsCollateralEnabled\", type: \"bool\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst ORACLE_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n    name: \"getAssetPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address[]\", name: \"assets\", type: \"address[]\" }],\n    name: \"getAssetsPrices\",\n    outputs: [{ internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  aaveProtocolDataProviderAddress,\n  oracleAddress,\n  uiPoolDataProviderAddress,\n  account,\n  update,\n  onLoad,\n  PoolAddressProvider,\n  walletBalanceProvider,\n  lendingPoolAddress,\n  wethGateway,\n  initConfig,\n  loaded,\n} = props;\n\nif (\n  !aaveProtocolDataProviderAddress ||\n  !oracleAddress ||\n  !update ||\n  !account ||\n  !uiPoolDataProviderAddress\n)\n  return \"\";\n\nconst dataProviderContract = new ethers.Contract(\n  aaveProtocolDataProviderAddress,\n  aaveProtocolDataProviderAbi,\n  Ethers.provider().getSigner()\n);\n\nconst getTokensPrices = () => {\n  const oracleContract = new ethers.Contract(\n    oracleAddress,\n    ORACLE_ABI,\n    Ethers.provider().getSigner()\n  );\n  oracleContract.getAssetsPrices(Object.keys(Tokens)).then((res) => {\n    const parsedRes = res.map((price, i) => {\n      return Big(price.toString()).div(100000000).toFixed();\n    });\n\n    const tokensPrice = {};\n    Object.keys(Tokens).forEach((address, index) => {\n      tokensPrice[address] = parsedRes[index];\n    });\n    State.update({\n      tokensPrice,\n    });\n  });\n};\n\nconst getUserWalletBalances = () => {\n  const walletBalanceProviderContract = new ethers.Contract(\n    walletBalanceProvider,\n    [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"provider\", type: \"address\" },\n          { internalType: \"address\", name: \"user\", type: \"address\" },\n        ],\n        name: \"getUserWalletBalances\",\n        outputs: [\n          { internalType: \"address[]\", name: \"\", type: \"address[]\" },\n          { internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  const balances = {};\n\n  walletBalanceProviderContract\n    .getUserWalletBalances(PoolAddressProvider, account)\n    .then((res) => {\n      const addresses = res[0];\n      const values = res[1];\n\n      values.forEach((value, index) => {\n        const parsedValue = Big(value.toString())\n          .div(Big(10).pow(Tokens[addresses[index]]?.decimals || 18))\n          .toFixed();\n\n        balances[addresses[index]] = parsedValue;\n      });\n\n      State.update({\n        balances,\n      });\n    });\n};\n\nif (!state.balances) {\n  getUserWalletBalances();\n}\n\nconst getMarkets = () => {\n  dataProviderContract.getAllReservesTokens().then((markets) => {\n    State.update({\n      markets,\n    });\n    markets.forEach((token) => {\n      const [symbol, address] = token;\n\n      const tokensPrice = state.tokensPrice;\n\n      dataProviderContract\n        .getReserveConfigurationData(address)\n        .then((res) => {\n          const loanToValue = Big(res[1].toString()).div(100).toNumber();\n\n          return loanToValue;\n        })\n        .then((loanToValue) => {\n          dataProviderContract\n            .getReserveTokensAddresses(address)\n            .then((data) => {\n              const aTokenAddress = data[0];\n              const variableDebtTokenAddress = data[2];\n              getTokenReserveData(\n                address,\n                symbol,\n                tokensPrice[address],\n                aTokenAddress,\n                variableDebtTokenAddress,\n                loanToValue\n              );\n            });\n        });\n    });\n  });\n};\n\nconst getTokenReserveData = (\n  tokenAddress,\n  symbol,\n  price,\n  aTokenAddress,\n  variableDebtTokenAddress,\n  loanToValue\n) => {\n  dataProviderContract.getReserveData(tokenAddress).then((data) => {\n    const [\n      availableLiquidity,\n      totalStableDebt,\n      totalVariableDebt,\n      liquidityRate,\n      variableBorrowRate,\n      stableBorrowRate,\n      averageStableBorrowRate,\n      liquidityIndex,\n      variableBorrowIndex,\n      lastUpdateTimestamp,\n    ] = data;\n\n    const decimalBig = Big(10).pow(Tokens[tokenAddress].decimals);\n\n    const totalDebt = Big(totalStableDebt.toString())\n      .plus(totalVariableDebt.toString())\n      .div(decimalBig)\n      .toFixed();\n\n    const totalDebtRaw = Big(totalStableDebt.toString())\n      .plus(totalVariableDebt.toString())\n      .toFixed();\n\n    const totalDeposit = Big(availableLiquidity.toString())\n      .plus(totalDebtRaw)\n      .div(decimalBig)\n      .toFixed();\n\n    const marketSize = Big(availableLiquidity.toString())\n      .div(decimalBig)\n      .toFixed();\n\n    const Ray = Big(10).pow(27);\n\n    const SECONDS_PER_YEAR = 31536000;\n\n    const depositAPR = Big(liquidityRate).div(Ray);\n\n    const variableBorrowAPR = Big(variableBorrowRate).div(Ray);\n\n    const depositAPY0 = Big(1)\n      .plus(depositAPR.div(Big(SECONDS_PER_YEAR)))\n      .toNumber();\n\n    const depositAPY = Big(\n      100 * (Math.pow(depositAPY0, SECONDS_PER_YEAR) - 1)\n    ).toFixed(2);\n\n    const variableBorrowAPY0 = Big(1)\n      .plus(Big(variableBorrowAPR).div(Big(SECONDS_PER_YEAR)))\n      .toNumber();\n\n    const variableBorrowAPYRaw = Big(\n      100 * (Math.pow(variableBorrowAPY0, SECONDS_PER_YEAR) - 1)\n    );\n\n    const variableBorrowAPY = Big(\n      100 * (Math.pow(variableBorrowAPY0, SECONDS_PER_YEAR) - 1)\n    ).toFixed(2);\n\n    const netApyBig = Big(depositAPY0).minus(variableBorrowAPYRaw);\n\n    State.update({\n      [tokenAddress]: {\n        availableLiquidity,\n        totalStableDebt,\n        totalVariableDebt,\n        totalBorrows: !price ? \"-\" : Big(totalDebt).toFixed(4),\n        totalSupply: !price ? \"-\" : Big(totalDeposit).toFixed(4),\n        liquidity: !price ? \"-\" : Big(marketSize).toFixed(4),\n        liquidityRate,\n        variableBorrowRate,\n        stableBorrowRate,\n        averageStableBorrowRate,\n        liquidityIndex,\n        variableBorrowIndex,\n        lastUpdateTimestamp,\n        tokenAddress,\n        depositAPY,\n        loanToValue,\n        supplyApy: depositAPY + \"%\",\n        variableBorrowAPY,\n        borrowApy: variableBorrowAPY + \"%\",\n        underlyingPrice: price,\n        underlyingToken:\n          tokenAddress.toLowerCase() === wethAddress.toLowerCase()\n            ? native\n            : Tokens[tokenAddress],\n        dapp: \"Radiant\",\n        dappName: \"Radiant\",\n        address: tokenAddress,\n        ...(tokenAddress.toLowerCase() === wethAddress.toLowerCase()\n          ? native\n          : Tokens[tokenAddress]),\n        userUnderlyingBalance: state.balances[tokenAddress],\n        netApy: netApyBig.toFixed(),\n        aTokenAddress,\n        variableDebtTokenAddress,\n        wethAddress,\n      },\n    });\n  });\n};\n\nconst getUserRevervesData = (markets) => {\n  const abi = [\n    {\n      inputs: [\n        {\n          internalType: \"contract ILendingPoolAddressesProvider\",\n          name: \"provider\",\n          type: \"address\",\n        },\n        { internalType: \"address\", name: \"user\", type: \"address\" },\n      ],\n      name: \"getUserReservesData\",\n      outputs: [\n        {\n          components: [\n            {\n              internalType: \"address\",\n              name: \"underlyingAsset\",\n              type: \"address\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"scaledATokenBalance\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"bool\",\n              name: \"usageAsCollateralEnabledOnUser\",\n              type: \"bool\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"stableBorrowRate\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"scaledVariableDebt\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"principalStableDebt\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"stableBorrowLastUpdateTimestamp\",\n              type: \"uint256\",\n            },\n          ],\n          internalType: \"struct IUiPoolDataProviderV3.UserReserveData[]\",\n          name: \"\",\n          type: \"tuple[]\",\n        },\n        { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ];\n\n  const contract = new ethers.Contract(\n    uiPoolDataProviderAddress,\n    abi,\n    Ethers.provider().getSigner()\n  );\n  contract.getUserReservesData(PoolAddressProvider, account).then((res) => {\n    const parsedData = res[0].map((data) => {\n      const address = data[0];\n\n      const underlyingAsset = Tokens[data[0]];\n\n      const scaledATokenBalanceUsd = Big(data[1].toString())\n        .div(Big(10).pow(underlyingAsset.decimals))\n        .times(state.tokensPrice[address])\n        .toFixed(4);\n\n      const aTokenBalance = Big(data[1].toString())\n        .div(Big(10).pow(underlyingAsset.decimals))\n        .toFixed();\n\n      const usageAsCollateralEnabledOnUser = data[2];\n\n      const scaledVariableDebt = Big(data[4].toString())\n        .div(Big(10).pow(underlyingAsset.decimals))\n        .times(state.tokensPrice[address])\n        .toFixed(4);\n\n      return {\n        address,\n        underlyingAsset,\n        scaledATokenBalanceUsd,\n        usageAsCollateralEnabledOnUser,\n        scaledVariableDebt,\n        aTokenBalance,\n        userMerberShip: usageAsCollateralEnabledOnUser,\n      };\n    });\n\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n\n    parsedData.forEach((data) => {\n      if (data.usageAsCollateralEnabledOnUser) {\n        totalCollateralUsd = totalCollateralUsd.plus(\n          data.scaledATokenBalanceUsd\n        );\n      }\n\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(data.scaledATokenBalanceUsd);\n\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(data.scaledVariableDebt);\n    });\n\n    State.update({\n      userData: {\n        userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n        userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n        totalCollateralUsd: totalCollateralUsd.toString(),\n        parsedData,\n      },\n    });\n  });\n};\n\nif (!state.tokensPrice) {\n  getTokensPrices();\n}\n\nif (\n  !state.markets &&\n  state.tokensPrice &&\n  state.balances &&\n  !state.userLoading\n) {\n  State.update({ userLoading: true });\n\n  getMarkets();\n}\n\nif (state.markets && !state.userData) {\n  getUserRevervesData(state.markets);\n}\n\nif (\n  state.userData &&\n  state.markets &&\n  Object.keys(state).length === state.markets.length + 5\n) {\n  const {\n    markets,\n    tokensPrice,\n    balances,\n    userData,\n    userLoading,\n    ...marketData\n  } = state;\n\n  userData.parsedData.forEach((d) => {\n    const { address } = d;\n    marketData[address].userMerberShip = d.userMerberShip;\n  });\n\n  let netApy = Big(0);\n\n  userData.parsedData.forEach((d) => {\n    const { address } = d;\n    marketData[address] = {\n      ...marketData[address],\n      ...d,\n      userSupply: d.scaledATokenBalanceUsd,\n      userBorrow: d.scaledVariableDebt,\n    };\n  });\n\n  Object.keys(marketData).forEach((address) => {\n    const market = marketData[address];\n\n    const { netApy: netApyRaw } = market;\n    netApy = netApy.plus(netApyRaw);\n\n    market.userUnderlyingBalance = market.aTokenBalance;\n\n    market.lendingPoolAddress = lendingPoolAddress;\n\n    market.wethGateway = wethGateway;\n\n    market.address = market.aTokenAddress;\n  });\n\n  userData.netApy = netApy.toFixed(2);\n\n  const parsedMarketData = {};\n\n  Object.entries(marketData).map(([address, market]) => {\n    parsedMarketData[market.aTokenAddress] = market;\n  });\n\n  onLoad({\n    ...{ ...userData, ...props },\n    markets: parsedMarketData,\n    name: initConfig.name,\n  });\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Bsc.Lending.RadiantData", "fact_widget_deployments_id": "a2f3e1d59e07e22f53d6afb769156ba7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}