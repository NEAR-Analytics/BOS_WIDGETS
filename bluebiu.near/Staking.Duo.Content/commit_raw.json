{"tx_hash": "H5kPRohLNiYJ5Vv5GWwLLue75z3NsCNiGtpcEQScqwod", "action_id_social": "4YA8h6mKLqNBpQjCx9LmxaV1uSLo5dXtVT6pknswLe8e-0-widget", "block_id": 121083678, "block_timestamp": "2024-06-13T14:32:30.446Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Duo.Content", "source_code": "const StyledContainer = styled.div`\n`;\nconst Content = styled.div`\n  padding: 20px 15px;\n`;\nconst Wrapper = styled.div`\n  width: 478px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  border-radius: 16px;\n  margin: 50px auto 0;\n  padding: 20px 0 0px;\n  position: relative;\n`;\nconst BlurWrap = styled.div`\n  position: relative;\n`;\nconst Blur = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  backdrop-filter: blur(4px);\n`;\nconst Summary = styled.div`\n  display: flex;\n  padding: 0 20px 20px;\n  border-bottom: 1px solid rgba(55, 58, 83, 1);\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst SummaryItem = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 16.8px;\n\n  .title {\n    color: rgba(151, 154, 190, 1);\n  }\n\n  .amount {\n    margin-top: 5px;\n    color: rgba(255, 255, 255, 1);\n  }\n\n  &.points-and-yield-selector {\n    > div > div[type=\"button\"] {\n      width: 170px;\n    }\n  }\n`;\nconst Panel = styled.div`\n  height: 100px;\n  border-radius: 12px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  background-color: rgba(46, 49, 66, 1);\n  padding: 15px;\n  margin-bottom: 20px;\n\n  .title {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 16.8px;\n    color: rgba(151, 154, 190, 1);\n  }\n\n  .body {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n  }\n\n  .foot {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n    justify-content: space-between;\n    font-size: 12px;\n    font-weight: 400;\n    line-height: 14.4px;\n    color: rgba(151, 154, 190, 1);\n  }\n`;\nconst Input = styled.input`\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  width: 200px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst List = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 15px;\n\n  .keys {\n    color: rgba(151, 154, 190, 1);\n  }\n\n  .values {\n    color: #fff;\n  }\n`;\n\nconst {\n  dexConfig,\n  wethAddress,\n  multicallAddress,\n  chainIdNotSupport,\n  multicall,\n  prices,\n  account,\n  addAction,\n  toast,\n  chainId,\n  nativeCurrency,\n  tab,\n  StakeTokens,\n  onSuccess,\n} = props;\n\nconst { ExchangeToken, PointsAndYield } = dexConfig;\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nconst UNSTAKE_TOKEN_CONFIG = {\n  [ExchangeToken[0].address]: { ...ExchangeToken[0] }, // DETH\n  [ExchangeToken[1].address]: { ...ExchangeToken[1] }, // DUSD\n  '0x66714db8f3397c767d0a602458b5b4e3c0fe7dd1': { ...ExchangeToken[0] }, // fwDETH\n  '0x866f2c06b83df2ed7ca9c2d044940e7cd55a06d6': { ...ExchangeToken[1] }, // fwDUSD\n};\n\nconst EXCHANGE_TOKEN_CONFIG = {\n  'ETH': '0x66714db8f3397c767d0a602458b5b4e3c0fe7dd1',\n  'WETH': '0x66714db8f3397c767d0a602458b5b4e3c0fe7dd1',\n  'USDB': '0x866f2c06b83df2ed7ca9c2d044940e7cd55a06d6',\n};\n\nState.init({\n  stakeAmount: \"\",\n  curToken: \"\", // token symbol\n  curReceivedToken: ExchangeToken[0], // token symbol receive\n  curPointsAndYield: 1,\n  curPointsAndYieldItem: {},\n  exchangeRate: 1,\n  options: [],\n  TVL: \"\",\n  tokenBal: 0,\n  tvlLoading: false,\n});\n\n// balance\nfunction getTokenBalance(addr) {\n  const contract = new ethers.Contract(\n    addr,\n    [\n      {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ internalType: \"uint256\", name: \"value\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner(),\n  );\n  contract\n    .balanceOf(account)\n    .then((_balance) => {\n      const _bal = formatUnits(_balance, state.curReceivedToken.decimals);\n      State.update({\n        tokenBal: _bal,\n      });\n    })\n    .catch((err) => {\n      console.log(\"Catch-getTokenBalance-error--\", err);\n    });\n}\n\nfunction fetchData(url) {\n  return asyncFetch(url);\n}\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst getTvl = debounce(({ mode, token, key }) => {\n  State.update({ tvlLoading: true });\n  // attention plz\n  // exchange 2 DETH, the tvl token is fwDETH\n  // exchange 2 DUSD, the tvl token is fwDUSD\n  const tvlMode = mode || state.curPointsAndYieldItem.type;\n  const tvlKey = key || state.curPointsAndYieldItem.tvlKey;\n  token  = token || state.curToken;\n  const tvlToken = EXCHANGE_TOKEN_CONFIG[token];\n  if (!tvlMode || !tvlToken) {\n    State.update({ tvlLoading: false });\n    return;\n  }\n  const url = `/duo/exchange/getTvl?token=${tvlToken}&mode=${tvlMode}`;\n  fetchData(url)\n    .then((res) => {\n      if (!res.ok || !res.body.result || !res.body.result[tvlKey]) {\n        State.update({ tvlLoading: false });\n        return;\n      }\n      const tvlRes = res.body.result[tvlKey];\n      if (!tvlRes.liquidity) {\n        State.update({ tvlLoading: false });\n        return;\n      }\n      const tvl = Big(tvlRes.liquidity).div(Big(10).pow(18)).times(prices[token]);\n      State.update({\n        TVL: tvl.toString() || \"-\",\n        tvlLoading: false,\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n      State.update({ tvlLoading: false });\n    });\n}, 900);\n\nuseEffect(() => {\n  const options = StakeTokens?.map((item) => ({\n    text: item.symbol,\n    value: item.symbol,\n  }));\n  State.update({\n    options,\n    curToken: options[0].value,\n  });\n  const addr = StakeTokens.find((item) => item.symbol === options[0].value)?.address;\n  addr && getTokenBalance(addr);\n}, [tab]);\n\nuseEffect(() => {\n  const obj = Object.values(PointsAndYield).find((it) => it.key === state.curPointsAndYield);\n  State.update({\n    curPointsAndYieldItem: obj || {},\n  });\n  getTvl({ mode: obj?.type, key: obj?.tvlKey });\n}, [state.curPointsAndYield]);\n\nconst clickBalance = (_bal) => {\n  State.update({\n    stakeAmount: Big(_bal).toFixed(4, 0),\n  });\n};\n\nuseEffect(() => {\n  if (!state.curToken) return;\n\n  if (tab === \"Stake\") {\n    const _bal = StakeTokens.find(\n      (item) => item.symbol === state.curToken,\n    ).balance;\n\n    let receiveToken = ExchangeToken[0];\n    if ([\"USDB\"].includes(state.curToken)) {\n      receiveToken = ExchangeToken[1];\n    }\n\n    State.update({\n      tokenBal: _bal,\n      curReceivedToken: receiveToken,\n    });\n  }\n}, [state.curToken, tab]);\n\nreturn (\n  <div>\n    <StyledContainer>\n      {\n        tab === 'Stake' ? (\n          <Wrapper>\n            <Summary>\n              <SummaryItem>\n                <div className=\"title\">TVL</div>\n                <div className=\"amount\">\n                  {\n                    state.tvlLoading ? (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    ) : (\n                      <>\n                        $\n                        <Widget\n                          src=\"bluebiu.near/widget/Utils.FormatNumber\"\n                          props={{\n                            number: state.TVL,\n                          }}\n                        />\n                      </>\n                    )\n                  }\n                </div>\n              </SummaryItem>\n              <SummaryItem className=\"points-and-yield-selector\">\n                <Widget\n                  src=\"bluebiu.near/widget/UI.Select.Index\"\n                  props={{\n                    options: Object.values(PointsAndYield).map((it) => ({\n                      text: it.label,\n                      value: it.key,\n                    })),\n                    value: { value: state.curPointsAndYield },\n                    onChange: (option) => {\n                      State.update({\n                        curPointsAndYield: option.value,\n                      });\n                    },\n                  }}\n                />\n              </SummaryItem>\n            </Summary>\n            <Content>\n              <BlurWrap>\n                <Panel>\n                  <div className=\"title\">{tab}</div>\n                  <div className=\"body\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"0\"\n                      value={state.stakeAmount}\n                      onChange={(ev) => {\n                        if (isNaN(Number(ev.target.value))) return;\n                        let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n                        if (Big(state.tokenBal || 0).gt(0) && Big(amount || 0).gt(Big(state.tokenBal || 0))) {\n                          amount = Big(Big(state.tokenBal || 0).toFixed(4, 0)).toString();\n                        }\n\n                        State.update({\n                          stakeAmount: amount,\n                        });\n                      }}\n                    />\n                    <Widget\n                      src=\"bluebiu.near/widget/UI.Select.Index\"\n                      props={{\n                        options: state.options,\n                        value: state.options.find(\n                          (obj) => obj.value === state.curToken,\n                        ),\n                        onChange: (option) => {\n                          State.update({\n                            curToken: option.value,\n                            stakeAmount: '',\n                          });\n                          const addr = StakeTokens.find((item) => item.symbol === option.value)?.address;\n                          addr && getTokenBalance(addr);\n                          getTvl({ token: option.value });\n                        },\n                      }}\n                    />\n                  </div>\n                  <div className=\"foot\">\n                    <div class=\"prices\">\n                      $\n                      {Big(state.stakeAmount || 0)\n                        .times(Big(prices[state.curToken] || 1))\n                        .toFixed(2, 0)}\n                    </div>\n                    <div class=\"balance\">\n                      Balance:\n                      <Widget\n                        src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n                        props={{\n                          value: state.tokenBal,\n                          digit: 4,\n                          onClick: clickBalance,\n                          symbol:\n                            tab === \"Stake\" ? state.curToken : state.curReceivedToken.symbol,\n                        }}\n                      />\n                    </div>\n                  </div>\n                </Panel>\n                <List>\n                  <span className=\"keys\">You will get</span>\n                  <span className=\"values\">\n                {Big(state.stakeAmount || 0)\n                  .div(state.exchangeRate || 1)\n                  .toFixed()}{\" \"}\n                    {tab === \"Stake\" ? state.curReceivedToken.symbol : state.curToken}\n              </span>\n                </List>\n                <List>\n                  <span className=\"keys\">Exchange rate</span>\n                  <span className=\"values\">\n                1{\" \"}\n                    {tab === \"Stake\" ? state.curToken : state.curReceivedToken.symbol}\n                    ={Big(state.exchangeRate || 0).toFixed()}{\" \"}\n                    {tab === \"Stake\" ? state.curReceivedToken.symbol : state.curToken}\n              </span>\n                </List>\n              </BlurWrap>\n              <Widget\n                src=\"bluebiu.near/widget/Staking.Duo.Button\"\n                props={{\n                  ...props,\n                  actionText: tab,\n                  curPointsAndYieldItem: state.curPointsAndYieldItem,\n                  curPointsAndYield: state.curPointsAndYield,\n                  amount: state.stakeAmount,\n                  curToken: state.curToken,\n                  curReceivedToken: state.curReceivedToken,\n                  stakeToken:\n                    tab === \"Stake\"\n                      ? StakeTokens.find((item) => item.symbol === state.curToken)\n                      : StakeTokens[0],\n                  onSuccess: () => {\n                    State.update({ stakeAmount: \"\" });\n                    onSuccess();\n                  },\n                }}\n              />\n            </Content>\n          </Wrapper>\n        ) : (\n          <Widget\n            src=\"bluebiu.near/widget/Staking.Duo.Table\"\n            props={{\n              ...props,\n              actionText: tab,\n              UNSTAKE_TOKEN_CONFIG,\n            }}\n          />\n        )\n      }\n    </StyledContainer>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Duo.Content", "fact_widget_deployments_id": "18e1c247316295c57ea8b51b8df9890a", "inserted_timestamp": "2024-06-13T16:54:46.663Z", "modified_timestamp": "2024-06-13T16:54:46.663Z", "__row_index": 0}