{"tx_hash": "CW1CZvtshkbVhSjMdDGZN9Q9c4kHDPczHpehWPDrWSK8", "action_id_social": "HpRnGHiqBSKoNuo7ypUc3n8FujxAPPanEwa2utnYwe1q-0-widget", "block_id": 121077673, "block_timestamp": "2024-06-13T12:31:56.573Z", "signer_id": "bluebiu.near", "widget_name": "Staking.AgentFi.Withdraw", "source_code": "const StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  height: 100%;\n`;\nconst StyledFormItem = styled.div`\n  border-bottom: 1px solid #373A53;\n  padding-bottom: 18px;\n  padding-top: 18px;\n  \n  &.inline {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  &:first-child {\n    padding-top: 0;\n  }\n`;\nconst StyledFormItemTitle = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 17px;\n  color: #979ABE;\n`;\nconst StyledFormItemBody = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n`;\nconst StyledFormItemFoot = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14.4px;\n  color: rgba(151, 154, 190, 1);\n`;\nconst StyledInput = styled.input`\n  flex: 1;\n  width: 0;\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst StyledList = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n  gap: 8px;\n  margin-top: 8px;\n`;\nconst StyledListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n\n  .label {\n    color: #979ABE;\n  }\n  .value {\n    color: #fff;\n  }\n`;\nconst StyledContent = styled.div`\n  flex: 1;\n`;\nconst StyledButton = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  line-height: 56px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: auto;\n  text-align: center;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst StyledFullSelect = styled.div`\n  width: 100%;\n\n  > div {\n    width: 100%;\n    \n    > div[type=\"button\"] {\n      width: 100%;\n    }\n  }\n`;\nconst StyledTips = styled.div`\n  color: rgb(151, 154, 190);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-bottom: 16px;\n  text-align: center;\n  \n  &.full {\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  &.invalid {\n    color: var(--switch-color);\n    opacity: 0.6;\n  }\n`;\nconst StyledWithdrawTips = styled.div`\n  width: 240px;\n  text-align: center;\n  margin: 0 auto;\n\n  .value {\n    color: var(--switch-color);\n    font-size: 18px;\n  }\n  .title {\n    border-bottom: 1px solid #373A53;\n    font-size: 18px;\n    color: rgb(151, 154, 190);\n    padding: 8px 0;\n  }\n  .assets {\n    margin-top: 8px;\n  }\n  .head-wd {\n    border-bottom: 1px solid #373A53;\n    \n    .col-wd {\n      color: rgb(151, 154, 190);\n    }\n  }\n  .row-wd {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 8px;\n    flex-wrap: nowrap;\n  }\n  .col-wd {\n    flex-shrink: 0;\n    flex-basis: 33.33%;\n    color: #fff;\n    font-size: 14px;\n    text-align: left;\n    padding: 8px 0;\n  }\n  .body-wd {}\n`;\nconst StyledCLMWithdrawRateList = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n`;\nconst StyledCLMWithdrawRate = styled.div`\n  width: 70px;\n  height: 24px;\n  background: #373A53;\n  color: #ffffff;\n  border-radius: 12px;\n  text-align: center;\n  line-height: 24px;\n  font-size: 14px;\n  cursor: pointer;\n\n  &.active {\n    background: var(--switch-color);\n    color: #000;\n  }\n`;\n\nconst WITHDRAW_POOL_ABI_LOOPER = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"receiver\", type: \"address\" },\n    ],\n    name: \"moduleD_withdrawBalanceTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst WITHDRAW_POOL_ABI_DEX = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      { internalType: \"uint8\", name: \"operation\", type: \"uint8\" },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst WITHDRAW_POOL_ABI_CLM = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"receiver\", type: \"address\" },\n      { internalType: \"uint128\", name: \"liquidity\", type: \"uint128\" },\n      { internalType: \"uint160\", name: \"sqrtPriceX96\", type: \"uint160\" },\n      { internalType: \"uint24\", name: \"slippageLiquidity\", type: \"uint24\" },\n    ],\n    name: \"moduleC_partialWithdrawTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nconst {\n  prices,\n  currentStrategy,\n  dexConfig,\n  record,\n  formatTVL,\n  rootAgent,\n  account,\n  onSuccess,\n  addAction,\n  toast,\n  chainId,\n  handleDetailClose,\n  QUERY_POOL_ABI,\n  strategies,\n} = props;\n\nconst { StakeTokens } = dexConfig;\n\nconst actionText = 'Withdraw';\nconst clmWithdrawRateList = [\n  { label: '25%', value: 25 },\n  { label: '50%', value: 50 },\n  { label: '75%', value: 75 },\n  { label: '100%', value: 100 },\n];\n\nconst balanceList = formatTVL(record).list || [];\n\nState.init({\n  unStakePercent: 25,\n  pending: false,\n});\n\nconst queryPoolInfo = ({ fee }) => {\n  return new Promise((resolve) => {\n    const contract = new ethers.Contract(\n      fee.pool,\n      QUERY_POOL_ABI,\n      Ethers.provider().getSigner(),\n    );\n    const params = [];\n    contract.slot0(...params).then((poolAddress) => {\n      const [sqrtPriceX96] = poolAddress;\n      resolve(sqrtPriceX96);\n    }).catch((err) => {\n      console.log('queryPoolInfo failed, ', err);\n      resolve(false);\n    });\n  });\n};\n\nconst handleAmount = (value) => {\n  State.update({\n    unStakePercent: value,\n  });\n};\n\nconst formatAddAction = (actionText, _amount, status, transactionHash, tokenSymbol) => {\n  addAction?.({\n    type: \"Staking\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: props.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nconst handleSubmit = () => {\n  if (!record.agentAddress) return;\n  State.update({\n    pending: true,\n  });\n  if ([strategies[0].name].includes(record.name.toLowerCase())) {\n    const params = [\n      // receiver\n      account,\n    ];\n    const contract = new ethers.Contract(\n      record.agentAddress,\n      WITHDRAW_POOL_ABI_LOOPER,\n      Ethers.provider().getSigner()\n    );\n    const getTx = (gas) => {\n      const contractOption = {\n        gasLimit: gas || 4000000,\n      }\n      contract.moduleD_withdrawBalanceTo(...params, contractOption)\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              const { status, transactionHash } = res;\n              State.update({\n                pending: false,\n              });\n              if (status !== 1) throw new Error(\"\");\n              // call back\n              handleDetailClose();\n              onSuccess();\n              formatAddAction(actionText, balanceList[0]?.balance, status, transactionHash, balanceList[0]?.symbol);\n              toast?.success({\n                title: `${actionText} Successfully!`,\n                text: `${actionText} ${Big(balanceList[0]?.balance || 0).toFixed(4)} DETH`,\n                tx: transactionHash,\n                chainId,\n              });\n            })\n            .catch((err) => {\n              console.log('tx error: ', err);\n              State.update({\n                pending: false,\n              });\n              toast?.fail({\n                title: `${actionText} Failed!`,\n                text: err?.message?.includes(\"user rejected transaction\")\n                  ? \"User rejected transaction\"\n                  : ``,\n              });\n            });\n        })\n        .catch((err) => {\n          console.log('contract fn error: ', err);\n          State.update({\n            pending: false,\n          });\n          toast?.fail({\n            title: `${actionText} Failed!`,\n            text: err?.message?.includes(\"user rejected transaction\")\n              ? \"User rejected transaction\"\n              : ``,\n          });\n        });\n    };\n\n    const estimateGas = () => {\n      contract.estimateGas.moduleD_withdrawBalanceTo(\n        ...params,\n        {}\n      ).then((gas) => {\n        getTx(gas);\n      }).catch((err) => {\n        console.log('get gas failed: ', err);\n        getTx();\n      });\n    };\n\n    estimateGas();\n    return;\n  }\n  if ([strategies[3].name, strategies[2].name].includes(record.name.toLowerCase())) {\n    // contract is rootAgent.agentAddress\n    const params = [\n      // to\n      record.agentAddress,\n      // value\n      parseUnits('0', 18),\n      // data\n      `0xc4fb5289000000000000000000000000${account.replace(/^0x/, '')}`,\n      // operation\n      0,\n    ];\n    const contract = new ethers.Contract(\n      rootAgent.agentAddress,\n      WITHDRAW_POOL_ABI_DEX,\n      Ethers.provider().getSigner()\n    );\n    const getTx = (gas) => {\n      const contractOption = {\n        gasLimit: gas || 4000000,\n      }\n      contract.execute(...params, contractOption)\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              const { status, transactionHash } = res;\n              State.update({\n                pending: false,\n              });\n              if (status !== 1) throw new Error(\"\");\n              // call back\n              handleDetailClose();\n              onSuccess();\n              formatAddAction(actionText, balanceList[0]?.balance, status, transactionHash, balanceList[0]?.symbol);\n              toast?.success({\n                title: `${actionText} Successfully!`,\n                text: `${actionText} ${Big(balanceList[0]?.balance || 0).toFixed(4)} ${balanceList[0]?.symbol}`,\n                tx: transactionHash,\n                chainId,\n              });\n            })\n            .catch((err) => {\n              console.log('tx error: ', err);\n              State.update({\n                pending: false,\n              });\n              toast?.fail({\n                title: `${actionText} Failed!`,\n                text: err?.message?.includes(\"user rejected transaction\")\n                  ? \"User rejected transaction\"\n                  : ``,\n              });\n            });\n        })\n        .catch((err) => {\n          console.log('contract fn error: ', err);\n          State.update({\n            pending: false,\n          });\n          toast?.fail({\n            title: `${actionText} Failed!`,\n            text: err?.message?.includes(\"user rejected transaction\")\n              ? \"User rejected transaction\"\n              : ``,\n          });\n        });\n    };\n\n    const estimateGas = () => {\n      contract.estimateGas.execute(\n        ...params,\n        {}\n      ).then((gas) => {\n        getTx(gas);\n      }).catch((err) => {\n        console.log('get gas failed: ', err);\n        getTx();\n      });\n    };\n\n    estimateGas();\n    return;\n  }\n  if (record.name.toLowerCase() === strategies[1].name) {\n    const currentBalancesList = record.balances || [];\n    const currentBalance = currentBalancesList.find((it) => /^BlasterSwap Positions NFT/.test(it.name));\n    if (!currentBalance || Big(currentBalance.balance || 0).lte(0)) {\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: 'This strategy currently has no balance to withdraw!',\n      });\n      State.update({\n        pending: false,\n      });\n      return;\n    }\n    const liquidity = Big(currentBalance.balance || 0).times(Big(state.unStakePercent).div(100));\n\n    if (liquidity.toNumber() !== Math.floor(liquidity.toNumber())) {\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: 'Please select another ratio withdraw!',\n      });\n      State.update({\n        pending: false,\n      });\n      return;\n    }\n    const { name } = currentBalance;\n    // query sqrtprocex96\n    const fee = currentStrategy.meta.feeTierList.find((it) => it.name.includes(name));\n    if (!fee) {\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: 'This strategy currently has no balance to withdraw!',\n      });\n      State.update({\n        pending: false,\n      });\n      return;\n    }\n    queryPoolInfo({ fee }).then((sqrtPriceX96) => {\n      if (!sqrtPriceX96) {\n        toast?.fail({\n          title: `${actionText} Failed!`,\n          text: 'Query pool information failed!',\n        });\n        State.update({\n          pending: false,\n        });\n        return;\n      }\n      const params = [\n        // receiver\n        account,\n        // liquidity - uint128\n        currentStrategy.meta.formatBigInt(liquidity.toNumber()),\n        // sqrtPriceX96 - uint160\n        sqrtPriceX96,\n        // slippageLiquidity - uint24\n        1000000,\n      ];\n      const contract = new ethers.Contract(\n        record.agentAddress,\n        WITHDRAW_POOL_ABI_CLM,\n        Ethers.provider().getSigner()\n      );\n      const getTx = (gas) => {\n        const contractOption = {\n          gasLimit: gas || 4000000,\n        }\n        contract.moduleC_partialWithdrawTo(...params, contractOption)\n          .then((tx) => {\n            tx.wait()\n              .then((res) => {\n                const { status, transactionHash } = res;\n                State.update({\n                  pending: false,\n                });\n                if (status !== 1) throw new Error(\"\");\n                // call back\n                handleDetailClose();\n                onSuccess();\n                formatAddAction(actionText, balanceList[0]?.balance, status, transactionHash, balanceList[0]?.symbol);\n                toast?.success({\n                  title: `${actionText} Successfully!`,\n                  text: `${actionText} ${Big(balanceList[0]?.balance || 0).toFixed(4)} ${balanceList[0]?.symbol}`,\n                  tx: transactionHash,\n                  chainId,\n                });\n              })\n              .catch((err) => {\n                console.log('tx error: ', err);\n                State.update({\n                  pending: false,\n                });\n                toast?.fail({\n                  title: `${actionText} Failed!`,\n                  text: err?.message?.includes(\"user rejected transaction\")\n                    ? \"User rejected transaction\"\n                    : ``,\n                });\n              });\n          })\n          .catch((err) => {\n            console.log('contract fn error: ', err);\n            State.update({\n              pending: false,\n            });\n            toast?.fail({\n              title: `${actionText} Failed!`,\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : ``,\n            });\n          });\n      };\n\n      const estimateGas = () => {\n        contract.estimateGas.moduleC_partialWithdrawTo(\n          ...params,\n          {}\n        ).then((gas) => {\n          getTx(gas);\n        }).catch((err) => {\n          console.log('get gas failed: ', err);\n          getTx();\n        });\n      };\n\n      estimateGas();\n    });\n  }\n};\n\nconst {\n  unStakePercent,\n  pending,\n} = state;\n\nconst renderButton = (disabled) => {\n  return (\n    <StyledButton\n      disabled={pending || disabled}\n      onClick={handleSubmit}\n    >\n      {pending ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : 'WITHDRAW'}\n    </StyledButton>\n  );\n};\n\nconst renderWithdraw = () => {\n  // can select withdraw value\n  if (record.name.toLowerCase() === strategies[1].name) {\n    let noValueDisabled = false;\n    const currentBalancesList = record.balances || [];\n    const currentBalance = currentBalancesList.find((it) => /^BlasterSwap Positions NFT/.test(it.name));\n    if (!currentBalance || Big(currentBalance.balance || 0).lte(0)) {\n      noValueDisabled = true;\n    }\n    return (\n      <>\n        <StyledContent>\n          <StyledFormItem>\n            <StyledFormItemTitle>\n              Withdraw\n            </StyledFormItemTitle>\n            <StyledFormItemBody>\n              <StyledCLMWithdrawRateList>\n                {\n                  clmWithdrawRateList.map((item) => (\n                    <StyledCLMWithdrawRate\n                      key={item.value}\n                      onClick={() => handleAmount(item.value)}\n                      className={`${unStakePercent === item.value ? 'active' : ''}`}\n                    >\n                      {item.label}\n                    </StyledCLMWithdrawRate>\n                  ))\n                }\n              </StyledCLMWithdrawRateList>\n            </StyledFormItemBody>\n            <StyledFormItemBody>\n              <StyledWithdrawTips>\n                <div className=\"value\">{unStakePercent}%</div>\n                <div className=\"title\">Withdraw</div>\n                <div className=\"assets\">\n                  <div className=\"head-wd\">\n                    <div className=\"row-wd\">\n                      <div className=\"col-wd\" style={{ flexBasis: '20%' }}>Asset</div>\n                      <div className=\"col-wd\" style={{ flexBasis: '40%' }}>LP Balance</div>\n                      <div className=\"col-wd\" style={{ flexBasis: '40%' }}>Withdraw</div>\n                    </div>\n                  </div>\n                  <div className=\"body-wd\">\n                    {\n                      balanceList.length ? balanceList.map((b) => (\n                        <div className=\"row-wd\" key={b.symbol}>\n                          <div className=\"col-wd\" style={{ flexBasis: '20%' }}>\n                            {b.symbol}\n                          </div>\n                          <div className=\"col-wd\" style={{ flexBasis: '40%' }}>\n                            {Big(b.balance || 0).toFixed(4, Big.roundDown)}\n                          </div>\n                          <div className=\"col-wd\" style={{ flexBasis: '40%' }}>\n                            {Big(b.balance || 0).times(Big(unStakePercent || 0).div(100)).toFixed(4, Big.roundDown)}\n                          </div>\n                        </div>\n                      )) : null\n                    }\n                  </div>\n                </div>\n              </StyledWithdrawTips>\n            </StyledFormItemBody>\n          </StyledFormItem>\n          {\n            noValueDisabled && (\n              <StyledFormItem>\n                <StyledTips className=\"invalid\">\n                  This strategy currently has no balance to withdraw!\n                </StyledTips>\n              </StyledFormItem>\n\n            )\n          }\n        </StyledContent>\n        {renderButton(!unStakePercent || noValueDisabled)}\n      </>\n    );\n  }\n  // withdraw all but show diff text\n  if ([strategies[0].name].includes(record.name.toLowerCase())) {\n    return (\n      <>\n        <StyledContent>\n          <div style={{ height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n            <StyledTips>\n              All positions will be unwound and funds returned.\n            </StyledTips>\n            <StyledTips>\n              Withdrawal Balance\n            </StyledTips>\n            {\n              balanceList.length ? balanceList.map((tk) => (\n                <StyledTips>\n                  {Big(tk.balance).toFixed(4, Big.roundDown)} {tk.symbol}\n                </StyledTips>\n              )) : (\n                <StyledTips>\n                  No balance\n                </StyledTips>\n              )\n            }\n          </div>\n        </StyledContent>\n        {renderButton(!balanceList.length)}\n      </>\n    );\n  }\n  if (record.name.toLowerCase() === strategies[3].name) {\n    return (\n      <>\n        <StyledContent>\n          <StyledTips className=\"full\">\n            Withdraw all your funds - only recommended after all tasks are completed!\n          </StyledTips>\n        </StyledContent>\n        {renderButton(!balanceList.length)}\n      </>\n    );\n  }\n  if (record.name.toLowerCase() === strategies[2].name) {\n    return (\n      <>\n        <StyledContent>\n          <StyledTips className=\"full\">\n            Withdraw your full position.\n          </StyledTips>\n        </StyledContent>\n        {renderButton(!balanceList.length)}\n      </>\n    );\n  }\n};\n\nreturn (\n  <StyledContainer>\n    {renderWithdraw()}\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.AgentFi.Withdraw", "fact_widget_deployments_id": "633444cda15d26fbe2e10ab5b19cbaae", "inserted_timestamp": "2024-06-13T14:04:50.879Z", "modified_timestamp": "2024-06-13T14:04:50.879Z", "__row_index": 4}