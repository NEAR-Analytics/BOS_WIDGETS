{"tx_hash": "D48TuDeaf3veqijtFM6Qyvbq2EQeopypZG8nAype26J1", "action_id_social": "9iqPxERJzj3xNvYK6BjTXJUbUdkuAE4m7f68mMGqZKA2-0-widget", "block_id": 116850305, "block_timestamp": "2024-04-14T20:38:32.393Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Cog", "source_code": "const {\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  dexConfig,\n  update,\n  onLoad,\n} = props;\nconst { rawMarkets, TOKENS } = dexConfig;\n\nconst ABI = [\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"balanceOf\",\n    inputs: [{ name: \"arg0\", type: \"address\" }],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"convertToAssets\",\n    inputs: [{ name: \"shareAmount\", type: \"uint256\" }],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"totalAssets\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"user_borrow_part\",\n    inputs: [{ name: \"arg0\", type: \"address\" }],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"user_collateral_share\",\n    inputs: [{ name: \"arg0\", type: \"address\" }],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"deposit\",\n    inputs: [\n      { name: \"assets\", type: \"uint256\" },\n      { name: \"receiver\", type: \"address\" },\n    ],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    name: \"Withdraw\",\n    inputs: [\n      { name: \"withdrawer\", type: \"address\", indexed: true },\n      { name: \"receiver\", type: \"address\", indexed: true },\n      { name: \"owner\", type: \"address\", indexed: true },\n      { name: \"assets\", type: \"uint256\", indexed: false },\n      { name: \"shares\", type: \"uint256\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"add_collateral\",\n    inputs: [\n      { name: \"to\", type: \"address\" },\n      { name: \"amount\", type: \"uint256\" },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"borrow\",\n    inputs: [\n      { name: \"amount\", type: \"uint256\" },\n      { name: \"_from\", type: \"address\" },\n      { name: \"to\", type: \"address\" },\n    ],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"repay\",\n    inputs: [{ name: \"payment\", type: \"uint256\" }],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n  {\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n    name: \"remove_collateral\",\n    inputs: [\n      { name: \"to\", type: \"address\" },\n      { name: \"amount\", type: \"uint256\" },\n    ],\n    outputs: [],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"total_asset\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"tuple\",\n        components: [\n          { name: \"elastic\", type: \"uint128\" },\n          { name: \"base\", type: \"uint128\" },\n        ],\n      },\n    ],\n  },\n  {\n    stateMutability: \"view\",\n    type: \"function\",\n    name: \"total_collateral_share\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"uint256\" }],\n  },\n];\nconst { formatUnits } = ethers.utils;\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n  // console.log(\"rawMarkets--\", rawMarkets);\n  function getDebt() {\n    const _contract = dexConfig.VesselManager;\n\n    let abi;\n    let calls;\n    const tokens = Object.keys(dexConfig.markets);\n    if (IS_ETHOS_DAPP) {\n      abi = [\n        {\n          inputs: [\n            { internalType: \"address\", name: \"_borrower\", type: \"address\" },\n            { internalType: \"address\", name: \"_collateral\", type: \"address\" },\n          ],\n          name: \"getTroveDebt\",\n          outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ];\n      calls = tokens.map((addr) => ({\n        address: _contract,\n        name: \"getTroveDebt\",\n        params: [account, addr],\n      }));\n    }\n    if (IS_PREON_DAPP || IS_GRAVITA_DAPP) {\n      abi = [\n        {\n          inputs: [\n            { internalType: \"address\", name: \"_asset\", type: \"address\" },\n            { internalType: \"address\", name: \"_borrower\", type: \"address\" },\n          ],\n          name: \"getVesselDebt\",\n          outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ];\n      calls = tokens.map((addr) => ({\n        address: _contract,\n        name: \"getVesselDebt\",\n        params: [addr, account],\n      }));\n    }\n\n    multicall({\n      abi,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getDebt_res\", res);\n        for (let i = 0, len = res.length; i < len; i++) {\n          const _vesselStatus = res[i] ? \"ACTIVE\" : \"INACTIVE\";\n          const _vesselDebt =\n            res[i] && res[i][0] ? ethers.utils.formatUnits(res[i][0]._hex) : 0;\n          markets[tokens[i]].vesselStatus = _vesselStatus;\n          markets[tokens[i]].vesselDebt = _vesselDebt;\n        }\n\n        onLoad({\n          newMarkets: markets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getDebt_error:\", err);\n      });\n  }\n\n  //Total Value Locked\n  function getTotalAssets() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"totalAssets\",\n      // params: [],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalAssets_res\", res);\n        for (let i = 0; i < res.length; i++) {\n          rawMarkets[i].totalAssets = formatUnits(\n            res[i][0],\n            rawMarkets[i].TOKEN_A.decimals\n          );\n        }\n        onLoad({\n          markets: rawMarkets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getTotalAssets_error:\", err);\n      });\n  }\n  function getAvailableBorrow() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"total_asset\",\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getAvailableBorrow_res\", res);\n        for (let i = 0; i < res.length; i++) {\n          rawMarkets[i].availableBorrow = formatUnits(\n            res[i][0][0],\n            rawMarkets[i].TOKEN_A.decimals\n          );\n        }\n        onLoad({\n          markets: rawMarkets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getAvailableBorrow_error:\", err);\n      });\n  }\n\n  function getTotalCollateral() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"total_collateral_share\",\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getTotalCollateral_res\", res);\n        for (let i = 0; i < res.length; i++) {\n          rawMarkets[i].totalCollateral = formatUnits(\n            res[i][0],\n            rawMarkets[i].TOKEN_B.decimals\n          );\n          rawMarkets[i].collateralSymbol = TOKEN_B.symbol;\n        }\n        onLoad({\n          markets: rawMarkets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getTotalCollateral_error:\", err);\n      });\n  }\n  function getYourDeposited() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((balances) => {\n        console.log(\"getYourDeposited_res\", balances);\n\n        return balances;\n      })\n      .then((balances) => {\n        const calls = rawMarkets.map((item, index) => ({\n          address: item.POOL_MANAGER,\n          name: \"convertToAssets\",\n          params: [balances[index] ? balances[index][0] : 0],\n        }));\n        multicall({\n          abi: ABI,\n          calls,\n          options: {},\n          multicallAddress,\n          provider: Ethers.provider(),\n        }).then((res) => {\n          for (let i = 0; i < res.length; i++) {\n            rawMarkets[i].yourDeposited = formatUnits(\n              res[i] ? res[i][0] : 0,\n              rawMarkets[i].TOKEN_A.decimals\n            );\n            rawMarkets[i].depositSymbol = rawMarkets[i].TOKEN_A.symbol;\n          }\n          onLoad({\n            markets: rawMarkets,\n          });\n        });\n      })\n      .catch((err) => {\n        console.log(\"getYourDeposited_error:\", err);\n      });\n  }\n  function getYourBorrowed() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"user_borrow_part\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getYourBorrowed_res\", res);\n        for (let i = 0; i < res.length; i++) {\n          rawMarkets[i].yourBorrowed = formatUnits(\n            res[i] ? res[i][0] : 0,\n            rawMarkets[i].TOKEN_A.decimals\n          );\n          rawMarkets[i].borrowSymbol = rawMarkets[i].TOKEN_A.symbol;\n        }\n        onLoad({\n          markets: rawMarkets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getYourBorrowed_error:\", err);\n      });\n  }\n\n  function getYourCollateraled() {\n    const calls = rawMarkets.map((item) => ({\n      address: item.POOL_MANAGER,\n      name: \"user_collateral_share\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getYourCollateraled_res\", res);\n        for (let i = 0; i < res.length; i++) {\n          rawMarkets[i].yourCollateraled = formatUnits(\n            res[i] ? res[i][0] : 0,\n            rawMarkets[i].TOKEN_B.decimals\n          );\n          rawMarkets[i].collateralSymbol = rawMarkets[i].TOKEN_B.symbol;\n        }\n        onLoad({\n          markets: rawMarkets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getYourCollateraled_error:\", err);\n      });\n  }\n  function getWalletBalance() {\n    let nativeOToken = \"\";\n\n    const calls = TOKENS.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: [\n        {\n          constant: true,\n          inputs: [\n            {\n              name: \"_owner\",\n              type: \"address\",\n            },\n          ],\n          name: \"balanceOf\",\n          outputs: [\n            {\n              name: \"balance\",\n              type: \"uint256\",\n            },\n          ],\n          payable: false,\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"get_wallet_bal_res:\", res);\n        for (let i = 0; i < res.length; i++) {\n          TOKENS[i].balance = formatUnits(\n            res[i] ? res[i][0] : 0,\n            TOKENS[i].decimals\n          );\n        }\n\n        onLoad({\n          TOKENS,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getWalletBalance_error\", err);\n      });\n  }\n\n  getTotalAssets();\n  getAvailableBorrow();\n  getTotalCollateral();\n  getYourDeposited();\n  getYourBorrowed();\n  getYourCollateraled();\n  getWalletBalance();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Cog", "fact_widget_deployments_id": "6b5ad23ee397f0688dcaa8e3bb88f0bd", "inserted_timestamp": "2024-04-14T23:57:40.254Z", "modified_timestamp": "2024-04-14T23:57:40.254Z", "__row_index": 1}