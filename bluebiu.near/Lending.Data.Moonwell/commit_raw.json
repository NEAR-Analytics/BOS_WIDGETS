{"tx_hash": "DToo8G7LboAzQNjK6nWV6EA87298js9iBjmUPULvEJdq", "action_id_social": "9WLxhfGLFiPvsqA3EqJZBZWjiPeqm5aZAdRAhnPCr4ta-0-widget", "block_id": 112273237, "block_timestamp": "2024-02-07T01:33:54.445Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Moonwell", "source_code": "const OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerTimestamp\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerTimestamp\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      { internalType: \"contract MToken\", name: \"mToken\", type: \"address\" },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst REWARD_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"_user\", type: \"address\" }],\n    name: \"getOutstandingRewardsForUser\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"mToken\", type: \"address\" },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"emissionToken\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"totalAmount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"supplySide\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"borrowSide\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct MultiRewardDistributorCommon.RewardInfo[]\",\n            name: \"rewards\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct MultiRewardDistributorCommon.RewardWithMToken[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract MToken\",\n        name: \"_mToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAllMarketConfigs\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"owner\", type: \"address\" },\n          {\n            internalType: \"address\",\n            name: \"emissionToken\",\n            type: \"address\",\n          },\n          { internalType: \"uint256\", name: \"endTime\", type: \"uint256\" },\n          {\n            internalType: \"uint224\",\n            name: \"supplyGlobalIndex\",\n            type: \"uint224\",\n          },\n          {\n            internalType: \"uint32\",\n            name: \"supplyGlobalTimestamp\",\n            type: \"uint32\",\n          },\n          {\n            internalType: \"uint224\",\n            name: \"borrowGlobalIndex\",\n            type: \"uint224\",\n          },\n          {\n            internalType: \"uint32\",\n            name: \"borrowGlobalTimestamp\",\n            type: \"uint32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"supplyEmissionsPerSec\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"borrowEmissionsPerSec\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct MultiRewardDistributorCommon.MarketConfig[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  oracleAddress,\n  rewardDistributorAddress,\n  account,\n  update,\n  name,\n  onLoad,\n  markets,\n  multicall,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\n\n  let _cTokensData = {};\n  let _loanToValue = null;\n  let _underlyPrice = {};\n  let _liquidity = null;\n  let _underlyingBalance = null;\n  let _userMerberShip = null;\n  let _accountRewards = {};\n  let _rewardsForWell = {};\n  let count = 0;\n  let oTokensLength = Object.values(markets).length;\n  const REWARD_TOKEN = {\n    icon: \"https://ipfs.near.social/ipfs/bafkreih3un4tcbwp3tneicomraozegmftz45sfx4rtg3qyui67nfdrptei\",\n    symbol: \"WELL\",\n  };\n\n  const formatedData = (key) => {\n    console.log(`${name}-${key}`, count);\n    if (count < 6) return;\n    count = 0;\n    oTokensLength = Object.values(markets).length;\n    let totalSupplyUsd = Big(0);\n    let totalBorrowUsd = Big(0);\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n    let totalAccountDistributionApy = Big(0);\n    const markets = {};\n    Object.values(_cTokensData).forEach((market) => {\n      const underlyingPrice = _underlyPrice[market.address];\n      const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n      const marketBorrowUsd = Big(market.totalBorrows || 0).mul(\n        underlyingPrice\n      );\n      totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n      totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(\n        Big(market.userSupply).mul(underlyingPrice)\n      );\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(\n        Big(market.userBorrow).mul(underlyingPrice)\n      );\n      if (_userMerberShip[market.address]) {\n        totalCollateralUsd = totalCollateralUsd.plus(\n          Big(market.userSupply)\n            .mul(underlyingPrice)\n            .mul(_loanToValue[market.address])\n            .div(100)\n        );\n      }\n      const distributionSupplyApy = Big(_rewardsForWell[market.address].supply)\n        .mul(365)\n        .div(marketSupplyUsd.eq(0) ? 1 : marketSupplyUsd)\n        .mul(100)\n        .toFixed(2);\n      const distributionBorrowApy = Big(_rewardsForWell[market.address].borrow)\n        .mul(365)\n        .div(marketBorrowUsd.eq(0) ? 1 : marketBorrowUsd)\n        .mul(100)\n        .toFixed(2);\n      totalAccountDistributionApy = totalAccountDistributionApy\n        .plus(distributionSupplyApy)\n        .plus(distributionBorrowApy);\n      const supplyApy = Big(market.supplyRatePerTimestamp)\n        .mul(60 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .mul(100)\n        .toFixed(2);\n      const borrowApy = Big(market.borrowRatePerTimestamp)\n        .mul(60 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .mul(100)\n        .toFixed(2);\n\n      markets[market.address] = {\n        ...market,\n        loanToValue: _loanToValue[market.address],\n        liquidity: _liquidity[market.address],\n        underlyingPrice: underlyingPrice,\n        userUnderlyingBalance: _underlyingBalance[market.address],\n        userMerberShip: _userMerberShip[market.address],\n        supplyApy: supplyApy + \"%\",\n        borrowApy: borrowApy + \"%\",\n        distributionApy: [\n          {\n            ...REWARD_TOKEN,\n            supply: distributionSupplyApy + \"%\",\n            borrow: distributionBorrowApy + \"%\",\n          },\n        ],\n        dapp: name,\n        rewards,\n      };\n    });\n    let rewards;\n    if (_accountRewards && Big(_accountRewards.reward || 0).gt(0)) {\n      const dailyRewards = totalAccountDistributionApy\n        .mul(userTotalSupplyUsd.add(userTotalBorrowUsd))\n        .div(365 * 100)\n        .div(_accountRewards.price);\n      rewards = [\n        {\n          ...REWARD_TOKEN,\n          dailyRewards: dailyRewards.toString(),\n          price: _accountRewards.price,\n          unclaimed: _accountRewards.reward,\n        },\n      ];\n    }\n    onLoad({\n      markets,\n      rewards,\n      totalSupplyUsd: totalSupplyUsd.toString(),\n      totalBorrowUsd: totalBorrowUsd.toString(),\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      totalCollateralUsd: totalCollateralUsd.toString(),\n    });\n  };\n  const getUnitrollerData = () => {\n    const calls = [];\n    const oTokens = Object.values(markets);\n    oTokens.forEach((token) => {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"markets\",\n        params: [token.address],\n      });\n      if (account) {\n        calls.push({\n          address: unitrollerAddress,\n          name: \"checkMembership\",\n          params: [account, token.address],\n        });\n      }\n    });\n    multicall({\n      abi: UNITROLLER_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _loanToValue = {};\n        _userMerberShip = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const index = Math.floor(i / (account ? 2 : 1));\n          const mod = i % (account ? 2 : 1);\n          switch (mod) {\n            case 0:\n              _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n                res[i][1]._hex,\n                16\n              );\n              break;\n            case 1:\n              _userMerberShip[oTokens[index].address] = res[i][0];\n              break;\n            default:\n          }\n        }\n        count++;\n        formatedData(\"getUnitrollerData\");\n      })\n      .catch((err) => {\n        console.log(\"getUnitrollerData error\", err);\n        setTimeout(() => {\n          getUnitrollerData();\n        }, 1000);\n      });\n  };\n  const getUnderlyPrice = () => {\n    if (!oracleAddress) return;\n    const oTokens = Object.keys(markets);\n    const calls = oTokens.map((token) => ({\n      address: oracleAddress,\n      name: \"getUnderlyingPrice\",\n      params: [token],\n    }));\n    multicall({\n      abi: ORACLE_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyPrice = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            36 - markets[oTokens[i]].underlyingToken.decimals\n          );\n        }\n        count++;\n        formatedData(\"getUnderlyPrice\");\n      })\n      .catch((err) => {\n        console.log(\"getUnderlyPrice error\", err);\n      });\n  };\n  const getOTokenLiquidity = () => {\n    if (!account) {\n      return;\n    }\n    const underlyingTokens = Object.values(markets).map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [token.oTokenAddress],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _liquidity = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const oToken = markets[calls[i].params[0]];\n          _liquidity[oToken.address] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            oToken.underlyingToken.decimals\n          );\n        }\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      })\n      .catch((err) => {\n        console.log(\"getOTokenLiquidity error\", err);\n        setTimeout(() => {\n          getOTokenLiquidity();\n        }, 500);\n      });\n  };\n  const getWalletBalance = () => {\n    let nativeOToken = \"\";\n    const underlyingTokens = Object.values(markets)\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        ...market.underlyingToken,\n        oTokenAddress: market.address,\n      }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyingBalance = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyingBalance[underlyingTokens[i].oTokenAddress] = res[i][0]\n            ? ethers.utils.formatUnits(\n                res[i][0]._hex,\n                underlyingTokens[i].decimals\n              )\n            : \"0\";\n        }\n        if (nativeOToken) {\n          const provider = Ethers.provider();\n          provider.getBalance(account).then((rawBalance) => {\n            _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"getWalletBalance\");\n          });\n        } else {\n          count++;\n          formatedData(\"getWalletBalance\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"getWalletBalance error\", err);\n        setTimeout(() => {\n          getWalletBalance();\n        }, 500);\n      });\n  };\n  const getCTokenData = (oToken) => {\n    if (oTokensLength === 0) return;\n    const calls = [\n      {\n        address: oToken.address,\n        name: \"exchangeRateCurrent\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalSupply\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalBorrows\",\n      },\n      {\n        address: oToken.address,\n        name: \"supplyRatePerTimestamp\",\n      },\n      {\n        address: oToken.address,\n        name: \"borrowRatePerTimestamp\",\n      },\n      {\n        address: oToken.address,\n        name: \"getAccountSnapshot\",\n        params: [account],\n      },\n    ];\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        oTokensLength--;\n        const exchangeRateStored = ethers.utils.formatUnits(\n          res[0][0]._hex,\n          10 + oToken.underlyingToken.decimals\n        );\n        const userSupply = ethers.utils.formatUnits(\n          res[5][1]._hex,\n          oToken.decimals\n        );\n        const totalSupply = ethers.utils.formatUnits(\n          res[1][0]._hex,\n          oToken.decimals\n        );\n        _cTokensData[oToken.address] = {\n          ...oToken,\n          exchangeRateStored,\n          totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n          totalBorrows: ethers.utils.formatUnits(\n            res[2][0]._hex,\n            oToken.underlyingToken.decimals\n          ),\n          supplyRatePerTimestamp: ethers.utils.formatUnits(res[3][0]._hex, 18),\n          borrowRatePerTimestamp: ethers.utils.formatUnits(res[4][0]._hex, 18),\n          userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n          userBorrow: ethers.utils.formatUnits(\n            res[5][2]._hex,\n            oToken.underlyingToken.decimals\n          ),\n        };\n        if (oTokensLength === 0) {\n          count++;\n          formatedData(\"oTokens data\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"oTokens data error\", err);\n        setTimeout(() => {\n          getCTokenData(oToken);\n        }, 500);\n      });\n  };\n  const getCTokensData = () => {\n    Object.values(markets).forEach((market) => {\n      getCTokenData(market);\n    });\n  };\n  const getRewards = () => {\n    const price = prices[REWARD_TOKEN.symbol] || 0.007578;\n    const cTokens = Object.keys(markets);\n    const calls = cTokens.map((token) => ({\n      address: rewardDistributorAddress,\n      name: \"getAllMarketConfigs\",\n      params: [token],\n    }));\n    calls.push({\n      address: rewardDistributorAddress,\n      name: \"getOutstandingRewardsForUser\",\n      params: [account],\n    });\n    multicall({\n      abi: REWARD_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        for (let i = 0, len = res.length; i < len; i++) {\n          const item = res[i];\n          let totalRewards = Big(0);\n          if (i === res.length - 1) {\n            item[0].forEach((slip) => {\n              if (_rewardsForWell[slip[0]]) {\n                totalRewards = totalRewards\n                  .plus(ethers.utils.formatUnits(slip[1][0][2]._hex, 18))\n                  .plus(ethers.utils.formatUnits(slip[1][0][3]._hex, 18));\n              }\n            });\n            _accountRewards = {\n              reward: totalRewards.toString(),\n              price,\n            };\n            count++;\n            formatedData(\"getRewards\");\n            return;\n          }\n          _rewardsForWell[cTokens[i]] = {\n            supply: Big(ethers.utils.formatUnits(item[0][0][7], 18))\n              .mul(price)\n              .mul(60 * 60 * 24),\n            borrow: Big(ethers.utils.formatUnits(item[0][0][8], 18))\n              .mul(price)\n              .mul(60 * 60 * 24),\n          };\n        }\n      })\n      .catch((err) => {\n        console.log(\"rewards error\", err);\n      });\n  };\n\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  getRewards();\n}, [update, account]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Moonwell", "fact_widget_deployments_id": "bcaac4f79598f767068927959d3e0c0a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}