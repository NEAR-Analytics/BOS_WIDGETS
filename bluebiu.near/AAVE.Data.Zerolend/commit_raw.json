{"tx_hash": "3qbj3dbRAnc5RgUWRQDwoNEALX3skmnA3UEJH7rZxjV2", "action_id_social": "8J6my1dn5HsLBRTZsMoFKmYxgZ83BcmVoRzT7ygLoHft-0-widget", "block_id": 121594551, "block_timestamp": "2024-06-20T13:51:15.430Z", "signer_id": "bluebiu.near", "widget_name": "AAVE.Data.Zerolend", "source_code": "const {\n  account,\n  config,\n  multicall,\n  multicallAddress,\n  assetsToSupply,\n  markets,\n  rewardToken,\n  onLoad,\n} = props;\nconsole.log(\"zeroLend--\", props);\nuseEffect(() => {\n  if (!account) return \"\";\n\n  function getRewardsData() {\n    const aTokenAddresss = assetsToSupply?.map((item) => item.aTokenAddress);\n\n    const calls = aTokenAddresss?.map((addr) => ({\n      address: config.incentivesProxy,\n      name: \"getRewardsData\",\n      params: [addr, config.rewardAddress],\n    }));\n    console.log(\"zeroLend-data--\", calls);\n\n    multicall({\n      abi: [\n        {\n          inputs: [\n            { internalType: \"address\", name: \"asset\", type: \"address\" },\n            { internalType: \"address\", name: \"reward\", type: \"address\" },\n          ],\n          name: \"getRewardsData\",\n          outputs: [\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n          ],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"--------------------fetchRewardsData_res\", res);\n\n        onLoad({\n          emissionPerSeconds: res,\n        });\n      })\n      .catch((err) => {\n        console.log(\"fetchRewardsData_err\", err);\n      });\n  }\n\n  function getAllUserRewards() {\n    const arr = markets\n      ?.map((item) => [\n        item.aTokenAddress,\n        // item.stableDebtTokenAddress,\n        item.variableDebtTokenAddress,\n      ])\n      .flat();\n    const addrs = [...new Set(arr)];\n\n    const rewardsProvider = new ethers.Contract(\n      config.incentivesProxy,\n      [\n        {\n          inputs: [\n            { internalType: \"address[]\", name: \"assets\", type: \"address[]\" },\n            { internalType: \"address\", name: \"user\", type: \"address\" },\n          ],\n          name: \"getAllUserRewards\",\n          outputs: [\n            {\n              internalType: \"address[]\",\n              name: \"rewardsList\",\n              type: \"address[]\",\n            },\n            {\n              internalType: \"uint256[]\",\n              name: \"unclaimedAmounts\",\n              type: \"uint256[]\",\n            },\n          ],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n\n    rewardsProvider\n      .getAllUserRewards(addrs, account)\n      .then((res) => {\n        try {\n          console.log(\"getAllUserRewards_res:\", res);\n          const _amount = res[1].reduce((total, cur) => {\n            return Big(total).plus(ethers.utils.formatUnits(cur)).toFixed();\n          }, 0);\n\n          rewardToken[0].unclaimed = _amount;\n          onLoad({\n            rewardData: rewardToken,\n          });\n        } catch (error) {\n          console.log(\"catch_getAllUserRewards_error\", error);\n        }\n      })\n      .catch((err) => {\n        console.log(\"getAllUserRewards_error:\", err);\n      });\n  }\n\n  getRewardsData();\n  getAllUserRewards();\n\n  return <div style={{ display: \"none\" }} />;\n}, [account]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/AAVE.Data.Zerolend", "fact_widget_deployments_id": "978da448a63f44450b541ba6fc505e89", "inserted_timestamp": "2024-06-20T14:55:00.368Z", "modified_timestamp": "2024-06-20T15:54:48.612Z", "__row_index": 0}