{"tx_hash": "7xRjbPy6kKaLunJyyKfXQn19RjRz4gxhpyfhnYVSJp6V", "action_id_social": "69STEQ4TELchsmBEhLNs53srrX66up9eSKPyvHBvf1sB-0-widget", "block_id": 118486578, "block_timestamp": "2024-05-08T06:17:36.400Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.TraderJoe", "source_code": "const OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerSecond\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerSecond\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      { internalType: \"contract MToken\", name: \"mToken\", type: \"address\" },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst REWARD_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"rewardBorrowSpeeds\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"rewardSupplySpeeds\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  oracleAddress,\n  rewardDistributorAddress,\n  account,\n  update,\n  name,\n  onLoad,\n  markets,\n  multicall,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\n\n  let _cTokensData = {};\n  let _loanToValue = null;\n  let _underlyPrice = {};\n  let _liquidity = null;\n  let _underlyingBalance = null;\n  let _userMerberShip = null;\n  let _accountRewards = {};\n  let _rewards = {};\n  let count = 0;\n  let oTokensLength = Object.values(markets).length;\n  const REWARD_TOKEN = [\n    {\n      icon: \"https://ipfs.near.social/ipfs/bafkreiayj2bv6br4lt77qzhty7yu6butss42lqoatekdyk3is76yjxlw4e\",\n      symbol: \"JOE\",\n    },\n    {\n      icon: \"https://ipfs.near.social/ipfs/bafkreiaxodsgromeeaihu44fazsxdopkrqvinqzhyfxvx5mrbcmduqdfpq\",\n      symbol: \"AVAX\",\n    },\n  ];\n\n  const formatedData = (key) => {\n    console.log(`${name}-${key}`, count);\n    if (count < 5) return;\n    count = 0;\n    oTokensLength = Object.values(markets).length;\n    let totalSupplyUsd = Big(0);\n    let totalBorrowUsd = Big(0);\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n    let totalAccountDistributionApy = Big(0);\n    const markets = {};\n    Object.values(_cTokensData).forEach((market) => {\n      const underlyingPrice = _underlyPrice[market.address];\n      const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n      const marketBorrowUsd = Big(market.totalBorrows || 0).mul(\n        underlyingPrice\n      );\n      totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n      totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(\n        Big(market.userSupply).mul(underlyingPrice)\n      );\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(\n        Big(market.userBorrow).mul(underlyingPrice)\n      );\n      if (_userMerberShip[market.address]) {\n        totalCollateralUsd = totalCollateralUsd.plus(\n          Big(market.userSupply)\n            .mul(underlyingPrice)\n            .mul(_loanToValue[market.address])\n            .div(100)\n        );\n      }\n      const distributionApy = [];\n      // REWARD_TOKEN.forEach((reward) => {\n      //   const _reward = _rewards[reward.symbol][market.address];\n      //   const distributionSupplyApy = Big(_reward.supply)\n      //     .div(marketSupplyUsd.eq(0) ? 1 : marketSupplyUsd)\n      //     .plus(1)\n      //     .pow(365)\n      //     .minus(1)\n      //     .mul(100)\n      //     .toFixed(2);\n      //   const distributionBorrowApy = Big(_reward.borrow)\n      //     .div(marketBorrowUsd.eq(0) ? 1 : marketBorrowUsd)\n      //     .plus(1)\n      //     .pow(365)\n      //     .minus(1)\n      //     .mul(100)\n      //     .toFixed(2);\n\n      //   _reward.totalAccountDistributionApy = totalAccountDistributionApy\n      //     .plus(distributionSupplyApy)\n      //     .plus(distributionBorrowApy);\n\n      //   distributionApy.push({\n      //     icon: reward.icon,\n      //     symbol: reward.symbol,\n      //     supply: distributionSupplyApy + \"%\",\n      //     borrow: distributionBorrowApy + \"%\",\n      //   });\n      // });\n\n      const supplyApy = Big(market.supplyRatePerTimestamp)\n        .mul(60 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .mul(100)\n        .toFixed(2);\n      const borrowApy = Big(market.borrowRatePerTimestamp)\n        .mul(60 * 60 * 24)\n        .plus(1)\n        .pow(365)\n        .minus(1)\n        .mul(100)\n        .toFixed(2);\n\n      markets[market.address] = {\n        ...market,\n        loanToValue: _loanToValue[market.address],\n        liquidity: _liquidity[market.address],\n        underlyingPrice: underlyingPrice,\n        userUnderlyingBalance: _underlyingBalance[market.address],\n        userMerberShip: _userMerberShip[market.address],\n        supplyApy: supplyApy + \"%\",\n        borrowApy: borrowApy + \"%\",\n        distributionApy,\n        dapp: name,\n        rewards,\n      };\n    });\n    let rewards = [];\n    // REWARD_TOKEN.forEach((reward) => {\n    //   const _reward = _rewards[reward.symbol];\n    //   if (_reward.reward && Big(_reward.reward || 0).gt(0)) {\n    //     const dailyRewards = _reward.totalAccountDistributionApy\n    //       .mul(userTotalSupplyUsd.add(userTotalBorrowUsd))\n    //       .div(365 * 100)\n    //       .div(_reward.price);\n    //     rewards.push({\n    //       icon: reward.icon,\n    //       symbol: reward.symbol,\n    //       dailyRewards: dailyRewards.toString(),\n    //       price: _reward.price,\n    //       unclaimed: _reward.reward,\n    //     });\n    //   }\n    // });\n\n    onLoad({\n      markets,\n      // rewards,\n      totalSupplyUsd: totalSupplyUsd.toString(),\n      totalBorrowUsd: totalBorrowUsd.toString(),\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      totalCollateralUsd: totalCollateralUsd.toString(),\n    });\n  };\n  const getUnitrollerData = () => {\n    const calls = [];\n    const oTokens = Object.values(markets);\n    oTokens.forEach((token) => {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"markets\",\n        params: [token.address],\n      });\n      if (account) {\n        calls.push({\n          address: unitrollerAddress,\n          name: \"checkMembership\",\n          params: [account, token.address],\n        });\n      }\n    });\n    multicall({\n      abi: UNITROLLER_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _loanToValue = {};\n        _userMerberShip = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const index = Math.floor(i / (account ? 2 : 1));\n          const mod = i % (account ? 2 : 1);\n          switch (mod) {\n            case 0:\n              _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n                res[i][1]._hex,\n                16\n              );\n              break;\n            case 1:\n              _userMerberShip[oTokens[index].address] = res[i][0] || false;\n              break;\n            default:\n          }\n        }\n        count++;\n        formatedData(\"getUnitrollerData\");\n      })\n      .catch((err) => {\n        console.log(\"getUnitrollerData error\", err);\n        setTimeout(() => {\n          getUnitrollerData();\n        }, 1000);\n      });\n  };\n  const getUnderlyPrice = () => {\n    if (!oracleAddress) return;\n    const oTokens = Object.keys(markets);\n    const calls = oTokens.map((token) => ({\n      address: oracleAddress,\n      name: \"getUnderlyingPrice\",\n      params: [token],\n    }));\n    multicall({\n      abi: ORACLE_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyPrice = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            36 - markets[oTokens[i]].underlyingToken.decimals\n          );\n        }\n        count++;\n        formatedData(\"getUnderlyPrice\");\n      })\n      .catch((err) => {\n        console.log(\"getUnderlyPrice error\", err);\n      });\n  };\n  const getOTokenLiquidity = () => {\n    if (!account) {\n      return;\n    }\n    const underlyingTokens = Object.values(markets).map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [token.oTokenAddress],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _liquidity = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          const oToken = markets[calls[i].params[0]];\n          _liquidity[oToken.address] = ethers.utils.formatUnits(\n            res[i][0]._hex,\n            oToken.underlyingToken.decimals\n          );\n        }\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      })\n      .catch((err) => {\n        console.log(\"getOTokenLiquidity error\", err);\n        setTimeout(() => {\n          getOTokenLiquidity();\n        }, 500);\n      });\n  };\n  const getWalletBalance = () => {\n    let nativeOToken = \"\";\n    const underlyingTokens = Object.values(markets)\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        ...market.underlyingToken,\n        oTokenAddress: market.address,\n      }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyingBalance = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyingBalance[underlyingTokens[i].oTokenAddress] = res[i][0]\n            ? ethers.utils.formatUnits(\n                res[i][0]._hex,\n                underlyingTokens[i].decimals\n              )\n            : \"0\";\n        }\n        if (nativeOToken) {\n          const provider = Ethers.provider();\n          provider.getBalance(account).then((rawBalance) => {\n            _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"getWalletBalance\");\n          });\n        } else {\n          count++;\n          formatedData(\"getWalletBalance\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"getWalletBalance error\", err);\n        setTimeout(() => {\n          getWalletBalance();\n        }, 500);\n      });\n  };\n  const getCTokenData = (oToken) => {\n    if (oTokensLength === 0) return;\n    const calls = [\n      {\n        address: oToken.address,\n        name: \"exchangeRateCurrent\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalSupply\",\n      },\n      {\n        address: oToken.address,\n        name: \"totalBorrows\",\n      },\n      {\n        address: oToken.address,\n        name: \"supplyRatePerSecond\",\n      },\n      {\n        address: oToken.address,\n        name: \"borrowRatePerSecond\",\n      },\n      {\n        address: oToken.address,\n        name: \"getAccountSnapshot\",\n        params: [account],\n      },\n    ];\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        oTokensLength--;\n        const exchangeRateStored = ethers.utils.formatUnits(\n          res[0][0]._hex,\n          10 + oToken.underlyingToken.decimals\n        );\n        const userSupply = ethers.utils.formatUnits(\n          res[5][1]._hex,\n          oToken.decimals\n        );\n        const totalSupply = ethers.utils.formatUnits(\n          res[1][0]._hex,\n          oToken.decimals\n        );\n        _cTokensData[oToken.address] = {\n          ...oToken,\n          exchangeRateStored,\n          totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n          totalBorrows: ethers.utils.formatUnits(\n            res[2][0]._hex,\n            oToken.underlyingToken.decimals\n          ),\n          supplyRatePerTimestamp: ethers.utils.formatUnits(res[3][0]._hex, 18),\n          borrowRatePerTimestamp: ethers.utils.formatUnits(res[4][0]._hex, 18),\n          userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n          userBorrow: ethers.utils.formatUnits(\n            res[5][2]._hex,\n            oToken.underlyingToken.decimals\n          ),\n        };\n        if (oTokensLength === 0) {\n          count++;\n          formatedData(\"oTokens data\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"oTokens data error\", err);\n        // setTimeout(() => {\n        //   getCTokenData(oToken);\n        // }, 500);\n      });\n  };\n  const getCTokensData = () => {\n    Object.values(markets).forEach((market) => {\n      getCTokenData(market);\n    });\n  };\n  // const getRewards = () => {\n  //   const cTokens = Object.keys(markets);\n  //   const calls = [];\n  //   cTokens.forEach((token) => {\n  //     calls.push({\n  //       address: rewardDistributorAddress,\n  //       name: \"rewardSupplySpeeds\",\n  //       params: [0, token],\n  //     });\n  //     calls.push({\n  //       address: rewardDistributorAddress,\n  //       name: \"rewardBorrowSpeeds\",\n  //       params: [0, token],\n  //     });\n  //     calls.push({\n  //       address: rewardDistributorAddress,\n  //       name: \"rewardSupplySpeeds\",\n  //       params: [1, token],\n  //     });\n  //     calls.push({\n  //       address: rewardDistributorAddress,\n  //       name: \"rewardBorrowSpeeds\",\n  //       params: [1, token],\n  //     });\n  //   });\n  //   multicall({\n  //     abi: REWARD_ABI,\n  //     calls,\n  //     options: {},\n  //     multicallAddress,\n  //     provider: Ethers.provider(),\n  //   })\n  //     .then((res) => {\n  //       cTokens.forEach((cToken, i) => {\n  //         REWARD_TOKEN.forEach((reward, j) => {\n  //           if (!_rewards[reward.symbol]) _rewards[reward.symbol] = {};\n  //           const price = prices[reward].symbol || 1;\n  //           _rewards[reward.symbol].price = price;\n  //           const index = i * 4 + j * 2;\n  //           _rewards[reward.symbol][cToken] = {\n  //             supply: res[index][0]\n  //               ? ethers.utils\n  //                   .formatUnits(item[index][0]._hex, 18)\n  //                   .mul(price)\n  //                   .mul(60 * 60 * 24)\n  //               : \"0\",\n  //             borrow: res[index + 1][0]\n  //               ? ethers.utils\n  //                   .formatUnits(item[index + 1][0]._hex, 18)\n  //                   .mul(price)\n  //                   .mul(60 * 60 * 24)\n  //               : \"0\",\n  //           };\n  //         });\n  //       });\n  //       count++;\n  //       formatedData(\"getRewards\");\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"rewards error\", err);\n  //     });\n  // };\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  // getRewards();\n}, [update, account]);\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.TraderJoe", "fact_widget_deployments_id": "d625522c34d8e17aee97434f52be6236", "inserted_timestamp": "2024-05-08T07:40:06.719Z", "modified_timestamp": "2024-05-08T07:40:06.719Z", "__row_index": 3}