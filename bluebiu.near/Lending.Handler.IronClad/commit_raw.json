{"tx_hash": "8WYbh5sEoEKYvGqTHw3V72t4jnWDk5yPuQUf6in9WAXc", "action_id_social": "3GvvyJb9PvbbTD2pyY3RLQ22rjyeq6yk8CTcpRniJr2D-0-widget", "block_id": 119062984, "block_timestamp": "2024-05-16T18:18:59.734Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Handler.IronClad", "source_code": "const abi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n      { internalType: \"uint16\", name: \"referralCode\", type: \"uint16\" },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n    ],\n    name: \"withdraw\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"interestRateMode\", type: \"uint256\" },\n      { internalType: \"uint16\", name: \"referralCode\", type: \"uint16\" },\n      { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n    ],\n    name: \"borrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"rateMode\", type: \"uint256\" },\n      { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n    ],\n    name: \"repay\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"bool\", name: \"useAsCollateral\", type: \"bool\" },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst LENDING_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"asset\", type: \"address\" },\n      { internalType: \"bool\", name: \"useAsCollateral\", type: \"bool\" },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst wethGateWayAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"weth\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n    ],\n    name: \"authorizeLendingPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interesRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"borrowETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"emergencyEtherTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"emergencyTokenTransfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getWETHAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repayETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst { update, data, config, amount, account, onLoad } = props;\n\nuseEffect(() => {\n  const isCollateral = data.actionText.includes(\"Collateral\");\n  if (!data.actionText || !data.underlyingToken) return;\n\n  if (!isCollateral && !update) return;\n\n  let params = [];\n\n  let method = \"\";\n\n  let contract = null;\n\n  const isETH = data.underlyingToken.isNative;\n\n  let options = {};\n  if ([\"Deposit\", \"Repay\", \"Withdraw\", \"Borrow\"].includes(data.actionText)) {\n    if (\n      !amount ||\n      !data.actionText ||\n      !data.config.wethGateway ||\n      !data.config.lendingPoolAddress ||\n      !account ||\n      !data.underlyingToken ||\n      !data.variableDebtTokenAddress\n    ) {\n      return;\n    }\n\n    const addressTo = isETH\n      ? data.config.lendingPoolAddress\n      : data.underlyingToken.address;\n\n    const parsedAmount = ethers.utils.parseUnits(\n      amount,\n      data.underlyingToken.decimals\n    );\n    options = {\n      value:\n        isETH && [\"Repay\", \"Deposit\"].includes(data.actionText)\n          ? parsedAmount\n          : 0,\n      gasLimit: 4000000,\n    };\n\n    if (data.actionText === \"Deposit\") {\n      method = isETH ? \"depositETH\" : \"deposit\";\n\n      params = isETH\n        ? [addressTo, account, 0]\n        : [addressTo, parsedAmount, account, 0];\n    }\n    if (data.actionText === \"Withdraw\") {\n      method = isETH ? \"withdrawETH\" : \"withdraw\";\n\n      params = [addressTo, parsedAmount, account];\n    }\n    if (data.actionText === \"Borrow\") {\n      method = isETH ? \"borrowETH\" : \"borrow\";\n\n      params = isETH\n        ? [addressTo, parsedAmount, 2, 0]\n        : [addressTo, parsedAmount, 2, 0, account];\n    }\n    if (data.actionText === \"Repay\") {\n      method = isETH ? \"repayETH\" : \"repay\";\n\n      params = [addressTo, parsedAmount, 2, account];\n    }\n\n    contract = new ethers.Contract(\n      isETH ? data.config.wethGateway : data.config.lendingPoolAddress,\n      isETH ? wethGateWayAbi : abi,\n      Ethers.provider().getSigner()\n    );\n  }\n\n  if (isCollateral) {\n    if (!data.config.lendingPoolAddress || !data.underlyingToken) return;\n    const isEnter = data.actionText === \"Enable as Collateral\";\n    contract = new ethers.Contract(\n      data.config.lendingPoolAddress,\n      LENDING_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    method = \"setUserUseReserveAsCollateral\";\n\n    params = [data.underlyingToken.address, isEnter];\n  }\n  if (!contract) return;\n  console.log(\"HANDLER: \", contract, method, params, options, isETH);\n\n  function handleApprove(tokenAddress, spender, amount) {\n    const TokenContract = new ethers.Contract(\n      tokenAddress,\n      [\n        {\n          inputs: [\n            {\n              internalType: \"address\",\n              name: \"spender\",\n              type: \"address\",\n            },\n            {\n              internalType: \"uint256\",\n              name: \"amount\",\n              type: \"uint256\",\n            },\n          ],\n          name: \"approve\",\n          outputs: [\n            {\n              internalType: \"bool\",\n              name: \"\",\n              type: \"bool\",\n            },\n          ],\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n    console.info(\"to approve: \", tokenAddress, spender, amount);\n\n    return TokenContract.approve(spender, amount)\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n\n            if (status === 1) {\n              return true;\n            } else {\n              toast.fail?.({\n                title: \"Transaction Failed!\",\n                text: `transactionHash ${transactionHash}`,\n              });\n              return false;\n            }\n          })\n          .finally(() => {});\n      })\n      .catch((err) => {\n        console.info(\"approve_error: \", err);\n      });\n  }\n\n  const createTx = (gas) => {\n    const _gas = gas ? Big(gas.toString()).mul(1.2).toFixed(0) : 4000000;\n    contract.populateTransaction[method](...params, {\n      ...options,\n      gasLimit: _gas,\n    })\n      .then((res) => {\n        onLoad({\n          gas: _gas,\n          unsignedTx: res,\n          isError: false,\n        });\n      })\n      .catch((err) => {\n        onLoad({});\n      });\n  };\n\n  if (data.actionText === \"Withdraw\" && isETH) {\n    const _parsedAmount = ethers.utils.parseUnits(\n      amount,\n      data.underlyingToken.decimals\n    );\n    handleApprove(data.address, data.config.wethGateway, _parsedAmount).then(\n      () => {\n        createTx();\n      }\n    );\n  } else {\n    createTx();\n  }\n}, [update]);\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Handler.IronClad", "fact_widget_deployments_id": "c631cf44641e47b086653b5d5986686a", "inserted_timestamp": "2024-05-16T19:50:18.874Z", "modified_timestamp": "2024-05-16T19:50:18.874Z", "__row_index": 0}