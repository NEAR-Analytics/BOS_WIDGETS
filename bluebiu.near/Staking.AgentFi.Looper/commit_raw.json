{"tx_hash": "65TdRFgXvZxVgp2fmpUUvKPiecBz4ACkEWJCZYV6JEPX", "action_id_social": "DykSkt6s3WrJeyTUSZdS41T5Lv9Mduzz4JsvfCm8Gvyk-0-widget", "block_id": 121063375, "block_timestamp": "2024-06-13T07:48:52.601Z", "signer_id": "bluebiu.near", "widget_name": "Staking.AgentFi.Looper", "source_code": "const StyledContainer = styled.div`\n  \n`;\nconst StyledFormItem = styled.div`\n  border-bottom: 1px solid #373A53;\n  padding-bottom: 18px;\n  padding-top: 18px;\n  \n  &.inline {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  &:first-child {\n    padding-top: 0;\n  }\n`;\nconst StyledFormItemTitle = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 17px;\n  color: #979ABE;\n`;\nconst StyledFormItemBody = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n`;\nconst StyledFormItemFoot = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14.4px;\n  color: rgba(151, 154, 190, 1);\n`;\nconst StyledInput = styled.input`\n  flex: 1;\n  width: 0;\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst StyledList = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n  gap: 8px;\n  margin-top: 8px;\n`;\nconst StyledListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n\n  .label {\n    color: #979ABE;\n  }\n  .value {\n    color: #fff;\n  }\n`;\nconst StyledButton = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  line-height: 56px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: 20px;\n  text-align: center;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst StyledFullSelect = styled.div`\n  width: 100%;\n\n  > div {\n    width: 100%;\n    \n    > div[type=\"button\"] {\n      width: 100%;\n    }\n  }\n`;\n\nconst DEPOSIT_POOL_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"wrapMint\", type: \"address\" },\n          { internalType: \"address\", name: \"otoken\", type: \"address\" },\n          { internalType: \"address\", name: \"underlying\", type: \"address\" },\n          { internalType: \"uint8\", name: \"mode\", type: \"uint8\" },\n          { internalType: \"uint256\", name: \"leverage\", type: \"uint256\" },\n        ],\n        name: \"mintParams\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          { internalType: \"address\", name: \"token\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"deposit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"createLoopooorAgentAndExplorer\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"wrapMint\", type: \"address\" },\n          { internalType: \"address\", name: \"otoken\", type: \"address\" },\n          { internalType: \"address\", name: \"underlying\", type: \"address\" },\n          { internalType: \"uint8\", name: \"mode\", type: \"uint8\" },\n          { internalType: \"uint256\", name: \"leverage\", type: \"uint256\" },\n        ],\n        name: \"mintParams\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          { internalType: \"address\", name: \"token\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        name: \"deposit\",\n        type: \"tuple\",\n      },\n      { internalType: \"address\", name: \"rootAgentAddress\", type: \"address\" },\n    ],\n    name: \"createLoopooorAgentForRoot\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nconst {\n  prices,\n  currentStrategy,\n  dexConfig,\n  getTokenBalance,\n  rootAgent,\n  onSuccess,\n  addAction,\n  toast,\n  chainId,\n  handleApprove,\n} = props;\n\nconst { StakeTokens } = dexConfig;\n\nconst actionText = 'Stake';\n\nState.init({\n  stakeAmount: '',\n  stakeTokens: [],\n  stakeToken: {},\n  stakeTokenBalance: 0,\n  pending: false,\n  stakeMode: currentStrategy.meta.modeList[0],\n});\n\nconst handleAmount = (ev) => {\n  if (isNaN(Number(ev.target.value))) return;\n  let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n  if (Big(amount || 0).gt(Big(state.stakeTokenBalance || 0))) {\n    amount = Big(state.stakeTokenBalance || 0).toFixed(4, 0);\n  }\n  State.update({\n    stakeAmount: amount,\n  });\n};\n\nconst handleToken = (option) => {\n  if (option.value === state.stakeToken.value) return;\n  State.update({\n    stakeToken: option,\n    stakeAmount: '',\n  });\n  const currToken = StakeTokens.find((it) => it.symbol === option.value);\n  currToken && getTokenBalance(currToken).then((value) => {\n    State.update({\n      stakeTokenBalance: value,\n    });\n  });\n};\n\nconst handleBalance = (value) => {\n  State.update({\n    stakeAmount: Big(value).toFixed(4, 0),\n  });\n};\n\nconst handleMode = (option) => {\n  State.update({\n    stakeMode: option,\n  });\n};\n\nconst formatAddAction = (actionText, _amount, status, transactionHash, tokenSymbol) => {\n  addAction?.({\n    type: \"Staking\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: props.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nconst handleSubmit = () => {\n  if (Big(state.stakeAmount).lte(0)) return;\n  // if rootAgent.agentAddress: use createLoopooorAgentForRoot\n  // else: use createLoopooorAgentAndExplorer\n  State.update({\n    pending: true,\n  });\n  handleApprove(currentStrategy.meta.contract, state.stakeToken.address, state.stakeAmount, state.stakeToken.decimals).then((approveRes) => {\n    if (!approveRes) {\n      State.update({\n        pending: false,\n      });\n      return;\n    }\n    let method = 'createLoopooorAgentAndExplorer';\n    const params = [\n      [\n        // wrapMint\n        currentStrategy.meta.wrapMint[state.stakeToken.value],\n        // otoken\n        currentStrategy.meta.otoken[state.stakeToken.value],\n        // underlying\n        currentStrategy.meta.underlying[state.stakeToken.value],\n        // mode\n        state.stakeMode.value,\n        // leverage\n        parseUnits('2', 18),\n      ],\n      [\n        // token\n        currentStrategy.meta.underlying[state.stakeToken.value],\n        // amount\n        parseUnits(state.stakeAmount, state.stakeToken.decimals),\n      ]\n    ];\n\n    if (['DUSD', 'DETH'].includes(state.stakeToken.value)) {\n      params[0][3] = 0;\n    }\n\n    if (rootAgent && rootAgent.agentAddress) {\n      params.push(\n        // rootAgentAddress\n        rootAgent.agentAddress\n      );\n      method = 'createLoopooorAgentForRoot';\n    }\n\n    const contract = new ethers.Contract(\n      currentStrategy.meta.contract,\n      DEPOSIT_POOL_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    const getTx = (gas) => {\n      const contractOption = {\n        gasLimit: gas || 4000000,\n      }\n      if (['ETH'].includes(state.stakeToken.value)) {\n        contractOption.value = parseUnits(state.stakeAmount, state.stakeToken.decimals);\n      }\n      contract[method](...params, contractOption)\n        .then((tx) => {\n          tx.wait()\n            .then((res) => {\n              const { status, transactionHash } = res;\n              State.update({\n                pending: false,\n              });\n              if (status !== 1) throw new Error(\"\");\n              onSuccess();\n              formatAddAction(actionText, state.stakeAmount, status, transactionHash, state.stakeToken.value);\n              toast?.success({\n                title: `${actionText} Successfully!`,\n                text: `${actionText} ${Big(state.stakeAmount).toFixed(2)} ${state.stakeToken.value}`,\n                tx: transactionHash,\n                chainId,\n              });\n            })\n            .catch((err) => {\n              console.log('tx error: ', err);\n              State.update({\n                pending: false,\n              });\n              toast?.fail({\n                title: `${actionText} Failed!`,\n                text: err?.message?.includes(\"user rejected transaction\")\n                  ? \"User rejected transaction\"\n                  : ``,\n              });\n            });\n        })\n        .catch((err) => {\n          console.log('contract fn error: ', err);\n          State.update({\n            pending: false,\n          });\n          toast?.fail({\n            title: `${actionText} Failed!`,\n            text: err?.message?.includes(\"user rejected transaction\")\n              ? \"User rejected transaction\"\n              : ``,\n          });\n        });\n    };\n\n    const estimateGas = () => {\n      contract.estimateGas[method](\n        ...params,\n        { value: parseUnits(state.stakeAmount, state.stakeToken.decimals) }\n      ).then((gas) => {\n        getTx(gas);\n      }).catch((err) => {\n        console.log('get gas failed: ', err);\n        getTx();\n      });\n    };\n\n    estimateGas();\n  });\n};\n\nconst {\n  stakeAmount,\n  stakeTokens,\n  stakeToken,\n  stakeTokenBalance,\n  pending,\n  stakeMode,\n} = state;\n\nconst modeList = currentStrategy.meta.modeList.map((it) => {\n  const obj = {\n    ...it,\n  };\n  if (it.text === 'Boost Points') {\n    obj.text = `${it.text} - ${currentStrategy.meta.PointsRate[stakeToken.value]}x`;\n  }\n  return obj;\n});\n\nuseEffect(() => {\n  const _stakeTokens = [];\n  StakeTokens.forEach((it) => {\n    _stakeTokens.push({\n      ...it,\n      text: it.symbol,\n      value: it.symbol,\n      icons: [it.icon],\n    });\n  })\n  State.update({\n    stakeMode: currentStrategy.meta.modeList[0],\n    stakeTokens: _stakeTokens,\n    stakeToken: _stakeTokens[0],\n  });\n  getTokenBalance(StakeTokens[0]).then((value) => {\n    State.update({\n      stakeTokenBalance: value,\n    });\n  });\n}, []);\n\nreturn (\n  <StyledContainer>\n    <StyledFormItem>\n      <StyledFormItemTitle>\n        Stake\n      </StyledFormItemTitle>\n      <StyledFormItemBody>\n        <StyledInput\n          type=\"text\"\n          placeholder=\"0\"\n          value={stakeAmount}\n          onChange={handleAmount}\n        />\n        <Widget\n          src=\"bluebiu.near/widget/UI.Select.Index\"\n          props={{\n            options: stakeTokens,\n            value: stakeToken,\n            onChange: handleToken,\n          }}\n        />\n      </StyledFormItemBody>\n      <StyledFormItemFoot>\n        <div className=\"prices\">\n          ${Big(stakeAmount || 0).times(Big(prices[stakeToken.value] || 1)).toFixed(2, 0)}\n        </div>\n        <div className=\"balance\">\n          Balance:\n          <Widget\n            src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n            props={{\n              value: stakeTokenBalance,\n              digit: 4,\n              onClick: handleBalance,\n              symbol: stakeToken.value,\n            }}\n          />\n        </div>\n      </StyledFormItemFoot>\n    </StyledFormItem>\n    <StyledFormItem>\n      <StyledFormItemTitle>\n        Mode\n      </StyledFormItemTitle>\n      <StyledFormItemBody>\n        <StyledFullSelect>\n          <Widget\n            src=\"bluebiu.near/widget/UI.Select.Index\"\n            props={{\n              options: modeList,\n              value: stakeMode,\n              onChange: handleMode,\n            }}\n          />\n        </StyledFullSelect>\n      </StyledFormItemBody>\n    </StyledFormItem>\n    <StyledList>\n      <StyledListItem>\n        <span className=\"label\">Supply</span>\n        <span className=\"value\">{Big(stakeAmount || 0).times(2).toString()} ETH</span>\n      </StyledListItem>\n      <StyledListItem>\n        <span className=\"label\">Borrow</span>\n        <span className=\"value\">{Big(stakeAmount || 0).toString()} ETH</span>\n      </StyledListItem>\n      <StyledListItem>\n        <span className=\"label\">Leverage</span>\n        <span className=\"value\">{currentStrategy.meta.leverage}x</span>\n      </StyledListItem>\n      <StyledListItem>\n        <span className=\"label\">Target LTV</span>\n        <span className=\"value\">{currentStrategy.meta.targetLTV}</span>\n      </StyledListItem>\n    </StyledList>\n    <StyledButton\n      disabled={pending || !stakeAmount}\n      onClick={handleSubmit}\n    >\n      {pending ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (stakeAmount ? 'Launch Strategy' : 'Enter An Amount')}\n    </StyledButton>\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.AgentFi.Looper", "fact_widget_deployments_id": "6bf33adeed191e8f3eca3099476daf96", "inserted_timestamp": "2024-06-13T09:04:53.640Z", "modified_timestamp": "2024-06-13T09:04:53.640Z", "__row_index": 0}