{"tx_hash": "EhNfWozgfXRTNCNPosXQ73bxd8dG49DGtELhM5aZjjrw", "action_id_social": "HKvvV8x1xCrJvyJHd7rEtp1fvjWA4q8KmzN6M9AQoku9-0-widget", "block_id": 116666910, "block_timestamp": "2024-04-12T07:08:13.554Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.Mimswap", "source_code": "const LP_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"trader\", type: \"address\" },\n      { internalType: \"uint256\", name: \"payBaseAmount\", type: \"uint256\" },\n    ],\n    name: \"querySellBase\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"receiveQuoteAmount\",\n        type: \"uint256\",\n      },\n      { internalType: \"uint256\", name: \"mtFee\", type: \"uint256\" },\n      {\n        internalType: \"enum PMMPricing.RState\",\n        name: \"newRState\",\n        type: \"uint8\",\n      },\n      { internalType: \"uint256\", name: \"newBaseTarget\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"trader\", type: \"address\" },\n      { internalType: \"uint256\", name: \"payQuoteAmount\", type: \"uint256\" },\n    ],\n    name: \"querySellQuote\",\n    outputs: [\n      { internalType: \"uint256\", name: \"receiveBaseAmount\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"mtFee\", type: \"uint256\" },\n      {\n        internalType: \"enum PMMPricing.RState\",\n        name: \"newRState\",\n        type: \"uint8\",\n      },\n      { internalType: \"uint256\", name: \"newQuoteTarget\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getReserves\",\n    outputs: [\n      { internalType: \"uint256\", name: \"baseReserve\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"quoteReserve\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ROUTER_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"lp\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"minimumOut\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"sellBaseTokensForTokens\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"lp\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"minimumOut\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n    ],\n    name: \"sellQuoteTokensForTokens\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst {\n  updater,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  routerAddress,\n  lpAddress,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const amount = Big(inputCurrencyAmount || 0)\n    .mul(Big(10).pow(inputCurrency.decimals))\n    .toFixed(0);\n  const path = [inputCurrency.address, outputCurrency.address];\n  const LpContract = new ethers.Contract(\n    lpAddress,\n    LP_ABI,\n    Ethers.provider().getSigner()\n  );\n\n  const getAmountsOut = () => {\n    const method =\n      inputCurrency.symbol === \"MIM\" ? \"querySellBase\" : \"querySellQuote\";\n\n    LpContract[method](account, amount)\n      .then((res) => {\n        getTransaction({\n          amountOut: res[0],\n          amountoutDesimals: Big(res[0] || 0)\n            .div(Big(10).pow(outputCurrency.decimals))\n            .toFixed(outputCurrency.decimals),\n        });\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        onLoad({\n          inputCurrency,\n          inputCurrencyAmount,\n          outputCurrency,\n          outputCurrencyAmount: \"\",\n          noPair: true,\n        });\n      });\n  };\n\n  const getTransaction = ({ amountOut, amountoutDesimals }) => {\n    const RouterContract = new ethers.Contract(\n      routerAddress,\n      ROUTER_ABI,\n      Ethers.provider().getSigner()\n    );\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n    const _amountOut = Big(amountOut)\n      .mul(1 - (slippage || 0.005))\n      .toFixed(0);\n    let priceImpact = null;\n\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(amountoutDesimals).div(inputCurrencyAmount);\n\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n    const method =\n      inputCurrency.symbol === \"MIM\"\n        ? \"sellBaseTokensForTokens\"\n        : \"sellQuoteTokensForTokens\";\n    const options = {};\n    const params = [lpAddress, account, amount, _amountOut, deadline];\n\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(amountoutDesimals).gt(0.01)\n        ? Big(amountoutDesimals).toPrecision(10)\n        : Big(amountoutDesimals).toFixed(10),\n      priceImpact,\n    };\n\n    const getTx = (_gas) => {\n      RouterContract.populateTransaction[method](...params, {\n        ...options,\n        gasLimit: _gas,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n          });\n        });\n    };\n\n    const estimateGas = () => {\n      RouterContract.estimateGas[method](...params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n          });\n        });\n    };\n    estimateGas();\n  };\n  getAmountsOut();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.Mimswap", "fact_widget_deployments_id": "23dcb3da95c1cc39b031f527ba91ca75", "inserted_timestamp": "2024-04-12T08:33:11.360Z", "modified_timestamp": "2024-04-12T08:33:11.360Z", "__row_index": 0}