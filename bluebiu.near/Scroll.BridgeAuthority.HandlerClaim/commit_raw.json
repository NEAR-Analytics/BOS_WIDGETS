{"tx_hash": "DTGDBe4G1HPesWnDA9hLWsMfVm3fLW86opJ2waysTWA3", "action_id_social": "86tyvh2AziBam4f6s7VTkaH5Ngr58x2T9u7PfgokBxpp-0-widget", "block_id": 116798928, "block_timestamp": "2024-04-14T03:05:01.218Z", "signer_id": "bluebiu.near", "widget_name": "Scroll.BridgeAuthority.HandlerClaim", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n  currentChainId,\n  mainnet,\n  toast,\n  txs,\n} = props;\n\nconst Transactions = styled.div`\n  /* display: flex;\n  justify-content: space-between;\n  align-items: flex-start; */\n  color: var(--label-color);\n  gap: 20px;\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  .list {\n    flex: 1;\n    .tx-line {\n      &:not(:last-child) {\n        border-bottom: 1px solid #343838;\n      } \n    }\n    .claim-line {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px 0;\n      \n    }\n\n  }\n  .fresh {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n  .chain-token-status {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    padding-top: 20px;\n    .chain-token {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      img {\n        height: 22px;\n      }\n    }\n    .btn {\n        cursor: pointer;\n        background-color: #EBF479;\n        color: #000;\n        width: 90px;\n        height: 32px;\n        line-height: 16px;\n        text-align: center;\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n    .complete {\n      color: #979ABE;\n    }\n    .proccessing {\n      color: #00D1FF;\n    }\n  }\n  .time {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n    padding-bottom: 20px;\n    margin-top: 10px;\n    \n    .format-time-link {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      a {\n        color: #64B5FF;\n      }\n    }\n  }\n`\n\nconst RefreshText = styled.div`\n  text-decoration: underline;\n  font-size: 14px;\n  font-weight: 400;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ArrowIcon = styled.div`\n  transform: rotate(180deg);\n  cursor: pointer;\n`;\n\nconst L1MessageBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_nonce\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_message\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"batchIndex\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"bytes\",\n            \"name\": \"merkleProof\",\n            \"type\": \"bytes\"\n          }\n        ],\n        \"internalType\": \"struct IL1ScrollMessenger.L2MessageProof\",\n        \"name\": \"_proof\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"relayMessageWithProof\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n];\n\nconsole.log('txs:', txs)\n\nState.init({\n  isFold: false,\n  isLoadingTx: {},\n  proccessSum: 0,\n  txsUpdated: [],\n  filteredTxs: [],\n  isLoading: false,\n})\n\nconst L1MessageBridgeContract = new ethers.Contract(\n  '0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367',\n  L1MessageBridgeAbi,\n  Ethers.provider().getSigner()\n)\n\nfunction handleClaim(claimInfo, hash) {\n  if (!claimInfo) {\n    return\n  }\n\n  if (currentChainId !== mainnet.id) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(mainnet.id).toString(16)}` },\n    ]);\n    return\n  }\n\n  let toastId\n\n  toastId = toast?.loading({\n    title: `Claim From ETH`,\n  });\n\n\n  L1MessageBridgeContract.relayMessageWithProof(\n    claimInfo.from,\n    claimInfo.to,\n    claimInfo.value,\n    claimInfo.nonce,\n    claimInfo.message,\n    {\n      batchIndex: claimInfo.proof.batch_index,\n      merkleProof: claimInfo.proof.merkle_proof,\n    },\n    {\n      gasLimit: 162000,\n    }).then((tx) => {\n      tx.wait()\n        .then((res) => {\n          txs[hash].status = 2\n          Storage.privateSet(\"claim_txs\", txs);\n          getAllClaimTx()\n\n          toast?.dismiss(toastId);\n          delete state.isLoadingTx[hash]\n          State.update({\n            isLoadingTx: state.isLoadingTx\n          })\n          toast?.success({\n            title: \"Claim Successfully!\",\n            text: `Claim Successfully`,\n            tx: tx,\n            chainId: currentChainId,\n          });\n        })\n        .catch((err) => {\n          console.log(err)\n          delete state.isLoadingTx[hash]\n          State.update({\n            isLoadingTx: state.isLoadingTx\n          })\n          toast?.fail({\n            title: \"Claim Failed!\",\n            text: \"Claim Failed\",\n            tx: '',\n            chainId: currentChainId,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(err)\n      toast?.fail({\n        title: \"Claim Failed!\",\n        text: `Claim Failed`,\n        tx: '',\n        chainId: currentChainId,\n      });\n      delete state.isLoadingTx[hash]\n          State.update({\n            isLoadingTx: state.isLoadingTx\n          })\n    });\n}\n\nfunction getAllClaimTx() {\n  State.update({\n    isLoading: true,\n  })\n\n  return asyncFetch(`https://mainnet-api-bridge-v2.scroll.io/api/l2/unclaimed/withdrawals?address=${account}&page=1&page_size=100`)\n    .then(res => {\n      State.update({\n        isLoading: false,\n        filteredTxs: res.body.data.results\n      })\n    })\n}\n\nfunction formatHash(hash) {\n  return hash.replace(/(\\w{6}).+(\\w{6})/, ($1, $2, $3) => {\n    return `${$2}....${$3}`\n  })\n}\n\nuseEffect(() => {\n  const inter = setInterval(() => {\n    getAllClaimTx()\n  }, 10000)\n\n  return () => {\n    clearInterval(inter)\n  }\n}, [])\n\nuseEffect(() => {\n  if (state.filteredTxs && txs && !state.loading) {\n    const pArray = []\n    let needFold = true\n    let proccessSum = 0\n    pArray = Object.keys(txs).map(key => {\n      const currentTx = txs[key]\n      if (currentTx.status === 2) {\n        return\n      }\n      return asyncFetch(\n        `https://api.orbiter.finance/sdk/transaction/cross-chain/${key}`\n      )\n        .then((res) => {\n          if (res.body.status === \"success\") {\n            \n            state.filteredTxs.forEach(item => {\n              if (item.hash === key) {\n                needFold = true\n                proccessSum += 1\n                if (item.claim_info) {\n                  currentTx.status = 1\n                  currentTx.claim_info = item.claim_info\n                } else {\n                  currentTx.status = 3\n                }\n              }\n            })\n\n\n            if (!currentTx.status && currentTx.fromChainId === 1) {\n              currentTx.status = 2\n            }\n\n          } else {\n            needFold = true\n            proccessSum += 1\n            currentTx.status = 3\n          }\n\n          Storage.privateSet(\"claim_txs\", txs);\n        })\n    })\n\n    Promise.all(pArray).then((res) => {\n      State.update({\n        txsUpdated: Object.values(txs),\n        isFold: needFold,\n        proccessSum\n      })\n    })\n  }\n}, [state.filteredTxs, txs, state.loading])\n\n\nreturn <Transactions>\n  <div className=\"header\">\n    <div className=\"title\">\n      <span>Transaction History</span>\n      <span>{state.proccessSum} Processing</span>\n    </div>\n    <div className=\"fresh\">\n      <RefreshText onClick={() => {\n        getAllClaimTx()\n      }}>\n        {state.isLoading && (\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n            props={{\n              size: 16,\n            }}\n          />\n        )}\n        Refresh\n      </RefreshText>\n      <ArrowIcon onClick={() => {\n        State.update({\n          isFold: !state.isFold\n        })\n      }}>\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Swap.ArrowIcon\"\n          props={{ size: 12 }}\n        />\n      </ArrowIcon>\n    </div>\n  </div>\n  {\n    state.isFold ? <div className=\"list\">\n      {\n        (state.txsUpdated || []).map(tx => {\n          return <div className=\"tx-line\" key={tx.hash}>\n            <div className=\"chain-token-status\">\n              <div className=\"chain-token\">\n                <img src={tx.fromLogo} />\n                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                <img src={tx.toLogo} />\n                <img src={tx.tokenLogo} />\n                <div>{tx.amount} {tx.symbol}</div>\n                <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n                <img src={tx.tokenLogo} />\n                <div>{tx.amount} {tx.symbol}</div>\n              </div>\n              <div>\n                {\n                  tx.status === 1 && <div className=\"btn\" onClick={() => {\n                    if (state.isLoadingTx[tx.hash]) {\n                      return\n                    }\n                    handleClaim(tx.claim_info, tx.hash)\n                    state.isLoadingTx[tx.hash] = true\n                    State.update({\n                      isLoadingTx: state.isLoadingTx\n                    })\n                  }}>\n                    {state.isLoadingTx[tx.hash] && (\n                      <Widget\n                        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                        props={{\n                          size: 16,\n                        }}\n                      />\n                    )}\n                    Claim\n                  </div>\n                }\n                {\n                  tx.status === 2 && <div className=\"complete\">Complete</div>\n                }\n                {\n                  tx.status === 3 && <div className=\"processing\">Processing</div>\n                }\n              </div>\n            </div>\n            <div className=\"time\">\n              <div className=\"format-time-link\">\n                <div className=\"format-time\">\n                  <Widget\n                    src=\"bluebiu.near/widget/Base.Bridge.FormateTxDate\"\n                    props={{\n                      date: tx.time,\n                    }}\n                  />\n                </div>\n                <a target=\"_blank\" className=\"tx-link\" href={tx.link}>Tx</a>\n              </div>\n              <div>~1 hour</div>\n            </div>\n          </div>\n        })\n      }\n    </div> : null\n  }\n\n\n</Transactions>;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Scroll.BridgeAuthority.HandlerClaim", "fact_widget_deployments_id": "f99319a12d5d822c7979b0ad9c352509", "inserted_timestamp": "2024-04-14T04:45:01.032Z", "modified_timestamp": "2024-04-14T04:45:01.032Z", "__row_index": 7}