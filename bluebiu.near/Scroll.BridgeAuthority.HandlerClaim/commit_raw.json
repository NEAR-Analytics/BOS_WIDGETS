{"tx_hash": "9hUrJC2e6khecvoHJ9cU6UpmkcpHEuCLosCC7s1jgy68", "action_id_social": "DZkj6Vc5pQUAFTnD6LiBLSQ4X2UH2R7f5ZWF17tTv9Vw-0-widget", "block_id": 116664031, "block_timestamp": "2024-04-12T06:14:37.395Z", "signer_id": "bluebiu.near", "widget_name": "Scroll.BridgeAuthority.HandlerClaim", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n  currentChainId,\n  mainnet,\n  toast,\n  txs,\n} = props;\n\nconst Transactions = styled.div`\n  /* display: flex;\n  justify-content: space-between;\n  align-items: flex-start; */\n  color: var(--label-color);\n  gap: 20px;\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding: 5px 0;\n  }\n  .list {\n    flex: 1;\n    .claim-line {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px 0;\n      .btn {\n        cursor: pointer;\n        background-color: var(--button-color);\n        color: var(--button-text-color);\n      }\n    }\n\n  }\n  .fresh {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n  .chain-token-status {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    padding-top: 20px;\n    .chain-token {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      img {\n        height: 22px;\n      }\n    }\n  }\n  .time {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 10px;\n    padding-bottom: 20px;\n    margin-top: 10px;\n    border-bottom: 1px solid #343838;\n    .format-time-link {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n  }\n`\n\nconst RefreshText = styled.div`\n  text-decoration: underline;\n  font-size: 14px;\n  font-weight: 400;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ArrowIcon = styled.div`\n  transform: rotate(180deg);\n`;\n\nconst L1MessageBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_nonce\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_message\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"batchIndex\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"bytes\",\n            \"name\": \"merkleProof\",\n            \"type\": \"bytes\"\n          }\n        ],\n        \"internalType\": \"struct IL1ScrollMessenger.L2MessageProof\",\n        \"name\": \"_proof\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"relayMessageWithProof\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n];\n\nconsole.log('txs: ', txs)\n\nconst L1MessageBridgeContract = new ethers.Contract(\n  '0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367',\n  L1MessageBridgeAbi,\n  Ethers.provider().getSigner()\n)\n\nfunction handleClaim(claimInfo) {\n  if (!claimInfo) {\n    return\n  }\n\n  if (currentChainId !== mainnet.id) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(mainnet.id).toString(16)}` },\n    ]);\n    return\n  }\n\n  let toastId\n\n  toastId = toast?.loading({\n    title: `Claim From ETH`,\n  });\n\n\n  L1MessageBridgeContract.relayMessageWithProof(\n    claimInfo.from,\n    claimInfo.to,\n    claimInfo.value,\n    claimInfo.nonce,\n    claimInfo.message,\n    {\n      batchIndex: claimInfo.proof.batch_index,\n      merkleProof: claimInfo.proof.merkle_proof,\n    },\n    {\n      gasLimit: 162000,\n    }).then((tx) => {\n      console.log(tx)\n      tx.wait()\n        .then((res) => {\n          console.log(res)\n          getAllClaimTx()\n\n          toast?.dismiss(toastId);\n\n          toast?.success({\n            title: \"Claim Successfully!\",\n            text: `Claim Successfully`,\n            tx: tx,\n            chainId: currentChainId,\n          });\n        })\n        .catch((err) => {\n          console.log(err)\n          toast?.fail({\n            title: \"Claim Failed!\",\n            text: \"Claim Failed\",\n            tx: '',\n            chainId: currentChainId,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(err)\n      toast?.fail({\n        title: \"Claim Failed!\",\n        text: `Claim Failed`,\n        tx: '',\n        chainId: currentChainId,\n      });\n    });\n}\n\nfunction getAllClaimTx() {\n  State.update({\n    isLoading: true,\n  })\n\n  return asyncFetch(`https://mainnet-api-bridge-v2.scroll.io/api/l2/unclaimed/withdrawals?address=${account}&page=1&page_size=100`)\n    .then(res => {\n      console.log('res2:', res)\n      State.update({\n        isLoading: false,\n        filteredTxs: res.body.data.results\n      })\n    })\n}\n\nfunction formatHash(hash) {\n  return hash.replace(/(\\w{6}).+(\\w{6})/, ($1, $2, $3) => {\n    return `${$2}....${$3}`\n  })\n}\n\nuseEffect(() => {\n  getAllClaimTx()\n}, [])\n\nState.init({\n  filteredTxs: [],\n  isLoading: false\n})\n\n// if (!state.filteredTxs || state.filteredTxs.length === 0) {\n//   return ''\n// }\n\nreturn <Transactions>\n  <div className=\"header\">\n    <div className=\"title\">\n      <span>Transaction History</span>\n      <span>3 Processing</span>\n    </div>\n    <div className=\"fresh\" onClick={getAllClaimTx}>\n      <RefreshText>\n        {state.isLoading && (\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n            props={{\n              size: 16,\n            }}\n          />\n        )}\n        Refresh\n      </RefreshText>\n      <ArrowIcon>\n        <Widget\n          src=\"bluebiu.near/widget/Arbitrum.Swap.ArrowIcon\"\n          props={{ size: 12 }}\n        />\n      </ArrowIcon>\n    </div>\n  </div>\n  <div className=\"list\">\n    {\n      (state.filteredTxs || []).map(item => {\n        return <div className=\"claim-line\">\n          {formatHash(item.hash)}\n          <div className=\"btn\" style={{ opacity: item.claim_info ? 1 : 0.2 }} onClick={() => {\n            handleClaim(item.claim_info)\n          }}>Claim</div>\n        </div>\n      })\n    }\n    {/* {\n      Object.values(txs).map(tx => {\n        return <div key={tx.hash}>\n          <div className=\"chain-token-status\">\n            <div className=\"chain-token\">\n              <img src={tx.fromLogo} />\n              <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n              <img src={tx.toLogo} />\n              <img src={tx.tokenLogo} />\n              <div>{tx.amount} {tx.symbol}</div>\n              <Widget src=\"bluebiu.near/widget/Base.Bridge.SwapRightIcon\" />\n              <img src={tx.tokenLogo} />\n              <div>{tx.amount} {tx.symbol}</div>\n            </div>\n            <div>Processing</div>\n          </div>\n          <div className=\"time\">\n            <div className=\"format-time-link\">\n              <div className=\"format-time\">\n                  <Widget\n                    src=\"bluebiu.near/widget/Base.Bridge.FormateTxDate\"\n                    props={{\n                      date: tx.time,\n                    }}\n                  />\n              </div>\n              <a target=\"_blank\" className=\"tx-link\" src={tx.link}>Tx</a>\n            </div>\n            <div>~1 hour</div>\n          </div>\n        </div>\n      })\n    } */}\n  </div>\n\n</Transactions>;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Scroll.BridgeAuthority.HandlerClaim", "fact_widget_deployments_id": "2656c3cdaa200c4160f0f2b015e57a2c", "inserted_timestamp": "2024-04-12T07:36:15.040Z", "modified_timestamp": "2024-04-12T07:36:15.040Z", "__row_index": 2}