{"tx_hash": "5fzuaPY6Edo6ap7aQoCneU8tUx7BmydwaM3g8LoER14a", "action_id_social": "44863QvkddTXs2u1H38TyQr57qs5Q4bgpcYbiHJqsHuy-0-widget", "block_id": 116610422, "block_timestamp": "2024-04-11T12:48:58.220Z", "signer_id": "bluebiu.near", "widget_name": "Scroll.BridgeAuthority.HandlerClaim", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n  currentChainId,\n  mainnet,\n  toast,\n} = props;\n\n\nconst Transactions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  color: var(--label-color);\n  gap: 20px;\n  .list {\n    flex: 1;\n    .claim-line {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px 0;\n      .btn {\n        cursor: pointer;\n        background-color: var(--button-color);\n        color: var(--button-text-color);\n      }\n    }\n\n  }\n  .fresh {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n`\n\nconst RefreshText = styled.div`\n  text-decoration: underline;\n  font-size: 14px;\n  font-weight: 400;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n`;\n\nconst ArrowIcon = styled.div`\n  transform: rotate(180deg);\n`;\n\nconst L1MessageBridgeAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_nonce\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_message\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"batchIndex\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"bytes\",\n            \"name\": \"merkleProof\",\n            \"type\": \"bytes\"\n          }\n        ],\n        \"internalType\": \"struct IL1ScrollMessenger.L2MessageProof\",\n        \"name\": \"_proof\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"relayMessageWithProof\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n];\n\nconst L1MessageBridgeContract = new ethers.Contract(\n  '0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367',\n  L1MessageBridgeAbi,\n  Ethers.provider().getSigner()\n)\n\nfunction handleClaim(claimInfo) {\n  if (!claimInfo) {\n    return\n  }\n\n  if (currentChainId !== mainnet.id) {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(mainnet.id).toString(16)}` },\n    ]);\n    return\n  }\n\n  let toastId\n\n  toastId = toast?.loading({\n    title: `Claim From ETH`,\n  });\n\n  console.log('111',claimInfo.from,\n    claimInfo.to,\n    claimInfo.value,\n    claimInfo.nonce,\n    claimInfo.message,\n    {\n      batchIndex: claimInfo.proof.batch_index,\n      merkleProof: claimInfo.proof.merkle_proof,\n    },)\n\n  L1MessageBridgeContract.relayMessageWithProof(\n    claimInfo.from,\n    claimInfo.to,\n    claimInfo.value,\n    claimInfo.nonce,\n    claimInfo.message,\n    {\n      batchIndex: claimInfo.proof.batch_index,\n      merkleProof: claimInfo.proof.merkle_proof,\n    },\n    {\n      gasLimit: 5552000,\n    }).then((tx) => {\n      console.log(tx)\n      tx.wait()\n        .then((res) => {\n          console.log(res)\n          getAllClaimTx()\n\n          toast?.dismiss(toastId);\n\n          toast?.success({\n            title: \"Claim Successfully!\",\n            text: `Claim Successfully`,\n            tx: tx,\n            chainId: currentChainId,\n          });\n        })\n        .catch((err) => {\n          console.log(err)\n          toast?.fail({\n            title: \"Claim Failed!\",\n            text: \"Claim Failed\",\n            tx: '',\n            chainId: currentChainId,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(err)\n      toast?.fail({\n        title: \"Claim Failed!\",\n        text: `Claim Failed`,\n        tx: '',\n        chainId: currentChainId,\n      });\n    });\n}\n\nfunction getAllClaimTx() {\n  State.update({\n    isLoading: true,\n  })\n\n  asyncFetch(`https://mainnet-api-bridge.scroll.io/api/claimable?address=${account}&page_size=100&page=1`)\n    .then(res => {\n      console.log('res:', res)\n      if (res.body.data.result) {\n        const fromAccount = res.body.data.result[0].claimInfo.from\n        return asyncFetch(`https://mainnet-api-bridge-v2.scroll.io/api/l2/unclaimed/withdrawals?address=${fromAccount}&page=1&page_size=100`)\n      }\n\n    }).then(res => {\n      console.log('res2:', res)\n      State.update({\n        isLoading: false,\n        filteredTxs: res.body.data.results\n      })\n    })\n}\n\nfunction formatHash(hash) {\n  return hash.replace(/(\\w{6}).+(\\w{6})/, ($1, $2, $3) => {\n    return `${$2}....${$3}`\n  })\n}\n\nuseEffect(() => {\n  getAllClaimTx()\n}, [])\n\nState.init({\n  filteredTxs: [],\n  isLoading: false\n})\n\n// if (!state.filteredTxs || state.filteredTxs.length === 0) {\n//   return ''\n// }\n\nreturn <Transactions>\n  <div className=\"list\">\n    {\n      (state.filteredTxs || []).map(item => {\n        return <div className=\"claim-line\">\n          {formatHash(item.hash)}\n          <div className=\"btn\" style={{ opacity: item.claim_info ? 1 : 0.2 }} onClick={() => {\n            handleClaim(item.claim_info)\n          }}>Claim</div>\n        </div>\n      })\n    }\n  </div>\n  <div className=\"fresh\" onClick={getAllClaimTx}>\n    <RefreshText>\n      {state.isLoading && (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      )}\n      Refresh\n    </RefreshText>\n    <ArrowIcon>\n      <Widget\n        src=\"bluebiu.near/widget/Arbitrum.Swap.ArrowIcon\"\n        props={{ size: 12 }}\n      />\n    </ArrowIcon>\n  </div>\n</Transactions>;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Scroll.BridgeAuthority.HandlerClaim", "fact_widget_deployments_id": "0befc8f90562c2875b3b3ad0474cd1b4", "inserted_timestamp": "2024-04-11T14:43:07.705Z", "modified_timestamp": "2024-04-11T14:43:07.705Z", "__row_index": 0}