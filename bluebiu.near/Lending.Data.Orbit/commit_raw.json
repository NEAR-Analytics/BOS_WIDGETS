{"tx_hash": "ANGGWVMZvCMuZSUdJ4ewDkrXZpqPZApE4SrxE3rZdAvV", "action_id_social": "DbDzK1F5wb8zTqbBJi3seCxoXZ5Yp8Z96CTzHz4xMNKf-0-widget", "block_id": 117493409, "block_timestamp": "2024-04-24T03:07:53.174Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Orbit", "source_code": "const OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"borrowBalanceCurrent\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"reserveFactorMantissa\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  //\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"balanceOfUnderlying\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"borrowBalanceStored\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCash\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalReserves\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  multicallAddress,\n  account,\n  update,\n  name,\n  onLoad,\n  multicall,\n  markets,\n  unitrollerAddress,\n} = props;\n\nconst { formatUnits } = ethers.utils;\nconsole.log(\"ORIBIT-DATA--\", props);\nuseEffect(() => {\n  if (!multicallAddress || !update || !account) return \"\";\n  console.log(`${name}-update`);\n  let _cTokensData = {};\n  let _loanToValue = {};\n  let _underlyPrice = {};\n  let _liquidity = null;\n  let _underlyingBalance = null;\n  let count = 0;\n  const oTokens = Object.values(markets);\n  let oTokensLength = Object.values(markets).length;\n\n  const formatedData = (key) => {\n    console.log(`${name}-${key}`, count);\n    if (count < 8) return;\n    count = 0;\n    oTokensLength = Object.values(markets).length;\n    let totalSupplyUsd = Big(0);\n    let totalBorrowUsd = Big(0);\n    let userTotalSupplyUsd = Big(0);\n    let userTotalBorrowUsd = Big(0);\n    let totalCollateralUsd = Big(0);\n    const markets = {};\n    Object.values(_cTokensData).forEach((market) => {\n      console.log(4444, market);\n      const underlyingPrice = prices[market.symbol] || 1;\n      // const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n      // const marketBorrowUsd = Big(market.totalBorrows || 0).mul(\n      //   underlyingPrice\n      // );\n      // totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n      // totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n      userTotalSupplyUsd = userTotalSupplyUsd.plus(\n        Big(market.userSupply).mul(underlyingPrice)\n      );\n      userTotalBorrowUsd = userTotalBorrowUsd.plus(\n        Big(market.userBorrow).mul(underlyingPrice)\n      );\n\n      // totalCollateralUsd = totalCollateralUsd.plus(\n      //   Big(market.userSupply)\n      //     .mul(underlyingPrice)\n      //     .mul(_loanToValue[market.address])\n      //     .div(100)\n      // );\n      // const supplyApy = Big(market.supplyRatePerBlock)\n      //   .mul(4 * 60 * 24)\n      //   .plus(1)\n      //   .pow(365)\n      //   .minus(1)\n      //   .mul(100);\n\n      // const borrowApy = Big(market.borrowRatePerBlock)\n      //   .mul(4 * 60 * 24)\n      //   .plus(1)\n      //   .pow(365)\n      //   .minus(1)\n      //   .mul(100);\n      const _poolSize = Big(market.cash || 0)\n        .plus(Big(market.totalBorrows || 0))\n        .plus(Big(market.totalReserves || 0))\n        .times(Big(underlyingPrice))\n        .toString();\n\n      markets[market.address] = {\n        ...market,\n        // loanToValue: _loanToValue[market.address],\n        // liquidity: _liquidity[market.address],\n        // underlyingPrice: underlyingPrice,\n        userUnderlyingBalance: _underlyingBalance[market.address],\n        // supplyApy: supplyApy.toFixed(2) + \"%\",\n        // borrowApy: borrowApy.toFixed(2) + \"%\",\n        poolSize: _poolSize,\n        dapp: name,\n      };\n    });\n\n    onLoad({\n      markets,\n      totalSupplyUsd: totalSupplyUsd.toString(),\n      totalBorrowUsd: totalBorrowUsd.toString(),\n      userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n      userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n      totalCollateralUsd: totalCollateralUsd.toString(),\n    });\n  };\n  const getUnderlyPrice = () => {\n    Object.values(markets).forEach((market) => {\n      _underlyPrice[market.address] =\n        prices[\n          market.underlyingToken.priceKey || market.underlyingToken.symbol\n        ] || \"1\";\n    });\n    count++;\n    formatedData(\"getUnderlyPrice\");\n  };\n  // const getOTokenLiquidity = () => {\n  //   const assets = Object.values(markets);\n  //   let nativeOToken = \"\";\n  //   const calls = assets\n  //     .filter((market) => {\n  //       if (market.underlyingToken.address === \"native\")\n  //         nativeOToken = market.address;\n  //       return (\n  //         market.underlyingToken.address &&\n  //         market.underlyingToken.address !== \"native\"\n  //       );\n  //     })\n  //     .map((market) => ({\n  //       address: market.underlyingToken.address,\n  //       name: \"balanceOf\",\n  //       params: [market.address],\n  //     }));\n  //   multicall({\n  //     abi: ERC20_ABI,\n  //     calls,\n  //     options: {},\n  //     multicallAddress,\n  //     provider: Ethers.provider(),\n  //   })\n  //     .then((res) => {\n  //       _liquidity = {};\n  //       for (let i = 0, len = res.length; i < len; i++) {\n  //         const oToken = markets[calls[i].params[0]];\n  //         _liquidity[oToken.address] = ethers.utils.formatUnits(\n  //           res[i][0]._hex,\n  //           oToken.underlyingToken.decimals\n  //         );\n  //       }\n  //       const provider = Ethers.provider();\n  //       if (nativeOToken) {\n  //         provider.getBalance(nativeOToken).then((rawBalance) => {\n  //           _liquidity[nativeOToken] = ethers.utils.formatUnits(\n  //             rawBalance._hex,\n  //             18\n  //           );\n  //           count++;\n  //           formatedData(\"getOTokenLiquidity\");\n  //         });\n  //       } else {\n  //         count++;\n  //         formatedData(\"getOTokenLiquidity\");\n  //       }\n  //     })\n  //     .catch(() => {\n  //       setTimeout(() => {\n  //         getOTokenLiquidity();\n  //       }, 500);\n  //     });\n  // };\n  const getWalletBalance = () => {\n    let nativeOToken = \"\";\n    const underlyingTokens = Object.values(markets)\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = market.address;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        ...market.underlyingToken,\n        oTokenAddress: market.address,\n      }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n    multicall({\n      abi: ERC20_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        _underlyingBalance = {};\n        for (let i = 0, len = res.length; i < len; i++) {\n          _underlyingBalance[underlyingTokens[i].oTokenAddress] = res[i][0]\n            ? ethers.utils.formatUnits(\n                res[i][0]._hex,\n                underlyingTokens[i].decimals\n              )\n            : \"0\";\n        }\n        if (nativeOToken) {\n          const provider = Ethers.provider();\n          provider.getBalance(account).then((rawBalance) => {\n            _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n              rawBalance._hex,\n              18\n            );\n            count++;\n            formatedData(\"getWalletBalance\");\n          });\n        } else {\n          count++;\n          formatedData(\"getWalletBalance\");\n        }\n      })\n      .catch(() => {\n        setTimeout(() => {\n          getWalletBalance();\n        }, 500);\n      });\n  };\n  // const getCTokenData = (oToken) => {\n  //   if (oTokensLength === 0) return;\n  //   const calls = [\n  //     {\n  //       address: oToken.address,\n  //       name: \"exchangeRateCurrent\",\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"totalSupply\",\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"totalBorrows\",\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"balanceOf\",\n  //       params: [account],\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"borrowBalanceCurrent\",\n  //       params: [account],\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"borrowRatePerBlock\",\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"supplyRatePerBlock\",\n  //     },\n  //     {\n  //       address: oToken.address,\n  //       name: \"reserveFactorMantissa\",\n  //     },\n  //   ];\n  //   multicall({\n  //     abi: OTOKEN_ABI,\n  //     calls,\n  //     options: {},\n  //     multicallAddress,\n  //     provider: Ethers.provider(),\n  //   })\n  //     .then((res) => {\n  //       oTokensLength--;\n  //       const exchangeRateStored = res[0][0]\n  //         ? ethers.utils.formatUnits(\n  //             res[0][0]._hex,\n  //             10 + oToken.underlyingToken.decimals\n  //           )\n  //         : \"0\";\n  //       const totalSupply = res[1][0]\n  //         ? ethers.utils.formatUnits(res[1][0]._hex, oToken.decimals)\n  //         : \"0\";\n  //       const userSupply = res[3][0]\n  //         ? ethers.utils.formatUnits(res[3][0]._hex, oToken.decimals)\n  //         : \"0\";\n  //       _loanToValue[oToken.address] = ethers.utils.formatUnits(\n  //         res[7][0]._hex,\n  //         16\n  //       );\n  //       _cTokensData[oToken.address] = {\n  //         ...oToken,\n  //         exchangeRateStored,\n  //         totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n  //         totalBorrows: res[2][0]\n  //           ? ethers.utils.formatUnits(\n  //               res[2][0]._hex,\n  //               oToken.underlyingToken.decimals\n  //             )\n  //           : \"0\",\n  //         supplyRatePerBlock: res[6][0]\n  //           ? ethers.utils.formatUnits(res[6][0]._hex, 18)\n  //           : \"0\",\n  //         borrowRatePerBlock: res[5][0]\n  //           ? ethers.utils.formatUnits(res[5][0]._hex, 18)\n  //           : \"0\",\n  //         userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n  //         userBorrow: res[4][0]\n  //           ? ethers.utils.formatUnits(\n  //               res[4][0]._hex,\n  //               oToken.underlyingToken.decimals\n  //             )\n  //           : \"0\",\n  //       };\n  //       if (oTokensLength === 0) {\n  //         count++;\n  //         formatedData(\"oTokens data\");\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"oTokens data err\", err);\n  //       // setTimeout(() => {\n  //       //   getCTokenData(oToken);\n  //       // }, 500);\n  //     });\n  // };\n  // const getCTokensData = () => {\n  //   Object.values(markets).forEach((market) => {\n  //     getCTokenData(market);\n  //   });\n  // };\n  const getUserSupply = () => {\n    const calls = oTokens.map((oToken) => ({\n      address: oToken.address,\n      name: \"balanceOfUnderlying\",\n      params: [account],\n    }));\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserSupply_res:\", res, _cTokensData);\n        oTokens.forEach((oToken, index) => {\n          if (_cTokensData[oToken.address]) {\n            _cTokensData[oToken.address] = {\n              ..._cTokensData[oToken.address],\n              userSupply: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          } else {\n            _cTokensData[oToken.address] = {\n              ...oToken,\n              userSupply: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          }\n        });\n        count++;\n        formatedData(\"oTokens data\");\n      })\n      .catch((err) => {\n        console.log(\"getUserSupply_error:\", err);\n      });\n  };\n  const getUserBorrows = () => {\n    const calls = oTokens.map((oToken) => ({\n      address: oToken.address,\n      name: \"borrowBalanceStored\",\n      params: [account],\n    }));\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getUserBorrows_res:\", res, _cTokensData);\n        oTokens.forEach((oToken, index) => {\n          if (_cTokensData[oToken.address]) {\n            _cTokensData[oToken.address] = {\n              ..._cTokensData[oToken.address],\n              userBorrow: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          } else {\n            _cTokensData[oToken.address] = {\n              ...oToken,\n              userBorrow: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          }\n        });\n        count++;\n        formatedData(\"User Borrows\");\n      })\n      .catch((err) => {\n        console.log(\"getUserBorrows_error:\", err);\n      });\n  };\n  const getCollateralStatus = () => {\n    const unitrollerContract = new ethers.Contract(\n      unitrollerAddress,\n      [\n        {\n          inputs: [\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n          ],\n          name: \"getAssetsIn\",\n          outputs: [\n            { internalType: \"contract OToken[]\", name: \"\", type: \"address[]\" },\n          ],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider()\n    );\n    unitrollerContract\n      .getAssetsIn(account)\n      .then((res) => {\n        console.log(\"getCollateralStatus-res:\", res);\n        if (Array.isArray(res) && res.length) {\n          res.forEach((addr) => {\n            oTokens.find((item) => item.address === addr).isCollateral = true;\n          });\n        }\n\n        count++;\n        formatedData(\"User Borrows\");\n      })\n      .catch((err) => {\n        console.log(\"CATCH_getCollateralStatus_ERROR:\", err);\n      });\n  };\n  const getPoolCash = () => {\n    const calls = oTokens.map((oToken) => ({\n      address: oToken.address,\n      name: \"getCash\",\n    }));\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getPoolCash_res:\", res, _cTokensData);\n        oTokens.forEach((oToken, index) => {\n          if (_cTokensData[oToken.address]) {\n            _cTokensData[oToken.address] = {\n              ..._cTokensData[oToken.address],\n              cash: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          } else {\n            _cTokensData[oToken.address] = {\n              ...oToken,\n              cash: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          }\n        });\n        count++;\n        formatedData(\"oTokens data\");\n      })\n      .catch((err) => {\n        console.log(\"getPoolCash_error:\", err);\n      });\n  };\n  const getTotalBorrows = () => {\n    const calls = oTokens.map((oToken) => ({\n      address: oToken.address,\n      name: \"totalBorrows\",\n    }));\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"totalBorrows_res:\", res, _cTokensData);\n        oTokens.forEach((oToken, index) => {\n          if (_cTokensData[oToken.address]) {\n            _cTokensData[oToken.address] = {\n              ..._cTokensData[oToken.address],\n              totalBorrows: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          } else {\n            _cTokensData[oToken.address] = {\n              ...oToken,\n              totalBorrows: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          }\n        });\n        count++;\n        formatedData(\"oTokens data\");\n      })\n      .catch((err) => {\n        console.log(\"totalBorrows_error:\", err);\n      });\n  };\n  const getTotalReserves = () => {\n    const calls = oTokens.map((oToken) => ({\n      address: oToken.address,\n      name: \"totalReserves\",\n    }));\n    multicall({\n      abi: OTOKEN_ABI,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"totalReserves_res:\", res, _cTokensData);\n        oTokens.forEach((oToken, index) => {\n          if (_cTokensData[oToken.address]) {\n            _cTokensData[oToken.address] = {\n              ..._cTokensData[oToken.address],\n              totalReserves: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          } else {\n            _cTokensData[oToken.address] = {\n              ...oToken,\n              totalReserves: res[index]\n                ? formatUnits(res[index][0], oToken.decimals)\n                : 0,\n            };\n          }\n        });\n        count++;\n        formatedData(\"oTokens data\");\n      })\n      .catch((err) => {\n        console.log(\"totalReserves_error:\", err);\n      });\n  };\n  getUnderlyPrice();\n  // getOTokenLiquidity();\n  getWalletBalance();\n  // getCTokensData();\n  getUserSupply();\n  getUserBorrows();\n  getCollateralStatus();\n  getPoolCash();\n  getTotalBorrows();\n  getTotalReserves();\n}, [update, account]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Orbit", "fact_widget_deployments_id": "3742f9239c5c85a9888ed66c5f26319d", "inserted_timestamp": "2024-04-24T04:47:14.463Z", "modified_timestamp": "2024-04-24T05:38:45.726Z", "__row_index": 4}