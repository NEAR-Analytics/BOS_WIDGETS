{"tx_hash": "8jtYn7iCoAZn3sHXK55Kc96X3QaVEBihKGYkZsStJRdK", "action_id_social": "BVYRQFEi6F2NHnAYUyw49pyjjdWGnGND5kSp4ozgrtKE-0-widget", "block_id": 121420894, "block_timestamp": "2024-06-18T07:01:27.881Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Duo.Table", "source_code": "const StyledContainer = styled.div`\n  padding-top: 18px;\n  width: 478px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  border-radius: 16px;\n  margin: 50px auto 0;\n  padding: 20px 0 0px;\n  position: relative;\n`;\nconst StyledFont = styled.div`\n  color: ${(props) => props.color || \"#000\"};\n  font-family: ${(props) => props.fontFamily || \"Gantari\"};\n  font-size: ${(props) => props.fontSize || \"16px\"};\n  font-style: ${(props) => props.fontStyle || \"normal\"};\n  font-weight: ${(props) => props.fontWeight || \"400\"};\n  line-height: ${(props) => props.lineHeight || \"normal\"};\n  white-space: ${(props) => props.whiteSpace || \"normal\"};\n`;\nconst StyledFlex = styled.div`\n  display: flex;\n  flex-direction: ${(props) => props.flexDirection || \"row\"};\n  align-items: ${(props) => props.alignItems || \"center\"};\n  justify-content: ${(props) => props.justifyContent || \"flex-start\"};\n  gap: ${(props) => props.gap || \"0px\"};\n`;\nconst StyledDashedUndeline = styled.div`\n  padding: 2px 0;\n  border-bottom: 1px dashed #979ABE;\n`;\n\nconst TitleText = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 32px;\n  color: #ffffff;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst ContainerLogin = styled.div`\n  display: flex;\n  max-width: 500px;\n\n  flex-direction: column;\n  margin: 80px auto auto auto;\n\n  .web3-connect {\n    width: 480px;\n    height: 60px;\n    border-radius: 10px;\n    background-color: #fff;\n    color: #0f1126;\n    font-size: 18px;\n    font-weight: 500;\n    border: none;\n    margin-top: 20px;\n  }\n\n  @media (max-width: 736px) {\n    max-width: 100%;\n    .web3-connect {\n      width: 100%;\n\n      font-size: 16px;\n      height: 40px;\n    }\n  }\n`;\n// List\nconst ListWrapper = styled.div`\n  margin-top: 20px;\n`;\nconst SvgIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &.icon-right {\n    position: absolute;\n    right: 28px;\n    top: 50%;\n    transform: translateY(-50%);\n\n    &.rotate {\n      transform: translateY(-50%) rotate(90deg);\n    }\n  }\n`;\nconst Table = styled.div`\n\n`;\nconst THead = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 30px;\n`;\nconst Th = styled.div`\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  flex-shrink: 0;\n`;\nconst TBody = styled.div`\n`;\nconst TrWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  border-radius: 16px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  margin-bottom: 8px;\n  overflow: hidden;\n`;\nconst Tr = styled.div`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  height: 84px;\n  background: #262836;\n  padding: 0 24px;\n`;\nconst Td = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  flex-shrink: 0;\n\n  &.column {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 5px;\n  }\n\n  color: #fff;\n  \n  .token-wrapper {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 8px;\n    \n    img {\n      width: 38px;\n      height: 38px;\n    }\n  }\n`;\nconst TdTxt = styled.div`\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n\n  &.gray {\n    color: #979ABE;\n    font-size: 12px;\n  }\n`;\nconst PoolPercentage = styled.div`\n  padding: 3px 8px;\n  border-radius: 24px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\nconst StrategyTxt = styled.div`\n  padding: 7px 10px;\n  border-radius: 6px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`;\nconst StyledVaultImage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  img {\n    width: 26px;\n    height: 26px;\n    border-radius: 50%;\n  }\n`;\nconst StyledButton = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 48px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  \n  &[disabled] {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`;\nconst Input = styled.input`\n  color: #fff;\n  height: 48px;\n  padding: 0 0.75em;\n  background: #2e3142;\n  border: 1px solid #d0d5dd;\n  box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);\n  border-radius: 10px;\n  font-size: 14px;\n\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n  }\n`;\nconst StyledEmpty = styled.div`\n  height: 100px;\n  color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\n// withdraw params\nconst WITHDRAW_ABI = [\n  // 1: Boost Points | 4: Points & Fixed Yield\n  {\n    // withdraw ETH\n    ETH: {\n      inputs: [\n        { internalType: \"address\", name: \"fixedRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      ],\n      name: \"burnFixedRate\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    // withdraw USDB\n    USDB: {\n      inputs: [\n        { internalType: \"address\", name: \"fixedRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      ],\n      name: \"burnFixedRate\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  },\n  // 2: Boost Yield | 3: Points & Yield\n  {\n    // withdraw ETH\n    ETH: {\n      inputs: [\n        { internalType: \"address\", name: \"variableRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minYield\", type: \"uint256\" },\n      ],\n      name: \"burnVariableRate\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    // withdraw USDB\n    USDB: {\n      inputs: [\n        { internalType: \"address\", name: \"variableRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minYield\", type: \"uint256\" },\n      ],\n      name: \"burnVariableRate\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  },\n];\n\nconst {\n  dexConfig,\n  wethAddress,\n  multicallAddress,\n  chainIdNotSupport,\n  multicall,\n  prices,\n  account,\n  addAction,\n  toast,\n  chainId,\n  nativeCurrency,\n  tab,\n  onSuccess,\n  dataIndex,\n  onChangeDataIndex,\n  UNSTAKE_TOKEN_CONFIG,\n  actionText,\n} = props;\n\nconst { ExchangeToken, PointsAndYield } = dexConfig;\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nState.init({\n  dataList: [],\n  loading: false,\n  loadingVault: null,\n  pending: false,\n});\n\n// un-stake event\nfunction handleWithdraw({ curPointsAndYield, token, vault, amount, tokenDecimals, curPointsAndYieldItem }) {\n  if (state.loadingVault) return;\n  State.update({\n    loadingVault: vault,\n  });\n\n  let WITHDRAW_ABI_LATEST;\n  let params;\n  let unstakeToken = 'ETH';\n  if (token.symbol === \"DUSD\") {\n    unstakeToken = 'USDB';\n  }\n\n  // WITHDRAW_ABI\n  // ETH: withdraw ETH\n  // USDB: withdraw USDB\n\n  // Boost Points, Points & Fixed Yield\n  if ([1, 4].includes(curPointsAndYield)) {\n    WITHDRAW_ABI_LATEST = WITHDRAW_ABI[0][unstakeToken];\n    params = [\n      // fixedRate\n      vault,\n      // amount\n      parseUnits(amount, tokenDecimals),\n    ];\n  }\n  // 2: Boost Yield | 3: Points & Yield\n  else {\n    WITHDRAW_ABI_LATEST = WITHDRAW_ABI[1][unstakeToken];\n    params = [\n      // variableRate\n      vault,\n      // amount\n      parseUnits(amount, tokenDecimals),\n      // minYield\n      parseUnits('0', tokenDecimals),\n    ];\n  }\n\n  const contract = new ethers.Contract(\n    curPointsAndYieldItem[unstakeToken],\n    [\n      WITHDRAW_ABI_LATEST,\n      {\n        ...WITHDRAW_ABI_LATEST,\n        name: \"withdraw\",\n        constant: false,\n      }\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  const getTx = (gas) => {\n    contract[WITHDRAW_ABI_LATEST.name](\n      ...params,\n      {\n        gasLimit: gas || 4000000,\n        // value: parseUnits(amount, tokenDecimals),\n      }\n    )\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              loadingVault: null,\n            });\n            onSuccess();\n            addAction?.({\n              type: \"Staking\",\n              action: actionText,\n              token: {\n                symbol: unstakeToken,\n              },\n              amount,\n              template: props.name,\n              add: false,\n              status,\n              transactionHash,\n            });\n            toast?.success({\n              title: `${actionText} Successfully!`,\n              text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            console.log('tx error: ', err);\n            State.update({\n              loadingVault: null,\n            });\n            toast?.dismiss(toastId);\n            toast?.fail({\n              title: `${actionText} Failed!`,\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : ``,\n            });\n          });\n      })\n      .catch((err) => {\n        console.log('contract error: ', err);\n        State.update({\n          loadingVault: null,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: `${actionText} Failed!`,\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : ``,\n        });\n      });\n  };\n\n  // get gas\n  const estimateGas = () => {\n    contract.estimateGas[WITHDRAW_ABI_LATEST.name](\n      ...params,\n      {\n        // value: parseUnits(amount, tokenDecimals),\n      }\n    ).then((gas) => {\n      getTx(gas);\n    }).catch((err) => {\n      console.log('get gas failed: ', err);\n      getTx();\n    });\n  };\n  estimateGas();\n}\n\nconst columnList = [\n  {\n    width: \"20%\",\n    key: \"id\",\n    label: \"Vault Address\",\n    type: \"slot\",\n    render: (data) => {\n      return (\n        <div className=\"flexed\">\n          <span>{data.id ? `${data.id.slice(2, 7)}...${data.id.slice(-4)}` : \"\"}</span>\n        </div>\n      );\n    },\n  },\n  {\n    width: \"15%\",\n    key: \"token\",\n    label: \"Token\",\n    type: \"slot\",\n    render: (data) => {\n      const currToken = UNSTAKE_TOKEN_CONFIG[data.token];\n      if (!currToken) return null;\n      return (\n        <div className=\"token-wrapper\">\n          <img src={currToken.icon} alt=\"\" />\n          <span>{currToken.symbol}</span>\n        </div>\n      );\n    },\n  },\n  {\n    width: \"20%\",\n    key: \"type\",\n    label: \"Type\",\n    type: \"slot\",\n    render: (data) => {\n      const currType = Object.values(PointsAndYield).find((it) => it.name === data.type);\n      if (!currType) return \"\";\n      return <StrategyTxt>{currType.label}</StrategyTxt>;\n    },\n  },\n  {\n    width: \"15%\",\n    key: \"principal\",\n    label: \"Principal\",\n    type: \"slot\",\n    render: (data, index) => {\n      const _list = state.dataList.slice();\n      const currToken = UNSTAKE_TOKEN_CONFIG[data.token];\n      const total = Big(data.principal).div(Big(10).pow(currToken.decimals || 18));\n      const handleMax = () => {\n        _list[index].amount = Big(total.toFixed(currToken.decimals, Big.roundDown)).toString();\n        State.update({\n          dataList: _list,\n        });\n      };\n      if (total.lt(0.0001)) return (\n        <span onClick={handleMax}>&lt; 0.0001</span>\n      );\n      return (\n        <span onClick={handleMax}>{total.toFixed(4, 0)}</span>\n      );\n    },\n  },\n  {\n    width: \"20%\",\n    key: \"amount\",\n    label: \"Amount\",\n    type: \"slot\",\n    render: (data, index) => {\n      const currToken = UNSTAKE_TOKEN_CONFIG[data.token];\n      const total = Big(data.principal).div(Big(10).pow(currToken.decimals || 18));\n      return (\n        <Input\n          value={data.amount}\n          onChange={(e) => {\n            const val = e.target.value;\n            const _list = state.dataList.slice();\n            _list[index].amount = val;\n            State.update({\n              dataList: _list,\n            });\n          }}\n          onBlur={(e) => {\n            const _list = state.dataList.slice();\n            const val = e.target.value;\n            if (\n              val &&\n              (isNaN(Number(val)) ||\n              Big(val).lt(0) ||\n              Big(val).gt(total) ||\n              Big(val).lt(Big(1).div(Big(10).pow(18))) ||\n              Big(val).gt(Big(1).times(Big(10).pow(18))))\n            ) {\n              _list[index].amount = Big(total.toFixed(currToken.decimals, Big.roundDown)).toString();\n            } else {\n              _list[index].amount = val;\n            }\n            State.update({\n              dataList: _list,\n            });\n          }}\n        />\n      );\n    },\n  },\n  {\n    width: \"10%\",\n    direction: \"column\",\n    key: \"action\",\n    label: \"\",\n    type: \"slot\",\n    render: (data, index) => {\n      const total = Big(data.principal).div(Big(10).pow(18));\n      return (\n        <StyledButton\n          disabled={\n            !data.amount ||\n            isNaN(Number(data.amount)) ||\n            Big(data.amount).lt(0) ||\n            Big(data.amount).gt(total) ||\n            state.loadingVault === data.id\n        }\n          type=\"button\"\n          onClick={() => {\n            const currType = Object.values(PointsAndYield).find((it) => it.name === data.type);\n            if (!currType) return;\n            const currToken = UNSTAKE_TOKEN_CONFIG[data.token];\n            if (!currToken) return;\n            handleWithdraw({\n              curPointsAndYield: currType.key,\n              token: currToken,\n              vault: data.id,\n              amount: Big(data.amount).toFixed(urrToken.decimals || 18, Big.roundDown),\n              tokenDecimals: currToken.decimals,\n              curPointsAndYieldItem: currType,\n            });\n          }}\n        >\n          {\n            state.loadingVault === data.id ? (\n              <Widget\n                src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                props={{\n                  size: 16,\n                }}\n              />\n            ) : 'Withdraw'\n          }\n        </StyledButton>\n      );\n    },\n  },\n];\n\nfunction renderTD(data, column, index) {\n  if (column.type === \"slot\") {\n    return column.render(data, index);\n  }\n  if (column.type === \"svg\") {\n    return <SvgIcon>{data[column.key]}</SvgIcon>;\n  }\n  return <TdTxt>{data[column.key]}</TdTxt>;\n}\n\nconst getListData = () => {\n  State.update({ loading: true });\n  const url = `/duo/exchange/getVaultPositions?owner=${account}&showClosed=0`;\n  asyncFetch(url)\n    .then((res) => {\n      if (!res.ok || !res.body.result) {\n        toast?.fail({\n          title: `Request Unstake Data Failed!`,\n          text: 'Please try again later',\n        });\n        return;\n      }\n      const dataListFormatter = (dataSource) => {\n        const dataList = [];\n        const keys = Object.keys(dataSource);\n        Object.values(dataSource).forEach((item, index) => {\n          item.items?.forEach((item) => {\n            dataList.push({\n              ...item,\n              type: keys[index],\n            });\n          });\n        });\n        return dataList;\n      };\n      State.update({\n        dataList: dataListFormatter(res.body.result),\n        loading: false,\n      });\n    })\n    .catch((err) => {\n      toast?.fail({\n        title: `Request Unstake Data Failed!`,\n        text: 'Please try again later',\n      });\n      State.update({ loading: false });\n    });\n};\n\nuseEffect(() => {\n  getListData();\n}, []);\n\nreturn (\n  <>\n    {\n      state.dataList.length && !state.loading && (\n        <ListWrapper>\n          <Table>\n            <THead>\n              {columnList.map((column, index) => {\n                return (\n                  <Th key={index} style={{ width: column.width }}>\n                    {column.label}\n                  </Th>\n                );\n              })}\n            </THead>\n            <TBody>\n              {state.dataList.map((data, index) => {\n                return (\n                  <TrWrapper key={data.id}>\n                    <Tr>\n                      {columnList.map((column, columnIndex) => {\n                        return (\n                          <Td\n                            key={index + columnIndex}\n                            className={\n                              column.direction === \"column\" ? \"column\" : \"\"\n                            }\n                            style={{ width: column.width }}\n                          >\n                            {renderTD(data, column, index, columnIndex)}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                    {index === dataIndex && (\n                      <div>content</div>\n                    )}\n                  </TrWrapper>\n                );\n              })}\n            </TBody>\n          </Table>\n        </ListWrapper>\n      )\n    }\n    {\n      state.loading && (\n        <Widget src=\"bluebiu.near/widget/Lending.Spinner\" />\n      )\n    }\n    {\n      !state.dataList.length && !state.loading && (\n        <StyledEmpty>\n          No data\n        </StyledEmpty>\n      )\n    }\n  </>\n);\n\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Duo.Table", "fact_widget_deployments_id": "32bb4db18d317a1b8fa28864564a9690", "inserted_timestamp": "2024-06-18T08:54:07.223Z", "modified_timestamp": "2024-06-18T08:54:07.223Z", "__row_index": 2}