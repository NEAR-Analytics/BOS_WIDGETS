{"tx_hash": "AojPgAuKvSDykxTJHZWBpDDfSttMZsFiZAyzaZPn7n9W", "action_id_social": "B8eTqjeEyBhKeBgzA8mww7sgD4eeCdQ5bumpYjUaKL8u-0-widget", "block_id": 120994099, "block_timestamp": "2024-06-12T09:42:12.196Z", "signer_id": "bluebiu.near", "widget_name": "Staking.AgentFi.MyStrategiesDetail", "source_code": "const StyledContainer = styled.div``;\nconst StyledTop = styled.div``;\nconst StyledBack = styled.div`\n  margin: 20px 0 24px;\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  cursor: pointer;\n  color: #979ABE;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  width: 200px;\n`;\nconst StyledContent = styled.div``;\nconst StyledCard = styled.div`\n  margin: 0 auto;\n  border-radius: 16px;\n  border: 1px solid #373A53;\n  background: #262836;\n  overflow: hidden;\n`;\nconst StyledCardHead = styled.div`\n  padding: 18px 30px 18px 30px;\n  background: #32364B;\n  border-bottom: 1px solid #373A53;\n  \n  .strategy-title {\n    color: #FFF;\n    font-size: 18px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: normal;\n  }\n  .strategy-detail {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    gap: 16px;\n  }\n  .strategy-description {\n    color: #979ABE;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: normal;\n    margin-top: 8px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    \n    p {\n      margin: 0;\n    }\n  }\n`;\nconst StyledCardBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  \n  &.no-padding {\n    padding: 0;\n  }\n`;\nconst StyledCardFoot = styled.div`\n\n`;\n\nconst StyledBot = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n  gap: 16px;\n  margin-top: 16px;\n`;\nconst StyledSection = styled.div`\n  padding: 18px 30px;\n  \n  &:not(:last-child) {\n    border-bottom: 1px solid #373A53;\n  }\n`;\nconst StyledSectionTitle = styled.div`\n  margin-bottom: 16px;\n  color: #FFF;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`;\nconst StyledSectionList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\nconst StyledSectionContent = styled.div`\n`;\nconst StyledSectionListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst StyledSectionListLabel = styled.div`\n  color: #979ABE;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n\n  .strategy-balance-icon {\n    width: 24px;\n    height: 24px;\n  }\n`\nconst StyledSectionListValue = styled.div`\n  color: #FFF;\n  font-family: Montserrat;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\n\nconst StyledTabs = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border-bottom: 1px solid #373A53;\n`;\nconst StyledTab = styled.div`\n  flex: 1;\n  height: 64px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #979ABE;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n  cursor: pointer;\n  padding: 22px 0;\n  \n  &.active {\n    color: #fff;\n  }\n`;\nconst StyledTabPointer = styled.div`\n  position: absolute;\n  z-index: 1;\n  left: 0;\n  bottom: 0;\n  height: 4px;\n  background: var(--switch-color);\n  transition: transform 0.3s ease-in-out;\n`;\nconst StyledTabsContent = styled.div`\n  padding: 18px 30px;\n  flex: 1;\n`;\n\nconst StyledTips = styled.div`\n  color: rgb(151, 154, 190);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-bottom: 16px;\n  padding: 18px 30px 0;\n`;\nconst StyledMultipliooorCardList = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: 0;\n  padding: 0 18px 18px;\n  gap: 16px;\n  max-height: 240px;\n  overflow-y: auto;\n  \n  .card-item {\n    margin: 0;\n    padding: 8px;\n    width: 130px;\n    height: 192px;\n    border-radius: 0;\n    overflow: hidden;\n    background-size: contain;\n    background-position: center;\n    background-repeat: no-repeat;\n    color: #fff;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n  }\n`;\nconst StyledDexCardList = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: 0;\n  padding: 0 18px 18px;\n  gap: 16px;\n  \n  .card-item {\n    margin: 0;\n    padding: 8px;\n    width: 130px;\n    height: 192px;\n    border-radius: 16px;\n    overflow: hidden;\n    background-size: contain;\n    background-position: center;\n    background-repeat: no-repeat;\n    color: #fff;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: column;\n    gap: 16px;\n    border: 1px solid #373A53;\n  }\n  \n  .card-logo {\n    width: 100px;\n    height: 40px;\n  }\n  .card-balance-list {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: column;\n    gap: 8px;\n    padding: 0;\n    margin: 0;\n    flex: 1;\n  }\n  .card-balance-item {\n    color: #fff;\n    font-size: 14px;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 8px;\n  }\n  .card-foot {\n    padding: 8px;\n    border-top: 1px solid #373A53;\n    margin-top: auto;\n  }\n  .card-link {\n    text-decoration: none;\n    color: rgb(151, 154, 190);\n    font-size: 14px;\n  }\n`;\nconst StyledProgress = styled.div`\n  width: 100%;\n  height: 12px;\n  border-radius: 6px;\n  background: #979ABE;\n  position: relative;\n  margin-top: 20px;\n  flex-shrink: 0;\n\n  &::after {\n    content: \"\";\n    display: block;\n    width: ${({ value, max }) => `${Math.floor(value / max * 100)}%`};\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    border-radius: 6px;\n    background: var(--button-color);\n  }\n  \n  &.center {\n    &::after {\n      left: 50%;\n      transform: translateX(-50%);\n    }\n  }\n  \n  .range-min,\n  .range-max,\n  .range-center {\n    position: absolute;\n    z-index: 1;\n    left: 50%;\n    transform: translateX(-50%);\n    top: -30px;\n    color: #fff;\n    font-size: 14px;\n  }\n  .range-min {\n    left: 25%;\n  }\n  .range-max {\n    left: 75%;\n  }\n  .range-center {\n    &::after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      z-index: 1;\n      left: 50%;\n      transform: translateX(-50%);\n      height: 36px;\n      top: 18px;\n      width: 4px;\n      background: var(--switch-color);\n      border-radius: 2px;\n    }\n  }\n`;\n\n\nconst tabs = [\n  {\n    key: 1,\n    title: 'Withdraw',\n    component: 'bluebiu.near/widget/Staking.AgentFi.Withdraw',\n  },\n  {\n    key: 2,\n    title: 'Deposit',\n    component: 'bluebiu.near/widget/Staking.AgentFi.Deposit',\n  },\n  {\n    key: 3,\n    title: 'Reset',\n    component: 'bluebiu.near/widget/Staking.AgentFi.Reset',\n  },\n];\n\nconst {\n  record,\n  onRecordClose,\n  dexConfig,\n  formatTVL,\n  prices,\n  numKnownMissions,\n  totalMissions,\n  tickToPrice,\n  QUERY_POOL_ABI,\n  strategies,\n} = props;\n\nconst currentStrategy = strategies.find((it) => it.name === record.name.toLowerCase());\n\nState.init({\n  tab: tabs[0],\n  tabsShown: [tabs[0]],\n  currentRange: [],\n  currentPrice: '',\n});\n\nconst handleClose = () => {\n  onRecordClose();\n};\n\nconst handleTab = (tab) => {\n  if (tab.key === state.tab.key) return;\n  State.update({\n    tab: tab,\n  });\n};\n\nconst queryPoolInfo = ({ fee }) => {\n  return new Promise((resolve) => {\n    if (!fee) {\n      const currentBalancesList = record.balances || [];\n      const currentBalance = currentBalancesList.find((it) => /^BlasterSwap Positions NFT/.test(it.name));\n      if (!currentBalance) {\n        resolve(false);\n        return;\n      }\n      fee = currentStrategy.meta.feeTierList.find((it) => it.name.includes(currentBalance.name));\n      if (!fee) {\n        resolve(false);\n        return;\n      }\n    }\n\n    const contract = new ethers.Contract(\n      fee.pool,\n      QUERY_POOL_ABI,\n      Ethers.provider().getSigner(),\n    );\n    const params = [];\n    contract.slot0(...params).then((poolAddress) => {\n      const [sqrtPriceX96, tick] = poolAddress;\n      resolve({ sqrtPriceX96: ethers.BigNumber.from(sqrtPriceX96).toString(), tick });\n    }).catch((err) => {\n      console.log('queryPoolInfo failed, ', err);\n      resolve(false);\n    });\n  });\n};\n\nconst balanceList = formatTVL(record).list || [];\n\nconst {\n  tab,\n  currentRange,\n  tabsShown,\n} = state;\n\nconst getRangeData = () => {\n  const url = `/api/app/agentfi/position/range?agentAddress=${record.agentAddress}`;\n  asyncFetch(url).then((res) => {\n    if (!res.ok || !res.body) {\n      return;\n    }\n    State.update({\n      currentRange: [res.body.min, res.body.max],\n    });\n  }).catch((err) => {\n    console.log(err);\n  });\n};\n\nconst renderDetail = () => {\n  if ([strategies[0].name].includes(record.name.toLowerCase())) {\n    return (\n      <StyledSection>\n        <StyledSectionTitle>Strategy Overview</StyledSectionTitle>\n        <StyledSectionList>\n          <StyledSectionListItem>\n            <StyledSectionListLabel>\n              Supply\n            </StyledSectionListLabel>\n            <StyledSectionListValue>\n              {balanceList[0] ? Big(balanceList[0].balance).times(currentStrategy.meta.leverage).toFixed(4) : '0.0000'}\n            </StyledSectionListValue>\n          </StyledSectionListItem>\n          <StyledSectionListItem>\n            <StyledSectionListLabel>\n              Borrow\n            </StyledSectionListLabel>\n            <StyledSectionListValue>\n              {balanceList[0] ? Big(balanceList[0].balance).toFixed(4) : '0.0000'}\n            </StyledSectionListValue>\n          </StyledSectionListItem>\n          <StyledSectionListItem>\n            <StyledSectionListLabel>\n              Leverage\n            </StyledSectionListLabel>\n            <StyledSectionListValue>\n              {currentStrategy.meta.leverage}x\n            </StyledSectionListValue>\n          </StyledSectionListItem>\n          <StyledSectionListItem>\n            <StyledSectionListLabel>\n              LTV\n            </StyledSectionListLabel>\n            <StyledSectionListValue>\n              {currentStrategy.meta.targetLTV}\n            </StyledSectionListValue>\n          </StyledSectionListItem>\n          <StyledSectionListItem>\n            <StyledSectionListLabel>\n              Mode\n            </StyledSectionListLabel>\n            <StyledSectionListValue>\n              Boost Points\n            </StyledSectionListValue>\n          </StyledSectionListItem>\n        </StyledSectionList>\n      </StyledSection>\n    );\n  }\n  if (record.name.toLowerCase() === strategies[3].name) {\n    return (\n      <>\n        <StyledTips>\n          See which multiplers your agent has accumulated for you. Learn more about Blast multipliers here.\n        </StyledTips>\n        <StyledMultipliooorCardList>\n          {\n            currentStrategy.achievements.map((achievement, idx) => (\n              <li className=\"card-item\" key={idx + ''} style={{ backgroundImage: `url(\"${achievement.img}\")` }}>\n                <span className=\"no\">#{idx + 1}</span>\n              </li>\n            ))\n          }\n          {\n            [...new Array(totalMissions - numKnownMissions).keys()].map((idx) => (\n              <li className=\"card-item\" key={idx + \"\"} style={{ backgroundImage: `url(\"${currentStrategy.meta.lockedImgUrl}\")` }}>\n                <span className=\"no\">#{idx + numKnownMissions + 1}</span>\n              </li>\n            ))\n          }\n        </StyledMultipliooorCardList>\n      </>\n    );\n  }\n  if (record.name.toLowerCase() === strategies[2].name) {\n    return (\n      <>\n        <StyledTips>\n          View the breakdown of your LP positions being managed by DEX Balancer.\n        </StyledTips>\n        <StyledDexCardList>\n          {\n            currentStrategy.meta.protocolList.map((protocol) => {\n              const balances = record.balances || [];\n              const currBalance = balances.find((it) => it.address === protocol.address);\n              if (!currBalance || !currBalance.underlying) return null;\n              return (\n                (\n                  <li className=\"card-item\">\n                    <img className=\"card-logo\" src={protocol.logo} alt=\"\" />\n                    <ul className=\"card-balance-list\">\n                      {\n                        currBalance.underlying.map((b) => (\n                          <li className=\"card-balance-item\">\n                            <span>{b.symbol}</span>\n                            <span>{Big(b.balance || 0).toFixed(4)}</span>\n                          </li>\n                        ))\n                      }\n                    </ul>\n                    <div className=\"card-foot\">\n                      <a className=\"card-link\" href={protocol.link} rel=\"nofollow\" target=\"_blank\">\n                        {protocol.link.replace(/^https?:\\/\\/(www.)?/, '')}\n                      </a>\n                    </div>\n                  </li>\n                )\n              )\n            })\n          }\n        </StyledDexCardList>\n      </>\n    );\n  }\n  if (record.name.toLowerCase() === strategies[1].name) {\n    return (\n      <>\n        <StyledTips>\n          View liquidity, unclaimed fees and accrued points in your LP position, as well as range and next rebalancing.\n        </StyledTips>\n        <StyledSection>\n          <StyledSectionTitle>Liquidity</StyledSectionTitle>\n          <StyledSectionList>\n            {\n              balanceList && balanceList.map((balance) => (\n                <StyledSectionListItem>\n                  <StyledSectionListLabel>\n                    <img className=\"clm-balance-icon\" src={balance.icon} alt=\"\" />\n                    <span>{balance.symbol}</span>\n                  </StyledSectionListLabel>\n                  <StyledSectionListValue title={Big(balance.balance || 0).toFixed(18)}>\n                    {Big(balance.balance || 0).toFixed(4)}\n                  </StyledSectionListValue>\n                </StyledSectionListItem>\n              ))\n            }\n          </StyledSectionList>\n        </StyledSection>\n        <StyledSection>\n          <StyledSectionTitle>Current range and price</StyledSectionTitle>\n          <StyledSectionList>\n            <StyledProgress\n              className=\"center\"\n              max={10}\n              value={5}\n            >\n              <div className=\"range-center\">\n                {Math.round(state.currentPrice || 0)}\n              </div>\n              <div className=\"range-min\">\n                {currentRange[0] && Math.floor(currentRange[0] || 0)}\n              </div>\n              <div className=\"range-max\">\n                {currentRange[1] && Math.floor(currentRange[1] || 0)}\n              </div>\n            </StyledProgress>\n          </StyledSectionList>\n        </StyledSection>\n      </>\n    );\n  }\n};\n\nuseEffect(() => {\n  let _tabs = [tabs[0]];\n  if (record.name.toLowerCase() === strategies[1].name) {\n    getRangeData();\n    _tabs.push(tabs[1]);\n    _tabs.push(tabs[2]);\n  }\n  if (record.name.toLowerCase() === strategies[3].name) {\n    _tabs.push(tabs[1]);\n  }\n  if (record.name.toLowerCase() === strategies[2].name) {\n    _tabs.push(tabs[1]);\n  }\n  State.update({\n    tabsShown: _tabs,\n  });\n\n  if (record.name.toLowerCase() === strategies[1].name) {\n    queryPoolInfo().then((poolRes) => {\n      if (!poolRes) {\n        return;\n      }\n      const { tick } = poolRes;\n      const currentBalancesList = record.balances || [];\n      const currentBalance = currentBalancesList.find((it) => /^BlasterSwap Positions NFT/.test(it.name));\n      if (\n        !currentBalance ||\n        !currentBalance.underlying ||\n        currentBalance.underlying.length < 2\n      ) {\n        return;\n      }\n      State.update({\n        currentPrice: tickToPrice({\n          tick,\n          token0: currentBalance.underlying[1],\n          token1: currentBalance.underlying[0],\n        }),\n      });\n    });\n  }\n}, []);\n\nreturn (\n  <StyledContainer>\n    <StyledTop>\n      <StyledBack onClick={handleClose}>\n        <div className=\"back-icon\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"9\"\n            height=\"13\"\n            viewBox=\"0 0 9 13\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M7.5 1L2 6.49992L7.5 12\"\n              stroke=\"#979ABE\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        <div className=\"back-title\">\n          Back to My Strategies\n        </div>\n      </StyledBack>\n    </StyledTop>\n    <StyledContent>\n      <StyledCard>\n        <StyledCardHead>\n          <div className=\"strategy-title\">\n            {record.name}\n          </div>\n          <div className=\"strategy-description\">\n            {\n              currentStrategy?.DESCRIPTION_CONFIG?.join( ' ')\n            }\n          </div>\n        </StyledCardHead>\n      </StyledCard>\n      <StyledBot>\n        <StyledCard style={{ flex: 1 }}>\n          <StyledCardBody className=\"no-padding\" style={{ height: '100%' }}>\n            <StyledTabs>\n              {\n                tabsShown.map((_tab) => (\n                  <StyledTab\n                    key={_tab.key}\n                    onClick={() => handleTab(_tab)}\n                    className={`${tab.key === _tab.key ? 'active' : ''}`}\n                  >\n                    {_tab.title}\n                  </StyledTab>\n                ))\n              }\n              <StyledTabPointer\n                style={{\n                  width: `calc(100% / ${tabsShown.length})`,\n                  transform: `translateX(calc(100% * ${tabsShown.findIndex((it) => it.key === tab.key) || 0}))`,\n                }}\n              />\n            </StyledTabs>\n            <StyledTabsContent>\n              <Widget\n                src={tab.component}\n                props={{\n                  ...props,\n                  tab,\n                  handleDetailClose: handleClose,\n                  currentStrategy,\n                  balanceList,\n                  queryPoolInfo,\n                }}\n              />\n            </StyledTabsContent>\n          </StyledCardBody>\n        </StyledCard>\n        <StyledCard style={{ flex: 1 }}>\n          <StyledCardBody>\n\n            {/*#region balance*/}\n            <StyledSection>\n              <StyledSectionTitle>Balance</StyledSectionTitle>\n              <StyledSectionList>\n                <StyledSectionListItem>\n                  <StyledSectionListLabel style={{ color: 'var(--switch-color)' }}>\n                    Total\n                  </StyledSectionListLabel>\n                  <StyledSectionListValue style={{ color: 'var(--switch-color)' }}>\n                    {formatTVL(record).value}\n                  </StyledSectionListValue>\n                </StyledSectionListItem>\n                {\n                  !!balanceList.length && balanceList.map((tk) => (\n                    <StyledSectionListItem>\n                      <StyledSectionListLabel>\n                        <img className=\"strategy-balance-icon\" src={tk.icon} alt=\"\" />\n                        <span>{tk.symbol}</span>\n                      </StyledSectionListLabel>\n                      <StyledSectionListValue>\n                        {\n                          record.name.toLowerCase() === strategies[3].name ? (\n                            Big(tk.balance).times(4).toFixed(4)\n                          ) : (\n                            Big(tk.balance).toFixed(4)\n                          )\n                        }\n                      </StyledSectionListValue>\n                    </StyledSectionListItem>\n                  ))\n                }\n              </StyledSectionList>\n            </StyledSection>\n            {/*#endregion*/}\n\n            {/*#region detail*/}\n            {renderDetail()}\n            {/*#endregion*/}\n          </StyledCardBody>\n        </StyledCard>\n      </StyledBot>\n    </StyledContent>\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.AgentFi.MyStrategiesDetail", "fact_widget_deployments_id": "8f86860a7dfcf50c721293750d1a2358", "inserted_timestamp": "2024-06-12T11:04:45.443Z", "modified_timestamp": "2024-06-12T11:04:45.443Z", "__row_index": 4}