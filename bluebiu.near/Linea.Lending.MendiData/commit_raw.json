{"tx_hash": "5yCcLF78aVHMVviV8tmcgc2WbmkcE4UPu8eceCR2GmCj", "action_id_social": "3mdrAx7M3GTN5bjqVYtnw8WXVTHMQP5qKUoMjEPtwocU-0-widget", "block_id": 108308207, "block_timestamp": "2023-12-19T05:55:15.832Z", "signer_id": "bluebiu.near", "widget_name": "Linea.Lending.MendiData", "source_code": "const markets = {\n  \"0xAd7f33984bed10518012013D4aB0458D37FEE6F3\": {\n    underlyingToken: {\n      address: \"0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f\",\n      decimals: 18,\n      symbol: \"WETH\",\n    },\n    decimals: 8,\n    symbol: \"meWETH\",\n    address: \"0xAd7f33984bed10518012013D4aB0458D37FEE6F3\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreihyzmiuawyekwiyofkzm25xzrrfenhvadi6lb42juvq7tah2u7ha4\",\n  },\n  \"0xf669C3C03D9fdF4339e19214A749E52616300E89\": {\n    underlyingToken: {\n      address: \"0xA219439258ca9da29E9Cc4cE5596924745e12B93\",\n      decimals: 6,\n      symbol: \"USDT\",\n    },\n    decimals: 8,\n    symbol: \"meUSDT\",\n    address: \"0xf669C3C03D9fdF4339e19214A749E52616300E89\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreih45jy7ggj45ck34rf736kb67smsoa52wd7e46c2grh6etd3bhe5i\",\n  },\n  \"0x1f27f81C1D13Dd96A3b75d42e3d5d92b709869AA\": {\n    underlyingToken: {\n      address: \"0x4af15ec2a0bd43db75dd04e62faa3b8ef36b00d5\",\n      decimals: 18,\n      symbol: \"DAI\",\n    },\n    decimals: 8,\n    symbol: \"meDAI\",\n    address: \"0x1f27f81C1D13Dd96A3b75d42e3d5d92b709869AA\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreieuxntkdzi2mzkzdcbk6kahwxqpftxnipxcwc4oe4p4jm2rhj2xhu\",\n  },\n  \"0x333D8b480BDB25eA7Be4Dd87EEB359988CE1b30D\": {\n    underlyingToken: {\n      address: \"0x176211869ca2b568f2a7d4ee941e073a821ee1ff\",\n      decimals: 6,\n      symbol: \"USDC\",\n    },\n    decimals: 8,\n    symbol: \"meUSDC\",\n    address: \"0x333D8b480BDB25eA7Be4Dd87EEB359988CE1b30D\",\n    icon: \"https://ipfs.near.social/ipfs/bafkreie4jihoa76mgyzxhw2yrapihzu2qhkjz6m7u4opoxjebzg6zc2lla\",\n  },\n};\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst OTOKEN_ABI = [\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrows\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateStored\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"getAccountSnapshot\",\n    outputs: [\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"borrowRatePerBlock\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst UNITROLLER_ABI = [\n  {\n    constant: true,\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"markets\",\n    outputs: [\n      { internalType: \"bool\", name: \"isListed\", type: \"bool\" },\n      {\n        internalType: \"uint256\",\n        name: \"collateralFactorMantissa\",\n        type: \"uint256\",\n      },\n      { internalType: \"bool\", name: \"isQied\", type: \"bool\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkMembership\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"supplyRewardSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: \"uint8\", name: \"\", type: \"uint8\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"borrowRewardSpeeds\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ORACLE_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IOToken\",\n        name: \"oToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnderlyingPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"price\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst DISTRIBUTION_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"rewardMarketState\",\n    outputs: [\n      { internalType: \"uint256\", name: \"supplySpeed\", type: \"uint256\" },\n      { internalType: \"uint224\", name: \"supplyIndex\", type: \"uint224\" },\n      { internalType: \"uint32\", name: \"supplyBlock\", type: \"uint32\" },\n      { internalType: \"uint256\", name: \"borrowSpeed\", type: \"uint256\" },\n      { internalType: \"uint224\", name: \"borrowIndex\", type: \"uint224\" },\n      { internalType: \"uint32\", name: \"borrowBlock\", type: \"uint32\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"rewardAccountState\",\n    outputs: [\n      { internalType: \"uint256\", name: \"rewardAccrued\", type: \"uint256\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst LENS_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract ComptrollerLensInterface\",\n        name: \"comptroller\",\n        type: \"address\",\n      },\n      { internalType: \"address\", name: \"account\", type: \"address\" },\n    ],\n    name: \"rewardsAccrued\",\n    outputs: [\n      {\n        internalType: \"address[]\",\n        name: \"rewardTokens\",\n        type: \"address[]\",\n      },\n      { internalType: \"uint256[]\", name: \"accrued\", type: \"uint256[]\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst REWARD_TOKEN = {\n  address: \"0x43E8809ea748EFf3204ee01F08872F063e44065f\",\n  icon: \"https://ipfs.near.social/ipfs/bafkreihtevj6whwlekvhfymajsosbhkqxljqwumgniacye724pxvt24tk4\",\n  symbol: \"MENDI\",\n};\n\nconst {\n  multicallAddress,\n  unitrollerAddress,\n  oracleAddress,\n  distributionAddress,\n  lensAddress,\n  account,\n  update,\n  dapp,\n  onLoad,\n} = props;\n\nif (!multicallAddress || !unitrollerAddress || !update || !account) return \"\";\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\nconsole.log(`${dapp}-update`);\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nlet _cTokensData = {};\nlet _loanToValue = null;\nlet _underlyPrice = {};\nlet _liquidity = null;\nlet _underlyingBalance = null;\nlet _userMerberShip = null;\nlet _rewards = {};\nlet _accountRewards = {};\nlet count = 0;\nlet oTokensLength = Object.values(markets).length;\nlet usdcPrice = 0;\n\nconst formatedData = (key) => {\n  console.log(`${dapp}-${key}`, count);\n  if (count < 6) return;\n  count = 0;\n  oTokensLength = Object.values(markets).length;\n  let totalSupplyUsd = Big(0);\n  let totalBorrowUsd = Big(0);\n  let userTotalSupplyUsd = Big(0);\n  let userTotalBorrowUsd = Big(0);\n  let totalCollateralUsd = Big(0);\n  let totalAccountDistributionApy = Big(0);\n  const markets = {};\n  Object.values(_cTokensData).forEach((market) => {\n    const underlyingPrice = _underlyPrice[market.address] || 1;\n    const marketSupplyUsd = Big(market.totalSupply || 0).mul(underlyingPrice);\n    const marketBorrowUsd = Big(market.totalBorrows || 0).mul(underlyingPrice);\n    totalSupplyUsd = totalSupplyUsd.plus(marketSupplyUsd);\n    totalBorrowUsd = totalBorrowUsd.plus(marketBorrowUsd);\n    userTotalSupplyUsd = userTotalSupplyUsd.plus(\n      Big(market.userSupply).mul(underlyingPrice)\n    );\n    userTotalBorrowUsd = userTotalBorrowUsd.plus(\n      Big(market.userBorrow).mul(underlyingPrice)\n    );\n    if (_userMerberShip[market.address]) {\n      totalCollateralUsd = totalCollateralUsd.plus(\n        Big(market.userSupply)\n          .mul(underlyingPrice)\n          .mul(_loanToValue[market.address])\n          .div(100)\n      );\n    }\n\n    const distributionSupplyApy = _rewards[market.address].supply\n      .div(marketSupplyUsd.eq(0) ? 1 : marketSupplyUsd)\n      .mul(100)\n      .toFixed(2);\n\n    const distributionBorrowApy = _rewards[market.address].borrow\n      .div(marketBorrowUsd.eq(0) ? 1 : marketBorrowUsd)\n      .mul(100)\n      .toFixed(2);\n    totalAccountDistributionApy = totalAccountDistributionApy\n      .plus(distributionSupplyApy)\n      .plus(distributionBorrowApy);\n    const supplyApy = Big(market.supplyRatePerBlock)\n      .mul(60 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      .mul(100);\n\n    const borrowApy = Big(market.borrowRatePerBlock)\n      .mul(60 * 60 * 24)\n      .plus(1)\n      .pow(365)\n      .minus(1)\n      .mul(100);\n\n    markets[market.address] = {\n      ...market,\n      loanToValue: _loanToValue[market.address],\n      liquidity: _liquidity[market.address],\n      underlyingPrice: underlyingPrice,\n      userUnderlyingBalance: _underlyingBalance[market.address],\n      userMerberShip: _userMerberShip[market.address],\n      supplyApy: supplyApy.toFixed(2) + \"%\",\n      borrowApy: borrowApy.toFixed(2) + \"%\",\n      distributionApy: [\n        {\n          ...REWARD_TOKEN,\n          supply: distributionSupplyApy + \"%\",\n          borrow: distributionBorrowApy + \"%\",\n        },\n      ],\n      dapp,\n      rewards,\n    };\n  });\n  let rewards;\n  if (_accountRewards && Big(_accountRewards.reward || 0).gt(0)) {\n    const dailyRewards = totalAccountDistributionApy\n      .mul(userTotalSupplyUsd.add(userTotalBorrowUsd))\n      .div(365 * 100)\n      .div(_accountRewards.price);\n    rewards = [\n      {\n        ...REWARD_TOKEN,\n        dailyRewards: dailyRewards.lt(0.000001)\n          ? \"0.000001\"\n          : dailyRewards.toString(),\n        price: _accountRewards.price,\n        unclaimed: _accountRewards.reward,\n      },\n    ];\n  }\n  onLoad({\n    markets,\n    rewards,\n    totalSupplyUsd: totalSupplyUsd.toString(),\n    totalBorrowUsd: totalBorrowUsd.toString(),\n    userTotalSupplyUsd: userTotalSupplyUsd.toString(),\n    userTotalBorrowUsd: userTotalBorrowUsd.toString(),\n    totalCollateralUsd: totalCollateralUsd.toString(),\n  });\n};\nconst getUnitrollerData = () => {\n  const calls = [];\n  const oTokens = Object.values(markets);\n  oTokens.forEach((token) => {\n    calls.push({\n      address: unitrollerAddress,\n      name: \"markets\",\n      params: [token.address],\n    });\n    if (account) {\n      calls.push({\n        address: unitrollerAddress,\n        name: \"checkMembership\",\n        params: [account, token.address],\n      });\n    }\n  });\n  multicallv2(\n    UNITROLLER_ABI,\n    calls,\n    {},\n    (res) => {\n      _loanToValue = {};\n      _userMerberShip = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const index = Math.floor(i / (account ? 2 : 1));\n        const mod = i % (account ? 2 : 1);\n        switch (mod) {\n          case 0:\n            _loanToValue[oTokens[index].address] = ethers.utils.formatUnits(\n              res[i][1]._hex,\n              16\n            );\n            break;\n          case 1:\n            _userMerberShip[oTokens[index].address] = res[i][0];\n            break;\n          default:\n        }\n      }\n      count++;\n      formatedData(\"getUnitrollerData\");\n    },\n    (err) => {\n      console.log(\"error-getUnitrollerData\", err);\n      setTimeout(() => {\n        getUnitrollerData();\n      }, 1000);\n    }\n  );\n};\nconst getUnderlyPrice = () => {\n  if (!oracleAddress) return;\n  const oTokens = Object.keys(markets);\n  const calls = oTokens.map((token) => ({\n    address: oracleAddress,\n    name: \"getUnderlyingPrice\",\n    params: [token],\n  }));\n  multicallv2(\n    ORACLE_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyPrice = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyPrice[oTokens[i]] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          36 - markets[oTokens[i]].underlyingToken.decimals\n        );\n        if (oTokens[i] === \"0x333D8b480BDB25eA7Be4Dd87EEB359988CE1b30D\")\n          usdcPrice = _underlyPrice[oTokens[i]];\n      }\n      count++;\n      formatedData(\"getUnderlyPrice\");\n    },\n    (err) => {\n      console.log(\"error-getUnderlyPrice\", err);\n    }\n  );\n};\nconst getOTokenLiquidity = () => {\n  const assets = Object.values(markets);\n  let nativeOToken = \"\";\n  const calls = assets\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      address: market.underlyingToken.address,\n      name: \"balanceOf\",\n      params: [market.address],\n    }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _liquidity = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        const oToken = markets[calls[i].params[0]];\n        _liquidity[oToken.address] = ethers.utils.formatUnits(\n          res[i][0]._hex,\n          oToken.underlyingToken.decimals\n        );\n      }\n      const provider = Ethers.provider();\n      if (nativeOToken) {\n        provider.getBalance(nativeOToken).then((rawBalance) => {\n          _liquidity[nativeOToken] = ethers.utils.formatUnits(\n            rawBalance._hex,\n            18\n          );\n          count++;\n          formatedData(\"getOTokenLiquidity\");\n        });\n      } else {\n        count++;\n        formatedData(\"getOTokenLiquidity\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getOTokenLiquidity();\n      }, 500);\n    }\n  );\n};\nconst getWalletBalance = () => {\n  let nativeOToken = \"\";\n  const underlyingTokens = Object.values(markets)\n    .filter((market) => {\n      if (market.underlyingToken.address === \"native\")\n        nativeOToken = market.address;\n      return (\n        market.underlyingToken.address &&\n        market.underlyingToken.address !== \"native\"\n      );\n    })\n    .map((market) => ({\n      ...market.underlyingToken,\n      oTokenAddress: market.address,\n    }));\n  const calls = underlyingTokens.map((token) => ({\n    address: token.address,\n    name: \"balanceOf\",\n    params: [account],\n  }));\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      _underlyingBalance = {};\n      for (let i = 0, len = res.length; i < len; i++) {\n        _underlyingBalance[underlyingTokens[i].oTokenAddress] =\n          ethers.utils.formatUnits(\n            res[i][0]._hex,\n            underlyingTokens[i].decimals\n          );\n      }\n      const provider = Ethers.provider();\n      provider.getBalance(account).then((rawBalance) => {\n        _underlyingBalance[nativeOToken] = ethers.utils.formatUnits(\n          rawBalance._hex,\n          18\n        );\n        count++;\n        formatedData(\"underlyingTokens\");\n      });\n    },\n    () => {\n      setTimeout(() => {\n        getWalletBalance();\n      }, 500);\n    }\n  );\n};\nconst getCTokenData = (oToken) => {\n  if (oTokensLength === 0) return;\n  const calls = [\n    {\n      address: oToken.address,\n      name: \"exchangeRateStored\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalSupply\",\n    },\n    {\n      address: oToken.address,\n      name: \"totalBorrows\",\n    },\n    {\n      address: oToken.address,\n      name: \"supplyRatePerBlock\",\n    },\n    {\n      address: oToken.address,\n      name: \"borrowRatePerBlock\",\n    },\n    {\n      address: oToken.address,\n      name: \"getAccountSnapshot\",\n      params: [account],\n    },\n  ];\n  multicallv2(\n    OTOKEN_ABI,\n    calls,\n    {},\n    (res) => {\n      oTokensLength--;\n      const exchangeRateStored = ethers.utils.formatUnits(\n        res[0][0]._hex,\n        10 + oToken.underlyingToken.decimals\n      );\n      const userSupply = ethers.utils.formatUnits(\n        res[5][1]._hex,\n        oToken.decimals\n      );\n      const totalSupply = ethers.utils.formatUnits(\n        res[1][0]._hex,\n        oToken.decimals\n      );\n      _cTokensData[oToken.address] = {\n        ...oToken,\n        exchangeRateStored,\n        totalSupply: Big(totalSupply).mul(exchangeRateStored).toString(),\n        totalBorrows: ethers.utils.formatUnits(\n          res[2][0]._hex,\n          oToken.underlyingToken.decimals\n        ),\n        supplyRatePerBlock: ethers.utils.formatUnits(res[3][0]._hex, 18),\n        borrowRatePerBlock: ethers.utils.formatUnits(res[4][0]._hex, 18),\n        userSupply: Big(userSupply).mul(exchangeRateStored).toString(),\n        userBorrow: ethers.utils.formatUnits(\n          res[5][2]._hex,\n          oToken.underlyingToken.decimals\n        ),\n      };\n      if (oTokensLength === 0) {\n        count++;\n        formatedData(\"oTokens data\");\n      }\n    },\n    () => {\n      setTimeout(() => {\n        getCTokenData(oToken);\n      }, 500);\n    }\n  );\n};\nconst getCTokensData = () => {\n  Object.values(markets).forEach((market) => {\n    getCTokenData(market);\n  });\n};\n\nconst getUserRewards = (price) => {\n  multicallv2(\n    LENS_ABI,\n    [\n      {\n        address: lensAddress,\n        name: \"rewardsAccrued\",\n        params: [unitrollerAddress, account],\n      },\n    ],\n    {},\n    (res) => {\n      _accountRewards = {\n        price,\n        reward: ethers.utils.formatUnits(res[0][1][0], 18).toString(),\n      };\n      count++;\n      formatedData(\"rewards\");\n    },\n    (err) => {\n      console.log(dapp + \" error-user-rewards\", err);\n    }\n  );\n};\nconst getRewards = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=mendi-finance&vs_currencies=usd\"\n  ).then((response) => {\n    const data = response.body || [];\n    const price = data[\"mendi-finance\"].usd;\n    const cTokens = Object.keys(markets);\n    const calls = cTokens.map((token) => ({\n      address: distributionAddress,\n      name: \"rewardMarketState\",\n      params: [REWARD_TOKEN.address, token],\n    }));\n    multicallv2(\n      DISTRIBUTION_ABI,\n      calls,\n      {},\n      (res) => {\n        for (let i = 0, len = cTokens.length; i < len; i++) {\n          const token = cTokens[i];\n          const supply = Big(ethers.utils.formatUnits(res[i][0]._hex, 18)).mul(\n            price\n          );\n          const borrow = Big(ethers.utils.formatUnits(res[i][3]._hex, 18)).mul(\n            price\n          );\n          _rewards[token] = {\n            borrow: borrow.mul(60 * 60 * 24 * 365),\n            supply: supply.mul(60 * 60 * 24 * 365),\n          };\n        }\n        getUserRewards(price);\n      },\n      (err) => {\n        console.log(\"error-rewards\", err);\n      }\n    );\n  });\n};\n\nconst init = () => {\n  getUnitrollerData();\n  getUnderlyPrice();\n  getOTokenLiquidity();\n  getWalletBalance();\n  getCTokensData();\n  getRewards();\n};\n\ninit();\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Linea.Lending.MendiData", "fact_widget_deployments_id": "29918f9f1313c698ae12b3ce393f187e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}