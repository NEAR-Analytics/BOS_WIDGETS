{"tx_hash": "7hpDLtG77iRgobUJ8a4g7MESS3UbWmbT84kZTqys6k89", "action_id_social": "CnUjgvMEzsuNuKFcJtFVxaRbhA7qhFzN6V2UbgdvPsst-0-widget", "block_id": 101439393, "block_timestamp": "2023-09-19T01:16:40.190Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.TradeRedeemOutput", "source_code": "const staticRouter = \"0xAdB09F65bd90d19e3148D9ccb693F3161C6DB3E8\";\n\nconst staticRedeemAbis = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"YT\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netPYToRedeem\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeemPyToSyStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netSyOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"YT\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netPYToRedeem\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenOut\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"redeemPyToTokenStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netTokenOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst wethAddress = \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\";\n\nconst {\n  inputCurrencyAmount,\n  outputCurrency,\n  inputCurrency,\n  mintType,\n  market,\n  account,\n  onLoadOut,\n} = props;\n\nState.init({\n  quoting: false,\n  // amount: \"\",\n});\n\nconst signer = Ethers.provider().getSigner();\n\nconst contract = new ethers.Contract(staticRouter, staticRedeemAbis, signer);\n\nconst YT = market.yt.address;\n\nconst getRedeemPyToSy = (amount) => {\n  return contract\n    .redeemPyToSyStatic(YT, amount)\n    .then((res) => {\n      const netSyOutRaw = res.toString();\n\n      const parsedOut = ethers.utils.formatUnits(\n        netSyOutRaw,\n        market.pt.decimals\n      );\n\n      State.update({\n        amount: parsedOut,\n        quoting: false,\n        errorMsg: \"\",\n      });\n\n      onLoadOut({\n        amount: parsedOut,\n        quoting: false,\n      });\n    })\n    .catch((e) => {\n      onLoadOut({\n        amount: \"0\",\n        quoting: false,\n      });\n    });\n};\n\nconst getkyberData = (tokenIn, tokenOut, amount, isUnderlying) => {\n  const url = `https://aggregator-api.kyberswap.com/arbitrum/route/encode?tokenIn=${tokenIn}&tokenOut=${tokenOut}&amountIn=${amount}&to=0x0000000001e4ef00d069e71d6ba041b0a16f7ea0`;\n\n  return asyncFetch(url)\n    .then((res) => {\n      if (isUnderlying) {\n        return { amount };\n      } else {\n        const { outputAmount, routerAddress, encodedSwapData } = res.body;\n        return { amount: outputAmount, routerAddress, encodedSwapData };\n      }\n    })\n    .catch((e) => {\n      return {\n        error: true,\n        amount,\n      };\n    });\n};\n\nconst getStaticRedeem = () => {\n  const netPyIn = Big(inputCurrencyAmount)\n    .times(Big(10).pow(market.yt.decimals))\n    .toFixed(0);\n\n  if (outputCurrency.baseType === \"SY\") {\n    return getRedeemPyToSy(netPyIn);\n  } else {\n    const bulk = \"0x0000000000000000000000000000000000000000\";\n\n    const tokenOut =\n      outputCurrency.address === \"native\"\n        ? wethAddress\n        : outputCurrency.address;\n\n    // console.log(\"YT, netPyIn, tokenOut, bulk: \", YT, netPyIn, tokenOut, bulk);\n\n    contract\n      .redeemPyToTokenStatic(YT, netPyIn, tokenOut, bulk)\n      .then((res) => {\n        //  if is underlying, redeem  it.\n        const netSyOutRaw = res.toString();\n        console.log(\"netSyOutRaw: \", netSyOutRaw);\n\n        const parsedOut = ethers.utils.formatUnits(\n          netSyOutRaw,\n          outputCurrency.decimals\n        );\n\n        State.update({\n          amount: parsedOut,\n          quoting: false,\n          errorMsg: \"\",\n        });\n\n        onLoadOut({\n          amount: parsedOut,\n          quoting: false,\n        });\n\n        // if (isUnderlying) {\n        //   const parsedOut = ethers.utils.formatUnits(\n        //     netSyOutRaw,\n        //     market.underlyingAsset.decimals\n        //   );\n\n        //   return;\n        // }\n\n        // contract\n        //   .redeemPyToTokenStatic(\n        //     YT,\n        //     netPyIn,\n        //     market.underlyingAsset.address,\n        //     bulk\n        //   )\n        //   .then((underlyingRes) => {\n        //     const rawUnderlyingRes = underlyingRes.toString();\n\n        //     getkyberData(\n        //       market.underlyingAsset.address,\n        //       tokenOut,\n        //       rawUnderlyingRes,\n        //       market.underlyingAsset.address.toLowerCase() ===\n        //         outputCurrency.address.toLowerCase()\n        //     ).then(({ amount, error, routerAddress, encodedSwapData }) => {\n        //       console.log(\"amount kyber: \", amount);\n        //       // const useOrigin = !amount;\n\n        //       if (!amount || Big(amount).lt(netSyOutRaw)) {\n        //         State.update({\n        //           amount: ethers.utils.formatUnits(\n        //             netSyOutRaw,\n        //             outputCurrency.decimals\n        //           ),\n        //           quoting: false,\n        //           errorMsg: \"Bad Route\",\n        //         });\n\n        //         onLoadOut({\n        //           amount: ethers.utils.formatUnits(\n        //             netSyOutRaw,\n        //             outputCurrency.decimals\n        //           ),\n        //           quoting: false,\n        //         });\n        //       } else {\n        //         State.update({\n        //           amount: ethers.utils.formatUnits(\n        //             amount,\n        //             outputCurrency.decimals\n        //           ),\n        //           quoting: false,\n        //           errorMsg: \"\",\n        //         });\n\n        //         onLoadOut({\n        //           amount: ethers.utils.formatUnits(\n        //             amount,\n        //             outputCurrency.decimals\n        //           ),\n        //           quoting: false,\n        //           redeemParams: {\n        //             routerAddress,\n        //             encodedSwapData,\n        //             swapType: 1,\n        //           },\n        //         });\n        //       }\n        //     });\n        //   });\n      })\n      .catch((e) => {\n        console.log(\"e1111: \", e);\n        State.update({\n          amount: \"\",\n          quoting: false,\n          errorMsg: \"\",\n        });\n        onLoadOut({\n          amount: \"\",\n        });\n      });\n  }\n};\n\nconst qs = `${inputCurrencyAmount} ${outputCurrency.address} to ${mintType}`;\n\nif (outputCurrency && market) {\n  State.update({\n    qs,\n  });\n\n  if (inputCurrencyAmount) {\n    getStaticRedeem();\n  }\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.TradeRedeemOutput", "fact_widget_deployments_id": "59f4ff531e8f431ddc0f5143a1082ccd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}