{"tx_hash": "77fYzMmYbR6baU6tKQ6wb96nEHpBJKioWwt9ghKQqU3M", "action_id_social": "FqEjxtpkBDKSWH5WHAH9XD685dKu98cUwBcq4UhkqYVV-0-widget", "block_id": 117906344, "block_timestamp": "2024-04-29T20:52:39.548Z", "signer_id": "bluebiu.near", "widget_name": "AAVE.Modal.SupplyModal", "source_code": "const {\n  dexConfig,\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  depositETHGas,\n  depositERC20Gas,\n  formatHealthFactor,\n  calcHealthFactor,\n  theme,\n  addAction,\n} = props;\n\nif (!data) {\n  return <div />;\n}\n\nconst MIN_ETH_GAS_FEE = 0.001;\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  symbol,\n  balance,\n  prices,\n  supplyAPY,\n  usageAsCollateralEnabled,\n  decimals,\n  underlyingAsset,\n  name: tokenName,\n  healthFactor,\n  supportPermit,\n} = data;\nconsole.log(\"supplyModal---\", props);\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n  allowanceAmount: \"0\",\n  needApprove: false,\n});\n\nfunction updateGas() {\n  if (symbol === config.nativeCurrency.symbol) {\n    depositETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    depositERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\n\nfunction getNonce(tokenAddress, userAddress) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.nonces(userAddress).then((nonce) => nonce.toNumber());\n}\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} tokenName token name\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @returns raw signature string will could be used in supplyWithPermit\n */\nfunction signERC20Approval(user, reserve, tokenName, amount, deadline) {\n  return getNonce(reserve, user).then((nonce) => {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: \"name\", type: \"string\" },\n          { name: \"version\", type: \"string\" },\n          { name: \"chainId\", type: \"uint256\" },\n          { name: \"verifyingContract\", type: \"address\" },\n        ],\n        Permit: [\n          { name: \"owner\", type: \"address\" },\n          { name: \"spender\", type: \"address\" },\n          { name: \"value\", type: \"uint256\" },\n          { name: \"nonce\", type: \"uint256\" },\n          { name: \"deadline\", type: \"uint256\" },\n        ],\n      },\n      primaryType: \"Permit\",\n      domain: {\n        name: tokenName,\n        version: \"1\",\n        chainId,\n        verifyingContract: reserve,\n      },\n      message: {\n        owner: user,\n        spender: config.aavePoolV3Address,\n        value: amount,\n        nonce,\n        deadline,\n      },\n    };\n\n    const dataToSign = JSON.stringify(typeData);\n\n    return Ethers.provider().send(\"eth_signTypedData_v4\", [user, dataToSign]);\n  });\n}\n\n/**\n *\n * @param {string} user user address\n * @param {string} reserve AAVE reserve address (token to supply)\n * @param {string} amount token amount in full decimals\n * @param {number} deadline unix timestamp in SECONDS\n * @param {string} rawSig signature from signERC20Approval\n * @returns txn object\n */\nfunction supplyWithPermit(user, reserve, amount, deadline, rawSig) {\n  const sig = ethers.utils.splitSignature(rawSig);\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    config.aavePoolV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n  return pool[\n    \"supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)\"\n  ](reserve, amount, user, 0, deadline, sig.v, sig.r, sig.s);\n}\n\nfunction depositETH(amount) {\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n      return wrappedTokenGateway.depositETH(\n        config.aavePoolV3Address,\n        address,\n        0,\n        {\n          value: amount,\n        }\n      );\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          if (status === 1) {\n            formatAddAction(\n              Big(amount).div(Big(10).pow(decimals)).toFixed(8),\n              status,\n              transactionHash\n            );\n            onActionSuccess({\n              msg: `You supplied ${Big(amount)\n                .div(Big(10).pow(decimals))\n                .toFixed(8)} ${symbol}`,\n              callback: () => {\n                onRequestClose();\n                State.update({\n                  loading: false,\n                });\n              },\n            });\n            console.log(\"tx succeeded\", res);\n          } else {\n            console.log(\"tx failed\", res);\n            State.update({\n              loading: false,\n            });\n          }\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction depositPacETH(amount) {\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n      return wrappedTokenGateway.depositETH(\n        config.aavePoolV3Address,\n        address,\n        0,\n        {\n          value: amount,\n        }\n      );\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          if (status === 1) {\n            formatAddAction(\n              Big(amount).div(Big(10).pow(decimals)).toFixed(8),\n              status,\n              transactionHash\n            );\n            onActionSuccess({\n              msg: `You supplied ${Big(amount)\n                .div(Big(10).pow(decimals))\n                .toFixed(8)} ${symbol}`,\n              callback: () => {\n                onRequestClose();\n                State.update({\n                  loading: false,\n                });\n              },\n            });\n            console.log(\"tx succeeded\", res);\n          } else {\n            console.log(\"tx failed\", res);\n            State.update({\n              loading: false,\n            });\n          }\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction getAllowance() {\n  const tokenAddress = underlyingAsset;\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      const token = new ethers.Contract(\n        tokenAddress,\n        config.erc20Abi.body,\n        Ethers.provider().getSigner()\n      );\n      token\n        .allowance(userAddress, config.aavePoolV3Address)\n        .then((allowanceAmount) => allowanceAmount.toString())\n        .then((allowanceAmount) => {\n          State.update({\n            allowanceAmount: Big(allowanceAmount)\n              .div(Big(10).pow(decimals))\n              .toFixed(),\n          });\n        });\n    });\n}\n\ngetAllowance();\n\nfunction depositFromApproval(amount) {\n  const tokenAddress = underlyingAsset;\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n          { internalType: \"address\", name: \"onBehalfOf\", type: \"address\" },\n          { internalType: \"uint16\", name: \"referralCode\", type: \"uint16\" },\n        ],\n        name: \"supply\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      return pool[\"supply(address,uint256,address,uint16)\"](\n        tokenAddress,\n        amount,\n        userAddress,\n        0\n      );\n    });\n}\n\nfunction formatAddAction(_amount, status, transactionHash) {\n  addAction?.({\n    type: \"Lending\",\n    action: \"Supply\",\n    token: {\n      symbol,\n    },\n    amount: _amount,\n    template: dexConfig.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\nfunction approve(amount) {\n  const tokenAddress = underlyingAsset;\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n  return token[\"approve(address,uint256)\"](config.aavePoolV3Address, amount);\n}\n\nfunction update() {\n  if (supportPermit) {\n    return;\n  }\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\n\nupdate();\n\nfunction depositErc20(amount) {\n  State.update({\n    loading: true,\n  });\n  const deadline = Math.floor(Date.now() / 1000 + 3600); // after an hour\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((userAddress) => {\n      if (!supportPermit) {\n        depositFromApproval(amount)\n          .then((tx) => {\n            tx.wait()\n              .then((res) => {\n                const { status, transactionHash } = res;\n                if (status === 1) {\n                  formatAddAction(\n                    Big(amount).div(Big(10).pow(decimals)).toFixed(8),\n                    status,\n                    transactionHash\n                  );\n                  onActionSuccess({\n                    msg: `You supplied ${Big(amount)\n                      .div(Big(10).pow(decimals))\n                      .toFixed(8)} ${symbol}`,\n                    callback: () => {\n                      onRequestClose();\n                      State.update({\n                        loading: false,\n                      });\n                    },\n                  });\n                  console.log(\"tx succeeded\", res);\n                } else {\n                  State.update({\n                    loading: false,\n                  });\n                  console.log(\"tx failed\", res);\n                }\n              })\n              .catch(() => State.update({ loading: false }));\n          })\n          .catch(() => State.update({ loading: false }));\n      } else {\n        const token = underlyingAsset;\n        signERC20Approval(userAddress, token, tokenName, amount, deadline)\n          .then((rawSig) => {\n            return supplyWithPermit(\n              userAddress,\n              token,\n              amount,\n              deadline,\n              rawSig\n            );\n          })\n          .then((tx) => {\n            tx.wait()\n              .then((res) => {\n                const { status, transactionHash } = res;\n                console.log(\"SUCCESS--\", status, transactionHash);\n                if (status === 1) {\n                  formatAddAction(\n                    Big(amount).div(Big(10).pow(decimals)).toFixed(8),\n                    status,\n                    transactionHash\n                  );\n                  onActionSuccess({\n                    msg: `You supplied ${Big(amount)\n                      .div(Big(10).pow(decimals))\n                      .toFixed(8)} ${symbol}`,\n                    callback: () => {\n                      onRequestClose();\n                      State.update({\n                        loading: false,\n                      });\n                    },\n                  });\n                  console.log(\"tx succeeded\", res);\n                } else {\n                  State.update({\n                    loading: false,\n                  });\n                  console.log(\"tx failed\", res);\n                }\n              })\n              .catch(() => State.update({ loading: false }));\n          })\n          .catch(() => State.update({ loading: false }));\n      }\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nconst maxValue =\n  symbol === config.nativeCurrency.symbol\n    ? Big(balance).minus(MIN_ETH_GAS_FEE).toFixed(decimals)\n    : Big(balance).toFixed(decimals);\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n  const newHealthFactor = formatHealthFactor(\n    calcHealthFactor(\"SUPPLY\", symbol, state.amount)\n  );\n  console.log(\n    \"supply updateNewHealthFactor\",\n    symbol,\n    state.amount,\n    newHealthFactor\n  );\n  State.update({ newHealthFactor });\n}, 1000);\n\nconst disabled =\n  !data.balanceInUSD ||\n  Number(data.balanceInUSD) === 0 ||\n  !state.amount ||\n  !isValid(state.amount) ||\n  Number(state.amount) === 0;\n\nconst changeValue = (value) => {\n  if (Number(value) > Number(maxValue)) {\n    value = maxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value).mul(prices[symbol]).toFixed(2, ROUND_DOWN);\n    State.update({\n      amountInUSD,\n    });\n\n    updateNewHealthFactor();\n  } else {\n    State.update({\n      amountInUSD: \"0.00\",\n      newHealthFactor: \"-\",\n    });\n  }\n  State.update({ amount: value });\n};\n\nreturn (\n  <Widget\n    src={`${config.ownerId}/widget/AAVE.Modal.BaseModal`}\n    props={{\n      title: `Supply ${symbol}`,\n      onRequestClose: onRequestClose,\n      children: (\n        <WithdrawContainer>\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Amount\",\n              config,\n              children: (\n                <>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: (\n                        <TokenTexture>\n                          <Input\n                            type=\"number\"\n                            value={state.amount}\n                            onChange={(e) => {\n                              changeValue(e.target.value);\n                            }}\n                            placeholder=\"0\"\n                          />\n                        </TokenTexture>\n                      ),\n                      right: (\n                        <TokenWrapper>\n                          <img width={26} height={26} src={data?.icon} />\n                          <TokenTexture>{symbol}</TokenTexture>\n                        </TokenWrapper>\n                      ),\n                    }}\n                  />\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <GrayTexture>${state.amountInUSD}</GrayTexture>,\n                      right: (\n                        <GrayTexture>\n                          Wallet Balance:{\" \"}\n                          {isValid(balance) && balance !== \"-\"\n                            ? Big(balance).toFixed(7)\n                            : balance}\n                          <Max\n                            onClick={() => {\n                              changeValue(maxValue);\n                            }}\n                          >\n                            MAX\n                          </Max>\n                        </GrayTexture>\n                      ),\n                    }}\n                  />\n                </>\n              ),\n            }}\n          />\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Transaction Overview\",\n              config,\n              children: (\n                <TransactionOverviewContainer>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <PurpleTexture>Supply APY</PurpleTexture>,\n                      right: (\n                        <WhiteTexture>\n                          {(Number(supplyAPY) * 100).toFixed(2)}%\n                        </WhiteTexture>\n                      ),\n                    }}\n                  />\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <PurpleTexture>Collateralization</PurpleTexture>,\n                      right: usageAsCollateralEnabled ? (\n                        <GreenTexture>Enabled</GreenTexture>\n                      ) : (\n                        <RedTexture>Disabled</RedTexture>\n                      ),\n                    }}\n                  />\n\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <PurpleTexture>Health Factor</PurpleTexture>,\n                      right: (\n                        <div style={{ textAlign: \"right\" }}>\n                          <GreenTexture>\n                            {formatHealthFactor(healthFactor)}\n\n                            <img\n                              src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                              width={16}\n                              height={16}\n                            />\n                            {state.newHealthFactor}\n                          </GreenTexture>\n                          <WhiteTexture>\n                            Liquidation at &lt; {config.FIXED_LIQUIDATION_VALUE}\n                          </WhiteTexture>\n                        </div>\n                      ),\n                    }}\n                  />\n                </TransactionOverviewContainer>\n              ),\n            }}\n          />\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n            props={{ gas: state.gas, config }}\n          />\n          {state.needApprove && (\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                config,\n                theme,\n                loading: state.loading,\n                children: `Approve ${symbol}`,\n                disabled,\n                onClick: () => {\n                  State.update({\n                    loading: true,\n                  });\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  approve(amount)\n                    .then((tx) => {\n                      tx.wait()\n                        .then((res) => {\n                          const { status } = res;\n                          if (status === 1) {\n                            console.log(\"tx succeeded\", res);\n                            State.update({\n                              needApprove: false,\n                              loading: false,\n                            });\n                          } else {\n                            console.log(\"tx failed\", res);\n                            State.update({\n                              loading: false,\n                            });\n                          }\n                        })\n                        .catch(() => State.update({ loading: false }));\n                    })\n                    .catch(() => State.update({ loading: false }));\n                },\n              }}\n            />\n          )}\n          {!state.needApprove && (\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                config,\n                theme,\n                children: `Supply ${symbol}`,\n                loading: state.loading,\n                disabled,\n                onClick: () => {\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  if (symbol === config.nativeCurrency.symbol) {\n                    if (\n                      [\"ZeroLend\", \"AAVE V3\", \"Seamless Protocol\"].includes(\n                        dexConfig.name\n                      )\n                    ) {\n                      // supply eth\n                      depositETH(amount);\n                    }\n                    if ([\"Pac Finance\"].includes(dexConfig.name)) {\n                      depositPacETH(amount);\n                    }\n                  } else {\n                    // supply common\n                    depositErc20(amount);\n                    // if (\n                    //   [\"ZeroLend\", \"AAVE V3\", \"Seamless Protocol\"].includes(\n                    //     dexConfig.name\n                    //   )\n                    // ) {\n\n                    // }\n                    // if ([\"Pac Finance\"].includes(dexConfig.name)) {\n                    //   depositPacErc20(amount);\n                    // }\n                  }\n                },\n              }}\n            />\n          )}\n        </WithdrawContainer>\n      ),\n      config,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/AAVE.Modal.SupplyModal", "fact_widget_deployments_id": "a6e4d1d807d1be6d5c256db196e5e2bf", "inserted_timestamp": "2024-04-29T23:43:30.865Z", "modified_timestamp": "2024-04-29T23:43:30.865Z", "__row_index": 9}