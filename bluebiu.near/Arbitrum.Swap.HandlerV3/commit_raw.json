{"tx_hash": "AZuTS1SsKQZ96h5oxVzhh5D1oev8V6jZBWrwTfPEc31e", "action_id_social": "Fo5dGBi9RA2BWu84EsbzA9yXzr2QJ3e6hnhqhSBxu9u9-0-widget", "block_id": 101541011, "block_timestamp": "2023-09-20T09:36:52.702Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Swap.HandlerV3", "source_code": "const swapRouterV3Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInputSingle\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountMinimum\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"results\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\nconst {\n  routerAddress,\n  wethAddress,\n  account,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrency,\n  fee,\n  swapping,\n  onSuccess,\n  onError,\n} = props;\nif (!swapping) return;\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst value = expandToken(inputCurrencyAmount, inputCurrency.decimals).toFixed(\n  0\n);\n\nconst signer = Ethers.provider().getSigner();\n\nconst abi = swapRouterV3Abi;\nconst iface = new ethers.utils.Interface(abi);\n\nconst deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\nconst tokenIn =\n  inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\nconst tokenOut =\n  outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\nconst options = {\n  gasLimit: 5000000,\n  value: inputCurrency.address === \"native\" ? value : \"0\",\n};\n\nconst inputs = [\n  {\n    tokenIn,\n    tokenOut,\n    fee: fee,\n    recipient:\n      outputCurrency.address === \"native\"\n        ? \"0x0000000000000000000000000000000000000000\"\n        : account,\n    deadline: deadline.toFixed(),\n    amountIn: value,\n    amountOutMinimum: \"0\",\n    sqrtPriceLimitX96: \"0\",\n  },\n];\n\nconst multicallParams = [];\nconst encodedDataCallSwap = iface.encodeFunctionData(\n  \"exactInputSingle\",\n  inputs\n);\n\nmulticallParams.push(encodedDataCallSwap);\n\nif (outputCurrency.address === \"native\") {\n  multicallParams.push(iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account]));\n}\nconst multicallContract = new ethers.Contract(routerAddress, abi, signer);\n\nmulticallContract\n  .multicall(multicallParams, options)\n  .then((res) => {\n    onSuccess(res);\n  })\n  .catch((err) => {\n    console.log(err);\n    onError(err);\n  });\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Swap.HandlerV3", "fact_widget_deployments_id": "818745ae69fecbe827e17477b4dc32e2", "inserted_timestamp": "2023-09-20T11:33:56.003Z", "modified_timestamp": "2023-09-20T11:33:56.003Z", "__row_index": 0}