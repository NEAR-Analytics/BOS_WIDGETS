{"tx_hash": "FF7nxa8zMz1VE4LbM7NY4gkFN9PVT3diQpt8KQuiq6HJ", "action_id_social": "B1Z2zuFtQhSwRZpneych1ZxdH7xKrcxoHzVnumM1Dzmw-0-widget", "block_id": 116522609, "block_timestamp": "2024-04-10T06:50:20.318Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.AmbientAmountOut", "source_code": "const ROUTER_ABI = [\n  {\n    inputs: [\n      { internalType: \"uint16\", name: \"callpath\", type: \"uint16\" },\n      { internalType: \"bytes\", name: \"cmd\", type: \"bytes\" },\n    ],\n    name: \"userCmd\",\n    outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst QUOTER_ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"base\", type: \"address\" },\n      { internalType: \"address\", name: \"quote\", type: \"address\" },\n      { internalType: \"uint256\", name: \"poolIdx\", type: \"uint256\" },\n    ],\n    name: \"queryPrice\",\n    outputs: [{ internalType: \"uint128\", name: \"\", type: \"uint128\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"base\", type: \"address\" },\n      { internalType: \"address\", name: \"quote\", type: \"address\" },\n      { internalType: \"uint256\", name: \"poolIdx\", type: \"uint256\" },\n      { internalType: \"bool\", name: \"isBuy\", type: \"bool\" },\n      { internalType: \"bool\", name: \"inBaseQty\", type: \"bool\" },\n      { internalType: \"uint128\", name: \"qty\", type: \"uint128\" },\n      { internalType: \"uint16\", name: \"poolTip\", type: \"uint16\" },\n      { internalType: \"uint128\", name: \"limitPrice\", type: \"uint128\" },\n    ],\n    name: \"calcImpact\",\n    outputs: [\n      { internalType: \"int128\", name: \"baseFlow\", type: \"int128\" },\n      { internalType: \"int128\", name: \"quoteFlow\", type: \"int128\" },\n      { internalType: \"uint128\", name: \"finalPrice\", type: \"uint128\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  quoterAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  prices,\n  name,\n} = props;\n\nuseEffect(() => {\n  if (!updater || !quoterAddress || !routerAddress) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const options = {\n    value: inputCurrency.isNative ? amount : 0,\n  };\n\n  const path = [\n    inputCurrency.isNative\n      ? \"0x0000000000000000000000000000000000000000\"\n      : inputCurrency.address,\n    outputCurrency.isNative\n      ? \"0x0000000000000000000000000000000000000000\"\n      : outputCurrency.address,\n  ];\n\n  const isReverse = Number(path[0]) > Number(path[1]);\n\n  const RouterContract = new ethers.Contract(\n    routerAddress,\n    ROUTER_ABI,\n    Ethers.provider().getSigner()\n  );\n  const _path = isReverse ? [path[1], path[0]] : [path[0], path[1]];\n  const getAmountout = () => {\n    const QuoterContract = new ethers.Contract(\n      quoterAddress,\n      QUOTER_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    QuoterContract.calcImpact(\n      ..._path,\n      420,\n      !isReverse,\n      !isReverse,\n      amount,\n      0,\n      isReverse ? 65538 : \"21267430153580247136652501917186561137\"\n    )\n      .then((res) => {\n        getTransaction(isReverse ? res[0].abs() : res[1].abs());\n      })\n      .catch((err) => {\n        onLoad({\n          noPair: true,\n          inputCurrency,\n          inputCurrencyAmount,\n          outputCurrency,\n          outputCurrencyAmount: \"\",\n        });\n      });\n  };\n\n  const getTransaction = (amountOut) => {\n    let priceImpact = null;\n\n    const _amountOutWithoutDecimal = Big(\n      ethers.utils.formatUnits(amountOut, outputCurrency.decimals)\n    );\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(_amountOutWithoutDecimal).div(\n        inputCurrencyAmount\n      );\n\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n    const _amountOut = Big(amountOut)\n      .mul(1 - (slippage || 0.005))\n      .toFixed(0);\n\n    const abi = new ethers.utils.AbiCoder();\n\n    const cmd = abi.encode(\n      [\n        \"address\",\n        \"address\",\n        \"uint256\",\n        \"bool\",\n        \"bool\",\n        \"uint128\",\n        \"uint16\",\n        \"uint128\",\n        \"uint128\",\n        \"uint8\",\n      ],\n      [\n        ..._path,\n        420,\n        !isReverse,\n        !isReverse,\n        amount,\n        0,\n        isReverse ? 65538 : \"21267430153580247136652501917186561137\",\n        _amountOut,\n        0,\n      ]\n    );\n\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(_amountOutWithoutDecimal).gt(0.01)\n        ? Big(_amountOutWithoutDecimal).toPrecision(10)\n        : Big(_amountOutWithoutDecimal).toFixed(10),\n      priceImpact,\n      noPair: false,\n    };\n\n    const getTx = (_gas) => {\n      RouterContract.populateTransaction\n        .userCmd(1, cmd, {\n          ...options,\n          gasLimit: _gas,\n        })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n            gas: _gas,\n          });\n        });\n    };\n\n    const estimateGas = () => {\n      RouterContract.estimateGas\n        .userCmd(1, cmd, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n          });\n        });\n    };\n\n    estimateGas();\n  };\n  getAmountout();\n}, [updater]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.AmbientAmountOut", "fact_widget_deployments_id": "f38959a9564a0c43aa9f104e8713877d", "inserted_timestamp": "2024-04-10T08:34:49.883Z", "modified_timestamp": "2024-04-10T08:34:49.883Z", "__row_index": 1}