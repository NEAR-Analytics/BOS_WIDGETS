{"tx_hash": "AQ9YBwexxkFu742AnCwYe9irAmZrS1Eq8Y3j73xYjrUd", "action_id_social": "AGYHkDJyXKdsVnyyfZmkzf433AsLYJFPD5vBnJB85jUL-0-widget", "block_id": 117578420, "block_timestamp": "2024-04-25T07:54:45.008Z", "signer_id": "bluebiu.near", "widget_name": "Blast.BridgeAuthority.Util", "source_code": "const getETHWithdrawalsFromOp = (account) => {\n    const L2_L1_MESSAGE_PASSER_CONTRACT =\n        \"0x4200000000000000000000000000000000000016\";\n    const L1_CROSS_DOMAIN_MESSENGER_CONTRACT =\n        \"0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0\";\n\n    const bridgeAbiWithdrawal = [\n        {\n            \"anonymous\": false,\n            \"inputs\": [\n                {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": false,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"amount\",\n                    \"type\": \"uint256\"\n                },\n                {\n                    \"indexed\": false,\n                    \"internalType\": \"bytes\",\n                    \"name\": \"extraData\",\n                    \"type\": \"bytes\"\n                }\n            ],\n            \"name\": \"ETHBridgeInitiated\",\n            \"type\": \"event\"\n        },\n    ];\n    const balstProvider = new ethers.providers.JsonRpcProvider(\n        \"https://rpc.blast.io\"\n    );\n\n    const bridgeContractWithdrawal = new ethers.Contract(\n        '0x4300000000000000000000000000000000000005',\n        bridgeAbiWithdrawal,\n        balstProvider\n    );\n\n    const withdrawals = [];\n\n    bridgeContractWithdrawal\n        .queryFilter(\n            bridgeContractWithdrawal.filters.ETHBridgeInitiated(\n                account,\n                account,\n                undefined\n            )\n        )\n        .then((events) => {\n            console.log('events: ', events)\n\n            events\n                .sort((a, b) => b.blockNumber - a.blockNumber)\n                .forEach((event) => {\n                    const { args, blockNumber, transactionHash } = event;\n\n                    const messagePasserAbi = [\n                        \"event MessagePassed (uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)\",\n                    ];\n\n                    const messagePasserContract = new ethers.Contract(\n                        L2_L1_MESSAGE_PASSER_CONTRACT,\n                        messagePasserAbi,\n                        balstProvider\n                    );\n\n                    messagePasserContract\n                        .queryFilter(\n                            messagePasserContract.filters.MessagePassed(\n                                undefined,\n                                undefined,\n                                L1_CROSS_DOMAIN_MESSENGER_CONTRACT,\n                                undefined,\n                                undefined,\n                                undefined,\n                                undefined\n                            ),\n                            blockNumber - 150,\n                            blockNumber\n                        )\n                        .then((events) => {\n                            const event = events.filter(\n                                ({ data }) => data.indexOf(account.substring(2)) > -1\n                            )[0];\n\n                            const [\n                                messageNonce,\n                                sender,\n                                target,\n                                value,\n                                minGasLimit,\n                                message,\n                                withdrawalHash,\n                            ] = event.args;\n\n                            let withdrawal = {\n                                blockNumber,\n                                transactionHash,\n                                messageNonce,\n                                sender,\n                                target,\n                                value,\n                                minGasLimit,\n                                message,\n                                withdrawalHash,\n                            };\n                            balstProvider.getBlock(blockNumber).then((res) => {\n                                const { timestamp } = res;\n                                withdrawals.push({\n                                    ...withdrawal,\n                                    timestamp: timestamp * 1000,\n                                });\n                                //   State.update({\n                                //     withdrawals: withdrawals.sort(\n                                //       (a, b) => b.blockNumber - a.blockNumber\n                                //     ),\n                                //   });\n                            });\n                        });\n                });\n        });\n};\n\nconst getWithdrawalStatus = (hash, account) => {\n    return asyncFetch(`/blast/bridge/v1/withdrawal/status?hash=${hash}&walletAddress=${account}`)\n        .then(res => {\n            if (!res.ok) {\n                if (res.status === 429) {\n                    return \n                }\n                return getWithdrawalStatus(hash, account)\n            }\n            return res.body\n        })\n}\n\nconst getProveData = (hash, account) => {\n    return asyncFetch(`/blast/bridge/v1/withdrawal/prove`, {\n        body: JSON.stringify({\n            userAddress: account,\n            withdrawalHash: hash\n        }),\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\"\n    })\n        .then(res => {\n            console.log('res: ', res)\n            if (!res.ok) {\n                return getProveData(hash, account)\n            }\n            return res.body\n        })\n}\n\nconst getWithdrawData = (hash, account) => {\n    return asyncFetch(`/blast/bridge/v1/withdrawal/finalize`, {\n        body: JSON.stringify({\n            userAddress: account,\n            withdrawalHash: hash\n        }),\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\"\n    })\n        .then(res => {\n            console.log('res: ', res)\n            if (!res.ok) {\n                return getWithdrawData(hash, account)\n            }\n            return res.body\n        })\n}\n\nconst getCliamUSDBData = (hash, account) => {\n    return asyncFetch(`/blast/bridge/v1/withdrawal/claim-usdb`, {\n        body: JSON.stringify({\n            userAddress: account,\n            withdrawalHash: hash\n        }),\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\"\n    })\n        .then(res => {\n            console.log('res: ', res)\n            if (!res.ok) {\n                return getCliamUSDBData(hash, account)\n            }\n            return res.body\n        })\n}\n\nfunction getExtraData(etherAmount) {\n    const weiAmount = ethers.utils.parseEther(etherAmount);\n    const hexWei = weiAmount.toHexString();\n    let shortHex = hexWei.slice(2);\n    const targetLength = 64;\n    const zerosNeeded = targetLength - shortHex.length;\n    const zeros = \"0\".repeat(zerosNeeded);\n    const extendedHex = \"0x\" + zeros + shortHex;\n\n    return extendedHex\n}\n\nreturn {\n    getETHWithdrawalsFromOp,\n    getWithdrawalStatus,\n    getProveData,\n    getWithdrawData,\n    getCliamUSDBData,\n    getExtraData,\n}", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Blast.BridgeAuthority.Util", "fact_widget_deployments_id": "c36041c94e9cd190f313c6d6bad098dd", "inserted_timestamp": "2024-04-25T14:01:49.942Z", "modified_timestamp": "2024-04-25T14:01:49.942Z", "__row_index": 3}