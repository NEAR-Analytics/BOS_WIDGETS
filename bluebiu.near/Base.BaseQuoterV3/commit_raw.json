{"tx_hash": "VGePSs9EZwLSWfmbDHUCxhi7jF9HLgbSSXLUyqbUknt", "action_id_social": "2Be2nze1twGgKAnCuFhPxYgAFZ7RyS3DZZZPZX8fzfVL-0-widget", "block_id": 104536165, "block_timestamp": "2023-10-30T12:20:29.427Z", "signer_id": "bluebiu.near", "widget_name": "Base.BaseQuoterV3", "source_code": "const WETH_ADDRESS = \"0x4200000000000000000000000000000000000006\";\n\nconst abi = [\n  {\n    inputs: [{ internalType: \"address\", name: \"_factory\", type: \"address\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"factory\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes\", name: \"path\", type: \"bytes\" },\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n    ],\n    name: \"quoteExactInput\",\n    outputs: [\n      { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n      { internalType: \"uint160[]\", name: \"afterSqrtPList\", type: \"uint160[]\" },\n      {\n        internalType: \"uint32[]\",\n        name: \"initializedTicksCrossedList\",\n        type: \"uint32[]\",\n      },\n      { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"uint24\", name: \"feeUnits\", type: \"uint24\" },\n          { internalType: \"uint160\", name: \"limitSqrtP\", type: \"uint160\" },\n        ],\n        internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quoteExactInputSingle\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"usedAmount\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"returnedAmount\", type: \"uint256\" },\n          { internalType: \"uint160\", name: \"afterSqrtP\", type: \"uint160\" },\n          {\n            internalType: \"uint32\",\n            name: \"initializedTicksCrossed\",\n            type: \"uint32\",\n          },\n          { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        internalType: \"struct IQuoterV2.QuoteOutput\",\n        name: \"output\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes\", name: \"path\", type: \"bytes\" },\n      { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n    ],\n    name: \"quoteExactOutput\",\n    outputs: [\n      { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n      { internalType: \"uint160[]\", name: \"afterSqrtPList\", type: \"uint160[]\" },\n      {\n        internalType: \"uint32[]\",\n        name: \"initializedTicksCrossedList\",\n        type: \"uint32[]\",\n      },\n      { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n          { internalType: \"uint24\", name: \"feeUnits\", type: \"uint24\" },\n          { internalType: \"uint160\", name: \"limitSqrtP\", type: \"uint160\" },\n        ],\n        internalType: \"struct IQuoterV2.QuoteExactOutputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quoteExactOutputSingle\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"usedAmount\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"returnedAmount\", type: \"uint256\" },\n          { internalType: \"uint160\", name: \"afterSqrtP\", type: \"uint160\" },\n          {\n            internalType: \"uint32\",\n            name: \"initializedTicksCrossed\",\n            type: \"uint32\",\n          },\n          { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        internalType: \"struct IQuoterV2.QuoteOutput\",\n        name: \"output\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"int256\", name: \"amount0Delta\", type: \"int256\" },\n      { internalType: \"int256\", name: \"amount1Delta\", type: \"int256\" },\n      { internalType: \"bytes\", name: \"path\", type: \"bytes\" },\n    ],\n    name: \"swapCallback\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst { amountIn, tokenIn, tokenOut, loadAmountOut, quoterContractId } = props;\n\nconst feeList = [8, 10, 40, 300, 1000];\n\nconst queryString = `${tokenIn.address}-${tokenOut.address}-${amountIn}`;\n\nif (state.cacheString !== queryString) {\n  State.update({\n    cacheString: queryString,\n    quoteDone: false,\n    quoting: false,\n  });\n}\n\nconst quoteSingle = (amountIn, tokenIn, tokenOut, fee, finalList) => {\n  const iface = new ethers.utils.Interface(abi);\n\n  const inputs = [\n    {\n      tokenIn: tokenIn.address === \"native\" ? WETH_ADDRESS : tokenIn.address,\n      tokenOut: tokenOut.address === \"native\" ? WETH_ADDRESS : tokenOut.address,\n      amountIn: ethers.utils.parseUnits(amountIn, tokenIn.decimals),\n      feeUnits: fee,\n      limitSqrtP: 0,\n    },\n  ];\n\n  const encodedData = iface.encodeFunctionData(\"quoteExactInputSingle\", inputs);\n\n  return Ethers.provider()\n    .call({\n      to: quoterContractId,\n      data: encodedData,\n    })\n    .then((data) => {\n      const res = iface.decodeFunctionResult(\"quoteExactInputSingle\", data);\n\n      const rawAmountOut = Big(Number(res[0][1]._hex)).toFixed();\n\n      const parsedAmountOut = new Big(rawAmountOut)\n        .div(Big(10).pow(tokenOut.decimals))\n        .toFixed();\n\n      return [\n        ...finalList,\n        {\n          fee: fee,\n          amountOut: parsedAmountOut,\n          success: true,\n        },\n      ];\n    })\n    .catch((e) => {\n      return [\n        ...finalList,\n        {\n          fee: fee,\n          amountOut: \"0\",\n          success: false,\n        },\n      ];\n    });\n};\n\nconst quoteAll = () => {\n  State.update({\n    quoting: true,\n  });\n\n  quoteSingle(amountIn, tokenIn, tokenOut, feeList[0], [])\n    .then((finalList0) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[1], finalList0);\n    })\n    .then((finalList1) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[2], finalList1);\n    })\n    .then((finalList2) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[3], finalList2);\n    })\n    .then((finalList3) => {\n      return quoteSingle(amountIn, tokenIn, tokenOut, feeList[4], finalList3);\n    })\n    .then((finalList4) => {\n      const maxAmountOutEstimate = finalList4.reduce((prev, current) => {\n        if (Number(prev.amountOut) > Number(current.amountOut)) {\n          return prev;\n        } else {\n          return current;\n        }\n      }, finalList4[0]);\n\n      State.update({ quoteDone: true, quoting: false });\n      loadAmountOut({\n        ...maxAmountOutEstimate,\n        quoteDone,\n        quoting,\n        noPair: !Big(maxAmountOutEstimate.amountOut).gt(0),\n      });\n    });\n};\nif (Number(amountIn) > 0 && !state.quoteDone && !state.quoting) {\n  quoteAll();\n}\n\nreturn <div></div>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.BaseQuoterV3", "fact_widget_deployments_id": "8689948cc0127dd2d2fc3e84f27cf37d", "inserted_timestamp": "2023-10-30T14:24:08.013Z", "modified_timestamp": "2023-10-30T14:24:08.013Z", "__row_index": 0}