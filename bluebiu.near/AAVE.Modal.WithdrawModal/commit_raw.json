{"tx_hash": "G7aFTQQpwXKC9Pfb8Jk3pKeBv5uAFv9qpr6dsSUDyroR", "action_id_social": "CUKLwxzx6sPEUUhqrwvciZBCB1B3uP7CeteJeScMWhCg-0-widget", "block_id": 116404953, "block_timestamp": "2024-04-08T16:24:43.079Z", "signer_id": "bluebiu.near", "widget_name": "AAVE.Modal.WithdrawModal", "source_code": "const {\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  withdrawETHGas,\n  withdrawERC20Gas,\n  formatHealthFactor,\n  calcHealthFactor,\n  account,\n  maxWithdrawBalanceUSD,\n  yourTotalBorrow,\n  yourTotalCollateral,\n  threshold,\n  prices,\n  theme,\n} = props;\n\nconst hasHF = config.heroData.includes(\"Health Factor\");\nif (!data) {\n  return <div />;\n}\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  underlyingAsset,\n  decimals,\n  symbol,\n  underlyingBalance,\n  underlyingBalanceUSD,\n  tokenPrice,\n  isCollaterale,\n  aTokenAddress,\n  availableLiquidity,\n  healthFactor,\n} = data;\nconsole.log(\"withdraw-props--\", props);\nconst availableLiquidityAmount = Big(availableLiquidity)\n  .div(Big(10).pow(decimals))\n  .toFixed();\n\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  allowanceAmount: 0,\n  needApprove: false,\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n});\n\nfunction updateGas() {\n  if (symbol === config.nativeCurrency.symbol) {\n    withdrawETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    withdrawERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\n\nconst _remainingSupply = Number(underlyingBalance) - Number(state.amount);\nconst remainingSupply = isNaN(_remainingSupply)\n  ? underlyingBalance\n  : Big(_remainingSupply).toFixed(2);\n\nfunction withdrawErc20(asset, actualAmount, shownAmount) {\n  console.log(\"withdrawErc20--\", asset, actualAmount, shownAmount);\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const pool = new ethers.Contract(\n        config.aavePoolV3Address,\n        config.aavePoolV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n\n      return pool[\"withdraw(address,uint256,address)\"](\n        asset,\n        actualAmount,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status } = res;\n          if (status === 1) {\n            onActionSuccess({\n              msg: `You withdraw ${Big(shownAmount).toFixed(8)} ${symbol}`,\n              callback: () => {\n                onRequestClose();\n                State.update({\n                  loading: false,\n                });\n              },\n            });\n            console.log(\"tx succeeded\", res);\n          } else {\n            console.log(\"tx failed\", res);\n            State.update({\n              loading: false,\n            });\n          }\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction withdrawETH(actualAmount, shownAmount) {\n  console.log(\"withdrawETH--\", actualAmount, shownAmount);\n  State.update({\n    loading: true,\n  });\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const wrappedTokenGateway = new ethers.Contract(\n        config.wrappedTokenGatewayV3Address,\n        config.wrappedTokenGatewayV3ABI.body,\n        Ethers.provider().getSigner()\n      );\n\n      return wrappedTokenGateway.withdrawETH(\n        config.aavePoolV3Address,\n        actualAmount,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status } = res;\n          if (status === 1) {\n            onActionSuccess({\n              msg: `You withdraw ${Big(shownAmount).toFixed(8)} ${symbol}`,\n              callback: () => {\n                onRequestClose();\n                State.update({\n                  loading: false,\n                });\n              },\n            });\n            console.log(\"tx succeeded\", res);\n          } else {\n            console.log(\"tx failed\", res);\n            State.update({\n              loading: false,\n            });\n          }\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction approveForGateway(tokenAddress, amount) {\n  const token = new ethers.Contract(\n    tokenAddress,\n    config.erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  return token.approve(config.wrappedTokenGatewayV3Address, amount);\n}\n\nfunction allowanceForGateway(tokenAddress) {\n  return Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      const token = new ethers.Contract(\n        tokenAddress,\n        config.erc20Abi.body,\n        Ethers.provider().getSigner()\n      );\n      return token.allowance(address, config.wrappedTokenGatewayV3Address);\n    });\n}\n\nfunction update() {\n  allowanceForGateway(aTokenAddress)\n    .then((amount) => Number(amount.toString()))\n    .then((amount) =>\n      State.update({\n        allowanceAmount: Big(amount).div(Big(10).pow(decimals)).toNumber(),\n      })\n    );\n\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\n\nupdate();\n\nfunction bigMin(_a, _b) {\n  const a = Big(_a);\n  const b = Big(_b);\n  return a.gt(b) ? b : a;\n}\n\nconst actualMaxValue =\n  isValid(underlyingBalance) && isValid(availableLiquidityAmount)\n    ? Big(underlyingBalance).lt(availableLiquidityAmount)\n      ? config.MAX_UINT_256\n      : Big(availableLiquidityAmount)\n          .mul(Big(10).pow(decimals))\n          .toFixed(0, ROUND_DOWN)\n    : \"0\";\n\nlet shownMaxValue;\nif (isCollaterale) {\n  shownMaxValue = Big(yourTotalCollateral)\n    .minus(Big(yourTotalBorrow).times(1.01).div(Big(threshold)))\n    .div(tokenPrice)\n    .toFixed();\n} else {\n  shownMaxValue = underlyingBalance;\n}\n\n// if (symbol === config.nativeCurrency.symbol) {\n\n//   // shownMaxValue = bigMin(\n//   //   underlyingBalance,\n//   //   Big(maxWithdrawBalanceUSD)\n//   //     .div(Big(prices[config.nativeCurrency.symbol]))\n//   //     .toFixed()\n//   // ).toFixed(decimals);\n// } else {\n//   // shownMaxValue = bigMin(underlyingBalanceUSD, maxWithdrawBalanceUSD).toFixed(\n//   //   decimals\n//   // );\n// }\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n  if (isCollaterale) {\n    const newHealthFactor = formatHealthFactor(\n      calcHealthFactor(\"WITHDRAW\", symbol, state.amount)\n    );\n    console.log(\n      \"withdraw updateNewHealthFactor\",\n      symbol,\n      state.amount,\n      newHealthFactor\n    );\n    State.update({ newHealthFactor });\n  } else {\n    State.update({ newHealthFactor: healthFactor });\n  }\n}, 1000);\n\nconst changeValue = (value) => {\n  if (Number(value) > shownMaxValue) {\n    value = shownMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value).mul(tokenPrice).toFixed(2, ROUND_DOWN);\n\n    State.update({\n      amountInUSD,\n    });\n    if (hasHF) {\n      updateNewHealthFactor();\n    }\n  } else {\n    State.update({\n      amountInUSD: \"0.00\",\n      newHealthFactor: \"-\",\n    });\n  }\n  State.update({ amount: value });\n};\n\n// const disabled =\n//   (state.newHealthFactor !== \"\u221e\" &&\n//     (!isValid(state.newHealthFactor) ||\n//       state.newHealthFactor === \"\" ||\n//       Big(state.newHealthFactor).lt(1))) ||\n//   !state.amount ||\n//   !isValid(state.amount) ||\n//   Number(state.amount) === 0;\nconst disabled =\n  !state.amount || !isValid(state.amount) || Number(state.amount) === 0;\n\nreturn (\n  <Widget\n    src={`${config.ownerId}/widget/AAVE.Modal.BaseModal`}\n    props={{\n      title: `Withdraw ${symbol}`,\n      onRequestClose: props.onRequestClose,\n      children: (\n        <WithdrawContainer>\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Amount\",\n              config,\n              children: (\n                <>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: (\n                        <TokenTexture>\n                          <Input\n                            type=\"number\"\n                            value={state.amount}\n                            onChange={(e) => {\n                              changeValue(e.target.value);\n                            }}\n                            placeholder=\"0\"\n                          />\n                        </TokenTexture>\n                      ),\n                      right: (\n                        <TokenWrapper>\n                          <img width={26} height={26} src={data?.icon} />\n                          <TokenTexture>{symbol}</TokenTexture>\n                        </TokenWrapper>\n                      ),\n                    }}\n                  />\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <GrayTexture>${state.amountInUSD}</GrayTexture>,\n                      right: (\n                        <GrayTexture>\n                          Supply Balance:\n                          {Big(shownMaxValue).toFixed(3, ROUND_DOWN)}\n                          <Max\n                            onClick={() => {\n                              changeValue(shownMaxValue);\n                            }}\n                          >\n                            MAX\n                          </Max>\n                        </GrayTexture>\n                      ),\n                    }}\n                  />\n                </>\n              ),\n            }}\n          />\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n            props={{\n              title: \"Transaction Overview\",\n              config,\n              children: (\n                <TransactionOverviewContainer>\n                  <Widget\n                    src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                    props={{\n                      left: <PurpleTexture>Remaining Supply</PurpleTexture>,\n                      right: (\n                        <WhiteTexture>\n                          {remainingSupply} {symbol}\n                        </WhiteTexture>\n                      ),\n                    }}\n                  />\n                  {hasHF ? (\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Health Factor</PurpleTexture>,\n                        right: (\n                          <div style={{ textAlign: \"right\" }}>\n                            <GreenTexture>\n                              {healthFactor}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />{\" \"}\n                              {state.newHealthFactor}\n                            </GreenTexture>\n                            <WhiteTexture>\n                              Liquidation at &lt;{\" \"}\n                              {config.FIXED_LIQUIDATION_VALUE}\n                            </WhiteTexture>\n                          </div>\n                        ),\n                      }}\n                    />\n                  ) : null}\n                </TransactionOverviewContainer>\n              ),\n            }}\n          />\n          <Widget\n            src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n            props={{ gas: state.gas, config }}\n          />\n          {state.needApprove && symbol === config.nativeCurrency.symbol && (\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                config,\n                theme,\n                loading: state.loading,\n                children: `Approve ${symbol}`,\n                disabled,\n                onClick: () => {\n                  State.update({\n                    loading: true,\n                  });\n                  const amount = Big(state.amount)\n                    .mul(Big(10).pow(decimals))\n                    .toFixed(0);\n                  approveForGateway(aTokenAddress, amount)\n                    .then((tx) => {\n                      tx.wait()\n                        .then((res) => {\n                          const { status } = res;\n                          if (status === 1) {\n                            console.log(\"tx succeeded\", res);\n                            State.update({\n                              needApprove: false,\n                              loading: false,\n                            });\n                          } else {\n                            console.log(\"tx failed\", res);\n                            State.update({\n                              loading: false,\n                            });\n                          }\n                        })\n                        .catch(() => State.update({ loading: false }));\n                    })\n                    .catch(() => State.update({ loading: false }));\n                },\n              }}\n            />\n          )}\n          {!(state.needApprove && symbol === config.nativeCurrency.symbol) && (\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n              props={{\n                config,\n                theme,\n                loading: state.loading,\n                children: \"Withdraw\",\n                disabled,\n                onClick: () => {\n                  const actualAmount =\n                    state.amount === shownMaxValue\n                      ? actualMaxValue\n                      : Big(state.amount)\n                          .mul(Big(10).pow(decimals))\n                          .toFixed(0, ROUND_DOWN);\n                  const shownAmount = state.amount;\n                  if (symbol === config.nativeCurrency.symbol) {\n                    // supply weth\n                    withdrawETH(actualAmount, shownAmount);\n                  } else {\n                    // supply common\n                    withdrawErc20(underlyingAsset, actualAmount, shownAmount);\n                  }\n                },\n              }}\n            />\n          )}\n        </WithdrawContainer>\n      ),\n      config,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/AAVE.Modal.WithdrawModal", "fact_widget_deployments_id": "a6c0807e2bd888361163b5e225798f82", "inserted_timestamp": "2024-04-08T17:32:36.436Z", "modified_timestamp": "2024-04-08T17:32:36.436Z", "__row_index": 3}