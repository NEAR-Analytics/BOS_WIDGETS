{"tx_hash": "A5YgaEdHgCacmGXY2bZVAdnqXFA1H9KEhaR4ELc6MNf1", "action_id_social": "H4h3KgY5ECV9Kkj5avu8gxZxuDNWSasdeanXXm6y9caQ-0-widget", "block_id": 117160709, "block_timestamp": "2024-04-19T08:37:48.395Z", "signer_id": "bluebiu.near", "widget_name": "Scroll.BridgeXY.AmountOut", "source_code": "const { loading, amount, routerAddress, target, onLoad, currency, from, to } = props;\n\nconst BASE_API = 'https://open-api.xy.finance/v1'\n\nfunction getToken() {\n    let fromToken\n    let toToken\n    return asyncFetch(`${BASE_API}/recommendedTokens`).then(res => {\n        const tokens = res.body.recommendedTokens\n        console.log('tokens: ', tokens, props)\n\n\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i]\n            if (!fromToken && token.symbol === currency.symbol && token.chainId === from.id.toString()) {\n                fromToken = token.address\n            }\n\n            if (!toToken && token.symbol === currency.symbol && token.chainId === to.id.toString()) {\n                toToken = token.address\n            }\n\n            if (fromToken && toToken) {\n                break\n            }\n        }\n\n        return {\n            fromToken,\n            toToken\n        }\n    })\n}\n\nfunction getQuote(fromChainId, toChainId, fromTokenAddress, toTokenAddress, amount) {\n    if (Number.isNaN(amount)) {\n        return null\n    }\n    return asyncFetch(`${BASE_API}/quote?srcChainId=${fromChainId}&fromTokenAddress=${fromTokenAddress}&amount=${amount}&destChainId=${toChainId}&toTokenAddress=${toTokenAddress}`)\n}\n\nuseEffect(() => {\n    if (!loading) return\n\n    const _amount = new Big(amount).mul(Math.pow(10, currency.decimals)).toString()\n    getToken().then(res => {\n        return getQuote(from.id, to.id, res.fromToken, res.toToken, _amount)\n    }).then(res => {\n        if (res?.body?.isSuccess) {\n            const { body } = res\n            onLoad({\n                received: body.quote.toTokenAmount,\n                gasCost: body.xyFee.amount,\n                quote: body,\n            });\n        } else {\n            onLoad({\n                received: 0,\n                gasCost: 0,\n                errorTips: 'No route',\n            });\n        }\n    }).catch(e => {\n        onLoad({\n            received: 0,\n            gasCost: 0,\n            errorTips: 'Invalid amount',\n        });\n    })\n\n\n    // asyncFetch('https://api.orbiter.finance/sdk/routers/cross-chain')\n    //     .then(routerRes => {\n    //         const result = routerRes.body.result\n\n    //         let line = ''\n    //         if (target.dstId === 1) {\n    //             line = `534352/1-ETH/ETH`\n    //         } else {\n    //             line = `1/534352-ETH/ETH`\n    //         }\n\n    //         const quote = result.find(item => item.line === line)\n    //         if (!quote) {\n    //             onLoad({\n    //                 received: 0,\n    //                 gasCost: 0,\n    //                 errorTips: 'No route',\n    //             });\n    //             return\n    //         }\n    //         const minBig = new Big(quote.minAmt)\n    //         const maxBig = new Big(quote.maxAmt)\n    //         const amountBig = new Big(amount)\n    //         const feeBig = new Big(quote.withholdingFee).plus(new Big(quote.tradeFee).div(Math.pow(10, 18)))\n    //         if (amountBig.gte(maxBig) || amountBig.lte(minBig)) {\n    //             onLoad({\n    //                 received: 0,\n    //                 gasCost: 0,\n    //                 errorTips: 'Invalid amount',\n    //             });\n    //             return\n    //         }\n\n    //         onLoad({\n    //             received: amountBig.minus(feeBig).toString(),\n    //             gasCost: feeBig.toString(),\n    //             quote\n    //         });\n    //     }).catch(e => {\n    //         onLoad({\n    //             received: 0,\n    //             gasCost: 0,\n    //             errorTips: 'Invalid amount',\n    //         });\n    //     })\n\n\n}, [loading])\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Scroll.BridgeXY.AmountOut", "fact_widget_deployments_id": "845a9cb51d51640944fa7c70ba898a1d", "inserted_timestamp": "2024-04-19T10:42:30.638Z", "modified_timestamp": "2024-04-19T10:42:30.638Z", "__row_index": 1}