{"tx_hash": "65TdRFgXvZxVgp2fmpUUvKPiecBz4ACkEWJCZYV6JEPX", "action_id_social": "DykSkt6s3WrJeyTUSZdS41T5Lv9Mduzz4JsvfCm8Gvyk-0-widget", "block_id": 121063375, "block_timestamp": "2024-06-13T07:48:52.601Z", "signer_id": "bluebiu.near", "widget_name": "Staking.AgentFi.Reset", "source_code": "const StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  height: 100%;\n`;\nconst StyledFormItem = styled.div`\n  border-bottom: 1px solid #373A53;\n  padding-bottom: 18px;\n  padding-top: 18px;\n\n  &.inline {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  &:first-child {\n    padding-top: 0;\n  }\n`;\nconst StyledFormItemTitle = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 17px;\n  color: #979ABE;\n`;\nconst StyledFormItemBody = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n`;\nconst StyledFormItemFoot = styled.div`\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14.4px;\n  color: rgba(151, 154, 190, 1);\n`;\nconst StyledInput = styled.input`\n  flex: 1;\n  width: 0;\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst StyledList = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n  gap: 8px;\n  margin-top: 8px;\n`;\nconst StyledListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n\n  .label {\n    color: #979ABE;\n  }\n\n  .value {\n    color: #fff;\n  }\n`;\nconst StyledContent = styled.div`\n  flex: 1;\n`;\nconst StyledButton = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  line-height: 56px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: auto;\n  text-align: center;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\nconst StyledFullSelect = styled.div`\n  width: 100%;\n\n  > div {\n    width: 100%;\n\n    > div[type=\"button\"] {\n      width: 100%;\n    }\n  }\n`;\nconst StyledTips = styled.div`\n  color: rgb(151, 154, 190);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-bottom: 16px;\n\n  &.full {\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`;\nconst StyledWithdrawTips = styled.div`\n  width: 240px;\n  text-align: center;\n  margin: 0 auto;\n\n  .value {\n    color: var(--switch-color);\n    font-size: 18px;\n  }\n\n  .title {\n    border-bottom: 1px solid #373A53;\n    font-size: 18px;\n    color: rgb(151, 154, 190);\n    padding: 8px 0;\n  }\n\n  .assets {\n    margin-top: 8px;\n  }\n\n  .head-wd {\n    border-bottom: 1px solid #373A53;\n\n    .col-wd {\n      color: rgb(151, 154, 190);\n    }\n  }\n\n  .row-wd {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 8px;\n    flex-wrap: nowrap;\n  }\n\n  .col-wd {\n    flex-shrink: 0;\n    flex-basis: 33.33%;\n    color: #fff;\n    font-size: 14px;\n    text-align: left;\n    padding: 8px 0;\n  }\n\n  .body-wd {\n  }\n`;\nconst StyledPriceRangeList = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  flex-wrap: nowrap;\n  gap: 0;\n  border: 1px solid #373A53;\n  border-radius: 6px;\n\n  .min-price,\n  .range-price,\n  .max-price {\n    padding: 8px 16px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n  }\n\n  .min-price {\n  }\n\n  .range-price {\n    border-left: 1px solid #373A53;\n  }\n\n  .max-price {\n    border-left: 1px solid #373A53;\n  }\n\n  .range-value {\n    color: #ffffff;\n    font-size: 18px;\n    font-weight: bold;\n  }\n\n  .range-label {\n    color: #979ABE;\n    font-size: 14px;\n  }\n`;\n\nconst ABI = [\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"address\",\n            \"name\": \"router\",\n            \"type\": \"address\",\n          },\n          { \"internalType\": \"uint24\",\n            \"name\": \"fee\",\n            \"type\": \"uint24\",\n          },\n          {\n            \"internalType\": \"uint24\",\n            \"name\": \"slippageSwap\",\n            \"type\": \"uint24\",\n          },\n          {\n            \"internalType\": \"uint24\",\n            \"name\": \"slippageLiquidity\",\n            \"type\": \"uint24\"\n          },\n          {\n            \"internalType\": \"int24\",\n            \"name\": \"tickLower\",\n            \"type\": \"int24\",\n          },\n          {\n            \"internalType\": \"int24\",\n            \"name\": \"tickUpper\",\n            \"type\": \"int24\"\n          },\n          {\n            \"internalType\": \"uint160\",\n            \"name\": \"sqrtPriceX96\",\n            \"type\": \"uint160\",\n          },\n        ],\n        \"internalType\": \"struct IConcentratedLiquidityModuleC.RebalanceParams\",\n        \"name\": \"params\",\n        \"type\": \"tuple\",\n      },\n    ],\n    \"name\": \"moduleC_rebalance\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\",\n  },\n];\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nconst {\n  record,\n  prices,\n  dexConfig,\n  currentStrategy,\n  account,\n  onSuccess,\n  addAction,\n  toast,\n  chainId,\n  queryPoolInfo,\n  tickToPrice,\n  priceToUsableTick,\n  strategies,\n} = props;\n\nconst { StakeTokens } = dexConfig;\n\nState.init({\n  pending: false,\n\n  rate: 20,\n  currentEth2UsdPrice: \"\",\n  minPrice: \"\",\n  maxPrice: \"\",\n  sqrtPriceX96: \"\",\n  currentEthToken: {},\n  currentUsdToken: {},\n});\n\nconst handleSubmit = () => {\n  if (!state.rate) return;\n  State.update({\n    pending: true,\n  });\n\n  // fixed 0.30 % fee tier\n  const fee = currentStrategy.meta.feeTierList[2];\n\n  const tickLower = priceToUsableTick({\n    price: state.minPrice,\n    token0: state.currentEthToken,\n    token1: state.currentUsdToken,\n    fee: fee.value,\n  });\n  const tickUpper = priceToUsableTick({\n    price: state.maxPrice,\n    token0: state.currentEthToken,\n    token1: state.currentUsdToken,\n    fee: fee.value,\n  });\n  const [_tickLower, _tickUpper] = tickLower > tickUpper ? [tickUpper, tickLower] : [tickLower, tickUpper];\n\n  const params = [\n    {\n      router: '0x337827814155ecbf24d20231fca4444f530c0555',\n      fee: fee.value,\n      slippageSwap: 10000,\n      slippageLiquidity: 1000000,\n      tickLower: _tickLower,\n      tickUpper: _tickUpper,\n      sqrtPriceX96: state.sqrtPriceX96,\n    }\n  ];\n\n  const contract = new ethers.Contract(\n    record.agentAddress,\n    ABI,\n    Ethers.provider().getSigner(),\n  );\n\n  const getTx = (gas) => {\n    const contractOption = {\n      gasLimit: gas || 4000000,\n      value: parseUnits('0', 18),\n    };\n    contract.moduleC_rebalance(...params, contractOption)\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            State.update({\n              pending: false,\n            });\n            if (status !== 1) throw new Error(\"\");\n            onSuccess();\n            // formatAddAction(actionText, state.ethAmount, status, transactionHash, state.currentEthToken.value);\n            toast?.success({\n              title: `Set New Range Successfully!`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            console.log(\"tx error: \", err);\n            State.update({\n              pending: false,\n            });\n            toast?.fail({\n              title: `Set New Range Failed!`,\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : ``,\n            });\n          });\n      })\n      .catch((err) => {\n        console.log(\"contract fn error: \", err);\n        State.update({\n          pending: false,\n        });\n        toast?.fail({\n          title: `Set New Range Failed!`,\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : ``,\n        });\n      });\n  };\n\n  const estimateGas = () => {\n    contract.estimateGas.moduleC_rebalance(\n      ...params,\n      { value: parseUnits('0', 18) },\n    ).then((gas) => {\n      getTx(gas);\n    }).catch((err) => {\n      console.log(\"get gas failed: \", err);\n      getTx();\n    });\n  };\n\n  estimateGas();\n};\n\nconst handleRate = (ev) => {\n  if (isNaN(Number(ev.target.value))) return;\n  let amount = ev.target.value.replace(/\\s+/g, \"\");\n  if (!amount) {\n    State.update({\n      rate: \"\",\n    });\n    return;\n  }\n  if (Big(amount).lte(0)) {\n    amount = 1;\n  }\n  if (Big(amount).gt(50)) {\n    amount = 50;\n  }\n  amount = Math.round(amount);\n  State.update({\n    rate: amount,\n  });\n};\n\nconst {\n  pending,\n  rate,\n  currentEth2UsdPrice,\n  minPrice,\n  maxPrice,\n} = state;\n\nuseEffect(() => {\n  queryPoolInfo({ fee: currentStrategy.meta.feeTierList[2] }).then((poolRes) => {\n    if (!poolRes) {\n      toast?.fail({\n        title: `Initialization Failed!`,\n        text: 'Query pool information failed, try again later or reload the page please!',\n      });\n      return;\n    }\n    const { tick, sqrtPriceX96 } = poolRes;\n    State.update({ sqrtPriceX96 });\n    const currentBalancesList = record.balances || [];\n    const currentBalance = currentBalancesList.find((it) => /^BlasterSwap Positions NFT/.test(it.name));\n    if (\n      !currentBalance ||\n      !currentBalance.underlying ||\n      currentBalance.underlying.length < 2\n    ) {\n      toast?.fail({\n        title: `Initialization Failed!`,\n        text: 'Query token information failed, try again later or reload the page please!',\n      });\n      return;\n    }\n    State.update({\n      currentEthToken: currentBalance.underlying[1],\n      currentUsdToken: currentBalance.underlying[0],\n      currentEth2UsdPrice: tickToPrice({\n        tick,\n        token0: currentBalance.underlying[1],\n        token1: currentBalance.underlying[0],\n      }),\n    });\n  });\n}, []);\n\nuseEffect(() => {\n  if (!currentEth2UsdPrice) return;\n  const slippageValue = Big(currentEth2UsdPrice).times(Big(rate).div(100)).div(2);\n  const _minPrice = Math.floor(Big(currentEth2UsdPrice).minus(slippageValue).toNumber());\n  const _maxPrice = Math.floor(Big(currentEth2UsdPrice).plus(slippageValue).toNumber());\n  State.update({\n    minPrice: _minPrice,\n    maxPrice: _maxPrice,\n  });\n}, [currentEth2UsdPrice, rate]);\n\nconst renderButton = (disabled) => {\n  return (\n    <StyledButton\n      disabled={pending || disabled}\n      onClick={handleSubmit}\n    >\n      {pending ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : \"SET NEW RANGE\"}\n    </StyledButton>\n  );\n};\n\nconst renderReset = () => {\n  if (record.name.toLowerCase() === strategies[1].name) {\n    return (\n      <>\n        <StyledContent>\n          <StyledTips>\n            Resetting the strategy will withdraw your existing underlying LP assets and deposit them into the new range.\n          </StyledTips>\n          <StyledFormItem>\n            <StyledFormItemTitle>\n              Enter LP Range\n            </StyledFormItemTitle>\n            <StyledFormItemBody>\n              <div style={{ width: \"60px\", display: \"flex\" }}>\n                <StyledInput\n                  type=\"text\"\n                  placeholder=\"0\"\n                  value={rate}\n                  onChange={handleRate}\n                />\n                <span style={{ color: \"#fff\" }}>%</span>\n              </div>\n              <div className=\"current-usdb\" style={{ color: \"#fff\" }}>\n                {Big(currentEth2UsdPrice || 0).toFixed(0)} USDB\n              </div>\n              <StyledPriceRangeList>\n                <div className=\"min-price\">\n                  <span className=\"range-value\">{minPrice}</span>\n                  <span className=\"range-label\">min</span>\n                </div>\n                <div className=\"range-price\">\n                  <span className=\"range-value\">{rate}%</span>\n                  <span className=\"range-label\">range</span>\n                </div>\n                <div className=\"max-price\">\n                  <span className=\"range-value\">{maxPrice}</span>\n                  <span className=\"range-label\">max</span>\n                </div>\n              </StyledPriceRangeList>\n            </StyledFormItemBody>\n          </StyledFormItem>\n        </StyledContent>\n        {renderButton(!rate)}\n      </>\n    );\n  }\n  return null;\n};\n\nreturn (\n  <StyledContainer>\n    {renderReset()}\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.AgentFi.Reset", "fact_widget_deployments_id": "bae9dd3760d114a1518581ab51aa0100", "inserted_timestamp": "2024-06-13T09:04:53.640Z", "modified_timestamp": "2024-06-13T09:04:53.640Z", "__row_index": 2}