{"tx_hash": "H1YiEeZvwnLVtB3c18idztE6TqAKHhtPgDXHE3DSRyFd", "action_id_social": "DfivZGcxjqyd7biWbxw4knwST2uXdDsK72g9Njv9Fpsa-0-widget", "block_id": 121913660, "block_timestamp": "2024-06-24T19:53:42.157Z", "signer_id": "bluebiu.near", "widget_name": "AAVE.Modal.BorrowModal", "source_code": "const {\n  dexConfig,\n  config,\n  data,\n  onRequestClose,\n  onActionSuccess,\n  chainId,\n  borrowETHGas,\n  borrowERC20Gas,\n  formatHealthFactor,\n  calcHealthFactor,\n  theme,\n  addAction,\n  prices,\n} = props;\n\nif (!data) {\n  return <div />;\n}\n\nconst ROUND_DOWN = 0;\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst {\n  symbol,\n\n  healthFactor,\n  availableBorrows,\n  availableBorrowsUSD,\n  decimals,\n  underlyingAsset,\n  variableDebtTokenAddress,\n} = data;\n\nconst BorrowContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: var(--agg-primary-color, #fff);\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #9b9b9b;\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #6f6f6f;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #9b9b9b;\n  cursor: pointer;\n`;\n\nState.init({\n  amount: \"\",\n  amountInUSD: \"0.00\",\n  allowanceAmount: 0,\n  loading: false,\n  newHealthFactor: \"-\",\n  gas: \"-\",\n});\n\nfunction updateGas() {\n  if (symbol === config.nativeCurrency.symbol) {\n    borrowETHGas().then((value) => {\n      State.update({ gas: value });\n    });\n  } else {\n    borrowERC20Gas().then((value) => {\n      State.update({ gas: value });\n    });\n  }\n}\n\nupdateGas();\n\nconst disabled =\n  !state.amount || !isValid(state.amount) || Number(state.amount) === 0;\nconst maxValue = Big(availableBorrows).toFixed(decimals);\n\n/**\n * @param {string} vwETHAddress\n * @param {string} userAddress\n * @returns {BigNumber}\n */\nfunction borrowAllowance(vwETHAddress, userAddress) {\n  const vToken = new ethers.Contract(\n    vwETHAddress,\n    config.variableDebtTokenABI.body,\n    Ethers.provider().getSigner()\n  );\n\n  return vToken.borrowAllowance(\n    userAddress,\n    config.wrappedTokenGatewayV3Address\n  );\n}\n\nfunction approveDelegation(vwETHAddress) {\n  const vToken = new ethers.Contract(\n    vwETHAddress,\n    config.variableDebtTokenABI.body,\n    Ethers.provider().getSigner()\n  );\n  const maxUint256 = ethers.BigNumber.from(\n    \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n  );\n  return vToken.approveDelegation(\n    config.wrappedTokenGatewayV3Address,\n    maxUint256\n  );\n}\n\nfunction debounce(fn, wait) {\n  let timer = state.timer;\n  return () => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, wait);\n    State.update({ timer });\n  };\n}\n\nconst updateNewHealthFactor = debounce(() => {\n  State.update({ newHealthFactor: \"-\" });\n  const newHealthFactor = formatHealthFactor(\n    calcHealthFactor(\"BORROW\", symbol, state.amount)\n  );\n  console.log(\n    \"BORROW updateNewHealthFactor\",\n    symbol,\n    state.amount,\n    newHealthFactor\n  );\n  State.update({ newHealthFactor });\n}, 1000);\n\nconst changeValue = (value) => {\n  let amountInUSD = \"0.00\";\n  if (Number(value) > Number(maxValue)) {\n    value = maxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    amountInUSD = Big(value)\n      .mul(prices[symbol] || 1)\n      .toFixed(2, ROUND_DOWN);\n  }\n  State.update({ amount: value, amountInUSD });\n\n  updateNewHealthFactor();\n};\n\nfunction formatAddAction(_amount, status, transactionHash) {\n  addAction?.({\n    type: \"Lending\",\n    action: \"Borrow\",\n    token: {\n      symbol,\n    },\n    amount: _amount,\n    template: dexConfig.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nfunction borrowERC20(amount) {\n  State.update({ loading: true });\n  const pool = new ethers.Contract(\n    config.aavePoolV3Address,\n    config.aavePoolV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      return pool[\"borrow(address,uint256,uint256,uint16,address)\"](\n        underlyingAsset,\n        amount,\n        2, // variable interest rate\n        0,\n        address\n      );\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          console.log(\"SUCCESS--\", status, transactionHash);\n          if (status === 1) {\n            formatAddAction(\n              Big(amount).div(Big(10).pow(decimals)).toFixed(8),\n              status,\n              transactionHash\n            );\n            onActionSuccess({\n              msg: `You borrowed ${Big(amount)\n                .div(Big(10).pow(decimals))\n                .toFixed(8)} ${symbol}`,\n              callback: () => {\n                onRequestClose();\n                State.update({\n                  loading: false,\n                });\n              },\n            });\n            console.log(\"tx succeeded\", res);\n          } else {\n            console.log(\"tx failed\", res);\n            State.update({\n              loading: false,\n            });\n          }\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction borrowETH(amount) {\n  const wrappedTokenGateway = new ethers.Contract(\n    config.wrappedTokenGatewayV3Address,\n    config.wrappedTokenGatewayV3ABI.body,\n    Ethers.provider().getSigner()\n  );\n  State.update({ loading: true });\n  return wrappedTokenGateway\n    .borrowETH(\n      config.aavePoolV3Address,\n      amount,\n      2, // variable interest rate\n      0\n    )\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          if (status === 1) {\n            formatAddAction(\n              Big(amount).div(Big(10).pow(decimals)).toFixed(8),\n              status,\n              transactionHash\n            );\n            onActionSuccess({\n              msg: `You borrowed ${Big(amount)\n                .div(Big(10).pow(decimals))\n                .toFixed(8)} ${symbol}`,\n              callback: () => {\n                onRequestClose();\n                State.update({\n                  loading: false,\n                });\n              },\n            });\n            console.log(\"tx succeeded\", res);\n          } else {\n            console.log(\"tx failed\", res);\n            State.update({\n              loading: false,\n            });\n          }\n        })\n        .catch(() => State.update({ loading: false }));\n    })\n    .catch(() => State.update({ loading: false }));\n}\n\nfunction update() {\n  Ethers.provider()\n    .getSigner()\n    .getAddress()\n    .then((address) => {\n      borrowAllowance(variableDebtTokenAddress, address)\n        .then((amountRaw) => amountRaw.toString())\n        .then((amount) => {\n          State.update({\n            allowanceAmount: Big(amount).div(Big(10).pow(decimals)).toNumber(),\n          });\n        });\n    });\n\n  if (\n    !isValid(state.amount) ||\n    !isValid(state.allowanceAmount) ||\n    Number(state.allowanceAmount) < Number(state.amount) ||\n    Number(state.amount) === 0\n  ) {\n    State.update({ needApprove: true });\n  } else {\n    State.update({ needApprove: false });\n  }\n}\n\nupdate();\n\nreturn (\n  <>\n    <Widget\n      src={`${config.ownerId}/widget/AAVE.Modal.BaseModal`}\n      props={{\n        title: `Borrow ${symbol}`,\n        onRequestClose: onRequestClose,\n        children: (\n          <BorrowContainer>\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Amount\",\n                config,\n                children: (\n                  <>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: (\n                          <TokenTexture>\n                            <Input\n                              type=\"number\"\n                              value={state.amount}\n                              onChange={(e) => {\n                                changeValue(e.target.value);\n                              }}\n                              placeholder=\"0\"\n                            />\n                          </TokenTexture>\n                        ),\n                        right: (\n                          <TokenWrapper>\n                            <img width={26} height={26} src={data?.icon} />\n                            <TokenTexture>{symbol}</TokenTexture>\n                          </TokenWrapper>\n                        ),\n                      }}\n                    />\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <GrayTexture>${state.amountInUSD}</GrayTexture>,\n                        right: (\n                          <GrayTexture>\n                            Available:{\" \"}\n                            {isValid(availableBorrows) &&\n                            availableBorrows !== \"-\"\n                              ? Big(availableBorrows).toFixed(7)\n                              : availableBorrows}\n                            <Max\n                              onClick={() => {\n                                changeValue(maxValue);\n                              }}\n                            >\n                              MAX\n                            </Max>\n                          </GrayTexture>\n                        ),\n                      }}\n                    />\n                  </>\n                ),\n              }}\n            />\n            <Widget\n              src={`${config.ownerId}/widget/AAVE.Modal.RoundedCard`}\n              props={{\n                title: \"Transaction Overview\",\n                config,\n                children: (\n                  <TransactionOverviewContainer>\n                    <Widget\n                      src={`${config.ownerId}/widget/AAVE.Modal.FlexBetween`}\n                      props={{\n                        left: <PurpleTexture>Health Factor</PurpleTexture>,\n                        right: (\n                          <div style={{ textAlign: \"right\" }}>\n                            <GreenTexture>\n                              {formatHealthFactor(healthFactor)}\n                              <img\n                                src={`${config.ipfsPrefix}/bafkreiesqu5jyvifklt2tfrdhv6g4h6dubm2z4z4dbydjd6if3bdnitg7q`}\n                                width={16}\n                                height={16}\n                              />\n                              {state.newHealthFactor}\n                            </GreenTexture>\n                          </div>\n                        ),\n                      }}\n                    />\n                  </TransactionOverviewContainer>\n                ),\n              }}\n            />\n            {/* <Widget\n              src={`${config.ownerId}/widget/AAVE.GasEstimation`}\n              props={{ gas: state.gas, config }}\n            /> */}\n            {state.needApprove && symbol === config.nativeCurrency.symbol && (\n              <Widget\n                src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n                props={{\n                  config,\n                  theme,\n                  loading: state.loading,\n                  children: `Approve ${symbol}`,\n                  disabled,\n                  onClick: () => {\n                    State.update({\n                      loading: true,\n                    });\n                    const amount = Big(state.amount)\n                      .mul(Big(10).pow(decimals))\n                      .toFixed(0);\n\n                    approveDelegation(variableDebtTokenAddress)\n                      .then((tx) => {\n                        tx.wait()\n                          .then((res) => {\n                            const { status } = res;\n                            if (status === 1) {\n                              State.update({\n                                needApprove: false,\n                                loading: false,\n                              });\n                            } else {\n                              console.log(\"tx failed\", res);\n                              State.update({\n                                loading: false,\n                              });\n                            }\n                          })\n                          .catch(() => State.update({ loading: false }));\n                      })\n                      .catch(() => State.update({ loading: false }));\n                  },\n                }}\n              />\n            )}\n            {!(\n              state.needApprove && symbol === config.nativeCurrency.symbol\n            ) && (\n              <Widget\n                src={`${config.ownerId}/widget/AAVE.PrimaryButton`}\n                props={{\n                  config,\n                  theme,\n                  children: `Borrow ${symbol}`,\n                  loading: state.loading,\n                  disabled,\n                  onClick: () => {\n                    const amount = Big(state.amount)\n                      .mul(Big(10).pow(decimals))\n                      .toFixed(0);\n                    if (symbol === config.nativeWrapCurrency.symbol) {\n                      // borrow weth\n                      borrowETH(amount);\n                    } else {\n                      // borrow common\n                      borrowERC20(amount);\n                    }\n                  },\n                }}\n              />\n            )}\n          </BorrowContainer>\n        ),\n        config,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/AAVE.Modal.BorrowModal", "fact_widget_deployments_id": "6093a85768cb55900bde1ba3a0e67c37", "inserted_timestamp": "2024-06-24T20:55:30.868Z", "modified_timestamp": "2024-06-24T21:54:31.421Z", "__row_index": 0}