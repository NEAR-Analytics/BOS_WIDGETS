{"tx_hash": "4hiYYpAdeL2Won9bYEwtVM2FfSqeiw14gDm2VsP6Vh5p", "action_id_social": "7aea7oM22L5C21TXs366CEpiwR56V53BS6NrHyDSpDdP-0-widget", "block_id": 115010053, "block_timestamp": "2024-03-19T08:01:59.499Z", "signer_id": "bluebiu.near", "widget_name": "Base.Swap.HorizonDexAmountOut", "source_code": "const QUOTER_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"uint24\", name: \"feeUnits\", type: \"uint24\" },\n          { internalType: \"uint160\", name: \"limitSqrtP\", type: \"uint160\" },\n        ],\n        internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quoteExactInputSingle\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"usedAmount\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"returnedAmount\", type: \"uint256\" },\n          { internalType: \"uint160\", name: \"afterSqrtP\", type: \"uint160\" },\n          {\n            internalType: \"uint32\",\n            name: \"initializedTicksCrossed\",\n            type: \"uint32\",\n          },\n          { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n        ],\n        internalType: \"struct IQuoterV2.QuoteOutput\",\n        name: \"output\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"minAmountOut\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint160\", name: \"limitSqrtP\", type: \"uint160\" },\n        ],\n        internalType: \"struct IRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapExactInputSingle\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"minAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWeth\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"results\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  quoterAddress,\n  multicallAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  fees,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater || !prices) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.address === \"native\" && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress &&\n        outputCurrency.address === \"native\"\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.isNative ? wethAddress : inputCurrency.address,\n    outputCurrency.isNative ? wethAddress : outputCurrency.address,\n  ];\n\n  const Iface = new ethers.utils.Interface(QUOTER_ABI);\n\n  const results = [];\n  let _count = 0;\n  const singleQuote = (fee, cb) => {\n    const params = [\n      {\n        tokenIn: path[0],\n        tokenOut: path[1],\n        amountIn: amount,\n        feeUnits: fee,\n        limitSqrtP: 0,\n      },\n    ];\n    const encodedData = Iface.encodeFunctionData(\n      \"quoteExactInputSingle\",\n      params\n    );\n\n    Ethers.provider()\n      .call({\n        to: quoterAddress,\n        data: encodedData,\n      })\n      .then((res) => {\n        const data = Iface.decodeFunctionResult(\"quoteExactInputSingle\", res);\n        results.push({\n          amountOut: data[0].returnedAmount,\n          gasEstimate: data[0].gasEstimate,\n          fee,\n        });\n\n        _count++;\n        if (_count === fees.length) {\n          cb();\n        }\n      })\n      .catch((err) => {\n        _count++;\n        if (_count === fees.length) {\n          cb();\n        }\n      });\n  };\n  const getAmountOut = () => {\n    let max = null;\n    results.forEach((result) => {\n      if (\n        Big(Number(result.amountOut._hex)).gt(Number(max.amountOut?._hex) || 0)\n      ) {\n        max = result;\n      }\n    });\n\n    if (max) {\n      getTransaction(max);\n    } else {\n      onLoad({\n        outputCurrencyAmount: \"\",\n        noPair: true,\n      });\n    }\n  };\n\n  const getTransaction = (result) => {\n    const RouterIface = new ethers.utils.Interface(ROUTER_ABI);\n    const deadline = Math.ceil(Date.now() / 1000) + 60;\n    const options = {\n      value: inputCurrency.isNative ? amount : \"0\",\n    };\n    const _amountOut = Big(result.amountOut)\n      .mul(1 - (slippage || 0.05))\n      .toFixed(0);\n\n    const inputs = [\n      {\n        tokenIn: path[0],\n        tokenOut: path[1],\n        fee: result.fee,\n        recipient: outputCurrency.isNative ? routerAddress : account,\n        deadline: deadline,\n        amountIn: amount,\n        minAmountOut: _amountOut,\n        limitSqrtP: \"0\",\n      },\n    ];\n    const multicallParams = [];\n    const encodedDataCallSwap = RouterIface.encodeFunctionData(\n      \"swapExactInputSingle\",\n      inputs\n    );\n    multicallParams.push(encodedDataCallSwap);\n\n    if (outputCurrency.isNative) {\n      multicallParams.push(\n        RouterIface.encodeFunctionData(\"unwrapWeth\", [\"0\", account])\n      );\n    }\n\n    const multicallContract = new ethers.Contract(\n      routerAddress,\n      ROUTER_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    const _amount = Big(\n      ethers.utils.formatUnits(result.amountOut, outputCurrency.decimals)\n    );\n\n    let priceImpact = null;\n\n    if (prices) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(_amount).div(inputCurrencyAmount);\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n    const returnData = {\n      inputCurrency,\n      inputCurrencyAmount,\n      outputCurrency,\n      outputCurrencyAmount: Big(_amount).gt(0.01)\n        ? Big(_amount).toPrecision(10)\n        : Big(_amount).toFixed(10),\n      priceImpact,\n      noPair: false,\n    };\n\n    const getTx = (_gas) => {\n      multicallContract.populateTransaction\n        .multicall(multicallParams, { ...options, gasLimit: _gas })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      multicallContract.estimateGas\n        .multicall(multicallParams, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n            noPair: false,\n          });\n        });\n    };\n\n    estimateGas();\n  };\n\n  (fees || []).forEach((fee) => {\n    singleQuote(fee, getAmountOut);\n  });\n}, [updater, prices]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Base.Swap.HorizonDexAmountOut", "fact_widget_deployments_id": "a63ffd3983e1afcb49ba9883a7b2623d", "inserted_timestamp": "2024-03-19T09:34:29.241Z", "modified_timestamp": "2024-03-19T09:34:29.241Z", "__row_index": 3}