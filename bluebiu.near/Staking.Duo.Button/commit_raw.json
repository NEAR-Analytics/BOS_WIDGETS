{"tx_hash": "65TdRFgXvZxVgp2fmpUUvKPiecBz4ACkEWJCZYV6JEPX", "action_id_social": "DykSkt6s3WrJeyTUSZdS41T5Lv9Mduzz4JsvfCm8Gvyk-0-widget", "block_id": 121063375, "block_timestamp": "2024-06-13T07:48:52.601Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Duo.Button", "source_code": "// basic params\nconst ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\n// deposit functions\nconst DEPOSIT_POOL_ABI = [\n  // 1: Boost Points | 4: Points & Fixed Yield\n  {\n    // deposit ETH\n    ETH: {\n      inputs: [\n        { internalType: \"address\", name: \"exchange\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minLockedYield\", type: \"uint256\" },\n        { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      ],\n      name: \"mintFixedRateEth\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    // deposit WETH\n    WETH: {\n      inputs: [\n        { internalType: \"address\", name: \"exchange\", type: \"address\" },\n        { internalType: \"address\", name: \"token\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minLockedYield\", type: \"uint256\" },\n        { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      ],\n      name: \"mintFixedRate\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    // deposit USDB\n    USDB: {\n      inputs: [\n        { internalType: \"address\", name: \"exchange\", type: \"address\" },\n        { internalType: \"address\", name: \"token\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minLockedYield\", type: \"uint256\" },\n        { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      ],\n      name: \"mintFixedRate\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n  },\n  // 2: Boost Yield | 3: Points & Yield\n  {\n    // deposit ETH\n    ETH: {\n      inputs: [\n        { internalType: \"address\", name: \"exchange\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      ],\n      name: \"mintVariableRateEth\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    // deposit WETH\n    WETH: {\n      inputs: [\n        { internalType: \"address\", name: \"exchange\", type: \"address\" },\n        { internalType: \"address\", name: \"token\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      ],\n      name: \"mintVariableRate\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    // deposit USDB\n    USDB: {\n      inputs: [\n        { internalType: \"address\", name: \"exchange\", type: \"address\" },\n        { internalType: \"address\", name: \"token\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n      ],\n      name: \"mintVariableRate\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n  },\n];\n\n// withdraw params\nconst WITHDRAW_ABI = [\n  // 1: Boost Points | 4: Points & Fixed Yield\n  {\n    // withdraw ETH\n    ETH: {\n      inputs: [\n        { internalType: \"address\", name: \"fixedRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      ],\n      name: \"burnFixedRate\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    // withdraw USDB\n    USDB: {\n      inputs: [\n        { internalType: \"address\", name: \"fixedRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      ],\n      name: \"burnFixedRate\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n  },\n  // 2: Boost Yield | 3: Points & Yield\n  {\n    // withdraw ETH\n    ETH: {\n      inputs: [\n        { internalType: \"address\", name: \"variableRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minYield\", type: \"uint256\" },\n      ],\n      name: \"burnVariableRate\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    // withdraw USDB\n    USDB: {\n      inputs: [\n        { internalType: \"address\", name: \"variableRate\", type: \"address\" },\n        { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"minYield\", type: \"uint256\" },\n      ],\n      name: \"burnVariableRate\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n  },\n];\n\n// button styles\nconst Button = styled.button`\n  background: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  font-size: 16px;\n  font-weight: 600;\n  height: 56px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  margin-top: 20px;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\nconst {\n  account,\n  actionText,\n  amount,\n  data,\n  chainId,\n  onSuccess,\n  toast,\n  addAction,\n  loading: estimating,\n  gas,\n  dexConfig,\n  stakeToken,\n  onSwitchChain,\n  curPointsAndYield,\n  curPointsAndYieldItem,\n  curToken,\n  curReceivedToken,\n} = props;\n\nconst { ExchangeToken, WithdrawalContract, DepositPool } = dexConfig;\nconst { parseUnits, formatUnits } = ethers.utils;\n\nlet tokenSymbol;\nlet tokenDecimals;\nlet tokenAddr;\nlet spender;\nif (actionText === \"Stake\") {\n  tokenSymbol = stakeToken.symbol;\n  tokenDecimals = stakeToken.decimals;\n  tokenAddr = stakeToken.address;\n  spender = curPointsAndYieldItem[curToken];\n}\n\nif (!actionText) return;\n\nif (!amount) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Enter An Amount\n    </Button>\n  );\n}\n\nconst amountShown = Big(amount || 0).toFixed(tokenDecimals);\n\nuseEffect(() => {\n  State.update({\n    approving: false,\n    isApproved: false,\n  });\n}, []);\n\nfunction getAllowance() {\n  State.update({\n    pending: true,\n  });\n  const TokenContract = new ethers.Contract(\n    tokenAddr,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, spender)\n    .then((allowanceRaw) => {\n      State.update({\n        pending: false,\n        isApproved: !Big(formatUnits(allowanceRaw, tokenDecimals)).lt(\n          amountShown || \"0\"\n        ),\n      });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n    });\n}\n\nuseEffect(() => {\n  if ([\"Stake\"].includes(actionText) && !stakeToken.isNative) {\n    getAllowance();\n  } else {\n    State.update({\n      isApproved: true,\n    });\n  }\n}, [amountShown, actionText]);\n\nif (!state.isApproved) {\n  function handleApprove() {\n    const toastId = toast?.loading({\n      title: `Approve ${Big(amountShown).toFixed(2)} ${tokenSymbol}`,\n    });\n    State.update({\n      approving: true,\n    });\n\n    const TokenContract = new ethers.Contract(\n      tokenAddr,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(spender, parseUnits(amountShown, tokenDecimals))\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              isApproved: true,\n              approving: false,\n            });\n            toast?.success({\n              title: \"Approve Successfully!\",\n              text: `Approve ${Big(amountShown).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            State.update({\n              isApproved: false,\n              approving: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approve ${Big(amountShown).toFixed(2)} ${tokenSymbol}`,\n        });\n        onLoad?.(false);\n      });\n  }\n  return (\n    <Button onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Approve\"\n      )}\n    </Button>\n  );\n}\n\n// params formatter\nfunction formatAddAction(actionText, _amount, status, transactionHash) {\n  addAction?.({\n    type: \"Staking\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: props.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\n// stake event\nfunction handleDepositErc20() {\n  State.update({\n    pending: true,\n  });\n\n  let DEPOSIT_POOL_ABI_LATEST;\n  let params;\n\n  // DEPOSIT_POOL_ABI\n  // ETH: deposit ETH\n  // WETH: deposit WETH\n  // USDB: deposit USDB\n\n  // Boost Points, Points & Fixed Yield\n  if ([1, 4].includes(curPointsAndYield)) {\n    DEPOSIT_POOL_ABI_LATEST = DEPOSIT_POOL_ABI[0][curToken];\n    params = [\n      // exchange\n      DepositPool,\n      // token: tokenAddr\n      tokenAddr,\n      // amountIn\n      parseUnits(amountShown, tokenDecimals),\n      // amountOutMin\n      parseUnits('0', tokenDecimals),\n      // minLockedYield\n      parseUnits('0', tokenDecimals),\n      // data\n      '0x',\n    ];\n    if (curToken === 'ETH') {\n      // delete token\n      params.splice(1, 1);\n    }\n  }\n  // 2: Boost Yield | 3: Points & Yield\n  else {\n    DEPOSIT_POOL_ABI_LATEST = DEPOSIT_POOL_ABI[1][curToken];\n    params = [\n      // exchange\n      DepositPool,\n      // token: tokenAddr\n      tokenAddr,\n      // amountIn\n      parseUnits(amountShown, tokenDecimals),\n      // amountOutMin\n      parseUnits('0', tokenDecimals),\n      // data\n      '0x',\n    ];\n    if (curToken === 'ETH') {\n      // delete token\n      params.splice(1, 1);\n    }\n  }\n\n  const contract = new ethers.Contract(\n    curPointsAndYieldItem[curToken],\n    [\n      DEPOSIT_POOL_ABI_LATEST,\n      {\n        ...DEPOSIT_POOL_ABI_LATEST,\n        name: \"deposit\",\n        constant: false,\n      }\n    ],\n    Ethers.provider().getSigner()\n  );\n  const getTx = (gas) => {\n    const contractOption = {\n      gasLimit: gas || 4000000,\n    }\n    if (DEPOSIT_POOL_ABI_LATEST.stateMutability === 'payable') {\n      if (['ETH'].includes(tokenSymbol)) {\n        contractOption.value = parseUnits(amountShown, tokenDecimals);\n      }\n    }\n    contract[DEPOSIT_POOL_ABI_LATEST.name](...params, contractOption)\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              pending: false,\n            });\n            onSuccess();\n            formatAddAction(actionText, amountShown, status, transactionHash);\n            toast?.success({\n              title: `${actionText} Successfully!`,\n              text: `${actionText} ${Big(amountShown).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            console.log('tx error: ', err);\n            State.update({\n              pending: false,\n            });\n            toast?.dismiss(toastId);\n            toast?.fail({\n              title: `${actionText} Failed!`,\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : ``,\n            });\n          });\n      })\n      .catch((err) => {\n        console.log('contract fn error: ', err);\n        State.update({\n          pending: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: `${actionText} Failed!`,\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : ``,\n        });\n      });\n  };\n  // get gas\n  const estimateGas = () => {\n    contract.estimateGas.deposit(\n      ...params,\n      { value: parseUnits(amountShown, tokenDecimals), gasLimit: 1 }\n    ).then((gas) => {\n      getTx(gas);\n    }).catch((err) => {\n      console.log('get gas failed: ', err);\n      getTx();\n    });\n  };\n  estimateGas();\n}\n\n// un-stake event\nfunction handleWithdraw() {\n  State.update({\n    pending: true,\n  });\n\n  let WITHDRAW_ABI_LATEST;\n  let params;\n\n  // WITHDRAW_ABI\n  // ETH: withdraw ETH\n  // USDB: withdraw USDB\n\n  // Boost Points, Points & Fixed Yield\n  if ([1, 4].includes(curPointsAndYield)) {\n    WITHDRAW_ABI_LATEST = WITHDRAW_ABI[0][stakeToken.symbol];\n    params = [\n      // fixedRate\n      WithdrawalContract,\n      // amount\n      parseUnits(amount, tokenDecimals),\n    ];\n  }\n  // 2: Boost Yield | 3: Points & Yield\n  else {\n    WITHDRAW_ABI_LATEST = WITHDRAW_ABI[1][stakeToken.symbol];\n    params = [\n      // variableRate\n      WithdrawalContract,\n      // amount\n      parseUnits(amount, tokenDecimals),\n      // minYield\n      parseUnits('0', tokenDecimals),\n    ];\n  }\n\n  const contract = new ethers.Contract(\n    curPointsAndYieldItem[stakeToken.symbol],\n    [\n      WITHDRAW_ABI_LATEST,\n      {\n        ...WITHDRAW_ABI_LATEST,\n        name: \"withdraw\",\n        constant: false,\n      }\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  const getTx = (gas) => {\n    contract[WITHDRAW_ABI_LATEST.name](\n      ...params,\n      {\n        gasLimit: gas || 4000000,\n        value: parseUnits(amount, tokenDecimals),\n      }\n    )\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              pending: false,\n            });\n            onSuccess();\n            formatAddAction(actionText, amount, status, transactionHash);\n            toast?.success({\n              title: `${actionText} Successfully!`,\n              text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            console.log('tx error: ', err);\n            State.update({\n              pending: false,\n            });\n            toast?.dismiss(toastId);\n            toast?.fail({\n              title: `${actionText} Failed!`,\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : ``,\n            });\n          });\n      })\n      .catch((err) => {\n        console.log('contract error: ', err);\n        State.update({\n          pending: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: `${actionText} Failed!`,\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : ``,\n        });\n      });\n  };\n\n  // get gas\n  const estimateGas = () => {\n    contract.estimateGas.withdraw(\n      ...params,\n      { value: parseUnits(amount, tokenDecimals) }\n    ).then((gas) => {\n      getTx(gas);\n    }).catch((err) => {\n      console.log('get gas failed: ', err);\n      getTx();\n    });\n  };\n  estimateGas();\n}\n\n// btn click event\nfunction handleClick() {\n  if (actionText === \"Stake\") {\n    handleDepositErc20();\n  }\n  if (actionText === \"Unstake\") {\n    handleWithdraw();\n  }\n}\n\n// btn shown text\nfunction getRealActionText() {\n  if (actionText === \"Stake\") {\n    return `Get ${curReceivedToken.symbol}, Earn ${curPointsAndYieldItem.label}`;\n  }\n  if (actionText === \"Unstake\") {\n    return actionText;\n  }\n}\n\nreturn (\n  <Button\n    disabled={state.pending}\n    className={actionText.toLowerCase()}\n    onClick={handleClick}\n  >\n    {state.pending ? (\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    ) : getRealActionText()}\n  </Button>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Duo.Button", "fact_widget_deployments_id": "8b53ab05c4674337920c5170bb4e3e2f", "inserted_timestamp": "2024-06-13T09:04:53.640Z", "modified_timestamp": "2024-06-13T09:04:53.640Z", "__row_index": 2}