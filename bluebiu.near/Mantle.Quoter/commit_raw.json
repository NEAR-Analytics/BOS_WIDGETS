{"tx_hash": "8XUT1MtVvUynjXN51CW6cuei2Cc793tUJrZMoLDPcTFh", "action_id_social": "G6AtXVWrmPZp57FmejLHXsKPKgfkMZrsWTDhaS6kb2pc-0-widget", "block_id": 99479952, "block_timestamp": "2023-08-23T14:45:03.312Z", "signer_id": "bluebiu.near", "widget_name": "Mantle.Quoter", "source_code": "const abi = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { type: \"address\", name: \"_deployer\", internalType: \"address\" },\n      { type: \"address\", name: \"_factory\", internalType: \"address\" },\n      { type: \"address\", name: \"_WMNT\", internalType: \"address\" },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [{ type: \"address\", name: \"\", internalType: \"address\" }],\n    name: \"WMNT\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [],\n    name: \"agniSwapCallback\",\n    inputs: [\n      { type: \"int256\", name: \"amount0Delta\", internalType: \"int256\" },\n      { type: \"int256\", name: \"amount1Delta\", internalType: \"int256\" },\n      { type: \"bytes\", name: \"path\", internalType: \"bytes\" },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [{ type: \"address\", name: \"\", internalType: \"address\" }],\n    name: \"deployer\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"view\",\n    outputs: [{ type: \"address\", name: \"\", internalType: \"address\" }],\n    name: \"factory\",\n    inputs: [],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [{ type: \"uint256\", name: \"amountOut\", internalType: \"uint256\" }],\n    name: \"quoteExactInput\",\n    inputs: [\n      { type: \"bytes\", name: \"path\", internalType: \"bytes\" },\n      { type: \"uint256\", name: \"amountIn\", internalType: \"uint256\" },\n    ],\n  },\n  {\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    outputs: [{ type: \"uint256\", name: \"amountOut\", internalType: \"uint256\" }],\n    name: \"quoteExactInputSingle\",\n    inputs: [\n      { type: \"address\", name: \"tokenIn\", internalType: \"address\" },\n      { type: \"address\", name: \"tokenOut\", internalType: \"address\" },\n      { type: \"uint24\", name: \"fee\", internalType: \"uint24\" },\n      { type: \"uint256\", name: \"amountIn\", internalType: \"uint256\" },\n      { type: \"uint160\", name: \"sqrtPriceLimitX96\", internalType: \"uint160\" },\n    ],\n  },\n];\n\nconst { amountIn, tokenIn, tokenOut, loadAmountOut, config, selectedDex } =\n  props;\n\nconst queryString = `${tokenIn.address}-${tokenOut.address}-${selectedDex}-${amountIn}`;\n\nif (state.cacheString !== queryString) {\n  State.update({\n    cacheString: queryString,\n  });\n} else {\n  return <div></div>;\n}\n\nconst quoteStirng = `${amountIn} ${tokenIn.symbol} -> ${tokenOut.symbol} `;\n\nconst selectedDexItem = config.dapps.find((dapp) => dapp.name === selectedDex);\n\nconst quote = (amountIn, tokenIn, tokenOut) => {\n  const iface = new ethers.utils.Interface(abi);\n\n  const path = [tokenIn.address, tokenOut.address];\n  console.log(\n    \"tokenIn.address, tokenOut.address: \",\n    tokenIn.address,\n    tokenOut.address\n  );\n  console.log(\"path: \", path);\n\n  const pathBytes = \"0x\" + path.map((address) => address.substr(2)).join(\"\");\n  console.log(\"pathBytes: \", pathBytes);\n\n  const inputs = [\n    pathBytes,\n    Big(amountIn).times(Big(10).pow(tokenIn.decimals)).toFixed(0),\n  ];\n\n  const encodedData = iface.encodeFunctionData(\"quoteExactInput\", inputs);\n\n  const quoterContractId = selectedDexItem.quoter;\n\n  Ethers.provider()\n    .call({\n      to: quoterContractId.trim(),\n      data: encodedData,\n    })\n    .then((data) => {\n      const decodedData = iface.decodeFunctionResult(\"quoteExactInput\", data);\n      console.log(\"decodedData: \", decodedData);\n\n      const amountOut = decodedData[0];\n      const fee = decodedData[1];\n\n      const estimate = Big(amountOut.toString())\n        .div(Big(10).pow(tokenOut.decimals))\n        .toFixed(18);\n\n      loadAmountOut({\n        amountOut: estimate,\n        fee,\n      });\n    })\n    .catch((e) => {\n      console.log(e, \"error\");\n    });\n};\n\nif (Number(amountIn) > 0) {\n  console.log(\"quote 111\");\n\n  quote(amountIn, tokenIn, tokenOut);\n}\n\nreturn <div></div>;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Mantle.Quoter", "fact_widget_deployments_id": "3335d71385e7949e181cb81f35aa7504", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}