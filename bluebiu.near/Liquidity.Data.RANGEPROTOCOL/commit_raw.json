{"tx_hash": "8TN5g4e1xBAKWSG1d4yEpGTzfo5uuJfQFvvHtLQdJZES", "action_id_social": "8jAhdQuh4tBWXPLP3FduZvk4LzHGiFsxZbNXEFhvJTTa-0-widget", "block_id": 118826594, "block_timestamp": "2024-05-13T08:45:48.573Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.RANGEPROTOCOL", "source_code": "\nconst {\n  pairs,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  feesData,\n  // rangeData,\n  RANGE_URL,\n  prices\n} = props\n\nlet loading = false\nlet dataList = []\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nfunction multicallv2WithPromise(abi, calls, options) {\n  return new Promise((resolve, reject) => {\n    multicallv2(\n      abi,\n      calls,\n      options,\n      resolve,\n      reject)\n  })\n}\nfunction asyncFetchWithPromise(url, options) {\n  return new Promise((resolve, reject) => {\n    asyncFetch(url, options || {}).then(result => {\n      try {\n        if (result.ok) {\n          resolve(result.body)\n        } else {\n          reject(result.status)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }).catch(reject)\n  })\n\n}\n\nconst fetchFusionsData = () => {\n  asyncFetch(\"https://api.lynex.fi/api/v1/fusions\").then((res) => {\n    if (!res.ok) return;\n    State.update({\n      fusionsData: res?.body?.data,\n    });\n  });\n}\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\nfunction formatedData(type) {\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    const vaultAddress = addresses[pair.id]\n    const data = allData.find(data => data.pool === pair.poolAddress && data.vault === vaultAddress)\n    dataList.push({\n      ...data,\n      ...pair,\n    })\n  })\n  formatedData('dataList')\n}\n\nfunction getLiquidity() {\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  const query = `{\n    users(where: {id: \"${sender}\"}) {\n      id\n      vaultBalances {\n        token0\n        token1\n        balance\n        address\n        vault {\n          id\n          token0\n          token1\n        }\n      }\n    }\n  }`\n  asyncFetch(RANGE_URL, {\n    method: 'POST',\n    body: JSON.stringify({\n      query\n    })\n  }).then(result => {\n    if (result.ok) {\n      const vaultBalances = result?.body?.data?.users[0]?.vaultBalances ?? []\n      for (let i = 0; i < dataList.length; i++) {\n        // const element = array[i];\n        const data = dataList[i]\n        const balance = vaultBalances.find(vaultBalance => vaultBalance.vault.id.toLowerCase() === addresses[data.id].toLowerCase())\n        if (balance) {\n          const {\n            token0,\n            token1\n          } = balance\n          dataList[i].liquidity = Big(ethers.utils.formatUnits(token0, data.decimals0)).times(prices[data.token0]).plus(Big(ethers.utils.formatUnits(token1, data.decimals1)).times(prices[data.token1])).toFixed(4)\n        }\n      }\n      formatedData('getLiquidity')\n    }\n  })\n}\nfunction getFee() {\n  for (let i = 0; i < dataList.length; i++) {\n    const data = dataList[i];\n    dataList[i].fee = Big(data?.fee ?? 0).div(10000).toFixed(2)\n  }\n  formatedData('getFee')\n}\nfunction getTvl() {\n  const promiseArray = []\n  if (curChain.chain_id === 56) {\n    for (let i = 0; i < dataList.length; i++) {\n      const vault = dataList[i].vault\n      const query = \"{\\n  vault(id: \\\"\" + vault + \"\\\") {\\n    liquidity\\n    balance0\\n    balance1\\n    totalSupply\\n    totalFeesEarned0\\n    totalFeesEarned1\\n    token0\\n    token1\\n    name\\n    tag\\n    pool\\n  }\\n}\"\n      promiseArray.push(asyncFetchWithPromise(RANGE_URL, {\n        method: \"POST\",\n        body: JSON.stringify({\n          query\n        })\n      }))\n    }\n  } else {\n    for (let i = 0; i < dataList.length; i++) {\n      const query = `{\n        vault(id: \"${dataList[i].vault}\") {\n          liquidity\n          balance0\n          balance1\n          totalSupply\n          totalFeesEarned0\n          totalFeesEarned1\n          name\n          tag\n          pool\n        }\n      }`\n      promiseArray.push(asyncFetchWithPromise(\"https://api.goldsky.com/api/public/project_clm97huay3j9y2nw04d8nhmrt/subgraphs/izumi-manta/0.2/gn\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          query\n        })\n      }))\n    }\n  }\n  Promise.all(promiseArray)\n    .then(result => {\n      for (let i = 0; i < result.length; i++) {\n        const {\n          balance0,\n          balance1\n        } = result[i].data.vault\n        const data = dataList[i]\n        dataList[i].tvlUSD = Big(ethers.utils.formatUnits(balance0, data.decimals0))\n          .times(prices[data.token0] ?? 0)\n          .plus(Big(ethers.utils.formatUnits(balance1, data.decimals1)).times(prices[data.token1] ?? 0))\n          .toFixed(2)\n      }\n      formatedData('getTvl')\n    })\n\n}\nfunction getApy() {\n  if (curChain.chain_id === 56) {\n    for (let i = 0; i < dataList.length; i++) {\n      const vault = dataList[i].vault\n      dataList[i].apy = Big(feesData[vault]?.apy ?? 0).toFixed(2) + '%'\n    }\n  } else {\n    for (let i = 0; i < dataList.length; i++) {\n      const data = dataList[i]\n      dataList[i].apy = Big(data?.fee_apy ?? 0).plus(data?.asset_yield ?? 0).toFixed(2) + '%'\n    }\n  }\n  formatedData('getApy')\n}\nfunction getBalance() {\n  const calls = [];\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  dataList.forEach(data => {\n    calls.push({\n      address: ethers.utils.getAddress(addresses[data.id]),\n      name: \"balanceOf\",\n      params: [sender],\n    });\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (result) => {\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        dataList[i].balance = ethers.utils.formatUnits(element[0], 18)\n      }\n      formatedData('getBalance')\n    },\n    (error) => {\n      setTimeout(() => {\n        getBalance();\n      }, 500);\n    }\n  )\n}\nuseEffect(() => {\n  getDataList()\n  getFee()\n  getTvl()\n  getApy()\n  getBalance()\n  getLiquidity()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.RANGEPROTOCOL", "fact_widget_deployments_id": "207eb22baa4a43c1d9c718071b452ca9", "inserted_timestamp": "2024-05-13T10:40:24.509Z", "modified_timestamp": "2024-05-13T10:40:24.509Z", "__row_index": 4}