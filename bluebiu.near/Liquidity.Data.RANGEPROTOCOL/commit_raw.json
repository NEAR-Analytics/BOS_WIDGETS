{"tx_hash": "25zKpMjbfjv7uyZNfoFwnciWYmgV7tuNPU2cj1nbFmCU", "action_id_social": "BKQxck9WMSGUsp3P3mZcS4YVSdsGkbhD4jWH53xPrZYg-0-widget", "block_id": 115902838, "block_timestamp": "2024-04-01T07:08:41.156Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.Data.RANGEPROTOCOL", "source_code": "\nconst {\n  pairs,\n  addresses,\n  allData,\n  onLoad,\n  // chainType,\n  curChain,\n  multicallAddress,\n  feesData,\n  rangeData,\n  prices\n} = props\n\nlet loading = false\nlet dataList = []\nconst MULTICALL_ABI = [\n  {\n    inputs: [\n      { internalType: \"bool\", name: \"requireSuccess\", type: \"bool\" },\n      {\n        components: [\n          { internalType: \"address\", name: \"target\", type: \"address\" },\n          { internalType: \"bytes\", name: \"callData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"bool\", name: \"success\", type: \"bool\" },\n          { internalType: \"bytes\", name: \"returnData\", type: \"bytes\" },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst MulticallContract = new ethers.Contract(\n  multicallAddress,\n  MULTICALL_ABI,\n  Ethers.provider().getSigner()\n);\nconst multicallv2 = (abi, calls, options, onSuccess, onError) => {\n  const { requireSuccess, ...overrides } = options || {};\n  const itf = new ethers.utils.Interface(abi);\n  const calldata = calls.map((call) => ({\n    target: call.address.toLowerCase(),\n    callData: itf.encodeFunctionData(call.name, call.params),\n  }));\n  MulticallContract.callStatic\n    .tryAggregate(requireSuccess || true, calldata, overrides)\n    .then((res) => {\n      onSuccess(\n        res.map((call, i) => {\n          const [result, data] = call;\n          return result && data !== \"0x\"\n            ? itf.decodeFunctionResult(calls[i].name, data)\n            : null;\n        })\n      );\n    })\n    .catch((err) => {\n      onError?.(err);\n    });\n};\nconst fetchFusionsData = () => {\n  asyncFetch(\"https://api.lynex.fi/api/v1/fusions\").then((res) => {\n    if (!res.ok) return;\n    State.update({\n      fusionsData: res?.body?.data,\n    });\n  });\n}\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\nfunction formatedData(type) {\n  console.log('===type', type)\n  onLoad({\n    loading,\n    dataList\n  })\n}\nfunction getDataList() {\n  pairs.forEach(pair => {\n    const vaultAddress = addresses[pair.id]\n    const data = allData.find(data => data.vault === vaultAddress)\n    dataList.push({\n      ...data,\n      ...pair,\n    })\n  })\n  formatedData('dataList')\n}\n\nfunction getLiquidity() {\n  const calls = [];\n  const sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n  dataList.forEach(data => {\n    calls.push({\n      address: data.vaultAddress,\n      name: \"balanceOf\",\n      params: [sender],\n    });\n  })\n  multicallv2(\n    ERC20_ABI,\n    calls,\n    {},\n    (res) => {\n      for (let i = 0, len = res.length; i < len; i++) {\n        if (res[i]) {\n          dataList[i].liquidity = Big(ethers.utils.formatUnits(res[i][0]._hex)).toFixed(2)\n        }\n      }\n      formatedData('getLiquidity')\n    },\n    (error) => {\n      setTimeout(() => {\n        getLiquidity();\n      }, 500);\n    }\n  )\n}\nfunction getFee() {\n  for (let i = 0; i < dataList.length; i++) {\n    const data = dataList[i];\n    dataList[i].fee = Big(data.fee).div(10000).toFixed(2)\n  }\n  formatedData('getFee')\n}\nfunction handleGetTvl(i, range) {\n  const {\n    balance0,\n    balance1,\n  } = range\n  const data = dataList[i]\n  dataList[i].tvlUSD = Big(ethers.utils.formatUnits(balance0, data.decimals0))\n    .times(prices[data.token0] ?? 0)\n    .plus(Big(ethers.utils.formatUnits(balance1, data.decimals1)).times(prices[data.token1] ?? 0))\n    .toFixed(2)\n  formatedData('getTvl')\n}\nfunction getTvl() {\n  for (let i = 0; i < dataList.length; i++) {\n    const vault = dataList[i].vault\n    const range = rangeData[vault]\n    handleGetTvl(i, range)\n  }\n\n}\nfunction getApy() {\n  for (let i = 0; i < dataList.length; i++) {\n    const vault = dataList[i].vault\n    dataList[i].apy = Big(feesData[vault].apy).toFixed(2) + '%'\n  }\n  formatedData('getApy')\n}\n\nuseEffect(() => {\n  getDataList()\n  getFee()\n  getTvl()\n  getApy()\n}, [])", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.Data.RANGEPROTOCOL", "fact_widget_deployments_id": "42647b50991d3177a3758010a7a26d75", "inserted_timestamp": "2024-04-01T08:49:06.720Z", "modified_timestamp": "2024-04-01T08:49:06.720Z", "__row_index": 4}