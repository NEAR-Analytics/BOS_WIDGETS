{"tx_hash": "8NidvjxyfU7hv1cjGEWb3oiQTpMoUb4vSzuAGYhFPM8N", "action_id_social": "9Z7Cn7Mxbrfdt9zoKscuP9KekDi64BA1ysKugP94GfcN-0-widget", "block_id": 119552025, "block_timestamp": "2024-05-23T08:49:45.241Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Kelp.Content", "source_code": "const StyledContainer = styled.div`\n  padding-top: 18px;\n  width: 478px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  border-radius: 16px;\n  margin: 50px auto 0;\n  padding: 20px 0 0px;\n  position: relative;\n`;\nconst Content = styled.div`\n  padding: 20px 15px;\n`;\nconst Wrapper = styled.div``;\nconst BlurWrap = styled.div`\n  position: relative;\n`;\nconst Blur = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  backdrop-filter: blur(4px);\n`;\nconst Summary = styled.div`\n  display: flex;\n  padding: 0 20px 20px;\n  border-bottom: 1px solid rgba(55, 58, 83, 1);\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst SummaryItem = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 16.8px;\n  .title {\n    color: rgba(151, 154, 190, 1);\n  }\n  .amount {\n    margin-top: 5px;\n    color: rgba(255, 255, 255, 1);\n  }\n`;\nconst Panel = styled.div`\n  height: 100px;\n  border-radius: 12px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  background-color: rgba(46, 49, 66, 1);\n  padding: 15px;\n  margin-bottom: 20px;\n  .title {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 16.8px;\n    color: rgba(151, 154, 190, 1);\n  }\n  .body {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n  }\n\n  .foot {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n    justify-content: space-between;\n    font-size: 12px;\n    font-weight: 400;\n    line-height: 14.4px;\n    color: rgba(151, 154, 190, 1);\n  }\n`;\nconst Input = styled.input`\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  width: 200px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst List = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 15px;\n  .keys {\n    color: rgba(151, 154, 190, 1);\n  }\n  .values {\n    color: #fff;\n  }\n`;\n\nconst {\n  dexConfig,\n  wethAddress,\n  multicallAddress,\n  chainIdNotSupport,\n  multicall,\n  prices,\n  account,\n  addAction,\n  toast,\n  chainId,\n  nativeCurrency,\n  tab,\n  StakeTokens,\n  ExchangeToken,\n} = props;\nconst { parseUnits, formatUnits } = ethers.utils;\nconsole.log(\"Content--\", props);\n\nState.init({\n  stakeAmount: \"\",\n  curToken: \"\", // token symbol\n  exchangeRate: \"\",\n  options: [],\n\n  tokenBal: 0,\n});\n\nuseEffect(() => {\n  State.update({\n    loading: !chainIdNotSupport,\n  });\n}, []);\n\nuseEffect(() => {\n  console.log(\"tab--\", tab);\n  const options = StakeTokens?.map((item) => ({\n    text: item.symbol,\n    value: item.symbol,\n  }));\n  State.update({\n    options,\n    curToken: options[0].value,\n  });\n}, [tab]);\n\nconst clickBalance = (_bal) => {\n  State.update({\n    stakeAmount: Big(_bal).toFixed(4, 0),\n  });\n};\nfunction getExchangeRate(symbol) {\n  const url = `https://universe.kelpdao.xyz/rseth/exchangeRate/?lrtToken=${symbol}`;\n  return asyncFetch(url)\n    .then((res) => {\n      return res.body.value;\n    })\n    .catch((err) => {\n      console.log(\"Catch - getExchangeRate--\", err);\n    });\n}\nfunction fetchData(url) {\n  return asyncFetch(url);\n}\nfunction getAPY() {\n  const url = `https://universe.kelpdao.xyz/rseth/apy`;\n  fetchData(url)\n    .then((res) => {\n      State.update({\n        APY: res.body.value || \"-\",\n      });\n    })\n    .catch((err) => {\n      console.log(\"Catch-getAPY--\", err);\n    });\n}\nfunction getTVL() {\n  const url = `https://universe.kelpdao.xyz/rseth/tvl/?lrtToken`;\n  fetchData(url)\n    .then((res) => {\n      State.update({\n        TVL: res.body.usdTvl || \"-\",\n      });\n    })\n    .catch((err) => {\n      console.log(\"Catch-getTVL--\", err);\n    });\n}\n\nuseEffect(() => {\n  getAPY();\n  getTVL();\n}, []);\n\nuseEffect(() => {\n  if (!state.curToken) return;\n\n  getExchangeRate(state.curToken).then((_rate) => {\n    State.update({\n      exchangeRate: _rate,\n    });\n  });\n\n  if (tab === \"Stake\") {\n    const _bal = StakeTokens.find(\n      (item) => item.symbol === state.curToken\n    ).balance;\n\n    State.update({\n      tokenBal: _bal,\n    });\n  }\n}, [state.curToken, tab]);\n\n// rsETH balance\nfunction getTokenBalance() {\n  const contract = new ethers.Contract(\n    ExchangeToken.address,\n    [\n      {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ internalType: \"uint256\", name: \"value\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  contract\n    .balanceOf(account)\n    .then((_balance) => {\n      const _bal = formatUnits(_balance, ExchangeToken.decimals);\n      console.log(\"get-resETH-balance--\", _balance, balance);\n      State.update({\n        tokenBal: _bal,\n      });\n    })\n    .catch((err) => {\n      console.log(\"Catch-getTokenBalance-error--\", err);\n    });\n}\nuseEffect(() => {\n  // ethereum unstake\n  if (chainId !== 1) return;\n  if (tab === \"Unstake\") {\n    getTokenBalance();\n\n    const options = StakeTokens?.map((item) => ({\n      text: item.symbol,\n      value: item.symbol,\n    })).filter((item) => item.value !== \"ETH\");\n    State.update({\n      options,\n      curToken: options[0].value,\n    });\n  }\n}, [tab]);\n// console.log(state.curToken, prices[state.curToken]);\n\nreturn (\n  <div>\n    <StyledContainer>\n      <Wrapper>\n        <Summary>\n          <SummaryItem>\n            <div className=\"title\">TVL</div>\n            <div className=\"amount\">\n              $\n              <Widget\n                src=\"bluebiu.near/widget/Utils.FormatNumber\"\n                props={{\n                  number: state.TVL,\n                }}\n              />\n            </div>\n          </SummaryItem>\n          <SummaryItem>\n            <div className=\"title\">APY</div>\n            <div className=\"amount\">{state.APY}%</div>\n          </SummaryItem>\n        </Summary>\n        {(tab === \"Unstake\" || tab === \"Stake\") && (\n          <Content>\n            <BlurWrap>\n              {chainId !== 1 && (tab === \"Unstake\" || tab === \"Withdraw\") ? (\n                <Blur></Blur>\n              ) : null}\n\n              <Panel>\n                <div className=\"title\">\n                  {tab === \"Unstake\" ? \"Withdraw rsETH as\" : tab}\n                </div>\n                <div className=\"body\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"0\"\n                    value={state.stakeAmount}\n                    onChange={(ev) => {\n                      if (isNaN(Number(ev.target.value))) return;\n                      let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n                      if (Big(amount || 0).gt(Big(state.tokenBal || 0))) {\n                        amount = Big(state.tokenBal || 0).toFixed(4, 0);\n                      }\n                      State.update({\n                        stakeAmount: amount,\n                      });\n                    }}\n                  />\n                  <Widget\n                    src=\"bluebiu.near/widget/UI.Select.Index\"\n                    props={{\n                      options: state.options,\n                      value: state.options.find(\n                        (obj) => obj.value === state.curToken\n                      ),\n                      onChange: (option) => {\n                        console.log(\"onchange--\", option);\n                        State.update({\n                          curToken: option.value,\n                        });\n                      },\n                    }}\n                  />\n                </div>\n                <div className=\"foot\">\n                  <div class=\"prices\">\n                    $\n                    {Big(state.stakeAmount || 0)\n                      .times(Big(prices[state.curToken] || 1))\n                      .toFixed(2, 0)}\n                  </div>\n                  <div class=\"balance\">\n                    Balance:\n                    <Widget\n                      src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n                      props={{\n                        value: state.tokenBal,\n                        digit: 4,\n                        onClick: clickBalance,\n                        symbol:\n                          tab === \"Stake\"\n                            ? state.curToken\n                            : ExchangeToken.symbol,\n                      }}\n                    />\n                  </div>\n                </div>\n              </Panel>\n              <List>\n                <span className=\"keys\">You will get</span>\n                <span className=\"values\">\n                  {Big(state.stakeAmount || 0)\n                    .div(state.exchangeRate || 1)\n                    .toFixed(4, 0)}{\" \"}\n                  {tab === \"Stake\" ? ExchangeToken.symbol : state.curToken}\n                </span>\n              </List>\n              <List>\n                <span className=\"keys\">Exchange rate</span>\n                <span className=\"values\">\n                  1 {ExchangeToken?.symbol} ={\" \"}\n                  {Big(state.exchangeRate || 0).toFixed(4, 0)}{\" \"}\n                  {tab === \"Stake\" ? ExchangeToken.symbol : state.curToken}\n                </span>\n              </List>\n            </BlurWrap>\n            <Widget\n              src=\"bluebiu.near/widget/Staking.Kelp.Button\"\n              props={{\n                ...props,\n                actionText: tab,\n                amount: state.stakeAmount,\n                curToken: state.curToken,\n                stakeToken: StakeTokens\n                  ? StakeTokens.find((item) => item.symbol === state.curToken)\n                  : {},\n                onSuccess: () => {\n                  State.update({ loading: true, stakeAmount: \"\" });\n                },\n              }}\n            />\n          </Content>\n        )}\n        {tab === \"Withdraw\" && <div>null</div>}\n      </Wrapper>\n\n      {/* {state.loading && <Widget src=\"bluebiu.near/widget/Lending.Spinner\" />} */}\n    </StyledContainer>\n\n    {/* <Widget\n      src={dexConfig.data}\n      props={{\n        ...props,\n        update: state.loading,\n        onLoad: (data) => {\n          console.log(\"onLoad--\", data);\n          State.update({\n            loading: false,\n            timestamp: Date.now(),\n            ...data,\n          });\n        },\n      }}\n    /> */}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Kelp.Content", "fact_widget_deployments_id": "df171ce0e47716c7d65b3b4a3047ff38", "inserted_timestamp": "2024-05-23T10:52:14.304Z", "modified_timestamp": "2024-05-23T10:52:14.304Z", "__row_index": 10}