{"tx_hash": "5AKTkawjES9qwmdVtZ2QBKhnMzVQe4n56MNL1T9PXkeP", "action_id_social": "8NetQFKGUDU17ar5LscKVFHNMN5gnAJ2kDPUWLNNQ8AE-0-widget", "block_id": 120129320, "block_timestamp": "2024-05-31T10:52:50.170Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Kelp.Content", "source_code": "const StyledContainer = styled.div`\n  padding-top: 18px;\n  width: 478px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  border-radius: 16px;\n  margin: 50px auto 0;\n  padding: 20px 0 0px;\n  position: relative;\n`;\nconst Content = styled.div`\n  padding: 20px 15px;\n`;\nconst Wrapper = styled.div``;\nconst BlurWrap = styled.div`\n  position: relative;\n`;\nconst WithdrawWrap = styled.div`\n  padding: 20px 15px;\n  min-height: 300px;\n  .withdraw-title {\n    font-size: 16px;\n    color: white;\n    margin-bottom: 20px;\n  }\n  .withdraw-item {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    color: white;\n  }\n  .empty {\n    color: white;\n    text-align: center;\n  }\n  .empty-title {\n    font-size: 24px;\n    font-weight: 600;\n    padding: 20px 0;\n  }\n  .empty-txt {\n    font-size: 16px;\n  }\n`;\nconst Blur = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  backdrop-filter: blur(4px);\n`;\nconst Summary = styled.div`\n  display: flex;\n  padding: 0 20px 20px;\n  border-bottom: 1px solid rgba(55, 58, 83, 1);\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst SummaryItem = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 16.8px;\n  .title {\n    color: rgba(151, 154, 190, 1);\n  }\n  .amount {\n    margin-top: 5px;\n    color: rgba(255, 255, 255, 1);\n  }\n`;\nconst Panel = styled.div`\n  height: 100px;\n  border-radius: 12px;\n  border: 1px solid rgba(55, 58, 83, 1);\n  background-color: rgba(46, 49, 66, 1);\n  padding: 15px;\n  margin-bottom: 20px;\n  .title {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 16.8px;\n    color: rgba(151, 154, 190, 1);\n  }\n  .body {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n  }\n\n  .foot {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n    justify-content: space-between;\n    font-size: 12px;\n    font-weight: 400;\n    line-height: 14.4px;\n    color: rgba(151, 154, 190, 1);\n  }\n`;\nconst Input = styled.input`\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  border: none;\n  height: 24px;\n  width: 200px;\n  outline: none;\n  background-color: transparent;\n  padding: 0;\n  &:focus {\n    color: #fff;\n    background-color: transparent;\n    border-color: transparent;\n    outline: none;\n    box-shadow: none;\n  }\n`;\nconst List = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 15px;\n  .keys {\n    color: rgba(151, 154, 190, 1);\n  }\n  .values {\n    color: #fff;\n  }\n`;\n\nconst BtnWrap = styled.div`\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n`;\nconst Btn = styled.button`\n  background-color: var(--switch-color);\n  color: var(--button-text-color);\n\n  display: block;\n  width: 100%;\n  /* width: 130px;\n  height: 40px; */\n  height: 56px;\n  font-size: 16px;\n  font-weight: 600;\n  color: white;\n  background-color: #075a5a;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\nconst ClaimBtn = styled.button`\n  background-color: var(--switch-color);\n  color: var(--button-text-color);\n  display: block;\n  width: 80px;\n  font-size: 16px;\n  font-weight: 600;\n  height: 40px;\n  color: white;\n  background-color: #075a5a;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.5s;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst {\n  dexConfig,\n  wethAddress,\n  multicallAddress,\n  WithdrawalContract,\n  chainIdNotSupport,\n  multicall,\n  prices,\n  account,\n  addAction,\n  toast,\n  chainId,\n  nativeCurrency,\n  tab,\n  StakeTokens,\n  ExchangeToken,\n  onChange,\n} = props;\nconst { parseUnits, formatUnits } = ethers.utils;\n// console.log(\"Content--\", props);\nconst { tokenPairs } = dexConfig;\n\nState.init({\n  stakeAmount: \"\",\n  curToken: \"\", // token symbol\n  exchangeRate: \"\",\n  options: [],\n\n  tokenBal: 0,\n  showDialog: false,\n  withdrawData: {},\n  withdrawList: [],\n  updater: \"\",\n});\n\nuseEffect(() => {\n  State.update({\n    loading: !chainIdNotSupport,\n  });\n}, []);\n\nuseEffect(() => {\n  console.log(\"tab---\", tab, chainId);\n\n  const options = StakeTokens?.map((item) => ({\n    text: item.symbol,\n    value: item.symbol,\n    icons: [item.icon],\n  }));\n  State.update({\n    options,\n    curToken: options[0].value,\n  });\n}, [tab]);\n\nconst clickBalance = (_bal) => {\n  State.update({\n    stakeAmount: Big(_bal).toFixed(4, 0),\n  });\n};\nfunction getExchangeRate(symbol) {\n  const url = `https://universe.kelpdao.xyz/rseth/exchangeRate/?lrtToken=${symbol}`;\n  return asyncFetch(url)\n    .then((res) => {\n      return res.body.value;\n    })\n    .catch((err) => {\n      console.log(\"Catch - getExchangeRate--\", err);\n      setTimeout(getExchangeRate, 500);\n    });\n}\nfunction fetchData(url) {\n  return asyncFetch(url);\n}\nfunction getAPY() {\n  const url = `https://universe.kelpdao.xyz/rseth/apy`;\n  fetchData(url)\n    .then((res) => {\n      State.update({\n        APY: res.body.value || \"-\",\n      });\n    })\n    .catch((err) => {\n      setTimeout(getAPY, 500);\n      console.log(\"Catch-getAPY--\", err);\n    });\n}\nfunction getTVL() {\n  const url = `https://universe.kelpdao.xyz/rseth/tvl/?lrtToken`;\n  fetchData(url)\n    .then((res) => {\n      State.update({\n        TVL: res.body.usdTvl || \"-\",\n      });\n    })\n    .catch((err) => {\n      console.log(\"Catch-getTVL--\", err);\n    });\n}\nfunction getWithdrawList(tokenItem) {\n  let _userIndexs = generateArray(tokenItem.begin, tokenItem.end - 1);\n\n  const calls = _userIndexs.map((_index) => ({\n    address: WithdrawalContract,\n    name: \"getUserWithdrawalRequest\",\n    params: [tokenItem.asset, account, _index],\n  }));\n\n  return multicall({\n    abi: [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"address\", name: \"user\", type: \"address\" },\n          { internalType: \"uint256\", name: \"userIndex\", type: \"uint256\" },\n        ],\n        name: \"getUserWithdrawalRequest\",\n        outputs: [\n          { internalType: \"uint256\", name: \"rsETHAmount\", type: \"uint256\" },\n          {\n            internalType: \"uint256\",\n            name: \"expectedAssetAmount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"withdrawalStartBlock\",\n            type: \"uint256\",\n          },\n          { internalType: \"uint256\", name: \"userNonce\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  });\n}\n\nfunction generateArray(start, end) {\n  return Array.from(new Array(end + 1).keys()).slice(start);\n}\nfunction getUserAssociatedNonces(_tokens) {\n  const calls = _tokens.map((token) => ({\n    address: WithdrawalContract,\n    name: \"userAssociatedNonces\",\n    params: [token.address, account],\n  }));\n\n  multicall({\n    abi: [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"asset\", type: \"address\" },\n          { internalType: \"address\", name: \"user\", type: \"address\" },\n        ],\n        name: \"userAssociatedNonces\",\n        outputs: [\n          { internalType: \"uint128\", name: \"_begin\", type: \"uint128\" },\n          { internalType: \"uint128\", name: \"_end\", type: \"uint128\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      console.log(\"getUserAssociatedNonces--\", res);\n      let _withdrawData = {};\n      res.forEach((item, index) => {\n        if (item && item[1] - item[0] > 0) {\n          const [_begin, _end] = item;\n\n          _withdrawData[_tokens[index].address] = {\n            asset: _tokens[index].address,\n            symbol: _tokens[index].symbol,\n            begin: _begin.toNumber(),\n            end: _end.toNumber(),\n            canClaim: false,\n          };\n        }\n      });\n\n      return _withdrawData;\n    })\n    .then((_withdrawData) => {\n      if (Object.values(_withdrawData).length) {\n        Object.values(_withdrawData).forEach((item) => {\n          getWithdrawList(item).then((res) => {\n            _withdrawData[item.asset].list = res;\n\n            const _wl = res.map((wq) => ({\n              ...item,\n              list: wq,\n            }));\n\n            State.update((prev) => ({\n              ...prev,\n              withdrawList: [...prev.withdrawList, ..._wl],\n            }));\n          });\n        });\n      }\n    })\n    .catch((err) => {\n      console.log(\"getUserAssociatedNonces-error--\", err);\n    });\n}\n\nfunction getBlockNumber() {\n  return Ethers.provider()\n    .getBlockNumber()\n    .then((res) => {\n      return res;\n    })\n    .catch((err) => {\n      console.log(\"getBlockNumber-error--\", err);\n    });\n}\nfunction getWithdrawalDelayBlocks() {\n  const contract = new ethers.Contract(\n    WithdrawalContract,\n    [\n      {\n        inputs: [],\n        name: \"withdrawalDelayBlocks\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider()\n  );\n  return contract.withdrawalDelayBlocks();\n}\n\n// function formatList(_withdrawList) {\n\n// }\nuseEffect(() => {\n  let _withdrawList = [...state.withdrawList];\n  if (!_withdrawList.length) return;\n\n  console.log(\"withdrawList--\", _withdrawList);\n  getBlockNumber().then((_blockNumber) => {\n    for (let i = 0; i < _withdrawList.length; i++) {\n      const [\n        rsETHAmount,\n        expectedAssetAmount,\n        withdrawalStartBlock,\n        userNonce,\n      ] = _withdrawList[i].list;\n      _withdrawList[i].amount = formatUnits(expectedAssetAmount);\n      if (\n        Big(_blockNumber).gt(\n          Big(withdrawalStartBlock).plus(state.withdrawalDelayBlocks)\n        )\n      ) {\n        _withdrawList[i].canClaim = true;\n      }\n    }\n  });\n\n  console.log(\"-----\", _withdrawList);\n  State.update({\n    withdrawList: _withdrawList,\n  });\n}, [state.withdrawList]);\n\nfunction handleClaim(_tokenAddr) {\n  console.log(\"claim--\", _tokenAddr);\n  State.update({\n    claimLoading: true,\n  });\n\n  const contract = new ethers.Contract(\n    WithdrawalContract,\n    [\n      {\n        inputs: [{ internalType: \"address\", name: \"asset\", type: \"address\" }],\n        name: \"completeWithdrawal\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  contract\n    .completeWithdrawal(_tokenAddr)\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            claimLoading: false,\n            updater: Date.now(),\n          });\n          toast?.success({\n            title: \"Claim Successfully!\",\n            // text: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          State.update({\n            claimLoading: false,\n          });\n        });\n    })\n    .catch((err) => {\n      console.log(\"handleClaim-error--\", err);\n      State.update({\n        claimLoading: false,\n      });\n    });\n}\nuseEffect(() => {\n  getAPY();\n  getTVL();\n}, []);\n\nuseEffect(() => {\n  if (!state.curToken) return;\n\n  getExchangeRate(state.curToken).then((_rate) => {\n    State.update({\n      exchangeRate: _rate,\n    });\n  });\n\n  if (tab === \"Stake\") {\n    const _bal = StakeTokens.find(\n      (item) => item.symbol === state.curToken\n    ).balance;\n\n    State.update({\n      tokenBal: _bal,\n    });\n  }\n  if (tab === \"Withdraw\" && chainId === 1) {\n    getWithdrawalDelayBlocks()\n      .then((_blocks) => {\n        console.log(\"getWithdrawalDelayBlocks--\", _blocks);\n        State.update({\n          withdrawalDelayBlocks: _blocks.toString(),\n        });\n      })\n      .then(() => {\n        const _list = StakeTokens.filter((item) => item.symbol !== \"ETH\");\n        getUserAssociatedNonces(_list);\n      })\n      .catch((err) => {\n        console.log(\"getWithdrawalDelayBlocks-error--\", err);\n      });\n  }\n}, [state.curToken, tab, updater]);\n\n// rsETH balance\nfunction getTokenBalance() {\n  const contract = new ethers.Contract(\n    ExchangeToken.address,\n    [\n      {\n        inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ internalType: \"uint256\", name: \"value\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  contract\n    .balanceOf(account)\n    .then((_balance) => {\n      const _bal = formatUnits(_balance, ExchangeToken.decimals);\n      console.log(\"get-resETH-balance--\", _balance, balance);\n      State.update({\n        tokenBal: _bal,\n      });\n    })\n    .catch((err) => {\n      console.log(\"Catch-getTokenBalance-error--\", err);\n    });\n}\nuseEffect(() => {\n  // ethereum unstake\n  if (chainId !== 1) return;\n  if (tab === \"Unstake\") {\n    getTokenBalance();\n\n    const options = StakeTokens?.map((item) => ({\n      text: item.symbol,\n      value: item.symbol,\n    })).filter((item) => item.value !== \"ETH\");\n    State.update({\n      options,\n      curToken: options[0].value,\n    });\n  }\n}, [tab]);\n\nfunction handleTabChange() {\n  // const curTab = tab === \"Stake\" ? \"Unstake\" : \"Stake\";\n  // onChange(curTab);\n}\nfunction handleOpenWrap() {\n  State.update({\n    showDialog: true,\n  });\n}\nfunction handleCloseWrap() {\n  State.update({\n    showDialog: false,\n  });\n}\nconsole.log(\"STATE--\", state);\nreturn (\n  <div>\n    <StyledContainer>\n      <Wrapper>\n        <Summary>\n          <SummaryItem>\n            <div className=\"title\">TVL</div>\n            <div className=\"amount\">\n              $\n              <Widget\n                src=\"bluebiu.near/widget/Utils.FormatNumber\"\n                props={{\n                  number: state.TVL,\n                }}\n              />\n            </div>\n          </SummaryItem>\n          <SummaryItem>\n            <div className=\"title\">APY</div>\n            <div className=\"amount\">{state.APY}%</div>\n          </SummaryItem>\n        </Summary>\n        {(tab === \"Stake\" || tab === \"Unstake\") && (\n          <Content>\n            <BlurWrap>\n              {chainId !== 1 && (tab === \"Unstake\" || tab === \"Withdraw\") ? (\n                <Blur></Blur>\n              ) : null}\n\n              <Panel>\n                <div className=\"title\">\n                  {tab === \"Unstake\" ? \"Withdraw rsETH as\" : tab}\n                </div>\n                <div className=\"body\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"0\"\n                    value={state.stakeAmount}\n                    onChange={(ev) => {\n                      if (isNaN(Number(ev.target.value))) return;\n                      let amount = ev.target.value.replace(/\\s+/g, \"\");\n\n                      if (Big(amount || 0).gt(Big(state.tokenBal || 0))) {\n                        amount = Big(state.tokenBal || 0).toFixed(4, 0);\n                      }\n                      State.update({\n                        stakeAmount: amount,\n                      });\n                    }}\n                  />\n                  <Widget\n                    src=\"bluebiu.near/widget/UI.Select.Index\"\n                    props={{\n                      options: state.options,\n                      value: state.options.find(\n                        (obj) => obj.value === state.curToken\n                      ),\n                      onChange: (option) => {\n                        console.log(\"onchange--\", option);\n                        State.update({\n                          curToken: option.value,\n                        });\n                      },\n                    }}\n                  />\n                </div>\n                <div className=\"foot\">\n                  <div class=\"prices\">\n                    $\n                    {Big(state.stakeAmount || 0)\n                      .times(Big(prices[state.curToken] || 1))\n                      .toFixed(2, 0)}\n                  </div>\n                  <div class=\"balance\">\n                    Balance:\n                    <Widget\n                      src=\"bluebiu.near/widget/Staking.Kelp.Balance\"\n                      props={{\n                        value: state.tokenBal,\n                        digit: 4,\n                        onClick: clickBalance,\n                        symbol:\n                          tab === \"Stake\"\n                            ? state.curToken\n                            : ExchangeToken.symbol,\n                      }}\n                    />\n                  </div>\n                </div>\n              </Panel>\n              <List>\n                <span className=\"keys\">You will get</span>\n                <span className=\"values\">\n                  {Big(state.stakeAmount || 0)\n                    .div(state.exchangeRate || 1)\n                    .toFixed(4, 0)}{\" \"}\n                  {tab === \"Stake\" ? ExchangeToken.symbol : state.curToken}\n                </span>\n              </List>\n              <List>\n                <span className=\"keys\">Exchange rate</span>\n                <span className=\"values\">\n                  1 {ExchangeToken?.symbol} ={\" \"}\n                  {Big(state.exchangeRate || 0).toFixed(4, 0)} {state.curToken}\n                  {/* {tab === \"Stake\" ? ExchangeToken.symbol : state.curToken} */}\n                </span>\n              </List>\n            </BlurWrap>\n            <Widget\n              src=\"bluebiu.near/widget/Staking.Kelp.Button\"\n              props={{\n                ...props,\n                actionText: tab,\n                amount: state.stakeAmount,\n                curToken: state.curToken,\n                stakeToken: StakeTokens\n                  ? StakeTokens.find((item) => item.symbol === state.curToken)\n                  : {},\n                onSuccess: () => {\n                  State.update({ loading: true, stakeAmount: \"\" });\n                },\n              }}\n            />\n\n            <BtnWrap>\n              {[59144, 34443].includes(chainId) && (\n                <Btn onClick={handleOpenWrap}>Wrap</Btn>\n              )}\n\n              {/* <Btn onClick={handleTabChange}>\n              {tab === \"Stake\" ? \"Stake\" : \"Unstake\"}\n            </Btn> */}\n            </BtnWrap>\n          </Content>\n        )}\n\n        {tab === \"Withdraw\" && (\n          <WithdrawWrap>\n            <BlurWrap>\n              {chainId !== 1 && (tab === \"Unstake\" || tab === \"Withdraw\") ? (\n                <Blur></Blur>\n              ) : null}\n              {state.withdrawList.length ? (\n                <>\n                  <div className=\"withdraw-title\">AMOUNT</div>\n                  <div className=\"withdraw-list\">\n                    {state.withdrawList.map((item) => (\n                      <div className=\"withdraw-item\">\n                        <span className=\"withdraw-amount\">\n                          {Number(item.amount).toFixed(6)} {item.symbol}\n                        </span>\n                        {item.canClaim ? (\n                          <ClaimBtn onClick={(e) => handleClaim(item.asset)}>\n                            {state.claimLoading ? (\n                              <Widget\n                                src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n                                props={{\n                                  size: 16,\n                                }}\n                              />\n                            ) : (\n                              \"Claim\"\n                            )}\n                          </ClaimBtn>\n                        ) : (\n                          <span>~in 7 - 10 days</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              ) : (\n                <div className=\"empty\">\n                  <div className=\"empty-title\">No unstake requests found</div>\n                  <div className=\"empty-txt\">\n                    You will be able to claim your tokens after the Unstake\n                    request has been processed. To Unstake your tokens go to\n                    Unstake tab\n                  </div>\n                </div>\n              )}\n            </BlurWrap>\n            <Widget\n              src=\"bluebiu.near/widget/Staking.Kelp.SwitchBtn\"\n              props={{\n                ...props,\n                actionText: tab,\n                // onSuccess: () => {\n                //   State.update({ loading: true, stakeAmount: \"\" });\n                // },\n              }}\n            />\n          </WithdrawWrap>\n        )}\n      </Wrapper>\n\n      {/* {state.loading && <Widget src=\"bluebiu.near/widget/Lending.Spinner\" />} */}\n      {state.showDialog && (\n        <Widget\n          src={\"bluebiu.near/widget/Wrap.Index\"}\n          props={{\n            account,\n            toast,\n            chainId,\n            addAction,\n            SYMBOL_ADDRESS,\n            tokenPairs,\n            onCloseWrap: handleCloseWrap,\n            multicall,\n            multicallAddress,\n            dexConfig,\n          }}\n        />\n      )}\n    </StyledContainer>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Kelp.Content", "fact_widget_deployments_id": "981c92130dd6739860a63ad3aa7c4c42", "inserted_timestamp": "2024-05-31T12:49:05.860Z", "modified_timestamp": "2024-05-31T12:49:05.860Z", "__row_index": 12}