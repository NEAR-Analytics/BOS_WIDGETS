{"tx_hash": "5oJ4EBibwahiuCeESeUunxTufFvadr4nVLhKdiNqEf3b", "action_id_social": "DYTEsJzLjNiwnbebBTn4bxRspgUN8w4WrD1pJtrYBrJZ-0-widget", "block_id": 116675750, "block_timestamp": "2024-04-12T09:55:28.697Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Swap.SwapButton", "source_code": "const SwapButtonConnectWrapper = styled.button`\n  border: none;\n  width: 100%;\n  background: transparent;\n\n  .connect-button {\n    width: 100%;\n    height: 60px;\n    border-radius: 10px;\n    font-size: 18px;\n    line-height: 22px;\n    border: none;\n    transition: 0.5s;\n    cursor: pointer;\n    font-weight: 700;\n    background: var(--button-color);\n    color: var(--button-text-color);\n    :hover {\n      opacity: 0.8;\n    }\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n    @media (max-width: 900px) {\n      height: 40px;\n      font-size: 16px;\n    }\n  }\n`;\n\nconst SwapButton = styled.button`\n  width: 100%;\n  height: 60px;\n  border-radius: 10px;\n  font-size: 18px;\n  line-height: 22px;\n  background: var(--button-color);\n  color: var(--button-text-color);\n  border: none;\n  transition: 0.5s;\n  cursor: pointer;\n  font-weight: 700;\n  :hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n  @media (max-width: 900px) {\n    height: 40px;\n    font-size: 16px;\n  }\n`;\n\nconst {\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  outputCurrencyAmount,\n  maxInputBalance,\n  onSuccess,\n  addAction,\n  toast,\n  routerAddress,\n  wethAddress,\n  title,\n  chainId,\n  unsignedTx,\n  gas,\n  onApprovedSuccess,\n  chainIdNotSupport,\n  onSwitchChain,\n  switchingChain,\n  account,\n} = props;\n\nif (!account) {\n  return (\n    <SwapButtonConnectWrapper>\n      <Web3Connect className=\"connect-button\" connectLabel=\"Connect Wallet\" />\n    </SwapButtonConnectWrapper>\n  );\n}\nif (props.chainIdNotSupport) {\n  return (\n    <SwapButton\n      disabled={!onSwitchChain}\n      onClick={() => {\n        onSwitchChain({\n          chainId: `0x${Number(chainId).toString(16)}`,\n        });\n      }}\n    >\n      {switchingChain ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Switch Network\"\n      )}\n    </SwapButton>\n  );\n}\n\nif (Big(inputCurrencyAmount || 0).eq(0)) {\n  return <SwapButton disabled>Enter An Amount</SwapButton>;\n}\nif (!inputCurrency || !outputCurrency) {\n  return <SwapButton disabled>Select a token</SwapButton>;\n}\nif (props.loading) {\n  return (\n    <SwapButton disabled>\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    </SwapButton>\n  );\n}\n\nif (Big(outputCurrencyAmount || 0).lt(\"0.00000000001\")) {\n  return <SwapButton disabled>Insufficient Liquidity</SwapButton>;\n}\nif (Big(inputCurrencyAmount || 0).gt(maxInputBalance || 0)) {\n  return (\n    <SwapButton disabled>\n      Insufficient {inputCurrency?.symbol} Balance\n    </SwapButton>\n  );\n}\n\nif (props.noPair) {\n  return <SwapButton disabled>Insufficient Liquidity</SwapButton>;\n}\n\nState.init({\n  isApproved: false,\n  approving: false,\n  swapping: false,\n  wrapping: false,\n  isGasEnough: true,\n});\n\nconst getAllowance = () => {\n  const TokenContract = new ethers.Contract(\n    inputCurrency.address,\n    [\n      {\n        constant: true,\n        inputs: [\n          {\n            name: \"_owner\",\n            type: \"address\",\n          },\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n        ],\n        name: \"allowance\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"uint256\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, routerAddress).then((allowanceRaw) => {\n    State.update({\n      isApproved: !Big(\n        ethers.utils.formatUnits(allowanceRaw._hex, inputCurrency.decimals)\n      ).lt(inputCurrencyAmount),\n    });\n  });\n};\n\nif (!inputCurrency.isNative) {\n  getAllowance();\n} else {\n  State.update({ isApproved: true });\n}\n\nconst wrapType =\n  inputCurrency.isNative && outputCurrency.address === wethAddress\n    ? 1\n    : inputCurrency.address === wethAddress && outputCurrency.isNative\n    ? 2\n    : 0;\n\nconst handleApprove = () => {\n  const toastId = toast?.loading({\n    title: `Approve ${inputCurrencyAmount} ${inputCurrency.symbol}`,\n  });\n  State.update({\n    approving: true,\n  });\n  const TokenContract = new ethers.Contract(\n    inputCurrency.address,\n    [\n      {\n        constant: false,\n        inputs: [\n          {\n            name: \"_spender\",\n            type: \"address\",\n          },\n          {\n            name: \"_value\",\n            type: \"uint256\",\n          },\n        ],\n        name: \"approve\",\n        outputs: [\n          {\n            name: \"\",\n            type: \"bool\",\n          },\n        ],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  TokenContract.approve(\n    routerAddress,\n    ethers.utils.parseUnits(\n      Big(inputCurrencyAmount).toFixed(inputCurrency.decimals).toString(),\n      inputCurrency.decimals\n    )\n  )\n    .then((tx) => {\n      tx.wait().then((res) => {\n        const { status, transactionHash } = res;\n        toast?.dismiss(toastId);\n        if (status !== 1) throw new Error(\"\");\n        State.update({\n          isApproved: true,\n          approving: false,\n        });\n        toast?.success({\n          title: \"Approve Successfully!\",\n          text: `Approved ${inputCurrencyAmount} ${inputCurrency.symbol}`,\n          tx: transactionHash,\n          chainId,\n        });\n        onApprovedSuccess();\n      });\n    })\n    .catch((err) => {\n      State.update({\n        approving: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: \"Approve Failed!\",\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : `Approved ${inputCurrencyAmount} ${inputCurrency.symbol}`,\n      });\n    });\n};\n\nif (!state.isApproved && wrapType === 0) {\n  return (\n    <SwapButton onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \" Approve\"\n      )}\n    </SwapButton>\n  );\n}\nfunction successCallback(tx, callback) {\n  tx.wait()\n    .then((res) => {\n      const { status, transactionHash } = res;\n      addAction?.({\n        type: \"Swap\",\n        inputCurrencyAmount,\n        inputCurrency,\n        outputCurrencyAmount,\n        outputCurrency,\n        template: title,\n        status,\n        transactionHash,\n        add: props.add,\n        token_in_currency: {\n          address: inputCurrency?.address,\n          symbol: inputCurrency?.symbol,\n          decimals: inputCurrency?.decimals,\n        },\n        token_out_currency: {\n          address: outputCurrency?.address,\n          symbol: outputCurrency?.symbol,\n          decimals: outputCurrency?.decimals,\n        },\n      });\n      toast?.dismiss(state.toastId);\n      if (status !== 1) throw new Error(\"\");\n      onSuccess?.();\n      callback?.();\n      toast?.success({\n        title: \"Swap Successfully!\",\n        text: `Swaped ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}`,\n        tx: transactionHash,\n        chainId,\n      });\n    })\n    .catch((err) => {\n      toast?.dismiss(state.toastId);\n      toast?.fail({\n        title: \"Swap Failed!\",\n        text: `Swaped ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}`,\n        tx: transactionHash,\n        chainId,\n      });\n      callback?.();\n    });\n}\n\nconst handleWrap = (type, success, onError) => {\n  const WethContract = new ethers.Contract(\n    wethAddress,\n    [\n      {\n        constant: false,\n        inputs: [],\n        name: \"deposit\",\n        outputs: [],\n        payable: true,\n        stateMutability: \"payable\",\n        type: \"function\",\n      },\n      {\n        constant: false,\n        inputs: [{ internalType: \"uint256\", name: \"wad\", type: \"uint256\" }],\n        name: \"withdraw\",\n        outputs: [],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  if (type === 1) {\n    WethContract.deposit({\n      value: ethers.utils.parseEther(\n        Big(inputCurrencyAmount).toFixed(18).toString()\n      ),\n    })\n      .then((tx) => {\n        success?.(tx);\n      })\n      .catch((err) => {\n        onError?.(err);\n      });\n  } else {\n    WethContract.withdraw(\n      ethers.utils.parseEther(Big(inputCurrencyAmount).toFixed(18).toString())\n    )\n      .then((tx) => {\n        success?.(tx);\n      })\n      .catch((err) => {\n        onError?.(err);\n      });\n  }\n};\n\nif (wrapType) {\n  return (\n    <SwapButton\n      onClick={() => {\n        const toastId = toast?.loading({\n          title: `Swap ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}`,\n        });\n        State.update({\n          wrapping: true,\n          toastId,\n        });\n        handleWrap(\n          wrapType,\n          (res) => {\n            successCallback(res, () => {\n              State.update({ wrapping: false });\n            });\n          },\n          (err) => {\n            State.update({\n              wrapping: false,\n            });\n            toast?.dismiss(toastId);\n            toast?.fail({\n              title: \"Swap Failed!\",\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : `Swaped ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}`,\n            });\n          }\n        );\n      }}\n      disabled={state.wrapping}\n    >\n      {wrapType === 1 ? (\n        state.wrapping ? (\n          <Widget\n            src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n            props={{\n              size: 16,\n            }}\n          />\n        ) : (\n          \"Wrap\"\n        )\n      ) : state.wrapping ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Unwrap\"\n      )}\n    </SwapButton>\n  );\n}\n\nuseEffect(() => {\n  if (!account) return;\n  const provider = Ethers.provider();\n  let baseAmount = Big(0);\n  if (inputCurrency.isNative) {\n    baseAmount = baseAmount.add(inputCurrencyAmount || 0);\n  }\n  State.update({ swapping: true });\n  provider.getGasPrice().then((gasPrice) => {\n    provider.getBalance(account).then((rawBalance) => {\n      const _gas = Big(ethers.utils.formatUnits(gas || 0, 18)).mul(gasPrice);\n      const _rawBalance = Big(ethers.utils.formatUnits(rawBalance, 18));\n      State.update({\n        isGasEnough: _rawBalance.minus(baseAmount).gt(_gas),\n        gas: _gas.lt(0.01) ? \"<0.01\" : _gas.toFixed(2),\n        swapping: false,\n      });\n    });\n  });\n}, [account, gas]);\n\nif (!state.isGasEnough) {\n  return (\n    <SwapButton disabled>{`Not enough gas(${state.gas}) needed`}</SwapButton>\n  );\n}\n\nif (gas === undefined && outputCurrencyAmount) {\n  return <SwapButton disabled>Estimate Gas Error</SwapButton>;\n}\n\nreturn (\n  <>\n    <SwapButton\n      onClick={() => {\n        const toastId = toast?.loading({\n          title: `Swap ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}`,\n        });\n        State.update({ swapping: true });\n        Ethers.provider()\n          .getSigner()\n          .sendTransaction(unsignedTx)\n          .then((tx) => {\n            successCallback(tx, () => {\n              State.update({ swapping: false });\n            });\n          })\n          .catch((err) => {\n            State.update({ swapping: false });\n            toast?.dismiss(toastId);\n            toast?.fail({\n              title: \"Swap Failed!\",\n              text: err?.message?.includes(\"user rejected transaction\")\n                ? \"User rejected transaction\"\n                : `Swaped ${inputCurrencyAmount} ${inputCurrency.symbol} to ${outputCurrency.symbol}`,\n            });\n          });\n      }}\n      disabled={state.swapping || !state.isGasEnough}\n    >\n      {state.swapping ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Swap\"\n      )}\n    </SwapButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Swap.SwapButton", "fact_widget_deployments_id": "7b9c33ead4de2edbc4a14097b862cc46", "inserted_timestamp": "2024-04-12T11:35:20.004Z", "modified_timestamp": "2024-04-12T11:35:20.004Z", "__row_index": 17}