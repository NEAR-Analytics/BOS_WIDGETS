{"tx_hash": "AZuTS1SsKQZ96h5oxVzhh5D1oev8V6jZBWrwTfPEc31e", "action_id_social": "Fo5dGBi9RA2BWu84EsbzA9yXzr2QJ3e6hnhqhSBxu9u9-0-widget", "block_id": 101541011, "block_timestamp": "2023-09-20T09:36:52.702Z", "signer_id": "bluebiu.near", "widget_name": "Linea.Swap.HandlerV3", "source_code": "const swapRouterV3Abi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"_factory\", type: \"address\" },\n      { internalType: \"address\", name: \"_WETH\", type: \"address\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"factory\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"results\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"refundEth\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"int256\", name: \"deltaQty0\", type: \"int256\" },\n      { internalType: \"int256\", name: \"deltaQty1\", type: \"int256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"swapCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"bytes\", name: \"path\", type: \"bytes\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"minAmountOut\", type: \"uint256\" },\n        ],\n        internalType: \"struct IRouter.ExactInputParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapExactInput\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"minAmountOut\", type: \"uint256\" },\n          { internalType: \"uint160\", name: \"limitSqrtP\", type: \"uint160\" },\n        ],\n        internalType: \"struct IRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapExactInputSingle\",\n    outputs: [{ internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"bytes\", name: \"path\", type: \"bytes\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"maxAmountIn\", type: \"uint256\" },\n        ],\n        internalType: \"struct IRouter.ExactOutputParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapExactOutput\",\n    outputs: [{ internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          { internalType: \"address\", name: \"recipient\", type: \"address\" },\n          { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"maxAmountIn\", type: \"uint256\" },\n          { internalType: \"uint160\", name: \"limitSqrtP\", type: \"uint160\" },\n        ],\n        internalType: \"struct IRouter.ExactOutputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapExactOutputSingle\",\n    outputs: [{ internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"token\", type: \"address\" },\n      { internalType: \"uint256\", name: \"minAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"transferAllTokens\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"token\", type: \"address\" },\n      { internalType: \"uint256\", name: \"minAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n      { internalType: \"uint256\", name: \"feeUnits\", type: \"uint256\" },\n      { internalType: \"address\", name: \"feeRecipient\", type: \"address\" },\n    ],\n    name: \"transferAllTokensWithFee\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"minAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWeth\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"minAmount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n      { internalType: \"uint256\", name: \"feeUnits\", type: \"uint256\" },\n      { internalType: \"address\", name: \"feeRecipient\", type: \"address\" },\n    ],\n    name: \"unwrapWethWithFee\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  { stateMutability: \"payable\", type: \"receive\" },\n];\n\nconst swapRouterIziAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_factory\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_weth\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"WETH9\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"factory\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenX\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenY\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint24\",\n        name: \"fee\",\n        type: \"uint24\",\n      },\n    ],\n    name: \"pool\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"refundETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapAmountParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cost\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"acquire\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"path\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"desire\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapDesireParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapDesire\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"cost\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"acquire\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapX2Y\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"swapX2YCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapX2YDesireY\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapY2X\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"swapY2XCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenX\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenY\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"int24\",\n            name: \"boundaryPt\",\n            type: \"int24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint128\",\n            name: \"amount\",\n            type: \"uint128\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxPayed\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minAcquired\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Swap.SwapParams\",\n        name: \"swapParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapY2XDesireX\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"sweepToken\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"minAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst {\n  routerAddress,\n  wethAddress,\n  account,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrency,\n  fee,\n  swapping,\n  onSuccess,\n  onError,\n} = props;\nif (!swapping) return;\n\nconst expandToken = (value, decimals) => {\n  return new Big(value).mul(new Big(10).pow(decimals));\n};\nconst value = expandToken(inputCurrencyAmount, inputCurrency.decimals).toFixed(\n  0\n);\n\nconst iziRouter = \"0x032b241De86a8660f1Ae0691a4760B426EA246d7\";\nconst signer = Ethers.provider().getSigner();\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst caller = () => {\n  const abi = swapRouterV3Abi;\n  const iface = new ethers.utils.Interface(abi);\n\n  const deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\n  const tokenIn =\n    inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\n  const tokenOut =\n    outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\n  const options = {\n    gasLimit: 5000000,\n    value: inputCurrency.address === \"native\" ? value : \"0\",\n  };\n\n  const inputs = [\n    {\n      tokenIn,\n      tokenOut,\n      fee: fee,\n      recipient: outputCurrency.address === \"native\" ? ZERO_ADDRESS : account,\n      deadline: deadline.toFixed(),\n      amountIn: value,\n      minAmountOut: \"0\",\n      limitSqrtP: \"0\",\n    },\n  ];\n\n  const multicallParams = [];\n  const encodedDataCallSwap = iface.encodeFunctionData(\n    \"swapExactInputSingle\",\n    inputs\n  );\n\n  multicallParams.push(encodedDataCallSwap);\n\n  if (outputCurrency.address === \"native\") {\n    multicallParams.push(\n      iface.encodeFunctionData(\"unwrapWeth\", [\"0\", account])\n    );\n  }\n  const multicallContract = new ethers.Contract(routerAddress, abi, signer);\n\n  multicallContract\n    .multicall(multicallParams, options)\n    .then((res) => {\n      onSuccess(res);\n    })\n    .catch((err) => {\n      console.log(err);\n      onError(err);\n    });\n};\n\nconst callerIzi = () => {\n  const deadline = new Big(Math.floor(Date.now() / 1000)).add(new Big(1800));\n\n  const abi = swapRouterIziAbi;\n\n  const iface = new ethers.utils.Interface(abi);\n\n  const tokenInAddress =\n    inputCurrency.address === \"native\" ? wethAddress : inputCurrency.address;\n\n  const tokenOutAddress =\n    outputCurrency.address === \"native\" ? wethAddress : outputCurrency.address;\n\n  const isX2Y = tokenInAddress.toLowerCase() < tokenOutAddress.toLowerCase();\n  const boundaryPt = isX2Y ? -799999 : 799999;\n\n  const multicallParams = [];\n\n  const parsedAmountIn = ethers.utils.parseUnits(\n    inputCurrencyAmount,\n    inputCurrency.decimals\n  );\n\n  const options = {\n    from: account,\n    value: \"0\",\n  };\n\n  if (inputCurrency.address === \"native\") {\n    options.value = parsedAmountIn;\n  }\n\n  if (isX2Y) {\n    const inputs = [\n      {\n        tokenX: tokenInAddress,\n        tokenY: tokenOutAddress,\n        fee: fee,\n        boundaryPt: boundaryPt,\n        recipient: outputCurrency.address === \"native\" ? ZERO_ADDRESS : account,\n        amount: parsedAmountIn,\n        maxPayed: \"0\",\n        minAcquired: \"0\",\n        deadline: deadline.toFixed(),\n      },\n    ];\n    const encodedDataCallSwap = iface.encodeFunctionData(\"swapX2Y\", inputs);\n\n    multicallParams.push(encodedDataCallSwap);\n  } else {\n    const inputs = [\n      {\n        tokenX: tokenOutAddress,\n        tokenY: tokenInAddress,\n        fee: fee,\n        boundaryPt: boundaryPt,\n        recipient: outputCurrency.address === \"native\" ? ZERO_ADDRESS : account,\n        amount: parsedAmountIn,\n        maxPayed: \"0\",\n        minAcquired: \"0\",\n        deadline: deadline.toFixed(),\n      },\n    ];\n    const encodedDataCallSwap = iface.encodeFunctionData(\"swapY2X\", inputs);\n\n    multicallParams.push(encodedDataCallSwap);\n  }\n\n  if (inputCurrency.address === \"native\") {\n    multicallParams.push(iface.encodeFunctionData(\"refundETH\", []));\n  }\n\n  if (outputCurrency.address === \"native\") {\n    multicallParams.push(\n      iface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account])\n    );\n  }\n\n  const multicallContract = new ethers.Contract(routerAddress, abi, signer);\n\n  multicallContract\n    .multicall(multicallParams, options)\n    .then((res) => {\n      onSuccess(res);\n    })\n    .catch((err) => {\n      onError(err);\n    });\n};\n\nif (routerAddress === iziRouter) {\n  callerIzi();\n} else {\n  caller();\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Linea.Swap.HandlerV3", "fact_widget_deployments_id": "1ee3482e67ef892676faeb95ba2ec7f3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}