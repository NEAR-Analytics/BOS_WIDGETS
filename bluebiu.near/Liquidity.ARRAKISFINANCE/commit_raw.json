{"tx_hash": "6ZMvRN6RBTUrGU9GDwgPDrsU53NkK24YApis4UrfEBRZ", "action_id_social": "G6HRLWeYRJAmvNoPnB8H25Dta7fyk8NqT2YSSm3VBfML-0-widget", "block_id": 112164992, "block_timestamp": "2024-02-05T14:31:07.130Z", "signer_id": "bluebiu.near", "widget_name": "Liquidity.ARRAKISFINANCE", "source_code": "\nconst StyledColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst StyledRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst StyledVaultImage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  img {\n    width: 26px;\n    border-radius: 50%;\n  }\n`\nconst SvgIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &.icon-right {\n    position: absolute;\n    right: 28px;\n    top: 50%;\n    transform: translateY(-50%);\n\n    &.rotate {\n      transform: translateY(-50%) rotate(90deg);\n    }\n  }\n`\nconst TdTxt = styled.div`\n  color: #FFF;\n  font-family: Gantari;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  &.gray {\n    color: #979ABE;\n    font-size: 12px;\n  }\n`\nconst PoolPercentage = styled.div`\n  padding: 3px 8px;\n  border-radius: 24px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\n\nconst StrategyTxt = styled.div`\n  padding: 7px 10px;\n  border-radius: 6px;\n  background: rgba(151, 154, 190, 0.1);\n  color: #979ABE;\n  font-family: Gantari;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n`\nconst TitleText = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 32px;\n  color: #ffffff;\n  @media (max-width: 900px) {\n    display: none;\n  }\n`;\nconst ContainerLogin = styled.div`\n  display: flex;\n  max-width: 500px;\n\n  flex-direction: column;\n  margin: 80px auto auto auto;\n\n  .web3-connect {\n    width: 480px;\n    height: 60px;\n    border-radius: 10px;\n    background-color: #fff;\n    color: #0f1126;\n    font-size: 18px;\n    font-weight: 500;\n    border: none;\n    margin-top: 20px;\n  }\n\n  @media (max-width: 736px) {\n    max-width: 100%;\n    .web3-connect {\n      width: 100%;\n\n      font-size: 16px;\n      height: 40px;\n    }\n  }\n`;\nState.init({\n  allData: null,\n  loading: false,\n  dataList: [],\n  filterList: [],\n  dataIndex: -1,\n  categoryIndex: 0,\n  chainIndex: 0,\n  token: '',\n})\nconst IconRight = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"8\" height=\"10\" viewBox=\"0 0 8 10\" fill=\"none\">\n    <path d=\"M7.18407 4.21913C7.68448 4.61945 7.68448 5.38054 7.18407 5.78087L2.28485 9.70024C1.63009 10.2241 0.660156 9.75788 0.660156 8.91937L0.660156 1.08062C0.660156 0.242118 1.63009 -0.224055 2.28485 0.299756L7.18407 4.21913Z\" fill=\"#979ABE\" />\n  </svg>\n)\nconst {\n  CHAIN_LIST,\n  multicallAddress,\n  dexConfig,\n  curChain,\n  isChainSupported,\n  onSwitchChain,\n  prices\n} = {\n  chainId: 59144,\n  name: 'Arrakis',\n  CHAIN_LIST: [\n    {\n      tag: 'optimism',\n      native_currency:\n        '{\"name\":\"OP\",\"symbol\":\"Optimism\",\"decimals\":18,\"logo\":\"https://s3.amazonaws.com/dapdap.test/images/image520.png\"}',\n      tbd_token: 'N',\n      rpc: '[\"https://mainnet.optimism.io\"]',\n      block_explorer: 'https://optimistic.etherscan.io',\n      show: true,\n      created_at: '2023-12-06T10:31:28.760000+00:00',\n      description:\n        'OP Mainnet is an EVM-equivalent Optimistic Rollup chain. It aims to be fast, simple, and secure. With the Nov 2021 upgrade to OVM 2.0 old fraud proof system has been disabled while the new fraud-proof system is being built.',\n      logo: 'https://s3.amazonaws.com/dapdap.test/images/optimism.png',\n      technology: 'Optimistic Rollup',\n      id: 13,\n      milestones:\n        '[{\"title\":\"Optimism mainnet Bedrock upgrade has entered the consensus and function freezing stage\",\"url\":\"\",\"date\":\"2023 Apr 29th\"},{\"title\":\"Optimism will undergo Optimism Goerli hard fork upgrade\",\"url\":\"\",\"date\":\"2023 Mar 18th\"}]',\n      sub_description:\n        'OP Mainnet is an EVM-equivalent Optimistic Rollup. It aims to be fast, simple, and secure.',\n      chain_id: 10,\n      deepdive: false,\n      priority: 7,\n      updated_at: '2024-01-31T13:17:25+00:00',\n      name: 'Optimism'\n    }\n  ],\n  curChain: {\n    tag: 'optimism',\n    native_currency:\n      '{\"name\":\"OP\",\"symbol\":\"Optimism\",\"decimals\":18,\"logo\":\"https://s3.amazonaws.com/dapdap.test/images/image520.png\"}',\n    tbd_token: 'N',\n    rpc: '[\"https://mainnet.optimism.io\"]',\n    block_explorer: 'https://optimistic.etherscan.io',\n    show: true,\n    created_at: '2023-12-06T10:31:28.760000+00:00',\n    description:\n      'OP Mainnet is an EVM-equivalent Optimistic Rollup chain. It aims to be fast, simple, and secure. With the Nov 2021 upgrade to OVM 2.0 old fraud proof system has been disabled while the new fraud-proof system is being built.',\n    logo: 'https://s3.amazonaws.com/dapdap.test/images/optimism.png',\n    technology: 'Optimistic Rollup',\n    id: 13,\n    milestones:\n      '[{\"title\":\"Optimism mainnet Bedrock upgrade has entered the consensus and function freezing stage\",\"url\":\"\",\"date\":\"2023 Apr 29th\"},{\"title\":\"Optimism will undergo Optimism Goerli hard fork upgrade\",\"url\":\"\",\"date\":\"2023 Mar 18th\"}]',\n    sub_description:\n      'OP Mainnet is an EVM-equivalent Optimistic Rollup. It aims to be fast, simple, and secure.',\n    chain_id: 10,\n    deepdive: false,\n    priority: 7,\n    updated_at: '2024-01-31T13:17:25+00:00',\n    name: 'Optimism'\n  },\n  defaultDex: 'Arrakis',\n  id: 99,\n  created_at: '2024-02-03T13:31:05.963000+00:00',\n  updated_at: '2024-02-03T13:31:05.963000+00:00',\n  description: '',\n  route: '/dapp/arrakis-finance',\n  logo: '',\n  favorite: 0,\n  default_chain_id: 10,\n  priority: 0,\n  tbd_token: 'N',\n  recommend: false,\n  recommend_icon: '',\n  category_ids: [4],\n  network_ids: [13],\n  tag: '',\n  native_currency: '{\"name\":\"\",\"symbol\":\"\",\"decimals\":0,\"logo\":\"\"}',\n  theme: {\n    bridge: {\n      background: 'rgba(169, 51, 51, 0.15)',\n      color: 'rgba(169, 51, 51, 1)'\n    }\n  },\n  dapp_network: [\n    {\n      dapp_id: 99,\n      network_id: 13,\n      chain_id: 10,\n      dapp_src: '/bluebiu.near/widget/Liquidity.ARRAKISFINANCE'\n    }\n  ],\n  wethAddress: '0x4200000000000000000000000000000000000006',\n  multicallAddress: '0xD9bfE9979e9CA4b2fe84bA5d4Cf963bBcB376974',\n  dexConfig: {\n    name: 'arrakis-finance',\n    logo:\n      'https://ipfs.near.social/ipfs/bafkreibgmu62fb5o3n3s54srlzyf7ppn2c42racp5q3gnukcjgkfwkzuse',\n    amountOutFn: 'bluebiu.near/widget/Liquidity.ARRAKISFINANCE',\n    ICON_VAULT_MAP: {\n      THALES:\n        'https://assets.dex.guru/icons/0x217d47011b23bb961eb6d93ca9945b7501a5bb11-optimism.png',\n      WETH:\n        'https://assets.dex.guru/icons/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2-eth.png',\n      HAN:\n        'https://raw.githubusercontent.com/hanchain-paykhan/hanchain/3058eecc5d26f980db884f1318da6c4de18a7aea/logo/logo.svg',\n      OP:\n        'https://assets.dex.guru/icons/0x4200000000000000000000000000000000000042-optimism.png',\n      LYRA:\n        'https://assets.dex.guru/icons/0x50c5725949a6f0c72e6c4a641f24049a917db0cb-optimism.png'\n    },\n    ALL_DATA_URL:\n      'https://indexer.api.arrakis.finance/api/vault/all?version=V1&networks=optimism&sortDirection=desc&sort=tvl',\n    pairs: [\n      {\n        id: 'THALES/WETH',\n        strategy: 'LST (volatile)',\n        strategy2: '',\n        token0: 'THALES',\n        token1: 'WETH'\n      },\n      {\n        id: 'WETH/HAN',\n        strategy: 'LST (volatile)',\n        strategy2: '',\n        token0: 'WETH',\n        token1: 'HAN'\n      },\n      {\n        id: 'WETH/OP',\n        strategy: 'LST (volatile)',\n        strategy2: '',\n        token0: 'WETH',\n        token1: 'OP'\n      },\n      {\n        id: 'WETH/LYRA',\n        strategy: 'LST (volatile)',\n        strategy2: '',\n        token0: 'WETH',\n        token1: 'LYRA'\n      }\n    ],\n    addresses: {\n      THALES: '0x217d47011b23bb961eb6d93ca9945b7501a5bb11',\n      WETH: '0x4200000000000000000000000000000000000006',\n      HAN: '0x50bce64397c75488465253c0a034b8097fea6578',\n      OP: '0x4200000000000000000000000000000000000042',\n      LYRA: '0x50c5725949a6f0c72e6c4a641f24049a917db0cb',\n      'THALES/WETH': '0xac6705bc7f6a35eb194bdb89066049d6f1b0b1b5',\n      'WETH/HAN': '0x3fa8cee6795220ac25dd35d4d39ec306a3e4fb3f',\n      'WETH/OP': '0xd1dce56f7d8300d43d8b7d3b67650ddf9b2caf54',\n      'WETH/LYRA': '0x70535c46ce04181adf749f34b65b6365164d6b6e'\n    },\n    theme: {\n      '--button-color': '#783ae3',\n      '--button-text-color': '#FFFFFF'\n    }\n  },\n  prices: {\n    cbETH: '2440.840000000',\n    WETH: '2302.130000000',\n    ETH: '2302.390000000',\n    axlUSDC: '1.000000000',\n    BSWAP: '0.355883000',\n    DAI: '0.999928000',\n    USDbC: '1.000000000',\n    RCKT: '0.172588000',\n    BALD: '0.014691870',\n    BASE: '0.000000146',\n    SYNTH: '11.020000000',\n    MNT: '0.590952000',\n    USDT: '0.999369000',\n    WBTC: '42927.000000000',\n    WMNT: '0.590686000',\n    ARB: '1.770000000',\n    'USDC.e': '1.000000000',\n    USDC: '1.000000000',\n    FCTR: '0.107228000',\n    WINR: '0.081884000',\n    PENDLE: '2.940000000',\n    GMX: '43.180000000',\n    TROVE: '0.008517630',\n    JONES: '1.022000000',\n    SPARTA: '0.677578000',\n    GSWIFT: '0.503138000',\n    GRAIL: '1738.470000000',\n    BNB: '300.380000000',\n    WBNB: '300.320000000',\n    BTCB: '42972.000000000',\n    'BSC-USD': '0.179998000',\n    BUSD: '0.999175000',\n    BSW: '0.090289000',\n    BANANA: '0.000671880',\n    CHRP: '0.009934890',\n    CEEK: '0.047923770',\n    ORN: '0.798697000',\n    INJ: '33.260000000',\n    XDAI: '1.003000000',\n    GNO: '216.720000000',\n    WXDAI: '0.993363000',\n    DONUT: '0.012537380',\n    HNY: '8.800000000',\n    axlUSDT: '0.998115000',\n    HZN: '0.005038860',\n    iZi: '0.013164750',\n    METIS: '74.660000000',\n    'm.USDT': '0.999369000',\n    'm.USDC': '1.000000000',\n    MAIA: '26.820000000',\n    WMATIC: '0.783062000',\n    CASH: '0.998372000',\n    RETRO: '0.030918650',\n    SPACE: '0.076910000',\n    ceBNB: '300.380000000',\n    ceBUSD: '0.999175000',\n    NETT: '0.835828000',\n    PEAK: '0.000907160',\n    BYTE: '0.273091000',\n    HERA: '5.320000000',\n    agEUR: '1.083000000',\n    GUSD: '1.000000000',\n    LUSD: '0.998734000',\n    XSGD: '0.742725000',\n    CEUR: '1.079000000',\n    'BTC.b': '43022.000000000',\n    ankrBNB: '322.520000000',\n    frxETH: '2297.320000000',\n    BNBx: '323.020000000',\n    stkBNB: '312.060000000',\n    VC: '0.060023000',\n    WAIFU: '0.001355060',\n    LSD: '0.012081430',\n    USX: '1.091000000',\n    iUSD: '1.013000000',\n    rETH: '2526.040000000',\n    DVF: '0.598460000',\n    zkUSD: '1.001000000',\n    Matic: '0.782355000',\n    USDR: '0.649539000',\n    wUSDR: '0.699640000',\n    CVR: '0.103013000',\n    PEARL: '0.114975000',\n    MATIC: '0.782355000',\n    APE: '1.380000000',\n    HAPI: '23.170000000',\n    KNC: '0.590363000',\n    LDO: '2.770000000',\n    LINK: '17.940000000',\n    PEPE: '0.000000907',\n    SHIB: '0.000009090',\n    UNI: '6.110000000',\n    sDAI: '1.041000000',\n    wstETH: '2660.610000000',\n    crvUSD: '0.999989000',\n    AURA: '0.650528000',\n    BAL: '3.580000000',\n    staBAL3: '0.996142000',\n    COW: '0.338880000',\n    stEUR: '1.094000000',\n  },\n  switchingChain: false,\n  nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },\n  isChainSupported: false\n}\n\n\nconst formatFiat = (value) => {\n  const number = Number(value).toLocaleString(\"en\", {\n    currency: \"USD\",\n    style: \"currency\",\n    compactDisplay: \"short\",\n    notation: \"compact\",\n    maximumFractionDigits: 2,\n  });\n  return number;\n};\n\nconst formatPercent = (value) => {\n  return `${Number(value * 100).toLocaleString(\"en\", {\n    maximumFractionDigits: 2,\n  })}%`;\n};\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) {\n  return (\n    <Widget\n      src=\"bluebiu.near/widget/Linea.Liquidity.ConnectButton\"\n      props={{\n        ...CONNECT_PROPS,\n        isWrongNetwork: false,\n      }}\n    />\n  );\n} else {\n  const index = CHAIN_LIST.findIndex(chain => chain.id === curChain.id)\n  if (index > -1) {\n    State.update({\n      chainIndex: index,\n    })\n  }\n}\nconst {\n  pairs,\n  addresses,\n  ALL_DATA_URL,\n  ICON_VAULT_MAP,\n} = dexConfig\nfunction fetchAllData() {\n  State.update({\n    loading: true\n  });\n  asyncFetch(ALL_DATA_URL).then((res) => {\n    if (!res.ok) return;\n    const allData = {\n    }\n    res.body.vaults.forEach(data => {\n      allData[data.id] = data\n    })\n    State.update({\n      allData,\n      loading: false\n    })\n  })\n}\nfunction fetchUserData() {\n  asyncFetch(USER_DATA_BASE + `${sender}`).then((res) => {\n    if (!res.ok) return;\n    State.update({\n      userPositions: res.body[sender],\n    });\n  });\n};\nfunction handleChangeDataIndex(index) {\n  State.update({\n    dataIndex: state.dataIndex > -1 ? -1 : index\n  })\n}\nfunction handleChangeCategoryIndex(index) {\n  State.update({\n    categoryIndex: index\n  })\n}\nfunction handleChangeChainIndex(index) {\n  const chain = CHAIN_LIST[index]\n  onSwitchChain({\n    chainId: `0x${Number(chain.chain_id).toString(16)}`,\n  });\n  State.update({\n    allData: null,\n    dataList: [],\n    categoryIndex: 0,\n    userPositions: null\n  })\n}\nfunction handleSearchInput(event) {\n  State.update({\n    token: event.target.value\n  })\n}\nuseEffect(() => {\n  if (state.dataList) {\n    let filterList = []\n    if (state.categoryIndex === 0) {\n      filterList = state.dataList.filter(data => {\n        const source = data.id.toUpperCase()\n        const target = (state.token || '').toUpperCase()\n        return source.indexOf(target) > -1\n      })\n    } else if (state.categoryIndex === 1 && state.userPositions) {\n      state.dataList.forEach(data => {\n        if (userPositions && addresses[data.id] in userPositions) {\n          filterList.push(data)\n        }\n      })\n    }\n    State.update({\n      filterList\n    })\n  }\n}, [state.dataList, state.token, state.categoryIndex])\nif (!state.allData) {\n  fetchAllData()\n}\nif (sender && state.userPositions === undefined) {\n  fetchUserData();\n}\nconst columnList = [{\n  width: '40%',\n  key: 'pool',\n  label: 'Pool',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <>\n        <StyledVaultImage>\n          <img style={{ marginRight: -6 }} src={ICON_VAULT_MAP[data.token0]} alt={data.token0} />\n          <img src={ICON_VAULT_MAP[data.token1]} alt={data.token1} />\n        </StyledVaultImage>\n        <TdTxt>{data.token0} / {data.token1}</TdTxt>\n        <PoolPercentage>{data.fee}%</PoolPercentage>\n      </>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'chain',\n  label: 'Chain',\n  type: 'slot',\n  render: () => <img style={{ width: 26 }} src={curChain.logo} alt={curChain.name} />\n}, {\n  width: '15%',\n  key: 'strategy',\n  label: 'Strategy',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <StrategyTxt>{data.strategy2 ? data.strategy2 : data.strategy}</StrategyTxt>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'tvlUSD',\n  label: 'TVL',\n  type: 'slot',\n  render: (data) => {\n    return (\n      <TdTxt>{formatFiat(data.tvlUSD)}</TdTxt>\n    )\n  }\n}, {\n  width: '10%',\n  key: 'totalApr',\n  label: 'Total APR',\n}, {\n  width: '15%',\n  direction: 'column',\n  key: 'liquidity',\n  label: 'Your Liquidity',\n  type: 'slot',\n  render: (data, index) => {\n    const userPositions = state.userPositions\n    const userBalance = userPositions && addresses[data.id] in userPositions\n      ? userPositions[addresses[data.id]].balanceUSD\n      : undefined;\n    return (\n      <>\n        <TdTxt>{userBalance ? `${formatFiat(userBalance)}` : \"-\"}</TdTxt>\n        {data.liquidity && <TdTxt className=\"gray\">{formatFiat(data.liquidity)} LP</TdTxt>}\n        <SvgIcon className={[\"icon-right\", index === state.dataIndex ? \"rotate\" : \"\"]}>\n          {IconRight}\n        </SvgIcon>\n      </>\n    )\n  }\n}]\n\nreturn (\n  <StyledColumn style={dexConfig.theme}>\n    {state.allData && (\n      <Widget\n        src={\"bluebiu.near/widget/Liquidity.Data.ArrakisFinance\"}\n        props={{\n          pairs,\n          addresses,\n          allData: state.allData,\n          prices,\n          curChain,\n          multicallAddress,\n          LAST_SNAP_SHOT_DATA_URL,\n          onLoad: (data) => {\n            State.update({\n              dataList: data.dataList,\n              loading: false\n            })\n          }\n        }}\n      />\n    )}\n    {/* <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.Logo\"}\n    /> */}\n    <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.Filter\"}\n      props={{\n        token: state.token,\n        chains: CHAIN_LIST,\n        categoryIndex: state.categoryIndex,\n        chainIndex: state.chainIndex,\n        onSearchInput: handleSearchInput,\n        onChangeCategoryIndex: handleChangeCategoryIndex,\n        onChangeChainIndex: handleChangeChainIndex,\n      }}\n    />\n    <Widget\n      src={\"bluebiu.near/widget/Liquidity.Bridge.List\"}\n      props={{\n        columnList,\n        loading: state.loading,\n        dataIndex: state.dataIndex,\n        onChangeDataIndex: handleChangeDataIndex,\n        dataList: state.filterList,\n        addresses,\n        multicallAddress,\n        ICON_VAULT_MAP\n      }}\n    />\n\n\n  </StyledColumn>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Liquidity.ARRAKISFINANCE", "fact_widget_deployments_id": "46cf007c45422425688f3fe7b7b5abb8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}