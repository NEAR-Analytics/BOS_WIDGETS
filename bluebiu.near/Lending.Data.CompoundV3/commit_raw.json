{"tx_hash": "8sBhuBLVdW2df3UnGFsEPmLECfz6Y2fYA6vwSMwiQ61c", "action_id_social": "B4s1N6xvVSXTR4k3hBAfrUo6EjiRszdf9Pt7DZYxTbig-0-widget", "block_id": 116616458, "block_timestamp": "2024-04-11T14:57:15.212Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.CompoundV3", "source_code": "const COMET_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"priceFeed\", type: \"address\" }],\n    name: \"getPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    name: \"totalsCollateral\",\n    outputs: [\n      {\n        internalType: \"uint128\",\n        name: \"totalSupplyAsset\",\n        type: \"uint128\",\n      },\n      { internalType: \"uint128\", name: \"_reserved\", type: \"uint128\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalBorrow\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"baseTrackingBorrowSpeed\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"baseTrackingSupplySpeed\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"trackingIndexScale\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getUtilization\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"utilization\", type: \"uint256\" }],\n    name: \"getSupplyRate\",\n    outputs: [{ internalType: \"uint64\", name: \"\", type: \"uint64\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"utilization\", type: \"uint256\" }],\n    name: \"getBorrowRate\",\n    outputs: [{ internalType: \"uint64\", name: \"\", type: \"uint64\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"borrowBalanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"address\", name: \"\", type: \"address\" },\n    ],\n    name: \"userCollateral\",\n    outputs: [\n      { internalType: \"uint128\", name: \"balance\", type: \"uint128\" },\n      { internalType: \"uint128\", name: \"_reserved\", type: \"uint128\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getReserves\",\n    outputs: [{ internalType: \"int256\", name: \"\", type: \"int256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst { comets, multicall, multicallAddress, compPriceFeed, account, onLoad } =\n  props;\n\nlet count = 0;\nlet compPrice = 0;\nconst rewardData = {};\nconst secondsPerDay = 60 * 60 * 24;\nconst secondsPerYear = 60 * 60 * 24 * 365;\n\nconst getCometInfo = (len) => {\n  const comet = comets[len - 1];\n  const calls = [\n    {\n      address: comet.address,\n      name: \"totalBorrow\",\n    },\n    {\n      address: comet.address,\n      name: \"baseTrackingBorrowSpeed\",\n    },\n    {\n      address: comet.address,\n      name: \"baseTrackingSupplySpeed\",\n    },\n    {\n      address: comet.address,\n      name: \"trackingIndexScale\",\n    },\n    { address: comet.address, name: \"getUtilization\" },\n    { address: comet.address, name: \"totalSupply\" },\n    { address: comet.address, name: \"getReserves\" },\n  ];\n  multicall({\n    abi: COMET_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      const baseTrackingSupplySpeed = res[2] ? Big(res[2][0]) : Big(0);\n      const baseTrackingBorrowSpeed = res[1] ? Big(res[1][0]) : Big(0);\n      rewardData[comet.address] = {\n        baseTrackingSupplySpeed,\n        baseTrackingBorrowSpeed,\n        trackingIndexScale: res[3][0],\n      };\n      comet.totalBorrow = res[0]\n        ? ethers.utils.formatUnits(\n            res[0][0]?._hex || 0,\n            comet.baseToken.decimals\n          )\n        : \"0\";\n      comet.totalEarning = res[5][0]\n        ? ethers.utils.formatUnits(\n            res[5][0]?._hex || 0,\n            comet.baseToken.decimals\n          )\n        : \"0\";\n      comet.utilization = res[4][0]\n        ? ethers.utils.formatUnits(res[4][0]?._hex || 0, 16)\n        : \"0\";\n      const reverses = res[6][0]\n        ? ethers.utils.formatUnits(\n            res[6][0]?._hex || 0,\n            comet.baseToken.decimals\n          )\n        : \"0\";\n      comet.liquidity = Big(comet.totalEarning)\n        .minus(comet.totalBorrow)\n        .add(reverses)\n        .toString();\n      getCometRate(res[4][0], len);\n    })\n    .catch((err) => {\n      console.log(`get comet info error ${comet.address}`, err);\n    });\n};\n\nconst getCometRate = (utilization, len) => {\n  const comet = comets[len - 1];\n  const calls = [\n    {\n      address: comet.address,\n      name: \"getSupplyRate\",\n      params: [utilization],\n    },\n    {\n      address: comet.address,\n      name: \"getBorrowRate\",\n      params: [utilization],\n    },\n  ];\n\n  multicall({\n    abi: COMET_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      const supplyApr = Big(res[0] || 0)\n        .div(1e18)\n        .mul(secondsPerYear);\n      const borrowApr = Big(res[1] || 0)\n        .div(1e18)\n        .mul(secondsPerYear);\n      comet.supplyApr = supplyApr.toString();\n      comet.borrowApr = borrowApr.toString();\n      len--;\n      if (len > 0) {\n        getCometInfo(len);\n      } else {\n        count++;\n        formate(\"get comets\");\n      }\n    })\n    .catch((err) => {\n      console.log(`get comets error ${comet.address}`, err);\n    });\n};\n\nconst getCometCollaterals = (len) => {\n  const comet = comets[len - 1];\n  const calls = comet.collateralAssets.map((asset) => ({\n    address: comet.address,\n    name: \"totalsCollateral\",\n    params: [asset.address],\n  }));\n\n  multicall({\n    abi: COMET_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      res.forEach((item, i) => {\n        const amount = item[0]\n          ? ethers.utils.formatUnits(\n              item[0]?._hex || 0,\n              comet.collateralAssets[i].decimals\n            )\n          : \"0\";\n        comet.collateralAssets[i].collateral = amount;\n      });\n      len--;\n      if (len > 0) {\n        getCometCollaterals(len);\n      } else {\n        count++;\n        formate(\"get comet collaterals\");\n      }\n    })\n    .catch((err) => {\n      console.log(`get collaterals error`, err);\n    });\n};\n\nconst getPrice = (len) => {\n  const comet = comets[len - 1];\n  const calls = [\n    {\n      address: comet.address,\n      name: \"getPrice\",\n      params: [comet.baseToken.priceFeed],\n    },\n  ];\n\n  comet.collateralAssets.forEach((asset) => {\n    calls.push({\n      address: comet.address,\n      name: \"getPrice\",\n      params: [asset.priceFeed],\n    });\n  });\n  multicall({\n    abi: COMET_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      res.forEach((item, i) => {\n        if (i === 0) {\n          comet.baseToken.price = ethers.utils.formatUnits(\n            item[0]?._hex || 0,\n            8\n          );\n          return;\n        }\n        comet.collateralAssets[i - 1].price = ethers.utils.formatUnits(\n          item[0]?._hex || 0,\n          8\n        );\n      });\n      len--;\n      if (len > 0) {\n        getPrice(len);\n      } else {\n        count++;\n        formate(\"get price\");\n      }\n    })\n    .catch((err) => {\n      console.log(`get price error ${comet.address}`, err);\n    });\n};\n\nconst getCompPrice = (comet) => {\n  if (!compPriceFeed) {\n    count++;\n    formate(\"get comp price\");\n    return;\n  }\n  const calls = [\n    {\n      address: comet.address,\n      name: \"getPrice\",\n      params: [compPriceFeed],\n    },\n  ];\n  multicall({\n    abi: COMET_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      compPrice = res ? ethers.utils.formatUnits(res[0][0]?._hex || 0, 8) : 0;\n      count++;\n      formate(\"get comp price\");\n    })\n    .catch((err) => {\n      console.log(`get comp price error`, err);\n    });\n};\n\nconst getAccountInfo = (comet, cb) => {\n  const calls = [\n    {\n      address: comet.address,\n      name: \"borrowBalanceOf\",\n      params: [account],\n    },\n    {\n      address: comet.address,\n      name: \"balanceOf\",\n      params: [account],\n    },\n    {\n      address: comet.baseToken.address,\n      name: \"balanceOf\",\n      params: [account],\n    },\n  ];\n  let hasNative = \"\";\n  comet.collateralAssets.forEach((asset) => {\n    calls.push({\n      address: comet.address,\n      name: \"userCollateral\",\n      params: [account, asset.address],\n    });\n    calls.push({\n      address: asset.address,\n      name: \"balanceOf\",\n      params: [account],\n    });\n    if (asset.isNative) hasNative = asset.address;\n  });\n\n  multicall({\n    abi: COMET_ABI,\n    calls,\n    options: {},\n    multicallAddress,\n    provider: Ethers.provider(),\n  })\n    .then((res) => {\n      const borrowedBalance = Big(res[0] || 0).div(\n        Big(10).pow(comet.baseToken.decimals)\n      );\n      const borrowedBalanceUsd = borrowedBalance\n        .mul(comet.baseToken.price)\n        .toString();\n      const balance = Big(res[1] || 0).div(\n        Big(10).pow(comet.baseToken.decimals)\n      );\n      const walletBalance = Big(res[2] || 0).div(\n        Big(10).pow(comet.baseToken.decimals)\n      );\n      const userCollateralUsd = Big(0);\n      const userBorrowCapacityUsd = Big(0);\n      const collateralBalances = {};\n      const userLiquidationUsd = Big(0);\n      let nativePrice = 0;\n      comet.collateralAssets.forEach((collateralAsset, i) => {\n        const startI = i * comet.collateralAssets.length + 3;\n        const balance = Big(res[startI] ? res[startI][0] : 0).div(\n          Big(10).pow(collateralAsset.decimals)\n        );\n        userCollateralUsd = balance\n          .mul(collateralAsset.price)\n          .add(userCollateralUsd);\n\n        userBorrowCapacityUsd = balance\n          .mul(collateralAsset.price)\n          .mul(collateralAsset.borrowCollateralFactor / 100)\n          .add(userBorrowCapacityUsd);\n\n        userLiquidationUsd = balance\n          .mul(collateralAsset.price)\n          .mul(collateralAsset.liquidateCollateralFactor / 100)\n          .add(userLiquidationUsd);\n\n        const walletBalance = Big(res[startI + 1] || 0).div(\n          Big(10).pow(collateralAsset.decimals)\n        );\n        if (hasNative === collateralAsset.address) {\n          nativePrice = collateralAsset.price;\n        }\n        collateralBalances[collateralAsset.address] = {\n          balance: balance.toString(),\n          balanceUsd: balance.mul(collateralAsset.price).toString(),\n          walletBalance: walletBalance.toString(),\n          walletBalanceUsd: walletBalance.mul(collateralAsset.price).toString(),\n        };\n      });\n\n      const returnData = {\n        borrowedBalance: borrowedBalance.toString(),\n        borrowedBalanceUsd,\n        userCollateralUsd: userCollateralUsd.toString(),\n        balance: balance.toString(),\n        balanceUsd: balance.mul(comet.baseToken.price).toString(),\n        walletBalance: walletBalance.toString(),\n        walletBalanceUsd: walletBalance.mul(comet.baseToken.price).toString(),\n        collateralBalances,\n        userBorrowCapacityUsd: userBorrowCapacityUsd.toString(),\n        userLiquidationUsd: userLiquidationUsd.toString(),\n      };\n\n      if (hasNative) {\n        Ethers.provider()\n          .getBalance(account)\n          .then((rawBalance) => {\n            const walletBalance = ethers.utils.formatUnits(rawBalance._hex, 18);\n            collateralBalances[hasNative].walletBalance = walletBalance;\n            collateralBalances[hasNative].walletBalanceUsd = Big(walletBalance)\n              .mul(nativePrice)\n              .toString();\n            cb?.(returnData);\n          });\n      } else {\n        cb?.(returnData);\n      }\n    })\n    .catch((err) => {\n      console.log(\"err\", err);\n    });\n};\n\nconst formate = () => {\n  if (count < 4) return;\n  const assets = comets.map((comet) => {\n    const totalBorrowUsd = Big(comet.totalBorrow || 0)\n      .mul(comet.baseToken.price)\n      .toString();\n    const totalEarningUsd = Big(comet.totalEarning || 0)\n      .mul(comet.baseToken.price)\n      .toString();\n\n    const totalCollateral = Big(0);\n    comet.collateralAssets?.forEach((asset) => {\n      totalCollateral = totalCollateral.add(\n        Big(asset.collateral).mul(asset.price)\n      );\n    });\n\n    const cometRewardData = rewardData[comet.address];\n\n    const compToSuppliersPerDay =\n      (cometRewardData.baseTrackingSupplySpeed /\n        cometRewardData.trackingIndexScale) *\n      secondsPerDay;\n    const compToBorrowersPerDay =\n      (cometRewardData.baseTrackingBorrowSpeed /\n        cometRewardData.trackingIndexScale) *\n      secondsPerDay;\n\n    const supplyCompRewardApr =\n      ((compPrice * compToSuppliersPerDay) /\n        (comet.totalEarning * comet.baseToken.price)) *\n      365;\n    const borrowCompRewardApr =\n      ((compPrice * compToBorrowersPerDay) /\n        (comet.totalBorrow * comet.baseToken.price)) *\n      365;\n\n    return {\n      ...comet,\n      totalBorrowUsd,\n      totalEarningUsd,\n      totalCollateralUsd: totalCollateral.toString(),\n      supplyCompRewardApr,\n      borrowCompRewardApr,\n    };\n  });\n  onLoad({\n    getAccountInfo,\n    assets,\n    compPrice,\n  });\n};\n\nuseEffect(() => {\n  if (!comets.length) return;\n\n  getPrice(comets.length);\n  getCometInfo(comets.length);\n  getCometCollaterals(comets.length);\n  getCompPrice(comets[0]);\n}, []);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.CompoundV3", "fact_widget_deployments_id": "13a881c3147fcd04eb74586ff5e0617e", "inserted_timestamp": "2024-04-11T16:49:18.947Z", "modified_timestamp": "2024-04-11T16:49:18.947Z", "__row_index": 0}