{"tx_hash": "AfX4fyhZ8pCEsmCZ4GGSoyuhjyR8AYYXDCcYp7QFtE7S", "action_id_social": "26hL2Nh4uM2b3kxUzbvzBxHAg4bQf9TDQazGS2La5hEh-0-widget", "block_id": 101465862, "block_timestamp": "2023-09-19T09:41:52.368Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Pendle.TradeSwapAmountOut", "source_code": "const STATIC_ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenIn\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"swapExactTokenForPtStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPtOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyMinted\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenIn\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountTokenIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"swapExactTokenForYtStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netYtOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyMinted\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactYtIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactYtForPtStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPtOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"totalPtSwapped\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactSyIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactSyForPtStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netPtOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactSyIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactSyForYtStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netYtOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactPtIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactPtForYtStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netYtOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"totalPtToSwap\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactPtIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactPtForSyStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netSyOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactPtIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenOut\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"swapExactPtForTokenStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netTokenOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyToRedeem\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactYtIn\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapExactYtForSyStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netSyOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyOwedInt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netPYToRepaySyOwedInt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netPYToRedeemSyOutInt\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"market\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exactYtIn\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenOut\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"bulk\",\n        type: \"address\",\n      },\n    ],\n    name: \"swapExactYtForTokenStatic\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"netTokenOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"priceImpact\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exchangeRateAfter\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyOut\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netSyOwedInt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netPYToRepaySyOwedInt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"netPYToRedeemSyOutInt\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst STATIC_ROUTER = \"0xAdB09F65bd90d19e3148D9ccb693F3161C6DB3E8\";\n\nconst {\n  update,\n  market,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  isPT,\n  onLoad,\n} = props;\n\nif (!update) return;\n\nif (\n  !inputCurrency.address ||\n  !outputCurrency.address ||\n  Big(inputCurrencyAmount || 0).eq(0)\n) {\n  onLoad({});\n  return;\n}\n\nif (inputCurrency.address === \"native\")\n  inputCurrency.address = \"0x0000000000000000000000000000000000000000\";\n\nconst amount = ethers.utils.parseUnits(\n  inputCurrencyAmount,\n  inputCurrency.decimals\n);\n\nconst tradeType = isPT\n  ? outputCurrency.baseType === \"PT\"\n    ? \"in\"\n    : \"out\"\n  : outputCurrency.baseType === \"YT\"\n  ? \"in\"\n  : \"out\";\nconst getMethod = () => {\n  if (inputCurrency.baseType === \"PT\") {\n    return outputCurrency.baseType === \"YT\"\n      ? \"swapExactPtForYtStatic\"\n      : outputCurrency.baseType === \"SY\"\n      ? \"swapExactPtForSyStatic\"\n      : \"swapExactPtForTokenStatic\";\n  }\n  if (outputCurrency.baseType === \"PT\") {\n    return inputCurrency.baseType === \"YT\"\n      ? \"swapExactYtForPtStatic\"\n      : inputCurrency.baseType === \"SY\"\n      ? \"swapExactSyForPtStatic\"\n      : \"swapExactTokenForPtStatic\";\n  }\n  if (inputCurrency.baseType === \"YT\") {\n    return inputCurrency.baseType === \"PT\"\n      ? \"swapExactYtForPtStatic\"\n      : inputCurrency.baseType === \"SY\"\n      ? \"swapExactYtForSyStatic\"\n      : \"swapExactYtForTokenStatic\";\n  }\n  if (outputCurrency.baseType === \"YT\") {\n    return inputCurrency.baseType === \"PT\"\n      ? \"swapExactPtForYtStatic\"\n      : inputCurrency.baseType === \"SY\"\n      ? \"swapExactSyForYtStatic\"\n      : \"swapExactTokenForYtStatic\";\n  }\n};\nconst method = getMethod();\n\nconst RouterContract = new ethers.Contract(\n  STATIC_ROUTER,\n  STATIC_ROUTER_ABI,\n  Ethers.provider().getSigner()\n);\n\nconst noSmartRouter =\n  tradeType === \"in\"\n    ? [\"PT\", \"SY\", \"IB\", \"YT\"].includes(inputCurrency.baseType)\n    : [\"PT\", \"SY\", \"IB\", \"YT\"].includes(outputCurrency.baseType);\n\nconsole.log(\"noNeedRouter\", noSmartRouter, method);\n\nconst getParams = ({ market, amount, tokenIn, tokenOut }) => {\n  switch (method) {\n    case \"swapExactYtForPtStatic\":\n    case \"swapExactYtForSyStatic\":\n    case \"swapExactSyForPtStatic\":\n    case \"swapExactSyForYtStatic\":\n    case \"swapExactPtForYtStatic\":\n    case \"swapExactPtForSyStatic\":\n      return [market, amount];\n    case \"swapExactTokenForPtStatic\":\n    case \"swapExactTokenForYtStatic\":\n      return [\n        market,\n        tokenIn,\n        amount,\n        \"0x0000000000000000000000000000000000000000\",\n      ];\n    case \"swapExactPtForTokenStatic\":\n    case \"swapExactYtForTokenStatic\":\n      return [\n        market,\n        amount,\n        tokenOut,\n        \"0x0000000000000000000000000000000000000000\",\n      ];\n    default:\n      return [];\n  }\n};\nconst getRoutes = (netOut) => {\n  if (\n    [\"PT\", \"YT\", \"SY\"].includes(inputCurrency.baseType) &&\n    [\"PT\", \"YT\", \"SY\"].includes(outputCurrency.baseType)\n  ) {\n    return [\n      {\n        from: { ...inputCurrency, amount: inputCurrencyAmount },\n        to: { ...outputCurrency, amount: Big(netOut).toFixed(3) },\n      },\n    ];\n  }\n  return [\n    {\n      from: { ...inputCurrency, amount: inputCurrencyAmount },\n      to: { ...market.sy, amount: inputCurrencyAmount },\n    },\n    {\n      from: { ...market.sy, amount: inputCurrencyAmount },\n      to: { ...outputCurrency, amount: Big(netOut).toFixed(3) },\n    },\n  ];\n};\n\nconst params = getParams({\n  market: market.address,\n  amount,\n  tokenIn: inputCurrency.address,\n  tokenOut: outputCurrency.address,\n});\nRouterContract[method](...params)\n  .then((res) => {\n    let data = {};\n    switch (method) {\n      case \"swapExactYtForPtStatic\":\n      case \"swapExactPtForYtStatic\":\n      case \"swapExactTokenForPtStatic\":\n      case \"swapExactTokenForYtStatic\":\n      case \"swapExactPtForTokenStatic\":\n        data = {\n          totalSwapped: ethers.utils.formatUnits(\n            res[1],\n            outputCurrency.decimals\n          ),\n          netSyFee: ethers.utils.formatUnits(res[2], 16),\n          priceImpact: ethers.utils.formatUnits(res[3], 16),\n          exchangeRateAfter: ethers.utils.formatUnits(res[4], 18),\n        };\n        break;\n      case \"swapExactSyForPtStatic\":\n      case \"swapExactSyForYtStatic\":\n      case \"swapExactPtForSyStatic\":\n      case \"swapExactYtForSyStatic\":\n      case \"swapExactYtForTokenStatic\":\n        data = {\n          netSyFee: ethers.utils.formatUnits(res[1], 16),\n          priceImpact: ethers.utils.formatUnits(\n            res[2],\n            outputCurrency.decimals - 2\n          ),\n          exchangeRateAfter: ethers.utils.formatUnits(\n            res[3],\n            outputCurrency.decimals\n          ),\n        };\n        break;\n      default:\n        data = {};\n    }\n    data.netOut = ethers.utils.formatUnits(res[0], outputCurrency.decimals);\n    data.routes = getRoutes(data.netOut);\n    const syAmount = [\"PT\", \"YT\"].includes(inputCurrency.baseType)\n      ? data.netOut\n      : inputCurrencyAmount;\n    data.netSyFee = Big(data.netSyFee).div(syAmount).toString();\n    data.apy = Big(market.impliedApy)\n      .minus(data.priceImpact / 100)\n      .minus(data.netSyFee / 100)\n      .mul(99)\n      .toFixed(3);\n    onLoad(data);\n    return;\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Pendle.TradeSwapAmountOut", "fact_widget_deployments_id": "b3321412a9be5ea4e39036ccd65afd7b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}