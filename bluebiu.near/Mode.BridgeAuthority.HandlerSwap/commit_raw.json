{"tx_hash": "Gbvk34CuXjWwSqBh9nudDiETL9urMaMU8gy5RNJtJ2VM", "action_id_social": "9g9mCfyBkp8gNoYf41QSi3D8dtCTzxivGA2uviT7UUbc-0-widget", "block_id": 118952578, "block_timestamp": "2024-05-15T06:12:51.044Z", "signer_id": "bluebiu.near", "widget_name": "Mode.BridgeAuthority.HandlerSwap", "source_code": "const {\n  amount,\n  account,\n  currency,\n  routerAddress,\n  routerEthAddress,\n  target,\n  loading,\n  onSuccess,\n  onError,\n  quote,\n} = props;\nif (!loading) return \"\";\n\nconst MODENET_ID = 34443;\nconst ETH_WITHDRAWAL_TARGET = `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`;\nconst L1StandardBridgeAbi = [\n  {\n    inputs: [\n      { internalType: \"uint32\", name: \"_minGasLimit\", type: \"uint32\" },\n      { internalType: \"bytes\", name: \"_extraData\", type: \"bytes\" },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"_l1Token\", type: \"address\" },\n      { internalType: \"address\", name: \"_l2Token\", type: \"address\" },\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n      { internalType: \"uint32\", name: \"_minGasLimit\", type: \"uint32\" },\n      { internalType: \"bytes\", name: \"_extraData\", type: \"bytes\" },\n    ],\n    name: \"depositERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst L2StandardBridgeAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l2Token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"_minGasLimit\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst nativeTokenL1ToL2 = () => {\n  const signer = Ethers.provider().getSigner();\n  const gasLimit = 300000;\n  const rawAmount = Big(amount)\n    .times(Big(10).pow(currency.decimals))\n    .toFixed(0);\n  const _data = ethers.utils.defaultAbiCoder.encode(\n    [\"uint256\", \"bytes\"],\n    [1, \"0x\"]\n  );\n  const iface = new ethers.utils.Interface(L1StandardBridgeAbi);\n  const L1BridgeContract = new ethers.Contract(routerEthAddress, iface, signer);\n\n  L1BridgeContract.depositETH(gasLimit, _data, {\n    value: rawAmount,\n  })\n    .then((tx) => {\n      tx.wait().then(onSuccess).catch(onError);\n    })\n    .catch(onError);\n};\n\nconst erc20TokenL1ToL2 = () => {\n  const signer = Ethers.provider().getSigner();\n  const gasLimit = 300000;\n  const rawAmount = Big(amount)\n    .times(Big(10).pow(currency.decimals))\n    .toFixed(0);\n  const _data = ethers.utils.defaultAbiCoder.encode(\n    [\"uint256\", \"bytes\"],\n    [1, \"0x\"]\n  );\n  const iface = new ethers.utils.Interface(L1StandardBridgeAbi);\n  const L1BridgeContract = new ethers.Contract(routerAddress, iface, signer);\n  L1BridgeContract.depositERC20(\n    currency.address,\n    currency.targetAddress,\n    rawAmount,\n    gasLimit,\n    _data\n  )\n    .then((tx) => {\n      tx.wait().then(onSuccess).catch(onError);\n    })\n    .catch(onError);\n};\n\nconst L2ToL1 = () => {\n  const signer = Ethers.provider().getSigner();\n  const gasLimit = 0;\n  const rawAmount = Big(amount)\n    .times(Big(10).pow(currency.decimals))\n    .toFixed(0);\n  const _data = ethers.utils.defaultAbiCoder.encode(\n    [\"uint256\", \"bytes\"],\n    [1, \"0x\"]\n  );\n  const iface = new ethers.utils.Interface(L2StandardBridgeAbi);\n  const L2BridgeContract = new ethers.Contract(routerAddress, iface, signer);\n  L2BridgeContract.withdraw(\n    currency.isNative ? ETH_WITHDRAWAL_TARGET : currency.address,\n    rawAmount,\n    gasLimit,\n    _data, {\n      value: currency.isNative ? rawAmount : 0\n    }\n  )\n    .then((tx) => {\n      tx.wait().then(onSuccess).catch(onError);\n    })\n    .catch(onError);\n};\n\n\nif (target.id === MODENET_ID) {\n  if (currency.isNative) {\n    nativeTokenL1ToL2();\n  } else {\n    erc20TokenL1ToL2();\n  }\n} else {\n  L2ToL1();\n}\nreturn \"\";", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Mode.BridgeAuthority.HandlerSwap", "fact_widget_deployments_id": "361ca531e61cd5572f1bff784f0ff4a4", "inserted_timestamp": "2024-05-15T07:50:57.888Z", "modified_timestamp": "2024-05-15T07:50:57.888Z", "__row_index": 0}