{"tx_hash": "CCJrpmAWWm5Ti7CNGbguzxPnyEdH3AvKzaMo2xG9d4wz", "action_id_social": "5dUrFmpuMAadoVtZu5sSbbeeLCga4wkcyVvGyAv8XzqH-0-widget", "block_id": 119828127, "block_timestamp": "2024-05-27T04:14:17.075Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Sturdy.PoolButton", "source_code": "const ERC20_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst Button = styled.button`\n  background-color: var(--switch-color);\n  line-height: 46px;\n  height: 46px;\n  border-radius: 10px;\n  color: var(--button-text-color);\n  font-size: 18px;\n  font-weight: 500;\n  border: none;\n  width: 100%;\n  transition: 0.5s;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n  &.borrow {\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.repay {\n    background-color: var(--repay-bg-hover-color);\n    border: 1px solid var(--repay-border-color);\n  }\n  &.close {\n    width: 408px;\n    background-color: var(--repay-border-color);\n    border: 1px solid var(--repay-border-color);\n  }\n`;\n\nconst {\n  account,\n  actionText,\n  amount,\n  data,\n  chainId,\n  onSuccess,\n  toast,\n  addAction,\n  loading: estimating,\n  gas,\n  isBigerThanBalance,\n  dexConfig,\n} = props;\n\nconst { parseUnits, formatUnits } = ethers.utils;\n\nlet curToken;\nif ([\"Add Collateral\", \"Remove Collateral\"].includes(actionText)) {\n  curToken = \"TOKEN_A\";\n}\nif ([\"Borrow\", \"Repay\", \"Deposit\", \"Withdraw\"].includes(actionText)) {\n  curToken = \"TOKEN_B\";\n}\nconst tokenSymbol = data[curToken].symbol;\nconst tokenDecimals = data[curToken].decimals;\nconst tokenAddr = data[curToken].address;\nconst spender = data.POOL_MANAGER;\n\nif (!actionText) return;\n\nif (!amount) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Enter An Amount\n    </Button>\n  );\n}\n\nif (isBigerThanBalance) {\n  return (\n    <Button disabled={true} className={actionText.toLowerCase()}>\n      Insufficient Balance\n    </Button>\n  );\n}\nuseEffect(() => {\n  State.update({\n    approving: false,\n    isApproved: false,\n  });\n}, []);\nfunction getAllowance() {\n  State.update({\n    pending: true,\n  });\n  const TokenContract = new ethers.Contract(\n    tokenAddr,\n    ERC20_ABI,\n    Ethers.provider().getSigner()\n  );\n  TokenContract.allowance(account, spender)\n    .then((allowanceRaw) => {\n      console.log(\"ALLOWANCE:\", allowanceRaw.toString());\n      State.update({\n        pending: false,\n        isApproved: !Big(formatUnits(allowanceRaw, tokenDecimals)).lt(\n          amount || \"0\"\n        ),\n      });\n    })\n    .catch((err) => {\n      console.log(\"getAllowance-error:\", err);\n      State.update({\n        pending: false,\n      });\n    });\n}\nuseEffect(() => {\n  if ([\"Deposit\", \"Repay\", \"Add Collateral\"].includes(actionText)) {\n    getAllowance();\n  } else {\n    State.update({\n      isApproved: true,\n    });\n  }\n}, [amount, actionText]);\n\nif (!state.isApproved) {\n  function handleApprove() {\n    const toastId = toast?.loading({\n      title: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n    });\n    State.update({\n      approving: true,\n    });\n\n    const TokenContract = new ethers.Contract(\n      tokenAddr,\n      ERC20_ABI,\n      Ethers.provider().getSigner()\n    );\n    TokenContract.approve(\n      spender,\n      parseUnits(Big(amount).times(1.1).toFixed(10).toString(), tokenDecimals)\n    )\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              isApproved: true,\n              approving: false,\n            });\n            toast?.success({\n              title: \"Approve Successfully!\",\n              text: `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            State.update({\n              isApproved: false,\n              approving: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          isApproved: false,\n          approving: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: \"Approve Failed!\",\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : `Approve ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n        });\n        onLoad?.(false);\n      });\n  }\n  return (\n    <Button onClick={handleApprove} disabled={state.approving}>\n      {state.approving ? (\n        <Widget\n          src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n          props={{\n            size: 16,\n          }}\n        />\n      ) : (\n        \"Approve\"\n      )}\n    </Button>\n  );\n}\n\nfunction formatAddAction(actionText, _amount, status, transactionHash) {\n  addAction?.({\n    type: \"Lending\",\n    action: actionText,\n    token: {\n      symbol: tokenSymbol,\n    },\n    amount: _amount,\n    template: dexConfig.name,\n    add: false,\n    status,\n    transactionHash,\n  });\n}\n\nfunction handleConvertToShares(_assets) {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_assets\",\n            type: \"uint256\",\n          },\n        ],\n        name: \"convertToShares\",\n        outputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_shares\",\n            type: \"uint256\",\n          },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  return contract\n    .convertToShares(_assets)\n    .then((_shares) => {\n      return _shares;\n    })\n    .catch((err) => {\n      console.log(\"handleConvertToShares-error\", err);\n    });\n}\n\nfunction handleToBorrowShares(_assets) {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"_roundUp\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"_previewInterest\",\n            type: \"bool\",\n          },\n        ],\n        name: \"toBorrowShares\",\n        outputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_shares\",\n            type: \"uint256\",\n          },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  return contract\n    .toBorrowShares(_assets, true, true)\n    .then((_shares) => {\n      return _shares;\n    })\n    .catch((err) => {\n      console.log(\"handleConvertToShares-error\", err);\n    });\n}\n\nfunction handleWithdraw() {\n  State.update({\n    pending: true,\n  });\n  handleConvertToShares(parseUnits(amount, tokenDecimals)).then((_shares) => {\n    const contract = new ethers.Contract(\n      data.POOL_MANAGER,\n      [\n        {\n          inputs: [\n            {\n              internalType: \"uint256\",\n              name: \"_shares\",\n              type: \"uint256\",\n            },\n            {\n              internalType: \"address\",\n              name: \"_receiver\",\n              type: \"address\",\n            },\n            {\n              internalType: \"address\",\n              name: \"_owner\",\n              type: \"address\",\n            },\n          ],\n          name: \"redeem\",\n          outputs: [\n            {\n              internalType: \"uint256\",\n              name: \"_amountToReturn\",\n              type: \"uint256\",\n            },\n          ],\n          stateMutability: \"nonpayable\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider().getSigner()\n    );\n\n    contract\n      .redeem(_shares, account, account, {\n        gasLimit: 4000000,\n      })\n      .then((tx) => {\n        tx.wait()\n          .then((res) => {\n            const { status, transactionHash } = res;\n            toast?.dismiss(toastId);\n            if (status !== 1) throw new Error(\"\");\n            State.update({\n              pending: false,\n            });\n            onSuccess();\n            formatAddAction(actionText, amount, status, transactionHash);\n            toast?.success({\n              title: `${actionText} Successfully!`,\n              text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n              tx: transactionHash,\n              chainId,\n            });\n          })\n          .catch((err) => {\n            console.log(\"handleWithdraw-error:\", err);\n            State.update({\n              pending: false,\n            });\n          });\n      })\n      .catch((err) => {\n        State.update({\n          pending: false,\n        });\n        toast?.dismiss(toastId);\n        toast?.fail({\n          title: `${actionText} Failed!`,\n          text: err?.message?.includes(\"user rejected transaction\")\n            ? \"User rejected transaction\"\n            : ``,\n        });\n      });\n  });\n}\nfunction handleDeposit() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n        name: \"deposit\",\n        inputs: [\n          { name: \"assets\", type: \"uint256\" },\n          { name: \"receiver\", type: \"address\" },\n        ],\n        outputs: [{ name: \"\", type: \"uint256\" }],\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  contract\n    .deposit(parseUnits(amount, tokenDecimals), account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleDeposit-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\nfunction handleAddCollateral() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_collateralAmount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"_borrower\",\n            type: \"address\",\n          },\n        ],\n        name: \"addCollateral\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .addCollateral(parseUnits(amount, tokenDecimals), account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleAddCollateral-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\n\nfunction handleRemoveCollateral() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_collateralAmount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"_receiver\",\n            type: \"address\",\n          },\n        ],\n        name: \"removeCollateral\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  contract\n    .removeCollateral(parseUnits(amount, tokenDecimals), account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleRemoveCollateral-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\n\nfunction handleRepayAsset(_shares) {\n  console.log(\"handleRepayAsset--\", _shares);\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_shares\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"_borrower\",\n            type: \"address\",\n          },\n        ],\n        name: \"repayAsset\",\n        outputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_amountToRepay\",\n            type: \"uint256\",\n          },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .repayAsset(_shares, account, {\n      gasLimit: 4000000,\n    })\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleRepay-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\n\n// yourBorrowShares\nfunction handleRepay() {\n  State.update({\n    pending: true,\n  });\n\n  if (Big(amount).eq(Big(data.yourBorrow))) {\n    handleRepayAsset(data.yourBorrowShares || 0);\n  } else {\n    handleToBorrowShares(parseUnits(amount, tokenDecimals)).then((_shares) => {\n      handleRepayAsset(_shares);\n    });\n  }\n}\n\nfunction handleBorrow() {\n  State.update({\n    pending: true,\n  });\n  const contract = new ethers.Contract(\n    data.POOL_MANAGER,\n    [\n      {\n        inputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_borrowAmount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"_collateralAmount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"_receiver\",\n            type: \"address\",\n          },\n        ],\n        name: \"borrowAsset\",\n        outputs: [\n          {\n            internalType: \"uint256\",\n            name: \"_shares\",\n            type: \"uint256\",\n          },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n      },\n    ],\n    Ethers.provider().getSigner()\n  );\n  contract\n    .borrowAsset(\n      parseUnits(Number(amount).toFixed(6), tokenDecimals),\n      0,\n      account\n    )\n    .then((tx) => {\n      tx.wait()\n        .then((res) => {\n          const { status, transactionHash } = res;\n          toast?.dismiss(toastId);\n          if (status !== 1) throw new Error(\"\");\n          State.update({\n            pending: false,\n          });\n          onSuccess();\n          formatAddAction(actionText, amount, status, transactionHash);\n          toast?.success({\n            title: `${actionText} Successfully!`,\n            text: `${actionText} ${Big(amount).toFixed(2)} ${tokenSymbol}`,\n            tx: transactionHash,\n            chainId,\n          });\n        })\n        .catch((err) => {\n          console.log(\"handleBorrow-error:\", err);\n          State.update({\n            pending: false,\n          });\n        });\n    })\n    .catch((err) => {\n      State.update({\n        pending: false,\n      });\n      toast?.dismiss(toastId);\n      toast?.fail({\n        title: `${actionText} Failed!`,\n        text: err?.message?.includes(\"user rejected transaction\")\n          ? \"User rejected transaction\"\n          : ``,\n      });\n    });\n}\n\nfunction handleClick() {\n  if (actionText === \"Withdraw\") {\n    handleWithdraw();\n  }\n  if (actionText === \"Deposit\") {\n    handleDeposit();\n  }\n  if (actionText === \"Add Collateral\") {\n    handleAddCollateral();\n  }\n  if (actionText === \"Remove Collateral\") {\n    handleRemoveCollateral();\n  }\n  if (actionText === \"Repay\") {\n    handleRepay();\n  }\n  if (actionText === \"Borrow\") {\n    handleBorrow();\n  }\n}\n\nreturn (\n  <Button\n    disabled={state.pending}\n    className={actionText.toLowerCase()}\n    onClick={handleClick}\n  >\n    {state.pending ? (\n      <Widget\n        src=\"bluebiu.near/widget/0vix.LendingLoadingIcon\"\n        props={{\n          size: 16,\n        }}\n      />\n    ) : (\n      actionText\n    )}\n  </Button>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Sturdy.PoolButton", "fact_widget_deployments_id": "b83616d515f92b4f4d5afee2df863d14", "inserted_timestamp": "2024-05-27T06:17:10.765Z", "modified_timestamp": "2024-05-27T06:17:10.765Z", "__row_index": 0}