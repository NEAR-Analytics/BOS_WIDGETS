{"tx_hash": "9inNBcqNhoFE22HyiXeAbF1jtL5dC5UqJNmncnxBFJJi", "action_id_social": "AqZZF2nSRvcaiiEjprSdndtbKZGxaHeRhG33z2LborS2-0-widget", "block_id": 103557485, "block_timestamp": "2023-10-17T04:16:12.084Z", "signer_id": "bluebiu.near", "widget_name": "Arbitrum.Swap.handlerSolidly", "source_code": "const {\n  routerAddress,\n  wethAddress,\n  inputCurrencyAmount,\n  inputCurrency,\n  outputCurrencyAmount,\n  outputCurrency,\n  account,\n  onSuccess,\n  onError,\n  swapping,\n  title,\n  stable,\n} = props;\n\nif (!swapping) return;\n\nconst type =\n  inputCurrency.address === \"native\"\n    ? 1\n    : outputCurrency.address === \"native\"\n    ? 2\n    : 0;\n\nconsole.log(\"type: \", type);\n\nconst RouterContract = new ethers.Contract(\n  routerAddress,\n  [\n    {\n      inputs: [\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        {\n          components: [\n            { internalType: \"address\", name: \"from\", type: \"address\" },\n            { internalType: \"address\", name: \"to\", type: \"address\" },\n            { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n          ],\n          internalType: \"struct RouterV2.route[]\",\n          name: \"routes\",\n          type: \"tuple[]\",\n        },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"swapExactTokensForTokens\",\n      outputs: [\n        { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        {\n          components: [\n            { internalType: \"address\", name: \"from\", type: \"address\" },\n            { internalType: \"address\", name: \"to\", type: \"address\" },\n            { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n          ],\n          internalType: \"struct RouterV2.route[]\",\n          name: \"routes\",\n          type: \"tuple[]\",\n        },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"swapExactETHForTokens\",\n      outputs: [\n        { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n      ],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n        { internalType: \"uint256\", name: \"amountOutMin\", type: \"uint256\" },\n        {\n          components: [\n            { internalType: \"address\", name: \"from\", type: \"address\" },\n            { internalType: \"address\", name: \"to\", type: \"address\" },\n            { internalType: \"bool\", name: \"stable\", type: \"bool\" },\n          ],\n          internalType: \"struct RouterV2.route[]\",\n          name: \"routes\",\n          type: \"tuple[]\",\n        },\n        { internalType: \"address\", name: \"to\", type: \"address\" },\n        { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      ],\n      name: \"swapExactTokensForETH\",\n      outputs: [\n        { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  ],\n  Ethers.provider().getSigner()\n);\nif (type === 0) {\n  RouterContract.swapExactTokensForTokens(\n    ethers.utils.parseUnits(inputCurrencyAmount, inputCurrency.decimals),\n    \"0\",\n    [\n      {\n        from: inputCurrency.address,\n        to: outputCurrency.address,\n        stable,\n      },\n    ],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n    { gasLimit: 5000000 }\n  )\n    .then((tx) => {\n      onSuccess(tx);\n    })\n    .catch((err) => {\n      console.log(\"err: \", err);\n      onError(err);\n    });\n  return;\n}\nif (type === 1) {\n  RouterContract.swapExactETHForTokens(\n    \"0\",\n    [\n      {\n        from: wethAddress,\n        to: outputCurrency.address,\n        stable,\n      },\n    ],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n    { gasLimit: 5000000, value: ethers.utils.parseEther(inputCurrencyAmount) }\n  )\n    .then((tx) => {\n      onSuccess(tx);\n    })\n    .catch((err) => {\n      onError(err);\n    });\n  return;\n}\nif (type === 2) {\n  RouterContract.swapExactTokensForETH(\n    ethers.utils.parseUnits(inputCurrencyAmount, inputCurrency.decimals),\n    \"0\",\n    [\n      {\n        from: inputCurrency.address,\n        to: wethAddress,\n        stable,\n      },\n    ],\n    account,\n    Math.ceil(Date.now() / 1000) + 60,\n    { gasLimit: 5000000 }\n  )\n    .then((tx) => {\n      onSuccess(tx);\n    })\n    .catch((err) => {\n      onError(err);\n    });\n}\n\nreturn \"\";\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Arbitrum.Swap.handlerSolidly", "fact_widget_deployments_id": "317910e4d461642bc6d655dac96a4924", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}