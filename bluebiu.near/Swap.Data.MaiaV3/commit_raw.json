{"tx_hash": "BM1GA6itMxRjBRmdaoWEfvea9DAD75NLodd3Ssqw7nyJ", "action_id_social": "A8ArtMRZxwRDpZgLnRQjpLr5LfAVGzwarCxvJbkAYhqm-0-widget", "block_id": 114682627, "block_timestamp": "2024-03-14T08:46:58.205Z", "signer_id": "bluebiu.near", "widget_name": "Swap.Data.MaiaV3", "source_code": "const QUOTER_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"tokenIn\", type: \"address\" },\n          { internalType: \"address\", name: \"tokenOut\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amountIn\", type: \"uint256\" },\n          { internalType: \"uint24\", name: \"fee\", type: \"uint24\" },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quoteExactInputSingle\",\n    outputs: [\n      { internalType: \"uint256\", name: \"amountOut\", type: \"uint256\" },\n      { internalType: \"uint160\", name: \"sqrtPriceX96After\", type: \"uint160\" },\n      {\n        internalType: \"uint32\",\n        name: \"initializedTicksCrossed\",\n        type: \"uint32\",\n      },\n      { internalType: \"uint256\", name: \"gasEstimate\", type: \"uint256\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nconst ROUTER_ABI = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"tokenIn\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenOut\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint24\",\n            name: \"fee\",\n            type: \"uint24\",\n          },\n          {\n            internalType: \"address\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountIn\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountOutMinimum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint160\",\n            name: \"sqrtPriceLimitX96\",\n            type: \"uint160\",\n          },\n        ],\n        internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n        name: \"params\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"exactInputSingle\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amountOut\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amountMinimum\", type: \"uint256\" },\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n    ],\n    name: \"unwrapWETH9\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes[]\", name: \"data\", type: \"bytes[]\" }],\n    name: \"multicall\",\n    outputs: [{ internalType: \"bytes[]\", name: \"results\", type: \"bytes[]\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nconst {\n  updater,\n  routerAddress,\n  quoterAddress,\n  multicallAddress,\n  wethAddress,\n  inputCurrency,\n  outputCurrency,\n  inputCurrencyAmount,\n  onLoad,\n  slippage,\n  account,\n  fees,\n  prices,\n} = props;\n\nuseEffect(() => {\n  if (!updater || !prices) return;\n\n  if (\n    (!inputCurrency.address && !inputCurrency.isNative) ||\n    (!outputCurrency.address && !outputCurrency.isNative) ||\n    !inputCurrencyAmount\n  ) {\n    return;\n  }\n\n  const wrapType =\n    inputCurrency.isNative && outputCurrency.address === wethAddress\n      ? 1\n      : inputCurrency.address === wethAddress && outputCurrency.isNative\n      ? 2\n      : 0;\n\n  if (wrapType) {\n    onLoad({\n      outputCurrencyAmount: inputCurrencyAmount,\n      noPair: false,\n    });\n    return;\n  }\n\n  const amount = ethers.utils.parseUnits(\n    Big(inputCurrencyAmount || 0).toFixed(inputCurrency.decimals),\n    inputCurrency.decimals\n  );\n\n  const path = [\n    inputCurrency.isNative ? wethAddress : inputCurrency.address,\n    outputCurrency.isNative ? wethAddress : outputCurrency.address,\n  ];\n\n  const Iface = new ethers.utils.Interface(QUOTER_ABI);\n\n  const results = [];\n  let _count = 0;\n  const singleQuote = (fee, cb) => {\n    const params = [\n      {\n        tokenIn: path[0],\n        tokenOut: path[1],\n        amountIn: amount,\n        fee: fee,\n        sqrtPriceLimitX96: 0,\n      },\n    ];\n    const encodedData = Iface.encodeFunctionData(\n      \"quoteExactInputSingle\",\n      params\n    );\n\n    Ethers.provider()\n      .call({\n        to: quoterAddress,\n        data: encodedData,\n      })\n      .then((res) => {\n        const data = Iface.decodeFunctionResult(\"quoteExactInputSingle\", res);\n        results.push({ ...data, fee });\n        _count++;\n        if (_count === fees.length) {\n          cb();\n        }\n      })\n      .catch((err) => {\n        _count++;\n        if (_count === fees.length) {\n          cb();\n        }\n      });\n  };\n  const getAmountOut = () => {\n    let max = null;\n    results.forEach((result) => {\n      if (\n        Big(Number(result.amountOut._hex)).gt(Number(max.amountOut?._hex) || 0)\n      ) {\n        max = result;\n      }\n    });\n    if (max) {\n      getTransaction(max);\n    } else {\n      onLoad({\n        noPair: true,\n        outputCurrencyAmount: \"\",\n      });\n    }\n  };\n\n  const getTransaction = (result) => {\n    const RouterIface = new ethers.utils.Interface(ROUTER_ABI);\n    const options = {\n      value: inputCurrency.isNative ? amount : \"0\",\n    };\n    const _amountOut = Big(result.amountOut)\n      .mul(1 - (slippage || 0.05))\n      .toFixed(0);\n\n    const inputs = [\n      {\n        tokenIn: path[0],\n        tokenOut: path[1],\n        fee: result.fee,\n        recipient: outputCurrency.isNative ? routerAddress : account,\n        amountIn: amount,\n        amountOutMinimum: _amountOut,\n        sqrtPriceLimitX96: \"0\",\n      },\n    ];\n    const multicallContract = new ethers.Contract(\n      routerAddress,\n      ROUTER_ABI,\n      Ethers.provider().getSigner()\n    );\n\n    let method = \"\";\n    let params = [];\n\n    if (inputCurrency.isNative) {\n      method = \"exactInputSingle\";\n      params = inputs[0];\n    } else {\n      method = \"multicall\";\n      params.push(RouterIface.encodeFunctionData(\"exactInputSingle\", inputs));\n      if (outputCurrency.isNative) {\n        params.push(\n          RouterIface.encodeFunctionData(\"unwrapWETH9\", [\"0\", account])\n        );\n      }\n    }\n\n    const _amount = Big(\n      ethers.utils.formatUnits(result.amountOut, outputCurrency.decimals)\n    );\n\n    let priceImpact = null;\n\n    if (prices && _amount.gt(0)) {\n      const poolPrice = Big(prices[inputCurrency.symbol] || 1).div(\n        prices[outputCurrency.symbol] || 1\n      );\n      const amountoutPrice = Big(_amount).div(inputCurrencyAmount);\n      priceImpact = poolPrice\n        .minus(amountoutPrice)\n        .div(poolPrice)\n        .mul(100)\n        .toString();\n    }\n\n    const returnData = {\n      outputCurrencyAmount: Big(_amount).gt(0.01)\n        ? Big(_amount).toPrecision(10)\n        : Big(_amount).toFixed(10),\n      priceImpact,\n      noPair: false,\n    };\n    const getTx = (_gas) => {\n      multicallContract.populateTransaction[method](params, {\n        ...options,\n        gasLimit: _gas || 4000000,\n      })\n        .then((res) => {\n          onLoad({\n            ...returnData,\n            gas: _gas,\n            unsignedTx: res,\n          });\n        })\n        .catch((err) => {\n          onLoad({\n            ...returnData,\n          });\n        });\n    };\n    const estimateGas = () => {\n      multicallContract.estimateGas[method](params, options)\n        .then((_gas) => {\n          getTx(_gas);\n        })\n        .catch((err) => {\n          getTx();\n        });\n    };\n    estimateGas();\n  };\n\n  (fees || []).forEach((fee) => {\n    singleQuote(fee, getAmountOut);\n  });\n}, [updater, prices]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Swap.Data.MaiaV3", "fact_widget_deployments_id": "6af598ac7d9ae295291344bf6b96f624", "inserted_timestamp": "2024-03-14T10:28:39.710Z", "modified_timestamp": "2024-03-14T10:28:39.710Z", "__row_index": 4}