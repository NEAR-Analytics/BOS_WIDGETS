{"tx_hash": "D9BWvtj2NzuJ6x2MCf1bhrV8TbwFEG99vMDZmrZPXBxg", "action_id_social": "BDihsvdut3hRSb65QYgnoxSvctBx2jKLsbkrYJW8BZ8e-0-widget", "block_id": 119518783, "block_timestamp": "2024-05-22T22:03:43.914Z", "signer_id": "bluebiu.near", "widget_name": "Staking.Kelp.Index", "source_code": "const StyledContainer = styled.div`\n  padding-top: 34px;\n  width: 1244px;\n  margin: 0 auto;\n`;\nconst StyledHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst networks = {\n  // Linea\n  59144: {\n    DepositPool: \"0x057297e44a3364139edcf3e1594d6917ed7688c2\",\n    StakeTokens: [\n      {\n        name: \"ETH\",\n        symbol: \"ETH\",\n        icon: \"https://assets.coingecko.com/coins/images/279/standard/ethereum.png?1696501628\",\n        decimals: 18,\n        isNative: true,\n        address: \"native\",\n      },\n    ],\n    ExchangeToken: {\n      decimals: 18,\n      symbol: \"wrsETH\",\n      name: \"rsETHWrapper\",\n      icon: \"https://ipfs.near.social/ipfs/bafkreiablktwaz4gul2cnx4zkkfl5zqolg76imnp7dzjaqkdywknvadzty\",\n    },\n  },\n  // mode\n  34443: {\n    DepositPool: \"0xbDf612E616432AA8e8D7d8cC1A9c934025371c5C\",\n    StakeTokens: [\n      {\n        name: \"ETH\",\n        symbol: \"ETH\",\n        icon: \"https://assets.coingecko.com/coins/images/279/standard/ethereum.png?1696501628\",\n        decimals: 18,\n        isNative: true,\n        address: \"native\",\n      },\n    ],\n    ExchangeToken: {\n      decimals: 18,\n      symbol: \"wrsETH\",\n      name: \"rsETHWrapper\",\n      icon: \"https://ipfs.near.social/ipfs/bafkreiablktwaz4gul2cnx4zkkfl5zqolg76imnp7dzjaqkdywknvadzty\",\n    },\n  },\n  1: {\n    DepositPool: \"0x036676389e48133B63a802f8635AD39E752D375D\",\n    WithdrawalContract: \"0x62De59c08eB5dAE4b7E6F7a8cAd3006d6965ec16\",\n    StakeTokens: [\n      {\n        name: \"ETH\",\n        symbol: \"ETH\",\n        icon: \"https://assets.coingecko.com/coins/images/279/standard/ethereum.png?1696501628\",\n        decimals: 18,\n        isNative: true,\n        address: \"native\",\n      },\n      {\n        name: \"ETHx\",\n        symbol: \"ETHx\",\n        icon: \"\",\n        decimals: 18,\n        address: \"0xA35b1B31Ce002FBF2058D22F30f95D405200A15b\",\n      },\n      {\n        name: \"Liquid staked Ether 2.0 \",\n        symbol: \"stETH\",\n        icon: \"\",\n        decimals: 18,\n        address: \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\",\n      },\n      {\n        name: \"Staked Frax Ether\",\n        symbol: \"sfrxETH\",\n        icon: \"\",\n        decimals: 18,\n        address: \"0xA35b1B31Ce002FBF2058D22F30f95D405200A15b\",\n      },\n    ],\n    ExchangeToken: {\n      address: \"0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7\",\n      symbol: \"rsETH\",\n      name: \"rsETH\",\n      decimals: 18,\n      icon: \"https://ipfs.near.social/ipfs/bafkreibhmbhdfll7apn5mjmlmt6eh2fgn4wcvrkl3yhqfujgw5dgkqvg2e\",\n    },\n  },\n};\nState.init({\n  tab: \"Stake\",\n  chainId: -1,\n  loading: true,\n  isSupport: false,\n});\n\nconst {\n  CHAIN_LIST,\n  curChain,\n  dexConfig,\n  wethAddress,\n  multicallAddress,\n  multicall,\n  prices,\n  onSwitchChain,\n  switchingChain,\n  addAction,\n  toast,\n  chainId,\n  nativeCurrency,\n  isChainSupported,\n  account,\n} = props;\nconst { type } = dexConfig;\nconst SUPPOR_CHAINS = [...CHAIN_LIST?.map((item) => item.chain_id), 1];\n\nconst { StakeTokens } = state;\n\nif (!Ethers.provider())\n  return (\n    <Widget\n      src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n      props={{\n        chain: curChain,\n        onSwitchChain: onSwitchChain,\n        switchingChain: switchingChain,\n        theme: dexConfig.theme?.button,\n      }}\n    />\n  );\n\nuseEffect(() => {\n  Ethers.provider()\n    .getNetwork()\n    .then((res) => {\n      State.update({\n        isSupport: SUPPOR_CHAINS.includes(res.chainId),\n        chainId: res.chainId,\n        ...networks[res.chainId],\n      });\n    })\n    .catch((err) => {\n      console.log(\"catch-getNetwork-error--\", err);\n    });\n}, []);\n\nuseEffect(() => {\n  if (!state.StakeTokens) return;\n\n  let _balanceRes = {};\n  function formatData() {\n    const _stakeTokens = [...StakeTokens];\n    console.log(\"_balanceRes--\", _balanceRes);\n    for (let i = 0; i < _stakeTokens.length; i++) {\n      _stakeTokens[i].balance = _balanceRes[_stakeTokens[i].address];\n    }\n\n    State.update({\n      loading: false,\n      StakeTokens: _stakeTokens,\n    });\n  }\n  function getWalletBalance() {\n    // not eth\n    const underlyingTokens = StakeTokens.filter((market) => {\n      return market.address && !market.isNative;\n    });\n\n    Ethers.provider()\n      .getBalance(account)\n      .then((rawBalance) => {\n        _balanceRes[\"native\"] = ethers.utils.formatUnits(rawBalance, 18);\n\n        if (underlyingTokens.length) {\n          const calls = underlyingTokens.map((token) => ({\n            address: token.address,\n            name: \"balanceOf\",\n            params: [account],\n          }));\n\n          multicall({\n            abi: [\n              {\n                constant: true,\n                inputs: [\n                  {\n                    name: \"_owner\",\n                    type: \"address\",\n                  },\n                ],\n                name: \"balanceOf\",\n                outputs: [\n                  {\n                    name: \"balance\",\n                    type: \"uint256\",\n                  },\n                ],\n                payable: false,\n                stateMutability: \"view\",\n                type: \"function\",\n              },\n            ],\n            calls,\n            options: {},\n            multicallAddress,\n            provider: Ethers.provider(),\n          })\n            .then((res) => {\n              console.log(\"getWalletBalance--\", res);\n              for (let i = 0, len = res.length; i < len; i++) {\n                _balanceRes[underlyingTokens[i].address] = res[i]\n                  ? ethers.utils.formatUnits(\n                      res[i][0],\n                      underlyingTokens[i].decimals\n                    )\n                  : \"0\";\n              }\n              formatData();\n            })\n            .catch((err) => {\n              console.log(\"getWalletBalance-error--\", err);\n              // setTimeout(() => {\n              //   getWalletBalance();\n              // }, 500);\n            });\n        } else {\n          formatData();\n        }\n      });\n  }\n  getWalletBalance();\n}, [state.StakeTokens]);\n\nconst tabsArray = [\n  { key: \"Stake\", label: \"Stake\" },\n  { key: \"Unstake\", label: \"Unstake\" },\n  // { key: \"Withdraw\", label: \"Withdraw\" },//TODO\n];\n\nreturn (\n  <StyledContainer style={dexConfig.theme}>\n    <StyledHeader>\n      <Widget\n        src=\"bluebiu.near/widget/Lending.CardTabs\"\n        props={{\n          tabs: tabsArray,\n          active: state.tab,\n          onChange: (tab) => {\n            State.update({\n              tab: tab.key,\n            });\n          },\n        }}\n      />\n\n      <Widget\n        src=\"bluebiu.near/widget/Lending.Chains\"\n        props={{\n          chains: CHAIN_LIST,\n          curChain,\n          onSwitchChain,\n          onChange: (tab) => {\n            State.update({\n              tab: tab.key,\n            });\n          },\n        }}\n      />\n    </StyledHeader>\n    {state.loading ? (\n      <Widget src=\"bluebiu.near/widget/Lending.Spinner\" />\n    ) : (\n      <Widget\n        src=\"bluebiu.near/widget/Staking.Kelp.Content\"\n        props={{\n          ...props,\n          tab: state.tab,\n          ...state,\n        }}\n      />\n    )}\n\n    {!state.isSupport && (\n      <Widget\n        src=\"bluebiu.near/widget/Swap.ChainWarnigBox\"\n        props={{\n          chain: curChain,\n          onSwitchChain: onSwitchChain,\n          switchingChain: switchingChain,\n          theme: dexConfig.theme?.button,\n        }}\n      />\n    )}\n  </StyledContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Staking.Kelp.Index", "fact_widget_deployments_id": "7d230db7d57fab1505c4a6ba8c0d1513", "inserted_timestamp": "2024-05-22T23:51:27.439Z", "modified_timestamp": "2024-05-22T23:51:27.439Z", "__row_index": 5}