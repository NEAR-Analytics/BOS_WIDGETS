{"tx_hash": "A5iivBfHuY3hNFKPszM3kvs1GYiNoqzPbMQnbiHxFTpr", "action_id_social": "JDJHmmubQ3ZwvJDyNiDaVqTCHHrRGd3eisXNV4tSntYg-0-widget", "block_id": 111826806, "block_timestamp": "2024-02-01T04:54:10.668Z", "signer_id": "bluebiu.near", "widget_name": "Lending.Data.Liquity", "source_code": "const {\n  multicallAddress,\n  multicall,\n  account,\n  prices,\n  dexConfig,\n  update,\n  onLoad,\n} = props;\nconst { borrowTokenAddress, StabilityPool, VesselManagerOperations, markets } =\n  dexConfig;\nuseEffect(() => {\n  if (!account || !update || !multicallAddress) return;\n\n  function getDebt() {\n    const _contract = dexConfig.VesselManager;\n\n    //preon\n    const abi = [\n      {\n        inputs: [\n          { internalType: \"address\", name: \"_asset\", type: \"address\" },\n          { internalType: \"address\", name: \"_borrower\", type: \"address\" },\n        ],\n        name: \"getVesselDebt\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ];\n    const tokens = Object.keys(dexConfig.markets);\n    const calls = tokens.map((addr) => ({\n      address: _contract,\n      name: \"getVesselDebt\",\n      params: [addr, account],\n    }));\n\n    multicall({\n      abi,\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        // const [[tvlAmount], [tokenBalAmount]] = res;\n        console.log(\"getDebt_res\", res);\n        for (let i = 0, len = res.length; i < len; i++) {\n          const _vesselStatus = res[i] ? \"ACTIVE\" : \"INACTIVE\";\n          const _vesselDebt =\n            res[i] && res[i][0] ? ethers.utils.formatUnits(res[i][0]._hex) : 0;\n          markets[tokens[i]].vesselStatus = _vesselStatus;\n          markets[tokens[i]].vesselDebt = _vesselDebt;\n        }\n\n        onLoad({\n          newMarkets: markets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getDebt_error:\", err);\n      });\n\n    // const contract = new ethers.Contract(_contract, abi, Ethers.provider());\n    // contract\n    //   .getVesselDebt(_asset, account)\n    //   .then((res) => {\n    //     console.log(\"calcDebt_res:\", res, res.toString());\n    //     const _debt = ethers.utils.formatUnits(res) - 20;\n    //     State.update({\n    //       vesselDebt: _debt,\n    //     });\n    //   })\n    //   .catch((err) => {\n    //     console.log(\"calcDebt_error\", err);\n    //   });\n  }\n\n  function getDeposit() {\n    const contract = new ethers.Contract(\n      StabilityPool,\n      [\n        {\n          inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n          name: \"deposits\",\n          outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      Ethers.provider()\n    );\n    contract\n      .deposits(account)\n      .then((res) => {\n        console.log(\"get_deposits_res:\", res);\n        onLoad({\n          deposits: ethers.utils.formatUnits(res),\n        });\n      })\n      .catch((err) => {\n        console.log(\"getDeposit_error\", err);\n      });\n  }\n\n  function getInfo() {\n    const calls = [\n      {\n        address: borrowTokenAddress,\n        name: \"balanceOf\",\n        params: [StabilityPool],\n      },\n      { address: borrowTokenAddress, name: \"balanceOf\", params: [account] },\n    ];\n    multicall({\n      abi: [\n        {\n          constant: true,\n          inputs: [\n            {\n              name: \"_owner\",\n              type: \"address\",\n            },\n          ],\n          name: \"balanceOf\",\n          outputs: [\n            {\n              name: \"balance\",\n              type: \"uint256\",\n            },\n          ],\n          payable: false,\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        const [[tvlAmount], [tokenBalAmount]] = res;\n        console.log(\"get_borrow_token_res\", tvlAmount, tokenBalAmount);\n        onLoad({\n          tvl: Big(ethers.utils.formatUnits(tvlAmount || 0)).toFixed(2),\n          tokenBal: Big(ethers.utils.formatUnits(tokenBalAmount || 0)).toFixed(\n            2\n          ),\n        });\n      })\n      .catch((err) => {\n        console.log(\"get_borrow_token_error:\", err);\n      });\n  }\n\n  function getWalletBalance() {\n    if (!markets) return;\n    let nativeOToken = \"\";\n    const underlyingTokens = Object.values(markets)\n      .filter((market) => {\n        if (market.underlyingToken.address === \"native\")\n          nativeOToken = wethAddress;\n        return (\n          market.underlyingToken.address &&\n          market.underlyingToken.address !== \"native\"\n        );\n      })\n      .map((market) => ({\n        ...market.underlyingToken,\n      }));\n    const calls = underlyingTokens.map((token) => ({\n      address: token.address,\n      name: \"balanceOf\",\n      params: [account],\n    }));\n\n    multicall({\n      abi: [\n        {\n          constant: true,\n          inputs: [\n            {\n              name: \"_owner\",\n              type: \"address\",\n            },\n          ],\n          name: \"balanceOf\",\n          outputs: [\n            {\n              name: \"balance\",\n              type: \"uint256\",\n            },\n          ],\n          payable: false,\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"get_wallet_bal_res:\", res);\n        for (let i = 0, len = res.length; i < len; i++) {\n          markets[underlyingTokens[i].address].userUnderlyingBalance = res[i][0]\n            ? ethers.utils.formatUnits(\n                res[i][0]._hex,\n                underlyingTokens[i].decimals\n              )\n            : \"0\";\n        }\n\n        if (nativeOToken) {\n          const provider = Ethers.provider();\n          provider.getBalance(account).then((rawBalance) => {\n            markets[nativeOToken].userUnderlyingBalance =\n              ethers.utils.formatUnits(rawBalance._hex, 18);\n          });\n        }\n\n        onLoad({\n          newMarkets: markets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getWalletBalance_error\", err);\n      });\n  }\n\n  function getMinted() {\n    const underlyingTokens = Object.values(markets);\n\n    const calls = underlyingTokens.map((item) => ({\n      address: VesselManagerOperations,\n      name: \"getEntireSystemDebt\",\n      params: [item.underlyingToken.address],\n    }));\n\n    multicall({\n      abi: [\n        {\n          inputs: [\n            { internalType: \"address\", name: \"_asset\", type: \"address\" },\n          ],\n          name: \"getEntireSystemDebt\",\n          outputs: [\n            {\n              internalType: \"uint256\",\n              name: \"entireSystemDebt\",\n              type: \"uint256\",\n            },\n          ],\n          stateMutability: \"view\",\n          type: \"function\",\n        },\n      ],\n      calls,\n      options: {},\n      multicallAddress,\n      provider: Ethers.provider(),\n    })\n      .then((res) => {\n        console.log(\"getMinted_res\", res);\n        for (let i = 0, len = res.length; i < len; i++) {\n          markets[underlyingTokens[i].underlyingToken.address][\"MINTED\"] = res[\n            i\n          ][0]\n            ? ethers.utils.formatUnits(res[i][0]._hex)\n            : \"0\";\n        }\n        onLoad({\n          newMarkets: markets,\n        });\n      })\n      .catch((err) => {\n        console.log(\"getMinted_err\", err);\n      });\n  }\n\n  getDeposit();\n  getInfo();\n  getDebt();\n  getWalletBalance();\n  getMinted();\n}, [account, update]);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bluebiu.near/widget/Lending.Data.Liquity", "fact_widget_deployments_id": "47833171357a895f3fdd890ec1948e4d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}