{"tx_hash": "2swHMNBzrCdGoHJVvvRk1biytBtJbHWkxX3i6dbc7o4o", "action_id_social": "FvyF3tCwUA1dzMAb2Gu28Q5CSoYFoYz4pYJGvoo2hYem-0-widget", "block_id": 110156226, "block_timestamp": "2024-01-11T16:03:01.117Z", "signer_id": "everycanvas.near", "widget_name": "near-openai", "source_code": "// Sourced from\n// https://github.com/petersalomonsen/near-openai/blob/main/boswidgets/askchatgpt/main.js\n\n// TODO: Separate out into its own SDK\n\nconst NETWORK_ID = \"mainnet\";\n\n// what does near-api-js use these for?\n// and how can people discover other options\nconst NODE_URL = \"https://rpc.mainnet.near.org\";\nconst WALLET_URL = `https://wallet.${NETWORK_ID}.near.org`; // what should this be defaulting to?\nconst HELPER_URL = `https://helper.${NETWORK_ID}.near.org`;\nconst EXPLORER_URL = `https://explorer.${NETWORK_ID}.near.org`; // and this?\n\nconst API_URL = \"https://near-openai.vercel.app/api/openai\";\n\nconst code = `\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta charset=\"UTF-8\">\n    </head>\n    <body>\n    </body>\n    <script type=\"module\">\n\nimport 'https://cdn.jsdelivr.net/npm/near-api-js@2.1.3/dist/near-api-js.min.js';\nimport 'https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/src/sha256.min.js';\n\nconst keyStore = new nearApi.keyStores.InMemoryKeyStore();\nlet account;\nconst networkId = \"mainnet\";\n\nconst config = {\n    keyStore, // instance of UnencryptedFileSystemKeyStore\n    networkId: networkId,\n    nodeUrl:  \"https://rpc.mainnet.near.org\",\n    walletUrl: \"https://wallet.mainnet.near.org\",\n    helperUrl: \"https://helper.mainnet.near.org\",\n    explorerUrl: \"https://explorer.mainnet.near.org\"\n};\n\n\nasync function createAccount() {\n    const keypair = nearApi.utils.KeyPairEd25519.fromRandom();\n    const accountId = Buffer.from(keypair.publicKey.data).toString('hex');\n    await keyStore.setKey(networkId, accountId, keypair);\n    const near = await nearApi.connect(config);\n    account = await near.account(accountId);\n    return { secretKey: keypair.secretKey, accountId };\n}\n\nasync function useAccount(secretKey) {\n    const keypair = nearApi.utils.KeyPair.fromString(secretKey);\n    const accountId = Buffer.from(keypair.publicKey.data).toString('hex');\n    await keyStore.setKey(networkId, accountId, keypair);\n    const near = await nearApi.connect(config);\n    account = await near.account(accountId);\n    return accountId;\n}\n\nasync function create_ask_ai_request_body(messages, model) {\n    const accountId = account.accountId;\n\n    const messagesStringified = JSON.stringify(messages);\n    const deposit = 50_00000_00000_00000_00000n;\n\n    const message_hash = sha256(messagesStringified);\n\n    const receiverId = 'jsinrust.near';\n    const method_name = 'ask_ai';\n    const gas = '30000000000000';\n    const publicKey = await account.connection.signer.getPublicKey(account.accountId, account.connection.networkId);\n\n    let accessKey;\n    \n    try {\n      accessKey = (await account.findAccessKey()).accessKey;\n    } catch (e) {\n      throw new Error(JSON.stringify(\"Balance is empty.\", null, 1));\n    }\n\n    const nonce = ++accessKey.nonce;\n    const recentBlockHash = nearApi.utils.serialize.base_decode(\n        accessKey.block_hash\n    );\n\n    const transaction = nearApi.transactions.createTransaction(\n        account.accountId,\n        publicKey,\n        receiverId,\n        nonce,\n        [nearApi.transactions.functionCall(method_name, {\n            message_hash\n        }, gas, deposit)],\n        recentBlockHash\n    );\n    const [txHash, signedTx] = await nearApi.transactions.signTransaction(transaction, account.connection.signer, account.accountId, account.connection.networkId);\n\n    return JSON.stringify({\n        signed_transaction: Buffer.from(signedTx.encode()).toString('base64'),\n        transaction_hash: nearApi.utils.serialize.base_encode(txHash),\n        sender_account_id: accountId,\n        messages: messages,\n        model: model\n    });\n}\n\nasync function create_and_send_ask_ai_request(messages, model) {\n    console.log(\"model\", model);\n    try {\n        const requestbody = await create_ask_ai_request_body(messages, model);\n        const airesponse = await fetch(\n            \"https://near-openai-50jjawxtf-petersalomonsen.vercel.app/api/openai\",\n            {\n                method: 'POST',\n                body: requestbody\n            }).then(r => r.json());\n        if (airesponse.error) {\n            throw new Error(JSON.stringify(airesponse.error, null, 1));\n        }\n        return airesponse.choices[0].message.content;\n    } catch (e) {\n        console.log(e.message)\n        window.parent.postMessage({ command: \"error\", error: e.message }, '*');\n    }\n}\n\nwindow.onmessage = async (msg) => {\n    globalThis.parentOrigin = msg.origin;\n\n    console.log('iframe got message', msg.data);\n    switch (msg.data.command) {\n        case 'createaccount':\n            const { secretKey, accountId } = await createAccount();\n            window.parent.postMessage({ command: 'accountcreated', secretKey, accountId }, globalThis.parentOrigin);\n            break;\n        case 'useaccount':\n            window.parent.postMessage({ command: 'usingaccount', accountId: await useAccount(msg.data.secretKey) }, globalThis.parentOrigin);\n            break;\n        case 'ask_ai':\n            const response = await create_and_send_ask_ai_request(msg.data.aiquestion, msg.data.model);            \n            window.parent.postMessage({ command: 'airesponse', airesponse: response }, globalThis.parentOrigin);\n            break;\n    }\n};\n\nwindow.parent.postMessage({ command: 'ready' }, '*');\n    </script>\n</html>\n`;\n\nconst { model, messages, setResponse } = props;\n\nconst SECRET_KEY_STORAGE_KEY = \"secretKey\";\nStorage.privateGet(SECRET_KEY_STORAGE_KEY);\n\nState.init({\n  secretKey: null,\n  airesponse: \"\",\n  aiquestion: messages ?? \"What is the meaning of life?\",\n  aimodel: model ?? \"gpt-3.5-turbo\",\n  accountId: \"\",\n  iframeMessage: null,\n  usingAccount: false,\n});\n\nfunction init_iframe() {\n  const secretKey = Storage.privateGet(SECRET_KEY_STORAGE_KEY);\n\n  State.update({\n    secretKey,\n    iframeMessage: secretKey\n      ? {\n          command: \"useaccount\",\n          secretKey: secretKey,\n        }\n      : {\n          command: \"createaccount\",\n        },\n  });\n}\n\nfunction tldrawStart() {}\n\nfunction ask_ai() {\n  State.update({\n    iframeMessage: {\n      command: \"ask_ai\",\n      aiquestion: props.messages,\n      model: state.aimodel,\n      ts: new Date().getTime(),\n    },\n    progress: true,\n  });\n  console.log(\"state updated\", state.iframeMessage);\n}\n\nfunction changeSecretKey(secretKey) {\n  State.update({ secretKey });\n  Storage.privateSet(SECRET_KEY_STORAGE_KEY, secretKey);\n  init_iframe();\n}\n\nfunction handleMessage(msg) {\n  switch (msg.command) {\n    case \"accountcreated\":\n      Storage.privateSet(SECRET_KEY_STORAGE_KEY, msg.secretKey);\n      State.update({\n        accountId: msg.accountId,\n        secretKey: msg.secretKey,\n      });\n      break;\n    case \"airesponse\":\n      if (setResponse) {\n        setResponse(msg.airesponse);\n      }\n      State.update({ airesponse: msg.airesponse, progress: false });\n      break;\n    case \"usingaccount\":\n      State.update({ accountId: msg.accountId });\n      break;\n    case \"error\":\n      console.log(\"error received in parent\", msg.error);\n      break;\n    case \"ready\":\n      console.log(\"ready\");\n      init_iframe();\n      break;\n  }\n}\n\nconst iframe = (\n  <iframe\n    message={state.iframeMessage}\n    onMessage={handleMessage}\n    srcDoc={code}\n    style={{ width: \"0px\", height: \"0px\", border: \"none\" }}\n  ></iframe>\n);\n\nconst secretKeyToggle = state.showSecretKey ? (\n  <>\n    <button onClick={() => State.update({ showSecretKey: false })}>Hide</button>\n    <input\n      type=\"text\"\n      value={state.secretKey}\n      onChange={(e) => changeSecretKey(e.target.value)}\n    ></input>\n  </>\n) : (\n  <button onClick={() => State.update({ showSecretKey: true })}>Show</button>\n);\n\nreturn (\n  <>\n    {iframe}\n    {state.progress ? (\n      <Progress.Root>\n        <Progress.Indicator state=\"indeterminate\" />\n      </Progress.Root>\n    ) : (\n      <button onClick={ask_ai}>Ask ChatGPT</button>\n    )}\n\n    <p></p>\n    <p>\n      Spending account ID: <pre>{state.accountId}</pre>\n      Copy account Id and fund from your own wallet (I recommend .5 N){\" \"}\n      <button\n        className=\"classic\"\n        onClick={() => {\n          clipboard.writeText(state.accountId);\n        }}\n      >\n        <i className=\"bi bi-clipboard\" />\n      </button>\n    </p>\n    <p>Spending account secret key: {secretKeyToggle}</p>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/near-openai", "fact_widget_deployments_id": "9c958fe75f65ecdf3455d2d9b36b8ddf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}