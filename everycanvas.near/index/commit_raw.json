{"tx_hash": "2wVdkp32Sy3FTx1ZJbaYTL45hjVQmHbWm6S83cjRZjK9", "action_id_social": "DnJJaA9bXALcgm5rmcMMEQLMyW65fkXDcENbDB6JjRjf-0-widget", "block_id": 110596927, "block_timestamp": "2024-01-17T03:02:32.136Z", "signer_id": "everycanvas.near", "widget_name": "index", "source_code": "/**\n * This should be primary view\n */\n\nconst path = props.path || context.accountId || \"everycanvas.near\";\n\nconst parts = path.split(\"/\");\n\nif (parts.length === 1) {\n  path = `${path}/canvas/main`;\n}\n\nconst creatorId = parts[0];\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n`;\n\n// what about when an account doesn't have this?\n// const hyperfile = JSON.parse(Social.get(path, \"final\") || \"null\");\n// let data; // what is an empty snapshot?\n\n// if (hyperfile.adapter) {\n//   const { get } = VM.require(hyperfile.adapter) || (() => {}); // this is like getting data from the remote\n//   if (get) {\n//     data = get(hyperfile.reference) || null;\n//     // get ref from local storage\n//     // if ref in local storage is !== to current, then we want to merge\n//     // old and new snapshot\n//   } else {\n//     return <p>{`Loading or adapter not found : ${hyperfile.adapter}`}</p>;\n//   }\n// } else {\n  return (\n    <Container key={path}>\n      <Canvas persistance={path} autoFocus={true} />\n    </Container>\n  );\n// }\n\n// if (!data) {\n//   return <p>{`Loading or canvas not found : ${hyperfile.adapter}`}</p>;\n// }\n\n// return (\n//   <Container key={path}>\n//     <Canvas initialSnapshot={data} persistance={path} autoFocus={true} />\n//   </Container>\n// );\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/index", "fact_widget_deployments_id": "07520a2ea5aa2abbb59ec407f95a3abc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 81}