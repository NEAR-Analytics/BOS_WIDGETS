{"tx_hash": "27rkWVRYLxj2RtYEfotiXGowtNYcTp9z9tGPhnXLBP3h", "action_id_social": "3XJyomMtf8hkpm8aweYGo9WceoiiFt5ppKXXbFjwBcHh-0-widget", "block_id": 117055417, "block_timestamp": "2024-04-17T19:08:08.974Z", "signer_id": "everycanvas.near", "widget_name": "feed.index", "source_code": "// Feed\nconst type = props.type || \"canvas\";\n\nconst things = Social.keys(`*/${type}/*`, \"final\", {\n  return_type: \"BlockHeight\",\n});\n\nif (!things) {\n  return \"Loading...\";\n}\n\nconst Container = styled.div`\n  margin: 23px;\n  padding: 19px;\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n\n  @media (min-width: 576px) {\n    grid-gap: 15px;\n  }\n\n  @media (min-width: 992px) {\n    grid-gap: 20px;\n  }\n\n  > * {\n    transition: transform 0.3s ease;\n\n    &:hover {\n      transform: scale(1.03);\n    }\n  }\n`;\n\nconst processData = useCallback(\n  (data) => {\n    const accounts = Object.entries(data);\n\n    const allItems = accounts\n      .map((account) => {\n        const accountId = account[0];\n        return Object.entries(account[1][type]).map((kv) => {\n          return {\n            accountId,\n            type: type,\n            name: kv[0],\n            metadatadata: Social.get(\n              `${accountId}/${type}/${kv[0]}/metadata/**`,\n              \"final\"\n            ),\n          };\n        });\n      })\n      .flat();\n\n    allItems.sort((a, b) => b.blockHeight - a.blockHeight);\n    return allItems;\n  },\n  [type]\n);\n\nconst items = processData(things);\n\nif (!items) {\n  return \"Loading data...\";\n}\n\nif (items.length === 0) {\n  return `No items of type: \"${type}\" found.`;\n}\n\nfunction Item({ accountId, name, type, metadata }) {\n  const displayName = metadata.name || name;\n  const defaultImage =\n    \"https://ipfs.near.social/ipfs/bafkreihi3qh72njb3ejg7t2mbxuho2vk447kzkvpjtmulsb2njd6m2cfgi\";\n\n  const profile = Social.getr(`${accountId}/profile`);\n  return (\n    <div\n      className=\"card position-relative\"\n      style={{\n        paddingBottom: \"20px\",\n      }}\n    >\n      <Link style={{ textDecoration: \"none\" }} to={`/${accountId}`}>\n        <div\n          style={{\n            maxWidth: \"100%\",\n            height: \"200px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\",\n            overflow: \"hidden\",\n          }}\n        >\n          {profile.backgroundImage ? (\n            <Widget\n              src=\"mob.near/widget/Image\"\n              props={{\n                image: profile.backgroundImage || defaultImage,\n                className: \"card-img-top\",\n                style: {\n                  backgroundImage: `url(${defaultImage})`,\n                  height: \"90px\",\n                  backgroundSize: \"cover\",\n                  objectFit: \"cover\",\n                  backgroundPosition: \"center\",\n                },\n              }}\n            />\n          ) : (\n            <div\n              className=\"card-img-top\"\n              style={{\n                backgroundImage: `url(${defaultImage})`,\n                height: \"90px\",\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n              }}\n            />\n          )}\n\n          <div className=\"card-body\">\n            <Widget\n              src=\"hack.near/widget/profile.builder\"\n              props={{ accountId }}\n            />\n            {metadata.description && (\n              <p\n                className=\"card-text\"\n                style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}\n              >\n                {metadata.description}\n              </p>\n            )}\n          </div>\n        </div>\n      </Link>\n      <div\n        className=\"d-flex flex-row justify-content-between position-absolute \"\n        style={{\n          width: \"100%\",\n          gap: \"5rem\",\n          bottom: 0,\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n        }}\n      >\n        <div className=\"p-3\">\n          <Link to={`/${accountId}`}>{displayName}</Link>\n        </div>\n        {context.accountId && (\n          <div\n            className=\"p-3 d-flex flex-row\"\n            style={{\n              gap: \"0.5rem\",\n            }}\n          >\n            <Widget\n              src=\"mob.near/widget/N.StarButton\"\n              props={{\n                notifyAccountId: accountId,\n                item: {\n                  type: \"social\",\n                  path: `${accountId}/${type}/${name}`,\n                },\n              }}\n            />\n            <Widget\n              src=\"mob.near/widget/N.LikeButton\"\n              props={{\n                notifyAccountId: accountId,\n                item: {\n                  type: \"social\",\n                  path: `${accountId}/${type}/${name}`,\n                },\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nreturn (\n  <Container>\n    <div className=\"d-flex justify-content-between align-items-center m-1\">\n      <h3 className=\"mb-3\">every {type}</h3>\n      <div className=\"mb-2\">\n        <Link to={\"/\"} className=\"btn btn-sm btn-warning\">\n          <i className=\"bi bi-stars\" /> <b>ideate</b>\n        </Link>\n      </div>\n    </div>\n    <Widget\n      src=\"everycanvas.near/widget/ItemFeed\"\n      props={{\n        items: items,\n        renderItem: Item,\n        perPage: 100,\n        renderLayout: (items) => <Grid>{items}</Grid>,\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/feed.index", "fact_widget_deployments_id": "36b0ff2fc5f2519b6524be185d143945", "inserted_timestamp": "2024-04-17T20:43:26.283Z", "modified_timestamp": "2024-04-17T20:43:26.283Z", "__row_index": 2}