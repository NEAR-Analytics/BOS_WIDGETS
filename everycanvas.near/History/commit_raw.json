{"tx_hash": "2wVdkp32Sy3FTx1ZJbaYTL45hjVQmHbWm6S83cjRZjK9", "action_id_social": "DnJJaA9bXALcgm5rmcMMEQLMyW65fkXDcENbDB6JjRjf-0-widget", "block_id": 110596927, "block_timestamp": "2024-01-17T03:02:32.136Z", "signer_id": "everycanvas.near", "widget_name": "History", "source_code": "/*\n---props---\n\npath: string,\ncount(count: number)?: function,\n\n*/\n\nif (typeof props.path !== \"string\") return \"send {path} as string in props\";\n\nState.init({\n  selectedTab: \"code\",\n  selectedBlockHeight: null,\n});\n\nconst historyBlocksRequest = Social.keys(`${props.path}`, \"final\", {\n  return_type: \"History\",\n});\n\nif (historyBlocksRequest === null) return \"loading...\";\n\nconst [accountId, type, name] = props.path.split(\"/\");\n\nlet blocksChanges = historyBlocksRequest[accountId]?.[type]?.[name];\n\nif (props.count) props.count(blocksChanges.length);\n\nif (blocksChanges) blocksChanges = blocksChanges?.sort((a, b) => b - a);\n\nif (!state.selectedBlockHeight) state.selectedBlockHeight = blocksChanges[0];\n\nfunction getDatastringFromBlockHeight(blockHeight) {\n  const block = Near.block(blockHeight);\n  const date = new Date(block.header.timestamp_nanosec / 1e6);\n  return date.toDateString() + \" \" + date.toLocaleTimeString();\n}\n\nconst oldVersion = useMemo(() => {\n  const current = Social.get(props.path, state.selectedBlockHeight);\n  return current;\n}, [state.selectedBlockHeight]);\n\nconst handleRevert = () => {\n  if (props.onRevert) {\n    props.onRevert(oldVersion);\n  } else {\n    Social.set({\n      [name]: {\n        [type]: oldVersion,\n      },\n    });\n  }\n};\n\nconst renderBlockChangesLink = (blockHeight) => {\n  return (\n    <div>\n      <button\n        className={`list-group-item list-group-item-action ${\n          state.selectedBlockHeight != blockHeight ? \"\" : \"list-group-item-info\"\n        }`}\n        onClick={() => {\n          State.update({ selectedBlockHeight: blockHeight });\n        }}\n      >\n        #{blockHeight} * {getDatastringFromBlockHeight(blockHeight)}\n      </button>\n    </div>\n  );\n};\n\nfunction blockHeightToCode(blockHeight) {\n  const index = blocksChanges.findIndex((el) => el == blockHeight);\n  return (\n    <div className=\"mb-3\">\n      <Widget\n        key={blockHeight}\n        src={\"everycanvas.near/widget/History.CodeHistoryCard\"}\n        props={{\n          pathToWidget: props.path,\n          currentBlockHeight: blockHeight,\n          prevBlockHeight: blocksChanges[index + 1],\n        }}\n      />\n    </div>\n  );\n}\n\nfunction blockHeightToRender(blockHeight) {\n  return (\n    <Widget\n      style={{ minHeight: \"200px\" }}\n      key={blockHeight}\n      src={\"every.near/widget/thing\"}\n      props={{\n        path: props.path,\n        blockHeight: blockHeight,\n      }}\n    />\n  );\n}\n\n//styles forked from calebjacob.near/widget/Activity\nconst Tabs = styled.div`\n  display: flex;\n  padding: 0 12px;\n  height: 48px;\n  border-bottom: 1px solid #eceef0;\n`;\n\nconst TabsButton = styled.button`\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 17px;\n  padding: 0 12px;\n  position: relative;\n  color: ${(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n\n  &:hover {\n    color: #11181c;\n  }\n\n  &::after {\n    content: \"\";\n    display: ${(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 12px;\n    right: 12px;\n    height: 3px;\n    background: #0091ff;\n  }\n`;\n\nreturn (\n  <div>\n    {!blocksChanges ? (\n      <div>incorrent path</div>\n    ) : (\n      <div>\n        <div div className=\"card mb-3\">\n          <div className=\"card-header\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <h3>{blocksChanges.length} Commits </h3>\n              {state.selectedBlockHeight &&\n                blocksChanges[0] !== state.selectedBlockHeight && (\n                  <button type=\"button\" onClick={handleRevert}>\n                    Revert\n                  </button>\n                )}\n            </div>\n          </div>\n\n          <div className=\"list-group\">\n            {blocksChanges\n              .slice(0, 5)\n              .map((height) => renderBlockChangesLink(height))}\n\n            <div className=\"collapse\" id=\"collapseExample\">\n              {blocksChanges\n                .slice(5)\n                .map((height) => renderBlockChangesLink(height))}\n            </div>\n\n            {blocksChanges.length > 5 && (\n              <button\n                className=\"list-group-item active\"\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseExample\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseExample\"\n              >\n                Show all\n              </button>\n            )}\n          </div>\n        </div>\n\n        <Tabs>\n          <TabsButton\n            type=\"button\"\n            onClick={() =>\n              State.update({\n                selectedTab: \"code\",\n              })\n            }\n            selected={state.selectedTab == \"code\"}\n          >\n            Code\n          </TabsButton>\n\n          <TabsButton\n            type=\"button\"\n            onClick={() =>\n              State.update({\n                selectedTab: \"render\",\n              })\n            }\n            selected={state.selectedTab == \"render\"}\n          >\n            Render\n          </TabsButton>\n        </Tabs>\n\n        {state.selectedTab == \"code\" && (\n          <div>{blockHeightToCode(state.selectedBlockHeight)}</div>\n        )}\n\n        {state.selectedTab == \"render\" && (\n          <div>{blockHeightToRender(state.selectedBlockHeight)}</div>\n        )}\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/History", "fact_widget_deployments_id": "26e50fe795d358f74e4c3c57b8ddab0c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}