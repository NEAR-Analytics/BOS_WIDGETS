{"tx_hash": "4X8xYYNdkkLzN3Zve5zEcJ2MTB4Cp8rsxqFkEmkSBvLW", "action_id_social": "29wdRdAq742nwBEAAYQGtjkbV1kJ81f6WoBmJ7949qPi-0-widget", "block_id": 106175968, "block_timestamp": "2023-11-21T03:27:08.118Z", "signer_id": "everycanvas.near", "widget_name": "create.hyperfile", "source_code": "\nprops.fileType ||\n  initState({\n    json: props.data ?? \"\",\n    name: \"canvas\" // temp\n  });\n\nconst ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n\nconst UploadJson = () => {\n  if (state.json.length) {\n    const body = new Blob([state.json], { type: \"application/json\" });\n    console.log(body);\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body,\n    }).then((res) => {\n      const cid = res.body.cid;\n      console.log(\"CID\", cid);\n      State.update({\n        file: {\n          cid,\n        },\n      });\n    });\n  } else {\n    State.update({\n      file: null,\n    });\n  }\n};\n\nconst onChangeName = (name) => {\n  State.update({\n    name,\n  });\n};\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst thingId = state.name ?? generateUID();\n\nconst handleCreate = () => {\n  // load in the state.adapter\n  // const { create } = VM.require(state.adapter);\n  // const hyperfile = create({ cid: state.file.cid });\n  // console.log(\"hyperfile\", hyperfile);\n  const hyperfile = {\n    thing: {\n      [thingId]: {\n        \"\": JSON.stringify({\n          fileformat: props.fileformat,\n          source: \"IPFS\", // state.source\n          adapter: \"everycanvas.near/widget/adapter.ipfs\", // state.adapter\n          reference: {\n            cid: state.file.cid,\n          },\n        }),\n        metadata: {\n          type: props.type,\n        },\n      },\n    },\n  };\n\n  Social.set(hyperfile);\n};\n\nreturn (\n  <>\n    <textarea\n      className=\"form-control mb-3\"\n      rows={5}\n      value={state.json}\n      onChange={(e) => {\n        state.json = e.target.value;\n        State.update();\n      }}\n    />\n    <a type=\"button\" class=\"btn btn-success\" onClick={() => UploadJson()}>\n      Upload\n    </a>\n    <br />\n    {state.file && (\n      <div>\n        <br />\n        Your file:\n        <a href={ipfsUrl(state.file.cid)}>{state.file.cid}</a>\n        <br />\n        {/* <h5 className=\"mt-3\">Name</h5>\n        <input\n          type=\"text\"\n          value={state.name}\n          onChange={(e) => onChangeName(e.target.value)}\n        /> */}\n        <button className=\"btn btn-outline-success mt-3\" onClick={handleCreate}>\n          Create\n        </button>\n      </div>\n    )}\n  </>\n);\n\n\n\n// const accountId = context.accountId;\n\n// if (!accountId) {\n//   return \"please connect your NEAR account\";\n// }\n\n// const { data, onSubmit } = props;\n\n// const options = [\n//   {\n//     title: \"SocialDB\",\n//     value: \"everycanvas.near/widget/adapter.github\",\n//   },\n//   // {\n//   //   title: \"GitHub\",\n//   //   value: \"hack.near/widget/adapter.github\",\n//   // },\n//   // {\n//   //   title: \"Obsidian\",\n//   //   value: \"hack.near/widget/adapter.obsidian\",\n//   // },\n//   // {\n//   //   title: \"Tldraw\",\n//   //   value: \"hack.near/widget/adapter.tldraw\",\n//   // },\n// ];\n\n// const defaultOption = options[0];\n\n// State.init({\n//   source: defaultOption.title,\n//   adapter: defaultOption.value,\n//   reference: data,\n// });\n\n// const Wrapper = styled.div`\n//   max-width: 400px;\n//   margin: 0 auto;\n// `;\n\n// const Form = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 15px;\n// `;\n\n// const Label = styled.label`\n//   font-weight: bold;\n// `;\n\n// const Input = styled.input`\n//   padding: 5px;\n// `;\n\n// const Select = styled.select`\n//   padding: 8px;\n// `;\n\n// const TextArea = styled.textarea`\n//   padding: 5px;\n//   height: 222px;\n//   resize: vertical;\n// `;\n\n// const onChangeSource = (source) => {\n//   State.update({\n//     source,\n//   });\n// };\n\n// const onChangeAdapter = (adapter) => {\n//   State.update({\n//     adapter,\n//   });\n// };\n\n// const onChangeReference = (reference) => {\n//   State.update({\n//     reference,\n//   });\n// };\n\n// // function generateUID() {\n// //   return (\n// //     Math.random().toString(16).slice(2) +\n// //     Date.now().toString(36) +\n// //     Math.random().toString(16).slice(2)\n// //   );\n// // }\n\n// // const thingId = generateUID();\n\n// // const handleCreate = () => {\n// //   const data = {\n// //     thing: {\n// //       [thingId]: {\n// //         source: state.source,\n// //         adapter: state.adapter,\n// //         reference: state.reference,\n// //       },\n// //     },\n// //   };\n\n// //   Social.set(data);\n// // };\n\n// return (\n//   <Wrapper>\n//     <h4 className=\"mb-3\">\n//       <b>hyperfile creator</b>\n//     </h4>\n//     <Form>\n//       {/* <Label>source</Label>\n//       <Input\n//         type=\"text\"\n//         value={state.source}\n//         onChange={(e) => onChangeSource(e.target.value)}\n//       /> */}\n//       <Label>adapter</Label>\n//       <Select\n//         placeholder={placeholder}\n//         value={state.adapter}\n//         onChange={({ target: { value } }) => onChangeAdapter(value)}\n//       >\n//         {options.map((o) => (\n//           <option value={o.value}>{o.title}</option>\n//         ))}\n//       </Select>\n\n//       <Label htmlFor=\"reference\">reference (JSON)</Label>\n//       <TextArea\n//         type=\"text\"\n//         value={state.reference}\n//         onChange={(e) => onChangeReference(e.target.value)}\n//       />\n//       <button className=\"btn btn-success mt-3\" onClick={() => onSubmit(state)}>\n//         create\n//       </button>\n//     </Form>\n//   </Wrapper>\n// );", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/create.hyperfile", "fact_widget_deployments_id": "8a3ad7eb7cd097fdd018d64e71bc8a85", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}