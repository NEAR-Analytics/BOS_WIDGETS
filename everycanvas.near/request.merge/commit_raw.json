{"tx_hash": "F98Cbq7WBXQHSNAAh272C5GjRbHyJ8ucJJ7gCYMRpkyd", "action_id_social": "71Mk8HzvZxsNJdFkLQu58QDm3hngtACSL1SBL2hF7uLm-0-widget", "block_id": 119359673, "block_timestamp": "2024-05-20T17:41:53.121Z", "signer_id": "everycanvas.near", "widget_name": "request.merge", "source_code": "const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 1rem auto;\n`;\n\nconst TabContent = styled.div`\n  margin-top: 20px;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n  },\n];\n\nconst defaultAdapter = adapters[0];\n\nconst { creatorId } = props;\n\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [filename, setFilename] = useState(props.filename ?? \"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst handleCreate = () => {\n  const isCreator = context.accountId === creatorId;\n\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json).then((reference) => {\n      // now we have a reference to the data\n      // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\n      const thingId = filename ?? generateUID();\n\n      const hyperfile = {\n        [props.type]: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              fileformat: `${props.type}.${source}`,\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              type: props.type,\n            },\n          },\n        },\n      };\n\n      if (creatorId !== context.accountId) {\n        // handle request merge\n        hyperfile.index = {\n          notify: JSON.stringify({\n            key: creatorId,\n            value: {\n              type: \"request\",\n              data: {\n                type: \"merge\",\n                upstream: `${creatorId}/${props.type}/${props.filename}`,\n                origin: `${context.accountId}/${props.type}/${thingId}`,\n              },\n            },\n          }),\n        };\n        hyperfile[props.type][thingId].metadata = {\n          ...hyperfile[props.type][thingId].metadata,\n          upstream: `${creatorId}/${props.type}/${props.filename}`,\n        };\n        // I want to make a request to merge\n        // set upstream and downstream\n      }\n\n      // sometimes we're not logged in, so it doesn't do anything!\n      Social.set(hyperfile, { force: true });\n    });\n  }\n};\n\nreturn (\n  <Wrapper>\n    <h3>request merge</h3>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n\n    <TabContent>\n      {activeTab === \"data\" && (\n        <Form>\n          <FormGroup>\n            <Label>source</Label>\n            <Input\n              type=\"text\"\n              value={source}\n              onChange={(e) => onChangeSource(e.target.value)}\n              disabled={props.source} // disable if source is passed in\n            />\n          </FormGroup>\n          {/* <Widget\n            src=\"bozon.near/widget/CodeDiff\"\n            props={{ currentCode: update, prevCode: src, ...props }}\n          /> */}\n          <textarea\n            className=\"form-control mb-3\"\n            rows={5}\n            value={json}\n            onChange={(e) => setJson(e.target.value)}\n          />\n          <FormGroup>\n            <Label>adapter</Label>\n            <Select value={adapter} onChange={(e) => setAdapter(e.target.value)}>\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <TabContent>\n      {activeTab === \"metadata\" && (\n        <Form>\n          <FormGroup>\n            <Label>name</Label>\n            <Input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n          </FormGroup>\n          <FormGroup>\n            <Label>description</Label>\n            <textarea\n              className=\"form-control mb-3\"\n              rows={5}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <FormGroup>\n      <button className=\"btn btn-success\" onClick={handleCreate}>\n        Create\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/request.merge", "fact_widget_deployments_id": "2e030522779fe559e9c4a8935ef6d891", "inserted_timestamp": "2024-05-20T19:51:25.009Z", "modified_timestamp": "2024-05-20T19:51:25.009Z", "__row_index": 0}