{"tx_hash": "8Hf24Sq13tT6EfRtMnG2w8b4drj3Ytm5kM5eTwMF4XGi", "action_id_social": "Gyfw84SUAG23d1RyPzeNqU6LMirxxCDvhzB7Dq6amoWS-0-widget", "block_id": 110903451, "block_timestamp": "2024-01-20T20:43:34.796Z", "signer_id": "everycanvas.near", "widget_name": "tldraw.ShareZone", "source_code": "/**\n * Modal can be moved to its own module\n */\nconst ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1001;\n`;\n\nconst ModalBox = styled.div`\n  background: white;\n  min-width: 400px;\n  max-width: 600px;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  z-index: 1002;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  justify-content: end;\n  align-items: center;\n`;\n\nconst CloseButton = styled.button`\n  background: #f44336;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 10px 15px;\n  cursor: pointer;\n  float: right;\n`;\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 300px;\n  padding: 10px;\n`;\n\nfunction Modal({ onClose, children }) {\n  return (\n    <ModalBackdrop>\n      <ModalBox>\n        <ModalHeader>\n          <CloseButton onClick={onClose}>Close</CloseButton>\n        </ModalHeader>\n        <ModalContent>{children}</ModalContent>\n      </ModalBox>\n    </ModalBackdrop>\n  );\n}\n\nconst [isModalOpen, setModalOpen] = useState(false);\nconst [activePluginId, setActivePluginId] = useState(null);\n\nconst toggleModal = (pluginId) => {\n  setModalOpen(!isModalOpen);\n  setActivePluginId(pluginId);\n};\n\nconst Button = styled.button`\n  // this could take in theme\n  padding: 10px 20px;\n`;\n\nconst {\n  getSelectedShapes,\n  getSnapshot,\n  deleteShapes,\n  getShapePageBounds,\n  createShapeId,\n  createShape,\n  updateShape,\n  asSvg,\n  asPng,\n  asDataUrl,\n  path,\n  loadSnapshot,\n  getSelectionAsText,\n  getSelectionAsImageDataUrl,\n  getContentOfPreviousResponse,\n  makeEmptyResponseShape,\n  populateResponseShape,\n} = props;\n\nconst parts = path.split(\"/\");\nconst creatorId = parts[0];\n\nconst snapshot = getSnapshot();\nconst selectedShapes = getSelectedShapes();\n\nconst plugins = [\n  // {\n  //   id: \"grant.permissions\",\n  //   button: {\n  //     icon: \"bi bi-unlock\",\n  //     label: \"grant permissions\",\n  //   },\n  //   interface: {\n  //     src: \"everycanvas.near/widget/GrantPermissions\",\n  //     props: {\n  //       path,\n  //     },\n  //     attribution: [\"microchipgnu.near\", \"mob.near\"], // this should come from widget metadata\n  //     isVisible: context.accountId === creatorId,\n  //   },\n  // },\n  {\n    id: \"embed\",\n    button: {\n      icon: \"bi bi-code\",\n      label: \"embed\",\n    },\n    interface: {\n      src: \"everycanvas.near/widget/Embed\",\n      props: {\n        makeEmptyResponseShape: makeEmptyResponseShape,\n        populateResponseShape: populateResponseShape,\n        path: getSelectionAsText(),\n        onSubmit: (path) => {\n          console.log(\"submitted\", path);\n        }\n      },\n      attribution: [\"efiz.near\"], // this should come from widget metadata\n      isVisible: context.accountId === creatorId,\n    },\n  },\n  {\n    id: \"canvas.load\",\n    button: {\n      icon: \"bi bi-clock-history\",\n      label: \"history\",\n    },\n    interface: {\n      src: \"everycanvas.near/widget/hyperfile.load\",\n      props: {\n        // Prop hydration (?)\n        creatorId: creatorId, // requester?\n        source: \"tldraw\", // hardcoded Props\n        type: \"canvas\",\n        filename: \"main\",\n        path: path,\n        loadSnapshot: loadSnapshot\n      },\n      attribution: [\"bozon.near\", \"near\", \"james.near\"], // this should come from widget metadata\n      isVisible: context.accountId === creatorId,\n    },\n  },\n  {\n    id: \"canvas.save\",\n    button: {\n      icon: \"bi bi-upload\",\n      label: \"publish\",\n    },\n    interface: {\n      src: \"everycanvas.near/widget/hyperfile.create\",\n      props: {\n        // Prop hydration (?)\n        creatorId: creatorId, // requester?\n        source: \"tldraw\", // hardcoded Props\n        type: \"canvas\",\n        filename: \"main\",\n        data: JSON.stringify(snapshot), // vs dynamic\n        loadSnapshot: loadSnapshot\n      },\n      attribution: [\"hack.near\", \"flowscience.near\"], // this should come from widget metadata\n      isVisible: context.accountId === creatorId,\n    },\n  },\n  // {\n  //   id: \"canvas.request.merge\",\n  //   button: {\n  //     icon: \"bi bi-sign-merge-right\",\n  //     label: \"request merge\",\n  //   },\n  //   interface: {\n  //     src: \"james.near/widget/update\",\n  //     props: {},\n  //     attribution: [\"james.near\"],\n  //     isVisible: context.accountId !== creatorId,\n  //   },\n  // },\n  // {\n  //   id: \"canvas.post\",\n  //   button: {\n  //     icon: \"bi bi-send\",\n  //     label: \"post\",\n  //     // disabled: selectedShapes.length === 0,\n  //   },\n  //   interface: {\n  //     src: \"everycanvas.near/widget/canvas.post\",\n  //     props: {\n  //       shapes: JSON.stringify(selectedShapes),\n  //       item: {\n  //         type: \"social\",\n  //         path: path,\n  //       },\n  //     },\n  //     attribution: [\"efiz.near\"],\n  //     isVisible: context.accountId,\n  //   },\n  // },\n];\n\nconst activePlugin = plugins.find((plugin) => plugin.id === activePluginId);\n\nreturn (\n  <>\n    {plugins.map(\n      (plugin) =>\n        plugin.interface.isVisible && (\n          <Button\n            className=\"classic\"\n            onClick={() => toggleModal(plugin.id)}\n            disabled={plugin.button.disabled}\n          >\n            <>\n              <i className={plugin.button.icon} />\n              {plugin.button.label}\n            </>\n          </Button>\n        )\n    )}\n    {isModalOpen && (\n      <Modal onClose={toggleModal}>\n        <div className=\"w-100\">\n          <Widget\n            src={activePlugin.interface.src}\n            props={activePlugin.interface.props}\n          />\n        </div>\n        <Widget\n          src=\"miraclx.near/widget/Attribution\"\n          props={{ dep: true, authors: activePlugin.interface.attribution }}\n        />\n      </Modal>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/everycanvas.near/widget/tldraw.ShareZone", "fact_widget_deployments_id": "7268cf1525b4e607bdd27d55c7c7da66", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}