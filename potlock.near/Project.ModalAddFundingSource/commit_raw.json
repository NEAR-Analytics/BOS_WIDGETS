{"tx_hash": "4Z59Msk66hRH8T8NxXvhWxTzJvwHjgeEayubbS2KdMuW", "action_id_social": "AsMtvZG5k39oZ8a5oyutqHzSs1dEDs9MPqE9t6XnZjrq-0-widget", "block_id": 115588449, "block_timestamp": "2024-03-27T15:18:16.507Z", "signer_id": "potlock.near", "widget_name": "Project.ModalAddFundingSource", "source_code": "const {\n  ownerId,\n  isModalOpen,\n  onClose,\n  handleAddFundingSource,\n  fundingSources,\n  fundingSourceIndex,\n} = props;\n// console.log(\"props in add funding source modal: \", props);\nState.init({\n  investorName: fundingSources[fundingSourceIndex]?.investorName || \"\",\n  investorNameError: \"\",\n  description: fundingSources[fundingSourceIndex]?.description || \"\",\n  descriptionError: \"\",\n  denomination: fundingSources[fundingSourceIndex]?.denomination || \"\",\n  denominationError: \"\",\n  amountReceived: fundingSources[fundingSourceIndex]?.amountReceived || \"\",\n  amountReceivedError: \"\",\n});\n// console.log(\"state in add funding source modal: \", state);\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const MONEY_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreiem3zqv4smaflel54lwtl65d7zbulkan3vnfor4fi2sqn3n5p7tpe\";\n// const CLOSE_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  background: #f6f5f3;\n  padding: 10px 20px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n`;\nconst ModalHeaderText = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  color: #292929;\n  line-height: 24px;\n  word-wrap: break-word;\n  margin-left: 8px;\n`;\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 16px 20px 32px 20px;\n  gap: 24px;\n`;\nconst Icon = styled.svg`\n  width: 20px;\n  height: 20px;\n`;\nconst CloseIcon = styled.svg`\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  transition: rotate 300ms ease-in-out;\n  :hover {\n    rotate: 180deg;\n  }\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nreturn (\n  <Widget\n    src={`${ownerId}/widget/Components.Modal`}\n    props={{\n      isModalOpen,\n      onClose,\n      overlayStyle: {\n        zIndex: 1000,\n      },\n      contentStyle: {\n        padding: \"0px\",\n      },\n      children: (\n        <>\n          <ModalHeader>\n            <div></div>\n            <Row>\n              <Icon\n                width=\"12\"\n                height=\"18\"\n                viewBox=\"0 0 12 18\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M6.39016 7.9C4.12016 7.31 3.39016 6.7 3.39016 5.75C3.39016 4.66 4.40016 3.9 6.09016 3.9C7.87016 3.9 8.53016 4.75 8.59016 6H10.8002C10.7302 4.28 9.68016 2.7 7.59016 2.19V0H4.59016V2.16C2.65016 2.58 1.09016 3.84 1.09016 5.77C1.09016 8.08 3.00016 9.23 5.79016 9.9C8.29016 10.5 8.79016 11.38 8.79016 12.31C8.79016 13 8.30016 14.1 6.09016 14.1C4.03016 14.1 3.22016 13.18 3.11016 12H0.910156C1.03016 14.19 2.67016 15.42 4.59016 15.83V18H7.59016V15.85C9.54016 15.48 11.0902 14.35 11.0902 12.3C11.0902 9.46 8.66016 8.49 6.39016 7.9Z\"\n                  fill=\"#151A23\"\n                />\n              </Icon>\n              <ModalHeaderText>Add Past Funding Source</ModalHeaderText>\n            </Row>\n            <CloseIcon\n              viewBox=\"0 0 14 14\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              onClick={onClose}\n            >\n              <path\n                d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\"\n                fill=\"#7B7B7B\"\n              />\n            </CloseIcon>\n          </ModalHeader>\n          <ModalBody>\n            <Widget\n              src={`${ownerId}/widget/Inputs.Text`}\n              props={{\n                label: \"Name of investor\",\n                placeholder: \"Enter investor name\",\n                value: state.investorName,\n                onChange: (val) => State.update({ investorName: val }),\n                validate: () => {\n                  if (state.investorName.length < 3) {\n                    State.update({\n                      investorNameError: \"Must be at least 3 characters\",\n                    });\n                    return;\n                  }\n                  if (state.investorName.length > 50) {\n                    State.update({\n                      investorNameError: \"Must be less than 50 characters\",\n                    });\n                    return;\n                  }\n                  State.update({ investorNameError: \"\" });\n                },\n                error: state.investorNameError,\n              }}\n            />\n            <Widget\n              src={`${ownerId}/widget/Inputs.TextArea`}\n              props={{\n                label: \"Description\",\n                placeholder: \"Type description\",\n                value: state.description,\n                onChange: (description) => State.update({ description }),\n                validate: () => {\n                  if (state.description.length > 500) {\n                    State.update({\n                      descriptionError: \"Must be less than 500 characters\",\n                    });\n                    return;\n                  }\n                  State.update({ descriptionError: \"\" });\n                },\n                error: state.descriptionError,\n              }}\n            />\n            <Widget\n              src={`${ownerId}/widget/Inputs.Text`}\n              props={{\n                label: \"Denomination of investment\",\n                placeholder: \"e.g. NEAR, USD, USDC, etc.\",\n                value: state.denomination,\n                onChange: (val) =>\n                  State.update({ denomination: val.toUpperCase() }),\n                validate: () => {\n                  if (state.denomination.length < 3) {\n                    State.update({\n                      denominationError: \"Must be at least 3 characters\",\n                    });\n                    return;\n                  }\n                  if (state.denomination.length > 10) {\n                    State.update({\n                      denominationError: \"Must be less than 10 characters\",\n                    });\n                    return;\n                  }\n                  State.update({ denominationError: \"\" });\n                },\n                error: state.denominationError,\n              }}\n            />\n            <Widget\n              src={`${ownerId}/widget/Inputs.Text`}\n              props={{\n                label: \"Investment amount\",\n                placeholder: \"e.g. 1000\",\n                value: state.amountReceived,\n                onChange: (val) => State.update({ amountReceived: val }),\n                validate: () => {\n                  // TODO: VALIDATE AMOUNT\n                  if (isNaN(state.amountReceived)) {\n                    State.update({ amountReceivedError: \"Must be a number\" });\n                    return;\n                  }\n                  State.update({ amountReceivedError: \"\" });\n                },\n                error: state.amountReceivedError,\n              }}\n            />\n            <Row style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  text: \"Add Funding Source\",\n                  disabled:\n                    !state.investorName ||\n                    !!state.investorNameError ||\n                    !state.description ||\n                    !!state.descriptionError ||\n                    !state.denomination ||\n                    !!state.denominationError ||\n                    !state.amountReceived ||\n                    !!state.amountReceivedError,\n                  onClick: () => {\n                    const fundingSource = {\n                      investorName: state.investorName,\n                      description: state.description,\n                      denomination: state.denomination,\n                      amountReceived: state.amountReceived,\n                    };\n                    State.update({\n                      investorName: \"\",\n                      investorNameError: \"\",\n                      description: \"\",\n                      descriptionError: \"\",\n                      denomination: \"\",\n                      denominationError: \"\",\n                      amountReceived: \"\",\n                      amountReceivedError: \"\",\n                    });\n                    handleAddFundingSource(fundingSource);\n                  },\n                }}\n              />\n            </Row>\n          </ModalBody>\n        </>\n      ),\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.ModalAddFundingSource", "fact_widget_deployments_id": "84bfffcd19e7dbb29019138be2105303", "inserted_timestamp": "2024-03-27T16:32:19.732Z", "modified_timestamp": "2024-03-27T16:32:19.732Z", "__row_index": 0}