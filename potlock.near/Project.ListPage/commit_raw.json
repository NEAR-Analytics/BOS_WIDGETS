{"tx_hash": "GVKG1EkdvTRmRCAjbrxLVS4TVw3rL6qaC9S9NE267Wxn", "action_id_social": "HHVS6uwTA4rE4uh8LhyB3w1oU3UntbR9NdKMjTBt79bt-0-widget", "block_id": 103983568, "block_timestamp": "2023-10-22T21:18:47.391Z", "signer_id": "potlock.near", "widget_name": "Project.ListPage", "source_code": "const ownerId = \"potlock.near\";\nconst registryId = \"registry1.tests.potlock.near\"; // TODO: update when registry is deployed\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst DEFAULT_BANNER_IMAGE_URL =\n  IPFS_BASE_URL + \"bafkreih4i6kftb34wpdzcuvgafozxz6tk6u4f5kcr2gwvtvxikvwriteci\";\nconst DEFAULT_PROFILE_IMAGE_URL =\n  IPFS_BASE_URL + \"bafkreibwq2ucyui3wmkyowtzau6txgbsp6zizy4l2s5hkymsyv6tc75j3u\";\n\nconst getImageUrlFromSocialImage = (image) => {\n  if (image.url) {\n    return image.url;\n  } else if (image.ipfs_cid) {\n    return IPFS_BASE_URL + image.ipfs_cid;\n  }\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst HeroOuter = styled.div`\n  padding: 136px 64px;\n`;\n\nconst HeroInner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Separator = styled.div`\n  width: 100%;\n  height: 96px;\n  background-color: #f8f8f8;\n`;\n\nconst SectionHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst SectionTitle = styled.div`\n  font-size: 24px;\n  font-weight: 600;\n  color: #2e2e2e;\n  font-family: Mona-Sans;\n`;\n\nconst ProjectsCount = styled.div`\n  color: #7b7b7b;\n  font-size: 24px;\n  font-weight: 400;\n  margin-left: 32px;\n`;\n\nconst ProjectsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 96px 64px;\n`;\n\nState.init({\n  registeredProjects: null, // TODO: change this back to null\n  // registeredProjects: sampleProjects,\n  getRegisteredProjectsError: \"\",\n});\n\nif (context.accountId && !state.registeredProjects) {\n  Near.asyncView(registryId, \"get_projects\", {})\n    .then((projects) => {\n      // get social data for each project\n      // name\n      // description\n      // bannerImage\n      // profileImage\n      // category\n      // horizon stuff, e.g. tags\n      Near.asyncView(\"social.near\", \"get\", {\n        keys: projects.map((project) => `${project.id}/profile/**`),\n      }).then((socialData) => {\n        console.log(\"social data: \", socialData);\n        const formattedProjects = projects.map((project) => {\n          console.log(\"project line 153: \", project);\n          const profileData = socialData[project.id]?.profile;\n          console.log(\"profileData line 154: \", profileData);\n          let profileImageUrl = DEFAULT_PROFILE_IMAGE_URL;\n          if (profileData.image) {\n            const imageUrl = getImageUrlFromSocialImage(profileData.image);\n            if (imageUrl) profileImageUrl = imageUrl;\n          }\n          // get banner image URL\n          let bannerImageUrl = DEFAULT_BANNER_IMAGE_URL;\n          if (profileData.backgroundImage) {\n            const imageUrl = getImageUrlFromSocialImage(profileData.backgroundImage);\n            if (imageUrl) bannerImageUrl = imageUrl;\n          }\n          const formatted = {\n            id: project.id,\n            name: profileData.name ?? \"\",\n            description: profileData.description ?? \"\",\n            bannerImageUrl,\n            profileImageUrl,\n            tags: [profileData.category.text ?? \"\"], // TODO: change this to get tags from horizon/social\n          };\n          console.log(\"formatted: \", formatted);\n          return formatted;\n        });\n        console.log(\"formatted projects: \", formattedProjects);\n        State.update({ registeredProjects: formattedProjects });\n      });\n    })\n    .catch((e) => {\n      console.log(\"error getting projects: \", e);\n      State.update({ getRegisteredProjectsError: e });\n    });\n}\n\nconsole.log(\"state in ListPage: \", state);\n\nreturn (\n  <Container>\n    {!state.registeredProjects ? (\n      <div class=\"spinner-border text-secondary\" role=\"status\" />\n    ) : (\n      <>\n        <Widget\n          src={`${ownerId}/widget/Components.Header`}\n          props={{\n            title1: \"Transforming\",\n            title2: \"Funding for Public Goods\",\n            description:\n              \"Lorem ipsum dolor sit amet consectetur. Vel sit nunc in nunc. Viverra arcu eu sed consequat.\",\n            centered: true,\n            buttonPrimary: (\n              <Widget\n                src={`${ownerId}/widget/Buttons.ActionButton`}\n                props={{\n                  type: \"primary\",\n                  text: \"Explore projects\",\n                  disabled: false,\n                }}\n              />\n            ),\n            buttonSecondary: (\n              <Widget\n                src={`${ownerId}/widget/Buttons.NavigationButton`}\n                props={{\n                  type: \"secondary\",\n                  text: \"Create project\",\n                  disabled: false,\n                  href: `?tab=createproject`,\n                }}\n              />\n            ),\n          }}\n        />\n        <Separator />\n        {/* <SectionTitle>Featured projects</SectionTitle> */}\n        {/* <Widget\n      src={`${ownerId}/widget/Project.Carousel`}\n      props={{\n        projects: sampleProjects,\n      }}\n    /> */}\n        <ProjectsContainer>\n          <SectionHeader>\n            <SectionTitle>All projects</SectionTitle>\n            <ProjectsCount>{state.registeredProjects.length}</ProjectsCount>\n          </SectionHeader>\n          <Widget\n            src={`${ownerId}/widget/Project.ListSection`}\n            props={{\n              projects: state.registeredProjects,\n              renderItem: (project) => (\n                <Widget\n                  src={`${ownerId}/widget/Project.Card`}\n                  props={{\n                    project,\n                  }}\n                />\n              ),\n            }}\n          />\n        </ProjectsContainer>\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.ListPage", "fact_widget_deployments_id": "2bc5f0803619e8a4866ded9107af18fa", "inserted_timestamp": "2023-10-22T23:23:24.071Z", "modified_timestamp": "2023-10-22T23:23:24.071Z", "__row_index": 6}