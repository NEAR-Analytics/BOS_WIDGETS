{"tx_hash": "45FzbbVBFBh3bk9screxeKZVecnvFTyS3hynYp4w6mCV", "action_id_social": "EJF6npjvJ96RrVFXB7GLW4uAuKmRFYQ6Yr9ef5Vhc2u1-0-widget", "block_id": 113704217, "block_timestamp": "2024-02-27T19:42:17.379Z", "signer_id": "potlock.near", "widget_name": "utils", "source_code": "const IPFS_BASE_URL = \"https://ipfs.near.social/ipfs/\";\nconst nearToUsd = useCache(\n  () =>\n    asyncFetch(\"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\").then(\n      (res) => {\n        if (res.ok) {\n          return res.body.near.usd;\n        }\n      }\n    ),\n  \"nearToUsd\"\n);\n\nreturn {\n  formatDate: (timestamp) => {\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const date = new Date(timestamp);\n\n    const year = date.getFullYear();\n    const month = months[date.getMonth()];\n    const day = date.getDate();\n    let hour = date.getHours();\n    const minute = date.getMinutes();\n    const ampm = hour >= 12 ? \"pm\" : \"am\";\n\n    // Convert hour to 12-hour format\n    hour = hour % 12;\n    hour = hour ? hour : 12; // the hour '0' should be '12'\n\n    // Minutes should be two digits\n    const minuteFormatted = minute < 10 ? \"0\" + minute : minute;\n\n    return `${month} ${day}, ${year} ${hour}:${minuteFormatted}${ampm}`;\n  },\n  daysAgo: (timestamp) => {\n    const now = new Date();\n    const pastDate = new Date(timestamp);\n    const differenceInTime = now - pastDate;\n\n    // Convert time difference from milliseconds to days\n    const differenceInDays = Math.floor(differenceInTime / (1000 * 3600 * 24));\n    return differenceInDays === 0\n      ? \"< 1 day ago\"\n      : `${differenceInDays} ${differenceInDays === 1 ? \"day\" : \"days\"} ago`;\n  },\n  daysUntil: (timestamp) => {\n    const now = new Date();\n    const futureDate = new Date(timestamp);\n    const differenceInTime = futureDate - now;\n\n    // Convert time difference from milliseconds to days\n    const differenceInDays = Math.ceil(differenceInTime / (1000 * 3600 * 24));\n\n    return `${differenceInDays} ${differenceInDays === 1 ? \"day\" : \"days\"}`;\n  },\n  getTagsFromSocialProfileData: (profileData) => {\n    // first try to get tags from plCategories, then category (deprecated/old format), then default to empty array\n    if (!profileData) return [];\n    const DEPRECATED_CATEGORY_MAPPINGS = {\n      \"social-impact\": \"Social Impact\",\n      \"non-profit\": \"NonProfit\",\n      climate: \"Climate\",\n      \"public-good\": \"Public Good\",\n      \"de-sci\": \"DeSci\",\n      \"open-source\": \"Open Source\",\n      community: \"Community\",\n      education: \"Education\",\n    };\n    const tags = profileData.plCategories\n      ? JSON.parse(profileData.plCategories)\n      : profileData.category\n      ? [profileData.category.text ?? DEPRECATED_CATEGORY_MAPPINGS[profileData.category] ?? \"\"]\n      : [];\n    return tags;\n  },\n  getTeamMembersFromSocialProfileData: (profileData) => {\n    if (!profileData) return [];\n    const team = profileData.plTeam\n      ? JSON.parse(profileData.plTeam)\n      : profileData.team\n      ? Object.entries(profileData.team)\n          .filter(([_, v]) => v !== null)\n          .map(([k, _]) => k)\n      : [];\n    return team;\n  },\n  doesUserHaveDaoFunctionCallProposalPermissions: (policy) => {\n    // TODO: break this out (NB: duplicated in Project.CreateForm)\n    const userRoles = policy.roles.filter((role) => {\n      if (role.kind === \"Everyone\") return true;\n      return role.kind.Group && role.kind.Group.includes(context.accountId);\n    });\n    const kind = \"call\";\n    const action = \"AddProposal\";\n    // Check if the user is allowed to perform the action\n    const allowed = userRoles.some(({ permissions }) => {\n      return (\n        permissions.includes(`${kind}:${action}`) ||\n        permissions.includes(`${kind}:*`) ||\n        permissions.includes(`*:${action}`) ||\n        permissions.includes(\"*:*\")\n      );\n    });\n    return allowed;\n  },\n  basisPointsToPercent: (basisPoints) => {\n    return basisPoints / 100;\n  },\n  ipfsUrlFromCid: (cid) => {\n    return `${IPFS_BASE_URL}${cid}`;\n  },\n  yoctosToNear: (amountYoctos, abbreviate) => {\n    return new Big(amountYoctos).div(1e24).toNumber().toFixed(2) + (abbreviate ? \" N\" : \" NEAR\");\n  },\n  validateNearAddress: (address) => {\n    const NEAR_ACCOUNT_ID_REGEX = /^(?=.{2,64}$)(?!.*\\.\\.)(?!.*-$)(?!.*_$)[a-z\\d._-]+$/i;\n    let isValid = NEAR_ACCOUNT_ID_REGEX.test(address);\n    // Additional \".near\" check for IDs less than 64 characters\n    if (address.length < 64 && !address.endsWith(\".near\")) {\n      isValid = false;\n    }\n    return isValid;\n  },\n  validateEVMAddress: (address) => {\n    // Check if the address is defined and the length is correct (42 characters, including '0x')\n    if (!address || address.length !== 42) {\n      return false;\n    }\n    // Check if the address starts with '0x' and contains only valid hexadecimal characters after '0x'\n    const re = /^0x[a-fA-F0-9]{40}$/;\n    return re.test(address);\n  },\n  validateGithubRepoUrl: (url) => {\n    // Regular expression to match the GitHub repository URL pattern\n    // This regex checks for optional \"www.\", a required \"github.com/\", and then captures the username and repo name segments\n    const githubRepoUrlPattern =\n      /^(https?:\\/\\/)?(www\\.)?github\\.com\\/[a-zA-Z0-9-]+\\/[a-zA-Z0-9_.-]+\\/?$/;\n    return githubRepoUrlPattern.test(url);\n  },\n  nearToUsd,\n  yoctosToUsd: (amount) => {\n    return nearToUsd ? \"~$\" + new Big(amount).mul(nearToUsd).div(1e24).toNumber().toFixed(2) : null;\n  },\n  nearToUsdWithFallback: (amountNear) => {\n    return nearToUsd ? \"~$\" + (amountNear * nearToUsd).toFixed(2) : amountNear + \" NEAR\";\n  },\n  yoctosToUsdWithFallback: (amountYoctos) => {\n    return nearToUsd\n      ? \"~$\" + new Big(amountYoctos).mul(nearToUsd).div(1e24).toNumber().toFixed(2)\n      : new Big(amountYoctos).div(1e24).toNumber().toFixed(2) + \" NEAR\";\n  },\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/utils", "fact_widget_deployments_id": "e85ede707bd9aff5caba60dc8ceb273d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}