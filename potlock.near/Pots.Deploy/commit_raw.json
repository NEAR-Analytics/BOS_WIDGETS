{"tx_hash": "C8Rr1rHA96zhbizwDzvxf6tdPwjdSdthqFLsfRrQmAQ6", "action_id_social": "2eMRrSQQxtdqYC7Pn3yTK2HbMCYRoPeJDn46xZB4upV6-0-widget", "block_id": 113425740, "block_timestamp": "2024-02-23T14:42:31.168Z", "signer_id": "potlock.near", "widget_name": "Pots.Deploy", "source_code": "const { ownerId } = props;\n// const potFactoryContractId = \"potfactory1.tests.potlock.near\"; // TODO: update to production address when contract is deployed to prod\n\n// const DEFAULT_REGISTRY_PROVIDER = \"registry.potlock.near\";\n// const DEFAULT_SYBIL_WRAPPER_PROVIDER = \"sybil.potlock.near\";\n// const DEFAULT_PROTOCOL_CONFIG_PROVIDER = potFactoryContractId;\n// const CURRENT_SOURCE_CODE_VERSION = \"0.1.0\";\n// const SOURCE_CODE_LINK = \"https://github.com/PotLock/core\"; // for use in contract source metadata\nconst POT_CODE_LINK = \"https://github.com/PotLock/core/tree/main/contracts/pot\"; // for directing user to view source code for Pot\n\n// Big.PE = 100;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 0px 175px;\n`;\n\nconst HeaderContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 24px;\n  padding: 48px;\n`;\n\nconst HeaderTitle = styled.div`\n  color: #292929;\n  font-size: 60px;\n  font-weight: 400;\n  line-height: 72px;\n  word-wrap: break-word;\n  font-family: Lora;\n`;\n\nconst HeaderDescription = styled.div`\n  color: #292929;\n  font-size: 17px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n  text-align: center;\n`;\n\nconst SuccessContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  //   justify-content: center;\n  width: 100%;\n  padding: 24px;\n  gap: 24px;\n`;\n\n// State.init({\n//   // owner: context.accountId,\n//   // ownerError: \"\",\n//   // name: \"\",\n//   // nameError: \"\",\n//   // description: \"\",\n//   // descriptionError: \"\",\n//   // referrerFeeMatchingPoolBasisPoints: \"\",\n//   // referrerFeeMatchingPoolBasisPointsError: \"\",\n//   // referrerFeePublicRoundBasisPoints: \"\",\n//   // referrerFeePublicRoundBasisPointsError: \"\",\n//   //   protocolFeeBasisPoints: \"\",\n//   //   protocolFeeBasisPointsError: \"\",\n//   // applicationStartDate: \"\",\n//   // applicationStartDateError: \"\",\n//   // applicationEndDate: \"\",\n//   // applicationEndDateError: \"\",\n//   // matchingRoundStartDate: \"\",\n//   // matchingRoundStartDateError: \"\",\n//   // matchingRoundEndDate: \"\",\n//   // matchingRoundEndDateError: \"\",\n//   // chef: \"\",\n//   // chefError: \"\",\n//   // chefFeeBasisPoints: \"\",\n//   // chefFeeBasisPointsError: \"\",\n//   // maxProjects: \"\",\n//   // maxProjectsError: \"\",\n//   // latestSourceCodeCommitHash: \"\",\n//   // deploymentSuccess: false,\n// });\n\n// const MAX_DESCRIPTION_LENGTH = 320;\n\n// const userIsWhitelisted = props.QF_WHITELISTED_ACCOUNTS.includes(context.accountId);\n\n// if (!userIsWhitelisted) return \"Unauthorized\";\n\n// if (!state.latestSourceCodeCommitHash) {\n//   const res = fetch(\"https://api.github.com/repos/PotLock/core/commits\");\n//   console.log(\"res: \", res);\n//   if (res.ok && res.body.length > 0) {\n//     State.update({\n//       latestSourceCodeCommitHash: res.body[0].sha,\n//     });\n//   }\n// }\n\n// // TODO: GET PROTOCOL FEES FROM POTFACTORY CONTRACT AND SET ON STATE & DISPLAY IN FORM AS READ-ONLY INPUTS\n\n// const handleDeploy = () => {\n//   // create deploy pot args\n//   const deployArgs = {\n//     owner: state.owner,\n//     admins: [], // TODO: CHANGE TO TAKE FROM STATE\n//     chef: state.chef,\n//     pot_name: state.name,\n//     pot_description: state.description,\n//     max_projects: parseInt(state.maxProjects),\n//     application_start_ms: convertToUTCTimestamp(state.applicationStartDate),\n//     application_end_ms: convertToUTCTimestamp(state.applicationEndDate),\n//     public_round_start_ms: convertToUTCTimestamp(state.matchingRoundStartDate),\n//     public_round_end_ms: convertToUTCTimestamp(state.matchingRoundEndDate),\n//     registry_provider: DEFAULT_REGISTRY_PROVIDER,\n//     sybil_wrapper_provider: DEFAULT_SYBIL_WRAPPER_PROVIDER,\n//     custom_sybil_checks: null, // not necessary to include null values but doing so for clarity\n//     custom_min_threshold_score: null,\n//     referral_fee_matching_pool_basis_points: state.referrerFeeMatchingPoolBasisPoints,\n//     referral_fee_public_round_basis_points: state.referrerFeePublicRoundBasisPoints,\n//     chef_fee_basis_points: state.chefFeeBasisPoints,\n//     protocol_config_provider: DEFAULT_PROTOCOL_CONFIG_PROVIDER, // TODO: this should not be passed in here, as it's too easy to override. Should be set by factory contract when deploying.\n//     source_metadata: {\n//       version: CURRENT_SOURCE_CODE_VERSION,\n//       commit_hash: state.latestSourceCodeCommitHash,\n//       link: SOURCE_CODE_LINK,\n//     },\n//   };\n//   console.log(\"deployargs: \", deployArgs);\n\n//   Near.asyncView(potFactoryContractId, \"calculate_min_deployment_deposit\", {\n//     args: deployArgs,\n//   }).then((amount) => {\n//     const amountYoctos = Big(amount).plus(Big(\"20000000000000000000000\")); // add extra 0.02 NEAR as buffer\n//     const transactions = [\n//       {\n//         contractName: potFactoryContractId,\n//         methodName: \"deploy_pot\",\n//         deposit: amountYoctos,\n//         args: { pot_args: deployArgs },\n//         gas: props.ONE_TGAS.mul(300),\n//       },\n//     ];\n//     const now = Date.now();\n//     Near.call(transactions);\n//     // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n//     // <---- EXTENSION WALLET HANDLING ---->\n//     // poll for updates\n//     const pollIntervalMs = 1000;\n//     // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n//     const pollId = setInterval(() => {\n//       Near.asyncView(potFactoryContractId, \"get_pots\", {}).then((pots) => {\n//         console.log(\"pots: \", pots);\n//         const pot = pots.find(\n//           (pot) => pot.deployed_by === context.accountId && pot.deployed_at_ms > now\n//         );\n//         if (pot) {\n//           clearInterval(pollId);\n//           State.update({ deploymentSuccess: true });\n//         }\n//       });\n//     }, pollIntervalMs);\n//   });\n// };\n\n// console.log(\"state: \", state);\n\n// const convertToUTCTimestamp = (localDateTime) => {\n//   if (!localDateTime) {\n//     return;\n//   }\n//   return new Date(localDateTime).getTime();\n// };\n\n// const validateAndUpdatePercentages = (percent, stateKey, errorKey) => {\n//   // TODO: move this to separate component for percentage input that accepts \"basisPoints\" bool parameter\n//   const percentFloat = parseFloat(percent);\n//   const updates = {\n//     [errorKey]: \"\",\n//   };\n//   if (!percent) {\n//     updates[stateKey] = \"\";\n//   } else if (percentFloat && percentFloat <= 100) {\n//     updates[stateKey] = percentFloat * 100;\n//   }\n//   State.update(updates);\n// };\n\n// const FormSectionLeft = (title, description) => {\n//   return (\n//     <FormSectionLeftDiv>\n//       <FormSectionTitle>{title}</FormSectionTitle>\n//       <FormSectionDescription>{description}</FormSectionDescription>\n//     </FormSectionLeftDiv>\n//   );\n// };\n\nreturn (\n  <Container>\n    {props.deploymentSuccess || state.deploymentSuccess ? (\n      <SuccessContainer>\n        <HeaderTitle>Deployment Successful!</HeaderTitle>\n        <Widget\n          src={`${ownerId}/widget/Components.Button`}\n          props={{\n            type: \"primary\",\n            text: \"View all pots\",\n            style: props.style || {},\n            href: props.hrefWithParams(`?tab=pots`),\n          }}\n        />\n      </SuccessContainer>\n    ) : (\n      <>\n        <HeaderContent>\n          <HeaderTitle>Deploy Pot</HeaderTitle>\n          <HeaderDescription>\n            Create a profile for your impact project to receive direct donations, qualify for\n            funding rounds, join NEAR's accelerator, and get discovered across social platforms.\n          </HeaderDescription>\n          <a href={POT_CODE_LINK} target=\"_blank\">\n            View code\n          </a>\n        </HeaderContent>\n        <Widget\n          src={`${ownerId}/widget/Pots.ConfigForm`}\n          props={{\n            ...props,\n          }}\n        />\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Deploy", "fact_widget_deployments_id": "d27e749f658ee0dd77d3f322dae2979e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 2}