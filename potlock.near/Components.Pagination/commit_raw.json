{"tx_hash": "BqeM3Ywrc6fsJGRBfTmgj9VLZufr74kUFAWeWG4uzbeu", "action_id_social": "CbcXWw3Bg8VRMuq2gTqPrRBAjKnvCgLnqJrKCkR4mXx5-0-widget", "block_id": 115722656, "block_timestamp": "2024-03-29T14:20:36.213Z", "signer_id": "potlock.near", "widget_name": "Components.Pagination", "source_code": "const { onPageChange, data, currentPage, perPage, customSyle, bgColor } = props;\nconst siblingCount = props.siblingCount ?? 1;\nconst showArrows = props.showArrows ?? false;\nconst totalCount = data?.length;\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({ length }, (_, idx) => idx + start);\n};\n\nconst usePagination = ({ totalCount, perPage, siblingCount, currentPage }) => {\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / perPage);\n\n    const totalPageNumbers = siblingCount + 3;\n\n    if (totalPageNumbers >= totalPageCount || totalPageCount < 6) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex <= totalPageCount - 3;\n\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + siblingCount;\n      let leftRange = range(1, leftItemCount);\n\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n    if (!shouldShowLeftDots && !shouldShowRightDots) {\n      return range(1, totalPageCount);\n    }\n  }, [totalCount, perPage, siblingCount, currentPage]);\n\n  return paginationRange;\n};\n\nconst paginationRange = usePagination({\n  currentPage,\n  totalCount,\n  siblingCount,\n  perPage,\n});\n\nif (currentPage === 0 || paginationRange.length < 2) {\n  return \"\";\n}\n\nconst onNext = () => {\n  onPageChange(currentPage + 1);\n};\n\nconst onPrevious = () => {\n  onPageChange(currentPage - 1);\n};\n\nlet lastPage = paginationRange[paginationRange.length - 1];\n\nconst Container = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  list-style-type: none;\n  ${customSyle || \"\"}\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    &.disabled {\n      pointer-events: none;\n\n      .arrow::before {\n        border-right: 0.12em solid rgba(0, 0, 0, 0.43);\n        border-top: 0.12em solid rgba(0, 0, 0, 0.43);\n      }\n\n      &:hover {\n        cursor: default;\n      }\n    }\n  }\n  .pagination-item {\n    border: 1px solid transparent;\n    background: ${bgColor};\n    border-radius: 2px;\n    padding: 10px;\n    font-size: 12px;\n    color: white;\n    cursor: pointer;\n    transition: all 300ms;\n\n    &.dots:hover {\n      cursor: default;\n      opacity: 1;\n    }\n    &:hover {\n      opacity: 0.75;\n    }\n\n    &.selected {\n      background: white;\n      cursor: default;\n      color: ${bgColor};\n      border-color: ${bgColor};\n    }\n  }\n  .arrow {\n    cursor: pointer;\n    &::before {\n      position: relative;\n      content: \"\";\n      display: inline-block;\n      width: 0.4em;\n      height: 0.4em;\n      border-right: 0.12em solid rgba(0, 0, 0, 0.87);\n      border-top: 0.12em solid rgba(0, 0, 0, 0.87);\n    }\n\n    &.left {\n      transform: rotate(-135deg) translate(-50%);\n    }\n\n    &.right {\n      transform: rotate(45deg);\n    }\n  }\n`;\nreturn (\n  <Container>\n    {showArrows && (\n      <li className={`${currentPage === 1 ? \"disabled\" : \"\"}`} onClick={onPrevious}>\n        <div className=\"arrow left\" />\n      </li>\n    )}\n    {paginationRange?.length > 0 &&\n      paginationRange.map((pageNumber) => {\n        if (pageNumber === DOTS) {\n          return <li className=\"pagination-item dots\">&#8230;</li>;\n        }\n\n        return (\n          <li\n            className={`pagination-item ${pageNumber === currentPage ? \"selected\" : \"\"}`}\n            onClick={() => onPageChange(pageNumber)}\n          >\n            {pageNumber}\n          </li>\n        );\n      })}\n    {showArrows && (\n      <li className={`${currentPage === lastPage ? \"disabled\" : \"\"}`} onClick={onNext}>\n        <div className=\"arrow right\" />\n      </li>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Components.Pagination", "fact_widget_deployments_id": "628ffe2a06d67a347c69c81f8beea554", "inserted_timestamp": "2024-03-29T15:31:57.070Z", "modified_timestamp": "2024-03-29T15:31:57.070Z", "__row_index": 1}