{"tx_hash": "3d8acTg6V5SU2nbNGAJMyzwW7AWmKSqiPrPpJ79bmKQp", "action_id_social": "7QkRMAcEo86n8RgAL7VbFxdcAYGGHJsTkiFbS4egipbC-0-widget", "block_id": 114030033, "block_timestamp": "2024-03-03T19:00:45.406Z", "signer_id": "potlock.near", "widget_name": "Project.ModalDonation", "source_code": "const {\n  allPots,\n  recipientId, // TODO: change this to projectId\n  referrerId,\n  // potId,\n  // potDetail,\n  onClose,\n  NADABOT_CONTRACT_ID,\n  POT,\n} = props;\nconst { ownerId, NADABOT_HUMAN_METHOD, NADA_BOT_URL, SUPPORTED_FTS } = VM.require(\n  \"potlock.near/widget/constants\"\n) || {\n  NADABOT_HUMAN_METHOD: \"\",\n  ownerId: \"\",\n  NADA_BOT_URL: \"\",\n  SUPPORTED_FTS: {},\n};\n// console.log(\"props in donation modal: \", props);\n\nconst PotlockRegistrySDK =\n  VM.require(\"potlock.near/widget/SDK.registry\") ||\n  (() => ({\n    getProjects: () => {},\n  }));\nconst registry = PotlockRegistrySDK({ env: props.env });\n\nconst projects = registry.getProjects() || [];\n\nconst PotlockDonateSDK =\n  VM.require(\"potlock.near/widget/SDK.donate\") ||\n  (() => ({\n    getContractId: () => {},\n    getConfig: () => {},\n  }));\nconst donate = PotlockDonateSDK({ env: props.env });\n\nlet PotFactorySDK =\n  VM.require(\"potlock.near/widget/SDK.potfactory\") ||\n  (() => ({\n    getPots: () => {},\n  }));\nPotFactorySDK = PotFactorySDK({ env: props.env });\nconst pots = PotFactorySDK.getPots();\n\nconst { nearToUsd } = VM.require(\"potlock.near/widget/utils\") || {\n  nearToUsd: 1,\n};\n\nconst approvedProjectIds = useMemo(\n  // TODO: get projects for pot if potId\n  () => projects.filter((project) => project.status === \"Approved\").map((project) => project.id),\n  [projects]\n);\n\nconst protocolConfigContractId = potDetail ? potDetail?.protocol_config_provider.split(\":\")[0] : \"\";\nconst protocolConfigViewMethodName = potDetail\n  ? potDetail?.protocol_config_provider.split(\":\")[1]\n  : \"\";\nconst protocolConfig =\n  protocolConfigContractId && protocolConfigViewMethodName\n    ? Near.view(protocolConfigContractId, protocolConfigViewMethodName, {})\n    : null;\n\nconst donationContractConfig = !potDetail ? donate.getConfig() || {} : null;\n\nconst [protocolFeeRecipientAccount, protocolFeeBasisPoints, referralFeeBasisPoints] = useMemo(\n  // if this is a pot donation, use pot config, else use donation contract config\n  () => {\n    if (protocolConfig) {\n      return [\n        protocolConfig.account_id,\n        protocolConfig.basis_points,\n        potDetail.referral_fee_public_round_basis_points,\n      ];\n    } else if (donationContractConfig) {\n      return [\n        donationContractConfig.protocol_fee_recipient_account,\n        donationContractConfig.protocol_fee_basis_points,\n        donationContractConfig.referral_fee_basis_points,\n      ];\n    } else {\n      return [\"\", 0, 0];\n    }\n  }\n);\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst CLOSE_ICON_URL =\n  IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\nconst EDIT_ICON_URL = IPFS_BASE_URL + \"bafkreigc2laqrwu6g4ihm5n2qfxwl3g5phujtrwybone2ouxaz5ittjzee\";\nconst NADABOT_ICON_URL =\n  IPFS_BASE_URL + \"bafkreib2iag425b6dktehxlrshchyp2pccg5r6ea2blrnzppqia77kzdbe\";\nconst ALERT_ICON_URL =\n  IPFS_BASE_URL + \"bafkreicqarojxk6jhdtsk2scfsmnigqpxjfgar6om4wlhn5xmqbbu74u5i\";\n\nconst MAX_NAME_LENGTH = 60;\nconst MAX_DESCRIPTION_LENGTH = 77;\n\nconst profile = Social.getr(`${recipientId}/profile`);\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 20px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  background: #f6f5f3;\n  padding: 10px 20px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n`;\n\nconst ModalHeaderText = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  color: #292929;\n  line-height: 24px;\n  word-wrap: break-word;\n  margin-left: 8px;\n`;\n\nconst PointerIcon = styled.img`\n  width: 24px;\n  height: 24px;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Icon = styled.img`\n  width: 20px;\n  height: 20px;\n`;\n\nconst HintText = styled.div`\n  font-size: 11px;\n  color: #7b7b7b;\n  font-weight: 400;\n  line-height: 16px;\n  word-wrap: break-word;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 16px 20px 32px 20px;\n  gap: 24px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst TitleText = styled.div`\n  font-size: 14px;\n  color: #292929;\n  font-weight: 600;\n  line-height: 24px;\n  word-break: break-word;\n`;\n\nconst SubtitleText = styled.div`\n  font-size: 14px;\n  color: #7b7b7b;\n  font-weight: 400;\n  line-height: 24px;\n  word-break: break-word;\n`;\n\nconst AddNote = styled.div`\n  font-size: 14px;\n  color: #292929;\n  font-weight: 500;\n  line-height: 20px;\n  word-wrap: break-word;\n`;\n\nconst Label = styled.label`\n  font-size: 12px;\n  line-height: 16px;\n  word-wrap: break-word;\n  color: #2e2e2e;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst UserChipLink = styled.a`\n  display: flex;\n  flex-direction: row;\n  // align-items: center;\n  // justify-content: center;\n  padding: 2px 12px;\n  margin: 0px 4px;\n  gap: 4px;\n  border-radius: 32px;\n  background: #ebebeb;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst TextBold = styled.div`\n  color: #292929;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 20px;\n  word-wrap: break-word;\n  text-align: center;\n`;\n\nconst InfoBanner = styled.a`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #dd3345;\n  padding: 2px 0px;\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  > div {\n    color: white;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 24px;\n  }\n`;\n\nconst InfoSection = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 16px 20px;\n  border-radius: 8px;\n  border: 1px #dd3345 solid;\n  width: 100%;\n  background: #fef3f2;\n  gap: 16px;\n`;\n\nconst VerifyLink = styled.a`\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n  text-align: center;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst LinkSvg = styled.svg`\n  width: 20px;\n  height: 20px;\n  fill: none;\n  transition: transform 0.2s ease;\n\n  &:hover {\n    transform: rotate(45deg);\n  }\n\n  @media screen and (max-width: 768px) {\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nconst DENOMINATION_OPTIONS = [{ text: \"NEAR\", value: \"NEAR\" }];\n\nconst DEFAULT_DONATION_AMOUNT = \"1\";\n\nconst MAX_NOTE_LENGTH = 60;\n\nState.init({\n  amount: DEFAULT_DONATION_AMOUNT,\n  denomination: DENOMINATION_OPTIONS[0].value,\n  showBreakdown: false,\n  bypassProtocolFee: false,\n  bypassChefFee: false,\n  addNote: false,\n  donationNote: \"\",\n  donationNoteError: \"\",\n  allPots: null,\n  activeRoundsForProject: null, // mapping of potId to { potDetail }\n  intervalId: null,\n  isUserHumanVerified: null,\n});\n\nif (state.allPots && !state.activeRoundsForProject) {\n  // pots have been fetched but active rounds have not been determined\n  const activeRounds = Object.entries(state.allPots).filter(\n    ([_id, { approvedProjects, detail }]) => {\n      const { public_round_start_ms, public_round_end_ms } = detail;\n      const now = Date.now();\n      const approved = (approvedProjects || []).filter((proj) => {\n        return (\n          proj.project_id === recipientId &&\n          public_round_start_ms < now &&\n          public_round_end_ms > now\n        );\n      });\n      return approved.length > 0;\n    }\n  );\n  State.update({\n    activeRoundsForProject: activeRounds.reduce((acc, [id, pot]) => {\n      acc[id] = {\n        potDetail: pot.detail,\n      };\n      return acc;\n    }, {}),\n  });\n}\n\nif (!state.allPots) {\n  if (pots) {\n    State.update({\n      allPots: pots.reduce((acc, pot) => {\n        acc[pot.id] = {\n          detail: Near.view(pot.id, \"get_config\", {}),\n          approvedProjects: Near.view(pot.id, \"get_approved_applications\", {}),\n        };\n        return acc;\n      }, {}),\n    });\n  }\n}\n\nconst handleModalClose = () => {\n  resetState();\n  onClose();\n};\n\nconsole.log(\"state in donation modal: \", state);\n\nif (state.isUserHumanVerified === null) {\n  Near.asyncView(NADABOT_CONTRACT_ID, NADABOT_HUMAN_METHOD, {\n    account_id: context.accountId,\n  }).then((isUserHumanVerified) => {\n    State.update({ isUserHumanVerified });\n  });\n}\n\nconst activeRound = useMemo(() => {\n  if (!state.activeRoundsForProject) return;\n  return Object.entries(state.activeRoundsForProject)[0];\n}, [state.activeRoundsForProject]);\nconsole.log(\"active round: \", activeRound);\n\nconst resetState = () => {\n  State.update({\n    amount: DEFAULT_DONATION_AMOUNT,\n    denomination: DENOMINATION_OPTIONS[0].value,\n    showBreakdown: false,\n    bypassProtocolFee: false,\n    bypassChefFee: false,\n    addNote: false,\n    donationNote: \"\",\n    donationNoteError: \"\",\n  });\n};\n\nconst profileName = profile?.name || \"No name\";\n\nconst handleAddToCart = () => {\n  props.addProjectsToCart([\n    {\n      id: recipientId,\n      amount: state.amount,\n      ft: \"NEAR\",\n      referrerId,\n      potId: activeRound ? activeRound[0] : null,\n      potDetail: activeRound ? activeRound[1].potDetail : null,\n    },\n  ]);\n  handleModalClose();\n};\n\nconst amountNear =\n  state.denomination === \"NEAR\" ? state.amount : (state.amount / nearToUsd).toFixed(2);\n\nconst handleDonate = () => {\n  const amountIndivisible = SUPPORTED_FTS.NEAR.toIndivisible(parseFloat(amountNear));\n  // TODO: get projectId for random donation\n  let projectId = recipientId;\n  if (!projectId) {\n    // get random project\n    const randomIndex = Math.floor(Math.random() * approvedProjectIds.length);\n    projectId = approvedProjectIds[randomIndex];\n  }\n  const args = {\n    referrer_id: referrerId,\n    bypass_protocol_fee: state.bypassProtocolFee,\n    message: state.donationNote,\n  };\n  if (state.bypassChefFee) {\n    args.custom_chef_fee_basis_points = 0;\n  }\n  const potId = activeRound ? activeRound[0] : null;\n  const isPotDonation = potId && state.isUserHumanVerified === true;\n  if (isPotDonation) {\n    args.project_id = projectId;\n    if (state.bypassChefFee) {\n      args.custom_chef_fee_basis_points = 0;\n    }\n  } else {\n    args.recipient_id = projectId;\n  }\n\n  const transactions = [\n    {\n      contractName: isPotDonation ? potId : donate.getContractId(),\n      methodName: \"donate\",\n      args,\n      deposit: amountIndivisible.toString(),\n      gas: \"300000000000000\",\n    },\n  ];\n\n  const now = Date.now();\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <-------- EXTENSION WALLET HANDLING -------->\n  // poll for updates\n  // TODO: update this to also poll Pot contract\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    Near.asyncView(isPotDonation ? potId : donate.getContractId(), \"get_donations_for_donor\", {\n      donor_id: context.accountId,\n      // TODO: implement pagination (should be OK without until there are 500+ donations from this user)\n    }).then((donations) => {\n      for (const donation of donations) {\n        const { recipient_id, project_id, donated_at_ms, donated_at } = donation; // donation contract uses recipient_id, pot contract uses project_id; donation contract uses donated_at_ms, pot contract uses donated_at\n        if (\n          ((recipient_id === projectId || project_id === projectId) && donated_at_ms > now) ||\n          donated_at > now\n        ) {\n          // display success message & clear cart\n          clearInterval(pollId);\n          props.openDonationSuccessModal(donation);\n        }\n      }\n    });\n  }, pollIntervalMs);\n};\n\nreturn (\n  <Widget\n    src={`${ownerId}/widget/Components.Modal`}\n    props={{\n      ...props,\n      onClose: (e) => {\n        // e.preventDefault();\n        e.stopPropagation();\n        handleModalClose();\n      },\n      contentStyle: {\n        padding: \"0px\",\n      },\n      children: (\n        <>\n          <ModalHeader>\n            <div></div>\n            <ModalHeaderText>Donate {recipientId ? \"to project\" : \"Randomly\"}</ModalHeaderText>\n            <PointerIcon src={CLOSE_ICON_URL} onClick={onClose} />\n          </ModalHeader>\n          {/* {userShouldVerify && (\n            <InfoBanner href={props.NADA_BOT_URL} target=\"_blank\">\n              <div>You are not a verified human on nadabot. Verify Now!</div>\n            </InfoBanner>\n          )} */}\n          <ModalBody>\n            {recipientId ? (\n              profile === null ? (\n                <Widget src={`${ownerId}/widget/Components.Loading`} />\n              ) : (\n                <Row>\n                  <Column>\n                    <Widget\n                      src={`${ownerId}/widget/Project.ProfileImage`}\n                      props={{\n                        ...props,\n                        accountId: recipientId,\n                        profile,\n                        style: {\n                          height: \"24px\",\n                          width: \"24px\",\n                        },\n                      }}\n                    />\n                  </Column>\n                  <Column>\n                    <TitleText>\n                      {profileName.length > MAX_NAME_LENGTH\n                        ? profileName.slice(0, MAX_NAME_LENGTH) + \"...\"\n                        : profileName}\n                    </TitleText>\n                    <SubtitleText>\n                      {profile?.description?.length > MAX_DESCRIPTION_LENGTH\n                        ? profile?.description?.slice(0, MAX_DESCRIPTION_LENGTH) + \"...\"\n                        : profile?.description}\n                    </SubtitleText>\n                  </Column>\n                </Row>\n              )\n            ) : (\n              <SubtitleText>\n                Randomly donate to an approved project on our public good registry and discover who\n                you supported afterwards!\n              </SubtitleText>\n            )}\n            <Column style={{ width: \"100%\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Amount\",\n                  placeholder: \"0\",\n                  value: state.amount,\n                  onChange: (amount) => {\n                    amount = amount.replace(/[^\\d.]/g, \"\"); // remove all non-numeric characters except for decimal\n                    if (amount === \".\") amount = \"0.\";\n                    State.update({ amount });\n                  },\n                  inputStyles: {\n                    textAlign: \"right\",\n                    borderRadius: \"0px 4px 4px 0px\",\n                  },\n                  preInputChildren: (\n                    <Widget\n                      src={`${ownerId}/widget/Inputs.Select`}\n                      props={{\n                        noLabel: true,\n                        placeholder: \"\",\n                        options: DENOMINATION_OPTIONS,\n                        value: { text: state.denomination, value: state.denomination },\n                        onChange: ({ text, value }) => {\n                          State.update({ denomination: value });\n                        },\n                        containerStyles: {\n                          width: \"auto\",\n                        },\n                        inputStyles: {\n                          border: \"none\",\n                          borderRight: \"1px #F0F0F0 solid\",\n                          boxShadow: \"none\",\n                          borderRadius: \"4px 0px 0px 4px\",\n                          width: \"auto\",\n                          padding: \"12px 16px\",\n                          boxShadow: \"0px -2px 0px rgba(93, 93, 93, 0.24) inset\",\n                        },\n                        iconLeft:\n                          state.denomination == \"NEAR\" ? (\n                            <Icon src={SUPPORTED_FTS.NEAR.iconUrl} />\n                          ) : (\n                            \"$\"\n                          ),\n                      }}\n                    />\n                  ),\n                }}\n              />\n              <Row style={{ justifyContent: \"space-between\", width: \"100%\", padding: \"0px\" }}>\n                <HintText>1 NEAR = ~${nearToUsd} USD</HintText>\n                <div style={{ display: \"flex\" }}>\n                  <HintText style={{ marginRight: \"6px\" }}>Account balance: </HintText>\n                  <Icon\n                    style={{ width: \"14px\", height: \"14px\", marginRight: \"2px\" }}\n                    src={SUPPORTED_FTS.NEAR.iconUrl}\n                  />\n                  <HintText>-- Max</HintText>\n                </div>\n              </Row>\n            </Column>\n            <Row style={{ padding: \"0px\", gap: \"0px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"bypassProtocolFeeSelector\",\n                  checked: state.bypassProtocolFee,\n                  onClick: (e) => {\n                    State.update({ bypassProtocolFee: e.target.checked });\n                  },\n                }}\n              />\n              {/* <Label htmlFor=\"bypassProtocolFeeSelector\">Bypass protocol fee</Label>\n               */}\n              <Label htmlFor=\"bypassProtocolFeeSelector\">\n                Bypass {protocolFeeBasisPoints / 100 || \"-\"}% protocol fee to{\" \"}\n                <UserChipLink\n                  href={`https://near.social/mob.near/widget/ProfilePage?accountId=${protocolFeeRecipientAccount}`}\n                  target=\"_blank\"\n                >\n                  <Widget\n                    src={`${ownerId}/widget/Project.ProfileImage`}\n                    props={{\n                      ...props,\n                      accountId: protocolFeeRecipientAccount,\n                      style: {\n                        height: \"12px\",\n                        width: \"12px\",\n                      },\n                    }}\n                  />\n                  <TextBold>\n                    {protocolFeeRecipientProfile?.name || protocolFeeRecipientAccount}\n                  </TextBold>\n                </UserChipLink>\n              </Label>\n            </Row>\n            {potDetail?.chef && potDetail?.chef_fee_basis_points > 0 && (\n              <Row style={{ padding: \"0px\", gap: \"0px\" }}>\n                <Widget\n                  src={`${ownerId}/widget/Inputs.Checkbox`}\n                  props={{\n                    id: \"bypassChefFeeSelector\",\n                    checked: state.bypassChefFee,\n                    onClick: (e) => {\n                      State.update({ bypassChefFee: e.target.checked });\n                    },\n                  }}\n                />\n                <Label htmlFor=\"bypassChefFeeSelector\">\n                  Bypass {potDetail?.chef_fee_basis_points / 100 || \"-\"}% chef fee to{\" \"}\n                  <UserChipLink\n                    href={`https://near.social/mob.near/widget/ProfilePage?accountId=${potDetail?.chef}`}\n                    target=\"_blank\"\n                  >\n                    <Widget\n                      src={`${ownerId}/widget/Project.ProfileImage`}\n                      props={{\n                        ...props,\n                        accountId: potDetail?.chef,\n                        style: {\n                          height: \"12px\",\n                          width: \"12px\",\n                        },\n                      }}\n                    />\n                    <TextBold>{chefProfile?.name || potDetail?.chef}</TextBold>\n                  </UserChipLink>\n                </Label>\n              </Row>\n            )}\n            <Widget\n              src={`${ownerId}/widget/Cart.BreakdownSummary`}\n              props={{\n                ...props,\n                referrerId,\n                amountNear,\n                bypassProtocolFee: state.bypassProtocolFee,\n              }}\n            />\n            {state.addNote ? (\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Note\",\n                  inputRows: 2,\n                  inputStyle: {\n                    background: \"#FAFAFA\",\n                  },\n                  placeholder: `Add an optional note for the project (max ${MAX_NOTE_LENGTH} characters)`,\n                  value: state.donationNote,\n                  onChange: (donationNote) => State.update({ donationNote }),\n                  validate: () => {\n                    if (state.donationNote.length > MAX_NOTE_LENGTH) {\n                      State.update({\n                        donationNoteError: `Note must be less than ${MAX_NOTE_LENGTH} characters`,\n                      });\n                      return;\n                    }\n                    State.update({ donationNoteError: \"\" });\n                  },\n                  error: state.donationNoteError,\n                }}\n              />\n            ) : (\n              <Row style={{ padding: \"0px\", gap: \"0px\", cursor: \"pointer\" }}>\n                <Icon\n                  src={EDIT_ICON_URL}\n                  style={{ width: \"18px\", height: \"18px\", marginRight: \"8px\" }}\n                />\n                <AddNote onClick={() => State.update({ addNote: true })}>Add Note</AddNote>\n              </Row>\n            )}\n            {activeRound && state.isUserHumanVerified === false && (\n              <InfoSection>\n                <Icon src={ALERT_ICON_URL} />\n                <Column>\n                  <TitleText>Increase your impact!</TitleText>\n                  <SubtitleText>\n                    Verify that you are a human on nadabot to multiply the impact of your donation!\n                  </SubtitleText>\n                  <VerifyLink href={NADA_BOT_URL} target=\"_blank\">\n                    Verify Now{\" \"}\n                    <LinkSvg\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"w-[18px] group-hover:rotate-[45deg] transition-all\"\n                    >\n                      <path\n                        d=\"M11.6652 6.77894C11.0834 6.78279 10.5015 6.78574 9.91929 6.78777C9.06125 6.78766 8.20376 6.79135 7.34566 6.78145C6.762 6.77478 6.29535 6.33298 6.30266 5.81732C6.31009 5.32123 6.77706 4.88706 7.32973 4.89083C9.53277 4.89897 11.7351 4.91291 13.9368 4.93265C14.6025 4.93925 14.9748 5.32235 14.9826 6.0022C15.0022 8.19227 15.0157 10.3823 15.0231 12.5723C15.0251 13.2043 14.6477 13.6102 14.0912 13.6135C13.5527 13.6152 13.1403 13.1552 13.1372 12.5298C13.1307 11.2364 13.133 9.9431 13.1287 8.64975C13.1284 8.51553 13.113 8.38013 13.0963 8.12137L12.7089 8.50873C10.6829 10.5347 8.64711 12.5508 6.63972 14.5954C6.22161 15.0212 5.62148 14.9861 5.28149 14.6461C4.88466 14.2493 4.90002 13.7158 5.32463 13.2846C7.35705 11.2478 9.39203 9.21284 11.4295 7.17969L11.7105 6.89876L11.6652 6.77894Z\"\n                        fill=\"currentColor\"\n                      ></path>\n                    </LinkSvg>\n                  </VerifyLink>\n                </Column>\n              </InfoSection>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            {recipientId && (\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"tertiary\",\n                  text: \"Add to cart\",\n                  onClick: handleAddToCart,\n                  style: {\n                    padding: \"12px 16px\",\n                  },\n                }}\n              />\n            )}\n            <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                type: \"primary\",\n                text: userShouldVerify ? \"Nah, I want to have less impact\" : \"Donate\",\n                // disabled: !state.reviewMessage || !!state.reviewMessageError,\n                onClick: handleDonate,\n                // href: userShouldVerify ? props.NADA_BOT_URL : null,\n                // target: userShouldVerify ? \"_blank\" : \"_self\",\n                // iconSrc: userShouldVerify ? NADABOT_ICON_URL : null,\n                style: {\n                  padding: \"12px 16px\",\n                },\n              }}\n            />\n            {/* <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                type: \"primary\",\n                text: userShouldVerify ? \"Verify Now\" : \"Donate\",\n                // disabled: !state.reviewMessage || !!state.reviewMessageError,\n                onClick: userShouldVerify ? null : handleDonate,\n                href: userShouldVerify ? props.NADA_BOT_URL : null,\n                target: userShouldVerify ? \"_blank\" : \"_self\",\n                iconSrc: userShouldVerify ? NADABOT_ICON_URL : null,\n                style: {\n                  padding: \"12px 16px\",\n                },\n              }}\n            /> */}\n          </ModalFooter>\n        </>\n      ),\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.ModalDonation", "fact_widget_deployments_id": "5f1e94e83575554cb55643146fff1165", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 19}