{"tx_hash": "5BPB7SYfYdtM1h2a4BMcYuXCXULXFVsWELNajBaDTGe7", "action_id_social": "72s7xAKWUBA6JPWwmEVYuBi6sHwbYtrAtgSyN8rbPs9f-0-widget", "block_id": 112839431, "block_timestamp": "2024-02-14T21:48:23.771Z", "signer_id": "potlock.near", "widget_name": "Project.ModalDonation", "source_code": "const {\n  ownerId,\n  registeredProjects,\n  recipientId,\n  referrerId,\n  potId,\n  potDetail,\n  onClose,\n  DONATION_CONTRACT_ID,\n} = props;\nconst projects = registeredProjects || [];\n\nconst projectIds = useMemo(\n  // TODO: get projects for pot if potId\n  () => projects.filter((project) => project.status === \"Approved\").map((project) => project.id),\n  [projects]\n);\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst CLOSE_ICON_URL =\n  IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\nconst EDIT_ICON_URL = IPFS_BASE_URL + \"bafkreigc2laqrwu6g4ihm5n2qfxwl3g5phujtrwybone2ouxaz5ittjzee\";\n\nconst MAX_NAME_LENGTH = 60;\nconst MAX_DESCRIPTION_LENGTH = 77;\n\nconst profile = Social.getr(`${recipientId}/profile`);\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 20px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  background: #f6f5f3;\n  padding: 10px 20px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n`;\n\nconst ModalHeaderText = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  color: #292929;\n  line-height: 24px;\n  word-wrap: break-word;\n  margin-left: 8px;\n`;\n\nconst PointerIcon = styled.img`\n  width: 24px;\n  height: 24px;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Icon = styled.img`\n  width: 20px;\n  height: 20px;\n`;\n\nconst HintText = styled.div`\n  font-size: 11px;\n  color: #7b7b7b;\n  font-weight: 400;\n  line-height: 16px;\n  word-wrap: break-word;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 16px 20px 32px 20px;\n  gap: 24px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst Name = styled.div`\n  font-size: 14px;\n  color: #292929;\n  font-weight: 600;\n  line-height: 24px;\n  word-break: break-word;\n`;\n\nconst Description = styled.div`\n  font-size: 14px;\n  color: #7b7b7b;\n  font-weight: 400;\n  line-height: 24px;\n  word-break: break-word;\n`;\n\nconst AddNote = styled.div`\n  font-size: 14px;\n  color: #292929;\n  font-weight: 500;\n  line-height: 20px;\n  word-wrap: break-word;\n`;\n\nconst Label = styled.label`\n  font-size: 12px;\n  line-height: 16px;\n  word-wrap: break-word;\n  color: #2e2e2e;\n`;\n\nconst DENOMINATION_OPTIONS = [\n  { text: \"NEAR\", value: \"NEAR\" },\n  { text: \"USD\", value: \"USD\" },\n];\n\nconst DEFAULT_DONATION_AMOUNT = \"1\";\n\nconst MAX_NOTE_LENGTH = 60;\n\nState.init({\n  amount: DEFAULT_DONATION_AMOUNT,\n  denomination: DENOMINATION_OPTIONS[0].value,\n  showBreakdown: false,\n  bypassProtocolFee: false,\n  addNote: false,\n  donationNote: \"\",\n  donationNoteError: \"\",\n});\n\nconst resetState = () => {\n  State.update({\n    amount: DEFAULT_DONATION_AMOUNT,\n    denomination: DENOMINATION_OPTIONS[0].value,\n    showBreakdown: false,\n    bypassProtocolFee: false,\n    addNote: false,\n    donationNote: \"\",\n    donationNoteError: \"\",\n  });\n};\n\nconst profileName = profile?.name || \"No name\";\n\nconst handleAddToCart = () => {\n  props.addProjectsToCart([\n    {\n      id: recipientId,\n      amount: state.amount,\n      ft: \"NEAR\",\n      referrerId: referrerId,\n      potId: potId,\n      potDetail: potDetail,\n    },\n  ]);\n};\n\nconst handleDonate = () => {\n  const amountIndivisible = props.SUPPORTED_FTS.NEAR.toIndivisible(parseFloat(state.amount));\n  // TODO: get projectId for random donation\n  let projectId = recipientId;\n  if (!projectId) {\n    // get random project\n    const randomIndex = Math.floor(Math.random() * projects.length);\n    console.log(\"randomIndex: \", randomIndex);\n    console.log(\"projects.length: \", projects.length);\n    projectId = projects[randomIndex].id;\n  }\n  console.log(\"projectId: \", projectId);\n  const args = {\n    referrer_id: referrerId,\n    bypass_protocol_fee: state.bypassProtocolFee,\n    message: state.donationNote,\n  };\n  if (potId) {\n    args.project_id = projectId;\n  } else {\n    args.recipient_id = projectId;\n  }\n\n  const transactions = [\n    {\n      contractName: potId ?? DONATION_CONTRACT_ID,\n      methodName: \"donate\",\n      args,\n      deposit: amountIndivisible.toString(),\n      gas: \"300000000000000\",\n    },\n  ];\n  console.log(\"transactions: \", transactions);\n\n  const now = Date.now();\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <-------- EXTENSION WALLET HANDLING -------->\n  // poll for updates\n  // TODO: update this to also poll Pot contract\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    Near.asyncView(DONATION_CONTRACT_ID, \"get_donations_for_donor\", {\n      donor_id: context.accountId,\n      // TODO: implement pagination (should be OK without until there are 500+ donations from this user)\n    }).then((donations) => {\n      for (const donation of donations) {\n        const { recipient_id, donated_at_ms } = donation;\n        if (recipient_id === projectId && donated_at_ms > now) {\n          // display success message & clear cart\n          clearInterval(pollId);\n          // TODO: handle success\n          // props.updateSuccessfulDonationRecipientId(foundDonations[0].recipient_id);\n          // props.setCheckoutSuccess(true);\n          // props.clearCart();\n        }\n      }\n    });\n  }, pollIntervalMs);\n};\n\nreturn (\n  <Widget\n    src={`${ownerId}/widget/Components.Modal`}\n    props={{\n      ...props,\n      contentStyle: {\n        padding: \"0px\",\n      },\n      children: (\n        <>\n          <ModalHeader>\n            <div></div>\n            <ModalHeaderText>Donate {recipientId ? \"to project\" : \"Randomly\"}</ModalHeaderText>\n            <PointerIcon src={CLOSE_ICON_URL} onClick={onClose} />\n          </ModalHeader>\n          <ModalBody>\n            {recipientId ? (\n              profile === null ? (\n                <Widget src={`${ownerId}/widget/Components.Loading`} />\n              ) : (\n                <Row>\n                  <Column>\n                    <Widget\n                      src={`${ownerId}/widget/Project.ProfileImage`}\n                      props={{\n                        ...props,\n                        accountId: recipientId,\n                        profile,\n                        style: {\n                          height: \"24px\",\n                          width: \"24px\",\n                        },\n                      }}\n                    />\n                  </Column>\n                  <Column>\n                    <Name>\n                      {profileName.length > MAX_NAME_LENGTH\n                        ? profileName.slice(0, MAX_NAME_LENGTH) + \"...\"\n                        : profileName}\n                    </Name>\n                    <Description>\n                      {profile?.description?.length > MAX_DESCRIPTION_LENGTH\n                        ? profile?.description?.slice(0, MAX_DESCRIPTION_LENGTH) + \"...\"\n                        : profile?.description}\n                    </Description>\n                  </Column>\n                </Row>\n              )\n            ) : (\n              <Description>\n                Randomly donate to an approved project on our public good registry and discover who\n                you supported afterwards!\n              </Description>\n            )}\n            <Column style={{ width: \"100%\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Amount\",\n                  placeholder: \"0\",\n                  value: state.amount,\n                  onChange: (amount) => {\n                    amount = amount.replace(/[^\\d.]/g, \"\"); // remove all non-numeric characters except for decimal\n                    if (amount === \".\") amount = \"0.\";\n                    State.update({ amount });\n                  },\n                  inputStyles: {\n                    textAlign: \"right\",\n                    borderRadius: \"0px 4px 4px 0px\",\n                  },\n                  preInputChildren: (\n                    <Widget\n                      src={`${ownerId}/widget/Inputs.Select`}\n                      props={{\n                        noLabel: true,\n                        placeholder: \"\",\n                        options: DENOMINATION_OPTIONS,\n                        value: { text: state.denomination, value: state.denomination },\n                        onChange: ({ text, value }) => {\n                          State.update({ denomination: value });\n                        },\n                        containerStyles: {\n                          width: \"auto\",\n                        },\n                        inputStyles: {\n                          border: \"none\",\n                          borderRight: \"1px #F0F0F0 solid\",\n                          boxShadow: \"none\",\n                          borderRadius: \"4px 0px 0px 4px\",\n                          width: \"auto\",\n                          padding: \"12px 16px\",\n                          boxShadow: \"0px -2px 0px rgba(93, 93, 93, 0.24) inset\",\n                        },\n                        iconLeft:\n                          state.denomination == \"NEAR\" ? (\n                            <Icon src={props.SUPPORTED_FTS.NEAR.iconUrl} />\n                          ) : (\n                            \"$\"\n                          ),\n                      }}\n                    />\n                  ),\n                }}\n              />\n              <Row style={{ justifyContent: \"space-between\", width: \"100%\", padding: \"0px\" }}>\n                <HintText>1 NEAR = ~${props.nearToUsd * 1} USD</HintText>\n                <div style={{ display: \"flex\" }}>\n                  <HintText style={{ marginRight: \"6px\" }}>Account balance: </HintText>\n                  <Icon\n                    style={{ width: \"14px\", height: \"14px\", marginRight: \"2px\" }}\n                    src={props.SUPPORTED_FTS.NEAR.iconUrl}\n                  />\n                  <HintText>-- Max</HintText>\n                </div>\n              </Row>\n            </Column>\n            <Row style={{ padding: \"0px\", gap: \"0px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"bypassFeeSelector\",\n                  checked: state.bypassProtocolFee,\n                  onClick: (e) => {\n                    State.update({ bypassProtocolFee: e.target.checked });\n                  },\n                }}\n              />\n              <Label htmlFor=\"bypassFeeSelector\">Bypass protocol fee</Label>\n            </Row>\n            <Widget\n              src={`${ownerId}/widget/Cart.BreakdownSummary`}\n              props={{\n                ...props,\n                referrerId,\n                amountNear: state.amount,\n                bypassProtocolFee: state.bypassProtocolFee,\n              }}\n            />\n            {state.addNote ? (\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Note\",\n                  inputRows: 2,\n                  inputStyle: {\n                    background: \"#FAFAFA\",\n                  },\n                  placeholder: `Add an optional note for the project (max ${MAX_NOTE_LENGTH} characters)`,\n                  value: state.donationNote,\n                  onChange: (donationNote) => State.update({ donationNote }),\n                  validate: () => {\n                    if (state.donationNote.length > MAX_NOTE_LENGTH) {\n                      State.update({\n                        donationNoteError: `Note must be less than ${MAX_NOTE_LENGTH} characters`,\n                      });\n                      return;\n                    }\n                    State.update({ donationNoteError: \"\" });\n                  },\n                  error: state.donationNoteError,\n                }}\n              />\n            ) : (\n              <Row style={{ padding: \"0px\", gap: \"0px\", cursor: \"pointer\" }}>\n                <Icon\n                  src={EDIT_ICON_URL}\n                  style={{ width: \"18px\", height: \"18px\", marginRight: \"8px\" }}\n                />\n                <AddNote onClick={() => State.update({ addNote: true })}>Add Note</AddNote>\n              </Row>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            {recipientId && (\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"tertiary\",\n                  text: \"Add to cart\",\n                  onClick: handleAddToCart,\n                }}\n              />\n            )}\n            <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                type: \"primary\",\n                text: \"Donate\",\n                // disabled: !state.reviewMessage || !!state.reviewMessageError,\n                onClick: handleDonate,\n              }}\n            />\n          </ModalFooter>\n        </>\n      ),\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.ModalDonation", "fact_widget_deployments_id": "5348abee7a415a0db0bef823d20ca10e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 26}