{"tx_hash": "5d8XuUY7jiRKvi55KKvjznRqhHvomhLehb5gneh74TrY", "action_id_social": "4MExzdhYQDKsUw8R3RLdrNGkiLEExucZgr3uXn4DpTvq-0-widget", "block_id": 116060063, "block_timestamp": "2024-04-03T17:04:26.498Z", "signer_id": "potlock.near", "widget_name": "Project.ModalDonation", "source_code": "const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 20px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  background: #f6f5f3;\n  padding: 10px 20px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n`;\n\nconst ModalHeaderText = styled.div`\n  font-size: 16px;\n  font-weight: 600;\n  color: #292929;\n  line-height: 24px;\n  word-wrap: break-word;\n  margin-left: 8px;\n`;\n\nconst PointerIcon = styled.svg`\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  transition: rotate 100ms ease-in-out;\n  :hover {\n    rotate: 90deg;\n  }\n`;\n\nconst SvgIcon = styled.svg`\n  width: 20px;\n  height: 20px;\n`;\n\nconst HintText = styled.div`\n  font-size: 11px;\n  color: #7b7b7b;\n  font-weight: 400;\n  line-height: 16px;\n  word-wrap: break-word;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 16px 20px 32px 20px;\n  gap: 24px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst TitleText = styled.div`\n  font-size: 14px;\n  color: #292929;\n  font-weight: 600;\n  line-height: 24px;\n  word-break: break-word;\n`;\n\nconst SubtitleText = styled.div`\n  font-size: 14px;\n  color: #7b7b7b;\n  font-weight: 400;\n  line-height: 24px;\n  word-break: break-word;\n`;\n\nconst AddNote = styled.div`\n  font-size: 14px;\n  color: #292929;\n  font-weight: 500;\n  line-height: 20px;\n  word-wrap: break-word;\n`;\n\nconst Label = styled.label`\n  font-size: 12px;\n  line-height: 16px;\n  word-wrap: break-word;\n  color: #2e2e2e;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst UserChipLink = styled.a`\n  display: flex;\n  flex-direction: row;\n  // align-items: center;\n  // justify-content: center;\n  padding: 2px 12px;\n  margin: 0px 4px;\n  gap: 4px;\n  border-radius: 32px;\n  background: #ebebeb;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst TextBold = styled.div`\n  color: #292929;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 20px;\n  word-wrap: break-word;\n  text-align: center;\n`;\n\nconst InfoBanner = styled.a`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #dd3345;\n  padding: 2px 0px;\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  > div {\n    color: white;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 24px;\n  }\n`;\n\nconst InfoSection = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 16px 20px;\n  border-radius: 8px;\n  border: 1px #dd3345 solid;\n  width: 100%;\n  background: #fef3f2;\n  gap: 16px;\n`;\n\nconst VerifyLink = styled.a`\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n  text-align: center;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst LinkSvg = styled.svg`\n  width: 20px;\n  height: 20px;\n  fill: none;\n  transition: transform 0.2s ease;\n\n  &:hover {\n    transform: rotate(45deg);\n  }\n\n  @media screen and (max-width: 768px) {\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nconst NearIcon = (props) => (\n  <SvgIcon\n    {...props}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    id=\"near-logo\"\n  >\n    <rect width=\"24\" height=\"24\" rx=\"12\" fill=\"#CECECE\" />\n    <path\n      d=\"M15.616 6.61333L13.1121 10.3333C12.939 10.5867 13.2719 10.8933 13.5117 10.68L15.9756 8.53333C16.0422 8.48 16.1354 8.52 16.1354 8.61333V15.32C16.1354 15.4133 16.0155 15.4533 15.9623 15.3867L8.50388 6.45333C8.26415 6.16 7.91787 6 7.53163 6H7.26526C6.5727 6 6 6.57333 6 7.28V16.72C6 17.4267 6.5727 18 7.27858 18C7.71809 18 8.13097 17.7733 8.3707 17.3867L10.8746 13.6667C11.0477 13.4133 10.7148 13.1067 10.475 13.32L8.0111 15.4533C7.94451 15.5067 7.85128 15.4667 7.85128 15.3733V8.68C7.85128 8.58667 7.97114 8.54667 8.02442 8.61333L15.4828 17.5467C15.7225 17.84 16.0821 18 16.4551 18H16.7214C17.4273 18 18 17.4267 18 16.72V7.28C18 6.57333 17.4273 6 16.7214 6C16.2686 6 15.8557 6.22667 15.616 6.61333Z\"\n      fill=\"black\"\n    />\n  </SvgIcon>\n);\n\nconst {\n  recipientId, // TODO: change this to projectId\n  referrerId,\n  potId,\n  // potDetail,\n  onClose,\n  NADABOT_CONTRACT_ID,\n  POT,\n} = props;\nconst { ownerId, DONATION_CONTRACT_ID, NADABOT_HUMAN_METHOD, NADA_BOT_URL, SUPPORTED_FTS } =\n  VM.require(\"potlock.near/widget/constants\") || {\n    DONATION_CONTRACT_ID: \"\",\n    NADABOT_HUMAN_METHOD: \"\",\n    ownerId: \"\",\n    NADA_BOT_URL: \"\",\n    SUPPORTED_FTS: {},\n  };\n// console.log(\"props in donation modal: \", props);\n\nlet ListsSDK =\n  VM.require(\"potlock.near/widget/SDK.lists\") ||\n  (() => ({\n    getRegistrations: () => {},\n  }));\nListsSDK = ListsSDK({ env: props.env });\n\nconst projects = ListsSDK.getRegistrations() || [];\n\nlet DonateSDK =\n  VM.require(\"potlock.near/widget/SDK.donate\") ||\n  (() => ({\n    getConfig: () => {},\n    asyncGetDonationsForDonor: () => {},\n  }));\nDonateSDK = DonateSDK({ env: props.env });\n\nlet PotFactorySDK =\n  VM.require(\"potlock.near/widget/SDK.potfactory\") ||\n  (() => ({\n    getPots: () => {},\n  }));\nPotFactorySDK = PotFactorySDK({ env: props.env });\nconst pots = PotFactorySDK.getPots();\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getConfig: () => {},\n  asyncGetConfig: () => {},\n  getApprovedApplications: () => {},\n  asyncGetApprovedApplications: () => {},\n  asyncGetDonationsForDonor: () => {},\n};\n\nconst { nearToUsd, formatWithCommas } = VM.require(\"potlock.near/widget/utils\") || {\n  nearToUsd: 1,\n  formatWithCommas: () => {},\n};\n\nconst { addItemsToCart, clearCart } = VM.require(\"potlock.near/widget/SDK.cart\") || {\n  addItemsToCart: () => {},\n  clearCart: () => {},\n};\n\nconst approvedProjectIds = useMemo(\n  // TODO: get projects for pot if potId\n  () => {\n    if (projects) {\n      return projects\n        .filter((project) => project.status === \"Approved\")\n        .map((project) => project.registrant_id);\n    }\n  },\n  [projects]\n);\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const CLOSE_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\n// const EDIT_ICON_URL = IPFS_BASE_URL + \"bafkreigc2laqrwu6g4ihm5n2qfxwl3g5phujtrwybone2ouxaz5ittjzee\";\n// const NADABOT_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreib2iag425b6dktehxlrshchyp2pccg5r6ea2blrnzppqia77kzdbe\";\n// const ALERT_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreicqarojxk6jhdtsk2scfsmnigqpxjfgar6om4wlhn5xmqbbu74u5i\";\n\nconst MAX_NAME_LENGTH = 60;\nconst MAX_DESCRIPTION_LENGTH = 77;\n\nconst profile = Social.getr(`${recipientId}/profile`);\n\nconst DEFAULT_DONATION_AMOUNT = \"1\";\n\nconst MAX_NOTE_LENGTH = 60;\n\nconst initialState = {\n  amount: DEFAULT_DONATION_AMOUNT,\n  denomination: DENOMINATION_OPTIONS[0].value,\n  showBreakdown: false,\n  bypassProtocolFee: false,\n  bypassChefFee: false,\n  addNote: false,\n  donationNote: \"\",\n  donationNoteError: \"\",\n  allPots: null,\n  detailForPots: {},\n  approvedProjectsForPots: {},\n  activeRoundsForProject: potId ? [potId] : null, // mapping of potId to { potDetail }\n  intervalId: null,\n  ftBalances: null,\n  nearBalance: null,\n  denominationOptions: [{ text: \"NEAR\", value: \"NEAR\", selected: true, decimals: 24 }],\n};\n\nState.init(initialState);\n\nconst resetState = () => {\n  State.update({ ...initialState });\n};\n\nconst activeRound = useMemo(() => {\n  if (!state.activeRoundsForProject) return;\n  return state.activeRoundsForProject[0];\n}, [state.activeRoundsForProject]);\n\nconst selectedDenomination = useMemo(\n  () => state.denominationOptions.find((option) => option.selected),\n  [state.denominationOptions]\n);\n\nconst ftBalancesRes = useCache(\n  () =>\n    asyncFetch(\n      `https://near-mainnet.api.pagoda.co/eapi/v1/accounts/${context.accountId}/balances/FT`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"dce81322-81b0-491d-8880-9cfef4c2b3c2\",\n        },\n      }\n    )\n      .then((res) => res.body)\n      .catch((e) => console.log(\"error fetching ft balances: \", e)),\n  `ft-balances-${context.accountId}`\n);\n// console.log(\"ftBalancesRes: \", ftBalancesRes);\n\nuseEffect(() => {\n  if (context.accountId && !potId && !activeRound && ftBalancesRes && !state.ftBalances) {\n    State.update({\n      ftBalances: ftBalancesRes.balances,\n      denominationOptions: state.denominationOptions.concat(\n        ftBalancesRes.balances\n          .map(({ amount, contract_account_id, metadata }) => ({\n            amount,\n            id: contract_account_id,\n            text: metadata.symbol,\n            value: metadata.symbol,\n            icon: metadata.icon,\n            decimals: metadata.decimals,\n            selected: false,\n          }))\n          .filter((option) => option.text.length < 10)\n      ),\n    });\n  }\n}, [context.accountId, state.ftBalances, ftBalancesRes, potId, activeRound]);\n\nconst nearBalanceRes = useCache(\n  () =>\n    asyncFetch(\n      `https://near-mainnet.api.pagoda.co/eapi/v1/accounts/${context.accountId}/balances/NEAR`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": \"dce81322-81b0-491d-8880-9cfef4c2b3c2\",\n        },\n      }\n    )\n      .then((res) => res.body)\n      .catch((e) => console.log(\"error fetching near balance: \", e)),\n  `near-balance-${context.accountId}`\n);\n\nuseEffect(() => {\n  if (context.accountId && nearBalanceRes && !state.nearBalance) {\n    State.update({\n      nearBalance: nearBalanceRes.balance,\n    });\n  }\n}, [context.accountId, state.nearBalance, nearBalanceRes]);\n\nuseEffect(() => {\n  if (\n    pots &&\n    Object.keys(state.approvedProjectsForPots).length == pots.length &&\n    Object.keys(state.detailForPots).length == pots.length\n  ) {\n    const activeRoundsForProject = [];\n    for (const pot of pots) {\n      const potDetail = state.detailForPots[pot.id];\n      const approvedProjects = state.approvedProjectsForPots[pot.id];\n      const now = Date.now();\n      const activeRound = approvedProjects.find((proj) => {\n        return (\n          proj.project_id === recipientId &&\n          potDetail.public_round_start_ms < now &&\n          potDetail.public_round_end_ms > now\n        );\n      });\n      if (activeRound) {\n        activeRoundsForProject.push(pot.id);\n      }\n    }\n    State.update({ activeRoundsForProject });\n  }\n}, [pots, state.approvedProjectsForPots, state.detailForPots]);\n\nuseEffect(() => {\n  if (pots) {\n    const detailForPots = {};\n    pots.forEach((pot) => {\n      PotSDK.asyncGetConfig(pot.id)\n        .then((detail) => {\n          detailForPots[pot.id] = detail;\n          if (Object.keys(detailForPots).length === pots.length) {\n            State.update({ detailForPots });\n          }\n        })\n        .catch((e) => {\n          console.error(\"error getting pot detail: \", e);\n        });\n    });\n  }\n}, [pots]);\n\nuseEffect(() => {\n  if (pots) {\n    const approvedProjectsForPots = {};\n    pots.forEach((pot) => {\n      PotSDK.asyncGetApprovedApplications(pot.id)\n        .then((approvedProjects) => {\n          approvedProjectsForPots[pot.id] = approvedProjects;\n          if (Object.keys(approvedProjectsForPots).length === pots.length) {\n            State.update({ approvedProjectsForPots });\n          }\n        })\n        .catch((e) => {\n          console.error(\"error getting approved projects: \", e);\n        });\n    });\n  }\n}, [pots]);\n\nconst handleModalClose = () => {\n  resetState();\n  onClose();\n};\n\n// console.log(\"state in donation modal: \", state);\n\nconst isUserHumanVerified = Near.view(NADABOT_CONTRACT_ID, NADABOT_HUMAN_METHOD, {\n  account_id: context.accountId,\n});\n\nconst potDetail = state.detailForPots[activeRound];\n\nconst protocolConfigContractId = potDetail ? potDetail.protocol_config_provider.split(\":\")[0] : \"\";\nconst protocolConfigViewMethodName = potDetail\n  ? potDetail.protocol_config_provider.split(\":\")[1]\n  : \"\";\nconst protocolConfig =\n  protocolConfigContractId && protocolConfigViewMethodName\n    ? Near.view(protocolConfigContractId, protocolConfigViewMethodName, {})\n    : null;\n\nconst donationContractConfig = !potDetail ? DonateSDK.getConfig() || {} : null;\n\nconst [protocolFeeRecipientAccount, protocolFeeBasisPoints, referralFeeBasisPoints] = useMemo(\n  // if this is a pot donation, use pot config, else use donation contract config\n  () => {\n    if (protocolConfig) {\n      return [\n        protocolConfig.account_id,\n        protocolConfig.basis_points,\n        potDetail.referral_fee_public_round_basis_points,\n      ];\n    } else if (donationContractConfig) {\n      return [\n        donationContractConfig.protocol_fee_recipient_account,\n        donationContractConfig.protocol_fee_basis_points,\n        donationContractConfig.referral_fee_basis_points,\n      ];\n    } else {\n      return [\"\", 0, 0];\n    }\n  }\n);\n\nconst profileName = profile?.name || \"No name\";\n\nconst handleAddToCart = () => {\n  addItemsToCart([\n    {\n      id: recipientId,\n      amount: state.amount,\n      token: selectedDenomination,\n      referrerId,\n      potId: activeRound || null,\n      potDetail: activeRound ? state.detailForPots[activeRound] : null,\n    },\n  ]);\n  handleModalClose();\n};\n\nconst isFtDonation = selectedDenomination.text !== \"NEAR\";\n\nconst storageBalanceBounds = Near.view(selectedDenomination.id, \"storage_balance_bounds\", {});\nconst storageBalanceProtocolFeeRecipient = Near.view(\n  selectedDenomination.id,\n  \"storage_balance_of\",\n  { account_id: protocolFeeRecipientAccount }\n);\nconst storageBalanceReferrer = referrerId\n  ? Near.view(selectedDenomination.id, \"storage_balance_of\", {\n      account_id: referrerId,\n    })\n  : null;\nconst storageBalanceDonationContract = Near.view(selectedDenomination.id, \"storage_balance_of\", {\n  account_id: DONATION_CONTRACT_ID,\n});\n\n// const amountNear =\n//   state.denomination === \"NEAR\" ? state.amount : (state.amount / nearToUsd).toFixed(2);\n\nconst pollForDonationSuccess = (projectId, afterTs) => {\n  // poll for updates\n  // TODO: update this to also poll Pot contract\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    (isPotDonation ? PotSDK : DonateSDK)\n      .asyncGetDonationsForDonor(context.accountId)\n      .then((donations) => {\n        for (const donation of donations) {\n          const { recipient_id, project_id, donated_at_ms, donated_at } = donation; // donation contract uses recipient_id, pot contract uses project_id; donation contract uses donated_at_ms, pot contract uses donated_at\n          if (\n            ((recipient_id === projectId || project_id === projectId) && donated_at_ms > afterTs) ||\n            donated_at > afterTs\n          ) {\n            // display success message\n            clearInterval(pollId);\n            props.openDonationSuccessModal(donation);\n          }\n        }\n      });\n  }, pollIntervalMs);\n};\n\nconst handleDonate = () => {\n  // const amountIndivisible = SUPPORTED_FTS.NEAR.toIndivisible(parseFloat(amountNear));\n  const donationAmountIndivisible = Big(state.amount).mul(\n    new Big(10).pow(selectedDenomination.decimals)\n  );\n  let projectId = recipientId;\n  if (!projectId) {\n    // get random project\n    const randomIndex = Math.floor(Math.random() * approvedProjectIds.length);\n    projectId = approvedProjectIds[randomIndex];\n  }\n  const args = {\n    referrer_id: referrerId,\n    bypass_protocol_fee: state.bypassProtocolFee,\n    message: state.donationNote,\n  };\n  if (state.bypassChefFee) {\n    args.custom_chef_fee_basis_points = 0;\n  }\n  const potId = activeRound || null;\n  const isPotDonation = potId && isUserHumanVerified === true;\n  if (isPotDonation) {\n    args.project_id = projectId;\n    if (state.bypassChefFee) {\n      args.custom_chef_fee_basis_points = 0;\n    }\n  } else {\n    args.recipient_id = projectId;\n  }\n  // FT WORKFLOW:\n  // 1. SEND DEPOSIT TO DONATION CONTRACT\n  /// 2. CALL FT CONTRACT:\n  /// - check for storage balance for all accounts (protocol fee recipient, referrer, project, donation contract)\n  const transactions = [];\n\n  if (isFtDonation) {\n    const ftId = selectedDenomination.id;\n    // add storage deposit transaction\n    let requiredDepositFloat = 0.012; // base amount for donation storage\n    requiredDepositFloat += 0.0001 * args.message.length; // add 0.0001 NEAR per character in message\n    transactions.push({\n      contractName: DONATION_CONTRACT_ID,\n      methodName: \"storage_deposit\",\n      args: {},\n      deposit: Big(requiredDepositFloat).mul(Big(10).pow(24)),\n      gas: \"100000000000000\",\n    });\n    const { min, max } = storageBalanceBounds;\n    const storageMaxBig = Big(max);\n    // check storage balance for each account\n    if (\n      !args.bypass_protocol_fee &&\n      (!storageBalanceProtocolFeeRecipient ||\n        Big(storageBalanceProtocolFeeRecipient.total).lt(storageMaxBig))\n    ) {\n      transactions.push({\n        contractName: ftId,\n        methodName: \"storage_deposit\",\n        args: { account_id: protocolFeeRecipientAccount },\n        deposit: storageMaxBig.minus(Big(storageBalanceProtocolFeeRecipient || 0)),\n        gas: \"100000000000000\",\n      });\n    }\n    // referrer\n    if (\n      referrerId &&\n      (!storageBalanceReferrer || Big(storageBalanceReferrer.total).lt(storageMaxBig))\n    ) {\n      transactions.push({\n        contractName: ftId,\n        methodName: \"storage_deposit\",\n        args: { account_id: referrerId },\n        deposit: storageMaxBig.minus(Big(storageBalanceReferrer || 0)),\n        gas: \"100000000000000\",\n      });\n    }\n    // donation contract\n    if (\n      !storageBalanceDonationContract ||\n      Big(storageBalanceDonationContract.total).lt(storageMaxBig)\n    ) {\n      transactions.push({\n        contractName: ftId,\n        methodName: \"storage_deposit\",\n        args: { account_id: DONATION_CONTRACT_ID },\n        deposit: storageMaxBig.minus(Big(storageBalanceDonationContract || 0)),\n        gas: \"100000000000000\",\n      });\n    }\n    // project (can't do this till this point)\n    Near.asyncView(ftId, \"storage_balance_of\", { account_id: projectId }).then((balance) => {\n      if (!balance || Big(balance.total).lt(storageMaxBig)) {\n        transactions.push({\n          contractName: ftId,\n          methodName: \"storage_deposit\",\n          args: { account_id: projectId },\n          deposit: storageMaxBig.minus(Big(balance || 0)),\n          gas: \"100000000000000\",\n        });\n      }\n\n      // add donation transaction\n      transactions.push({\n        contractName: ftId,\n        methodName: \"ft_transfer_call\",\n        args: {\n          receiver_id: DONATION_CONTRACT_ID,\n          amount: donationAmountIndivisible.toFixed(0),\n          msg: JSON.stringify({\n            recipient_id: projectId,\n            referrer_id: referrerId || null,\n            bypass_protocol_fee: state.bypassProtocolFee,\n            message: args.message,\n          }),\n        },\n        deposit: \"1\",\n        gas: \"300000000000000\",\n      });\n      const now = Date.now();\n      Near.call(transactions);\n      // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n      // <-------- EXTENSION WALLET HANDLING -------->\n      pollForDonationSuccess(projectId, now);\n    });\n  } else {\n    transactions.push({\n      contractName: isPotDonation ? potId : DONATION_CONTRACT_ID,\n      methodName: \"donate\",\n      args,\n      deposit: donationAmountIndivisible.toFixed(0),\n      gas: \"300000000000000\",\n    });\n    const now = Date.now();\n    Near.call(transactions);\n    // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n    // <-------- EXTENSION WALLET HANDLING -------->\n    pollForDonationSuccess(projectId, now);\n  }\n};\n\nconst donateLoading = !state.activeRoundsForProject || isUserHumanVerified === null;\nconst donateDisabled = donateLoading || state.amountError || state.donationNoteError;\n\nconst ftBalance = useMemo(() => {\n  if (selectedDenomination.text === \"NEAR\") {\n    return state.nearBalance\n      ? formatWithCommas(Big(state.nearBalance.amount).div(Big(10).pow(24)).toFixed(2))\n      : \"-\";\n  }\n  const balance = state.denominationOptions.find(\n    (option) => option.text === selectedDenomination.text\n  );\n  return balance\n    ? formatWithCommas(Big(balance.amount).div(Big(10).pow(balance.decimals)).toFixed(2))\n    : \"-\";\n}, [selectedDenomination, state.ftBalances, state.nearBalance]);\n\n// console.log(\"ftBalance: \", ftBalance);\n\nreturn (\n  <Widget\n    src={`${ownerId}/widget/Components.Modal`}\n    props={{\n      ...props,\n      onClose: (e) => {\n        // e.preventDefault();\n        e.stopPropagation();\n        handleModalClose();\n      },\n      contentStyle: {\n        padding: \"0px\",\n      },\n      children: (\n        <>\n          <ModalHeader>\n            <div></div>\n            <ModalHeaderText>Donate {recipientId ? \"to project\" : \"Randomly\"}</ModalHeaderText>\n            <PointerIcon\n              viewBox=\"0 0 14 14\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              onClick={onClose}\n            >\n              <path\n                d=\"M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z\"\n                fill=\"#7B7B7B\"\n              />\n            </PointerIcon>\n          </ModalHeader>\n          {/* {userShouldVerify && (\n            <InfoBanner href={props.NADA_BOT_URL} target=\"_blank\">\n              <div>You are not a verified human on nadabot. Verify Now!</div>\n            </InfoBanner>\n          )} */}\n          <ModalBody>\n            {recipientId ? (\n              profile === null ? (\n                <Widget src={`${ownerId}/widget/Components.Loading`} />\n              ) : (\n                <Row>\n                  <Column>\n                    <Widget\n                      src={`${ownerId}/widget/Project.ProfileImage`}\n                      props={{\n                        ...props,\n                        accountId: recipientId,\n                        profile,\n                        style: {\n                          height: \"24px\",\n                          width: \"24px\",\n                        },\n                      }}\n                    />\n                  </Column>\n                  <Column>\n                    <TitleText>\n                      {profileName.length > MAX_NAME_LENGTH\n                        ? profileName.slice(0, MAX_NAME_LENGTH) + \"...\"\n                        : profileName}\n                    </TitleText>\n                    <SubtitleText>\n                      {profile?.description?.length > MAX_DESCRIPTION_LENGTH\n                        ? profile?.description?.slice(0, MAX_DESCRIPTION_LENGTH) + \"...\"\n                        : profile?.description}\n                    </SubtitleText>\n                  </Column>\n                </Row>\n              )\n            ) : (\n              <SubtitleText>\n                Randomly donate to an approved project on our public good registry and discover who\n                you supported afterwards!\n              </SubtitleText>\n            )}\n            <Column style={{ width: \"100%\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  name: \"amount\",\n                  label: \"Amount\",\n                  placeholder: \"0\",\n                  value: state.amount,\n                  onChange: (amount) => {\n                    amount = amount.replace(/[^\\d.]/g, \"\"); // remove all non-numeric characters except for decimal\n                    if (amount === \".\") amount = \"0.\";\n                    State.update({ amount, amountError: \"\" });\n                    // error if amount is greater than balance\n                    if (\n                      Big(amount)\n                        .mul(Big(10).pow(isFtDonation ? selectedDenomination.decimals : 24))\n                        .gt(isFtDonation ? selectedDenomination.amount : state.nearBalance.amount)\n                    ) {\n                      State.update({ amountError: \"Insufficient balance\" });\n                    } else if (!isFtDonation && parseFloat(amount) < 0.1) {\n                      State.update({ amountError: \"Minimum donation is 0.1 NEAR\" });\n                    }\n                  },\n                  error: state.amountError,\n                  inputStyles: {\n                    textAlign: \"right\",\n                    borderRadius: \"0px 4px 4px 0px\",\n                  },\n                  preInputChildren: (\n                    <Widget\n                      src={`${ownerId}/widget/Inputs.Select`}\n                      props={{\n                        noLabel: true,\n                        placeholder: \"\",\n                        options: state.denominationOptions,\n                        value: {\n                          text: selectedDenomination.text,\n                          value: selectedDenomination.value,\n                        },\n                        onChange: ({ text, value }) => {\n                          State.update({\n                            denominationOptions: state.denominationOptions.map((option) => {\n                              option.selected = option.value === value;\n                              return option;\n                            }),\n                          });\n                        },\n                        containerStyles: {\n                          width: \"auto\",\n                        },\n                        inputStyles: {\n                          border: \"none\",\n                          borderRight: \"1px #F0F0F0 solid\",\n                          boxShadow: \"none\",\n                          borderRadius: \"4px 0px 0px 4px\",\n                          width: \"auto\",\n                          padding: \"12px 16px\",\n                          boxShadow: \"0px -2px 0px rgba(93, 93, 93, 0.24) inset\",\n                        },\n                        iconLeft: selectedDenomination.icon ? (\n                          <img\n                            src={selectedDenomination.icon}\n                            style={{ height: \"24px\", width: \"24px\" }}\n                          />\n                        ) : (\n                          <NearIcon />\n                        ),\n                      }}\n                    />\n                  ),\n                }}\n              />\n              <Row style={{ justifyContent: \"space-between\", width: \"100%\", padding: \"0px\" }}>\n                <HintText>1 NEAR = ~${nearToUsd} USD</HintText>\n                <div style={{ display: \"flex\" }}>\n                  <HintText style={{ marginRight: \"6px\" }}>Account balance: </HintText>\n\n                  {selectedDenomination.icon ? (\n                    <img\n                      src={selectedDenomination.icon}\n                      style={{ height: \"14px\", width: \"14px\" }}\n                    />\n                  ) : (\n                    <NearIcon style={{ height: \"14px\", width: \"14px\" }} />\n                  )}\n\n                  <HintText style={{ marginLeft: \"4px\" }}>{ftBalance}</HintText>\n                </div>\n              </Row>\n            </Column>\n            <Row style={{ padding: \"0px\", gap: \"0px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"bypassProtocolFeeSelector\",\n                  checked: state.bypassProtocolFee,\n                  onClick: (e) => {\n                    State.update({ bypassProtocolFee: e.target.checked });\n                  },\n                }}\n              />\n              {/* <Label htmlFor=\"bypassProtocolFeeSelector\">Bypass protocol fee</Label>\n               */}\n              <Label htmlFor=\"bypassProtocolFeeSelector\">\n                Bypass {protocolFeeBasisPoints / 100 || \"-\"}% protocol fee to{\" \"}\n                <UserChipLink\n                  href={`https://near.social/mob.near/widget/ProfilePage?accountId=${protocolFeeRecipientAccount}`}\n                  target=\"_blank\"\n                >\n                  <Widget\n                    src={`${ownerId}/widget/Project.ProfileImage`}\n                    props={{\n                      ...props,\n                      accountId: protocolFeeRecipientAccount,\n                      style: {\n                        height: \"12px\",\n                        width: \"12px\",\n                      },\n                    }}\n                  />\n                  <TextBold>\n                    {protocolFeeRecipientProfile?.name || protocolFeeRecipientAccount}\n                  </TextBold>\n                </UserChipLink>\n              </Label>\n            </Row>\n            {potDetail?.chef && potDetail?.chef_fee_basis_points > 0 && (\n              <Row style={{ padding: \"0px\", gap: \"0px\" }}>\n                <Widget\n                  src={`${ownerId}/widget/Inputs.Checkbox`}\n                  props={{\n                    id: \"bypassChefFeeSelector\",\n                    checked: state.bypassChefFee,\n                    onClick: (e) => {\n                      State.update({ bypassChefFee: e.target.checked });\n                    },\n                  }}\n                />\n                <Label htmlFor=\"bypassChefFeeSelector\">\n                  Bypass {potDetail?.chef_fee_basis_points / 100 || \"-\"}% chef fee to{\" \"}\n                  <UserChipLink\n                    href={`https://near.social/mob.near/widget/ProfilePage?accountId=${potDetail?.chef}`}\n                    target=\"_blank\"\n                  >\n                    <Widget\n                      src={`${ownerId}/widget/Project.ProfileImage`}\n                      props={{\n                        ...props,\n                        accountId: potDetail?.chef,\n                        style: {\n                          height: \"12px\",\n                          width: \"12px\",\n                        },\n                      }}\n                    />\n                    <TextBold>{chefProfile?.name || potDetail?.chef}</TextBold>\n                  </UserChipLink>\n                </Label>\n              </Row>\n            )}\n            <Widget\n              src={`${ownerId}/widget/Cart.BreakdownSummary`}\n              props={{\n                ...props,\n                referrerId,\n                totalAmount: state.amount,\n                bypassProtocolFee: state.bypassProtocolFee,\n                ftIcon: selectedDenomination.icon,\n              }}\n            />\n            {state.addNote ? (\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Note\",\n                  inputRows: 2,\n                  inputStyle: {\n                    background: \"#FAFAFA\",\n                  },\n                  placeholder: `Add an optional note for the project (max ${MAX_NOTE_LENGTH} characters)`,\n                  value: state.donationNote,\n                  onChange: (donationNote) => State.update({ donationNote }),\n                  validate: () => {\n                    if (state.donationNote.length > MAX_NOTE_LENGTH) {\n                      State.update({\n                        donationNoteError: `Note must be less than ${MAX_NOTE_LENGTH} characters`,\n                      });\n                      return;\n                    }\n                    State.update({ donationNoteError: \"\" });\n                  },\n                  error: state.donationNoteError,\n                }}\n              />\n            ) : (\n              <Row style={{ padding: \"0px\", gap: \"0px\", cursor: \"pointer\" }}>\n                <SvgIcon\n                  viewBox=\"0 0 14 14\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  style={{ width: \"18px\", height: \"18px\", marginRight: \"8px\" }}\n                >\n                  <path\n                    d=\"M0 13.5019H2.8125L11.1075 5.20687L8.295 2.39438L0 10.6894V13.5019ZM1.5 11.3119L8.295 4.51688L8.985 5.20687L2.19 12.0019H1.5V11.3119Z\"\n                    fill=\"#7B7B7B\"\n                  />\n                  <path\n                    d=\"M11.5275 0.219375C11.235 -0.073125 10.7625 -0.073125 10.47 0.219375L9.0975 1.59187L11.91 4.40437L13.2825 3.03188C13.575 2.73938 13.575 2.26688 13.2825 1.97438L11.5275 0.219375Z\"\n                    fill=\"#7B7B7B\"\n                  />\n                </SvgIcon>\n                <AddNote onClick={() => State.update({ addNote: true })}>Add Note</AddNote>\n              </Row>\n            )}\n            {activeRound && isUserHumanVerified === false && (\n              <InfoSection>\n                <SvgIcon viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z\"\n                    fill=\"#DD3345\"\n                  />\n                </SvgIcon>\n                <Column>\n                  <TitleText>Increase your impact!</TitleText>\n                  <SubtitleText>\n                    Verify that you are a human on nadabot to multiply the impact of your donation!\n                  </SubtitleText>\n                  <VerifyLink href={NADA_BOT_URL} target=\"_blank\">\n                    Verify Now{\" \"}\n                    <LinkSvg\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      class=\"w-[18px] group-hover:rotate-[45deg] transition-all\"\n                    >\n                      <path\n                        d=\"M11.6652 6.77894C11.0834 6.78279 10.5015 6.78574 9.91929 6.78777C9.06125 6.78766 8.20376 6.79135 7.34566 6.78145C6.762 6.77478 6.29535 6.33298 6.30266 5.81732C6.31009 5.32123 6.77706 4.88706 7.32973 4.89083C9.53277 4.89897 11.7351 4.91291 13.9368 4.93265C14.6025 4.93925 14.9748 5.32235 14.9826 6.0022C15.0022 8.19227 15.0157 10.3823 15.0231 12.5723C15.0251 13.2043 14.6477 13.6102 14.0912 13.6135C13.5527 13.6152 13.1403 13.1552 13.1372 12.5298C13.1307 11.2364 13.133 9.9431 13.1287 8.64975C13.1284 8.51553 13.113 8.38013 13.0963 8.12137L12.7089 8.50873C10.6829 10.5347 8.64711 12.5508 6.63972 14.5954C6.22161 15.0212 5.62148 14.9861 5.28149 14.6461C4.88466 14.2493 4.90002 13.7158 5.32463 13.2846C7.35705 11.2478 9.39203 9.21284 11.4295 7.17969L11.7105 6.89876L11.6652 6.77894Z\"\n                        fill=\"currentColor\"\n                      ></path>\n                    </LinkSvg>\n                  </VerifyLink>\n                </Column>\n              </InfoSection>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            {recipientId && !isFtDonation && (\n              <Widget\n                src={`${ownerId}/widget/Cart.AddToCart`}\n                props={{\n                  ownerId: ownerId,\n                  text: donateLoading && \"Loading...\",\n                  onClick: handleAddToCart,\n                  disabled: donateDisabled,\n                  item: {\n                    id: recipientId,\n                    amount: state.amount,\n                    // ft: \"NEAR\",\n                    token: selectedDenomination,\n                    referrerId,\n                    potId: activeRound || null,\n                    potDetail: activeRound ? state.detailForPots[activeRound] : null,\n                  },\n                  handleCallback: () => handleModalClose(),\n                }}\n              />\n            )}\n            <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                type: \"primary\",\n                text: donateLoading\n                  ? \"Loading...\"\n                  : userShouldVerify\n                  ? \"Nah, I want to have less impact\"\n                  : \"Donate\",\n                // disabled: !state.reviewMessage || !!state.reviewMessageError,\n                disabled: donateDisabled,\n                onClick: handleDonate,\n                // href: userShouldVerify ? props.NADA_BOT_URL : null,\n                // target: userShouldVerify ? \"_blank\" : \"_self\",\n                // iconSrc: userShouldVerify ? NADABOT_ICON_URL : null,\n                style: {\n                  padding: \"12px 16px\",\n                },\n              }}\n            />\n            {/* <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                type: \"primary\",\n                text: userShouldVerify ? \"Verify Now\" : \"Donate\",\n                // disabled: !state.reviewMessage || !!state.reviewMessageError,\n                onClick: userShouldVerify ? null : handleDonate,\n                href: userShouldVerify ? props.NADA_BOT_URL : null,\n                target: userShouldVerify ? \"_blank\" : \"_self\",\n                iconSrc: userShouldVerify ? NADABOT_ICON_URL : null,\n                style: {\n                  padding: \"12px 16px\",\n                },\n              }}\n            /> */}\n          </ModalFooter>\n        </>\n      ),\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.ModalDonation", "fact_widget_deployments_id": "0166cb7c432cdc05399e6c15d2c843a4", "inserted_timestamp": "2024-04-03T18:42:02.623Z", "modified_timestamp": "2024-04-03T18:42:02.623Z", "__row_index": 48}