{"tx_hash": "EhABdPcfRUgzLjD1BBRg5N7t8si9QSqkxxMFzgAfBjJz", "action_id_social": "3YzoFGU7JRVz1y9U1WNB64Ai76i3i5dn47VREdGExbho-0-widget", "block_id": 115043517, "block_timestamp": "2024-03-19T20:23:21.366Z", "signer_id": "potlock.near", "widget_name": "Profile.Detail", "source_code": "const {\n  DONATION_CONTRACT_ID,\n  ownerId,\n  SUPPORTED_FTS: { NEAR },\n} = VM.require(\"potlock.near/widget/constants\") || {\n  DONATION_CONTRACT_ID: \"\",\n  ownerId: \"\",\n  SUPPORTED_FTS: {\n    NEAR: {\n      fromIndivisible: () => {},\n    },\n  },\n};\n\nconst accountId = props.accountId ?? context.accountId;\n\nlet DonateSDK =\n  VM.require(\"potlock.near/widget/SDK.donate\") ||\n  (() => ({\n    getDonationsForDonor: () => {},\n    asyncGetDonationsForDonor: () => {},\n  }));\nDonateSDK = DonateSDK({ env: props.env });\n\nlet PotFactorySDK =\n  VM.require(\"potlock.near/widget/SDK.potfactory\") ||\n  (() => ({\n    getPots: () => {},\n  }));\nPotFactorySDK = PotFactorySDK({ env: props.env });\nconst pots = PotFactorySDK.getPots();\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  asyncGetConfig: () => {},\n  asyncGetDonationsForDonor: () => {},\n};\n\nconst { ProfileOptions } = VM.require(`${ownerId}/widget/Profile.Options`) || {\n  ProfileOptions: () => [],\n};\n\nif (!accountId) {\n  return \"No account ID\";\n}\n\nconst [directDonations, setDirectDonations] = useState(null);\n// mapping of pot IDs to array of sponsorship (matching pool) donations to this pot for this user\nconst [potDonations, setPotDonations] = useState({});\n\nconst getpotDonations = (potId, potDetail) => {\n  return PotSDK.asyncGetDonationsForDonor(potId, accountId)\n    .then((donations) => {\n      donations = donations.filter((donations) => donations.donor_id === accountId);\n      const updatedDonations = donations.map((donation) => ({\n        ...donation,\n        base_currency: potDetail.base_currency,\n        pot_name: potDetail.pot_name,\n        pot_id: potId,\n        type: donation.project_id ? \"matched\" : \"sponsorship\",\n      }));\n      if (potDonations[potId]) return \"\";\n      setPotDonations((prevpotDonations) => {\n        return { ...prevpotDonations, [potId]: updatedDonations };\n      });\n    })\n    .catch(() => {\n      if (potDonations[potId]) return \"\";\n      setPotDonations((prevpotDonations) => {\n        return { ...prevpotDonations, [potId]: [] };\n      });\n    });\n};\n\n// Get Direct Donations\nlet donationsForDonor = DonateSDK.getDonationsForDonor(accountId);\nif (donationsForDonor && !directDonations) {\n  donationsForDonor = donationsForDonor.map((donation) => ({\n    ...donation,\n    type: \"direct\",\n  }));\n  setDirectDonations(donationsForDonor);\n}\n// Get Sponsorship Donations\nif (pots && !potDonations[pots[pots.length - 1].id]) {\n  pots.forEach((pot) => {\n    PotSDK.asyncGetConfig(pot.id).then((potDetail) => {\n      getpotDonations(pot.id, potDetail);\n    });\n  });\n}\n\nconst [allDonations, sponsorships, matchingRoundDonations] = useMemo(() => {\n  const potDonationsValue = Object.values(potDonations).flat();\n\n  const sponsorships = potDonationsValue.filter((donation) => donation.type === \"sponsorship\");\n  const matchingRoundDonations = potDonationsValue.filter(\n    (donation) => donation.type === \"matched\"\n  );\n  const allDonations = [...(directDonations || []), ...potDonationsValue];\n  allDonations.sort(\n    (a, b) => (b.donated_at || b.donated_at_ms) - (a.donated_at || a.donated_at_ms)\n  );\n  return [allDonations, sponsorships, matchingRoundDonations];\n}, [potDonations, directDonations]);\n\n// Get total donations & Unique donors count\nconst [totalDonationAmountNear] = useMemo(() => {\n  let total = Big(0);\n  allDonations.forEach((donation) => {\n    if (donation.ft_id === \"near\" || donation.base_currency === \"near\") {\n      total = total.plus(Big(donation.total_amount || donation.amount));\n    }\n  });\n  const totalDonationAmountNear = NEAR.fromIndivisible(total.toString());\n\n  return [totalDonationAmountNear];\n}, [allDonations]);\n\nconst profile = props.profile ?? Social.getr(`${accountId}/profile`);\nconst tags = Object.keys(profile.tags || {});\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nreturn (\n  <Wrapper>\n    <Widget\n      src={`${ownerId}/widget/Profile.Body`}\n      props={{\n        ...props,\n        profile,\n        tags,\n        accounts: [accountId],\n        donations: allDonations,\n        totalDonationAmountNear,\n        matchingRoundDonations,\n        sponsorships,\n        directDonations,\n        nav: props.nav ?? \"donations\",\n        navOptions: ProfileOptions(props),\n        post: accountId === context.accountId,\n      }}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Profile.Detail", "fact_widget_deployments_id": "777fe6479d12cbc124f95e7bb33140a7", "inserted_timestamp": "2024-03-19T21:27:29.147Z", "modified_timestamp": "2024-03-19T22:30:05.446Z", "__row_index": 8}