{"tx_hash": "9hzinxsL9hyGwg8uLjLE3fiu7u8HjQ7C6iB7cVxFChM5", "action_id_social": "7LCSrSUpcYHKUkEmnT1TB9yZjVnimF3Zpxa3BWbGmBnH-0-widget", "block_id": 114963450, "block_timestamp": "2024-03-18T15:46:30.805Z", "signer_id": "potlock.near", "widget_name": "Profile.MergedIndexFeed", "source_code": "if (!props.index) {\n  return \"props.index is not defined\";\n}\nconst indices = JSON.parse(\n  JSON.stringify(Array.isArray(props.index) ? props.index : [props.index])\n);\n\nconst filter = props.filter;\n\nconst renderItem =\n  props.renderItem ??\n  ((item) => (\n    <div key={JSON.stringify(item)}>\n      #{item.blockHeight}: {JSON.stringify(item)}\n    </div>\n  ));\nconst cachedRenderItem = (item, i) => {\n  const key = JSON.stringify(item);\n\n  if (!(key in state.cachedItems)) {\n    state.cachedItems[key] = renderItem(item, i);\n    State.update();\n  }\n  return state.cachedItems[key];\n};\n\nconst initialRenderLimit = props.initialRenderLimit ?? 10;\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\nconst reverse = !!props.reverse;\n\nconst computeFetchFrom = (items, limit, desc) => {\n  if (!items || items.length < limit) {\n    return false;\n  }\n  const blockHeight = items[items.length - 1].blockHeight;\n  return desc ? blockHeight - 1 : blockHeight + 1;\n};\n\nconst mergeItems = (iIndex, oldItems, newItems, desc) => {\n  const index = indices[iIndex];\n  const items = [\n    ...new Set(\n      [\n        ...newItems.map((item) => ({\n          ...item,\n          action: index.action,\n          key: index.key,\n          index: iIndex,\n        })),\n        ...oldItems,\n      ].map((i) => JSON.stringify(i))\n    ),\n  ].map((i) => JSON.parse(i));\n  items.sort((a, b) => a.blockHeight - b.blockHeight);\n  if (desc) {\n    items.reverse();\n  }\n  return items;\n};\n\nconst jIndices = JSON.stringify(indices);\nif (jIndices !== state.jIndices) {\n  State.update({\n    jIndices,\n    feeds: indices.map(() => ({})),\n    items: [],\n    displayCount: initialRenderLimit,\n    cachedItems: {},\n  });\n}\n\nlet stateChanged = false;\nfor (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n  const index = indices[iIndex];\n  const feed = state.feeds[iIndex];\n  let feedChanged = false;\n  index.options = index.options || {};\n  index.options.limit = Math.min(\n    Math.max(initialRenderLimit + addDisplayCount * 2, index.options.limit),\n    100\n  );\n  const desc = index.options.order === \"desc\";\n\n  const initialItems = Social.index(index.action, index.key, index.options, index.cacheOptions);\n  if (initialItems === null) {\n    continue;\n  }\n\n  const jInitialItems = JSON.stringify(initialItems);\n  const nextFetchFrom = computeFetchFrom(initialItems, index.options.limit, desc);\n  if (feed.jInitialItems !== jInitialItems) {\n    feed.jInitialItems = jInitialItems;\n    feedChanged = true;\n    if (nextFetchFrom !== feed.initialNextFetchFrom) {\n      feed.fetchFrom = false;\n      feed.items = mergeItems(iIndex, [], initialItems, desc);\n      feed.initialNextFetchFrom = nextFetchFrom;\n      feed.nextFetchFrom = nextFetchFrom;\n    } else {\n      feed.items = mergeItems(iIndex, feed.items, initialItems, desc);\n    }\n  }\n\n  feed.usedCount = 0;\n\n  if (feedChanged) {\n    state.feeds[iIndex] = feed;\n    stateChanged = true;\n  }\n}\n\n// Construct merged feed and compute usage per feed.\n\nconst filteredItems = [];\nwhile (filteredItems.length < state.displayCount) {\n  let bestItem = null;\n  for (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n    const index = indices[iIndex];\n    const feed = state.feeds[iIndex];\n    const desc = index.options.order === \"desc\";\n    if (!feed.items) {\n      continue;\n    }\n    const item = feed.items[feed.usedCount];\n    if (!item) {\n      continue;\n    }\n    if (\n      bestItem === null ||\n      (desc ? item.blockHeight > bestItem.blockHeight : item.blockHeight < bestItem.blockHeight)\n    ) {\n      bestItem = item;\n    }\n  }\n  if (!bestItem) {\n    break;\n  }\n  state.feeds[bestItem.index].usedCount++;\n  if (filter) {\n    if (filter.ignore) {\n      if (bestItem.accountId in filter.ignore) {\n        continue;\n      }\n    }\n    if (filter.require) {\n      if (!(bestItem.accountId in filter.require)) {\n        continue;\n      }\n    }\n  }\n  filteredItems.push(bestItem);\n}\n\n// Fetch new items for feeds that don't have enough items.\nfor (let iIndex = 0; iIndex < indices.length; ++iIndex) {\n  const index = indices[iIndex];\n  const feed = state.feeds[iIndex];\n  const desc = index.options.order === \"desc\";\n  let feedChanged = false;\n\n  if (\n    (feed.items.length || 0) - feed.usedCount < addDisplayCount * 2 &&\n    !feed.fetchFrom &&\n    feed.nextFetchFrom &&\n    feed.nextFetchFrom !== feed.fetchFrom\n  ) {\n    feed.fetchFrom = feed.nextFetchFrom;\n    feedChanged = true;\n  }\n\n  if (feed.fetchFrom) {\n    const limit = addDisplayCount;\n    const newItems = Social.index(\n      index.action,\n      index.key,\n      Object.assign({}, index.options, {\n        from: feed.fetchFrom,\n        subscribe: undefined,\n        limit,\n      })\n    );\n    if (newItems !== null) {\n      feed.items = mergeItems(iIndex, feed.items, newItems, desc);\n      feed.fetchFrom = false;\n      feed.nextFetchFrom = computeFetchFrom(newItems, limit, desc);\n      feedChanged = true;\n    }\n  }\n\n  if (feedChanged) {\n    state.feeds[iIndex] = feed;\n    stateChanged = true;\n  }\n}\n\nif (stateChanged) {\n  State.update();\n}\n\nconst makeMoreItems = () => {\n  State.update({\n    displayCount: state.displayCount + addDisplayCount,\n  });\n};\n\nconst loader = (\n  <div className=\"loader\" key={\"loader\"}>\n    <span className=\"spinner-grow spinner-grow-sm me-1\" role=\"status\" aria-hidden=\"true\" />\n    Loading ...\n  </div>\n);\n\nconst fetchMore =\n  props.manual &&\n  (state.feeds.some((f) => !!f.fetchFrom) && filteredItems.length < state.displayCount\n    ? loader\n    : state.displayCount < filteredItems.length && (\n        <div key={\"loader more\"}>\n          <a href=\"javascript:void\" onClick={(e) => makeMoreItems()}>\n            {props.loadMoreText ?? \"Load more...\"}\n          </a>\n        </div>\n      ));\n\nconst items = filteredItems ? filteredItems.slice(0, state.displayCount) : [];\nif (reverse) {\n  items.reverse();\n}\n\nconst NoResults = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 68px 105px;\n  border-radius: 12px;\n  background: #f6f5f3;\n  .text {\n    font-family: \"Lora\";\n    max-width: 290px;\n    font-size: 22px;\n    font-style: italic;\n    font-weight: 500;\n    color: #292929;\n  }\n  img {\n    width: 60%;\n  }\n  @media screen and (max-width: 768px) {\n    flex-direction: column-reverse;\n    padding: 24px 16px;\n    .text {\n      font-size: 16px;\n    }\n    img {\n      width: 100%;\n    }\n  }\n`;\n\nconst renderedItems =\n  items.length === 0 ? (\n    <NoResults>\n      <div className=\"text\">\n        This {props.tab === \"profile\" ? \"user\" : \"project\"} has not posted yet.\n      </div>\n      <img\n        src=\"https://ipfs.near.social/ipfs/bafkreicwz5cuku3kxxp3wzldslpfzmfqgukpm2wwy7t7zuevkdp4gbl2uq\"\n        alt=\"pots\"\n      />\n    </NoResults>\n  ) : (\n    items.map(cachedRenderItem)\n  );\n\nreturn props.manual ? (\n  <>\n    {reverse && fetchMore}\n    {renderedItems}\n    {!reverse && fetchMore}\n  </>\n) : (\n  <InfiniteScroll\n    pageStart={0}\n    loadMore={makeMoreItems}\n    threshold={props.threshold ?? 250}\n    hasMore={state.displayCount <= filteredItems.length}\n    loader={loader}\n  >\n    {renderedItems}\n  </InfiniteScroll>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Profile.MergedIndexFeed", "fact_widget_deployments_id": "a71d9605e0c88b6f0f33a0fe1d50d007", "inserted_timestamp": "2024-03-18T17:27:30.541Z", "modified_timestamp": "2024-03-18T17:27:30.541Z", "__row_index": 1}