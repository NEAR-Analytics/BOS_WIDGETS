{"tx_hash": "5vYEGLqCbSbQs1cEyMKCL27teQB2nD1Z763Am1ECf1zo", "action_id_social": "2qFtz1DBfVmwQ9psrdCoVhRiVdELWurubxMnLuH7uH9e-0-widget", "block_id": 117047656, "block_timestamp": "2024-04-17T16:21:32.521Z", "signer_id": "potlock.near", "widget_name": "SDK.pot", "source_code": "let PotFactorySDK =\n  VM.require(\"potlock.near/widget/SDK.potfactory\") ||\n  (() => ({\n    getPots: () => {},\n  }));\n\n// check if obk is empty\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nfunction getSocialProfile(keys) {\n  return Near.asyncView(\"social.near\", \"get\", {\n    keys,\n  });\n}\n\nreturn {\n  getConfig: (potId) => {\n    return Near.view(potId, \"get_config\", {});\n  },\n  asyncGetConfig: (potId) => {\n    return Near.asyncView(potId, \"get_config\", {});\n  },\n  isUserPotAdminOrGreater: (potId, accountId) => {\n    const config = Near.view(potId, \"get_config\", {});\n    if (config) {\n      return config.owner === accountId || config.admins.includes(accountId);\n    }\n  },\n  isRoundActive: (potId) => {\n    return Near.asyncView(potId, \"is_round_active\", {});\n  },\n  getMatchingPoolDonations: (potId) => {\n    // TODO: paginate\n    return Near.view(potId, \"get_matching_pool_donations\", {});\n  },\n  asyncGetMatchingPoolDonations: (potId) => {\n    return Near.asyncView(potId, \"get_matching_pool_donations\", {});\n  },\n  getPublicRoundDonations: (potId, args) => {\n    return Near.view(potId, \"get_public_round_donations\", {\n      ...(args || {}),\n    });\n  },\n  asyncGetPublicRoundDonations: (potId, args) => {\n    return Near.asyncView(potId, \"get_public_round_donations\", {\n      ...(args || {}),\n    });\n  },\n  getDonationsForDonor: (potId, accountId) => {\n    return Near.view(potId, \"get_donations_for_donor\", { donor_id: accountId });\n  },\n  asyncGetDonationsForDonor: (potId, accountId) => {\n    return Near.asyncView(potId, \"get_donations_for_donor\", { donor_id: accountId });\n  },\n  getDonationsForProject: (potId, projectId) => {\n    return Near.view(potId, \"get_donations_for_project\", { project_id: projectId });\n  },\n  asyncGetDonationsForProject: (potId, projectId) => {\n    return Near.asyncView(potId, \"get_donations_for_project\", { project_id: projectId });\n  },\n  getDonationsForRecipient: (potId, recipientId) => {\n    return Near.view(potId, \"get_donations_for_recipient\", { recipient_id: recipientId });\n  },\n  asyncGetDonationsForRecipient: (potId, recipientId) => {\n    return Near.asyncView(potId, \"get_donations_for_recipient\", { recipient_id: recipientId });\n  },\n  getApplicationByProjectId: (potId, projectId) => {\n    return Near.view(potId, \"get_application_by_project_id\", { project_id: projectId });\n  },\n  asyncGetApplicationByProjectId: (potId, projectId) => {\n    return Near.asyncView(potId, \"get_application_by_project_id\", { project_id: projectId });\n  },\n  getApprovedApplications: (potId) => {\n    return Near.view(potId, \"get_approved_applications\", {});\n  },\n  asyncGetApprovedApplications: (potId) => {\n    return Near.asyncView(potId, \"get_approved_applications\", {});\n  },\n  getApplications: (potId) => {\n    return Near.view(potId, \"get_applications\", {});\n  },\n  asyncGetApplications: (potId) => {\n    return Near.asyncView(potId, \"get_applications\", {});\n  },\n  getPayoutsChallenges: (potId) => {\n    return Near.view(potId, \"get_payouts_challenges\", {});\n  },\n  challengePayouts: (potId, reason) => {\n    const depositFloat = reason.length * 0.00003 + 0.003;\n    const transaction = {\n      contractName: potId,\n      methodName: \"challenge_payouts\",\n      args: { reason },\n      deposit: Big(depositFloat).mul(Big(10).pow(24)),\n      gas: \"300000000000000\",\n    };\n    Near.call([transaction]);\n  },\n  adminUpdatePayoutsChallenge: (potId, challengerId, notes, shouldResolveChallenge) => {\n    const depositFloat = notes.length * 0.00003;\n    const transaction = {\n      contractName: potId,\n      methodName: \"admin_update_payouts_challenge\",\n      args: { challenger_id: challengerId, notes, resolve_challenge: shouldResolveChallenge },\n      deposit: Big(depositFloat).mul(Big(10).pow(24)),\n      gas: \"300000000000000\",\n    };\n    Near.call([transaction]);\n  },\n  chefSetPayouts: (potId, payouts) => {\n    const transaction = {\n      contractName: potId,\n      methodName: \"chef_set_payouts\",\n      args: { payouts },\n      deposit: \"1\",\n      gas: \"300000000000000\",\n    };\n    Near.call([transaction]);\n  },\n  adminProcessPayouts: (potId) => {\n    const transaction = {\n      contractName: potId,\n      methodName: \"admin_process_payouts\",\n      args: {},\n      deposit: \"1\",\n      gas: \"300000000000000\",\n    };\n    Near.call([transaction]);\n  },\n  getFlaggedAccounts: (potDetail, potId) => {\n    const roles = [\"owner\", \"admins\", \"chef\"];\n\n    const allUsers = {};\n    roles.forEach((role) => {\n      const users = potDetail[role];\n      if (typeof users === \"object\") {\n        users.forEach((user) => {\n          allUsers[user] = role === \"admins\" ? \"admin\" : role;\n        });\n      } else {\n        allUsers[users] = role;\n      }\n    });\n\n    const flaggedAccounts = [];\n    const socialKeys = Object.keys(allUsers).map((user) => `${user}/profile/**`);\n\n    return new Promise((resolve, reject) => {\n      getSocialProfile(socialKeys)\n        .then((profiles) => {\n          Object.entries(profiles).forEach(([user, { profile }]) => {\n            const pLBlacklistedAccounts = JSON.parse(profile.pLBlacklistedAccounts || \"{}\");\n            const potFlaggedAcc = pLBlacklistedAccounts[potId] || {};\n            if (!isEmpty(potFlaggedAcc)) {\n              flaggedAccounts.push({\n                flaggedBy: user,\n                role: allUsers[user],\n                potFlaggedAcc,\n              });\n            }\n          });\n          resolve(flaggedAccounts);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching social profiles:\", error);\n          reject(error);\n        });\n    });\n  },\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/SDK.pot", "fact_widget_deployments_id": "2bfa6cc7557c9a2c887f599d2b48cd14", "inserted_timestamp": "2024-04-17T17:41:46.497Z", "modified_timestamp": "2024-04-17T17:41:46.497Z", "__row_index": 4}