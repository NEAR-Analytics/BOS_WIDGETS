{"tx_hash": "DT9ydRtDoo2SX81DFiy49AsHJmzJvcwVZurjxT6eQE5y", "action_id_social": "PRNjqnSAUi1kJ2xfG3C8Y2MFzpcN7RytN7H2yxJ946x-0-widget", "block_id": 113764579, "block_timestamp": "2024-02-28T17:28:26.289Z", "signer_id": "potlock.near", "widget_name": "Cart.CheckoutBreakdown", "source_code": "const { yoctosToNear } = VM.require(\"potlock.near/widget/utils\") || { yoctosToNear: () => \"\" };\nconst { DONATION_CONTRACT_ID, ownerId, SUPPORTED_FTS } = VM.require(\n  \"potlock.near/widget/constants\"\n) || {\n  DONATION_CONTRACT_ID: \"\",\n  ownerId: \"\",\n  SUPPORTED_FTS: {},\n};\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nBig.PE = 100;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  margin-top: 20px;\n  width: 380px;\n  //   background: white;\n\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    margin-bottom: 50px;\n  }\n`;\n\nconst Title = styled.div`\n  color: #2e2e2e;\n  font-size: 24px;\n  font-weight: 600;\n  line-height: 32px;\n  word-wrap: break-word;\n`;\n\nconst CurrencyHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px;\n  border-radius: 5px;\n  background: #f0f0f0;\n`;\n\nconst CurrencyHeaderText = styled.div`\n  color: #7b7b7b;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14px;\n  word-wrap: break-word;\n`;\n\nconst BreakdownItemContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px;\n`;\n\nconst BreakdownItemLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  width: 50%;\n  gap: 8px;\n`;\n\nconst BreakdownItemRight = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst BreakdownItemText = styled.div`\n  color: #2e2e2e;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 16px;\n  word-wrap: break-word;\n`;\n\nconst CurrencyIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`;\n\nconst TotalContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px;\n  border-top: 1px #7b7b7b solid;\n`;\n\nconst TotalText = styled.div`\n  color: #2e2e2e;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 20px;\n  word-wrap: break-word;\n`;\n\nconst ErrorText = styled.div`\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  width: 100%;\n  text-align: center;\n`;\n\nconst MIN_REQUIRED_DONATION_AMOUNT_PER_PROJECT = 0.1;\n\nconst [amountsByFt, totalAmount, donationTooSmall] = useMemo(() => {\n  const amountsByFt = {};\n  let donationTooSmall = false;\n  Object.entries(props.cart || {}).forEach(([projectId, { ft, amount }]) => {\n    if (!amountsByFt[ft]) amountsByFt[ft] = 0;\n    amountsByFt[ft] += parseFloat(amount || 0);\n    if (amountsByFt[ft] < MIN_REQUIRED_DONATION_AMOUNT_PER_PROJECT) donationTooSmall = true;\n  });\n  const totalAmount = Object.values(amountsByFt).reduce((acc, amount) => acc + amount, 0);\n  return [amountsByFt, totalAmount, donationTooSmall];\n}, [props]);\n\nconst handleDonate = () => {\n  const transactions = [];\n  let potIdContained;\n\n  Object.entries(props.cart).forEach(([projectId, { ft, amount, referrerId, note, potId }]) => {\n    const amountFloat = 0;\n    if (ft == \"NEAR\") {\n      amountFloat = parseFloat(amount || 0);\n    } else {\n      amountFloat = parseFloat((amount / props.cart[props.projectId]?.price).toFixed(2) || 0);\n    }\n    const amountIndivisible = SUPPORTED_FTS[ft].toIndivisible(amountFloat);\n    const donateContractArgs = {};\n    const potContractArgs = {};\n    if (potId) {\n      potContractArgs.project_id = projectId;\n      potContractArgs.referrer_id = referrerId;\n      potIdContained = potId;\n    } else {\n      donateContractArgs.recipient_id = projectId;\n      donateContractArgs.referrer_id = referrerId;\n      donateContractArgs.message = note;\n    }\n    transactions.push({\n      contractName: potId ?? DONATION_CONTRACT_ID,\n      methodName: \"donate\",\n      args: potId ? potContractArgs : donateContractArgs,\n      deposit: amountIndivisible.toString(),\n      gas: \"300000000000000\",\n    });\n  });\n\n  const now = Date.now();\n  Near.call(transactions);\n  console.log(\"props.cart: \", props.cart);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <-------- EXTENSION WALLET HANDLING -------->\n  // poll for updates\n  // TODO: update this to also poll Pot contract\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    Near.asyncView(potIdContained || DONATION_CONTRACT_ID, \"get_donations_for_donor\", {\n      donor_id: context.accountId,\n      // TODO: implement pagination (should be OK without until there are 500+ donations from this user)\n    }).then((donations) => {\n      // for each project, there should be a matching donation that occurred since now()\n      const foundDonations = [];\n      // go through donations, add to foundDonations list\n      console.log(\"donations: \", donations);\n      for (const donation of donations) {\n        const { recipient_id, project_id, donated_at_ms, donated_at, total_amount } = donation;\n        const matchingCartItem = props.cart[project_id || recipient_id];\n        if (matchingCartItem && (donated_at_ms > now || donated_at > now)) {\n          foundDonations.push(donation);\n        }\n      }\n      console.log(\"foundDonations: \", foundDonations);\n      if (foundDonations.length) {\n        // donations found\n        // display success message & clear cart\n        clearInterval(pollId);\n        props.updateSuccessfulDonationRecipientId(foundDonations[0].recipient_id);\n        props.setCheckoutSuccess(true);\n        props.clearCart();\n      }\n    });\n  }, pollIntervalMs);\n};\n// console.log(\"props\", props);\nreturn (\n  <Container>\n    <Title>Breakdown summary</Title>\n    <CurrencyHeader>\n      <CurrencyHeaderText>Currency</CurrencyHeaderText>\n      <CurrencyHeaderText>\n        {props.cart[props.projectId]?.ft == \"USD\" ? \"USD\" : \"NEAR\"}\n      </CurrencyHeaderText>\n    </CurrencyHeader>\n    {Object.entries(amountsByFt).map(([ft, amount]) => {\n      const amountFloat = parseFloat(amount || 0);\n      return (\n        <BreakdownItemContainer>\n          <BreakdownItemLeft>\n            {props.cart[props.projectId]?.ft == \"NEAR\" ? (\n              <CurrencyIcon src={SUPPORTED_FTS[ft].iconUrl} />\n            ) : (\n              \"$\"\n            )}\n            <BreakdownItemText>{amountFloat.toFixed(2)}</BreakdownItemText>\n          </BreakdownItemLeft>\n          <BreakdownItemRight>\n            <BreakdownItemText>{amountFloat.toFixed(2)} N</BreakdownItemText>\n          </BreakdownItemRight>\n        </BreakdownItemContainer>\n      );\n    })}\n    <TotalContainer>\n      <TotalText>Total</TotalText>\n      <TotalText>{totalAmount.toFixed(2)} N</TotalText>\n    </TotalContainer>\n    <Widget\n      src={`${ownerId}/widget/Components.Button`}\n      props={{\n        type: \"primary\",\n        text: `Donate ${`${totalAmount.toFixed(2)} N`}`,\n        disabled: !Object.keys(props.cart).length || donationTooSmall || !context.accountId,\n        onClick: handleDonate,\n        style: {\n          width: \"100%\",\n        },\n      }}\n    />\n    {donationTooSmall && (\n      <ErrorText>\n        Minimum required donation per project is {MIN_REQUIRED_DONATION_AMOUNT_PER_PROJECT} N\n      </ErrorText>\n    )}\n    {!context.accountId && <ErrorText>Please sign in to donate</ErrorText>}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Cart.CheckoutBreakdown", "fact_widget_deployments_id": "bea7711ed12ce74f0fe61c9e5bb78c56", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}