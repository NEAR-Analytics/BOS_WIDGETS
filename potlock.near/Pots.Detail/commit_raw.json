{"tx_hash": "HKrZByHwwFc78v8m6tizrWEoipu5cLfoQqS9RX1QHWEV", "action_id_social": "77yq7hYsfBrJXN6UUVVbnUqwYcQRSmX3bCMkbkNtTGtk-0-widget", "block_id": 113097790, "block_timestamp": "2024-02-18T17:29:03.913Z", "signer_id": "potlock.near", "widget_name": "Pots.Detail", "source_code": "const {\n  potId,\n  ownerId,\n  doesUserHaveDaoFunctionCallProposalPermissions,\n  SUPPORTED_FTS: { NEAR },\n} = props;\n\nconst MAX_APPLICATION_MESSAGE_LENGTH = 1000;\n\nBig.PE = 100;\nconst FIFTY_TGAS = \"50000000000000\";\nconst THREE_HUNDRED_TGAS = \"300000000000000\";\nconst MIN_PROPOSAL_DEPOSIT_FALLBACK = \"100000000000000000000000\"; // 0.1N\n\n// const registeredProject = projects.find(\n//   (project) => project.id == props.projectId && project.status == \"Approved\"\n// );\n\n// const name = profile.name || \"No-name profile\";\n// const image = profile.image;\n// const backgroundImage = profile.backgroundImage;\n// const tags = Object.keys(profile.tags ?? {});\n\nconst Wrapper = styled.div`\n  margin-top: calc(-1 * var(--body-top-padding, 0));\n  overflow-x: hidden;\n  // @media screen and (max-width: 768px) {\n  //   .mb-2 {\n  //     width: 64px;\n  //     height: 64px;\n  //   }\n  // }\n`;\n\nconst SidebarContainer = styled.div`\n  width: 25%;\n  // width: 500px;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Container = styled.div`\n  padding: 0px 68px;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    //padding: 240px 16px 32px 16px;\n    width: 100%;\n    padding: 0;\n  }\n`;\n\nconst ContainerInner = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 68px 0px;\n`;\n\nconst BodyContainer = styled.div`\n  flex: 1;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  background-color: #292929;\n`;\n\nconst ModalTitle = styled.div`\n  color: #525252;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  margin-bottom: 8px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nState.init({\n  potDetail: null,\n  // canApply: null,\n  isApplicationModalOpen: false,\n  applicationMessage: \"\",\n  applicationMessageError: \"\",\n  applicationSuccess: false,\n  sybilRequirementMet: null,\n  isDao: false,\n  daoAddress: \"\",\n  daoAddressError: \"\",\n  daoPolicy: null,\n  isOnRegistry: false,\n});\n\nif (state.potDetail === null) {\n  Near.asyncView(potId, \"get_config\", {})\n    .then((potDetail) => {\n      if (potDetail.sybil_wrapper_provider) {\n        const [contractId, methodName] = potDetail.sybil_wrapper_provider.split(\":\");\n        Near.asyncView(contractId, methodName, { account_id: context.accountId })\n          .then((result) => {\n            State.update({ potDetail, sybilRequirementMet: result });\n          })\n          .catch((e) => {\n            State.update({ potDetail, sybilRequirementMet: false });\n          });\n      } else {\n        State.update({ potDetail, sybilRequirementMet: true });\n      }\n    })\n    .catch((e) => {\n      console.log(\"error getting pot detail: \", e);\n      State.update({ potDetail: undefined });\n    });\n}\n\n// console.log(\"state in pot detail: \", state);\n\nconst noPot = state.potDetail === undefined;\nconst loading = state.potDetail === null;\n\nif (loading) return \"Loading...\";\n\nif (noPot) return \"No pot found\";\n\n// these will be passed down to child components\nprops.navOptions = [\n  {\n    label: \"Projects\",\n    id: \"projects\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Projects`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=projects`),\n  },\n  {\n    label: \"Applications\",\n    id: \"applications\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Applications`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=applications`),\n  },\n  {\n    label: \"Donations\",\n    id: \"donations\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Donations`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=donations`),\n  },\n  {\n    label: \"Sponsors\",\n    id: \"sponsors\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Sponsors`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=sponsors`),\n  },\n  {\n    label: \"Payouts\",\n    id: \"payouts\",\n    disabled: !state.potDetail.payouts.length,\n    source: `${ownerId}/widget/Pots.Payouts`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=payouts`),\n  },\n  {\n    label: \"Settings\",\n    id: \"settings\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Settings`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=settings`),\n  },\n];\n\nconst potDetail = state.potDetail;\nconst now = Date.now();\nconst applicationNotStarted = now < potDetail.application_start_ms;\nconst applicationOpen = now >= potDetail.application_start_ms && now < potDetail.application_end_ms;\n\nconst publicRoundOpen =\n  now >= potDetail.public_round_start_ms && now < potDetail.public_round_end_ms;\nconst publicRoundClosed = now >= potDetail.public_round_end_ms;\n\nconst payoutsPending = publicRoundClosed && !potDetail.cooldown_end_ms;\n\n//console.log(\"state\", canPayoutsBeSet);\n\nif (!props.nav) {\n  let nav;\n  applicationNotStarted\n    ? (nav = \"sponsors\")\n    : applicationOpen\n    ? (nav = \"applications\")\n    : publicRoundOpen\n    ? (nav = \"projects\")\n    : !payoutsPending\n    ? (nav = \"donations\")\n    : (nav = \"payouts\");\n  props.nav = nav;\n} // default to home tab\n\n// const imageHeightPx = 120;\n// const profileImageTranslateYPx = 220;\n\nconst handleSendApplication = () => {\n  const args = {\n    message: state.applicationMessage,\n  };\n  let deposit = NEAR.toIndivisible(\"0.01\");\n  const extraDeposit = Big(state.applicationMessage.length * 0.0001).mul(Big(10).pow(24));\n  deposit = deposit.plus(extraDeposit);\n\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"apply\",\n      deposit,\n      args,\n      gas: props.ONE_TGAS.mul(100),\n    },\n  ];\n\n  // if it is a DAO, we need to convert transactions to DAO function call proposals\n  if (state.isDao) {\n    const clonedTransactions = JSON.parse(JSON.stringify(transactions));\n    transactions = clonedTransactions.map((tx) => {\n      const action = {\n        method_name: tx.methodName,\n        gas: FIFTY_TGAS,\n        deposit: tx.deposit ? tx.deposit.toString() : \"0\",\n        args: Buffer.from(JSON.stringify(tx.args), \"utf-8\").toString(\"base64\"),\n      };\n      return {\n        ...tx,\n        contractName: state.daoAddress,\n        methodName: \"add_proposal\",\n        args: {\n          proposal: {\n            description: `Application to PotLock pot: ${state.potDetail.pot_name} (${potId})`,\n            kind: {\n              FunctionCall: {\n                receiver_id: tx.contractName,\n                actions: [action],\n              },\n            },\n          },\n        },\n        deposit: state.daoPolicy.proposal_bond || MIN_PROPOSAL_DEPOSIT_FALLBACK,\n        gas: THREE_HUNDRED_TGAS,\n      };\n    });\n  }\n\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ---->\n  // poll for updates\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    Near.asyncView(potId, \"get_applications\", {}).then((applications) => {\n      const application = applications.find(\n        (application) =>\n          application.project_id === (state.isDao ? state.daoAddress : context.accountId)\n      );\n      if (application) {\n        clearInterval(pollId);\n        State.update({ applicationSuccess: true });\n      }\n    });\n  }, pollIntervalMs);\n};\n\nconst verifyIsOnRegistry = (address) => {\n  const { registry_provider } = state.potDetail;\n  if (registry_provider) {\n    const [registryId, registryMethod] = registry_provider.split(\":\");\n    if (registryId && registryMethod) {\n      Near.asyncView(registryId, registryMethod, { account_id: address })\n        .then((isOnRegistry) => {\n          State.update({ isOnRegistry });\n        })\n        .catch((e) => {\n          console.log(\"error getting registry: \", e);\n        });\n    }\n  }\n};\n\nuseEffect(() => {\n  if (!state.isDao) {\n    verifyIsOnRegistry(context.accountId || \"\");\n  }\n}, []);\n\nconst registryRequirementMet = state.isOnRegistry || !state.potDetail.registry_provider;\n\nconst isError = state.applicationMessageError || state.daoAddressError;\n\nreturn (\n  <Wrapper>\n    <>\n      <Widget\n        src={`${ownerId}/widget/Pots.Header`}\n        props={{\n          ...props,\n          potDetail: state.potDetail,\n          setApplicationModalOpen: (isOpen) => State.update({ isApplicationModalOpen: isOpen }),\n          handleApplyToPot,\n          sybilRequirementMet: state.sybilRequirementMet,\n        }}\n      />\n      <Container>\n        <ContainerInner>\n          <SidebarContainer\n          // class=\"col-3\"\n          >\n            <Widget\n              src={`${ownerId}/widget/Components.NavOptions`}\n              props={{\n                ...props,\n              }}\n            />\n          </SidebarContainer>\n          <BodyContainer\n          // class=\"col-9\"\n          >\n            <Widget\n              src={props.navOptions.find((option) => option.id == props.nav).source}\n              props={{\n                ...props,\n                potDetail: state.potDetail,\n                sybilRequirementMet: state.sybilRequirementMet,\n              }}\n            />\n          </BodyContainer>\n        </ContainerInner>\n      </Container>\n    </>\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen: state.isApplicationModalOpen,\n        onClose: () => State.update({ isApplicationModalOpen: false }),\n        children: (\n          <>\n            <ModalTitle>\n              Application message <span style={{ color: \"#DD3345\" }}>*</span>\n            </ModalTitle>\n            <Widget\n              src={`${ownerId}/widget/Inputs.TextArea`}\n              props={{\n                noLabel: true,\n                inputRows: 5,\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Your application message here...\",\n                value: state.applicationMessage,\n                onChange: (applicationMessage) => State.update({ applicationMessage }),\n                validate: () => {\n                  if (state.applicationMessage.length > MAX_APPLICATION_MESSAGE_LENGTH) {\n                    State.update({\n                      applicationMessageError: `Application message must be less than ${MAX_APPLICATION_MESSAGE_LENGTH} characters`,\n                    });\n                    return;\n                  }\n\n                  State.update({ applicationMessageError: \"\" });\n                },\n                error: state.applicationMessageError,\n              }}\n            />\n            <Row style={{ margin: \"12px 0px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"isDaoSelector\",\n                  checked: state.isDao,\n                  onClick: (e) => {\n                    State.update({\n                      isDao: e.target.checked,\n                    });\n                    if (!e.target.checked) {\n                      // check current account ID against registry\n                      verifyIsOnRegistry(context.accountId);\n                    }\n                  },\n                  label: \"I'm applying as a DAO\",\n                }}\n              />\n            </Row>\n            {state.isDao && (\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"DAO address *\",\n                  placeholder: \"E.g. mydao.sputnikdao.near\",\n                  value: state.daoAddress,\n                  onChange: (daoAddress) => State.update({ daoAddress, daoAddressError: \"\" }),\n                  validate: () => {\n                    // **CALLED ON BLUR**\n                    Near.asyncView(state.daoAddress, \"get_policy\", {})\n                      .then((policy) => {\n                        const hasPermissions = !policy\n                          ? false\n                          : doesUserHaveDaoFunctionCallProposalPermissions(policy);\n                        State.update({\n                          daoAddressError: hasPermissions\n                            ? \"\"\n                            : \"You don't have required permissions to submit proposals to this DAO.\",\n                          daoPolicy: policy,\n                        });\n                        // check registry\n                        verifyIsOnRegistry(state.daoAddress);\n                      })\n                      .catch((e) => {\n                        State.update({\n                          daoAddressError: \"Invalid DAO address\",\n                        });\n                      });\n                  },\n                  error: state.daoAddressError,\n                  disabled: isUpdate ? !isAdminOrGreater : false,\n                }}\n              />\n            )}\n            <Row style={{ justifyContent: \"flex-end\", marginTop: \"12px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  text: registryRequirementMet\n                    ? state.isDao\n                      ? \"Propose to Send Application\"\n                      : \"Send application\"\n                    : \"Register to apply\",\n                  onClick: registryRequirementMet ? handleSendApplication : null,\n                  disabled: isError,\n                  href: registryRequirementMet ? null : props.hrefWithEnv(`?tab=createproject`),\n                  target: registryRequirementMet ? \"_self\" : \"_blank\",\n                }}\n              />\n            </Row>\n          </>\n        ),\n      }}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Detail", "fact_widget_deployments_id": "47cab7e1c4dab7a5bbb5057f02c1e498", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 26}