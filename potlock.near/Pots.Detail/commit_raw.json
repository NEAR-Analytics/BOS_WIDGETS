{"tx_hash": "6v6jjfkNonVounLA8LNzNMoVDpK35pmcA4p7UJPJapS1", "action_id_social": "9gEyP94GzXpvM4UQSS1ztG4hB4XKJNtmFWb1vVQ6Jmgt-0-widget", "block_id": 112477300, "block_timestamp": "2024-02-09T16:51:56.454Z", "signer_id": "potlock.near", "widget_name": "Pots.Detail", "source_code": "// console.log(\"props in Pot Detail: \", props);\nconst { potId, ownerId } = props;\n\nconst MAX_APPLICATION_MESSAGE_LENGTH = 1000;\n\n// const registeredProject = projects.find(\n//   (project) => project.id == props.projectId && project.status == \"Approved\"\n// );\n\n// const name = profile.name || \"No-name profile\";\n// const image = profile.image;\n// const backgroundImage = profile.backgroundImage;\n// const tags = Object.keys(profile.tags ?? {});\n\nconst Wrapper = styled.div`\n  margin-top: calc(-1 * var(--body-top-padding, 0));\n\n  // @media screen and (max-width: 768px) {\n  //   .mb-2 {\n  //     width: 64px;\n  //     height: 64px;\n  //   }\n  // }\n`;\n\nconst SidebarContainer = styled.div`\n  width: 25%;\n  // width: 500px;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Container = styled.div`\n  padding: 0px 68px;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    padding: 240px 16px 32px 16px;\n  }\n`;\n\nconst ContainerInner = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 68px 0px;\n`;\n\nconst BodyContainer = styled.div`\n  flex: 1;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  background-color: #292929;\n`;\n\nconst ModalTitle = styled.div`\n  color: #525252;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  margin-bottom: 8px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nState.init({\n  potDetail: null,\n  canApply: null,\n  isApplicationModalOpen: false,\n  applicationMessage: \"\",\n  applicationMessageError: \"\",\n  applicationSuccess: false,\n  sybilRequirementMet: null,\n});\n\nif (state.potDetail === null) {\n  Near.asyncView(potId, \"get_config\", {})\n    .then((potDetail) => {\n      // check for registration requirement\n      // potDetail.registryProvider = \"registry.potlock.near:is_registered\"; // TODO: REMOVE THIS\n      if (potDetail.registryProvider) {\n        const [registryId, registryMethod] = potDetail.registryProvider.split(\":\");\n        if (registryId && registryMethod) {\n          Near.asyncView(registryId, registryMethod, { account_id: context.accountId })\n            .then((canApply) => {\n              State.update({ canApply, potDetail });\n            })\n            .catch((e) => {\n              console.log(\"error getting registry: \", e);\n              State.update({ potDetail, canApply: true });\n            });\n        } else {\n          State.update({ potDetail, canApply: true });\n        }\n      } else {\n        State.update({ potDetail, canApply: true });\n      }\n      if (potDetail.sybil_wrapper_provider) {\n        const [contractId, methodName] = potDetail.sybil_wrapper_provider.split(\":\");\n        Near.asyncView(contractId, methodName, { account_id: context.accountId }).then((result) => {\n          console.log(\"sybil result: \", result);\n          State.update({ sybilRequirementMet: result });\n        });\n      } else {\n        State.update({ sybilRequirementMet: true });\n      }\n    })\n    .catch((e) => {\n      console.log(\"error getting pot detail: \", e);\n      State.update({ potDetail: undefined });\n    });\n}\n\nconsole.log(\"state in pot detail: \", state);\n\nconst noPot = state.potDetail === undefined;\nconst loading = state.potDetail === null;\n\n// these will be passed down to child components\nprops.navOptions = [\n  {\n    label: \"Projects\",\n    id: \"projects\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Projects`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=projects`),\n  },\n  {\n    label: \"Applications\",\n    id: \"applications\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Applications`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=applications`),\n  },\n  {\n    label: \"Donations\",\n    id: \"donations\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Donations`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=donations`),\n  },\n  {\n    label: \"Sponsors\",\n    id: \"sponsors\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Sponsors`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=sponsors`),\n  },\n  {\n    label: \"Payouts\",\n    id: \"payouts\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Payouts`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=payouts`),\n  },\n  {\n    label: \"Settings\",\n    id: \"settings\",\n    disabled: false,\n    source: `${ownerId}/widget/Pots.Settings`,\n    href: props.hrefWithEnv(`?tab=pot&potId=${potId}&nav=settings`),\n  },\n];\n\nif (!props.nav) props.nav = \"projects\"; // default to home tab\n\n// const imageHeightPx = 120;\n// const profileImageTranslateYPx = 220;\n\nconst handleSendApplication = () => {\n  const args = {\n    message: state.applicationMessage,\n  };\n  const deposit = Big(JSON.stringify(args).length * 0.00003).plus(Big(\"10000000000000000000000\")); // add extra 0.01 NEAR as buffer\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"apply\",\n      deposit,\n      args,\n      gas: props.ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ---->\n  // poll for updates\n  const pollIntervalMs = 1000;\n  // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n  const pollId = setInterval(() => {\n    Near.asyncView(potId, \"get_applications\", {}).then((applications) => {\n      const application = applications.find(\n        (application) => application.project_id === context.accountId\n      );\n      if (application) {\n        clearInterval(pollId);\n        State.update({ applicationSuccess: true });\n      }\n    });\n  }, pollIntervalMs);\n};\n\nif (loading) return \"Loading...\";\n\nif (noPot) return \"No pot found\";\n\nreturn (\n  <Wrapper>\n    {/* {!registeredProject ? (\n      <div style={{ textAlign: \"center\", paddingTop: \"12px\" }}>Project not found</div>\n    ) : ( */}\n    <>\n      <Widget\n        src={`${ownerId}/widget/Pots.Header`}\n        props={{\n          ...props,\n          setApplicationModalOpen: (isOpen) => State.update({ isApplicationModalOpen: isOpen }),\n          handleApplyToPot,\n          sybilRequirementMet: state.sybilRequirementMet,\n        }}\n      />\n      <Container>\n        <Divider />\n        <ContainerInner>\n          <SidebarContainer\n          // class=\"col-3\"\n          >\n            <Widget\n              src={`${ownerId}/widget/Components.NavOptions`}\n              props={{\n                ...props,\n              }}\n            />\n          </SidebarContainer>\n          <BodyContainer\n          // class=\"col-9\"\n          >\n            <Widget\n              src={props.navOptions.find((option) => option.id == props.nav).source}\n              props={{\n                ...props,\n                potDetail: state.potDetail,\n                sybilRequirementMet: state.sybilRequirementMet,\n              }}\n            />\n          </BodyContainer>\n        </ContainerInner>\n      </Container>\n    </>\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen: state.isApplicationModalOpen,\n        onClose: () => State.update({ isApplicationModalOpen: false }),\n        children: (\n          <>\n            <ModalTitle>\n              Application message <span style={{ color: \"#DD3345\" }}>*</span>\n            </ModalTitle>\n            <Widget\n              src={`${ownerId}/widget/Inputs.TextArea`}\n              props={{\n                noLabel: true,\n                inputRows: 5,\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Your application message here...\",\n                value: state.applicationMessage,\n                onChange: (applicationMessage) => State.update({ applicationMessage }),\n                validate: () => {\n                  if (state.applicationMessage.length > MAX_APPLICATION_MESSAGE_LENGTH) {\n                    State.update({\n                      applicationMessageError: `Application message must be less than ${MAX_APPLICATION_MESSAGE_LENGTH} characters`,\n                    });\n                    return;\n                  }\n\n                  State.update({ applicationMessageError: \"\" });\n                },\n                error: state.applicationMessageError,\n              }}\n            />\n            <Row style={{ justifyContent: \"flex-end\", marginTop: \"12px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  text: \"Send application\",\n                  onClick: handleSendApplication,\n                }}\n              />\n            </Row>\n          </>\n        ),\n      }}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Detail", "fact_widget_deployments_id": "b2fe380b3996cd923ebbfb517e029ff7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}