{"tx_hash": "91W4Wu4MVsgCW9UPPvcyfwqET4tKrsxWbsJaQKwjatYb", "action_id_social": "99iXz4fPUoiJh9TmKxZ6mDbbRSXbmNAfKYqMTzS49QQ8-0-widget", "block_id": 113708856, "block_timestamp": "2024-02-27T21:21:51.972Z", "signer_id": "potlock.near", "widget_name": "Pots.Applications", "source_code": "// get applications\nconst { potId, potDetail } = props;\nconst { daysAgo } = VM.require(\"potlock.near/widget/utils\") || { daysAgo: () => \"\" };\nconst {\n  ONE_TGAS,\n  ownerId,\n  SUPPORTED_FTS: { NEAR },\n} = VM.require(\"potlock.near/widget/constants\") || {\n  ONE_TGAS: 0,\n  ownerId: \"\",\n  SUPPORTED_FTS: {},\n};\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 20px;\n  gap: 24px;\n  border-bottom: 1px #f0f0f0 solid;\n  width: 100%;\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  background: white;\n  padding: 24px 24px 12px 24px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  font-weight: 500;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 24px;\n  border-top: 1px #f0f0f0 solid;\n  background: #fafafa;\n  gap: 8px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  background: #fafafa;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst StatusText = styled.div`\n  display: flex;\n  font-size: 14px;\n  font-weight: 500;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst StatusTextMobile = styled.div`\n  display: none;\n  font-size: 14px;\n  font-weight: 500;\n  @media screen and (max-width: 768px) {\n    display: flex;\n  }\n`;\n\nconst ProjectLink = styled.a`\n  font-weight: 600;\n  color: black;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst APPLICATIONS_FILTERS = {\n  ALL: \"All applications\",\n  PENDING: \"Pending applications\",\n  APPROVED: \"Approved applications\",\n  REJECTED: \"Rejected applications\",\n};\n\nState.init({\n  isModalOpen: false,\n  newStatus: \"\",\n  projectId: \"\",\n  reviewMessage: \"\",\n  searchTerm: \"\",\n  allApplications: null,\n  filteredApplications: [],\n  filterVal: APPLICATIONS_FILTERS.ALL,\n});\n\nif (!state.allApplications) {\n  Near.asyncView(potId, \"get_applications\", {}).then((applications) => {\n    State.update({ filteredApplications: applications, allApplications: applications });\n  });\n}\n\nif (!state.allApplications) return <div class=\"spinner-border text-secondary\" role=\"status\" />;\n\nconst { owner, admins, chef } = potDetail;\n\nconst isChefOrGreater =\n  context.accountId === chef || admins.includes(context.accountId) || context.accountId === owner;\n\nconst handleApproveApplication = (projectId) => {\n  State.update({ isModalOpen: true, newStatus: \"Approved\", projectId });\n};\n\nconst handleRejectApplication = (projectId) => {\n  State.update({ isModalOpen: true, newStatus: \"Rejected\", projectId });\n};\n\nconst handleCancel = () => {\n  State.update({ isModalOpen: false, newStatus: \"\", projectId: \"\", reviewMessage: \"\" });\n};\n\nconst handleSubmit = () => {\n  const args = {\n    project_id: state.projectId,\n    status: state.newStatus,\n    notes: state.reviewMessage,\n  };\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"chef_set_application_status\",\n      deposit: NEAR.toIndivisible(0.01),\n      args,\n      gas: ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- TODO: IMPLEMENT EXTENSION WALLET HANDLING ---->\n};\n\n// console.log(\"applications: \", applications);\n// console.log(\"state: \", state);\n\nconst searchApplications = (searchTerm) => {\n  // filter applications that match the search term (message, project_id, review_notes or status)\n  const filteredApplications = state.allApplications.filter((application) => {\n    const { message, project_id, review_notes, status } = application;\n    const searchFields = [message, project_id, review_notes, status];\n    return searchFields.some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()));\n  });\n  return filteredApplications;\n};\n\nconst sortApplications = (sortVal) => {\n  if (sortVal === APPLICATIONS_FILTERS.ALL) {\n    return searchApplications(state.searchTerm);\n  }\n  const filtered = state.allApplications.filter((application) => {\n    return application.status === sortVal.split(\" \")[0];\n  });\n  return filtered;\n};\n\nreturn (\n  <>\n    <Widget\n      src={`${ownerId}/widget/Pots.NavOptionsMobile`}\n      props={{\n        ...props,\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Project.SearchBar`}\n      props={{\n        title: \"Filter\",\n        tab: tab,\n        numItems: state.filteredApplications.length,\n        itemName: \"application\",\n        sortList: Object.values(APPLICATIONS_FILTERS),\n        sortVal: state.filterVal,\n        setSearchTerm: (value) => {\n          const results = searchApplications(value);\n          State.update({ searchTerm: value, filteredApplications: results });\n        },\n        handleSortChange: (sortVal) => {\n          const sorted = sortApplications(sortVal);\n          State.update({ filteredApplications: sorted, filterVal: sortVal });\n        },\n      }}\n    />\n    {state.filteredApplications.length === 0 ? (\n      <Row>No applications to display</Row>\n    ) : (\n      state.filteredApplications.map((application, index) => {\n        const { project_id, message, status, submitted_at, review_notes } = application;\n        // console.log(\"status: \", status);\n\n        return (\n          <Row\n            key={index}\n            style={{\n              background:\n                status === \"Approved\" ? \"#F7FDE8\" : status === \"Rejected\" ? \"#FEF3F2\" : \"white\",\n            }}\n          >\n            <Widget\n              src={`${ownerId}/widget/Project.ProfileImage`}\n              props={{\n                ...props,\n                accountId: project_id,\n                imageWrapperStyle: {\n                  height: \"32px\",\n                  width: \"32px\",\n                },\n              }}\n            />\n            <Column style={{ flex: 1 }}>\n              <Row style={{ borderBottom: \"none\", padding: \"0px\" }}>\n                <ProjectLink href={props.hrefWithParams(`?tab=project&projectId=${project_id}`)}>\n                  {project_id}\n                </ProjectLink>\n                <div style={{ fontSize: \"12px\" }}>{daysAgo(submitted_at)}</div>\n              </Row>\n              <div>{message}</div>\n              <div style={{ fontSize: \"12px\", marginTop: \"8px\" }}>\n                Admin notes: {review_notes.length > 0 ? review_notes : \"None yet\"}\n              </div>\n              <StatusTextMobile>{status}</StatusTextMobile>\n            </Column>\n            <StatusText>{status}</StatusText>\n            {isChefOrGreater && (\n              <>\n                {status !== \"Approved\" && (\n                  <Widget\n                    src={`${ownerId}/widget/Components.Button`}\n                    props={{\n                      type: \"secondary\",\n                      text: \"Approve\",\n                      onClick: () => handleApproveApplication(project_id),\n                    }}\n                  />\n                )}\n                {status !== \"Rejected\" && (\n                  <Widget\n                    src={`${ownerId}/widget/Components.Button`}\n                    props={{\n                      type: \"primary\",\n                      text: \"Reject\",\n                      onClick: () => handleRejectApplication(project_id),\n                    }}\n                  />\n                )}\n              </>\n            )}\n          </Row>\n        );\n      })\n    )}\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen: state.isModalOpen,\n        onClose: () => State.update({ isModalOpen: false, newStatus: \"\", projectId: \"\" }),\n        contentStyle: {\n          padding: \"0px\",\n        },\n        children: (\n          <>\n            <ModalHeader>\n              {state.newStatus === \"Approved\"\n                ? \"Approve \"\n                : state.newStatus === \"Rejected\"\n                ? \"Reject \"\n                : \"\"}\n              application from {state.projectId}\n            </ModalHeader>\n            <ModalBody>\n              <div>Leave a note *</div>\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  noLabel: true,\n                  inputRows: 5,\n                  inputStyle: {\n                    background: \"#FAFAFA\",\n                  },\n                  placeholder: \"Type notes here\",\n                  value: state.reviewMessage,\n                  onChange: (reviewMessage) => State.update({ reviewMessage }),\n                  validate: () => {\n                    if (state.reviewMessage.length > MAX_APPLICATION_MESSAGE_LENGTH) {\n                      State.update({\n                        reviewMessageError: `Application message must be less than ${MAX_APPLICATION_MESSAGE_LENGTH} characters`,\n                      });\n                      return;\n                    }\n\n                    State.update({ reviewMessageError: \"\" });\n                  },\n                  error: state.reviewMessageError,\n                }}\n              />\n            </ModalBody>\n            <ModalFooter>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"tertiary\",\n                  text: \"Cancel\",\n                  onClick: handleCancel,\n                }}\n              />\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  text: \"Submit\",\n                  disabled: !state.reviewMessage || !!state.reviewMessageError,\n                  onClick: handleSubmit,\n                }}\n              />\n            </ModalFooter>\n          </>\n        ),\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Applications", "fact_widget_deployments_id": "5b7724a5a6be61a44d71705878dddaa7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 21}