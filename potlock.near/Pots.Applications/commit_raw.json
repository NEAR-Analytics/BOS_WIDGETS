{"tx_hash": "7NNystangKL8dvkCS9qqPrBbKtP92w8rK34PP723fLXs", "action_id_social": "5134ixs8i6j1oHdGjqHVVxH7mFFCpGvuV6nuTJh8Zarg-0-widget", "block_id": 117397115, "block_timestamp": "2024-04-22T18:03:26.096Z", "signer_id": "potlock.near", "widget_name": "Pots.Applications", "source_code": "// get applications\nconst { potId, potDetail, hrefWithParams } = props;\nconst { daysAgo } = VM.require(\"potlock.near/widget/utils\") || { daysAgo: () => \"\" };\nconst {\n  ONE_TGAS,\n  ownerId,\n  SUPPORTED_FTS: { NEAR },\n} = VM.require(\"potlock.near/widget/constants\") || {\n  ONE_TGAS: 0,\n  ownerId: \"\",\n  SUPPORTED_FTS: {},\n};\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getApplications: () => {},\n};\n\nconst { getTimePassed, _address } = VM.require(`${ownerId}/widget/Components.DonorsUtils`) || {\n  _address: (address) => address,\n};\n\nconst MAX_APPLICATION_MESSAGE_LENGTH = 1000;\n\nconst applications = PotSDK.getApplications(potId);\n\nconst getApplicationCount = (sortVal) => {\n  if (!applications) return;\n  return applications?.filter((application) => {\n    if (sortVal === \"All\") return true;\n    return application.status === sortVal;\n  })?.length;\n};\n\nconst APPLICATIONS_FILTERS = {\n  ALL: {\n    label: \"All applications\",\n    val: \"ALL\",\n    count: getApplicationCount(\"All\"),\n  },\n  PENDING: {\n    label: \"Pending applications\",\n    val: \"PENDING\",\n\n    count: getApplicationCount(\"Pending\"),\n  },\n  APPROVED: {\n    label: \"Approved applications\",\n    val: \"APPROVED\",\n    count: getApplicationCount(\"Approved\"),\n  },\n  REJECTED: {\n    label: \"Rejected applications\",\n    val: \"REJECTED\",\n    count: getApplicationCount(\"Rejected\"),\n  },\n};\n\nconst APPLICATIONS_FILTERS_TAGS = {\n  Pending: {\n    label: \"Pending\",\n    borderColor: \"#C7C7C7\",\n    color: \"#292929\",\n    background: \"#F6F5F3\",\n    icon: (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M8 0.5C3.86 0.5 0.5 3.86 0.5 8C0.5 12.14 3.86 15.5 8 15.5C12.14 15.5 15.5 12.14 15.5 8C15.5 3.86 12.14 0.5 8 0.5ZM8 14C4.685 14 2 11.315 2 8C2 4.685 4.685 2 8 2C11.315 2 14 4.685 14 8C14 11.315 11.315 14 8 14Z\"\n          fill=\"#7B7B7B\"\n        />\n        <path\n          d=\"M4.25 9.125C4.87132 9.125 5.375 8.62132 5.375 8C5.375 7.37868 4.87132 6.875 4.25 6.875C3.62868 6.875 3.125 7.37868 3.125 8C3.125 8.62132 3.62868 9.125 4.25 9.125Z\"\n          fill=\"#7B7B7B\"\n        />\n        <path\n          d=\"M8 9.125C8.62132 9.125 9.125 8.62132 9.125 8C9.125 7.37868 8.62132 6.875 8 6.875C7.37868 6.875 6.875 7.37868 6.875 8C6.875 8.62132 7.37868 9.125 8 9.125Z\"\n          fill=\"#7B7B7B\"\n        />\n        <path\n          d=\"M11.75 9.125C12.3713 9.125 12.875 8.62132 12.875 8C12.875 7.37868 12.3713 6.875 11.75 6.875C11.1287 6.875 10.625 7.37868 10.625 8C10.625 8.62132 11.1287 9.125 11.75 9.125Z\"\n          fill=\"#7B7B7B\"\n        />\n      </svg>\n    ),\n  },\n  Approved: {\n    label: \"Approved\",\n    color: \"#192C07\",\n    borderColor: \"#9ADD33\",\n    background: \"#F7FDE8\",\n    icon: (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M8 0.5C3.86 0.5 0.5 3.86 0.5 8C0.5 12.14 3.86 15.5 8 15.5C12.14 15.5 15.5 12.14 15.5 8C15.5 3.86 12.14 0.5 8 0.5ZM8 14C4.6925 14 2 11.3075 2 8C2 4.6925 4.6925 2 8 2C11.3075 2 14 4.6925 14 8C14 11.3075 11.3075 14 8 14ZM11.4425 4.685L6.5 9.6275L4.5575 7.6925L3.5 8.75L6.5 11.75L12.5 5.75L11.4425 4.685Z\"\n          fill=\"#629D13\"\n        />\n      </svg>\n    ),\n  },\n  Rejected: {\n    label: \"Rejected\",\n    borderColor: \"#FAA7A8\",\n    color: \"#490813\",\n    background: \"#FEF3F2\",\n    icon: (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M8 0.5C3.86 0.5 0.5 3.86 0.5 8C0.5 12.14 3.86 15.5 8 15.5C12.14 15.5 15.5 12.14 15.5 8C15.5 3.86 12.14 0.5 8 0.5ZM2 8C2 4.685 4.685 2 8 2C9.3875 2 10.6625 2.4725 11.675 3.2675L3.2675 11.675C2.4725 10.6625 2 9.3875 2 8ZM8 14C6.6125 14 5.3375 13.5275 4.325 12.7325L12.7325 4.325C13.5275 5.3375 14 6.6125 14 8C14 11.315 11.315 14 8 14Z\"\n          fill=\"#ED464F\"\n        />\n      </svg>\n    ),\n  },\n};\n\nState.init({\n  isModalOpen: false,\n  newStatus: \"\",\n  projectId: \"\",\n  reviewMessage: \"\",\n  searchTerm: \"\",\n  allApplications: null,\n  filteredApplications: [],\n  filterVal: \"ALL\",\n});\n\nconst {\n  isModalOpen,\n  newStatus,\n  projectId,\n  reviewMessage,\n  searchTerm,\n  allApplications,\n  filteredApplications,\n  filterVal,\n} = state;\n\nif (applications && !allApplications) {\n  applications.reverse();\n  State.update({\n    filteredApplications: applications,\n    allApplications: applications,\n  });\n}\n\nif (!allApplications) return <div class=\"spinner-border text-secondary\" role=\"status\" />;\n\nconst { owner, admins, chef } = potDetail;\n\nconst isChefOrGreater =\n  context.accountId === chef || admins.includes(context.accountId) || context.accountId === owner;\n\nconst handleApproveApplication = (projectId) => {\n  State.update({ isModalOpen: true, newStatus: \"Approved\", projectId });\n};\n\nconst handleRejectApplication = (projectId) => {\n  State.update({ isModalOpen: true, newStatus: \"Rejected\", projectId });\n};\n\nconst handleCancel = () => {\n  State.update({ isModalOpen: false, newStatus: \"\", projectId: \"\", reviewMessage: \"\" });\n};\n\nconst handleSubmit = () => {\n  const args = {\n    project_id: projectId,\n    status: newStatus,\n    notes: reviewMessage,\n  };\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"chef_set_application_status\",\n      deposit: NEAR.toIndivisible(0.01),\n      args,\n      gas: ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- TODO: IMPLEMENT EXTENSION WALLET HANDLING ---->\n};\n\nconst searchApplications = (searchTerm) => {\n  // filter applications that match the search term (message, project_id, review_notes or status)\n  const filteredApplications = allApplications?.filter((application) => {\n    const { message, project_id, review_notes, status } = application;\n    const searchFields = [message, project_id, review_notes, status];\n    return searchFields.some((field) =>\n      field.toLowerCase().includes(searchTerm.toLowerCase().trim())\n    );\n  });\n  return filteredApplications;\n};\n\nconst sortApplications = (key) => {\n  if (key === \"ALL\") {\n    return searchApplications(searchTerm);\n  }\n  const filtered = allApplications?.filter((application) => {\n    return application.status === APPLICATIONS_FILTERS[key].label.split(\" \")[0];\n  });\n  return filtered;\n};\n\nconst handleSort = (key) => {\n  const sorted = sortApplications(key);\n  State.update({ filteredApplications: sorted, filterVal: key });\n};\n\nconst ProfileImg = ({ profile }) => (\n  <Widget src=\"mob.near/widget/ProfileImage\" props={{ profile, style: {} }} />\n);\n\nconst Container = styled.div`\n  display: flex;\n  gap: 2rem;\n  .dropdown {\n    display: none;\n  }\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n    gap: 1.5rem;\n    .dropdown {\n      display: flex;\n    }\n  }\n`;\n\nconst Filter = styled.div`\n  display: grid;\n  width: 286px;\n  border-radius: 6px;\n  padding: 8px 0;\n  border: 1px solid var(--Neutral-500, #7b7b7b);\n  height: fit-content;\n  .item {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 0.5rem 1rem;\n    font-size: 14px;\n    cursor: pointer;\n    svg {\n      opacity: 0;\n      transition: all 300ms ease;\n    }\n    &.active {\n      svg {\n        opacity: 1;\n      }\n    }\n    &:hover {\n      svg {\n        opacity: 1;\n      }\n    }\n  }\n  .count {\n    color: #7b7b7b;\n    margin-left: auto;\n  }\n  @media only screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Applications = styled.div`\n  border-radius: 6px;\n  border: 1px solid #7b7b7b;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  max-width: 711px;\n  width: 100%;\n`;\nconst SearchBar = styled.div`\n  display: flex;\n  position: relative;\n  svg {\n    position: absolute;\n    left: 1.5rem;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  input {\n    font-size: 14px;\n    background: #f6f5f3;\n    width: 100%;\n    height: 100%;\n    padding: 8px 24px 8px 60px;\n    border: none;\n    outline: none;\n  }\n  @media only screen and (max-width: 768px) {\n    svg {\n      left: 1rem;\n    }\n\n    input {\n      padding: 8px 24px 8px 54px;\n    }\n  }\n`;\n\nconst ApplicationRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 1.5rem;\n  font-size: 14px;\n  position: relative;\n  border-top: 1px solid #c7c7c7;\n  .header {\n    display: flex;\n    gap: 1rem;\n    justify-content: space-between;\n    position: relative;\n    align-items: center;\n  }\n  .header-info {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    cursor: auto;\n  }\n  .profile-image {\n    margin-right: 8px;\n    width: 24px;\n    height: 24px;\n  }\n  .name {\n    color: #292929;\n    font-weight: 600;\n  }\n  .address {\n    color: #7b7b7b;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 300ms;\n    position: relative;\n    z-index: 2;\n    &:hover {\n      color: #292929;\n    }\n  }\n  .content {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    overflow: hidden;\n    transition: all 300ms ease-in-out;\n    max-height: 0;\n    .message {\n      padding-top: 1rem;\n    }\n    .notes {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      .title {\n        color: #7b7b7b;\n      }\n    }\n    button {\n      width: fit-content;\n    }\n  }\n  .arrow {\n    rotate: 180deg;\n    transition: all 300ms;\n  }\n  .toggle-check {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 67px;\n    z-index: 1;\n    opacity: 0;\n    cursor: pointer;\n  }\n  .toggle-check:checked + .header .arrow {\n    rotate: 0deg;\n  }\n  .toggle-check:checked + .header + .content {\n    max-height: 100%;\n  }\n  @media only screen and (max-width: 768px) {\n    padding: 1rem;\n    .header-info {\n      flex-wrap: wrap;\n      gap: 0px;\n    }\n    .name {\n      margin: 0 8px;\n    }\n    .date {\n      line-height: 1;\n      width: 100%;\n      margin-left: 2.5rem;\n    }\n  }\n`;\n\nconst Dot = styled.div`\n  width: 6px;\n  height: 6px;\n  background: #7b7b7b;\n  border-radius: 50%;\n\n  @media only screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Status = styled.div`\n  display: flex;\n  padding: 6px 12px;\n  gap: 8px;\n  align-items: center;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 4px;\n  margin-left: auto;\n  div {\n    font-weight: 500;\n  }\n  svg {\n    width: 1rem;\n  }\n  @media only screen and (max-width: 768px) {\n    padding: 6px;\n    div {\n      display: none;\n    }\n    svg {\n      width: 16px;\n    }\n  }\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  background: white;\n  padding: 24px 24px 12px 24px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  font-weight: 500;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 24px;\n  border-top: 1px #f0f0f0 solid;\n  background: #fafafa;\n  gap: 8px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  background: #fafafa;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst DropdownLabel = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  .label {\n    font-weight: 500;\n  }\n  .count {\n    display: flex;\n    width: ${({ digit }) => 24 + (digit - 1) * 6}px;\n    height: ${({ digit }) => 24 + (digit - 1) * 6}px;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    background: #ebebeb;\n  }\n`;\n\nreturn (\n  <Container>\n    <div className=\"dropdown\">\n      <Widget\n        src={`${ownerId}/widget/Inputs.Dropdown`}\n        props={{\n          sortVal: (\n            <DropdownLabel digit={APPLICATIONS_FILTERS[filterVal].count.toString().length}>\n              <div className=\"label\">{APPLICATIONS_FILTERS[filterVal].label}</div>\n              <div className=\"count\">{APPLICATIONS_FILTERS[filterVal].count}</div>\n            </DropdownLabel>\n          ),\n          showCount: true,\n          sortList: Object.values(APPLICATIONS_FILTERS),\n          FilterMenuCustomStyle: `left:0; right:auto;`,\n          handleSortChange: ({ val }) => {\n            handleSort(val);\n          },\n        }}\n      />\n    </div>\n    <Filter>\n      {Object.keys(APPLICATIONS_FILTERS).map((key) => (\n        <div\n          key={key}\n          className={`item ${filterVal === key ? \"active\" : \"\"}`}\n          onClick={() => handleSort(key)}\n        >\n          <svg\n            width=\"14\"\n            height=\"12\"\n            viewBox=\"0 0 14 12\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M4.59631 8.9057L1.46881 5.7782L0.403809 6.8357L4.59631 11.0282L13.5963 2.0282L12.5388 0.970703L4.59631 8.9057Z\"\n              fill=\"#7B7B7B\"\n            />\n          </svg>\n\n          <div> {APPLICATIONS_FILTERS[key].label}</div>\n          <div className=\"count\">{APPLICATIONS_FILTERS[key].count}</div>\n        </div>\n      ))}\n    </Filter>\n    <Applications>\n      <SearchBar>\n        <svg\n          width=\"14\"\n          height=\"14\"\n          viewBox=\"0 0 14 14\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M9.81641 8.69141H9.22391L9.01391 8.48891C9.74891 7.63391 10.1914 6.52391 10.1914 5.31641C10.1914 2.62391 8.00891 0.441406 5.31641 0.441406C2.62391 0.441406 0.441406 2.62391 0.441406 5.31641C0.441406 8.00891 2.62391 10.1914 5.31641 10.1914C6.52391 10.1914 7.63391 9.74891 8.48891 9.01391L8.69141 9.22391V9.81641L12.4414 13.5589L13.5589 12.4414L9.81641 8.69141ZM5.31641 8.69141C3.44891 8.69141 1.94141 7.18391 1.94141 5.31641C1.94141 3.44891 3.44891 1.94141 5.31641 1.94141C7.18391 1.94141 8.69141 3.44891 8.69141 5.31641C8.69141 7.18391 7.18391 8.69141 5.31641 8.69141Z\"\n            fill=\"#7B7B7B\"\n          />\n        </svg>\n        <input\n          type=\"text\"\n          placeholder=\"Search applications\"\n          className=\"search-input\"\n          onChange={(e) => {\n            const results = searchApplications(e.target.value);\n            State.update({ searchTerm: e.target.value, filteredApplications: results });\n          }}\n        />\n      </SearchBar>\n      {filteredApplications.length ? (\n        filteredApplications.map(({ project_id, status, message, review_notes, submitted_at }) => {\n          const { borderColor, color, icon, label, background } = APPLICATIONS_FILTERS_TAGS[status];\n\n          const profile = Social.getr(`${project_id}/profile`);\n\n          return (\n            <ApplicationRow key={project_id}>\n              <input type=\"checkbox\" className=\"toggle-check\" />\n              <div className=\"header\">\n                <div className=\"header-info\">\n                  <ProfileImg profile={profile} />\n                  {profile?.name && <div className=\"name\">{_address(profile?.name, 10)}</div>}\n\n                  <OverlayTrigger placement=\"top\" overlay={<Tooltip>{project_id}</Tooltip>}>\n                    <a\n                      className=\"address\"\n                      href={hrefWithParams(`?tab=project&projectId=${project_id}`)}\n                      target=\"_blank\"\n                    >\n                      {_address(project_id, 10)}\n                    </a>\n                  </OverlayTrigger>\n\n                  <Dot />\n                  <div className=\"date\">{daysAgo(submitted_at)}</div>\n                </div>\n                <Status\n                  style={{\n                    borderColor,\n                    color,\n                    background,\n                  }}\n                >\n                  <div>{label}</div>\n                  {icon}\n                </Status>\n                <svg\n                  width=\"12\"\n                  height=\"8\"\n                  viewBox=\"0 0 12 8\"\n                  fill=\"none\"\n                  className=\"arrow\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M6 0.294922L0 6.29492L1.41 7.70492L6 3.12492L10.59 7.70492L12 6.29492L6 0.294922Z\"\n                    fill=\"#7B7B7B\"\n                  />\n                </svg>\n              </div>\n              <div className=\"content\">\n                <div className=\"message\">{message}</div>\n                {review_notes && (\n                  <div className=\"notes\">\n                    <div className=\"title\">Admin notes:</div>\n                    <div>{review_notes}</div>\n                  </div>\n                )}\n                {isChefOrGreater && (\n                  <>\n                    {status !== \"Approved\" && (\n                      <Widget\n                        src={`${ownerId}/widget/Components.Button`}\n                        props={{\n                          type: \"secondary\",\n                          text: \"Approve\",\n                          onClick: () => handleApproveApplication(project_id),\n                        }}\n                      />\n                    )}\n                    {status !== \"Rejected\" && (\n                      <Widget\n                        src={`${ownerId}/widget/Components.Button`}\n                        props={{\n                          type: \"primary\",\n                          text: \"Reject\",\n                          onClick: () => handleRejectApplication(project_id),\n                        }}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </ApplicationRow>\n          );\n        })\n      ) : (\n        <div style={{ padding: \"1rem\" }}>No applications to display</div>\n      )}\n    </Applications>\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen,\n        onClose: () => State.update({ isModalOpen: false, newStatus: \"\", projectId: \"\" }),\n        contentStyle: {\n          padding: \"0px\",\n        },\n        children: (\n          <>\n            <ModalHeader>\n              {newStatus === \"Approved\" ? \"Approve \" : newStatus === \"Rejected\" ? \"Reject \" : \"\"}\n              application from {projectId}\n            </ModalHeader>\n            <ModalBody>\n              <div>Leave a note *</div>\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  noLabel: true,\n                  inputRows: 5,\n                  inputStyle: {\n                    background: \"#FAFAFA\",\n                  },\n                  placeholder: \"Type notes here\",\n                  value: reviewMessage,\n                  onChange: (reviewMessage) => State.update({ reviewMessage }),\n                  validate: () => {\n                    if (reviewMessage.length > MAX_APPLICATION_MESSAGE_LENGTH) {\n                      State.update({\n                        reviewMessageError: `Application message must be less than ${MAX_APPLICATION_MESSAGE_LENGTH} characters`,\n                      });\n                      return;\n                    }\n\n                    State.update({ reviewMessageError: \"\" });\n                  },\n                  error: reviewMessageError,\n                }}\n              />\n            </ModalBody>\n            <ModalFooter>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"tertiary\",\n                  text: \"Cancel\",\n                  onClick: handleCancel,\n                }}\n              />\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  text: \"Submit\",\n                  disabled: !reviewMessage || !!reviewMessageError,\n                  onClick: handleSubmit,\n                }}\n              />\n            </ModalFooter>\n          </>\n        ),\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Applications", "fact_widget_deployments_id": "4253a4c8a9f9448083ba75b0b07f9e93", "inserted_timestamp": "2024-04-22T19:43:31.756Z", "modified_timestamp": "2024-04-22T20:38:38.542Z", "__row_index": 19}