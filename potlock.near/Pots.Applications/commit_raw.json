{"tx_hash": "2rcmQqATVW4BoygGqtqi6TFhtNMAfoCsjE8tpzC8mMxb", "action_id_social": "8fnVvTj1QcU9PheLuwcDTgaZ5V8G2fvhLdVdnvoTdd27-0-widget", "block_id": 108717292, "block_timestamp": "2023-12-24T17:10:14.832Z", "signer_id": "potlock.near", "widget_name": "Pots.Applications", "source_code": "// get applications\nconst { ownerId, potId, potDetail } = props;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 20px;\n  gap: 24px;\n  border-bottom: 1px #f0f0f0 solid;\n  width: 100%;\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  background: white;\n  padding: 24px 24px 12px 24px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  font-weight: 500;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 24px;\n  border-top: 1px #f0f0f0 solid;\n  background: #fafafa;\n  gap: 8px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  background: #fafafa;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nState.init({\n  isModalOpen: false,\n  newStatus: \"\",\n  projectId: \"\",\n  reviewMessage: \"\",\n});\n\nconst applications = Near.view(potId, \"get_applications\", {});\n\nif (!applications) return \"Loading...\";\n\nconst daysAgo = (timestamp) => {\n  const now = new Date();\n  const pastDate = new Date(timestamp);\n  const differenceInTime = now - pastDate;\n\n  // Convert time difference from milliseconds to days\n  const differenceInDays = Math.floor(differenceInTime / (1000 * 3600 * 24));\n\n  return `${differenceInDays} ${differenceInDays === 1 ? \"day\" : \"days\"} ago`;\n};\n\nconst { owner, admins, chef } = potDetail;\n\nconst isChefOrGreater =\n  context.accountId === chef || admins.includes(context.accountId) || context.accountId === owner;\n\nconst handleApproveApplication = (projectId) => {\n  State.update({ isModalOpen: true, newStatus: \"Approved\", projectId });\n};\n\nconst handleRejectApplication = (projectId) => {\n  State.update({ isModalOpen: true, newStatus: \"Rejected\", projectId });\n};\n\nconst handleCancel = () => {\n  State.update({ isModalOpen: false, newStatus: \"\", projectId: \"\", reviewMessage: \"\" });\n};\n\nconst handleSubmit = () => {\n  const args = {\n    project_id: state.projectId,\n    status: state.newStatus,\n    notes: state.reviewMessage,\n  };\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"chef_set_application_status\",\n      deposit: \"0\",\n      args,\n      gas: props.ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- TODO: IMPLEMENT EXTENSION WALLET HANDLING ---->\n};\n\nreturn (\n  <>\n    {applications.map((application, index) => {\n      const { project_id, message, status, submitted_at, review_notes } = application;\n\n      return (\n        <Row key={index}>\n          <Widget\n            src={`${ownerId}/widget/Project.ProfileImage`}\n            props={{\n              ...props,\n              accountId: project_id,\n              imageWrapperStyle: {\n                height: \"32px\",\n                width: \"32px\",\n              },\n            }}\n          />\n          <Column style={{ flex: 1 }}>\n            <Row style={{ borderBottom: \"none\", padding: \"0px\" }}>\n              <div style={{ fontWeight: \"bold\" }}>{project_id}</div>\n              <div style={{ fontSize: \"12px\" }}>{props.daysAgo(submitted_at)}</div>\n            </Row>\n            <div>{message}</div>\n            <div style={{ fontSize: \"12px\", marginTop: \"8px\" }}>Admin notes: {review_notes}</div>\n          </Column>\n          <div>{status}</div>\n          {isChefOrGreater && (\n            <>\n              {status !== \"Approved\" && (\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"secondary\",\n                    text: \"Approve\",\n                    onClick: () => handleApproveApplication(project_id),\n                  }}\n                />\n              )}\n              {status !== \"Rejected\" && (\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"primary\",\n                    text: \"Reject\",\n                    onClick: () => handleRejectApplication(project_id),\n                  }}\n                />\n              )}\n            </>\n          )}\n        </Row>\n      );\n    })}\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen: state.isModalOpen,\n        onClose: () => State.update({ isModalOpen: false, newStatus: \"\", projectId: \"\" }),\n        contentStyle: {\n          padding: \"0px\",\n        },\n        children: (\n          <>\n            <ModalHeader>\n              {state.newStatus === \"Approved\"\n                ? \"Approve \"\n                : state.newStatus === \"Rejected\"\n                ? \"Reject \"\n                : \"\"}\n              application from {state.projectId}\n            </ModalHeader>\n            <ModalBody>\n              <div>Leave a note *</div>\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  noLabel: true,\n                  inputRows: 5,\n                  inputStyle: {\n                    background: \"#FAFAFA\",\n                  },\n                  placeholder: \"Type notes here\",\n                  value: state.reviewMessage,\n                  onChange: (reviewMessage) => State.update({ reviewMessage }),\n                  validate: () => {\n                    if (state.reviewMessage.length > MAX_APPLICATION_MESSAGE_LENGTH) {\n                      State.update({\n                        reviewMessageError: `Application message must be less than ${MAX_APPLICATION_MESSAGE_LENGTH} characters`,\n                      });\n                      return;\n                    }\n\n                    State.update({ reviewMessageError: \"\" });\n                  },\n                  error: state.reviewMessageError,\n                }}\n              />\n            </ModalBody>\n            <ModalFooter>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"tertiary\",\n                  text: \"Cancel\",\n                  onClick: handleCancel,\n                }}\n              />\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  text: \"Submit\",\n                  disabled: !state.reviewMessage || !!state.reviewMessageError,\n                  onClick: handleSubmit,\n                }}\n              />\n            </ModalFooter>\n          </>\n        ),\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Applications", "fact_widget_deployments_id": "cd28be0070ff044085e015f97ffd8be6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}