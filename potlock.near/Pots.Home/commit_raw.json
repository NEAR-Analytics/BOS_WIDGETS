{"tx_hash": "4mELLqciQHtCyCLgPByCm5JkeiSU9VmHUj99cAGq2xEN", "action_id_social": "2vmMEBMDQnR79ueRDzaQh64tcKonv9DKENvAC4xABzsE-0-widget", "block_id": 115526673, "block_timestamp": "2024-03-26T17:49:59.014Z", "signer_id": "potlock.near", "widget_name": "Pots.Home", "source_code": "const { ownerId } = props;\n\nlet PotFactorySDK =\n  VM.require(\"potlock.near/widget/SDK.potfactory\") ||\n  (() => ({\n    getContractId: () => {},\n    getConfig: () => {},\n    asyncGetPots: () => {},\n    canUserDeployPot: () => {},\n  }));\n\nconst [pots, setPots] = useState(null);\nconst [inProgressRounds, setInProgressRounds] = useState([]);\nconst [filteredRounds, setFilteredRounds] = useState([]);\nconst [completedRounds, setCompletedRounds] = useState([]);\nconst [filterSelcted, setFilterSelected] = useState([]);\nconst [sortBy, setSortBy] = useState(\"\");\n\nPotFactorySDK = PotFactorySDK({ env: props.env });\nconst potFactoryContractId = PotFactorySDK.getContractId();\nconst potFactoryConfig = PotFactorySDK.getConfig();\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  asyncGetConfig: () => {},\n};\n\nconst currentDate = Date.now();\n\nconst filters = {\n  application_open: (round) =>\n    currentDate > round.application_start_ms && currentDate < round.application_end_ms,\n  application_closed: (round) => currentDate > round.application_end_ms,\n  round_end: (round) => currentDate > round.public_round_end_ms,\n  round_open: (round) =>\n    currentDate > round.public_round_start_ms && currentDate < round.public_round_end_ms,\n  cooldown: (round) =>\n    currentDate > round.public_round_end_ms && currentDate < round.cooldown_end_ms,\n  completed: (round) =>\n    currentDate > round.public_round_end_ms && currentDate > round.cooldown_end_ms,\n};\n\nconst sortOptions = [\n  {\n    label: \"Most to least in pot\",\n    val: \"least_pots\",\n  },\n  {\n    label: \"Least to most in pot\",\n    val: \"most_pots\",\n  },\n  {\n    label: \"Most to least donations\",\n    val: \"most_donations\",\n  },\n  {\n    label: \"Least to most donations\",\n    val: \"least_donations\",\n  },\n];\n\nif (!pots) {\n  PotFactorySDK.asyncGetPots().then((pots) => {\n    pots.forEach(({ id }) => {\n      PotSDK.asyncGetConfig(id).then((potConfig) =>\n        setPots((prevPot) => ({\n          ...prevPot,\n          [id]: { ...potConfig, id },\n        }))\n      );\n    });\n  });\n}\n\nconst compareFunction = (a, b) => {\n  // Cooldown Rounds\n  if (filters.cooldown(a)) {\n    return -1;\n  } else if (filters.cooldown(b)) {\n    return 1;\n  }\n  // Active Rounds\n  else if (filters.round_open(a)) {\n    return -1;\n  } else if (filters.round_open(b)) {\n    return 1;\n  }\n  // Application period\n  else if (filters.application_open(a)) {\n    return -1;\n  } else if (filters.application_open(b)) {\n    return 1;\n  }\n  // Default case: no change in order\n  return 0;\n};\n\nuseEffect(() => {\n  if (pots) {\n    const potsVal = Object.values(pots);\n    const completed = [];\n    const inprogress = [];\n    potsVal.forEach((round) => {\n      if (filters.completed(round)) {\n        completed.push(round);\n      } else {\n        inprogress.push(round);\n      }\n    });\n    inprogress.sort(compareFunction);\n    setFilteredRounds(inprogress);\n    setInProgressRounds(inprogress);\n    setCompletedRounds(completed);\n  }\n}, [pots]);\n\nconst canDeploy = PotFactorySDK.canUserDeployPot(context.accountId);\n\nconst Title = styled.div`\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  font-size: 18px;\n  font-weight: 600;\n  .span {\n    font-weight: 600;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding-bottom: 48px;\n  .content {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    padding: 0 64px;\n    margin-top: 3rem;\n  }\n  .header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n    ${Title} {\n      margin-right: auto;\n      margin-bottom: 0;\n    }\n    .filters {\n      gap: 1rem;\n      display: flex;\n      align-items: center;\n      .sort {\n        width: 286px;\n        flex-direction: column;\n        padding: 0.5rem;\n        gap: 0;\n        .title {\n          display: none;\n        }\n        .option {\n          border: none;\n          width: 100%;\n          padding: 0.5rem;\n        }\n      }\n    }\n  }\n  @media only screen and (max-width: 768px) {\n    .content {\n      padding: 0 20px;\n    }\n    .header {\n      flex-direction: column;\n      align-items: flex-start;\n      gap: 1rem;\n    }\n  }\n`;\n\nconst Line = styled.div`\n  height: 1px;\n  width: 100%;\n  background: #c7c7c7;\n  margin: 3rem 0;\n`;\n\nif (!potFactoryConfig) {\n  return <div class=\"spinner-border text-secondary\" role=\"status\" />;\n}\n\nconst menuClass = `\nwidth: 286px;\nflex-direction: column;\npadding: 0.5rem;\ngap: 0;\n.title{\n  display: none;\n}\n.option{\n  border: none;\n  width: 100%;\n  padding: 0.5rem;\n}\n`;\n\nconst handleFilter = ({ val }) => {\n  let filteredRounds = inProgressRounds;\n  let selectedUpdated = [];\n\n  if (filterSelcted.includes(val)) {\n    selectedUpdated = filterSelcted.filter((item) => item !== val);\n    setFilterSelected(selectedUpdated);\n  } else {\n    selectedUpdated = [...filterSelcted, val];\n    setFilterSelected(selectedUpdated);\n  }\n\n  if (selectedUpdated.length === 0) {\n    return setFilteredRounds(inProgressRounds);\n  }\n\n  filteredRounds = filteredRounds.filter((round) =>\n    selectedUpdated.some((key) => {\n      return filters[key](round) === true;\n    })\n  );\n\n  setFilteredRounds(filteredRounds);\n};\n\nconst handleSort = ({ val }) => {\n  const sortedRounds = filteredRounds;\n  switch (val) {\n    case \"least_pots\":\n      sortedRounds.sort((a, b) => Big(b.matching_pool_balance) - Big(a.matching_pool_balance));\n      break;\n    case \"most_pots\":\n      sortedRounds.sort((a, b) => Big(a.matching_pool_balance) - Big(b.matching_pool_balance));\n      break;\n    case \"most_donations\":\n      sortedRounds.sort((a, b) => Big(b.total_public_donations) - Big(a.total_public_donations));\n      break;\n    case \"least_donations\":\n      sortedRounds.sort((a, b) => Big(a.total_public_donations) - Big(b.total_public_donations));\n      break;\n  }\n\n  setFilteredRounds(sortedRounds);\n  setSortBy(val);\n};\n\nreturn (\n  <Container>\n    <Widget\n      src={`${ownerId}/widget/Pots.HomeBanner`}\n      props={{\n        ...props,\n        canDeploy,\n      }}\n    />\n\n    <div className=\"content\">\n      <div className=\"header\">\n        <Title>\n          Active Pots <span>{filteredRounds.length}</span>\n        </Title>\n        <div className=\"filters\">\n          <Widget\n            src={`${ownerId}/widget/Inputs.FilterDropdown`}\n            props={{\n              ...props,\n              onClick: handleFilter,\n              multipleOptions: true,\n              selected: filterSelcted,\n            }}\n          />\n          <Widget\n            src={`${ownerId}/widget/Inputs.FilterDropdown`}\n            props={{\n              ...props,\n              label: \"Sort\",\n              labelIcon: \"right\",\n              options: sortOptions,\n              selected: sortBy,\n              onClick: handleSort,\n              menuClass: \"sort\",\n            }}\n          />\n        </div>\n      </div>\n\n      <Widget\n        src={`${ownerId}/widget/Project.ListSection`}\n        props={{\n          ...props,\n          items: filteredRounds,\n          renderItem: (pot) => (\n            <Widget\n              src={`${ownerId}/widget/Pots.Card`}\n              props={{\n                ...props,\n                potId: pot.id,\n              }}\n            />\n          ),\n          maxCols: 3,\n          responsive: [\n            {\n              breakpoint: 1114,\n              items: 2,\n            },\n            {\n              breakpoint: 768,\n              items: 1,\n            },\n          ],\n        }}\n      />\n      <Line />\n      <Title>\n        Completed Pots <span>{completedRounds.length}</span>\n      </Title>\n      <Widget\n        src={`${ownerId}/widget/Project.ListSection`}\n        props={{\n          ...props,\n          items: completedRounds,\n          renderItem: (pot) => (\n            <Widget\n              src={`${ownerId}/widget/Pots.Card`}\n              props={{\n                ...props,\n                potId: pot.id,\n              }}\n            />\n          ),\n          maxCols: 3,\n          responsive: [\n            {\n              breakpoint: 1114,\n              items: 2,\n            },\n            {\n              breakpoint: 768,\n              items: 1,\n            },\n          ],\n        }}\n      />\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Home", "fact_widget_deployments_id": "06ff3c692c528de4a0e3d21ded7ee548", "inserted_timestamp": "2024-03-26T19:30:52.903Z", "modified_timestamp": "2024-03-26T19:30:52.903Z", "__row_index": 7}