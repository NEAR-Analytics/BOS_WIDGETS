{"tx_hash": "94JYY9E4dsWHBFUidY8iWzPRRQJ3LXhcLyaqr7GZE6CY", "action_id_social": "E7Vt7ctXr1suS1saakooq1P9pVundjSqVWQfdiKMUFvB-0-widget", "block_id": 114398880, "block_timestamp": "2024-03-09T15:01:21.141Z", "signer_id": "potlock.near", "widget_name": "Pots.Payouts", "source_code": "// get donations\nconst { potId, potDetail } = props;\n// potDetail.cooldown_end_ms = 1710105146000; // TODO: remove this line\nconst { ownerId, SUPPORTED_FTS } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n  SUPPORTED_FTS: {},\n};\n\nconst { getTimePassed } = VM.require(`${ownerId}/widget/Components.DonorsUtils`);\n\nconst { calculatePayouts, yoctosToNear } = VM.require(\"potlock.near/widget/utils\") || {\n  calculatePayouts: () => {},\n  yoctosToNear: () => \"\",\n};\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  isUserPotAdminOrGreater: () => {},\n  getPayoutsChallenges: () => {},\n  challengePayouts: () => {},\n  adminUpdatePayoutsChallenge: () => {},\n};\n\nconst userIsAdminOrGreater = PotSDK.isUserPotAdminOrGreater(potId, context.accountId); // TODO: ADD THIS BACK IN\n// const userIsAdminOrGreater = true; // TODO: REMOVE THIS LINE\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const ALERT_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreicqarojxk6jhdtsk2scfsmnigqpxjfgar6om4wlhn5xmqbbu74u5i\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 24px;\n  width: 100%;\n  @media screen and (min-width: 375px) and (max-width: 768px) {\n    width: 99%;\n  }\n  @media screen and (max-width: 390px) {\n    width: 98%;\n  }\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst UserLink = styled.a`\n  font-weight: 600;\n  color: black;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst StatusText = styled.div`\n  display: flex;\n  font-size: 14px;\n  font-weight: 500;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst StatusTextMobile = styled.div`\n  display: none;\n  font-size: 14px;\n  font-weight: 500;\n  @media screen and (max-width: 768px) {\n    display: flex;\n  }\n`;\n\nconst OuterTextContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  @media screen and (max-width: 768px) {\n    padding-right: 10px;\n  }\n`;\n\nconst OuterText = styled.div`\n  color: #7b7b7b;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n  line-height: 24px;\n  letter-spacing: 1.12px;\n  word-wrap: break-word;\n`;\n\nconst Count = styled.div`\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n`;\n\nconst TableContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 0.5px rgba(41, 41, 41, 0.5) solid;\n  box-shadow: 0px 4px 12px -4px rgba(82, 82, 82, 0.2);\n  border-radius: 6px;\n  width: 100%;\n  overflow-x: auto;\n  flex-wrap: nowrap;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  background: #f6f5f3;\n  width: 100%;\n`;\n\nconst HeaderItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: space-between;\n  justify-content: flex-start;\n  padding: 10px 20px;\n  width: ${100 / columns.length}%;\n`;\n\nconst HeaderItemText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst RowItem = styled.a`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 20px;\n  padding: 20px;\n  width: ${100 / columns.length}%;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst RowText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst SearchBarContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  border-bottom: 1px #dbdbdb solid;\n  padding: 12px 24px;\n`;\n\nconst SearchBar = styled.input`\n  background: none;\n  width: 100%;\n  outline: none;\n  border: none;\n  color: #525252;\n  &:focus {\n    outline: none;\n    border: none;\n  }\n`;\n\nconst SearchIcon = styled.div`\n  display: flex;\n  width: 24px;\n  height: 24px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n  background: ${potDetail.all_paid_out\n    ? \"green\"\n    : potDetail.cooldown_end_ms\n    ? \"#E6B800\"\n    : \"#dd3345\"};\n  border-radius: 6px;\n  gap: 10px;\n`;\n\nconst WarningText = styled.div`\n  text-align: center;\n  color: white;\n  font-size: 16px;\n  font-weight: 600;\n  margin: 0 8px;\n\n  @media screen and (max-width: 768px) {\n    font-size: 12px;\n    margin-left: 4px;\n  }\n`;\nconst AlertSvg = styled.svg`\n  width: 24px;\n  // @media screen and (max-width: 768px) {\n  //   width: 24px;\n  // }\n`;\n\nconst DivLink = styled.div`\n  color: white;\n  font-size: 14px;\n  font-weight: 600;\n  text-decoration: underline;\n  cursor: pointer;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  background: white;\n  padding: 24px 24px 12px 24px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  font-weight: 500;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 24px;\n  border-top: 1px #f0f0f0 solid;\n  background: #fafafa;\n  gap: 8px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  background: #fafafa;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst ChallengesHeaderText = styled.div`\n  color: #292929;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n  margin-top: 16px;\n`;\n\nconst ChallengeRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  gap: 24px;\n  border-bottom: 1px #f0f0f0 solid;\n  width: 100%;\n`;\n\nconst payoutsChallenges = PotSDK.getPayoutsChallenges(potId); // TODO: ADD THIS BACK IN\n// const payoutsChallenges = [\n//   {\n//     challenger_id: \"lachlan.near\",\n//     created_at: Date.now(),\n//     reason: \"I don't think these payouts are accurate\",\n//     admin_notes: \"they are\",\n//     resolved: true,\n//   },\n// ]; // TODO: REMOVE THIS\n\nconst existingChallengeForUser = (payoutsChallenges || []).find(\n  (challenge) => challenge.challenger_id === context.accountId\n);\n// console.log(\"payoutsChallenges: \", payoutsChallenges);\n\nState.init({\n  allPayouts: null,\n  filteredPayouts: null,\n  showChallengePayoutsModal: false,\n  challengeReason: \"\",\n  challengeReasonError: \"\",\n  adminModalChallengerId: \"\",\n  challengeAdminNotes: \"\",\n  challengeAdminNotesError: \"\",\n  resolveChallenge: false,\n});\n\nif (!state.challengeReason && existingChallengeForUser) {\n  State.update({ challengeReason: existingChallengeForUser.reason });\n}\n\nconst allDonationsForPot = Near.view(potId, \"get_public_round_donations\", {});\nif (!state.allPayouts && allDonationsForPot) {\n  const calculatedPayouts = calculatePayouts(allDonationsForPot, potDetail.matching_pool_balance);\n  console.log(\"calculated payouts: \", calculatedPayouts);\n  if (potDetail.payouts.length) {\n    // handle these payouts, which don't contain all the info needed\n    // pot payouts contain id, project_id, amount & paid_at\n    // loop through potDetail payouts and synthesize the two sets of payouts, so projectId and matchingAmount are taken from potDetail payouts, and donorCount and totalAmount are taken from calculatedPayouts\n    const synthesizedPayouts = potDetail.payouts.map((payout) => {\n      const { project_id, amount } = payout;\n      const { totalAmount, matchingAmount, donorCount } = calculatedPayouts[project_id];\n      return {\n        projectId: project_id,\n        totalAmount,\n        matchingAmount: amount,\n        donorCount,\n      };\n    });\n    State.update({ allPayouts: synthesizedPayouts, filteredPayouts: synthesizedPayouts });\n  } else {\n    // calculate estimated payouts\n    const allPayouts = Object.entries(calculatedPayouts).map(\n      ([projectId, { totalAmount, matchingAmount, donorCount }]) => {\n        return {\n          projectId,\n          totalAmount,\n          matchingAmount,\n          donorCount,\n        };\n      }\n    ); // TODO: refactor to use PotsSDK (note that this is duplicated in Pots/Projects.jsx)\n    allPayouts.sort((a, b) => {\n      // sort by matching pool allocation, highest to lowest\n      return b.matchingAmount - a.matchingAmount;\n    });\n    State.update({ allPayouts, filteredPayouts: allPayouts });\n  }\n}\n\nconst columns = [\"Project\", \"Total Raised\", \"Total Unique Donors\", \"Matching Pool Allocation\"];\n\nconst { base_currency } = potDetail;\n\nconst searchPayouts = (searchTerm) => {\n  // filter payouts that match the search term (donor_id, project_id)\n  const filteredPayouts = state.allPayouts.filter((payout) => {\n    const { projectId } = payout;\n    const searchFields = [projectId];\n    return searchFields.some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()));\n  });\n  filteredPayouts.sort((a, b) => {\n    // sort by matching pool allocation, highest to lowest\n    return b.matchingAmount - a.matchingAmount;\n  });\n  return filteredPayouts;\n};\n\nconst handleCancelChallenge = () => {\n  State.update({ showChallengePayoutsModal: false, challengeReason: \"\", challengeReasonError: \"\" });\n};\n\nconst handleSubmitChallenge = () => {\n  PotSDK.challengePayouts(potId, state.challengeReason);\n  State.update({ showChallengePayoutsModal: false });\n};\n\nconst handleAdminUpdateChallenge = () => {\n  PotSDK.adminUpdatePayoutsChallenge(\n    potId,\n    state.adminModalChallengerId,\n    state.challengeAdminNotes,\n    state.resolveChallenge\n  );\n  State.update({\n    adminModalChallengerId: \"\",\n    challengeAdminNotes: \"\",\n    challengeAdminNotesError: \"\",\n    resolveChallenge: false,\n  });\n};\n\nconst handleCancelAdminUpdateChallenge = () => {\n  State.update({\n    adminModalChallengerId: \"\",\n    challengeAdminNotes: \"\",\n    challengeAdminNotesError: \"\",\n    resolveChallenge: false,\n  });\n};\n\nconst MAX_ACCOUNT_ID_DISPLAY_LENGTH = 20;\nconst MAX_CHALLENGE_TEXT_LENGTH = 1000;\n\n// console.log(\"state in payouts: \", state);\n\nreturn (\n  <Container>\n    <Widget\n      src={`${ownerId}/widget/Pots.NavOptionsMobile`}\n      props={{\n        ...props,\n      }}\n    />\n    <Row>\n      <a\n        href=\"https://github.com/PotLock/bos-app/blob/297df3d99c0d4423b32cb773b3912dd0b670963a/apps/potlock/widget/utils.jsx#L179-L367\"\n        target=\"_blank\"\n        style={{ color: \"#2b2b2b\" }}\n      >\n        View payouts calculation code\n      </a>\n      <OuterTextContainer style={{ alignSelf: \"flex-end\" }}>\n        <OuterText>all payouts</OuterText>\n        <Count>{state.allPayouts.length}</Count>\n      </OuterTextContainer>\n    </Row>\n    {!potDetail.payouts.length && (\n      <InfoContainer>\n        <Row style={{ justifyContent: \"center\" }}>\n          <AlertSvg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"white\"\n            aria-hidden=\"true\"\n            // width=\"18px\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\"\n            ></path>\n          </AlertSvg>\n          <WarningText>\n            {potDetail.all_paid_out\n              ? \"All payouts have been paid out.\"\n              : potDetail.cooldown_end_ms\n              ? \"These payouts have been set on the contract but have not been paid out yet.\"\n              : \"These payouts are estimated amounts only and have not been set on the contract yet.\"}\n          </WarningText>\n        </Row>\n        {potDetail.cooldown_end_ms > Date.now() && (\n          <DivLink onClick={() => State.update({ showChallengePayoutsModal: true })}>\n            {existingChallengeForUser && !existingChallengeForUser.resolved\n              ? `Update your challenge (submitted ${getTimePassed(\n                  existingChallengeForUser.created_at\n                )} ago)`\n              : \"Something doesn't look right? Challenge payouts\"}\n          </DivLink>\n        )}\n      </InfoContainer>\n    )}\n    <TableContainer>\n      <SearchBarContainer>\n        <SearchIcon>\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M15.7549 14.2549H14.9649L14.6849 13.9849C15.6649 12.8449 16.2549 11.3649 16.2549 9.75488C16.2549 6.16488 13.3449 3.25488 9.75488 3.25488C6.16488 3.25488 3.25488 6.16488 3.25488 9.75488C3.25488 13.3449 6.16488 16.2549 9.75488 16.2549C11.3649 16.2549 12.8449 15.6649 13.9849 14.6849L14.2549 14.9649V15.7549L19.2549 20.7449L20.7449 19.2549L15.7549 14.2549ZM9.75488 14.2549C7.26488 14.2549 5.25488 12.2449 5.25488 9.75488C5.25488 7.26488 7.26488 5.25488 9.75488 5.25488C12.2449 5.25488 14.2549 7.26488 14.2549 9.75488C14.2549 12.2449 12.2449 14.2549 9.75488 14.2549Z\"\n              fill=\"#C7C7C7\"\n            />\n          </svg>\n        </SearchIcon>\n        <SearchBar\n          placeholder=\"Search payouts\"\n          onChange={({ target: { value } }) => {\n            const filteredPayouts = searchPayouts(value);\n            State.update({ filteredPayouts });\n          }}\n        />\n      </SearchBarContainer>\n      <Header>\n        {/* {columns.map((column, index) => (\n          <HeaderItem>\n            <HeaderItemText key={index}>{column}</HeaderItemText>\n          </HeaderItem>\n        ))} */}\n        <HeaderItem style={{ width: \"40%\" }}>\n          <HeaderItemText>Project</HeaderItemText>\n        </HeaderItem>\n        <HeaderItem style={{ width: \"20%\" }}>\n          <HeaderItemText>Total Raised</HeaderItemText>\n        </HeaderItem>\n        <HeaderItem style={{ width: \"20%\" }}>\n          <HeaderItemText>Unique Donors</HeaderItemText>\n        </HeaderItem>\n        <HeaderItem style={{ width: \"20%\" }}>\n          <HeaderItemText>Pool Allocation</HeaderItemText>\n        </HeaderItem>\n      </Header>\n      {!state.filteredPayouts ? (\n        <div>Loading</div>\n      ) : state.filteredPayouts.length === 0 ? (\n        <Row style={{ padding: \"12px\" }}>No payouts to display</Row>\n      ) : (\n        state.filteredPayouts.map((payout, index) => {\n          const { projectId, donorCount, matchingAmount, totalAmount } = payout;\n          // const totalDonationAmount =\n          //   SUPPORTED_FTS[base_currency.toUpperCase()].fromIndivisible(total_amount);\n\n          return (\n            <Row key={index}>\n              {/* Project */}\n              <RowItem\n                href={`?tab=project&projectId=${projectId}`}\n                target={\"_blank\"}\n                style={{ width: \"40%\" }}\n              >\n                <Widget\n                  src={`${ownerId}/widget/Project.ProfileImage`}\n                  props={{\n                    ...props,\n                    accountId: projectId,\n                    style: {\n                      height: \"24px\",\n                      width: \"24px\",\n                    },\n                  }}\n                />\n                <RowText>\n                  {projectId.length > MAX_ACCOUNT_ID_DISPLAY_LENGTH\n                    ? projectId.slice(0, MAX_ACCOUNT_ID_DISPLAY_LENGTH) + \"...\"\n                    : projectId}\n                </RowText>\n              </RowItem>\n              {/* Total Raised */}\n              <RowItem style={{ width: \"20%\" }}>\n                <RowText>{yoctosToNear(totalAmount, true)}</RowText>\n              </RowItem>\n              {/* Total Unique Donors */}\n              <RowItem style={{ width: \"20%\" }}>\n                <RowText>{donorCount}</RowText>\n              </RowItem>\n              {/* Matching Pool Allocation */}\n              <RowItem style={{ width: \"20%\" }}>\n                <RowText>{yoctosToNear(matchingAmount, true)}</RowText>\n              </RowItem>\n            </Row>\n          );\n        })\n      )}\n    </TableContainer>\n    {}\n    <ChallengesHeaderText>Payouts Challenges</ChallengesHeaderText>\n    {!payoutsChallenges ? (\n      \"Loading...\"\n    ) : payoutsChallenges.length === 0 ? (\n      <ChallengeRow>No payouts challenges to display</ChallengeRow>\n    ) : (\n      payoutsChallenges.map((challenge, index) => {\n        const { challenger_id, created_at, reason, admin_notes, resolved } = challenge;\n        // console.log(\"status: \", status);\n\n        return (\n          <ChallengeRow\n            key={index}\n            style={{\n              background: resolved ? \"#F7FDE8\" : \"white\",\n            }}\n          >\n            <Widget\n              src={`${ownerId}/widget/Project.ProfileImage`}\n              props={{\n                ...props,\n                accountId: challenger_id,\n                style: {\n                  alignSelf: \"flex-start\",\n                  height: \"32px\",\n                  width: \"32px\",\n                },\n                // imageWrapperStyle: {\n                //   height: \"32px\",\n                //   width: \"32px\",\n                // },\n              }}\n            />\n            <Column style={{ flex: 1 }}>\n              <ChallengeRow\n                style={{ borderBottom: \"none\", padding: \"0px\", justifyContent: \"flex-start\" }}\n              >\n                <UserLink href={props.hrefWithParams(`?tab=profile&accountId=${challenger_id}`)}>\n                  {challenger_id}\n                </UserLink>\n                <div style={{ fontSize: \"12px\" }}>{getTimePassed(created_at) + \" ago\"}</div>\n              </ChallengeRow>\n              <div>{reason}</div>\n              <div style={{ fontSize: \"12px\", marginTop: \"8px\" }}>\n                Admin notes: {admin_notes && admin_notes.length > 0 ? admin_notes : \"None yet\"}\n              </div>\n              <StatusTextMobile>{resolved ? \"Resolved\" : \"Unresolved\"}</StatusTextMobile>\n            </Column>\n            <StatusText>{resolved ? \"Resolved\" : \"Unresolved\"}</StatusText>\n            {userIsAdminOrGreater && !resolved && (\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"secondary\",\n                  text: \"Update/Resolve\",\n                  onClick: () => State.update({ adminModalChallengerId: challenger_id }),\n                }}\n              />\n            )}\n          </ChallengeRow>\n        );\n      })\n    )}\n    {/* Challenge modal */}\n    {state.showChallengePayoutsModal && (\n      <Widget\n        src={`${ownerId}/widget/Components.Modal`}\n        props={{\n          isModalOpen: state.showChallengePayoutsModal,\n          onClose: handleCancelChallenge,\n          contentStyle: {\n            padding: \"0px\",\n          },\n          children: (\n            <>\n              <ModalHeader>Challenge Payouts</ModalHeader>\n              <ModalBody>\n                <div>Explain the reason for your challenge</div>\n                <Widget\n                  src={`${ownerId}/widget/Inputs.TextArea`}\n                  props={{\n                    noLabel: true,\n                    inputRows: 5,\n                    inputStyle: {\n                      background: \"#FAFAFA\",\n                    },\n                    placeholder: \"Type the reason for your challenge here\",\n                    value: state.challengeReason,\n                    onChange: (challengeReason) => State.update({ challengeReason }),\n                    validate: () => {\n                      if (state.challengeReason.length > MAX_CHALLENGE_TEXT_LENGTH) {\n                        State.update({\n                          challengeReasonError: `Challenge reason must be less than ${MAX_CHALLENGE_TEXT_LENGTH} characters`,\n                        });\n                        return;\n                      }\n\n                      State.update({ challengeReasonError: \"\" });\n                    },\n                    error: state.challengeReasonError,\n                  }}\n                />\n              </ModalBody>\n              <ModalFooter>\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"tertiary\",\n                    text: \"Cancel\",\n                    onClick: handleCancelChallenge,\n                  }}\n                />\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"primary\",\n                    text: \"Submit Challenge\",\n                    disabled: !state.challengeReason || !!state.challengeReasonError,\n                    onClick: handleSubmitChallenge,\n                  }}\n                />\n              </ModalFooter>\n            </>\n          ),\n        }}\n      />\n    )}\n    {/* Admin update challenge modal */}\n    {state.adminModalChallengerId && (\n      <Widget\n        src={`${ownerId}/widget/Components.Modal`}\n        props={{\n          isModalOpen: state.adminModalChallengerId,\n          onClose: handleCancelAdminUpdateChallenge,\n          contentStyle: {\n            padding: \"0px\",\n          },\n          children: (\n            <>\n              <ModalHeader>Update Challenge from {state.adminModalChallengerId}</ModalHeader>\n              <ModalBody>\n                <HeaderItemText>Challenge Reason:</HeaderItemText>\n                <div>\n                  {\n                    payoutsChallenges.find(\n                      (challenge) => challenge.challenger_id === state.adminModalChallengerId\n                    ).reason\n                  }\n                </div>\n                <Widget\n                  src={`${ownerId}/widget/Inputs.TextArea`}\n                  props={{\n                    noLabel: true,\n                    inputRows: 5,\n                    inputStyle: {\n                      background: \"#FAFAFA\",\n                    },\n                    placeholder: \"Respond to the challenge here\",\n                    value: state.challengeAdminNotes,\n                    onChange: (challengeAdminNotes) => State.update({ challengeAdminNotes }),\n                    validate: () => {\n                      if (state.challengeAdminNotes.length > MAX_CHALLENGE_TEXT_LENGTH) {\n                        State.update({\n                          challengeAdminNotesError: `Notes must be less than ${MAX_CHALLENGE_TEXT_LENGTH} characters`,\n                        });\n                        return;\n                      }\n\n                      State.update({ challengeAdminNotesError: \"\" });\n                    },\n                    error: state.challengeAdminNotesError,\n                  }}\n                />\n                <Widget\n                  src={`${ownerId}/widget/Inputs.Checkbox`}\n                  props={{\n                    // id: \"registrationSelector\",\n                    label: \"Resolve this challenge?\",\n                    checked: state.resolveChallenge,\n                    onClick: (e) => {\n                      State.update({\n                        resolveChallenge: e.target.checked,\n                      });\n                    },\n                  }}\n                />\n              </ModalBody>\n              <ModalFooter>\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"tertiary\",\n                    text: \"Cancel\",\n                    onClick: handleCancelAdminUpdateChallenge,\n                  }}\n                />\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"primary\",\n                    text: \"Submit Challenge\",\n                    disabled: !state.challengeReason || !!state.challengeReasonError,\n                    onClick: handleAdminUpdateChallenge,\n                  }}\n                />\n              </ModalFooter>\n            </>\n          ),\n        }}\n      />\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Payouts", "fact_widget_deployments_id": "15e573d2f3403d32016dff959f7f1ce4", "inserted_timestamp": "2024-03-09T16:26:53.735Z", "modified_timestamp": "2024-03-09T16:26:53.735Z", "__row_index": 2}