{"tx_hash": "4nvsixqpZeLvEiH1T5KgcnJMhvZF89fYefyi3xD3jjiv", "action_id_social": "FPhbe1k8nLqXYye43z2zYyGPDhbiSQqtJ4sD6N6bwVvB-0-widget", "block_id": 116242209, "block_timestamp": "2024-04-06T11:33:13.302Z", "signer_id": "potlock.near", "widget_name": "Pots.Payouts", "source_code": "// get donations\nconst { potId, potDetail, allDonations } = props;\n// potDetail.cooldown_end_ms = 1710105146000; // TODO: remove this line\nconst { ownerId, SUPPORTED_FTS } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n  SUPPORTED_FTS: {},\n};\nconst { calculatePayouts, yoctosToNear } = VM.require(\"potlock.near/widget/utils\") || {\n  calculatePayouts: () => {},\n  yoctosToNear: () => \"\",\n};\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  isUserPotAdminOrGreater: () => {},\n  getPayoutsChallenges: () => {},\n  challengePayouts: () => {},\n  adminUpdatePayoutsChallenge: () => {},\n};\n\nconst userIsAdminOrGreater = PotSDK.isUserPotAdminOrGreater(potId, context.accountId); // TODO: ADD THIS BACK IN\n// const userIsAdminOrGreater = true; // TODO: REMOVE THIS LINE\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const ALERT_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreicqarojxk6jhdtsk2scfsmnigqpxjfgar6om4wlhn5xmqbbu74u5i\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n  @media screen and (min-width: 375px) and (max-width: 768px) {\n    width: 99%;\n  }\n  @media screen and (max-width: 390px) {\n    width: 98%;\n  }\n`;\n\nconst OuterTextContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  @media screen and (max-width: 768px) {\n    padding-right: 10px;\n  }\n`;\n\nconst OuterText = styled.div`\n  color: #7b7b7b;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n  line-height: 24px;\n  letter-spacing: 1.12px;\n  word-wrap: break-word;\n`;\n\nconst Count = styled.div`\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n`;\n\nconst TableContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-radius: 6px;\n  border: 1px solid #7b7b7b;\n  width: 100%;\n  overflow-x: auto;\n  flex-wrap: nowrap;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  gap: 2rem;\n  padding: 0.5rem 1rem;\n  border-bottom: 1px solid rgba(199, 199, 199, 0.5);\n  @media only screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst HeaderItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: space-between;\n  justify-content: flex-start;\n  justify-content: space-between;\n  width: 110px;\n  justify-content: right;\n  &.project {\n    flex: 1;\n    justify-content: left;\n  }\n  @media only screen and (max-width: 768px) {\n    display: none;\n    &.project {\n      display: flex;\n    }\n  }\n`;\n\nconst HeaderItemText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst MobileAmount = styled.div`\n  width: 100%;\n  margin-left: 2rem;\n  display: none;\n  max-height: 0px;\n  overflow: hidden;\n  transition: all 200ms;\n  span {\n    font-weight: 600;\n  }\n  @media screen and (max-width: 768px) {\n    display: block;\n  }\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: 1rem;\n  gap: 2rem;\n  border-top: 1px solid rgba(199, 199, 199, 0.5);\n  position: relative;\n  .toggle-check {\n    cursor: pointer;\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: 100%;\n    opacity: 0;\n    display: none;\n  }\n  .toggle-check:checked + svg {\n    rotate: 0deg;\n  }\n  .toggle-check:checked + svg + ${MobileAmount} {\n    max-height: 100px;\n  }\n  @media screen and (max-width: 768px) {\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    .toggle-check {\n      display: block;\n    }\n  }\n`;\n\nconst RowItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  width: 110px;\n  justify-content: right;\n  &:hover {\n    text-decoration: none;\n  }\n  &.project {\n    flex: 1;\n    display: flex;\n    gap: 1rem;\n    justify-content: left;\n    transition: 200ms;\n    a {\n      color: #292929;\n      font-weight: 600;\n      transition: 200ms;\n      &:hover {\n        color: #dd3345;\n        text-decoration: none;\n      }\n    }\n  }\n  @media screen and (max-width: 768px) {\n    &.project {\n      gap: 0.5rem;\n    }\n    &.donors,\n    &.amount {\n      display: none;\n    }\n  }\n`;\n\nconst RowText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 600;\n  word-wrap: break-word;\n  span {\n    color: #7b7b7b;\n    font-weight: 600;\n    display: none;\n    @media screen and (max-width: 768px) {\n      display: inline-block;\n    }\n  }\n`;\n\nconst SearchBarContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  background: #f6f5f3;\n  padding: 0.5rem 1rem;\n  @media only screen and (max-width: 768px) {\n    gap: 8px;\n  }\n`;\n\nconst SearchBar = styled.input`\n  background: none;\n  width: 100%;\n  outline: none;\n  border: none;\n  &:focus {\n    outline: none;\n    border: none;\n  }\n`;\n\nconst SearchIcon = styled.div`\n  display: flex;\n  width: 24px;\n  height: 24px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 8px;\n  border: 1px solid #f4b37d;\n  border-radius: 6px;\n  background: #fef6ee;\n  gap: 1rem;\n  margin-left: auto;\n  margin-bottom: 1.5rem;\n`;\n\nconst WarningText = styled.div`\n  text-align: center;\n  color: #dd3345;\n  font-weight: 500;\n  font-size: 14px;\n`;\nconst AlertSvg = styled.svg`\n  width: 18px;\n  @media screen and (max-width: 768px) {\n    width: 1rem;\n  }\n`;\n\nconst DivLink = styled.div`\n  color: white;\n  font-size: 14px;\n  font-weight: 600;\n  text-decoration: underline;\n  cursor: pointer;\n`;\n\n// const existingChallengeForUser = (payoutsChallenges || []).find(\n//   (challenge) => challenge.challenger_id === context.accountId\n// );\n// if (!challengeReason && existingChallengeForUser) {\n//   State.update({ challengeReason: existingChallengeForUser.reason });\n// }\nState.init({\n  allPayouts: null,\n  filteredPayouts: null,\n  showChallengePayoutsModal: false,\n});\n\nconst { allPayouts, filteredPayouts, showChallengePayoutsModal } = state;\n\nif (!allPayouts && allDonations) {\n  const calculatedPayouts = calculatePayouts(allDonations, potDetail.matching_pool_balance);\n  console.log(\"calculated payouts: \", calculatedPayouts);\n  if (potDetail.payouts.length) {\n    // handle these payouts, which don't contain all the info needed\n    // pot payouts contain id, project_id, amount & paid_at\n    // loop through potDetail payouts and synthesize the two sets of payouts, so projectId and matchingAmount are taken from potDetail payouts, and donorCount and totalAmount are taken from calculatedPayouts\n    const synthesizedPayouts = potDetail.payouts.map((payout) => {\n      const { project_id, amount } = payout;\n      const { totalAmount, donorCount } = calculatedPayouts[project_id];\n      return {\n        projectId: project_id,\n        totalAmount,\n        matchingAmount: amount,\n        donorCount,\n      };\n    });\n    State.update({ allPayouts: synthesizedPayouts, filteredPayouts: synthesizedPayouts });\n  } else {\n    // calculate estimated payouts\n    const allPayouts = Object.entries(calculatedPayouts).map(\n      ([projectId, { totalAmount, matchingAmount, donorCount }]) => {\n        return {\n          projectId,\n          totalAmount,\n          matchingAmount,\n          donorCount,\n        };\n      }\n    ); // TODO: refactor to use PotsSDK (note that this is duplicated in Pots/Projects.jsx)\n    allPayouts.sort((a, b) => {\n      // sort by matching pool allocation, highest to lowest\n      return b.matchingAmount - a.matchingAmount;\n    });\n    State.update({ allPayouts, filteredPayouts: allPayouts });\n  }\n}\n\nconst columns = [\"Project\", \"Total Raised\", \"Total Unique Donors\", \"Matching Pool Allocation\"];\n\nconst { base_currency } = potDetail;\n\nconst searchPayouts = (searchTerm) => {\n  // filter payouts that match the search term (donor_id, project_id)\n  const filteredPayouts = allPayouts.filter((payout) => {\n    const { projectId } = payout;\n    const searchFields = [projectId];\n    return searchFields.some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()));\n  });\n  filteredPayouts.sort((a, b) => {\n    // sort by matching pool allocation, highest to lowest\n    return b.matchingAmount - a.matchingAmount;\n  });\n  return filteredPayouts;\n};\n\nconst MAX_ACCOUNT_ID_DISPLAY_LENGTH = 20;\n\nconst ProfileImage = ({ projectId }) => (\n  <Widget\n    src={`${ownerId}/widget/Project.ProfileImage`}\n    props={{\n      ...props,\n      accountId: projectId,\n      style: {\n        height: \"24px\",\n        width: \"24px\",\n      },\n    }}\n  />\n);\n\nconst Arrow = styled.svg`\n  width: 12px;\n  rotate: 180deg;\n  transition: all 200ms;\n  display: none;\n  @media screen and (max-width: 768px) {\n    display: block;\n  }\n`;\n\nconst ArrowDown = (props) => (\n  <Arrow {...props} viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M6 0.294983L0 6.29498L1.41 7.70498L6 3.12498L10.59 7.70498L12 6.29498L6 0.294983Z\"\n      fill=\"#7B7B7B\"\n    />\n  </Arrow>\n);\n\nreturn (\n  <Container>\n    <Widget src={`${ownerId}/widget/Pots.PayoutsChallenges`} props={props} />\n\n    {!potDetail.all_paid_out && (\n      <InfoContainer>\n        <AlertSvg viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path\n            d=\"M7.25 4.25H8.75V5.75H7.25V4.25ZM7.25 7.25H8.75V11.75H7.25V7.25ZM8 0.5C3.86 0.5 0.5 3.86 0.5 8C0.5 12.14 3.86 15.5 8 15.5C12.14 15.5 15.5 12.14 15.5 8C15.5 3.86 12.14 0.5 8 0.5ZM8 14C4.6925 14 2 11.3075 2 8C2 4.6925 4.6925 2 8 2C11.3075 2 14 4.6925 14 8C14 11.3075 11.3075 14 8 14Z\"\n            fill=\"#EE8949\"\n          />\n        </AlertSvg>\n\n        <WarningText>\n          {potDetail.cooldown_end_ms\n            ? \"These payouts have been set on the contract but have not been paid out yet.\"\n            : \"These payouts are estimated amounts only and have not been set on the contract yet.\"}\n        </WarningText>\n      </InfoContainer>\n    )}\n    <TableContainer>\n      <Header>\n        <HeaderItem className=\"project\">\n          <HeaderItemText>Project</HeaderItemText>\n        </HeaderItem>\n        <HeaderItem>\n          <HeaderItemText>Total Raised</HeaderItemText>\n        </HeaderItem>\n        <HeaderItem>\n          <HeaderItemText>Unique Donors</HeaderItemText>\n        </HeaderItem>\n        <HeaderItem>\n          <HeaderItemText>Pool Allocation</HeaderItemText>\n        </HeaderItem>\n      </Header>\n      <SearchBarContainer>\n        <SearchIcon>\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M15.7549 14.2549H14.9649L14.6849 13.9849C15.6649 12.8449 16.2549 11.3649 16.2549 9.75488C16.2549 6.16488 13.3449 3.25488 9.75488 3.25488C6.16488 3.25488 3.25488 6.16488 3.25488 9.75488C3.25488 13.3449 6.16488 16.2549 9.75488 16.2549C11.3649 16.2549 12.8449 15.6649 13.9849 14.6849L14.2549 14.9649V15.7549L19.2549 20.7449L20.7449 19.2549L15.7549 14.2549ZM9.75488 14.2549C7.26488 14.2549 5.25488 12.2449 5.25488 9.75488C5.25488 7.26488 7.26488 5.25488 9.75488 5.25488C12.2449 5.25488 14.2549 7.26488 14.2549 9.75488C14.2549 12.2449 12.2449 14.2549 9.75488 14.2549Z\"\n              fill=\"#C7C7C7\"\n            />\n          </svg>\n        </SearchIcon>\n        <SearchBar\n          placeholder=\"Search payouts\"\n          onChange={({ target: { value } }) => {\n            const filteredPayouts = searchPayouts(value);\n            State.update({ filteredPayouts });\n          }}\n        />\n      </SearchBarContainer>\n      {!filteredPayouts ? (\n        <div>Loading</div>\n      ) : filteredPayouts.length === 0 ? (\n        <Row style={{ padding: \"12px\" }}>No payouts to display</Row>\n      ) : (\n        filteredPayouts.map((payout, index) => {\n          const { projectId, donorCount, matchingAmount, totalAmount } = payout;\n\n          return (\n            <Row key={index}>\n              <RowItem className=\"project\">\n                <ProfileImage projectId={projectId} />\n                <a href={`?tab=project&projectId=${projectId}`} target={\"_blank\"}>\n                  {projectId.length > MAX_ACCOUNT_ID_DISPLAY_LENGTH\n                    ? projectId.slice(0, MAX_ACCOUNT_ID_DISPLAY_LENGTH) + \"...\"\n                    : projectId}\n                </a>\n              </RowItem>\n              {/* Total Raised */}\n              <RowItem>\n                <RowText>\n                  {yoctosToNear(matchingAmount, true)} <span>Allocated</span>{\" \"}\n                </RowText>\n              </RowItem>\n              <input type=\"checkbox\" className=\"toggle-check\" />\n              <ArrowDown />\n              <MobileAmount>\n                <span>{yoctosToNear(totalAmount, true)}</span> raised from\n                <span>{donorCount}</span> unique donors\n              </MobileAmount>\n              {/* Total Unique Donors */}\n              <RowItem className=\"donors\">\n                <RowText>{donorCount}</RowText>\n              </RowItem>\n              {/* Matching Pool Allocation */}\n              <RowItem className=\"amount\">\n                <RowText>{yoctosToNear(matchingAmount, true)}</RowText>\n              </RowItem>\n            </Row>\n          );\n        })\n      )}\n    </TableContainer>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Payouts", "fact_widget_deployments_id": "8b895b505975d372fcce488c3596afb2", "inserted_timestamp": "2024-04-06T18:51:49.787Z", "modified_timestamp": "2024-04-06T18:51:49.787Z", "__row_index": 18}