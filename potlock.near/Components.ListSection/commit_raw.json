{"tx_hash": "2ceGE1hj7g2mWk8jM82jzBpGPWravYoLeoqcaqsff338", "action_id_social": "58Lofmoz3zHfYq2JG2xvtRWJFksgtmKPCASqYbSFatLM-0-widget", "block_id": 112687398, "block_timestamp": "2024-02-12T15:40:32.454Z", "signer_id": "potlock.near", "widget_name": "Components.ListSection", "source_code": "const {\n  ownerId,\n  removeProjectsFromCart,\n  addProjectsToCart,\n  setIsCartModalOpen,\n  tab,\n  setAmount,\n  setProjectId,\n  setNote,\n  setReferrerId,\n  setCurrency,\n  donnorProjectId,\n  amount,\n  referrerId,\n  currency,\n  note,\n} = props;\nconst sortList = [\n  \"Newest to Oldest\",\n  \"Oldest to Newest\",\n  \"Most to Least Donations\",\n  \"Least to Most Donations\",\n];\n\nconst donationContractId = \"donate.potlock.near\";\nconst [totalProjects, setTotalProjects] = useState(props.items);\nconst [displayProject, setDisplayProject] = useState([]);\nconst [lastNumberOfProject, setLastNumberOfProject] = useState(0);\nconst [searchTerm, setSearchTerm] = useState(null);\nconst [tagSelected, setTagSelected] = useState([]);\nconst [featuredProjects, setFeaturedProjects] = useState([\n  {\n    id: \"magicbuild.near\",\n    status: \"Approved\",\n    submitted_ms: 1698226284754,\n    updated_ms: 1698226284754,\n    review_notes: null,\n  },\n  {\n    id: \"potlock.near\",\n    status: \"Approved\",\n    submitted_ms: 1698437495305,\n    updated_ms: 1698437495305,\n    review_notes: null,\n  },\n  {\n    id: \"yearofchef.near\",\n    status: \"Approved\",\n    submitted_ms: 1703055390614,\n    updated_ms: 1703055390614,\n    review_notes: null,\n  },\n]);\nconst [tagsList, setTagsList] = useState([\n  {\n    label: \"Desci\",\n    value: \"de-sci\",\n    selected: false,\n  },\n  {\n    label: \"Open Source\",\n    value: \"open-source\",\n    selected: false,\n  },\n  {\n    label: \"Non Profit\",\n    value: \"non-profit\",\n    selected: false,\n  },\n  {\n    label: \"Social Impact\",\n    value: \"social-impact\",\n    selected: false,\n  },\n  {\n    label: \"Climate\",\n    value: \"climate\",\n    selected: false,\n  },\n  {\n    label: \"Public Good\",\n    value: \"public-good\",\n    selected: false,\n  },\n  {\n    label: \"Community\",\n    value: \"community\",\n    selected: false,\n  },\n  {\n    label: \"Education\",\n    value: \"education\",\n    selected: false,\n  },\n]);\nconst handleTag = (key) => {\n  // console.log(tagsList[key].value);\n  const tags = tagsList;\n  tags[key].selected = !tagsList[key].selected;\n  const dataArr = props.items;\n  let tagSelected = [];\n  tagsList.forEach((tag) => {\n    if (tag.selected) {\n      tagSelected.push(tag.value);\n    }\n  });\n  let projectFilterBySearch = [];\n  dataArr.forEach((item) => {\n    const data = Social.getr(`${item.id}/profile`);\n    tagSelected.forEach((tag) => {\n      if (data.category == tag) {\n        projectFilterBySearch.push(item);\n      }\n    });\n  });\n  if (tagSelected.length == 0) {\n    setTotalProjects(dataArr);\n  } else {\n    setTotalProjects(projectFilterBySearch);\n  }\n  // console.log(\"tagsList\", tagSelected);\n  setTagSelected(tagSelected);\n\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n\n  setTagsList(tags);\n};\nif (!totalProjects) return \"loading\";\n\nconst loadProjectsPost = () => {\n  setDisplayProject(totalProjects.map((item) => props.renderItem(item)));\n};\n\nconst loadProjects = () => {\n  setLastNumberOfProject(lastNumberOfProject + 9);\n  setDisplayProject(\n    totalProjects.slice(0, lastNumberOfProject + 9).map((item) => (\n      <Widget\n        src={`${ownerId}/widget/Components.ProjectCard`}\n        props={{\n          ...props,\n          ...item,\n          ownerId: ownerId,\n          showModal: true,\n          isExistedInCart: props.cart && !!props.cart[item.id],\n          donnorProjectId: donnorProjectId,\n          amount: amount,\n          referrerId: referrerId,\n          currency: currency,\n          note: note,\n          removeProjectsFromCart: (projectId) => {\n            removeProjectsFromCart(projectId);\n          },\n          addProjectsToCart: (project) => {\n            addProjectsToCart(project);\n          },\n          setIsCartModalOpen: (isOpen) => {\n            setIsCartModalOpen(isOpen);\n          },\n          setAmount: (value) => {\n            setAmount(value);\n          },\n          setProjectId: (id) => {\n            setProjectId(id);\n          },\n          setNote: (note) => {\n            setNote(note);\n          },\n          setReferrerId: (ref) => {\n            setReferrerId(ref);\n          },\n          setCurrency: (cur) => {\n            setCurrency(cur);\n          },\n          totalAmount: (donations) => totalAmount(donations),\n        }}\n        key={key}\n      />\n    ))\n  );\n};\n\nconst totalAmount = (donations) => {\n  if (!donations) return 0;\n  let totalDonationAmount = new Big(0);\n  for (const donation of donations) {\n    totalDonationAmount = totalDonationAmount.plus(new Big(donation.total_amount));\n  }\n  return props.nearToUsd\n    ? (props.nearToUsd * totalDonationAmount.div(1e24).toNumber()).toFixed(2)\n    : totalDonationAmount.div(1e24).toNumber().toFixed(2);\n};\n\nconst sortHighestToLowest = (projects) => {\n  const sort = (a, b) => {\n    return parseFloat(b.total) - parseFloat(a.total);\n  };\n  const projectLength = projects.length;\n\n  for (let i = 0; i < projectLength - 1; i++) {\n    for (let j = 0; j < projectLength - 1 - i; j++) {\n      if (sort(projects[j], projects[j + 1]) > 0) {\n        const temp = projects[j];\n        projects[j] = projects[j + 1];\n        projects[j + 1] = temp;\n      }\n    }\n  }\n\n  setTotalProjects(projects);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\n\nconst sortLowestToHighest = (projects) => {\n  const sort = (a, b) => {\n    return parseFloat(b.total) - parseFloat(a.total);\n  };\n  const projectLength = projects.length;\n\n  for (let i = 0; i < projectLength - 1; i++) {\n    for (let j = 0; j < projectLength - 1 - i; j++) {\n      if (sort(projects[j], projects[j + 1]) < 0) {\n        const temp = projects[j];\n        projects[j] = projects[j + 1];\n        projects[j + 1] = temp;\n      }\n    }\n  }\n\n  setTotalProjects(projects);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\n\nconst sortNewToOld = (projects) => {\n  const projectLength = projects.length;\n\n  for (let i = 0; i < projectLength - 1; i++) {\n    for (let j = 0; j < projectLength - i - 1; j++) {\n      if (projects[j].submitted_ms < projects[j + 1].submitted_ms) {\n        const temp = projects[j];\n        projects[j] = projects[j + 1];\n        projects[j + 1] = temp;\n      }\n    }\n  }\n  setTotalProjects(projects);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\n\nconst sortOldToNew = (projects) => {\n  const projectLength = projects.length;\n\n  for (let i = 0; i < projectLength - 1; i++) {\n    for (let j = 0; j < projectLength - i - 1; j++) {\n      if (projects[j].submitted_ms > projects[j + 1].submitted_ms) {\n        const temp = projects[j];\n        projects[j] = projects[j + 1];\n        projects[j + 1] = temp;\n      }\n    }\n  }\n  setTotalProjects(projects);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\n\nconst searchByWordsPots = (projects, searchTerm) => {\n  let findId = [];\n  const dataArr = props.items;\n  const allData = [];\n  dataArr.forEach((item) => {\n    const data = props.itemsAll[item.id];\n    allData.push(data);\n    if (data) {\n      if (\n        data.pot_description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        data.pot_name.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        findId.push(item.id);\n      }\n    }\n  });\n  let projectFilterBySearch = [];\n  dataArr.forEach((project) => {\n    findId.forEach((id) => {\n      if (project.id == id) {\n        projectFilterBySearch.push(project);\n      }\n    });\n  });\n  setTotalProjects(projectFilterBySearch);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\nconst searchByWordsPot = (projects, searchTerm) => {\n  let findId = [];\n  const dataArr = props.items;\n  let alldata = [];\n  dataArr.forEach((item) => {\n    const data = Social.getr(`${item.project_id}/profile`);\n    alldata.push(data);\n    if (data) {\n      if (\n        data.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        data.name.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        findId.push(item.project_id);\n      }\n    }\n  });\n  let projectFilterBySearch = [];\n  dataArr.forEach((project) => {\n    const data = Social.getr(`${project.project_id}/profile`);\n    findId.forEach((id) => {\n      if (tagSelected.length > 0) {\n        if (data.category == tagSelected[0]) {\n          if (project.project_id == id) {\n            projectFilterBySearch.push(project);\n          }\n        }\n      } else {\n        if (project.project_id == id) {\n          projectFilterBySearch.push(project);\n        }\n      }\n    });\n  });\n\n  setTotalProjects(projectFilterBySearch);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\nconst searchByWords = (projects, searchTerm) => {\n  let findId = [];\n  const dataArr = props.items;\n  let alldata = [];\n  dataArr.forEach((item) => {\n    const data = Social.getr(`${item.id}/profile`);\n    alldata.push(data);\n    if (data) {\n      if (\n        data.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        data.name.toLowerCase().includes(searchTerm.toLowerCase())\n      ) {\n        findId.push(item.id);\n      }\n    }\n  });\n  let projectFilterBySearch = [];\n  dataArr.forEach((project) => {\n    const data = Social.getr(`${project.id}/profile`);\n    findId.forEach((id) => {\n      if (tagSelected.length > 0) {\n        if (data.category == tagSelected[0]) {\n          if (project.id == id) {\n            projectFilterBySearch.push(project);\n          }\n        }\n      } else {\n        if (project.id == id) {\n          projectFilterBySearch.push(project);\n        }\n      }\n    });\n  });\n\n  setTotalProjects(projectFilterBySearch);\n  setDisplayProject([]);\n  setLastNumberOfProject(0);\n};\n\nuseEffect(() => {\n  const newTotalProjects = [];\n  const promises = totalProjects.map((project) => {\n    return Near.asyncView(donationContractId, \"get_donations_for_recipient\", {\n      recipient_id: project.id,\n    }).then((res) => {\n      const total = totalAmount(res);\n      newTotalProjects.push({ ...project, total });\n    });\n  });\n  Promise.all(promises).then(() => {\n    setTotalProjects(newTotalProjects);\n  });\n}, []);\n\nconst handleSortChange = (sortType) => {\n  switch (sortType) {\n    case \"Newest to Oldest\":\n      sortNewToOld(totalProjects);\n      break;\n    case \"Oldest to Newest\":\n      sortOldToNew(totalProjects);\n      break;\n    case \"Most to Least Donations\":\n      sortHighestToLowest(totalProjects);\n      break;\n    case \"Least to Most Donations\":\n      sortLowestToHighest(totalProjects);\n      break;\n  }\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 48px;\n  padding-top: 20px;\n`;\n\nconst ProjectList = styled.div`\n  display: grid;\n  gap: 31px;\n\n  // For mobile devices (1 column)\n  @media screen and (max-width: 739px) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n\n  // For tablet devices (2 columns)\n  @media screen and (min-width: 740px) and (max-width: 1023px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  // For desktop devices (3 columns)\n  @media screen and (min-width: 1024px) {\n    grid-template-columns: repeat(${!props.maxCols || props.maxCols > 2 ? \"3\" : \"2\"}, 1fr);\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: 1.12px;\n  text-transform: uppercase;\n`;\n\nconst TagsWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 24px;\n  color: #292929;\n`;\n\nconst Tag = styled.div`\n  display: flex;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n  border-radius: 4px;\n  background: #fff;\n  box-shadow: 0px -1px 0px 0px #c7c7c7 inset, 0px 0px 0px 0.5px #c7c7c7;\n  border: 1px solid #c7c7c7;\n  &:hover {\n    background: #fef6ee;\n  }\n`;\n\nconst OnBottom = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px 0;\n`;\n\nreturn (\n  <>\n    {tab != \"pots\" && tab != \"pot\" && (\n      <Container>\n        <Header>\n          <Title>Featured projects</Title>\n        </Header>\n\n        <ProjectList>\n          {featuredProjects.map((item) => (\n            <Widget\n              src={`${ownerId}/widget/Components.ProjectCard`}\n              props={{\n                ...props,\n                ...item,\n                referrerId: props.referrerId,\n                ownerId: ownerId,\n                showModal: true,\n                transactionHashes: props.transactionHashes,\n                isExistedInCart: props.cart && !!props.cart[item.id],\n                donnorProjectId: donnorProjectId,\n                amount: amount,\n                referrerId: referrerId,\n                currency: currency,\n                note: note,\n                removeProjectsFromCart: (projectId) => {\n                  removeProjectsFromCart(projectId);\n                },\n                addProjectsToCart: (project) => {\n                  addProjectsToCart(project);\n                },\n                setIsCartModalOpen: (isOpen) => {\n                  setIsCartModalOpen(isOpen);\n                },\n                setAmount: (value) => {\n                  setAmount(value);\n                },\n                setProjectId: (id) => {\n                  setProjectId(id);\n                },\n                setNote: (note) => {\n                  setNote(note);\n                },\n                setReferrerId: (ref) => {\n                  setReferrerId(ref);\n                },\n                setCurrency: (cur) => {\n                  setCurrency(cur);\n                },\n                totalAmount: (donations) => totalAmount(donations),\n              }}\n              key={key}\n            />\n          ))}\n        </ProjectList>\n        <OnBottom></OnBottom>\n      </Container>\n    )}\n    <Container>\n      <Header>\n        <Title>\n          all {tab == \"pots\" ? \"pots\" : \"projects\"}\n          <span style={{ color: \"#DD3345\", marginLeft: \"8px\", fontWeight: 600 }}>\n            {totalProjects.length}\n          </span>\n        </Title>\n        {/* Search bar */}\n        <Widget\n          src={`${ownerId}/widget/Project.SearchBar`}\n          props={{\n            title: \"Sort\",\n            tab: tab,\n            numItems: totalProjects.length,\n            itemName: tab == \"pots\" ? \"pot\" : \"project\",\n            sortList,\n            setSearchTerm: (value) => {\n              tab == \"pots\"\n                ? searchByWordsPots(totalProjects, value)\n                : tab == \"pot\"\n                ? searchByWordsPot(totalProjects, value)\n                : searchByWords(totalProjects, value);\n              setSearchTerm(value);\n            },\n            handleSortChange: (filter) => {\n              handleSortChange(filter);\n            },\n          }}\n        />\n        {tab != \"pots\" && tab != \"pot\" && (\n          <TagsWrapper>\n            Tags:\n            {tagsList.map((tag, key) => (\n              <Tag\n                key={key}\n                onClick={() => handleTag(key)}\n                className={`${\n                  tag.selected && \"gap-2 bg-[#FEF6EE]\"\n                } p-2 rounded border text-sm flex items-center  cursor-pointer`}\n              >\n                {tag.selected && (\n                  <svg\n                    width=\"12\"\n                    height=\"10\"\n                    viewBox=\"0 0 12 10\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M3.86204 7.58116L1.08204 4.80117L0.135376 5.74116L3.86204 9.46783L11.862 1.46783L10.922 0.527832L3.86204 7.58116Z\"\n                      fill=\"#F4B37D\"\n                    ></path>\n                  </svg>\n                )}\n                {tag.label}\n              </Tag>\n            ))}\n          </TagsWrapper>\n        )}\n      </Header>\n      <InfiniteScroll\n        loadMore={tab == \"pots\" || tab == \"pot\" ? loadProjectsPost : loadProjects}\n        hasMore={lastNumberOfProject < totalProjects.length}\n      >\n        <ProjectList>{displayProject}</ProjectList>\n      </InfiniteScroll>\n    </Container>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Components.ListSection", "fact_widget_deployments_id": "7cccbd9f512f206bddcb77d8557a7f23", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 27}