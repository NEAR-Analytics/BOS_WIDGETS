{"tx_hash": "5TDw6DvJjfZuUd2jUnqYDftxPhdHARbyuWAkuDeQYDm8", "action_id_social": "XrZxitLwW9fDckaNh2H8wdhGUs68RWWjvaDNRXFt1kj-0-widget", "block_id": 112961125, "block_timestamp": "2024-02-16T16:44:43.542Z", "signer_id": "potlock.near", "widget_name": "Project.ListSection", "source_code": "const {\n  ownerId,\n  // removeProjectsFromCart,\n  // addProjectsToCart,\n  // setIsCartModalOpen,\n  tab,\n  // setAmount,\n  // setProjectId,\n  // setNote,\n  // setReferrerId,\n  // setCurrency,\n  // donnorProjectId,\n  // amount,\n  // referrerId,\n  // currency,\n  // note,\n} = props;\n\nconsole.log(\"props in list section: \", props);\n\nconst shouldShuffle = true;\n\nconst items = useMemo(() => {\n  if (shouldShuffle) {\n    return [...props.items].sort(() => Math.random() - 0.5);\n  }\n  return props.items;\n}, [props.items, shouldShuffle]);\n\nconst sortList = [\n  \"Newest to Oldest\",\n  \"Oldest to Newest\",\n  \"Most to Least Donations\",\n  \"Least to Most Donations\",\n];\n\nconst SORT_FILTERS = {\n  ALL: \"All\",\n  NEW_TO_OLD: \"Newest to Oldest\",\n  OLD_TO_NEW: \"Oldest to Newest\",\n  MOST_TO_LEAST_DONATIONS: \"Most to Least Donations\",\n  LEAST_TO_MOST_DONATIONS: \"Least to Most Donations\",\n};\n\nconst PAGE_SIZE = 9;\n\nconst featuredProjectIds = [\"magicbuild.near\", \"potlock.near\", \"yearofchef.near\"];\nconst featuredProjects = useMemo(\n  () => props.items.filter((project) => featuredProjectIds.includes(project.id)),\n  props.items\n);\n\nconst [allProjects, setAllProjects] = useState(items);\nconst [filteredProjects, setFilteredProjects] = useState([]);\nconst [searchTerm, setSearchTerm] = useState(\"\");\n\n// const [elements, setElements] = useState(\n//   props.items.slice(0, PAGE_SIZE).map((item) => props.renderItem(item))\n// );\n// console.log(\"elements: \", elements);\n// console.log(\"num of elements: \", elements.length);\n\n// const loadMore = () => {\n//   const newElements = props.items\n//     .slice(elements.length, elements.length + PAGE_SIZE)\n//     .map(props.renderItem);\n//   setElements([...elements, ...newElements]);\n// };\n// const [page, setPage] = useState(1);\n// const [lastNumberOfProject, setLastNumberOfProject] = useState(PAGE_SIZE);\n// const donationContractId = \"donate.potlock.near\";\n// const [totalProjects, setTotalProjects] = useState(props.items);\n// const [displayProject, setDisplayProject] = useState([]);\n// const [lastNumberOfProject, setLastNumberOfProject] = useState(0);\n// console.log(\"lastNumberOfProject\", lastNumberOfProject);\n// const [searchTerm, setSearchTerm] = useState(null);\n// const [tagSelected, setTagSelected] = useState([]);\n// const [featuredProjects, setFeaturedProjects] = useState([\n//   {\n//     id: \"magicbuild.near\",\n//     status: \"Approved\",\n//     submitted_ms: 1698226284754,\n//     updated_ms: 1698226284754,\n//     review_notes: null,\n//   },\n//   {\n//     id: \"potlock.near\",\n//     status: \"Approved\",\n//     submitted_ms: 1698437495305,\n//     updated_ms: 1698437495305,\n//     review_notes: null,\n//   },\n//   {\n//     id: \"yearofchef.near\",\n//     status: \"Approved\",\n//     submitted_ms: 1703055390614,\n//     updated_ms: 1703055390614,\n//     review_notes: null,\n//   },\n// ]);\n// const [tagsList, setTagsList] = useState([\n//   {\n//     label: \"Desci\",\n//     value: \"de-sci\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Open Source\",\n//     value: \"open-source\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Non Profit\",\n//     value: \"non-profit\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Social Impact\",\n//     value: \"social-impact\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Climate\",\n//     value: \"climate\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Public Good\",\n//     value: \"public-good\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Community\",\n//     value: \"community\",\n//     selected: false,\n//   },\n//   {\n//     label: \"Education\",\n//     value: \"education\",\n//     selected: false,\n//   },\n// ]);\n// const handleTag = (key) => {\n//   // console.log(tagsList[key].value);\n//   const tags = tagsList;\n//   tags[key].selected = !tagsList[key].selected;\n//   const dataArr = props.items;\n//   let tagSelected = [];\n//   tagsList.forEach((tag) => {\n//     if (tag.selected) {\n//       tagSelected.push(tag.value);\n//     }\n//   });\n//   let projectFilterBySearch = [];\n//   dataArr.forEach((item) => {\n//     const data = Social.getr(`${item.id}/profile`);\n//     tagSelected.forEach((tag) => {\n//       if (data.category == tag) {\n//         projectFilterBySearch.push(item);\n//       }\n//     });\n//   });\n//   if (tagSelected.length == 0) {\n//     setTotalProjects(dataArr);\n//   } else {\n//     setTotalProjects(projectFilterBySearch);\n//   }\n//   // console.log(\"tagsList\", tagSelected);\n//   setTagSelected(tagSelected);\n\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n\n//   setTagsList(tags);\n// };\n// if (!totalProjects) return \"loading\";\n\n// const loadPotProjects = () => {\n//   setDisplayProject(totalProjects.map((item) => props.renderItem(item)));\n// };\n\n// const loadProjects = () => {\n//   setLastNumberOfProject(lastNumberOfProject + 9);\n//   setDisplayProject(\n//     totalProjects.slice(0, lastNumberOfProject + 9).map((item) => (\n//       <Widget\n//         src={`${ownerId}/widget/Components.ProjectCard`}\n//         props={{\n//           ...props,\n//           ...item,\n//           ownerId: ownerId,\n//           showModal: true,\n//           isExistedInCart: props.cart && !!props.cart[item.id],\n//           donnorProjectId: donnorProjectId,\n//           amount: amount,\n//           referrerId: referrerId,\n//           currency: currency,\n//           note: note,\n//           removeProjectsFromCart: (projectId) => {\n//             removeProjectsFromCart(projectId);\n//           },\n//           addProjectsToCart: (project) => {\n//             addProjectsToCart(project);\n//           },\n//           setIsCartModalOpen: (isOpen) => {\n//             setIsCartModalOpen(isOpen);\n//           },\n//           setAmount: (value) => {\n//             setAmount(value);\n//           },\n//           setProjectId: (id) => {\n//             setProjectId(id);\n//           },\n//           setNote: (note) => {\n//             setNote(note);\n//           },\n//           setReferrerId: (ref) => {\n//             setReferrerId(ref);\n//           },\n//           setCurrency: (cur) => {\n//             setCurrency(cur);\n//           },\n//           totalAmount: (donations) => totalAmount(donations),\n//         }}\n//         key={key}\n//       />\n//     ))\n//   );\n// };\n\n// const totalAmount = (donations) => {\n//   if (!donations) return 0;\n//   let totalDonationAmount = new Big(0);\n//   for (const donation of donations) {\n//     totalDonationAmount = totalDonationAmount.plus(new Big(donation.total_amount));\n//   }\n//   return props.nearToUsd\n//     ? (props.nearToUsd * totalDonationAmount.div(1e24).toNumber()).toFixed(2)\n//     : totalDonationAmount.div(1e24).toNumber().toFixed(2);\n// };\n\n// const sortHighestToLowest = (projects) => {\n//   const sort = (a, b) => {\n//     return parseFloat(b.total) - parseFloat(a.total);\n//   };\n//   const projectLength = projects.length;\n\n//   for (let i = 0; i < projectLength - 1; i++) {\n//     for (let j = 0; j < projectLength - 1 - i; j++) {\n//       if (sort(projects[j], projects[j + 1]) > 0) {\n//         const temp = projects[j];\n//         projects[j] = projects[j + 1];\n//         projects[j + 1] = temp;\n//       }\n//     }\n//   }\n\n//   setTotalProjects(projects);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n\n// const sortLowestToHighest = (projects) => {\n//   const sort = (a, b) => {\n//     return parseFloat(b.total) - parseFloat(a.total);\n//   };\n//   const projectLength = projects.length;\n\n//   for (let i = 0; i < projectLength - 1; i++) {\n//     for (let j = 0; j < projectLength - 1 - i; j++) {\n//       if (sort(projects[j], projects[j + 1]) < 0) {\n//         const temp = projects[j];\n//         projects[j] = projects[j + 1];\n//         projects[j + 1] = temp;\n//       }\n//     }\n//   }\n\n//   setTotalProjects(projects);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n\n// const sortNewToOld = (projects) => {\n//   const projectLength = projects.length;\n\n//   for (let i = 0; i < projectLength - 1; i++) {\n//     for (let j = 0; j < projectLength - i - 1; j++) {\n//       if (projects[j].submitted_ms < projects[j + 1].submitted_ms) {\n//         const temp = projects[j];\n//         projects[j] = projects[j + 1];\n//         projects[j + 1] = temp;\n//       }\n//     }\n//   }\n//   setTotalProjects(projects);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n\n// const sortOldToNew = (projects) => {\n//   const projectLength = projects.length;\n\n//   for (let i = 0; i < projectLength - 1; i++) {\n//     for (let j = 0; j < projectLength - i - 1; j++) {\n//       if (projects[j].submitted_ms > projects[j + 1].submitted_ms) {\n//         const temp = projects[j];\n//         projects[j] = projects[j + 1];\n//         projects[j + 1] = temp;\n//       }\n//     }\n//   }\n//   setTotalProjects(projects);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n\n// const searchByWordsPots = (projects, searchTerm) => {\n//   let findId = [];\n//   const dataArr = props.items;\n//   const allData = [];\n//   dataArr.forEach((item) => {\n//     const data = props.itemsAll[item.id];\n//     allData.push(data);\n//     if (data) {\n//       if (\n//         data.pot_description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         data.pot_name.toLowerCase().includes(searchTerm.toLowerCase())\n//       ) {\n//         findId.push(item.id);\n//       }\n//     }\n//   });\n//   let projectFilterBySearch = [];\n//   dataArr.forEach((project) => {\n//     findId.forEach((id) => {\n//       if (project.id == id) {\n//         projectFilterBySearch.push(project);\n//       }\n//     });\n//   });\n//   setTotalProjects(projectFilterBySearch);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n// const searchByWordsPot = (projects, searchTerm) => {\n//   let findId = [];\n//   const dataArr = props.items;\n//   let alldata = [];\n//   dataArr.forEach((item) => {\n//     const data = Social.getr(`${item.project_id}/profile`);\n//     alldata.push(data);\n//     if (data) {\n//       if (\n//         data.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         data.name.toLowerCase().includes(searchTerm.toLowerCase())\n//       ) {\n//         findId.push(item.project_id);\n//       }\n//     }\n//   });\n//   let projectFilterBySearch = [];\n//   dataArr.forEach((project) => {\n//     const data = Social.getr(`${project.project_id}/profile`);\n//     findId.forEach((id) => {\n//       if (tagSelected.length > 0) {\n//         if (data.category == tagSelected[0]) {\n//           if (project.project_id == id) {\n//             projectFilterBySearch.push(project);\n//           }\n//         }\n//       } else {\n//         if (project.project_id == id) {\n//           projectFilterBySearch.push(project);\n//         }\n//       }\n//     });\n//   });\n\n//   setTotalProjects(projectFilterBySearch);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n// const searchByWords = (projects, searchTerm) => {\n//   let findId = [];\n//   const dataArr = props.items;\n//   let alldata = [];\n//   dataArr.forEach((item) => {\n//     const data = Social.getr(`${item.id}/profile`);\n//     alldata.push(data);\n//     if (data) {\n//       if (\n//         data.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         data.name.toLowerCase().includes(searchTerm.toLowerCase())\n//       ) {\n//         findId.push(item.id);\n//       }\n//     }\n//   });\n//   let projectFilterBySearch = [];\n//   dataArr.forEach((project) => {\n//     const data = Social.getr(`${project.id}/profile`);\n//     findId.forEach((id) => {\n//       if (tagSelected.length > 0) {\n//         if (data.category == tagSelected[0]) {\n//           if (project.id == id) {\n//             projectFilterBySearch.push(project);\n//           }\n//         }\n//       } else {\n//         if (project.id == id) {\n//           projectFilterBySearch.push(project);\n//         }\n//       }\n//     });\n//   });\n\n//   setTotalProjects(projectFilterBySearch);\n//   setDisplayProject([]);\n//   setLastNumberOfProject(0);\n// };\n\n// useEffect(() => {\n//   const newTotalProjects = [];\n//   const promises = totalProjects.map((project) => {\n//     return Near.asyncView(donationContractId, \"get_donations_for_recipient\", {\n//       recipient_id: project.id,\n//     }).then((res) => {\n//       const total = totalAmount(res);\n//       newTotalProjects.push({ ...project, total });\n//     });\n//   });\n//   Promise.all(promises).then(() => {\n//     setTotalProjects(newTotalProjects);\n//   });\n// }, []);\n\n// const handleSortChange = (sortType) => {\n//   switch (sortType) {\n//     case \"Newest to Oldest\":\n//       sortNewToOld(totalProjects);\n//       break;\n//     case \"Oldest to Newest\":\n//       sortOldToNew(totalProjects);\n//       break;\n//     case \"Most to Least Donations\":\n//       sortHighestToLowest(totalProjects);\n//       break;\n//     case \"Least to Most Donations\":\n//       sortLowestToHighest(totalProjects);\n//       break;\n//   }\n// };\n\nconst searchProjects = (searchTerm) => {\n  // filter projects that match the search term (just id for now)\n  const filteredProjects = allProjects.filter((project) => {\n    const { id } = project;\n    const searchFields = [id];\n    return searchFields.some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()));\n  });\n  return filteredProjects;\n};\n\nconst sortProjects = (sortVal) => {\n  if (sortVal === SORT_FILTERS.ALL) {\n    return searchApplications(searchTerm);\n  } else if (sortVal === SORT_FILTERS.NEW_TO_OLD) {\n    const sorted = { ...allProjects };\n    sorted.sort((a, b) => b.submitted_ms - a.submitted_ms);\n    return sorted;\n  } else if (sortVal === SORT_FILTERS.OLD_TO_NEW) {\n    const sorted = { ...allProjects };\n    sorted.sort((a, b) => a.submitted_ms - b.submitted_ms);\n    return sorted;\n  } else if (sortVal === SORT_FILTERS.MOST_TO_LEAST_DONATIONS) {\n    const sorted = { ...allProjects };\n    sorted.sort((a, b) => b.total - a.total);\n    return sorted;\n  } else if (sortVal === SORT_FILTERS.LEAST_TO_MOST_DONATIONS) {\n    const sorted = { ...allProjects };\n    sorted.sort((a, b) => a.total - b.total);\n    return sorted;\n  }\n  return filtered;\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 48px;\n  padding-top: 20px;\n`;\n\nconst ProjectList = styled.div`\n  display: grid;\n  gap: 31px;\n\n  // For mobile devices (1 column)\n  @media screen and (max-width: 739px) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n\n  // For tablet devices (2 columns)\n  @media screen and (min-width: 740px) and (max-width: 1023px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  // For desktop devices (3 columns)\n  @media screen and (min-width: 1024px) {\n    grid-template-columns: repeat(${!props.maxCols || props.maxCols > 2 ? \"3\" : \"2\"}, 1fr);\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: 1.12px;\n  text-transform: uppercase;\n`;\n\nconst TagsWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 24px;\n  color: #292929;\n`;\n\nconst Tag = styled.div`\n  display: flex;\n  padding: 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n  border-radius: 4px;\n  background: #fff;\n  box-shadow: 0px -1px 0px 0px #c7c7c7 inset, 0px 0px 0px 0.5px #c7c7c7;\n  border: 1px solid #c7c7c7;\n  &:hover {\n    background: #fef6ee;\n  }\n`;\n\nconst OnBottom = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px 0;\n`;\n\n// const elements = props.items.slice(page * PAGE_SIZE, (page + 1) * PAGE_SIZE).map(props.renderItem);\n// console.log(\"elements: \", elements);\n\nreturn (\n  <>\n    {tab != \"pots\" && tab != \"pot\" && (\n      <Container>\n        <Header>\n          <Title>Featured projects</Title>\n        </Header>\n\n        <ProjectList>{featuredProjects.map(props.renderItem)}</ProjectList>\n        <OnBottom></OnBottom>\n      </Container>\n    )}\n    <Container style={{ paddingBottom: \"32px\" }}>\n      <Header>\n        <Title>\n          all {tab == \"pots\" ? \"pots\" : \"projects\"}\n          <span style={{ color: \"#DD3345\", marginLeft: \"8px\", fontWeight: 600 }}>\n            {props.items.length}\n          </span>\n        </Title>\n        {/* <Widget\n          src={`${ownerId}/widget/Project.SearchBar`}\n          props={{\n            title: \"Sort\",\n            tab: tab,\n            numItems: filteredProjects.length,\n            itemName: tab == \"pots\" ? \"pot\" : \"project\",\n            sortList: Object.values(SORT_FILTERS),\n            setSearchTerm: (value) => {\n              const results = tab == \"pots\"\n                ? searchByWordsPots(totalProjects, value)\n                : tab == \"pot\"\n                ? searchByWordsPot(totalProjects, value)\n                : searchByWords(totalProjects, value);\n              setSearchTerm(value);\n              setFilteredProjects(results);\n            },\n            handleSortChange: (filter) => {\n              const sorted = \n              handleSortChange(filter);\n            },\n          }}\n        />\n        {tab != \"pots\" && tab != \"pot\" && (\n          <TagsWrapper>\n            Tags:\n            {tagsList.map((tag, key) => (\n              <Tag\n                key={key}\n                onClick={() => handleTag(key)}\n                className={`${\n                  tag.selected && \"gap-2 bg-[#FEF6EE]\"\n                } p-2 rounded border text-sm flex items-center  cursor-pointer`}\n              >\n                {tag.selected && (\n                  <svg\n                    width=\"12\"\n                    height=\"10\"\n                    viewBox=\"0 0 12 10\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M3.86204 7.58116L1.08204 4.80117L0.135376 5.74116L3.86204 9.46783L11.862 1.46783L10.922 0.527832L3.86204 7.58116Z\"\n                      fill=\"#F4B37D\"\n                    ></path>\n                  </svg>\n                )}\n                {tag.label}\n              </Tag>\n            ))}\n          </TagsWrapper>\n        )} */}\n      </Header>\n      <ProjectList>{items.map(props.renderItem)}</ProjectList>\n      {/* <InfiniteScroll\n        // loadMore={tab == \"pots\" || tab == \"pot\" ? loadPotProjects : loadProjects}\n        loadMore={loadMore}\n        hasMore={props.items.length > elements.length}\n        // useWindow={false}\n      >\n        <ProjectList>{elements}</ProjectList>\n      </InfiniteScroll> */}\n    </Container>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.ListSection", "fact_widget_deployments_id": "36d0a992add0b7e643f839e2319b6396", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}