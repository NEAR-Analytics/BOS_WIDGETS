{"tx_hash": "B4FyUDS4Mc8NxtcoRFkw6f1jjwLWqzXkkd6ivbuWX25o", "action_id_social": "EpkSuYCuvnDDagJrtcZqv8BxT6nQp83x6g4hpvBy8bc3-0-widget", "block_id": 112824504, "block_timestamp": "2024-02-14T16:31:00.498Z", "signer_id": "potlock.near", "widget_name": "Components.Donors", "source_code": "const { ownerId, DONATION_CONTRACT_ID } = props;\nconst { calcNetDonationAmount, filterByDate } = VM.require(\n  `${ownerId}/widget/Components.DonorsUtils`\n);\n\nconst Container = styled.div`\n  --primary-color: #dd3345;\n  display: flex;\n  flex-direction: column;\n\n  .leaderboard {\n    width: 100%;\n    h1 {\n      font-size: 2.5rem;\n      font-weight: 600;\n      margin-top: 20px;\n    }\n    .cards {\n      display: flex;\n      gap: 3rem;\n      margin-top: 2rem;\n      margin-bottom: 5rem;\n      > div {\n        width: 30%;\n        display: flex;\n      }\n      .top {\n        width: 40%;\n        scale: 1.05;\n      }\n      @media only screen and (max-width: 670px) {\n        flex-direction: column;\n        justify-content: center;\n        > div {\n          width: 100%;\n          display: flex;\n        }\n        .top {\n          scale: 1;\n          width: 100%;\n        }\n      }\n    }\n  }\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 2rem;\n  font-size: 14px;\n  color: rgb(123, 123, 123);\n  margin-bottom: 2rem;\n  div {\n    transition: all 300ms;\n    cursor: pointer;\n    font-weight: 500;\n    :hover {\n      color: black;\n    }\n    &.active {\n      color: black;\n    }\n  }\n  .select {\n    width: fit-content;\n  }\n`;\n\nconst NoResult = styled.div`\n  font-size: 2rem;\n  text-align: center;\n`;\n\nconst LoadingWrapper = styled.div`\n  font-size: 1.5rem;\n  margin-top: 1rem;\n`;\n\nconst Loading = () => <LoadingWrapper>Loading...</LoadingWrapper>;\n\nconst [totalDonations, setDonations] = useState([]);\nconst [index, setIndex] = useState(0);\nconst [currentTab, setTab] = useState(\"Leaderboard\");\nconst [filter, setFilter] = useState(\"\");\nconst [allDonationsFetched, setAllDonationsFetched] = useState(false);\nconst [donationsByPage, setDonationsByPage] = useState({});\nconst [fetchDonationsError, setFetchDonationsError] = useState(\"\");\n\nconst limit = 900;\nconst cachedDonationsValidityPeriod = 1000 * 60 * 5; // 5 minutes\n\nif (!allDonationsFetched && !donationsByPage[index]) {\n  // first, try to get from cache\n  const cacheKey = `donationsByPage-${index}-${limit}`;\n  const cachedDonations = Storage.get(cacheKey);\n  if (cachedDonations && cachedDonations.ts > Date.now() - cachedDonationsValidityPeriod) {\n    console.log(\"using cached donations for page \", index);\n    setDonationsByPage({ ...donationsByPage, [index]: cachedDonations.val });\n    if (cachedDonations.val.length === limit) {\n      setIndex(index + 1);\n    } else {\n      setAllDonationsFetched(true);\n    }\n  } else if (cachedDonations !== null) {\n    // null means it's loading (async)\n    console.log(\"fetching donations for page\", index);\n    const startTime = Date.now();\n    Near.asyncView(DONATION_CONTRACT_ID, \"get_donations\", {\n      from_index: limit * index,\n      limit: limit,\n    })\n      .then((donationsPart) => {\n        const endTime = Date.now();\n        console.log(\"fetched donations for index\", index, \"in\", endTime - startTime, \"ms\");\n        // cache the result\n        Storage.set(cacheKey, { val: donationsPart, ts: Date.now() });\n        setDonationsByPage({ ...donationsByPage, [index]: donationsPart });\n        if (donationsPart.length === limit) {\n          setIndex(index + 1);\n        } else {\n          setAllDonationsFetched(true);\n        }\n      })\n      .catch((e) => {\n        setFetchDonationsError(e);\n      });\n  }\n}\n\nconst [allDonations, totalsByDonor, sortedDonations] = useMemo(() => {\n  if (!allDonationsFetched) return [[], {}, []];\n  const donations = Object.values(donationsByPage).flat();\n  const totalsByDonor = donations.reduce((accumulator, currentDonation) => {\n    accumulator[currentDonation.donor_id] = {\n      amount:\n        (accumulator[currentDonation.donor_id].amount || 0) +\n        calcNetDonationAmount(currentDonation),\n      ...currentDonation,\n    };\n    return accumulator;\n  }, {});\n  const sortedDonations = Object.values(totalsByDonor).sort((a, b) => b.amount - a.amount);\n  return [donations, totalsByDonor, sortedDonations];\n}, [donationsByPage, allDonationsFetched]);\n\nconst leaderboard = [\n  {\n    rank: \"#2\",\n    id: sortedDonations[1].donor_id,\n    amount: sortedDonations[1].amount,\n  },\n  {\n    rank: (\n      <img\n        src=\"https://ipfs.near.social/ipfs/bafkreigpq56kv3p4kjtneiclx6sne3qrxtg5jho34yq2j6nnxli3p7aboe\"\n        alt=\"top\"\n      />\n    ),\n    id: sortedDonations[0].donor_id,\n    className: \"top\",\n    amount: sortedDonations[0].amount,\n  },\n  {\n    rank: \"#3\",\n    id: sortedDonations[2].donor_id,\n    amount: sortedDonations[2].amount,\n  },\n];\n\nconst tabs = [\"Leaderboard\", \"Transactions\"];\n\nreturn (\n  <Container>\n    {fetchDonationsError ? (\n      <div>\n        <h1>Error fetching donations</h1>\n        <p>{fetchDonationsError}</p>\n      </div>\n    ) : !allDonationsFetched ? (\n      <Loading />\n    ) : (\n      <>\n        <div className=\"leaderboard\">\n          <h1>Donors Leaderboard</h1>\n          <div className=\"cards\">\n            {leaderboard.map((donor) => (\n              <Widget\n                key={donor.id}\n                src={`${ownerId}/widget/Components.DonorsCard`}\n                props={{ ...props, donor }}\n              />\n            ))}\n          </div>\n        </div>\n        <Tabs>\n          {tabs.map((tab) => (\n            <div key={tab} className={currentTab === tab && \"active\"} onClick={() => setTab(tab)}>\n              {tab}\n            </div>\n          ))}\n          <Widget\n            src={`${ownerId}/widget/Inputs.Select`}\n            props={{\n              noLabel: true,\n              placeholder: \"Filter\",\n              containerStyles: { width: \"fit-content\", marginLeft: \"auto\", color: \"black\" },\n              options: [\n                { text: \"Today\", value: \"day\" },\n                { text: \"Last Week\", value: \"week\" },\n                { text: \"Last Month\", value: \"month\" },\n                { text: \"All Time\", value: \"all\" },\n              ],\n              value: filter,\n              onChange: (filter) => {\n                setFilter(filter);\n              },\n            }}\n          />\n        </Tabs>\n\n        {currentTab === \"Transactions\" &&\n          (allDonations.length ? (\n            <Widget\n              src={`${ownerId}/widget/Components.DonorsTrx`}\n              props={{ ...props, donations: allDonations }}\n            />\n          ) : (\n            <NoResult>No Donations</NoResult>\n          ))}\n        {currentTab === \"Leaderboard\" &&\n          (sortedDonations.length ? (\n            <Widget\n              src={`${ownerId}/widget/Components.DonorsLeaderboard`}\n              props={{ ...props, donations: sortedDonations }}\n            />\n          ) : (\n            <NoResult>No Donations</NoResult>\n          ))}\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Components.Donors", "fact_widget_deployments_id": "facaa43c8bf0fe73c1b364276b0a61bf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 8}