{"tx_hash": "7NNystangKL8dvkCS9qqPrBbKtP92w8rK34PP723fLXs", "action_id_social": "5134ixs8i6j1oHdGjqHVVxH7mFFCpGvuV6nuTJh8Zarg-0-widget", "block_id": 117397115, "block_timestamp": "2024-04-22T18:03:26.096Z", "signer_id": "potlock.near", "widget_name": "Components.Donors", "source_code": "const { ownerId } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n};\nconst { calcNetDonationAmount, filterByDate } = VM.require(\n  `${ownerId}/widget/Components.DonorsUtils`\n);\n\nlet PotFactorySDK =\n  VM.require(\"potlock.near/widget/SDK.potfactory\") ||\n  (() => ({\n    getPots: () => {},\n  }));\nPotFactorySDK = PotFactorySDK({ env: props.env });\nconst pots = PotFactorySDK.getPots();\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  asyncGetMatchingPoolDonations: () => {},\n};\n\nlet DonateSDK =\n  VM.require(\"potlock.near/widget/SDK.donate\") ||\n  (() => ({\n    asyncGetDonations: () => {},\n  }));\nDonateSDK = DonateSDK({ env: props.env });\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .leaderboard {\n    width: 100%;\n    h1 {\n      font-size: 2.5rem;\n      font-weight: 600;\n      margin-top: 20px;\n    }\n    .cards {\n      display: flex;\n      gap: 3rem;\n      margin-top: 2rem;\n      margin-bottom: 5rem;\n      > div {\n        width: 30%;\n        display: flex;\n      }\n      .top {\n        width: 40%;\n        scale: 1.05;\n      }\n      @media only screen and (max-width: 670px) {\n        flex-direction: column;\n        justify-content: center;\n        > div {\n          width: 100%;\n          display: flex;\n        }\n        .top {\n          order: -1;\n          scale: 1;\n          width: 100%;\n        }\n      }\n    }\n  }\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 2rem;\n  font-size: 14px;\n  margin-bottom: 24px;\n  .menu-item {\n    font-weight: 600;\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    gap: 20px;\n  }\n  .selected {\n    gap: 10px;\n    .label {\n      text-transform: uppercase;\n      color: #7b7b7b;\n    }\n    .count {\n      color: #dd3345;\n    }\n  }\n  .select {\n    width: fit-content;\n  }\n`;\n\nconst LoadingWrapper = styled.div`\n  font-size: 1.5rem;\n  margin-top: 1rem;\n`;\n\nconst Filter = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  .option {\n    padding: 0.8em 1em;\n    border-radius: 8px;\n    color: #292929;\n    box-shadow: 0px -1px 0px 0px #dbdbdb inset, 0px 0px 0px 0.5px #dbdbdb;\n    transition: all 300ms ease-in-out;\n    cursor: pointer;\n    &.active,\n    :hover {\n      background: #292929;\n      color: white;\n    }\n  }\n  @media only screen and (max-width: 480px) {\n    font-size: 10px;\n  }\n`;\n\nconst Loading = () => <LoadingWrapper>Loading...</LoadingWrapper>;\n\nconst [index, setIndex] = useState(0);\nconst [currentTab, setTab] = useState(\"leaderboard\");\nconst [title, setTitle] = useState(\"\");\nconst [filter, setFilter] = useState(\"\");\nconst [allDonationsFetched, setAllDonationsFetched] = useState(false);\nconst [donationsByPage, setDonationsByPage] = useState({});\nconst [sponsorsByPage, setSponsorsByPage] = useState({});\nconst [fetchDonationsError, setFetchDonationsError] = useState(\"\");\n\nconst limit = 900;\nconst cachedDonationsValidityPeriod = 1000 * 60 * 5; // 5 minutes\n\nconst getSponsorshipDonations = (potId) => {\n  return PotSDK.asyncGetMatchingPoolDonations(potId).then((donations) => {\n    if (sponsorsByPage[potId]) return \"\";\n    setSponsorsByPage((prevSponsorsByPage) => {\n      Storage.set(\"sponsorsByPage\", {\n        val: { ...prevSponsorsByPage, [potId]: donations },\n        ts: Date.now(),\n      });\n      return { ...prevSponsorsByPage, [potId]: donations };\n    });\n  });\n};\n\n// Get Sponsorship Donations\n\nif (pots && !sponsorsByPage[pots[pots.length - 1].id]) {\n  const cachedSponsors = Storage.get(\"sponsorsByPage\");\n  if (cachedSponsors && cachedSponsors.ts > Date.now() - cachedDonationsValidityPeriod) {\n    console.log(\"using cached sponsors\");\n    setSponsorsByPage(cachedSponsors.val);\n  } else if (cachedSponsors !== null) {\n    pots.forEach((pot) => {\n      getSponsorshipDonations(pot.id, potDetail);\n    });\n  }\n}\n\nconst sponsors = useMemo(() => {\n  if (!sponsorsByPage[pots[pots.length - 1].id]) return [];\n  let sponsors = Object.values(sponsorsByPage).flat();\n  sponsors = sponsors.filter((donation) => filterByDate(filter, donation));\n  sponsors = sponsors.reduce((accumulator, currentDonation) => {\n    accumulator[currentDonation.donor_id] = {\n      amount:\n        (accumulator[currentDonation.donor_id].amount || 0) +\n        calcNetDonationAmount(currentDonation),\n      ...currentDonation,\n    };\n    return accumulator;\n  }, {});\n  sponsors = Object.values(sponsors).sort((a, b) => b.amount - a.amount);\n  return sponsors;\n}, [sponsorsByPage, filter]);\n\nif (!allDonationsFetched && !donationsByPage[index]) {\n  // first, try to get from cache\n  const cacheKey = `donationsByPage-${index}-${limit}`;\n  const cachedDonations = Storage.get(cacheKey);\n  if (cachedDonations && cachedDonations.ts > Date.now() - cachedDonationsValidityPeriod) {\n    console.log(\"using cached donations for page \", index);\n    setDonationsByPage({ ...donationsByPage, [index]: cachedDonations.val });\n    if (cachedDonations.val.length === limit) {\n      setIndex(index + 1);\n    } else {\n      setAllDonationsFetched(true);\n    }\n  } else if (cachedDonations !== null) {\n    // null means it's loading (async)\n    console.log(\"fetching donations for page\", index);\n    const startTime = Date.now();\n    DonateSDK.asyncGetDonations(limit * index, limit)\n      .then((donationsPart) => {\n        const endTime = Date.now();\n        console.log(\"fetched donations for index\", index, \"in\", endTime - startTime, \"ms\");\n        // cache the result\n        Storage.set(cacheKey, { val: donationsPart, ts: Date.now() });\n        setDonationsByPage({ ...donationsByPage, [index]: donationsPart });\n        if (donationsPart.length === limit) {\n          setIndex(index + 1);\n        } else {\n          setAllDonationsFetched(true);\n        }\n      })\n      .catch((e) => {\n        setFetchDonationsError(e);\n      });\n  }\n}\n\nconst [allDonations, totalsByDonor, sortedDonations] = useMemo(() => {\n  if (!allDonationsFetched) return [[], {}, []];\n  let donations = Object.values(donationsByPage).flat();\n  donations = donations.filter((donation) => filterByDate(filter, donation));\n  const totalsByDonor = donations.reduce((accumulator, currentDonation) => {\n    accumulator[currentDonation.donor_id] = {\n      amount:\n        (accumulator[currentDonation.donor_id].amount || 0) +\n        (currentDonation.ft_id === \"near\" ? calcNetDonationAmount(currentDonation) : 0),\n      ...currentDonation,\n    };\n    return accumulator;\n  }, {});\n  const sortedDonations = Object.values(totalsByDonor).sort((a, b) => b.amount - a.amount);\n  return [donations, totalsByDonor, sortedDonations];\n}, [donationsByPage, allDonationsFetched, filter]);\n\nconst leaderboard = [\n  {\n    rank: \"#2\",\n    id: sortedDonations[1].donor_id,\n    amount: sortedDonations[1].amount,\n  },\n  {\n    rank: (\n      <img\n        src=\"https://ipfs.near.social/ipfs/bafkreicjk6oy6465ps32owoomppfkvimbjlnhbaldvf6ujuyhkjas6ghjq\"\n        alt=\"top\"\n      />\n    ),\n    id: sortedDonations[0].donor_id,\n    className: \"top\",\n    amount: sortedDonations[0].amount,\n  },\n  {\n    rank: \"#3\",\n    id: sortedDonations[2].donor_id,\n    amount: sortedDonations[2].amount,\n  },\n];\n\nconst filterOptions = [\n  { text: \"All Time\", value: \"all\" },\n  { text: \"1Y\", value: \"year\" },\n  { text: \"1M\", value: \"month\" },\n  { text: \"1W\", value: \"week\" },\n  { text: \"24H\", value: \"day\" },\n];\n\nconst MenuItem = ({ count, children, className }) => (\n  <div className={`menu-item ${className || \"\"}`}>\n    <div className=\"label\">{children}</div>\n    <div className=\"count\">{count}</div>\n  </div>\n);\n\nconst tabs = [\n  {\n    label: \"Donor Leaderboard\",\n    val: \"leaderboard\",\n    count: sortedDonations.length,\n  },\n  {\n    label: \"Sponsors Leaderboard\",\n    val: \"sponsors\",\n    count: sponsors.length,\n  },\n  {\n    label: \"Donor Feed\",\n    val: \"feed\",\n    count: allDonations.length,\n  },\n];\n\nconst options = [\n  { tab: \"feed\", src: \"Components.DonorsTrx\" },\n  { tab: \"leaderboard\", src: \"Components.DonorsLeaderboard\" },\n  { tab: \"sponsors\", src: \"Components.DonorsLeaderboard\" },\n];\n\nconst sortList = tabs.map((tab) => ({\n  label: (\n    <MenuItem key={tab.val} count={tab.count}>\n      {tab.label}\n    </MenuItem>\n  ),\n  val: tab,\n}));\n\nreturn (\n  <Container>\n    {fetchDonationsError ? (\n      <div>\n        <h1>Error fetching donations</h1>\n        <p>{fetchDonationsError}</p>\n      </div>\n    ) : !allDonationsFetched ? (\n      <Loading />\n    ) : (\n      <>\n        <div className=\"leaderboard\">\n          <h1>Donors Leaderboard</h1>\n          <Widget\n            src={`${ownerId}/widget/Components.DonorsCards`}\n            props={{ ...props, sponsors, sortedDonations, currentTab }}\n          />\n        </div>\n        <Tabs>\n          <Widget\n            src={`${ownerId}/widget/Inputs.Dropdown`}\n            props={{\n              sortVal: title,\n              title: (\n                <MenuItem className=\"selected\" count={tabs[0].count}>\n                  {tabs[0].val}{\" \"}\n                </MenuItem>\n              ),\n              sortList: sortList,\n              FilterMenuCustomStyle: `left:0; right:auto;`,\n              handleSortChange: ({ val: option }) => {\n                setTitle(\n                  <MenuItem className=\"selected\" count={option.count}>\n                    {option.val}\n                  </MenuItem>\n                );\n                setTab(option.val);\n              },\n            }}\n          />\n          <Filter>\n            {filterOptions.map((option) => (\n              <div\n                className={`option ${filter === option.value ? \"active\" : \"\"}`}\n                key={option.value}\n                onClick={() => setFilter(option.value)}\n              >\n                {option.text}\n              </div>\n            ))}\n          </Filter>\n        </Tabs>\n        <Widget\n          src={`${ownerId}/widget/${options.find((option) => option.tab == currentTab).src}`}\n          props={{\n            ...props,\n            allDonations: allDonations,\n            filter,\n            sponsors,\n            sortedDonations,\n            currentTab,\n          }}\n        />\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Components.Donors", "fact_widget_deployments_id": "93279ee2ba67c04f3a9f378af25a0466", "inserted_timestamp": "2024-04-22T19:43:31.756Z", "modified_timestamp": "2024-04-22T20:38:38.542Z", "__row_index": 1}