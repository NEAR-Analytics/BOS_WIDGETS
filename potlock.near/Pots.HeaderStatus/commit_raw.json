{"tx_hash": "8TZUL4eBuu4kY7pczLRCQeGtczf3dhV9TZCgKkBDTUg7", "action_id_social": "7oykrFy8nRg9fh4PMA5f8mPmB3QDSJG9KzNecmesfBAB-0-widget", "block_id": 116005234, "block_timestamp": "2024-04-02T20:52:45.293Z", "signer_id": "potlock.near", "widget_name": "Pots.HeaderStatus", "source_code": "const { potDetail } = props;\n\nconst { ownerId } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n};\n\nconst [mobileMenuActive, setMobileMenuActive] = useState(false);\n\nconst {\n  application_start_ms,\n  application_end_ms,\n  public_round_start_ms,\n  public_round_end_ms,\n  cooldown_end_ms,\n  all_paid_out,\n} = potDetail;\n\nconst now = Date.now();\n\nconst stats = [\n  {\n    label: \"Applications round\",\n    daysLeft: application_end_ms,\n    started: now >= application_start_ms,\n    completed: now > application_end_ms,\n    progress:\n      now > application_end_ms\n        ? 1\n        : (now - application_start_ms) / (application_end_ms - application_start_ms),\n  },\n  {\n    label: \"Matching round\",\n    daysLeft: public_round_end_ms,\n    started: now >= public_round_start_ms,\n    completed: now > public_round_end_ms,\n    progress:\n      now > public_round_end_ms\n        ? 1\n        : (now - public_round_start_ms) / (public_round_end_ms - public_round_start_ms),\n  },\n  {\n    label: \"Challenge period\",\n    daysLeft: cooldown_end_ms,\n    started: now >= public_round_end_ms,\n    completed: now > cooldown_end_ms && !!cooldown_end_ms,\n    progress:\n      now > cooldown_end_ms && !!cooldown_end_ms\n        ? 1\n        : (cooldown_end_ms - now) / (public_round_end_ms - cooldown_end_ms),\n  },\n  {\n    label: \"Payouts completed\",\n    daysLeft: null,\n    started: null,\n    completed: all_paid_out,\n    progress: all_paid_out ? 1 : 0,\n  },\n];\n\nconst ProgressBar = ({ progress, completed, started }) => (\n  <ProgressBarWrapper>\n    <svg viewBox=\"0 0 160 160\" className=\"circle\">\n      <circle\n        r=\"70\"\n        cx=\"80\"\n        cy=\"80\"\n        fill=\"transparent\"\n        stroke={completed ? \"#629D13\" : started ? \"#000000\" : \"#C7C7C7\"}\n        strokeWidth=\"12px\"\n      ></circle>\n      <circle\n        r=\"70\"\n        cx=\"80\"\n        cy=\"80\"\n        fill=\"transparent\"\n        stroke=\"#C7C7C7\"\n        strokeWidth=\"12px\"\n        strokeDasharray=\"439.6px\"\n        strokeDashoffset={439.6 * progress + \"px\"}\n      ></circle>\n    </svg>\n    <svg className=\"check\" viewBox=\"0 0 12 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M3.72667 7.05333L0.946667 4.27333L0 5.21333L3.72667 8.94L11.7267 0.94L10.7867 0L3.72667 7.05333Z\"\n        style={{\n          fill: completed ? \"#629D13\" : started ? \"#7B7B7B\" : \"#C7C7C7\",\n        }}\n      />\n    </svg>\n  </ProgressBarWrapper>\n);\n\nconst getIndexOfActive = () => {\n  let index;\n  stats.forEach((state, idx) => {\n    if (state.started && !state.completed) {\n      index = idx;\n    }\n  });\n  if (index === null) return 3;\n  return index;\n};\n\nconst containerHeight = 181;\nconst showActiveState = getIndexOfActive() * (containerHeight / 4);\n\nconst Wrapper = styled.div`\n  border-top: 1px solid rgb(199 199 199 / 50%);\n  border-bottom: 1px solid rgb(199 199 199 / 50%);\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin-top: -1px;\n  pointer-events: none;\n  .spread-indicator {\n    height: auto;\n    width: 12px;\n    transition: all 300ms ease-in-out;\n    display: none;\n  }\n  @media only screen and (max-width: 1100px) {\n    pointer-events: all;\n    cursor: pointer;\n    .spread-indicator {\n      display: block;\n    }\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  transition: all 300ms ease-in-out;\n  .mobile-selected {\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n    margin: 1rem 0;\n    transition: all 300ms ease-in-out;\n  }\n  @media only screen and (max-width: 1100px) {\n    justify-content: left;\n    height: ${containerHeight / 4}px;\n    overflow: hidden;\n    .mobile-selected {\n      margin: 10px 0;\n      transform: translateY(${-showActiveState}px);\n      flex-direction: column;\n    }\n  }\n`;\n\nconst State = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  gap: 1rem;\n  font-size: 14px;\n  white-space: nowrap;\n  color: ${(props) => (props.active ? \"#000\" : \"#7b7b7b\")};\n  span {\n    font-weight: 600;\n    color: #dd3345;\n  }\n`;\n\nconst Loader = styled.div`\n  position: relative;\n  background: #dbdbdb;\n  border-radius: 1px;\n  height: 4px;\n  width: 130px;\n  @media only screen and (max-width: 1400px) {\n    width: 90px;\n  }\n  @media only screen and (max-width: 1100px) {\n    height: 40px;\n    width: 4px;\n    position: absolute;\n    left: 10px;\n    z-index: 0;\n    top: 50%;\n  }\n`;\n\nconst ProgressBarWrapper = styled.div`\n  position: relative;\n  display: flex;\n  .circle {\n    width: 24px;\n    height: 24px;\n    transform: rotate(-90deg);\n  }\n  .check {\n    width: 12px;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n  }\n  @media only screen and (max-width: 1100px) {\n    z-index: 1;\n    background: white;\n    padding: 2px 0;\n  }\n`;\n\nreturn (\n  <Wrapper onClick={() => setMobileMenuActive(!mobileMenuActive)}>\n    <Container\n      style={\n        mobileMenuActive\n          ? {\n              height: containerHeight + \"px\",\n            }\n          : {}\n      }\n    >\n      <div\n        className=\"mobile-selected\"\n        style={\n          mobileMenuActive\n            ? {\n                transform: \"translateY(0px)\",\n              }\n            : {}\n        }\n      >\n        {stats.map(({ label, daysLeft, progress, started, completed }, idx) => {\n          return (\n            <State active={completed || started} key={timeLeft}>\n              <ProgressBar progress={progress} started={started} completed={completed} />\n              <div>\n                {label}\n                {started && !completed && (\n                  <span>\n                    ends in\n                    <Widget\n                      src={`${ownerId}/widget/Pots.TimeLeft`}\n                      props={{\n                        daysLeft,\n                      }}\n                    />\n                  </span>\n                )}\n                {idx === 0 && !started && \" hasn\u2019t started\"}\n              </div>\n\n              <Loader\n                style={{\n                  background: completed ? \"#629D13\" : \"#dbdbdb\",\n                  display: idx === 3 ? \"none\" : \"flex\",\n                }}\n              />\n            </State>\n          );\n        })}\n      </div>\n    </Container>\n    <svg\n      className=\"spread-indicator\"\n      style={{\n        rotate: mobileMenuActive ? \"180deg\" : \"0deg\",\n      }}\n      viewBox=\"0 0 12 8\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10.59 0.294922L6 4.87492L1.41 0.294922L0 1.70492L6 7.70492L12 1.70492L10.59 0.294922Z\"\n        fill=\"#7B7B7B\"\n      />\n    </svg>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.HeaderStatus", "fact_widget_deployments_id": "2b0baa22b460931a8f0c9d9c78389334", "inserted_timestamp": "2024-04-02T22:32:28.277Z", "modified_timestamp": "2024-04-02T22:32:28.277Z", "__row_index": 1}