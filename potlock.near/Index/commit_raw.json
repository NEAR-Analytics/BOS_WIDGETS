{"tx_hash": "9hV3dw7UWWywc9sYn1qWMJmoSaEEVm8W8Q7cSM5hjibS", "action_id_social": "ERZDEAuoseX7gYaDbUtf4cLhdd9ztMCeVZ5iMNDz4L7r-0-widget", "block_id": 115053974, "block_timestamp": "2024-03-19T23:51:49.441Z", "signer_id": "potlock.near", "widget_name": "Index", "source_code": "const ownerId = \"potlock.near\";\nconst donationContractId = \"donate.potlock.near\";\n// const potFactoryContractId =\n//   props.env === \"staging\" ? \"potfactory.staging.potlock.near\" : \"v1.potfactory.potlock.near\";\nconst nadabotContractId = props.env === \"staging\" ? \"v1.staging.nadabot.near\" : \"v1.nadabot.near\";\n\nconst CREATE_PROJECT_TAB = \"createproject\";\nconst EDIT_PROJECT_TAB = \"editproject\";\nconst PROJECTS_LIST_TAB = \"projects\";\nconst PROJECT_DETAIL_TAB = \"project\";\nconst CART_TAB = \"cart\";\nconst FEED_TAB = \"feed\";\nconst POTS_TAB = \"pots\";\nconst DEPLOY_POT_TAB = \"deploypot\";\nconst POT_DETAIL_TAB = \"pot\";\nconst DONORS_TAB = \"donors\";\nconst PROFILE_TAB = \"profile\";\nconst EDIT_PROFILE_TAB = \"editprofile\";\n\nconst loraCss = fetch(\n  \"https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&display=swap\"\n).body;\n\nconst Theme = styled.div`\n  position: relative;\n  * {\n    font-family: \"Mona-Sans\";\n    font-feature-settings: \"ss01\" on, \"salt\" on;\n    font-style: normal;\n    font-weight: 400;\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 400;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-Regular.woff) format(\"woff\");\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 500;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-Medium.woff) format(\"woff\");\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 600;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-SemiBold.woff) format(\"woff\");\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 700;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-Bold.woff) format(\"woff\");\n  }\n  ${loraCss}\n`;\n\nState.init({\n  cart: null,\n  checkoutSuccess: false,\n  checkoutSuccessTxHash: null,\n  // previousCart: null,\n  isCartModalOpen: false,\n  isNavMenuOpen: false,\n  donnorProjectId: null,\n  amount: null,\n  note: null,\n  referrerId: null,\n  currency: null,\n  // isSybilModalOpen: false,\n  donateToProjectModal: {\n    isOpen: false,\n    recipientId: null,\n    referrerId: null,\n    potId: null,\n    potDetail: null,\n  },\n  successModal: {\n    isOpen:\n      (!props.tab ||\n        props.tab === PROJECTS_LIST_TAB ||\n        props.tab === PROJECT_DETAIL_TAB ||\n        props.tab === POT_DETAIL_TAB) &&\n      props.transactionHashes,\n    successfulDonation: null,\n  },\n});\n\n// console.log(\"state in Index: \", state);\n\nconst tabContentWidget = {\n  [CREATE_PROJECT_TAB]: \"Project.Create\",\n  [EDIT_PROJECT_TAB]: \"Project.Create\",\n  [PROJECTS_LIST_TAB]: \"Project.ListPage\",\n  [PROJECT_DETAIL_TAB]: \"Project.Detail\",\n  [CART_TAB]: \"Cart.Checkout\",\n  [FEED_TAB]: \"Components.Feed\",\n  [POTS_TAB]: \"Pots.Home\",\n  [DEPLOY_POT_TAB]: \"Pots.Deploy\",\n  [POT_DETAIL_TAB]: \"Pots.Detail\",\n  [DONORS_TAB]: \"Components.Donors\",\n  [PROFILE_TAB]: \"Profile.Detail\",\n  [EDIT_PROFILE_TAB]: \"Profile.Edit\",\n};\n\nconst getTabWidget = (tab) => {\n  const defaultTabWidget = tabContentWidget[PROJECTS_LIST_TAB];\n  if (tab in tabContentWidget) {\n    return tabContentWidget[props.tab];\n  }\n  return defaultTabWidget;\n};\n\nconst CART_KEY = \"cart\";\n\n// const PREVIOUS_CART_KEY = \"previousCart\";\nconst storageCart = Storage.get(CART_KEY);\nconst StorageCurrency = Storage.get(\"currency\");\nconst StorageNote = Storage.get(\"note\");\nconst StorageAmount = Storage.get(\"amount\");\nconst StorageProjectId = Storage.get(\"projectId\");\nconst StorageReferrerId = Storage.get(\"referrerId\");\n// const storagePreviousCart = Storage.get(PREVIOUS_CART_KEY);\nconst DEFAULT_CART = {};\n\nconst props = {\n  ...props,\n  ...state,\n  ownerId: \"potlock.near\",\n  NADABOT_CONTRACT_ID: nadabotContractId,\n  referrerId: props.referrerId,\n  setCurrency: (cur) => {\n    const currency = state.currency ?? cur;\n    State.update({ currency: currency });\n    Storage.set(\"currency\", currency);\n  },\n  setNote: (n) => {\n    const note = state.note ?? n;\n    State.update({ note: note });\n    Storage.set(\"note\", note);\n  },\n  setAmount: (value) => {\n    const amount = state.amount ?? value;\n    State.update({ amount: amount });\n    Storage.set(\"amount\", amount);\n  },\n  setProjectId: (id) => {\n    const donnorProjectId = state.donnorProjectId ?? id;\n    State.update({ donnorProjectId: donnorProjectId });\n    Storage.set(\"projectId\", donnorProjectId);\n  },\n  setReferrerId: (ref) => {\n    const referrerId = state.referrerId ?? ref;\n    State.update({ referrerId: referrerId });\n    Storage.set(\"referrerId\", referrerId);\n  },\n  addProjectsToCart: (projects) => {\n    const cart = state.cart ?? {};\n    projects.forEach((item) => {\n      cart[item.id] = item; // default to NEAR\n    });\n    State.update({ cart });\n    Storage.set(CART_KEY, JSON.stringify(cart));\n  },\n  removeProjectsFromCart: (projectIds) => {\n    const cart = state.cart ?? {};\n    projectIds.forEach((projectId) => {\n      delete cart[projectId];\n    });\n    State.update({ cart });\n    Storage.set(CART_KEY, JSON.stringify(cart));\n  },\n  updateCartItem: ({ projectId, amount, token, price, referrerId, potId, potDetail, note }) => {\n    const cart = state.cart ?? {};\n    const updated = {};\n    // if (amount === \"\") updated.amount = \"0\";\n    if (amount || amount === \"\") updated.amount = amount;\n    if (token) updated.token = token;\n    if (price) updated.price = price;\n    if (referrerId) updated.referrerId = referrerId;\n    if (potId) updated.potId = potId;\n    if (potDetail) updated.potDetail = potDetail;\n    if (note) updated.note = note;\n    cart[projectId] = updated;\n    State.update({ cart });\n    Storage.set(CART_KEY, JSON.stringify(cart));\n  },\n  clearCart: () => {\n    State.update({ cart: {} });\n    Storage.set(CART_KEY, JSON.stringify(DEFAULT_CART));\n  },\n  setCheckoutSuccess: (checkoutSuccess) => {\n    State.update({ checkoutSuccess });\n  },\n  setIsCartModalOpen: (isOpen) => {\n    State.update({ isCartModalOpen: isOpen });\n  },\n  setIsNavMenuOpen: (isOpen) => {\n    State.update({ isNavMenuOpen: isOpen });\n  },\n  hrefWithParams: (href) => {\n    // pass env & referrerId to all links\n    if (props.env) {\n      href = `${href}${href.includes(\"?\") ? \"&\" : \"?\"}env=${props.env}`;\n    }\n    if (props.referrerId) {\n      href = `${href}${href.includes(\"?\") ? \"&\" : \"?\"}referrerId=${props.referrerId}`;\n    }\n    return href;\n  },\n  openDonateToProjectModal: (recipientId, referrerId, potId, potDetail) => {\n    State.update({\n      donateToProjectModal: { isOpen: true, recipientId, referrerId, potId, potDetail },\n    });\n  },\n};\n\nif (props.transactionHashes && props.tab === CART_TAB) {\n  // if transaction hashes are in URL but haven't been added to props, override state:\n  props.checkoutSuccessTxHash = props.transactionHashes;\n  props.checkoutSuccess = true;\n}\n\nif (props.transactionHashes && props.tab === DEPLOY_POT_TAB) {\n  // if transaction hashes are in URL but haven't been added to props, override state:\n  props.deploymentSuccessTxHash = props.transactionHashes;\n  props.deploymentSuccess = true;\n}\n\nif (state.cart === null && storageCart !== null) {\n  // cart hasn't been set on state yet, and storageCart has been fetched\n  // if storageCart isn't undefined, set it on state\n  // otherwise, set default cart on state\n  let cart = DEFAULT_CART;\n  if (storageCart) {\n    cart = JSON.parse(storageCart);\n  }\n  State.update({ cart });\n}\n\nif (\n  state.currency === null &&\n  state.donnorProjectId === null &&\n  state.amount === null &&\n  StorageCurrency !== null &&\n  StorageAmount !== null &&\n  StorageProjectId !== null\n) {\n  State.update({ currency: StorageCurrency });\n  State.update({ amount: StorageAmount });\n  State.update({ donnorProjectId: StorageProjectId });\n  State.update({ note: StorageNote });\n  State.update({ referrerId: StorageReferrerId });\n}\n\n// if (state.previousCart === null && storagePreviousCart !== null) {\n//   // previousCart hasn't been set on state yet, and storagePreviousCart has been fetched\n//   // if storagePreviousCart isn't undefined, set it on state\n//   if (storagePreviousCart && Object.keys(JSON.parse(storagePreviousCart)).length > 0) {\n//     console.log(\"updating previous cart\");\n//     State.update({ previousCart: JSON.parse(storagePreviousCart) });\n//   }\n// }\n\n// console.log(\"state in Index: \", state);\n\nif (props.checkoutSuccessTxHash && state.cart && Object.keys(state.cart).length > 0) {\n  // if checkout was successful after wallet redirect, clear cart\n  // store previous cart in local storage to show success message\n  // console.log(\"previous cart: \", state.cart);\n  props.clearCart();\n}\n\nif (props.tab === EDIT_PROJECT_TAB) {\n  props.edit = true;\n}\n\nconst tabContent = <Widget src={`${ownerId}/widget/${getTabWidget(props.tab)}`} props={props} />;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #ffffff;\n  // padding: 3em;\n  border-radius: 0rem 0rem 1.5rem 1.5rem;\n  border-top: 1px solid var(--ui-elements-light, #eceef0);\n  background: var(--base-white, #fff);\n\n  &.form {\n    border: none;\n    background: #fafafa;\n  }\n`;\n\nconst isForm = [CREATE_PROJECT_TAB].includes(props.tab);\n\nif (!state.cart) {\n  return \"\";\n}\n\nreturn (\n  <Theme>\n    <Widget src={`${ownerId}/widget/Components.Nav`} props={props} />\n    <Content className={isForm ? \"form\" : \"\"}>{tabContent}</Content>\n    <Widget src={`${ownerId}/widget/Components.Attribution`} />\n    {props.tab !== POT_DETAIL_TAB && props.tab !== POTS_TAB && (\n      <Widget src={`${ownerId}/widget/Components.Banner`} props={props} />\n    )}\n\n    {state.donateToProjectModal.isOpen && (\n      <Widget\n        src={`${ownerId}/widget/Project.ModalDonation`}\n        props={{\n          ...props,\n          isModalOpen: state.donateToProjectModal.isOpen,\n          onClose: () =>\n            State.update({\n              donateToProjectModal: {\n                isOpen: false,\n                recipientId: null,\n                referrerId: null,\n                potId: null,\n                potDetail: null,\n              },\n            }),\n          recipientId: state.donateToProjectModal.recipientId,\n          referrerId: state.donateToProjectModal.referrerId,\n          potId: state.donateToProjectModal.potId,\n        }}\n      />\n    )}\n    <Widget\n      src={`${ownerId}/widget/Project.ModalSuccess`}\n      props={{\n        ...props,\n        successfulDonation: state.successModal.successfulDonation,\n        isModalOpen: state.successModal.isOpen,\n        onClose: () =>\n          State.update({\n            successModal: {\n              isOpen: false,\n              successfulDonation: null,\n            },\n          }),\n      }}\n    />\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Index", "fact_widget_deployments_id": "a1cf016ec2861b032007ab116b27bbc4", "inserted_timestamp": "2024-03-20T01:53:27.033Z", "modified_timestamp": "2024-03-20T01:53:27.033Z", "__row_index": 211}