{"tx_hash": "3PnA82tdYqNBgjqknHYRurYmNfa5EUWFj5DNbw3yEB63", "action_id_social": "BtvgBxPfCoFjLR4XF77GURtHbNZkA9VnqWDcAixioE5U-0-widget", "block_id": 104853815, "block_timestamp": "2023-11-03T16:59:10.784Z", "signer_id": "potlock.near", "widget_name": "Index", "source_code": "const ownerId = \"potlock.near\";\n\nconst CREATE_PROJECT_TAB = \"createproject\";\nconst EDIT_PROJECT_TAB = \"editproject\";\nconst PROJECTS_LIST_TAB = \"projects\";\nconst PROJECT_DETAIL_TAB = \"project\";\nconst CART_TAB = \"cart\";\n\nconst Theme = styled.div`\n  * {\n    font-family: \"Mona-Sans\";\n    font-style: normal;\n    font-weight: 400;\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 400;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-Regular.woff) format(\"woff\");\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 500;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-Medium.woff) format(\"woff\");\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 600;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-SemiBold.woff) format(\"woff\");\n  }\n  @font-face {\n    font-family: mona-sans;\n    font-style: normal;\n    font-weight: 700;\n    src: local(\"Mona-Sans\"),\n      url(https://fonts.cdnfonts.com/s/91271/Mona-Sans-Bold.woff) format(\"woff\");\n  }\n`;\n\nState.init({\n  cart: null,\n  nearToUsd: null,\n});\n\nif (state.nearToUsd === null) {\n  const res = fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\");\n  console.log(\"coingecko res: \", res.body);\n  State.update({ nearToUsd: res.body.near.usd });\n}\n\nconst tabContentWidget = {\n  [CREATE_PROJECT_TAB]: \"Project.Create\",\n  [EDIT_PROJECT_TAB]: \"Project.Create\",\n  [PROJECTS_LIST_TAB]: \"Project.ListPage\",\n  [PROJECT_DETAIL_TAB]: \"Project.Detail\",\n  [CART_TAB]: \"Cart.Checkout\",\n};\n\nconst getWidget = (props) => {\n  if (props.tab in tabContentWidget) {\n    return tabContentWidget[props.tab];\n  }\n  // backup (TODO: review)\n  return tabContentWidget[PROJECTS_LIST_TAB];\n};\n\nconst getTabWidget = (tab) => {\n  if (tab in tabContentWidget) {\n    return tabContentWidget[tab];\n  }\n\n  return tabContentWidget[PROJECTS_LIST_TAB];\n};\n\nconst props = {\n  ...props,\n  ...state,\n  addProjectsToCart: (projects) => {\n    const cart = state.cart ?? {};\n    projects.forEach(({ id, amount, ft, referrerId }) => {\n      cart[id] = { amount, ft: ft ?? \"NEAR\", referrerId }; // default to NEAR\n    });\n    State.update({ cart });\n    Storage.set(CART_KEY, JSON.stringify(cart));\n  },\n  removeProjectsFromCart: (projectIds) => {\n    const cart = state.cart ?? {};\n    projectIds.forEach((projectId) => {\n      delete cart[projectId];\n    });\n    State.update({ cart });\n    Storage.set(CART_KEY, JSON.stringify(cart));\n  },\n  updateCartItem: (projectId, amount, ft, referrerId) => {\n    const cart = state.cart ?? {};\n    const updated = {};\n    // if (amount === \"\") updated.amount = \"0\";\n    if (amount || amount === \"\") updated.amount = amount;\n    if (ft) updated.ft = ft;\n    if (referrerId) updated.referrerId = referrerId;\n    cart[projectId] = updated;\n    State.update({ cart });\n    Storage.set(CART_KEY, JSON.stringify(cart));\n  },\n  checkoutSuccess: props.tab === CART_TAB && props.transactionHashes,\n  checkoutSuccessTxHash: props.tab === CART_TAB ? props.transactionHashes : \"\",\n};\n\nconst CART_KEY = \"cart\";\nconst storageCart = Storage.get(CART_KEY);\nconst DEFAULT_CART = {};\n\nif (state.cart === null && storageCart !== null) {\n  // cart hasn't been set on state yet, and storageCart has been fetched\n  // if storageCart isn't undefined, set it on state\n  // otherwise, set default cart on state\n  let cart = DEFAULT_CART;\n  if (storageCart) {\n    cart = JSON.parse(storageCart);\n  }\n  State.update({ cart });\n}\n\nif (props.checkoutSuccess && state.cart && Object.keys(state.cart).length > 0) {\n  // if checkout was successful, clear cart\n  State.update({ cart: {} });\n  Storage.set(CART_KEY, JSON.stringify(DEFAULT_CART));\n}\n\nif (props.tab === EDIT_PROJECT_TAB) {\n  props.edit = true;\n}\n\nconst tabContent = <Widget src={`${ownerId}/widget/${getTabWidget(props.tab)}`} props={props} />;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #ffffff;\n  // padding: 3em;\n  border-radius: 0rem 0rem 1.5rem 1.5rem;\n  border-top: 1px solid var(--ui-elements-light, #eceef0);\n  background: var(--base-white, #fff);\n\n  &.form {\n    border: none;\n    background: #fafafa;\n  }\n`;\n\nconst isForm = [CREATE_PROJECT_TAB].includes(props.tab);\n\nif (!state.cart) {\n  return \"\";\n}\n\nreturn (\n  <Theme>\n    <Widget src={`${ownerId}/widget/Nav`} props={props} />\n    <Content className={isForm ? \"form\" : \"\"}>{tabContent}</Content>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Index", "fact_widget_deployments_id": "a7eeab57f602f5bc2ab44056800ab21b", "inserted_timestamp": "2023-11-03T18:49:14.028Z", "modified_timestamp": "2023-11-03T18:49:14.028Z", "__row_index": 61}