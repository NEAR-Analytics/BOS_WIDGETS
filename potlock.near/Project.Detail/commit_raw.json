{"tx_hash": "8PqEgNh6qBySramTsL5SX9UKzoPhFXcYAjfSCGbTiXi1", "action_id_social": "6Y3xQf2voLsGRKjtXopS2pf9o2kTvz2PB11ng55NVYtN-0-widget", "block_id": 113528796, "block_timestamp": "2024-02-25T03:42:49.010Z", "signer_id": "potlock.near", "widget_name": "Project.Detail", "source_code": "const { projectId, tab, POT_FACTORY_CONTRACT_ID } = props;\nconst { DONATION_CONTRACT_ID, ownerId } = VM.require(\"potlock.near/widget/constants\") || {\n  DONATION_CONTRACT_ID: \"\",\n  ownerId: \"\",\n};\nconst { ProjectOptions } = VM.require(`${ownerId}/widget/Project.Options`);\n\nconst PotlockRegistrySDK = VM.require(\"potlock.near/widget/SDK.registry\") || (() => ({}));\nconst registry = PotlockRegistrySDK({ env: props.env });\n\nconst project = registry.getProjectById(projectId);\n\nif (!project || project == null) {\n  return \"Loading\";\n}\n\nif (project == undefined) {\n  return \"Project not found\";\n}\n\n// Fetch Project Donations\nconst [pots, setPots] = useState(null);\nconst [directDonations, setDirectDonations] = useState(null);\n// mapping of pot IDs to array of Round Matching Donations for the project\nconst [matchingRoundDonations, setMatchingRoundDonations] = useState({});\n\nconst getPotConfig = (potId) => Near.asyncView(potId, \"get_config\", {});\n\nconst getProjectRoundDonations = (potId, potDetail) => {\n  return Near.asyncView(potId, \"get_donations_for_project\", {\n    project_id: projectId,\n  })\n    .then((donations) => {\n      const updatedDonations = donations.map((donation) => ({\n        ...donation,\n        base_currency: potDetail.base_currency,\n        pot_name: potDetail.pot_name,\n        pot_id: potId,\n        type: \"MATCHED_DONATIONS\",\n      }));\n      if (roundDonations[potId]) return \"\";\n      setMatchingRoundDonations((prevmMatchingRoundDonations) => {\n        return { ...prevmMatchingRoundDonations, [potId]: updatedDonations };\n      });\n    })\n    .catch(() => {\n      if (roundDonations[potId]) return \"\";\n      setMatchingRoundDonations((prevmMatchingRoundDonations) => {\n        return { ...prevmMatchingRoundDonations, [potId]: [] };\n      });\n    });\n};\n\n// Get Project Direct Donations\nif (!directDonations) {\n  Near.asyncView(DONATION_CONTRACT_ID, \"get_donations_for_recipient\", {\n    recipient_id: projectId,\n  }).then((donations) => {\n    donations = donations.map((donation) => ({\n      ...donation,\n      type: \"DIRECT\",\n    }));\n    setDirectDonations(donations);\n  });\n}\nif (!pots) {\n  Near.asyncView(POT_FACTORY_CONTRACT_ID, \"get_pots\", {}).then((pots) => {\n    setPots(pots || []);\n  });\n}\nif (pots.length && !matchingRoundDonations[pots[pots.length - 1].id]) {\n  pots.forEach((pot) => {\n    getPotConfig(pot.id).then((potDetail) => {\n      getProjectRoundDonations(pot.id, potDetail);\n    });\n  });\n}\n\nconst allDonations = useMemo(() => {\n  const RoundDonationsValue = Object.values(matchingRoundDonations).flat();\n  const allDonations = [...(directDonations || []), ...RoundDonationsValue];\n  allDonations.sort(\n    (a, b) => (b.donated_at_ms || b.donated_at) - (a.donated_at_ms || a.donated_at)\n  );\n  return allDonations;\n}, [matchingRoundDonations, directDonations]);\n\nconst profile = Social.getr(`${projectId}/profile`);\nif (profile === null) {\n  return \"Loading\";\n}\n\nconst Wrapper = styled.div`\n  margin-top: calc(-1 * var(--body-top-padding, 0));\n`;\n\nreturn (\n  <Wrapper>\n    {project.status !== \"Approved\" && (\n      <Widget src={`${ownerId}/widget/Project.ProjectBanner`} props={{ ...props, project }} />\n    )}\n    <Widget\n      src={`${ownerId}/widget/Profile.Body`}\n      props={{\n        ...props,\n        profile,\n        project,\n        nav: props.nav ?? \"home\",\n        donations: allDonations,\n        navOptions: ProjectOptions(props),\n      }}\n    />\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.Detail", "fact_widget_deployments_id": "70fc67ed3557f8c59b0227f2a98afb8b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}