{"tx_hash": "4mELLqciQHtCyCLgPByCm5JkeiSU9VmHUj99cAGq2xEN", "action_id_social": "2vmMEBMDQnR79ueRDzaQh64tcKonv9DKENvAC4xABzsE-0-widget", "block_id": 115526673, "block_timestamp": "2024-03-26T17:49:59.014Z", "signer_id": "potlock.near", "widget_name": "Pots.PayoutsChallenges", "source_code": "const { potId, hrefWithParams } = props;\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getPayoutsChallenges: () => {},\n  adminUpdatePayoutsChallenge: () => {},\n  isUserPotAdminOrGreater: () => false,\n};\n\nconst { ownerId } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n};\nconst { getTimePassed } = VM.require(`potlock.near/widget/Components.DonorsUtils`);\nconst payoutsChallenges = PotSDK.getPayoutsChallenges(potId); // TODO: ADD THIS BACK IN\n\nconst userIsAdminOrGreater = PotSDK.isUserPotAdminOrGreater(potId, context.accountId); // TODO: ADD THIS BACK IN\n\nState.init({\n  adminModalChallengerId: \"\",\n  challengeAdminNotes: \"\",\n  challengeAdminNotesError: \"\",\n  resolveChallenge: false,\n  toggleChallenges: false,\n});\n\nconst {\n  adminModalChallengerId,\n  challengeAdminNotes,\n  challengeAdminNotesError,\n  resolveChallenge,\n  toggleChallenges,\n} = state;\n\nconst MAX_CHALLENGE_TEXT_LENGTH = 1000;\n\nconst handleAdminUpdateChallenge = () => {\n  PotSDK.adminUpdatePayoutsChallenge(\n    potId,\n    adminModalChallengerId,\n    challengeAdminNotes,\n    resolveChallenge\n  );\n  State.update({\n    adminModalChallengerId: \"\",\n    challengeAdminNotes: \"\",\n    challengeAdminNotesError: \"\",\n    resolveChallenge: false,\n  });\n};\n\nconst handleCancelAdminUpdateChallenge = () => {\n  State.update({\n    adminModalChallengerId: \"\",\n    challengeAdminNotes: \"\",\n    challengeAdminNotesError: \"\",\n    resolveChallenge: false,\n  });\n};\n\nconst Line = styled.div`\n  width: 100%;\n  height: 1px;\n  background: #c7c7c7;\n  margin: 3rem 0;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst Title = styled.div`\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n  width: fit-content;\n  cursor: pointer;\n  margin-bottom: 1.5rem;\n  div:first-of-type {\n    font-weight: 600;\n  }\n  svg {\n    rotate: 180deg;\n    transition: all 300ms ease-in-out;\n  }\n`;\nconst Table = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  border-radius: 6px;\n  border: 1px solid #7b7b7b;\n  transition: max-height 400ms ease-in-out;\n  overflow: hidden;\n  max-height: 1000px;\n  opacity: 1;\n  &.hidden {\n    opacity: 0;\n    max-height: 0;\n  }\n`;\n\nconst Challenge = styled.div`\n  display: flex;\n  padding: 1rem;\n  border-bottom: 1px solid #c7c7c7;\n  font-size: 14px;\n  &:last-of-type {\n    border-bottom: none;\n  }\n  .vertical-line {\n    height: 100%;\n    background: #c7c7c7;\n    width: 1px;\n    transform: translateX(0.75rem);\n    z-index: -1;\n  }\n  .profile-image {\n    width: 1.5rem;\n    height: 1.5rem;\n    margin-right: 0.5rem;\n  }\n  .admin-icon {\n    margin-right: 0.75rem;\n    svg {\n      width: 1.5rem;\n      height: 1.5rem;\n    }\n  }\n  .content {\n    display: flex;\n    flex-direction: column;\n  }\n  .header {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: 0.5rem;\n  }\n  .id {\n    font-weight: 600;\n    color: #292929;\n    transition: 200ms;\n    :hover {\n      text-decoration: none;\n      color: #dd3345;\n    }\n  }\n  .title {\n    font-weight: 600;\n    color: #8b5af8;\n  }\n  .reason {\n    color: #7b7b7b;\n    margin-top: 0.5rem;\n    margin-bottom: 1rem;\n    padding-left: 2.5rem;\n    background: white;\n  }\n  .admin-header {\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n  }\n  .dot {\n    background: #7b7b7b;\n    width: 5px;\n    height: 5px;\n    border-radius: 50%;\n  }\n  .resolved-state {\n    font-weight: 600;\n  }\n  .resolve-btn {\n    cursor: pointer;\n    background: none;\n    border: none;\n  }\n  @media only screen and (max-width: 480px) {\n    .profile-image {\n      margin-right: 0;\n    }\n    .admin-icon {\n      margin-right: 0.25rem;\n    }\n    .reason {\n      padding-left: 2rem;\n    }\n    .date {\n      width: 100%;\n      margin-top: -0.5rem;\n      padding-left: 2rem;\n    }\n  }\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  background: white;\n  padding: 24px 24px 12px 24px;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n  font-weight: 500;\n`;\n\nconst ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 24px;\n  border-top: 1px #f0f0f0 solid;\n  background: #fafafa;\n  gap: 8px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  background: #fafafa;\n  padding: 12px 24px 24px 24px;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  gap: 24px;\n  width: 100%;\n`;\n\nconst HeaderItemText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst AdminSVG = () => (\n  <div className=\"admin-icon\">\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <mask id=\"path-1-inside-1_10044_14103\" fill=\"white\">\n        <path d=\"M0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12Z\" />\n      </mask>\n      <path\n        d=\"M0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12Z\"\n        fill=\"#656565\"\n      />\n      <path\n        d=\"M-0.666667 12C-0.666667 5.00439 5.00439 -0.666667 12 -0.666667C18.9956 -0.666667 24.6667 5.00439 24.6667 12H23.3333C23.3333 5.74077 18.2592 0.666667 12 0.666667C5.74077 0.666667 0.666667 5.74077 0.666667 12H-0.666667ZM24.6667 12.6667C24.6667 19.6623 18.9956 25.3333 12 25.3333C5.00439 25.3333 -0.666667 19.6623 -0.666667 12.6667L0.666667 12C0.666667 17.891 5.74077 22.6667 12 22.6667C18.2592 22.6667 23.3333 17.891 23.3333 12L24.6667 12.6667ZM12 25.3333C5.00439 25.3333 -0.666667 19.6623 -0.666667 12.6667V12C-0.666667 5.00439 5.00439 -0.666667 12 -0.666667V0.666667C5.74077 0.666667 0.666667 5.74077 0.666667 12C0.666667 17.891 5.74077 22.6667 12 22.6667V25.3333ZM12 -0.666667C18.9956 -0.666667 24.6667 5.00439 24.6667 12V12.6667C24.6667 19.6623 18.9956 25.3333 12 25.3333V22.6667C18.2592 22.6667 23.3333 17.891 23.3333 12C23.3333 5.74077 18.2592 0.666667 12 0.666667V-0.666667Z\"\n        fill=\"#292929\"\n        mask=\"url(#path-1-inside-1_10044_14103)\"\n      />\n      <path\n        d=\"M9.20029 12.7527L11.087 10.866L6.40695 6.19268C5.36695 7.23268 5.36695 8.91935 6.40695 9.96601L9.20029 12.7527ZM13.7203 11.546C14.7403 12.0193 16.1736 11.686 17.2336 10.626C18.507 9.35268 18.7536 7.52601 17.7736 6.54601C16.8003 5.57268 14.9736 5.81268 13.6936 7.08601C12.6336 8.14601 12.3003 9.57935 12.7736 10.5993L6.26695 17.106L7.20695 18.046L11.8003 13.466L16.387 18.0527L17.327 17.1127L12.7403 12.526L13.7203 11.546Z\"\n        fill=\"white\"\n      />\n    </svg>\n  </div>\n);\nconst ProfileImg = ({ address }) => (\n  <Widget src=\"mob.near/widget/ProfileImage\" props={{ accountId: address, style: {} }} />\n);\n\nconsole.log(\"payoutsChallenges\", payoutsChallenges);\n\nreturn !payoutsChallenges ? (\n  \"Loading...\"\n) : payoutsChallenges.length === 0 ? (\n  \"\"\n) : (\n  <>\n    <Container>\n      <Title\n        onClick={() =>\n          State.update({\n            toggleChallenges: !toggleChallenges,\n          })\n        }\n      >\n        <div>Payout Challenges</div>\n        <div>{payoutsChallenges?.length}</div>\n        <svg\n          width=\"12\"\n          height=\"8\"\n          viewBox=\"0 0 12 8\"\n          style={{\n            rotate: toggleChallenges ? \"0deg\" : \"180deg\",\n          }}\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M6 0.294922L0 6.29492L1.41 7.70492L6 3.12492L10.59 7.70492L12 6.29492L6 0.294922Z\"\n            fill=\"#151A23\"\n          />\n        </svg>\n      </Title>\n      <Table className={`${!toggleChallenges ? \"hidden\" : \"\"}`}>\n        {payoutsChallenges.map(({ challenger_id, admin_notes, created_at, reason, resolved }) => (\n          <Challenge key={challenger_id}>\n            {/* <div className=\"vertical-line\" /> */}\n            <div className=\"content\">\n              <div className=\"header\">\n                <ProfileImg address={challenger_id} />\n                <a className=\"id\" href={hrefWithParams(`?tab=profile&accountId=${challenger_id}`)}>\n                  {challenger_id}\n                </a>\n                <div className=\"title\">Challenged payout</div>\n                <div className=\"date\"> {getTimePassed(created_at)}</div>\n              </div>\n              <div className=\"reason\">{reason}</div>\n              <div className=\"admin-header\">\n                <AdminSVG />\n                <div\n                  className=\"resolved-state\"\n                  style={{\n                    color: resolved ? \"#4a7714\" : \"#C7C7C7\",\n                  }}\n                >\n                  Resolved\n                </div>\n\n                {resolved ? (\n                  <>\n                    <div className=\"dot\" />\n                    <div>1 Response</div>\n                  </>\n                ) : userIsAdminOrGreater ? (\n                  <>\n                    <div className=\"dot\" />\n                    <button\n                      className=\"resolve-btn\"\n                      onClick={() => State.update({ adminModalChallengerId: challenger_id })}\n                    >\n                      Reply\n                    </button>\n                  </>\n                ) : (\n                  \"\"\n                )}\n              </div>\n\n              <div className=\"reason\">{admin_notes}</div>\n            </div>\n          </Challenge>\n        ))}\n      </Table>\n      {/* Admin update challenge modal */}\n      <Widget\n        src={`${ownerId}/widget/Components.Modal`}\n        props={{\n          isModalOpen: adminModalChallengerId,\n          onClose: handleCancelAdminUpdateChallenge,\n          contentStyle: {\n            padding: \"0px\",\n          },\n          children: (\n            <>\n              <ModalHeader>Update Challenge from {adminModalChallengerId}</ModalHeader>\n              <ModalBody>\n                <HeaderItemText>Challenge Reason:</HeaderItemText>\n                <div>\n                  {\n                    payoutsChallenges.find(\n                      (challenge) => challenge.challenger_id === adminModalChallengerId\n                    ).reason\n                  }\n                </div>\n                <Widget\n                  src={`${ownerId}/widget/Inputs.TextArea`}\n                  props={{\n                    noLabel: true,\n                    inputRows: 5,\n                    inputStyle: {\n                      background: \"#FAFAFA\",\n                    },\n                    placeholder: \"Respond to the challenge here\",\n                    value: challengeAdminNotes,\n                    onChange: (challengeAdminNotes) => State.update({ challengeAdminNotes }),\n                    validate: () => {\n                      if (challengeAdminNotes.length > MAX_CHALLENGE_TEXT_LENGTH) {\n                        State.update({\n                          challengeAdminNotesError: `Notes must be less than ${MAX_CHALLENGE_TEXT_LENGTH} characters`,\n                        });\n                        return;\n                      }\n\n                      State.update({ challengeAdminNotesError: \"\" });\n                    },\n                    error: challengeAdminNotesError,\n                  }}\n                />\n                <Widget\n                  src={`${ownerId}/widget/Inputs.Checkbox`}\n                  props={{\n                    // id: \"registrationSelector\",\n                    label: \"Resolve this challenge?\",\n                    checked: resolveChallenge,\n                    onClick: (e) => {\n                      State.update({\n                        resolveChallenge: e.target.checked,\n                      });\n                    },\n                  }}\n                />\n              </ModalBody>\n              <ModalFooter>\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"tertiary\",\n                    text: \"Cancel\",\n                    onClick: handleCancelAdminUpdateChallenge,\n                  }}\n                />\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"primary\",\n                    text: \"Submit\",\n                    disabled: !challengeAdminNotes || !!challengeAdminNotesError,\n                    onClick: handleAdminUpdateChallenge,\n                  }}\n                />\n              </ModalFooter>\n            </>\n          ),\n        }}\n      />\n    </Container>\n    <Line />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.PayoutsChallenges", "fact_widget_deployments_id": "ba45f25951468851fd5772778ba00c4b", "inserted_timestamp": "2024-03-26T19:30:52.903Z", "modified_timestamp": "2024-03-26T19:30:52.903Z", "__row_index": 0}