{"tx_hash": "9M2eWBsvEDPbU5fXtEZhatMysLKgJFdWPnn2ytu92ooh", "action_id_social": "2EwUFhhr9gaLjEn67jkYHXheTgNRTzp4CPt4mCKfV1eg-0-widget", "block_id": 115589483, "block_timestamp": "2024-03-27T15:40:08.198Z", "signer_id": "potlock.near", "widget_name": "Pots.PoolAllocationTable", "source_code": "const {\n  potId,\n  env,\n  hrefWithParams,\n  potDetail: { base_currency, total_public_donations, matching_pool_balance },\n} = props;\nconst { ownerId, NADA_BOT_URL, SUPPORTED_FTS } = VM.require(\n  \"potlock.near/widget/constants\"\n) || {\n  ownerId: \"\",\n  NADA_BOT_URL: \"\",\n  SUPPORTED_FTS: {},\n};\nconst { _address } = VM.require(`${ownerId}/widget/Components.DonorsUtils`) || {\n  _address: (address) => address,\n};\nconst {\n  calculatePayouts,\n  nearToUsdWithFallback,\n  yoctosToUsdWithFallback,\n  formatWithCommas,\n  nearToUsd,\n} = VM.require(\"potlock.near/widget/utils\") || {\n  nearToUsdWithFallback: () => \"\",\n  yoctosToUsdWithFallback: () => \"\",\n  calculatePayouts: () => {},\n  formatWithCommas: () => \"\",\n  nearToUsd: 1,\n};\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  asyncGetDonationsForDonor: () => {},\n  asyncGetApprovedApplications: () => {},\n  getMatchingPoolDonations: () => {},\n};\nconst [projectsId, setProjectsId] = useState(null);\nconst [projectsDonations, setProjectsDonations] = useState({});\nconst [usdToggle, setUsdToggle] = useState(false);\nconst [allPayouts, setAllPayouts] = useState(null);\nif (!projectsId) {\n  PotSDK.asyncGetApprovedApplications(potId).then((projects) => {\n    setProjectsId(projects);\n  });\n}\nlet sponsorshipDonations = PotSDK.getMatchingPoolDonations(potId);\nif (sponsorshipDonations)\n  sponsorshipDonations.sort((a, b) => b.net_amount - a.net_amount);\nconst lastProject = projectsId[projectsId.length - 1].project_id;\nconst calcUniqueDonors = (donations) => {\n  // Get the count of unique donors\n  const uniqueDonorIds = new Set();\n  // Iterate through each object and collect unique donor_id values\n  donations.forEach((project) => {\n    project.donations.forEach((donation) => {\n      uniqueDonorIds.add(donation.donor_id);\n    });\n  });\n  // Get the number of unique donor_id values\n  return uniqueDonorIds.size;\n};\nconst calcMatchedAmount = (donations) => {\n  console.log(\"donations\", donations);\n  const total = Big(0);\n  donations.forEach((donation) => {\n    total = total.plus(Big(donation.net_amount));\n  });\n  const amount = SUPPORTED_FTS[base_currency.toUpperCase()].fromIndivisible(\n    total.toString()\n  );\n  return amount;\n};\nconst allDonationsForPot = Near.view(potId, \"get_public_round_donations\", {});\nconst uniqueDonorIds = allDonationsForPot\n  ? new Set(allDonationsForPot.map((donation) => donation.donor_id))\n  : new Set([]);\nconst donorsCount = uniqueDonorIds.size;\nif (!allPayouts && allDonationsForPot?.length > 0) {\n  const calculatedPayouts = calculatePayouts(\n    allDonationsForPot,\n    matching_pool_balance\n  );\n  let allPayouts = [];\n  if (potDetail.payouts.length) {\n    allPayouts = potDetail.payouts.map((payout) => {\n      const { project_id, amount } = payout;\n      return {\n        projectId: project_id,\n        matchingAmount: amount,\n      };\n    });\n  } else {\n    // calculate estimated payouts\n    allPayouts = Object.entries(calculatedPayouts).map(\n      ([projectId, { matchingAmount }]) => {\n        return {\n          projectId,\n          matchingAmount,\n        };\n      }\n    );\n  }\n  allPayouts.sort((a, b) => {\n    // sort by matching pool allocation, highest to lowest\n    return b.matchingAmount - a.matchingAmount;\n  });\n  setAllPayouts(allPayouts.slice(0, 5));\n}\nconst ProfileImg = ({ profile }) => (\n  <Widget src=\"mob.near/widget/ProfileImage\" props={{ profile, style: {} }} />\n);\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  border-radius: 12px;\n  border-top: 1px solid #292929;\n  border-right: 1px solid #292929;\n  border-bottom: 2px solid #292929;\n  border-left: 1px solid #292929;\n  overflow: hidden;\n  .header {\n    font-size: 18px;\n    font-weight: 600;\n    background: #fef6ee;\n    padding: 1rem;\n    span {\n      color: #ee8949;\n    }\n  }\n  .sort {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0.5rem 1rem;\n    font-size: 11px;\n    background: #fef6ee;\n    .title {\n      font-weight: 500;\n      letter-spacing: 0.44px;\n      text-transform: uppercase;\n    }\n    .sort-btn {\n      font-weight: 500;\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      cursor: pointer;\n    }\n  }\n`;\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  padding: 1rem;\n  gap: 8px;\n  border-bottom: 1px solid #c7c7c7;\n  &:last-of-type {\n    border-bottom: none;\n  }\n  .address {\n    display: flex;\n    text-decoration: none;\n    align-items: center;\n    font-weight: 600;\n    gap: 8px;\n    margin-left: 24px;\n    flex: 1;\n    color: #292929;\n    transition: color 200ms ease-in;\n    :hover {\n      color: #dd3345;\n    }\n  }\n  .profile-image {\n    width: 18px;\n    height: 18px;\n  }\n`;\nconst publicRoundStarted = projectsTotalDonations.length > 0;\nconst Table = ({ donations, totalAmount, totalUniqueDonors, title }) => (\n  <Container>\n    <div className=\"header\">\n      {totalAmount}\n      <span>raised from</span>\n      {totalUniqueDonors}\n      <span>{allPayouts?.length > 0 ? \"donors\" : \"sponsors\"}</span>\n    </div>\n    <div className=\"sort\">\n      <div className=\"title\">Top {title} </div>\n      <div\n        className=\"sort-btn\"\n        style={{\n          cursor: nearToUsd ? \"pointer\" : \"default\",\n        }}\n        onClick={() => (nearToUsd ? setUsdToggle(!usdToggle) : \"\")}\n      >\n        {nearToUsd && (\n          <svg\n            width=\"12\"\n            height=\"14\"\n            viewBox=\"0 0 12 14\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M9 10.7575V5.5H7.5V10.7575H5.25L8.25 13.75L11.25 10.7575H9ZM3.75 0.25L0.75 3.2425H3V8.5H4.5V3.2425H6.75L3.75 0.25ZM9 10.7575V5.5H7.5V10.7575H5.25L8.25 13.75L11.25 10.7575H9ZM3.75 0.25L0.75 3.2425H3V8.5H4.5V3.2425H6.75L3.75 0.25Z\"\n              fill=\"#7B7B7B\"\n            />\n          </svg>\n        )}\n        {usdToggle ? \"USD\" : \"NEAR\"}\n      </div>\n    </div>\n    {donations.map(\n      ({ projectId, donor_id, matchingAmount, net_amount }, idx) => {\n        const id = donor_id || projectId;\n        const nearAmount = formatWithCommas(\n          SUPPORTED_FTS[base_currency.toUpperCase()].fromIndivisible(\n            net_amount || matchingAmount\n          )\n        );\n        const profile = Social.getr(`${id}/profile`);\n        const matchedAmout = usdToggle\n          ? yoctosToUsdWithFallback(matchingAmount || net_amount, true)\n          : nearAmount;\n        return (\n          <Row>\n            <div>#{idx + 1}</div>\n            <a\n              className=\"address\"\n              href={hrefWithParams(`?tab=project&projectId=${id}`)}\n            >\n              <ProfileImg profile={profile} />\n              {_address(profile.name || id, 15)}\n            </a>\n            <div>\n              {matchedAmout} {usdToggle ? \" \" : \"N\"}\n            </div>\n          </Row>\n        );\n      }\n    )}\n  </Container>\n);\nreturn allPayouts?.length > 0 ? (\n  <Table\n    title=\"matching pool allocations\"\n    totalAmount={yoctosToUsdWithFallback(total_public_donations, true)}\n    totalUniqueDonors={donorsCount}\n    donations={allPayouts}\n  />\n) : sponsorshipDonations.length > 0 ? (\n  <Table\n    title=\"sponsors\"\n    totalAmount={nearToUsdWithFallback(calcMatchedAmount(sponsorshipDonations))}\n    totalUniqueDonors={\n      new Set(sponsorshipDonations.map((obj) => obj.donor_id)).size\n    }\n    donations={sponsorshipDonations.slice(0, 5)}\n  />\n) : (\n  \"\"\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.PoolAllocationTable", "fact_widget_deployments_id": "1df8cb62d93abc6aed0d5fc6345425be", "inserted_timestamp": "2024-03-27T17:31:11.616Z", "modified_timestamp": "2024-03-27T17:31:11.616Z", "__row_index": 3}