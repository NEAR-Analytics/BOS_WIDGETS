{"tx_hash": "6bNscu69152fQG8WnWNS4zjWgG7S9UYPN9ZEqCQo4FLc", "action_id_social": "38VqXp2gVFF9UEbmCyh5YuvtxPAVFma5kSeLBhkAkRo7-0-widget", "block_id": 109663410, "block_timestamp": "2024-01-05T15:35:02.324Z", "signer_id": "potlock.near", "widget_name": "Cart.Checkout", "source_code": "const { ownerId } = props;\nconst donationContractId = \"donate.potlock.near\";\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst TRASH_ICON_URL =\n  IPFS_BASE_URL + \"bafkreicwtubzlywmtvoxc4tqjfturyi5oqxtbpezceosiw3juv2d4uf7om\";\n\nconst DEFAULT_GATEWAY = \"https://bos.potlock.org/\";\nconst POTLOCK_TWITTER_ACCOUNT_ID = \"PotLock_\";\n\nconst DEFAULT_SHARE_HASHTAGS = [\"BOS\", \"PublicGoods\", \"Donations\"];\n\n// const Wrapper = styled.div`\n//   display: flex;\n//   flex-direction: row;\n\n//   @media screen and (max-width: 768px) {\n//     flex-direction: column;\n//   }\n// `;\n\nconst Container = styled.div`\n  background: #fafafa;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  min-height: 100vh;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst SuccessContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  //   justify-content: center;\n  width: 100%;\n  padding: 24px;\n  gap: 24px;\n`;\n\n// const ButtonsContainer = styled.div`\n//   display: flex;\n//   flex-direction: row;\n//   gap: 24px;\n//   width: 50%;\n//   align-items: center;\n//   justify-content: center;\n// `;\n\nconst ColumnLeft = styled.div`\n  display: flex;\n  flex-direction: column;\n  //   background: #fafafa;\n  width: 55%;\n  //   background: pink;\n  padding: 48px 40px 48px 64px;\n  gap: 48px;\n\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    padding: 24px 16px 24px 16px;\n  }\n`;\n\nconst ColumnRight = styled.div`\n  //   background: yellow;\n  flex: 1;\n  padding: 152px 148px 152px 84px;\n  border-left: 1px #c7c7c7 solid;\n\n  @media screen and (max-width: 768px) {\n    padding: 24px 16px 24px 16px;\n    border-left: none;\n    border-top: 1px #c7c7c7 solid;\n  }\n`;\n\nconst Title = styled.div`\n  color: #2e2e2e;\n  font-size: 48px;\n  font-family: Lora;\n  font-weight: 500;\n  line-height: 56px;\n  word-wrap: break-word;\n  text-align: center;\n`;\n\nconst Icon = styled.img`\n  width: 20px;\n  height: 20px;\n`;\n\nconst ActionsContainer = styled.div`\n  width: 100%;\n  padding: 16px;\n  background: white;\n  border: 1px solid #dbdbdb;\n  box-shadow: 0px -2px 0px #dbdbdb inset;\n  border-radius: 6px;\n  overflow: hidden;\n  justify-content: flex-start;\n  align-items: center;\n  display: inline-flex;\n  gap: 24px;\n`;\n\nconst InnerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n`;\n\nconst SubTitle = styled.div`\n  color: #2e2e2e;\n  font-weight: 600;\n  font-size: 14px;\n`;\n\nconst TxLink = styled.a`\n  color: #2e2e2e;\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nState.init({\n  selectedProjectIds: [],\n  masterSelectorSelected: false,\n  successfulDonationRecipientId: null,\n  successfulDonationRecipientProfile: null,\n});\n\nconst allSelected =\n  state.selectedProjectIds.length !== 0 &&\n  state.selectedProjectIds.length === Object.keys(props.cart).length;\n// const twitterSuccessText = `I just donated to this project on @potlock_!`;\n\n// console.log(\"props in Checkout: \", props);\n\n// const txInfo = useMemo(() => {\n//   if (props.transactionHashes && props.registeredProjects) {\n//     const body = JSON.stringify({\n//       jsonrpc: \"2.0\",\n//       id: \"dontcare\",\n//       method: \"tx\",\n//       params: [props.transactionHashes, context.accountId],\n//     });\n//     const res = fetch(\"https://rpc.mainnet.near.org\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body,\n//     });\n//     console.log(\"tx res: \", res);\n//     if (res.ok) {\n//       const successVal = res.body.result.status?.SuccessValue;\n//       let decoded = Buffer.from(successVal, \"base64\").toString(\"utf-8\"); // atob not working\n//       decoded = JSON.parse(decoded);\n//       const recipientId = decoded.recipient_id;\n//       if (recipientId) {\n//         State.update({ successfulDonationRecipientId: recipientId });\n//       }\n//     }\n//   }\n// }, [props.transactionHashes]);\n\nif (props.transactionHashes && props.registeredProjects && !state.successfulDonationRecipientId) {\n  const body = JSON.stringify({\n    jsonrpc: \"2.0\",\n    id: \"dontcare\",\n    method: \"tx\",\n    params: [props.transactionHashes, context.accountId],\n  });\n  const res = fetch(\"https://rpc.mainnet.near.org\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body,\n  });\n  // console.log(\"tx res: \", res);\n  if (res.ok) {\n    const successVal = res.body.result.status?.SuccessValue;\n    let decoded = Buffer.from(successVal, \"base64\").toString(\"utf-8\"); // atob not working\n    decoded = JSON.parse(decoded);\n    const recipientId = decoded.recipient_id;\n    if (recipientId) {\n      State.update({ successfulDonationRecipientId: recipientId });\n    }\n  }\n}\n\nif (state.successfulDonationRecipientId && !state.successfulDonationRecipientProfile) {\n  const profile = Social.getr(`${state.successfulDonationRecipientId}/profile`);\n  // console.log(\"profile: \", profile);\n  if (profile) {\n    State.update({ successfulDonationRecipientProfile: profile });\n  }\n}\n\nconst twitterIntent = useMemo(() => {\n  if (!state.successfulDonationRecipientId) return;\n  const twitterIntentBase = \"https://twitter.com/intent/tweet?text=\";\n  let url =\n    DEFAULT_GATEWAY +\n    `${ownerId}/widget/Index?tab=project&projectId=${state.successfulDonationRecipientId}&referrerId=${context.accountId}`;\n  let text = `I just donated to ${\n    state.successfulDonationRecipientProfile\n      ? state.successfulDonationRecipientProfile.linktree?.twitter\n        ? `@${state.successfulDonationRecipientProfile.linktree.twitter}`\n        : state.successfulDonationRecipientProfile.name\n      : state.successfulDonationRecipientId\n  } on @${POTLOCK_TWITTER_ACCOUNT_ID}! Support public goods at `;\n  text = encodeURIComponent(text);\n  url = encodeURIComponent(url);\n  return twitterIntentBase + text + `&url=${url}` + `&hashtags=${DEFAULT_SHARE_HASHTAGS.join(\",\")}`;\n}, [state.successfulDonationRecipientId, state.successfulDonationRecipientProfile]);\n\n// console.log(encodeURIComponent(\"https://twitter.com/intent/tweet?text=Hello%20world\"));\n\n// const donationsForDonor = useMemo(() => {\n//   const donations = Near.view(donationContractId, \"get_donations_for_donor\", {\n//     donor_id: context.accountId,\n//   });\n//   console.log(\"donations: \", donations);\n// }, []);\n\n// console.log(\"props in Checkout: \", props);\n\nreturn (\n  // <div>\n  <Container>\n    {props.checkoutSuccess ? (\n      <SuccessContainer>\n        <Title>Thanks for donating!</Title>\n        {twitterIntent && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              href: twitterIntent,\n              target: \"_blank\",\n              type: \"primary\",\n              text: \"Share to Twitter\",\n              disabled: !twitterIntent,\n              style: {\n                width: \"300px\",\n              },\n            }}\n          />\n        )}\n        <Widget\n          src={`${ownerId}/widget/Components.Button`}\n          props={{\n            href: `?tab=projects`,\n            type: twitterIntent ? \"secondary\" : \"primary\",\n            text: \"Explore projects\",\n            style: {\n              width: \"300px\",\n            },\n          }}\n        />\n        {twitterIntent && props.checkoutSuccessTxHash ? (\n          <TxLink\n            target=\"_blank\"\n            href={`https://nearblocks.io/txns/${props.checkoutSuccessTxHash}`}\n          >\n            View transaction\n          </TxLink>\n        ) : (\n          props.checkoutSuccessTxHash && (\n            <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                href: `https://nearblocks.io/txns/${props.checkoutSuccessTxHash}`,\n                target: \"_blank\",\n                type: \"secondary\",\n                text: \"View transaction\",\n                disabled: !props.checkoutSuccessTxHash,\n                style: {\n                  width: \"300px\",\n                },\n              }}\n            />\n          )\n        )}\n      </SuccessContainer>\n    ) : (\n      <>\n        <ColumnLeft>\n          <Title>Donation Cart</Title>\n          <ActionsContainer>\n            <InnerContainer>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"masterSelector\",\n                  disabled: Object.keys(props.cart).length === 0,\n                  checked: state.masterSelectorSelected,\n                  onClick: (e) => {\n                    // if allSelected, then deselect all\n                    // if not allSelected, then select all\n                    const selectedProjectIds = Object.keys(props.cart).filter((_) => {\n                      if (allSelected) {\n                        return false;\n                      }\n                      return true;\n                    });\n                    State.update({\n                      selectedProjectIds,\n                      masterSelectorSelected: !allSelected,\n                    });\n                  },\n                }}\n              />\n              <SubTitle>Select all</SubTitle>\n            </InnerContainer>\n            <InnerContainer\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // doesn't do anything if nothing selected\n                if (state.selectedProjectIds.length === 0) return;\n                // delete selected projects\n                props.removeProjectsFromCart(state.selectedProjectIds);\n                // uncheck box\n                State.update({ selectedProjectIds: [], masterSelectorSelected: false });\n              }}\n            >\n              <Icon src={TRASH_ICON_URL} />\n              <SubTitle>Delete</SubTitle>\n            </InnerContainer>\n          </ActionsContainer>\n          {Object.keys(props.cart).length === 0 ? (\n            <div>No items in cart</div>\n          ) : (\n            Object.keys(props.cart).map((projectId) => {\n              const checked = state.selectedProjectIds.includes(projectId);\n              return (\n                <Widget\n                  src={`${ownerId}/widget/Cart.CheckoutItem`}\n                  props={{\n                    ...props,\n                    projectId,\n                    checked,\n                    handleCheckboxClick: (e) => {\n                      // if selected, then deselect\n                      // else, select\n                      let selectedProjectIds = state.selectedProjectIds;\n                      if (checked) {\n                        selectedProjectIds = selectedProjectIds.filter((id) => id !== projectId);\n                      } else {\n                        selectedProjectIds.push(projectId);\n                      }\n                      const updatedState = {\n                        selectedProjectIds,\n                      };\n                      if (\n                        selectedProjectIds.length !== 0 &&\n                        selectedProjectIds.length !== Object.keys(props.cart).length\n                      ) {\n                        updatedState.masterSelectorSelected = false;\n                      }\n                      State.update(updatedState);\n                    },\n                  }}\n                />\n              );\n            })\n          )}\n        </ColumnLeft>\n        <ColumnRight>\n          <Widget\n            src={`${ownerId}/widget/Cart.BreakdownSummary`}\n            props={{\n              ...props,\n              updateSuccessfulDonationRecipientId: (recipientId) =>\n                State.update({ successfulDonationRecipientId: recipientId }),\n            }}\n          />\n        </ColumnRight>\n      </>\n    )}\n  </Container>\n  // </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Cart.Checkout", "fact_widget_deployments_id": "e35988b338a0ec68e8b4b0dde0648ba3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}