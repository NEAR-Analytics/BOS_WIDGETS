{"tx_hash": "9M2eWBsvEDPbU5fXtEZhatMysLKgJFdWPnn2ytu92ooh", "action_id_social": "2EwUFhhr9gaLjEn67jkYHXheTgNRTzp4CPt4mCKfV1eg-0-widget", "block_id": 115589483, "block_timestamp": "2024-03-27T15:40:08.198Z", "signer_id": "potlock.near", "widget_name": "Project.CreateForm", "source_code": "const {\n  validateNearAddress,\n  validateEVMAddress,\n  validateGithubRepoUrl,\n  getTeamMembersFromSocialProfileData,\n  doesUserHaveDaoFunctionCallProposalPermissions,\n} = VM.require(\"potlock.near/widget/utils\") || {\n  getTeamMembersFromSocialProfileData: () => [],\n  doesUserHaveDaoFunctionCallProposalPermissions: () => \"\",\n  validateNearAddress: () => \"\",\n  validateEVMAddress: () => \"\",\n  validateGithubRepoUrl: () => \"\",\n};\nconst HORIZON_CONTRACT_ID = \"nearhorizon.near\";\nconst SOCIAL_CONTRACT_ID = \"social.near\";\nconst ownerId = \"potlock.near\";\nBig.PE = 100;\nconst FIFTY_TGAS = \"50000000000000\";\nconst THREE_HUNDRED_TGAS = \"300000000000000\";\nconst MIN_PROPOSAL_DEPOSIT_FALLBACK = \"100000000000000000000000\"; // 0.1N\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst DEFAULT_BANNER_IMAGE_CID =\n  \"bafkreih4i6kftb34wpdzcuvgafozxz6tk6u4f5kcr2gwvtvxikvwriteci\";\nconst DEFAULT_PROFILE_IMAGE_URL =\n  IPFS_BASE_URL + \"bafkreifel4bfm6hxmklcsqjilk3bhvi3acf2rxqepcgglluhginbttkyqm\";\n// const TRASH_ICON_URL =\n//   IPFS_BASE_URL + \"bafkreifuvrxly3wuy4xdmavmdeb2o47nv6pzxwz3xmy6zvkxv76e55lj3y\";\n// const EDIT_ICON_URL = IPFS_BASE_URL + \"bafkreigc2laqrwu6g4ihm5n2qfxwl3g5phujtrwybone2ouxaz5ittjzee\";\nconst MAX_TEAM_MEMBERS_DISPLAY_COUNT = 5;\nif (!context.accountId) {\n  return (\n    <Widget\n      src={`${ownerId}/widget/Components.InfoSegment`}\n      props={{\n        title: \"Not logged in!\",\n        description: \"You must log in to create a new project!\",\n      }}\n    />\n  );\n}\nconst existingHorizonProject = Near.view(HORIZON_CONTRACT_ID, \"get_project\", {\n  account_id: context.accountId,\n});\nconst ListsSDK =\n  VM.require(\"potlock.near/widget/SDK.lists\") ||\n  (() => ({\n    getRegistrations: () => {},\n    getRegistration: () => {},\n    asyncGetRegistration: () => {},\n  }));\nconst lists = ListsSDK({ env: props.env });\nconst registrations = lists.getRegistrations() || [];\nconst imageHeightPx = 120;\nconst profileImageTranslateYPx = 220;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 72px 64px 72px 64px;\n  @media screen and (max-width: 768px) {\n    padding: 0px;\n  }\n`;\nconst LowerBannerContainer = styled.div`\n  position: absolute;\n  top: 340px;\n  left: 0px;\n  display: flex;\n  align-items: stretch; /* Ensuring child elements stretch to full height */\n  justify-content: space-between;\n  width: 100%;\n  z-index: 10;\n  @media screen and (max-width: 768px) {\n    top: 310px;\n    align-items: flex-start;\n    gap: 10px;\n    flex-direction: column;\n  }\n`;\nconst LowerBannerContainerLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  margin-left: 190px;\n  // background: yellow;\n  @media screen and (max-width: 768px) {\n    margin-left: 0px;\n  }\n`;\nconst LowerBannerContainerRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: flex-end; /* Pushes TeamContainer to the bottom */\n  flex: 1;\n`;\n// const TeamContainer = styled.div`\n//   width: 200px;\n//   height: 30px;\n//   // background: green;\n//   margin-bottom: 16px;\n//   display: flex;\n//   flex-direction: row;\n//   // gap: -40px;\n// `;\nconst AddTeamMembers = styled.a`\n  margin: 0px 0px 16px 36px;\n  cursor: pointer;\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n  &:hover {\n    text-decoration: none;\n  }\n  @media screen and (max-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0px 68px 32px 68px;\n  width: 100%;\n  @media screen and (max-width: 768px) {\n    padding: 0px 32px 32px 32px;\n  }\n`;\nconst FormDivider = styled.div`\n  height: 2px;\n  width: 100%;\n  background-color: #ebebeb;\n`;\nconst FormSectionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 160px;\n  margin: 48px 0 48px 0;\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    gap: 32px;\n  }\n`;\nconst FormSectionLeftDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: yellow;\n  gap: 16px;\n`;\nconst FormSectionRightDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: lightblue;\n`;\nconst FormSectionTitle = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 600;\n  word-wrap: break-word;\n`;\nconst FormSectionDescription = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 400;\n  word-wrap: break-word;\n`;\nconst FormSectionIsRequired = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  word-wrap: break-word;\n  position: relative;\n`;\nconst SvgContainer = styled.div`\n  position: absolute;\n  top: -6;\n  left: -26;\n`;\nconst ButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 32px;\n  margin-top: 32px;\n`;\nconst Space = styled.div`\n  height: ${(props) => props.height}px;\n`;\nconst InputPrefix = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  text-align: center;\n  padding: 14px 16px;\n  border-right: 1px #f0f0f0 solid;\n  color: #7b7b7b;\n  font-size: 16px;\n  font-weight: 400;\n  box-shadow: 0px -2px 0px rgba(93, 93, 93, 0.24) inset;\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 16px;\n  align-items: flex-start;\n  justify-content: center;\n`;\nconst Icon = styled.svg`\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  path {\n    transition: 300ms;\n  }\n  :hover path {\n    fill: #dd3345;\n  }\n`;\nconst FUNDING_SOURCE_COLUMNS = [\n  \"Funding Source\",\n  \"Description\",\n  \"Amount\",\n  \"Denomination\",\n];\nconst FundingHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  background: #f6f5f3;\n  width: 100%;\n`;\nconst FundingHeaderItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: space-between;\n  justify-content: flex-start;\n  padding: 10px 20px;\n  width: ${100 / FUNDING_SOURCE_COLUMNS.length}%;\n`;\nconst FundingHeaderItemText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\nconst TableRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\nconst TableRowItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 20px;\n  padding: 20px;\n  width: ${100 / FUNDING_SOURCE_COLUMNS.length}%;\n`;\nconst TableRowText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\nState.init({\n  isDao: false,\n  daoAddressTemp: \"\", // used while input is focused\n  daoAddress: \"\", // set on input blur\n  daoAddressError: \"\",\n  existingSocialData: {},\n  backgroundImage: {\n    ipfs_cid: DEFAULT_BANNER_IMAGE_CID,\n  },\n  profileImage: \"\",\n  name: \"\",\n  nameError: \"\",\n  originalCategories: [], // to keep track of removals\n  categories: [],\n  categoriesError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  publicGoodReason: \"\",\n  publicGoodReasonError: \"\",\n  hasSmartContracts: false,\n  originalSmartContracts: [], // to keep track of removals\n  smartContracts: [[\"\", \"\"]], // [chain, contractAddress]\n  originalGithubRepos: [], // to keep track of removals\n  githubRepos: [[\"\"]],\n  hasReceivedFunding: false,\n  fundingSourceIndex: null,\n  originalFundingSources: [], // to keep track of removals\n  fundingSources: [],\n  website: \"\",\n  websiteError: \"\",\n  twitter: \"\",\n  twitterError: \"\",\n  telegram: \"\",\n  telegramError: \"\",\n  github: \"\",\n  githubError: \"\",\n  socialDataFetched: false,\n  socialDataIsFetching: false,\n  isMultiAccountModalOpen: false,\n  teamMember: \"\",\n  teamMembers: [],\n  nearAccountIdError: \"\",\n  registrationSuccess: false,\n  showAlert: false,\n  alertMessage: \"\",\n});\nconst CATEGORY_MAPPINGS = {\n  SOCIAL_IMPACT: \"Social Impact\",\n  NON_PROFIT: \"NonProfit\",\n  CLIMATE: \"Climate\",\n  PUBLIC_GOOD: \"Public Good\",\n  DE_SCI: \"DeSci\",\n  OPEN_SOURCE: \"Open Source\",\n  COMMUNITY: \"Community\",\n  EDUCATION: \"Education\",\n  _deprecated: {\n    \"social-impact\": \"SOCIAL_IMPACT\",\n    \"non-profit\": \"NON_PROFIT\",\n    climate: \"CLIMATE\",\n    \"public-good\": \"PUBLIC_GOOD\",\n    \"de-sci\": \"DE_SCI\",\n    \"open-source\": \"OPEN_SOURCE\",\n    community: \"COMMUNITY\",\n    education: \"EDUCATION\",\n  },\n};\nconst CHAIN_OPTIONS = {\n  NEAR: { isEVM: false },\n  Solana: { isEVM: false },\n  Ethereum: { isEVM: true },\n  Polygon: { isEVM: true },\n  Avalanche: { isEVM: true },\n  Optimism: { isEVM: true },\n  Arbitrum: { isEVM: true },\n  BNB: { isEVM: true },\n  Sui: { isEVM: false },\n  Aptos: { isEVM: false },\n  Polkadot: { isEVM: false },\n  Stellar: { isEVM: false },\n  ZkSync: { isEVM: false }, // Note: ZkSync aims for EVM compatibility but might not fully be considered as traditional EVM at the time of writing.\n  Celo: { isEVM: true },\n  Aurora: { isEVM: true },\n  Injective: { isEVM: true },\n  Base: { isEVM: false },\n  Manta: { isEVM: false }, // Listed twice in the original list; included once here.\n  Fantom: { isEVM: true },\n  ZkEVM: { isEVM: true }, // Considering the name, assuming it aims for EVM compatibility.\n  Flow: { isEVM: false },\n  Tron: { isEVM: true },\n  MultiverseX: { isEVM: false }, // Formerly known as Elrond, not traditionally EVM but has some level of compatibility.\n  Scroll: { isEVM: true }, // Assuming EVM compatibility based on the context of ZkEVM.\n  Linea: { isEVM: true }, // Assuming non-EVM due to lack of information.\n  Metis: { isEVM: true },\n};\nconst accountId = props.projectId\n  ? props.projectId\n  : state.isDao\n  ? state.daoAddress\n  : context.accountId;\nconst policy = Near.view(accountId, \"get_policy\", {});\nconst userHasPermissions = useMemo(() => {\n  if (!policy) return true;\n  return doesUserHaveDaoFunctionCallProposalPermissions(policy);\n}, [policy]);\nconst getImageUrlFromSocialImage = (image) => {\n  if (image.url) {\n    return image.url;\n  } else if (image.ipfs_cid) {\n    return IPFS_BASE_URL + image.ipfs_cid;\n  }\n};\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>\n        {children}\n      </ModalContent>\n    </ModalOverlay>\n  );\n};\n// console.log(\"state: \", state);\nconst setSocialData = (accountId, shouldSetTeamMembers) => {\n  Near.asyncView(\"social.near\", \"get\", { keys: [`${accountId}/**`] })\n    .then((socialData) => {\n      console.log(\"socialData: \", socialData);\n      if (!socialData || !socialData[accountId].profile) {\n        State.update({\n          socialDataFetched: true,\n          name: \"\",\n          originalCategories: [],\n          categories: [],\n          description: \"\",\n          website: \"\",\n          twitter: \"\",\n          telegram: \"\",\n          github: \"\",\n          teamMembers: [],\n        });\n        return;\n      }\n      const profileData = socialData[accountId].profile;\n      const backgroundImage = profileData.backgroundImage;\n      const profileImage = profileData.image || \"\";\n      const description = profileData.description || \"\";\n      const publicGoodReason = profileData.plPublicGoodReason || \"\";\n      let categories = [];\n      if (profileData.plCategories) {\n        categories = JSON.parse(profileData.plCategories);\n      } else if (profileData.category) {\n        // old/deprecated version\n        if (typeof profileData.category == \"string\") {\n          const availableCategory =\n            CATEGORY_MAPPINGS[\n              CATEGORY_MAPPINGS._deprecated[profileData.category]\n            ];\n          if (availableCategory) {\n            categories.push(availableCategory);\n          }\n        }\n      }\n      const smartContracts = profileData.plSmartContracts\n        ? Object.entries(JSON.parse(profileData.plSmartContracts)).reduce(\n            (accumulator, [chain, contracts]) => {\n              // Iterate over each contract address in the current chain\n              const contractsForChain = Object.keys(contracts).map(\n                (contractAddress) => {\n                  return [chain, contractAddress]; // Create an array with the chain and contract address\n                }\n              );\n              return accumulator.concat(contractsForChain); // Add the arrays for this chain to the accumulator\n            },\n            []\n          )\n        : [];\n      const hasSmartContracts = smartContracts.length > 0;\n      smartContracts.push([\"\", \"\"]); // Add an empty string to the end of the array to allow for adding new contracts\n      const githubRepos = profileData.plGithubRepos\n        ? JSON.parse(profileData.plGithubRepos).map((repo) => [repo])\n        : [];\n      const originalGithubRepos = githubRepos;\n      githubRepos.push([\"\"]); // Add an empty string to the end of the array to allow for adding new repos\n      const fundingSources = profileData.plFundingSources\n        ? JSON.parse(profileData.plFundingSources)\n        : [];\n      const hasReceivedFunding = fundingSources.length > 0;\n      const linktree = profileData.linktree || {};\n      const twitter = linktree.twitter || \"\";\n      const telegram = linktree.telegram || \"\";\n      const github = linktree.github || \"\";\n      const website = linktree.website || \"\";\n      const team = getTeamMembersFromSocialProfileData(profileData);\n      // update state\n      const stateUpdates = {\n        existingSocialData: socialData[accountId],\n        backgroundImage,\n        profileImage,\n        name: profileData?.name || \"\",\n        description,\n        publicGoodReason,\n        originalCategories: categories,\n        categories,\n        hasSmartContracts,\n        originalSmartContracts: smartContracts,\n        smartContracts,\n        originalGithubRepos,\n        githubRepos,\n        hasReceivedFunding,\n        originalFundingSources: fundingSources,\n        fundingSources,\n        twitter,\n        telegram,\n        github,\n        website,\n        socialDataFetched: true,\n      };\n      if (backgroundImage) {\n        stateUpdates.backgroundImage = backgroundImage;\n      }\n      if (shouldSetTeamMembers) {\n        stateUpdates.teamMembers = team;\n      }\n      State.update(stateUpdates);\n    })\n    .catch((e) => {\n      console.log(\"error getting social data: \", e);\n      State.update({ socialDataFetched: true });\n    });\n};\nuseEffect(() => {\n  if (state.isDao && state.daoAddress) {\n    setSocialData(state.daoAddress, true);\n  } else if (!state.isDao && context.accountId && !state.socialDataFetched) {\n    setSocialData(context.accountId, true);\n  }\n}, [state.socialDataFetched, state.isDao, state.daoAddress, context.accountId]);\nconst isCreateProjectDisabled =\n  state.daoAddressError ||\n  !state.name ||\n  state.nameError ||\n  !state.description ||\n  state.descriptionError ||\n  !state.publicGoodReason ||\n  state.publicGoodReasonError ||\n  (state.categories.includes(CATEGORY_MAPPINGS.OPEN_SOURCE) &&\n    !state.githubRepos.filter((val) => val[0]).length) ||\n  (state.hasSmartContracts && !state.smartContracts.length) || // TODO: REVIEW THIS\n  (state.hasReceivedFunding && !state.fundingSources.length) ||\n  !state.categories.length ||\n  state.categoriesError;\nconst deepObjectDiff = (objOriginal, objUpdated) => {\n  if (!objUpdated) objUpdated = {};\n  let diff = {};\n  function findDiff(original, updated, diffObj) {\n    Object.keys(updated).forEach((key) => {\n      const updatedValue = updated[key];\n      const originalValue = original ? original[key] : undefined;\n      // If both values are objects, recurse.\n      if (\n        typeof updatedValue === \"object\" &&\n        updatedValue !== null &&\n        (originalValue === undefined ||\n          (typeof originalValue === \"object\" && originalValue !== null))\n      ) {\n        const nestedDiff = originalValue\n          ? findDiff(originalValue, updatedValue, {})\n          : updatedValue;\n        if (Object.keys(nestedDiff).length > 0) {\n          diffObj[key] = nestedDiff;\n        }\n      } else if (updatedValue !== originalValue) {\n        // Direct comparison for string values.\n        diffObj[key] = updatedValue;\n      }\n    });\n    return diffObj;\n  }\n  return findDiff(objOriginal, objUpdated, diff);\n};\nconst handleCreateOrUpdateProject = (e) => {\n  if (isCreateProjectDisabled) return;\n  const daoAddressValid = state.isDao\n    ? validateNearAddress(state.daoAddress)\n    : true;\n  if (!daoAddressValid) {\n    State.update({\n      daoAddressError: \"Invalid NEAR account ID\",\n    });\n    return;\n  }\n  // format smart contracts\n  const formattedSmartContracts = state.smartContracts.reduce(\n    (accumulator, [chain, contractAddress]) => {\n      if (!chain || !contractAddress) return accumulator; // Skip empty entries\n      // If the chain doesn't exist in the accumulator, initialize it with an empty object\n      if (!accumulator[chain]) {\n        accumulator[chain] = {};\n      }\n      // Add the contractAddress with an empty string as its value under the chain\n      accumulator[chain][contractAddress] = \"\";\n      return accumulator; // Return the updated accumulator for the next iteration\n    },\n    {}\n  );\n  const socialData = {\n    // basic profile details\n    profile: {\n      name: state.name,\n      plCategories: JSON.stringify(state.categories),\n      description: state.description,\n      plPublicGoodReason: state.publicGoodReason,\n      plSmartContracts: state.hasSmartContracts\n        ? JSON.stringify(formattedSmartContracts)\n        : null,\n      plGithubRepos: JSON.stringify(\n        state.githubRepos.map((repo) => repo[0]).filter((val) => val)\n      ),\n      plFundingSources: JSON.stringify(state.fundingSources),\n      linktree: {\n        website: state.website,\n        twitter: state.twitter,\n        telegram: state.telegram,\n        github: state.github,\n      },\n      plTeam: JSON.stringify(state.teamMembers),\n    },\n    // follow & star Potlock\n    index: {\n      star: {\n        key: {\n          type: \"social\",\n          path: `${ownerId}/widget/Index`,\n        },\n        value: {\n          type: \"star\",\n        },\n      },\n      notify: {\n        key: ownerId,\n        value: {\n          type: \"star\",\n          item: {\n            type: \"social\",\n            path: `${ownerId}/widget/Index`,\n          },\n        },\n      },\n    },\n    graph: {\n      star: {\n        [ownerId]: {\n          widget: {\n            Index: \"\",\n          },\n        },\n      },\n      follow: {\n        [ownerId]: \"\",\n      },\n    },\n  };\n  if (state.backgroundImage) {\n    socialData.profile.backgroundImage = state.backgroundImage;\n  }\n  if (state.profileImage) {\n    socialData.profile.image = state.profileImage;\n  }\n  const diff = deepObjectDiff(state.existingSocialData, socialData);\n  const socialArgs = {\n    data: {\n      [accountId]: diff,\n    },\n  };\n  const potlockRegistryArgs = {\n    list_id: 1, // hardcoding to potlock registry list for now\n  };\n  const horizonArgs = {\n    account_id: state.isDao ? state.daoAddress : context.accountId,\n  };\n  // first, we have to get the account from social.near to see if it exists. If it doesn't, we need to add 0.1N to the deposit\n  Near.asyncView(SOCIAL_CONTRACT_ID, \"get_account\", {\n    account_id: state.isDao ? state.daoAddress : context.accountId,\n  }).then((account) => {\n    const socialTransaction = {\n      contractName: SOCIAL_CONTRACT_ID,\n      methodName: \"set\",\n      args: socialArgs,\n    };\n    let depositFloat = JSON.stringify(socialArgs).length * 0.0001;\n    if (!account) {\n      depositFloat += 0.1;\n    }\n    socialTransaction.deposit = Big(depositFloat).mul(Big(10).pow(24));\n    // instantiate transactions array that we will be passing to Near.call()\n    let transactions = [socialTransaction];\n    // if this is a creation action, we need to add the registry and horizon transactions\n    if (!props.edit) {\n      transactions.push(\n        // register project on potlock\n        {\n          contractName: lists.getContractId(),\n          methodName: \"register_batch\",\n          deposit: Big(0.05).mul(Big(10).pow(24)),\n          args: potlockRegistryArgs,\n        }\n      );\n      if (!existingHorizonProject) {\n        transactions.push(\n          // register on NEAR Horizon\n          {\n            contractName: HORIZON_CONTRACT_ID,\n            methodName: \"add_project\",\n            args: horizonArgs,\n          }\n        );\n      }\n    }\n    // if it is a DAO, we need to convert transactions to DAO function call proposals\n    if (state.isDao) {\n      const clonedTransactions = JSON.parse(JSON.stringify(transactions));\n      transactions = clonedTransactions.map((tx) => {\n        const action = {\n          method_name: tx.methodName,\n          gas: FIFTY_TGAS,\n          deposit: tx.deposit ? tx.deposit.toString() : \"0\",\n          args: Buffer.from(JSON.stringify(tx.args), \"utf-8\").toString(\n            \"base64\"\n          ),\n        };\n        return {\n          ...tx,\n          contractName: state.daoAddress,\n          methodName: \"add_proposal\",\n          args: {\n            proposal: {\n              description: props.edit\n                ? \"Update project on Potlock (via NEAR Social)\"\n                : \"Create project on Potlock (3 steps: Register information on NEAR Social, register on Potlock, and register on NEAR Horizon)\",\n              kind: {\n                FunctionCall: {\n                  receiver_id: tx.contractName,\n                  actions: [action],\n                },\n              },\n            },\n          },\n          deposit: policy.proposal_bond || MIN_PROPOSAL_DEPOSIT_FALLBACK,\n          gas: THREE_HUNDRED_TGAS,\n        };\n      });\n    }\n    Near.call(transactions);\n    // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n    // <---- EXTENSION WALLET HANDLING ---->\n    // poll for updates\n    const pollIntervalMs = 1000;\n    // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n    const pollId = setInterval(() => {\n      // This is an async request, not converting to SDK yet\n      lists.asyncGetRegistration(null, context.accountId).then((_project) => {\n        if (_project) {\n          clearInterval(pollId);\n          State.update({ registrationSuccess: true });\n        }\n      });\n    }, pollIntervalMs);\n  });\n};\nif (props.projectId) {\n  Near.asyncView(props.projectId, \"get_policy\", {}).then((policy) => {\n    if (policy) {\n      State.update({\n        isDao: true,\n        daoAddress: props.projectId,\n        daoAddressTemp: props.projectId,\n      });\n    }\n  });\n}\nconst registeredProject = useMemo(() => {\n  return lists.getRegistration(\n    null,\n    state.isDao ? state.daoAddress : context.accountId\n  );\n}, [state.isDao, state.daoAddress]);\nconsole.log(\"registeredProject: \", registeredProject);\nconst proposals = Near.view(state.daoAddress, \"get_proposals\", {\n  from_index: 0,\n  limit: 1000,\n});\nconst proposalInProgress = useMemo(() => {\n  if (!state.isDao || !state.daoAddress || !proposals) return false;\n  return proposals?.find((proposal) => {\n    return (\n      proposal.status == \"InProgress\" &&\n      proposal.kind.FunctionCall?.receiver_id == lists.getContractId() &&\n      proposal.kind.FunctionCall?.actions[0]?.method_name == \"register\"\n    );\n  });\n}, [state, proposals]);\nconst handleAddTeamMember = () => {\n  let isValid = validateNearAddress(state.teamMember);\n  if (!isValid) {\n    State.update({\n      nearAccountIdError: \"Invalid NEAR account ID\",\n    });\n    return;\n  }\n  if (!state.teamMembers.find((tm) => tm == state.teamMember)) {\n    // update state\n    State.update({\n      teamMembers: [...state.teamMembers, state.teamMember],\n      teamMember: \"\",\n      nearAccountIdError: \"\",\n    });\n  }\n};\nconst FormSectionLeft = (title, description, isRequired) => {\n  return (\n    <FormSectionLeftDiv>\n      <FormSectionTitle>{title}</FormSectionTitle>\n      <FormSectionDescription>{description}</FormSectionDescription>\n      <FormSectionIsRequired\n        style={{\n          color: isRequired ? \"#DD5633\" : \"#7B7B7B\",\n        }}\n      >\n        {isRequired ? \"Required\" : \"Optional\"}\n        {isRequired && (\n          <SvgContainer style={{ top: -6, left: -26 }}>\n            <svg\n              width=\"117\"\n              height=\"31\"\n              viewBox=\"0 0 117 31\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M81.8 3.40116C82.247 3.1908 83.0709 3.13488 82.6 2.60116C81.0461 0.840105 83.0819 0.798833 78.6667 1.22338C65.6302 2.47689 52.5192 4.47997 39.6667 6.95672C31.3106 8.56697 19.0395 10.1936 12.7333 17.09C3.95785 26.6869 29.2286 29.1656 32.9333 29.3567C53.953 30.4413 75.9765 28.9386 96.5111 24.1789C99.8286 23.41 122.546 18.5335 112.733 11.5345C107.621 7.88815 100.796 6.47335 94.7333 5.75672C77.7504 3.74928 60.1141 5.22649 43.2222 7.35671C28.8721 9.16641 14.4138 11.8506 1 17.4012\"\n                stroke=\"#2E2E2E\"\n                stroke-width=\"1.8\"\n                stroke-linecap=\"round\"\n              />\n            </svg>\n          </SvgContainer>\n        )}\n      </FormSectionIsRequired>\n    </FormSectionLeftDiv>\n  );\n};\nconst DeleteIcon = (props) => (\n  <Icon\n    {...props}\n    viewBox=\"0 0 12 14\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M2.5 14C2.0875 14 1.73437 13.8531 1.44062 13.5594C1.14687 13.2656 1 12.9125 1 12.5V2.5H0V1H4V0H8V1H12V2.5H11V12.491C11 12.9137 10.8531 13.2708 10.5594 13.5625C10.2656 13.8542 9.9125 14 9.5 14H2.5ZM9.5 2.5H2.5V12.5H9.5V2.5ZM4 11H5.5V4H4V11ZM6.5 11H8V4H6.5V11Z\"\n      fill=\"#7B7B7B\"\n    />\n  </Icon>\n);\n// if (props.edit && (!registeredProject || !userHasPermissions)) { // TODO: ADD THIS BACK IN\nif (props.edit && !userHasPermissions) {\n  return (\n    <h3 style={{ textAlign: \"center\", paddingTop: \"32px\" }}>Unauthorized</h3>\n  );\n}\nconst uploadFileUpdateState = (body, callback) => {\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body,\n  }).then(callback);\n};\n// console.log(\"state in create form: \", state);\nreturn (\n  <Container>\n    {!state.socialDataFetched || !registrations ? (\n      <div class=\"spinner-border text-secondary\" role=\"status\" />\n    ) : proposalInProgress ? (\n      <Container\n        style={{\n          padding: \"32px 16px\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          wordWrap: \"break-word\",\n        }}\n      >\n        <h1 style={{ textAlign: \"center\" }}>\n          You have a DAO proposal in progress.\n        </h1>\n        <h5 style={{ wordWrap: \"break-word\", textAlign: \"center\" }}>\n          Please come back once voting on your proposal has been completed.\n        </h5>\n        <div\n          style={{\n            fontStyle: \"italic\",\n            fontFamily: \"sans-serif\",\n            wordWrap: \"break-word\",\n            textAlign: \"center\",\n          }}\n        >\n          NB: This proposal consists of 3 steps (individual proposals): Register\n          information on NEAR Social, register on Potlock, and register on NEAR\n          Horizon.\n        </div>\n        <a\n          target=\"_blank\"\n          href={`https://near.org/sking.near/widget/DAO.Page?daoId=${state.daoAddress}&tab=proposal&proposalId=${proposalInProgress.id}`}\n          style={{ marginTop: \"16px\" }}\n        >\n          View DAO Proposal\n        </a>\n      </Container>\n    ) : !props.edit && (registeredProject || state.registrationSuccess) ? (\n      <>\n        <h1 style={{ textAlign: \"center\" }}>You've successfully registered!</h1>\n        <ButtonsContainer>\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              text: \"View your project\",\n              disabled: false,\n              href: props.hrefWithParams(\n                `?tab=project&projectId=${\n                  registeredProject?.id || context.accountId\n                }`\n              ),\n            }}\n          />\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              text: \"View all projects\",\n              disabled: false,\n              href: props.hrefWithParams(`?tab=projects`),\n            }}\n          />\n        </ButtonsContainer>\n      </>\n    ) : (\n      <>\n        <Widget\n          src={`${ownerId}/widget/Profile.BannerHeader`}\n          props={{\n            ...props,\n            projectId:\n              state.isDao && state.daoAddress\n                ? state.daoAddress\n                : context.accountId, // TODO: consider updating to use dao address if available, but will look weird bc no DAOs prob have a banner image on near social\n            // allowEdit: true,\n            backgroundImage: state.backgroundImage,\n            profileImage: state.profileImage,\n            bgImageOnChange: (files) => {\n              if (files) {\n                uploadFileUpdateState(files[0], (res) => {\n                  const ipfs_cid = res.body.cid;\n                  State.update({ backgroundImage: { ipfs_cid } });\n                });\n              }\n            },\n            profileImageOnChange: (files) => {\n              if (files) {\n                uploadFileUpdateState(files[0], (res) => {\n                  const ipfs_cid = res.body.cid;\n                  State.update({ profileImage: { ipfs_cid } });\n                });\n              }\n            },\n            children: (\n              <LowerBannerContainer>\n                <LowerBannerContainerLeft>\n                  <AddTeamMembers\n                    onClick={() =>\n                      State.update({ isMultiAccountModalOpen: true })\n                    }\n                  >\n                    {state.teamMembers.length > 0\n                      ? \"Add or remove team members\"\n                      : \"Add team members\"}\n                  </AddTeamMembers>\n                </LowerBannerContainerLeft>\n                <LowerBannerContainerRight>\n                  <Widget\n                    src={`${ownerId}/widget/Components.AccountsStack`}\n                    props={{\n                      accountIds: state.teamMembers,\n                      sendToBack: state.isMultiAccountModalOpen,\n                    }}\n                  />\n                </LowerBannerContainerRight>\n              </LowerBannerContainer>\n            ),\n          }}\n        />\n        <FormBody>\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Project details\",\n              \"Give an overview of your project including background details and your mission.\",\n              true\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"masterSelector\",\n                  checked: state.isDao,\n                  onClick: (e) => {\n                    State.update({ isDao: e.target.checked });\n                    if (!e.target.checked) {\n                      setSocialData(context.accountId);\n                    } else {\n                      if (state.daoAddress) {\n                        setSocialData(state.daoAddress);\n                      }\n                    }\n                  },\n                  label: \"Register as DAO\",\n                  disabled: props.edit,\n                  containerStyle: {\n                    marginBottom: \"24px\",\n                  },\n                }}\n              />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: state.isDao ? \"DAO address *\" : \"Project ID *\",\n                  value: state.isDao ? state.daoAddressTemp : context.accountId,\n                  disabled: !state.isDao,\n                  onChange: (daoAddress) =>\n                    State.update({\n                      daoAddressTemp: daoAddress.toLowerCase(),\n                      daoAddressError: \"\",\n                    }),\n                  validate: () => {\n                    // **CALLED ON BLUR**\n                    if (state.isDao) {\n                      const isValid = validateNearAddress(state.daoAddressTemp);\n                      if (!isValid) {\n                        State.update({\n                          daoAddressError: \"Invalid NEAR account ID\",\n                        });\n                        return;\n                      }\n                      const NO_PERMISSIONS_ERROR =\n                        \"You do not have required roles for this DAO\";\n                      Near.asyncView(state.daoAddressTemp, \"get_policy\", {})\n                        .then((policy) => {\n                          // console.log(\"policy: \", policy);\n                          // State.update({ registeredProjects: projects });\n                          // Filter the user roles\n                          // TODO: break this out (duplicated in Project.Body)\n                          const userRoles = policy.roles.filter((role) => {\n                            if (role.kind === \"Everyone\") return true;\n                            return (\n                              role.kind.Group &&\n                              role.kind.Group.includes(context.accountId)\n                            );\n                          });\n                          const kind = \"call\";\n                          const action = \"AddProposal\";\n                          // Check if the user is allowed to perform the action\n                          const allowed = userRoles.some(({ permissions }) => {\n                            return (\n                              permissions.includes(`${kind}:${action}`) ||\n                              permissions.includes(`${kind}:*`) ||\n                              permissions.includes(`*:${action}`) ||\n                              permissions.includes(\"*:*\")\n                            );\n                          });\n                          if (!allowed) {\n                            State.update({\n                              daoAddressError: NO_PERMISSIONS_ERROR,\n                            });\n                          } else {\n                            // add all council roles to team (but not current user)\n                            const councilRole = policy.roles.find(\n                              (role) => role.name === \"council\"\n                            );\n                            const councilTeamMembers =\n                              councilRole?.kind?.Group || [];\n                            State.update({\n                              daoAddress: state.daoAddressTemp,\n                              teamMembers: councilTeamMembers,\n                            });\n                          }\n                        })\n                        .catch((e) => {\n                          console.log(\"error getting DAO policy: \", e);\n                          State.update({\n                            daoAddressError: NO_PERMISSIONS_ERROR,\n                          });\n                        });\n                      setSocialData(state.daoAddressTemp, false);\n                    }\n                    State.update({ daoAddressError: \"\" });\n                  },\n                  error: state.isDao ? state.daoAddressError : \"\",\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Project name *\",\n                  placeholder: \"Enter project name\",\n                  value: state.name,\n                  onChange: (name) => State.update({ name }),\n                  validate: () => {\n                    if (state.name.length < 3) {\n                      State.update({\n                        nameError: \"Name must be at least 3 characters\",\n                      });\n                      return;\n                    }\n                    if (state.name.length > 100) {\n                      State.update({\n                        nameError: \"Name must be less than 100 characters\",\n                      });\n                      return;\n                    }\n                    State.update({ nameError: \"\" });\n                  },\n                  error: state.nameError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Overview *\",\n                  placeholder: \"Give a short description of your project\",\n                  value: state.description,\n                  onChange: (description) => State.update({ description }),\n                  validate: () => {\n                    if (state.description.length > 500) {\n                      State.update({\n                        descriptionError:\n                          \"Description must be less than 500 characters\",\n                      });\n                      return;\n                    }\n                    State.update({ descriptionError: \"\" });\n                  },\n                  error: state.descriptionError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Reason for considering yourself a public good *\",\n                  placeholder: \"Type response\",\n                  value: state.publicGoodReason,\n                  onChange: (publicGoodReason) =>\n                    State.update({ publicGoodReason }),\n                  validate: () => {\n                    if (state.publicGoodReason.length > 500) {\n                      State.update({\n                        publicGoodReasonError:\n                          \"Response must be less than 500 characters\",\n                      });\n                      return;\n                    }\n                    State.update({ publicGoodReasonError: \"\" });\n                  },\n                  error: state.publicGoodReasonError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.SelectMultiple`}\n                props={{\n                  label: \"Select category (select multiple) *\",\n                  placeholder: \"Choose category\",\n                  options: Object.values(CATEGORY_MAPPINGS).filter(\n                    (el) => typeof el === \"string\"\n                  ),\n                  onChange: (categories) => {\n                    State.update({\n                      categories,\n                    });\n                  },\n                  selected: state.categories,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"hasSmartContractsSelector\",\n                  checked: state.hasSmartContracts,\n                  onClick: (e) => {\n                    State.update({ hasSmartContracts: e.target.checked });\n                  },\n                  label: \"Yes, my project has smart contracts\",\n                  containerStyle: {\n                    marginBottom: \"16px\",\n                  },\n                }}\n              />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"hasReceivedFundingSelector\",\n                  checked: state.hasReceivedFunding,\n                  onClick: (e) => {\n                    State.update({ hasReceivedFunding: e.target.checked });\n                  },\n                  label: \"Yes, my project has received funding\",\n                  // containerStyle: {\n                  //   marginBottom: \"24px\",\n                  // },\n                }}\n              />\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n          {state.categories.includes(CATEGORY_MAPPINGS.OPEN_SOURCE) && (\n            <>\n              <FormDivider />\n              <FormSectionContainer>\n                {FormSectionLeft(\n                  \"Add Your Repositories\",\n                  \"Add full URLs for specific github repositories so we can track their popularity.\",\n                  true\n                )}\n                <FormSectionRightDiv>\n                  {state.githubRepos.map((repo, index) => {\n                    return (\n                      <Row style={{ marginBottom: \"12px\" }} key={index}>\n                        <Widget\n                          src={`${ownerId}/widget/Inputs.Text`}\n                          props={{\n                            label: \"GitHub Repo URL #\" + (index + 1),\n                            // preInputChildren: <InputPrefix>github.com/</InputPrefix>,\n                            inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                            value: state.githubRepos[index][0],\n                            onChange: (repo) =>\n                              State.update({\n                                githubRepos: state.githubRepos.map((r, i) =>\n                                  i == index ? [repo] : [r[0]]\n                                ),\n                              }),\n                            validate: () => {\n                              // validate link\n                              const isValid = validateGithubRepoUrl(repo);\n                              // if invalid, set the error as the 2nd element of the array\n                              if (!isValid) {\n                                State.update({\n                                  githubRepos: state.githubRepos.map((r, i) =>\n                                    i == index\n                                      ? [r[0], \"Invalid GitHub Repo URL\"]\n                                      : [r[0]]\n                                  ),\n                                });\n                                return;\n                              }\n                            },\n                            error: state.githubRepos[index][1] || \"\",\n                          }}\n                        />\n                        {state.githubRepos.length > 1 && (\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"center\",\n                            }}\n                          >\n                            <DeleteIcon\n                              onClick={() => {\n                                const updatedRepos = state.githubRepos.filter(\n                                  (r, i) => i != index\n                                );\n                                State.update({\n                                  githubRepos: updatedRepos,\n                                });\n                              }}\n                            />\n                          </div>\n                        )}\n                      </Row>\n                    );\n                  })}\n                  <Widget\n                    src={`${ownerId}/widget/Components.Button`}\n                    props={{\n                      type: \"tertiary\",\n                      text: \"Add another repository\",\n                      disabled:\n                        !state.githubRepos[state.githubRepos.length - 1][0],\n                      onClick: () => {\n                        State.update({\n                          githubRepos: [...state.githubRepos, [\"\"]],\n                        });\n                      },\n                    }}\n                  />\n                </FormSectionRightDiv>\n              </FormSectionContainer>\n            </>\n          )}\n          {state.hasSmartContracts && (\n            <>\n              <FormDivider />\n              <FormSectionContainer>\n                {FormSectionLeft(\n                  \"Smart contracts\",\n                  \"Add smart contracts from different chains that belong to your application.\",\n                  true\n                )}\n                <FormSectionRightDiv>\n                  {state.smartContracts.map(\n                    ([chain, contractAddress], index) => {\n                      return (\n                        <Row style={{ marginBottom: \"12px\" }} key={index}>\n                          <Widget\n                            src={`${ownerId}/widget/Inputs.Select`}\n                            props={{\n                              label: \"Add chain\",\n                              noLabel: false,\n                              placeholder: \"Select chain\",\n                              options: Object.keys(CHAIN_OPTIONS).map(\n                                (chain) => ({\n                                  text: chain,\n                                  value: chain,\n                                })\n                              ),\n                              value: {\n                                text: chain,\n                                value: chain,\n                              },\n                              onChange: (chain) => {\n                                const updatedSmartContracts =\n                                  state.smartContracts.map((sc, i) => {\n                                    if (i == index) {\n                                      return [chain.value, sc[1]];\n                                    }\n                                    return sc;\n                                  });\n                                State.update({\n                                  smartContracts: updatedSmartContracts,\n                                });\n                              },\n                            }}\n                          />\n                          <Widget\n                            src={`${ownerId}/widget/Inputs.Text`}\n                            props={{\n                              label: \"Contract address\",\n                              placeholder: \"Enter address\",\n                              value: contractAddress,\n                              onChange: (contractAddress) => {\n                                const updatedSmartContracts =\n                                  state.smartContracts.map((sc, i) => {\n                                    if (i == index) {\n                                      return [sc[0], contractAddress];\n                                    }\n                                    return sc;\n                                  });\n                                State.update({\n                                  smartContracts: updatedSmartContracts,\n                                });\n                              },\n                              validate: () => {\n                                // if NEAR, use validateNearAddress, otherwise if EVM, use validateEvmAddress\n                                const chain = state.smartContracts[index][0];\n                                const isEvm = CHAIN_OPTIONS[chain].isEVM;\n                                const isValid =\n                                  chain == \"NEAR\"\n                                    ? validateNearAddress(contractAddress)\n                                    : isEvm\n                                    ? validateEVMAddress(contractAddress)\n                                    : true; // TODO: validate non-EVM, non-NEAR addresses\n                                // if invalid, set the error as the 3rd element of the array\n                                if (!isValid) {\n                                  State.update({\n                                    smartContracts: state.smartContracts.map(\n                                      (sc, i) => {\n                                        if (i == index) {\n                                          return [\n                                            sc[0],\n                                            sc[1],\n                                            \"Invalid address\",\n                                          ];\n                                        }\n                                        return sc;\n                                      }\n                                    ),\n                                  });\n                                  return;\n                                }\n                              },\n                              error: state.smartContracts[index][2] || \"\",\n                            }}\n                          />\n                          {state.smartContracts.length > 1 && (\n                            <div\n                              style={{\n                                height: \"100%\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <DeleteIcon\n                                onClick={() => {\n                                  const updatedSmartContracts =\n                                    state.smartContracts.filter(\n                                      (sc, i) => i != index\n                                    );\n                                  State.update({\n                                    smartContracts: updatedSmartContracts,\n                                  });\n                                }}\n                              />\n                            </div>\n                          )}\n                        </Row>\n                      );\n                    }\n                  )}\n                  <Widget\n                    src={`${ownerId}/widget/Components.Button`}\n                    props={{\n                      type: \"tertiary\",\n                      text: \"Add another contract\",\n                      disabled:\n                        !state.smartContracts[\n                          state.smartContracts.length - 1\n                        ][0] &&\n                        !state.smartContracts[\n                          state.smartContracts.length - 1\n                        ][1],\n                      onClick: () => {\n                        State.update({\n                          smartContracts: [...state.smartContracts, [\"\", \"\"]],\n                        });\n                      },\n                    }}\n                  />\n                </FormSectionRightDiv>\n              </FormSectionContainer>\n            </>\n          )}\n          {state.hasReceivedFunding && (\n            <>\n              <FormDivider />\n              <FormSectionContainer>\n                {FormSectionLeft(\n                  \"Funding sources\",\n                  \"Add any previous funding you have received.\",\n                  true\n                )}\n                {/* <FormSectionRightDiv>\n                  \n                </FormSectionRightDiv> */}\n              </FormSectionContainer>\n              {state.fundingSources.length > 0 && (\n                <FundingHeader>\n                  {FUNDING_SOURCE_COLUMNS.map((column, index) => (\n                    <FundingHeaderItem>\n                      <FundingHeaderItemText key={index}>\n                        {column}\n                      </FundingHeaderItemText>\n                    </FundingHeaderItem>\n                  ))}\n                </FundingHeader>\n              )}\n              {state.fundingSources.map(\n                (\n                  { investorName, description, amountReceived, denomination },\n                  index\n                ) => {\n                  return (\n                    <TableRow key={index}>\n                      <TableRowItem>\n                        <TableRowText>{investorName}</TableRowText>\n                      </TableRowItem>\n                      <TableRowItem>\n                        <TableRowText>{description}</TableRowText>\n                      </TableRowItem>\n                      <TableRowItem>\n                        <TableRowText>{amountReceived}</TableRowText>\n                      </TableRowItem>\n                      <TableRowItem>\n                        <TableRowText>{denomination}</TableRowText>\n                        {/* <Icon\n                          src={EDIT_ICON_URL}\n                          onClick={() => {\n                            State.update({\n                              fundingSourceIndex: index,\n                            });\n                          }}\n                        /> */}\n                        <DeleteIcon\n                          onClick={() => {\n                            const updatedFundingSources =\n                              state.fundingSources.filter(\n                                (fs, i) => i != index\n                              );\n                            State.update({\n                              fundingSources: updatedFundingSources,\n                            });\n                          }}\n                        />\n                      </TableRowItem>\n                    </TableRow>\n                  );\n                }\n              )}\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"tertiary\",\n                  text: \"Add funding source\",\n                  disabled: state.fundingSources.some(\n                    (fs) =>\n                      !fs.investorName ||\n                      !fs.amountReceived ||\n                      !fs.denomination ||\n                      !fs.description\n                  ),\n                  onClick: () => {\n                    // add new funding source obj & set index\n                    const updatedFundingSources = [\n                      ...state.fundingSources,\n                      {\n                        investorName: \"\",\n                        description: \"\",\n                        amountReceived: \"\",\n                        denomination: \"\",\n                      },\n                    ];\n                    State.update({\n                      fundingSources: updatedFundingSources,\n                      fundingSourceIndex: updatedFundingSources.length - 1,\n                    });\n                  },\n                }}\n              />\n            </>\n          )}\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Social links\",\n              \"Add your project social links to so supporters can connect with you directly.\",\n              false\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Twitter\",\n                  preInputChildren: <InputPrefix>twitter.com/</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.twitter,\n                  onChange: (twitter) =>\n                    State.update({ twitter: twitter.trim() }),\n                  validate: () => {\n                    if (state.twitter.length > 15) {\n                      State.update({\n                        twitterError: \"Invalid Twitter handle\",\n                      });\n                      return;\n                    }\n                    State.update({ twitterError: \"\" });\n                  },\n                  error: state.twitterError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Telegram\",\n                  preInputChildren: <InputPrefix>t.me/</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.telegram,\n                  onChange: (telegram) =>\n                    State.update({ telegram: telegram.trim() }),\n                  validate: () => {\n                    // TODO: add validation?\n                  },\n                  error: state.telegramError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"GitHub\",\n                  preInputChildren: <InputPrefix>github.com/</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.github,\n                  onChange: (github) => State.update({ github: github.trim() }),\n                  validate: () => {\n                    // TODO: add validation\n                  },\n                  error: state.githubError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Website\",\n                  preInputChildren: <InputPrefix>https://</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.website,\n                  onChange: (website) =>\n                    State.update({ website: website.trim() }),\n                  validate: () => {\n                    // TODO: add validation\n                  },\n                  error: state.websiteError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  prefix: \"https://\",\n                  text: props.edit\n                    ? state.isDao\n                      ? \"Add proposal to update project\"\n                      : \"Update your project\"\n                    : state.isDao\n                    ? \"Add proposal to create project\"\n                    : \"Create new project\",\n                  disabled: isCreateProjectDisabled,\n                  onClick: handleCreateOrUpdateProject,\n                }}\n              />\n              <Space height={24} />\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n        </FormBody>\n        <Widget\n          src={`${ownerId}/widget/Components.ModalMultiAccount`}\n          props={{\n            ...props,\n            isModalOpen: state.isMultiAccountModalOpen,\n            onClose: () => State.update({ isMultiAccountModalOpen: false }),\n            titleText: \"Add team members\",\n            descriptionText: \"Add NEAR account IDs for your team members.\",\n            inputValue: state.teamMember,\n            onInputChange: (teamMember) => {\n              State.update({ teamMember, nearAccountIdError: \"\" });\n            },\n            handleAddAccount: handleAddTeamMember,\n            handleRemoveAccount: (accountId) => {\n              State.update({\n                teamMembers: state.teamMembers.filter((tm) => tm != accountId),\n              });\n            },\n            accountError: state.nearAccountIdError,\n            accountIds: state.teamMembers,\n            unitText: \"member\",\n          }}\n        />\n        <Widget\n          src={`${ownerId}/widget/Project.ModalAddFundingSource`}\n          props={{\n            ...props,\n            isModalOpen: state.fundingSourceIndex !== null,\n            onClose: () => {\n              // remove any funding sources with all empty values\n              // console.log(\"state.fundingSources line 1660: \", state.fundingSources);\n              const updatedFundingSources = state.fundingSources.filter(\n                (fs) =>\n                  fs.investorName &&\n                  fs.amountReceived &&\n                  fs.denomination &&\n                  fs.description\n              );\n              // console.log(\"updatedFundingSources: \", updatedFundingSources);\n              State.update({\n                fundingSources: updatedFundingSources,\n                fundingSourceIndex: null,\n              });\n            },\n            fundingSources: state.fundingSources,\n            fundingSourceIndex: state.fundingSourceIndex,\n            handleAddFundingSource: ({\n              investorName,\n              description,\n              amountReceived,\n              denomination,\n            }) => {\n              const updatedFundingSources = state.fundingSources.map(\n                (fs, i) => {\n                  if (i == state.fundingSourceIndex) {\n                    return {\n                      investorName,\n                      description,\n                      amountReceived,\n                      denomination,\n                    };\n                  }\n                  return fs;\n                }\n              );\n              State.update({\n                fundingSources: updatedFundingSources,\n                fundingSourceIndex: null,\n              });\n            },\n          }}\n        />\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.CreateForm", "fact_widget_deployments_id": "9b7f7d39265702fcbd87ff3b59597389", "inserted_timestamp": "2024-03-27T17:31:11.616Z", "modified_timestamp": "2024-03-27T17:31:11.616Z", "__row_index": 36}