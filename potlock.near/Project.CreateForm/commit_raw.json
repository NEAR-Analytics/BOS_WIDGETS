{"tx_hash": "YwegmR3jmM6SrwaGkL4QZbfngQ7Bk5vi2ig4LhYtFae", "action_id_social": "7weG88zoaSF7fRncXFyU8DU5EU2Qmd9VLix2XyxZJz7w-0-widget", "block_id": 104332807, "block_timestamp": "2023-10-27T18:42:40.968Z", "signer_id": "potlock.near", "widget_name": "Project.CreateForm", "source_code": "const ownerId = \"potlock.near\";\nconst registryId = \"registry.potlock.near\";\nconst horizonId = \"nearhorizon.near\";\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\n// const DEFAULT_BANNER_IMAGE_URL =\n//   IPFS_BASE_URL + \"bafkreih4i6kftb34wpdzcuvgafozxz6tk6u4f5kcr2gwvtvxikvwriteci\";\n// const DEFAULT_PROFILE_IMAGE_URL =\n//   IPFS_BASE_URL + \"bafkreifel4bfm6hxmklcsqjilk3bhvi3acf2rxqepcgglluhginbttkyqm\";\nconst ADD_TEAM_MEMBERS_ICON_URL =\n  IPFS_BASE_URL + \"bafkreig6c7m2z2lupreu2br4pm3xx575mv6uvmuy2qkij4kzzfpt7tipcq\";\nconst CLOSE_ICON_URL =\n  IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\n\nconst NEAR_ACCOUNT_ID_REGEX = /^(?=.{2,64}$)(?!.*\\.\\.)(?!.*-$)(?!.*_$)[a-z\\d._-]+$/i;\n\nconst MAX_TEAM_MEMBERS_DISPLAY_COUNT = 5;\n\nif (!context.accountId) {\n  return (\n    <Widget\n      src={`${ownerId}/widget/InfoSegment`}\n      props={{\n        title: \"Not logged in!\",\n        description: \"You must log in to create a new project!\",\n      }}\n    />\n  );\n}\n\nconst existingHorizonProject = Near.view(horizonId, \"get_project\", {\n  account_id: context.accountId,\n});\n\nconst projects = Near.view(registryId, \"get_projects\", {});\n\nconst imageHeightPx = 120;\nconst profileImageTranslateYPx = 220;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 72px 64px 72px 64px;\n`;\n\nconst LowerBannerContainer = styled.div`\n  position: absolute;\n  bottom: -210px;\n  left: 0px;\n  display: flex;\n  align-items: stretch; /* Ensuring child elements stretch to full height */\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst LowerBannerContainerLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  margin-left: 190px;\n`;\n\nconst LowerBannerContainerRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: flex-end; /* Pushes TeamContainer to the bottom */\n  flex: 1;\n  // background: yellow;\n`;\n\nconst TeamContainer = styled.div`\n  width: 200px;\n  height: 30px;\n  // background: green;\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: row;\n  // gap: -40px;\n`;\n\nconst AddTeamMembers = styled.a`\n  margin: 0px 0px 16px 36px;\n  cursor: pointer;\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 148px 0 148px;\n  width: 100%;\n`;\n\nconst FormDivider = styled.div`\n  height: 2px;\n  width: 100%;\n  background-color: #ebebeb;\n`;\n\nconst FormSectionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 160px;\n  margin: 48px 0 48px 0;\n`;\n\nconst FormSectionLeftDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: yellow;\n  gap: 16px;\n`;\n\nconst FormSectionRightDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: lightblue;\n`;\n\nconst FormSectionTitle = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 600;\n  word-wrap: break-word;\n`;\n\nconst FormSectionDescription = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 400;\n  word-wrap: break-word;\n`;\n\nconst FormSectionIsRequired = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  word-wrap: break-word;\n  position: relative;\n`;\n\nconst SvgContainer = styled.div`\n  position: absolute;\n  top: -6;\n  left: -26;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 32px;\n  margin-top: 32px;\n`;\n\nconst Space = styled.div`\n  height: ${(props) => props.height}px;\n`;\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  // padding-top: 30vh;\n`;\n\nconst ModalContent = styled.div`\n  border-radius: 14px;\n  // width: 60%;\n  padding: 32px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  // z-index: 1000;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 24px;\n`;\n\nconst ModalHeaderLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst IconContainer = styled.div`\n  width: 40px;\n  height: 40px;\n  background: #f0f0f0;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 16px;\n`;\n\nconst Icon = styled.img`\n  width: 24px;\n  height: 24px;\n  cursor: ${(props) => (props.cursor ? props.cursor : \"default\")};\n`;\n\nconst ModalTitle = styled.div`\n  font-color: #2e2e2e;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nconst ModalDescription = styled.p`\n  font-color: #2e2e2e;\n  font-size: 16px;\n  font-weight: 400;\n=`;\n\nconst MembersCount = styled.span`\n  color: #2e2e2e;\n  font-weight: 600;\n`;\n\nconst MembersText = styled.div`\n  color: #7b7b7b;\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nconst MembersListItem = styled.div`\n  padding: 16px 0px;\n  border-top: 1px #f0f0f0 solid;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RemoveMember = styled.a`\n  color: #2e2e2e;\n  font-size: 14px;\n  font-weight: 600;\n  visibility: hidden;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  ${MembersListItem}:hover & {\n    visibility: visible;\n    opacity: 1;\n  }\n`;\n\nconst MembersListItemLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 16px;\n`;\n\nconst MembersListItemText = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #2e2e2e;\n`;\n\nconst MoreTeamMembersContainer = styled.div`\n  width: 28px;\n  height: 28px;\n  border: 2px solid white;\n  border-radius: 50%;\n  background: #dd3345;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: ${(props) => props.zIndex};\n  margin-right: -8px;\n`;\n\nconst MoreTeamMembersText = styled.div`\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nState.init({\n  name: \"\",\n  nameError: \"\",\n  category: null,\n  categoryError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  website: \"\",\n  websiteError: \"\",\n  twitter: \"\",\n  twitterError: \"\",\n  telegram: \"\",\n  telegramError: \"\",\n  github: \"\",\n  githubError: \"\",\n  socialDataFetched: false,\n  socialDataIsFetching: false,\n  registeredProjects: null,\n  getRegisteredProjectsError: \"\",\n  isModalOpen: false,\n  teamMember: \"\",\n  teamMembers: [],\n  nearAccountIdError: \"\",\n});\n\nconst getImageUrlFromSocialImage = (image) => {\n  if (image.url) {\n    return image.url;\n  } else if (image.ipfs_cid) {\n    return IPFS_BASE_URL + image.ipfs_cid;\n  }\n};\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>{children}</ModalContent>\n    </ModalOverlay>\n  );\n};\n\nif (context.accountId && !state.socialDataFetched) {\n  Near.asyncView(\"social.near\", \"get\", { keys: [`${context.accountId}/profile/**`] })\n    .then((socialData) => {\n      if (!socialData) return;\n      const profileData = socialData[context.accountId].profile;\n      if (!profileData) return;\n      // description\n      let description = profileData.description || \"\";\n      // linktree\n      const linktree = profileData.linktree || {};\n      const twitter = linktree.twitter || \"\";\n      const telegram = linktree.telegram || \"\";\n      const github = linktree.github || \"\";\n      const website = linktree.website || \"\";\n      // team\n      const team = profileData.team || {};\n      // update state\n      State.update({\n        name: profileData?.name || \"\",\n        description,\n        twitter,\n        telegram,\n        github,\n        website,\n        socialDataFetched: true,\n        teamMembers: Object.keys(team).map((accountId) => ({\n          accountId,\n          imageUrl: DEFAULT_PROFILE_IMAGE_URL, // TODO: fetch actual image from near social. or better, move ProfileImage to its own component that handles the social data fetching\n        })),\n      });\n    })\n    .catch((e) => {\n      console.log(\"error getting social data: \", e);\n      State.update({ socialDataFetched: true });\n    });\n}\n\nif (context.accountId && !state.registeredProjects) {\n  Near.asyncView(registryId, \"get_projects\", {})\n    .then((projects) => {\n      State.update({ registeredProjects: projects });\n    })\n    .catch((e) => {\n      console.log(\"error getting projects: \", e);\n      State.update({ getRegisteredProjectsError: e });\n    });\n}\n\nconst isCreateProjectDisabled =\n  !state.name ||\n  state.nameError ||\n  !state.description ||\n  state.descriptionError ||\n  !state.category ||\n  state.categoryError;\n\nconst handleCreateProject = (e) => {\n  if (isCreateProjectDisabled) return;\n  const socialArgs = {\n    data: {\n      [context.accountId]: {\n        profile: {\n          name: state.name,\n          category: state.category, // TODO: consider changing format of this for consistency with near horizon\n          description: state.description,\n          linktree: {\n            website: state.website,\n            twitter: state.twitter,\n            telegram: state.telegram,\n            github: state.github,\n          },\n          team: state.teamMembers.reduce((acc, tm) => ({ ...acc, [tm.accountId]: \"\" }), {}),\n        },\n      },\n    },\n  };\n  const potlockRegistryArgs = {};\n  const horizonArgs = { account_id: context.accountId };\n  const transactions = [\n    // set data on social.near\n    {\n      contractName: \"social.near\",\n      methodName: \"set\",\n      deposit: Big(JSON.stringify(socialArgs).length * 16).mul(Big(10).pow(20)),\n      args: socialArgs,\n    },\n  ];\n  if (!props.edit) {\n    transactions.push(\n      // register project on potlock\n      {\n        contractName: registryId,\n        methodName: \"register\",\n        deposit: Big(JSON.stringify(potlockRegistryArgs).length * 16).mul(Big(10).pow(20)), // TODO: update this, it isn't correct\n        args: potlockRegistryArgs,\n      }\n    );\n    if (!existingHorizonProject) {\n      transactions.push(\n        // register on NEAR Horizon\n        {\n          contractName: horizonId,\n          methodName: \"add_project\",\n          args: horizonArgs,\n        }\n      );\n    }\n  }\n  Near.call(transactions);\n};\n\nconst registeredProject = state.registeredProjects\n  ? state.registeredProjects?.find(\n      (project) => project.id == context.accountId && project.status == \"Approved\"\n    )\n  : null;\n\nconst handleAddTeamMember = () => {\n  let isValid = NEAR_ACCOUNT_ID_REGEX.test(state.teamMember);\n  // Additional \".near\" check for IDs less than 64 characters\n  if (state.teamMember.length < 64 && !state.teamMember.endsWith(\".near\")) {\n    isValid = false;\n  }\n  if (!isValid) {\n    State.update({\n      nearAccountIdError: \"Invalid NEAR account ID\",\n    });\n    return;\n  }\n  // TODO:\n  if (!state.teamMembers.find((tm) => tm.accountId == state.teamMember)) {\n    // get data from social.near\n    const profileImageUrl = DEFAULT_PROFILE_IMAGE_URL;\n    const fullTeamMember = {\n      accountId: state.teamMember.toLowerCase(),\n      imageUrl: profileImageUrl,\n    };\n    Near.asyncView(\"social.near\", \"get\", { keys: [`${state.teamMember}/profile/**`] })\n      .then((socialData) => {\n        if (socialData) {\n          const profileData = socialData[state.teamMember].profile;\n          if (!profileData) return;\n          // get profile image URL\n          if (profileData.image) {\n            const imageUrl = getImageUrlFromSocialImage(profileData.image);\n            if (imageUrl) fullTeamMember.imageUrl = imageUrl;\n          }\n        }\n      })\n      .catch((e) => {\n        console.log(\"error getting social data: \", e);\n      })\n      .finally(() => {\n        State.update({\n          teamMembers: [...state.teamMembers, fullTeamMember],\n          teamMember: \"\",\n          nearAccountIdError: \"\",\n        });\n      });\n  }\n};\n\nconst FormSectionLeft = (title, description, isRequired) => {\n  return (\n    <FormSectionLeftDiv>\n      <FormSectionTitle>{title}</FormSectionTitle>\n      <FormSectionDescription>{description}</FormSectionDescription>\n      <FormSectionIsRequired\n        style={{\n          color: isRequired ? \"#DD5633\" : \"#7B7B7B\",\n        }}\n      >\n        {isRequired ? \"Required\" : \"Optional\"}\n        {isRequired && (\n          <SvgContainer style={{ top: -6, left: -26 }}>\n            <svg\n              width=\"117\"\n              height=\"31\"\n              viewBox=\"0 0 117 31\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M81.8 3.40116C82.247 3.1908 83.0709 3.13488 82.6 2.60116C81.0461 0.840105 83.0819 0.798833 78.6667 1.22338C65.6302 2.47689 52.5192 4.47997 39.6667 6.95672C31.3106 8.56697 19.0395 10.1936 12.7333 17.09C3.95785 26.6869 29.2286 29.1656 32.9333 29.3567C53.953 30.4413 75.9765 28.9386 96.5111 24.1789C99.8286 23.41 122.546 18.5335 112.733 11.5345C107.621 7.88815 100.796 6.47335 94.7333 5.75672C77.7504 3.74928 60.1141 5.22649 43.2222 7.35671C28.8721 9.16641 14.4138 11.8506 1 17.4012\"\n                stroke=\"#2E2E2E\"\n                stroke-width=\"1.8\"\n                stroke-linecap=\"round\"\n              />\n            </svg>\n          </SvgContainer>\n        )}\n      </FormSectionIsRequired>\n    </FormSectionLeftDiv>\n  );\n};\n\nif (props.edit && !registeredProject) {\n  return <div style={{ textAlign: \"center\", paddingTop: \"12px\" }}>Unauthorized</div>;\n}\n\nreturn (\n  <Container>\n    {!state.socialDataFetched || !projects ? (\n      <div class=\"spinner-border text-secondary\" role=\"status\" />\n    ) : registeredProject ? (\n      <Container>\n        <h1 style={{ textAlign: \"center\" }}>You've successfully registered!</h1>\n        <ButtonsContainer>\n          <Widget\n            src={`${ownerId}/widget/Buttons.NavigationButton`}\n            props={{\n              type: \"primary\",\n              text: \"View your project\",\n              disabled: false,\n              href: `?tab=project&projectId=${registeredProject.id}`,\n            }}\n          />\n          <Widget\n            src={`${ownerId}/widget/Buttons.NavigationButton`}\n            props={{\n              type: \"secondary\",\n              text: \"View all projects\",\n              disabled: false,\n              href: `?tab=projects`,\n            }}\n          />\n        </ButtonsContainer>\n      </Container>\n    ) : (\n      <>\n        <Widget\n          src={`${ownerId}/widget/Project.BannerHeader`}\n          props={{\n            ...props,\n            projectId: context.accountId,\n            profileImageTranslateYPx,\n            containerStyle: {\n              paddingLeft: \"64px\",\n            },\n            backgroundStyle: {\n              objectFit: \"cover\",\n              left: 0,\n              top: 0,\n              height: \"280px\",\n              borderRadius: \"6px\",\n            },\n            imageStyle: {\n              width: `${imageHeightPx}px`,\n              height: `${imageHeightPx}px`,\n            },\n            children: (\n              <LowerBannerContainer>\n                <LowerBannerContainerLeft>\n                  <AddTeamMembers onClick={() => State.update({ isModalOpen: true })}>\n                    {state.teamMembers.length > 0\n                      ? \"Add or remove team members\"\n                      : \"Add team members\"}\n                  </AddTeamMembers>\n                </LowerBannerContainerLeft>\n                <LowerBannerContainerRight>\n                  <TeamContainer>\n                    {state.teamMembers.length > MAX_TEAM_MEMBERS_DISPLAY_COUNT && (\n                      <MoreTeamMembersContainer zIndex={state.teamMembers.length + 1}>\n                        <MoreTeamMembersText>{MAX_TEAM_MEMBERS_DISPLAY_COUNT}+</MoreTeamMembersText>\n                      </MoreTeamMembersContainer>\n                    )}\n                    {state.teamMembers\n                      .slice(0, MAX_TEAM_MEMBERS_DISPLAY_COUNT)\n                      .map((teamMember, idx) => {\n                        return (\n                          <Widget\n                            src=\"mob.near/widget/ProfileImage\"\n                            props={{\n                              accountId: teamMember.accountId,\n                              style: {\n                                width: \"28px\",\n                                height: \"28px\",\n                                zIndex: state.teamMembers.length - idx,\n                                margin: \"0 -8px 0 0\",\n                                border: \"2px solid white\",\n                                borderRadius: \"50%\",\n                                background: \"white\",\n                              },\n                              className: \"mb-2\",\n                              imageClassName: \"rounded-circle w-100 h-100 d-block\",\n                              thumbnail: false,\n                              tooltip: true,\n                            }}\n                          />\n                        );\n                      })}\n                  </TeamContainer>\n                </LowerBannerContainerRight>\n              </LowerBannerContainer>\n            ),\n          }}\n        />\n        <FormBody style={{ padding: `${profileImageTranslateYPx + 40}px 68px` }}>\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Project details\",\n              \"Give an overview of your project including background details and your mission.\",\n              true\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Project ID *\",\n                  value: context.accountId,\n                  disabled: true,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Project name *\",\n                  placeholder: \"Enter project name\",\n                  value: state.name,\n                  onChange: (name) => State.update({ name }),\n                  validate: () => {\n                    if (state.name.length < 3) {\n                      State.update({ nameError: \"Name must be at least 3 characters\" });\n                      return;\n                    }\n\n                    if (state.name.length > 100) {\n                      State.update({\n                        nameError: \"Name must be less than 100 characters\",\n                      });\n                      return;\n                    }\n\n                    State.update({ nameError: \"\" });\n                  },\n                  error: state.nameError,\n                }}\n              />\n              <Space height={24} />\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Overview *\",\n                  placeholder: \"Give a short description of your project\",\n                  value: state.description,\n                  onChange: (description) => State.update({ description }),\n                  validate: () => {\n                    if (state.description.length > 500) {\n                      State.update({\n                        descriptionError: \"Description must be less than 500 characters\",\n                      });\n                      return;\n                    }\n\n                    State.update({ descriptionError: \"\" });\n                  },\n                  error: state.descriptionError,\n                }}\n              />\n              <Space height={24} />\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.Select`}\n                props={{\n                  label: \"Select category *\",\n                  noLabel: false,\n                  placeholder: \"Choose category\",\n                  options: [\n                    // Social Impact, NonProfit, Climate, Public Good\n                    { text: \"Social Impact\", value: \"social-impact\" },\n                    { text: \"NonProfit\", value: \"non-profit\" },\n                    { text: \"Climate\", value: \"climate\" },\n                    { text: \"Public Good\", value: \"public-good\" },\n                    { text: \"DeSci\", value: \"de-sci\" },\n                    { text: \"Open Source\", value: \"open-source\" },\n                    { text: \"Community\", value: \"community\" },\n                    { text: \"Education\", value: \"education\" },\n                  ],\n                  value: state.category,\n                  onChange: (category) =>\n                    State.update({\n                      category,\n                    }),\n                  validate: () => {\n                    if (!state.category) {\n                      State.update({\n                        categoryError: \"Please select a category\",\n                      });\n                    }\n                  },\n                  error: state.categoryError,\n                }}\n              />\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Social links\",\n              \"Add your project social links to so supporters can connect with you directly.\",\n              false\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Twitter\",\n                  prefix: \"twitter.com/\",\n                  // placeholder: \"your-twitter-username\",\n                  value: state.twitter,\n                  onChange: (twitter) => State.update({ twitter }),\n                  validate: () => {\n                    if (state.twitter.length > 15) {\n                      State.update({\n                        twitterError: \"Invalid Twitter handle\",\n                      });\n                      return;\n                    }\n                    State.update({ twitterError: \"\" });\n                  },\n                  error: state.twitterError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Telegram\",\n                  prefix: \"t.me/\",\n                  // placeholder: \"your-telegram-id\",\n                  value: state.telegram,\n                  onChange: (telegram) => State.update({ telegram }),\n                  validate: () => {\n                    // TODO: add validation\n                  },\n                  error: state.telegramError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"GitHub\",\n                  prefix: \"github.com/\",\n                  // placeholder: \"your-github-\",\n                  value: state.github,\n                  onChange: (github) => State.update({ github }),\n                  validate: () => {\n                    // TODO: add validation\n                  },\n                  error: state.githubError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Buttons.ActionButton`}\n                props={{\n                  type: \"primary\",\n                  prefix: \"https://\",\n                  text: props.edit ? \"Update your project\" : \"Create new project\",\n                  disabled: isCreateProjectDisabled,\n                  onClick: handleCreateProject,\n                }}\n              />\n              <Space height={24} />\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n        </FormBody>\n        <Modal isOpen={state.isModalOpen} onClose={() => State.update({ isModalOpen: false })}>\n          <ModalHeader>\n            <ModalHeaderLeft>\n              <IconContainer>\n                <Icon src={ADD_TEAM_MEMBERS_ICON_URL} />\n              </IconContainer>\n              <ModalTitle>Add team members</ModalTitle>\n            </ModalHeaderLeft>\n            <Icon\n              cursor={\"pointer\"}\n              src={CLOSE_ICON_URL}\n              onClick={() => State.update({ isModalOpen: false })}\n            />\n          </ModalHeader>\n          <ModalDescription>Add NEAR account IDs for your team members.</ModalDescription>\n          <Widget\n            src={`${ownerId}/widget/Inputs.Text`}\n            props={{\n              // label: \"Project name *\",\n              placeholder: \"NEAR account ID\",\n              value: state.teamMember,\n              onChange: (teamMember) => {\n                State.update({ teamMember, nearAccountIdError: \"\" });\n              },\n              buttonText: \"Add\",\n              submit: true,\n              onClick: handleAddTeamMember,\n              handleKeyPress: (e) => {\n                if (e.key === \"Enter\") {\n                  handleAddTeamMember();\n                }\n              },\n              error: state.nearAccountIdError,\n            }}\n          />\n          <Space height={24} />\n          <MembersText>\n            <MembersCount>{state.teamMembers.length} </MembersCount>\n            {state.teamMembers.length == 1 ? \"member\" : \"members\"}\n          </MembersText>\n          {state.teamMembers.map((teamMember) => {\n            return (\n              <MembersListItem>\n                <MembersListItemLeft>\n                  <Widget\n                    src=\"mob.near/widget/ProfileImage\"\n                    props={{\n                      accountId: teamMember.accountId,\n                      style: {\n                        width: \"40px\",\n                        height: \"40px\",\n                        margin: \"0 -8px 0 0\",\n                        borderRadius: \"50%\",\n                        background: \"white\",\n                      },\n                      imageClassName: \"rounded-circle w-100 h-100 d-block\",\n                      thumbnail: false,\n                      tooltip: true,\n                    }}\n                  />\n                  <MembersListItemText>@{teamMember.accountId}</MembersListItemText>\n                </MembersListItemLeft>\n                <RemoveMember\n                  onClick={() => {\n                    State.update({\n                      teamMembers: state.teamMembers.filter(\n                        (member) => member.accountId != teamMember.accountId\n                      ),\n                    });\n                  }}\n                >\n                  Remove\n                </RemoveMember>\n              </MembersListItem>\n            );\n          })}\n        </Modal>\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.CreateForm", "fact_widget_deployments_id": "52eb6ff472ea99eae503eeda99456d41", "inserted_timestamp": "2023-10-27T20:38:59.313Z", "modified_timestamp": "2023-10-27T20:38:59.313Z", "__row_index": 5}