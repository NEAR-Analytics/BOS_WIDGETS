{"tx_hash": "5qk6f2zb3GHFAwzoywcg7aZXxqPCn2nNra72Psq3kXLn", "action_id_social": "GbkCTMa1RYRuJtNkPyyr9R4SD37VVCdmgGApLGGbJb4z-0-widget", "block_id": 107002460, "block_timestamp": "2023-12-02T15:16:05.722Z", "signer_id": "potlock.near", "widget_name": "Project.CreateForm", "source_code": "const ownerId = \"potlock.near\";\nconst REGISTRY_CONTRACT_ID = \"registry.potlock.near\";\nconst HORIZON_CONTRACT_ID = \"nearhorizon.near\";\nconst SOCIAL_CONTRACT_ID = \"social.near\";\n\nBig.PE = 100;\nconst FIFTY_TGAS = \"50000000000000\";\nconst THREE_HUNDRED_TGAS = \"300000000000000\";\nconst MIN_PROPOSAL_DEPOSIT = \"100000000000000000000000\"; // 0.1N\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst DEFAULT_BANNER_IMAGE_CID = \"bafkreih4i6kftb34wpdzcuvgafozxz6tk6u4f5kcr2gwvtvxikvwriteci\";\n// const DEFAULT_BANNER_IMAGE_URL =\n//   IPFS_BASE_URL + \"bafkreih4i6kftb34wpdzcuvgafozxz6tk6u4f5kcr2gwvtvxikvwriteci\";\n// const DEFAULT_PROFILE_IMAGE_URL =\n//   IPFS_BASE_URL + \"bafkreifel4bfm6hxmklcsqjilk3bhvi3acf2rxqepcgglluhginbttkyqm\";\nconst ADD_TEAM_MEMBERS_ICON_URL =\n  IPFS_BASE_URL + \"bafkreig6c7m2z2lupreu2br4pm3xx575mv6uvmuy2qkij4kzzfpt7tipcq\";\nconst CLOSE_ICON_URL =\n  IPFS_BASE_URL + \"bafkreifyg2vvmdjpbhkylnhye5es3vgpsivhigkjvtv2o4pzsae2z4vi5i\";\n\nconst MAX_TEAM_MEMBERS_DISPLAY_COUNT = 5;\n\nif (!context.accountId) {\n  return (\n    <Widget\n      src={`${ownerId}/widget/Components.InfoSegment`}\n      props={{\n        title: \"Not logged in!\",\n        description: \"You must log in to create a new project!\",\n      }}\n    />\n  );\n}\n\nconst existingHorizonProject = Near.view(HORIZON_CONTRACT_ID, \"get_project\", {\n  account_id: context.accountId,\n});\n\nconst projects = Near.view(REGISTRY_CONTRACT_ID, \"get_projects\", {});\n\nconst imageHeightPx = 120;\nconst profileImageTranslateYPx = 220;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 72px 64px 72px 64px;\n\n  @media screen and (max-width: 768px) {\n    padding: 0px;\n  }\n`;\n\nconst LowerBannerContainer = styled.div`\n  position: absolute;\n  bottom: -250px;\n  left: 0px;\n  display: flex;\n  align-items: stretch; /* Ensuring child elements stretch to full height */\n  justify-content: space-between;\n  width: 100%;\n\n  // background: green;\n\n  @media screen and (max-width: 768px) {\n    bottom: -310px;\n  }\n`;\n\nconst LowerBannerContainerLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  margin-left: 190px;\n  // background: yellow;\n\n  @media screen and (max-width: 768px) {\n    margin-left: 0px;\n  }\n`;\n\nconst LowerBannerContainerRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: flex-end; /* Pushes TeamContainer to the bottom */\n  flex: 1;\n`;\n\nconst TeamContainer = styled.div`\n  width: 200px;\n  height: 30px;\n  // background: green;\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: row;\n  // gap: -40px;\n`;\n\nconst AddTeamMembers = styled.a`\n  margin: 0px 0px 16px 36px;\n  cursor: pointer;\n  color: #dd3345;\n  font-size: 14px;\n  font-weight: 600;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 260px 68px 32px 68px;\n  width: 100%;\n\n  @media screen and (max-width: 768px) {\n    padding: 320px 32px 32px 32px;\n  }\n`;\n\nconst FormDivider = styled.div`\n  height: 2px;\n  width: 100%;\n  background-color: #ebebeb;\n`;\n\nconst FormSectionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 160px;\n  margin: 48px 0 48px 0;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    gap: 32px;\n  }\n`;\n\nconst FormSectionLeftDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: yellow;\n  gap: 16px;\n`;\n\nconst FormSectionRightDiv = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  // background-color: lightblue;\n`;\n\nconst FormSectionTitle = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 600;\n  word-wrap: break-word;\n`;\n\nconst FormSectionDescription = styled.div`\n  color: #2e2e2e;\n  font-size: 16;\n  font-weight: 400;\n  word-wrap: break-word;\n`;\n\nconst FormSectionIsRequired = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  word-wrap: break-word;\n  position: relative;\n`;\n\nconst SvgContainer = styled.div`\n  position: absolute;\n  top: -6;\n  left: -26;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  gap: 32px;\n  margin-top: 32px;\n`;\n\nconst Space = styled.div`\n  height: ${(props) => props.height}px;\n`;\n\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  // padding-top: 30vh;\n`;\n\nconst ModalContent = styled.div`\n  border-radius: 14px;\n  // width: 60%;\n  padding: 32px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 24px;\n`;\n\nconst ModalHeaderLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst IconContainer = styled.div`\n  width: 40px;\n  height: 40px;\n  background: #f0f0f0;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 16px;\n`;\n\nconst Icon = styled.img`\n  width: 24px;\n  height: 24px;\n  cursor: ${(props) => (props.cursor ? props.cursor : \"default\")};\n`;\n\nconst ModalTitle = styled.div`\n  font-color: #2e2e2e;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nconst ModalDescription = styled.p`\n  font-color: #2e2e2e;\n  font-size: 16px;\n  font-weight: 400;\n=`;\n\nconst MembersCount = styled.span`\n  color: #2e2e2e;\n  font-weight: 600;\n`;\n\nconst MembersText = styled.div`\n  color: #7b7b7b;\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nconst MembersListItem = styled.div`\n  padding: 16px 0px;\n  border-top: 1px #f0f0f0 solid;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RemoveMember = styled.a`\n  color: #2e2e2e;\n  font-size: 14px;\n  font-weight: 600;\n  visibility: hidden;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  ${MembersListItem}:hover & {\n    visibility: visible;\n    opacity: 1;\n  }\n`;\n\nconst MembersListItemLeft = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 16px;\n`;\n\nconst MembersListItemText = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  color: #2e2e2e;\n`;\n\nconst MoreTeamMembersContainer = styled.div`\n  width: 28px;\n  height: 28px;\n  border: 2px solid white;\n  border-radius: 50%;\n  background: #dd3345;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: ${(props) => props.zIndex};\n  margin-right: -8px;\n`;\n\nconst MoreTeamMembersText = styled.div`\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst InputPrefix = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  text-align: center;\n  padding: 14px 16px;\n  border-right: 1px #f0f0f0 solid;\n  color: #7b7b7b;\n  font-size: 16px;\n  font-weight: 400;\n  box-shadow: 0px -2px 0px rgba(93, 93, 93, 0.24) inset;\n`;\n\nState.init({\n  isDao: false,\n  daoAddressTemp: \"\", // used while input is focused\n  daoAddress: \"\", // set on input blur\n  daoAddressError: \"\",\n  backgroundImage: {\n    ipfs_cid: DEFAULT_BANNER_IMAGE_CID,\n  },\n  profileImage: \"\",\n  name: \"\",\n  nameError: \"\",\n  category: \"\",\n  categoryError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  website: \"\",\n  websiteError: \"\",\n  twitter: \"\",\n  twitterError: \"\",\n  telegram: \"\",\n  telegramError: \"\",\n  github: \"\",\n  githubError: \"\",\n  socialDataFetched: false,\n  socialDataIsFetching: false,\n  registeredProjects: null,\n  getRegisteredProjectsError: \"\",\n  isModalOpen: false,\n  teamMember: \"\",\n  teamMembers: [],\n  nearAccountIdError: \"\",\n  registrationSuccess: false,\n  showAlert: false,\n  alertMessage: \"\",\n});\n\nconst accountId = props.projectId\n  ? props.projectId\n  : state.isDao\n  ? state.daoAddress\n  : context.accountId;\nconst policy = Near.view(accountId, \"get_policy\", {});\n\nconst userHasPermissions = useMemo(() => {\n  if (!policy) return true;\n  // TODO: break this out (NB: duplicated in Project.CreateForm)\n  const userRoles = policy.roles.filter((role) => {\n    if (role.kind === \"Everyone\") return true;\n    return role.kind.Group && role.kind.Group.includes(context.accountId);\n  });\n  const kind = \"call\";\n  const action = \"AddProposal\";\n  // Check if the user is allowed to perform the action\n  const allowed = userRoles.some(({ permissions }) => {\n    return (\n      permissions.includes(`${kind}:${action}`) ||\n      permissions.includes(`${kind}:*`) ||\n      permissions.includes(`*:${action}`) ||\n      permissions.includes(\"*:*\")\n    );\n  });\n  return allowed;\n}, [policy]);\n\nconst getImageUrlFromSocialImage = (image) => {\n  if (image.url) {\n    return image.url;\n  } else if (image.ipfs_cid) {\n    return IPFS_BASE_URL + image.ipfs_cid;\n  }\n};\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>{children}</ModalContent>\n    </ModalOverlay>\n  );\n};\n\nconst setSocialData = (accountId, shouldSetTeamMembers) => {\n  Near.asyncView(\"social.near\", \"get\", { keys: [`${accountId}/profile/**`] })\n    .then((socialData) => {\n      // console.log(\"socialData: \", socialData);\n      if (!socialData || !socialData[accountId].profile) {\n        State.update({\n          socialDataFetched: true,\n          name: \"\",\n          category: \"\",\n          description: \"\",\n          website: \"\",\n          twitter: \"\",\n          telegram: \"\",\n          github: \"\",\n          teamMembers: [],\n        });\n        return;\n      }\n      const profileData = socialData[accountId].profile;\n      const backgroundImage = profileData.backgroundImage;\n      const profileImage = profileData.image || \"\";\n      const description = profileData.description || \"\";\n      const category = typeof profileData.category == \"string\" ? profileData.category : \"\";\n      const linktree = profileData.linktree || {};\n      const twitter = linktree.twitter || \"\";\n      const telegram = linktree.telegram || \"\";\n      const github = linktree.github || \"\";\n      const website = linktree.website || \"\";\n      const team = profileData.team || {};\n      // update state\n      const stateUpdates = {\n        backgroundImage,\n        profileImage,\n        name: profileData?.name || \"\",\n        description,\n        category,\n        twitter,\n        telegram,\n        github,\n        website,\n        socialDataFetched: true,\n      };\n      if (backgroundImage) {\n        stateUpdates.backgroundImage = backgroundImage;\n      }\n      if (shouldSetTeamMembers) {\n        stateUpdates.teamMembers = Object.entries(team)\n          .filter(([_address, value]) => value !== null)\n          .map(([address, _]) => ({\n            address,\n            imageUrl: DEFAULT_PROFILE_IMAGE_URL, // TODO: fetch actual image from near social. or better, move ProfileImage to its own component that handles the social data fetching\n          }));\n      }\n      State.update(stateUpdates);\n    })\n    .catch((e) => {\n      console.log(\"error getting social data: \", e);\n      State.update({ socialDataFetched: true });\n    });\n};\n\nuseEffect(() => {\n  if (state.isDao && state.daoAddress) {\n    setSocialData(state.daoAddress, true);\n  } else if (!state.isDao && context.accountId && !state.socialDataFetched) {\n    setSocialData(context.accountId, true);\n  }\n}, [state.socialDataFetched, state.isDao, state.daoAddress, context.accountId]);\n\nif (context.accountId && !state.registeredProjects) {\n  Near.asyncView(REGISTRY_CONTRACT_ID, \"get_projects\", {})\n    .then((projects) => {\n      State.update({ registeredProjects: projects });\n    })\n    .catch((e) => {\n      console.log(\"error getting projects: \", e);\n      State.update({ getRegisteredProjectsError: e });\n    });\n}\n\nconst isCreateProjectDisabled =\n  state.daoAddressError ||\n  !state.name ||\n  state.nameError ||\n  !state.description ||\n  state.descriptionError ||\n  !state.category ||\n  state.categoryError;\n\n// console.log(\"isCreateProjectDisabled: \", isCreateProjectDisabled);\n// console.log(\"state: \", state);\n// console.log(\"policy: \", policy);\n\nconst handleCreateOrUpdateProject = (e) => {\n  if (isCreateProjectDisabled) return;\n  const daoAddressValid = state.isDao ? props.validateNearAddress(state.daoAddress) : true;\n  if (!daoAddressValid) {\n    State.update({\n      daoAddressError: \"Invalid NEAR account ID\",\n    });\n    return;\n  }\n\n  const socialArgs = {\n    data: {\n      [accountId]: {\n        // basic profile details\n        profile: {\n          name: state.name,\n          category: state.category,\n          description: state.description,\n          linktree: {\n            website: state.website,\n            twitter: state.twitter,\n            telegram: state.telegram,\n            github: state.github,\n          },\n          team: state.teamMembers.reduce(\n            (acc, tm) => ({ ...acc, [tm.accountId]: tm.remove ? null : \"\" }),\n            {}\n          ),\n        },\n        // follow & star Potlock\n        index: {\n          star: {\n            key: {\n              type: \"social\",\n              path: `${ownerId}/widget/Index`,\n            },\n            value: {\n              type: \"star\",\n            },\n          },\n          notify: {\n            key: ownerId,\n            value: {\n              type: \"star\",\n              item: {\n                type: \"social\",\n                path: `${ownerId}/widget/Index`,\n              },\n            },\n          },\n        },\n        graph: {\n          star: {\n            [ownerId]: {\n              widget: {\n                Index: \"\",\n              },\n            },\n          },\n          follow: {\n            [ownerId]: \"\",\n          },\n        },\n      },\n    },\n  };\n  if (state.backgroundImage) {\n    socialArgs.data[accountId].profile.backgroundImage = state.backgroundImage;\n  }\n  if (state.profileImage) {\n    socialArgs.data[accountId].profile.image = state.profileImage;\n  }\n  const potlockRegistryArgs = {};\n  const horizonArgs = { account_id: state.isDao ? state.daoAddress : context.accountId };\n\n  // first, we have to get the account from social.near to see if it exists. If it doesn't, we need to add 0.1N to the deposit\n  Near.asyncView(SOCIAL_CONTRACT_ID, \"get_account\", {\n    account_id: state.isDao ? state.daoAddress : context.accountId,\n  }).then((account) => {\n    const socialTransaction = {\n      contractName: SOCIAL_CONTRACT_ID,\n      methodName: \"set\",\n      args: socialArgs,\n    };\n    let depositFloat = JSON.stringify(socialArgs).length * 0.00003;\n    if (!account) {\n      depositFloat += 0.1;\n    }\n    socialTransaction.deposit = Big(depositFloat).mul(Big(10).pow(24));\n\n    // instantiate transactions array that we will be passing to Near.call()\n    let transactions = [socialTransaction];\n\n    // if this is a creation action, we need to add the registry and horizon transactions\n    if (!props.edit) {\n      transactions.push(\n        // register project on potlock\n        {\n          contractName: REGISTRY_CONTRACT_ID,\n          methodName: \"register\",\n          deposit: Big(0.05).mul(Big(10).pow(24)),\n          args: potlockRegistryArgs,\n        }\n      );\n      if (!existingHorizonProject) {\n        transactions.push(\n          // register on NEAR Horizon\n          {\n            contractName: HORIZON_CONTRACT_ID,\n            methodName: \"add_project\",\n            args: horizonArgs,\n          }\n        );\n      }\n    }\n\n    // if it is a DAO, we need to convert transactions to DAO function call proposals\n    if (state.isDao) {\n      const clonedTransactions = JSON.parse(JSON.stringify(transactions));\n      transactions = clonedTransactions.map((tx) => {\n        const action = {\n          method_name: tx.methodName,\n          gas: FIFTY_TGAS,\n          deposit: tx.deposit ? tx.deposit.toString() : \"0\",\n          args: Buffer.from(JSON.stringify(tx.args), \"utf-8\").toString(\"base64\"),\n        };\n        return {\n          ...tx,\n          contractName: state.daoAddress,\n          methodName: \"add_proposal\",\n          args: {\n            proposal: {\n              description: props.edit\n                ? \"Update project on Potlock (via NEAR Social)\"\n                : \"Create project on Potlock (3 steps: Register information on NEAR Social, register on Potlock, and register on NEAR Horizon)\",\n              kind: {\n                FunctionCall: {\n                  receiver_id: tx.contractName,\n                  actions: [action],\n                },\n              },\n            },\n          },\n          deposit: policy.proposal_bond || MIN_PROPOSAL_DEPOSIT,\n          gas: THREE_HUNDRED_TGAS,\n        };\n      });\n    }\n    Near.call(transactions);\n    // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n    // <---- EXTENSION WALLET HANDLING ---->\n    // poll for updates\n    const pollIntervalMs = 1000;\n    // const totalPollTimeMs = 60000; // consider adding in to make sure interval doesn't run indefinitely\n    const pollId = setInterval(() => {\n      Near.asyncView(REGISTRY_CONTRACT_ID, \"get_project_by_id\", {\n        project_id: context.accountId,\n        // TODO: implement pagination (should be OK without until there are 500+ donations from this user)\n      }).then((_project) => {\n        // won't get here unless project exists\n        clearInterval(pollId);\n        State.update({ registrationSuccess: true });\n      });\n    }, pollIntervalMs);\n  });\n};\n\nif (props.projectId) {\n  Near.asyncView(props.projectId, \"get_policy\", {}).then((policy) => {\n    if (policy) {\n      State.update({\n        isDao: true,\n        daoAddress: props.projectId,\n        daoAddressTemp: props.projectId,\n      });\n    }\n  });\n}\n\nconst registeredProject = useMemo(() => {\n  return state.registeredProjects\n    ? state.registeredProjects?.find(\n        (project) => project.id == (state.isDao ? state.daoAddress : context.accountId)\n      )\n    : null;\n}, [state.registeredProjects, state.isDao, state.daoAddress]);\n\n// console.log(\"registeredProject: \", registeredProject);\n\nconst proposals = Near.view(state.daoAddress, \"get_proposals\", {\n  from_index: 0,\n  limit: 1000,\n});\n\nconst proposalInProgress = useMemo(() => {\n  if (!state.isDao || !state.daoAddress || !proposals) return false;\n  return proposals?.find((proposal) => {\n    return (\n      proposal.status == \"InProgress\" &&\n      proposal.kind.FunctionCall?.receiver_id == REGISTRY_CONTRACT_ID &&\n      proposal.kind.FunctionCall?.actions[0]?.method_name == \"register\"\n    );\n  });\n}, [state, proposals]);\n\nconst handleAddTeamMember = () => {\n  let isValid = props.validateNearAddress(state.teamMember);\n  if (!isValid) {\n    State.update({\n      nearAccountIdError: \"Invalid NEAR account ID\",\n    });\n    return;\n  }\n  if (!state.teamMembers.find((tm) => tm.accountId == state.teamMember)) {\n    // get data from social.near\n    const profileImageUrl = DEFAULT_PROFILE_IMAGE_URL;\n    const fullTeamMember = {\n      accountId: state.teamMember.toLowerCase(),\n      imageUrl: profileImageUrl,\n    };\n    Near.asyncView(\"social.near\", \"get\", { keys: [`${state.teamMember}/profile/**`] })\n      .then((socialData) => {\n        if (socialData) {\n          const profileData = socialData[state.teamMember].profile;\n          if (!profileData) return;\n          // get profile image URL\n          if (profileData.image) {\n            const imageUrl = getImageUrlFromSocialImage(profileData.image);\n            if (imageUrl) fullTeamMember.imageUrl = imageUrl;\n          }\n        }\n      })\n      .catch((e) => {\n        console.log(\"error getting social data: \", e);\n      })\n      .finally(() => {\n        State.update({\n          teamMembers: [...state.teamMembers, fullTeamMember],\n          teamMember: \"\",\n          nearAccountIdError: \"\",\n        });\n      });\n  }\n};\n\nconst CATEGORY_MAPPINGS = {\n  \"social-impact\": \"Social Impact\",\n  \"non-profit\": \"NonProfit\",\n  climate: \"Climate\",\n  \"public-good\": \"Public Good\",\n  \"de-sci\": \"DeSci\",\n  \"open-source\": \"Open Source\",\n  community: \"Community\",\n  education: \"Education\",\n};\n\nconst FormSectionLeft = (title, description, isRequired) => {\n  return (\n    <FormSectionLeftDiv>\n      <FormSectionTitle>{title}</FormSectionTitle>\n      <FormSectionDescription>{description}</FormSectionDescription>\n      <FormSectionIsRequired\n        style={{\n          color: isRequired ? \"#DD5633\" : \"#7B7B7B\",\n        }}\n      >\n        {isRequired ? \"Required\" : \"Optional\"}\n        {isRequired && (\n          <SvgContainer style={{ top: -6, left: -26 }}>\n            <svg\n              width=\"117\"\n              height=\"31\"\n              viewBox=\"0 0 117 31\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M81.8 3.40116C82.247 3.1908 83.0709 3.13488 82.6 2.60116C81.0461 0.840105 83.0819 0.798833 78.6667 1.22338C65.6302 2.47689 52.5192 4.47997 39.6667 6.95672C31.3106 8.56697 19.0395 10.1936 12.7333 17.09C3.95785 26.6869 29.2286 29.1656 32.9333 29.3567C53.953 30.4413 75.9765 28.9386 96.5111 24.1789C99.8286 23.41 122.546 18.5335 112.733 11.5345C107.621 7.88815 100.796 6.47335 94.7333 5.75672C77.7504 3.74928 60.1141 5.22649 43.2222 7.35671C28.8721 9.16641 14.4138 11.8506 1 17.4012\"\n                stroke=\"#2E2E2E\"\n                stroke-width=\"1.8\"\n                stroke-linecap=\"round\"\n              />\n            </svg>\n          </SvgContainer>\n        )}\n      </FormSectionIsRequired>\n    </FormSectionLeftDiv>\n  );\n};\n\nif (props.edit && (!registeredProject || !userHasPermissions)) {\n  return <h3 style={{ textAlign: \"center\", paddingTop: \"32px\" }}>Unauthorized</h3>;\n}\n\nconst uploadFileUpdateState = (body, callback) => {\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body,\n  }).then(callback);\n};\n\nconsole.log(\"state: \", state);\n\nreturn (\n  <Container>\n    {!state.socialDataFetched || !projects ? (\n      <div class=\"spinner-border text-secondary\" role=\"status\" />\n    ) : proposalInProgress ? (\n      <Container\n        style={{\n          padding: \"32px 16px\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          wordWrap: \"break-word\",\n        }}\n      >\n        <h1 style={{ textAlign: \"center\" }}>You have a DAO proposal in progress.</h1>\n        <h5 style={{ wordWrap: \"break-word\", textAlign: \"center\" }}>\n          Please come back once voting on your proposal has been completed.\n        </h5>\n        <div\n          style={{\n            fontStyle: \"italic\",\n            fontFamily: \"sans-serif\",\n            wordWrap: \"break-word\",\n            textAlign: \"center\",\n          }}\n        >\n          NB: This proposal consists of 3 steps (individual proposals): Register information on NEAR\n          Social, register on Potlock, and register on NEAR Horizon.\n        </div>\n        <a\n          target=\"_blank\"\n          href={`https://near.org/sking.near/widget/DAO.Page?daoId=${state.daoAddress}&tab=proposal&proposalId=${proposalInProgress.id}`}\n          style={{ marginTop: \"16px\" }}\n        >\n          View DAO Proposal\n        </a>\n      </Container>\n    ) : !props.edit && (registeredProject || state.registrationSuccess) ? (\n      <>\n        <h1 style={{ textAlign: \"center\" }}>You've successfully registered!</h1>\n        <ButtonsContainer>\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              text: \"View your project\",\n              disabled: false,\n              href: `?tab=project&projectId=${registeredProject?.id || context.accountId}`,\n            }}\n          />\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              text: \"View all projects\",\n              disabled: false,\n              href: `?tab=projects`,\n            }}\n          />\n        </ButtonsContainer>\n      </>\n    ) : (\n      <>\n        <Widget\n          src={`${ownerId}/widget/Project.BannerHeader`}\n          props={{\n            ...props,\n            projectId: state.isDao && state.daoAddress ? state.daoAddress : context.accountId, // TODO: consider updating to use dao address if available, but will look weird bc no DAOs prob have a banner image on near social\n            backgroundStyle: {\n              objectFit: \"cover\",\n              left: 0,\n              top: 0,\n              height: \"280px\",\n            },\n            // allowEdit: true,\n            backgroundImage: state.backgroundImage,\n            profileImage: state.profileImage,\n            bgImageOnChange: (files) => {\n              if (files) {\n                uploadFileUpdateState(files[0], (res) => {\n                  const ipfs_cid = res.body.cid;\n                  State.update({ backgroundImage: { ipfs_cid } });\n                });\n              }\n            },\n            profileImageOnChange: (files) => {\n              if (files) {\n                uploadFileUpdateState(files[0], (res) => {\n                  const ipfs_cid = res.body.cid;\n                  State.update({ profileImage: { ipfs_cid } });\n                });\n              }\n            },\n            children: (\n              <LowerBannerContainer>\n                <LowerBannerContainerLeft>\n                  <AddTeamMembers onClick={() => State.update({ isModalOpen: true })}>\n                    {state.teamMembers.length > 0\n                      ? \"Add or remove team members\"\n                      : \"Add team members\"}\n                  </AddTeamMembers>\n                </LowerBannerContainerLeft>\n                <LowerBannerContainerRight>\n                  <TeamContainer>\n                    {state.teamMembers.length > MAX_TEAM_MEMBERS_DISPLAY_COUNT && (\n                      <MoreTeamMembersContainer zIndex={state.teamMembers.length + 1}>\n                        <MoreTeamMembersText>{MAX_TEAM_MEMBERS_DISPLAY_COUNT}+</MoreTeamMembersText>\n                      </MoreTeamMembersContainer>\n                    )}\n                    {state.teamMembers\n                      .filter((teamMember) => !teamMember.remove)\n                      .slice(0, MAX_TEAM_MEMBERS_DISPLAY_COUNT)\n                      .map((teamMember, idx) => {\n                        return (\n                          <Widget\n                            src=\"mob.near/widget/ProfileImage\"\n                            props={{\n                              accountId: teamMember.accountId,\n                              style: {\n                                width: \"28px\",\n                                height: \"28px\",\n                                zIndex: state.isModalOpen ? 0 : state.teamMembers.length - idx,\n                                margin: \"0 -8px 0 0\",\n                                border: \"2px solid white\",\n                                borderRadius: \"50%\",\n                                background: \"white\",\n                              },\n                              className: \"mb-2\",\n                              imageClassName: \"rounded-circle w-100 h-100 d-block\",\n                              thumbnail: false,\n                              tooltip: true,\n                            }}\n                          />\n                        );\n                      })}\n                  </TeamContainer>\n                </LowerBannerContainerRight>\n              </LowerBannerContainer>\n            ),\n          }}\n        />\n        <FormBody>\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Project details\",\n              \"Give an overview of your project including background details and your mission.\",\n              true\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"masterSelector\",\n                  checked: state.isDao,\n                  onClick: (e) => {\n                    State.update({ isDao: e.target.checked });\n                    if (!e.target.checked) {\n                      setSocialData(context.accountId);\n                    } else {\n                      if (state.daoAddress) {\n                        setSocialData(state.daoAddress);\n                      }\n                    }\n                  },\n                  label: \"Register as DAO\",\n                  disabled: props.edit,\n                  containerStyle: {\n                    marginBottom: \"24px\",\n                  },\n                }}\n              />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: state.isDao ? \"DAO address *\" : \"Project ID *\",\n                  value: state.isDao ? state.daoAddressTemp : context.accountId,\n                  disabled: !state.isDao,\n                  onChange: (daoAddress) =>\n                    State.update({ daoAddressTemp: daoAddress.toLowerCase(), daoAddressError: \"\" }),\n                  validate: () => {\n                    // **CALLED ON BLUR**\n                    if (state.isDao) {\n                      const isValid = props.validateNearAddress(state.daoAddressTemp);\n                      if (!isValid) {\n                        State.update({\n                          daoAddressError: \"Invalid NEAR account ID\",\n                        });\n                        return;\n                      }\n                      const NO_PERMISSIONS_ERROR = \"You do not have required roles for this DAO\";\n                      Near.asyncView(state.daoAddressTemp, \"get_policy\", {})\n                        .then((policy) => {\n                          // console.log(\"policy: \", policy);\n                          // State.update({ registeredProjects: projects });\n                          // Filter the user roles\n                          // TODO: break this out (duplicated in Project.Body)\n                          const userRoles = policy.roles.filter((role) => {\n                            if (role.kind === \"Everyone\") return true;\n                            return role.kind.Group && role.kind.Group.includes(context.accountId);\n                          });\n                          const kind = \"call\";\n                          const action = \"AddProposal\";\n                          // Check if the user is allowed to perform the action\n                          const allowed = userRoles.some(({ permissions }) => {\n                            return (\n                              permissions.includes(`${kind}:${action}`) ||\n                              permissions.includes(`${kind}:*`) ||\n                              permissions.includes(`*:${action}`) ||\n                              permissions.includes(\"*:*\")\n                            );\n                          });\n                          if (!allowed) {\n                            State.update({\n                              daoAddressError: NO_PERMISSIONS_ERROR,\n                            });\n                          } else {\n                            // add all council roles to team (but not current user)\n                            const councilRole = policy.roles.find(\n                              (role) => role.name === \"council\"\n                            );\n                            const councilTeamMembers = (councilRole?.kind?.Group || []).map(\n                              (tm) => ({ accountId: tm })\n                            );\n                            State.update({\n                              daoAddress: state.daoAddressTemp,\n                              teamMembers: councilTeamMembers,\n                            });\n                          }\n                        })\n                        .catch((e) => {\n                          console.log(\"error getting DAO policy: \", e);\n                          State.update({\n                            daoAddressError: NO_PERMISSIONS_ERROR,\n                          });\n                        });\n                      setSocialData(state.daoAddressTemp, false);\n                    }\n                    State.update({ daoAddressError: \"\" });\n                  },\n                  error: state.isDao ? state.daoAddressError : \"\",\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Project name *\",\n                  placeholder: \"Enter project name\",\n                  value: state.name,\n                  onChange: (name) => State.update({ name }),\n                  validate: () => {\n                    if (state.name.length < 3) {\n                      State.update({ nameError: \"Name must be at least 3 characters\" });\n                      return;\n                    }\n\n                    if (state.name.length > 100) {\n                      State.update({\n                        nameError: \"Name must be less than 100 characters\",\n                      });\n                      return;\n                    }\n\n                    State.update({ nameError: \"\" });\n                  },\n                  error: state.nameError,\n                }}\n              />\n              <Space height={24} />\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.TextArea`}\n                props={{\n                  label: \"Overview *\",\n                  placeholder: \"Give a short description of your project\",\n                  value: state.description,\n                  onChange: (description) => State.update({ description }),\n                  validate: () => {\n                    if (state.description.length > 500) {\n                      State.update({\n                        descriptionError: \"Description must be less than 500 characters\",\n                      });\n                      return;\n                    }\n\n                    State.update({ descriptionError: \"\" });\n                  },\n                  error: state.descriptionError,\n                }}\n              />\n              <Space height={24} />\n\n              <Widget\n                src={`${ownerId}/widget/Inputs.Select`}\n                props={{\n                  label: \"Select category *\",\n                  noLabel: false,\n                  placeholder: \"Choose category\",\n                  options: Object.entries(CATEGORY_MAPPINGS).map(([value, text]) => ({\n                    value,\n                    text,\n                  })),\n                  value: { text: CATEGORY_MAPPINGS[state.category] || \"\", value: state.category },\n                  onChange: (category) => {\n                    State.update({\n                      category: category.value,\n                    });\n                  },\n                  validate: () => {\n                    if (!state.category) {\n                      State.update({\n                        categoryError: \"Please select a category\",\n                      });\n                    }\n                  },\n                  error: state.categoryError,\n                }}\n              />\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n          <FormDivider />\n          <FormSectionContainer>\n            {FormSectionLeft(\n              \"Social links\",\n              \"Add your project social links to so supporters can connect with you directly.\",\n              false\n            )}\n            <FormSectionRightDiv>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Twitter\",\n                  preInputChildren: <InputPrefix>twitter.com/</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.twitter,\n                  onChange: (twitter) => State.update({ twitter }),\n                  validate: () => {\n                    if (state.twitter.length > 15) {\n                      State.update({\n                        twitterError: \"Invalid Twitter handle\",\n                      });\n                      return;\n                    }\n                    State.update({ twitterError: \"\" });\n                  },\n                  error: state.twitterError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"Telegram\",\n                  preInputChildren: <InputPrefix>t.me/</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.telegram,\n                  onChange: (telegram) => State.update({ telegram }),\n                  validate: () => {\n                    // TODO: add validation?\n                  },\n                  error: state.telegramError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Inputs.Text`}\n                props={{\n                  label: \"GitHub\",\n                  preInputChildren: <InputPrefix>github.com/</InputPrefix>,\n                  inputStyles: { borderRadius: \"0px 4px 4px 0px\" },\n                  value: state.github,\n                  onChange: (github) => State.update({ github }),\n                  validate: () => {\n                    // TODO: add validation\n                  },\n                  error: state.githubError,\n                }}\n              />\n              <Space height={24} />\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  prefix: \"https://\",\n                  text: props.edit\n                    ? state.isDao\n                      ? \"Add proposal to update project\"\n                      : \"Update your project\"\n                    : state.isDao\n                    ? \"Add proposal to create project\"\n                    : \"Create new project\",\n                  disabled: isCreateProjectDisabled,\n                  onClick: handleCreateOrUpdateProject,\n                }}\n              />\n              <Space height={24} />\n            </FormSectionRightDiv>\n          </FormSectionContainer>\n        </FormBody>\n        <Modal isOpen={state.isModalOpen} onClose={() => State.update({ isModalOpen: false })}>\n          <ModalHeader>\n            <ModalHeaderLeft>\n              <IconContainer>\n                <Icon src={ADD_TEAM_MEMBERS_ICON_URL} />\n              </IconContainer>\n              <ModalTitle>Add team members</ModalTitle>\n            </ModalHeaderLeft>\n            <Icon\n              cursor={\"pointer\"}\n              src={CLOSE_ICON_URL}\n              onClick={() => State.update({ isModalOpen: false })}\n            />\n          </ModalHeader>\n          <ModalDescription>Add NEAR account IDs for your team members.</ModalDescription>\n          <Widget\n            src={`${ownerId}/widget/Inputs.Text`}\n            props={{\n              placeholder: \"NEAR account ID\",\n              value: state.teamMember,\n              onChange: (teamMember) => {\n                State.update({ teamMember, nearAccountIdError: \"\" });\n              },\n              postInputChildren: (\n                <Widget\n                  src={`${ownerId}/widget/Components.Button`}\n                  props={{\n                    type: \"primary\",\n                    text: \"Add\",\n                    onClick: handleAddTeamMember,\n                    style: { borderRadius: `0px 4px 4px 0px` },\n                    submit: true,\n                  }}\n                />\n              ),\n              handleKeyPress: (e) => {\n                if (e.key === \"Enter\") {\n                  handleAddTeamMember();\n                }\n              },\n              error: state.nearAccountIdError,\n            }}\n          />\n          <Space height={24} />\n          <MembersText>\n            <MembersCount>\n              {state.teamMembers.filter((teamMember) => !teamMember.remove).length}{\" \"}\n            </MembersCount>\n            {state.teamMembers.filter((teamMember) => !teamMember.remove).length == 1\n              ? \"member\"\n              : \"members\"}\n          </MembersText>\n          {state.teamMembers\n            .filter((teamMember) => !teamMember.remove)\n            .map((teamMember) => {\n              return (\n                <MembersListItem>\n                  <MembersListItemLeft>\n                    <Widget\n                      src=\"mob.near/widget/ProfileImage\"\n                      props={{\n                        accountId: teamMember.accountId,\n                        style: {\n                          width: \"40px\",\n                          height: \"40px\",\n                          margin: \"0 -8px 0 0\",\n                          borderRadius: \"50%\",\n                          background: \"white\",\n                        },\n                        imageClassName: \"rounded-circle w-100 h-100 d-block\",\n                        thumbnail: false,\n                        tooltip: true,\n                      }}\n                    />\n                    <MembersListItemText>@{teamMember.accountId}</MembersListItemText>\n                  </MembersListItemLeft>\n                  <RemoveMember\n                    onClick={() => {\n                      const teamMembers = state.teamMembers.map((tm) => {\n                        if (tm.accountId == teamMember.accountId) {\n                          return { ...tm, remove: true };\n                        }\n                        return tm;\n                      });\n                      State.update({ teamMembers });\n                    }}\n                  >\n                    Remove\n                  </RemoveMember>\n                </MembersListItem>\n              );\n            })}\n        </Modal>\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Project.CreateForm", "fact_widget_deployments_id": "ded4bcb5ec67b16a05c4640b79ba0195", "inserted_timestamp": "2023-12-02T17:24:16.414Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 10}