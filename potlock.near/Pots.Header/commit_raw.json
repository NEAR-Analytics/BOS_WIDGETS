{"tx_hash": "ExchXdWti5ByiXAm7CcZkFgURv1JKTZ72j2t1WFALKdB", "action_id_social": "48p2sQZ246zWoZmZ78KTUN3eVjv95a8aaJqBCcfkbQsg-0-widget", "block_id": 114024869, "block_timestamp": "2024-03-03T17:01:31.837Z", "signer_id": "potlock.near", "widget_name": "Pots.Header", "source_code": "const { potId, potDetail, referrerId, sybilRequirementMet, applicationSuccess } = props;\nconst { formatDate, daysUntil, yoctosToNear, yoctosToUsdWithFallback } = VM.require(\n  \"potlock.near/widget/utils\"\n) || {\n  formatDate: () => \"\",\n  daysUntil: () => \"\",\n  yoctosToNear: () => \"\",\n  yoctosToUsdWithFallback: () => \"\",\n};\n\nconst { NADA_BOT_URL, ownerId, ToDo, MAX_DONATION_MESSAGE_LENGTH, SUPPORTED_FTS, ONE_TGAS } =\n  VM.require(\"potlock.near/widget/constants\") || {\n    ownerId: \"\",\n    ONE_TGAS: 0,\n    NADA_BOT_URL: \"\",\n    ToDo: \"\",\n    MAX_DONATION_MESSAGE_LENGTH: 0,\n    SUPPORTED_FTS: {},\n  };\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getApplicationByProjectId: () => {},\n  getPublicRoundDonations: () => {},\n};\n\nconst publicRoundDonations = PotSDK.getPublicRoundDonations(potId);\n\nconst { calcNetDonationAmount, filterByDate } = VM.require(\n  `${ownerId}/widget/Components.DonorsUtils`\n);\n// console.log(\"pot detail: \", potDetail);\n\nconst loraCss = fetch(\"https://fonts.googleapis.com/css2?family=Lora&display=swap\").body;\n\nBig.PE = 100;\n\nconst IPFS_BASE_URL = \"https://nftstorage.link/ipfs/\";\nconst NADABOT_ICON_URL =\n  IPFS_BASE_URL + \"bafkreib2iag425b6dktehxlrshchyp2pccg5r6ea2blrnzppqia77kzdbe\";\n\n// console.log(\"header props: \", props);\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  padding: 60px 80px;\n  gap: 40px;\n  width: 100%;\n  background: #f6f5f3;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    align-items: start;\n    justify-content: start;\n    padding: 50px 0;\n  }\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 40%;\n  @media screen and (max-width: 768px) {\n    justify-content: start;\n    width: 100%;\n    padding: 0 20px;\n  }\n`;\n\nconst Title = styled.div`\n  color: #292929;\n  font-size: 48px;\n  font-weight: 400;\n  line-height: 56px;\n  word-wrap: break-word;\n  font-family: \"Lora\";\n\n  ${loraCss}\n`;\n\nconst Description = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst ColumnRightSegment = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n  padding: 24px 0px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst H2 = styled.div`\n  color: #292929;\n  font-size: 24px;\n  font-weight: 600;\n  line-height: 32px;\n  word-wrap: break-word;\n`;\n\nconst H3 = styled.div`\n  color: #292929;\n  font-size: 22px;\n  font-weight: 600;\n  line-height: 28px;\n  word-wrap: break-word;\n`;\n\nconst H4 = styled.div`\n  color: #7b7b7b;\n  font-size: 17px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst Time = styled.span`\n  color: #292929;\n  font-size: 17px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst StatusText = styled.div`\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 16px;\n  word-wrap: break-word;\n  margin-left: 12px;\n`;\n\nconst ModalTitle = styled.div`\n  color: #525252;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  margin-bottom: 8px;\n`;\n\nconst Label = styled.label`\n  font-size: 12px;\n  line-height: 16px;\n  word-wrap: break-word;\n  color: #2e2e2e;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst FeeText = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TotalsSubtext = styled.div`\n  color: #7b7b7b;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n  text-transform: uppercase;\n`;\n\nconst UserChipLink = styled.a`\n  display: flex;\n  flex-direction: row;\n  // align-items: center;\n  // justify-content: center;\n  padding: 2px 12px;\n  margin: 0px 4px;\n  gap: 4px;\n  border-radius: 32px;\n  background: #ebebeb;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst TextBold = styled.div`\n  color: #292929;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 20px;\n  word-wrap: break-word;\n  text-align: center;\n`;\n\nconst ShareIconContainer = styled.svg`\n  width: 24px;\n  height: 24px;\n\n  @media screen and (max-width: 768px) {\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nconst RefLink = styled.div`\n  color: #292929;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n  margin-top: 12px;\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n    color: #292929;\n  }\n`;\n\nState.init({\n  isMatchingPoolModalOpen: false,\n  matchingPoolDonationAmountNear: \"\",\n  matchingPoolDonationAmountNearError: \"\",\n  matchingPoolDonationMessage: \"\",\n  matchingPoolDonationMessageError: \"\",\n  bypassProtocolFee: false,\n  bypassChefFee: false,\n  referralLinkCopied: false,\n  totalUniqueDonors: null,\n  // isOnRegistry: false,\n});\n\n// console.log(\"props in header: \", props);\n\n// console.log(\"pot config: \", potDetail);\n\nconst {\n  owner,\n  admins,\n  chef,\n  pot_name,\n  pot_description,\n  application_start_ms,\n  application_end_ms,\n  public_round_start_ms,\n  public_round_end_ms,\n  min_matching_pool_donation_amount,\n  referral_fee_matching_pool_basis_points,\n  base_currency,\n  matching_pool_balance,\n  public_donations_count,\n  total_public_donations,\n  registry_provider,\n  protocol_config_provider,\n  cooldown_end_ms,\n  all_paid_out,\n} = potDetail;\n\n// console.log(\"potDetail: \", potDetail);\n\nconst protocolConfigContractId = protocol_config_provider.split(\":\")[0];\nconst protocolConfigViewMethodName = protocol_config_provider.split(\":\")[1];\nconst protocolConfig = Near.view(protocolConfigContractId, protocolConfigViewMethodName, {});\n\nconst chefProfile = Social.getr(`${potDetail?.chef}/profile`);\nconst protocolFeeRecipientProfile = Social.getr(`${protocolConfig?.account_id}/profile`);\n\nconst now = Date.now();\nconst applicationNotStarted = now < application_start_ms;\nconst applicationOpen = now >= application_start_ms && now < application_end_ms;\nconst publicRoundNotStarted = now < public_round_start_ms;\nconst publicRoundOpen = now >= public_round_start_ms && now < public_round_end_ms;\nconst publicRoundClosed = now >= public_round_end_ms;\nconst userIsAdminOrGreater = admins.includes(context.accountId) || owner === context.accountId;\nconst userIsChefOrGreater = userIsAdminOrGreater || chef === context.accountId;\n\nconst canPayoutsBeSet = publicRoundClosed && userIsChefOrGreater && !cooldown_end_ms;\nconst canPayoutsBeProcessed =\n  publicRoundClosed && userIsAdminOrGreater && now >= cooldown_end_ms && !all_paid_out;\nconst cooldownPeriodInProgress = publicRoundClosed && now < cooldown_end_ms;\nconst potComplete = all_paid_out;\n\nconst existingApplication = PotSDK.getApplicationByProjectId(potId, context.accountId);\n\nif (publicRoundDonations && state.totalUniqueDonors === null) {\n  const uniqueDonors = [...new Set(publicRoundDonations.map((donation) => donation.donor_id))];\n  State.update({ totalUniqueDonors: uniqueDonors.length });\n}\n// if (registry_provider) {\n//   const [contractId, methodName] = registry_provider.split(\":\");\n//   Near.asyncView(contractId, methodName, { account_id: context.accountId }).then((isOnRegistry) => {\n//     State.update({ isOnRegistry });\n//   });\n// }\n\nconst applicationExists = existingApplication || applicationSuccess;\n\nconst canApply = applicationOpen && !applicationExists && !userIsChefOrGreater;\n\n// const registryRequirementMet = state.isOnRegistry || !registry_provider;\n\n// const publicRoundOpen = true;\n\nconst handleFundMatchingPool = () => {\n  State.update({ isMatchingPoolModalOpen: true });\n};\n\nconst handleApplyToPot = () => {\n  props.setApplicationModalOpen(true);\n};\n\nconst totalMatchingPoolAmount =\n  SUPPORTED_FTS[base_currency.toUpperCase()].fromIndivisible(matching_pool_balance);\n\nconst handleMatchingPoolDonation = () => {\n  const { matchingPoolDonationAmountNear } = state;\n  const args = {\n    message: state.matchingPoolDonationMessage,\n    matching_pool: true,\n    referrer_id: referrerId || null,\n    bypass_protocol_fee: state.bypassProtocolFee,\n  };\n  if (state.bypassChefFee) {\n    args.custom_chef_fee_basis_points = 0;\n  }\n  // const deposit = Big(JSON.stringify(args).length * 0.00003).plus(Big(\"10000000000000000000000\")); // add extra 0.01 NEAR as buffer\n  const amountFloat = parseFloat(matchingPoolDonationAmountNear || 0);\n  if (!amountFloat) {\n    State.update({ matchingPoolDonationAmountNearError: \"Invalid amount\" });\n    return;\n  }\n  const amountIndivisible = SUPPORTED_FTS[base_currency.toUpperCase()].toIndivisible(amountFloat);\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"donate\",\n      deposit: amountIndivisible,\n      args,\n      gas: ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ----> // TODO: implement\n};\n\nconst handleProcessPayouts = () => {\n  // TODO: implement admin_process_payouts\n  const args = {};\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"admin_process_payouts\",\n      deposit: \"0\",\n      args,\n      gas: ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ----> // TODO: implement\n};\n\n// console.log(\"protocolConfig: \", protocolConfig);\n\nconst protocolFeeAmountNear = state.bypassProtocolFee\n  ? 0\n  : (state.matchingPoolDonationAmountNear * protocolConfig?.basis_points) / 10_000 || 0;\n\nconst chefFeeAmountNear = state.bypassChefFee\n  ? 0\n  : (state.matchingPoolDonationAmountNear * potDetail?.chef_fee_basis_points) / 10_000 || 0;\n\nconst referrerFeeAmountNear = referrerId\n  ? (state.matchingPoolDonationAmountNear * referral_fee_matching_pool_basis_points) / 10_000 || 0\n  : 0;\n\nconst getApplicationTagText = () => {\n  if (applicationNotStarted) return \"Application Round Not Started\";\n  if (applicationOpen) return daysUntil(application_end_ms) + \" left to apply\";\n  else return \"Application Round Ended\";\n};\n\nconst getMatchingRoundTagText = () => {\n  if (publicRoundNotStarted) return \"Matching Round Not Started\";\n  if (publicRoundOpen) return daysUntil(public_round_end_ms) + \" left in round\";\n  else return \"Matching Round Ended\";\n};\n\nconst ShareIcon = (\n  <ShareIconContainer>\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"100%\"\n      height=\"100%\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 16 16\"\n      stroke=\"currentColor\"\n      strokeWidth=\"0.363\"\n    >\n      <path d=\"M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z\" />\n      <path d=\"M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z\" />\n    </svg>\n  </ShareIconContainer>\n);\n\nconst potLink = `https://bos.potlock.io/?tab=pot&potId=${potId}${\n  context.accountId && `&referrerId=${context.accountId}`\n}`;\n\nconst handleCopyReferralLink = () => {\n  clipboard.writeText(potLink).then(() => {\n    State.update({ referralLinkCopied: true });\n    setTimeout(() => {\n      State.update({ referralLinkCopied: false });\n    }, 2000);\n  });\n};\n\nreturn (\n  <Container>\n    <Column style={{ gap: \"24px\" }}>\n      <Title>{pot_name}</Title>\n      <Row style={{ gap: \"24px\" }}>\n        {/* Application tag */}\n        <Widget\n          src={`${ownerId}/widget/Pots.Tag`}\n          props={{\n            ...props,\n            backgroundColor: applicationOpen ? \"#EFFEFA\" : \"#EBEBEB\",\n            borderColor: applicationOpen ? \"#33DDCB\" : \"#DBDBDB\",\n            textColor: applicationOpen ? \"#023131\" : \"#192C07\",\n            text: getApplicationTagText(),\n            textStyle: { fontWeight: 500, marginLeft: applicationOpen ? \"8px\" : \"0px\" },\n            preElements: applicationOpen ? (\n              <Widget\n                src={`${ownerId}/widget/Components.Indicator`}\n                props={{\n                  colorOuter: \"#CAFDF3\",\n                  colorInner: \"#33DDCB\",\n                  animate: true,\n                }}\n              />\n            ) : null,\n          }}\n        />\n        {/* Matching round tag */}\n        <Widget\n          src={`${ownerId}/widget/Pots.Tag`}\n          props={{\n            ...props,\n            backgroundColor: publicRoundOpen ? \"#F7FDE8\" : \"#EBEBEB\",\n            borderColor: publicRoundOpen ? \"#9ADD33\" : \"#DBDBDB\",\n            textColor: \"#192C07\",\n            text: getMatchingRoundTagText(),\n            textStyle: { fontWeight: 500, marginLeft: publicRoundOpen ? \"8px\" : \"0px\" },\n            preElements: publicRoundOpen ? (\n              <Widget\n                src={`${ownerId}/widget/Components.Indicator`}\n                props={{\n                  colorOuter: \"#D7F5A1\",\n                  colorInner: \"#9ADD33\",\n                  animate: true,\n                }}\n              />\n            ) : null,\n          }}\n        />\n      </Row>\n      <Description>{pot_description}</Description>\n      <Row style={{ width: \"100%\" }}>\n        <Column style={{ width: \"100%\" }}>\n          <H3>{`${yoctosToUsdWithFallback(total_public_donations)}`}</H3>\n          <TotalsSubtext>donated</TotalsSubtext>\n        </Column>\n        <Column style={{ width: \"100%\" }}>\n          <H3>{state.totalUniqueDonors !== null ? state.totalUniqueDonors : \"-\"}</H3>\n          <TotalsSubtext>{`Donor${state.totalUniqueDonors !== 1 ? \"s\" : \"\"}`}</TotalsSubtext>\n        </Column>\n      </Row>\n    </Column>\n    <Column>\n      <ColumnRightSegment\n        style={{ borderTop: \"1px #7B7B7B solid\", borderBottom: \"1px #7B7B7B solid\" }}\n      >\n        <Row style={{ gap: \"8px\" }}>\n          <H2>{`${SUPPORTED_FTS[base_currency.toUpperCase()].fromIndivisible(\n            matching_pool_balance\n          )} ${base_currency.toUpperCase()} `}</H2>\n          <Description>Matching funds available</Description>\n        </Row>\n      </ColumnRightSegment>\n      <ColumnRightSegment>\n        {applicationOpen && (\n          <>\n            <Row\n              style={{\n                // marginTop: \"24px\",\n                marginBottom: \"8px\",\n                width: \"100%\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Row>\n                <Widget\n                  src={`${ownerId}/widget/Components.Indicator`}\n                  props={{\n                    colorOuter: \"#CAFDF3\",\n                    colorInner: \"#33DDCB\",\n                    animate: true,\n                  }}\n                />\n                <StatusText style={{ color: \"#0B7A74\" }}>All applications are open</StatusText>\n              </Row>\n              <StatusText style={{ color: \"#292929\" }}>\n                {daysUntil(application_end_ms) + \" to go\"}\n              </StatusText>\n            </Row>\n            <H4>\n              Application starts on <Time>{formatDate(application_start_ms)}</Time> and ends on{\" \"}\n              <Time>{formatDate(application_end_ms)}</Time>\n            </H4>\n          </>\n        )}\n        {publicRoundOpen && (\n          <>\n            <Row\n              style={{\n                marginTop: applicationOpen ? \"24px\" : \"0px\",\n                marginBottom: \"8px\",\n                width: \"100%\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Row>\n                <Widget\n                  src={`${ownerId}/widget/Components.Indicator`}\n                  props={{\n                    colorOuter: \"#D7F5A1\",\n                    colorInner: \"#9ADD33\",\n                    animate: true,\n                  }}\n                />\n                <StatusText style={{ color: \"#4A7714\" }}>Matching round live</StatusText>\n              </Row>\n              <StatusText style={{ color: \"#292929\" }}>\n                {\"Ends in \" + daysUntil(public_round_end_ms)}\n              </StatusText>\n            </Row>\n            <H4>\n              Round starts on <Time>{formatDate(public_round_start_ms)}</Time> and ends on{\" \"}\n              <Time>{formatDate(public_round_end_ms)}</Time>\n            </H4>\n          </>\n        )}\n        {publicRoundClosed && (\n          <Row>\n            <Widget\n              src={`${ownerId}/widget/Components.Indicator`}\n              props={{\n                colorOuter: \"#DBDBDB\",\n                colorInner: \"#A6A6A6\",\n              }}\n            />\n            <StatusText style={{ color: \"#525252\" }}>Matching Round Ended</StatusText>\n          </Row>\n        )}\n      </ColumnRightSegment>\n      <Row>\n        {canApply && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              // text: registryRequirementMet ? \"Apply to pot\" : \"Register to Apply\",\n              text: \"Apply to pot\",\n              // onClick: registryRequirementMet ? handleApplyToPot : null, // TODO: ADD BACK IN\n              onClick: handleApplyToPot,\n              // href: registryRequirementMet ? null : props.hrefWithParams(`?tab=createproject`),\n              // target: \"_self\",\n              style: { marginRight: \"24px\" },\n            }}\n          />\n        )}\n        {now < public_round_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: publicRoundOpen || canApply ? \"secondary\" : \"primary\",\n              text: \"Fund matching pool\",\n              onClick: handleFundMatchingPool,\n              style: { marginRight: \"12px\" },\n            }}\n          />\n        )}\n        {publicRoundOpen && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              text: sybilRequirementMet ? \"Donate to projects\" : \"Verify to Donate\",\n              href: sybilRequirementMet\n                ? props.hrefWithParams(`?tab=pot&potId=${potId}&nav=projects`)\n                : NADA_BOT_URL,\n              target: sybilRequirementMet ? \"_self\" : \"_blank\",\n              iconSrc: sybilRequirementMet ? null : NADABOT_ICON_URL,\n            }}\n          />\n        )}\n        {canPayoutsBeSet && (\n          <Widget\n            src={`${ownerId}/widget/Pots.CalculateSetPayoutsButton`}\n            props={{\n              ...props,\n              potDetail,\n            }}\n          />\n        )}\n        {canPayoutsBeProcessed && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              ...props,\n              type: \"primary\",\n              text: \"Process Payouts\",\n              onClick: handleProcessPayouts,\n            }}\n          />\n        )}\n        {cooldownPeriodInProgress && (\n          <div>Cooldown period ends on {formatDate(cooldown_end_ms)}</div>\n        )}\n        {potComplete && <div style={{ color: \"red\" }}>Pot complete</div>}\n      </Row>\n      <RefLink onClick={handleCopyReferralLink}>\n        <svg\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          viewBox=\"0 0 24 24\"\n          style={{ width: \"1em\", marginTop: \"-0.2em\" }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\" />\n          <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n        </svg>\n        {state.referralLinkCopied ? \"Referral link copied!\" : \"Earn referral fees\"}\n      </RefLink>\n    </Column>\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen: state.isMatchingPoolModalOpen,\n        onClose: () => State.update({ isMatchingPoolModalOpen: false }),\n        children: (\n          <>\n            <ModalTitle>\n              Enter matching pool contribution amount in NEAR\n              {[\"0\", \"1\"].includes(min_matching_pool_donation_amount)\n                ? \"(no minimum)\"\n                : `(Min. ${yoctosToNear(min_matching_pool_donation_amount)})`}\n            </ModalTitle>\n            <Widget\n              src={`${ownerId}/widget/Inputs.Text`}\n              props={{\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Enter amount here in NEAR\",\n                value: state.matchingPoolDonationAmountNear,\n                onChange: (matchingPoolDonationAmountNear) =>\n                  State.update({ matchingPoolDonationAmountNear }),\n                validate: () => {\n                  // TODO: add validation logic here\n                  State.update({ matchingPoolDonationAmountNearError: \"\" });\n                },\n                error: state.matchingPoolDonationAmountNearError,\n              }}\n            />\n            <Widget\n              src={`${ownerId}/widget/Inputs.TextArea`}\n              props={{\n                noLabel: true,\n                inputRows: 5,\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Enter an optional message\",\n                value: state.matchingPoolDonationMessage,\n                onChange: (matchingPoolDonationMessage) =>\n                  State.update({ matchingPoolDonationMessage }),\n                validate: () => {\n                  if (state.matchingPoolDonationMessage.length > MAX_DONATION_MESSAGE_LENGTH) {\n                    State.update({\n                      matchingPoolDonationMessageError: `Message must be less than ${MAX_DONATION_MESSAGE_LENGTH} characters`,\n                    });\n                    return;\n                  }\n\n                  State.update({ matchingPoolDonationMessageError: \"\" });\n                },\n                error: state.matchingPoolDonationMessageError,\n              }}\n            />\n            {/* <props.ToDo>Display fees breakdown and amount after fees</props.ToDo> */}\n            <Row>\n              <Widget\n                src={`${ownerId}/widget/Inputs.Checkbox`}\n                props={{\n                  id: \"bypassProtocolFeeSelector\",\n                  checked: state.bypassProtocolFee,\n                  onClick: (e) => {\n                    State.update({ bypassProtocolFee: e.target.checked });\n                  },\n                }}\n              />\n              <Label htmlFor=\"bypassProtocolFeeSelector\">\n                Bypass {protocolConfig?.basis_points / 100 || \"-\"}% protocol fee to{\" \"}\n                <UserChipLink\n                  href={`https://near.social/mob.near/widget/ProfilePage?accountId=${protocolConfig?.account_id}`}\n                  target=\"_blank\"\n                >\n                  <Widget\n                    src={`${ownerId}/widget/Project.ProfileImage`}\n                    props={{\n                      ...props,\n                      accountId: protocolConfig?.account_id,\n                      style: {\n                        height: \"12px\",\n                        width: \"12px\",\n                      },\n                    }}\n                  />\n                  <TextBold>\n                    {protocolFeeRecipientProfile?.name || protocolConfig?.account_id}\n                  </TextBold>\n                </UserChipLink>\n              </Label>\n            </Row>\n            {potDetail?.chef && potDetail?.chef_fee_basis_points > 0 && (\n              <Row style={{ marginTop: \"6px\" }}>\n                <Widget\n                  src={`${ownerId}/widget/Inputs.Checkbox`}\n                  props={{\n                    id: \"bypassChefFeeSelector\",\n                    checked: state.bypassChefFee,\n                    onClick: (e) => {\n                      State.update({ bypassChefFee: e.target.checked });\n                    },\n                  }}\n                />\n                <Label htmlFor=\"bypassChefFeeSelector\">\n                  Bypass {potDetail?.chef_fee_basis_points / 100 || \"-\"}% chef fee to{\" \"}\n                  <UserChipLink\n                    href={`https://near.social/mob.near/widget/ProfilePage?accountId=${potDetail?.chef}`}\n                    target=\"_blank\"\n                  >\n                    <Widget\n                      src={`${ownerId}/widget/Project.ProfileImage`}\n                      props={{\n                        ...props,\n                        accountId: potDetail?.chef,\n                        style: {\n                          height: \"12px\",\n                          width: \"12px\",\n                        },\n                      }}\n                    />\n                    <TextBold>{chefProfile?.name || potDetail?.chef}</TextBold>\n                  </UserChipLink>\n                </Label>\n              </Row>\n            )}\n            <Row style={{ marginTop: \"12px\" }}>\n              <FeeText>Protocol fee: {protocolFeeAmountNear} NEAR</FeeText>\n            </Row>\n            {potDetail?.chef && potDetail?.chef_fee_basis_points > 0 && (\n              <Row style={{ marginTop: \"12px\" }}>\n                <FeeText>Chef fee: {chefFeeAmountNear} NEAR</FeeText>\n              </Row>\n            )}\n            <Row style={{ marginTop: \"6px\" }}>\n              {referrerId && (\n                <FeeText>\n                  Referrer fee (to {referrerId}): {referrerFeeAmountNear} NEAR\n                </FeeText>\n              )}\n            </Row>\n            <Row style={{ marginTop: \"6px\" }}>\n              <FeeText>\n                Net donation amount:{\" \"}\n                {state.matchingPoolDonationAmountNear -\n                  protocolFeeAmountNear -\n                  chefFeeAmountNear -\n                  referrerFeeAmountNear}{\" \"}\n                NEAR\n              </FeeText>\n            </Row>\n            <Row style={{ justifyContent: \"flex-end\", marginTop: \"12px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  disabled:\n                    !state.matchingPoolDonationAmountNear ||\n                    !!state.matchingPoolDonationAmountNearError ||\n                    !parseFloat(state.matchingPoolDonationAmountNear),\n                  text: `Contribute${\n                    state.matchingPoolDonationAmountNear\n                      ? ` ${state.matchingPoolDonationAmountNear} ${base_currency.toUpperCase()}`\n                      : \"\"\n                  } to matching pool`,\n                  onClick: handleMatchingPoolDonation,\n                }}\n              />\n            </Row>\n          </>\n        ),\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Header", "fact_widget_deployments_id": "fd76b8efb924eb8a0f2a8bfdc39787be", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 23}