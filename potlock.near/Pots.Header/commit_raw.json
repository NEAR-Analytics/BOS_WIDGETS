{"tx_hash": "B2HmkWFzj4KrYJPdEQDb11LjsKYoZoWno8GjCcFRndG2", "action_id_social": "CvV4fAjZWmy86xfDt1tNAZF9ehSLjksMjjAKq7oVuY1h-0-widget", "block_id": 117451231, "block_timestamp": "2024-04-23T12:57:47.994Z", "signer_id": "potlock.near", "widget_name": "Pots.Header", "source_code": "const {\n  potDetail,\n  setApplicationModalOpen,\n  potId,\n  sybilRequirementMet,\n  applicationSuccess,\n  registrationApproved,\n  registryStatus,\n  hrefWithParams,\n  nav,\n  referrerId,\n  allDonations,\n} = props;\n\nconst {\n  admins,\n  chef,\n  owner,\n  pot_name,\n  pot_description,\n  registry_provider,\n  matching_pool_balance,\n  public_round_end_ms,\n  public_round_start_ms,\n  application_start_ms,\n  application_end_ms,\n  cooldown_end_ms,\n  all_paid_out,\n} = potDetail;\n\nconst [isMatchingPoolModalOpen, setIsMatchingPoolModalOpen] = useState(false);\nconst [isModalDonationOpen, setIsModalDonationOpen] = useState(false);\nconst [successfulDonation, setSuccessfulDonation] = useState(null);\nconst [showChallengePayoutsModal, setShowChallengePayoutsModal] = useState(false);\nconst [projects, setProjects] = useState(null);\nconst [flaggedAddresses, setFlaggedAddresses] = useState(null);\n\nconst { IPFS_BASE_URL } = VM.require(\"potlock.near/widget/constants\") || {\n  IPFS_BASE_URL: \"\",\n};\n\nconst NADABOT_ICON_URL =\n  IPFS_BASE_URL + \"bafkreiecgkoybmplo4o542fphclxrhh4nlof5uit3lkzyv4eo2qymrpsru\";\n\nconst projectNotRegistered = registryStatus === null;\nconst userIsAdminOrGreater = admins.includes(context.accountId) || owner === context.accountId;\nconst userIsChefOrGreater = userIsAdminOrGreater || chef === context.accountId;\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getApplicationByProjectId: () => {},\n  asyncGetApprovedApplications: () => {},\n  adminProcessPayouts: () => {},\n};\n\nconst existingApplication = PotSDK.getApplicationByProjectId(potId, context.accountId);\n\nuseEffect(() => {\n  if (!projects) {\n    PotSDK.asyncGetApprovedApplications(potId).then((projects) => {\n      setProjects(projects);\n    });\n  }\n}, []);\nconst applicationExists = existingApplication || applicationSuccess;\n\nconst now = Date.now();\nconst publicRoundOpen = now >= public_round_start_ms && now < public_round_end_ms;\nconst publicRoundEnded = now > public_round_end_ms;\n\nconst applicationOpen = now >= application_start_ms && now < application_end_ms;\n\nconst canApply = applicationOpen && !applicationExists && !userIsChefOrGreater;\n\nconst canPayoutsBeSet = userIsChefOrGreater && !all_paid_out && publicRoundEnded;\n\nconst canPayoutsBeProcessed = userIsAdminOrGreater && now >= cooldown_end_ms && !all_paid_out;\n\nconst { ownerId, NADA_BOT_URL } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n  NADA_BOT_URL: \"\",\n};\nconst { yoctosToNear, yoctosToUsdWithFallback, nearToUsd, calculatePayouts } = VM.require(\n  \"potlock.near/widget/utils\"\n) || {\n  calculatePayouts: () => {},\n  yoctosToNear: () => \"\",\n  nearToUsd: 1,\n  yoctosToUsdWithFallback: () => \"\",\n};\n\nconst potLink = `https://bos.potlock.io/?tab=pot&potId=${potId}${\n  context.accountId && `&referrerId=${context.accountId}`\n}`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  padding: 64px 4rem 80px;\n  .pool-table {\n    max-width: 514px;\n    width: 100%;\n  }\n  @media only screen and (max-width: 1068px) {\n    flex-direction: column;\n    .pool-table {\n      margin: auto;\n    }\n  }\n  @media only screen and (max-width: 768px) {\n    padding: 3rem 0;\n\n    .pool-table {\n      max-width: 100%;\n    }\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  flex: 1;\n`;\n\nconst Title = styled.div`\n  font-size: 40px;\n  font-weight: 500;\n  font-family: \"Lora\";\n`;\nconst Description = styled.div`\n  max-width: 498px;\n  line-height: 1.5em;\n  a {\n    color: #7b7b7b;\n    font-weight: 600;\n  }\n`;\n\nconst Fund = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  > div {\n    display: flex;\n    gap: 8px;\n    align-items: baseline;\n    div {\n      font-weight: 600;\n    }\n  }\n  .near-price {\n    font-size: 24px;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  a,\n  button {\n    width: 180px;\n    padding: 16px;\n  }\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    gap: 1rem;\n    a,\n    button {\n      width: 100%;\n    }\n  }\n`;\nconst Referral = styled.div`\n  font-size: 14px;\n  gap: 12px;\n  display: flex;\n  align-items: center;\n`;\n\nconst payoutsChallenges = PotSDK.getPayoutsChallenges(potId);\n\nif (!flaggedAddresses) {\n  PotSDK.getFlaggedAccounts(potDetail, potId)\n    .then((data) => {\n      const listOfFlagged = [];\n      data.forEach((adminFlaggedAcc) => {\n        const addresses = Object.keys(adminFlaggedAcc.potFlaggedAcc);\n        listOfFlagged.push(...addresses);\n      });\n      setFlaggedAddresses(listOfFlagged);\n    })\n    .catch((err) => console.log(\"error getting the flagged accounts \", err));\n}\n\nconst handleSetPayouts = () => {\n  if (allDonations && flaggedAddresses !== null) {\n    const payouts = Object.entries(\n      calculatePayouts(allDonations, matching_pool_balance, flaggedAddresses)\n    )\n      .map(([projectId, { matchingAmount }]) => ({ project_id: projectId, amount: matchingAmount }))\n      .filter((payout) => payout.amount !== \"0\");\n    PotSDK.chefSetPayouts(potId, payouts);\n  } else {\n    console.log(\"error fetching donations or flagged addresses\");\n  }\n};\n\nconst handleProcessPayouts = () => {\n  PotSDK.adminProcessPayouts(potId);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ----> // TODO: implement\n};\n\nconst existingChallengeForUser = (payoutsChallenges || []).find(\n  (challenge) => challenge.challenger_id === context.accountId\n);\n\nconst canDonate = sybilRequirementMet && projects.length > 0;\n\nreturn (\n  <Container>\n    <Header>\n      <Title>{pot_name}</Title>\n      <Description>\n        <Markdown text={pot_description} />\n      </Description>\n      <Fund>\n        <div className=\"label\">Matching Funds Available:</div>\n        <div>\n          <div className=\"near-price\">{yoctosToNear(matching_pool_balance, true)}</div>\n          {nearToUsd && (\n            <div lassName=\"usd-price\"> {yoctosToUsdWithFallback(matching_pool_balance, true)}</div>\n          )}\n        </div>\n      </Fund>\n      <ButtonsWrapper>\n        {publicRoundOpen && context.accountId && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              text: canDonate ? \"Donate\" : \"Verify to Donate\",\n              href: canDonate ? null : NADA_BOT_URL,\n              onClick: canDonate\n                ? () => {\n                    setIsModalDonationOpen(true);\n                  }\n                : null,\n              target: canDonate ? \"_self\" : \"_blank\",\n              iconSrc: canDonate ? null : NADABOT_ICON_URL,\n            }}\n          />\n        )}\n        {now < public_round_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              text: \"Fund matching pool\",\n              onClick: () => setIsMatchingPoolModalOpen(true),\n            }}\n          />\n        )}\n        {applicationOpen && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: registrationApproved || projectNotRegistered ? \"primary\" : \"tertiary\",\n              text:\n                registryStatus && !registrationApproved\n                  ? `Project Registration ${registryStatus}`\n                  : \"Apply to pot\",\n              style: { marginRight: \"24px\" },\n              disabled: registryStatus && !registrationApproved,\n              onClick: () => setApplicationModalOpen(true),\n            }}\n          />\n        )}\n        {now > public_round_end_ms && now < cooldown_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              existingChallengeForUser,\n              text: existingChallengeForUser ? \"Update challenge\" : \"Challenge payouts\",\n              onClick: () => setShowChallengePayoutsModal(true),\n            }}\n          />\n        )}\n        {canPayoutsBeSet && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              ...props,\n              text: \"Set Payouts\",\n              onClick: handleSetPayouts,\n            }}\n          />\n        )}\n        {canPayoutsBeProcessed && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              ...props,\n              type: \"primary\",\n              text: \"Process Payouts\",\n              onClick: handleProcessPayouts,\n            }}\n          />\n        )}\n      </ButtonsWrapper>\n      <Referral>\n        <Widget\n          src={`${ownerId}/widget/Project.CopyIcon`}\n          props={{\n            textToCopy: potLink,\n          }}\n        />\n        Earn referral fees\n      </Referral>\n    </Header>\n    <div className=\"pool-table\">\n      <Widget src={`${ownerId}/widget/Pots.PoolAllocationTable`} props={props} />\n    </div>\n    <Widget\n      src={`${ownerId}/widget/Pots.FundModal`}\n      props={{\n        ...props,\n        isMatchingPoolModalOpen,\n        onClose: () => setIsMatchingPoolModalOpen(false),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Pots.ChallengeModal`}\n      props={{\n        ...props,\n        showChallengePayoutsModal,\n        onCancel: () => setShowChallengePayoutsModal(false),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/ModalDonation.Main`}\n      loading={\"\"}\n      props={{\n        ...props,\n        isModalOpen: isModalDonationOpen,\n        onClose: () => setIsModalDonationOpen(false),\n        potId,\n        potDetail,\n        projects,\n        referrerId,\n        multiple: true,\n        openDonationModalSuccess: (donation) => {\n          setIsModalDonationOpen(false);\n          setSuccessfulDonation(donation);\n        },\n      }}\n    />\n    {successfulDonation && (\n      <Widget\n        src={`${ownerId}/widget/Project.ModalSuccess`}\n        props={{\n          ...props,\n          successfulDonation: successfulDonation,\n          isModalOpen: successfulDonation != null,\n          onClose: () => setSuccessfulDonation(null),\n        }}\n      />\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Header", "fact_widget_deployments_id": "c283679e194a5272d7463da7b528ab65", "inserted_timestamp": "2024-04-30T19:47:44.840Z", "modified_timestamp": "2024-04-30T19:47:44.840Z", "__row_index": 8}