{"tx_hash": "2rcmQqATVW4BoygGqtqi6TFhtNMAfoCsjE8tpzC8mMxb", "action_id_social": "8fnVvTj1QcU9PheLuwcDTgaZ5V8G2fvhLdVdnvoTdd27-0-widget", "block_id": 108717292, "block_timestamp": "2023-12-24T17:10:14.832Z", "signer_id": "potlock.near", "widget_name": "Pots.Header", "source_code": "const { ownerId, potId, MAX_DONATION_MESSAGE_LENGTH, formatDate } = props;\n\nconst loraCss = fetch(\"https://fonts.googleapis.com/css2?family=Lora&display=swap\").body;\n\nBig.PE = 100;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: center;\n  padding: 60px 80px;\n  gap: 40px;\n  width: 100%;\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 40%;\n`;\n\nconst Title = styled.div`\n  color: #292929;\n  font-size: 48px;\n  font-weight: 400;\n  line-height: 56px;\n  word-wrap: break-word;\n  font-family: \"Lora\";\n\n  ${loraCss}\n`;\n\nconst Description = styled.div`\n  color: #292929;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst ColumnRightSegment = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n  padding: 24px 0px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nconst H2 = styled.div`\n  color: #292929;\n  font-size: 24px;\n  font-weight: 600;\n  line-height: 32px;\n  word-wrap: break-word;\n`;\n\nconst H3 = styled.div`\n  color: #7b7b7b;\n  font-size: 17px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst Time = styled.span`\n  color: #292929;\n  font-size: 17px;\n  font-weight: 600;\n  line-height: 24px;\n  word-wrap: break-word;\n`;\n\nconst StatusText = styled.div`\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 16px;\n  word-wrap: break-word;\n  margin-left: 12px;\n`;\n\nconst ModalTitle = styled.div`\n  color: #525252;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  word-wrap: break-word;\n  margin-bottom: 8px;\n`;\n\nState.init({\n  isMatchingPoolModalOpen: false,\n  matchingPoolDonationAmountNear: \"\",\n  matchingPoolDonationAmountNearError: \"\",\n  matchingPoolDonationMessage: \"\",\n  matchingPoolDonationMessageError: \"\",\n});\n\n// console.log(\"props in header: \", props);\nconst potDetail = Near.view(potId, \"get_config\", {});\n\nif (!potDetail) return \"\";\n\n// console.log(\"pot config: \", potDetail);\n\nconst {\n  owner,\n  admins,\n  chef,\n  pot_name,\n  pot_description,\n  application_start_ms,\n  application_end_ms,\n  public_round_start_ms,\n  public_round_end_ms,\n  min_matching_pool_donation_amount,\n  base_currency,\n  matching_pool_balance,\n  registry_provider,\n  cooldown_end_ms,\n  all_paid_out,\n} = potDetail;\n\nconst minmatchingPoolDonationAmountNear = props.SUPPORTED_FTS[\n  base_currency.toUpperCase()\n].fromIndivisible(min_matching_pool_donation_amount);\n\nconst now = Date.now();\nconst applicationOpen = now >= application_start_ms && now < application_end_ms;\nconst publicRoundOpen = now >= public_round_start_ms && now < public_round_end_ms;\nconst publicRoundClosed = now >= public_round_end_ms;\nconst userIsAdminOrGreater = admins.includes(context.accountId) || owner === context.accountId;\nconst userIsChefOrGreater = userIsAdminOrGreater || chef === context.accountId;\n\nconst canPayoutsBeSet = publicRoundClosed && userIsChefOrGreater && !cooldown_end_ms;\nconst canPayoutsBeProcessed =\n  publicRoundClosed && userIsAdminOrGreater && now >= cooldown_end_ms && !all_paid_out;\nconst cooldownPeriodInProgress = publicRoundClosed && now < cooldown_end_ms;\nconst potComplete = all_paid_out;\n\nconst existingApplication = Near.view(potId, \"get_application_by_project_id\", {\n  project_id: context.accountId,\n});\n\nconst canApply = applicationOpen && !existingApplication && !userIsChefOrGreater;\n\n// const publicRoundOpen = true;\n\nconst daysUntil = (timestamp) => {\n  const now = new Date();\n  const futureDate = new Date(timestamp);\n  const differenceInTime = futureDate - now;\n\n  // Convert time difference from milliseconds to days\n  const differenceInDays = Math.ceil(differenceInTime / (1000 * 3600 * 24));\n\n  return `${differenceInDays} ${differenceInDays === 1 ? \"day\" : \"days\"} to go`;\n};\n\nconst handleFundMatchingPool = () => {\n  State.update({ isMatchingPoolModalOpen: true });\n};\n\nconst handleApplyToPot = () => {\n  props.setApplicationModalOpen(true);\n};\n\nconst totalMatchingPoolAmount =\n  props.SUPPORTED_FTS[base_currency.toUpperCase()].fromIndivisible(matching_pool_balance);\n\nconst handleMatchingPoolDonation = () => {\n  const { matchingPoolDonationAmountNear } = state;\n  // TODO: implement\n  const args = {\n    message: state.matchingPoolDonationMessage,\n    matching_pool: true,\n    // TODO: ADD REFERRER ID\n  };\n  // const deposit = Big(JSON.stringify(args).length * 0.00003).plus(Big(\"10000000000000000000000\")); // add extra 0.01 NEAR as buffer\n  const amountFloat = parseFloat(matchingPoolDonationAmountNear || 0);\n  if (!amountFloat) {\n    State.update({ matchingPoolDonationAmountNearError: \"Invalid amount\" });\n    return;\n  }\n  const amountIndivisible =\n    props.SUPPORTED_FTS[base_currency.toUpperCase()].toIndivisible(amountFloat);\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"donate\",\n      deposit: amountIndivisible,\n      args,\n      gas: props.ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ----> // TODO: implement\n};\n\nconst handleProcessPayouts = () => {\n  // TODO: implement admin_process_payouts\n  const args = {};\n  const transactions = [\n    {\n      contractName: potId,\n      methodName: \"admin_process_payouts\",\n      deposit: \"0\",\n      args,\n      gas: props.ONE_TGAS.mul(100),\n    },\n  ];\n  Near.call(transactions);\n  // NB: we won't get here if user used a web wallet, as it will redirect to the wallet\n  // <---- EXTENSION WALLET HANDLING ----> // TODO: implement\n};\n\nreturn (\n  <Container>\n    <Column style={{ gap: \"48px\" }}>\n      <Title>{pot_name}</Title>\n      <Description>{pot_description}</Description>\n    </Column>\n    <Column>\n      <ColumnRightSegment\n        style={{ borderTop: \"1px #7B7B7B solid\", borderBottom: \"1px #7B7B7B solid\" }}\n      >\n        <Row style={{ gap: \"8px\" }}>\n          <H2>{`${totalMatchingPoolAmount} ${base_currency.toUpperCase()} `}</H2>\n          <Description>Matching funds available</Description>\n        </Row>\n      </ColumnRightSegment>\n      <ColumnRightSegment>\n        {applicationOpen && (\n          <>\n            <Row\n              style={{\n                // marginTop: \"24px\",\n                marginBottom: \"8px\",\n                width: \"100%\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Row>\n                <Widget\n                  src={`${ownerId}/widget/Components.Indicator`}\n                  props={{\n                    colorOuter: \"#CAFDF3\",\n                    colorInner: \"#33DDCB\",\n                  }}\n                />\n                <StatusText style={{ color: \"#0B7A74\" }}>All applications are open</StatusText>\n              </Row>\n              <StatusText style={{ color: \"#292929\" }}>{daysUntil(application_end_ms)}</StatusText>\n            </Row>\n            <H3>\n              Application starts on <Time>{formatDate(application_start_ms)}</Time> and ends on{\" \"}\n              <Time>{formatDate(application_end_ms)}</Time>\n            </H3>\n          </>\n        )}\n        {publicRoundOpen && (\n          <>\n            <Row\n              style={{\n                marginTop: applicationOpen ? \"24px\" : \"0px\",\n                marginBottom: \"8px\",\n                width: \"100%\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Row>\n                <Widget\n                  src={`${ownerId}/widget/Components.Indicator`}\n                  props={{\n                    colorOuter: \"#D7F5A1\",\n                    colorInner: \"#9ADD33\",\n                  }}\n                />\n                <StatusText style={{ color: \"#4A7714\" }}>Matching round live</StatusText>\n              </Row>\n              <StatusText style={{ color: \"#292929\" }}>{daysUntil(public_round_end_ms)}</StatusText>\n            </Row>\n            <H3>\n              Round starts on <Time>{formatDate(public_round_start_ms)}</Time> and ends on{\" \"}\n              <Time>{formatDate(public_round_end_ms)}</Time>\n            </H3>\n          </>\n        )}\n        {publicRoundClosed && <props.ToDo>Add round closed indicator</props.ToDo>}\n      </ColumnRightSegment>\n      <Row style={{ gap: \"24px\" }}>\n        {now < public_round_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: publicRoundOpen ? \"secondary\" : \"primary\",\n              text: \"Fund matching pool\",\n              onClick: handleFundMatchingPool,\n            }}\n          />\n        )}\n        {canApply && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"tertiary\",\n              text: \"Apply to pot\",\n              onClick: handleApplyToPot,\n            }}\n          />\n        )}\n        {publicRoundOpen && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              text: \"Donate to projects\",\n              href: `?tab=pot&potId=${potId}&nav=projects`,\n            }}\n          />\n        )}\n        {canPayoutsBeSet && (\n          <Widget\n            src={`${ownerId}/widget/Pots.CalculateSetPayoutsButton`}\n            props={{\n              ...props,\n              potDetail,\n            }}\n          />\n        )}\n        {canPayoutsBeProcessed && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              ...props,\n              type: \"primary\",\n              text: \"Process Payouts\",\n              onClick: handleProcessPayouts,\n            }}\n          />\n        )}\n        {cooldownPeriodInProgress && (\n          <div>Cooldown period ends on {formatDate(cooldown_end_ms)}</div>\n        )}\n        {potComplete && <div style={{ color: \"red\" }}>Pot complete</div>}\n      </Row>\n    </Column>\n    <Widget\n      src={`${ownerId}/widget/Components.Modal`}\n      props={{\n        ...props,\n        isModalOpen: state.isMatchingPoolModalOpen,\n        onClose: () => State.update({ isMatchingPoolModalOpen: false }),\n        children: (\n          <>\n            <ModalTitle>\n              Enter matching pool contribution amount\n              {min_matching_pool_donation_amount === \"1\"\n                ? \"(no minimum)\"\n                : `(Min. ${totalMatchingPoolAmount} ${base_currency.toUpperCase()})`}\n            </ModalTitle>\n            <Widget\n              src={`${ownerId}/widget/Inputs.Text`}\n              props={{\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Enter amount here in NEAR\",\n                value: state.matchingPoolDonationAmountNear,\n                onChange: (matchingPoolDonationAmountNear) =>\n                  State.update({ matchingPoolDonationAmountNear }),\n                validate: () => {\n                  // TODO: add validation logic here\n                  State.update({ matchingPoolDonationAmountNearError: \"\" });\n                },\n                error: state.matchingPoolDonationAmountNearError,\n              }}\n            />\n            <Widget\n              src={`${ownerId}/widget/Inputs.TextArea`}\n              props={{\n                noLabel: true,\n                inputRows: 5,\n                inputStyle: {\n                  background: \"#FAFAFA\",\n                },\n                placeholder: \"Enter an optional message\",\n                value: state.matchingPoolDonationMessage,\n                onChange: (matchingPoolDonationMessage) =>\n                  State.update({ matchingPoolDonationMessage }),\n                validate: () => {\n                  if (state.matchingPoolDonationMessage.length > MAX_DONATION_MESSAGE_LENGTH) {\n                    State.update({\n                      matchingPoolDonationMessageError: `Message must be less than ${MAX_DONATION_MESSAGE_LENGTH} characters`,\n                    });\n                    return;\n                  }\n\n                  State.update({ matchingPoolDonationMessageError: \"\" });\n                },\n                error: state.matchingPoolDonationMessageError,\n              }}\n            />\n            <props.ToDo>NB: No referrals yet</props.ToDo>\n            <props.ToDo>Display fees breakdown and amount after fees</props.ToDo>\n            <Row style={{ justifyContent: \"flex-end\", marginTop: \"12px\" }}>\n              <Widget\n                src={`${ownerId}/widget/Components.Button`}\n                props={{\n                  type: \"primary\",\n                  disabled:\n                    !state.matchingPoolDonationAmountNear ||\n                    !!state.matchingPoolDonationAmountNearError ||\n                    !parseFloat(state.matchingPoolDonationAmountNear),\n                  text: `Contribute${\n                    state.matchingPoolDonationAmountNear\n                      ? ` ${state.matchingPoolDonationAmountNear} ${base_currency.toUpperCase()}`\n                      : \"\"\n                  } to matching pool`,\n                  onClick: handleMatchingPoolDonation,\n                }}\n              />\n            </Row>\n          </>\n        ),\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Header", "fact_widget_deployments_id": "42cbcc099d00be2f69d2af6acd6ee440", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 38}