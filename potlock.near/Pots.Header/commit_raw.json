{"tx_hash": "6qgGnM2WnkMYxj6se19x3rj3Fg4DRTATtbmutvgasKtG", "action_id_social": "2kdxDYm4DD9R8E9qr3pryj4EPQbCrca89m3xHCKZWipf-0-widget", "block_id": 115596619, "block_timestamp": "2024-03-27T18:11:41.743Z", "signer_id": "potlock.near", "widget_name": "Pots.Header", "source_code": "const {\n  potDetail,\n  setApplicationModalOpen,\n  potId,\n  sybilRequirementMet,\n  applicationSuccess,\n  registrationApproved,\n  registryStatus,\n  hrefWithParams,\n  nav,\n} = props;\nconst {\n  admins,\n  chef,\n  owner,\n  pot_name,\n  pot_description,\n  registry_provider,\n  matching_pool_balance,\n  public_round_end_ms,\n  public_round_start_ms,\n  application_start_ms,\n  application_end_ms,\n  cooldown_end_ms,\n} = potDetail;\nconst [isMatchingPoolModalOpen, setIsMatchingPoolModalOpen] = useState(false);\nconst [showChallengePayoutsModal, setShowChallengePayoutsModal] =\n  useState(false);\nconst { IPFS_BASE_URL } = VM.require(\"potlock.near/widget/constants\") || {\n  IPFS_BASE_URL: \"\",\n};\nconst NADABOT_ICON_URL =\n  IPFS_BASE_URL + \"bafkreiecgkoybmplo4o542fphclxrhh4nlof5uit3lkzyv4eo2qymrpsru\";\nconst projectNotRegistered = registryStatus === null;\nconst userIsAdminOrGreater =\n  admins.includes(context.accountId) || owner === context.accountId;\nconst userIsChefOrGreater = userIsAdminOrGreater || chef === context.accountId;\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getApplicationByProjectId: () => {},\n};\nconst existingApplication = PotSDK.getApplicationByProjectId(\n  potId,\n  context.accountId\n);\nconst applicationExists = existingApplication || applicationSuccess;\nconst now = Date.now();\nconst publicRoundOpen =\n  now >= public_round_start_ms && now < public_round_end_ms;\nconsole.log(potDetail);\nconst applicationOpen = now >= application_start_ms && now < application_end_ms;\nconst canApply = applicationOpen && !applicationExists && !userIsChefOrGreater;\nconst { ownerId, NADA_BOT_URL } = VM.require(\n  \"potlock.near/widget/constants\"\n) || {\n  ownerId: \"\",\n  NADA_BOT_URL: \"\",\n};\nconst { yoctosToNear, yoctosToUsdWithFallback, nearToUsd } = VM.require(\n  \"potlock.near/widget/utils\"\n) || {\n  yoctosToNear: () => \"\",\n  nearToUsd: 1,\n  yoctosToUsdWithFallback: () => \"\",\n};\nconst potLink = `https://bos.potlock.io/?tab=pot&potId=${potId}${\n  context.accountId && `&referrerId=${context.accountId}`\n}`;\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  padding: 64px 4rem 80px;\n  .pool-table {\n    max-width: 514px;\n    width: 100%;\n  }\n  @media only screen and (max-width: 1068px) {\n    flex-direction: column;\n    .pool-table {\n      margin: auto;\n    }\n  }\n  @media only screen and (max-width: 768px) {\n    padding: 3rem 0;\n    .pool-table {\n      max-width: 100%;\n    }\n  }\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  flex: 1;\n`;\nconst Title = styled.div`\n  font-size: 40px;\n  font-weight: 500;\n  font-family: \"Lora\";\n`;\nconst Description = styled.div`\n  max-width: 498px;\n  line-height: 1.5em;\n  a {\n    color: #7b7b7b;\n    font-weight: 600;\n  }\n`;\nconst Fund = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  > div {\n    display: flex;\n    gap: 8px;\n    align-items: baseline;\n    div {\n      font-weight: 600;\n    }\n  }\n  .near-price {\n    font-size: 24px;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  gap: 2rem;\n  a,\n  button {\n    width: 180px;\n    padding: 16px;\n  }\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    gap: 1rem;\n    a,\n    button {\n      width: 100%;\n    }\n  }\n`;\nconst Referral = styled.div`\n  font-size: 14px;\n  gap: 12px;\n  display: flex;\n  align-items: center;\n`;\nconst payoutsChallenges = PotSDK.getPayoutsChallenges(potId);\nconst existingChallengeForUser = (payoutsChallenges || []).find(\n  (challenge) => challenge.challenger_id === context.accountId\n);\nreturn (\n  <Container>\n    <Header>\n      <Title>{pot_name}</Title>\n      <Description>\n        <Markdown text={pot_description} />\n      </Description>\n      <Fund>\n        <div className=\"label\">Matching Funds Available:</div>\n        <div>\n          <div className=\"near-price\">\n            {yoctosToNear(matching_pool_balance, true)}\n          </div>\n          {nearToUsd && (\n            <div lassName=\"usd-price\">\n              {\" \"}\n              {yoctosToUsdWithFallback(matching_pool_balance, true)}\n            </div>\n          )}\n        </div>\n      </Fund>\n      <ButtonsWrapper>\n        {publicRoundOpen &&\n          (nav !== \"projects\" || !sybilRequirementMet) &&\n          context.accountId && (\n            <Widget\n              src={`${ownerId}/widget/Components.Button`}\n              props={{\n                type: \"primary\",\n                text: sybilRequirementMet ? \"Donate\" : \"Verify to Donate\",\n                href: sybilRequirementMet\n                  ? hrefWithParams(`?tab=pot&potId=${potId}&nav=projects`)\n                  : NADA_BOT_URL,\n                target: sybilRequirementMet ? \"_self\" : \"_blank\",\n                iconSrc: sybilRequirementMet ? null : NADABOT_ICON_URL,\n              }}\n            />\n          )}\n        {now < public_round_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              text: \"Fund matching pool\",\n              onClick: () => setIsMatchingPoolModalOpen(true),\n            }}\n          />\n        )}\n        {applicationOpen && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type:\n                registrationApproved || projectNotRegistered\n                  ? \"primary\"\n                  : \"tertiary\",\n              text:\n                projectNotRegistered && registry_provider\n                  ? \"Register to Apply\"\n                  : registrationApproved || !registry_provider\n                  ? \"Apply to pot\"\n                  : `Project Registration ${registryStatus}`,\n              style: { marginRight: \"24px\" },\n              onClick:\n                projectNotRegistered && registry_provider\n                  ? null\n                  : () => setApplicationModalOpen(true),\n              href:\n                projectNotRegistered && registry_provider\n                  ? props.hrefWithParams(`?tab=createproject`)\n                  : null,\n            }}\n          />\n        )}\n        {now > public_round_end_ms && now < cooldown_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              existingChallengeForUser,\n              text: existingChallengeForUser\n                ? \"Update challenge\"\n                : \"Challenge payouts\",\n              onClick: () => setShowChallengePayoutsModal(true),\n            }}\n          />\n        )}\n      </ButtonsWrapper>\n      <Referral>\n        <Widget\n          src={`${ownerId}/widget/Project.CopyIcon`}\n          props={{\n            textToCopy: potLink,\n          }}\n        />\n        Earn referral fees\n      </Referral>\n    </Header>\n    <div className=\"pool-table\">\n      <Widget\n        src={`${ownerId}/widget/Pots.PoolAllocationTable`}\n        props={props}\n      />\n    </div>\n    <Widget\n      src={`${ownerId}/widget/Pots.FundModal`}\n      props={{\n        ...props,\n        isMatchingPoolModalOpen,\n        onClose: () => setIsMatchingPoolModalOpen(false),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Pots.ChallengeModal`}\n      props={{\n        ...props,\n        showChallengePayoutsModal,\n        onCancel: () => setShowChallengePayoutsModal(false),\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Header", "fact_widget_deployments_id": "bd8980a8276ebad67273d72512191452", "inserted_timestamp": "2024-03-27T19:30:46.766Z", "modified_timestamp": "2024-03-27T19:30:46.766Z", "__row_index": 37}