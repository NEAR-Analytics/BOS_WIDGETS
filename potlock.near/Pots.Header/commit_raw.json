{"tx_hash": "5WKT5FdC72EBy3nrSLQg9F2iBEDY5mVNYB5ZTdYSx2ut", "action_id_social": "9hq3mAvjsYssy2dgnSrmJ4ZathuQRvoNvPkvELDPNm9B-0-widget", "block_id": 115983403, "block_timestamp": "2024-04-02T12:54:25.615Z", "signer_id": "potlock.near", "widget_name": "Pots.Header", "source_code": "const {\n  potDetail,\n  setApplicationModalOpen,\n  potId,\n  sybilRequirementMet,\n  applicationSuccess,\n  registrationApproved,\n  registryStatus,\n  hrefWithParams,\n  nav,\n} = props;\n\nconst {\n  admins,\n  chef,\n  owner,\n  pot_name,\n  pot_description,\n  registry_provider,\n  matching_pool_balance,\n  public_round_end_ms,\n  public_round_start_ms,\n  application_start_ms,\n  application_end_ms,\n  cooldown_end_ms,\n} = potDetail;\n\nconst [isMatchingPoolModalOpen, setIsMatchingPoolModalOpen] = useState(false);\nconst [showChallengePayoutsModal, setShowChallengePayoutsModal] = useState(false);\n\nconst { IPFS_BASE_URL } = VM.require(\"potlock.near/widget/constants\") || {\n  IPFS_BASE_URL: \"\",\n};\n\nconst NADABOT_ICON_URL =\n  IPFS_BASE_URL + \"bafkreiecgkoybmplo4o542fphclxrhh4nlof5uit3lkzyv4eo2qymrpsru\";\n\nconst projectNotRegistered = registryStatus === null;\nconst userIsAdminOrGreater = admins.includes(context.accountId) || owner === context.accountId;\nconst userIsChefOrGreater = userIsAdminOrGreater || chef === context.accountId;\n\nconst PotSDK = VM.require(\"potlock.near/widget/SDK.pot\") || {\n  getApplicationByProjectId: () => {},\n};\n\nconst existingApplication = PotSDK.getApplicationByProjectId(potId, context.accountId);\n\nconst applicationExists = existingApplication || applicationSuccess;\n\nconst now = Date.now();\nconst publicRoundOpen = now >= public_round_start_ms && now < public_round_end_ms;\nconsole.log(potDetail);\n\nconst applicationOpen = now >= application_start_ms && now < application_end_ms;\n\nconst canApply = applicationOpen && !applicationExists && !userIsChefOrGreater;\n\nconst { ownerId, NADA_BOT_URL } = VM.require(\"potlock.near/widget/constants\") || {\n  ownerId: \"\",\n  NADA_BOT_URL: \"\",\n};\nconst { yoctosToNear, yoctosToUsdWithFallback, nearToUsd } = VM.require(\n  \"potlock.near/widget/utils\"\n) || {\n  yoctosToNear: () => \"\",\n  nearToUsd: 1,\n  yoctosToUsdWithFallback: () => \"\",\n};\n\nconst potLink = `https://bos.potlock.io/?tab=pot&potId=${potId}${\n  context.accountId && `&referrerId=${context.accountId}`\n}`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  padding: 64px 4rem 80px;\n  .pool-table {\n    max-width: 514px;\n    width: 100%;\n  }\n  @media only screen and (max-width: 1068px) {\n    flex-direction: column;\n    .pool-table {\n      margin: auto;\n    }\n  }\n  @media only screen and (max-width: 768px) {\n    padding: 3rem 0;\n\n    .pool-table {\n      max-width: 100%;\n    }\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  flex: 1;\n`;\n\nconst Title = styled.div`\n  font-size: 40px;\n  font-weight: 500;\n  font-family: \"Lora\";\n`;\nconst Description = styled.div`\n  max-width: 498px;\n  line-height: 1.5em;\n  a {\n    color: #7b7b7b;\n    font-weight: 600;\n  }\n`;\n\nconst Fund = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  > div {\n    display: flex;\n    gap: 8px;\n    align-items: baseline;\n    div {\n      font-weight: 600;\n    }\n  }\n  .near-price {\n    font-size: 24px;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  gap: 2rem;\n  a,\n  button {\n    width: 180px;\n    padding: 16px;\n  }\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    gap: 1rem;\n    a,\n    button {\n      width: 100%;\n    }\n  }\n`;\nconst Referral = styled.div`\n  font-size: 14px;\n  gap: 12px;\n  display: flex;\n  align-items: center;\n`;\n\nconst payoutsChallenges = PotSDK.getPayoutsChallenges(potId);\n\nconst existingChallengeForUser = (payoutsChallenges || []).find(\n  (challenge) => challenge.challenger_id === context.accountId\n);\n\nreturn (\n  <Container>\n    <Header>\n      <Title>{pot_name}</Title>\n      <Description>\n        <Markdown text={pot_description} />\n      </Description>\n      <Fund>\n        <div className=\"label\">Matching Funds Available:</div>\n        <div>\n          <div className=\"near-price\">{yoctosToNear(matching_pool_balance, true)}</div>\n          {nearToUsd && (\n            <div lassName=\"usd-price\"> {yoctosToUsdWithFallback(matching_pool_balance, true)}</div>\n          )}\n        </div>\n      </Fund>\n      <ButtonsWrapper>\n        {publicRoundOpen && (nav !== \"projects\" || !sybilRequirementMet) && context.accountId && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"primary\",\n              text: sybilRequirementMet ? \"Donate\" : \"Verify to Donate\",\n              href: sybilRequirementMet\n                ? hrefWithParams(`?tab=pot&potId=${potId}&nav=projects`)\n                : NADA_BOT_URL,\n              target: sybilRequirementMet ? \"_self\" : \"_blank\",\n              iconSrc: sybilRequirementMet ? null : NADABOT_ICON_URL,\n            }}\n          />\n        )}\n        {now < public_round_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              text: \"Fund matching pool\",\n              onClick: () => setIsMatchingPoolModalOpen(true),\n            }}\n          />\n        )}\n        {applicationOpen && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: registrationApproved || projectNotRegistered ? \"primary\" : \"tertiary\",\n              // text:\n              //   projectNotRegistered && registry_provider\n              //     ? \"Register to Apply\"\n              //     : registrationApproved || !registry_provider\n              //     ? \"Apply to pot\"\n              //     : `Project Registration ${registryStatus}`,\n              text:\n                registryStatus && !registrationApproved\n                  ? `Project Registration ${registryStatus}`\n                  : \"Apply to pot\",\n              style: { marginRight: \"24px\" },\n              disabled: registryStatus && !registrationApproved,\n              onClick: () => setApplicationModalOpen(true),\n              // projectNotRegistered && registry_provider\n              //   ? null\n              //   : () => setApplicationModalOpen(true),\n              // href:\n              //   projectNotRegistered && registry_provider\n              //     ? props.hrefWithParams(`?tab=createproject`)\n              //     : null,\n            }}\n          />\n        )}\n        {now > public_round_end_ms && now < cooldown_end_ms && (\n          <Widget\n            src={`${ownerId}/widget/Components.Button`}\n            props={{\n              type: \"secondary\",\n              existingChallengeForUser,\n              text: existingChallengeForUser ? \"Update challenge\" : \"Challenge payouts\",\n              onClick: () => setShowChallengePayoutsModal(true),\n            }}\n          />\n        )}\n      </ButtonsWrapper>\n      <Referral>\n        <Widget\n          src={`${ownerId}/widget/Project.CopyIcon`}\n          props={{\n            textToCopy: potLink,\n          }}\n        />\n        Earn referral fees\n      </Referral>\n    </Header>\n    <div className=\"pool-table\">\n      <Widget src={`${ownerId}/widget/Pots.PoolAllocationTable`} props={props} />\n    </div>\n    <Widget\n      src={`${ownerId}/widget/Pots.FundModal`}\n      props={{\n        ...props,\n        isMatchingPoolModalOpen,\n        onClose: () => setIsMatchingPoolModalOpen(false),\n      }}\n    />\n    <Widget\n      src={`${ownerId}/widget/Pots.ChallengeModal`}\n      props={{\n        ...props,\n        showChallengePayoutsModal,\n        onCancel: () => setShowChallengePayoutsModal(false),\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/potlock.near/widget/Pots.Header", "fact_widget_deployments_id": "0290781d01df82eeb1a3e026a0bfac60", "inserted_timestamp": "2024-04-02T14:35:41.475Z", "modified_timestamp": "2024-04-02T14:35:41.475Z", "__row_index": 46}