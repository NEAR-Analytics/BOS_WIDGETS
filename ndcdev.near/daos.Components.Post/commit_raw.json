{"tx_hash": "6okKCRgDZ7kG2j2L2XyQWPeRA86zzMJbGCwPadMA9wu6", "action_id_social": "8Dbz5h3oip9Z9Z1vTFdMdqUz9frwqWP6gQKkG2s54nfv-0-widget", "block_id": 114696802, "block_timestamp": "2024-03-14T14:10:25.435Z", "signer_id": "ndcdev.near", "widget_name": "daos.Components.Post", "source_code": "let { assets, contractName } = VM.require(`ndcdev.near/widget/daos.Config`);\nconst { item, index, showMoreDefault, showCommentsDefault, type, preview } =\n  props;\n\nif (!item || !contractName) return <Widget src=\"flashui.near/widget/Loading\" />;\nconst [itemState, setItemState] = useState(item);\nconst metrics = itemState.metrics ?? itemState;\nassets = assets.home;\nconst accountId = context.accountId;\n\nconst Container = styled.div`\n  width: 100%;\n  height: max-content;\n  padding: 3rem;\n\n  @media screen and (max-width: 786px) {\n    padding: 1rem;\n  }\n`;\n\nconst Card = styled.div`\n  border-radius: 10px;\n  background: #fff;\n  box-shadow: 0px 30px 80px 0px rgba(0, 0, 0, 0.1);\n  padding: 2rem 3rem;\n\n  h3 {\n    font-size: 24px;\n    font-style: normal;\n    font-weight: 600;\n    margin: 10px 0;\n  }\n\n  p {\n    font-size: 14px;\n  }\n\n  .dao-img {\n    width: 20px;\n    height: 20px;\n  }\n\n  .metric {\n    border-radius: 10px;\n    height: 80px;\n    width: 120px;\n    background: linear-gradient(\n      258deg,\n      rgba(162, 195, 254, 0.5) 0%,\n      rgba(225, 197, 252, 0.5) 28.72%,\n      rgba(241, 220, 210, 0.5) 100%\n    );\n    @media screen and (max-width: 786px) {\n      width: 100%;\n    }\n  }\n\n  .info {\n    display: flex;\n    align-items: center;\n  }\n\n  .actions {\n    @media screen and (max-width: 786px) {\n      width: 100%;\n      justify-content: space-between;\n    }\n  }\n\n  .tag {\n    border-radius: 50px;\n    background: #a4c2fd;\n    width: max-content;\n    padding: 4px 15px;\n    font-size: 14px;\n    text-align: center;\n    color: white;\n  }\n\n  @media screen and (max-width: 786px) {\n    padding: 1.5rem;\n  }\n\n  :hover {\n    background: #ffffff;\n  }\n`;\n\nconst Status = styled.div`\n  border-radius: 50px;\n  border: 1px solid ${(props) => props.color};\n  width: max-content;\n  padding: 4px 15px;\n  font-size: 14px;\n  text-align: center;\n  color: ${(props) => props.color};\n`;\n\nconst Comments = styled.div`\n  border-top: 1px solid #efefef;\n  padding-top: 1rem;\n`;\n\nconst StatusSelect = styled.div`\n  @media screen and (max-width: 786px) {\n    width: 100%;\n  }\n`;\n\nconst Button = styled.a`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  margin-left: auto;\n  height: 40px;\n  padding: 10px 20px;\n  background: #a4c2fd1a;\n  border-radius: 18px;\n  color: #686467;\n  border: 1px solid #a4c2fd1a;\n\n  &:hover {\n    text-decoration: none;\n    border: 1px solid #a4c2fd;\n  }\n\n  @media screen and (max-width: 786px) {\n    width: 100%;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n  padding: 3px;\n  margin-bottom: ${(p) => (p.marginBottom ? \"30px\" : \"\")};\n\n  &:hover {\n    position: relative;\n    border-radius: 10px;\n    background: linear-gradient(\n      270deg,\n      #efdcd1 -1.69%,\n      #e0c6f7 43.78%,\n      #adc3fb 99.83%\n    );\n  }\n`;\n\nconst [showMore, setShowMore] = useState(showMoreDefault);\nconst [showComments, setShowComments] = useState(showCommentsDefault);\nconst [copiedShareUrl, setCopiedShareUrl] = useState(false);\nconst pageName = type === \"Report\" ? \"reports\" : \"proposals\";\n\nconst isLiked = (item) => {\n  return item.likes && item.likes.find((item) => item.author_id === accountId);\n};\n\nconst handleLike = () => {\n  if (!accountId) return;\n  Near.call(contractName, isLiked(itemState) ? \"post_unlike\" : \"post_like\", {\n    id: itemState.id,\n  });\n};\n\nconst handleSpam = () => {\n  if (!accountId) return;\n  Near.call(contractName, \"change_post_is_spam\", {\n    id: itemState.id,\n    is_spam: !itemState.is_spam,\n  });\n};\n\nconst dao = Near.view(contractName, \"get_dao_by_id\", {\n  id: parseInt(itemState.dao_id),\n});\n\nlet snapshot;\n\nif (itemState.id)\n  snapshot = Near.view(contractName, \"get_post_history\", {\n    id: itemState.id,\n  });\n\nif (!dao) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst statuses = [\n  { key: \"InReview\", value: \"In Review\" },\n  { key: \"New\", value: \"New\" },\n  { key: \"Approved\", value: \"Approved\" },\n  { key: \"Rejected\", value: \"Rejected\" },\n  { key: \"Closed\", value: \"Closed\" },\n];\n\nconst handleShowComments = () => {\n  if (!accountId) return;\n  setShowComments(!showComments);\n};\nconst changeStatus = async (item, status) => {\n  if (!accountId) return;\n  Near.call(contractName, \"change_post_status\", {\n    id: item.id,\n    status,\n  });\n};\n\nconst changeHistory = (e) => {\n  const next = snapshot.find((i) => i.timestamp === e.target.value);\n  setItemState((prev) => ({ ...prev, ...next }));\n};\n\nconst colorMap = (status) => {\n  switch (status) {\n    case \"New\":\n      return \"rgb(146 168 210)\";\n    case \"Closed\":\n      return \"rgb(196 196 196)\";\n    case \"InReview\":\n      return \"rgb(223 193 73)\";\n    case \"Approved\":\n      return \"rgb(99 222 100)\";\n    case \"Rejected\":\n      return \"rgb(214 113 113)\";\n    default:\n      break;\n  }\n};\n\nconst CardItem = ({ item, index }) => (\n  <CardContainer marginBottom={showCommentsDefault}>\n    <Card key={index} className=\"d-flex flex-column gap-3\">\n      <div className=\"d-flex flex-wrap align-items-center justify-content-between gap-3\">\n        <Widget\n          src=\"mob.near/widget/Profile\"\n          props={{\n            accountId: item.author_id,\n            tooltip: true,\n          }}\n        />\n\n        {item.status && (\n          <>\n            {dao.owners.includes(accountId) ? (\n              <StatusSelect>\n                <select\n                  className=\"form-control\"\n                  value={item.status}\n                  onChange={(status) => changeStatus(item, status.target.value)}\n                >\n                  {statuses.map(({ key, value }) => (\n                    <option value={key}>{value}</option>\n                  ))}\n                </select>\n              </StatusSelect>\n            ) : (\n              <div className=\"d-flex gap-3 align-items-center\">\n                <Status color={colorMap(item.status)}>{item.status}</Status>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <div className=\"d-flex flex-column gap-3\">\n        <div className=\"d-flex gap-3 align-items-center justify-content-between\">\n          <h3>{item.title}</h3>\n          {item.author_id === accountId && item.status === \"InReview\" && (\n            <a\n              href={`https://near.org/ndcdev.near/widget/daos.App?page=edit_proposal&id=${item.id}&dao_id=${dao.handle}`}\n            >\n              <i className=\"bi blue bi-pencil-fill fs-5\" />\n            </a>\n          )}\n          {snapshot.length > 1 && showCommentsDefault && (\n            <div className=\"d-flex flex-column gap-1 align-items-center\">\n              <small>History</small>\n              <select\n                value={item.timestamp}\n                onChange={changeHistory}\n                className=\"form-control\"\n              >\n                {snapshot.map((history) => (\n                  <option value={history.timestamp}>\n                    {new Date(history.timestamp / 1000000).toLocaleDateString()}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n        </div>\n\n        <div className=\"d-flex flex-column gap-1\">\n          <div className=\"info\">\n            <span style={{ width: \"12rem\" }}>Updated at:</span>\n            <span>\n              {item.timestamp\n                ? new Date(item.timestamp / 1000000).toLocaleDateString()\n                : new Date().toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"info\">\n            <span style={{ width: \"12rem\" }}>\n              {em.post_type === \"Proposal\"\n                ? \"Requested sponsor:\"\n                : \"Reported to:\"}\n            </span>\n            {dao && (\n              <a\n                href={`https://near.org/ndcdev.near/widget/daos.App?page=proposals&dao_id=${dao.handle}`}\n                className=\"d-flex align-items-center gap-1\"\n              >\n                <img className=\"dao-img\" src={dao.logo_url} />\n                <span>{dao.title}</span>\n              </a>\n            )}\n          </div>\n          {item.post_type === \"Proposal\" && (\n            <div className=\"info\">\n              <span style={{ width: \"12rem\" }}>Requested amount:</span>\n              <span>\n                <b>${item.requested_amount ?? 0}</b>\n              </span>\n            </div>\n          )}\n          {item.attachments.length > 0 && (\n            <div>\n              <span style={{ width: \"12rem\" }}>Attachment:</span>\n              <Widget\n                src={\"ndcdev.near/widget/daos.Components.Attachment\"}\n                props={{ attachments: item.attachments }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <a\n        role=\"button\"\n        onClick={() => setShowMore(showMore === index ? null : index)}\n      >\n        <b>\n          See More\n          <i\n            className={`bi blue ${\n              showMore === index ? \"bi-eye\" : \"bi-eye-slash\"\n            }`}\n          />\n        </b>\n      </a>\n\n      {showMore === index &&\n        item.description &&\n        item.post_type === \"Proposal\" && (\n          <Widget\n            src=\"ndcdev.near/widget/daos.Components.MarkdownViewer\"\n            props={{ text: item.description }}\n          />\n        )}\n\n      {showMore === index && item.post_type === \"Report\" && (\n        <>\n          {metrics[\"audience\"] && (\n            <>\n              <h5>\n                How many people did your project reach during this funding\n                period?\n              </h5>\n              <h3>\n                <b>{metrics[\"audience\"]}</b>\n              </h3>\n            </>\n          )}\n          {metrics[\"growth\"] && (\n            <>\n              <h5>\n                How does this month's audience reach compare to previous periods\n                (provide a %)\n              </h5>\n              <h3>\n                <b>{metrics[\"growth\"]}</b>\n              </h3>\n            </>\n          )}\n          {metrics[\"average_engagement_rate\"] && (\n            <>\n              <h5>\n                What is the average engagement rate on your project's primary\n                platform (choose one)? Use the formula (Total Likes, Shares &\n                Comments / Total Followers) X 100 = AER %\n              </h5>\n              <h3>\n                <b>{metrics[\"average_engagement_rate\"]}</b>\n              </h3>\n            </>\n          )}\n          {metrics[\"performance_statement_1\"] && (\n            <>\n              <h5>\n                What is the biggest win (most improved part of project) during\n                this funding period vs. the previous one (if applicable)?\n              </h5>\n              <Widget\n                src=\"ndcdev.near/widget/daos.Components.MarkdownViewer\"\n                props={{\n                  text: metrics[\"performance_statement_1\"],\n                }}\n              />\n            </>\n          )}\n          {metrics[\"performance_statement_2\"] && (\n            <>\n              <h5>\n                What is the biggest challenge your project is facing? What did\n                not improve during this funding period?\n              </h5>\n              <Widget\n                src=\"ndcdev.near/widget/daos.Components.MarkdownViewer\"\n                props={{\n                  text: metrics[\"performance_statement_2\"],\n                }}\n              />\n            </>\n          )}\n        </>\n      )}\n\n      {item.labels?.length > 0 && (\n        <div className=\"d-flex flex-wrap gap-2\">\n          {item.labels?.map((tag) => (\n            <div className=\"tag\"># {tag}</div>\n          ))}\n        </div>\n      )}\n\n      {!preview && (\n        <div className=\"d-flex flex-wrap gap-3 align-items-center justify-content-between\">\n          <div className=\"actions d-flex gap-5 align-items-center\">\n            <div\n              role=\"button\"\n              className=\"d-flex gap-2 align-items-center\"\n              onClick={handleLike}\n            >\n              <span className=\"blue\">{item.likes.length}</span>\n              <i\n                className={`bi blue ${\n                  isLiked(item) ? \"bi-heart-fill\" : \"bi-heart\"\n                }`}\n              />\n            </div>\n\n            <div\n              role=\"button\"\n              className=\"d-flex gap-2 align-items-center\"\n              onClick={handleShowComments}\n            >\n              <span className=\"blue\">{item.comments.length}</span>\n              <i className=\"bi blue bi-reply fs-5\" />\n            </div>\n\n            <div role=\"button\" className=\"d-flex gap-2\">\n              <Widget\n                src={\"ndcdev.near/widget/daos.Components.Clipboard\"}\n                props={{\n                  text: `https://near.org/ndcdev.near/widget/daos.App?page=proposal&id=${item.id}`,\n                }}\n              />\n            </div>\n\n            {dao.owners.includes(accountId) && (\n              <div role=\"button\" onClick={handleSpam}>\n                <i\n                  className={\n                    item.is_spam ? \"bi red bi-flag-fill\" : \"bi blue bi-flag\"\n                  }\n                />\n              </div>\n            )}\n          </div>\n\n          <Button\n            href={`/ndcdev.near/widget/daos.App?page=proposal&id=${item.id}`}\n          >\n            {`Open ${item.post_type}`}\n            <i className={\"bi blue bi-box-arrow-up-right\"} />\n          </Button>\n        </div>\n      )}\n\n      {showComments && (\n        <Comments>\n          <Widget\n            src=\"ndcdev.near/widget/daos.Components.Comments\"\n            props={{\n              postId: item.id,\n              showCreate: true,\n            }}\n          />\n        </Comments>\n      )}\n    </Card>\n  </CardContainer>\n);\n\nreturn (\n  <>\n    {(!itemState.is_spam || dao.owners.includes(accountId)) && (\n      <CardItem item={itemState} index={index} />\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/daos.Components.Post", "fact_widget_deployments_id": "1cfe333cc6c308893f44bb58697eac5c", "inserted_timestamp": "2024-03-14T15:27:30.705Z", "modified_timestamp": "2024-03-14T15:27:30.705Z", "__row_index": 12}