{"tx_hash": "ELkEfRqwNNrfR5bTi6ERKrEbXUawmKWNhcvEdLU39TS6", "action_id_social": "Gx4pZswrjqx4RkubvM2yyRUmgLetsyXvdrP16nL8JAbp-0-widget", "block_id": 117034406, "block_timestamp": "2024-04-17T11:51:18.444Z", "signer_id": "ndcdev.near", "widget_name": "daos-staging.Components.CreateReply", "source_code": "let { contractName } = VM.require(`ndcdev.near/widget/daos-staging.Config`);\nconst { postId, commentId, edit } = props;\nconst Loading = () => <Widget src=\"flashui.near/widget/Loading\" />;\nconst accountId = context.accountId;\nlet comment;\n\nif (!contractName) return <Loading />;\n\nState.init({\n  text: \"\",\n  showPreview: false,\n  attachments: [],\n});\n\nif (edit === \"true\" && commentId)\n  comment = Near.view(contractName, \"get_comment_by_id\", {\n    id: parseInt(commentId),\n  });\n\nuseEffect(() => {\n  State.update({\n    text: comment.snapshot.description ?? \"\",\n    attachments: comment.snapshot.attachments ?? [],\n  });\n}, [comment]);\n\nconst profile = Social.getr(`${accountId}/profile`);\nconst autocompleteEnabled = true;\n\nfunction composeData() {\n  if (!accountId) return;\n  const params = {\n    post_id: parseInt(postId),\n    description: state.text,\n    attachments: state.attachments,\n  };\n  if (commentId && !edit) params.reply_to = parseInt(commentId);\n\n  if (edit && comment)\n    params = {\n      comment_id: parseInt(comment.id),\n      description: state.text,\n      attachments: state.attachments,\n    };\n\n  Near.call(\n    contractName,\n    comment ? \"edit_comment\" : \"add_comment\",\n    params,\n    \"200000000000000\",\n    10000000000000000000000,\n  );\n}\n\nfunction onCommit() {\n  State.update({\n    text: \"\",\n    attachments: [],\n  });\n}\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\n\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\n\nconst handlePreview = () => {\n  if (!accountId) return;\n  State.update({ showPreview: !state.showPreview });\n};\n\nconst Wrapper = styled.div`\n  --padding: 24px;\n  position: relative;\n\n  @media (max-width: 1024px) {\n    --padding: 12px;\n  }\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  pointer-events: none;\n  position: absolute;\n  top: var(--padding);\n  left: var(--padding);\n\n  img {\n    object-fit: cover;\n    border-radius: 40px;\n    width: 100%;\n    height: 100%;\n  }\n\n  @media (max-width: 992px) {\n    display: none;\n  }\n`;\n\nconst Textarea = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n\n  &::after,\n  textarea {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 164px;\n    font: inherit;\n    padding: var(--padding) var(--padding) calc(40px + (var(--padding) * 2))\n      calc(40px + (var(--padding) * 2));\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: none;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n\n    @media (max-width: 1024px) {\n      min-height: 124px;\n    }\n\n    @media (max-width: 992px) {\n      padding-left: var(--padding);\n    }\n  }\n\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n\n  textarea {\n    transition: all 200ms;\n\n    &::placeholder {\n      opacity: 1;\n      color: #687076;\n    }\n\n    &:empty + p {\n      display: block;\n    }\n\n    box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    margin: 1rem 0;\n  }\n`;\n\nconst TextareaDescription = styled.p`\n  position: absolute;\n  top: calc(var(--padding) + 3rem);\n  left: calc(42px + (var(--padding) * 2));\n  right: var(--padding);\n  font-size: 10px;\n  line-height: 18px;\n  font-weight: 400;\n  color: #687076;\n  pointer-events: none;\n  display: none;\n\n  a {\n    color: #000;\n    outline: none;\n    font-weight: 600;\n    pointer-events: auto;\n\n    &:hover,\n    &:focus {\n      color: #000;\n      text-decoration: underline;\n    }\n  }\n\n  @media (max-width: 992px) {\n    left: var(--padding);\n  }\n`;\n\nconst Actions = styled.div`\n  display: inline-flex;\n  gap: 12px;\n  position: absolute;\n  bottom: var(--padding);\n  right: var(--padding);\n\n  .commit-post-button,\n  .preview-post-button,\n  .attachment-button {\n    background: #a4c2fd;\n    color: #09342e;\n    border-radius: 40px;\n    height: 40px;\n    padding: 0 35px;\n    font-weight: 600;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition:\n      background 200ms,\n      opacity 200ms;\n\n    &:hover,\n    &:focus {\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n  }\n\n  .preview-post-button,\n  .attachment-button {\n    color: #11181c;\n    background: #f1f3f5;\n    padding: 0;\n    width: 40px;\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n  }\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition:\n      background 200ms,\n      opacity 200ms;\n\n    &::before {\n      font-size: 16px;\n    }\n\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    span {\n      margin-left: 12px;\n    }\n  }\n\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    bottom: 1.5rem;\n  }\n\n  @media screen and (max-width: 1024px) {\n    bottom: 1.5rem;\n  }\n`;\n\nconst PreviewWrapper = styled.div`\n  position: relative;\n`;\n\nconst AutoComplete = styled.div`\n  position: absolute;\n  z-index: 5;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nreturn (\n  <Wrapper>\n    {state.showPreview ? (\n      <PreviewWrapper>\n        <Widget\n          src=\"ndcdev.near/widget/daos-staging.Components.Comment\"\n          props={{\n            comment: {\n              snapshot: {\n                timestamp: `${new Date().getTime()}000000`,\n                description: state.text,\n                attachments: state.attachments,\n              },\n            },\n            isPreview: true,\n          }}\n        />\n      </PreviewWrapper>\n    ) : (\n      <>\n        <Avatar>\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: profile.image,\n              alt: profile.name,\n              fallbackUrl:\n                \"https://ipfs.near.social/ipfs/bafkreibiyqabm3kl24gcb2oegb7pmwdi6wwrpui62iwb44l7uomnn3lhbi\",\n            }}\n          />\n        </Avatar>\n\n        <Textarea data-value={state.text}>\n          <textarea\n            placeholder=\"What's happening?\"\n            onInput={(event) => textareaInputHandler(event.target.value)}\n            onKeyUp={(event) => {\n              if (event.key === \"Escape\") {\n                State.update({ showAccountAutocomplete: false });\n              }\n            }}\n            value={state.text}\n          />\n\n          <TextareaDescription>\n            <a\n              href=\"https://www.markdownguide.org/basic-syntax/\"\n              target=\"_blank\"\n            >\n              Markdown\n            </a>\n            is supported\n          </TextareaDescription>\n        </Textarea>\n      </>\n    )}\n\n    {autocompleteEnabled && state.showAccountAutocomplete && (\n      <AutoComplete>\n        <Widget\n          src=\"near/widget/AccountAutocomplete\"\n          props={{\n            term: state.text.split(\"@\").pop(),\n            onSelect: autoCompleteAccountId,\n            onClose: () => State.update({ showAccountAutocomplete: false }),\n          }}\n        />\n      </AutoComplete>\n    )}\n\n    <Actions>\n      <button\n        type=\"button\"\n        disabled={!state.text}\n        className=\"preview-post-button\"\n        title={state.showPreview ? \"Edit Post\" : \"Preview Post\"}\n        onClick={handlePreview}\n      >\n        {state.showPreview ? (\n          <i className=\"fs-5 ph ph-pencil-simple\" />\n        ) : (\n          <i className=\"fs-5 ph ph-eye\" />\n        )}\n      </button>\n\n      <Widget\n        src={`ndcdev.near/widget/daos-staging.Components.FileUploader`}\n        props={{\n          onChange: (file) => State.update({ attachments: [file] }),\n        }}\n      />\n\n      <CommitButton\n        disabled={!state.text}\n        force\n        data={composeData}\n        onCancel={onCancel}\n        onCommit={onCommit}\n        className=\"btn-primary\"\n      >\n        Post\n      </CommitButton>\n    </Actions>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/daos-staging.Components.CreateReply", "fact_widget_deployments_id": "0136a5695a5e86f5cb0c28ad70a5b8b5", "inserted_timestamp": "2024-04-17T13:42:16.028Z", "modified_timestamp": "2024-04-17T13:42:16.028Z", "__row_index": 1}