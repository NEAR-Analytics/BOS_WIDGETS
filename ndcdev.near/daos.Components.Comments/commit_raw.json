{"tx_hash": "Dk5XF34JCxHLfJvbogn5k6Stzim76dSsha9eXtATEBE3", "action_id_social": "FNevjfSwiZkTWkHdEbVuQanEhtvkjF6nZPcZ6jLtgZKs-0-widget", "block_id": 113444180, "block_timestamp": "2024-02-23T21:34:57.809Z", "signer_id": "ndcdev.near", "widget_name": "daos.Components.Comments", "source_code": "let { contractName } = VM.require(`ndcdev.near/widget/daos.Config`);\n\nif (!contractName) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst { postId, commentId, showCreate } = props;\nconst accountId = context.accountId;\n\nif (!contractName) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst Post = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 1rem;\n  padding-left: 1rem;\n  border-left: 2px solid rgb(241 241 241);\n`;\n\nconst Header = styled.div`\n  margin-bottom: 0;\n  display: inline-flex;\n  width: 100%;\n`;\n\nconst Body = styled.div`\n  padding: 0rem 1rem;\n`;\n\nconst Content = styled.div`\n  img {\n    display: block;\n    max-width: 100%;\n    max-height: 80vh;\n    margin: 0 0 12px;\n  }\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  margin: -3px 0 10px 0;\n`;\n\nconst [showMore, setShowMore] = useState(null);\nconst [showReply, setShowReply] = useState({ [postId]: showCreate });\n\nconst comments = Near.view(contractName, \"get_post_comments\", {\n  post_id: parseInt(postId),\n});\n\nif (!comments) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst isLikedByMe = (comment) =>\n  comment.likes\n    ? comment.likes.some((like) => like.author_id === accountId)\n    : false;\n\nconst handleLike = (id) => {\n  Near.call(contractName, \"comment_like\", { id });\n};\n\nconst formatDate = (timestamp) =>\n  new Date(parseInt(timestamp) / 1000000).toLocaleDateString();\n\nconst CommentCard = ({ comment }) => (\n  <Body>\n    <Content>\n      <Widget\n        src={\"ndcdev.near/widget/daos.Components.MarkdownViewer\"}\n        props={{ text: comment.snapshot.description }}\n      />\n    </Content>\n\n    <Actions>\n      <div\n        role=\"button\"\n        className=\"d-flex gap-2 align-items-center\"\n        onClick={() => handleLike(comment.id)}\n      >\n        <small className=\"blue\">{comment.likes.length}</small>\n        <i\n          className={`bi blue ${\n            isLikedByMe(comment) ? \"bi-heart-fill\" : \"bi-heart\"\n          }`}\n        />\n      </div>\n      <div\n        role=\"button\"\n        onClick={() => setShowReply({ [comment.id]: !showReply[comment.id] })}\n      >\n        <small className=\"blue\">{comment.child_comments.length}</small>\n        <i className=\"bi blue bi-chat\" />\n      </div>\n      <Link\n        to={`/ndcdev.near/widget/daos.App?page=comments&post_id=${postId}&comment_id=${comment.id}`}\n      >\n        <i class={\"bi blue bi-share\"} />\n      </Link>\n    </Actions>\n  </Body>\n);\n\nconst commentById = (id) => comments.find((c) => c.id === id);\n\nconst CommentsList = ({ comments }) => (\n  <>\n    {comments.map((comment) => (\n      <>\n        <Header>\n          <div className=\"my-3 d-flex gap-3 align-items-center justify-content-between\">\n            <Widget\n              src=\"near/widget/AccountProfile\"\n              props={{\n                accountId: comment.author_id,\n                hideAccountId: true,\n              }}\n            />\n            <div className=\"d-flex gap-2 align-items-center justify-content-between\">\n              <i className=\"bi bi-clock\" />\n              <small>{formatDate(comment.snapshot.timestamp)}</small>\n            </div>\n          </div>\n        </Header>\n        <Post>\n          <CommentCard comment={comment} />\n\n          {comment.child_comments.length > 0 && (\n            <CommentsList\n              comments={comment.child_comments.map((childId) =>\n                commentById(childId),\n              )}\n            />\n          )}\n        </Post>\n      </>\n    ))}\n  </>\n);\n\nreturn (\n  <>\n    {!commentId && (\n      <Widget\n        src=\"ndcdev.near/widget/daos.Components.CreateReply\"\n        props={{ id: postId }}\n      />\n    )}\n\n    <CommentsList\n      comments={\n        commentId\n          ? comments.filter((c) => c.id === parseInt(commentId))\n          : comments.filter((c) => !c.parent_comment)\n      }\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/daos.Components.Comments", "fact_widget_deployments_id": "1426fa97ca4ef05d7a5e541337ea71be", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}