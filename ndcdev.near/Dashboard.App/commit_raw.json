{"tx_hash": "5n11dzPKLLo5Ft5c9sMRSRiCFZdkrSUYEmjgn1co7qCf", "action_id_social": "GyQYTg7S4SKpgpjZ9E9jEBsnBG1tiE5PjcSMsVq35J94-0-widget", "block_id": 116484472, "block_timestamp": "2024-04-09T18:25:55.890Z", "signer_id": "ndcdev.near", "widget_name": "dashboard.App", "source_code": "const Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n  gap: 1rem;\n\n  @media screen and (max-width: 786px) {\n    padding: 1rem;\n  }\n`;\n\nconst PeriodSelect = styled.div`\n  width: 150px;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst DAOSelect = styled.div`\n  width: 50%;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    min-width: 150px;\n  }\n`;\n\nconst ChartContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 3rem;\n\n  @media screen and (max-width: 1188px) {\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n`;\n\nconst { contractName } = VM.require(`ndcdev.near/widget/dashboard.Config`);\n\nconst PERIODS = [\n  { name: \"daily\", value: 1 },\n  { name: \"weekly\", value: 7 },\n  { name: \"monthly\", value: 30 },\n];\nconst defaultDAOOption = \"All DAOs\";\nconst dailyTotal = { labels: [], data: [] };\nconst dailyTotalUsers = { labels: [], data: [] };\n\nconst [loading, setLoading] = useState(false);\nconst [period, setPeriod] = useState(PERIODS[0].name);\nconst [selectedDAOs, setSelectedDAOs] = useState([]);\nconst [dataState, setDataState] = useState({\n  totalTx: 0,\n  totalAccounts: 0,\n  uniqueAccounts: 0,\n  dailyStats: [],\n});\n\nconst baseUrl = \"https://dashboard.chatme.page\";\n\nconst get = async (url) => {\n  try {\n    return asyncFetch(`${baseUrl}/${url}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst daos = Near.view(contractName, \"get_dao_list\");\nif (!daos) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst formatDate = () => {\n  const diff = PERIODS.find((p) => p.name === period).value;\n  const dateNow = new Date();\n  const prevDate = new Date(new Date().setDate(new Date().getDate() - diff));\n\n  const fmt = (date) => date.toLocaleDateString().split(\"/\");\n  return {\n    startDate: `${fmt(prevDate)[2]}-${fmt(prevDate)[1]}-${fmt(prevDate)[0]}`,\n    endDate: `${fmt(dateNow)[2]}-${fmt(dateNow)[1]}-${fmt(dateNow)[0]}`,\n  };\n};\n\n// /api/total - General Stats\n// /api/user-retention - User Retention\n// /api/dapps-used - Dapps Used\n// /api/social-engagement - Social Engagement\nconst params = `start_date=${formatDate().startDate}&end_date=${\n  formatDate().endDate\n}`;\n\nconst API = {\n  getTotal: () =>\n    get(`api/total?${params}&&dao_list=[${daos.map((d) => d.id)}]`),\n  getDailyStats: () =>\n    get(`api/daily-stats?${params}&&dao_list=[${daos.map((d) => d.id)}]`),\n  userRetentions: (daos) =>\n    get(`api/user-retention?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n  dappsUsed: (daos) =>\n    get(`api/dapps-used?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n  acquisitionCost: (daos) =>\n    get(`api/acquisition-cost?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n  socialEngagement: (daos) =>\n    get(`api/social-engagement?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n};\n\nconst fetchData = () => {\n  setLoading(true);\n\n  API.getTotal().then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body.data;\n    const newState = dataState;\n    newState.totalTx = data.transactions;\n    newState.totalAccounts = data.accounts;\n    newState.uniqueAccounts = data.active_users;\n    setDataState(newState);\n    setLoading(false);\n  });\n\n  API.getDailyStats().then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body.data;\n    const newState = dataState;\n    newState.dailyStats = data;\n    setDataState(newState);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  fetchData();\n}, [selectedDAOs, period]);\n\nconst onSelectChange = (value) => {\n  const isDefaultOption = value === defaultDAOOption;\n\n  const updateSelectedDAOs = () => {\n    if (isDefaultOption) {\n      const all = [...daos, defaultDAOOption];\n      if (selectedDAOs.length === all.length) {\n        return [];\n      }\n      return all;\n    } else if (selectedDAOs.includes(value)) {\n      return selectedDAOs.filter(\n        (dao) => dao !== value && dao !== defaultDAOOption\n      );\n    } else {\n      return [...selectedDAOs, value];\n    }\n  };\n\n  setSelectedDAOs(updateSelectedDAOs());\n};\n\nconst SelectContainer = styled.div`\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nreturn (\n  <Container>\n    <SelectContainer className=\"d-flex w-100 gap-3 justify-content-between\">\n      <DAOSelect>\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Select`}\n          props={{\n            options: daos.map((d) => d.title),\n            defaultValue: defaultDAOOption,\n            multiple: true,\n            values: selectedDAOs,\n            containerClass: \"selected-container\",\n            onClear: () => setSelectedDAOs([]),\n            onChange: onSelectChange,\n          }}\n        />\n      </DAOSelect>\n      <PeriodSelect>\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Select`}\n          props={{\n            options: PERIODS.map((v) => capitalizeFirstLetter(v.name)),\n            isOpen: selectOpen,\n            values: period,\n            onChange: (v) => setPeriod(v.toLowerCase()),\n            containerClass: \"selected-container\",\n          }}\n        />\n      </PeriodSelect>\n    </SelectContainer>\n    <Widget\n      src={`ndcdev.near/widget/dashboard.Components.Aggregators`}\n      props={{\n        totalTx: dataState.totalTx,\n        totalAccounts: dataState.totalAccounts,\n        uniqueAccounts: dataState.uniqueAccounts,\n        loading,\n      }}\n    />\n    <ChartContainer>\n      <Widget\n        src={`ndcdev.near/widget/dashboard.Components.Chart`}\n        props={{\n          title: \"DAILY NUMBER OF TRANSACTIONS\",\n          data: dataState.dailyStats,\n          key: \"total_transactions\",\n          loading,\n        }}\n      />\n      <Widget\n        src={`ndcdev.near/widget/dashboard.Components.Chart`}\n        props={{\n          title: \"UNIQUE ACTIVE USERS\",\n          data: dataState.dailyStats,\n          key: \"unique_wallets\",\n          loading,\n        }}\n      />\n    </ChartContainer>\n    <div className=\"section py-5 flex-column\">\n      <Widget\n        src={`ndcdev.near/widget/dashboard.Components.Table`}\n        props={{ daos, API }}\n      />\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/dashboard.App", "fact_widget_deployments_id": "43cf2e669faafd26b48e3ee6c5a34367", "inserted_timestamp": "2024-04-09T19:41:33.250Z", "modified_timestamp": "2024-04-09T20:35:27.099Z", "__row_index": 3}