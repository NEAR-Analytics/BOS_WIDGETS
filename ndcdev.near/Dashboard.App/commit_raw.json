{"tx_hash": "ACrhVodojYYJGKxMXWprn3EP8HPWhaYW5uX9zzZ71dz5", "action_id_social": "s1MyEyamW83QTTXF7e9YdeDJ76UY8ERqbmPP7grD7RM-0-widget", "block_id": 117034449, "block_timestamp": "2024-04-17T11:52:10.990Z", "signer_id": "ndcdev.near", "widget_name": "dashboard.App", "source_code": "const Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n  gap: 1rem;\n\n  @media screen and (max-width: 786px) {\n    padding: 1rem;\n  }\n`;\n\nconst SelectContainer = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  gap: 1rem;\n  width: 100%;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Title = styled.div`\n  color: #1b1b18;\n  font-size: 26px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  gap: 1rem;\n`;\n\nconst ChartContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 3rem;\n\n  @media screen and (max-width: 1188px) {\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n`;\n\nconst { contractName } = VM.require(`ndcdev.near/widget/dashboard.Config`);\n\nconst PERIODS = [\n  { name: \"daily\", value: 1 },\n  { name: \"weekly\", value: 7 },\n  { name: \"monthly\", value: 30 },\n];\nconst defaultDAOOption = \"All DAOs\";\nconst dailyTotal = { labels: [], data: [] };\nconst dailyTotalUsers = { labels: [], data: [] };\n\nconst [loading, setLoading] = useState(false);\nconst [period, setPeriod] = useState([new Date(), new Date()]);\nconst [selectedDAOs, setSelectedDAOs] = useState([]);\nconst [dashboardView, setDashboardView] = useState(\"Table\");\nconst [dataState, setDataState] = useState({\n  totalTx: 0,\n  totalAccounts: 0,\n  uniqueAccounts: 0,\n  dailyStats: [],\n});\n\nconst baseUrl = \"https://dashboard.chatme.page\";\n\nconst get = async (url) => {\n  try {\n    return asyncFetch(`${baseUrl}/${url}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nif (!contractName) return <Widget src=\"flashui.near/widget/Loading\" />;\nconst daos = Near.view(contractName, \"get_dao_list\");\nif (!daos) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst formatDate = () => {\n  const fmt = (date) => date.toLocaleDateString().split(\"/\");\n\n  return {\n    startDate: `${fmt(period[0])[2]}-${fmt(period[0])[1]}-${fmt(period[0])[0]}`,\n    endDate: `${fmt(period[1])[2]}-${fmt(period[1])[1]}-${fmt(period[1])[0]}`,\n  };\n};\n\n// /api/total - General Stats\n// /api/user-retention - User Retention\n// /api/dapps-used - Dapps Used\n// /api/social-engagement - Social Engagement\nconst params = `start_date=${formatDate().startDate}&end_date=${\n  formatDate().endDate\n}`;\n\nconsole.log(params);\n\nconst API = {\n  getTotal: () =>\n    get(`api/total?${params}&&dao_list=[${daos.map((d) => d.id)}]`),\n  getDailyStats: () =>\n    get(`api/daily-stats?${params}&&dao_list=[${daos.map((d) => d.id)}]`),\n  userRetentions: (daos) =>\n    get(`api/user-retention?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n  dappsUsed: (daos) =>\n    get(`api/dapps-used?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n  acquisitionCost: (daos) =>\n    get(`api/acquisition-cost?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n  socialEngagement: (daos) =>\n    get(`api/social-engagement?${params}&dao_list=[${daos.map((d) => d.id)}]`),\n};\n\nconst fetchData = () => {\n  setLoading(true);\n\n  API.getTotal().then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body.data;\n    const newState = dataState;\n    newState.totalTx = data.transactions;\n    newState.totalAccounts = data.accounts;\n    newState.uniqueAccounts = data.active_users;\n    setDataState(newState);\n    setLoading(false);\n  });\n\n  API.getDailyStats().then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body.data;\n    const newState = dataState;\n    newState.dailyStats = data;\n    setDataState(newState);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  fetchData();\n}, [selectedDAOs, daos, period]);\n\nconst onSelectChange = (value) => {\n  const isDefaultOption = value === defaultDAOOption;\n\n  const updateSelectedDAOs = () => {\n    if (isDefaultOption) {\n      const all = [...daos, defaultDAOOption];\n      if (selectedDAOs.length === all.length) {\n        return [];\n      }\n      return all;\n    } else if (selectedDAOs.includes(value)) {\n      return selectedDAOs.filter(\n        (dao) => dao !== value && dao !== defaultDAOOption,\n      );\n    } else {\n      return [...selectedDAOs, value];\n    }\n  };\n\n  setSelectedDAOs(updateSelectedDAOs());\n};\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nreturn (\n  <Container>\n    <SelectContainer>\n      <Title>NDC Dashboard</Title>\n      <Filters>\n        <div style={{ width: \"300px\" }} className=\"positiion-relative\">\n          <Widget\n            src={`ndcdev.near/widget/dashboard.Components.DatePicker`}\n            props={{\n              handleChange: ({ startDate, endDate }) =>\n                setPeriod([startDate, endDate]),\n            }}\n          />\n        </div>\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Switch`}\n          props={{\n            options: [\n              { title: \"Charts\", icon: \"ph ph-chart-bar\" },\n              { title: \"Table\", icon: \"ph ph-table\" },\n            ],\n            value: dashboardView,\n            onChange: () =>\n              setDashboardView(dashboardView === \"Charts\" ? \"Table\" : \"Charts\"),\n          }}\n        />\n      </Filters>\n    </SelectContainer>\n    <Widget\n      src={`ndcdev.near/widget/dashboard.Components.Aggregators`}\n      props={{\n        totalTx: dataState.totalTx,\n        totalAccounts: dataState.totalAccounts,\n        uniqueAccounts: dataState.uniqueAccounts,\n      }}\n    />\n    {dashboardView === \"Charts\" ? (\n      <ChartContainer>\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Chart`}\n          props={{\n            title: \"DAILY NUMBER OF TRANSACTIONS\",\n            data: dataState.dailyStats,\n            key: \"total_transactions\",\n            loading,\n          }}\n        />\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Chart`}\n          props={{\n            title: \"UNIQUE ACTIVE USERS\",\n            data: dataState.dailyStats,\n            key: \"unique_wallets\",\n            loading,\n          }}\n        />\n      </ChartContainer>\n    ) : (\n      <div className=\"w-100 section py-5 flex-column\">\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Table`}\n          props={{ daos, API, period }}\n        />\n      </div>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/dashboard.App", "fact_widget_deployments_id": "04f7dc4fc3725417bb472a42554cbe25", "inserted_timestamp": "2024-04-17T13:42:16.028Z", "modified_timestamp": "2024-04-17T13:42:16.028Z", "__row_index": 3}