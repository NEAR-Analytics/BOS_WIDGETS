{"tx_hash": "JA98kk4PxJeR8ZnrH8UvRRdu8HfwPFsCGX37u7sk3S1X", "action_id_social": "4AJYHGxsmnixCmFXBAegFqYm32VAMEzB4GTjE9gSPqkp-0-widget", "block_id": 117463026, "block_timestamp": "2024-04-23T17:02:35.871Z", "signer_id": "ndcdev.near", "widget_name": "dashboard.App", "source_code": "const Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n  gap: 2rem;\n`;\n\nconst SelectContainer = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  gap: 1rem;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  color: #1b1b18;\n  font-style: normal;\n  font-weight: 700;\n  line-height: normal;\n  text-wrap: nowrap;\n  font-size: 24px;\n\n  @media screen and (max-width: 768px) {\n    font-size: 22px;\n  }\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  gap: 1rem;\n\n  @media screen and (max-width: 768px) {\n    gap: 0.5rem;\n  }\n\n  .wrapper {\n    position: relative;\n    display: flex;\n    justify-content: flex-end;\n    width: 300px;\n\n    &.mobile {\n      display: none;\n      width: 50px;\n\n      @media screen and (max-width: 768px) {\n        display: flex;\n      }\n    }\n\n    @media screen and (max-width: 768px) {\n      display: none;\n    }\n\n    .value {\n      display: flex;\n      color: #3f3f3f;\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 350;\n      line-height: 16px;\n      width: 100%;\n      height: 46px;\n      padding: 0px 14px;\n      align-items: center;\n      border-radius: 100px;\n      border: 1px solid #e3e3e0;\n      background: var(--NEAR-Primary-Colors-White, #fff);\n    }\n\n    .icon {\n      position: absolute;\n      top: 14px;\n      right: 20px;\n      z-index: 1001;\n      display: flex;\n\n      @media screen and (max-width: 768px) {\n        top: 0;\n        right: 0;\n        width: 40px;\n        height: 40px;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        border: 1px solid #e3e3e0;\n      }\n    }\n  }\n`;\n\nconst ChartContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 3rem;\n\n  @media screen and (max-width: 1188px) {\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n`;\n\nconst DesktopPicker = styled.div`\n  display: flex;\n\n  @media screen and (max-width: 1188px) {\n    display: none;\n  }\n`;\n\nconst MobilePicker = styled.div`\n  display: none;\n\n  @media screen and (max-width: 1188px) {\n    display: flex;\n  }\n`;\n\nconst { contractName } = VM.require(`ndcdev.near/widget/dashboard.Config`);\n\nconst defaultDAOOption = \"All DAOs\";\nconst dailyTotal = { labels: [], data: [] };\nconst dailyTotalUsers = { labels: [], data: [] };\nconst today = new Date();\nconst [loading, setLoading] = useState(false);\nconst [period, setPeriod] = useState([\n  new Date(),\n  new Date(today.setMonth(today.getMonth() - 1)),\n]);\nconst [showDatePicker, setShowDatePicker] = useState(false);\nconst [dateRange, setDateRange] = useState(\"\");\nconst [selectedDAOs, setSelectedDAOs] = useState([]);\nconst [dashboardView, setDashboardView] = useState(\"Table\");\nconst [mobile, setMobile] = useState(false);\nconst [dataState, setDataState] = useState({\n  totalTx: 0,\n  totalAccounts: 0,\n  uniqueAccounts: 0,\n  totalBalance: 0,\n  distributed: 0,\n  dailyStats: [],\n});\n\nconst baseUrl = \"https://dashboard.chatme.page\";\n\nconst get = async (url) => {\n  try {\n    return asyncFetch(`${baseUrl}/${url}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nif (!contractName) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst daos = Near.view(contractName, \"get_dao_list\");\nif (!daos) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst formatDate = () => {\n  const fmt = (date) => date.toLocaleDateString().split(\"/\");\n  const startDate = `${fmt(period[0])[2]}-${fmt(period[0])[1]}-${\n    fmt(period[0])[0]\n  }`;\n  const endDate = `${fmt(period[1])[2]}-${fmt(period[1])[1]}-${\n    fmt(period[1])[0]\n  }`;\n\n  setDateRange(`start_date=${startDate}&end_date=${endDate}`);\n\n  return { startDate, endDate };\n};\n\nconst API = {\n  getTotal: () =>\n    get(`api/total?${dateRange}&&dao_list=[${daos.map((d) => d.id)}]`),\n  getDailyStats: () =>\n    get(`api/daily-stats?${dateRange}&&dao_list=[${daos.map((d) => d.id)}]`),\n  userRetentions: (daos) =>\n    get(`api/user-retention?${dateRange}&dao_list=[${daos.map((d) => d.id)}]`),\n  dappsUsed: (daos) =>\n    get(`api/dapps-used?${dateRange}&dao_list=[${daos.map((d) => d.id)}]`),\n  acquisitionCost: (daos) =>\n    get(\n      `api/acquisition-cost?${dateRange}&dao_list=[${daos.map((d) => d.id)}]`,\n    ),\n  socialEngagement: (daos) =>\n    get(\n      `api/social-engagement?${dateRange}&dao_list=[${daos.map((d) => d.id)}]`,\n    ),\n};\n\nconst fetchData = () => {\n  setLoading(true);\n\n  API.getTotal().then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body.data;\n    const newState = dataState;\n    newState.totalTx = data.transactions;\n    newState.totalAccounts = data.accounts;\n    newState.uniqueAccounts = data.active_users;\n    newState.totalBalance = data.totalBalance;\n    newState.distributed = data.distributed;\n    setDataState(newState);\n    setLoading(false);\n  });\n\n  API.getDailyStats().then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body.data;\n    const newState = dataState;\n    newState.dailyStats = data;\n    setDataState(newState);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  formatDate();\n}, [period]);\n\nuseEffect(() => {\n  if (dateRange) fetchData();\n}, [selectedDAOs, daos, dateRange]);\n\nconst onSelectChange = (value) => {\n  const isDefaultOption = value === defaultDAOOption;\n\n  const updateSelectedDAOs = () => {\n    if (isDefaultOption) {\n      const all = [...daos, defaultDAOOption];\n      if (selectedDAOs.length === all.length) {\n        return [];\n      }\n      return all;\n    } else if (selectedDAOs.includes(value)) {\n      return selectedDAOs.filter(\n        (dao) => dao !== value && dao !== defaultDAOOption,\n      );\n    } else {\n      return [...selectedDAOs, value];\n    }\n  };\n\n  setSelectedDAOs(updateSelectedDAOs());\n};\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nreturn (\n  <Container>\n    <SelectContainer>\n      <Title>NDC Dashboard</Title>\n      <Filters>\n        <div className=\"d-flex flex-column gap-1\">\n          <div\n            className=\"wrapper\"\n            onClick={() => {\n              setShowDatePicker(!showDatePicker);\n              setMobile(false);\n            }}\n          >\n            <div className=\"value\">{`${formatDate().startDate} - ${\n              formatDate().endDate\n            }`}</div>\n            <i className=\"icon ph ph-calendar-blank\" />\n          </div>\n          <div\n            className=\"wrapper mobile\"\n            onClick={() => {\n              setShowDatePicker(!showDatePicker);\n              setMobile(true);\n            }}\n          >\n            <i className=\"icon ph ph-calendar-blank\" />\n          </div>\n          <Widget\n            src={`ndcdev.near/widget/dashboard.Components.DatePicker`}\n            props={{\n              period,\n              show: showDatePicker,\n              mobile,\n              handleChange: ({ startDate, endDate }) => {\n                setPeriod([startDate, endDate]);\n                setShowDatePicker(false);\n              },\n            }}\n          />\n        </div>\n\n        <div className=\"w-100\">\n          <Widget\n            src={`ndcdev.near/widget/dashboard.Components.Switch`}\n            props={{\n              options: [\n                { title: \"Charts\", icon: \"ph ph-chart-bar\" },\n                { title: \"Table\", icon: \"ph ph-table\" },\n              ],\n              value: dashboardView,\n              onChange: () =>\n                setDashboardView(\n                  dashboardView === \"Charts\" ? \"Table\" : \"Charts\",\n                ),\n            }}\n          />\n        </div>\n      </Filters>\n    </SelectContainer>\n    <Widget\n      src={`ndcdev.near/widget/dashboard.Components.Aggregators`}\n      props={{\n        totalTx: dataState.totalTx,\n        totalAccounts: dataState.totalAccounts,\n        uniqueAccounts: dataState.uniqueAccounts,\n        totalBalance: dataState.totalBalance,\n        totalDistributed: dataState.distributed,\n      }}\n    />\n    {dashboardView === \"Charts\" ? (\n      <ChartContainer>\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Chart`}\n          props={{\n            title: \"DAILY NUMBER OF TRANSACTIONS\",\n            data: dataState.dailyStats,\n            key: \"total_transactions\",\n            color: \"#A39ACD\",\n            loading,\n          }}\n        />\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Chart`}\n          props={{\n            title: \"UNIQUE ACTIVE USERS\",\n            data: dataState.dailyStats,\n            key: \"unique_wallets\",\n            color: \"#E89DBB\",\n            loading,\n          }}\n        />\n      </ChartContainer>\n    ) : (\n      <div className=\"w-100 flex-column\">\n        <Widget\n          src={`ndcdev.near/widget/dashboard.Components.Table`}\n          props={{ daos, API, dateRange }}\n        />\n      </div>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/dashboard.App", "fact_widget_deployments_id": "b611a201a81f78345f6c28391348d067", "inserted_timestamp": "2024-04-23T18:43:16.795Z", "modified_timestamp": "2024-04-23T19:39:39.293Z", "__row_index": 1}