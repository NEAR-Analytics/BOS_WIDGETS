{"tx_hash": "XNFDycA7yUwwDjz1huEoY8xeaCsZdc51g6EPygwxPNi", "action_id_social": "G6uvLac4Y2h2Q6KXF92XWBvNe5YdcaX8g14GnLqEfmxJ-0-widget", "block_id": 112172006, "block_timestamp": "2024-02-05T16:53:59.348Z", "signer_id": "ndcdev.near", "widget_name": "Dashboard.Components.Table.index", "source_code": "const { ScrollableWrapper } = VM.require(\n  `ndcdev.near/widget/Dashboard.Components.Table.styled`,\n);\n\nconst { ndcDAOs, API } = props;\nconst Loading = () => <Widget src=\"flashui.near/widget/Loading\" />;\n\nif (!ScrollableWrapper) return <Loading />;\n\nconst defaultDAOOption = \"All DAOs\";\nconst CURRENCIES = {\n  NEAR: \"Near\",\n  \"USDC.e\": \"a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near\",\n  \"USDT.e\": \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n};\nconst RETENTIONS = [\"1 month\", \"2 months\", \"3 months\", \"4 months\"];\nconst DAPPS_USED_PERIOD = [\"All Time\"];\n\nconst [dataSet, setDataSet] = useState({});\nconst [loading, setLoading] = useState(false);\n\nconst [allDAOs, setAllDAOs] = useState([]);\nconst [allDapps, setAllDapps] = useState([]);\nconst [selectedDAOs, setSelectedDAOs] = useState([]);\nconst [selectedRetention, setSelectedRetention] = useState(0);\nconst [selectedCurrency, setSelectedCurrency] = useState(\n  Object.keys(CURRENCIES)[0],\n);\n\nconst FILTERS = [\n  {\n    text: \"DAO\",\n    hintText: \"NDC grassroots DAOs\",\n    options: [defaultDAOOption, ...ndcDAOs],\n    values: selectedDAOs,\n    defaultValue: defaultDAOOption,\n    multiple: true,\n    onChange: (value) => filterDAO(value),\n    onClear: () => {\n      setSelectedDAOs([]);\n    },\n  },\n  {\n    text: \"User Retention\",\n    hintText: \"Text TBD\",\n    options: RETENTIONS,\n    values: [RETENTIONS[selectedRetention]],\n    onChange: (value) => setSelectedRetention(RETENTIONS.indexOf(value)),\n  },\n  {\n    text: \"DAP's Used\",\n    hintText: \"Text TBD\",\n    options: DAPPS_USED_PERIOD,\n    values: [DAPPS_USED_PERIOD[0]],\n    onChange: (value) => {},\n  },\n  {\n    text: \"Aquisition Cost\",\n    hintText: \"Text TBD\",\n    options: Object.keys(CURRENCIES),\n    values: [selectedCurrency],\n    onChange: (value) => setSelectedCurrency(value),\n  },\n];\n\nconst sortByDAOName = (keys) =>\n  Object.keys(keys)\n    .sort()\n    .reduce((obj, key) => {\n      obj[key] = keys[key];\n      return obj;\n    }, {});\n\nconst filterDAO = (value) => {\n  setSelectedDAOs(\n    value === defaultDAOOption\n      ? []\n      : selectedDAOs.includes(value)\n      ? selectedDAOs.filter(\n          (daoId) => daoId !== value && daoId !== defaultDAOOption,\n        )\n      : [...selectedDAOs, value],\n  );\n};\n\nconst fetchDapps = () => {\n  setLoading(true);\n\n  API.get_dapps().then((resp) => {\n    if (!resp.body) {\n      setLoading(false);\n      return;\n    }\n\n    const dapps = resp.body;\n    if (dapps)\n      setAllDapps(\n        Object.values(dapps)\n          .map((dapps) => dapps.map((d) => d.account_id))\n          .reduce((a, b) => [...a, ...b], []),\n      );\n  });\n};\n\nconst fetchData = () => {\n  setLoading(true);\n  const filtredDAOs = selectedDAOs.length ? selectedDAOs : ndcDAOs;\n  let newDataSet = {};\n\n  const promises = filtredDAOs.flatMap((daoId) => {\n    newDataSet[daoId] = {\n      balance: 0,\n      interactedAccounts: 0,\n      dappsUsed: 0,\n      retention: {\n        start: 0,\n        end: 0,\n      },\n    };\n\n    return [\n      API.get_retentions(daoId).then((resp) => {\n        if (!resp.body) return;\n\n        const data = resp.body;\n\n        if (data) {\n          const retentionIndex =\n            selectedRetention > data.length - 1\n              ? data.length - 1\n              : selectedRetention;\n          newDataSet[daoId].retention = {\n            start: parseInt(data[retentionIndex].unique_users_start),\n            end: parseInt(data[retentionIndex].unique_users_end),\n          };\n        }\n      }),\n      API.get_balance(daoId).then((resp) => {\n        if (!resp.body) return;\n\n        const data = resp.body;\n        if (data)\n          newDataSet[daoId].balance =\n            data.find((d) => d.contract === CURRENCIES[selectedCurrency])\n              ?.amount ?? 0;\n      }),\n      API.get_contract_relations(daoId).then((resp) => {\n        if (!resp.body) return;\n\n        const interactedAccounts = resp.body;\n        if (interactedAccounts) {\n          newDataSet[daoId].interactedAccounts = interactedAccounts.length;\n          newDataSet[daoId].dappsUsed = allDapps.filter((dapp) =>\n            interactedAccounts.includes(dapp),\n          ).length;\n        }\n      }),\n    ];\n  });\n\n  Promise.all(promises).then(() => {\n    const orderedByDAOState = sortByDAOName(newDataSet);\n    setDataSet(orderedByDAOState);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  fetchDapps();\n}, []);\n\nuseEffect(() => {\n  fetchData();\n}, [selectedDAOs, selectedRetention, selectedCurrency, allDapps]);\n\nreturn (\n  <ScrollableWrapper>\n    <div className=\"d-flex gap-2 w-100\">\n      {FILTERS.map((filter) => (\n        <Widget\n          src={`ndcdev.near/widget/Dashboard.Components.Table.Filters.index`}\n          props={{ ...filter }}\n        />\n      ))}\n    </div>\n    {loading ? (\n      <Loading />\n    ) : (\n      <Widget\n        src={`ndcdev.near/widget/Dashboard.Components.Table.Cells.index`}\n        props={{ dataSet }}\n      />\n    )}\n  </ScrollableWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/Dashboard.Components.Table.index", "fact_widget_deployments_id": "4db82f5a34c5e0ec7a394e9e1f35455b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}