{"tx_hash": "E8VVkmZxq2gvPKMZAktMoy9UmRUtJRYLqPqiHkaNmdxi", "action_id_social": "FTVCj6TAwAWPAQCN9axBXvv99w68dGt9strrkkVB6g9v-0-widget", "block_id": 112747855, "block_timestamp": "2024-02-13T13:17:32.622Z", "signer_id": "ndcdev.near", "widget_name": "Dashboard.Pages.Home", "source_code": "const Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n  padding: 3rem 4.5rem;\n\n  @media screen and (max-width: 768px) {\n    padding: 3rem 2rem;\n  }\n\n  h3 {\n    font-size: 2rem;\n    font-weight: 400;\n  }\n\n  h4 {\n    font-size: 1.5rem;\n    font-weight: 300;\n  }\n\n  .select-dao {\n    width: 50%;\n    @media screen and (max-width: 768px) {\n      width: 100%;\n      min-width: 150px;\n    }\n  }\n  .select-period {\n    width: 150px;\n    @media screen and (max-width: 768px) {\n      width: 100%;\n    }\n  }\n`;\n\nconst ChartContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 3rem;\n\n  @media screen and (max-width: 1188px) {\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n`;\n\nconst { ndcDAOs } = VM.require(`ndcdev.near/widget/Dashboard.Config`);\n\nif (!ndcDAOs) return <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst PERIODS = [\"daily\", \"weekly\", \"monthly\"];\nconst defaultDAOOption = \"All DAOs\";\nconst dailyTotal = { labels: [], data: [] };\nconst dailyTotalUsers = { labels: [], data: [] };\n\nconst [loading, setLoading] = useState(false);\nconst [period, setPeriod] = useState(PERIODS[0]);\nconst [selectedDAOs, setSelectedDAOs] = useState([]);\nconst [dataState, setDataState] = useState({\n  totalTx: 0,\n  totalAccounts: 0,\n  uniqueAccounts: 0,\n  dailyTotalTx: [],\n  uniqueActiveUsers: [],\n});\n\nconst baseUrl = \"https://api.pikespeak.ai\";\n\nconst get = async (url) => {\n  try {\n    return asyncFetch(`${baseUrl}/${url}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\n      },\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst API = {\n  get_accounts: (accountId) =>\n    get(`event-historic/account/relationships/${accountId}?search=${accountId}\n  `),\n  get_unique_accounts_by_period: (accountId) =>\n    get(`contract-analysis/unique-users-by-period/${accountId}`),\n  get_activity_by_period: (accountId) =>\n    get(`contract-analysis/metrics/${accountId}`),\n  get_retentions: (accountId) =>\n    get(`contract-analysis/retention/${accountId}`),\n  get_dapps_spends: (accountId) =>\n    get(`/contract-analysis/crossdapp-near-spending/${accountId}`),\n  get_aquisition_cost: (accountId) =>\n    get(`/contract-analysis/metrics/${accountId}`),\n  get_contract_relations: (accountId) =>\n    get(\n      `/event-historic/account/relationships/${accountId}?search=${accountId}`,\n    ),\n  get_balance: (accountId) => get(`/account/balance/${accountId}`),\n  get_dapps: () => get(`/contract-analysis/classification?isDapp=true`),\n  // get_dapps_categories: () => get(`/contract-analysis/classification-categories`),\n};\n\nconst fetchData = () => {\n  setLoading(true);\n  let newState = {\n    totalTx: 0,\n    totalAccounts: 0,\n    uniqueAccounts: 0,\n    dailyTotalTx: [],\n    uniqueActiveUsers: [],\n  };\n\n  const daos = selectedDAOs.length ? selectedDAOs : ndcDAOs;\n\n  const promises = daos.flatMap((accountId) => [\n    API.get_accounts(accountId).then((resp) => {\n      if (!resp.body) return;\n\n      newState.totalAccounts += resp.body.length;\n    }),\n    API.get_unique_accounts_by_period(accountId).then((resp) => {\n      if (!resp.body) return;\n\n      newState.uniqueAccounts += parseInt(resp.body[period].data.length);\n      newState.uniqueActiveUsers.push(...resp.body[period].data);\n      newState.totalTx += resp.body[period].data.reduce(\n        (memo, current) => memo + parseInt(current.tx_count),\n        0,\n      );\n      newState.dailyTotalTx.push(\n        ...resp.body[period].data.map((item) => ({\n          date: item.day,\n          count: parseInt(item.tx_count),\n        })),\n      );\n    }),\n  ]);\n\n  Promise.all(promises).then(() => {\n    setDataState(newState);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  fetchData();\n}, [selectedDAOs, period]);\n\ndataState.dailyTotalTx\n  .sort((a, b) => new Date(a.date) - new Date(b.date))\n  .forEach((element) => {\n    dailyTotal.labels.push(element.date);\n    dailyTotal.data.push(element.count);\n  });\n\ndataState.uniqueActiveUsers\n  .sort((a, b) => new Date(a.day) - new Date(b.day))\n  .forEach((element) => {\n    dailyTotalUsers.labels.push(element.day);\n    dailyTotalUsers.data.push(element.unique_users);\n  });\n\nconst onSelectChange = (value) => {\n  const isDefaultOption = value === defaultDAOOption;\n\n  const updateSelectedDAOs = () => {\n    if (isDefaultOption) {\n      const all = [...ndcDAOs, defaultDAOOption];\n      if (selectedDAOs.length === all.length) {\n        return [];\n      }\n      return all;\n    } else if (selectedDAOs.includes(value)) {\n      return selectedDAOs.filter(\n        (dao) => dao !== value && dao !== defaultDAOOption,\n      );\n    } else {\n      return [...selectedDAOs, value];\n    }\n  };\n\n  setSelectedDAOs(updateSelectedDAOs());\n};\n\nconst SelectContainer = styled.div`\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nreturn (\n  <Container>\n    <div className=\"section\">\n      <SelectContainer className=\"d-flex w-100 gap-3 justify-content-between\">\n        <div className=\"select-dao\">\n          <Widget\n            src={`ndcdev.near/widget/Dashboard.Components.Select`}\n            props={{\n              options: ndcDAOs,\n              defaultValue: defaultDAOOption,\n              multiple: true,\n              values: selectedDAOs,\n              containerClass: \"selected-container\",\n              onClear: () => setSelectedDAOs([]),\n              onChange: onSelectChange,\n            }}\n          />\n        </div>\n        <div className=\"select-period\">\n          <Widget\n            src={`ndcdev.near/widget/Dashboard.Components.Select`}\n            props={{\n              options: PERIODS.map((v) => capitalizeFirstLetter(v)),\n              isOpen: selectOpen,\n              values: period,\n              onChange: (v) => setPeriod(v.toLowerCase()),\n              containerClass: \"selected-container\",\n            }}\n          />\n        </div>\n      </SelectContainer>\n    </div>\n    <Widget\n      src={`ndcdev.near/widget/Dashboard.Components.Aggregators`}\n      props={{\n        totalTx: dataState.totalTx,\n        totalAccounts: dataState.totalAccounts,\n        uniqueAccounts: dataState.uniqueAccounts,\n        loading,\n      }}\n    />\n    <ChartContainer>\n      <Widget\n        src={`ndcdev.near/widget/Dashboard.Components.Chart`}\n        props={{\n          title: \"DAILY NUMBER OF TRANSACTIONS\",\n          data: dailyTotal,\n          loading,\n        }}\n      />\n      <Widget\n        src={`ndcdev.near/widget/Dashboard.Components.Chart`}\n        props={{\n          title: \"UNIQUE ACTIVE USERS\",\n          data: dailyTotalUsers,\n          loading,\n        }}\n      />\n    </ChartContainer>\n    <div className=\"section py-5 flex-column\">\n      <Widget\n        src={`ndcdev.near/widget/Dashboard.Components.Table`}\n        props={{ ndcDAOs, API }}\n      />\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/Dashboard.Pages.Home", "fact_widget_deployments_id": "4603dc5fb69a0b2d59258a53abd124a2", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}