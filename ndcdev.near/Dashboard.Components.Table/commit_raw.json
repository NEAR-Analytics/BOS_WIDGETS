{"tx_hash": "2TyiR6jxtf3kVPkmkA3miJYULkp5XpMCNENCgmbPuaMk", "action_id_social": "7BGCG32mBa2ovS6hikWKJ393KUfWrXtpTsn7aTvgt7RJ-0-widget", "block_id": 117371221, "block_timestamp": "2024-04-22T09:03:12.307Z", "signer_id": "ndcdev.near", "widget_name": "dashboard.Components.Table", "source_code": "const ScrollableWrapper = styled.div`\n  width: 100%;\n  min-height: 15rem;\n  @media screen and (max-width: 1341px) {\n    overflow-y: hidden;\n    overflow-x: scroll;\n\n    ::-webkit-scrollbar {\n      height: 15px;\n    }\n\n    ::-webkit-scrollbar-track {\n      background: #f1f1f1;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background: #8799d2;\n      border-radius: 5px;\n    }\n\n    ::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n  }\n  -webkit-overflow-scrolling: touch;\n`;\n\nconst FiltersContainer = styled.div`\n  width: 100%;\n  display: flex;\n  padding: 8px 14px;\n  align-items: flex-start;\n  gap: 72px;\n  align-self: stretch;\n  border-radius: 6px;\n  background: #f8f8f8;\n\n  .selected-container {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 16px;\n    gap: 10px;\n    font-size: 14px;\n    font-weight: 600;\n\n    i {\n      color: #b0afb1;\n    }\n  }\n`;\n\nconst { daos, API, dateRange } = props;\nconst Loading = () => <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst defaultDAOOption = \"All DAOs\";\n\nconst FILTER_IDS = {\n  dao: \"dao\",\n  userRetentions: \"userRetentions\",\n  dappsUsed: \"dappsUsed\",\n  acquisitionCost: \"acquisitionCost\",\n};\n\nconst FILTER_OPENS = Object.keys(FILTER_IDS).map((item) => {\n  return { [item]: false };\n});\n\nconst [dataSet, setDataSet] = useState([]);\nconst [loading, setLoading] = useState(false);\nconst [selectedDAOs, setSelectedDAOs] = useState(daos.map((d) => d.title));\nconst [filtersIsOpen, setFiltersIsOpen] = useState(FILTER_OPENS);\n\nconst onFilterClick = (value) =>\n  setFiltersIsOpen({ ...FILTER_OPENS, [value]: !filtersIsOpen[value] });\n\nconst filterDAO = (value) => {\n  let newSelection;\n\n  if (value === defaultDAOOption) {\n    const all = [defaultDAOOption, ...daos.map((d) => d.title)];\n    const isCurrentSelectionFull = selectedDAOs.length === all.length;\n    newSelection = isCurrentSelectionFull ? [] : all;\n  } else if (selectedDAOs.includes(value)) {\n    newSelection = selectedDAOs.filter(\n      (daoId) => daoId !== value && daoId !== defaultDAOOption\n    );\n  } else {\n    newSelection = [...selectedDAOs, value];\n  }\n\n  setSelectedDAOs(newSelection);\n};\n\nconst fetchData = async (key) => {\n  setLoading(true);\n  const filtredDAOs = selectedDAOs.length\n    ? daos.filter((d) => selectedDAOs.includes(d.title))\n    : daos;\n\n  const newDataSet = dataSet;\n\n  API[key](filtredDAOs).then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body;\n    if (data)\n      Object.entries(data).map(([id, value]) => {\n        const targetData = newDataSet.find((d) => d.id === parseInt(id));\n        targetData[key] = value;\n      });\n\n    setDataSet(newDataSet);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  const filtredDAOs = selectedDAOs.length\n    ? daos.filter((d) => selectedDAOs.includes(d.title))\n    : daos;\n\n  if (dataSet.length === 0)\n    setDataSet(\n      filtredDAOs.map((dao) => {\n        return {\n          id: dao.id,\n          title: dao.title,\n          [FILTER_IDS.userRetentions]: 0,\n          [FILTER_IDS.dappsUsed]: 0,\n          [FILTER_IDS.acquisitionCost]: 0,\n        };\n      })\n    );\n}, [selectedDAOs]);\n\nuseEffect(() => {\n  if (dataSet.length > 0) {\n    fetchData(FILTER_IDS.userRetentions);\n    fetchData(FILTER_IDS.dappsUsed);\n    fetchData(FILTER_IDS.acquisitionCost);\n  }\n}, [dataSet, dateRange]);\n\nconst sortData = (field) =>\n  setDataSet(dataSet.sort((a, b) => b[field] - a[field]));\n\nconst SortingRow = ({ title, field }) => (\n  <div className=\"selected-container\" onClick={() => sortData(field)}>\n    <i className=\"ph ph-info fs-5\" />\n    <div>{title}</div>\n    <i className=\"ph ph-caret-up-down fs-5\" />\n  </div>\n);\n\nreturn (\n  <ScrollableWrapper>\n    <FiltersContainer>\n      <Widget\n        src={`ndcdev.near/widget/dashboard.Components.Select`}\n        props={{\n          id: FILTER_IDS.dao,\n          text: \"DAO\",\n          hintText: \"NDC grassroots DAOs\",\n          options: daos.map((d) => d.title),\n          values: selectedDAOs,\n          defaultValue: defaultDAOOption,\n          multiple: true,\n          filterIsOpen: filtersIsOpen[FILTER_IDS.dao],\n          onFilterClick,\n          onChange: (value) => filterDAO(value),\n          onClear: () => {\n            setSelectedDAOs([]);\n          },\n          isTooltipVisible: true,\n          noBorder: true,\n          containerClass: \"selected-container\",\n        }}\n      />\n      <SortingRow title=\"User Retention\" field={FILTER_IDS.userRetentions} />\n      <SortingRow title=\"DApp's Used\" field={FILTER_IDS.dappsUsed} />\n      <SortingRow title=\"Acquisition Cost\" field={FILTER_IDS.acquisitionCost} />\n    </FiltersContainer>\n    {loading ? (\n      <Loading />\n    ) : (\n      <Widget\n        src={`ndcdev.near/widget/dashboard.Components.Table.Cells`}\n        props={{ dataSet }}\n      />\n    )}\n  </ScrollableWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/dashboard.Components.Table", "fact_widget_deployments_id": "529ea809da8e66ea762ab3d49b299d00", "inserted_timestamp": "2024-04-22T10:34:18.464Z", "modified_timestamp": "2024-04-22T10:34:18.464Z", "__row_index": 4}