{"tx_hash": "5n11dzPKLLo5Ft5c9sMRSRiCFZdkrSUYEmjgn1co7qCf", "action_id_social": "GyQYTg7S4SKpgpjZ9E9jEBsnBG1tiE5PjcSMsVq35J94-0-widget", "block_id": 116484472, "block_timestamp": "2024-04-09T18:25:55.890Z", "signer_id": "ndcdev.near", "widget_name": "dashboard.Components.Table", "source_code": "const ScrollableWrapper = styled.div`\n  width: 100%;\n  min-height: 15rem;\n  @media screen and (max-width: 1341px) {\n    overflow-y: hidden;\n    overflow-x: scroll;\n\n    ::-webkit-scrollbar {\n      height: 15px;\n    }\n\n    ::-webkit-scrollbar-track {\n      background: #f1f1f1;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background: #8799d2;\n      border-radius: 5px;\n    }\n\n    ::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n  }\n  -webkit-overflow-scrolling: touch;\n`;\n\nconst { daos, API } = props;\nconst Loading = () => <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst defaultDAOOption = \"All DAOs\";\nconst CURRENCIES = {\n  NEAR: \"Near\",\n  \"USDC.e\": \"a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near\",\n  \"USDT.e\": \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n};\nconst RETENTIONS = [\"1 month\", \"2 months\", \"3 months\", \"4 months\"];\nconst DAPPS_USED_PERIOD = [\"All Time\"];\n\nconst FILTER_IDS = {\n  dao: \"dao\",\n  userRetention: \"userRetention\",\n  dapUsed: \"dapUsed\",\n  aquisitionCost: \"aquisitionCost\",\n};\n\nconst FILTER_OPENS = Object.keys(FILTER_IDS).map((item) => {\n  return { [item]: false };\n});\n\nconst [dataSet, setDataSet] = useState({});\nconst [loading, setLoading] = useState(false);\nconst [selectedDAOs, setSelectedDAOs] = useState([]);\nconst [selectedRetention, setSelectedRetention] = useState(0);\nconst [selectedCurrency, setSelectedCurrency] = useState(\n  Object.keys(CURRENCIES)[0]\n);\n\nconst [filtersIsOpen, setFiltersIsOpen] = useState(FILTER_OPENS);\nconst onFilterClick = (value) =>\n  setFiltersIsOpen({ ...FILTER_OPENS, [value]: !filtersIsOpen[value] });\n\nconst FILTERS = [\n  {\n    id: FILTER_IDS.dao,\n    text: \"DAO\",\n    hintText: \"NDC grassroots DAOs\",\n    options: [defaultDAOOption, ...daos.map((d) => d.title)],\n    values: selectedDAOs,\n    defaultValue: defaultDAOOption,\n    multiple: true,\n    filterIsOpen: filtersIsOpen[FILTER_IDS.dao],\n    onFilterClick,\n    onChange: (value) => filterDAO(value),\n    onClear: () => {\n      setSelectedDAOs([]);\n    },\n  },\n  {\n    id: FILTER_IDS.userRetention,\n    text: \"User Retention\",\n    hintText:\n      \"The percentage of accounts who continue interacting on chain recently: Accounts onboarded/Accounts left\",\n    options: RETENTIONS,\n    values: [RETENTIONS[selectedRetention]],\n    filterIsOpen: filtersIsOpen[FILTER_IDS.userRetention],\n    onFilterClick,\n    onChange: (value) => setSelectedRetention(RETENTIONS.indexOf(value)),\n  },\n  {\n    id: FILTER_IDS.dapUsed,\n    text: \"DApp's Used\",\n    hintText:\n      \"Median number of dApps used by accounts retained for more then a week\",\n    options: DAPPS_USED_PERIOD,\n    values: [DAPPS_USED_PERIOD[0]],\n    filterIsOpen: filtersIsOpen[FILTER_IDS.dapUsed],\n    onFilterClick,\n    onChange: (value) => {},\n  },\n  {\n    id: FILTER_IDS.aquisitionCost,\n    text: \"Acquisition Cost\",\n    hintText:\n      \"Budget divided by the number of accounts interacting  through the funded initiative\",\n    options: Object.keys(CURRENCIES),\n    values: [selectedCurrency],\n    filterIsOpen: filtersIsOpen[FILTER_IDS.aquisitionCost],\n    onFilterClick,\n    onChange: (value) => setSelectedCurrency(value),\n  },\n];\n\nconst sortByDAOName = (keys) =>\n  Object.keys(keys)\n    .sort()\n    .reduce((obj, key) => {\n      obj[key] = keys[key];\n      return obj;\n    }, {});\n\nconst filterDAO = (value) => {\n  let newSelection;\n\n  if (value === defaultDAOOption) {\n    const all = [defaultDAOOption, ...daos.map((d) => d.title)];\n    const isCurrentSelectionFull = selectedDAOs.length === all.length;\n    newSelection = isCurrentSelectionFull ? [] : all;\n  } else if (selectedDAOs.includes(value)) {\n    newSelection = selectedDAOs.filter(\n      (daoId) => daoId !== value && daoId !== defaultDAOOption\n    );\n  } else {\n    newSelection = [...selectedDAOs, value];\n  }\n\n  setSelectedDAOs(newSelection);\n};\n\nconst fetchData = async (key) => {\n  setLoading(true);\n  const filtredDAOs = selectedDAOs.length\n    ? daos.filter((d) => selectedDAOs.includes(d.title))\n    : daos;\n  let newDataSet = dataSet;\n\n  API[key](filtredDAOs).then((resp) => {\n    if (!resp.body) return;\n\n    const data = resp.body;\n    if (data) {\n      Object.entries(data).map(([id, value], i) => {\n        newDataSet[id]\n          ? (newDataSet[id][key] = value)\n          : (newDataSet[id] = { [key]: value });\n      });\n    }\n\n    setDataSet(newDataSet);\n    setLoading(false);\n  });\n};\n\nuseEffect(() => {\n  fetchData(\"userRetentions\");\n  fetchData(\"dappsUsed\");\n  fetchData(\"acquisitionCost\");\n}, [selectedDAOs, selectedRetention, selectedCurrency, daos]);\n\nreturn (\n  <ScrollableWrapper>\n    <div className=\"d-flex gap-2 w-100\">\n      {FILTERS.map((filter) => (\n        <Widget\n          key={filter.id}\n          src={`ndcdev.near/widget/dashboard.Components.Table.Filters`}\n          props={{ ...filter }}\n        />\n      ))}\n    </div>\n    {loading ? (\n      <Loading />\n    ) : (\n      <Widget\n        src={`ndcdev.near/widget/dashboard.Components.Table.Cells`}\n        props={{ dataSet, daos }}\n      />\n    )}\n  </ScrollableWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/dashboard.Components.Table", "fact_widget_deployments_id": "edff0b47e07de6b504c5eaa5f3e96d8c", "inserted_timestamp": "2024-04-09T19:41:33.250Z", "modified_timestamp": "2024-04-09T20:35:27.099Z", "__row_index": 10}