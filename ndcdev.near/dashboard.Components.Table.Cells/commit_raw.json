{"tx_hash": "Gw4Y4F24fCGTitkTyZCmGRRipzeMxG4digjzWmE7Fe18", "action_id_social": "BRbeC29x2aLWRCmz1G1bbLdoBkH3HAGbzHBqT7hgaY1-0-widget", "block_id": 117658646, "block_timestamp": "2024-04-26T10:35:13.065Z", "signer_id": "ndcdev.near", "widget_name": "dashboard.Components.Table.Cells", "source_code": "const { dataSet, loading } = props;\n\nconst Loading = <Widget src=\"flashui.near/widget/Loading\" />;\n\nconst DesktopRow = styled.div`\n  display: flex;\n  padding: 16px;\n  align-items: center;\n  gap: 35px;\n  align-self: stretch;\n  border-bottom: 1px solid #e3e3e0;\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n\n  .desktop-value {\n    min-width: 100px;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 600;\n    position: relative;\n    border-radius: 100px;\n\n    span {\n      z-index: 100;\n    }\n  }\n`;\n\nconst MobileRow = styled.div`\n  display: none;\n  width: 100%;\n  padding: 24px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 20px;\n  border-radius: 12px;\n  border: 1px solid #e3e3e0;\n  background: var(--Primary-Base-White, #fff);\n  box-shadow:\n    0px 97px 27px 0px rgba(0, 0, 0, 0),\n    0px 62px 25px 0px rgba(0, 0, 0, 0),\n    0px 35px 21px 0px rgba(0, 0, 0, 0.02),\n    0px 16px 16px 0px rgba(0, 0, 0, 0.03),\n    0px 4px 9px 0px rgba(0, 0, 0, 0.03);\n\n  @media screen and (max-width: 768px) {\n    display: flex;\n  }\n\n  .mobile-cell {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding-bottom: 12px;\n    align-self: stretch;\n    border-bottom: 1px solid #e3e3e0;\n\n    .mobile-value {\n      width: 100%;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n\n      .title {\n        font-size: 14px;\n        font-style: normal;\n        font-weight: 500;\n        color: #5c656a;\n      }\n    }\n  }\n`;\n\nconst Colored = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  border-radius: 100px;\n  background: #f5f5f5;\n  height: ${(props) => props.height}px;\n\n  .value {\n    position: absolute;\n    height: ${(props) => props.height}px;\n    left: 0;\n    width: ${(props) => props.width ?? 0}%;\n    background: ${(props) => props.color ?? \"inherit\"};\n    border-radius: ${(props) =>\n      props.width === 100 ? \"100px\" : \"100px 0 0 100px\"};\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: flex-start;\n  padding-top: 1rem;\n`;\n\nconst DaoName = styled.div`\n  width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  text-wrap: nowrap;\n  font-size: 16px;\n  font-weight: 600;\n  justify-content: flex-start;\n  background: transparent;\n`;\n\nconst TRESHOLD = 75;\n\nconst maxPercentage = (value, field) =>\n  parseFloat(value / Math.max(...dataSet.map((d) => d[field] ?? 0))) * 100;\n\nconst getPercentage = (min, max) => {\n  const res = parseFloat(min / max) * 100;\n\n  return res > 1 ? 100 : res;\n};\n\nconst formatValue = (value) => {\n  const val = value ? parseFloat(value) : value === 0 ? 0 : null;\n\n  if (val === null) return \"\u2014\";\n\n  return val >= 1000000000\n    ? `${parseFloat(val / 1000000000).toFixed(2)}B`\n    : val >= 1000000\n    ? `${parseFloat(val / 1000000).toFixed(2)}M`\n    : val >= 1000\n    ? `${parseFloat(val / 1000).toFixed(2)}K`\n    : Number.isInteger(val)\n    ? val\n    : val.toFixed(2);\n};\n\nconst TooltipContent = ({ key, value }) => (\n  <div className=\"justify-content-between w-100 d-flex gap-2\">\n    <div>{key}:</div> <div>{formatValue(value)}</div>\n  </div>\n);\n\nconst DesktopCell = ({ width, color, value }) => (\n  <div className=\"desktop-value\">\n    <Colored width={width} color={color} height={22}>\n      <div className=\"value\"></div>\n      <span>{formatValue(value)}</span>\n    </Colored>\n  </div>\n);\n\nconst MobileCell = ({ title, value, width, color }) => (\n  <div className=\"mobile-cell\">\n    <div className=\"mobile-value\">\n      <div className=\"d-flex gap-1 title\">\n        <i className=\"ph ph-info\" />\n        <span>{title}</span>\n      </div>\n      {formatValue(value)}\n    </div>\n\n    <Colored width={width} color={color} height={10}>\n      <div className=\"value\"></div>\n    </Colored>\n  </div>\n);\n\nreturn (\n  <Container>\n    {dataSet.map(\n      (\n        { title, userRetentions, dappsUsed, acquisitionCost, socialEngagement },\n        index\n      ) => (\n        <>\n          <DesktopRow>\n            <DaoName>{title}</DaoName>\n            <DesktopCell\n              width={getPercentage(userRetentions, 1)}\n              color={\n                getPercentage(userRetentions, 1) >= TRESHOLD\n                  ? \"#51D38E\"\n                  : \"#FC6F60\"\n              }\n              value={userRetentions}\n            />\n            <DesktopCell\n              width={maxPercentage(dappsUsed, \"dappsUsed\")}\n              color={\n                maxPercentage(dappsUsed, \"dappsUsed\") >= TRESHOLD\n                  ? \"#51D38E\"\n                  : \"#FC6F60\"\n              }\n              value={dappsUsed}\n            />\n            <DesktopCell\n              width={\n                acquisitionCost < 1 ? getPercentage(1 - acquisitionCost, 1) : 5\n              }\n              color={\n                acquisitionCost && (acquisitionCost < 1 ? \"#51D38E\" : \"#FC6F60\")\n              }\n              value={acquisitionCost}\n            />\n            <DesktopCell\n              width={maxPercentage(socialEngagement, \"socialEngagement\")}\n              color={\n                maxPercentage(socialEngagement, \"socialEngagement\") >= TRESHOLD\n                  ? \"#51D38E\"\n                  : \"#FC6F60\"\n              }\n              value={socialEngagement}\n            />\n          </DesktopRow>\n\n          <MobileRow>\n            <DaoName>{title}</DaoName>\n            <MobileCell\n              title=\"User Retention\"\n              width={getPercentage(userRetentions, 1)}\n              color={\n                getPercentage(userRetentions, 1) >= TRESHOLD\n                  ? \"#51D38E\"\n                  : \"#FC6F60\"\n              }\n              value={userRetentions}\n            />\n            <MobileCell\n              title=\"DApp's Used\"\n              width={maxPercentage(dappsUsed, \"dappsUsed\")}\n              color={\n                maxPercentage(dappsUsed, \"dappsUsed\") >= TRESHOLD\n                  ? \"#51D38E\"\n                  : \"#FC6F60\"\n              }\n              value={dappsUsed}\n            />\n            <MobileCell\n              title=\"Acquisition Cost\"\n              width={\n                acquisitionCost < 1 ? getPercentage(1 - acquisitionCost, 1) : 5\n              }\n              color={\n                acquisitionCost && (acquisitionCost < 1 ? \"#51D38E\" : \"#FC6F60\")\n              }\n              value={acquisitionCost}\n            />\n            <MobileCell\n              title=\"Social Engagement\"\n              width={maxPercentage(socialEngagement, \"socialEngagement\")}\n              color={\n                maxPercentage(socialEngagement, \"socialEngagement\") >= TRESHOLD\n                  ? \"#51D38E\"\n                  : \"#FC6F60\"\n              }\n              value={socialEngagement}\n            />\n          </MobileRow>\n        </>\n      )\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/ndcdev.near/widget/dashboard.Components.Table.Cells", "fact_widget_deployments_id": "7365ae2fb9ff0fa85420669c9e794446", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T12:46:58.707Z", "__row_index": 1}