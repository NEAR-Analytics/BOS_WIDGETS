{"tx_hash": "54J85WYqd4phZadoNpVQPCc3ZfDjdyMuK4RtWbEzv4Fy", "action_id_social": "9iDppY7z3MvmXZRKd1QkAndP1K4Yv1K8p7ooqq7An5wg-0-widget", "block_id": 118565729, "block_timestamp": "2024-05-09T09:52:11.179Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.utils.get_user_stores", "source_code": "function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(\n    `https://graph.mintbase.xyz/${\n      variables.id && variables.id.endsWith(\".testnet\") ? \"testnet\" : \"mainnet\"\n    }`,\n    {\n      method: \"POST\",\n      headers: {\n        \"mb-api-key\": \"anon\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    }\n  ).then((result) => result.body);\n}\nconst operationsDoc = `\n        query GetLaunchpadContracts($id: String!) {\n          launchpad_contracts(args: {minter_id: $id}) {\n            minted_timestamp\n            nft_contract_id\n            owner_id\n            __typename\n          }\n        }\n      `;\nfunction getUserStores(id) {\n  if (!id) console.log(\"missing accountId\");\n  return fetchGraphQL(operationsDoc, \"GetLaunchpadContracts\", {\n    id: id || \"\",\n  });\n}\nconst checkStoreQuery = `\nquery v2_omnisite_GetStoreData($id: String!) {\n  store: nft_contracts(where: { id: { _eq: $id } }) {\n    id\n    owner: owner_id\n  }\n}\n`;\nfunction checkStoreOwner(storeId, accountId) {\n  if (!storeId) return;\n  return asyncFetch(`https://graph.mintbase.xyz/${storeId}`, {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"anon\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: checkStoreQuery,\n      variables: {\n        id: storeId,\n      },\n    }),\n  }).then((result) => {\n    if (result.body?.data) {\n      const isOwner = result?.body?.data?.store?.some(\n        (data) => data?.owner == accountId\n      );\n      return isOwner;\n    }\n  });\n}\nreturn { getUserStores, checkStoreOwner };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.utils.get_user_stores", "fact_widget_deployments_id": "16a63d33a9c8a3367efc52a61a3811b6", "inserted_timestamp": "2024-05-09T11:43:16.695Z", "modified_timestamp": "2024-05-09T11:43:16.695Z", "__row_index": 0}