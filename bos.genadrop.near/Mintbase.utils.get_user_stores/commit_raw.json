{"tx_hash": "4noDoxcrxdVLqZ9SH9x7VqhLAYrzAsBwnu4SU72fK22S", "action_id_social": "9Ra8K5S1D8A9k4vP5zsrk5JoZh7HWiHGFBgPTBwgKkYH-0-widget", "block_id": 119339143, "block_timestamp": "2024-05-20T10:50:21.709Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.utils.get_user_stores", "source_code": "function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(\n    `https://graph.mintbase.xyz/${\n      variables.id && variables.id.endsWith(\".testnet\") ? \"testnet\" : \"mainnet\"\n    }`,\n    {\n      method: \"POST\",\n      headers: {\n        \"mb-api-key\": \"anon\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    }\n  ).then((result) => result.body);\n}\nconst operationsDoc = `\n        query GetLaunchpadContracts($id: String!) {\n          launchpad_contracts(args: {minter_id: $id}) {\n            minted_timestamp\n            nft_contract_id\n            owner_id\n            __typename\n          }\n        }\n      `;\nfunction getUserStores(id) {\n  if (!id) console.log(\"missing accountId\");\n  return fetchGraphQL(operationsDoc, \"GetLaunchpadContracts\", {\n    id: id || \"\",\n  });\n}\nconst checkStoreQuery = `\nquery v2_omnisite_GetStoreData($id: String!) {\n  store: nft_contracts(where: { id: { _eq: $id } }) {\n    id\n    owner: owner_id\n  }\n}\n`;\nfunction checkStoreOwner(storeId, accountId) {\n  if (!storeId) return;\n  return asyncFetch(`https://graph.mintbase.xyz/${storeId}`, {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"anon\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: checkStoreQuery,\n      variables: {\n        id: storeId,\n      },\n    }),\n  }).then((result) => {\n    if (result.body?.data) {\n      const isOwner = result?.body?.data?.store?.some(\n        (data) => data?.owner == accountId\n      );\n      return isOwner;\n    }\n  });\n}\nfunction fetchStoreMinters(contractId, account) {\n  return asyncFetch(\"https://graph.mintbase.xyz\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"*/*\",\n      \"Content-Type\": \"application/json\",\n      \"mb-api-key\": \"omni-site\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `  \n        query v2_omnisite_getStoreMinters($id: String, $limit: Int, $offset: Int) {\n            mb_store_minters(\n              limit: $limit\n              offset: $offset\n              where: {nft_contract_id: {_eq: $id}}\n            ) {\n              nft_contract_id\n              minter_id\n              nft_contracts {\n                owner_id\n                __typename\n              }\n              __typename\n            }\n            mb_store_minters_aggregate(where: {nft_contract_id: {_eq: $id}}) {\n              aggregate {\n                count\n                __typename\n              }\n              __typename\n            }\n          }\n        \n        `,\n      variables: {\n        id: contractId,\n        offset: null,\n        limit: 52,\n      },\n    }),\n  }).then((data) => {\n    if (data?.body?.data) {\n      // Run a check to confirm this account connected is a minter\n      if (account) {\n        return data?.body?.data?.mb_store_minters?.some(\n          (data) => data.minter_id === account\n        );\n      }\n      // Return all Minters\n      return data?.body?.data?.mb_store_minters;\n    }\n  });\n}\nreturn { getUserStores, checkStoreOwner, fetchStoreMinters };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.utils.get_user_stores", "fact_widget_deployments_id": "300c1fdcf07bdf5e127916f7379741e0", "inserted_timestamp": "2024-05-20T12:58:45.841Z", "modified_timestamp": "2024-05-20T12:58:45.841Z", "__row_index": 2}