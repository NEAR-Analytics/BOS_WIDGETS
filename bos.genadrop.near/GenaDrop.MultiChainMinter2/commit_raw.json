{"tx_hash": "5otDAiov58RzdPT7WWevL8vc5qvJzq5Q6bWvGUniobR2", "action_id_social": "FyjrhjsYKwnk891ufaRYVgz5q5K5JVySXNrCZ5YfGeqP-0-widget", "block_id": 117544278, "block_timestamp": "2024-04-24T20:37:20.049Z", "signer_id": "bos.genadrop.near", "widget_name": "GenaDrop.MultiChainMinter2", "source_code": "const OWNER_ID = \"minorityprogrammers.near\";\nlet accountId = context.accountId;\nconst DEFAULT_NFT_TITLE = \"My awesome NFT\";\nconst DEFAULT_NFT_DESCRIPTION = \"I've just created an NFT using GenaDrop\";\nState.init({\n  title: DEFAULT_NFT_TITLE,\n  description: DEFAULT_NFT_DESCRIPTION,\n  recipient: \"\",\n  isSoulBound: false,\n  showAlert: false,\n  toastMessage: \"\",\n  selectIsOpen: false,\n  selectedChain: \"0\",\n  customRecipient: false,\n  mintedNfts: [],\n});\nif (state.sdk.initialized) {\n  setTimeout(() => {\n    State.update({ mintedNfts: state.sdk.getMintedNfts() });\n  }, 1000);\n}\nconst handleMint = () => {\n  if (!state.image.cid) {\n    return;\n  }\n  if (!state.title) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    try {\n      state.sdk.mint(\n        state.recipient,\n        state.title,\n        state.description,\n        state.selectedChain,\n        state.image.cid,\n        state.isSoulBound\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    Ethers.provider()\n      .getNetwork()\n      .then((data) => {\n        State.update({\n          selectedChain: data.chainId,\n        });\n      });\n  }\n}\nconst handleSelectClick = () => {\n  State.update({\n    selectIsOpen: !state.selectIsOpen,\n  });\n};\nconst handleOutsideClick = (e) => {\n  if (!!state.selectIsOpen) {\n    State.update({\n      selectIsOpen: false,\n    });\n  }\n};\nconst onChangeTitle = (title) => {\n  State.update({\n    title,\n  });\n};\nconst onChangeRecipient = (recipient) => {\n  State.update({\n    customRecipient: true,\n  });\n  if (state.selectedChain == \"0\") {\n    State.update({\n      recipient: recipient[0],\n    });\n  } else {\n    State.update({\n      recipient,\n    });\n  }\n};\nconst handleChainChange = (chain_id) => {\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: `0x${Number(chain_id).toString(16)}` },\n    ]);\n    State.update({\n      selectedChain: chain_id,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst onChangeDesc = (description) => {\n  State.update({\n    description,\n  });\n};\nconst handleToggle = () => {\n  State.update({\n    isSoulBound: !state.isSoulBound,\n  });\n};\nconst Heading = styled.p`\n  margin: 0;\n  font-size: 1em;\n  color: #0f1d40;\n  line-height: 2.1rem;\n  width: 60%;\n  text-align: center;\n  font-family: \"SF Pro Display\", sans-serif;\n`;\nconst ImageUploadCard = styled.div`\n  display: flex;\n  cursor: pointer;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  max-width: 350px;\n  max-height: 350px;\n  border: 4px dashed rgba(0, 0, 0, 0.1);\n  border-radius: 1rem;\n  margin: 30px auto;\n  padding: 1.5rem;\n  text-align: center;\n  background: #fff;\n  transition: all 0.2s;\n  &:hover {\n    max-width: 400px;\n    max-height: 400px;\n    transform: scale(1.01);\n    transition: all 0.2s;\n  }\n`;\nconst NFTCard = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  max-width: 350px;\n  min-height: 350px;\n  border: 4px solid rgba(0, 0, 0, 0.05);\n  border-radius: 1rem;\n  margin: 30px auto;\n  padding: 1rem;\n  text-align: center;\n  background: #fff;\n  transition: all 0.2s;\n  .body {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    flex-grow: 1;\n    padding: 1rem;\n    box-sizing: border-box;\n    p {\n      margin: 0;\n      padding: 0;\n    }\n    input {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n    input,\n    textarea {\n      position: relative;\n      text-align: center;\n      text-overflow: ellipsis;\n      max-width: 300px;\n      background-color: transparent;\n      border: 0;\n      color: #000;\n    }\n  }\n  & > div {\n    position: relative;\n    width: 100%;\n    img {\n      width: 100%;\n      border-radius: 0.8rem;\n    }\n    .replace-btn {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      img {\n        display: none !important;\n      }\n    }\n  }\n  .mint-btn {\n    width: 100%;\n    height: 60px;\n    cursor: pointer;\n    border: 0;\n    border-radius: 10px;\n    background-color: #0fbf41;\n    font-weight: bold;\n    color: rgba(0, 0, 0, 0.7);\n    &:disabled {\n      background-color: #66c480;\n      color: rgba(0, 0, 0, 0.3);\n      cursor: not-allowed;\n    }\n  }\n`;\nconst Editable = styled.div`\n  position: relative;\n  width: 100%;\n  &.editable {\n    &:hover {\n      &::after {\n        opacity: 0.6;\n      }\n    }\n    &::after {\n      opacity: 0;\n      position: absolute;\n      content: \"\u270f\ufe0f\";\n      width: 20px;\n      height: 20px;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      margin: auto;\n      transform: rotate(90deg);\n    }\n  }\n`;\nconst SendToInput = styled.div`\n  position: relative;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 10px;\n  margin-top: 2rem;\n  width: 110%;\n  input {\n    width: 100%;\n    color: #000;\n    &:placeholder {\n      color: #000;\n    }\n  }\n  label {\n    position: absolute;\n    top: -10px;\n    left: -10px;\n    background-color: #fff;\n    padding: 5px;\n    border-radius: 10px;\n    font-size: 0.8em;\n  }\n`;\nconst Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-top: 5px;\n  width: 100%;\n  min-height: 100vh;\n  padding: 1rem 1rem 0;\n  box-sizing: border-box;\n  .button {\n    padding: 0.75em 2em;\n    border-radius: 0.7em;\n    border: 1px solid #0d99ff;\n    transition: all 0.3s;\n    cursor: pointer;\n    color: #fff;\n    background: #0d99ff;\n    &:hover {\n      color: #0d99ff;\n      background: #fff;\n    }\n    @media screen and (max-width: 540px) {\n      padding: 0.5em 2em;\n    }\n  }\n`;\nconst Text = styled.p`\n  font-size: 0.9rem;\n  color: #525c76;\n  line-height: 1rem;\n  margin: 3px;\n`;\nconst Elipse = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n  height: 100px;\n  width: 100px;\n  border-radius: 20px;\n`;\nconst Card = styled.div`\n  padding: 1em;\n  border: 1px solid #e5e8eb;\n  gap: 2em;\n  margin: 10px auto;\n  border-radius: 0.7em;\n  & input {\n    display: block;\n    padding: 0.5em;\n    width: 100%;\n    border: 1px solid #e5e8eb;\n    border-radius: 10px;\n    outline: none;\n    background: #f4f5f6;\n    color: #525c76;\n    :focus {\n      box-shadow: none;\n      border: 1px solid #0d99ff;\n    }\n    &::placeholder {\n      color: palevioletred;\n    }\n  }\n  .soulbound {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n`;\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height: 100%;\n  max-height: 100%;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  & > img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst Input = styled.input`\n  display: block;\n  padding: 0.5em;\n  width: 100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus {\n    border: 1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\nconst TextArea = styled.textarea`\n  display: block;\n  padding: 0.5em;\n  width: 100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus {\n    border: 1px solid #0d99ff;\n  }\n`;\nconst SelectTag = styled.select`\n  height: fit-content;\n  width: 300px;\n`;\nconst ChainIcon = styled.option`\n  display: flex;\n  height: 130px;\n  padding: 1rem auto;\n  & > img {\n    height: 100px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\nconst SelectReplicaContainer = styled.div`\n  position: relative;\n  display: inline-block;\n  z-index: 1;\n  user-select: none;\n  & .select-replica__select {\n    position: relative;\n  }\n  & .select-replica__selected {\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 4px solid rgba(0, 0, 0, 0.05);\n    gap: 10px;\n    border-radius: 10px;\n    background-color: #fff;\n    width: 350px;\n    padding: 0 15px 0 10px;\n    min-height: 70px;\n    & > img {\n      height: 100%;\n      width: 80px;\n      object-fit: contain;\n    }\n    & > span {\n      opacity: 0.6;\n    }\n  }\n  & .select-replica__options {\n    position: absolute;\n    opacity: 0;\n    top: 110%;\n    left: 0;\n    width: 100%;\n    left: 0;\n    right: 0;\n    margin: auto;\n    overflow-y: auto;\n    border-radius: 10px;\n    background-color: #fff;\n    max-height: 300px;\n    box-shadow: 0 10px 20px 10px rgba(0, 0, 0, 0.05);\n    pointer-events: none;\n    transform: translateY(100px);\n    transition: all 0.2s;\n  }\n  & .select-replica__options.open {\n    transition: all 0.2s;\n    transform: translateY(0);\n    opacity: 1;\n    pointer-events: all;\n  }\n  & .select-replica__option {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    background-color: #fff;\n    padding: 0;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n  & .select-replica__option.selected {\n    background-color: #f0f0f0;\n  }\n  & .select-replica__option img {\n    height: 80px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\nconst SelectGroup = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 2rem auto;\n  align-items: center;\n`;\nconst ToggleButton = styled.div`\n  /* The switch - the box around the slider */\n  .switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  }\n  /* Hide default HTML checkbox */\n  .switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n  /* The slider */\n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n  }\n  .slider:before {\n    position: absolute;\n    content: \"\";\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n  }\n  input:checked + .slider {\n    background-color: #2196f3;\n  }\n  input:focus + .slider {\n    box-shadow: 0 0 1px #2196f3;\n  }\n  input:checked + .slider:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n  }\n  /* Rounded sliders */\n  .slider.round {\n    border-radius: 34px;\n  }\n  .slider.round:before {\n    border-radius: 50%;\n  }\n`;\nconst HeaderBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .connect-wallet {\n    background: rgba(0, 0, 0, 1);\n    border-radius: 10px;\n    font-weight: bold;\n    color: #fff;\n    box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.1);\n    height: 60px;\n  }\n`;\nconst HistoryBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 750px;\n  margin: 0 auto;\n`;\nconst HistoryNFTBox = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 800px;\n  background-color: #fff;\n  border-radius: 10px;\n  margin-top: 20px;\n  box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.02);\n  box-sizing: border-box;\n  padding: 0.7rem;\n  img {\n    background-color: rgba(0, 0, 0, 0.05);\n    height: 100px;\n    border-radius: 0.5rem;\n  }\n  .details {\n    padding: 0 1rem;\n    box-sizing: border-box;\n    border-right: 1px solid rgba(0, 0, 0, 0.05);\n    h1 {\n      font-size: 1.3rem;\n    }\n    .description {\n      font-size: 0.8rem;\n      margin-bottom: 0;\n      padding: 0;\n      opacity: 0.8;\n    }\n    .author {\n      margin: 0;\n      padding: 0;\n      font-weight: bold;\n      font-size: 0.8rem;\n    }\n  }\n  .tx-details {\n    padding: 0 1rem;\n    box-sizing: border-box;\n    p {\n      margin: 0;\n      padding: 0;\n    }\n    .title {\n      font-weight: bold;\n      font-size: 0.8rem;\n    }\n    .info {\n      font-size: 0.7rem;\n    }\n  }\n`;\nif (!(state.sender || accountId)) {\n  State.update({\n    showAlert: true,\n    toastMessage: \"Please Sign in or connect a wallet\",\n  });\n} else {\n  State.update({\n    showAlert: false,\n    toastMessage: \"\",\n  });\n}\nif (!state.customRecipient) {\n  if (state.selectedChain == \"0\") {\n    State.update({\n      recipient: accountId,\n    });\n  } else {\n    State.update({\n      recipient: state.sender,\n    });\n  }\n}\nreturn (\n  <div\n    style={{\n      background: \"#fafafa\",\n      width: \"100%\",\n    }}\n  >\n    <div style={{ display: \"none\" }}>\n      <Widget\n        src=\"bos.genadrop.near/widget/GenaDrop.SDK\"\n        props={{\n          onLoad: (sdk) => State.update({ sdk: sdk }),\n          onRefresh: (sdk) => State.update({ sdk: sdk }),\n          loaded: !!state.sdk,\n        }}\n      />\n    </div>\n    {!!state.sdk ? (\n      <div>\n        {state.showAlert && (\n          <Widget src=\"bos.genadrop.near/widget/GenaDrop.Alert\" props={state} />\n        )}\n        <Main className=\"container-fluid\">\n          <div className=\"flex-grow-1\">\n            <HeaderBox>\n              <Heading\n                style={{\n                  \"text-align\": \"left\",\n                }}\n                className=\"fs-2 fw-bold\"\n              >\n                NFT Minter\n              </Heading>\n              <Web3Connect\n                className=\"connect-wallet\"\n                connectLabel=\"Connect wallet\"\n                disconnectLabel=\"Disconnect\"\n              />\n            </HeaderBox>\n            <div\n              style={{\n                \"text-align\": \"center\",\n              }}\n            >\n              <SelectGroup className=\"form-group\">\n                <SelectReplicaContainer>\n                  <div\n                    className={`select-replica__select ${\n                      state.selectIsOpen ? \"open\" : \"\"\n                    }`}\n                    onClick={handleSelectClick}\n                  >\n                    <div className=\"select-replica__selected\">\n                      {state.sdk.chains.filter(\n                        (chain) => chain.id === state.selectedChain.toString()\n                      ) ? (\n                        <img\n                          src={state.sdk.chains\n                            .filter(\n                              (chain) =>\n                                chain.id === state.selectedChain.toString()\n                            )\n                            .map((c) => c.url)}\n                          alt={state.sdk.chains\n                            .filter(\n                              (chain) =>\n                                chain.id === state.selectedChain.toString()\n                            )\n                            .map((c) => c.name)}\n                        />\n                      ) : (\n                        \"Select an option\"\n                      )}\n                      <span>\u25bc</span>\n                    </div>\n                    <div\n                      className={`select-replica__options ${\n                        state.selectIsOpen ? \"open\" : \"\"\n                      }`}\n                    >\n                      {state.sdk.chains.map((chain) =>\n                        chain.id !== state.selectedChain.toString() ? (\n                          <div\n                            key={chain.id}\n                            className={`select-replica__option ${\n                              selectedOption === chain.name ? \"selected\" : \"\"\n                            }`}\n                            onClick={() => handleChainChange(chain.id)}\n                          >\n                            <img src={chain.url} alt={chain.name} />\n                          </div>\n                        ) : (\n                          \"\"\n                        )\n                      )}\n                    </div>\n                  </div>\n                </SelectReplicaContainer>\n                {state.sdk.lastMintlink && (\n                  <a href={`${state.sdk.lastMintLink}`} target=\"_blank\">\n                    View Transaction\n                  </a>\n                )}\n              </SelectGroup>\n            </div>\n            {!state.image.cid ? (\n              <>\n                <ImageUploadCard className=\"flex-grow-1\">\n                  <Elipse>\n                    <span\n                      style={{\n                        opacity: \".2\",\n                        \"font-weight\": \"bold\",\n                      }}\n                    >\n                      NFT\n                    </span>\n                  </Elipse>\n                  <>\n                    <IpfsImageUpload\n                      image={state.image}\n                      className=\"btn text-decoration-none link-primary pe-auto\"\n                    />\n                    <div>\n                      <Text>jpg, jpeg, png, webp, gif</Text>\n                      <Text>\n                        <strong>Max. 20MB</strong>\n                      </Text>\n                    </div>\n                  </>\n                </ImageUploadCard>\n                {state.mintedNfts.length > 0 ? (\n                  <>\n                    <HeaderBox\n                      style={{\n                        \"margin-top\": \"4rem\",\n                      }}\n                    >\n                      <Heading\n                        style={{\n                          \"text-align\": \"left\",\n                        }}\n                        className=\"fs-2 fw-bold\"\n                      >\n                        History\n                      </Heading>\n                    </HeaderBox>\n                    <HistoryBox>\n                      {state.mintedNfts.map((nft) => (\n                        <HistoryNFTBox>\n                          {!!nft.image && <img src={nft.image} alt=\"NFT\" />}\n                          <div className=\"details\">\n                            <h1>{nft.title}</h1>\n                            <p className=\"description\">{nft.description}</p>\n                            {!!nft.account && (\n                              <p className=\"author\">{nft.account}</p>\n                            )}\n                          </div>\n                          <div className=\"tx-details\">\n                            <p className=\"title\">Sent to</p>\n                            <p className=\"info\">{nft.recipient}</p>\n                            {!!nft.network && nft.network != \"0\" && (\n                              <a\n                                target=\"_blank\"\n                                href={nft.link}\n                                className=\"title\"\n                              >\n                                View transaction on{\" \"}\n                                {state.sdk.contractAddresses[nft.network][1]}\n                              </a>\n                            )}\n                          </div>\n                        </HistoryNFTBox>\n                      ))}\n                    </HistoryBox>\n                  </>\n                ) : (\n                  <></>\n                )}\n              </>\n            ) : (\n              <>\n                <NFTCard>\n                  <div>\n                    <img\n                      src={`https://ipfs.near.social/ipfs/` + state.image.cid}\n                      alt=\"Uploaded Image\"\n                    />\n                    <div className=\"replace-btn\">\n                      <IpfsImageUpload\n                        image={state.image}\n                        className=\"btn text-decoration-none link-primary pe-auto\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"body\">\n                    <Editable\n                      className={\n                        state.title == DEFAULT_NFT_TITLE ? \"editable\" : \"\"\n                      }\n                    >\n                      <Input\n                        type=\"text\"\n                        className=\"input-title\"\n                        value={state.title || \"\"}\n                        onChange={(e) => onChangeTitle(e.target.value)}\n                      />\n                    </Editable>\n                    <Editable\n                      className={\n                        state.description == DEFAULT_NFT_DESCRIPTION\n                          ? \"editable\"\n                          : \"\"\n                      }\n                    >\n                      <TextArea\n                        type=\"text\"\n                        value={state.description || \"\"}\n                        onChange={(e) => onChangeDesc(e.target.value)}\n                      />\n                    </Editable>\n                    <SendToInput>\n                      <label>Send to</label>\n                      <Input\n                        type=\"text\"\n                        placeholder={\n                          state.selectedChain == \"0\" ? accountId : state.sender\n                        }\n                        onChange={(e) => onChangeRecipient(e.target.value)}\n                      />\n                    </SendToInput>\n                  </div>\n                  <button\n                    type=\"button\"\n                    disabled={\n                      !state.title ||\n                      !state.recipient ||\n                      !(state.sender || accountId)\n                    }\n                    className=\"mint-btn\"\n                    onClick={handleMint}\n                  >\n                    Mint to{\" \"}\n                    {state.sdk.contractAddresses[state.selectedChain][1]}\n                  </button>\n                </NFTCard>\n              </>\n            )}\n          </div>\n        </Main>\n        <Widget src=\"bos.genadrop.near/widget/GenaDrop.Footer\" />\n      </div>\n    ) : (\n      \"Loading...\"\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/GenaDrop.MultiChainMinter2", "fact_widget_deployments_id": "d1a8df029189e950d7a9d413690efa4d", "inserted_timestamp": "2024-04-24T23:05:50.652Z", "modified_timestamp": "2024-04-24T23:05:50.652Z", "__row_index": 1}