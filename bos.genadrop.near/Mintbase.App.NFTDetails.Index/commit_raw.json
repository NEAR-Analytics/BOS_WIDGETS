{"tx_hash": "6pReAGhMuBGo8ZiCZM1xqXpWZhfLq7zpapSJoRcmVRKA", "action_id_social": "5EueX2rYQZeao2Etoefgk7WKJwoK71S12JDscuMWKDcC-0-widget", "block_id": 116900095, "block_timestamp": "2024-04-15T13:57:34.632Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.NFTDetails.Index", "source_code": "const {isDarkModeOn,accountId} = props\nconst contractId = props.contractId || \"nft.herewallet.near\";\nconst metadataId = props.metadataId || \"nft.herewallet.near:d96acabbdb8bc6ad1317385be84030ed\";\nconst Navbar = styled.div`\n    display:flex;\n    flex-direction:row;\n    align-items:center;\n    background:${isDarkModeOn?\"#282a3a\":\"#f6f5f4\"};\n    height:50px;\n    width:100%;\n    .container{\n        display:flex;\n        flex-direction:row;\n        justify-content:end;\n        flex-wrap:wrap;\n        margin-right:20px;\n        gap:10px;\n    }\n    .button{\n        background:none;\n        border:1px solid #5b5d6b;\n        color: ${isDarkModeOn?\"#ffffff\":\"#000000\"};\n        outline:none;\n        padding:5px 20px;\n        border-radius:5px;\n        min-width:100px;\n    }\n    .cus{\n        color:red;\n    }\n    @media screen and (max-width:768px){\n        display:none;\n        height:10px;\n    }\n`;\nconst [SDK,setSDK] = useState(null);\n\nconst fetchStoreFrontData = (nftId) => {\n    const response2 = fetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n        \"mb-api-key\": \"anon\",\n        \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n        query: `query getTokenByMetadataId {\n            mb_views_nft_tokens(\n                where: {metadata_id: {_eq: \"${nftId}\"}}\n                ) {\n                media\n                minter\n                token_id\n                metadata_id\n                splits\n                royalties_percent\n                royalties\n                title\n                nft_contract_id\n                owner\n                base_uri\n                description\n                listings_aggregate {\n                    aggregate {\n                    count\n                    }\n                }\n                }\n            mb_views_nft_activities_rollup(\n                where: {metadata_id: {_eq: \"${nftId}\"}}\n                order_by: {timestamp: desc}\n            ) {\n                action_receiver\n                action_sender\n                count\n                description\n                kind\n                media\n                metadata_id\n                nft_contract_id\n                receipt_id\n                reference\n                timestamp\n                title\n                tx_sender\n                token_ids\n                price\n            }\n        }\n        `,\n    }),\n});\n    //return response2.body.data;\n    State.update({\n    infoNFT: response2.body.data.mb_views_nft_tokens[0],\n    NftCount:\n        response2.body.data.mb_views_nft_tokens[0].listings_aggregate.aggregate.count,\n    dataTransaction:response2.body.data.mb_views_nft_activities_rollup,\n    });\n};\n\nconst fetchNFTData = (contractId) => {\n    const response2 = fetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n        \"mb-api-key\": \"anon\",\n        \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n        query: `query MyQuery {\n            mb_views_active_listings(\n                where: {nft_contract_id: {_eq: \"${contractId}\"}}\n                limit: 4\n            ) {\n                media\n                title\n                kind\n                nft_contract_id\n                listed_by\n                token {\n                    metadata_id\n                }\n            }\n        }\n        `,\n    }),\n    });\n    //return response2.body.data;\n    State.update({\n        dataNFT:response2.body.data.mb_views_active_listings,\n    });\n};\nfetchNFTData(contractId);\nfetchStoreFrontData(metadataId);\nconsole.log(state.infoNFT.owner)\n\nreturn(\n    <>\n        {state.infoNFT.owner==accountId&&\n            <Navbar>\n                <div className=\"container\">\n                    <button className=\"button cus\">Burn</button>\n                    <button className=\"button\">Multiply</button>\n                    <button className=\"button\">Transfer</button>\n                    <button className=\"button\">Sell</button>\n                </div>\n            </Navbar>\n        }\n        <Widget src={\"bos.genadrop.near/widget/Mintbase.App.NFTDetails.NFTShow\"} \n            props={{\n                isDarkModeOn,\n                data: state.infoNFT,\n                NftCount: state.NftCount,\n            }}\n        />\n        <Widget src={\"bos.genadrop.near/widget/Mintbase.App.NFTDetails.NFTTable\"} \n            props={{\n                isDarkModeOn,\n                dataTransaction: state.dataTransaction,\n            }}\n        />\n        <Widget src={\"bos.genadrop.near/widget/Mintbase.App.NFTDetails.NFTMore\"} \n            props={{\n                isDarkModeOn,\n                dataNFT:state.dataNFT,\n            }}\n        />\n        <Widget\n        src=\"bos.genadrop.near/widget/Mintbase.SDK\"\n        props={{\n            mainnet: false,\n            contractName: \"mintspace2.testnet\",\n            loaded: SDK,\n            onLoad: (SDK) => setSDK(SDK),\n            onRefresh: (SDK) => setSDK(SDK),\n        }}\n        />\n    </>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.NFTDetails.Index", "fact_widget_deployments_id": "b0154620c1a42d50f103dd9cf714d3ae", "inserted_timestamp": "2024-04-15T15:41:57.750Z", "modified_timestamp": "2024-04-15T15:41:57.750Z", "__row_index": 0}