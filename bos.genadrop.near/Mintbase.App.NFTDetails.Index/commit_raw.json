{"tx_hash": "3t96h1uYoHMgn9jc9n47EQtz6gnVTfEGqNifEKEfXyoR", "action_id_social": "CBzRbo8PRnMDbtczsKnmXbVqYW4FD4G4VnDGjaUKJT8z-0-widget", "block_id": 117657323, "block_timestamp": "2024-04-26T10:09:01.207Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.NFTDetails.Index", "source_code": "const { isDarkModeOn, accountId } = props;\nconst metadataId =\n  props.metadataId || \"nft.herewallet.near:d96acabbdb8bc6ad1317385be84030ed\";\nconst extractedContactId = metadataId.split(\":\")[0];\nconst contractId =\n  props.contractId || extractedContactId || \"nft.herewallet.near\";\nconsole.log({ contractId });\nconst Navbar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  background: ${isDarkModeOn ? \"#282a3a\" : \"#f6f5f4\"};\n  height: 50px;\n  width: 100%;\n  .container {\n    display: flex;\n    flex-direction: row;\n    justify-content: end;\n    flex-wrap: wrap;\n    margin-right: 20px;\n    gap: 10px;\n  }\n  .button {\n    background: none;\n    border: 1px solid #5b5d6b;\n    color: ${isDarkModeOn ? \"#ffffff\" : \"#000000\"};\n    outline: none;\n    padding: 5px 20px;\n    border-radius: 5px;\n    min-width: 100px;\n  }\n  .cus {\n    color: red;\n  }\n  @media screen and (max-width: 768px) {\n    display: none;\n    height: 10px;\n  }\n`;\nconst Modal = styled.div`\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  z-index: 999;\n  :focus {\n    outline: 2px solid transparent;\n    outline-offset: 2px;\n  }\n`;\nconst ModalBg = styled.div`\n  overflow-y: auto;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100vw !important;\n  height: 100%;\n  background-color: #000000;\n  opacity: 0.75;\n  z-index: 999;\n`;\nconst [SDK, setSDK] = useState(null);\nconst [modalState, setModalState] = useState(\"\");\nconst fetchStoreFrontData = (nftId) => {\n  const response2 = fetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"anon\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `query getTokenByMetadataId {\n            mb_views_nft_tokens(\n                where: {metadata_id: {_eq: \"${nftId}\"}}\n                ) {\n                media\n                minter\n                token_id\n                metadata_id\n                splits\n                royalties_percent\n                royalties\n                title\n                nft_contract_id\n                owner\n                base_uri\n                description\n                listings_aggregate {\n                    aggregate {\n                    count\n                    }\n                }\n                }\n            mb_views_nft_activities_rollup(\n                where: {metadata_id: {_eq: \"${nftId}\"}}\n                order_by: {timestamp: desc}\n            ) {\n                action_receiver\n                action_sender\n                count\n                description\n                kind\n                media\n                metadata_id\n                nft_contract_id\n                receipt_id\n                reference\n                timestamp\n                title\n                tx_sender\n                token_ids\n                price\n            }\n        }\n        `,\n    }),\n  });\n  //return response2.body.data;\n  State.update({\n    infoNFT: response2.body.data.mb_views_nft_tokens[0],\n    NftCount:\n      response2.body.data.mb_views_nft_tokens[0].listings_aggregate.aggregate\n        .count,\n    dataTransaction: response2.body.data.mb_views_nft_activities_rollup,\n  });\n};\nconst fetchNFTData = (contractId) => {\n  const response2 = fetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"anon\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `query MyQuery {\n            mb_views_active_listings(\n                where: {nft_contract_id: {_eq: \"${contractId}\"}}\n                limit: 4\n            ) {\n                media\n                title\n                kind\n                nft_contract_id\n                listed_by\n                token {\n                    metadata_id\n                }\n            }\n        }\n        `,\n    }),\n  });\n  //return response2.body.data;\n  State.update({\n    dataNFT: response2.body.data.mb_views_active_listings,\n  });\n};\nfetchNFTData(contractId);\nfetchStoreFrontData(metadataId);\nconst isMintedContract = [\"mintbase1.near\", \"mintspace2.testnet\"].some(\n  (substring) => contractId?.includes(substring)\n);\nreturn (\n  <>\n    {state.infoNFT.owner == context.accountId && (\n      <Navbar>\n        <div className=\"container\">\n          {isMintedContract ? (\n            <>\n              <button\n                className=\"button cus\"\n                onClick={() => setModalState(\"BURN\")}\n              >\n                Burn\n              </button>\n              <button\n                className=\"button\"\n                onClick={() => setModalState(\"MULTIPLY\")}\n              >\n                Multiply\n              </button>\n            </>\n          ) : (\n            <></>\n          )}\n          <button className=\"button\" onClick={() => setModalState(\"TRANSFER\")}>\n            Transfer\n          </button>\n          <button className=\"button\" onClick={() => setModalState(\"SELL\")}>\n            Sell\n          </button>\n        </div>\n      </Navbar>\n    )}\n    {modalState !== \"\" && (\n      <div>\n        <ModalBg />\n        <Modal>\n          {modalState === \"SELL\" && (\n            <Widget\n              src=\"/*__@appAccount__*//widget/Mintbase.NFT.MBSellOption\"\n              props={{\n                data: state.infoNFT,\n                isDarkModeOn,\n                onClose: () => setModalState(\"\"),\n              }}\n            />\n          )}\n          {modalState === \"TRANSFER\" && (\n            <Widget\n              src=\"/*__@appAccount__*//widget/Mintbase.NFT.TransferOption\"\n              props={{\n                data: state.infoNFT,\n                isDarkModeOn,\n                onClose: () => setModalState(\"\"),\n              }}\n            />\n          )}\n          {modalState === \"BURN\" && (\n            <Widget\n              src=\"/*__@appAccount__*//widget/Mintbase.NFT.Burn\"\n              props={{\n                data: state.infoNFT,\n                type: \"BURN\",\n                isDarkModeOn,\n                onClose: () => setModalState(\"\"),\n              }}\n            />\n          )}\n          {modalState === \"MULTIPLY\" && (\n            <Widget\n              src=\"/*__@appAccount__*//widget/Mintbase.NFT.Burn\"\n              props={{\n                data: state.infoNFT,\n                type: \"MULTIPLY\",\n                isDarkModeOn,\n                onClose: () => setModalState(\"\"),\n              }}\n            />\n          )}\n        </Modal>\n      </div>\n    )}\n    <Widget\n      src={\"bos.genadrop.near/widget/Mintbase.App.NFTDetails.NFTShow\"}\n      props={{\n        isDarkModeOn,\n        data: state.infoNFT,\n        NftCount: state.NftCount,\n      }}\n    />\n    <Widget\n      src={\"bos.genadrop.near/widget/Mintbase.App.NFTDetails.NFTTable\"}\n      props={{\n        isDarkModeOn,\n        dataTransaction: state.dataTransaction,\n      }}\n    />\n    <Widget\n      src={\"bos.genadrop.near/widget/Mintbase.App.NFTDetails.NFTMore\"}\n      props={{\n        isDarkModeOn,\n        dataNFT: state.dataNFT,\n      }}\n    />\n    <Widget\n      src=\"bos.genadrop.near/widget/Mintbase.SDK\"\n      props={{\n        mainnet: false,\n        contractName: \"mintspace2.testnet\",\n        loaded: SDK,\n        onLoad: (SDK) => setSDK(SDK),\n        onRefresh: (SDK) => setSDK(SDK),\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.NFTDetails.Index", "fact_widget_deployments_id": "dc760a10991ae72660f42a16ae8d6937", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T11:43:20.585Z", "__row_index": 2}