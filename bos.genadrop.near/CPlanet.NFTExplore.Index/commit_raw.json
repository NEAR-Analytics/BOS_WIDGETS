{"tx_hash": "2coNC6GNmReW2v1wJcwoH5LAkcBMXWdQoPfHZquXDcbS", "action_id_social": "y81GgnsFVrznHnmyAfFxJ9RDPuZAHf8p9KW9p13xTh4-0-widget", "block_id": 109910438, "block_timestamp": "2024-01-08T15:45:35.474Z", "signer_id": "bos.genadrop.near", "widget_name": "CPlanet.NFTExplore.Index", "source_code": "const Root = styled.div`\n  padding: 20px;\n  width: 100%;\n  h1 {\n    color: var(--Black, #000);\n    leading-trim: both;\n    text-edge: cap;\n    font-family: Helvetica Neue;\n    font-size: 48px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: normal;\n  }\n`;\n\nconst NFTCards = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  padding: 20px 3rem 1rem 3rem;\n  width: 100%;\n`;\n\nconst NoNFTLoading = styled.div`\n  width: 100%;\n  min-height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TopNFTS = styled.div`\n  display: flex;\n  max-width: 1400px;\n  margin-right: auto;\n  margin-left: auto;\n  flex-direction: row;\n  gap: 16px;\n  overflow-x: scroll;\n  margin-top: 30px;\n`;\n\nconst SearchSection = styled.div`\n  margin-top: 48px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 25px;\n      text-align: center;\n    }\n  }\n`;\n\nconst NoData = styled.div`\n  min-height: 200px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nconst Search = styled.div`\n  margin-top: 32px;\n  justify-content: center;\n  display: flex;\n  width: 100%;\n  gap: 10px;\n  flex-wrap: wrap;\n  input {\n    border-radius: 8px;\n    flex-shrink: 0;\n    height: 48px;\n    width: 65%;\n    background: #f8f8f8;\n    overflow: hidden;\n    color: #b0b0b0;\n    text-overflow: ellipsis;\n    font-family: Helvetica Neue;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 148%; /* 29.6px */\n    @media (max-width: 500px) {\n      width: 95%;\n      font-size: 15px;\n      margin-bottom: 5px;\n    }\n  }\n`;\n\nconst Cards = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 18px;\n  margin-top: 32px;\n  flex-wrap: wrap;\n  width: 100%;\n  gap: 30px;\n`;\nconst FilterDropdown = styled.div`\n  width: 192px;\n  height: 48px;\n  flex-shrink: 0;\n  border-radius: 4px;\n  background: #b0b0b0;\n  overflow: hidden;\n  color: #fff;\n  font-family: Helvetica Neue;\n  font-size: 20px;\n  font-style: normal;\n  text-align: center;\n  font-weight: 400;\n  padding-top: 8px;\n  margin-left: 10px;\n`;\n\nconst Explore = styled.div`\n  width: 100%;\n  display: flex;\n  max-width: 1400px;\n  margin-left: auto;\n  margin-right: auto;\n  flex-direction: column;\n  align-items: center;\n  justify-contents: center;\n`;\n\nState.init({\n  nftData: [],\n  chain: \"near\",\n  filterDisplayId: \"0\",\n  filteredNFTData: [],\n  searchTerm: \"\",\n});\n\nconst currentChainProps = {\n  near: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n    livePrice: \"near\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/near-mainnet\",\n    chain: \"near\",\n    id: \"1112\",\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n  },\n  aurora: {\n    img: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    id: \"1313161554\",\n    chain: \"Aurora\",\n    livePrice: \"ethereum\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\n  },\n  arbitrum: {\n    img: \"https://assets.coingecko.com/coins/images/16547/large/photo_2023-03-29_21.47.00.jpeg?1680097630\",\n    id: \"42161\",\n    chain: \"Arbitrum\",\n    livePrice: \"ethereum\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\n  },\n  celo: {\n    img: \"https://assets.coingecko.com/coins/images/11090/large/InjXBNx9_400x400.jpg?1674707499\",\n    id: \"42220\",\n    livePrice: \"celo\",\n    chain: \"Celo\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\n  },\n  polygon: {\n    img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Polygon_Blockchain_Matic_Logo.svg/880px-Polygon_Blockchain_Matic_Logo.svg.png\",\n    id: \"137\",\n    chain: \"Polygon\",\n    livePrice: \"matic-network\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\n  },\n};\n\nconst seachInputHandler = (e) => {\n  const value = e.target.value.toLowerCase();\n  const searched = state.nftData.filter((nft) =>\n    nft.name.toLowerCase().includes(value)\n  );\n  State.update({\n    searchTerm: value,\n    filteredNFTData: searched,\n  });\n};\n\nconst defaultProps = [\n  {\n    id: \"0\",\n    name: \"near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n  {\n    id: \"137\",\n    name: \"polygon\",\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"aurora\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\n  },\n  {\n    id: \"42220\",\n    name: \"celo\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\n  },\n  {\n    id: \"42161\",\n    name: \"arbitrum\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\n  },\n];\n\nconst updateChain = (chain) => {\n  State.update({ chain, currentPage: 1 });\n};\n\nconst updateFilter = (id) => {\n  State.update({ filterDisplayId: id });\n};\n\nconst fetchData = () => {\n  let response = fetch(`${currentChainProps[state.chain].subgraph}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `\n            query MyQuery {\n             nfts( orderBy: createdAtTimestamp, ${\n               state.chain !== \"near\" ? \"orderDirection: desc\" : \"\"\n             }) {\n                category\n                chain\n                createdAtTimestamp\n                id\n                isSold\n                isListed\n                price\n                tokenID\n                owner {\n                    id\n                }\n                tokenIPFSPath\n                transactions {\n                  price\n                }\n                }\n            }\n        `,\n    }),\n  });\n  if (!response.ok) {\n    return \"Loading\";\n  }\n  const collectionData = response.body.data.nfts;\n  if (collectionData) {\n    const filteredNftData = [];\n\n    for (const filteredData of collectionData) {\n      try {\n        const response = fetch(\n          filteredData.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n        );\n        if (response.body.name != undefined) {\n          filteredNftData.push(filteredData);\n        }\n      } catch (error) {\n        // Handle any errors that occur during the fetch if needed\n        console.error(`Error fetching data: ${error}`);\n      }\n    }\n    const nftBody = filteredNftData.map((data) => {\n      const fetchIPFSData = fetch(\n        data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n      );\n      if (fetchIPFSData.status === 403) {\n        return State.update({ error: true });\n      }\n      if (!fetchIPFSData.ok) {\n        return \"Loading NFTS from IPFS\";\n      }\n      if (fetchIPFSData.ok) {\n        const nft = fetchIPFSData.body;\n        let nftObject = {};\n        nftObject.contract_id = data?.id.split(data?.tokenID)[0];\n        nftObject.sold = data?.isSold;\n        nftObject.isListed = data?.isListed;\n        nftObject.owner = data?.owner?.id;\n        nftObject.price = data?.price;\n        nftObject.token_id = data?.tokenID;\n        nftObject.name = nft?.name;\n        nftObject.description = nft?.description;\n        nftObject.media_url = nft?.image\n          ? nft?.image?.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n          : \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n        return nftObject;\n      }\n    });\n    State.update({\n      nftData: nftBody,\n    });\n  }\n};\nfetchData();\n\nconst PRICE_CONVERSION_CONSTANT =\n  state.chain == \"near\" ? 1000000000000000000000000 : 1000000000000000000;\n\nreturn (\n  <Root>\n    <TopNFTS>\n      <Widget\n        props={{\n          onButtonClick: props.update,\n          chainState: \"near\",\n          isGateway: props.isGateway\n        }}\n        src=\"bos.genadrop.near/widget/CPlanet.NFTCard.FeaturedNFT\"\n      />\n    </TopNFTS>\n    <Explore>\n      <SearchSection>\n        <h1>\n          Explore {state.filterDisplayId === \"0\" ? \"Creative\" : \"Multi Chain\"}{\" \"}\n          NFTs\n        </h1>\n        <Search>\n          <input\n            value={state.searchTerm}\n            type=\"search\"\n            onChange={seachInputHandler}\n            placeholder=\"Search for NFTs\"\n          />\n          <Widget\n            props={{ updateChain: updateFilter }}\n            src=\"bos.genadrop.near/widget/CPlanet.NFTExplore.FilterDropdown\"\n          />\n          {state.filterDisplayId === \"1\" && (\n            <Widget\n              props={{ chains: defaultProps, updateChain }}\n              src=\"bos.genadrop.near/widget/CPlanet.NFTExplore.ChainsDropdown\"\n            />\n          )}\n        </Search>\n      </SearchSection>\n      {state.filterDisplayId === \"0\" ? (\n        <Widget\n          src=\"bos.genadrop.near/widget/CPlanet.NFTExplore.DAONFTs\"\n          props={{ update: props.update }}\n        />\n      ) : (\n        <Cards>\n          {state.nftData.length > 0 ? (\n            <NFTCards>\n              {state.searchTerm === \"\"\n                ? state.nftData.map((data, index) => (\n                    <div key={index}>\n                      <Widget\n                        props={{\n                          title: data.name,\n                          description: data.description,\n                          image: data.media_url,\n                          onButtonClick: () =>\n                            props.update({\n                              tab: \"singleNFT\",\n                              contractId: data.contract_id,\n                              tokenId: data.token_id,\n                              chainState: state.chain,\n                            }),\n                          price: data.price\n                            ? (data.price / PRICE_CONVERSION_CONSTANT).toFixed(\n                                2\n                              )\n                            : null,\n                          owner: data.owner,\n                          logo: currentChainProps[state.chain].img,\n                          isListed: data.isListed ? \"LISTED\" : \"NOT LISTED\",\n                          tokenId: data.token_id,\n                          contractId: data.contract_id,\n                          chainState: state.chain,\n                        }}\n                        src=\"bos.genadrop.near/widget/CPlanet.NFTCard.Index\"\n                      />\n                    </div>\n                  ))\n                : state.filteredNFTData.map((data, index) => (\n                    <div key={index}>\n                      <Widget\n                        props={{\n                          title: data.name,\n                          description: data.description,\n                          image: data.media_url,\n                          owner: data.owner,\n                          chainState: state.chainState,\n                          logo: currentChainProps[state.chain].img,\n                          onButtonClick: () =>\n                            props.update({\n                              tab: \"singleNFT\",\n                              contractId: data.contract_id,\n                              tokenId: data.token_id,\n                              chainState: state.chain,\n                            }),\n                          price: data.price\n                            ? (data.price / PRICE_CONVERSION_CONSTANT).toFixed(\n                                2\n                              )\n                            : null,\n                          isListed: data.isListed ? \"LISTED\" : \"NOT LISTED\",\n                          tokenId: data.token_id,\n                          contractId: data.contract_id,\n                        }}\n                        src=\"bos.genadrop.near/widget/CPlanet.NFTCard.Index\"\n                      />\n                    </div>\n                  ))}\n            </NFTCards>\n          ) : (\n            <div></div>\n          )}\n        </Cards>\n      )}\n    </Explore>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/CPlanet.NFTExplore.Index", "fact_widget_deployments_id": "793209ead5ae52d13d9aaeb3914ebe81", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}