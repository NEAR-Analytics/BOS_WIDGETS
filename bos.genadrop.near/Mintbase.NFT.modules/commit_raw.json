{"tx_hash": "A9gUdjtqYGgAx7mzZMrCWfHzoX7mWABH7mLFwZhiUyQA", "action_id_social": "A2coecr48byEFfzhpnpacByM6NU3Sa1N9EXqBwYuPFTr-0-widget", "block_id": 116102608, "block_timestamp": "2024-04-04T08:36:32.081Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.NFT.modules", "source_code": "const LISTING_DEPOSIT = `1000${\"0\".repeat(18)}`;\nconst GAS = \"200000000000000\";\n\nconst MARKET_CONTRACT_ADDRESS = {\n  mainnet: \"simple.market.mintbase1.near\",\n  testnet: \"market-v2-beta.mintspace2.testnet\",\n};\n\nconst USDC_ADDRESS = {\n  mainnet: \"a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near\",\n  testnet: \"usdc.fakes.testnet\",\n};\n\nconst USDT_ADDRESS = {\n  mainnet: \"dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near\",\n  testnet: \"usdt.fakes.testnet\",\n};\n\nconst ftContracts = {\n  usdt: USDT_ADDRESS,\n  usdc: USDC_ADDRESS,\n};\n\nconst _price = (price) =>\n  Number(Number(new Big(price).mul(new Big(10).pow(24)).toString()))\n    .toLocaleString()\n    .replace(/,/g, \"\");\n\nconst nftTransfer = (tokenId, accountId, contractName) => {\n  const deposit = 1;\n  try {\n    return Near.call([\n      {\n        contractName,\n        methodName: \"nft_transfer\",\n        args: {\n          token_id: tokenId,\n          receiver_id: accountId,\n        },\n        deposit,\n      },\n    ]);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst listNFT = (contractAddress, tokenId, mainnet, price, ft) => {\n  if (!contractAddress) return;\n  const gas = 2e14;\n  const storageDeposit = 1e22;\n  const msg = { price: _price(price) };\n\n  if (ft) {\n    const ftContractId = ftContracts[ft].mainnet;\n    msg.ft_contract = ftContractId;\n    msg.price = price;\n  }\n  try {\n    return Near.call([\n      {\n        contractName: mainnet\n          ? MARKET_CONTRACT_ADDRESS.mainnet\n          : MARKET_CONTRACT_ADDRESS.testnet,\n        methodName: \"deposit_storage\",\n        args: {},\n        gas: gas,\n        deposit: storageDeposit,\n      },\n      {\n        contractName: contractAddress,\n        args: {\n          token_id: tokenId,\n          account_id: mainnet\n            ? MARKET_CONTRACT_ADDRESS.mainnet\n            : MARKET_CONTRACT_ADDRESS.testnet,\n          msg: JSON.stringify(msg),\n        },\n        methodName: \"nft_approve\",\n        deposit: LISTING_DEPOSIT,\n        gas: GAS,\n      },\n    ]);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst delist = (contractAddress, tokenIds, mainnet, oldMarket) => {\n  try {\n    return Near.call([\n      {\n        contractName: mainnet\n          ? MARKET_CONTRACT_ADDRESS.mainnet\n          : MARKET_CONTRACT_ADDRESS.testnet,\n        methodName: \"unlist\",\n        gas: GAS,\n        deposit: `1`,\n        args: {\n          token_ids: tokenIds,\n          nft_contract_id: contractAddress,\n        },\n      },\n    ]);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nreturn {\n  nftTransfer,\n  listNFT,\n  delist,\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.NFT.modules", "fact_widget_deployments_id": "ef7b8b2a2d1ca563b8b6d3abaa912f21", "inserted_timestamp": "2024-04-04T10:37:54.677Z", "modified_timestamp": "2024-04-04T10:37:54.677Z", "__row_index": 2}