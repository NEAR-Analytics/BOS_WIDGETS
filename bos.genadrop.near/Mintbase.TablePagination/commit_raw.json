{"tx_hash": "3t96h1uYoHMgn9jc9n47EQtz6gnVTfEGqNifEKEfXyoR", "action_id_social": "CBzRbo8PRnMDbtczsKnmXbVqYW4FD4G4VnDGjaUKJT8z-0-widget", "block_id": 117657323, "block_timestamp": "2024-04-26T10:09:01.207Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.TablePagination", "source_code": "const TablePagination = ({\n  onPageChange,\n  currentPage,\n  itemsPerPage,\n  totalItems,\n  hideLabel,\n  isDarkModeOn,\n}) => {\n  const DOTS = \"...\";\n  const range = (start, end) => {\n    const length = end - start + 1;\n    return Array.from({ length }, (_, idx) => idx + start);\n  };\n  const [paginationRange, setPaginationRange] = useState([]);\n  const totalPageCount = Math.ceil(totalItems / itemsPerPage);\n  useMemo(() => {\n    const totalPageNumbers = 6;\n    if (totalPageNumbers >= totalPageCount) {\n      setPaginationRange(range(1, totalPageCount));\n    }\n    if (totalPageCount <= 5) return;\n    const leftSiblingIndex = Math.max(currentPage - 1, 1);\n    const rightSiblingIndex = Math.min(currentPage + 1, totalPageCount);\n    const shouldShowLeftDots = leftSiblingIndex > 1;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 1;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3;\n      const leftRange = range(1, leftItemCount);\n      setPaginationRange([...leftRange, DOTS, totalPageCount]);\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3;\n      const rightRange = range(\n        totalPageCount - rightItemCount + 1,\n        totalPageCount\n      );\n      setPaginationRange([firstPageIndex, DOTS, ...rightRange]);\n    }\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      setPaginationRange([\n        firstPageIndex,\n        DOTS,\n        ...middleRange,\n        DOTS,\n        lastPageIndex,\n      ]);\n    }\n  }, [totalItems, itemsPerPage, currentPage]);\n  const nextPage = () => {\n    if (currentPage === totalPageCount) return;\n    onPageChange(currentPage + 1);\n  };\n  const previousPage = () => {\n    if (currentPage === 1) return;\n    onPageChange(currentPage - 1);\n  };\n  const showingCount = Math.min(props.itemsPerPage, props.totalItems) || 0;\n  const PaginationRoot = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    padding: 1rem 0;\n    @media only screen and (max-width: 768px) {\n      flex-direction: column-reverse;\n      padding: 1rem 0;\n      gap: 1rem;\n    }\n    .previous {\n      display: flex;\n      align-items: center;\n      cursor: ${currentPage === 1 ? \"not-allowed\" : \"pointer\"};\n    }\n    .forward {\n      display: flex;\n      align-items: center;\n      cursor: ${currentPage === totalPageCount ? \"not-allowed\" : \"pointer\"};\n    }\n    .list {\n      display: flex;\n      padding-left: 1rem;\n      padding-right: 1rem;\n      justify-content: center;\n      align-items: center;\n      color: #93c5fd;\n      margin-bottom: 0;\n      @media (max-width: 768px) {\n        padding-left: 6rem;\n        padding-right: 6rem;\n        margin-left: 3rem;\n      }\n    }\n    .pagination {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: center;\n    }\n    .page-number {\n      flex: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 0.25rem;\n      width: 2rem;\n      height: 2rem;\n      margin: 0 0.25rem;\n      border: 1px solid transparent;\n      color: ${isDarkModeOn ? \"#9CA3AF\" : \"#93C5FD\"};\n      background-color: ${isDarkModeOn ? \"#1F2937\" : \"#EFF6FF\"};\n      transition-property: all;\n      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      transition-duration: 300ms;\n      transition-duration: 500ms;\n      cursor: pointer;\n      &:hover {\n        background-color: ${isDarkModeOn ? \"#374151\" : \"#DBEAFE\"};\n      }\n      &:focus {\n        outline: none;\n        box-shadow: 0 0 0 2px ${isDarkModeOn ? \"#93C5FD\" : \"#3B82F6\"};\n      }\n      &.active {\n        background-color: ${isDarkModeOn ? \"#B91C1C\" : \"#F87171\"};\n        color: ${isDarkModeOn ? \"#FFF\" : \"#FFF\"};\n        border: 1px solid transparent;\n        box-shadow: none;\n      }\n    }\n    .showingCount {\n      padding-top: 1rem;\n      font-weight: 500;\n      text-align: center;\n      color: ${isDarkModeOn ? \"#fff\" : \"#eeeee\"};\n      flex: 1;\n    }\n  `;\n  return (\n    <PaginationRoot>\n      {!hideLabel && (\n        <div className=\"showingCount\">\n          {showingCount} of {props.totalItems || 0}\n        </div>\n      )}\n      {props.totalItems !== 0 && (\n        <div className=\"pagination\">\n          <div className=\"previous\" onClick={previousPage}>\n            <i\n              className=\"bi bi-chevron-left\"\n              style={{\n                color: `${isDarkModeOn ? \"#fff\" : \"blue-300\"}`,\n                opacity: `${currentPage === 1 ? 0.5 : 1}`,\n                fontSize: \"14px\",\n                fontWeight: \"700\",\n              }}\n            ></i>\n          </div>\n          {paginationRange && (\n            <ul className=\"list\">\n              {paginationRange.map((pageNumber, index) => {\n                if (pageNumber === DOTS) {\n                  return (\n                    <li\n                      className=\"page-number p-small-90 md:p-med-90\"\n                      onClick={() => {\n                        if (index > 1) {\n                          onPageChange(currentPage + 2);\n                        } else {\n                          onPageChange(currentPage - 2);\n                        }\n                      }}\n                      key={index}\n                    >\n                      {DOTS}\n                    </li>\n                  );\n                }\n                return (\n                  <li\n                    className={`page-number p-med-90 ${\n                      pageNumber === currentPage ? \"active\" : \"\"\n                    }`}\n                    onClick={() => onPageChange(pageNumber)}\n                    key={index}\n                  >\n                    {pageNumber}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          <div className=\"forward\" onClick={nextPage}>\n            <i\n              className=\"bi bi-chevron-right\"\n              style={{\n                color: `${isDarkModeOn ? \"#fff\" : \"blue-300\"}`,\n                opacity: `${currentPage === totalPageCount ? 0.5 : 1}`,\n                fontSize: \"14px\",\n                fontWeight: \"bold\",\n              }}\n            ></i>\n          </div>\n        </div>\n      )}\n    </PaginationRoot>\n  );\n};\nreturn <TablePagination {...props} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.TablePagination", "fact_widget_deployments_id": "65912b8d4ef18060c030276df9d624e7", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T11:43:20.585Z", "__row_index": 0}