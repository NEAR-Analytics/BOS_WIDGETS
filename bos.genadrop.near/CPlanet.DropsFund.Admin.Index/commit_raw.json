{"tx_hash": "A1dj5BVi5U7PsQLor9Bn972fGjVDVC4AjW5AmfxitExh", "action_id_social": "A1p8TEqz9SYVH4rzxGsdJQPrE5ZhbvtRnwAaFX8shPv4-0-widget", "block_id": 117657192, "block_timestamp": "2024-04-26T10:06:12.377Z", "signer_id": "bos.genadrop.near", "widget_name": "CPlanet.DropsFund.Admin.Index", "source_code": "const Root = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 700px;\n  width: 100%;\n  padding: 40px;\n  .header {\n    h1 {\n      font-size: 38px;\n      font-weight: 700;\n    }\n  }\n  .field {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n  }\n  .date-field {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n  }\n  .form {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-top: 40px;\n  }\n  .button {\n    width: 100%;\n    button {\n      background: #000;\n      border: 1px solid #000;\n      width: 100%;\n      margin-top: 30px;\n    }\n  }\n  .error {\n    color: red;\n    font-size: 14px;\n  }\n`;\nconst [contestName, setName] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [daoId, setDaoId] = useState(\"\");\nconst [price, setPrice] = useState(0);\nconst [dateError, setDateError] = useState(false);\nconst [places, setPlaces] = useState(0);\nconst [daoIdError, setDaoIdError] = useState(false);\nconst [minArtVote, setMinArtVote] = useState(0);\nconst [submissionStart, setSubmissionStart] = useState(\"\");\nconst [submissionEnd, setSubmissionEnd] = useState(\"\");\nconst [votingStart, setVotingStart] = useState(\"\");\nconst [votingEnd, setVotingEnd] = useState(\"\");\nconst testContract = props?.env === \"true\" ? true : false;\nfunction convertToTimestamp(dateString) {\n  // Create a Date object from the given string\n  var dateObject = new Date(dateString);\n\n  // We need to get the Unix timestamp so we divide by a 1000\n  var unixTimestamp = Math.floor(dateObject.getTime() / 1000);\n\n  // Return the result\n  return unixTimestamp;\n}\nconst policy = Near.view(daoId.trim(), \"get_policy\");\nconst handleSubmit = () => {\n  if (!policy) return setDaoIdError(true);\n  const submissionStartTimeStamp = convertToTimestamp(submissionStart);\n  const submissionEndTimeStamp = convertToTimestamp(submissionEnd);\n  const votingStartTimeStamp = convertToTimestamp(votingStart);\n  const votingEndTimeStamp = convertToTimestamp(votingEnd);\n  // Validation checks\n  if (\n    !submissionStart ||\n    !submissionEnd ||\n    !votingStart ||\n    !votingEnd ||\n    submissionStartTimeStamp >= submissionEndTimeStamp ||\n    votingStartTimeStamp >= votingEndTimeStamp ||\n    submissionEndTimeStamp >= votingStartTimeStamp\n  ) {\n    return setDateError(true);\n  }\n  Near.call(\n    testContract ? \"fund-beta.genadrop.near\" : \"contest.genadrop.near\",\n    \"create_contest\",\n    {\n      title: contestName,\n      description,\n      dao_id: daoId.trim(),\n      logo_url: \"https://picsum.photos/200/300.jpg\",\n      submission_start_time: convertToTimestamp(submissionStart),\n      submission_end_time: convertToTimestamp(submissionEnd),\n      voting_start_time: convertToTimestamp(votingStart),\n      voting_end_time: convertToTimestamp(votingEnd),\n      min_art_vote: Number(minArtVote),\n      places: Number(places),\n      prize: Number(price),\n      quorum: 2,\n    },\n    \"300000000000000\",\n    \"10000000000000000000000\"\n  );\n};\nreturn (\n  <Root>\n    <div className=\"header\">\n      <h1>Create a Contest</h1>\n    </div>\n    <div className=\"form\">\n      <div className=\"field\">\n        <label>Name</label>\n        <input\n          value={contestName}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n      </div>\n      <div className=\"field\">\n        <label>Description</label>\n        <textarea\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={4}\n        />\n      </div>\n      <div className=\"field\">\n        <label>DAO Account ID</label>\n        <input\n          value={daoId}\n          onChange={(e) => setDaoId(e.target.value)}\n          required\n        />\n        {daoIdError && <span className=\"error\">Invalid DAO ID</span>}\n      </div>\n      <div className=\"field\">\n        <label>Price</label>\n        <input\n          value={price}\n          onChange={(e) => setPrice(e.target.value)}\n          type=\"number\"\n          required\n        />\n      </div>\n      <div className=\"field\">\n        <label>Places</label>\n        <input\n          value={places}\n          onChange={(e) => setPlaces(e.target.value)}\n          type=\"number\"\n          required\n        />\n      </div>\n\n      <div className=\"field\">\n        <label>Minimum Art Vote</label>\n        <input\n          value={minArtVote}\n          onChange={(e) => setMinArtVote(e.target.value)}\n          type=\"number\"\n          required\n        />\n      </div>\n      <div className=\"date-field\">\n        <div className=\"field\">\n          <label>Submission Start Time</label>\n          <input\n            value={submissionStart}\n            onChange={(e) => setSubmissionStart(e.target.value)}\n            type=\"datetime-local\"\n            required\n          />\n        </div>\n        <div className=\"field\">\n          <label>Submission End Time</label>\n          <input\n            value={submissionEnd}\n            onChange={(e) => setSubmissionEnd(e.target.value)}\n            type=\"datetime-local\"\n            required\n          />\n        </div>\n      </div>\n      <div className=\"date-field\">\n        <div className=\"field\">\n          <label>Voting Start Time</label>\n          <input\n            value={votingStart}\n            onChange={(e) => setVotingStart(e.target.value)}\n            type=\"datetime-local\"\n            required\n          />\n        </div>\n        <div className=\"field\">\n          <label>Voting End Time</label>\n          <input\n            value={votingEnd}\n            onChange={(e) => setVotingEnd(e.target.value)}\n            type=\"datetime-local\"\n            required\n          />\n        </div>\n      </div>\n      {dateError && (\n        <span className=\"error\">\n          Invalid Date: Note that Voting time cannot be less than submission\n          time and Start time cannot be less than End time.\n        </span>\n      )}\n      <span style={{ color: \"orange\" }}>\n        Please Note that you're currently on {testContract ? \"Test\" : \"Main\"}{\" \"}\n        Contract{\" \"}\n      </span>\n      <div className=\"button\">\n        <button onClick={handleSubmit}>Create</button>\n      </div>\n    </div>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/CPlanet.DropsFund.Admin.Index", "fact_widget_deployments_id": "a1ec673ea7e5d5541374047253125017", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T11:43:20.585Z", "__row_index": 0}