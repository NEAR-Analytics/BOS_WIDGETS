{"tx_hash": "3TbNrhgu7yStsP8UQPUzLRehkK27UhfKsrMXJPULwna7", "action_id_social": "85cGW5YyBmweyWiaWsiX13moFMg1Jj97bFE7sms5XSXc-0-widget", "block_id": 111687684, "block_timestamp": "2024-01-30T12:00:03.105Z", "signer_id": "bos.genadrop.near", "widget_name": "CPlanet.DropsFund.Admin.Index", "source_code": "const Root = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 700px;\n    width: 100%;\n    padding: 40px;\n    .header {\n        h1 {\n            font-size: 38px;\n            font-weight: 700;\n        }\n    }\n\n    .field {\n        display: flex;\n        flex-direction: column;\n        margin-bottom: 20px;\n    }\n\n    .date-field {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .form {\n        display: flex;\n        flex-direction: column;\n       width: 100%;\n        margin-top: 40px;\n    }\n\n    .button {\n        width: 100%;\n        button {\n            background: #000;\n            border: 1px solid #000;\n            width: 100%;\n            margin-top: 30px;\n        }\n    }\n    .error {\n        color: red;\n        font-size: 14px;\n        \n    }\n`\n\nconst [contestName, setName] = useState(\"\")\nconst [description, setDescription] = useState(\"\")\nconst [daoId, setDaoId] = useState(\"\")\nconst [price, setPrice] = useState(0)\nconst [dateError, setDateError] = useState(false)\nconst [places, setPlaces] = useState(0)\nconst [daoIdError, setDaoIdError] = useState(false)\nconst [minArtVote, setMinArtVote] = useState(0)\nconst [submissionStart, setSubmissionStart] = useState(\"\")\nconst [submissionEnd, setSubmissionEnd] = useState(\"\")\nconst [votingStart, setVotingStart] = useState(\"\")\nconst [votingEnd, setVotingEnd] = useState(\"\")\n\nconst testAccounts = ['genadrop.near', 'agwaze.near', 'minorityprogrammers.near', 'bashorun.near', 'jgodwill.near']\nconst testContract = Storage.get(\"testContract\") || false\n\n\nfunction convertToTimestamp(dateString) {\n    // Create a Date object from the given string\n    var dateObject = new Date(dateString);\n  \n    // We need to get the Unix timestamp so we divide by a 1000\n    var unixTimestamp = Math.floor(dateObject.getTime() / 1000);\n  \n    // Return the result\n    return unixTimestamp;\n  }\n\nconst policy = Near.view(daoId.trim(), \"get_policy\");\n\nconst handleSubmit = () => {\n    if(!policy) return setDaoIdError(true)\n    const submissionStartTimeStamp = convertToTimestamp(submissionStart);\n    const submissionEndTimeStamp = convertToTimestamp(submissionEnd);\n    const votingStartTimeStamp = convertToTimestamp(votingStart);\n    const votingEndTimeStamp = convertToTimestamp(votingEnd);\n\n    // Validation checks\n    if (\n        !submissionStart || !submissionEnd || !votingStart || !votingEnd ||\n        submissionStartTimeStamp >= submissionEndTimeStamp ||\n        votingStartTimeStamp >= votingEndTimeStamp ||\n        submissionEndTimeStamp >= votingStartTimeStamp\n    ) {\n        return setDateError(true);\n    }\n\n\n    Near.call(testContract ? \"fund-beta.genadrop.near\" : \"contest.genadrop.near\",\n     \"create_contest\", \n     {\n        title: contestName,\n        description,\n        dao_id: daoId.trim(),\n        logo_url: \"https://picsum.photos/200/300.jpg\",\n        submission_start_time: convertToTimestamp(submissionStart),\n        submission_end_time: convertToTimestamp(submissionEnd),\n        voting_start_time: convertToTimestamp(votingStart),\n        voting_end_time: convertToTimestamp(votingEnd),\n        min_art_vote: Number(minArtVote),\n        places: Number(places),\n        prize: Number(price),\n        quorum: 2,\n    },\n    \"300000000000000\",\n    \"10000000000000000000000\"\n    )\n}\n\nreturn (\n    <Root>\n        <div className=\"header\">\n            <h1>Create a Contest</h1>\n        </div>\n        <div className=\"form\">\n            <div className=\"field\">\n                <label>Name</label>\n                <input value={contestName} onChange={e => setName(e.target.value)} required />\n            </div>\n            <div className=\"field\">\n                <label>Description</label>\n                <textarea value={description} onChange={e => setDescription(e.target.value)} rows={4}  />\n            </div>\n            <div className=\"field\">\n                <label>DAO Account ID</label>\n                <input value={daoId} onChange={e => setDaoId(e.target.value)} required />\n                {daoIdError &&  <span className=\"error\">Invalid DAO ID</span>}\n            </div>\n            <div className=\"field\">\n                <label>Price</label>\n                <input value={price} onChange={e => setPrice(e.target.value)} type=\"number\" required />\n            </div>\n            <div className=\"field\">\n                <label>Places</label>\n                <input value={places} onChange={e => setPlaces(e.target.value)} type=\"number\" required />\n            </div>\n            \n            <div className=\"field\">\n                <label>Minimum Art Vote</label>\n                <input value={minArtVote} onChange={e => setMinArtVote(e.target.value)} type=\"number\" required />\n            </div>\n            <div className=\"date-field\">\n            <div className=\"field\">\n                <label>Submission Start Time</label>\n                <input value={submissionStart} onChange={e => setSubmissionStart(e.target.value)} type=\"datetime-local\" required />\n            </div>\n            <div className=\"field\">\n                <label>Submission End Time</label>\n                <input value={submissionEnd} onChange={e => setSubmissionEnd(e.target.value)} type=\"datetime-local\" required />\n            </div>\n            </div>\n            <div className=\"date-field\">\n            <div className=\"field\">\n                <label>Voting Start Time</label>\n                <input value={votingStart} onChange={e => setVotingStart(e.target.value)} type=\"datetime-local\" required />\n            </div>\n            <div className=\"field\">\n                <label>Voting End Time</label>\n                <input value={votingEnd} onChange={e => setVotingEnd(e.target.value)} type=\"datetime-local\" required />\n            </div>\n            </div>\n            {dateError && <span className=\"error\">Invalid Date: Note that Voting time cannot be less than submission time and Start time cannot be less than End time.</span>}\n            <span style={{color: 'orange'}}>Please Note that you're currently on {testContract ? \"Test\": \"Main\"} Contract </span>\n            <div className=\"button\">\n                <button onClick={handleSubmit}>Create</button>\n            </div>\n        </div>\n    </Root>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/CPlanet.DropsFund.Admin.Index", "fact_widget_deployments_id": "fc98857bdccc608e1e86f2d283511a2d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}