{"tx_hash": "EQaFyvyxoSnRRFAy56X2AQJPQGNAriTgrf1oFkwLPrty", "action_id_social": "E7F9GpmS3fBtTJ1f4S8sFwdwXnC2zWtKenHGfKAcaqei-0-widget", "block_id": 121884381, "block_timestamp": "2024-06-24T10:16:23.445Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.utils.mint", "source_code": "const ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\nfunction mintingDeposit({ nTokens, nRoyalties, nSplits, metadata }) {\n  const nSplitsAdj = nSplits < 1 ? 0 : nSplits - 1;\n  const bytesPerToken = 440 + nSplitsAdj * 80 + 80;\n  const metadataBytesEstimate = JSON.stringify(metadata).length;\n  const totalBytes =\n    92 +\n    100 +\n    metadataBytesEstimate +\n    bytesPerToken * nTokens +\n    80 * nRoyalties;\n  return `${Math.ceil(totalBytes)}${\"0\".repeat(19)}`;\n}\nfunction getRoyaltyTotal(royalties, errorMessage) {\n  let royaltyTotal = 0;\n  royalties.forEach((value) => {\n    royaltyTotal += Number(value.percent);\n  });\n  if (royaltyTotal <= 0 || royaltyTotal > 0.5) {\n    errorMessage(\"Invalid royalty percentage, it must be between 0 and 0.5\");\n    return \"Error\";\n  }\n  return royaltyTotal;\n}\nfunction adjustRoyaltiesForContract(royalties, royaltyTotal, errorMessage) {\n  let counter = 0;\n  const result = {};\n  royalties.map(({ accountId, percent }) => {\n    if (percent <= 0) {\n      errorMessage(\"Invalid royalty percentage, it must be between 0 and 0.5\");\n    }\n    const adjustedAmount = (percent / royaltyTotal) * 10000;\n    result[accountId] = adjustedAmount;\n    counter += adjustedAmount;\n  });\n  if (counter != 10000) {\n    errorMessage(\"Splits percentages must add up 10000 in the contract call \");\n    return \"Error\";\n  }\n  return result;\n}\nfunction roundRoyalties(royalties) {\n  let roundedCounter = 0;\n  const result = {};\n  const firstKey = Object.keys(royalties)[0];\n  Object.keys(royalties).forEach((key) => {\n    const roundedVal = Math.round(royalties[key]);\n    result[key] = roundedVal;\n    roundedCounter += roundedVal;\n  });\n  if (roundedCounter != 10000) {\n    result[firstKey] += 10000 - roundedCounter;\n  }\n  return result;\n}\n// Function to create (mint) new NFTs and uploads them to IPFS\nconst mint = (\n  metadata,\n  media,\n  contractName,\n  numToMint,\n  owner,\n  errorMessage,\n  fileUploadStatus\n) => {\n  if (!media && !metadata) return console.log(\"missing file\");\n  fileUploadStatus(true);\n  //HANDLE ROYALTIES\n  let royaltyTotal = null;\n  let roundupRoyalties = null;\n  if (metadata.royalties) {\n    royaltyTotal = getRoyaltyTotal(metadata.royalties, errorMessage);\n    const adjustedRoyalties = adjustRoyaltiesForContract(\n      metadata.royalties,\n      royaltyTotal,\n      errorMessage\n    );\n    roundupRoyalties = roundRoyalties(adjustedRoyalties);\n    if (royaltyTotal === \"Error\" || adjustedRoyalties === \"Error\") return;\n  }\n  // HANDLE SPLITS\n  let splits = {};\n  if (metadata?.splits) {\n    if (metadata?.splits.reduce((a, b) => a + b.percent) > 100) {\n      return errorMessage(\"SPLITS Percentage cannot be more than 100%\");\n    } else if (metadata?.splits?.length > 25) {\n      return errorMessage(\"Splits Account cannot be more than 25\");\n    } else {\n      metadata.splits.map((data) => {\n        splits[data?.accountId] = data.percent;\n      });\n    }\n  }\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: metadata,\n  })\n    .then((res) => {\n      const reference = res.body.cid;\n      fileUploadStatus(false);\n      if (!reference) {\n        return errorMessage(\"could not upload to IPFS\");\n      }\n      const gas = 2e14;\n      return Near.call([\n        {\n          contractName: contractName || \"\",\n          methodName: \"nft_batch_mint\",\n          args: {\n            owner_id: owner,\n            metadata: {\n              media: ipfsUrl(media),\n              reference,\n              title: metadata.title,\n              description: metadata.description,\n            },\n            num_to_mint: numToMint || 1,\n            royalty_args: !royaltyTotal\n              ? null\n              : {\n                  split_between: roundupRoyalties,\n                  percentage: Math.round(royaltyTotal * 10000),\n                },\n            split_owners: metadata?.splits ? splits : null,\n            token_ids_to_mint: null,\n          },\n          gas: gas,\n          deposit: mintingDeposit({\n            nSplits: metadata?.splits?.length || 0,\n            nTokens: numToMint,\n            nRoyalties: !metadata?.royalties\n              ? null\n              : metadata?.royalties?.length,\n            metadata,\n          }),\n        },\n      ]);\n    })\n    .catch((err) => {\n      console.log(err);\n      errorMessage(\"Something went wrong during minting\");\n    });\n};\nreturn { mint };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.utils.mint", "fact_widget_deployments_id": "cc3318523de85e203186f77d98153be4", "inserted_timestamp": "2024-06-24T11:54:18.738Z", "modified_timestamp": "2024-06-24T11:54:18.738Z", "__row_index": 0}