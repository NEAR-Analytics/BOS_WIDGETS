{"tx_hash": "Bhdjz2zHisqDy5ZAtNinooEKSFeMPdfJ2TaThZdZXr8W", "action_id_social": "6SXLcpt56tSLMx8KCCo5bcdccT5qUSMTZwNFb8MY651q-0-widget", "block_id": 117666785, "block_timestamp": "2024-04-26T13:18:15.008Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.utils.get_combined_store_data", "source_code": "function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(\n    `https://graph.mintbase.xyz/${\n      variables.id && variables.id.endsWith(\".testnet\") ? \"testnet\" : \"mainnet\"\n    }`,\n    {\n      method: \"POST\",\n      headers: {\n        \"mb-api-key\": \"anon\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    }\n  ).then((result) => result.body);\n}\nconst operationsDoc = `\n    query GetCombinedStoredData($id: String!, $limit: Int, $offset: Int) @cached(ttl: 120) {\n      nft_contracts(where: {id: {_eq: $id}}) {\n        name\n        created_at\n        owner_id\n        is_mintbase\n      }\n      mb_store_minters(\n        limit: $limit\n        offset: $offset\n        where: {nft_contract_id: {_eq: $id}}\n      ) {\n        nft_contract_id\n        minter_id\n        nft_contracts {\n          owner_id\n        }\n      }\n      uniqueThings: nft_tokens_aggregate(where: {nft_contracts: {id: {_eq: $id}}}) {\n        aggregate {\n          count\n        }\n      }\n      uniqueOwners: nft_tokens_aggregate(\n        distinct_on: owner\n        where: {nft_contracts: {id: {_eq: $id}}}\n      ) {\n        aggregate {\n          count\n        }\n      }\n      floorPrice: nft_listings(\n        order_by: [{price: asc}, {created_at: desc}]\n        where: {unlisted_at: {_is_null: true}, invalidated_at: {_is_null: true}, accepted_at: {_is_null: true}, nft_contract_id: {_eq: $id}}\n        limit: 10\n      ) {\n        price\n        created_at\n        nft_contract_id\n        currency\n      }\n      averagePrice: nft_offers_aggregate(\n        where: {nft_contracts: {id: {_eq: $id}}, currency: {_eq: \"near\"}}\n      ) {\n        aggregate {\n          avg {\n            offer_price\n          }\n        }\n      }\n      mb_store_minters_aggregate(where: {nft_contract_id: {_eq: $id}}) {\n        aggregate {\n          count\n        }\n      }\n      storeEarned: nft_earnings_aggregate(\n        where: {nft_contract_id: {_eq: $id}, _and: {approval_id: {_is_null: false}}, currency: {_eq: \"near\"}}\n      ) {\n        aggregate {\n          sum {\n            amount\n          }\n        }\n      }\n    }\n  `;\nfunction getCombinedStoreData({ id, limit, offset }) {\n  return fetchGraphQL(operationsDoc, \"GetCombinedStoredData\", {\n    id: id,\n    limit: limit ?? 100,\n    offset: offset ?? 0,\n  });\n}\nreturn { getCombinedStoreData };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.utils.get_combined_store_data", "fact_widget_deployments_id": "1b3d166d9cb4d9bf7e08df8f37963397", "inserted_timestamp": "2024-04-26T14:39:53.028Z", "modified_timestamp": "2024-04-26T14:39:53.028Z", "__row_index": 0}