{"tx_hash": "3n329XwmqmUv9hQDcgsSdZsJgMbeUCfa57TzM1rs5p4d", "action_id_social": "EcVVarvUjMLEBdZm1CeQH2LevSPiaZxCiiii5weZRV5o-0-widget", "block_id": 119855630, "block_timestamp": "2024-05-27T13:25:50.183Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.ContractProfilePage.Mint.Index", "source_code": "const checked = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"20px\"\n    viewBox=\"0 0 24 24\"\n    width=\"20px\"\n    fill=\"#000000\"\n    class=\"fill-current text-white dark:text-black\"\n  >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\n    <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"></path>\n  </svg>\n);\nconst { MbInputField } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.MbInput\"\n) || {\n  MbInputField: () => <></>,\n};\nconst { mint } = VM.require(\"bos.genadrop.near/widget/Mintbase.utils.sdk\");\nconst MintRoot = styled.div`\n  background: #f9f9f9;\n  padding: 24px;\n  width: 100%;\n  @media (max-width: 500px) {\n    width: 95vw;\n  }\n  h2 {\n    font-size: 16px;\n    font-weight: bold;\n  }\n  .bottomButtons {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    p {\n      font-size: 14px;\n      text-transform: uppercase;\n    }\n    button {\n      background: #000;\n      border-color: #000;\n      &:hover {\n        background: #fff;\n        color: #000;\n      }\n    }\n  }\n`;\nconst MintAmount = styled.div`\n.burn-light {\n  color: #000;\n  background-color: #f2f5f8;\n  button {\n    background-color: #000;\n    color: #fff;\n  }\n  input {\n    color: #000;\n  }\n  \n}\n.burn-dark {\n  color: #fff;\n  background: #101223;\n  button {\n    background-color: #fff;\n    color: #000;\n  }\n  input {\n    color: #fff;\n  }\n}\n  .burn-dark, .burn-light {  \n    padding: 5px 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 20%;\n    border-radius: 8px;\n    margin-left: auto;\n    margin-bottom: 20px;\n    margin-right: auto;\n    @media (max-width: 500px) {\n      width: 70%;\n    }\n    input[type=number]::-webkit-inner-spin-button,\n    input[type=number]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input:focus {\n      outline: none !important;\n      border: none !important;\n      box-shadow: none !important;\n    }\n    input {\n      width: 40%;\n      background: transparent;\n      border: transparent;\n     \n    }\n    p {\n      margin: 0;\n      padding: 2px 10px;\n    }\n    button {\n      padding: 3px 9px;\n      border: none;\n    \n      border-radius: 4px;\n      &:disabled {\n        cursor: not-allowed;\n        background-color: #767986;\n        color: #fff;\n      }\n    }\n`;\nconst Basic = styled.div`\n  background: white;\n  padding: 12px;\n  margin-bottom: 20px;\n  width: 100%;\n  .top {\n    border-bottom: 1px solid #f9f9f9;\n  }\n  .fields {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    button {\n      width: 100px;\n      align-self: center;\n      background-color: black;\n      border-color: black;\n      &:hover {\n        background: white;\n        color: black;\n      }\n    }\n  }\n  .mainImage {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-top: 20px;\n    }\n    .file-upload {\n      background: #eaedfb;\n      width: 100% !important;\n      margin-left: auto;\n      margin-right: auto;\n      justify-content: center;\n      display: flex;\n      align-items: center;\n      cursor: pointer;\n      height: 100px;\n    }\n  }\n  .default {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    p {\n      margin: 0;\n      color: #535aa5;\n    }\n  }\n  .image-file {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 20px;\n    img {\n      width: 256px;\n      height: 256px;\n      object-fit: cover;\n    }\n  }\n  .pre-text {\n    margin-top: 10px;\n    text-align: center;\n    font-size: 14px;\n  }\n`;\nconst Categories = styled.div`\n  padding: 10px;\n  margin-top: 20px;\n  @media (max-width: 500px) {\n    .section {\n      overflow-x: scroll;\n    }\n  }\n  .section {\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    .category {\n      background: #eaedfb;\n      padding: 5px 20px;\n      cursor: pointer;\n      border-radius: 20px;\n      span {\n        color: #7b83ba;\n        font-size: 16px;\n        font-weight: bold;\n      }\n    }\n    .category.active {\n      background: #4e58a2;\n      span {\n        color: #fff;\n      }\n    }\n  }\n`;\nconst Mint = ({ isDarkModeOn, contractId }) => {\n  const [mintAmount, setMintAmount] = useState(1);\n  const [title, setTitle] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [metaDataStatus, setMetaDataStatus] = useState(false);\n  const [loadingUpload, setLoadingUpload] = useState(\"\");\n  const [tags, setTags] = useState([]);\n  const [activeCategory, setActiveCategory] = useState(-1);\n  const [royalties, setRoyalties] = useState([]);\n  const [splits, setSplits] = useState([]);\n  const [img, setImg] = useState(null);\n  const uploadFile = (files) => {\n    const file = files[0];\n    setLoadingUpload(true);\n    const uploadPromise = asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": file.type, // Set content type based on file\n      },\n      body: file,\n    })\n      .then((response) => {\n        if (!response.ok) {\n          setMsg(\"Upload failed!\");\n          return Promise.reject(new Error(\"Upload failed\"));\n        }\n        return response.body;\n      })\n      .then((data) => {\n        console.log(data.cid);\n        setImg(data.cid);\n      })\n      .catch((error) => {\n        console.error(\"Upload error:\", error);\n        setMsg(\"Upload failed!\");\n      })\n      .finally(() => {});\n    uploadPromise\n      .then(() => {\n        console.log(\"Upload successful!\");\n      })\n      .catch((error) => {\n        console.error(\"Upload failed:\", error);\n      })\n      .finally(() => setLoadingUpload(false));\n  };\n  const onMint = () => {\n    if (!title && !description && !img) {\n      return setErrorMessage(\n        \"Please make sure that all required fields are filled\"\n      );\n    }\n    let splitsRevenue = [];\n    let royaltiesAvailable = [];\n    // CALCULATION FOR ROYALTIES\n    if (\n      royalties.some((data) => data.accountId !== \"\" && data?.percent !== \"\")\n    ) {\n      royaltiesAvailable = royalties.map((data) => ({\n        ...data,\n        percent: Number(data.percent) / 100,\n      }));\n    } else if (\n      royalties.length === 1 &&\n      royalties.some((data) => data.accountId === \"\" && data?.percent === \"\")\n    ) {\n      royaltiesAvailable = null;\n    } else {\n      return setErrorMessage(\n        \"Please make sure all Royalties fields are filled\"\n      );\n    }\n    // CALCULATION FOR SPLITS\n    if (splits.some((data) => data.accountId !== \"\" && data?.percent !== \"\")) {\n      splitsRevenue = splits.map((data) => ({\n        ...data,\n        percent: Number(data.percent) * 100,\n      }));\n      if (splits.some((data) => data.accountId !== context.accountId)) {\n        const totalRev = splits.reduce((a, b) => a + Number(b.percent), 0);\n        splitsRevenue.push({\n          accountId: context.accountId,\n          percent: (100 - totalRev) * 100,\n        });\n      }\n    } else if (\n      royalties.length === 1 &&\n      royalties.some((data) => data.accountId === \"\" && data?.percent === \"\")\n    ) {\n      splitsRevenue = null;\n    } else {\n      return setErrorMessage(\n        \"Please make sure all Royalties fields are filled\"\n      );\n    }\n    const metadata = {\n      title,\n      description,\n      media: `https://ipfs.io/ipfs/${img}`,\n      extra: [],\n      store: contractId,\n      type: \"NEP171\",\n      royalties: royaltiesAvailable,\n      splits: splitsRevenue,\n      category: categories[activeCategory],\n      tags: tags,\n    };\n    const owner = context.accountId;\n    mint(\n      metadata,\n      img,\n      contractId,\n      mintAmount,\n      owner,\n      setErrorMessage,\n      setMetaDataStatus\n    );\n  };\n  const categories = [\n    \"Art\",\n    \"DeFi\",\n    \"Fashion\",\n    \"Membership\",\n    \"Music\",\n    \"Photography\",\n    \"Ticker\",\n  ];\n  return (\n    <MintRoot>\n      <Basic>\n        <div className=\"top\">\n          <h2>Basic Information</h2>\n        </div>\n        <MintAmount>\n          <div className={isDarkModeOn ? \"burn-dark\" : \"burn-light\"}>\n            <input\n              type=\"number\"\n              max={50}\n              inputmode=\"numeric\"\n              pattern=\"[0-9]*\"\n              value={mintAmount}\n              onChange={(e) => setMintAmount(Math.min(e.target.value, 50))}\n            />\n            <div className=\"buttons\">\n              <button\n                onClick={() => setMintAmount((prev) => Number(prev) - 1)}\n                className=\"minus\"\n                disabled={mintAmount === 1}\n              >\n                -\n              </button>\n              <button\n                disabled={mintAmount === 50}\n                onClick={() => setMintAmount((prev) => Number(prev) + 1)}\n                className=\"plus\"\n              >\n                +\n              </button>\n            </div>\n          </div>\n          <div style={{ marginBottom: \"20px\" }}>\n            <MbInputField\n              className=\"input-field\"\n              id=\"name\"\n              value={title}\n              type=\"text\"\n              isDarkModeOn={isDarkModeOn}\n              placeholder=\"Name of Token\"\n              label=\"Name\"\n              onChange={(e) => setTitle(e.target.value)}\n              required={true}\n            />\n          </div>\n          <div style={{ marginBottom: \"20px\" }}>\n            <MbInputField\n              className=\"input-field\"\n              id=\"description\"\n              isDarkModeOn={isDarkModeOn}\n              label=\"Description\"\n              value={description}\n              placeholder=\"Describe what this token represents\"\n              rows={8}\n              type=\"textarea\"\n              onChange={(e) => setDescription(e.target.value)}\n              required={true}\n            />\n          </div>\n        </MintAmount>\n        <div className=\"mainImage\">\n          <p>\n            Main Image <span style={{ color: \"red\" }}>*</span>\n          </p>\n          {img ? (\n            <div className=\"image-file\">\n              <img src={`https://ipfs.near.social/ipfs/${img}`} />\n            </div>\n          ) : (\n            \"\"\n          )}\n          <>\n            <Files\n              multiple={false}\n              accepts={[\"image/*\"]}\n              clickable\n              className=\"file-upload\"\n              onChange={uploadFile}\n            >\n              <div className=\"default\">\n                {loadingUpload ? (\n                  <h2>Uploading...</h2>\n                ) : (\n                  <>\n                    <p>Upload File</p>\n                    <span>(or just drop your file here)</span>\n                    {img && (\n                      <h2\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setImg(null);\n                        }}\n                        style={{ color: \"red\" }}\n                      >\n                        {\" \"}\n                        Remove\n                      </h2>\n                    )}\n                  </>\n                )}\n              </div>\n            </Files>\n            <h4 className=\"pre-text\">\n              Accepted Formats: image/png, image/jpeg, image/gif, image/svg+xml\n              | Ideal dimension: 1:1 | Max size: 5mb\n            </h4>\n          </>\n        </div>\n        <Categories>\n          <h2>Category</h2>\n          <div className=\"section\">\n            {categories?.map((data, index) => (\n              <div\n                onClick={() => setActiveCategory(index)}\n                className={`category ${\n                  activeCategory === index ? \"active\" : \"\"\n                }`}\n                key={index}\n              >\n                <span>{data}</span>\n              </div>\n            ))}\n          </div>\n        </Categories>\n        <Categories>\n          <h2>Tags</h2>\n          <Typeahead\n            multiple\n            options={[\"AI\", \"DAOs\", \"Vibes\"]}\n            allowNew\n            placeholder=\"Add up to 4 tags to improve discoverability\"\n            selected={tags}\n            onChange={(e) => setTags(e)}\n          />\n        </Categories>\n      </Basic>\n      <Widget\n        src=\"bos.genadrop.near/widget/Mintbase.App.Profile.ContractSettings.Royalties\"\n        props={{\n          isDarkModeOn,\n          handleRoyalties: setRoyalties,\n          isMintPage: true,\n        }}\n      />\n      <Widget\n        src=\"bos.genadrop.near/widget/Mintbase.App.Profile.ContractSettings.Revenue\"\n        props={{\n          isDarkModeOn,\n          handleSplits: setSplits,\n          isMintPage: true,\n        }}\n      />\n      <div className=\"bottomButtons\">\n        <button onClick={onMint}>\n          {metaDataStatus ? \"Uploading Metadata...\" : \"Mint me\"}\n        </button>\n        <p style={{ color: \"red\" }}>{errorMessage}</p>\n      </div>\n    </MintRoot>\n  );\n};\nreturn <Mint {...props} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.ContractProfilePage.Mint.Index", "fact_widget_deployments_id": "b3316c403acffed0e5dd9a289a5d7999", "inserted_timestamp": "2024-05-27T14:57:59.050Z", "modified_timestamp": "2024-05-27T14:57:59.050Z", "__row_index": 4}