{"tx_hash": "3t96h1uYoHMgn9jc9n47EQtz6gnVTfEGqNifEKEfXyoR", "action_id_social": "CBzRbo8PRnMDbtczsKnmXbVqYW4FD4G4VnDGjaUKJT8z-0-widget", "block_id": 117657323, "block_timestamp": "2024-04-26T10:09:01.207Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.Store.test", "source_code": "const [state, setState] = useState({\n  media: \"\",\n  title: \"\",\n  desc: \"\",\n  name: \"\",\n  symbol: \"\",\n  tokenId: \"3\",\n  contractAddress: \"nakma2321.mintspace2.testnet\",\n  address: \"\",\n  price: \"\",\n  recevierId: \"\",\n  tokenData: [],\n  storeNFTs: [],\n  ownedNFTs: [],\n});\nconst {\n  media,\n  title,\n  desc,\n  name,\n  symbol,\n  tokenId,\n  contractAddress,\n  address,\n  price,\n  tokenData,\n  storeNFTs,\n  ownedNFTs,\n  recevierId,\n} = state;\nconst updateState = (args) => {\n  setState({ ...state, ...args });\n};\nconst [sdk, setSDK] = useState(false);\nconst filesOnChange = (files) => {\n  if (files) {\n    updateState({ media: files[0] });\n  }\n};\nconst handleSubmit = () => {\n  const tokenMetadata = {\n    title: title,\n    description: desc,\n  };\n  const mint = sdk.mint(tokenMetadata, media, contractAddress);\n};\nconst handleDeploy = () => {\n  const deploy = sdk.deployStore(name, symbol);\n};\nconst handleFetch = (type) => {\n  let res;\n  switch (type) {\n    case \"get-token\":\n      res = sdk.getTokenById(contractAddress, tokenId);\n      res.then((res) => {\n        updateState({ tokenData: res.body.data.mb_views_nft_tokens });\n      });\n      break;\n    case \"get-store-nft\":\n      res = sdk.getStoreNfts(contractAddress);\n      res.then((res) => {\n        updateState({\n          storeNFTs: res.body.data.mb_views_nft_metadata_unburned,\n        });\n      });\n      break;\n    case \"get-owned-nft\":\n      res = sdk.getOwnedNFTs(\"leo_phoenix.near\");\n      res.then((res) => {\n        updateState({\n          ownedNFTs: res.body.data.mb_views_nft_tokens,\n        });\n      });\n      break;\n    case \"list-nft\":\n      sdk.nftApprove(tokenId, contractAddress, price);\n      break;\n    case \"nft-burn\":\n      sdk.nftBurn([tokenId], contractAddress);\n      break;\n    case \"nft-transfer\":\n      console.log(recevierId);\n      sdk.nftTransfer(tokenId, recevierId, contractAddress);\n      break;\n    default:\n      break;\n  }\n};\nreturn (\n  <div>\n    <Widget\n      src=\"bos.genadrop.near/widget/Mintbase.SDK\"\n      props={{\n        mainnet: false,\n        contractName: \"nakma2321.mintspace2.testnet\",\n        loaded: sdk,\n        onLoad: (sdk) => setSDK(sdk),\n        onRefresh: (sdk) => setSDK(sdk),\n      }}\n    />\n    <h1 className=\"mt-4\"> MINT</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        title\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ title: e.target.value })}\n        type=\"text\"\n        defaultValue=\"\"\n      />\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        desc\n      </Label.Root>\n      <input\n        className=\"Input\"\n        type=\"text\"\n        onChange={(e) => updateState({ desc: e.target.value })}\n        defaultValue=\"\"\n      />\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Contract Address\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ contractAddress: e.target.value })}\n        type=\"text\"\n        value={contractAddress}\n      />\n    </div>\n    <div className=\"d-inline-block\">\n      <Files\n        multiple={false}\n        accepts={[\"image/*\"]}\n        minFileSize={1}\n        clickable\n        className=\"btn btn-outline-primary\"\n        onChange={filesOnChange}\n      >\n        Upload an Image\n      </Files>\n    </div>\n    <input type=\"submit\" onClick={() => handleSubmit()} value=\"mint\" />\n    <h1 className=\"mt-4\">DEPLOY</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        name\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ name: e.target.value })}\n        type=\"text\"\n        defaultValue=\"\"\n      />\n    </div>{\" \"}\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        symbol\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ symbol: e.target.value })}\n        type=\"text\"\n        defaultValue=\"\"\n      />\n    </div>\n    <h1 className=\"mt-4\">GET TOKEN BY ID</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Token ID\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ tokenId: e.target.value })}\n        type=\"text\"\n        value={tokenId}\n      />\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Contract Address\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ contractAddress: e.target.value })}\n        type=\"text\"\n        value={contractAddress}\n      />\n    </div>\n    <input type=\"submit\" onClick={() => handleFetch(\"get-token\")} value=\"get\" />\n    <div>{JSON.stringify(tokenData[0])}</div>\n    <h1 className=\"mt-4\"> GET STORE NFTs</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Contract Address\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ contractAddress: e.target.value })}\n        type=\"text\"\n        value={contractAddress}\n      />\n    </div>\n    <input\n      type=\"submit\"\n      onClick={() => handleFetch(\"get-store-nft\")}\n      value=\"get\"\n    />\n    <div>{JSON.stringify(storeNFTs)}</div>\n    <h1 className=\"mt-4\"> GET OWNED NFTs</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Address\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ address: e.target.value })}\n        type=\"text\"\n        placeholder=\"provide address or signed in address\"\n        value={address}\n      />\n    </div>\n    <input\n      type=\"submit\"\n      onClick={() => handleFetch(\"get-owned-nft\")}\n      value=\"get\"\n    />\n    <div>{JSON.stringify(ownedNFTs)}</div>\n    <h1 className=\"mt-4\">List NFT</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Token Id\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ tokenId: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={tokenId}\n      />\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Token Contract Id\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ contractAddress: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={contractAddress}\n      />\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        price in near\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ price: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={price}\n      />\n    </div>\n    <input type=\"submit\" onClick={() => handleFetch(\"list-nft\")} value=\"list\" />\n    <h1 className=\"mt-4\">NFT BURN</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Token Id\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ tokenId: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={tokenId}\n      />\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Conrtact Address\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ contractAddress: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={contractAddress}\n      />\n    </div>{\" \"}\n    <input type=\"submit\" onClick={() => handleFetch(\"nft-burn\")} value=\"list\" />\n    <h1 className=\"mt-4\">NFT TRANSFER</h1>\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        TOKEN ID\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ tokenId: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={tokenId}\n      />\n    </div>{\" \"}\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        accountId\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ recevierId: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={recevierId}\n      />\n    </div>{\" \"}\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"0 20px\",\n        flexWrap: \"wrap\",\n        gap: 15,\n        alignItems: \"center\",\n      }}\n    >\n      <Label.Root className=\"LabelRoot\" htmlFor=\"firstName\">\n        Conrtact Address\n      </Label.Root>\n      <input\n        className=\"Input\"\n        onChange={(e) => updateState({ contractAddress: e.target.value })}\n        type=\"text\"\n        placeholder=\"\"\n        value={contractAddress}\n      />\n    </div>{\" \"}\n    <input\n      type=\"submit\"\n      onClick={() => handleFetch(\"nft-transfer\")}\n      value=\"list\"\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.Store.test", "fact_widget_deployments_id": "341671b8b6cd8f2aa65c215e2baa874c", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T11:43:20.585Z", "__row_index": 0}