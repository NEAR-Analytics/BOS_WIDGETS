{"tx_hash": "A9gUdjtqYGgAx7mzZMrCWfHzoX7mWABH7mLFwZhiUyQA", "action_id_social": "A2coecr48byEFfzhpnpacByM6NU3Sa1N9EXqBwYuPFTr-0-widget", "block_id": 116102608, "block_timestamp": "2024-04-04T08:36:32.081Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.LaunchPad.Index", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst { MbModal } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.components\"\n) || {\n  MbModal: () => <></>,\n};\nconst { CreateStoreCard } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.App.Store.CreateStoreCard\"\n);\n\nconst { MbInputField } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.MbInput\"\n) || {\n  MbInputField: () => <></>,\n};\n\nconst tabProps = {\n  tabLabels: [\n    \"My Contracts\",\n    \"Earned\",\n    \"Offered to Me\",\n    \"My Offers\",\n    \"Stripe Beta\",\n  ],\n};\n\nconst [selectedTab, setSelectedTab] = useState(props.tab ?? \"my-contracts\");\nconst [modalIsOpen, setModalIsOpen] = useState(false);\nconst [storeName, setStoreName] = useState(\"\");\nconst [storeSymbol, setStoreSymbol] = useState(\"\");\nconst [sdk, setSDK] = useState(false);\nconst isDarkModeOn = props.isDarkModeOn;\n\nconst handleTabClick = (tab) => {\n  setSelectedTab(tab);\n  console.log(\"selectedTabIndex from LaunchPad: \", tab);\n};\n\nconst onStoreNameChange = useCallback((e) => {\n  console.log(\"onStoreNameChange\", e.target.value);\n  setStoreName(e.target.value);\n}, []);\n\nconst handleDeploy = () => {\n  console.log(\"handleDeploy\", storeName, storeSymbol);\n  // console.log(\"sdk\", sdk);\n  sdk.deployStore(storeName, storeSymbol);\n};\n\n// console.log(\"tabProps\", tabProps);\n\nconst Card = styled.div`\n  width: 100%;\n  border-radius: 0;\n  background-color: #f9fafb;\n  color: black;\n  margin: 0;\n  padding: 0;\n  &.dark {\n    background-color: var(--bg-gray-900, #101223);\n    color: white;\n  }\n  .content_main {\n    padding: 23vh 4vw;\n  }\n`;\n\nconst CreateStore = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  .form {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n  .bottom-buttons {\n    display: flex;\n    position: absolute;\n    bottom: 48px;\n    right: 24px;\n    width: calc(100% - 48px);\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst CreateCard = styled.div`\npadding: 1em;\nborder: 2px dashed rgba(0,0,0,.3);\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nalign-content: center;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\nheight: 293px;\nmax-width: 600px;\nwidth: 100%;\nbutton {\n    border: 1px solid black;\n    border-radius: 0;\n    color: white;\n    background: black;\n    text-align: center\n    display: flex;\n    padding: 7px 20px;\n    cursor: pointer;\n  }\n  button:disabled {\n    background: grey;\n    border: grey;\n    cursor: not-allowed;\n  }\n  button:hover {\n    background: white;\n    color: black;\n    border-color: black;\n  }\n`;\nconst createStoreHandler = () => {\n  setModalIsOpen(true);\n};\n\nconst PageContent = () => {\n  switch (selectedTab) {\n    case \"my-contracts\":\n      return (\n        <>\n          {!stores ? (\n            <div className=\"d-flex flex-column align-items-center gap-3\">\n              <>\n                <h2>Deploy your own store to mint NFTs from</h2>{\" \"}\n                <p>\n                  You don't have any stores yet \u2014 let's create your first one!\n                  Or refresh the page if you just deployed (could take up to 5\n                  minutes).\n                </p>\n              </>\n              <Widget\n                src={`bos.genadrop.near/widget/Mintbase.MbButton`}\n                props={{\n                  label: \"New Store\",\n                  onClick: createStoreHandler,\n                  size: \"big\",\n                  isDarkModeOn,\n                }}\n              />\n            </div>\n          ) : (\n            <CreateStoreCard\n              isDarkModeOn={isDarkModeOn}\n              onClick={() => setModalIsOpen(true)}\n            />\n          )}\n        </>\n      );\n    case \"earned\":\n      return (\n        <div>\n          <h2>Nothing Earned yet</h2>{\" \"}\n          <p>\n            You haven't earned any NFTs yet. Once you do, they will appear here.\n          </p>\n        </div>\n      );\n    case \"offered-to-me\":\n      return (\n        <div>\n          <h2>Nothing Offered yet</h2>{\" \"}\n          <p>\n            You haven't been offered any NFTs yet. Once you do, they will appear\n            here.\n          </p>\n        </div>\n      );\n    case \"my-offers\":\n      return (\n        <div>\n          <h2>No offers yet</h2>{\" \"}\n          <p>\n            You haven't offered any NFTs yet. Once you do, they will appear\n            here.\n          </p>\n        </div>\n      );\n    case \"stripe-beta\":\n      return (\n        <div>\n          <img\n            src=\"https://www.mintbase.xyz/_next/image?url=%2Fpartners%2Fmintbase-stripe.png&w=640&q=75\"\n            alt=\"\"\n          />\n          <h2>StripeBeta</h2>\n          <div className=\"stripe-data\">\n            <p className=\"p-32 w-1/2\">\n              To enable selling NFTs in over 135 currencies, complete the KYC\n              process. Only NFTs valued over $1 in NEAR, without royalties or\n              splits, will have fiat access. NFTs cannot be reclaimed if a buyer\n              claims fraud. By connecting to Stripe, you confirm your business\n              doesn\u2019t fall under Stripe Restricted Business List.\n            </p>\n            <p>\n              Royalties and splits are not paid out when the buyer uses fiat.\n              It's up to you to payout royalties directly if requested.\n            </p>\n          </div>\n          <Widget\n            src={`bos.genadrop.near/widget/Mintbase.MbButton`}\n            props={{\n              label: \"Connect to Stripe\",\n              onClick: null,\n              size: \"big\",\n              mode,\n            }}\n          />\n        </div>\n      );\n    default:\n      return null;\n  }\n};\nconst [count, setCount] = useState(0);\n\nreturn (\n  <Card className={isDarkModeOn ? \"dark\" : \"\"}>\n    <Widget\n      src=\"bos.genadrop.near/widget/Mintbase.SDK\"\n      props={{\n        mainnet: false,\n        contractName: \"mintspace2.testnet\",\n        loaded: sdk,\n        onLoad: (sdk) => setSDK(sdk),\n        onRefresh: (sdk) => setSDK(sdk),\n      }}\n    />\n    <Widget\n      src={`bos.genadrop.near/widget/Mintbase.MbTabs`}\n      props={{\n        ...tabProps,\n        activeTab: selectedTab,\n        onTabChange: handleTabClick,\n        isDarkModeOn,\n      }}\n    />\n    <div className=\"d-flex flex-column align-items-center content_main\">\n      <PageContent />\n    </div>\n\n    <MbModal\n      open={modalIsOpen}\n      setOpen={setModalIsOpen}\n      topElement={\n        <h4 style={{ marginRight: \"8px\" }}>Let's Create Your Store</h4>\n      }\n      isDarkModeOn={isDarkModeOn}\n      onClose={null}\n      topElementFirst={true}\n    >\n      <Widget\n        src={`bos.genadrop.near/widget/Mintbase.App.Store.CreateForm`}\n        props={{\n          isDarkModeOn,\n          onCancel: () => setModalIsOpen(false),\n          setModalOpen: setModalIsOpen,\n        }}\n      />\n    </MbModal>\n  </Card>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.LaunchPad.Index", "fact_widget_deployments_id": "348fc3c438baaabe4be961911da28461", "inserted_timestamp": "2024-04-04T10:37:54.677Z", "modified_timestamp": "2024-04-04T10:37:54.677Z", "__row_index": 0}