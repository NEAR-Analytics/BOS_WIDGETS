{"tx_hash": "ACWonZt6gbiLmrtGTPXdk7i79Ac6cFPrEHjHRq9jzA8s", "action_id_social": "8vUHTnCayaciGvUK2v6qnNNSSd17whSriweN4PWzHYEc-0-widget", "block_id": 111671136, "block_timestamp": "2024-01-30T07:06:00.515Z", "signer_id": "bos.genadrop.near", "widget_name": "CPlanet.ProfilePage.Tabs", "source_code": "const accountId = context.accountId;\nconst pageOwnerId = props.accountId ?? accountId;\nif (!pageOwnerId) {\n  return \"No account ID\";\n}\n\nconst profile = props.profile ?? Social.getr(`${pageOwnerId}/profile`);\n\nif (profile === null) {\n  return \"Loading\";\n}\n\nconst description = profile.description;\n\n// Create a separate titleMap for dynamic linking\nconst titleMap = {\n  feed: \"Feed\",\n  nfts: \"NFTs\",\n  discussions: \"Discussions\",\n  polls: \"Polls\",\n  docs: \"Docs\",\n  portfolio: \"Portfolio\",\n};\n\nconst pills = [];\n\n// Extract keys and values from feedTabs\nconst tabKeys = profile.feedTabs && Object.keys(profile.feedTabs);\nconst tabValues = profile.feedTabs && Object.values(profile.feedTabs);\n\n// Combine keys and values into objects with titles from titleMap (fallback to key value)\ntabKeys &&\n  tabKeys.forEach((key, index) => {\n    pills.push({\n      id: key,\n      title:\n        titleMap[key] ||\n        tabValues[index] ||\n        key.charAt(0).toUpperCase() + key.slice(1),\n    });\n  });\n\nconsole.log(\"pills\", pills);\nconst Nav = styled.div`\n  .nav-pills {\n    background: #fbfbfb;\n    font-weight: 400;\n    --bs-nav-pills-border-radius: 0;\n    --bs-nav-link-color: #b0b0b0;\n    --bs-nav-pills-link-active-color: #000;\n    --bs-nav-pills-link-active-bg: #fbfbfb;\n    --bs-nav-link-padding-y: 0.75rem;\n    border-bottom: 1px solid #eee;\n    padding-top: 3px;\n  }\n  .nav-link.active {\n    border-bottom: 3px solid #000;\n    font-weight: 500;\n  }\n\n  .nav-item:not(:has(> .disabled)):hover {\n    background: rgba(0, 0, 0, 0.15);\n    * {\n      color: #000 !important;\n    }\n  }\n\n  margin: 0 -12px;\n`;\nconst feedAccounts = [];\n\nconst graph = Social.keys(`${pageOwnerId}/profile/feed/*`, \"final\");\nif (graph !== null) {\n  feedAccounts = Object.keys(graph[pageOwnerId].profile.feed || {});\n  feedAccounts.push(context.pageOwnerId);\n  console.log(\"Feed Accounts\", feedAccounts);\n} else {\n  feedAccounts = [];\n}\n\nconst hashtagGraph = Social.keys(\n  `${pageOwnerId}/profile/discussion/data/*`,\n  \"final\"\n);\n\nconst [fetchedHashtags, setFetchedHashtags] = useState([]);\nconst [selectedHashtag, setSelectedHashtag] = useState(\n  fetchedHashtags[0] ?? null\n);\nconst fetchHashtags = () => {\n  if (hashtagGraph !== null) {\n    setFetchedHashtags(\n      Object.keys(hashtagGraph[pageOwnerId].profile.discussion.data || {})\n    );\n  } else {\n    setFetchedHashtags([]);\n  }\n};\n\npageOwnerId && fetchHashtags();\nconsole.log(\"fetchedHashtags\", fetchedHashtags[0]);\n\nconsole.log(\"selectedHashtag\", selectedHashtag);\n\nconst communityAddress = JSON.parse(profile.discussion.community);\n\nconsole.log(\"community: \", profile.discussion.community);\n\nconst nftType = profile.nfts.type;\nconst nftAddresses = profile.nfts && JSON.parse(profile.nfts.content);\nconst portfolio = profile.portfolio;\n\nconst portfolioIds = portfolio && Object.keys(portfolio);\n\nconst currentTheme = Number(profile.theme) ?? 0;\n\n// if (portfolioIds) {\n//   for (let i = 0; i < portfolioIds.length; i++) {\n//     const id = portfolioIds[i];\n//     const item = profile.portfolio[id];\n\n//     console.log(\"Image url: \", item.image.cid);\n//   }\n// }\n\n// {description && (\n//   <Widget\n//     key=\"desc\"\n//     loading=\"\"\n//     src=\"mob.near/widget/MainPage.N.Post\"\n//     props={{\n//       accountId: pageOwnerId,\n//       pinned: true,\n//       blockHeight: \"now\",\n//       content: {\n//         text: description,\n//       },\n//     }}\n//   />\n// )}\n\nconsole.log(\"isOwner? \", accountId === pageOwnerId);\nconsole.log(\"owner\", pageOwnerId);\nconsole.log(\"feedTabs\", profile.feedTabs);\nreturn (\n  <>\n    <Nav>\n      <ul className=\"nav nav-pills nav-fill\" id=\"pills-tab\" role=\"tablist\">\n        {profile.feedTabs &&\n          pills &&\n          pills.map(({ id, title }, i) => (\n            <li className=\"nav-item\" role=\"presentation\" key={i}>\n              <button\n                className={`nav-link ${i === 0 ? \"active\" : \"\"}`}\n                id={`pills-${id}-tab`}\n                data-bs-toggle=\"pill\"\n                data-bs-target={`#pills-${id}`}\n                type=\"button\"\n                role=\"tab\"\n                aria-controls={`pills-${id}`}\n                aria-selected={i === 0}\n                onClick={() => {\n                  const key = `load${id}`;\n                  !state[key] && State.update({ [key]: true });\n                }}\n              >\n                {title}\n              </button>\n            </li>\n          ))}\n      </ul>\n    </Nav>\n    {!profile.feedTabs ? (\n      <div className=\"w-100 mx-auto text-center\">\n        <h4>Nothing to show yet\ud83d\ude3f</h4>\n        {accountId === pageOwnerId && (\n          <p>\n            Don't have Page?{\" \"}\n            <Link\n              className=\"btn btn-outline-secondary rounded-5\"\n              href={`/bos.genadrop.near/widget/DropFlow.CreatePage.Index?pageOwnerId=${pageOwnerId}`}\n            >\n              Create One\n            </Link>\n          </p>\n        )}\n      </div>\n    ) : (\n      <div className=\"tab-content\" id=\"pills-tabContent\">\n        <div\n          className=\"tab-pane fade show active\"\n          id=\"pills-feed\"\n          role=\"tabpanel\"\n          aria-labelledby=\"pills-feed-tab\"\n        >\n          <div className=\"col-lg-8 mx-auto\">\n            <Widget\n              key=\"feed\"\n              src=\"bos.genadrop.near/widget/CPlanet.MainPage.Feed\"\n              props={{ accounts: [...feedAccounts] }}\n            />\n          </div>\n        </div>\n        <div\n          className=\"tab-pane fade\"\n          id=\"pills-discussions\"\n          role=\"tabpanel\"\n          aria-labelledby=\"pills-discussions-tab\"\n        >\n          <div className=\"col-lg-12 mx-auto\">\n            {profile.discussion.type === \"hashtag\" && (\n              <div>\n                <div className=\"hashtags gap-2 my-3\">\n                  {fetchedHashtags.map((hashtag) => (\n                    <button\n                      className={`btn btn-outline-primary ${\n                        currentTheme !== 2 && \"rounded-5\"\n                      } btn-sm`}\n                      onClick={() => setSelectedHashtag(hashtag)}\n                    >\n                      {`#${hashtag}`}\n                    </button>\n                  ))}\n                </div>\n                {selectedHashtag && (\n                  <Widget\n                    src=\"jgodwill.near/widget/Hashtag.Feed\"\n                    props={{ hashtag: selectedHashtag }}\n                  />\n                )}\n              </div>\n            )}\n            {profile.discussion.type === \"nftcommunity\" && (\n              <Widget\n                key=\"discussion\"\n                src=\"bos.genadrop.near/widget/CPlanet.Group.Index\"\n                props={{ groupId: communityAddress[0] }}\n              />\n            )}\n          </div>\n        </div>\n        <div\n          className=\"tab-pane fade\"\n          id=\"pills-nfts\"\n          role=\"tabpanel\"\n          aria-labelledby=\"pills-nfts-tab\"\n        >\n          {/* {state.loadnfts && (\n            <Widget src=\"mob.near/widget/N.YourNFTs\" props={{ pageOwnerId }} />\n          )} */}\n          {nftType === \"collection\" && (\n            <Widget\n              src=\"bos.genadrop.near/widget/DropFlow.CollectionNFTs\"\n              props={{ contractId: nftAddresses[0] }}\n            />\n          )}\n          {nftType === \"single\" && (\n            // <Widget\n            //   src=\"bos.genadrop.near/widget/DropFlow.AccountNFTs\"\n            //   props={{ accountId: nftAddresses[0] }}\n            // />\n            <div className=\"mt-2 row g-4\">\n              {nftAddresses.map((address) => (\n                <div className=\"col-md\">\n                  <Widget\n                    src=\"jgodwill.near/widget/DropFlow.SingleNFT\"\n                    props={{\n                      contractId: address.contractId,\n                      tokenId: address.tokenId,\n                      chainState: address.chain?.toLowerCase(),\n                    }}\n                  />\n                </div>\n              ))}\n              {/* <pre>{JSON.stringify(nftAddresses, null, 2)}</pre> */}\n            </div>\n          )}\n        </div>\n        <div\n          className=\"tab-pane fade\"\n          id=\"pills-portfolio\"\n          role=\"tabpanel\"\n          aria-labelledby=\"pills-portfolio-tab\"\n        >\n          {portfolio &&\n            Object.keys(portfolio).map((item) => (\n              <div className=\"d-flex align-items-center gap-3 mb-3\" key={item}>\n                <img\n                  src={`https://ipfs.near.social/ipfs/${portfolio[item].image.cid}`}\n                  // className=\"col-sm\"\n                  width=\"100px\"\n                  height=\"100px\"\n                  style={{ objectFit: \"cover\" }}\n                  alt={portfolio[item].title}\n                />\n                <div className=\"col-sm\">\n                  <h5 className=\"card-title\">{portfolio[item].title}</h5>\n                  <Markdown text={portfolio[item].text} />\n                </div>\n                <div className=\"d-flex justify-content-end align-items-center\">\n                  <a href={\"#\"} className=\"btn btn-primary\">\n                    Go somewhere\n                  </a>\n                </div>\n              </div>\n            ))}\n        </div>\n      </div>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/CPlanet.ProfilePage.Tabs", "fact_widget_deployments_id": "a750565fcbf4d244e88034de7637b992", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}