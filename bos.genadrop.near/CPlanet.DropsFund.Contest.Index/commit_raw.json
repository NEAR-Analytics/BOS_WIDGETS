{"tx_hash": "3TbNrhgu7yStsP8UQPUzLRehkK27UhfKsrMXJPULwna7", "action_id_social": "85cGW5YyBmweyWiaWsiX13moFMg1Jj97bFE7sms5XSXc-0-widget", "block_id": 111687684, "block_timestamp": "2024-01-30T12:00:03.105Z", "signer_id": "bos.genadrop.near", "widget_name": "CPlanet.DropsFund.Contest.Index", "source_code": "const searchSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 18 18\"\n    fill=\"none\"\n  >\n    <path\n      d=\"M13.3038 13.3038C10.4891 16.1184 5.92564 16.1184 3.11099 13.3038C0.296337 10.4891 0.296336 5.92564 3.11099 3.11099C5.92564 0.296336 10.4891 0.296337 13.3038 3.11099C16.1184 5.92564 16.1184 10.4891 13.3038 13.3038ZM13.3038 13.3038L17 17\"\n      stroke=\"#B0B0B0\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n\nconst ExploreRoot = styled.div`\n  max-width: 1400px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 40px;\n  .header {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    flex-wrap: wrap;\n    .buttons {\n      display: flex;\n      gap: 10px;\n    }\n    a, button {\n      background: #000;\n      border: 1px solid #000;\n      color: #fff;\n      width: max-width;\n      padding: 9px;\n      border-radius: 8px;\n      transition: 0.4s ease-in-out;\n      text-decoration: none;\n    }\n    a:hover, button:hover {\n      background: #fff;\n      color: #000;\n      border: 1px solid #000;\n    }\n    h1 {\n      color: var(--Black, #000);\n      leading-trim: both;\n      text-edge: cap;\n      font-family: Helvetica Neue;\n      font-size: 48px;\n      font-style: normal;\n      font-weight: 700;\n      line-height: normal;\n    }\n    @media (max-width: 500px) {\n      gap: 20px;\n      justify-content: center;\n      h1 {\n        font-size: 28px;\n      }\n    }\n  }\n`;\n\nconst ExploreContainer = styled.div`\n  background: #f8f8f8;\n  padding: 20px;\n  .searchContainer {\n    display: flex;\n    margin-top: 32px;\n    width: 100%;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: 20px;\n    justify-content: center;\n  }\n`;\n\nconst Search = styled.div`\n  display: flex;\n  padding: 5px 16px;\n  justify-content: space-between;\n  align-items: center;\n  flex: 1;\n  border-radius: 8px;\n  border: 1px solid #efefef;\n  height: 48px;\n  background: #fff;\n`;\n\nconst Input = styled.input`\n&&& {\n  padding: 8px;\n  font-size: 16px;\n  border: none;\n  flex: 1;\n  &:focus {\n    outline: none;\n    border: none;\n  }\n}\n`;\n\nconst Filter = styled.div`\nposition: relative;\ndisplay: inline-block;\nheight: 48px;\npadding: 12px 24px;\nmargin-left: 20px;\nborder-radius: 12px;\nbackground: #000;\ncursor: pointer;\ncolor: #fff;\n\n&:hover {\n  border: 1px solid #fff;\n}\n\nselect {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  cursor: pointer;\n  z-index: 1;\n\n  &:hover {\n    border: 1px solid #fff;\n  }\n}\n\nspan {\n  z-index: 0;\n}\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 24px;\n  width: max-content;\n  @media (max-width: 500px) {\n    width: 100%;\n    flex-direction: column;\n  }\n`;\n\nconst Tab = styled.div`\n  display: flex;\n  padding: 12px 32px;\n  cursor: pointer;\n  align-items: center;\n  gap: 10px;\n  border-top: 2px solid #eaeaea;\n  border: 1px solid #eaeaea;\n  background: ${(p) => (p.selected ? \"#fff\" : \"\")};\n  @media (max-width: 500px) {\n    width: 100%;\n    justify-content: center;\n  }\n  h2 {\n    color: ${(p) => (p.selected ? \"#000\" : \"#d0d0d0\")};\n    text-align: center;\n    font-family: Helvetica Neue;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: normal;\n  }\n`;\n\nconst Cards = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 30px;\n  display: flex;\n  padding: 24px 32px;\n  min-height: 800px;\n  align-items: flex-start;\n  align-content: flex-start;\n  row-gap: 64px;\n  flex-shrink: 0;\n  flex-wrap: wrap;\n  background: white;\n  @media (max-width: 500px) {\n    padding: 10px;\n  }\n`;\n\nconst NoContest = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 24px 32px;\n  p {\n    color: #d0d0d0;\n    font-size: 24px;\n    font-weight: 600;\n  }\n`\n\nconst adminLists = ['genadrop.near', 'agwaze.near', 'minorityprogrammers.near', 'bashorun.near', 'jgodwill.near']\n\nconst testContract = Storage.get(\"testContract\")\n\n\n\nconst isFutureTimestamp = (timestamp) => {\n  const currentTimestamp = Math.floor(Date.now() / 1000); // Convert current time to seconds\n\n  const isFuture = timestamp > currentTimestamp;\n\n  return isFuture;\n};\n\nconst fetchedContests =\n  Near.view(testContract ? \"fund-beta.genadrop.near\" : \"contest.genadrop.near\", \"get_contests\", {\n    subscribe: true,\n  }) || [];\n\nconst [activeTab, setActiveTab] = useState(\"ALL\");\nconst [contest, setContest] = useState(fetchedContests || []);\nconst [searchValue, setSearchValue] = useState(\"\")\nconst [filteredValue, setFilteredValue] = useState([])\nconst [sortOrder, setSortOrder] = useState(\"A-Z\");\n\n\n\nconst compareContests = (a, b) => {\n  const timeA = a[1]?.voting_end_time || 0;\n  const timeB = b[1]?.voting_end_time || 0;\n\n  // Sort in descending order (latest first)\n  return timeB - timeA;\n};\n\nuseEffect(() => {\n  let sortedContests = [...fetchedContests];\n\n  switch (activeTab) {\n    case \"ALL\":\n      // No additional sorting needed for \"ALL\" tab\n      break;\n    case \"ACTIVE\":\n      sortedContests = sortedContests.filter((data) =>\n        isFutureTimestamp(data[1]?.voting_end_time)\n      );\n      break;\n    case \"PAID OUT\":\n      sortedContests = []; // No contests for \"PAID OUT\" tab\n      break;\n    case \"PAST\":\n      sortedContests = sortedContests.filter(\n        (data) => !isFutureTimestamp(data[1]?.voting_end_time)\n      );\n      break;\n    default:\n      // Default case: handle the default state here\n      break;\n  }\n\n  sortedContests.sort((a, b) => {\n    const titleA = a[1]?.title || \"\";\n    const titleB = b[1]?.title || \"\";\n    const timeA = a[1]?.voting_end_time || 0;\n    const timeB = b[1]?.voting_end_time || 0;\n\n\n    // Adjust the comparison based on the sorting order\n    if (sortOrder === \"A-Z\") {\n      return titleA.localeCompare(titleB);\n    } else if (sortOrder === \"Z-A\") {\n      return titleB.localeCompare(titleA);\n    } else if (sortOrder === \"oldest\") {\n      return timeA - timeB;\n    } else if (sortOrder === \"latest\") {\n      return timeB - timeA;\n    }\n\n    return 0; // Default to no sorting\n  });\n\n  // Sort the contests before setting them\n  // sortedContests.sort(compareContests);\n  setContest(sortedContests);\n}, [fetchedContests, activeTab, sortOrder]);\n\nconst handleSortOrderChange = (value) => {\n  setSortOrder(value);\n};\n\n\nconst searchInputHandler = (e) => {\n  const value = e.target.value.toLowerCase();\n  const searched = contest.filter((nft) =>\n    nft[1]?.title.toLowerCase().includes(value)\n  );\n  setSearchValue(value)\n  setFilteredValue(searched)\n}\n\n\nconst isAdmin = adminLists.includes(context.accountId)\n\nreturn (\n  <ExploreContainer>\n    <ExploreRoot>\n      <div className=\"header\">\n        <h1>Explore Creative Contests</h1>\n        {isAdmin && \n        <div className=\"buttons\">\n          <a\n          onClick={() => props.update({ tab: \"singleContest\" })}\n          href={`#/bos.genadrop.near/widget/CPlanet.DropsFund.Admin.Index`}\n          className=\"\"\n          >\n          Create Contest\n        </a>\n        <button\n        onClick={() => {\n          Storage.set('testContract', !testContract)\n        }}\n        className=\"card-button\"\n        >\n        Switch To {testContract ? \"Main Contract\" : \"Test Contract\"}\n      </button>\n        </div>\n        }\n      </div>\n      <div className=\"searchContainer\">\n        <Search>\n          <Input placeholder=\"Search for Different Contests\" value={searchValue} onChange={searchInputHandler} />\n          {searchSvg}\n        </Search>\n        <Widget src=\"bos.genadrop.near/widget/CPlanet.DropsFund.Contest.FilterOption\" \n            props={{\n              selectedOption: sortOrder,\n              onChange: (value) => handleSortOrderChange(value)\n            }} \n        />\n      </div>\n      <Tabs>\n        <Tab onClick={() => {\n          setActiveTab(\"ALL\")\n          setSearchValue(\"\")\n        }} selected={activeTab === \"ALL\"}>\n          <h2>ALL</h2>\n        </Tab>\n        <Tab\n          onClick={() => {\n          setActiveTab(\"ACTIVE\")\n          setSearchValue(\"\")\n        }}\n          selected={activeTab === \"ACTIVE\"}\n        >\n          <h2>ACTIVE</h2>\n        </Tab>\n        <Tab\n          onClick={() => {\n            setActiveTab(\"PAID OUT\")\n            setSearchValue(\"\")\n          }}\n          selected={activeTab === \"PAID OUT\"}\n        >\n          <h2>PAID</h2>\n        </Tab>\n        <Tab\n          onClick={() => {\n            setActiveTab(\"PAST\")\n            setSearchValue(\"\")\n          }}\n          selected={activeTab === \"PAST\"}\n        >\n          <h2>PAST</h2>\n        </Tab>\n      </Tabs>\n      <Cards>\n        {searchValue === '' ? contest?.length > 0 ? contest?.map((data, index) => (\n          <Widget\n            src=\"bos.genadrop.near/widget/CPlanet.DropsFund.Explore.Card\"\n            key={index}\n            props={{\n              data: data[1],\n              update: props.update,\n              isSubmissionOpen: isFutureTimestamp(data[1]?.submission_end_time),\n              isVotingEnded: isFutureTimestamp(data[1]?.voting_end_time),\n              id: data[0],\n              update: props.update,\n              isGateway: props.isGateway\n            }}\n          />\n        )) : activeTab=== 'ALL' && contest?.length > 0 ? (\n          fetchedContests?.map((data, index) => (\n            <Widget\n              src=\"bos.genadrop.near/widget/CPlanet.DropsFund.Explore.Card\"\n              key={index}\n              props={{\n                data: data[1],\n                update: props.update,\n                isSubmissionOpen: isFutureTimestamp(data[1]?.submission_end_time),\n                isVotingEnded: isFutureTimestamp(data[1]?.voting_end_time),\n                id: data[0],\n                update: props.update,\n                isGateway: props.isGateway\n              }}\n            />\n          ))\n\n        ) : \n        \n        <NoContest>\n          <p>There are no {activeTab !== 'ALL' ? activeTab : \"\" } Contest available</p>\n        </NoContest> : filteredValue.length ? filteredValue?.map((data, index) => (\n            <Widget\n              src=\"bos.genadrop.near/widget/CPlanet.DropsFund.Explore.Card\"\n              key={index}\n              props={{\n                data: data[1],\n                update: props.update,\n                isSubmissionOpen: isFutureTimestamp(data[1]?.submission_end_time),\n                isVotingEnded: isFutureTimestamp(data[1]?.voting_end_time),\n                id: data[0],\n                update: props.update,\n                isGateway: props.isGateway\n              }}\n            />\n          ))\n        : (\n        <NoContest>\n          <p>No Contest Found</p>\n        </NoContest>\n          )\n        }\n      </Cards>\n    </ExploreRoot>\n  </ExploreContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/CPlanet.DropsFund.Contest.Index", "fact_widget_deployments_id": "637b18b46843b23169c6a760a603d2d2", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}