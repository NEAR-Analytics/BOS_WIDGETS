{"tx_hash": "3t96h1uYoHMgn9jc9n47EQtz6gnVTfEGqNifEKEfXyoR", "action_id_social": "CBzRbo8PRnMDbtczsKnmXbVqYW4FD4G4VnDGjaUKJT8z-0-widget", "block_id": 117657323, "block_timestamp": "2024-04-26T10:09:01.207Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.UI-Kit", "source_code": "const [display, setDisplay] = useState(\"Colors\");\nconst [currentTab, setTab] = useState(\"Preview\");\nconst [mode, setMode] = useState(\"light\");\nconst [icons, setIcons] = useState([]);\nconst [input, setInput] = useState(\"\");\n// MbModal\nconst accountId = props.accountId || \"bos.genadrop.near\";\nconst [open, setOpen] = useState(true);\nconst { cssColors, colors, typographyClasses } = VM.require(\n  `${accountId}/widget/Mintbase.Theme`\n);\nconst isDarkModeOn = mode === \"dark\";\nconst tabs = [\"Preview\", \"Docs\"];\nconst Theme = styled.div`\n  ${cssColors}\n`;\nconst TableBodyContents = [\n  {\n    amount: \"557.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"237 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"2 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"3.4 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"557.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"557.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"5 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"17.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"107.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"227.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"307.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n  {\n    amount: \"237.6 N\",\n    account: \"mintbase.near\",\n    created: \"1 hour ago\",\n    expired: \"1 day\",\n    tx: \"...\",\n  },\n];\nconst Container = styled.div`\n  display: flex;\n  min-height: 100vh;\n  width: 100%;\n  background: ${isDarkModeOn ? \"#333333\" : \"white\"};\n  .left-nav {\n    text-align: left;\n    background: ${isDarkModeOn ? \"#2F2F2F\" : \"#f6f9fc\"};\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n    min-width: 200px;\n    display: flex;\n    flex-direction: column;\n    > .title {\n      font-weight: 600;\n      letter-spacing: 0.35em;\n      text-transform: uppercase;\n      color: rgb(153, 153, 153);\n      padding: 0.5rem 1rem;\n    }\n    > .item {\n      padding: 0.5rem 1rem;\n      font-size: 14px;\n      cursor: pointer;\n      transition: all 300ms ease-in-out;\n      color: ${isDarkModeOn ? \"white\" : \"black\"};\n      :hover {\n        background: #1ea8fd79;\n        color: white;\n      }\n      &.active {\n        background: #1ea7fd;\n        color: white;\n      }\n    }\n  }\n  .view {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    .top-nav {\n      padding: 1rem;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      margin-right: auto;\n      box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n        rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n      margin-bottom: 2rem;\n      div {\n        font-weight: 500;\n        border-bottom: 1px solid transparent;\n        cursor: pointer;\n        transition: all 300ms ease-in-out;\n        color: ${isDarkModeOn ? \"#999999\" : \"black\"};\n        :hover {\n          border-color: #1ea7fd;\n          color: #1ea7fd;\n        }\n        &.active {\n          border-color: #1ea7fd;\n          color: #1ea7fd;\n        }\n      }\n    }\n  }\n`;\nconst IconsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  padding: 1rem;\n  > .title {\n    font-size: 1.5rem;\n    font-weight: 500;\n    width: 100%;\n    color: ${isDarkModeOn ? \"#999999\" : \"black\"};\n  }\n  > .icon {\n    display: flex;\n    width: 128px;\n    height: 128px;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n    font-size: 10px;\n    border-radius: 6px;\n    border: 1px solid black;\n    background: rgb(243, 244, 248);\n    overflow: hidden;\n    > div:first-child {\n      margin: auto;\n    }\n    .name {\n      background: rgb(210, 212, 218);\n      width: 100%;\n      padding: 0.5rem 0;\n      text-align: center;\n    }\n  }\n`;\nconst Color = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  color: ${isDarkModeOn ? \"white\" : \"black\"};\n  .color {\n    background: ${(props) => props.hex};\n    width: 120px;\n    height: 120px;\n  }\n  .label {\n    font-weight: 500;\n  }\n`;\nconst radioButtons = [\n  { label: \"Radio button 1\", value: \"radio1\", id: \"radio1\" },\n  { label: \"Radio button 2\", value: \"radio2\", id: \"radio2\" },\n];\nconst ColorPreview = (\n  <IconsContainer>\n    {Object.keys(colors)?.map((key) => (\n      <>\n        <div className=\"title\">{key}</div>\n        {colors[key]?.map((color) => (\n          <Color hex={color.hex}>\n            <div className=\"color\" />\n            <div className=\"label\">{color.label}</div>\n            <div className=\"value\">{color.hex}</div>\n          </Color>\n        ))}\n      </>\n    ))}\n  </IconsContainer>\n);\nconst Typography = styled.div`\n  margin-top: 10px;\n  ${(props) => props.typographyStyle}\n`;\nconst TypographyContainer = Object.keys(typographyClasses).map((typography) => (\n  <Typography typographyStyle={typographyClasses[typography]}>\n    {typography}\n  </Typography>\n));\nconst kit = {\n  core: {\n    MbIcon: {\n      preview: (\n        <IconsContainer>\n          {icons.map((icon) => (\n            <div className=\"icon\">\n              <Widget\n                src={`${accountId}/widget/Mintbase.MbIcon`}\n                props={{\n                  name: icon,\n                  size: \"34px\",\n                }}\n              />\n              <div className=\"name\">{icon}</div>\n            </div>\n          ))}\n        </IconsContainer>\n      ),\n      docs: `<Widget\n      src={\"${`${accountId}/widget/Mintbase.` + display}\"}\n      props={{\n        name: \"Icon Name\",\n        color: \"\",\n        darkColor:\"\",\n        size: \"34px\",\n        height:\"34px\",\n        cutomStyle:\"\",\n        mode:\"dark\"\n      }}\n  />`,\n    },\n    Colors: {\n      preview: ColorPreview,\n      docs: ColorPreview,\n    },\n    Typography: {\n      preview: TypographyContainer,\n      docs: (\n        <div>\n          <div>\n            {\" \"}\n            const &#123; typographyClasses &#125; = VM.require('{accountId}\n            /widget/Mintbase.Theme');\n          </div>\n          <div>\n            const Container = styled.div`\n            &#123;typographyClasses[className]&#125; `\n          </div>\n        </div>\n      ),\n    },\n  },\n  compoennts: {\n    MbAction: {\n      props: {\n        state: \"disabled\",\n        size: \"big\",\n        children: <div>See Transaction</div>,\n      },\n    },\n    MbActionText: {\n      props: {\n        // text, icons size\n        size: \"big\",\n        text: \"https://mintbase.io\",\n        // text to copy\n        copyText: \"https://mintbase.io\",\n        // link icon, new tab\n        iconTab: false,\n        // copy icon\n        iconCopy: false,\n        link: \"https://mintbase.io\",\n        modee: \"dark\",\n      },\n    },\n    MbRadioButton: {\n      props: {\n        children: radioButtons?.map((btn) => (\n          <Widget\n            src={`${accountId}/widget/Mintbase.RadioButton`}\n            props={{\n              id: btn.id,\n              label: btn.label,\n              value: btn.value,\n              onChange: (e) => {\n                console.log(this.value);\n                if (e.target.checked) {\n                }\n              },\n            }}\n          />\n        )),\n      },\n    },\n    MbArrowMenu: {\n      props: {\n        isActive: false,\n        title: \"Explore\",\n      },\n    },\n    MbSwitch: {\n      props: {\n        id: \"switch1\",\n        checked: true,\n        onChange: (e) => console.log(e),\n      },\n    },\n    MbDropdownHoverMenu: {\n      props: {\n        children: (\n          <div>\n            <div>Activity</div>\n            <div>Analytics</div>\n            <div>Accounts</div>\n            <div>Top Affiliates</div>\n          </div>\n        ),\n        dropdownButton: (\n          <Widget\n            src={`${accountId}/widget/Mintbase.MbArrowMenu`}\n            props={{\n              isActive: false,\n              title: \"Explore\",\n            }}\n          />\n        ),\n      },\n    },\n    MbDropdownMenu: {\n      props: {\n        isOpen: true,\n        items: [\n          {\n            content: \"Docs\",\n            icon: (\n              <Widget\n                src={`${accountId}/widget/Mintbase.MbIcon`}\n                props={{\n                  name: \"open_new_tab\",\n                  size: \"16px\",\n                }}\n              />\n            ),\n          },\n          {\n            content: \"Developer\",\n            icon: (\n              <Widget\n                src={`${accountId}/widget/Mintbase.MbIcon`}\n                props={{\n                  name: \"open_new_tab\",\n                  size: \"16px\",\n                }}\n              />\n            ),\n          },\n        ],\n      },\n    },\n    MbCheckbox: {\n      props: {\n        label: \"Checkbox 1\",\n        id: \"checked\",\n        onChange: (e) => !e.target.checked,\n      },\n    },\n    MbChip: {\n      props: {\n        label: \"Art\",\n        disabled: false,\n        isChecked: true,\n        handleClick: (e) => {\n          !e.target.checked;\n        },\n      },\n    },\n    MbNetworkMenu: {\n      props: {\n        isOpen: true,\n        isInline: true,\n        options: [\n          {\n            label: \"NEAR TESTNET\",\n            value: \"testnet\",\n            indicator: (\n              <div\n                style={{\n                  width: \"12px\",\n                  height: \"12px\",\n                  borderRadius: \"50%\",\n                  background: \"#F59E0B\",\n                }}\n              />\n            ),\n          },\n          {\n            label: \"NEAR MAINNET\",\n            value: \"mainnet\",\n            indicator: (\n              <div\n                style={{\n                  width: \"12px\",\n                  height: \"12px\",\n                  borderRadius: \"50%\",\n                  background: \"#0A7D6C\",\n                }}\n              />\n            ),\n          },\n          {\n            label: \"ETHEREUM\",\n            value: \"ethereum\",\n            indicator: (\n              <div\n                style={{\n                  width: \"12px\",\n                  height: \"12px\",\n                  borderRadius: \"50%\",\n                  background: \"#4F58A3\",\n                }}\n              />\n            ),\n          },\n        ],\n      },\n    },\n    MbAccordion: {\n      props: {\n        title: \"Header Title\",\n        isOpen: false,\n        isFixedAccordion: true,\n        extraIcon: {},\n        isVerifiedToken: true,\n        children: (\n          <div>Lorem ipsum dolor sit amet consectetur adipisicing elit.</div>\n        ),\n      },\n    },\n    MbTabs: {\n      props: {\n        tabLabels: [\"NFTs\", \"Active auctions\", \"Latest Listings\"],\n        tabsWithFilters: [\n          {\n            tab: \"NFTs\",\n            extraFilter: \"Show only listed\",\n            onChangeExtraFilter: (value) => console.log(value),\n            isExtraFilterSelected: true,\n          },\n        ],\n        filterOptions: {\n          label: \"Order by\",\n          defaultOptionId: \"newest\",\n          options: [\n            { label: \"Newest\", id: \"newest\" },\n            { label: \"Oldest\", id: \"oldest\" },\n            { label: \"Cheapest\", id: \"cheapest\" },\n            {\n              label: \"Most expensive\",\n              id: \"most-expensive\",\n            },\n          ],\n        },\n      },\n    },\n    MbRowList: {\n      props: {\n        elements: [\n          {\n            id: \"mintbase1.near\",\n            isDisabled: true,\n            content: (\n              <Widget\n                src={`${accountId}/widget/Mintbase.ListRowContent`}\n                props={{\n                  image: \"https://i.imgur.com/gu26H6Z.png\",\n                  text: \"mintbase1.near\",\n                }}\n              />\n            ),\n          },\n        ],\n        deleteRow: () => null,\n        addMinters: () => null,\n        removeMinters: (ids) => console.log(\"remove\", ids),\n        dropDownItems: [\n          {\n            content: <span>Generate QR Code</span>,\n            onClick: () => console.log(\"asdasd\"),\n          },\n          {\n            content: <span>Create Deeplink</span>,\n            onClick: () => console.log(\"asdasd\"),\n          },\n        ],\n      },\n    },\n    MbTag: {\n      props: {\n        children: \"See Transactions\",\n        removeTag: () => console.log(\"removing tags\"),\n      },\n    },\n    MbRowSelectList: {\n      props: {\n        elements: [\n          {\n            id: \"mintbase1.near\",\n            isDisabled: true,\n            content: (\n              <Widget\n                src={`${accountId}/widget/Mintbase.ListRowContent`}\n                props={{\n                  image: \"https://i.imgur.com/gu26H6Z.png\",\n                  text: \"mintbase1.near\",\n                }}\n              />\n            ),\n          },\n          {\n            id: \"mintbase2.near\",\n            isDisabled: false,\n            content: (\n              <Widget\n                src={`${accountId}/widget/Mintbase.ListRowContent`}\n                props={{\n                  image: \"https://i.imgur.com/gu26H6Z.png\",\n                  text: \"mintbase2.near\",\n                }}\n              />\n            ),\n          },\n          {\n            id: \"mintbase3.near\",\n            isDisabled: false,\n            content: (\n              <Widget\n                src={`${accountId}/widget/Mintbase.ListRowContent`}\n                props={{\n                  image: \"https://i.imgur.com/gu26H6Z.png\",\n                  text: \"mintbase3.near\",\n                }}\n              />\n            ),\n          },\n        ],\n        deleteRow: () => null,\n        addMinters: () => null,\n        removeMinters: (ids) => console.log(\"remove\", ids),\n        dropDownItems: [\n          {\n            content: <span>Generate QR Code</span>,\n            onClick: () => console.log(\"asdasd\"),\n          },\n          {\n            content: <span>Create Deeplink</span>,\n            onClick: () => console.log(\"asdasd\"),\n          },\n        ],\n      },\n    },\n    MbTable: {\n      props: {\n        title: \"Trading History\",\n        hasLabel: true,\n        headerProps: (\n          <tr id=\"headers\">\n            <td>Offer</td>\n            <td>From</td>\n            <td>Created</td>\n            <td>Expires</td>\n            <td>TX</td>\n          </tr>\n        ),\n        loading: false,\n        bodyProps: TableBodyContents.map((elm, index) => {\n          return (\n            <tr key={index}>\n              <td>{elm.amount}</td>\n              <td>{elm.account}</td>\n              <td>{elm.created}</td>\n              <td>{elm.expired}</td>\n              <td>{elm.tx}</td>\n            </tr>\n          );\n        }),\n      },\n    },\n    MbTooltip: {\n      props: {\n        text: \"Tooltip text!\",\n        component: <span>Tooltip</span>,\n        place: \"right\",\n      },\n    },\n    MbLogo: { props: { src: \"mintbase\" } },\n    MbButton: {\n      props: {\n        label: \"Primary\",\n        state: \"active\",\n        size: \"medium\",\n        btnType: \"secondary\",\n        dropDownItems: undefined,\n      },\n    },\n    MbModal: {\n      props: {\n        open,\n        setOpen,\n        onClose: null,\n        topTitle: \"Top Title\",\n        children: \"Text\",\n        topElement: <div style={{ marginRight: \"8px\" }}>Help</div>,\n        topElementFirst: true,\n      },\n    },\n    MbPill: {\n      props: {\n        text: \"Mint\",\n        pillTemplate: \"blue\",\n      },\n    },\n    MbCharCounter: {\n      props: {\n        maxChars: 5,\n        counter: 0,\n      },\n    },\n    MbInput: {\n      props: {\n        id: \"testset\",\n        required: true,\n        placeholder: \"Enter Address\",\n        label: \"Address\",\n        hasPercentageLabel: true,\n        value: input,\n        onChange: (e) => {\n          setInput(e.target.value);\n        },\n        type: \"text\",\n        hasIcon: false,\n        maxChars: 20,\n      },\n    },\n    MbInfoCard: {\n      props: {\n        title: \"Title\",\n        titleIcon: false,\n        description: \"description goes here\",\n        descriptionImage: null,\n        descriptionIcon: \"mintbase_dark_badge\",\n        upperIcon: null,\n        isNumber: false,\n      },\n    },\n  },\n};\nconst iconsIpfs =\n  \"https://ipfs.near.social/ipfs/bafkreibonknhz4t4dj5kyfm4oghlv6ymmbyfk7b3a64bdkdxmqca56cpwq\";\nuseEffect(() => {\n  asyncFetch(iconsIpfs).then((res) => {\n    const icon = Object.keys(res?.body);\n    setIcons(icon);\n  });\n}, []);\nuseEffect(() => {\n  Storage.set(\"mode\", mode);\n}, [mode]);\nreturn (\n  <Theme>\n    <Container>\n      <div className=\"left-nav\">\n        <div className=\"title\">Cores</div>\n        {Object.keys(kit.core).map((key) => (\n          <div\n            className={`${key === display ? \"active\" : \"\"} item`}\n            onClick={() => setDisplay(key)}\n            key={key}\n          >\n            {key}\n          </div>\n        ))}\n        <div className=\"title\">Components</div>\n        {Object.keys(kit.compoennts).map((key) => (\n          <div\n            className={`${key === display ? \"active\" : \"\"} item`}\n            onClick={() => setDisplay(key)}\n            key={key}\n          >\n            {key}\n          </div>\n        ))}\n      </div>\n      <div className=\"view\">\n        <div className=\"top-nav\">\n          {tabs.map((tab) => (\n            <div\n              onClick={() => setTab(tab)}\n              className={currentTab === tab && \"active\"}\n            >\n              {tab}\n            </div>\n          ))}\n          |{\" \"}\n          <div onClick={() => setMode(mode === \"dark\" ? \"light\" : \"dark\")}>\n            <Widget\n              src={`${accountId}/widget/Mintbase.MbIcon`}\n              props={{\n                name: \"moon\",\n                customStyle:\n                  mode === \"dark\" &&\n                  \"border-bottom:1px solid #1ea7fd !important;\",\n                size: \"22px\",\n              }}\n            />\n          </div>\n        </div>\n        <div style={{ paddingLeft: \"1rem\" }}>\n          {currentTab === \"Preview\" &&\n            (Object.keys(kit.compoennts).includes(display) ? (\n              <Widget\n                src={`${accountId}/widget/Mintbase.` + display}\n                props={kit.compoennts[display].props}\n              />\n            ) : (\n              kit.core[display].preview\n            ))}\n          {currentTab === \"Docs\" &&\n            (Object.keys(kit.compoennts).includes(display)\n              ? `<Widget\n              src={\"${`${accountId}/widget/Mintbase.` + display}\n              props={${JSON.stringify(\n                kit.compoennts[display].props,\n                ndivl,\n                \" \"\n              )}}\n          />`\n              : kit.core[display].docs)}\n        </div>\n      </div>\n    </Container>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.UI-Kit", "fact_widget_deployments_id": "444581fd69fb3bbbb071b680d4771b27", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T11:43:20.585Z", "__row_index": 0}