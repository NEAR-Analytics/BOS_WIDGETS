{"tx_hash": "A9gUdjtqYGgAx7mzZMrCWfHzoX7mWABH7mLFwZhiUyQA", "action_id_social": "A2coecr48byEFfzhpnpacByM6NU3Sa1N9EXqBwYuPFTr-0-widget", "block_id": 116102608, "block_timestamp": "2024-04-04T08:36:32.081Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.Tokens.Owned", "source_code": "const { Pagination } = VM.require(\"buildhub.near/widget/components\") || {\n  Pagination: () => <></>,\n};\n\nconst { ownerId, isDarkModeOn, isConnected, showFilters } = props;\nconst Card = styled.div`\n  padding: 1em;\n  border: 1px solid #e5e8eb;\n  gap: 2em;\n  margin: 10px auto;\n  border-radius: 0.7em;\n  & input {\n    display: block;\n    padding: 0.5em;\n    width: 100%;\n    border: 1px solid #e5e8eb;\n    border-radius: 10px;\n    outline: none;\n    background: #f4f5f6;\n    color: #525c76;\n    :focus {\n      box-shadow: none;\n      border: 1px solid #0d99ff;\n    }\n    &::placeholder {\n      color: palevioletred;\n    }\n  }\n  .soulbound {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n  img {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n  }\n`;\n\nconst Cards = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 24px;\n  border-radius: 0.7em;\n  width: 100%;\n  margin-top: 1em;\n`;\n\nconst [nftData, setNftData] = useState([]);\nconst [loading, setLoading] = useState(true);\nconst [countNFTs, setCountNFTs] = useState(0);\nconst [pageNumber, setPageNumber] = useState(1);\nconst [showListed, setShowListed] = useState(false);\n\nconst limit = 20;\n\nconst offset = (pageNumber - 1) * limit;\nfunction fetchOwnedNFTs(owner, l, o) {\n  const data = asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n        query fetchOwnedNFTs @cached {\n            mb_views_nft_owned_tokens(\n              where: {owner: {_eq: \"${owner}\"}, listing_approval_id: {${\n        showListed ? `_is_null: false` : \"\"\n      }}\n      },\n              limit: ${l}\n              offset: ${o}\n              distinct_on: token_id\n            ) {\n              base_uri\n              description\n              media\n              nft_contract_id\n              price\n              title\n              token_id\n              issued_at\n              nft_contract_name\n              listing_approval_id\n              minter\n            }\n            mb_views_nft_owned_tokens_aggregate(\n              where: {owner: {_eq: \"${owner}\"},listing_approval_id: {${\n        showListed ? `_is_null: false` : \"\"\n      }}\n      } \n              distinct_on: token_id\n            ) {\n              aggregate {\n                count\n              }\n            }\n          }\n        \n        `,\n    }),\n  });\n  return data;\n}\nconst totalPages = Math.ceil(countNFTs / limit);\n\nconst listedToggleHandler = () => {\n  setShowListed((prev) => !prev);\n};\n\nconst res = useEffect(() => {\n  console.log({ totalPages, pageNumber, limit, offset });\n  fetchOwnedNFTs(props.ownerId || \"jgodwill.near\", 56, offset).then(\n    (data) => {\n      console.log(\"data\", data);\n      if (data.body.data?.mb_views_nft_owned_tokens?.length) {\n        setNftData(data.body.data?.mb_views_nft_owned_tokens);\n        setCountNFTs(\n          data.body.data?.mb_views_nft_owned_tokens_aggregate.aggregate.count\n        );\n        setLoading(false);\n      }\n    },\n    [offset, pageNumber]\n  );\n});\n\nconst WrapCards = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n  gap: 20px;\n  .count {\n    text-transform: uppercase;\n    font-weight: 400;\n    font-size: 16px;\n    color: ${isDarkModeOn ? \"#B3B5BD\" : \"#525c76\"};\n  }\n  .pagination_container {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-content: center;\n  }\n`;\n\nconst LeftFilter = styled.div`\n  background: ${isDarkModeOn ? \"rgba(30, 32, 48, 1)\" : \"#fff\"};\n  width: 22%;\n  height: 100%;\n  padding: 15px;\n  border-radius: 4px;\n  transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  display: flex;\n  gap: 24px;\n  flex-flow: column nowrap;\n  h2 {\n    font-size: 14px;\n    font-weight: bold;\n  }\n  .switch {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n  }\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n`;\n\nconst s = countNFTs > 1 ? \"s\" : \"\";\n\nreturn (\n  <WrapCards>\n    {showFilters && (\n      <LeftFilter>\n        <h2>Status</h2>\n        <div className=\"switch\">\n          <Widget\n            src={`bos.genadrop.near/widget/Mintbase.MbSwitch`}\n            props={{\n              id: \"showListed\",\n              label: \"Show only Listed\",\n              onChange: listedToggleHandler,\n              isDarkModeOn,\n            }}\n          />\n        </div>\n      </LeftFilter>\n    )}\n    <MainContent>\n      <div className=\"count\">{`${countNFTs} Result${s}`}</div>\n      {countNFTs > 0 ? (\n        <>\n          <Cards>\n            {nftData &&\n              nftData.map((data, index) => (\n                <div key={index}>\n                  <Widget\n                    src=\"bos.genadrop.near/widget/Mintbase.MbMetaCard\"\n                    props={{ data, loading, isDarkModeOn, isConnected }}\n                  />\n                </div>\n              ))}\n          </Cards>\n          <div className=\"pagination_container\">\n            <Pagination\n              totalPages={totalPages}\n              selectedPage={pageNumber}\n              onPageClick={(v) => setPageNumber(v)}\n            />\n          </div>\n        </>\n      ) : (\n        <h5>The user does not own anything yet.</h5>\n      )}\n    </MainContent>\n  </WrapCards>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.Tokens.Owned", "fact_widget_deployments_id": "c72b5c080e659a656d283d8a33c0c4fd", "inserted_timestamp": "2024-04-04T10:37:54.677Z", "modified_timestamp": "2024-04-04T10:37:54.677Z", "__row_index": 1}