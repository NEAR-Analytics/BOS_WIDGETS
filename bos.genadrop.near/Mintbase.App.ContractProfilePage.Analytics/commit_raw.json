{"tx_hash": "54J85WYqd4phZadoNpVQPCc3ZfDjdyMuK4RtWbEzv4Fy", "action_id_social": "9iDppY7z3MvmXZRKd1QkAndP1K4Yv1K8p7ooqq7An5wg-0-widget", "block_id": 118565729, "block_timestamp": "2024-05-09T09:52:11.179Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.ContractProfilePage.Analytics", "source_code": "const { MbChart } = VM.require(\"bos.genadrop.near/widget/components\") || {\n  MbChart: () => <></>,\n};\nconst { getStoreNFTs } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.utils.sdk\"\n);\nconst { MbInputField } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.MbInput\"\n) || {\n  MbInputField: () => <></>,\n};\nconst darkColors = {\n  page_bg: \"rgb(25,33,50)\",\n  horizen_bg: \"#fff\",\n  header_bg: \"rgb(49,62,89)\",\n  sideBar: {\n    sideBar_bg: \"rgb(49,62,89)\",\n    sideBar_color: \"#fff\",\n  },\n  footer: {\n    titlenelowBackground: \"#806ce1\",\n    titleBackground: \"#fff\",\n    fromBackground: \"rgb(55,72,107)\",\n    toBackground: \"rgb(55,72,107)\",\n    belowBackground: \"rgb(210, 202, 250)\",\n  },\n  dynamic_header: {\n    afterbrandcolor: \"\",\n    color1brand: \"#fff\",\n    color2brand: \"rgb(210, 202, 250)\",\n    colordescription: \"rgb(210, 202, 250)\",\n    background:\n      \"radial-gradient(circle, rgb(49,62,89) 0%, rgba(230,230,231,0.01) 0%, rgb(49,62,89) 100%, rgb(49,62,89) 100%, rgb(49,62,89) 100%, rgba(46,52,90,1) 100%);\",\n  },\n  search_sbt: {\n    section_bg: \"transparent\",\n    card_bg: \"transparent)\",\n    search_btn_bg: \"rgb(49,62,89)\",\n    search_btn_bg_hover: \"rgba(49,62,89,0.8)\",\n    search_btn_text: \"rgb(255,255,255)\",\n    input_bg: \"rgb(49,62,89)\",\n    input_bg_hover: \"rgba(49,62,89,0.8)\",\n    input_text_color: \"rgb(255,255,255)\",\n    input_border: \"rgba(49,62,89,0.8)\",\n    table_bg: \"transparent\",\n    table_color: \"rgb(255,255,255)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(255,255,255)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(255,255,255)\",\n    table_hover_bg: \"\",\n  },\n  sbt_info: {\n    section_bg: \"transparent\",\n    card_bg: \"rgb(49, 62, 89)\",\n    card_title_color: \"#806ce1\",\n    card_content_color: \"#fff\",\n  },\n  tab_sbt: {\n    backgroundColor: \"rgb(49,62,89)\",\n    textColor: \"#fff\",\n    headerColor: \"#806ce1\",\n    numberColor: \"#fff\",\n  },\n  sbt_area: {\n    section_bg: \"transparent\",\n    card_bg: \"rgb(49, 62, 89)\",\n    card_title_color: \"#806ce1\",\n  },\n  table_pagination: {\n    table_bg: \"rgb(49,62,89)\",\n    table_color: \"rgb(255,255,255)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(255,255,255)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(255,255,255)\",\n    table_hover_bg: \"\",\n    btn_border: \"rgb(25,33,50)\",\n    btn_bg: \"rgb(49,62,89)\",\n    btn_bg_active: \"rgb(25,33,50)\",\n    btn_color: \"#fff\",\n    input_bg: \"#2f3b54\",\n  },\n  election: {\n    textColor: \"rgb(255,255,255)\",\n  },\n  piePercentage: {\n    text: \"#f79bd3\",\n    filled: \"#d2cafa\",\n    empty: \"#f79bd3\",\n  },\n  chart: {\n    title: \"#fff\",\n    subtitle: \"rgba(255,255,255,0.7)\",\n    xAxis: \"rgb(255,255,255)\",\n    yAxis: \"#fff\",\n    legend: \"rgba(255,255,255,0.7)\",\n    legendHover: \"rgb(255,255,255)\",\n    rangeSelector: {\n      labels: \"rgba(255,255,255,0.7)\",\n      inputColor: \"rgb(255,255,255)\",\n      btn_bg: \"rgba(25,33,50,0.3)\",\n      btn_color: \"rgba(255,255,255,0.7)\",\n      btn_hover_bg: \"rgba(25,33,50,0.5)\",\n      btn_hover_color: \"rgba(255,255,255,0.8)\",\n      btn_active_bg: \"rgba(25,33,50,0.8)\",\n      btn_active_color: \"rgb(255,255,255)\",\n    },\n  },\n  spinnerColors: [\"#6F61C0\", \"#241468\"],\n  chartColor: [\n    \"#F79BD3\",\n    \"#82ca9d\",\n    \"#A084E8\",\n    \"#EA1179\",\n    \"#F79BD3\",\n    \"#A084E8\",\n    \"#241468\",\n    \"#9F0D7F\",\n  ],\n};\nconst lightColors = {\n  page_bg: \"rgb(241,242,245)\",\n  horizen_bg: \"#391b86\",\n  header_bg: \"rgb(210, 202, 250)\",\n  sideBar: {\n    sideBar_bg: \"rgb(210, 202, 250)\",\n    sideBar_color: \"#fff\",\n  },\n  footer: {\n    titlenelowBackground: \"#806ce1\",\n    titleBackground: \"#fff\",\n    fromBackground: \"rgb(210, 202, 250)\",\n    toBackground: \"rgb(210, 202, 250)\",\n    belowBackground: \"#806ce1\",\n  },\n  dynamic_header: {\n    afterbrandcolor: \"#789efb\",\n    color1brand: \"#000\",\n    color2brand: \"#806ce1\",\n    colordescription: \"#806ce1\",\n    background:\n      \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n  },\n  search_sbt: {\n    section_bg: \"rgb(235, 231, 253)\",\n    card_bg: \"\",\n    search_btn_bg: \"rgb(210, 202, 250)\",\n    search_btn_bg_hover: \"rgba(210, 202, 250,0.8)\",\n    search_btn_text: \"rgb(0,0,0)\",\n    input_bg: \"rgba(210, 202, 250,0.2)\",\n    input_bg_hover: \"rgba(210, 202, 250,0.4)\",\n    input_text_color: \"rgb(0,0,0)\",\n    input_border: \"rgba(210, 202, 250,0.4)\",\n    table_bg: \"transparent\",\n    table_color: \"rgb(0,0,0)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(0,0,0)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(0,0,0)\",\n    table_hover_bg: \"\",\n  },\n  sbt_info: {\n    section_bg: \"rgb(235, 231, 253)\",\n    card_bg: \"rgb(255, 255, 255)\",\n    card_title_color: \"#806ce1\",\n    card_content_color: \"#000\",\n  },\n  tab_sbt: {\n    backgroundColor: \"rgb(210, 202, 250)\",\n    textColor: \"#fff\",\n    headerColor: \"#806ce1\",\n    numberColor: \"#fff\",\n  },\n  sbt_area: {\n    section_bg: \"rgb(235, 231, 253)\",\n    card_bg: \"rgb(255, 255, 255)\",\n    card_title_color: \"#806ce1\",\n  },\n  table_pagination: {\n    table_bg: \"rgb(255,255,255)\",\n    table_color: \"rgb(0,0,0)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(0,0,0)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(0,0,0)\",\n    table_hover_bg: \"\",\n    btn_border: \"#000\",\n    btn_border: \"#806ce1\",\n    btn_bg: \"#fff\",\n    btn_bg_active: \"rgb(235, 231, 253)\",\n    btn_color: \"#000\",\n  },\n  election: {\n    textColor: \"rgb(0,0,0)\",\n  },\n  piePercentage: {\n    text: \"#8e67e8\",\n    filled: \"#391b86\",\n    empty: \"#8e67e8\",\n  },\n  chart: {\n    title: \"rgba(0,0,0,1)\",\n    subtitle: \"rgba(0,0,0,0.7)\",\n    xAxis: \"rgba(0,0,0,1)\",\n    yAxis: \"rgba(0,0,0,1)\",\n    legend: \"rgba(0,0,0,0.7)\",\n    legendHover: \"rgba(0,0,0,1)\",\n    rangeSelector: {\n      labels: \"rgba(0,0,0,0.7)\",\n      inputColor: \"rgba(0,0,0,0.5)\",\n      btn_bg: \"rgba(0,0,0,0.3)\",\n      btn_color: \"rgba(0,0,0,0.8)\",\n      btn_hover_bg: \"rgba(0,0,0,0.4)\",\n      btn_hover_color: \"rgba(0,0,0,1)\",\n      btn_active_bg: \"rgb(235, 231, 253)\",\n      btn_active_color: \"rgba(0,0,0,1)\",\n    },\n  },\n  spinnerColors: [\"#241468\", \"#82ca9d\"],\n  chartColor: [\n    \"#A084E8\",\n    \"#82ca9d\",\n    \"#F79BD3\",\n    \"#A084E8\",\n    \"#241468\",\n    \"#EA1179\",\n    \"#9F0D7F\",\n  ],\n};\nconst themeColor = !props.isDarkModeOn ? lightColors : darkColors;\nconst getUniqueAddressProps = (\n  data,\n  dateKey,\n  serieses,\n  colors,\n  chartOption\n) => {\n  data = data || [];\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\n  colors = colors || [];\n  chartOption = chartOption || {};\n  const dataFormat = serieses.map((series) => {\n    const dataFormated = data.map((d) => [\n      new Date(d[dateKey]).getTime(),\n      d[series.key],\n    ]);\n    return {\n      data: dataFormated,\n      name: series.seriesName,\n      type: series.type,\n      axisId: series.id,\n    };\n  });\n  const props = {\n    series: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      subtitle: \"\",\n      legend: true,\n      stacking: \"false\",\n      ...chartOption,\n    },\n    overrideOptions: {\n      plotOptions: {\n        column: {\n          stacking: \"false\",\n        },\n        series: {\n          dataGrouping: { enabled: false },\n        },\n      },\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\nconst Analytics = ({ contractId, isDarkModeOn }) => {\n  const Card = styled.div`\n    padding: 2em;\n    gap: 2em;\n    width: 100%;\n    margin: 10px auto;\n  `;\n  const Cards = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    grid-gap: 24px;\n    border-radius: 0.7em;\n    width: 100%;\n    margin-top: 1em;\n  `;\n  const [uniqueAddresses, setUniqueAddresses] = useState([]);\n  const [mintedData, setMintedData] = useState([]);\n  const [listedData, setListedData] = useState([]);\n  const [soldData, setSoldData] = useState([]);\n  const [months, setMonths] = useState(12);\n  function subtractMonthsAndFormat(numOfMonths) {\n    const currentDate = new Date();\n    currentDate.setMonth(currentDate.getMonth() - numOfMonths);\n    // Format the date in YYYY-MM-DD\n    const year = currentDate.getFullYear();\n    const month = (currentDate.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = currentDate.getDate().toString().padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  }\n  const fetchData = ({ type, monthsToSubtract }) => {\n    const formattedStartDate = subtractMonthsAndFormat(monthsToSubtract);\n    const currentDate = new Date();\n    const formattedEndDate = currentDate.toISOString().split(\"T\")[0];\n    return asyncFetch(\n      `https://mb-analytics-tmp-z3w7d7dnea-ew.a.run.app/${type}?resolution=daily&start=${formattedStartDate}&end=${formattedEndDate}&nft_contract_id=${contractId}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    ).then((result) => result.body);\n  };\n  useEffect(() => {\n    fetchData({ type: \"unique_account_ids\", monthsToSubtract: months })\n      .then(({ data, errors }) => {\n        if (errors) {\n          console.error(errors);\n        }\n        const structuredListedData = getUniqueAddressProps(\n          data,\n          \"year_month_day\",\n          [\n            {\n              key: \"unique_account_ids\",\n              seriesName: \"Unique Account\",\n              type: \"areaspline\",\n              id: 1,\n            },\n            {\n              key: \"interactions_count\",\n              seriesName: \"Interactions\",\n              type: \"areaspline\",\n              id: 2,\n            },\n          ],\n          themeColor.chartColor,\n          {\n            title: \"Unique addresses\",\n            stacking: \"normal\",\n          }\n        );\n        setUniqueAddresses(structuredListedData);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    fetchData({ type: \"listed\", monthsToSubtract: months })\n      .then(({ data, errors }) => {\n        if (errors) {\n          console.error(errors);\n        }\n        const structuredListedData = getUniqueAddressProps(\n          data,\n          \"year_month_day\",\n          [\n            {\n              key: \"listers_count\",\n              seriesName: \"Liters Count\",\n              type: \"areaspline\",\n              id: 1,\n            },\n            {\n              key: \"lists_count\",\n              seriesName: \"Lists Count\",\n              type: \"areaspline\",\n              id: 2,\n            },\n          ],\n          themeColor.chartColor,\n          {\n            title: \"Listed\",\n            stacking: \"normal\",\n          }\n        );\n        setListedData(structuredListedData);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    fetchData({ type: \"minted\", monthsToSubtract: months })\n      .then(({ data, errors }) => {\n        if (errors) {\n          console.error(errors);\n        }\n        const structuredListedData = getUniqueAddressProps(\n          data,\n          \"year_month_day\",\n          [\n            {\n              key: \"minters_count\",\n              seriesName: \"Minters Count\",\n              type: \"areaspline\",\n              id: 1,\n            },\n            {\n              key: \"mints_count\",\n              seriesName: \"Mints Count\",\n              type: \"areaspline\",\n              id: 2,\n            },\n          ],\n          themeColor.chartColor,\n          {\n            title: \"Minted\",\n            stacking: \"normal\",\n          }\n        );\n        setMintedData(structuredListedData);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    fetchData({ type: \"sold\", monthsToSubtract: months })\n      .then(({ data, errors }) => {\n        if (errors) {\n          console.error(errors);\n        }\n        const structuredSoldData = getUniqueAddressProps(\n          data,\n          \"year_month_day\",\n          [\n            {\n              key: \"sellers_count\",\n              seriesName: \"Sellers Count\",\n              type: \"areaspline\",\n              id: 1,\n            },\n            {\n              key: \"buyers_count\",\n              seriesName: \"Buyers Count\",\n              type: \"areaspline\",\n              id: 2,\n            },\n          ],\n          themeColor.chartColor,\n          {\n            title: \"Sold\",\n            stacking: \"normal\",\n          }\n        );\n        setSoldData(structuredSoldData);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [months]);\n  const WrapCards = styled.div`\n    display: flex;\n    flex-flow: column nowrap;\n    width: 100%;\n    gap: 24px;\n  `;\n  console.log(\"uniqueAddresses\", uniqueAddresses);\n  console.log(\"mintedData\", mintedData);\n  const analyticsData = [\n    {\n      title: \"Unique Addresses\",\n      data: uniqueAddresses,\n    },\n    {\n      title: \"Minted\",\n      data: mintedData,\n    },\n    {\n      title: \"Listed\",\n      data: listedData,\n    },\n    {\n      title: \"Sold\",\n      data: soldData,\n    },\n  ];\n  return (\n    <WrapCards>\n      {\" \"}\n      <Card\n        className=\"input\"\n        style={{ background: isDarkModeOn ? \"#404252\" : \"#fff\" }}\n      >\n        <MbInputField\n          id=\"months\"\n          placeholder={months}\n          type=\"text\"\n          label=\"Months\"\n          error={false}\n          className=\"input-field\"\n          value={months}\n          isDarkModeOn={isDarkModeOn}\n          onChange={(e) => setMonths(e.target.value)}\n        />\n      </Card>\n      {analyticsData ? (\n        analyticsData.map((data, index) => (\n          <div\n            key={index}\n            style={{ background: isDarkModeOn ? \"#404252\" : \"#fff\" }}\n          >\n            <Widget\n              src=\"bos.genadrop.near/widget/Mintbase.MbMixChart\"\n              props={{ ...data.data }}\n            />\n          </div>\n        ))\n      ) : (\n        <div>\n          <h5>Loading Charts</h5>\n          <div className={`w-100 d-block mt-2`}>\n            <Widget\n              src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n              props={{ ...spinnerColors }}\n            />\n          </div>{\" \"}\n        </div>\n      )}\n    </WrapCards>\n  );\n};\nreturn <Analytics {...props} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.ContractProfilePage.Analytics", "fact_widget_deployments_id": "f128715ea4443b52e396afc05815eb91", "inserted_timestamp": "2024-05-09T11:43:16.695Z", "modified_timestamp": "2024-05-09T11:43:16.695Z", "__row_index": 0}