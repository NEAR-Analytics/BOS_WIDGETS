{"tx_hash": "2Z3JGxEdkYu7HEvzZLTGmnvH2phXW2x5XFkGwmVqTwPf", "action_id_social": "6xc6jnWqgHxEUFn2qr2JJXVTW59XXQsbzhqFadPR7Ykj-0-widget", "block_id": 113352241, "block_timestamp": "2024-02-22T11:54:15.148Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.MbButton", "source_code": "const { getFontType } = VM.require(\"bos.genadrop.near/widget/Mintbase.Theme\");\n\nconst [isDropdownOpen, setIsDropdownOpen] = useState(false);\nconst [dropdownIconColors, setDropdownIconColors] = useState(null);\n\nconst EType = {\n  PRIMARY: \"primary\",\n  SECONDARY: \"secondary\",\n};\nconst EState = {\n  ACTIVE: \"active\",\n  CAUTION: \"caution\",\n  DISABLED: \"disabled\",\n  LOADING: \"loading\",\n};\n\nconst ESize = {\n  SMALL: \"small\",\n  MEDIUM: \"medium\",\n  BIG: \"big\",\n};\n\nconst getLoadingSize = (currentSize) => {\n  switch (currentSize) {\n    case \"small\":\n      return \"w-3.5 h-3.5\";\n    case \"medium\":\n      return \"w-4 h-4\";\n    case \"big\":\n      return \"w-5 h-5\";\n    default:\n      return \"w-4 h-4\";\n  }\n};\n\nconst getCurrentColor = (btnType, state) => {\n  switch (btnType) {\n    case EType.PRIMARY:\n      if (state === EState.DISABLED) {\n        return { dark: \"text-gray-300\", light: \"text-gray-700\" };\n      }\n      return { dark: \"black\", light: \"white\" };\n    case EType.SECONDARY:\n      if (state === EState.DISABLED) {\n        return { dark: \"text-gray-600\", light: \"text-gray-400\" };\n      } else if (state === EState.CAUTION) {\n        return { dark: \"text-gray-100\", light: \"text-error-300\" };\n      }\n      return { dark: \"white\", light: \"black\" };\n  }\n};\n\nconst label = props.label || \"default\";\nconst state = props.state || EState.ACTIVE;\nconst size = props.size || ESize.MEDIUM;\nconst btnType = props.btnType || EType.PRIMARY;\nconst dropDownItems = props.dropDownItems;\nconst customStyle = props.customStyle || \"\";\nconst isLoading = state === EState.LOADING;\nconst mode = props.mode || Storage.get(\"mode\");\n\nconst isDarkModeOn = mode === \"dark\";\n\nconst LoadingAnimation = ({ size, btnType }) => (\n  <div className=\"animate-pulse absolute inline w-full left-0\">\n    <div\n      className={`rounded-full ${\n        btnType === EType.SECONDARY\n          ? \"bg-black dark:bg-white\"\n          : \"bg-white dark:bg-black\"\n      } ${getLoadingSize(size)} m-0-auto`}\n    ></div>\n  </div>\n);\n\nuseEffect(() => {\n  if (!dropDownItems) return;\n  setDropdownIconColors(getCurrentColor(btnType, state));\n}, [dropDownItems, btnType, state]);\n\nconst Container = styled.div`\n  ${dropDownItems &&\n  `display:flex;\n    gap:4px;\n  `}\n  .button {\n    position: relative;\n    ${!customStyle && getFontType(size)}\n    border:none;\n    --tw-ring-opacity: 1;\n    &.big {\n      padding: 8px 16px;\n      min-width: 100px;\n      height: 32px;\n    }\n    &.medium {\n      padding: 6px 16px;\n      min-width: 80px;\n      height: 26px;\n    }\n    &.small {\n      padding: 6px 16px;\n      min-width: 80px;\n      height: 26px;\n    }\n    @media (min-width: 480px) {\n      &.button.big {\n        padding: 12px 52px;\n        min-width: 145px;\n        height: 42px;\n      }\n\n      &.button.medium {\n        padding: 8px 16px;\n        min-width: 100px;\n        height: 32px;\n      }\n    }\n    &.primary {\n      border-radius: 0.25rem;\n      color: ${isDarkModeOn ? \"black\" : \"white\"};\n      background: ${isDarkModeOn ? \"white\" : \"black\"};\n      transition-property: all;\n      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      transition-duration: 300ms;\n      transition-duration: 500ms;\n    }\n    &.primary:not(.disabled):not(.loading):focus {\n      background-color: ${isDarkModeOn ? \"var(--blue-100)\" : \"var(--blue-300)\"};\n      ${isDarkModeOn\n        ? \"--tw-ring-color: rgba(63, 66, 84, var(--tw-ring-opacity));\"\n        : \"--tw-ring-color: rgba(194, 197, 221, var(--tw-ring-opacity));\"}\n      --tw-ring-offset-shadow: 0 0 0 0 2px white;\n      --tw-ring-shadow: 0 0 0 0 calc(2px + 2px) var(--tw-ring-color);\n      box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow),\n        var(--tw-shadow, 0 0 #0000);\n    }\n    &.primary.active:hover {\n      background: ${isDarkModeOn ? \"var(--blue-100)\" : \"var(--blue-300)\"};\n    }\n    &.primary.disabled {\n      color: ${isDarkModeOn ? \"var(--gray-300)\" : \"var(--gray-700)\"};\n      background: ${isDarkModeOn ? \"var(--gray-700)\" : \"var(--gray-200)\"};\n      cursor: not-allowed;\n    }\n    &.primary.caution {\n      background: ${isDarkModeOn ? \"var(--error-100)\" : \"var(--error-300)\"};\n    }\n    &.secondary {\n      border-radius: 0.25rem;\n      background-color: transparent;\n      transition-property: all;\n      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      transition-duration: 300ms;\n      transition-duration: 500ms;\n      color: ${isDarkModeOn ? \"white\" : \"black\"};\n      border: 1px solid ${isDarkModeOn ? \"#5b5d6b\" : \"#9496a1\"};\n    }\n    &.secondary:hover {\n      border: 1px solid ${isDarkModeOn ? \"white\" : \"black\"};\n      background: ${isDarkModeOn ? \"#2B2E42\" : \"#ebedfb\"};\n    }\n    &.secondary:not(.disabled):not(.loading):focus {\n      background-color: ${isDarkModeOn\n        ? \"var(--blue-100-15)\"\n        : \"var(--blue-300-15)\"};\n      --tw-ring-color: rgba(194, 197, 221, var(--tw-ring-opacity));\n      --tw-ring-offset-shadow: 0 0 0 0 2px white;\n      --tw-ring-shadow: 0 0 0 0 calc(2px + 2px) var(--tw-ring-color);\n      box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow),\n        var(--tw-shadow, 0 0 #0000);\n    }\n    &.secondary.active:hover {\n      background-color: ${isDarkModeOn\n        ? \"var(--blue-100-15)\"\n        : \"var(--blue-300-15)\"};\n    }\n    &.secondary.disabled {\n      color: ${isDarkModeOn ? \"var(--gray-600)\" : \"var(--gray-400)\"};\n      cursor: not-allowed;\n      background-color: transparent;\n      --tw-ring-color: rgba(148, 150, 161, var(--tw-ring-opacity));\n    }\n    &.secondary.caution {\n      background-color: transparent;\n      color: ${isDarkModeOn ? \"var(--error-100)\" : \"var(--error-300)\"};\n      ${isDarkModeOn\n        ? `--tw-ring-color: rgba(237, 90, 90, var(--tw-ring-opacity));`\n        : `--tw-ring-color: rgba(199, 76, 76, var(--tw-ring-opacity));`}\n    }\n  }\n  .dropdown-btn.small-icon {\n    width: 26px;\n    height: 26px;\n  }\n\n  .dropdown-btn.medium-icon {\n    width: 26px;\n    height: 26px;\n  }\n\n  .dropdown-btn.big-icon {\n    width: 32px;\n    height: 32px;\n  }\n\n  @media (min-width: 480px) {\n    .dropdown-btn.medium-icon {\n      width: 32px;\n      height: 32px;\n    }\n\n    .dropdown-btn.big-icon {\n      width: 42px;\n      height: 42px;\n    }\n  }\n`;\nreturn (\n  <Container>\n    <button\n      type=\"button\"\n      className={`button ${btnType} ${state} ${\n        customStyle ? customStyle : `${size}` //\n      }`}\n      disabled={state === EState.DISABLED}\n      {...props}\n    >\n      <span style={{ visibility: isLoading ? \"hidden\" : \"visible\" }}>\n        {label}\n      </span>\n      {isLoading && <LoadingAnimation btnType={btnType} size={size} />}\n    </button>\n    {dropDownItems && (\n      <div\n        className=\"relative\"\n        onClick={() => {\n          if (state !== EState.DISABLED && state !== EState.LOADING) {\n            setIsDropdownOpen(!isDropdownOpen);\n          }\n        }}\n      >\n        <MbMenuWrapper setIsOpen={setIsDropdownOpen}>\n          <div>\n            <button\n              type=\"button\"\n              className={`button ${btnType} ${\n                state === EState.LOADING ? EState.DISABLED : state\n              } dropdown-btn ${size}-icon`}\n            >\n              <div className=\"pointer-events-none\t\">\n                <MbIcon\n                  name={\n                    isDropdownOpen\n                      ? EIconName.ARROW_DROP_UP\n                      : EIconName.ARROW_DROP_DOWN\n                  }\n                  size=\"18px\"\n                  color={dropdownIconColors?.light ?? \"black\"}\n                  darkColor={dropdownIconColors?.dark}\n                />\n              </div>\n            </button>\n          </div>\n          <MbDropdownMenu\n            items={dropDownItems}\n            isOpen={isDropdownOpen}\n            className=\"right-0 md:left-0 md:right-auto\"\n          />\n        </MbMenuWrapper>\n      </div>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.MbButton", "fact_widget_deployments_id": "fdd419aac534ceb922400ab5a3eb5a3c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}