{"tx_hash": "5otDAiov58RzdPT7WWevL8vc5qvJzq5Q6bWvGUniobR2", "action_id_social": "FyjrhjsYKwnk891ufaRYVgz5q5K5JVySXNrCZ5YfGeqP-0-widget", "block_id": 117544278, "block_timestamp": "2024-04-24T20:37:20.049Z", "signer_id": "bos.genadrop.near", "widget_name": "GenaDrop.NFT.Swap.NewOffer", "source_code": "const ShadowBOX = styled.div`\n  -webkit-box-shadow: -1px 0px 9px 8px rgba(0, 0, 0, 0.03);\n  -moz-box-shadow: -1px 0px 9px 8px rgba(0, 0, 0, 0.03);\n  box-shadow: -1px 0px 9px 8px rgba(0, 0, 0, 0.03);\n  border-radius: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\nconst ScrollContainer = styled.div`\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 5px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  height: 200px;\n  border-radius: 5px;\n  padding: 5px;\n  border: 1px solid lightgray;\n`;\nfunction generateRandomHexBytes(size) {\n  const byteToHex = (byte) => {\n    const hexTable = \"0123456789abcdef\";\n    return hexTable[Math.floor(byte / 16)] + hexTable[byte % 16];\n  };\n  let hexString = \"\";\n  for (let i = 0; i < size; i++) {\n    hexString += byteToHex(Math.floor(Math.random() * 256));\n  }\n  return hexString;\n}\nfunction multiplyBy10ToThe24(num) {\n  // Convert the number to a string\n  let strNum = num.toString();\n  // Number of zeros to append\n  let zeros = \"000000000000000000000000\";\n  // Check if the number has a decimal point\n  let indexOfDecimal = strNum.indexOf(\".\");\n  if (indexOfDecimal === -1) {\n    // If there's no decimal, simply append 24 zeros\n    return strNum + zeros;\n  } else {\n    // If there's a decimal, shift the numbers after the decimal\n    let beforeDecimal = strNum.substring(0, indexOfDecimal);\n    let afterDecimal = strNum.substring(indexOfDecimal + 1);\n    // Append necessary zeros and adjust the decimal point\n    let newNum = beforeDecimal + afterDecimal;\n    // Account for the cases where there's less than 24 digits after the decimal\n    let zerosToAdd = 24 - afterDecimal.length;\n    newNum += zeros.substring(0, zerosToAdd);\n    // Remove leading zeros\n    while (newNum[0] === \"0\" && newNum.length > 1) {\n      newNum = newNum.substring(1);\n    }\n    return newNum;\n  }\n}\nconst ConfirmOffer = () => {\n  const generateOfferAndCallContract = () => {\n    const allTransactions = [];\n    if (props.offerAmount && props.offerNFTS.length === 0) {\n      allTransactions.push({\n        contractName: \"swap.genadrop.near\",\n        methodName: \"mass_transfer\",\n        args: {\n          receiver_id: props.receiverId,\n        },\n        gas: 100000000000000,\n        deposit: 1000000000000000000000000 * parseFloat(props.offerAmount),\n      });\n    }\n    if (props.offerNFTS.length !== 0) {\n      const hash = generateRandomHexBytes(12);\n      const contractArgs = {\n        hash,\n        sender_id: context.accountId,\n        sender_near: multiplyBy10ToThe24(parseFloat(props.offerAmount)),\n        sender_nfts: props.sendNFTS.map((item) => ({\n          token_id: item.tokenId,\n          contract_id: item.contractId,\n        })),\n        receiver_id: props.receiverId,\n        receiver_nfts: props.offerNFTS.map((item) => ({\n          token_id: item.tokenId,\n          contract_id: item.contractId,\n        })),\n        is_holder: false,\n      };\n      const nearString = parseFloat(props.offerAmount);\n      const nearFees =\n        parseFloat(nearString) < 10\n          ? (parseFloat(nearString) + 0.105).toString()\n          : (parseFloat(nearString) + parseFloat(nearString) * 0.01).toString();\n      allTransactions.push({\n        contractName: \"swap.genadrop.near\",\n        methodName: \"send_offer\",\n        args: contractArgs,\n        gas: 100000000000000,\n        deposit: 1000000000000000000000000 * nearFees,\n      });\n    }\n    if (props.sendNFTS.length !== 0) {\n      props?.sendNFTS?.map((item) => {\n        allTransactions.push({\n          contractName: item.contractId,\n          methodName: \"nft_transfer\",\n          args: {\n            receiver_id: props.receiverId,\n            token_id: item.tokenId,\n          },\n          gas: 100000000000000,\n          deposit: 1,\n        });\n      });\n    }\n    Near.call(allTransactions);\n    props.update({ isOfferModalOpen: false });\n  };\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <h4>Confirm NFT Offer</h4>\n        <button\n          onClick={() => {\n            props.update({ isOfferModalOpen: false });\n          }}\n        >\n          X\n        </button>\n      </div>\n      <p style={{ marginBottom: 5, wordBreak: \"break-all\" }}>\n        Offering:{\" \"}\n        <Widget\n          src=\"bos.genadrop.near/widget/GenaDrop.NFT.AccountProfile\"\n          props={{ accountId: context.accountId }}\n        />\n        <br />\n        near: \u24c3 {props.offerAmount}\n      </p>\n      <ScrollContainer>\n        {(props?.sendNFTS ?? [])?.map((item) => (\n          <ShadowBOX\n            style={{\n              width: \"100%\",\n              marginBottom: 10,\n              display: \"flex\",\n              textAlign: \"center\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <a\n              target=\"_blank\"\n              href={`/#/bos.genadrop.near/widget/GenaDrop.NFT.Details?contractId=${item.contractId}&tokenId=${item.tokenId}`}\n            >\n              <div>\n                <img\n                  style={{ width: 60, height: 60, borderRadius: 10 }}\n                  src={item.media}\n                />\n                <p style={{ marginBottom: 0 }}>Token ID : {item.tokenId}</p>\n                <p style={{ marginBottom: 0, fontSize: 10 }}>\n                  NFT Contract : {item.contractId}\n                </p>\n              </div>\n            </a>\n          </ShadowBOX>\n        ))}\n      </ScrollContainer>\n      <p style={{ marginBottom: 5, marginTop: 10, wordBreak: \"break-all\" }}>\n        Receving\n        <Widget\n          src=\"bos.genadrop.near/widget/GenaDrop.NFT.AccountProfile\"\n          props={{ accountId: props.receiverId }}\n        />\n      </p>\n      <ScrollContainer>\n        {(props?.offerNFTS ?? [])?.map((item) => (\n          <ShadowBOX\n            style={{\n              width: \"100%\",\n              marginBottom: 10,\n              display: \"flex\",\n              textAlign: \"center\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <a\n              target=\"_blank\"\n              href={`/#/bos.genadrop.near/widget/GenaDrop.NFT.Details?contractId=${item.contractId}&tokenId=${item.tokenId}`}\n            >\n              <div>\n                <img\n                  style={{ width: 60, height: 60, borderRadius: 10 }}\n                  src={item.media}\n                />\n                <p style={{ marginBottom: 0, fontSize: 12 }}>\n                  Token ID : {item.tokenId}\n                </p>\n                <p style={{ marginBottom: 0, fontSize: 10 }}>\n                  NFT Contract : {item.contractId}\n                </p>\n              </div>\n            </a>\n          </ShadowBOX>\n        ))}\n      </ScrollContainer>\n      <button\n        onClick={() => generateOfferAndCallContract()}\n        style={{ marginTop: 10 }}\n      >\n        Offer\n      </button>\n    </div>\n  );\n};\nreturn props.isOfferModalOpen ? (\n  <Widget\n    src=\"bos.genadrop.near/widget/GenaDrop.NFT.Swap.Modal\"\n    props={{\n      body: ConfirmOffer(),\n      hidden: !props?.isOfferModalOpen,\n      contentStyles: {\n        style: {\n          width: 600,\n        },\n      },\n    }}\n  />\n) : (\n  <></>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/GenaDrop.NFT.Swap.NewOffer", "fact_widget_deployments_id": "765be303f1a28d74af0f6466c392c072", "inserted_timestamp": "2024-04-24T23:05:50.652Z", "modified_timestamp": "2024-04-24T23:05:50.652Z", "__row_index": 0}