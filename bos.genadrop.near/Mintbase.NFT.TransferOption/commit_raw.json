{"tx_hash": "3t96h1uYoHMgn9jc9n47EQtz6gnVTfEGqNifEKEfXyoR", "action_id_social": "CBzRbo8PRnMDbtczsKnmXbVqYW4FD4G4VnDGjaUKJT8z-0-widget", "block_id": 117657323, "block_timestamp": "2024-04-26T10:09:01.207Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.NFT.TransferOption", "source_code": "const { nftTransfer } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.NFT.modules\"\n);\nconst cancelSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n  >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\n    <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"></path>\n  </svg>\n);\nconst TransferContainer = styled.div`\n  .home-dark {\n    width: 600px;\n    height: 542px;\n    background: #1f2031;\n    padding-top: 15px;\n  }\n  .home-light {\n    width: 600px;\n    height: 542px;\n    background: #fff;\n    padding-top: 15px;\n  }\n  @media (max-width: 500px) {\n    width: 95% !important;\n  }\n`;\nconst Top = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 30px;\n  height: 60px;\n  border-bottom: 1px solid\n    ${(props) => (props.isDarkModeOn ? \"#3e4352\" : \"#e7ebee\")};\n  p {\n    font-weight: bold;\n    color: ${(props) => (props.isDarkModeOn ? \"#fff\" : \"#000\")};\n  }\n  p:last-child {\n    cursor: pointer;\n  }\n`;\nconst Token = styled.div`\n  background: ${(props) => (props.isDarkModeOn ? \"#262a3b\" : \"#f8f8f8\")};\n  display: flex;\n  align-items: center;\n  padding-top: 10px;\n  justify-content: center;\n  p {\n    color: ${(props) => (props.isDarkModeOn ? \"#fff\" : \"#000\")};\n  }\n`;\nconst Content = styled.div`\n  height: 228px;\n  overflow-y: scroll;\n  border-bottom: 1px solid #e7ebee;\n  .text-dark {\n    padding: 20px;\n    p:first-child {\n      color: #91959f;\n    }\n    p {\n      margin: 0;\n      color: #fff;\n    }\n  }\n  .text-white {\n    padding: 20px;\n    p:first-child {\n      color: #000;\n    }\n    p {\n      margin: 0;\n      color: #000;\n    }\n  }\n`;\nconst Cards = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  .dark {\n    svg {\n      color: #fff !important;\n    }\n    .count {\n      color: #fff;\n      background: #3e4352;\n    }\n    .account,\n    .count {\n      color: #fff;\n      background-color: #111222;\n      &:focus {\n        border: 1px solid var(--bs-primary-border-subtle);\n        outline: none;\n      }\n    }\n  }\n  .light {\n    svg {\n      color: #000 !important;\n    }\n    .count {\n      color: #000;\n      background: #d0d5d9;\n    }\n    .account,\n    .count {\n      color: \"#000\";\n      background-color: #f2f5f8;\n      &:focus {\n        border: 1px solid var(--bs-primary-border-subtle);\n        outline: none;\n      }\n    }\n  }\n  .accountCard {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 10px;\n    border: none;\n    margin-bottom: 11px;\n    padding: 0 20px;\n    .count {\n      width: 50px;\n      height: 45px;\n      border: none;\n      border-radius: 4px;\n      padding: 0 10px;\n    }\n    .account {\n      flex: 1;\n      padding: 0 10px;\n      border-radius: 4px;\n      border: transparent;\n      transition: 0.3s ease-in-out;\n      height: 45px;\n    }\n  }\n  .add-dark {\n    padding: 30px;\n    color: #c3cefd;\n    cursor: pointer;\n    width: max-content;\n  }\n  .add-light {\n    width: max-content;\n    padding: 30px;\n    color: #4f58a3;\n    cursor: pointer;\n  }\n`;\nconst Bottom = styled.div`\n  display: flex;\n  margin-top: 40px;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px;\n  div {\n    display: flex;\n    gap: 10px;\n  }\n  .token {\n    width: 126px;\n    height: 72px;\n    background: ${(props) => (props.isDarkModeOn ? \"#262a3b\" : \"#f8f8f8\")};\n    padding: 8px;\n    display: flex;\n    flex-direction: column;\n    color: ${(props) => (props.isDarkModeOn ? \"#fff\" : \"#000\")};\n    span {\n      font-size: 12px;\n    }\n  }\n  .clear {\n    display: flex;\n    align-items: center;\n    p {\n      margin: 0;\n      padding: 5px 10px;\n      border-radius: 0.25rem;\n      transition: 0.3s;\n      background: ${(props) =>\n        props.isDarkModeOn ? \"#c5d0ff\" : \"transparent\"};\n      color: #4f58a3;\n      cursor: pointer;\n      &:hover {\n        background: ${(props) =>\n          props.isDarkModeOn ? \"#c5d0ff\" : \"rgba(59, 130, 246, 0.5)\"};\n      }\n    }\n    button {\n      background: #000;\n      border: none;\n      &:disabled {\n        background: #d0d5d9;\n        cursor: not-allowed;\n        color: #000;\n      }\n    }\n  }\n`;\nconst TransferOption = ({ onClose, data, isDarkModeOn }) => {\n  const [tokens, setTokens] = useState([]);\n  const [accountIds, setAccountIds] = useState([\n    {\n      accountId: \"\",\n      tokenAmount: \"\",\n    },\n  ]);\n  function fetchNFTDetails() {\n    asyncFetch(\"https://graph.mintbase.xyz\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"mb-api-key\": \"omni-site\",\n        \"x-hasura-role\": \"anonymous\",\n      },\n      body: JSON.stringify({\n        query: `  \n        query v2_omnisite_GetTokenByThingID($thingId: String!, $limit: Int, $offset: Int, $search_fields: [mb_views_nft_tokens_bool_exp!]) {\n          token: mb_views_nft_tokens(\n            where: {metadata_id: {_eq: $thingId}, burned_timestamp: {_is_null: true}, _or: $search_fields}\n            limit: $limit\n            offset: $offset\n          ) {\n            id: token_id\n            ownerId: owner\n          }\n    \n        }\n        `,\n        variables: {\n          limit: 50,\n          offset: 0,\n          thingId: data?.metadata_id,\n          search_fields: {\n            owner: {\n              _eq: data?.owner,\n            },\n          },\n        },\n      }),\n    }).then((data) => {\n      if (data?.body?.data) {\n        setTokens(data?.body?.data?.token?.map((data) => data?.id));\n      }\n    });\n  }\n  useEffect(() => {\n    fetchNFTDetails();\n  }, []);\n  const handleCheckAccount = () => {\n    fetch(\"https://rpc.mainnet.near.org\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true,\n      },\n      body: JSON.stringify({\n        id: \"dontcare2\",\n        jsonrpc: \"2.0\",\n        method: \"query\",\n        params: {\n          request_type: \"view_account\",\n          finality: \"final\",\n          account_id: \"account\",\n        },\n      }),\n    });\n  };\n  const addAccounts = () => {\n    setAccountIds([\n      ...accountIds,\n      {\n        tokenAmount: \"\",\n        accountId: \"\",\n      },\n    ]);\n  };\n  const handleTransfer = () => {\n    let transfers = [];\n    if (accountIds.length === 1 && accountIds[0].tokenAmount === \"1\") {\n      nftTransfer(\n        data?.token_id,\n        accountIds[0]?.accountId,\n        data?.nft_contract_id\n      );\n    } else {\n      // Batch transfer\n      let k = 0;\n      for (let i = 0; i < accountIds.length; i++) {\n        const { accountId, tokenAmount } = accountIds[i];\n        for (let j = 0; j < parseInt(tokenAmount); j++) {\n          const tokenId = tokens[k] || \"\";\n          k++;\n          transfers.push([tokenId, accountId]);\n        }\n      }\n      nftTransfer(data?.token_id, transfers, data?.nft_contract_id);\n    }\n  };\n  const totalTokenAmount = accountIds.reduce((total, data) => {\n    return total + parseInt(data.tokenAmount || 0);\n  }, 0);\n  const handleAccountName = (e, index, name) => {\n    const newFields = accountIds;\n    newFields[index][name] = e.target.value;\n    setAccountIds(newFields);\n  };\n  const handleRemoveCard = (id) => {\n    const existingFields = accountIds?.filter((_, index) => index !== id);\n    setAccountIds(existingFields);\n  };\n  return (\n    <TransferContainer>\n      <div className={isDarkModeOn ? \"home-dark\" : \"home-light\"}>\n        <Top isDarkModeOn={isDarkModeOn}>\n          <p>Transfer</p>\n          <p onClick={onClose}>X</p>\n        </Top>\n        <Token isDarkModeOn={isDarkModeOn}>\n          {tokens?.length === 1 ? (\n            <p>Token: {tokens[0]}</p>\n          ) : (\n            <p>Multiple Tokens</p>\n          )}\n        </Token>\n        <Content>\n          <div className={isDarkModeOn ? \"text-dark\" : \"text-white\"}>\n            <p>Airdrop to multiple accounts</p>\n            <p>Amount of tokens and recipient account</p>\n          </div>\n          <Cards>\n            <div className={isDarkModeOn ? \"dark\" : \"light\"}>\n              {accountIds.map((data, index) => (\n                <div key={index} className=\"accountCard\">\n                  <input\n                    className=\"count\"\n                    type=\"number\"\n                    maxLength={2}\n                    max={tokens?.length - data?.amount}\n                    onChange={(e) => handleAccountName(e, index, \"tokenAmount\")}\n                    value={data?.tokenAmount}\n                  />\n                  <input\n                    value={data?.accountId}\n                    onChange={(e) => handleAccountName(e, index, \"accountId\")}\n                    className=\"account\"\n                    placeholder=\"account.near\"\n                  />\n                  <div\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() =>\n                      accountIds.length > 1 ? handleRemoveCard(index) : {}\n                    }\n                  >\n                    {cancelSvg}\n                  </div>\n                </div>\n              ))}\n              <div\n                onClick={addAccounts}\n                className={isDarkModeOn ? \"add-dark\" : \"add-light\"}\n              >\n                Add Another Account\n              </div>\n            </div>\n          </Cards>\n        </Content>\n        <Bottom isDarkModeOn={isDarkModeOn}>\n          <div>\n            <div className=\"token\">\n              <span>Available Tokens</span>\n              <p>{Math.max(tokens.length - totalTokenAmount, 0)}</p>\n            </div>\n            <div className=\"token\">\n              <span>Available Tokens</span>\n              <p>{tokens?.length}</p>\n            </div>\n          </div>\n          <div className=\"clear\">\n            <p\n              onClick={() =>\n                setAccountIds([\n                  {\n                    accountId: \"\",\n                    tokenAmount: \"\",\n                  },\n                ])\n              }\n            >\n              Clear all\n            </p>\n            <button\n              disabled={\n                accountIds.some(\n                  (data) => data.accountId === \"\" || data.tokenAmount === \"\"\n                ) || tokens.length < totalTokenAmount\n              }\n              onClick={handleTransfer}\n            >\n              {\" \"}\n              Continue\n            </button>\n          </div>\n        </Bottom>\n      </div>\n    </TransferContainer>\n  );\n};\nreturn <TransferOption {...props} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.NFT.TransferOption", "fact_widget_deployments_id": "318b197351882f5cc0cebac1b0ed7181", "inserted_timestamp": "2024-04-26T11:43:20.585Z", "modified_timestamp": "2024-04-26T11:43:20.585Z", "__row_index": 0}