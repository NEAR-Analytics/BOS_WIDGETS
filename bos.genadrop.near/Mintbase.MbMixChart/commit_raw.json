{"tx_hash": "54J85WYqd4phZadoNpVQPCc3ZfDjdyMuK4RtWbEzv4Fy", "action_id_social": "9iDppY7z3MvmXZRKd1QkAndP1K4Yv1K8p7ooqq7An5wg-0-widget", "block_id": 118565729, "block_timestamp": "2024-05-09T09:52:11.179Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.MbMixChart", "source_code": "const themeColor = props.themeColor;\nconst theme = themeColor?.chart\n  ? {\n      title: {\n        style: {\n          color: themeColor.chart?.title,\n          fontWeight: \"bold\",\n        },\n      },\n      subtitle: {\n        style: {\n          color: themeColor.chart?.subtitle,\n        },\n      },\n      xAxis: { labels: { style: { color: themeColor.chart?.xAxis } } },\n      yAxis: { labels: { style: { color: themeColor.chart?.yAxis } } },\n      legend: {\n        itemStyle: {\n          color: themeColor.chart?.legend,\n        },\n        itemHoverStyle: {\n          color: themeColor.chart?.legendHover,\n        },\n      },\n      rangeSelector: {\n        buttonTheme: {\n          fill: themeColor?.chart?.rangeSelector?.btn_bg,\n          style: {\n            color: themeColor?.chart?.rangeSelector?.btn_color,\n          },\n          states: {\n            hover: {\n              fill: themeColor?.chart?.rangeSelector?.btn_hover_bg,\n              style: {\n                color: themeColor?.chart?.rangeSelector?.btn_hover_color,\n              },\n            },\n            select: {\n              fill: themeColor?.chart?.rangeSelector?.btn_active_bg,\n              style: {\n                color: themeColor?.chart?.rangeSelector?.btn_active_color,\n              },\n            },\n          },\n        },\n        inputStyle: {\n          color: themeColor?.chart?.rangeSelector?.inputColor,\n        },\n        labelStyle: {\n          color: themeColor?.chart?.rangeSelector?.labels,\n        },\n      },\n    }\n  : {};\nconst series = props.series ?? [];\nlet colors = props.colors ?? [\n  \"#A084E8\",\n  \"#6F61C0\",\n  \"#241468\",\n  \"#9F0D7F\",\n  \"#EA1179\",\n  \"#F79BD3\",\n];\nconst overrideOptions = props.overrideOptions || {};\nconst chartOption = {\n  title: \"chart title\",\n  subtitle: \"\",\n  legend: false,\n  stacking: false,\n  ...props.chartOption,\n};\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\n  color1: props?.spinnerColors[0],\n  color2: props?.spinnerColors[1],\n};\nconst other_colors = [\n  \"#1f77b4\",\n  \"#ff7f0e\",\n  \"#2ca02c\",\n  \"#d62728\",\n  \"#9467bd\",\n  \"#8c564b\",\n  \"#e377c2\",\n  \"#7f7f7f\",\n  \"#bcbd22\",\n  \"#17becf\",\n];\nif (series.length > colors.length) {\n  for (let i = colors.length; i < series.length; i++) {\n    colors.push(other_colors[i % other_colors.length]);\n  }\n}\nif (series.length > colors.length) {\n  for (let i = colors.length; i < series.length; i++) {\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n  }\n}\nconst chartSeries = series.reduce(\n  (totalChartData, series, i) => {\n    let yAxis;\n    let data;\n    const index = totalChartData.yAxis.findIndex(\n      (axis) => axis._id === series.axisId\n    );\n    if (index === -1) {\n      yAxis = {\n        _id: series.axisId,\n        offset: 15,\n        margin: 10,\n        title: { text: series.name, style: { color: colors[i] } },\n        labels: { style: { color: colors[i] } },\n      };\n      data = {\n        yAxis: totalChartData.yAxis.length,\n        name: series.name,\n        type: series.type,\n        data: series.data,\n      };\n      if (totalChartData.yAxis.length % 2 !== 0) yAxis.opposite = false;\n      totalChartData.yAxis.push(yAxis);\n    } else {\n      data = {\n        yAxis: index,\n        name: series.name,\n        type: series.type,\n        data: series.data,\n      };\n    }\n    totalChartData.data.push(data);\n    return totalChartData;\n  },\n  { yAxis: [], data: [] }\n);\nState.init({\n  isLoading: true,\n});\nconst code = `\n<html>\n  <head>\n    <script\n      type=\"text/javascript\"\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"\n    ></script>\n    <script src=\"https://code.highcharts.com/stock/highstock.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\n  </head>\n  <body>\n    <div id=\"container\"></div>\n  </body> \n  <script>\n  \nwindow.addEventListener(\"message\", function (event) {}, false);\nconst handleMessage = (message) => {\n  const { chartSeries, colors, chartOption, overrideOptions, theme} = message;\n  const stacking = chartOption.stacking\n    ? chartOption.stacking === \"normal\" || chartOption.stacking === \"percent\"\n      ? chartOption.stacking\n      : undefined\n    : undefined;\n   Highcharts.theme=theme;\n   Highcharts.setOptions( Highcharts.theme);\n  const chart = \n  Highcharts.stockChart(\"container\", {\n    chart: {\n      backgroundColor: \"transparent\",\n      zooming: {\n        mouseWheel: false,\n      },\n    },\n    colors: colors,\n    navigator: {\n      enabled: false,\n    },\n    title: {\n      text: chartOption.title,\n      align: \"center\",\n    },\n    subtitle: {\n      text: chartOption.subtitle,\n      align: \"center\",\n    },\n    plotOptions: {\n      column: {\n        stacking: stacking,\n      },\n    },\n    yAxis: chartSeries.yAxis,\n    xAxis: {\n      type: \"datetime\",\n    },\n    rangeSelector: {\n      // buttons: [\n      //   {\n      //     type: \"day\",\n      //     count: 2,\n      //     text: \"1d\",\n      //   },\n      //   {\n      //     type: \"week\",\n      //     count: 1,\n      //     text: \"1m\",\n      //   },\n      //   {\n      //     type: \"month\",\n      //     count: 1,\n      //     text: \"2m\",\n      //   },\n      //   {\n      //     type: \"all\",\n      //     count: 1,\n      //     text: \"All\",\n      //   },\n      // ],\n      selected: 1,\n      inputEnabled: true,\n    },\n    lang: {\n      noData: \"no data to display\",\n    },\n    noData: {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"15px\",\n      },\n    },\n    tooltip: {\n      split : true,\n    },\n    legend: {\n      enabled: chartOption.legend,\n    },\n    series: chartSeries.data,\n    ...overrideOptions\n  });\n  window.iFrameResizer.onMessage = () => {};\n};\nwindow.iFrameResizer = {\n  onMessage: handleMessage,\n};\n  </script>\n</html>\n`;\nreturn (\n  <div\n    className=\"w-100 d-flex justify-content-center align-items-center\"\n    style={{\n      minHeight: \"300px\",\n      minWidth: \"300px\",\n    }}\n  >\n    <>\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\n        <Widget\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n          props={{ ...spinnerColors }}\n        />\n      </div>\n      <iframe\n        iframeResizer\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\n        srcDoc={code}\n        message={{\n          chartSeries,\n          colors,\n          chartOption,\n          overrideOptions,\n          theme,\n        }}\n        onLoad={() => {\n          State.update({\n            isLoading: false,\n          });\n        }}\n      />\n    </>\n  </div>\n);\n// {\n//   \"series\": [\n//     {\n//       \"data\": [\n//         [\n//           timestamp,\n//           value\n//         ]\n//       ], // data timestamp must be sorted\n//       \"name\": \"series name\",\n//       \"type\": \"spline - line - area - areaspline - column\",\n//       \"axisId\":1-2-... datasets with the same axis range must be have equal id\n//     }\n//   ],\n//   \"colors\": [\n//     \"color1\",\n//     \"color2\"\n//   ], // optional\n//   \"chartOption\": {\n//     \"title\": \"chart title\",\n//     \"subtitle\": \"chart subtitle\",\n//     \"legend\": true - false,\n//     \"stacking\":\"false - normal - percent\" // optional , only column charts can be stacked ,\n//      \"background\":\"black\"\n//   },\n//    \"spinnerColors\":[],  // optional , two colors\n//    \"overrideOptions\":{},\n//  themeColor: {\n//     chart: {\n//       title: \"red\",\n//       subtitle: \"blue\",\n//       xAxis: \"red\",\n//       yAxis: \"blue\",\n//       legend: \"green\",\n//       legendHover: \"blue\",\n//       rangeSelector: {\n//         labels: \"red\",\n//         inputColor: \"blue\",\n//         btn_bg: \"red\",\n//         btn_color: \"blue\",\n//         btn_hover_bg: \"red\",\n//         btn_hover_color: \"blue\",\n//         btn_active_bg: \"red\",\n//         btn_active_color: \"blue\",\n//       },\n//     },\n//   },\n// }\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.MbMixChart", "fact_widget_deployments_id": "92db76f7c09abf1decbb593c5ceaa95d", "inserted_timestamp": "2024-05-09T11:43:16.695Z", "modified_timestamp": "2024-05-09T11:43:16.695Z", "__row_index": 0}