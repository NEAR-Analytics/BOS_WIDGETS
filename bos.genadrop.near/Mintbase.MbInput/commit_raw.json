{"tx_hash": "54J85WYqd4phZadoNpVQPCc3ZfDjdyMuK4RtWbEzv4Fy", "action_id_social": "9iDppY7z3MvmXZRKd1QkAndP1K4Yv1K8p7ooqq7An5wg-0-widget", "block_id": 118565729, "block_timestamp": "2024-05-09T09:52:11.179Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.MbInput", "source_code": "const { MbCharCounter } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.components\"\n);\nconst EControlStatus = {\n  NORMAL: \"normal\",\n  VALID: \"valid\",\n  INVALID: \"invalid\",\n};\nconst inputSize = props.inputSize || \"medium\";\nconst controlStatus = props.controlStatus || \"normal\";\nconst Label = styled.div`\n  display: block;\n  margin-bottom: 8px;\n  color: #000;\n  &.dark {\n    color: #fff;\n  }\n`;\nconst Asterisk = styled.span`\n  color: #c74c4c;\n  &.dark {\n    color: #ed5a5a;\n  }\n`;\nconst Container = styled.div`\n  .main-input {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-radius: 0.25rem;\n    &.disabled {\n      background: #d2d4da;\n    }\n    &.disabled-dark {\n      background: #404252;\n    }\n    &.default {\n      transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1);\n      background: #f3f4f8;\n      :hover {\n        background: #ebedfb;\n      }\n      :focus-within {\n        box-shadow: 0 0 0 1px #c5d0ff;\n      }\n    }\n    &.default-dark {\n      transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1);\n      background: #101223;\n      :hover {\n        background: #070c2b;\n      }\n      :focus-within {\n        box-shadow: 0 0 0 1px #c5d0ff;\n      }\n    }\n    &.empty:focus-within {\n      box-shadow: 0 0 0 1px #1aa7ec;\n    }\n    &.valid {\n      box-shadow: 0 0 0 1px #1aa7ec;\n    }\n    &.invalid {\n      box-shadow: 0 0 0 1px #ed5a5a;\n      :focus-within {\n        box-shadow: 0 0 0 1px #ed5a5a;\n      }\n    }\n  }\n  .input-wrapper {\n    padding: 10px;\n    max-height: 34px;\n    @media (min-width: 480px) {\n      padding: 12px;\n      max-height: 40px;\n    }\n  }\n  .textarea-wrapper {\n    padding: 10px;\n    max-height: max-content;\n    @media (min-width: 480px) {\n      padding: 12px;\n      max-height: max-content;\n    }\n  }\n`;\nconst InputField = styled.div`\n  display: flex;\n  width: 100%;\n  background: transparent;\n  .input-field {\n    outline: none;\n    border: none;\n    background: transparent;\n    width: 100%;\n    :focus {\n      outline: none;\n      outline-offset: 2px;\n    }\n  }\n  .dark-btn {\n    color: #fff;\n    ::placeholder {\n      color: var(--gray-400, #9496a1);\n    }\n  }\n  .light-btn {\n    color: #000;\n    ::placeholder {\n      color: #777986;\n    }\n  }\n  .percentage-label {\n    color: #777986;\n  }\n`;\nconst MbInputField = ({\n  id,\n  required,\n  disabled,\n  placeholder,\n  label, //string\n  hasPercentageLabel,\n  value,\n  type,\n  error,\n  count,\n  hasIcon,\n  maxChars, // number\n  defaultValue, // number | undefined\n  onChange,\n  customIcon, // JSX.Element\n  className,\n  style,\n  rows,\n  isDarkModeOn,\n}) => {\n  const wrapperClasses =\n    disabled && isDarkModeOn\n      ? \"disabled-dark\"\n      : disabled && !isDarkModeOn\n      ? \"disabled\"\n      : !disabled && error\n      ? \"invalid\"\n      : !disabled && isDarkModeOn\n      ? \"default-dark\"\n      : \"default\";\n  const typeClass = type === \"textarea\" ? \"textarea-wrapper\" : \"input-wrapper\";\n  return (\n    <Container className={className} style={style}>\n      {label && (\n        <Label className={isDarkModeOn && \"dark\"} style={style}>\n          {label}\n          {required && (\n            <Asterisk className={isDarkModeOn && \"dark\"}> *</Asterisk>\n          )}\n        </Label>\n      )}\n      <div\n        className={`main-input ${typeClass} ${wrapperClasses} ${controlStatus}`}\n      >\n        <InputField key={`input-container-${id}`}>\n          {type === \"textarea\" ? (\n            <textarea\n              id={id}\n              key={`input-field-${id}`}\n              required={required}\n              disabled={disabled}\n              placeholder={placeholder}\n              value={value}\n              rows={rows}\n              maxLength={maxChars}\n              className={`${className} ${\n                isDarkModeOn ? \"dark-btn\" : \"light-btn\"\n              }`}\n              onWheel={(e) => {\n                if (type !== \"number\") return;\n                e.currentTarget.blur();\n              }}\n              onChange={onChange}\n            />\n          ) : (\n            <input\n              id={id}\n              key={`input-field-${id}`}\n              required={required}\n              disabled={disabled}\n              placeholder={placeholder}\n              value={value}\n              rows={rows}\n              type={type}\n              maxLength={maxChars}\n              className={`${className} ${\n                isDarkModeOn ? \"dark-btn\" : \"light-btn\"\n              }`}\n              onWheel={(e) => {\n                if (type !== \"number\") return;\n                e.currentTarget.blur();\n              }}\n              onChange={onChange}\n            />\n          )}\n          {hasPercentageLabel && <span className=\"percentage-label\">%</span>}\n        </InputField>\n        {hasIcon && (\n          <div className=\"flex\">\n            {controlStatus === EControlStatus.VALID ? (\n              <Widget\n                src=\"bos.genadrop.near/widget/Mintbase.MbIcon\"\n                props={{\n                  name: \"success\",\n                  size: \"20px\",\n                  color: \"success-300\",\n                  darkColor: \"success-100\",\n                }}\n              />\n            ) : controlStatus === EControlStatus.INVALID ? (\n              <Widget\n                src=\"bos.genadrop.near/widget/Mintbase.MbIcon\"\n                props={{\n                  name: \"error\",\n                  size: \"20px\",\n                  color: \"error-300\",\n                  darkColor: \"error-100\",\n                }}\n              />\n            ) : (\n              <Widget\n                src=\"bos.genadrop.near/widget/Mintbase.MbIcon\"\n                props={{\n                  name: \"info\",\n                  size: \"20px\",\n                  color: \"blue-300\",\n                  darkColor: \"blue-100\",\n                }}\n              />\n            )}\n          </div>\n        )}\n        {!!customIcon && !hasIcon && customIcon}\n      </div>\n      {maxChars ? (\n        <MbCharCounter\n          counter={count}\n          inputSize={inputSize}\n          maxChars={maxChars}\n        />\n      ) : (\n        <></>\n      )}\n    </Container>\n  );\n};\nreturn {\n  MbInputField,\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.MbInput", "fact_widget_deployments_id": "4e1c208a84b85dfa83452d67cfb6cc20", "inserted_timestamp": "2024-05-09T11:43:16.695Z", "modified_timestamp": "2024-05-09T11:43:16.695Z", "__row_index": 0}