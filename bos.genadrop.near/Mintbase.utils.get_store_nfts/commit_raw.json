{"tx_hash": "J5bBs6HWX2qEvR27mJqqtkgbicZU8nKT1iDMuUoM82Jz", "action_id_social": "93eBjvZjA4jfBa8QCX5URdYwK5eCUTruPyBekFJpz2fk-0-widget", "block_id": 117673696, "block_timestamp": "2024-04-26T15:34:31.747Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.utils.get_store_nfts", "source_code": "function fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(\n    `https://graph.mintbase.xyz/${\n      variables.id && variables.id.endsWith(\".testnet\") ? \"testnet\" : \"mainnet\"\n    }`,\n    {\n      method: \"POST\",\n      headers: {\n        \"mb-api-key\": \"anon\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName,\n      }),\n    }\n  ).then((result) => result.body);\n}\nconst operationsDoc = `\n    query GetStoreNFTs($offset: Int = 0, $id: [String!], $limit: Int) @cached {\n      count: mb_views_nft_metadata_unburned_aggregate(\n        where: {nft_contract_id: {_in: $id}}\n      ) {\n        aggregate {\n          count\n        }\n      }\n      tokens: mb_views_nft_metadata_unburned(\n        offset: $offset\n        limit: $limit\n        order_by: {minted_timestamp: desc}\n        where: {nft_contract_id: {_in: $id}}\n      ) {\n        createdAt: minted_timestamp\n        price\n        media\n        nft_contract_id\n        metadata_id\n        title\n        base_uri\n      }\n    }\n  `;\nfunction getStoreNFTs({ offset, id, limit }) {\n  return fetchGraphQL(operationsDoc, \"GetStoreNFTs\", {\n    id: id,\n    offset: offset || 0,\n    limit: limit || 20,\n  });\n}\nreturn { getStoreNFTs };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.utils.get_store_nfts", "fact_widget_deployments_id": "3b36ebf6c97edf30928657ca86fc9de4", "inserted_timestamp": "2024-04-26T16:43:06.224Z", "modified_timestamp": "2024-04-26T16:43:06.224Z", "__row_index": 0}