{"tx_hash": "4noDoxcrxdVLqZ9SH9x7VqhLAYrzAsBwnu4SU72fK22S", "action_id_social": "9Ra8K5S1D8A9k4vP5zsrk5JoZh7HWiHGFBgPTBwgKkYH-0-widget", "block_id": 119339143, "block_timestamp": "2024-05-20T10:50:21.709Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.NFT.Burn", "source_code": "const { burnNFT, multiplyNFT } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.NFT.modules\"\n);\nconst Root = styled.div`\n  .home-dark {\n    width: 600px;\n    height: 542px;\n    background: #1f2031;\n    padding-top: 15px;\n  }\n  .home-light {\n    width: 600px;\n    height: 542px;\n    background: #fff;\n    padding-top: 15px;\n  }\n  @media (max-width: 500px) {\n    width: 84% !important;\n    .home-dark,\n    .home-light {\n      width: 95%;\n    }\n  }\n`;\nconst Top = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 30px;\n  height: 60px;\n  border-bottom: 1px solid\n    ${(props) => (props.isDarkModeOn ? \"#3e4352\" : \"#e7ebee\")};\n  p {\n    font-weight: bold;\n    color: ${(props) => (props.isDarkModeOn ? \"#fff\" : \"#000\")};\n  }\n  p:last-child {\n    cursor: pointer;\n  }\n`;\nconst BurnField = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\n.h-light {\n  color: #000;\n  font-weight: bold;\n  font-size: 14px;\n}\n.d-light {\n  color: #fff;\n  font-weight: bold;\n  font-size: 14px;\n}\nmargin-top: 100px;\n.burn-light {\n  color: #000;\n  background-color: #f2f5f8;\n  button {\n    background-color: #000;\n    color: #fff;\n  }\n  input {\n    color: #000;\n  }\n  \n}\n.burn-dark {\n  color: #fff;\n  background: #101223;\n  button {\n    background-color: #fff;\n    color: #000;\n  }\n  input {\n    color: #fff;\n  }\n}\n  .burn-dark, .burn-light {  \n    padding: 5px 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 40%;\n    border-radius: 8px;\n    margin-left: auto;\n    margin-right: auto;\n    input[type=number]::-webkit-inner-spin-button,\n    input[type=number]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input:focus {\n      outline: none !important;\n      border: none !important;\n      box-shadow: none !important;\n    }\n    input {\n      width: 40%;\n      background: transparent;\n      border: transparent;\n    }\n    p {\n      margin: 0;\n      padding: 2px 10px;\n    }\n    button {\n      padding: 3px 9px;\n      border: none;\n    \n      border-radius: 4px;\n      &:disabled {\n        cursor: not-allowed;\n        background-color: #767986;\n        color: #fff;\n      }\n    }\n   \n`;\nconst BottomButton = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  padding: 0 30px;\n  margin-top: 150px;\n  button {\n    border: #000;\n    color: black;\n    border-radius: 6px;\n    background: #ec5b5a;\n    transition: 0.3s ease-in-out;\n    &:hover {\n      background: #ec5b5a;\n      opacity: 0.2;\n    }\n  }\n`;\nconst Token = styled.div`\n  background: ${(props) => (props.isDarkModeOn ? \"#262a3b\" : \"#f8f8f8\")};\n  display: flex;\n  align-items: center;\n  padding-top: 10px;\n  justify-content: center;\n  p {\n    color: ${(props) => (props.isDarkModeOn ? \"#fff\" : \"#000\")};\n  }\n`;\nconst BurnMultiply = ({ isDarkModeOn, data, onClose, type }) => {\n  const [tokens, setTokens] = useState([]);\n  const [amount, setAmount] = useState(1);\n  const isBurn = type === \"BURN\";\n  function fetchNFTDetails() {\n    asyncFetch(\"https://graph.mintbase.xyz\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"mb-api-key\": \"omni-site\",\n        \"x-hasura-role\": \"anonymous\",\n      },\n      body: JSON.stringify({\n        query: `  \n        query v2_omnisite_GetTokenByThingID($thingId: String!, $limit: Int, $offset: Int, $search_fields: [mb_views_nft_tokens_bool_exp!]) {\n          token: mb_views_nft_tokens(\n            where: {metadata_id: {_eq: $thingId}, burned_timestamp: {_is_null: true}, _or: $search_fields}\n            limit: $limit\n            offset: $offset\n          ) {\n            id: token_id\n            ownerId: owner\n          }\n    \n        }\n        `,\n        variables: {\n          limit: 50,\n          offset: 0,\n          thingId: data?.metadata_id,\n          search_fields: {\n            owner: {\n              _eq: data?.owner,\n            },\n          },\n        },\n      }),\n    }).then((data) => {\n      if (data?.body?.data) {\n        setTokens(data?.body?.data?.token?.map((data) => data?.id));\n      }\n    });\n  }\n  useEffect(() => {\n    fetchNFTDetails();\n  }, []);\n  const handleFinish = () => {\n    if (amount < 1 || tokens.length < 1) return;\n    if (isBurn) {\n      const tokensToBurn = tokens.slice(0, amount);\n      burnNFT(data?.nft_contract_id, tokensToBurn);\n    } else if (type === \"MULTIPLY\") {\n      console.log(\"multing\");\n      multiplyNFT(\n        data?.nft_contract_id,\n        data?.owner,\n        data?.reference,\n        data?.media,\n        amount\n      );\n    }\n  };\n  return (\n    <Root>\n      <div className={isDarkModeOn ? \"home-dark\" : \"home-light\"}>\n        <Top isDarkModeOn={isDarkModeOn}>\n          <p>{isBurn ? \"Burn\" : \"Multiply\"}</p>\n          <p onClick={onClose}>X</p>\n        </Top>\n        <Token isDarkModeOn={isDarkModeOn}>\n          <p>Token {tokens?.length}</p>\n        </Token>\n        <BurnField>\n          <p className={isDarkModeOn ? \"d-light\" : \"h-light\"}>\n            {isBurn ? \"Burn Amount\" : \"Mint more amount\"}\n          </p>\n          <div className={isDarkModeOn ? \"burn-dark\" : \"burn-light\"}>\n            <input\n              type=\"number\"\n              max={isBurn ? tokens?.length : 20}\n              inputmode=\"numeric\"\n              pattern=\"[0-9]*\"\n              value={amount}\n              onChange={(e) =>\n                setAmount(\n                  Math.min(e.target.value, isBurn ? tokens?.length : 20)\n                )\n              }\n            />\n            <div className=\"buttons\">\n              <button\n                onClick={() => setAmount((prev) => Number(prev) - 1)}\n                className=\"minus\"\n                disabled={amount === 1}\n              >\n                -\n              </button>\n              <button\n                disabled={isBurn ? tokens?.length === amount : amount === 20}\n                onClick={() => setAmount((prev) => Number(prev) + 1)}\n                className=\"plus\"\n              >\n                +\n              </button>\n            </div>\n          </div>\n        </BurnField>\n        <BottomButton isDarkModeOn={isDarkModeOn}>\n          <button onClick={handleFinish}>Continue</button>\n        </BottomButton>\n      </div>\n    </Root>\n  );\n};\nreturn <BurnMultiply {...props} />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.NFT.Burn", "fact_widget_deployments_id": "fc8d7c2e126c6fd10adb0e94fd001f9b", "inserted_timestamp": "2024-05-20T12:58:45.841Z", "modified_timestamp": "2024-05-20T12:58:45.841Z", "__row_index": 1}