{"tx_hash": "ANAE6tt34MGwHey9fq6c49Cn12ud4Wgk4frsvobWZQiw", "action_id_social": "311c1kyj8rRGWskn6DdSSFx39CwaXBFkzGA7j181kJJQ-0-widget", "block_id": 117436302, "block_timestamp": "2024-04-23T07:26:49.644Z", "signer_id": "bos.genadrop.near", "widget_name": "Mintbase.App.Profile.Index", "source_code": "const accountId = props.accountId ?? context.accountId;\n\nconst isConnected = context.accountId === accountId;\nconst { MbModal, LinkTree } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.components\"\n) || {\n  MbModal: () => <></>,\n  LinkTree: () => <></>,\n};\nconst { MbInputField } = VM.require(\n  \"bos.genadrop.near/widget/Mintbase.MbInput\"\n) || {\n  MbInputField: () => <></>,\n};\n\nconst actualTabs = {\n  tabLabels: [\n    { id: 0, title: \"Owned\" },\n    { id: 1, title: \"Minted\" },\n    { id: 2, title: \"_About\", hidden: !isConnected },\n    { id: 3, title: \"Activity\" },\n    { id: 4, title: \"Contracts\" },\n    { id: 5, title: \"_User Settings\", hidden: !isConnected },\n  ],\n};\n\nconst hiddenTabs = actualTabs.tabLabels\n  .filter((tab) => !tab.hidden)\n  .map((tab) => tab.title);\nconst tabProps = { tabLabels: hiddenTabs };\n\nconsole.log(\"tabProps\", tabProps);\n\nconst [selectedTab, setSelectedTab] = useState(props.tab ?? \"owned\");\nconst [open, setOpen] = useState(false);\nconst [sdk, setSDK] = useState(false);\nconst [storeName, setStoreName] = useState(\"\");\nconst [storeSymbol, setStoreSymbol] = useState(\"\");\nconst [showOwnedFilters, setShowOwnedFilters] = useState(true);\nconst [profile, setProfile] = useState(null);\nconst isDarkModeOn = props.isDarkModeOn ?? false;\n\nconst handleTabClick = (index) => {\n  setSelectedTab(index);\n  // console.log(\"selectedTab from Mine: \", selectedTab);\n};\n\nconst onStoreNameChange = useCallback((e) => {\n  console.log(\"onStoreNameChange\", e.target.value);\n  setStoreName(e.target.value);\n}, []);\n\nconst handleDeploy = () => {\n  console.log(\"handleDeploy\", storeName, storeSymbol);\n  // console.log(\"sdk\", sdk);\n  sdk.deployStore(storeName, storeSymbol);\n};\n\n// console.log(\"tabProps\", tabProps);\n\nconst Card = styled.div`\n  width: 100%;\n  border-radius: 0;\n  background-color: #f9fafb;\n  color: black;\n  \n  &.dark {\n    color: white;\n  }\n  .content_main {\n    padding: 24px 48px;\n  }\n  *{\n    margin: 0;\n  padding: 0;\n  }\n`;\n\nconst CreateStore = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  .form {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n  .bottom-buttons {\n    display: flex;\n    position: absolute;\n    bottom: 48px;\n    right: 24px;\n    width: calc(100% - 48px);\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst ImageSection = styled.div`\n  height: 254px;\n  background: #eceef0;\n  position: relative;\n  width: 100%;\n  img {\n    width: 126px;\n    height: 126px;\n    border-radius: 50%;\n    position: absolute;\n    bottom: -24px;\n    border: 4px solid ${isDarkModeOn ? \"#1e2030\" : \"#fff\"};\n    left: 48px;\n    background: #aa4747;\n    z-index: 1;\n    margin: 0 auto;\n    @media (max-width: 768px) {\n      width: 80px;\n      height: 80px;\n      bottom: -20px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n  }\n\n  @media (max-width: 1024px) {\n    margin-top: calc(var(--body-top-padding) * -1) -12px 0;\n  }\n  @media (max-width: 768px) {\n    height: 125px;\n  }\n`;\n\nconst TopContent = styled.div`\n  margin-top: 40px;\n  margin-bottom: 40px;\n  h1 {\n    font-size: 20px;\n  }\n  .contents {\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    .content {\n      margin: 0;\n      display: flex;\n      gap: 20px;\n      p {\n        margin: 0;\n      }\n    }\n  }\n`;\n\nconst Details = styled.div`\n  display: flex;\n  gap: 30px;\n  margin-top: 20px;\n  flex-wrap: wrap;\n  .detail {\n    display: flex;\n    flex-direction: column;\n    width: 112px;\n    height: 56px;\n    align-items: flex-start;\n    border-radius: 4px;\n    padding: 10px;\n    background: ${isDarkModeOn ? \"#282A3A\" : \"#f9f9f9\"};\n    span {\n      font-size: 12px;\n      font-weight: 500;\n      color: ${isDarkModeOn ? \"#B3B5BD\" : \"#404252\"};\n    }\n    p {\n      font-size: 14px;\n      font-weight: 500;\n    }\n  }\n`;\n\nconst Profiles = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n  .bos_share {\n    display: flex;\n    gap: 10px;\n    .profile {\n      display: flex;\n      text-decoration: none;\n      color: black;\n      align-items: center;\n      width: max-content;\n      cursor: pointer;\n      font-size: 12px;\n      padding: 4px 6px;\n      border-radius: 4px;\n      border: 1px solid #b0b0b0;\n      i {\n        color: ${isDarkModeOn ? \"#fff\" : \"#000\"} !important;\n      }\n      span {\n        color: ${isDarkModeOn ? \"#fff\" : \"#000\"};\n      }\n    }\n  }\n  @media (max-width: 768px) {\n    flex-wrap: wrap;\n    flex-direction: column-reverse;\n  }\n`;\n\nconst queryInOwnedToggleHandler = () => {\n  setShowOwnedFilters((prev) => !prev);\n};\n\nconst AboutOwner = styled.div`\n  background: ${isDarkModeOn ? \"#1E2030\" : \"#FFF\"};\n  overflow: hidden;\n  .owner-details-main {\n    margin-left: 48px;\n    margin-bottom: 24px;\n  }\n`;\nconst createStoreHandler = () => {\n  // console.log(\"createStoreHandler\");\n  setOpen(true);\n};\n\nuseEffect(() => {\n  asyncFetch(`https://api.mintbase.xyz/accounts/${accountId}`, {\n    method: \"GET\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n  }).then((data) => {\n    if (data.body) {\n      const parseData = data.body;\n      setProfile(parseData);\n    }\n  });\n}, []);\n\nuseEffect(() => {\n  asyncFetch(\n    `https://www.mintbase.xyz/_next/data/4MrYzAhE2iuTzTuGt7Lsw/human/${accountId}/owned/0.json`,\n    {\n      mode: \"no-cors\",\n      // method: \"GET\",\n      // referrerPolicy: \"no-referrer\",\n      // headers: {\n      //   \"Content-Type\": \"application/json\",\n      //   \"Allow-Control-Allow-Origin\": \"http://127.0.0.1:8080\",\n      // },\n    }\n  )\n    .then((response) => response.body)\n    .then((data) => {\n      if (data) {\n        console.log({ \"user data\": data });\n        // setProfile(parseData);\n      }\n    });\n}, []);\n\nconst [data, setData] = useState(null);\n\nconst fetchMyStores = (id) => {\n  const data = asyncFetch(\"https://graph.mintbase.xyz\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"anon\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `query GET_USER_META @cached {\n        tokensCountPerHuman: mb_views_nft_tokens_aggregate(where: {owner: {_eq: $ownerId}}) {\n          aggregate {\n            count\n          }\n        }\n        transactionsCountPerHuman: nft_activities_aggregate(where: {action_sender: {_eq: \"nate.near\"}}) {\n          aggregate {\n            count\n          }\n        }\n        salesInNearPerHuman: nft_earnings_aggregate(\n          where: {receiver_id: {_eq: \"nate.near\"}, currency: {_eq: \"near\"}}\n        ) {\n          aggregate {\n            sum {\n              amount\n            }\n          }\n        }\n      }\n  `,\n    }),\n  });\n  return data;\n};\n\nuseEffect(() => {\n  fetchMyStores(props.accountId || \"nate.near\").then((data) => {\n    setData(data);\n  });\n}, []);\nconst stores = data?.body?.data?.stores;\n\nconst details = [\n  { name: \"Tokens\", value: \"1075\" },\n  { name: \"Listed Tokens\", value: \"109\" },\n  { name: \"Bought\", value: \"161.18N\" },\n  { name: \"Sales\", value: \"189.41N\" },\n  { name: \"Transactions\", value: \"1776\" },\n  { name: \"Last Activity\", value: \"3 hours ago\" },\n];\n\nconsole.log(\"profile\", profile);\n\nconst PageContent = () => {\n  switch (selectedTab) {\n    case \"owned\":\n      return (\n        <Widget\n          src={`bos.genadrop.near/widget/Mintbase.App.Tokens.Owned`}\n          props={{\n            isDarkModeOn,\n            ownerId: accountId,\n            isConnected,\n            showFilters: showOwnedFilters,\n            onCreateStore,\n          }}\n        />\n      );\n    case \"minted\":\n      return (\n        <Widget\n          src={`bos.genadrop.near/widget/Mintbase.App.Tokens.Minted`}\n          props={{\n            isDarkModeOn,\n            minterId: accountId,\n            isConnected,\n            showFilters: showOwnedFilters,\n            onCreateStore,\n          }}\n        />\n      );\n    case \"about\":\n      return (\n        <div>\n          <h2>About User</h2> <p>Nothing to show yet</p>\n        </div>\n      );\n    case \"activity\":\n      return (\n        <Widget\n          src={`bos.genadrop.near/widget/Mintbase.App.Profile.Activity`}\n          props={{ isDarkModeOn, accountId }}\n        />\n      );\n    case \"contracts\":\n      return (\n        <>\n          <Widget\n            src={`bos.genadrop.near/widget/Mintbase.App.Store.Cards`}\n            props={{\n              isDarkModeOn,\n              accountId,\n            }}\n          />\n        </>\n      );\n    case \"user-settings\":\n      return (\n        <div>\n          <h2>User Settings</h2>\n          <div className=\"user-settings\">\n            <div className=\"user-settings__item\">\n              <h3>Profile</h3>\n              <Widget\n                src={`bos.genadrop.near/widget/Mintbase.App.Profile`}\n                props={{\n                  accountId,\n                  isDarkModeOn,\n                }}\n              />\n            </div>\n            <div className=\"user-settings__item\">\n              <h3>Notifications</h3>\n              <Widget\n                src={`bos.genadrop.near/widget/Mintbase.App.Notifications`}\n                props={{\n                  accountId,\n                  isDarkModeOn,\n                }}\n              />\n            </div>\n            <div className=\"user-settings__item\">\n              <h3>Security</h3>\n              <Widget\n                src={`bos.genadrop.near/widget/Mintbase.App.Security`}\n                props={{\n                  accountId,\n                  isDarkModeOn,\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    default:\n      return null;\n  }\n};\n\nconst [count, setCount] = useState(0);\n\nconst verifiedBatch = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    enable-background=\"new 0 0 24 24\"\n    height=\"18px\"\n    viewBox=\"0 0 24 24\"\n    width=\"18px\"\n    fill={isDarkModeOn ? \"#fff\" : \"#000000\"}\n    class=\"fill-current text-blue-300 dark:text-blue-100\"\n  >\n    <g>\n      <rect fill=\"none\" height=\"24\" width=\"24\"></rect>\n    </g>\n    <g>\n      <path d=\"M23,12l-2.44-2.79l0.34-3.69l-3.61-0.82L15.4,1.5L12,2.96L8.6,1.5L6.71,4.69L3.1,5.5L3.44,9.2L1,12l2.44,2.79l-0.34,3.7 l3.61,0.82L8.6,22.5l3.4-1.47l3.4,1.46l1.89-3.19l3.61-0.82l-0.34-3.69L23,12z M10.09,16.72l-3.8-3.81l1.48-1.48l2.32,2.33 l5.85-5.87l1.48,1.48L10.09,16.72z\"></path>\n    </g>\n  </svg>\n);\n\nconst nearLogo =\n  \"https://ipfs.near.social/ipfs/bafkreib2cfbayerbbnoya6z4qcywnizqrbkzt5lbqe32whm2lubw3sywr4\";\n\nconst background = profile.backgroundImage\n  ? profile.headerImage ??\n    `https://ipfs.near.social/ipfs/${profile.backgroundImage.ipfs_cid}`\n  : \"https://ipfs.near.social/ipfs/bafkreiajgp5bmkidwesy2d6tsbdkhyfzjtom2wse2sjcwii227lt5audvq\";\n\nreturn (\n  <Card className={isDarkModeOn ? \"dark\" : \"\"}>\n    <Widget\n      src=\"bos.genadrop.near/widget/Mintbase.SDK\"\n      props={{\n        mainnet: false,\n        contractName: \"mintspace2.testnet\",\n        loaded: sdk,\n        onLoad: (sdk) => setSDK(sdk),\n        onRefresh: (sdk) => setSDK(sdk),\n      }}\n    />\n    <AboutOwner>\n      <ImageSection\n        style={{\n          backgroundImage: `url(${background})`,\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        <img\n          loading=\"lazy\"\n          decoding=\"async\"\n          data-nimg=\"fill\"\n          src={\n            profile.image\n              ? profile.profileImage ??\n                `https://ipfs.near.social/ipfs/${profile.image.ipfs_cid}`\n              : \"https://ipfs.near.social/ipfs/bafkreiajgp5bmkidwesy2d6tsbdkhyfzjtom2wse2sjcwii227lt5audvq\"\n          }\n          alt={`${profile.displayName || profile.name} profile image`}\n        />\n      </ImageSection>\n      <div className=\"owner-details-main\">\n        <TopContent>\n          <h1>\n            {profile.displayName || profile.name} {verifiedBatch}\n          </h1>\n          <div className=\"contents\">\n            <div className=\"content\">\n              <p>Address</p>\n              <Widget\n                src={`bos.genadrop.near/widget/Mintbase.MbActionText`}\n                props={{\n                  text: accountId,\n                  size: \"medium\",\n                  copyText: accountId,\n                  link: `https://nearblocks.io/address/${accountId}`,\n                  iconTab: false,\n                  showCopyIcon: true,\n                  isDarkModeOn: isDarkModeOn,\n                }}\n              />\n            </div>\n          </div>\n        </TopContent>\n        <Details>\n          {details.map((data, key) => (\n            <div className=\"detail\" key={key}>\n              <span>{data.name}</span>\n              <p>{data.value}</p>\n            </div>\n          ))}\n        </Details>\n        <Profiles>\n          <LinkTree links={profile.linktree} isDarkModeOn={isDarkModeOn} />\n          <div className=\"bos_share\">\n            <a\n              href={`https://${accountId}.social`}\n              target=\"_blank\"\n              className=\"profile\"\n            >\n              <Widget\n                src=\"bos.genadrop.near/widget/Mintbase.MbIcon\"\n                props={{\n                  name: \"near\",\n                  color: isDarkModeOn ? \"mb-white\" : \"mb-black\",\n                  size: \"16px\",\n                }}\n              />\n              <span>BOS</span>\n            </a>\n            <div key={index} className=\"profile\">\n              <i className=\"bi bi-box-arrow-up\"></i>\n              <span>Share</span>\n            </div>\n          </div>\n        </Profiles>\n      </div>\n    </AboutOwner>\n    <Widget\n      src={`bos.genadrop.near/widget/Mintbase.MbTabs`}\n      props={{\n        ...tabProps,\n        activeTab: selectedTab,\n        onTabChange: handleTabClick,\n        isDarkModeOn,\n        hasQueryToggle: selectedTab === \"owned\" || selectedTab === \"minted\",\n        onQueryToggle: queryInOwnedToggleHandler,\n      }}\n    />\n    <div\n      className=\"d-flex flex-column align-items-center content_main\"\n      style={{\n        backgroundColor: `${isDarkModeOn ? \"#101223\" : \"#F9F9F9\"}`,\n      }}\n    >\n      <PageContent />\n    </div>\n\n    <MbModal\n      open={modalIsOpen}\n      setOpen={setModalIsOpen}\n      topElement={\n        <h4 style={{ marginRight: \"8px\" }}>Let's Create Your Store</h4>\n      }\n      isDarkModeOn={isDarkModeOn}\n      onClose={null}\n      topElementFirst={true}\n    >\n      <Widget\n        src={`bos.genadrop.near/widget/Mintbase.App.Store.CreateForm`}\n        props={{\n          isDarkModeOn,\n          onCancel: () => setModalIsOpen(false),\n          setModalOpen: setModalIsOpen,\n        }}\n      />\n    </MbModal>\n  </Card>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.genadrop.near/widget/Mintbase.App.Profile.Index", "fact_widget_deployments_id": "2f1c0fd80e6bb8c1cc10beaffd1c0884", "inserted_timestamp": "2024-04-23T09:44:05.024Z", "modified_timestamp": "2024-04-23T09:44:05.024Z", "__row_index": 4}