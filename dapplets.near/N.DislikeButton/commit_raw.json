{"tx_hash": "F77cRuZkJtkWKEYtBqrCiFgT4py5kbsjhmL6VPYFdWB4", "action_id_social": "AoriSTDGWVJmttX4eFDyfcP1McCm3NeqXqPKtYQGQShA-0-widget", "block_id": 104757591, "block_timestamp": "2023-11-02T10:51:46.618Z", "signer_id": "dapplets.near", "widget_name": "N.DislikeButton", "source_code": "const item = props.item;\n\nif (!item) {\n  return \"\";\n}\n\nuseEffect(() => {\n  State.update({ hasLike: null });\n}, [item]);\n\nconst likes = Social.index(\"like\", item);\n\nconst dataLoading = likes === null;\n\nconst likesByUsers = {};\n\n(likes || []).forEach((like) => {\n  if (like.value.type === \"like\") {\n    likesByUsers[like.accountId] = like;\n  } else if (like.value.type === \"unlike\") {\n    delete likesByUsers[like.accountId];\n  }\n});\nif (state.hasLike === true) {\n  likesByUsers[context.accountId] = {\n    accountId: context.accountId,\n  };\n} else if (state.hasLike === false) {\n  delete likesByUsers[context.accountId];\n}\n\nconst accountsWithLikes = Object.keys(likesByUsers);\nconst likeCount = accountsWithLikes.length;\nconst hasLike = context.accountId && !!likesByUsers[context.accountId];\n\nconst heartSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"icon icon-tabler icon-tabler-thumb-down\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    stroke-width=\"2\"\n    stroke=\"currentColor\"\n    fill=\"none\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  >\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n    <path d=\"M7 13v-8a1 1 0 0 0 -1 -1h-2a1 1 0 0 0 -1 1v7a1 1 0 0 0 1 1h3a4 4 0 0 1 4 4v1a2 2 0 0 0 4 0v-5h3a2 2 0 0 0 2 -2l-1 -5a2 3 0 0 0 -2 -2h-7a3 3 0 0 0 -3 3\"></path>\n  </svg>\n);\n\nconst heartFillSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"icon icon-tabler icon-tabler-thumb-down-filled\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    stroke-width=\"2\"\n    stroke=\"currentColor\"\n    fill=\"none\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n  >\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n    <path\n      d=\"M13 21.008a3 3 0 0 0 2.995 -2.823l.005 -.177v-4h2a3 3 0 0 0 2.98 -2.65l.015 -.173l.005 -.177l-.02 -.196l-1.006 -5.032c-.381 -1.625 -1.502 -2.796 -2.81 -2.78l-.164 .008h-8a1 1 0 0 0 -.993 .884l-.007 .116l.001 9.536a1 1 0 0 0 .5 .866a2.998 2.998 0 0 1 1.492 2.396l.007 .202v1a3 3 0 0 0 3 3z\"\n      stroke-width=\"0\"\n      fill=\"currentColor\"\n    ></path>\n    <path\n      d=\"M5 14.008a1 1 0 0 0 .993 -.883l.007 -.117v-9a1 1 0 0 0 -.883 -.993l-.117 -.007h-1a2 2 0 0 0 -1.995 1.852l-.005 .15v7a2 2 0 0 0 1.85 1.994l.15 .005h1z\"\n      stroke-width=\"0\"\n      fill=\"currentColor\"\n    ></path>\n  </svg>\n);\n\nconst LikeButton = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  background: inherit;\n  color: inherit;\n  font-size: 16px;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n\n  .count {\n    margin-left: 8px;\n  }\n\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: red;\n\n    .icon:before {\n      background: rgba(255, 0, 0, 0.1);\n    }\n  }\n  .liked {\n    color: red;\n  }\n\n  .loading {\n    @keyframes scaleAnimation {\n     0%, 100% {\n        transform: scale(1) rotate(0deg);\n      }\n      25% {\n        transform: scale(1.2) rotate(-15deg);\n      }\n      50% {\n        transform: scale(1) rotate(0deg);\n      }\n      75% {\n        transform: scale(1.2) rotate(15deg);\n      }\n    }\n\n    transform-origin: center;\n    animation: scaleAnimation 1s ease-in-out infinite;\n  }\n`;\n\nconst likeClick = () => {\n  if (state.loading || dataLoading || !context.accountId) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const data = {\n    index: {\n      like: JSON.stringify({\n        key: item,\n        value: {\n          type: hasLike ? \"unlike\" : \"like\",\n        },\n      }),\n    },\n  };\n\n  if (!hasLike && props.notifyAccountId) {\n    data.index.notify = JSON.stringify({\n      key: props.notifyAccountId,\n      value: {\n        type: \"like\",\n        item,\n      },\n    });\n  }\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false, hasLike: !hasLike }),\n    onCancel: () => State.update({ loading: false }),\n  });\n};\n\nconst title = hasLike ? \"Unlike\" : \"Like\";\n\nreturn (\n  <div className=\"d-inline-flex align-items-center\">\n    <LikeButton\n      disabled={state.loading || dataLoading || !context.accountId}\n      title={title}\n      onClick={likeClick}\n    >\n      <span\n        className={`icon ${state.loading ? \"loading \" : \"\"}${\n          hasLike ? \"liked\" : \"\"\n        }`}\n      >\n        {hasLike ? heartFillSvg : heartSvg}\n      </span>\n      <span className={`count ${hasLike ? \"liked\" : \"\"}`}>\n        <Widget\n          loading={likeCount || \"\"}\n          src=\"mob.near/widget/N.Overlay.Faces\"\n          props={{ accounts: likesByUsers, limit: 10 }}\n        />\n      </span>\n    </LikeButton>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/dapplets.near/widget/N.DislikeButton", "fact_widget_deployments_id": "8f9fc639f3eb220ed0301f4f8f1ce3d2", "inserted_timestamp": "2023-11-02T12:44:58.516Z", "modified_timestamp": "2023-11-02T12:44:58.516Z", "__row_index": 0}