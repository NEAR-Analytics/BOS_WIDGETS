{"tx_hash": "HVMqxz5ah48svMUt7FcrhXtNJE33s7na3w4yU8cPupHy", "action_id_social": "HuK9Nw1mgxtyps6mbR2HrJmRRosixG6XpuXNbUffNqgM-0-widget", "block_id": 106763847, "block_timestamp": "2023-11-28T22:19:12.190Z", "signer_id": "vincedev.near", "widget_name": "post", "source_code": "const { Feed } = VM.require(\"devs.near/widget/Module.Feed\");\nconst { ContextMenu } = VM.require(\"efiz.near/widget/Module.ContextMenu\");\n\nContextMenu = ContextMenu || (() => <></>); // make sure you have this or else it can break\nFeed = Feed || (() => <></>);\nconst MainWrapper = styled.div`\ndisplay: flex;\njustify-content: space-between;\n`;\nconst childDiv1 = styled.div`\nwidth:70%;\n`;\nconst childDiv2 = styled.div`\nwidth:28%;\n`;\n\nconst [parentArray, setParentAray] = useState([]);\nconst [hashList, setHashList] = useState([]);\n\nconst pushToArray = (array) => {\n  setParentAray((prevArray) => [...prevArray, ...array]);\n};\n\nconst extractHashtags = (text) => {\n  const hashtagRegex = /#(\\w+)/gi;\n  hashtagRegex.lastIndex = 0;\n  if (text === undefined) return [];\n  if (text) {\n    const hashtags = new Set();\n    for (const match of text?.matchAll(hashtagRegex)) {\n      if (\n        !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n        !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n      ) {\n        hashtags.add(match[1].toLowerCase());\n      }\n    }\n\n    return [...hashtags];\n  }\n};\n\n// function getHashList() {\n//   // if (parentArray.length >= 10) {\n//   for (let i = 0; i < parentArray.length; i++) {\n//     const txt = parentArray[i].text;\n//     let res = extractHashtags(txt);\n//     setHashList((prevHashList)=>[...prevHashList, ...res]);\n//   }\n//   // } else {\n//   //   console.log(\"0\");\n//   // }\n// }\nfunction getHashList() {\n  const hashtagCounts = {};\n\n  for (let i = 0; i < parentArray.length; i++) {\n    const txt = parentArray[i].text;\n    const hashtags = extractHashtags(txt);\n\n    hashtags.forEach((tag) => {\n      hashtagCounts[tag] = (hashtagCounts[tag] || 0) + 1;\n    });\n  }\n\n  setHashList(Object.entries(hashtagCounts));\n}\n\nuseEffect(() => {\n  getHashList();\n}, [parentArray]);\n\nconsole.log(\"second\", hashList);\n\nreturn (\n  <div\n    className=\"d-flex flex-column gap-1\"\n    style={{\n      background: \"#fefefe\",\n      padding: \"23px\",\n    }}\n  >\n    <Widget src=\"vincedev.near/widget/PostxNavbar\" />\n    <MainWrapper>\n      <childDiv1>\n        <Feed\n          index={[\n            {\n              action: \"post\",\n              key: \"main\",\n              options: {\n                limit: 10,\n                order: \"desc\",\n                accountId: props.accounts,\n              },\n              cacheOptions: {\n                ignoreCache: true,\n              },\n            },\n            {\n              action: \"repost\",\n              key: \"main\",\n              options: {\n                limit: 10,\n                order: \"desc\",\n                accountId: props.accounts,\n              },\n              cacheOptions: {\n                ignoreCache: true,\n              },\n            },\n          ]}\n          Item={(p) => {\n            const item = {\n              path: `${p.accountId}/post/main`,\n              blockHeight: p.blockHeight,\n              type: \"social\",\n            };\n\n            // console.log(p);\n            // <Widget\n            //   loading={\n            //     <div className=\"w-100\" style={{ height: \"200px\" }} />\n            //   }\n            //   src=\"vincedev.near/widget/singlePost\"\n            //   props={{\n            //     accountId: p.accountId,\n            //     blockHeight: p.blockHeight,\n            //   }}\n            // />\n            return (\n              <ContextMenu\n                Item={() => (\n                  <>\n                    <Widget\n                      src=\"blessed07.near/widget/post-content\"\n                      props={{\n                        accountId: p.accountId,\n                        blockHeight: p.blockHeight,\n                        pushToArray: pushToArray,\n                      }}\n                    />\n                  </>\n                )}\n                passProps={{\n                  // PROPS THAT WILL BE PASSED TO FUNCTION\n                  show: {\n                    item,\n                  },\n                }}\n                handlers={{\n                  // FUNCTION DEFINITIONS\n                  show: ({ item }) => {\n                    const data = {\n                      index: {},\n                    };\n                    const notifications = [\"james.near\"].map((accountId) => ({\n                      key: accountId,\n                      value: {\n                        type: \"mention\",\n                        item,\n                      },\n                    }));\n\n                    if (notifications.length) {\n                      Social.set({\n                        notify: JSON.stringify(\n                          notifications.length > 1\n                            ? notifications\n                            : notifications[0]\n                        ),\n                      });\n                    }\n                  },\n                }}\n                items={{\n                  // MENU ITEM TO RENDER, WILL CALL FUNCTION WHEN CLICKED\n                  show: () => (\n                    <>\n                      <i className=\"menu__item__icon bi bi-arrow-return-right\" />\n                      Forward\n                    </>\n                  ),\n                }}\n              />\n            );\n          }}\n        />\n      </childDiv1>\n      <childDiv2>\n        <Widget\n          src=\"vincedev.near/widget/PostXTrendingPost\"\n          props={{\n            hashList: hashList,\n          }}\n        />\n      </childDiv2>\n    </MainWrapper>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/vincedev.near/widget/post", "fact_widget_deployments_id": "3f94dcb0047d158443d53b12b910f456", "inserted_timestamp": "2023-11-29T00:25:47.513Z", "modified_timestamp": "2023-11-29T00:25:47.513Z", "__row_index": 13}