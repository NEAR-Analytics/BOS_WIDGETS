{"tx_hash": "HSaH9GK2WFZcBmhCcDnrJDqX94KrQkHSEuUPxj2e2cQp", "action_id_social": "77GRGQtxtpCgjUT6nK9uUTSunRZqpadHri6scsAekCXc-0-widget", "block_id": 102476781, "block_timestamp": "2023-10-02T21:47:41.648Z", "signer_id": "roshaan.near", "widget_name": "QueryApi.IndexerStatus", "source_code": "//props indexer_name\nconst indexer_name = \"social_feed\";\n\nconst LIMIT = 20;\nconst accountId = \"dataplatform.near\";\nconsole.log(\n  Storage.get(\"QueryAPIV2Toggle\", \"roshaan.near/widget/QueryApi.IndexerStatus\"),\n  \"toggle value\"\n);\nconst H2 = styled.h2`\n  font-size: 19px;\n  line-height: 22px;\n  color: #11181c;\n  margin: 0 0 24px;\n`;\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: black;\n`;\nconst SmallTitle = styled.h3`\n  color: black;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 15px;\n  text-transform: uppercase;\n\n  @media (max-width: 770px) {\n    margin-bottom: 16px;\n  }\n`;\nconst TableElement = styled.td`\n  word-wrap: break-word;\n  font-family: \"Roboto Mono\", monospace;\n  font-size: 11px;\n  background-color: rgb(255, 255, 255);\n  color: rgb(32, 33, 36);\n`;\nconst Subheading = styled.h2`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 10px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n`;\nconst Card = styled.div`\n  border-radius: 12px;\n  background: #fff;\n  border: ${(div) => (div.selected ? \"1px solid black\" : \"1px solid #eceef0\")};\n  box-shadow: 0px 1px 3px rgba(16, 24, 40, 0.1),\n    0px 1px 2px rgba(16, 24, 40, 0.06);\n`;\n\nconst CardBody = styled.div`\n  padding: 16px;\n  display: flex;\n  gap: 16px;\n  align-items: center;\n  flex-direction: column;\n  > * {\n    min-width: 0;\n  }\n`;\n\nconst CardFooter = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  gap: 16px;\n  padding: 16px;\n  border-top: 1px solid #eceef0;\n`;\n\nconst TextLink = styled.a`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C !important\" : \"#687076 !important\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  overflow: ${(p) => (p.ellipsis ? \"hidden\" : \"visible\")};\n  text-overflow: ${(p) => (p.ellipsis ? \"ellipsis\" : \"unset\")};\n  white-space: nowrap;\n  outline: none;\n\n  &:focus,\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nif (!indexer_name) return \"missing indexer_name\";\n\nlet v1_endpoint = `https://near-queryapi.api.pagoda.co`;\nlet v2_endpoint = `https://queryapi-hasura-graphql-mainnet-vcqilefdcq-ew.a.run.app`;\nlet graphQLEndpoint = state.v2Toggle ? v2_endpoint : v1_endpoint;\n\nState.init({\n  logs: [],\n  state: [],\n  indexer_res: [],\n  indexer_resCount: 0,\n  logsCount: 0,\n  stateCount: 0,\n  indexer_resPage: 0,\n  logsPage: 0,\n  statePage: 0,\n  v2Toggle: Storage.get(\"QueryAPIV2Toggle\") || false,\n});\n\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\n  return asyncFetch(`${graphQLEndpoint}/v1/graphql`, {\n    method: \"POST\",\n    headers: {\n      \"x-hasura-role\": \"append\",\n    },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName,\n    }),\n  });\n}\n\nconst createGraphQLLink = () => {\n  const queryLink = `https://cloud.hasura.io/public/graphiql?endpoint=${graphQLEndpoint}/v1/graphql&query=query+IndexerQuery+%7B%0A++indexer_state%28where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%29+%7B%0A++++function_name%0A++++current_block_height%0A++%7D%0A++indexer_log_entries%28%0A++++where%3A+%7Bfunction_name%3A+%7B_eq%3A+%22function_placeholder%22%7D%7D%0A++++order_by%3A+%7B+timestamp%3A+desc%7D%0A++%29+%7B%0A++++function_name%0A++++id%0A++++message%0A++++timestamp%0A++%7D%0A%7D%0A`;\n  return queryLink.replaceAll(\n    \"function_placeholder\",\n    `${accountId}/${indexer_name}`\n  );\n};\n\nconst accountName = accountId.replaceAll(\".\", \"_\");\nconst sanitizedFunctionName = indexer_name;\nconst fullFunctionName = accountName + \"_\" + sanitizedFunctionName;\nconst logsDoc = `\n  query QueryLogs($offset: Int) {\n    indexer_log_entries(order_by: {timestamp: desc}, limit: ${LIMIT}, offset: $offset, where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      block_height\n      message\n      timestamp\n    }\n    indexer_log_entries_aggregate(where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n    aggregate {\n      count\n    }\n  }\n  }\n`;\n\nconst indexerStateDoc = `\n  query IndexerState($offset: Int) {\n    indexer_state(limit: ${LIMIT}, offset: $offset, where: {function_name: {_eq: \"${accountId}/${indexer_name}\"}}) {\n      status\n      function_name\n      current_block_height\n      current_historical_block_height\n    }\n  }\n`;\n\nconst prevV2ToggleSelected = Storage.get(\"QueryAPIV2Toggle\");\nif (!state.initialFetch || prevV2ToggleSelected !== state.v2Toggle) {\n  Storage.set(\"QueryAPIV2Toggle\", state.v2Toggle);\n  fetchGraphQL(logsDoc, \"QueryLogs\", {\n    offset: state.logsPage * LIMIT,\n  }).then((result) => {\n    if (result.status === 200) {\n      State.update({\n        logs: result.body.data[`indexer_log_entries`],\n        logsCount:\n          result.body.data[`indexer_log_entries_aggregate`].aggregate.count,\n      });\n    }\n  });\n\n  fetchGraphQL(indexerStateDoc, \"IndexerState\", {\n    offset: 0,\n  }).then((result) => {\n    if (result.status === 200) {\n      if (result.body.data.indexer_state.length == 1) {\n        State.update({\n          state: result.body.data.indexer_state,\n          stateCount: result.body.data.indexer_state_aggregate.aggregate.count,\n        });\n      }\n    }\n  });\n  State.update({ initialFetch: true });\n}\nconst onLogsPageChange = (page) => {\n  page = page - 1;\n  if (page === state.logsPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n  try {\n    fetchGraphQL(logsDoc, \"QueryLogs\", { offset: page * LIMIT }).then(\n      (result) => {\n        if (result.status === 200) {\n          State.update({\n            logs: result.body.data.indexer_log_entries,\n            logsCount:\n              result.body.data.indexer_log_entries_aggregate.aggregate.count,\n          });\n        }\n      }\n    );\n  } catch (e) {\n    console.log(\"error:\", e);\n  }\n  State.update({ logsPage: page, currentPage: page });\n};\n\nconst onIndexerResPageChange = (page) => {\n  page = page - 1;\n  if (page === state.indexer_resPage) {\n    console.log(`Selected the same page number as before: ${pageNumber}`);\n    return;\n  }\n\n  try {\n    fetchGraphQL(IndexerStorageDoc, \"IndexerStorage\", {\n      offset: page * LIMIT,\n    }).then((result) => {\n      if (result.status === 200) {\n        State.update({\n          indexer_res: result.body.data.indexer_storage,\n          indexer_resCount:\n            result.body.data.indexer_storage_aggregate.aggregate.count,\n        });\n      }\n    });\n  } catch (e) {\n    console.log(\"error:\", e);\n  }\n  State.update({ indexer_resPage: page, currentPage: page });\n};\n\nconst DisclaimerContainer = styled.div`\n  padding: 10px;\n  margin: 0.5px;\n  text-color: black;\n  display: flex;\n  width: 50;\n  border: 2px solid rgb(240, 240, 240);\n  border-radius: 8px;\n  align-items: \"center\";\n  margin-bottom: 5px;\n`;\n\nconst Notice = styled.div`\n  font-weight: 900;\n  font-size: 22px;\n  align-self: flex-start;\n  margin: 10px 0px 30px;\n  text-align: center;\n  padding-bottom: 5px;\n  border-bottom: 1px solid rgb(240, 240, 241);\n  color: rgb(36, 39, 42);\n`;\n\nconst DisclaimerText = styled.p`\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n  color: rgb(17, 24, 28);\n  word-break: break-word;\n  width: 700px;\n  text-align: start;\n  padding-left: 10px;\n\n  @media (max-width: 1024px) {\n    width: 80%;\n  }\n`;\n\nreturn (\n  <>\n    <Card>\n      <Title className=\"p-3\">\n        Indexer Status\n        <TextLink href={createGraphQLLink()} target=\"_blank\">\n          GraphQL Playground\n          <i className=\"bi bi-box-arrow-up-right\"></i>\n        </TextLink>\n        <div\n          style={{\n            marginTop: \"5px\",\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"center\",\n          }}\n        >\n          <DisclaimerContainer>\n            <div className=\"flex\">\n              <Notice>V2 Testing Notice</Notice>\n              <div style={{ display: \"flex\" }}>\n                <DisclaimerText>\n                  We are working on a v2 implementation for QueryAPI which\n                  solves a few issues like better performance for historical\n                  processing & and more control over your indexer. We are\n                  running v2 in parallel and you can see the logs from the new\n                  version by toggling this button. QueryAPI is still in beta.\n                </DisclaimerText>\n                <Widget\n                  src={`roshaan.near/widget/components.toggle`}\n                  props={{\n                    active: state.v2Toggle,\n                    label: \"\",\n                    onSwitch: () => {\n                      State.update({ v2Toggle: !state.v2Toggle });\n                    },\n                  }}\n                />\n              </div>\n            </div>\n          </DisclaimerContainer>\n        </div>\n      </Title>\n\n      <CardBody>\n        <SmallTitle>Indexer State </SmallTitle>\n        {state.state.length > 0 ? (\n          <div class=\"table-responsive mt-3\">\n            <table\n              class=\"table-striped table\"\n              style={{\n                padding: \"30px\",\n                \"table-layout\": \"fixed\",\n              }}\n            >\n              <thead>\n                <tr>\n                  <th>Function Name</th>\n                  <th>Current Block Height</th>\n                  <th>Current Historical Block Height</th>\n                  <th>Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {state.state.map((x) => (\n                  <tr>\n                    <TableElement>{x.function_name}</TableElement>\n                    <TableElement>{x.current_block_height}</TableElement>\n                    <TableElement>\n                      {x.current_historical_block_height}\n                    </TableElement>\n                    <TableElement>{x.status}</TableElement>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n        <SmallTitle> Indexer Logs</SmallTitle>\n        {state.logs.length > 0 ? (\n          <div>\n            <div class=\"table-responsive mt-3\">\n              <table\n                class=\"table-striped table\"\n                style={{\n                  padding: \"30px\",\n                  \"table-layout\": \"fixed\",\n                }}\n              >\n                <thead>\n                  <tr>\n                    <th style={{ width: \"20%\" }}>Block Height</th>\n                    <th style={{ width: \"20%\" }}>Timestamp</th>\n                    <th style={{ width: \"80%\" }}>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {state.logs.map((x) => (\n                    <tr>\n                      <TableElement>{x.block_height}</TableElement>\n                      <TableElement>{x.timestamp}</TableElement>\n                      <TableElement>{x.message}</TableElement>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <Widget\n              src=\"roshaan.near/widget/Paginate-fork\"\n              props={{\n                siblingCount: 1,\n                totalCount: state.logsCount,\n                pageSize: LIMIT,\n                onPageChange: onLogsPageChange,\n                currentPage: state.logsPage,\n              }}\n            />\n          </div>\n        ) : (\n          <Subheading> No data to show... </Subheading>\n        )}\n      </CardBody>\n      <CardFooter></CardFooter>\n    </Card>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/QueryApi.IndexerStatus", "fact_widget_deployments_id": "06d531404ee274a99cfd31e79c0e18fd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}