{"tx_hash": "F4h6nuqGf4qzAq263c8TjxzWuqsFwGC4jGtABdiZV4kf", "action_id_social": "5jDsPt1wtYtZd13aFvrb93KAVDZuCbYMDqMw7AKYuS38-0-widget", "block_id": 113978030, "block_timestamp": "2024-03-02T23:32:51.738Z", "signer_id": "roshaan.near", "widget_name": "ModelMarketplace.Mint", "source_code": "// constants\nconst mpcContract = `signer.canhazgas.testnet`;\nconst { accountId } = context;\nconst chainId = 11155111; // SEPOLIA\nconst nearGas = 300000000000000;\n\nif (!accountId) return <h4>Please Sign In with your Near Account</h4>;\n\nconst gasPricePreFetch = fetch(\n  `https://sepolia.beaconcha.in/api/v1/execution/gasnow`\n);\n\n// if there's a txHash in the url props\nlet txHash = props.transactionHashes;\nif (txHash) {\n  txHash = txHash.split(\",\")[0];\n}\n// get pending tx or user args path, to address\nconst baseTx = Storage.privateGet(\"baseTx\");\nconst txPayload = Storage.privateGet(\"txPayload\");\nconst to = Storage.privateGet(\"to\");\nconst path = 1;\n\ninitState({\n  amount: \"0.1\",\n  to: props.to,\n  path: 1,\n});\n\nconst flashAlert = (alert, dur) => {\n  State.update({\n    alert,\n  });\n  setTimeout(() => State.update({ alert: null }), dur || 3000);\n};\n\nconst refreshBalance = () => {\n  State.update({\n    balance: \"loading...\",\n  });\n  getEthereumAddress(state.path || path);\n};\n\nconst getSepoliaProvider = () => {\n  return new ethers.providers.JsonRpcProvider(\n    \"https://ethereum-sepolia.publicnode.com\"\n  );\n};\n\n\n// spoof Ethereum publicKey to match mock contract\nconst getEthereumAddress = (path) => {\n  const signingKey = new ethers.utils.SigningKey(\n    ethers.utils.sha256(ethers.utils.toUtf8Bytes(accountId + \",\" + path))\n  );\n  const address = ethers.utils.computeAddress(signingKey.privateKey);\n  getSepoliaProvider()\n    .getBalance(address)\n    .then((balance) => {\n      State.update({\n        address,\n        balance: ethers.utils.formatEther(balance),\n      });\n    });\n};\n\nif (!state.mpcKey) {\n  return State.update({\n    mpcKey: Near.view(mpcContract, \"public_key\"),\n  });\n}\n\nif (!state.address) {\n  return getEthereumAddress(state.path || path);\n}\n\nconst decodeTx = () => {\n  if (!baseTx || !txPayload) return;\n\n  const res = fetch(`https://rpc.testnet.near.org`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"EXPERIMENTAL_tx_status\",\n      params: [txHash, \"md1.testnet\"],\n    }),\n  });\n\n  if (!res || !res.ok) {\n    return setTimeout(decodeTx, 500);\n  }\n\n  console.log(\"Near TX res\", res);\n\n  const args = JSON.parse(\n    atob(res.body.result.transaction.actions[0].FunctionCall.args)\n  );\n  const sigRes = JSON.parse(atob(res.body.result.status.SuccessValue));\n\n  const sig = {\n    r: \"0x\" + sigRes[0].substring(2),\n    s: \"0x\" + sigRes[1],\n    v: sigRes[0].substring(0, 2) === \"02\" ? 0 : 1,\n  };\n  const recoveredAddress = ethers.utils.recoverAddress(\n    args.payload,\n    ethers.utils.joinSignature(sig)\n  );\n  if (recoveredAddress !== state.address) {\n    console.log(\"signature failed to recover to correct address\");\n    return;\n  }\n\n  if (JSON.stringify(args.payload) !== JSON.stringify(txPayload)) return;\n\n  // console.log(\"txHex\", txHex);\n  const signedTx = ethers.utils.serializeTransaction(baseTx, sig);\n  console.log(\"Ethereum Signed TX\", signedTx);\n\n  getSepoliaProvider()\n    .send(\"eth_sendRawTransaction\", [signedTx])\n    .then((hash) => {\n      flashAlert(\n        \"TX Sent! Explorer link will appear soon and balance will update automatically in 30s\"\n      );\n      setTimeout(() => {\n        flashAlert(\n          <a href={`https://sepolia.etherscan.io/tx/${hash}`} target=\"_blank\">\n            Explorer Link\n          </a>,\n          60000\n        );\n      }, 4000);\n      setTimeout(refreshBalance, 50000);\n      setTimeout(refreshBalance, 120000);\n    })\n    .catch((e) => {\n      if (/nonce too low/gi.test(JSON.stringify(e))) {\n        console.log(\"tx has been tried, removing localStorage\");\n        Storage.privateSet(\"baseTx\", null);\n        Storage.privateSet(\"txPayload\", null);\n        return;\n      }\n      if (/gas too low|underpriced/gi.test(JSON.stringify(e))) {\n        console.log(e);\n        flashAlert(\n          \"Insufficient funds or gas too low. Try sending a smaller amount.\"\n        );\n        return;\n      }\n      console.log(e);\n    });\n};\n\nif (!state.decoded && txHash && state.address) {\n  decodeTx();\n  return State.update({ decoded: true });\n}\n\n// Use MPC to sign\n\ntry {\n  const a = ethers.utils.getAddress(\"0x\");\n  console.log(a);\n} catch (e) { }\n\nconst sign = () => {\n  let to = props.to;\n  try {\n    to = ethers.utils.getAddress(to);\n  } catch (e) {\n    return flashAlert(\n      \"Invalid to address. Please add a proper Ethereum address to send ETH to.\"\n    );\n  }\n\n  getSepoliaProvider()\n    .getTransactionCount(state.address)\n    .then((nonce) => {\n      // Ethereum TX\n      const amount = props.amount;\n      // 2 gwei + some randomness\n      const gasPriceFetch = fetch(\n        `https://sepolia.beaconcha.in/api/v1/execution/gasnow`\n      );\n\n      const gasPriceData = gasPriceFetch || gasPricePreFetch;\n      const { rapid, fast, standard } = gasPriceData.body.data;\n      const gasPrice = Math.max(rapid, fast, standard);\n      console.log(gasPrice);\n      if (!gasPrice)\n        return flashAlert(\n          \"Unable to get gas price. Please refresh and try again.\"\n        );\n\n      const gasLimit = 53000,\n        value = ethers.utils.hexlify(ethers.utils.parseUnits(amount));\n\n      if (value === \"0x00\") {\n        return flashAlert(\"Amount is zero. Please try a non-zero amount.\");\n      }\n\n      const baseTx = {\n        to,\n        nonce,\n        data: [],\n        value: value,\n        gasLimit,\n        gasPrice,\n        chainId,\n      };\n\n      // check balance\n      if (\n        !state.balance ||\n        new BN(ethers.utils.parseUnits(state.balance).toString()).lt(\n          new BN(ethers.utils.parseUnits(amount).toString()).add(\n            new BN(gasPrice).mul(new BN(gasLimit))\n          )\n        )\n      ) {\n        return flashAlert(\"Insufficient funds\");\n      }\n\n      Storage.privateSet(\"baseTx\", baseTx);\n      const unsignedTx = ethers.utils.serializeTransaction(baseTx);\n      const txHash = ethers.utils.keccak256(unsignedTx);\n      const payload = Object.values(ethers.utils.arrayify(txHash));\n      Storage.privateSet(\"txPayload\", payload);\n\n      Near.call(\n        mpcContract,\n        \"sign\",\n        {\n          payload,\n          path: state.path || path,\n        },\n        nearGas\n      );\n    });\n};\n\nconst Theme = styled.div`\n  box-sizing: border-box;\n  margin: auto;\n  text-align: center;\n\n  .alert {\n    background-color: #eeeeff\n  }\n\n  .container {\n  text-align: left;\n    width: 516px;\n\n  }\n  .group {\n    display: flex;\n    justify-content: flex-start;\n    margin-bottom: 16px;\n    line-height: 32px;\n    > div, > input {\n      margin-right: 16px;\n    }\n    > input {\n      border: 1px solid #ddd;\n      border-radius: 8px !important;\n      padding: 0 4px;\n      width: 100px;\n    }\n    > div:nth-child(1) {\n      width: 40px;\n    }\n    > .address {\n      width: 416px;\n    }\n  }\n`;\n\nreturn (\n  <Theme>\n    <div className=\"container\">\n      {/*\n      // Use real kdf with mpcKey\n      <iframe\n      style={{ display: \"none\" }}\n      src={\"https://near-mpc-kdf-iframe.pages.dev/\"}\n      message={state.message}\n      onMessage={(res) => {\n        if (res.loaded) {\n          State.update({\n            message: { publicKey: state.mpcKey, accountId, path },\n          });\n        }\n        if (res.address) {\n          State.update({\n            address: res.address,\n          });\n        }\n      }}\n    />\n    */}\n      {state.alert && <p className=\"alert\">{state.alert}</p>}\n\n      <p>\n        Sending Ethereum Address:\n        <br />\n        <a\n          href={`https://sepolia.etherscan.io/address/${state.address}`}\n          target=\"_blank\"\n        >\n          {state.address}\n        </a>\n      </p>\n\n      <div className=\"group\">\n        <div>Path</div>\n        <input\n          className=\"amount\"\n          type=\"text\"\n          value={state.path || path}\n          onChange={({ target: { value } }) => {\n            getEthereumAddress(value);\n            Storage.privateSet(\"path\", value);\n            State.update({ path: value });\n          }}\n        />\n        <div>\n          + &nbsp;<strong>{accountId}</strong>\n        </div>\n      </div>\n\n        <>\n          <div className=\"group\">\n            <button onClick={sign}>Pay Fee</button>\n          </div>\n        </>\n      )\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/ModelMarketplace.Mint", "fact_widget_deployments_id": "f0dbf9cf1e1e9a533ec8e14c2e9b2628", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}