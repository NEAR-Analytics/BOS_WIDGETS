{"tx_hash": "F4h6nuqGf4qzAq263c8TjxzWuqsFwGC4jGtABdiZV4kf", "action_id_social": "5jDsPt1wtYtZd13aFvrb93KAVDZuCbYMDqMw7AKYuS38-0-widget", "block_id": 113978030, "block_timestamp": "2024-03-02T23:32:51.738Z", "signer_id": "roshaan.near", "widget_name": "ModelMarketplace.Model.AgentChat", "source_code": "const { href } = VM.require(\"devhub.near/widget/core.lib.url\");\nconst storedModel = Storage.get(\"agent-model\");\nconst storedLocalModel = Storage.get(\"agent-local-model\");\nconst storedCredentialType = Storage.get(\"agent-credential-type\");\nconst storedCredential = Storage.get(\"agent-credential\");\nconst storedJsonOutputSetting = Storage.get(\"agent-json-output-setting\");\nif (\n  !href ||\n  storedCredential === null ||\n  storedModel === null ||\n  storedLocalModel === null ||\n  storedCredentialType === null\n) {\n  return \"Loading config...\";\n}\n\nconst convertSnakeToPascal = (item) => {\n  Object.keys(item).forEach((key) => {\n    const pascalKey = key.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\n    if (key !== pascalKey) {\n      item[pascalKey] = item[key];\n      delete item[key];\n    }\n  });\n  return item;\n};\n\n//\n// const example_json = {\n//   \"model_id\": \"0x91CfC8d11E02723F7335D00ec60A9d309ef30772\",\n//   \"nft_address\": \"0x91CfC8d11E02723F7335D00ec60A9d309ef30772\",\n//   \"model_name\": \"distilBert-sentiment-classifier\",\n//   \"model_description\": \"This model is finetuned upon the distilled version of the BERT base model .\",\n//   \"python_requirements\":\n//   {\n//     \"python\": \"3.9.13\",\n//     \"requirements\":\n//     {\n//       \"accelerate\": \"0.27.2\",\n//       \"pytorch\": \"1.12.1\",\n//       \"transformers\": \"4.38.2\",\n//       \"datasets\": \"2.17.1\",\n//       \"huggingface-hub\": \"0.21.3\",\n//       \"numpy\": \"1.23.4\",\n//       \"pandas\": \"1.5.2\",\n//       \"tokenizers\": \"0.15.2\",\n//       \"torch\": \"2.2.0\",\n//       \"tqdm\": \"4.66.2\"\n//     }\n//   },\n//   \"finetuning_parameters\": {\n//     \"batch_size\": 8,\n//     \"learning_rate\": 5e-5,\n//     \"num_epochs\": 3,\n//     \"random_seed\": 42\n//   },\n//   \"finetune_data_hash\": \"36bbafbde8fc67c03221f17face0e64136cb04d059a3d6936e35fcda6891ce02\",\n//   \"finetuned_model_hash\": \"dd2a7a30f0822b2d5d6a4b1ead1ceafea2cc15867fc3650b7f5348e64f3818e0\",\n//   \"finetuned_from\": \"0x91CfC8d11E02723F7335D00ec60A9d309ef30773\",\n//   \"model_weight_uri\": \"ipfs://QmNuTrsbCTQFoWcMqHtnoBa8N8SStiqmEn5VSqrC3tq1no\",\n//   \"model_logo\": \"https://i.postimg.cc/38psKg0k/DALL-E-2024-02-28-10-02-54-An-image-of-a-playful-robot-sitting-on-the-floor-its-body-made-of-colo.webp\",\n//   \"model_owner_address\": \"0x91CfC8d11E02723F7335D00ec60A9d309ef30772\",\n//   \"account_id\": \"roshaan.near\",\n//   \"licenses_used\": [\"0x91CfC8d11E02723F7335D00ec60A9d309ef30772\"],\n//   \"token_id\": 241,\n// };\n//\nState.init({ model: undefined, nft_info: undefined, infringementStatus: undefined })\n\nconst CONTRACT_ID = \"0xd8E0A54F24A45A7cd7f38BC3E8594FE74d206d25\"\n\nconst { src, embedded, tokenId } = props;\nconsole.log(\"tokenId\",tokenId)\n\nconst getIpInformation = () => {\n  const options = {\n    method: 'POST',\n    headers: {\n      accept: 'application/json',\n      'X-API-Key': 'U3RvcnlQcm90b2NvbFRlc3RBUElLRVk=',\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      options: {\n        where: { tokenContract: CONTRACT_ID, tokenId: parseInt(tokenId) }\n      }\n    })\n  }\n  asyncFetch('https://api.storyprotocol.net/api/v1/assets', options).then((res) => {\n    console.log(res, \"model info ip\")\n    State.update({\n      model: res.body.data\n    })\n  });\n}\n\nconst getNFTInformation = () => {\n  const options = {\n    method: 'GET'\n  }\n  asyncFetch(`https://eth-sepolia.g.alchemy.com/v2/J1d0O-_NMZNpX97zFlAr0_rFmIcohJ67/getNFTMetadata?contractAddress=${CONTRACT_ID}&tokenId=${tokenId}`, options).then((res) => {\n    console.log({...convertSnakeToPascal(res.body.metadata), tokenId: res.body.tokenId, accountId: \"roshaan.near\"}, \"ds\")\n    State.update({\n      nft_info: {...convertSnakeToPascal(res.body.metadata), tokenId: res.body.id.tokenId, accountId: \"roshaan.near\", modelOwnerAddress: \"0x04df9B4c90651fe64DE8CDba9DD512b7AE63c436\"}\n    })\n  });\n}\n\nuseEffect(() => {\n  getNFTInformation()\n  getIpInformation()\n}, [])\n\nif(!state.nft_info) return \"loading...\"\nconst [accountId, agentType, agentName] = src.split(\"/\") ?? [null, null, null];\nconst blockHeight = blockHeight ?? \"final\";\n\nconst data = Social.getr(`${accountId}/agent/${agentName}`, blockHeight);\nif (!data && !state.model && !state.nft_info) return \"Loading...\";\nconst modelInfo = { accountId, name: agentName, ipInfo: { ...state.model }, nftInfo: { ...state.nft_info } };\n\nconsole.log(modelInfo, \"from chat\")\n\nconst listLink = href({\n  widgetSrc: `roshaan.near/widget/ModelMarketplace.App`,\n});\n\nconst [ipAddressValue, setIpAddressValue] = useState(\"\");\nconst [settingsOpen, setSettingsOpen] = useState(false);\nconst [requirementsOpen, setRequirementsOpen] = useState(false);\nconst [parametersOpen, setParametersOpen] = useState(false);\nconst [integrityCheckOpen, setIntegrityCheckOpen] = useState(false);\nconst [assetTableOpen, setAssetTableOpen] = useState(false);\nconst [question, setQuestion] = useState(\"\");\nconst [loading, setLoading] = useState(false);\nconst [messages, setMessages] = useState([]);\n\nconst [model, setModel] = useState(storedModel ?? \"near-llama-7b\");\nconst [localModel, setLocalModel] = useState(storedLocalModel ?? \"http://localhost:1234/v1/chat/completions\");\nconst [credentialType, setCredentialType] = useState(storedCredentialType ?? \"bearer\");\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\nconst [jsonOutputSetting, setJsonOutputSetting] = useState(storedJsonOutputSetting ?? false);\n\nuseEffect(() => {\n  Storage.set(\"agent-model\", model);\n}, [model]);\nuseEffect(() => {\n  Storage.set(\"agent-local-model\", localModel);\n}, [localModel]);\nuseEffect(() => {\n  Storage.set(\"agent-credential-type\", credentialType);\n}, [credentialType]);\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\nuseEffect(() => {\n  Storage.set(\"agent-json-output-setting\", jsonOutputSetting);\n}, [jsonOutputSetting]);\n\nconst toggleAssetCheck = () => {\n  setAssetTableOpen(!assetTableOpen)\n}\nconst toggleIntegrityCheck = () => {\n  setIntegrityCheckOpen(!integrityCheckOpen);\n};\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\nconst toggleRequirements = () => {\n  setRequirementsOpen(!requirementsOpen);\n};\nconst toggleParameters = () => {\n  setParametersOpen(!parametersOpen);\n};\n\nconst routeApi = async (question) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return nearLlama(question);\n    default:\n      return openAICompatible(question);\n  }\n};\nconst urlForModel = (model) => {\n  switch (model) {\n    case \"near-llama-7b\":\n      return `https://ModelMarketplace.near.social/api`;\n    case \"local\":\n      return localModel;\n    case \"gpt-4\":\n    case \"gpt-3.5-turbo\":\n      return `https://api.openai.com/v1/chat/completions`;\n    case \"mixtral-8x7b-32768\":\n    case \"llama2-70b-4096\":\n      return \"https://api.groq.com/openai/v1/chat/completions\";\n    default:\n      return `https://api.openai.com/v1/chat/completions`;\n  }\n};\nconst nearLlama = async (question) => {\n  return asyncFetch(`https://ModelMarketplace.near.social/api`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    responseType: \"json\",\n    body: JSON.stringify([{ role: \"system\", content: data.prompt }, question]),\n  }).then((response) => {\n    return response.body.response;\n  });\n};\nconst openAICompatible = async (question) => {\n  let finalQuestion = question.content;\n  let options = {\n    model,\n  };\n  if (jsonOutputSetting) {\n    options.response_format = { type: \"json_object\" };\n    if (!finalQuestion.includes(\"json\")) {\n      finalQuestion = `${finalQuestion} respond in json`;\n    }\n  }\n  // frequency_penalty: 0.0,\n  // logit_bias: {},\n  // log_props: true,\n  // top_logprobs: 5,\n  // max_tokens: 2048,\n  // n: 1,\n  // presence_penalty: 0.0,\n  // seed: 0,\n  // stop: [\"\\n\"],\n  // stream: false,\n  // temperature: 0.7,\n  // top_p: 1,\n  // tools: agent.tools,\n  // tool_choice: 'auto',\n  // user: anonymize(context.accountId),\n\n  return asyncFetch(urlForModel(model), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${credential}`,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      ...options,\n      messages: [\n        { role: \"system\", content: data.prompt },\n        {\n          role: \"user\",\n          content: finalQuestion,\n        },\n      ],\n    }),\n  }).then((response) => {\n    const answer = response.body.choices[0].message.content;\n    return answer;\n  });\n};\n\nuseEffect(() => {\n  if (messages.length === 0 || messages[messages.length - 1].role !== \"user\") {\n    return;\n  }\n  setLoading(true);\n  routeApi(...messages.slice(-1))\n    .then((answer) => {\n      setMessages([...messages, { role: \"system\", content: answer }]);\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n}, [messages]);\n\nconst submitQuestion = () => {\n  setMessages([...messages, { role: \"user\", content: question }]);\n  setQuestion(\"\");\n};\nconst requiresCredentials = (model) => {\n  return (\n    model === \"gpt-4\" || model === \"gpt-3.5-turbo\" || model === \"mixtral-8x7b-32768\" || model === \"llama2-70b-4096\"\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding: 48px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 1em;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  line-height: 39px;\n  color: #11181c;\n  margin-bottom: 20px;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n  font-size: ${(p) => (p.large ? \"16px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Prompt = styled.p`\n  font-family: monospace;\n  font-size: 14px;\n  overflow-y: auto;\n  height: 100px;\n`;\nconst Label = styled.span`\n  font-weight: 600;\n`;\nconst Settings = styled.div`\n  margin-bottom: 1em;\n  z-index: 1000;\n`;\nconst Controls = styled.div`\n  margin-bottom: 1em;\n`;\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\nconst AllSettings = styled.div``;\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\nconst Question = styled.input`\n  border-top-left-radius: 2rem;\n  border-bottom-left-radius: 2rem;\n`;\nconst UserMessage = styled.div``;\nconst AgentMessage = styled.div`\n  background-color: #f9f9f9;\n`;\n\nconst renderParameters = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleParameters}>\n        <i className={parametersOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} /> Model Parameters\n      </CardControl>\n      {parametersOpen && (\n        <AllSettings>\n          {JSON.stringify(state.nft_info.finetuningParameters)}\n        </AllSettings>\n      )}\n    </Settings>\n  )\n}\n\nconst renderIntegrityChecks = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleIntegrityCheck}>\n        <i className={integrityCheckOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} /> Model Integrity Checks\n      </CardControl>\n      {integrityCheckOpen && (\n        <AllSettings>\n          <div>\n            <Text large bold>\n              Finetune Data Hash\n            </Text>\n            <Text>\n              {state.nft_info.finetuneDataHash}\n            </Text>\n          </div>\n\n          <div>\n            <Text large bold>\n              Finetune Model Hash\n            </Text>\n            <Text>\n              {state.nft_info.finetunedModelHash}\n            </Text>\n          </div>\n        </AllSettings>\n      )}\n    </Settings>\n  )\n}\n\nconst createIpLink = (ip) => {\n  return \"https://explorer.storyprotocol.xyz/ipa/\" + ip\n}\n\nconst TextLink = styled(\"Link\")`\n  display: block;\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n  font-size: 14px;\n  white-space: nowrap;\n  outline: none;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  margin-bottom: 2px;\n\n  &:focus,\n  &:hover {\n    text-decoration: underline;\n  }\n\n  i {\n    color: #7e868c;\n    margin-right: 8px;\n  }\n`;\n\nconst renderUsedAssets = () => {\n  return (\n    <>\n      <Settings>\n        <CardControl bold onClick={toggleAssetCheck}>\n          <i className={assetTableOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} /> Data Content\n        </CardControl>\n        {assetTableOpen && (\n          <AllSettings>\n            <table className=\"table\">\n              <th>Content</th>\n              <th>License ID </th>\n              <tbody>\n                {state.nft_info.licensesUsed.map((ip) => {\n                  return (\n                    <>\n                      <td>{}</td>\n                      <td><TextLink href={createIpLink(ip)}>{ip}</TextLink></td>\n                    </>)\n                })}\n              </tbody>\n            </table>\n          </AllSettings>\n        )}\n      </Settings>\n    </>\n  )\n}\n\nconst PrettyJsonWrapper = styled.pre`\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  text-align: left;\n  color: #333;\n  background-color: #f7f7f7;\n  padding: 10px;\n  border-radius: 5px;\n  margin: 5px 0;\n`;\nconst renderRequirements = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleRequirements}>\n        <i className={requirementsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} /> Model Dependencies\n      </CardControl>\n      {requirementsOpen && (\n        <AllSettings>\n          <Text>\n            Python Version:\n          </Text>\n          <div>\n            {state.nft_info.pythonRequirements.python}\n          </div>\n          <Text>\n            Dependencies\n          </Text>\n          <PrettyJsonWrapper>\n            {JSON.stringify(state.nft_info.pythonRequirements.requirements)}\n          </PrettyJsonWrapper>\n\n        </AllSettings>\n      )}\n    </Settings>\n  )\n}\nconst renderSettings = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleSettings}>\n        <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} /> Settings\n      </CardControl>\n      {settingsOpen && (\n        <AllSettings>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.InputSelect\"\n              props={{\n                groups: [\n                  {\n                    label: \"NEAR\",\n                    items: [\n                      {\n                        label: \"NEAR Llama 7b\",\n                        value: \"near-llama-7b\",\n                      },\n                      // Hi hackathon teams, implementing calls to gpt4.near? Add it here. - the black dragon\n                    ],\n                  },\n                  {\n                    label: \"Groq\",\n                    items: [\n                      {\n                        label: \"Mixtral 8x7b 32768\",\n                        value: \"mixtral-8x7b-32768\",\n                      },\n                      {\n                        label: \"Llama2 70b 4096\",\n                        value: \"llama2-70b-4096\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"OpenAI\",\n                    items: [\n                      {\n                        label: \"GPT-4\",\n                        value: \"gpt-4\",\n                      },\n                      {\n                        label: \"GPT-3.5 turbo\",\n                        value: \"gpt-3.5-turbo\",\n                      },\n                    ],\n                  },\n                  {\n                    label: \"Local\",\n                    items: [\n                      {\n                        label: \"Local\",\n                        value: \"local\",\n                      },\n                    ],\n                  },\n                ],\n                label: \"Choose Model\",\n                placeholder: \"OpenAI GPT-3\",\n                rootProps: {\n                  value: model,\n                  onValueChange: setModel,\n                },\n              }}\n            />\n          </InputWrapper>\n          {model === \"local\" && (\n            <InputWrapper>\n              <Widget\n                src=\"near/widget/DIG.Input\"\n                props={{\n                  label: \"Local Model URL\",\n                  assistiveText: \"Any url that accepts messages in OpenAI format\",\n                  iconLeft: \"ph-bold ph-horse\",\n                  onInput: (e) => setLocalModel(e.target.value),\n                  value: localModel,\n                }}\n              />\n            </InputWrapper>\n          )}\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <Widget\n                  src=\"near/widget/DIG.InputSelect\"\n                  props={{\n                    groups: [\n                      {\n                        label: \"OpenAI, Groq, or other API Key\",\n                        items: [\n                          {\n                            label: \"Bearer Token\",\n                            value: \"bearer\",\n                          },\n                        ],\n                      },\n                    ],\n                    label: \"Credential Type\",\n                    rootProps: {\n                      value: credentialType,\n                      onValueChange: setCredentialType,\n                    },\n                  }}\n                />\n              </div>\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText: \"Your OpenAI API Key or other credentials, will be stored in your browser.\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n          <InputWrapper>\n            <Widget\n              src=\"near/widget/DIG.Checkbox\"\n              props={{\n                id: \"json-output\",\n                label: \"JSON Output mode\",\n                checked: jsonOutputSetting,\n                onCheckedChange: setJsonOutputSetting,\n              }}\n            />{\" \"}\n            not supported by all providers.\n          </InputWrapper>\n        </AllSettings>\n      )}\n    </Settings>\n  );\n};\nconst submitIntegrityCheck = () => {\n  State.update({ infringementStatus: state.nft_info.licensesUsed.includes(ipAddressValue) })\n}\nreturn (\n  <Wrapper>\n    <div>\n      {!embedded && (\n        <div>\n          <Link to={listLink}>\n            <Header>\n              <i className=\"ph ph-arrow-left\" />\n              Models List\n            </Header>\n          </Link>\n          <Overview>\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <Widget\n                  src=\"roshaan.near/widget/ModelMarketplace.Model.AgentSummary\"\n                  props={{\n                    size: \"small\",\n                    showTags: true,\n                    model: modelInfo,\n                  }}\n                />\n              </div>\n              <div className=\"col-7\">\n                <Prompt>\n                  <Label>Description:</Label> {state.nft_info.modelDescription}\n                </Prompt>\n              </div>\n            </div>\n          </Overview>\n        </div>\n      )}\n      <Controls>\n        <div className=\"input-group\" style={{ width: \"50%\" }}>\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={ipAddressValue}\n            onChange={(e) => setIpAddressValue(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitIntegrityCheck();\n              }\n            }}\n            placeholder=\"Check if your IP was violated. Type your IP Address form Story Protocol in\"\n            autoFocus\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitIntegrityCheck,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Submit\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n        {state.infringementStatus && (state.infringementStatus ? \"Your IP was violated\" : \"Your IP was not Violated\")}\n        {renderIntegrityChecks()}\n        {renderUsedAssets()}\n        {renderParameters()}\n        {renderRequirements()}\n        {renderSettings()}\n        {requiresCredentials(model) && credential === \"\" && (\n          <div className=\"alert alert-danger mx-3\" role=\"alert\">\n            <i className=\"ph ph-alert-circle\" /> To use an OpenAI or Groq model enter your API Key in Settings or change\n            to another provider.\n          </div>\n        )}\n        <div className=\"input-group\">\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitQuestion();\n              }\n            }}\n            placeholder=\"What's your question?\"\n            autoFocus\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitQuestion,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Submit\",\n              disabled: (requiresCredentials(model) && credential === \"\") || question === \"\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n      </Controls>\n      <div className=\"d-flex flex-column-reverse\">\n        {messages.map(({ role, content }, i) => {\n          return (\n            <div key={i} className={`message ${role}`}>\n              {role === \"user\" && (\n                <UserMessage>\n                  <Widget src=\"mob.near/widget/N.ProfileLine\" props={{ accountId: context.accountId }} />\n                  <Markdown text={content} />\n                </UserMessage>\n              )}\n              {role !== \"user\" && (\n                <AgentMessage>\n                  <Markdown text={content} />\n                </AgentMessage>\n              )}\n            </div>\n          );\n        })}\n        {loading && (\n          <div key=\"loading\" className={`message system`}>\n            <div>\n              <span className=\"spinner-grow spinner-grow-sm me-1\" role=\"status\" aria-hidden=\"true\" />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/roshaan.near/widget/ModelMarketplace.Model.AgentChat", "fact_widget_deployments_id": "ecd549eb0537685c5d1e79b299fff5b6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}