{"tx_hash": "E7sFhu63x8aghjpegT4RnkDz5JonmcvDK32dCu9FkcKY", "action_id_social": "GYF648nxQ1SP19D6BzQ9csFNT46DkTsF6Rs1FWj1xBCe-0-widget", "block_id": 102844940, "block_timestamp": "2023-10-07T18:33:15.989Z", "signer_id": "vadim.near", "widget_name": "community-sbt-votes", "source_code": "State.init({\n  filter: 1,\n  read_index: 0,\n  tokens: [],\n});\n\nconst data = fetch(\n  \"https://raw.githubusercontent.com/zavodil/near-nft-owners-list/main/output_election_votes.txt\"\n);\n\nif (data.ok) {\n  let voters = {};\n  Object.values(\n    data.body\n      .split(\"\\n\")\n      .map((line) => line.split(\"|\"))\n      .filter((data) => data.length === 5)\n  ).map((item) => {\n    const account_id = item[0];\n    if (voters[account_id] == undefined) {\n      voters[account_id] = {};\n    }\n    voters[account_id][item[3]] = item[4].toLowerCase();\n  });\n\n  State.update({ voters });\n} else return \"Loading\";\n\nif (state.read_index != -1) {\n  const tokens = Near.view(\"registry.i-am-human.near\", \"sbt_tokens\", {\n    issuer: \"community.i-am-human.near\",\n    from_token: 1 + state.read_index * 100,\n    limit: 100,\n  });\n\n  if (tokens) {\n    if (!tokens.length) {\n      State.update({ read_index: -1 });\n    } else {\n      State.update({\n        read_index: state.read_index + 1,\n        tokens: [...state.tokens, ...tokens],\n      });\n    }\n  }\n}\n\nconst tokens = state.tokens.filter(\n  (token) => token.metadata.class == state.filter\n);\nconst votersFiltered = tokens.map((token) => token.owner);\n\nlet affectedCandidates = {};\nlet totalDisaqualifiedVotes = 0;\nvotersFiltered.map((accountId) => {\n  Object.keys(state.voters[accountId] ?? []).map((house) => {\n    JSON.parse(state.voters[accountId][house]).map(\n      (candidateId) =>\n        (affectedCandidates[candidateId] =\n          (affectedCandidates[candidateId] ?? 0) + 1)\n    );\n    totalDisaqualifiedVotes += JSON.parse(\n      state.voters[accountId][house]\n    ).length;\n  });\n});\nconst affectedCandidatesSorted = Object.keys(affectedCandidates).sort(\n  (a, b) => affectedCandidates[b] - affectedCandidates[a]\n);\n\nconst containsSearchBy = (account_id) => {\n  return !account_id || !state.searchBy || account_id.includes(state.searchBy);\n};\n\nreturn (\n  <div>\n    <h1>Votes by Community SBT Owners</h1>\n\n    <div class=\"form-check\">\n      <input\n        class=\"form-check-input\"\n        type=\"radio\"\n        id=\"filter-1\"\n        onChange={() => State.update({ filter: 1 })}\n        checked={state.filter == 1}\n      />\n      <label class=\"form-check-label\" for=\"filter-1\">\n        SBT OG token\n      </label>\n    </div>\n    <div class=\"form-check\">\n      <input\n        class=\"form-check-input\"\n        type=\"radio\"\n        id=\"filter-2\"\n        onChange={() => State.update({ filter: 2 })}\n        checked={state.filter == 2}\n      />\n      <label class=\"form-check-label\" for=\"filter-2\">\n        SBT NDC Contributor\n      </label>\n    </div>\n    <div class=\"form-check\">\n      <input\n        class=\"form-check-input\"\n        type=\"radio\"\n        id=\"filter-3\"\n        onChange={() => State.update({ filter: 3 })}\n        checked={state.filter == 3}\n      />\n      <label class=\"form-check-label\" for=\"filter-3\">\n        GWG Core Contributor\n      </label>\n    </div>\n\n    <div class=\"input-group mb-1\">\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"Search by NEAR Account ID\"\n        onChange={(e) =>\n          State.update({\n            searchBy: e.target.value,\n          })\n        }\n        value={state.searchBy}\n      />\n\n      <button\n        class=\"btn btn-outline-secondary\"\n        type=\"button\"\n        onClick={() => State.update({ searchBy: \"\" })}\n        title=\"Reset Search\"\n      >\n        X\n      </button>\n    </div>\n\n    <div class=\"row align-items-start border-bottom\">\n      <div class=\"col fw-bold\">Candidate</div>\n      <div class=\"col fw-bold\">Votes casted</div>\n    </div>\n\n    {affectedCandidatesSorted\n      .filter((account_id) => containsSearchBy(account_id))\n      .map((candidateId) => {\n        return (\n          <div class=\"row border-bottom align-items-start\">\n            <div class=\"col\" title={candidateId}>\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{\n                  accountId: candidateId,\n                  link: true,\n                  hideAccountId: true,\n                  hideImage: false,\n                }}\n              />\n            </div>\n            <div class=\"col align-items-start\">\n              {affectedCandidates[candidateId]}\n            </div>\n          </div>\n        );\n      })}\n    <div class=\"pt-3\">\n      Voters:{\" \"}\n      <ol>\n        {votersFiltered.map((item) => (\n          <li>{item}</li>\n        ))}\n      </ol>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vadim.near/widget/community-sbt-votes", "fact_widget_deployments_id": "3811947055cec97b7ce0bcf28768cfc9", "inserted_timestamp": "2023-10-07T20:30:50.465Z", "modified_timestamp": "2023-10-07T20:30:50.465Z", "__row_index": 1}