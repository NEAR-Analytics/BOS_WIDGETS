{"tx_hash": "3Kv6H8KuMmWG2NV6poyDjN3ArXiv4pqjxJaXxVmN4z2E", "action_id_social": "ENUjyvfFqmt4tGJn6m2Ubr1fmckUqdeVka74z4skQteo-0-widget", "block_id": 101660598, "block_timestamp": "2023-09-21T23:49:07.645Z", "signer_id": "vadim.near", "widget_name": "follow-voters", "source_code": "const userId =\n  state.userId ?? props.accountId ?? context.accountId ?? \"vadim.near\";\n\nconst numberToFollow = 150;\n\nState.init({\n  userId,\n  whitelisted: [],\n  blacklisted: [],\n});\n\nif (!userId) {\n  return \"Please sign  in with NEAR wallet to follow other accounts\";\n}\n\nconst followingData = Social.keys(\n  `${state.userId ?? userId}/graph/follow/*`,\n  \"final\"\n);\nif (followingData === null) {\n  return \"Loading\";\n}\n\nif (state.following === undefined) {\n  console.log(\"read following\");\n  const following =\n    followingData[state.userId ?? userId][\"graph\"][\"follow\"] ?? {};\n\n  State.update({\n    following,\n    prevFollowing: JSON.parse(JSON.stringify(following)),\n  });\n}\nconst voteData = fetch(\n  \"https://raw.githubusercontent.com/zavodil/near-nft-owners-list/main/output_election_votes.txt\"\n);\n\nif (voteData.ok) {\n  let voters = {};\n  Object.values(\n    voteData.body\n      .split(\"\\n\")\n      .map((line) => line.split(\"|\"))\n      .filter((data) => data.length === 5)\n  ).map((item) => {\n    const account_id = item[0];\n    if (voters[account_id] == undefined) {\n      voters[account_id] = {};\n    }\n    voters[account_id][item[3]] = item[4].toLowerCase();\n  });\n\n  State.update({ voters });\n} else return \"Loading\";\n\nconst candidates = [];\nObject.keys(state.voters ?? []).map((accountId) => {\n  Object.keys(state.voters[accountId]).map((house) => {\n    JSON.parse(state.voters[accountId][house]).map((candidateId) => {\n      if (!candidates.includes(candidateId)) {\n        candidates[candidateId] = house;\n      }\n    });\n  });\n});\n\nconst votersForCurrentUserId = [];\nObject.keys(state.voters ?? []).map((accountId) => {\n  const accountVotes = Object.keys(state.voters[accountId]).reduce(\n    (votes, house) => {\n      return [...JSON.parse(state.voters[accountId][house]), ...votes];\n    },\n    []\n  );\n  if (accountVotes.includes(state.userId)) {\n    votersForCurrentUserId.push(accountId);\n  }\n});\n\nconst accounts = votersForCurrentUserId;\n\nlet followingsAll = [];\naccounts.map((followingAccountId) => {\n  followingsAll[followingAccountId] =\n    (followingsAll[followingAccountId] ?? 0) + 1;\n});\n\nlet followingTop = Object.keys(followingsAll).sort(\n  (a, b) => followingsAll[b] - followingsAll[a]\n);\n\nlet handleChange = (accountId) => {\n  let following = state.following;\n  following[accountId] = !following[accountId];\n  State.update({ following });\n};\n\nlet handleSelectAll = () => {\n  const following = state.following;\n\n  let followCounter = 0;\n  accounts.map((accountId) => {\n    if (followCounter < numberToFollow) {\n      if (!following[accountId]) {\n        followCounter++;\n        following[accountId] = true;\n      }\n    }\n  });\n  State.update({ following });\n};\n\nlet followingsBlocks = followingTop.map((accountId) => (\n  <li\n    className={`list-group-item ${\n      state.following[accountId] ? \"list-group-item-success\" : \"\"\n    }`}\n  >\n    <div className=\"form-check\">\n      <input\n        className=\"form-check-input\"\n        type=\"checkbox\"\n        value={accountId}\n        disabled={accountId == state.userId}\n        id={`follow-${accountId}`}\n        name={`follow-${accountId}`}\n        onChange={() => handleChange(accountId)}\n        checked={state.following[accountId] ?? false}\n      />\n      <label className=\"form-check-label\" for={`follow-${accountId}`}>\n        <Widget\n          src=\"mob.near/widget/N.ProfileLine\"\n          props={{\n            accountId,\n            link: false,\n            hideAccountId: true,\n            hideImage: false,\n          }}\n        />{\" \"}\n        <a\n          className=\"btn btn-sm btn-outline-secondary border-0\"\n          href={`/mob.near/widget/ProfilePage?accountId=${accountId}`}\n          target=\"_blank\"\n        >\n          <i className=\"bi bi-window-plus me-1\" title=\"Open in new tab\"></i>\n        </a>\n      </label>\n    </div>\n  </li>\n));\n\nlet dataFollow = {};\nObject.keys(state.following).map((accountId) => {\n  const prevState = !!state.prevFollowing[accountId];\n  let follow = !!state.following[accountId];\n  if (accountId !== state.userId && prevState !== follow) {\n    dataFollow[accountId] = follow ? \"\" : null;\n  }\n});\n\nlet dataGraph = [];\nlet dataNotify = [];\n\nObject.keys(state.following).map((accountId) => {\n  if (following[accountId] != state.following[accountId]) {\n    let follow = !!state.following[accountId];\n    dataGraph.push({\n      key: \"follow\",\n      value: {\n        type: follow ? \"follow\" : \"unfollow\",\n        accountId,\n      },\n    });\n\n    /* dataNotify.push({\n      key: accountId,\n      value: {\n        type: follow ? \"follow\" : \"unfollow\",\n      },\n    }); */\n  }\n});\n\nconst data = {\n  graph: {\n    follow: dataFollow,\n  },\n  index: {\n    graph: JSON.stringify(dataGraph) /*, \n    notify: JSON.stringify(dataNotify), */,\n  },\n};\n\nconst countKeys = (obj) => {\n  return Object.keys(obj).reduce((count, key) => {\n    const value = obj[key];\n\n    return count + JSON.parse(value).length;\n  }, 0);\n};\n\nconst containsSearchBy = (account_id) => {\n  return !account_id || !state.searchBy || account_id.includes(state.searchBy);\n};\n\nconst titles = [\"HoM\", \"CoA\", \"TC\"];\n\nconst candidatesOrdered = Object.keys(candidates)\n  .sort()\n  .reduce((obj, key) => {\n    obj[key] = candidates[key];\n    return obj;\n  }, {});\n\nconst candidatesList = Object.keys(candidatesOrdered ?? [])\n  .filter((account_id) => containsSearchBy(account_id))\n  .map((account_id) => {\n    return (\n      <div class=\"row align-items-start\">\n        <a\n          onClick={() => {\n            State.update({ userId: account_id, following: undefined });\n            return false;\n          }}\n          style={{ cursor: \"pointer\" }}\n        >\n          <div\n            class=\"col ps-0 overflow-hidden d-flex\"\n            style={{\n              gap: \"3px\",\n              backgroundColor:\n                account_id !== state.userId ? \"white\" : \"lightblue\",\n            }}\n          >\n            <div\n              class=\"overflow-hidden\"\n              style={{ maxWidth: \"100vw\" }}\n              title={account_id}\n            >\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{\n                  accountId: account_id,\n                  link: false,\n                  hideAccountId: true,\n                  hideImage: false,\n                }}\n              />\n            </div>\n            <div class=\"text-secondary text-nowrap\">\n              [{titles[candidates[account_id] - 1]}]\n            </div>\n          </div>\n        </a>\n      </div>\n    );\n  });\n\nconst commitData = (data) => {\n  Social.set(data, { force: true });\n};\n\nconst currentAccountVotes = [];\nconst userSimilarity = [];\n\nreturn (\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col col-3 align-self-start overflow-auto\">\n        <h4>Candidates ({Object.keys(candidates).length})</h4>\n        <div class=\"input-group mb-1\">\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"Search by NEAR Account ID\"\n            onChange={(e) =>\n              State.update({\n                searchBy: e.target.value,\n              })\n            }\n            value={state.searchBy}\n          />\n\n          <button\n            class=\"btn btn-outline-secondary\"\n            type=\"button\"\n            onClick={() => State.update({ searchBy: \"\" })}\n            title=\"Reset Search\"\n          >\n            X\n          </button>\n        </div>\n\n        {candidatesList}\n      </div>\n      <div class=\"col col-9 align-self-start text-start\">\n        {!state.userId && (\n          <h6 class=\"pt-3 text-center\">\n            Select a user from the left to view their voting history\n          </h6>\n        )}\n        {state.userId && (\n          <>\n            <h1 class=\"text-center\">Follow Voters by Candidate</h1>\n            <p class=\"text-center\">\n              Follow all the people who voted for you with one click.\n            </p>\n\n            <div className=\"mb-3\">\n              <button class=\"btn btn-primary\" onClick={handleSelectAll}>\n                Select {numberToFollow}\n              </button>\n              <button\n                disabled={context.loading}\n                className={`btn ${\n                  context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n                }`}\n                onClick={() => commitData(data)}\n              >\n                {context.loading ? \"Loading\" : \"Mass Follow\"}\n              </button>\n            </div>\n            <h4>\n              Voters of {state.userId}: {accounts.length}\n              {/* <span>\n                ({Object.keys(state.following).length} followed)\n              </span>{\" \"}\n              */}\n            </h4>\n            <ul className=\"list-group\">{followingsBlocks}</ul>\n\n            <div className=\"mt-2 mb-3\">\n              <CommitButton\n                disabled={context.loading}\n                className={`btn ${\n                  context.loading ? \"btn-outline-dark\" : \"btn-primary\"\n                }`}\n                data={data}\n              >\n                {context.loading ? \"Loading\" : \"Mass Follow\"}\n              </CommitButton>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n\n    <hr />\n    <p>\n      <small>\n        Data is retrieved automatically from the NEAR Indexer using Github\n        worker with a slight delay ||{\" \"}\n        <a href=\"/nearukraineguild.near/widget/NDC.Elections.Main?house=1\">\n          Election stats\n        </a>\n      </small>\n    </p>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vadim.near/widget/follow-voters", "fact_widget_deployments_id": "02fadd75ed7e1491ac3c3842179cd472", "inserted_timestamp": "2023-09-22T01:45:45.102Z", "modified_timestamp": "2023-09-22T01:45:45.102Z", "__row_index": 3}