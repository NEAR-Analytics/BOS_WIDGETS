{"tx_hash": "2mdyxvvctQdB5Xq9wr8kwJs91iq4PYUj4hrKwcPdCo6N", "action_id_social": "HBMU8X7qpsh8TJ3KGB5WRAFojPtRMU8ggLzjUduM9Byw-0-widget", "block_id": 101028824, "block_timestamp": "2023-09-13T10:59:37.974Z", "signer_id": "vadim.near", "widget_name": "elections", "source_code": "State.init({ accountId: props.accountId });\n\nconst data = fetch(\n  \"https://raw.githubusercontent.com/zavodil/near-nft-owners-list/main/output_election_votes.txt\"\n);\n\nif (data.ok) {\n  let voters = {};\n  Object.values(\n    data.body\n      .split(\"\\n\")\n      .map((line) => line.split(\"|\"))\n      .filter((data) => data.length === 5)\n  ).map((item) => {\n    const account_id = item[0];\n    if (voters[account_id] == undefined) {\n      voters[account_id] = {};\n    }\n    voters[account_id][item[3]] = item[4].toLowerCase();\n  });\n\n  State.update({ voters });\n} else return \"Loading\";\n\nconst countKeys = (obj) => {\n  return Object.keys(obj).reduce((count, key) => {\n    const value = obj[key];\n\n    return count + JSON.parse(value).length;\n  }, 0);\n};\n\nconst candidateFriendsObject = state.accountId\n  ? Social.get(`${state.accountId}/graph/follow/*`, \"final\") ?? {}\n  : {};\nconst candidateFriends = Object.keys(candidateFriendsObject);\n\nconst containsSearchBy = (account_id) => {\n  return !account_id || !state.searchBy || account_id.includes(state.searchBy);\n};\n\nconst accounts = Object.keys(state.voters ?? [])\n  .filter((account_id) => containsSearchBy(account_id))\n  .map((account_id) => {\n    return (\n      <div class=\"row align-items-start\">\n        <a\n          onClick={() => {\n            State.update({ accountId: account_id });\n            return false;\n          }}\n          style={{ cursor: \"pointer\" }}\n          title={account_id}\n        >\n          <div\n            class=\"col ps-0 overflow-hidden d-flex\"\n            style={{\n              gap: \"3px\",\n              backgroundColor:\n                account_id !== state.accountId ? \"white\" : \"lightblue\",\n            }}\n          >\n            <div class=\"overflow-hidden\" style={{ maxWidth: \"100vw\" }}>\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{\n                  accountId: account_id,\n                  link: false,\n                  hideAccountId: true,\n                  hideImage: false,\n                }}\n              />\n            </div>\n\n            <div class=\"text-secondary\">\n              ({countKeys(state.voters[account_id])})\n            </div>\n          </div>\n        </a>\n      </div>\n    );\n  });\n\nconst followerSVG = (\n  <svg\n    x=\"00px\"\n    y=\"0px\"\n    viewBox=\"0 0 256 256\"\n    enable-background=\"new 0 0 256 256\"\n    width=\"14px\"\n    height=\"14px\"\n  >\n    <g>\n      <g>\n        <path\n          fill=\"#000000\"\n          d=\"M100,20.6c0,0-49,4.5-46.6,58.4c1.4,11.6,9,70.4,47.8,80.2c4.3,0.8,37.2,9.4,55.5-44.1c1.2-3.5,16.1-40.6,2.2-67.4C155.5,41.6,143.5,17.1,100,20.6z\"\n        />\n        <path\n          fill=\"#000000\"\n          d=\"M140.2,173.9c0,0-44.4-6.1-91.1,5.5c-11.2,3.3-38.6,9.6-39,32.7c-0.4,23.1,0,23.7,0,23.7h168C178.2,235.8,139.4,220.7,140.2,173.9z\"\n        />\n        <path fill=\"#000000\" d=\"M160.5,165.5H246v25.1h-85.5V165.5z\" />\n        <path fill=\"#000000\" d=\"M190.5,135.5H216v85.3h-25.5V135.5z\" />\n      </g>\n    </g>\n  </svg>\n);\n\nconst getVotes = (house) => {\n  return (JSON.parse(state.voters[state.accountId][house]) ?? []).map(\n    (account_id) => {\n      currentAccountVotes.push(account_id);\n      return (\n        <div class=\"row align-items-start\">\n          <div class=\"col ps-2 overflow-hidden d-flex\" style={{ gap: \"3px\" }}>\n            <div class=\"overflow-hidden\" style={{ maxWidth: \"100vw\" }}>\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{\n                  accountId: account_id,\n                  link: true,\n                  hideAccountId: true,\n                  hideImage: false,\n                }}\n              />\n            </div>\n            <div>\n              {candidateFriends.includes(account_id) ? followerSVG : \"\"}\n            </div>\n          </div>\n        </div>\n      );\n    }\n  );\n};\nconst titles = [\n  \"House of Merit\",\n  \"Council Of Advisors\",\n  \"Transparency Commission\",\n];\n\nconst currentAccountVotes = [];\nconst userSimilarity = [];\nconst votes = Object.keys(state.voters[state.accountId] ?? []).map((house) => {\n  return (\n    <div class=\"col col-4 overflow-hidden\">\n      <h5>{titles[house - 1]}</h5>\n      {getVotes(house)}\n    </div>\n  );\n});\n\nObject.keys(state.voters ?? []).map((accountId) => {\n  const accountVotes = Object.keys(state.voters[accountId]).reduce(\n    (votes, house) => {\n      return [...JSON.parse(state.voters[accountId][house]), ...votes];\n    },\n    []\n  );\n\n  const commonVotes = accountVotes.filter((vote) =>\n    currentAccountVotes.includes(vote)\n  ).length;\n  const accountVotesNumber = accountVotes.length;\n  const currentAccountVotesNumber = currentAccountVotes.length;\n  if (accountId !== state.accountId) {\n    userSimilarity.push({\n      accountId,\n      similarity:\n        commonVotes / Math.max(accountVotesNumber, currentAccountVotesNumber),\n      commonVotes,\n      accountVotesNumber,\n      currentAccountVotesNumber,\n    });\n  }\n});\n\nuserSimilarity = Object.values(\n  userSimilarity.sort((a, b) => b.similarity - a.similarity)\n);\n\nconst userWithSimilarVotes = userSimilarity.slice(0, 30).map((item) => {\n  return (\n    <div class=\"col col-4 ps-2 overflow-hidden d-flex\" style={{ gap: \"3px\" }}>\n      <div class=\"overflow-hidden\" style={{ maxWidth: \"100vw\" }}>\n        <Widget\n          src=\"mob.near/widget/N.ProfileLine\"\n          props={{\n            accountId: item.accountId,\n            link: true,\n            hideAccountId: true,\n            hideImage: false,\n          }}\n        />\n      </div>\n      <div class=\"text-nowrap\">\n        {candidateFriends.includes(item.accountId) ? followerSVG : \"\"}\n        <span class=\"text-secondary\">\n          ({item.commonVotes} / {item.accountVotesNumber})\n        </span>\n      </div>\n    </div>\n  );\n});\n\nreturn (\n  <div class=\"container\">\n    <div class=\"row\">\n      <div\n        class=\"col col-3 align-self-start overflow-auto\"\n        style={{ height: \"calc(100vh - 7rem)\" }}\n      >\n        <h4>Users ({Object.keys(state.voters).length})</h4>\n        <div class=\"input-group mb-1\">\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"Search by NEAR Account ID\"\n            onChange={(e) =>\n              State.update({\n                searchBy: e.target.value,\n              })\n            }\n            value={state.searchBy}\n          />\n\n          <button\n            class=\"btn btn-outline-secondary\"\n            type=\"button\"\n            onClick={() => State.update({ searchBy: \"\" })}\n            title=\"Reset Search\"\n          >\n            X\n          </button>\n        </div>\n\n        {accounts}\n      </div>\n      <div class=\"col col-9 align-self-start text-center\">\n        {!state.accountId && (\n          <h6 class=\"pt-3\">\n            Select a user from the left to view their voting history\n          </h6>\n        )}\n        {state.accountId && (\n          <>\n            <h4>\n              Votes of{\" \"}\n              <Widget\n                src=\"mob.near/widget/N.ProfileLine\"\n                props={{\n                  accountId: state.accountId,\n                  link: true,\n                  hideAccountId: true,\n                  hideImage: false,\n                }}\n              />{\" \"}\n              <Widget\n                src=\"mob.near/widget/FollowButton\"\n                props={{ accountId: state.accountId }}\n              />\n            </h4>\n            <hr />\n\n            <div class=\"row text-start\">{votes}</div>\n\n            <h6 class=\"pt-5\">Users with similar vote sequences:</h6>\n            <div class=\"row text-start\">{userWithSimilarVotes}</div>\n            <div class=\"row text-center text-secondary mt-3\">\n              <small>(number of similar votes / number of user votes)</small>\n              <small>\n                Users followed by {state.accountId} are marked with{\" \"}\n                {followerSVG}\n              </small>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n\n    <hr />\n    <p>\n      <small>\n        Data is retrieved automatically from the NEAR Indexer using Github\n        worker with a slight delay ||{\" \"}\n        <a href=\"/nearukraineguild.near/widget/NDC.Elections.Main?house=1\">\n          Election stats\n        </a>\n      </small>\n    </p>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/vadim.near/widget/elections", "fact_widget_deployments_id": "f4931478af3cbeb05aacf0cf838c317d", "inserted_timestamp": "2023-09-13T12:49:18.162Z", "modified_timestamp": "2023-09-13T12:49:18.162Z", "__row_index": 5}