{"tx_hash": "XPzaS5ePhF7hNUAyUhABASEFK7P5eG8CuZJ5UWQYCKd", "action_id_social": "5q4PxTDXyfPpHD6FSEeEhHEGKoSTv2S4mKMv8mWVVBYu-0-widget", "block_id": 100160783, "block_timestamp": "2023-09-01T14:39:08.813Z", "signer_id": "sourcescan.near", "widget_name": "SourceScan.Upload.Github", "source_code": "const useNetwork = (mainnet, testnet) => {\n  return context.networkId === \"mainnet\" ? mainnet : testnet;\n};\n\nState.init({\n  ownerId: useNetwork(\"sourcescan.near\", \"sourcescan.testnet\"),\n  apiHost: props.apiHost || \"https://sourcsecan.2bb.dev\",\n  theme: props.theme || {\n    name: \"light\",\n    bg: \"#e3e8ef\",\n    color: \"#4c5566\",\n    border: \"#748094\",\n    hover: {\n      bg: \"#eef2f6\",\n      border: \"#d8dfe7\",\n    },\n    text: {\n      fontSize: \"16px\",\n    },\n    heading: {\n      fontSize: \"18px\",\n      fontWeight: \"600\",\n    },\n  },\n  loading: false,\n  error: false,\n  user: null,\n  repo: null,\n  branches: null,\n  selectedBranch: null,\n  selectedPage: 1,\n  commits: null,\n  selectedCommit: null,\n  key: null,\n  files: null,\n});\n\nconst Stack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 35px;\n`;\n\nconst HStack = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 25px;\n`;\n\nconst ImportStack = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 25px;\n\n  @media only screen and (max-width: 750px) {\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nconst Commit = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: space-between;\n  gap: 25px;\n  border-bottom: 1px dashed ${state.theme.border};\n\n  @media only screen and (max-width: 750px) {\n    flex-direction: column;\n    justify-content: center;\n    margin-top: 25px;\n  }\n`;\n\nconst CommitsContainer = styled.div`\n  height: 100%;\n  padding: 10px;\n  border-radius: 6px;\n  border-style: dashed;\n  border-color: ${state.theme.border};\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst CommitInfo = styled.div`\n  width: 100%;\n  display: flex;\n  padding: 15px;\n  flex-direction: row;\n  text-align: start;\n  align-items: center;\n  justify-content: space-between;\n  gap: 25px;\n\n  @media only screen and (max-width: 750px) {\n    flex-direction: column;\n    text-align: center;\n    justify-content: center;\n  }\n`;\n\nconst SearchStack = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  gap: 15px;\n\n  @media only screen and (max-width: 750px) {\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nconst Text = styled.div`\n  font-size: ${state.theme.text.fontSize};\n  font-weight: ${state.theme.text.fontWeight};\n  color: ${state.theme.color};\n`;\n\nconst MHeading = styled.div`\n  font-size: ${state.theme.heading.fontSize};\n  font-weight: ${state.theme.heading.fontWeight};\n  color: ${state.theme.color};\n  width: 250px;\n`;\n\nconst Heading = styled.div`\n  font-size: ${state.theme.heading.fontSize};\n  font-weight: ${state.theme.heading.fontWeight};\n  color: ${state.theme.color};\n`;\n\nconst Select = styled.select`\n  cursor: pointer;\n  border: 1px solid ${state.theme.border};\n  background-color: transparent;\n  border-radius: 6px;\n  height: 36px;\n  width: 200px;\n  padding-left: 10px;\n  padding-right: 10px;\n  text-align: start;\n  transition: border 0.1s ease-in-out;\n  color: ${state.theme.color};\n\n  :hover {\n    border: 1px solid ${state.theme.hover.border};\n  }\n`;\n\nconst Button = styled.button`\n  height: 36px;\n  width: 96px;\n  font-weight: 600;\n  border-radius: 6px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  border: 1px dashed ${state.theme.border};\n  color: ${state.theme.color};\n  background-color: ${state.theme.bg};\n  transition: background-color 0.1s ease-in-out;\n\n  :hover {\n    background-color: ${state.theme.hover.bg};\n  }\n`;\n\nconst RButton = styled.button`\n  background-color: ${state.theme.bg};\n  border: 1px solid ${state.theme.border};\n  width: 20px;\n  height: 20px;\n  border-radius: 50px;\n`;\n\nconst SelectedRButton = styled.button`\n  background-color: ${state.theme.border};\n  border: 1px solid ${state.theme.border};\n  width: 20px;\n  height: 20px;\n  border-radius: 50px;\n`;\n\nconst clearState = () => {\n  State.update({\n    loading: false,\n    error: false,\n    user: null,\n    repo: null,\n    branches: null,\n    selectedBranch: null,\n    selectedPage: 1,\n  });\n};\n\nconst handleSubmit = (value) => {\n  State.update({ loading: true });\n  const repoUrl = value.toLocaleLowerCase();\n  const parsed = repoUrl?.replace(\"https://github.com/\", \"\").split(\"/\");\n\n  asyncFetch(`https://api.github.com/repos/${parsed[0]}/${parsed[1]}`, {\n    method: \"GET\",\n  })\n    .then((res) => {\n      if (res.status !== 200) {\n        clearState();\n        State.update({ error: true });\n      } else {\n        State.update({\n          user: {\n            name: res.body.owner.login,\n            avatar: res.body.owner.avatar_url,\n          },\n        });\n        State.update({ repo: { name: res.body.name, url: res.body.html_url } });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nconst getBranches = async () => {\n  asyncFetch(\n    `https://api.github.com/repos/${state.user.name}/${state.repo.name}/branches`,\n    {\n      method: \"GET\",\n    }\n  )\n    .then((res) => {\n      if (res.status !== 200) {\n        clearState();\n        State.update({ error: true });\n      } else {\n        State.update({\n          branches: res.body,\n          selectedBranch:\n            res.body.find(\n              (branch) => branch.name === \"main\" || branch.name === \"master\"\n            )?.name || res.body[0].name,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nif (state.user && state.repo && !state.branches && !state.selectedBranch)\n  getBranches();\n\nconst getCommits = () => {\n  asyncFetch(\n    `https://api.github.com/repos/${state.user?.name}/${state.repo?.name}/commits?per_page=10&page=${state.selectedPage}&sha=${state.selectedBranch}`,\n    {\n      method: \"GET\",\n    }\n  )\n    .then((res) => {\n      if (res.status !== 200) {\n        clearState();\n        State.update({ error: true });\n      } else {\n        State.update({\n          commits: res.body.map((item) => {\n            const commit = item.commit;\n            return {\n              sha: item.sha,\n              message: commit.message,\n              date: new Date(commit.author.date),\n              author: commit.author.name,\n              url: item.html_url.replace(\"commit\", \"tree\"),\n            };\n          }),\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nif (state.branches && state.selectedBranch) getCommits();\n\nconst handleSelectChange = (e) => {\n  State.update({\n    selectedBranch: e.target.value,\n  });\n};\n\nconst handleCommitSelect = (commit) => {\n  if (state.selectedCommit?.sha === commit.sha) {\n    State.update({\n      selectedCommit: null,\n    });\n    return;\n  }\n\n  State.update({\n    selectedCommit: commit,\n  });\n};\n\nconst handleImport = () => {\n  if (!state.selectedCommit) return;\n\n  asyncFetch(`${state.apiHost}/api/temp/github`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      repo: state.repo?.url,\n      sha: state.selectedCommit?.sha,\n    }),\n  })\n    .then((res) => {\n      if (res.status !== 200) {\n        clearState();\n        State.update({ error: true });\n      } else {\n        State.update({\n          key: res.body.key,\n          files: res.body.files,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nconst truncateStringInMiddle = (str, maxLength) => {\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  const halfMaxLength = Math.floor(maxLength / 2);\n  const firstHalf = str.slice(0, halfMaxLength);\n  const secondHalf = str.slice(-halfMaxLength);\n\n  return firstHalf + \"...\" + secondHalf;\n};\n\nreturn (\n  <Stack>\n    {context.accountId ? (\n      !state.key && !state.files ? (\n        <>\n          <Text>Importing from GitHub</Text>\n          <SearchStack>\n            <Widget\n              src={`${state.ownerId}/widget/SourceScan.Inputs.SearchBar`}\n              props={{\n                inputWidth: \"160px\",\n                placeholder: \"Repository URL\",\n                theme: state.theme,\n                handleSubmit: handleSubmit,\n                value: state.repo,\n              }}\n            />\n          </SearchStack>\n          {!state.loading && state.repo && state.user ? (\n            <Stack>\n              <ImportStack>\n                <Widget\n                  src={`${state.ownerId}/widget/SourceScan.Common.Github.GithubLink`}\n                  props={{\n                    github: {\n                      owner: state.user?.name,\n                      repo: state.repo?.name,\n                      sha: state.selectedCommit?.sha,\n                    },\n                    theme: {\n                      color: state.theme.color,\n                      heading: state.theme.heading,\n                    },\n                  }}\n                />\n                {state.selectedCommit ? (\n                  <Button onClick={handleImport}>Import</Button>\n                ) : null}\n              </ImportStack>\n              {state.branches ? (\n                <Select onChange={(e) => handleSelectChange(e)}>\n                  {state.branches.map((branch, i) => (\n                    <option\n                      key={i}\n                      value={branch.name}\n                      selected={branch.name === state.selectedBranch}\n                    >\n                      {branch.name}\n                    </option>\n                  ))}\n                </Select>\n              ) : null}\n              {state.commits ? (\n                <CommitsContainer>\n                  {state.commits.map((commit, i) => (\n                    <Commit key={i}>\n                      {state.selectedCommit.sha === commit.sha ? (\n                        <SelectedRButton\n                          onClick={() => handleCommitSelect(commit)}\n                        />\n                      ) : (\n                        <RButton onClick={() => handleCommitSelect(commit)} />\n                      )}\n                      <Text>{commit.date.toLocaleDateString()}</Text>\n                      <CommitInfo>\n                        <MHeading>\"{commit.message}\"</MHeading>\n                        <Text>{\" by \"}</Text>\n                        <Text>{commit.author}</Text>\n                        <Heading>\n                          ({truncateStringInMiddle(commit.sha, 12)})\n                        </Heading>\n                      </CommitInfo>\n                    </Commit>\n                  ))}\n                </CommitsContainer>\n              ) : null}\n            </Stack>\n          ) : state.loading && !state.error ? (\n            <Widget\n              src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n              props={{ width: \"64px\", height: \"64px\" }}\n            />\n          ) : state.error ? (\n            <Widget\n              src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n              props={{ message: \"Invalid repository URL\" }}\n            />\n          ) : null}\n        </>\n      ) : (\n        <Widget\n          src={`${state.ownerId}/widget/SourceScan.Upload.Compile`}\n          props={{\n            key: state.key,\n            files: state.files,\n            github: {\n              repo: state.repo.name,\n              owner: state.user.name,\n              sha: state.selectedCommit?.sha,\n            },\n            theme: state.theme,\n            apiHost: state.apiHost,\n          }}\n        />\n      )\n    ) : (\n      <Text>Please login to your account</Text>\n    )}\n  </Stack>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sourcescan.near/widget/SourceScan.Upload.Github", "fact_widget_deployments_id": "cc1a3f234c73328bd115b4a17cafa49f", "inserted_timestamp": "2023-09-01T16:37:00.316Z", "modified_timestamp": "2023-09-01T16:37:00.316Z", "__row_index": 0}