{"tx_hash": "2rt5DmnceoZkxKsA3JAVhWo2e71atnbZsVBMhJX48c3v", "action_id_social": "8gDzSpQeQL9Ar7AauSWfKfYUC9b4RWQ8gNYaA7516FoX-0-widget", "block_id": 107295745, "block_timestamp": "2023-12-06T16:58:50.812Z", "signer_id": "sourcescan.near", "widget_name": "SourceScan.Verify.Compile", "source_code": "const useNetwork = (mainnet, testnet) => {\n  return context.networkId === \"mainnet\" ? mainnet : testnet;\n};\n\nState.init({\n  appUrl: props.appUrl,\n  apiHost: props.apiHost,\n  ownerId: useNetwork(\"sourcescan.near\", \"sourcescan.testnet\"),\n  theme: props.theme || {\n    name: \"light\",\n    bg: \"#e3e8ef\",\n    color: \"#4c5566\",\n    border: \"#748094\",\n    hover: {\n      bg: \"#eef2f6\",\n      border: \"#d8dfe7\",\n    },\n    text: {\n      fontSize: \"16px\",\n    },\n    heading: {\n      fontSize: \"18px\",\n      fontWeight: \"600\",\n    },\n  },\n  github: props.github,\n  accessToken: props.accessToken,\n  files: props.files,\n  entryPoint: null,\n  lang: \"rust\",\n  loading: false,\n  verifyLoading: false,\n  verifyError: null,\n  verifySuccess: null,\n  error: false,\n  gatewayKey: null,\n  verification: null,\n  builderImage: null,\n  dockerTutorial: false,\n  uploadToIpfs: false,\n});\n\nconst clearState = () => {\n  State.update({\n    entryPoint: null,\n    lang: \"rust\",\n    loading: false,\n    error: false,\n    gatewayKey: null,\n    verification: null,\n    builderImage: null,\n    dockerTutorial: false,\n    uploadToIpfs: false,\n    verifyError: null,\n    verifyLoading: false,\n  });\n};\n\nif (!props.github) {\n  <Widget\n    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n    props={{\n      message:\n        \"Please provide github: {repo: string, owner: string, sha: string} to the component\",\n    }}\n  />;\n} else if (!props.accessToken) {\n  <Widget\n    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n    props={{\n      message: \"Please provide accessToken: string to the component\",\n    }}\n  />;\n} else if (!props.files) {\n  <Widget\n    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n    props={{\n      message: \"Please provide files: string[] to the component\",\n    }}\n  />;\n}\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst EPContainer = styled.div`\n  height: 100%;\n  padding: 10px;\n  border-radius: 6px;\n  border-style: dashed;\n  border-color: ${state.theme.border};\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n  }\n`;\n\nconst EntryPoint = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: start;\n  align-items: center;\n  justify-content: start;\n  gap: 25px;\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\n\nconst RButton = styled.button`\n  background-color: ${state.theme.bg};\n  border: 1px solid ${state.theme.border};\n  width: 20px;\n  height: 20px;\n  border-radius: 50px;\n`;\n\nconst SelectedRButton = styled.button`\n  background-color: ${state.theme.border};\n  border: 1px solid ${state.theme.border};\n  width: 20px;\n  height: 20px;\n  border-radius: 50px;\n`;\n\nconst Text = styled.div`\n  max-width: 350;\n  font-size: ${state.theme.text.fontSize};\n  font-weight: ${state.theme.text.fontWeight};\n  color: ${state.theme.color};\n\n  @media only screen and (max-width: 750px) {\n    max-width: 200px;\n  }\n`;\n\nconst Heading = styled.div`\n  font-size: ${state.theme.heading.fontSize};\n  font-weight: ${state.theme.heading.fontWeight};\n  color: ${state.theme.color};\n\n  @media only screen and (max-width: 750px) {\n    width: 200px;\n  }\n`;\n\nconst Stack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 55px;\n`;\n\nconst DeployStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 25px;\n`;\n\nconst VerificationStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 25px;\n\n  @media only screen and (max-width: 750px) {\n    width: 20%;\n  }\n`;\n\nconst HStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 25px;\n`;\n\nconst HeadingStack = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 15%;\n`;\n\nconst Select = styled.select`\n  cursor: pointer;\n  border: 1px solid ${state.theme.border};\n  background-color: transparent;\n  border-radius: 6px;\n  height: 36px;\n  width: 150px;\n  padding-left: 10px;\n  padding-right: 10px;\n  text-align: start;\n  transition: border 0.1s ease-in-out;\n  color: ${state.theme.color};\n\n  :hover {\n    border: 1px solid ${state.theme.hover.border};\n  }\n`;\n\nconst Checkbox = styled.input`\n  accent-color: ${state.theme.primaryColor};\n  width: 20px;\n  height: 20px;\n  border: 2px solid ${state.theme.border};\n  border-radius: 4px;\n  transition: border-color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n\n  :checked {\n    background-color: ${state.theme.checked.bg};\n    border-color: ${state.theme.checked.border};\n  }\n\n  :hover {\n    border-color: ${state.theme.hover.border};\n  }\n\n  :focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${state.theme.focus.shadow};\n  }\n`;\n\nconst Button = styled.button`\n  font-weight: 600;\n  border-radius: 6px;\n  padding: 15px;\n  border: 1px dashed ${state.theme.border};\n  color: ${state.theme.color};\n  background-color: ${state.theme.bg};\n  transition: background-color 0.1s ease-in-out;\n\n  :hover {\n    background-color: ${state.theme.hover.bg};\n  }\n`;\n\nconst TooltipText = styled.div`\n  cursor: pointer;\n  font-size: ${state.theme.text.fontSize};\n  color: ${state.theme.color};\n`;\n\nconst A = styled.a`\n  text-decoration: none;\n  color: ${state.theme.color};\n\n  :hover {\n    text-decoration: none;\n    color: ${state.theme.color};\n  }\n`;\n\nconst handleEntryPointSelect = (file) => {\n  if (state.loading || state.gatewayKey || state.error) return;\n\n  if (state.entryPoint === file) {\n    State.update({\n      entryPoint: null,\n    });\n    return;\n  }\n\n  State.update({ entryPoint: file });\n};\n\nconst handleLangChange = (e) => {\n  if (state.loading || state.gatewayKey || state.error) return;\n\n  State.update({ lang: e.target.value });\n};\n\nconst handleKeyGen = () => {\n  if (state.loading || state.gatewayKey || !props.contractId) return;\n\n  State.update({\n    loading: true,\n  });\n\n  asyncFetch(`${state.apiHost}/api/gateway/genKey`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      accessToken: state.accessToken,\n      lang: state.lang,\n      entryPoint: state.entryPoint,\n      github: state.github,\n      accountId: props.contractId,\n    }),\n  })\n    .then((res) => {\n      if (res.status !== 200) {\n        State.update({ error: true });\n      } else {\n        State.update({\n          gatewayKey: res.body,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nconst getBuilderImageInfo = () => {\n  if (state.loading || state.error || !props.contractId) return;\n\n  State.update({\n    loading: true,\n  });\n\n  asyncFetch(`${state.apiHost}/api/verify/builderInfo`, {\n    method: \"GET\",\n  })\n    .then((res) => {\n      if (res.status !== 200) {\n        clearState();\n        State.update({ error: true });\n      } else {\n        State.update({\n          builderImage: res.body.builderImage,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nconst truncateStringInMiddle = (str, maxLength) => {\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  const halfMaxLength = Math.floor(maxLength / 2);\n  const firstHalf = str.slice(0, halfMaxLength);\n  const secondHalf = str.slice(-halfMaxLength);\n\n  return firstHalf + \"...\" + secondHalf;\n};\n\nconst handleVerificationSelect = (verification) => {\n  if (verification === \"Docker\") getBuilderImageInfo();\n\n  State.update({\n    verification: verification,\n  });\n};\n\nconst truncateAfterSplit = (str, maxLength) => {\n  const [firstPart, secondPart] = str.split(\"@\");\n\n  return firstPart + \"@\" + truncateStringInMiddle(secondPart, maxLength);\n};\n\nconst handleDockerCheckBoxChange = () => {\n  State.update({ dockerTutorial: !state.dockerTutorial });\n};\n\nconst handleIPFSCheckBoxChange = () => {\n  State.update({ uploadToIpfs: !state.uploadToIpfs });\n};\n\nconst verify = () => {\n  if (state.verifyLoading || !props.contractId) return;\n\n  State.update({\n    verifyLoading: true,\n  });\n\n  asyncFetch(`${state.apiHost}/api/verify/${state.lang}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.accessToken}`,\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      accountId: props.contractId,\n      networkId: context.networkId,\n      entryPoint: state.entryPoint,\n      uploadToIpfs: state.uploadToIpfs,\n      accountId: props.contractId,\n    }),\n  })\n    .then((res) => {\n      console.log(res);\n      if (res.body.message !== \"Contract verified successfully\") {\n        State.update({\n          verifyError: res.body.message ? res.body.message : \"Error ocurred\",\n        });\n      } else {\n        State.update({\n          verifySuccess: res.body.message,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ verifyLoading: false });\n    });\n};\n\nreturn (\n  <Stack>\n    <Heading>3. Select entry point</Heading>\n    <EPContainer>\n      {state.files.map((file, i) => (\n        <EntryPoint key={i}>\n          {state.entryPoint === file ? (\n            <SelectedRButton onClick={() => handleEntryPointSelect(file)} />\n          ) : (\n            <RButton onClick={() => handleEntryPointSelect(file)} />\n          )}\n          <Heading>{file}</Heading>\n        </EntryPoint>\n      ))}\n    </EPContainer>\n    {state.entryPoint ? (\n      <>\n        <Heading>4. What to compile</Heading>\n        <Select onChange={(e) => handleLangChange(e)}>\n          <option\n            value={\"rust\"}\n            selected={state.lang === \"rust\"}\n            disabled={state.loading || state.error}\n          >\n            Rust\n          </option>\n          <option value={\"ts\"} selected={state.lang === \"ts\"} disabled={true}>\n            TypeScript\n          </option>\n        </Select>\n        <Heading>5. How to verify</Heading>\n        <VerificationStack>\n          <div onClick={() => handleVerificationSelect(\"Docker\")}>\n            <Widget\n              src={`${state.ownerId}/widget/SourceScan.Common.Icons.DockerIcon`}\n              props={{\n                width: \"40px\",\n                height: \"40px\",\n              }}\n            />\n          </div>\n          <Heading>or</Heading>\n          <div onClick={() => handleVerificationSelect(\"FAK\")}>\n            <Widget\n              src={`${state.ownerId}/widget/SourceScan.Common.Icons.KeyIcon`}\n              props={{\n                width: \"32px\",\n                height: \"32px\",\n              }}\n            />\n          </div>\n        </VerificationStack>\n        {state.verification === \"Docker\" ? (\n          <>\n            {state.loading ? (\n              <Widget\n                src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n                props={{ width: \"20px\", height: \"20px\" }}\n              />\n            ) : (\n              <>\n                <HStack>\n                  <Text>{\"Builder image: \"}</Text>\n                  <OverlayTrigger\n                    key={\"top\"}\n                    placement={\"top\"}\n                    overlay={<Tooltip id={`tooltip-top`}>Copy</Tooltip>}\n                  >\n                    <TooltipText\n                      onClick={() => {\n                        clipboard.writeText(state.builderImage);\n                      }}\n                    >\n                      {truncateAfterSplit(state.builderImage, 8)}\n                    </TooltipText>\n                  </OverlayTrigger>\n                </HStack>\n                <Stack>\n                  <HStack>\n                    {state.dockerTutorial ? (\n                      <SelectedRButton onClick={handleDockerCheckBoxChange} />\n                    ) : (\n                      <RButton onClick={handleDockerCheckBoxChange} />\n                    )}\n                    <Text>All steps done from</Text>\n                    <a\n                      href={\n                        \"https://docs.sourcescan.dev/tutorials/docker-verification\"\n                      }\n                      target={\"_blank\"}\n                    >\n                      tutorial\n                    </a>\n                  </HStack>\n                  <HStack>\n                    {state.uploadToIpfs ? (\n                      <SelectedRButton\n                        onClick={() => handleIPFSCheckBoxChange()}\n                      />\n                    ) : (\n                      <RButton onClick={() => handleIPFSCheckBoxChange()} />\n                    )}\n                    <Text>Upload to IPFS</Text>\n                  </HStack>\n                </Stack>\n                {state.dockerTutorial ? (\n                  <Button onClick={verify} disabled={state.verifyLoading}>\n                    {!state.verifyLoading ? (\n                      \"Verify\"\n                    ) : (\n                      <Widget\n                        src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n                        props={{ width: \"20px\", height: \"20px\" }}\n                      />\n                    )}\n                  </Button>\n                ) : null}\n                {state.verifyError ? (\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n                    props={{\n                      message: state.verifyError,\n                    }}\n                  />\n                ) : state.verifySuccess ? (\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.SuccessAlert`}\n                    props={{\n                      message: state.verifySuccess,\n                    }}\n                  />\n                ) : null}\n              </>\n            )}\n          </>\n        ) : state.verification === \"FAK\" ? (\n          state.gatewayKey ? (\n            <DeployStack>\n              <A\n                href={`${state.appUrl}/gateway?key=${encodeURIComponent(\n                  state.gatewayKey\n                )}`}\n                target={\"_blank\"}\n              >\n                <Button>Gateway</Button>\n              </A>\n            </DeployStack>\n          ) : (\n            <>\n              <Button onClick={handleKeyGen} disabled={state.loading}>\n                {!state.loading ? (\n                  \"Generate Key\"\n                ) : (\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n                    props={{ width: \"20px\", height: \"20px\" }}\n                  />\n                )}\n              </Button>\n              {state.error ? (\n                <Widget\n                  src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n                  props={{\n                    message: \"Error ocurred during key generation\",\n                  }}\n                />\n              ) : null}\n            </>\n          )\n        ) : null}\n      </>\n    ) : null}\n  </Stack>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sourcescan.near/widget/SourceScan.Verify.Compile", "fact_widget_deployments_id": "b98a5f85741f91e05e64fe870c05ea30", "inserted_timestamp": "2023-12-06T18:51:26.895Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}