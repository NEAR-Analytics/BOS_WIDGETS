{"tx_hash": "4zpnRpLAZneopo7cr9DpNaL3U5YHck2WSypcWcX4BfgG", "action_id_social": "73TTEF7t8rh63iJUrZQjq3N41zFGWN2qWp3eLFoeFQpT-0-widget", "block_id": 100331089, "block_timestamp": "2023-09-03T22:09:45.763Z", "signer_id": "sourcescan.near", "widget_name": "SourceScan.Upload.Compile", "source_code": "const useNetwork = (mainnet, testnet) => {\n  return context.networkId === \"mainnet\" ? mainnet : testnet;\n};\n\nState.init({\n  appUrl: useNetwork(\n    \"https://sourcescan.2bb.dev\",\n    \"https://sourcescan.testnet.2bb.dev\"\n  ),\n  apiHost: props.apiHost || \"https://sourcescan-api.2bb.dev\",\n  ownerId: useNetwork(\"sourcescan.near\", \"sourcescan.testnet\"),\n  theme: props.theme || {\n    name: \"light\",\n    bg: \"#e3e8ef\",\n    color: \"#4c5566\",\n    border: \"#748094\",\n    hover: {\n      bg: \"#eef2f6\",\n      border: \"#d8dfe7\",\n    },\n    text: {\n      fontSize: \"16px\",\n    },\n    heading: {\n      fontSize: \"18px\",\n      fontWeight: \"600\",\n    },\n  },\n  github: props.github,\n  key: props.key,\n  files: props.files,\n  entryPoint: null,\n  lang: \"rust\",\n  loading: false,\n  error: false,\n  gatewayKey: null,\n});\n\nconst clearState = () => {\n  State.update({\n    entryPoint: null,\n    lang: \"rust\",\n    loading: false,\n    error: false,\n    gatewayKey: null,\n  });\n};\n\nif (!props.github) {\n  <Widget\n    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n    props={{\n      message:\n        \"Please provide github: {repo: string, owner: string, sha: string} to the component\",\n    }}\n  />;\n} else if (!props.key) {\n  <Widget\n    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n    props={{\n      message: \"Please provide key: string to the component\",\n    }}\n  />;\n} else if (!props.files) {\n  <Widget\n    src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n    props={{\n      message: \"Please provide files: string[] to the component\",\n    }}\n  />;\n}\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst EPContainer = styled.div`\n  height: 100%;\n  padding: 10px;\n  border-radius: 6px;\n  border-style: dashed;\n  border-color: ${state.theme.border};\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: space-between;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n  }\n`;\n\nconst EntryPoint = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: start;\n  align-items: center;\n  justify-content: start;\n  gap: 25px;\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\n\nconst RButton = styled.button`\n  background-color: ${state.theme.bg};\n  border: 1px solid ${state.theme.border};\n  width: 20px;\n  height: 20px;\n  border-radius: 50px;\n`;\n\nconst SelectedRButton = styled.button`\n  background-color: ${state.theme.border};\n  border: 1px solid ${state.theme.border};\n  width: 20px;\n  height: 20px;\n  border-radius: 50px;\n`;\n\nconst Text = styled.div`\n  max-width: 350;\n  font-size: ${state.theme.text.fontSize};\n  font-weight: ${state.theme.text.fontWeight};\n  color: ${state.theme.color};\n\n  @media only screen and (max-width: 750px) {\n    max-width: 200px;\n  }\n`;\n\nconst Heading = styled.div`\n  font-size: ${state.theme.heading.fontSize};\n  font-weight: ${state.theme.heading.fontWeight};\n  color: ${state.theme.color};\n\n  @media only screen and (max-width: 750px) {\n    width: 200px;\n  }\n`;\n\nconst Stack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 35px;\n`;\n\nconst DeployStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 25px;\n`;\n\nconst HStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Select = styled.select`\n  cursor: pointer;\n  border: 1px solid ${state.theme.border};\n  background-color: transparent;\n  border-radius: 6px;\n  height: 36px;\n  width: 150px;\n  padding-left: 10px;\n  padding-right: 10px;\n  text-align: start;\n  transition: border 0.1s ease-in-out;\n  color: ${state.theme.color};\n\n  :hover {\n    border: 1px solid ${state.theme.hover.border};\n  }\n`;\n\nconst Button = styled.button`\n  font-weight: 600;\n  border-radius: 6px;\n  padding: 15px;\n  border: 1px dashed ${state.theme.border};\n  color: ${state.theme.color};\n  background-color: ${state.theme.bg};\n  transition: background-color 0.1s ease-in-out;\n\n  :hover {\n    background-color: ${state.theme.hover.bg};\n  }\n`;\n\nconst A = styled.a`\n  text-decoration: none;\n  color: ${state.theme.color};\n\n  :hover {\n    text-decoration: none;\n    color: ${state.theme.color};\n  }\n`;\n\nconst handleEntryPointSelect = (file) => {\n  if (state.loading || state.gatewayKey || state.error) return;\n\n  if (state.entryPoint === file) {\n    State.update({\n      entryPoint: null,\n    });\n    return;\n  }\n\n  State.update({ entryPoint: file });\n};\n\nconst handleLangChange = (e) => {\n  if (state.loading || state.gatewayKey || state.error) return;\n\n  State.update({ lang: e.target.value });\n};\n\nconst handleKeyGen = () => {\n  if (state.loading || state.gatewayKey || state.error) return;\n\n  State.update({\n    loading: true,\n  });\n\n  asyncFetch(`${state.apiHost}/api/gateway/genKey`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      key: state.key,\n      lang: state.lang,\n      entry_point: state.entryPoint,\n      github: state.github,\n      account_id: context.accountId,\n    }),\n  })\n    .then((res) => {\n      if (res.status !== 200) {\n        clearState();\n        State.update({ error: true });\n      } else {\n        State.update({\n          gatewayKey: res.body,\n        });\n      }\n    })\n    .finally(() => {\n      State.update({ loading: false });\n    });\n};\n\nconst truncateStringInMiddle = (str, maxLength) => {\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  const halfMaxLength = Math.floor(maxLength / 2);\n  const firstHalf = str.slice(0, halfMaxLength);\n  const secondHalf = str.slice(-halfMaxLength);\n\n  return firstHalf + \"...\" + secondHalf;\n};\n\nconst customUriEncode = (str) => {\n  const allowedChars =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~\";\n\n  let encodedStr = \"\";\n\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n\n    if (allowedChars.indexOf(char) !== -1) {\n      encodedStr += char;\n    } else {\n      let hexValue = char.charCodeAt(0).toString(16).toUpperCase();\n      encodedStr += \"%\" + (hexValue.length < 2 ? \"0\" + hexValue : hexValue);\n    }\n  }\n\n  return encodedStr;\n};\n\nreturn (\n  <Stack>\n    <Heading>Select entry point</Heading>\n    <EPContainer>\n      {state.files.map((file, i) => (\n        <EntryPoint key={i}>\n          {state.entryPoint === file ? (\n            <SelectedRButton onClick={() => handleEntryPointSelect(file)} />\n          ) : (\n            <RButton onClick={() => handleEntryPointSelect(file)} />\n          )}\n          <Heading>{file}</Heading>\n        </EntryPoint>\n      ))}\n    </EPContainer>\n    {state.entryPoint ? (\n      <>\n        <Heading>What to compile</Heading>\n        <Select onChange={(e) => handleLangChange(e)}>\n          <option\n            value={\"rust\"}\n            selected={state.lang === \"rust\"}\n            disabled={state.loading || state.error}\n          >\n            Rust\n          </option>\n          <option\n            value={\"ts\"}\n            selected={state.lang === \"ts\"}\n            disabled={state.loading || state.error}\n          >\n            TypeScript\n          </option>\n        </Select>\n        {state.gatewayKey ? (\n          <DeployStack>\n            <Heading>\n              You will be redirected to another site for compilation and\n              deployment\n            </Heading>\n            <A\n              href={`${state.appUrl}/gateway?key=${customUriEncode(\n                state.gatewayKey\n              )}`}\n              target={\"_blank\"}\n            >\n              <Button>Gateway</Button>\n            </A>\n          </DeployStack>\n        ) : (\n          <Button onClick={handleKeyGen} disabled={state.loading}>\n            {!state.loading ? (\n              \"Generate Key\"\n            ) : (\n              <Widget\n                src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n                props={{ width: \"20px\", height: \"20px\" }}\n              />\n            )}\n          </Button>\n        )}\n      </>\n    ) : null}\n  </Stack>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sourcescan.near/widget/SourceScan.Upload.Compile", "fact_widget_deployments_id": "98853a2c297bf8b3180e3586bbfe5b95", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}