{"tx_hash": "FFeKro9xU5D1Wf6xeXr3jehHFGAGSJyoNJK7pGUTYYYj", "action_id_social": "HE4Fedcx7r55Ey65V7phgUXzLDpjNn9pohdahXhEbFUx-0-widget", "block_id": 110964340, "block_timestamp": "2024-01-21T13:34:38.274Z", "signer_id": "sourcescan.near", "widget_name": "SourceScan.Contracts.Info", "source_code": "const useNetwork = (mainnet, testnet) => {\n  return context.networkId === 'mainnet' ? mainnet : testnet\n}\n\nState.init({\n  verifierId:\n    props.verifierId || useNetwork('sourcescan.near', 'sourcescan.testnet'),\n  ownerId: useNetwork('sourcescan.near', 'sourcescan.testnet'),\n  apiHost: props.apiHost || 'https://sourcescan-api.2bb.dev',\n  appUrl:\n    props.appUrl ||\n    useNetwork('https://sourcescan.dev', 'https://testnet.sourcescan.dev'),\n  rpcUrl: useNetwork(\n    'https://rpc.mainnet.near.org',\n    'https://rpc.testnet.near.org'\n  ),\n  theme: props.theme || {\n    bg: '#e3e8ef',\n    color: '#4c5566',\n    border: '1px dashed #748094',\n    text: {\n      fontSize: '16px',\n    },\n    heading: {\n      fontSize: '18px',\n      fontWeight: '600',\n      underline: true,\n    },\n  },\n  contract: null,\n  wasm: { value: null, error: false },\n  tx: { value: null, error: false },\n})\n\nconst getContract = async () => {\n  Near.asyncView(state.verifierId, 'get_contract', {\n    account_id: props.contractId,\n  })\n    .then((res) => {\n      State.update({\n        contract: res,\n      })\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n}\n\nif (!props.contractId) {\n  return (\n    <Widget\n      src={`${state.ownerId}/widget/SourceScan.Common.ErrorAlert`}\n      props={{ message: 'Please provide a contractId to component' }}\n    />\n  )\n} else {\n  getContract()\n}\n\nconst Main = styled.div`\n  background-color: ${state.theme.bg};\n  padding: 18px;\n  color: ${state.theme.color};\n  border: ${state.theme.border};\n  border-radius: 16px;\n  display: flex;\n  flex-direction: column;\n  text-align: start;\n  align-items: start;\n  justify-content: start;\n  gap: 30px;\n  width: 50%;\n\n  @media only screen and (max-width: 750px) {\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    width: 95%;\n  }\n`\n\nconst Stack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: start;\n  text-align: start;\n  gap: 8px;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n  }\n`\n\nconst CStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 64px;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n  }\n`\n\nconst HStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: start;\n  align-items: center;\n  text-align: start;\n  gap: 5px;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n  }\n`\n\nconst CHStack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n  }\n`\n\nconst UHeading = styled.div`\n  font-size: ${state.theme.heading.fontSize};\n  font-weight: ${state.theme.heading.fontWeight};\n  text-decoration: ${state.theme.heading.underline ? 'underline' : 'none'};\n  -webkit-text-decoration-line: ${state.theme.heading.underline\n    ? 'underline'\n    : 'none'};\n  text-underline-offset: 6px;\n  text-decoration-style: dashed;\n  text-decoration-color: gray;\n`\n\nconst TooltipText = styled.div`\n  cursor: pointer;\n  font-size: ${state.theme.text.fontSize};\n  color: ${state.theme.color};\n`\n\nconst Heading = styled.div`\n  font-size: ${state.theme.heading.fontSize};\n  font-weight: ${state.theme.heading.fontWeight};\n`\n\nconst Desktop = styled.div`\n  display: flex;\n\n  @media only screen and (max-width: 750px) {\n    display: none;\n  }\n`\n\nconst Mobile = styled.div`\n  display: none;\n\n  @media only screen and (max-width: 750px) {\n    display: flex;\n  }\n`\n\nconst Text = styled.div`\n  font-size: ${state.theme.text.fontSize};\n  color: ${state.theme.color};\n`\n\nconst Center = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media only screen and (max-width: 750px) {\n    width: 90%;\n  }\n`\n\nconst EPContainer = styled.div`\n  max-width: 100%;\n\n  @media only screen and (max-width: 750px) {\n    max-width: 90%;\n  }\n`\n\nconst A = styled.a`\n  text-decoration: none;\n  color: ${state.theme.color};\n\n  :hover {\n    text-decoration: none;\n    color: ${state.theme.color};\n  }\n`\n\nconst truncateStringInMiddle = (str, maxLength) => {\n  if (str.length <= maxLength) {\n    return str\n  }\n\n  const halfMaxLength = Math.floor(maxLength / 2)\n  const firstHalf = str.slice(0, halfMaxLength)\n  const secondHalf = str.slice(-halfMaxLength)\n\n  return firstHalf + '...' + secondHalf\n}\n\nconst truncateAfterSplit = (str, maxLength) => {\n  const [firstPart, secondPart] = str.split('@')\n\n  return firstPart + '@' + truncateStringInMiddle(secondPart, maxLength)\n}\n\nconst compareCodeHash = () => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      id: 'dontcare',\n      method: 'query',\n      params: {\n        request_type: 'view_code',\n        finality: 'final',\n        account_id: props.contractId,\n      },\n    }),\n  }\n  asyncFetch(state.rpcUrl, options)\n    .then((rpc_res) => {\n      if (rpc_res.body.result.hash === state.contract.code_hash) {\n        State.update({\n          wasm: {\n            value: true,\n            error: false,\n          },\n        })\n      } else {\n        State.update({\n          wasm: {\n            value: false,\n            error: false,\n          },\n        })\n      }\n    })\n    .catch((err) => {\n      State.update({\n        wasm: {\n          value: null,\n          error: true,\n        },\n      })\n      console.log(err)\n    })\n}\n\nif (state.contract) {\n  compareCodeHash()\n}\n\nconst formatSourceCodePath = (path) => {\n  let segments = path.split('/')\n\n  segments.shift()\n  segments.pop()\n  if (state.contract.lang === 'rust') {\n    segments.push('src', 'lib.rs')\n  }\n\n  return segments.join('/')\n}\n\nconst [showComments, setShowComments] = useState(false)\nconst handleCommentsClick = () => {\n  setShowComments((prev) => !prev)\n}\n\nreturn (\n  <Center>\n    {!state.contract ? (\n      <Widget\n        src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n        props={{ width: '64px', height: '64px' }}\n      />\n    ) : (\n      <CStack>\n        <Main>\n          <CHStack>\n            <Heading>{props.contractId}</Heading>\n            <A\n              href={`https://${\n                context.networkId === 'mainnet' ? '' : 'testnet.'\n              }nearblocks.io/address/${props.contractId}`}\n              target={'_blank'}\n            >\n              <Widget\n                src={`${state.ownerId}/widget/SourceScan.Common.Icons.LinkIcon`}\n                props={{ width: '18px', height: '18px' }}\n              />\n            </A>\n          </CHStack>\n          <CStack>\n            <Widget\n              src={`${state.ownerId}/widget/SourceScan.Web3.Contract.Social`}\n              props={{\n                contractId: props.contractId,\n                contract: state.contract,\n                onCommentsClick: handleCommentsClick,\n              }}\n            />\n            {showComments ? (\n              <>\n                <Widget\n                  src={`${state.ownerId}/widget/SourceScan.Web3.CommentInput`}\n                  props={{\n                    contractId: props.contractId,\n                  }}\n                />\n                <Widget\n                  src={`${state.ownerId}/widget/SourceScan.Web3.Contract.Comments`}\n                  props={{\n                    contractId: props.contractId,\n                    contract: state.contract,\n                  }}\n                />\n              </>\n            ) : null}\n          </CStack>\n        </Main>\n        <Main>\n          <Stack>\n            <UHeading>Security Checks</UHeading>\n            <Stack>\n              <HStack>\n                {state.wasm.value === null ? (\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.Spinner`}\n                  />\n                ) : state.wasm.value ? (\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.Icons.CheckIcon`}\n                    props={{\n                      width: '20px',\n                      height: '20px',\n                      tooltip: {\n                        placement: props.placement,\n                        label: 'Approved',\n                      },\n                    }}\n                  />\n                ) : (\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.Icons.CrossIcon`}\n                    props={{\n                      width: '20px',\n                      height: '20px',\n                      tooltip: {\n                        placement: props.placement,\n                        label: state.wasm.error ? 'Error' : 'Not approved',\n                      },\n                    }}\n                  />\n                )}\n                <Text>\n                  Wasm Code {state.wasm.value ? 'Matches' : 'Mismatches'}\n                </Text>\n              </HStack>\n            </Stack>\n          </Stack>\n          <Stack>\n            <UHeading>Source Code</UHeading>\n            <HStack>\n              <Text>Github</Text>\n              <A\n                href={`https://github.com/${state.contract.github.owner}/${\n                  state.contract.github.repo\n                }/tree/${state.contract.github.sha}/${formatSourceCodePath(\n                  state.contract.entry_point\n                )}`}\n                target={'_blank'}\n              >\n                <Widget\n                  src={`${state.ownerId}/widget/SourceScan.Common.Icons.LinkIcon`}\n                  props={{ width: '18px', height: '18px' }}\n                />\n              </A>\n            </HStack>\n            {state.contract.cid ? (\n              <HStack>\n                <Text>Code Viewer(IPFS)</Text>\n                <A\n                  href={`${state.appUrl}/code/${props.contractId}`}\n                  target={'_blank'}\n                >\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.Icons.LinkIcon`}\n                    props={{ width: '18px', height: '18px' }}\n                  />\n                </A>\n              </HStack>\n            ) : null}\n          </Stack>\n          <Stack>\n            <UHeading>Code hash</UHeading>\n            <Desktop>\n              <Text>{state.contract.code_hash}</Text>\n            </Desktop>\n            <Mobile>\n              <Text>\n                {truncateStringInMiddle(state.contract.code_hash, 12)}\n              </Text>\n            </Mobile>\n          </Stack>\n          <Stack>\n            <UHeading>Builder image</UHeading>\n            <OverlayTrigger\n              key={'top'}\n              placement={'top'}\n              overlay={<Tooltip id={`tooltip-top`}>Copy</Tooltip>}\n            >\n              <TooltipText\n                onClick={() => {\n                  clipboard.writeText(state.contract.builder_image)\n                }}\n              >\n                {truncateAfterSplit(state.contract.builder_image, 8)}\n              </TooltipText>\n            </OverlayTrigger>\n          </Stack>\n          <Stack>\n            <UHeading>Entry Point</UHeading>\n            <EPContainer>\n              <Text>{state.contract.entry_point}</Text>\n            </EPContainer>\n          </Stack>\n          <Stack>\n            <UHeading>Lang</UHeading>\n            <Text>{state.contract.lang === 'ts' ? 'TypeScript' : 'Rust'}</Text>\n          </Stack>\n          {state.contract.cid ? (\n            <Stack>\n              <UHeading>IPFS</UHeading>\n              <HStack>\n                <Desktop>\n                  <Text>{state.contract.cid}</Text>\n                </Desktop>\n                <Mobile>\n                  <Text>{truncateStringInMiddle(state.contract.cid, 8)}</Text>\n                </Mobile>\n                <A\n                  href={`${state.apiHost}/ipfs/${state.contract.cid}`}\n                  target={'_blank'}\n                >\n                  <Widget\n                    src={`${state.ownerId}/widget/SourceScan.Common.Icons.LinkIcon`}\n                    props={{ width: '18px', height: '18px' }}\n                  />\n                </A>\n              </HStack>\n            </Stack>\n          ) : null}\n          {state.contract.github ? (\n            <Stack>\n              <UHeading>Github</UHeading>\n              <Widget\n                src={`${state.ownerId}/widget/SourceScan.Common.Github.GithubLink`}\n                props={{\n                  github: state.contract.github,\n                  theme: {\n                    color: state.theme.color,\n                    heading: {\n                      fontSize: state.heading.fontSize,\n                      fontWeight: '800',\n                    },\n                  },\n                }}\n              />\n            </Stack>\n          ) : null}\n        </Main>\n      </CStack>\n    )}\n  </Center>\n)\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sourcescan.near/widget/SourceScan.Contracts.Info", "fact_widget_deployments_id": "1ff199938338b8eed55bd2d4a6c27909", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}