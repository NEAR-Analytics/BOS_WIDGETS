{"tx_hash": "7eezNeeu3Q8yurd33oDStEEU6zd4f9nwoKtmNya4wPQY", "action_id_social": "Gj147yJWG29AAU6Kc4KrkBv1nEzpJKwXRbeheAknxR48-0-widget", "block_id": 106208967, "block_timestamp": "2023-11-21T13:48:49.700Z", "signer_id": "sourcescan.near", "widget_name": "SourceScan", "source_code": "const limits = [5, 10, 20, 50];\n\nconst font = fetch(\n  \"https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap\"\n).body;\n\nif (!font) {\n  return null;\n}\n\nconst getConfig = (network) => {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        app: \"https://sourcescan.2bb.dev\",\n        ownerId: \"sourcescan.near\",\n        rpcUrl: \"https://rpc.mainnet.near.org\",\n        contractId: \"sourcescan.near\",\n        apiHost: \"https://sourcescan-api.2bb.dev\",\n      };\n    case \"testnet\":\n      return {\n        app: \"https://sourcescan.testnet.2bb.dev\",\n        ownerId: \"sourcescan.testnet\",\n        rpcUrl: \"https://rpc.testnet.near.org\",\n        contractId: \"sourcescan.testnet\",\n        apiHost: \"https://sourcescan-api.2bb.dev\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n};\n\nState.init({\n  theme: Storage.privateGet(\"theme\") || \"light\",\n  from_index: 0,\n  limit: limits[0],\n  contracts: null,\n  pages: 1,\n  selectedPage: 1,\n  search: \"\",\n  config: getConfig(context.networkId),\n});\n\nconst dark = {\n  name: \"dark\",\n  bg: \"#28282b\",\n  color: \"#e6eaee\",\n  border: \"#748094\",\n  hover: {\n    bg: \"#39393c\",\n    border: \"#4e5460\",\n  },\n  text: {\n    fontSize: \"16px\",\n  },\n  heading: {\n    fontSize: \"18px\",\n    fontWeight: \"600\",\n  },\n};\n\nconst light = {\n  name: \"light\",\n  bg: \"#e3e8ef\",\n  color: \"#1b202b\",\n  border: \"#748094\",\n  hover: {\n    bg: \"#eef2f6\",\n    border: \"#d8dfe7\",\n  },\n  text: {\n    fontSize: \"16px\",\n  },\n  heading: {\n    fontSize: \"18px\",\n    fontWeight: \"600\",\n  },\n};\n\nconst useTheme = (light, dark) => {\n  return state.theme === \"light\" ? light : dark;\n};\n\nconst GlobalStyle = styled.div`\n  * {\n    font-family: \"Source Code Pro\", cursive;\n  }\n  ${font}\n`;\n\nconst Main = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  color: ${useTheme(light.color, dark.color)};\n  background-color: ${useTheme(light.bg, dark.bg)};\n  overflow-y: auto;\n  padding-bottom: 80px;\n  min-height: 100vh;\n\n  @media only screen and (max-width: 750px) {\n    padding-bottom: 160px;\n  }\n`;\n\nconst Stack = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n`;\n\nconst HStack = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  gap: 15px;\n`;\n\nconst SearchStack = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  gap: 15px;\n\n  @media only screen and (max-width: 750px) {\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\n\nconst Content = styled.div`\n  padding-top: 80px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n`;\n\nconst switchTheme = () => {\n  const themeToChange = useTheme(\"dark\", \"light\");\n  State.update({\n    theme: themeToChange,\n  });\n  Storage.privateSet(\"theme\", themeToChange);\n};\n\nconst handleSubmit = (value) => {\n  State.update({ search: value });\n  searchContracts();\n};\n\nconst searchContracts = async () => {\n  Near.asyncView(state.config.contractId, \"search\", {\n    key: state.search,\n    from_index: state.from_index,\n    limit: state.limit,\n  })\n    .then((res) => {\n      State.update({\n        pages: res[1],\n        contracts: res[0],\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nif (!state.contracts) searchContracts();\n\nconst localStorageTheme = Storage.privateGet(\"theme\");\nif (localStorageTheme)\n  State.update({\n    theme: localStorageTheme,\n  });\n\nconst handleOptionsChange = (e) => {\n  State.update({\n    limit: parseInt(e.target.value),\n    selectedPage: 1,\n    from_index: 0,\n  });\n  searchContracts();\n};\n\nconst handlePageChange = (x) => {\n  State.update({\n    selectedPage: x + 1,\n    from_index: x * state.limit,\n  });\n  searchContracts();\n};\n\nconst pages = {\n  main: (\n    <>\n      <SearchStack>\n        <Widget\n          src={`${state.config.ownerId}/widget/SourceScan.Inputs.SearchBar`}\n          props={{\n            placeholder: \"Account ID\",\n            theme: useTheme(light, dark),\n            handleSubmit: handleSubmit,\n            value: state.search,\n          }}\n        />\n        <Widget\n          src={`${state.config.ownerId}/widget/SourceScan.Inputs.Limits`}\n          props={{\n            handleOptionsChange: handleOptionsChange,\n            theme: useTheme(light, dark),\n            limits: limits,\n            selectedLimit: state.limit,\n          }}\n        />\n      </SearchStack>\n      <Widget\n        src={`${state.config.ownerId}/widget/SourceScan.Contracts.Table`}\n        props={{\n          theme: useTheme(light, dark),\n          contracts: state.contracts,\n          rpcUrl: state.config.rpcUrl,\n          apiHost: state.config.apiHost,\n        }}\n      />\n      <Widget\n        src={`${state.config.ownerId}/widget/SourceScan.Inputs.Pagination`}\n        props={{\n          theme: useTheme(light, dark),\n          pages: state.pages,\n          selectedPage: state.selectedPage,\n          handlePageChange: handlePageChange,\n        }}\n      />\n    </>\n  ),\n  contract: (\n    <Widget\n      src={`${state.config.ownerId}/widget/SourceScan.Contracts.Info`}\n      props={{\n        apiHost: state.config.apiHost,\n        contractId: props.contractId,\n        theme: useTheme(\n          {\n            ...light,\n            border: `1px dashed ${light.border}`,\n            heading: {\n              ...light.heading,\n              underline: true,\n            },\n          },\n          {\n            ...dark,\n            border: `1px dashed ${dark.border}`,\n          }\n        ),\n      }}\n    />\n  ),\n  verify: (\n    <Widget\n      src={`${state.config.ownerId}/widget/SourceScan.Verify.Page`}\n      props={{\n        rpcUrl: state.config.rpcUrl,\n        theme: useTheme(light, dark),\n        apiHost: state.config.apiHost,\n      }}\n    />\n  ),\n  docs: (\n    <Widget\n      src={`${state.config.ownerId}/widget/SourceScan.Docs.Page`}\n      props={{\n        rpcUrl: state.config.rpcUrl,\n        theme: useTheme(light, dark),\n        apiHost: state.config.apiHost,\n      }}\n    />\n  ),\n};\n\nreturn (\n  <GlobalStyle>\n    <Main>\n      <Widget\n        src={`${state.config.ownerId}/widget/SourceScan.Layout.Navbar`}\n        props={{\n          theme: useTheme(light, dark),\n          switchTheme: switchTheme,\n        }}\n      />\n      <Content>{pages[props.page] ? pages[props.page] : pages.main}</Content>\n    </Main>\n  </GlobalStyle>\n);\n", "metadata": {"description": "## SourceScan for NEAR\n\nVisit the solution at [SourceScan](https://sourcescan.2bb.dev).\n\n---\n\n##### **Key Features**:\n\n---\n- **Remote Compilation Server**:\n  - Contains a Docker image for Rust and TypeScript compilation.\n  - Ensures NEAR smart-contracts are reproducible in a consistent environment.\n\n---\n\n- **Import**:\n  - Directly import code from GitHub.\n  - Upload a folder containing source code.\n\n---\n\n- **Smart-Contract Lookup**:\n  - Allows users to view contract details.\n  - Source code can be accessed on GitHub or IPFS.\n\n---\n\n- **On-chain Smart-Contract**:\n  - Stores details about the compiled and deployed contract on-chain.\n\n---\n\n- **Networks**: Live on both nets.\n\n---\n\n- **Wallet Compatibility**:\n  - Integrates with mynearwallet and wallet.near.org.\n\n---\n\n- **Advanced Access Key Management**:\n  - As full access keys are required for deployment, there's an advanced system for managing these keys efficiently and easily.\n\n---\n\n- **Security Measures**:\n\n  - WASM code mismatch check.\n\n  - Deploy Transaction (Tx) check.", "image": {"url": "https://ipfs.io/ipfs/bafybeiegcxl662nreuyb4cfleo4hnj3kx27zqvysq3wpjy462kpcfjei3q/near-logo.png"}, "name": "SourceScan", "tags": {"app": "", "code": "", "smart-contract": "", "verifier": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sourcescan.near/widget/SourceScan", "fact_widget_deployments_id": "cf906728498c06919738def6713ce666", "inserted_timestamp": "2023-11-21T15:41:22.432Z", "modified_timestamp": "2023-11-21T15:41:22.432Z", "__row_index": 44}