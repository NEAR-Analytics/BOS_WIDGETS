{"tx_hash": "5XK98DsbgzTp2tuyHf2bzQn5zqDHQw1KjBNWgaQDFAuj", "action_id_social": "4acMeApifKzZr4GhjN7aqr5qn9X6ZLDfk2fHfXnrzxHy-0-widget", "block_id": 111933151, "block_timestamp": "2024-02-02T12:53:47.636Z", "signer_id": "bos.dapplets.near", "widget_name": "Tipping.Main", "source_code": "let accountId;\nlet itemGlobalId;\n\nif (props.accountGId && props.itemGId) {\n  accountId = props.accountGId;\n  itemGlobalId = props.itemGId;\n} else if ((props.accountId || props.notifyAccountId) && (props.blockHeight || props.item?.blockHeight)) {\n  accountId = props.accountId || props.notifyAccountId;\n  const blockHeight = props.blockHeight || props.item?.blockHeight;\n  itemGlobalId = `bos/${blockHeight}/${accountId}/post/main`;\n} else if (props.context && props.context.id && props.context.authorUsername) {\n  accountId = props.context.authorUsername + '/twitter';\n  itemGlobalId = 'tweet/' + props.context.id;\n} else {\n  console.error('The context should provide accountGId with itemGId or accountId with blockHeight props.');\n  return <></>;\n}\n\nconst TIPPING_CONTRACT_NAME = \"v2.tipping.near\";\nconst MAX_AMOUNT_PER_ITEM = '10000000000000000000000000'; // 10 NEAR\nconst MAX_AMOUNT_PER_TIP = '1000000000000000000000000'; // 1 NEAR\nconst STEP_YOCTO = '50000000000000000000000'; // 0.05 NEAR\nconst LIMIT_PER_ITEM = 10;\nconst STEP = 0.05\nconst DEBOUNCE_DELAY = 2000; // in ms\n\nState.update({\n  totalTipsByItemId: Near.view(TIPPING_CONTRACT_NAME, \"getTotalTipsByItemId\", {\n    itemId: itemGlobalId\n  }, \"final\", true) || '0'\n})\n\n/**\n * From near-api-js/blob/master/packages/utils/src/format.ts\n */\nconst NEAR_NOMINATION_EXP = 24;\nconst NEAR_NOMINATION = new BN('10', 10).pow(new BN(NEAR_NOMINATION_EXP, 10));\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new BN(10);\n\nfor (let i = 0, offset = new BN(5); i < NEAR_NOMINATION_EXP; i++) {\n  ROUNDING_OFFSETS[i] = offset;\n  offset = offset.mul(BN10)\n}\n\nfunction trimTrailingZeroes(value) {\n  return value.replace(/\\.?0*$/, '');\n}\n\nfunction formatWithCommas(value) {\n  const pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n  return value;\n}\n\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param {string} balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param {number} fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns {string} Value in \u24c3\n */\nfunction formatNearAmount(balance, fracDigitsExternal) {\n  const fracDigits = fracDigitsExternal || NEAR_NOMINATION\n\n  const balanceBN = new BN(balance, 10);\n  if (fracDigits !== NEAR_NOMINATION_EXP) {\n    const roundingExp = NEAR_NOMINATION_EXP - fracDigits - 1;\n    if (roundingExp > 0) {\n      balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n    }\n  }\n\n  balance = balanceBN.toString();\n  const wholeStr = balance.substring(0, balance.length - NEAR_NOMINATION_EXP) || '0';\n  const fractionStr = balance\n    .substring(balance.length - NEAR_NOMINATION_EXP)\n    .padStart(NEAR_NOMINATION_EXP, '0')\n    .substring(0, fracDigits);\n\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\n\n/**\n * Converts a yocto number to a number with two digits after the dot\n * \n * @param {string} amount decimal string representing balance in smallest non-divisible NEAR units\n * @returns {number} examples: 0.3, 0.05, 0\n */\n\nfunction formatNear(amount) {\n  return Number(formatNearAmount(amount, 2))\n}\n\n/**\n * End\n */\n\n// Sum of 2 or 3 values!!!\nconst sum = (value1, value2, value3) => {\n  let _sum = Big('0');\n  const values = value3 ? [value1, value2, value3] : [value1, value2]\n\n  for (const v of values) {\n    const _a = Big(_sum);\n    const _b = Big(v);\n    _sum = _a.plus(_b);\n  }\n\n  return _sum.toFixed();\n}\n\nconst lte = (a, b) => {\n  const _a = Big(a);\n  const _b = Big(b);\n  return _a.lte(_b);\n}\n\nconst gte = (a, b) => {\n  const _a = Big(a);\n  const _b = Big(b);\n  return _a.gte(_b);\n}\n\nconst equals = (a, b) => {\n  const _a = Big(a);\n  const _b = Big(b);\n  return _a.eq(_b);\n}\n\nfunction debounce(func, timeout, id) {\n  return () => {\n    state[`debounceTimer#${id}`] && clearTimeout(state[`debounceTimer#${id}`]);\n    const timer = setTimeout(func, timeout);\n    State.update({ [`debounceTimer#${id}`]: timer })\n  };\n}\n\nfunction calculateFee(num) {\n  Big.PE = 40\n  const _num = Big(num)\n  const a = _num.times(3)\n  const b = a.div(100)\n  return b.toString()\n}\n\nuseEffect(() => {\n  if (equals(state.totalTipsByItemId, '0')) {\n    State.update({\n      accountId,\n      disabled: false,\n      loading: false,\n      tooltip: 'Send donation',\n      amount: state.amount || '0',\n    })\n  } else if (formatNear(state.totalTipsByItemId) === LIMIT_PER_ITEM) {\n    State.update({\n      accountId,\n      disabled: true,\n      loading: false,\n      tooltip: `The ${LIMIT_PER_ITEM} NEAR limit for this content has been exceeded`,\n      amount: state.amount || '0',\n    })\n  } else {\n    State.update({\n      accountId,\n      disabled: false,\n      loading: false,\n      tooltip: 'Send donation',\n      amount: state.amount || '0',\n    })\n  }\n}, [accountId, state.totalTipsByItemId]);\n\nconst onDebounceDonate = () => {\n  try {\n    State.update({\n      loading: true,\n      disabled: true,\n    })\n    const fee = calculateFee(state.amount);\n    const total = sum(state.amount, fee);\n    Near.call(\n      TIPPING_CONTRACT_NAME,\n      \"sendTips\",\n      {\n        accountGId: accountId,\n        itemId: itemGlobalId,\n      },\n      '50000000000000',\n      total,\n    );\n  } catch (e) {\n    console.error(e);\n    State.update({\n      disabled: false,\n      loading: false,\n      amount: '0',\n    });\n  }\n};\n\nconst debouncedDonate = debounce(onDebounceDonate, DEBOUNCE_DELAY, 'donate')\n\nconst onClick = () => {\n  const result = formatNear(sum(state.totalTipsByItemId, state.amount, STEP_YOCTO));\n  if (result > LIMIT_PER_ITEM) {\n    if (state.amount === '0') {\n      State.update({\n        disabled: true,\n        exceeded: true,\n        tooltip: `The ${LIMIT_PER_ITEM} NEAR limit for this content has been exceeded`,\n      })\n      setTimeout(() => State.update({\n        disabled: false,\n        exceeded: false,\n        tooltip: 'Send donation',\n      }), 3000)\n      return \n    }\n    State.update({\n      disabled: true,\n      tooltip: `The ${LIMIT_PER_ITEM} NEAR limit for this content has been exceeded`,\n    })\n    return\n  }\n  const expectedItemAmount = sum(state.totalTipsByItemId, state.amount, STEP_YOCTO)\n  const expectedExpenses = sum(state.amount, STEP_YOCTO)\n  if (lte(expectedItemAmount, MAX_AMOUNT_PER_ITEM) && lte(expectedExpenses, MAX_AMOUNT_PER_TIP)) {\n    State.update({\n      disabled: result === LIMIT_PER_ITEM,\n      amount: expectedExpenses,\n    })\n  }\n\n  debouncedDonate();\n};\n\nconst LikeButton = styled.button`\n  display: flex;\n  position: relative;\n  width: 85px;\n  height: 18px;\n  padding: 0;\n  align-items: center;\n  flex-shrink: 0;\n  overflow: hidden;\n\n  border: 1px solid #C1C6CE;\n  border-radius: 9em;\n  background: none;\n\n  color: #5B7083;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n\n  user-select: none;\n  transition: color .3s ease-out;\n\n  .icon {\n    display: flex;\n    padding: 3px 3px 3px 6px;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    flex: 1 0 0;\n    align-self: stretch;\n    border-right: 1px solid #C1C6CE;\n    z-index: 2;\n  }\n\n  .cost {\n    display: flex;\n    width: 51px;\n    justify-content: center;\n    align-items: center;\n    gap: 6px;\n    flex-shrink: 0;\n    white-space: nowrap;\n    flex-grow: 1;\n    z-index: 2;\n  }\n\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: #3D7FFF;\n  }\n\n  .progress-bar { \n    display: block;\n    position: absolute;\n    top:0;\n    left: 0;\n    width: 0;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    background-color: #3D7FFF;\n    z-index: 1;\n  }\n\n  &.loading {\n    @keyframes progressAnimationStrike {\n        from { width: 0 }\n        to   { width: 100% }\n    }\n  \n    @keyframes waitingAnimation {\n      from {\n        border-color: #C1C6CE;\n        color: #5B7083;\n      }\n      to {\n        border-color: #3D7FFF;\n        color: white;\n      }\n    }\n\n    animation: waitingAnimation 10s linear forwards;\n\n    .progress-bar {\n      animation: progressAnimationStrike 10s linear forwards;\n    }\n  }\n`;\n\nconst createLabel = () => {\n  if (state.totalTipsByItemId === '0' && state.amount === '0') return state.isHovered ? '+ ' + STEP : 'Tip'\n  if (state.amount === '0') {\n    return state.isHovered ? '+ ' + STEP : formatNear(state.totalTipsByItemId)\n  } else {\n    return '+ ' + (state.isHovered ? formatNear(sum(state.amount, STEP_YOCTO)) : formatNear(state.amount))\n  }\n}\n\nreturn (\n  <div className=\"d-inline-flex align-items-center\">\n    <LikeButton\n      disabled={state.disabled}\n      title={state.tooltip}\n      onMouseEnter={() => State.update({ isHovered: true })}\n      onMouseLeave={() => State.update({ isHovered: false })}\n      onClick={onClick}\n      className={state.loading ? \"loading \" : \"\"}\n    >\n      <div className=\"progress-bar\"/>\n      <div className=\"icon\">\n        <Widget src=\"bos.dapplets.near/widget/Tipping.TipIcon\" />\n      </div>\n      <div className=\"cost\">\n        {createLabel()}\n        <Widget src=\"bos.dapplets.near/widget/Tipping.NearIcon\" />\n      </div>\n    </LikeButton>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.dapplets.near/widget/Tipping.Main", "fact_widget_deployments_id": "b15a2c552f6f26f8286e26ab04d8ed2f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}