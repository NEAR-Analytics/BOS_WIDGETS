{"tx_hash": "3RLntoKjdptCag8n61ViCPwu4TFpoofohTbbX3EXHvXD", "action_id_social": "Ec5XRjSNcdCx9pMx2EEGKg8WLjpcnchs88B3toVBm8QX-0-widget", "block_id": 118364546, "block_timestamp": "2024-05-06T12:06:38.586Z", "signer_id": "bos.dapplets.near", "widget_name": "DefaultLayoutManager", "source_code": "if (\n  (!props.widgets || props.widgets.length === 0) &&\n  (!props.components || props.components.length === 0)\n)\n  return <></>;\n\nconst [waitingAppIdsSet, changeWaitingAppIdsSet] = useState(new Set());\n\nconst handleRemoveWidget = (linkId) => {\n  changeWaitingAppIdsSet((val) => val.add(linkId));\n  const callback = () => {\n    waitingAppIdsSet.delete(linkId);\n    changeWaitingAppIdsSet((val) => {\n      val.delete(linkId);\n      return val;\n    });\n  };\n  props.deleteUserLink(linkId).then(callback).catch(callback);\n};\n\nconst Container = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-left: 8px;\n`;\n\nconst WidgetWrapper = styled.div`\n  max-width: 100%;\n  min-width: 18px;\n  position: relative;\n`;\n\nconst WidgetBadgeWrapper = styled.div`\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  z-index: 1200;\n  background: rgba(255, 255, 255, 0.35);\n  width: 100%;\n  height: 100%;\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  justify-content: center;\n  border-radius: 4%;\n  backdrop-filter: blur(0.5px);\n  div {\n    padding: 2px;\n  }\n`;\n\nconst FloatingElementWrapper = ({ component: WrapperComponent, children }) => {\n  return WrapperComponent ? (\n    <WrapperComponent\n      context={props.context}\n      attachContextRef={props.attachContextRef}\n      attachInsPointRef={props.attachInsPointRef}\n    >\n      {children}\n    </WrapperComponent>\n  ) : (\n    children\n  );\n};\n\nreturn (\n  <Container>\n    {props.widgets\n      .filter((w) => w.isSuitable === undefined || w.isSuitable === true)\n      .map((widget) => {\n        const WrapperComponent = props.components\n          ? props.components.find(\n              (cmp) => cmp.target.insteadOf?.linkId === widget.linkId\n            )?.component\n          : null;\n\n        return (\n          <WidgetWrapper key={widget.linkId}>\n            {props.isEditMode ? (\n              <WidgetBadgeWrapper\n                title={\n                  widget.linkAuthorId === context.accountId\n                    ? `Remove ${widget.src\n                        .split(\"widget/\")\n                        .pop()} injected by ${widget.linkAuthorId} (link ID: ${\n                        widget.linkId\n                      })`\n                    : \"disable in edit mode \"\n                }\n                style={{\n                  opacity:\n                    widget.linkAuthorId === context.accountId ? \"1\" : \"0\",\n                }}\n              >\n                {widget.linkAuthorId === context.accountId ? (\n                  waitingAppIdsSet.has(widget.linkId) ? (\n                    <span\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                      class=\"spinner-grow spinner-grow-sm\"\n                    />\n                  ) : (\n                    <Widget\n                      src=\"bos.dapplets.near/widget/LayoutManager.DeleteWidgetButton\"\n                      props={{\n                        onClick: () => handleRemoveWidget(widget.linkId),\n                      }}\n                    />\n                  )\n                ) : null}\n              </WidgetBadgeWrapper>\n            ) : null}\n\n            <FloatingElementWrapper component={WrapperComponent}>\n              <Widget src={widget.src} props={widget.props} />\n            </FloatingElementWrapper>\n          </WidgetWrapper>\n        );\n      })}\n\n    {props.components\n      ? props.components\n          .filter(\n            (cmp) => !cmp.target.insteadOf || !cmp.target.insteadOf.linkId\n          )\n          .map((cmp, i) => {\n            const WrapperComponent = cmp.component;\n            return (\n              <WidgetWrapper key={i}>\n                <WrapperComponent\n                  context={props.context}\n                  attachContextRef={props.attachContextRef}\n                  attachInsPointRef={props.attachInsPointRef}\n                />\n              </WidgetWrapper>\n            );\n          })\n      : null}\n  </Container>\n);\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.dapplets.near/widget/DefaultLayoutManager", "fact_widget_deployments_id": "54653f005821ae73045f32697016ee67", "inserted_timestamp": "2024-05-06T13:39:28.857Z", "modified_timestamp": "2024-05-06T13:39:28.857Z", "__row_index": 18}