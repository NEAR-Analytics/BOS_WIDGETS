{"tx_hash": "GfVD8nUB2hbKEvfRVhpATN5VwFYP9NTJXkYT216gNqqE", "action_id_social": "CGY3BBZbaWJMoCmg3UTUV5MBG15AUZ3kFtde1RJvk3aX-0-widget", "block_id": 114700806, "block_timestamp": "2024-03-14T15:40:25.805Z", "signer_id": "bos.dapplets.near", "widget_name": "OnboardingTest.Main", "source_code": "const lastShowTime = Storage.privateGet('lastShowTime')\nconst [data, setData] = useState(null)\nconst [show, setShow] = useState(false)\nconst [start, setStart] = useState(false)\n\nuseEffect(() => {\n  setData(props.data\n    || props.link?.id\n    && context?.accountId\n    && Near.view(\n      'social.dapplets.near',\n      'get',\n      {\n        keys: [\n          `${context?.accountId}/settings/onboarding-test/${props.link?.id}`\n        ]\n      }\n    )?.[context?.accountId].settings.onboarding-test[props.link?.id]\n  )\n}, [props, context])\n\nconsole.log('data', data)\nconsole.log('props', props)\n\nuseEffect(() => {\n  if (!start && !lastShowTime) return\n  setStart(true)\n  const elapsed = Date.now() - (lastShowTime ?? 0)\n  // setShow(elapsed > 1000 * 60 * 60 * 3)\n  setShow(elapsed > 1000 * 60 * 1 * 1) // TESTING\n}, [start, lastShowTime])\n\nsetTimeout(() => setStart(true), 10000)\n\nconst OverlayTriggerWrapper = styled.div`\n  display: flex;\n  z-index: 500;\n\n  .OverlayTrigger {\n    position: absolute;\n    background: #db504a;\n    border: 1px solid #db504a;\n    width: 6px;\n    height: 49px;\n    right: -6px;\n    top: 10px;\n    border-radius: 0px 4px 4px 0px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    z-index: 79;\n  }\n`\n\nconst Onboarding = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  animation: falling-animation 0.3s linear forwards;\n\n  @keyframes falling-animation {\n    from {\n      transform: translate(-50%, -200%);\n    }\n\n    to {\n      transform: translate(-50%, -50%);\n    }\n  }\n`;\n\nconst handleClose = (doNotShowAgain) => {\n  if (doNotShowAgain) {\n    // Storage.privateSet('lastShowTime', 30000000000000)\n    Storage.privateSet('lastShowTime', Date.now() + 1000 * 60) // TESTING\n  } else {\n    Storage.privateSet('lastShowTime', Date.now())\n  }\n  setShow(false)\n}\n\nconst saveData = (data) => context?.accountId && props?.link?.id && Near.call(\n  'social.dapplets.near',\n  'set',\n  {\n    data: {\n      [context.accountId]: {\n        settings: {\n          'onboarding-test': {\n            [props.link.id]: data\n          }\n        }\n      }\n    }\n  }\n)\n\nreturn (\n  <OverlayTriggerWrapper>\n    {show ? (\n      <DappletOverlay>\n        <Onboarding>\n          <Widget\n            props={{ handleClose, data, saveData, setShow, link: props.link }}\n            src=\"bos.dapplets.near/widget/OnboardingTest.SandboxOnboarding\"\n          />\n        </Onboarding>\n      </DappletOverlay>\n    ) : null}\n  </OverlayTriggerWrapper>\n)", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.dapplets.near/widget/OnboardingTest.Main", "fact_widget_deployments_id": "769ee8109831682d7310a58b6eeea7a5", "inserted_timestamp": "2024-03-14T17:26:33.773Z", "modified_timestamp": "2024-03-14T17:26:33.773Z", "__row_index": 0}