{"tx_hash": "35L7RhpQXwkqng9tHvgTLkptk6PzdqwArv1suZ4YoAy3", "action_id_social": "GobY2QcDRDUpvvUy5Wu4ypcMov4wfBL1egPJheHHCUCT-0-widget", "block_id": 117008240, "block_timestamp": "2024-04-17T02:45:27.724Z", "signer_id": "blueprints.near", "widget_name": "Components.Common.Compose", "source_code": "const autocompleteEnabled = props.autocompleteEnabled ?? true;\nif (state.image === undefined) {\n  State.init({\n    image: {},\n    text: props.initialText || \"\",\n  });\n  if (props.onHelper) {\n    const extractMentions = (text) => {\n      const mentionRegex =\n        /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n      mentionRegex.lastIndex = 0;\n      const accountIds = new Set();\n      for (const match of text.matchAll(mentionRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n          match[1].length >= 2 &&\n          match[1].length <= 64\n        ) {\n          accountIds.add(match[1].toLowerCase());\n        }\n      }\n      return [...accountIds];\n    };\n    const extractHashtags = (text) => {\n      const hashtagRegex = /#(\\w+)/gi;\n      hashtagRegex.lastIndex = 0;\n      const hashtags = new Set();\n      for (const match of text.matchAll(hashtagRegex)) {\n        if (\n          !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n          !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n        ) {\n          hashtags.add(match[1].toLowerCase());\n        }\n      }\n      return [...hashtags];\n    };\n    const extractMentionNotifications = (text, item) =>\n      extractMentions(text || \"\")\n        .filter((accountId) => accountId !== context.accountId)\n        .map((accountId) => ({\n          key: accountId,\n          value: {\n            type: \"mention\",\n            item,\n          },\n        }));\n    props.onHelper({\n      extractHashtags,\n      extractMentions,\n      extractTagNotifications: extractMentionNotifications,\n      extractMentionNotifications,\n    });\n  }\n}\nconst content = (state.text || state.image.cid || state.image.url) && {\n  type: \"md\",\n  text: state.text,\n  image: state.image.url\n    ? { url: state.image.url }\n    : state.image.cid\n    ? { ipfs_cid: state.image.cid }\n    : undefined,\n};\nif (content && props.extraContent) {\n  Object.assign(content, props.extraContent);\n}\nfunction autoCompleteAccountId(id) {\n  let text = state.text.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  text = `${text} @${id}`.trim() + \" \";\n  State.update({ text, showAccountAutocomplete: false });\n}\nconst onChange = (text) => {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(text);\n  State.update({ text, showAccountAutocomplete });\n};\nconst jContent = JSON.stringify(content);\nif (props.onChange && jContent !== state.jContent) {\n  State.update({\n    jContent,\n  });\n  props.onChange({ content });\n}\nconst onCompose = () => {\n  State.update({\n    image: {},\n    text: \"\",\n  });\n};\nconst [markdownEditor, setMarkdownEditor] = useState(false);\nconst [gifSearch, setGifSearch] = useState(false);\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    padding: 8px 0;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n  iframe {\n    padding: 0;\n  }\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid var(--stroke);\n    min-height: 5em;\n  }\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\nconst Wrapper = styled.div`\n  border: 1px solid var(--stroke);\n  margin: 1rem;\n  border-radius: 1rem;\n  background: var(--bg1);\n  line-height: normal;\n  display: flex;\n  padding: 12px 12px 6px;\n  .left {\n    min-width: 40px;\n    margin-right: 12px;\n  }\n  .right {\n    margin-top: -4px;\n    flex-grow: 1;\n    min-width: 0;\n    textarea {\n      color: var(--color);\n    }\n  }\n  .up-buttons {\n    margin-top: 6px;\n    margin-left: -12px;\n  }\n`;\nconst embedCss = `\n.rc-md-editor {\n  border: 0;\n}\n.rc-md-editor .editor-container>.section {\n  border: 0;\n}\n.rc-md-editor .editor-container .sec-md .input {\n  overflow-y: auto;\n  padding: 8px 0 !important;\n  line-height: normal;\n}\n`;\nconst gifSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    style={{ width: \"1em\", verticalAlign: \"-0.125em\" }}\n    fill=\"currentColor\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\n    <text\n      x=\"8\"\n      y=\"11\"\n      text-anchor=\"middle\"\n      font-size=\"7\"\n      stroke=\"currentColor\"\n      strokeWidth=\"0.5\"\n    >\n      GIF\n    </text>\n  </svg>\n);\nconst gifSearchWidget = useMemo(\n  () =>\n    gifSearch ? (\n      <Widget\n        src=\"mob.near/widget/N.GifSearch\"\n        props={{\n          onHide: () => setGifSearch(false),\n          onSelect: (gif) => {\n            State.update({\n              image: { url: gif.url },\n            });\n            setGifSearch(false);\n          },\n        }}\n      />\n    ) : undefined,\n  [gifSearch]\n);\nreturn (\n  <Wrapper>\n    <div className=\"left\">\n      <Widget\n        loading=\"\"\n        src=\"mob.near/widget/MainPage.N.Post.Left\"\n        props={{ accountId: context.accountId }}\n      />\n    </div>\n    <div className=\"right\">\n      <TextareaWrapper\n        className={markdownEditor ? \"markdown-editor\" : \"\"}\n        data-value={state.text || \"\"}\n      >\n        {markdownEditor ? (\n          <Widget\n            key={`markdown-editor-${markdownEditor}`}\n            src=\"mob.near/widget/MarkdownEditorIframe\"\n            props={{\n              initialText: state.text,\n              onChange,\n              embedCss,\n            }}\n          />\n        ) : (\n          <textarea\n            key=\"textarea\"\n            value={state.text || \"\"}\n            onInput={(event) => onChange(event.target.value)}\n            onKeyUp={(event) => {\n              if (event.key === \"Escape\") {\n                State.update({ showAccountAutocomplete: false });\n              }\n            }}\n            placeholder={props.placeholder ?? \"What's happening?\"}\n          />\n        )}\n        {autocompleteEnabled && state.showAccountAutocomplete && (\n          <div className=\"pt-1 w-100 overflow-hidden\">\n            <Widget\n              src=\"mob.near/widget/AccountAutocomplete\"\n              props={{\n                term: state.text.split(\"@\").pop(),\n                onSelect: autoCompleteAccountId,\n                onClose: () => State.update({ showAccountAutocomplete: false }),\n              }}\n            />\n          </div>\n        )}\n      </TextareaWrapper>\n      <div className=\"up-buttons d-flex flex-row\">\n        <div className=\"flex-grow-1 d-flex\">\n          <IpfsImageUpload\n            image={state.image}\n            className=\"btn btn-outline-secondary border-0 rounded-3\"\n          />\n          <button\n            className=\"btn btn-outline-secondary border-0 rounded-3\"\n            onClick={() =>\n              setMarkdownEditor(markdownEditor ? false : Date.now())\n            }\n          >\n            <i className=\"bi bi-code-square\" />\n          </button>\n          <button\n            className=\"btn btn-outline-secondary border-0 rounded-3\"\n            onClick={() => setGifSearch(!gifSearch)}\n          >\n            {gifSvg}\n          </button>\n        </div>\n        <div>{props.composeButton && props.composeButton(onCompose)}</div>\n      </div>\n    </div>\n    {gifSearchWidget}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/blueprints.near/widget/Components.Common.Compose", "fact_widget_deployments_id": "df7d7d07861dd63af4ea6f233a2ac03b", "inserted_timestamp": "2024-04-17T04:38:04.126Z", "modified_timestamp": "2024-04-17T04:38:04.126Z", "__row_index": 0}