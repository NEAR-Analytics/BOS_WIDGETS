{"tx_hash": "9XyRUwmHGQCuViUKTM937B2kBSiB577Yi3oofxAzEc6Y", "action_id_social": "HCuxv8GJdeeQ8PwbmZdcpncTijE9FXdCpd3Joc8d2iSN-0-widget", "block_id": 112542685, "block_timestamp": "2024-02-10T14:20:32.098Z", "signer_id": "forefront_tak.near", "widget_name": "Forefront.Widget.Platform.Leaderboard", "source_code": "const themeColor = props.themeColor;\r\n\r\nconst platformtheme = {\r\n  height: \"90px\",\r\n  align: \"left\",\r\n  description: \"\",\r\n  brand: \"Platform\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"30px\",\r\n  afterbrand: \"Status\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst platform_leaderboard = {\r\n  height: \"90px\",\r\n  align: \"left\",\r\n  description: \"Top Near Ecosystem Platforms\",\r\n  brand: \"Platform\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"30px\",\r\n  afterbrand: \"Leaderboard\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst platform_growth = {\r\n  height: \"90px\",\r\n  align: \"left\",\r\n  description: \"\",\r\n  brand: \"Platform\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"30px\",\r\n  afterbrand: \"Growth\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst platform_dominance = {\r\n  height: \"90px\",\r\n  align: \"left\",\r\n  description: \"\",\r\n  brand: \"Platform\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"30px\",\r\n  afterbrand: \"Dominance\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst Container = styled.div`\r\n  && {\r\n    text-align: left;\r\n  }\r\n  .tabContent {\r\n    display: inline-flex;\r\n    align-items: left;\r\n    background: rgba(26, 46, 51, 0.25);\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    padding: 3px 4px;\r\n    list-style-type: none;\r\n    margin: 0 auto;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n  }\r\n  .tab-item .active {\r\n    background: #304352;\r\n  }\r\n  .tab-item button {\r\n    background-color: transparent;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    color: #fff;\r\n    height: 30px;\r\n    padding: 0 22px;\r\n    border: none;\r\n  }\r\n`;\r\nconst queryHashes = [\r\n  { id: 1, hash: \"bc526c4e-575a-4602-a1ed-7546cda6e8d2\" }, // daily\r\n  { id: 2, hash: \"c9957b20-c75b-4b81-b678-3f9fe909ba36\" }, //  bar-race-volume\r\n  { id: 3, hash: \"7dc47baa-cf46-4728-b79e-f1ee3ec5ca03\" }, //  30 days\r\n  { id: 4, hash: \"5465af58-40c0-4948-86b7-8287c51b3c09\" }, //  7 days\r\n  { id: 5, hash: \"4b1556ae-acf3-471c-8062-184fb2f5b5ea\" }, //  bar-race-user\r\n  { id: 6, hash: \"af805945-bf42-4c2a-8877-e6d3f4a84767\" }, //  total\r\n  { id: 7, hash: \"1993983c-e398-4014-b3c4-1966afea41f0\" }, //  numeric\r\n  { id: 8, hash: \"6e24560f-25f2-40de-a3f1-8a2e346a6788\" }, //  bar-race-trxs\r\n  { id: 9, hash: \"af805945-bf42-4c2a-8877-e6d3f4a84767\" }, //  treemap\r\n];\r\n//----------------------------------------------------------\r\nconst tabs = {\r\n  left: \"Top Project (last 7 days)\",\r\n  middle: \"Top Project (last 30 days)\",\r\n  right: \"Top Project (Total)\",\r\n};\r\nconst setTab = (tab) => State.update({ tab });\r\n//----------------------------------------------------------\r\n\r\nconst barrace_tabs = {\r\n  left: \"Transaction \",\r\n  middle: \"User \",\r\n  right: \"Deposit volume(Near) \",\r\n};\r\nconst setTab1 = (barrace_tab) => State.update({ barrace_tab });\r\n//----------------------------------------------------------\r\n\r\nconst treemap_tabs = {\r\n  left: \"Transaction \",\r\n  middle: \"User \",\r\n  right: \"Deposit volume(Near) \",\r\n};\r\nconst setTab2 = (treemap_tab) => State.update({ treemap_tab });\r\n//----------------------------------------------------------\r\n\r\nState.init({\r\n  light: true,\r\n  data: [],\r\n  isLoading: true,\r\n  error: [],\r\n  tab: tabs.left,\r\n  barrace_tab: barrace_tabs.left,\r\n  treemap_tab: treemap_tabs.left,\r\n});\r\nconst getStackingProps = (data, keys, colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n  const { categoryKey, seriesNameKey, seriesValueKey } = keys;\r\n\r\n  const categoriesData = [...new Set(data.map((i) => i[categoryKey]))];\r\n  const seriesNames = [...new Set(data.map((i) => i[seriesNameKey]))];\r\n  const initialSeries = seriesNames.reduce((t, i) => {\r\n    const c = categoriesData.reduce((t, i) => {\r\n      t[i] = 0;\r\n      return t;\r\n    }, {});\r\n    t[i] = c;\r\n    return t;\r\n  }, {});\r\n  const initialSeriesData = data.reduce((t, i) => {\r\n    t[i[seriesNameKey]][i[categoryKey]] = i[seriesValueKey];\r\n    return t;\r\n  }, initialSeries);\r\n  const seriesData = Object.entries(initialSeriesData).map((i) => {\r\n    const values = Object.values(i[1]);\r\n    const eachSeries = { name: i[0], data: values };\r\n    return eachSeries;\r\n  });\r\n  const props = {\r\n    data: {\r\n      categories: categoriesData,\r\n      series: seriesData,\r\n    },\r\n    colors: colors,\r\n    chartOption: {\r\n      yAxisTitle: \"y axis title\",\r\n      tooltipShare: true,\r\n      stacking: \"normal\",\r\n      dataLabels: false,\r\n      title: {\r\n        text: \"title\",\r\n      },\r\n      subtitle: {\r\n        text: \"subtitle\",\r\n      },\r\n      ...chartOption,\r\n    },\r\n\r\n    overrideOptions: {},\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getTreemapProps = (data, keys, colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n  const { firstKey, lastKey, valueKeys } = keys;\r\n  const formatedData = data.reduce((t, i) => {\r\n    if (!t[i[firstKey]]) {\r\n      t[i[firstKey]] = {};\r\n    }\r\n    t[i[firstKey]][i[lastKey]] = {};\r\n    valueKeys.forEach((v) => {\r\n      t[i[firstKey]][i[lastKey]][v] = i[v];\r\n    });\r\n    return t;\r\n  }, {});\r\n  const props = {\r\n    data: formatedData,\r\n    colors: colors,\r\n    chartOption: {\r\n      chartName: \"chart name\",\r\n      title: {\r\n        text: \"title\",\r\n      },\r\n      subtitle: {\r\n        text: \"subtitle\",\r\n      },\r\n      ...chartOption,\r\n    },\r\n\r\n    overrideOptions: {},\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = data.map((s) => [s[key], s[value]]);\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst handleData = () => {\r\n  const data = {};\r\n  const errors = [];\r\n  queryHashes.forEach(({ hash, id }) => {\r\n    const result = fetchData(hash);\r\n    if (result.error) errors.push(`hash${id} : ${result.error}`);\r\n    data[`hash${id}`] = {\r\n      ...result,\r\n      id,\r\n    };\r\n  });\r\n\r\n  if (Object.values(data).every((d) => !d.isLoading)) {\r\n    State.update({\r\n      data: data,\r\n      error: [...state.error, ...errors],\r\n      isLoading: false,\r\n    });\r\n  }\r\n};\r\nconst convertData = (data) => {\r\n  if (typeof data !== \"string\") {\r\n    return data;\r\n  }\r\n  let converted;\r\n  try {\r\n    converted = JSON.parse(data);\r\n  } catch (er) {\r\n    converted = data;\r\n  }\r\n  return converted;\r\n};\r\n\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && convertData(data.body)) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\nif (state.isLoading) {\r\n  handleData();\r\n}\r\n\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n//--------------------------------------\r\nconst getBarRaceProps = (\r\n  data,\r\n  [projectKey, dateKey, countKey],\r\n  colors,\r\n  chartOption\r\n) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = data.reduce((t, i) => {\r\n    const count = i[countKey];\r\n    const project = i[projectKey];\r\n    const date = i[dateKey];\r\n    if (!t[project]) {\r\n      t[project] = {};\r\n    }\r\n    t[project][date] = count;\r\n    return t;\r\n  }, {});\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      btn_bg: \"red\", //opt\r\n      stepTime: 500, //opt\r\n      barInChart: 3, //opt\r\n      subBarChart: \"\",\r\n      title: {\r\n        text: \"Transaction growth\",\r\n      },\r\n      subtitle: {\r\n        upSize: 20, //opt\r\n        downSize: 15, //opt\r\n        positionX: 0, //opt\r\n        positionY: 0, //opt\r\n      },\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nlet bar_race_trxs = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.barrace_tab === barrace_tabs.left ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"w-100 mx-auto shadow-sm rounded-4\"\r\n    >\r\n      <Widget\r\n        src=\"lord1.near/widget/bar-race\"\r\n        props={getBarRaceProps(\r\n          state.data?.hash8?.data,\r\n          [\"Project\", \"date\", \"Transaction\"],\r\n          themeColor.chartColor,\r\n          {\r\n            btn_bg: \"\",\r\n            stepTime: 500,\r\n            barInChart: 10,\r\n            subBarChart: \"\",\r\n            title: {\r\n              text: \"Top 10 platform in terms of transaction number\",\r\n            },\r\n            subtitle: {\r\n              upSize: 20,\r\n              downSize: 15,\r\n              positionX: 0,\r\n              positionY: 0,\r\n            },\r\n          }\r\n        )}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\nlet bar_race_user = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.barrace_tab === barrace_tabs.middle ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <Widget\r\n      src=\"lord1.near/widget/bar-race\"\r\n      props={getBarRaceProps(\r\n        state.data?.hash5?.data,\r\n        [\"Project\", \"date\", \"user\"],\r\n        themeColor.chartColor,\r\n        {\r\n          btn_bg: \"\",\r\n          stepTime: 500,\r\n          barInChart: 10,\r\n          subBarChart: \"\",\r\n          title: {\r\n            text: \"Top 10 platform in terms of user number\",\r\n          },\r\n          subtitle: {\r\n            upSize: 20,\r\n            downSize: 15,\r\n            positionX: 0,\r\n            positionY: 0,\r\n          },\r\n        }\r\n      )}\r\n    />\r\n  </div>\r\n);\r\nlet bar_race_volume = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.barrace_tab === barrace_tabs.right ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <Widget\r\n      src=\"lord1.near/widget/bar-race\"\r\n      props={getBarRaceProps(\r\n        state.data?.hash2?.data,\r\n        [\"Project\", \"date\", \"volume\"],\r\n        themeColor.chartColor,\r\n        {\r\n          btn_bg: \"\",\r\n          stepTime: 500,\r\n          barInChart: 10,\r\n          subBarChart: \"\",\r\n          title: {\r\n            text: \"Top 10 platform in terms of deposited volume (Near)\",\r\n          },\r\n          subtitle: {\r\n            upSize: 20,\r\n            downSize: 15,\r\n            positionX: 0,\r\n            positionY: 0,\r\n          },\r\n        }\r\n      )}\r\n    />\r\n  </div>\r\n);\r\n//-----------------------------------\r\n\r\nlet growth_transaction = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div\r\n      style={{\r\n        background: themeColor?.sbt_area?.section_bg,\r\n        display: state.treemap_tab === treemap_tabs.left ? \"\" : \"none\",\r\n      }}\r\n      className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n    >\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"w-100 mx-auto shadow-sm rounded-4\"\r\n      >\r\n        <h6\r\n          style={{ color: themeColor?.sbt_area?.card_title_color }}\r\n          className=\"pt-4 ps-4\"\r\n        ></h6>\r\n        <Widget\r\n          src=\"lord1.near/widget/treemap-chart\"\r\n          props={getTreemapProps(\r\n            state.data?.hash9?.data,\r\n            {\r\n              firstKey: \"area\",\r\n              lastKey: \"project\",\r\n              valueKeys: [\"transaction\"],\r\n            },\r\n            themeColor.chartColor,\r\n            {\r\n              yAxisTitle: \"y axis title\",\r\n              tooltipShare: true,\r\n              stacking: \"percent\",\r\n              dataLabels: false,\r\n              title: {\r\n                text: \"Transaction dominance\",\r\n              },\r\n              subtitle: {\r\n                text: \"\",\r\n              },\r\n            }\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet growth_user = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div\r\n      style={{\r\n        background: themeColor?.sbt_area?.section_bg,\r\n        display: state.treemap_tab === treemap_tabs.middle ? \"\" : \"none\",\r\n      }}\r\n      className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n    >\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"w-100 mx-auto shadow-sm rounded-4\"\r\n      >\r\n        <h6\r\n          style={{ color: themeColor?.sbt_area?.card_title_color }}\r\n          className=\"pt-4 ps-4\"\r\n        ></h6>\r\n        <Widget\r\n          src=\"lord1.near/widget/treemap-chart\"\r\n          props={getTreemapProps(\r\n            state.data?.hash9?.data,\r\n            {\r\n              firstKey: \"area\",\r\n              lastKey: \"project\",\r\n              valueKeys: [\"users\"],\r\n            },\r\n            themeColor.chartColor,\r\n            {\r\n              yAxisTitle: \"y axis title\",\r\n              tooltipShare: true,\r\n              stacking: \"percent\",\r\n              dataLabels: false,\r\n              title: {\r\n                text: \"User dominance\",\r\n              },\r\n              subtitle: {\r\n                text: \"\",\r\n              },\r\n            }\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet growth_volume = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div\r\n      style={{\r\n        background: themeColor?.sbt_area?.section_bg,\r\n        display: state.treemap_tab === treemap_tabs.right ? \"\" : \"none\",\r\n      }}\r\n      className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n    >\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"w-100 mx-auto shadow-sm rounded-4\"\r\n      >\r\n        <h6\r\n          style={{ color: themeColor?.sbt_area?.card_title_color }}\r\n          className=\"pt-4 ps-4\"\r\n        ></h6>\r\n        <Widget\r\n          src=\"lord1.near/widget/treemap-chart\"\r\n          props={getTreemapProps(\r\n            state.data?.hash9?.data,\r\n            {\r\n              firstKey: \"area\",\r\n              lastKey: \"project\",\r\n              valueKeys: [\"volume\"],\r\n            },\r\n            themeColor.chartColor,\r\n            {\r\n              yAxisTitle: \"y axis title\",\r\n              tooltipShare: true,\r\n              stacking: \"percent\",\r\n              dataLabels: false,\r\n              title: {\r\n                text: \"Deposited Volume(Near) dominance\",\r\n              },\r\n              subtitle: {\r\n                text: \"\",\r\n              },\r\n            }\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n//-----------------------------------\r\n\r\nlet numeric = (\r\n  <div className=\"row w-100 pb-2 px-2 mx-0\">\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-2 overflow-auto\"\r\n    >\r\n      <Widget\r\n        src=\"lord1.near/widget/table-pagination\"\r\n        props={{\r\n          themeColor: { table_pagination: themeColor.table_pagination },\r\n          data: state.data?.hash7?.data,\r\n          withoutSearchBar: \"yes\",\r\n          rowsCount: 3,\r\n          columns: [\r\n            {\r\n              title: \"Interval\",\r\n              key: \"period\",\r\n              colors: \"#8b76f3\",\r\n            },\r\n            {\r\n              title: \"Project\",\r\n              key: \"project\",\r\n              colors: \"#8b76f3\",\r\n              description: \"Number of active projects\",\r\n            },\r\n\r\n            {\r\n              title: \"Contract Calls\",\r\n              key: \"contract_calls\",\r\n              description: \"Number of contract calls in the certain interval\",\r\n              round: \"yes\",\r\n            },\r\n            {\r\n              title: \"Transaction\",\r\n              key: \"transaction\",\r\n              description: \"Number of transactions in the certain interval\",\r\n              round: \"yes\",\r\n            },\r\n            {\r\n              title: \"Users\",\r\n              key: \"users\",\r\n              description: \"Number of users in the certain interval\",\r\n              round: \"yes\",\r\n            },\r\n\r\n            {\r\n              title: \"Volume\",\r\n              key: \"volume\",\r\n              description: \" deposited volume (Near) in the certain interval\",\r\n              round: \"yes\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\nlet fourth = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.tab === tabs.left ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2 overflow-auto\"\r\n      >\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.data?.hash4?.data,\r\n            rowsCount: 15,\r\n            columns: [\r\n              {\r\n                title: \"Project\",\r\n                key: \"project\",\r\n                colors: \"#8b76f3\",\r\n              },\r\n\r\n              {\r\n                title: \"Activity Area\",\r\n                key: \"area\",\r\n                colors: \"#8b76f3\",\r\n              },\r\n              {\r\n                title: \"Contract Calls\",\r\n                key: \"contract_calls\",\r\n                description:\r\n                  \"Number of contract calls for each platform in last 7 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Transaction\",\r\n                key: \"transaction\",\r\n                description:\r\n                  \"Number of transactions for each platform in last 7 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Users\",\r\n                key: \"users\",\r\n                description: \"Number of users for each platform in last 7 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Avg Tnxs\",\r\n                key: \"avg_tx\",\r\n                description:\r\n                  \"Average number of transactions per user for each platform in last 7 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Volume\",\r\n                key: \"volume\",\r\n                description:\r\n                  \" deposited volume (Near) for each platform in last 7 days\",\r\n                round: \"yes\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nlet fifth = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.tab === tabs.middle ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2 overflow-auto\"\r\n      >\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.data?.hash3?.data,\r\n            rowsCount: 15,\r\n            columns: [\r\n              {\r\n                title: \"Project\",\r\n                key: \"project\",\r\n                colors: \"#8b76f3\",\r\n              },\r\n\r\n              {\r\n                title: \"Activity Area\",\r\n                key: \"area\",\r\n                colors: \"#8b76f3\",\r\n              },\r\n              {\r\n                title: \"Contract Calls\",\r\n                key: \"contract_calls\",\r\n                description:\r\n                  \"Number of contract calls for each platform in last 30 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Transaction\",\r\n                key: \"transaction\",\r\n                description:\r\n                  \"Number of transactions for each platform in last 30 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Users\",\r\n                key: \"users\",\r\n                description:\r\n                  \"Number of users for each platform in last 30 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Avg Tnxs\",\r\n                key: \"avg_tx\",\r\n                description:\r\n                  \"Average number of transactions per user for each platform in last 30 days\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Volume\",\r\n                key: \"volume\",\r\n                description:\r\n                  \" deposited volume (Near) for each platform in last 30 days\",\r\n                round: \"yes\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nlet sixth = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.tab === tabs.right ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2 overflow-auto\"\r\n      >\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.data?.hash6?.data,\r\n            rowsCount: 15,\r\n            columns: [\r\n              {\r\n                title: \"Project\",\r\n                key: \"project\",\r\n                colors: \"#8b76f3\",\r\n              },\r\n\r\n              {\r\n                title: \"Activity Area\",\r\n                key: \"area\",\r\n                colors: \"#8b76f3\",\r\n              },\r\n              {\r\n                title: \"Active days\",\r\n                key: \"active_days\",\r\n                colors: \"#334a93\",\r\n                description:\r\n                  \"The count of days the platform is active and providing service to users.\",\r\n              },\r\n              {\r\n                title: \"Contract Calls\",\r\n                key: \"contract_calls\",\r\n                description:\r\n                  \"Number of contract calls for each platform in total\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Transaction\",\r\n                key: \"transaction\",\r\n                description:\r\n                  \"Number of transactions for each platform in total\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Users\",\r\n                key: \"users\",\r\n                description: \"Number of users for each platform in total\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Avg Tnxs\",\r\n                key: \"avg_tx\",\r\n                description:\r\n                  \"Average number of transactions per user for each platform in total\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Volume\",\r\n                key: \"volume\",\r\n                description:\r\n                  \" deposited volume (Near) for each platform in total\",\r\n                round: \"yes\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nreturn (\r\n  <div className=\"container-fluid py-2\">\r\n    <div className=\"pl-2\">\r\n      <Widget src=\"lord1.near/widget/header-dynamic\" props={platformtheme} />\r\n      {numeric}\r\n      <Widget\r\n        src=\"lord1.near/widget/header-dynamic\"\r\n        props={platform_leaderboard}\r\n      />\r\n      <div className=\"w-100 d-flex justify-content-left\">\r\n        <Container>\r\n          <ul className=\"tabContent\">\r\n            {Object.values(tabs).map((tab) => (\r\n              <li key={tab} className=\"tab-item\">\r\n                <button\r\n                  className={`${state.tab === tab ? \"active\" : \"\"}`}\r\n                  aria-current=\"page\"\r\n                  onClick={() => setTab(tab)}\r\n                >\r\n                  {tab}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </Container>\r\n      </div>\r\n      {fourth}\r\n      {fifth} {sixth}\r\n      <div className=\"row w-100 py-4 g-4\">\r\n        <div className=\" col-12 col-md-12\">\r\n          {\" \"}\r\n          <Widget\r\n            src=\"lord1.near/widget/header-dynamic\"\r\n            props={platform_dominance}\r\n          />\r\n          <div className=\"w-100 d-flex justify-content-left\">\r\n            <Container>\r\n              <ul className=\"tabContent\">\r\n                {Object.values(treemap_tabs).map((treemap_tab) => (\r\n                  <li key={treemap_tab} className=\"tab-item\">\r\n                    <button\r\n                      className={`${\r\n                        state.treemap_tab === treemap_tab ? \"active\" : \"\"\r\n                      }`}\r\n                      aria-current=\"page\"\r\n                      onClick={() => setTab2(treemap_tab)}\r\n                    >\r\n                      {treemap_tab}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </Container>\r\n          </div>{\" \"}\r\n          {growth_transaction}\r\n          {growth_user}\r\n          {growth_volume}\r\n        </div>\r\n        <div className=\" col-12 col-md-12\">\r\n          <Widget\r\n            src=\"lord1.near/widget/header-dynamic\"\r\n            props={platform_growth}\r\n          />\r\n          <div className=\"w-100 d-flex justify-content-left\">\r\n            <Container>\r\n              <ul className=\"tabContent\">\r\n                {Object.values(barrace_tabs).map((barrace_tab) => (\r\n                  <li key={barrace_tab} className=\"tab-item\">\r\n                    <button\r\n                      className={`${\r\n                        state.barrace_tab === barrace_tab ? \"active\" : \"\"\r\n                      }`}\r\n                      aria-current=\"page\"\r\n                      onClick={() => setTab1(barrace_tab)}\r\n                    >\r\n                      {barrace_tab}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </Container>\r\n          </div>\r\n          {bar_race_trxs}\r\n          {bar_race_user}\r\n          {bar_race_volume}\r\n        </div>{\" \"}\r\n      </div>\r\n      <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n        {state.error.length > 0 &&\r\n          state.error.map((er) => (\r\n            <div\r\n              className=\"toast show align-items-center text-bg-danger border-0\"\r\n              role=\"alert\"\r\n              aria-live=\"assertive\"\r\n              aria-atomic=\"true\"\r\n            >\r\n              <div className=\"d-flex\">\r\n                <div className=\"toast-body\">{er}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// const props = {\r\n//   themeColor: {\r\n//     dynamic_header: {\r\n//       afterbrandcolor: \"#789efb\",\r\n//       color1brand: \"#000\",\r\n//       color2brand: \"#806ce1\",\r\n//       colordescription: \"#806ce1\",\r\n//       background:\r\n//         \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n//     },\r\n//     tab_sbt: {\r\n//       backgroundColor: \"rgb(49,62,89)\",\r\n//       textColor: \"#fff\",\r\n//       headerColor: \"#806ce1\",\r\n//       numberColor: \"#fff\",\r\n//     },\r\n//     sbt_area: {\r\n//       section_bg: \"rgba(25,33,80)\",\r\n//       card_bg: \"rgb(49, 62, 89)\",\r\n//       card_title_color: \"#806ce1\",\r\n//     },\r\n//   },\r\n// };\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/forefront_tak.near/widget/Forefront.Widget.Platform.Leaderboard", "fact_widget_deployments_id": "d65984bd68d387f5a896975f67c15aa0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}