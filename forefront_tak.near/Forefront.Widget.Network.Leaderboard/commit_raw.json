{"tx_hash": "DP29Wn2V2WgaFTGX9NCfnKoC26uAT6UPosfe4eeAYLGd", "action_id_social": "BJqToifhdXJ4XXX3GzTXmnqokvvsvypVC4RzSL2pzJWA-0-widget", "block_id": 114221842, "block_timestamp": "2024-03-06T19:44:13.422Z", "signer_id": "forefront_tak.near", "widget_name": "Forefront.Widget.Network.Leaderboard", "source_code": "const themeColor = props.themeColor;\n\nconst platform_leaderboard = {\n  height: \"90px\",\n  align: \"left\",\n  description: \"Top Blockchains based on different parameters\",\n  brand: \"Blockchain\",\n  fontsize: \"25px\",\n  fontweight: \"30px\",\n  afterbrand: \"Leaderboard\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst platform_growth = {\n  height: \"90px\",\n  align: \"left\",\n  description: \"\",\n  brand: \"Blockchain\",\n  fontsize: \"25px\",\n  fontweight: \"30px\",\n  afterbrand: \"Growth in 2024\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst platform_dominance = {\n  height: \"90px\",\n  align: \"left\",\n  description: \"\",\n  brand: \"Network\",\n  fontsize: \"25px\",\n  fontweight: \"30px\",\n  afterbrand: \"Dominance\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst Container = styled.div`\n  && {\n    text-align: left;\n  }\n  .tabContent {\n    display: inline-flex;\n    align-items: left;\n    background: rgba(26, 46, 51, 0.25);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n    padding: 3px 4px;\n    list-style-type: none;\n    margin: 0 auto;\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  .tab-item .active {\n    background: #304352;\n  }\n  .tab-item button {\n    background-color: transparent;\n    border-radius: 8px;\n    font-weight: 500;\n    font-size: 14px;\n    color: #fff;\n    height: 30px;\n    padding: 0 22px;\n    border: none;\n  }\n`;\nconst queryHashes = [\n  { id: 1, hash: \"bc526c4e-575a-4602-a1ed-7546cda6e8d2\" }, // daily\n  { id: 3, hash: \"d3eb2e3e-8407-46d1-8a63-10ce3a91fb95\" }, //  30 days *\n  { id: 4, hash: \"de28fde6-9c64-4f60-a86d-5c345024da93\" }, //  7 days *\n  { id: 5, hash: \"2b311776-c929-42b0-b4e0-cb9d7b8e9ae7\" }, //  1 days *\n  { id: 6, hash: \"79e3e384-896b-46d1-88ea-451d7752d90a\" }, //  total *\n  { id: 8, hash: \"26e7f1bb-e069-40ca-9d6a-2050c13bba22\" }, //  bar-race\n  { id: 9, hash: \"79e3e384-896b-46d1-88ea-451d7752d90a\" }, //  treemap\n];\n//----------------------------------------------------------\nconst tabs = {\n  left_day: \"Top Networks (today)\",\n  left: \"Top Networks (last 7 days)\",\n  middle: \"Top Networks (last 30 days)\",\n  right: \"Top Networks (Total)\",\n};\nconst setTab = (tab) => State.update({ tab });\n//----------------------------------------------------------\n\nconst barrace_tabs = {\n  left: \"Transaction \",\n  middle: \"Fee (USD) \",\n  right: \"TPS\",\n};\nconst setTab1 = (barrace_tab) => State.update({ barrace_tab });\n//----------------------------------------------------------\n\nconst treemap_tabs = {\n  left: \"Transaction \",\n  middle: \"Fee (USD)\",\n  right: \"Blocks\",\n};\nconst setTab2 = (treemap_tab) => State.update({ treemap_tab });\n//----------------------------------------------------------\n\nState.init({\n  light: true,\n  data: [],\n  isLoading: true,\n  error: [],\n  tab: tabs.left_day,\n  barrace_tab: barrace_tabs.left,\n  treemap_tab: treemap_tabs.left,\n});\nconst getStackingProps = (data, keys, colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n  const { categoryKey, seriesNameKey, seriesValueKey } = keys;\n\n  const categoriesData = [...new Set(data.map((i) => i[categoryKey]))];\n  const seriesNames = [...new Set(data.map((i) => i[seriesNameKey]))];\n  const initialSeries = seriesNames.reduce((t, i) => {\n    const c = categoriesData.reduce((t, i) => {\n      t[i] = 0;\n      return t;\n    }, {});\n    t[i] = c;\n    return t;\n  }, {});\n  const initialSeriesData = data.reduce((t, i) => {\n    t[i[seriesNameKey]][i[categoryKey]] = i[seriesValueKey];\n    return t;\n  }, initialSeries);\n  const seriesData = Object.entries(initialSeriesData).map((i) => {\n    const values = Object.values(i[1]);\n    const eachSeries = { name: i[0], data: values };\n    return eachSeries;\n  });\n  const props = {\n    data: {\n      categories: categoriesData,\n      series: seriesData,\n    },\n    colors: colors,\n    chartOption: {\n      yAxisTitle: \"y axis title\",\n      tooltipShare: true,\n      stacking: \"normal\",\n      dataLabels: false,\n      title: {\n        text: \"title\",\n      },\n      subtitle: {\n        text: \"subtitle\",\n      },\n      ...chartOption,\n    },\n\n    overrideOptions: {},\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nconst getTreemapProps = (data, keys, colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n  const { firstKey, lastKey, valueKeys } = keys;\n  const formatedData = data.reduce((t, i) => {\n    if (!t[i[firstKey]]) {\n      t[i[firstKey]] = {};\n    }\n    t[i[firstKey]][i[lastKey]] = {};\n    valueKeys.forEach((v) => {\n      t[i[firstKey]][i[lastKey]][v] = i[v];\n    });\n    return t;\n  }, {});\n  const props = {\n    data: formatedData,\n    colors: colors,\n    chartOption: {\n      chartName: \"chart name\",\n      title: {\n        text: \"title\",\n      },\n      subtitle: {\n        text: \"subtitle\",\n      },\n      ...chartOption,\n    },\n\n    overrideOptions: {},\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nconst getPieProps = (data, [key, value], colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const dataFormat = data.map((s) => [s[key], s[value]]);\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      type: \"pie\",\n      legend: false,\n      connector: false,\n      ...chartOption,\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nconst handleData = () => {\n  const data = {};\n  const errors = [];\n  queryHashes.forEach(({ hash, id }) => {\n    const result = fetchData(hash);\n    if (result.error) errors.push(`hash${id} : ${result.error}`);\n    data[`hash${id}`] = {\n      ...result,\n      id,\n    };\n  });\n\n  if (Object.values(data).every((d) => !d.isLoading)) {\n    State.update({\n      data: data,\n      error: [...state.error, ...errors],\n      isLoading: false,\n    });\n  }\n};\nconst convertData = (data) => {\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  let converted;\n  try {\n    converted = JSON.parse(data);\n  } catch (er) {\n    converted = data;\n  }\n  return converted;\n};\n\nconst fetchData = (hash) => {\n  const data = fetch(\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\n    {\n      subscribe: true,\n      method: \"GET\",\n      headers: {\n        Accept: \"*/*\",\n      },\n    }\n  );\n  const result = {\n    data: (data && convertData(data.body)) || null,\n    error: (data && !data.ok && (data.status || data.error)) || null,\n    isLoading: !data && !error,\n  };\n\n  return result;\n};\n\nif (state.isLoading) {\n  handleData();\n}\n\nif (state.error.length > 0) {\n  function hide() {\n    const errors = state.error;\n    errors.shift();\n    if (errors.length > 0) setTimeout(hide, 2500);\n    State.update({ error: errors });\n  }\n  setTimeout(hide, 2500);\n}\n//--------------------------------------\nconst getBarRaceProps = (\n  data,\n  [projectKey, dateKey, countKey],\n  colors,\n  chartOption\n) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const dataFormat = data.reduce((t, i) => {\n    const count = i[countKey];\n    const project = i[projectKey];\n    const date = i[dateKey];\n    if (!t[project]) {\n      t[project] = {};\n    }\n    t[project][date] = count;\n    return t;\n  }, {});\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      btn_bg: \"red\", //opt\n      stepTime: 500, //opt\n      barInChart: 3, //opt\n      subBarChart: \"\",\n      title: {\n        text: \"Transaction growth\",\n      },\n      subtitle: {\n        upSize: 20, //opt\n        downSize: 15, //opt\n        positionX: 0, //opt\n        positionY: 0, //opt\n      },\n      ...chartOption,\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nlet bar_race_trxs = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.barrace_tab === barrace_tabs.left ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div\n      style={{ background: themeColor?.sbt_area?.card_bg }}\n      className=\"w-100 mx-auto shadow-sm rounded-4\"\n    >\n      <Widget\n        src=\"lord1.near/widget/bar-race\"\n        props={getBarRaceProps(\n          state.data?.hash8?.data,\n          [\"BLOCKCHAIN\", \"DATE\", \"TOTAL_TXS\"],\n          themeColor.chartColor,\n          {\n            btn_bg: \"\",\n            stepTime: 500,\n            barInChart: 20,\n            subBarChart: \"\",\n            title: {\n              text: \"Top 20 network in terms of transaction number\",\n            },\n            subtitle: {\n              upSize: 20,\n              downSize: 15,\n              positionX: 0,\n              positionY: 0,\n            },\n          }\n        )}\n      />\n    </div>\n  </div>\n);\nlet bar_race_user = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.barrace_tab === barrace_tabs.middle ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <Widget\n      src=\"lord1.near/widget/bar-race\"\n      props={getBarRaceProps(\n        state.data?.hash8?.data,\n        [\"BLOCKCHAIN\", \"DATE\", \"TOTAL_FEES_USDS\"],\n        themeColor.chartColor,\n        {\n          btn_bg: \"\",\n          stepTime: 500,\n          barInChart: 20,\n          subBarChart: \"\",\n          title: {\n            text: \"Top 20 network in terms of fee (USD)\",\n          },\n          subtitle: {\n            upSize: 20,\n            downSize: 15,\n            positionX: 0,\n            positionY: 0,\n          },\n        }\n      )}\n    />\n  </div>\n);\nlet bar_race_volume = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.barrace_tab === barrace_tabs.right ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <Widget\n      src=\"lord1.near/widget/bar-race\"\n      props={getBarRaceProps(\n        state.data?.hash8?.data,\n        [\"BLOCKCHAIN\", \"DATE\", \"TPS\"],\n        themeColor.chartColor,\n        {\n          btn_bg: \"\",\n          stepTime: 500,\n          barInChart: 20,\n          subBarChart: \"\",\n          title: {\n            text: \"Top 20 networks in terms of TPS \",\n          },\n          subtitle: {\n            upSize: 20,\n            downSize: 15,\n            positionX: 0,\n            positionY: 0,\n          },\n        }\n      )}\n    />\n  </div>\n);\n//-----------------------------------\n\nlet growth_transaction = (\n  <div className=\" col-12 col-md-12\">\n    <div\n      style={{\n        background: themeColor?.sbt_area?.section_bg,\n        display: state.treemap_tab === treemap_tabs.left ? \"\" : \"none\",\n      }}\n      className=\"shadow-sm rounded-2 overflow-auto p-2\"\n    >\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"w-100 mx-auto shadow-sm rounded-4\"\n      >\n        <h6\n          style={{ color: themeColor?.sbt_area?.card_title_color }}\n          className=\"pt-4 ps-4\"\n        ></h6>\n        <Widget\n          src=\"lord1.near/widget/treemap-chart\"\n          props={getTreemapProps(\n            state.data?.hash9?.data,\n            {\n              firstKey: \"BLOCKCHAIN\",\n              valueKeys: [\"TOTAL_TX\"],\n            },\n            themeColor.chartColor,\n            {\n              yAxisTitle: \"y axis title\",\n              tooltipShare: true,\n              stacking: \"percent\",\n              dataLabels: false,\n              title: {\n                text: \"Transaction dominance (successful + failed)\",\n              },\n              subtitle: {\n                text: \"\",\n              },\n            }\n          )}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nlet growth_user = (\n  <div className=\" col-12 col-md-12\">\n    <div\n      style={{\n        background: themeColor?.sbt_area?.section_bg,\n        display: state.treemap_tab === treemap_tabs.middle ? \"\" : \"none\",\n      }}\n      className=\"shadow-sm rounded-2 overflow-auto p-2\"\n    >\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"w-100 mx-auto shadow-sm rounded-4\"\n      >\n        <h6\n          style={{ color: themeColor?.sbt_area?.card_title_color }}\n          className=\"pt-4 ps-4\"\n        ></h6>\n        <Widget\n          src=\"lord1.near/widget/treemap-chart\"\n          props={getTreemapProps(\n            state.data?.hash9?.data,\n            {\n              firstKey: \"BLOCKCHAIN\",\n              valueKeys: [\"TOTAL_FEES_USD\"],\n            },\n            themeColor.chartColor,\n            {\n              yAxisTitle: \"y axis title\",\n              tooltipShare: true,\n              stacking: \"percent\",\n              dataLabels: false,\n              title: {\n                text: \"Fee (USD) dominance\",\n              },\n              subtitle: {\n                text: \"\",\n              },\n            }\n          )}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nlet growth_volume = (\n  <div className=\" col-12 col-md-12\">\n    <div\n      style={{\n        background: themeColor?.sbt_area?.section_bg,\n        display: state.treemap_tab === treemap_tabs.right ? \"\" : \"none\",\n      }}\n      className=\"shadow-sm rounded-2 overflow-auto p-2\"\n    >\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"w-100 mx-auto shadow-sm rounded-4\"\n      >\n        <h6\n          style={{ color: themeColor?.sbt_area?.card_title_color }}\n          className=\"pt-4 ps-4\"\n        ></h6>\n        <Widget\n          src=\"lord1.near/widget/treemap-chart\"\n          props={getTreemapProps(\n            state.data?.hash9?.data,\n            {\n              firstKey: \"BLOCKCHAIN\",\n              valueKeys: [\"BLOCK_COUNT\"],\n            },\n            themeColor.chartColor,\n            {\n              yAxisTitle: \"y axis title\",\n              tooltipShare: true,\n              stacking: \"percent\",\n              dataLabels: false,\n              title: {\n                text: \"Blocks dominance (Number of blocks)\",\n              },\n              subtitle: {\n                text: \"\",\n              },\n            }\n          )}\n        />\n      </div>\n    </div>\n  </div>\n);\n//-----------------------------------\n\nlet fourth = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.tab === tabs.left ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"shadow-sm rounded-2 overflow-auto\"\n      >\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.data?.hash4?.data,\n            rowsCount: 15,\n            columns: [\n              {\n                title: \"Blockchain\",\n                key: \"BLOCKCHAIN\",\n                colors: \"#8b76f3\",\n              },\n\n              {\n                title: \"Block Count\",\n                key: \"BLOCK_COUNT\",\n                colors: \"#8b76f3\",\n                round: \"yes\",\n              },\n              {\n                title: \"Transactions\",\n                key: \"TOTAL_TX\",\n                description: \"Number of transactions in last 7 days\",\n                round: \"yes\",\n              },\n              {\n                title: \"Successful Transactions\",\n                key: \"TRANSACTION_COUNT_SUCCESS\",\n                description: \"Number of Successful transactions in last 7 days\",\n                round: \"yes\",\n              },\n              {\n                title: \"Failed Transactions\",\n                key: \"TRANSACTION_COUNT_FAILED\",\n                description: \"Number of Failed transactions in last 7 days\",\n                round: \"yes\",\n              },\n              {\n                title: \"Success Rate\",\n                key: \"SUCCESS_RATE\",\n                description:\n                  \"refers to the percentage of transactions that are successfully completed or confirmed on the blockchain out of the total number of attempted transactions over a given period.\",\n                round: \"yes\",\n              },\n              {\n                title: \"TPS\",\n                key: \"TPS\",\n                round: \"yes\",\n              },\n              {\n                title: \"Total Fee (USD)\",\n                key: \"TOTAL_FEES_USD\",\n\n                round: \"yes\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  </div>\n);\nlet fifth = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.tab === tabs.middle ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"shadow-sm rounded-2 overflow-auto\"\n      >\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.data?.hash3?.data,\n            rowsCount: 15,\n            columns: [\n              {\n                title: \"Blockchain\",\n                key: \"BLOCKCHAIN\",\n                colors: \"#8b76f3\",\n              },\n\n              {\n                title: \"Block Count\",\n                key: \"BLOCK_COUNT\",\n                colors: \"#8b76f3\",\n                round: \"yes\",\n              },\n              {\n                title: \"Transactions\",\n                key: \"TOTAL_TX\",\n                description: \"Number of transactions in last 30 days\",\n                round: \"yes\",\n              },\n              {\n                title: \"Successful Transactions\",\n                key: \"TRANSACTION_COUNT_SUCCESS\",\n                description:\n                  \"Number of Successful transactions in last 30 days\",\n                round: \"yes\",\n              },\n              {\n                title: \"Failed Transactions\",\n                key: \"TRANSACTION_COUNT_FAILED\",\n                description: \"Number of Failed transactions in last 30 days\",\n                round: \"yes\",\n              },\n              {\n                title: \"Success Rate\",\n                key: \"SUCCESS_RATE\",\n                description:\n                  \"refers to the percentage of transactions that are successfully completed or confirmed on the blockchain out of the total number of attempted transactions over a given period.\",\n                round: \"yes\",\n              },\n              {\n                title: \"TPS\",\n                key: \"TPS\",\n                round: \"yes\",\n              },\n              {\n                title: \"Total Fee (USD)\",\n                key: \"TOTAL_FEES_USD\",\n\n                round: \"yes\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  </div>\n);\nlet sixth = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.tab === tabs.right ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"shadow-sm rounded-2 overflow-auto\"\n      >\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.data?.hash6?.data,\n            rowsCount: 15,\n            columns: [\n              {\n                title: \"Blockchain\",\n                key: \"BLOCKCHAIN\",\n                colors: \"#8b76f3\",\n              },\n              {\n                title: \"Active Days\",\n                key: \"DATE_COUNT\",\n                colors: \"#8b76f3\",\n              },\n              {\n                title: \"Block Count\",\n                key: \"BLOCK_COUNT\",\n                colors: \"#8b76f3\",\n                round: \"yes\",\n              },\n              {\n                title: \"Transactions\",\n                key: \"TOTAL_TX\",\n                description: \"Number of transactions in total\",\n                round: \"yes\",\n              },\n              {\n                title: \"Successful Transactions\",\n                key: \"TRANSACTION_COUNT_SUCCESS\",\n                description: \"Number of Successful transactions in total\",\n                round: \"yes\",\n              },\n              {\n                title: \"Failed Transactions\",\n                key: \"TRANSACTION_COUNT_FAILED\",\n                description: \"Number of Failed transactions in total\",\n                round: \"yes\",\n              },\n              {\n                title: \"Success Rate\",\n                key: \"SUCCESS_RATE\",\n                description:\n                  \"refers to the percentage of transactions that are successfully completed or confirmed on the blockchain out of the total number of attempted transactions over a given period.\",\n                round: \"yes\",\n              },\n              {\n                title: \"TPS\",\n                key: \"TPS\",\n                round: \"yes\",\n              },\n              {\n                title: \"Total Fee (USD)\",\n                key: \"TOTAL_FEES_USD\",\n\n                round: \"yes\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nlet fourth_day = (\n  <div\n    style={{\n      background: themeColor?.sbt_area?.section_bg,\n      display: state.tab === tabs.left_day ? \"\" : \"none\",\n    }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"row w-100 pb-2 px-2 mx-0\">\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"shadow-sm rounded-2 overflow-auto\"\n      >\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.data?.hash5?.data,\n            rowsCount: 15,\n            columns: [\n              {\n                title: \"Blockchain\",\n                key: \"BLOCKCHAIN\",\n                colors: \"#8b76f3\",\n              },\n\n              {\n                title: \"Block Count\",\n                key: \"BLOCK_COUNT\",\n                colors: \"#8b76f3\",\n                round: \"yes\",\n              },\n              {\n                title: \"Transactions\",\n                key: \"TOTAL_TX\",\n                description: \"Number of transactions today\",\n                round: \"yes\",\n              },\n              {\n                title: \"Successful Transactions\",\n                key: \"TRANSACTION_COUNT_SUCCESS\",\n                description: \"Number of Successful transactions today\",\n                round: \"yes\",\n              },\n              {\n                title: \"Failed Transactions\",\n                key: \"TRANSACTION_COUNT_FAILED\",\n                description: \"Number of Failed transactions today\",\n                round: \"yes\",\n              },\n              {\n                title: \"Success Rate\",\n                key: \"SUCCESS_RATE\",\n                description:\n                  \"refers to the percentage of transactions that are successfully completed or confirmed on the blockchain out of the total number of attempted transactions over a given period.\",\n                round: \"yes\",\n              },\n              {\n                title: \"TPS\",\n                key: \"TPS\",\n                round: \"yes\",\n              },\n              {\n                title: \"Total Fee (USD)\",\n                key: \"TOTAL_FEES_USD\",\n                round: \"yes\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  </div>\n);\nreturn (\n  <div className=\"container-fluid py-2\">\n    <div className=\"pl-2\">\n      <Widget\n        src=\"lord1.near/widget/header-dynamic\"\n        props={platform_leaderboard}\n      />\n      <div className=\"w-100 d-flex justify-content-left\">\n        <Container>\n          <ul className=\"tabContent\">\n            {Object.values(tabs).map((tab) => (\n              <li key={tab} className=\"tab-item\">\n                <button\n                  className={`${state.tab === tab ? \"active\" : \"\"}`}\n                  aria-current=\"page\"\n                  onClick={() => setTab(tab)}\n                >\n                  {tab}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </Container>\n      </div>\n      {fourth_day}\n      {fourth}\n      {fifth} {sixth}\n      <div className=\"row w-100 py-4 g-4\">\n        <div className=\" col-12 col-md-12\">\n          {\" \"}\n          <Widget\n            src=\"lord1.near/widget/header-dynamic\"\n            props={platform_dominance}\n          />\n          <div className=\"w-100 d-flex justify-content-left\">\n            <Container>\n              <ul className=\"tabContent\">\n                {Object.values(treemap_tabs).map((treemap_tab) => (\n                  <li key={treemap_tab} className=\"tab-item\">\n                    <button\n                      className={`${\n                        state.treemap_tab === treemap_tab ? \"active\" : \"\"\n                      }`}\n                      aria-current=\"page\"\n                      onClick={() => setTab2(treemap_tab)}\n                    >\n                      {treemap_tab}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </Container>\n          </div>{\" \"}\n          {growth_transaction}\n          {growth_user}\n          {growth_volume}\n        </div>\n        <div className=\" col-12 col-md-12\">\n          <Widget\n            src=\"lord1.near/widget/header-dynamic\"\n            props={platform_growth}\n          />\n          <div className=\"w-100 d-flex justify-content-left\">\n            <Container>\n              <ul className=\"tabContent\">\n                {Object.values(barrace_tabs).map((barrace_tab) => (\n                  <li key={barrace_tab} className=\"tab-item\">\n                    <button\n                      className={`${\n                        state.barrace_tab === barrace_tab ? \"active\" : \"\"\n                      }`}\n                      aria-current=\"page\"\n                      onClick={() => setTab1(barrace_tab)}\n                    >\n                      {barrace_tab}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </Container>\n          </div>\n          {bar_race_trxs}\n          {bar_race_user}\n          {bar_race_volume}\n        </div>{\" \"}\n      </div>\n      <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\n        {state.error.length > 0 &&\n          state.error.map((er) => (\n            <div\n              className=\"toast show align-items-center text-bg-danger border-0\"\n              role=\"alert\"\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n            >\n              <div className=\"d-flex\">\n                <div className=\"toast-body\">{er}</div>\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  </div>\n);\n\n// const props = {\n//   themeColor: {\n//     dynamic_header: {\n//       afterbrandcolor: \"#789efb\",\n//       color1brand: \"#000\",\n//       color2brand: \"#806ce1\",\n//       colordescription: \"#806ce1\",\n//       background:\n//         \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n//     },\n//     tab_sbt: {\n//       backgroundColor: \"rgb(49,62,89)\",\n//       textColor: \"#fff\",\n//       headerColor: \"#806ce1\",\n//       numberColor: \"#fff\",\n//     },\n//     sbt_area: {\n//       section_bg: \"rgba(25,33,80)\",\n//       card_bg: \"rgb(49, 62, 89)\",\n//       card_title_color: \"#806ce1\",\n//     },\n//   },\n// };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/forefront_tak.near/widget/Forefront.Widget.Network.Leaderboard", "fact_widget_deployments_id": "5475c2d508800c7ce27aaf59060f8597", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}