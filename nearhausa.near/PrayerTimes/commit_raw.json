{"tx_hash": "2JLfWDpKa5V9jv8exAjbsN74cJDPamb6vX3n6k2LqFHA", "action_id_social": "H4DMkqis9VzaSsmgR5vg8gYiruzPBekAGGZtNGsiAqL7-0-widget", "block_id": 97222646, "block_timestamp": "2023-07-24T12:38:59.854Z", "signer_id": "nearhausa.near", "widget_name": "PrayerTimes", "source_code": "State.init({\n  higriDate: higriDatee,\n  selectedOption: \"\",\n  isOpen: false,\n  date: \"\",\n  location: \"\",\n  prayers: {},\n  upcomingPrayerName: \"...\",\n  upcomingPrayerTime: \"\",\n  countdown: \"00:00:00\",\n});\n\n// today's date formatted\nconst date = new Date();\n\nconst currentDay = (\"0\" + date.getDate()).slice(-2);\nconst currentMonth = (\"0\" + (date.getMonth() + 1)).slice(-2); //\nconst currentYear = date.getFullYear();\n\nconst currentDate = `${currentDay}-${currentMonth}-${currentYear}`;\nconst currentDateReversedFormat = `${currentYear}-${currentMonth}-${currentDay}`;\n\nconst calcUpcomingPrayer = (prayers) => {\n  // calc upcoming salah\n  const time =\n    (\"0\" + date.getHours()).slice(-2) +\n    \":\" +\n    (\"0\" + date.getMinutes()).slice(-2);\n\n  const prayerNames = Object.keys(prayers);\n  for (let i = 0; i < prayerNames.length; i++) {\n    const prayTime = prayers[prayerNames[i]];\n    let countdownDate = new Date(`${currentDateReversedFormat}T${prayTime}`);\n\n    if (time < prayTime) {\n      return State.update({\n        upcomingPrayerName: prayerNames[i],\n        upcomingPrayerTime: countdownDate,\n      });\n    }\n\n    if (prayerNames[i] === \"Isha\") {\n      // set upcoming pray to Fajr(tomorrow)\n      const fagrPrayer = prayers[\"Fajr\"];\n      countdownDate = new Date(`${currentDateReversedFormat}T${fagrPrayer}`);\n      var day = 60 * 60 * 24 * 1000;\n      const newDay = new Date(countdownDate.getTime() + day);\n      return State.update({\n        upcomingPrayerName: \"Fajr\",\n        upcomingPrayerTime: newDay,\n      });\n    }\n  }\n};\nconst setCountDown = () => {\n  if (state.upcomingPrayerTime) {\n    // Calculate the time difference in milliseconds\n    var timeDiff = Math.abs(\n      state.upcomingPrayerTime.getTime() - date.getTime()\n    );\n\n    // Calculate the difference in hours, minutes, and seconds\n    var diffHours = Math.floor(timeDiff / (1000 * 3600));\n    var diffMinutes = Math.floor((timeDiff % (1000 * 3600)) / (1000 * 60));\n    var diffSeconds = Math.floor((timeDiff % (1000 * 60)) / 1000);\n\n    var formattedDiff =\n      (\"0\" + diffHours).slice(-2) +\n      \":\" +\n      (\"0\" + diffMinutes).slice(-2) +\n      \":\" +\n      (\"0\" + diffSeconds).slice(-2);\n\n    State.update({\n      countdown: formattedDiff,\n    });\n    calcUpcomingPrayer(state.prayers);\n  }\n  setTimeout(setCountDown, 1000);\n};\nsetCountDown();\nconst options = [\n  { label: \"Muslim World League\", value: \"3\" },\n  { label: \"Islamic Society of North America (ISNA)\", value: \"2\" },\n  { label: \"Egyptian General Authority of Survey\", value: \"5\" },\n  { label: \"Umm Al-Qura University, Makkah\", value: \"4\" },\n  { label: \"University of Islamic Sciences, Karachi\", value: \"1\" },\n  {\n    label: \"Institute of Geophysics, University of Tehran\",\n    value: \"7\",\n  },\n  { label: \"Shia Ithna-Ashari, Leva Institute, Qum\", value: \"0\" },\n  { label: \"Gulf Region\", value: \"8\" },\n  { label: \"Kuwait\", value: \"9\" },\n  { label: \"Qatar\", value: \"10\" },\n  { label: \"Majlis Ugama Islam Singapura, Singapore\", value: \"11\" },\n  { label: \"Union Organization Islamic de France\", value: \"12\" },\n  {\n    label: \"Diyanet \\u0130\\u015fleri Ba\\u015fkanl\\u0131\\u011f\\u0131, Turkey\",\n    value: \"13\",\n  },\n  {\n    label: \"Spiritual Administration of Muslims of Russia\",\n    value: \"14\",\n  },\n  {\n    label: \"Moonsighting Committee Worldwide\",\n    value: \"15\",\n  },\n  { label: \"Dubai\", value: \"16\" },\n];\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  padding: 1rem;\n`;\nconst Location = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: #54433a;\n  justify-content: space-between;\n  text-align: center;\n  gap: 0.25rem;\n`;\nconst City = styled.div`\n  font-weight: 700;\n`;\nconst CurrentPrayer = styled.div`\n  font-weight: 700;\n  text-align: center;\n  margin-top: 1rem;\n`;\nconst PrayerTime = styled.div`\n  font-weight: 700;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n  text-align: center;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  padding-left: 2rem;\n  padding-right: 2rem;\n  background-color: #fdb28b;\n  border-radius: 0.375rem;\n  overflow: hidden;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n`;\nconst Label = styled.div`\n  font-weight: 700;\n  color: #54433a;\n`;\nconst SelectContainer = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst SelectButton = styled.div`\n  padding: 8px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst DropdownContainer = styled.div`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  padding: 4px 0px;\n  background: #fff;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst OptionItem = styled.div`\n  padding: 8px 12px;\n  cursor: pointer;\n  :hover {\n    background-color: #fee7dc;\n  }\n`;\nconst PrayerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n`;\nconst Prayer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst PrayerName = styled.div`\n  display: flex;\n  gap: 0.25rem;\n  align-items: center;\n`;\nconst handleSelectClick = () => {\n  State.update({ isOpen: !state.isOpen });\n};\n\nconst handleOptionClick = async (option) => {\n  State.update({ isOpen: false, selectedOption: option });\n\n  const res = asyncFetch(\n    \"https://api.geoapify.com/v1/ipinfo?&apiKey=0485481476634b4d98f7d337d4821f52\"\n  )\n    .then((data) => {\n      const { longitude, latitude } = data.body.location;\n      State.update({\n        location: data.body.city.name + \", \" + data.body.country.name,\n      });\n      return asyncFetch(\n        `https://api.aladhan.com/v1/timings/17-07-2007?latitude=${latitude}&longitude=${longitude}&method=${option}`\n      );\n    })\n    .then((data) => {\n      const { timings, date } = data.body.data;\n      const higriDate = `${date.hijri.weekday.en},${date.hijri.month.en}, ${date.hijri.year}`;\n\n      const prayers = {\n        Fajr: timings.Fajr,\n        Sunrise: timings.Sunrise,\n        Dhuhr: timings.Dhuhr,\n        Asr: timings.Asr,\n        Maghrib: timings.Maghrib,\n        Isha: timings.Isha,\n      };\n      calcUpcomingPrayer(prayers);\n      State.update({ prayers: prayers, date: higriDate });\n    })\n    .catch((err) => console.log(err));\n};\n\nreturn (\n  <Container>\n    <Location>\n      <City>{state.location}</City>\n      <div>{state.date}</div>\n    </Location>\n\n    <CurrentPrayer>{state.upcomingPrayerName} is in</CurrentPrayer>\n    <PrayerTime key={state.countdown}>{state.countdown}</PrayerTime>\n    <Container>\n      <Label>Prayer time conventions</Label>\n      <SelectContainer>\n        <SelectButton\n          onClick={handleSelectClick}\n          style={{\n            color: state.selectedOption ? \"#000\" : \"#BCA79D\",\n          }}\n        >\n          {state.selectedOption ? state.selectedOption.label : \"Select\"}\n          <svg\n            style={{ transform: `rotate(${state.isOpen ? \"180deg\" : \"0\"})` }}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height=\"1em\"\n            viewBox=\"0 0 448 512\"\n          >\n            <path d=\"M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\" />\n          </svg>\n        </SelectButton>\n        {state.isOpen && (\n          <DropdownContainer>\n            {options.map((option) => (\n              <OptionItem\n                key={option.value}\n                onClick={() => handleOptionClick(option)}\n              >\n                {option.label}\n              </OptionItem>\n            ))}\n          </DropdownContainer>\n        )}\n      </SelectContainer>\n    </Container>\n    <PrayerContainer>\n      {state.selectedOption &&\n        Object.keys(state.prayers).map((key) => (\n          <Prayer key={key}>\n            <PrayerName>\n              <svg\n                fill=\"#fdb28b\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height=\"1em\"\n                viewBox=\"0 0 512 512\"\n              >\n                <path d=\"M256 0a256 256 0 1 1 0 512A256 256 0 1 1 256 0zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z\" />\n              </svg>\n\n              {key}\n            </PrayerName>\n            <div>{state.prayers[key]}</div>\n          </Prayer>\n        ))}\n    </PrayerContainer>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearhausa.near/widget/PrayerTimes", "fact_widget_deployments_id": "a9542170066a05fffa0747052d5ba861", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}