{"tx_hash": "FbBmLf1BLFmyqqRCHzncEFvMmoZXTz7wPUHcy9Jk2rqw", "action_id_social": "EaRQ6rv5wDf8sESB6MQwCEdCgsyBhHbTFM44p9VmNPfC-0-widget", "block_id": 105360600, "block_timestamp": "2023-11-10T08:53:59.936Z", "signer_id": "quex.near", "widget_name": "Index", "source_code": "State.init({ txHistory: [], viewNonce: 0 });\nif (!context.accountId) {\n  return (\n    <>\n      Please create an account on{\" \"}\n      <a href=\"https://wallet.near.org/\">https://wallet.near.org/</a> and login\n    </>\n  );\n}\n\nfunction getNearBalance(accountId) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  };\n  asyncFetch(\"https://rpc.mainnet.near.org\", options).then((res) => {\n    const { amount, storage_usage } = res.body.result;\n    const COMMON_MIN_BALANCE = 0.05;\n\n    let newBalance = \"-\";\n    if (amount) {\n      const availableBalance = Big(amount || 0).minus(\n        Big(storage_usage).mul(Big(10).pow(19))\n      );\n      const balance = availableBalance\n        .div(Big(10).pow(24))\n        .minus(COMMON_MIN_BALANCE);\n      newBalance = balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN);\n    }\n    State.update({\n      nearBalance: newBalance,\n    });\n  });\n}\n\nconst getPublicKeyUrl = \"https://quex.nearspace.info/pk\";\nconst contractId = \"hack.quex.near\";\ngetNearBalance(contractId);\n\nif (!state.publicKey) {\n  const publicKeyRequest = fetch(getPublicKeyUrl);\n  if (!publicKeyRequest.ok) {\n    return \"Loading Public Key\";\n  } else {\n    State.update({ publicKey: JSON.parse(publicKeyRequest.body)?.pk ?? \"NaN\" });\n  }\n}\n\nconst messages = Near.view(contractId, \"getMessages\", {\n  account_id: context.accountId,\n  viewNonce: state.viewNonce,\n});\nconsole.log(\"getMessages\", messages, context.accountId);\n\nconst serverUrl = \"https://quex.nearspace.info\";\n\nif (props.transactionHashes) {\n  const txToLoad = props.transactionHashes;\n  if (state.txHistory.includes(txToLoad)) {\n    console.log(\"Already loaded\");\n  } else {\n    console.log(\"txhash\", txToLoad);\n\n    const txHistory = state.txHistory;\n    txHistory.push(txToLoad);\n    State.update({ isLoading: true, txToLoad });\n\n    asyncFetch(`${serverUrl}/?txhash=${txToLoad}&pk=${state.publicKey}`).then(\n      (fetchData) => {\n        const txData = fetchData.body;\n        console.log(txData);\n        let viewNonce = state.viewNonce;\n        State.update({\n          response: txData,\n          isLoading: false,\n          txToLoad: \"\",\n          viewNonce: viewNonce + 1,\n        });\n      }\n    );\n  }\n}\n\nconst Send = () => {\n  Near.call(\n    contractId,\n    \"addRequest\",\n    { msg: state.msg },\n    100000000000000,\n    100000000000000000000000\n  );\n};\nreturn (\n  <div>\n    <h1 class=\"pb-3\">\n      <a href=\"/quex.near/widget/Index\">Quex</a>\n    </h1>\n    <h4>Current Treasury: {state.nearBalance} NEAR</h4>\n    <p>\n      I am Stephen, an application manager at the Near Protocol Grant program.\n      My role is to validate the grant proposal and provide a response of\n      \"funded\" if the proposal meets our criteria or \"declined\" if it does not.\n      To ensure the proposal aligns with our program's requirements, it must be\n      innovative, decentralized, and valuable to the NEAR ecosystem. I'll ask\n      additional questions about the proposal one by one. Before asking these\n      questions, I will respond with a single word, and I'll make sure the\n      proposal follows our grant program criteria. If a message does not\n      describe the proposal, I'll reply with \"Please, focus on your proposal,\"\n      ask one more question, and then make a decision.\n    </p>\n    <ul class=\"pb-3\">\n      <li>\n        <span class=\"text-success\">Stephen</span>: Hi there! How can I help?\n      </li>\n      {(messages ?? []).map((message) => (\n        <li>\n          {message[0] == \"Bot\" ? (\n            <span class=\"text-success\">Stephen:</span>\n          ) : (\n            \"User:\"\n          )}\n\n          {[\"funded\", \"funded.\"].includes(message[1].toLowerCase()) ? (\n            <span class=\"text-success fw-bold\">\n              CONGRATS! YOU GOT FUNDING! CHECK YOU WALLET!\n            </span>\n          ) : (\n            message[1]\n          )}\n        </li>\n      ))}\n    </ul>\n    <div>\n      <div>Message:</div>\n      <textarea\n        style={{ width: \"500px\", height: \"120px\" }}\n        onChange={(e) => State.update({ msg: e.target.value })}\n      />\n    </div>\n    <div>\n      <button\n        value=\"Send\"\n        onClick={Send}\n        onChange={(e) => State.update({ msg: e.target.value })}\n      >\n        Send\n      </button>\n    </div>\n    <p>Use English only</p>\n    <div class=\"pt-4\">\n      {state.isLoading && <>Loading...</>}\n      {state.isLoading && state.txToLoad && (\n        <>Your pending tx: {state.txToLoad}</>\n      )}\n      {state.response && (\n        <>\n          Verification for debug: {JSON.parse(state.response)[\"logs\"]}\n          Response: <hr />\n          <a\n            target=\"_blank\"\n            href={`https://explorer.near.org/transactions/${\n              JSON.parse(state.response)[\"id\"]\n            }`}\n          >\n            Response Id {JSON.parse(state.response)[\"id\"]}\n          </a>\n        </>\n      )}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/quex.near/widget/Index", "fact_widget_deployments_id": "06e28f073fdc2aa04f9c6afaa407f99a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 75}