{"tx_hash": "5oTcXK7tBTSVLkdjo17qan1KYxvV9XxZJvi4ahNgUbPY", "action_id_social": "6zwSY7FJaFcMfZwDHjvEfjaLiUvPM7a9dAvxApn1dTxw-0-widget", "block_id": 97100012, "block_timestamp": "2023-07-22T22:31:13.700Z", "signer_id": "pikqi.near", "widget_name": "gnovest", "source_code": "State.init({ styles: undefined, tab: 1 });\n\nconst TWStyles = state.styles;\nconst css = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/658b6ee444d26dd69f0d5150797077dd/raw/d8f929729176bb30d86e2839443fddb83a87a685/tw-all-classes.css\",\n);\n\nif (!css.ok) {\n  return <Widget src=\"nui.sking.near/widget/Feedback.Spinner\" />;\n}\n\nif (!state.styles) {\n  State.update({\n    styles: styled.div`\n      font-family:\n        Manrope,\n        -apple-system,\n        BlinkMacSystemFont,\n        Segoe UI,\n        Roboto,\n        Oxygen,\n        Ubuntu,\n        Cantarell,\n        Fira Sans,\n        Droid Sans,\n        Helvetica Neue,\n        sans-serif;\n      ${css.body}\n    `,\n  });\n}\n\nif (state.user === undefined) {\n  State.update({ user: Ethers.send(\"eth_requestAccounts\", [])[0] });\n}\nif (!state.user) return <Web3Connect />;\n\nif (state.chainId === undefined && ethers !== undefined && state.user) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nif (state.chainId !== undefined && state.chainId != 100) {\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0x64\",\n    },\n  ]);\n\n  return (\n    <TWStyles>\n      <p class=\"text-3xl\">\n        Your current network is not supported please switch to Gnosis mainnet\n      </p>\n    </TWStyles>\n  );\n}\n\n// Helper functions\n\nfunction getCurrentUnixTimestamp() {\n  const currentTimeInMillis = new Date().getTime();\n  const currentUnixTimestamp = Math.floor(currentTimeInMillis / 1000); // Convert to seconds\n  return currentUnixTimestamp;\n}\nconst unixTimestampToLocalDate = (unixTimestamp) => {\n  // Convert the timestamp to milliseconds (since Date works with milliseconds)\n  const timestampInMillis = unixTimestamp * 1000;\n\n  // Create a new Date object using the timestamp\n  const date = new Date(timestampInMillis);\n\n  // Get the local date components\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n  const hours = date.getHours().toString().padStart(2, \"0\");\n  const minutes = date.getMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getSeconds().toString().padStart(2, \"0\");\n\n  // Format the date as \"YYYY-MM-DD HH:mm:ss\" (e.g., \"2023-07-22 12:34:56\")\n  const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\n  return formattedDate;\n};\n\nconst weisToTokens = (weis) => {\n  const decimals = 18;\n  const tokens = weis / Math.pow(10, decimals);\n  return tokens;\n};\nconst userPortionsQuery = `\n query {\n  organizationParticipants(\n    where: {user: \"0x7969CEF7597a620d850f8d5F648006c1539CEF2e\"}\n  ) {\n    timestamp\n    withdrawn\n    amount\n\t\tportion_id\n  }\n}`;\n\nconst promise = fetch(\n  \"https://api.studio.thegraph.com/proxy/50046/gnovest-graph/version/latest\",\n  {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query: userPortionsQuery }),\n  },\n);\n\n// Interacting with organisation contract\nconst MANAGER_ABI_URL =\n  \"https://gist.githubusercontent.com/Pikqi/31155cc8857c7ae56d087919ca83b8b0/raw/a98651a8574a161e86bf3017b27eac7a5b6843e0/gvestabi.json\";\nconst managerAbi = fetch(MANAGER_ABI_URL);\n\nif (!managerAbi.ok) {\n  return \"Loading managerAbi\";\n}\nconst managerIface = new ethers.utils.Interface(JSON.parse(managerAbi.body));\nconsole.log(managerIface);\n\nconst handleWithdraw = () => {\n  state.userPortions.data.organizationParticipants.map((port) => {\n    console.log(\n      parseInt(port.timestamp),\n      getCurrentUnixTimestamp(),\n      port.withdrawn,\n    );\n  });\n  const portionsAvailable = state.userPortions.data.organizationParticipants\n    .filter(\n      (portion) =>\n        portion.withdrawn === \"0\" &&\n        parseInt(portion.timestamp) < getCurrentUnixTimestamp(),\n    )\n    .map((portion) => parseInt(portion.portion_id));\n\n  console.log(portionsAvailable);\n  //0x2a8ec7e12b95c8f68b53aea6c05e668d48515414\n  let contract = new ethers.Contract(\n    \"0x07702598b9ec60a6da8ea2d3ddfd06ddb82615f6\",\n    managerIface,\n    Ethers.provider().getSigner(),\n  );\n  console.log(contract);\n  contract\n    .withdrawTokensFromOrganization(\n      \"0x2A8eC7E12b95C8f68B53aeA6c05E668d48515414\",\n      portionsAvailable,\n    )\n    .then((result) => {\n      console.log(result);\n    })\n    .catch((e) => {\n      console.log(e);\n    });\n};\n\nif (promise.ok) {\n  console.log(promise.body);\n  State.update({ userPortions: promise.body });\n}\n\nconsole.log(state.userPortions);\nreturn (\n  <TWStyles>\n    <div class=\"flex gap-3\" />\n    <p>{JSON.stringify(state.userPortions)}</p>\n    <button onClick={() => State.update({ tab: 1 })}>TAB 1</button>\n    <button onClick={() => State.update({ tab: 2 })}>TAB 2</button>\n    {state.tab === 1 ? (\n      <div class=\"flex flex-col flex-gap 3\">\n        {state.userPortions &&\n          state.userPortions.data.organizationParticipants.map(\n            (item, index) => (\n              <div class=\"flex gap-4\">\n                <p>{item.portion_id}</p>\n                <p>{unixTimestampToLocalDate(item.timestamp)}</p>\n                <p>{weisToTokens(item.amount)}</p>\n                <p>\n                  {item.withdrawn === 1\n                    ? \"Claimed\"\n                    : getCurrentUnixTimestamp() > item.timestamp\n                    ? \"Available\"\n                    : \"Not yet available\"}\n                </p>\n              </div>\n            ),\n          )}\n        <button onClick={handleWithdraw}>Withdraw</button>\n      </div>\n    ) : (\n      <h1>TAB 2</h1>\n    )}\n  </TWStyles>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/pikqi.near/widget/gnovest", "fact_widget_deployments_id": "17d3cc6df62e57db02fb5fa1b388a7b1", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}