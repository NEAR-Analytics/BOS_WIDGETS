{"tx_hash": "9jrPEWETZ6CkWL1hSzFLBfStNFuFQsqxJdiyDJku1HzJ", "action_id_social": "2ckoS5n3brzo3PKXaavpBUKLMRM6YcmmaS54YjLikQyo-0-widget", "block_id": 97107330, "block_timestamp": "2023-07-23T00:48:21.841Z", "signer_id": "pikqi.near", "widget_name": "Avalaunch-Staking", "source_code": "State.init({\n  xavaToStake: \"\",\n  styles: undefined,\n  stakeHistory: [],\n  xavaToWithdraw: \"\",\n});\n\nconst TWStyles = state.styles;\nconst css = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/658b6ee444d26dd69f0d5150797077dd/raw/d8f929729176bb30d86e2839443fddb83a87a685/tw-all-classes.css\",\n);\n\nif (!css.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\n\nif (!state.styles) {\n  State.update({\n    styles: styled.div`\n      font-family:\n        Manrope,\n        -apple-system,\n        BlinkMacSystemFont,\n        Segoe UI,\n        Roboto,\n        Oxygen,\n        Ubuntu,\n        Cantarell,\n        Fira Sans,\n        Droid Sans,\n        Helvetica Neue,\n        sans-serif;\n      ${css.body}\n    `,\n  });\n}\n\nif (state.user === undefined) {\n  State.update({ user: Ethers.send(\"eth_requestAccounts\", [])[0] });\n}\nif (!state.user) return <Web3Connect />;\n\nif (state.chainId === undefined && ethers !== undefined && state.user) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\n\nconsole.log(state.user);\n\nif (state.chainId !== undefined && state.chainId != 43114) {\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0xA86A\",\n    },\n  ]);\n  return (\n    <p>Your current network is not supported please switch to Avalanche </p>\n  );\n}\n\n// Get deposit/withdraw history\n\n// Helpers\n\nconst weisToTokens = (weis) => {\n  const decimals = 18;\n  const tokens = weis / Math.pow(10, decimals);\n  return tokens;\n};\n\nconst unixTimestampToLocalDate = (unixTimestamp) => {\n  // Convert the timestamp to milliseconds (since Date works with milliseconds)\n  const timestampInMillis = unixTimestamp * 1000;\n\n  // Create a new Date object using the timestamp\n  const date = new Date(timestampInMillis);\n\n  // Get the local date components\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n  const hours = date.getHours().toString().padStart(2, \"0\");\n  const minutes = date.getMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getSeconds().toString().padStart(2, \"0\");\n\n  const formattedDate = `${day}-${month}-${year} ${hours}:${minutes}`;\n\n  return formattedDate;\n};\n\nconst stakeHistoryQuery = `\n query {\n stakings(\n\t where: {user: \"${state.user}\"}\n\t orderBy: blockTimestamp\n\t orderDirection: desc\n ) {\n\t amount\n\t blockTimestamp\n\t withdraw\n\t deposit\n\t transactionHash\n \n\t}\n}`;\n\nconst promise = fetch(\n  \"https://api.studio.thegraph.com/proxy/50002/avalaunchstakinggraph/version/latest/\",\n  {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query: stakeHistoryQuery }),\n  },\n);\n\nif (promise.ok) {\n  const stakeHistory = promise.body.data.stakings;\n\n  State.update({ stakeHistory });\n  console.log(state.stakeHistory);\n}\n\nconst XAVA_ADDRESS = \"0xd1c3f94DE7e5B45fa4eDBBA472491a9f4B166FC4\";\nconst XAVA_STAKING = \"0xA6A01f4b494243d84cf8030d982D7EeB2AeCd329\";\nconst XAVA_ABIS = fetch(\n  \"https://gist.githubusercontent.com/Pikqi/b26446d1d891f880e85bfd181b5752e9/raw/422ab6565cad003553488c5dfea52c2bc87aa524/xava-abi-staking.json\",\n);\n\nif (!XAVA_ABIS.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\nif (XAVA_ABIS.ok) {\n  State.update({ stakingAbi: JSON.parse(XAVA_ABIS.body) });\n}\n\nconst xavaAllocationIface = new ethers.utils.Interface(state.stakingAbi);\n\nconst ERC20_ABI = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\",\n);\nif (!ERC20_ABI.ok) {\n  return (\n    <Widget\n      props={{\n        color1: \"#ef4444\",\n        color2: \"#7f1d1d\",\n      }}\n      src=\"nui.sking.near/widget/Feedback.Spinner\"\n    />\n  );\n}\n\n// GET XAVA BALANCE\nconst tokenIface = new ethers.utils.Interface(ERC20_ABI.body);\nconst getXavaBalance = () => {\n  const encodedData = tokenIface.encodeFunctionData(\"balanceOf\", [state.user]);\n\n  return Ethers.provider()\n    .call({\n      to: XAVA_ADDRESS,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = tokenIface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance,\n      );\n\n      return Big(receiverBalanceHex.toString()).div(Big(10).pow(18)).toFixed(2);\n    });\n};\n\n// GET STAKED BALANCE\nconst getStakedBalance = () => {\n  const encodedData = xavaAllocationIface.encodeFunctionData(\"deposited\", [\n    0,\n    state.user,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: XAVA_STAKING,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = xavaAllocationIface.decodeFunctionResult(\n        \"deposited\",\n        rawBalance,\n      );\n\n      return Big(receiverBalanceHex.toString()).div(Big(10).pow(18)).toFixed(2);\n    });\n};\n\nconst setXavaBalance = () => {\n  getXavaBalance().then((xavaBalance) => {\n    State.update({ xavaBalance });\n  });\n};\n\nif (state.xavaBalance === undefined && state.user) {\n  setXavaBalance();\n}\n\nconst setStakedXava = () => {\n  getStakedBalance().then((xavaStaked) => {\n    State.update({ xavaStaked });\n  });\n};\n\nif (state.xavaStaked === undefined && state.user) {\n  setStakedXava();\n}\n\nconst convertToWei = (tokens) => {\n  return Big(parseFloat(tokens)).times(Big(10).pow(18)).toFixed(0).toString();\n};\n\nconst handleStakeXava = () => {\n  let contract = new ethers.Contract(\n    XAVA_STAKING,\n    xavaAllocationIface,\n    Ethers.provider().getSigner(),\n  );\n  contract\n    .deposit(\"0\", convertToWei(state.xavaToStake))\n    .then((result) => {\n      console.log(result);\n      State.update({ txHash: result.hash, errorMsg: null });\n    })\n    .catch((e) => {\n      console.log(e);\n      State.update({ errorMsg: e.reason, txHash: null });\n    });\n};\n\nconst handleWithdrawXava = () => {\n  const a = asyncFetch(\n    \"https://api.avalaunch.website/api/v1/staking/withdraw\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        address: state.user,\n        amount: \"1\",\n      }),\n    },\n  )\n    .catch((err) => {\n      console.log(\"error\", err);\n    })\n    .then((result) => {\n      const data = result.body.withdraw;\n      State.update({\n        nonce: data.nonce,\n        expiration_timestamp: data.expiration_timestamp,\n        signature: data.signature,\n      });\n    });\n\n  let contract = new ethers.Contract(\n    XAVA_STAKING,\n    xavaAllocationIface,\n    Ethers.provider().getSigner(),\n  );\n  console.log(\n    \"0\",\n    convertToWei(1),\n    state.nonce,\n    state.expiration_timestamp,\n    state.signature,\n  );\n  contract\n    .withdraw(\n      \"0\",\n      convertToWei(1),\n      state.nonce,\n      state.expiration_timestamp,\n      state.signature,\n    )\n    .then((result) => {\n      console.log(result);\n    })\n    .catch((e) => {\n      console.log(e);\n    });\n};\n\nreturn (\n  <TWStyles>\n    <div class=\"flex flex-col items-center w-full\">\n      <div class=\"bg-slate-100 shadow-lg rounded-xl flex flex-col items-center p-10 h-26 w-8/12\">\n        <div class=\"flex justify-between px-2 w-8/12\">\n          <p>\n            Your Balance:\n            <br /> <span className=\"text-bold\">{state.xavaBalance}</span> XAVA\n          </p>\n          <p>\n            Staked:\n            <br /> {state.xavaStaked} XAVA\n          </p>\n        </div>\n        <div class=\"flex gap-2 w-8/12\">\n          <div class=\"flex flex gap-1 w-full\">\n            <input\n              placeholder=\"Amount to stake\"\n              style={{ flexGrow: 4 }}\n              type=\"number\"\n              onChange={(e) => State.update({ xavaToStake: e.target.value })}\n              value={state.xavaToStake}\n            />\n            <button\n              style={{ flexGrow: 1 }}\n              onClick={handleStakeXava}\n              class=\"h-10 w-full py-3 bg-gradient-to-r from-red-500 to-red-800 rounded justify-center items-center gap-2 inline-flex text-white text-bold border-none\"\n              disabled={\n                parseFloat(state.xavaToStake) > state.xavaBalance ||\n                state.xavaToStake === \"\"\n              }\n            >\n              Stake\n            </button>\n          </div>\n        </div>\n        <div class=\"flex gap-2 w-8/12 mt-3\">\n          <div class=\"flex flex gap-1 w-full\">\n            <input\n              placeholder=\"Amount to withdraw\"\n              style={{ flexGrow: 4 }}\n              type=\"number\"\n              onChange={(e) => State.update({ xavaToWithdraw: e.target.value })}\n              value={state.xavaToWithdraw}\n            />\n            <button\n              style={{ flexGrow: 1 }}\n              onClick={handleStakeXava}\n              class=\"h-10 w-full py-3 bg-gradient-to-r from-red-500 to-red-800 rounded justify-center items-center gap-2 inline-flex text-white text-bold border-none\"\n              onClick={handleWithdrawXava}\n              disabled={\n                parseFloat(state.xavaToWithdraw) > state.xavaStaked ||\n                state.xavaToWithdraw === \"\"\n              }\n            >\n              Withdraw\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bg-slate-100 shadow-lg rounded-2xl flex flex-col items-center px-6 py-7 w-10/12 mt-2\">\n        {state.stakeHistory && (\n          <div class=\"w-full\">\n            <h4 className=\"text-xl\">Your recent deposits/withdrawals:</h4>\n            <div class=\"flex flex-col gap-4\">\n              <div class=\"flex justify-between \">\n                <p>Type</p>\n                <p>Time</p>\n                <p>Amount</p>\n                <p>Transaction</p>\n              </div>\n              {state.stakeHistory.map((stake) => (\n                <div class=\"flex justify-between\">\n                  <p class=\"\">\n                    {stake.deposit === \"1\" ? \"Deposit\" : \"Withdraw\"}\n                  </p>\n                  <p>{unixTimestampToLocalDate(stake.blockTimestamp)}</p>\n                  <p>{weisToTokens(stake.amount).toFixed(2)} XAVA</p>\n                  <a\n                    target=\"_blank\"\n                    class=\"text-red-400 cursor-pointer\"\n                    href={`https://snowtrace.io/tx/${stake.transactionHash}`}\n                  >\n                    View transaction\n                  </a>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </TWStyles>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/pikqi.near/widget/Avalaunch-Staking", "fact_widget_deployments_id": "f98c44f9d389394439a9c0b7d0ed0c25", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}