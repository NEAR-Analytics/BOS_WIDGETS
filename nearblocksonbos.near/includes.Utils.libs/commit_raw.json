{"tx_hash": "6w3Xcg1mCqUyMuzKcspF1QSkd4goNW6SyYJjzwt4Wh81", "action_id_social": "7TVdVAyUGN4ZnasTnvsTXwfQJiegA8mucK5LL3pE7X9d-0-widget", "block_id": 118559967, "block_timestamp": "2024-05-09T07:47:10.129Z", "signer_id": "nearblocksonbos.near", "widget_name": "includes.Utils.libs", "source_code": "\n\nfunction MainComponent() {\n  function formatWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n  function localFormat(number) {\n    const bigNumber = Big(number);\n    const formattedNumber = bigNumber\n      .toFixed(5)\n      .replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'); // Add commas before the decimal point\n    return formattedNumber.replace(/\\.?0*$/, ''); // Remove trailing zeros and the dot\n  }\n\n  function getConfig(network) {\n    switch (network) {\n      case 'mainnet':\n        return {\n          nodeUrl: 'https://rpc.mainnet.near.org',\n          backendUrl: 'https://api3.nearblocks.io/v1/',\n          rpcUrl: 'https://beta.rpc.mainnet.near.org',\n          appUrl: 'https://nearblocks.io/',\n        };\n      case 'testnet':\n        return {\n          nodeUrl: 'https://rpc.testnet.near.org',\n          backendUrl: 'https://api3-testnet.nearblocks.io/v1/',\n          rpcUrl: 'https://beta.rpc.testnet.near.org/',\n          appUrl: 'https://testnet.nearblocks.io/',\n        };\n      default:\n        return {};\n    }\n  }\n\n  function convertAmountToReadableString(amount, type) {\n    if (!amount) return null;\n\n    let value;\n    let suffix;\n\n    const nearNomination = new Big(10).pow(24);\n\n    const amountInNear = new Big(amount).div(nearNomination);\n\n    if (type === 'totalSupply' || type === 'totalStakeAmount') {\n      value = formatWithCommas(amountInNear.div(1e6).toFixed(1));\n      suffix = 'M';\n    } else if (type === 'seatPriceAmount') {\n      value = formatWithCommas(amountInNear.round().toString());\n    } else {\n      value = amount.toString();\n    }\n    return `${value}${suffix}`;\n  }\n\n  function convertTimestampToTime(timestamp) {\n    const timestampBig = new Big(timestamp);\n\n    const hours = timestampBig.div(3600).round(0, 0).toString();\n    const minutes = timestampBig.mod(3600).div(60).round(0, 0).toString();\n    const seconds = timestampBig.mod(60).round(0, 0).toString();\n\n    return `${hours.padStart(2, '0')}H ${minutes.padStart(\n      2,\n      '0',\n    )}M ${seconds.padStart(2, '0')}S`;\n  }\n\n  let attempt = 1;\n  function handleRateLimit(\n    data,\n    reFetch,\n    Loading,\n  ) {\n    if (data.status === 429 || data.status === undefined) {\n      const retryCount = 4;\n      if (attempt <= retryCount) {\n        const delay = Math.pow(2, attempt) * 1000;\n        setTimeout(() => {\n          reFetch();\n          attempt += 1;\n        }, delay);\n      } else {\n        if (Loading) {\n          Loading();\n        }\n      }\n    } else {\n      if (Loading) {\n        Loading();\n      }\n    }\n  }\n  function fetchData(\n    url,\n    callback,\n    options,\n  ) {\n    asyncFetch(url, options)\n      .then((data) => {\n        const resp = data?.body;\n        if (data.status === 200) {\n          callback(resp);\n        } else {\n          handleRateLimit(data, () => fetchData(url, callback, options));\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n        throw error;\n      });\n  }\n  function yoctoToNear(yocto, format) {\n    const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n\n    const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n\n    return format ? localFormat(near) : near;\n  }\n\n  function formatTimestampToString(timestamp) {\n    const date = new Date(timestamp);\n\n    // Format the date to 'YYYY-MM-DD HH:mm:ss' format\n    const formattedDate = date.toISOString().replace('T', ' ').split('.')[0];\n\n    return formattedDate;\n  }\n\n  function nanoToMilli(nano) {\n    return Big(nano).div(Big(10).pow(6)).round().toNumber();\n  }\n\n  function shortenAddress(address) {\n    const string = String(address);\n\n    if (string.length <= 20) return string;\n\n    return `${string.substr(0, 10)}...${string.substr(-7)}`;\n  }\n\n  function truncateString(str, maxLength, suffix) {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength) + suffix;\n  }\n\n  function isAction(type) {\n    const actions = [\n      'DEPLOY_CONTRACT',\n      'TRANSFER',\n      'STAKE',\n      'ADD_KEY',\n      'DELETE_KEY',\n      'DELETE_ACCOUNT',\n    ];\n\n    return actions.includes(type.toUpperCase());\n  }\n\n  function timeAgo(unixTimestamp) {\n    const currentTimestamp = Math.floor(Date.now() / 1000);\n    const secondsAgo = currentTimestamp - unixTimestamp;\n\n    if (secondsAgo < 5) {\n      return 'Just now';\n    } else if (secondsAgo < 60) {\n      return `${secondsAgo} seconds ago`;\n    } else if (secondsAgo < 3600) {\n      const minutesAgo = Math.floor(secondsAgo / 60);\n      return `${minutesAgo} minute${minutesAgo > 1 ? 's' : ''} ago`;\n    } else if (secondsAgo < 86400) {\n      const hoursAgo = Math.floor(secondsAgo / 3600);\n      return `${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;\n    } else if (secondsAgo < 2592000) {\n      const daysAgo = Math.floor(secondsAgo / 86400);\n      return `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`;\n    } else if (secondsAgo < 31536000) {\n      const monthsAgo = Math.floor(secondsAgo / 2592000);\n      return `${monthsAgo} month${monthsAgo > 1 ? 's' : ''} ago`;\n    } else {\n      const yearsAgo = Math.floor(secondsAgo / 31536000);\n      return `${yearsAgo} year${yearsAgo > 1 ? 's' : ''} ago`;\n    }\n  }\n\n  function isJson(string) {\n    const str = string.replace(/\\\\/g, '');\n\n    try {\n      JSON.parse(str);\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function uniqueId() {\n    return Math.floor(Math.random() * 1000);\n  }\n\n  function fiatValue(big, price) {\n    const value = Big(big).mul(Big(price));\n    const stringValue = value.toFixed(6); // Set the desired maximum fraction digits\n\n    const [integerPart, fractionalPart] = stringValue.split('.');\n\n    // Format integer part with commas\n    const formattedIntegerPart = integerPart.replace(\n      /\\B(?=(\\d{3})+(?!\\d))/g,\n      ',',\n    );\n\n    // Combine formatted integer and fractional parts\n    const formattedNumber = fractionalPart\n      ? `${formattedIntegerPart}.${fractionalPart}`\n      : formattedIntegerPart;\n\n    return formattedNumber;\n  }\n\n  function debounce(\n    delay,\n    func,\n  ) {\n    let timer;\n    let active = true;\n    const debounced = (arg) => {\n      if (active) {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          active && func(arg);\n          timer = undefined;\n        }, delay);\n      } else {\n        func(arg);\n      }\n    };\n\n    debounced.isPending = () => {\n      return timer !== undefined;\n    };\n\n    debounced.cancel = () => {\n      active = false;\n    };\n\n    debounced.flush = (arg) => func(arg);\n\n    return debounced;\n  }\n\n  function urlHostName(url) {\n    try {\n      const domain = new URL(url);\n      return domain?.hostname ?? null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function holderPercentage(supply, quantity) {\n    return Math.min(\n      Big(quantity).div(Big(supply)).mul(Big(100)).toFixed(2),\n      100,\n    );\n  }\n  function mapFeilds(fields) {\n    const args = {};\n\n    fields.forEach((fld) => {\n      let value = fld.value;\n\n      if (fld.type === 'number') {\n        value = Number(value);\n      } else if (fld.type === 'boolean') {\n        value =\n          value.trim().length > 0 &&\n          !['false', '0'].includes(value.toLowerCase());\n      } else if (fld.type === 'json') {\n        value = JSON.parse(value);\n      } else if (fld.type === 'null') {\n        value = null;\n      }\n\n      (args )[fld.name] = value + '';\n    });\n\n    return args;\n  }\n  return {\n    getConfig,\n    handleRateLimit,\n    yoctoToNear,\n    formatTimestampToString,\n    nanoToMilli,\n    shortenAddress,\n    truncateString,\n    isAction,\n    timeAgo,\n    isJson,\n    uniqueId,\n    fiatValue,\n    debounce,\n    urlHostName,\n    holderPercentage,\n    convertAmountToReadableString,\n    convertTimestampToTime,\n    mapFeilds,\n    fetchData,\n  };\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/includes.Utils.libs", "fact_widget_deployments_id": "b91ae6c6fb0ea763d6b4361145f4ec6a", "inserted_timestamp": "2024-05-09T09:39:38.581Z", "modified_timestamp": "2024-05-09T09:39:38.581Z", "__row_index": 0}