{"tx_hash": "3A1vu4EHMyMBidNrcJXrTx5Jpj3bq5tCpHUnpLTrRGii", "action_id_social": "jhUcJ39mP948UQGPPDQyhocUvwojGmsbZxxSjB7p7Mt-0-widget", "block_id": 117047636, "block_timestamp": "2024-04-17T16:21:09.573Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.Hash", "source_code": "/**\n * Component: TransactionsHash\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Transaction Hash on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [hash] -  The Transaction identifier passed as a string.\n * @param {function} [onHandleTab] - Function to handle tab changes. (Optional)\n *                                    Example: onTab={onHandleTab} where onHandleTab is a function to change tab on the page.\n * @param {string} [pageTab] - The page tab being displayed. (Optional)\n *                                 Example: If provided, tab=overview in the url it will select the overview tab of transaction details.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\nconst ErrorMessage = ({ icons, message, mutedText }) => {\n  return (\n    <div className=\"text-center py-24\">\n      <div className=\"mb-4 flex justify-center\">\n        <span className=\"inline-block border border-yellow-600 border-opacity-25 bg-opacity-10 bg-yellow-300 text-yellow-500 rounded-full p-4\">\n          {icons}\n        </span>\n      </div>\n\n      <h3 className=\"h-5 font-bold text-lg text-black dark:text-neargray-10\">\n        {message}\n      </h3>\n\n      <p className=\"mb-0 py-4 font-bold break-words px-2\">{mutedText}</p>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FileSlash.jsx\" */\nconst FileSlash = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      data-name=\"Layer 1\"\n      viewBox=\"0 0 24 24\"\n      height=\"24\"\n      width=\"24\"\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n    >\n      <path d=\"M21.71,20.29l-18-18A1,1,0,0,0,2.29,3.71L4,5.41V19a3,3,0,0,0,3,3H17a3,3,0,0,0,2.39-1.2l.9.91a1,1,0,0,0,1.42,0A1,1,0,0,0,21.71,20.29ZM17,20H7a1,1,0,0,1-1-1V7.41L17.93,19.34A1,1,0,0,1,17,20ZM8.66,4H12V7a3,3,0,0,0,3,3h3v3.34a1,1,0,1,0,2,0V9s0,0,0-.06a1.31,1.31,0,0,0-.06-.27l0-.09a1.07,1.07,0,0,0-.19-.28h0l-6-6h0a1.07,1.07,0,0,0-.28-.19l-.09,0L13.06,2H8.66a1,1,0,0,0,0,2ZM14,5.41,16.59,8H15a1,1,0,0,1-1-1Z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FileSlash.jsx\" */\n\n\nconst hashes = ['overview', 'execution', 'comments'];\n\nfunction MainComponent(props) {\n  const { t, network, hash, onHandleTab, pageTab, ownerId } = props;\n\n  const { getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [txn, setTxn] = useState(null);\n  const [error, setError] = useState(false);\n  const [isToggle, setIsToggle] = useState(false);\n  const [rpcTxn, setRpcTxn] = useState(\n    {} ,\n  );\n\n  const config = getConfig && getConfig(network);\n\n  const onTab = (index) => {\n    onHandleTab(hashes[index]);\n  };\n\n  useEffect(() => {\n    function fetchTxn() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}txns/${hash}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setError(false);\n              setTxn(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchTxn, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch((error) => {\n          if (error) setError(true);\n          setIsLoading(false);\n        });\n    }\n    if (config.backendUrl) {\n      fetchTxn();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.backendUrl, hash]);\n\n  useEffect(() => {\n    function fetchTransactionStatus() {\n      if (txn) {\n        asyncFetch(config?.rpcUrl, {\n          method: 'POST',\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: 123,\n            method: 'EXPERIMENTAL_tx_status',\n            params: [txn.transaction_hash, txn.signer_account_id],\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.result;\n              if (res.status === 200) {\n                setRpcTxn(resp);\n              } else {\n                handleRateLimit(res, fetchTransactionStatus);\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n    if (config?.rpcUrl) {\n      fetchTransactionStatus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [txn, config?.rpcUrl]);\n\n  return (\n    <>\n      {error || (!isLoading && !txn) ? (\n        <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n          <div className=\"text-sm text-nearblue-600 dark:text-neargray-10 divide-solid dark:divide-black-200 divide-gray-200 divide-y\">\n            <ErrorMessage\n              icons={<FileSlash />}\n              message=\"Sorry, We are unable to locate this TxnHash\"\n              mutedText={hash}\n            />\n          </div>\n        </div>\n      ) : (\n        <>\n          <div>\n            {hashes &&\n              hashes.map((hash, index) => (\n                <button\n                  key={index}\n                  onClick={() => onTab(index)}\n                  className={`text-nearblue-600  text-xs leading-4 font-medium overflow-hidden inline-block cursor-pointer mb-3 mr-3 focus:outline-none ${\n                    pageTab === hash\n                      ? 'rounded-lg bg-green-600 dark:bg-green-250 text-white'\n                      : 'hover:bg-neargray-800 bg-neargray-700 dark:text-neargray-10 dark:bg-black-200  rounded-lg hover:text-nearblue-600'\n                  }`}\n                  value={hash}\n                >\n                  {hash === 'overview' ? (\n                    <h2 className=\"p-2\">\n                      {t ? t('txns:txn.tabs.overview') : 'Overview'}\n                    </h2>\n                  ) : hash === 'execution' ? (\n                    pageTab !== 'execution' ? (\n                      <div className=\"p-2\">\n                        <h2 className=\"flex\">\n                          {isToggle\n                            ? 'Enhanced Plan'\n                            : t\n                            ? t('txns:txn.tabs.execution')\n                            : 'Execution Plan'}\n                          <ArrowDown className=\"h-4 w-4 fill-current ml-1\" />\n                        </h2>\n                        <div className=\"absolute text-white bg-neargreen text-[8px] h-4 inline-flex items-center rounded-md ml-11 -mt-7 px-1 \">\n                          NEW\n                        </div>\n                      </div>\n                    ) : (\n                      <Popover.Root key={isToggle}>\n                        <Popover.Trigger asChild>\n                          <button\n                            className=\"flex p-2 text-xs  rounded focus:outline-none\"\n                            aria-label=\"Update dimensions\"\n                          >\n                            {isToggle\n                              ? 'Enhanced Plan'\n                              : t\n                              ? t('txns:txn.tabs.execution')\n                              : 'Execution Plan'}\n                            <ArrowDown className=\"h-4 w-4 fill-current ml-1\" />\n                            <div className=\"absolute text-white bg-neargreen text-[8px] h-4 inline-flex items-center rounded-md ml-24 -mt-3 px-1 \">\n                              NEW\n                            </div>{' '}\n                          </button>\n                        </Popover.Trigger>\n                        <Popover.Content\n                          className=\"bg-white dark:bg-black-600 dark:border-black-200 w-48 shadow-lg border rounded-lg slide-down mt-2 z-50\"\n                          sideOffset={5}\n                        >\n                          <ul className=\"divide-y dark:divide-black-200\">\n                            <li\n                              onClick={() => setIsToggle(false)}\n                              className={`py-2 text-nearblue-600 dark:text-neargray-10 rounded-t-lg ${\n                                !isToggle ? 'bg-gray-300 dark:bg-black-200' : ''\n                              }`}\n                            >\n                              {t('txns:txn.tabs.execution') || 'Execution Plan'}\n                            </li>\n                            <li\n                              onClick={() => setIsToggle(true)}\n                              className={`py-2 text-nearblue-600 dark:text-neargray-10 rounded-b-lg ${\n                                isToggle ? 'bg-gray-300 dark:bg-black-200' : ''\n                              }`}\n                            >\n                              Enhanced Plan\n                            </li>\n                          </ul>\n                        </Popover.Content>\n                      </Popover.Root>\n                    )\n                  ) : (\n                    <h2 className=\"p-2\">\n                      {t ? t('txns:txn.tabs.comments') : 'Comments'}\n                    </h2>\n                  )}\n                </button>\n              ))}\n          </div>\n          <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n            <div className={`${pageTab === 'overview' ? '' : 'hidden'} `}>\n              {\n                <Widget\n                  src={`${ownerId}/widget/bos-components.components.Transactions.Detail`}\n                  props={{\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                    network: network,\n                    t: t,\n                    ownerId,\n                  }}\n                />\n              }\n            </div>\n            <div className={`${pageTab === 'execution' ? '' : 'hidden'} `}>\n              <div className={`${isToggle ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.Transactions.Execution`}\n                    props={{\n                      network: network,\n                      t: t,\n                      txn: txn,\n                      rpcTxn: rpcTxn,\n                      loading: isLoading,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${isToggle ? 'hidden' : ''} `}>\n                <Widget\n                  src={`${ownerId}/widget/bos-components.components.Transactions.Receipt`}\n                  props={{\n                    network: network,\n                    t: t,\n                    txn: txn,\n                    rpcTxn: rpcTxn,\n                    loading: isLoading,\n                    ownerId,\n                  }}\n                />\n              </div>\n            </div>\n            <div className={`${pageTab === 'comments' ? '' : 'hidden'} `}>\n              <div className=\"py-3\">\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.Comments.Feed`}\n                    props={{\n                      network: network,\n                      path: `nearblocks.io/txns/${hash}`,\n                      limit: 10,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.Hash", "fact_widget_deployments_id": "f9f35889349f202f37138978c96d4e93", "inserted_timestamp": "2024-04-17T17:41:46.497Z", "modified_timestamp": "2024-04-17T17:41:46.497Z", "__row_index": 7}