{"tx_hash": "9pdZfoat281qg5pmQt4rvP9Ts52RWfUW1pq1QmJDF4JT", "action_id_social": "HqPsnxDw5HtA5pJhZo2uq4w8gA83SPA9JE9uZSRLQbmr-0-widget", "block_id": 116999004, "block_timestamp": "2024-04-16T23:36:31.768Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Shared.NFTImage", "source_code": "/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n\n\nconst getMediaUrl = async (base, media, reference) => {\n  if (\n    media.startsWith('https://') ||\n    media.startsWith('http://') ||\n    media.startsWith('data:image')\n  )\n    return Promise.resolve(media);\n\n  if (\n    reference &&\n    (base.startsWith('https://arweave.net') ||\n      reference.startsWith('https://arweave.net'))\n  ) {\n    try {\n      return asyncFetch(\n        base ? `${base.replace(/\\/+$/, '')}/${reference}` : `${reference}`,\n      )\n        .then((resp) => {\n          return resp.body.media;\n        })\n        .catch(() => {});\n    } catch (error) {\n      //\n    }\n  }\n\n  if (base) return Promise.resolve(`${base}/${media}`);\n\n  return Promise.resolve(`https://cloudflare-ipfs.com/ipfs/${media}`);\n};\n\nfunction MainComponent({\n  base,\n  media,\n  alt,\n  reference,\n  className,\n  network,\n  ownerId,\n}) {\n  const { getConfig } = VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const [src, setSrc] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    if (media || base || reference) {\n      setLoading(true);\n      getMediaUrl(base || '', media || '', reference)\n        .then(setSrc)\n        .catch((error) => {\n          console.error(error);\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [base, media, reference]);\n\n  const onLoad = () => setLoading(false);\n\n  const onSetSrc = (newSrc) => {\n    if (newSrc !== src) {\n      setSrc(newSrc);\n    }\n  };\n\n  return (\n    <span className=\"w-full h-full flex items-center justify-center relative\">\n      {loading && (\n        <span className=\"absolute inset-0 bg-white\">\n          <span className=\"absolute inset-0 animate-pulse bg-gray-300 dark:bg-black-200 rounded\" />\n        </span>\n      )}\n      <TokenImage\n        src={src}\n        alt={alt}\n        className={className}\n        appUrl={config.appUrl}\n        onLoad={onLoad}\n        onSetSrc={onSetSrc}\n      />\n    </span>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Shared.NFTImage", "fact_widget_deployments_id": "8738f80451dbb32dfd2248f3c5866e42", "inserted_timestamp": "2024-04-17T01:58:31.238Z", "modified_timestamp": "2024-04-17T01:58:31.238Z", "__row_index": 2}