{"tx_hash": "E7hdKYjdUzLGpCLsJ14YoRB85237Lptj34uqRS5iceCS", "action_id_social": "2tDvjQJbbRUvxaHtjgHZKSCqmx4G4JDMaD4XCnfKnVNB-0-widget", "block_id": 117096889, "block_timestamp": "2024-04-18T09:43:34.125Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.NFT.Inventory", "source_code": "/**\n * Component: NFTInventory\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Non-Fungible Token Inventory List.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {Token} [token] - The Token type passed as object\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n/* INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\nconst FaChevronLeft = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-left\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\n      />\n    </svg>\n  );\n};\nconst FaChevronRight = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-right\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n};\n\n\n\n\n\n\n\n\nconst Paginator = (props) => {\n  let pages;\n  if (props.count > 0) {\n    pages = Math.ceil(props.count / props.limit);\n  } else {\n    pages = 1;\n  }\n  pages = pages > props.pageLimit ? props.pageLimit : pages;\n  const onPrev = () => {\n    if (props.page <= 1) return null;\n\n    const newPage = (props.page || 1) - 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onNext = () => {\n    if (props.page >= pages) return null;\n\n    const newPage = (props.page || 1) + 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onFirst = () => props.setPage(1);\n  const onLast = () => props.setPage(pages);\n\n  return (\n    <div className=\"bg-white dark:bg-black-600 px-2 py-3 flex items-center justify-between border-t dark:border-black-200 md:px-4\">\n      <div className=\"flex-1 flex items-center justify-between\">\n        <div></div>\n\n        <div>\n          <div\n            className=\"relative z-0 inline-flex rounded-md\"\n            aria-label=\"Pagination\"\n          >\n            <button\n              type=\"button\"\n              disabled={props.page <= 1 || pages === 1}\n              onClick={onFirst}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2  text-xs font-medium rounded-md ${\n                props.page <= 1\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:bg-green-400 dark:hover:bg-green-250 hover:text-white dark:hover:text-black'\n              } bg-gray-100 dark:bg-black-200 dark:text-green-250`}\n            >\n              First\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page <= 1 || pages === 1}\n              onClick={onPrev}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 font-medium ${\n                props.page <= 1\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:text-white dark:hover:text-black hover:bg-green-400 dark:hover:bg-green-250'\n              } rounded-md  bg-gray-100 dark:bg-black-200`}\n            >\n              <FaChevronLeft />\n            </button>\n            <button\n              type=\"button\"\n              disabled\n              className=\"relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium text-gray-500  rounded-md  bg-gray-100 dark:bg-black-200 dark:text-neargray-10\"\n            >\n              Page {props.page} of {pages}\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page >= pages || pages === 1}\n              onClick={onNext}\n              className={`relative inline-flex items-center ml-1 px-2 md:px-3 py-2 rounded-md font-medium ${\n                props.page >= pages\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:text-white dark:hover:text-black hover:bg-green-400 dark:hover:bg-green-250'\n              }  bg-gray-100 dark:text-green-250 dark:bg-black-200`}\n            >\n              <FaChevronRight />\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page >= pages || pages === 1}\n              onClick={onLast}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium rounded-md ${\n                props.page >= pages\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:text-white dark:hover:text-black hover:bg-green-400 dark:hover:bg-green-250'\n              }  bg-gray-100 dark:text-green-250 dark:bg-black-200`}\n            >\n              Last\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\n\n\n\n\n\n\n\n\nfunction MainComponent({ network, id, token, ownerId }) {\n  const { localFormat } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [isLoading, setIsLoading] = useState(false);\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [totalCount, setTotalCount] = useState(0);\n  const [tokens, setTokens] = useState([]);\n\n  const config = getConfig && getConfig(network);\n\n  const [tokenData, setTokenData] = useState({} );\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCurrentPage(currentPage);\n  }, [currentPage]);\n\n  useEffect(() => {\n    function fetchNFTData() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}nfts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setTokenData(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchNFTData, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchTotalToken() {\n      asyncFetch(`${config?.backendUrl}nfts/${id}/tokens/count`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.tokens?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count);\n            } else {\n              handleRateLimit(data, fetchTotalToken);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchTokenData() {\n      setIsLoading(true);\n\n      asyncFetch(\n        `${config?.backendUrl}nfts/${id}/tokens?page=${currentPage}&per_page=24`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then((data) => {\n          const resp = data?.body?.tokens;\n          if (data.status === 200 && Array.isArray(resp) && resp.length > 0) {\n            setTokens(resp);\n            setIsLoading(false);\n          } else {\n            handleRateLimit(data, fetchTokenData, () => setIsLoading(false));\n          }\n        })\n        .catch(() => {});\n    }\n    if (!token && token === undefined) {\n      fetchNFTData();\n    }\n    if (config?.backendUrl) {\n      fetchTotalToken();\n      fetchTokenData();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, currentPage, id, token]);\n\n  useEffect(() => {\n    if (token) {\n      setTokenData(token);\n    }\n  }, [token]);\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"pl-6 max-w-lg w-full py-5 \">\n          <Skeleton className=\"h-4\" />\n        </div>\n      ) : (\n        <div\n          className={`flex flex-col lg:flex-row pt-4 border-b dark:border-black-200`}\n        >\n          <div className=\"flex flex-col\">\n            <p className=\"leading-7 px-6 text-sm mb-4 text-nearblue-600 dark:text-neargray-10\">\n              A total of {localFormat && localFormat(totalCount.toString())}{' '}\n              tokens found\n            </p>\n          </div>\n        </div>\n      )}\n      <div className=\"flex flex-wrap sm:grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 m-6\">\n        {isLoading &&\n          [...Array(24)].map((_, i) => (\n            <div\n              className=\"max-w-full border rounded p-3 mx-auto md:mx-0\"\n              key={i}\n            >\n              <a\n                href=\"#\"\n                className=\"flex items-center justify-center m-auto overflow-hidden\"\n              >\n                <div className=\"w-40 h-40 \">\n                  <Skeleton className=\"h-40\" />\n                </div>\n              </a>\n              <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-nearblue-600 dark:text-neargray-10 mt-4\">\n                <Skeleton className=\"h-4\" />\n              </div>\n              <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-nearblue-600 dark:text-neargray-10\">\n                <Skeleton className=\"h-4\" />\n              </div>\n            </div>\n          ))}\n        {!isLoading &&\n          tokens &&\n          tokens?.map((nft) => (\n            <div\n              className=\"max-w-full border dark:border-black-200 rounded p-3 mx-auto md:mx-0\"\n              key={nft?.contract + nft?.token}\n            >\n              <Link\n                href={`/nft-token/${nft?.contract}/${nft?.token}`}\n                className=\"hover:no-underline\"\n              >\n                <a className=\"w-40 h-40 flex items-center justify-center m-auto overflow-hidden hover:no-underline\">\n                  {\n                    <Widget\n                      src={`${ownerId}/widget/bos-components.components.Shared.NFTImage`}\n                      props={{\n                        base: tokenData.base_uri,\n                        reference: nft.reference,\n                        media: nft.media,\n                        className: 'rounded max-h-full',\n                        network: network,\n                        ownerId,\n                      }}\n                    />\n                  }\n                </a>\n              </Link>\n              <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-nearblue-600 dark:text-neargray-10 mt-4\">\n                Token ID:{' '}\n                <Link\n                  href={`/nft-token/${nft?.contract}/${nft?.token}`}\n                  className=\"hover:no-underline\"\n                >\n                  <a className=\"text-green dark:text-green-250 hover:no-underline\">\n                    {nft?.token}\n                  </a>\n                </Link>\n              </div>\n              {nft?.asset && (\n                <div className=\"whitespace-nowrap text-ellipsis overflow-hidden text-xs mb-1 text-nearblue-600 dark:text-neargray-10\">\n                  Owner:{' '}\n                  <Link\n                    href={`/address/${nft?.asset?.owner}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green dark:text-green-250 hover:no-underline\">\n                      {nft?.asset?.owner}\n                    </a>\n                  </Link>\n                </div>\n              )}\n            </div>\n          ))}\n      </div>\n      <Paginator\n        count={totalCount}\n        page={currentPage}\n        setPage={setPage}\n        limit={24}\n        pageLimit={200}\n      />\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.NFT.Inventory", "fact_widget_deployments_id": "08bfcadd4412fbcac521dd88a06ad5e4", "inserted_timestamp": "2024-04-18T11:33:47.467Z", "modified_timestamp": "2024-04-18T11:33:47.467Z", "__row_index": 9}