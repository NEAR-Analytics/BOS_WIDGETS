{"tx_hash": "6QRzV6AdszZPLp3ncmv9HBo4cmdv1di6yFLPxrds788r", "action_id_social": "HJmraf1yLMCidvcGrAQJTKUi8zpymWdL3gh47ogDrU7q-0-widget", "block_id": 120844252, "block_timestamp": "2024-06-10T08:53:12.288Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.ReceiptInfo", "source_code": "/**\n * Component: TransactionsReceiptInfo\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of Transaction Receipt on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {ReceiptsPropsInfo | any} [receipt] -  receipt of the transaction.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Question.jsx\" */\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Question.jsx\" */\n/* INCLUDE: \"includes/hexy.jsx\" */\nfunction hexy(buffer, config) {\n  const MAX_ADDRESS_LENGTH = 8;\n  const defaults = {\n    width: 16,\n    numbering: 'hex_bytes',\n    format: 'fours',\n    littleEndian: false,\n    radix: 16,\n    caps: 'lower',\n    annotate: 'ascii',\n    prefix: '',\n    indent: 0,\n    html: false,\n    offset: 0,\n    length: -1,\n    extendedChs: false,\n    display_offset: 0,\n  };\n  const options = { ...defaults, ...config };\n\n  let bufferData;\n  if (Buffer.isBuffer(buffer)) {\n    bufferData = buffer;\n  } else if (Array.isArray(buffer)) {\n    bufferData = Buffer.from(buffer);\n  } else {\n    throw new Error('Input must be a Buffer or an array of numbers.');\n  }\n\n  const {\n    width,\n    numbering,\n    format,\n    littleEndian,\n    radix,\n    annotate,\n    indent,\n    html,\n    offset,\n    length,\n    extendedChs,\n    display_offset,\n  } = options;\n\n  const prefixSpaces = ' '.repeat(indent);\n  const htmlOpenTag = html ? \"<div class='hexy'>\\n\" : '';\n  const htmlCloseTag = html ? '</div>\\n' : '';\n\n  const bufferSlice = bufferData.slice(\n    offset,\n    length === -1 ? undefined : offset + length,\n  );\n  let str = htmlOpenTag;\n  let addr = offset + display_offset;\n\n  const numGroups = Math.ceil(bufferSlice.length / width);\n\n  for (let group = 0; group < numGroups; group++) {\n    const startIndex = group * width;\n    const endIndex = Math.min(startIndex + width, bufferSlice.length);\n    const slice = bufferSlice.slice(startIndex, endIndex);\n\n    if (html) {\n      str += `<div class='${num2str(addr, MAX_ADDRESS_LENGTH, 16)}'>`;\n    }\n\n    str += `${prefixSpaces}${\n      numbering === 'hex_bytes'\n        ? num2str(addr, MAX_ADDRESS_LENGTH, 16) + ': '\n        : ''\n    }`;\n    str += hex(slice, width, format, radix, littleEndian);\n\n    if (annotate === 'ascii') {\n      str += ` ${\n        html\n          ? html_escape(getTextRepresentation(slice, extendedChs))\n          : ascii_escape(getTextRepresentation(slice, extendedChs))\n      }`;\n    }\n\n    str += html ? '</div>\\n' : '\\n';\n    addr += width;\n  }\n\n  str += htmlCloseTag;\n\n  return str;\n}\n\nfunction hex(\n  buffer,\n  width,\n  format,\n  radix,\n  littleEndian,\n) {\n  let str = '';\n  const delimiter = format === 'none' ? '' : ' ';\n  const group_len = maxnumberlen(format === 'none' ? 1 : 2, radix);\n  const padlen =\n    (width - buffer.length) *\n    (format === 'none' ? group_len : (group_len + 1) / 2);\n\n  const numGroups = Math.ceil(buffer.length / 2);\n\n  for (let group = 0; group < numGroups; ++group) {\n    const startIndex = group * 2;\n    const endIndex = Math.min(startIndex + 2, buffer.length);\n    const bytes = buffer.slice(startIndex, endIndex);\n\n    if (bytes.length === 0) break;\n\n    if (bytes.length === 2) {\n      let val = littleEndian ? bytes.readUInt16LE(0) : bytes.readUInt16BE(0);\n      const text = val.toString(radix);\n      str += '0'.repeat(group_len - text.length) + text;\n      str += delimiter;\n    } else {\n      str += '0'.repeat(group_len);\n      str += delimiter;\n    }\n  }\n\n  if (buffer.length < width) {\n    str += ' '.repeat(padlen);\n  }\n\n  return str;\n}\n\nfunction num2str(b, len, radix) {\n  const s = b.toString(radix);\n  return '0'.repeat(len - s.length) + s;\n}\n\nfunction maxnumberlen(bytes, radix) {\n  let result = 2;\n  if (bytes === 0) {\n    bytes = 1;\n  }\n  switch (radix) {\n    case 2:\n      result = bytes * 8;\n      break;\n    case 8:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 11;\n          break;\n        case 8:\n          result = 22;\n          break;\n      }\n      break;\n    case 10:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 10;\n          break;\n        case 8:\n          result = 20;\n          break;\n      }\n      break;\n    case 16:\n      result = 2 * bytes;\n      break;\n  }\n  return result;\n}\n\nfunction getTextRepresentation(buffer, extendedChs) {\n  let text = '';\n  for (const byte of buffer) {\n    if (extendedChs) {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    } else {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    }\n  }\n  return text;\n}\n\nfunction ascii_escape(str) {\n  return str.replace(/[^\\x20-\\x7E]/g, '.');\n}\n\nfunction html_escape(str) {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\'/g, '&apos;')\n    .replace(/\\\"/g, '&quot;')\n    .replace(/[^\\x20-\\x7E]/g, function (ch) {\n      return '&#x' + ch.codePointAt(0)?.toString(16) + ';';\n    });\n}\n/* END_INCLUDE: \"includes/hexy.jsx\" */\n\n\n\n\n\n\n\nfunction MainComponent(props) {\n  const { receipt, network, ownerId } = props;\n  const { getConfig, handleRateLimit, yoctoToNear } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const { convertToMetricPrefix, localFormat } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const hashes = ['output', 'inspect'];\n  const [pageHash, setHash] = useState('output');\n  const onTab = (index) => {\n    setHash(hashes[index]);\n  };\n\n  const [block, setBlock] = useState({} );\n  const [loading, setLoading] = useState(false);\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    function fetchBlocks() {\n      setLoading(true);\n      if (receipt?.outcome?.blockHash) {\n        asyncFetch(`${config.backendUrl}blocks/${receipt?.outcome.blockHash}`)\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.blocks?.[0];\n              if (res.status === 200) {\n                setBlock({\n                  author_account_id: resp.author_account_id,\n                  block_hash: resp.author_account_id,\n                  block_height: resp.block_height,\n                  block_timestamp: resp.block_timestamp,\n                  chunks_agg: resp.chunks_agg,\n                  gas_price: resp.gas_price,\n                  prev_block_hash: resp.author_account_id,\n                  receipts_agg: resp.receipts_agg,\n                  transactions_agg: resp.transactions_agg,\n                });\n                setLoading(false);\n              } else {\n                handleRateLimit(res, fetchBlocks, () => setLoading(false));\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n    if (config?.backendUrl) {\n      fetchBlocks();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [receipt?.outcome?.blockHash, config.backendUrl]);\n\n  let statusInfo;\n\n  if (receipt?.outcome?.status?.type === 'successValue') {\n    if (receipt?.outcome?.status?.value.length === 0) {\n      statusInfo = (\n        <div className=\"bg-gray-100 dark:bg-black-200 rounded-md p-5 font-medium my-3 whitespace-nowrap\">\n          Empty result\n        </div>\n      );\n    } else {\n      const args = receipt?.outcome?.status.value;\n      const decodedArgs = Buffer.from(args, 'base64');\n\n      let prettyArgs;\n      try {\n        const parsedJSONArgs = JSON.parse(decodedArgs.toString());\n        if (parsedJSONArgs !== null) {\n          prettyArgs =\n            typeof parsedJSONArgs === 'boolean'\n              ? JSON.stringify(parsedJSONArgs)\n              : parsedJSONArgs;\n        } else {\n          prettyArgs = hexy(decodedArgs, { format: 'twos' });\n        }\n      } catch {\n        prettyArgs = Array.from(decodedArgs)\n          .map((byte) => byte.toString(16).padStart(2, '0'))\n          .join('');\n      }\n\n      statusInfo =\n        prettyArgs && typeof prettyArgs === 'object' ? (\n          <textarea\n            readOnly\n            rows={4}\n            defaultValue={JSON.stringify(prettyArgs)}\n            className=\"block appearance-none outline-none w-fit border font-medium rounded-lg bg-gray-100 dark:bg-black-200 dark:border-black-200 p-5 my-3 resize-y\"\n          ></textarea>\n        ) : (\n          <div>\n            <div className=\"bg-gray-100 dark:bg-black-200 rounded-md p-5 font-medium my-3\">\n              <div className=\"bg-inherit text-inherit font-inherit border-none p-0\">\n                <div className=\"max-h-52 overflow-auto\">\n                  <div className=\"h-full w-full\">\n                    <pre>{prettyArgs}</pre>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n  } else if (receipt?.outcome?.status?.type === 'failure') {\n    statusInfo = (\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={JSON.stringify(receipt.outcome.status.error, null, 2)}\n        className=\"block appearance-none outline-none w-fit border dark:border-black-200 rounded-lg font-medium bg-gray-100 dark:bg-black-200 p-5 my-3 resize-y\"\n      ></textarea>\n    );\n  } else if (receipt?.outcome?.status?.type === 'successReceiptId') {\n    statusInfo = (\n      <div className=\"bg-gray-100 dark:bg-black-200 rounded-md my-3 p-5 font-medium overflow-auto\">\n        <pre>{receipt?.outcome?.status?.receiptId}</pre>\n      </div>\n    );\n  }\n\n  const getDeposit = (actions) =>\n    actions\n      .map((action) => ('deposit' in action.args ? action.args.deposit : '0'))\n      .reduce(\n        (acc, deposit) =>\n          Big(acc || '0')\n            .plus(deposit)\n            .toString(),\n        '0',\n      );\n\n  const getGasAttached = (actions) => {\n    const gasAttached = actions\n      .map((action) => action.args)\n      .filter(\n        (args) => 'gas' in args,\n      );\n\n    if (gasAttached.length === 0) {\n      return '0';\n    }\n\n    return gasAttached.reduce(\n      (acc, args) =>\n        Big(acc || '0')\n          .plus(args.gas)\n          .toString(),\n      '0',\n    );\n  };\n\n  const getRefund = (receipts) =>\n    receipts\n      .filter(\n        (receipt) => 'outcome' in receipt && receipt.predecessorId === 'system',\n      )\n      .reduce(\n        (acc, receipt) =>\n          Big(acc || '0')\n            .plus(getDeposit(receipt.actions))\n            .toString(),\n        '0',\n      );\n\n  const getPreCharged = (receipt) =>\n    Big(receipt?.outcome?.tokensBurnt || '0')\n      .plus(getRefund(receipt?.outcome?.nestedReceipts))\n      .toString();\n\n  return (\n    <div className=\"flex flex-col \">\n      <Tabs.Root defaultValue={'output'}>\n        <Tabs.List>\n          {hashes &&\n            hashes.map((hash, index) => (\n              <Tabs.Trigger\n                key={index}\n                onClick={() => onTab(index)}\n                className={`text-nearblue-600 text-xs leading-4 ${\n                  hash === 'output' ? 'ml-6' : 'ml-3'\n                } font-medium overflow-hidden inline-block cursor-pointer p-2 focus:outline-none ${\n                  pageHash === hash\n                    ? 'rounded-lg bg-green-600 dark:bg-green-250 text-white'\n                    : 'hover:bg-neargray-800 bg-neargray-700 dark:text-neargray-10 dark:bg-black-200 rounded-lg hover:text-nearblue-600'\n                }`}\n                value={hash}\n              >\n                {hash === 'output' ? <h2>Output</h2> : <h2>Inspect</h2>}\n              </Tabs.Trigger>\n            ))}\n        </Tabs.List>\n        <Tabs.Content\n          value={hashes[0]}\n          className={'w-full focus:border-none focus:outline-none'}\n        >\n          <div className=\"flex flex-col my-4 ml-6\">\n            <div className=\"\">\n              <h2 className=\"flex items-center text-sm font-medium\">\n                <OverlayTrigger\n                  placement=\"bottom-start\"\n                  delay={{ show: 500, hide: 0 }}\n                  overlay={\n                    <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                      Logs included in the receipt\n                    </Tooltip>\n                  }\n                >\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </OverlayTrigger>\n                Logs\n              </h2>\n              <div className=\"bg-gray-100 dark:bg-black-200 rounded-md p-0  mt-3 overflow-x-auto\">\n                {receipt?.outcome?.logs?.length > 0 ? (\n                  <div className=\"w-full  break-words  space-y-4\">\n                    <textarea\n                      readOnly\n                      rows={4}\n                      defaultValue={receipt?.outcome?.logs.join('\\n')}\n                      className=\"block appearance-none outline-none w-full border rounded-lg bg-gray-100 dark:bg-black-200 dark:border-black-200 p-5 resize-y\"\n                    ></textarea>\n                  </div>\n                ) : (\n                  <div className=\"w-full  break-words p-5 font-medium space-y-4\">\n                    No Logs\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <h2 className=\"flex items-center text-sm font-medium\">\n                <OverlayTrigger\n                  placement=\"bottom-start\"\n                  delay={{ show: 500, hide: 0 }}\n                  overlay={\n                    <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                      The result of the receipt execution\n                    </Tooltip>\n                  }\n                >\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </OverlayTrigger>\n                Result\n              </h2>\n              {statusInfo}\n            </div>\n          </div>\n        </Tabs.Content>\n        <Tabs.Content\n          value={hashes[1]}\n          className={'w-fit focus:border-none focus:outline-none'}\n        >\n          <div className=\"overflow-x-auto\">\n            <table className=\"my-4 mx-6 whitespace-nowrap table-auto\">\n              <tbody>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Unique identifier (hash) of this receipt.\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Receipt\n                  </td>\n                  <td className=\"font-semibold py-2 pl-4\">{receipt?.id}</td>\n                </tr>\n                <tr>\n                  <td\n                    className={`flex items-center py-2 pr-4 ${\n                      !block ? 'whitespace-normal' : 'whitespace-nowrap'\n                    }`}\n                  >\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Block height\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Block\n                  </td>\n                  <td className=\"py-2 pl-4\">\n                    {block && (\n                      <Link\n                        href={`/blocks/${receipt?.outcome?.blockHash}`}\n                        className=\"text-green-500 dark:text-green-250\"\n                      >\n                        {!loading &&\n                          block?.block_height &&\n                          localFormat(block?.block_height)}\n                      </Link>\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          The account which issued the receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    From\n                  </td>\n                  <td className=\"py-2 pl-4\">\n                    <Link\n                      href={`/address/${receipt?.predecessorId}`}\n                      className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                    >\n                      {receipt?.predecessorId}\n                    </Link>\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          The destination account of the receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    To\n                  </td>\n                  <td className=\"py-2 pl-4\">\n                    <Link\n                      href={`/address/${receipt?.receiverId}`}\n                      className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                    >\n                      {receipt?.receiverId}\n                    </Link>\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Maximum amount of gas allocated for the Receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Gas Limit\n                  </td>\n                  <td className=\"py-2 pl-4\">{`${\n                    !loading &&\n                    receipt?.actions &&\n                    convertToMetricPrefix(getGasAttached(receipt?.actions))\n                  }gas`}</td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Fees Pre-charged on Receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Pre-charged Fee\n                  </td>\n                  <td className=\"py-2 pl-4\">{`${\n                    !loading &&\n                    receipt &&\n                    yoctoToNear(getPreCharged(receipt), true)\n                  } \u24c3`}</td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Burnt Gas by Receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Burnt Gas\n                  </td>\n                  <td className=\"text-xs py-2 pl-4\">\n                    <span className=\"bg-orange-50 dark:bg-black-200 rounded-md px-2 py-1\">\n                      <span className=\"text-xs mr-2\">\ud83d\udd25 </span>\n                      {`${\n                        !loading && receipt?.outcome?.gasBurnt\n                          ? convertToMetricPrefix(receipt?.outcome?.gasBurnt)\n                          : receipt?.outcome?.gasBurnt ?? ''\n                      }gas`}\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Burnt Tokens by Receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Burnt Tokens\n                  </td>\n                  <td className=\"text-xs py-2 pl-4\">\n                    <span className=\"bg-orange-50 dark:bg-black-200 rounded-md px-2 py-1\">\n                      <span className=\"text-xs mr-2\">\ud83d\udd25 </span>\n                      {!loading && receipt?.outcome?.tokensBurnt\n                        ? yoctoToNear(receipt?.outcome?.tokensBurnt, true)\n                        : receipt?.outcome?.tokensBurnt ?? ''}\n                      \u24c3\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"flex items-center py-2 pr-4\">\n                    <OverlayTrigger\n                      placement=\"bottom-start\"\n                      delay={{ show: 500, hide: 0 }}\n                      overlay={\n                        <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                          Refund from the receipt\n                        </Tooltip>\n                      }\n                    >\n                      <div>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </div>\n                    </OverlayTrigger>\n                    Refund\n                  </td>\n                  <td className=\"py-2 pl-4\">\n                    {!loading &&\n                      receipt?.outcome?.nestedReceipts &&\n                      yoctoToNear(\n                        getRefund(receipt?.outcome?.nestedReceipts) || '0',\n                        true,\n                      )}\n                    \u24c3\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </Tabs.Content>\n      </Tabs.Root>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.ReceiptInfo", "fact_widget_deployments_id": "f4bd17355c6bd773be82a3b11a0f2560", "inserted_timestamp": "2024-06-10T10:04:59.465Z", "modified_timestamp": "2024-06-10T10:04:59.465Z", "__row_index": 5}