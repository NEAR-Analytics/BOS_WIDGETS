{"tx_hash": "29TJymGSQnJfedpmzwKkYsiG2u2f6SfRb53EZJR4ETKd", "action_id_social": "6Yf79NuKxZNzgZcugj2imHxiWWY8PAZ9iVcaPDDySV9D-0-widget", "block_id": 116536511, "block_timestamp": "2024-04-10T11:22:44.624Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.ReceiptInfo", "source_code": "/**\n * Component: TransactionsReceiptInfo\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of Transaction Receipt on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {ReceiptsPropsInfo | any} [receipt] -  receipt of the transaction.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent(props) {\n  const { receipt, network, ownerId } = props;\n  const { getConfig, handleRateLimit, yoctoToNear } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const { convertToMetricPrefix } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const hashes = ['output', 'inspect'];\n  const [pageHash, setHash] = useState('output');\n  const onTab = (index) => {\n    setHash(hashes[index]);\n  };\n\n  const [block, setBlock] = useState({} );\n  const [loading, setLoading] = useState(false);\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    function fetchBlocks() {\n      setLoading(true);\n      if (receipt?.outcome?.blockHash) {\n        asyncFetch(`${config.backendUrl}blocks/${receipt?.outcome.blockHash}`)\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.blocks?.[0];\n              if (res.status === 200) {\n                setBlock({\n                  author_account_id: resp.author_account_id,\n                  block_hash: resp.author_account_id,\n                  block_height: resp.block_height,\n                  block_timestamp: resp.block_timestamp,\n                  chunks_agg: resp.chunks_agg,\n                  gas_price: resp.gas_price,\n                  prev_block_hash: resp.author_account_id,\n                  receipts_agg: resp.receipts_agg,\n                  transactions_agg: resp.transactions_agg,\n                });\n                setLoading(false);\n              } else {\n                handleRateLimit(res, fetchBlocks, () => setLoading(false));\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n    if (config?.backendUrl) {\n      fetchBlocks();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [receipt?.outcome?.blockHash, config.backendUrl]);\n\n  let statusInfo;\n\n  if (receipt?.outcome?.status?.type === 'successValue') {\n    if (receipt?.outcome?.status?.value.length === 0) {\n      statusInfo = (\n        <div className=\"bg-gray-100 rounded-md p-5 font-medium my-3 whitespace-nowrap\">\n          Empty result\n        </div>\n      );\n    } else {\n      const args = receipt?.outcome?.status.value;\n      const decodedArgs = Buffer.from(args, 'base64');\n\n      let prettyArgs;\n      try {\n        const parsedJSONArgs = JSON.parse(decodedArgs.toString());\n        prettyArgs =\n          typeof parsedJSONArgs === 'boolean'\n            ? JSON.stringify(parsedJSONArgs)\n            : parsedJSONArgs;\n      } catch {\n        prettyArgs = Array.from(decodedArgs)\n          .map((byte) => byte.toString(16).padStart(2, '0'))\n          .join('');\n      }\n\n      statusInfo =\n        prettyArgs && typeof prettyArgs === 'object' ? (\n          <textarea\n            readOnly\n            rows={4}\n            defaultValue={JSON.stringify(prettyArgs)}\n            className=\"block appearance-none outline-none w-fit border font-medium rounded-lg bg-gray-100 p-5 my-3 resize-y\"\n          ></textarea>\n        ) : (\n          <div>\n            <div className=\"bg-gray-100 rounded-md p-5 font-medium my-3\">\n              <div className=\"bg-inherit text-inherit font-inherit border-none p-0\">\n                <div className=\"max-h-52 overflow-auto\">\n                  <div className=\"h-full w-full\">{prettyArgs}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n  } else if (receipt?.outcome?.status?.type === 'failure') {\n    statusInfo = (\n      <textarea\n        readOnly\n        rows={4}\n        defaultValue={JSON.stringify(receipt.outcome.status.error, null, 2)}\n        className=\"block appearance-none outline-none w-fit border rounded-lg font-medium bg-gray-100 p-5 my-3 resize-y\"\n      ></textarea>\n    );\n  } else if (receipt?.outcome?.status?.type === 'successReceiptId') {\n    statusInfo = (\n      <div className=\"bg-gray-100 rounded-md my-3 p-5 font-medium overflow-auto\">\n        <pre>{receipt?.outcome?.status?.receiptId}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-5 flex flex-col \">\n      <Tabs.Root defaultValue={'output'}>\n        <Tabs.List>\n          {hashes &&\n            hashes.map((hash, index) => (\n              <Tabs.Trigger\n                key={index}\n                onClick={() => onTab(index)}\n                className={`text-nearblue-600 text-xs leading-4 mx-2.5 font-medium overflow-hidden inline-block cursor-pointer p-2 mb-3 mr-2 focus:outline-none ${\n                  pageHash === hash\n                    ? 'rounded-lg bg-green-600 text-white'\n                    : 'hover:bg-neargray-800 bg-neargray-700 rounded-lg hover:text-nearblue-600'\n                }`}\n                value={hash}\n              >\n                {hash === 'output' ? <h2>Output</h2> : <h2>Inspect</h2>}\n              </Tabs.Trigger>\n            ))}\n        </Tabs.List>\n        <Tabs.Content value={hashes[0]} className={'w-fit'}>\n          <div className=\"flex flex-col my-4 mx-7\">\n            <div className=\"flex justify-between\">\n              <div className=\"flex flex-col w-fit\">\n                <div className=\"\">\n                  <h2 className=\"text-sm font-medium \">Logs</h2>\n                  <div className=\"bg-gray-100 rounded-md p-5 font-medium my-3 overflow-x-auto \">\n                    {receipt?.outcome?.logs?.length === 0 ? (\n                      <span className=\"whitespace-nowrap\">No logs</span>\n                    ) : (\n                      <span>{receipt?.outcome?.logs.join('\\n')}</span>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <h2 className=\"text-sm font-medium\">Result</h2>\n                  {statusInfo}\n                </div>\n              </div>\n            </div>\n          </div>\n        </Tabs.Content>\n        <Tabs.Content value={hashes[1]} className={'w-fit'}>\n          <div className=\"overflow-x-auto\">\n            <table className=\"my-4 mx-7 whitespace-nowrap table-auto\">\n              <tbody>\n                <tr>\n                  <td className=\"py-2 pr-4\">Receipt ID</td>\n                  <td className=\"py-2 pl-4\">{receipt?.id}</td>\n                </tr>\n                <tr>\n                  <td\n                    className={`py-2 pr-4 ${\n                      !block ? 'whitespace-normal' : 'whitespace-nowrap'\n                    }`}\n                  >\n                    Executed in Block\n                  </td>\n                  <td className=\"py-2 pl-4\">\n                    {block && (\n                      <Link\n                        href={`/blocks/${receipt?.outcome?.blockHash}`}\n                        className=\"text-green-500\"\n                      >\n                        #{block?.block_height}\n                      </Link>\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"py-2 pr-4\">Predecessor ID</td>\n                  <td className=\"py-2 pl-4\">{receipt?.predecessorId}</td>\n                </tr>\n                <tr>\n                  <td className=\"py-2 pr-4\">Receiver ID</td>\n                  <td className=\"py-2 pl-4\">{receipt?.receiverId}</td>\n                </tr>\n                <tr>\n                  <td className=\"py-2 pr-4\">Attached Gas</td>\n                  <td className=\"py-2 pl-4\">{receipt?.id}</td>\n                </tr>\n                <tr>\n                  <td className=\"py-2 pr-4\">Gas Burned</td>\n                  <td className=\"py-2 pl-4\">\n                    {!loading && receipt?.outcome?.gasBurnt\n                      ? convertToMetricPrefix(receipt?.outcome?.gasBurnt)\n                      : receipt?.outcome?.gasBurnt ?? ''}\n                    gas\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"py-2 pr-4\">Tokens Burned</td>\n                  <td className=\"py-2 pl-4\">\n                    {!loading && receipt?.outcome?.tokensBurnt\n                      ? yoctoToNear(receipt?.outcome?.tokensBurnt, true)\n                      : receipt?.outcome?.tokensBurnt ?? ''}\n                    \u24c3\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </Tabs.Content>\n      </Tabs.Root>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.ReceiptInfo", "fact_widget_deployments_id": "dc175d3cab6cdacb266f7fe2ca67ff43", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 7}