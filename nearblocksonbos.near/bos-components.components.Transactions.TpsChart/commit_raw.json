{"tx_hash": "ZGHVeLywjDC8aBDu8R4aybVk6ypUD5hTC3P6YyUGhQ1", "action_id_social": "45n7aY1wfQxFhxMYsDho73QkriApytpmqhruv9orRv8V-0-widget", "block_id": 120125518, "block_timestamp": "2024-05-31T09:30:38.077Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.TpsChart", "source_code": "/**\n * Component: TpsCharts\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Near Transactions per Second Chart\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [chartTypes] - Type of chart to be shown, available options are (price, blocks, txns etc)\n * @param {boolean} [poweredBy] - Powered by attribution\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n\n\nfunction MainComponent(props) {\n  const { t, ownerId, network, chartTypes, poweredBy, theme } = props;\n  const { getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n  const [chartTpsData, setChartTpsData] = useState([]);\n  const [logView, setLogView] = useState(false);\n\n  const handleToggle = () => {\n    setLogView((prevState) => !prevState);\n  };\n\n  const config = getConfig && getConfig(network);\n  const charts = [\n    {\n      link: '/charts/near-price',\n      text: t ? t('charts:nearPrice.heading') : 'Near Daily Price (USD) Chart',\n      image: `/images/charts/near-price.svg`,\n      image_dark: `/images/charts/near-price_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/market-cap',\n      text: t\n        ? t('charts:marketCap.heading')\n        : 'Near Market Capitalization Chart',\n      image: `/images/charts/market-cap.svg`,\n      image_dark: `/images/charts/market-cap_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/near-supply',\n      text: t ? t('charts:nearSupply.heading') : 'Near Supply Growth Chart',\n      image: `/images/charts/near-supply.svg`,\n      image_dark: `/images/charts/near-supply_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/txns',\n      text: t ? t('charts:txns.heading') : 'Near Daily Transactions Chart',\n      image: `/images/charts/txns.svg`,\n      image_dark: `/images/charts/txns_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/blocks',\n      text: t ? t('charts:blocks.heading') : 'New Blocks',\n      image: `/images/charts/blocks.svg`,\n      image_dark: `/images/charts/blocks_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/addresses',\n      text: t ? t('charts:addresses.heading') : 'Near Unique Accounts Chart',\n      image: `/images/charts/addresses.svg`,\n      image_dark: `/images/charts/addresses_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/txn-fee',\n      text: t ? t('charts:txnFee.heading') : 'Transaction Fee Chart',\n      image: `/images/charts/txn-fee.svg`,\n      image_dark: `/images/charts/txn-fee_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/txn-volume',\n      text: t ? t('charts:txnVolume.heading') : 'Transaction Volume Chart',\n      image: `/images/charts/txn-volume.svg`,\n      image_dark: `/images/charts/txn-volume_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/tps',\n      text: 'Near Transactions per Second Chart',\n      image: `/images/charts/tps.svg`,\n      image_dark: `/images/charts/tps_dark.svg`,\n      exclude: false,\n    },\n  ];\n\n  useEffect(() => {\n    function fetchTpsChartData() {\n      asyncFetch(`${config.backendUrl}charts/tps`).then(\n        (res) => {\n          if (res.status === 200) {\n            if (res?.body) {\n              const data = res.body?.charts ;\n              const seriesByShard\n\n = {};\n              let totalTransactions = [];\n\n              data.forEach((dataPoint) => {\n                let totalTxns = 0;\n                dataPoint.shards.forEach((shard) => {\n                  if (!seriesByShard[shard.shard]) {\n                    seriesByShard[shard.shard] = [];\n                  }\n                  seriesByShard[shard.shard].push([\n                    new Date(parseInt(dataPoint.date) * 1000).valueOf(),\n                    shard.txns,\n                  ]);\n                  totalTxns += shard.txns;\n                });\n                totalTransactions.push([\n                  new Date(parseInt(dataPoint.date) * 1000).valueOf(),\n                  totalTxns,\n                ]);\n              });\n\n              const series = Object.keys(seriesByShard).map((shard) => ({\n                name: `Shard ${shard}`,\n                type: 'line',\n                data: seriesByShard[parseInt(shard)],\n              }));\n\n              data &&\n                series.push({\n                  name: 'Total Transactions',\n                  type: 'line',\n                  data: totalTransactions,\n                });\n\n              setChartTpsData(series);\n            }\n          } else {\n            handleRateLimit(res, fetchTpsChartData);\n          }\n        },\n      );\n    }\n    if (config?.backendUrl) {\n      fetchTpsChartData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl]);\n\n  const chartConfig = {\n    chart: {\n      zoomType: 'x',\n      panning: true,\n      panKey: 'shift',\n      height: 430,\n      backgroundColor: 'transparent',\n    },\n    boost: {\n      useGPUTranslations: true,\n    },\n    title: {\n      text: `Near Transactions per Second Chart`,\n      style: {\n        color: theme === 'dark' ? '#e0e0e0' : '#333333',\n      },\n    },\n    subtitle: {\n      text: 'Source: NearBlocks.io',\n    },\n    xAxis: {\n      type: 'datetime',\n      lineColor: theme === 'dark' ? '#e0e0e0' : '#333333',\n      labels: {\n        style: {\n          color: theme === 'dark' ? '#e0e0e0' : '#333333',\n        },\n      },\n    },\n    yAxis: {\n      title: {\n        text: 'Transactions per Second',\n      },\n      lineColor: theme === 'dark' ? '#e0e0e0' : '#333333',\n      labels: {\n        style: {\n          color: theme === 'dark' ? '#e0e0e0' : '#333333',\n        },\n      },\n      gridLineColor: theme === 'dark' ? '#1F2228' : '#e6e6e6',\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle',\n      itemStyle: {\n        color: theme === 'dark' ? '#e0e0e0' : '#333333',\n      },\n      itemHoverStyle: {\n        color: theme === 'dark' ? '#e0e0e0' : '#333333',\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        label: {\n          connectorAllowed: false,\n        },\n      },\n    },\n    tooltip: {\n      valueDecimals: 2,\n    },\n    series: chartTpsData,\n  };\n\n  const iframeSrc = `\n  <html>\n    <head>\n      <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/dayjs@1.10.4\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/numeral@2.0.6/numeral.min.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/big.js@5.2.2\"></script>\n    <style>\n      body {\n        background-color: ${theme === 'dark' ? '#0d0d0d' : '#ffffff'};\n        margin: 0;\n        padding: 0;\n      }\n      html{\n\n        background-color: ${theme === 'dark' ? '#0d0d0d' : '#ffffff'};\n      }\n    </style>\n    </head>\n    <body >\n      <div id=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n      ${\n        poweredBy\n          ? '<p style=\"text-align: center; color: #000; font-size: 0.75rem; padding-top: 1rem; padding-bottom: 1rem; font-family: sans-serif;\">Powered by <a href=\"https://nearblocks.io/?utm_source=bos_widget&utm_medium=Charts\" target=\"_blank\" style=\"font-weight: 600; font-family: sans-serif; color: #000; text-decoration: none;\">NearBlocks</a></p>'\n          : ''\n      }\n      <script type=\"text/javascript\">\n        const chartConfig = ${JSON.stringify(chartConfig)};\n        if (${logView}) {\n          chartConfig.yAxis.type = 'logarithmic'\n        }\n        Highcharts.chart('chart-container', chartConfig);\n      </script>\n    </body>\n  </html>\n`;\n\n  return (\n    <div>\n      {chartTypes && (\n        <>\n          <div\n            className=\"block bg-white dark:bg-black-600 dark:border-black-200 border soft-shadow rounded-xl overflow-hidden mb-10\"\n            style={{ height: 580 }}\n          >\n            <div className=\"border-b dark:border-black-200 flex justify-between items-center text-center\">\n              <p className=\"leading-7 px-4 text-sm py-4 text-nearblue-600 dark:text-neargray-10\">\n                Near Transactions per Second Chart shows the transactions\n                occuring per second on Near blockchain.\n              </p>\n              {chartTpsData && chartTpsData?.length > 0 && (\n                <div className=\"flex items-center text-nearblue-600 dark:text-neargray-10\">\n                  <OverlayTrigger\n                    placement=\"top-start\"\n                    delay={{ show: 500, hide: 0 }}\n                    overlay={\n                      <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                        {\n                          'Toggle between Log View and Normal View. Log View uses logarithmic scale.'\n                        }\n                      </Tooltip>\n                    }\n                  >\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </OverlayTrigger>\n                  <div className=\"w-6 flex\">\n                    <Switch.Root\n                      className=\"w-[24px] h-[14px] bg-neargray-50 dark:bg-neargray-600 rounded-full data-[state=checked]:bg-teal-800 dark:data-[state=checked]:bg-green-250 outline-none cursor-pointer\"\n                      id=\"airplane-mode\"\n                      style={{\n                        '-webkit-tap-highlight-color': 'rgba(0, 0, 0, 0)',\n                      }}\n                      onCheckedChange={handleToggle}\n                      checked={logView}\n                    >\n                      <Switch.Thumb className=\"block w-[10px] h-[10px] bg-neargray-10 dark:bg-neargray-10 rounded-full transition-transform duration-100 translate-x-0.5 will-change-transform data-[state=checked]:translate-x-[13px]\" />\n                    </Switch.Root>\n                  </div>\n                  <label className=\"text-nearblue-600 dark:text-neargray-10 text-sm leading-none pr-[15px] px-2\">\n                    {'Log View'}\n                  </label>\n                </div>\n              )}\n            </div>\n            <div className=\"pl-2 pr-2 py-8 h-full \">\n              {chartTpsData && chartTpsData?.length ? (\n                <iframe\n                  srcDoc={iframeSrc}\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    border: 'none',\n                    backgroundColor: theme === 'dark' ? '#0D0D0D' : '#FFFF',\n                  }}\n                />\n              ) : (\n                <Skeleton className=\"h-[93%] w-full\" />\n              )}\n            </div>\n          </div>\n          <h2 className=\"mb-4 px-2 text-lg text-gray-700 dark:text-neargray-10\">\n            {t('charts:otherHeading')}\n          </h2>\n        </>\n      )}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {charts?.map(\n          (chart, index) =>\n            chart?.exclude === false && (\n              <div\n                key={index}\n                className=\"block bg-white dark:bg-black-600 dark:border-black-200 border soft-shadow rounded-xl overflow-hidden\"\n              >\n                <Link\n                  href={chart?.link}\n                  className=\"block leading-7 p-3 text-sm text-nearblue-600 dark:text-neargray-10 border-b dark:border-black-200 truncate\"\n                >\n                  <h2>{chart?.text}</h2>\n                </Link>\n                <div className=\"pl-2 pr-4 py-6\">\n                  <Link href={chart?.link}>\n                    <img\n                      src={theme === 'dark' ? chart?.image_dark : chart?.image}\n                      alt={chart?.text}\n                      width={600}\n                      height={550}\n                    />\n                  </Link>\n                </div>\n              </div>\n            ),\n        )}\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.TpsChart", "fact_widget_deployments_id": "d129dd9a1bfeb0f94450a5b65f5bcbb6", "inserted_timestamp": "2024-05-31T10:41:38.242Z", "modified_timestamp": "2024-05-31T11:45:31.245Z", "__row_index": 1}