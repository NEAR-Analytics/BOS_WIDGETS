{"tx_hash": "6QZKTQHJbre9RsdmjAPKxGwwcR2bYwQDLnUGpuRG34cF", "action_id_social": "9CYpW14k6hNHfEBSLQSDxhZmU9mbaJCyTqEAsgxqMx72-0-widget", "block_id": 120910813, "block_timestamp": "2024-06-11T06:41:50.245Z", "signer_id": "nearblocksonbos.near", "widget_name": "lite.libs.fetcher", "source_code": "const fetcher = () => {\n  const retryFetch = (url, options) => {\n    let attempts = 0;\n    const retries = 3;\n    const makeRequest = () => {\n      return new Promise((resolve, reject) => {\n        asyncFetch(url, options)\n          .then((response) => {\n            if (response.ok) {\n              return resolve(response);\n            }\n            return reject(response);\n          })\n          .catch(reject);\n      });\n    };\n    const attemptRequest = () => {\n      return makeRequest()\n        .then((response) => response)\n        .catch((error) => {\n          if (attempts < retries) {\n            attempts++;\n            const delay = 1000 * Math.pow(2, attempts);\n            return new Promise((resolve) => setTimeout(resolve, delay)).then(\n              attemptRequest\n            );\n          } else {\n            return Promise.reject(error);\n          }\n        });\n    };\n    return attemptRequest();\n  };\n  const rpcFetch = (url, method, params) => {\n    const options = {\n      body: JSON.stringify({\n        id: \"near\",\n        jsonrpc: \"2.0\",\n        method,\n        params,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n    };\n    return new Promise((resolve, reject) => {\n      retryFetch(url, options)\n        .then((response) => {\n          const body = response.body;\n          if (body.result) {\n            return resolve(body.result);\n          }\n          return reject(body.error);\n        })\n        .catch(reject);\n    });\n  };\n  const apiFetch = (url) => {\n    const options = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    return new Promise((resolve, reject) => {\n      retryFetch(url, options)\n        .then((response) => {\n          resolve(response.body);\n        })\n        .catch(reject);\n    });\n  };\n  return { apiFetch, retryFetch, rpcFetch };\n};\nreturn fetcher(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/lite.libs.fetcher", "fact_widget_deployments_id": "aac910551df893cd9da9de9cf203c1db", "inserted_timestamp": "2024-06-11T08:04:49.294Z", "modified_timestamp": "2024-06-11T08:04:49.294Z", "__row_index": 0}