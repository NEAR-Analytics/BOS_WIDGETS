{"tx_hash": "Fdn9r7zvU68imt2iSWCyag9KJRUjRzfHw9rHR7aKRQyS", "action_id_social": "48WJqpavGUMGFx9uWhRzMGBmwwg3TpsaMpVfMKJEpWhm-0-widget", "block_id": 117047582, "block_timestamp": "2024-04-17T16:20:06.427Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Address.TokenTransactions", "source_code": "/**\n * Component: AddressTokenTransactions\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Tokens Transactions of address on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [id] - The account identifier passed as a string\n * @param {Object.<string, string>} [filters] - Key-value pairs for filtering transactions. (Optional)\n *                                              Example: If provided, method=batch will filter the blocks with method=batch.\n * @param {function} [handleFilter] - Function to handle filter changes. (Optional)\n *                                    Example: handleFilter={handlePageFilter} where handlePageFilter is a function to filter the page.\n * @param {function} [onFilterClear] - Function to clear a specific or all filters. (Optional)\n *                                     Example: onFilterClear={handleClearFilter} where handleClearFilter is a function to clear the applied filters.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Filter.jsx\" */\nconst Filter = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M14 14v6l-4 2v-8L4 5V3h16v2l-6 9zM6.404 5L12 13.394 17.596 5H6.404z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Filter.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\nconst FaCheckCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"\n        fill=\"#50C878\"\n      />\n    </svg>\n  );\n};\nconst FaTimesCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z\"\n        fill=\"#ff0000\"\n      />\n    </svg>\n  );\n};\nconst FaHourglassStart = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 384 512\">\n      <path\n        d=\"M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM288 437v11H96V437c0-25.5 10.1-49.9 28.1-67.9L192 301.3l67.9 67.9c18 18 28.1 42.4 28.1 67.9z\"\n        fill=\"#FFEB3B\"\n      />\n    </svg>\n  );\n};\n\nconst getOptions = (status) => {\n  switch (status) {\n    case null:\n      return {\n        bg: 'bg-yellow-50 dark:bg-black',\n        text: 'text-yellow-500',\n        icon: FaHourglassStart,\n        label: 'Pending',\n      };\n    case false:\n      return {\n        bg: 'bg-red-50 dark:bg-black',\n        text: 'text-red-500',\n        icon: FaTimesCircle,\n        label: 'Failure',\n      };\n\n    default:\n      return {\n        bg: 'bg-emerald-50 dark:bg-black',\n        text: 'text-emerald-500',\n        icon: FaCheckCircle,\n        label: 'Success',\n      };\n  }\n};\n\nconst TxnStatus = (props) => {\n  const option = getOptions(props.status);\n  const Icon = option.icon;\n\n  return (\n    <div className=\"w-full md:w-3/4 break-words\">\n      <span\n        className={`inline-flex items-center text-xs rounded py-1 ${\n          option.bg\n        } ${option.text} ${props.showLabel ? ' px-2' : ' px-1'}`}\n      >\n        <Icon />\n        {props.showLabel && <span className=\"ml-2\">{option.label}</span>}\n      </span>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Clock.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Clock = (props) => (\n  <svg\n    viewBox=\"64 64 896 896\"\n    focusable=\"false\"\n    data-icon=\"clock-circle\"\n    width=\"1em\"\n    height=\"1em\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n    {...props}\n  >\n    <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\"></path>\n    <path d=\"M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z\"></path>\n  </svg>\n);/* END_INCLUDE COMPONENT: \"includes/icons/Clock.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\nconst CloseCircle = (props) => {\n  const handleClick = () => {\n    if (props.onClick) {\n      props.onClick('All');\n    }\n  };\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      className={props.className}\n      onClick={handleClick}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm0-9.414l2.828-2.829 1.415 1.415L13.414 12l2.829 2.828-1.415 1.415L12 13.414l-2.828 2.829-1.415-1.415L10.586 12 7.757 9.172l1.415-1.415L12 10.586z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Download.jsx\" */\nconst Download = () => {\n  return (\n    <svg\n      width=\"11\"\n      height=\"12\"\n      viewBox=\"0 0 11 12\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M10.5418 12V2H6.87516V3H9.62516V11H1.37516V3H4.12516V2H0.458496V12H10.5418ZM5.04183 5.5H3.2085L5.50016 8.5L7.79183 5.5H5.9585V0H5.04183V5.5Z\"\n        fill=\"#4b5563\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Download.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};\n\nconst SortIcon = (props) => {\n  return (\n    <ArrowUp\n      className={`h-3 w-3 fill-current transition-transform mr-1 duration-700 ${\n        props.order !== 'asc' ? 'transform rotate-180' : 'transform rotate-0'\n      }`}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n\n\nfunction MainComponent({\n  network,\n  t,\n  id,\n  ownerId,\n  filters,\n  handleFilter,\n  onFilterClear,\n}) {\n  const {\n    capitalizeFirstLetter,\n    formatTimestampToString,\n    getTimeAgoString,\n    localFormat,\n  } = VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  const { getConfig, handleRateLimit, nanoToMilli, truncateString } =\n    VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const { tokenAmount } = VM.require(`${ownerId}/widget/includes.Utils.near`);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [showAge, setShowAge] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const errorMessage = t ? t('txns:noTxns') : 'No transactions found!';\n  const [tokens, setTokens] = useState(\n    {},\n  );\n  const [sorting, setSorting] = useState('desc');\n  const [address, setAddress] = useState('');\n  const [filterValue, setFilterValue] = useState({});\n\n  const config = getConfig && getConfig(network);\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    function fetchTotalTokens(qs) {\n      const queryParams = qs ? '?' + qs : '';\n      asyncFetch(\n        `${config?.backendUrl}account/${id}/ft-txns/count?${queryParams}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count | 0);\n            } else {\n              handleRateLimit(data, () => fetchTotalTokens(qs));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchTokens(qs, sqs, page) {\n      setIsLoading(true);\n      const queryParams = qs ? qs + '&' : '';\n      asyncFetch(\n        `${config?.backendUrl}account/${id}/ft-txns?${queryParams}order=${sqs}&page=${page}&per_page=25`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns;\n            if (data.status === 200) {\n              if (Array.isArray(resp) && resp.length > 0) {\n                setTokens((prevData) => ({ ...prevData, [page]: resp || [] }));\n              } else if (resp.length === 0) {\n                setTokens({});\n              }\n              setIsLoading(false);\n            } else {\n              handleRateLimit(\n                data,\n                () => fetchTokens(qs, sorting, page),\n                () => setIsLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    let urlString = '';\n    if (filters && Object.keys(filters).length > 0) {\n      urlString = Object.keys(filters)\n        .map(\n          (key) =>\n            `${encodeURIComponent(key)}=${encodeURIComponent(filters[key])}`,\n        )\n        .join('&');\n    }\n    if (urlString && sorting) {\n      fetchTotalTokens(urlString);\n      fetchTokens(urlString, sorting, currentPage);\n    } else if (sorting && (!filters || Object.keys(filters).length === 0)) {\n      fetchTotalTokens();\n      fetchTokens('', sorting, currentPage);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, id, currentPage, filters, sorting]);\n\n  const toggleShowAge = () => setShowAge((s) => !s);\n\n  const onInputChange = (\n    event,\n    name,\n  ) => {\n    setFilterValue((prevFilters) => ({\n      ...prevFilters,\n      [name]: event.target.value,\n    }));\n  };\n\n  const onFilter = (\n    e,\n    name,\n  ) => {\n    e.preventDefault();\n\n    if (filterValue[name] !== null && filterValue[name] !== undefined) {\n      handleFilter(name, filterValue[name]);\n    }\n  };\n\n  const onClear = (name) => {\n    if (onFilterClear && filters) {\n      onFilterClear(name);\n      setFilterValue((prevFilters) => ({\n        ...prevFilters,\n        [name]: '',\n      }));\n    }\n  };\n\n  const onOrder = () => {\n    setSorting((state) => (state === 'asc' ? 'desc' : 'asc'));\n  };\n\n  const onHandleMouseOver = (e, id) => {\n    e.preventDefault();\n\n    setAddress(id);\n  };\n  const handleMouseLeave = () => {\n    setAddress('');\n  };\n  const columns = [\n    {\n      header: '',\n      key: '',\n      cell: (row) => (\n        <>\n          <TxnStatus status={row.outcomes.status} showLabel={false} />\n        </>\n      ),\n      tdClassName:\n        'pl-5 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n    },\n    {\n      header: <>{t ? t('txns:hash') : 'TXN HASH'}</>,\n      key: 'transaction_hash',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[120px] inline-block align-bottom text-green-500 dark:text-green-250 whitespace-nowrap\">\n                  <Link\n                    href={`/txns/${row.transaction_hash}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500 dark:text-green-250 font-medium hover:no-underline\">\n                      {row.transaction_hash}\n                    </a>\n                  </Link>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white p-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {row.transaction_hash}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName: 'px-4 py-4 text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: (\n        <>\n          {' '}\n          <Popover.Root>\n            <Popover.Trigger\n              asChild\n              className=\"flex items-center px-4 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider focus:outline-none\"\n            >\n              <button className=\"IconButton\" aria-label=\"Update dimensions\">\n                {t ? t('txns:type') : 'METHOD'}\n                <Filter className=\"h-4 w-4 fill-current ml-2\" />\n              </button>\n            </Popover.Trigger>\n            <Popover.Content\n              className=\"z-50 bg-white dark:bg-black-600 shadow-lg border dark:border-black-200 rounded-b-lg p-2\"\n              sideOffset={5}\n            >\n              <div className=\"flex flex-col\">\n                <input\n                  name=\"event\"\n                  value={filterValue['event']}\n                  onChange={(e) => onInputChange(e, 'event')}\n                  placeholder=\"Search by method\"\n                  className=\"border dark:border-black-200 rounded h-8 mb-2 px-2 text-nearblue-600 dark:text-neargray-10 text-xs\"\n                />\n                <div className=\"flex\">\n                  <button\n                    type=\"submit\"\n                    onClick={(e) => onFilter(e, 'event')}\n                    className=\"flex items-center justify-center flex-1 rounded bg-green-500 dark:bg-green-250 dark:text-black h-7 text-white text-xs mr-2\"\n                  >\n                    <Filter className=\"h-3 w-3 fill-current mr-2\" />{' '}\n                    {t ? t('txns:filter.filter') : 'Filter'}\n                  </button>\n                  <button\n                    name=\"type\"\n                    type=\"button\"\n                    onClick={() => onClear('event')}\n                    className=\"flex-1 rounded bg-gray-300 dark:bg-black-200 dark:text-white text-xs h-7 \"\n                  >\n                    {t ? t('txns:filter.clear') : 'Clear'}\n                  </button>\n                </div>\n              </div>\n            </Popover.Content>\n          </Popover.Root>\n        </>\n      ),\n      key: 'cause',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"bg-blue-900/10 text-xs text-nearblue-600 dark:text-neargray-10 rounded-xl px-2 py-1 max-w-[120px] inline-flex truncate\">\n                  <span className=\"block truncate\">{row?.cause}</span>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"center\"\n                side=\"bottom\"\n              >\n                {row?.cause}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName:\n        'px-4 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n    },\n    {\n      header: <>Affected</>,\n      key: 'affected_account_id',\n      cell: (row) => (\n        <span>\n          {row?.affected_account_id ? (\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <span\n                    className={` inline-block align-bottom text-green-500 dark:text-green-250 whitespace-nowrap ${\n                      row?.affected_account_id === address\n                        ? ' rounded-md bg-[#FFC10740] border-[#FFC10740] dark:bg-black-200 dark:border-neargray-50 border border-dashed p-0.5 px-1 -m-[1px] cursor-pointer text-[#033F40]'\n                        : 'text-green-500 dark:text-green-250 p-0.5 px-1'\n                    }`}\n                  >\n                    <Link\n                      href={`/address/${row?.affected_account_id}`}\n                      className=\"hover:no-underline\"\n                    >\n                      <a\n                        className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                        onMouseOver={(e) =>\n                          onHandleMouseOver(e, row?.affected_account_id)\n                        }\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {truncateString(row?.affected_account_id, 15, '...')}\n                      </a>\n                    </Link>\n                  </span>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {row?.affected_account_id}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          ) : (\n            'system'\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-4 py-4 text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n      thClassName:\n        'px-4 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: '',\n      key: '',\n      cell: (row) => (\n        <>\n          {row.involved_account_id === row.affected_account_id ? (\n            <span className=\"uppercase rounded w-10 py-2 h-6 flex items-center justify-center bg-green-200 dark:bg-[#adb5bd]/[0.15] dark:text-[#bbbbbb] dark:border dark:border-[#adb5bd]/[0.25]  text-white text-xs font-semibold\">\n              {t ? t('txns:txnSelf') : 'SELF'}\n            </span>\n          ) : Number(row?.delta_amount) < 0 ? (\n            <span className=\"uppercase rounded w-10 h-6 flex items-center justify-center bg-yellow-100 dark:bg-yellow-400/[0.10]  dark:text-[#cc9a06] dark:border dark:border-yellow-400/60 text-yellow-700 text-xs font-semibold\">\n              {t ? t('txns:txnOut') : 'OUT'}\n            </span>\n          ) : (\n            <span className=\"uppercase rounded w-10 h-6 flex items-center justify-center bg-neargreen dark:bg-green-500/[0.15]  dark:text-[#00a186] dark:border dark:border-green-400/75 text-white text-xs font-semibold\">\n              {t ? t('txns:txnIn') : 'IN'}\n            </span>\n          )}\n        </>\n      ),\n      tdClassName: 'text-center',\n    },\n    {\n      header: (\n        <Popover.Root>\n          <Popover.Trigger\n            asChild\n            className=\"flex items-center px-4 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider focus:outline-none\"\n          >\n            <button className=\"IconButton\" aria-label=\"Update dimensions\">\n              Involved\n              <Filter className=\"h-4 w-4 fill-current ml-2\" />\n            </button>\n          </Popover.Trigger>\n          <Popover.Content\n            className=\"bg-white dark:bg-black-600  shadow-lg border dark:border-black-200 rounded-b-lg p-2\"\n            sideOffset={5}\n          >\n            <input\n              name=\"involved\"\n              value={filterValue['involved']}\n              onChange={(e) => onInputChange(e, 'involved')}\n              placeholder={\n                t ? t('txns:filter.placeholder') : 'Search by address e.g. \u24c3..'\n              }\n              className=\"border rounded h-8 mb-2 px-2 text-nearblue-600 dark:text-neargray-10 text-xs\"\n            />\n            <div className=\"flex\">\n              <button\n                type=\"submit\"\n                onClick={(e) => onFilter(e, 'involved')}\n                className=\"flex items-center justify-center flex-1 rounded bg-green-500 dark:bg-green-250 dark:text-black h-7 text-white text-xs mr-2\"\n              >\n                <Filter className=\"h-3 w-3 fill-current mr-2\" />{' '}\n                {t ? t('txns:filter.filter') : 'Filter'}\n              </button>\n              <button\n                name=\"involved\"\n                type=\"button\"\n                onClick={() => onClear('involved')}\n                className=\"flex-1 rounded bg-gray-300 dark:bg-black-200 dark:text-white text-xs h-7\"\n              >\n                {t ? t('txns:filter.clear') : 'Clear'}\n              </button>\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      ),\n      key: 'involved_account_id',\n      cell: (row) => (\n        <span>\n          {row.involved_account_id ? (\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <span\n                    className={`inline-block align-bottom text-green-500 dark:text-green-250 whitespace-nowrap ${\n                      row?.involved_account_id === address\n                        ? ' rounded-md bg-[#FFC10740] border-[#FFC10740] dark:bg-black-200 dark:border-neargray-50 border  border-dashed p-0.5 px-1 -m-[1px] cursor-pointer text-[#033F40]'\n                        : 'text-green-500 dark:text-green-250 p-0.5 px-1'\n                    }`}\n                  >\n                    <Link\n                      href={`/address/${row.involved_account_id}`}\n                      className=\"hover:no-underline\"\n                    >\n                      <a\n                        className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                        onMouseOver={(e) =>\n                          onHandleMouseOver(e, row?.involved_account_id)\n                        }\n                        onMouseLeave={handleMouseLeave}\n                      >\n                        {truncateString(row.involved_account_id, 15, '...')}\n                      </a>\n                    </Link>\n                  </span>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {row.involved_account_id}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          ) : (\n            'system'\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-4 py-4 text-sm text-nearblue-600 dark:text-neargray-10  font-medium',\n    },\n    {\n      header: <>Quantity</>,\n      key: 'block_height',\n      cell: (row) => (\n        <span>\n          {Number(row?.delta_amount) > 0 ? (\n            <div className=\"text-neargreen flex flex-row items-center\">\n              {'+' +\n                localFormat(\n                  tokenAmount(row?.delta_amount, row?.ft?.decimals, true),\n                )}\n            </div>\n          ) : (\n            <div className=\"text-red-500 flex flex-row items-center\">\n              {row?.delta_amount\n                ? localFormat(\n                    tokenAmount(row?.delta_amount, row?.ft?.decimals, true),\n                  )\n                : ''}\n            </div>\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-4 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10  font-medium',\n      thClassName:\n        'px-4 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10  uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <>Token</>,\n      key: 'block_height',\n      cell: (row) => {\n        return (\n          row?.ft && (\n            <div className=\"flex flex-row items-center\">\n              <span className=\"inline-flex mr-1\">\n                <TokenImage\n                  src={row?.ft?.icon}\n                  alt={row?.ft?.name}\n                  className=\"w-4 h-4\"\n                  appUrl={config.appUrl}\n                />\n              </span>\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <div className=\"text-sm text-nearblue-600 dark:text-neargray-10  max-w-[110px] inline-block truncate whitespace-nowrap\">\n                      <Link\n                        href={`/token/${row?.ft?.contract}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a className=\"text-green-500 dark:text-green-250 font-medium hover:no-underline\">\n                          {row?.ft?.name}\n                        </a>\n                      </Link>\n                    </div>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {row?.ft?.name}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n              {row?.ft?.symbol && (\n                <Tooltip.Provider>\n                  <Tooltip.Root>\n                    <Tooltip.Trigger asChild>\n                      <div className=\"text-sm text-nearblue-700 max-w-[80px] inline-block truncate\">\n                        &nbsp; {row?.ft.symbol}\n                      </div>\n                    </Tooltip.Trigger>\n                    <Tooltip.Content\n                      className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                      align=\"start\"\n                      side=\"bottom\"\n                    >\n                      {row?.ft.symbol}\n                    </Tooltip.Content>\n                  </Tooltip.Root>\n                </Tooltip.Provider>\n              )}\n            </div>\n          )\n        );\n      },\n      tdClassName:\n        'px-4 py-4 text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n      thClassName:\n        'px-4 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: (\n        <div className=\"w-full inline-flex px-4 py-4\">\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <button\n                  type=\"button\"\n                  onClick={toggleShowAge}\n                  className=\"text-left text-xs w-full flex items-center font-semibold uppercase tracking-wider  text-green-500 dark:text-green-250 focus:outline-none whitespace-nowrap\"\n                >\n                  {showAge\n                    ? t\n                      ? t('txns:age')\n                      : 'AGE'\n                    : t\n                    ? t('txns:ageDT')\n                    : 'DATE TIME (UTC)'}\n                  {showAge && (\n                    <Clock className=\"text-green-500 dark:text-green-250 ml-2\" />\n                  )}\n                </button>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"center\"\n                side=\"top\"\n              >\n                {showAge\n                  ? 'Click to show Datetime Format'\n                  : 'Click to show Age Format'}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n          <button type=\"button\" onClick={onOrder} className=\"px-2\">\n            <div className=\"text-nearblue-600 dark:text-neargray-10 font-semibold\">\n              <SortIcon order={sorting} />\n            </div>\n          </button>\n        </div>\n      ),\n      key: 'block_timestamp',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span>\n                  {!showAge\n                    ? row?.block_timestamp\n                      ? formatTimestampToString(\n                          nanoToMilli(row?.block_timestamp),\n                        )\n                      : ''\n                    : row?.block_timestamp\n                    ? getTimeAgoString(nanoToMilli(row?.block_timestamp))\n                    : ''}\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {showAge\n                  ? row?.block_timestamp\n                    ? formatTimestampToString(nanoToMilli(row?.block_timestamp))\n                    : ''\n                  : row?.block_timestamp\n                  ? getTimeAgoString(nanoToMilli(row?.block_timestamp))\n                  : ''}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName:\n        'px-4 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName: 'whitespace-nowrap',\n    },\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n      {isLoading ? (\n        <div className=\"pl-6 max-w-lg w-full py-5 \">\n          <Skeleton className=\"h-4\" />\n        </div>\n      ) : (\n        <div className={`flex flex-col lg:flex-row pt-4`}>\n          <div className=\"flex flex-col\">\n            <p className=\"leading-7 pl-6 text-sm mb-4 text-nearblue-600 dark:text-neargray-10\">\n              A total of {localFormat && localFormat(totalCount.toString())}{' '}\n              transactions found\n            </p>\n          </div>\n          <div className=\"flex flex-col px-4 text-sm mb-4 text-nearblue-600 dark:text-neargray-10 lg:flex-row lg:ml-auto  lg:items-center lg:justify-between\">\n            {filters && Object.keys(filters).length > 0 && (\n              <div className=\"flex  px-2 items-center text-sm text-gray-500 mb-2 lg:mb-0\">\n                <span className=\"mr-1 lg:mr-2\">Filtered By:</span>\n                <span className=\"flex flex-wrap items-center justify-center bg-gray-100 dark:bg-black-200 rounded-full px-3 py-1 space-x-2\">\n                  {Object.keys(filters).map((key) => (\n                    <span\n                      className=\"flex items-center max-sm:mb-1 truncate max-w-[120px]\"\n                      key={key}\n                    >\n                      {capitalizeFirstLetter(key)}:{' '}\n                      <span className=\"font-semibold truncate\">\n                        {filters[key]}\n                      </span>\n                    </span>\n                  ))}\n                  <CloseCircle\n                    className=\"w-4 h-4 fill-current cursor-pointer\"\n                    onClick={onClear}\n                  />\n                </span>\n              </div>\n            )}\n            <span className=\"text-xs text-nearblue-600 dark:text-neargray-10 self-stretch lg:self-auto px-2\">\n              <button className=\"hover:no-underline \">\n                <Link\n                  href={`/token/exportdata?address=${id}`}\n                  className=\"flex items-center text-nearblue-600 dark:text-neargray-10 font-medium py-2 border border-neargray-700 dark:border-black-200 px-4 rounded-md bg-white dark:bg-black-600 hover:bg-neargray-800\"\n                >\n                  <p>CSV Export</p>\n                  <span className=\"ml-2\">\n                    <Download />\n                  </span>\n                </Link>\n              </button>\n            </span>\n          </div>\n        </div>\n      )}\n      <Widget\n        src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n        props={{\n          columns: columns,\n          data: tokens[currentPage],\n          isLoading: isLoading,\n          isPagination: true,\n          count: totalCount,\n          page: currentPage,\n          limit: 25,\n          pageLimit: 200,\n          setPage: setPage,\n          Error: errorMessage,\n        }}\n      />\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Address.TokenTransactions", "fact_widget_deployments_id": "f3b5228a4ddbeec43f1ae143d5940e94", "inserted_timestamp": "2024-04-17T17:41:46.497Z", "modified_timestamp": "2024-04-17T17:41:46.497Z", "__row_index": 10}