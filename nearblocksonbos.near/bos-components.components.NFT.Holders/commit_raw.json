{"tx_hash": "HH3c4UwoYVnz7kmvqreyTpXFisoRujsAMVkdwyW2fzQP", "action_id_social": "31oBeNpxStASUVjwCv9pTsDwAzGtDYU4qyCpc79sv4ab-0-widget", "block_id": 116536495, "block_timestamp": "2024-04-10T11:22:27.064Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.NFT.Holders", "source_code": "/**\n * Component: NFTHolders\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Non-Fungible Token Holders List.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {Token} [token] - The Token type passed as object\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\n\nfunction MainComponent({ network, id, token, ownerId }) {\n  const { localFormat, serialNumber, getTimeAgoString } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { getConfig, handleRateLimit, holderPercentage, nanoToMilli } =\n    VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [totalCount, setTotalCount] = useState(0);\n  const [holder, setHolder] = useState(\n    {},\n  );\n  const [status, setStatus] = useState({\n    height: 0,\n    sync: true,\n    timestamp: '',\n  });\n\n  const [tokens, setTokens] = useState({} );\n\n  const config = getConfig && getConfig(network);\n\n  const errorMessage = 'No token holders found!';\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCurrentPage(currentPage);\n  }, [currentPage]);\n\n  useEffect(() => {\n    function fetchNFTData() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}nfts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setTokens(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchNFTData, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchStatus() {\n      asyncFetch(`${config.backendUrl}sync/status`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.status?.aggregates.nft_holders;\n            if (data.status === 200) {\n              setStatus(resp);\n            } else {\n              handleRateLimit(data, fetchStatus);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchTotalHolders() {\n      asyncFetch(`${config?.backendUrl}nfts/${id}/holders/count`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.holders?.[0];\n            if (data.status === 200) {\n              setTotalCount(0);\n              setTotalCount(resp?.count);\n            } else {\n              handleRateLimit(data, fetchTotalHolders);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchHoldersData(page) {\n      setIsLoading(true);\n\n      asyncFetch(\n        `${config?.backendUrl}nfts/${id}/holders?page=${page}&per_page=25`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(\n          (data) => {\n            const resp = data?.body?.holders;\n            if (data.status === 200 && Array.isArray(resp) && resp.length > 0) {\n              setHolder((prevData) => ({ ...prevData, [page]: resp || [] }));\n              setIsLoading(false);\n            } else {\n              handleRateLimit(\n                data,\n                () => fetchHoldersData(page),\n                () => setIsLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n    if (!token && token === undefined) {\n      fetchNFTData();\n    }\n    if (config?.backendUrl) {\n      fetchTotalHolders();\n      fetchHoldersData(currentPage);\n      fetchStatus();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, currentPage, id, token]);\n\n  useEffect(() => {\n    if (token) {\n      setTokens(token);\n    }\n  }, [token]);\n\n  const columns = [\n    {\n      header: <span>Rank</span>,\n      key: '',\n      cell: (_row, index) => (\n        <span>{serialNumber(index, currentPage, 25)}</span>\n      ),\n      tdClassName:\n        'pl-5 pr-2 py-4 whitespace-nowrap text-sm text-nearblue-600 w-[50px]',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[50px]',\n    },\n    {\n      header: <span> Address</span>,\n      key: 'account',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[200px] inline-block align-bottom text-green-500 whitespace-nowrap\">\n                  <Link\n                    href={`/address/${row?.account}`}\n                    className=\"hover:no-undeline\"\n                  >\n                    <a className=\"text-green-500 font-medium hover:no-undeline\">\n                      {row?.account}\n                    </a>\n                  </Link>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white p-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {row?.account}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName: 'px-5 py-4 text-sm text-nearblue-600',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: <span>Quantity</span>,\n      key: 'quantity',\n      cell: (row) => <span>{row?.quantity}</span>,\n      tdClassName: 'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[200px]',\n    },\n    {\n      header: <span> Percentage</span>,\n      key: 'tokens',\n      cell: (row) => {\n        const percentage =\n          Number(tokens?.tokens) > 0\n            ? holderPercentage(tokens?.tokens, row?.quantity)\n            : null;\n        return (\n          <span>\n            {percentage === null ? 'N/A' : `${percentage}%`}\n            {percentage !== null && percentage <= 100 && percentage >= 0 && (\n              <div className=\"h-0.5 mt-1 w-full bg-gray-100\">\n                <div\n                  style={{ width: `${percentage}%` }}\n                  className=\"h-0.5 bg-green-500\"\n                />\n              </div>\n            )}\n          </span>\n        );\n      },\n      tdClassName:\n        'px-5 py-3 whitespace-nowrap text-sm text-nearblue-600 font-medium',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[300px] ',\n    },\n  ];\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"pl-6 max-w-lg w-full py-5 \">\n          <Skeleton className=\"h-4\" />\n        </div>\n      ) : (\n        <>\n          {!status.sync && (\n            <div className=\"w-full text-center bg-nearblue rounded-t-xl px-5 py-4 text-green text-sm\">\n              Holders count is out of sync. Last synced block is\n              <span className=\"font-bold mx-0.5\">\n                {localFormat && localFormat(status.height)}\n              </span>\n              {status?.timestamp &&\n                `(${getTimeAgoString(nanoToMilli(status.timestamp))}).`}{' '}\n              Holders data will be delayed.\n            </div>\n          )}\n          <div className={`flex flex-col lg:flex-row pt-4`}>\n            <div className=\"flex flex-col\">\n              <p className=\"leading-7 px-6 text-sm mb-4 text-nearblue-600\">\n                A total of {localFormat && localFormat(totalCount.toString())}{' '}\n                token holders found\n              </p>\n            </div>\n          </div>\n        </>\n      )}\n      <Widget\n        src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n        props={{\n          columns: columns,\n          data: holder[currentPage],\n          isLoading: isLoading,\n          isPagination: true,\n          count: totalCount,\n          page: currentPage,\n          limit: 25,\n          pageLimit: 200,\n          setPage: setPage,\n          Error: errorMessage,\n        }}\n      />\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.NFT.Holders", "fact_widget_deployments_id": "b50739db53717da76c87c47201f717f5", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 2}