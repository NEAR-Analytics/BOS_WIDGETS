{"tx_hash": "9pdZfoat281qg5pmQt4rvP9Ts52RWfUW1pq1QmJDF4JT", "action_id_social": "HqPsnxDw5HtA5pJhZo2uq4w8gA83SPA9JE9uZSRLQbmr-0-widget", "block_id": 116999004, "block_timestamp": "2024-04-16T23:36:31.768Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Accounts", "source_code": "/**\n * Component: Accounts\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Accounts component enable users to view information related to their accounts.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [id] - The account identifier passed as a string.\n * @param {Function} [requestSignInWithWallet] - Function to initiate sign-in with a wallet.\n * @param {boolean} [signedIn] - Boolean indicating whether the user is currently signed in or not.\n * @param {string} [accountId] - The account ID of the signed-in user, passed as a string.\n * @param {Function} [logOut] - Function to log out.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/FaExternalLinkAlt.jsx\" */\nconst FaExternalLinkAlt = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path d=\"M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaExternalLinkAlt.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/TokenHoldings.jsx\" */\n/**\n * @interface Props\n * @param {string} [id] - Optional identifier for the account, passed as a string.\n * @param {boolean} [loading] - Flag indicating whether data is currently loading.\n * @param {boolean} [inventoryLoading] - Flag indicating whether inventory data is currently loading.\n * @param {InventoryInfo} [data] - Information related to the inventory.\n * @param {Object} [ft] - Object containing details about the tokens.\n * @param {string} [ft.amount] -  amount in USD of tokens.\n * @param {Object[]} [ft.tokens] - Array containing 'TokenListInfo' objects, providing information about individual token details.\n * @param {string} [appUrl] - The URL of the application.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\"\n      />\n    </svg>\n  );\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TokenHoldings = (props) => {\n  const { dollarFormat, localFormat } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { truncateString } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const Loading = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n      ></div>\n    );\n  };\n  const nfts = props.data?.nfts || [];\n  if (props.loading || props.inventoryLoading) {\n    return <Loading className=\"flex w-full h-8\" />;\n  }\n\n  if (!props.ft?.tokens?.length && !nfts?.length) {\n    return (\n      <select className=\"appearance-none w-full h-8 text-xs px-2 outline-none rounded bg-white dark:bg-black-600 border dark:border-black-200\">\n        <option>N/A</option>\n      </select>\n    );\n  }\n\n  const ftAmount = props.ft?.amount ?? 0;\n\n  return (\n    <Select.Root>\n      <Select.Trigger className=\"w-full h-8 text-sm px-2 rounded border dark:border-black-200 outline-none flex items-center justify-between cursor-pointer\">\n        <span>\n          {ftAmount ? '$' + dollarFormat(ftAmount) : ''}\n          <span className=\"bg-green-500 text-xs text-white rounded ml-2 px-1 p-0.5\">\n            {(props.ft?.tokens?.length || 0) + (nfts?.length || 0)}\n          </span>\n        </span>\n        <ArrowDown className=\"w-4 h-4 fill-current text-gray-500 pointer-events-none\" />\n      </Select.Trigger>\n      <Select.Content\n        position=\"popper\"\n        sideOffset={5}\n        className=\"SelectContent\"\n      >\n        <ScrollArea.Root className=\"overflow-hidden rounded-b-xl soft-shadow bg-white dark:bg-black-600\">\n          <ScrollArea.Viewport className=\"border dark:border-black-200 z-50 pb-2\">\n            <div className=\"max-h-60\">\n              {props.ft?.tokens?.length > 0 && (\n                <>\n                  <div className=\"bg-gray-50 dark:bg-black-200 font-semibold px-3 py-2\">\n                    Tokens{' '}\n                    <span className=\"font-normal\">\n                      ({props.ft?.tokens?.length})\n                    </span>\n                  </div>\n                  <div className=\"text-gray-600 dark:text-neargray-10 text-xs divide-y dark:divide-black-200 outline-none\">\n                    {props.ft?.tokens?.map((token, index) => (\n                      <div key={token?.contract}>\n                        <Link\n                          href={`/token/${token?.contract}?a=${props.id}`}\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"flex justify-between items-center px-3 py-2 hover:bg-gray-100 dark:hover:bg-black-200 truncate hover:no-underline\">\n                            <div key={index}>\n                              <div className=\"flex items-center\">\n                                <div className=\"flex mr-1\">\n                                  <img\n                                    src={\n                                      token?.ft_meta?.icon ??\n                                      '/images/tokenplaceholder.svg'\n                                    }\n                                    alt={token.ft_meta?.name}\n                                    className=\"w-4 h-4\"\n                                  />\n                                </div>\n                                <span>\n                                  {token?.ft_meta?.name\n                                    ? truncateString(\n                                        token?.ft_meta?.name,\n                                        15,\n                                        '...',\n                                      )\n                                    : ''}\n                                  ({token?.ft_meta?.symbol})\n                                </span>\n                              </div>\n                              <div className=\"text-gray-400 flex items-center mt-1\">\n                                {token?.rpcAmount\n                                  ? localFormat(token?.rpcAmount)\n                                  : token?.rpcAmount ?? ''}\n                              </div>\n                            </div>\n                            {token?.ft_meta?.price && (\n                              <div className=\"text-right\">\n                                <div>\n                                  {token?.amountUsd\n                                    ? '$' + dollarFormat(token?.amountUsd)\n                                    : '$' + (token.amountUsd ?? '')}\n                                </div>\n                                <div className=\"text-gray-400\">\n                                  {token?.ft_meta?.price\n                                    ? '@' +\n                                      Big(token?.ft_meta?.price).toString()\n                                    : '@' + (token?.ft_meta?.price ?? '')}\n                                </div>\n                              </div>\n                            )}\n                          </a>\n                        </Link>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n              {nfts?.length > 0 && (\n                <>\n                  <div className=\"bg-gray-50 dark:bg-black-200 font-semibold px-3 py-2\">\n                    NFT Tokens{' '}\n                    <span className=\"font-normal\">({nfts?.length})</span>\n                  </div>\n                  <div className=\"text-gray-600 dark:text-neargray-10 text-xs divide-y divide-black-200 outline-none\">\n                    {nfts.map((nft) => (\n                      <div key={nft?.contract}>\n                        <Link\n                          href={`/nft-token/${nft?.contract}?a=${props.id}`}\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"flex justify-between items-center px-3 py-2 hover:bg-gray-100 dark:hover:bg-black-200 truncate hover:no-underline\">\n                            <div>\n                              <div className=\"flex items-center\">\n                                <div className=\"flex mr-1\">\n                                  <img\n                                    src={\n                                      nft?.nft_meta?.icon ??\n                                      `/images/tokenplaceholder.svg`\n                                    }\n                                    alt={nft?.nft_meta?.name}\n                                    className=\"w-4 h-4\"\n                                  />\n                                </div>\n                                <span>\n                                  {nft?.nft_meta?.name\n                                    ? truncateString(\n                                        nft?.nft_meta?.name,\n                                        15,\n                                        '...',\n                                      )\n                                    : nft?.nft_meta?.name ?? ''}\n                                  ({nft?.nft_meta?.symbol})\n                                </span>\n                              </div>\n                              <div className=\"text-gray-400 flex items-center mt-1\">\n                                {nft?.quantity\n                                  ? localFormat(nft?.quantity)\n                                  : nft?.quantity ?? ''}\n                              </div>\n                            </div>\n                          </a>\n                        </Link>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </ScrollArea.Viewport>\n          <ScrollArea.Scrollbar\n            className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 dark:hover:bg-black-200 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n            orientation=\"vertical\"\n          >\n            <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-200 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n          </ScrollArea.Scrollbar>\n          <ScrollArea.Scrollbar\n            className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 dark:hover:bg-black-200 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n            orientation=\"horizontal\"\n          >\n            <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-200 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n          </ScrollArea.Scrollbar>\n          <ScrollArea.Corner className=\"bg-neargray-50\" />\n        </ScrollArea.Root>\n      </Select.Content>\n    </Select.Root>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/TokenHoldings.jsx\" */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\nconst tabs = [\n  'Transactions',\n  'Token Txns',\n  'NFT Token Txns',\n  'Access Keys',\n  'Contract',\n  'Comments',\n];\n\nfunction MainComponent(props) {\n  const {\n    network,\n    t,\n    id,\n    requestSignInWithWallet,\n    signedIn,\n    accountId,\n    logOut,\n    ownerId,\n    theme,\n  } = props;\n\n  const { dollarFormat, localFormat, weight, convertToUTC } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const {\n    yoctoToNear,\n    fiatValue,\n    nanoToMilli,\n    shortenAddress,\n    getConfig,\n    handleRateLimit,\n  } = VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const { encodeArgs, decodeArgs } = VM.require(\n    `${ownerId}/widget/includes.Utils.near`,\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [isloading, setIsLoading] = useState(true);\n  const [inventoryLoading, setInventoryLoading] = useState(false);\n  const [statsData, setStatsData] = useState({} );\n  const [pageTab, setPageTab] = useState('Transactions');\n  const [filters, setFilters] = useState({});\n  const [accountData, setAccountData] = useState(\n    {} ,\n  );\n  const [deploymentData, setDeploymentData] = useState(\n    {} ,\n  );\n  const [tokenData, setTokenData] = useState({} );\n  const [inventoryData, setInventoryData] = useState(\n    {} ,\n  );\n  const [contract, setContract] = useState({} );\n  const [ft, setFT] = useState({} );\n  const [code, setCode] = useState({} );\n  const [key, setKey] = useState({} );\n  const [schema, setSchema] = useState({} );\n  const [contractInfo, setContractInfo] = useState(\n    {} ,\n  );\n\n  const config = getConfig && getConfig(network);\n\n  const onTab = (index) => {\n    setPageTab(tabs[index]);\n    onFilterClear('');\n  };\n\n  useEffect(() => {\n    function fetchStatsData() {\n      asyncFetch(`${config?.backendUrl}stats`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const statsResp = data?.body?.stats?.[0];\n            if (data.status === 200) {\n              setStatsData({ near_price: statsResp.near_price });\n            } else {\n              handleRateLimit(data, fetchStatsData);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchAccountData() {\n      setLoading(true);\n      asyncFetch(`${config?.backendUrl}account/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const accountResp = data?.body?.account?.[0];\n            if (data.status === 200) {\n              setAccountData({\n                account_id: accountResp.account_id,\n                amount: accountResp.amount,\n                code_hash: accountResp.code_hash,\n                created: accountResp.created,\n                deleted: accountResp.deleted,\n                locked: accountResp.locked,\n                storage_usage: accountResp.storage_usage,\n              });\n              setLoading(false);\n            } else {\n              handleRateLimit(data, fetchAccountData, () => setLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchContractData() {\n      asyncFetch(`${config?.backendUrl}account/${id}/contract/deployments`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const depResp = data?.body?.deployments?.[0];\n            if (data.status === 200) {\n              setDeploymentData(depResp);\n            } else {\n              handleRateLimit(data, fetchContractData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchTokenData() {\n      asyncFetch(`${config?.backendUrl}fts/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const tokenResp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setTokenData({\n                name: tokenResp.name,\n                icon: tokenResp.icon,\n                symbol: tokenResp.symbol,\n                price: tokenResp.price,\n                website: tokenResp.website,\n              });\n            } else {\n              handleRateLimit(data, fetchTokenData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchInventoryData() {\n      setInventoryLoading(true);\n      asyncFetch(`${config?.backendUrl}account/${id}/inventory`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const response = data?.body?.inventory;\n            if (data.status === 200) {\n              setInventoryData({\n                fts: response.fts,\n                nfts: response.nfts,\n              });\n              setInventoryLoading(false);\n            } else {\n              handleRateLimit(data, fetchInventoryData, () =>\n                setInventoryLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchStatsData();\n      fetchAccountData();\n      fetchContractData();\n      fetchTokenData();\n      fetchInventoryData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, id]);\n\n  useEffect(() => {\n    function ftBalanceOf(contracts, account_id) {\n      return asyncFetch(`${config?.rpcUrl}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 'dontcare',\n          method: 'query',\n          params: {\n            request_type: 'call_function',\n            finality: 'final',\n            account_id: contracts,\n            method_name: 'ft_balance_of',\n            args_base64: encodeArgs({ account_id }),\n          },\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (res\n\n\n\n) => {\n            return res;\n          },\n        )\n        .then(\n          (data\n\n\n\n) => {\n            const resp = data?.body?.result;\n            return decodeArgs(resp.result);\n          },\n        )\n        .catch(() => {});\n    }\n    function loadBalances() {\n      const fts = inventoryData?.fts;\n      if (!fts?.length) {\n        if (fts?.length === 0) setIsLoading(false);\n        return;\n      }\n\n      let total = Big(0);\n\n      const tokens = [];\n\n      const pricedTokens = [];\n\n      Promise.all(\n        fts.map((ft) => {\n          return ftBalanceOf(ft?.contract, id).then((rslt) => {\n            return { ...ft, amount: rslt };\n          });\n        }),\n      ).then((results) => {\n        results.forEach((rslt) => {\n          const ftrslt = rslt;\n          const amount = rslt?.amount ?? 0;\n\n          let sum = Big(0);\n\n          let rpcAmount = Big(0);\n\n          if (amount) {\n            rpcAmount = ftrslt?.ft_meta?.decimals\n              ? Big(amount).div(Big(10).pow(ftrslt.ft_meta.decimals))\n              : 0;\n          }\n          if (ftrslt?.ft_meta?.price) {\n            sum = rpcAmount.mul(Big(ftrslt?.ft_meta?.price));\n            total = total.add(sum);\n\n            return pricedTokens.push({\n              ...ftrslt,\n              amountUsd: sum.toString(),\n              rpcAmount: rpcAmount.toString(),\n            });\n          }\n\n          return tokens.push({\n            ...ftrslt,\n            amountUsd: sum.toString(),\n            rpcAmount: rpcAmount.toString(),\n          });\n        });\n\n        tokens.sort((a, b) => {\n          const first = Big(a.rpcAmount);\n\n          const second = Big(b.rpcAmount);\n\n          if (first.lt(second)) return 1;\n          if (first.gt(second)) return -1;\n\n          return 0;\n        });\n\n        pricedTokens.sort((a, b) => {\n          const first = Big(a.amountUsd);\n\n          const second = Big(b.amountUsd);\n\n          if (first.lt(second)) return 1;\n          if (first.gt(second)) return -1;\n\n          return 0;\n        });\n\n        setFT({\n          amount: total.toString(),\n          tokens: [...pricedTokens, ...tokens],\n        });\n\n        setIsLoading(false);\n      });\n    }\n\n    loadBalances();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inventoryData?.fts, id, config?.rpcUrl]);\n\n  useEffect(() => {\n    function contractCode(address) {\n      asyncFetch(`${config?.rpcUrl}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 'dontcare',\n          method: 'query',\n          params: {\n            request_type: 'view_code',\n            finality: 'final',\n            account_id: address,\n            prefix_base64: '',\n          },\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (res\n\n\n\n) => {\n            const resp = res?.body?.result;\n            setCode({\n              block_hash: resp.block_hash,\n              block_height: resp.block_height,\n              code_base64: resp.code_base64,\n              hash: resp.hash,\n            });\n          },\n        )\n        .catch(() => {});\n    }\n\n    function viewAccessKeys(address) {\n      asyncFetch(`${config?.rpcUrl}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 'dontcare',\n          method: 'query',\n          params: {\n            request_type: 'view_access_key_list',\n            finality: 'final',\n            account_id: address,\n          },\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (res\n\n\n\n) => {\n            const resp = res?.body?.result;\n            setKey({\n              block_hash: resp.block_hash,\n              block_height: resp.block_height,\n              keys: resp?.keys,\n              hash: resp?.hash,\n            });\n          },\n        )\n        .catch(() => {});\n    }\n\n    function loadSchema() {\n      if (!id) return;\n\n      Promise.all([contractCode(id), viewAccessKeys(id)]);\n    }\n    loadSchema();\n  }, [id, config?.rpcUrl]);\n\n  useEffect(() => {\n    if (code?.code_base64) {\n      const locked = (key.keys || []).every(\n        (key\n\n\n\n\n\n) => key.access_key.permission !== 'FullAccess',\n      );\n\n      function fetchContractInfo() {\n        asyncFetch(`${config?.backendUrl}account/${id}/contract/parse`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res.body.contract;\n              if (res.status === 200 && resp && resp.length > 0) {\n                const [{ contract, schema }] = resp;\n                setContractInfo(contract);\n                setSchema(schema);\n              }\n            },\n          )\n          .catch(() => {});\n      }\n\n      fetchContractInfo();\n\n      setContract({ ...code, locked });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [code, key, config?.backendUrl, id]);\n\n  const handleFilter = (name, value) => {\n    const updatedFilters = { ...filters, [name]: value };\n    setFilters(updatedFilters);\n  };\n\n  const onFilterClear = (name) => {\n    let updatedFilters = { ...filters };\n    if (updatedFilters.hasOwnProperty(name)) {\n      delete updatedFilters[name];\n      setFilters(updatedFilters);\n    } else {\n      updatedFilters = {};\n      setFilters(updatedFilters);\n    }\n  };\n\n  const balance = accountData?.amount ?? '';\n  const nearPrice = statsData?.near_price ?? '';\n  return (\n    <>\n      <div className=\"flex items-center justify-between flex-wrap pt-4 \">\n        {!id ? (\n          <div className=\"w-80 max-w-xs px-3 py-5\">\n            <Skeleton className=\"h-7\" />\n          </div>\n        ) : (\n          <div className=\"flex md:flex-wrap\">\n            <h1 className=\"py-4 break-all space-x-2 text-xl text-gray-700 leading-8 px-2 dark:text-neargray-10\">\n              Near Account: @\n              {id && (\n                <span className=\"font-semibold text-green-500 dark:text-green-250\">\n                  {id}\n                </span>\n              )}\n              {\n                <Widget\n                  src={`${ownerId}/widget/bos-components.components.Shared.Buttons`}\n                  props={{\n                    id: id,\n                    config: config,\n                    theme: theme,\n                  }}\n                />\n              }\n            </h1>\n          </div>\n        )}\n      </div>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n        <div className=\"w-full\">\n          <div className=\"h-full bg-white soft-shadow rounded-xl dark:bg-black-600\">\n            <div className=\"flex justify-between border-b dark:border-black-200 p-3 text-nearblue-600 dark:text-neargray-10\">\n              <h2 className=\"leading-6 text-sm font-semibold\">\n                {t ? t('address:overview') : 'Overview'}\n              </h2>\n              {tokenData?.name && (\n                <div className=\"flex items-center text-xs bg-gray-100 dark:bg-black-200 dark:text-neargray-10 rounded-md px-2 py-1\">\n                  <div className=\"truncate max-w-[110px]\">\n                    {tokenData?.name}\n                  </div>\n                  {tokenData?.website && (\n                    <a\n                      href={tokenData?.website}\n                      className=\"ml-1\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer nofollow\"\n                    >\n                      <FaExternalLinkAlt />\n                    </a>\n                  )}\n                </div>\n              )}\n            </div>\n            <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-nearblue-600 dark:text-neargray-10\">\n              <div className=\"flex flex-wrap py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                  {t ? t('address:balance') : 'Balance'}:\n                </div>\n                {loading ? (\n                  <Skeleton className=\"h-4 w-32\" />\n                ) : (\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {balance\n                      ? yoctoToNear(accountData?.amount, true) + ' \u24c3'\n                      : ''}\n                  </div>\n                )}\n              </div>\n              {network === 'mainnet' &&\n                accountData?.amount &&\n                statsData?.near_price && (\n                  <div className=\"flex flex-wrap py-4 text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                      {t ? t('address:value') : 'Value:'}\n                    </div>\n                    {loading ? (\n                      <Skeleton className=\"h-4 w-32\" />\n                    ) : (\n                      <div className=\"w-full md:w-3/4 break-words flex items-center\">\n                        <span className=\"px-1\">\n                          {accountData?.amount && statsData?.near_price\n                            ? '$' +\n                              fiatValue(\n                                yoctoToNear(accountData?.amount, false),\n                                statsData?.near_price,\n                              ) +\n                              ' '\n                            : ''}\n                        </span>\n                        <span className=\"text-xs\">\n                          (@\n                          {nearPrice\n                            ? '$' + dollarFormat(statsData?.near_price)\n                            : ''}\n                          / \u24c3)\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                )}\n              <div className=\"flex flex-wrap py-4 text-sm text-nearblue-600 dark:text-neargray-10\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                  {t ? t('address:tokens') : 'Tokens:'}\n                </div>\n                <div className=\"w-full md:w-3/4 break-words -my-1 z-10\">\n                  <TokenHoldings\n                    data={inventoryData}\n                    loading={isloading}\n                    inventoryLoading={inventoryLoading}\n                    ft={ft}\n                    id={id}\n                    appUrl={config?.appUrl}\n                    ownerId={ownerId}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"w-full\">\n          <div className=\"h-full bg-white dark:bg-black-600 soft-shadow rounded-xl overflow-hidden\">\n            <h2 className=\"leading-6 border-b dark:border-black-200 p-3 text-nearblue-600 dark:text-neargray-10 text-sm font-semibold\">\n              {t ? t('address:moreInfo') : 'Account information'}\n            </h2>\n            <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-nearblue-600 dark:text-neargray-10\">\n              <div className=\"flex justify-between\">\n                <div className=\"flex xl:flex-nowrap flex-wrap items-center justify-between py-4 w-full\">\n                  <div className=\"w-full mb-2 md:mb-0\">\n                    Staked {t ? t('address:balance') : 'Balance'}:\n                  </div>\n                  {loading ? (\n                    <div className=\"w-full break-words\">\n                      <Skeleton className=\"h-4 w-32\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full break-words xl:mt-0 mt-2\">\n                      {accountData?.locked\n                        ? yoctoToNear(accountData?.locked, true) + ' \u24c3'\n                        : accountData?.locked ?? ''}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex ml-4  xl:flex-nowrap flex-wrap items-center justify-between py-4 w-full\">\n                  <div className=\"w-full mb-2 md:mb-0\">\n                    {t ? t('address:storageUsed') : 'Storage Used'}:\n                  </div>\n                  {loading ? (\n                    <div className=\"w-full break-words\">\n                      <Skeleton className=\"h-4 w-28\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full break-words xl:mt-0 mt-2\">\n                      {accountData?.storage_usage\n                        ? weight(accountData?.storage_usage)\n                        : accountData?.storage_usage ?? ''}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex justify-between\">\n                <div className=\"flex xl:flex-nowrap flex-wrap items-center justify-between py-4 w-full\">\n                  {loading ? (\n                    <div className=\"w-full mb-2 md:mb-0\">\n                      <Skeleton className=\"h-4 w-28\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full mb-2 md:mb-0\">\n                      {accountData?.deleted?.transaction_hash\n                        ? 'Deleted At:'\n                        : 'Created At:'}\n                    </div>\n                  )}\n                  {loading ? (\n                    <div className=\"w-full break-words\">\n                      <Skeleton className=\"h-4 w-40\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full break-words xl:mt-0 mt-2\">\n                      {accountData?.deleted?.transaction_hash\n                        ? convertToUTC(\n                            nanoToMilli(accountData.deleted.block_timestamp),\n                            false,\n                          )\n                        : accountData?.created?.transaction_hash\n                        ? convertToUTC(\n                            nanoToMilli(accountData.created.block_timestamp),\n                            false,\n                          )\n                        : accountData?.code_hash\n                        ? 'Genesis'\n                        : 'N/A'}\n                    </div>\n                  )}\n                </div>\n                {contract?.hash && !loading ? (\n                  <div className=\"flex ml-4 xl:flex-nowrap flex-wrap items-center justify-between py-4 w-full\">\n                    <div className=\"w-full mb-2 md:mb-0\">Contract Locked:</div>\n                    <div className=\"w-full break-words xl:mt-0 mt-2\">\n                      {contract?.locked ? 'Yes' : 'No'}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex ml-4 xl:flex-nowrap flex-wrap items-center justify-between py-4 w-full\" />\n                )}\n              </div>\n              {deploymentData?.receipt_predecessor_account_id && (\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                    Contract Creator:\n                  </div>\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    <Link\n                      href={`/address/${deploymentData.receipt_predecessor_account_id}`}\n                      className=\"hover:no-underline\"\n                    >\n                      <a className=\"text-green-500 hover:no-underline\">\n                        {shortenAddress(\n                          deploymentData.receipt_predecessor_account_id ?? '',\n                        )}\n                      </a>\n                    </Link>\n                    {' at txn  '}\n                    <Link\n                      href={`/txns/${deploymentData.transaction_hash}`}\n                      className=\"hover:no-underline\"\n                    >\n                      <a className=\"text-green-500 hover:no-underline\">\n                        {shortenAddress(deploymentData.transaction_hash ?? '')}\n                      </a>\n                    </Link>\n                  </div>\n                </div>\n              )}\n              {tokenData?.name && (\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                    Token Tracker:\n                  </div>\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    <div className=\"flex items-center\">\n                      <TokenImage\n                        src={tokenData?.icon}\n                        alt={tokenData?.name}\n                        appUrl={config.appUrl}\n                        className=\"w-4 h-4 mr-2\"\n                      />\n                      <Link\n                        href={`/token/${id}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a className=\"flex text-green-500 hover:no-underline\">\n                          <span className=\"inline-block truncate max-w-[110px] mr-1\">\n                            {tokenData.name}\n                          </span>\n                          (\n                          <span className=\"inline-block truncate max-w-[80px]\">\n                            {tokenData.symbol}\n                          </span>\n                          )\n                        </a>\n                      </Link>\n                      {tokenData.price && (\n                        <div className=\"text-nearblue-600 dark:text-neargray-10 ml-1\">\n                          (@ ${localFormat(tokenData.price)})\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"py-6\"></div>\n      <div className=\"block lg:flex lg:space-x-2 mb-10\">\n        <div className=\"w-full \">\n          <>\n            <div>\n              {tabs &&\n                tabs.map((tab, index) => {\n                  if (\n                    tab === 'Contract' &&\n                    !(contractInfo?.methodNames?.length > 0)\n                  ) {\n                    return null;\n                  }\n                  return (\n                    <button\n                      key={index}\n                      onClick={() => {\n                        onTab(index);\n                      }}\n                      className={`  text-xs leading-4 font-medium overflow-hidden inline-block cursor-pointer p-2 mb-3 mr-2 focus:outline-none ${\n                        pageTab === tab\n                          ? 'rounded-lg bg-green-600 dark:bg-green-250 text-white dark:text-black'\n                          : 'hover:bg-neargray-800 bg-neargray-700 dark:bg-black-200 rounded-lg hover:text-nearblue-600 text-nearblue-600 dark:text-neargray-10'\n                      }`}\n                      value={tab}\n                    >\n                      {tab === 'Transactions' ? (\n                        <h2>{t ? t('address:txns') : tab}</h2>\n                      ) : tab === 'Token Txns' ? (\n                        <h2>{t ? t('address:tokenTxns') : tab}</h2>\n                      ) : tab === 'Contract' ? (\n                        <div className=\"flex h-full\">\n                          <h2>{tab}</h2>\n                          <div className=\"absolute text-white dark:text-black bg-neargreen text-[8px] h-4 inline-flex items-center rounded-md ml-11 -mt-3 px-1 \">\n                            NEW\n                          </div>\n                        </div>\n                      ) : tab === 'Comments' ? (\n                        <h2>{t ? t('address:comments') : tab}</h2>\n                      ) : tab === 'NFT Token Txns' ? (\n                        <h2>{t ? t('address:nftTokenTxns') : tab}</h2>\n                      ) : tab === 'Access Keys' ? (\n                        <h2>{t ? t('address:accessKeys') : tab}</h2>\n                      ) : (\n                        <h2>{tab}</h2>\n                      )}\n                    </button>\n                  );\n                })}\n            </div>\n            <div>\n              <div className={`${pageTab === 'Transactions' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.Address.Transactions`}\n                    props={{\n                      network: network,\n                      t: t,\n                      id: id,\n                      filters: filters,\n                      handleFilter: handleFilter,\n                      onFilterClear: onFilterClear,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Token Txns' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.Address.TokenTransactions`}\n                    props={{\n                      network: network,\n                      id: id,\n                      t: t,\n                      filters: filters,\n                      handleFilter: handleFilter,\n                      onFilterClear: onFilterClear,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div\n                className={`${pageTab === 'NFT Token Txns' ? '' : 'hidden'} `}\n              >\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.Address.NFTTransactions`}\n                    props={{\n                      network: network,\n                      id: id,\n                      t: t,\n                      filters: filters,\n                      handleFilter: handleFilter,\n                      onFilterClear: onFilterClear,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Access Keys' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.Address.AccessKeys`}\n                    props={{\n                      network: network,\n                      id: id,\n                      t: t,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              {contractInfo && contractInfo?.methodNames?.length > 0 && (\n                <>\n                  <div className={`${pageTab === 'Contract' ? '' : 'hidden'} `}>\n                    {\n                      <Widget\n                        src={`${ownerId}/widget/bos-components.components.Contract.Overview`}\n                        props={{\n                          network: network,\n                          t: t,\n                          id: id,\n                          contract: contract,\n                          schema: schema,\n                          contractInfo: contractInfo,\n                          requestSignInWithWallet: requestSignInWithWallet,\n                          connected: signedIn,\n                          accountId: accountId,\n                          logOut: logOut,\n                          ownerId,\n                        }}\n                      />\n                    }\n                  </div>\n                </>\n              )}\n              <div className={`${pageTab === 'Comments' ? '' : 'hidden'} `}>\n                {\n                  <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n                    <div className=\"py-3\">\n                      <Widget\n                        src={`${ownerId}/widget/bos-components.components.Comments.Feed`}\n                        props={{\n                          network: network,\n                          path: `nearblocks.io/address/${id}`,\n                          ownerId,\n                          limit: 10,\n                        }}\n                      />\n                    </div>\n                  </div>\n                }\n              </div>\n            </div>\n          </>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Accounts", "fact_widget_deployments_id": "365329b6cfa4d568c3ecdefc2eb9500f", "inserted_timestamp": "2024-04-17T01:58:31.238Z", "modified_timestamp": "2024-04-17T01:58:31.238Z", "__row_index": 5}