{"tx_hash": "5oimN1LtKpuPud8S6nFsmTjheAxYHXdCZAjchTg35jp5", "action_id_social": "y2EKw6ezjZmH3WkLUwm9Jy5j24t2KUQ7fftCE36jJUb-0-widget", "block_id": 121226454, "block_timestamp": "2024-06-15T14:39:29.562Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.TreeReceiptDetails", "source_code": "/**\n * Component: TransactionsTreeReceiptDetails\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of Transaction Receipt on Near Protocol.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/TreeReceipts/TreeTxnsActions.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst FaKey = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 512 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M512 176.001C512 273.203 433.202 352 336 352c-11.22 0-22.19-1.062-32.827-3.069l-24.012 27.014A23.999 23.999 0 0 1 261.223 384H224v40c0 13.255-10.745 24-24 24h-40v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-78.059c0-6.365 2.529-12.47 7.029-16.971l161.802-161.802C163.108 213.814 160 195.271 160 176 160 78.798 238.797.001 335.999 0 433.488-.001 512 78.511 512 176.001zM336 128c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48-48 21.49-48 48z\"></path>\n    </svg>\n  );\n};\n\n\nconst AddKey = (props) => {\n  const { action, ownerId } = props;\n\n  const { shortenAddress } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const { shortenHex } = VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  if (typeof props.args.access_key?.permission !== 'object') {\n    return (\n      <>\n        <div className=\"py-1\">\n          <FaKey className=\"inline-flex text-emerald-400 mr-1\" />{' '}\n          {props.t ? props.t('txns:txn.actions.addKey.0') : 'New key'} (\n          <span className=\"font-bold\">{shortenHex(props.args.public_key)}</span>\n          ) {props.t ? props.t('txns:txn.actions.addKey.2') : 'added for'}\n          <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n            <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n              {shortenAddress(props.receiver)}\n            </a>\n          </a>{' '}\n          {props.t ? props.t('txns:txn.actions.addKey.4') : 'with permission'}\n          <span className=\"font-bold\">{props.args.access_key?.permission}</span>\n        </div>\n        <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n          <Widget\n            src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n            props={{\n              node: action,\n              path: 'root',\n              ownerId,\n            }}\n          />\n        </div>\n      </>\n    );\n  }\n\n  if (props.args.access_key.permission.permission_kind) {\n    return (\n      <>\n        <div className=\"py-1\">\n          <FaKey className=\"inline-flex text-gray-400 dark:text-neargray-10 mr-1\" />{' '}\n          {props.t ? props.t('txns:txn.actions.addKey.0') : 'New key'} (\n          <span className=\"font-bold\">{shortenHex(props.args.public_key)}</span>\n          ){props.t ? props.t('txns:txn.actions.addKey.2') : 'added for'}{' '}\n          <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n            <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n              {shortenAddress(props.receiver)}\n            </a>\n          </a>{' '}\n          {props.t ? props.t('txns:txn.actions.addKey.4') : 'with permission'}{' '}\n          <span className=\"font-bold\">\n            {props.args.access_key.permission.permission_kind}\n          </span>\n        </div>\n        <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n          <Widget\n            src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n            props={{\n              node: action,\n              path: 'root',\n              ownerId,\n            }}\n          />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaKey className=\"inline-flex text-gray-400 dark:text-neargray-10 mr-1\" />{' '}\n        {props.t ? props.t('txns:txn.actions.addKey.1') : 'Access key'} (\n        <span className=\"font-bold\">{shortenHex(props.args.public_key)}</span>){' '}\n        {props.t ? props.t('txns:txn.actions.addKey.2') : 'added for'}\n        {props.t ? props.t('txns:txn.actions.addKey.3') : 'contract'}\n        <a\n          href={`/address/${props.args.access_key.permission.FunctionCall.receiver_id}`}\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(\n              props.args.access_key.permission.FunctionCall.receiver_id,\n            )}\n          </a>\n        </a>{' '}\n        {props.t ? props.t('txns:txn.actions.addKey.4') : 'with permission'}\n        {props.t ? props.t('txns:txn.actions.addKey.5') : 'to call'}\n        <span className=\"font-bold\">\n          {props.args.access_key.permission.FunctionCall.method_names.length > 0\n            ? props.args.access_key.permission.FunctionCall.method_names.join(\n                ', ',\n              )\n            : 'any'}{' '}\n        </span>\n        {props.t ? props.t('txns:txn.actions.addKey.6') : 'methods'}\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst FaUser = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 448 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z\"></path>\n    </svg>\n  );\n};\n\n\nconst CreateAccount = (props) => {\n  const { action, ownerId } = props;\n\n  const { shortenAddress } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaUser className=\"inline-flex text-emerald-400 mr-1\" />{' '}\n        {props.t ? props.t('txns:txn.actions.createAccount.0') : 'New account'}{' '}\n        (\n        <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(props.receiver)}\n          </a>\n        </a>\n        ) {props.t ? props.t('txns:txn.actions.createAccount.1') : 'created'}\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\n\n\n\n\n\nconst DeleteAccount = (props) => {\n  const { action, ownerId } = props;\n\n  const { shortenAddress } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaUser className=\"inline-flex text-red-400 mr-1\" />\n        {props.t\n          ? props.t('txns:txn.actions.deleteAccount.0')\n          : 'Delete account'}{' '}\n        (\n        <a href={`/address/${props.receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(props.receiver)}\n          </a>\n        </a>\n        ){' '}\n        {props.t\n          ? props.t('txns:txn.actions.deleteAccount.1')\n          : 'and transfer remaining funds to'}\n        <a\n          href={`/address/${props.args.beneficiary_id}`}\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(props.args.beneficiary_id)}\n          </a>\n        </a>\n      </div>\n\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\nconst DeleteKey = (props) => {\n  const { t, args, action, ownerId } = props;\n  const { shortenHex } = VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaKey className=\"inline-flex text-red-400 mr-1\" />{' '}\n        {t ? t('txns:txn.actions.deleteKey.0') : 'Key'} (\n        <span className=\"font-bold\">{shortenHex(args.public_key)}</span>){' '}\n        {t ? t('txns:txn.actions.deleteKey.1') : 'deleted'}\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst FaCode = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 640 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"></path>\n    </svg>\n  );\n};\n\n\nconst DeployContract = (props) => {\n  const { t, receiver, action, ownerId } = props;\n  const { shortenAddress } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaCode className=\"inline-flex text-emerald-400 mr-1\" />{' '}\n        {t ? t('txns:txn.actions.deployContract.0') : 'Contract'} (\n        <a href={`/address/${receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(receiver)}\n          </a>\n        </a>\n        ) {t ? t('txns:txn.actions.deployContract.1') : 'deployed'}\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n/* INCLUDE: \"includes/hexy.jsx\" */\nfunction hexy(buffer, config) {\n  const MAX_ADDRESS_LENGTH = 8;\n  const defaults = {\n    width: 16,\n    numbering: 'hex_bytes',\n    format: 'fours',\n    littleEndian: false,\n    radix: 16,\n    caps: 'lower',\n    annotate: 'ascii',\n    prefix: '',\n    indent: 0,\n    html: false,\n    offset: 0,\n    length: -1,\n    extendedChs: false,\n    display_offset: 0,\n  };\n  const options = { ...defaults, ...config };\n\n  let bufferData;\n  if (Buffer.isBuffer(buffer)) {\n    bufferData = buffer;\n  } else if (Array.isArray(buffer)) {\n    bufferData = Buffer.from(buffer);\n  } else {\n    throw new Error('Input must be a Buffer or an array of numbers.');\n  }\n\n  const {\n    width,\n    numbering,\n    format,\n    littleEndian,\n    radix,\n    annotate,\n    indent,\n    html,\n    offset,\n    length,\n    extendedChs,\n    display_offset,\n  } = options;\n\n  const prefixSpaces = ' '.repeat(indent);\n  const htmlOpenTag = html ? \"<div class='hexy'>\\n\" : '';\n  const htmlCloseTag = html ? '</div>\\n' : '';\n\n  const bufferSlice = bufferData.slice(\n    offset,\n    length === -1 ? undefined : offset + length,\n  );\n  let str = htmlOpenTag;\n  let addr = offset + display_offset;\n\n  const numGroups = Math.ceil(bufferSlice.length / width);\n\n  for (let group = 0; group < numGroups; group++) {\n    const startIndex = group * width;\n    const endIndex = Math.min(startIndex + width, bufferSlice.length);\n    const slice = bufferSlice.slice(startIndex, endIndex);\n\n    if (html) {\n      str += `<div class='${num2str(addr, MAX_ADDRESS_LENGTH, 16)}'>`;\n    }\n\n    str += `${prefixSpaces}${\n      numbering === 'hex_bytes'\n        ? num2str(addr, MAX_ADDRESS_LENGTH, 16) + ': '\n        : ''\n    }`;\n    str += hex(slice, width, format, radix, littleEndian);\n\n    if (annotate === 'ascii') {\n      str += ` ${\n        html\n          ? html_escape(getTextRepresentation(slice, extendedChs))\n          : ascii_escape(getTextRepresentation(slice, extendedChs))\n      }`;\n    }\n\n    str += html ? '</div>\\n' : '\\n';\n    addr += width;\n  }\n\n  str += htmlCloseTag;\n\n  return str;\n}\n\nfunction hex(\n  buffer,\n  width,\n  format,\n  radix,\n  littleEndian,\n) {\n  let str = '';\n  const delimiter = format === 'none' ? '' : ' ';\n  const group_len = maxnumberlen(format === 'none' ? 1 : 2, radix);\n  const padlen =\n    (width - buffer.length) *\n    (format === 'none' ? group_len : (group_len + 1) / 2);\n\n  const numGroups = Math.ceil(buffer.length / 2);\n\n  for (let group = 0; group < numGroups; ++group) {\n    const startIndex = group * 2;\n    const endIndex = Math.min(startIndex + 2, buffer.length);\n    const bytes = buffer.slice(startIndex, endIndex);\n\n    if (bytes.length === 0) break;\n\n    if (bytes.length === 2) {\n      let val = littleEndian ? bytes.readUInt16LE(0) : bytes.readUInt16BE(0);\n      const text = val.toString(radix);\n      str += '0'.repeat(group_len - text.length) + text;\n      str += delimiter;\n    } else {\n      str += '0'.repeat(group_len);\n      str += delimiter;\n    }\n  }\n\n  if (buffer.length < width) {\n    str += ' '.repeat(padlen);\n  }\n\n  return str;\n}\n\nfunction num2str(b, len, radix) {\n  const s = b.toString(radix);\n  return '0'.repeat(len - s.length) + s;\n}\n\nfunction maxnumberlen(bytes, radix) {\n  let result = 2;\n  if (bytes === 0) {\n    bytes = 1;\n  }\n  switch (radix) {\n    case 2:\n      result = bytes * 8;\n      break;\n    case 8:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 11;\n          break;\n        case 8:\n          result = 22;\n          break;\n      }\n      break;\n    case 10:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 10;\n          break;\n        case 8:\n          result = 20;\n          break;\n      }\n      break;\n    case 16:\n      result = 2 * bytes;\n      break;\n  }\n  return result;\n}\n\nfunction getTextRepresentation(buffer, extendedChs) {\n  let text = '';\n  for (const byte of buffer) {\n    if (extendedChs) {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    } else {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    }\n  }\n  return text;\n}\n\nfunction ascii_escape(str) {\n  return str.replace(/[^\\x20-\\x7E]/g, '.');\n}\n\nfunction html_escape(str) {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\'/g, '&apos;')\n    .replace(/\\\"/g, '&quot;')\n    .replace(/[^\\x20-\\x7E]/g, function (ch) {\n      return '&#x' + ch.codePointAt(0)?.toString(16) + ';';\n    });\n}\n/* END_INCLUDE: \"includes/hexy.jsx\" */\n\n\n\nconst FunctionCall = (props) => {\n  const { t, args, receiver, action, ownerId } = props;\n  const { shortenAddress } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  function displayArgs(args) {\n    if (!args || typeof args === 'undefined') return 'The arguments are empty';\n\n    let pretty = '';\n    const decoded = Buffer.from(args, 'base64');\n    try {\n      const parsed = JSON.parse(decoded.toString());\n      if (parsed) {\n        pretty = parsed;\n      } else {\n        pretty = hexy(decoded, { format: 'twos' });\n      }\n    } catch {\n      pretty = hexy(decoded, { format: 'twos' });\n    }\n\n    if (pretty && typeof pretty === 'object' && pretty.msg) {\n      try {\n        const msgObj = JSON.parse(pretty.msg);\n        pretty.msg = msgObj;\n      } catch (error) {\n        console.error('Error parsing JSON in \"msg\" property:', error);\n      }\n    }\n\n    return pretty;\n  }\n\n  const modifiedAction = {\n    ...action,\n    args: {\n      ...action.args,\n      args: displayArgs(args?.args_base64 || args?.args),\n    },\n  };\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaCode className=\"inline-flex text-yellow-500 mr-1\" />\n        {t ? t('txns:txn.actions.functionCall.0') : 'Called method'}\n        <span className=\"font-bold\">{args?.method_name}</span>{' '}\n        {t ? t('txns:txn.actions.functionCall.1') : 'in contract'}\n        <a href={`/address/${receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(receiver)}\n          </a>\n        </a>\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 p-3 overflow-auto rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: modifiedAction,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst FaCoins = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      height=\"16\"\n      width=\"16\"\n      viewBox=\"0 0 512 512\"\n      {...props}\n    >\n      <path\n        fill=\"#eab308\"\n        d=\"M512 80c0 18-14.3 34.6-38.4 48c-29.1 16.1-72.5 27.5-122.3 30.9c-3.7-1.8-7.4-3.5-11.3-5C300.6 137.4 248.2 128 192 128c-8.3 0-16.4 .2-24.5 .6l-1.1-.6C142.3 114.6 128 98 128 80c0-44.2 86-80 192-80S512 35.8 512 80zM160.7 161.1c10.2-.7 20.7-1.1 31.3-1.1c62.2 0 117.4 12.3 152.5 31.4C369.3 204.9 384 221.7 384 240c0 4-.7 7.9-2.1 11.7c-4.6 13.2-17 25.3-35 35.5c0 0 0 0 0 0c-.1 .1-.3 .1-.4 .2l0 0 0 0c-.3 .2-.6 .3-.9 .5c-35 19.4-90.8 32-153.6 32c-59.6 0-112.9-11.3-148.2-29.1c-1.9-.9-3.7-1.9-5.5-2.9C14.3 274.6 0 258 0 240c0-34.8 53.4-64.5 128-75.4c10.5-1.5 21.4-2.7 32.7-3.5zM416 240c0-21.9-10.6-39.9-24.1-53.4c28.3-4.4 54.2-11.4 76.2-20.5c16.3-6.8 31.5-15.2 43.9-25.5V176c0 19.3-16.5 37.1-43.8 50.9c-14.6 7.4-32.4 13.7-52.4 18.5c.1-1.8 .2-3.5 .2-5.3zm-32 96c0 18-14.3 34.6-38.4 48c-1.8 1-3.6 1.9-5.5 2.9C304.9 404.7 251.6 416 192 416c-62.8 0-118.6-12.6-153.6-32C14.3 370.6 0 354 0 336V300.6c12.5 10.3 27.6 18.7 43.9 25.5C83.4 342.6 135.8 352 192 352s108.6-9.4 148.1-25.9c7.8-3.2 15.3-6.9 22.4-10.9c6.1-3.4 11.8-7.2 17.2-11.2c1.5-1.1 2.9-2.3 4.3-3.4V304v5.7V336zm32 0V304 278.1c19-4.2 36.5-9.5 52.1-16c16.3-6.8 31.5-15.2 43.9-25.5V272c0 10.5-5 21-14.9 30.9c-16.3 16.3-45 29.7-81.3 38.4c.1-1.7 .2-3.5 .2-5.3zM192 448c56.2 0 108.6-9.4 148.1-25.9c16.3-6.8 31.5-15.2 43.9-25.5V432c0 44.2-86 80-192 80S0 476.2 0 432V396.6c12.5 10.3 27.6 18.7 43.9 25.5C83.4 438.6 135.8 448 192 448z\"\n      />\n    </svg>\n  );\n};\n\n\nconst Stake = (props) => {\n  const { t, args, action, ownerId } = props;\n  const { yoctoToNear } = VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const { shortenHex } = VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaCoins className=\"inline-flex text-yellow-500 mr-1\" />\n        {t ? t('txns:txn.actions.stake.0') : 'Staked'}\n        <span className=\"font-bold\">\n          {args.stake ? yoctoToNear(args.stake, true) : args.stake ?? ''}\u24c3\n        </span>{' '}\n        {t ? t('txns:txn.actions.stake.1') : 'with'}{' '}\n        {shortenHex(args.public_key)}\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 overflow-auto py-3 rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst FaArrowAltCircleRight = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 512 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zM140 300h116v70.9c0 10.7 13 16.1 20.5 8.5l114.3-114.9c4.7-4.7 4.7-12.2 0-16.9l-114.3-115c-7.6-7.6-20.5-2.2-20.5 8.5V212H140c-6.6 0-12 5.4-12 12v64c0 6.6 5.4 12 12 12z\"></path>\n    </svg>\n  );\n};\n\n\nconst Transfer = (props) => {\n  const { t, args, receiver, action, ownerId } = props;\n  const { shortenAddress, yoctoToNear } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  return (\n    <>\n      <div className=\"py-1\">\n        <FaArrowAltCircleRight className=\"inline-flex text-green-400 mr-1\" />{' '}\n        {t ? t('txns:txn.actions.transfer.0') : 'Transferred'}\n        <span className=\"font-bold\">\n          {args.deposit ? yoctoToNear(args.deposit, true) : args.deposit ?? ''}{' '}\n          \u24c3\n        </span>{' '}\n        {t ? t('txns:txn.actions.transfer.1') : 'to'}\n        <a href={`/address/${receiver}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-bold hover:no-underline\">\n            {shortenAddress(receiver)}\n          </a>\n        </a>\n      </div>\n      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 p-3 overflow-auto rounded-lg\">\n        <Widget\n          src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n          props={{\n            node: action,\n            path: 'root',\n            ownerId,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nconst TreeTxnsActions = (props) => {\n  const { action, receiver, t, ownerId } = props;\n  const { mapRpcActionToAction } = VM.require(\n    `${ownerId}/widget/includes.Utils.near`,\n  );\n  switch (action.action_kind) {\n    case 'ADD_KEY':\n    case 'AddKey':\n      return (\n        <AddKey\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'CREATE_ACCOUNT':\n    case 'CreateAccount':\n      return (\n        <CreateAccount\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'DELETE_ACCOUNT':\n    case 'DeleteAccount':\n      return (\n        <DeleteAccount\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'DELETE_KEY':\n    case 'DeleteKey':\n      return (\n        <DeleteKey\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'DEPLOY_CONTRACT':\n    case 'DeployContract':\n      return (\n        <DeployContract\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'FUNCTION_CALL':\n    case 'FunctionCall':\n      return (\n        <FunctionCall\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'STAKE':\n    case 'Stake':\n      return (\n        <Stake\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'TRANSFER':\n    case 'Transfer':\n      return (\n        <Transfer\n          args={action.args}\n          receiver={receiver}\n          t={t}\n          ownerId={ownerId}\n          action={action}\n        />\n      );\n    case 'Delegate':\n    case 'DELEGATE':\n      const delegateAction =\n        action?.args?.delegate_action?.actions &&\n        action?.args?.delegate_action?.actions?.map((txn) =>\n          mapRpcActionToAction(txn),\n        );\n      function filterObject(obj) {\n        if (obj && obj.action_kind) {\n          return {\n            action_kind: obj.action_kind,\n          };\n        } else {\n          return {\n            action_kind: {},\n          };\n        }\n      }\n      return (\n        delegateAction &&\n        delegateAction.map((_subAction, i) => (\n          <div className=\"flex flex-col\" key={i}>\n            <p className=\"text-sm font-semibold\">\n              Actions delegated for {receiver}\n            </p>\n            <div className=\"mt-3 bg-gray-100 dark:bg-black-200 p-3 overflow-auto rounded-lg\">\n              <Widget\n                src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n                props={{\n                  node: filterObject(action),\n                  path: 'root',\n                  ownerId,\n                }}\n              />\n            </div>\n          </div>\n        ))\n      );\n\n    default:\n      return <div>{action.action_kind}</div>;\n  }\n};/* END_INCLUDE COMPONENT: \"includes/Common/TreeReceipts/TreeTxnsActions.jsx\" */\n\n\nfunction MainComponent(props) {\n  const { network, receipt, t, ownerId, txn, show } = props;\n\n  const Loader = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 dark:bg-black-200 h-5 py-0.5 rounded shadow-sm animate-pulse ${props.className}`}\n      ></div>\n    );\n  };\n  return (\n    <>\n      {show === receipt.receipt_id && (\n        <>\n          {!receipt ? (\n            <div className=\"w-full\">\n              <Loader wrapperClassName=\"flex w-full my-1 max-w-xs\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n              <Loader wrapperClassName=\"flex w-full\" />\n            </div>\n          ) : receipt?.actions ? (\n            <>\n              {receipt &&\n                receipt?.actions?.map((action, i) => (\n                  <Fragment key={1}>\n                    <div className=\"text-green-500 dark:text-green-250 text-base pt-3 pl-3\">\n                      Receipt\n                    </div>\n                    <div className=\"w-full pl-3 py-2 flex items-center\">\n                      From:{' '}\n                      <OverlayTrigger\n                        placement=\"bottom-start\"\n                        delay={{ show: 500, hide: 0 }}\n                        overlay={\n                          <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\">\n                            {receipt.predecessor_id}\n                          </Tooltip>\n                        }\n                      >\n                        <Link\n                          href={`/address/${receipt?.predecessor_id}`}\n                          className=\"text-green-500 dark:text-green-250 font-medium inline-block truncate max-w-full ml-2\"\n                        >\n                          {receipt.predecessor_id}\n                        </Link>\n                      </OverlayTrigger>\n                    </div>\n                    <div className=\"w-full pl-3 py-2 flex items-center\">\n                      To:{' '}\n                      <OverlayTrigger\n                        placement=\"bottom-start\"\n                        delay={{ show: 500, hide: 0 }}\n                        overlay={\n                          <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\">\n                            {receipt.receiver_id}\n                          </Tooltip>\n                        }\n                      >\n                        <Link\n                          href={`/address/${receipt?.receiver_id}`}\n                          className=\"text-green-500 dark:text-green-250 font-medium inline-block truncate max-w-full ml-2\"\n                        >\n                          {` ${receipt.receiver_id}`}\n                        </Link>\n                      </OverlayTrigger>\n                    </div>\n                    <div className=\"w-full pl-3 word-break space-y-4\">\n                      <TreeTxnsActions\n                        key={i}\n                        action={action}\n                        receiver={receipt?.receiver_id}\n                        t={t}\n                        ownerId={ownerId}\n                      />\n                    </div>\n                  </Fragment>\n                ))}\n              <div className=\"text-green-500 dark:text-green-250 text-base pt-3 pl-3\">\n                Execution Outcomes\n              </div>\n              <div className=\"pl-3 py-2\">\n                <span>Logs:</span>\n                {!receipt ? (\n                  <div className=\"w-full\">\n                    <Loader wrapperClassName=\"flex w-full\" />\n                    <Loader wrapperClassName=\"flex w-full\" />\n                    <Loader wrapperClassName=\"flex w-full\" />\n                  </div>\n                ) : (\n                  <div className=\"w-full break-words space-y-4\">\n                    {receipt?.outcome?.logs?.length > 0 ? (\n                      <>\n                        <div className=\"mt-3 bg-gray-100 dark:bg-black-200 dark:border-black-200 p-3 overflow-auto rounded-lg\">\n                          <Widget\n                            src={`${ownerId}/widget/includes.Common.TreeReceipts.TreeNode`}\n                            props={{\n                              node: receipt?.outcome?.logs,\n                              path: 'root',\n                              ownerId,\n                            }}\n                          />\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"mt-3 bg-gray-100 dark:bg-black-200 dark:border-black-200 p-3 overflow-auto rounded-lg\">\n                        No Logs\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </>\n          ) : (\n            ''\n          )}\n        </>\n      )}\n      {receipt?.outcome?.outgoing_receipts?.length > 0 && (\n        <>\n          {receipt?.outcome?.outgoing_receipts?.map((rcpt) => (\n            <Fragment key={rcpt?.receipt_id}>\n              <Widget\n                src={`${ownerId}/widget/bos-components.components.Transactions.TreeReceiptDetails`}\n                props={{\n                  network: network,\n                  t: t,\n                  txn: txn,\n                  receipt: rcpt,\n                  className: ``,\n                  show,\n                  ownerId,\n                }}\n              />\n            </Fragment>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.TreeReceiptDetails", "fact_widget_deployments_id": "4eacfd4207f538e27853813e9ad0374d", "inserted_timestamp": "2024-06-15T15:54:57.709Z", "modified_timestamp": "2024-06-15T15:54:57.709Z", "__row_index": 3}