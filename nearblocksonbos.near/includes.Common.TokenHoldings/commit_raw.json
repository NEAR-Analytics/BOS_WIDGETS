{"tx_hash": "FixnyQRB8sGyBL1pHhDPozd6RoEw4t9G3WrKNZQJfeBy", "action_id_social": "7LCGdS7RPi6sDdJr7qB4PdY7bqGdyTWWpm16wKRx4FDs-0-widget", "block_id": 117096809, "block_timestamp": "2024-04-18T09:41:49.501Z", "signer_id": "nearblocksonbos.near", "widget_name": "includes.Common.TokenHoldings", "source_code": "/**\n * @interface Props\n * @param {string} [id] - Optional identifier for the account, passed as a string.\n * @param {boolean} [loading] - Flag indicating whether data is currently loading.\n * @param {boolean} [inventoryLoading] - Flag indicating whether inventory data is currently loading.\n * @param {InventoryInfo} [data] - Information related to the inventory.\n * @param {Object} [ft] - Object containing details about the tokens.\n * @param {string} [ft.amount] -  amount in USD of tokens.\n * @param {Object[]} [ft.tokens] - Array containing 'TokenListInfo' objects, providing information about individual token details.\n * @param {string} [appUrl] - The URL of the application.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\nimport ArrowDown from '@/includes/icons/ArrowDown';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TokenHoldings = (props) => {\n  const { dollarFormat, localFormat } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { truncateString } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const Loading = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n      ></div>\n    );\n  };\n  const nfts = props.data?.nfts || [];\n  if (props.loading || props.inventoryLoading) {\n    return <Loading className=\"flex w-full h-8\" />;\n  }\n\n  if (!props.ft?.tokens?.length && !nfts?.length) {\n    return (\n      <select className=\"appearance-none w-full h-8 text-xs px-2 outline-none rounded bg-white dark:bg-black-600 border dark:border-black-200\">\n        <option>N/A</option>\n      </select>\n    );\n  }\n\n  const ftAmount = props.ft?.amount ?? 0;\n\n  return (\n    <Select.Root>\n      <Select.Trigger className=\"w-full h-8 text-sm px-2 rounded border dark:border-black-200 outline-none flex items-center justify-between cursor-pointer\">\n        <span>\n          {ftAmount ? '$' + dollarFormat(ftAmount) : ''}\n          <span className=\"bg-green-500 dark:bg-green-250 text-xs text-white rounded ml-2 px-1 p-0.5\">\n            {(props.ft?.tokens?.length || 0) + (nfts?.length || 0)}\n          </span>\n        </span>\n        <ArrowDown className=\"w-4 h-4 fill-current text-gray-500 pointer-events-none\" />\n      </Select.Trigger>\n      <Select.Content\n        position=\"popper\"\n        sideOffset={5}\n        className=\"SelectContent\"\n      >\n        <ScrollArea.Root className=\"overflow-hidden rounded-b-xl soft-shadow bg-white dark:bg-black-600\">\n          <ScrollArea.Viewport className=\"border dark:border-black-200 z-50 pb-2\">\n            <div className=\"max-h-60\">\n              {props.ft?.tokens?.length > 0 && (\n                <>\n                  <div className=\"bg-gray-50 dark:bg-black-200 font-semibold px-3 py-2\">\n                    Tokens{' '}\n                    <span className=\"font-normal\">\n                      ({props.ft?.tokens?.length})\n                    </span>\n                  </div>\n                  <div className=\"text-gray-600 dark:text-neargray-10 text-xs divide-y dark:divide-black-200 outline-none\">\n                    {props.ft?.tokens?.map((token, index) => (\n                      <div key={token?.contract}>\n                        <Link\n                          href={`/token/${token?.contract}?a=${props.id}`}\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"flex justify-between items-center px-3 py-2 hover:bg-gray-100 dark:hover:bg-black-200 truncate hover:no-underline\">\n                            <div key={index}>\n                              <div className=\"flex items-center\">\n                                <div className=\"flex mr-1\">\n                                  <img\n                                    src={\n                                      token?.ft_meta?.icon ??\n                                      '/images/tokenplaceholder.svg'\n                                    }\n                                    alt={token.ft_meta?.name}\n                                    className=\"w-4 h-4\"\n                                  />\n                                </div>\n                                <span>\n                                  {token?.ft_meta?.name\n                                    ? truncateString(\n                                        token?.ft_meta?.name,\n                                        15,\n                                        '...',\n                                      )\n                                    : ''}\n                                  ({token?.ft_meta?.symbol})\n                                </span>\n                              </div>\n                              <div className=\"text-gray-400 flex items-center mt-1\">\n                                {token?.rpcAmount\n                                  ? localFormat(token?.rpcAmount)\n                                  : token?.rpcAmount ?? ''}\n                              </div>\n                            </div>\n                            {token?.ft_meta?.price && (\n                              <div className=\"text-right\">\n                                <div>\n                                  {token?.amountUsd\n                                    ? '$' + dollarFormat(token?.amountUsd)\n                                    : '$' + (token.amountUsd ?? '')}\n                                </div>\n                                <div className=\"text-gray-400\">\n                                  {token?.ft_meta?.price\n                                    ? '@' +\n                                      Big(token?.ft_meta?.price).toString()\n                                    : '@' + (token?.ft_meta?.price ?? '')}\n                                </div>\n                              </div>\n                            )}\n                          </a>\n                        </Link>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n              {nfts?.length > 0 && (\n                <>\n                  <div className=\"bg-gray-50 dark:bg-black-200 font-semibold px-3 py-2\">\n                    NFT Tokens{' '}\n                    <span className=\"font-normal\">({nfts?.length})</span>\n                  </div>\n                  <div className=\"text-gray-600 dark:text-neargray-10 text-xs divide-y dark:divide-black-200 outline-none\">\n                    {nfts.map((nft) => (\n                      <div key={nft?.contract}>\n                        <Link\n                          href={`/nft-token/${nft?.contract}?a=${props.id}`}\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"flex justify-between items-center px-3 py-2 hover:bg-gray-100 dark:hover:bg-black-200 truncate hover:no-underline\">\n                            <div>\n                              <div className=\"flex items-center\">\n                                <div className=\"flex mr-1\">\n                                  <img\n                                    src={\n                                      nft?.nft_meta?.icon ??\n                                      `/images/tokenplaceholder.svg`\n                                    }\n                                    alt={nft?.nft_meta?.name}\n                                    className=\"w-4 h-4\"\n                                  />\n                                </div>\n                                <span>\n                                  {nft?.nft_meta?.name\n                                    ? truncateString(\n                                        nft?.nft_meta?.name,\n                                        15,\n                                        '...',\n                                      )\n                                    : nft?.nft_meta?.name ?? ''}\n                                  ({nft?.nft_meta?.symbol})\n                                </span>\n                              </div>\n                              <div className=\"text-gray-400 flex items-center mt-1\">\n                                {nft?.quantity\n                                  ? localFormat(nft?.quantity)\n                                  : nft?.quantity ?? ''}\n                              </div>\n                            </div>\n                          </a>\n                        </Link>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </ScrollArea.Viewport>\n          <ScrollArea.Scrollbar\n            className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 dark:hover:bg-black-200 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n            orientation=\"vertical\"\n          >\n            <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-200 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n          </ScrollArea.Scrollbar>\n          <ScrollArea.Scrollbar\n            className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 dark:hover:bg-black-200 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n            orientation=\"horizontal\"\n          >\n            <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-200 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n          </ScrollArea.Scrollbar>\n          <ScrollArea.Corner className=\"bg-neargray-50\" />\n        </ScrollArea.Root>\n      </Select.Content>\n    </Select.Root>\n  );\n};\n\nexport default TokenHoldings;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/includes.Common.TokenHoldings", "fact_widget_deployments_id": "34f0cab0f2692f0a6c3a7241dbb68786", "inserted_timestamp": "2024-04-18T11:33:47.467Z", "modified_timestamp": "2024-04-18T11:33:47.467Z", "__row_index": 20}