{"tx_hash": "AMDWQ7LZq7JSAL92KkjGNe4mhS9B1VbPrNNVnEFmV2Kg", "action_id_social": "5ECsaKpAxso1bf3kEhVH7hDtYio6eN1Zv9WRC648Qjun-0-widget", "block_id": 116536526, "block_timestamp": "2024-04-10T11:23:01.959Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Contract.Overview", "source_code": "/**\n * Component: ContractOverview\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Contract Overview on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [id] - The account identifier passed as a string.\n * @param {ContractInfo} [contract] - Information about the user's contract.\n * @param {any} [schema] - The schema data for the component.\n * @param {ContractParseInfo} [contractInfo] - Additional parsed information about the contract.\n * @param {Function} [requestSignInWithWallet] - Function to initiate sign-in with a wallet.\n * @param {boolean} [signedIn] - Boolean indicating whether the user is currently signed in or not.\n * @param {string} [accountId] - The account ID of the signed-in user, passed as a string.\n * @param {Function} [logOut] - Function to log out.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent(props) {\n  const {\n    network,\n    t,\n    id,\n    contract,\n    schema,\n    contractInfo,\n    requestSignInWithWallet,\n    connected,\n    accountId,\n    logOut,\n    ownerId,\n  } = props;\n\n  const [pageTab, setPageTab] = useState('Contract Info');\n\n  const onTab = (index) => {\n    setPageTab(tabs[index]);\n  };\n\n  const tabs = ['Contract Info', 'Contract Methods'];\n\n  return (\n    <Tabs.Root\n      defaultValue={pageTab}\n      className={'bg-white soft-shadow rounded-xl pb-1 px-4 py-3'}\n    >\n      <Tabs.List>\n        {tabs &&\n          tabs.map((tab, index) => (\n            <Tabs.Trigger\n              key={index}\n              onClick={() => {\n                onTab(index);\n              }}\n              className={`px-2 mr-1 md:px-3 border py-2 mb-3 text-xs font-medium rounded-md text-gray-500 hover:text-green-500 hover:border-green-500 cursor-pointer outline-none ${\n                pageTab === tab ? 'text-green-500 border-green-500' : ''\n              }`}\n              value={tab}\n            >\n              {tab === 'Contract Methods' && !schema ? (\n                <div className=\"flex h-full\">\n                  <h2>{tab}</h2>\n                </div>\n              ) : (\n                <h2>{tab}</h2>\n              )}\n            </Tabs.Trigger>\n          ))}\n      </Tabs.List>\n      <Tabs.Content value={tabs[0]}>\n        {\n          <Widget\n            src={`${ownerId}/widget/bos-components.components.Contract.Info`}\n            props={{\n              network: network,\n              t: t,\n              id: id,\n              contract: contract,\n              ownerId,\n            }}\n          />\n        }\n      </Tabs.Content>\n      <Tabs.Content value={tabs[1]}>\n        <div className=\"border-t p-4\">\n          {connected ? (\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <button\n                    className=\"px-2 mr-1 md:px-3 bg-neargreen py-2 text-xs font-medium rounded-md text-white inline-flex items-center\"\n                    onClick={logOut}\n                  >\n                    <span className=\"h-3 w-3 inline-block rounded-full mr-2 bg-white\" />\n                    Connected\n                  </button>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  Connect to Contract\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          ) : (\n            <button\n              className=\"px-2 mr-1 md:px-3 bg-red-400 py-2 text-xs font-medium rounded-md text-white inline-flex items-center\"\n              onClick={requestSignInWithWallet}\n            >\n              <span className=\"h-3 w-3 inline-block rounded-full mr-2 bg-white animate-pulse\" />\n              Connect to Contract\n            </button>\n          )}\n        </div>\n        {!schema && (\n          <p className=\"text-xs mx-5 text-gray-500 mb-4  bg-gray-100 px-2 py-2  w-fit rounded shadow\">\n            Contracts with Near{' '}\n            <a\n              className=\"text-green-500 \"\n              target=\"_blank\"\n              href=\"https://github.com/near/abi\"\n              rel=\"noreferrer noopener nofollow\"\n            >\n              abi\n            </a>\n            {`will have their methods and parameters automatically shown. For\n              other contracts we provide a best effort \"auto detect\" facility to\n              find successful methods and parameters from past transactions.`}\n          </p>\n        )}\n        {schema?.body?.functions.length > 0 ? (\n          <Accordion.Root\n            type=\"multiple\"\n            className=\"contract-accordian text-gray-600 px-4 pt-4 border-t w-full\"\n            collapsible\n          >\n            {schema?.body?.functions?.map((func, index) => (\n              <Widget\n                key={index}\n                src={`${ownerId}/widget/bos-components.components.Contract.ViewOrChangeAbi`}\n                props={{\n                  network: network,\n                  t: t,\n                  id: id,\n                  key: index,\n                  index: index,\n                  method: func,\n                  connected: connected,\n                  accountId: accountId,\n                  schema: schema,\n                  ownerId,\n                }}\n              />\n            ))}\n          </Accordion.Root>\n        ) : (\n          contractInfo?.methodNames?.length > 0 && (\n            <Accordion.Root\n              type=\"multiple\"\n              className=\"contract-accordian text-gray-600 px-4 pt-4 border-t w-full\"\n              collapsible\n            >\n              {contractInfo?.methodNames?.map((method, index) => (\n                <Widget\n                  key={index}\n                  src={`${ownerId}/widget/bos-components.components.Contract.ViewOrChange`}\n                  props={{\n                    network: network,\n                    t: t,\n                    id: id,\n                    key: index,\n                    index: index,\n                    method: method,\n                    connected: connected,\n                    accountId: accountId,\n                    ownerId,\n                  }}\n                />\n              ))}\n            </Accordion.Root>\n          )\n        )}\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Contract.Overview", "fact_widget_deployments_id": "31377bea14f24e8aa0ef81c78bb4fdd5", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 3}