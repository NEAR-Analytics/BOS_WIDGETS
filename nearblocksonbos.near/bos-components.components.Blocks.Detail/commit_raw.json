{"tx_hash": "H7gKymTyPWWawVqKj1q1wCYFqXjn8Mv4ReU5x54ELuwG", "action_id_social": "Evf94WvCpCdog6ae5snWZmM5ULHz7cChsozQPRFQmiQx-0-widget", "block_id": 116536466, "block_timestamp": "2024-04-10T11:21:54.184Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Blocks.Detail", "source_code": "/**\n * Component: BlocksDetail\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of specified blocks on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [hash] -  The block identifier passed as a string.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\n\nfunction MainComponent(props) {\n  const {\n    convertToMetricPrefix,\n    convertToUTC,\n    dollarFormat,\n    gasFee,\n    getTimeAgoString,\n    localFormat,\n  } = VM.require(`${props.ownerId}/widget/includes.Utils.formats`);\n\n  const { getConfig, handleRateLimit, nanoToMilli } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const { gasPrice } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.near`,\n  );\n\n  const { network, hash, t } = props;\n  const [isLoading, setIsLoading] = useState(true);\n  const [block, setBlock] = useState(null);\n  const [price, setPrice] = useState('');\n  const [error, setError] = useState(false);\n\n  const config = getConfig ? getConfig(network) : '';\n\n  const Loader = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 h-4 rounded shadow-sm animate-pulse ${props.className}`}\n      ></div>\n    );\n  };\n\n  \n\n\n\n\n  const LinkWrapper = (props) => (\n    <Link href={props.href} className=\"hover:no-underline\">\n      <a className=\"bg-green-500 bg-opacity-10 hover:bg-opacity-100 text-green-500 hover:text-white text-xs px-2 py-1 rounded-xl hover:no-underline\">\n        {props.children}\n      </a>\n    </Link>\n  );\n\n  useEffect(() => {\n    function fetchBlock() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}blocks/${hash}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.blocks?.[0];\n            if (data.status === 200) {\n              setError(false);\n              setBlock(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchBlock, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch((error) => {\n          if (error) setError(true);\n          setIsLoading(false);\n        });\n    }\n    if (config.backendUrl) {\n      fetchBlock();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.backendUrl, hash]);\n\n  const date = useMemo(() => {\n    if (block?.block_timestamp) {\n      function fetchPriceAtDate(date) {\n        asyncFetch(`${config.backendUrl}stats/price?date=${date}`).then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.stats[0];\n            if (data.status === 200) {\n              setPrice(resp?.near_price);\n            } else {\n              handleRateLimit(data, () => fetchPriceAtDate(date));\n            }\n          },\n        );\n      }\n      const timestamp = new Date(nanoToMilli(block?.block_timestamp));\n\n      const currentDate = new Date();\n      const currentDay = currentDate.getUTCDate();\n      const currentMonth = currentDate.getUTCMonth() + 1;\n      const currentYear = currentDate.getUTCFullYear();\n\n      const currentDt = `${currentYear}-${\n        currentMonth < 10 ? '0' : ''\n      }${currentMonth}-${currentDay < 10 ? '0' : ''}${currentDay}`;\n\n      const day = timestamp.getUTCDate();\n      const month = timestamp.getUTCMonth() + 1;\n      const year = timestamp.getUTCFullYear();\n\n      const blockDt = `${year}-${month < 10 ? '0' : ''}${month}-${\n        day < 10 ? '0' : ''\n      }${day}`;\n\n      if (currentDt > blockDt) {\n        fetchPriceAtDate(blockDt);\n\n        return blockDt;\n      }\n    }\n    return;\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [block?.block_timestamp]);\n\n  const gasUsed = block?.chunks_agg?.gas_used ?? '';\n  const gasLimit = block?.chunks_agg?.gas_limit ?? '';\n\n  return (\n    <>\n      <div className=\"md:flex items-center justify-between\">\n        {isLoading ? (\n          <div className=\"w-80 max-w-xs px-3 py-5\">\n            <Skeleton className=\"h-7\" />\n          </div>\n        ) : (\n          <h1 className=\"text-xl text-nearblue-600 px-2 py-5\">\n            {t ? (\n              <>\n                {t('blocks:block.heading.0')}\n                <span key={1} className=\"font-semibold\">\n                  {t('blocks:block.heading.1', {\n                    block: block?.block_height\n                      ? localFormat(block?.block_height)\n                      : '',\n                  })}\n                </span>\n              </>\n            ) : (\n              <>\n                Block\n                <span key={1} className=\"font-semibold\">\n                  #{block?.block_height ? localFormat(block?.block_height) : ''}\n                </span>\n              </>\n            )}\n          </h1>\n        )}\n      </div>\n      {error || (!isLoading && !block) ? (\n        <div className=\"text-nearblue-700 text-xs px-2 mb-5\">\n          {t ? t('blocks:blockError') : 'Block Error'}\n        </div>\n      ) : (\n        <>\n          <div className=\"bg-white text-sm text-nearblue-600 divide-solid divide-gray-200 divide-y soft-shadow rounded-xl\">\n            {network === 'testnet' && (\n              <div className=\"flex flex-wrap p-4 text-red-500\">\n                {t\n                  ? t('blocks:testnetNotice')\n                  : '[ This is a Testnet block only ]'}\n              </div>\n            )}\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.height') : 'Block Height'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-20\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 font-semibold break-words\">\n                  {block?.block_height\n                    ? localFormat(block?.block_height)\n                    : block?.block_height ?? ''}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.hash') : 'Hash'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-xl\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {block?.block_hash}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.timestamp') : 'Timestamp'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-sm\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {block?.block_timestamp &&\n                    `${getTimeAgoString(\n                      nanoToMilli(block?.block_timestamp),\n                    )} (${convertToUTC(\n                      nanoToMilli(block?.block_timestamp),\n                      true,\n                    )}) +UTC`}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.transactions.0') : 'Transactions'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-xs\" />\n                </div>\n              ) : (\n                block?.transactions_agg?.count && (\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {t ? (\n                      <>\n                        <LinkWrapper href={`/txns?block=${block?.block_hash}`}>\n                          {t('blocks:block.transactions.1', {\n                            txns: block?.transactions_agg?.count\n                              ? localFormat(block?.transactions_agg?.count)\n                              : block?.transactions_agg?.count ?? '',\n                          })}\n                        </LinkWrapper>\n                        &nbsp;\n                        {t('blocks:block.transactions.2', {\n                          receipts: block?.receipts_agg?.count\n                            ? localFormat(block?.receipts_agg?.count)\n                            : block?.receipts_agg?.count ?? '',\n                        })}\n                      </>\n                    ) : (\n                      <>\n                        (\n                        <LinkWrapper href={`/txns?block=${block?.block_hash}`}>\n                          {block?.transactions_agg?.count\n                            ? localFormat(block?.transactions_agg?.count)\n                            : block?.transactions_agg?.count ??\n                              '' + ' transactions'}\n                        </LinkWrapper>\n                        ) + `and $\n                        {block?.receipts_agg?.count\n                          ? localFormat(block?.receipts_agg?.count)\n                          : block?.receipts_agg?.count ?? ''}{' '}\n                        receipts`\n                      </>\n                    )}\n                  </div>\n                )\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.author') : 'Author'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  <Link\n                    href={`/address/${block?.author_account_id}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500 hover:no-underline\">\n                      {block?.author_account_id}\n                    </a>\n                  </Link>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.gasUsed') : 'GAS Used'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {gasUsed ? convertToMetricPrefix(gasUsed) + 'gas' : ''}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.gasLimit') : 'Gas Limit'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {gasLimit ? convertToMetricPrefix(gasLimit) + 'gas' : ''}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.gasPrice') : 'GAS Price'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {block?.gas_price\n                    ? gasPrice(block?.gas_price)\n                    : block?.gas_price ?? ''}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.gasFee') : 'Gas Fee'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {gasUsed && block?.gas_price\n                    ? gasFee(gasUsed, block?.gas_price) + ' \u24c3'\n                    : ''}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                {t ? t('blocks:block.parenthash') : 'Parent Hash'}\n              </div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  <Link\n                    href={`/blocks/${block?.prev_block_hash}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500 hover:no-underline\">\n                      {block?.prev_block_hash}\n                    </a>\n                  </Link>\n                </div>\n              )}\n            </div>\n            {network === 'mainnet' && date && (\n              <div className=\"flex flex-wrap p-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">\n                  {t ? t('blocks:block.price') : 'Price'}\n                </div>\n                {isLoading ? (\n                  <div className=\"w-full md:w-3/4\">\n                    <Loader className=\"flex w-full max-w-lg\" />\n                  </div>\n                ) : (\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {price ? `$${dollarFormat(price)} / \u24c3` : 'N/A'}\n                  </div>\n                )}\n              </div>\n            )}\n            <div className=\"flex flex-wrap p-4\">\n              <div className=\"w-full md:w-1/4 mb-2 md:mb-0\">Shard Number</div>\n              {isLoading ? (\n                <div className=\"w-full md:w-3/4\">\n                  <Loader className=\"flex w-full max-w-lg\" />\n                </div>\n              ) : (\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {localFormat(block?.chunks_agg?.shards)}\n                </div>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Blocks.Detail", "fact_widget_deployments_id": "afbcd1ca11c0d39cdf01826b732c453b", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 27}