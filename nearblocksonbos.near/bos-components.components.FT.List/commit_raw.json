{"tx_hash": "HjuKt8fdi6yA9LePX2FHBSaaFwARS4Yj4tKBhEPKzz2p", "action_id_social": "HsRD6u38bmd8kBUb5DF7MyanzkQMuMrK5bUkZV8Lj5Ge-0-widget", "block_id": 119039092, "block_timestamp": "2024-05-16T10:30:02.018Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.FT.List", "source_code": "/**\n * Component: FTList\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Top Tokens on Near Protocol.\n * @interface Props\n * @param {string}  [network] - The network data to show, either mainnet or testnet.\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {number} [currentPage] - The current page number being displayed. (Optional)\n *                                 Example: If provided, currentPage=3 will display the third page of blocks.\n * @param {function} [setPage] - A function used to set the current page. (Optional)\n *                               Example: setPage={handlePageChange} where handlePageChange is a function to update the page.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};\n\nconst SortIcon = (props) => {\n  return (\n    <ArrowUp\n      className={`h-3 w-3 fill-current transition-transform mr-1 duration-700 ${\n        props.order !== 'asc' ? 'transform rotate-180' : 'transform rotate-0'\n      }`}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\nconst ErrorMessage = ({ icons, message, mutedText }) => {\n  return (\n    <div className=\"text-center py-24\">\n      <div className=\"mb-4 flex justify-center\">\n        <span className=\"inline-block border border-yellow-600 border-opacity-25 bg-opacity-10 bg-yellow-300 text-yellow-500 rounded-full p-4\">\n          {icons}\n        </span>\n      </div>\n\n      <h3 className=\"font-bold text-lg text-black dark:text-neargray-10\">\n        {message}\n      </h3>\n\n      <p className=\"mb-0 py-1 font-bold break-words px-2\">{mutedText}</p>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\nconst FaInbox = () => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 576 512\"\n      height=\"24\"\n      width=\"24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M567.938 243.908L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L8.062 243.908A47.994 47.994 0 0 0 0 270.533V400c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V270.533a47.994 47.994 0 0 0-8.062-26.625zM162.252 128h251.497l85.333 128H376l-32 64H232l-32-64H76.918l85.334-128z\"></path>\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\n\nconst initialSorting = {\n  sort: 'onchain_market_cap',\n  order: 'desc',\n};\nconst initialPagination = {\n  per_page: 50,\n};\nfunction MainComponent({ t, network, currentPage, setPage, ownerId }) {\n  const {\n    priceFormat,\n    dollarFormat,\n    dollarNonCentFormat,\n    serialNumber,\n    localFormat,\n  } = VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  const { debounce, getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [tokens, setTokens] = useState({});\n\n  const [sorting, setSorting] = useState(initialSorting);\n  const errorMessage = t ? t('token:fts.top.empty') : 'No tokens found!';\n\n  const config = getConfig && getConfig(network);\n\n  const ArrowUp = () => {\n    return (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        width={24}\n        height={24}\n        className=\"h-3 w-3 fill-current mr-1\"\n      >\n        <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n        <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n      </svg>\n    );\n  };\n\n  useEffect(() => {\n    function fetchTotalTokens(qs) {\n      const queryParams = qs ? '?' + qs : '';\n      asyncFetch(`${config?.backendUrl}fts/count${queryParams}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.tokens?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count ?? 0);\n            } else {\n              handleRateLimit(data, () => fetchTotalTokens(qs));\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchTokens(qs, sqs, page) {\n      setIsLoading(true);\n      const queryParams = qs ? qs + '&' : '';\n      asyncFetch(\n        `${config?.backendUrl}fts?${queryParams}order=${sqs?.order}&sort=${sqs?.sort}&page=${page}&per_page=50`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.tokens;\n            if (data.status === 200) {\n              setTokens((prevData) => ({ ...prevData, [page]: resp || [] }));\n              setIsLoading(false);\n            } else {\n              handleRateLimit(\n                data,\n                () => fetchTokens(qs, sorting, page),\n                () => setIsLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchTotalTokens();\n      fetchTokens('', sorting, currentPage);\n      if (sorting) {\n        fetchTotalTokens();\n        fetchTokens('', sorting, currentPage);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, currentPage, sorting]);\n\n  const onOrder = (sortKey) => {\n    setSorting((state) => ({\n      ...state,\n      sort: sortKey,\n      order:\n        state.sort === sortKey\n          ? state.order === 'asc'\n            ? 'desc'\n            : 'asc'\n          : 'desc',\n    }));\n  };\n\n  const debouncedSearch = useMemo(() => {\n    return (\n      debounce &&\n      debounce(500, (value) => {\n        if (!value || value.trim() === '') {\n          setSearchResults([]);\n          return;\n        }\n        asyncFetch(`${config?.backendUrl}fts?search=${value}&per_page=5`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then((data) => {\n            const resp = data?.body?.tokens;\n            setSearchResults(resp);\n          })\n          .catch(() => {});\n      })\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl]);\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    debouncedSearch(value);\n  };\n\n  const columns = [\n    {\n      header: <span>#</span>,\n      key: '',\n      cell: (_row, index) => (\n        <span>\n          {serialNumber(index, currentPage, initialPagination.per_page)}\n        </span>\n      ),\n      tdClassName:\n        'pl-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>{t ? t('token:fts.top.token') : 'TOKEN'}</span>,\n      key: 'name',\n      cell: (row) => (\n        <>\n          <div className=\"flex items-center\">\n            <TokenImage\n              src={row?.icon}\n              alt={row?.name}\n              appUrl={config?.appUrl}\n              className=\"w-5 h-5 mr-2\"\n            />\n            <Link\n              href={`/token/${row?.contract}`}\n              className=\"hover:no-underline\"\n            >\n              <a className=\" text-green-500 dark:text-green-250 hover:no-underline flex items-center\">\n                <span className=\"inline-block truncate max-w-[200px] mr-1\">\n                  {row?.name}\n                </span>\n                <span className=\"text-nearblue-700 inline-block truncate max-w-[80px]\">\n                  {row?.symbol}\n                </span>\n              </a>\n            </Link>\n          </div>\n        </>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 w-80  align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>{t ? t('token:fts.top.price') : 'PRICE'}</span>,\n      key: 'price',\n      cell: (row) => (\n        <span>\n          {row?.price === null ? (\n            <span className=\"text-xs\">N/A</span>\n          ) : (\n            `$${priceFormat(row?.price)}`\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: (\n        <span className=\" whitespace-nowrap\">\n          {t ? t('token:fts.top.change') : 'CHANGE'} (%)\n        </span>\n      ),\n      key: 'change_24',\n      cell: (row) => (\n        <span>\n          {row?.change_24 === null ? (\n            <span className=\"text-xs\">N/A</span>\n          ) : Number(row?.change_24) > 0 ? (\n            <div className=\"text-neargreen flex flex-row items-center\">\n              <ArrowUp />+{dollarFormat(row?.change_24)}%\n            </div>\n          ) : (\n            <div className=\"text-red-500 flex flex-row items-center\">\n              <ArrowDown className=\"h-3 w-3 fill-current mr-1\" />\n              {row?.change_24 ? dollarFormat(row?.change_24) + '%' : ''}\n            </div>\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>{t ? t('token:fts.top.volume') : 'VOLUME'} (24H)</span>,\n      key: 'volume_24h',\n      cell: (row) => (\n        <span>\n          {row?.volume_24h === null ? (\n            <span className=\"text-xs\">N/A</span>\n          ) : (\n            `$${dollarNonCentFormat(row?.volume_24h)}`\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs whitespace-nowrap font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: (\n        <span className=\"flex\">\n          <span className=\"uppercase whitespace-nowrap\">Circulating MC</span>\n          <OverlayTrigger\n            placement=\"bottom-start\"\n            delay={{ show: 500, hide: 0 }}\n            overlay={\n              <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                {\n                  'Calculated by multiplying the number of tokens in circulating supply across all chains with the current market price per token.'\n                }\n              </Tooltip>\n            }\n          >\n            <span>\n              <Question className=\"w-4 h-4 fill-current ml-1\" />\n            </span>\n          </OverlayTrigger>\n        </span>\n      ),\n      key: 'market_cap',\n      cell: (row) => (\n        <span>\n          {row?.market_cap === null ||\n          dollarNonCentFormat(row?.market_cap) === '0' ? (\n            <span className=\"text-xs\">N/A</span>\n          ) : (\n            `$${dollarNonCentFormat(row?.market_cap)}`\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 tracking-wider',\n    },\n    {\n      header: (\n        <span>\n          {' '}\n          <button\n            type=\"button\"\n            onClick={() => onOrder('onchain_market_cap')}\n            className=\"w-full px-6 py-2 text-left text-xs font-semibold  tracking-wider text-green-500 dark:text-green-250 focus:outline-none flex flex-row\"\n          >\n            {sorting?.sort === 'onchain_market_cap' && (\n              <div className=\"text-nearblue-600 dark:text-neargray-10 font-semibold\">\n                <SortIcon order={sorting?.order} />\n              </div>\n            )}\n            <span className=\"uppercase whitespace-nowrap\">On-Chain MC</span>\n            <OverlayTrigger\n              placement=\"bottom-start\"\n              delay={{ show: 500, hide: 0 }}\n              overlay={\n                <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\">\n                  {\n                    \"Calculated by multiplying the token's Total Supply on Near with the current market price per token\"\n                  }\n                </Tooltip>\n              }\n            >\n              <span>\n                <Question className=\"w-4 h-4 fill-current ml-1\" />\n              </span>\n            </OverlayTrigger>\n          </button>\n        </span>\n      ),\n      key: 'onchain_market_cap',\n      cell: (row) => (\n        <span>\n          {row?.onchain_market_cap === null ? (\n            <span className=\"text-xs\">N/A</span>\n          ) : (\n            `$${\n              row?.onchain_market_cap\n                ? dollarNonCentFormat(row?.onchain_market_cap)\n                : row?.onchain_market_cap ?? ''\n            }`\n          )}\n        </span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 align-top',\n    },\n    // {\n    //   header: (\n    //     <span>\n    //       <button\n    //         type=\"button\"\n    //         onClick={() => onOrder('holders')}\n    //         className=\"w-full px-6 py-2 text-left text-xs font-semibold uppercase tracking-wider text-green-500 focus:outline-none flex flex-row\"\n    //       >\n    //         {sorting?.sort === 'holders' && (\n    //           <div className=\"text-nearblue-600 font-semibold\">\n    //             <SortIcon order={sorting?.order} />\n    //           </div>\n    //         )}\n    //         Holders\n    //       </button>{' '}\n    //     </span>\n    //   ),\n    //   key: 'holders',\n    //   cell: (row: Token) => (\n    //     <span>{row?.holders ? localFormat(row?.holders) : ''}</span>\n    //   ),\n    //   tdClassName:\n    //     'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 align-top',\n    // },\n  ];\n\n  return (\n    <div className=\" bg-white  dark:bg-black-600 dark:border-black-200 border soft-shadow rounded-xl pb-1 \">\n      <div className=\"flex flex-row items-center justify-between text-left text-sm text-nearblue-600 dark:text-neargray-10 px-3 py-2\">\n        {isLoading ? (\n          <div className=\"max-w-lg w-full pl-3\">\n            <Skeleton className=\"h-4\" />\n          </div>\n        ) : (\n          <p className=\"pl-3\">\n            {Object.keys(tokens).length > 0 &&\n              `${\n                t\n                  ? t('token:fts.top.listing', {\n                      count: localFormat && localFormat(totalCount),\n                    })\n                  : `A total of ${\n                      localFormat && localFormat(totalCount)\n                    } Token Contracts found`\n              }`}\n          </p>\n        )}\n        <div className={`flex w-full h-10 sm:w-80 mr-2`}>\n          <div className=\"flex-grow\">\n            <label htmlFor=\"token-search\" id=\"token-search\">\n              <input\n                name=\"search\"\n                autoComplete=\"off\"\n                placeholder=\"Search\"\n                className=\"search ml-2 pl-8 token-search bg-white dark:bg-black-600 dark:border-black-200 w-full h-full text-sm py-2 outline-none border rounded-xl\"\n                onChange={onChange}\n              />\n            </label>\n            {searchResults?.length > 0 && (\n              <div className=\"z-50 relative\">\n                <div className=\"text-xs rounded-b-md -mr-2 ml-2 -mt-1 bg-white dark:bg-black-600 py-2 shadow\">\n                  {searchResults.map((token) => (\n                    <div\n                      key={token?.contract}\n                      className=\"mx-2 px-2 py-2 hover:bg-gray-100 cursor-pointer hover:border-gray-500 truncate\"\n                    >\n                      <Link\n                        href={`/token/${token?.contract}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a className=\"hover:no-underline flex items-center my-1 whitespace-nowrap \">\n                          <div className=\"flex-shrink-0 h-5 w-5 mr-2\">\n                            <TokenImage\n                              src={token?.icon}\n                              alt={token?.name}\n                              appUrl={config?.appUrl}\n                              className=\"w-5 h-5\"\n                            />\n                          </div>\n                          <p className=\"font-semibold text-sm truncate\">\n                            {token?.name}\n                            <span className=\"text-nearblue-700 ml-2\">\n                              {token?.symbol}\n                            </span>\n                          </p>\n                        </a>\n                      </Link>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <Widget\n        src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n        props={{\n          columns: columns,\n          data: tokens[currentPage],\n          isLoading: isLoading,\n          isPagination: true,\n          count: totalCount,\n          page: currentPage,\n          limit: 50,\n          pageLimit: 200,\n          setPage: setPage,\n          Error: (\n            <ErrorMessage\n              icons={<FaInbox />}\n              message={errorMessage || ''}\n              mutedText=\"Please try again later\"\n            />\n          ),\n        }}\n      />\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.FT.List", "fact_widget_deployments_id": "132afa91962fe4c938405953bb172fea", "inserted_timestamp": "2024-05-16T11:49:40.926Z", "modified_timestamp": "2024-05-16T12:57:51.740Z", "__row_index": 1}