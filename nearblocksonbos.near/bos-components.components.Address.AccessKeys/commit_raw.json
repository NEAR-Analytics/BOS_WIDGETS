{"tx_hash": "73DnWHW3pQQWVxyZz4jMKJmJt4ABkVbPFuJFpoAE6GCa", "action_id_social": "GeQ9bdq275B965tQqRSBikvxCeNdTDSrb2CLK1Mr1F4g-0-widget", "block_id": 117096819, "block_timestamp": "2024-04-18T09:42:02.821Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Address.AccessKeys", "source_code": "/**\n * Component: AddressAccessKeys\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Table of Accesskey List.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [id] - The account identifier passed as a string.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};\n\nconst SortIcon = (props) => {\n  return (\n    <ArrowUp\n      className={`h-3 w-3 fill-current transition-transform mr-1 duration-700 ${\n        props.order !== 'asc' ? 'transform rotate-180' : 'transform rotate-0'\n      }`}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\nconst FaChevronLeft = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-left\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\n      />\n    </svg>\n  );\n};\nconst FaChevronRight = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-chevron-right\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n};\n\n\n\n\n\n\n\n\nconst Paginator = (props) => {\n  let pages;\n  if (props.count > 0) {\n    pages = Math.ceil(props.count / props.limit);\n  } else {\n    pages = 1;\n  }\n  pages = pages > props.pageLimit ? props.pageLimit : pages;\n  const onPrev = () => {\n    if (props.page <= 1) return null;\n\n    const newPage = (props.page || 1) - 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onNext = () => {\n    if (props.page >= pages) return null;\n\n    const newPage = (props.page || 1) + 1;\n    props.setPage(newPage);\n    return;\n  };\n  const onFirst = () => props.setPage(1);\n  const onLast = () => props.setPage(pages);\n\n  return (\n    <div className=\"bg-white dark:bg-black-600 px-2 py-3 flex items-center justify-between border-t dark:border-black-200 md:px-4\">\n      <div className=\"flex-1 flex items-center justify-between\">\n        <div></div>\n\n        <div>\n          <div\n            className=\"relative z-0 inline-flex rounded-md\"\n            aria-label=\"Pagination\"\n          >\n            <button\n              type=\"button\"\n              disabled={props.page <= 1 || pages === 1}\n              onClick={onFirst}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2  text-xs font-medium rounded-md ${\n                props.page <= 1\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:bg-green-400 dark:hover:bg-green-250 hover:text-white dark:hover:text-black'\n              } bg-gray-100 dark:bg-black-200 dark:text-green-250`}\n            >\n              First\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page <= 1 || pages === 1}\n              onClick={onPrev}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 font-medium ${\n                props.page <= 1\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:text-white dark:hover:text-black hover:bg-green-400 dark:hover:bg-green-250'\n              } rounded-md  bg-gray-100 dark:bg-black-200`}\n            >\n              <FaChevronLeft />\n            </button>\n            <button\n              type=\"button\"\n              disabled\n              className=\"relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium text-gray-500  rounded-md  bg-gray-100 dark:bg-black-200 dark:text-neargray-10\"\n            >\n              Page {props.page} of {pages}\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page >= pages || pages === 1}\n              onClick={onNext}\n              className={`relative inline-flex items-center ml-1 px-2 md:px-3 py-2 rounded-md font-medium ${\n                props.page >= pages\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:text-white dark:hover:text-black hover:bg-green-400 dark:hover:bg-green-250'\n              }  bg-gray-100 dark:text-green-250 dark:bg-black-200`}\n            >\n              <FaChevronRight />\n            </button>\n            <button\n              type=\"button\"\n              disabled={props.page >= pages || pages === 1}\n              onClick={onLast}\n              className={`relative inline-flex items-center px-2 ml-1 md:px-3 py-2 text-xs font-medium rounded-md ${\n                props.page >= pages\n                  ? 'text-gray-500 dark:text-neargray-10'\n                  : 'text-green-400 dark:text-green-250 hover:text-white dark:hover:text-black hover:bg-green-400 dark:hover:bg-green-250'\n              }  bg-gray-100 dark:text-green-250 dark:bg-black-200`}\n            >\n              Last\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Paginator.jsx\" */\n\nfunction MainComponent({ network, t, id, ownerId }) {\n  const { getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [showWhen, setShowWhen] = useState(true);\n  const [sorting, setSorting] = useState('desc');\n  const [count, setCount] = useState(0);\n  const [keys, Setkeys] = useState([]);\n\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n\n  const config = getConfig && getConfig(network);\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCurrentPage(currentPage);\n  }, [currentPage]);\n\n  const toggleShowWhen = () => setShowWhen((s) => !s);\n\n  const onOrder = () => {\n    setSorting((state) => (state === 'asc' ? 'desc' : 'asc'));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    function fetchAccountData() {\n      asyncFetch(\n        `${config?.backendUrl}account/${id}/keys?order=${sorting}&page=${currentPage}&per_page=25`,\n      )\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.keys;\n            if (data.status === 200) {\n              Setkeys(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(\n                data,\n                () => fetchAccountData(),\n                () => setIsLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchCountData() {\n      asyncFetch(`${config?.backendUrl}account/${id}/keys/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.keys?.[0]?.count || 0;\n            if (data.status === 200) {\n              setCount(resp);\n            } else {\n              handleRateLimit(data, fetchCountData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    fetchAccountData();\n    fetchCountData();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, id, currentPage, sorting]);\n\n  return (\n    <>\n      <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl overflow-x-auto \">\n        <table className=\"min-w-full divide-y dark:divide-black-200 dark:border-black-200 border-t\">\n          <thead className=\"bg-gray-100 dark:bg-black-300\">\n            <tr>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600  dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Txn Hash\n              </th>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600  dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Public key\n              </th>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Access\n              </th>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Contract\n              </th>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Method\n              </th>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Allowance\n              </th>\n              <th\n                scope=\"col\"\n                className=\"px-6 py-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider\"\n              >\n                Action\n              </th>\n              <th scope=\"col\" className=\"text-left\">\n                <div className=\"w-full inline-flex px-5 py-4\">\n                  <button\n                    type=\"button\"\n                    onClick={toggleShowWhen}\n                    className=\"text-left text-xs w-full font-semibold uppercase tracking-wider text-nearblue-600 dark:text-neargray-10 focus:outline-none\"\n                  >\n                    {showWhen ? 'When' : 'Date Time (UTC)'}\n                  </button>\n                  <button type=\"button\" onClick={onOrder} className=\"px-2\">\n                    <div className=\"text-nearblue-600  dark:text-neargray-10 font-semibold\">\n                      <SortIcon order={sorting} />\n                    </div>\n                  </button>\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-black-600 dark:divide-black-200 divide-y divide-gray-200\">\n            {isLoading &&\n              [...Array(25)].map((_, i) => (\n                <tr key={i} className=\"hover:bg-blue-900/5 h-[57px]\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <Skeleton />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <Skeleton />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <Skeleton />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-tiny \">\n                    <Skeleton />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <Skeleton />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <Skeleton />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                    <Skeleton />\n                  </td>\n                </tr>\n              ))}\n            {!isLoading && keys.length === 0 && (\n              <tr className=\"h-[57px]\">\n                <td\n                  colSpan={100}\n                  className=\"px-6 py-4 text-nearblue-700 dark:text-neargray-10 text-xs\"\n                >\n                  No access keys\n                </td>\n              </tr>\n            )}\n            {keys &&\n              keys.map((key) => (\n                <Widget\n                  key={key.account_id + key.public_key}\n                  src={`${ownerId}/widget/bos-components.components.Address.AccessKeyRow`}\n                  props={{\n                    network: network,\n                    t: t,\n                    accessKey: key,\n                    showWhen: showWhen,\n                    ownerId,\n                  }}\n                  loading={\n                    <div className=\" whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10\">\n                      <Skeleton />\n                    </div>\n                  }\n                />\n              ))}\n          </tbody>\n        </table>\n        <Paginator\n          count={count}\n          page={currentPage}\n          limit={25}\n          pageLimit={200}\n          setPage={setPage}\n        />\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Address.AccessKeys", "fact_widget_deployments_id": "e2ca40a8356b3aa4a52e00735a4ce206", "inserted_timestamp": "2024-04-18T11:33:47.467Z", "modified_timestamp": "2024-04-18T11:33:47.467Z", "__row_index": 3}