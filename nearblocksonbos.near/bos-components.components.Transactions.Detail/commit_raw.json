{"tx_hash": "2H4JgsQqDJkQtpUAzhUJJnL7rAoiHb8tTur1n4dHsezK", "action_id_social": "7KKpCDzhqQvEAKvce6iiQTYhPmYkgcYKrCGCrEgPUdo2-0-widget", "block_id": 117885788, "block_timestamp": "2024-04-29T13:28:29.064Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.Detail", "source_code": "/**\n * Component: TransactionsDetail\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of specific Transaction on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {boolean} [loading] - Indicates whether data is currently loading.\n * @param {TransactionInfo} [txn] - Information related to a transaction.\n * @param {RPCTransactionInfo} [rpcTxn] - RPC data of the transaction.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Action/index.jsx\" */\nconst WrapDeposit = (props) => {\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n\n  const log = props.event.logs?.match(/^Deposit (\\d+) NEAR to ([\\S]+)/);\n\n  if (log?.length !== 3) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n      <span className=\"font-bold px-1\">Mint </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: props.event.contract,\n            amount: log[1],\n            network: props.network,\n            ownerId: props.ownerId,\n          }}\n        />\n      }\n    </div>\n  );\n};\nconst Withdraw = (props) => {\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n\n  const log = props.event.logs?.match(/^Withdraw (\\d+) NEAR from ([\\S]+)/);\n\n  if (log?.length !== 3) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n      <span className=\"font-bold px-1\">Burn </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: props.event.contract,\n            amount: log[1],\n            network: props.network,\n            ownerId: props.ownerId,\n          }}\n        />\n      }\n    </div>\n  );\n};\n\n\n2;\n\n\nconst WrapContract = (props) => {\n  switch (true) {\n    case /^Deposit.*/.test(props.event.logs):\n      return (\n        <WrapDeposit\n          event={props.event}\n          network={props.network}\n          ownerId={props.ownerId}\n        />\n      );\n    case /^Withdraw.*/.test(props.event.logs):\n      return (\n        <Withdraw\n          event={props.event}\n          network={props.network}\n          ownerId={props.ownerId}\n        />\n      );\n\n    default:\n      return null;\n  }\n};\nconst Swap = (props) => {\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  const log = props.event.logs?.match(\n    /^Swapped (\\d+) ([\\S]+) for (\\d+) ([\\S]+)/,\n  );\n  if (!Array.isArray(log)) {\n    return null;\n  }\n\n  if (log?.length === 0) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n      <span className=\"font-bold px-1\">Swap </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            network: props.network,\n            contract: log[2],\n            amount: log[1],\n            ownerId: props.ownerId,\n          }}\n        />\n      }\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            network: props.network,\n            contract: log[4].replace(/,$/, ''),\n            amount: log[3],\n            ownerId: props.ownerId,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a href=\"/address/v2.ref-finance.near\" className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Ref Finance\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\n\n\nconst RefContract = (props) => {\n  return (\n    <Swap event={props.event} network={props.network} ownerId={props.ownerId} />\n  );\n};\n\nconst DepositToReserve = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  const log = props.event?.[0];\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">Deposit To Reserve </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        From{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst Deposit = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  const log = props.event?.[0];\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">Deposit </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        From{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst WithdrawSucceeded = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const log = props.event?.[0];\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n      <span className=\"font-bold px-1\">Withdraw </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        To{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst IncreaseCollateral = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  const log = props.event?.[0];\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">Increase Collateral </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        From{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst DescreaseCollateral = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  const log = props.event?.[0];\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">Decrease Collateral </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        From{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst Borrow = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n\n  const log = props.event?.[0];\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n      <span className=\"font-bold px-1\">Borrow </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        To{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst Repay = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  const log = props.event?.[0];\n\n  if (!log?.token_id || !log?.account_id || !log?.amount) return null;\n\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">Repay </span>\n      {\n        <Widget\n          src={`${props.ownerId}/widget/bos-components.components.Shared.TokenInfo`}\n          props={{\n            contract: log.token_id,\n            amount: log.amount,\n            ownerId: props.ownerId,\n            network: props.network,\n            decimals: 18,\n          }}\n        />\n      }\n      <span className=\"font-bold text-gray px-1\">\n        From{' '}\n        <a href={`/address/${log.account_id}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(log.account_id)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a\n          href=\"/address/contract.main.burrow.near\"\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal hover:no-underline\">\n            Burrow\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\n\n\n\n\n\n\n\nconst BurrowContract = (props) => {\n  let parsedEvent = {};\n\n  try {\n    parsedEvent = JSON.parse(props.event.logs.replace('EVENT_JSON:', ''));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if ('event' in parsedEvent) {\n    switch (parsedEvent.event) {\n      case 'deposit_to_reserve':\n        return (\n          <DepositToReserve\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'deposit':\n        return (\n          <Deposit\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'withdraw_succeeded':\n        return (\n          <WithdrawSucceeded\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'increase_collateral':\n        return (\n          <IncreaseCollateral\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'decrease_collateral':\n        return (\n          <DescreaseCollateral\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'borrow':\n        return (\n          <Borrow\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'repay':\n        return (\n          <Repay\n            event={parsedEvent.data}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n\n  return null;\n};\n\nconst EventLogs = (props) => {\n  const showContract = () => {\n    switch (props.event.contract) {\n      case 'wrap.near':\n      case 'wrap.testnet':\n        return (\n          <WrapContract\n            event={props.event}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'v2.ref-finance.near':\n        return (\n          <RefContract\n            event={props.event}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      case 'contract.main.burrow.near':\n      case 'contract.1638481328.burrow.testnet':\n        return (\n          <BurrowContract\n            event={props.event}\n            network={props.network}\n            ownerId={props.ownerId}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return <>{showContract()}</>;\n};/* END_INCLUDE COMPONENT: \"includes/Common/Action/index.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Actions.jsx\" */\nconst CreateAccount = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">\n        Create Account{' '}\n        <a href={`/address/${props.action.to}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(props.action.to)}\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst DeleteAccount = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">\n        Delete Account{' '}\n        <a href={`/address/${props.action.to}`}>\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1\">\n            {shortenAddress(props.action.to)}\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst DeployContract = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">\n        Deploy Contract{' '}\n        <a href={`/address/${props.action.to}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(props.action.to)}\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst FunctionCall = (props) => {\n  const { shortenAddress } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">\n        Call{' '}\n        <span className=\"font-normal pl-1\">\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"bg-blue-900/10 text-xs text-nearblue-600 dark:text-neargray-10 rounded-xl px-2 py-1 max-w-[240px] inline-flex truncate\">\n                  <span className=\"block truncate\">\n                    {props.action.args.method_name}\n                  </span>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"center\"\n                side=\"bottom\"\n              >\n                {props.action.args.method_name}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        By{' '}\n        <a\n          href={`/address/${props.action.from}`}\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(props.action.from)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        On{' '}\n        <a href={`/address/${props.action.to}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(props.action.to)}\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\nconst Stake = (props) => {\n  const { yoctoToNear } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n      <span className=\"font-bold px-1\">\n        Stake{' '}\n        <span className=\"font-normal pl-1\">\n          {yoctoToNear(props.action.args.stake, true)} \u24c3\n        </span>\n      </span>\n    </div>\n  );\n};\nconst Transfer = (props) => {\n  const { shortenAddress, yoctoToNear } = VM.require(\n    `${props.ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const FaRight = (props) => {\n    return (\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        stroke-width=\"0\"\n        viewBox=\"0 0 192 512\"\n        className={props.className}\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n      </svg>\n    );\n  };\n  return (\n    <div className=\"action flex flex-wrap items-center break-all leading-7\">\n      <FaRight className=\"inline-flex text-gray-400 dark:text-neargray-10 text-xs\" />\n      <span className=\"font-bold px-1\">\n        Transfer{' '}\n        <span className=\"font-normal pl-1\">\n          {yoctoToNear(props.action.args.deposit, true)} \u24c3\n        </span>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        From{' '}\n        <a\n          href={`/address/${props.action.from}`}\n          className=\"hover:no-underline\"\n        >\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(props.action.from)}\n          </a>\n        </a>\n      </span>\n      <span className=\"font-bold text-gray px-1\">\n        To{' '}\n        <a href={`/address/${props.action.to}`} className=\"hover:no-underline\">\n          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n            {shortenAddress(props.action.to)}\n          </a>\n        </a>\n      </span>\n    </div>\n  );\n};\n\nconst Actions = (props) => {\n  const showAction = () => {\n    switch (props.action.action_kind) {\n      case 'CreateAccount':\n        return <CreateAccount action={props.action} ownerId={props.ownerId} />;\n      case 'DeleteAccount':\n        return <DeleteAccount action={props.action} ownerId={props.ownerId} />;\n      case 'DeployContract':\n        return <DeployContract action={props.action} ownerId={props.ownerId} />;\n      case 'FunctionCall':\n        return <FunctionCall action={props.action} ownerId={props.ownerId} />;\n      case 'Stake':\n        return <Stake action={props.action} ownerId={props.ownerId} />;\n      case 'Transfer':\n        return <Transfer action={props.action} ownerId={props.ownerId} />;\n      default:\n        return null;\n    }\n  };\n\n  return <>{showAction()}</>;\n};/* END_INCLUDE COMPONENT: \"includes/Common/Actions.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Question.jsx\" */\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Question.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\nconst FaCheckCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"\n        fill=\"#50C878\"\n      />\n    </svg>\n  );\n};\nconst FaTimesCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z\"\n        fill=\"#ff0000\"\n      />\n    </svg>\n  );\n};\nconst FaHourglassStart = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 384 512\">\n      <path\n        d=\"M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM288 437v11H96V437c0-25.5 10.1-49.9 28.1-67.9L192 301.3l67.9 67.9c18 18 28.1 42.4 28.1 67.9z\"\n        fill=\"#FFEB3B\"\n      />\n    </svg>\n  );\n};\n\nconst getOptions = (status) => {\n  switch (status) {\n    case null:\n      return {\n        bg: 'bg-yellow-50 dark:bg-black',\n        text: 'text-yellow-500',\n        icon: FaHourglassStart,\n        label: 'Pending',\n      };\n    case false:\n      return {\n        bg: 'bg-red-50 dark:bg-black',\n        text: 'text-red-500',\n        icon: FaTimesCircle,\n        label: 'Failure',\n      };\n\n    default:\n      return {\n        bg: 'bg-emerald-50 dark:bg-black',\n        text: 'text-emerald-500',\n        icon: FaCheckCircle,\n        label: 'Success',\n      };\n  }\n};\n\nconst TxnStatus = (props) => {\n  const option = getOptions(props.status);\n  const Icon = option.icon;\n\n  return (\n    <div className=\"w-full md:w-3/4 break-words\">\n      <span\n        className={`inline-flex items-center text-xs rounded py-1 ${\n          option.bg\n        } ${option.text} ${props.showLabel ? ' px-2' : ' px-1'}`}\n      >\n        <Icon />\n        {props.showLabel && <span className=\"ml-2\">{option.label}</span>}\n      </span>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/ArrowUp.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowUp.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FaRight.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst FaRight = (props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 192 512\"\n      className={props.className}\n      height=\"1em\"\n      width=\"1em\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path>\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaRight.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent(props) {\n  const { loading, txn, network, t, rpcTxn, ownerId } = props;\n\n  const {\n    convertToMetricPrefix,\n    convertToUTC,\n    dollarFormat,\n    gasPercentage,\n    getTimeAgoString,\n    localFormat,\n    shortenToken,\n    shortenTokenSymbol,\n  } = VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  const {\n    fiatValue,\n    getConfig,\n    handleRateLimit,\n    nanoToMilli,\n    shortenAddress,\n    yoctoToNear,\n  } = VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const { tokenAmount, txnActions, txnErrorMessage, txnLogs } = VM.require(\n    `${ownerId}/widget/includes.Utils.near`,\n  );\n\n  const [isContract, setIsContract] = useState(false);\n  const [statsData, setStatsData] = useState({} );\n  const [price, setPrice] = useState('');\n  const [more, setMore] = useState(false);\n\n  const { fts, nfts } = useMemo(() => {\n    function tokensTransfers(receipts) {\n      let fts = [];\n      let nfts = [];\n\n      receipts &&\n        receipts.forEach(\n          (receipt) =>\n            receipt?.fts?.forEach((ft) => {\n              if (ft.ft_meta && ft.cause === 'TRANSFER') {\n                if (ft.ft_meta && Number(ft.delta_amount) < 0) fts.push(ft);\n              } else {\n                if (ft.ft_meta) fts.push(ft);\n              }\n            }),\n        );\n      receipts &&\n        receipts.forEach(\n          (receipt) =>\n            receipt?.nfts?.forEach((nft) => {\n              if (\n                nft.nft_meta &&\n                nft.nft_token_meta &&\n                nft.cause === 'TRANSFER'\n              ) {\n                if (\n                  nft.nft_meta &&\n                  nft.nft_token_meta &&\n                  Number(nft.delta_amount) < 0\n                )\n                  nfts.push(nft);\n              } else {\n                if (nft.nft_meta && nft.nft_token_meta) nfts.push(nft);\n              }\n            }),\n        );\n\n      return {\n        fts,\n        nfts,\n      };\n    }\n\n    if (txn?.receipts?.length) {\n      return tokensTransfers(txn.receipts);\n    }\n\n    return { fts: [], nfts: [] };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [txn]);\n\n  function absoluteValue(number) {\n    return new Big(number).abs().toString();\n  }\n\n  const config = getConfig ? getConfig(network) : '';\n\n  useEffect(() => {\n    function fetchStatsDatas() {\n      if (txn) {\n        asyncFetch(`${config.backendUrl}stats`)\n          .then(\n            (res\n\n\n\n\n) => {\n              const resp = res?.body?.stats?.[0];\n              if (res.status === 200) {\n                setStatsData(resp);\n              } else {\n                handleRateLimit(res, fetchStatsDatas);\n              }\n            },\n          )\n          .catch(() => {});\n      }\n    }\n\n    if (config.backendUrl) {\n      fetchStatsDatas();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [txn, config.backendUrl]);\n\n  const toggleContent = () => {\n    setMore((prevState) => !prevState);\n  };\n  const currentPrice = statsData?.near_price || 0;\n\n  const date = useMemo(() => {\n    if (txn?.block_timestamp) {\n      const timestamp = new Date(nanoToMilli(txn?.block_timestamp));\n      function fetchPriceAtDate(date) {\n        asyncFetch(`${config.backendUrl}stats/price?date=${date}`).then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.stats[0];\n            if (data.status === 200) {\n              setPrice(resp?.near_price);\n            } else {\n              handleRateLimit(data, () => fetchPriceAtDate(date));\n            }\n          },\n        );\n      }\n      const currentDate = new Date();\n      const currentDay = currentDate.getUTCDate();\n      const currentMonth = currentDate.getUTCMonth() + 1;\n      const currentYear = currentDate.getUTCFullYear();\n\n      const currentDt = `${currentYear}-${\n        currentMonth < 10 ? '0' : ''\n      }${currentMonth}-${currentDay < 10 ? '0' : ''}${currentDay}`;\n\n      const day = timestamp.getUTCDate();\n      const month = timestamp.getUTCMonth() + 1;\n      const year = timestamp.getUTCFullYear();\n\n      const blockDt = `${year}-${month < 10 ? '0' : ''}${month}-${\n        day < 10 ? '0' : ''\n      }${day}`;\n\n      if (currentDt > blockDt) {\n        fetchPriceAtDate(blockDt);\n\n        return blockDt;\n      }\n    }\n    return;\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [txn?.block_timestamp]);\n\n  const [logs, actions, errorMessage] = useMemo(() => {\n    if (rpcTxn) {\n      return [\n        txnLogs && txnLogs(rpcTxn),\n        txnActions && txnActions(rpcTxn),\n        txnErrorMessage && txnErrorMessage(rpcTxn),\n      ];\n    }\n    return [[], [], undefined];\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rpcTxn]);\n\n  const Loader = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 dark:bg-black-200 h-5 rounded shadow-sm animate-pulse ${props.className} ${props.wrapperClassName}`}\n      ></div>\n    );\n  };\n\n  useEffect(() => {\n    if (txn?.receiver_account_id) {\n      asyncFetch(`${config.backendUrl}account/${txn.receiver_account_id}`).then(\n        (data\n\n\n\n\n) => {\n          const resp = data?.body?.account?.[0];\n          setIsContract(resp?.code_hash !== '11111111111111111111111111111111');\n        },\n      );\n    }\n  }, [txn, config.backendUrl]);\n\n  return (\n    <div className=\"text-sm text-nearblue-600 dark:text-neargray-10 divide-solid divide-gray-200 dark:divide-black-200 divide-y\">\n      <div className=\"text-sm text-nearblue-600 dark:text-neargray-10\">\n        {network === 'testnet' && (\n          <div className=\"flex flex-wrap p-4 text-red-500\">\n            {t\n              ? t('txns:testnetNotice')\n              : '[ This is a Testnet transaction only ]'}\n          </div>\n        )}\n\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.hash.tooltip')\n                    : 'Unique identifier (hash) of this transaction.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.hash.text.0') : 'Txn Hash'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 font-semibold break-words\">\n              {txn?.transaction_hash ? txn?.transaction_hash : ''}\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap items-start p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.status.tooltip')\n                    : 'The status of the transaction.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.status.text.0') : 'Status'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">\n              {txn?.outcomes?.status !== undefined && (\n                <TxnStatus showLabel status={txn?.outcomes?.status} />\n              )}\n              {errorMessage && (\n                <div className=\"text-xs bg-orange-50 my-2 rounded-md text-left px-2 py-1\">\n                  {errorMessage}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.block.tooltip')\n                    : 'The number of the block in which the transaction was recorded.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.block.text.0') : 'Block Height'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-14\" />\n            </div>\n          ) : txn ? (\n            <div className=\"w-full md:w-3/4 font-semibold break-words\">\n              <Link\n                href={`/blocks/${txn?.included_in_block_hash}`}\n                className=\"hover:no-underline\"\n              >\n                <a className=\"text-green-500 dark:text-green-250 hover:no-underline\">\n                  {txn?.block?.block_height\n                    ? localFormat(txn?.block?.block_height)\n                    : txn?.block?.block_height ?? ''}\n                </a>\n              </Link>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.timestamp.tooltip')\n                    : 'Timestamp of when this transaction was submitted.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.timestamp.text.0') : 'Timestamp'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-sm\" />\n            </div>\n          ) : txn ? (\n            <div className=\"w-full md:w-3/4 break-words\">\n              {`${getTimeAgoString(\n                nanoToMilli(txn?.block_timestamp),\n              )} (${convertToUTC(\n                nanoToMilli(txn?.block_timestamp),\n                true,\n              )} +UTC)`}\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  The shard number in which the transaction was executed in\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            Shard Number\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-sm\" />\n            </div>\n          ) : txn ? (\n            <div className=\"w-full md:w-3/4 break-words\">{txn?.shard_id}</div>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n      {(actions?.length > 0 || logs?.length > 0) && (\n        <div\n          id=\"action-row\"\n          className=\"bg-white dark:bg-black-600 text-sm text-nearblue-600 dark:text-neargray-10\"\n        >\n          <div className=\"flex items-start flex-wrap p-4\">\n            <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0 leading-7\">\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <div>\n                      <Question className=\"w-4 h-4 fill-current mr-1\" />\n                    </div>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    Highlighted events of the transaction\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n              Transaction Actions\n            </div>\n            {loading ? (\n              <div className=\"w-full md:w-3/4\">\n                <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n              </div>\n            ) : (\n              <div className=\"w-full md:w-3/4\">\n                <ScrollArea.Root className=\"w-full h-full rounded overflow-hidden bg-white dark:bg-black-600\">\n                  <ScrollArea.Viewport className=\"w-full h-full rounded\">\n                    <div\n                      id=\"action-column\"\n                      className=\"max-h-[194px] break-words space-y-2\"\n                    >\n                      {logs?.map((event, i) => (\n                        <EventLogs\n                          key={i}\n                          event={event}\n                          network={network}\n                          ownerId={ownerId}\n                        />\n                      ))}\n                      {actions?.map((action, i) => (\n                        <Actions key={i} action={action} ownerId={ownerId} />\n                      ))}\n                    </div>\n                  </ScrollArea.Viewport>\n                  <ScrollArea.Scrollbar\n                    className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n                    orientation=\"vertical\"\n                  >\n                    <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-200 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n                  </ScrollArea.Scrollbar>\n                  <ScrollArea.Scrollbar\n                    className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n                    orientation=\"horizontal\"\n                  >\n                    <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-600 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n                  </ScrollArea.Scrollbar>\n                  <ScrollArea.Corner className=\"bg-neargray-50\" />\n                </ScrollArea.Root>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      <div className=\"bg-white dark:bg-black-600 text-sm text-nearblue-600 dark:text-neargray-10\">\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.from.tooltip')\n                    : 'Account that signed and sent the transaction'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.from.text.0') : 'From'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-all\">\n              <Link\n                href={`/address/${txn?.signer_account_id}`}\n                className=\"hover:no-underline\"\n              >\n                <a className=\"text-green-500  dark:text-green-250 hover:no-underline\">\n                  {txn?.signer_account_id}\n                </a>\n              </Link>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.to.tooltip')\n                    : 'Account receiving the transaction.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {isContract\n              ? 'Interacted With (To)'\n              : t\n              ? t('txns:txn.to.text.0')\n              : 'To'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-all\">\n              <Link\n                href={`/address/${txn?.receiver_account_id}`}\n                className=\"hover:no-underline\"\n              >\n                <a className=\"text-green-500 dark:text-green-250 hover:no-underline\">\n                  {txn?.receiver_account_id}\n                </a>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n      {(fts?.length > 0 || nfts?.length > 0) && (\n        <div className=\"flex items-start flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0 leading-7\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  List of tokens transferred in the transaction\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            Tokens Transferred\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n            </div>\n          ) : (\n            <div className=\"relative w-full md:w-3/4\">\n              <ScrollArea.Root className=\"w-full h-full rounded overflow-hidden bg-white dark:bg-black-600\">\n                <ScrollArea.Viewport className=\"w-full h-full rounded\">\n                  <div className=\"max-h-[302px] break-words space-y-3\">\n                    {fts?.map((ft) => (\n                      <div\n                        className=\"flex items-center flex-wrap break-all leading-7\"\n                        key={ft?.key}\n                      >\n                        <FaRight className=\"inline-flex text-gray-400 text-xs\" />\n                        {ft?.cause === 'MINT' ? (\n                          <>\n                            <div className=\"font-semibold text-gray px-1\">\n                              From{' '}\n                              {ft?.involved_account_id ? (\n                                <Link\n                                  href={`/address/${ft?.involved_account_id}`}\n                                  className=\"hover:no-underline\"\n                                >\n                                  <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n                                    {shortenAddress(\n                                      ft?.involved_account_id ?? '',\n                                    )}\n                                  </a>\n                                </Link>\n                              ) : (\n                                <span className=\"font-normal pl-1\">system</span>\n                              )}\n                            </div>\n                            <div className=\"font-semibold text-gray px-1\">\n                              To{' '}\n                              {ft?.affected_account_id ? (\n                                <Link\n                                  href={`/address/${ft?.affected_account_id}`}\n                                  className=\"hover:no-underline\"\n                                >\n                                  <a className=\"text-green-500 dark:text-green-250 font-normal pl-1\">\n                                    {shortenAddress(\n                                      ft?.affected_account_id ?? '',\n                                    )}\n                                  </a>\n                                </Link>\n                              ) : (\n                                <span className=\"font-normal pl-1\">system</span>\n                              )}\n                            </div>\n                          </>\n                        ) : (\n                          <>\n                            <div className=\"font-semibold text-gray px-1\">\n                              From{' '}\n                              {ft?.affected_account_id ? (\n                                <Link\n                                  href={`/address/${ft?.affected_account_id}`}\n                                  className=\"hover:no-underline\"\n                                >\n                                  <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n                                    {shortenAddress(\n                                      ft?.affected_account_id ?? '',\n                                    )}\n                                  </a>\n                                </Link>\n                              ) : (\n                                <span className=\"font-normal pl-1\">system</span>\n                              )}\n                            </div>\n                            <div className=\"font-semibold text-gray px-1\">\n                              To{' '}\n                              {ft?.involved_account_id ? (\n                                <Link\n                                  href={`/address/${ft?.involved_account_id}`}\n                                  className=\"hover:no-underline\"\n                                >\n                                  <a className=\"text-green-500 dark:text-green-250 font-normal pl-1\">\n                                    {shortenAddress(\n                                      ft?.involved_account_id ?? '',\n                                    )}\n                                  </a>\n                                </Link>\n                              ) : (\n                                <span className=\"font-normal pl-1\">system</span>\n                              )}\n                            </div>\n                          </>\n                        )}\n                        <div className=\"font-semibold text-gray px-1\">\n                          For{' '}\n                          <span className=\"pl-1 font-normal\">\n                            {ft?.delta_amount &&\n                            ft?.ft_meta?.decimals &&\n                            tokenAmount\n                              ? tokenAmount(\n                                  absoluteValue(ft?.delta_amount),\n                                  ft?.ft_meta?.decimals,\n                                  true,\n                                )\n                              : ''}\n                          </span>\n                        </div>\n                        <Link\n                          href={`/token/${ft?.ft_meta?.contract}`}\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"text-green dark:text-green-250 flex items-center hover:no-underline\">\n                            <TokenImage\n                              src={ft?.ft_meta?.icon}\n                              alt={ft?.ft_meta?.name}\n                              appUrl={config?.appUrl}\n                              className=\"w-4 h-4 mx-1\"\n                            />\n                            {shortenToken(ft?.ft_meta?.name ?? '')}\n                            <span>\n                              {`(${shortenTokenSymbol(\n                                ft?.ft_meta?.symbol ?? '',\n                              )})`}\n                            </span>\n                          </a>\n                        </Link>\n                      </div>\n                    ))}\n                    {nfts?.map((nft) => (\n                      <div className=\"flex\" key={nft?.key}>\n                        <div className=\"flex justify-start items-start\">\n                          <FaRight className=\"inline-flex text-gray-400 text-xs mt-1\" />\n                          <div className=\"flex flex-wrap\">\n                            <div>\n                              <div className=\"sm:flex\">\n                                {nft?.cause === 'MINT' ? (\n                                  <>\n                                    <div className=\"font-semibold text-gray px-1\">\n                                      From{' '}\n                                      {nft?.involved_account_id ? (\n                                        <Link\n                                          href={`/address/${nft?.involved_account_id}`}\n                                          className=\"hover:no-underline\"\n                                        >\n                                          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n                                            {shortenAddress(\n                                              nft?.involved_account_id ?? '',\n                                            )}\n                                          </a>\n                                        </Link>\n                                      ) : (\n                                        <span className=\"font-normal pl-1\">\n                                          system\n                                        </span>\n                                      )}\n                                    </div>\n                                    <div className=\"font-semibold text-gray px-1\">\n                                      To{' '}\n                                      {nft?.affected_account_id ? (\n                                        <Link\n                                          href={`/address/${nft?.affected_account_id}`}\n                                          className=\"hover:no-underline\"\n                                        >\n                                          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n                                            {shortenAddress(\n                                              nft?.affected_account_id ?? '',\n                                            )}\n                                          </a>\n                                        </Link>\n                                      ) : (\n                                        <span className=\"font-normal pl-1\">\n                                          system\n                                        </span>\n                                      )}\n                                    </div>\n                                  </>\n                                ) : (\n                                  <>\n                                    <div className=\"font-semibold text-gray px-1\">\n                                      From{' '}\n                                      {nft?.affected_account_id ? (\n                                        <Link\n                                          href={`/address/${nft?.affected_account_id}`}\n                                          className=\"hover:no-underline\"\n                                        >\n                                          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n                                            {shortenAddress(\n                                              nft?.affected_account_id ?? '',\n                                            )}\n                                          </a>\n                                        </Link>\n                                      ) : (\n                                        <span className=\"font-normal pl-1\">\n                                          system\n                                        </span>\n                                      )}\n                                    </div>\n                                    <div className=\"font-semibold text-gray px-1\">\n                                      To{' '}\n                                      {nft?.involved_account_id ? (\n                                        <Link\n                                          href={`/address/${nft?.involved_account_id}`}\n                                          className=\"hover:no-underline\"\n                                        >\n                                          <a className=\"text-green-500 dark:text-green-250 font-normal pl-1 hover:no-underline\">\n                                            {shortenAddress(\n                                              nft?.involved_account_id ?? '',\n                                            )}\n                                          </a>\n                                        </Link>\n                                      ) : (\n                                        <span className=\"font-normal pl-1\">\n                                          system\n                                        </span>\n                                      )}\n                                    </div>\n                                  </>\n                                )}\n                              </div>\n                              <div className=\"sm:flex mt-1\">\n                                <div className=\"text-gray px-1\">\n                                  <span className=\"text-gray-400\">For </span>\n                                  <span className=\"pl-1 font-normal\">\n                                    NFT Token ID [\n                                    <Link\n                                      href={`/nft-token/${nft?.nft_meta?.contract}/${nft?.token_id}`}\n                                      className=\"hover:no-underline\"\n                                    >\n                                      <a className=\"text-green hover:no-underline dark:text-green-250\">\n                                        {shortenToken(nft?.token_id ?? '')}\n                                      </a>\n                                    </Link>\n                                    ]\n                                  </span>\n                                </div>\n                                <Link\n                                  href={`/nft-token/${nft?.nft_meta?.contract}`}\n                                  className=\"hover:no-underline\"\n                                >\n                                  <a className=\"text-green flex items-center hover:no-underline dark:text-green-250\">\n                                    <TokenImage\n                                      src={nft?.nft_meta?.icon}\n                                      alt={nft?.nft_meta?.name}\n                                      appUrl={config?.appUrl}\n                                      className=\"w-4 h-4 mx-1\"\n                                    />\n                                    {shortenToken(nft?.nft_meta?.name ?? '')}\n                                    <span>\n                                      &nbsp;\n                                      {`(${shortenTokenSymbol(\n                                        nft?.nft_meta?.symbol ?? '',\n                                      )})`}\n                                    </span>\n                                  </a>\n                                </Link>\n                              </div>\n                            </div>\n                            <div className=\"border rounded ml-2 w-11 h-11 p-1\">\n                              <Link\n                                href={`/nft-token/${nft?.nft_meta?.contract}/${nft?.token_id}`}\n                                className=\"hover:no-underline\"\n                              >\n                                <a>\n                                  {\n                                    <Widget\n                                      src={`${ownerId}/widget/bos-components.components.Shared.NFTImage`}\n                                      props={{\n                                        base: nft?.nft_meta?.base_uri,\n                                        media: nft?.nft_token_meta?.media,\n                                        reference:\n                                          nft?.nft_meta?.reference ||\n                                          nft?.nft_token_meta?.reference,\n                                        alt: nft?.nft_token_meta?.title,\n                                        className: 'max-h-full rounded',\n                                        network: network,\n                                        ownerId,\n                                      }}\n                                    />\n                                  }\n                                </a>\n                              </Link>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea.Viewport>\n                <ScrollArea.Scrollbar\n                  className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n                  orientation=\"vertical\"\n                >\n                  <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-200 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n                </ScrollArea.Scrollbar>\n                <ScrollArea.Scrollbar\n                  className=\"flex select-none touch-none p-0.5 bg-neargray-25 dark:bg-black-600 transition-colors duration-[160ms] ease-out hover:bg-neargray-25 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n                  orientation=\"horizontal\"\n                >\n                  <ScrollArea.Thumb className=\"flex-1 bg-neargray-50 dark:bg-black-600 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\" />\n                </ScrollArea.Scrollbar>\n                <ScrollArea.Corner className=\"bg-neargray-50\" />\n              </ScrollArea.Root>\n            </div>\n          )}\n        </div>\n      )}\n      <div className=\"bg-white dark:bg-black-600 text-sm text-nearblue-600 dark:text-neargray-10\">\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <div>\n                    <Question className=\"w-4 h-4 fill-current mr-1\" />\n                  </div>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.deposit.tooltip')\n                    : 'Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s), and as deposits on Function Call action(s).'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.deposit.text.0') : 'Deposit Value'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span>\n                      {txn.actions_agg?.deposit\n                        ? yoctoToNear(txn.actions_agg?.deposit, true)\n                        : txn.actions_agg?.deposit ?? ''}{' '}\n                      \u24c3\n                      {currentPrice && network === 'mainnet'\n                        ? ` ($${fiatValue(\n                            yoctoToNear(txn.actions_agg?.deposit ?? 0, false),\n                            currentPrice,\n                          )})`\n                        : ''}\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {t\n                      ? t('txns:txn.deposit.tooltip')\n                      : 'Sum of all NEAR tokens transferred from the Signing account to the Receiver account. This includes tokens sent in a Transfer action(s), and as deposits on Function Call action(s).'}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <Question className=\"w-4 h-4 fill-current mr-1\" />\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.fee.tooltip')\n                    : 'Total fee paid in NEAR to execute this transaction.'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.fee.text.0') : 'Transaction fee'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">\n              {txn?.outcomes_agg?.transaction_fee\n                ? yoctoToNear(txn?.outcomes_agg?.transaction_fee, true)\n                : txn?.outcomes_agg?.transaction_fee ?? ''}{' '}\n              \u24c3\n              {currentPrice && network === 'mainnet'\n                ? ` ($${fiatValue(\n                    yoctoToNear(txn.outcomes_agg?.transaction_fee ?? 0, false),\n                    currentPrice,\n                  )})`\n                : ''}\n            </div>\n          )}\n        </div>\n      </div>\n      {network === 'mainnet' && date && (\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <Question className=\"w-4 h-4 fill-current mr-1\" />\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {t\n                    ? t('txns:txn.price.tooltip')\n                    : 'Closing price of \u24c3 on date of transaction'}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n            {t ? t('txns:txn.price.text.0') : '\u24c3 Price'}\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-32\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">\n              {price ? `$${dollarFormat(price)} / \u24c3` : 'N/A'}\n            </div>\n          )}\n        </div>\n      )}\n\n      <Accordion.Root\n        type=\"single\"\n        className=\"text-sm text-nearblue-600 dark:text-neargray-10 divide-solid divide-gray-200 divide-y border-b\"\n        defaultValue={more ? 'item-1' : undefined}\n        collapsible\n      >\n        <Accordion.Item value=\"item-1\">\n          <Accordion.Header data-orientation=\"vertical\">\n            <div className=\"flex flex-wrap p-4\">\n              <Accordion.Trigger asChild onClick={toggleContent}>\n                {!more ? (\n                  <span className=\"text-green-500 dark:text-green-250 flex items-center cursor-pointer\">\n                    Click to see more <ArrowDown className=\"fill-current\" />\n                  </span>\n                ) : (\n                  <span className=\"text-green-500 dark:text-green-250 flex items-center cursor-pointer\">\n                    Click to see less <ArrowUp className=\"fill-current\" />\n                  </span>\n                )}\n              </Accordion.Trigger>\n            </div>\n          </Accordion.Header>\n          <Accordion.Content>\n            <div>\n              <div className=\"flex flex-wrap p-4\">\n                <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n                  <Tooltip.Provider>\n                    <Tooltip.Root>\n                      <Tooltip.Trigger asChild>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </Tooltip.Trigger>\n                      <Tooltip.Content\n                        className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                        align=\"start\"\n                        side=\"bottom\"\n                      >\n                        {t\n                          ? t('txns:txn.gas.tooltip')\n                          : 'Maximum amount of gas allocated for the transaction & the amount eventually used.'}\n                      </Tooltip.Content>\n                    </Tooltip.Root>\n                  </Tooltip.Provider>\n                  {t ? t('txns:txn.gas.text.0') : 'Gas Limit & Usage by Txn'}\n                </div>\n                {loading ? (\n                  <div className=\"w-full md:w-3/4\">\n                    <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n                  </div>\n                ) : (\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {convertToMetricPrefix(\n                      txn?.actions_agg?.gas_attached ?? 0,\n                    ) + 'gas'}\n                    <span className=\"text-gray-300 px-1\">|</span>\n                    {convertToMetricPrefix(txn?.outcomes_agg?.gas_used ?? 0)}gas\n                    {`(${gasPercentage(\n                      txn?.outcomes_agg?.gas_used ?? 0,\n                      txn?.actions_agg?.gas_attached ?? 0,\n                    )})`}\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-wrap p-4\">\n                <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n                  <Tooltip.Provider>\n                    <Tooltip.Root>\n                      <Tooltip.Trigger asChild>\n                        <Question className=\"w-4 h-4 fill-current mr-1\" />\n                      </Tooltip.Trigger>\n                      <Tooltip.Content\n                        className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\"\n                        align=\"start\"\n                        side=\"bottom\"\n                      >\n                        {t\n                          ? t('txns:txn.burnt.tooltip')\n                          : 'Total amount of Gas & Token burnt from this transaction.'}\n                      </Tooltip.Content>\n                    </Tooltip.Root>\n                  </Tooltip.Provider>\n                  {t ? t('txns:txn.burnt.text.0') : 'Burnt Gas & Tokens by Txn'}\n                </div>\n                {loading ? (\n                  <div className=\"w-full md:w-3/4\">\n                    <Loader wrapperClassName=\"flex w-full max-w-xs\" />\n                  </div>\n                ) : (\n                  <div className=\"w-full  text-xs items-center flex md:w-3/4 break-words\">\n                    <div className=\"bg-orange-50 dark:bg-black-200 rounded-md px-2 py-1\">\n                      <span className=\"text-xs mr-2\">\ud83d\udd25</span>\n                      {convertToMetricPrefix(\n                        txn.receipt_conversion_gas_burnt ?? 0,\n                      ) + 'gas'}\n                      <span className=\"text-gray-300 dark:text-neargray-10 px-1\">\n                        |\n                      </span>{' '}\n                      {txn.receipt_conversion_tokens_burnt\n                        ? yoctoToNear(txn.receipt_conversion_tokens_burnt, true)\n                        : txn.receipt_conversion_tokens_burnt ?? ''}{' '}\n                      \u24c3\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Accordion.Content>\n        </Accordion.Item>\n      </Accordion.Root>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.Detail", "fact_widget_deployments_id": "3ed6210b16b5d104ee2df4f309a155ec", "inserted_timestamp": "2024-04-29T14:40:45.686Z", "modified_timestamp": "2024-04-29T14:40:45.686Z", "__row_index": 11}