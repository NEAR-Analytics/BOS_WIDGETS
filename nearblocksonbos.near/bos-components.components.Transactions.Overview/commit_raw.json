{"tx_hash": "EbYiSBejVa2xoWviprrceoKChwA4rDEgq4XXUbE84Tb3", "action_id_social": "5ksxvxXSWRPwTZ179Qfa7CUC9E8YcKGVf4aVY5t1A2X7-0-widget", "block_id": 116955768, "block_timestamp": "2024-04-16T08:24:22.912Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.Overview", "source_code": "/**\n * Component: TransactionsOverview\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Transactions Overview.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\n\n\n\n\n\n\nfunction MainComponent({ network, t, ownerId, theme }) {\n  const { currency, dollarFormat, formatCustomDate, localFormat } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const { gasPrice } = VM.require(`${ownerId}/widget/includes.Utils.near`);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState({} );\n  const [charts, setCharts] = useState([]);\n  const [chartConfig, setChartConfig] = useState(\n    {} ,\n  );\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    let delay = 15000;\n\n    function fetchStats() {\n      asyncFetch(`${config?.backendUrl}stats`)\n        .then((data) => {\n          const resp = data?.body?.stats?.[0];\n          if (data.status === 200) {\n            setStats({\n              avg_block_time: resp.avg_block_time,\n              block: resp.block,\n              change_24: resp.change_24,\n              gas_price: resp.gas_price,\n              high_24h: resp.high_24h,\n              high_all: resp.high_all,\n              low_24h: resp.low_24h,\n              low_all: resp.low_all,\n              market_cap: resp.market_cap,\n              near_btc_price: resp.near_btc_price,\n              near_price: resp.near_price,\n              nodes: resp.nodes,\n              nodes_online: resp.nodes_online,\n              total_supply: resp.total_supply,\n              total_txns: resp.total_txns,\n              volume: resp.volume,\n            });\n            if (isLoading) setIsLoading(false);\n          } else {\n            handleRateLimit(data, fetchStats, () => {\n              if (isLoading) setIsLoading(false);\n            });\n          }\n        })\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchStats();\n    }\n    const interval = setInterval(fetchStats, delay);\n\n    return () => clearInterval(interval);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, isLoading]);\n\n  useEffect(() => {\n    function fetchChartData() {\n      asyncFetch(`${config?.backendUrl}charts/latest`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.charts;\n            if (data.status === 200) {\n              setCharts(resp);\n            } else {\n              handleRateLimit(data, fetchChartData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchChartData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.backendUrl]);\n\n  const chartData = useMemo(() => {\n    try {\n      const series = charts?.map((stat) => ({\n        y: Number(stat.txns),\n        date: stat.date,\n        price: stat.near_price,\n      }));\n      series.sort(\n        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),\n      );\n      const categories = series.map((stat) => formatCustomDate(stat.date));\n      return {\n        series,\n        categories,\n      };\n    } catch (error) {\n      return {\n        series: [],\n        categories: [],\n      };\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [charts]);\n\n  useEffect(() => {\n    // Factory function to create the tooltip formatter\n\n    function fetchData() {\n      const fetchedData = {\n        chart: {\n          height: 110,\n          spacingTop: 10,\n          spacingBottom: 0,\n          spacingLeft: 0,\n          spacingRight: 10,\n          backgroundColor: 'transparent',\n        },\n        title: {\n          text: null,\n        },\n        xAxis: {\n          type: 'datetime',\n          lineWidth: 0,\n          tickLength: 0,\n          labels: {\n            step: 7,\n          },\n          categories: chartData.categories,\n        },\n        yAxis: {\n          gridLineWidth: 0,\n          title: {\n            text: null,\n          },\n        },\n        legend: {\n          enabled: false,\n        },\n        plotOptions: {\n          spline: {\n            lineWidth: 1,\n            states: {\n              hover: {\n                lineWidth: 1,\n              },\n            },\n            marker: {\n              radius: 0,\n            },\n          },\n        },\n        series: [\n          {\n            type: 'spline',\n            data: chartData.series,\n            color: '#80D1BF',\n          },\n        ] ,\n        exporting: {\n          enabled: false,\n        },\n        credits: {\n          enabled: false,\n        },\n      };\n      setChartConfig(fetchedData);\n    }\n\n    fetchData();\n  }, [chartData]);\n\n  const iframeSrc = `\n      <html>\n        <head>\n        <style>\n        body, html{\n          background-color: ${theme === 'dark' ? '#0D0D0D' : '#ffff'};\n        }\n        </style>\n          <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n          <script src=\"https://cdn.jsdelivr.net/npm/dayjs@1.10.4\"></script>\n          <script src=\"https://cdn.jsdelivr.net/npm/numeral@2.0.6/numeral.min.js\"></script>\n        </head>\n        <body>\n          <div id=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n          <script type=\"text/javascript\">\n            const chartConfig = ${JSON.stringify(chartConfig)};\n            chartConfig.tooltip = {\n              formatter: function () {\n                const item= this.point\n                function dollarFormat(value) {\n                  return numeral(value).format('0,0.00');\n                 }\n                 return \\`<span style=\"font-size:10px\">\\${dayjs(this.point.date).format(\n                   'dddd, MMMM DD, YYYY'\n                 )}</span><br/>Transactions: <strong>\\${dollarFormat(\n                 this.point.y\n               )}</strong><br/>Price: $\\${dollarFormat(this.point.price)}\n               \\`;\n              }\n            };\n            Highcharts.chart('chart-container', chartConfig);\n          </script>\n        </body>\n      </html>\n    `;\n  const nearPrice = stats?.near_price ?? '';\n  const nearBtcPrice = stats?.near_btc_price ?? '';\n  const change24 = stats?.change_24 ?? '';\n  return (\n    <div className=\"container mx-auto px-3\">\n      <div className=\"bg-white soft-shadow rounded-xl overflow-hidden px-5 md:py lg:px-0  dark:bg-black-600\">\n        <div\n          className={`grid grid-flow-col grid-cols-1 ${\n            network === 'mainnet'\n              ? 'grid-rows-3 lg:grid-cols-3'\n              : 'grid-rows-2 lg:grid-cols-2'\n          } lg:grid-rows-1 divide-y lg:divide-y-0 lg:divide-x lg:py-3 dark:divide-black-200`}\n        >\n          {network === 'mainnet' && (\n            <>\n              <div className=\"flex flex-col lg:flex-col lg:items-stretch divide-y lg:divide-y  lg:divide-x-0 dark:divide-black-200 md:pt-0 md:pb-0 md:px-5\">\n                <div className=\"flex flex-row py-5 lg:pb-5 lg:px-0\">\n                  <div className=\"items-center flex justify-left mr-3 \">\n                    <img\n                      src={`${'http://localhost:3002/'}images/${\n                        theme === 'dark'\n                          ? 'near price_dark.svg'\n                          : 'near price.svg'\n                      }`}\n                      alt={t ? t('home:nearPrice') : 'nearPrice'}\n                      width=\"24\"\n                      height=\"24\"\n                    />\n                  </div>\n                  <div className=\"ml-2\">\n                    <p className=\"uppercase font-semibold text-nearblue-600 text-sm \">\n                      {t ? t('home:nearPrice') : 'NEAR PRICE'}\n                    </p>\n                    {isLoading ? (\n                      <Skeleton className=\"my-1 h-4\" />\n                    ) : (\n                      <Link\n                        href=\"/charts/near-price\"\n                        className=\"hover:no-underline flex items-center\"\n                      >\n                        <a className=\"leading-6 text-nearblue-600 hover:no-underline px-1 \">\n                          {nearPrice ? '$' + dollarFormat(nearPrice) : ''}\n                          <span className=\"text-nearblue-700\">\n                            {nearBtcPrice\n                              ? '@ ' +\n                                localFormat(stats?.near_btc_price) +\n                                ' BTC'\n                              : ''}\n                          </span>\n                        </a>\n                        {change24 && (\n                          <>\n                            {Number(stats?.change_24) > 0 ? (\n                              <span className=\"text-neargreen text-sm\">\n                                {stats?.change_24\n                                  ? '(' + dollarFormat(stats?.change_24) + '%)'\n                                  : stats?.change_24 ?? ''}\n                              </span>\n                            ) : (\n                              <span className=\"text-red-500 text-sm\">\n                                {change24\n                                  ? '(' + dollarFormat(change24) + '%)'\n                                  : ''}\n                              </span>\n                            )}\n                          </>\n                        )}\n                      </Link>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-row py-5 lg:pt-5 lg:px-0\">\n                  <div className=\"items-center flex justify-left mr-3 \">\n                    <img\n                      src={`${'http://localhost:3002/'}images/${\n                        theme === 'dark' ? 'market_dark.svg' : 'market.svg'\n                      }`}\n                      alt={t ? t('home:marketCap') : 'marketCap'}\n                      width=\"24\"\n                      height=\"24\"\n                    />\n                  </div>\n                  <div className=\"ml-2\">\n                    <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                      {t ? t('home:marketCap') : ' MARKET CAP'}\n                    </p>\n                    {isLoading ? (\n                      <Skeleton className=\"my-1 h-4\" />\n                    ) : (\n                      <>\n                        <Link\n                          href=\"/charts/market-cap\"\n                          className=\"hover:no-underline\"\n                        >\n                          <a className=\"leading-6 text-nearblue-700 hover:no-underline\">\n                            {stats?.market_cap\n                              ? '$' + dollarFormat(stats?.market_cap ?? 0)\n                              : ''}\n                          </a>\n                        </Link>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n          <div className=\"flex flex-col lg:flex-col lg:items-stretch divide-y lg:divide-y lg:divide-x-0 dark:divide-black-200 md:pt-0 md:pb-0 md:px-5\">\n            <div className=\"flex flex-row justify-between py-5 lg:pb-5 lg:px-0\">\n              <div className=\"flex flex-row \">\n                <div className=\"items-center flex justify-left mr-3 \">\n                  <img\n                    src={`${'http://localhost:3002/'}images/${\n                      theme === 'dark'\n                        ? 'transactions_dark.svg'\n                        : 'transactions.svg'\n                    }`}\n                    alt={t ? t('home:transactions') : 'transactions'}\n                    width=\"24\"\n                    height=\"24\"\n                  />\n                </div>\n                <div className=\"ml-2\">\n                  <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                    {t ? t('home:transactions') : 'TRANSACTIONS'}\n                  </p>\n                  {isLoading ? (\n                    <Skeleton className=\"my-1 h-4\" />\n                  ) : (\n                    <p className=\"leading-6 text-nearblue-700\">\n                      {stats?.total_txns\n                        ? currency(stats?.total_txns)\n                        : stats?.total_txns ?? ''}\n                    </p>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex flex-col text-right\">\n                <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                  {' '}\n                  {t ? t('home:gasPrice') : 'GAS PRICE'}\n                </p>\n                {isLoading ? (\n                  <Skeleton className=\"my-1 h-4\" />\n                ) : (\n                  <p className=\"leading-6 text-nearblue-700\">\n                    {stats?.gas_price\n                      ? gasPrice(stats?.gas_price)\n                      : stats?.gas_price ?? ''}\n                  </p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex flex-row justify-between align-center py-5 lg:pt-5 lg:px-0\">\n              <div className=\"flex flex-row \">\n                <div className=\"items-center flex justify-left mr-3 \">\n                  <img\n                    src={`${'http://localhost:3002/'}images/${\n                      theme === 'dark' ? 'pickaxe_dark.svg' : 'pickaxe.svg'\n                    }`}\n                    alt={t ? t('home:activeValidator') : 'activeValidator'}\n                    width=\"24\"\n                    height=\"24\"\n                  />\n                </div>\n                <div className=\"ml-2\">\n                  <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                    <Link href=\"/node-explorer\" className=\"hover:no-underline\">\n                      {' '}\n                      {t ? t('home:activeValidator') : 'ACTIVE VALIDATORS'}{' '}\n                    </Link>\n                  </p>\n                  {isLoading ? (\n                    <Skeleton className=\"my-1 h-4\" />\n                  ) : (\n                    <Link href=\"/node-explorer\" className=\"hover:no-underline\">\n                      <a className=\"leading-6 text-nearblue-700 hover:no-underline\">\n                        {stats?.nodes_online\n                          ? localFormat(stats?.nodes_online)\n                          : stats?.nodes_online ?? ''}\n                      </a>\n                    </Link>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex flex-col text-right\">\n                <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                  {t ? t('home:avgBlockTime') : 'AVG. BLOCK TIME'}\n                </p>\n                {isLoading ? (\n                  <Skeleton className=\"my-1 h-4\" />\n                ) : (\n                  <Link href=\"/charts/blocks\" className=\"hover:no-underline\">\n                    <a className=\"leading-6 text-nearblue-700 hover:no-underline\">\n                      {stats?.avg_block_time\n                        ? stats?.avg_block_time + ' s'\n                        : ''}\n                    </a>\n                  </Link>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2 lg:col-span-1 flex flex-col lg:flex-col lg:items-stretch divide-y lg:divide-y lg:divide-x-0 dark:divide-black-200 md:pt-0 md:px-5\">\n            <div className=\"flex-1 py-5 lg:px-0\">\n              <p className=\"uppercase font-semibold text-nearblue-600 text-sm\">\n                {' '}\n                {t\n                  ? t('home:transactionHistory', { days: 14 })\n                  : 'NEAR TRANSACTION HISTORY IN 14 DAYS'}\n              </p>\n              <div className=\"mt-1 h-28 dark:bg-black-600\">\n                {chartData ? (\n                  <iframe\n                    allowTransparency={true}\n                    srcDoc={iframeSrc}\n                    style={{\n                      width: '100%',\n                      border: 'none',\n                      backgroundColor: theme === 'dark' ? '#0D0D0D' : '#ffff',\n                      paddingRight: '20px',\n                    }}\n                  />\n                ) : (\n                  <Skeleton className=\"h-28\" />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.Overview", "fact_widget_deployments_id": "fca8835c9f374acb9ddcdc19de762b78", "inserted_timestamp": "2024-04-16T09:49:24.281Z", "modified_timestamp": "2024-04-16T09:49:24.281Z", "__row_index": 38}