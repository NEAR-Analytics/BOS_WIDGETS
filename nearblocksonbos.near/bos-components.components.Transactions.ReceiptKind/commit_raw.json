{"tx_hash": "6haqica2nzCWoqo3NEco7Jo3QCqK2SoEGFsxoKTePdQp", "action_id_social": "BbG3HXi23MLden2kcCXh74igx98mByQW8Ggt6Hzwdyd4-0-widget", "block_id": 117368729, "block_timestamp": "2024-04-22T08:14:46.320Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Transactions.ReceiptKind", "source_code": "\n\n\n\n\n\n\n\n/* INCLUDE: \"includes/hexy.jsx\" */\nfunction hexy(buffer, config) {\n  const MAX_ADDRESS_LENGTH = 8;\n  const defaults = {\n    width: 16,\n    numbering: 'hex_bytes',\n    format: 'fours',\n    littleEndian: false,\n    radix: 16,\n    caps: 'lower',\n    annotate: 'ascii',\n    prefix: '',\n    indent: 0,\n    html: false,\n    offset: 0,\n    length: -1,\n    extendedChs: false,\n    display_offset: 0,\n  };\n  const options = { ...defaults, ...config };\n\n  let bufferData;\n  if (Buffer.isBuffer(buffer)) {\n    bufferData = buffer;\n  } else if (Array.isArray(buffer)) {\n    bufferData = Buffer.from(buffer);\n  } else {\n    throw new Error('Input must be a Buffer or an array of numbers.');\n  }\n\n  const {\n    width,\n    numbering,\n    format,\n    littleEndian,\n    radix,\n    annotate,\n    indent,\n    html,\n    offset,\n    length,\n    extendedChs,\n    display_offset,\n  } = options;\n\n  const prefixSpaces = ' '.repeat(indent);\n  const htmlOpenTag = html ? \"<div class='hexy'>\\n\" : '';\n  const htmlCloseTag = html ? '</div>\\n' : '';\n\n  const bufferSlice = bufferData.slice(\n    offset,\n    length === -1 ? undefined : offset + length,\n  );\n  let str = htmlOpenTag;\n  let addr = offset + display_offset;\n\n  const numGroups = Math.ceil(bufferSlice.length / width);\n\n  for (let group = 0; group < numGroups; group++) {\n    const startIndex = group * width;\n    const endIndex = Math.min(startIndex + width, bufferSlice.length);\n    const slice = bufferSlice.slice(startIndex, endIndex);\n\n    if (html) {\n      str += `<div class='${num2str(addr, MAX_ADDRESS_LENGTH, 16)}'>`;\n    }\n\n    str += `${prefixSpaces}${\n      numbering === 'hex_bytes'\n        ? num2str(addr, MAX_ADDRESS_LENGTH, 16) + ': '\n        : ''\n    }`;\n    str += hex(slice, width, format, radix, littleEndian);\n\n    if (annotate === 'ascii') {\n      str += ` ${\n        html\n          ? html_escape(getTextRepresentation(slice, extendedChs))\n          : ascii_escape(getTextRepresentation(slice, extendedChs))\n      }`;\n    }\n\n    str += html ? '</div>\\n' : '\\n';\n    addr += width;\n  }\n\n  str += htmlCloseTag;\n\n  return str;\n}\n\nfunction hex(\n  buffer,\n  width,\n  format,\n  radix,\n  littleEndian,\n) {\n  let str = '';\n  const delimiter = format === 'none' ? '' : ' ';\n  const group_len = maxnumberlen(format === 'none' ? 1 : 2, radix);\n  const padlen =\n    (width - buffer.length) *\n    (format === 'none' ? group_len : (group_len + 1) / 2);\n\n  const numGroups = Math.ceil(buffer.length / 2);\n\n  for (let group = 0; group < numGroups; ++group) {\n    const startIndex = group * 2;\n    const endIndex = Math.min(startIndex + 2, buffer.length);\n    const bytes = buffer.slice(startIndex, endIndex);\n\n    if (bytes.length === 0) break;\n\n    if (bytes.length === 2) {\n      let val = littleEndian ? bytes.readUInt16LE(0) : bytes.readUInt16BE(0);\n      const text = val.toString(radix);\n      str += '0'.repeat(group_len - text.length) + text;\n      str += delimiter;\n    } else {\n      str += '0'.repeat(group_len);\n      str += delimiter;\n    }\n  }\n\n  if (buffer.length < width) {\n    str += ' '.repeat(padlen);\n  }\n\n  return str;\n}\n\nfunction num2str(b, len, radix) {\n  const s = b.toString(radix);\n  return '0'.repeat(len - s.length) + s;\n}\n\nfunction maxnumberlen(bytes, radix) {\n  let result = 2;\n  if (bytes === 0) {\n    bytes = 1;\n  }\n  switch (radix) {\n    case 2:\n      result = bytes * 8;\n      break;\n    case 8:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 11;\n          break;\n        case 8:\n          result = 22;\n          break;\n      }\n      break;\n    case 10:\n      switch (bytes) {\n        case 1:\n          result = 3;\n          break;\n        case 2:\n          result = 6;\n          break;\n        case 4:\n          result = 10;\n          break;\n        case 8:\n          result = 20;\n          break;\n      }\n      break;\n    case 16:\n      result = 2 * bytes;\n      break;\n  }\n  return result;\n}\n\nfunction getTextRepresentation(buffer, extendedChs) {\n  let text = '';\n  for (const byte of buffer) {\n    if (extendedChs) {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    } else {\n      text += byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.';\n    }\n  }\n  return text;\n}\n\nfunction ascii_escape(str) {\n  return str.replace(/[^\\x20-\\x7E]/g, '.');\n}\n\nfunction html_escape(str) {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\'/g, '&apos;')\n    .replace(/\\\"/g, '&quot;')\n    .replace(/[^\\x20-\\x7E]/g, function (ch) {\n      return '&#x' + ch.codePointAt(0)?.toString(16) + ';';\n    });\n}\n/* END_INCLUDE: \"includes/hexy.jsx\" */\n\nconst backgroundColorClasses = {\n  transfer: 'bg-green-50 dark:bg-green-200',\n  stake: 'bg-cyan-50 dark:bg-cyan-900',\n  deployContract: 'bg-orange-50 dark:bg-orange-900',\n  addKey: 'bg-indigo-50 dark:bg-indigo-900',\n  deleteKey: 'bg-red-50 dark:bg-red-900',\n  functionCall: 'bg-blue-50 dark:bg-black-200',\n  createAccount: 'bg-fuchsia-100 dark:bg-fuchsia-900',\n  deleteAccount: 'bg-red-50 dark:bg-red-900',\n  delegateAction: 'bg-blue-50 dark:bg-black-200',\n};\n\nfunction MainComponent(props) {\n  const { network, t, action, onClick, isTxTypeActive, ownerId } = props;\n\n  const { yoctoToNear } = VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const args = action.args.args;\n\n  const decodedArgs = args ? Buffer.from(args, 'base64') : null;\n\n  let prettyArgs;\n  try {\n    if (decodedArgs) {\n      const parsedJSONArgs = JSON.parse(decodedArgs.toString());\n      prettyArgs =\n        typeof parsedJSONArgs === 'boolean'\n          ? JSON.stringify(parsedJSONArgs)\n          : parsedJSONArgs;\n    } else {\n      prettyArgs = '';\n    }\n  } catch {\n    prettyArgs = Array.from(decodedArgs || [])\n      .map((byte) => byte.toString(16).padStart(2, '0'))\n      .join('');\n  }\n\n  function displayArgs(args) {\n    if (!args || typeof args === 'undefined') return 'The arguments are empty';\n\n    let pretty = '';\n    const decoded = Buffer.from(args, 'base64');\n    try {\n      const parsed = JSON.parse(decoded.toString());\n      if (parsed) {\n        pretty = JSON.stringify(parsed, null, 2);\n      } else {\n        pretty = hexy(decoded, { format: 'twos' });\n      }\n    } catch {\n      pretty = hexy(decoded, { format: 'twos' });\n    }\n\n    return pretty;\n  }\n\n  return (\n    <div className=\"py-2.5\">\n      <div\n        className={`p-2 mr-3 min-h-25 rounded-md inline-flex items-center justify-center leading-5 cursor-pointer \n        transition-all ease-in-out \n        ${backgroundColorClasses[action.kind] || ''}`}\n        onClick={onClick}\n        role=\"button\"\n        tabIndex={0}\n      >\n        {action?.kind !== 'functionCall' &&\n          action?.kind !== 'delegateAction' &&\n          t(`txns:${action?.kind}`)}\n        {action?.kind === 'delegateAction' ? (\n          <div className=\"inline-flex text-sm\">{`Delegate action`}</div>\n        ) : null}\n        {action?.kind === 'functionCall' ? (\n          <div className=\"inline-flex text-sm\">{`'${action?.args?.methodName}'`}</div>\n        ) : null}\n        {onClick ? (\n          <div className=\"ml-2\">{isTxTypeActive ? '-' : '+'}</div>\n        ) : null}\n      </div>\n      {action?.kind === 'transfer' ? (\n        <div className=\"inline-flex justify-center\">\n          <span className=\"text-xs whitespace-nowrap\">\n            {action?.args?.deposit\n              ? yoctoToNear(action?.args?.deposit, false)\n              : action?.args?.deposit ?? ''}\n            \u24c3\n          </span>\n        </div>\n      ) : null}\n      {isTxTypeActive ? (\n        action?.kind === 'functionCall' ? (\n          <div className=\"py-2\">\n            {prettyArgs && typeof prettyArgs === 'object' ? (\n              <textarea\n                readOnly\n                rows={4}\n                defaultValue={displayArgs(args?.args_base64 || args)}\n                className=\"block appearance-none outline-none w-full max-md:w-fit border dark:border-black-200 dark:bg-black-200 rounded-lg bg-gray-100 p-5 my-3 resize-y\"\n              ></textarea>\n            ) : (\n              <div>\n                <div className=\"bg-gray-100 dark:bg-black-200 rounded-md p-3 font-medium my-3\">\n                  <div className=\"bg-inherit text-inherit font-inherit border-none p-0\">\n                    <div className=\"max-h-52 overflow-auto\">\n                      <div className=\"p-4 h-full w-full\">{prettyArgs}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : action?.kind === 'delegateAction' ? (\n          <div className=\"py-2\">\n            <span className=\"font-semibold\">\n              {action?.args?.senderId\n                ? `Actions delegated for ${action?.args?.senderId}:`\n                : ''}\n            </span>\n            {[...action.args.actions]\n              .sort(\n                (actionA, actionB) =>\n                  actionA.delegateIndex - actionB.delegateIndex,\n              )\n              .map((subaction) => (\n                <Widget\n                  key={subaction.delegateIndex}\n                  src={`${ownerId}/widget/bos-components.components.Transactions.ReceiptKind`}\n                  props={{\n                    network: network,\n                    t: t,\n                    action: subaction,\n                    isTxTypeActive: true,\n                    ownerId,\n                  }}\n                />\n              ))}\n          </div>\n        ) : null\n      ) : null}\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Transactions.ReceiptKind", "fact_widget_deployments_id": "ea544c0d88ba4bf90dfb6573c46b5e77", "inserted_timestamp": "2024-04-22T09:44:15.425Z", "modified_timestamp": "2024-04-22T09:44:15.425Z", "__row_index": 1}