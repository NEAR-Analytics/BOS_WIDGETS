{"tx_hash": "5tsdFvvPxvsSbyYQWqipgmhAKGfXJAUM1uW5kEv1vuXF", "action_id_social": "GrchK8d1YdKjwLZE1QUHtUGwS361q9cp9aQApw6t9EXS-0-widget", "block_id": 116948919, "block_timestamp": "2024-04-16T06:12:24.368Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.NFT.Transfers", "source_code": "/**\n * Component: NFTTransfers\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Non-Fungible Token Tranfers List.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\nconst FaCheckCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"\n        fill=\"#50C878\"\n      />\n    </svg>\n  );\n};\nconst FaTimesCircle = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\">\n      <path\n        d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z\"\n        fill=\"#ff0000\"\n      />\n    </svg>\n  );\n};\nconst FaHourglassStart = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 384 512\">\n      <path\n        d=\"M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM288 437v11H96V437c0-25.5 10.1-49.9 28.1-67.9L192 301.3l67.9 67.9c18 18 28.1 42.4 28.1 67.9z\"\n        fill=\"#FFEB3B\"\n      />\n    </svg>\n  );\n};\n\nconst getOptions = (status) => {\n  switch (status) {\n    case null:\n      return {\n        bg: 'bg-yellow-50',\n        text: 'text-yellow-500',\n        icon: FaHourglassStart,\n        label: 'Pending',\n      };\n    case false:\n      return {\n        bg: 'bg-red-50',\n        text: 'text-red-500',\n        icon: FaTimesCircle,\n        label: 'Failure',\n      };\n\n    default:\n      return {\n        bg: 'bg-emerald-50',\n        text: 'text-emerald-500',\n        icon: FaCheckCircle,\n        label: 'Success',\n      };\n  }\n};\n\nconst TxnStatus = (props) => {\n  const option = getOptions(props.status);\n  const Icon = option.icon;\n\n  return (\n    <div className=\"w-full md:w-3/4 break-words\">\n      <span\n        className={`inline-flex items-center text-xs rounded py-1 ${\n          option.bg\n        } ${option.text} ${props.showLabel ? ' px-2' : ' px-1'}`}\n      >\n        <Icon />\n        {props.showLabel && <span className=\"ml-2\">{option.label}</span>}\n      </span>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Status.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Clock.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Clock = (props) => (\n  <svg\n    viewBox=\"64 64 896 896\"\n    focusable=\"false\"\n    data-icon=\"clock-circle\"\n    width=\"1em\"\n    height=\"1em\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n    {...props}\n  >\n    <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\"></path>\n    <path d=\"M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z\"></path>\n  </svg>\n);/* END_INCLUDE COMPONENT: \"includes/icons/Clock.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/FaLongArrowAltRight.jsx\" */\nconst FaLongArrowAltRight = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\">\n      <path\n        d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216\"\n        fill=\"#ffffff\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaLongArrowAltRight.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\nconst ErrorMessage = ({ icons, message, mutedText }) => {\n  return (\n    <div className=\"text-center py-24\">\n      <div className=\"mb-4 flex justify-center\">\n        <span className=\"inline-block border border-yellow-600 border-opacity-25 bg-opacity-10 bg-yellow-300 text-yellow-500 rounded-full p-4\">\n          {icons}\n        </span>\n      </div>\n      <h3 className=\"h-5 font-bold text-lg text-black\">{message}</h3>\n      <p className=\"mb-0 py-4 font-bold\">{mutedText}</p>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\nconst FaInbox = () => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 576 512\"\n      height=\"24\"\n      width=\"24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M567.938 243.908L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L8.062 243.908A47.994 47.994 0 0 0 0 270.533V400c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V270.533a47.994 47.994 0 0 0-8.062-26.625zM162.252 128h251.497l85.333 128H376l-32 64H232l-32-64H76.918l85.334-128z\"></path>\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\n\nfunction MainComponent({ network, id, ownerId }) {\n  const { formatTimestampToString, getTimeAgoString, localFormat } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { getConfig, handleRateLimit, nanoToMilli } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [countLoading, setcountLoading] = useState(false);\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [totalCount, setTotalCount] = useState(0);\n  const [txns, setTxns] = useState({});\n\n  const config = getConfig && getConfig(network);\n\n  const [showAge, setShowAge] = useState(true);\n  const [address, setAddress] = useState('');\n\n  const toggleShowAge = () => setShowAge((s) => !s);\n\n  const setPage = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCurrentPage(currentPage);\n  }, [currentPage]);\n\n  useEffect(() => {\n    function fetchTotalTxns() {\n      setcountLoading(true);\n      asyncFetch(`${config?.backendUrl}nfts/${id}/txns/count`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count ?? 0);\n              setcountLoading(false);\n            } else {\n              handleRateLimit(data, fetchTotalTxns);\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n\n    function fetchTxnsData(page) {\n      setIsLoading(true);\n\n      asyncFetch(\n        `${config?.backendUrl}nfts/${id}/txns?order=desc&page=${page}&per_page=25`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then((data) => {\n          const resp = data?.body?.txns;\n          if (data.status === 200 && Array.isArray(resp) && resp.length > 0) {\n            setTxns((prevData) => ({ ...prevData, [page]: resp }));\n            setIsLoading(false);\n          } else {\n            handleRateLimit(\n              data,\n              () => fetchTxnsData(page),\n              () => setIsLoading(false),\n            );\n          }\n        })\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchTotalTxns();\n      fetchTxnsData(currentPage);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, currentPage, id]);\n\n  const onHandleMouseOver = (e, id) => {\n    e.preventDefault();\n\n    setAddress(id);\n  };\n  const handleMouseLeave = () => {\n    setAddress('');\n  };\n  const columns = [\n    {\n      header: <span></span>,\n      key: '',\n      cell: (row) => (\n        <>\n          <TxnStatus status={row?.outcomes?.status} showLabel={false} />\n        </>\n      ),\n      tdClassName: 'pl-5 py-4 whitespace-nowrap text-sm text-nearblue-600',\n    },\n    {\n      header: <span>TXN HASH</span>,\n      key: 'transaction_hash',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"truncate max-w-[120px] inline-block align-bottom text-green-500 whitespace-nowrap\">\n                  <Link\n                    href={`/txns/${row?.transaction_hash}`}\n                    className=\"hover:no-underline\"\n                  >\n                    <a className=\"text-green-500 font-medium hover:no-underline\">\n                      {row?.transaction_hash}\n                    </a>\n                  </Link>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white p-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {row?.transaction_hash}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName: 'px-5 py-4 text-sm text-nearblue-600',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: <span>METHOD</span>,\n      key: 'cause',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span className=\"bg-blue-900/10 text-xs text-nearblue-600 rounded-xl px-2 py-1 max-w-[120px] inline-flex truncate\">\n                  <span className=\"block truncate\">{row?.cause}</span>\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"center\"\n                side=\"bottom\"\n              >\n                {row?.cause}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName:\n        'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600 font-medium',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: <span>From</span>,\n      key: 'affected_account_id',\n      cell: (row) => {\n        return Number(row.delta_amount) < 0 ? (\n          <span>\n            {row?.affected_account_id ? (\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span\n                      className={`truncate max-w-[120px] inline-block align-bottom text-green-500 whitespace-nowrap ${\n                        row?.affected_account_id === address\n                          ? ' rounded-md bg-[#FFC10740] border-[#FFC10740] border border-dashed p-0.5 px-1 -m-[1px] cursor-pointer text-[#033F40]'\n                          : 'text-green-500 p-0.5 px-1'\n                      }`}\n                    >\n                      <Link\n                        href={`/address/${row?.affected_account_id}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a\n                          className=\"text-green-500 hover:no-underline\"\n                          onMouseOver={(e) =>\n                            onHandleMouseOver(e, row?.affected_account_id)\n                          }\n                          onMouseLeave={handleMouseLeave}\n                        >\n                          {row?.affected_account_id}\n                        </a>\n                      </Link>\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {row?.affected_account_id}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            ) : (\n              'system'\n            )}\n          </span>\n        ) : (\n          <span>\n            {row?.involved_account_id ? (\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span\n                      className={`truncate max-w-[120px] inline-block align-bottom text-green-500 whitespace-nowrap ${\n                        row?.involved_account_id === address\n                          ? ' rounded-md bg-[#FFC10740] border-[#FFC10740] border border-dashed p-0.5 px-1 -m-[1px] cursor-pointer text-[#033F40]'\n                          : 'text-green-500 p-0.5 px-1'\n                      }`}\n                    >\n                      <Link\n                        href={`/address/${row?.involved_account_id}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a\n                          className=\"text-green-500 hover:no-underline\"\n                          onMouseOver={(e) =>\n                            onHandleMouseOver(e, row?.involved_account_id)\n                          }\n                          onMouseLeave={handleMouseLeave}\n                        >\n                          {row?.involved_account_id}\n                        </a>\n                      </Link>\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {row?.involved_account_id}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            ) : (\n              'system'\n            )}\n          </span>\n        );\n      },\n      tdClassName:\n        'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600 font-medium',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: <span></span>,\n      key: '',\n      cell: (row) => {\n        return row.affected_account_id === row.involved_account_id ? (\n          <span className=\"uppercase rounded w-10 py-2 h-6 inline-flex items-center justify-center bg-green-200 text-white text-sm font-semibold\">\n            SELF\n          </span>\n        ) : (\n          <div className=\"w-5 h-5 p-1 bg-green-100 rounded-full text-center flex justify-center items-center mx-auto text-white\">\n            <FaLongArrowAltRight />\n          </div>\n        );\n      },\n      tdClassName: 'text-center',\n    },\n    {\n      header: <span>To</span>,\n      key: 'involved_account_id',\n      cell: (row) => {\n        return Number(row.delta_amount) < 0 ? (\n          <span>\n            {row?.involved_account_id ? (\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span\n                      className={`truncate max-w-[120px] inline-block align-bottom text-green-500 whitespace-nowrap ${\n                        row?.involved_account_id === address\n                          ? ' rounded-md bg-[#FFC10740] border-[#FFC10740] border border-dashed p-0.5 px-1 -m-[1px] cursor-pointer text-[#033F40]'\n                          : 'text-green-500 p-0.5 px-1'\n                      }`}\n                    >\n                      <Link\n                        href={`/address/${row?.involved_account_id}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a\n                          className=\"text-green-500 hover:no-underline\"\n                          onMouseOver={(e) =>\n                            onHandleMouseOver(e, row?.involved_account_id)\n                          }\n                          onMouseLeave={handleMouseLeave}\n                        >\n                          {row?.involved_account_id}\n                        </a>\n                      </Link>\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {row?.involved_account_id}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            ) : (\n              'system'\n            )}\n          </span>\n        ) : (\n          <span>\n            {row?.affected_account_id ? (\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <span\n                      className={`truncate max-w-[120px] inline-block align-bottom text-green-500 whitespace-nowrap ${\n                        row?.affected_account_id === address\n                          ? ' rounded-md bg-[#FFC10740] border-[#FFC10740] border border-dashed p-0.5 px-1 -m-[1px] cursor-pointer text-[#033F40]'\n                          : 'text-green-500 p-0.5 px-1'\n                      }`}\n                    >\n                      <Link\n                        href={`/address/${row?.affected_account_id}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a\n                          className=\"text-green-500 hover:no-underline\"\n                          onMouseOver={(e) =>\n                            onHandleMouseOver(e, row?.affected_account_id)\n                          }\n                          onMouseLeave={handleMouseLeave}\n                        >\n                          {row?.affected_account_id}\n                        </a>\n                      </Link>\n                    </span>\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                    align=\"start\"\n                    side=\"bottom\"\n                  >\n                    {row?.affected_account_id}\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            ) : (\n              'system'\n            )}\n          </span>\n        );\n      },\n      tdClassName:\n        'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600 font-medium',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: <span>TOKEN ID</span>,\n      key: 'token_id',\n      cell: (row) => (\n        <>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <div className=\"max-w-[110px] inline-block truncate\">\n                  {row?.token_id}\n                </div>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {row?.token_id}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </>\n      ),\n      tdClassName: 'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600 ',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: (\n        <>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <button\n                  type=\"button\"\n                  onClick={toggleShowAge}\n                  className=\"text-left text-xs px-5 py-4 w-full flex items-center font-semibold uppercase tracking-wider text-green-500 focus:outline-none flex-row whitespace-nowrap\"\n                >\n                  {showAge ? (\n                    <>\n                      {'AGE'}\n                      <Clock className=\"text-green-500 ml-2\" />\n                    </>\n                  ) : (\n                    <> {'DATE TIME (UTC)'}</>\n                  )}\n                </button>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"center\"\n                side=\"top\"\n              >\n                {showAge\n                  ? 'Click to show Datetime Format'\n                  : 'Click to show Age Format'}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </>\n      ),\n      key: 'block_timestamp',\n      cell: (row) => (\n        <span>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <span>\n                  {!showAge\n                    ? row?.block_timestamp\n                      ? formatTimestampToString(\n                          nanoToMilli(row?.block_timestamp),\n                        )\n                      : ''\n                    : row?.block_timestamp\n                    ? getTimeAgoString(nanoToMilli(row?.block_timestamp))\n                    : ''}\n                </span>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {showAge\n                  ? row?.block_timestamp\n                    ? formatTimestampToString(nanoToMilli(row?.block_timestamp))\n                    : ''\n                  : row?.block_timestamp\n                  ? getTimeAgoString(nanoToMilli(row?.block_timestamp))\n                  : ''}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </span>\n      ),\n      tdClassName: 'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600',\n      thClassName: 'inline-flex',\n    },\n    {\n      header: <span> DETAILS</span>,\n      key: 'contract',\n      cell: (row) => (\n        <span>\n          <Link\n            href={`/nft-token/${row?.nft?.contract}/${row?.token_id}`}\n            className=\"hover:no-underline\"\n          >\n            <a className=\"bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded hover:no-underline\">\n              View NFT &gt;\n            </a>\n          </Link>\n        </span>\n      ),\n      tdClassName:\n        'px-5 py-4 whitespace-nowrap text-sm text-nearblue-600 font-medium',\n      thClassName:\n        'px-5 py-4 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider whitespace-nowrap',\n    },\n  ];\n  return (\n    <>\n      {countLoading ? (\n        <div className=\"pl-6 max-w-lg w-full py-5 \">\n          <Skeleton className=\"h-4\" />\n        </div>\n      ) : (\n        <div className={`flex flex-col lg:flex-row pt-4`}>\n          <div className=\"flex flex-col\">\n            <p className=\"leading-7 px-6 text-sm mb-4 text-nearblue-600\">\n              {Object.keys(txns).length > 0 &&\n                `A total of ${\n                  localFormat && localFormat(totalCount.toString())\n                } transactions found`}\n            </p>\n          </div>\n        </div>\n      )}\n      <Widget\n        src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n        props={{\n          columns: columns,\n          data: txns[currentPage],\n          isLoading: isLoading,\n          isPagination: true,\n          count: totalCount,\n          page: currentPage,\n          limit: 25,\n          pageLimit: 200,\n          setPage: setPage,\n          Error: (\n            <ErrorMessage\n              icons={<FaInbox />}\n              message=\"There are no matching entries\"\n              mutedText=\"Please try again later\"\n            />\n          ),\n        }}\n      />\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.NFT.Transfers", "fact_widget_deployments_id": "be12918ae753e47ae594b9c75039a07e", "inserted_timestamp": "2024-04-16T07:34:10.586Z", "modified_timestamp": "2024-04-16T07:34:10.586Z", "__row_index": 1}