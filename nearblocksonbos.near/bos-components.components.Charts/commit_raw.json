{"tx_hash": "EbYiSBejVa2xoWviprrceoKChwA4rDEgq4XXUbE84Tb3", "action_id_social": "5ksxvxXSWRPwTZ179Qfa7CUC9E8YcKGVf4aVY5t1A2X7-0-widget", "block_id": 116955768, "block_timestamp": "2024-04-16T08:24:22.912Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Charts", "source_code": "/**\n * Component: Charts\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Charts component for Near Charts & Statistics\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [chartTypes] - Type of chart to be shown, available options are (price, blocks, txns etc)\n * @param {boolean} [poweredBy] - Powered by attribution\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\n\nfunction MainComponent(props) {\n  const { t, ownerId, network, chartTypes, poweredBy, theme } = props;\n  const { getConfig, handleRateLimit, yoctoToNear } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n  const [data, setData] = useState([]);\n  const [chartConfig, setChartConfig] = useState(null);\n  const [chartInfo, setChartInfo] = useState({\n    title: '',\n    description: '',\n  });\n\n  const config = getConfig && getConfig(network);\n\n  const charts = [\n    {\n      link: '/charts/near-price',\n      text: t ? t('charts:nearPrice.heading') : 'Near Daily Price (USD) Chart',\n      image: `/images/charts/near-price.svg`,\n      image_dark: `/images/charts/near-price_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/market-cap',\n      text: t\n        ? t('charts:marketCap.heading')\n        : 'Near Market Capitalization Chart',\n      image: `/images/charts/market-cap.svg`,\n      image_dark: `/images/charts/market-cap_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/near-supply',\n      text: t ? t('charts:nearSupply.heading') : 'Near Supply Growth Chart',\n      image: `/images/charts/near-supply.svg`,\n      image_dark: `/images/charts/near-supply_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/txns',\n      text: t ? t('charts:txns.heading') : 'Near Daily Transactions Chart',\n      image: `/images/charts/txns.svg`,\n      image_dark: `/images/charts/txns_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/blocks',\n      text: t ? t('charts:blocks.heading') : 'New Blocks',\n      image: `/images/charts/blocks.svg`,\n      image_dark: `/images/charts/blocks_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/addresses',\n      text: t ? t('charts:addresses.heading') : 'Near Unique Accounts Chart',\n      image: `/images/charts/addresses.svg`,\n      image_dark: `/images/charts/addresses_dark.svg`,\n      exclude: false,\n    },\n    {\n      link: '/charts/txn-fee',\n      text: t ? t('charts:txnFee.heading') : 'Transaction Fee Chart',\n      image: `/images/charts/txn-fee.svg`,\n      image_dark: `/images/charts/txn-fee_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n    {\n      link: '/charts/txn-volume',\n      text: t ? t('charts:txnVolume.heading') : 'Transaction Volume Chart',\n      image: `/images/charts/txn-volume.svg`,\n      image_dark: `/images/charts/txn-volume_dark.svg`,\n      exclude: `${network}` === 'testnet',\n    },\n  ];\n\n  const chartData = useMemo(() => {\n    try {\n      const chartTypeMappings = {\n        txns: (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.txns),\n          date: stat.date,\n          blocks: stat.blocks,\n          addresses: stat.active_accounts,\n        }),\n        'market-cap': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.market_cap),\n          date: stat.date,\n          price: Number(stat.near_price),\n        }),\n        'near-supply': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(yoctoToNear(stat.total_supply, false)),\n          date: stat.date,\n        }),\n        blocks: (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.blocks),\n          date: stat.date,\n        }),\n        addresses: (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.active_accounts),\n          date: stat.date,\n          addresses: stat.active_accounts,\n        }),\n        'txn-fee': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.txn_fee_usd),\n          date: stat.date,\n          fee: stat.txn_fee,\n        }),\n        'txn-volume': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.txn_volume_usd),\n          date: stat.date,\n          volume: stat.txn_volume,\n        }),\n        'near-price': (stat) => ({\n          x: new Date(stat.date).valueOf(),\n          y: Number(stat.near_price),\n          date: stat.date,\n        }),\n      };\n\n      const mappingFunction =\n        chartTypeMappings[chartTypes ];\n      if (mappingFunction) {\n        return data.map(mappingFunction);\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, chartTypes]);\n\n  useEffect(() => {\n    function fetchChartData() {\n      asyncFetch(`${config.backendUrl}charts`).then(\n        (res) => {\n          if (res.status === 200) {\n            if (res?.body) {\n              setData(res.body?.charts );\n            }\n          } else {\n            handleRateLimit(res, fetchChartData);\n          }\n        },\n      );\n    }\n    if (config?.backendUrl) {\n      fetchChartData();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.backendUrl]);\n\n  useEffect(() => {\n    const fetchData = () => {\n      let titleText = '';\n      let yLabel = '';\n      let description = '';\n      switch (chartTypes) {\n        case 'market-cap':\n          titleText = 'Near Market Capitalization Chart';\n          yLabel = 'Near Market Cap (USD)';\n          description =\n            'Near Market Capitalization chart shows the historical breakdown of Near daily market capitalization and price.';\n          break;\n        case 'txns':\n          titleText = 'Near Daily Transactions Chart';\n          yLabel = 'Transactions per Day';\n          description =\n            'Near Supply Growth Chart shows a breakdown of daily and the total Near supply.';\n          break;\n        case 'near-supply':\n          titleText = 'Near Supply Growth Chart';\n          yLabel = 'Near Supply';\n          description =\n            'Near Supply Growth Chart shows a breakdown of daily and the total Near supply.';\n          break;\n        case 'blocks':\n          titleText = 'New Blocks';\n          yLabel = 'Blocks per Day';\n          description =\n            'New Blocks Chart shows the historical number of blocks produced daily on Near blockchain.';\n          break;\n        case 'addresses':\n          titleText = 'Near Unique Accounts Chart';\n          yLabel = 'Accounts per Day';\n          description =\n            'The chart shows the total distinct numbers of accounts on Near blockchain and the increase in the number of account daily.';\n          break;\n        case 'txn-fee':\n          titleText = 'Transaction Fee Chart';\n          yLabel = 'Transaction Fee (USD)';\n          description =\n            'The chart shows the daily amount in USD spent per transaction on Near blockchain.';\n          break;\n        case 'txn-volume':\n          titleText = 'Transaction Volume Chart';\n          yLabel = 'Transaction Volume (USD)';\n          description =\n            'The chart shows the daily amount in USD spent per transaction on Near blockchain.            ';\n          break;\n        case 'near-price':\n          titleText = 'Near Daily Price (USD) Chart';\n          yLabel = 'Near Price (USD)';\n          description =\n            'Near Daily Price (USD) chart shows the daily historical price for Near in USD.';\n          break;\n        default:\n      }\n      setChartInfo({\n        title: titleText,\n        description: description,\n      });\n\n      const fetchedData = {\n        chart: {\n          height: 430,\n          zoomType: 'x',\n          backgroundColor: 'transparent',\n        },\n        title: {\n          text: titleText,\n          style: {\n            color: theme === 'dark' ? '#e0e0e0' : '#333333',\n          },\n        },\n        subtitle: {\n          text: 'Source: NearBlocks.io',\n        },\n        xAxis: {\n          type: 'datetime',\n          lineColor: theme === 'dark' ? '#e0e0e0' : '#333333',\n          labels: {\n            style: {\n              color: theme === 'dark' ? '#e0e0e0' : '#333333',\n            },\n          },\n        },\n        yAxis: {\n          title: {\n            text: yLabel,\n          },\n          lineColor: theme === 'dark' ? '#e0e0e0' : '#333333',\n          labels: {\n            style: {\n              color: theme === 'dark' ? '#e0e0e0' : '#333333',\n            },\n          },\n          gridLineColor: theme === 'dark' ? '#1F2228' : '#e6e6e6',\n        },\n        legend: {\n          enabled: false,\n        },\n        series: [\n          {\n            type: 'area',\n            data: chartData,\n            color: 'rgba(3, 63, 64, 1)',\n          },\n        ],\n        credits: {\n          enabled: false,\n        },\n        plotOptions: {\n          area: {\n            fillColor: {\n              linearGradient: {\n                x1: 0,\n                y1: 0,\n                x2: 0,\n                y2: 1,\n              },\n              stops: [\n                [0, 'rgba(3, 63, 64, 0.8)'],\n                [1, 'rgba(3, 63, 64, 0)'],\n              ],\n            },\n            marker: {\n              enabled: false,\n            },\n            lineWidth: 1,\n            states: {\n              hover: {\n                lineWidth: 1,\n              },\n            },\n            threshold: null,\n            turboThreshold: 3650,\n          },\n        },\n        exporting: {\n          buttons: {\n            contextButton: {\n              menuItems: [\n                'viewFullscreen',\n                'printChart',\n                'separator',\n                'downloadPNG',\n                'downloadJPEG',\n                'downloadPDF',\n                'downloadSVG',\n                'separator',\n                'embed',\n              ],\n            },\n          },\n        },\n      };\n      setChartConfig(fetchedData);\n    };\n\n    fetchData();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chartData, chartTypes, theme]);\n\n  const iframeSrc = `\n  <html>\n    <head>\n      <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/dayjs@1.10.4\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/numeral@2.0.6/numeral.min.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/big.js@5.2.2\"></script>\n    <style>\n      body {\n        background-color: ${theme === 'dark' ? '#0d0d0d' : '#ffffff'};\n        margin: 0;\n        padding: 0;\n      }\n      html{\n\n        background-color: ${theme === 'dark' ? '#0d0d0d' : '#ffffff'};\n      }\n    </style>\n    </head>\n    <body >\n      <div id=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n      ${\n        poweredBy\n          ? '<p style=\"text-align: center; color: #000; font-size: 0.75rem; padding-top: 1rem; padding-bottom: 1rem; font-family: sans-serif;\">Powered by <a href=\"https://beta.nearblocks.io/?utm_source=bos_widget&utm_medium=Charts\" target=\"_blank\" style=\"font-weight: 600; font-family: sans-serif; color: #000; text-decoration: none;\">NearBlocks</a></p>'\n          : ''\n      }\n      <script type=\"text/javascript\">\n        const chartConfig = ${JSON.stringify(chartConfig)};\n        chartConfig.tooltip = {\n          formatter: function () {\n            const item= this.point;\n            function dollarFormat(value) {\n              return numeral(value).format('0,0.00');\n            }\n\n            function yoctoToNear(yocto, format) {\n              const YOCTO_PER_NEAR = Big(10).pow(24).toString();\n              const near = Big(yocto).div(YOCTO_PER_NEAR).toString();\n              return format ? dollarFormat(near) : near;\n            }\n\n            let tooltipContent = \"\";\n\n            switch (\"${chartTypes}\") {\n              case \"market-cap\":\n                tooltipContent = \\`\n                  \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                  Market Cap: <strong>$\\${dollarFormat(item.y)}</strong><br/>\n                  Near Price: <strong>$\\${dollarFormat(item.price)}</strong>\n                \\`;\n                break;\n                case \"txns\":\n                  tooltipContent = \\`\n                    \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                    Total Transactions: <strong>\\${dollarFormat(item.y)}</strong><br/>\n                    Total Blocks Count: <strong>\\${dollarFormat(item.blocks)}</strong><br/>\n                    New Addresses Seen: <strong>\\${dollarFormat(item.addresses)}</strong>\n                  \\`;\n                  break;\n                case \"near-supply\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Total Sypply: <strong>\\${dollarFormat(item.y)} \u24c3</strong>\n                    \\`;\n                  break;\n                case \"blocks\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Total Blocks: <strong>\\${dollarFormat(item.y)}</strong><br/>\\`;\n                  break;\n                case \"addresses\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Total Unique Addresses: <strong>\\${dollarFormat(item.y)}</strong>\\`;\n                  break;\n                  case \"txn-fee\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Txn Fee: <strong>$\\${dollarFormat(item.y)}</strong><br/>\n                      Txn Fee (\u24c3): <strong>\\${yoctoToNear(item.fee,true)} \u24c3</strong><br/>\n                      \\`;\n                  break;\n                case \"txn-volume\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Txn Fee: <strong>$\\${dollarFormat(item.y)}</strong><br/>\n                      Txn Fee (\u24c3): <strong>\\${yoctoToNear(item.volume,true)} \u24c3</strong><br/>\n                      \\`;\n                  break;\n                case \"near-price\":\n                    tooltipContent = \\`\n                      \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                      Near Price: <strong>$\\${dollarFormat(item.y)}</strong>\n                      \\`;\n                  break;\n              default:\n                // Handle other cases or set a default tooltip content\n                tooltipContent = \\`\n                  \\${dayjs(item.date).format('dddd, MMMM DD, YYYY')}<br/>\n                  \\${item.y}\n                \\`;\n            }\n\n            return tooltipContent;\n          }\n        };\n        Highcharts.chart('chart-container', chartConfig);\n      </script>\n    </body>\n  </html>\n`;\n\n  return (\n    <div>\n      {chartTypes && (\n        <>\n          <div\n            className=\"block bg-white dark:bg-black-600 dark:border-black-200 border soft-shadow rounded-xl overflow-hidden mb-10\"\n            style={{ height: 580 }}\n          >\n            <p className=\"leading-7 px-4 text-sm py-4 text-nearblue-600 dark:text-neargray-10 border-b dark:border-black-200\">\n              {chartInfo?.description}\n            </p>\n            <div className=\"pl-2 pr-2 py-8 h-full \">\n              {chartData?.length ? (\n                <iframe\n                  srcDoc={iframeSrc}\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    border: 'none',\n                    backgroundColor: theme === 'dark' ? '#0D0D0D' : '#FFFF',\n                  }}\n                />\n              ) : (\n                <Skeleton className=\"h-[93%] w-full\" />\n              )}\n            </div>\n          </div>\n          <h2 className=\"mb-4 px-2 text-lg text-gray-700 dark:text-neargray-10\">\n            {t('charts:otherHeading')}\n          </h2>\n        </>\n      )}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {charts?.map(\n          (chart, index) =>\n            chart?.exclude === false && (\n              <div\n                key={index}\n                className=\"block bg-white dark:bg-black-600 dark:border-black-200 border soft-shadow rounded-xl overflow-hidden\"\n              >\n                <Link\n                  href={chart?.link}\n                  className=\"block leading-7 p-3 text-sm text-nearblue-600 dark:text-neargray-10 border-b dark:border-black-200 truncate\"\n                >\n                  <h2>{chart?.text}</h2>\n                </Link>\n                <div className=\"pl-2 pr-4 py-6\">\n                  <Link href={chart?.link}>\n                    <img\n                      src={theme === 'dark' ? chart?.image_dark : chart?.image}\n                      alt={chart?.text}\n                      width={600}\n                      height={550}\n                    />\n                  </Link>\n                </div>\n              </div>\n            ),\n        )}\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Charts", "fact_widget_deployments_id": "91dd471880bca04bae058d2182b7543d", "inserted_timestamp": "2024-04-16T09:49:24.281Z", "modified_timestamp": "2024-04-16T09:49:24.281Z", "__row_index": 10}