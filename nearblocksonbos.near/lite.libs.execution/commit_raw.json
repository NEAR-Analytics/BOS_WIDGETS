{"tx_hash": "6QZKTQHJbre9RsdmjAPKxGwwcR2bYwQDLnUGpuRG34cF", "action_id_social": "9CYpW14k6hNHfEBSLQSDxhZmU9mbaJCyTqEAsgxqMx72-0-widget", "block_id": 120910813, "block_timestamp": "2024-06-11T06:41:50.245Z", "signer_id": "nearblocksonbos.near", "widget_name": "lite.libs.execution", "source_code": "const mapNonDelegateRpcAction = (rpcAction) => {\n  if (rpcAction === \"CreateAccount\") {\n    return {\n      args: {},\n      kind: \"createAccount\",\n    };\n  }\n  if (\"DeployContract\" in rpcAction) {\n    return {\n      args: rpcAction.DeployContract,\n      kind: \"deployContract\",\n    };\n  }\n  if (\"FunctionCall\" in rpcAction) {\n    return {\n      args: {\n        args: rpcAction.FunctionCall.args,\n        deposit: rpcAction.FunctionCall.deposit,\n        gas: rpcAction.FunctionCall.gas,\n        methodName: rpcAction.FunctionCall.method_name,\n      },\n      kind: \"functionCall\",\n    };\n  }\n  if (\"Transfer\" in rpcAction) {\n    return {\n      args: rpcAction.Transfer,\n      kind: \"transfer\",\n    };\n  }\n  if (\"Stake\" in rpcAction) {\n    return {\n      args: {\n        publicKey: rpcAction.Stake.public_key,\n        stake: rpcAction.Stake.stake,\n      },\n      kind: \"stake\",\n    };\n  }\n  if (\"AddKey\" in rpcAction) {\n    return {\n      args: {\n        accessKey: {\n          nonce: rpcAction.AddKey.access_key.nonce,\n          permission:\n            rpcAction.AddKey.access_key.permission === \"FullAccess\"\n              ? {\n                  type: \"fullAccess\",\n                }\n              : {\n                  contractId:\n                    rpcAction.AddKey.access_key.permission.FunctionCall\n                      .receiver_id,\n                  methodNames:\n                    rpcAction.AddKey.access_key.permission.FunctionCall\n                      .method_names,\n                  type: \"functionCall\",\n                },\n        },\n        publicKey: rpcAction.AddKey.public_key,\n      },\n      kind: \"addKey\",\n    };\n  }\n  if (\"DeleteKey\" in rpcAction) {\n    return {\n      args: {\n        publicKey: rpcAction.DeleteKey.public_key,\n      },\n      kind: \"deleteKey\",\n    };\n  }\n  return {\n    args: {\n      beneficiaryId: rpcAction.DeleteAccount.beneficiary_id,\n    },\n    kind: \"deleteAccount\",\n  };\n};\nconst mapRpcAction = (rpcAction) => {\n  if (typeof rpcAction === \"object\" && \"Delegate\" in rpcAction) {\n    return {\n      args: {\n        actions: rpcAction.Delegate.delegate_action.actions.map(\n          (subaction, index) => ({\n            ...mapNonDelegateRpcAction(subaction),\n            delegateIndex: index,\n          })\n        ),\n        receiverId: rpcAction.Delegate.delegate_action.receiver_id,\n        senderId: rpcAction.Delegate.delegate_action.sender_id,\n      },\n      kind: \"delegateAction\",\n    };\n  }\n  return mapNonDelegateRpcAction(rpcAction);\n};\nconst mapRpcCompilationError = (error) => {\n  if (\"CodeDoesNotExist\" in error) {\n    return {\n      accountId: error.CodeDoesNotExist.account_id,\n      type: \"codeDoesNotExist\",\n    };\n  }\n  if (\"PrepareError\" in error) {\n    return {\n      type: \"prepareError\",\n    };\n  }\n  if (\"WasmerCompileError\" in error) {\n    return {\n      msg: error.WasmerCompileError.msg,\n      type: \"wasmerCompileError\",\n    };\n  }\n  if (\"UnsupportedCompiler\" in error) {\n    return {\n      msg: error.UnsupportedCompiler.msg,\n      type: \"unsupportedCompiler\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcFunctionCallError = (error) => {\n  if (\"CompilationError\" in error) {\n    return {\n      error: mapRpcCompilationError(error.CompilationError),\n      type: \"compilationError\",\n    };\n  }\n  if (\"LinkError\" in error) {\n    return {\n      msg: error.LinkError.msg,\n      type: \"linkError\",\n    };\n  }\n  if (\"MethodResolveError\" in error) {\n    return {\n      type: \"methodResolveError\",\n    };\n  }\n  if (\"WasmTrap\" in error) {\n    return {\n      type: \"wasmTrap\",\n    };\n  }\n  if (\"WasmUnknownError\" in error) {\n    return {\n      type: \"wasmUnknownError\",\n    };\n  }\n  if (\"HostError\" in error) {\n    return {\n      type: \"hostError\",\n    };\n  }\n  if (\"_EVMError\" in error) {\n    return {\n      type: \"evmError\",\n    };\n  }\n  if (\"ExecutionError\" in error) {\n    return {\n      error: error.ExecutionError,\n      type: \"executionError\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcNewReceiptValidationError = (error) => {\n  if (\"InvalidPredecessorId\" in error) {\n    return {\n      accountId: error.InvalidPredecessorId.account_id,\n      type: \"invalidPredecessorId\",\n    };\n  }\n  if (\"InvalidReceiverId\" in error) {\n    return {\n      accountId: error.InvalidReceiverId.account_id,\n      type: \"invalidReceiverId\",\n    };\n  }\n  if (\"InvalidSignerId\" in error) {\n    return {\n      accountId: error.InvalidSignerId.account_id,\n      type: \"invalidSignerId\",\n    };\n  }\n  if (\"InvalidDataReceiverId\" in error) {\n    return {\n      accountId: error.InvalidDataReceiverId.account_id,\n      type: \"invalidDataReceiverId\",\n    };\n  }\n  if (\"ReturnedValueLengthExceeded\" in error) {\n    return {\n      length: error.ReturnedValueLengthExceeded.length,\n      limit: error.ReturnedValueLengthExceeded.limit,\n      type: \"returnedValueLengthExceeded\",\n    };\n  }\n  if (\"NumberInputDataDependenciesExceeded\" in error) {\n    return {\n      limit: error.NumberInputDataDependenciesExceeded.limit,\n      numberOfInputDataDependencies:\n        error.NumberInputDataDependenciesExceeded\n          .number_of_input_data_dependencies,\n      type: \"numberInputDataDependenciesExceeded\",\n    };\n  }\n  if (\"ActionsValidation\" in error) {\n    return {\n      type: \"actionsValidation\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcInvalidAccessKeyError = (error) => {\n  if (error === \"DepositWithFunctionCall\") {\n    return {\n      type: \"depositWithFunctionCall\",\n    };\n  }\n  if (error === \"RequiresFullAccess\") {\n    return {\n      type: \"requiresFullAccess\",\n    };\n  }\n  if (\"AccessKeyNotFound\" in error) {\n    return {\n      accountId: error.AccessKeyNotFound.account_id,\n      publicKey: error.AccessKeyNotFound.public_key,\n      type: \"accessKeyNotFound\",\n    };\n  }\n  if (\"ReceiverMismatch\" in error) {\n    return {\n      akReceiver: error.ReceiverMismatch.ak_receiver,\n      transactionReceiver: error.ReceiverMismatch.tx_receiver,\n      type: \"receiverMismatch\",\n    };\n  }\n  if (\"MethodNameMismatch\" in error) {\n    return {\n      methodName: error.MethodNameMismatch.method_name,\n      type: \"methodNameMismatch\",\n    };\n  }\n  if (\"NotEnoughAllowance\" in error) {\n    return {\n      accountId: error.NotEnoughAllowance.account_id,\n      allowance: error.NotEnoughAllowance.allowance,\n      cost: error.NotEnoughAllowance.cost,\n      publicKey: error.NotEnoughAllowance.public_key,\n      type: \"notEnoughAllowance\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcReceiptInvalidTxError = (error) => {\n  if (\"InvalidAccessKeyError\" in error) {\n    return {\n      error: mapRpcInvalidAccessKeyError(error.InvalidAccessKeyError),\n      type: \"invalidAccessKeyError\",\n    };\n  }\n  if (\"InvalidSignerId\" in error) {\n    return {\n      signerId: error.InvalidSignerId.signer_id,\n      type: \"invalidSignerId\",\n    };\n  }\n  if (\"SignerDoesNotExist\" in error) {\n    return {\n      signerId: error.SignerDoesNotExist.signer_id,\n      type: \"signerDoesNotExist\",\n    };\n  }\n  if (\"InvalidNonce\" in error) {\n    return {\n      akNonce: error.InvalidNonce.ak_nonce,\n      transactionNonce: error.InvalidNonce.tx_nonce,\n      type: \"invalidNonce\",\n    };\n  }\n  if (\"NonceTooLarge\" in error) {\n    return {\n      transactionNonce: error.NonceTooLarge.tx_nonce,\n      type: \"nonceTooLarge\",\n      upperBound: error.NonceTooLarge.upper_bound,\n    };\n  }\n  if (\"InvalidReceiverId\" in error) {\n    return {\n      receiverId: error.InvalidReceiverId.receiver_id,\n      type: \"invalidReceiverId\",\n    };\n  }\n  if (\"InvalidSignature\" in error) {\n    return {\n      type: \"invalidSignature\",\n    };\n  }\n  if (\"NotEnoughBalance\" in error) {\n    return {\n      balance: error.NotEnoughBalance.balance,\n      cost: error.NotEnoughBalance.cost,\n      signerId: error.NotEnoughBalance.signer_id,\n      type: \"notEnoughBalance\",\n    };\n  }\n  if (\"LackBalanceForState\" in error) {\n    return {\n      amount: error.LackBalanceForState.amount,\n      signerId: error.LackBalanceForState.signer_id,\n      type: \"lackBalanceForState\",\n    };\n  }\n  if (\"CostOverflow\" in error) {\n    return {\n      type: \"costOverflow\",\n    };\n  }\n  if (\"InvalidChain\" in error) {\n    return {\n      type: \"invalidChain\",\n    };\n  }\n  if (\"Expired\" in error) {\n    return {\n      type: \"expired\",\n    };\n  }\n  if (\"ActionsValidation\" in error) {\n    return {\n      type: \"actionsValidation\",\n    };\n  }\n  if (\"TransactionSizeExceeded\" in error) {\n    return {\n      limit: error.TransactionSizeExceeded.limit,\n      size: error.TransactionSizeExceeded.size,\n      type: \"transactionSizeExceeded\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcReceiptActionError = (error) => {\n  const { kind } = error;\n  if (kind === \"DelegateActionExpired\") {\n    return {\n      type: \"delegateActionExpired\",\n    };\n  }\n  if (kind === \"DelegateActionInvalidSignature\") {\n    return {\n      type: \"delegateActionInvalidSignature\",\n    };\n  }\n  if (\"DelegateActionSenderDoesNotMatchTxReceiver\" in kind) {\n    return {\n      receiverId: kind.DelegateActionSenderDoesNotMatchTxReceiver.receiver_id,\n      senderId: kind.DelegateActionSenderDoesNotMatchTxReceiver.sender_id,\n      type: \"delegateActionSenderDoesNotMatchTxReceiver\",\n    };\n  }\n  if (\"DelegateActionAccessKeyError\" in kind) {\n    return {\n      error: mapRpcInvalidAccessKeyError(kind.DelegateActionAccessKeyError),\n      type: \"delegateActionAccessKeyError\",\n    };\n  }\n  if (\"DelegateActionInvalidNonce\" in kind) {\n    return {\n      akNonce: kind.DelegateActionInvalidNonce.ak_nonce,\n      delegateNonce: kind.DelegateActionInvalidNonce.delegate_nonce,\n      type: \"delegateActionInvalidNonce\",\n    };\n  }\n  if (\"DelegateActionNonceTooLarge\" in kind) {\n    return {\n      delegateNonce: kind.DelegateActionNonceTooLarge.delegate_nonce,\n      type: \"delegateActionNonceTooLarge\",\n      upperBound: kind.DelegateActionNonceTooLarge.upper_bound,\n    };\n  }\n  if (\"AccountAlreadyExists\" in kind) {\n    return {\n      accountId: kind.AccountAlreadyExists.account_id,\n      type: \"accountAlreadyExists\",\n    };\n  }\n  if (\"AccountDoesNotExist\" in kind) {\n    return {\n      accountId: kind.AccountDoesNotExist.account_id,\n      type: \"accountDoesNotExist\",\n    };\n  }\n  if (\"CreateAccountOnlyByRegistrar\" in kind) {\n    return {\n      accountId: kind.CreateAccountOnlyByRegistrar.account_id,\n      predecessorId: kind.CreateAccountOnlyByRegistrar.predecessor_id,\n      registrarAccountId:\n        kind.CreateAccountOnlyByRegistrar.registrar_account_id,\n      type: \"createAccountOnlyByRegistrar\",\n    };\n  }\n  if (\"CreateAccountNotAllowed\" in kind) {\n    return {\n      accountId: kind.CreateAccountNotAllowed.account_id,\n      predecessorId: kind.CreateAccountNotAllowed.predecessor_id,\n      type: \"createAccountNotAllowed\",\n    };\n  }\n  if (\"ActorNoPermission\" in kind) {\n    return {\n      accountId: kind.ActorNoPermission.account_id,\n      actorId: kind.ActorNoPermission.actor_id,\n      type: \"actorNoPermission\",\n    };\n  }\n  if (\"DeleteKeyDoesNotExist\" in kind) {\n    return {\n      accountId: kind.DeleteKeyDoesNotExist.account_id,\n      publicKey: kind.DeleteKeyDoesNotExist.public_key,\n      type: \"deleteKeyDoesNotExist\",\n    };\n  }\n  if (\"AddKeyAlreadyExists\" in kind) {\n    return {\n      accountId: kind.AddKeyAlreadyExists.account_id,\n      publicKey: kind.AddKeyAlreadyExists.public_key,\n      type: \"addKeyAlreadyExists\",\n    };\n  }\n  if (\"DeleteAccountStaking\" in kind) {\n    return {\n      accountId: kind.DeleteAccountStaking.account_id,\n      type: \"deleteAccountStaking\",\n    };\n  }\n  if (\"LackBalanceForState\" in kind) {\n    return {\n      accountId: kind.LackBalanceForState.account_id,\n      amount: kind.LackBalanceForState.amount,\n      type: \"lackBalanceForState\",\n    };\n  }\n  if (\"TriesToUnstake\" in kind) {\n    return {\n      accountId: kind.TriesToUnstake.account_id,\n      type: \"triesToUnstake\",\n    };\n  }\n  if (\"TriesToStake\" in kind) {\n    return {\n      accountId: kind.TriesToStake.account_id,\n      balance: kind.TriesToStake.balance,\n      locked: kind.TriesToStake.locked,\n      stake: kind.TriesToStake.stake,\n      type: \"triesToStake\",\n    };\n  }\n  if (\"InsufficientStake\" in kind) {\n    return {\n      accountId: kind.InsufficientStake.account_id,\n      minimumStake: kind.InsufficientStake.minimum_stake,\n      stake: kind.InsufficientStake.stake,\n      type: \"insufficientStake\",\n    };\n  }\n  if (\"FunctionCallError\" in kind) {\n    return {\n      error: mapRpcFunctionCallError(kind.FunctionCallError),\n      type: \"functionCallError\",\n    };\n  }\n  if (\"NewReceiptValidationError\" in kind) {\n    return {\n      error: mapRpcNewReceiptValidationError(kind.NewReceiptValidationError),\n      type: \"newReceiptValidationError\",\n    };\n  }\n  if (\"OnlyImplicitAccountCreationAllowed\" in kind) {\n    return {\n      accountId: kind.OnlyImplicitAccountCreationAllowed.account_id,\n      type: \"onlyImplicitAccountCreationAllowed\",\n    };\n  }\n  if (\"DeleteAccountWithLargeState\" in kind) {\n    return {\n      accountId: kind.DeleteAccountWithLargeState.account_id,\n      type: \"deleteAccountWithLargeState\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcReceiptError = (error) => {\n  if (\"ActionError\" in error) {\n    return {\n      error: mapRpcReceiptActionError(error.ActionError),\n      type: \"action\",\n    };\n  }\n  if (\"InvalidTxError\" in error) {\n    return {\n      error: mapRpcReceiptInvalidTxError(error.InvalidTxError),\n      type: \"transaction\",\n    };\n  }\n  return UNKNOWN_ERROR;\n};\nconst mapRpcReceiptStatus = (status) => {\n  if (\"SuccessValue\" in status) {\n    return { type: \"successValue\", value: status.SuccessValue };\n  }\n  if (\"SuccessReceiptId\" in status) {\n    return { receiptId: status.SuccessReceiptId, type: \"successReceiptId\" };\n  }\n  if (\"Failure\" in status) {\n    return { error: mapRpcReceiptError(status.Failure), type: \"failure\" };\n  }\n  return { type: \"unknown\" };\n};\nconst UNKNOWN_ERROR = { type: \"unknown\" };\nconst execution = () => {\n  const depositAmount = (actions) =>\n    actions\n      .map((action) => (\"deposit\" in action.args ? action.args.deposit : \"0\"))\n      .reduce(\n        (accumulator, deposit) => Big(accumulator).plus(deposit).toString(),\n        \"0\"\n      );\n  const nestReceipts = (idOrHash, parsedMap) => {\n    const parsedElement = parsedMap.get(idOrHash);\n    if (!parsedElement) return { id: idOrHash };\n    const { receiptIds, ...restOutcome } = parsedElement.outcome;\n    return {\n      ...parsedElement,\n      outcome: {\n        ...restOutcome,\n        nestedReceipts: receiptIds.map((id) => nestReceipts(id, parsedMap)),\n      },\n    };\n  };\n  const txnFee = (transactionOutcome, receiptsOutcome) =>\n    receiptsOutcome\n      .map((receipt) => receipt.outcome.tokens_burnt)\n      .reduce(\n        (tokenBurnt, currentFee) => Big(tokenBurnt).plus(currentFee).toString(),\n        transactionOutcome.outcome.tokens_burnt\n      );\n  const parseReceipt = (receipt, outcome, transaction) => {\n    if (!receipt) {\n      return {\n        actions: transaction.actions.map(mapRpcAction),\n        id: outcome.id,\n        predecessorId: transaction.signer_id,\n        receiverId: transaction.receiver_id,\n      };\n    }\n    return {\n      actions:\n        \"Action\" in receipt.receipt\n          ? receipt.receipt.Action.actions.map(mapRpcAction)\n          : [],\n      id: receipt.receipt_id,\n      predecessorId: receipt.predecessor_id,\n      receiverId: receipt.receiver_id,\n    };\n  };\n  const parseOutcome = (outcome, blocksMap) => {\n    return {\n      block: blocksMap.get(outcome.block_hash),\n      gasBurnt: outcome.outcome.gas_burnt,\n      logs: outcome.outcome.logs,\n      receiptIds: outcome.outcome.receipt_ids,\n      status: mapRpcReceiptStatus(outcome.outcome.status),\n      tokensBurnt: outcome.outcome.tokens_burnt,\n    };\n  };\n  return { depositAmount, nestReceipts, parseOutcome, parseReceipt, txnFee };\n};\nreturn execution(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/lite.libs.execution", "fact_widget_deployments_id": "a63fa5284acecf01358db6e7b3bddd35", "inserted_timestamp": "2024-06-11T08:04:49.294Z", "modified_timestamp": "2024-06-11T08:04:49.294Z", "__row_index": 0}