{"tx_hash": "HH3c4UwoYVnz7kmvqreyTpXFisoRujsAMVkdwyW2fzQP", "action_id_social": "31oBeNpxStASUVjwCv9pTsDwAzGtDYU4qyCpc79sv4ab-0-widget", "block_id": 116536495, "block_timestamp": "2024-04-10T11:22:27.064Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.NFT.List", "source_code": "/**\n * Component: NFTList\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Top Non-Fungible Tokens on Near Protocol.\n * @interface Props\n * @param {string}  [network] - The network data to show, either mainnet or testnet.\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {number} [currentPage] - The current page number being displayed. (Optional)\n *                                 Example: If provided, currentPage=3 will display the third page of blocks.\n * @param {function} [setPage] - A function used to set the current page. (Optional)\n *                               Example: setPage={handlePageChange} where handlePageChange is a function to update the page.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200  rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\nconst ArrowUp = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\" />\n    </svg>\n  );\n};\n\nconst SortIcon = (props) => {\n  return (\n    <ArrowUp\n      className={`h-3 w-3 fill-current transition-transform mr-1 duration-700 ${\n        props.order !== 'asc' ? 'transform rotate-180' : 'transform rotate-0'\n      }`}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/SortIcon.jsx\" */\n\nconst initialSorting = {\n  sort: 'txns_day',\n  order: 'desc',\n};\n\nconst initialPagination = {\n  per_page: 50,\n};\n\nfunction MainComponent({ network, currentPage, setPage, t, ownerId }) {\n  const { localFormat, serialNumber } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { debounce, getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [tokens, setTokens] = useState({});\n  const [sorting, setSorting] = useState(initialSorting);\n  const errorMessage = t ? t('token:fts.top.empty') : 'No tokens found!';\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    function fetchTotalTokens(qs) {\n      const queryParams = qs ? '?' + qs : '';\n      asyncFetch(`${config?.backendUrl}nfts/count${queryParams}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.tokens?.[0];\n            if (data.status === 200) {\n              setTotalCount(resp?.count);\n            } else {\n              handleRateLimit(data, () => fetchTotalTokens(qs));\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n    function fetchTokens(qs, sqs, page) {\n      setIsLoading(true);\n      const queryParams = qs ? qs + '&' : '';\n      asyncFetch(\n        `${config?.backendUrl}nfts?${queryParams}order=${sqs?.order}&sort=${sqs?.sort}&page=${currentPage}&per_page=${initialPagination.per_page}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.tokens;\n            if (data.status === 200) {\n              setTokens((prevData) => ({ ...prevData, [page]: resp || [] }));\n              setIsLoading(false);\n            } else {\n              handleRateLimit(\n                data,\n                () => fetchTokens(qs, sorting, page),\n                () => setIsLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {})\n        .finally(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchTotalTokens();\n      fetchTokens('', sorting, currentPage);\n      if (sorting) {\n        fetchTotalTokens();\n        fetchTokens('', sorting, currentPage);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, currentPage, sorting]);\n\n  const onOrder = (sortKey) => {\n    setSorting((state) => ({\n      ...state,\n      sort: sortKey,\n      order:\n        state.sort === sortKey\n          ? state.order === 'asc'\n            ? 'desc'\n            : 'asc'\n          : 'desc',\n    }));\n  };\n  const columns = [\n    {\n      header: <span>#</span>,\n      key: '',\n      cell: (_row, index) => (\n        <span>\n          {serialNumber(index, currentPage, initialPagination.per_page)}\n        </span>\n      ),\n      tdClassName:\n        'pl-6 py-4 whitespace-nowrap text-sm text-nearblue-700 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[1px]',\n    },\n    {\n      header: <span>Token</span>,\n      key: 'name',\n      cell: (row) => (\n        <>\n          <div className=\"flex items-center\">\n            <TokenImage\n              src={row?.icon}\n              alt={row?.name}\n              appUrl={config?.appUrl}\n              className=\"w-5 h-5 mr-2\"\n            />\n            <Link\n              href={`/nft-token/${row?.contract}`}\n              className=\"hover:no-underline\"\n            >\n              <a className=\"flex text-green-500 hover:no-underline\">\n                <span className=\"inline-block truncate max-w-[200px] mr-1\">\n                  {row?.name}\n                </span>\n                <span className=\"text-nearblue-700 inline-block truncate max-w-[80px]\">\n                  {row?.symbol}\n                </span>\n              </a>\n            </Link>\n          </div>\n        </>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm  text-nearblue-600 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider',\n    },\n    {\n      header: <span>Tokens</span>,\n      key: 'tokens',\n      cell: (row) => (\n        <span>\n          {row?.tokens ? localFormat(row?.tokens) : row?.tokens ?? ''}\n        </span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[160px]',\n    },\n    {\n      header: <span>Holders</span>,\n      key: 'holders',\n      cell: (row) => (\n        <span>{row?.holders ? localFormat(row?.holders) : ''}</span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 align-top',\n      thClassName:\n        'px-6 py-2 text-left text-xs font-semibold text-nearblue-600 uppercase tracking-wider w-[160px]',\n    },\n    {\n      header: (\n        <span>\n          <button\n            type=\"button\"\n            onClick={() => onOrder('txns_day')}\n            className=\"w-full px-6 py-2 text-left text-xs font-semibold uppercase tracking-wider text-green-500 focus:outline-none flex flex-row whitespace-nowrap\"\n          >\n            {sorting.sort === 'txns_day' && (\n              <div className=\"text-nearblue-600 font-semibold\">\n                <SortIcon order={sorting.order} />\n              </div>\n            )}\n            Transfers (24H)\n          </button>\n        </span>\n      ),\n      key: 'change_24',\n      cell: (row) => (\n        <span>{row?.transfers_day ? localFormat(row?.transfers_day) : ''}</span>\n      ),\n      tdClassName:\n        'px-6 py-4 whitespace-nowrap text-sm text-nearblue-600 align-top',\n      thClassName: 'w-[160px]',\n    },\n  ];\n\n  const debouncedSearch = useMemo(() => {\n    return (\n      debounce &&\n      debounce(500, (value) => {\n        if (!value || value?.trim() === '') {\n          setSearchResults([]);\n          return;\n        }\n        asyncFetch(`${config?.backendUrl}nfts?search=${value}&per_page=5`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then((data) => {\n            const resp = data?.body?.tokens;\n            setSearchResults(resp);\n          })\n          .catch(() => {});\n      })\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl]);\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    debouncedSearch(value);\n  };\n\n  return (\n    <>\n      <div className=\" bg-white border soft-shadow rounded-xl pb-1 \">\n        <div className=\"flex flex-row items-center justify-between text-left text-sm text-nearblue-600 px-3 py-2\">\n          {isLoading ? (\n            <div className=\"max-w-lg pl-3 w-full py-3.5 \">\n              <Skeleton className=\" h-4\" />\n            </div>\n          ) : (\n            <p className=\"pl-3\">\n              A total of {localFormat && localFormat(totalCount.toString())}{' '}\n              NEP-171 Token Contracts found\n            </p>\n          )}\n          <div className={`flex w-full h-10 sm:w-80 mr-2`}>\n            <div className=\"flex-grow\">\n              <label htmlFor=\"token-search\" id=\"token-search\">\n                <input\n                  name=\"search\"\n                  autoComplete=\"off\"\n                  placeholder=\"Search\"\n                  className=\"search ml-2 pl-8 token-search bg-white w-full h-full text-sm py-2 outline-none border rounded-xl\"\n                  onChange={onChange}\n                />\n              </label>\n              {searchResults?.length > 0 && (\n                <div className=\"z-50 relative\">\n                  <div className=\"text-xs rounded-b-md -mr-2 ml-2 -mt-1 bg-white py-2 shadow\">\n                    {searchResults.map((token) => (\n                      <div\n                        key={token?.contract}\n                        className=\"mx-2 px-2 py-2 hover:bg-gray-100 cursor-pointer hover:border-gray-500 truncate\"\n                      >\n                        <Link href={`/token/${token?.contract}`}>\n                          <a className=\"flex items-center my-1 whitespace-nowrap \">\n                            <div className=\"flex-shrink-0 h-5 w-5 mr-2\">\n                              <TokenImage\n                                src={token?.icon}\n                                alt={token?.name}\n                                appUrl={config?.appUrl}\n                                className=\"w-5 h-5\"\n                              />\n                            </div>\n                            <p className=\"font-semibold text-sm truncate\">\n                              {token?.name}\n                              <span className=\"text-nearblue-700 ml-2\">\n                                {token?.symbol}\n                              </span>\n                            </p>\n                          </a>\n                        </Link>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <Widget\n          src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n          props={{\n            columns: columns,\n            data: tokens[currentPage],\n            isLoading: isLoading,\n            isPagination: true,\n            count: totalCount,\n            page: currentPage,\n            limit: initialPagination.per_page,\n            pageLimit: 200,\n            setPage: setPage,\n            Error: errorMessage,\n          }}\n        />\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.NFT.List", "fact_widget_deployments_id": "f2bfc5206deccb6ef9cf3a979f64d7e3", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 20}