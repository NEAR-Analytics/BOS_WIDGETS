{"tx_hash": "4qS2AiCXvXmk4JR9gmS4UamafeyU4zBnyw2RGM9mCgC7", "action_id_social": "HNH8CuEo7LBvGf6dUixPTUFQuZBrEX5tWu4EyiXjxHNb-0-widget", "block_id": 116536482, "block_timestamp": "2024-04-10T11:22:13.062Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.FT.FAQ", "source_code": "/**\n * Component: FTFAQ\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: FAQ About Fungible Token On Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {Token} [token] - The Token type passed as object\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MainComponent({ network, id, token, ownerId }) {\n  const { localFormat, dollarFormat, dollarNonCentFormat, convertToUTC } =\n    VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  const { getConfig, handleRateLimit, nanoToMilli, shortenAddress } =\n    VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const { tokenAmount } = VM.require(`${ownerId}/widget/includes.Utils.near`);\n\n  const [account, setAccount] = useState({} );\n  const [contract, setContract] = useState(\n    {} ,\n  );\n  const [transfers, setTransfers] = useState('');\n  const [holders, setHolders] = useState('');\n  const [largestHolder, setLargestHolder] = useState(\n    {} ,\n  );\n  const [tokens, setTokens] = useState({} );\n\n  const name = tokens?.name;\n  const tokenTicker = tokens?.symbol;\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    function fetchFTData() {\n      asyncFetch(`${config.backendUrl}fts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setTokens(resp);\n            } else {\n              handleRateLimit(data, fetchFTData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchAccountData() {\n      asyncFetch(`${config?.backendUrl}account/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const accountResp = data?.body?.account?.[0];\n            if (data.status === 200) {\n              setAccount(accountResp);\n            } else {\n              handleRateLimit(data, fetchAccountData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchContractData() {\n      asyncFetch(`${config?.backendUrl}account/${id}/contract/deployments`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const depResp = data?.body?.deployments?.[0];\n            if (data.status === 200) {\n              setContract(depResp);\n            } else {\n              handleRateLimit(data, fetchContractData);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchTotalTxns() {\n      asyncFetch(`${config?.backendUrl}fts/${id}/txns/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTransfers(resp?.count);\n            } else {\n              handleRateLimit(data, fetchTotalTxns);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchHoldersdata() {\n      asyncFetch(`${config?.backendUrl}fts/${id}/holders`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.holders?.[0];\n            if (data.status === 200) {\n              setLargestHolder(resp);\n            } else {\n              handleRateLimit(data, fetchHoldersdata);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchHoldersCount() {\n      asyncFetch(`${config?.backendUrl}fts/${id}/holders/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.holders?.[0];\n            if (data.status === 200) {\n              setHolders(resp?.count);\n            } else {\n              handleRateLimit(data, fetchHoldersCount);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    if (!token && token === undefined) {\n      fetchFTData();\n    }\n    if (config?.backendUrl) {\n      fetchAccountData();\n      fetchContractData();\n      fetchHoldersCount();\n      fetchTotalTxns();\n      fetchHoldersdata();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id, config?.backendUrl, token]);\n\n  useEffect(() => {\n    if (token) {\n      setTokens(token);\n    }\n  }, [token]);\n\n  return (\n    <div itemScope itemType=\"http://schema.org/FAQPage\">\n      <div className=\"px-3 pb-2 text-sm divide-y divide-gray-200 space-y-2\">\n        <div\n          itemScope\n          itemProp=\"mainEntity\"\n          itemType=\"https://schema.org/Question\"\n        >\n          <h3\n            className=\"text-nearblue-600 text-sm font-semibold pt-4 pb-2\"\n            itemProp=\"name\"\n          >\n            What is {name} price now?\n          </h3>\n          <div\n            itemScope\n            itemProp=\"acceptedAnswer\"\n            itemType=\"https://schema.org/Answer\"\n          >\n            <div itemProp=\"text\" className=\"text-sm text-nearblue-600 py-2\">\n              The live price of {name} is{' '}\n              {tokens?.price !== null && tokens?.price !== undefined ? (\n                `$${dollarFormat(tokens?.price)} (${tokenTicker} / USD)`\n              ) : (\n                <span className=\"text-xs\">N/A</span>\n              )}{' '}\n              today with a current circulating market cap of{' '}\n              {tokens?.market_cap !== null &&\n              tokens?.market_cap !== undefined ? (\n                `$${dollarNonCentFormat(tokens.market_cap)}`\n              ) : (\n                <span className=\"text-xs\">N/A</span>\n              )}\n              . The on-chain marketcap of {name} is{' '}\n              {tokens.onchain_market_cap !== null &&\n              tokens.onchain_market_cap !== undefined ? (\n                `$${dollarNonCentFormat(tokens.onchain_market_cap)}`\n              ) : (\n                <span className=\"text-xs\">N/A</span>\n              )}\n              . {name}&apos;s 24-hour trading volume is{' '}\n              {tokens.volume_24h !== null && tokens.volume_24h !== undefined ? (\n                `$${dollarNonCentFormat(tokens.volume_24h)}`\n              ) : (\n                <span className=\"text-xs\">N/A</span>\n              )}\n              . {tokenTicker} to USD price is updated in real-time. {name} is{' '}\n              {tokens.change_24 !== null && tokens.change_24 !== undefined ? (\n                Number(tokens.change_24) > 0 ? (\n                  dollarFormat(tokens.change_24) + '%'\n                ) : (\n                  dollarFormat(tokens.change_24) + '%'\n                )\n              ) : (\n                <span>N/A</span>\n              )}{' '}\n              in the last 24 hours.\n            </div>\n          </div>\n        </div>\n        <div\n          itemScope\n          itemProp=\"mainEntity\"\n          itemType=\"https://schema.org/Question\"\n        >\n          <h3\n            className=\"text-nearblue-600 text-sm font-semibold pt-4 pb-2\"\n            itemProp=\"name\"\n          >\n            When was {name} created on Near Protocol?\n          </h3>\n          <div\n            itemScope\n            itemProp=\"acceptedAnswer\"\n            itemType=\"https://schema.org/Answer\"\n          >\n            <div className=\"text-sm text-nearblue-600 py-2\" itemProp=\"text\">\n              The{' '}\n              <Link href={`/address/${id}`}>\n                <a className=\"underline\">{name}</a>\n              </Link>{' '}\n              contract was created on Near Protocol at{' '}\n              {account?.created?.transaction_hash\n                ? convertToUTC(\n                    nanoToMilli(account?.created.block_timestamp),\n                    false,\n                  )\n                : account?.code_hash\n                ? 'Genesis'\n                : 'N/A'}{' '}\n              by{' '}\n              {contract?.receipt_predecessor_account_id && (\n                <Link\n                  href={`/address/${contract.receipt_predecessor_account_id}`}\n                >\n                  <a className=\"underline\">\n                    {shortenAddress(contract.receipt_predecessor_account_id)}\n                  </a>\n                </Link>\n              )}{' '}\n              through this{' '}\n              {contract?.transaction_hash && (\n                <Link href={`/txns/${contract.transaction_hash}`}>\n                  <a className=\"underline\">transaction</a>\n                </Link>\n              )}\n              . Since the creation of {name}, there has been{' '}\n              {transfers ? localFormat(transfers) : 0} on-chain transfers.\n            </div>\n          </div>\n        </div>\n        <div\n          itemScope\n          itemProp=\"mainEntity\"\n          itemType=\"https://schema.org/Question\"\n        >\n          <h3\n            className=\"text-nearblue-600 text-sm font-semibold pt-4 pb-2\"\n            itemProp=\"name\"\n          >\n            How many {name} tokens are there?\n          </h3>\n          <div\n            itemScope\n            itemProp=\"acceptedAnswer\"\n            itemType=\"https://schema.org/Answer\"\n          >\n            <div className=\"text-sm text-nearblue-600 py-2\" itemProp=\"text\">\n              There are currently{' '}\n              {tokens?.circulating_supply !== null ? (\n                `${\n                  tokens?.circulating_supply\n                    ? localFormat(tokens?.circulating_supply)\n                    : 0\n                }`\n              ) : (\n                <span>N/A</span>\n              )}{' '}\n              {tokenTicker} in circulation for a total supply of{' '}\n              {tokens?.total_supply !== null &&\n                tokens?.total_supply !== undefined &&\n                `${dollarNonCentFormat(tokens?.total_supply)}`}\n              {tokenTicker}. {tokenTicker}&apos;s supply is split between{' '}\n              {holders ? localFormat(holders) : 0} different wallet addresses.{' '}\n              {largestHolder?.account && (\n                <span>\n                  The largest {tokenTicker} holder is currently{' '}\n                  {largestHolder?.account && (\n                    <Link href={`/address/${largestHolder.account}`}>\n                      <a className=\"underline\">\n                        {shortenAddress(largestHolder.account)}\n                      </a>\n                    </Link>\n                  )}\n                  , who currently holds{' '}\n                  {localFormat(\n                    tokenAmount(largestHolder?.amount, tokens?.decimals, true),\n                  )}{' '}\n                  {tokenTicker} of all {tokenTicker}.\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.FT.FAQ", "fact_widget_deployments_id": "c24d98b17891c538c1d3607c66e0cf79", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 10}