{"tx_hash": "26oXZc5jBpEibZSet6ZNcWDbqPDCEgZ9NbHmz7LQJF2R", "action_id_social": "2mtbFGp1siQSYjeE53hUSfC41AB8crT68iorDy1b71hp-0-widget", "block_id": 117047653, "block_timestamp": "2024-04-17T16:21:28.617Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Contract.ViewOrChangeAbi", "source_code": "/**\n * Component: ContractViewOrChangeAbi\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of Contract with near abi on Near Protocol.\n * @interface Props\n * @param {string} [id] - The account identifier passed as a string.\n * @param {boolean} [connected] - Boolean indicating whether the user is currently signed in or not.\n * @param {number} [index] - The position index of the abi contract method.\n * @param {object} [method] - Object containing information about the abi contract functions.\n * @param {string} [accountId] - The account ID of the signed-in user, passed as a string.\n * @param {object} [schema] - Object containing information about the near abi contract.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/ArrowRight.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowRight = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 16 16\"\n      width={20}\n      height={20}\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8z\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowRight.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\nconst CloseCircle = (props) => {\n  const handleClick = () => {\n    if (props.onClick) {\n      props.onClick('All');\n    }\n  };\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      className={props.className}\n      onClick={handleClick}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm0-9.414l2.828-2.829 1.415 1.415L13.414 12l2.829 2.828-1.415 1.415L12 13.414l-2.828 2.829-1.415-1.415L10.586 12 7.757 9.172l1.415-1.415L12 10.586z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n\n\nconst inputTypes = ['string', 'number', 'boolean', 'null', 'json'];\n\nconst sortFields = (fields) => {\n  fields.sort((a, b) => {\n    if (a.id < b.id) return -1;\n    if (a.id > b.id) return 1;\n    return 0;\n  });\n\n  return fields;\n};\n\nfunction MainComponent(props) {\n  const { id, index, method, connected, accountId, schema, ownerId } = props;\n\n  const { capitalize, toSnakeCase } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { mapFeilds, uniqueId } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [txn, setTxn] = useState(null);\n  const [error, setError] = useState(null);\n  const [fields, setFields] = useState([]);\n  const [result, setResult] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [hideQuery, setHideQuery] = useState(false);\n  const [options, setOptions] = useState({\n    attachedDeposit: '0',\n    gas: '30000000000000',\n  });\n\n  const onRemove = (id) => () => {\n    setFields((flds) => sortFields(flds.filter((fld) => fld.id !== id)));\n  };\n\n  const onChange = (e, type, id) => {\n    setFields((flds) => {\n      const curFeild = flds.find((fld) => fld.id === id);\n      if (curFeild) {\n        const name = type;\n        const value = e.target.value;\n        const rest = flds.filter((fld) => fld.id !== id);\n\n        return sortFields([...rest, { ...curFeild, [name]: value }]);\n      }\n\n      return sortFields(flds);\n    });\n  };\n\n  const onOptionChange = (key) => (e) =>\n    setOptions((optns) => ({ ...optns, [key]: e.target.value }));\n\n  const onRead = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const args = mapFeilds(fields) ?? {};\n      Near.asyncView(id, toSnakeCase(method?.name), args)\n        .then((resp) => {\n          setError(null);\n          setTxn(resp?.transaction_outcome?.id);\n          setResult(JSON.stringify(resp, null, 2));\n        })\n        .catch((error) => {\n          console.log(error);\n          setTxn(null);\n          setError(error?.message);\n          setResult(null);\n        });\n    } catch (error) {\n      setTxn(null);\n      setError(error);\n      setResult(null);\n    }\n\n    setLoading(false);\n  };\n\n  const onWrite = (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n    try {\n      if (!accountId) throw new Error('Error in wallet connection');\n\n      const args = mapFeilds(fields) ?? {};\n      const res =\n        Near.call(id, toSnakeCase(method?.name), args);\n      setError(null);\n      setTxn(res?.transaction_outcome?.id);\n      setResult(JSON.stringify(res, null, 2));\n    } catch (error) {\n      setTxn(null);\n      setError(error);\n      setResult(null);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    const resolveTypeSchema = (typeSchema) => {\n      if (typeSchema['$ref']) {\n        const refParts = typeSchema['$ref'].split('/');\n        const definition =\n          schema.body.root_schema.definitions[refParts[refParts.length - 1]];\n        return definition.type;\n      }\n      return typeSchema.type;\n    };\n\n    const argsAbi = method?.params?.args || [];\n    argsAbi.length > 0 &&\n      argsAbi.map(\n        (argName\n\n\n) => {\n          const field = {\n            id: uniqueId(),\n            name: argName?.name,\n            type: resolveTypeSchema(argName?.type_schema),\n            value: '',\n            placeholder: '',\n          };\n          setFields((flds) => [...flds, field]);\n          setHideQuery(false);\n        },\n      );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [method?.params?.args, schema.body.root_schema.definitions]);\n\n  return (\n    <Accordion.Item\n      value={index + 1}\n      className=\"flex flex-col text-sm mb-3\"\n      key={index}\n    >\n      <Accordion.Header>\n        <Accordion.Trigger className=\"bg-gray-50 dark:bg-black-200/50 border dark:border-black-200 rounded flex items-center justify-between px-4 py-2 w-full\">\n          <span>\n            <span className=\"text-gray-400\">{index + 1}.</span>{' '}\n            {toSnakeCase(method.name ?? '')}\n          </span>\n          <ArrowRight className=\"contract-icon fill-gray-600\" />\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <Accordion.Content className=\"border p-4 rounded slide-up slide-down\">\n        <div className=\"flex max-w-xl justify-between mb-3\">\n          <div className=\"flex items-center\">\n            Arguments\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <span>\n                    <Question className=\"w-4 h-4 fill-current ml-1\" />\n                  </span>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 ml-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  Specify an arguments schema.\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          </div>\n          <div className=\"flex ml-2 mr-1 text-xs px-3 py-1.5 rounded focus:outline-none disabled:opacity-70 disabled:cursor-not-allowed\"></div>\n          <div className=\"flex ml-2 mr-1 text-xs px-3 py-1.5 rounded focus:outline-none disabled:opacity-70 disabled:cursor-not-allowed\"></div>\n        </div>\n        {fields.map((field) => (\n          <div key={field.id} className=\"flex max-w-xl items-center\">\n            <div className=\"sm:grid grid-cols-9 gap-2\">\n              <input\n                name=\"name\"\n                value={field.name}\n                onChange={(e) => onChange(e, 'name', field.id)}\n                placeholder=\"Argument name\"\n                className=\"col-span-3 block border rounded mb-3 h-9 px-3 w-full outline-none\"\n              />\n              <select\n                name=\"type\"\n                value={field.type}\n                onChange={(e) => onChange(e, 'type', field.id)}\n                className=\"col-span-2 bg-white dark:bg-black-600 block border dark:border-black-200 dark:text-neargray-10 rounded mb-3 h-9 px-3 w-full outline-none\"\n              >\n                <option value=\"\" disabled>\n                  Type\n                </option>\n                {inputTypes.map((type) => (\n                  <option value={type} key={type}>\n                    {capitalize(type)}\n                  </option>\n                ))}\n              </select>\n              <input\n                name=\"value\"\n                value={field.value}\n                onChange={(e) => onChange(e, 'value', field.id)}\n                placeholder={field.placeholder || 'Argument value'}\n                className=\"col-span-4 block border rounded mb-3 h-9 px-3 w-full outline-none\"\n              />\n            </div>\n            <button\n              onClick={onRemove(field.id)}\n              className=\"ml-3 p-1 mr-1 bg-red-300 self-start mt-1.5 hover:bg-red-400 text-xs font-medium rounded-md text-white\"\n            >\n              <CloseCircle className=\"text-white fill-white w-4 h-4\" />\n            </button>\n          </div>\n        ))}\n        <div className=\"flex max-w-xl justify-between mb-3\">\n          <div className=\"flex items-center\">\n            Options\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <span>\n                    <Question className=\"w-4 h-4 fill-current ml-1\" />\n                  </span>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 ml-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  Optional arguments for write operations.\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          </div>\n        </div>\n        <div className=\"slide-down disclosure\">\n          <div className=\"max-w-xl sm:grid grid-cols-2 gap-2\">\n            <label>\n              <span className=\"text-gray-400 text-xs\">Attached deposit</span>\n              <input\n                name=\"attachedDeposit\"\n                value={options.attachedDeposit}\n                onChange={onOptionChange('attachedDeposit')}\n                placeholder=\"Attached Deposit\"\n                className=\"block border rounded my-1 h-9 px-3 w-full outline-none\"\n              />\n            </label>\n            <label>\n              <span className=\"text-gray-400 text-xs\">Gas</span>\n              <input\n                name=\"gas\"\n                value={options.gas}\n                onChange={onOptionChange('gas')}\n                placeholder=\"Gas\"\n                className=\"block border rounded my-1 h-9 px-3 w-full outline-none\"\n              />\n            </label>\n          </div>\n        </div>\n        <div className=\"flex items-center mt-5\">\n          {!hideQuery && method?.kind === 'view' && (\n            <button\n              type=\"submit\"\n              onClick={(e) => onRead(e)}\n              disabled={loading}\n              className=\"bg-green-500 hover:bg-green-400 text-white text-xs px-3 py-1.5 rounded focus:outline-none disabled:opacity-70 disabled:cursor-not-allowed\"\n            >\n              Query\n            </button>\n          )}\n          {method?.kind === 'call' && (\n            <button\n              type=\"submit\"\n              onClick={(e) => onWrite(e)}\n              disabled={loading || !connected}\n              className=\"bg-green-500 hover:bg-green-400 text-white text-xs px-3 py-1.5 rounded focus:outline-none disabled:opacity-70 disabled:cursor-not-allowed\"\n            >\n              Write\n            </button>\n          )}\n        </div>\n        {error && (\n          <textarea\n            readOnly\n            rows={6}\n            className=\"block appearance-none outline-none w-full border rounded-lg dark:bg-red-200 dark:text-black-200 dark:border-red-400 bg-red-50 border-red-100 p-3 mt-3 resize-y\"\n            value={error}\n          />\n        )}\n        {txn && (\n          <div className=\"block appearance-none outline-none w-full border rounded-lg bg-green-50 border-green-100 p-3 mt-3\">\n            View txn details:{' '}\n            <Tooltip.Provider>\n              <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                  <span className=\"truncate max-w-[120px] inline-block align-bottom text-green-500\">\n                    <Link href={`/txns/${txn}`} className=\"hover:no-underline\">\n                      <a className=\"text-green-500\">{txn}</a>\n                    </Link>\n                  </span>\n                </Tooltip.Trigger>\n                <Tooltip.Content\n                  className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 ml-2\"\n                  align=\"start\"\n                  side=\"bottom\"\n                >\n                  {txn}\n                </Tooltip.Content>\n              </Tooltip.Root>\n            </Tooltip.Provider>\n          </div>\n        )}\n        {result && (\n          <textarea\n            readOnly\n            rows={6}\n            className=\"block appearance-none outline-none w-full border rounded-lg bg-green-50 dark:bg-green-100 dark:border-green-200 border-green-100 p-3 mt-3 resize-y\"\n            value={result}\n          />\n        )}\n      </Accordion.Content>\n    </Accordion.Item>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Contract.ViewOrChangeAbi", "fact_widget_deployments_id": "90cf900f0736b63b399d144ae101ea2c", "inserted_timestamp": "2024-04-17T17:41:46.497Z", "modified_timestamp": "2024-04-17T17:41:46.497Z", "__row_index": 4}