{"tx_hash": "3MrBFPMQvfqpfb3kosCyY2VzEfRVYpwYAzWuAt2AjwuZ", "action_id_social": "AdRnA2VbVgCE9MX9LgvRAtJb8pDHTDc2C26NusXtcpD6-0-widget", "block_id": 121210822, "block_timestamp": "2024-06-15T09:35:56.991Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.FT.Overview", "source_code": "/**\n * Component: FTOverview\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Fungible Token Overview on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n * @param {string} [id] - The token identifier passed as a string\n * @param {string} [tokenFilter] - The token filter identifier passed as a string\n * @param {Object.<string, string>} [filters] - Key-value pairs for filtering transactions. (Optional)\n *                                              Example: If provided, method=batch will filter the blocks with method=batch.\n * @param {function} [onFilterClear] - Function to clear a specific or all filters. (Optional)\n *                                   Example: onFilterClear={handleClearFilter} where handleClearFilter is a function to clear the applied filters.\n * @param {string} ownerId - The identifier of the owner of the component.\n * @param {function} [onHandleTab] - Function to handle tab changes. (Optional)\n *                                    Example: onTab={onHandleTab} where onHandleTab is a function to change tab on the page.\n * @param {string} [pageTab] - The page tab being displayed. (Optional)\n *                                 Example: If provided, tab=transfer in the url it will select the transfer tab of token details.\n * @param {Function} [requestSignInWithWallet] - Function to initiate sign-in with a wallet.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\nconst ErrorMessage = ({ icons, message, mutedText }) => {\n  return (\n    <div className=\"text-center py-24\">\n      <div className=\"mb-4 flex justify-center\">\n        <span className=\"inline-block border border-yellow-600 border-opacity-25 bg-opacity-10 bg-yellow-300 text-yellow-500 rounded-full p-4\">\n          {icons}\n        </span>\n      </div>\n\n      <h3 className=\"font-bold text-lg text-black dark:text-neargray-10\">\n        {message}\n      </h3>\n\n      <p className=\"mb-0 py-1 font-bold break-words px-2\">{mutedText}</p>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Links.jsx\" */\nconst Links = (props) => {\n  const networkAccountId =\n    context.networkId === 'mainnet'\n      ? 'nearblocksonbos.near'\n      : 'nearblocks.testnet';\n\n  const { urlHostName } = VM.require(\n    `${networkAccountId}/widget/includes.Utils.libs`,\n  );\n\n  const { meta } = props;\n  const twitter = urlHostName && urlHostName(meta?.twitter);\n  const facebook = urlHostName && urlHostName(meta?.facebook);\n  const telegram = urlHostName && urlHostName(meta?.telegram);\n\n  return (\n    <div className=\"flex space-x-4\">\n      {meta?.twitter && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={\n                  !twitter\n                    ? `https://twitter.com/${meta.twitter}`\n                    : meta.twitter\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4 dark:invert dark:filter\"\n                  src=\"/images/twitter_icon.svg\"\n                  alt=\"Twitter\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              Twitter\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n      {meta?.facebook && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={\n                  !facebook\n                    ? `https://facebook.com/${meta.facebook}`\n                    : meta.facebook\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4\"\n                  src=\"/images/facebook_icon.svg\"\n                  alt=\"Facebook\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              Facebook\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n      {meta?.telegram && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={\n                  !telegram ? `https://t.me/${meta.telegram}` : meta.telegram\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4\"\n                  src=\"/images/telegram_icon.svg\"\n                  alt=\"Telegram\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              Telegram\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n      {meta?.coingecko_id && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={`https://www.coingecko.com/en/coins/${meta.coingecko_id}?utm_campaign=partnership&utm_source=nearblocks&utm_medium=referral`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4\"\n                  src=\"/images/coingecko_icon.svg\"\n                  alt=\"coingecko\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              CoinGecko\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Links.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\nconst FaInbox = () => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 576 512\"\n      height=\"24\"\n      width=\"24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M567.938 243.908L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L8.062 243.908A47.994 47.994 0 0 0 0 270.533V400c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V270.533a47.994 47.994 0 0 0-8.062-26.625zM162.252 128h251.497l85.333 128H376l-32 64H232l-32-64H76.918l85.334-128z\"></path>\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/WarningIcon.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst WarningIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 -960 960 960\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path d=\"m40-120 440-760 440 760H40Zm138-80h604L480-720 178-200Zm302-40q17 0 28.5-11.5T520-280q0-17-11.5-28.5T480-320q-17 0-28.5 11.5T440-280q0 17 11.5 28.5T480-240Zm-40-120h80v-200h-80v200Zm40-100Z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/WarningIcon.jsx\" */\n\n\nfunction MainComponent({\n  network,\n  t,\n  id,\n  tokenFilter,\n  filters,\n  onFilterClear,\n  ownerId,\n  onHandleTab,\n  pageTab,\n  requestSignInWithWallet,\n}) {\n  const { dollarFormat, dollarNonCentFormat, localFormat, getTimeAgoString } =\n    VM.require(`${ownerId}/widget/includes.Utils.formats`);\n\n  const { getConfig, handleRateLimit, nanoToMilli, fetchData } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const tabs = ['Transfers', 'Holders', 'Info', 'FAQ', 'Comments'];\n  const [isLoading, setIsLoading] = useState(false);\n  const [txnLoading, setTxnLoading] = useState(false);\n  const [holderLoading, setHolderLoading] = useState(false);\n  const [stats, setStats] = useState({} );\n  const [token, setToken] = useState({} );\n  const [spamTokens, setSpamTokens] = useState({ blacklist: [] });\n  const [transfers, setTransfers] = useState('');\n  const [holders, setHolders] = useState('');\n  const [isVisible, setIsVisible] = useState(true);\n  const [showMarketCap, setShowMarketCap] = useState(false);\n  const [status, setStatus] = useState({\n    height: 0,\n    sync: true,\n    timestamp: '',\n  });\n  const config = getConfig && getConfig(network);\n  useEffect(() => {\n    function fetchFTData() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}fts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setToken(resp || {});\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchFTData, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchTxnsCount() {\n      setTxnLoading(true);\n      asyncFetch(`${config.backendUrl}fts/${id}/txns/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTransfers(resp.count);\n              setTxnLoading(false);\n            } else {\n              handleRateLimit(data, fetchTxnsCount, () => setTxnLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchStatsData() {\n      asyncFetch(`${config?.backendUrl}stats`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n          if (res.status === 200) {\n            setStats(data.stats[0]);\n          } else {\n            handleRateLimit(data, fetchStatsData);\n          }\n        })\n        .catch(() => {})\n        .finally(() => {});\n    }\n    function fetchHoldersCount() {\n      setHolderLoading(true);\n      asyncFetch(`${config.backendUrl}fts/${id}/holders/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.holders?.[0];\n            if (data.status === 200) {\n              setHolders(resp.count);\n              setHolderLoading(false);\n            } else {\n              handleRateLimit(data, fetchHoldersCount, () =>\n                setHolderLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchStatus() {\n      asyncFetch(`${config.backendUrl}sync/status`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.status?.aggregates.ft_holders;\n            if (data.status === 200) {\n              setStatus(resp);\n            } else {\n              handleRateLimit(data, fetchStatus);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    fetchData &&\n      fetchData(\n        'https://raw.githubusercontent.com/Nearblocks/spam-token-list/main/tokens.json',\n        (response) => {\n          const data = JSON.parse(response);\n          setSpamTokens(data);\n        },\n      );\n    if (config?.backendUrl) {\n      fetchStatsData();\n      fetchFTData();\n      fetchTxnsCount();\n      fetchHoldersCount();\n      fetchStatus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.backendUrl, id]);\n\n  function isTokenSpam(tokenName) {\n    if (spamTokens)\n      for (const spamToken of spamTokens.blacklist) {\n        const cleanedToken = spamToken.replace(/^\\*/, '');\n        if (tokenName.endsWith(cleanedToken)) {\n          return true;\n        }\n      }\n    return false;\n  }\n  const handleClose = () => {\n    setIsVisible(false);\n  };\n  const onTab = (index) => {\n    onHandleTab(tabs[index]);\n  };\n\n  const onToggle = () => setShowMarketCap((o) => !o);\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between flex-wrap pt-4\">\n        {isLoading ? (\n          <div className=\"w-80 max-w-xs px-3 py-5\">\n            <Skeleton className=\"h-7\" />\n          </div>\n        ) : (\n          <h1 className=\"break-all text-xl text-gray-700 dark:text-neargray-10 leading-8 py-4 px-2\">\n            <span className=\"inline-flex align-middle h-7 w-7\">\n              <TokenImage\n                src={token?.icon}\n                alt={token?.name}\n                appUrl={config?.appUrl}\n                className=\"w-7 h-7\"\n              />\n            </span>\n            <span className=\"inline-flex align-middle mx-1\">Token:</span>\n            <span className=\"inline-flex align-middle font-semibold\">\n              {token?.name}\n            </span>\n          </h1>\n        )}\n      </div>\n      <div>\n        {isTokenSpam(token.contract || id) && isVisible && (\n          <>\n            <div className=\"w-full flex justify-between text-left border dark:bg-nearred-500  dark:border-nearred-400 dark:text-nearred-300 bg-red-50 border-red-100 text-red-500 text-sm rounded-lg p-4\">\n              <p className=\"items-center\">\n                <WarningIcon className=\"w-5 h-5 fill-current mx-1 inline-flex\" />\n                This token is reported to have been spammed to many users.\n                Please exercise caution when interacting with it. Click\n                <a\n                  href=\"https://github.com/Nearblocks/spam-token-list\"\n                  className=\"underline mx-0.5\"\n                  target=\"_blank\"\n                >\n                  here\n                </a>\n                for more info.\n              </p>\n              <span\n                className=\"text-sm text-gray-500 hover:text-gray-800 dark:hover:text-gray-400 cursor-pointer\"\n                onClick={handleClose}\n              >\n                X\n              </span>\n            </div>\n            <div className=\"py-2\"></div>\n          </>\n        )}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mb-2 md:mb-2\">\n          <div className=\"w-full\">\n            <div className=\"h-full bg-white dark:bg-black-600 soft-shadow rounded-xl overflow-hidden\">\n              <h2 className=\"border-b dark:border-black-200 p-3 text-nearblue-600 dark:text-neargray-10 text-sm font-semibold\">\n                Overview\n              </h2>\n\n              <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-nearblue-600 dark:text-neargray-10\">\n                <div className=\"flex divide-x dark:divide-black-200  my-2\">\n                  <div className=\"flex-col flex-1 flex-wrap py-1\">\n                    <div className=\"w-full text-nearblue-700 text-xs uppercase mb-1  text-[80%]\">\n                      Price\n                    </div>\n                    {isLoading ? (\n                      <div className=\"w-20\">\n                        <Skeleton className=\"h-4\" />\n                      </div>\n                    ) : token?.price !== null && token?.price !== undefined ? (\n                      <div className=\"w-full break-words flex flex-wrap text-sm\">\n                        ${localFormat(token?.price)}\n                        {stats?.near_price && (\n                          <div className=\"text-nearblue-700 mx-1 text-sm flex flex-row items-center\">\n                            @{' '}\n                            {localFormat(\n                              (\n                                Big(token?.price) / Big(stats?.near_price)\n                              ).toString(),\n                            )}{' '}\n                            \u24c3\n                          </div>\n                        )}\n                        {token?.change_24 !== null &&\n                        token?.change_24 !== undefined ? (\n                          Number(token?.change_24) > 0 ? (\n                            <div className=\"text-neargreen text-sm flex flex-row items-center\">\n                              {' '}\n                              (+{dollarFormat(token?.change_24)}%)\n                            </div>\n                          ) : (\n                            <div className=\"text-red-500 text-sm flex flex-row items-center\">\n                              {' '}\n                              ({dollarFormat(token?.change_24)}%)\n                            </div>\n                          )\n                        ) : null}\n                      </div>\n                    ) : (\n                      'N/A'\n                    )}\n                  </div>\n                  <div className=\"flex-col flex-1 flex-wrap py-1 px-3\">\n                    <div className=\"w-full text-nearblue-700 text-xs  mb-1 flex  text-[80%]\">\n                      <span className=\"uppercase\">\n                        {showMarketCap\n                          ? 'CIRCULATING SUPPLY MARKET CAP'\n                          : 'FULLY DILUTED MARKET CAP'}\n                      </span>\n                      <span>\n                        <OverlayTrigger\n                          placement=\"bottom-start\"\n                          delay={{ show: 500, hide: 0 }}\n                          overlay={\n                            <Tooltip className=\"fixed h-auto max-w-xs bg-black  bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\">\n                              {\n                                'Calculated by multiplying the tokens Total Supply on Near with the current market price per token.'\n                              }\n                            </Tooltip>\n                          }\n                        >\n                          <Question className=\"w-4 h-4 fill-current ml-1\" />\n                        </OverlayTrigger>\n                      </span>\n                    </div>\n                    {isLoading ? (\n                      <div className=\"w-20\">\n                        <Skeleton className=\"h-4\" />\n                      </div>\n                    ) : Number(token?.fully_diluted_market_cap) > 0 ||\n                      Number(token?.market_cap) > 0 ? (\n                      <div className=\"w-full break-words flex flex-wrap text-sm\">\n                        {Number(token?.fully_diluted_market_cap) > 0 &&\n                        Number(token?.market_cap) > 0 ? (\n                          <OverlayTrigger\n                            placement=\"bottom-start\"\n                            delay={{ show: 500, hide: 0 }}\n                            overlay={\n                              <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\">\n                                {showMarketCap\n                                  ? 'Click to switch back'\n                                  : 'Click to switch'}\n                              </Tooltip>\n                            }\n                          >\n                            <p\n                              className=\"px-1 py-1 text-xs cursor-pointer rounded bg-gray-100 dark:bg-black-200\"\n                              onClick={onToggle}\n                            >\n                              {showMarketCap\n                                ? '$' + dollarNonCentFormat(token?.market_cap)\n                                : '$' +\n                                  dollarNonCentFormat(\n                                    token?.fully_diluted_market_cap,\n                                  )}\n                            </p>\n                          </OverlayTrigger>\n                        ) : (\n                          <p className=\"px-1 py-1 text-xs cursor-pointer rounded bg-gray-100 dark:bg-black-200\">\n                            {'$' +\n                              dollarNonCentFormat(\n                                Number(token?.market_cap)\n                                  ? token?.market_cap\n                                  : token?.fully_diluted_market_cap,\n                              )}\n                          </p>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"w-full break-words flex flex-wrap text-sm\">\n                        {token?.onchain_market_cap ? (\n                          <p className=\"px-1 py-1 text-xs cursor-pointer rounded bg-gray-100 dark:bg-black-200\">\n                            ${dollarNonCentFormat(token?.onchain_market_cap)}\n                          </p>\n                        ) : (\n                          'N/A'\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Max Total Supply:\n                  </div>\n                  {isLoading ? (\n                    <div className=\"w-32\">\n                      <Skeleton className=\"h-4\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {token?.total_supply\n                        ? dollarNonCentFormat(token?.total_supply)\n                        : token?.total_supply ?? ''}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Transfers:\n                  </div>\n                  {txnLoading ? (\n                    <div className=\"w-32\">\n                      <Skeleton className=\"h-4\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {transfers ? localFormat(transfers) : transfers ?? ''}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Holders:</div>\n                  {holderLoading ? (\n                    <div className=\"w-32\">\n                      <Skeleton className=\"h-4\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      <div className=\"flex items-center\">\n                        {holders ? localFormat(holders) : holders ?? ''}\n                        {!status.sync && (\n                          <OverlayTrigger\n                            placement=\"bottom-start\"\n                            delay={{ show: 500, hide: 0 }}\n                            overlay={\n                              <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\">\n                                Holders count is out of sync. Last synced block\n                                is\n                                <span className=\"font-bold mx-0.5\">\n                                  {localFormat && localFormat(status.height)}\n                                </span>\n                                {status?.timestamp &&\n                                  `(${getTimeAgoString(\n                                    nanoToMilli(status?.timestamp),\n                                  )}).`}\n                                Holders data will be delayed.\n                              </Tooltip>\n                            }\n                          >\n                            <WarningIcon className=\"w-4 h-4 fill-current ml-1\" />\n                          </OverlayTrigger>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full\">\n            <div className=\"h-full bg-white dark:bg-black-600 soft-shadow rounded-xl overflow-hidden\">\n              <h2 className=\"border-b dark:border-black-200 p-3 text-nearblue-600 dark:text-neargray-10 text-sm font-semibold\">\n                Profile Summary\n              </h2>\n              <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-nearblue-600 dark:text-neargray-10\">\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Contract:</div>\n                  {isLoading ? (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      <div className=\"w-32\">\n                        <Skeleton className=\"h-4\" />\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"w-full text-green-500 dark:text-green-250 md:w-3/4 break-words\">\n                      <Link href={`/address/${token?.contract}`}>\n                        <a className=\"text-green-500 dark:text-green-250\">\n                          {token?.contract}\n                        </a>\n                      </Link>\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Decimals:</div>\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {isLoading ? (\n                      <div className=\"w-32\">\n                        <Skeleton className=\"h-4\" />\n                      </div>\n                    ) : (\n                      token?.decimals\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Official Site:\n                  </div>\n                  <div className=\"w-full md:w-3/4 text-green-500 dark:text-green-250 break-words\">\n                    {isLoading ? (\n                      <div className=\"w-32\">\n                        <Skeleton className=\"h-4\" />\n                      </div>\n                    ) : (\n                      <a\n                        href={`${token?.website}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer nofollow\"\n                      >\n                        {token?.website}\n                      </a>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Social Profiles:\n                  </div>\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {isLoading ? (\n                      <div className=\"w-32\">\n                        <Skeleton className=\"h-4\" />\n                      </div>\n                    ) : (\n                      <Links meta={token} />\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"py-6\"></div>\n        {tokenFilter && (\n          <Widget\n            src={`${ownerId}/widget/bos-components.components.FT.TokenFilter`}\n            props={{\n              network: network,\n              id: id,\n              tokenFilter: tokenFilter,\n              ownerId,\n            }}\n          />\n        )}\n        <div className=\"block lg:flex lg:space-x-2 mb-4\">\n          <div className=\"w-full\">\n            <div>\n              {tabs &&\n                tabs.map((tab, index) => (\n                  <button\n                    key={index}\n                    onClick={() => onTab(index)}\n                    className={`text-nearblue-600 text-xs leading-4 font-medium overflow-hidden inline-block cursor-pointer p-2 mb-3 mr-2 focus:outline-none ${\n                      pageTab === tab\n                        ? 'rounded-lg bg-green-600 dark:bg-green-250  text-white'\n                        : 'hover:bg-neargray-800 bg-neargray-700 rounded-lg hover:text-nearblue-600 dark:text-white dark:hover:text-neargray-25  dark:bg-black-200'\n                    }`}\n                    value={tab}\n                  >\n                    {tab === 'FAQ' && token ? (\n                      <h2>{tab}</h2>\n                    ) : tab === 'Transfers' ? (\n                      <h2>{t ? t('token:fts.ft.transfers') : tab}</h2>\n                    ) : tab === 'Holders' ? (\n                      <h2>{t ? t('token:fts.ft.holders') : tab}</h2>\n                    ) : (\n                      <h2>{tab}</h2>\n                    )}\n                  </button>\n                ))}\n            </div>\n            <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n              <div className={`${pageTab === 'Transfers' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.FT.Transfers`}\n                    props={{\n                      network: network,\n                      id: id,\n                      t: t,\n                      filters: filters,\n                      onFilterClear: onFilterClear,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Holders' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.FT.Holders`}\n                    props={{\n                      network: network,\n                      id: id,\n                      token: token,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Info' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.FT.Info`}\n                    props={{\n                      network: network,\n                      id: id,\n                      token: token,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'FAQ' ? '' : 'hidden'} `}>\n                {!isLoading &&\n                  (Object.keys(token).length > 0 ? (\n                    <Widget\n                      src={`${ownerId}/widget/bos-components.components.FT.FAQ`}\n                      props={{\n                        network: network,\n                        id: id,\n                        token: token,\n                        ownerId,\n                      }}\n                    />\n                  ) : (\n                    <div className=\"px-6 py-4 dark:text-gray-400 text-nearblue-700 text-xs\">\n                      <ErrorMessage\n                        icons={<FaInbox />}\n                        message=\"There are no matching entries\"\n                        mutedText=\"Please try again later\"\n                      />\n                    </div>\n                  ))}\n              </div>{' '}\n              <div className={`${pageTab === 'Comments' ? '' : 'hidden'} `}>\n                <div className=\"py-3\">\n                  {\n                    <Widget\n                      src={`${ownerId}/widget/bos-components.components.Comments.Feed`}\n                      props={{\n                        network: network,\n                        path: `nearblocks.io/ft/${id}`,\n                        limit: 10,\n                        ownerId,\n                        requestSignInWithWallet,\n                      }}\n                    />\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.FT.Overview", "fact_widget_deployments_id": "bf6a2eae9356ad86f49a6e14996b7841", "inserted_timestamp": "2024-06-15T10:55:39.007Z", "modified_timestamp": "2024-06-15T10:55:39.007Z", "__row_index": 2}