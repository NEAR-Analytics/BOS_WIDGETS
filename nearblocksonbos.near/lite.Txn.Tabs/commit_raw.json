{"tx_hash": "6QZKTQHJbre9RsdmjAPKxGwwcR2bYwQDLnUGpuRG34cF", "action_id_social": "9CYpW14k6hNHfEBSLQSDxhZmU9mbaJCyTqEAsgxqMx72-0-widget", "block_id": 120910813, "block_timestamp": "2024-06-11T06:41:50.245Z", "signer_id": "nearblocksonbos.near", "widget_name": "lite.Txn.Tabs", "source_code": "let tabs = [0];\nlet Skeleton = window?.Skeleton || (({ children }) => <>{children}</>);\nconst Tabs = ({ hash, rpcUrl }) => {\n  let { rpcFetch } = VM.require(\n    `nearblocksonbos.near/widget/lite.libs.fetcher`\n  );\n  let { nestReceipts, parseOutcome, parseReceipt } = VM.require(\n    `nearblocksonbos.near/widget/lite.libs.execution`\n  );\n  const [active, setActive] = useState(tabs[0]);\n  const [data, setData] = useState({});\n  const [error, setError] = useState({});\n  const [loading, setLoading] = useState({});\n  useEffect(() => {\n    if (rpcFetch && rpcUrl && hash && active === 0) {\n      setLoading((prev) => ({ ...prev, [active]: true }));\n      rpcFetch(rpcUrl, \"EXPERIMENTAL_tx_status\", {\n        sender_account_id: \"bowen\",\n        tx_hash: hash,\n        wait_until: \"NONE\",\n      })\n        .then((response) => {\n          const blocksMap = response.receipts_outcome.reduce(\n            (map, row) =>\n              map.set(row.block_hash, {\n                hash: row.block_hash,\n                height: 0,\n                timestamp: 0,\n              }),\n            new Map()\n          );\n          const receiptsMap = response.receipts_outcome.reduce(\n            (mapping, receiptOutcome) => {\n              const receipt = parseReceipt(\n                response.receipts.find(\n                  (rpcReceipt) => rpcReceipt.receipt_id === receiptOutcome.id\n                ),\n                receiptOutcome,\n                response.transaction\n              );\n              return mapping.set(receiptOutcome.id, {\n                ...receipt,\n                outcome: parseOutcome(receiptOutcome, blocksMap),\n              });\n            },\n            new Map()\n          );\n          setData((state) => ({\n            ...state,\n            [active]: nestReceipts(\n              response.transaction_outcome.outcome.receipt_ids[0],\n              receiptsMap\n            ),\n          }));\n        })\n        .catch((err) => setError((state) => ({ ...state, [active]: err })))\n        .finally(() => setLoading((state) => ({ ...state, [active]: false })));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hash, active, data]);\n  const ExecutionLoader = () => (\n    <div>\n      <div className=\"flex justify-between items-center text-sm mb-6\">\n        <Skeleton className=\"block h-5 w-40\" loading>\n          <span className=\"text-text-label\">&nbsp;</span>\n        </Skeleton>\n      </div>\n      <div className=\"flex items-center pb-3\">\n        <span className=\"inline-block h-4 w-4 rounded-full bg-bg-skeleton mr-3\"></span>\n        <Skeleton className=\"block h-5 w-28\" loading>\n          <span className=\"font-heading font-semibold text-sm\">&nbsp;</span>\n        </Skeleton>\n      </div>\n      <div className=\"relative ml-2 mb-3 py-3 px-4\">\n        <div className=\"arrow absolute h-full left-0 top-0 border-l border-border-body\"></div>\n        <div className=\"space-y-2\">\n          <div>\n            <div>\n              <Skeleton className=\"block h-7 w-28\" loading>\n                <button className=\"text-sm text-black rounded py-1 px-3 bg-bg-function\">\n                  &nbsp;\n                </button>\n              </Skeleton>\n              <span className=\"font-semibold text-xs\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex items-center pb-3\">\n        <span className=\"inline-block h-4 w-4 rounded-full bg-bg-skeleton mr-3\" />\n        <Skeleton className=\"block h-5 w-28\" loading>\n          <span className=\"font-heading font-semibold text-sm\">&nbsp;</span>\n        </Skeleton>\n      </div>\n    </div>\n  );\n  return (\n    <div className=\"bg-bg-box lg:rounded-xl shadow px-6 mt-8\">\n      <div className=\"pt-4 pb-6\">\n        {tabs.map((tab) => (\n          <button\n            className={`py-1 mr-4 ${\n              active === tab\n                ? \"font-medium border-b-[3px] border-text-body\"\n                : \"text-text-label\"\n            }`}\n            key={tab}\n            onClick={() => setActive(tab)}\n          >\n            {tab === 0 && \"Execution Plan\"}\n          </button>\n        ))}\n      </div>\n      <div className=\"lg:px-4 pb-6\">\n        {error[active] ? (\n          <Widget\n            key=\"error\"\n            props={{ title: \"Error Fetching Txn Details\" }}\n            src={`nearblocksonbos.near/widget/lite.Atoms.Error`}\n          />\n        ) : loading[active] ? (\n          <>{active === 0 && <ExecutionLoader />}</>\n        ) : (\n          <>\n            {active === 0 && (\n              <Widget\n                key=\"execution\"\n                loading={<ExecutionLoader />}\n                props={{ receipt: data[active] }}\n                src={`nearblocksonbos.near/widget/lite.Txn.Execution`}\n              />\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\nreturn Tabs(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/lite.Txn.Tabs", "fact_widget_deployments_id": "2de26ffd44555faaf7c7e2b333be1274", "inserted_timestamp": "2024-06-11T08:04:49.294Z", "modified_timestamp": "2024-06-11T08:04:49.294Z", "__row_index": 1}