{"tx_hash": "8vSWcZznLkeEDNKLj1NiZn25e1a4gGz1dKMD6w91GTvr", "action_id_social": "ENqMz5XHaNxrtAtgxxvHdmG2Agjo3ZYJKeYHb8sn5e1F-0-widget", "block_id": 117889266, "block_timestamp": "2024-04-29T14:44:04.207Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.NodeExplorer", "source_code": "/**\n * Component: NodeExplorer\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Node validator on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {number} [currentPage] - The current page number being displayed. (Optional)\n *                                 Example: If provided, currentPage=3 will display the third page of blocks.\n * @param {function} [setPage] - A function used to set the current page. (Optional)\n *                               Example: setPage={handlePageChange} where handlePageChange is a function to update the page.\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst ArrowDown = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 13.172l4.95-4.95 1.414 1.414L12 16 5.636 9.636 7.05 8.222z\"\n      />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/ArrowDown.jsx\" */\n\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\nconst ErrorMessage = ({ icons, message, mutedText }) => {\n  return (\n    <div className=\"text-center py-24\">\n      <div className=\"mb-4 flex justify-center\">\n        <span className=\"inline-block border border-yellow-600 border-opacity-25 bg-opacity-10 bg-yellow-300 text-yellow-500 rounded-full p-4\">\n          {icons}\n        </span>\n      </div>\n\n      <h3 className=\"h-5 font-bold text-lg text-black dark:text-neargray-10\">\n        {message}\n      </h3>\n\n      <p className=\"mb-0 py-4 font-bold break-words px-2\">{mutedText}</p>\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/ErrorMessage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\nconst FaInbox = () => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      stroke-width=\"0\"\n      viewBox=\"0 0 576 512\"\n      height=\"24\"\n      width=\"24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M567.938 243.908L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L8.062 243.908A47.994 47.994 0 0 0 0 270.533V400c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V270.533a47.994 47.994 0 0 0-8.062-26.625zM162.252 128h251.497l85.333 128H376l-32 64H232l-32-64H76.918l85.334-128z\"></path>\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/FaInbox.jsx\" */\n\nconst initialValidatorFullData = {\n  validatorEpochData: [],\n  currentValidators: 0,\n  totalStake: 0,\n  seatPrice: 0,\n  elapsedTime: 0,\n  totalSeconds: 0,\n  epochProgress: 0,\n  validatorTelemetry: {},\n  total: 0,\n};\n\nfunction MainComponent({ network, currentPage, setPage, ownerId }) {\n  const {\n    convertAmountToReadableString,\n    convertTimestampToTime,\n    getConfig,\n    handleRateLimit,\n    shortenAddress,\n    timeAgo,\n    yoctoToNear,\n  } = VM.require(`${ownerId}/widget/includes.Utils.libs`);\n\n  const { formatNumber, formatWithCommas } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const [validatorFullData, setValidatorFullData] = useState\n\n(initialValidatorFullData);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalSuppy, setTotalSupply] = useState('');\n  const [totalCount, setTotalCount] = useState('');\n  const [expanded, setExpanded] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [latestBlock, setLatestBlock] = useState(0);\n  const errorMessage = 'No validator data!';\n\n  const config = getConfig && getConfig(network);\n\n  const TotalSupply =\n    totalSuppy && yoctoToNear ? yoctoToNear(totalSuppy, false) : '';\n\n  useEffect(() => {\n    function fetchValidatorData(page) {\n      setIsLoading(true);\n      asyncFetch(`${config?.backendUrl}validators?page=${page}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n          if (res.status === 200) {\n            setTimeRemaining(data?.totalSeconds ?? 0);\n            setElapsedTime(data?.elapsedTimeData ?? 0);\n            const validators = {\n              validatorEpochData: data?.validatorFullData ?? [],\n              currentValidators: data?.currentValidators,\n              totalStake: data?.totalStake ?? 0,\n              seatPrice: data?.epochStatsCheck,\n              elapsedTime: data?.elapsedTimeData ?? 0,\n              totalSeconds: data?.totalSeconds ?? 0,\n              epochProgress: data?.epochProgressData ?? 0,\n              validatorTelemetry: data?.validatorTelemetry ?? [],\n              total: data?.total,\n            };\n            setValidatorFullData((prevData) => ({\n              ...prevData,\n              [page]: validators || [],\n            }));\n            setIsLoading(false);\n          } else {\n            handleRateLimit(\n              data,\n              () => fetchValidatorData(page),\n              () => setIsLoading(false),\n            );\n          }\n          setExpanded([]);\n        })\n        .catch(() => {});\n    }\n    function fetchTotalSuppy() {\n      asyncFetch(`${config?.backendUrl}stats`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n          if (res.status === 200) {\n            setTotalSupply(data.stats[0].total_supply || 0);\n          } else {\n            handleRateLimit(data, fetchTotalSuppy);\n          }\n        })\n        .catch(() => {})\n        .finally(() => {});\n    }\n    function fetchLatestBlock() {\n      asyncFetch(`${config?.backendUrl}blocks/latest?limit=1`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          const data = res.body;\n          if (res.status === 200) {\n            setLatestBlock(data.blocks[0].block_height || 0);\n          } else {\n            handleRateLimit(data, fetchLatestBlock);\n          }\n        })\n        .catch(() => {})\n        .finally(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchLatestBlock();\n      fetchTotalSuppy();\n      fetchValidatorData(currentPage);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, currentPage]);\n\n  validatorFullData[currentPage]?.total\n    ? setTotalCount(validatorFullData[currentPage]?.total)\n    : '';\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimeRemaining((prevTimeRemaining) => prevTimeRemaining - 1);\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setElapsedTime((prevTimeRemaining) => prevTimeRemaining + 1);\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  const handleRowClick = (rowIndex) => {\n    const isRowExpanded = expanded.includes(rowIndex);\n\n    if (isRowExpanded) {\n      setExpanded((prevExpanded) =>\n        prevExpanded.filter((index) => index !== rowIndex),\n      );\n    } else {\n      setExpanded((prevExpanded) => [...prevExpanded, rowIndex]);\n    }\n  };\n\n  const stakingStatusLabel = (status) => {\n    switch (status) {\n      case 'active':\n        return 'Active';\n      case 'joining':\n        return 'Joining';\n\n      case 'leaving':\n        return 'Kickout';\n      case 'proposal':\n        return 'Proposal';\n      case 'idle':\n        return 'idle';\n\n      case 'newcomer':\n        return 'Newcomer';\n      case 'onHold':\n        return 'On hold';\n      default:\n        return;\n    }\n  };\n  const getStatusColorClass = (status) => {\n    switch (status) {\n      case 'active':\n        return {\n          textColor: 'text-emerald-500',\n          bgColor:\n            'bg-emerald-50 dark:dark:bg-emerald-500/[0.25] text-emerald-500 ',\n        };\n      case 'joining':\n        return {\n          textColor: 'text-yellow-500',\n          bgColor: 'bg-yellow-50 dark:bg-yellow-500/[0.25]  text-yellow-500',\n        };\n      case 'leaving':\n        return {\n          textColor: 'text-red-500',\n          bgColor: 'bg-red-50 text-red-500 dark:bg-red-500/[0.25]',\n        };\n      case 'proposal':\n        return {\n          textColor: 'text-teal-900',\n          bgColor:\n            'bg-teal-300 dark:bg-teal-500/[0.25] dark:text-teal-500 text-teal-900',\n        };\n      case 'idle':\n        return {\n          textColor: 'text-gray-600',\n          bgColor:\n            'bg-gray-300 text-gray-600 dark:bg-gray-500/[0.25] dark:text-gray-400',\n        };\n      case 'newcomer':\n        return {\n          textColor: 'text-orange-500',\n          bgColor:\n            'bg-orange-500 text-white dark:bg-orange-500/[0.25] dark:text-orange-300',\n        };\n      case 'onHold':\n        return {\n          textColor: 'text-blue-500',\n          bgColor:\n            'bg-blue-500 dark:bg-blue-500/[0.25] dark:text-blue-400 text-white',\n        };\n      default:\n        return {};\n    }\n  };\n\n  const columns = [\n    {\n      header: <span></span>,\n      key: '',\n      cell: (row) => (\n        <button onClick={() => handleRowClick(row.index || 0)}>\n          <ArrowDown\n            className={`${\n              row.isExpanded ? 'rotate-180' : 'rotate-0'\n            } dark:text-neargray-10`}\n          />\n        </button>\n      ),\n      tdClassName:\n        'pl-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'pl-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider ',\n    },\n    {\n      header: <span>Location</span>,\n      key: '',\n      cell: (row) =>\n        row?.description?.country_code ? (\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <img\n                  src={`https://flagcdn.com/48x36/${row?.description?.country_code?.toLowerCase()}.png`}\n                  alt={row?.description?.country}\n                  width={20}\n                  height={20}\n                />\n              </Tooltip.Trigger>\n              {row?.description?.country && (\n                <Tooltip.Content\n                  className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                  align=\"center\"\n                  side=\"top\"\n                >\n                  {row?.description?.country}\n                </Tooltip.Content>\n              )}\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        ) : (\n          <div className=\"w-5 h-5 bg-gray-300 text-black flex items-center justify-center text-xs dark:bg-black-200 dark:text-white\">\n            ?\n          </div>\n        ),\n      tdClassName:\n        'pl-2 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'pl-2 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>Status</span>,\n      key: 'View',\n      cell: (row) => (\n        <div\n          className={`inline-block ${\n            getStatusColorClass(row?.stakingStatus ?? '').bgColor\n          } rounded-xl p-1 text-center`}\n        >\n          <div>{stakingStatusLabel(row?.stakingStatus ?? '')}</div>\n        </div>\n      ),\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-xs text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>VALIDATOR</span>,\n      key: 'accountId',\n      cell: (row) => (\n        <>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <Link\n                  href={`/address/${row.accountId}`}\n                  className=\"hover:no-underline\"\n                >\n                  <a className=\"text-green-500 dark:text-green-250 hover:no-underline\">\n                    {shortenAddress(row.accountId)}\n                  </a>\n                </Link>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"start\"\n                side=\"top\"\n              >\n                {row.accountId}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n          <Tooltip.Provider>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <div>{row.publicKey ? shortenAddress(row.publicKey) : ''}</div>\n              </Tooltip.Trigger>\n              <Tooltip.Content\n                className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                align=\"start\"\n                side=\"bottom\"\n              >\n                {row.publicKey}\n              </Tooltip.Content>\n            </Tooltip.Root>\n          </Tooltip.Provider>\n        </>\n      ),\n      tdClassName: 'px-4 py-2 text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>FEE</span>,\n      key: 'poolInfo',\n      cell: (row) => (\n        <div>\n          {row?.poolInfo?.fee !== undefined\n            ? `${(\n                (row?.poolInfo?.fee.numerator /\n                  row?.poolInfo?.fee.denominator) *\n                100\n              ).toFixed(0)}%`\n            : 'N/A'}\n        </div>\n      ),\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n\n    {\n      header: <span>DELEGATORS</span>,\n      key: 'deligators',\n      cell: (row) => {\n        return (\n          <div>\n            {row?.poolInfo?.delegatorsCount !== undefined &&\n            row.poolInfo.delegatorsCount !== null\n              ? formatWithCommas(row.poolInfo.delegatorsCount.toString())\n              : 'N/A'}\n          </div>\n        );\n      },\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n    },\n    {\n      header: <span>TOTAL STAKE</span>,\n      key: 'stake',\n      cell: (row) => (\n        <span>\n          {(row.currentEpoch?.stake ??\n            row.nextEpoch?.stake ??\n            row.afterNextEpoch?.stake ??\n            `${row.contractStake}`) &&\n            formatWithCommas(\n              Number(\n                yoctoToNear &&\n                  yoctoToNear(\n                    row.currentEpoch?.stake ??\n                      row.nextEpoch?.stake ??\n                      row.afterNextEpoch?.stake ??\n                      `${row.contractStake}`,\n                    false,\n                  ),\n              ).toFixed(0),\n            ) + '  \u24c3'}\n        </span>\n      ),\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <span>STAKE %</span>,\n      key: 'percentage',\n      cell: (row) => {\n        return <div>{row?.percent}%</div>;\n      },\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <span>CUMULATIVE STAKE</span>,\n      key: 'cumulative_stake',\n      cell: (row) => {\n        return (\n          <div>\n            <div className=\"relative w-50 h-7 soft-shadow rounded-xl overflow-hidden bg-gray-300 dark:bg-black-200\">\n              <div\n                className=\"absolute top-0 left-0 right-0 bottom-0 h-full bg-green-500 text-center flex items-center justify-center\"\n                style={{\n                  width: `${row?.cumulativeStake?.cumulativePercent || 0}%`,\n                }}\n              ></div>\n              <span className=\"absolute  text-white inset-0 flex items-center justify-center\">\n                {row?.cumulativeStake?.cumulativePercent\n                  ? `${row?.cumulativeStake?.cumulativePercent}%`\n                  : 'N/A'}\n              </span>\n            </div>\n          </div>\n        );\n      },\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider whitespace-nowrap',\n    },\n    {\n      header: <span>STAKE CHANGE (24H)</span>,\n      key: '24_change',\n      cell: (row) => {\n        if (!row?.stakeChange?.value) {\n          const visibleStake =\n            row?.currentEpoch?.stake ??\n            row?.nextEpoch?.stake ??\n            row?.afterNextEpoch?.stake ??\n            row?.contractStake;\n          if (visibleStake) {\n            return `${convertAmountToReadableString(\n              visibleStake,\n              'seatPriceAmount',\n            )}  \u24c3`;\n          }\n          return null;\n        }\n        return (\n          <div\n            className={`flex ${\n              row?.stakeChange.symbol === '+'\n                ? 'text-neargreen'\n                : 'text-red-500'\n            }`}\n          >\n            <div>{row?.stakeChange?.symbol}</div>\n            <p>{row?.stakeChange?.value} \u24c3</p>\n          </div>\n        );\n      },\n      tdClassName:\n        'px-4 py-2 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10',\n      thClassName:\n        'px-4 py-2 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider whitespace-nowrap',\n    },\n  ];\n  const validatorEpochData =\n    validatorFullData[currentPage]?.validatorEpochData.length > 0\n      ? validatorFullData[currentPage]?.validatorEpochData\n      : undefined;\n\n  const ExpandedRow = (row) => {\n    const telemetry =\n      validatorFullData[currentPage]?.validatorTelemetry[row.accountId];\n    const progress = row?.currentEpoch?.progress;\n\n    const productivityRatio = progress\n      ? (progress.blocks.produced + progress.chunks.produced) /\n        (progress.blocks.total + progress.chunks.total)\n      : 0;\n    return (\n      <>\n        <tr>\n          <td colSpan={100} className=\"bg-gray-50 dark:bg-black-600 pl-4\">\n            {telemetry && (\n              <Widget\n                src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n                props={{\n                  columns: [\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex uppercase\">\n                                <div>Uptime</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'Uptime is estimated by the ratio of the number of produced blocks to the number of expected blocks. '\n                              }\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'uptime',\n                      cell: () => {\n                        return (\n                          <div>\n                            {!isNaN(productivityRatio) &&\n                              (productivityRatio * 100 == 100\n                                ? 100\n                                : (productivityRatio * 100).toFixed(3)) + '%'}\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                      thClassName:\n                        'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 tracking-wider',\n                    },\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex uppercase\">\n                                <div>Latest block</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'The block height the validation node reported in the most recent telemetry heartbeat.'\n                              }\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'latest_block',\n                      cell: () => {\n                        return (\n                          <div\n                            className={\n                              Math.abs(telemetry.lastHeight - latestBlock) >\n                              1000\n                                ? 'text-danger'\n                                : Math.abs(telemetry.lastHeight - latestBlock) >\n                                  50\n                                ? 'text-warning'\n                                : undefined\n                            }\n                          >\n                            {telemetry?.lastHeight}\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                      thClassName:\n                        'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 tracking-wider',\n                    },\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex uppercase\">\n                                <div>Latest Telemetry Update</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'Telemetry is a regular notification coming from the nodes which includes generic information like the latest known block height, and the version of NEAR Protocol agent (nearcore).'\n                              }\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'telemetry',\n                      cell: () => {\n                        return (\n                          <div>\n                            {telemetry?.lastSeen &&\n                              timeAgo(telemetry?.lastSeen)}\n                          </div>\n                        );\n                      },\n                      tdClassName:\n                        'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                      thClassName:\n                        'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 tracking-wider',\n                    },\n                    {\n                      header: (\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <div className=\"flex uppercase\">\n                                <div>Node Agent Name</div>\n                                <div>\n                                  <Question className=\"w-4 h-4 fill-current ml-1\" />\n                                </div>\n                              </div>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\" h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"start\"\n                              side=\"top\"\n                            >\n                              {\n                                'NEAR Protocol could have multiple implementations, so agent is the name of that implementation, where \"near-rs\" is.'\n                              }\n                              <a\n                                href=\"https://github.com/near/nearcore\"\n                                target=\"_blank\"\n                                className=\"text-green-250 hover:no-underline\"\n                              >\n                                the official implementation.\n                              </a>\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>\n                      ),\n                      key: 'agent_name',\n                      cell: () => {\n                        return (\n                          <span className=\"rounded bg-gray-300 dark:bg-black-200 px-1\">\n                            {telemetry?.agentName}{' '}\n                          </span>\n                        );\n                      },\n                      tdClassName:\n                        'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                      thClassName:\n                        'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 tracking-wider',\n                    },\n                    {\n                      header: 'Node Agent Version / Build',\n                      key: 'agent_version',\n                      cell: () => {\n                        return (\n                          <span className=\"rounded bg-gray-300 dark:bg-black-200 px-1\">{`${telemetry?.agentVersion}/${telemetry?.agentBuild}`}</span>\n                        );\n                      },\n                      tdClassName:\n                        'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                      thClassName:\n                        'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                    },\n                  ],\n                  data: [telemetry] || [],\n                  isLoading: false,\n                  isPagination: false,\n                  isExpanded: true,\n                }}\n              />\n            )}\n            {row?.description ? (\n              <>\n                <Widget\n                  src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n                  props={{\n                    columns: [\n                      {\n                        header: 'Name',\n                        key: 'name',\n                        cell: (row) => {\n                          return (\n                            <div>\n                              <a className=\"hover:no-underline flex\">\n                                {row?.description?.logo &&\n                                  row?.description?.logo?.startsWith(\n                                    'http',\n                                  ) && (\n                                    <span className=\"mr-1 flex justify-center\">\n                                      <img\n                                        src={row?.description?.logo}\n                                        alt={row?.description?.name}\n                                        width={20}\n                                        height={20}\n                                      />\n                                    </span>\n                                  )}\n                                {row?.description?.name\n                                  ? row?.description?.name\n                                  : '-'}\n                              </a>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.url && {\n                        header: 'Web',\n                        key: 'web',\n                        cell: (row) => {\n                          return (\n                            <div>\n                              <a\n                                className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                                href={\n                                  row?.description?.url?.startsWith('http')\n                                    ? row?.description?.url\n                                    : `http://${row?.description?.url}`\n                                }\n                                rel=\"noreferrer noopener\"\n                                target=\"_blank\"\n                              >\n                                {' '}\n                                {row?.description?.url}\n                              </a>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.email && {\n                        header: 'Email',\n                        key: 'email',\n                        cell: (row) => {\n                          return (\n                            <div>\n                              <Link\n                                className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                                href={`mailto:${row?.description?.email}`}\n                              >\n                                {row?.description?.email}{' '}\n                              </Link>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.twitter && {\n                        header: 'X',\n                        key: 'twitter',\n                        cell: (row) => {\n                          const url = row?.description?.twitter?.includes(\n                            'http',\n                          )\n                            ? row?.description?.twitter\n                            : `https://twitter.com/${row?.description?.twitter}`;\n                          return (\n                            <div>\n                              <a\n                                className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                                href={url}\n                                rel=\"noreferrer noopener\"\n                                target=\"_blank\"\n                              >\n                                {row?.description?.twitter}\n                              </a>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.discord && {\n                        header: 'Discord',\n                        key: 'discord',\n                        cell: (row) => {\n                          const url = row?.description?.discord?.includes(\n                            'http',\n                          )\n                            ? row?.description?.discord\n                            : `https://discord.com/invite/${row?.description?.discord}`;\n                          return (\n                            <div>\n                              <a\n                                className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                                href={url}\n                                rel=\"noreferrer noopener\"\n                                target=\"_blank\"\n                              >\n                                {row?.description?.discord}\n                              </a>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.github && {\n                        header: 'GitHub',\n                        key: 'github',\n                        cell: (row) => {\n                          const url = row?.description?.github?.includes('http')\n                            ? row?.description?.github\n                            : `https://github.com/${row?.description?.github}`;\n                          return (\n                            <div>\n                              <a\n                                className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                                href={url}\n                                rel=\"noreferrer noopener\"\n                                target=\"_blank\"\n                              >\n                                {row?.description?.github}\n                              </a>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.telegram && {\n                        header: 'Telegram',\n                        key: 'telegram',\n                        cell: (row) => {\n                          const url =\n                            row?.description?.telegram?.startsWith('http') ||\n                            row?.description?.telegram?.startsWith('https')\n                              ? row?.description?.telegram\n                              : `https://t.me/${row?.description?.telegram}`;\n                          return (\n                            <div>\n                              <a\n                                className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                                href={url}\n                                rel=\"noreferrer noopener\"\n                                target=\"_blank\"\n                              >\n                                {row?.description?.telegram}\n                              </a>\n                            </div>\n                          );\n                        },\n                        tdClassName:\n                          'px-4 whitespace-nowrap text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                        thClassName:\n                          'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                      },\n                      row?.description?.description &&\n                        row?.description?.description.length <= 100 && {\n                          header: 'Description',\n                          key: 'description',\n                          cell: (row) => {\n                            return (\n                              <div className=\"text-gray-400 w-full\">\n                                <small>{row?.description?.description}</small>\n                              </div>\n                            );\n                          },\n                          tdClassName:\n                            'px-4 break-words text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                          thClassName:\n                            'px-4 pt-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                        },\n                    ],\n                    data: [row] || [],\n                    isLoading: false,\n                    isPagination: false,\n                    isExpanded: true,\n                  }}\n                />\n                {row?.description?.description &&\n                  row?.description?.description.length > 100 && (\n                    <Widget\n                      src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n                      props={{\n                        columns: [\n                          row?.description?.description && {\n                            header: 'Description',\n                            key: 'description',\n                            cell: (row) => {\n                              return (\n                                <div className=\"text-gray-400 w-full\">\n                                  <small>{row?.description?.description}</small>\n                                </div>\n                              );\n                            },\n                            tdClassName:\n                              'px-4 break-words text-sm text-nearblue-600 dark:text-neargray-10 font-medium',\n                            thClassName:\n                              'px-4 text-left text-xs font-semibold text-nearblue-600 dark:text-neargray-10 uppercase tracking-wider',\n                          },\n                        ],\n                        data: [row] || [],\n                        isLoading: false,\n                        isPagination: false,\n                        isExpanded: true,\n                      }}\n                    />\n                  )}\n              </>\n            ) : (\n              <div className=\"flex justify-center text-sm text-nearblue-600 dark:text-neargray-10 font-medium py-4 \">\n                If you are node owner feel free to fill all&nbsp;\n                <a\n                  href=\"https://github.com/zavodil/near-pool-details#description\"\n                  className=\"text-green-500 dark:text-green-250 hover:no-underline\"\n                  rel=\"noreferrer noopener\"\n                  target=\"_blank\"\n                >\n                  data\n                </a>\n                &nbsp;to promote your own node!\n              </div>\n            )}\n          </td>\n        </tr>\n      </>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <div className=\"w-full md:w-1/2\">\n          <div className=\"h-full bg-white  dark:bg-black-600 soft-shadow rounded-xl overflow-hidden\">\n            <div>\n              <h2 className=\" flex justify-between border-b dark:border-black-200 p-3 text-gray-600 dark:text-neargray-10 text-sm font-semibold\">\n                <span>Staking Overview</span>\n              </h2>\n            </div>\n            <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-gray-600 dark:text-neargray-10\">\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Current Validators\n                </div>\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-4 w-16 break-words\" />\n                  ) : validatorFullData[currentPage]?.currentValidators ? (\n                    validatorFullData[currentPage]?.currentValidators\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Total Staked\n                </div>\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-4 w-16 break-words\" />\n                  ) : validatorFullData[currentPage]?.totalStake &&\n                    convertAmountToReadableString ? (\n                    convertAmountToReadableString(\n                      validatorFullData[currentPage]?.totalStake,\n                      'totalStakeAmount',\n                    )\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n              <div className=\"flex max-lg:divide-y max-lg:dark:divide-black-200 flex-col lg:flex-row \">\n                <div className=\"flex items-center justify-between lg:w-1/2 py-4\">\n                  <div className=\"w-full mb-2 lg:mb-0\">Current Seat Price</div>\n                  <div className=\"w-full break-words\">\n                    {isLoading ? (\n                      <Skeleton className=\"h-4 w-16 break-words\" />\n                    ) : (\n                      <>\n                        {validatorFullData[currentPage]?.seatPrice &&\n                        convertAmountToReadableString\n                          ? convertAmountToReadableString(\n                              validatorFullData[currentPage]?.seatPrice,\n                              'seatPriceAmount',\n                            ) + ' \u24c3'\n                          : ''}\n                      </>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between lg:w-1/2 py-4\">\n                  <div className=\"w-full mb-2 lg:mb-0\">Total Supply</div>\n                  <div className=\"w-full break-words\">\n                    {isLoading ? (\n                      <Skeleton className=\"h-4 w-16 break-words\" />\n                    ) : (\n                      <>\n                        <Tooltip.Provider>\n                          <Tooltip.Root>\n                            <Tooltip.Trigger asChild>\n                              <span>\n                                {TotalSupply && formatNumber\n                                  ? formatNumber(TotalSupply)\n                                  : ''}\n                              </span>\n                            </Tooltip.Trigger>\n                            <Tooltip.Content\n                              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                              align=\"center\"\n                              side=\"top\"\n                            >\n                              {totalSuppy + ' yocto\u24c3'}\n                            </Tooltip.Content>\n                          </Tooltip.Root>\n                        </Tooltip.Provider>{' '}\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"w-full md:w-1/2\">\n          <div className=\"h-full bg-white dark:bg-black-600 soft-shadow rounded-xl overflow-hidden\">\n            <h2 className=\"border-b dark:border-black-200 p-3 text-gray-600 dark:text-neargray-10 text-sm font-semibold\">\n              Epoch Information\n            </h2>\n            <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-gray-600 dark:text-neargray-10\">\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Epoch Elapsed Time\n                </div>\n                <div className=\"w-full text-green-500 dark:text-green-250 md:w-3/4 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-3 w-32\" />\n                  ) : validatorFullData[currentPage]?.elapsedTime &&\n                    elapsedTime &&\n                    convertTimestampToTime ? (\n                    convertTimestampToTime(elapsedTime.toString())\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                  Next Epoch ETA\n                </div>\n                <div className=\"w-full md:w-3/4 text-green-500 dark:text-green-250 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-3 w-32\" />\n                  ) : validatorFullData[currentPage]?.totalSeconds &&\n                    timeRemaining &&\n                    convertTimestampToTime ? (\n                    convertTimestampToTime(timeRemaining.toString())\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between py-4\">\n                <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Progress</div>\n                <div className=\"w-full md:w-3/4 break-words\">\n                  {isLoading ? (\n                    <Skeleton className=\"h-3 w-full\" />\n                  ) : (\n                    <>\n                      {validatorFullData[currentPage]?.epochProgress ? (\n                        <div className=\"flex space-x-4 gap-2 items-center \">\n                          <div className=\"bg-blue-900-15  h-2 w-full rounded-full\">\n                            <div\n                              className=\"bg-green-500 dark:bg-green-250 h-2 rounded-full\"\n                              style={{\n                                width: `${\n                                  validatorFullData[currentPage]\n                                    ?.epochProgress &&\n                                  Big(\n                                    validatorFullData[currentPage]\n                                      ?.epochProgress,\n                                  ).toFixed(1)\n                                }%`,\n                              }}\n                            ></div>\n                          </div>\n                          {`${\n                            validatorFullData[currentPage]?.epochProgress &&\n                            Big(\n                              validatorFullData[currentPage]?.epochProgress,\n                            ).toFixed(0)\n                          }%`}\n                        </div>\n                      ) : (\n                        ''\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"py-5\"></div>\n      <div className=\"w-full mb-10\">\n        <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n          <div className=\"flex flex-col pt-4\">\n            <div className=\"flex flex-col\">\n              {isLoading ? (\n                <div className=\"leading-7 max-w-lg w-full pl-3 py-1.5 text-sm mb-4 text-nearblue-600 dark:text-neargray-10\">\n                  <Skeleton className=\" h-4 break-words\" />\n                </div>\n              ) : (\n                <div className=\"leading-7 pl-3 px-3 text-sm mb-4 text-nearblue-600 dark:text-neargray-10\">\n                  {validatorEpochData &&\n                    validatorEpochData.length > 0 &&\n                    `${validatorFullData[currentPage]?.total || 0}${' '}\n                  Validators found`}\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-col\">\n              <Widget\n                src={`${ownerId}/widget/bos-components.components.Shared.Table`}\n                props={{\n                  columns: columns,\n                  data: validatorEpochData,\n                  count: totalCount,\n                  isLoading: isLoading,\n                  renderRowSubComponent: ExpandedRow,\n                  expanded,\n                  isPagination: true,\n                  page: currentPage,\n                  limit: 25,\n                  pageLimit: 999,\n                  setPage: setPage,\n                  Error: (\n                    <ErrorMessage\n                      icons={<FaInbox />}\n                      message={errorMessage}\n                      mutedText=\"Please try again later\"\n                    />\n                  ),\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.NodeExplorer", "fact_widget_deployments_id": "bbf3501b1220f8c119b1ad5db3b143ff", "inserted_timestamp": "2024-04-29T18:18:43.821Z", "modified_timestamp": "2024-04-29T18:18:43.821Z", "__row_index": 3}