{"tx_hash": "HomoHPgFscqTjT6H6vCicm4VmYZsDYo9BtEKzoGnwfE", "action_id_social": "6eMBqtFBpk42J8491HMw8fHaue8bZUzgbkyQWrBSjcm1-0-widget", "block_id": 119039165, "block_timestamp": "2024-05-16T10:31:26.982Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.ExportData", "source_code": "/**\n * Component: AddressTransactions\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Transactions of address on Near Protocol.\n * @interface Props\n * @param {string}  [network] - The network data to show, either mainnet or testnet.\n * @param {string} [id] - The account identifier passed as a string.\n * @param {function} [onHandleDowload] - function to handle the download.\n * @param {string} [exportType] - Type of data to be exported, available options are (transactions, ft and nft token transaction)\n * @param {string} ownerId - The identifier of the owner of the component.\n */\n\n\n\n\n\n\n\n\n\nconst today = new Date();\nconst startOfCurrentMonth = new Date(\n  Date.UTC(today.getFullYear(), today.getMonth(), 1),\n);\nconst endOfCurrentMonth = new Date(\n  Date.UTC(today.getFullYear(), today.getMonth() + 1, 0),\n);\n\nconst formattedStart = startOfCurrentMonth.toISOString().split('T')[0];\nconst formattedEnd = endOfCurrentMonth.toISOString().split('T')[0];\n\nconst initial = {\n  start: formattedStart,\n  end: formattedEnd,\n};\n\nfunction MainComponent({\n  network,\n  id,\n  onHandleDowload,\n  exportType,\n  ownerId,\n}) {\n  const { getConfig, handleRateLimit } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n  const [loading, setLoading] = useState(false);\n  const [startDate, setStartDate] = useState(initial.start);\n  const [endDate, setEndDate] = useState(initial.end);\n  const [exportData, setExportData] = useState('');\n  const [exportInfo, setExportInfo] = useState\n\n\n\n({} );\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    let url = '';\n    let text = '';\n    let file = '';\n    switch (exportType) {\n      case 'Transactions':\n        url = `account/${id}/txns/export?start=${startDate}&end=${endDate}`;\n        text = 'Receipts';\n        file = `${id}_transactions_${startDate}_${endDate}.csv`;\n        break;\n      case 'Token Transactions':\n        url = `account/${id}/ft-txns/export?start=${startDate}&end=${endDate}`;\n        text = 'Token Transactions';\n        file = `${id}_ft_transactions_${startDate}_${endDate}.csv`;\n        break;\n      case 'NFT Token Transactions':\n        url = `account/${id}/nft-txns/export?start=${startDate}&end=${endDate}`;\n        text = 'NFT Token Transactions';\n        file = `${id}_nft_transactions_${startDate}_${endDate}.csv`;\n        break;\n      default:\n    }\n\n    setExportInfo({ apiUrl: url, tittle: text, file: file });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [exportType, id, startDate, endDate]);\n\n  useEffect(() => {\n    function fetchData() {\n      try {\n        setLoading(true);\n\n        asyncFetch(`${config?.backendUrl + exportInfo.apiUrl}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then((resp) => {\n            if (resp.status === 200) {\n              const blob = new Blob([resp.body], { type: 'text/csv' });\n              const href = URL.createObjectURL(blob);\n              setExportData(href);\n              setLoading(false);\n            } else {\n              handleRateLimit(resp, fetchData, () => setLoading(false));\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n          })\n          .finally(() => {});\n      } catch (error) {\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, exportInfo.apiUrl]);\n\n  const onDownload = () => {\n    if (exportData) {\n      onHandleDowload(exportData, exportInfo.file);\n    }\n  };\n\n  const handleStartDateChange = (\n    event,\n  ) => {\n    const selectedStartDate = event.target.value;\n\n    setStartDate(selectedStartDate);\n  };\n\n  const handleEndDateChange = (\n    event,\n  ) => {\n    const selectedEndDate = event.target.value;\n\n    setEndDate(selectedEndDate);\n  };\n\n  return (\n    <>\n      <div className=\"bg-neargray-25 dark:bg-black-300 py-16 flex flex-col items-center\">\n        <h2 className=\"text-black dark:text-white text-2xl font-medium\">\n          Download Data ({exportInfo.tittle})\n        </h2>\n        <div className=\"text-sm text-neargray-600 dark:text-neargray-10 py-2 max-w-lg md:mx-12 mx-4\">\n          <p className=\"text-center\">\n            The information you requested can be downloaded from this page.\n          </p>\n          {exportInfo.tittle === 'Receipts' && (\n            <p className=\"text-center\">\n              In CSV Export you will get all the receipts of the transactions.\n            </p>\n          )}\n          <div className=\"bg-white dark:bg-black-600 dark:border-black-200 border rounded-md shadow-md w-full px-4 py-4 my-10\">\n            <p className=\"text-nearblue-600 dark:text-neargray-10 my-3 mx-2\">\n              Export the earliest 5000 records starting from\n            </p>\n\n            <div className=\"lg:flex justify-between items-center text-center\">\n              <OverlayTrigger\n                placement=\"bottom-start\"\n                delay={{ show: 500, hide: 0 }}\n                popperConfig={{\n                  modifiers: {\n                    name: 'offset',\n                    options: {\n                      offset: [17, 0],\n                    },\n                  },\n                }}\n                overlay={\n                  <Tooltip className=\"-mt-20 h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2 fixed\">\n                    Select Start Date\n                  </Tooltip>\n                }\n              >\n                <div className=\"flex items-center border-gray-300 dark:border-black-200 rounded-md text-center px-2 py-2 w-11/12 mx-2\">\n                  <input\n                    type=\"date\"\n                    name=\"startdate\"\n                    id=\"startdate\"\n                    className=\"border flex items-center  border-gray-300 dark:border-black-200 rounded-md px-2 py-2 w-11/12 mx-2 focus:outline-none text-center\"\n                    defaultValue={initial?.start}\n                    onChange={handleStartDateChange}\n                  />\n                </div>\n              </OverlayTrigger>\n              <p className=\"text-center\">To</p>\n              <OverlayTrigger\n                placement=\"bottom-start\"\n                delay={{ show: 500, hide: 0 }}\n                popperConfig={{\n                  modifiers: {\n                    name: 'offset',\n                    options: {\n                      offset: [17, 0],\n                    },\n                  },\n                }}\n                overlay={\n                  <Tooltip className=\"-mt-20 h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2 fixed\">\n                    Select End Date\n                  </Tooltip>\n                }\n              >\n                <div className=\"flex items-center  border-gray-300 dark:border-black-200 rounded-md text-center px-2 py-2 w-11/12 mx-2\">\n                  <input\n                    type=\"date\"\n                    name=\"enddate\"\n                    id=\"enddate\"\n                    className=\"border flex items-center  border-gray-300 rounded-md px-2 py-2 w-11/12 mx-2 focus:outline-none text-center\"\n                    defaultValue={initial?.end}\n                    onChange={handleEndDateChange}\n                  />\n                </div>\n              </OverlayTrigger>\n            </div>\n            <div className=\"w-full flex justify-center my-4\"></div>\n            <div className=\"w-full flex justify-center my-4\">\n              <div\n                onClick={onDownload}\n                className={`items-center cursor-pointer ${\n                  loading && 'animate-pulse cursor-not-allowed'\n                }  text-center bg-green-500 dark:bg-green-250 dark:text-neargray-10 hover:shadow-lg  text-white text-xs py-2 rounded w-20 focus:outline-none`}\n              >\n                Generate\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.ExportData", "fact_widget_deployments_id": "4859e43ea825d2161635b7a8c0f795d9", "inserted_timestamp": "2024-05-16T11:49:40.926Z", "modified_timestamp": "2024-05-16T12:57:51.740Z", "__row_index": 4}