{"tx_hash": "AMDWQ7LZq7JSAL92KkjGNe4mhS9B1VbPrNNVnEFmV2Kg", "action_id_social": "5ECsaKpAxso1bf3kEhVH7hDtYio6eN1Zv9WRC648Qjun-0-widget", "block_id": 116536526, "block_timestamp": "2024-04-10T11:23:01.959Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Shared.Buttons", "source_code": "/* INCLUDE COMPONENT: \"includes/icons/QRCodeIcon.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst QRCodeIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M16 17v-1h-3v-3h3v2h2v2h-1v2h-2v2h-2v-3h2v-1h1zm5 4h-4v-2h2v-2h2v4zM3 3h8v8H3V3zm10 0h8v8h-8V3zM3 13h8v8H3v-8zm15 0h3v2h-3v-2zM6 6v2h2V6H6zm0 10v2h2v-2H6zM16 6v2h2V6h-2z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/QRCodeIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/QrCode.jsx\" */\n/**\n * @interface Props\n * @param {string} [value] - The data value to be encoded as a QR code (e.g., a URL, text, etc.).\n * @param {number} [width] - The width of the QR code component.\n * @param {number} [height] - The height of the QR code component.\n */\n\n\n\n\n\n\nconst QrCode = (props) => {\n  const srcData = `\n    <html>\n    <body>\n      <div id=\"qrcode\" style=\"display: flex; flex-direction: column; justify-content: center; align-items: center;\"></div>\n    \n      <script src=\"https://cdn.jsdelivr.net/npm/easyqrcodejs@4.5.0/dist/easy.qrcode.min.js\"></script>\n      <script type=\"text/javascript\">\n        new QRCode(document.getElementById(\"qrcode\"), {\n        text: \"${props.value}\",\n        width: ${props.width},\n        height: ${props.height},\n        colorDark: \"#000000\",\n        colorLight: \"#ffffff\",\n        correctLevel: QRCode.CorrectLevel.H, // L, M, Q, H\n        logoBackgroundTransparent: true,\n        logoWidth: 150, \n        logoHeight: 150,\n        dotScale: .6,\n        dotScaleTiming: .6,\n        dotScaleA:.6,\n      });\n       </script> \n    </body>\n    </html>\n    `;\n\n  return (\n    <div>\n      <iframe\n        srcDoc={srcData}\n        style={{\n          width: 320,\n          minWidth: 320,\n          height: 320,\n          minHeight: 320,\n          marginTop: 30,\n        }}\n      />\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/QrCode.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/CopyIcon.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst CopyIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M7 6V3a1 1 0 011-1h12a1 1 0 011 1v14a1 1 0 01-1 1h-3v3c0 .552-.45 1-1.007 1H4.007A1.001 1.001 0 013 21l.003-14c0-.552.45-1 1.007-1H7zM5.003 8L5 20h10V8H5.003zM9 6h8v10h2V4H9v2z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/CopyIcon.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\nconst CloseCircle = (props) => {\n  const handleClick = () => {\n    if (props.onClick) {\n      props.onClick('All');\n    }\n  };\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n      className={props.className}\n      onClick={handleClick}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm0-9.414l2.828-2.829 1.415 1.415L13.414 12l2.829 2.828-1.415 1.415L12 13.414l-2.828 2.829-1.415-1.415L10.586 12 7.757 9.172l1.415-1.415L12 10.586z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/CloseCircle.jsx\" */\n\n/**\n * @interface Props\n * @param {string} [id] - The account identifier passed as a string.\n */\n\n\n\n\n\nfunction MainComponent(props) {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const onCopyClick = () => {\n    clipboard.writeText(props.id);\n    setShowTooltip((t) => !t);\n    setTimeout(() => {\n      setShowTooltip((t) => !t);\n    }, 5000);\n  };\n  return (\n    <>\n      <span className=\"inline-flex space-x-2 h-7\">\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <button\n                type=\"button\"\n                onClick={onCopyClick}\n                className=\"bg-green-500 bg-opacity-10 hover:bg-opacity-100 group rounded-full p-1.5 w-7 h-7\"\n              >\n                <CopyIcon className=\"fill-current -z-50 text-green-500 group-hover:text-white h-4 w-4\" />\n              </button>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n              sideOffset={5}\n              side=\"bottom\"\n            >\n              {showTooltip ? 'Copied!' : 'Copy account ID to clipboard'}\n              <Tooltip.Arrow className=\"fill-white\" />\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n        <Dialog.Root>\n          <Dialog.Trigger asChild>\n            <button className=\"bg-green-500 items-center bg-opacity-10 hover:bg-opacity-100 group rounded-full p-1.5 w-7 h-7\">\n              <Tooltip.Provider>\n                <Tooltip.Root>\n                  <Tooltip.Trigger asChild>\n                    <QRCodeIcon className=\"fill-current text-green-500 group-hover:text-white h-4 w-4\" />\n                  </Tooltip.Trigger>\n                  <Tooltip.Content\n                    className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                    sideOffset={8}\n                    side=\"bottom\"\n                  >\n                    Click to view QR Code\n                  </Tooltip.Content>\n                </Tooltip.Root>\n              </Tooltip.Provider>\n            </button>\n          </Dialog.Trigger>\n          <Dialog.Overlay className=\"bg-green-500 bg-opacity-10 data-[state=open]:animate-overlayShow fixed inset-0\" />\n          <Dialog.Content className=\"z-50 data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] w-96 h-96 \">\n            <Dialog.Title>\n              <div className=\"flex items-center justify-between bg-gray-100 px-3 py-4\">\n                <h4 className=\"flex items-center text-xs break-all\">\n                  {props.id}\n                </h4>\n                <Dialog.Close asChild className=\"text-gray-500 fill-current\">\n                  <button\n                    className=\"text-gray-500 fill-current\"\n                    aria-label=\"Close\"\n                  >\n                    <CloseCircle />\n                  </button>\n                </Dialog.Close>\n              </div>\n            </Dialog.Title>\n            <div className=\"p-4\">\n              <QrCode value={props.id} width={160} height={160} />\n            </div>\n          </Dialog.Content>\n        </Dialog.Root>\n      </span>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Shared.Buttons", "fact_widget_deployments_id": "b5a4ba78b1e0ca272454bff563e20875", "inserted_timestamp": "2024-04-10T12:34:58.847Z", "modified_timestamp": "2024-04-10T13:40:59.984Z", "__row_index": 1}