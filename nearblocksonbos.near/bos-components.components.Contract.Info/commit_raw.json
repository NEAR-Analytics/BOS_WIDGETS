{"tx_hash": "HomoHPgFscqTjT6H6vCicm4VmYZsDYo9BtEKzoGnwfE", "action_id_social": "6eMBqtFBpk42J8491HMw8fHaue8bZUzgbkyQWrBSjcm1-0-widget", "block_id": 119039165, "block_timestamp": "2024-05-16T10:31:26.982Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.Contract.Info", "source_code": "/**\n * Component: ContractInfo\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Details of specific Contract on Near Protocol.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The account identifier passed as a string.\n * @param {ContractInfo} [contract] - Object containing information about the associated contract.\n * @param {string} ownerId - The identifier of the owner of the component.\n * @param {boolean} [isLocked] - Boolean indicating whether the account or contract with full access key or not.\n */\n\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Question = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-1-5h2v2h-2v-2zm2-1.645V14h-2v-1.5a1 1 0 011-1 1.5 1.5 0 10-1.471-1.794l-1.962-.393A3.501 3.501 0 1113 13.355z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/Question.jsx\" */\n\n\nfunction MainComponent(props) {\n  const { network, id, contract, ownerId, isLocked } = props;\n\n  const { convertToUTC } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { getConfig, handleRateLimit, nanoToMilli } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [deploymentData, setDeploymentData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    function fetchContractData() {\n      setLoading(true);\n      asyncFetch(`${config?.backendUrl}account/${id}/contract/deployments`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(\n          (data\n\n\n\n\n) => {\n            if (data?.status === 200) {\n              const depResp = data?.body?.deployments;\n              setDeploymentData(depResp);\n              setLoading(false);\n            } else {\n              handleRateLimit(data, fetchContractData, () => setLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchContractData();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config?.backendUrl, id]);\n\n  const [createAction, updateAction] = deploymentData || [];\n\n  const action = updateAction || createAction;\n\n  const Loader = (props) => {\n    return (\n      <div\n        className={`bg-gray-200 dark:bg-black-200 h-5 rounded shadow-sm animate-pulse ${props.className} ${props.wrapperClassName}`}\n      ></div>\n    );\n  };\n\n  return (\n    <div className=\"w-full border-t dark:border-black-200\">\n      <div className=\"h-full bg-white dark:bg-black-600 text-sm text-gray-500 dark:text-neargray-10\">\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0\">\n            <OverlayTrigger\n              placement=\"bottom-start\"\n              delay={{ show: 500, hide: 0 }}\n              overlay={\n                <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                  Latest time the contract deployed.\n                </Tooltip>\n              }\n            >\n              <div>\n                <Question className=\"w-4 h-4 fill-current mr-1\" />\n              </div>\n            </OverlayTrigger>\n            Last Updated\n          </div>\n          {loading ? (\n            <div className=\"w-full md:w-3/4\">\n              <Loader wrapperClassName=\"flex w-full max-w-xl\" />\n            </div>\n          ) : (\n            <div className=\"w-full md:w-3/4  break-words\">\n              {action?.block_timestamp &&\n                convertToUTC(nanoToMilli(action?.block_timestamp), true)}\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0 \">\n            <OverlayTrigger\n              placement=\"bottom-start\"\n              delay={{ show: 500, hide: 0 }}\n              overlay={\n                <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                  The transaction unique identifier (hash) that the contract is\n                  latest deployed.\n                </Tooltip>\n              }\n            >\n              <div>\n                <Question className=\"w-4 h-4 fill-current mr-1\" />\n              </div>\n            </OverlayTrigger>\n            Transaction Hash\n          </div>\n          {loading ? (\n            <Loader wrapperClassName=\"w-32\" />\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">\n              {action?.transaction_hash && (\n                <Link\n                  href={`/txns/${action.transaction_hash}`}\n                  className=\"hover:no-underline\"\n                >\n                  <a className=\"text-green-500 dark:text-green-250 hover:no-underline\">\n                    {action.transaction_hash}\n                  </a>\n                </Link>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0 \">\n            <OverlayTrigger\n              placement=\"bottom-start\"\n              delay={{ show: 500, hide: 0 }}\n              overlay={\n                <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                  Locked contract means that there are no access keys allowing\n                  the contract code to be re-deployed\n                </Tooltip>\n              }\n            >\n              <div>\n                <Question className=\"w-4 h-4 fill-current mr-1\" />\n              </div>\n            </OverlayTrigger>\n            Contract Locked\n          </div>\n          {loading ? (\n            <Loader wrapperClassName=\"w-32\" />\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">\n              {contract?.code_base64 && isLocked ? 'Yes' : 'No'}\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap p-4\">\n          <div className=\"flex items-center w-full md:w-1/4 mb-2 md:mb-0 \">\n            <OverlayTrigger\n              placement=\"bottom-start\"\n              delay={{ show: 500, hide: 0 }}\n              overlay={\n                <Tooltip className=\"fixed h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2\">\n                  Checksum (SHA-256 in base58 encoding) of the contract binary.\n                </Tooltip>\n              }\n            >\n              <div>\n                <Question className=\"w-4 h-4 fill-current mr-1\" />\n              </div>\n            </OverlayTrigger>\n            Code Hash\n          </div>\n          {loading ? (\n            <Loader wrapperClassName=\"w-32\" />\n          ) : (\n            <div className=\"w-full md:w-3/4 break-words\">{contract?.hash}</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.Contract.Info", "fact_widget_deployments_id": "560c195eb1fd08febe265138a663c839", "inserted_timestamp": "2024-05-16T11:49:40.926Z", "modified_timestamp": "2024-05-16T12:57:51.740Z", "__row_index": 2}