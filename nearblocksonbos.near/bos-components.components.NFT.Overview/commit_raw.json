{"tx_hash": "Bh9hGA2BrdXDGa7vqMGShXQGG6ijVGMBzF6W6wQaeJE8", "action_id_social": "9fHR6kMrnKjNiCWmKjQXgX9TvuapBmMu3yYuVKvSnPeo-0-widget", "block_id": 117575277, "block_timestamp": "2024-04-25T06:50:34.206Z", "signer_id": "nearblocksonbos.near", "widget_name": "bos-components.components.NFT.Overview", "source_code": "/**\n * Component: NFTOverview\n * Author: Nearblocks Pte Ltd\n * License: Business Source License 1.1\n * Description: Non-Fungible Token Overview.\n * @interface Props\n * @param {string} [network] - The network data to show, either mainnet or testnet\n * @param {string} [id] - The token identifier passed as a string\n * @param {string} ownerId - The identifier of the owner of the component.\n * @param {Function} [t] - A function for internationalization (i18n) provided by the next-translate package.\n */\n\n\n\n\n\n\n\n\n/* INCLUDE COMPONENT: \"includes/Common/Links.jsx\" */\nconst Links = (props) => {\n  const networkAccountId =\n    context.networkId === 'mainnet'\n      ? 'nearblocksonbos.near'\n      : 'nearblocks.testnet';\n\n  const { urlHostName } = VM.require(\n    `${networkAccountId}/widget/includes.Utils.libs`,\n  );\n\n  const { meta } = props;\n  const twitter = urlHostName && urlHostName(meta?.twitter);\n  const facebook = urlHostName && urlHostName(meta?.facebook);\n  const telegram = urlHostName && urlHostName(meta?.telegram);\n\n  return (\n    <div className=\"flex space-x-4\">\n      {meta?.twitter && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={\n                  !twitter\n                    ? `https://twitter.com/${meta.twitter}`\n                    : meta.twitter\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4 dark:invert dark:filter\"\n                  src=\"/images/twitter_icon.svg\"\n                  alt=\"Twitter\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              Twitter\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n      {meta?.facebook && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={\n                  !facebook\n                    ? `https://facebook.com/${meta.facebook}`\n                    : meta.facebook\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4\"\n                  src=\"/images/facebook_icon.svg\"\n                  alt=\"Facebook\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              Facebook\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n      {meta?.telegram && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={\n                  !telegram ? `https://t.me/${meta.telegram}` : meta.telegram\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4\"\n                  src=\"/images/telegram_icon.svg\"\n                  alt=\"Telegram\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              Telegram\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n      {meta?.coingecko_id && (\n        <Tooltip.Provider>\n          <Tooltip.Root>\n            <Tooltip.Trigger asChild>\n              <a\n                href={`https://www.coingecko.com/en/coins/${meta.coingecko_id}?utm_campaign=api_partnership&utm_source=nearblocks&utm_medium=referral`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                className=\"flex\"\n              >\n                <img\n                  width=\"16\"\n                  height=\"16\"\n                  className=\"w-4 h-4\"\n                  src=\"/images/coingecko_icon.svg\"\n                  alt=\"coingecko\"\n                />\n              </a>\n            </Tooltip.Trigger>\n            <Tooltip.Content\n              className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-white text-xs p-2\"\n              sideOffset={8}\n              place=\"bottom\"\n            >\n              CoinGecko\n            </Tooltip.Content>\n          </Tooltip.Root>\n        </Tooltip.Provider>\n      )}\n    </div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Links.jsx\" */\n/* INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\n\nconst Skeleton = (props) => {\n  return (\n    <div\n      className={`bg-gray-200 dark:bg-black-200 rounded shadow-sm animate-pulse ${props.className}`}\n    ></div>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/Common/Skeleton.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/**\n * @interface Props\n * @param {string} [src] - The URL string pointing to the image source.\n * @param {string} [alt] - The alternate text description for the image.\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n * @param {string} [appUrl] - The URL of the application.\n */\n\n\n\n\n\n\n\n\n\n\nconst TokenImage = ({\n  appUrl,\n  src,\n  alt,\n  className,\n  onLoad,\n  onSetSrc,\n}) => {\n  const placeholder = appUrl\n    ? `${appUrl}images/tokenplaceholder.svg`\n    : '/images/tokenplaceholder.svg';\n\n  const handleLoad = () => {\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  const handleError = () => {\n    if (onSetSrc) {\n      onSetSrc(placeholder);\n    }\n    if (onLoad) {\n      onLoad();\n    }\n  };\n\n  return (\n    <img\n      src={src || placeholder}\n      alt={alt}\n      className={className}\n      onLoad={handleLoad}\n      onError={handleError}\n    />\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/TokenImage.jsx\" */\n/* INCLUDE COMPONENT: \"includes/icons/WarningIcon.jsx\" */\n/**\n * @interface Props\n * @param {string} [className] - The CSS class name(s) for styling purposes.\n */\n\n\n\n\nconst WarningIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 -960 960 960\"\n      width={16}\n      height={16}\n      {...props}\n    >\n      <path d=\"m40-120 440-760 440 760H40Zm138-80h604L480-720 178-200Zm302-40q17 0 28.5-11.5T520-280q0-17-11.5-28.5T480-320q-17 0-28.5 11.5T440-280q0 17 11.5 28.5T480-240Zm-40-120h80v-200h-80v200Zm40-100Z\" />\n    </svg>\n  );\n};/* END_INCLUDE COMPONENT: \"includes/icons/WarningIcon.jsx\" */\n\n\nconst tabs = ['Transfers', 'Holders', 'Inventory', 'Comments'];\n\nfunction MainComponent({ network, id, ownerId, t }) {\n  const { localFormat, getTimeAgoString } = VM.require(\n    `${ownerId}/widget/includes.Utils.formats`,\n  );\n\n  const { getConfig, handleRateLimit, nanoToMilli } = VM.require(\n    `${ownerId}/widget/includes.Utils.libs`,\n  );\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [txnLoading, setTxnLoading] = useState(false);\n  const [holderLoading, setHolderLoading] = useState(false);\n  const [token, setToken] = useState({} );\n  const [transfers, setTransfers] = useState('');\n  const [holders, setHolders] = useState('');\n  const [pageTab, setPageTab] = useState('Transfers');\n  const [status, setStatus] = useState({\n    height: 0,\n    sync: true,\n    timestamp: '',\n  });\n\n  const config = getConfig && getConfig(network);\n\n  useEffect(() => {\n    function fetchNFTData() {\n      setIsLoading(true);\n      asyncFetch(`${config.backendUrl}nfts/${id}`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.contracts?.[0];\n            if (data.status === 200) {\n              setToken(resp);\n              setIsLoading(false);\n            } else {\n              handleRateLimit(data, fetchNFTData, () => setIsLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchStatus() {\n      asyncFetch(`${config.backendUrl}sync/status`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.status?.aggregates.nft_holders;\n            if (data.status === 200) {\n              setStatus(resp);\n            } else {\n              handleRateLimit(data, fetchStatus);\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    function fetchTxnsCount() {\n      setTxnLoading(true);\n      asyncFetch(`${config.backendUrl}nfts/${id}/txns/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.txns?.[0];\n            if (data.status === 200) {\n              setTransfers(resp.count);\n              setTxnLoading(false);\n            } else {\n              handleRateLimit(data, fetchTxnsCount, () => setTxnLoading(false));\n            }\n          },\n        )\n        .catch(() => {});\n    }\n\n    function fetchHoldersCount() {\n      setHolderLoading(true);\n      asyncFetch(`${config.backendUrl}nfts/${id}/holders/count`)\n        .then(\n          (data\n\n\n\n\n) => {\n            const resp = data?.body?.holders?.[0];\n            if (data.status === 200) {\n              setHolders(resp.count);\n              setHolderLoading(false);\n            } else {\n              handleRateLimit(data, fetchHoldersCount, () =>\n                setHolderLoading(false),\n              );\n            }\n          },\n        )\n        .catch(() => {});\n    }\n    if (config?.backendUrl) {\n      fetchNFTData();\n      fetchTxnsCount();\n      fetchHoldersCount();\n      fetchStatus();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.backendUrl, id]);\n\n  const onTab = (index) => {\n    setPageTab(tabs[index]);\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between flex-wrap pt-4\">\n        {isLoading ? (\n          <div className=\"w-80 max-w-xs px-3 py-5\">\n            <Skeleton className=\"h-7\" />\n          </div>\n        ) : (\n          <h1 className=\"break-all space-x-2 text-xl text-nearblue-600 dark:text-neargray-10 leading-8 py-4 px-2\">\n            <span className=\"inline-flex align-middle h-7 w-7\">\n              <TokenImage\n                src={token?.icon}\n                alt={token?.name}\n                className=\"w-7 h-7\"\n                appUrl={config?.appUrl}\n              />\n            </span>\n            <span className=\"inline-flex align-middle \">Token: </span>\n            <span className=\"inline-flex align-middle font-semibold\">\n              {token?.name}\n            </span>\n          </h1>\n        )}\n      </div>\n      <div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          <div className=\"w-full\">\n            <div className=\"h-full bg-white dark:bg-black-600 soft-shadow rounded-xl\">\n              <h2 className=\"border-b dark:border-black-200 p-3 text-nearblue-600 dark:text-neargray-10 text-sm font-semibold\">\n                Overview\n              </h2>\n\n              <div className=\"px-3 divide-y dark:divide-black-200 text-sm text-nearblue-600 dark:text-neargray-10\">\n                <div className=\"flex flex-wrap py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Total Supply:\n                  </div>\n                  {isLoading ? (\n                    <Skeleton className=\"h-4 w-32\" />\n                  ) : (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {token?.tokens ? localFormat(token?.tokens) : ''}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Transfers:\n                  </div>\n                  {txnLoading ? (\n                    <Skeleton className=\"h-4 w-32\" />\n                  ) : (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      {transfers && token ? localFormat(transfers) : ''}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Holders:</div>\n                  {holderLoading ? (\n                    <Skeleton className=\"h-4 w-32\" />\n                  ) : (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      <div className=\"flex items-center\">\n                        {holders ? localFormat(holders) : ''}\n                        {!status.sync && (\n                          <Tooltip.Provider>\n                            <Tooltip.Root>\n                              <Tooltip.Trigger asChild>\n                                <WarningIcon className=\"w-4 h-4 fill-current ml-1\" />\n                              </Tooltip.Trigger>\n                              <Tooltip.Content\n                                className=\"h-auto max-w-xs bg-black bg-opacity-90 z-10 text-xs text-white px-3 py-2 break-words\"\n                                align=\"start\"\n                                side=\"bottom\"\n                              >\n                                Holders count is out of sync. Last synced block\n                                is\n                                <span className=\"font-bold mx-0.5\">\n                                  {localFormat && localFormat(status.height)}\n                                </span>\n                                {status?.timestamp &&\n                                  `(${getTimeAgoString(\n                                    nanoToMilli(status.timestamp),\n                                  )}).`}\n                                Holders data will be delayed.\n                              </Tooltip.Content>\n                            </Tooltip.Root>\n                          </Tooltip.Provider>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full\">\n            <div className=\"h-full bg-white dark:bg-black-600 soft-shadow rounded-xl overflow-hidden\">\n              <h2 className=\"border-b dark:border-black-200 p-3 text-nearblue-600 dark:text-neargray-10 text-sm font-semibold\">\n                Profile Summary\n              </h2>\n              <div className=\"px-3 divide-y  dark:divide-black-200 text-sm text-nearblue-600 dark:text-neargray-10\">\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">Contract:</div>\n                  {isLoading ? (\n                    <div className=\"w-full md:w-3/4 break-words\">\n                      <Skeleton className=\"h-4 w-32\" />\n                    </div>\n                  ) : (\n                    <div className=\"w-full text-green-500 dark:text-green-250 md:w-3/4 break-words\">\n                      <Link\n                        href={`/address/${token?.contract}`}\n                        className=\"hover:no-underline\"\n                      >\n                        <a className=\"text-green-500 dark:text-green-250 hover:no-underline\">\n                          {token?.contract}\n                        </a>\n                      </Link>\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Official Site:\n                  </div>\n                  <div className=\"w-full md:w-3/4 text-green-500 dark:text-green-250 break-words\">\n                    {isLoading ? (\n                      <Skeleton className=\"h-4 w-32\" />\n                    ) : (\n                      <Link\n                        href={`${token?.website}`}\n                        className=\"hover:no-underline\"\n                      >\n                        {token?.website}\n                      </Link>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-4\">\n                  <div className=\"w-full md:w-1/4 mb-2 md:mb-0 \">\n                    Social Profiles:\n                  </div>\n                  <div className=\"w-full md:w-3/4 break-words\">\n                    {/* corrections needed */}\n                    {isLoading ? (\n                      <Skeleton className=\"h-4 w-32\" />\n                    ) : (\n                      <Links meta={token} />\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"py-6\"></div>\n        <div className=\"block lg:flex lg:space-x-2 mb-4\">\n          <div className=\"w-full\">\n            <div>\n              {tabs &&\n                tabs?.map((tab, index) => (\n                  <button\n                    key={index}\n                    onClick={() => onTab(index)}\n                    className={`  text-xs leading-4 font-medium overflow-hidden inline-block cursor-pointer p-2 mb-3 mr-2 focus:outline-none ${\n                      pageTab === tab\n                        ? 'rounded-lg bg-green-600 dark:bg-green-250  text-white'\n                        : 'hover:bg-neargray-800 bg-neargray-700 dark:bg-black-200 rounded-lg hover:text-nearblue-600 text-nearblue-600 dark:text-neargray-10'\n                    }`}\n                    value={tab}\n                  >\n                    <h2>{tab}</h2>\n                  </button>\n                ))}\n            </div>\n            <div className=\"bg-white dark:bg-black-600 soft-shadow rounded-xl pb-1\">\n              <div className={`${pageTab === 'Transfers' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.NFT.Transfers`}\n                    props={{\n                      network: network,\n                      id: id,\n                      t: t,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Holders' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.NFT.Holders`}\n                    props={{\n                      network: network,\n                      id: id,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Inventory' ? '' : 'hidden'} `}>\n                {\n                  <Widget\n                    src={`${ownerId}/widget/bos-components.components.NFT.Inventory`}\n                    props={{\n                      network: network,\n                      id: id,\n                      ownerId,\n                    }}\n                  />\n                }\n              </div>\n              <div className={`${pageTab === 'Comments' ? '' : 'hidden'} `}>\n                <div className=\"py-3\">\n                  {\n                    <Widget\n                      src={`${ownerId}/widget/bos-components.components.Comments.Feed`}\n                      props={{\n                        network: network,\n                        path: `nearblocks.io/nft/${id}`,\n                        limit: 10,\n                        ownerId,\n                      }}\n                    />\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nreturn MainComponent(props, context);", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/nearblocksonbos.near/widget/bos-components.components.NFT.Overview", "fact_widget_deployments_id": "b8e688c0850588fa46fec8bab8e176b3", "inserted_timestamp": "2024-04-25T14:01:49.942Z", "modified_timestamp": "2024-04-25T14:01:49.942Z", "__row_index": 12}