{"tx_hash": "BtHBE6Jrfr9bihapaWPZaAQ58HviropRF7JjNUYBmP5Q", "action_id_social": "DfvnTWUoejKHecGYi49S2HdmMLwMDZVzFF5d8nbPkzdx-0-widget", "block_id": 110412478, "block_timestamp": "2024-01-14T20:28:55.312Z", "signer_id": "gagdiez.near", "widget_name": "Darija.Lessons.Translate", "source_code": "const { shuffle, SelectionStyle: Selected } = VM.require('gagdiez.near/widget/Darija.Lessons.Utils');\n\nif (context.loading) return <div>Loading...</div>;\n\nconst knowledge = props.knowledge;\nconst native_lang = \"spanish\";\nconst learn_lang = \"darija\";\nconst max_lives = 4;\n\nconst [idx, setIdx] = useState(0);\nconst [lives, setLives] = useState(max_lives);\nconst [wordEvaluating, setEvaluating] = useState(knowledge[0]);\nconst [wordSelected, setSelected] = useState([]);\nconst [result, setResult] = useState(\"secondary\");\nconst [step, setStep] = useState(\"verify\");\nconst [toTestAgain, setToTest] = useState([]);\nconst [showFinalScore, setShowFinalScore] = useState(false);\nconst [possibleOptions, setPossibleOptions] = useState(knowledge[1][learn_lang].split(\" \").concat(knowledge[0][learn_lang].split(\" \")));\n\nconst createOptions = (answer) => {\n  if(!answer) return\n\n  // chop the answer into words\n  let words = answer[learn_lang].split(\" \");\n  const length = words.length;\n\n  while (words.length < length + 4) {\n    const rIdx = Math.floor(Math.random() * knowledge.length);\n    const options = knowledge[rIdx][learn_lang].split(\" \");\n\n    for (let i = 0; i < options.length; i++) {\n      if (!words.includes(options[i])) {\n        words.push(options[i]);\n        continue;\n      }\n    }\n  }\n\n  // store a shuffled version\n  setPossibleOptions(shuffle(words));\n};\n\nconst passNext = () => {\n  const id = idx + 1;\n  let answer = (id < knowledge.length)? knowledge[id] : toTestAgain.pop();\n\n  if (result === \"danger\") setLives(lives - 1);\n\n  setIdx(id);\n  setSelected([]);\n  setStep(\"verify\");\n  setEvaluating(answer);\n  setResult(\"secondary\");\n  setToTest(toTestAgain);\n  createOptions(answer);\n};\n\nconst checkAnswer = () => {\n  if (!wordSelected) return;\n\n  const fullSentence = wordSelected.join(\" \")\n  const rightAnswer = wordEvaluating[learn_lang]\n\n  if (fullSentence === rightAnswer) {\n    setResult(\"success\");\n  } else {\n    setResult(\"danger\");\n    toTestAgain.push(wordEvaluating);\n    setToTest(toTestAgain);\n  }\n\n  setStep(\"next\");\n};\n\nconst Restart = () => {\n  setIdx(0);\n  setLives(4);\n  setEvaluating(knowledge[0]);\n  setSelected([]);\n  setResult(\"secondary\");\n  setStep(\"verify\");\n  setToTest([]);\n  setPossibleOptions(knowledge[0][learn_lang].split(\" \"));\n};\n\nif (lives === 0) {\n  return (\n    <div className=\"container text-center\">\n      <h1 className=\"py-3\"> Te quedaste sin vidas </h1>\n      <button onClick={Restart}> Restart </button>\n    </div>\n  );\n}\n\nif (wordEvaluating === undefined) {\n  return (\n    <div className=\"container text-center\">\n      <h1 className=\"py-3\"> \u00a1Ganaste! </h1>\n      <button onClick={Restart}> Restart </button>\n    </div>\n  );\n}\n\nconst step2Label = { verify: \"Verificar\", next: \"Siguiente\" };\nconst step2Fc = { verify: checkAnswer, next: passNext };\n\nconst selectOption = (opt) => {\n  if (step !== \"verify\") return\n  if (wordSelected.includes(opt)) return\n\n  const selected = wordSelected\n  selected.push(opt)\n  setSelected(selected)\n}\n\nfunction removeElement(array, elem) {\n  const index = array.indexOf(elem);\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n  return array\n}\n\nreturn (\n  <>\n    <div className=\"container p-3\">\n      <div className=\"text-right\"> Vidas:\n        {Array.from(Array(lives).keys()).map((i) => (\n          <span className=\"me-1\">\u2764\ufe0f</span>\n        ))}{Array.from(Array(max_lives - lives).keys()).map((i) => (\n          <span className=\"me-1\">\ud83e\ude76</span>\n        ))}\n      </div>\n\n      <h6 className=\"text-center mt-3 mb-2\"> {wordEvaluating[native_lang]} </h6>\n\n      <div style={{ minHeight: \"3.5rem\", border: \"1px solid #ccc\", borderRadius: \".5rem\" }}>\n        <div className=\"text-center p-1\">\n          {wordSelected.map((wrd) =>\n            <Selected\n              className={`btn btn-outline-secondary text-center m-1 ${result}`}\n              onClick={() => setSelected(removeElement(wordSelected, wrd))}\n            >\n              {wrd}\n            </Selected>\n          )}\n        </div>\n      </div>\n\n      <div class=\"pt-2 text-center w-75 mx-auto mt-2\">\n        {possibleOptions.map(opt => (\n          <button\n            className={`btn btn-outline-info me-1 mt-1 mb-2`}\n            onClick={() => { selectOption(opt) }}\n          >\n            {opt}\n          </button>\n        ))}\n      </div>\n\n      <button className={`mt-3 btn btn-${result}`} onClick={step2Fc[step]}> {step2Label[step]} </button>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gagdiez.near/widget/Darija.Lessons.Translate", "fact_widget_deployments_id": "68cde5cc67b7a22767867cfc0e1f16cc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}