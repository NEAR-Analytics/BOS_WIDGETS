{"tx_hash": "3aNYYA9gsZ8uvYzwiv47hfCbCqM9n4gejwKPx2NPiW7v", "action_id_social": "sJFKoTfN5HwyFZ5uSCFgsXqNoChb8YPkwQX3qbqFYvf-0-widget", "block_id": 108334861, "block_timestamp": "2023-12-19T14:36:11.957Z", "signer_id": "gagdiez.near", "widget_name": "Lesson.Select", "source_code": "if (context.loading) {\n  return <div>Loading...</div>;\n}\n\nlet knowledge = [\n  { darija: \"wld\", spanish: \"ni\u00f1o\", english: \"boy\", emoji: \"\ud83d\udc66\ud83c\udffd\" },\n  { darija: \"bnt\", spanish: \"ni\u00f1a\", english: \"girl\", emoji: \"\ud83d\udc67\ud83c\udffd\" },\n  { darija: \"dar\", spanish: \"casa\", english: \"house\", emoji: \"\ud83c\udfe0\" },\n  { darija: \"ktab\", spanish: \"libro\", english: \"book\", emoji: \"\ud83d\udcda\" },\n  { darija: \"medrasa\", spanish: \"escuela\", english: \"school\", emoji: \"\ud83c\udfeb\" },\n  // { darija: \"suq\", spanish: \"mercado\", english: \"market\" },\n  // { darija: \"jerda\", spanish: \"parque\", english: \"park\" },\n  // { darija: \"maktab\", spanish: \"oficina\", english: \"office\" },\n  // { darija: \"jame3\", spanish: \"mezquita\", english: \"mosque\" },\n  // { darija: \"sbettar\", spanish: \"hospital\", english: \"hospital\" },\n  // { darija: \"banka\", spanish: \"banco\", english: \"bank\" },\n  // { darija: \"supermarche\", spanish: \"supermercado\", english: \"supermarket\" },\n  // { darija: \"otel\", spanish: \"hotel\", english: \"hotel\" },\n  // { darija: \"khanut\", spanish: \"tienda\", english: \"shop\" },\n  // { darija: \"lma\", spanish: \"agua\", english: \"water\" },\n  // { darija: \"khubz\", spanish: \"pan\", english: \"bread\" },\n  // { darija: \"tomobil\", spanish: \"automovil\", english: \"car\" },\n  // { darija: \"ordinateur\", spanish: \"ordenador\", english: \"computer\" },\n  // { darija: \"tilifon\", spanish: \"telefono\", english: \"phone\" },\n  // { darija: \"sarut\", spanish: \"llave\", english: \"key\" },\n  // { darija: \"flus\", spanish: \"dinero\", english: \"money\" },\n  // { darija: \"biskit\", spanish: \"bicicleta\", english: \"bicycle\" },\n  // { darija: \"qet/msh\", spanish: \"gato\", english: \"cat\" },\n  // { darija: \"klb\", spanish: \"perro\", english: \"dog\" },\n];\n\nif (knowledge.length < 4) return \"Add more than 4 options\";\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n  return array;\n}\n\nconst [score, setScore] = useState(0);\nconst [possibleOptions, setPossibleOptions] = useState(knowledge.slice(0, 4));\n\nconst [idx, setIdx] = useState(0);\n\nconst [wordEvaluating, setEvaluating] = useState(knowledge[0]);\nconst [wordSelected, setSelected] = useState(null);\nconst [check, setCheck] = useState(\"\");\nconst [step, setStep] = useState(\"verify\");\nconst [toTestAgain, setToTest] = useState([]);\nconst [showFinalScore, setShowFinalScore] = useState(false);\n\nconst createOptions = (answer) => {\n  // the answer is one of the options\n  let options = [answer];\n\n  // add 3 random options\n  while (options.length < 4) {\n    const rIdx = Math.floor(Math.random() * knowledge.length);\n    if (!options.some((e, i, a) => e.darija === knowledge[rIdx].darija)) {\n      options.push(knowledge[rIdx]);\n    }\n  }\n\n  // store a shuffled version\n  const shuffled = shuffle(options);\n  setPossibleOptions(shuffled);\n};\n\nconst passNext = () => {\n  const id = idx + 1;\n  setIdx(id);\n\n  if (id >= knowledge.length && toTestAgain.length === 0) {\n    return setShowFinalScore(true);\n  }\n\n  let answer;\n\n  if (id < knowledge.length) {\n    answer = knowledge[id];\n  } else {\n    answer = toTestAgain.pop();\n    setToTest(toTestAgain);\n  }\n\n  setEvaluating(answer);\n  setSelected(null);\n  setStep(\"verify\");\n  setCheck(\"\");\n  createOptions(answer);\n  console.log(toTestAgain);\n};\n\nconst checkAnswer = () => {\n  if (wordSelected.darija === knowledge[idx].darija) {\n    setScore(score + 1);\n    setCheck(\"correct\");\n  } else {\n    setCheck(\"wrong\");\n    toTestAgain.push(knowledge[idx]);\n    setToTest(toTestAgain);\n  }\n\n  setStep(\"next\");\n};\n\nconst Selection = styled.div`\n  &:hover {\n    cursor: pointer;\n    background-color: rgb(216 244 255);\n  }\n\n  &.selected {\n    background-color: rgb(216 244 255);\n  }\n\n  &.correct {\n    background-color: rgb(216 255 216);\n  }\n\n  &.wrong {\n    background-color: rgb(255 216 216);\n  }\n`;\n\nif (showFinalScore) {\n  return (\n    <div className=\"container\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          Final Score: {score}\n          <button\n            onClick={() => {\n              href.location = href.location;\n            }}\n          >\n            {\" \"}\n            Restart{\" \"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst step2Label = { verify: \"Verificar\", next: \"Siguiente\" };\nconst step2Fc = { verify: checkAnswer, next: passNext };\n\nreturn (\n  <>\n    <div className=\"container\">\n      <div class=\"row\">\n        <div class=\"col-6\">Darija: {wordEvaluating.darija}</div>\n        <div class=\"col-6\">Score: {score}</div>\n      </div>\n\n      <div class=\"row\">\n        {possibleOptions.map((opt) => (\n          <div className=\"col-sm-12 col-md-6 p-2\">\n            <Selection\n              className={`card text-center ${\n                opt.darija === wordSelected.darija && \"selected\"\n              } ${opt.darija === wordSelected.darija && check}`}\n              onClick={() => setSelected(opt)}\n            >\n              <h5 className=\"card-title pt-2\">\n                {\" \"}\n                {opt.emoji} {opt.spanish}{\" \"}\n              </h5>\n            </Selection>\n          </div>\n        ))}\n      </div>\n\n      <button onClick={step2Fc[step]}> {step2Label[step]} </button>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gagdiez.near/widget/Lesson.Select", "fact_widget_deployments_id": "0eeec31d771915211102674c79c6db7f", "inserted_timestamp": "2023-12-19T16:51:19.065Z", "modified_timestamp": "2023-12-19T17:25:41.020Z", "__row_index": 2}