{"tx_hash": "3j4gJ9DdC4RcHg77YiWxG1623tcpM5tnLem4NZpwJuPp", "action_id_social": "8X5b4UtrF2YX82y4WoGGL89E8ihAnvvZi6kqruCWhCoC-0-widget", "block_id": 109230873, "block_timestamp": "2023-12-31T10:39:23.427Z", "signer_id": "gagdiez.near", "widget_name": "Darija.Knowledge.List", "source_code": "if (context.loading) return \"Loading ...\";\n\n// We hardcode this, since anyway they need to be coded\nconst evaluators = {\n  Select: \"gagdiez.near/widget/Darija.Lessons.Select\",\n  Translate: \"gagdiez.near/widget/Darija.Lessons.Translate\",\n};\n\n// map evaluators to their names\nconst evaluators2name = {};\nfor (const key of Object.keys(evaluators)) {\n  evaluators2name[evaluators[key]] = key;\n}\n\n// indexedKnowledge is basically a list of titles, uuids and blockheights\nconst knowledge = Social.index(\"knowledge\", \"darija\", { order: \"desc\" }) || [];\n\nconst title2uuid = {};\nconst uuid2title = {};\nfor (const indexed of knowledge) {\n  let {\n    blockHeight,\n    value: { title, uuid },\n  } = indexed;\n\n  uuid = uuid ? uuid : blockHeight;\n\n  if (uuid in uuid2title) continue;\n  title2uuid[title] = { uuid, blockHeight };\n  uuid2title[uuid] = title;\n}\n\n// We store the lessons as a JSON-encoded array, since anyway we might want to change them\nconst [lessons, setLessons] = useState([]);\nconst lessonsDB = Social.get(\"gagdiez.near/darija/lessons\");\n\nuseEffect(() => {\n  const parsed = JSON.parse(lessonsDB) || [];\n\n  const readableLessons = parsed.map(({ name, knowledge, evaluator }) => ({\n    name,\n    knowledge: uuid2title[knowledge],\n    evaluator: evaluators2name[evaluator],\n  }));\n\n  setLessons(readableLessons);\n}, [lessonsDB])\n\n// Link to Creator widget\nconst knowledgeLink = (item) =>\n  `/gagdiez.near/widget/Darija.Knowledge.Create?uuid=${item.uuid}&blockHeight=${item.blockHeight}`;\n\nconst update = () => {\n  // transform lesson title into uuid and evaluator name into link\n  const newLessons = lessons.map(({ name, knowledge, evaluator }) => ({\n    name,\n    knowledge: title2uuid[knowledge].blockHeight,\n    evaluator: evaluators[evaluator],\n  }));\n\n  Social.set({\n    darija: { lessons: JSON.stringify(newLessons) },\n  });\n};\n\nreturn (\n  <>\n    <div className=\"container\">\n      <div className=\"\">\n        <h5>Knowledge</h5>\n        <ul className=\"list-group mt-3\">\n          {Object.keys(title2uuid).map(key =>\n            <li class=\"list-group-item\">\n              <a href={knowledgeLink(title2uuid[key])}> {key}</a>\n            </li>\n          )}\n          <li class=\"list-group-item\">\n            <a href={knowledgeLink({})}>(+) Nuevo (+)</a>\n          </li>\n        </ul>\n      </div>\n      <hr />\n      <div className=\"\">\n        <h5>Lessons</h5>\n        <Widget\n          src=\"gagdiez.near/widget/Darija.Components.Table\"\n          props={{\n            elements: lessons,\n            keys: [\"name\", \"knowledge\", \"evaluator\"],\n            editors: {\n              name: { type: \"text\" },\n              knowledge: {\n                type: \"select\",\n                options: Object.keys(title2uuid),\n              },\n              evaluator: {\n                type: \"select\",\n                options: Object.keys(evaluators),\n              },\n            },\n            onUpdate: setLessons,\n          }}\n        />\n        <button class=\"btn btn-success\" onClick={update}>\n          Update\n        </button>\n      </div>\n    </div>\n  </>\n);\n", "metadata": {"fork_of": "gagdiez.near/widget/Darija.Knowledge.List@109230105"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gagdiez.near/widget/Darija.Knowledge.List", "fact_widget_deployments_id": "26966c6be1ca69ea4dd3db100628c617", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 14}