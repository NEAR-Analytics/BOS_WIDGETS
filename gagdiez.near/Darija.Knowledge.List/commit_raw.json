{"tx_hash": "C1annjRKXC3zTNyDjrvMeniUPHYv2x7fqGsgYnCeE1F1", "action_id_social": "DuanrRxrudmH5BqYP76ZQ4hJEwfxZcstcds6fCxbGjTt-0-widget", "block_id": 109164234, "block_timestamp": "2023-12-30T15:30:57.840Z", "signer_id": "gagdiez.near", "widget_name": "Darija.Knowledge.List", "source_code": "if (context.loading) return \"Loading ...\";\n\n// indexedKnowledge is basically a list of titles, uuids and blockheights\nconst indexedKnowledge =\n  Social.index(\"knowledge\", \"darija\", { order: \"desc\" }) || [];\n\n// We store the lessons as a JSON-encoded array, since anyway we might want to change them\nconst lessonsDB = JSON.parse(Social.get(\"gagdiez.near/darija/lessons\")) || [];\n\nconst uuids = [];\nconst filteredKnowledge = [];\n\nfor (const indexed of indexedKnowledge) {\n  let {\n    blockHeight,\n    value: { title, uuid },\n  } = indexed;\n\n  console.log(uuid, blockHeight, title);\n\n  uuid = uuid ? uuid : blockHeight;\n\n  if (uuids.includes(uuid)) continue;\n  uuids.push(uuid);\n  filteredKnowledge.push({ uuid, title });\n}\n\n// We hardcode this, since anyway they need to be coded\nconst evaluators = [\n  { name: \"Select\", link: \"gagdiez.near/widget/Lessons.Select\" },\n  { name: \"Translate\", link: \"gagdiez.near/widget/Lessons.Translate\" },\n];\n\n// Link to Creator widget\nconst knowledgeLink = (blockHeight) =>\n  `gagdiez.near/widget/Darija.Knowledge.Create?uuid=${blockHeight}`;\n\n// lessonsDB is {knowledge: uuid, evaluator: link}\n// we need to transform it into {knowledge: title, evaluator: name}\nfor (const lesson of lessonsDB) {\n  const knowledge = filteredKnowledge.find(\n    (item) => item.uuid === lesson.knowledge\n  ).title;\n  const evaluator = evaluators.find((item) => item.link === lesson.evaluator)\n    .name;\n  lesson.knowledge = knowledge;\n  lesson.evaluator = evaluator;\n}\n\nconst [lessons, setLessons] = useState(lessonsDB);\n\nconst update = () => {\n  // transform lesson title into uuid and evaluator name into link\n  const newLessons = lessons.map((lesson) => {\n    const knowledge = filteredKnowledge.find(\n      (item) => item.title === lesson.knowledge\n    ).uuid;\n    const evaluator = evaluators.find(\n      (item) => item.name === lesson.evaluator\n    ).link;\n    return { ...lesson, knowledge, evaluator };\n  });\n\n  Social.set({\n    darija: { lessons: JSON.stringify(newLessons) },\n  });\n};\n\nreturn (\n  <>\n    <div className=\"container\">\n      <div className=\"\">\n        <h5>Knowledge</h5>\n        <ul className=\"list-group mt-3\">\n          {filteredKnowledge.map((item, index) => (\n            <li class=\"list-group-item\">\n              <a href={knowledgeLink(item.uuid)}> {item.title}</a>\n            </li>\n          ))}\n          <li class=\"list-group-item\">\n            <a href={knowledgeLink(null)}>(+) Nuevo (+)</a>\n          </li>\n        </ul>\n      </div>\n      <hr />\n      <div className=\"\">\n        <h5>Lessons</h5>\n        <Widget\n          src=\"gagdiez.near/widget/Darija.Components.Table\"\n          props={{\n            elements: lessons,\n            keys: [\"knowledge\", \"evaluator\"],\n            editors: {\n              knowledge: {\n                type: \"select\",\n                options: filteredKnowledge.map((item) => item.title),\n              },\n              evaluator: {\n                type: \"select\",\n                options: evaluators.map((item) => item.name),\n              },\n            },\n            onUpdate: setLessons,\n          }}\n        />\n        <button class=\"btn btn-success\" onClick={update}>\n          Update\n        </button>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gagdiez.near/widget/Darija.Knowledge.List", "fact_widget_deployments_id": "65ebb19ff6012c96710069df4ca6fc2b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}