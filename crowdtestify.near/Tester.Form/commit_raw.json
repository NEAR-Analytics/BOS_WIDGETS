{"tx_hash": "FFLf1KkWaiKsXLRohUxeuvWbBDTshq7SCyhLWBVJdvS4", "action_id_social": "3Eb14EWZBSMBmfcswTnpc2t17PykG97tyEkwDY4HcQFJ-0-widget", "block_id": 99472944, "block_timestamp": "2023-08-23T12:33:27.658Z", "signer_id": "crowdtestify.near", "widget_name": "Tester.Form", "source_code": null, "metadata": null, "branch": {"draft": {"": "const ownerId = \"crowdtestify.near\";\nconst skillsArray = [\n  { name: \"ProgrammingBasics\" },\n  { name: \"TestingBasics\" },\n  { name: \"FunctionalTesting\" },\n  { name: \"LoadTesting\" },\n  { name: \"IntegrationTesting\" },\n  { name: \"UnitTesting\" },\n  { name: \"SecurityTesting\" },\n  { name: \"Selenium\" },\n  { name: \"Playwright\" },\n  { name: \"JUnit\" },\n  { name: \"TestNG\" },\n  { name: \"PythonAutomation\" },\n  { name: \"JavaScriptAutomation\" },\n  { name: \"MobileAppTesting\" },\n  { name: \"WebAppTesting\" },\n  { name: \"ApiTesting\" },\n  { name: \"DatabaseTesting\" },\n  { name: \"CloudTesting\" },\n  { name: \"AgileTesting\" },\n  { name: \"ContinuousIntegration\" },\n  { name: \"ContinuousDeployment\" },\n  { name: \"PerformanceTesting\" },\n  { name: \"UITesting\" },\n  { name: \"UXTesting\" },\n  { name: \"CrossPlatformTesting\" },\n  { name: \"VRTesting\" },\n  { name: \"BlockchainTesting\" },\n  { name: \"TesIoTTestingtinBasics\" },\n  { name: \"MicroservicesTesting\" },\n];\n\nif (!context.accountId) {\n  return (\n    <Widget\n      src={`${ownerId}/widget/InfoSegment`}\n      props={{\n        title: \"Not logged in!\",\n        description: \"You must log in to create a new Tester!\",\n      }}\n    />\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 3em;\n  padding-bottom: 3em;\n`;\n\nconst Header = styled.h1`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 2em;\n  line-height: 1.4em;\n  text-align: center;\n  color: #000000;\n`;\n\nconst SubHeader = styled.h2`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 0.95em;\n  line-height: 1.25em;\n  text-align: center;\n  color: #101828;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  width: 60%;\n  gap: 1em;\n`;\n\nconst FormHeader = styled.h3`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 0px 0px 0.5em;\n  border-bottom: 1px solid #eceef0;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.125em;\n  line-height: 1.25em;\n  color: #000000;\n  width: 100%;\n`;\n\nconst FormFooter = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nState.init({\n  name: \"\",\n  nameError: \"\",\n  accountId: context.accountId,\n  accountIdError: \"\",\n  skills: [],\n  skillsError: \"\",\n});\n\nconst slideDown = styled.keyframes`\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-collapsible-content-height);\n  }\n`;\n\nconst slideUp = styled.keyframes`\n  from {\n    height: var(--radix-collapsible-content-height);\n  }\n  to {\n    height: 0;\n  }\n`;\n\nconst Hidable = styled(\"Collapsible.Content\")`\n  overflow: hidden;\n\n  &[data-state=\"open\"] {\n    animation: ${slideDown} 0.3s ease-in-out;\n  }\n\n  &[data-state=\"closed\"] {\n    animation: ${slideUp} 0.3s ease-in-out;\n  }\n`;\n\nconst validateForm = () => {\n  return (\n    state.name &&\n    state.nameError === \"\" &&\n    (!state.skills || state.skillsError === \"\")\n  );\n};\n\nreturn (\n  <Container>\n    <div>\n      <Header>Create new Tester</Header>\n    </div>\n    <Form>\n      <FormHeader>General</FormHeader>\n      <Widget\n        src={`${ownerId}/widget/Inputs.Text`}\n        props={{\n          label: \"Tester name *\",\n          placeholder: \"Enter Tester name\",\n          value: state.name,\n          onChange: (name) => State.update({ name }),\n          validate: () => {\n            if (state.name.length < 3) {\n              State.update({ nameError: \"Name must be at least 3 characters\" });\n              return;\n            }\n\n            if (state.name.length > 100) {\n              State.update({\n                nameError: \"Name must be less than 100 characters\",\n              });\n              return;\n            }\n\n            State.update({ nameError: \"\" });\n          },\n          error: state.nameError,\n        }}\n      />\n      <Widget\n        src={`${ownerId}/widget/Inputs.MultiSelect`}\n        props={{\n          label: \"Skills\",\n          placeholder: \"Add skills\",\n          options: skillsArray,\n          value: state.skills,\n          onChange: (skills) =>\n            State.update({\n              skills: skills.map(({ name }) => ({\n                name: name.trim().replaceAll(/\\s+/g, \"-\"),\n              })),\n            }),\n        }}\n      />\n      <FormFooter>\n        <Widget\n          src={`${ownerId}/widget/Buttons.Blue`}\n          props={{\n            disabled: !validateForm(),\n            onClick: () => {\n              if (!validateForm()) return;\n              const data = {\n                [state.accountId]: {\n                  profile: {\n                    name: state.name,\n                    ...(state.skills.length\n                      ? {\n                          tags: state.skills.reduce(\n                            (acc, { name }) =>\n                              Object.assign(acc, { [name]: \"\" }),\n                            {}\n                          ),\n                        }\n                      : {}),\n                  },\n                },\n              };\n              const transactions = [\n                {\n                  contractName: ownerId,\n                  methodName: \"register_tester\",\n                  args: {\n                    account_id: state.accountId,\n                    skills: state.skills.map((skill) => skill.name),\n                  },\n                },\n              ];\n              Near.call(transactions);\n            },\n            text: <>Create Tester</>,\n          }}\n        />\n      </FormFooter>\n    </Form>\n  </Container>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/crowdtestify.near/widget/Tester.Form", "fact_widget_deployments_id": "6488458aea0b33a080158255df051418", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}