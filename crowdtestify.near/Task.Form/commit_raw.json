{"tx_hash": "EmdRQBGzt1TZMstdKeS2n58iYziy28hbkoFZSV9dfTiN", "action_id_social": "GTr3pg2aYzBxU8d8aaY8USNgnroYvtFBddGKBtm5Vxtv-0-widget", "block_id": 99718376, "block_timestamp": "2023-08-26T17:46:12.403Z", "signer_id": "crowdtestify.near", "widget_name": "Task.Form", "source_code": "const ownerId = \"crowdtestify.near\";\n\nconst options = [\n  { text: \"Intern\", value: \"Intern\" },\n  { text: \"Junior\", value: \"Junior\" },\n  { text: \"Middle\", value: \"Middle\" },\n  { text: \"Senior\", value: \"Senior\" },\n];\n\nif (!context.accountId) {\n  return (\n    <Widget\n      src={`${ownerId}/widget/InfoSegment`}\n      props={{\n        title: \"Not logged in!\",\n        description: \"You must log in to create a new project!\",\n      }}\n    />\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 3em;\n  padding-bottom: 3em;\n`;\n\nconst Header = styled.h1`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 2em;\n  line-height: 1.4em;\n  text-align: center;\n  color: #000000;\n`;\n\nconst SubHeader = styled.h2`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 0.95em;\n  line-height: 1.25em;\n  text-align: center;\n  color: #101828;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  width: 60%;\n  gap: 1em;\n`;\n\nconst FormHeader = styled.h3`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 0px 0px 0.5em;\n  border-bottom: 1px solid #eceef0;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 1.125em;\n  line-height: 1.25em;\n  color: #000000;\n  width: 100%;\n`;\n\nconst FormFooter = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nState.init({\n  name: \"\",\n  nameError: \"\",\n  description: \"\",\n  descriptionError: \"\",\n  skills: [],\n  skillsError: \"\",\n  numTestersRequired: null,\n  numTestersRequiredError: \"\",\n  testerReward: null,\n  testerRewardError: \"\",\n  badge: \"\",\n  badgeError: \"\",\n});\n\nconst validateForm = () => {\n  return (\n    state.name &&\n    state.nameError === \"\" &&\n    state.description &&\n    state.descriptionError === \"\" &&\n    state.skills &&\n    state.skillsError === \"\" &&\n    state.testersRequired &&\n    state.testersRequiredError === \"\" &&\n    state.testerReward &&\n    state.testerRewardError === \"\" &&\n    state.badge &&\n    state.badgeError === \"\"\n  );\n};\n\nreturn (\n  <Container>\n    <div>\n      <Header>Create new task</Header>\n    </div>\n    <Form>\n      <FormHeader>General</FormHeader>\n      <Widget\n        src={`${ownerId}/widget/Inputs.Text`}\n        props={{\n          label: \"Task name *\",\n          placeholder: \"Enter task name\",\n          value: state.name,\n          onChange: (name) => State.update({ name }),\n          validate: () => {\n            if (state.name.length < 3) {\n              State.update({ nameError: \"Name must be at least 3 characters\" });\n              return;\n            }\n\n            if (state.name.length > 100) {\n              State.update({\n                nameError: \"Name must be less than 100 characters\",\n              });\n              return;\n            }\n            State.update({ nameError: \"\" });\n          },\n          error: state.nameError,\n        }}\n      />\n\n      <Widget\n        src={`${ownerId}/widget/Inputs.TextArea`}\n        props={{\n          label: \"Description\",\n          placeholder: \"Give a description of your task\",\n          value: state.description,\n          onChange: (description) => State.update({ description }),\n          validate: () => {\n            if (state.description.length > 500) {\n              State.update({\n                descriptionError:\n                  \"Description must be less than 500 characters\",\n              });\n              return;\n            }\n\n            State.update({ descriptionError: \"\" });\n          },\n          error: state.descriptionError,\n        }}\n      />\n\n      <Widget\n        src={`${ownerId}/widget/Inputs.Skills`}\n        props={{\n          label: \"Skills\",\n          placeholder: \"Add skills\",\n          value: state.skills,\n          onChange: (skills) =>\n            State.update({\n              skills: skills.map(({ name }) => ({\n                name: name.trim().replaceAll(/\\s+/g, \"-\"),\n              })),\n            }),\n        }}\n      />\n\n      <Widget\n        src={`${ownerId}/widget/Inputs.Select`}\n        props={{\n          label: \"Minimum Badge Requirement\",\n          placeholder: \"Junior\",\n          options,\n          value: state.badge,\n          onChange: (badge) => State.update({ badge }),\n          validate: () => {\n            if (!state.badge) {\n              State.update({\n                badgeError: \"Please select a minimum badge requirement\",\n              });\n              return;\n            }\n            // if (!options.find(({ value }) => state.badge.value === value)) {\n            //   state.setError(\"Please select a valid badge\");\n            // }\n            State.update({ badgeError: \"\" });\n          },\n        }}\n      />\n\n      <Widget\n        src={`${ownerId}/widget/Inputs.Number`}\n        props={{\n          label: \"Testers Needed\",\n          placeholder: 2,\n          value: state.testersRequired,\n          onChange: (testersRequired) => State.update({ testersRequired }),\n          validate: () => {\n            if (state.testersRequired < 1) {\n              State.update({\n                testersRequiredError: \"Testers size must be at least 1\",\n              });\n              return;\n            }\n            State.update({ testersRequiredError: \"\" });\n          },\n        }}\n      />\n\n      <Widget\n        src={`${ownerId}/widget/Inputs.Number`}\n        props={{\n          label: \"Tester Reward\",\n          placeholder: 10,\n          value: state.testerReward,\n          onChange: (testerReward) => State.update({ testerReward }),\n          validate: () => {\n            if (state.testerReward < 1) {\n              State.update({\n                testerRewardError: \"Tester Reward must be at least 1\",\n              });\n              return;\n            }\n            State.update({ testerRewardError: \"\" });\n          },\n        }}\n      />\n\n      <FormFooter>\n        <Widget\n          src={`${ownerId}/widget/Buttons.Blue`}\n          props={{\n            disabled: !validateForm(),\n            onClick: () => {\n              if (!validateForm()) return;\n\n              const transactions = [\n                {\n                  contractName: \"v1.crowdtestify.near\",\n                  methodName: \"create_task\",\n                  args: {\n                    info: {\n                      owner: context.accountId,\n                      title: state.name,\n                      description: state.description,\n                      skills_required: state.skills.map((skill) => skill.name),\n                      num_testers_required: state.testersRequired,\n                      reward: state.testerReward,\n                      min_badge_level: state.badge.value,\n                    },\n                  },\n                },\n              ];\n              Near.call(transactions);\n            },\n            text: <>Create project</>,\n          }}\n        />\n      </FormFooter>\n    </Form>\n  </Container>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/crowdtestify.near/widget/Task.Form", "fact_widget_deployments_id": "a9590267f3041a6b2cc0ef233bf83c10", "inserted_timestamp": "2023-08-26T19:35:45.233Z", "modified_timestamp": "2023-08-26T19:35:45.233Z", "__row_index": 3}