{"tx_hash": "Vh5JUJ6d97yz3c376n5dnMFJDPeZnig2Rb9FfpnAy78", "action_id_social": "CQrBmhB3GtcE7tXCLi1pHysw4LtCbpWuovBShr38FBhG-0-widget", "block_id": 102226018, "block_timestamp": "2023-09-29T13:29:05.744Z", "signer_id": "meteor-vik.near", "widget_name": "abi2form-example", "source_code": "State.init({\r\n  contractAddress,\r\n  contractAbi,\r\n  contractError,\r\n  contractAbiCall,\r\n  contractAbiView,\r\n  response,\r\n  contractAbiArg: [],\r\n});\r\n\r\nconst onInputChangeContractAddress = ({ target }) => {\r\n  State.update({ contractAddress: target.value });\r\n};\r\nconst onInputChangeContractAbi = ({ target }) => {\r\n  State.update({ contractAbi: target.value });\r\n};\r\n\r\nconst onInputChangeContractArg = (obj) => {\r\n  const data = state.contractAbiArg;\r\n  const isExist = false;\r\n  const indexData = null;\r\n\r\n  data.forEach((item, index) => {\r\n    if (item.functions == obj.functions && item.name == obj.name) {\r\n      isExist = true;\r\n      indexData = index;\r\n    }\r\n  });\r\n\r\n  if (isExist) {\r\n    data[indexData].value = obj.value;\r\n  } else {\r\n    data.push(obj);\r\n  }\r\n\r\n  State.update({ contractAbiArg: data });\r\n};\r\n\r\nconst onBtnClickCall = (e) => {\r\n  const argsArr = [];\r\n  const data = state.contractAbiArg;\r\n  data.forEach((item) => {\r\n    if (item.functions == e.target.dataset.name) {\r\n      if (item.type == \"number\") {\r\n        item.value = parseInt(item.value);\r\n      }\r\n      if (item.type == \"array\") {\r\n        item.value = item.value.split(\"|\");\r\n      }\r\n      argsArr.push(item);\r\n    }\r\n  });\r\n\r\n  const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\r\n  const args = {};\r\n  argMap.forEach((item) => {\r\n    Object.assign(args, item);\r\n  });\r\n  if (e.target.dataset.action == \"view\") {\r\n    asyncFetch(\"https://rpc.near.org/\", {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: e.target.dataset.name,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"), //fix here\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      if (res.body.result.result) {\r\n        const result = new Buffer.from(res.body.result.result).toString();\r\n        State.update({\r\n          response: {\r\n            [e.target.dataset.name]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (res.body.result.error) {\r\n        const error = res.body.result.error;\r\n        State.update({\r\n          response: {\r\n            [e.target.dataset.name]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (e.target.dataset.action == \"call\") {\r\n    const data = Near.call(state.contractAddress, e.target.dataset.name, args);\r\n  }\r\n};\r\n\r\nconst onBtnClick = () => {\r\n  const abi = JSON.parse(state.contractAbi);\r\n  if (abi.body.functions) {\r\n    const contractCall = [];\r\n    const contractView = [];\r\n    abi.body.functions.forEach((item) => {\r\n      if (item.kind == \"call\") {\r\n        contractCall.push(item);\r\n      }\r\n      if (item.kind == \"view\") {\r\n        contractView.push(item);\r\n      }\r\n      State.update({ contractAbiCall: contractCall });\r\n      State.update({ contractAbiView: contractView });\r\n    });\r\n    State.update({ contractError: null });\r\n  } else {\r\n    State.update({ contractError: \"Can not parse ABI\" });\r\n  }\r\n};\r\n\r\n// Define components\r\nconst contractForm = (\r\n  <>\r\n    <div class=\"border border-black p-3\">\r\n      <input\r\n        class=\"form-control mb-3\"\r\n        value={state.contractAddress}\r\n        placeholder=\"Contract Address\"\r\n        onChange={onInputChangeContractAddress}\r\n      />\r\n      <textarea\r\n        class=\"form-control\"\r\n        placeholder=\"Contract ABI\"\r\n        value={state.contractAbi}\r\n        onChange={onInputChangeContractAbi}\r\n      ></textarea>\r\n      <button class=\"btn btn-primary mt-2\" onClick={onBtnClick}>\r\n        Build Form\r\n      </button>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst notLoggedInWarning = (\r\n  <p class=\"text-center py-2\"> Login to Usint this Tool </p>\r\n);\r\n\r\n// Render\r\nreturn (\r\n  <>\r\n    <div class=\"container border border-info p-3\">\r\n      {context.accountId ? contractForm : notLoggedInWarning}\r\n      <h3 class=\"text-center\">\r\n        Address:\r\n        <span class=\"text-decoration-underline\"> {state.contractAddress} </span>\r\n      </h3>\r\n      {state.contractError}\r\n      {state.contractAbiView &&\r\n        state.contractAbiView.map((functions) => (\r\n          <div class=\"card mb-2\">\r\n            <div class=\"card-header\">{functions.name}</div>\r\n            <div class=\"card-body\">\r\n              {functions.params.args &&\r\n                functions.params.args.map((args) => {\r\n                  return (\r\n                    <div class=\"form-group pb-2\">\r\n                      <label>{args.name}</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        data-name={args.name}\r\n                        data-type={\r\n                          args.type_schema.type == \"string\" ||\r\n                          args.type_schema.type[0] == \"string\"\r\n                            ? \"text\"\r\n                            : args.type_schema.type == \"integer\" ||\r\n                              args.type_schema.type[0] == \"integer\"\r\n                            ? \"number\"\r\n                            : args.type_schema.type == \"array\"\r\n                            ? \"array\"\r\n                            : args.type_schema.$ref\r\n                            ? \"text\"\r\n                            : \"text\"\r\n                        }\r\n                        type={\r\n                          args.type_schema.type == \"string\" ||\r\n                          args.type_schema.type[0] == \"string\"\r\n                            ? \"text\"\r\n                            : args.type_schema.type == \"integer\" ||\r\n                              args.type_schema.type[0] == \"integer\"\r\n                            ? \"number\"\r\n                            : args.type_schema.type == \"array\"\r\n                            ? \"array\"\r\n                            : args.type_schema.$ref\r\n                            ? \"text\"\r\n                            : \"text\"\r\n                        }\r\n                        placeholder={\r\n                          args.type_schema.type == \"string\" ||\r\n                          args.type_schema.type[0] == \"string\"\r\n                            ? \"string\"\r\n                            : args.type_schema.type == \"integer\" ||\r\n                              args.type_schema.type[0] == \"integer\"\r\n                            ? \"number\"\r\n                            : args.type_schema.type == \"array\"\r\n                            ? \"array : a|b\"\r\n                            : args.type_schema.$ref\r\n                            ? \"Account Address\"\r\n                            : \"text\"\r\n                        }\r\n                        onChange={(e) =>\r\n                          onInputChangeContractArg({\r\n                            functions: functions.name,\r\n                            name: args.name,\r\n                            type:\r\n                              args.type_schema.type == \"string\" ||\r\n                              args.type_schema.type[0] == \"string\"\r\n                                ? \"text\"\r\n                                : args.type_schema.type == \"integer\" ||\r\n                                  args.type_schema.type[0] == \"integer\"\r\n                                ? \"number\"\r\n                                : args.type_schema.type == \"array\"\r\n                                ? \"array\"\r\n                                : args.type_schema.$ref\r\n                                ? \"text\"\r\n                                : \"text\",\r\n                            value: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              {state.response[functions.name] ? (\r\n                <>\r\n                  <div\r\n                    className={\r\n                      state.response[functions.name].error\r\n                        ? \"alert  alert-danger\"\r\n                        : \"alert  alert-primary\"\r\n                    }\r\n                    role=\"alert\"\r\n                  >\r\n                    {state.response[functions.name].value}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <button\r\n                class=\"btn btn-primary\"\r\n                data-action=\"view\"\r\n                data-name={functions.name}\r\n                onClick={onBtnClickCall}\r\n              >\r\n                View\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n      {state.contractAbiCall &&\r\n        state.contractAbiCall.map((functions) => (\r\n          <div class=\"card mb-2\">\r\n            <div class=\"card-header\">{functions.name}</div>\r\n            <div class=\"card-body\">\r\n              {functions.params.args &&\r\n                functions.params.args.map((args) => {\r\n                  return (\r\n                    <div class=\"form-group pb-2\">\r\n                      <label>{args.name}</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        data-name={args.name}\r\n                        data-type={\r\n                          args.type_schema.type == \"string\" ||\r\n                          args.type_schema.type[0] == \"string\"\r\n                            ? \"text\"\r\n                            : args.type_schema.type == \"integer\" ||\r\n                              args.type_schema.type[0] == \"integer\"\r\n                            ? \"number\"\r\n                            : args.type_schema.type == \"array\"\r\n                            ? \"array\"\r\n                            : args.type_schema.$ref\r\n                            ? \"text\"\r\n                            : \"text\"\r\n                        }\r\n                        type={\r\n                          args.type_schema.type == \"string\" ||\r\n                          args.type_schema.type[0] == \"string\"\r\n                            ? \"text\"\r\n                            : args.type_schema.type == \"integer\" ||\r\n                              args.type_schema.type[0] == \"integer\"\r\n                            ? \"number\"\r\n                            : args.type_schema.type == \"array\"\r\n                            ? \"array\"\r\n                            : args.type_schema.$ref\r\n                            ? \"text\"\r\n                            : \"text\"\r\n                        }\r\n                        placeholder={\r\n                          args.type_schema.type == \"string\" ||\r\n                          args.type_schema.type[0] == \"string\"\r\n                            ? \"string\"\r\n                            : args.type_schema.type == \"integer\" ||\r\n                              args.type_schema.type[0] == \"integer\"\r\n                            ? \"number\"\r\n                            : args.type_schema.type == \"array\"\r\n                            ? \"array : a|b\"\r\n                            : args.type_schema.$ref\r\n                            ? \"Account Address\"\r\n                            : \"text\"\r\n                        }\r\n                        onChange={(e) =>\r\n                          onInputChangeContractArg({\r\n                            functions: functions.name,\r\n                            name: args.name,\r\n                            type:\r\n                              args.type_schema.type == \"string\" ||\r\n                              args.type_schema.type[0] == \"string\"\r\n                                ? \"text\"\r\n                                : args.type_schema.type == \"integer\" ||\r\n                                  args.type_schema.type[0] == \"integer\"\r\n                                ? \"number\"\r\n                                : args.type_schema.type == \"array\"\r\n                                ? \"array\"\r\n                                : args.type_schema.$ref\r\n                                ? \"text\"\r\n                                : \"text\",\r\n                            value: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              {state.response[functions.name] ? (\r\n                <p class=\"card-text\">{state.response[functions.name]}</p>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <button\r\n                class=\"btn btn-primary\"\r\n                data-action=\"call\"\r\n                data-name={functions.name}\r\n                onClick={onBtnClickCall}\r\n              >\r\n                Call\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meteor-vik.near/widget/abi2form-example", "fact_widget_deployments_id": "964d4d117f1a4db3120d8e3220220f19", "inserted_timestamp": "2023-09-29T15:28:56.561Z", "modified_timestamp": "2023-09-29T15:28:56.561Z", "__row_index": 2}