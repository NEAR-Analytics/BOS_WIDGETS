{"tx_hash": "FehYu99ppdQGGmCCz1A5zJd8HmnS6F5qv7gsTnn4JVhw", "action_id_social": "CqcdSngRNiUrjCFih6RgSzdvKqsSXbCncdaPWxc8v3Ar-0-widget", "block_id": 112631456, "block_timestamp": "2024-02-11T20:01:33.495Z", "signer_id": "buildhub.near", "widget_name": "Compose", "source_code": "const { User, Button } = VM.require(\"buildhub.near/widget/components\") || {\n  User: () => <></>,\n  Button: () => <></>\n};\n\nconst draftKey = props.draftKey || \"draft\";\nconst draft = Storage.privateGet(draftKey);\nconst postBtnText = props.postBtnText;\nif (draft === null) {\n  return \"\";\n}\n\nconst autocompleteEnabled = true;\n\nState.init({\n  image: {}\n});\n\nconst [view, setView] = useState(\"editor\");\nconst [postContent, setPostContent] = useState(\"\");\nconst [hideAdvanced, setHideAdvanced] = useState(true);\nconst [showAccountAutocomplete, setShowAccountAutocomplete] = useState(false);\nconst [mentionsArray, setMentionsArray] = useState([]);\nconst [mentionInput, setMentionInput] = useState(null);\nconst [handler, setHandler] = useState(\"update\");\nconst [showToast, setShowToast] = useState(false);\n\nconst [composeKey, setComposeKey] = useState(0);\nconst memoizedComposeKey = useMemo(() => composeKey, [composeKey]);\n\nfunction generateUID() {\n  const maxHex = 0xffffffff;\n  const randomNumber = Math.floor(Math.random() * maxHex);\n  return randomNumber.toString(16).padStart(8, \"0\");\n}\n\nsetPostContent(draft || props.template);\n\nconst extractMentions = (text) => {\n  const mentionRegex =\n    /@((?:(?:[a-z\\d]+[-_])*[a-z\\d]+\\.)*(?:[a-z\\d]+[-_])*[a-z\\d]+)/gi;\n  mentionRegex.lastIndex = 0;\n  const accountIds = new Set();\n  for (const match of text.matchAll(mentionRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length)) &&\n      match[1].length >= 2 &&\n      match[1].length <= 64\n    ) {\n      accountIds.add(match[1].toLowerCase());\n    }\n  }\n  return [...accountIds];\n};\n\nconst extractHashtags = (text) => {\n  const hashtagRegex = /#(\\w+)/gi;\n  hashtagRegex.lastIndex = 0;\n  const hashtags = new Set();\n  for (const match of text.matchAll(hashtagRegex)) {\n    if (\n      !/[\\w`]/.test(match.input.charAt(match.index - 1)) &&\n      !/[/\\w`]/.test(match.input.charAt(match.index + match[0].length))\n    ) {\n      hashtags.add(match[1].toLowerCase());\n    }\n  }\n  return [...hashtags];\n};\n\nconst extractMentionNotifications = (text, item) =>\n  extractMentions(text || \"\")\n    .filter((accountId) => accountId !== context.accountId)\n    .map((accountId) => ({\n      key: accountId,\n      value: {\n        type: \"mention\",\n        item\n      }\n    }));\n\nfunction checkAndAppendHashtag(input, target) {\n  if (input.toLowerCase().includes(`#${target.toLowerCase()}`)) {\n    return input;\n  } else {\n    return input + ` #${target}`;\n  }\n}\n\nconst content = {\n  type: \"md\",\n  image: state.image.cid ? { ipfs_cid: state.image.cid } : undefined,\n  text: postContent\n};\n\nconst postToCustomFeed = ({ feed, text }) => {\n  const requiredHashtags = props.requiredHashtags || [\"build\"];\n  if (feed.hashtag) requiredHashtags.push(feed.hashtag.toLowerCase());\n  text = text + `\\n\\n`;\n  requiredHashtags.forEach((hashtag) => {\n    text = checkAndAppendHashtag(text, hashtag);\n  });\n\n  const data = {\n    post: {\n      main: JSON.stringify(content)\n    },\n    index: {\n      post: JSON.stringify({ key: \"main\", value: { type: \"md\" } })\n    }\n  };\n\n  const item = {\n    type: \"social\",\n    path: `${context.accountId}/post/main`\n  };\n\n  const notifications = extractMentionNotifications(text, item);\n\n  if (notifications.length) {\n    data.index.notify = JSON.stringify(\n      notifications.length > 1 ? notifications : notifications[0]\n    );\n  }\n\n  const hashtags = extractHashtags(text);\n\n  if (hashtags.length) {\n    data.index.hashtag = JSON.stringify(\n      hashtags.map((hashtag) => ({\n        key: hashtag,\n        value: item\n      }))\n    );\n  }\n\n  return Social.set(data, {\n    force: true,\n    onCommit: () => {\n      setPostContent(\"\");\n      Storage.privateSet(draftKey, props.template || \"\");\n      setComposeKey(generateUID());\n      setHandler(\"autocompleteSelected\"); // this is a hack to force the iframe to update\n      setShowToast(true);\n    },\n    onCancel: () => {\n      // console.log(`Cancelled ${feed}: #${postId}`);\n    }\n  });\n};\n\nfunction textareaInputHandler(value) {\n  const words = value.split(/\\s+/);\n  const allMentiones = words\n    .filter((word) => word.startsWith(\"@\"))\n    .map((mention) => mention.slice(1));\n  const newMentiones = allMentiones.filter(\n    (item) => !mentionsArray.includes(item)\n  );\n  setMentionInput(newMentiones?.[0] ?? \"\");\n  setMentionsArray(allMentiones);\n  setShowAccountAutocomplete(newMentiones?.length > 0);\n  setPostContent(value);\n  setHandler(\"update\");\n  Storage.privateSet(draftKey, value || \"\");\n}\n\nfunction autoCompleteAccountId(id) {\n  let currentIndex = 0;\n  const updatedDescription = postContent.replace(\n    /(?:^|\\s)(@[^\\s]*)/g,\n    (match) => {\n      if (currentIndex === mentionsArray.indexOf(mentionInput)) {\n        currentIndex++;\n        return ` @${id}`;\n      } else {\n        currentIndex++;\n        return match;\n      }\n    }\n  );\n  setPostContent(updatedDescription);\n  setShowAccountAutocomplete(false);\n  setMentionInput(null);\n  setHandler(\"autocompleteSelected\");\n  Storage.privateSet(draftKey, updatedDescription || \"\");\n}\n\nconst PostCreator = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n\n  padding: 1rem;\n  background: var(--compose-bg, #23242b);\n  border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n  border-radius: 12px;\n\n  margin-bottom: 1rem;\n\n  .upload-image-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f1f3f5;\n    color: #11181c;\n    border-radius: 40px;\n    height: 40px;\n    min-width: 40px;\n    font-size: 0;\n    border: none;\n    cursor: pointer;\n    transition: background 200ms, opacity 200ms;\n    &::before {\n      font-size: 16px;\n    }\n    &:hover,\n    &:focus {\n      background: #d7dbde;\n      outline: none;\n    }\n    &:disabled {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n    span {\n      margin-left: 12px;\n    }\n  }\n  .d-inline-block {\n    display: flex !important;\n    gap: 12px;\n    margin: 0 !important;\n    .overflow-hidden {\n      width: 40px !important;\n      height: 40px !important;\n    }\n  }\n`;\n\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n\n  iframe {\n    padding: 0;\n  }\n\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\n\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n\n  * {\n    border: none !important;\n  }\n\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n\n    font-family: sans-serif !important;\n    font-size: 1rem;\n\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\n\nconst MarkdownPreview = styled.div`\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-size: 16px !important;\n  }\n  @media (max-width: 767px) {\n    font-size: 15px !important;\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: 15px !important;\n    }\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  strong,\n  b {\n    font-weight: 500 !important;\n  }\n  ol,\n  ul,\n  dl {\n    margin-bottom: 0.5rem;\n    white-space: inherit;\n  }\n  p {\n    margin-bottom: 0.5rem;\n  }\n  hr {\n    display: none;\n  }\n  img {\n    border-radius: var(--bs-border-radius-lg);\n    max-height: 40em;\n  }\n  th {\n    min-width: 5em;\n  }\n\n  .table > :not(caption) > * > * {\n    padding: 0.3rem;\n  }\n\n  * {\n    color: #b6b6b8 !important;\n  }\n\n  a {\n    color: #0d6efd !important;\n\n    &:hover {\n      color: #0a58ca !important;\n    }\n  }\n`;\n\nconst avatarComponent = useMemo(() => {\n  return <User accountId={context.accountId} />;\n}, [context.accountId]);\n\nreturn (\n  <PostCreator>\n    {avatarComponent}\n    <div style={{ border: \"none\" }}>\n      {view === \"editor\" ? (\n        <TextareaWrapper\n          className=\"markdown-editor\"\n          data-value={postContent || \"\"}\n          key={memoizedComposeKey}\n        >\n          <Widget\n            src={\"buildhub.near/widget/components.MarkdownEditorIframe\"}\n            props={{\n              initialText: postContent,\n              data: { handler: handler, content: postContent },\n              embedCss: props.customCSS || MarkdownEditor,\n              onChange: (v) => {\n                textareaInputHandler(v);\n              }\n            }}\n          />\n          {autocompleteEnabled && showAccountAutocomplete && (\n            <Widget\n              src=\"buildhub.near/widget/components.AccountAutocomplete\"\n              props={{\n                term: mentionInput,\n                onSelect: autoCompleteAccountId,\n                onClose: () => setShowAccountAutocomplete(false)\n              }}\n            />\n          )}\n        </TextareaWrapper>\n      ) : (\n        <MarkdownPreview>\n          <Widget\n            src=\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\"\n            props={{ text: postContent }}\n          />\n          {state.image.cid && (\n            <Widget\n              src=\"mob.near/widget/Image\"\n              props={{\n                image: state.image.cid\n                  ? { ipfs_cid: state.image.cid }\n                  : undefined\n              }}\n            />\n          )}\n        </MarkdownPreview>\n      )}\n    </div>\n\n    <div className=\"d-flex gap-3 align-self-end\">\n      {view === \"editor\" && (\n        <IpfsImageUpload\n          image={state.image}\n          className=\"upload-image-button bi bi-image\"\n        />\n      )}\n      <Button\n        variant=\"outline\"\n        onClick={() => setView(view === \"editor\" ? \"preview\" : \"editor\")}\n        style={{ fontSize: 14 }}\n      >\n        {view === \"editor\" ? (\n          <>\n            Preview <i className=\"bi bi-eye\"></i>\n          </>\n        ) : (\n          <>\n            Edit <i className=\"bi bi-pencil-square\"></i>\n          </>\n        )}\n      </Button>\n      <Button\n        variant=\"primary\"\n        style={{ fontSize: 14 }}\n        onClick={() =>\n          postToCustomFeed({\n            feed: props.feed,\n            text: postContent\n          })\n        }\n      >\n        {postBtnText ?? \"Post\"}\n      </Button>\n    </div>\n    <Widget\n      src=\"near/widget/DIG.Toast\"\n      props={{\n        title: \"Post Submitted Successfully\",\n        type: \"success\",\n        open: showToast,\n        onOpenChange: (v) => setShowToast(v),\n        trigger: <></>,\n        action: (\n          <Button\n            variant=\"primary\"\n            style={{ fontSize: 14 }}\n            onClick={() => setShowToast(false)}\n          >\n            dismiss\n          </Button>\n        ),\n        providerProps: { duration: 1000 }\n      }}\n    />\n  </PostCreator>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/Compose", "fact_widget_deployments_id": "9241338ea2caec28a8dc15836c01e4eb", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 20}