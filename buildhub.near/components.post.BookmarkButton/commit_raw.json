{"tx_hash": "CV8Cs7DdaXkJWPnjPMVt2nqmQUZXXQhHchrhRk52GCwj", "action_id_social": "CVemaBbpRuNAeYvqtXmzV7zVjATVeFeeK3dbU5uTZ18E-0-widget", "block_id": 117392570, "block_timestamp": "2024-04-22T16:24:25.287Z", "signer_id": "buildhub.near", "widget_name": "components.post.BookmarkButton", "source_code": "const item = props.item;\nif (!item) {\n  return \"\";\n}\nuseEffect(() => {\n  State.update({ hasBookmark: null });\n}, [item]);\nconst bookmarks = Social.index(\"bookmark\", item);\nconst dataLoading = bookmarks === null;\nconst bookmarksByUser = {};\n(bookmarks || []).forEach((bookmark) => {\n  if (bookmark.value.type === \"bookmark\") {\n    bookmarksByUser[bookmark.accountId] = bookmark;\n  } else if (bookmark.value.type === \"unbookmark\") {\n    delete bookmarksByUser[bookmark.accountId];\n  }\n});\nif (state.hasBookmark === true) {\n  bookmarksByUser[context.accountId] = {\n    accountId: context.accountId,\n  };\n} else if (state.hasBookmark === false) {\n  delete bookmarksByUser[context.accountId];\n}\nconst accountsWithBookmarks = Object.keys(bookmarksByUser);\nconst bookmarkCount = accountsWithBookmarks.length;\nconst hasBookmark = context.accountId && !!bookmarksByUser[context.accountId];\nconst bookmarkSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-bookmark\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1z\" />\n  </svg>\n);\nconst bookmarkFillSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    class=\"bi bi-bookmark-fill\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2\" />\n  </svg>\n);\nconst BookmarkButton = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  width: 20px;\n  height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  background: inherit;\n  color: inherit;\n  font-size: 16px;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px -9.5px;\n      content: \"\";\n      width: 36px;\n      height: 36px;\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n  .count {\n    margin-left: 8px;\n  }\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: #eca227;\n    .icon:before {\n      background: rgba(255, 175, 81, 0.1);\n    }\n  }\n  .bookmarked {\n    color: #eca227;\n  }\n  .loading {\n    @keyframes scaleAnimation {\n      0%,\n      100% {\n        transform: scale(1) rotate(0deg);\n      }\n      25% {\n        transform: scale(1.2) rotate(-15deg);\n      }\n      50% {\n        transform: scale(1) rotate(0deg);\n      }\n      75% {\n        transform: scale(1.2) rotate(15deg);\n      }\n    }\n    transform-origin: center;\n    animation: scaleAnimation 1s ease-in-out infinite;\n  }\n`;\nconst bookmarkClick = () => {\n  if (state.loading || dataLoading || !context.accountId) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const type = hasBookmark ? \"unbookmark\" : \"bookmark\";\n  const data = {\n    index: {\n      bookmark: JSON.stringify({\n        key: item,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n  if (item.type === \"social\" && typeof item.path === \"string\") {\n    const keys = item.path.split(\"/\");\n    keys.push(item.blockHeight);\n    if (keys.length > 0) {\n      data.graph = {\n        bookmark: {},\n      };\n      let root = data.graph.bookmark;\n      keys.slice(0, -1).forEach((key) => {\n        root = root[key] = {};\n      });\n      root[keys[keys.length - 1]] = hasBookmark ? null : \"\";\n    }\n  }\n  if (!hasBookmark && props.notifyAccountId) {\n    data.index.notify = JSON.stringify({\n      key: props.notifyAccountId,\n      value: {\n        type,\n        item,\n      },\n    });\n  }\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false, hasBookmark: !hasBookmark }),\n    onCancel: () => State.update({ loading: false }),\n  });\n};\nconst title = hasBookmark\n  ? props.titleUnbookmark ?? \"Unbookmark\"\n  : props.titleBookmark ?? \"Bookmark\";\nconst inner = (\n  <div className=\"d-inline-flex align-items-center\">\n    <BookmarkButton\n      disabled={state.loading || dataLoading || !context.accountId}\n      title={!props.tooltip ? title : undefined}\n      onClick={bookmarkClick}\n    >\n      <span\n        className={`icon ${state.loading ? \"loading \" : \"\"}${\n          hasBookmark ? \"bookmarked\" : \"\"\n        }`}\n      >\n        {hasBookmark ? bookmarkFillSvg : bookmarkSvg}\n      </span>\n      {bookmarkCount > 0 && (\n        <span className={`count ${hasBookmark ? \"bookmarked\" : \"\"}`}>\n          <Widget\n            loading={bookmarkCount || \"\"}\n            src=\"mob.near/widget/N.Overlay.Faces\"\n            props={{ accounts: bookmarksByUser, limit: 10 }}\n          />\n        </span>\n      )}\n    </BookmarkButton>\n  </div>\n);\nreturn props.tooltip ? (\n  <OverlayTrigger\n    placement={props.overlayPlacement ?? \"auto\"}\n    overlay={<Tooltip>{title}</Tooltip>}\n  >\n    {inner}\n  </OverlayTrigger>\n) : (\n  inner\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/components.post.BookmarkButton", "fact_widget_deployments_id": "078c700400414df1965d9a89715a4a98", "inserted_timestamp": "2024-04-22T18:38:50.728Z", "modified_timestamp": "2024-04-22T18:38:50.728Z", "__row_index": 0}