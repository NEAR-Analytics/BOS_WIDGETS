{"tx_hash": "8KWvfL8atdNjwUppt7tY6z2rJg2RSQj8R9pTX9phfsca", "action_id_social": "5NAJECcHjPyviq7cEezHMWmUF9sxwwo9D5mbucr3tsgP-0-widget", "block_id": 114962408, "block_timestamp": "2024-03-18T15:23:50.658Z", "signer_id": "buildhub.near", "widget_name": "components.modals.event.Form", "source_code": "const { Modal, Button, ProgressState } = VM.require(\"buildhub.near/widget/components\") || {\n  Modal: () => <></>,\n  Button: () => <></>,\n  ProgressState: () => <></>,\n};\n\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\n\nconst Wrapper = styled.div`\n  .btn-close {\n    filter: invert(39%) sepia(45%) saturate(6660%) hue-rotate(199deg) brightness(101%) contrast(104%) !important;\n  }\n  .rbt-token-label {\n    color: white !important;\n  }\n`;\nconst MarkdownEditor = `\n  html {\n    background: #23242b;\n  }\n\n  * {\n    border: none !important;\n  }\n\n  .rc-md-editor {\n    background: #4f5055;\n    border-top: 1px solid #4f5055 !important;\n    border-radius: 8px;\n  }\n\n  .editor-container {\n    background: #4f5055;\n  }\n  \n  .drop-wrap {\n    \n    border-radius: 0.5rem !important;\n  }\n\n  .header-list {\n    display: flex;\n    align-items: center;\n  }\n\n  textarea {\n    background: #23242b !important;\n    color: #fff !important;\n\n    font-family: sans-serif !important;\n    font-size: 1rem;\n\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-radius: 0 0 8px 8px;\n  }\n\n  .rc-md-navigation {\n    background: #23242b !important;\n    border: 1px solid #4f5055 !important;\n    border-top: 0 !important;\n    border-bottom: 0 !important;\n    border-radius: 8px 8px 0 0;\n  \n    i {\n      color: #cdd0d5;\n    }\n  }\n\n  .editor-container {\n    border-radius: 0 0 8px 8px;\n  }\n\n  .rc-md-editor .editor-container .sec-md .input {\n    overflow-y: auto;\n    padding: 8px !important;\n    line-height: normal;\n    border-radius: 0 0 8px 8px;\n  }\n`;\n\nconst TextareaWrapper = styled.div`\n  display: grid;\n  vertical-align: top;\n  align-items: center;\n  position: relative;\n  align-items: stretch;\n  width: 100%;\n\n  textarea {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease;\n  }\n\n  textarea::placeholder {\n    padding-top: 4px;\n    font-size: 20px;\n  }\n\n  textarea:focus::placeholder {\n    font-size: inherit;\n    padding-top: 0px;\n  }\n\n  &::after,\n  textarea,\n  iframe {\n    width: 100%;\n    min-width: 1em;\n    height: unset;\n    min-height: 3em;\n    font: inherit;\n    margin: 0;\n    resize: none;\n    background: none;\n    appearance: none;\n    border: 0px solid #eee;\n    grid-area: 1 / 1;\n    overflow: hidden;\n    outline: none;\n  }\n\n  iframe {\n    padding: 0;\n  }\n\n  textarea:focus,\n  textarea:not(:empty) {\n    border-bottom: 1px solid #eee;\n    min-height: 5em;\n  }\n\n  &::after {\n    content: attr(data-value) \" \";\n    visibility: hidden;\n    white-space: pre-wrap;\n  }\n  &.markdown-editor::after {\n    padding-top: 66px;\n    font-family: monospace;\n    font-size: 14px;\n  }\n`;\n\nconst getCurrentDate = (date, time) => {\n  const currentDate = date && time ? new Date(`${date}T${time}`) : new Date();\n\n  const year = currentDate.getFullYear();\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, \"0\"); // Months are 0-indexed\n  const day = currentDate.getDate().toString().padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n\nconst getCurrentTime = (date, time) => {\n  const currentDate = date && time ? new Date(`${date}T${time}`) : new Date();\n\n  const hours = currentDate.getHours().toString().padStart(2, \"0\");\n  const minutes = currentDate.getMinutes().toString().padStart(2, \"0\");\n\n  return `${hours}:${minutes}`;\n};\n\nconst isoTime = (date, time) => {\n  const temp = new Date(`${date} ${time}`);\n  const now = temp.toISOString();\n\n  return now.split(\"T\")[1];\n};\n\nconst isoDate = (date, time) => {\n  const temp = new Date(`${date} ${time}`);\n  const now = temp.toISOString();\n\n  return now.split(\"T\")[0];\n};\n\nconst getWeekDay = () => {\n  const currentDate = new Date();\n  const options = { weekday: \"long\" };\n  return currentDate.toLocaleDateString(\"en-US\", options);\n};\n\nfunction getDayOfYear(date) {\n  const start = new Date(date.getFullYear(), 0, 0);\n  const diff = date - start;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\n\nconst UUID = {\n  generate: (template) => {\n    if (typeof template !== \"string\") {\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\n    }\n    return template.replace(/[xy]/g, (c) => {\n      var r = (Math.random() * 16) | 0;\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  },\n};\n\nconst repeatOptions = [\n  { label: \"Daily\", value: \"daily\" },\n  { label: `Weekly on ${getWeekDay()}`, value: \"weekly today\" },\n  { label: `Annually on ${getCurrentDate()}`, value: \"annually today\" },\n  { label: \"Every Weekday (Monday to Friday)\", value: \"weekday\" },\n  { label: \"Custom\", value: \"custom\" },\n];\n\nconst [title, setTitle] = useState(\"\");\nconst [description, setDescription] = useState(\"\");\nconst [link, setLink] = useState(\"\");\nconst [organizers, setOrganizers] = useState([context.accountId]);\nconst [startDate, setStartDate] = useState(getCurrentDate());\nconst [endDate, setEndDate] = useState(getCurrentDate());\nconst [startTime, setStartTime] = useState(getCurrentTime());\nconst [endTime, setEndTime] = useState(getCurrentTime());\nconst [location, setLocation] = useState(\"\");\nconst [hashtags, setHashtags] = useState([]);\nconst [repeat, setRepeat] = useState(false);\nconst [customModal, setCustomModal] = useState(false);\nconst [customFrequency, setCustomFrequency] = useState(\"weekly\");\nconst [customInterval, setCustomInterval] = useState(1);\nconst [customDaysOfWeek, setCustomDaysOfWeek] = useState([]);\n\nState.init({\n  image: null,\n});\n\nconst app = props.app;\nconst thing = props.thing;\nconst CustomFormWrapper = styled.div`\n  .cursor-pointer {\n    cursor: pointer;\n  }\n`;\n\nconst RepeatDropDown = () => {\n  return (\n    <div className=\"d-flex gap-2\">\n      <select\n        name=\"event-repeat\"\n        id=\"event-repeat\"\n        data-bs-theme={bootstrapTheme}\n        class=\"form-select\"\n        onChange={(e) => setRepeat(e.target.value)}\n        value={repeat}\n      >\n        <option selected value=\"\">\n          Does not repeat\n        </option>\n        {repeatOptions.map(({ value, label }) => (\n          <option value={value}>{label}</option>\n        ))}\n      </select>\n      {repeat === \"custom\" && (\n        <Button onClick={() => setCustomModal(true)} variant=\"outline\">\n          Edit\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst onSubmit = () => {\n  const daysOfWeekMap = {\n    S: 0,\n    M: 1,\n    T: 2,\n    W: 3,\n    Th: 4,\n    F: 5,\n    Sat: 6,\n  };\n  const thingId = UUID.generate(); // we could replace this with a normalized title\n  // you mean just UUID();?\n  // recurrence: {\n  //   frequency: \"weekly\", // \"daily\", \"weekly\", \"monthly\", \"yearly\"\n  //   interval: 1, // Repeat every interval (e.g., every 1 week)\n  //   daysOfWeek: [1, 3] (1 for Monday, 2 for Tuesday, etc.)\n  //   daysOfYear:[]\n  // }\n\n  let recurrence = null;\n  switch (repeat) {\n    case \"daily\":\n      recurrence = {\n        frequency: \"daily\",\n      };\n      break;\n    case \"weekly today\":\n      recurrence = {\n        frequency: \"weekly\",\n        interval: 1,\n        daysOfWeek: [new Date().getDay()],\n      };\n      break;\n    case \"annually today\":\n      recurrence = {\n        frequency: \"yearly\",\n        interval: 1,\n        daysOfYear: [getDayOfYear(new Date())],\n      };\n      break;\n    case \"weekday\":\n      recurrence = {\n        frequency: \"weekly\",\n        interval: 1,\n        daysOfWeek: [1, 2, 3, 4, 5],\n      };\n      break;\n    case \"custom\": {\n      recurrence = {\n        frequency: customFrequency,\n        interval: customInterval,\n        daysOfWeek: customDaysOfWeek.map((day) => daysOfWeekMap[day]),\n      };\n      break;\n    }\n  }\n\n  Social.set(\n    {\n      [app]: {\n        // we'll replace this with \"every\" or the specific app that the event should be visible in\n        [thing]: {\n          [thingId]: {\n            \"\": JSON.stringify({\n              title,\n              description,\n              url: link,\n              recurrence: recurrence,\n              start: `${isoDate(startDate, startTime)}T${isoTime(startDate, startTime)}`, // we'll want this be available for filtering... we may want to store it outside the JSON\n              // or we need an indexing solution\n              // we fetch events and then apply filters after parsing them\n              end: `${isoDate(endDate, endTime)}T${isoTime(endDate, endTime)}`,\n              extendedProps: {\n                organizers,\n                location,\n                hashtags, // this can be moved to metadata.tags, but must be object with keys, e.g { [hashtag]: \"\" }\n                // this i'll leave up to you but we need them for filtering\n                cover: state.image,\n              },\n            }),\n            metadata: {\n              name: title,\n              description,\n              image: state.image,\n              backgroundImage: state.image,\n              type: \"buildhub.near/type/event\",\n            },\n          },\n        },\n      },\n    },\n    {\n      onCommit: () => props.toggleModal(),\n    },\n  );\n};\n\nconst onCoverChange = (target) => {\n  State.update({ image: target });\n};\n\nuseEffect(() => {\n  if (repeat === \"custom\" && !customModal) {\n    setCustomModal(true);\n  }\n}, [repeat]);\n\nconst CustomRepeatInputModal = () => {\n  const days = [\"S\", \"M\", \"T\", \"W\", \"Th\", \"F\", \"Sat\"];\n  const frequency = [\n    { label: \"days\", value: \"daily\" },\n    { label: \"weeks\", value: \"weekly\" },\n    { label: \"months\", value: \"monthly\" },\n    { label: \"years\", value: \"yearly\" },\n  ];\n  return (\n    <Modal\n      open={customModal}\n      title={\"Custom recurrence\"}\n      onOpenChange={(v) => {\n        setCustomModal(v);\n      }}\n      hideCloseBtn={true}\n    >\n      <CustomFormWrapper>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"repeat-every\">Repeat every</label>\n          <input\n            name=\"repeat-every\"\n            id=\"repeat-every\"\n            type=\"number\"\n            placeholder=\"\"\n            value={customInterval}\n            onChange={(e) => setCustomInterval(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"repeat-every\">Repeat every</label>\n          <select\n            name=\"custom-frequency\"\n            id=\"custom-frequency\"\n            data-bs-theme={bootstrapTheme}\n            class=\"form-select\"\n            onChange={(e) => setCustomFrequency(e.target.value)}\n            value={customFrequency}\n          >\n            {frequency.map(({ value, label }) => (\n              <option value={value}>{label}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"form-group mb-3\">\n          <label className=\"mb-1\" htmlFor=\"repeat-on\">\n            Repeat on\n          </label>\n          <div className=\"d-flex gap-2 align-items-center\">\n            {days.map((item) => (\n              <div\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  if (customDaysOfWeek.includes(item)) {\n                    setCustomDaysOfWeek(customDaysOfWeek.filter((i) => i !== item));\n                  } else {\n                    setCustomDaysOfWeek([...customDaysOfWeek, item]);\n                  }\n                }}\n              >\n                <ProgressState status={customDaysOfWeek.includes(item) ? \"focused\" : \"default\"}>{item}</ProgressState>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CustomFormWrapper>\n    </Modal>\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div data-bs-theme={bootstrapTheme}>\n      <CustomRepeatInputModal />\n      <div className=\"form-group mb-3\">\n        <label htmlFor=\"title\">\n          Title<span className=\"text-danger\">*</span>\n        </label>\n        <input\n          name=\"title\"\n          id=\"title\"\n          type=\"text\"\n          placeholder=\"Enter event name\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div className=\"form-group mb-3\">\n        <label>\n          Event Description<span className=\"text-danger\">*</span>\n        </label>\n        <TextareaWrapper\n          className=\"markdown-editor mb-3\"\n          data-value={description || \"\"}\n          key={memoizedKey || \"markdown-editor\"}\n        >\n          <Widget\n            src=\"mob.near/widget/MarkdownEditorIframe\"\n            props={{\n              initialText: description,\n              embedCss: props.customCSS || MarkdownEditor,\n              onChange: (v) => {\n                setDescription(v);\n              },\n            }}\n          />\n        </TextareaWrapper>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"link\">\n            Event Link<span className=\"text-danger\">*</span>\n          </label>\n          <input\n            name=\"link\"\n            id=\"link\"\n            type=\"text\"\n            placeholder=\"Enter link\"\n            value={link}\n            onChange={(e) => setLink(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"occurence\">Occurence</label>\n          <RepeatDropDown />\n        </div>\n        <div className=\"form-group mb-3 d-flex\" style={{ gap: 24 }}>\n          <div className=\"form-group flex-grow-1\">\n            <label htmlFor=\"start-date\">\n              Start Date<span className=\"text-danger\">*</span>\n            </label>\n            <input\n              id=\"start-date\"\n              name=\"start-date\"\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group flex-grow-1\">\n            <label htmlFor=\"end-date\">\n              End Date<span className=\"text-danger\">*</span>\n            </label>\n            <input\n              name=\"end-date\"\n              id=\"end-date\"\n              type=\"date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"form-group mb-3 d-flex\" style={{ gap: 24 }}>\n          <div className=\"form-group flex-grow-1\">\n            <label htmlFor=\"start-time\">\n              Start Time<span className=\"text-danger\">*</span>\n            </label>\n            <input\n              name=\"start-time\"\n              id=\"start-time\"\n              type=\"time\"\n              value={startTime}\n              onChange={(e) => setStartTime(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group flex-grow-1\">\n            <label htmlFor=\"end-time\">\n              End Time<span className=\"text-danger\">*</span>\n            </label>\n            <input\n              id=\"end-time\"\n              name=\"end-time\"\n              type=\"time\"\n              value={endTime}\n              onChange={(e) => setEndTime(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"organizer\">\n            Organizers<span className=\"text-danger\">*</span>\n          </label>\n          <Typeahead\n            id=\"organizers\"\n            onChange={(e) => setOrganizers(e)}\n            selected={organizers}\n            labelKey=\"organizer\"\n            multiple\n            emptyLabel=\"Start writing a new organizer\"\n            placeholder=\"Enter organizers\"\n            options={[]}\n            allowNew\n          />\n        </div>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"location\">\n            Location<span className=\"text-danger\">*</span>\n          </label>\n          <input\n            name=\"location\"\n            id=\"location\"\n            type=\"text\"\n            placeholder=\"Enter location\"\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group mb-3\" data-bs-theme={bootstrapTheme}>\n          <label htmlFor=\"hashtags\">Hashtags</label>\n          <Typeahead\n            id=\"hashtags\"\n            onChange={(e) => setHashtags(e)}\n            selected={hashtags}\n            multiple\n            labelKey=\"hashtags\"\n            emptyLabel=\"Start writing a new hashtag\"\n            placeholder=\"Enter hashtags\"\n            options={[\"build\", \"dao\", \"nft\", \"metaverse\", \"web3\"]}\n            allowNew\n          />\n        </div>\n        <div className=\"form-group mb-3\">\n          <label htmlFor=\"cover-image\">Cover Image</label>\n          <Widget\n            src=\"buildhub.near/widget/components.ImageUploader\"\n            loading=\"\"\n            props={{ image: state.image, onChange: onCoverChange }}\n          />\n        </div>\n      </div>\n      <div className=\"d-flex justify-content-end\">\n        <Button\n          disabled={!title || !description || !link || !location || !organizers}\n          variant=\"primary\"\n          onClick={onSubmit}\n        >\n          Submit\n        </Button>\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/components.modals.event.Form", "fact_widget_deployments_id": "aab34727a4cb023549491e741e9c68ce", "inserted_timestamp": "2024-03-18T16:30:47.791Z", "modified_timestamp": "2024-03-18T17:27:30.541Z", "__row_index": 0}