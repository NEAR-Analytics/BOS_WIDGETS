{"tx_hash": "CV8Cs7DdaXkJWPnjPMVt2nqmQUZXXQhHchrhRk52GCwj", "action_id_social": "CVemaBbpRuNAeYvqtXmzV7zVjATVeFeeK3dbU5uTZ18E-0-widget", "block_id": 117392570, "block_timestamp": "2024-04-22T16:24:25.287Z", "signer_id": "buildhub.near", "widget_name": "Notification.NotificationRolesSelector", "source_code": "const DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\");\nconst { InputField } = VM.require(\"buildhub.near/widget/components\") || {\n  InputField: <></>,\n};\nif (!DaoSDK) {\n  return <></>;\n}\nconst [groupsAndMembers, setGroupsAndMembers] = useState([]);\nconst [selectedRoles, setSelectedRoles] = useState({}); // { role:boolean }\nconst daoId = props.daoId || \"build.sputnik-dao.near\";\nconst accountId = props.accountId ?? context.accountId;\nconst onUpdate = props.onUpdate ?? (() => {});\nconst proposalType = props.proposalType;\nconst [message, setMessage] = useState(\n  `${accountId} created ${proposalType} proposal for ${daoId}`\n);\nconst bootstrapTheme = props.bootstrapTheme || \"dark\";\nconst sdk = DaoSDK(daoId);\nconst group = sdk.getGroupsAndMembers();\nif (group === null || !group.length) {\n  return;\n}\nsetGroupsAndMembers(group);\nconst handleCheckboxChange = (role) => {\n  setSelectedRoles((prevRoles) => {\n    if (prevRoles.hasOwnProperty(role)) {\n      return {\n        ...prevRoles,\n        [role]: !prevRoles[role],\n      };\n    } else {\n      return {\n        ...prevRoles,\n        [role]: true,\n      };\n    }\n  });\n};\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-color: rgb(255, 175, 81);\n  `;\nconst Wrapper = styled.div`\n  .checked > span:first-child {\n    background: var(--primary-color) !important;\n    border-color: var(--primary-color) !important;\n  }\n  .cbx:hover span:first-child {\n    border-color: var(--primary-color) !important;\n  }\n  button[type=\"checkbox\"]:hover {\n    background: none !important;\n  }\n  label {\n    font-size: 13px;\n  }\n`;\nconst createNotificationsData = () => {\n  const someRoleSelected = Object.values(selectedRoles).some(\n    (value) => value === true\n  );\n  if (!someRoleSelected) {\n    return null;\n  }\n  const membersToNotify = [];\n  Object.keys(selectedRoles).map((item) => {\n    if (selectedRoles[item] === true) {\n      membersToNotify = membersToNotify.concat(\n        groupsAndMembers.find((group) => group.name === item).members\n      );\n    }\n  });\n  const uniqueMembersArray = [...new Set(membersToNotify)];\n  const notification = {\n    [accountId]: {\n      index: {\n        notify: JSON.stringify(\n          uniqueMembersArray.map((account) => {\n            return {\n              key: account,\n              value: {\n                message: message,\n                params: {\n                  daoId: daoId,\n                  tab: \"proposals\",\n                  page: \"proposal\",\n                },\n                type: \"buildhub/custom\",\n                widget: \"buildhub.near/widget/home\",\n              },\n            };\n          })\n        ),\n      },\n    },\n  };\n  const call = [\n    {\n      contractName: \"social.near\",\n      methodName: \"set\",\n      args: { data: notification, options: { refund_unused_deposit: true } },\n      deposit: 200000000000000000000000,\n    },\n  ];\n  return call;\n};\nuseEffect(() => {\n  onUpdate(createNotificationsData());\n}, [selectedRoles]);\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\nconst groupList = useMemo(() => {\n  return (\n    Array.isArray(groupsAndMembers) &&\n    groupsAndMembers.map((group) => {\n      const membersLength = group?.members.length;\n      if (!membersLength) {\n        return null;\n      }\n      return (\n        <div key={group}>\n          <Widget\n            src=\"nearui.near/widget/Input.Checkbox\"\n            props={{\n              label: (\n                <div>\n                  {capitalizeFirstLetter(group.name)} ({membersLength} members)\n                </div>\n              ),\n              onChange: (checked) => handleCheckboxChange(group.name),\n              checked: selectedRoles[group.name] ?? false,\n            }}\n          />\n        </div>\n      );\n    })\n  );\n}, [groupsAndMembers, selectedRoles]);\nreturn (\n  <ThemeContainer>\n    <Wrapper className=\"d-flex flex-column gap-2\">\n      <div>Send notification to following roles: (Optional)</div>\n      <div>\n        <label htmlFor={\"notifications-label\" + daoId}>Custom Message</label>\n        <input\n          name={\"notifications-label\" + daoId}\n          id={\"notifications-label\" + daoId}\n          className=\"form-control\"\n          data-bs-theme={bootstrapTheme}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n      </div>\n      <div>{groupList}</div>\n    </Wrapper>\n  </ThemeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/Notification.NotificationRolesSelector", "fact_widget_deployments_id": "0eb3913dc1b3e891fd0e6f06ebe13d4a", "inserted_timestamp": "2024-04-22T18:38:50.728Z", "modified_timestamp": "2024-04-22T18:38:50.728Z", "__row_index": 0}