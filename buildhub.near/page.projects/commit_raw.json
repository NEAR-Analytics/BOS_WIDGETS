{"tx_hash": "G3zhf5mtiafb1Fq7YqviYjmB7cdPGuRHjmd1AHV9bmaD", "action_id_social": "766YshUsHy2RWXyEeFAmHfphS6EV1pso5PdBZDTAPkLv-0-widget", "block_id": 121126082, "block_timestamp": "2024-06-14T05:36:38.808Z", "signer_id": "buildhub.near", "widget_name": "page.projects", "source_code": "const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst { ProjectCard } = VM.require(\n  \"buildhub.near/widget/components.project.Card\"\n) || {\n  ProjectCard: () => <></>,\n};\nconst app = props.app || \"buildhub.near\";\nconst type = props.type || \"project\";\nconst flattenObject = (obj) => {\n  let paths = [];\n  try {\n    Object.keys(obj).forEach((key) => {\n      const projects = Object.keys(obj?.[key]?.[app]?.[type] ?? {});\n      projects.map((path) => {\n        if (!path || !path.includes(\"_\")) {\n          return;\n        }\n        const convertedStr = path.replace(/_/g, \"/\");\n        paths.push(convertedStr);\n      });\n    });\n  } catch (e) {}\n  return paths;\n};\nconst fetchProjects = () => {\n  const keys = Social.keys(`*/${app}/${type}/*`, \"final\", {\n    order: \"desc\",\n    subscribe: true,\n  });\n  if (!keys) {\n    return \"Loading...\";\n  }\n  let flattenedKeys = flattenObject(keys);\n  const projects = Social.get(flattenedKeys, \"final\");\n  // check if projects is singular (since we have to update the return format for parsing)\n  const isSingular = flattenedKeys.length === 1;\n  if (isSingular) {\n    const [name, project, projectName] = flattenedKeys?.[0]\n      ?.split(\"/\")\n      .slice(0, 3);\n    return {\n      [name]: {\n        [project]: {\n          [projectName]: projects,\n        },\n      },\n    };\n  }\n  return projects;\n};\nconst data = fetchProjects();\nif (!data) {\n  return \"Loading...\";\n}\nconst processData = useCallback(\n  (data) => {\n    const accounts = Object.entries(data ?? {});\n    const allProjects = accounts\n      .map((account) => {\n        const accountId = account[0];\n        return Object.entries(account?.[1]?.[type] ?? {}).map((kv) => {\n          const metadata = JSON.parse(kv[1]);\n          return {\n            ...metadata,\n            accountId,\n            type: type,\n            title: metadata.title,\n            metadata,\n            tags: metadata.tags || [],\n            collaborators: metadata.contributors,\n            projectID: kv[0],\n          };\n        });\n      })\n      .flat();\n    return allProjects;\n  },\n  [type]\n);\nconst projects = processData(data);\nif (!projects) {\n  return \"\";\n}\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n  gap: 1rem;\n  @media screen and (max-width: 960px) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n  @media screen and (max-width: 768px) {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\nconst [filters, setFilters] = useState({\n  title: \"\",\n});\nconst [showFilterModal, setShowFilterModal] = useState(false);\nconst [showCreateOptionsModal, setShowCreateOptionsModal] = useState(false);\nconst toggleFilterModal = () => {\n  setShowFilterModal((prev) => !prev);\n};\nconst toggleCreateOptionsModal = () => {\n  setShowCreateOptionsModal((prev) => !prev);\n};\nconst filteredProjects = useMemo(() => {\n  let filtered = projects;\n  if (filters.title !== \"\") {\n    filtered = filtered.filter((project) =>\n      project.title.toLowerCase().includes(filters.title ?? \"\".toLowerCase())\n    );\n  }\n  if (filters.teamSize !== \"\") {\n    filtered = filtered.filter((project) => {\n      switch (filters.teamSize) {\n        case \"1-10\":\n          return project.collaborators.length <= 10;\n        case \"10-50\":\n          return (\n            project.collaborators.length <= 50 &&\n            project.collaborators.length >= 10\n          );\n        case \"50-100\":\n          return (\n            project.collaborators.length <= 100 &&\n            project.collaborators.length >= 50\n          );\n        case \"100+\":\n          return project.collaborators.length > 100;\n        default:\n          return true;\n      }\n    });\n  }\n  if (filters.tags.length > 0) {\n    filtered = filtered.filter((project) =>\n      filters.tags.every((tag) => project.tags.includes(tag))\n    );\n  }\n  return filtered;\n}, [filters, projects]);\nconst tagFilters = useMemo(() => {\n  let tags = projects.map((project) => project.tags).flat();\n  tags = [...new Set(tags)];\n  return tags;\n}, [projects]);\nreturn (\n  <Wrapper\n    className=\"container-xl mx-auto\"\n    style={{ margin: \"24px 0\" }}\n    data-bs-theme=\"dark\"\n  >\n    <Widget\n      src=\"builddao.near/widget/page.projects.FiltersModal\"\n      loading=\"\"\n      props={{\n        showModal: showFilterModal,\n        toggleModal: toggleFilterModal,\n        filters: filters,\n        setFilters: setFilters,\n        tagFilters,\n      }}\n    />\n    <Widget\n      src=\"builddao.near/widget/page.projects.ImportAndCreateModal\"\n      loading=\"\"\n      props={{\n        showModal: showCreateOptionsModal,\n        toggleModal: toggleCreateOptionsModal,\n      }}\n    />\n    <div className=\"my-3 d-flex align-items-center justify-content-between\">\n      <h2 style={{ color: \"var(--text-color, #fff)\", fontSize: \"18px\" }}>\n        Projects\n      </h2>\n      {context.accountId && (\n        <Button\n          variant=\"primary\"\n          onClick={() => setShowCreateOptionsModal(true)}\n        >\n          Create Project\n        </Button>\n      )}\n    </div>\n    <div className=\"form-group d-flex gap-4 align-items-center justify-content-between\">\n      <div className=\"input-group\">\n        <div className=\"input-group-text\">\n          <i className=\"bi bi-search\"></i>\n        </div>\n        <input\n          className=\"form-control\"\n          style={{ borderLeft: \"none\" }}\n          placeholder=\"Search by project ID or name\"\n          value={filters.title}\n          onChange={(e) => setFilters({ ...filters, title: e.target.value })}\n        />\n      </div>\n      <Button\n        className=\"d-flex align-items-center\"\n        style={{ gap: 10, padding: \"10px 26px\" }}\n        onClick={() => setShowFilterModal(true)}\n      >\n        Filter <i className=\"bi bi-sliders\"></i>\n      </Button>\n    </div>\n    <Container>\n      {filteredProjects.length === 0 && (\n        <p className=\"fw-bold text-white\">No Projects Found</p>\n      )}\n      {filteredProjects.map((project) => (\n        <ProjectCard project={project} type={type} />\n      ))}\n    </Container>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/page.projects", "fact_widget_deployments_id": "f0d69b4abfc75795f475267bbfd04288", "inserted_timestamp": "2024-06-14T06:55:36.283Z", "modified_timestamp": "2024-06-14T07:55:06.951Z", "__row_index": 0}