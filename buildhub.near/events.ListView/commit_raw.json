{"tx_hash": "8254YJx4byTSafUZN7BksFAcAuowt2Z2CrDB9Q5qE1du", "action_id_social": "DYazXZi8peUb6rnF8XghiWFbRWwAmW2AxykDKSTkZcFQ-0-widget", "block_id": 118163062, "block_timestamp": "2024-05-03T14:14:04.596Z", "signer_id": "buildhub.near", "widget_name": "events.ListView", "source_code": "const { Button, Hashtag } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n  Hashtag: () => <></>,\n};\nconst events = props.events ?? [];\nconst currentDate = props.currentDate;\nconst theme = props.theme;\nif (!events || !currentDate) {\n  return \"\";\n}\nconst currentMonthEvents = events.filter((event) => {\n  const eventStartDate = new Date(event.start);\n  const eventEndDate = new Date(event.end);\n  if (event.recurrence) {\n    const frequency = event.recurrence.frequency;\n    switch (frequency) {\n      case \"daily\":\n      case \"weekly\":\n      case \"yearly\":\n      case \"monthly\":\n        return (\n          eventStartDate.getMonth() <= currentDate.getMonth() &&\n          eventEndDate.getMonth() >= currentDate.getMonth()\n        );\n      default:\n        return eventStartDate.getMonth() === currentDate.getMonth();\n    }\n  } else {\n    return eventStartDate.getMonth() === currentDate.getMonth();\n  }\n});\nfunction getTimeStamp(date) {\n  return new Date(date).getTime();\n}\nfunction getDaysInMonth(year, month) {\n  return new Date(year, month + 1, 0).getDate();\n}\nfunction formatDate(date) {\n  return new Date(parseInt(date))\n    .toLocaleDateString(\"en-us\", {\n      day: \"numeric\",\n      month: \"short\",\n    })\n    .split(\" \")\n    .reverse()\n    .join(\" \");\n}\nfunction scheduleEventsWeekly(\n  result,\n  year,\n  month,\n  event,\n  interval,\n  daysOfWeek\n) {\n  const daysInMonth = getDaysInMonth(year, month);\n  for (let day = 1; day <= daysInMonth; day++) {\n    const currentDate = new Date(year, month, day);\n    // Check if the current day falls on one of the specified days of the week\n    if (!daysOfWeek || daysOfWeek.includes(currentDate.getDay())) {\n      const formattedDate = getTimeStamp(currentDate);\n      result[formattedDate] = result[formattedDate] || [];\n      result[formattedDate].push(event);\n    }\n    if (day % 7 === 0 && interval > 1) {\n      day += interval * 7 - 1;\n    }\n  }\n  return result;\n}\nfunction getDayOfYear(date) {\n  const start = new Date(date.getFullYear(), 0, 0);\n  const diff = date - start;\n  const oneDay = 1000 * 60 * 60 * 24;\n  return Math.floor(diff / oneDay);\n}\nconst categorizedEvents = currentMonthEvents.reduce((result, event) => {\n  const eventTimestamp = getTimeStamp(event.start); // Format date as a string\n  if (event.recurrence) {\n    const frequency = event.recurrence.frequency;\n    const interval = event.recurrence.interval;\n    const daysOfWeek = event.recurrence.daysOfWeek;\n    const daysOfYear = event.recurrence.daysOfYear;\n    const currentYear = new Date(currentDate).getFullYear();\n    const currentMonth = new Date(currentDate).getMonth();\n    const daysInMonth = getDaysInMonth(currentYear, currentMonth);\n    switch (frequency) {\n      case \"daily\": {\n        for (let day = 1; day <= daysInMonth; day++) {\n          const formattedDate = getTimeStamp(\n            new Date(currentYear, currentMonth, day)\n          );\n          result[formattedDate] = result[formattedDate] || [];\n          result[formattedDate].push(event);\n        }\n        break;\n      }\n      case \"weekly\": {\n        result = scheduleEventsWeekly(\n          result,\n          currentYear,\n          currentMonth,\n          event,\n          interval,\n          daysOfWeek\n        );\n        break;\n      }\n      case \"yearly\":\n      case \"monthly\": {\n        const eventMonth = new Date(event.start).getMonth();\n        if (eventMonth === currentMonth) {\n          const dateTimeStamp = getTimeStamp(\n            new Date(\n              currentDate.getFullYear(),\n              eventMonth + 1,\n              new Date(event.start).getDate()\n            )\n          );\n          if (\n            (daysOfWeek && daysOfWeek.includes(currentDate.getDay())) ||\n            (daysOfYear && daysOfYear.includes(getDayOfYear(currentDate))) ||\n            (!daysOfWeek && !daysOfYear)\n          ) {\n            result[dateTimeStamp] = result[dateTimeStamp] || [];\n            result[dateTimeStamp].push(event);\n          }\n        }\n        break;\n      }\n    }\n  } else {\n    result[eventTimestamp] = result[eventTimestamp] || [];\n    result[eventTimestamp].push(event);\n  }\n  return result;\n}, {});\nconst EventsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  ${props.theme === \"light\" &&\n  `\n  button {\n    background: white;\n    color: black;\n    border: 1px solid #cdcdcd;\n    :hover {\n      background: #ededed !important;\n    }\n  }\n  p {\n    color: black !important;\n  }\n  `}\n`;\nconst StyledEvent = styled.div`\n  border-radius: 16px;\n  background: #23242b;\n  display: flex;\n  padding: 24px;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-start;\n  gap: 24px;\n  color: var(--font-color, #fff);\n  h4,\n  p {\n    margin: 0;\n  }\n  h4 {\n    /* H4/Large */\n    font-size: 18px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 160%; /* 28.8px */\n  }\n  p {\n    /* Body/16px */\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 170%; /* 27.2px */\n  }\n  .cover-image {\n    img {\n      width: 40px;\n      height: 40px;\n      object-fit: cover;\n      border-radius: 8px;\n    }\n  }\n  ${props.theme === \"light\" &&\n  `\n  background: white;\n  color: black;\n  border: 1px solid #cdcdcd;\n  button.join-now-btn{\n    background: #eca227;\n    border: none;\n    &:hover{\n      background: #e49b48 !important;\n    }\n  }\n  `}\n`;\nconst formatStartTime = (time) => {\n  const date = new Date(time);\n  const options = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    timeZoneName: \"short\",\n  };\n  return date.toLocaleString(\"en-US\", options);\n};\nconst dateKeys = Object.keys(categorizedEvents);\nconst today = new Date().getTime();\nconst futureEvents =\n  dateKeys.filter((date) => {\n    return categorizedEvents[date].some((event) => {\n      return date >= today;\n    });\n  }) || [];\nconst pastEvents =\n  dateKeys.filter((date) => !futureEvents.includes(date)) || [];\nconst sortEvents = (events) => {\n  return events.sort((a, b) => parseInt(a) - parseInt(b));\n};\nfutureEvents.sort();\npastEvents.sort();\nconst EventGroup = ({ date }) => {\n  const Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 32px;\n    @media screen and (max-width: 768px) {\n      flex-direction: column;\n      gap: 24px;\n    }\n    ${props.theme === \"light\" &&\n    `\n    span.event-date{\n      --text-color: black;\n      --white-50: #0d0d0d;\n    }\n    `}\n  `;\n  return (\n    <Container>\n      <h3 className=\"flex-shrink-0 text-white\" style={{ minWidth: 65 }}>\n        <div className=\"d-flex gap-2 align-items-center\">\n          {formatDate(date)\n            .split(\" \")\n            .map((it, i) => (\n              <span\n                className=\"event-date\"\n                style={{\n                  fontSize: i === 0 ? \"24px\" : \"16px\",\n                  color:\n                    i === 0\n                      ? \"var(--text-color, #fff)\"\n                      : \"var(--white-50, #CDD0D5)\",\n                }}\n              >\n                {it}\n              </span>\n            ))}\n        </div>\n      </h3>\n      <div className=\"w-100 d-flex flex-column gap-3\">\n        {Array.isArray(categorizedEvents?.[date]) &&\n          categorizedEvents[date].map((event, i) => {\n            const hashtags = Array.isArray(event?.extendedProps?.hashtags)\n              ? event?.extendedProps?.hashtags.map((it) => {\n                  if (it.customOption) {\n                    return it.hashtags;\n                  }\n                  return it;\n                })\n              : [];\n            const organizers = Array.isArray(event?.extendedProps?.organizers)\n              ? event?.extendedProps?.organizers.map((it) => {\n                  if (it.customOption) {\n                    return it.organizer;\n                  }\n                  return it;\n                })\n              : [];\n            const organizer = organizers[0];\n            const organizerProfile = Social.getr(`${organizer}/profile`);\n            const startTime = formatStartTime(event.start);\n            const eventAuthor = (event?.key ?? \"\")?.split(\"/\")[0] ?? \"\";\n            const eventApp = (event?.key ?? \"\")?.split(\"/\")[1] ?? \"\";\n            const eventType = (event?.key ?? \"\")?.split(\"/\")[2] ?? \"\";\n            const eventKey = (event?.key ?? \"\")?.split(\"/\")[3] ?? \"\";\n            const handleDelete = () => {\n              Social.set({\n                [eventApp]: {\n                  [eventType]: {\n                    [eventKey]: {\n                      \"\": null,\n                    },\n                  },\n                },\n              });\n            };\n            return (\n              <StyledEvent key={`event-${i}`}>\n                <div className=\"d-flex align-items-center justify-content-between w-100\">\n                  <div className=\"d-flex align-items-center gap-2 flex-wrap\">\n                    {hashtags.map((tag) => (\n                      <Hashtag key={tag}>{tag}</Hashtag>\n                    ))}\n                  </div>\n                  <span>{startTime}</span>\n                </div>\n                <div className=\"d-flex gap-3\">\n                  <div className=\"cover-image\">\n                    <Widget\n                      src=\"mob.near/widget/Image\"\n                      props={{\n                        image: event.extendedProps.cover,\n                        fallbackUrl:\n                          \"https://ipfs.near.social/ipfs/bafkreibas66y6ewop5ix2n6mgybpjz6epg7opqvcplmm5jw4jlhdik5nhe\",\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <h4>{event.title}</h4>\n                    <Markdown text={event.description} />\n                  </div>\n                </div>\n                <div className=\"d-flex align-items-center flex-wrap gap-3\">\n                  <span className=\"d-flex align-items-center gap-1\">\n                    <Widget\n                      src=\"mob.near/widget/Image\"\n                      loading=\"\"\n                      props={{\n                        image: organizerProfile.image,\n                        fallbackUrl:\n                          \"https://ipfs.near.social/ipfs/bafkreibas66y6ewop5ix2n6mgybpjz6epg7opqvcplmm5jw4jlhdik5nhe\",\n                        style: {\n                          width: 24,\n                          height: 24,\n                          borderRadius: 12,\n                          objectFit: \"cover\",\n                        },\n                      }}\n                    />\n                    {organizerProfile.name ??\n                      organizers[0] ??\n                      \"No name profile\"}\n                  </span>\n                  <span className=\"d-flex align-items-center gap-1\">\n                    <i className=\"bi bi-geo-alt\"></i>\n                    {event?.extendedProps?.location}\n                  </span>\n                  <span className=\"d-flex align-items-center gap-1\">\n                    <i className=\"bi bi-calendar\"></i>\n                    Last Date:{\" \"}\n                    {new Date(event.end).toLocaleString(\"en-us\", {\n                      day: \"numeric\",\n                      month: \"short\",\n                    })}\n                  </span>\n                </div>\n                <div className=\"d-flex align-items-center gap-3\">\n                  <Button\n                    className=\"join-now-btn\"\n                    noLink={true}\n                    href={`${event?.url}`}\n                    target=\"_blank\"\n                    variant=\"primary\"\n                  >\n                    Join Now\n                  </Button>\n                  {eventAuthor === context.accountId && (\n                    <Button\n                      onClick={handleDelete}\n                      style={{ background: \"#ff2b2b\" }}\n                      variant=\"primary\"\n                    >\n                      Delete Event\n                    </Button>\n                  )}\n                </div>\n              </StyledEvent>\n            );\n          })}\n      </div>\n    </Container>\n  );\n};\nconst PastEvents = () => {\n  return (\n    <>\n      {!pastEvents.length && (\n        <p className=\"text-white\">No past events this month.</p>\n      )}\n      {pastEvents.map((date, i) => (\n        <EventGroup date={date} />\n      ))}\n    </>\n  );\n};\nconst [showPastEvents, setShowPastEvents] = useState(false);\nreturn (\n  <EventsContainer>\n    <Button\n      className=\"event-button\"\n      onClick={() => setShowPastEvents((prev) => !prev)}\n    >\n      {showPastEvents ? \"Hide\" : \"Show\"} Past Events\n    </Button>\n    {showPastEvents && <PastEvents />}\n    {!futureEvents.length && (\n      <p className=\"text-white\">No upcoming events this month</p>\n    )}\n    {futureEvents.map((date, i) => (\n      <EventGroup date={date} />\n    ))}\n  </EventsContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/events.ListView", "fact_widget_deployments_id": "2bb1701782a009f15c35e9dc61c3e93e", "inserted_timestamp": "2024-05-03T15:40:44.027Z", "modified_timestamp": "2024-05-03T15:40:44.027Z", "__row_index": 14}