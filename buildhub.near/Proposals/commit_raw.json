{"tx_hash": "3apsm9Ubr1YYx8mAUE7bEZducMC9zi7Y4BSLPCxPsuUm", "action_id_social": "BtZQPFkvdTZNVZpMDiKLJtNRY8dfakwawd8mfNtDcr1c-0-widget", "block_id": 111911959, "block_timestamp": "2024-02-02T06:03:46.908Z", "signer_id": "buildhub.near", "widget_name": "Proposals", "source_code": "const { Button } = VM.require(\"buildhub.near/widget/components.Button\") || {\n  Button: <></>\n};\nconst DaoSDK = VM.require(\"sdks.near/widget/SDKs.Sputnik.DaoSDK\");\n\nif (!DaoSDK) {\n  return <></>;\n}\nconst resPerPage = 10;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst proposalId = props.proposalId ?? null;\nconst sdk = DaoSDK(daoId);\nconst [currentPage, setCurrentPage] = useState(0);\nconst accountId = context.accountId;\n\nconst [showProposalModal, setShowModal] = useState(false);\nconst lastProposalId = sdk.getLastProposalId();\nconst reversedProposals = proposalId\n  ? [\n      sdk.getProposalById({\n        proposalId\n      })\n    ] || []\n  : sdk.getProposals({\n      offset:\n        currentPage === 0\n          ? lastProposalId > 10\n            ? lastProposalId - resPerPage\n            : lastProposalId ?? 10\n          : lastProposalId - currentPage * resPerPage,\n      limit: resPerPage\n    }) || [];\n\nconst proposals = reversedProposals.reverse();\nconst PaginationThemeContainer = props.PaginationThemeContainer;\n\nconst ThemeContainer =\n  props.ThemeContainer ||\n  styled.div`\n    --primary-bg-color: #23242b;\n    --secondary-bg-color: #ffffff1a;\n    --primary-border-color: #fff;\n    --primary-text-color: #ffffff;\n    --secondary-text-color: #b0b0b0;\n    --primary-btn-bg-color: #ffaf51;\n    --primary-btn-text-color: #000;\n    --approve-bg-color: #82e299;\n    --reject-bg-color: #c23f38;\n    --spam-bg-color: #f5c518;\n    --vote-button-color: #ffffff;\n    --success-badge-bg-color: #38c7931a;\n    --success-badge-text-color: #38c793;\n    --primary-badge-bg-color: #ffaf5133;\n    --primary-badge-text-color: #ffaf51;\n    --info-badge-bg-color: #51b6ff33;\n    --info-badge-text-color: #51b6ff;\n    --danger-badge-bg-color: #fd2a5c1a;\n    --danger-badge-text-color: #fd2a5c;\n    --black-badge-bg-color: #ffffff1a;\n    --black-badge-text-color: #fff;\n  `;\n\nconst Container = styled.div`\n  .ndc-card {\n    border: none;\n    background-color: var(--primary-bg-color);\n    color: var(--primary-text-color) !important;\n    padding: 2rem;\n  }\n`;\n\nconst handleVote = ({ action, proposalId, proposer }) => {\n  const customAction = action.replace(\"Vote\", \"\");\n  const notification = {\n    [accountId]: {\n      index: {\n        notify: JSON.stringify([\n          {\n            key: proposer,\n            value: {\n              message: `${accountId} voted to ${customAction} your proposal for ${daoId} (Proposal ID: ${proposalId})`,\n              params: {\n                daoId: daoId,\n                proposalId: proposalId\n              },\n              type: \"custom\",\n              widget: \"buildhub.near/widget/Proposals\"\n            }\n          }\n        ])\n      }\n    }\n  };\n\n  sdk.actProposal({\n    proposalId,\n    action,\n    gas: 200000000000000,\n    additionalCalls: [\n      {\n        contractName: \"social.near\",\n        methodName: \"set\",\n        args: { data: notification },\n        deposit: Big(JSON.stringify(notification).length * 16)\n          .mul(Big(10).pow(20))\n          .toString()\n      }\n    ]\n  });\n};\n\nconst policy = sdk.getPolicy();\nconst proposalKinds = sdk.proposalKinds;\nconst actions = sdk.voteActions;\nconst userRoles = [];\nif (Array.isArray(policy.roles)) {\n  for (const role of policy.roles) {\n    if (role.kind === \"Everyone\") {\n      userRoles.push(role);\n      continue;\n    }\n    if (!role.kind.Group) continue;\n    if (accountId && role.kind.Group && role.kind.Group.includes(accountId)) {\n      userRoles.push(role);\n    }\n  }\n}\n\nconst proposalPeriod = policy.proposal_period;\n\nconst proposalsComponent = useMemo(() => {\n  return (\n    <div className=\"d-flex flex-column gap-2\">\n      {Array.isArray(proposals) ? (\n        proposals.map((item) => {\n          const kindName =\n            typeof item.kind === \"string\"\n              ? item.kind\n              : Object.keys(item.kind)[0];\n\n          const comments = sdk.getCommentsByProposalId({ proposalId: item.id });\n\n          const isAllowedToVote = [\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteApprove\n            }),\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteReject\n            }),\n\n            sdk.hasPermission({\n              accountId,\n              kindName,\n              actionType: actions.VoteRemove\n            })\n          ];\n\n          const { thresholdVoteCount } =\n            sdk.getVotersAndThresholdForProposalKind({\n              kindName\n            });\n          const totalVotes = sdk.calculateVoteCountByType({\n            votes: item.votes\n          });\n          let expirationTime = sdk.getProposalExpirationTime({\n            submissionTime: item.submission_time\n          });\n\n          return (\n            <Widget\n              src=\"buildhub.near/widget/components.ProposalCard\"\n              props={{\n                proposalData: {\n                  ...item,\n                  typeName: kindName.replace(/([A-Z])/g, \" $1\").trim(),\n                  totalVotesNeeded: thresholdVoteCount,\n                  totalVotes: {\n                    ...totalVotes,\n                    yes: totalVotes.approve,\n                    no: totalVotes.reject\n                  },\n                  expirationTime\n                },\n                daoId: daoId,\n                comments: comments,\n                isAllowedToVote,\n                handleVote\n              }}\n            />\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}, [proposals]);\n\nreturn (\n  <ThemeContainer>\n    <Container className=\"d-flex flex-column gap-4\">\n      <Widget\n        src=\"buildhub.near/widget/components.modals.CreateProposal\"\n        props={{\n          showModal: showProposalModal,\n          toggleModal: () => setShowModal(!showProposalModal)\n        }}\n      />\n      <div className=\"d-flex justify-content-between\">\n        <h3 className=\"text-white\">Proposals</h3>\n        <Button variant=\"primary\" onClick={() => setShowModal(true)}>\n          Create Proposal\n        </Button>\n      </div>\n      <div className=\"d-flex flex-column gap-4\">{proposalsComponent}</div>\n      {!proposalId && (\n        <div className=\"d-flex justify-content-center my-4\">\n          <Widget\n            src={\"buildhub.near/widget/components.Pagination\"}\n            props={{\n              maxVisiblePages: 5,\n              totalPages: Math.round(lastProposalId / resPerPage),\n              onPageClick: (v) => setCurrentPage(v),\n              selectedPage: currentPage,\n              ThemeContainer: PaginationThemeContainer\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  </ThemeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/Proposals", "fact_widget_deployments_id": "c59dbe2eecd6e80dbdf4b0f3ba5d42d9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 12}