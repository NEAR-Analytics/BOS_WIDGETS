{"tx_hash": "8254YJx4byTSafUZN7BksFAcAuowt2Z2CrDB9Q5qE1du", "action_id_social": "DYazXZi8peUb6rnF8XghiWFbRWwAmW2AxykDKSTkZcFQ-0-widget", "block_id": 118163062, "block_timestamp": "2024-05-03T14:14:04.596Z", "signer_id": "buildhub.near", "widget_name": "events.Calendar", "source_code": "const { Button } = VM.require(\"buildhub.near/widget/components\") || {\n  Button: () => <></>,\n};\nconst theme = props.theme || (Storage.get(\"event_theme\") ?? \"dark\");\nconst { fetchThings } = VM.require(\n  \"buildhub.near/widget/lib.everything-sdk\"\n) || {\n  fetchThings: () => {},\n};\nconst HeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  flex-basis: 0px;\n  flex-grow: 1;\n  ${theme === \"light\" &&\n  `\n    color: black;\n  `}\n`;\nconst HeaderCenter = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  flex-basis: 0px;\n  flex-grow: 1;\n  ${theme === \"light\" &&\n  `\n    button {\n      color: black;\n      \n    }\n    button.active{\n      background: white;\n      border: 1px solid #cdcdcd;\n      color: black;\n      &:hover {\n        background: #cdcdcd !important;\n      }\n    }\n  `}\n`;\nconst HeaderRight = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  flex-basis: 0px;\n  flex-grow: 1;\n  ${theme === \"light\" &&\n  `\n    button {\n      color: black;\n      \n    }\n    button.filter-button{\n      background: white;\n      border: 1px solid #cdcdcd;\n      color: black;\n      &:hover {\n        background: #cdcdcd !important;\n      }\n    }\n  `}\n`;\nconst StyledToolbar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n  padding: 16px 24px;\n  margin-bottom: 24px;\n  background: var(--bg-1, #000000);\n  color: var(--text-color, #fff);\n  font-size: 18px;\n  .section {\n    display: flex;\n    align-items: center;\n    flex-basis: 0;\n    flex-grow: 1;\n  }\n  .date-changer {\n    all: unset;\n    cursor: pointer;\n  }\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  ${theme === \"light\" &&\n  `\n    background: white;\n  `}\n`;\n// implement event fetching and filtering\nconst [selectedView, setSelectedView] = useState(\"month\");\nconst [currentDate, setCurrentDate] = useState(new Date());\nconst [showCreateModal, setShowCreateModal] = useState(false);\nconst toggleCreateModal = () => setShowCreateModal(!showCreateModal);\nconst [showFilterModal, setShowFilterModal] = useState(false);\nconst toggleFilterModal = () => setShowFilterModal(!showFilterModal);\nconst [filters, setFilters] = useState({});\nconst dateString = currentDate.toLocaleString(\"en-us\", {\n  month: \"long\",\n  year: \"numeric\",\n});\nconst handleMonthChange = (change) => {\n  const date = currentDate;\n  date.setMonth(date.getMonth() + change);\n  setCurrentDate(date);\n};\nconst Toolbar = () => {\n  return (\n    <StyledToolbar>\n      <HeaderLeft>\n        <div className=\"section gap-3\">\n          <span>{dateString}</span>\n          <button\n            className=\"date-changer\"\n            onClick={() => handleMonthChange(-1)}\n          >\n            <i className=\"bi bi-chevron-left\"></i>\n          </button>\n          <button className=\"date-changer\" onClick={() => handleMonthChange(1)}>\n            <i className=\"bi bi-chevron-right\"></i>\n          </button>\n          {(!props.theme || props.hideThemeSwitcher) && (\n            <button\n              className=\"date-changer\"\n              style={{\n                border: `1px solid ${\n                  theme === \"light\" ? \"#cdcdcd\" : \"rgba(255, 255, 255, 0.2)\"\n                }`,\n                padding: \"4px 12px\",\n                widht: \"32px\",\n                height: \"32px\",\n                borderRadius: \"8px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n              onClick={() =>\n                Storage.set(\"event_theme\", theme === \"light\" ? \"dark\" : \"light\")\n              }\n            >\n              <i className={theme === \"light\" ? \"bi bi-moon\" : \"bi bi-sun\"}></i>\n            </button>\n          )}\n        </div>\n      </HeaderLeft>\n      <HeaderCenter>\n        <div className=\"section gap-1 justify-content-center\">\n          <Button\n            className={selectedView === \"month\" ? \"active\" : \"\"}\n            variant={selectedView === \"month\" ? \"secondary\" : \"outline\"}\n            onClick={() => setSelectedView(\"month\")}\n          >\n            Month\n          </Button>\n          <Button\n            className={selectedView === \"list\" ? \"active\" : \"\"}\n            variant={selectedView === \"list\" ? \"secondary\" : \"outline\"}\n            onClick={() => setSelectedView(\"list\")}\n          >\n            List\n          </Button>\n        </div>\n      </HeaderCenter>\n      <HeaderRight>\n        <div className=\"section justify-content-end\" style={{ gap: 10 }}>\n          <Button\n            className=\"filter-button\"\n            variant=\"outline\"\n            onClick={() => setShowFilterModal(true)}\n          >\n            Filter By\n          </Button>\n          {context.accountId && (\n            <Button variant=\"primary\" onClick={() => setShowCreateModal(true)}>\n              Add Event\n            </Button>\n          )}\n        </div>\n      </HeaderRight>\n    </StyledToolbar>\n  );\n};\nconst app = props.app ?? \"every\";\nconst thing = props.thing ?? \"event\";\nconst events = fetchThings(app, thing);\nif (!events) {\n  return <></>;\n}\nevents = events.filter((event) => event.title);\nconst filterEvents = () => {\n  let filteredEvents = events;\n  // handle date from filter\n  if (filters.from) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return new Date(event.start) >= new Date(filters.from);\n    });\n  }\n  // handle date to filter\n  if (filters.to) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return new Date(event.start) <= new Date(filters.to);\n    });\n  }\n  // handle cleared filters\n  if (filters == {}) {\n    return filteredEvents;\n  }\n  // handle title filter\n  if (filters.title) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return event.title.toLowerCase().includes(filters.title.toLowerCase());\n    });\n  }\n  // handle location filter\n  if (filters.location) {\n    filteredEvents = filteredEvents.filter((event) => {\n      return event?.extendedProps?.location\n        .toLowerCase()\n        .includes(filters.location.toLowerCase());\n    });\n  }\n  // handle organizer filter\n  if (filters.organizers.length) {\n    const organizers =\n      filters.organizers.map((it) => {\n        if (it.customOption) {\n          return it.organizers;\n        }\n        return it;\n      }) ?? [];\n    filteredEvents = filteredEvents.filter((event) => {\n      const eventOrganizers = event?.extendedProps?.organizers.map((it) => {\n        if (it.customOption) {\n          return it.organizer;\n        }\n        return it;\n      });\n      return eventOrganizers.some((it) => organizers.includes(it));\n    });\n  }\n  // handle tag filter\n  if (filters.tags.length) {\n    const tags =\n      filters.tags.map((it) => {\n        if (it.customOption) {\n          return it.tags;\n        }\n        return it;\n      }) ?? [];\n    filteredEvents = filteredEvents.filter((event) => {\n      const eventTags = event?.extendedProps?.hashtags.map((it) => {\n        if (it.customOption) {\n          return it.hashtags;\n        }\n        return it;\n      });\n      return eventTags.some((it) => tags.includes(it));\n    });\n  }\n  return filteredEvents;\n};\nevents = filterEvents();\nconst CurrentView = () => {\n  if (selectedView === \"month\") {\n    return (\n      <Widget\n        src=\"buildhub.near/widget/events.MonthView\"\n        loading=\"\"\n        props={{\n          currentDate,\n          events,\n          setSelectedView,\n          theme: theme,\n        }}\n      />\n    );\n  }\n  return (\n    <Widget\n      src=\"buildhub.near/widget/events.ListView\"\n      loading=\"\"\n      props={{\n        currentDate,\n        events,\n        theme: theme,\n      }}\n    />\n  );\n};\nconst Container = styled.div`\n  background: var(--bg-1, #000000);\n  ${theme === \"light\" &&\n  `\n    background: white;\n  `}\n  /* Typeahead Fix */\n  .rbt-token-removeable {\n    background: #007bff;\n    color: #fff;\n  }\n`;\nreturn (\n  <Container className=\"mb-3 mx-3\">\n    <Widget\n      src=\"buildhub.near/widget/components.modals.CreateEvent\"\n      loading=\"\"\n      props={{\n        showModal: showCreateModal,\n        toggleModal: toggleCreateModal,\n        app,\n        thing,\n        bootstrapTheme: theme,\n      }}\n    />\n    <Widget\n      src=\"buildhub.near/widget/components.modals.FilterEvents\"\n      loading=\"\"\n      props={{\n        showModal: showFilterModal,\n        toggleModal: toggleFilterModal,\n        filters: filters,\n        setFilters: setFilters,\n        bootstrapTheme: theme,\n      }}\n    />\n    <Toolbar />\n    <CurrentView />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/events.Calendar", "fact_widget_deployments_id": "40d27829efbbc323e72e8c63f6518afe", "inserted_timestamp": "2024-05-03T15:40:44.027Z", "modified_timestamp": "2024-05-03T15:40:44.027Z", "__row_index": 7}