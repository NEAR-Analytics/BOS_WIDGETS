{"tx_hash": "8254YJx4byTSafUZN7BksFAcAuowt2Z2CrDB9Q5qE1du", "action_id_social": "DYazXZi8peUb6rnF8XghiWFbRWwAmW2AxykDKSTkZcFQ-0-widget", "block_id": 118163062, "block_timestamp": "2024-05-03T14:14:04.596Z", "signer_id": "buildhub.near", "widget_name": "components.ImageUploader", "source_code": "const image = props.image;\nconst onChange = props.onChange;\nconst { InputField } = VM.require(\"buildhub.near/widget/components\") || {\n  InputField: () => <></>,\n};\nconst Tab = {\n  Upload: \"Upload\",\n  NFT: \"NFT\",\n  URL: \"URL\",\n};\nconst origTab = () =>\n  image.nft.contractId || image.nft.tokenId\n    ? Tab.NFT\n    : !image.ipfs_cid && image.url\n    ? Tab.URL\n    : Tab.Upload;\nState.init({\n  origImage: image,\n  tab: origTab(),\n  url: image.url,\n  nft: image.nft ?? {},\n  img: { cid: image.ipfs_cid },\n});\nconst setTab = (tab) => State.update({ tab });\nif (JSON.stringify(image) !== JSON.stringify(state.image)) {\n  State.update({\n    image,\n  });\n}\nlet localImage = {};\nif (state.origImage.nft.contractId || state.origImage.nft.tokenId) {\n  localImage.nft = {};\n  if (state.origImage.nft.contractId) {\n    localImage.nft.contractId = null;\n  }\n  if (state.origImage.nft.tokenId) {\n    localImage.nft.tokenId = null;\n  }\n}\nif (state.origImage.ipfs_cid) {\n  localImage.ipfs_cid = null;\n}\nif (state.origImage.url) {\n  localImage.url = null;\n}\nif (state.tab === Tab.NFT && (state.nft.contractId || state.nft.tokenId)) {\n  localImage.nft = {\n    contractId: state.nft.contractId || \"\",\n    tokenId: state.nft.tokenId || \"\",\n  };\n} else if (state.tab === Tab.Upload && state.img.cid) {\n  localImage.ipfs_cid = state.img.cid;\n}\nif (state.tab === Tab.URL && state.url) {\n  localImage.url = state.url;\n}\nif (onChange && JSON.stringify(image) !== JSON.stringify(localImage)) {\n  onChange(localImage);\n}\nconst debounce = (func, wait) => {\n  const pause = wait || 350;\n  let timeout;\n  return (args) => {\n    const later = () => {\n      clearTimeout(timeout);\n      func(args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, pause);\n  };\n};\nconst onNFTChange = debounce((e) => {\n  State.update({\n    nft: {\n      ...state.nft,\n      [e.target.id]: e.target.value,\n    },\n  });\n});\nconst onImageChange = debounce((e) => {\n  State.update({\n    [e.target.id]: e.target.value,\n  });\n});\nconst Button = styled.div`\n  .btn {\n    all: unset;\n    display: inline-flex;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n    border-radius: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: normal;\n    font-family: \"Poppins\", sans-serif;\n    transition: all 300ms;\n    background: var(--button-outline-bg, transparent);\n    color: var(--button-outline-color, #fff);\n    color: ${props.theme === \"light\" ? \"black\" : \"\"};\n    border: 1px solid var(--stroke-color, rgba(255, 255, 255, 0.2));\n    &:hover:not(:disabled) {\n      background: var(--button-outline-hover-bg, rgba(255, 255, 255, 0.2));\n      cursor: pointer;\n    }\n  }\n`;\nreturn (\n  <div>\n    <ul className={`nav nav-tabs`}>\n      <li className=\"nav-item\">\n        <button\n          className={`nav-link ${state.tab === Tab.Upload ? \"active\" : \"\"}`}\n          aria-current=\"page\"\n          onClick={() => setTab(Tab.Upload)}\n        >\n          Upload\n        </button>\n      </li>\n      <li className=\"nav-item\">\n        <button\n          className={`nav-link ${state.tab === Tab.NFT ? \"active\" : \"\"}`}\n          aria-current=\"page\"\n          onClick={() => setTab(Tab.NFT)}\n        >\n          NFT\n        </button>\n      </li>\n      <li className=\"nav-item\">\n        <button\n          className={`nav-link ${state.tab === Tab.URL ? \"active\" : \"\"}`}\n          aria-current=\"page\"\n          onClick={() => setTab(Tab.URL)}\n        >\n          URL\n        </button>\n      </li>\n    </ul>\n    <div\n      className=\"p-2\"\n      style={{\n        border: \"solid 1px #FFFFFF33\",\n        borderTop: 0,\n        borderBottomLeftRadius: \".375rem\",\n        borderBottomRightRadius: \".375rem\",\n        minHeight: \"9em\",\n      }}\n    >\n      <Button\n        className={`${state.tab === Tab.Upload ? \"\" : \"visually-hidden\"}`}\n      >\n        <IpfsImageUpload image={state.img} />\n      </Button>\n      <div\n        data-bs-theme={props.theme}\n        className={`${\n          state.tab === Tab.NFT ? \"d-flex flex-column gap-2\" : \"visually-hidden\"\n        }`}\n      >\n        <input\n          key={\"contractId\"}\n          label={\"NFT contract\"}\n          placeholder={\"nft contract id\"}\n          value={state.nft.contractId}\n          onChange={onNFTChange}\n        />\n        <input\n          key={\"tokenId\"}\n          label={\"NFT token id\"}\n          placeholder={\"nft token id\"}\n          value={state.nft.tokenId}\n          onChange={onNFTChange}\n        />\n      </div>\n      <div\n        data-bs-theme={props.theme}\n        className={`${\n          state.tab === Tab.URL ? \"d-flex flex-column gap-2\" : \"visually-hidden\"\n        }`}\n      >\n        <input\n          key={\"url\"}\n          label={\"Image URL\"}\n          placeholder={\"image url\"}\n          value={state.url}\n          onChange={onImageChange}\n        />\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/buildhub.near/widget/components.ImageUploader", "fact_widget_deployments_id": "28e2cf52c5e9a24efeb7d90648beaa05", "inserted_timestamp": "2024-05-03T15:40:44.027Z", "modified_timestamp": "2024-05-03T15:40:44.027Z", "__row_index": 3}