{"tx_hash": "G8GB4JwurvHB1c1BuVf4k7eTvjCvPvcV2wc9i39xoSHD", "action_id_social": "6vHJBiYRb5Qmt61ENypDJHge8XiokTiq5WvLdyrDc8js-0-widget", "block_id": 102068977, "block_timestamp": "2023-09-27T11:42:21.176Z", "signer_id": "xabilosada.near", "widget_name": "WebSocketDemoFork", "source_code": "const WS_ADDRESS = props.config.WS_ADDRESS;\nconst MAX_RETRIES = props.config.MAX_RETRIES;\nconst RECONNECT_DELAY = props.config.RECONNECT_DELAY;\nconst PONG_WAIT_TIME = props.config.PONG_WAIT_TIME;\nconst MAX_DELAY = props.config.MAX_DELAY;\n\nconst userId = context.accountId;\n\nconst ConnectionStatus = {\n  CONNECTED: \"Connected\",\n  RECONNECTING: \"Reconnecting...\",\n  DISCONNECTED: \"Disconnected\",\n};\n\nconst WebSocketState = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3,\n};\n\nconst [messages, setMessages] = useState([]);\nconst [inputValue, setInputValue] = useState(\"\");\nconst [connectionStatus, setConnectionStatus] = useState(\n  ConnectionStatus.DISCONNECTED\n);\nconst [connectedUsers, setConnectedUsers] = useState([]);\nconst [selectedUser, setSelectedUser] = useState(null);\n\nconst socketRef = useRef(null);\nconst retryCountRef = useRef(0);\nconst shouldReconnectRef = useRef(true);\nconst pingIntervalRef = useRef(null);\n\nconst setupWebSocket = () => {\n  const ws = new WebSocket(WS_ADDRESS);\n\n  ws.onopen = () => {\n    console.log(\"Connected to the WebSocket\");\n    setConnectionStatus(ConnectionStatus.CONNECTED);\n    retryCountRef.current = 0;\n\n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n    }\n\n    pingIntervalRef.current = setInterval(() => {\n      if (ws.readyState === WebSocketState.OPEN) {\n        ws.send(JSON.stringify({ Ping: [] }));\n      }\n    }, PONG_WAIT_TIME);\n  };\n\n  ws.onmessage = (event) => {\n    console.log(\"Received message:\", event.data);\n\n    if (event.data === \"pong\") {\n      console.log(\"Received pong\");\n      setConnectionStatus(ConnectionStatus.CONNECTED);\n      return;\n    }\n\n    const parsedEvent = JSON.parse(event.data);\n    if (parsedEvent.type === \"usersList\") {\n      setConnectedUsers(parsedEvent.users);\n      return;\n    } else if (parsedEvent.type === \"message\") {\n      setMessages((prev) => [\n        ...prev,\n        `Received ${parsedEvent.content} from ${parsedEvent.from}`,\n      ]);\n      return;\n    }\n  };\n\n  ws.onclose = () => {\n    setConnectionStatus(\n      ConnectionStatus.RECONNECTING + \"...\" + retryCountRef.current + \"attempts\"\n    );\n    if (shouldReconnectRef.current && retryCountRef.current < MAX_RETRIES) {\n      setTimeout(\n        setupWebSocket,\n        Math.min(\n          RECONNECT_DELAY * Math.pow(2, retryCountRef.current),\n          MAX_DELAY\n        )\n      );\n      retryCountRef.current++;\n    } else {\n      setConnectionStatus(ConnectionStatus.DISCONNECTED);\n    }\n  };\n\n  ws.onerror = () => {\n    setConnectionStatus(ConnectionStatus.DISCONNECTED);\n  };\n\n  socketRef.current = ws;\n};\nuseEffect(() => {\n  setupWebSocket();\n\n  return () => {\n    shouldReconnectRef.current = false;\n    clearInterval(pingIntervalRef.current);\n    if (socketRef.current) {\n      socketRef.current.close();\n    }\n  };\n}, []);\n\nconst handleRegister = () => {\n  if (\n    socketRef.current &&\n    socketRef.current.readyState === WebSocketState.OPEN\n  ) {\n    socketRef.current.send(JSON.stringify({ register: true, userId }));\n  }\n};\n\nconst handleInputChange = (event) => {\n  setInputValue(event.target.value);\n};\n\nconst handleSendMessage = () => {\n  if (socketRef.current && inputValue !== \"\" && selectedUser) {\n    const messageData = {\n      content: inputValue,\n      to: selectedUser,\n      from: userId,\n    };\n    socketRef.current.send(JSON.stringify(messageData));\n    setInputValue(\"\");\n  }\n};\n\nconst handleManualReconnect = () => {\n  if (\n    !socketRef.current ||\n    socketRef.current.readyState === WebSocketState.CLOSED\n  ) {\n    retryCountRef.current = 0;\n    setupWebSocket();\n  }\n};\n\nreturn (\n  <>\n    <div className=\"App\">\n      <h2>WebSocket Test Client</h2>\n      <h3>Status: {connectionStatus}</h3>\n      <button onClick={handleRegister}>Register</button>\n      <div>\n        <input\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type a message...\"\n        />\n        <button onClick={handleSendMessage}>Send</button>\n        <button onClick={handleManualReconnect}>Manual Reconnect</button>\n      </div>\n      <h4>Connected Users:</h4>\n      {connectedUsers.length === 0 && <p>No connected users</p>}\n      {connectedUsers.length > 0 &&\n        connectedUsers.map((user, index) => (\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <input\n              style={{ width: \"24px\", height: \"24px\", marginRight: \"10px\" }}\n              type=\"radio\"\n              name=\"connectedUsers\"\n              value={user}\n              checked={selectedUser === user}\n              onChange={() => setSelectedUser(user)}\n            />\n            {user}\n          </div>\n        ))}\n      <h4>Messages:</h4>\n      <ul>\n        {messages.map((message, index) => (\n          <li key={index}>{message}</li>\n        ))}\n      </ul>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/xabilosada.near/widget/WebSocketDemoFork", "fact_widget_deployments_id": "023be29dde87f836f9b187ddf98357c6", "inserted_timestamp": "2023-09-27T13:40:26.673Z", "modified_timestamp": "2023-09-27T13:40:26.673Z", "__row_index": 0}