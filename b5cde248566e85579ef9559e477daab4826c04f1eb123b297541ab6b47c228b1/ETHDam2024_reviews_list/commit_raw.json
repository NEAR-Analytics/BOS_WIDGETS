{"tx_hash": "C7UymA1w8VvE2Y3B8KDCX8RXzU34eQTqdKvLR4Ru7ibj", "action_id_social": "3m6FMKQ4f71SnTa1WYCqygUr4VRtCn7oCqVWDEx2TiqH-0-widget", "block_id": 116810467, "block_timestamp": "2024-04-14T07:02:47.440Z", "signer_id": "b5cde248566e85579ef9559e477daab4826c04f1eb123b297541ab6b47c228b1", "widget_name": "ETHDam2024_reviews_list", "source_code": "// Props:\n// - recipient: string (the address of a wallet to show the reviews for, can be omited to show all reviews)\n\n// TODO use state to handle pagination\n\nconst STYLES = {\n  reviewEntry: {\n    listStyleType: \"none\",\n    margin: \"1rem 1rem\",\n  },\n  reviewEntryContainer: {\n    backgroundColor: \"#D7E1E9\",\n    borderRadius: \"10px\",\n    padding: \"1rem 2rem 1rem 2rem\",\n  },\n  reviewEntryHeader: {\n    justifyContent: \"space-between\",\n  },\n  reviewEntryTitle: {\n    fontWeight: \"bold\",\n  },\n  reviewEntryContent: {},\n  reviewEntryAddressDetails: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  reviewEntryAddress: {\n    borderRadius: \"5px\",\n    backgroundColor: \"red\",\n    paddingLeft: \"5px\",\n    paddingRight: \"5px\",\n    marginRight: \"3px\",\n    fontSize: \"12px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n};\n\nconst [viewMode, setViewMode] = useState(\"list\"); // 'list' or 'graph'\nconst [graphData, setGraphData] = useState(null);\nconst graphContainer = useState(null);\n\nconst transformDataToGraph = (attestations) => {\n  const nodes = {}; // Object to store unique nodes (addresses)\n  const edges = []; // Array to store edges (connections)\n\n  // Assuming attestations is either an array or an object:\n  if (Array.isArray(attestations)) {\n    // Handle 'attestations' as an array\n    attestations.forEach((review) => {\n      const reviewer = review.data.from; // Assuming 'from' field holds reviewer address\n      const reviewed = review.data.to; // Assuming 'to' field holds reviewed address\n\n      // Add nodes if they don't exist yet\n      if (!nodes[reviewer]) {\n        nodes[reviewer] = {\n          id: reviewer,\n          x: Math.random() * 600,\n          y: Math.random() * 400,\n        }; // Random position for now\n      }\n      if (!nodes[reviewed]) {\n        nodes[reviewed] = {\n          id: reviewed,\n          x: Math.random() * 600,\n          y: Math.random() * 400,\n        }; // Random position for now\n      }\n\n      // Add edge for the review connection\n      edges.push({ source: reviewer, target: reviewed });\n    });\n  } else if (typeof attestations === \"object\") {\n    // Handle 'attestations' as an object\n    for (const reviewId in attestations) {\n      const review = attestations[reviewId];\n      const reviewer = review.data.from; // Assuming 'from' field holds reviewer address\n      const reviewed = review.data.to; // Assuming 'to' field holds reviewed address\n\n      // Add nodes if they don't exist yet\n      if (!nodes[reviewer]) {\n        nodes[reviewer] = {\n          id: reviewer,\n          x: Math.random() * 600,\n          y: Math.random() * 400,\n        }; // Random position for now\n      }\n      if (!nodes[reviewed]) {\n        nodes[reviewed] = {\n          id: reviewed,\n          x: Math.random() * 600,\n          y: Math.random() * 400,\n        }; // Random position for now\n      }\n\n      // Add edge for the review connection\n      edges.push({ source: reviewer, target: reviewed });\n    }\n  } else {\n    // Handle an unexpected data type\n    console.error(\"Unexpected data type for attestations!\");\n\n    console.log(typeof attestations);\n  }\n\n  return { nodes: Object.values(nodes), edges }; // Convert object to array for nodes\n};\n\nconst data = {\n  nodes: [\n    { id: \"Address1\", reviewCount: 5 }, // Reviewer\n    { id: \"Address2\", reviewCount: 10 }, // Reviewed\n    { id: \"Address3\", reviewCount: 3 }, // Reviewer, connected to others\n  ],\n  links: [\n    { source: \"Address3\", target: \"Address1\" },\n    { source: \"Address3\", target: \"Address2\" },\n  ],\n};\n\n// Get user and signer\nconst user = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!user) return <></>;\n\nconst GQL_ENDPOINT = \"https://sepolia.easscan.org/graphql\";\nconst SCHEMA_ID =\n  \"0x6fe41fc5a5c39368d2aa147368558ffa101c023136e60a84ef05281823ea1d4d\";\n\n// TODO: Remove default recipient\nconst recipient =\n  props.recipient ?? \"0x58C8E31bE33DB76B60156276e4abAC096B803a0A\";\nconst attestationsResponse = fetch(GQL_ENDPOINT, {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    query:\n      \"query($where: AttestationWhereInput) { attestations(where: $where) { id, timeCreated, attester, recipient, decodedDataJson }}\",\n    variables: {\n      where: {\n        schemaId: {\n          equals: SCHEMA_ID,\n        },\n        recipient: recipient ? { equals: recipient } : undefined,\n      },\n    },\n  }),\n});\n\nif (!attestationsResponse.ok) {\n  return <div>No attestations</div>;\n}\n\nconst shortenAddress = (address) => {\n  return `0x${address.slice(2, 7)}...${address.slice(-5)}`;\n};\n\nconst ethAddressToColor = (address) => {\n  return `#${address.slice(2, 8)}`;\n};\n\nconst reactToReview = (attestationId, like) => {\n  // TODO: Create an attestation for upvoting\n};\n\nconst attestations = attestationsResponse.body.data.attestations.map((a) => {\n  const prettifiedData = JSON.parse(a.decodedDataJson).reduce((data, field) => {\n    data[field.name] = field.value.value;\n    return data;\n  }, {});\n  return {\n    ...a,\n    attesterShortAddress: shortenAddress(a.attester),\n    recipientShortAddress: shortenAddress(a.recipient),\n    decodedDataJson: undefined,\n    data: prettifiedData,\n    // TODO: Get upvotes and downvotes attestations separately\n    upvotes: 10,\n    downvotes: 4,\n  };\n});\n\nconst toggleView = () => {\n  if (viewMode === \"list\") {\n    setViewMode(\"graph\");\n  } else {\n    setViewMode(\"list\");\n  }\n};\n\nuseEffect(() => {\n  const preparedGraphData = transformDataToGraph(attestations);\n  setGraphData(preparedGraphData);\n  console.log(preparedGraphData);\n}, [attestations]);\n\nuseEffect(() => {\n  if (viewMode === \"graph\" && svgRef.current) {\n    const svg = svgRef.current;\n\n    // Data transformation logic (get nodes and edges) ...\n\n    // Simplified layout calculations\n    for (let i = 0; i < nodes.length; i++) {\n      // ... (basic force-like calculation for position)\n      const circle = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"circle\"\n      );\n      circle.setAttribute(\"cx\", nodes[i].x);\n      circle.setAttribute(\"cy\", nodes[i].y);\n      // ... set radius, style\n      svg.appendChild(circle);\n    }\n\n    // Similar logic to draw the edges (<line> elements)\n  }\n}, [viewMode, svgRef]);\n\nreturn (\n  <div>\n    <button onClick={toggleView}>Toggle View</button>\n    {viewMode === \"list\" ? (\n      <ul>\n        {attestations.map((a, i) => {\n          return (\n            <li style={STYLES[\"reviewEntry\"]}>\n              <div style={STYLES[\"reviewEntryContainer\"]}>\n                <div style={STYLES[\"reviewEntryHeader\"]}>\n                  <div style={STYLES[\"reviewEntryAddressDetails\"]}>\n                    <div\n                      title={a.attester}\n                      style={{\n                        ...STYLES[\"reviewEntryAddress\"],\n                        backgroundColor: ethAddressToColor(a.attester),\n                      }}\n                    >\n                      By: {a.attesterShortAddress}\n                    </div>\n                    <div\n                      title={a.recipient}\n                      style={{\n                        ...STYLES[\"reviewEntryAddress\"],\n                        backgroundColor: ethAddressToColor(a.recipient),\n                      }}\n                    >\n                      For: {a.recipientShortAddress}\n                    </div>\n                  </div>\n                  <div style={STYLES[\"reviewEntryTitle\"]}>{a.data.title}</div>\n                </div>\n                <div>\n                  <p style={STYLES[\"reviewEntryContent\"]}>{a.data.content}</p>\n                </div>\n\n                <button onClick={() => reactToReview(a.id, true)}>\n                  \ud83d\udc4d {a.upvotes || \"\"}\n                </button>\n                <button onClick={() => reactToReview(a.id, false)}>\n                  \ud83d\udc4e {a.downvotes || \"\"}\n                </button>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    ) : (\n      <svg ref={svgRef} width=\"600\" height=\"400\"></svg>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/b5cde248566e85579ef9559e477daab4826c04f1eb123b297541ab6b47c228b1/widget/ETHDam2024_reviews_list", "fact_widget_deployments_id": "d0dff8e3277b59139e8afbd8954c9918", "inserted_timestamp": "2024-04-14T09:16:01.381Z", "modified_timestamp": "2024-04-14T09:16:01.381Z", "__row_index": 0}