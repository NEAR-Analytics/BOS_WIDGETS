{"tx_hash": "E26SQqA2QFC78B9jbcQq3JPEtU1FGcuzrG6Jwwmb583q", "action_id_social": "kASXPPXYdcyi7YQQqFmH3pYbbKRPj5NEsaiP1Kv6GwF-0-widget", "block_id": 102529921, "block_timestamp": "2023-10-03T14:52:24.305Z", "signer_id": "cpassport.near", "widget_name": "Passport.FrequentFlyers.Main", "source_code": "const DivBackground = styled.div`\n  min-height: 100vh;\n  background-color: #FDF3DD;\n  display: flex;\n  padding-bottom:20vh;\n  width:100%;\n  align-items:center;\n  justify-content:center;\n      background-image: url(\"https://ipfs.near.social/ipfs/bafkreifhkr2j72jezjrb3dhuilmgavdlpnmcobxfdl56h6el6msj6bh6se\");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n`;\n\nState.init({\n  tokenId: {},\n  nftDetails: false,\n  hasFetched: {},\n  numberOfNfts: {},\n  allTokens: [],\n});\n\nconst phillipines = {\n  series: \"224\",\n  country: \"Phillipines\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeih7fmsubhl2inkboy3ngkpoirffgbygyn6gg6pkthd5pvikyxrum4\",\n};\n\nconst india = {\n  series: \"225\",\n  country: \"India\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeiaqolijobdczeeihfx2gcqfc4hxxy54pnrym5ujm45yndbinfuqfu\",\n};\n\nconst brazil = {\n  series: \"226\",\n  country: \"Brazil\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeib57ef23gpshvn7nv4ux7gypoevx4weblc3a2vpgb3n25u5qvxieq\",\n};\n\nconst unitedStates = {\n  series: \"227\",\n  country: \"United States\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeih5pggkqxka6wxdlcimei6ghn6opuroxkvknirmpfc3xedsub5dta\",\n};\n\nconst antiqua = {\n  series: \"228\",\n  country: \"Antiqua\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeid2t5czk6q6at2t4nbczp3tf3acxu2nw3sz4bxte7z6yg5m37sw6a\",\n};\n\nconst nigerea = {\n  series: \"229\",\n  country: \"Nigerea\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeiaalp75q2bjwzjyatxyuwmhpxcyrlvye6bbioenrfrvqbsypyz6om\",\n};\n\nconst portugal = {\n  series: \"230\",\n  country: \"Portugal\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeiewfpsywztby7id634y7iox3icdkge5ptu3spgd3efeilrst64gh4\",\n};\n\nconst canada = {\n  series: \"231\",\n  country: \"Canada\",\n  image:\n    \"https://ipfs.near.social/ipfs/bafybeibjnx2u3oluxda7snccioccxynlm7mmd2o2ieahbzg6eiv3udd44m\",\n};\n\nconst countryList = [\n  phillipines,\n  india,\n  brazil,\n  unitedStates,\n  antiqua,\n  nigerea,\n  portugal,\n  canada,\n];\n\nfunction fetchTokens(series) {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n          query MyQuery {\n            mb_views_nft_tokens(\n              where: { nft_contract_id: { _eq: \"mint.sharddog.near\" } token_id: {_regex: \"^${series}:\"}}\n            ) {\n              owner\n              token_id\n              media\n              base_uri\n              minter\n              metadata_id\n            }\n          }\n        `,\n    }),\n  }).then((res) => {\n    if (res.ok) {\n      const token = res.body.data.mb_views_nft_tokens;\n      if (token) {\n        State.update({\n          [`${series}:token`]: token,\n        });\n      }\n    }\n  });\n}\n\nconst fetchAllTokens = () => {\n  countryList.forEach((item, idx) => {\n    if (state.hasFetched[item.series] !== true) {\n      fetchTokens(item.series);\n      State.update({\n        hasFetched: { ...state.hasFetched, [item.series]: true },\n      });\n    }\n  });\n};\n\nif (Object.keys(state.hasFetched).length !== countryList.length) {\n  fetchAllTokens();\n}\n\nconst tokenSeries = countryList.map((item) => `${item.series}:token`);\nconst allState = [];\n\ntokenSeries.map((item, idx) => {\n  const totalState = state?.[item];\n  (totalState ?? [])?.map((item) => {\n    allState.push(item);\n  });\n  if (idx !== tokenSeries.length - 1) {\n    State.update({ allTokens: allState });\n  }\n});\n\nfunction findTopNFrequentOwners(data, n) {\n  const ownerFrequency = {};\n\n  // Building the frequency map\n  for (let item of data) {\n    if (item.owner in ownerFrequency) {\n      ownerFrequency[item.owner]++;\n    } else {\n      ownerFrequency[item.owner] = 1;\n    }\n  }\n\n  // Sorting owners based on their frequencies\n  const sortedOwners = Object.entries(ownerFrequency).sort(\n    (a, b) => b[1] - a[1]\n  );\n\n  // Getting the top N owners\n  const topNOwners = sortedOwners.slice(0, n).map((item) => {\n    return {\n      owner: item[0],\n      frequency: item[1],\n    };\n  });\n\n  return topNOwners;\n}\n\nconst allOwnerIds = findTopNFrequentOwners(state.allTokens).map(\n  (item) => item.owner\n);\n\nconst GridView = styled.div`\ndisplay: grid;\nwidth:100%;\nbackground-color:#ffce1f;\nalign-items:center;\nmargin-bottom:10px;\nborder-radius:10px;\npadding:10px;\ngrid-template-columns: 30% 70%;\n@media (max-width: 1024px) {\ngrid-template-columns: 40% 60%;\n  }\n  \n`;\n\nconst allHolders = [\n  \"harrydhillon.near\",\n  \"noak.near\",\n  \"blaze.near\",\n  \"james.near\",\n  \"ndcplug.near\",\n];\n\nconst findIfExisting = (owner, token) => {\n  const allitems = state.allTokens.filter(\n    (item) => item.owner === owner && item.token_id.includes(token)\n  );\n  return allitems;\n};\n\nif (state.nftDetails) {\n  return (\n    <>\n      <Widget\n        src=\"cpassport.near/widget/Passport.NFTDetails.Main\"\n        props={{\n          series: state.nftDetails,\n          onBack: () => {\n            State.update({ nftDetails: null });\n          },\n        }}\n      />\n    </>\n  );\n}\n\nconst GridDetailsNFT = styled.div`\n  grid-template-columns:repeat(8,1fr);\n   @media (max-width: 1024px) {\n   grid-template-columns:repeat(4,1fr);\n  }\n  @media (max-width: 768px) {\n   grid-template-columns:repeat(2,1fr);\n  }\n`;\n\nallOwnerIds.map((item) => {\n  let counter = 0;\n  countryList.map((_, index) => {\n    const isExsisting = findIfExisting(item, _.series);\n    if (isExsisting?.[0]) {\n      counter++;\n    }\n    if (index !== countryList.length - 1) {\n      State.update({ [item]: counter });\n    }\n  });\n});\n\nconsole.log(state);\n\nreturn (\n  <DivBackground>\n    <div style={{ width: \"100%\", padding: 10 }}>\n      <h1 style={{ textAlign: \"left\" }}>\n        Frequent\n        <br /> Flyers\n      </h1>\n      {allOwnerIds.splice(0, 5).map((item) => {\n        return (\n          <GridView>\n            <div>\n              <p style={{ fontSize: 14, marginBottom: 0 }}>\n                {item} <span style={{ marginLeft: 10 }}>{state[item]}/8</span>\n              </p>\n            </div>\n            <GridDetailsNFT style={{ display: \"grid\" }}>\n              {countryList.map((_) => {\n                const isExsisting = findIfExisting(item, _.series);\n                return (\n                  <img\n                    onClick={() => {\n                      State.update({ nftDetails: _.series });\n                    }}\n                    style={{\n                      height: 60,\n                      width: 60,\n                      opacity: isExsisting.length === 0 ? 0.6 : 1,\n                    }}\n                    src={_.image}\n                  />\n                );\n              })}\n            </GridDetailsNFT>\n          </GridView>\n        );\n      })}\n    </div>\n  </DivBackground>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/cpassport.near/widget/Passport.FrequentFlyers.Main", "fact_widget_deployments_id": "9e03173921a850a542cc41f0b8033797", "inserted_timestamp": "2023-10-03T16:44:51.171Z", "modified_timestamp": "2023-10-03T16:44:51.171Z", "__row_index": 8}