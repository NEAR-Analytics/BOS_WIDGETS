{"tx_hash": "HXLYNdFPvq2cpQsdbg1APfR4z1as5epp48ojJV52Evna", "action_id_social": "9yE288ak9oEsShZJyRL2Kv6PKmUtgPtMAnEr75GzVHMN-0-widget", "block_id": 104716800, "block_timestamp": "2023-11-01T21:51:07.249Z", "signer_id": "devgovgigs.petersalomonsen.near", "widget_name": "gigs-board.entity.workspace.view.github.kanban_board", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/data-request\" */\nconst DataRequest = {\n  /**\n   * Requests all the data from non-empty pages of the paginated API.\n   *\n   * **Notice: currently expected to work only with array responses.**\n   *\n   * @param {object} parameters\n   * \tRequest parameters including the number of page to start with,\n   * \tand an accumulated response buffer, if it exists.\n   *\n   * @param {array | null | undefined} parameters.buffer\n   * @param {number} parameters.startWith\n   *\n   * @param {(pageNumber: number) => array} requestByNumber\n   *\n   * @returns {array} The final accumulated response.\n   */\n  paginated: (requestByNumber, { buffer, startWith }) => {\n    const startPageNumber = startWith ?? 1,\n      accumulatedResponse = buffer ?? [];\n\n    const latestResponse = requestByNumber(startPageNumber) ?? [];\n\n    if (latestResponse.length === 0) {\n      return accumulatedResponse;\n    } else {\n      return DataRequest.paginated(requestByNumber, {\n        buffer: [...accumulatedResponse, ...latestResponse],\n        startWith: startPageNumber + 1,\n      });\n    }\n  },\n};\n/* END_INCLUDE: \"core/lib/data-request\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n\nconst dataToColumns = (data, columns) =>\n  Object.values(columns).reduce(\n    (registry, column) => ({\n      ...registry,\n\n      [column.id]:\n        column.labelSearchTerms.length > 0\n          ? [\n              ...(registry[column.id] ?? []),\n\n              ...data.filter((ticket) =>\n                column.labelSearchTerms.every((searchTerm) =>\n                  searchTerm.length > 0\n                    ? ticket.labels.some((label) =>\n                        label.name\n                          .toLowerCase()\n                          .includes(searchTerm.toLowerCase())\n                      )\n                    : false\n                )\n              ),\n            ]\n          : [],\n    }),\n\n    {}\n  );\n\nconst withType = (type) => (data) => ({ ...data, type });\n\nconst GithubKanbanBoard = ({\n  columns,\n  metadata,\n  title,\n  description,\n  repoURL,\n  ticketState,\n  dataTypesIncluded,\n  configurationControls,\n  isConfiguratorActive,\n  isSynced,\n  link,\n  onCancel,\n  onDelete,\n  onConfigure,\n  onSave,\n  permissions,\n}) => {\n  const ticketStateFilter =\n    ticketState === \"open\" || ticketState === \"closed\" || ticketState === \"all\"\n      ? ticketState\n      : \"all\";\n\n  State.init({\n    ticketsByColumn: {},\n  });\n\n  if (repoURL) {\n    const pullRequests = dataTypesIncluded.PullRequest\n      ? DataRequest.paginated(\n          (pageNumber) =>\n            fetch(\n              `https://api.github.com/repos/${repoURL\n                .split(\"/\")\n                .slice(-2)\n                .concat([\"pulls\"])\n                .join(\n                  \"/\"\n                )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\n            )?.body,\n\n          { startWith: 1 }\n        ).map(withType(\"PullRequest\"))\n      : [];\n\n    const issues = dataTypesIncluded.Issue\n      ? DataRequest.paginated(\n          (pageNumber) =>\n            fetch(\n              `https://api.github.com/repos/${repoURL\n                .split(\"/\")\n                .slice(-2)\n                .concat([\"issues\"])\n                .join(\n                  \"/\"\n                )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\n            )?.body,\n\n          { startWith: 1 }\n        ).map(withType(\"Issue\"))\n      : [];\n\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      ticketsByColumn: dataToColumns([...issues, ...pullRequests], columns),\n    }));\n  }\n\n  return widget(\"entity.workspace.view.layout\", {\n    metadata: { title, description },\n    configurationControls,\n    isConfiguratorActive,\n    isSynced,\n    link,\n    onCancel,\n    onConfigure,\n    onDelete,\n    onSave,\n    permissions,\n\n    children: (\n      <>\n        {Object.keys(columns).length === 0 ? (\n          <div\n            className={[\n              \"d-flex align-items-center justify-content-center\",\n              \"w-100 text-black-50 opacity-50\",\n            ].join(\" \")}\n            style={{ height: 384 }}\n          >\n            No columns were created so far.\n          </div>\n        ) : null}\n\n        {Object.values(columns).map((column) => {\n          const tickets = state.ticketsByColumn[column.id] ?? [];\n\n          return (\n            <div className=\"col-3\" key={`column-${column.id}-view`}>\n              <div className=\"card rounded-4\">\n                <div\n                  className={[\n                    \"card-body d-flex flex-column gap-3 p-2\",\n                    \"border border-2 border-secondary rounded-4\",\n                  ].join(\" \")}\n                >\n                  <span className=\"d-flex flex-column py-1\">\n                    <h6 className=\"card-title h6 d-flex align-items-center gap-2 m-0\">\n                      {column.title}\n\n                      <span className=\"badge rounded-pill bg-secondary\">\n                        {tickets.length}\n                      </span>\n                    </h6>\n\n                    <p class=\"text-secondary m-0\">{column.description}</p>\n                  </span>\n\n                  <div class=\"d-flex flex-column gap-2\">\n                    {tickets.map((ticket) =>\n                      widget(\n                        `entity.workspace.view.${metadata.ticket.type}`,\n                        { metadata: metadata.ticket, payload: ticket },\n                        ticket.id\n                      )\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </>\n    ),\n  });\n};\n\nreturn GithubKanbanBoard(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.petersalomonsen.near/widget/gigs-board.entity.workspace.view.github.kanban_board", "fact_widget_deployments_id": "ae5fb173909319c2d72a308bc42913e8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 8}