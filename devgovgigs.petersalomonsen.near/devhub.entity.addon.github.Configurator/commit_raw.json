{"tx_hash": "6n9morZaUGgqjTtzN1gCakFutTXgrrq3KvQyy4q7fwUX", "action_id_social": "3HUiXcFkFSzUNg6AHvUrHQ4SY3t1udvDvtNKhNX4377S-0-widget", "block_id": 115997781, "block_timestamp": "2024-04-02T18:09:57.619Z", "signer_id": "devgovgigs.petersalomonsen.near", "widget_name": "devhub.entity.addon.github.Configurator", "source_code": "const Struct = VM.require(\"devgovgigs.petersalomonsen.near/widget/core.lib.struct\");\n\nif (!Struct) {\n  return <p>Loading modules...</p>;\n}\nconst { useQuery } = VM.require(\n  \"devgovgigs.petersalomonsen.near/widget/core.adapter.devhub-contract\"\n);\nconst { uuid, withUUIDIndex } = VM.require(\n  \"devgovgigs.petersalomonsen.near/widget/core.lib.uuid\"\n);\n\nuuid || (uuid = () => {});\nwithUUIDIndex || (withUUIDIndex = () => {});\nuseQuery || (useQuery = () => {});\n\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst settings = {\n  maxColumnsNumber: 20,\n};\n\nconst GithubKanbanBoardTicketFeaturesSchema = {\n  id: { label: \"GitHub ID\" },\n  author: { label: \"Author\" },\n  labels: { label: \"Labels\" },\n  type: { label: \"Type\" },\n};\n\nconst GithubKanbanBoardTicketTypesSchema = {\n  issue: { label: \"Issue\" },\n  pullRequest: { label: \"Pull Request\" },\n};\n\nconst GithubKanbanBoardDefaults = {\n  columns: {},\n  dataTypesIncluded: { issue: true, pullRequest: false },\n  description: \"\",\n  repoURL: \"\",\n  ticketState: \"all\",\n  title: \"\",\n  metadata: {\n    id: uuid(),\n    type: \"github.kanban_board\",\n    ticket: {\n      type: \"github.kanban_ticket\",\n      features: { id: true, author: true, labels: true, type: true },\n    },\n  },\n};\n\nconst toMigrated = ({ metadata, id, ...restParams }) => ({\n  ...GithubKanbanBoardDefaults,\n  metadata: {\n    ...GithubKanbanBoardDefaults.metadata,\n    ...metadata,\n    id: id ?? metadata.id,\n  },\n  ...restParams,\n});\n\nfunction extractOwnerAndRepo(url) {\n  // Remove any leading or trailing slashes and split the URL by \"/\"\n  const parts = url\n    .trim()\n    .replace(/^\\/+|\\/+$/g, \"\")\n    .split(\"/\");\n\n  // Check if the URL matches the GitHub repository format\n  if (parts.length === 5 && parts[2] === \"github.com\") {\n    const owner = parts[3];\n    const repo = parts[4];\n    return { owner, repo };\n  } else {\n    return null;\n  }\n}\n\nfunction isValidGitHubRepoLink(url) {\n  // Regular expression to match GitHub repository URLs\n  const githubRepoRegex =\n    /^(?:https?:\\/\\/)?(?:www\\.)?github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/?$/;\n\n  // Check if the URL matches the GitHub repository format\n  return githubRepoRegex.test(url);\n}\n\nconst GithubViewConfigurator = ({ kanbanBoards, permissions, onSubmit }) => {\n  const data = kanbanBoards ? Object.values(kanbanBoards)?.[0] : {};\n\n  if (!data) {\n    return (\n      <div class=\"alert alert-danger\" role=\"alert\">\n        Loading...\n      </div>\n    );\n  }\n\n  const initialBoardState = Struct.typeMatch(data)\n    ? toMigrated(data)\n    : GithubKanbanBoardDefaults;\n\n  const getColumnData = useCallback((state) => {\n    if (Object.keys(state).length > 0) {\n      return state?.columns ?? {};\n    }\n    return state;\n  }, []);\n\n  const getNonColumnData = useCallback((state) => {\n    if (Object.keys(state).length > 0) {\n      delete state.columns;\n      return state;\n    }\n    return state;\n  }, []);\n\n  // to improve the state update speed, decoupled columns and other configuration metadata\n  const [parentState, setParentState] = useState(initialBoardState);\n  const [metadataState, setMetadata] = useState(\n    getNonColumnData(initialBoardState)\n  );\n  const [showPreview, setPreview] = useState(false);\n  const [columnsState, setColumnsState] = useState(\n    getColumnData(initialBoardState)\n  );\n  const [repoLabels, setRepoLabels] = useState([]);\n\n  function fetchLabelsFromRepo(url) {\n    const data = extractOwnerAndRepo(url);\n    if (data) {\n      const { repo, owner } = data;\n      useCache(\n        () =>\n          asyncFetch(\n            `https://api.github.com/repos/${owner}/${repo}/labels`\n          ).then((res) => {\n            if (Array.isArray(res.body)) {\n              const labels = [];\n              res.body.map((item) => {\n                labels.push(item.name);\n              });\n              setRepoLabels(labels);\n            }\n          }),\n        owner + repo + \"labels\",\n        { subscribe: false }\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (metadataState.repoURL && isValidGitHubRepoLink(metadataState.repoURL)) {\n      fetchLabelsFromRepo(metadataState.repoURL);\n    }\n  }, [metadataState]);\n\n  const formUpdate =\n    ({ path, via: customFieldUpdate, isColumnsUpdate, ...params }) =>\n    (fieldInput) => {\n      const transformFn = (node) => {\n        if (typeof customFieldUpdate === \"function\") {\n          return customFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        } else {\n          return Struct.defaultFieldUpdate({\n            input: fieldInput?.target?.value ?? fieldInput,\n            lastKnownValue: node,\n            params,\n          });\n        }\n      };\n      const updatedValues = Struct.deepFieldUpdate(\n        (isColumnsUpdate ? { columns: columnsState } : metadataState) ?? {},\n        path,\n        (node) => transformFn(node)\n      );\n      if (isColumnsUpdate) {\n        setColumnsState(updatedValues?.columns);\n      } else {\n        setMetadata((prevFormState) => ({\n          ...prevFormState,\n          ...updatedValues,\n        }));\n      }\n    };\n\n  const formReset = () => {\n    setColumnsState(getColumnData(initialBoardState));\n    setMetadata(getNonColumnData(initialBoardState));\n    setParentState(initialBoardState);\n  };\n\n  const columnsCreateNew = ({ lastKnownValue }) =>\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\n      ? {\n          ...(lastKnownValue ?? {}),\n          ...withUUIDIndex({\n            description: \"\",\n            labelSearchTerms: [],\n            title: \"\",\n          }),\n        }\n      : lastKnownValue;\n\n  const columnsDeleteById =\n    (id) =>\n    ({ lastKnownValue }) =>\n      Object.fromEntries(\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\n      );\n\n  const onCancel = () => {\n    formReset();\n  };\n\n  const updateParentState = () => {\n    const updatedState = { ...metadataState, columns: columnsState };\n    setParentState(updatedState);\n    return updatedState;\n  };\n\n  const onSave = () => onSubmit(updateParentState());\n\n  const formElement = (\n    <>\n      <div className=\"d-flex flex-column\">\n        <Widget\n          src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input`}\n          props={{\n            className: \"w-100\",\n            key: `${metadataState.metadata.id}-repoURL`,\n            label: \"Repository URL\",\n            onChange: formUpdate({\n              path: [\"repoURL\"],\n              isColumnsUpdate: false,\n            }),\n            placeholder: \"https://github.com/example-org/example-repo\",\n            value: metadataState.repoURL ?? \"\",\n          }}\n        />\n        <Widget\n          src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input`}\n          props={{\n            className: \"w-100\",\n            key: `${metadataState.metadata.id}-title`,\n            label: \"Title\",\n            onChange: formUpdate({ path: [\"title\"], isColumnsUpdate: false }),\n            placeholder: \"NEAR Protocol NEPs\",\n            value: metadataState.title ?? \"\",\n          }}\n        />\n        <Widget\n          src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input`}\n          props={{\n            className: \"w-100\",\n            key: `${metadataState.metadata.id}-description`,\n            label: \"Description\",\n            onChange: formUpdate({\n              path: [\"description\"],\n              isColumnsUpdate: false,\n            }),\n            placeholder: \"Latest NEAR Enhancement Proposals by status.\",\n            value: metadataState.description ?? \"\",\n          }}\n        />\n      </div>\n      <div className=\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2\">\n        <label>Select which tasks you want to display:</label>\n        <div className=\"input-group\">\n          <Widget\n            src={`devgovgigs.petersalomonsen.near/widget/devhub.components.organism.Configurator`}\n            props={{\n              heading: \"Ticket types\",\n              classNames: { root: \"col-12 col-md-4 h-auto\" },\n              externalState: metadataState.dataTypesIncluded,\n              isActive: true,\n              isEmbedded: true,\n              isUnlocked: permissions.can_configure,\n              onChange: formUpdate({\n                path: [\"dataTypesIncluded\"],\n                isColumnsUpdate: false,\n              }),\n              schema: GithubKanbanBoardTicketTypesSchema,\n              hideSubmitBtn: true,\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2\">\n        <label>Select which state of tickets you want to display:</label>\n        <div className=\"input-group\">\n          <Widget\n            src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Switch`}\n            props={{\n              currentValue: metadataState.ticketState,\n              key: \"ticketState\",\n              onChange: formUpdate({\n                path: [\"ticketState\"],\n                isColumnsUpdate: false,\n              }),\n              options: [\n                { label: \"All\", value: \"all\" },\n                { label: \"Open\", value: \"open\" },\n                { label: \"Closed\", value: \"closed\" },\n              ],\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2\">\n        <label>\n          Select which items you want to display on each card in a column:\n        </label>\n        <div className=\"input-group\">\n          <Widget\n            src={`devgovgigs.petersalomonsen.near/widget/devhub.components.organism.Configurator`}\n            props={{\n              heading: \"Card fields\",\n              classNames: { root: \"col-12 col-md-4 h-auto\" },\n              externalState: metadataState.metadata.ticket.features,\n              isActive: true,\n              isEmbedded: true,\n              isUnlocked: permissions.can_configure,\n              onChange: formUpdate({\n                path: [\"metadata\", \"ticket\", \"features\"],\n                isColumnsUpdate: false,\n              }),\n              schema: GithubKanbanBoardTicketFeaturesSchema,\n              hideSubmitBtn: true,\n            }}\n          />\n        </div>\n      </div>\n\n      <div className=\"d-flex align-items-center justify-content-between mb-2\">\n        <span className=\"d-inline-flex gap-2 m-0\">\n          <i className=\"bi bi-list-task\" />\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\n        </span>\n      </div>\n\n      <div className=\"d-flex flex-column align-items-center gap-3 w-100\">\n        {Object.values(columnsState ?? {}).map(\n          ({ id, description, labelSearchTerms, title }, index) => (\n            <AttractableDiv\n              className=\"d-flex gap-3 rounded-4 border p-3 w-100\"\n              key={`column-${id}-configurator`}\n            >\n              <div className=\"d-flex flex-column gap-1 w-100\">\n                <Widget\n                  src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input`}\n                  props={{\n                    className: \"flex-grow-1\",\n                    key: `${metadataState.metadata.id}-column-${id}-title`,\n                    label: \"Title\",\n                    onChange: formUpdate({\n                      path: [\"columns\", id, \"title\"],\n                      isColumnsUpdate: true,\n                    }),\n                    placeholder: \"\ud83d\udc40 Review\",\n                    value: title,\n                  }}\n                />\n                <div className=\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2\">\n                  <label>\n                    Search terms for all the labels MUST be presented in\n                    included tickets\n                  </label>\n                  <div className=\"input-group\">\n                    <Typeahead\n                      id=\"hashtags\"\n                      onChange={(data) => {\n                        const formUpdateFunc = formUpdate({\n                          path: [\"columns\", id, \"labelSearchTerms\"],\n                          isColumnsUpdate: true,\n                        });\n                        return formUpdateFunc(data.join(\", \"));\n                      }}\n                      selected={labelSearchTerms?.[0] ? labelSearchTerms : []}\n                      multiple\n                      labelKey=\"hashtags\"\n                      emptyLabel=\"Find your unique label\"\n                      placeholder=\"WG-, draft, review, proposal,\"\n                      options={repoLabels}\n                    />\n                  </div>\n                </div>\n                <Widget\n                  src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input`}\n                  props={{\n                    className: \"flex-grow-1\",\n                    key: `${metadataState.metadata.id}-column-${id}-description`,\n                    label: \"Description\",\n                    onChange: formUpdate({\n                      path: [\"columns\", id, \"description\"],\n                      isColumnsUpdate: true,\n                    }),\n                    placeholder:\n                      \"NEPs that need a review by Subject Matter Experts.\",\n                    value: description,\n                  }}\n                />\n              </div>\n\n              <div\n                className=\"d-flex flex-column gap-3 border-start p-3 pe-0\"\n                style={{ marginTop: -16, marginBottom: -16 }}\n              >\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={formUpdate({\n                    path: [\"columns\"],\n                    via: columnsDeleteById(id),\n                    isColumnsUpdate: true,\n                  })}\n                  title=\"Delete column\"\n                >\n                  <i className=\"bi bi-trash-fill\" />\n                </button>\n              </div>\n            </AttractableDiv>\n          )\n        )}\n\n        <div className=\"d-flex gap-3 justify-content-end w-100\">\n          <Widget\n            src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Button`}\n            props={{\n              classNames: {\n                root: \"d-flex btn btn-outline-danger shadow-none border-0\",\n              },\n              isHidden: typeof onCancel !== \"function\",\n              label: \"Cancel\",\n              onClick: onCancel,\n            }}\n          />\n          <Widget\n            src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Button`}\n            props={{\n              classNames: { root: \"btn btn-success\" },\n              disabled: form.isSynced,\n              icon: {\n                type: \"svg_icon\",\n                variant: \"floppy_drive\",\n                width: 14,\n                height: 14,\n              },\n              isHidden: typeof onSave !== \"function\",\n              label: \"Save\",\n              onClick: onSave,\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n\n  return (\n    <div\n      className=\"d-flex flex-column gap-4 w-100\"\n      style={{ maxWidth: \"100%\" }}\n    >\n      <ul className=\"nav nav-tabs\" id=\"editPreviewTabs\" role=\"tablist\">\n        <li className=\"nav-item\" role=\"presentation\">\n          <button\n            className={`nav-link ${!showPreview ? \"active\" : \"\"}`}\n            id=\"edit-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#edit\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"edit\"\n            aria-selected=\"true\"\n            onClick={() => setPreview(false)}\n          >\n            Edit\n          </button>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button\n            className={`nav-link ${showPreview ? \"active\" : \"\"}`}\n            id=\"preview-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#preview\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"preview\"\n            aria-selected=\"false\"\n            onClick={() => {\n              updateParentState();\n              setPreview(true);\n            }}\n          >\n            Preview\n          </button>\n        </li>\n      </ul>\n      {showPreview ? (\n        <div>\n          <Widget\n            src={`devgovgigs.petersalomonsen.near/widget/devhub.entity.addon.github.Viewer`}\n            props={{\n              kanbanBoards: {\n                [parentState.metadata.id]: parentState,\n              },\n            }}\n          />\n        </div>\n      ) : (\n        <div className={\"d-flex flex-column gap-4 w-100\"}>\n          <div className={\"d-flex flex-column gap-2 w-100\"}>\n            <div className=\"d-flex align-items-center justify-content-between gap-3 w-100\">\n              <h5 className=\"h5 d-inline-flex gap-2 m-0\">\n                <i className=\"bi bi-gear-wide-connected\" />\n                <span>GitHub board configuration</span>\n              </h5>\n            </div>\n            <div>\n              This configuration enables integration of your GitHub repository\n              as a Kanban board, facilitating issue and pull request tracking.\n              You can create distinct columns to organize various items, each\n              with unique labels.\n            </div>\n          </div>\n          {Object.keys(parentState).length > 0 && (\n            <div>\n              {formElement}\n              <Widget\n                src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Button`}\n                props={{\n                  classNames: {\n                    root: \"btn-sm btn-outline-secondary\",\n                  },\n                  label: \"New column\",\n                  disabled:\n                    parentState.columns &&\n                    Object.keys(parentState.columns).length >=\n                      settings.maxColumnsNumber,\n                  icon: { type: \"bootstrap_icon\", variant: \"bi-plus-lg\" },\n                  onClick: formUpdate({\n                    path: [\"columns\"],\n                    via: columnsCreateNew,\n                    isColumnsUpdate: true,\n                  }),\n                }}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nreturn GithubViewConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.petersalomonsen.near/widget/devhub.entity.addon.github.Configurator", "fact_widget_deployments_id": "aa64882b8af4407323f78966df3444d9", "inserted_timestamp": "2024-04-02T19:31:01.311Z", "modified_timestamp": "2024-04-02T19:31:01.311Z", "__row_index": 51}