{"tx_hash": "fjEcXUaYRLVUxSFhs2aysNqF3DToCFcx8SkoYrxMbJN", "action_id_social": "7Rnt8v3ooWf4rdczYK81UmEcJ2EhfTzEsVDe19JabxiQ-0-widget", "block_id": 104717173, "block_timestamp": "2023-11-01T21:57:54.074Z", "signer_id": "devgovgigs.petersalomonsen.near", "widget_name": "gigs-board.entity.team.TeamInfo", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/gui/attractable\" */\nconst AttractableDiv = styled.div`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableLink = styled.a`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n\nconst AttractableImage = styled.img`\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n  transition: box-shadow 0.6s;\n\n  &:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n  }\n`;\n/* END_INCLUDE: \"core/lib/gui/attractable\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  create_community: ({ inputs }) =>\n    Near.call(devHubAccountId, \"create_community\", { inputs }),\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_account_community_permissions: ({ account_id, community_handle }) =>\n    Near.view(devHubAccountId, \"get_account_community_permissions\", {\n      account_id,\n      community_handle,\n    }) ?? null,\n\n  update_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"update_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  update_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"update_community_board\", { handle, board }),\n\n  update_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"update_community_github\", { handle, github }),\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities_metadata: () =>\n    Near.view(devHubAccountId, \"get_all_communities_metadata\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  useQuery: (name, params) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst Viewer = {\n  communityPermissions: ({ handle }) =>\n    DevHub.get_account_community_permissions({\n      account_id: context.accountId,\n      community_handle: handle,\n    }) ?? {\n      can_configure: false,\n      can_delete: false,\n    },\n\n  role: {\n    isDevHubModerator:\n      DevHub.has_moderator({ account_id: context.accountId }) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst metadata = props.members_list[props.member];\nconst isTeam = props.member.startsWith(\"team:\");\nconst memberBadge = isTeam ? \"bi-people-fill\" : \"person-fill\";\nconst header = isTeam ? (\n  <div class=\"d-flex\">\n    <i class=\"bi bi-people-fill me-1\"></i>\n    {props.member}\n  </div>\n) : (\n  <Widget\n    src={`neardevgov.near/widget/ProfileLine`}\n    props={{ accountId: props.member }}\n  />\n);\n\nconst SlimButton = styled.button`\n  height: 24px;\n  line-height: 12px;\n`;\n\nconst TeamDataDefaults = {\n  member: null,\n  description: null,\n  labels: Object.entries(metadata.permissions)\n    .map((entry) => entry[0])\n    .join(\",\"),\n};\n\nfunction getInitialPermissionsString() {\n  const initialPermissionsString = {};\n  for (const [label, per] of Object.entries(metadata.permissions)) {\n    initialPermissionsString[label] = per.join(\",\");\n  }\n  return initialPermissionsString;\n}\n\nState.init({\n  addMember: false,\n  labelError: \"\",\n  permissionError: \"\",\n  memberError: \"\",\n  editLabels: false,\n  teamData: isTeam ? TeamDataDefaults : null,\n  permissions: getInitialPermissionsString(),\n  newLabel: \"\",\n  newPermissions: \"\",\n  isActive: true,\n});\n\nconst permissionDesc = {\n  \"edit-post\": \"Can edit posts with these labels\",\n  \"use-labels\": \"Can assign and unassign these labels\",\n};\n\nconst permissionExplainer = (permission) => {\n  if (permission.startsWith(\"starts-with:\")) {\n    let s = permission.substring(\"starts-with:\".length);\n    if (s == \"\") {\n      return \"Any label\";\n    } else {\n      return `Labels that start with \"${s}\"`;\n    }\n  } else {\n    return permission;\n  }\n};\n\nconst permissionsFilter = (permissionType) => {\n  let res = [];\n  for (const [pattern, permissions] of Object.entries(metadata.permissions)) {\n    if (permissions.includes(permissionType)) {\n      res.push(pattern);\n    }\n  }\n  return res;\n};\n\nconst permissionsRenderer = (permissionType) => {\n  let permissions = permissionsFilter(permissionType);\n  if (permissions.length > 0) {\n    return (\n      <div class=\"d-flex justify-content-between\">\n        <p class=\"card-text\" key={`${permissionType}-permissions`}>\n          {permissionDesc[permissionType]}:\n          {permissions.map((permission) => (\n            <span class=\"badge text-bg-primary\" key={permission}>\n              {permissionExplainer(permission)}\n            </span>\n          ))}\n        </p>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nfunction removeTeam(team) {\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"remove_member\",\n      args: { member: team },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction removeMemberFromTeam(memberId) {\n  let isMemberInMultipleTeams =\n    Object.values(props.root_members).filter((meta) =>\n      meta.children.includes(memberId)\n    ).length > 1;\n  let membersMetaData = props.members_list[memberId];\n  if (isMemberInMultipleTeams) {\n    // edit_member\n    let newParents =\n      membersMetaData?.parents?.filter((item) => item !== props.teamId) || [];\n    Near.call([\n      {\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"edit_member\",\n        args: {\n          member: memberId,\n          metadata: {\n            ...membersMetaData,\n            parents: [...newParents],\n          },\n        },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      },\n    ]);\n  } else {\n    // remove_member\n    Near.call([\n      {\n        contractName: nearDevGovGigsContractAccountId,\n        methodName: \"remove_member\",\n        args: { member: memberId },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      },\n    ]);\n  }\n}\n\nfunction addMemberToTeam(memberData) {\n  let memberId = memberData.member;\n  if (metadata.children.includes(memberId))\n    return State.update({\n      memberError: \"Member already exists in team\",\n    });\n  let memberExists = !!props.members_list[memberId];\n  let membersMetaData = memberExists\n    ? props.members_list[memberId]\n    : { parents: [] };\n  let args = {\n    member: memberId,\n    metadata: {\n      children: [],\n      description: \"\",\n      member_metadata_version: \"V0\",\n      parents: [...membersMetaData.parents, props.teamId],\n      permissions: {},\n    },\n  };\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: memberExists ? \"edit_member\" : \"add_member\",\n      args,\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction editLabelsFromTeam(label, permissions) {\n  const possibleLabels = Object.keys(props.rules_list);\n  const team = props.member;\n  // Labels need to exist in the contract in order to add them to a team.\n  let permissionsArray = permissions.split(\",\");\n  if (!possibleLabels.includes(label)) {\n    State.update({\n      labelError:\n        \"Error label does not exist yet, first add it in the restricted labels section or use starts-with:<label>\",\n    });\n  }\n  // Only 'edit-post' and 'use-labels' are valid\n  if (!checkPermissions(permissionsArray)) {\n    State.update({\n      permissionError:\n        \"Permissions can only have value 'edit-post' and/or 'use-labels' comma-seperated.\",\n    });\n    return;\n  }\n  let newPermissions = metadata.permissions;\n  newPermissions[label] = permissionsArray;\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"edit_member\",\n      args: {\n        member: team,\n        metadata: {\n          ...metadata,\n          permissions: newPermissions,\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction removeLabelFromTeam(rule) {\n  // Copy\n  let permissions = { ...metadata.permissions };\n  delete permissions[rule];\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"edit_member\",\n      args: {\n        member: props.teamId,\n        metadata: {\n          ...metadata,\n          permissions: permissions,\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction checkPermissions(arr) {\n  // Check if both are or either one of the values is present exactly once\n  const uniqueValues = new Set();\n  for (const value of arr) {\n    if (value !== \"edit-post\" && value !== \"use-labels\") {\n      return false; // Value is not allowed\n    }\n    if (uniqueValues.has(value)) {\n      return false;\n    }\n    uniqueValues.add(value);\n  }\n  return uniqueValues.size === 2 || uniqueValues.size === 1;\n}\n\nconst editLabelsDiv = () => {\n  const warning = state.permissionError && (\n    <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n      {state.permissionError}\n      <button\n        type=\"button\"\n        class=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={() => State.update({ permissionError: \"\" })}\n      ></button>\n    </div>\n  );\n\n  return (\n    <div>\n      {warning}\n      {Object.entries(metadata.permissions).length\n        ? Object.entries(metadata.permissions).map((entry) => {\n            return editLabelDiv(entry[0]);\n          })\n        : editLabelDiv(\"\")}\n      {/* {editLabelDiv(\"\")} */}\n    </div>\n  );\n};\n\nconst editLabelDiv = (label) => {\n  const labelNameInput = widget(\"components.molecule.text-input\", {\n    inputProps: { type: \"text\", disabled: !!label },\n    placeholder: \"example-label\",\n    label: \"name\",\n    value: !!label ? label : state.newLabel,\n    onChange: (data) => {\n      let text = data.target.value;\n      State.update({ newLabel: text });\n    },\n  });\n  const labelPermissionsInput = widget(\"components.molecule.text-input\", {\n    inputProps: { type: \"text\" },\n    placeholder: \"edit-post,use-labels\",\n    label: \"permissions\",\n    value: !!label ? state.permissions[label] : state.newPermissions,\n    onChange: (data) => {\n      let text = data.target.value;\n      if (!!label) {\n        state.permissions[label] = text;\n        State.update({\n          permissions: state.permissions,\n        });\n      } else {\n        State.update({\n          newPermissions: text,\n        });\n      }\n    },\n  });\n\n  const deleteLabelBtn = (\n    <button\n      class=\"btn btn-light mb-2 align-self-end h-25\"\n      onClick={() => removeLabelFromTeam(label)}\n    >\n      Remove\n    </button>\n  );\n\n  return (\n    <>\n      <div class=\"d-flex\">\n        {labelNameInput}\n        {labelPermissionsInput}\n        {widget(\"components.layout.Controls\", {\n          title: label ? \"Edit\" : \"Add\",\n          icon: label ? \"bi-pencil-square\" : \"\",\n          className: \"d-flex align-items-end mb-2\",\n          onClick: () => {\n            if (label) {\n              // Edit permissions of label on team\n              editLabelsFromTeam(label, state.permissions[label]);\n            } else {\n              // Add a label with permissions to the team\n              editLabelsFromTeam(state.newLabel, state.newPermissions);\n            }\n          },\n        })}\n        {label ? deleteLabelBtn : null}\n      </div>\n    </>\n  );\n};\n\nreturn (\n  <>\n    <AttractableDiv className=\"card my-2\">\n      <div className=\"card-body\">\n        <div class=\"d-flex justify-content-between\">\n          <small class=\"text-muted\">{header}</small>\n          <div class=\"d-flex\">\n            {props.teamLevel &&\n              props.editMode &&\n              widget(\"components.layout.Controls\", {\n                title: \"Add member\",\n                onClick: () => {\n                  State.update({\n                    addMember: !state.addMember,\n                    editLabels: false,\n                  });\n                },\n              })}\n            {!props.teamLevel && props.editMode && (\n              <button\n                class=\"btn btn-sm btn-light\"\n                onClick={() => removeMemberFromTeam(props.member)}\n              >\n                Remove member\n              </button>\n            )}\n            {props.teamLevel &&\n              props.editMode &&\n              widget(\"components.layout.Controls\", {\n                title: !state.editLabels\n                  ? \"Edit labels\"\n                  : \"Stop editing labels\",\n                icon: !state.editLabels\n                  ? \"bi-pencil-square\"\n                  : \"bi-stop-circle-fill\",\n                onClick: () => {\n                  State.update({\n                    editLabels: !state.editLabels,\n                    addMember: false,\n                  });\n                },\n              })}\n            {props.teamLevel &&\n            props.editMode &&\n            props.member !== \"team:moderators\" ? (\n              <button\n                class=\"btn btn-light\"\n                onClick={() => removeTeam(props.member)}\n              >\n                Delete team\n              </button>\n            ) : null}\n          </div>\n        </div>\n      </div>\n      {props.teamLevel && (\n        <div className=\"card-body\">\n          {\n            <p class=\"card-text\" key=\"description\">\n              {widget(\"components.molecule.markdown-viewer\", {\n                text: metadata.description,\n              })}\n            </p>\n          }\n          {state.editLabels && state.memberError && props.editMode ? (\n            <div\n              class=\"alert alert-warning alert-dismissible fade show\"\n              role=\"alert\"\n            >\n              {state.memberError}\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"alert\"\n                aria-label=\"Close\"\n                onClick={() => State.update({ memberError: \"\" })}\n              ></button>\n            </div>\n          ) : null}\n          {state.addMember &&\n            props.editMode &&\n            widget(\"components.organism.configurator\", {\n              classNames: {\n                submit: \"btn-primary\",\n                submitAdornment: \"bi-check-circle-fill\",\n              },\n              heading: \"Adding member\",\n              isActive: state.isActive,\n              isUnlocked: props.editMode,\n              onSubmit: addMemberToTeam,\n              submitLabel: \"Accept\",\n              data: state.teamData,\n              schema: {\n                member: {\n                  inputProps: {\n                    min: 2,\n                    max: 60,\n                    placeholder: \"member.near\",\n                    required: true,\n                  },\n                  label: \"Members name\",\n                  order: 2,\n                },\n              },\n            })}\n          {state.editLabels && state.labelError && props.editMode ? (\n            <div\n              class=\"alert alert-warning alert-dismissible fade show\"\n              role=\"alert\"\n            >\n              {state.labelError}\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"alert\"\n                aria-label=\"Close\"\n                onClick={() => State.update({ labelError: \"\" })}\n              ></button>\n            </div>\n          ) : null}\n          {state.editLabels &&\n            props.teamLevel &&\n            props.editMode &&\n            editLabelsDiv()}\n          {permissionsRenderer(\"edit-post\")}\n          {permissionsRenderer(\"use-labels\")}\n          {metadata.children && (\n            <div class=\"vstack\">\n              {metadata.children.map((child) =>\n                widget(\n                  \"entity.team.TeamInfo\",\n                  {\n                    member: child,\n                    members_list: props.members_list,\n                    teamLevel: false,\n                    root_members: props.root_members,\n                    teamId: props.teamId,\n                    editMode: props.editMode,\n                  },\n                  child\n                )\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </AttractableDiv>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.petersalomonsen.near/widget/gigs-board.entity.team.TeamInfo", "fact_widget_deployments_id": "b6a3d5dfab6e661e615378c463772019", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}