{"tx_hash": "CPxutAGkrfTfSq2x7pwaKCspAsgYhxq7BeJ68ZFwAcvt", "action_id_social": "5Nx8cY47FBceGGcsMxBGVsNFuuGR6fBqRwjLdgWbhjXx-0-widget", "block_id": 113339955, "block_timestamp": "2024-02-22T07:23:41.880Z", "signer_id": "devgovgigs.petersalomonsen.near", "widget_name": "core.lib.data-request", "source_code": "const DataRequest = {\n  /**\n   * Requests all the data from non-empty pages of the paginated API.\n   *\n   * **Notice: currently expected to work only with array responses.**\n   *\n   * @param {object} parameters\n   * \tRequest parameters including the number of page to start with,\n   * \tand an accumulated response buffer, if it exists.\n   *\n   * @param {array | null | undefined} parameters.buffer\n   * @param {number} parameters.startWith\n   *\n   * @param {(pageNumber: number) => array} requestByNumber\n   *\n   * @returns {array} The final accumulated response.\n   */\n  paginated: (requestByNumber, { buffer, startWith }) => {\n    const startPageNumber = startWith ?? 1,\n      accumulatedResponse = buffer ?? [];\n\n    const latestResponse = requestByNumber(startPageNumber) ?? [];\n\n    if (latestResponse.length === 0) {\n      return accumulatedResponse;\n    } else {\n      return DataRequest.paginated(requestByNumber, {\n        buffer: [...accumulatedResponse, ...latestResponse],\n        startWith: startPageNumber + 1,\n      });\n    }\n  },\n};\n\nreturn { DataRequest };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.petersalomonsen.near/widget/core.lib.data-request", "fact_widget_deployments_id": "65647d11b85039e83ef8b97549176516", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 14}