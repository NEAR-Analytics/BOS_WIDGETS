{"tx_hash": "36NcTkWiZyGLXWJ2r9coToVAbFaFnHKJiiCrFqRACjFr", "action_id_social": "13CcHY8n3sUrYAAKr1WSi8E9tfkYadwJ3BDj77oSR35g-0-widget", "block_id": 114830277, "block_timestamp": "2024-03-16T14:31:14.313Z", "signer_id": "devgovgigs.petersalomonsen.near", "widget_name": "devhub.components.molecule.SimpleMDE", "source_code": "/**\n * iframe embedding a SimpleMDE component\n * https://github.com/sparksuite/simplemde-markdown-editor\n */\n\nfunction defaultOnChange(content) {\n  console.log(content);\n}\n\nconst data = props.data;\nconst onChange = props.onChange ?? defaultOnChange;\nconst height = props.height ?? \"390\";\nconst className = props.className ?? \"w-100\";\nconst embeddCSS = props.embeddCSS;\n\nState.init({\n  iframeHeight: height,\n  message: { handler: \"init\", content: props.data },\n});\n\n// SIMPLEMDE CONFIG //\nconst fontFamily = props.fontFamily ?? \"sans-serif\";\nconst alignToolItems = props.alignToolItems ?? \"right\";\nconst autoFocus = props.autoFocus ?? true;\nconst renderingConfig = JSON.stringify(\n  props.renderingConfig ?? {\n    singleLineBreaks: false,\n    codeSyntaxHighlighting: true,\n  }\n);\nconst placeholder = props.placeholder ?? \"\";\nconst statusConfig = JSON.stringify(\n  props.statusConfig ?? [\"lines\", \"words\", \"cursor\"]\n);\nconst spellChecker = props.spellChecker ?? true;\nconst tabSize = props.tabSize ?? 4;\n\n// Add or remove toolbar items\n// For adding unique items, configure the switch-case within the iframe\nconst toolbarConfig = JSON.stringify(\n  props.toolbar ?? [\n    \"heading\",\n    \"bold\",\n    \"italic\",\n    \"|\", // adding | creates a divider in the toolbar\n    \"quote\",\n    \"code\",\n    \"link\",\n    \"image\",\n    \"mention\",\n    \"reference\",\n    \"unordered-list\",\n    \"ordered-list\",\n    \"checklist\",\n    \"table\",\n    \"horizontal-rule\",\n    \"guide\",\n    \"preview\",\n  ]\n);\n\nconst code = `\n  <style>\n  body {  \n      margin: auto;\n      font-family: ${fontFamily};\n      overflow: visible;\n      font-size:14px;\n  }\n\n  @media screen and (max-width: 768px) {\n    body {\n      font-size: 12px;\n    }\n  }\n  \n  .editor-toolbar {\n      text-align: ${alignToolItems};\n  }\n\n  ${embeddCSS}\n\n  </style>\n  <script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\">\n  \n  <div id=\"react-root\"></div>\n  \n  <script>\n  let codeMirrorInstance;\n  let isEditorInitialized = false;\n  \n  function MarkdownEditor(props) {\n      const [value, setValue] = React.useState(props.initialText || \"\");\n  \n      React.useEffect(() => {\n          const generateToolbarItems = () => {\n              return ${toolbarConfig}.map((item) => {\n                  switch(item) {\n                      // CONFIGURE CUSTOM IMPLEMENTATIONS HERE\n                      case \"checklist\": {\n                          function handleChecklist(editor) {\n                              const cursorPos = editor.codemirror.getCursor();\n                              const lineText = editor.codemirror.getLine(cursorPos.line);\n                              if (lineText.trim() === \"\") {\n                                  editor.codemirror.replaceRange(\" - [ ] \", cursorPos);\n                              } else {\n                                  editor.codemirror.replaceRange(\"\\\\n - [ ] \", cursorPos);\n                              }\n                          }\n                          return {\n                              name: \"checklist\",\n                              action: handleChecklist,\n                              className: \"fa fa-check-square\",\n                              title: \"Insert Checklist\"\n                          }\n                      }\n                      case \"mention\": {\n                          function handleMention(editor) {\n                              const cursorPos = editor.codemirror.getCursor();\n                              editor.codemirror.replaceRange(\"@\", cursorPos);\n                          }\n                          return {\n                              name: \"mention\",\n                              action: handleMention,\n                              className: \"fa fa-at\",\n                              title: \"Insert Mention\"\n                          }\n                      }\n                      case \"reference\": {\n                          function handleReference(editor) {\n                              const cursorPos = editor.codemirror.getCursor();\n                              editor.codemirror.replaceRange(\"bos://\", cursorPos);\n                          }\n                          return {\n                              name: \"reference\",\n                              action: handleReference,\n                              className: \"fa fa-external-link-square\",\n                              title: \"Reference Thing\"\n                          }\n                      }\n                      case \"image\": {\n                          // TODO: convert to upload to IPFS\n                          return {\n                              name: \"image\",\n                              action: SimpleMDE.drawImage,\n                              className: \"fa fa-picture-o\",\n                              title: \"Insert Image\"\n                          }\n                      }\n                      default: {\n                          return item;\n                      }\n                  }\n              });\n          };\n  \n          function renderPreview(plainText, preview) {\n              // TODO: can we place custom preview element? Perhaps install VM into this iframe?\n              setTimeout(function(){\n                      preview.innerHTML = \"<p>hello</p>\";\n                  }, 250);\n              return \"loading\";\n          }\n          \n          // Initializes SimpleMDE element and attaches to text-area\n          const simplemde = new SimpleMDE({\n              element: document.getElementById(\"markdown-input\"),\n              forceSync: true,\n              autofocus: ${autoFocus},\n              renderingConfig: ${renderingConfig},\n              placeholder: \\`${placeholder}\\`,\n              status: ${statusConfig},\n              spellChecker: ${spellChecker},\n              tabSize: ${tabSize},\n              toolbar: generateToolbarItems(),\n              initialValue: value,\n              previewRender: renderPreview,\n              insertTexts: {\n                image: [\"![](https://\", \")\"],\n                link: [\"[\", \"](https://)\"],\n              },\n          });\n  \n          codeMirrorInstance = simplemde.codemirror;\n  \n          /**\n           * Sends message to Widget to update content\n           */\n          const updateContent = () => {\n              const content = simplemde.value();\n              window.parent.postMessage({ handler: \"update\", content }, \"*\");\n          };\n  \n          /**\n           * Sends message to Widget to update iframe height\n           */\n          const updateIframeHeight = () => {\n              const iframeHeight = document.body.scrollHeight;\n              window.parent.postMessage({ handler: \"resize\", height: iframeHeight }, \"*\");\n          };\n  \n          // On Change\n          simplemde.codemirror.on('change', () => {\n              updateContent();\n              updateIframeHeight();\n          });\n      }, []);\n  \n      return React.createElement('textarea', { id: 'markdown-input', value: value, onChange: setValue });\n  }\n  \n  const domContainer = document.querySelector('#react-root');\n  const root = ReactDOM.createRoot(domContainer);\n  \n  window.addEventListener(\"message\", (event) => {\n    if (!isEditorInitialized && event.data !== \"\") {\n      root.render(React.createElement(MarkdownEditor, {\n          initialText: event.data.content }));\n          isEditorInitialized = true;\n    } else {\n      if (event.data.handler === 'autocompleteSelected') {\n          codeMirrorInstance.getDoc().setValue(event.data.content);\n        }\n    }\n  });\n  </script>\n  `;\nreturn (\n  <iframe\n    className={className}\n    style={{\n      height: `${state.iframeHeight}px`,\n    }}\n    srcDoc={code}\n    message={data ?? { content: \"\" }}\n    onMessage={(e) => {\n      switch (e.handler) {\n        case \"update\": {\n          onChange(e.content);\n        }\n        case \"resize\": {\n          const offset = 0;\n          if (statusConfig.length) {\n            offset = 10;\n          }\n          State.update({ iframeHeight: e.height + offset });\n        }\n      }\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.SimpleMDE", "fact_widget_deployments_id": "e5536f67d6ffa3d7490c009bd0b2f393", "inserted_timestamp": "2024-03-16T15:26:45.439Z", "modified_timestamp": "2024-03-16T16:27:08.024Z", "__row_index": 47}