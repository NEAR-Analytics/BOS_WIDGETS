{"tx_hash": "36NcTkWiZyGLXWJ2r9coToVAbFaFnHKJiiCrFqRACjFr", "action_id_social": "13CcHY8n3sUrYAAKr1WSi8E9tfkYadwJ3BDj77oSR35g-0-widget", "block_id": 114830277, "block_timestamp": "2024-03-16T14:31:14.313Z", "signer_id": "devgovgigs.petersalomonsen.near", "widget_name": "devhub.entity.proposal.Editor", "source_code": "const { href } = VM.require(\"devgovgigs.petersalomonsen.near/widget/core.lib.url\");\nconst { getDepositAmountForWriteAccess } = VM.require(\n  \"devgovgigs.petersalomonsen.near/widget/core.lib.common\"\n);\nconst draftKey = \"PROPOSAL_EDIT\";\ngetDepositAmountForWriteAccess || (getDepositAmountForWriteAccess = () => {});\nhref || (href = () => {});\n\nconst { id, timestamp } = props;\n\nconst isEditPage = typeof id === \"string\";\nconst author = context.accountId;\nconst FundingDocs =\n  \"https://docs.google.com/document/d/1kR1YbaQE4mmHcf-BHo7NwO7vmGx4EciHK-QjelCufI8/edit?usp=sharing\";\n\nif (!author) {\n  return (\n    <Widget src={\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.LoginScreen\"} />\n  );\n}\nlet editProposalData = null;\nlet draftProposalData = null;\n\nif (isEditPage) {\n  editProposalData = Near.view(\"devhub.near\", \"get_proposal\", {\n    proposal_id: parseInt(id),\n  });\n}\n\nconst Container = styled.div`\n  .text-sm {\n    font-size: 13px;\n  }\n\n  @media screen and (max-width: 768px) {\n    .h6 {\n      font-size: 14px !important;\n    }\n\n    .h5 {\n      font-size: 16px !important;\n    }\n\n    .text-sm {\n      font-size: 11px;\n    }\n\n    .gap-6 {\n      gap: 0.5rem !important;\n    }\n\n    .border-sm-bottom {\n      border-bottom: var(--bs-card-border-width) solid\n        var(--bs-card-border-color);\n    }\n  }\n\n  .text-xs {\n    font-size: 10px;\n  }\n\n  .flex-2 {\n    flex: 2;\n  }\n\n  .flex-1 {\n    flex: 1;\n  }\n  .bg-grey {\n    background-color: #f4f4f4;\n  }\n\n  .border-bottom {\n    border-bottom: 1px solid grey;\n  }\n\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .proposal-card {\n    &:hover {\n      background-color: #f4f4f4;\n    }\n  }\n\n  .border-1 {\n    border: 1px solid #e2e6ec;\n  }\n  .green-btn {\n    background-color: #04a46e !important;\n    border: none;\n    color: white;\n    &:active {\n      color: white;\n    }\n  }\n\n  .black-btn {\n    background-color: #000 !important;\n    border: none;\n    color: white;\n    &:active {\n      color: white;\n    }\n  }\n\n  .dropdown-toggle:after {\n    position: absolute;\n    top: 46%;\n    right: 5%;\n  }\n\n  .drop-btn {\n    max-width: none !important;\n  }\n\n  .dropdown-menu {\n    width: 100%;\n  }\n\n  .input-icon {\n    display: flex;\n    height: 100%;\n    align-items: center;\n    border-right: 1px solid #dee2e6;\n    padding-right: 10px;\n  }\n\n  /* Tooltip container */\n  .custom-tooltip {\n    position: relative;\n    display: inline-block;\n  }\n\n  /* Tooltip text */\n  .custom-tooltip .tooltiptext {\n    visibility: hidden;\n    width: 250px;\n    background-color: #fff;\n    color: #6c757d;\n    text-align: center;\n    padding: 10px;\n    border-radius: 6px;\n    font-size: 12px;\n    border: 0.2px solid #6c757d;\n\n    /* Position the tooltip text */\n    position: absolute;\n    z-index: 1;\n    bottom: 125%;\n    left: -30px;\n\n    /* Fade in tooltip */\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n\n  /* Tooltip arrow */\n  .custom-tooltip .tooltiptext::after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 15%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: #555 transparent transparent transparent;\n  }\n\n  /* Show the tooltip text when you mouse over the tooltip container */\n  .custom-tooltip:hover .tooltiptext {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  .form-check-input:checked {\n    background-color: #04a46e !important;\n    border-color: #04a46e !important;\n  }\n\n  .gap-6 {\n    gap: 2.5rem;\n  }\n`;\n\nconst Heading = styled.div`\n  font-size: 24px;\n  font-weight: 700;\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nconst tokensOptions = [\n  { label: \"NEAR\", value: \"NEAR\" },\n  { label: \"USDT\", value: \"USDT\" },\n  {\n    label: \"USDC\",\n    value: \"USDC\",\n  },\n  {\n    label: \"Other\",\n    value: \"OTHER\",\n  },\n];\n\nconst devdaoAccount = \"neardevdao.near\";\n\nconst [category, setCategory] = useState(null);\nconst [title, setTitle] = useState(null);\nconst [description, setDescription] = useState(null);\nconst [summary, setSummary] = useState(null);\nconst [consent, setConsent] = useState({ toc: false, coc: false });\nconst [linkedProposals, setLinkedProposals] = useState([]);\nconst [receiverAccount, setReceiverAccount] = useState(context.accountId);\nconst [requestedSponsor, setRequestedSponsor] = useState(devdaoAccount);\nconst [requestedSponsorshipAmount, setRequestedSponsorshipAmount] =\n  useState(null);\nconst [requestedSponsorshipToken, setRequestedSponsorshipToken] = useState(\n  tokensOptions[2]\n);\nconst [supervisor, setSupervisor] = useState(null);\nconst [allowDraft, setAllowDraft] = useState(true);\n\nconst [proposalsOptions, setProposalsOptions] = useState([]);\nconst proposalsData = Near.view(\"devhub.near\", \"get_proposals\");\nconst [loading, setLoading] = useState(true);\nconst [disabledSubmitBtn, setDisabledSubmitBtn] = useState(false);\nconst [isDraftBtnOpen, setDraftBtnOpen] = useState(false);\nconst [selectedStatus, setSelectedStatus] = useState(\"draft\");\nconst [isReviewModalOpen, setReviewModal] = useState(false);\nconst [amountError, setAmountError] = useState(null);\nconst [isCancelModalOpen, setCancelModal] = useState(false);\n\nif (allowDraft) {\n  draftProposalData = Storage.privateGet(draftKey);\n}\n\nconst memoizedDraftData = useMemo(\n  () => ({\n    id: editProposalData.id ?? null,\n    snapshot: {\n      name: title,\n      description: description,\n      category: category,\n      summary: summary,\n      requested_sponsorship_usd_amount: requestedSponsorshipAmount,\n      requested_sponsorship_paid_in_currency: requestedSponsorshipToken.value,\n      receiver_account: receiverAccount,\n      supervisor: supervisor,\n      requested_sponsor: requestedSponsor,\n    },\n  }),\n  [\n    title,\n    summary,\n    description,\n    category,\n    requestedSponsorshipAmount,\n    requestedSponsorshipToken,\n    receiverAccount,\n    supervisor,\n    requestedSponsor,\n  ]\n);\n\nuseEffect(() => {\n  if (allowDraft) {\n    let data = editProposalData || JSON.parse(draftProposalData);\n    let snapshot = data.snapshot;\n    if (data) {\n      if (timestamp) {\n        snapshot =\n          data.snapshot_history.find((item) => item.timestamp === timestamp) ??\n          data.snapshot;\n      }\n      if (\n        draftProposalData &&\n        editProposalData &&\n        editProposalData.id === JSON.parse(draftProposalData).id\n      ) {\n        snapshot = {\n          ...editProposalData.snapshot,\n          ...JSON.parse(draftProposalData).snapshot,\n        };\n      }\n      setCategory(snapshot.category);\n      setTitle(snapshot.name);\n      setSummary(snapshot.summary);\n      setDescription(snapshot.description);\n      setReceiverAccount(snapshot.receiver_account);\n      setRequestedSponsor(snapshot.requested_sponsor);\n      setRequestedSponsorshipAmount(snapshot.requested_sponsorship_usd_amount);\n      setSupervisor(snapshot.supervisor);\n\n      const token = tokensOptions.find(\n        (item) => item.value === snapshot.requested_sponsorship_paid_in_currency\n      );\n      setRequestedSponsorshipToken(token ?? tokensOptions[2]);\n    }\n    setLoading(false);\n  }\n}, [editProposalData, draftProposalData, allowDraft]);\n\nuseEffect(() => {\n  if (draftProposalData) {\n    setAllowDraft(false);\n  }\n}, [draftProposalData]);\n\nuseEffect(() => {\n  setDisabledSubmitBtn(\n    amountError ||\n      !title ||\n      !description ||\n      !summary ||\n      !category ||\n      !requestedSponsorshipAmount ||\n      !receiverAccount ||\n      !requestedSponsor ||\n      !consent.toc ||\n      !consent.coc\n  );\n  const handler = setTimeout(() => {\n    Storage.privateSet(draftKey, JSON.stringify(memoizedDraftData));\n  }, 3000);\n\n  return () => {\n    clearTimeout(handler);\n  };\n}, [memoizedDraftData, draftKey, draftProposalData, consent, amountError]);\n\nuseEffect(() => {\n  if (\n    proposalsOptions.length > 0 &&\n    editProposalData &&\n    editProposalData?.snapshot?.linked_proposals?.length > 0\n  ) {\n    let data = [];\n    editProposalData.snapshot.linked_proposals.map((item) => {\n      data.push(proposalsOptions.find((i) => i.value === item));\n    });\n    setLinkedProposals(data);\n  }\n}, [editProposalData, proposalsOptions]);\n\nuseEffect(() => {\n  if (\n    proposalsData !== null &&\n    Array.isArray(proposalsData) &&\n    !proposalsOptions.length\n  ) {\n    const data = [];\n    for (const prop of proposalsData) {\n      data.push({\n        label: \"Id \" + prop.id + \" : \" + prop.snapshot.name,\n        value: prop.id,\n      });\n    }\n    setProposalsOptions(data);\n  }\n}, [proposalsData]);\n\nconst InputContainer = ({ heading, description, children }) => {\n  return (\n    <div className=\"d-flex flex-column gap-1 gap-sm-2 w-100\">\n      <b className=\"h6 mb-0\">{heading}</b>\n      {description && (\n        <div className=\"text-muted w-100 text-sm\">{description}</div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nconst CheckBox = ({ value, isChecked, label, onClick }) => {\n  return (\n    <div className=\"d-flex gap-2 align-items-center\">\n      <input\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        value={value}\n        checked={isChecked}\n        onChange={(e) => onClick(e.target.checked)}\n      />\n      <label class=\"form-check-label text-sm\">{label}</label>\n    </div>\n  );\n};\n\nconst DraftBtnContainer = styled.div`\n  font-size: 13px;\n  min-width: 150px;\n\n  .custom-select {\n    position: relative;\n  }\n\n  .select-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid #ccc;\n    border-radius-top: 5px;\n    cursor: pointer;\n    background-color: #fff;\n    border-radius: 5px;\n  }\n\n  .options-card {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    width: 200%;\n    border: 1px solid #ccc;\n    background-color: #fff;\n    padding: 0.5rem;\n    z-index: 9999;\n    font-size: 13px;\n  }\n\n  @media screen and (max-width: 768px) {\n    .options-card {\n      right: 0 !important;\n      left: auto !important;\n    }\n  }\n\n  .option {\n    margin-block: 5px;\n    padding: 10px;\n    cursor: pointer;\n    border-bottom: 1px solid #f0f0f0;\n    transition: background-color 0.3s ease;\n  }\n\n  .option:hover {\n    background-color: #f0f0f0; /* Custom hover effect color */\n  }\n\n  .option:last-child {\n    border-bottom: none;\n  }\n\n  .selected {\n    background-color: #f0f0f0;\n  }\n\n  .disabled {\n    background-color: #f8f8f8 !important;\n    cursor: not-allowed !important;\n  }\n\n  .circle {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n  }\n\n  .grey {\n    background-color: #818181;\n  }\n\n  .green {\n    background-color: #04a46e;\n  }\n`;\n\nconst SubmitBtn = () => {\n  const btnOptions = [\n    {\n      iconColor: \"grey\",\n      label: \"Submit Draft\",\n      description:\n        \"The author can still edit the proposal and build consensus before sharing it with sponsors.\",\n      value: \"draft\",\n    },\n    {\n      iconColor: \"green\",\n      label: \"Ready for Review\",\n      description:\n        \"Start the official review process with sponsors. This will lock the editing function, but comments are still open.\",\n      value: \"review\",\n    },\n  ];\n\n  const handleOptionClick = (option) => {\n    setDraftBtnOpen(false);\n    setSelectedStatus(option.value);\n  };\n\n  const toggleDropdown = () => {\n    setDraftBtnOpen(!isDraftBtnOpen);\n  };\n\n  const handleSubmit = () => {\n    const isDraft = selectedStatus === \"draft\";\n    if (isDraft) {\n      onSubmit({ isDraft });\n      cleanDraft();\n    } else {\n      setReviewModal(true);\n    }\n  };\n\n  const selectedOption = btnOptions.find((i) => i.value === selectedStatus);\n\n  return (\n    <DraftBtnContainer>\n      <div\n        className=\"custom-select\"\n        tabIndex=\"0\"\n        onBlur={() => setDraftBtnOpen(false)}\n      >\n        <div\n          className={\n            \"select-header d-flex gap-1 align-items-center \" +\n            (disabledSubmitBtn && \"disabled\")\n          }\n        >\n          <div\n            onClick={() => !disabledSubmitBtn && handleSubmit()}\n            className=\"p-2 d-flex gap-2 align-items-center \"\n          >\n            <div className={\"circle \" + selectedOption.iconColor}></div>\n            <div className={`selected-option`}>{selectedOption.label}</div>\n          </div>\n          <div\n            className=\"h-100 p-2\"\n            style={{ borderLeft: \"1px solid #ccc\" }}\n            onClick={!disabledSubmitBtn && toggleDropdown}\n          >\n            <i class={`bi bi-chevron-${isOpen ? \"up\" : \"down\"}`}></i>\n          </div>\n        </div>\n\n        {isDraftBtnOpen && (\n          <div className=\"options-card\">\n            {btnOptions.map((option) => (\n              <div\n                key={option.value}\n                className={`option ${\n                  selectedOption.value === option.value ? \"selected\" : \"\"\n                }`}\n                onClick={() => handleOptionClick(option)}\n              >\n                <div className={`d-flex gap-2 align-items-center`}>\n                  <div className={\"circle \" + option.iconColor}></div>\n                  <div className=\"fw-bold\">{option.label}</div>\n                </div>\n                <div className=\"text-muted text-xs\">{option.description}</div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DraftBtnContainer>\n  );\n};\n\nconst onSubmit = ({ isDraft, isCancel }) => {\n  const linkedProposalsIds = linkedProposals.map((item) => item.value) ?? [];\n  const body = {\n    proposal_body_version: \"V0\",\n    name: title,\n    description: description,\n    category: category,\n    summary: summary,\n    linked_proposals: linkedProposalsIds,\n    requested_sponsorship_usd_amount: requestedSponsorshipAmount,\n    requested_sponsorship_paid_in_currency: requestedSponsorshipToken.value,\n    receiver_account: receiverAccount,\n    supervisor: supervisor || null,\n    requested_sponsor: requestedSponsor,\n    timeline: isCancel\n      ? {\n          status: \"CANCELLED\",\n          sponsor_requested_review: false,\n          reviewer_completed_attestation: false,\n        }\n      : isDraft\n      ? { status: \"DRAFT\" }\n      : {\n          status: \"REVIEW\",\n          sponsor_requested_review: false,\n          reviewer_completed_attestation: false,\n        },\n  };\n  const args = { labels: [], body: body };\n  if (isEditPage) {\n    args[\"id\"] = editProposalData.id;\n  }\n\n  Near.call([\n    {\n      contractName: \"devhub.near\",\n      methodName: isEditPage ? \"edit_proposal\" : \"add_proposal\",\n      args: args,\n      gas: 270000000000000,\n    },\n  ]);\n};\n\nfunction cleanDraft() {\n  Storage.privateSet(draftKey, null);\n}\n\nconst WarningImg =\n  \"https://ipfs.near.social/ipfs/bafkreieq4222tf3hkbccfnbw5kpgedm3bf2zcfgzbnmismxav2phqdwd7q\";\n\nconst descriptionPlaceholder = `**PROJECT DETAILS**\nProvide a clear overview of the scope, deliverables, and expected outcomes. What benefits will it provide to the NEAR community? How will you measure success?\n\n**TIMELINE**\nDescribe the timeline of your project and key milestones, specifying if the work was already complete or not. Include your plans for reporting progress to the community.\n\nOPTIONAL FIELDS\n\n**TEAM**\nProvide a list of who will be working on the project along with their relevant skillset and experience. You may include links to portfolios or profiles to help the community get to know who the DAO will fund and how their backgrounds will contribute to your project\u2019s success.\n\n**BUDGET BREAKDOWN**\nInclude a detailed breakdown on how you will use the funds and include rate justification. Our community values transparency, so be as specific as possible.\n`;\n\nif (loading) {\n  return (\n    <div\n      style={{ height: \"50vh\" }}\n      className=\"d-flex justify-content-center align-items-center w-100\"\n    >\n      <Widget\n        src={\"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Spinner\"}\n      />\n    </div>\n  );\n}\n\nconst [collapseState, setCollapseState] = useState({});\n\nconst CollapsibleContainer = ({ title, children }) => {\n  return (\n    <div>\n      <div\n        className={\n          \"d-flex justify-content-between \" +\n          (collapseState[title] && \" border-sm-bottom\")\n        }\n      >\n        <div className=\"h5 text-muted mb-2 mb-sm-3\">{title}</div>\n        <div\n          className=\"d-flex d-sm-none cursor-pointer\"\n          onClick={() =>\n            setCollapseState((prevState) => ({\n              ...prevState,\n              [title]: !prevState[title],\n            }))\n          }\n        >\n          {!collapseState[title] ? (\n            <i class=\"bi bi-chevron-up h4\"></i>\n          ) : (\n            <i class=\"bi bi-chevron-down h4\"></i>\n          )}\n        </div>\n      </div>\n      <div className={!collapseState[title] ? \"\" : \"d-none\"}>{children}</div>\n    </div>\n  );\n};\n\nreturn (\n  <Container className=\"w-100 py-4 px-0 px-sm-2 d-flex flex-column gap-3\">\n    <Heading className=\"px-2 px-sm-0\">\n      {isEditPage ? \"Edit\" : \"Create\"} Proposal\n    </Heading>\n    <Widget\n      src={\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.ConfirmReviewModal\"}\n      props={{\n        isOpen: isReviewModalOpen,\n        onCancelClick: () => setReviewModal(false),\n        onReviewClick: () => {\n          setReviewModal(false);\n          cleanDraft();\n          onSubmit({ isDraft: false });\n        },\n      }}\n    />\n    <Widget\n      src={\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.ConfirmCancelModal\"}\n      props={{\n        isOpen: isCancelModalOpen,\n        onCancelClick: () => setCancelModal(false),\n        onConfirmClick: () => {\n          setCancelModal(false);\n          onSubmit({ isCancel: true });\n        },\n      }}\n    />\n    <div className=\"card card-body p-3 p-sm-4 rounded-0 w-100\">\n      <div className=\"d-flex flex-wrap gap-6 w-100\">\n        <div className=\"flex-2 w-100 order-2 order-sm-1\">\n          <div className=\"d-flex gap-2 w-100\">\n            <div className=\"d-none d-sm-flex\">\n              <Widget\n                src={\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.Profile\"}\n                props={{\n                  accountId: author,\n                }}\n              />\n            </div>\n            <div className=\"d-flex flex-column gap-2 gap-sm-4 w-100\">\n              <InputContainer\n                heading=\"Category\"\n                description={\n                  <>\n                    Select the category that best aligns with your contribution\n                    to the NEAR developer community. Need guidance? See{\" \"}\n                    <a\n                      href={FundingDocs}\n                      className=\"text-decoration-underline\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Funding Docs.\n                    </a>\n                  </>\n                }\n              >\n                <Widget\n                  src={\n                    \"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.CategoryDropdown\"\n                  }\n                  props={{\n                    selectedValue: category,\n                    onChange: setCategory,\n                  }}\n                />\n              </InputContainer>\n              <InputContainer\n                heading=\"Title\"\n                description=\"Highlight the essence of your proposal in a few words. This will appear on your proposal\u2019s detail page and the main proposal feed. Keep it short, please :)\"\n              >\n                <Widget\n                  src=\"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input\"\n                  props={{\n                    className: \"flex-grow-1\",\n                    value: title,\n                    onChange: (e) => {\n                      setTitle(e.target.value);\n                    },\n                    skipPaddingGap: true,\n                    placeholder: \"Enter title here.\",\n                    inputProps: {\n                      max: 80,\n                      required: true,\n                    },\n                  }}\n                />\n              </InputContainer>\n              <InputContainer\n                heading=\"Summary\"\n                description=\"Explain your proposal briefly. This is your chance to make a good first impression on the community. Include what needs or goals your work will address, your solution, and the benefit for the NEAR developer community.\"\n              >\n                <Widget\n                  src=\"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input\"\n                  props={{\n                    className: \"flex-grow-1\",\n                    value: summary,\n                    multiline: true,\n                    onChange: (e) => {\n                      setSummary(e.target.value);\n                    },\n                    skipPaddingGap: true,\n                    placeholder: \"Enter summary here.\",\n                    inputProps: {\n                      max: 500,\n                      required: true,\n                    },\n                  }}\n                />\n              </InputContainer>\n              <InputContainer\n                heading=\"Description\"\n                description=\"Expand on your summary with any relevant details like your contribution timeline, key milestones, team background, and a clear breakdown of how the funds will be used. Proposals should be simple and clear (e.g. 1 month). For more complex projects, treat each milestone as a separate proposal.\"\n              >\n                <Widget\n                  src={\n                    \"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Compose\"\n                  }\n                  props={{\n                    data: description,\n                    onChange: setDescription,\n                    autocompleteEnabled: true,\n                    autoFocus: false,\n                    placeholder: descriptionPlaceholder,\n                  }}\n                />\n              </InputContainer>\n              <InputContainer\n                heading=\"Final Consent\"\n                description=\"Expand on your summary with any relevant details like your contribution timeline, key milestones, team background, and a clear breakdown of how the funds will be used. Proposals should be simple and clear (e.g. 1 month). For more complex projects, treat each milestone as a separate proposal.\"\n              >\n                <div className=\"d-flex flex-column gap-2\">\n                  <CheckBox\n                    value={consent.toc}\n                    label={\n                      <>\n                        I\u2019ve agree to{\" \"}\n                        <a\n                          href={\n                            \"https://docs.google.com/document/d/1nRGy7LhpLj56SjN9MseV1x-ubH8O_c6B9DOAZ9qTwMU/edit?usp=sharing\"\n                          }\n                          className=\"text-decoration-underline\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          DevHub\u2019s Terms and Conditions\n                        </a>\n                        and commit to honoring it\n                      </>\n                    }\n                    isChecked={consent.toc}\n                    onClick={(value) =>\n                      setConsent((prevConsent) => ({\n                        ...prevConsent,\n                        toc: value,\n                      }))\n                    }\n                  />\n                  <CheckBox\n                    value={consent.coc}\n                    label={\n                      <>\n                        I\u2019ve read{\" \"}\n                        <a\n                          href={\n                            \"https://docs.google.com/document/d/1c6XV8Sj_BRKw8jnTIsjdLPPN6Al5eEStt1ZLYSuqw9U/edit\"\n                          }\n                          className=\"text-decoration-underline\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          DevHub\u2019s Code of Conduct\n                        </a>\n                        and commit to honoring it\n                      </>\n                    }\n                    isChecked={consent.coc}\n                    onClick={(value) =>\n                      setConsent((prevConsent) => ({\n                        ...prevConsent,\n                        coc: value,\n                      }))\n                    }\n                  />\n                </div>\n              </InputContainer>\n              <div className=\"d-flex justify-content-between gap-2 align-items-center\">\n                <div>\n                  {isEditPage && (\n                    <Widget\n                      src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Button`}\n                      props={{\n                        classNames: {\n                          root: \"btn-outline-danger shadow-none border-0 btn-sm\",\n                        },\n                        label: (\n                          <div className=\"d-flex align-items-center gap-1\">\n                            <i class=\"bi bi-trash3\"></i> Cancel Proposal\n                          </div>\n                        ),\n                        onClick: () => setCancelModal(true),\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"d-flex gap-2\">\n                  <Link\n                    to={\n                      isEditPage\n                        ? href({\n                            widgetSrc: \"devgovgigs.petersalomonsen.near/widget/app\",\n                            params: {\n                              page: \"proposal\",\n                              id: parseInt(id),\n                            },\n                          })\n                        : href({\n                            widgetSrc: \"devgovgigs.petersalomonsen.near/widget/app\",\n                            params: {\n                              page: \"proposals\",\n                            },\n                          })\n                    }\n                  >\n                    <Widget\n                      src={`devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Button`}\n                      props={{\n                        classNames: {\n                          root: \"d-flex h-100 text-muted fw-bold btn-outline shadow-none border-0 btn-sm\",\n                        },\n                        label: \"Discard Changes\",\n                        onClick: cleanDraft,\n                      }}\n                    />\n                  </Link>\n                  <SubmitBtn />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex-1 w-100 order-1 order-sm-2\">\n          <CollapsibleContainer title=\"Author Details\">\n            <div className=\"d-flex flex-column gap-3 gap-sm-4\">\n              <InputContainer heading=\"Author\">\n                <Widget\n                  src=\"mob.near/widget/Profile.ShortInlineBlock\"\n                  props={{\n                    accountId: author,\n                  }}\n                />\n              </InputContainer>\n            </div>\n          </CollapsibleContainer>\n          <div className=\"my-4 my-sm-3\">\n            <CollapsibleContainer title=\"Link Proposals (Optional)\">\n              <div className=\"d-flex flex-column gap-1\">\n                <div className=\"text-muted w-100 text-sm\">\n                  Link any relevant proposals (e.g. previous milestones).\n                </div>\n                {linkedProposals.map((proposal) => {\n                  return (\n                    <div className=\"d-flex gap-2 align-items-center\">\n                      <a\n                        className=\"text-decoration-underline\"\n                        href={href({\n                          widgetSrc: \"devgovgigs.petersalomonsen.near/widget/app\",\n                          params: {\n                            page: \"proposal\",\n                            id: proposal.value,\n                          },\n                        })}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {proposal.label}\n                      </a>\n                      <div\n                        className=\"cursor-pointer\"\n                        onClick={() => {\n                          const updatedLinkedProposals = linkedProposals.filter(\n                            (item) => item.value !== proposal.value\n                          );\n                          setLinkedProposals(updatedLinkedProposals);\n                        }}\n                      >\n                        <i class=\"bi bi-trash3-fill\"></i>\n                      </div>\n                    </div>\n                  );\n                })}\n                <Widget\n                  src=\"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.DropDownWithSearch\"\n                  props={{\n                    selectedValue: \"\",\n                    onChange: (v) => {\n                      if (\n                        !linkedProposals.some((item) => item.value === v.value)\n                      ) {\n                        setLinkedProposals([...linkedProposals, v]);\n                      }\n                    },\n                    options: proposalsOptions,\n                    showSearch: true,\n                    searchInputPlaceholder: \"Search by Id\",\n                    defaultLabel: \"Search proposals\",\n                    searchByValue: true,\n                  }}\n                />\n              </div>\n            </CollapsibleContainer>\n          </div>\n          <div className=\"my-4 my-sm-3\">\n            <CollapsibleContainer title=\"Funding Details\">\n              <div className=\"d-flex flex-column gap-3 gap-sm-4\">\n                <InputContainer\n                  heading=\"Total Amount (USD)\"\n                  description={\n                    <>\n                      Enter the exact amount you are seeking. See\n                      <a\n                        href={FundingDocs}\n                        className=\"text-decoration-underline\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        Funding Documentation\n                      </a>\n                      for guidelines.\n                    </>\n                  }\n                >\n                  <Widget\n                    src=\"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.Input\"\n                    props={{\n                      className: \"flex-grow-1\",\n                      value: requestedSponsorshipAmount,\n                      onChange: (e) => {\n                        const inputValue = e.target.value;\n                        const isValidInput = /^\\d+$/.test(inputValue);\n                        if (inputValue.trim() === \"\") {\n                          return;\n                        }\n                        if (!isValidInput || Number(inputValue) < 0) {\n                          setAmountError(\n                            \"Please enter a positive whole number.\"\n                          );\n                        } else {\n                          setRequestedSponsorshipAmount(inputValue);\n                          setAmountError(\"\");\n                        }\n                      },\n                      skipPaddingGap: true,\n                      placeholder: \"Enter amount\",\n                      inputProps: {\n                        type: \"number\",\n                        prefix: \"$\",\n                      },\n                    }}\n                  />\n                  {amountError && (\n                    <div style={{ color: \"red\" }} className=\"text-sm\">\n                      {amountError}\n                    </div>\n                  )}\n                </InputContainer>\n                <InputContainer\n                  heading=\"Currency\"\n                  description=\"Select your preferred currency for receiving funds. Note: The exchange rate for NEAR tokens will be the closing rate at the day of the invoice.\"\n                >\n                  <Widget\n                    src=\"devgovgigs.petersalomonsen.near/widget/devhub.components.molecule.DropDown\"\n                    props={{\n                      options: tokensOptions,\n                      selectedValue: requestedSponsorshipToken,\n                      onUpdate: (v) => {\n                        setRequestedSponsorshipToken(v);\n                      },\n                    }}\n                  />\n                </InputContainer>\n                <InputContainer\n                  heading=\"NEAR Wallet Address\"\n                  description=\"Enter the address that will receive the funds. We\u2019ll need this to send a test transaction once your proposal is approved.\"\n                >\n                  <Widget\n                    src=\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.AccountInput\"\n                    props={{\n                      value: receiverAccount,\n                      placeholder: devdaoAccount,\n                      onUpdate: setReceiverAccount,\n                    }}\n                  />\n                </InputContainer>\n                <InputContainer heading=\"Requested Sponsor\" description=\"\">\n                  <Widget\n                    src=\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.AccountInput\"\n                    props={{\n                      value: requestedSponsor,\n                      placeholder: \"DevDAO\",\n                      onUpdate: setRequestedSponsor,\n                    }}\n                  />\n                </InputContainer>\n                <InputContainer heading=\"Supervisor (Optional)\" description=\"\">\n                  <Widget\n                    src=\"devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.AccountInput\"\n                    props={{\n                      value: supervisor,\n                      placeholder: \"Enter Supervisor\",\n                      onUpdate: setSupervisor,\n                    }}\n                  />\n                </InputContainer>\n              </div>\n            </CollapsibleContainer>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/devgovgigs.petersalomonsen.near/widget/devhub.entity.proposal.Editor", "fact_widget_deployments_id": "ddd41ded22527372f2052734d060c8b4", "inserted_timestamp": "2024-03-16T15:26:45.439Z", "modified_timestamp": "2024-03-16T16:27:08.024Z", "__row_index": 86}