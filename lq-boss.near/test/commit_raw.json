{"tx_hash": "B69yeGziN5aZExFBiHLgLJ1VBLrjmRUw3XsBty6bi34A", "action_id_social": "aZSixpDGSyBr2Jpuabqxekuej6Zfw5sGNBrKRiwNjmC-0-widget", "block_id": 98845663, "block_timestamp": "2023-08-15T07:45:23.663Z", "signer_id": "lq-boss.near", "widget_name": "test", "source_code": "/** state init start */\nState.init({\n  inputValue: \"\",\n  inputError: \"\",\n});\n/** state init end */\n\n// load config\nconst config = props.config;\nif (!config) {\n  return \"Component not be loaded. Missing `config` props\";\n}\n\n/** common lib start */\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nconst NEAR_DECIMALS = 24;\nconst BIG_ROUND_DOWN = 0;\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nfunction formatAmount(a) {\n  return isValid(a)\n    ? Number(a).toLocaleString(undefined, {\n        minimumFractionDigits: 5,\n        maximumFractionDigits: 5,\n      })\n    : a;\n}\n\n/** common lib end */\nconst nearBalance = props.nearBalance || \"-\";\nconst linearBalance = props.linearBalance || \"-\";\n\n/** events start */\nconst onChange = (e) => {\n  // Has user signed in?\n  if (!isSignedIn) {\n    State.update({\n      inputError: \"Sign in please\",\n    });\n    return;\n  }\n  const targetValue = e.target.value;\n  if (targetValue !== \"\" && !targetValue.match(/^\\d*(\\.\\d*)?$/)) {\n    return;\n  }\n  let stakeAmount = targetValue.replace(/^0+/, \"0\"); // remove prefix 0\n  // limit 24 decimals\n  const most24DecimalsPattern = /^-?\\d+(\\.\\d{0,24})?/;\n  let values = stakeAmount.match(most24DecimalsPattern);\n  if (values) {\n    stakeAmount = values[0];\n  }\n  if (\n    nearBalance &&\n    (isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1) ||\n      Big(stakeAmount).gt(Big(nearBalance)))\n  ) {\n    if (\n      isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1)\n    ) {\n      State.update({\n        inputValue: stakeAmount,\n        inputError: \"Stake at least 1 NEAR\",\n      });\n    } else {\n      State.update({\n        inputValue: stakeAmount,\n        inputError: `Max is ${nearBalance} NEAR`,\n      });\n    }\n    return;\n  }\n  State.update({\n    inputValue: stakeAmount,\n    inputError: \"\",\n  });\n};\n\nconst onClickMax = () => {\n  if (\n    isNaN(Number(nearBalance)) ||\n    nearBalance === \"\" ||\n    Big(nearBalance).lt(1)\n  ) {\n    State.update({\n      inputValue: nearBalance,\n      inputError: \"Stake at least 1 NEAR\",\n    });\n    return;\n  } else {\n    State.update({\n      inputValue: nearBalance,\n      inputError: \"\",\n    });\n  }\n};\n\nconst onClickStake = async () => {\n  const stakeAmount = state.inputValue;\n  if (\n    nearBalance &&\n    (isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1) ||\n      Big(stakeAmount).gt(Big(nearBalance)))\n  ) {\n    if (\n      isNaN(Number(stakeAmount)) ||\n      stakeAmount === \"\" ||\n      Big(stakeAmount).lt(1)\n    ) {\n      State.update({ inputError: \"Stake at least 1 NEAR\" });\n    } else if (Big(stakeAmount).gt(Big(nearBalance))) {\n      State.update({\n        inputError: `Max is ${nearBalance} NEAR`,\n      });\n    } else setInputError(\"\");\n    return;\n  }\n\n  const stake = {\n    contractName: config.contractId,\n    methodName: \"deposit_and_stake\",\n    deposit: Big(state.inputValue).mul(Big(10).pow(NEAR_DECIMALS)).toFixed(0),\n    args: {},\n  };\n  const registerFt = {\n    contractName: config.contractId,\n    methodName: \"ft_balance_of\",\n    args: {\n      account_id: accountId,\n    },\n  };\n  const txs = [stake];\n  // If account has no LiNEAR, we assume she/he needs to register LiNEAR token.\n  // By adding a `ft_balance_of` function call, the NEAR indexer will automatically\n  // add LiNEAR token into caller's NEAR wallet token list.\n  if (Number(linearBalance) === 0) {\n    txs.push(registerFt);\n  }\n\n  Near.call(txs);\n\n  // update account balances\n  if (props.updateAccountInfo) {\n    props.updateAccountInfo();\n  }\n};\n/** events end */\n\nconst disabledStakeButton =\n  !isValid(state.inputValue) || Big(state.inputValue).eq(0) || state.inputError;\n\nconst linearPrice = Big(\n  Near.view(config.contractId, \"ft_price\", `{}`) ?? \"0\"\n).div(Big(10).pow(24));\n\nconst receivedLinear = (\n  linearPrice.lte(0)\n    ? Big(0)\n    : Big(isValid(state.inputValue) ? state.inputValue : 0).div(linearPrice)\n).toFixed(5, BIG_ROUND_DOWN);\nconst formattedReceivedLinear = formatAmount(receivedLinear);\n\nconst StakeFormWrapper = styled.div`\n  width: 100%;\n  max-width: 500px;\n  padding-top: 10px;\n  background: #25283A;\n  border-radius: 16px;\n  margin-top:20px;\n  padding-bottom:20px;\n  .contentArea{\n    background: #25283A;\n    border-radius: 16px;\n    padding:20px 30px 0 30px;\n  }\n  .contentArea p{\n    color: #7C7F96;\n    font-size:14px;\n  }\n  .contentArea hr{\n    background: #373A53;\n    height:2px;\n  }\n  .arr .bigIcon{\n    background: #373A53;\n  }\n  .arr .boldText{\n    font-weight: 500;\n  }\n  .arr .apr{\n    color: #7C7F96;\n  }\n  .arr .apr .value{\n    color:#FFFFFF;\n    font-weight: 500;\n  }\n  .footer p{\n    color:#FFFFFF;\n  }\n`;\nreturn (\n  <StakeFormWrapper>\n    <div class=\"arr\">\n      <Widget\n        src={`${config.ownerId}/widget/stake-bannerIcon`}\n        props={{\n          firstIconName: \"NEAR\",\n          firstIconUrl:\n            \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n          secondIconName: \"\",\n          secondIconUrl:\n            \"https://ipfs.near.social/ipfs/bafkreie2nqrjdjka3ckf4doocsrip5hwqrxh37jzwul2nyzeg3badfl2pm\",\n          componentType: \"liNEAR\",\n        }}\n      ></Widget>\n    </div>\n    <div class=\"contentArea\">\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Input`}\n        props={{\n          placeholder: \"0\",\n          value: state.inputValue,\n          onChange,\n          onClickMax,\n          inputError: state.inputError,\n          balance: nearBalance,\n        }}\n      />\n      <Widget\n        src={`${config.ownerId}/widget/LiNEAR.Button`}\n        props={{\n          onClick: onClickStake,\n          disabled: disabledStakeButton,\n          text: \"Stake\",\n        }}\n      />\n      <div class=\"footer\">\n        <Widget\n          src={`${config.ownerId}/widget/LiNEAR.Message.YouWillReceive`}\n          props={{ text: `${formattedReceivedLinear}` }}\n        />\n      </div>\n    </div>\n  </StakeFormWrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lq-boss.near/widget/test", "fact_widget_deployments_id": "270abcd42247429a0d8185c5d6b90aa6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}