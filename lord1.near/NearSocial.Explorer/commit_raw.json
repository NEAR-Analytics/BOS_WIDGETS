{"tx_hash": "5fjHVkB9JMEcj5veDU7xoyY7MPCnbXeTypm48psYsmmp", "action_id_social": "GDrKkLHwCnyiTBM3GRuCUFqNtc4nCRPZhfGR79JZQGs8-0-widget", "block_id": 114410078, "block_timestamp": "2024-03-09T19:09:24.573Z", "signer_id": "lord1.near", "widget_name": "NearSocial.Explorer", "source_code": "const darkColors = {\r\n  page_bg: \"rgb(25,33,50)\",\r\n  horizen_bg: \"#fff\",\r\n  header_bg: \"rgb(49,62,89)\",\r\n  sideBar: {\r\n    sideBar_bg: \"rgb(49,62,89)\",\r\n    sideBar_color: \"#fff\",\r\n  },\r\n  footer: {\r\n    titlenelowBackground: \"#806ce1\",\r\n    titleBackground: \"#fff\",\r\n    fromBackground: \"rgb(55,72,107)\",\r\n    toBackground: \"rgb(55,72,107)\",\r\n    belowBackground: \"rgb(210, 202, 250)\",\r\n  },\r\n  dynamic_header: {\r\n    afterbrandcolor: \"\",\r\n    color1brand: \"#fff\",\r\n    color2brand: \"rgb(210, 202, 250)\",\r\n    colordescription: \"rgb(210, 202, 250)\",\r\n    background:\r\n      \"radial-gradient(circle, rgb(49,62,89) 0%, rgba(230,230,231,0.01) 0%, rgb(49,62,89) 100%, rgb(49,62,89) 100%, rgb(49,62,89) 100%, rgba(46,52,90,1) 100%);\",\r\n  },\r\n  search_sbt: {\r\n    section_bg: \"transparent\",\r\n    card_bg: \"transparent)\",\r\n    search_btn_bg: \"rgb(49,62,89)\",\r\n    search_btn_bg_hover: \"rgba(49,62,89,0.8)\",\r\n    search_btn_text: \"rgb(255,255,255)\",\r\n    input_bg: \"rgb(49,62,89)\",\r\n    input_bg_hover: \"rgba(49,62,89,0.8)\",\r\n    input_text_color: \"rgb(255,255,255)\",\r\n    input_border: \"rgba(49,62,89,0.8)\",\r\n    table_bg: \"transparent\",\r\n    table_color: \"rgb(255,255,255)\",\r\n    table_border_color: \"\",\r\n    table_accent_bg: \"\",\r\n    table_striped_color: \"rgb(255,255,255)\",\r\n    table_striped_bg: \"\",\r\n    table_hover_color: \"rgb(255,255,255)\",\r\n    table_hover_bg: \"\",\r\n  },\r\n  profileInlineBlock: {\r\n    name: \"#fff\",\r\n    accountId: \"#fff\",\r\n    tag: \"#fff\",\r\n    description: \"#fff\",\r\n  },\r\n  table_pagination: {\r\n    table_bg: \"rgb(49,62,89)\",\r\n    table_color: \"rgb(255,255,255)\",\r\n    table_border_color: \"\",\r\n    table_accent_bg: \"\",\r\n    table_striped_color: \"rgb(255,255,255)\",\r\n    table_striped_bg: \"\",\r\n    table_hover_color: \"rgb(255,255,255)\",\r\n    table_hover_bg: \"\",\r\n    btn_border: \"rgb(25,33,50)\",\r\n    btn_bg: \"rgb(49,62,89)\",\r\n    btn_bg_active: \"rgb(25,33,50)\",\r\n    btn_color: \"#fff\",\r\n    input_bg: \"#2f3b54\",\r\n  },\r\n\r\n  card: {\r\n    card_bg: \"rgb(49,62,89)\",\r\n    tabSelect_bg: \"#192132\",\r\n    tabSelect_text_color: \"#fff\",\r\n    tabSelect_input_bg: \"rgb(49,62,89)\",\r\n    tabSelect_btn_active_bg: \"rgb(49,62,89)\",\r\n    text_color: \"rgba(255,255,255,1)\",\r\n  },\r\n  chart: {\r\n    title: \"rgb(255,255,255)\",\r\n    subtitle: \"rgba(255,255,255,0.7)\",\r\n    xAxis: \"rgb(255,255,255)\",\r\n    yAxis: \"rgb(255,255,255)\",\r\n    legend: \"rgba(255,255,255,0.7)\",\r\n    legendHover: \"rgb(255,255,255)\",\r\n    rangeSelector: {\r\n      labels: \"rgba(255,255,255,0.7)\",\r\n      inputColor: \"rgb(255,255,255)\",\r\n      btn_bg: \"rgba(25,33,50,0.3)\",\r\n      btn_color: \"rgba(255,255,255,0.7)\",\r\n      btn_hover_bg: \"rgba(25,33,50,0.5)\",\r\n      btn_hover_color: \"rgba(255,255,255,0.8)\",\r\n      btn_active_bg: \"rgba(25,33,50,0.8)\",\r\n      btn_active_color: \"rgb(255,255,255)\",\r\n    },\r\n  },\r\n  tree: {\r\n    subject: {\r\n      color: \"#fff\",\r\n      fontweight: 400,\r\n      fontSize: \"2em\",\r\n    },\r\n    nodes: {\r\n      color: \"#fff\",\r\n      // borderColor: \"#fff\",\r\n      backgroundColor: \"rgb(49,62,89)\",\r\n    },\r\n    overrideNodeStyles: {\r\n      // backgroundColor: \"red\",\r\n    },\r\n  },\r\n  spinnerColors: [\"#6F61C0\", \"#241468\"],\r\n  chartColor: [\r\n    \"#F79BD3\",\r\n    \"#A084E8\",\r\n    \"#EA1179\",\r\n    \"#F79BD3\",\r\n    \"#A084E8\",\r\n    \"#6F61C0\",\r\n    \"#241468\",\r\n    \"#9F0D7F\",\r\n  ],\r\n};\r\nconst lightColors = {\r\n  page_bg: \"#fff\",\r\n  horizen_bg: \"#391b86\",\r\n  header_bg: \"rgb(210, 202, 250)\",\r\n  sideBar: {\r\n    sideBar_bg: \"rgb(210, 202, 250)\",\r\n    sideBar_color: \"#fff\",\r\n  },\r\n  footer: {\r\n    titlenelowBackground: \"#806ce1\",\r\n    titleBackground: \"#fff\",\r\n    fromBackground: \"rgb(210, 202, 250)\",\r\n    toBackground: \"rgb(210, 202, 250)\",\r\n    belowBackground: \"#806ce1\",\r\n  },\r\n  dynamic_header: {\r\n    afterbrandcolor: \"#789efb\",\r\n    color1brand: \"#000\",\r\n    color2brand: \"#806ce1\",\r\n    colordescription: \"#806ce1\",\r\n\r\n    background:\r\n      \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(210,202,250,0.01) 0%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n  },\r\n  search_sbt: {\r\n    section_bg: \"rgb(235, 231, 253)\",\r\n    card_bg: \"\",\r\n    search_btn_bg: \"rgb(210, 202, 250)\",\r\n    search_btn_bg_hover: \"rgba(210, 202, 250,0.8)\",\r\n    search_btn_text: \"rgb(0,0,0)\",\r\n    input_bg: \"rgba(210, 202, 250,0.2)\",\r\n    input_bg_hover: \"rgba(210, 202, 250,0.4)\",\r\n    input_text_color: \"rgb(0,0,0)\",\r\n    input_border: \"rgba(210, 202, 250,0.4)\",\r\n    table_bg: \"transparent\",\r\n    table_color: \"rgb(0,0,0)\",\r\n    table_border_color: \"\",\r\n    table_accent_bg: \"\",\r\n    table_striped_color: \"rgb(0,0,0)\",\r\n    table_striped_bg: \"\",\r\n    table_hover_color: \"rgb(0,0,0)\",\r\n    table_hover_bg: \"\",\r\n  },\r\n  profileInlineBlock: {\r\n    name: \"#000\",\r\n    accountId: \"#000\",\r\n    tag: \"#000\",\r\n    description: \"#000\",\r\n  },\r\n  table_pagination: {\r\n    table_bg: \"rgb(255,255,255)\",\r\n    table_color: \"rgb(0,0,0)\",\r\n    table_border_color: \"\",\r\n    table_accent_bg: \"\",\r\n    table_striped_color: \"rgb(0,0,0)\",\r\n    table_striped_bg: \"\",\r\n    table_hover_color: \"rgb(0,0,0)\",\r\n    table_hover_bg: \"\",\r\n    btn_border: \"#000\",\r\n    btn_border: \"#806ce1\",\r\n    btn_bg: \"#fff\",\r\n    btn_bg_active: \"rgb(235, 231, 253)\",\r\n    btn_color: \"#000\",\r\n  },\r\n\r\n  card: {\r\n    card_bg: \"rgb(255, 255, 255)\",\r\n    tabSelect_bg: \"#e6e6e7\",\r\n    tabSelect_text_color: \"#000\",\r\n    tabSelect_input_bg: \"rgb(210, 202, 250)\",\r\n    tabSelect_btn_active_bg: \"rgb(210, 202, 250)\",\r\n    text_color: \"rgba(0,0,0,1)\",\r\n  },\r\n  chart: {\r\n    title: \"rgba(0,0,0,1)\",\r\n    subtitle: \"rgba(0,0,0,0.7)\",\r\n    xAxis: \"rgba(0,0,0,1)\",\r\n    yAxis: \"rgba(0,0,0,1)\",\r\n    legend: \"rgba(0,0,0,0.7)\",\r\n    legendHover: \"rgba(0,0,0,1)\",\r\n    rangeSelector: {\r\n      labels: \"rgba(0,0,0,0.7)\",\r\n      inputColor: \"rgba(0,0,0,0.5)\",\r\n      btn_bg: \"rgba(0,0,0,0.3)\",\r\n      btn_color: \"rgba(0,0,0,0.8)\",\r\n      btn_hover_bg: \"rgba(0,0,0,0.4)\",\r\n      btn_hover_color: \"rgba(0,0,0,1)\",\r\n      btn_active_bg: \"rgb(235, 231, 253)\",\r\n      btn_active_color: \"rgba(0,0,0,1)\",\r\n    },\r\n  },\r\n  tree: {\r\n    subject: {\r\n      color: \"#000\",\r\n      fontweight: 400,\r\n      fontSize: \"2em\",\r\n    },\r\n    nodes: {\r\n      color: \"#000\",\r\n      // borderColor: \"#000\",\r\n      backgroundColor: \"#fff\",\r\n    },\r\n    overrideNodeStyles: {\r\n      // backgroundColor: \"red\",\r\n    },\r\n  },\r\n  spinnerColors: [\"#6F61C0\", \"#241468\"],\r\n  chartColor: [\r\n    \"#F79BD3\",\r\n    \"#A084E8\",\r\n    \"#EA1179\",\r\n    \"#F79BD3\",\r\n    \"#A084E8\",\r\n    \"#6F61C0\",\r\n    \"#241468\",\r\n    \"#9F0D7F\",\r\n  ],\r\n};\r\n\r\nconst themeColor = props.themeColor || lightColors;\r\n// const themeColor = props.themeColor || lightColors;\r\n\r\n// #####################################\r\n\r\nState.init({\r\n  singer: \"james.near\",\r\n  result: [],\r\n  data: \"james.near\",\r\n  isLoading: false,\r\n  error: [],\r\n});\r\n\r\nconst inputHandler = ({ target }) => {\r\n  const singer = target.value.toLowerCase().trim();\r\n  State.update({ singer: singer });\r\n};\r\n\r\nconst handleData = () => {\r\n  if (!state.singer.length) {\r\n    State.update({ error: [...state.error, \"please insert an address\"] });\r\n    return;\r\n  }\r\n  if (state.data === state.singer) {\r\n    State.update({ error: [...state.error, \"please insert a new address\"] });\r\n    return;\r\n  }\r\n  State.update({ data: state.singer });\r\n};\r\n\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\nconst Input = styled.input`\r\ncolor:${themeColor?.search_sbt?.input_text_color};\r\nbackground-color:${themeColor?.search_sbt?.input_bg};\r\nborder: 1px solid ${themeColor?.search_sbt?.input_border};\r\n&:focus{\r\n  background-color:${themeColor?.search_sbt?.input_bg};\r\n  color:${themeColor?.search_sbt?.input_text_color};\r\nborder: 1px solid ${themeColor?.search_sbt?.input_border};\r\n};\r\n&:hover{\r\n  background-color:${themeColor?.search_sbt?.input_bg_hover}\r\n};\r\n\r\n`;\r\nconst Button = styled.button`\r\n    color: ${themeColor?.search_sbt?.search_btn_text};\r\n    font-size: 16px;\r\n    padding: 0.5rem 1rem;\r\n    font-weight: 400;\r\n    background-color: ${themeColor?.search_sbt?.search_btn_bg};\r\n    &:hover {background-color: ${themeColor?.search_sbt?.search_btn_bg_hover}};\r\n    border: 1px solid ${themeColor?.search_sbt?.search_btn_bg};\r\n    box-shadow: 0 2px 0 rgba(0, 0, 0, 0.02);\r\n    min-height: calc(1.5em + 1rem + 2px);\r\n    border-radius: 40px;\r\n    line-height: 29px;\r\n    letter-spacing: 0.01em;\r\n`;\r\n// -------------------------------------------------------------------\r\n\r\nconst singer = state.data;\r\nconst status = Social.index(\"notify\", singer, { order: \"desc\" }) || [];\r\nconst receivedPoke = status.filter(\r\n  (notification) => notification?.value?.type === \"poke\"\r\n);\r\nconst numReceivedPoke = receivedPoke?.length || 0;\r\n\r\nconst receivedLike = status.filter(\r\n  (notification) => notification?.value?.type === \"like\"\r\n);\r\nconst numReceivedLike = receivedLike?.length || 0;\r\n\r\nconst receivedComment = status.filter(\r\n  (notification) => notification?.value?.type === \"comment\"\r\n);\r\nconst numReceivedComment = receivedComment?.length || 0;\r\n\r\nconst receivedRepost = status.filter(\r\n  (notification) => notification?.value?.type === \"repost\"\r\n);\r\nconst numReceivedRepost = receivedRepost?.length || 0;\r\n\r\nconst nummention =\r\n  status.filter((notification) =>\r\n    notification?.value?.type.includes?.(\"mention\")\r\n  ).length || 0;\r\n\r\n//---------------------------------------------------part1------------------------------------------------------\r\n\r\nconst following = Social.keys(`${singer}/graph/follow/*`, \"final\", {\r\n  return_type: \"BlockHeight\",\r\n  values_only: true,\r\n});\r\nconst numFollowing = following\r\n  ? Object.keys(following[singer]?.graph?.follow || {}).length\r\n  : 0;\r\n//---------------------------\r\n\r\nconst followers = Social.keys(`*/graph/follow/${singer}`, \"final\", {\r\n  return_type: \"BlockHeight\",\r\n  values_only: true,\r\n});\r\nconst numFollowers = followers ? Object.keys(followers || {}).length : 0;\r\n\r\n//--------------------------\r\nconst likes = Social.keys(`${singer}/index/like`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numlikes = likes\r\n  ? Object.keys(likes[singer]?.index?.like || {}).length\r\n  : 0;\r\n\r\n//--------------------------\r\nconst posts = Social.keys(`${singer}/index/post`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numposts = posts\r\n  ? Object.keys(posts[singer]?.index?.post || {}).length\r\n  : 0;\r\n//--------------------------\r\nconst comments = Social.keys(`${singer}/post/comment`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numcomments = comments\r\n  ? Object.keys(comments[singer]?.post?.comment || {}).length\r\n  : 0;\r\n//--------------------------\r\nconst tx_widgets = Social.keys(`${singer}/widget`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst tx_numwidgets = tx_widgets\r\n  ? Object.keys(tx_widgets[singer]?.widget || {}).length\r\n  : 0;\r\n//--------------------------\r\nconst reposts = Social.keys(`${singer}/index/repost`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numreposts = reposts\r\n  ? Object.keys(reposts[singer]?.index?.repost || {}).length\r\n  : 0;\r\n//--------------------------\r\n// const pokes = Social.keys(`${singer}/*`, \"final\", {\r\n//   return_type: \"History\",\r\n// });\r\n// const numPokes = pokes\r\n//   ? Object.keys(pokes[singer].index.graph || {}).length\r\n//   : 0;\r\nconst numPokes = \"N/A\";\r\n//--------------------------\r\n\r\nconst allTx = Social.keys(`${singer}/*`, \"final\", {\r\n  return_type: \"History\",\r\n}) || { [singer]: [] };\r\nconst joinDateTimeBlock =\r\n  Object.values(allTx[singer] || {})\r\n    .flat()\r\n    .sort((a, b) => a - b)[0] || \"-\";\r\n\r\nlet joinDate = fetch(\r\n  \"https://api.near.social/time?blockHeight=\" + joinDateTimeBlock\r\n).body;\r\njoinDate = Number.isInteger(joinDate)\r\n  ? `${new Date(joinDate).getFullYear()}/${\r\n      new Date(joinDate).getMonth() + 1\r\n    }/${new Date(joinDate).getDate()}`\r\n  : \"-\";\r\n//--------------------------\r\n\r\nconst hashtag = Social.keys(`${singer}/index/hashtag`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numHashtags = hashtag\r\n  ? Object.keys(hashtag[singer]?.index?.hashtag || {}).length\r\n  : 0;\r\n//--------------------------\r\nconst widgets = Social.keys(`${singer ?? \"*\"}/widget/*`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\n// console.log(\"widgets\", widgets);\r\nconst numWidgets = widgets[singer]?.widget\r\n  ? Object.keys(widgets[singer]?.widget || {}).length\r\n  : 0;\r\n\r\n//--------------------------\r\n\r\nconst forkof = Social.keys(`${singer}/widget/*/metadata/fork_of`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numForkof = forkof ? Object.keys(forkof[singer]?.widget || {}).length : 0;\r\n\r\n//--------------------------\r\n\r\nconst un_star = Social.keys(`${singer}/index/star`, \"final\", {\r\n  return_type: \"History\",\r\n});\r\nconst numUn_star = un_star\r\n  ? Object.keys(un_star[singer]?.index?.star || {}).length\r\n  : 0;\r\n//--------------------------\r\n\r\n// const totalTx = Social.keys(`${singer}/*`, \"final\", {\r\n//   return_type: \"History\",\r\n// });\r\n// const numTotalTx = totalTx\r\n//   ? new Set(Object.values(totalTx[singer] || {}).flat()).size\r\n//   : 0;\r\nconst totalTx = fetch(\r\n  `https://api.nearblocks.io/v1/account/${singer}/txns/count?to=social.near`\r\n).body;\r\nconst numTotalTx = totalTx ? totalTx.txns[0]?.count ?? \"-\" : \"-\";\r\n\r\n//--------------------------\r\n\r\n//-----------------------------------------------part1----------------------------------------------------\r\n//-----------------------------------------------part2----------------------------------------------------\r\nconst generaltheme = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"BOS Activity\",\r\n  fontsize: \"35px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"Profile\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst baseHeaderDynamic = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: ``,\r\n  brand: ``,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst cardObjects = [\r\n  {\r\n    name: \"followers\",\r\n    description: `${numFollowers}`,\r\n    brand: \"Followers\",\r\n    afterbrand: \"\",\r\n  },\r\n  {\r\n    name: \"followings\",\r\n    description: `${numFollowing}`,\r\n    brand: \"Followings\",\r\n    afterbrand: \"\",\r\n  },\r\n  { name: \"posts\", description: `${numposts}`, brand: \"Posts\", afterbrand: \"\" },\r\n  {\r\n    name: \"reposts\",\r\n    description: `${numreposts}`,\r\n    brand: \"Reposts\",\r\n    afterbrand: \"\",\r\n  },\r\n  {\r\n    name: \"comments\",\r\n    description: `${numcomments}`,\r\n    brand: \"Comments\",\r\n    afterbrand: \"\",\r\n  },\r\n  { name: \"likes\", description: `${numlikes}`, brand: \"Likes\", afterbrand: \"\" },\r\n  {\r\n    name: \"pokes\",\r\n    description: `${numPokes}`,\r\n    brand: \"Pokes\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n  },\r\n  {\r\n    name: \"tx_widgets\",\r\n    description: `${tx_numwidgets}`,\r\n    brand: \"Widgets (trx)\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n  },\r\n  {\r\n    name: \"received_pokes\",\r\n    description: `${numReceivedPoke}`,\r\n    brand: \"Received\",\r\n    afterbrand: \"Pokes\",\r\n  },\r\n  {\r\n    name: \"received_likes\",\r\n    description: `${numReceivedLike}`,\r\n    brand: \"Received\",\r\n    afterbrand: \"Likes\",\r\n  },\r\n  {\r\n    name: \"received_comments\",\r\n    description: `${numReceivedComment}`,\r\n    brand: \"Received\",\r\n    afterbrand: \"Comments\",\r\n  },\r\n  {\r\n    name: \"received_reposts\",\r\n    description: `${numReceivedRepost}`,\r\n    brand: \"Received\",\r\n    afterbrand: \"Reposts\",\r\n  },\r\n  {\r\n    name: \"mentions\",\r\n    description: `${nummention}`,\r\n    brand: \"Mentions\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n  },\r\n  {\r\n    name: \"widgets\",\r\n    description: `${numWidgets}`,\r\n    brand: \"Widgets\",\r\n    afterbrand: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"joinDate\",\r\n    description: `${joinDate}`,\r\n    brand: \"Join Date\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n    offGrid: true,\r\n  },\r\n\r\n  {\r\n    name: \"hashtags\",\r\n    description: `${numHashtags}`,\r\n    brand: \"Hashtags\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n  },\r\n  {\r\n    name: \"forkof\",\r\n    description: `${numForkof}`,\r\n    brand: \"Forks\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n  },\r\n  {\r\n    name: \"star-unstar\",\r\n    description: `${numUn_star}`,\r\n    brand: \"Un/star\",\r\n    afterbrand: \"\",\r\n  },\r\n  {\r\n    name: \"total-tx\",\r\n    description: `${numTotalTx}`,\r\n    brand: \"Total trx\",\r\n    afterbrand: \"\",\r\n    offChart: true,\r\n    offGrid: true,\r\n  },\r\n];\r\n//---------------------------------------------------------------------------------------------------\r\nconst SearchInput = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"search p-4\"\r\n  >\r\n    <div className=\"row\">\r\n      <div className=\"col-8 \">\r\n        <Input\r\n          onBlur={inputHandler}\r\n          defaultValue={state.singer}\r\n          type=\"input\"\r\n          className=\"form-control form-control-lg rounded-4\"\r\n          id=\"address\"\r\n          placeholder=\"jlw.near\"\r\n        />\r\n      </div>\r\n      <div className=\"col-4 col-lg-auto\">\r\n        <Button\r\n          disabled={state.isLoading}\r\n          onClick={handleData}\r\n          className=\"btn-lg\"\r\n          type=\"button\"\r\n        >\r\n          {state.isLoading ? (\r\n            <div className=\"text-center px-4\">\r\n              <div className=\"spinner-border spinner-border-sm\" role=\"status\">\r\n                <span className=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            \"search\"\r\n          )}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nconst TableSection = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      className=\"container\"\r\n      style={{\r\n        boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\r\n      }}\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <Widget\r\n                src=\"lord1.near/widget/nearwidgetProfile\"\r\n                props={{\r\n                  accountId: singer,\r\n                  themeColor: {\r\n                    profile_large: themeColor.profile_large,\r\n                    profileInlineBlock: { ...themeColor.profileInlineBlock },\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={{\r\n                  ...baseHeaderDynamic,\r\n                  ...cardObjects.find((o) => o.name === \"joinDate\"),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={{\r\n                  ...baseHeaderDynamic,\r\n                  ...cardObjects.find((o) => o.name === \"total-tx\"),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"row\">\r\n            {cardObjects\r\n              .filter((o) => !o.offGrid)\r\n              .map((card) => (\r\n                <div key={card.name} className=\"col-md-2\">\r\n                  <Widget\r\n                    src=\"lord1.near/widget/header-dynamic\"\r\n                    props={{ ...baseHeaderDynamic, ...card }}\r\n                  />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// ---------------------  pie chart ------------------------\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = data.map((s) => [s[key], s[value]]);\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\nconst pieChartData = () => {\r\n  return cardObjects\r\n    .filter((o) => !o.offChart)\r\n    .map((o) => {\r\n      return {\r\n        title: `${o.brand} ${o.afterbrand}`,\r\n        value: Number.parseInt(o.description),\r\n      };\r\n    });\r\n};\r\nconst PieChart = (\r\n  <div\r\n    className=\"col-lg-8\"\r\n    style={{\r\n      boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\r\n    }}\r\n  >\r\n    <div\r\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\r\n      className=\"shadow-sm rounded-4 \"\r\n    >\r\n      <Widget\r\n        src=\"lord1.near/widget/Pie-chart\"\r\n        props={getPieProps(\r\n          pieChartData(),\r\n          [\"title\", \"value\"],\r\n          themeColor.chartColor,\r\n          {\r\n            title: \"Social Actions\",\r\n            subtitle: \"Social Actions\",\r\n\r\n            type: \"pie\",\r\n            connector: true,\r\n            legend: true,\r\n          }\r\n        )}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// -------------------- mix chart -------------------\r\n\r\nlet blockHeightData = fetch(\r\n  `https://api.flipsidecrypto.com/api/v2/queries/6b01d203-0d80-4e70-84ee-c6aa37578ce8/data/latest`\r\n);\r\nblockHeightData = blockHeightData.body || [];\r\nconst getMixData = (accountId) => {\r\n  const myData = {};\r\n  const initDataValue = {\r\n    follower: 0,\r\n    follow: 0,\r\n    like: 0,\r\n    post: 0,\r\n    comment: 0,\r\n    repost: 0,\r\n    un_star: 0,\r\n    receivedComment: 0,\r\n    receivedLike: 0,\r\n    receivedPoke: 0,\r\n    receivedRepost: 0,\r\n    widgets: 0,\r\n  };\r\n  followers &&\r\n    Object.values(followers).forEach((i) => {\r\n      const count = myData[i.graph.follow[accountId]];\r\n      myData[i.graph.follow[accountId]] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        follower: (count.follower ?? 0) + 1,\r\n      };\r\n    });\r\n\r\n  following &&\r\n    Object.values(following[accountId]?.graph?.follow || {}).forEach((i) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        follow: (count.follow ?? 0) + 1,\r\n      };\r\n    });\r\n\r\n  likes &&\r\n    Object.values(likes[accountId]?.index?.like || {}).forEach((i) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        like: (count.like ?? 0) + 1,\r\n      };\r\n    });\r\n\r\n  posts &&\r\n    Object.values(posts[accountId]?.index?.post || {}).forEach((i) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        post: (count.post ?? 0) + 1,\r\n      };\r\n    });\r\n\r\n  comments &&\r\n    Object.values(comments[accountId]?.post?.comment || {}).forEach((i) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        comment: (count.comment ?? 0) + 1,\r\n      };\r\n    });\r\n\r\n  reposts &&\r\n    Object.values(reposts[accountId]?.index?.repost || {}).forEach((i) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        repost: (count.repost ?? 0) + 1,\r\n      };\r\n    });\r\n  un_star &&\r\n    Object.values(un_star[accountId]?.index?.star || {}).forEach((i) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        un_star: (count.un_star ?? 0) + 1,\r\n      };\r\n    });\r\n\r\n  receivedComment.forEach(({ blockHeight }) => {\r\n    const count = myData[blockHeight];\r\n    myData[blockHeight] = {\r\n      ...initDataValue,\r\n      ...count,\r\n      receivedComment: (count.receivedComment ?? 0) + 1,\r\n    };\r\n  });\r\n  receivedLike.forEach(({ blockHeight }) => {\r\n    const count = myData[blockHeight];\r\n    myData[blockHeight] = {\r\n      ...initDataValue,\r\n      ...count,\r\n      receivedLike: (count.receivedLike ?? 0) + 1,\r\n    };\r\n  });\r\n  receivedPoke.forEach(({ blockHeight }) => {\r\n    const count = myData[blockHeight];\r\n    myData[blockHeight] = {\r\n      ...initDataValue,\r\n      ...count,\r\n      receivedPoke: (count.receivedPoke ?? 0) + 1,\r\n    };\r\n  });\r\n  receivedRepost.forEach(({ blockHeight }) => {\r\n    const count = myData[blockHeight];\r\n    myData[blockHeight] = {\r\n      ...initDataValue,\r\n      ...count,\r\n      receivedRepost: (count.receivedRepost ?? 0) + 1,\r\n    };\r\n  });\r\n\r\n  widgets &&\r\n    Object.values(widgets[accountId]?.widget || {}).forEach(([i]) => {\r\n      const count = myData[i];\r\n      myData[i] = {\r\n        ...initDataValue,\r\n        ...count,\r\n        widgets: (count.widgets ?? 0) + 1,\r\n      };\r\n    });\r\n  return myData;\r\n};\r\n\r\nconst splitTime = () => {\r\n  let timeIndex = 0;\r\n  const splitedData = {};\r\n  Object.entries(getMixData(singer)).forEach(([blockTime, counts]) => {\r\n    for (; timeIndex <= blockHeightData.length; ++timeIndex) {\r\n      if (\r\n        timeIndex === 0 &&\r\n        Number(blockTime) < blockHeightData[timeIndex].min_block\r\n      ) {\r\n        break;\r\n      }\r\n\r\n      if (\r\n        (Number(blockTime) >= blockHeightData[timeIndex].min_block &&\r\n          Number(blockTime) <= blockHeightData[timeIndex].max_block) ||\r\n        (timeIndex === blockHeightData.length - 1 &&\r\n          Number(blockTime) > blockHeightData[timeIndex].max_block)\r\n      ) {\r\n        const prevCount = splitedData[blockHeightData[timeIndex].date] ?? {\r\n          follower: 0,\r\n          follow: 0,\r\n          like: 0,\r\n          post: 0,\r\n          comment: 0,\r\n          repost: 0,\r\n          un_star: 0,\r\n          receivedComment: 0,\r\n          receivedLike: 0,\r\n          receivedPoke: 0,\r\n          receivedRepost: 0,\r\n          widgets: 0,\r\n        };\r\n        const newCount = {\r\n          follower: prevCount.follower + counts.follower,\r\n          follow: prevCount.follow + counts.follow,\r\n          like: prevCount.like + counts.like,\r\n          post: prevCount.post + counts.post,\r\n          comment: prevCount.comment + counts.comment,\r\n          repost: prevCount.repost + counts.repost,\r\n          un_star: prevCount.un_star + counts.un_star,\r\n          receivedComment: prevCount.receivedComment + counts.receivedComment,\r\n          receivedLike: prevCount.receivedLike + counts.receivedLike,\r\n          receivedPoke: prevCount.receivedPoke + counts.receivedPoke,\r\n          receivedRepost: prevCount.receivedRepost + counts.receivedRepost,\r\n          widgets: prevCount.widgets + counts.widgets,\r\n        };\r\n        splitedData[blockHeightData[timeIndex].date] = newCount;\r\n        break;\r\n      } else {\r\n        continue;\r\n      }\r\n    }\r\n  });\r\n  return Object.entries(splitedData).map(([date, values]) => {\r\n    return { date: new Date(date).getTime(), ...values };\r\n  });\r\n};\r\n\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey], d[series.key] || null]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst MixChart = (\r\n  <div className=\"col-lg-12\">\r\n    <div\r\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\r\n      className=\"shadow-sm rounded-4\"\r\n    >\r\n      <Widget\r\n        src=\"lord1.near/widget/mix-chart\"\r\n        props={getMixProps(\r\n          splitTime(),\r\n          \"date\",\r\n          [\r\n            {\r\n              key: \"follow\",\r\n\r\n              seriesName: \"Follow\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"follower\",\r\n              seriesName: \"Follower\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"like\",\r\n              seriesName: \"Like\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"post\",\r\n              seriesName: \"Post\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"comment\",\r\n              seriesName: \"Comment\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"repost\",\r\n              seriesName: \"Repost\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"un_star\",\r\n              seriesName: \"Un/Star\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"receivedRepost\",\r\n              seriesName: \"Received Repost\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"receivedLike\",\r\n              seriesName: \"Received Like\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"receivedComment\",\r\n              seriesName: \"Received Comment\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"receivedPoke\",\r\n              seriesName: \"Received Poke\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n            {\r\n              key: \"widgets\",\r\n              seriesName: \"widgets\",\r\n              type: \"column\",\r\n\r\n              id: 1,\r\n            },\r\n          ],\r\n          themeColor.chartColor,\r\n          {\r\n            title: \"\",\r\n            subtitle: \"Daily social actions\",\r\n          }\r\n        )}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n// --------------- social graph -------------------\r\nconst SocialGraph = (\r\n  <div\r\n    className=\"col-lg-4\"\r\n    style={{\r\n      boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\r\n    }}\r\n  >\r\n    <div\r\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\r\n      className=\"shadow-sm rounded-4\"\r\n    >\r\n      <Widget\r\n        key={state.data}\r\n        src=\"lord1.near/widget/SocialGraph\"\r\n        props={{\r\n          accountIds: [state.data, \"\"],\r\n          spinnerColors: themeColor.spinnerColors,\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// --------------- nodes -------------------\r\nconst Nodes = (\r\n  <div\r\n    className=\"col-lg-12 pb-4\"\r\n    style={{\r\n      boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\r\n    }}\r\n  >\r\n    <div\r\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\r\n      className=\"shadow-sm rounded-4\"\r\n    >\r\n      <Widget\r\n        key={state.data}\r\n        src=\"forefront_tak.near/widget/Forefront.Widget.NearSocial.Explorer.Tree\"\r\n        props={{\r\n          rootPath: state.data,\r\n          themeColor: themeColor.tree,\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// -------------------------------------------\r\nreturn (\r\n  <div style={{ backgroundColor: themeColor.page_bg }}>\r\n    {SearchInput}\r\n    {TableSection}\r\n    <div style={{ width: \"100%\", height: \"30px\" }}></div>\r\n    <div\r\n      className=\"row rounded-3\"\r\n      style={{\r\n        boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\r\n      }}\r\n    >\r\n      {PieChart}\r\n      {SocialGraph}\r\n    </div>\r\n    <div style={{ width: \"100%\", height: \"20px\" }}></div>\r\n    <div\r\n      style={{\r\n        boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\r\n        backgroundColor: themeColor.card?.card_bg,\r\n      }}\r\n      className=\"p-2 rounded-3\"\r\n    >\r\n      <div className=\"row\">{MixChart}</div>\r\n      <Widget src=\"lord1.near/widget/header-dynamic\" props={generaltheme} />\r\n\r\n      <div className=\"row\">{Nodes}</div>\r\n    </div>\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/NearSocial.Explorer", "fact_widget_deployments_id": "5c1af0dd4ca43c8d6a1989327eb454ad", "inserted_timestamp": "2024-03-09T20:25:22.845Z", "modified_timestamp": "2024-03-09T20:25:22.845Z", "__row_index": 0}