{"tx_hash": "DWq97PNP9xKjE1cUK978yHRqVWwfhfpPzXXJ7Tf4Damm", "action_id_social": "5GbH53fgexBeDn8dQqztutVsuphErfw82GLkYp5gPyMx-0-widget", "block_id": 112542389, "block_timestamp": "2024-02-10T14:14:00.163Z", "signer_id": "lord1.near", "widget_name": "column-stack-chart", "source_code": "const themeColor = props.themeColor;\r\nconst theme = themeColor?.chart\r\n  ? {\r\n      title: {\r\n        style: {\r\n          color: themeColor.chart?.title,\r\n        },\r\n      },\r\n      subtitle: {\r\n        style: {\r\n          color: themeColor.chart?.subtitle,\r\n        },\r\n      },\r\n      xAxis: { labels: { style: { color: themeColor.chart?.xAxis } } },\r\n      yAxis: { labels: { style: { color: themeColor.chart?.yAxis } } },\r\n\r\n      legend: {\r\n        itemStyle: {\r\n          color: themeColor.chart?.legend,\r\n        },\r\n        itemHoverStyle: {\r\n          color: themeColor.chart?.legendHover,\r\n        },\r\n      },\r\n    }\r\n  : {};\r\nconst data = props.data ?? { categories: [], series: [] };\r\nlet colors = props.colors ?? [\r\n  \"#A084E8\",\r\n  \"#6F61C0\",\r\n  \"#241468\",\r\n  \"#9F0D7F\",\r\n  \"#EA1179\",\r\n  \"#F79BD3\",\r\n];\r\nconst chartOption = {\r\n  yAxisTitle: \"y axis title\",\r\n  tooltipShare: true,\r\n  stacking: \"normal\",\r\n  dataLabels: false,\r\n  title: {\r\n    text: \"title text\",\r\n  },\r\n  subtitle: {\r\n    text: \"subtitle text\",\r\n  },\r\n  ...props.chartOption,\r\n};\r\nconst overrideOptions = props.overrideOptions || {};\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst other_colors = [\r\n  \"#1f77b4\",\r\n  \"#ff7f0e\",\r\n  \"#2ca02c\",\r\n  \"#d62728\",\r\n  \"#9467bd\",\r\n  \"#8c564b\",\r\n  \"#e377c2\",\r\n  \"#7f7f7f\",\r\n  \"#bcbd22\",\r\n  \"#17becf\",\r\n];\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(other_colors[i % other_colors.length]);\r\n  }\r\n}\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n}\r\nState.init({\r\n  isLoading: true,\r\n});\r\n\r\nconst code = `\r\n  <html>\r\n   <head>\r\n  <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"></script>\r\n  <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n  <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\r\n</head>\r\n\r\n<body>\r\n  <div id=\"container\">\r\n  </div>\r\n  <script>\r\n    window.addEventListener(\"message\", function(event) {}, false);\r\n\r\n    const formatNumber = (num) => {\r\n      if (num >= 1000000000) {\r\n        return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"b\";\r\n      }\r\n      if (num >= 1000000) {\r\n        return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"m\";\r\n      }\r\n      if (num >= 1000) {\r\n        return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"k\";\r\n      }\r\n      return num;\r\n    };\r\n\r\n    const handleMessage = (message) => {\r\n      const {\r\n        data,\r\n        colors,\r\n        chartOption,\r\n        overrideOptions,\r\n        theme\r\n      } = message;\r\n\r\n      const {\r\n        categories,\r\n        series\r\n      } = data\r\n      const titleChart = chartOption ?.title ?.text || ''\r\n      const subtitleChart = chartOption ?.subtitle ?.text || ''\r\n      const yAxisTitle = chartOption ?.yAxisTitle || ''\r\n      const tooltipShare = chartOption ?.tooltipShare\r\n      const stacking = chartOption ?.stacking || 'normal'\r\n      const dataLabels = chartOption.dataLabels ?? true \r\n\r\n\r\n\r\n      Highcharts.theme = theme;\r\n      Highcharts.setOptions(Highcharts.theme);\r\n     \r\n      const chart = Highcharts.chart('container', {\r\n        colors:colors,\r\n        chart: {\r\n          type: 'column',\r\n          backgroundColor: 'transparent'\r\n        },\r\n        title: {\r\n          text: titleChart,\r\n          align: 'left'\r\n        },\r\n        subtitle: {\r\n          text: subtitleChart,\r\n          align: 'left'\r\n        },\r\n        xAxis: {\r\n          categories: categories\r\n        },\r\n        yAxis: {\r\n          min: 0,\r\n          title: {\r\n            text: yAxisTitle\r\n          }\r\n        },\r\n        tooltip: {\r\n          pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',\r\n          shared: tooltipShare\r\n        },\r\n        plotOptions: {\r\n          column: {\r\n            stacking: stacking,\r\n            dataLabels: {\r\n              enabled: dataLabels,\r\n              format: '{point.percentage:.0f}%'\r\n            }\r\n          }\r\n        },\r\n        series: series,\r\n        noData: {\r\n          style: {\r\n            fontWeight: \"bold\",\r\n            fontSize: \"15px\",\r\n          },\r\n        },\r\n        ...overrideOptions\r\n      });\r\n      window.iFrameResizer.onMessage = () => {};\r\n    };\r\n\r\n     window.iFrameResizer = {\r\n      onMessage: handleMessage,\r\n    }; \r\n\r\n  </script>\r\n  </html>\r\n`;\r\n\r\nreturn (\r\n  <div\r\n    className=\"w-100 d-flex justify-content-center align-items-center\"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <>\r\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{\r\n            ...spinnerColors,\r\n          }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={{\r\n          data,\r\n          colors,\r\n          chartOption,\r\n          overrideOptions,\r\n          theme,\r\n        }}\r\n        onLoad={() => {\r\n          State.update({\r\n            isLoading: false,\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  </div>\r\n);\r\n\r\n//  props = {\r\n//   data: {\r\n//   categories : ['cat1','cat2'],\r\n//   series : [\r\n//     {\r\n//       name : 'series 1',\r\n//       data : [5 , 6]\r\n//     },\r\n//     {\r\n//       name : 'series 2',\r\n//       data : [55 , 16]\r\n//     }\r\n//   ]\r\n// }\r\n//\r\n//   colors: [\"blue\", \"red\"], //optional : tow colors\r\n// chartOption: {\r\n//     yAxisTitle: 'y axis title',\r\n//     tooltipShare: true,\r\n//     stacking: 'normal',\r\n//     dataLabels : false,\r\n//     title: {\r\n//       text: 'title'\r\n//     },\r\n//     subtitle: {\r\n//      text: 'subtitle'\r\n//     }\r\n// },\r\n//   spinnerColors: [], //optional : tow colors\r\n//   overrideOptions:{} // opt\r\n//   themeColor: {\r\n//     chart: { //optional\r\n//       title: \"red\",\r\n//       subtitle: \"blue\",\r\n//       xAxis: \"red\",\r\n//       yAxis: \"blue\",\r\n//       legend: \"green\",\r\n//       legendHover: \"blue\",\r\n//       rangeSelector: {\r\n//         labels: \"red\",\r\n//         inputColor: \"blue\",\r\n//         btn_bg: \"red\",\r\n//         btn_color: \"blue\",\r\n//         btn_hover_bg: \"red\",\r\n//         btn_hover_color: \"blue\",\r\n//         btn_active_bg: \"red\",\r\n//         btn_active_color: \"blue\",\r\n//       },\r\n//     },\r\n//   },\r\n// };\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/column-stack-chart", "fact_widget_deployments_id": "6cbbfb300a013b7333dc04821380b6b3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}