{"tx_hash": "DXzSMeGkDQiAYeFMoqe4kTxLWwDp2XjRodrXupNceNss", "action_id_social": "ENuGzR74s5Z7LvCrVguUktgZrRYzPoSDhom6YkL7keEG-0-widget", "block_id": 110110430, "block_timestamp": "2024-01-11T02:22:01.378Z", "signer_id": "lord1.near", "widget_name": "wrapped-nft-avax", "source_code": "const API_KEY = props.API_KEY;\r\nconst themeColor = props.themeColor;\r\nconst singer = props.singer;\r\nconst interval = props.interval || \"week\";\r\nconst queries = [\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 1,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"trxs\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\nwith \r\na as \r\n      (\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'sell' as action,\r\n            PLATFORM_NAME,\r\n            SELLER_ADDRESS,\r\n            BUYER_ADDRESS,\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE,\r\n            PRICE_USD,\r\n            case  when CURRENCY_ADDRESS= 'AVAX' then 'AVAX'\r\n                  when CURRENCY_ADDRESS= '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7' then 'WAVAX'\r\n                  when CURRENCY_ADDRESS= '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e' then 'USDC'\r\n                  end as  CURRENCY_SYMBOL,\r\n            CURRENCY_ADDRESS,\r\n            TOTAL_FEES,\r\n            PLATFORM_FEE,\r\n            CREATOR_FEE\r\n      from avalanche.nft.ez_nft_sales \r\n      where  SELLER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'buy' as action,\r\n            PLATFORM_NAME,\r\n            SELLER_ADDRESS,\r\n            BUYER_ADDRESS,\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE,\r\n            PRICE_USD,\r\n            case  when CURRENCY_ADDRESS= 'AVAX' then 'AVAX'\r\n                  when CURRENCY_ADDRESS= '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7' then 'WAVAX'\r\n                  when CURRENCY_ADDRESS= '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e' then 'USDC'\r\n                  end as  CURRENCY_SYMBOL,\r\n            CURRENCY_ADDRESS,\r\n            TOTAL_FEES,\r\n            PLATFORM_FEE,\r\n            CREATOR_FEE\r\n\r\n      from avalanche.nft.ez_nft_sales \r\n      where  BUYER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n\r\n\r\n\r\n)\r\n\r\nselect \r\n      PLATFORM_NAME  as \"platform\",\r\n      count(distinct TX_HASH) as \"trxs\",\r\n      round(sum(PRICE_USD)) as \"usd\",\r\n      round(sum(PLATFORM_FEE),1) as \"fee\",\r\n      count(distinct BLOCK_TIMESTAMP::date) as \"date\",\r\n      count(distinct PROJECT_NAME) as \"collection\",\r\n      round(sum(case when action='buy' then (PRICE_USD) else 0 end)) as \"buy_usd\",\r\n      round(sum(case when action='sell' then (PRICE_USD) else 0 end)) as \"sell_usd\",\r\n      count(distinct (case when action='buy' then TX_HASH  end)) as \"buy_trxs\",\r\n      count(distinct (case when action='sell' then TX_HASH  end)) as \"sell_trxs\"\r\nfrom a\r\ngroup by 1 `,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 2,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"trxs\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\nwith \r\nbb as \r\n      (\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE || ' (sell)' as EVENT_TYPE ,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n      from avalanche.nft.ez_nft_sales \r\n      where  SELLER_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE || ' (buy)' as EVENT_TYPE ,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_sales \r\n      where  BUYER_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            'transfer (' || EVENT_TYPE||')' as EVENT_TYPE ,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_FROM_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n      and EVENT_TYPE='mint'\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            'transfer (' || EVENT_TYPE||')' as EVENT_TYPE ,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_TO_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n      and EVENT_TYPE='mint'\r\n)\r\n,b as (\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            'transfer (' || EVENT_TYPE||')' as EVENT_TYPE ,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_FROM_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n      and tx_hash not in (select distinct tx_hash from bb )\r\n      and EVENT_TYPE ='other'\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            'transfer (' || EVENT_TYPE||')' as EVENT_TYPE ,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_TO_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n      and tx_hash not in (select distinct tx_hash from bb )\r\n      and EVENT_TYPE='other'\r\n\r\n)\r\n, c as (\r\nselect * from bb \r\nunion all \r\nselect * from b \r\n)\r\nselect \r\n      EVENT_TYPE as \"type\",\r\n      count(distinct TX_HASH) as \"trxs\",\r\n      round(sum(coalesce(PRICE_USD,0))) as \"usd\",\r\n      count(distinct PROJECT_NAME ) as \"collection\"\r\n\r\n\r\nfrom c\r\ngroup by 1  `,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 3,\r\n\r\n    query: `\r\nwith \r\na as \r\n      (\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'sell' as action,\r\n            PLATFORM_NAME,\r\n            SELLER_ADDRESS,\r\n            BUYER_ADDRESS,\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE,\r\n            PRICE_USD,\r\n            case  when CURRENCY_ADDRESS= 'AVAX' then 'AVAX'\r\n                  when CURRENCY_ADDRESS= '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7' then 'WAVAX'\r\n                  when CURRENCY_ADDRESS= '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e' then 'USDC'\r\n                  end as  CURRENCY_SYMBOL,\r\n            CURRENCY_ADDRESS,\r\n            TOTAL_FEES,\r\n            PLATFORM_FEE,\r\n            CREATOR_FEE\r\n      from avalanche.nft.ez_nft_sales \r\n      where  SELLER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'buy' as action,\r\n            PLATFORM_NAME,\r\n            SELLER_ADDRESS,\r\n            BUYER_ADDRESS,\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE,\r\n            PRICE_USD,\r\n            case  when CURRENCY_ADDRESS= 'AVAX' then 'AVAX'\r\n                  when CURRENCY_ADDRESS= '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7' then 'WAVAX'\r\n                  when CURRENCY_ADDRESS= '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e' then 'USDC'\r\n                  end as  CURRENCY_SYMBOL,\r\n            CURRENCY_ADDRESS,\r\n            TOTAL_FEES,\r\n            PLATFORM_FEE,\r\n            CREATOR_FEE\r\n\r\n      from avalanche.nft.ez_nft_sales \r\n      where  BUYER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n\r\n\r\n\r\n)\r\n\r\nselect \r\n      PROJECT_NAME  as \"collection\",\r\n      count(distinct TX_HASH) as \"trxs\",\r\n      round(sum(PRICE_USD)) as \"usd\",\r\n      round(sum(PLATFORM_FEE),1) as \"pfee\",\r\n      round(sum(CREATOR_FEE),1) as \"cfee\",\r\n      count(distinct PLATFORM_NAME ) as \"platform\",\r\n      round(sum(case when action='buy' then (PRICE_USD) else 0 end)) as \"buy_usd\",\r\n      round(sum(case when action='sell' then (PRICE_USD) else 0 end)) as \"sell_usd\",\r\n      count(distinct (case when action='buy' then TX_HASH  end)) as \"buy_trxs\",\r\n      count(distinct (case when action='sell' then TX_HASH  end)) as \"sell_trxs\"\r\n\r\nfrom a\r\ngroup by 1 \r\n`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 4,\r\n    query: `\r\n\r\nwith \r\nbb as \r\n      (\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'sell' as action,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n      from avalanche.nft.ez_nft_sales \r\n      where  SELLER_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'buy' as action,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_sales \r\n      where  BUYER_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'transfer' as action,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_FROM_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'transfer' as action,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_TO_ADDRESS  ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n)\r\n\r\nselect \r\n      count(distinct BLOCK_TIMESTAMP::date) as \"timestamp\",\r\n      count(distinct PROJECT_NAME ) as \"nft_contract_id\" ,\r\n      count(distinct TX_HASH) as \"count\" ,\r\n      COALESCE(round(sum( PRICE_USD),2),0) as \"price\"\r\n\r\nfrom bb `,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 5,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\nwith \r\na as \r\n      (\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'sell' as action,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n      from avalanche.nft.ez_nft_sales \r\n      where  SELLER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'buy' as action,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_sales \r\n      where  BUYER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'transfer' as action,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_FROM_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'transfer' as action,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_TO_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n)\r\n\r\nselect \r\n      split(BLOCK_TIMESTAMP,' ')[0] as \"date\",\r\n      EVENT_TYPE as \"event\",\r\n      ACTION as \"action\",\r\n      PROJECT_NAME as \"project\",\r\n      TOKENID as \"id\",\r\n      round(PRICE_USD,1) as \"usd\",\r\n      \"from\",\r\n      \"to\",\r\n      TX_HASH as \"trxs\"\r\n\r\nfrom a`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 6,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"asc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\n\r\nwith \r\na as \r\n      (\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'sell' as action,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n      from avalanche.nft.ez_nft_sales \r\n      where  SELLER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'buy' as action,\r\n            BUYER_ADDRESS as \"from\",\r\n            SELLER_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_sales \r\n      where  BUYER_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'transfer' as action,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_FROM_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\nunion all \r\n\r\n\r\nselect \r\n            BLOCK_TIMESTAMP,\r\n            TX_HASH,\r\n            EVENT_TYPE,\r\n            'transfer' as action,\r\n            NFT_FROM_ADDRESS as \"from\",\r\n            NFT_TO_ADDRESS as \"to\",\r\n            PROJECT_NAME,\r\n            TOKENID,\r\n            null as PRICE_USD\r\n\r\n      from avalanche.nft.ez_nft_transfers\r\n      where  NFT_TO_ADDRESS ='{{singer}}'\r\n      and BLOCK_TIMESTAMP::date>'2023-01-01'\r\n\r\n)\r\n\r\nselect \r\n      date_part(epoch, date_trunc('{{week}}',BLOCK_TIMESTAMP)) as \"date\",\r\n      count(distinct TX_HASH) as \"hash\" ,\r\n      round(sum((PRICE_USD)),1) as \"usd\"\r\n\r\nfrom a\r\ngroup by 1 `,\r\n  },\r\n];\r\n\r\n//---------------------------------------------------------------------------------------------------\r\nconst tabs = {\r\n  left: \"Platform activity\",\r\n  middle: \"Collection activity\",\r\n};\r\nconst setTab = (tab) => State.update({ tab });\r\nconst Container = styled.div`\r\n  && {\r\n    text-align: left;\r\n  }\r\n  .tabContent {\r\n    display: inline-flex;\r\n    align-items: left;\r\n    background: rgba(26, 46, 51, 0.25);\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    padding: 3px 4px;\r\n    list-style-type: none;\r\n    margin: 0 auto;\r\n  }\r\n  .tab-item .active {\r\n    background: #304352;\r\n  }\r\n  .tab-item button {\r\n    background-color: transparent;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    color: #fff;\r\n    height: 30px;\r\n    padding: 0 22px;\r\n    border: none;\r\n  }\r\n`;\r\n//---------------------------------------------------------------------------------------------------\r\nconst formatNumber = (num) => {\r\n  if (num >= 1000000000) {\r\n    return (num / 1000000000).toFixed(2).replace(/\\.0$/, \"\") + \"b\";\r\n  }\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(2).replace(/\\.0$/, \"\") + \"m\";\r\n  }\r\n  if (num >= 1000) {\r\n    return (num / 1000).toFixed(2).replace(/\\.0$/, \"\") + \"k\";\r\n  }\r\n\r\n  if (num < 1000 && num > 0.0001) {\r\n    return (Math.round(num * 1000) / 1000).toFixed(3) + \"\";\r\n  }\r\n\r\n  return num;\r\n};\r\nconst general_theme = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"NFT \",\r\n  fontsize: \"35px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Transactions\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst tabelabove = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"\",\r\n  fontsize: \"30px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"Activity\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst chartabove = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Action \",\r\n  fontsize: \"30px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"Info\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst tabletop = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"NFT \",\r\n  fontsize: \"30px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"Trend\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst transactions = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Transactions\",\r\n  description: `${formatNumber(state.result.query4?.data[0]?.count) || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst date = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Active Days\",\r\n  description: `${state.result.query4?.data[0]?.timestamp || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst contract = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Total Collections\",\r\n  description: `${state.result.query4?.data[0]?.nft_contract_id || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst volume = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Trade Volume\",\r\n  description: `${formatNumber(state.result.query4?.data[0]?.price) || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n\r\n// state ####################################\r\n\r\nState.init({\r\n  searchedSinger: \"\",\r\n  searchedInterval: \"\",\r\n  result: {},\r\n  //loader: [],\r\n  isLoading: false,\r\n  error: [],\r\n  queriesRuned: false,\r\n  tab: tabs.left,\r\n});\r\n\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === singer && state.searchedInterval === interval) {\r\n    return;\r\n  } else {\r\n    State.update({\r\n      searchedSinger: singer,\r\n      searchedInterval: interval,\r\n      //loader: [],\r\n      loader: false,\r\n      result: {},\r\n      isLoading: true,\r\n      queriesRuned: false,\r\n    });\r\n  }\r\n  return true;\r\n};\r\nif (checkNewSinger()) {\r\n  return <div>loading...</div>;\r\n}\r\ncheckNewSinger();\r\n// handle hashed data #############################\r\nconst handleHasedData = ({ hash, id }) => {\r\n  if (state.result[\"query\" + id].isDone) return;\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`query ${id}: ${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: true,\r\n          data: null,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    const filteredData = result.data.filter(\r\n      (row) => row.SINGER === state.searchedSinger\r\n    );\r\n    State.update({\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: filteredData,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n// handle runed data ###################################\r\nconst createQuery = (queries, singer, interval) => {\r\n  const queriesArr = queries.map((q) => {\r\n    const queryWithProps = q.query\r\n      .replaceAll(\"{{singer}}\", singer)\r\n      .replaceAll(\"{{week}}\", interval);\r\n    q.query = queryWithProps;\r\n    return q;\r\n  });\r\n  return queriesArr;\r\n};\r\nconst isAllDataLoaded = () => {\r\n  const resultArr = Object.entries(state.result);\r\n  if (resultArr.length === 0) return false;\r\n  return resultArr.every((query) => {\r\n    return !query[1].isLoading;\r\n  });\r\n};\r\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\r\n  State.update(({ result, loader }) => {\r\n    const newResult = {\r\n      ...result,\r\n      [`query${id}`]: {\r\n        data:\r\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\r\n        error: !!error,\r\n        isLoading: isLoading,\r\n        queryRunId: queryRunId,\r\n        id: id,\r\n      },\r\n    };\r\n    //const newLoader = loader.filter(({ id: loaderId }) => loaderId !== id);\r\n    if (error) {\r\n      const queryError = `query${id} : ${error}`;\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        //loader: newLoader.length === 0 ? [] : newLoader,\r\n        error: [...state.error, queryError],\r\n      };\r\n    } else {\r\n      if (data) {\r\n        Storage.set(\r\n          `${state.searchedSinger}-${state.searchedInterval}-${id}`,\r\n          queryRunId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        // ...(data && { loader: newLoader.length === 0 ? [] : newLoader }),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst runqueries = (queries) => {\r\n  if (state.searchedSinger.length === 0) {\r\n    State.update({\r\n      isLoading: false,\r\n      error: [...state.error, \"singer is not provided\"],\r\n    });\r\n    return;\r\n  }\r\n\r\n  const queriesArr = createQuery(\r\n    queries,\r\n    state.searchedSinger,\r\n    state.searchedInterval\r\n  );\r\n  const loader = queriesArr.map((q) => {\r\n    const queryRunId = Storage.get(\r\n      `${state.searchedSinger}-${state.searchedInterval}-${q.id}`\r\n    );\r\n    const props = {\r\n      apiKey: API_KEY,\r\n      id: q.id,\r\n      query: q.query,\r\n      onResult: updateResultState,\r\n      firstReqTime: q.firstReqTime,\r\n      queryRunId,\r\n      queryOption: {\r\n        page: {\r\n          number: 1,\r\n          size: 1000,\r\n        },\r\n        cacheTime: 60,\r\n        ...q?.queryOption,\r\n      },\r\n    };\r\n    return {\r\n      id: q.id,\r\n      element: (\r\n        <Widget src=\"lord1.near/widget/api-flipside\" id={q.id} props={props} />\r\n      ),\r\n    };\r\n  });\r\n  State.update({\r\n    loader: loader,\r\n    isLoading: true,\r\n    queriesRuned: true,\r\n  });\r\n};\r\n\r\nif (isAllDataLoaded()) {\r\n  State.update({ isLoading: false });\r\n}\r\n\r\nif (state.isLoading) {\r\n  const withHashQueries = [];\r\n  const withoutHashQueries = [];\r\n  queries.forEach(({ hash, id, query, ...other }) => {\r\n    if (hash) {\r\n      withHashQueries.push({ hash, id });\r\n    }\r\n    if (query) {\r\n      withoutHashQueries.push({ query, hash, id, ...other });\r\n    }\r\n  });\r\n  withHashQueries.forEach((query) => handleHasedData(query));\r\n  if (!state.queriesRuned) {\r\n    runqueries(withoutHashQueries);\r\n  }\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n// get props charts #######################################\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const groupedData = {};\r\n  for (const item of data) {\r\n    const keyValue = item[key];\r\n    const valueValue = item[value];\r\n\r\n    if (groupedData[keyValue]) {\r\n      groupedData[keyValue] += valueValue;\r\n    } else {\r\n      groupedData[keyValue] = valueValue;\r\n    }\r\n  }\r\n\r\n  const dataFormat = Object.entries(groupedData).map(\r\n    ([groupKey, groupValue]) => [groupKey, groupValue]\r\n  );\r\n\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\n// dom sections ##############################################\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst ChartIsLoading = (queryId) => (\r\n  <div\r\n    className={`w-100 ${\r\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\r\n    }`}\r\n  >\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\n\r\nconst CardIsLoading = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\n\r\nlet TableLeft = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.tab === tabs.left ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-4 overflow-auto\"\r\n    >\r\n      {CardIsLoading(1)}\r\n      {CardHasError(1)}\r\n      {state.result[\"query\" + 1]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 1]?.data,\r\n            rowsCount: 6,\r\n            columns: [\r\n              { title: \"Platform\", key: \"platform\", colors: \"#806ce1\" },\r\n              { title: \"Transaction Number\", key: \"trxs\", round: \"yes\" },\r\n              { title: \"Volume (USD)\", key: \"usd\", round: \"yes\" },\r\n              { title: \"Platform_fee (Avax)\", key: \"fee\", round: \"yes\" },\r\n              { title: \"Active days\", key: \"date\" },\r\n              { title: \"Collection Numbers\", key: \"collection\" },\r\n              {\r\n                title: \"Buy Volume (USD)\",\r\n                key: \"buy_usd\",\r\n                colors: \"#806ce1\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Sell Volume (USD)\",\r\n                key: \"sell_usd\",\r\n                colors: \"#334a93\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Buy Trxs\",\r\n                key: \"buy_trxs\",\r\n                colors: \"#806ce1\",\r\n                round: \"yes\",\r\n              },\r\n              {\r\n                title: \"Sell Trxs\",\r\n                key: \"sell_trxs\",\r\n                colors: \"#334a93\",\r\n                round: \"yes\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet TableMiddle = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n      display: state.tab === tabs.middle ? \"\" : \"none\",\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-4 overflow-auto\"\r\n    >\r\n      {CardIsLoading(3)}\r\n      {CardHasError(3)}\r\n      {state.result[\"query\" + 3]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 3]?.data,\r\n            rowsCount: 6,\r\n            columns: [\r\n              { title: \"Collection\", key: \"collection\", colors: \"#806ce1\" },\r\n              { title: \"Transactions\", key: \"trxs\", round: \"yes\" },\r\n              { title: \"Volume (USD)\", key: \"usd\", round: \"yes\" },\r\n              { title: \"Platform Fee\", key: \"pfee\", round: \"yes\" },\r\n              { title: \"Creator Fee\", key: \"cfee\", round: \"yes\" },\r\n              { title: \"Platform\", key: \"platform\" },\r\n              { title: \"Buy USD\", key: \"buy_usd\", round: \"yes\" },\r\n              { title: \"Sell USD\", key: \"sell_usd\", round: \"yes\" },\r\n              { title: \"Buy Trxs\", key: \"buy_trxs\", round: \"yes\" },\r\n              { title: \"Sell Trxs\", key: \"sell_trxs\", round: \"yes\" },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet BelowRight = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-4 overflow-auto\"\r\n    >\r\n      {CardIsLoading(5)}\r\n      {CardHasError(5)}\r\n      {state.result[\"query\" + 5]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 5]?.data,\r\n            rowsCount: 10,\r\n            columns: [\r\n              { title: \"Timestamp\", key: \"date\" },\r\n              { title: \"Type\", key: \"event\", colors: \"#334a93\" },\r\n              { title: \"Action\", key: \"action\", colors: \"#806ce1\" },\r\n              { title: \"Collection\", key: \"project\", colors: \"#334a93\" },\r\n              { title: \"Token ID\", key: \"id\" },\r\n              { title: \"USD\", key: \"usd\" },\r\n              { title: \"Sender/Buyer\", key: \"from\" },\r\n              { title: \"Receiver/Seller\", key: \"to\" },\r\n              {\r\n                title: \"Transaction\",\r\n                key: \"trxs\",\r\n                link: \"yes\",\r\n                beforehref: \"https://avascan.info/blockchain/c/tx/\",\r\n                afterhref: \"\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet TopTable = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-4 overflow-auto\"\r\n    >\r\n      {CardIsLoading(2)}\r\n      {CardHasError(2)}\r\n      {state.result[\"query\" + 2]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 2]?.data,\r\n            rowsCount: 6,\r\n            columns: [\r\n              { title: \"Action\", key: \"type\", colors: \"#806ce1\" },\r\n              { title: \"Transaction Number\", key: \"trxs\", round: \"yes\" },\r\n              { title: \"Volume (USD)\", key: \"usd\", round: \"yes\" },\r\n              { title: \"Collections\", key: \"collection\" },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\nlet ChartSections = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div className=\" col-12\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2\"\r\n      >\r\n        {ChartIsLoading(6)}\r\n        {ChartHasError(6)}\r\n        {state.result[\"query\" + 6]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/mix-chart\"\r\n            props={getMixProps(\r\n              state.result[\"query\" + 6]?.data,\r\n              \"date\",\r\n              [\r\n                {\r\n                  key: \"hash\",\r\n                  seriesName: \"Transaction\",\r\n                  type: \"spline\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"usd\",\r\n                  seriesName: \"Volume(USD)\",\r\n                  type: \"column\",\r\n                  id: 2,\r\n                },\r\n              ],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"\",\r\n                subtitle: `Number of transactions `,\r\n                stacking: \"normal\",\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nreturn (\r\n  <>\r\n    {state.loader && (\r\n      <div className=\"d-none\">\r\n        {state.loader.map((l) => (\r\n          <pre key={l.id}>{l?.element}</pre>\r\n        ))}\r\n      </div>\r\n    )}\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            key={er}\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div\r\n      className=\"w-100\"\r\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\r\n    >\r\n      <div className=\"w-100\">\r\n        <div className=\"w-100 py-2\"></div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={transactions}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={volume} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={date} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={contract}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={chartabove}\r\n                />\r\n                <div>{TopTable} </div>\r\n              </div>\r\n              <div className=\"col-md-8\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={tabelabove}\r\n                />\r\n                <Container>\r\n                  <ul className=\"tabContent\">\r\n                    {Object.values(tabs).map((tab) => (\r\n                      <li key={tab} className=\"tab-item\">\r\n                        <button\r\n                          className={`${state.tab === tab ? \"active\" : \"\"}`}\r\n                          aria-current=\"page\"\r\n                          onClick={() => setTab(tab)}\r\n                        >\r\n                          {tab}\r\n                        </button>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </Container>\r\n                <div>\r\n                  <div className=\"content\">\r\n                    {TableLeft}\r\n                    {TableMiddle}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={tabletop} />\r\n              <div className=\"col-md-12\"> {ChartSections} </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <Widget\r\n              src=\"lord1.near/widget/header-dynamic\"\r\n              props={general_theme}\r\n            />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\"> {BelowRight} </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-nft-avax", "fact_widget_deployments_id": "9067f8a7d11d7918b60d98cc73163cd9", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}