{"tx_hash": "19jxWu5cKTqhaS5jg2aZwSbL2Cz2bCoxZMDMNs8igHN", "action_id_social": "DYUs68QFu1yAcpaeQfPmF4E7qViBAUM4HeZvN1LbFL3k-0-widget", "block_id": 107324516, "block_timestamp": "2023-12-07T01:51:05.426Z", "signer_id": "lord1.near", "widget_name": "Explorer-Social", "source_code": "const API_KEY = \"6d48c4c0-eb41-4e4b-ae4d-ba1148f01fb8\";\nconst singer = \"lord1.near\";\n\nconst queries = [\n  {\n    hash: null,\n    firstReqTime: 20,\n    id: 1,\n    queryOption: {\n      sortBy: [\n        {\n          column: \"User\",\n          direction: \"desc\",\n        },\n      ],\n    },\n    query: `with \nusers_posts as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\n    from near.social.fact_posts    \n    where BLOCK_TIMESTAMP::date> '2023-01-01'\n\n    ),\n\nusers_comments as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):text as comment, \n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='comment' and comment is not null    \n    and BLOCK_TIMESTAMP::date> '2023-01-01'\n\n    ),\n\nusers_repost as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions as a, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='repost'    and BLOCK_TIMESTAMP::date> '2023-01-01'\n\n    ),\n\nusers_follow as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='graph'    \n        and BLOCK_TIMESTAMP::date> '2023-01-01'\n)\n\n    select BLOCK_TIMESTAMP, user,\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\n    where lower(type) in ('follow', 'unfollow')),\n\nusers_pokes as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):key as type, \n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where TRY_PARSE_JSON(l.value):key='poke'\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\n\n    ),\n\nusers_like as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):value:type as type, \n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='like' and type in ('like')\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\n\n    ),\n\n\nusers_hashtags as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='hashtag'    \n        and BLOCK_TIMESTAMP::date> '2023-01-01'\n\n        )\n\n    select BLOCK_TIMESTAMP, user,\n    TRY_PARSE_JSON(l.value):key as hashtag, \n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\n\nusers_premium as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \n    TO_TIMESTAMP(l.value) as expire_date\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \n        left join near.core.fact_actions_events_function_call b\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\n    ),\n\nusers_activities as (\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_addkey_events\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_decoded_actions\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_posts\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_profile_changes\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_widget_deployments),\n\nusers_min as (\n    select user, min(BLOCK_TIMESTAMP) as min_date\n    from users_activities\n    group by 1),\n\nposts as (\n    select user, count(*) as posts\n    from users_posts\n    group by 1 \n    ), \n\nsent_comments as (\n    select user, count(*) as sent_comments\n    from users_comments\n    group by 1 \n    ), \n\nreceived_comments as (\n    select accountId, count(*) as received_comments\n    from users_comments\n    group by 1 \n    ), \n\nsent_reposts as (\n    select user, count(*) as sent_reposts\n    from users_repost\n    group by 1 \n    ), \n\nreceived_reposts as (\n    select accountId, count(*) as received_reposts\n    from users_repost\n    group by 1 \n    ),\n\nfollowings as (\n    select user, count(*) as followings\n    from users_follow\n    where rank=1 and type ilike'follow'\n    group by 1 \n    ), \n\nfollowers as (\n    select accountId, count(*) as followers\n    from users_follow\n    where rank=1 and type ilike 'follow'\n    group by 1 \n    ), \n\nsent_pokes as (\n    select user, count(*) as sent_pokes\n    from users_pokes\n    group by 1 \n    ), \n\nreceived_pokes as (\n    select accountId, count(*) as received_pokes\n    from users_pokes\n    group by 1 \n    ),\n\nsent_likes as (\n    select user, count(*) as sent_likes\n    from users_like\n    where rank=1 and type='like'\n    group by 1 \n    ), \n\nreceived_likes as (\n    select accountId, count(*) as received_likes\n    from users_like\n    where rank=1 \n    group by 1 \n    ), \n\nhashtags as (\n    select user, count(distinct hashtag) as hashtags\n    from users_hashtags\n    group by 1 \n    ), \n\nwidgets as (\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\n    from near.social.fact_widget_deployments\n    group by 1 \n    ),\n\nusers_stats as (\n    select  a.user as user,\n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\n    widgets, min_date\n    from users_min a\n    \n    left join users_premium b \n    on a.user=b.user and expire_date>=current_date\n    \n    left join posts up\n    on a.user=up.user\n    \n    left join sent_comments uc_s\n    on a.user=uc_s.user\n    left join received_comments uc_r\n    on a.user=uc_r.accountId\n    \n    left join sent_reposts ur_s\n    on a.user=ur_s.user\n    left join received_reposts ur_r\n    on a.user=ur_r.accountId\n    \n    left join followings uf_s\n    on a.user=uf_s.user \n    left join followers uf_r\n    on a.user=uf_r.accountId \n    \n    left join sent_pokes up_s\n    on a.user=up_s.user \n    left join received_pokes up_r\n    on a.user=up_r.accountId\n    \n    left join sent_likes ul_s\n    on a.user=ul_s.user\n    left join received_likes ul_r\n    on a.user=ul_r.accountId \n    \n    left join hashtags uh\n    on a.user=uh.user\n    \n    \n    left join widgets uw\n    on a.user=uw.user)\n\nselect \n    user as \"User\",\n     COALESCE(followers,0) as \"followers\",\n     COALESCE(followings,0) as \"followings\",\n     COALESCE(posts,0) as \"posts\",\n     COALESCE(sent_reposts,0) as \"reposts\",\n     COALESCE(received_reposts,0) as \"received_reposts\",\n     COALESCE(sent_comments,0) as \"comments\",\n     COALESCE(received_comments,0) as \"received_comments\",\n     COALESCE(sent_likes,0) as \"likes\",\n     COALESCE(received_likes,0) as \"received_likes\",\n     COALESCE(sent_pokes,0) as \"pokes\",\n     COALESCE(received_pokes,0) as \"received_pokes\",\n     COALESCE(hashtags,0) as \"hashtags\",\n     COALESCE(widgets,0) as \"widgets\",\n     split(min_date::date,'T')[0] as \"join_date\"\nfrom users_stats\nwhere user ='{{singer}}'`,\n  },\n  {\n    hash: null,\n    firstReqTime: 20,\n    id: 2,\n    queryOption: {\n      sortBy: [\n        {\n          column: \"favorite_score\",\n          direction: \"desc\",\n        },\n      ],\n    },\n    query: ` with \nusers_posts as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\n    from near.social.fact_posts\n    where BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_comments as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):text as comment, \n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='comment' and comment is not null\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_repost as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions as a, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='repost'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_follow as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='graph'\n        and BLOCK_TIMESTAMP>='2023-01-01')\n\n    select BLOCK_TIMESTAMP, user,\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\n    where type in ('follow', 'unfollow')),\n\nusers_pokes as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):key as type, \n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where TRY_PARSE_JSON(l.value):key='poke'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_like as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):value:type as type, \n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='like' and type in ('like')\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\n\nusers_hashtags as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='hashtag'\n        and BLOCK_TIMESTAMP>='2023-01-01')\n\n    select BLOCK_TIMESTAMP, user,\n    TRY_PARSE_JSON(l.value):key as hashtag, \n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\n\nusers_premium as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \n    TO_TIMESTAMP(l.value) as expire_date\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \n        left join near.core.fact_actions_events_function_call b\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_activities as (\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_addkey_events\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_decoded_actions\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_posts\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_profile_changes\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_widget_deployments),\n\nusers_min as (\n    select user, min(BLOCK_TIMESTAMP) as min_date\n    from users_activities\n    group by 1),\n\nposts as (\n    select user, count(*) as posts\n    from users_posts\n    group by 1 \n    ), \n\nsent_comments as (\n    select user, count(*) as sent_comments\n    from users_comments\n    group by 1 \n    ), \n\nreceived_comments as (\n    select accountId, count(*) as received_comments\n    from users_comments\n    where user='{{singer}}'\n    group by 1 \n    ), \n\nsent_reposts as (\n    select user, count(*) as sent_reposts\n    from users_repost\n    group by 1 \n    ), \n\nreceived_reposts as (\n    select accountId, count(*) as received_reposts\n    from users_repost\n    where user='{{singer}}'\n    group by 1 \n    ),\n\nfollowings as (\n    select user, count(*) as followings\n    from users_follow\n    where rank=1 and type='follow'\n    group by 1 \n    ), \n\nfollowers as (\n    select accountId, count(*) as followers\n    from users_follow\n    where rank=1 and type='follow'\n    group by 1 \n    ), \n\nsent_pokes as (\n    select user, count(*) as sent_pokes\n    from users_pokes\n    group by 1 \n    ), \n\nreceived_pokes as (\n    select accountId, count(*) as received_pokes\n    from users_pokes\n    where user='{{singer}}'\n    group by 1 \n    ),\n\nsent_likes as (\n    select user, count(*) as sent_likes\n    from users_like\n    where rank=1 and type='like'\n    group by 1 \n    ), \n\nreceived_likes as (\n    select accountId, count(*) as received_likes\n    from users_like\n    where user='{{singer}}'\n    and rank=1 \n    group by 1 \n    ), \n\nhashtags as (\n    select user, count(distinct hashtag) as hashtags\n    from users_hashtags\n    group by 1 \n    ), \n\nwidgets as (\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\n    from near.social.fact_widget_deployments\n    where BLOCK_TIMESTAMP>='2023-01-01'\n    group by 1 \n    ),\n\nusers_stats as (\n    select  a.user  as user, \n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\n    widgets, min_date\n    from users_min a\n    \n    left join users_premium b \n    on a.user=b.user and expire_date>=current_date\n    \n    left join posts up\n    on a.user=up.user\n    \n    left join sent_comments uc_s\n    on a.user=uc_s.user\n    left join received_comments uc_r\n    on a.user=uc_r.accountId\n    \n    left join sent_reposts ur_s\n    on a.user=ur_s.user\n    left join received_reposts ur_r\n    on a.user=ur_r.accountId\n    \n    left join followings uf_s\n    on a.user=uf_s.user \n    left join followers uf_r\n    on a.user=uf_r.accountId \n    \n    left join sent_pokes up_s\n    on a.user=up_s.user \n    left join received_pokes up_r\n    on a.user=up_r.accountId\n    \n    left join sent_likes ul_s\n    on a.user=ul_s.user\n    left join received_likes ul_r\n    on a.user=ul_r.accountId \n    \n    left join hashtags uh\n    on a.user=uh.user\n    \n    \n    left join widgets uw\n    on a.user=uw.user)\n\nselect user as \"user\",\nCOALESCE(received_reposts,0) as \"received_reposts\",\nCOALESCE(received_comments,0) as \"received_comments\",\nCOALESCE(received_likes,0) as \"received_likes\",\nCOALESCE(received_pokes,0) as \"received_pokes\",\n-- 10 * IFNULL(posts, 0) +           -- Impact of posts\n2 * IFNULL(received_comments, 0) +  -- Impact of received comments\n3 * IFNULL(received_reposts, 0) +  -- Impact of received reposts\n0.1 * IFNULL(received_pokes, 0) + -- Impact of received pokes\n0.5 * IFNULL(received_likes, 0)  -- Impact of received likes\nAS \"favorite_score\"\nfrom users_stats\nwhere \"favorite_score\">0\norder by \"favorite_score\" desc \nlimit 200`,\n  },\n\n  {\n    hash: null,\n    firstReqTime: 20,\n    id: 3,\n    queryOption: {\n      sortBy: [\n        {\n          column: \"fan_score\",\n          direction: \"desc\",\n        },\n      ],\n    },\n    query: ` with \nusers_posts as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\n    from near.social.fact_posts\n    where BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_comments as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):text as comment, \n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='comment' and comment is not null\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_repost as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions as a, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='repost'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_follow as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='graph'\n        and BLOCK_TIMESTAMP>='2023-01-01')\n\n    select BLOCK_TIMESTAMP, user,\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\n    where type in ('follow', 'unfollow')),\n\nusers_pokes as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):key as type, \n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where TRY_PARSE_JSON(l.value):key='poke'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_like as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):value:type as type, \n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='like' and type in ('like')\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\n\nusers_hashtags as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='hashtag'\n        and BLOCK_TIMESTAMP>='2023-01-01')\n\n    select BLOCK_TIMESTAMP, user,\n    TRY_PARSE_JSON(l.value):key as hashtag, \n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\n\nusers_premium as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \n    TO_TIMESTAMP(l.value) as expire_date\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \n        left join near.core.fact_actions_events_function_call b\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_activities as (\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_addkey_events\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_decoded_actions\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_posts\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_profile_changes\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_widget_deployments),\n\nusers_min as (\n    select user, min(BLOCK_TIMESTAMP) as min_date\n    from users_activities\n    group by 1),\n\nposts as (\n    select user, count(*) as posts\n    from users_posts\n    group by 1 \n    ), \n\nsent_comments as (\n    select user, count(*) as sent_comments\n    from users_comments\n    where accountId='{{singer}}'\n    group by 1 \n    ), \n\nreceived_comments as (\n    select accountId, count(*) as received_comments\n    from users_comments\n    where user='{{singer}}'\n    group by 1 \n    ), \n\nsent_reposts as (\n    select user, count(*) as sent_reposts\n    from users_repost\n    where accountId='{{singer}}'\n    group by 1 \n    ), \n\nreceived_reposts as (\n    select accountId, count(*) as received_reposts\n    from users_repost\n    where user='{{singer}}'\n    group by 1 \n    ),\n\nfollowings as (\n    select user, count(*) as followings\n    from users_follow\n    where rank=1 and type='follow'\n    group by 1 \n    ), \n\nfollowers as (\n    select accountId, count(*) as followers\n    from users_follow\n    where rank=1 and type='follow'\n    group by 1 \n    ), \n\nsent_pokes as (\n    select user, count(*) as sent_pokes\n    from users_pokes\n    where accountId='{{singer}}'\n    group by 1 \n    ), \n\nreceived_pokes as (\n    select accountId, count(*) as received_pokes\n    from users_pokes\n    where user='{{singer}}'\n    group by 1 \n    ),\n\nsent_likes as (\n    select user, count(*) as sent_likes\n    from users_like\n    where rank=1 and type='like'\n    and accountId='{{singer}}'\n    group by 1 \n    ), \n\nreceived_likes as (\n    select accountId, count(*) as received_likes\n    from users_like\n    where user='{{singer}}'\n    and rank=1 \n    group by 1 \n    ), \n\nhashtags as (\n    select user, count(distinct hashtag) as hashtags\n    from users_hashtags\n    group by 1 \n    ), \n\nwidgets as (\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\n    from near.social.fact_widget_deployments\n    where BLOCK_TIMESTAMP>='2023-01-01'\n    group by 1 \n    ),\n\nusers_stats as (\n    select  a.user  as user, \n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\n    widgets, min_date\n    from users_min a\n    \n    left join users_premium b \n    on a.user=b.user and expire_date>=current_date\n    \n    left join posts up\n    on a.user=up.user\n    \n    left join sent_comments uc_s\n    on a.user=uc_s.user\n    left join received_comments uc_r\n    on a.user=uc_r.accountId\n    \n    left join sent_reposts ur_s\n    on a.user=ur_s.user\n    left join received_reposts ur_r\n    on a.user=ur_r.accountId\n    \n    left join followings uf_s\n    on a.user=uf_s.user \n    left join followers uf_r\n    on a.user=uf_r.accountId \n    \n    left join sent_pokes up_s\n    on a.user=up_s.user \n    left join received_pokes up_r\n    on a.user=up_r.accountId\n    \n    left join sent_likes ul_s\n    on a.user=ul_s.user\n    left join received_likes ul_r\n    on a.user=ul_r.accountId \n    \n    left join hashtags uh\n    on a.user=uh.user\n    \n    \n    left join widgets uw\n    on a.user=uw.user)\n\nselect user as \"user\",\nCOALESCE(sent_reposts,0) as \"reposts\",\nCOALESCE(sent_comments,0) as \"comments\",\nCOALESCE(sent_likes,0) as \"likes\",\nCOALESCE(sent_pokes,0) as \"pokes\",\n-- 10 * IFNULL(posts, 0) +           -- Impact of posts\n2 * IFNULL(sent_comments, 0) +  -- Impact of received comments\n3 * IFNULL(sent_reposts, 0) +  -- Impact of received reposts\n0.1 * IFNULL(sent_pokes, 0) + -- Impact of received pokes\n0.5 * IFNULL(sent_likes, 0)  -- Impact of received likes\nAS \"fan_score\"\nfrom users_stats\nwhere user!='{{singer}}' and \"fan_score\">0\norder by \"fan_score\" desc \nlimit 200`,\n  },\n\n  {\n    hash: null,\n    firstReqTime: 8,\n    id: 4,\n    queryOption: {\n      sortBy: [\n        {\n          column: \"date\",\n          direction: \"aesc\",\n        },\n      ],\n    },\n    query: ` with \nusers_posts as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\n    from near.social.fact_posts\n    where BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_comments as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):text as comment, \n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='comment' and comment is not null\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_repost as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\n    from near.social.fact_decoded_actions as a, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='repost'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_follow as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='graph'\n        and BLOCK_TIMESTAMP>='2023-01-01')\n\n    select BLOCK_TIMESTAMP, user,\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\n    where type in ('follow', 'unfollow')),\n\nusers_pokes as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):key as type, \n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where TRY_PARSE_JSON(l.value):key='poke'\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\nusers_like as (\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\n    TRY_PARSE_JSON(l.value):value:type as type, \n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\n    from near.social.fact_decoded_actions, \n    LATERAL FLATTEN(INPUT => NODE_DATA) l\n    where l.key='like' and type in ('like')\n    and BLOCK_TIMESTAMP>='2023-01-01'),\n\n\nusers_hashtags as (\n    with temp_data as (\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\n        from near.social.fact_decoded_actions, \n        LATERAL FLATTEN(INPUT => NODE_DATA) l\n        where l.key='hashtag'\n        and BLOCK_TIMESTAMP>='2023-01-01')\n\n    select BLOCK_TIMESTAMP, user,\n    TRY_PARSE_JSON(l.value):key as hashtag, \n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\n    from temp_data, \n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\n\n\nusers_activities as (\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_addkey_events\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_decoded_actions\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_posts\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_profile_changes\n    union \n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\n    from near.social.fact_widget_deployments),\n\nusers_min as (\n    select user, min(BLOCK_TIMESTAMP) as min_date\n    from users_activities\n    group by 1),\n\nposts as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\",user as \"User\", 'Post' as \"type\", count(*) as trxs\n    from users_posts\n    group by 1,2,3\n    ), \n\nsent_comments as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Comment' as \"type\",count(*) as trxs\n    from users_comments\n    group by 1,2,3\n    ), \n\nreceived_comments as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Received_Comment' as \"type\",count(*) as trxs\n    from users_comments\n    group by 1,2,3 \n    ), \n\nsent_reposts as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Repost' as \"type\",count(*) as trxs\n    from users_repost\n    group by 1,2,3 \n    ), \n\nreceived_reposts as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Receive_Repost' as \"type\",count(*) as trxs\n    from users_repost\n    group by 1,2,3 \n    ),\n\nfollow as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", user as \"User\", initcap(type) as \"type\", count(*) as trxs\n    from users_follow\n    where rank=1 and type='follow'\n    group by 1,2,3 \n    ),\n\nsent_pokes as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Poke' as \"type\",count(*) as trxs\n    from users_pokes\n    group by 1,2,3 \n    ), \n\nreceived_pokes as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Receive_Poke' as \"type\",count(*) as trxs\n    from users_pokes\n    group by 1,2,3 \n    ),\n\nsent_likes as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Like' as \"type\",count(*) as trxs\n    from users_like\n    where rank=1 and type='like'\n    group by 1,2,3 \n    ), \n\nreceived_likes as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Receive_Like' as \"type\", count(*) as trxs\n    from users_like\n    where rank=1 \n    group by 1,2,3\n    ), \n\nwidgets as (\n    select date_trunc(week,BLOCK_TIMESTAMP) as \"Date\", SIGNER_ID as \"User\", 'Widget' as \"type\",count(distinct TX_HASH) as trxs\n    from near.social.fact_widget_deployments\n    group by 1,2,3\n    )\n\n\n\n,final as \n      (\n      select * \n       from \n                (select * from posts\n                union all \n                select * from sent_comments\n                union all \n                select * from sent_reposts\n                union all \n                select * from received_comments\n                union all \n                select * from sent_reposts\n                union all \n                select * from received_reposts\n                union all \n                select * from follow\n                union all\n                select * from sent_pokes\n                union all \n                select * from received_pokes\n                union all \n                select * from sent_likes\n                union all \n                select * from received_likes\n                union all \n                select * from widgets\n                )\n      where \"User\"='{{singer}}' )\n\n\nselect \ndate_part(epoch,to_timestamp(\"Date\"::date)) as \"date\" ,\nsum(case when \"type\"='Like' then trxs else 0 end) as \"like\",\nsum(case when \"type\"='Post' then trxs else 0 end) as \"post\",\nsum(case when \"type\"='Received_Comment' then trxs else 0 end) as \"received_comment\",\nsum(case when \"type\"='Repost' then trxs else 0 end) as \"repost\",\nsum(case when \"type\"='Receive_Repost' then trxs else 0 end) as \"receive_repost\",\nsum(case when \"type\"='Poke' then trxs else 0 end) as \"poke\",\nsum(case when \"type\"='Receive_Poke' then trxs else 0 end) as \"receive_poke\",\nsum(case when \"type\"='Receive_Like' then trxs else 0 end) as \"receive_like\",\nsum(case when \"type\"='Widget' then trxs else 0 end) as \"widget\",\nsum(case when \"type\"='follow' then trxs else 0 end) as \"follow\"\nfrom final \ngroup by 1 \norder by \"date\" asc  \n`,\n  },\n];\nconst themeColor = props.themeColor;\n\n//---------------------------------------------------------------------------------------------------\n\nconst followers = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].followers,\n  brand: `Followers`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst followings = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].followings,\n  brand: `Followings`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst posts = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].posts,\n  brand: `Posts`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst reposts = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].reposts,\n  brand: `Reposts`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst comments = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].comments,\n  brand: `Comments`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst likes = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].likes,\n  brand: `Likes`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst pokes = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].pokes,\n  brand: `Pokes`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst widgets = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].widgets,\n  brand: `Widgets`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst hashtags = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].hashtags,\n  brand: `Hashtags`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst join_date = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].join_date,\n  brand: `Join Date`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst received_pokes = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].received_pokes,\n  brand: `Received`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"Pokes\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst received_likes = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].received_likes,\n  brand: `Received`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"Likes\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst received_comments = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].received_comments,\n  brand: `Received`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"Comments\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst received_reposts = {\n  height: \"80px\",\n  align: \"center\",\n  description: state.result[\"query\" + 1]?.data[0].received_reposts,\n  brand: `Received`,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"Reposts\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n//---------------------------------------------------------------------------------------------------\n\n// state ####################################\n\nState.init({\n  searchedSinger: \"\",\n  result: {},\n  loader: null,\n  isLoading: false,\n  error: [],\n  queriesRuned: false,\n});\n\nconst checkNewSinger = () => {\n  if (state.searchedSinger === singer) {\n    return;\n  } else {\n    State.update({\n      searchedSinger: singer,\n      loader: null,\n      result: {},\n      isLoading: true,\n      queriesRuned: false,\n    });\n  }\n};\ncheckNewSinger();\n// handle hashed data #############################\nconst handleHasedData = ({ hash, id }) => {\n  if (state.result[\"query\" + id].isDone) return;\n  const result = fetchData(hash);\n  if (result.isLoading) {\n    State.update({\n      isLoading: true,\n      result: {\n        ...state.result,\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\n      },\n    });\n  }\n  if (result.error) {\n    const errors = state.error;\n    errors.push(`query ${id}: ${result.error}`);\n    State.update({\n      error: errors,\n      result: {\n        ...state.result,\n        [\"query\" + id]: {\n          isLoading: false,\n          error: true,\n          data: null,\n          isDone: true,\n        },\n      },\n    });\n  }\n  if (result.data) {\n    const filteredData = result.data.filter(\n      (row) => row.SINGER === state.searchedSinger\n    );\n    State.update({\n      result: {\n        ...state.result,\n        [\"query\" + id]: {\n          isLoading: false,\n          error: false,\n          data: filteredData,\n          isDone: true,\n        },\n      },\n    });\n  }\n};\nconst fetchData = (hash) => {\n  const data = fetch(\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\n    {\n      subscribe: true,\n      method: \"GET\",\n      headers: {\n        Accept: \"*/*\",\n      },\n    }\n  );\n  const result = {\n    data: (data && data.body) || null,\n    error: (data && !data.ok && (data.status || data.error)) || null,\n    isLoading: !data && !error,\n  };\n  return result;\n};\n// handle runed data ###################################\nconst createQuery = (queries, singer) => {\n  const queriesArr = queries.map((q) => {\n    const queryWithSinger = q.query.replaceAll(\"{{singer}}\", singer);\n    q.query = queryWithSinger;\n    return q;\n  });\n  return queriesArr;\n};\nconst isAllDataLoaded = () => {\n  const resultArr = Object.entries(state.result);\n  if (resultArr.length === 0) return false;\n  return resultArr.every((query) => {\n    return !query[1].isLoading;\n  });\n};\n\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\n  State.update(({ result }) => {\n    const newResult = {\n      ...result,\n      [`query${id}`]: {\n        data:\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\n        error: !!error,\n        isLoading: isLoading,\n        queryRunId: queryRunId,\n        id: id,\n      },\n    };\n    if (error) {\n      const queryError = `query${id} : ${error}`;\n      return {\n        ...state,\n        result: { ...newResult },\n        loader: null,\n        error: [...state.error, queryError],\n      };\n    } else {\n      return {\n        ...state,\n        result: { ...newResult },\n        ...(data && { loader: null }),\n      };\n    }\n  });\n};\n\nconst runqueries = (queries) => {\n  if (state.searchedSinger.length === 0) {\n    State.update({\n      isLoading: false,\n      error: [...state.error, \"singer is not provided\"],\n    });\n    return;\n  }\n\n  const queriesArr = createQuery(queries, state.searchedSinger);\n  const loader = queriesArr.map((q) => {\n    const props = {\n      apiKey: API_KEY,\n      id: q.id,\n      query: q.query,\n      onResult: updateResultState,\n      firstReqTime: q.firstReqTime,\n      queryOption: {\n        page: {\n          number: 1,\n          size: 1000,\n        },\n        cacheTime: 60,\n        ...q?.queryOption,\n      },\n    };\n    return <Widget src=\"lord1.near/widget/api-flipside\" props={props} />;\n  });\n  State.update({\n    loader: loader,\n    isLoading: true,\n    queriesRuned: true,\n  });\n};\n\nif (isAllDataLoaded()) {\n  State.update({ isLoading: false });\n}\n\nif (state.isLoading) {\n  const withHashQueries = [];\n  const withoutHashQueries = [];\n  queries.forEach(({ hash, id, query, ...other }) => {\n    if (hash) {\n      withHashQueries.push({ hash, id });\n    }\n    if (query) {\n      withoutHashQueries.push({ query, hash, id, ...other });\n    }\n  });\n  withHashQueries.forEach((query) => handleHasedData(query));\n  if (!state.queriesRuned) {\n    runqueries(withoutHashQueries);\n  }\n}\n\n// error managment #######################\nif (state.error.length > 0) {\n  function hide() {\n    const errors = state.error;\n    errors.shift();\n    if (errors.length > 0) setTimeout(hide, 2500);\n    State.update({ error: errors });\n  }\n  setTimeout(hide, 2500);\n}\n\n// get props charts #######################################\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\n  data = data || [];\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const dataFormat = serieses.map((series) => {\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\n    return {\n      data: dataFormated,\n      name: series.seriesName,\n      type: series.type,\n      axisId: series.id,\n    };\n  });\n  const props = {\n    series: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      subtitle: \"chart subtitle\",\n      legend: true,\n      stacking: \"false\",\n      ...chartOption,\n    },\n    overrideOptions: {\n      plotOptions: {\n        column: {\n          stacking: \"false\",\n        },\n        series: {\n          dataGrouping: { enabled: false },\n        },\n      },\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nconst getPieProps = (data, [key, value], colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const groupedData = {};\n  for (const item of data) {\n    const keyValue = item[key];\n    const valueValue = item[value];\n\n    if (groupedData[keyValue]) {\n      groupedData[keyValue] += valueValue;\n    } else {\n      groupedData[keyValue] = valueValue;\n    }\n  }\n\n  const dataFormat = Object.entries(groupedData).map(\n    ([groupKey, groupValue]) => [groupKey, groupValue]\n  );\n\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      type: \"pie\",\n      legend: false,\n      connector: false,\n      ...chartOption,\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\n// dom sections ##############################################\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\nconst ChartIsLoading = (queryId) => (\n  <div\n    className={`w-100 ${\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\n    }`}\n  >\n    <Widget\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n      props={{ ...spinnerColors }}\n    />\n  </div>\n);\nconst ChartHasError = (queryId) =>\n  state.result?.[`query${queryId}`]?.error && (\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\n  );\n\nconst CardIsLoading = (queryId) =>\n  state.result?.[`query${queryId}`]?.isLoading && (\n    <div\n      className=\"d-flex flex-column gap-1\"\n      style={{\n        padding: \"60px 12px\",\n      }}\n    >\n      <Widget\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n        props={{\n          ...spinnerColors,\n        }}\n      />\n      <span\n        style={{\n          fontWeight: \"bold\",\n          fontsize: 15,\n          color: \"#4f46e5\",\n          textAlign: \"center\",\n        }}\n      >\n        Loading...\n      </span>\n    </div>\n  );\nconst CardHasError = (queryId) =>\n  state.result?.[`query${queryId}`]?.error && (\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\n      An error occurred for this section\n    </div>\n  );\n\nlet TableSection = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Widget\n                src=\"mob.near/widget/Profile.InlineBlock\"\n                props={{\n                  accountId: singer,\n                  themeColor: {\n                    profile_large: themeColor.profile_large,\n                  },\n                }}\n              />{\" \"}\n            </div>{\" \"}\n            <div className=\"col-md-4\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={join_date}\n              />{\" \"}\n            </div>{\" \"}\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={hashtags} />{\" \"}\n            </div>{\" \"}\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"row\">\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={followers}\n              />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={posts} />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={reposts} />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={comments} />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={likes} />{\" \"}\n            </div>{\" \"}\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={pokes} />{\" \"}\n            </div>{\" \"}\n          </div>{\" \"}\n          <div className=\"row\">\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={followings}\n              />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={widgets} />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={received_reposts}\n              />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={received_comments}\n              />{\" \"}\n            </div>\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={received_likes}\n              />{\" \"}\n            </div>{\" \"}\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={received_pokes}\n              />{\" \"}\n            </div>{\" \"}\n          </div>{\" \"}\n        </div>\n      </div>{\" \"}\n    </div>{\" \"}\n  </div>\n);\n\nlet TableLeft = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"p-2 rounded-4 overflow-auto\">\n      {state.result[\"query\" + 2]?.data && (\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.result[\"query\" + 2]?.data,\n            rowsCount: 5,\n            columns: [\n              {\n                title: \"User\",\n                key: \"user\",\n                colors: \"#806ce1\",\n                link: \"yes\",\n                hyperlink: \"yes\",\n                beforehref:\n                  \"https://near.social/mob.near/widget/ProfilePage?accountId=\",\n              },\n              {\n                title: \"Received Reposts\",\n                key: \"received_reposts\",\n              },\n              { title: \"Received Comments\", key: \"received_comments\" },\n              { title: \"Received Likes\", key: \"received_likes\" },\n              { title: \"Received Pokes\", key: \"received_pokes\" },\n              { title: \"Favorite Score\", key: \"favorite_score\" },\n            ],\n          }}\n        />\n      )}\n    </div>\n  </div>\n);\n\nlet TableRight = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"p-2 rounded-4 overflow-auto\">\n      {state.result[\"query\" + 3]?.data && (\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.result[\"query\" + 3]?.data,\n            rowsCount: 5,\n            columns: [\n              {\n                title: \"User\",\n                key: \"user\",\n                colors: \"#806ce1\",\n                link: \"yes\",\n                hyperlink: \"yes\",\n                beforehref:\n                  \"https://near.social/mob.near/widget/ProfilePage?accountId=\",\n              },\n              { title: \"Reposts\", key: \"reposts\" },\n              { title: \"comments\", key: \"comments\" },\n              { title: \"likes\", key: \"likes\" },\n              { title: \"Pokes\", key: \"pokes\" },\n              { title: \"Fan Score\", key: \"fan_score\" },\n            ],\n          }}\n        />\n      )}\n    </div>\n  </div>\n);\n\nlet ChartSections = (\n  <div className=\" col-12 col-md-12\">\n    <div className=\"py-2\"></div>\n    <div className=\" col-12\">\n      <div\n        style={{ background: themeColor?.sbt_area?.card_bg }}\n        className=\"shadow-sm rounded-2\"\n      >\n        {state.result[\"query\" + 4]?.data && (\n          <Widget\n            src=\"lord1.near/widget/mix-chart\"\n            props={getMixProps(\n              state.result[\"query\" + 4]?.data,\n              \"date\",\n              [\n                {\n                  key: \"like\",\n                  seriesName: \"Like\",\n                  type: \"column\",\n                  id: 1,\n                },\n                {\n                  key: \"received_comment\",\n                  seriesName: \"Received Comment\",\n                  type: \"column\",\n                  id: 1,\n                },\n                {\n                  key: \"post\",\n                  seriesName: \"Post\",\n                  type: \"column\",\n                  id: 1,\n                },\n                {\n                  key: \"repost\",\n                  seriesName: \"Repost\",\n                  type: \"column\",\n                  id: 1,\n                },\n                {\n                  key: \"receive_repost\",\n                  seriesName: \"Receive Repost\",\n                  type: \"spline\",\n                  id: 2,\n                },\n                {\n                  key: \"poke\",\n                  seriesName: \"Poke\",\n                  type: \"spline\",\n                  id: 2,\n                },\n                {\n                  key: \"receive_poke\",\n                  seriesName: \"Receive Poke\",\n                  type: \"spline\",\n                  id: 2,\n                },\n                {\n                  key: \"receive_like\",\n                  seriesName: \"Receive Like\",\n                  type: \"spline\",\n                  id: 1,\n                },\n                {\n                  key: \"widget\",\n                  seriesName: \"Widget\",\n                  type: \"spline\",\n                  id: 1,\n                },\n                {\n                  key: \"follow\",\n                  seriesName: \"Follow\",\n                  type: \"spline\",\n                  id: 1,\n                },\n              ],\n              themeColor.chartColor,\n              {\n                title: \"Activity\",\n                subtitle: `Number of transactions `,\n                stacking: \"normal\",\n              }\n            )}\n          />\n        )}\n      </div>\n    </div>\n  </div>\n);\nreturn (\n  <>\n    {state.loader && <div className=\"d-none\">{state.loader}</div>}\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\n      {state.error.length > 0 &&\n        state.error.map((er) => (\n          <div\n            className=\"toast show align-items-center text-bg-danger border-0\"\n            role=\"alert\"\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n          >\n            <div className=\"d-flex\">\n              <div className=\"toast-body\">{er}</div>\n            </div>\n          </div>\n        ))}\n    </div>\n    <div\n      className=\"w-100\"\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\n    >\n      <div className=\"w-100\">{ChartSections}</div>\n      <div className=\"w-100\">{TableSection}</div>\n      <div className=\"row\">\n        <div className=\"col-md-6\">{TableLeft}</div>{\" \"}\n        <div className=\"col-md-6\">{TableRight}</div>{\" \"}\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/Explorer-Social", "fact_widget_deployments_id": "66c09f58a3e69ddb56e34042c4d257f2", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}