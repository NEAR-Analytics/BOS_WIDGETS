{"tx_hash": "HzDnMqg94DBKNNLCcUZoaXRkSLGhvasRwXaTAid7qWvj", "action_id_social": "5ViiExE5i3wbNeRyRRfAJf1Fi6QpDuxAt4DecTFJysv4-0-widget", "block_id": 110138057, "block_timestamp": "2024-01-11T10:35:21.019Z", "signer_id": "lord1.near", "widget_name": "wrapped-transaction-jupiter", "source_code": "const API_KEY = props.API_KEY;\r\nconst themeColor = props.themeColor;\r\nconst singer = props.singer;\r\nconst interval = props.interval || \"week\";\r\nconst queries = [\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 1,\r\n    query: `\r\nwith \r\n    a AS (\r\n            select\r\n                  SWAPPER ,\r\n                  TX_ID ,\r\n                  block_timestamp,\r\n                  round(SWAP_FROM_AMOUNT,3) as SWAP_FROM_AMOUNT,\r\n                  C.SYMBOL as from_symbol,\r\n                  round(SWAP_TO_AMOUNT,3) as SWAP_TO_AMOUNT,\r\n                  B.SYMBOL  as to_symbol,\r\n                  case when SWAP_TO_AMOUNT*B.Close is not null then round(SWAP_TO_AMOUNT*B.Close,3)\r\n                  else round(SWAP_FROM_AMOUNT*C.Close,3) end as USD,\r\n                  split(Swap_program,' ')[2] as Swap_program,\r\n                  SUCCEEDED ,\r\n                  round(SWAP_TO_AMOUNT*B.Close - SWAP_From_AMOUNT*C.Close,2) as arbitrage \r\n            from solana.defi.fact_swaps\r\n                left join solana.price.ez_token_prices_hourly B on date_trunc('Hour',BLOCK_TIMESTAMP)=B.RECORDED_HOUR\r\n                    and SWAP_TO_MINT=B.TOKEN_ADDRESS\r\n                left join solana.price.ez_token_prices_hourly C on date_trunc('Hour',BLOCK_TIMESTAMP)=C.RECORDED_HOUR\r\n                    and SWAP_FROM_MINT=C.TOKEN_ADDRESS\r\n            where Swap_program like 'jupiter%' \r\n            )\r\n\r\nselect \r\nto_symbol as \"symbol\",\r\ncount(distinct TX_ID) as \"transaction\"\r\nfrom a\r\nwhere SWAPPER='{{singer}}'\r\nand SUCCEEDED ='true'\r\ngroup by 1`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 3,\r\n    query: `\r\nwith \r\n    a AS (\r\n            select\r\n                  SWAPPER ,\r\n                  TX_ID ,\r\n                  block_timestamp,\r\n                  round(SWAP_FROM_AMOUNT,3) as SWAP_FROM_AMOUNT,\r\n                  C.SYMBOL as from_symbol,\r\n                  round(SWAP_TO_AMOUNT,3) as SWAP_TO_AMOUNT,\r\n                  B.SYMBOL  as to_symbol,\r\n                  case when SWAP_TO_AMOUNT*B.Close is not null then round(SWAP_TO_AMOUNT*B.Close,3)\r\n                  else round(SWAP_FROM_AMOUNT*C.Close,3) end as USD,\r\n                  split(Swap_program,' ')[2] as Swap_program,\r\n                  SUCCEEDED ,\r\n                  round(SWAP_TO_AMOUNT*B.Close - SWAP_From_AMOUNT*C.Close,2) as arbitrage \r\n            from solana.defi.fact_swaps\r\n                left join solana.price.ez_token_prices_hourly B on date_trunc('Hour',BLOCK_TIMESTAMP)=B.RECORDED_HOUR\r\n                    and SWAP_TO_MINT=B.TOKEN_ADDRESS\r\n                left join solana.price.ez_token_prices_hourly C on date_trunc('Hour',BLOCK_TIMESTAMP)=C.RECORDED_HOUR\r\n                    and SWAP_FROM_MINT=C.TOKEN_ADDRESS\r\n            where Swap_program like 'jupiter%' \r\n            )\r\n\r\nselect \r\nfrom_symbol as \"symbol\",\r\ncount(distinct TX_ID) as \"transaction\"\r\nfrom a\r\nwhere SWAPPER='{{singer}}'\r\nand SUCCEEDED ='true'\r\ngroup by 1 `,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 4,\r\n    query: `\r\n  with \r\n    a AS (\r\n            select\r\n                  SWAPPER ,\r\n                  TX_ID ,\r\n                  block_timestamp,\r\n                  round(SWAP_FROM_AMOUNT,3) as SWAP_FROM_AMOUNT,\r\n                  C.SYMBOL as from_symbol,\r\n                  round(SWAP_TO_AMOUNT,3) as SWAP_TO_AMOUNT,\r\n                  B.SYMBOL  as to_symbol,\r\n                  case when SWAP_TO_AMOUNT*B.Close is not null then round(SWAP_TO_AMOUNT*B.Close,3)\r\n                  else round(SWAP_FROM_AMOUNT*C.Close,3) end as USD,\r\n                  split(Swap_program,' ')[2] as Swap_program,\r\n                  SUCCEEDED ,\r\n                  round(SWAP_TO_AMOUNT*B.Close - SWAP_From_AMOUNT*C.Close,2) as arbitrage \r\n            from solana.defi.fact_swaps\r\n                left join solana.price.ez_token_prices_hourly B on date_trunc('Hour',BLOCK_TIMESTAMP)=B.RECORDED_HOUR\r\n                    and SWAP_TO_MINT=B.TOKEN_ADDRESS\r\n                left join solana.price.ez_token_prices_hourly C on date_trunc('Hour',BLOCK_TIMESTAMP)=C.RECORDED_HOUR\r\n                    and SWAP_FROM_MINT=C.TOKEN_ADDRESS\r\n            where Swap_program like 'jupiter%' \r\n            )\r\n\r\nselect \r\n      \r\n  SWAPPER as \"signer\",\r\n  split(min(block_timestamp)::date,'T')[0] as \"min_time\" ,\r\n  split(max(block_timestamp)::date,'T')[0] as \"max_time\" ,\r\n  count(DISTINCT date_trunc('day', block_timestamp)) as \"active_days\",\r\n  count(DISTINCT date_trunc('month', block_timestamp)) as \"active_month\",\r\n  count(DISTINCT date_trunc('year', block_timestamp)) as \"active_year\" ,\r\n----------------------------------------------------------------------\r\n  count(DISTINCT TX_ID) as \"transactions\",\r\n  sum(case when SUCCEEDED = 'true' then 1 end )as \"success\" ,\r\n----------------------------------------------------------------------\r\n  round(sum(ARBITRAGE ),2) as \"fee_near\",\r\n  round((\"fee_near\"/\"transactions\"),3) as \"avg_gas_per_trx\" ,\r\n----------------------------------------------------------------------\r\n  round(sum(USD),2) as \"volume\",\r\n  round((\"volume\"/\"transactions\"),2) as \"avg_volume_per_trx\" ,\r\n  count (distinct SWAP_PROGRAM)  as \"project\"\r\n \r\nfrom a\r\nwhere SWAPPER='{{singer}}'\r\ngroup by 1 `,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 5,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"asc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\nwith \r\n    a AS (\r\n            select\r\n                  SWAPPER as \"swapper\" ,\r\n                  TX_ID as \"trxs\",\r\n                  BLOCK_TIMESTAMP,\r\n                  case when (SWAP_TO_AMOUNT*B.Close is not null ) then round(SWAP_TO_AMOUNT*B.Close,3)\r\n                  else round(SWAP_FROM_AMOUNT*C.Close,3) end as \"usd\",\r\n                  SUCCEEDED,\r\n                  coalesce(round(SWAP_TO_AMOUNT*B.Close - SWAP_From_AMOUNT*C.Close,2),0) as \"arbitrage\" \r\n            from solana.defi.fact_swaps\r\n                left join solana.price.ez_token_prices_hourly B on date_trunc('Hour',BLOCK_TIMESTAMP)=B.RECORDED_HOUR\r\n                    and SWAP_TO_MINT=B.TOKEN_ADDRESS\r\n                left join solana.price.ez_token_prices_hourly C on date_trunc('Hour',BLOCK_TIMESTAMP)=C.RECORDED_HOUR\r\n                    and SWAP_FROM_MINT=C.TOKEN_ADDRESS\r\n            where Swap_program like 'jupiter%' \r\n            )\r\n\r\nselect \r\n      date_part(epoch, date_trunc('{{week}}',BLOCK_TIMESTAMP::date)) as \"date\" ,\r\n      count(distinct \"trxs\") as \"hash\" ,\r\n      round(sum(\"usd\"),3) as \"usd\"\r\nfrom a\r\nwhere \"swapper\"='{{singer}}'\r\nand SUCCEEDED='true'\r\n  GROUP BY 1 \r\n  order by 1 asc \r\n`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 6,\r\n    query: `\r\n with \r\n    a AS (\r\n            select\r\n                  SWAPPER ,\r\n                  TX_ID ,\r\n                  block_timestamp,\r\n                  round(SWAP_FROM_AMOUNT,3) as SWAP_FROM_AMOUNT,\r\n                  C.SYMBOL as from_symbol,\r\n                  round(SWAP_TO_AMOUNT,3) as SWAP_TO_AMOUNT,\r\n                  B.SYMBOL  as to_symbol,\r\n                  case when SWAP_TO_AMOUNT*B.Close is not null then round(SWAP_TO_AMOUNT*B.Close,3)\r\n                  else round(SWAP_FROM_AMOUNT*C.Close,3) end as USD,\r\n                  split(Swap_program,' ')[2] as Swap_program,\r\n                  SUCCEEDED ,\r\n                  round(SWAP_TO_AMOUNT*B.Close - SWAP_From_AMOUNT*C.Close,2) as arbitrage \r\n            from solana.defi.fact_swaps\r\n                left join solana.price.ez_token_prices_hourly B on date_trunc('Hour',BLOCK_TIMESTAMP)=B.RECORDED_HOUR\r\n                    and SWAP_TO_MINT=B.TOKEN_ADDRESS\r\n                left join solana.price.ez_token_prices_hourly C on date_trunc('Hour',BLOCK_TIMESTAMP)=C.RECORDED_HOUR\r\n                    and SWAP_FROM_MINT=C.TOKEN_ADDRESS\r\n            where Swap_program like 'jupiter%' \r\n            )\r\n\r\nselect \r\n      'Jupiter '||SWAP_PROGRAM||'\ud83e\ude90' as \"version\",\r\n      sum(round(ARBITRAGE,1))||' USD' as \"arbitrage\",\r\n      sum(round(USD))||' USD' as \"volume\",\r\n      count(distinct TX_ID) as \"transactions\",\r\n      count(distinct from_symbol) as \"from_symbol\",\r\n      count(distinct to_symbol) as \"to_symbol\",\r\n      count(DISTINCT date_trunc('day', block_timestamp)) as \"active_days\",\r\n      count(DISTINCT date_trunc('month', block_timestamp)) as \"active_month\"\r\nfrom a\r\nwhere SWAPPER='{{singer}}'\r\ngroup by 1 order by 1\r\n`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 7,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\n with \r\n    a AS (\r\n            select\r\n                  SWAPPER as \"swapper\" ,\r\n                  TX_ID as \"trxs\",\r\n                  split(block_timestamp::date,'T')[0] as \"date\",\r\n                  round(SWAP_FROM_AMOUNT,3) as \"swap_from_amount\",\r\n                  initcap(coalesce(C.SYMBOL,'Unknown')) as \"from_symbol\",\r\n                  round(SWAP_TO_AMOUNT,3) as \"swap_to_amount\",\r\n                  initcap(coalesce(B.SYMBOL,'Unknown'))  as \"to_symbol\",\r\n                  case when (SWAP_TO_AMOUNT*B.Close is not null ) then round(SWAP_TO_AMOUNT*B.Close,3)\r\n                  else round(SWAP_FROM_AMOUNT*C.Close,3) end as \"usd\",\r\n                  split(Swap_program,' ')[2] as \"swap_program\",\r\n                  case when SUCCEEDED='true' then '\u2705' else '\u274c' end as \"success\",\r\n                  coalesce(round(SWAP_TO_AMOUNT*B.Close - SWAP_From_AMOUNT*C.Close,2),0) as \"arbitrage\" \r\n            from solana.defi.fact_swaps\r\n                left join solana.price.ez_token_prices_hourly B on date_trunc('Hour',BLOCK_TIMESTAMP)=B.RECORDED_HOUR\r\n                    and SWAP_TO_MINT=B.TOKEN_ADDRESS\r\n                left join solana.price.ez_token_prices_hourly C on date_trunc('Hour',BLOCK_TIMESTAMP)=C.RECORDED_HOUR\r\n                    and SWAP_FROM_MINT=C.TOKEN_ADDRESS\r\n            where Swap_program like 'jupiter%' \r\n            )\r\n\r\nselect \r\n*\r\nfrom a\r\nwhere \"swapper\"='{{singer}}'\r\n`,\r\n  },\r\n];\r\n\r\n//---------------------------------------------------------------------------------------------------\r\nconst tabs = {\r\n  left: \"nft activity\",\r\n  middle: \"token activity\",\r\n};\r\nconst setTab = (tab) => State.update({ tab });\r\nconst Container = styled.div`\r\n  && {\r\n    text-align: left;\r\n  }\r\n  .tabContent {\r\n    display: inline-flex;\r\n    align-items: left;\r\n    background: rgba(26, 46, 51, 0.25);\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    padding: 3px 4px;\r\n    list-style-type: none;\r\n    margin: 0 auto;\r\n  }\r\n  .tab-item .active {\r\n    background: #304352;\r\n  }\r\n  .tab-item button {\r\n    background-color: transparent;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    color: #fff;\r\n    height: 30px;\r\n    padding: 0 22px;\r\n    border: none;\r\n  }\r\n`;\r\n//---------------------------------------------------------------------------------------------------\r\nconst formatNumber = (num) => {\r\n  if (num >= 1000000000) {\r\n    return (num / 1000000000).toFixed(2).replace(/\\.0$/, \"\") + \"b\";\r\n  }\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(2).replace(/\\.0$/, \"\") + \"m\";\r\n  }\r\n  if (num >= 1000) {\r\n    return (num / 1000).toFixed(2).replace(/\\.0$/, \"\") + \"k\";\r\n  }\r\n\r\n  if (num < 1000 && num > 0.0001) {\r\n    return (Math.round(num * 1000) / 1000).toFixed(3) + \"\";\r\n  }\r\n\r\n  return num;\r\n};\r\n\r\nconst engagement = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Version\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Engagement\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst scan = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Transaction\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Scan\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst general_theme = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Activity\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Trend\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst general_theme2 = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"Based on Transaction Number\",\r\n  brand: \"Symbol\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Out\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst general_theme1 = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"Based on Transaction Number\",\r\n  brand: \"Symbol\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"In\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n//----------------------------------------\r\nconst formatNumbertransactions = (num) => {\r\n  if (num >= 100) {\r\n    return \"3%\";\r\n  }\r\n\r\n  if (num < 100 && num >= 50) {\r\n    return \"6%\";\r\n  }\r\n  if (num < 50 && num >= 20) {\r\n    return \"14%\";\r\n  }\r\n  if (num < 20 && num >= 10) {\r\n    return \"25%\";\r\n  }\r\n  if (num < 10 && num >= 3) {\r\n    return \"75%\";\r\n  }\r\n  if (num < 3 && num >= 0) {\r\n    return \"(No)\";\r\n  }\r\n  return num;\r\n};\r\nconst formatNumbervolume = (num) => {\r\n  if (num >= 10000) {\r\n    return \"8%\";\r\n  }\r\n  if (num < 10000 && num >= 1000) {\r\n    return \"25%\";\r\n  }\r\n  if (num < 1000 && num >= 50) {\r\n    return \"60%\";\r\n  }\r\n\r\n  if (num < 50 && num >= 0) {\r\n    return \"(No)\";\r\n  }\r\n  return num;\r\n};\r\nconst formatNumberfee_near = (num) => {\r\n  if (num >= 10) {\r\n    return \"5%\";\r\n  }\r\n  if (num < 10 && num >= 1) {\r\n    return \"30%\";\r\n  }\r\n  if (num < 1 && num >= 0) {\r\n    return \"(No)\";\r\n  }\r\n  return num;\r\n};\r\nconst formatNumberproject = (num) => {\r\n  if (num >= 5) {\r\n    return \"1%\";\r\n  }\r\n  if (num < 5 && num >= 3) {\r\n    return \"8%\";\r\n  }\r\n  if (num < 3 && num >= 2) {\r\n    return \"25%\";\r\n  }\r\n  if (num < 2 && num >= 1) {\r\n    return \"75%\";\r\n  }\r\n  if (num < 1 && num >= 0) {\r\n    return \"(No)\";\r\n  }\r\n  return num;\r\n};\r\nconst transactions1 = {\r\n  height: \"70px\",\r\n  align: \"center\",\r\n  brand: \"Among the top \",\r\n  description: \"\",\r\n  fontsize: \"18px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: `${\r\n    formatNumbertransactions(state.result.query4?.data[0]?.transactions) || \"0\"\r\n  }`,\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst onHandelId = (id) => {\r\n  let customId = \"\";\r\n  if (id.length > 20) {\r\n    customId += id.substring(0, 5);\r\n    customId += \"...\";\r\n    customId += id.substring(id.length - 3);\r\n    return customId;\r\n  } else {\r\n    return id;\r\n  }\r\n};\r\nconst hellosinger = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Hello\",\r\n  description: \"Thank you for being a valued user of Jupiter throughout 2023\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: `${onHandelId(state.result.query4?.data[0]?.signer) || \"Jupion\"}`,\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst date1 = {\r\n  height: \"70px\",\r\n  align: \"center\",\r\n  brand: \"Among the top \",\r\n  description: \"\",\r\n  fontsize: \"18px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: `${\r\n    formatNumberfee_near(state.result.query4?.data[0]?.fee_near) || \"0\"\r\n  }`,\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst contract1 = {\r\n  height: \"70px\",\r\n  align: \"center\",\r\n  brand: \"Among the top \",\r\n  description: \"\",\r\n  fontsize: \"18px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: `${\r\n    formatNumberproject(state.result.query4?.data[0]?.project) || \"0\"\r\n  }`,\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst volume1 = {\r\n  height: \"70px\",\r\n  align: \"center\",\r\n  brand: \"Among the top \",\r\n  description: \"\",\r\n  fontsize: \"18px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: `${\r\n    formatNumbervolume(state.result.query4?.data[0]?.volume) || \"0\"\r\n  }`,\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n}; //-------------------------------------------------------\r\nconst transactions = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Transactions\",\r\n  description: `${\r\n    formatNumber(state.result.query4?.data[0]?.transactions) || \"0\"\r\n  }`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst date = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Slippage\",\r\n  description: `${state.result.query4?.data[0]?.fee_near || \"0\"}` + \" USD\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst contract = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Engagement\",\r\n  description: `${state.result.query4?.data[0]?.project || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst volume = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Trade Volume\",\r\n  description:\r\n    `${formatNumber(state.result.query4?.data[0]?.volume) || \"0\"}` + \" USD\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst max_time = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Last Transaction\",\r\n  description: `${state.result.query4?.data[0]?.max_time || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst active_month = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Active Month\",\r\n  description: `${state.result.query4?.data[0]?.active_month || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst active_days = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Active Days\",\r\n  description: `${state.result.query4?.data[0]?.active_days || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst min_time = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"First Transactions\",\r\n  description: `${state.result.query4?.data[0]?.min_time || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n\r\n// state ####################################\r\n\r\nState.init({\r\n  searchedSinger: \"\",\r\n  searchedInterval: \"\",\r\n  result: {},\r\n  loader: false,\r\n  isLoading: false,\r\n  error: [],\r\n  queriesRuned: false,\r\n  tab: tabs.left,\r\n});\r\n\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === singer && state.searchedInterval === interval) {\r\n    return false;\r\n  } else {\r\n    State.update({\r\n      searchedSinger: singer,\r\n      searchedInterval: interval,\r\n      loader: false,\r\n      result: {},\r\n      isLoading: true,\r\n      queriesRuned: false,\r\n    });\r\n  }\r\n  return true;\r\n};\r\n\r\nif (checkNewSinger()) {\r\n  return <div>loading...</div>;\r\n}\r\n// handle hashed data #############################\r\nconst handleHasedData = ({ hash, id }) => {\r\n  if (state.result[\"query\" + id].isDone) return;\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`query ${id}: ${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: true,\r\n          data: null,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    const filteredData = result.data.filter(\r\n      (row) => row.SINGER === state.searchedSinger\r\n    );\r\n    State.update({\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: filteredData,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n// handle runed data ###################################\r\nconst createQuery = (queries, singer, interval) => {\r\n  const queriesArr = queries.map((q) => {\r\n    const queryWithProps = q.query\r\n      .replaceAll(\"{{singer}}\", singer)\r\n      .replaceAll(\"{{week}}\", interval);\r\n    q.query = queryWithProps;\r\n    return q;\r\n  });\r\n  return queriesArr;\r\n};\r\nconst isAllDataLoaded = () => {\r\n  const resultArr = Object.entries(state.result);\r\n  if (resultArr.length === 0) return false;\r\n  return resultArr.every((query) => {\r\n    return !query[1].isLoading;\r\n  });\r\n};\r\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\r\n  State.update(({ result }) => {\r\n    const newResult = {\r\n      ...result,\r\n      [`query${id}`]: {\r\n        data:\r\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\r\n        error: !!error,\r\n        isLoading: isLoading,\r\n        queryRunId: queryRunId,\r\n        id: id,\r\n      },\r\n    };\r\n    if (error) {\r\n      const queryError = `query${id} : ${error}`;\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        error: [...state.error, queryError],\r\n      };\r\n    } else {\r\n      if (data) {\r\n        Storage.set(\r\n          `${state.searchedSinger}-${state.searchedInterval}-${id}`,\r\n          queryRunId\r\n        );\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst runqueries = (queries) => {\r\n  if (state.searchedSinger.length === 0) {\r\n    State.update({\r\n      isLoading: false,\r\n      error: [...state.error, \"singer is not provided\"],\r\n    });\r\n    return;\r\n  }\r\n\r\n  const queriesArr = createQuery(\r\n    queries,\r\n    state.searchedSinger,\r\n    state.searchedInterval\r\n  );\r\n  const loader = queriesArr.map((q) => {\r\n    const queryRunId = Storage.get(\r\n      `${state.searchedSinger}-${state.searchedInterval}-${q.id}`\r\n    );\r\n    const props = {\r\n      apiKey: API_KEY,\r\n      id: q.id,\r\n      query: q.query,\r\n      onResult: updateResultState,\r\n      firstReqTime: q.firstReqTime,\r\n      queryRunId,\r\n      queryOption: {\r\n        page: {\r\n          number: 1,\r\n          size: 1000,\r\n        },\r\n        cacheTime: 60,\r\n        ...q?.queryOption,\r\n      },\r\n    };\r\n    return {\r\n      id: q.id,\r\n      element: (\r\n        <Widget src=\"lord1.near/widget/api-flipside\" id={q.id} props={props} />\r\n      ),\r\n    };\r\n  });\r\n  State.update({\r\n    loader: loader,\r\n    isLoading: true,\r\n    queriesRuned: true,\r\n  });\r\n};\r\n\r\nif (isAllDataLoaded()) {\r\n  State.update({ isLoading: false });\r\n}\r\n\r\nif (state.isLoading) {\r\n  const withHashQueries = [];\r\n  const withoutHashQueries = [];\r\n  queries.forEach(({ hash, id, query, ...other }) => {\r\n    if (hash) {\r\n      withHashQueries.push({ hash, id });\r\n    }\r\n    if (query) {\r\n      withoutHashQueries.push({ query, hash, id, ...other });\r\n    }\r\n  });\r\n  withHashQueries.forEach((query) => handleHasedData(query));\r\n  if (!state.queriesRuned) {\r\n    runqueries(withoutHashQueries);\r\n  }\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n// get props charts #######################################\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const groupedData = {};\r\n  for (const item of data) {\r\n    const keyValue = item[key];\r\n    const valueValue = item[value];\r\n\r\n    if (groupedData[keyValue]) {\r\n      groupedData[keyValue] += valueValue;\r\n    } else {\r\n      groupedData[keyValue] = valueValue;\r\n    }\r\n  }\r\n\r\n  const dataFormat = Object.entries(groupedData).map(\r\n    ([groupKey, groupValue]) => [groupKey, groupValue]\r\n  );\r\n\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\n// dom sections ##############################################\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst ChartIsLoading = (queryId) => (\r\n  <div\r\n    className={`w-100 ${\r\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\r\n    }`}\r\n  >\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\n\r\nconst CardIsLoading = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\nlet TableLeft = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-4 overflow-auto\"\r\n    >\r\n      {CardIsLoading(6)}\r\n      {CardHasError(6)}\r\n      {state.result[\"query\" + 6]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 6]?.data,\r\n            rowsCount: 6,\r\n            columns: [\r\n              { title: \"Version\", key: \"version\", colors: \"#806ce1\" },\r\n              { title: \"Transactions\", key: \"transactions\", round: \"yes\" },\r\n              { title: \"Volume\", key: \"volume\", round: \"yes\" },\r\n              { title: \"Slippage\", key: \"arbitrage\" },\r\n              { title: \"Symbol In\", key: \"from_symbol\" },\r\n              { title: \"Symbol Out\", key: \"to_symbol\" },\r\n              { title: \"Active Days\", key: \"active_days\" },\r\n              { title: \"Active Month\", key: \"active_month\" },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\nlet TableScan = (\r\n  <div\r\n    style={{\r\n      background: themeColor?.sbt_area?.section_bg,\r\n    }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-4 overflow-auto\"\r\n    >\r\n      {CardIsLoading(7)}\r\n      {CardHasError(7)}\r\n      {state.result[\"query\" + 7]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 7]?.data,\r\n            rowsCount: 10,\r\n            columns: [\r\n              { title: \"Timestamp\", key: \"date\", colors: \"#806ce1\" },\r\n\r\n              { title: \"Version\", key: \"swap_program\" },\r\n              { title: \"Success\", key: \"success\" },\r\n              { title: \"Symbol In\", key: \"from_symbol\", colors: \"#806ce1\" },\r\n              { title: \"Amount In\", key: \"swap_from_amount\", round: \"yes\" },\r\n              { title: \"Symbol Out\", key: \"to_symbol\", colors: \"#806ce1\" },\r\n              { title: \"Amount Out\", key: \"swap_to_amount\", round: \"yes\" },\r\n              { title: \"Volume\", key: \"usd\", colors: \"#806ce1\" },\r\n              { title: \"Slippage\", key: \"arbitrage\" },\r\n              {\r\n                title: \"Transactions\",\r\n                key: \"trxs\",\r\n                link: \"yes\",\r\n                beforehref: \"https://solscan.io/tx/\",\r\n                afterhref: \"\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\nlet TableMiddle = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-2 overflow-auto\"\r\n    >\r\n      {CardIsLoading(3)}\r\n      {CardHasError(3)}\r\n      {state.result[\"query\" + 3]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/Pie-chart\"\r\n          props={getPieProps(\r\n            state.result[\"query\" + 3]?.data,\r\n            [\"symbol\", \"transaction\"],\r\n            themeColor.chartColor,\r\n            {\r\n              title: \"\",\r\n              type: \"pie\",\r\n              connector: true,\r\n              legend: true,\r\n            }\r\n          )}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet BelowMiddle = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div\r\n      style={{ background: themeColor?.sbt_area?.card_bg }}\r\n      className=\"shadow-sm rounded-2 overflow-auto\"\r\n    >\r\n      {CardIsLoading(1)}\r\n      {CardHasError(1)}\r\n      {state.result[\"query\" + 1]?.data &&\r\n        (state.result[\"query\" + 1]?.data.length > 0 ? (\r\n          <Widget\r\n            src=\"lord1.near/widget/Pie-chart\"\r\n            props={getPieProps(\r\n              state.result[\"query\" + 1]?.data,\r\n              [\"symbol\", \"transaction\"],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"\",\r\n                type: \"pie\",\r\n                connector: true,\r\n                legend: true,\r\n              }\r\n            )}\r\n          />\r\n        ) : (\r\n          noData\r\n        ))}\r\n    </div>\r\n  </div>\r\n);\r\nconst Right = styled.div`\r\n  padding: 2px;\r\n  margin-bottom: 10px;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst H5 = styled.h5`\r\n  color: ${themeColor.election?.textColor};\r\n  text-align: center;\r\n`;\r\nconst ChartContainer = styled.div`\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    transition: transform 0.5s;\r\n  }\r\n`;\r\n\r\nlet ChartSections = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div className=\" col-12\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2\"\r\n      >\r\n        {ChartIsLoading(5)}\r\n        {ChartHasError(5)}\r\n        {state.result[\"query\" + 5]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/mix-chart\"\r\n            props={getMixProps(\r\n              state.result[\"query\" + 5]?.data,\r\n              \"date\",\r\n              [\r\n                {\r\n                  key: \"hash\",\r\n                  seriesName: \"Transaction\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"usd\",\r\n                  seriesName: \"Volume(USD)\",\r\n                  type: \"spline\",\r\n                  id: 2,\r\n                },\r\n              ],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"\",\r\n                subtitle: `Number of transactions `,\r\n                stacking: \"normal\",\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nreturn (\r\n  <>\r\n    {state.loader && (\r\n      <div className=\"d-none\">\r\n        {state.loader.map((l) => (\r\n          <pre key={l.id}>{l?.element}</pre>\r\n        ))}\r\n      </div>\r\n    )}\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            key={er}\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div\r\n      className=\"w-100\"\r\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\r\n    >\r\n      <div className=\"w-100\">\r\n        <div className=\"w-100 py-2\"></div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <Widget\r\n              src=\"lord1.near/widget/header-dynamic\"\r\n              props={hellosinger}\r\n            />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={transactions}\r\n                />\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={transactions1}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={volume} />{\" \"}\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={volume1}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={date} />{\" \"}\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={date1} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={contract}\r\n                />\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={contract1}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div\r\n              style={{\r\n                background: themeColor?.sbt_area?.section_bg,\r\n                \"margin-top\": \"25px\",\r\n              }}\r\n              className=\"shadow-sm rounded-2  p-2\"\r\n            >\r\n              <div className=\"row\">\r\n                <Right className=\"col-md-3\">\r\n                  <H5> Success Rate</H5>\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    <ChartContainer>\r\n                      <Widget\r\n                        src=\"lord1.near/widget/pie-percentage\"\r\n                        props={{\r\n                          themeColor,\r\n                          voted: `${\r\n                            state.result.query4?.data[0]?.success || \"0\"\r\n                          }`,\r\n                          total: `${\r\n                            state.result.query4?.data[0]?.transactions || 1\r\n                          }`,\r\n                          percent: 60,\r\n                        }}\r\n                      />\r\n                    </ChartContainer>\r\n                  </div>\r\n                </Right>\r\n                <div className=\"col-md-3\">\r\n                  <Widget\r\n                    src=\"lord1.near/widget/header-dynamic\"\r\n                    props={min_time}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <Widget\r\n                    src=\"lord1.near/widget/header-dynamic\"\r\n                    props={active_days}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <Widget\r\n                    src=\"lord1.near/widget/header-dynamic\"\r\n                    props={active_month}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <Widget\r\n                    src=\"lord1.near/widget/header-dynamic\"\r\n                    props={max_time}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={engagement}\r\n              />\r\n              <div className=\"col-md-12\">{TableLeft}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={general_theme1}\r\n                />\r\n\r\n                {TableMiddle}\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={general_theme2}\r\n                />\r\n                {BelowMiddle}\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={general_theme}\r\n                />\r\n                {ChartSections}\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={scan} />\r\n              <div className=\"col-md-12\">{TableScan}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-transaction-jupiter", "fact_widget_deployments_id": "d756dacb4cdad7b93f86c83e1d1f5244", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}