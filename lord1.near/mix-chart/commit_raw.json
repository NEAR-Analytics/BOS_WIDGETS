{"tx_hash": "9yS9iEaFsATRPcmET6S41SdQccSpTHAYavtXxfACzoxt", "action_id_social": "CJxCeZrSuxDQbmfZZNQ7Gt7VZGUpfTveAWBZjPwyy4Bh-0-widget", "block_id": 98782477, "block_timestamp": "2023-08-14T11:40:01.682Z", "signer_id": "lord1.near", "widget_name": "mix-chart", "source_code": "const series = props.series ?? [];\r\nlet colors = props.colors ?? [\r\n  \"#4498E0\",\r\n  \"#FFD50D\",\r\n  \"#F29BC0\",\r\n  \"#F19D38\",\r\n  \"#82E299\",\r\n];\r\nconst chartOption = {\r\n  title: \"chart title\",\r\n  subtitle: \"\",\r\n  legend: false,\r\n  stacking: false,\r\n  ...props.chartOption,\r\n};\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst other_colors = [\r\n  \"#1f77b4\",\r\n  \"#ff7f0e\",\r\n  \"#2ca02c\",\r\n  \"#d62728\",\r\n  \"#9467bd\",\r\n  \"#8c564b\",\r\n  \"#e377c2\",\r\n  \"#7f7f7f\",\r\n  \"#bcbd22\",\r\n  \"#17becf\",\r\n];\r\nif (series.length > colors.length) {\r\n  for (let i = colors.length; i < series.length; i++) {\r\n    colors.push(other_colors[i % other_colors.length]);\r\n  }\r\n}\r\nif (series.length > colors.length) {\r\n  for (let i = colors.length; i < series.length; i++) {\r\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n}\r\nconst chartSeries = series.reduce(\r\n  (totalChartData, series, i) => {\r\n    let yAxis;\r\n    let data;\r\n    const index = totalChartData.yAxis.findIndex(\r\n      (axis) => axis._id === series.axisId\r\n    );\r\n    if (index === -1) {\r\n      yAxis = {\r\n        _id: series.axisId,\r\n        offset: 15,\r\n        margin: 10,\r\n        title: { text: series.name, style: { color: colors[i] } },\r\n        labels: { style: { color: colors[i] } },\r\n      };\r\n      data = {\r\n        yAxis: totalChartData.yAxis.length,\r\n        name: series.name,\r\n        type: series.type,\r\n        data: series.data,\r\n      };\r\n      if (totalChartData.yAxis.length % 2 !== 0) yAxis.opposite = false;\r\n      totalChartData.yAxis.push(yAxis);\r\n    } else {\r\n      data = {\r\n        yAxis: index,\r\n        name: series.name,\r\n        type: series.type,\r\n        data: series.data,\r\n      };\r\n    }\r\n\r\n    totalChartData.data.push(data);\r\n    return totalChartData;\r\n  },\r\n  { yAxis: [], data: [] }\r\n);\r\nState.init({\r\n  isLoading: true,\r\n});\r\nconst code = `\r\n<html>\r\n  <head>\r\n    <script\r\n      type=\"text/javascript\"\r\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"\r\n    ></script>\r\n    <script src=\"https://code.highcharts.com/stock/highstock.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\r\n  </head>\r\n  <body>\r\n    <div id=\"container\"></div>\r\n  </body> \r\n  <script>\r\n  \r\nwindow.addEventListener(\"message\", function (event) {}, false);\r\n\r\nconst handleMessage = (message) => {\r\n  const { chartSeries, colors, chartOption } = message;\r\n  const stacking = chartOption.stacking\r\n    ? chartOption.stacking === \"normal\" || chartOption.stacking === \"percent\"\r\n      ? chartOption.stacking\r\n      : undefined\r\n    : undefined;\r\n  const chart = Highcharts.stockChart(\"container\", {\r\n    chart: {\r\n      zoomType: \"xy\",\r\n    },\r\n    colors: colors,\r\n    navigator: {\r\n      enabled: false,\r\n    },\r\n    title: {\r\n      text: chartOption.title,\r\n      align: \"left\",\r\n    },\r\n    subtitle: {\r\n      text: chartOption.subtitle,\r\n      align: \"left\",\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        stacking: stacking,\r\n      },\r\n    },\r\n    yAxis: chartSeries.yAxis,\r\n    xAxis: {\r\n      type: \"datetime\",\r\n      dateTimeLabelFormats: { month: { main: \"%b '%Y\" } },\r\n      tickInterval: 30 * 24 * 36e5,\r\n    },\r\n    rangeSelector: {\r\n      buttons: [\r\n        {\r\n          type: \"day\",\r\n          count: 1,\r\n          text: \"1d\",\r\n        },\r\n        {\r\n          type: \"week\",\r\n          count: 1,\r\n          text: \"1w\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 1,\r\n          text: \"1m\",\r\n        },\r\n        {\r\n          type: \"all\",\r\n          count: 1,\r\n          text: \"All\",\r\n        },\r\n      ],\r\n      selected: 3,\r\n      inputEnabled: true,\r\n    },\r\n    lang: {\r\n      noData: \"no data to display\",\r\n    },\r\n    noData: {\r\n      style: {\r\n        fontWeight: \"bold\",\r\n        fontSize: \"15px\",\r\n      },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n    },\r\n    legend: {\r\n      enabled: chartOption.legend,\r\n    },\r\n    series: chartSeries.data,\r\n  });\r\n  window.iFrameResizer.onMessage = () => {};\r\n};\r\n\r\nwindow.iFrameResizer = {\r\n  onMessage: handleMessage,\r\n};\r\n  </script>\r\n</html>\r\n`;\r\n\r\nreturn (\r\n  <div\r\n    className=\"w-100 d-flex justify-content-center align-items-center\"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <>\r\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{ ...spinnerColors }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={{\r\n          chartSeries,\r\n          colors,\r\n          chartOption,\r\n        }}\r\n        onLoad={() => {\r\n          State.update({\r\n            isLoading: false,\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  </div>\r\n);\r\n\r\n// {\r\n//   \"series\": [\r\n//     {\r\n//       \"data\": [\r\n//         [\r\n//           timestamp,\r\n//           value\r\n//         ]\r\n//       ], // data timestamp must be sorted\r\n//       \"name\": \"series name\",\r\n//       \"type\": \"spline - line - area - areaspline - column\",\r\n//       \"axisId\":1-2-... datasets with the same axis range must be have equal id\r\n//     }\r\n//   ],\r\n//   \"colors\": [\r\n//     \"color1\",\r\n//     \"color2\"\r\n//   ], // optional\r\n//   \"chartOption\": {\r\n//     \"title\": \"chart title\",\r\n//     \"subtitle\": \"chart subtitle\",\r\n//     \"legend\": true - false,\r\n//     \"stacking\":\"false - normal - percent\" // optional , only column charts can be stacked\r\n//   },\r\n//    \"spinnerColors\":[],  // optional , two colors\r\n// }\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/mix-chart", "fact_widget_deployments_id": "e5812492855cc3c5a0c4d1587f08f7cd", "inserted_timestamp": "2023-08-14T13:19:29.617Z", "modified_timestamp": "2023-08-14T13:19:29.617Z", "__row_index": 1}