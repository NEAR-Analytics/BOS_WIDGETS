{"tx_hash": "9eQUVkJgmaZhbm1dgRtEcjrZJ4JXuzGaDsNw27h1hisJ", "action_id_social": "BVKpXdNh1Z1cc1yC4BTxdAr19fkmpGfZoX6b64YGmGT1-0-widget", "block_id": 101550560, "block_timestamp": "2023-09-20T12:40:00.224Z", "signer_id": "lord1.near", "widget_name": "trend-election", "source_code": "const themeColor = props.themeColor;\n\nconst daotheme = {\n  height: \"100px\",\n  align: \"left\",\n  description: \"Explore the on-chain voting trend.\",\n  brand: \"Vote\",\n  fontsize: \"30px\",\n  fontweight: \"30px\",\n  afterbrand: \"Trend\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst queryHashes = [\n  { id: 1, hash: \"2a947860-42d0-4023-9267-1a061690ebd7\" },\n  { id: 2, hash: \"e5e0395c-9675-44a3-ad65-24f10bce2e74\" },\n  { id: 3, hash: \"e0db7a2c-863d-42d5-84b6-cd8e5fff36f9\" },\n  { id: 4, hash: \"d38bd751-5fbc-44fb-9b86-bc92362eceec\" },\n];\n\nState.init({\n  light: true,\n  data: [],\n  isLoading: true,\n  error: [],\n  tab: \"fourth\",\n});\n\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\n  data = data || [];\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const dataFormat = serieses.map((series) => {\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\n    return {\n      data: dataFormated,\n      name: series.seriesName,\n      type: series.type,\n      axisId: series.id,\n    };\n  });\n  const props = {\n    series: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      subtitle: \"chart subtitle\",\n      legend: true,\n      stacking: \"false\",\n      ...chartOption,\n    },\n\n    overrideOptions: {\n      tooltip: { split: false },\n      legend: {\n        enabled: false,\n      },\n      chart: {\n        height: 500,\n        backgroundColor: \"transparent\",\n        zooming: {\n          mouseWheel: false,\n        },\n      },\n      yAxis: {\n        title: { text: \"votes\" },\n      },\n      plotOptions: {\n        column: {\n          stacking: \"false\",\n        },\n        series: {\n          dataGrouping: { enabled: false },\n        },\n      },\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nconst convertData = (hash12Data) => {\n  if (!hash12Data) return { converted: [], keys: [] };\n  return hash12Data.reduce(\n    (t, i) => {\n      const row = t.converted.findIndex((r) => r.timestamp === i.timestamp);\n      if (row === -1) {\n        t.converted.push({ timestamp: i.timestamp, [i.singer]: i.voter });\n      } else {\n        t.converted[row][i.singer] = i.voter;\n      }\n      t.keys.add(i.singer);\n      return t;\n    },\n    { converted: [], keys: new Set() }\n  );\n};\nconst createSerieses = (data) => {\n  const { keys } = convertData(data);\n  return [...keys].map((s) => {\n    return { key: s, seriesName: s, type: \"spline\", id: 1 };\n  });\n};\n\nconst tabs = {\n  firstTab: \"first\",\n  secondTab: \"second\",\n  thirdTab: \"third\",\n  fourthTab: \"fourth\",\n};\n\nconst setTab = (tab) => State.update({ tab });\n\nconst Container = styled.div`\n  &&{text-align:left};\n  .tabContent{\n    display:inline-flex;\n    align-items:center;\n    background: rgba(26, 46, 51, 0.25);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n    padding:3px 4px;\n    list-style-type:none;\n    margin-left: 1%;\n  }\n  .tab-item .active{\n    background: #304352;\n\n  }\n  .tab-item button{\n    background-color:transparent;\n    border-radius: 8px;\n    font-weight: 500;\n    font-size: 14px;\n    color:#fff;\n    height:30px;\n    padding:0 22px;\n    border:none;\n\n  }\n`;\n\nconst handleData = () => {\n  const data = {};\n  const errors = [];\n  queryHashes.forEach(({ hash, id }) => {\n    const result = fetchData(hash);\n    if (result.error) errors.push(`hash${id} : ${result.error}`);\n    data[`hash${id}`] = {\n      ...result,\n      id,\n    };\n  });\n\n  if (Object.values(data).every((d) => !d.isLoading)) {\n    State.update({\n      data: data,\n      error: [...state.error, ...errors],\n      isLoading: false,\n    });\n  }\n};\n\nconst fetchData = (hash) => {\n  const data = fetch(\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\n    {\n      subscribe: true,\n      method: \"GET\",\n      headers: {\n        Accept: \"*/*\",\n      },\n    }\n  );\n  const result = {\n    data: (data && data.body) || null,\n    error: (data && !data.ok && (data.status || data.error)) || null,\n    isLoading: !data && !error,\n  };\n  return result;\n};\n\nif (state.isLoading) {\n  handleData();\n}\n\nif (state.error.length > 0) {\n  function hide() {\n    const errors = state.error;\n    errors.shift();\n    if (errors.length > 0) setTimeout(hide, 2500);\n    State.update({ error: errors });\n  }\n  setTimeout(hide, 2500);\n}\nreturn (\n  <div className=\"container-fluid\">\n    <div className=\"pl-2\">\n      <div\n        className=\"my-4 shadow-sm  rounded-4\"\n        style={{ background: themeColor?.sbt_area?.section_bg }}\n      >\n        <Widget src=\"lord1.near/widget/header-dynamic\" props={daotheme} />\n        <div>\n          <div>\n            <Container>\n              <ul className=\"tabContent\">\n                <li className=\"tab-item\">\n                  <button\n                    className={`${\n                      state.tab === tabs.fourthTab ? \"active\" : \"\"\n                    }`}\n                    aria-current=\"page\"\n                    onClick={() => setTab(tabs.fourthTab)}\n                  >\n                    HOM\n                  </button>\n                </li>\n                <li className=\"tab-item\">\n                  <button\n                    className={`${state.tab === tabs.firstTab ? \"active\" : \"\"}`}\n                    aria-current=\"page\"\n                    onClick={() => setTab(tabs.firstTab)}\n                  >\n                    COA\n                  </button>\n                </li>\n\n                <li className=\"tab-item\">\n                  <button\n                    className={`${state.tab === tabs.thirdTab ? \"active\" : \"\"}`}\n                    aria-current=\"page\"\n                    onClick={() => setTab(tabs.thirdTab)}\n                  >\n                    TC\n                  </button>\n                </li>\n                <li className=\"tab-item\">\n                  <button\n                    className={`${\n                      state.tab === tabs.secondTab ? \"active\" : \"\"\n                    }`}\n                    aria-current=\"page\"\n                    onClick={() => setTab(tabs.secondTab)}\n                  >\n                    BP\n                  </button>\n                </li>\n              </ul>\n            </Container>\n          </div>\n        </div>\n        <div className=\"row w-100 pb-2 px-2 mx-0\">\n          <div\n            style={{ background: themeColor?.sbt_area?.card_bg }}\n            className=\"shadow-sm rounded-2 overflow-auto\"\n          >\n            {state.tab === \"first\" && (\n              <Widget\n                src=\"lord1.near/widget/mix-chart\"\n                props={getMixProps(\n                  convertData(state.data?.hash1?.data).converted,\n                  \"timestamp\",\n                  createSerieses(state.data?.hash1?.data),\n                  themeColor.chartColor,\n                  {\n                    title: \"COA\",\n                    subtitle: \"Number of votes per candidate\",\n                    stacking: \"normal\",\n                  }\n                )}\n              />\n            )}\n\n            {state.tab === \"second\" && (\n              <Widget\n                src=\"lord1.near/widget/mix-chart\"\n                props={getMixProps(\n                  convertData(state.data?.hash2?.data).converted,\n                  \"timestamp\",\n                  createSerieses(state.data?.hash2?.data),\n                  themeColor.chartColor,\n                  {\n                    title: \"BP\",\n                    subtitle: \"Number of votes per candidate\",\n                    stacking: \"normal\",\n                  }\n                )}\n              />\n            )}\n\n            {state.tab === \"third\" && (\n              <Widget\n                src=\"lord1.near/widget/mix-chart\"\n                props={getMixProps(\n                  convertData(state.data?.hash3?.data).converted,\n                  \"timestamp\",\n                  createSerieses(state.data?.hash3?.data),\n                  themeColor.chartColor,\n                  {\n                    title: \"TC\",\n                    subtitle: \"Number of votes per candidate\",\n                    stacking: \"normal\",\n                  }\n                )}\n              />\n            )}\n            {state.tab === \"fourth\" && (\n              <Widget\n                src=\"lord1.near/widget/mix-chart\"\n                props={getMixProps(\n                  convertData(state.data?.hash4?.data).converted,\n                  \"timestamp\",\n                  createSerieses(state.data?.hash4?.data),\n                  themeColor.chartColor,\n                  {\n                    title: \"HOM\",\n                    subtitle: \"Number of votes per candidate\",\n                    stacking: \"normal\",\n                  }\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\n        {state.error.length > 0 &&\n          state.error.map((er) => (\n            <div\n              className=\"toast show align-items-center text-bg-danger border-0\"\n              role=\"alert\"\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n            >\n              <div className=\"d-flex\">\n                <div className=\"toast-body\">{er}</div>\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  </div>\n);\n\n// const props = {\n//   themeColor: {\n//     dynamic_header: {\n//       afterbrandcolor: \"#789efb\",\n//       color1brand: \"#000\",\n//       color2brand: \"#806ce1\",\n//       colordescription: \"#806ce1\",\n//       background:\n//         \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n//     },\n//     tab_sbt: {\n//       backgroundColor: \"rgb(49,62,89)\",\n//       textColor: \"#fff\",\n//       headerColor: \"#806ce1\",\n//       numberColor: \"#fff\",\n//     },\n//     sbt_area: {\n//       section_bg: \"rgba(25,33,80)\",\n//       card_bg: \"rgb(49, 62, 89)\",\n//       card_title_color: \"#806ce1\",\n//     },\n//   },\n// };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/trend-election", "fact_widget_deployments_id": "f01683a234fbe19ca971b607d1800506", "inserted_timestamp": "2023-09-20T14:36:49.563Z", "modified_timestamp": "2023-09-20T14:36:49.563Z", "__row_index": 0}