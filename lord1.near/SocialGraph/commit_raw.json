{"tx_hash": "9ytCDy79Urm1HhABBB8rBSzLCFJ9Ej7KtUp4qy4DrYAH", "action_id_social": "7AP1rk4pKqsowX7AYKTYhUJwzmZkZhwipU5Y1XGu1oA6-0-widget", "block_id": 113376767, "block_timestamp": "2024-02-22T20:52:06.848Z", "signer_id": "lord1.near", "widget_name": "SocialGraph", "source_code": "const accountIds = props.accountIds || [\"\", `${context.accountId ?? \"\"}`];\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst things =\r\n  props.things ??\r\n  accountIds.map((accountId) => {\r\n    return `${accountId}/graph/${props.thingId ?? \"follow\"}`;\r\n  });\r\n\r\nconst data = Social.getr(things, \"final\");\r\nconst [nodesState, setNodesState] = useState(null);\r\nconst [isLoading, setIsLoading] = useState(true);\r\n// const [selectedAccountId, setSelectedAccountId] = useState(context.accountId);\r\nconst debug = false;\r\n\r\nuseEffect(() => {\r\n  setNodesState(data);\r\n}, [data]);\r\n\r\nconst [message, setMessage] = useState(null);\r\n\r\nuseEffect(() => {\r\n  if (!nodesState) {\r\n    return;\r\n  }\r\n  const nodes = {};\r\n  const links = [];\r\n  Object.entries(nodesState).forEach(([accountId, graphData]) => {\r\n    if (!(accountId in nodes)) {\r\n      nodes[accountId] = {\r\n        id: accountId,\r\n        size: 10,\r\n      };\r\n    }\r\n    Object.values(graphData.graph).forEach((edges) => {\r\n      Object.keys(edges).forEach((memberId) => {\r\n        if (!(memberId in nodes)) {\r\n          nodes[memberId] = {\r\n            id: memberId,\r\n            size: 10,\r\n          };\r\n        }\r\n        links.push({\r\n          source: accountId,\r\n          target: memberId,\r\n          value: 1,\r\n        });\r\n      });\r\n    });\r\n  });\r\n  setMessage({\r\n    nodes: Object.values(nodes),\r\n    links,\r\n  });\r\n}, [nodesState]);\r\nconst code = `\r\n  \r\n<html>\r\n\r\n  <head>\r\n\r\n\r\n    <meta charset=\"utf-8\">\r\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"></script>\r\n    <!-- Load d3.js -->\r\n    <script src=\"https://d3js.org/d3.v6.js\"></script>\r\n  </head>\r\n\r\n  <body>\r\n\r\n\r\n    <svg id=\"graph\"></svg>\r\n\r\n    <script>\r\n      window.addEventListener(\"message\", function(event) {}, false);\r\n\r\n      const handleMessage = (message) => {\r\n\r\n        const run = (data) => {\r\n          const width = 350;\r\n          const height = 350;\r\n          let dragIsOn = false;\r\n\r\n          // The force simulation mutates links and nodes, so create a copy\r\n          // so that re-evaluating this cell produces the same result.\r\n          const links = data.links.map(d => ({\r\n            ...d\r\n          }));\r\n          const nodes = data.nodes.map(d => ({\r\n            ...d\r\n          }));\r\n\r\n          // Create a simulation with several forces.\r\n          const simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).id(d => d.id))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"collide\", d3.forceCollide())\r\n            .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n            .on(\"tick\", ticked);\r\n\r\n          simulation.force(\"collide\")\r\n            .strength(.7)\r\n            .radius(d => Math.sqrt(d.size) + 5)\r\n            .iterations(1);\r\n\r\n          // Create the SVG container.\r\n          const svg = d3.select(\"#graph\")\r\n            .attr(\"viewBox\", [0, 0, width, height])\r\n            .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n\r\n          // Add a line for each link, and a circle for each node.\r\n          const link = svg.append(\"g\")\r\n            .attr(\"stroke\", \"#999\")\r\n            .attr(\"stroke-opacity\", 0.6)\r\n            .selectAll()\r\n            .data(links)\r\n            .join(\"line\")\r\n            .attr(\"stroke-width\", 1);\r\n\r\n          const node = svg.append(\"g\")\r\n            .attr(\"stroke\", \"#fff\")\r\n            .attr(\"stroke-width\", 1)\r\n            .selectAll()\r\n            .data(nodes)\r\n            .join(\"g\");\r\n\r\n          node\r\n            .append(\"image\")\r\n            .attr(\"xlink:href\", (d) => \\`https://i.near.social/magic/thumbnail/https://near.social/magic/img/account/\\${d.id}\\`) // Set the image URL based on your data\r\n            .attr(\"x\", (d) => -Math.sqrt(d.size) - 5)\r\n            .attr(\"y\", (d) => -Math.sqrt(d.size) - 5)\r\n            .attr(\"clip-path\", d => \\`circle(\\${Math.sqrt(d.size) + 5}px at \\${Math.sqrt(d.size) + 5} \\${Math.sqrt(d.size) + 5})\\`) \r\n            .attr(\"width\", (d) => 2 * Math.sqrt(d.size) + 10);\r\n\r\n          node\r\n            .append(\"circle\")\r\n            .attr(\"r\", d => Math.sqrt(d.size) + 5)\r\n            .attr(\"fill\", \"none\");\r\n\r\n          node.append(\"title\")\r\n            .text(d => d.id);\r\n\r\n          // Add a drag behavior.\r\n          node.call(d3.drag()\r\n            .on(\"start\", dragstarted)\r\n            .on(\"drag\", dragged)\r\n            .on(\"end\", dragended));\r\n\r\n          node.on(\"mouseover\", handleMouseOver)\r\n            .on(\"mouseout\", handleMouseOut)\r\n            .on(\"click\", handleMouseClick);\r\n\r\n          function handleMouseClick(e) {\r\n            const d = e.target.__data__;\r\n            window.top.postMessage(d.id, \"*\");\r\n          }\r\n\r\n          function handleMouseOver(d) {\r\n            d = d.target.__data__;\r\n            // Highlight connected edges\r\n            link.attr(\"stroke-opacity\", e => (e.source === d || e.target === d) ? 1 : 0.1);\r\n\r\n            // Highlight connected nodes\r\n            node.attr(\"opacity\", function(n) {\r\n              return n === d || isConnected(d, n) ? 1 : 0.3;\r\n            });\r\n          }\r\n\r\n          function handleMouseOut() {\r\n            if (dragIsOn) {\r\n              return;\r\n            }\r\n            // Reset edge and node styles\r\n            link\r\n              .attr(\"stroke-opacity\", 0.6);\r\n            node.attr(\"opacity\", 1);\r\n          }\r\n\r\n          function isConnected(a, b) {\r\n            // Check if two nodes are connected\r\n            return links.some(function(link) {\r\n              return (link.source === a && link.target === b) || (link.source === b && link.target === a);\r\n            });\r\n          }\r\n\r\n          // Set the position attributes of links and nodes each time the simulation ticks.\r\n          function ticked() {\r\n            link\r\n              .attr(\"x1\", d => d.source.x)\r\n              .attr(\"y1\", d => d.source.y)\r\n              .attr(\"x2\", d => d.target.x)\r\n              .attr(\"y2\", d => d.target.y);\r\n\r\n             node.attr(\"transform\", d => \\`translate(\\${d.x}, \\${d.y})\\`) \r\n          }\r\n\r\n          // Reheat the simulation when drag starts, and fix the subject position.\r\n          function dragstarted(event) {\r\n            dragIsOn = true;\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            event.subject.fx = event.subject.x;\r\n            event.subject.fy = event.subject.y;\r\n\r\n          }\r\n\r\n          // Update the subject (dragged node) position during drag.\r\n          function dragged(event) {\r\n            event.subject.fx = event.x;\r\n            event.subject.fy = event.y;\r\n          }\r\n\r\n          // Restore the target alpha so the simulation cools after dragging ends.\r\n          // Unfix the subject position now that it\u2019s no longer being dragged.\r\n          function dragended(event) {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            event.subject.fx = null;\r\n            event.subject.fy = null;\r\n            dragIsOn = false;\r\n            handleMouseOut();\r\n          }\r\n\r\n          // When this cell is re-run, stop the previous simulation. (This doesn\u2019t\r\n          // really matter since the target alpha is zero and the simulation will\r\n          // stop naturally, but it\u2019s a good practice.)\r\n          // invalidation.then(() => simulation.stop());\r\n\r\n          return simulation;\r\n        };\r\n\r\n        let simulation = null;\r\n\r\n        if (simulation) {\r\n          simulation.stop();\r\n          d3.select(\"#graph\").selectAll(\"*\").remove();\r\n        }\r\n        if (message) {\r\n          simulation = run(message);\r\n        }\r\n\r\n        window.iFrameResizer.onMessage = () => {};\r\n      };\r\n\r\n      window.iFrameResizer = {\r\n        onMessage: handleMessage,\r\n      };\r\n\r\n    </script>\r\n  </body>\r\n\r\n</html>\r\n\r\n`;\r\n\r\n// const [onMessage] = useState(() => {\r\n//   return (data) => {\r\n//     if (data) {\r\n//       setSelectedAccountId(data);\r\n//     }\r\n//   };\r\n// });\r\n\r\nreturn (\r\n  <div\r\n    className=\"w-100 d-flex justify-content-center align-items-center\"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <>\r\n      <div\r\n        className={`w-100 ${isLoading || !nodesState ? \"d-block\" : \"d-none\"}`}\r\n      >\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{\r\n            ...spinnerColors,\r\n          }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${isLoading || !nodesState ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={message}\r\n        onLoad={() => {\r\n          setIsLoading(false);\r\n        }}\r\n      />\r\n    </>\r\n  </div>\r\n);\r\n", "metadata": {"fork_of": "lord1.near/widget/component-growth@110572702"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/SocialGraph", "fact_widget_deployments_id": "153310898d6234b4321cb3639ed523f3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 12}