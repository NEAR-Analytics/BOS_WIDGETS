{"tx_hash": "7tfN9pZqYCcHxoBFEQoEjPWs2FdtvwjFW59TsHJ6fAvp", "action_id_social": "75qQseyM7tHcxBh4FrxSFKaJaD21ssfUESJdzKe3A2vp-0-widget", "block_id": 106939371, "block_timestamp": "2023-12-01T16:35:48.383Z", "signer_id": "lord1.near", "widget_name": "component-tab", "source_code": "const hash = \"fe16224c-e176-4479-a40f-2e720e1b8cdf\";\r\nconst themeColor = props.themeColor || {\r\n  page_bg: \"rgb(241,242,245)\",\r\n  horizen_bg: \"#391b86\",\r\n  header_bg: \"rgb(210, 202, 250)\",\r\n  sideBar: {\r\n    sideBar_bg: \"rgb(210, 202, 250)\",\r\n    sideBar_color: \"#fff\",\r\n  },\r\n  footer: {\r\n    titlenelowBackground: \"#806ce1\",\r\n    titleBackground: \"#fff\",\r\n    fromBackground: \"rgb(210, 202, 250)\",\r\n    toBackground: \"rgb(210, 202, 250)\",\r\n    belowBackground: \"#806ce1\",\r\n  },\r\n  dynamic_header: {\r\n    afterbrandcolor: \"#789efb\",\r\n    color1brand: \"#000\",\r\n    color2brand: \"#806ce1\",\r\n    colordescription: \"#806ce1\",\r\n    background:\r\n      \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n  },\r\n  search_sbt: {\r\n    section_bg: \"rgb(235, 231, 253)\",\r\n    card_bg: \"\",\r\n    search_btn_bg: \"rgb(210, 202, 250)\",\r\n    search_btn_bg_hover: \"rgba(210, 202, 250,0.8)\",\r\n    search_btn_text: \"rgb(0,0,0)\",\r\n    input_bg: \"rgba(210, 202, 250,0.2)\",\r\n    input_bg_hover: \"rgba(210, 202, 250,0.4)\",\r\n    input_text_color: \"rgb(0,0,0)\",\r\n    input_border: \"rgba(210, 202, 250,0.4)\",\r\n    table_bg: \"transparent\",\r\n    table_color: \"rgb(0,0,0)\",\r\n    table_border_color: \"\",\r\n    table_accent_bg: \"\",\r\n    table_striped_color: \"rgb(0,0,0)\",\r\n    table_striped_bg: \"\",\r\n    table_hover_color: \"rgb(0,0,0)\",\r\n    table_hover_bg: \"\",\r\n  },\r\n  sbt_info: {\r\n    section_bg: \"rgb(235, 231, 253)\",\r\n    card_bg: \"rgb(255, 255, 255)\",\r\n    card_title_color: \"#806ce1\",\r\n    card_content_color: \"#000\",\r\n  },\r\n  tab_sbt: {\r\n    backgroundColor: \"rgb(210, 202, 250)\",\r\n    textColor: \"#fff\",\r\n    headerColor: \"#806ce1\",\r\n    numberColor: \"#fff\",\r\n  },\r\n  sbt_area: {\r\n    section_bg: \"rgb(235, 231, 253)\",\r\n    card_bg: \"rgb(255, 255, 255)\",\r\n    card_title_color: \"#806ce1\",\r\n  },\r\n  table_pagination: {\r\n    table_bg: \"rgb(255,255,255)\",\r\n    table_color: \"rgb(0,0,0)\",\r\n    table_border_color: \"\",\r\n    table_accent_bg: \"\",\r\n    table_striped_color: \"rgb(0,0,0)\",\r\n    table_striped_bg: \"\",\r\n    table_hover_color: \"rgb(0,0,0)\",\r\n    table_hover_bg: \"\",\r\n    btn_border: \"#806ce1\",\r\n    btn_bg: \"#fff\",\r\n    btn_bg_active: \"rgb(235, 231, 253)\",\r\n    btn_color: \"#000\",\r\n  },\r\n  component_tab: {\r\n    card: \"red\",\r\n    text_title: \"green\",\r\n    text: \"yellow\",\r\n    backgroundColor: \"#391b86\",\r\n  },\r\n  chart: {\r\n    title: \"rgba(0,0,0,1)\",\r\n    subtitle: \"rgba(0,0,0,0.7)\",\r\n    xAxis: \"rgba(0,0,0,1)\",\r\n    yAxis: \"rgba(0,0,0,1)\",\r\n    legend: \"rgba(0,0,0,0.7)\",\r\n    legendHover: \"rgba(0,0,0,1)\",\r\n    rangeSelector: {\r\n      labels: \"rgba(0,0,0,0.7)\",\r\n      inputColor: \"rgba(0,0,0,0.5)\",\r\n      btn_bg: \"rgba(0,0,0,0.3)\",\r\n      btn_color: \"rgba(0,0,0,0.8)\",\r\n      btn_hover_bg: \"rgba(0,0,0,0.4)\",\r\n      btn_hover_color: \"rgba(0,0,0,1)\",\r\n      btn_active_bg: \"rgb(235, 231, 253)\",\r\n      btn_active_color: \"rgba(0,0,0,1)\",\r\n    },\r\n  },\r\n  spinnerColors: [\"#6F61C0\", \"#241468\"],\r\n  chartColor: [\r\n    \"#F79BD3\",\r\n    \"#A084E8\",\r\n    \"#EA1179\",\r\n    \"#F79BD3\",\r\n    \"#A084E8\",\r\n    \"#6F61C0\",\r\n    \"#241468\",\r\n    \"#9F0D7F\",\r\n  ],\r\n};\r\nconst columnNamesFinall = [\r\n  \"Transactions\",\r\n  \"Components\",\r\n  \"History (day)\",\r\n  \"Stars Received\",\r\n];\r\n\r\nconst columnImg = {\r\n  nomination:\r\n    \"https://raw.githubusercontent.com/lordking1234/blockchain-icon/main/chart-line-solid.svg\",\r\n  transactions:\r\n    \"https://raw.githubusercontent.com/lordking1234/blockchain-icon/main/heart-solid.svg\",\r\n  fee: \"https://raw.githubusercontent.com/lordking1234/blockchain-icon/main/house.svg\",\r\n  active_users:\r\n    \"https://raw.githubusercontent.com/lordking1234/blockchain-icon/main/file-contract-solid.svg\",\r\n};\r\nState.init({\r\n  searchedSinger: \"\",\r\n  data: [],\r\n  isLoading: true,\r\n  error: [],\r\n});\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === props.singer) {\r\n    return;\r\n  } else {\r\n    State.update({ searchedSinger: props.singer, isLoading: true });\r\n  }\r\n};\r\ncheckNewSinger();\r\nconst handleData = () => {\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({ isLoading: true, data: [] });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`error message is : \"${result.error}\"`);\r\n    State.update({ error: errors, isLoading: false });\r\n  }\r\n  if (result.data) {\r\n    const signerData = result.data.find(\r\n      ({ singer }) => singer === state.searchedSinger\r\n    );\r\n    State.update({ data: signerData ? [signerData] : [], isLoading: false });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\nif (state.isLoading) {\r\n  handleData();\r\n}\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\nconst formatNumber = (num) => {\r\n  if (num >= 1000000000) {\r\n    return (num / 1000000000).toFixed(2).replace(/\\.0$/, \"\") + \"b\";\r\n  }\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(2).replace(/\\.0$/, \"\") + \"m\";\r\n  }\r\n  if (num >= 1000) {\r\n    return (num / 1000).toFixed(2).replace(/\\.0$/, \"\") + \"k\";\r\n  }\r\n  return num;\r\n};\r\n\r\nconst noData = <div className=\"w-100 py-4 text-center\">No data available</div>;\r\n\r\nconst ParentDiv = styled.div`\r\ncolor:${themeColor.component_tab.text};\r\nflex-basis:23%;\r\npadding:1rem;\r\nmin-height:150px;\r\nmax-height:300px;\r\nbackground:${themeColor.component_tab.backgroundColor};\r\nborder-radius:25px;\r\ntransition:0.3s all;\r\nbox-shadow: \"0px 0px 10px -1px  #806ce1\";\r\n&:hover{\r\n  transform:scale(1.1);\r\n  opacity:0.9\r\n}\r\n\r\n@media only screen and (max-width: 770px) {\r\n flex-basis:50%\r\n}\r\n>p{font-size:15px}\r\n`;\r\nconst onHandelDate = (inputDate) => {\r\n  let date = new Date(inputDate);\r\n  let monthNames = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  let day = date.getDate();\r\n  let month = monthNames[date.getMonth()];\r\n  let year = date.getFullYear();\r\n  let createdAt;\r\n  createdAt = day + \"th \" + month + \" \" + year;\r\n  return createdAt;\r\n};\r\n\r\nreturn (\r\n  <div className=\"d-flex flex-wrap justify-content-around gap-1\">\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    {state.data.length > 0 ? (\r\n      <>\r\n        <ParentDiv>\r\n          <OverlayTrigger\r\n            key=\"top\"\r\n            overlay={\r\n              <Tooltip>\r\n                Total number of transactions that include both build and update\r\n                transactions, and your rank in terms of the number of dev\r\n                transactions among other developers\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"nowrap\",\r\n                color: themeColor.component_tab.text_title,\r\n              }}\r\n            >\r\n              <img\r\n                style={{ marginRight: \"10px\" }}\r\n                width={20}\r\n                src={columnImg.nomination}\r\n              />\r\n              <h5 style={{ color: props.headerColor }}>\r\n                {columnNamesFinall[0]}\r\n              </h5>\r\n            </div>\r\n          </OverlayTrigger>\r\n          <h4 style={{ color: themeColor.component_tab.text_title }}>\r\n            {formatNumber(state.data[0].total_trxs)}\r\n          </h4>\r\n          <Widget\r\n            src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n            props={{ Tag: { title: \"\" } }}\r\n          />\r\n\r\n          <p>\r\n            <div>\r\n              Build Transactions:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].build_trxs)}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              Update Transactions:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].update_trxs)}\r\n              </span>\r\n            </div>\r\n            <Widget\r\n              src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n              props={{ Tag: { title: \"\", className: props.dark } }}\r\n            />\r\n            Your Rank \ud83d\udc49\r\n            <span style={{ color: props.numberintextColor }}>\r\n              {formatNumber(state.data[0].widget_rank)}\r\n            </span>\r\n          </p>\r\n        </ParentDiv>\r\n        <ParentDiv>\r\n          <OverlayTrigger\r\n            key=\"top\"\r\n            overlay={\r\n              <Tooltip>\r\n                How many components have you developed, what is your rank based\r\n                on the number of components, and are you considered an active\r\n                developer (among the top 50 most active)\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"nowrap\",\r\n                color: themeColor.component_tab.text_title,\r\n              }}\r\n            >\r\n              <img\r\n                style={{ marginRight: \"10px\" }}\r\n                width={20}\r\n                src={columnImg.fee}\r\n              />\r\n              <h6 style={{ color: props.headerColor }}>\r\n                {columnNamesFinall[1]}\r\n              </h6>\r\n            </div>\r\n          </OverlayTrigger>\r\n\r\n          <h4 style={{ color: themeColor.component_tab.text_title }}>\r\n            {formatNumber(state.data[0].widget)}\r\n          </h4>\r\n          <Widget\r\n            src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n            props={{ Tag: { title: \"\", className: props.dark } }}\r\n          />\r\n          <p>\r\n            <div>\r\n              Total Components:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].widget)}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              Active dev or not :\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].active_or_not)}\r\n              </span>\r\n            </div>\r\n            <Widget\r\n              src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n              props={{ Tag: { title: \"\", className: props.dark } }}\r\n            />\r\n            Your Rank \ud83d\udc49\r\n            <span style={{ color: props.numberintextColor }}>\r\n              {formatNumber(state.data[0].widget_rank)}\r\n            </span>\r\n          </p>\r\n        </ParentDiv>\r\n        <ParentDiv>\r\n          <OverlayTrigger\r\n            key=\"top\"\r\n            overlay={\r\n              <Tooltip>\r\n                When did you first start your development activity, how many\r\n                days have you been active, and what is your rank based on your\r\n                dev history\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"nowrap\",\r\n                color: themeColor.component_tab.text_title,\r\n              }}\r\n            >\r\n              <img\r\n                style={{ marginRight: \"10px\" }}\r\n                width={20}\r\n                src={columnImg.active_users}\r\n              />\r\n              <h6 style={{ color: props.headerColor }}>\r\n                {columnNamesFinall[2]}\r\n              </h6>\r\n            </div>\r\n          </OverlayTrigger>\r\n\r\n          <h4 style={{ color: themeColor.component_tab.text_title }}>\r\n            {formatNumber(state.data[0].days)}\r\n          </h4>\r\n          <Widget\r\n            src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n            props={{ Tag: { title: \"\", className: props.dark } }}\r\n          />\r\n          <p>\r\n            <div>\r\n              Active Since:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {onHandelDate(state.data[0].min_date)}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              Active Days:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].active_date)}\r\n              </span>\r\n            </div>\r\n            <Widget\r\n              src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n              props={{ Tag: { title: \"\", className: props.dark } }}\r\n            />\r\n            Your Rank \ud83d\udc49\r\n            <span style={{ color: props.numberintextColor }}>\r\n              {formatNumber(state.data[0].days_rank)}\r\n            </span>\r\n          </p>\r\n        </ParentDiv>\r\n        <ParentDiv>\r\n          <OverlayTrigger\r\n            key=\"top\"\r\n            overlay={\r\n              <Tooltip>Number of stars received or sent in total</Tooltip>\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"nowrap\",\r\n                color: themeColor.component_tab.text_title,\r\n              }}\r\n            >\r\n              <img\r\n                style={{ marginRight: \"10px\" }}\r\n                width={20}\r\n                src={columnImg.transactions}\r\n              />\r\n              <h6 style={{ color: props.headerColor }}>\r\n                {columnNamesFinall[3]}\r\n              </h6>\r\n            </div>\r\n          </OverlayTrigger>\r\n\r\n          <h4 style={{ color: themeColor.component_tab.text_title }}>\r\n            {formatNumber(state.data[0].stars_received)}\r\n          </h4>\r\n          <Widget\r\n            src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n            props={{ Tag: { title: \"\", className: props.dark } }}\r\n          />\r\n          <p>\r\n            <div>\r\n              Star Received:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].stars_received)}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              Star Sent:\r\n              <span style={{ color: props.numberintextColor }}>\r\n                {formatNumber(state.data[0].stars_sent)}\r\n              </span>\r\n            </div>\r\n            <Widget\r\n              src={\"rubycop.near/widget/NDC.StyledComponents\"}\r\n              props={{ Tag: { title: \"\", className: props.dark } }}\r\n            />\r\n            Your Rank \ud83d\udc49\r\n            <span style={{ color: props.numberintextColor }}>\r\n              {formatNumber(state.data[0].stars_received_rank)}\r\n            </span>\r\n          </p>\r\n        </ParentDiv>\r\n      </>\r\n    ) : (\r\n      noData\r\n    )}\r\n  </div>\r\n);\r\n//{\r\n//  \"backgroundColor\": \"#d2cafa\",\r\n//  \"textColor\": \"#806ce1\",\r\n//  \"headerColor\": \"#806ce1\",\r\n//  \"numberColor\": \"#fff\",\r\n//  \"numberintextColor\": \"#fff\",\r\n//  \"dark\": \"dark\" or \"\"\r\n//}\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/component-tab", "fact_widget_deployments_id": "a018c5a1ecb753e09b210d423f2d485f", "inserted_timestamp": "2023-12-01T18:29:38.204Z", "modified_timestamp": "2023-12-20T03:02:01.702Z", "__row_index": 3}