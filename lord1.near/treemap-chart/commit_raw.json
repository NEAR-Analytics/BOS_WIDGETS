{"tx_hash": "5V6tbE3junDURvT5a8MRrLMYXddkYxskUUsvWmGJHyNs", "action_id_social": "BkN9DjuNWNELHiSR1cFy35ECwExWcdj2LG3zf9tRG4a3-0-widget", "block_id": 113354563, "block_timestamp": "2024-02-22T12:44:41.781Z", "signer_id": "lord1.near", "widget_name": "treemap-chart", "source_code": "const themeColor = props.themeColor;\r\nconst theme = themeColor?.chart\r\n  ? {\r\n      title: {\r\n        style: {\r\n          color: themeColor.chart?.title,\r\n        },\r\n      },\r\n      subtitle: {\r\n        style: {\r\n          color: themeColor.chart?.subtitle,\r\n        },\r\n      },\r\n      xAxis: { labels: { style: { color: themeColor.chart?.xAxis } } },\r\n      yAxis: { labels: { style: { color: themeColor.chart?.yAxis } } },\r\n\r\n      legend: {\r\n        itemStyle: {\r\n          color: themeColor.chart?.legend,\r\n        },\r\n        itemHoverStyle: {\r\n          color: themeColor.chart?.legendHover,\r\n        },\r\n      },\r\n    }\r\n  : {};\r\nconst data = props.data ?? {};\r\nlet colors = props.colors ?? [\r\n  \"#A084E8\",\r\n  \"#6F61C0\",\r\n  \"#241468\",\r\n  \"#9F0D7F\",\r\n  \"#EA1179\",\r\n  \"#F79BD3\",\r\n];\r\nconst chartOption = {\r\n  chartName: \"chart name\",\r\n  title: {\r\n    text: \"title\",\r\n  },\r\n  subtitle: {\r\n    text: \"subtitle\",\r\n  },\r\n  ...props.chartOption,\r\n};\r\nconst overrideOptions = props.overrideOptions || {};\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst other_colors = [\r\n  \"#1f77b4\",\r\n  \"#ff7f0e\",\r\n  \"#2ca02c\",\r\n  \"#d62728\",\r\n  \"#9467bd\",\r\n  \"#8c564b\",\r\n  \"#e377c2\",\r\n  \"#7f7f7f\",\r\n  \"#bcbd22\",\r\n  \"#17becf\",\r\n];\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(other_colors[i % other_colors.length]);\r\n  }\r\n}\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n}\r\nState.init({\r\n  isLoading: true,\r\n});\r\n\r\nconst code = `\r\n  <html>\r\n  <head>\r\n  <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"></script>\r\n  <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n<script src=\"https://code.highcharts.com/modules/heatmap.js\"></script>\r\n<script src=\"https://code.highcharts.com/modules/treemap.js\"></script>\r\n\r\n  <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\r\n</head>\r\n\r\n<body>\r\n  <div id=\"container\">\r\n  </div>\r\n  <script>\r\n    window.addEventListener(\"message\", function(event) {}, false);\r\n\r\n    const formatNumber = (num) => {\r\n      if (num >= 1000000000) {\r\n        return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"b\";\r\n      }\r\n      if (num >= 1000000) {\r\n        return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"m\";\r\n      }\r\n      if (num >= 1000) {\r\n        return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"k\";\r\n      }\r\n      return num;\r\n    };\r\n\r\n    const handleMessage = (message) => {\r\n      const {\r\n        data,\r\n        colors,\r\n        chartOption,\r\n        overrideOptions,\r\n        theme\r\n      } = message;\r\n\r\n      const titleChart = chartOption ?.title ?.text || ''\r\n      const subtitleChart = chartOption ?.subtitle ?.text || ''\r\n      \r\n      const chartName = chartOption ?.chartName || ''\r\n\r\n\r\n\r\n      Highcharts.theme = {...theme,colors};\r\n      Highcharts.setOptions(Highcharts.theme);\r\n\r\n    let firstLevel,\r\n        firstVal,\r\n        firstI = 0,\r\n        lastLevel,\r\n        lastI,\r\n        valueLevel,\r\n        valueI,\r\n        first,\r\n        last,\r\n        value;\r\n\r\n    const points = []\r\n     for (first in data) {\r\n        if (Object.hasOwnProperty.call(data, first)) {\r\n          firstVal = 0;\r\n          firstLevel = {\r\n            id: 'id_' + firstI,\r\n            name: first,\r\n            color: Highcharts.getOptions().colors[firstI]\r\n          };\r\n          lastI = 0;\r\n          for (last in data[first]) {\r\n            if (Object.hasOwnProperty.call(data[first], last)) {\r\n              lastLevel = {\r\n                id: firstLevel.id + '_' + lastI,\r\n                name: last,\r\n                parent: firstLevel.id,\r\n              };\r\n              points.push(lastLevel);\r\n              valueI = 0;\r\n              if (typeof data[first][last] === 'object') {\r\n                for (value in data[first][last]) {\r\n                  if (Object.hasOwnProperty.call(\r\n                      data[first][last], value\r\n                    )) {\r\n                    valueLevel = {\r\n                      id: lastLevel.id + '_' + valueI,\r\n                      name: value,\r\n                      parent: lastLevel.id,\r\n                      value: Math.round(+data[first][last][value])\r\n                    };\r\n                    firstVal += valueLevel.value;\r\n                    points.push(valueLevel);\r\n                    valueI = valueI + 1;\r\n                  }\r\n                }\r\n              } else {\r\n                lastLevel.value = Math.round(+data[first][last])\r\n                firstVal += lastLevel.value;\r\n                valueI = valueI + 1;\r\n              }\r\n\r\n              lastI = lastI + 1;\r\n            }\r\n          }\r\n          firstLevel.value = firstVal;\r\n          points.push(firstLevel);\r\n          firstI = firstI + 1;\r\n        }\r\n      }\r\n    \r\n    Highcharts.chart('container', {\r\n      \tcolors:colors,\r\n        chart : {\r\n            backgroundColor: \"transparent\",\r\n        },\r\n        series: [{\r\n            name: chartName,\r\n            type: 'treemap',\r\n            layoutAlgorithm: 'squarified',\r\n            allowDrillToNode: true,\r\n            animationLimit: 1000,\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            levels: [{\r\n                level: 1,\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                borderWidth: 2,\r\n                levelIsConstant: false\r\n            }, {\r\n                level: 1,\r\n                dataLabels: {\r\n                    style: {\r\n                        fontSize: '14px'\r\n                    }\r\n                }\r\n            }],\r\n            accessibility: {\r\n                exposeAsGroupOnly: true\r\n            },\r\n            data: points\r\n        }],\r\n        subtitle: {\r\n            text: subtitleChart,\r\n            align: 'left'\r\n        },\r\n        title: {\r\n            text: titleChart,\r\n            align: 'left'\r\n        },\r\n        ...overrideOptions\r\n    });\r\n\r\n     window.iFrameResizer.onMessage = () => {}; \r\n    };\r\n\r\n     window.iFrameResizer = {\r\n      onMessage: handleMessage,\r\n    };  \r\n\r\n  </script>\r\n  </html>\r\n`;\r\n\r\nreturn (\r\n  <div\r\n    className=\"w-100 d-flex justify-content-center align-items-center \"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <>\r\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{\r\n            ...spinnerColors,\r\n          }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={{\r\n          data,\r\n          colors,\r\n          chartOption,\r\n          overrideOptions,\r\n          theme,\r\n        }}\r\n        onLoad={() => {\r\n          State.update({\r\n            isLoading: false,\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  </div>\r\n);\r\n\r\n// example-data-1 = {\r\n//     \"Dapp\": {\r\n//         \"Kaikai\": {\r\n//             \"volume1\": 2,\r\n//             \"volume2\": 3\r\n//         }\r\n//     },\r\n//     \"Games\": {\r\n//         \"Sweat\": {\r\n//             \"volume1\": 4,\r\n//         }\r\n//     }\r\n// }\r\n// example-data-2 = {\r\n//         \"Kaikai\": {\r\n//             \"volume1\": 2\r\n//         },\r\n//         \"Sweat\": {\r\n//             \"volume1\": 4,\r\n//             \"volume2\": 14,\r\n//         }\r\n// }\r\n//  props = {\r\n//   data: data,\r\n//   colors: [\"blue\", \"red\"], //optional : tow colors\r\n// chartOption: {\r\n//    chartName : 'chart name',\r\n//     \ttitle:{\r\n//       \ttext : 'title'\r\n//       },\r\n//       subtitle:{\r\n//       text : 'subtitle'\r\n//       }\r\n// },\r\n//   spinnerColors: [], //optional : tow colors\r\n//   overrideOptions:{} // opt\r\n//   themeColor: {\r\n//     chart: { //optional\r\n//       title: \"red\",\r\n//       subtitle: \"blue\",\r\n//       xAxis: \"red\",\r\n//       yAxis: \"blue\",\r\n//       legend: \"green\",\r\n//       legendHover: \"blue\",\r\n//       rangeSelector: {\r\n//         labels: \"red\",\r\n//         inputColor: \"blue\",\r\n//         btn_bg: \"red\",\r\n//         btn_color: \"blue\",\r\n//         btn_hover_bg: \"red\",\r\n//         btn_hover_color: \"blue\",\r\n//         btn_active_bg: \"red\",\r\n//         btn_active_color: \"blue\",\r\n//       },\r\n//     },\r\n//   },\r\n// };\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/treemap-chart", "fact_widget_deployments_id": "9111c6c64ae90f57fd20db7729f4cb0f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}