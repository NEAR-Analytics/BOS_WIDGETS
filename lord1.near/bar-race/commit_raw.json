{"tx_hash": "G2BY6aumLcx3PoE8gxUWmWB9bupWqsBjSeJRyTXZFjh8", "action_id_social": "GTmt9S6EMLRvWXGzDijDq3F2sqGQtDYXTVaJ1oacfZNM-0-widget", "block_id": 112537784, "block_timestamp": "2024-02-10T12:39:38.010Z", "signer_id": "lord1.near", "widget_name": "bar-race", "source_code": "const themeColor = props.themeColor;\r\nconst theme = themeColor?.chart\r\n  ? {\r\n      title: {\r\n        style: {\r\n          color: themeColor.chart?.title,\r\n        },\r\n      },\r\n      subtitle: {\r\n        style: {\r\n          color: themeColor.chart?.subtitle,\r\n        },\r\n      },\r\n      xAxis: { labels: { style: { color: themeColor.chart?.xAxis } } },\r\n      yAxis: { labels: { style: { color: themeColor.chart?.yAxis } } },\r\n\r\n      legend: {\r\n        itemStyle: {\r\n          color: themeColor.chart?.legend,\r\n        },\r\n        itemHoverStyle: {\r\n          color: themeColor.chart?.legendHover,\r\n        },\r\n      },\r\n    }\r\n  : {};\r\nconst data = props.data ?? {};\r\nlet colors = props.colors ?? [\r\n  \"#A084E8\",\r\n  \"#6F61C0\",\r\n  \"#241468\",\r\n  \"#9F0D7F\",\r\n  \"#EA1179\",\r\n  \"#F79BD3\",\r\n];\r\nconst chartOption = props?.chartOption || {\r\n  subBarChart: \"sub bar text\",\r\n  title: {\r\n    text: \"title chart\",\r\n  },\r\n};\r\n\r\n// const chartOption= {\r\n// btn-bg: 'red',\r\n// stepTime: 500, //ms\r\n// barInChart: 3,\r\n// subBarChart: 'sub bar text',\r\n// title: {\r\n//   text: 'title chart',\r\n// },\r\n// subtitle: {\r\n//   upSize: 20,\r\n//   downSize: 15,\r\n//   positionX: 0,\r\n//   positionY: 0\r\n// }\r\n//       },\r\nconst overrideOptions = props.overrideOptions || {};\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst other_colors = [\r\n  \"#1f77b4\",\r\n  \"#ff7f0e\",\r\n  \"#2ca02c\",\r\n  \"#d62728\",\r\n  \"#9467bd\",\r\n  \"#8c564b\",\r\n  \"#e377c2\",\r\n  \"#7f7f7f\",\r\n  \"#bcbd22\",\r\n  \"#17becf\",\r\n];\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(other_colors[i % other_colors.length]);\r\n  }\r\n}\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n}\r\nState.init({\r\n  isLoading: true,\r\n});\r\n\r\nconst code = `\r\n  <html>\r\n  <head>\r\n  <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"></script>\r\n  <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n  <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\r\n  <style>\r\n    #play-controls{\r\n      display : flex;\r\n      gap : 1rem;\r\n      padding-bottom : 0.7rem;\r\n    }\r\n    #container{\r\n      border-radius : 0.3rem;\r\n    }\r\n    #play-pause-button{\r\n      border-radius : 1rem;\r\n      width : 3rem;\r\n      height: 2.5rem;\r\n      border : none;\r\n      display : flex;\r\n      align-items : center;\r\n      justify-content : center;\r\n    }\r\n    #play-pause-button svg{\r\n      display : none\r\n    }\r\n    .btn-play #play{\r\n      display : inline-block\r\n    }\r\n    .btn-pause #pause{\r\n      display : inline-block\r\n    }\r\n  </style>\r\n</head>\r\n\r\n<body>\r\n  <div id=\"parent-container\">\r\n    <div id=\"play-controls\">\r\n      <button id=\"play-pause-button\" class=\"btn-play\" title=\"play\">\r\n<svg id=\"play\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M23 12C23 10.9648 22.4695 9.92953 21.4086 9.35258L8.59661 2.38548C6.53435 1.26402 4 2.72368 4 5.0329L4 12H23Z\" fill=\"#1C274C\"/>\r\n<path opacity=\"0.5\" d=\"M8.59662 21.6145L21.4086 14.6474C22.4695 14.0705 23 13.0352 23 12H4L4 18.9671C4 21.2763 6.53435 22.736 8.59662 21.6145Z\" fill=\"#1C274C\"/>\r\n</svg>\r\n<svg id=\"pause\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M2 6C2 4.11438 2 3.17157 2.58579 2.58579C3.17157 2 4.11438 2 6 2C7.88562 2 8.82843 2 9.41421 2.58579C10 3.17157 10 4.11438 10 6V18C10 19.8856 10 20.8284 9.41421 21.4142C8.82843 22 7.88562 22 6 22C4.11438 22 3.17157 22 2.58579 21.4142C2 20.8284 2 19.8856 2 18V6Z\" fill=\"#1C274C\"/>\r\n<path opacity=\"0.5\" d=\"M14 6C14 4.11438 14 3.17157 14.5858 2.58579C15.1716 2 16.1144 2 18 2C19.8856 2 20.8284 2 21.4142 2.58579C22 3.17157 22 4.11438 22 6V18C22 19.8856 22 20.8284 21.4142 21.4142C20.8284 22 19.8856 22 18 22C16.1144 22 15.1716 22 14.5858 21.4142C14 20.8284 14 19.8856 14 18V6Z\" fill=\"#1C274C\"/>\r\n</svg>\r\n      </button>\r\n      <input id=\"play-range\" type=\"range\" step=\"1\" value=\"0\" min=\"0\" max=\"0\" />\r\n    </div>\r\n    <div id=\"container\"></div>\r\n    <p id=\"sub-bar\"></p>\r\n  </div>\r\n  <script>\r\n    window.addEventListener(\"message\", function(event) {}, false);\r\n\r\n    const formatNumber = (num) => {\r\n      if (num >= 1000000000) {\r\n        return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \" b\";\r\n      }\r\n      if (num >= 1000000) {\r\n        return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \" m\";\r\n      }\r\n      if (num >= 1000) {\r\n        return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \" k\";\r\n      }\r\n      return num;\r\n    };\r\n\r\n    const handleMessage = (message) => {\r\n      const {\r\n        data,\r\n        colors,\r\n        theme,\r\n        chartOption,\r\n        overrideOptions\r\n      } = message;\r\n\r\n      const titleChart = chartOption ?.title ?.text || ''\r\n      const subTitleUpSize = chartOption ?.subtitle ?.upSize || 50\r\n      const subTitleDownSize = chartOption ?.subtitle ?.downSize || 20\r\n      const subTitleXPos = chartOption ?.subtitle ?.positionX || 0\r\n      const subTitleYPos = chartOption ?.subtitle ?.positionY || 0\r\n\r\n      const subBarChart = chartOption ?.subBarChart || ''\r\n      const stepTime = chartOption.stepTime || 500\r\n      const barInChart = chartOption.barInChart || 5\r\n\r\n      const totalDateObj = Object.values(data)[0]\r\n      const totalDateArr = Object.keys(totalDateObj || {})\r\n\r\n\r\n      const btn = document.getElementById('play-pause-button')\r\n      const btn_bg = chartOption ?.btn_bg \r\n       btn_bg ? btn.style.backgroundColor = btn_bg : null\r\n      const input = document.getElementById('play-range')\r\n      const subBar = document.getElementById('sub-bar')\r\n      input.value = 1;\r\n      input.min = 1;\r\n      input.max = totalDateArr.length\r\n      subBar.textContent = subBarChart\r\n\r\n      const startTime = totalDateArr[0]\r\n      const endTime = totalDateArr.at(-1)\r\n      let dataset, chart;\r\n      /*\r\n       * Animate dataLabels functionality\r\n       */\r\n      (function(H) {\r\n        const FLOAT = /^-?\\d+\\.?\\d*$/;\r\n\r\n        // Add animated textSetter, just like fill/strokeSetters\r\n        H.Fx.prototype.textSetter = function() {\r\n          let startValue = this.start.replace(/ /g, ''),\r\n            endValue = this.end.replace(/ /g, ''),\r\n            currentValue = this.end.replace(/ /g, '');\r\n          if ((startValue || '').match(FLOAT)) {\r\n            startValue = parseInt(startValue, 10);\r\n            endValue = parseInt(endValue, 10);\r\n\r\n            // No support for float\r\n            currentValue = Highcharts.numberFormat(\r\n              Math.round(startValue + (endValue - startValue) * this.pos),\r\n              0\r\n            );\r\n          }\r\n\r\n          this.elem.endText = this.end;\r\n\r\n          this.elem.attr(this.prop, currentValue, null, true);\r\n        };\r\n\r\n        // Add textGetter, not supported at all at this moment:\r\n        H.SVGElement.prototype.textGetter = function() {\r\n          const ct = this.text.element.textContent || '';\r\n          return this.endText ? this.endText : ct.substring(0, ct.length / 2);\r\n        };\r\n\r\n        // Temporary change label.attr() with label.animate():\r\n        // In core it's simple change attr(...) => animate(...) for text prop\r\n        H.wrap(H.Series.prototype, 'drawDataLabels', function(proceed) {\r\n          const attr = H.SVGElement.prototype.attr,\r\n            chart = this.chart;\r\n\r\n          if (chart.sequenceTimer) {\r\n            this.points.forEach(point =>\r\n              (point.dataLabels || []).forEach(\r\n                label =>\r\n                (label.attr = function(hash) {\r\n                  if (\r\n                    hash &&\r\n                    hash.text !== undefined &&\r\n                    chart.isResizing === 0\r\n                  ) {\r\n                    const text = hash.text;\r\n\r\n                    delete hash.text;\r\n\r\n                    return this\r\n                      .attr(hash)\r\n                      .animate({\r\n                        text\r\n                      });\r\n                  }\r\n                  return attr.apply(this, arguments);\r\n\r\n                })\r\n              )\r\n            );\r\n          }\r\n\r\n          const ret = proceed.apply(\r\n            this,\r\n            Array.prototype.slice.call(arguments, 1)\r\n          );\r\n\r\n          this.points.forEach(p =>\r\n            (p.dataLabels || []).forEach(d => (d.attr = attr))\r\n          );\r\n\r\n          return ret;\r\n        });\r\n      }(Highcharts));\r\n\r\n      function getData(time) {\r\n        const output = Object.entries(dataset)\r\n          .map(country => {\r\n            const [countryName, countryData] = country;\r\n            return [countryName, Number(countryData[time])];\r\n          })\r\n          .sort((a, b) => b[1] - a[1]);\r\n        const total = output.reduce((t, i) => t + (i[1]||0), 0)\r\n        return [total, output.slice(0, barInChart)];\r\n      }\r\n\r\n      function getSubtitle() {\r\n        const total = formatNumber(getData(totalDateArr[input.value - 1])[0])\r\n        return '<span style=\"font-size: ' + subTitleUpSize + 'px\">' + totalDateArr[input.value - 1] + '</span><br><span style=\"font-size: ' + subTitleDownSize + 'px\">Total: <b> ' + total + '</b></span>';\r\n      }\r\n\r\n      (async () => {\r\n        Highcharts.theme = theme;\r\n        Highcharts.setOptions(Highcharts.theme);\r\n        dataset = data\r\n\r\n        chart = Highcharts.chart('container', {\r\n          chart: {\r\n            animation: {\r\n              duration: 500\r\n            },\r\n            marginRight: 50\r\n          },\r\n          colors: colors,\r\n          title: {\r\n            text: titleChart,\r\n            align: 'left'\r\n          },\r\n          subtitle: {\r\n            useHTML: true,\r\n            text: getSubtitle(),\r\n            floating: true,\r\n            align: 'right',\r\n            verticalAlign: 'middle',\r\n            y: subTitleYPos,\r\n            x: subTitleXPos\r\n          },\r\n\r\n          legend: {\r\n            enabled: false\r\n          },\r\n          xAxis: {\r\n              labels: {\r\n                style:{\r\n                    fontSize : '1em'\r\n                }\r\n            },\r\n            type: 'category'\r\n          },\r\n          yAxis: {\r\n            opposite: true,\r\n            tickPixelInterval: 150,\r\n            \r\n            title: {\r\n              text: null\r\n            }\r\n          },\r\n          plotOptions: {\r\n            series: {\r\n              animation: false,\r\n              groupPadding: 0,\r\n              pointPadding: 0.1,\r\n              borderWidth: 0,\r\n              colorByPoint: true,\r\n              dataSorting: {\r\n                enabled: true,\r\n                matchByName: true\r\n              },\r\n              type: 'bar',\r\n              dataLabels: {\r\n                enabled: true\r\n              }\r\n            }\r\n          },\r\n          series: [{\r\n            type: 'bar',\r\n            name: startTime,\r\n            data: getData(startTime)[1]\r\n          }],\r\n          responsive: {\r\n            rules: [{\r\n              condition: {\r\n                maxWidth: 550\r\n              },\r\n              chartOptions: {\r\n                xAxis: {\r\n                  visible: false\r\n                },\r\n                subtitle: {\r\n                  x: 0\r\n                },\r\n                plotOptions: {\r\n                  series: {\r\n                    dataLabels: [{\r\n                      enabled: true,\r\n                      y: 8\r\n                    }, {\r\n                      enabled: true,\r\n                      format: '{point.name}',\r\n                      y: -8,\r\n                      style: {\r\n                        fontWeight: 'normal',\r\n                        opacity: 0.7\r\n                      }\r\n                    }]\r\n                  }\r\n                }\r\n              }\r\n            }]\r\n          },\r\n        });\r\n      })();\r\n      /*\r\n       * Pause the timeline, either when the range is ended, or when clicking the pause button.\r\n       * Pausing stops the timer and resets the button to play mode.\r\n       */\r\n      function pause(button) {\r\n        button.title = 'play';\r\n        button.className = 'btn-play';\r\n        clearTimeout(chart.sequenceTimer);\r\n        chart.sequenceTimer = undefined;\r\n      }\r\n\r\n      /*\r\n       * Update the chart. This happens either on updating (moving) the range input,\r\n       * or from a timer when the timeline is playing.\r\n       */\r\n      function updateChart(increment) {\r\n        const whitchIndex = totalDateArr.findIndex((t) => totalDateArr[input.value - 1] === t)\r\n        let nextStep = false\r\n\r\n        if (increment) {\r\n          nextStep = whitchIndex + increment + 1\r\n        }\r\n        if (whitchIndex >= totalDateArr.length -1 ) {\r\n          // Auto-pause\r\n          pause(btn);          \r\n        }\r\n\r\n        chart.update({\r\n            subtitle: {\r\n              text: getSubtitle()\r\n            }\r\n          },\r\n          false,\r\n          false,\r\n          false\r\n        );\r\n        chart.series[0].update({\r\n            name: totalDateArr[input.value - 1],\r\n            data: getData(totalDateArr[input.value - 1])[1]\r\n          });\r\n        nextStep ? input.value = nextStep : null\r\n      }\r\n\r\n      /*\r\n       * Play the timeline.\r\n       */\r\n      function play(button) {\r\n\r\n        button.title = 'pause';\r\n        button.className = 'btn-pause';\r\n        if(input.value >= totalDateArr.length -1){\r\n          input.value = 1\r\n        }\r\n        chart.sequenceTimer = setInterval(function() {\r\n          updateChart(1);\r\n        }, stepTime);\r\n      }\r\n\r\n      btn.addEventListener('click', function() {\r\n        if (chart.sequenceTimer) {\r\n          pause(this);\r\n        } else {\r\n          play(this);\r\n        }\r\n      });\r\n      /*\r\n       * Trigger the update on the range bar click.\r\n       */\r\n      input.addEventListener('click', function() {\r\n        updateChart();\r\n      });\r\n\r\n\r\n\r\n       window.iFrameResizer.onMessage = () => {};\r\n    };\r\n\r\n    window.iFrameResizer = {\r\n      onMessage: handleMessage,\r\n    };\r\n\r\n  </script>\r\n</body>\r\n\r\n  </html>\r\n`;\r\n\r\nreturn (\r\n  <div\r\n    className=\"w-100 d-flex justify-content-center align-items-center bg-primary\"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <>\r\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{\r\n            ...spinnerColors,\r\n          }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={{\r\n          data,\r\n          colors,\r\n          chartOption,\r\n          overrideOptions,\r\n          theme,\r\n        }}\r\n        onLoad={() => {\r\n          State.update({\r\n            isLoading: false,\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  </div>\r\n);\r\n\r\n//  props = {\r\n// data: {\r\n// \"title one\":{\r\n//   \"date1\": 15,\r\n//   \"date\": 25,\r\n// },\r\n// \"title tow\":{\r\n//   \"date1\": 65,\r\n//   \"date\": 29,\r\n// },\r\n// },\r\n//   colors: [\"blue\", \"red\"], //optional : tow colors\r\n// chartOption: {\r\n//         stepTime: 500,\r\n//         barInChart: 3,\r\n//         subBarChart: 'm',\r\n//         title: {\r\n//           text: 'title chart',\r\n//         },\r\n//         subtitle: {\r\n//           upSize: 20,\r\n//           downSize: 15,\r\n//           positionX: 0,\r\n//           positionY: 0\r\n//         }\r\n//       },\r\n//   spinnerColors: [], //optional : tow colors\r\n//   overrideOptions:{} // opt\r\n// themeColor: {\r\n//   chart: { //optional\r\n//     title: \"red\",\r\n//     subtitle: \"blue\",\r\n//     xAxis: \"red\",\r\n//     yAxis: \"blue\",\r\n//   },\r\n// },\r\n// };\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/bar-race", "fact_widget_deployments_id": "cbfc5ad7989fdfb76a3e97060921f327", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}