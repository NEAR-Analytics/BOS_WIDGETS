{"tx_hash": "EPteG1GtDeDPR8JdxfAN6RhkXhWUvdf9eQXYmGbgqhYo", "action_id_social": "uDQ1wRgJUNVQMXWWwoxQyqRpUAuvMtbR41sTZNtPfEM-0-widget", "block_id": 107715968, "block_timestamp": "2023-12-11T23:38:07.444Z", "signer_id": "lord1.near", "widget_name": "wrapped-social", "source_code": "const API_KEY = \"56604552-aa8c-4842-b4b0-51e49a10c4dd\";\r\nconst themeColor = props.themeColor;\r\n\r\nconst singer = props.singer;\r\nconst interval = props.interval || \"week\";\r\nconst queries = [\r\n  {\r\n    hash: null,\r\n    firstReqTime: 20,\r\n    id: 1,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"User\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `with \r\nusers_posts as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\r\n    from near.social.fact_posts    \r\n    where BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_comments as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):text as comment, \r\n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='comment' and comment is not null    \r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_repost as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \r\n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions as a, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='repost'    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_follow as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='graph'    \r\n        and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n)\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \r\n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \r\n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\r\n    where lower(type) in ('follow', 'unfollow')),\r\n\r\nusers_pokes as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):key as type, \r\n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where TRY_PARSE_JSON(l.value):key='poke'\r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_like as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):value:type as type, \r\n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\r\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='like' and type in ('like')\r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\n\r\nusers_hashtags as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='hashtag'    \r\n        and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n        )\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    TRY_PARSE_JSON(l.value):key as hashtag, \r\n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\r\n\r\nusers_premium as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \r\n    TO_TIMESTAMP(l.value) as expire_date\r\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \r\n        left join near.core.fact_actions_events_function_call b\r\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\r\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n    ),\r\n\r\nusers_activities as (\r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_addkey_events\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_decoded_actions\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_posts\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_profile_changes\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_widget_deployments),\r\n\r\nusers_min as (\r\n    select user, min(BLOCK_TIMESTAMP) as min_date\r\n    from users_activities\r\n    group by 1),\r\n\r\nposts as (\r\n    select user, count(*) as posts\r\n    from users_posts\r\n    group by 1 \r\n    ), \r\n\r\nsent_comments as (\r\n    select user, count(*) as sent_comments\r\n    from users_comments\r\n    group by 1 \r\n    ), \r\n\r\nreceived_comments as (\r\n    select accountId, count(*) as received_comments\r\n    from users_comments\r\n    group by 1 \r\n    ), \r\n\r\nsent_reposts as (\r\n    select user, count(*) as sent_reposts\r\n    from users_repost\r\n    group by 1 \r\n    ), \r\n\r\nreceived_reposts as (\r\n    select accountId, count(*) as received_reposts\r\n    from users_repost\r\n    group by 1 \r\n    ),\r\n\r\nfollowings as (\r\n    select user, count(*) as followings\r\n    from users_follow\r\n    where rank=1 and type ilike'follow'\r\n    group by 1 \r\n    ), \r\n\r\nfollowers as (\r\n    select accountId, count(*) as followers\r\n    from users_follow\r\n    where rank=1 and type ilike 'follow'\r\n    group by 1 \r\n    ), \r\n\r\nsent_pokes as (\r\n    select user, count(*) as sent_pokes\r\n    from users_pokes\r\n    group by 1 \r\n    ), \r\n\r\nreceived_pokes as (\r\n    select accountId, count(*) as received_pokes\r\n    from users_pokes\r\n    group by 1 \r\n    ),\r\n\r\nsent_likes as (\r\n    select user, count(*) as sent_likes\r\n    from users_like\r\n    where rank=1 and type='like'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_likes as (\r\n    select accountId, count(*) as received_likes\r\n    from users_like\r\n    where rank=1 \r\n    group by 1 \r\n    ), \r\n\r\nhashtags as (\r\n    select user, count(distinct hashtag) as hashtags\r\n    from users_hashtags\r\n    group by 1 \r\n    ), \r\n\r\nwidgets as (\r\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\r\n    from near.social.fact_widget_deployments\r\n    group by 1 \r\n    ),\r\n\r\nusers_stats as (\r\n    select  a.user as user,\r\n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\r\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\r\n    widgets, min_date\r\n    from users_min a\r\n    \r\n    left join users_premium b \r\n    on a.user=b.user and expire_date>=current_date\r\n    \r\n    left join posts up\r\n    on a.user=up.user\r\n    \r\n    left join sent_comments uc_s\r\n    on a.user=uc_s.user\r\n    left join received_comments uc_r\r\n    on a.user=uc_r.accountId\r\n    \r\n    left join sent_reposts ur_s\r\n    on a.user=ur_s.user\r\n    left join received_reposts ur_r\r\n    on a.user=ur_r.accountId\r\n    \r\n    left join followings uf_s\r\n    on a.user=uf_s.user \r\n    left join followers uf_r\r\n    on a.user=uf_r.accountId \r\n    \r\n    left join sent_pokes up_s\r\n    on a.user=up_s.user \r\n    left join received_pokes up_r\r\n    on a.user=up_r.accountId\r\n    \r\n    left join sent_likes ul_s\r\n    on a.user=ul_s.user\r\n    left join received_likes ul_r\r\n    on a.user=ul_r.accountId \r\n    \r\n    left join hashtags uh\r\n    on a.user=uh.user\r\n    \r\n    \r\n    left join widgets uw\r\n    on a.user=uw.user)\r\n\r\nselect \r\n    user as \"User\",\r\n     COALESCE(followers,0) as \"followers\",\r\n     COALESCE(followings,0) as \"followings\",\r\n     COALESCE(posts,0) as \"posts\",\r\n     COALESCE(sent_reposts,0) as \"reposts\",\r\n     COALESCE(received_reposts,0) as \"received_reposts\",\r\n     COALESCE(sent_comments,0) as \"comments\",\r\n     COALESCE(received_comments,0) as \"received_comments\",\r\n     COALESCE(sent_likes,0) as \"likes\",\r\n     COALESCE(received_likes,0) as \"received_likes\",\r\n     COALESCE(sent_pokes,0) as \"pokes\",\r\n     COALESCE(received_pokes,0) as \"received_pokes\",\r\n     COALESCE(hashtags,0) as \"hashtags\",\r\n     COALESCE(widgets,0) as \"widgets\",\r\n     split(min_date::date,'T')[0] as \"join_date\"\r\nfrom users_stats\r\nwhere user ='{{singer}}'`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 20,\r\n    id: 2,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"favorite_score\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: ` with \r\nusers_posts as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\r\n    from near.social.fact_posts\r\n    where BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_comments as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):text as comment, \r\n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='comment' and comment is not null\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_repost as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \r\n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions as a, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='repost'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_follow as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='graph'\r\n        and BLOCK_TIMESTAMP>='2023-01-01')\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \r\n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \r\n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\r\n    where type in ('follow', 'unfollow')),\r\n\r\nusers_pokes as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):key as type, \r\n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where TRY_PARSE_JSON(l.value):key='poke'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_like as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):value:type as type, \r\n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\r\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='like' and type in ('like')\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\n\r\nusers_hashtags as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='hashtag'\r\n        and BLOCK_TIMESTAMP>='2023-01-01')\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    TRY_PARSE_JSON(l.value):key as hashtag, \r\n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\r\n\r\nusers_premium as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \r\n    TO_TIMESTAMP(l.value) as expire_date\r\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \r\n        left join near.core.fact_actions_events_function_call b\r\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\r\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_activities as (\r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_addkey_events\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_decoded_actions\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_posts\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_profile_changes\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_widget_deployments),\r\n\r\nusers_min as (\r\n    select user, min(BLOCK_TIMESTAMP) as min_date\r\n    from users_activities\r\n    group by 1),\r\n\r\nposts as (\r\n    select user, count(*) as posts\r\n    from users_posts\r\n    group by 1 \r\n    ), \r\n\r\nsent_comments as (\r\n    select user, count(*) as sent_comments\r\n    from users_comments\r\n    group by 1 \r\n    ), \r\n\r\nreceived_comments as (\r\n    select accountId, count(*) as received_comments\r\n    from users_comments\r\n    where user='{{singer}}'\r\n    group by 1 \r\n    ), \r\n\r\nsent_reposts as (\r\n    select user, count(*) as sent_reposts\r\n    from users_repost\r\n    group by 1 \r\n    ), \r\n\r\nreceived_reposts as (\r\n    select accountId, count(*) as received_reposts\r\n    from users_repost\r\n    where user='{{singer}}'\r\n    group by 1 \r\n    ),\r\n\r\nfollowings as (\r\n    select user, count(*) as followings\r\n    from users_follow\r\n    where rank=1 and type='follow'\r\n    group by 1 \r\n    ), \r\n\r\nfollowers as (\r\n    select accountId, count(*) as followers\r\n    from users_follow\r\n    where rank=1 and type='follow'\r\n    group by 1 \r\n    ), \r\n\r\nsent_pokes as (\r\n    select user, count(*) as sent_pokes\r\n    from users_pokes\r\n    group by 1 \r\n    ), \r\n\r\nreceived_pokes as (\r\n    select accountId, count(*) as received_pokes\r\n    from users_pokes\r\n    where user='{{singer}}'\r\n    group by 1 \r\n    ),\r\n\r\nsent_likes as (\r\n    select user, count(*) as sent_likes\r\n    from users_like\r\n    where rank=1 and type='like'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_likes as (\r\n    select accountId, count(*) as received_likes\r\n    from users_like\r\n    where user='{{singer}}'\r\n    and rank=1 \r\n    group by 1 \r\n    ), \r\n\r\nhashtags as (\r\n    select user, count(distinct hashtag) as hashtags\r\n    from users_hashtags\r\n    group by 1 \r\n    ), \r\n\r\nwidgets as (\r\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\r\n    from near.social.fact_widget_deployments\r\n    where BLOCK_TIMESTAMP>='2023-01-01'\r\n    group by 1 \r\n    ),\r\n\r\nusers_stats as (\r\n    select  a.user  as user, \r\n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\r\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\r\n    widgets, min_date\r\n    from users_min a\r\n    \r\n    left join users_premium b \r\n    on a.user=b.user and expire_date>=current_date\r\n    \r\n    left join posts up\r\n    on a.user=up.user\r\n    \r\n    left join sent_comments uc_s\r\n    on a.user=uc_s.user\r\n    left join received_comments uc_r\r\n    on a.user=uc_r.accountId\r\n    \r\n    left join sent_reposts ur_s\r\n    on a.user=ur_s.user\r\n    left join received_reposts ur_r\r\n    on a.user=ur_r.accountId\r\n    \r\n    left join followings uf_s\r\n    on a.user=uf_s.user \r\n    left join followers uf_r\r\n    on a.user=uf_r.accountId \r\n    \r\n    left join sent_pokes up_s\r\n    on a.user=up_s.user \r\n    left join received_pokes up_r\r\n    on a.user=up_r.accountId\r\n    \r\n    left join sent_likes ul_s\r\n    on a.user=ul_s.user\r\n    left join received_likes ul_r\r\n    on a.user=ul_r.accountId \r\n    \r\n    left join hashtags uh\r\n    on a.user=uh.user\r\n    \r\n    \r\n    left join widgets uw\r\n    on a.user=uw.user)\r\n\r\nselect user as \"user\",\r\nCOALESCE(received_reposts,0) as \"received_reposts\",\r\nCOALESCE(received_comments,0) as \"received_comments\",\r\nCOALESCE(received_likes,0) as \"received_likes\",\r\nCOALESCE(received_pokes,0) as \"received_pokes\",\r\n-- 10 * IFNULL(posts, 0) +           -- Impact of posts\r\n2 * IFNULL(received_comments, 0) +  -- Impact of received comments\r\n3 * IFNULL(received_reposts, 0) +  -- Impact of received reposts\r\n0.1 * IFNULL(received_pokes, 0) + -- Impact of received pokes\r\n0.5 * IFNULL(received_likes, 0)  -- Impact of received likes\r\nAS \"favorite_score\"\r\nfrom users_stats\r\nwhere \"favorite_score\">0\r\norder by \"favorite_score\" desc \r\nlimit 200`,\r\n  },\r\n\r\n  {\r\n    hash: null,\r\n    firstReqTime: 20,\r\n    id: 3,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"fan_score\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: ` with \r\nusers_posts as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\r\n    from near.social.fact_posts\r\n    where BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_comments as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):text as comment, \r\n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='comment' and comment is not null\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_repost as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \r\n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions as a, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='repost'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_follow as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='graph'\r\n        and BLOCK_TIMESTAMP>='2023-01-01')\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \r\n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \r\n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\r\n    where type in ('follow', 'unfollow')),\r\n\r\nusers_pokes as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):key as type, \r\n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where TRY_PARSE_JSON(l.value):key='poke'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_like as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):value:type as type, \r\n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\r\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='like' and type in ('like')\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\n\r\nusers_hashtags as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='hashtag'\r\n        and BLOCK_TIMESTAMP>='2023-01-01')\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    TRY_PARSE_JSON(l.value):key as hashtag, \r\n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\r\n\r\nusers_premium as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \r\n    TO_TIMESTAMP(l.value) as expire_date\r\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \r\n        left join near.core.fact_actions_events_function_call b\r\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\r\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_activities as (\r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_addkey_events\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_decoded_actions\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_posts\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_profile_changes\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_widget_deployments),\r\n\r\nusers_min as (\r\n    select user, min(BLOCK_TIMESTAMP) as min_date\r\n    from users_activities\r\n    group by 1),\r\n\r\nposts as (\r\n    select user, count(*) as posts\r\n    from users_posts\r\n    group by 1 \r\n    ), \r\n\r\nsent_comments as (\r\n    select user, count(*) as sent_comments\r\n    from users_comments\r\n    where accountId='{{singer}}'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_comments as (\r\n    select accountId, count(*) as received_comments\r\n    from users_comments\r\n    where user='{{singer}}'\r\n    group by 1 \r\n    ), \r\n\r\nsent_reposts as (\r\n    select user, count(*) as sent_reposts\r\n    from users_repost\r\n    where accountId='{{singer}}'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_reposts as (\r\n    select accountId, count(*) as received_reposts\r\n    from users_repost\r\n    where user='{{singer}}'\r\n    group by 1 \r\n    ),\r\n\r\nfollowings as (\r\n    select user, count(*) as followings\r\n    from users_follow\r\n    where rank=1 and type='follow'\r\n    group by 1 \r\n    ), \r\n\r\nfollowers as (\r\n    select accountId, count(*) as followers\r\n    from users_follow\r\n    where rank=1 and type='follow'\r\n    group by 1 \r\n    ), \r\n\r\nsent_pokes as (\r\n    select user, count(*) as sent_pokes\r\n    from users_pokes\r\n    where accountId='{{singer}}'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_pokes as (\r\n    select accountId, count(*) as received_pokes\r\n    from users_pokes\r\n    where user='{{singer}}'\r\n    group by 1 \r\n    ),\r\n\r\nsent_likes as (\r\n    select user, count(*) as sent_likes\r\n    from users_like\r\n    where rank=1 and type='like'\r\n    and accountId='{{singer}}'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_likes as (\r\n    select accountId, count(*) as received_likes\r\n    from users_like\r\n    where user='{{singer}}'\r\n    and rank=1 \r\n    group by 1 \r\n    ), \r\n\r\nhashtags as (\r\n    select user, count(distinct hashtag) as hashtags\r\n    from users_hashtags\r\n    group by 1 \r\n    ), \r\n\r\nwidgets as (\r\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\r\n    from near.social.fact_widget_deployments\r\n    where BLOCK_TIMESTAMP>='2023-01-01'\r\n    group by 1 \r\n    ),\r\n\r\nusers_stats as (\r\n    select  a.user  as user, \r\n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\r\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\r\n    widgets, min_date\r\n    from users_min a\r\n    \r\n    left join users_premium b \r\n    on a.user=b.user and expire_date>=current_date\r\n    \r\n    left join posts up\r\n    on a.user=up.user\r\n    \r\n    left join sent_comments uc_s\r\n    on a.user=uc_s.user\r\n    left join received_comments uc_r\r\n    on a.user=uc_r.accountId\r\n    \r\n    left join sent_reposts ur_s\r\n    on a.user=ur_s.user\r\n    left join received_reposts ur_r\r\n    on a.user=ur_r.accountId\r\n    \r\n    left join followings uf_s\r\n    on a.user=uf_s.user \r\n    left join followers uf_r\r\n    on a.user=uf_r.accountId \r\n    \r\n    left join sent_pokes up_s\r\n    on a.user=up_s.user \r\n    left join received_pokes up_r\r\n    on a.user=up_r.accountId\r\n    \r\n    left join sent_likes ul_s\r\n    on a.user=ul_s.user\r\n    left join received_likes ul_r\r\n    on a.user=ul_r.accountId \r\n    \r\n    left join hashtags uh\r\n    on a.user=uh.user\r\n    \r\n    \r\n    left join widgets uw\r\n    on a.user=uw.user)\r\n\r\nselect user as \"user\",\r\nCOALESCE(sent_reposts,0) as \"reposts\",\r\nCOALESCE(sent_comments,0) as \"comments\",\r\nCOALESCE(sent_likes,0) as \"likes\",\r\nCOALESCE(sent_pokes,0) as \"pokes\",\r\n-- 10 * IFNULL(posts, 0) +           -- Impact of posts\r\n2 * IFNULL(sent_comments, 0) +  -- Impact of received comments\r\n3 * IFNULL(sent_reposts, 0) +  -- Impact of received reposts\r\n0.1 * IFNULL(sent_pokes, 0) + -- Impact of received pokes\r\n0.5 * IFNULL(sent_likes, 0)  -- Impact of received likes\r\nAS \"fan_score\"\r\nfrom users_stats\r\nwhere user!='{{singer}}' and \"fan_score\">0\r\norder by \"fan_score\" desc \r\nlimit 200`,\r\n  },\r\n\r\n  {\r\n    hash: null,\r\n    firstReqTime: 8,\r\n    id: 4,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: ` with \r\nusers_posts as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\r\n    from near.social.fact_posts\r\n    where BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_comments as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):text as comment, \r\n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='comment' and comment is not null\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_repost as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \r\n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions as a, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='repost'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_follow as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='graph'\r\n        and BLOCK_TIMESTAMP>='2023-01-01')\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \r\n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \r\n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\r\n    where type in ('follow', 'unfollow')),\r\n\r\nusers_pokes as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):key as type, \r\n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where TRY_PARSE_JSON(l.value):key='poke'\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\nusers_like as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):value:type as type, \r\n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\r\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='like' and type in ('like')\r\n    and BLOCK_TIMESTAMP>='2023-01-01'),\r\n\r\n\r\nusers_hashtags as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='hashtag'\r\n        and BLOCK_TIMESTAMP>='2023-01-01')\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    TRY_PARSE_JSON(l.value):key as hashtag, \r\n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\r\n\r\n\r\nusers_activities as (\r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_addkey_events\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_decoded_actions\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_posts\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_profile_changes\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_widget_deployments),\r\n\r\nusers_min as (\r\n    select user, min(BLOCK_TIMESTAMP) as min_date\r\n    from users_activities\r\n    group by 1),\r\n\r\nposts as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\",user as \"User\", 'Post' as \"type\", count(*) as trxs\r\n    from users_posts\r\n    group by 1,2,3\r\n    ), \r\n\r\nsent_comments as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Comment' as \"type\",count(*) as trxs\r\n    from users_comments\r\n    group by 1,2,3\r\n    ), \r\n\r\nreceived_comments as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Received_Comment' as \"type\",count(*) as trxs\r\n    from users_comments\r\n    group by 1,2,3 \r\n    ), \r\n\r\nsent_reposts as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Repost' as \"type\",count(*) as trxs\r\n    from users_repost\r\n    group by 1,2,3 \r\n    ), \r\n\r\nreceived_reposts as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Receive_Repost' as \"type\",count(*) as trxs\r\n    from users_repost\r\n    group by 1,2,3 \r\n    ),\r\n\r\nfollow as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", user as \"User\", initcap(type) as \"type\", count(*) as trxs\r\n    from users_follow\r\n    where rank=1 and type='follow'\r\n    group by 1,2,3 \r\n    ),\r\n\r\nsent_pokes as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Poke' as \"type\",count(*) as trxs\r\n    from users_pokes\r\n    group by 1,2,3 \r\n    ), \r\n\r\nreceived_pokes as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Receive_Poke' as \"type\",count(*) as trxs\r\n    from users_pokes\r\n    group by 1,2,3 \r\n    ),\r\n\r\nsent_likes as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", user as \"User\", 'Like' as \"type\",count(*) as trxs\r\n    from users_like\r\n    where rank=1 and type='like'\r\n    group by 1,2,3 \r\n    ), \r\n\r\nreceived_likes as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", accountId as \"User\", 'Receive_Like' as \"type\", count(*) as trxs\r\n    from users_like\r\n    where rank=1 \r\n    group by 1,2,3\r\n    ), \r\n\r\nwidgets as (\r\n    select date_trunc({{week}},BLOCK_TIMESTAMP) as \"Date\", SIGNER_ID as \"User\", 'Widget' as \"type\",count(distinct TX_HASH) as trxs\r\n    from near.social.fact_widget_deployments\r\n    group by 1,2,3\r\n    )\r\n\r\n\r\n\r\n,final as \r\n      (\r\n      select * \r\n       from \r\n                (select * from posts\r\n                union all \r\n                select * from sent_comments\r\n                union all \r\n                select * from sent_reposts\r\n                union all \r\n                select * from received_comments\r\n                union all \r\n                select * from sent_reposts\r\n                union all \r\n                select * from received_reposts\r\n                union all \r\n                select * from follow\r\n                union all\r\n                select * from sent_pokes\r\n                union all \r\n                select * from received_pokes\r\n                union all \r\n                select * from sent_likes\r\n                union all \r\n                select * from received_likes\r\n                union all \r\n                select * from widgets\r\n                )\r\n      where \"User\"='{{singer}}' )\r\n\r\n\r\nselect \r\ndate_part(epoch,to_timestamp(\"Date\"::date)) as \"date\" ,\r\nsum(case when \"type\"='Like' then trxs else 0 end) as \"like\",\r\nsum(case when \"type\"='Post' then trxs else 0 end) as \"post\",\r\nsum(case when \"type\"='Received_Comment' then trxs else 0 end) as \"received_comment\",\r\nsum(case when \"type\"='Repost' then trxs else 0 end) as \"repost\",\r\nsum(case when \"type\"='Receive_Repost' then trxs else 0 end) as \"receive_repost\",\r\nsum(case when \"type\"='Poke' then trxs else 0 end) as \"poke\",\r\nsum(case when \"type\"='Receive_Poke' then trxs else 0 end) as \"receive_poke\",\r\nsum(case when \"type\"='Receive_Like' then trxs else 0 end) as \"receive_like\",\r\nsum(case when \"type\"='Widget' then trxs else 0 end) as \"widget\",\r\nsum(case when \"type\"='follow' then trxs else 0 end) as \"follow\"\r\nfrom final \r\ngroup by 1 \r\norder by \"date\" asc  \r\n`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 10,\r\n    id: 5,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"action\",\r\n          direction: \"asc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `with \r\nusers_posts as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    POST_TEXT as post, BLOCK_ID as blockHeight, tx_hash\r\n    from near.social.fact_posts    \r\n    where BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_comments as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):text as comment, \r\n    split(TRY_PARSE_JSON(l.value):item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='comment' and comment is not null    \r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_repost as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value)[0]:value:type as type, \r\n    split(TRY_PARSE_JSON(l.value)[0]:value:item:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value)[0]:value:item:blockHeight as blockHeight, tx_hash\r\n    from near.social.fact_decoded_actions as a, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='repost'    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_follow as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='graph'    \r\n        and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n)\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    COALESCE(TRY_PARSE_JSON(l.value):type, TRY_PARSE_JSON(l.value):value:type) as type, \r\n    COALESCE(TRY_PARSE_JSON(l.value):accountId, TRY_PARSE_JSON(l.value):value:accountId) as accountId, \r\n    tx_hash, rank() over (partition by user, accountId order by BLOCK_TIMESTAMP desc) as rank\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l\r\n    where lower(type) in ('follow', 'unfollow')),\r\n\r\nusers_pokes as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):key as type, \r\n    TRY_PARSE_JSON(l.value):value:accountId as accountId, tx_hash\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where TRY_PARSE_JSON(l.value):key='poke'\r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\nusers_like as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user,\r\n    TRY_PARSE_JSON(l.value):value:type as type, \r\n    split(TRY_PARSE_JSON(l.value):key:path,'/')[0] as accountId,\r\n    TRY_PARSE_JSON(l.value):key:blockHeight as blockHeight, tx_hash,\r\n    rank() over (partition by user, accountId, blockHeight order by BLOCK_TIMESTAMP desc) as rank\r\n    from near.social.fact_decoded_actions, \r\n    LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n    where l.key='like' and type in ('like')\r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n    ),\r\n\r\n\r\nusers_hashtags as (\r\n    with temp_data as (\r\n        select BLOCK_TIMESTAMP, SIGNER_ID as user, tx_hash, l.value as data\r\n        from near.social.fact_decoded_actions, \r\n        LATERAL FLATTEN(INPUT => NODE_DATA) l\r\n        where l.key='hashtag'    \r\n        and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n\r\n        )\r\n\r\n    select BLOCK_TIMESTAMP, user,\r\n    TRY_PARSE_JSON(l.value):key as hashtag, \r\n    split(TRY_PARSE_JSON(l.value):value:path,'/')[2] as type,tx_hash\r\n    from temp_data, \r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(data)) l),\r\n\r\nusers_premium as (\r\n    select BLOCK_TIMESTAMP, SIGNER_ID as user, DEPOSIT/1e24 as amount, \r\n    TO_TIMESTAMP(l.value) as expire_date\r\n    from(select a.*, b.args as b_args from near.core.fact_actions_events_function_call a \r\n        left join near.core.fact_actions_events_function_call b\r\n        on a.tx_hash=b.tx_hash and b.METHOD_NAME='set'),\r\n    LATERAL FLATTEN(INPUT => PARSE_JSON(b_args:data:\"premium.social.near\":badge:premium:accounts)) as l\r\n    where RECEIVER_ID='premium.social.near' and METHOD_NAME='purchase'\r\n    and BLOCK_TIMESTAMP::date> '2023-01-01'\r\n    ),\r\n\r\nusers_activities as (\r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_addkey_events\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_decoded_actions\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_posts\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_profile_changes\r\n    union \r\n    select distinct BLOCK_TIMESTAMP, SIGNER_ID as user\r\n    from near.social.fact_widget_deployments),\r\n\r\nusers_min as (\r\n    select user, min(BLOCK_TIMESTAMP) as min_date\r\n    from users_activities\r\n    group by 1),\r\n\r\nposts as (\r\n    select user, count(*) as posts\r\n    from users_posts\r\n    group by 1 \r\n    ), \r\n\r\nsent_comments as (\r\n    select user, count(*) as sent_comments\r\n    from users_comments\r\n    group by 1 \r\n    ), \r\n\r\nreceived_comments as (\r\n    select accountId, count(*) as received_comments\r\n    from users_comments\r\n    group by 1 \r\n    ), \r\n\r\nsent_reposts as (\r\n    select user, count(*) as sent_reposts\r\n    from users_repost\r\n    group by 1 \r\n    ), \r\n\r\nreceived_reposts as (\r\n    select accountId, count(*) as received_reposts\r\n    from users_repost\r\n    group by 1 \r\n    ),\r\n\r\nfollowings as (\r\n    select user, count(*) as followings\r\n    from users_follow\r\n    where rank=1 and type ilike'follow'\r\n    group by 1 \r\n    ), \r\n\r\nfollowers as (\r\n    select accountId, count(*) as followers\r\n    from users_follow\r\n    where rank=1 and type ilike 'follow'\r\n    group by 1 \r\n    ), \r\n\r\nsent_pokes as (\r\n    select user, count(*) as sent_pokes\r\n    from users_pokes\r\n    group by 1 \r\n    ), \r\n\r\nreceived_pokes as (\r\n    select accountId, count(*) as received_pokes\r\n    from users_pokes\r\n    group by 1 \r\n    ),\r\n\r\nsent_likes as (\r\n    select user, count(*) as sent_likes\r\n    from users_like\r\n    where rank=1 and type='like'\r\n    group by 1 \r\n    ), \r\n\r\nreceived_likes as (\r\n    select accountId, count(*) as received_likes\r\n    from users_like\r\n    where rank=1 \r\n    group by 1 \r\n    ), \r\n\r\nhashtags as (\r\n    select user, count(distinct hashtag) as hashtags\r\n    from users_hashtags\r\n    group by 1 \r\n    ), \r\n\r\nwidgets as (\r\n    select SIGNER_ID as user, count(distinct TX_HASH) as widgets\r\n    from near.social.fact_widget_deployments\r\n    group by 1 \r\n    ),\r\n\r\nusers_stats as (\r\n    select  a.user as user,\r\n    posts, sent_comments, received_comments, sent_reposts, received_reposts,\r\n    followings, followers, sent_pokes, received_pokes, sent_likes, received_likes, hashtags,\r\n    widgets, min_date\r\n    from users_min a\r\n    \r\n    left join users_premium b \r\n    on a.user=b.user and expire_date>=current_date\r\n    \r\n    left join posts up\r\n    on a.user=up.user\r\n    \r\n    left join sent_comments uc_s\r\n    on a.user=uc_s.user\r\n    left join received_comments uc_r\r\n    on a.user=uc_r.accountId\r\n    \r\n    left join sent_reposts ur_s\r\n    on a.user=ur_s.user\r\n    left join received_reposts ur_r\r\n    on a.user=ur_r.accountId\r\n    \r\n    left join followings uf_s\r\n    on a.user=uf_s.user \r\n    left join followers uf_r\r\n    on a.user=uf_r.accountId \r\n    \r\n    left join sent_pokes up_s\r\n    on a.user=up_s.user \r\n    left join received_pokes up_r\r\n    on a.user=up_r.accountId\r\n    \r\n    left join sent_likes ul_s\r\n    on a.user=ul_s.user\r\n    left join received_likes ul_r\r\n    on a.user=ul_r.accountId \r\n    \r\n    left join hashtags uh\r\n    on a.user=uh.user\r\n    \r\n    \r\n    left join widgets uw\r\n    on a.user=uw.user)\r\n\r\n      select \r\n           COALESCE(posts,0) as \"action\",\r\n           'posts' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(received_reposts,0) as \"action\",\r\n           'received_reposts' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n      \r\n      select \r\n           COALESCE(sent_reposts,0) as \"action\",\r\n           'reposts' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(sent_comments,0) as \"action\",\r\n           'comments' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(received_comments,0) as \"action\",\r\n           'Received Comments' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(sent_likes,0) as \"action\",\r\n           'Likes' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(received_likes,0) as \"action\",\r\n           'Received Likes' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(sent_pokes,0) as \"action\",\r\n           'pokes' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(received_pokes,0) as \"action\",\r\n           'Received Pokes' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(hashtags,0) as \"action\",\r\n           'Hashtags' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}'\r\n\r\n\r\nunion \r\n\r\n      select \r\n           COALESCE(widgets,0) as \"action\",\r\n           'Widgets' as \"type\"\r\n      from users_stats\r\n      where user ='{{singer}}' \r\n`,\r\n  },\r\n];\r\n\r\n//---------------------------------------------------------------------------------------------------\r\n\r\nconst followers = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].followers,\r\n  brand: `Followers`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst followings = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].followings,\r\n  brand: `Followings`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst posts = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].posts,\r\n  brand: `Posts`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst reposts = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].reposts,\r\n  brand: `Reposts`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst comments = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].comments,\r\n  brand: `Comments`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst likes = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].likes,\r\n  brand: `Likes`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst pokes = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].pokes,\r\n  brand: `Pokes`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst widgets = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].widgets,\r\n  brand: `Widgets`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst hashtags = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].hashtags,\r\n  brand: `Hashtags`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst join_date = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].join_date,\r\n  brand: `Join Date`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst received_pokes = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].received_pokes,\r\n  brand: `Received`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"Pokes\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst received_likes = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].received_likes,\r\n  brand: `Received`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"Likes\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst received_comments = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].received_comments,\r\n  brand: `Received`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"Comments\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst received_reposts = {\r\n  height: \"80px\",\r\n  align: \"center\",\r\n  description: state.result[\"query\" + 1]?.data[0].received_reposts,\r\n  brand: `Received`,\r\n  fontsize: \"15px\",\r\n  fontweight: \"10px\",\r\n  afterbrand: \"Reposts\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n\r\n// state ####################################\r\n\r\nState.init({\r\n  searchedSinger: \"\",\r\n  searchedInterval: \"\",\r\n  result: {},\r\n  loader: [],\r\n  isLoading: false,\r\n  error: [],\r\n  queriesRuned: false,\r\n  tab: tabs.left,\r\n});\r\n\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === singer && state.searchedInterval === interval) {\r\n    return;\r\n  } else {\r\n    State.update({\r\n      searchedSinger: singer,\r\n      searchedInterval: interval,\r\n      loader: [],\r\n      result: {},\r\n      isLoading: true,\r\n      queriesRuned: false,\r\n    });\r\n  }\r\n};\r\ncheckNewSinger();\r\n// handle hashed data #############################\r\nconst handleHasedData = ({ hash, id }) => {\r\n  if (state.result[\"query\" + id].isDone) return;\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`query ${id}: ${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: true,\r\n          data: null,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    const filteredData = result.data.filter(\r\n      (row) => row.SINGER === state.searchedSinger\r\n    );\r\n    State.update({\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: filteredData,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n// handle runed data ###################################\r\nconst createQuery = (queries, singer, interval) => {\r\n  const queriesArr = queries.map((q) => {\r\n    const queryWithProps = q.query\r\n      .replaceAll(\"{{singer}}\", singer)\r\n      .replaceAll(\"{{week}}\", interval);\r\n    q.query = queryWithProps;\r\n    return q;\r\n  });\r\n  return queriesArr;\r\n};\r\nconst isAllDataLoaded = () => {\r\n  const resultArr = Object.entries(state.result);\r\n  if (resultArr.length === 0) return false;\r\n  return resultArr.every((query) => {\r\n    return !query[1].isLoading;\r\n  });\r\n};\r\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\r\n  State.update(({ result, loader }) => {\r\n    const newResult = {\r\n      ...result,\r\n      [`query${id}`]: {\r\n        data:\r\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\r\n        error: !!error,\r\n        isLoading: isLoading,\r\n        queryRunId: queryRunId,\r\n        id: id,\r\n      },\r\n    };\r\n    const newLoader = loader.filter(({ id: loaderId }) => loaderId !== id);\r\n    if (error) {\r\n      const queryError = `query${id} : ${error}`;\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        loader: newLoader.length === 0 ? [] : newLoader,\r\n        error: [...state.error, queryError],\r\n      };\r\n    } else {\r\n      if (data) {\r\n        Storage.set(\r\n          `${state.searchedSinger}-${state.searchedInterval}-${id}`,\r\n          queryRunId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        ...(data && { loader: newLoader.length === 0 ? [] : newLoader }),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst runqueries = (queries) => {\r\n  if (state.searchedSinger.length === 0) {\r\n    State.update({\r\n      isLoading: false,\r\n      error: [...state.error, \"singer is not provided\"],\r\n    });\r\n    return;\r\n  }\r\n  5;\r\n\r\n  const queriesArr = createQuery(\r\n    queries,\r\n    state.searchedSinger,\r\n    state.searchedInterval\r\n  );\r\n  const loader = queriesArr.map((q) => {\r\n    const queryRunId = Storage.get(\r\n      `${state.searchedSinger}-${state.searchedInterval}-${q.id}`\r\n    );\r\n\r\n    const props = {\r\n      apiKey: API_KEY,\r\n      id: q.id,\r\n      query: q.query,\r\n      onResult: updateResultState,\r\n      firstReqTime: q.firstReqTime,\r\n      queryRunId,\r\n      queryOption: {\r\n        page: {\r\n          number: 1,\r\n          size: 1000,\r\n        },\r\n        cacheTime: 60,\r\n        ...q?.queryOption,\r\n      },\r\n    };\r\n    return {\r\n      id: q.id,\r\n      element: (\r\n        <Widget\r\n          src=\"lord1.near/widget/api-flipside\"\r\n          id={q.id}\r\n          key={q.id}\r\n          props={props}\r\n        />\r\n      ),\r\n    };\r\n  });\r\n  State.update({\r\n    loader: loader,\r\n    isLoading: true,\r\n    queriesRuned: true,\r\n  });\r\n};\r\n\r\nif (isAllDataLoaded()) {\r\n  State.update({ isLoading: false });\r\n}\r\n\r\nif (state.isLoading) {\r\n  const withHashQueries = [];\r\n  const withoutHashQueries = [];\r\n  queries.forEach(({ hash, id, query, ...other }) => {\r\n    if (hash) {\r\n      withHashQueries.push({ hash, id });\r\n    }\r\n    if (query) {\r\n      withoutHashQueries.push({ query, hash, id, ...other });\r\n    }\r\n  });\r\n  withHashQueries.forEach((query) => handleHasedData(query));\r\n  if (!state.queriesRuned) {\r\n    runqueries(withoutHashQueries);\r\n  }\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n// get props charts #######################################\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const groupedData = {};\r\n  for (const item of data) {\r\n    const keyValue = item[key];\r\n    const valueValue = item[value];\r\n\r\n    if (groupedData[keyValue]) {\r\n      groupedData[keyValue] += valueValue;\r\n    } else {\r\n      groupedData[keyValue] = valueValue;\r\n    }\r\n  }\r\n\r\n  const dataFormat = Object.entries(groupedData).map(\r\n    ([groupKey, groupValue]) => [groupKey, groupValue]\r\n  );\r\n\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\n// dom sections ##############################################\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst ChartIsLoading = (queryId) => (\r\n  <div\r\n    className={`w-100 ${\r\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\r\n    }`}\r\n  >\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\n\r\nconst CardIsLoading = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\n\r\nlet TableSection = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <Widget\r\n                src=\"mob.near/widget/Profile.InlineBlock\"\r\n                props={{\r\n                  accountId: singer,\r\n                  themeColor: {\r\n                    profile_large: themeColor.profile_large,\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={join_date}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={hashtags} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={followers}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={posts} />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={reposts} />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={comments} />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={likes} />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={pokes} />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={followings}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget src=\"lord1.near/widget/header-dynamic\" props={widgets} />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={received_reposts}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={received_comments}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={received_likes}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <Widget\r\n                src=\"lord1.near/widget/header-dynamic\"\r\n                props={received_pokes}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet TableLeft = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"p-2 rounded-4 overflow-auto\">\r\n      {CardIsLoading(2)}\r\n      {CardHasError(2)}\r\n      {state.result[\"query\" + 2]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 2]?.data,\r\n            rowsCount: 5,\r\n            columns: [\r\n              {\r\n                title: \"User\",\r\n                key: \"user\",\r\n                colors: \"#806ce1\",\r\n                link: \"yes\",\r\n                hyperlink: \"yes\",\r\n                beforehref:\r\n                  \"https://near.social/mob.near/widget/ProfilePage?accountId=\",\r\n              },\r\n              {\r\n                title: \"Received Reposts\",\r\n                key: \"received_reposts\",\r\n              },\r\n              { title: \"Received Comments\", key: \"received_comments\" },\r\n              { title: \"Received Likes\", key: \"received_likes\" },\r\n              { title: \"Received Pokes\", key: \"received_pokes\" },\r\n              { title: \"Favorite Score\", key: \"favorite_score\" },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet TableRight = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"p-2 rounded-4 overflow-auto\">\r\n      {CardIsLoading(3)}\r\n      {CardHasError(3)}\r\n      {state.result[\"query\" + 3]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 3]?.data,\r\n            rowsCount: 5,\r\n            columns: [\r\n              {\r\n                title: \"User\",\r\n                key: \"user\",\r\n                colors: \"#806ce1\",\r\n                link: \"yes\",\r\n                hyperlink: \"yes\",\r\n                beforehref:\r\n                  \"https://near.social/mob.near/widget/ProfilePage?accountId=\",\r\n              },\r\n              { title: \"Reposts\", key: \"reposts\" },\r\n              { title: \"comments\", key: \"comments\" },\r\n              { title: \"likes\", key: \"likes\" },\r\n              { title: \"Pokes\", key: \"pokes\" },\r\n              { title: \"Fan Score\", key: \"fan_score\" },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\nlet Chartpie = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div className=\" col-12 \">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"w-100 mx-auto shadow-sm rounded-4 p-2\"\r\n      >\r\n        {ChartIsLoading(5)}\r\n        {ChartHasError(5)}\r\n        {state.result[\"query\" + 5]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/Pie-chart\"\r\n            props={getPieProps(\r\n              state.result[\"query\" + 5]?.data,\r\n              [\"type\", \"action\"],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"\",\r\n                type: \"pie\",\r\n                connector: true,\r\n                legend: true,\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nlet ChartSections = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div className=\"py-2\"></div>\r\n    <div className=\" col-12\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2\"\r\n      >\r\n        {ChartIsLoading(4)}\r\n        {ChartHasError(4)}\r\n        {state.result[\"query\" + 4]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/mix-chart\"\r\n            props={getMixProps(\r\n              state.result[\"query\" + 4]?.data,\r\n              \"date\",\r\n              [\r\n                {\r\n                  key: \"like\",\r\n                  seriesName: \"Like\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"received_comment\",\r\n                  seriesName: \"Received Comment\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"post\",\r\n                  seriesName: \"Post\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"repost\",\r\n                  seriesName: \"Repost\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"receive_repost\",\r\n                  seriesName: \"Receive Repost\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"poke\",\r\n                  seriesName: \"Poke\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"receive_poke\",\r\n                  seriesName: \"Receive Poke\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"receive_like\",\r\n                  seriesName: \"Receive Like\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"widget\",\r\n                  seriesName: \"Widget\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"follow\",\r\n                  seriesName: \"Follow\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n              ],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"Activity\",\r\n                subtitle: `Number of transactions `,\r\n                stacking: \"normal\",\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nreturn (\r\n  <>\r\n    {state.loader && (\r\n      <div className=\"d-none\">{state.loader.map((l) => l?.element)}</div>\r\n    )}\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div\r\n      className=\"w-100\"\r\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\r\n    >\r\n      <Widget src=\"lord1.near/widget/header-dynamic\" props={tabel} />\r\n      <div className=\"w-100\">{TableSection}</div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8\">{ChartSections}</div>\r\n        <div className=\"col-md-4\">{Chartpie}</div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <Widget\r\n            src=\"lord1.near/widget/header-dynamic\"\r\n            props={favorite_score}\r\n          />\r\n          {TableLeft}\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <Widget src=\"lord1.near/widget/header-dynamic\" props={fan_score} />\r\n          {TableRight}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-social", "fact_widget_deployments_id": "890761214ce30ac86d1845f06e2d678d", "inserted_timestamp": "2023-12-12T01:45:23.808Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 8}