{"tx_hash": "GgqK95oyBZN2xxeaE5zc1Xj11CP5PpUiwNRQWc7AGt2q", "action_id_social": "D3wpA1kpLUHMHsNFFX7s8ysGzeUYkb9v2aikUwA4BeoU-0-widget", "block_id": 99009547, "block_timestamp": "2023-08-17T11:10:20.385Z", "signer_id": "lord1.near", "widget_name": "api-flipside", "source_code": "const API_KEY = props.apiKey;\r\nconst id = props.id;\r\nconst firstReqTime = props.firstReqTime || 5;\r\nconst query = props.query;\r\nconst cacheTime = props?.queryOption?.cacheTime ?? 360;\r\nconst queryRunId = props?.queryRunId;\r\nconst pageQuery =\r\n  props?.queryOption?.page?.number && props?.queryOption?.page?.size\r\n    ? props.queryOption.page\r\n    : { number: 1, size: 10000 };\r\nconst sortQuery = props?.queryOption?.sortBy\r\n  ? props.queryOption.sortBy\r\n  : undefined;\r\nconst filterQuery = props?.queryOption?.filter\r\n  ? props.queryOption.filter\r\n  : undefined;\r\nconst test = (res) => {\r\n  console.log(\"total res\", res);\r\n};\r\nconst onResult = props.onResult || test;\r\nState.init({\r\n  queryRunId: queryRunId,\r\n  isQueryRunning: false,\r\n  isInitialRun: true,\r\n  isLoading: false,\r\n  data: null,\r\n  error: null,\r\n});\r\nlet timeOutId;\r\nif (state.isQueryRunning) {\r\n  console.log(\"ti1\");\r\n  const refetch = () => {\r\n    console.log(\"ti2\");\r\n    queryStatus(state.queryRunId).then(({ error, isRunning }) => {\r\n      if (error) {\r\n        State.update({ isLoading: false });\r\n        State.update({ isQueryRunning: false });\r\n        State.update({ error });\r\n      } else if (isRunning) {\r\n        console.log(\"ti runing\");\r\n        timeOutId = setTimeout(refetch, 5000);\r\n      } else {\r\n        queryResult(state.queryRunId).then(({ data, error }) => {\r\n          if (error) {\r\n            State.update({ isLoading: false });\r\n            State.update({ isQueryRunning: false });\r\n            State.update({ error });\r\n          } else {\r\n            console.log(\"data\", data);\r\n            State.update({ isLoading: false });\r\n            State.update({ isQueryRunning: false });\r\n            State.update({ data });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n  timeOutId = setTimeout(refetch, firstReqTime * 1000);\r\n} else {\r\n  clearTimeout(timeOutId);\r\n}\r\nconst sendQuery = (query) => {\r\n  console.log(\"send q\");\r\n  State.update({ isLoading: true });\r\n  runQuery(query).then(({ queryRunId, error }) => {\r\n    if (error) {\r\n      State.update({ isLoading: false });\r\n      State.update({ isQueryRunning: false });\r\n      State.update({ error });\r\n    } else {\r\n      State.update({ queryRunId });\r\n    }\r\n  });\r\n};\r\nconst runQuery = async (query) => {\r\n  if (state.queryRunId) {\r\n    console.log(\"run q w id\");\r\n    return queryResult(state.queryRunId).then(({ data, error, queryRunId }) => {\r\n      if (error) {\r\n        State.update({ queryRunId: null, isInitialRun: true });\r\n      } else {\r\n        console.log(\"data\", data);\r\n        State.update({ isLoading: false });\r\n        State.update({ isQueryRunning: false });\r\n        State.update({ data });\r\n        return { data, error, queryRunId };\r\n      }\r\n    });\r\n  } else {\r\n    console.log(\"run q wout id\");\r\n    return queryFetch(query).then(({ queryRunId, error }) => {\r\n      if (error) return { queryRunId, error };\r\n      return queryStatus(queryRunId).then(\r\n        ({ error, isRunning, queryRunId }) => {\r\n          if (error) return { queryRunId, error };\r\n          if (isRunning) {\r\n            State.update({ isQueryRunning: true });\r\n            return { queryRunId, error };\r\n          }\r\n          queryResult(queryRunId).then(({ data, error }) => {\r\n            if (error) {\r\n              State.update({ isLoading: false });\r\n              State.update({ isQueryRunning: false });\r\n              State.update({ error });\r\n            } else {\r\n              console.log(\"data\", data);\r\n              State.update({ isLoading: false });\r\n              State.update({ isQueryRunning: false });\r\n              State.update({ data });\r\n            }\r\n          });\r\n          return { queryRunId, error };\r\n        }\r\n      );\r\n    });\r\n  }\r\n};\r\nconst queryFetch = async (query) => {\r\n  console.log(\"qfetch\");\r\n  const raw = JSON.stringify({\r\n    jsonrpc: \"2.0\",\r\n    method: \"createQueryRun\",\r\n    params: [\r\n      {\r\n        resultTTLHours: 1,\r\n        maxAgeMinutes: cacheTime,\r\n        sql: query,\r\n        dataSource: \"snowflake-default\",\r\n        dataProvider: \"flipside\",\r\n      },\r\n    ],\r\n    id: 1,\r\n  });\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\", \"x-api-key\": API_KEY },\r\n    body: raw,\r\n  };\r\n  const result = { error: null, queryRunId: null };\r\n  return asyncFetch(\r\n    \"https://api-v2.flipsidecrypto.xyz/json-rpc\",\r\n    requestOptions\r\n  ).then((res) => {\r\n    if (!res.ok && res.error) {\r\n      result.error = res.error;\r\n      return result;\r\n    } else if (!res.ok) {\r\n      result.error =\r\n        res.status === 401\r\n          ? \"Invalid API Key.\"\r\n          : res.status === 404\r\n          ? \"query sent to wrong api address\"\r\n          : res.status;\r\n      return result;\r\n    }\r\n    const data = res.body;\r\n    if (data.error) {\r\n      result.error = `${data.error.message} - (code${data.error.code})`;\r\n      return result;\r\n    } else {\r\n      const queryRunId = data.result.queryRun.id;\r\n      result.queryRunId = queryRunId;\r\n      return result;\r\n    }\r\n  });\r\n};\r\nconst queryStatus = async (queryRunId) => {\r\n  console.log(\"qstat\");\r\n  const raw = JSON.stringify({\r\n    jsonrpc: \"2.0\",\r\n    method: \"getQueryRun\",\r\n    params: [{ queryRunId: queryRunId }],\r\n    id: 1,\r\n  });\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\", \"x-api-key\": API_KEY },\r\n    body: raw,\r\n  };\r\n  const result = { error: null, queryRunId, isRunning: false };\r\n  return asyncFetch(\r\n    \"https://api-v2.flipsidecrypto.xyz/json-rpc\",\r\n    requestOptions\r\n  ).then((res) => {\r\n    if (!res.ok && res.error) {\r\n      console.log(\"qstat err 1\");\r\n      result.error = res.error;\r\n      return result;\r\n    } else if (!res.ok) {\r\n      console.log(\"qstat err 2\");\r\n      result.error =\r\n        res.status === 401\r\n          ? \"Invalid API Key.\"\r\n          : res.status === 404\r\n          ? \"query sent to wrong api address\"\r\n          : res.status;\r\n      return result;\r\n    }\r\n    const data = res.body;\r\n    if (data.error) {\r\n      console.log(\"qstat err 3\");\r\n      result.error = `${data.error.message} - (code${data.error.code})`;\r\n      return result;\r\n    } else {\r\n      if (data.result.queryRun.state === \"QUERY_STATE_FAILED\") {\r\n        console.log(\"qstat 4 faild\");\r\n        result.isRunning = false;\r\n        result.error = `Query run failed (code-${data.result.queryRun.errorData.code})`;\r\n        return result;\r\n      }\r\n      if (data.result.queryRun.state !== \"QUERY_STATE_SUCCESS\") {\r\n        console.log(\"qstat 5 no succses\");\r\n        result.isRunning = true;\r\n        return result;\r\n      }\r\n      console.log(\"qstat 6 succses\");\r\n      result.isRunning = false;\r\n      return result;\r\n    }\r\n  });\r\n};\r\nconst queryResult = async (queryRunId) => {\r\n  console.log(\"qres\");\r\n  const otherParams = {\r\n    page: pageQuery,\r\n    sortBy: sortQuery,\r\n    filter: filterQuery,\r\n  };\r\n  const raw = JSON.stringify({\r\n    jsonrpc: \"2.0\",\r\n    method: \"getQueryRunResults\",\r\n    params: [{ queryRunId: queryRunId, format: \"json\", ...otherParams }],\r\n    id: 1,\r\n  });\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\", \"x-api-key\": API_KEY },\r\n    body: raw,\r\n  };\r\n  const result = { error: null, data: null, queryRunId: queryRunId };\r\n  return asyncFetch(\r\n    \"https://api-v2.flipsidecrypto.xyz/json-rpc\",\r\n    requestOptions\r\n  ).then((res) => {\r\n    if (!res.ok && res.error) {\r\n      result.error = res.error;\r\n      return result;\r\n    } else if (!res.ok) {\r\n      result.error =\r\n        res.status === 401\r\n          ? \"Invalid API Key.\"\r\n          : res.status === 404\r\n          ? \"query sent to wrong api address\"\r\n          : res.status;\r\n      return result;\r\n    }\r\n    const data = res.body;\r\n    if (data.error) {\r\n      result.error = `${data.error.message} - (code${data.error.code})`;\r\n      return result;\r\n    } else {\r\n      result.data = data.result;\r\n      return result;\r\n    }\r\n  });\r\n};\r\nif (!API_KEY) {\r\n  return onResult({\r\n    data: null,\r\n    error: \"no api key provided\",\r\n    isLoading: false,\r\n    queryRunId: null,\r\n    id: id,\r\n  });\r\n}\r\nif (!id) {\r\n  return onResult({\r\n    data: null,\r\n    error: \"no id provided\",\r\n    isLoading: false,\r\n    queryRunId: null,\r\n    id: id,\r\n  });\r\n}\r\nif (!query) {\r\n  return onResult({\r\n    data: null,\r\n    error: \"no query provided\",\r\n    isLoading: false,\r\n    queryRunId: null,\r\n    id: id,\r\n  });\r\n}\r\nif (state.isInitialRun) {\r\n  State.update({ isInitialRun: false });\r\n  sendQuery(query);\r\n}\r\nreturn onResult({\r\n  data: state.data,\r\n  error: state.error,\r\n  isLoading: state.isLoading,\r\n  queryRunId: state.data && state.queryRunId,\r\n  id,\r\n});\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/api-flipside", "fact_widget_deployments_id": "69cd7b2edf328985be1622a1b748d285", "inserted_timestamp": "2023-08-17T12:52:03.345Z", "modified_timestamp": "2023-08-17T12:52:03.345Z", "__row_index": 2}