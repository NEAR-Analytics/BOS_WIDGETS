{"tx_hash": "5Rapj8vYPEXABsVJ2SDtufLwAeShqvmh9kgF7XV2M73C", "action_id_social": "AqcJhj3Y6CnMA1a9oAALonGuX2McEuJXjGvyiKb3H1GB-0-widget", "block_id": 99040231, "block_timestamp": "2023-08-17T21:12:25.039Z", "signer_id": "lord1.near", "widget_name": "Pie-chart", "source_code": "const data = props.data ?? [];\r\nlet colors = props.colors ?? [\r\n  \"#4498E0\",\r\n  \"#FFD50D\",\r\n  \"#F29BC0\",\r\n  \"#F19D38\",\r\n  \"#82E299\",\r\n];\r\nconst chartOption = {\r\n  title: \"chart title\",\r\n  background: \"transparent\",\r\n  type: \"pie\",\r\n  legend: false,\r\n  connector: true,\r\n  ...props.chartOption,\r\n};\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst other_colors = [\r\n  \"#1f77b4\",\r\n  \"#ff7f0e\",\r\n  \"#2ca02c\",\r\n  \"#d62728\",\r\n  \"#9467bd\",\r\n  \"#8c564b\",\r\n  \"#e377c2\",\r\n  \"#7f7f7f\",\r\n  \"#bcbd22\",\r\n  \"#17becf\",\r\n];\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(other_colors[i % other_colors.length]);\r\n  }\r\n}\r\nif (data.length > colors.length) {\r\n  for (let i = colors.length; i < data.length; i++) {\r\n    colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n}\r\nState.init({\r\n  isLoading: true,\r\n});\r\n\r\nconst code = `\r\n<html>\r\n  <head>\r\n    <script\r\n      type=\"text/javascript\"\r\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"\r\n    ></script>\r\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n   <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\r\n  </head>\r\n  <body>\r\n  <div id=\"container\">\r\n  </div>\r\n  <script>\r\nwindow.addEventListener(\"message\", function (event) {}, false);\r\n\r\nconst formatNumber = (num) => {\r\n  if (num >= 1000000000) {\r\n    return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"b\";\r\n  }\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"m\";\r\n  }\r\n  if (num >= 1000) {\r\n    return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"k\";\r\n  }\r\n  return num;\r\n};\r\n\r\nconst handleMessage = (message) => {\r\n  const { data, colors, chartOption } = message;\r\n  const total = data.reduce((t, i) => {\r\n    return t + i[1];\r\n  }, 0);\r\n  const totalFormated = formatNumber(total);\r\n  const titleText = chartOption.title;\r\n  const chartType = chartOption.type;\r\n  const hasConnector = chartOption.connector;\r\n  const hasLegend = chartOption.legend;\r\n  let subtitleText;\r\n  if (data.length > 0) {\r\n    subtitleText =\r\n      chartType === \"donut\"\r\n        ? \"Total</br>\" + totalFormated\r\n        : \"Total : \" + totalFormated;\r\n  } else {\r\n    subtitleText = \"\";\r\n  }\r\n\r\n  const subtitleOption =\r\n    chartType === \"donut\"\r\n      ? {\r\n          style: {\r\n            fontSize: \"1.2rem\",\r\n            padding: \"15px 0\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\",\r\n          },\r\n          y: 20,\r\n          verticalAlign: \"middle\",\r\n        }\r\n      : {\r\n          style: {\r\n            fontSize: \"1.2rem\",\r\n            padding: \"15px 0\",\r\n          },\r\n        };\r\n\r\n  const chart = Highcharts.chart(\"container\", {\r\n    colors,\r\n    chart: {\r\n      type: \"pie\",\r\n        backgroundColor: chartOption.background\r\n\r\n    },\r\n\r\n    title: {\r\n      text: titleText,\r\n      style: {\r\n        fontSize: \"1.5rem\",\r\n        padding: \"1rem 0\",\r\n      },\r\n    },\r\n    subtitle: {\r\n      text: subtitleText,\r\n      useHTML: true,\r\n      ...subtitleOption,\r\n    },\r\n    tooltip: {\r\n      useHTML: true,\r\n      outside: true,\r\n      formatter: function () {\r\n        const percent = (this.y / total) * 100;\r\n        const formatedValue = formatNumber(this.y);\r\n        const text =\r\n          chartType === \"donut\"\r\n            ? this.key + \" <br/> \" + formatedValue\r\n            : this.key + \" : \" + formatedValue;\r\n        this.series.chart.setTitle(null, { text: text });\r\n        const tooltipText =\r\n          '<span style=\"font-size:14px\">' +\r\n          this.key +\r\n          \" : \" +\r\n          formatedValue +\r\n          '</span><br><span style=\"font-size: 12px\">percent: <b> ' +\r\n          percent.toFixed(2) +\r\n          \"</b> %</span>\";\r\n\r\n        return tooltipText;\r\n      },\r\n    },\r\n    lang: {\r\n      noData: \"no data to display\",\r\n    },\r\n    noData: {\r\n      style: {\r\n        fontWeight: \"bold\",\r\n        fontSize: \"15px\",\r\n      },\r\n    },\r\n    legend: {\r\n      float: true,\r\n      maxHeight: 50,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        dataLabels: {\r\n          enabled: true,\r\n          distance: hasConnector ? 20 : -30,\r\n          connectorWidth: hasConnector ? 1 : 0,\r\n        },\r\n      },\r\n      pie: {\r\n        showInLegend: hasLegend,\r\n        innerSize: chartType === \"donut\" ? \"65%\" : \"\",\r\n        events: {\r\n          mouseOut: function () {\r\n            this.chart.setTitle(null, { text: subtitleText });\r\n          },\r\n        },\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        data,\r\n      },\r\n    ],\r\n  });\r\n  window.iFrameResizer.onMessage = () => {};\r\n};\r\n\r\nwindow.iFrameResizer = {\r\n  onMessage: handleMessage,\r\n};\r\n</script>\r\n</html>\r\n`;\r\n\r\nreturn (\r\n  <div\r\n    className=\"w-100 d-flex justify-content-center align-items-center\"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <>\r\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{\r\n            ...spinnerColors,\r\n          }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={{\r\n          data,\r\n          colors,\r\n          chartOption,\r\n        }}\r\n        onLoad={() => {\r\n          State.update({\r\n            isLoading: false,\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  </div>\r\n);\r\n\r\n//  props = {\r\n//   data: [\r\n//     [\"value1\", 1],\r\n//     [\"value2\", 2],\r\n//   ],\r\n//   colors: [\"blue\", \"red\"], //optional : tow colors\r\n//   chartOption: {\r\n//     title: \"chart title\",\r\n//     type: \"pie or donut\",\r\n//     legend: false,\r\n//     connector: false,\r\n//   },\r\n//   spinnerColors: [], //optional : tow colors\r\n// };\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/Pie-chart", "fact_widget_deployments_id": "a1cec04b8431b40d4e2957191b4f1d63", "inserted_timestamp": "2023-08-17T23:18:32.996Z", "modified_timestamp": "2023-08-17T23:18:32.996Z", "__row_index": 1}