{"tx_hash": "Fmo3PS2xJxnSzYiuMLjJZMC18fTKXBxArmoJqF4bR7Ki", "action_id_social": "6anjxYkFU62GghqfHqqnDNBkr6ZtC5MMKQ4yRUTsf5hF-0-widget", "block_id": 107933605, "block_timestamp": "2023-12-14T15:27:36.413Z", "signer_id": "lord1.near", "widget_name": "wrapped-tekuno", "source_code": "const themeColor = props.themeColor;\r\nconst explor_balance_nft_theme = themeColor?.explor_balance?.nft || {};\r\nconst accountId = props.accountId ?? context.accountId ?? \"\";\r\n\r\nconst operationsDoc = `\r\n  query MyQuery {  \r\n    mb_views_nft_tokens(\r\n      order_by: {last_transfer_timestamp: desc}\r\n      where: {owner: {_eq: \"${\r\n        props.wallet_id || context.accountId\r\n      }\"}, _and: {nft_contract_name: { _eq: \"Tekuno\" },burned_timestamp: {_is_null: true}, last_transfer_timestamp: {}}}\r\n    ) {\r\n      nft_contract_id\r\n      title\r\n      description\r\n      media\r\n      last_transfer_receipt_id\r\n      metadata_id\r\n      token_id\r\n      nft_contract_name\r\n      nft_contract_icon\r\n    }\r\n  }\r\n`;\r\nconst general_theme = {\r\n  height: \"150px\",\r\n  align: \"center\",\r\n  description: \"Total NFT\",\r\n  brand: `${state.result.data?.length || \"0\"}`,\r\n  fontsize: \"45px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\n// --------------------------------------------\r\n\r\nState.init({\r\n  searchedAccountId: \"\",\r\n  result: {},\r\n  isLoading: true,\r\n  error: [],\r\n});\r\n\r\nconst checkNewAccountId = () => {\r\n  if (state.searchedAccountId === accountId) {\r\n    return;\r\n  } else {\r\n    State.update({\r\n      searchedAccountId: accountId,\r\n      result: {},\r\n      isLoading: true,\r\n    });\r\n  }\r\n};\r\ncheckNewAccountId();\r\n\r\nconst handleData = () => {\r\n  const result = fetchData();\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        isLoading: true,\r\n        error: false,\r\n        data: null,\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      isLoading: false,\r\n      result: {\r\n        isLoading: false,\r\n        error: true,\r\n        data: null,\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    State.update({\r\n      isLoading: false,\r\n      result: {\r\n        isLoading: false,\r\n        error: false,\r\n        data: result.data.data.mb_views_nft_tokens,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nconst fetchData = () => {\r\n  const data = fetch(`https://graph.mintbase.xyz/mainnet`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"mb-api-key\": \"anon\",\r\n      \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: operationsDoc,\r\n      variables: {},\r\n      operationName: \"MyQuery\",\r\n    }),\r\n  });\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n\r\nif (state.isLoading) {\r\n  handleData();\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n//-------------------------------------------------------------------------------------\r\nconst countByNftContractName = state.result.data.reduce((acc, item) => {\r\n  acc[item.title] = (acc[item.title] || 0) + 1;\r\n  return acc;\r\n}, {});\r\n\r\nconst dataForChart = Object.entries(countByNftContractName).map(\r\n  ([title, count]) => ({\r\n    title,\r\n    count,\r\n  })\r\n);\r\n\r\nconst countByNftContractName1 = state.result.data.reduce((acc, item) => {\r\n  acc[item.nft_contract_id] = (acc[item.nft_contract_id] || 0) + 1;\r\n  return acc;\r\n}, {});\r\n\r\nconst dataForChart1 = Object.entries(countByNftContractName1).map(\r\n  ([nft_contract_id, counts]) => ({\r\n    nft_contract_id,\r\n    counts,\r\n  })\r\n);\r\n//-------------------------------------------------------------------------------------\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = data.map((s) => [s[key], s[value]]);\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n//-------------------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst CardIsLoading = () =>\r\n  state.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = () =>\r\n  state.result.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\n\r\nconst ChartIsLoading = () => (\r\n  <div className={`w-100 ${state.result?.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = () =>\r\n  state.result?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\nconsole.log(result);\r\n//-------------------------------------------------------------------------------------\r\nreturn (\r\n  <>\r\n    {\" \"}\r\n    <div className=\"row\">\r\n      <Widget src=\"lord1.near/widget/header-dynamic\" props={general_theme} />\r\n\r\n      <div className=\"col-6\">\r\n        {\" \"}\r\n        <div\r\n          style={{ background: themeColor?.sbt_area?.section_bg }}\r\n          className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n        >\r\n          {ChartIsLoading()}\r\n          {ChartHasError()}\r\n          {dataForChart && (\r\n            <Widget\r\n              src=\"lord1.near/widget/Pie-chart\"\r\n              props={getPieProps(\r\n                dataForChart1,\r\n                [\"nft_contract_id\", \"counts\"],\r\n                themeColor.chartColor,\r\n                {\r\n                  title: \"Contract\",\r\n                  type: \"pie\",\r\n                  connector: true,\r\n                  legend: true,\r\n                }\r\n              )}\r\n            />\r\n          )}{\" \"}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"col-6\">\r\n        <div\r\n          style={{ background: themeColor?.sbt_area?.section_bg }}\r\n          className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n        >\r\n          {ChartIsLoading()}\r\n          {ChartHasError()}\r\n          {dataForChart && (\r\n            <Widget\r\n              src=\"lord1.near/widget/Pie-chart\"\r\n              props={getPieProps(\r\n                dataForChart,\r\n                [\"title\", \"count\"],\r\n                themeColor.chartColor,\r\n                {\r\n                  title: \"Collection\",\r\n                  type: \"pie\",\r\n                  connector: true,\r\n                  legend: true,\r\n                }\r\n              )}\r\n            />\r\n          )}{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"mt-4 border-top\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.section_bg }}\r\n        className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n      >\r\n        {\" \"}\r\n        <div\r\n          style={{ background: themeColor?.sbt_area?.card_bg }}\r\n          className=\"shadow-sm rounded-2 overflow-auto\"\r\n        >\r\n          {CardIsLoading()}\r\n          {CardHasError()}\r\n          {state.result.data && (\r\n            <Widget\r\n              src=\"lord1.near/widget/table-pagination\"\r\n              props={{\r\n                themeColor: { table_pagination: themeColor.table_pagination },\r\n                data: state.result.data,\r\n                columns: [\r\n                  { title: \"Title\", key: \"title\", colors: \"#806ce1\" },\r\n                  { title: \"Contract Name\", key: \"nft_contract_name\" },\r\n                  { title: \"Token Id\", key: \"token_id\", colors: \"#806ce1\" },\r\n                  { title: \"Contract Id\", key: \"nft_contract_id\" },\r\n                  { title: \"Description\", key: \"description\" },\r\n                  { title: \"Image\", key: \"media\", pic: \"yes\", src: \"media\" },\r\n                ],\r\n                rowsCount: 10,\r\n              }}\r\n            />\r\n          )}{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-tekuno", "fact_widget_deployments_id": "cd2936f7ab5b899a74b1c10caf0e773a", "inserted_timestamp": "2023-12-14T17:51:58.242Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}