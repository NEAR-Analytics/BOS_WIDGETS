{"tx_hash": "4KdC9zaNjMRuGDXDRkE9Lc5qqAaUhEwcYNbXRbtC4QZG", "action_id_social": "BJRyhAr3MR6tCKDQ4g1cSXJfeCB2xYqi3sWE47XbUC5a-0-widget", "block_id": 109499989, "block_timestamp": "2024-01-03T15:54:53.189Z", "signer_id": "lord1.near", "widget_name": "contract", "source_code": "const API_KEY = \"96ef3daf-8662-4736-b31b-0a4c2b431cc2\";\nconst themeColors = [\n  \"#A084E8\",\n  \"#6F61C0\",\n  \"#241468\",\n  \"#9F0D7F\",\n  \"#EA1179\",\n  \"#F79BD3\",\n];\nconst spinnerColors = { color1: \"#6F61C0\", color2: \"#241468\" };\nconst queries = [\n  {\n    hash: \"14cd52e2-af58-4550-a848-ac2fe85b3b70\",\n    firstReqTime: 15,\n    id: 1,\n    query: `SELECT\n              ADDRESS as \"Address\",\n              ADDRESS_NAME as  \"Address Name\",\n              PROJECT_NAME as \"Project Type\",\n              LABEL_TYPE  as \"Label Type\",\n              min(block_timestamp)::date  as \"First day\"\n              FROM near.core.fact_transactions LEFT outer join near.core.dim_address_labels on TX_RECEIVER = ADDRESS\n              where  TX_RECEIVER in ('{{address}}') GROUP BY 1,2,3,4`,\n  },\n  {\n    hash: \"5fe48402-2103-46f6-bdb8-3a02880ab69d\",\n    firstReqTime: 10,\n    id: 2,\n    query: `with a as\n              (SELECT\n              date_trunc('day',BLOCK_TIMESTAMP)::date as date ,\n              count(DISTINCT tx_hash) as \"Number of Transactions\",\n              round(sum(transaction_fee / power(10, 24)),3) as \"Fee(Near)\",\n              sum(TX:actions[0]:FunctionCall:deposit / POW(10, 24)) as \"Volume (Near)\" ,\n              sum(\"Number of Transactions\") over (order by date asc) as \"Cum Transactions\" ,\n              sum( \"Fee(Near)\") over (order by date asc) as \"Cum Fee\" ,\n              sum(\"Volume (Near)\") over (order by date asc) as \"Cum Volume\"\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')\n              group by 1 order by date asc )\n              select\n              date_part(epoch,to_timestamp(date)) as date ,\n              \"Number of Transactions\" ,\n              \"Fee(Near)\" ,\n              round(\"Volume (Near)\",2)as \"Volume (Near)\" ,\n              \"Cum Transactions\"  ,\n              round(\"Cum Fee\",3) as \"Cum Fee\" ,\n              round(\"Cum Volume\",2) as \"Cum Volume\"\n              from a\n              where date is not null and \"Volume (Near)\" is not null`,\n  },\n  {\n    hash: \"099f61fd-22bf-49dc-a8e2-d87a8a4ecb99\",\n    firstReqTime: 10,\n    id: 3,\n    query: `SELECT\n              count(DISTINCT tx_hash) as transactions,\n              count(DISTINCT tx_signer) as users,\n              round(transactions / users) as avg_txs_per_user ,\n              round(sum(transaction_fee / power(10, 24)),3) as fee_usd,\n              round((fee_usd/transactions),3) as avg_fee_per_user ,\n              round(sum(case when TX:actions[0]:FunctionCall:deposit / POW(10, 24) is not null then TX:actions[0]:FunctionCall:deposit / POW(10, 24)\n              when TX:actions[0]:Transfer:deposit / POW(10, 24) is not null then TX:actions[0]:Transfer:deposit / POW(10, 24)\n              when TX:actions[0]:Delegate:delegate_action:actions[0]:FunctionCall:deposit / POW(10, 24) is not null then TX:actions[0]:Delegate:delegate_action:actions[0]:FunctionCall:deposit / POW(10, 24)\n              end)) as AMOUNT_NEAR ,\n              round((AMOUNT_NEAR/transactions),3) as avg_AMOUNT_per_user\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')`,\n  },\n  {\n    hash: \"02d41371-2d86-4159-be7c-d79414df3168\",\n    firstReqTime: 10,\n    id: 4,\n    query: `with\n              user as (\n              select\n              BLOCK_TIMESTAMP::date as date,\n              COUNT(DISTINCT tx_signer) as user\n              from near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')\n              group by 1),\n              raw as (\n              select tx_signer ,BLOCK_TIMESTAMP::date as date\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')),\n              first as (\n              SELECT tx_signer as news, MIN(date) as first_date\n              FROM raw\n              GROUP BY 1),\n              b as\n              (SELECT\n              first_date as date,\n              user as total_daily_user ,\n              COUNT(DISTINCT news) as new_daily_user,\n              SUM(new_daily_user) OVER (ORDER BY first_date ASC) as cum_daily_user\n              FROM first inner join   user\n              on first_date = date\n              GROUP BY 1,2\n              ORDER BY 1)\n              select\n              date_part(epoch,to_timestamp(date))::int as date ,\n              total_daily_user ,\n              new_daily_user ,\n              cum_daily_user\n              from b`,\n  },\n  // {\n  //   hash: \"53dbf2a1-cd23-4ddf-b9bd-451b2b84c100\",\n  //  firstReqTime:10,\n  //  id: 5,\n  //   query: `SELECT\n  //             count(DISTINCT tx_hash) as transactions,\n  //             tx_signer\n  //             FROM near.core.fact_transactions\n  //             where TX_RECEIVER in ('{{address}}')\n  //             GROUP BY 2 order by 1  desc limit 10`,\n  // },\n  // {\n  //   hash: \"fa6edc9a-fbe2-43a1-854b-4d7d263f0b6c\",\n  //  firstReqTime:10,\n  //  id: 6,\n  //   query: `with a as\n  //           (SELECT\n  //           sum(TX:actions[0]:FunctionCall:deposit / POW(10, 24)) as AMOUNT_NEAR ,\n  //           tx_signer\n  //           FROM near.core.fact_transactions\n  //           where TX_RECEIVER in ('{{address}}')\n  //           GROUP BY 2 having AMOUNT_NEAR is not null\n  //           order by 1  desc limit 10)\n  //           select\n  //           round(AMOUNT_NEAR)  as AMOUNT_NEAR ,\n  //           tx_signer\n  //           from a`,\n  // },\n  {\n    hash: \"64edecd3-2f66-44e3-a657-565e17bf612e\",\n    firstReqTime: 10,\n    id: 7,\n    query: `SELECT\n              count(DISTINCT tx_hash) as transactions,\n              round(sum(transaction_fee / power(10, 24)),3) as fee ,\n              'Success' as status\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')\n              and TX_STATUS ='Success'\n              union\n              SELECT\n              count(DISTINCT tx_hash) as transactions,\n              round(sum(transaction_fee / power(10, 24)),3) as fee ,\n              'Fail' as status\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')\n              and TX_STATUS !='Success'`,\n  },\n  {\n    hash: \"046a7cbd-4838-4cb3-90fd-6be9e4cfb114\",\n    firstReqTime: 10,\n    id: 8,\n    query: `with a as\n              ( SELECT\n              count(DISTINCT tx_hash) as transactions,\n              tx_signer as users\n              -- sum(TX:actions[0]:FunctionCall:deposit / POW(10, 24)) as AMOUNT_NEAR ,\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')\n              group by 2)\n              select\n              count(DISTINCT users) as users,\n              case\n              when transactions =1 then '1'\n              when transactions =2 then '2'\n              when transactions =3 then '3'\n              when transactions between 3 and 10 then '(3-10]'\n              when transactions between 10 and 50 then '(10-50]'\n              when transactions between 50 and 100 then '(50-100]'\n              when transactions > 100 then '> 100'\n              else  'else'\n              end as groups\n              from a\n              group by 2 order by 1 desc`,\n  },\n  {\n    hash: \"c04e2f1f-530c-4ce2-bb6a-d5a8cb60ac0f\",\n    firstReqTime: 10,\n    id: 9,\n    query: `with a as\n              (SELECT\n              sum(TX:actions[0]:FunctionCall:deposit / POW(10, 24)) as AMOUNT_NEAR,\n              tx_signer as users\n              FROM near.core.fact_transactions\n              where TX_RECEIVER in ('{{address}}')\n              group by 2)\n              select\n              count(DISTINCT users) as users,\n              case\n              when AMOUNT_NEAR < 1 then '< 1'\n              when AMOUNT_NEAR between 1 and 2 then '1-2'\n              when AMOUNT_NEAR between 2 and 5 then '2-3'\n              when AMOUNT_NEAR between 5 and 10 then '(5-10]'\n              when AMOUNT_NEAR between 10 and 50 then '(10-50]'\n              when AMOUNT_NEAR between 50 and 100 then '(50-100]'\n              when AMOUNT_NEAR > 100 then '> 100'\n              else  null\n              end as groups\n              from a\n              where groups is not null\n              group by 2 order by 1 desc`,\n  },\n  {\n    hash: \"75684a26-d968-4566-9d27-8b9635182c33\",\n    firstReqTime: 20,\n    id: 10,\n    query: `with a as\n            (select\n            count(DISTINCT tx_hash) as transactions ,\n            rank()over(  order by transactions desc)as rank_transactions ,\n            count(DISTINCT tx_signer) as users,\n            rank()over(  order by users desc)as rank_users ,\n            round(sum(transaction_fee / power(10, 24)),3) as fee,\n            rank()over(  order by fee desc)as rank_fee ,\n            TX_RECEIVER as ADDRESS\n            from(\n            select distinct ADDRESS\n            FROM  near.core.dim_address_labels\n            where  LABEL_TYPE in (SELECT LABEL_TYPE  as \"Label Type\" FROM  near.core.dim_address_labels  where  ADDRESS in ('{{address}}'))\n            ) as label\n            inner join near.core.fact_transactions\n            on ADDRESS = TX_RECEIVER\n            group by 7)\n            select * from  a\n            order by 1 desc ,3 desc ,5 desc limit 4`,\n  },\n];\nState.init({\n  propsCharts: {},\n  result: { address: \"\" },\n  address: \"social.near\", // address for first data loading and first input placeholder\n  ui: { error: [], loading: true, isDisabledSearchButton: false },\n  loader: false,\n  runQueriesWithInitialLoadState: \"run\", // stop - run\n});\n//#############################################################\n// utilities\n\nconst formatNumber = (num) => {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"b\";\n  }\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"m\";\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"k\";\n  }\n  return num;\n};\nconst createQuery = (address) => {\n  const queriesArr = queries.map((q) => {\n    const queryWithAddress = q.query.replaceAll(\"{{address}}\", address);\n    q.query = queryWithAddress;\n    return q;\n  });\n  return queriesArr;\n};\nconst isAllDataLoaded = () => {\n  const resultArr = Object.entries(state.result);\n  if (resultArr.length <= 1) return true;\n  return resultArr.every((query, i) => {\n    if (i === 0) return true;\n    return !query[1].isLoading;\n  });\n};\nconst getMixProps = (data, serieses, colors, chartOption) => {\n  data = data || [];\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\n  colors = colors || themeColors;\n  chartOption = chartOption || {};\n\n  const dataFormat = serieses.map((series) => {\n    const dataFormated = data.map((d) => [d.date * 1000, d[series.key]]);\n    return {\n      data: dataFormated,\n      name: series.seriesName,\n      type: series.type,\n      axisId: series.id,\n    };\n  });\n  const props = {\n    series: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      subtitle: \"chart subtitle\",\n      legend: true,\n      stacking: \"false\",\n      ...chartOption,\n    },\n    spinnerColors: [\"#6F61C0\", \"#241468\"],\n  };\n  return props;\n};\nconst getPieProps = (data, [key, value], colors, chartOption) => {\n  data = data || [];\n  colors = colors || themeColors;\n  chartOption = chartOption || {};\n\n  const dataFormat = data.map((s) => [s[key], s[value]]);\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      type: \"pie\",\n      legend: false,\n      connector: false,\n      ...chartOption,\n    },\n    spinnerColors: [\"#6F61C0\", \"#241468\"],\n  };\n  return props;\n};\n\n//#############################################################\n//#############################################################\n// handlers\nconst inputHandler = ({ target }) => {\n  if (state.ui.loading) return;\n  const address = target.value.toLowerCase().trim();\n  State.update({ address: address, loader: false });\n};\n\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\n  State.update(({ result }) => {\n    const newResult = {\n      ...result,\n      [`query${id}`]: {\n        data:\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\n        error: error,\n        isLoading: isLoading,\n        queryRunId: queryRunId,\n        id: id,\n      },\n    };\n    if (error) {\n      const queryError = `query${id} : ${error}`;\n      console.log(state.ui.error);\n      return {\n        ...state,\n        result: { ...newResult },\n        ui: { ...state.ui, error: [...state.ui.error, queryError] },\n      };\n    } else {\n      return {\n        ...state,\n        result: { ...newResult },\n      };\n    }\n  });\n};\n\nconst runqueries = () => {\n  if (state.address.length === 0) {\n    State.update({\n      ui: {\n        ...state.ui,\n        error: [...state.ui.error, \"please add an contract address\"],\n      },\n    });\n    return;\n  }\n  const isNewquery = state.result.address !== state.address;\n  if (!isNewquery) {\n    State.update({\n      ui: {\n        ...state.ui,\n        error: [...state.ui.error, \"this query already has runed\"],\n      },\n    });\n    return;\n  }\n  const queriesArr = createQuery(state.address);\n  const loader = queriesArr.map((q) => {\n    const props = {\n      apiKey: API_KEY,\n      id: q.id,\n      query: q.query,\n      onResult: updateResultState,\n      firstReqTime: q.firstReqTime,\n      queryOption: {\n        page: {\n          number: 1,\n          size: 1000,\n        },\n        cacheTime: 60,\n        ...q?.queryOption,\n      },\n    };\n\n    return <Widget src=\"lord1.near/widget/api-flipside\" props={props} />;\n  });\n  State.update({\n    loader: loader,\n    ui: { ...state.ui, loading: true },\n    result: { ...state.result, address: state.address },\n    runQueriesWithInitialLoadState: \"runed\",\n  });\n};\n1;\nconst convertData = (data) => {\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  let converted;\n  try {\n    converted = JSON.parse(data);\n  } catch (er) {\n    converted = data;\n  }\n  return converted;\n};\nconst fetchInitialData = (hash) => {\n  const data = fetch(\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\n    {\n      subscribe: true,\n      method: \"GET\",\n      headers: {\n        Accept: \"*/*\",\n      },\n    }\n  );\n  console.log(\"data\", data);\n\n  const result = {\n    data: data && convertData(data.body),\n    error: (data && data.error) || null,\n    isLoading: !data && !error,\n  };\n  return result;\n};\n\n//#############################################################\n//#############################################################\n// conditional render\nif (state.runQueriesWithInitialLoadState === \"run\") {\n  const data = {};\n  const errors = [];\n  queries.forEach(({ hash, id }) => {\n    const result = fetchInitialData(hash);\n    if (result.error) errors.push(`query${id} : ${result.error}`);\n    data[`query${id}`] = {\n      ...result,\n      id,\n      queryRunId: undefined,\n    };\n  });\n\n  if (Object.values(data).every((d) => !d.isLoading)) {\n    State.update({\n      result: { address: state.address, ...data },\n      ui: { ...state.ui, error: [...state.ui.error, ...errors] },\n      runQueriesWithInitialLoadState: \"runed\",\n    });\n  }\n}\n\nif (isAllDataLoaded()) {\n  State.update({ ui: { ...state.ui, loading: false } });\n}\nif (state.ui.error.length > 0) {\n  function hide() {\n    const errors = state.ui.error;\n    errors.shift();\n    if (errors.length > 0) setTimeout(hide, 2500);\n    State.update({ ui: { ...state.ui, error: errors } });\n  }\n  setTimeout(hide, 2500);\n}\n//#############################################################\n//#############################################################\n// sections parts\n\nconst ChartIsLoading = (queryId) => (\n  <div\n    className={`w-100 ${\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\n    }`}\n  >\n    <Widget\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n      props={{ ...spinnerColors }}\n    />\n  </div>\n);\nconst ChartHasError = (queryId) =>\n  state.result?.[`query${queryId}`]?.error && (\n    <div className=\"\">An error occurred for this section</div>\n  );\n\nconst CardIsLoading = (queryId) =>\n  state.result?.[`query${queryId}`]?.isLoading && (\n    <div className=\"text-center p-4 pb-1\">\n      <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n  );\nconst CardHasError = (queryId) =>\n  state.result?.[`query${queryId}`]?.error && (\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\n      failed\n    </div>\n  );\nconst CardContent = (queryId, key, title) => (\n  <>\n    {state.result[`query${queryId}`].data && (\n      <div className=\"fs-4 fw-bold d-flex justify-content-center align-items-center h-100 p-4 pb-1 \">\n        {key ? formatNumber(state.result?.query3?.data[0][key]) : \"-\"}\n      </div>\n    )}\n    <div className=\"\">{title}</div>\n  </>\n);\n//#############################################################\n//#############################################################\n// sections\nconst Errors = (\n  <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\n    {state.ui.error.length > 0 &&\n      state.ui.error.map((er) => (\n        <div\n          className=\"toast show align-items-center text-bg-danger border-0\"\n          role=\"alert\"\n          aria-live=\"assertive\"\n          aria-atomic=\"true\"\n        >\n          <div className=\"d-flex\">\n            <div className=\"toast-body\">{er}</div>\n          </div>\n        </div>\n      ))}\n  </div>\n);\nconst general_theme = {\n  height: \"110px\",\n  align: \"center\",\n  description: \"Explore the status of Contract activity.\",\n  brand: \"Contract Explorer\",\n  fontsize: \"100\",\n  fontweight: \"25px\",\n  afterbrand: \"\ud83c\udf10\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst Header = (\n  <Widget src=\"lord1.near/widget/header-dynamic\" props={general_theme} />\n);\nconst SearchBox = (\n  <div className=\"search py-4\">\n    <div className=\"row\">\n      <div className=\"col-8 \">\n        <input\n          defaultValue={state.address}\n          onBlur={inputHandler}\n          type=\"Address\"\n          className=\"form-control\"\n          id=\"address\"\n          placeholder=\"contract address\"\n        />\n      </div>\n      <div className=\"col-4 col-lg-auto\">\n        <button\n          disabled={state.ui.loading}\n          onClick={runqueries}\n          type=\"button\"\n          style={{ backgroundColor: themeColors[1] }}\n          className=\"btn w-100 text-white\"\n        >\n          {state.ui.loading ? (\n            <div className=\"text-center px-4\">\n              <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n          ) : (\n            \"search\"\n          )}\n        </button>\n      </div>\n    </div>\n  </div>\n);\nconst ProjectInfo = (\n  <div className=\"shadow-sm rounded bg-light h-100\">\n    {state.result?.query1?.isLoading && (\n      <div className=\"d-flex justify-content-center align-items-center h-100 p-4 py-5\">\n        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n        </div>\n      </div>\n    )}\n    {state.result?.query1?.error && (\n      <div className=\"d-flex justify-content-center align-items-center h-100 py-5\">\n        An error occurred for this section\n      </div>\n    )}\n    {state.result?.query1?.data[0]?.address === null && (\n      <div className=\"d-flex justify-content-center align-items-center h-100 py-5\">\n        This address is not a contract\n      </div>\n    )}\n    {state.result?.query1?.data[0]?.address && (\n      <>\n        <div className=\"py-3\">\n          <span className=\"fw-bold fs-5\">\n            {state.result.query1.data[0][\"project type\"]}\n          </span>\n          <span className=\"fw-bold\">\n            ({state.result.query1.data[0][\"label type\"]})\n          </span>\n        </div>\n        <div className=\"py-1\">\n          <span className=\"fw-semibold\">contract address :</span>\n          <span>({state.result.query1.data[0][\"address\"]})</span>\n        </div>\n        <div className=\"py-1\">\n          <span className=\"fw-semibold\">developed :</span>\n          <span>\n            (\n            {new Date(\n              state.result.query1.data[0][\"first day\"]\n            ).toLocaleDateString(\"en\")}\n            )\n          </span>\n        </div>\n      </>\n    )}\n  </div>\n);\nconst ProjectInfoTable = (\n  <div className=\"shadow-sm rounded bg-light\">\n    {state.result?.query10?.isLoading && (\n      <div className=\"d-flex justify-content-center align-items-center h-100 p-4 py-5\">\n        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n        </div>\n      </div>\n    )}\n    {state.result?.query10?.error && (\n      <div className=\"d-flex justify-content-center align-items-center h-100 py-5\">\n        An error occurred for this section\n      </div>\n    )}\n    {state.result?.query10?.data && (\n      <div className=\" table-responsive\">\n        <table className=\"table table-hover table-striped table-borderless \">\n          <thead>\n            <tr>\n              <th className=\"col-2\" scope=\"col\">\n                Same contracts ({state.address})\n              </th>\n              <th className=\"col-1\" scope=\"col\">\n                Transaction\n              </th>\n              <th className=\"col-1\" scope=\"col\">\n                Transaction rank\n              </th>\n              <th className=\"col-1\" scope=\"col\">\n                Fee\n              </th>\n              <th className=\"col-1\" scope=\"col\">\n                Fee rank\n              </th>\n              <th className=\"col-1\" scope=\"col\">\n                User\n              </th>\n              <th className=\"col-1\" scope=\"col\">\n                User rank\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"\">\n            {state.result?.query10?.data.length === 0 && (\n              <tr>\n                <td className=\"text-center p-4\" colspan=\"8\">\n                  No same contracts\n                </td>\n              </tr>\n            )}\n            {state.result?.query10?.data.length > 1 &&\n              state.result.query10.data.map((row) => {\n                return (\n                  <tr key={row.address}>\n                    <td>{row.address}</td>\n                    <td>{formatNumber(row.transactions)}</td>\n                    <td>{row.rank_transactions}</td>\n                    <td>{row.fee}</td>\n                    <td>{row.rank_fee}</td>\n                    <td>{formatNumber(row.users)}</td>\n                    <td>{row.rank_users}</td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n    )}\n  </div>\n);\n\nconst PieChartSection = ({\n  bigCard: [bigQueryId, bigKey, bigTitle],\n  smallCard: [smallQueryId, smallKey, smallTitle],\n  pieChart: [pieQueryId, { slices, colors, chartOption }],\n}) => (\n  <div className=\"shadow-sm rounded bg-light\">\n    <div>\n      <div\n        style={{ backgroundColor: themeColors[1] }}\n        className=\"text-white text-center p-1 rounded-4\"\n      >\n        {CardIsLoading(bigQueryId)}\n        {CardHasError(bigQueryId)}\n        {CardContent(bigQueryId, bigKey, bigTitle)}\n      </div>\n      <div\n        style={{ backgroundColor: themeColors[0] }}\n        className=\"text-white mx-auto w-75 mt-2 text-center p-1 rounded-4\"\n      >\n        {CardIsLoading(smallQueryId)}\n        {CardHasError(smallQueryId)}\n        {CardContent(smallQueryId, smallKey, smallTitle)}\n      </div>\n    </div>\n    <div\n      className=\"chart d-flex justify-content-center align-items-center \"\n      style={{ minHeight: \"12rem\" }}\n    >\n      {ChartIsLoading(pieQueryId)}\n      {ChartHasError(pieQueryId)}\n      <div\n        className={`${\n          state.result?.[`query${pieQueryId}`]?.data ? \"\" : \"d-none\"\n        }`}\n      >\n        <Widget\n          src=\"lord1.near/widget/Pie-chart\"\n          props={getPieProps(\n            state.result[`query${pieQueryId}`].data,\n            slices,\n            colors,\n            chartOption\n          )}\n        />\n      </div>\n    </div>\n  </div>\n);\nconst MixChartSection = (queryId, { serieses, colors, chartOption }) => (\n  <div className=\"h-100 shadow-sm rounded bg-light \">\n    {ChartIsLoading(queryId)}\n    {ChartHasError(queryId)}\n    <div\n      className={`${state.result?.[`query${queryId}`]?.data ? \"\" : \"d-none\"}`}\n    >\n      <Widget\n        src=\"lord1.near/widget/mix-chart\"\n        props={getMixProps(\n          state.result[`query${queryId}`].data,\n          serieses,\n          colors,\n          chartOption\n        )}\n      />\n    </div>\n  </div>\n);\n\nconsole.log(\"qu\", state.runQueriesWithInitialLoadState);\n//#############################################################\n// #############################################################\n// return to dom\nreturn (\n  <div className=\"container-fluid\">\n    {state.loader && <div className=\"d-none\">{state.loader}</div>}\n    {Errors}\n    {Header}\n    {SearchBox}\n    {state.runQueriesWithInitialLoadState !== \"stop\" && (\n      <>\n        <div className=\"section1 py-4\">\n          <div className=\"row\">\n            <div className=\" col-lg-4\">{ProjectInfo}</div>\n            <div className=\" col-lg-8\">{ProjectInfoTable}</div>\n          </div>\n        </div>\n        <div className=\"section2 py-4\">\n          <div className=\"row g-2\">\n            <div className=\"col-6 col-xl-3\">\n              {PieChartSection({\n                bigCard: [3, \"transactions\", \"Number of transactions\"],\n                smallCard: [3, \"avg_txs_per_user\", \"avg of transactions\"],\n                pieChart: [\n                  7,\n                  {\n                    slices: [\"status\", \"transactions\"],\n                    colors: undefined,\n                    chartOption: { title: \"Trans Status\" },\n                  },\n                ],\n              })}\n            </div>\n            <div className=\"col-6 col-xl-3\">\n              {PieChartSection({\n                bigCard: [3, \"users\", \"Number of users\"],\n                smallCard: [3, null, \"avg of users\"],\n                pieChart: [\n                  8,\n                  {\n                    slices: [\"groups\", \"users\"],\n                    colors: undefined,\n                    chartOption: { title: \"Share of Users\", type: \"donut\" },\n                  },\n                ],\n              })}\n            </div>\n            <div className=\"col-6 col-xl-3\">\n              {PieChartSection({\n                bigCard: [3, \"amount_near\", \"Amount (near)\"],\n                smallCard: [3, \"avg_amount_per_user\", \"avg of Amount (near)\"],\n                pieChart: [\n                  7,\n                  {\n                    slices: [\"status\", \"fee\"],\n                    colors: undefined,\n                    chartOption: { title: \"Fee Status\" },\n                  },\n                ],\n              })}\n            </div>\n            <div className=\"col-6 col-xl-3\">\n              {PieChartSection({\n                bigCard: [3, \"fee_usd\", \"Fee usd\"],\n                smallCard: [3, \"avg_fee_per_user\", \"avg of Fee usd\"],\n                pieChart: [\n                  9,\n                  {\n                    slices: [\"groups\", \"users\"],\n                    colors: undefined,\n                    chartOption: { title: \"Share of Volume\", type: \"donut\" },\n                  },\n                ],\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"section3-area py-4\">\n          <div className=\"row g-2\">\n            <div style={{ minHeight: \"12rem\" }} className=\" col-lg-6\">\n              {MixChartSection(2, {\n                serieses: [\n                  {\n                    key: \"cum transactions\",\n                    seriesName: \"Cum Trans\",\n                    type: \"areaspline\",\n                    id: 2,\n                  },\n                  {\n                    key: \"number of transactions\",\n                    seriesName: \"Number of Trans\",\n                    type: \"line\",\n                    id: 1,\n                  },\n                ],\n                colors: undefined,\n                chartOption: {\n                  title: \"Number of Transaction\",\n                  subtitle: \"Daily / Cumulative\",\n                },\n              })}\n            </div>\n            <div style={{ minHeight: \"12rem\" }} className=\" col-lg-6\">\n              {MixChartSection(2, {\n                serieses: [\n                  {\n                    key: \"cum volume\",\n                    seriesName: \"Cum Volume\",\n                    type: \"areaspline\",\n                    id: 2,\n                  },\n                  {\n                    key: \"volume (near)\",\n                    seriesName: \"Volume\",\n                    type: \"line\",\n                    id: 1,\n                  },\n                ],\n                colors: undefined,\n                chartOption: {\n                  title: \"Volume of Transaction\",\n                  subtitle: \"Daily / Cumulative\",\n                },\n              })}\n            </div>\n            <div style={{ minHeight: \"12rem\" }} className=\" col-lg-6\">\n              {MixChartSection(4, {\n                serieses: [\n                  {\n                    key: \"cum_daily_user\",\n                    seriesName: \"Cum User\",\n                    type: \"areaspline\",\n                    id: 2,\n                  },\n                  {\n                    key: \"new_daily_user\",\n                    seriesName: \"New Users\",\n                    type: \"line\",\n                    id: 1,\n                  },\n                  {\n                    key: \"total_daily_user\",\n                    seriesName: \"Total Users\",\n                    type: \"line\",\n                    id: 3,\n                  },\n                ],\n                colors: undefined,\n                chartOption: {\n                  title: \"Number of Users\",\n                  subtitle: \"User / Cumulative\",\n                },\n              })}\n            </div>\n            <div style={{ minHeight: \"12rem\" }} className=\" col-lg-6\">\n              {MixChartSection(2, {\n                serieses: [\n                  {\n                    key: \"cum fee\",\n                    seriesName: \"Cum Fee\",\n                    type: \"areaspline\",\n                    id: 2,\n                  },\n                  {\n                    key: \"fee(near)\",\n                    seriesName: \"Fee\",\n                    type: \"line\",\n                    id: 1,\n                  },\n                ],\n                colors: undefined,\n                chartOption: {\n                  title: \"Fee\",\n                  subtitle: \"Daily / Cumulative\",\n                },\n              })}\n            </div>\n          </div>\n        </div>\n      </>\n    )}\n  </div>\n);\n// #############################################################\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/contract", "fact_widget_deployments_id": "45b3cda55150f3714a0c20b727d45ec0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}