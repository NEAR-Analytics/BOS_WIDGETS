{"tx_hash": "HG2VY7EdsdoiboDg4fjhGSbmneppwf5AdEsTFNB3zH4T", "action_id_social": "8Jmr2CXuk9YGHUFrXswLmaiVfBG9vyoLLCe3UvTo4wAH-0-widget", "block_id": 106814390, "block_timestamp": "2023-11-29T15:50:23.571Z", "signer_id": "lord1.near", "widget_name": "component-chart1", "source_code": "const API_KEY = \"6d48c4c0-eb41-4e4b-ae4d-ba1148f01fb8\";\r\nconst queries = [\r\n  {\r\n    hash: null,\r\n    firstReqTime: 20,\r\n    id: 1,\r\n    query: `select \r\n            ft.TX_HASH as \"hash\" ,\r\n            split(ft.BLOCK_TIMESTAMP::date,'T') as \"date\",\r\n            fw.SIGNER_ID as singer,\r\n            fw.WIDGET_NAME as \"name\",\r\n            case when STATUS  !='false' then '\u2705' else '\u274c' end as \"status\",\r\n            round(TRANSACTION_FEE/pow(10,24),4) as \"fee\",\r\n            --METADATA:name as name ,\r\n            row_number() over (partition by singer order by \"date\" asc )::int as \"rank\",\r\n            singer||'/widget/'||\"name\" as links,\r\n            '1' as \"total\"\r\n\r\n      from near.social.fact_widget_deployments as fw left join \r\nnear.core.fact_transfers  as ft\r\non ft.tx_hash=fw.tx_hash\r\nwhere singer='lord1.near' --  {{singer}}\r\norder by fw.BLOCK_ID desc`,\r\n  },\r\n  {\r\n    hash: \"4fd2820b-b877-46f5-bdf1-b0c3cd9f64a6\",\r\n    firstReqTime: 15,\r\n    id: 2,\r\n    query: null,\r\n    sortBy: [\r\n      {\r\n        column: \"date\",\r\n        direction: \"desc\",\r\n      },\r\n    ],\r\n  },\r\n];\r\nconst themeColor = props.themeColor;\r\n\r\n// header theme ######################################\r\nconst table_componentScan_theme = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  description: `Track the activity of Users in BOS development process`,\r\n  brand: \"Component Scan\",\r\n  fontsize: \"100\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst activity_of_user_theme = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Activity of user\",\r\n  fontsize: \"75\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"available\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n// state ####################################\r\nState.init({\r\n  searchedSinger: \"\",\r\n  result: {},\r\n  loader: false,\r\n  isLoading: false,\r\n  error: [],\r\n  queriesRuned: false,\r\n});\r\n\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === props.singer) {\r\n    return;\r\n  } else {\r\n    State.update({\r\n      searchedSinger: props.singer,\r\n      isLoading: true,\r\n      queriesRuned: false,\r\n    });\r\n  }\r\n};\r\ncheckNewSinger();\r\n// handle hashed data #############################\r\nconst handleHasedData = ({ hash, id }) => {\r\n  if (state.result[\"query\" + id].isDone) return;\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`query ${id}: ${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: true,\r\n          data: null,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    State.update({\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: result.data,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n// handle runed data ###################################\r\nconst createQuery = (queries, singer) => {\r\n  const queriesArr = queries.map((q) => {\r\n    const queryWithSinger = q.query.replaceAll(\"{{singer}}\", singer);\r\n    q.query = queryWithSinger;\r\n    return q;\r\n  });\r\n  return queriesArr;\r\n};\r\nconst isAllDataLoaded = () => {\r\n  const resultArr = Object.entries(state.result);\r\n  if (resultArr.length === 0) return false;\r\n  return resultArr.every((query) => {\r\n    return !query[1].isLoading;\r\n  });\r\n};\r\n\r\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\r\n  State.update(({ result }) => {\r\n    const newResult = {\r\n      ...result,\r\n      [`query${id}`]: {\r\n        data:\r\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\r\n        error: !!error,\r\n        isLoading: isLoading,\r\n        queryRunId: queryRunId,\r\n        id: id,\r\n      },\r\n    };\r\n    if (error) {\r\n      const queryError = `query${id} : ${error}`;\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        error: [...state.error, queryError],\r\n      };\r\n    } else {\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst runqueries = (queries) => {\r\n  if (state.searchedSinger.length === 0) {\r\n    State.update({\r\n      isLoading: false,\r\n      error: [...state.error, \"singer is not provided\"],\r\n    });\r\n    return;\r\n  }\r\n\r\n  const queriesArr = createQuery(queries, state.searchedSinger);\r\n  const loader = queriesArr.map((q) => {\r\n    const props = {\r\n      apiKey: API_KEY,\r\n      id: q.id,\r\n      query: q.query,\r\n      onResult: updateResultState,\r\n      firstReqTime: q.firstReqTime,\r\n      queryOption: {\r\n        page: {\r\n          number: 1,\r\n          size: 1000,\r\n        },\r\n        cacheTime: 60,\r\n        ...q?.queryOption,\r\n      },\r\n    };\r\n\r\n    return <Widget src=\"lord1.near/widget/api-flipside\" props={props} />;\r\n  });\r\n  State.update({\r\n    loader: loader,\r\n    isLoading: true,\r\n    queriesRuned: true,\r\n  });\r\n};\r\n\r\nif (isAllDataLoaded()) {\r\n  State.update({ isLoading: false });\r\n}\r\n\r\nif (state.isLoading) {\r\n  const withHashQueries = [];\r\n  const withoutHashQueries = [];\r\n  queries.forEach(({ hash, id, query, ...other }) => {\r\n    if (hash) {\r\n      withHashQueries.push({ hash, id });\r\n    }\r\n    if (query) {\r\n      withoutHashQueries.push({ query, hash, id, ...other });\r\n    }\r\n  });\r\n  withHashQueries.forEach((query) => handleHasedData(query));\r\n  if (!state.queriesRuned) {\r\n    runqueries(withoutHashQueries);\r\n  }\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n// get props charts #######################################\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const groupedData = {};\r\n  for (const item of data) {\r\n    const keyValue = item[key];\r\n    const valueValue = item[value];\r\n\r\n    if (groupedData[keyValue]) {\r\n      groupedData[keyValue] += valueValue;\r\n    } else {\r\n      groupedData[keyValue] = valueValue;\r\n    }\r\n  }\r\n\r\n  const dataFormat = Object.entries(groupedData).map(\r\n    ([groupKey, groupValue]) => [groupKey, groupValue]\r\n  );\r\n\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\n// dom sections ##############################################\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst ChartIsLoading = (queryId) => (\r\n  <div\r\n    className={`w-100 ${\r\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\r\n    }`}\r\n  >\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\n\r\nconst CardIsLoading = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\n\r\nlet ChartSections = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div className=\" col-12 \">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"w-100 mx-auto shadow-sm rounded-4 p-2\"\r\n      >\r\n        <Widget\r\n          src=\"lord1.near/widget/header-dynamic\"\r\n          props={activity_of_user_theme}\r\n        />\r\n        {ChartIsLoading(1)}\r\n        {ChartHasError(1)}\r\n        {state.result[\"query\" + 1]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/Pie-chart\"\r\n            props={getPieProps(\r\n              state.result[\"query\" + 1]?.data,\r\n              [\"name\", \"total\"],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"\",\r\n                type: \"pie\",\r\n                connector: true,\r\n                legend: true,\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"py-2\"></div>\r\n    <div className=\" col-12\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2\"\r\n      >\r\n        {ChartIsLoading(2)}\r\n        {ChartHasError(2)}\r\n        {state.result[\"query\" + 2]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/mix-chart\"\r\n            props={getMixProps(\r\n              state.result[\"query\" + 2]?.data,\r\n              \"date\",\r\n              [\r\n                {\r\n                  key: \"total_trxs\",\r\n                  seriesName: \"Daily Transaction\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"build_trxs\",\r\n                  seriesName: \"Daily Build Transaction\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"update_trxs\",\r\n                  seriesName: \"Daily Update Transaction\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"widget\",\r\n                  seriesName: \"Components\",\r\n                  type: \"column\",\r\n                  id: 1,\r\n                },\r\n                {\r\n                  key: \"cum_total_trxs\",\r\n                  seriesName: \"Total Transactions\",\r\n                  type: \"spline\",\r\n                  id: 2,\r\n                },\r\n                {\r\n                  key: \"cum_update_trxs\",\r\n                  seriesName: \"Total Update Transaction\",\r\n                  type: \"spline\",\r\n                  id: 2,\r\n                },\r\n                {\r\n                  key: \"cum_build_trxs\",\r\n                  seriesName: \"Total Build Transaction\",\r\n                  type: \"spline\",\r\n                  id: 2,\r\n                },\r\n                {\r\n                  key: \"cum_widget\",\r\n                  seriesName: \"Total Components\",\r\n                  type: \"spline\",\r\n                  id: 1,\r\n                },\r\n              ],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"Daily Dev Activity\",\r\n                subtitle: `Number of daily transactions `,\r\n                stacking: \"normal\",\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nlet TableSection = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <Widget\r\n      src=\"lord1.near/widget/header-dynamic\"\r\n      props={table_componentScan_theme}\r\n    />\r\n    <div className=\"p-2 rounded-4 overflow-auto\">\r\n      {CardIsLoading(1)}\r\n      {CardHasError(1)}\r\n      {state.result[\"query\" + 1]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 1]?.data,\r\n            rowsCount: 10,\r\n            columns: [\r\n              { title: \"Number\", key: \"rank\", colors: \"#806ce1\" },\r\n              {\r\n                title: \"Status\",\r\n                key: \"status\",\r\n              },\r\n              { title: \"Timestamp\", key: \"date\" },\r\n              {\r\n                title: \"Signer\",\r\n                key: \"singer\",\r\n                link: \"yes\",\r\n                beforehref:\r\n                  \"https://near.social/mob.near/widget/ProfilePage?accountId=\",\r\n                hyperlink: \"yes\",\r\n              },\r\n              { title: \"Component \", key: \"name\" },\r\n              {\r\n                title: \"Conponent Link\",\r\n                key: \"links\",\r\n                link: \"yes\",\r\n                beforehref: `https://bos.flipsidecrypto.xyz/`,\r\n                afterhref: \"\",\r\n              },\r\n              { title: \"Fee(Near)\", key: \"fee\" },\r\n\r\n              {\r\n                title: \"Hash\",\r\n                key: \"hash\",\r\n                link: \"yes\",\r\n                beforehref: \"https://nearblocks.io/txns/\",\r\n                afterhref: \"\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nreturn (\r\n  <>\r\n    {state.loader && <div className=\"d-none\">{state.loader}</div>}\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div\r\n      className=\"w-100\"\r\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\r\n    >\r\n      <div className=\"w-100\">\r\n        {ChartSections}\r\n        <div className=\"w-100 py-2\"></div>\r\n        {TableSection}\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/component-chart1", "fact_widget_deployments_id": "5889613ebf51b25395e8faea92e7f531", "inserted_timestamp": "2023-11-29T17:46:26.556Z", "modified_timestamp": "2023-12-20T00:36:59.366Z", "__row_index": 16}