{"tx_hash": "T8jj9ZPqEyTHAFkUw7MbAaBpS79e3x5vxVqTupzBF91", "action_id_social": "HdWCcrTq8FkHVh6Vktk7jCBJS1vBXw7wQrCWwJcamAcL-0-widget", "block_id": 107685434, "block_timestamp": "2023-12-11T14:39:46.732Z", "signer_id": "lord1.near", "widget_name": "wrapped-transaction", "source_code": "const API_KEY = \"e79c2e9b-116c-4d8a-9617-5e2471e4deaa\";\r\nconst themeColor = props.themeColor;\r\nconst singer = props.singer || \"jlw.near\";\r\nconst interval = props.interval || \"week\";\r\nconst queries = [\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 1,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"count\",\r\n          direction: \"desc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\n\r\nWITH call as (\r\n  SELECT\r\n    livequery.live.udf_api(\r\n      'POST',\r\n      'https://graph.mintbase.xyz/mainnet',\r\n      {'Content-Type': 'application/json','mb-api-key': 'anon'},\r\n      {\r\n       'query': 'query MyQuery {\r\n  mb_views_nft_activities_rollup(\r\nwhere: {\r\n      _or: [\r\n        { action_receiver: { _eq: \"{{singer}}\" } },\r\n        { action_sender: { _eq:  \"{{singer}}\"  } }\r\n      ] \r\n    }  ) {\r\n    tx_sender\r\n    token_ids\r\n    title\r\n    timestamp\r\n    reference\r\n    receipt_id\r\n    price\r\n    nft_contract_id\r\n    metadata_id\r\n    media_hash\r\n    media\r\n    kind\r\n    extra\r\n    description\r\n    currency\r\n    count\r\n    action_sender\r\n    action_receiver\r\n  }\r\n}',\r\n       'variables':{}\r\n      }\r\n    ) as response\r\n)\r\n\r\n,b as \r\n(select \r\nvalue:timestamp::date as \"timestamp\" ,\r\nvalue:tx_sender as \"tx_sender\" ,\r\nvalue:action_sender as \"action_sender\" ,\r\nvalue:action_receiver as \"action_receiver\" ,\r\nvalue:kind as \"kind\" ,\r\nvalue:count as \"count\" ,\r\nvalue:receipt_id as \"receipt_id\" ,\r\nvalue:currency as \"currency\" ,\r\nvalue:nft_contract_id as \"nft_contract_id\" ,\r\nvalue:price/pow(10,24) as \"price\" ,\r\nvalue:title as \"title\" ,\r\nvalue:description as \"description\" \r\n\r\n\r\n   from   call,\r\n     LATERAL FLATTEN (\r\n            input => response:data:data:mb_views_nft_activities_rollup\r\n     )\r\n where value:timestamp::date>'2023-01-01'\r\n)\r\nselect \r\n      \"kind\" ,\r\n      sum(\"count\") as \"count\" ,\r\n      count(\"nft_contract_id\") as \"nft_contract_id\" , \r\n     COALESCE(round(sum(\"price\"),2),0) as \"price\"\r\nfrom b \r\ngroup by 1 `,\r\n  },\r\n\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 3,\r\n    query: `\r\nSELECT  \r\n      case when LABEL_TYPE is not null then LABEL_TYPE \r\n      else  'other'  end as \"contract\",  \r\n      COUNT(DISTINCT tx_hash) as \"transactions\" \r\n    FROM  near.core.dim_address_labels \r\n    right JOIN  near.core.fact_transactions\r\n    ON ADDRESS = TX_RECEIVER\r\n    WHERE TX_STATUS = 'Success'\r\n    and TX_SIGNER = lower('{{singer}}')    \r\n    and BLOCK_TIMESTAMP::date >='2023-01-01' \r\n\r\n  GROUP BY 1 \r\n  order by 2`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 4,\r\n    query: `\r\n  SELECT \r\n  TX_SIGNER as \"signer\",\r\n  split(min(block_timestamp)::date,'T')[0] as \"min_time\" ,\r\n  split(max(block_timestamp)::date,'T')[0] as \"max_time\" ,\r\n  count(DISTINCT date_trunc('day', block_timestamp)) as \"active_days\",\r\n  count(DISTINCT date_trunc('month', block_timestamp)) as \"active_month\",\r\n  count(DISTINCT date_trunc('year', block_timestamp)) as \"active_year\" ,\r\n----------------------------------------------------------------------\r\n  count(DISTINCT tx_hash) as \"transactions\",\r\n  sum(case when tx_status = 'Success' then 1 end )as \"success\" ,\r\n----------------------------------------------------------------------\r\n  round(sum(transaction_fee / power(10, 24)),3) as \"fee_near\",\r\n  round((\"fee_near\"/\"transactions\"),3) as \"avg_gas_per_trx\" ,\r\n----------------------------------------------------------------------\r\n  round(sum(case when TX:actions[0]:FunctionCall:deposit / POW(10, 24) is not null then TX:actions[0]:FunctionCall:deposit / POW(10, 24)\r\n  else  TX:actions[0]:Transfer:deposit / POW(10, 24)  end ),3) as \"volume\",\r\n  round((\"volume\"/\"transactions\"),3) as \"avg_volume_per_trx\" ,\r\n  count (distinct PROJECT_NAME)  as \"project\"\r\n\r\nFROM near.core.fact_transactions  \r\n              left JOIN  near.core.dim_address_labels \r\n             ON ADDRESS = TX_RECEIVER\r\nwhere TX_SIGNER='{{singer}}'\r\nand block_timestamp::date> '2023-01-01'\r\nGROUP BY 1 `,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 5,\r\n    query: `\r\nWITH \r\n\r\nraw1 as (\r\n SELECT livequery.live.udf_api(\r\n  'GET',\r\n  'https://api.pikespeak.ai/sbt/sbt-by-owner?holder={{singer}}&registry=registry.i-am-human.near',\r\n  {'accept': 'application/json', 'x-api-key':'a4f4ede9-07db-495b-982a-9369fd77c665'},\r\n  {}\r\n ) as response)\r\n\r\n\r\n,raw11 as (\r\n        SELECT\r\n              split(value:expired_at,'T')[0]::string   as \"expired_at\",\r\n              split(value:issued_at,'T')[0]::string   as \"issued_at\",\r\n              DATEDIFF('day',\"issued_at\" ,\"expired_at\") as \"period\",\r\n              DATEDIFF('day',current_date, \"expired_at\" )||'-'||DATEDIFF('day',\"issued_at\" ,\"expired_at\") as \"to_deadline\" ,\r\n              --value:issuer_id::string   as \"issuer_id\",\r\n              --value:owner_id::string   as \"owner_id\",\r\n             -- value:sbt_issuer::string   as \"sbt_issuer\",\r\n               case when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='1' then 'OG'\r\n                    when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='2' then 'Ndc contributor'\r\n                    when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='3' then 'Ndc core contributor'\r\n                    when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='4' then 'Ndc champion'\r\n                    when  value:sbt_issuer::string='fractal.i-am-human.near' then 'Fractal'\r\n                    when  value:sbt_issuer::string='gooddollar-v1.i-am-human.near' then 'Gooddollar'\r\n                    when  value:sbt_issuer::string='issuer.proofofvibes.near' then 'Vibes'\r\n                    when  value:sbt_issuer::string='issuer.regens.near' then 'Regens'\r\n                    else 'other' end as \"issuer\" ,\r\n              value:token_id::string   as \"token_id\"\r\n        from raw1, LATERAL FLATTEN (input => response:data))\r\n\r\nselect * from raw11\r\n`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 6,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"asc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\nWITH call as (\r\n  SELECT\r\n    livequery.live.udf_api(\r\n      'POST',\r\n      'https://graph.mintbase.xyz/mainnet',\r\n      {'Content-Type': 'application/json','mb-api-key': 'anon'},\r\n      {\r\n       'query': 'query MyQuery {\r\n  mb_views_nft_activities_rollup(\r\nwhere: {\r\n      _or: [\r\n        { action_receiver: { _eq: \"{{singer}}\" } },\r\n        { action_sender: { _eq:  \"{{singer}}\"  } }\r\n      ] \r\n    }  ) {\r\n    tx_sender\r\n    token_ids\r\n    title\r\n    timestamp\r\n    reference\r\n    receipt_id\r\n    price\r\n    nft_contract_id\r\n    metadata_id\r\n    media_hash\r\n    media\r\n    kind\r\n    extra\r\n    description\r\n    currency\r\n    count\r\n    action_sender\r\n    action_receiver\r\n  }\r\n}',\r\n       'variables':{}\r\n      }\r\n    ) as response\r\n)\r\n\r\n,b as \r\n(select \r\nvalue:timestamp::date as \"timestamp\" ,\r\nvalue:tx_sender as \"tx_sender\" ,\r\nvalue:action_sender as \"action_sender\" ,\r\nvalue:action_receiver as \"action_receiver\" ,\r\nvalue:kind as \"kind\" ,\r\nvalue:count as \"count\" ,\r\nvalue:receipt_id as \"receipt_id\" ,\r\nvalue:currency as \"currency\" ,\r\nvalue:nft_contract_id as \"nft_contract_id\" ,\r\nvalue:price as \"price\" ,\r\nvalue:title as \"title\" ,\r\nvalue:description as \"description\" \r\n\r\n\r\n   from   call,\r\n     LATERAL FLATTEN (\r\n            input => response:data:data:mb_views_nft_activities_rollup\r\n     )\r\n where value:timestamp::date>'2023-01-01'\r\n)\r\nselect \r\n      date_part(epoch, date_trunc('{{week}}',\"timestamp\")) as \"date\",\r\n      count(distinct \"receipt_id\") as \"hash\" ,\r\n      sum(\"count\") as \"count\"\r\nfrom b \r\ngroup by 1 `,\r\n  },\r\n];\r\n\r\n//---------------------------------------------------------------------------------------------------\r\nconst tabs = {\r\n  left: \"nft activity\",\r\n  middle: \"token activity\",\r\n};\r\nconst setTab = (tab) => State.update({ tab });\r\nconst Container = styled.div`\r\n  &&{text-align:left};\r\n  .tabContent{\r\n    display:inline-flex;\r\n    align-items:left;\r\n    background: rgba(26, 46, 51, 0.25);\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    padding:3px 4px;\r\n    list-style-type:none;\r\n    margin: 0 auto;\r\n  }\r\n  .tab-item .active{\r\n    background: #304352;\r\n  }\r\n  .tab-item button{\r\n    background-color:transparent;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    color:#fff;\r\n    height:30px;\r\n    padding:0 22px;\r\n    border:none;\r\n  }\r\n`;\r\n//---------------------------------------------------------------------------------------------------\r\nconst general_theme = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"SBT \",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Tracker\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst general_theme1 = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Acticity\",\r\n  fontsize: \"25px\",\r\n  fontweight: \"50px\",\r\n  afterbrand: \"Area\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n\r\nconst transactions = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Transactions\",\r\n  description: `${state.result.query4?.data[0]?.transactions || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst date = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Fee(Near)\",\r\n  description: `${state.result.query4?.data[0]?.fee_near || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst contract = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Total Platforms\",\r\n  description: `${state.result.query4?.data[0]?.project || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst volume = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Volume(Near)\",\r\n  description: `${state.result.query4?.data[0]?.volume || \"0\"}`,\r\n  fontsize: \"25px\",\r\n  fontweight: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst max_time = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Last Transaction\",\r\n  description: `${state.result.query4?.data[0]?.max_time || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst active_month = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Active Month\",\r\n  description: `${state.result.query4?.data[0]?.active_month || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst active_days = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Active Days\",\r\n  description: `${state.result.query4?.data[0]?.active_days || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst min_time = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"First 2023 Transactions\",\r\n  description: `${state.result.query4?.data[0]?.min_time || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n\r\n// state ####################################\r\n\r\nState.init({\r\n  searchedSinger: \"\",\r\n  searchedInterval: \"\",\r\n  result: {},\r\n  loader: [],\r\n  isLoading: false,\r\n  error: [],\r\n  queriesRuned: false,\r\n  tab: tabs.left,\r\n});\r\n\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === singer && state.searchedInterval === interval) {\r\n    return;\r\n  } else {\r\n    State.update({\r\n      searchedSinger: singer,\r\n      searchedInterval: interval,\r\n      loader: [],\r\n      result: {},\r\n      isLoading: true,\r\n      queriesRuned: false,\r\n    });\r\n  }\r\n};\r\ncheckNewSinger();\r\n// handle hashed data #############################\r\nconst handleHasedData = ({ hash, id }) => {\r\n  if (state.result[\"query\" + id].isDone) return;\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`query ${id}: ${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: true,\r\n          data: null,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    const filteredData = result.data.filter(\r\n      (row) => row.SINGER === state.searchedSinger\r\n    );\r\n    State.update({\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: filteredData,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n// handle runed data ###################################\r\nconst createQuery = (queries, singer, interval) => {\r\n  const queriesArr = queries.map((q) => {\r\n    const queryWithProps = q.query\r\n      .replaceAll(\"{{singer}}\", singer)\r\n      .replaceAll(\"{{week}}\", interval);\r\n    q.query = queryWithProps;\r\n    return q;\r\n  });\r\n  return queriesArr;\r\n};\r\nconst isAllDataLoaded = () => {\r\n  const resultArr = Object.entries(state.result);\r\n  if (resultArr.length === 0) return false;\r\n  return resultArr.every((query) => {\r\n    return !query[1].isLoading;\r\n  });\r\n};\r\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\r\n  State.update(({ result, loader }) => {\r\n    const newResult = {\r\n      ...result,\r\n      [`query${id}`]: {\r\n        data:\r\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\r\n        error: !!error,\r\n        isLoading: isLoading,\r\n        queryRunId: queryRunId,\r\n        id: id,\r\n      },\r\n    };\r\n    const newLoader = loader.filter(({ id: loaderId }) => loaderId !== id);\r\n    if (error) {\r\n      const queryError = `query${id} : ${error}`;\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        loader: newLoader.length === 0 ? [] : newLoader,\r\n        error: [...state.error, queryError],\r\n      };\r\n    } else {\r\n      if (data) {\r\n        Storage.set(\r\n          `${state.searchedSinger}-${state.searchedInterval}-${id}`,\r\n          queryRunId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        ...(data && { loader: newLoader.length === 0 ? [] : newLoader }),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst runqueries = (queries) => {\r\n  if (state.searchedSinger.length === 0) {\r\n    State.update({\r\n      isLoading: false,\r\n      error: [...state.error, \"singer is not provided\"],\r\n    });\r\n    return;\r\n  }\r\n\r\n  const queriesArr = createQuery(\r\n    queries,\r\n    state.searchedSinger,\r\n    state.searchedInterval\r\n  );\r\n  const loader = queriesArr.map((q) => {\r\n    const queryRunId = Storage.get(\r\n      `${state.searchedSinger}-${state.searchedInterval}-${q.id}`\r\n    );\r\n    const props = {\r\n      apiKey: API_KEY,\r\n      id: q.id,\r\n      query: q.query,\r\n      onResult: updateResultState,\r\n      firstReqTime: q.firstReqTime,\r\n      queryRunId,\r\n      queryOption: {\r\n        page: {\r\n          number: 1,\r\n          size: 1000,\r\n        },\r\n        cacheTime: 60,\r\n        ...q?.queryOption,\r\n      },\r\n    };\r\n    return {\r\n      id: q.id,\r\n      element: (\r\n        <Widget\r\n          src=\"lord1.near/widget/api-flipside\"\r\n          id={q.id}\r\n          key={q.id}\r\n          props={props}\r\n        />\r\n      ),\r\n    };\r\n  });\r\n  State.update({\r\n    loader: loader,\r\n    isLoading: true,\r\n    queriesRuned: true,\r\n  });\r\n};\r\n\r\nif (isAllDataLoaded()) {\r\n  State.update({ isLoading: false });\r\n}\r\n\r\nif (state.isLoading) {\r\n  const withHashQueries = [];\r\n  const withoutHashQueries = [];\r\n  queries.forEach(({ hash, id, query, ...other }) => {\r\n    if (hash) {\r\n      withHashQueries.push({ hash, id });\r\n    }\r\n    if (query) {\r\n      withoutHashQueries.push({ query, hash, id, ...other });\r\n    }\r\n  });\r\n  withHashQueries.forEach((query) => handleHasedData(query));\r\n  if (!state.queriesRuned) {\r\n    runqueries(withoutHashQueries);\r\n  }\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n// get props charts #######################################\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const groupedData = {};\r\n  for (const item of data) {\r\n    const keyValue = item[key];\r\n    const valueValue = item[value];\r\n\r\n    if (groupedData[keyValue]) {\r\n      groupedData[keyValue] += valueValue;\r\n    } else {\r\n      groupedData[keyValue] = valueValue;\r\n    }\r\n  }\r\n\r\n  const dataFormat = Object.entries(groupedData).map(\r\n    ([groupKey, groupValue]) => [groupKey, groupValue]\r\n  );\r\n\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\n// dom sections ##############################################\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst ChartIsLoading = (queryId) => (\r\n  <div\r\n    className={`w-100 ${\r\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\r\n    }`}\r\n  >\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\n\r\nconst CardIsLoading = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\n\r\nlet TableMiddle = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"p-2 rounded-4 overflow-auto\">\r\n      {CardIsLoading(3)}\r\n      {CardHasError(3)}\r\n      {state.result[\"query\" + 3]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/Pie-chart\"\r\n          props={getPieProps(\r\n            state.result[\"query\" + 3]?.data,\r\n            [\"contract\", \"transactions\"],\r\n            themeColor.chartColor,\r\n            {\r\n              title: \"\",\r\n              type: \"pie\",\r\n              connector: true,\r\n              legend: true,\r\n            }\r\n          )}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nlet BelowRight = (\r\n  <div\r\n    style={{ background: themeColor?.sbt_area?.section_bg }}\r\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\r\n  >\r\n    <div className=\"p-2 rounded-4 overflow-auto\">\r\n      {CardIsLoading(5)}\r\n      {CardHasError(5)}\r\n      {state.result[\"query\" + 5]?.data && (\r\n        <Widget\r\n          src=\"lord1.near/widget/table-pagination\"\r\n          props={{\r\n            themeColor: { table_pagination: themeColor.table_pagination },\r\n            data: state.result[\"query\" + 5]?.data,\r\n            rowsCount: 4,\r\n            columns: [\r\n              { title: \"Issued At\", key: \"issued_at\" },\r\n              { title: \"Expired At\", key: \"expired_at\" },\r\n\r\n              {\r\n                title: \"To Deadline\",\r\n                key: \"to_deadline\",\r\n                progress: \"yes\",\r\n                percent: \"hidden\",\r\n              },\r\n              { title: \"Type\", key: \"issuer\", colors: \"#806ce1\" },\r\n              { title: \"Token Id\", key: \"token_id\" },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Right = styled.div`\r\n  padding: 2px;\r\n  margin-bottom: 10px;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst H5 = styled.h5`\r\n  color:${themeColor.election?.textColor};\r\n  text-align: center;\r\n`;\r\nconst ChartContainer = styled.div`\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    transition: transform 0.5s;\r\n  }\r\n`;\r\nreturn (\r\n  <>\r\n    {state.loader && (\r\n      <div className=\"d-none\">{state.loader.map((l) => l?.element)}</div>\r\n    )}\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div\r\n      className=\"w-100\"\r\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\r\n    >\r\n      <div className=\"w-100\">\r\n        <div className=\"w-100 py-2\"></div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={transactions}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={volume} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={date} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={contract}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                {\" \"}\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={general_theme1}\r\n                />\r\n                {TableMiddle}\r\n              </div>\r\n              <div className=\"col-md-8\">\r\n                {\" \"}\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={general_theme}\r\n                />\r\n                {BelowRight}{\" \"}\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <Right className=\"col-md-3\">\r\n                <H5>Transaction's Success Rate</H5>\r\n                <div className=\"d-flex justify-content-center\">\r\n                  <ChartContainer>\r\n                    <Widget\r\n                      src=\"lord1.near/widget/pie-percentage\"\r\n                      props={{\r\n                        themeColor,\r\n                        voted: `${\r\n                          state.result.query4?.data[0]?.success || \"0\"\r\n                        }`,\r\n                        total: `${\r\n                          state.result.query4?.data[0]?.transactions || \"0\"\r\n                        }`,\r\n                        percent: 60,\r\n                      }}\r\n                    />\r\n                  </ChartContainer>\r\n                </div>\r\n              </Right>\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={min_time}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={active_days}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={active_month}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={max_time}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-transaction", "fact_widget_deployments_id": "7e5a795ccc2e9dc69325b383447d311e", "inserted_timestamp": "2023-12-11T16:36:41.003Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 12}