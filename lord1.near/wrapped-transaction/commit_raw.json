{"tx_hash": "74uk7LjPjzJgvYW9hwpGgd5PG89H6nKnZZPv7J87RFrr", "action_id_social": "4DABUaJATsZ9tmrCteCs8tUHMBrAka5VwWmex5phJtAn-0-widget", "block_id": 107959317, "block_timestamp": "2023-12-14T23:00:28.751Z", "signer_id": "lord1.near", "widget_name": "wrapped-transaction", "source_code": "const API_KEY = props.API_KEY;\nconst themeColor = props.themeColor;\nconst singer = props.singer;\nconst interval = props.interval || \"week\";\nconst queries = [\n  {\n    hash: null,\n    firstReqTime: 5,\n    id: 1,\n    queryOption: {\n      sortBy: [\n        {\n          column: \"count\",\n          direction: \"desc\",\n        },\n      ],\n    },\n    query: `\n\nWITH call as (\n  SELECT\n    livequery.live.udf_api(\n      'POST',\n      'https://graph.mintbase.xyz/mainnet',\n      {'Content-Type': 'application/json','mb-api-key': 'anon'},\n      {\n       'query': 'query MyQuery {\n  mb_views_nft_activities_rollup(\nwhere: {\n      _or: [\n        { action_receiver: { _eq: \"{{singer}}\" } },\n        { action_sender: { _eq:  \"{{singer}}\"  } }\n      ] \n    }  ) {\n    tx_sender\n    token_ids\n    title\n    timestamp\n    reference\n    receipt_id\n    price\n    nft_contract_id\n    metadata_id\n    media_hash\n    media\n    kind\n    extra\n    description\n    currency\n    count\n    action_sender\n    action_receiver\n  }\n}',\n       'variables':{}\n      }\n    ) as response\n)\n\n,b as \n(select \nvalue:timestamp::date as \"timestamp\" ,\nvalue:tx_sender as \"tx_sender\" ,\nvalue:action_sender as \"action_sender\" ,\nvalue:action_receiver as \"action_receiver\" ,\nvalue:kind as \"kind\" ,\nvalue:count as \"count\" ,\nvalue:receipt_id as \"receipt_id\" ,\nvalue:currency as \"currency\" ,\nvalue:nft_contract_id as \"nft_contract_id\" ,\nvalue:price/pow(10,24) as \"price\" ,\nvalue:title as \"title\" ,\nvalue:description as \"description\" \n\n\n   from   call,\n     LATERAL FLATTEN (\n            input => response:data:data:mb_views_nft_activities_rollup\n     )\n where value:timestamp::date>'2023-01-01'\n)\nselect \n      \"kind\" ,\n      sum(\"count\") as \"count\" ,\n      count(\"nft_contract_id\") as \"nft_contract_id\" , \n     COALESCE(round(sum(\"price\"),2),0) as \"price\"\nfrom b \ngroup by 1 `,\n  },\n\n  {\n    hash: null,\n    firstReqTime: 5,\n    id: 3,\n    query: `\nSELECT  \n      case when LABEL_TYPE is not null then LABEL_TYPE \n      else  'other'  end as \"contract\",  \n      COUNT(DISTINCT tx_hash) as \"transactions\" \n    FROM  near.core.dim_address_labels \n    right JOIN  near.core.fact_transactions\n    ON ADDRESS = TX_RECEIVER\n    WHERE TX_STATUS = 'Success'\n    and TX_SIGNER = lower('{{singer}}')    \n    and BLOCK_TIMESTAMP::date >='2023-01-01' \n\n  GROUP BY 1 \n  order by 2`,\n  },\n  {\n    hash: null,\n    firstReqTime: 5,\n    id: 4,\n    query: `\n  SELECT \n  TX_SIGNER as \"signer\",\n  split(min(block_timestamp)::date,'T')[0] as \"min_time\" ,\n  split(max(block_timestamp)::date,'T')[0] as \"max_time\" ,\n  count(DISTINCT date_trunc('day', block_timestamp)) as \"active_days\",\n  count(DISTINCT date_trunc('month', block_timestamp)) as \"active_month\",\n  count(DISTINCT date_trunc('year', block_timestamp)) as \"active_year\" ,\n----------------------------------------------------------------------\n  count(DISTINCT tx_hash) as \"transactions\",\n  sum(case when tx_status = 'Success' then 1 end )as \"success\" ,\n----------------------------------------------------------------------\n  round(sum(transaction_fee / power(10, 24)),3) as \"fee_near\",\n  round((\"fee_near\"/\"transactions\"),3) as \"avg_gas_per_trx\" ,\n----------------------------------------------------------------------\n  round(sum(case when TX:actions[0]:FunctionCall:deposit / POW(10, 24) is not null then TX:actions[0]:FunctionCall:deposit / POW(10, 24)\n  else  TX:actions[0]:Transfer:deposit / POW(10, 24)  end ),3) as \"volume\",\n  round((\"volume\"/\"transactions\"),3) as \"avg_volume_per_trx\" ,\n  count (distinct PROJECT_NAME)  as \"project\"\n\nFROM near.core.fact_transactions  \n              left JOIN  near.core.dim_address_labels \n             ON ADDRESS = TX_RECEIVER\nwhere TX_SIGNER='{{singer}}'\nand block_timestamp::date> '2023-01-01'\nGROUP BY 1 `,\n  },\n  {\n    hash: null,\n    firstReqTime: 5,\n    id: 5,\n    query: `\nWITH \n\nraw1 as (\n SELECT livequery.live.udf_api(\n  'GET',\n  'https://api.pikespeak.ai/sbt/sbt-by-owner?holder={{singer}}&registry=registry.i-am-human.near',\n  {'accept': 'application/json', 'x-api-key':'a4f4ede9-07db-495b-982a-9369fd77c665'},\n  {}\n ) as response)\n\n\n,raw11 as (\n        SELECT\n              split(value:expired_at,'T')[0]::string   as \"expired_at\",\n              split(value:issued_at,'T')[0]::string   as \"issued_at\",\n              DATEDIFF('day',\"issued_at\" ,\"expired_at\") as \"period\",\n              DATEDIFF('day',current_date, \"expired_at\" )||'-'||DATEDIFF('day',\"issued_at\" ,\"expired_at\") as \"to_deadline\" ,\n              --value:issuer_id::string   as \"issuer_id\",\n              --value:owner_id::string   as \"owner_id\",\n             -- value:sbt_issuer::string   as \"sbt_issuer\",\n               case when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='1' then 'OG'\n                    when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='2' then 'Ndc contributor'\n                    when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='3' then 'Ndc core contributor'\n                    when  value:sbt_issuer::string='community.i-am-human.near' and value:class_id::string='4' then 'Ndc champion'\n                    when  value:sbt_issuer::string='fractal.i-am-human.near' then 'Fractal'\n                    when  value:sbt_issuer::string='gooddollar-v1.i-am-human.near' then 'Gooddollar'\n                    when  value:sbt_issuer::string='issuer.proofofvibes.near' then 'Vibes'\n                    when  value:sbt_issuer::string='issuer.regens.near' then 'Regens'\n                    else 'other' end as \"issuer\" ,\n              value:token_id::string   as \"token_id\"\n        from raw1, LATERAL FLATTEN (input => response:data))\n\nselect * from raw11\n`,\n  },\n  {\n    hash: null,\n    firstReqTime: 5,\n    id: 6,\n    queryOption: {\n      sortBy: [\n        {\n          column: \"date\",\n          direction: \"asc\",\n        },\n      ],\n    },\n    query: `\nWITH call as (\n  SELECT\n    livequery.live.udf_api(\n      'POST',\n      'https://graph.mintbase.xyz/mainnet',\n      {'Content-Type': 'application/json','mb-api-key': 'anon'},\n      {\n       'query': 'query MyQuery {\n  mb_views_nft_activities_rollup(\nwhere: {\n      _or: [\n        { action_receiver: { _eq: \"{{singer}}\" } },\n        { action_sender: { _eq:  \"{{singer}}\"  } }\n      ] \n    }  ) {\n    tx_sender\n    token_ids\n    title\n    timestamp\n    reference\n    receipt_id\n    price\n    nft_contract_id\n    metadata_id\n    media_hash\n    media\n    kind\n    extra\n    description\n    currency\n    count\n    action_sender\n    action_receiver\n  }\n}',\n       'variables':{}\n      }\n    ) as response\n)\n\n,b as \n(select \nvalue:timestamp::date as \"timestamp\" ,\nvalue:tx_sender as \"tx_sender\" ,\nvalue:action_sender as \"action_sender\" ,\nvalue:action_receiver as \"action_receiver\" ,\nvalue:kind as \"kind\" ,\nvalue:count as \"count\" ,\nvalue:receipt_id as \"receipt_id\" ,\nvalue:currency as \"currency\" ,\nvalue:nft_contract_id as \"nft_contract_id\" ,\nvalue:price as \"price\" ,\nvalue:title as \"title\" ,\nvalue:description as \"description\" \n\n\n   from   call,\n     LATERAL FLATTEN (\n            input => response:data:data:mb_views_nft_activities_rollup\n     )\n where value:timestamp::date>'2023-01-01'\n)\nselect \n      date_part(epoch, date_trunc('{{week}}',\"timestamp\")) as \"date\",\n      count(distinct \"receipt_id\") as \"hash\" ,\n      sum(\"count\") as \"count\"\nfrom b \ngroup by 1 `,\n  },\n];\n\n//---------------------------------------------------------------------------------------------------\nconst tabs = {\n  left: \"nft activity\",\n  middle: \"token activity\",\n};\nconst setTab = (tab) => State.update({ tab });\nconst Container = styled.div`\n  &&{text-align:left};\n  .tabContent{\n    display:inline-flex;\n    align-items:left;\n    background: rgba(26, 46, 51, 0.25);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n    padding:3px 4px;\n    list-style-type:none;\n    margin: 0 auto;\n  }\n  .tab-item .active{\n    background: #304352;\n  }\n  .tab-item button{\n    background-color:transparent;\n    border-radius: 8px;\n    font-weight: 500;\n    font-size: 14px;\n    color:#fff;\n    height:30px;\n    padding:0 22px;\n    border:none;\n  }\n`;\n//---------------------------------------------------------------------------------------------------\nconst general_theme = {\n  height: \"90px\",\n  align: \"center\",\n  description: \"\",\n  brand: \"SBT \",\n  fontsize: \"25px\",\n  fontweight: \"50px\",\n  afterbrand: \"Tracker\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst general_theme1 = {\n  height: \"90px\",\n  align: \"center\",\n  description: \"\",\n  brand: \"Activity\",\n  fontsize: \"25px\",\n  fontweight: \"50px\",\n  afterbrand: \"Area\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n\nconst transactions = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Transactions\",\n  description: `${state.result.query4?.data[0]?.transactions || \"0\"}`,\n  fontsize: \"25px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst date = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Fee(Near)\",\n  description: `${state.result.query4?.data[0]?.fee_near || \"0\"}`,\n  fontsize: \"25px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst contract = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Total Platforms\",\n  description: `${state.result.query4?.data[0]?.project || \"0\"}`,\n  fontsize: \"25px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst volume = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Volume(Near)\",\n  description: `${state.result.query4?.data[0]?.volume || \"0\"}`,\n  fontsize: \"25px\",\n  fontweight: \"25px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst max_time = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Last Transaction\",\n  description: `${state.result.query4?.data[0]?.max_time || \"0\"}`,\n  fontsize: \"20px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst active_month = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Active Month\",\n  description: `${state.result.query4?.data[0]?.active_month || \"0\"}`,\n  fontsize: \"20px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst active_days = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"Active Days\",\n  description: `${state.result.query4?.data[0]?.active_days || \"0\"}`,\n  fontsize: \"20px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst min_time = {\n  height: \"110px\",\n  align: \"center\",\n  brand: \"First 2023 Transactions\",\n  description: `${state.result.query4?.data[0]?.min_time || \"0\"}`,\n  fontsize: \"20px\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n//---------------------------------------------------------------------------------------------------\n\n// state ####################################\n\nState.init({\n  searchedSinger: \"\",\n  searchedInterval: \"\",\n  result: {},\n  loader: [],\n  isLoading: false,\n  error: [],\n  queriesRuned: false,\n  tab: tabs.left,\n});\n\nconst checkNewSinger = () => {\n  if (state.searchedSinger === singer && state.searchedInterval === interval) {\n    return;\n  } else {\n    State.update({\n      searchedSinger: singer,\n      searchedInterval: interval,\n      loader: [],\n      result: {},\n      isLoading: true,\n      queriesRuned: false,\n    });\n  }\n};\ncheckNewSinger();\n// handle hashed data #############################\nconst handleHasedData = ({ hash, id }) => {\n  if (state.result[\"query\" + id].isDone) return;\n  const result = fetchData(hash);\n  if (result.isLoading) {\n    State.update({\n      isLoading: true,\n      result: {\n        ...state.result,\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\n      },\n    });\n  }\n  if (result.error) {\n    const errors = state.error;\n    errors.push(`query ${id}: ${result.error}`);\n    State.update({\n      error: errors,\n      result: {\n        ...state.result,\n        [\"query\" + id]: {\n          isLoading: false,\n          error: true,\n          data: null,\n          isDone: true,\n        },\n      },\n    });\n  }\n  if (result.data) {\n    const filteredData = result.data.filter(\n      (row) => row.SINGER === state.searchedSinger\n    );\n    State.update({\n      result: {\n        ...state.result,\n        [\"query\" + id]: {\n          isLoading: false,\n          error: false,\n          data: filteredData,\n          isDone: true,\n        },\n      },\n    });\n  }\n};\nconst fetchData = (hash) => {\n  const data = fetch(\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\n    {\n      subscribe: true,\n      method: \"GET\",\n      headers: {\n        Accept: \"*/*\",\n      },\n    }\n  );\n  const result = {\n    data: (data && data.body) || null,\n    error: (data && !data.ok && (data.status || data.error)) || null,\n    isLoading: !data && !error,\n  };\n  return result;\n};\n// handle runed data ###################################\nconst createQuery = (queries, singer, interval) => {\n  const queriesArr = queries.map((q) => {\n    const queryWithProps = q.query\n      .replaceAll(\"{{singer}}\", singer)\n      .replaceAll(\"{{week}}\", interval);\n    q.query = queryWithProps;\n    return q;\n  });\n  return queriesArr;\n};\nconst isAllDataLoaded = () => {\n  const resultArr = Object.entries(state.result);\n  if (resultArr.length === 0) return false;\n  return resultArr.every((query) => {\n    return !query[1].isLoading;\n  });\n};\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\n  State.update(({ result, loader }) => {\n    const newResult = {\n      ...result,\n      [`query${id}`]: {\n        data:\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\n        error: !!error,\n        isLoading: isLoading,\n        queryRunId: queryRunId,\n        id: id,\n      },\n    };\n    const newLoader = loader.filter(({ id: loaderId }) => loaderId !== id);\n    if (error) {\n      const queryError = `query${id} : ${error}`;\n      return {\n        ...state,\n        result: { ...newResult },\n        loader: newLoader.length === 0 ? [] : newLoader,\n        error: [...state.error, queryError],\n      };\n    } else {\n      if (data) {\n        Storage.set(\n          `${state.searchedSinger}-${state.searchedInterval}-${id}`,\n          queryRunId\n        );\n      }\n      return {\n        ...state,\n        result: { ...newResult },\n        ...(data && { loader: newLoader.length === 0 ? [] : newLoader }),\n      };\n    }\n  });\n};\n\nconst runqueries = (queries) => {\n  if (state.searchedSinger.length === 0) {\n    State.update({\n      isLoading: false,\n      error: [...state.error, \"singer is not provided\"],\n    });\n    return;\n  }\n\n  const queriesArr = createQuery(\n    queries,\n    state.searchedSinger,\n    state.searchedInterval\n  );\n  const loader = queriesArr.map((q) => {\n    const queryRunId = Storage.get(\n      `${state.searchedSinger}-${state.searchedInterval}-${q.id}`\n    );\n    const props = {\n      apiKey: API_KEY,\n      id: q.id,\n      query: q.query,\n      onResult: updateResultState,\n      firstReqTime: q.firstReqTime,\n      queryRunId,\n      queryOption: {\n        page: {\n          number: 1,\n          size: 1000,\n        },\n        cacheTime: 60,\n        ...q?.queryOption,\n      },\n    };\n    return {\n      id: q.id,\n      element: (\n        <Widget\n          src=\"lord1.near/widget/api-flipside\"\n          id={q.id}\n          key={q.id}\n          props={props}\n        />\n      ),\n    };\n  });\n  State.update({\n    loader: loader,\n    isLoading: true,\n    queriesRuned: true,\n  });\n};\n\nif (isAllDataLoaded()) {\n  State.update({ isLoading: false });\n}\n\nif (state.isLoading) {\n  const withHashQueries = [];\n  const withoutHashQueries = [];\n  queries.forEach(({ hash, id, query, ...other }) => {\n    if (hash) {\n      withHashQueries.push({ hash, id });\n    }\n    if (query) {\n      withoutHashQueries.push({ query, hash, id, ...other });\n    }\n  });\n  withHashQueries.forEach((query) => handleHasedData(query));\n  if (!state.queriesRuned) {\n    runqueries(withoutHashQueries);\n  }\n}\n\n// error managment #######################\nif (state.error.length > 0) {\n  function hide() {\n    const errors = state.error;\n    errors.shift();\n    if (errors.length > 0) setTimeout(hide, 2500);\n    State.update({ error: errors });\n  }\n  setTimeout(hide, 2500);\n}\n\n// get props charts #######################################\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\n  data = data || [];\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const dataFormat = serieses.map((series) => {\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\n    return {\n      data: dataFormated,\n      name: series.seriesName,\n      type: series.type,\n      axisId: series.id,\n    };\n  });\n  const props = {\n    series: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      subtitle: \"chart subtitle\",\n      legend: true,\n      stacking: \"false\",\n      ...chartOption,\n    },\n    overrideOptions: {\n      plotOptions: {\n        column: {\n          stacking: \"false\",\n        },\n        series: {\n          dataGrouping: { enabled: false },\n        },\n      },\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\nconst getPieProps = (data, [key, value], colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const groupedData = {};\n  for (const item of data) {\n    const keyValue = item[key];\n    const valueValue = item[value];\n\n    if (groupedData[keyValue]) {\n      groupedData[keyValue] += valueValue;\n    } else {\n      groupedData[keyValue] = valueValue;\n    }\n  }\n\n  const dataFormat = Object.entries(groupedData).map(\n    ([groupKey, groupValue]) => [groupKey, groupValue]\n  );\n\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      type: \"pie\",\n      legend: false,\n      connector: false,\n      ...chartOption,\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n\n// dom sections ##############################################\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\nconst ChartIsLoading = (queryId) => (\n  <div\n    className={`w-100 ${\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\n    }`}\n  >\n    <Widget\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n      props={{ ...spinnerColors }}\n    />\n  </div>\n);\nconst ChartHasError = (queryId) =>\n  state.result?.[`query${queryId}`]?.error && (\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\n  );\n\nconst CardIsLoading = (queryId) =>\n  state.result?.[`query${queryId}`]?.isLoading && (\n    <div\n      className=\"d-flex flex-column gap-1\"\n      style={{\n        padding: \"60px 12px\",\n      }}\n    >\n      <Widget\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\n        props={{\n          ...spinnerColors,\n        }}\n      />\n      <span\n        style={{\n          fontWeight: \"bold\",\n          fontsize: 15,\n          color: \"#4f46e5\",\n          textAlign: \"center\",\n        }}\n      >\n        Loading...\n      </span>\n    </div>\n  );\nconst CardHasError = (queryId) =>\n  state.result?.[`query${queryId}`]?.error && (\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\n      An error occurred for this section\n    </div>\n  );\n\nlet TableMiddle = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div className=\"p-2 rounded-4 overflow-auto\">\n      {CardIsLoading(3)}\n      {CardHasError(3)}\n      {state.result[\"query\" + 3]?.data && (\n        <Widget\n          src=\"lord1.near/widget/Pie-chart\"\n          props={getPieProps(\n            state.result[\"query\" + 3]?.data,\n            [\"contract\", \"transactions\"],\n            themeColor.chartColor,\n            {\n              title: \"\",\n              type: \"pie\",\n              connector: true,\n              legend: true,\n            }\n          )}\n        />\n      )}\n    </div>\n  </div>\n);\n\nlet BelowRight = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div\n      style={{ background: themeColor?.sbt_area?.card_bg }}\n      className=\"shadow-sm rounded-2 overflow-auto\"\n    >\n      {CardIsLoading(5)}\n      {CardHasError(5)}\n      {state.result[\"query\" + 5]?.data && (\n        <Widget\n          src=\"lord1.near/widget/table-pagination\"\n          props={{\n            themeColor: { table_pagination: themeColor.table_pagination },\n            data: state.result[\"query\" + 5]?.data,\n            rowsCount: 4,\n            columns: [\n              { title: \"Issued At\", key: \"issued_at\" },\n              { title: \"Expired At\", key: \"expired_at\" },\n\n              {\n                title: \"To Deadline\",\n                key: \"to_deadline\",\n                progress: \"yes\",\n                percent: \"hidden\",\n              },\n              { title: \"Type\", key: \"issuer\", colors: \"#806ce1\" },\n              { title: \"Token Id\", key: \"token_id\" },\n            ],\n          }}\n        />\n      )}\n    </div>\n  </div>\n);\n\nconst Right = styled.div`\n  padding: 2px;\n  margin-bottom: 10px;\n  border-radius: 8px;\n`;\n\nconst H5 = styled.h5`\n  color:${themeColor.election?.textColor};\n  text-align: center;\n`;\nconst ChartContainer = styled.div`\n  &:hover {\n    transform: scale(1.1);\n    transition: transform 0.5s;\n  }\n`;\nreturn (\n  <>\n    {state.loader && (\n      <div className=\"d-none\">{state.loader.map((l) => l?.element)}</div>\n    )}\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\n      {state.error.length > 0 &&\n        state.error.map((er) => (\n          <div\n            className=\"toast show align-items-center text-bg-danger border-0\"\n            role=\"alert\"\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n          >\n            <div className=\"d-flex\">\n              <div className=\"toast-body\">{er}</div>\n            </div>\n          </div>\n        ))}\n    </div>\n    <div\n      className=\"w-100\"\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\n    >\n      <div className=\"w-100\">\n        <div className=\"w-100 py-2\"></div>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div className=\"row\">\n              <div className=\"col-md-3\">\n                <Widget\n                  src=\"lord1.near/widget/header-dynamic\"\n                  props={transactions}\n                />\n              </div>\n              <div className=\"col-md-3\">\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={volume} />\n              </div>\n              <div className=\"col-md-3\">\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={date} />\n              </div>\n              <div className=\"col-md-3\">\n                <Widget\n                  src=\"lord1.near/widget/header-dynamic\"\n                  props={contract}\n                />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <Widget\n                  src=\"lord1.near/widget/header-dynamic\"\n                  props={general_theme1}\n                />\n                {TableMiddle}\n              </div>\n              <div className=\"col-md-8\">\n                <Widget\n                  src=\"lord1.near/widget/header-dynamic\"\n                  props={general_theme}\n                />\n                {BelowRight}\n              </div>\n            </div>\n            <div\n              style={{\n                background: themeColor?.sbt_area?.section_bg,\n                \"margin-top\": \"25px\",\n              }}\n              className=\"shadow-sm rounded-2 overflow-auto p-2\"\n            >\n              <div className=\"row\">\n                <Right className=\"col-md-3\">\n                  <H5> Success Rate</H5>\n                  <div className=\"d-flex justify-content-center\">\n                    <ChartContainer>\n                      <Widget\n                        src=\"lord1.near/widget/pie-percentage\"\n                        props={{\n                          themeColor,\n                          voted: `${\n                            state.result.query4?.data[0]?.success || \"0\"\n                          }`,\n                          total: `${\n                            state.result.query4?.data[0]?.transactions || 1\n                          }`,\n                          percent: 60,\n                        }}\n                      />\n                    </ChartContainer>\n                  </div>\n                </Right>\n                <div className=\"col-md-3\">\n                  <Widget\n                    src=\"lord1.near/widget/header-dynamic\"\n                    props={min_time}\n                  />\n                </div>\n                <div className=\"col-md-2\">\n                  <Widget\n                    src=\"lord1.near/widget/header-dynamic\"\n                    props={active_days}\n                  />\n                </div>\n                <div className=\"col-md-2\">\n                  <Widget\n                    src=\"lord1.near/widget/header-dynamic\"\n                    props={active_month}\n                  />\n                </div>\n                <div className=\"col-md-2\">\n                  <Widget\n                    src=\"lord1.near/widget/header-dynamic\"\n                    props={max_time}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-transaction", "fact_widget_deployments_id": "087806fd0061f1f8877b7fb17b612a00", "inserted_timestamp": "2023-12-15T01:09:28.735Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 5}