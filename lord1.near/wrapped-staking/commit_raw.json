{"tx_hash": "4H9MinsDT7vjuYD7PCKYkgiHnTgLxa4WXFGdiwxHu7Xw", "action_id_social": "8gg7Fp5jfRJcCjFdAvpzyoaKVTJq2GUomBcakAZtvWgj-0-widget", "block_id": 107953216, "block_timestamp": "2023-12-14T21:13:21.343Z", "signer_id": "lord1.near", "widget_name": "wrapped-staking", "source_code": "const API_KEY = props.API_KEY;\r\nconst themeColor = props.themeColor;\r\nconst singer = props.singer;\r\nconst interval = props.interval || \"week\";\r\nconst queries = [\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 4,\r\n    query: `\r\n with staketable as (\r\n          select date_trunc ({{week}},block_timestamp) as date,\r\n                  'Stake' as action_type,\r\n                  count (distinct tx_hash) as Actions_Count,\r\n                  count (distinct signer_id) as Users_Count,\r\n                  sum (amount) as Volume,\r\n                  avg (amount) as Average_Volume,\r\n                  sum (actions_count) over (order by date) as Cumulative_Actions,\r\n                  sum (volume) over (order by date) as Cumulative_Volume\r\n          from near.gov.fact_staking_actions\r\n          where ACTION in ('staking') \r\n          and SIGNER_ID='{{singer}}'\r\ngroup by 1,2),\r\n\r\nunstaketable as (\r\n          select date_trunc ({{week}},block_timestamp) as date,\r\n                'Unstake' as action_type,\r\n                count (distinct tx_hash) as Actions_Count,\r\n                count (distinct signer_id) as Users_Count,\r\n                sum (amount)*-1 as Volume,\r\n                avg (amount) as Average_Volume,\r\n                sum (actions_count) over (order by date) as Cumulative_Actions,\r\n                sum (volume*-1) over (order by date) as Cumulative_Volume\r\n          from near.gov.fact_staking_actions\r\n          where ACTION in ('unstaking') \r\n            and SIGNER_ID='{{singer}}' \r\ngroup by 1,2) \r\n\r\nselect \r\n        COALESCE(t1.actions_count,0)+COALESCE(t2.actions_count,0) as \"transactions\",\r\n        COALESCE(round(t1.volume,2),0) as \"staked_volume\",\r\n        COALESCE(round(t2.volume,2),0) as \"unstaked_volume\",\r\n        COALESCE(\"staked_volume\" + \"unstaked_volume\" ,0) as \"net_volume\"\r\nfrom staketable t1 , unstaketable t2 \r\norder by 1 desc\r\n`,\r\n  },\r\n  {\r\n    hash: null,\r\n    firstReqTime: 5,\r\n    id: 6,\r\n    queryOption: {\r\n      sortBy: [\r\n        {\r\n          column: \"date\",\r\n          direction: \"asc\",\r\n        },\r\n      ],\r\n    },\r\n    query: `\r\n with staketable as (\r\n          select date_trunc ({{week}},block_timestamp) as date,\r\n                  'Stake' as action_type,\r\n                  count (distinct tx_hash) as Actions_Count,\r\n                  count (distinct signer_id) as Users_Count,\r\n                  sum (amount) as Volume,\r\n                  avg (amount) as Average_Volume,\r\n                  sum (actions_count) over (order by date) as Cumulative_Actions,\r\n                  sum (volume) over (order by date) as Cumulative_Volume\r\n          from near.gov.fact_staking_actions\r\n          where ACTION in ('staking') \r\n          and SIGNER_ID='{{singer}}'\r\ngroup by 1,2),\r\n\r\nunstaketable as (\r\n          select date_trunc ({{week}},block_timestamp) as date,\r\n                'Unstake' as action_type,\r\n                count (distinct tx_hash) as Actions_Count,\r\n                count (distinct signer_id) as Users_Count,\r\n                sum (amount)*-1 as Volume,\r\n                avg (amount) as Average_Volume,\r\n                sum (actions_count) over (order by date) as Cumulative_Actions,\r\n                sum (volume*-1) over (order by date) as Cumulative_Volume\r\n          from near.gov.fact_staking_actions\r\n          where ACTION in ('unstaking') \r\n            and SIGNER_ID='{{singer}}' \r\ngroup by 1,2) \r\n\r\nselect date_part(epoch,to_timestamp((COALESCE(t1.date::date,t2.date::date ))))  as \"date\",\r\n        COALESCE(t1.actions_count,0) as \"stake_transactions\",\r\n        COALESCE(t2.actions_count,0) as \"unstake_transactions\",\r\n        COALESCE(round(t1.volume,2),0) as \"staked_volume\",\r\n        COALESCE(round(t2.volume,2),0) as \"unstaked_volume\",\r\n        COALESCE(\"staked_volume\" + \"unstaked_volume\" ,0) as \"net_volume\",\r\n        sum (\"net_volume\") over (order by t1.date) as \"cumulative_net_staked_volume\"\r\nfrom staketable t1 \r\n    full outer join unstaketable t2 \r\n    on t1.date = t2.date\r\norder by 1 desc`,\r\n  },\r\n];\r\n\r\n//---------------------------------------------------------------------------------------------------\r\nconst tabs = {\r\n  left: \"nft activity\",\r\n  middle: \"token activity\",\r\n};\r\nconst setTab = (tab) => State.update({ tab });\r\nconst Container = styled.div`\r\n  &&{text-align:left};\r\n  .tabContent{\r\n    display:inline-flex;\r\n    align-items:left;\r\n    background: rgba(26, 46, 51, 0.25);\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    padding:3px 4px;\r\n    list-style-type:none;\r\n    margin: 0 auto;\r\n  }\r\n  .tab-item .active{\r\n    background: #304352;\r\n  }\r\n  .tab-item button{\r\n    background-color:transparent;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    color:#fff;\r\n    height:30px;\r\n    padding:0 22px;\r\n    border:none;\r\n  }\r\n`;\r\n//---------------------------------------------------------------------------------------------------\r\n\r\nconst chartabove = {\r\n  height: \"90px\",\r\n  align: \"center\",\r\n  description: \"\",\r\n  brand: \"Un/Staking \",\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"Activity\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst transactions = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Un/Stake Transactions\",\r\n  description: `${state.result.query4?.data[0]?.transactions || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst date = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Stake Volume\",\r\n  description: `${state.result.query4?.data[0]?.staked_volume || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst contract = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"UnStake Volume\",\r\n  description: `${state.result.query4?.data[0]?.unstaked_volume || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\nconst volume = {\r\n  height: \"110px\",\r\n  align: \"center\",\r\n  brand: \"Net Volume\",\r\n  description: `${state.result.query4?.data[0]?.net_volume || \"0\"}`,\r\n  fontsize: \"20px\",\r\n  fontweight: \"25px\",\r\n  fontweight: \"25px\",\r\n  afterbrand: \"\",\r\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\r\n  fontbrand: \" Arial, sans-serif\",\r\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\r\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\r\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\r\n  fontsubtitle: \" Arial, sans-serif\",\r\n  background:\r\n    themeColor?.dynamic_header?.background ||\r\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\r\n};\r\n//---------------------------------------------------------------------------------------------------\r\n\r\n// state ####################################\r\n\r\nState.init({\r\n  searchedSinger: \"\",\r\n  searchedInterval: \"\",\r\n  result: {},\r\n  loader: [],\r\n  isLoading: false,\r\n  error: [],\r\n  queriesRuned: false,\r\n  tab: tabs.left,\r\n});\r\n\r\nconst checkNewSinger = () => {\r\n  if (state.searchedSinger === singer && state.searchedInterval === interval) {\r\n    return;\r\n  } else {\r\n    State.update({\r\n      searchedSinger: singer,\r\n      searchedInterval: interval,\r\n      loader: [],\r\n      result: {},\r\n      isLoading: true,\r\n      queriesRuned: false,\r\n    });\r\n  }\r\n};\r\ncheckNewSinger();\r\n// handle hashed data #############################\r\nconst handleHasedData = ({ hash, id }) => {\r\n  if (state.result[\"query\" + id].isDone) return;\r\n  const result = fetchData(hash);\r\n  if (result.isLoading) {\r\n    State.update({\r\n      isLoading: true,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: { isLoading: true, error: false, data: null },\r\n      },\r\n    });\r\n  }\r\n  if (result.error) {\r\n    const errors = state.error;\r\n    errors.push(`query ${id}: ${result.error}`);\r\n    State.update({\r\n      error: errors,\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: true,\r\n          data: null,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n  if (result.data) {\r\n    const filteredData = result.data.filter(\r\n      (row) => row.SINGER === state.searchedSinger\r\n    );\r\n    State.update({\r\n      result: {\r\n        ...state.result,\r\n        [\"query\" + id]: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: filteredData,\r\n          isDone: true,\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\nconst fetchData = (hash) => {\r\n  const data = fetch(\r\n    `https://api.flipsidecrypto.com/api/v2/queries/${hash}/data/latest`,\r\n    {\r\n      subscribe: true,\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n      },\r\n    }\r\n  );\r\n  const result = {\r\n    data: (data && data.body) || null,\r\n    error: (data && !data.ok && (data.status || data.error)) || null,\r\n    isLoading: !data && !error,\r\n  };\r\n  return result;\r\n};\r\n// handle runed data ###################################\r\nconst createQuery = (queries, singer, interval) => {\r\n  const queriesArr = queries.map((q) => {\r\n    const queryWithProps = q.query\r\n      .replaceAll(\"{{singer}}\", singer)\r\n      .replaceAll(\"{{week}}\", interval);\r\n    q.query = queryWithProps;\r\n    return q;\r\n  });\r\n  return queriesArr;\r\n};\r\nconst isAllDataLoaded = () => {\r\n  const resultArr = Object.entries(state.result);\r\n  if (resultArr.length === 0) return false;\r\n  return resultArr.every((query) => {\r\n    return !query[1].isLoading;\r\n  });\r\n};\r\nconst updateResultState = ({ data, error, isLoading, queryRunId, id }) => {\r\n  State.update(({ result, loader }) => {\r\n    const newResult = {\r\n      ...result,\r\n      [`query${id}`]: {\r\n        data:\r\n          data?.rows === undefined ? null : data.rows === null ? [] : data.rows,\r\n        error: !!error,\r\n        isLoading: isLoading,\r\n        queryRunId: queryRunId,\r\n        id: id,\r\n      },\r\n    };\r\n    const newLoader = loader.filter(({ id: loaderId }) => loaderId !== id);\r\n    if (error) {\r\n      const queryError = `query${id} : ${error}`;\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        loader: newLoader.length === 0 ? [] : newLoader,\r\n        error: [...state.error, queryError],\r\n      };\r\n    } else {\r\n      if (data) {\r\n        Storage.set(\r\n          `${state.searchedSinger}-${state.searchedInterval}-${id}`,\r\n          queryRunId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        result: { ...newResult },\r\n        ...(data && { loader: newLoader.length === 0 ? [] : newLoader }),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst runqueries = (queries) => {\r\n  if (state.searchedSinger.length === 0) {\r\n    State.update({\r\n      isLoading: false,\r\n      error: [...state.error, \"singer is not provided\"],\r\n    });\r\n    return;\r\n  }\r\n\r\n  const queriesArr = createQuery(\r\n    queries,\r\n    state.searchedSinger,\r\n    state.searchedInterval\r\n  );\r\n  const loader = queriesArr.map((q) => {\r\n    const queryRunId = Storage.get(\r\n      `${state.searchedSinger}-${state.searchedInterval}-${q.id}`\r\n    );\r\n    const props = {\r\n      apiKey: API_KEY,\r\n      id: q.id,\r\n      query: q.query,\r\n      onResult: updateResultState,\r\n      firstReqTime: q.firstReqTime,\r\n      queryRunId,\r\n      queryOption: {\r\n        page: {\r\n          number: 1,\r\n          size: 1000,\r\n        },\r\n        cacheTime: 60,\r\n        ...q?.queryOption,\r\n      },\r\n    };\r\n    return {\r\n      id: q.id,\r\n      element: (\r\n        <Widget\r\n          src=\"lord1.near/widget/api-flipside\"\r\n          id={q.id}\r\n          key={q.id}\r\n          props={props}\r\n        />\r\n      ),\r\n    };\r\n  });\r\n  State.update({\r\n    loader: loader,\r\n    isLoading: true,\r\n    queriesRuned: true,\r\n  });\r\n};\r\n\r\nif (isAllDataLoaded()) {\r\n  State.update({ isLoading: false });\r\n}\r\n\r\nif (state.isLoading) {\r\n  const withHashQueries = [];\r\n  const withoutHashQueries = [];\r\n  queries.forEach(({ hash, id, query, ...other }) => {\r\n    if (hash) {\r\n      withHashQueries.push({ hash, id });\r\n    }\r\n    if (query) {\r\n      withoutHashQueries.push({ query, hash, id, ...other });\r\n    }\r\n  });\r\n  withHashQueries.forEach((query) => handleHasedData(query));\r\n  if (!state.queriesRuned) {\r\n    runqueries(withoutHashQueries);\r\n  }\r\n}\r\n\r\n// error managment #######################\r\nif (state.error.length > 0) {\r\n  function hide() {\r\n    const errors = state.error;\r\n    errors.shift();\r\n    if (errors.length > 0) setTimeout(hide, 2500);\r\n    State.update({ error: errors });\r\n  }\r\n  setTimeout(hide, 2500);\r\n}\r\n\r\n// get props charts #######################################\r\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\r\n  data = data || [];\r\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const dataFormat = serieses.map((series) => {\r\n    const dataFormated = data.map((d) => [d[dateKey] * 1000, d[series.key]]);\r\n    return {\r\n      data: dataFormated,\r\n      name: series.seriesName,\r\n      type: series.type,\r\n      axisId: series.id,\r\n    };\r\n  });\r\n  const props = {\r\n    series: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      subtitle: \"chart subtitle\",\r\n      legend: true,\r\n      stacking: \"false\",\r\n      ...chartOption,\r\n    },\r\n    overrideOptions: {\r\n      plotOptions: {\r\n        column: {\r\n          stacking: \"false\",\r\n        },\r\n        series: {\r\n          dataGrouping: { enabled: false },\r\n        },\r\n      },\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\nconst getPieProps = (data, [key, value], colors, chartOption) => {\r\n  data = data || [];\r\n  colors = colors || [];\r\n  chartOption = chartOption || {};\r\n\r\n  const groupedData = {};\r\n  for (const item of data) {\r\n    const keyValue = item[key];\r\n    const valueValue = item[value];\r\n\r\n    if (groupedData[keyValue]) {\r\n      groupedData[keyValue] += valueValue;\r\n    } else {\r\n      groupedData[keyValue] = valueValue;\r\n    }\r\n  }\r\n\r\n  const dataFormat = Object.entries(groupedData).map(\r\n    ([groupKey, groupValue]) => [groupKey, groupValue]\r\n  );\r\n\r\n  const props = {\r\n    data: dataFormat,\r\n    colors: colors,\r\n    chartOption: {\r\n      title: \"chart title\",\r\n      type: \"pie\",\r\n      legend: false,\r\n      connector: false,\r\n      ...chartOption,\r\n    },\r\n    themeColor: { chart: themeColor.chart },\r\n    spinnerColors: themeColor.spinnerColors,\r\n  };\r\n  return props;\r\n};\r\n\r\n// dom sections ##############################################\r\nconst noData = <div className=\"w-100 py-4 text-center\"> No data available</div>;\r\nconst ChartIsLoading = (queryId) => (\r\n  <div\r\n    className={`w-100 ${\r\n      state.result?.[`query${queryId}`]?.isLoading ? \"d-block\" : \"d-none\"\r\n    }`}\r\n  >\r\n    <Widget\r\n      src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n      props={{ ...spinnerColors }}\r\n    />\r\n  </div>\r\n);\r\nconst ChartHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"py-4 text-center\">An error occurred for this section</div>\r\n  );\r\n\r\nconst CardIsLoading = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.isLoading && (\r\n    <div\r\n      className=\"d-flex flex-column gap-1\"\r\n      style={{\r\n        padding: \"60px 12px\",\r\n      }}\r\n    >\r\n      <Widget\r\n        src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n        props={{\r\n          ...spinnerColors,\r\n        }}\r\n      />\r\n      <span\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          fontsize: 15,\r\n          color: \"#4f46e5\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Loading...\r\n      </span>\r\n    </div>\r\n  );\r\nconst CardHasError = (queryId) =>\r\n  state.result?.[`query${queryId}`]?.error && (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 p-4 pb-1\">\r\n      An error occurred for this section\r\n    </div>\r\n  );\r\n\r\nlet ChartSections = (\r\n  <div className=\" col-12 col-md-12\">\r\n    <div className=\" col-12\">\r\n      <div\r\n        style={{ background: themeColor?.sbt_area?.card_bg }}\r\n        className=\"shadow-sm rounded-2\"\r\n      >\r\n        {ChartIsLoading(6)}\r\n        {ChartHasError(6)}\r\n        {state.result[\"query\" + 6]?.data && (\r\n          <Widget\r\n            src=\"lord1.near/widget/mix-chart\"\r\n            props={getMixProps(\r\n              state.result[\"query\" + 6]?.data,\r\n              \"date\",\r\n              [\r\n                {\r\n                  key: \"staked_volume\",\r\n                  seriesName: \"Staked Volume\",\r\n                  type: \"column\",\r\n                  id: 2,\r\n                },\r\n                {\r\n                  key: \"unstaked_volume\",\r\n                  seriesName: \"UnStaked Volume\",\r\n                  type: \"column\",\r\n                  id: 2,\r\n                },\r\n                {\r\n                  key: \"net_volume\",\r\n                  seriesName: \"Net Volume\",\r\n                  type: \"spline\",\r\n                  id: 2,\r\n                },\r\n                {\r\n                  key: \"cumulative_net_staked_volume\",\r\n                  seriesName: \"Cumulative Net Volume\",\r\n                  type: \"spline\",\r\n                  id: 2,\r\n                },\r\n              ],\r\n              themeColor.chartColor,\r\n              {\r\n                title: \"\",\r\n                subtitle: `Number of transactions `,\r\n                stacking: \"normal\",\r\n              }\r\n            )}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nconsole.log(state);\r\nreturn (\r\n  <>\r\n    {state.loader && (\r\n      <div className=\"d-none\">{state.loader.map((l) => l?.element)}</div>\r\n    )}\r\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\r\n      {state.error.length > 0 &&\r\n        state.error.map((er) => (\r\n          <div\r\n            className=\"toast show align-items-center text-bg-danger border-0\"\r\n            role=\"alert\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"toast-body\">{er}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div\r\n      className=\"w-100\"\r\n      style={{ backgroundColor: themeColor?.search_sbt?.table_bg }}\r\n    >\r\n      <div className=\"w-100\">\r\n        <div className=\"w-100 py-2\"></div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={transactions}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={volume} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget src=\"lord1.near/widget/header-dynamic\" props={date} />\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={contract}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <Widget\r\n                  src=\"lord1.near/widget/header-dynamic\"\r\n                  props={chartabove}\r\n                />\r\n                <div>{ChartSections} </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/wrapped-staking", "fact_widget_deployments_id": "6ee457e59240235e967b76a7427bc9df", "inserted_timestamp": "2023-12-14T23:22:58.932Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}