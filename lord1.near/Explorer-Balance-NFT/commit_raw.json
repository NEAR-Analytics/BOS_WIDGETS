{"tx_hash": "Cw8drXVf8uRxu2uT4mJNZG9rfbGCXDJEkBwCDe8yNb54", "action_id_social": "3ozhsRySG34UipvGTvDDbqMEEQDBefe7eixmhdCe25MU-0-widget", "block_id": 107310554, "block_timestamp": "2023-12-06T21:37:03.745Z", "signer_id": "lord1.near", "widget_name": "Explorer-Balance-NFT", "source_code": "const themeColor = props.themeColor;\n\nconst operationsDoc = `\n  query MyQuery {\n    mb_views_nft_tokens(\n      order_by: {last_transfer_timestamp: desc}\n      where: {owner: {_eq: \"${\n        props.wallet_id || context.accountId\n      }\"}, _and: {burned_timestamp: {_is_null: true}, last_transfer_timestamp: {}}}\n    ) {\n      nft_contract_id\n      title\n      description\n      media\n      last_transfer_receipt_id\n      metadata_id\n      token_id\n      nft_contract_name\n      nft_contract_icon\n    }\n  }\n`;\n\nfunction fetchGraphQL() {\n  const result = fetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"anon\",\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: {},\n      operationName: \"MyQuery\",\n    }),\n  });\n  return result;\n}\n\nconst res = fetchGraphQL();\n\nif (!(res && res.body)) return \"...\";\n\nconst nfts = res.body.data.mb_views_nft_tokens;\n//-------------------------------------------------------------------------------------\nconst tokenCounts = {};\nnfts.forEach((nft) => {\n  if (tokenCounts[nft.nft_contract_name]) {\n    tokenCounts[nft.nft_contract_name]++;\n  } else {\n    tokenCounts[nft.nft_contract_name] = 1;\n  }\n});\n//-------------------------------------------------------------------------------------\n\nconst getPieProps = (data, [key, value], colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n\n  const dataFormat = data.map((s) => [s[key], s[value]]);\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      type: \"pie\",\n      legend: false,\n      connector: false,\n      ...chartOption,\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\n//-------------------------------------------------------------------------------------\nconst general_theme = {\n  height: \"110px\",\n  align: \"center\",\n  description: \"Total NFT\",\n  brand: `${nfts.length}`,\n  fontsize: \"100\",\n  fontweight: \"25px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\n//-------------------------------------------------------------------------------------\n\nreturn (\n  <>\n    <div className=\"row\">\n      <div className=\"col-4\">\n        <Widget src=\"lord1.near/widget/header-dynamic\" props={general_theme} />\n      </div>\n      <div className=\"col-8\">\n        <div>\n          {Object.keys(tokenCounts).map((contractId) => (\n            <div key={contractId}>\n              {contractId} : {tokenCounts[contractId]}\n            </div>\n          ))}\n        </div>{\" \"}\n      </div>{\" \"}\n    </div>\n    <Widget\n      src=\"lord1.near/widget/table-pagination\"\n      props={{\n        themeColor: { table_pagination: themeColor.table_pagination },\n        data: nfts,\n        columns: [\n          { title: \"Title\", key: \"title\", colors: \"#806ce1\" },\n          { title: \"Contract Name\", key: \"nft_contract_name\" },\n          { title: \"Token Id\", key: \"token_id\", colors: \"#806ce1\" },\n          { title: \"Contract Id\", key: \"nft_contract_id\" },\n          { title: \"Description\", key: \"description\" },\n          { title: \"Image\", key: \"media\", pic: \"yes\", src: \"media\" },\n        ],\n        rowsCount: 10,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/Explorer-Balance-NFT", "fact_widget_deployments_id": "e406cf724ada28231e0b68717e9c3489", "inserted_timestamp": "2023-12-06T23:35:26.721Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 0}