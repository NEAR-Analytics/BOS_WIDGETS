{"tx_hash": "AUDzY3UmbtLGPbM6U648s2EB31Jey4YBoEu7GXjmB4cV", "action_id_social": "AEoTVCiQJmFM5nBAh5Hb8Mp2MQA7ijsBpwSBRqbhpoXG-0-widget", "block_id": 99500691, "block_timestamp": "2023-08-23T21:21:42.151Z", "signer_id": "lord1.near", "widget_name": "multiple-mix-chart", "source_code": "if (!props.data && !props.charts) return \"charts and data props are required.\";\r\nconst data = props.data ?? [];\r\nconst charts = props.charts ?? [];\r\nlet colors = props.colors ?? [\r\n  \"#F19D38\",\r\n  \"#4498E0\",\r\n  \"#FFD50D\",\r\n  \"#F29BC0\",\r\n  \"#82E299\",\r\n];\r\nconst overrideOptions = props.overrideOptions || {};\r\nconst extraButtons = props.extraButtons || {};\r\nlet spinnerColors = props?.spinnerColors.length >= 0 && {\r\n  color1: props?.spinnerColors[0],\r\n  color2: props?.spinnerColors[1],\r\n};\r\nconst other_colors = [\r\n  \"#1f77b4\",\r\n  \"#ff7f0e\",\r\n  \"#2ca02c\",\r\n  \"#d62728\",\r\n  \"#9467bd\",\r\n  \"#8c564b\",\r\n  \"#e377c2\",\r\n  \"#7f7f7f\",\r\n  \"#bcbd22\",\r\n  \"#17becf\",\r\n];\r\nif (series.length > colors.length) {\r\n  for (let i = colors.length; i < series.length; i++) {\r\n    colors.push(other_colors[i % other_colors.length]);\r\n  }\r\n}\r\nconst Container = styled.div`\r\n  .tabContent{\r\n    display:inline-flex;\r\n    align-items:center;\r\n    background: rgba(26, 46, 51, 0.25);\r\n    border: 1px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    padding:3px 4px;\r\n    list-style-type:none;\r\n  }\r\n  .tab-item .active{\r\n    background: #304352;\r\n  }\r\n  .tab-item button{\r\n    background-color:transparent;\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    color:#fff;\r\n    height:30px;\r\n    padding:0 22px;\r\n    border:none;\r\n    width:max-content;\r\n  }\r\n\r\n`;\r\nconst chartOption = () => {\r\n  const chart = charts[state.selectedChart - 1];\r\n  const seriesData = data.reduce(\r\n    (t, row) => {\r\n      t[0].data.push([row[chart.dateKey] * 1000, row[chart.oppKey]]);\r\n      t[1].data.push([row[chart.dateKey] * 1000, row[chart.negKey]]);\r\n      return t;\r\n    },\r\n    [{ data: [] }, { data: [] }]\r\n  );\r\n\r\n  seriesData[0].name = chart.stakTitle;\r\n  seriesData[1].name = chart.unstakTitle;\r\n  seriesData[0].type = chart.type;\r\n  seriesData[1].type = chart.type;\r\n  const type = chart.type;\r\n  const title = chart.title;\r\n  const subtitle = chart.subtitle;\r\n  return { seriesData, title, subtitle, yAxis: 1, type };\r\n};\r\n5;\r\nState.init({\r\n  tab: charts?.[0].title,\r\n  isLoading: true,\r\n  selectedChart: \"1\",\r\n});\r\n\r\nconst code = `\r\n<html>\r\n  <head>\r\n    <script\r\n      type=\"text/javascript\"\r\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.6/iframeResizer.contentWindow.js\"\r\n    ></script>\r\n    <script src=\"https://code.highcharts.com/stock/highstock.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/no-data-to-display.js\"></script>\r\n  </head>\r\n  <body>\r\n    <div id=\"container\"></div>\r\n  </body> \r\n  <script>\r\n  \r\nwindow.addEventListener(\"message\", function (event) {}, false);\r\n\r\nconst handleMessage = (message) => {\r\n  const { colors, chartOption, overrideOptions } = message;\r\n\r\n  const chart = Highcharts.stockChart(\"container\", {\r\n    chart: {\r\n      backgroundColor:\"rgb(0,0,0,0)\",\r\n      zooming: {\r\n          mouseWheel: false,\r\n        },\r\n    },\r\n    colors: colors,\r\n    navigator: {\r\n      enabled: false,\r\n    },\r\n    title: {\r\n      text: chartOption.title,\r\n      align: \"left\",\r\n    },\r\n    subtitle: {\r\n      text: chartOption.subtitle,\r\n      align: \"left\",\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        stacking: \"normal\",\r\n      },\r\n    },\r\n    yAxis: chartOption.yAxis,\r\n    xAxis: {\r\n      type: \"datetime\",\r\n      dateTimeLabelFormats: { month: { main: \"%b '%Y\" } },\r\n    },\r\n    rangeSelector: {\r\n      buttons: [\r\n        {\r\n          type: \"day\",\r\n          count: 2,\r\n          text: \"1d\",\r\n        },\r\n        {\r\n          type: \"week\",\r\n          count: 1,\r\n          text: \"1w\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 1,\r\n          text: \"1m\",\r\n        },\r\n        {\r\n          type: \"all\",\r\n          count: 1,\r\n          text: \"All\",\r\n        },\r\n      ],\r\n      selected: 3,\r\n      inputEnabled: true,\r\n    },\r\n    lang: {\r\n      noData: \"no data to display\",\r\n    },\r\n    noData: {\r\n      style: {\r\n        fontWeight: \"bold\",\r\n        fontSize: \"15px\",\r\n      },\r\n    },\r\n    series: chartOption.seriesData,\r\n    ...overrideOptions\r\n  });\r\n\r\n  window.iFrameResizer.onMessage = () => {};\r\n};\r\n\r\nwindow.iFrameResizer = {\r\n  onMessage: handleMessage,\r\n};\r\n  </script>\r\n</html>\r\n`;\r\nconsole.log(state);\r\nreturn (\r\n  <div\r\n    className=\"w-100 \"\r\n    style={{\r\n      minHeight: \"300px\",\r\n      minWidth: \"300px\",\r\n    }}\r\n  >\r\n    <div className=\"d-flex justify-content-center align-items-center\">\r\n      <div className={`w-100 ${state.isLoading ? \"d-block\" : \"d-none\"}`}>\r\n        <Widget\r\n          src={`easypoll-v0.ndc-widgets.near/widget/Common.Spinner`}\r\n          props={{ ...spinnerColors }}\r\n        />\r\n      </div>\r\n      <iframe\r\n        iframeResizer\r\n        className={`w-100 ${state.isLoading ? \"d-none\" : \"d-block\"}`}\r\n        srcDoc={code}\r\n        message={{\r\n          colors,\r\n          chartOption: chartOption(),\r\n          overrideOptions,\r\n        }}\r\n        onLoad={() => {\r\n          State.update({\r\n            isLoading: false,\r\n          });\r\n        }}\r\n      />\r\n    </div>\r\n    <div\r\n      className={`w-100 justify-content-center ${\r\n        state.isLoading ? \"d-none\" : \"d-flex\"\r\n      }`}\r\n    >\r\n      <Container>\r\n        <ul className=\"tabContent\">\r\n          {charts.map((op, i) => (\r\n            <li key={i} className=\"tab-item\">\r\n              <button\r\n                className={`${state.tab === op.title ? \"active\" : \"\"}`}\r\n                aria-current=\"page\"\r\n                onClick={() =>\r\n                  State.update({ tab: op.title, selectedChart: i + 1 })\r\n                }\r\n              >\r\n                {op.title}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </Container>\r\n    </div>\r\n  </div>\r\n);\r\n// const props = {\r\n//   data: [\r\n//     {\r\n//       week: 1604188800,\r\n//       opposite1: 2,\r\n//       opposite2: 8,\r\n//       negative1: -6,\r\n//       negative2: -2,\r\n//       .\r\n//       .\r\n//     },\r\n//   ],\r\n//   charts: [\r\n//     {\r\n//       title: \"title\",\r\n//       subtitle: \"sub\",\r\n//       dateKey: \"week\", // the key of date in data obj\r\n//       oppKey: \"opposite1\", // opposite key\r\n//       negKey: \"negative1\", //negative key\r\n//       oppTitle: \"opposite\",\r\n//       negTitle: \"negative\",\r\n//       type: \"area\", // chart type\r\n//     },\r\n//   ],\r\n\r\n//   colors: [\"yellow\", \"brown\"], // optional\r\n//   spinnerColors: [\"yellow\", \"brown\"], // optional , two colors\r\n//   overrideOptions: {}, //opt to over ride chart options\r\n// };\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/multiple-mix-chart", "fact_widget_deployments_id": "9b8392e8effc9b70a72ab755cbc336f8", "inserted_timestamp": "2023-08-24T05:13:57.879Z", "modified_timestamp": "2023-08-24T05:13:57.879Z", "__row_index": 2}