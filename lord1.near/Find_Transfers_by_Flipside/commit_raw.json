{"tx_hash": "8aGfeaHn4WviWoQ5CzaYY3N1wvU5PgJ4fwQrh9TqbC8Q", "action_id_social": "9P6MTcxCHnAoawoYZhsebyU5s24JM3zbtvrGqZkpUVap-0-widget", "block_id": 97929001, "block_timestamp": "2023-08-02T18:01:21.135Z", "signer_id": "lord1.near", "widget_name": "Find_Transfers_by_Flipside", "source_code": "// header ------------------------------------------------------------------------------------------\r\nconst Gradient = styled.div`\r\n   {\r\n    margin-top: -25px;\r\n    margin-bottom: 25px;\r\n    height: 250px;\r\n    text-align: center;\r\n    background: radial-gradient(\r\n      circle,\r\n      rgba(29, 55, 57, 1) 30%,\r\n      rgba(24, 24, 24, 1) 80%\r\n    );\r\n\r\n    font-family: Arial, sans-serif;\r\n  }\r\n\r\n  .text-primary-gradient {\r\n    color: #53fdca;\r\n    -webkit-text-fill-color: transparent;\r\n    background-image: linear-gradient(#fc3fff, #789efb);\r\n    -webkit-background-clip: text;\r\n    background-clip: text;\r\n  }\r\n\r\n  .subtitle-above {\r\n    font-size: 18px;\r\n    letter-spacing: 1px;\r\n    font-family: Courier, monospace;\r\n  }\r\n\r\n  .subtitle-below {\r\n    font-size: 16px;\r\n  }\r\n\r\n  .slogan {\r\n    font-weight: 600;\r\n    font-size: 60px;\r\n  }\r\n`;\r\nlet header = (\r\n  <Gradient\r\n    className=\"d-flex flex-column justify-content-center\"\r\n    style={{ \"border-radius\": \"15px\", \"margin-top\": \"10px\" }}\r\n  >\r\n    <h1 class=\"mb-3 text-white slogan\">\r\n      <span>\r\n        <img\r\n          src=\"https://yt3.googleusercontent.com/zkArEwljuLKjF7S1rbXoyQWW1VC8QzgVzrFP7KKqOypFtSv0cKgIXbfOBdIFO3ZoBD_wJJUyyw=s900-c-k-c0x00ffffff-no-rj\"\r\n          style={{\r\n            width: \"80px\",\r\n            height: \"80px\",\r\n            \"box-shadow\": \"0 0px 20px rgba(1300, 60, 231, 20)\",\r\n            \"border-radius\": \"1000px\",\r\n          }}\r\n        ></img>\r\n      </span>\r\n      <span class=\"text-primary-gradient\">Flipside </span>Crypto\r\n    </h1>\r\n    <div class=\"subtitle-below text-white opacity-75\">\r\n      Access the most reliable blockchain data, for free. Discover analyses on\r\n      leading protocols from expert analysts.\r\n    </div>\r\n  </Gradient>\r\n);\r\n// header ------------------------------------------------------------------------------------------\r\n\r\nconst API_KEY = \"3343d809-832a-470b-a45f-1157029ef0a7\";\r\nconst queries = {\r\n  bsc: (__formatedAddressIds, __isConnected) => {\r\n    return `with bsc_r as (\r\n    SELECT\r\n      split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n      SYMBOL as Symbol,\r\n      round(AMOUNT, 1) as AMOUNT,\r\n      round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n      FROM_ADDRESS as address,\r\n      'bsc_r1' as title,\r\n      TO_ADDRESS as address2,\r\n      'https://bscscan.com/tx/' || TX_HASH as TX_HASH\r\n    FROM\r\n      BSC.core.ez_token_transfers\r\n    WHERE\r\n      TO_ADDRESS in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and ORIGIN_FROM_ADDRESS not in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n      and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n    UNION\r\n    SELECT\r\n      split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n      SYMBOL as Symbol,\r\n      round(AMOUNT, 1) as AMOUNT,\r\n      round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n      to_address as address,\r\n      'bsc_r2' as title,\r\n      ORIGIN_FROM_ADDRESS as address2,\r\n      'https://bscscan.com/tx/' || TX_HASH as TX_HASH\r\n    FROM\r\n      BSC.core.ez_token_transfers\r\n    WHERE\r\n      to_address in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and FROM_ADDRESS = ORIGIN_TO_ADDRESS\r\n      and FROM_ADDRESS != ORIGIN_FROM_ADDRESS\r\n      and ORIGIN_TO_ADDRESS IN (\r\n        '0x692b5a7ecccad243a07535e8c24b0e7433238c6a',\r\n        '0xd152f549545093347a162dce210e7293f1452150',\r\n        '0x4fafb87de15cff7448bd0658112f4e4b0d53332c',\r\n        '0x8eA8573c4BfD04e9405D30253C5E30Ea97D23b7C'\r\n      )\r\n    UNION\r\n    SELECT\r\n      split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n      'BNB' as Symbol,\r\n      round(AMOUNT, 1) as AMOUNT,\r\n      round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n      ORIGIN_FROM_ADDRESS as address,\r\n      'bsc_r3' as title,\r\n      BNB_TO_ADDRESS as address2,\r\n      'https://bscscan.com/tx/' || TX_HASH as TX_HASH\r\n    FROM\r\n      BSC.core.ez_BNB_transfers\r\n    WHERE\r\n      BNB_TO_ADDRESS in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and (BNB_FROM_ADDRESS = ORIGIN_TO_ADDRESS)\r\n      and ORIGIN_TO_ADDRESS = '0xd152f549545093347a162dce210e7293f1452150'\r\n      and ORIGIN_FROM_ADDRESS not in (\r\n        ${__formatedAddressIds}\r\n      )\r\n    UNION\r\n    SELECT\r\n      split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n      'BNB' as Symbol,\r\n      round(AMOUNT, 1) as AMOUNT,\r\n      round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n      ORIGIN_FROM_ADDRESS as address,\r\n      'bsc_r4' as title,\r\n      BNB_TO_ADDRESS as address2,\r\n      'https://bscscan.com/tx/' || TX_HASH as TX_HASH\r\n    FROM\r\n      BSC.core.ez_BNB_transfers\r\n    WHERE\r\n      BNB_TO_ADDRESS in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and BNB_FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n      and ORIGIN_FROM_ADDRESS not in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and ORIGIN_FUNCTION_SIGNATURE = '0x'\r\n  ),\r\n  bsc_s as (\r\n    SELECT\r\n      split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n      SYMBOL as Symbol,\r\n      round(AMOUNT, 1) as AMOUNT,\r\n      round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n      origin_FROM_ADDRESS as address,\r\n      'bsc_s1' as title,\r\n      TO_ADDRESS as address2,\r\n      'https://bscscan.com/tx/' || TX_HASH as TX_HASH\r\n    FROM\r\n      bsc.core.ez_token_transfers\r\n    WHERE\r\n      origin_FROM_ADDRESS in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and ORIGIN_FROM_ADDRESS = FROM_ADDRESS\r\n      and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      and TO_ADDRESS != '0x0000000000000000000000000000000000000000'\r\n    union\r\n    SELECT\r\n      split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n      'BNB' as Symbol,\r\n      round(AMOUNT, 1) as AMOUNT,\r\n      round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n      BNB_FROM_ADDRESS as address,\r\n      'bsc_s2' as title,\r\n      BNB_TO_ADDRESS as address2,\r\n      'https://bscscan.com/tx/' || TX_HASH as TX_HASH\r\n    FROM\r\n      bsc.core.ez_BNB_transfers\r\n    WHERE\r\n      BNB_FROM_ADDRESS in (\r\n        ${__formatedAddressIds}\r\n      )\r\n      and BNB_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n      and ORIGIN_FUNCTION_SIGNATURE in ('0x')\r\n  )\r\n  select\r\n    *\r\n  from\r\n    bsc_s\r\n  where\r\n    AMOUNT_USD > 0\r\n    ${\r\n      __isConnected\r\n        ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n        : \"\"\r\n    }\r\n  union\r\n  select\r\n    *\r\n  from\r\n    bsc_r\r\n  where\r\n    AMOUNT_USD > 0\r\n    ${\r\n      __isConnected\r\n        ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n        : \"\"\r\n    }`;\r\n  },\r\n  ethereum: (__formatedAddressIds, __isConnected) => {\r\n    return `with ether_r as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          FROM_ADDRESS as address,\r\n          'ether_r1' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          ethereum.core.ez_token_transfers\r\n      WHERE\r\n          TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'ether_r2' as title,\r\n          to_address as address2,\r\n          'https://etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          ethereum.core.ez_token_transfers\r\n      WHERE\r\n          to_address in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and FROM_ADDRESS != ORIGIN_FROM_ADDRESS\r\n          and ORIGIN_TO_ADDRESS IN (\r\n              '0xd152f549545093347a162dce210e7293f1452150',\r\n              '0x4fafb87de15cff7448bd0658112f4e4b0d53332c',\r\n              '0x8eA8573c4BfD04e9405D30253C5E30Ea97D23b7C'\r\n          )\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'ETH' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'ether_r3' as title,\r\n          eth_TO_ADDRESS as address2,\r\n          'https://etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          ethereum.core.ez_eth_transfers\r\n      WHERE\r\n          eth_TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and (ETH_FROM_ADDRESS = ORIGIN_TO_ADDRESS)\r\n          and ORIGIN_TO_ADDRESS = '0xd152f549545093347a162dce210e7293f1452150'\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'ETH' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'ether_r4' as title,\r\n          eth_TO_ADDRESS as address2,\r\n          'https://etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          ethereum.core.ez_eth_transfers\r\n      WHERE\r\n          eth_TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ETH_FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FUNCTION_SIGNATURE = '0x'\r\n  ),\r\n  ether_s as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          origin_FROM_ADDRESS as address,\r\n          'ether_s1' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          ethereum.core.ez_token_transfers\r\n      WHERE\r\n          origin_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS = FROM_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      union\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'ETH' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ETH_FROM_ADDRESS as address,\r\n          'ether_s2' as title,\r\n          ETH_TO_ADDRESS as address2,\r\n          'https://etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          ethereum.core.ez_eth_transfers\r\n      WHERE\r\n          ETH_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ETH_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FUNCTION_SIGNATURE in ('0x')\r\n  )\r\n  select\r\n      *\r\n  from\r\n      ether_s\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }\r\n  union\r\n  select\r\n      *\r\n  from\r\n      ether_r\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }`;\r\n  },\r\n  avalanch: (__formatedAddressIds, __isConnected) => {\r\n    return `with avax_r as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          FROM_ADDRESS as address,\r\n          'avax_r' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://snowtrace.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          avalanche.core.ez_token_transfers\r\n      WHERE\r\n          TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'avax_r' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://snowtrace.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          avalanche.core.ez_token_transfers\r\n      WHERE\r\n          to_address in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and FROM_ADDRESS != ORIGIN_FROM_ADDRESS\r\n          and ORIGIN_TO_ADDRESS IN (\r\n              '0x692b5a7ecccad243a07535e8c24b0e7433238c6a',\r\n              '0xd152f549545093347a162dce210e7293f1452150',\r\n              '0x4fafb87de15cff7448bd0658112f4e4b0d53332c',\r\n              '0x8eA8573c4BfD04e9405D30253C5E30Ea97D23b7C'\r\n          )\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'avax' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'avax_r' as title,\r\n          AVAX_TO_ADDRESS as address2,\r\n          'https://snowtrace.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          avalanche.core.ez_AVAX_transfers\r\n      WHERE\r\n          AVAX_TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and (AVAX_FROM_ADDRESS = ORIGIN_TO_ADDRESS)\r\n          and ORIGIN_TO_ADDRESS = '0xd152f549545093347a162dce210e7293f1452150'\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'avax' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'avax_r' as title,\r\n          AVAX_TO_ADDRESS as address2,\r\n          'https://snowtrace.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          avalanche.core.ez_AVAX_transfers\r\n      WHERE\r\n          AVAX_TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and AVAX_FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FUNCTION_SIGNATURE = '0x'\r\n  ),\r\n  avax_s as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          origin_FROM_ADDRESS as address,\r\n          'avax_s' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://snowtrace.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          avalanche.core.ez_token_transfers\r\n      WHERE\r\n          origin_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS = FROM_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      union\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'avax' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          avax_FROM_ADDRESS as address,\r\n          'avax_s' as title,\r\n          avax_TO_ADDRESS as address2,\r\n          'https://snowtrace.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          avalanche.core.ez_avax_transfers\r\n      WHERE\r\n          avax_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and avax_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FUNCTION_SIGNATURE in ('0x')\r\n  )\r\n  select\r\n      *\r\n  from\r\n      avax_s\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }\r\n  UNION\r\n  select\r\n      *\r\n  from\r\n      avax_r\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }`;\r\n  },\r\n  arbitrum: (__formatedAddressIds, __isConnected) => {\r\n    return `with arbi_r as (\r\n      SELECT\r\n        split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n        SYMBOL as Symbol,\r\n        round(AMOUNT, 1) as AMOUNT,\r\n        round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n        FROM_ADDRESS as address,\r\n        'arbi_r1' as title,\r\n        TO_ADDRESS as address2,\r\n        'https://arbiscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n        arbitrum.core.ez_token_transfers\r\n      WHERE\r\n        TO_ADDRESS in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and ORIGIN_FROM_ADDRESS not in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n        and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      UNION\r\n      SELECT\r\n        split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n        SYMBOL as Symbol,\r\n        round(AMOUNT, 1) as AMOUNT,\r\n        round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n        ORIGIN_FROM_ADDRESS as address,\r\n        'arbi_r2' as title,\r\n        to_address as address2,\r\n        'https://arbiscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n        arbitrum.core.ez_token_transfers\r\n      WHERE\r\n        to_address in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and FROM_ADDRESS = ORIGIN_TO_ADDRESS\r\n        and FROM_ADDRESS not in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and ORIGIN_TO_ADDRESS IN (\r\n          '0x692b5a7ecccad243a07535e8c24b0e7433238c6a',\r\n          '0xd152f549545093347a162dce210e7293f1452150',\r\n          '0x4fafb87de15cff7448bd0658112f4e4b0d53332c',\r\n          '0x8eA8573c4BfD04e9405D30253C5E30Ea97D23b7C'\r\n        )\r\n      UNION\r\n      SELECT\r\n        split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n        'ETH' as Symbol,\r\n        round(AMOUNT, 1) as AMOUNT,\r\n        round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n        ORIGIN_FROM_ADDRESS as address,\r\n        'arbi_r3' as title,\r\n        eth_TO_ADDRESS as address2,\r\n        'https://arbiscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n        arbitrum.core.ez_eth_transfers\r\n      WHERE\r\n        eth_TO_ADDRESS in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and (ETH_FROM_ADDRESS = ORIGIN_TO_ADDRESS)\r\n        and ORIGIN_TO_ADDRESS = '0xd152f549545093347a162dce210e7293f1452150'\r\n        and ORIGIN_FROM_ADDRESS not in (\r\n          ${__formatedAddressIds}\r\n        )\r\n      UNION\r\n      SELECT\r\n        split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n        'ETH' as Symbol,\r\n        round(AMOUNT, 1) as AMOUNT,\r\n        round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n        ORIGIN_FROM_ADDRESS as address,\r\n        'arbi_r4' as title,\r\n        eth_TO_ADDRESS as address2,\r\n        'https://arbiscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n        arbitrum.core.ez_eth_transfers\r\n      WHERE\r\n        eth_TO_ADDRESS in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and ETH_FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n        and ORIGIN_FROM_ADDRESS not in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and ORIGIN_FUNCTION_SIGNATURE = '0x'\r\n    ),\r\n    arbi_s as (\r\n      SELECT\r\n        split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n        SYMBOL as Symbol,\r\n        round(AMOUNT, 3) as AMOUNT,\r\n        round(AMOUNT_USD, 3) as AMOUNT_USD,\r\n        origin_FROM_ADDRESS as address,\r\n        'arbi_s1' as title,\r\n        TO_ADDRESS as address2,\r\n        'https://arbiscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n        arbitrum.core.ez_token_transfers\r\n      WHERE\r\n        origin_FROM_ADDRESS in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and ORIGIN_FROM_ADDRESS = FROM_ADDRESS\r\n        and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n        AND TO_ADDRESS not in (\r\n          '0x0000000000000000000000000000000000000000',\r\n          '0x80c67432656d59144ceff962e8faf8926599bcf8'\r\n        )\r\n      union\r\n      SELECT\r\n        split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n        'ETH' as Symbol,\r\n        round(AMOUNT, 3) as AMOUNT,\r\n        round(AMOUNT_USD, 3) as AMOUNT_USD,\r\n        ETH_FROM_ADDRESS as address,\r\n        'arbi_s1' as title,\r\n        ETH_TO_ADDRESS as address2,\r\n        'https://arbiscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n        arbitrum.core.ez_eth_transfers\r\n      WHERE\r\n        ETH_FROM_ADDRESS in (\r\n          ${__formatedAddressIds}\r\n        )\r\n        and ETH_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n        and ORIGIN_FUNCTION_SIGNATURE in ('0x')\r\n        AND ETH_TO_ADDRESS not in ('0x80c67432656d59144ceff962e8faf8926599bcf8')\r\n    )\r\n    select\r\n      *\r\n    from\r\n      arbi_s\r\n    where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }\r\n    union\r\n    select\r\n      *\r\n    from\r\n      arbi_r\r\n    where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }`;\r\n  },\r\n  optimism: (__formatedAddressIds, __isConnected) => {\r\n    return `with op_r as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          FROM_ADDRESS as address,\r\n          'op_r1' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://optimistic.etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          optimism.core.ez_token_transfers\r\n      WHERE\r\n          TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ORIGIN_FROM_ADDRESS as address,\r\n          'op_r2' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://optimistic.etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          optimism.core.ez_token_transfers\r\n      WHERE\r\n          to_address in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and FROM_ADDRESS != ORIGIN_FROM_ADDRESS\r\n          and FROM_ADDRESS = '0xd152f549545093347a162dce210e7293f1452150'\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'ETH' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ETH_FROM_ADDRESS as address,\r\n          'op_r3' as title,\r\n          eth_TO_ADDRESS as address2,\r\n          'https://optimistic.etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          optimism.core.ez_eth_transfers\r\n      WHERE\r\n          eth_TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ETH_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n  ),\r\n  op_s as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          origin_FROM_ADDRESS as address,\r\n          'op_s1' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://optimistic.etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          optimism.core.ez_token_transfers\r\n      WHERE\r\n          origin_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS = FROM_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      union\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'ETH' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          ETH_TO_ADDRESS as address,\r\n          'op_s2' as title,\r\n          ETH_FROM_ADDRESS as address2,\r\n          'https://optimistic.etherscan.io/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          optimism.core.ez_eth_transfers\r\n      WHERE\r\n          ETH_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ETH_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FUNCTION_SIGNATURE in ('0x')\r\n  )\r\n  select\r\n      *\r\n  from\r\n      op_s\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }\r\n  union\r\n  select\r\n      *\r\n  from\r\n      op_r\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }`;\r\n  },\r\n  polygon: (__formatedAddressIds, __isConnected) => {\r\n    return `with polygon_r as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          FROM_ADDRESS as address,\r\n          'polygon' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://polygonscan.com/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          polygon.core.ez_token_transfers\r\n      WHERE\r\n          TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS != ORIGIN_TO_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          TO_ADDRESS as address,\r\n          'polygon' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://polygonscan.com/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          polygon.core.ez_token_transfers\r\n      WHERE\r\n          to_address in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and FROM_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and FROM_ADDRESS != ORIGIN_FROM_ADDRESS\r\n          and ORIGIN_FROM_ADDRESS = '0xc2f41b3a1ff28fd2a6eee76ee12e51482fcfd11f'\r\n      UNION\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'Matic' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          MATIC_FROM_ADDRESS as address,\r\n          'polygon' as title,\r\n          MATIC_TO_ADDRESS as address2,\r\n          'https://polygonscan.com/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          polygon.core.ez_matic_transfers\r\n      WHERE\r\n          MATIC_TO_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and MATIC_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FROM_ADDRESS not in (\r\n              ${__formatedAddressIds}\r\n          )\r\n  ),\r\n  polygon_s as (\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          SYMBOL as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          origin_FROM_ADDRESS as address,\r\n          'polygon' as title,\r\n          TO_ADDRESS as address2,\r\n          'https://polygonscan.com/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          polygon.core.ez_token_transfers\r\n      WHERE\r\n          origin_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and ORIGIN_FROM_ADDRESS = FROM_ADDRESS\r\n          and ORIGIN_TO_ADDRESS = CONTRACT_ADDRESS\r\n      union\r\n      SELECT\r\n          split(BLOCK_TIMESTAMP, '.') [0] as Time,\r\n          'Matic' as Symbol,\r\n          round(AMOUNT, 1) as AMOUNT,\r\n          round(AMOUNT_USD, 1) as AMOUNT_USD,\r\n          origin_FROM_ADDRESS as address,\r\n          'polygon' as title,\r\n          MATIC_TO_ADDRESS as address2,\r\n          'https://polygonscan.com/tx/' || TX_HASH as TX_HASH\r\n      FROM\r\n          polygon.core.ez_matic_transfers\r\n      WHERE\r\n          MATIC_FROM_ADDRESS in (\r\n              ${__formatedAddressIds}\r\n          )\r\n          and MATIC_TO_ADDRESS = ORIGIN_TO_ADDRESS\r\n          and ORIGIN_FUNCTION_SIGNATURE in ('0x')\r\n  )\r\n  select\r\n      *\r\n  from\r\n      polygon_r\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }\r\n  union\r\n  select\r\n      *\r\n  from\r\n      polygon_s\r\n  where\r\n      AMOUNT_USD > 0\r\n      ${\r\n        __isConnected\r\n          ? `and address2 in (\r\n      ${__formatedAddressIds}\r\n    )\r\n    and address in (\r\n      ${__formatedAddressIds}\r\n    )`\r\n          : \"\"\r\n      }`;\r\n  },\r\n};\r\nState.init({\r\n  queryData: {\r\n    address: [\r\n      {\r\n        id: 1,\r\n        value: \"\",\r\n        isValid: \"new\", //valid - notValid\r\n      },\r\n    ],\r\n    chain: \"arbitrum\",\r\n    isConnected: true,\r\n  },\r\n  ui: {\r\n    isActiveSendQueryBtn: false,\r\n  },\r\n  diagram: {\r\n    imageUrl: null,\r\n    diagramError: null,\r\n  },\r\n  queryRunId: null,\r\n  isLoading: false,\r\n  isQueryRunning: false,\r\n  data: null,\r\n  error: null,\r\n});\r\nconst getChart = ({ chart, width, height, format }) => {\r\n  if (!chart) return;\r\n  const body = {\r\n    chart: chart,\r\n    width: width || 700,\r\n    height: height || 500,\r\n    format: format || \"base64\",\r\n    version: 3,\r\n  };\r\n  asyncFetch(\"https://quickchart.io/chart\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  }).then((res) => {\r\n    if (!res.ok || res.error) {\r\n      State.update({\r\n        diagram: {\r\n          diagramError: \"problem to load diagram image\",\r\n          imageUrl: null,\r\n        },\r\n      });\r\n    }\r\n    const data = res.body;\r\n    const url = `data:image/png;base64,${data}`;\r\n    State.update({ diagram: { imageUrl: url, diagram: null } });\r\n  });\r\n};\r\n\r\nconst chartOption = (queryResult) => {\r\n  if (!queryResult.rows) return null;\r\n  const data = queryResult?.rows.map((row) => {\r\n    const addressLabel1 = `${row.address.slice(0, 6)}...${row.address.slice(\r\n      -4\r\n    )}`;\r\n    const addressLabel2 = `${row.address2.slice(0, 6)}...${row.address2.slice(\r\n      -4\r\n    )}`;\r\n\r\n    return { from: addressLabel1, to: addressLabel2, flow: row.amount_usd };\r\n  });\r\n  const chartConfig = {\r\n    type: \"sankey\",\r\n    data: {\r\n      datasets: [\r\n        {\r\n          label: \"tx diagram\",\r\n          data: data || [],\r\n          colorFrom: \"#8dd3c7\",\r\n          colorTo: \"#bebada\",\r\n          colorMode: \"gradient\",\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  return chartConfig;\r\n};\r\nconst createQuery = (queryData) => {\r\n  if (!queryData?.address.length) return null;\r\n  const formatedAddressIds = queryData.address\r\n    .map(({ value }) => `lower('${value.toLowerCase()}')`)\r\n    .join();\r\n  const query = queries[queryData.chain]?.(\r\n    formatedAddressIds,\r\n    queryData.isConnected\r\n  );\r\n  return query || null;\r\n};\r\nconst addressValidation = () => {\r\n  return state.queryData.address.every(({ isValid }) => isValid === \"valid\");\r\n};\r\nconst addNewAddress = () => {\r\n  const newAddresses = [\r\n    ...state.queryData.address,\r\n    { id: Date.now(), value: \"\", isValid: \"new\" },\r\n  ];\r\n  State.update({\r\n    queryData: { ...state.queryData, address: newAddresses },\r\n    ui: { isActiveSendQueryBtn: false },\r\n  });\r\n};\r\nconst removeAddress = (addressId) => {\r\n  if (state.queryData.address.length === 1) return;\r\n  const newAddresses = state.queryData.address.filter(\r\n    ({ id }) => id !== addressId\r\n  );\r\n  State.update({ queryData: { ...state.queryData, address: newAddresses } });\r\n  if (addressValidation()) {\r\n    State.update({ ui: { isActiveSendQueryBtn: true } });\r\n  } else {\r\n    State.update({ ui: { isActiveSendQueryBtn: false } });\r\n  }\r\n};\r\nconst handleBlur = ({ target }, inputId) => {\r\n  const address = target.value.toLowerCase().trim();\r\n  let isValidAddress = true;\r\n  if (address.length !== 42) {\r\n    isValidAddress = false;\r\n    State.update({ error: \"a valid address has 42 character\" });\r\n  }\r\n\r\n  const newAddresses = state.queryData.address.map(({ id, value, isValid }) => {\r\n    if (inputId === id) {\r\n      return {\r\n        id,\r\n        value: address,\r\n        isValid: isValidAddress ? \"valid\" : \"notValid\",\r\n      };\r\n    }\r\n    return { id, value, isValid };\r\n  });\r\n  State.update({ queryData: { ...state.queryData, address: newAddresses } });\r\n  if (addressValidation()) {\r\n    State.update({ ui: { isActiveSendQueryBtn: true } });\r\n  } else {\r\n    State.update({ ui: { isActiveSendQueryBtn: false } });\r\n  }\r\n};\r\nconst handleChain = ({ target }) => {\r\n  const chain = target.value;\r\n  State.update({ queryData: { ...state.queryData, chain } });\r\n};\r\nconst handleConnect = ({ target }) => {\r\n  const isConnected = target.value === \"connect\" ? true : false;\r\n  State.update({\r\n    queryData: { ...state.queryData, isConnected },\r\n  });\r\n};\r\n\r\nlet timeOutId;\r\nif (state.isQueryRunning) {\r\n  console.log(\"ti1\", Date.now() / 1000);\r\n  const refetch = () => {\r\n    console.log(\"ti2\", Date.now() / 1000);\r\n\r\n    queryStatus(state.queryRunId).then(({ error, isRunning }) => {\r\n      if (error) {\r\n        State.update({ isLoading: false });\r\n        State.update({ isQueryRunning: false });\r\n        State.update({ error });\r\n      } else if (isRunning) {\r\n        console.log(\"ti runing\", Date.now() / 1000);\r\n\r\n        timeOutId = setTimeout(refetch, 5000);\r\n      } else {\r\n        queryResult(state.queryRunId).then(({ data, error }) => {\r\n          if (error) {\r\n            State.update({ isLoading: false });\r\n            State.update({ isQueryRunning: false });\r\n            State.update({ error });\r\n          } else {\r\n            console.log(\"data\", data);\r\n            getChart({ chart: chartOption(data) });\r\n            State.update({ isLoading: false });\r\n            State.update({ isQueryRunning: false });\r\n            State.update({ data });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n  timeOutId = setTimeout(refetch, 5000);\r\n} else {\r\n  clearTimeout(timeOutId);\r\n}\r\nif (state.error) {\r\n  setTimeout(() => {\r\n    State.update({ error: null });\r\n  }, 2000);\r\n}\r\nconst sendQuery = () => {\r\n  if (!state.ui.isActiveSendQueryBtn) return;\r\n  const query = createQuery(state.queryData);\r\n  // console.log(query);\r\n  // return;\r\n  State.update({ isLoading: true });\r\n\r\n  runQuery(query).then(({ queryRunId, error }) => {\r\n    if (error) {\r\n      State.update({ isLoading: false });\r\n      State.update({ isQueryRunning: false });\r\n      State.update({ error });\r\n    } else {\r\n      State.update({ queryRunId });\r\n    }\r\n  });\r\n};\r\n\r\nconst runQuery = async (query) => {\r\n  return queryFetch(query).then(({ queryRunId, error }) => {\r\n    if (error) return { queryRunId, error };\r\n    return queryStatus(queryRunId).then(({ error, isRunning, queryRunId }) => {\r\n      if (error) return { queryRunId, error };\r\n      if (isRunning) {\r\n        State.update({ isQueryRunning: true });\r\n        return { queryRunId, error };\r\n      }\r\n      return { queryRunId, error };\r\n    });\r\n  });\r\n};\r\n\r\nconst queryFetch = async (query) => {\r\n  const raw = JSON.stringify({\r\n    jsonrpc: \"2.0\",\r\n    method: \"createQueryRun\",\r\n    params: [\r\n      {\r\n        resultTTLHours: 1,\r\n        maxAgeMinutes: 0,\r\n        sql: query,\r\n        dataSource: \"snowflake-default\",\r\n        dataProvider: \"flipside\",\r\n      },\r\n    ],\r\n    id: 1,\r\n  });\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-api-key\": API_KEY,\r\n    },\r\n    body: raw,\r\n  };\r\n  const result = { error: null, queryRunId: null };\r\n  return asyncFetch(\r\n    \"https://api-v2.flipsidecrypto.xyz/json-rpc\",\r\n    requestOptions\r\n  ).then((res) => {\r\n    if (!res.ok && res.error) {\r\n      result.error = res.error;\r\n      return result;\r\n    } else if (!res.ok) {\r\n      result.error =\r\n        res.status === 401\r\n          ? \"Invalid API Key.\"\r\n          : res.status === 404\r\n          ? \"query sent to wrong api address\"\r\n          : res.status;\r\n      return result;\r\n    }\r\n    const data = res.body;\r\n    if (data.error) {\r\n      result.error = `${data.error.message} - (code${data.error.code})`;\r\n      return result;\r\n    } else {\r\n      const queryRunId = data.result.queryRun.id;\r\n      result.queryRunId = queryRunId;\r\n      return result;\r\n    }\r\n  });\r\n};\r\n\r\nconst queryStatus = async (queryRunId) => {\r\n  console.log(\"qstat\", Date.now() / 1000);\r\n\r\n  const raw = JSON.stringify({\r\n    jsonrpc: \"2.0\",\r\n    method: \"getQueryRun\",\r\n    params: [\r\n      {\r\n        queryRunId: queryRunId,\r\n      },\r\n    ],\r\n    id: 1,\r\n  });\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-api-key\": API_KEY,\r\n    },\r\n    body: raw,\r\n  };\r\n  const result = { error: null, queryRunId, isRunning: false };\r\n\r\n  return asyncFetch(\r\n    \"https://api-v2.flipsidecrypto.xyz/json-rpc\",\r\n    requestOptions\r\n  ).then((res) => {\r\n    if (!res.ok && res.error) {\r\n      result.error = res.error;\r\n      return result;\r\n    } else if (!res.ok) {\r\n      result.error =\r\n        res.status === 401\r\n          ? \"Invalid API Key.\"\r\n          : res.status === 404\r\n          ? \"query sent to wrong api address\"\r\n          : res.status;\r\n      return result;\r\n    }\r\n    const data = res.body;\r\n    if (data.error) {\r\n      result.error = `${data.error.message} - (code${data.error.code})`;\r\n      return result;\r\n    } else {\r\n      if (data.result.queryRun.state === \"QUERY_STATE_FAILED\") {\r\n        result.isRunning = false;\r\n        result.error = `Query run failed (code-${data.result.queryRun.errorData.code})`;\r\n        return result;\r\n      }\r\n      if (data.result.queryRun.state !== \"QUERY_STATE_SUCCESS\") {\r\n        result.isRunning = true;\r\n        return result;\r\n      }\r\n      result.isRunning = false;\r\n      return result;\r\n    }\r\n  });\r\n};\r\n\r\nconst queryResult = async (queryRunId) => {\r\n  console.log(\"qres\", Date.now() / 1000);\r\n\r\n  const raw = JSON.stringify({\r\n    jsonrpc: \"2.0\",\r\n    method: \"getQueryRunResults\",\r\n    params: [\r\n      {\r\n        queryRunId: queryRunId,\r\n        format: \"json\",\r\n        page: {\r\n          number: 1,\r\n          size: 10000,\r\n        },\r\n        sortBy: [\r\n          {\r\n            column: \"time\",\r\n            direction: \"desc\",\r\n          },\r\n          {\r\n            column: \"symbol\",\r\n            direction: \"desc\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    id: 1,\r\n  });\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-api-key\": API_KEY,\r\n    },\r\n    body: raw,\r\n  };\r\n\r\n  const result = { error: null, data: null };\r\n\r\n  return asyncFetch(\r\n    \"https://api-v2.flipsidecrypto.xyz/json-rpc\",\r\n    requestOptions\r\n  ).then((res) => {\r\n    if (!res.ok && res.error) {\r\n      result.error = res.error;\r\n      return result;\r\n    } else if (!res.ok) {\r\n      result.error =\r\n        res.status === 401\r\n          ? \"Invalid API Key.\"\r\n          : res.status === 404\r\n          ? \"query sent to wrong api address\"\r\n          : res.status;\r\n      return result;\r\n    }\r\n    const data = res.body;\r\n    if (data.error) {\r\n      result.error = `${data.error.message} - (code${data.error.code})`;\r\n      return result;\r\n    } else {\r\n      result.data = data.result;\r\n      return result;\r\n    }\r\n  });\r\n};\r\n\r\nreturn (\r\n  <div className=\"container-xxl text-bg-light\">\r\n    {state.error && (\r\n      <div class=\"alert alert-danger text-center\" role=\"alert\">\r\n        {state.error}\r\n      </div>\r\n    )}\r\n    <div>{header}</div>\r\n    <div className=\"-form row justify-content-center gap-4 mx-auto py-5 border-bottom border-2\">\r\n      <div className=\"-address row justify-content-start g-2\">\r\n        {state.queryData.address.map(({ id, value, isValid }, i, array) => {\r\n          const lastAddress = array.length === 1;\r\n          const itemNumber = i + 1;\r\n          return (\r\n            <div key={id} className=\"col-lg-6\">\r\n              <div className=\"input-group\">\r\n                <label\r\n                  htmlFor={\"address\" + itemNumber}\r\n                  id={\"addon\" + itemNumber}\r\n                  className=\"mb-0 form-label input-group-text\"\r\n                >\r\n                  Address {itemNumber}\r\n                </label>\r\n\r\n                <input\r\n                  placeholder=\"Account ID\"\r\n                  type=\"text\"\r\n                  defaultValue={value}\r\n                  className={`form-control ${\r\n                    isValid === \"new\"\r\n                      ? \"\"\r\n                      : isValid === \"valid\"\r\n                      ? \"border border-success\"\r\n                      : \"border border-danger\"\r\n                  }`}\r\n                  id={\"address\" + itemNumber}\r\n                  aria-describedby={\"addon\" + itemNumber}\r\n                  onBlur={(e) => handleBlur(e, id)}\r\n                />\r\n\r\n                {lastAddress || (\r\n                  <button\r\n                    className=\"btn btn-danger small\"\r\n                    aria-label=\"Close\"\r\n                    type=\"button\"\r\n                    onClick={() => removeAddress(id)}\r\n                  >\r\n                    remove\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div className=\"col-lg-6\">\r\n          <button\r\n            onClick={addNewAddress}\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n          >\r\n            Add New Address\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"-chain_connect row g-2\">\r\n        <div className=\"col-lg-6\">\r\n          <div className=\"input-group\">\r\n            <label className=\"input-group-text\" htmlFor=\"chain\">\r\n              Chain\r\n            </label>\r\n            <select onChange={handleChain} className=\"form-select\" id=\"chain\">\r\n              <option value=\"arbitrum\">Arbitrum</option>\r\n              <option value=\"avalanch\">Avalanch</option>\r\n              <option value=\"bsc\">Bsc</option>\r\n              <option value=\"ethereum\">Ethereum</option>\r\n              <option value=\"optimism\">Optimism</option>\r\n              <option value=\"polygon\">Polygon</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-6\">\r\n          <div className=\"input-group\">\r\n            <label className=\"input-group-text\" htmlFor=\"connect\">\r\n              connect\r\n            </label>\r\n            <select\r\n              onChange={handleConnect}\r\n              className=\"form-select\"\r\n              id=\"connect\"\r\n            >\r\n              <option value=\"connect\">connect</option>\r\n              <option value=\"total\">total</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"-search row justify-content-center align-items-center col-lg-4\">\r\n        <button\r\n          disabled={!state.ui.isActiveSendQueryBtn || state.isLoading}\r\n          onClick={sendQuery}\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-lg col-auto\"\r\n        >\r\n          {state.isQueryRunning\r\n            ? \"query is running...\"\r\n            : state.isLoading\r\n            ? \"sending query...\"\r\n            : \"Search Query\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div className=\"-table py-5 border-bottom border-2\">\r\n      <div className=\"table-responsive text-nowrap\">\r\n        {state.data.rows ? (\r\n          <table className=\"table table-hover  table-bordered table-striped\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th className=\"col-2\" scope=\"col\">\r\n                  Time\r\n                </th>\r\n                <th className=\"col-1\" scope=\"col\">\r\n                  Symbol\r\n                </th>\r\n                <th className=\"col-1\" scope=\"col\">\r\n                  Amount\r\n                </th>\r\n                <th className=\"col-1\" scope=\"col\">\r\n                  Amount USD\r\n                </th>\r\n                <th className=\"col-3\" scope=\"col\">\r\n                  Sender\r\n                </th>\r\n                <th className=\"col-3\" scope=\"col\">\r\n                  Receiver\r\n                </th>\r\n                <th className=\"col-1\" scope=\"col\">\r\n                  TX Hash\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"table-group-divider\">\r\n              {state.data.rows ? (\r\n                state.data.rows.map((dataRow, i) => {\r\n                  const {\r\n                    time,\r\n                    symbol,\r\n                    amount,\r\n                    amount_usd,\r\n                    address,\r\n                    address2,\r\n                    tx_hash,\r\n                  } = dataRow;\r\n\r\n                  return (\r\n                    <tr key={tx_hash}>\r\n                      <th scope=\"row\">{i + 1}</th>\r\n                      <td>\r\n                        {new Date(time).toLocaleString(\"en-US\", {\r\n                          dateStyle: \"medium\",\r\n                          timeStyle: \"short\",\r\n                        })}\r\n                      </td>\r\n                      <td>{symbol}</td>\r\n                      <td>{amount}</td>\r\n                      <td>{amount_usd}</td>\r\n                      <td>{address}</td>\r\n                      <td>{address2}</td>\r\n                      <td>\r\n                        <a\r\n                          target=\"_blank\"\r\n                          href={tx_hash}\r\n                          className=\"link-primary\"\r\n                        >\r\n                          tx Link\r\n                        </a>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              ) : (\r\n                <tr>\r\n                  <td className=\"text-center\" colspan=\"8\">\r\n                    query has no result\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <div className=\"alert alert-secondary text-center\" role=\"alert\">\r\n            no data to show table\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className=\"-chart py-5 border-bottom border-2 text-center\">\r\n      {state.data?.rows ? (\r\n        state.diagram.diagramError ? (\r\n          <div className=\"alert text-center alert-secondary\" role=\"alert\">\r\n            problem to show diagram\r\n          </div>\r\n        ) : state.diagram.imageUrl ? (\r\n          <img\r\n            src={state.diagram.imageUrl}\r\n            className=\"img-fluid\"\r\n            alt=\"snaky diagram\"\r\n          />\r\n        ) : (\r\n          <div className=\"alert text-center alert-secondary\" role=\"alert\">\r\n            loading diagram ...\r\n          </div>\r\n        )\r\n      ) : (\r\n        <div className=\"alert text-center alert-secondary\" role=\"alert\">\r\n          no data to show charts\r\n        </div>\r\n      )}\r\n    </div>\r\n    <div style={{ \"margin-top\": \"50px\", \"border-raduis-top\": \"15px\" }}>\r\n      <Widget src=\"lord1.near/widget/footer\" props={{}} />\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/lord1.near/widget/Find_Transfers_by_Flipside", "fact_widget_deployments_id": "f3bebc65aa42d6afee7ed318e3335df7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}