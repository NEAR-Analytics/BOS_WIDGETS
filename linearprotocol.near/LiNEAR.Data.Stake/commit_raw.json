{"tx_hash": "AvG1nEE3XdaExTx1Rba2g88CzkjhAktdKr86wUKecPHB", "action_id_social": "14cqxVQ4yBVpXELoY1KyHYLteizBX5NVtBg2rLACTSNu-0-widget", "block_id": 91444012, "block_timestamp": "2023-05-09T08:58:14.844Z", "signer_id": "linearprotocol.near", "widget_name": "LiNEAR.Data.Stake", "source_code": "// MIT License: https://github.com/linear-protocol/linear-bos-components/blob/main/LICENSE\n\nconst accountId = props.accountId || context.accountId;\nconst LiNEAR_DECIMALS = 24;\nconst subgraphApiUrl =\n  context.networkId === \"mainnet\"\n    ? \"https://api.thegraph.com/subgraphs/name/linear-protocol/linear\"\n    : \"https://api.thegraph.com/subgraphs/name/linear-protocol/linear-testnet\";\n\nconst { config, onLoad } = props;\nif (!config) {\n  return \"Component cannot be loaded. Missing `config` props\";\n}\n\nfunction getLinearPrice() {\n  return Big(Near.view(config.contractId, \"ft_price\", \"{}\") ?? \"0\").div(\n    Big(10).pow(LiNEAR_DECIMALS)\n  );\n}\n\nfunction querySubgraph(query, variables) {\n  const res = fetch(subgraphApiUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  });\n  if (res && res.ok) {\n    return res.body;\n  } else {\n    return {};\n  }\n}\n\nfunction queryStakingData(accountId, excludingFees) {\n  const { data } = querySubgraph(`\n    {\n      users (first: 1, where: {id: \"${accountId}\"} ){\n        firstStakingTime\n        mintedLinear\n        stakedNear\n        unstakedLinear\n        unstakeReceivedNear\n        feesPaid\n        transferedInShares\n        transferedInValue\n        transferedOutShares\n        transferedOutValue\n      }\n    }\n  `);\n  if (!data) {\n    return undefined;\n  }\n  const user = data.users[0];\n  if (!user) {\n    return undefined;\n  }\n\n  const linearPrice = getLinearPrice();\n  if (Number(linearPrice) === 0) {\n    return undefined;\n  }\n\n  const {\n    firstStakingTime,\n    stakedNear,\n    mintedLinear,\n    unstakedLinear,\n    unstakeReceivedNear,\n    feesPaid,\n    transferedInShares,\n    transferedInValue,\n    transferedOutShares,\n    transferedOutValue,\n  } = user;\n\n  const transferIn = linearPrice\n    .mul(transferedInShares)\n    .minus(transferedInValue);\n  const transferOut = linearPrice\n    .mul(transferedOutShares)\n    .minus(transferedOutValue);\n  const netTransfer = transferIn.minus(transferOut);\n\n  const currentLinear = Big(mintedLinear).minus(unstakedLinear);\n  const rewards = currentLinear\n    .mul(linearPrice)\n    .minus(stakedNear)\n    .plus(unstakeReceivedNear)\n    .plus(netTransfer);\n\n  return {\n    // turn nanoseconds into milliseconds\n    firstStakingTime: firstStakingTime\n      ? parseInt(firstStakingTime / 1_000_000)\n      : undefined,\n    // add fees if necessary\n    stakingRewards: (excludingFees ? rewards : rewards.plus(feesPaid)).toFixed(\n      0\n    ),\n  };\n}\n\nif (onLoad) {\n  const data = queryStakingData(accountId);\n  if (data) {\n    onLoad(data);\n  }\n}\n\nreturn <div style={{ display: \"none\" }} />;\n", "metadata": {"description": "LiNEAR Stake Data. You can query staking rewards and the time of user's first staking to LiNEAR with the `onLoad()` function.", "image": {"ipfs_cid": "bafkreici2aqxke5ogocdqlhlfqxygwicwynmyaa4b4jqiioqpltj25fhfu"}, "name": "Stake Data | LiNEAR", "tags": {"component": "", "data": "", "defi": "", "linear": "", "stake": "", "widget": ""}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/linearprotocol.near/widget/LiNEAR.Data.Stake", "fact_widget_deployments_id": "0fdf343c1914849ba7523ce45964eb10", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}