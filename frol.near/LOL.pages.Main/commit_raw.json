{"tx_hash": "8CXqVBLDyoYMgJLs9Xvr2UAp5iUg4z2cRLKZEAPuwDEY", "action_id_social": "DZksjhGpSJo5UY6emf2c6XKDkvffSK3ruGJb6E5hRB3g-0-widget", "block_id": 98643855, "block_timestamp": "2023-08-12T14:36:30.524Z", "signer_id": "frol.near", "widget_name": "LOL.pages.Main", "source_code": "// CSS Styled Components\n// =====================\n\nconst Wrapper = styled.div`\n  --section-gap: 42px;\n  padding-top: 0px;\n\n  @media (max-width: 1160px) {\n    .line-rounded-corners {\n      display: none !important;\n    }\n  }\n\n  @media (max-width: 900px) {\n    padding-top: 0;\n  }\n`;\n\nconst H1 = styled.h1`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 90px;\n  line-height: 1;\n  text-align: center;\n  letter-spacing: -0.03em;\n  color: #000;\n  margin: 0;\n  max-width: 700px;\n\n  span {\n    display: inline-block;\n    background: #00ec97;\n    border-radius: 20px;\n    position: relative;\n    padding: 0.1em 0.2em 0;\n\n    svg {\n      position: absolute;\n      bottom: -8px;\n      right: -10px;\n      width: 24px;\n    }\n  }\n\n  @media (max-width: 900px) {\n    font-size: 50px;\n\n    span {\n      border-radius: 12px;\n      svg {\n        position: absolute;\n        bottom: -6px;\n        right: -7px;\n        width: 16px;\n      }\n    }\n  }\n`;\n\nconst Text = styled.p`\n  font-family: \"FK Grotesk\", sans-serif;\n  font-size: ${(p) => p.size ?? \"18px\"};\n  line-height: ${(p) => p.lineHeight ?? \"1.5\"};\n  font-weight: ${(p) => p.weight ?? \"400\"};\n  color: ${(p) => p.color ?? \"#000\"};\n  margin: 0;\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  gap: ${(p) => p.gap};\n  align-items: ${(p) => p.alignItems};\n  justify-content: ${(p) => p.justifyContent};\n  flex-direction: ${(p) => p.direction ?? \"row\"};\n  flex-wrap: ${(p) => p.wrap ?? \"nowrap\"};\n\n  ${(p) =>\n    p.mobileStack &&\n    `\n    @media (max-width: 900px) {\n      flex-direction: column;\n      gap: var(--section-gap);\n    }\n  `}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  gap: ${(p) => p.gap};\n  grid-template-columns: ${(p) => p.columns};\n  align-items: ${(p) => p.alignItems};\n\n  @media (max-width: 900px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst Section = styled.div`\n  position: relative;\n  background-color: ${(p) => p.backgroundColor};\n  padding: 208px 24px ${(p) => p.paddingBottom ?? \"var(--section-gap)\"};\n  overflow: hidden;\n\n  @media (max-width: 900px) {\n    padding-top: var(--section-gap);\n    padding-bottom: ${(p) => p.paddingBottomMobile ?? \"var(--section-gap)\"};\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  max-width: 1060px;\n  margin: 0 auto;\n  gap: ${(p) => p.gap ?? \"var(--section-gap)\"};\n  flex-direction: column;\n  align-items: ${(p) => (p.center ? \"center\" : undefined)};\n  justify-content: ${(p) => (p.center ? \"center\" : undefined)};\n  text-align: ${(p) => (p.center ? \"center\" : undefined)};\n  padding: var(--section-gap) 24px;\n`;\n\n// Data loading\n// ============\n\nState.init({ lolNames: null });\n\nconst tokensOnSale = Near.view(\"lolmarket.qbit.near\", \"nft_tokens_on_sale\", {});\n\nconst myBalance = context.accountId\n  ? Near.view(\"lolcoin.qbit.near\", \"ft_balance_of\", {\n      account_id: context.accountId,\n    })\n  : null;\n\nconst myTokens = context.accountId\n  ? Near.view(\"lolmarket.qbit.near\", \"nft_tokens_for_owner\", {\n      account_id: context.accountId,\n    }).filter(({ token_id }) => !(token_id in tokensOnSale))\n  : null;\n\n// TODO: add pagination\nconst allBalances = Near.view(\"lolcoin.qbit.near\", \"ft_balances\", {});\n\n// TODO: add pagination\nconst allTokens = Near.view(\"lolmarket.qbit.near\", \"nft_tokens\", {});\n\nif (state.lolNames === null) {\n  State.update({ lolNames: new Map() });\n  asyncFetch(\"https://coins.summerschool.lol/users.json\").then((data) => {\n    const lolUsers = data.body;\n    console.log(lolUsers);\n    const lolNames = new Map();\n    for (const user of lolUsers) {\n      lolNames.set(user.account_id, user.full_name);\n    }\n    console.log(lolNames);\n    State.update({ lolNames });\n  });\n}\n\nconst isLoading =\n  (context.accountId && (myBalance === null || myTokens === null)) ||\n  allBalances === null ||\n  allTokens === null;\n\n// Event handlers\n// ==============\n\nconst buy = (tokenId, price) => {\n  Near.call(\n    \"lolcoin.qbit.near\",\n    \"ft_transfer_call\",\n    {\n      receiver_id: \"lolmarket.qbit.near\",\n      amount: price,\n      msg: JSON.stringify({ Buy: tokenId }),\n    },\n    150000000000000,\n    1000000000000000000000\n  );\n};\n\nconst sellForOne = (tokenId) => {\n  Near.call(\n    \"lolmarket.qbit.near\",\n    \"nft_put_on_sale\",\n    {\n      token_id: tokenId,\n      price: \"100\",\n    },\n    75000000000000,\n    1\n  );\n};\n\nconst transferOneLol = (accountId) => {\n  Near.call(\n    \"lolcoin.qbit.near\",\n    \"ft_transfer\",\n    {\n      receiver_id: accountId,\n      amount: \"100\",\n    },\n    150000000000000,\n    1\n  );\n};\n\nconst displayName = (accountId) => {\n  if (props.useNearNames || !state.lolNames) {\n    return (\n      <Widget\n        src=\"calebjacob.near/widget/AccountProfileInline\"\n        props={{\n          accountId,\n        }}\n      />\n    );\n  }\n  const lolName = state.lolNames.get(accountId);\n  if (!lolName) {\n    return (\n      <Widget\n        src=\"calebjacob.near/widget/AccountProfileInline\"\n        props={{\n          accountId,\n        }}\n      />\n    );\n  }\n  return (\n    <>\n      <Widget\n        src=\"calebjacob.near/widget/AccountProfileInline\"\n        props={{\n          accountId,\n        }}\n      />{\" \"}\n      {lolName}\n    </>\n  );\n};\n\n// Custom reusable components\n// ==========================\n\nconst Tokens = ({ tokens }) => {\n  if (tokens.length === 0) {\n    return <i>\u0422\u0443\u0442 \u0449\u0435 \u043d\u0456\u0447\u043e\u0433\u043e \u043d\u0435\u043c\u0430</i>;\n  } else {\n    return (\n      <Grid\n        gap=\"32px\"\n        columns=\"1fr 1fr\"\n        alignItems=\"end\"\n        style={{ width: \"100%\" }}\n      >\n        {tokens.map((token) => {\n          let actionButton;\n          if (!context.accountId) {\n            if (token.token_id in tokensOnSale) {\n              actionButton = (\n                <button disabled>\n                  \u0412\u0436\u0435 \u0432\u0438\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436 \u0437\u0430{\" \"}\n                  {parseFloat(tokensOnSale[token.token_id]) / 100} \u041b\u041e\u041b\n                </button>\n              );\n            } else {\n              actionButton = <button disabled>\u041d\u0435 \u043f\u0440\u043e\u0434\u0430\u0454\u0442\u044c\u0441\u044f</button>;\n            }\n          } else if (token.owner_id === context.accountId) {\n            if (token.token_id in tokensOnSale) {\n              actionButton = (\n                <button disabled>\n                  \u0412\u0436\u0435 \u0432\u0438\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436 \u0437\u0430{\" \"}\n                  {parseFloat(tokensOnSale[token.token_id]) / 100} \u041b\u041e\u041b\n                </button>\n              );\n            } else {\n              actionButton = (\n                <button onClick={() => sellForOne(token.token_id)}>\n                  \u0412\u0438\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436 \u0437\u0430 \u0446\u0456\u043d\u043e\u044e 1 \u041b\u041e\u041b\n                </button>\n              );\n            }\n          } else if (token.token_id in tokensOnSale) {\n            actionButton = (\n              <button\n                disabled={!context.accountId}\n                onClick={() =>\n                  buy(token.token_id, tokensOnSale[token.token_id])\n                }\n              >\n                \u041f\u0440\u0438\u0434\u0431\u0430\u0442\u0438 \u0437\u0430 {parseFloat(tokensOnSale[token.token_id]) / 100} \u041b\u041e\u041b\n              </button>\n            );\n          } else {\n            actionButton = <button disabled>\u041d\u0435 \u043f\u0440\u043e\u0434\u0430\u0454\u0442\u044c\u0441\u044f</button>;\n          }\n\n          return (\n            <Flex direction=\"column\" alignItems=\"end\">\n              <Widget\n                src=\"mob.near/widget/NftImage\"\n                props={{\n                  nft: {\n                    contractId: \"lolmarket.qbit.near\",\n                    tokenMetadata: { media: token.metadata.media },\n                  },\n                }}\n              />\n\n              <div>\n                \u0421\u0442\u0432\u043e\u0440\u0438\u0432:\n                {displayName(token.metadata.extra)}\n              </div>\n              <div>\n                \u041f\u043e\u0442\u043e\u0447\u043d\u0438\u0439 \u0432\u043b\u0430\u0441\u043d\u0438\u043a:\n                {displayName(token.owner_id)}\n              </div>\n              <b>{token.metadata.title}</b>\n              <div style={{ textAlign: \"right\" }}>\n                \u041e\u043f\u0438\u0441: {token.metadata.description}\n              </div>\n              {actionButton}\n            </Flex>\n          );\n        })}\n      </Grid>\n    );\n  }\n};\n\n// Component renderer\n// ==================\n\nreturn (\n  <Wrapper>\n    <Container center>\n      <Flex gap=\"32px\" direction=\"column\" alignItems=\"center\">\n        <H1>\n          The{\" \"}\n          <span>\n            \u041b\u041e\u041b{\" \"}\n            <svg viewBox=\"0 0 26 24\" fill=\"none\" aria-hidden=\"true\">\n              <path\n                d=\"M24.3767 8.06326L1.51965 0.0649912C1.10402 -0.0830767 0.639031 0.026026 0.327308 0.340346C0.0181841 0.657263 -0.0831256 1.12225 0.0701378 1.53788L8.071 23.2519C8.23726 23.7013 8.66587 24 9.14385 24H9.14644C9.62702 24 10.0556 23.6961 10.2167 23.2441L13.734 13.495L24.3325 10.2349C24.8053 10.0895 25.13 9.65824 25.1378 9.16468C25.1482 8.67112 24.8391 8.22691 24.3715 8.06326H24.3767Z\"\n                fill=\"#7269E1\"\n              />\n            </svg>\n          </span>{\" \"}\n        </H1>\n\n        <Text style={{ maxWidth: \"670px\" }}>\n          \u0410 \u0432\u0441\u0435 \u043f\u043e\u0447\u0430\u043b\u043e\u0441\u044c \u0437 \u0442\u0430\u0431\u043e\u0440\u0443, \u0434\u0435 \u043d\u0430\u0432\u0456\u0442\u044c \u043d\u0435 \u0431\u0443\u043b\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0443 \u0443 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443 \u043c\u0435\u0440\u0435\u0436\u0443\n          \u0406\u043d\u0442\u0435\u0440\u043d\u0435\u0442...\n        </Text>\n\n        {isLoading ? null : !context.accountId ||\n          (myBalance === \"0\" &&\n            state.lolNames &&\n            !state.lolNames.has(context.accountId)) ? (\n          <Widget src=\"frol.near/widget/LOL.components.Auth\" />\n        ) : (\n          <>\n            <h2>\u041c\u0456\u0439 \u041b\u041e\u041b</h2>\n            \u0411\u0430\u043b\u0430\u043d\u0441: {parseFloat(myBalance) / 100} \u041b\u041e\u041b\n            {myTokens !== null ? <Tokens tokens={myTokens} /> : null}\n          </>\n        )}\n\n        {allTokens !== null && tokensOnSale !== null ? (\n          <>\n            <h2>\u041b\u041e\u041b-NFT \u0411\u0430\u0437\u0430\u0440</h2>\n            <Tokens\n              tokens={allTokens.filter(\n                ({ token_id }) => token_id in tokensOnSale\n              )}\n            />\n          </>\n        ) : null}\n\n        {allTokens !== null ? (\n          <>\n            <h2>\u0412\u0441\u0456 \u041b\u041e\u041b-NFT</h2>\n            <Tokens tokens={allTokens} />\n          </>\n        ) : null}\n\n        {allBalances !== null ? (\n          <>\n            <h2>\u041b\u041e\u041b\u043a\u043e\u0457\u043d\u0438</h2>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">\u0410\u043a\u0430\u0443\u043d\u0442</th>\n                  <th scope=\"col\">\u0411\u0430\u043b\u0430\u043d\u0441</th>\n                  <th scope=\"col\">\u0414\u0456\u044f</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allBalances.map(([accountId, balance]) => (\n                  <tr>\n                    <td scope=\"row\">{displayName(accountId)}</td>\n                    <td>{parseFloat(balance) / 100} \u041b\u041e\u041b</td>\n                    <td>\n                      <button onClick={() => transferOneLol(accountId)}>\n                        \u041f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 1 \u041b\u041e\u041b\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        ) : null}\n      </Flex>\n    </Container>\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/frol.near/widget/LOL.pages.Main", "fact_widget_deployments_id": "f53c3a579c55885c26c65ee53694cc88", "inserted_timestamp": "2023-08-12T15:38:44.258Z", "modified_timestamp": "2023-08-12T15:38:44.258Z", "__row_index": 4}