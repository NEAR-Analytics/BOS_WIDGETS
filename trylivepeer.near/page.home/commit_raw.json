{"tx_hash": "Fk5PKCEEXzCGQXLvtmyV1PVdArjU7RcTg2VGehyvmZ9C", "action_id_social": "4DcxboZHwWZnyAfVQBt9gMz9uYRDYnHfUsQyrjqKB7AG-0-widget", "block_id": 120090728, "block_timestamp": "2024-05-30T21:48:17.280Z", "signer_id": "trylivepeer.near", "widget_name": "page.home", "source_code": "const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: #dde4e1;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 175px);\n`;\nconst Button = styled.button`\n  padding: 12px 16px;\n  border: none;\n  border-radius: 4px;\n  background-color: #000;\n  color: #a5a5a5;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  &:hover {\n    background-color: #1c1a1a;\n  }\n`;\nconst StlyedInput = styled.input`\n  color: black;\n  padding: 4px;\n`;\nconst Dropdown = styled.select`\n  background-color: #1c1c1c;\n  width: 300px;\n  height: 47px;\n  padding: 10px 20px 10px 20px;\n  border: 1px solid #444;\n`;\nconst OptionComponent = styled.div`\n  padding: 20px;\n  border-radius: 4px;\n  width: 80%;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst Separator = styled.div`\n  height: 10px;\n  width: 100%;\n`;\nconst MonospaceText = styled.span`\n  font-family: monospace;\n`;\nconst apiKeyCode = `\n\\`\\`\\`js\n<Player.ApiKey />\n<Player.GetUploadUrl />\n<Player.ResumableUploadAsset />\n<Player.GetSrc />\n<Player.Display />\n\\`\\`\\`\n`;\nconst localServerCode = `\n\\`\\`\\`js\n<Player.FileUploader url={url} />\n<Player.Display />\n\\`\\`\\`\n`;\nconst uploadVideoRemoteCode = `\n\\`\\`\\`js\n<Player.FileUploader\n\turl={\"https://livepeer-webserver-613b208ef083.herokuapp.com\"}\n/>\n<Player.Display />\n\\`\\`\\`\n`;\nconst displayVideoRemoteCode = `\n\\`\\`\\`js\n<Player.Display\n\turl={\"https://livepeer-webserver-613b208ef083.herokuapp.com\"}\n\tplaybackId={\"62fa7rxnbjzmoj2a\"}\n/>\n\\`\\`\\`\n`;\nconst broadcastApiKeyCode = `\n\\`\\`\\`js\n<Broadcast.ApiKey />\n<Broadcast.GenerateStream />\n<Broadcast.Player />\n\\`\\`\\`\n`;\nconst broadcastLocalCode = `\n\\`\\`\\`js\n<Broadcast.GenerateStream url={url} />\n<Broadcast.Player />\n<Broadcast.WatchStream pId={pId} />\n\\`\\`\\`\n`;\nconst broadcastRemoteCode = `\n\\`\\`\\`js\n<Broadcast.GenerateStream\nurl={\"https://livepeer-webserver-613b208ef083.herokuapp.com\"}\n/>\n<Broadcast.Player />\n<Broadcast.WatchStream pId={pId} />\n\\`\\`\\`\n`;\nconst Option1 = () => (\n  <OptionComponent>\n    <div>\n      <h3>Description:</h3>\n      <p style={{ textAlign: \"left\" }}>\n        The first method for using our components involves directly providing\n        the API key in the front-end. After creating an account on Livepeer and\n        generating API keys, input them into the{\" \"}\n        <MonospaceText>Player.ApiKey</MonospaceText> component to set them. The\n        keys will be stored in the Zustand state and will be accessible in all\n        other components. At this point, you can call the Livepeer function to\n        upload and display a video asset. Please note the following:\n        <li>\n          There is a background process to parse the asset, so larger videos may\n          experience a delay before becoming playable.\n        </li>\n        <li>\n          There is an alternative component for video uploads called\n          <MonospaceText>DirectUploadAsset</MonospaceText>. While it is less\n          reliable because it does not use \"tus,\" it remains a viable option.\n        </li>\n      </p>\n    </div>\n    <h3>Code:</h3>\n    <Markdown text={apiKeyCode} />\n    <Player.ApiKey />\n    <Separator />\n    <Player.GetUploadUrl />\n    <Separator />\n    <Player.ResumableUploadAsset />\n    <Separator />\n    <Player.GetSrc />\n    <Separator />\n    <Player.Display />\n    <Separator />\n  </OptionComponent>\n);\nconst Option2 = ({ url }) => {\n  return (\n    <OptionComponent>\n      <div>\n        <h3>Description:</h3>\n        <p style={{ textAlign: \"left\" }}>\n          For the second option, you can provide your own web server URL. You\n          may use a basic web server available in this\n          <a\n            href=\"https://github.com/bb-face/livepeer-web-server\"\n            target=\"_blank\"\n          >\n            repository\n          </a>\n          for testing purposes. Once the link is configured, you can utilize the\n          components to upload and display a video.\n        </p>\n        <h3>External data:</h3>\n        {!inputSet ? (\n          <div>\n            <StlyedInput\n              type=\"text\"\n              onChange={(event) => setUrl(event.target.value)}\n              value={url}\n            />\n            <Button onClick={() => setInputSet(true)}>Set url</Button>\n          </div>\n        ) : (\n          <>\n            {url}\n            <Button onClick={resetUrl}>X</Button>\n          </>\n        )}\n      </div>\n      <h3>Code:</h3>\n      <Markdown text={localServerCode} />\n      <Player.FileUploader url={url} />\n      <Separator />\n      <Player.Display />\n    </OptionComponent>\n  );\n};\nconst Option3 = ({ showVideo, handleClick }) => {\n  return (\n    <OptionComponent>\n      <div>\n        <h3>Description:</h3>\n        <p style={{ textAlign: \"left\" }}>\n          These components are connected to our deployed server, eliminating the\n          need for additional setup. This example demonstrates how to display a\n          video using the <MonospaceText>playbackId</MonospaceText> and{\" \"}\n          <MonospaceText>url</MonospaceText> properties of the component\n        </p>\n      </div>\n      <h3>Code:</h3>\n      <Markdown text={displayVideoRemoteCode} />\n      <Button type=\"button\" onClick={() => handleClick()}>\n        Click me\n      </Button>\n      {showVideo && (\n        <Player.Display\n          url={\"https://livepeer-webserver-613b208ef083.herokuapp.com\"}\n          playbackId={\"62fa7rxnbjzmoj2a\"}\n        />\n      )}\n    </OptionComponent>\n  );\n};\nconst Option1Broadcast = () => {\n  return (\n    <OptionComponent>\n      <div>\n        <h3>Description:</h3>\n        <p style={{ textAlign: \"left\" }}>\n          The first method for using our components involves directly providing\n          the API key in the front-end. After creating an account on Livepeer\n          and generating API keys, input them into the Player.ApiKey component\n          to set them. The keys will be stored in the Zustand state and will be\n          accessible in all other components. At this point, you can call the\n          Livepeer function to start a stream!\n          <p>\n            To share the stream, use the link that appears after creating a\n            stream asset in the <MonospaceText>GenerateStream</MonospaceText>{\" \"}\n            component, or use the <MonospaceText>WatchStream</MonospaceText>\n            component and provide the <MonospaceText>playbackId</MonospaceText>.\n          </p>\n        </p>\n      </div>\n      <h3>Code:</h3>\n      <Markdown text={broadcastApiKeyCode} />\n      <Broadcast.ApiKey />\n      <Separator />\n      <Broadcast.GenerateStream />\n      <Separator />\n      <Broadcast.Player />\n      <Separator />\n    </OptionComponent>\n  );\n};\nconst Option2Broadcast = ({ url, pId }) => {\n  return (\n    <OptionComponent>\n      <div>\n        <h3>Description:</h3>\n        <p style={{ textAlign: \"left\" }}>\n          For the second option, you can provide your own web server URL. You\n          may use a basic web server available in this\n          <a\n            href=\"https://github.com/bb-face/livepeer-web-server\"\n            target=\"_blank\"\n          >\n            repository\n          </a>\n          for testing purposes. Once the link is configured, you can utilize the\n          components to upload and display a video.\n        </p>\n        <h3>External data:</h3>\n        <div>\n          {!isPidSet ? (\n            <>\n              <StlyedInput\n                type=\"text\"\n                onChange={(event) => setPid(event.target.value)}\n                value={pId}\n              />\n              <Button onClick={() => setIsPidSet(true)}>Set playbackId</Button>\n            </>\n          ) : (\n            <>\n              {pId}\n              <Button\n                onClick={() => {\n                  setPid(\"\");\n                  setIsPidSet(false);\n                }}\n              >\n                X\n              </Button>\n            </>\n          )}\n          <div></div>\n          {!inputSet ? (\n            <div>\n              <StlyedInput\n                type=\"text\"\n                onChange={(event) => setUrl(event.target.value)}\n                value={url}\n              />\n              <Button onClick={() => setInputSet(true)}>Set url</Button>\n            </div>\n          ) : (\n            <>\n              {url}\n              <Button\n                onClick={() => {\n                  setUrl(\"\");\n                  setInputSet(false);\n                }}\n              >\n                X\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n      <h3>Code:</h3>\n      <Markdown text={broadcastLocalCode} />\n      <Broadcast.GenerateStream url={url} />\n      <Separator />\n      <Broadcast.Player />\n      <Separator />\n      {isPidSet && <Broadcast.WatchStream pId={pId} />}\n    </OptionComponent>\n  );\n};\nconst Option3Broadcast = ({ pId }) => {\n  return (\n    <OptionComponent>\n      <div>\n        <h3>Description:</h3>\n        <p style={{ textAlign: \"left\" }}>\n          This component functions identically to the previous one, but there is\n          no need to insert the server URL as it utilizes our own web server.\n        </p>\n        <h3>External data:</h3>\n        <div>\n          {!isPidSet ? (\n            <>\n              <StlyedInput\n                type=\"text\"\n                onChange={(event) => setPid(event.target.value)}\n                value={pId}\n              />\n              <Button onClick={() => setIsPidSet(true)}>Set playbackId</Button>\n            </>\n          ) : (\n            <>\n              {pId}\n              <Button\n                onClick={() => {\n                  setPid(\"\");\n                  setIsPidSet(false);\n                }}\n              >\n                X\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n      <h3>Code:</h3>\n      <Markdown text={broadcastRemoteCode} />\n      <Broadcast.GenerateStream\n        url={\"https://livepeer-webserver-613b208ef083.herokuapp.com\"}\n      />\n      <Separator />\n      <Broadcast.Player />\n      <Separator />\n      {isPidSet && <Broadcast.WatchStream pId={pId} />}\n    </OptionComponent>\n  );\n};\nconst [selectedOption, setSelectedOption] = useState(\"apiKey\");\nconst [selectedComponent, setSelectedComponent] = useState(\"player\");\nconst [displayVideo, setDisplayVideo] = useState(false);\nconst [url, setUrl] = useState(\"\");\nconst [pId, setPid] = useState(\"\");\nconst [isPidSet, setIsPidSet] = useState(false);\nconst [inputSet, setInputSet] = useState(false);\nconst [showVideo, setShowVideo] = useState(false);\nfunction handleClick() {\n  setShowVideo(!showVideo);\n}\nfunction resetUrl() {\n  setUrl(\"\");\n  setInputSet(false);\n}\nreturn (\n  <Container>\n    <div\n      style={{ display: \"flex\", width: \"100%\", justifyContent: \"space-evenly\" }}\n    >\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        Select which component you want to check:\n        <Dropdown\n          value={selectedComponent}\n          onChange={(event) => setSelectedComponent(event.target.value)}\n        >\n          <option value=\"player\">Player</option>\n          <option value=\"broadcast\">Broadcast</option>\n        </Dropdown>\n      </div>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        Select how you want to initialise the components:\n        <Dropdown\n          value={selectedOption}\n          onChange={(event) => setSelectedOption(event.target.value)}\n        >\n          <option value=\"apiKey\">Provide api key</option>\n          <option value=\"localServer\">Use your local server</option>\n          <option value=\"remoteServer\">Use a remote server</option>\n        </Dropdown>\n      </div>\n    </div>\n    {selectedComponent === \"player\" && (\n      <>\n        {selectedOption === \"apiKey\" && <Option1 />}\n        {selectedOption === \"localServer\" && (\n          <>\n            <Option2\n              url={url}\n              inputSet={inputSet}\n              setInputSet={setInputSet}\n              resetUrl={resetUrl}\n            />\n          </>\n        )}\n        {selectedOption === \"remoteServer\" && (\n          <Option3 showVideo={showVideo} handleClick={handleClick} />\n        )}\n      </>\n    )}\n    {selectedComponent === \"broadcast\" && (\n      <>\n        {selectedOption === \"apiKey\" && <Option1Broadcast />}\n        {selectedOption === \"localServer\" && (\n          <Option2Broadcast\n            url={url}\n            isPidSet={isPidSet}\n            setIsPidSet={setIsPidSet}\n            pId={pId}\n            setPid={setPid}\n            inputSet={inputSet}\n            setInputSet={setInputSet}\n          />\n        )}\n        {selectedOption === \"remoteServer\" && (\n          <Option3Broadcast\n            pId={pId}\n            setPid={setPid}\n            isPidSet={isPidSet}\n            setIsPidSet={setIsPidSet}\n          />\n        )}\n      </>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/trylivepeer.near/widget/page.home", "fact_widget_deployments_id": "96b359104183a1308d782764ca9d1e1a", "inserted_timestamp": "2024-05-30T23:45:54.850Z", "modified_timestamp": "2024-05-30T23:45:54.850Z", "__row_index": 1}