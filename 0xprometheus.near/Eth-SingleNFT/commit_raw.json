{"tx_hash": "B6CYmfEnveAc3Fi3ZKS1MKexZMS3t7wJ6iLATNDQYyjW", "action_id_social": "GHTGuExaDMge9r2KJV5gNAKrRwmMeU9HaBhhDbCvveF7-0-widget", "block_id": 96110783, "block_timestamp": "2023-07-10T01:39:25.941Z", "signer_id": "0xprometheus.near", "widget_name": "Eth-SingleNFT", "source_code": "const PRICE_CONVERSION_VALUE = 0.000000000000000001;\r\nconst currentChain = {\r\n  1313161554: {\r\n    logoUrl: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\r\n    id: \"1313161554\",\r\n    chain: \"Aurora\",\r\n    livePrice: \"ethereum\",\r\n    explorer: \"https://aurorascan.dev\",\r\n    contract: \"0xe93097f7C3bF7A0E0F1261c5bD88F86D878667B5\",\r\n    subgraph:\r\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\r\n  },\r\n  42161: {\r\n    logoUrl:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRCYo9YwixfzDbW3cQ3ObNHxifNbQhmuJYpyhbXZTBS7w&s\",\r\n    id: \"42161\",\r\n    chain: \"Arbitrum\",\r\n    livePrice: \"ethereum\",\r\n    explorer: \"https://arbiscan.io\",\r\n    contract: \"0x27E52A81975F5Fb836e79007E3c478C6c0E6E9FB\",\r\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\r\n  },\r\n  42220: {\r\n    logoUrl:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScIkhIs47BB_bEeLqnfu_4-lvs1uJIh8PeduKZsmyQFjLw2mQvt1UvT57G5kvOQGSw5rs&usqp=CAU\",\r\n    id: \"42220\",\r\n    explorer: \"https://explorer.celo.org\",\r\n    livePrice: \"celo\",\r\n    chain: \"Celo\",\r\n    contract: \"0x5616BCcc278F7CE8B003f5a48f3754DDcfA4db5a\",\r\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\r\n  },\r\n  137: {\r\n    logoUrl:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOt8M-N1nbwMCiCiCNBv3-QI1tLBuL-BmcwowhGxce&s\",\r\n    id: \"137\",\r\n    chain: \"Polygon\",\r\n    livePrice: \"matic-network\",\r\n    explorer: \"https://polygonscan.com\",\r\n    contract: \"0xd91cC6DE129D13F4384FB0bC07a1a99D4F858e72\",\r\n    subgraph:\r\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\r\n  },\r\n};\r\n\r\nconst listAbi = [\r\n  \"function createMarketplaceItem(address nftContract, uint256 tokenId, uint256 price, string calldata category, address seller) public payable {}\",\r\n];\r\n\r\nconst Root = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\nconst MainContainer = styled.div`\r\n    padding: 30px;\r\n    height: auto;\r\n    max-width: 1300px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nconst TopSection = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  width: 100%;\r\n  @media screen and (max-width: 600px) {\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst TopImageContainer = styled.div`\r\n  padding: 1em;\r\n  background: #ffffff;\r\n    width: 50%;\r\n    min-width: 355px;\r\n  border: 2px solid #cacdd5;\r\n  margin-right: 20px;\r\n  box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\r\n  border-radius: 0.7em;\r\n  &>img {\r\n    width: 100%;\r\n    max-height: 548px;\r\n  }\r\n`;\r\n\r\nconst HeaderText = styled.h1`\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst PriceArea = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #0d99ff;\r\n  &>*{\r\n  margin: 0px;\r\n  padding: 0px;\r\n  }\r\n  &>h6{\r\n    font-weight: 700;\r\n    margin-left: 5px;\r\n    margin-top: 4px;\r\n    margin-right: 3px;\r\n    font-size: 1.3rem;\r\n  }\r\n  &>span{\r\n  font-size: 1.2rem;\r\n  margin: 0px;\r\n  }\r\n`;\r\n\r\nconst PriceBucket = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-end;\r\n  justify-content: space-between;\r\n    margin-top: 30px;\r\n  width: 100%;\r\n`;\r\n\r\nconst RightSection = styled.div`\r\n    width: 46%;\r\n    min-width: 350px;\r\n    margin-left: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    margin-right: 10px;\r\n`;\r\n\r\nconst Description = styled.div`\r\n     width: 100%;\r\n    border-radius: 1em;\r\n    background: #ffffff;\r\n    border: 2px solid #eeeff2;\r\n    padding: 1em;\r\n    margin-top: 40px;\r\n    box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\r\n    &>h6{\r\n        font-weight: 600;\r\n        font-size: 1.5rem;\r\n    }\r\n    \r\n`;\r\n\r\nconst AttributeContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`;\r\n\r\nconst Attribute = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n    padding: 0.5em;\r\n    border-radius: 0.5em;\r\n    width: 206px;\r\n    background: #fafafb;\r\n    margin-bottom: 20px;\r\n    border: 1px solid #86ccff;\r\n    border-radius: 10.6849px;\r\n    &>*span {\r\n        padding: 0;\r\n        color: #b2b7c2;\r\n    }\r\n`;\r\n\r\nconst TransactionTable = styled.div`\r\n     width: 100%;\r\n  max-width: 70%;\r\n  background: #ffffff;\r\n  border: 2px solid #eeeff2;\r\n  box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\r\n  border-radius: 16px;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst TableHeader = styled.div`\r\n    width: 100%;\r\n  padding: 0.5em;\r\n  font-weight: 600;\r\n  font-size: 1.5rem;\r\n  margin-bottom: 0.5em;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  gap: 1em;\r\n  background: #f5f6f7;\r\n  border-radius: 14px 14px 0px 0px;\r\n  &>h1 {\r\n    font-size: 24px;\r\n  }\r\n`;\r\n\r\nconst TableBody = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    padding: 0.5em;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid #dde1e6;\r\n`;\r\n\r\nconst RowType = styled.div`\r\n     display: inline-flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  gap: 0.5em;\r\n  font-size: 0.75rem;\r\n  padding: 0.25em 1em;\r\n  border-radius: 0.7em;\r\n  border: 1px solid #a4a9b6;\r\n`;\r\n\r\nconst RowBody = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-top: 10px;\r\n    padding-left: 7px;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    @media and screen\r\n    p {\r\n        margin: 0;\r\n        border-bottom: 1px solid #e5e8eb;\r\n        font-size: 12px;\r\n        min-width: 100px;\r\n        text-align: center;\r\n    }\r\n    span {\r\n        font-size: 12px;\r\n    }\r\n`;\r\n\r\nconst MintDetails = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    color: #525c76;\r\n    &>span {\r\n        font-size: 14px;\r\n    }\r\n    &>a {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Popup = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(5px); /* Apply background blur */\r\n`;\r\n\r\nconst PopupContent = styled.div`\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  max-width: 400px;\r\n  width: 100%;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: #4caf50;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst MarketplaceListed = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  &>span {\r\n    font-size: 14px;\r\n    color: #525c76;\r\n  }\r\n  &>p {\r\n    margin: 0;\r\n    font-size: 14px\r\n  }\r\n`;\r\n\r\nState.init({\r\n  isOpen: false,\r\n  error: false,\r\n});\r\n\r\nconst getFormatedTxDate = (newDate) => {\r\n  const now = new Date();\r\n  const date = new Date(newDate * 1000);\r\n  const diff = (now.getTime() - date.getTime()) / (1000 * 3600 * 24);\r\n  if (diff < 0.04) return `${parseInt(diff * 24 * 60)} mins ago`;\r\n  if (diff < 1) return `${parseInt(diff * 24)} hours ago`;\r\n  if (diff < 31) return `${parseInt(diff)} days ago`;\r\n  if (diff < 356) return `${parseInt(diff / 30)} months ago`;\r\n  return `${diff / 30 / 12} years ago`;\r\n};\r\n\r\nconst getUsdValue = (price) => {\r\n  const res = fetch(\r\n    `https://api.coingecko.com/api/v3/simple/price?ids=${\r\n      currentChain[props.singleNftProps.chain].livePrice\r\n    }&vs_currencies=usd`\r\n  );\r\n  if (res.ok) {\r\n    const multiplyBy = Object.values(res?.body)[0]?.usd;\r\n    const value = multiplyBy * price.toFixed(2);\r\n    return value.toFixed(4);\r\n  }\r\n};\r\n\r\nconst handleSendClick = () => {\r\n  // Handle the send button click event\r\n  console.log(\"Input value:\", state.listingPrice, Number(state.listingPrice));\r\n  console.log(\r\n    \"Input value:\",\r\n    Ethers.provider().getSigner(),\r\n    currentChain[props.singleNftProps.chain].contract\r\n  );\r\n  const contract = new ethers.Contract(\r\n    currentChain[props.singleNftProps.chain].contract,\r\n    listAbi,\r\n    Ethers.provider().getSigner()\r\n  );\r\n  console.log(\"Formed thee\", contract);\r\n  const nftContract = props.singleNftProps.id.split(\r\n    props.singleNftProps.tokenId\r\n  )[0];\r\n\r\n  console.log(\r\n    \"Logged Thee\",\r\n    nftContract,\r\n    props.singleNftProps.tokenId,\r\n    (Number(state.listingPrice) * 1e18).toString()\r\n  );\r\n\r\n  contract\r\n    .createMarketplaceItem(\r\n      nftContract,\r\n      props.singleNftProps.tokenId,\r\n      (Number(state.listingPrice) * 1e18).toString(),\r\n      \"General\",\r\n      \"0xB4bE310666D2f909789Fb1a2FD09a9bEB0Edd99D\"\r\n    )\r\n    .then((transactionHash) => transactionHash.wait())\r\n    .then((ricit) => {\r\n      console.log(\"does not get hiere\", ricit);\r\n      State.update({\r\n        isOpen: false,\r\n        message: true,\r\n        text: `${currentChain[props.singleNftProps.chain].explorer}/tx/${\r\n          ricit.transactionHash\r\n        }`,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"erro stuffs, baffles me\", err);\r\n      State.update({\r\n        isOpen: false,\r\n        error: true,\r\n        text: err.reason,\r\n      });\r\n    });\r\n};\r\n\r\nconst handleListing = () => {\r\n  // Handle the send button click event\r\n\r\n  State.update({\r\n    isOpen: true,\r\n  });\r\n};\r\n\r\nconst handleInputChange = (e) => {\r\n  console.log(\"updator\", e.target.value);\r\n  State.update({\r\n    listingPrice: e.target.value,\r\n  });\r\n};\r\n\r\nconst price = props.singleNftProps.price\r\n  ? props.singleNftProps.price * PRICE_CONVERSION_VALUE\r\n  : 0;\r\n\r\nconst HandleList = () => {\r\n  console.log(props.singleNftProps);\r\n};\r\n\r\nreturn (\r\n  <Root>\r\n    <MainContainer>\r\n      <TopSection>\r\n        <TopImageContainer>\r\n          <HeaderText>{props.singleNftProps.name || \"AI Sunset\"}</HeaderText>\r\n          <img\r\n            src={\r\n              props.singleNftProps.image\r\n                ? props.singleNftProps?.image.replace(\r\n                    \"ipfs://\",\r\n                    \"https://ipfs.io/ipfs/\"\r\n                  )\r\n                : \"https://ipfs.io/ipfs/QmZbtU8RnMymJAJRpTriZgDXVeeCpm5RyXMJNquGoVc4Rb\"\r\n            }\r\n            alt=\"NFT\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            className=\"rounded-3\"\r\n          />\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              marginTop: \"10px\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <p\r\n              style={{\r\n                marginBottom: \"0.5em\",\r\n                fontSize: \"0.85rem\",\r\n                color: \"#0d99ff\",\r\n              }}\r\n            >\r\n              Created by\r\n            </p>\r\n            <span style={{ fontSize: \"0.9rem\", fontWeight: 600 }}>\r\n              {`${\r\n                props.singleNftProps.owner\r\n                  ? props.singleNftProps.owner.slice(0, 6)\r\n                  : \"0x022\"\r\n              }...${\r\n                props.singleNftProps.owner\r\n                  ? props.singleNftProps.owner.slice(36)\r\n                  : \"0454et\"\r\n              }`}\r\n            </span>\r\n          </div>\r\n        </TopImageContainer>\r\n        <RightSection>\r\n          {state.error && (\r\n            <span style={{ color: state.colour || \"red\" }}>{state.text}</span>\r\n          )}\r\n          {state.message && (\r\n            <a href={`${state.text}`} target=\"_blank\">\r\n              View Transaction\r\n            </a>\r\n          )}\r\n          <PriceBucket>\r\n            <div>\r\n              <p style={{ color: \"#b2b7c2\", marginBottom: 0 }}>CURRENT PRICE</p>\r\n              <PriceArea>\r\n                <h6>{price.toFixed(2)}</h6>\r\n                <span>\r\n                  ($\r\n                  {getUsdValue(\r\n                    props.singleNftProps.price * PRICE_CONVERSION_VALUE || 0\r\n                  )}\r\n                  )\r\n                </span>\r\n              </PriceArea>\r\n            </div>\r\n            <div onClick={() => HandleList()}>\r\n              {props.singleNftProps.isListed ? (\r\n                <button\r\n                  style={{\r\n                    backgroundColor: \"#525c76\",\r\n                    borderColor: \"#525c76\",\r\n                    cursor: \"not-allowed\",\r\n                  }}\r\n                >\r\n                  Listed\r\n                </button>\r\n              ) : props.singleNftProps.owner == props.sender ? (\r\n                <button onClick={handleListing}>List</button>\r\n              ) : (\r\n                <button\r\n                  style={{\r\n                    backgroundColor: \"#525c76\",\r\n                    borderColor: \"#525c76\",\r\n                    cursor: \"not-allowed\",\r\n                  }}\r\n                >\r\n                  Not Listed\r\n                </button>\r\n              )}\r\n            </div>\r\n            {state.isOpen && (\r\n              <Popup>\r\n                <div>\r\n                  <PopupContent>\r\n                    <div>\r\n                      <Input\r\n                        type=\"text\"\r\n                        value={state.listingPrice}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"enter Listing Price\"\r\n                      />\r\n                      <Button onClick={handleSendClick}>List Nft</Button>\r\n                    </div>\r\n                  </PopupContent>\r\n                </div>\r\n              </Popup>\r\n            )}\r\n          </PriceBucket>\r\n          <Description>\r\n            <h6>Description</h6>\r\n            <span>\r\n              {props.singleNftProps.description || \"Ai generated sunset cliffs\"}\r\n            </span>\r\n          </Description>\r\n          <Description>\r\n            <h6>Attributes</h6>\r\n            <AttributeContainer>\r\n              {props.singleNftProps.attributes ? (\r\n                props.singleNftProps.attributes.map((data) => (\r\n                  <Attribute>\r\n                    <div>\r\n                      <span style={{ color: \"#b2b7c2\" }}>File Type</span>\r\n                      <p style={{ marginTop: \"10px\" }}>{data.trait_type}</p>\r\n                    </div>\r\n                    <div>\r\n                      <span style={{ color: \"#b2b7c2\" }}>Rarity</span>\r\n                      <p style={{ marginTop: \"10px\" }}>{data.value}</p>\r\n                    </div>\r\n                  </Attribute>\r\n                ))\r\n              ) : (\r\n                <Attribute>\r\n                  <div>\r\n                    <span style={{ color: \"#b2b7c2\" }}>File Type</span>\r\n                    <p style={{ marginTop: \"10px\" }}>PNG</p>\r\n                  </div>\r\n                  <div>\r\n                    <span style={{ color: \"#b2b7c2\" }}>Rarity</span>\r\n                    <p style={{ marginTop: \"10px\" }}>1%</p>\r\n                  </div>\r\n                </Attribute>\r\n              )}\r\n            </AttributeContainer>\r\n          </Description>\r\n          <Description>\r\n            <h6>Details</h6>\r\n            <MintDetails>\r\n              <span>Mint Address</span>\r\n              <a\r\n                target=\"_blank\"\r\n                href={`${\r\n                  currentChain[props.singleNftProps.chain].explorer\r\n                }/address/${props.singleNftProps.owner || \"\"}`}\r\n              >\r\n                {`${\r\n                  props.singleNftProps.owner\r\n                    ? props.singleNftProps.owner.slice(0, 6)\r\n                    : \"0x022\"\r\n                }...${\r\n                  props.singleNftProps.owner\r\n                    ? props.singleNftProps.owner.slice(36)\r\n                    : \"0454et\"\r\n                }`}\r\n              </a>\r\n            </MintDetails>\r\n          </Description>\r\n        </RightSection>\r\n      </TopSection>\r\n    </MainContainer>\r\n    <TransactionTable>\r\n      <TableHeader>\r\n        <h1>Transaction History</h1>\r\n      </TableHeader>\r\n      {props.singleNftProps.transactions ? (\r\n        props.singleNftProps.transactions.map((data) => (\r\n          <TableBody>\r\n            <RowType>{data.type}</RowType>\r\n            <RowBody>\r\n              <span>From</span>\r\n              <p>\r\n                {`${data.owner ? data.owner.id.slice(0, 4) : \"..\"}...${\r\n                  data.owner ? data.owner.id.slice(40) : \".\"\r\n                }`}\r\n              </p>\r\n              <span>To</span>\r\n              <p>\r\n                {`${data.to ? data.to.id.slice(0, 4) : \"..\"}...${\r\n                  data.to ? data.to.id.slice(40) : \".\"\r\n                }`}\r\n              </p>\r\n              <p>{getFormatedTxDate(data.txDate || \"1662436482\")}</p>\r\n            </RowBody>\r\n          </TableBody>\r\n        ))\r\n      ) : (\r\n        <TableBody>\r\n          <RowType>Listing</RowType>\r\n          <RowBody>\r\n            <span>From</span>\r\n            <p>---</p>\r\n            <span>To</span>\r\n            <p>waze.near</p>\r\n            <p>{getFormatedTxDate(data.txDate || \"1662436482\")}</p>\r\n          </RowBody>\r\n        </TableBody>\r\n      )}\r\n    </TransactionTable>\r\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\r\n  </Root>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xprometheus.near/widget/Eth-SingleNFT", "fact_widget_deployments_id": "bd4c2836b8beab3d39302daed882011e", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 2}