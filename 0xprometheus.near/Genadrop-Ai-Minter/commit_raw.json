{"tx_hash": "5Vod1kHVGkXpTzbbR5bKieNircERP1XefnQaLoFnQNtj", "action_id_social": "nPY87jszPKM7zMW7Y2dU5sJWXY48HBSJpieaos6Z3ts-0-widget", "block_id": 98271217, "block_timestamp": "2023-08-07T11:22:13.223Z", "signer_id": "0xprometheus.near", "widget_name": "Genadrop-Ai-Minter", "source_code": "const auroraCOntract = \"0xe53bC42B6b25a1d548B73636777a0599Fd27fE5c\";\nconst polygonContract = \"0x436AEceaEeC57b38a17Ebe71154832fB0fAFF878\";\nconst celoContract = \"0xC291846A587cf00a7CC4AF0bc4EEdbC9c3340C36\";\nconst avaxContract = \"0x43dBdfcAADD0Ea7aD037e8d35FDD7c353B5B435b\";\nconst arbitrumContract = \"0x959a2945185Ec975561Ac0d0b23F03Ed1b267925\";\nconst nearContract = \"nft.genadrop.near\";\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst mintSingle = [\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\n];\nState.init({\n  title: \"\",\n  description: \"\",\n  recipient: \"\",\n  showAlert: false,\n  toastMessage: \"\",\n  imgUrl: \"\",\n  fetchStatusError: false,\n  prompt: \"\",\n  cid: \"\",\n  isLoading: false,\n});\nlet accountId = context.accountId;\nconst contractAddresses = {\n  137: [polygonContract, \"Polygon\", \"https://polygonscan.com/tx/\"],\n  1313161554: [auroraCOntract, \"Aurora\", \"https://explorer.aurora.dev/tx/\"],\n  42220: [celoContract, \"Celo\", \"https://explorer.celo.org/mainnet/tx/\"],\n  43114: [avaxContract, \"Avalanche\", \"https://snowtrace.io/tx/\"],\n  42161: [arbitrumContract, \"Arbitrum\", \"https://arbiscan.io/tx/\"],\n  0: [nearContract, \"Near\"],\n};\nconst chains = [\n  {\n    id: \"137\",\n    name: \"Polygon\",\n    url: \"https://ipfs.near.social/ipfs/bafkreie5h5oq6suoingcwuzj32m3apv56rl56wpwpaxmevlk5vndlypxze\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiajqik4gjbmkh7z2gylpjzrsuht7simjecpxuoqn6icqfbioswzuy\",\n  },\n  {\n    id: \"42220\",\n    name: \"Celo\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifu6ufsdf2ivrs5febt7l25wdys6odzfelgjauzod7owrfug56cxe\",\n  },\n  {\n    id: \"43114\",\n    name: \"Avax\",\n    url: \"https://ipfs.near.social/ipfs/bafkreifhu5fytsjcmjluarfnu6kcdhaqz4rgdrbbzf6dlsmggqb7oi3w4e\",\n  },\n  {\n    id: \"42161\",\n    name: \"Arbitrum\",\n    url: \"https://ipfs.near.social/ipfs/bafkreiffax4lnya337rz5ph75faondeqmpy6xj37yprwvxbru4qc5emsiq\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n    url: \"https://ipfs.near.social/ipfs/bafkreigv55ubnx3tfhbf56toihekuxvgzfqn5c3ndbfjcg3e4uvaeuy5cm\",\n  },\n];\n\nconst handleMint = () => {\n  console.log(\"it's here\", state.title && state.description && state.cid);\n  if (!state.cid) {\n    return;\n  }\n  if (!state.title) {\n    console.log(\"Please Enter title\");\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a title for the NFT\",\n    });\n\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else if (!state.description) {\n    State.update({\n      showAlert: true,\n      toastMessage: \"Please enter a description for the NFT\",\n    });\n    setTimeout(() => {\n      State.update({\n        showAlert: false,\n      });\n    }, 3000);\n  } else {\n    if (state.selectedChain == \"0\") {\n      const gas = 200000000000000;\n      const deposit = 10000000000000000000000;\n      const metadata = {\n        name: state.title,\n        description: state.description,\n        properties: [],\n        image: `ipfs://${state.cid}`,\n      };\n      asyncFetch(\"https://ipfs.near.social/add\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n        },\n        body: metadata,\n      }).then((res) => {\n        const cid = res.body.cid;\n        const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n        console.log(\"in the promise\", res, Id);\n        Near.call([\n          {\n            contractName: \"genadrop-contract.nftgen.near\",\n            methodName: \"nft_mint\",\n            args: {\n              token_id: `${Date.now()}`,\n              metadata: {\n                title: state.title,\n                description: state.description,\n                media: `https://ipfs.io/ipfs/${state.cid}`,\n                reference: `ipfs://${cid}`,\n              },\n              receiver_id: state.recipient || accountId,\n            },\n            gas: gas,\n            deposit: deposit,\n          },\n        ]);\n      });\n      return;\n    }\n    console.log(\"passed checks\");\n    let networkId = Ethers.provider()._network.chainId;\n\n    const CA = contractAddresses[state.selectedChain][0] || \"137\";\n\n    console.log(\"CONTRACT ADD\", CA);\n\n    const contract = new ethers.Contract(\n      CA,\n      mintSingle,\n      Ethers.provider().getSigner()\n    );\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.cid}`,\n    };\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      const cid = res.body.cid;\n      const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n      console.log(\"in the promse\", res, Id);\n      const recipient = Ethers.send(\"eth_requestAccounts\", []);\n      contract\n        .mint(state.recipient || recipient[0], Id, 1, `ipfs://${cid}`, \"0x\")\n        .then((transactionHash) => transactionHash.wait())\n        .then((ricit) => {\n          console.log(\"receipt::\", ricit);\n          State.update({\n            link: `${\n              contractAddresses[state.selectedChain][2] + ricit.transactionHash\n            }`,\n          });\n        });\n    });\n  }\n};\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  console.log(\"accounts:\", accounts, state.sender);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    Ethers.provider()\n      .getNetwork()\n      .then((data) => {\n        State.update({\n          selectedChain: data.chainId,\n        });\n      });\n  }\n\n  console.log(\"in between\", state.sender);\n\n  State.update({\n    selectedChain: \"0\",\n  });\n}\n\nconst onChangeTitle = (title) => {\n  console.log(\"go daddy\", state.recipient);\n  State.update({\n    title,\n  });\n};\n\nconst onChangeRecipient = (recipient) => {\n  State.update({\n    recipient,\n  });\n};\n\nconst handleChainChange = (event) => {\n  console.log(\n    \"get what we doing:\",\n    event.target.value || \"no value from event?\",\n    event.target.value == \"0\",\n    !accountId\n  );\n  if (event.target.value == \"0\") {\n    if (!accountId) {\n      console.log(\"not what we thought,:\", accountId);\n      State.update({\n        showAlert: true,\n        toastMessage: \"Please log in before continuing\",\n      });\n      return;\n    }\n    State.update({\n      selectedChain: event.target.value,\n    });\n  }\n  console.log(\"encts here\", Ethers.send);\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0x\" + Number(event.target.value).toString(16),\n    },\n  ]).then((data) => console.log(\"done!!!\", data));\n  console.log(\"what happens after\");\n  State.update({\n    selectedChain: event.target.value,\n  });\n  console.log(\"afters\", state.selectedChain);\n};\n\nconst onChangeDesc = (description) => {\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\n  State.update({\n    description,\n  });\n};\n// if (state.sender === undefined) {\n//   console.log(\"of course it's undefined\", ethers);\n//   const accounts = Ethers.send(\"eth_requestAccounts\", []);\n//   console.log(\"account\", accounts);\n//   if (accounts.length) {\n//     State.update({ sender: accounts[0] });\n//     console.log(\"set sender\", accounts[0]);\n//   }\n// }\n\nconst Heading = styled.p`\n  margin: 3px auto 3px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  line-height:2.1rem;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst ImageUploadCard = styled.div`\ndisplay:flex;\nflex-flow: column nowrap;\nalign-items: center;\n  width:80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\n  margin:30px auto;\n  padding:1.5rem;\n  text-align: center;\n`;\n\nconst Main = styled.div`\n  display: grid;\n  gap: 3rem;\n  align-content:center;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  // background: linear-gradient(180deg,#e4f1fb,hsla(0,0%,85.1%,0));\n  margin-top: 5px;\n  width:100%;\n  padding: 1rem;\n`;\n\nconst Text = styled.p`\nfont-size: .9rem;\ncolor: #525c76;\nline-height:1.rem;\nmargin: 3px;\n`;\n\nconst Elipse = styled.div`\nbackground-color:#dff3f9;\nheight: 100px;\nwidth: 100px;\nborder-radius: 50%;\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n`;\n\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height:100%;\n  max-height:100%;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  &>img{\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  }\n`;\n\nconst Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n`;\n\nconst SelectTag = styled.select`\n  height: fit-content;\n  width: 300px;\n`;\n\nconst ChainIcon = styled.option`\n  display: flex;\n  height: 130px;\n  padding: 1rem auto;\n  &>img{\n    height:100px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\n\nif (!(state.sender || accountId)) {\n  console.log(\"Please login here now\");\n  State.update({\n    showAlert: true,\n    toastMessage: \"Please Sign in or connect a wallet\",\n  });\n}\n\nconst uploadFileUpdateState = (prompt) => {\n  asyncFetch(\"https://genadrop.onrender.com/api/v1/general/generate-image\", {\n    method: \"POST\",\n    mode: \"cors\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Basic dXNlcm5hbWViYXNpYzpwYXNzd29yZGJhc2lj\",\n    },\n\n    body: JSON.stringify({\n      prompt,\n      n: 1,\n      size: \"512x512\",\n    }),\n  })\n    .then((res) => {\n      console.log(res);\n      State.update({ prompt: \"\", isLoading: false });\n      if (res.body.resultCode === 0) {\n        State.update({ imgUrl: res.body.content[0].url });\n      }\n    })\n    .catch((err) => {\n      State.update({ fetchStatusError: true });\n    });\n};\n\nconst mintImage = () => {\n  State.update({ isLoading: true });\n  asyncFetch(\"https://genadrop.onrender.com/api/v1/general/blob\", {\n    method: \"POST\",\n    mode: \"cors\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Basic dXNlcm5hbWViYXNpYzpwYXNzd29yZGJhc2lj\",\n    },\n\n    body: JSON.stringify({\n      imageUri: state.imgUrl,\n      isAi: true,\n    }),\n  })\n    .then((res) => {\n      console.log(res);\n      State.update({ isLoading: false });\n      if (res.body.resultCode === 0) {\n        State.update({ cid: res.body.content.upload.IpfsHash });\n      }\n    })\n    .catch((err) => {\n      State.update({ fetchStatusError: true });\n    });\n};\nconst filesOnChange = () => {\n  State.update({ imgUrl: \"\", isLoading: true });\n  if (state.prompt) {\n    uploadFileUpdateState(state.prompt);\n  } else {\n    uploadFileUpdateState(\"a man in blue sky\");\n  }\n};\n\nconst handleInputChange = (event) => {\n  State.update({ prompt: event.target.value });\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 100px;\n`;\n\nconst ImageContainer = styled.div`\n  width: 100%;\n  max-width: 400px;\n  margin-bottom: 20px;\n`;\n\nconst Images = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`;\n\nconst DefaultImage = styled.div`\n  width: 100%;\n  height: 512px;\n  background-color: #f0f0f0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DefaultImageText = styled.span`\n  font-size: 18px;\n  color: #555;\n`;\n\nconst TextArea2 = styled.textarea`\n  width: 100%;\n  max-width: 400px;\n  height: 150px;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  resize: vertical;\n\n  @media (max-width: 768px) {\n    max-width: 300px;\n    height: 100px;\n    font-size: 14px;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  padding-top: 10px;\n  font-size: 16px;\n  border: none;\n  border-radius: 4px;\n  background-color: #0d99ff;\n  color: #fff;\n  cursor: pointer;\n\n  @media (max-width: 768px) {\n    padding: 8px 16px;\n    font-size: 14px;\n  }\n`;\n\nreturn (\n  <Main className=\"container-fluid\">\n    {!state.cid ? (\n      <div className=\"flex-grow-1\">\n        <Container>\n          <ImageContainer>\n            {state.imgUrl ? (\n              <Images src={state.imgUrl} alt=\"Preview\" />\n            ) : (\n              <DefaultImage>\n                {state.fetchStatusError ? (\n                  <DefaultImageText>Failed generate image!</DefaultImageText>\n                ) : (\n                  <DefaultImageText>\n                    Generated image will appear here!\n                  </DefaultImageText>\n                )}\n              </DefaultImage>\n            )}\n          </ImageContainer>\n          <TextArea2\n            placeholder=\"a man in blue sky....\"\n            value={state.prompt}\n            onChange={handleInputChange}\n          />\n          <div style={{ paddingTop: 20, paddingBottom: 20 }}>\n            <Button onClick={filesOnChange}>\n              {state.isLoading ? \"Generating Image....\" : \"Generate Image\"}\n            </Button>\n            {state.imgUrl && (\n              <Button onClick={mintImage}>\n                {state.isLoading ? \"uploading Image...\" : \"Mint Image\"}\n              </Button>\n            )}\n          </div>\n        </Container>\n      </div>\n    ) : (\n      <>\n        <Card className=\"d-flex flex-column align-items-center w-100\">\n          <ImageCard>\n            <img\n              src={state.imgUrl}\n              alt=\"generated image\"\n              width=\"100%\"\n              height=\"100%\"\n              className=\"rounded-3\"\n            />\n          </ImageCard>\n        </Card>\n        <div>\n          <Card>\n            {state.sender && Ethers.provider() ? (\n              <div className=\"form-group\">\n                <label htmlFor=\"chainSelect\">Select Chain</label>\n                <select\n                  className=\"form-select\"\n                  value={state.selectedChain}\n                  onChange={handleChainChange}\n                >\n                  {chains.map((chain) => (\n                    <ChainIcon key={chain.id} value={chain.id}>\n                      {chain.name}\n                    </ChainIcon>\n                  ))}\n                </select>\n                {state.link && (\n                  <a href={`${state.link}`} target=\"_blank\">\n                    View Transaction\n                  </a>\n                )}\n              </div>\n            ) : state.sender ? (\n              <div>\n                <label htmlFor=\"chainSelect\">Select Chain</label>\n                <SelectTag\n                  className=\"form-select\"\n                  value={state.selectedChain}\n                  onChange={handleChainChange}\n                >\n                  <option disabled selected>\n                    Select a Chain\n                  </option>\n                  {chains.map((chain) => (\n                    <ChainIcon key={chain.id} value={chain.id}>\n                      <span>{chain.name}</span>\n                    </ChainIcon>\n                  ))}\n                </SelectTag>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary mt-3\"\n                  onClick={handleMint}\n                >\n                  Mint to {contractAddresses[state.selectedChain][1]}\n                </button>\n                <div>\n                  <Web3Connect\n                    className=\"btn mt-3\"\n                    connectLabel=\"Connect with Ethereum Wallet\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <Web3Connect\n                className=\"btn mt-3\"\n                connectLabel=\"Connect with Wallet\"\n              />\n            )}\n          </Card>\n          <Card>\n            <Card>\n              Title:\n              <Input\n                type=\"text\"\n                value={state.title || \"\"}\n                onChange={(e) => onChangeTitle(e.target.value)}\n              />\n            </Card>\n            <Card>\n              Description:\n              <TextArea\n                type=\"text\"\n                value={state.description || \"\"}\n                onChange={(e) => onChangeDesc(e.target.value)}\n              />\n            </Card>\n            <Card>\n              Mint To:\n              <Input\n                type=\"text\"\n                placeholder={\n                  state.selectedChain == \"0\" ? accountId : state.sender\n                }\n                value={state.recipient}\n                onChange={(e) => onChangeRecipient(e.target.value)}\n              />\n            </Card>\n          </Card>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary d-flex flex-column align-items-center mx-auto\"\n            onClick={handleMint}\n          >\n            Mint to {contractAddresses[state.selectedChain][1]}\n          </button>\n        </div>\n      </>\n    )}\n  </Main>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xprometheus.near/widget/Genadrop-Ai-Minter", "fact_widget_deployments_id": "ede00ccfd8dc7f49aff6ebc60af962cb", "inserted_timestamp": "2023-08-07T12:32:05.367Z", "modified_timestamp": "2023-08-07T12:32:05.367Z", "__row_index": 0}