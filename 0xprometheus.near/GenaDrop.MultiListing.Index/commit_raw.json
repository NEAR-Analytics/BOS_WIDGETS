{"tx_hash": "569GKvBxiCALVu1v4yd2Cuw2GhhpGnsfojAnwhHo5Kgh", "action_id_social": "79XUqwNuTGyQWPBcYuo13PL5wz7RZComGx729o7EaoAb-0-widget", "block_id": 110801327, "block_timestamp": "2024-01-19T14:53:55.563Z", "signer_id": "0xprometheus.near", "widget_name": "GenaDrop.MultiListing.Index", "source_code": "// add nft transfers here\r\n// NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\r\nconst image = props.image;\r\nconst onChange = props.onChange;\r\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\r\nconst accountId = context.accountId ?? props.accountId; // add check for context it\r\nconst ownerId = \"minorityprogrammers.near\"; // attribution\r\nconst chainState = props.chainState;\r\nconst nft = props.nft ?? {\r\n  contractId: props.contractId,\r\n  tokenId: props.tokenId,\r\n}; // just in case need to pass in a NFT\r\nconst NEAR_NOMINATION_EXP = 24;\r\nconst newContractId = props.contractId\r\n  ? props?.contractId?.includes(\"genadrop\")\r\n    ? \"nft.genadrop.near\"\r\n    : props.contractId\r\n  : \"nft.genadrop.near\";\r\nconst contractId = newContractId; // default nft contract - genadrop-contract.nftgen.near\r\nconst tokenId = props.tokenId ?? \"1679119560198\"; // maybe condtional check if props is eempty // default nft\r\nconst fewfarmarket = \"market.fewandfar.near\";\r\nconst tradeportmarket = \"market.tradeport.near\";\r\nconst genadropmarket = \"market.genadrop.near\";\r\n\r\nconst fnfMsg = JSON.stringify({\r\n  sale_conditions: {\r\n    near: amount,\r\n  },\r\n});\r\n\r\nconst trpMsg = JSON.stringify({\r\n  price: amount,\r\n  market_type: \"sale\",\r\n  ft_token_id: \"near\",\r\n});\r\n\r\nconst msg = JSON.stringify({\r\n  price: amount,\r\n});\r\n// need to find custom market link to work with\r\n\r\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\r\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\r\n  token_id: tokenId,\r\n});\r\n\r\nState.init({\r\n  contractId: contractId,\r\n  tokenId: tokenId,\r\n  amount: amount,\r\n  msg: msg,\r\n  fnfMsg: fnfMsg,\r\n  trpMsg: trpMsg,\r\n  mintbaseMarketId: null,\r\n  chainState: chainState,\r\n  marketLinks: [],\r\n  custom: false,\r\n  customMarketLink: defaultCustomMarket,\r\n  isOpen: false,\r\n  validMarketLink: true,\r\n  explorerText: \"\",\r\n  error: false,\r\n  loadingListing: false,\r\n  nftMetadata: nftMetadata,\r\n  tokenInfo: tokenInfo,\r\n  receiverId: default_receiver,\r\n  validReceiver: true,\r\n  transfer: false, // add checkbox for transfer that shows\r\n  url: image.url,\r\n  nft: image.nft ?? {}, // from santiago\r\n  showAlert: false,\r\n});\r\nfunction ownsNFT() {\r\n  const ownsNFT = context.accountId === state.tokenInfo.owner_id;\r\n  State.update({\r\n    ownsNFT: ownsNFT,\r\n  });\r\n}\r\nownsNFT();\r\n\r\nconst getSender = () => {\r\n  return !state.sender\r\n    ? \"\"\r\n    : state.sender.substring(0, 6) +\r\n        \"...\" +\r\n        state.sender.substring(state.sender.length - 4, state.sender.length);\r\n};\r\n\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n  }\r\n}\r\n\r\nconst tradeportLink = `https://www.tradeport.xyz/near/collection/${\r\n  state.contractId.includes(\"genadrop\")\r\n    ? \"genadrop-contract.nftgen.near\"\r\n    : state.contractId\r\n}?tab=items&tokenId=${state.tokenId}`;\r\n\r\n//Few and Far Link\r\nconst fewfarlink = `https://fewfar.com/${\r\n  state.contractId.includes(\"genadrop\")\r\n    ? \"genadrop-single-nft-c40d654de\"\r\n    : state.contractId\r\n}/${state.tokenId}`;\r\n\r\nconst parasLink = `https://paras.id/token/${state.contractId}::${state.tokenId}`;\r\n\r\nconst defaultCustomMarket = \"apollo42.near\";\r\nconst mintbasemarket = \"simple.market.mintbase1.near\";\r\nconst default_receiver = \"minorityprogrammers.near\"; // default reciver nft for transfers\r\n\r\nfunction fetchMintbaseURL() {\r\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"mb-api-key\": \"omni-site\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-hasura-role\": \"anonymous\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: `\r\n        query MyQuery {\r\n        nft_listings(where: {token_id: {_eq: \"${tokenId}\"}}) {\r\n      \tmetadata_id\r\n      }\r\n    }\r\n      `,\r\n    }),\r\n  }).then((data) => {\r\n    if (data.body.data.nft_listings?.length) {\r\n      State.update({\r\n        mintbaseMarketId: data.body.data.nft_listings[0].metadata_id,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfetchMintbaseURL();\r\n\r\nconst mintBaseLink = `https://www.mintbase.xyz/meta/${state.mintbaseMarketId}`;\r\n\r\nconst marketLinks = {\r\n  tradeport: {\r\n    link: tradeportLink,\r\n  },\r\n  fewandfar: {\r\n    link: fewfarlink,\r\n  },\r\n  mintbase: {\r\n    link: mintBaseLink,\r\n  },\r\n  paras: {\r\n    link: parasLink,\r\n  },\r\n};\r\n\r\nfunction updateTradeportLink() {\r\n  // Function body goes here\r\n  updatedLink =\r\n    \"https://www.tradeport.xyz/near/collection/\" +\r\n    state.contractId +\r\n    \"/\" +\r\n    state.tokenId;\r\n  State.update({\r\n    tradeportLink: updatedLink,\r\n  });\r\n}\r\nfunction cleanupAmount(amount) {\r\n  return amount.replace(/,/g, \"\").trim();\r\n}\r\nfunction trimLeadingZeroes(value) {\r\n  value = value.replace(/^0+/, \"\");\r\n  if (value === \"\") {\r\n    return \"0\";\r\n  }\r\n  return value;\r\n}\r\nfunction parseNearAmount(amt) {\r\n  if (!amt) {\r\n    return null;\r\n  }\r\n  amt = cleanupAmount(amt);\r\n  const split = amt.split(\".\");\r\n  const wholePart = split[0];\r\n  const fracPart = split[1] || \"\";\r\n  if (split.length > 2 || fracPart.length > NEAR_NOMINATION_EXP) {\r\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\r\n  }\r\n  return trimLeadingZeroes(\r\n    wholePart + fracPart.padEnd(NEAR_NOMINATION_EXP, \"0\")\r\n  );\r\n}\r\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\r\nconst onChangeNearAmount = (amount) => {\r\n  amount = parseNearAmount(amount);\r\n  const msgConcat = JSON.stringify({\r\n    price: amount,\r\n    market_type: \"sale\",\r\n    ft_token_id: \"near\",\r\n  });\r\n  const fnfMsg = JSON.stringify({\r\n    sale_conditions: {\r\n      near: amount,\r\n    },\r\n  });\r\n  // console.log(bigIntNumber);\r\n  State.update({\r\n    amount,\r\n    msg: msgConcat,\r\n    fnfMsg: fnfMsg,\r\n    trpMsg: msgConcat,\r\n  });\r\n};\r\n\r\nconst onChangeEVMAmount = (amount) => {\r\n  State.update({\r\n    amount,\r\n  });\r\n};\r\n\r\nconst onChangeMsg = (msg) => {\r\n  // currently done in the amount\r\n  State.update({\r\n    msg: msg,\r\n  });\r\n};\r\n\r\nconst onChangeReceiver = (receiverId) => {\r\n  const validReceiverLink = isNearAddress(receiverId[0]); // add error message or change button based on this\r\n  State.update({\r\n    receiverId: receiverId[0],\r\n    validReceiver: validReceiverLink,\r\n  });\r\n  console.log(`receiver: ${state.receiverId[0]}`);\r\n};\r\n\r\nconst onChangeContract = (contractId) => {\r\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\r\n  State.update({\r\n    contractId,\r\n    nftMetadata,\r\n  });\r\n  onChangeToken(state.tokenId);\r\n  ownsNFT();\r\n  updateTradeportLink();\r\n};\r\n\r\nconst onChangeToken = (tokenId) => {\r\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\r\n    token_id: tokenId,\r\n  });\r\n  State.update({\r\n    tokenId,\r\n    tokenInfo,\r\n  });\r\n  ownsNFT();\r\n  updateTradeportLink();\r\n};\r\n\r\nconst onChangeCustomMarket = (customMarketLink) => {\r\n  const validMarketLink = isNearAddress(customMarketLink);\r\n  State.update({\r\n    customMarketLink,\r\n    validMarketLink,\r\n  });\r\n};\r\n/* HELPER FUNCTION */\r\nfunction isNearAddress(address) {\r\n  if (typeof address !== \"string\") {\r\n    return false;\r\n  }\r\n  if (!address.endsWith(\".near\")) {\r\n    return false;\r\n  }\r\n  const parts = address.split(\".\");\r\n  if (parts.length !== 2) {\r\n    return false;\r\n  }\r\n  if (parts[0].length < 2 || parts[0].length > 32) {\r\n    return false;\r\n  }\r\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nconst currentChainProps = {\r\n  aurora: {\r\n    img: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\r\n    id: \"1313161554\",\r\n    chain: \"Aurora\",\r\n    explorer: \"https://aurorascan.dev/\",\r\n    explorerTx: \"https://aurorascan.dev/\",\r\n    livePrice: \"ethereum\",\r\n    contract: \"0xe93097f7C3bF7A0E0F1261c5bD88F86D878667B5\",\r\n    subgraph:\r\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\r\n  },\r\n  arbitrum: {\r\n    img: \"https://assets.coingecko.com/coins/images/16547/large/photo_2023-03-29_21.47.00.jpeg?1680097630\",\r\n    id: \"42161\",\r\n    contract: \"0x27E52A81975F5Fb836e79007E3c478C6c0E6E9FB\",\r\n    chain: \"Arbitrum\",\r\n    explorer: \"https://arbiscan.io/\",\r\n    explorerTx: \"https://arbiscan.io/\",\r\n    livePrice: \"ethereum\",\r\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\r\n  },\r\n  celo: {\r\n    img: \"https://assets.coingecko.com/coins/images/11090/large/InjXBNx9_400x400.jpg?1674707499\",\r\n    id: \"42220\",\r\n    livePrice: \"celo\",\r\n    contract: \"0x5616BCcc278F7CE8B003f5a48f3754DDcfA4db5a\",\r\n    explorer: \"https://explorer.celo.org/address/\",\r\n    explorerTx: \"https://explorer.celo.org/\",\r\n    chain: \"Celo\",\r\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\r\n  },\r\n  polygon: {\r\n    img: \"https://altcoinsbox.com/wp-content/uploads/2023/03/matic-logo.webp\",\r\n    id: \"137\",\r\n    chain: \"Polygon\",\r\n    livePrice: \"matic-network\",\r\n    contract: \"0x57Eb0aaAf69E22D8adAe897535bF57c7958e3b1b\",\r\n    explorer: \"https://polygonscan.com/address/\",\r\n    explorerTx: \"https://polygonscan.com/\",\r\n    subgraph:\r\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\r\n  },\r\n};\r\n\r\nconst listAbi = [\r\n  \"function createMarketplaceItem(address nftContract, uint256 tokenId, uint256 price, string calldata category, address seller) public payable {}\",\r\n  \"function nftSale(uint256 price, uint256 tokenId, address seller, address nftContract) public payable {}\",\r\n];\r\n\r\nconst evmList = () => {\r\n  if (state.amount > 10000000) return;\r\n\r\n  State.update({\r\n    loadingListing: true,\r\n  });\r\n\r\n  const contract = new ethers.Contract(\r\n    currentChainProps[props.chainState].contract,\r\n    listAbi,\r\n    Ethers.provider().getSigner()\r\n  );\r\n  console.log(\"Formed thee\", contract);\r\n  const nftContract = contractId.split(tokenId)[0];\r\n\r\n  contract\r\n    .createMarketplaceItem(\r\n      nftContract,\r\n      tokenId,\r\n      (Number(state.amount) * 1e18).toString(),\r\n      \"General\",\r\n      state.sender\r\n    )\r\n    .then((transactionHash) => transactionHash.wait())\r\n    .then((ricit) => {\r\n      State.update({\r\n        isOpen: true,\r\n        message: true,\r\n        error: false,\r\n        loadingListing: false,\r\n        explorerText: `${currentChainProps[props.chainState].explorerTx}/tx/${\r\n          ricit.transactionHash\r\n        }`,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      State.update({\r\n        isOpen: false,\r\n        loadingListing: false,\r\n        error: true,\r\n        text: err.reason,\r\n      });\r\n    });\r\n};\r\n\r\nconst closeModal = () => State.update({ isOpen: false });\r\n\r\nconst list = () => {\r\n  if (!accountId) {\r\n    console.log(\"Sign in to list\");\r\n    return;\r\n  }\r\n  State.update({\r\n    loadingListing: true,\r\n  });\r\n\r\n  console.log(\"opioka\", state.trpMsg, state.fnfMsg, state.msg);\r\n  // need to buffer serialize arguments, add helper functions with state arguments\r\n  const gas = 100000000000000; // 100 tGas\r\n  //   const deposit = 1; // exactly 1 yocto\r\n  const deposit = 10000000000000000000000; // 0.01 near\r\n  Near.call(\r\n    [\r\n      state.tradeport\r\n        ? {\r\n            contractName: tradeportmarket,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.tradeport\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: tradeportmarket,\r\n              msg: state.trpMsg,\r\n            },\r\n            gas: gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.fewfar\r\n        ? {\r\n            contractName: fewfarmarket,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.fewfar\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: fewfarmarket,\r\n              msg: state.fnfMsg,\r\n            },\r\n            gas: gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.mintbase\r\n        ? {\r\n            contractName: mintbasemarket,\r\n            methodName: \"deposit_storage\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.mintbase\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: mintbasemarket,\r\n              msg: state.msg, // need to change mesg to conform with mitnbase market // \"{\\\"price\\\":\\\"3900000000000000000000000\\\",\\\"autotransfer\\\":true}\"\r\n            },\r\n            gas: gas,\r\n            deposit: deposit, // may take this out\r\n          }\r\n        : null,\r\n      state.genadrop\r\n        ? {\r\n            contractName: genadropmarket,\r\n            methodName: \"deposit_storage\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.genadrop\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: genadropmarket,\r\n              msg: state.msg, // need to change mesg to conform with mitnbase market // \"{\\\"price\\\":\\\"3900000000000000000000000\\\",\\\"autotransfer\\\":true}\"\r\n            },\r\n            gas: gas,\r\n            deposit: deposit, // may take this out\r\n          }\r\n        : null,\r\n      state.custom\r\n        ? {\r\n            contractName: state.customMarketLink,\r\n            methodName: \"storage_deposit\",\r\n            args: {\r\n              receiver_id: context.accountId,\r\n            },\r\n            gas,\r\n            deposit: deposit,\r\n          }\r\n        : null,\r\n      state.custom\r\n        ? {\r\n            contractName: state.contractId,\r\n            // need to wrap first with near_deposit\r\n            methodName: \"nft_approve\",\r\n            args: {\r\n              token_id: state.tokenId,\r\n              account_id: state.customMarketLink,\r\n              msg: state.msg, // need to add the variables and buffer seerailize\r\n            },\r\n            gas: gas,\r\n            deposit: deposit, // may take this out\r\n          }\r\n        : null,\r\n    ].filter((entry) => entry !== null)\r\n  );\r\n  State.update({\r\n    loadingListing: false,\r\n  });\r\n};\r\nconst transfer = () => {\r\n  if (!accountId) {\r\n    return;\r\n  }\r\n  // need to buffer serialize arguments, add helper functions with state arguments\r\n  const gas = 100000000000000; // 100 tGas\r\n  //   const deposit = 1; // exactly 1 yocto\r\n  const deposit = 1; // 0.01 near // maybe less\r\n  Near.call([\r\n    {\r\n      contractName: state.contractId,\r\n      methodName: \"nft_transfer\",\r\n      args: {\r\n        receiver_id: state.receiverId,\r\n        token_id: state.tokenId,\r\n      },\r\n      gas: gas ?? 200000000000000,\r\n      deposit: deposit ?? 10000000000000000000000,\r\n    },\r\n  ]);\r\n};\r\nconst selectFewFar = () => {\r\n  State.update({\r\n    fewfar: !state.fewfar,\r\n  });\r\n};\r\nconst selectTradeport = () => {\r\n  State.update({\r\n    tradeport: !state.tradeport,\r\n  });\r\n};\r\nconst selectMintbase = () => {\r\n  State.update({\r\n    mintbase: !state.mintbase,\r\n  });\r\n};\r\n\r\nconst selectGenadrop = () => {\r\n  State.update({\r\n    genadrop: !state.genadrop,\r\n  });\r\n};\r\nif (!accountId) {\r\n  State.update({\r\n    showAlert: true,\r\n    toastMessage: \"Please Sign in to Near wallet to list\",\r\n  });\r\n}\r\nconst selectCustom = () => {\r\n  State.update({\r\n    custom: !state.custom,\r\n  });\r\n}; // need better helper function for checking whether valid NEAR address\r\n\r\nconst Heading = styled.h1`\r\n  margin: 3px auto 3px auto;\r\n  font-size: 1em;\r\n  color: #0f1d40;\r\n  line-height: 2.1rem;\r\n  width: 60%;\r\n  text-align: center;\r\n  font-family: \"SF Pro Display\", sans-serif;\r\n`;\r\n\r\nconst Popup = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(5px); /* Apply background blur */\r\n`;\r\n\r\nreturn (\r\n  <div className=\"container\">\r\n    {state.showAlert && (\r\n      <Widget src=\"bos.genadrop.near/widget/GenaDrop.Alert\" props={state} />\r\n    )}\r\n    <Heading className=\"text-center fs-2 fw-bold my-4\">\r\n      {\" \"}\r\n      \ud83d\udecd\ufe0f List NFT {props.chainState === \"near\" && \"to Multiple Marketplaces\"}\r\n    </Heading>\r\n    {!props.tokenId && !props.contractId && (\r\n      <div>\r\n        <div\r\n          className=\"p-2 rounded mt-3\"\r\n          style={{\r\n            background: \"#fdfdfd\",\r\n            border: \"solid 1px #dee2e6\",\r\n            borderBottomLeftRadius: \".375rem\",\r\n            borderBottomRightRadius: \".375rem\",\r\n            minHeight: \"9em\",\r\n          }}\r\n        >\r\n          <div>\r\n            <div className=\"mt-2\">\r\n              <Widget\r\n                src=\"bos.genadrop.near/widget/GenaDrop.NFTSelector\"\r\n                props={{\r\n                  onChange: ({ contractId, tokenId }) => {\r\n                    State.update({\r\n                      contractId: contractId,\r\n                      tokenId: tokenId,\r\n                    });\r\n                    onChangeToken(tokenId);\r\n                    onChangeContract(contractId);\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )}\r\n    {state.tokenId !== \"1679119560198\" && (\r\n      <>\r\n        <Widget\r\n          src=\"0xprometheus.near/widget/GenaDrop.MultiListing.Input\"\r\n          props={{\r\n            state,\r\n            onChangeContract,\r\n            onChangeToken,\r\n            selectTradeport,\r\n            selectFewFar,\r\n            loadingListing: state.loadingListing,\r\n            selectCustom,\r\n            selectMintbase,\r\n            selectGenadrop,\r\n            marketLinks,\r\n            chainState,\r\n            onChangeCustomMarket,\r\n            onChangeNearAmount,\r\n            onChangeEVMAmount,\r\n            list,\r\n            evmList,\r\n            onChangeReceiver,\r\n          }}\r\n        />\r\n      </>\r\n    )}\r\n    {state.isOpen && (\r\n      <Popup>\r\n        <Widget\r\n          src=\"bos.genadrop.near/widget/GenaDrop.SuccessModal\"\r\n          props={{ closeModal, externalLink: state.explorerText }}\r\n        />\r\n      </Popup>\r\n    )}\r\n    <Widget src=\"bos.genadrop.near/widget/GenaDrop.Footer\" />\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xprometheus.near/widget/GenaDrop.MultiListing.Index", "fact_widget_deployments_id": "eae6b9fa9bc2661fd453dbbe20fabd9e", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}