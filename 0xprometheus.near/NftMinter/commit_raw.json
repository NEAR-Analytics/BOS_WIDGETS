{"tx_hash": "8XP3ikaM7Yj15THFvggoRdpMpQjfHGbGoN4BUM12RZHV", "action_id_social": "H3vnHnVmkQTvcEntKQ1ZbHcByQVS4TDYBTAp5F5Ecufw-0-widget", "block_id": 91453553, "block_timestamp": "2023-05-09T12:06:30.867Z", "signer_id": "0xprometheus.near", "widget_name": "NftMinter", "source_code": "const auroraCOntract = \"0xe53bC42B6b25a1d548B73636777a0599Fd27fE5c\";\r\nconst polygonContract = \"0x436AEceaEeC57b38a17Ebe71154832fB0fAFF878\";\r\nconst celoContract = \"0xC291846A587cf00a7CC4AF0bc4EEdbC9c3340C36\";\r\n\r\nconst mintSingle = [\r\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\r\n];\r\nconst contractAddresses = {\r\n  137: polygonContract,\r\n  1313161554: auroraCOntract,\r\n  42220: celoContract,\r\n};\r\n\r\nconst chains = [\r\n  {\r\n    id: \"137\",\r\n    name: \"Polygon\",\r\n  },\r\n  {\r\n    id: \"1313161554\",\r\n    name: \"Aurora\",\r\n  },\r\n  {\r\n    id: \"42220\",\r\n    name: \"Celo\",\r\n  },\r\n];\r\nconst profile = socialGetr(`${accountId}/profile`);\r\n\r\nif (profile === null) {\r\n  IpfsImageUpload();\r\n  return \"Loading\";\r\n}\r\n\r\nconst handleMint = () => {\r\n  console.log(\"it's here\", state.title && state.description && state.image.cid);\r\n  if (!(state.title && state.description && state.image.cid)) {\r\n    return;\r\n  }\r\n  console.log(\"passed checks\");\r\n  let networkId = Ethers.provider()._network.chainId;\r\n\r\n  const CA = contractAddresses[state.selectedChain || \"137\"];\r\n\r\n  const contract = new ethers.Contract(\r\n    CA,\r\n    mintSingle,\r\n    Ethers.provider().getSigner()\r\n  );\r\n  const metadata = {\r\n    name: state.title,\r\n    description: state.description,\r\n    properties: [],\r\n    image: `ipfs://${state.image.cid}`,\r\n  };\r\n  asyncFetch(\"https://ipfs.near.social/add\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    },\r\n    body: metadata,\r\n  }).then((res) => {\r\n    console.log(\"in the promise\", res);\r\n    const cid = res.body.cid;\r\n    const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\r\n    contract\r\n      .mint(state.sender, gas, 1, `ipfs://${cid}`, \"0x\")\r\n      .then((transactionHash) => transactionHash.wait())\r\n      .then((ricit) => {\r\n        console.log(\"receipt of what\", ricit);\r\n      });\r\n  });\r\n};\r\nif (state.sender === undefined) {\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  console.log(\"account\", accounts);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n  }\r\n  Ethers.provider()\r\n    .getNetwork()\r\n    .then((data) => {\r\n      State.update({\r\n        selectedChain: data.chainId,\r\n      });\r\n    });\r\n}\r\nState.init({\r\n  title: \"\",\r\n  description: \"\",\r\n  selectedChain: \"\",\r\n});\r\nconst onChangeTitle = (title) => {\r\n  State.update({\r\n    title,\r\n  });\r\n};\r\n\r\nconst handleChainChange = (event) => {\r\n  console.log(\"get what we doing:\", event.target.value, Ethers);\r\n  Ethers.send(\"wallet_switchEthereumChain\", [\r\n    {\r\n      chainId: \"0x\" + Number(event.target.value).toString(16),\r\n    },\r\n  ]).then((data) => console.log(\"done!!!\", data));\r\n  console.log(\"what happens after\");\r\n  State.update({\r\n    selectedChain: event.target.value,\r\n  });\r\n  console.log(\"afters\", state.selectedChain);\r\n};\r\n\r\nconst onChangeDesc = (description) => {\r\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\r\n  State.update({\r\n    description,\r\n  });\r\n};\r\nif (state.sender === undefined) {\r\n  console.log(\"of course it's undefined\", ethers);\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  console.log(\"account\", accounts);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    console.log(\"set sender\", accounts[0]);\r\n  }\r\n}\r\n\r\nreturn (\r\n  <div>\r\n    <div>Mint NFT on genadrop</div>\r\n    <div>\r\n      Title:\r\n      <input type=\"text\" onChange={(e) => onChangeTitle(e.target.value)} />\r\n    </div>\r\n    <div>\r\n      Description:\r\n      <input type=\"text\" onChange={(e) => onChangeDesc(e.target.value)} />\r\n    </div>\r\n    <div className=\"flex-grow-1\">\r\n      <IpfsImageUpload\r\n        image={state.image}\r\n        className=\"btn btn-outline-secondary border-0 rounded-3\"\r\n      />\r\n    </div>\r\n    <div>\r\n      {state.image.cid && (\r\n        <div className=\"mt-3\">\r\n          <h5>Preview:</h5>\r\n          <img\r\n            src={`https://ipfs.io/ipfs/` + state.image.cid}\r\n            alt=\"Preview\"\r\n            style={{ maxWidth: \"300px\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n    <div>\r\n      {!!state.sender ? (\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"chainSelect\">Select Chain</label>\r\n          <select\r\n            className=\"form-control\"\r\n            value={state.selectedChain}\r\n            onChange={handleChainChange}\r\n          >\r\n            {chains.map((chain) => (\r\n              <option key={chain.id} value={chain.id}>\r\n                {chain.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mt-3\"\r\n            onClick={handleMint}\r\n          >\r\n            Mint\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <Web3Connect className=\"btn mt-3\" connectLabel=\"Connect with Wallet\" />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xprometheus.near/widget/NftMinter", "fact_widget_deployments_id": "49f02c326fed4f4d38d0271cac291f60", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 1}