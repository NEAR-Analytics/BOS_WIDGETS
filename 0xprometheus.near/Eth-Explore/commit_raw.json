{"tx_hash": "EYxny4ycqdNtwSqRGDU8uaG5AmL9uJvH3w5Ybr8Hd18v", "action_id_social": "557xNHNxBCU9JfJuoha9mmw4T6t3BAeFNAcPi72hRisg-0-widget", "block_id": 96110821, "block_timestamp": "2023-07-10T01:40:07.816Z", "signer_id": "0xprometheus.near", "widget_name": "Eth-Explore", "source_code": "initState({\r\n  collectionData: {},\r\n  searchTerm: \"\",\r\n  nftData: [],\r\n  singleNftProps: {},\r\n  isNFTButtonClicked: false,\r\n  filteredNFTData: [],\r\n\r\n  chain: 1313161554,\r\n});\r\n\r\nconst PRICE_CONVERSION_VALUE = 0.000000000000000001;\r\n\r\nconst currentChain = {\r\n  1313161554: {\r\n    logoUrl: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\r\n    id: \"1313161554\",\r\n    chain: \"Aurora\",\r\n    livePrice: \"ethereum\",\r\n    subgraph:\r\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\r\n  },\r\n  42161: {\r\n    logoUrl:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRCYo9YwixfzDbW3cQ3ObNHxifNbQhmuJYpyhbXZTBS7w&s\",\r\n    id: \"42161\",\r\n    chain: \"Arbitrum\",\r\n    livePrice: \"ethereum\",\r\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\r\n  },\r\n  42220: {\r\n    logoUrl:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScIkhIs47BB_bEeLqnfu_4-lvs1uJIh8PeduKZsmyQFjLw2mQvt1UvT57G5kvOQGSw5rs&usqp=CAU\",\r\n    id: \"42220\",\r\n    livePrice: \"celo\",\r\n    chain: \"Celo\",\r\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\r\n  },\r\n  137: {\r\n    logoUrl:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOt8M-N1nbwMCiCiCNBv3-QI1tLBuL-BmcwowhGxce&s\",\r\n    id: \"137\",\r\n    chain: \"Polygon\",\r\n    livePrice: \"matic-network\",\r\n    subgraph:\r\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\r\n  },\r\n};\r\n\r\nconst getUsdValue = (price) => {\r\n  const res = fetch(\r\n    `https://api.coingecko.com/api/v3/simple/price?ids=${\r\n      currentChain[state.chain].livePrice\r\n    }&vs_currencies=usd`\r\n  );\r\n  if (res.ok) {\r\n    const multiplyBy = Object.values(res?.body)[0]?.usd;\r\n    const value = multiplyBy * price.toFixed(2);\r\n    return value.toFixed(3);\r\n  }\r\n};\r\n\r\nconst fetchData = () => {\r\n  return fetch(`${currentChain[state.chain].subgraph}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: `\r\n            query MyQuery {\r\n             nfts(first: 6 orderBy: createdAtTimestamp ) {\r\n                category\r\n                chain\r\n                createdAtTimestamp\r\n                id\r\n                isSold\r\n                isListed\r\n                price\r\n                tokenID\r\n                owner {\r\n                    id\r\n                }\r\n                tokenIPFSPath\r\n                transactions {\r\n                  price\r\n                  txDate\r\n                  txId\r\n                  to {\r\n                    id\r\n                  }\r\n                  owner: from {\r\n                    id\r\n                  }\r\n                  type\r\n                }\r\n                }\r\n            }\r\n        `,\r\n    }),\r\n  });\r\n};\r\n\r\nconst data = fetchData();\r\nif (!data.ok) {\r\n  return \"Loading\";\r\n}\r\n\r\nconst body = data.body.data.nfts;\r\n\r\nif (body) {\r\n  const nftBody = body.map((data) => {\r\n    const fetchIPFSData = fetch(\r\n      data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\r\n    );\r\n\r\n    if (fetchIPFSData.status === 403) {\r\n      return State.update({ error: true });\r\n    }\r\n    if (!fetchIPFSData.ok) {\r\n      return \"Loading NFTS from IPFS\";\r\n    }\r\n    if (fetchIPFSData.ok) {\r\n      const nft = fetchIPFSData.body;\r\n      let nftObject = {};\r\n      nftObject.id = data.id;\r\n      nftObject.sold = data.isSold;\r\n      nftObject.isListed = data.isListed;\r\n      nftObject.owner = data.owner.id;\r\n      nftObject.price = data.price;\r\n      nftObject.tokenId = data.tokenID;\r\n      nftObject.name = nft?.name;\r\n      nftObject.transactions = data.transactions;\r\n      nftObject.attributes = nft.properties;\r\n      nftObject.chain = data.chain;\r\n      nftObject.description = nft?.description;\r\n      nftObject.image = nft?.image;\r\n      return nftObject;\r\n    }\r\n  });\r\n\r\n  console.log(nftBody);\r\n\r\n  State.update({\r\n    nftData: nftBody,\r\n  });\r\n}\r\n\r\nconst seachInputHandler = (e) => {\r\n  const value = e.target.value.toLowerCase();\r\n  const searched = state.nftData.filter((nft) =>\r\n    nft.name.toLowerCase().includes(value)\r\n  );\r\n  State.update({\r\n    searchTerm: value,\r\n    filteredNFTData: searched,\r\n  });\r\n};\r\n\r\nconst Stats = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-around;\r\n      width: \"100%\";\r\n      max-width: 800px;\r\n      gap: 20px;\r\n  `;\r\n\r\nconst Main = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    margin-bottom: 20px;\r\n  `;\r\n\r\nconst PageTitle = styled.h1`\r\n  text-align:center;\r\n  font-size: 4vw; \r\n  font-weight: bold; \r\n  margin-bottom: 20px; \r\n  color: #0f1d40;\r\n  `;\r\n\r\nconst NFTCard = styled.div`\r\n   display: flex;\r\n   flex-flow: column nowrap;\r\n   -ms-flex-flow:column nowrap;\r\n   align-items:center;\r\n   background: #fff;\r\n   border-radius: 10px;\r\n   border: 1.41429px solid rgba(28,27,28,.2);\r\n   box-shadow: 5.65714px 5.65714px 11.3143px rgba(28,27,28,.04);\r\n   padding: 8px 0px;\r\n   background-color:#fff;\r\n   max-width: 350px;\r\n   margin: 0 auto;\r\n   &:hover &>div>img{\r\n     transform:scale(1.05);\r\n   }\r\n   button{\r\n   padding: .75em 2em;\r\n   border-radius: .7em;\r\n   color: var(--main-color);\r\n   border: 1px solid transparent;\r\n   transition: all .3s;\r\n   cursor: pointer;\r\n    color: #fff;\r\n    background: #0d99ff;\r\n    &:hover{\r\n        color: #0d99ff;\r\n        background:#fff;\r\n    }\r\n  @media screen and (max-width: 540px){ \r\n    padding: .5em 2em;    \r\n    }\r\n    }\r\n  `;\r\n\r\nconst NFTCardText = styled.div`\r\n  width: 100%;\r\n  // padding: 0px 1rem;\r\n  `;\r\n\r\nconst NFTCards = styled.div`\r\n  display: grid;\r\n  gap: 2rem;\r\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\r\n  justify-content: center;\r\n  background: #e4f1fb;\r\n  background: linear-gradient(180deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\r\n  background: -webkit-linear-gradient(180deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\r\n  background: -moz-linear-gradient(270deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\r\n  padding: 20px 3rem 1rem 3rem;\r\n  width:100%;\r\n`;\r\n\r\nconst ImageCard = styled.div`\r\n  height:250px;\r\n  width: 96%;\r\n  border-radius: 0.5rem;\r\n  overflow:hidden;\r\n  margin-bottom: .4rem;\r\n  &>img{\r\n  object-fit: cover;\r\n  transition: all 0.3s ease-in-out;\r\n  }\r\n  &>img:hover{\r\n    transform:scale(1.05);\r\n  }\r\n`;\r\n\r\nconst Logo = styled.div`\r\n    &>img {\r\n        width: 55px;\r\n        border-radius: 100%;\r\n    }\r\n`;\r\nconst InputContainer = styled.div`\r\n    width:80%;\r\n    max-width: 700px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content:center;\r\n    margin: 1rem auto 1rem auto;\r\n    &>input{\r\n        outline: none;\r\n    }\r\n    &>input:hover, &>input:focus{\r\n      border: 1px solid #0d99ff;\r\n      box-shadow: none;\r\n    }\r\n`;\r\n\r\nconst Hero = styled.div`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(https://www.genadrop.com/static/media/banner-marketplace.e5c03bb6.svg);\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-positiion: center;\r\n  width: 100%;\r\n  padding: 2rem;\r\n`;\r\nconst RankCard = styled.span`\r\n  background-color: rgba(28,27,28,.06);\r\n  border-radius: .5rem;\r\n  color: #000;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  padding: 8px;\r\n`;\r\n\r\nconst PriceArea = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #0d99ff;\r\n  &>*{\r\n  margin: 0px;\r\n  padding: 0px;\r\n  }\r\n  &>h6{\r\n    font-weight: 700;\r\n    font-size: 1.2rem;\r\n  }\r\n  &>span{\r\n  font-size: 1.2rem;\r\n  margin: 0px;\r\n  }\r\n`;\r\nconst HandleViewNft = (nft) => {\r\n  console.log(\"CAPital LETTER A\", nft);\r\n  State.update({ singleNftProps: nft, isNFTButtonClicked: true });\r\n};\r\n\r\nconst handleDropdownChange = (event) => {\r\n  State.update({ chain: event.target.value });\r\n};\r\n\r\nconst getSender = () => {\r\n  return !state.sender\r\n    ? \"\"\r\n    : state.sender.substring(0, 6) +\r\n        \"...\" +\r\n        state.sender.substring(state.sender.length - 4, state.sender.length);\r\n};\r\n\r\nif (state.sender === undefined) {\r\n  console.log(\"of course it's undefined\", ethers);\r\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\r\n  console.log(\"account\", accounts);\r\n  if (accounts.length) {\r\n    State.update({ sender: accounts[0] });\r\n    console.log(\"set sender\", accounts[0]);\r\n  }\r\n  console.log(\"elsefs\", Ethers.provider());\r\n}\r\n\r\nreturn state.isNFTButtonClicked ? (\r\n  <>\r\n    <Widget src=\"0xprometheus.near/widget/Eth-SingleNFT\" props={state} />\r\n  </>\r\n) : (\r\n  <>\r\n    <Hero className=\"w-100\">\r\n      <PageTitle>\r\n        Find, Buy and Sell NFTs across chains in <br />\r\n        \ud83d\udca7GenaDrop\r\n      </PageTitle>\r\n      <InputContainer>\r\n        <input\r\n          type=\"search\"\r\n          value={state.searchTerm}\r\n          placeholder=\"Search NFTs\"\r\n          onChange={seachInputHandler}\r\n        />\r\n        <select value={chain} onChange={handleDropdownChange}>\r\n          <option value=\"1313161554\">Aurora</option>\r\n          <option value=\"42220\">Celo</option>\r\n          <option value=\"137\">Polygon</option>\r\n          <option value=\"42161\">Arbitrum</option>\r\n        </select>\r\n        {state.sender ? (\r\n          <div>\r\n            <span>{state.sender ? getSender() : \"0x00...\"}</span>\r\n          </div>\r\n        ) : (\r\n          <Web3Connect connectLabel=\"Connect Wallet\" />\r\n        )}\r\n      </InputContainer>\r\n    </Hero>\r\n    {state.nftData.length > 0 ? (\r\n      <NFTCards>\r\n        {state.searchTerm === \"\" ? (\r\n          state.nftData.map((nft) => (\r\n            <a style={{ textDecoration: \"none\", color: \"inherit\" }}>\r\n              <NFTCard className=\"card\">\r\n                <ImageCard>\r\n                  <img\r\n                    src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\r\n                    alt={nft.name}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    className=\"rounded-3\"\r\n                  />\r\n                </ImageCard>\r\n                <NFTCardText>\r\n                  <hr />\r\n                  <div className=\"d-flex my-4 justify-content-between w-100 px-2\">\r\n                    <RankCard>\r\n                      Owner: {nft.owner.slice(0, 6)}...{nft.owner.slice(38)}\r\n                    </RankCard>\r\n                  </div>\r\n                  <div className=\"px-2\">\r\n                    <h3\r\n                      style={{\r\n                        fontSize: \"16px\",\r\n                        margin: \"0 0 10px\",\r\n                        wordBreak: \"break-all\",\r\n                      }}\r\n                    >\r\n                      {nft.name}\r\n                    </h3>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"space-between\",\r\n                      marginBottom: \"5px\",\r\n                    }}\r\n                    className=\"px-2\"\r\n                  >\r\n                    <div>\r\n                      <div style={{ color: \"#a4a9b6\" }}>Token ID</div>\r\n                      <p\r\n                        style={{\r\n                          fontSize: \"14px\",\r\n                          marginBottom: \"5px\",\r\n                          color: \"#0d99ff\",\r\n                        }}\r\n                      >\r\n                        {nft.tokenId}\r\n                      </p>\r\n                    </div>\r\n                    {nft.nft_state && (\r\n                      <div>\r\n                        <div style={{ color: \"#a4a9b6\" }}>Owner</div>\r\n                        <p style={{ fontSize: \"14px\" }}>\r\n                          {nft.owner.length > 12\r\n                            ? nft.owner.slice(0, 12) + \"...\"\r\n                            : nft.owner}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    <Logo>\r\n                      <img src={currentChain[state.chain].logoUrl} />\r\n                    </Logo>\r\n                  </div>\r\n                  {/*<p style={{ fontSize: \"14px\" }} className=\"px-2\">\r\n                    Collection: {nft.collection.slug}\r\n                  </p>*/}\r\n                  <hr />\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"space-between\",\r\n                      marginBottom: \"5px\",\r\n                    }}\r\n                    className=\"px-2\"\r\n                  >\r\n                    <div className=\"px-2\">\r\n                      <div style={{ color: \"#a4a9b6\", fontSize: \"1.1rem\" }}>\r\n                        Price\r\n                      </div>\r\n                      <PriceArea>\r\n                        <h6>{nft.price * PRICE_CONVERSION_VALUE}</h6>\r\n                        <span>\r\n                          (${getUsdValue(nft.price * PRICE_CONVERSION_VALUE)})\r\n                        </span>\r\n                      </PriceArea>\r\n                    </div>\r\n                    <button onClick={() => HandleViewNft(nft)}>Buy Now</button>\r\n                  </div>\r\n                </NFTCardText>\r\n              </NFTCard>\r\n            </a>\r\n          ))\r\n        ) : state.filteredNFTData.length > 0 ? (\r\n          state.filteredNFTData.map((nft) => (\r\n            <a style={{ textDecoration: \"none\", color: \"inherit\" }}>\r\n              <NFTCard classNmae=\"card\">\r\n                <ImageCard>\r\n                  <img\r\n                    src={nft?.image?.replace(\r\n                      \"ipfs://\",\r\n                      \"https://genadrop.mypinata.cloud/ipfs/\"\r\n                    )}\r\n                    alt={nft.name}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    className=\"rounded-3\"\r\n                  />\r\n                </ImageCard>\r\n                <NFTCardText>\r\n                  <hr />\r\n                  <div className=\"d-flex my-4 justify-content-between w-100 px-2\">\r\n                    <RankCard>Rank: {Math.round(nft.ranking)}</RankCard>\r\n                    <div>{nft.nft_state_lists[0].list_contract.name}</div>\r\n                  </div>\r\n                  <div className=\"px-2\">\r\n                    <h3\r\n                      style={{\r\n                        fontSize: \"16px\",\r\n                        margin: \"0 0 10px\",\r\n                        wordBreak: \"break-all\",\r\n                      }}\r\n                    >\r\n                      {nft.name}\r\n                    </h3>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"space-between\",\r\n                      marginBottom: \"5px\",\r\n                    }}\r\n                    className=\"px-2\"\r\n                  >\r\n                    <div>\r\n                      <div style={{ color: \"#a4a9b6\" }}>Token ID</div>\r\n                      <p\r\n                        style={{\r\n                          fontSize: \"14px\",\r\n                          marginBottom: \"5px\",\r\n                          color: \"#0d99ff\",\r\n                        }}\r\n                      >\r\n                        {nft.tokenId}\r\n                      </p>\r\n                    </div>\r\n                    {nft && (\r\n                      <div>\r\n                        <div style={{ color: \"#a4a9b6\" }}>Owner</div>\r\n                        <p style={{ fontSize: \"14px\" }}>\r\n                          {nft.owner.length > 12\r\n                            ? nft.owner.slice(0, 12) + \"...\"\r\n                            : nft.owner}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {/*<p style={{ fontSize: \"14px\" }} className=\"px-2\">\r\n                    Collection: {nft.collection.slug}\r\n                  </p>*/}\r\n                  <hr />\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"space-between\",\r\n                      marginBottom: \"5px\",\r\n                    }}\r\n                    className=\"px-2\"\r\n                  >\r\n                    <div className=\"px-2\">\r\n                      <div style={{ color: \"#a4a9b6\", fontSize: \"1.1rem\" }}>\r\n                        Price\r\n                      </div>\r\n                      {nft.nft_state_lists && nft.nft_state_lists[0] && (\r\n                        <PriceArea>\r\n                          <h6>{nft.price * PRICE_CONVERSION_VALUE}</h6>\r\n                          <span>(${})</span>\r\n                        </PriceArea>\r\n                      )}\r\n                    </div>\r\n                    <button onClick={() => HandleViewNft(nft)}>Buy Now </button>\r\n                  </div>\r\n                </NFTCardText>\r\n              </NFTCard>\r\n            </a>\r\n          ))\r\n        ) : (\r\n          <div>No results found for \"{state.searchTerm}\".</div>\r\n        )}\r\n      </NFTCards>\r\n    ) : (\r\n      <div>No NFTs available.</div>\r\n    )}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/0xprometheus.near/widget/Eth-Explore", "fact_widget_deployments_id": "844ae7f9bbdb832e90cc4844a0b51e85", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}