{"tx_hash": "HNzy5LkhzBkK5gv3BwecVdAzMoMabWf5LynGgiLpRUoD", "action_id_social": "2SW8jbUc9nQoRVuUwycjeVetp2iy5UesJKoGeeAyWagw-0-widget", "block_id": 107151078, "block_timestamp": "2023-12-04T17:26:33.418Z", "signer_id": "hack.near", "widget_name": "meta.test", "source_code": "// adapted from the `PublicTags` widget by zavodil.near\n\nconst accountId = props.accountId ?? context.accountId;\n\nconst creatorId = props.creatorId ?? \"mob.near\";\nconst namespace = props.namespace ?? \"widget\";\nconst thingId = props.thingId ?? \"Explorer\";\n\nconst initialPath = `${creatorId}/${namespace}/${thingId}`;\nconst initialTagsObject = Social.get(\n  `*/graph/context/${initialPath}/tags/**`,\n  \"final\"\n);\n\nconst [state, setState] = useState({\n  showEditor: false,\n  path: props.path ?? initialPath,\n  tagsObject: initialTagsObject,\n  attestation: null,\n});\n\nconst normalizeTag = (tag) =>\n  tag\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst fetchTagsObject = (path) => {\n  Social.get(\n    `*/graph/context/${path}/tags/**`,\n    \"final\",\n    (error, fetchedTagsObject) => {\n      if (error) {\n        console.error(\"Error fetching tagsObject:\", error);\n      } else {\n        setState((prevState) => ({\n          ...prevState,\n          tagsObject: fetchedTagsObject,\n        }));\n      }\n    }\n  );\n};\n\nuseEffect(() => {\n  fetchTagsObject(state.path);\n}, [state.path]);\n\nconst pattern = `*/graph/context/*/*/*/tags/*`;\n\nconst tagClass = \"bg-success\";\nconst badgeBtnClass = \"text-white btn p-0 lh-1 m-1\";\n\n// const addContextHtml = (\n//   <a\n//     href={`#/hack.near/widget/catalog?accountId=${accountId}`}\n//     className={badgeBtnClass}\n//   >\n//     <div className={`me-1 mt-3 badge bg-primary`}>+ Tag</div>\n//   </a>\n// );\n\nif (state.tagsObject === null) {\n  return \"Loading...\";\n}\n\nconst tagsCount = {};\nconst tagsAuthors = {};\n\nconst processTagsObject = (obj) => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] === null) {\n      const tag = key;\n      tagsCount[tag] = (tagsCount[tag] || 0) - 1;\n    } else if (typeof obj[key] === \"object\") {\n      processTagsObject(obj[key]);\n    } else {\n      const tag = key;\n      tagsCount[tag] = (tagsCount[tag] || 0) + 1;\n    }\n  });\n};\n\nconst getTags = () => {\n  processTagsObject(initialTagsObject);\n  const tags = Object.entries(tagsCount);\n  tags.sort((a, b) => b[1] - a[1]);\n  return tags.map((t) => {\n    return {\n      name: t[0],\n      count: t[1],\n    };\n  });\n};\n\nconst getNewTags = () => {\n  processTagsObject(state.tagsObject);\n\n  const newTagsCount = Object.keys(tagsCount).reduce((acc, key) => {\n    acc[key] = initialTagsObject[key]\n      ? tagsCount[key] - initialTagsObject[key]\n      : tagsCount[key];\n    return acc;\n  }, {});\n\n  const tags = Object.entries(newTagsCount);\n  tags.sort((a, b) => b[1] - a[1]);\n\n  return tags.map((t) => {\n    return {\n      name: t[0],\n      count: t[1],\n    };\n  });\n};\n\nconst setTags = (tags) => {\n  const newTagsObject = {};\n\n  tags.forEach((tag) => {\n    newTagsObject[normalizeTag(tag.name)] = \"\";\n  });\n\n  setState((prevState) => ({\n    ...prevState,\n    tagsObject: {\n      ...prevState.tagsObject[creatorId][namespace][thingId].tags,\n      ...newTagsObject,\n    },\n  }));\n};\n\nconst initialTags = getTags();\nconst tags = getNewTags();\n\nreturn (\n  <>\n    {initialTags &&\n      initialTags.map((tag) => (\n        <a\n          href={`/#/hack.near/widget/every.context?tag=${tag.name}`}\n          className={badgeBtnClass}\n          key={tag}\n        >\n          <span\n            className={`badge ${tagClass} position-relative`}\n            style={\n              tag.count > 1\n                ? {\n                    marginRight: \"0.9em\",\n                    paddingRight: \"0.85em\",\n                  }\n                : { marginRight: \"0.25em\" }\n            }\n          >\n            #{tag.name}\n            {tag.count > 1 && (\n              <span\n                className={`ms-1 badge translate-middle rounded-pill bg-dark position-absolute top-50 start-100`}\n              >\n                {tag.count}\n              </span>\n            )}\n          </span>\n        </a>\n      ))}\n    <div className=\"m-2\">\n      {!state.showEditor ? (\n        <button\n          onClick={() =>\n            setState((prevState) => ({\n              ...prevState,\n              showEditor: true,\n            }))\n          }\n          className={badgeBtnClass}\n        >\n          <div className={`me-1 mt-3 badge bg-primary`}>+ attestation</div>\n        </button>\n      ) : (\n        <div className=\"mb-2\">\n          <button\n            onClick={() =>\n              setState((prevState) => ({\n                ...prevState,\n                showEditor: false,\n              }))\n            }\n            className=\"text-white btn p-0 lh-1 m-1\"\n          >\n            <div className={`me-1 mt-3 badge bg-secondary`}>x close</div>\n          </button>\n        </div>\n      )}\n      {state.showEditor && (\n        <div>\n          <div className=\"row\">\n            <div className=\"m-1 col-8\">\n              <Typeahead\n                id={`tag-selector-${Date.now()}`}\n                multiple\n                labelKey=\"name\"\n                onChange={setTags}\n                options={tags}\n                placeholder=\"dev, art, gov, edu, social, near\"\n                positionFixed\n                allowNew\n              />\n            </div>\n            <div className=\"m-1 col-3\">\n              <CommitButton\n                disabled={state.tagsObject === null}\n                data={{\n                  graph: {\n                    context: {\n                      [creatorId]: {\n                        [namespace]: {\n                          [thingId]: state.tagsObject,\n                        },\n                      },\n                    },\n                  },\n                }}\n              >\n                + context\n              </CommitButton>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"m-1 col-8\">\n              <input\n                placeholder=\"source path of another thing\"\n                onChange={(e) =>\n                  setState((prevState) => ({\n                    ...prevState,\n                    attestation: e.target.value,\n                  }))\n                }\n              />\n            </div>\n            <div className=\"m-1 col-3\">\n              <Widget\n                src=\"hack.near/widget/AttestButton\"\n                props={{ item: initialPath, data: state.attestation }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/meta.test", "fact_widget_deployments_id": "8e876d0ecb24141cc26d3fcbf732bbde", "inserted_timestamp": "2023-12-04T19:29:17.519Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 1}