{"tx_hash": "E4Nc6LThP9wvrwWxQgyqSTrhdC3eXBHwXHxTU7Zv1VPx", "action_id_social": "CUN48b8o5D6ZpPfa4fyogd4UGm5uAu7q8U5gnQDVhVHQ-0-widget", "block_id": 116411893, "block_timestamp": "2024-04-08T18:49:25.882Z", "signer_id": "hack.near", "widget_name": "eth.social", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst user = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nconst identity = Social.index(\"identity\", \"eth\");\nconst data = Social.getr(\"*/identity/eth\", \"final\");\n\nif (!identity) {\n  return \"\";\n}\n\nconst accounts = Object.keys(identity);\nconst EthereumSigner = VM.require(\"sdks.near/widget/SDKs.EthereumSigner.Main\");\n\nState.init({\n  address: \"\",\n  proof: false,\n  verified: false,\n  broken: false,\n  signature: \"\",\n});\n\nif (Ethers.send(\"eth_accounts\", []).length > 0) {\n  let [account] = Ethers.send(\"eth_accounts\", []);\n\n  State.update({\n    address: account,\n  });\n}\n\nlet message = `I own ${context.accountId} and this Ethereum account: ${state.address}`;\n\nconst generateSignature = () => {\n  EthereumSigner.sign(message).then((signature) => {\n    State.update({\n      signature,\n      proof: true,\n    });\n  });\n};\n\nconst verifySignature = () => {\n  console.log(message, state.signature);\n  EthereumSigner.verify(message, state.signature, state.address)\n    .then((result) => {\n      console.log(result);\n      State.update({\n        verified: result,\n      });\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst toggleSignature = () => {\n  if (state.broken) {\n    State.update({\n      signature: state.signature.substring(0, state.signature.length - 1),\n      broken: false,\n    });\n  } else {\n    State.update({ signature: state.signature + \"a\", broken: true });\n  }\n};\n\nconst networkId = props.network ?? \"eth\";\n\nconst save = () => {\n  const data = {\n    identity: {\n      [networkId]: {\n        name: state.address,\n        signature: state.signature,\n      },\n    },\n    index: {\n      identity: JSON.stringify({\n        key: networkId,\n        value: state.address,\n      }),\n    },\n  };\n\n  Social.set(data);\n};\n\nreturn (\n  <>\n    <div className=\"m-3\">\n      <div className=\"d-flex flex-row justify-content-between\">\n        <div className=\"m-2 mt-3\">\n          <h2>\n            <b>NEAR \u2661 ETH</b>\n          </h2>\n        </div>\n        <div className=\"m-2\">\n          {!user && (\n            <div className=\"m-2 ms-3\">\n              <Web3Connect connectLabel=\"Connect\" />\n            </div>\n          )}\n          {state.address && (\n            <div className=\"m-2\">\n              {!state.proof && (\n                <div className=\"m-2\">\n                  <button\n                    className=\"btn btn-warning\"\n                    onClick={() => generateSignature()}\n                  >\n                    Begin\n                  </button>\n                </div>\n              )}\n              {state.proof && (\n                <div className=\"m-2\">\n                  {!state.verified && !state.broken && (\n                    <button\n                      className=\"btn btn-primary me-1\"\n                      onClick={() => verifySignature()}\n                    >\n                      Verify\n                    </button>\n                  )}\n                  {state.proof && state.verified && !state.broken && (\n                    <button className=\"btn btn-success me-1\" onClick={save}>\n                      Submit\n                    </button>\n                  )}\n                  {state.broken && (\n                    <button\n                      className=\"btn btn-danger me-1\"\n                      onClick={() => State.update({ proof: false })}\n                    >\n                      Cancel\n                    </button>\n                  )}\n                  <button\n                    className=\"btn btn-outline-dark ms-1\"\n                    onClick={() => toggleSignature()}\n                  >\n                    {state.broken ? \"Redo\" : \"Undo\"}\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"m-2\">\n        <h5>\n          <b>\n            <i>Join our EVM-based community!</i>\n          </b>\n        </h5>\n        <p>\n          <i>\n            Please sign a message on Ethereum to verify ownership of your\n            connected account. Then, as proof, record that signature in the\n            <a href=\"https://near.social/mob.near/widget/Explorer\">\n              SocialDB contract\n            </a>\n            (<a href=\"https://github.com/NearSocial/social-db\">GitHub</a>) on\n            NEAR.\n          </i>\n        </p>\n      </div>\n      <hr />\n      <div className=\"m-2\">\n        <h3>Members</h3>\n        <div className=\"m-1 mt-3\">\n          <Widget src=\"hack.near/widget/rbit.profiles\" props={{ limit: 132 }} />\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/eth.social", "fact_widget_deployments_id": "308bc517b7c626deeecf5300eb5c8c8d", "inserted_timestamp": "2024-04-08T20:33:31.806Z", "modified_timestamp": "2024-04-08T20:33:31.806Z", "__row_index": 2}