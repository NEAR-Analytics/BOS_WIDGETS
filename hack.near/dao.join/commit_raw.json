{"tx_hash": "J4qFaYBiUkxVonEJ7nRrk6y8kdnVxHupui5yh3EpQPaP", "action_id_social": "fu9r3NBkSc2XJu351sAMYWKAAX6guPm2wF3SmcjsBzd-0-widget", "block_id": 109034840, "block_timestamp": "2023-12-28T21:36:00.148Z", "signer_id": "hack.near", "widget_name": "dao.join", "source_code": "const accountId = context.accountId;\nconst roleId = props.roleId ?? \"community\";\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst proposalId =\n  props.proposalId ?? Near.view(daoId, \"get_last_proposal_id\") - 1;\n\nif (!accountId) {\n  return \"\";\n}\n\nState.init({\n  isMember: false,\n});\n\n// get DAO policy, deposit, and group\nconst policy = Near.view(daoId, \"get_policy\");\n\nif (policy === null) {\n  return \"\";\n}\n\nconst deposit = policy.proposal_bond;\n\nconst group = policy.roles\n  .filter((role) => role.name === roleId)\n  .map((role) => role.kind.Group);\n\n// get data from last proposal\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: proposalId,\n});\n\nif (proposal === null) {\n  return \"\";\n}\n\n// check if the potential member submitted last proposal\nconst canJoin = accountId && accountId !== proposal.proposer;\n\nconst handleJoin = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `add ${accountId} to the ${roleId} group`,\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: roleId,\n            },\n          },\n        },\n      },\n      gas: 219000000000000,\n      deposit: deposit,\n    },\n  ]);\n};\n\nconst groupMembers = group.join(\", \");\n\nconst checkMembership = (groupMembers) => {\n  if (groupMembers.indexOf(accountId) !== -1) {\n    return State.update({ isMember: true });\n  }\n};\n\nconst validMember = checkMembership(groupMembers);\n\n// check if the potential member is connected\nconst connectEdge = Social.keys(\n  `${accountId}/graph/connect/${daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\nconst loading = connectEdge === null || inverseEdge === null;\nconst isConnected = connectEdge && Object.keys(connectEdge).length;\n\nreturn (\n  <div>\n    {!isConnected ? (\n      <Widget src=\"hack.near/widget/dao.connect\" />\n    ) : (\n      <>\n        {!validMember ? (\n          <>\n            {canJoin ? (\n              <button\n                className=\"btn btn-success m-1 rounded-5\"\n                onClick={handleJoin}\n              >\n                Join\n              </button>\n            ) : (\n              <>\n                <button\n                  disabled={!canJoin}\n                  className=\"btn btn-success m-1 rounded-5\"\n                >\n                  Pending\n                </button>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <button\n              disabled={validMember}\n              className=\"btn btn-success m-1 rounded-5\"\n            >\n              Joined\n            </button>\n          </>\n        )}\n      </>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/dao.join", "fact_widget_deployments_id": "b7ba20ceec2aac71b700733767c2428f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}