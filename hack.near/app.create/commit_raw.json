{"tx_hash": "9267yxWm4u27EyJBjUF8m3LgwN5PZDyWncKyGP2U3kCf", "action_id_social": "EVbf3D3hdSDRbW6hDLuTH21kesj1sxd8jxUfT9kwtZ2F-0-widget", "block_id": 113316994, "block_timestamp": "2024-02-21T23:08:01.738Z", "signer_id": "hack.near", "widget_name": "app.create", "source_code": "const accountId = props.accountId ?? context.accountId;\n\nconst defaultRoutes = Social.getr(\"every.near/widget/app/config/routes\") ?? {\n  main: {\n    path: \"hack.near/widget/page.index\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Home\",\n    },\n  },\n  docs: {\n    path: \"hack.near/widget/page.docs\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Docs\",\n    },\n  },\n  social: {\n    path: \"hack.near/widget/page.feed\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Feed\",\n    },\n  },\n};\n\nState.init({\n  name,\n  routes: props.routes ?? defaultRoutes,\n  routePath: \"\",\n  pageId: \"\",\n  buttonText: \"\",\n});\n\nconst { AppLayout } = VM.require(\"hack.near/widget/template.main\") || {\n  AppLayout: () => <></>,\n};\n\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst handleCreate = () =>\n  Social.set({\n    widget: {\n      app: {\n        \"\": `const { page, tab, ...passProps } = props; const routes = props.routes ?? {\n            main: {\n              path: \"${context.accountId}/widget/page.index\",\n              blockHeight: \"final\",\n              init: {\n                name: \"Home\",\n              },\n            },\n            docs: {\n              path: \"${context.accountId}/widget/page.docs\",\n              blockHeight: \"final\",\n              init: {\n                name: \"Docs\",\n              },\n            },\n            social: {\n              path: \"${context.accountId}/widget/page.feed\",\n              blockHeight: \"final\",\n              init: {\n                name: \"Activity\",\n              },\n            },\n          };\n\n          const { AppLayout } = VM.require(\"hack.near/widget/template.main\") || {\n            AppLayout: () => <></>,\n          };\n\n          if (!page) page = Object.keys(routes)[0] || \"main\";\n\n          function Router({ active, routes }) {\n            const routeParts = active.split(\".\");\n\n            let currentRoute = routes;\n            let src = \"\";\n            let defaultProps = {};\n\n            for (let part of routeParts) {\n              if (currentRoute[part]) {\n                currentRoute = currentRoute[part];\n                src = currentRoute.path;\n\n                if (currentRoute.init) {\n                  defaultProps = { ...defaultProps, ...currentRoute.init };\n                }\n              } else {\n                return <p>NOTHING FOUND</p>;\n              }\n            }\n\n            return (\n              <div key={active}>\n                <Widget\n                  src={src}\n                  props={{\n                    currentPath: \"/${context.accountId}/widget/app?page=\\${page}\",\n                    page: tab,\n                    ...passProps,\n                    ...defaultProps,\n                  }}\n                />\n              </div>\n            );\n          }\n\n          const Container = styled.div\\`\n            display: flex;\n            height: 100%;\n          \\`;\n\n          const Content = styled.div\\`\n            width: 100%;\n            height: 100%;\n          \\`;\n\n          return (\n            <Container>\n              <AppLayout page={page} routes={routes} {...props}>\n                <Content>\n                  <Router active={page} routes={routes} />\n                </Content>\n              </AppLayout>\n            </Container>\n          )`,\n      },\n      \"page.index\": {\n        \"\": `const { Button } = VM.require(\"buildhub.near/widget/components\");\n          const imageUrl =\n            props.imageUrl ?? ${\n              JSON.stringify(state.image.url) ??\n              \"https://builders.mypinata.cloud/ipfs/QmQmKGGJXhkhGrTbE4MgJ3G1wUUu8eo7mNKwRSCB5tihCw\"\n            };\n\n          const HeaderContainer = styled.div\\`\n            width: 100%;\n            position: relative;\n\n            padding: 9.375rem 3rem;\n\n            @media screen and (max-width: 768px) {\n              padding: 9.375rem 1.5rem;\n            }\n          \\`;\n\n          const Logo = styled.img\\`\n            height: 55px;\n            object-fit: cover;\n            margin: 8px;\n          \\`;\n\n          const Content = styled.div\\`\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            gap: 2.5rem;\n\n            margin: 0 auto;\n          \\`;\n\n          return (\n            <>\n              <HeaderContainer>\n                <Content>\n                  <Logo src={imageUrl} />\n                  <Button variant=\"primary\">\n                    <a\n                      style={{\n                        textDecoration: \"none\",\n                        color: \"#000\",\n                      }}\n                      href={\\`{\n                        props.buttonLink ?? \"https://nearbuilders.org\"\n                      }\\`}\n                    >\n                      <b>{props.buttonText ?? \"START\"}</b>\n                    </a>\n                  </Button>\n                </Content>\n              </HeaderContainer>\n              <Widget src=\"hack.near/widget/src.footer\" />\n            </>\n          );`,\n      },\n      \"page.docs\": {\n        \"\": `const { currentPath, page, ...passProps } = props;\n          const { routes } = Social.getr(\"${context.accountId}/widget/page.docs/config/routes\") ?? {\n            type: \"app\",\n            routes: {\n              guide: {\n                path: \"buildhub.near/widget/Resources\",\n                blockHeight: \"final\",\n                init: {\n                  name: \"Guide\",\n                  icon: \"bi-map\",\n                  mdPath:\n                    \"https://raw.githubusercontent.com/NEARBuilders/gateway/main/resources.md\",\n                },\n              },\n            },\n          };\n\n          const { SidebarLayout } = VM.require(\"apps.near/widget/template.sidebar\") || {\n            SidebarLayout: () => <></>,\n          };\n\n          if (!page) page = Object.keys(routes)[0] || \"main\";\n\n          const Root = styled.div``;\n\n          function Router({ active, routes }) {\n            const routeParts = active.split(\".\");\n\n            let currentRoute = routes;\n            let src = \"\";\n            let defaultProps = {};\n\n            for (let part of routeParts) {\n              if (currentRoute[part]) {\n                currentRoute = currentRoute[part];\n                src = currentRoute.path;\n\n                if (currentRoute.init) {\n                  defaultProps = { ...defaultProps, ...currentRoute.init };\n                }\n              } else {\n                return <p>ERROR: NOTHING FOUND</p>;\n              }\n            }\n\n            return (\n              <div key={active}>\n                <Widget src={src} props={{ ...passProps, ...defaultProps }} />\n              </div>\n            );\n          }\n\n          const Container = styled.div\\`\n            height: 100%;\n          \\`;\n\n          const Content = styled.div\\`\n            width: 100%;\n            height: 100%;\n          \\`;\n\n          return (\n            <Root>\n              <Container>\n                <SidebarLayout currentPath={currentPath} page={page} routes={routes}>\n                  <Content>\n                    <Router active={page} routes={routes} />\n                  </Content>\n                </SidebarLayout>\n              </Container>\n            </Root>\n          );`,\n      },\n      \"page.feed\": {\n        \"\": `const { currentPath, page, ...passProps } = props;\n          const { Post } = VM.require(\"buildhub.near/widget/components\") || {\n            Post: () => <></>,\n          };\n\n          function formatDate(date) {\n            const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\n            return date.toLocaleDateString(\"en-US\", options);\n          }\n\n          const { routes } = Social.getr(\"${context.accountId}/widget/page.feed/config/routes\") ?? {\n            type: \"app\",\n            routes: {\n              all: {\n                path: \"hack.near/widget/feed\",\n                blockHeight: \"final\",\n                init: {\n                  name: \"All\",\n                  icon: \"bi-list\",\n                  requiredHashtags: [\"build\"],\n                },\n              },\n              events: {\n                path: \"buildhub.near/widget/events.Calendar\",\n                blockHeight: \"final\",\n                init: {\n                  name: \"Events\",\n                  icon: \"bi-calendar\",\n                },\n              },\n            },\n          };\n\n          const { SidebarLayout } = VM.require(\"apps.near/widget/template.sidebar\") || {\n            SidebarLayout: () => <></>,\n          };\n\n          if (!page) page = Object.keys(routes)[0] || \"main\";\n\n          const Root = styled.div``;\n\n          function Router({ active, routes }) {\n            const routeParts = active.split(\".\");\n\n            let currentRoute = routes;\n            let src = \"\";\n            let defaultProps = {};\n\n            for (let part of routeParts) {\n              if (currentRoute[part]) {\n                currentRoute = currentRoute[part];\n                src = currentRoute.path;\n\n                if (currentRoute.init) {\n                  defaultProps = { ...defaultProps, ...currentRoute.init };\n                }\n              } else {\n                return <p>ERROR: NOTHING FOUND</p>;\n              }\n            }\n\n            return (\n              <div key={active}>\n                <Widget src={src} props={{ ...passProps, ...defaultProps }} />\n              </div>\n            );\n          }\n\n          const Container = styled.div\\`\n            height: 100%;\n          \\`;\n\n          const Content = styled.div\\`\n            width: 100%;\n            height: 100%;\n          \\`;\n\n          return (\n            <Root>\n              <Container>\n                <SidebarLayout currentPath={currentPath} page={page} routes={routes}>\n                  <Content>\n                    <Router active={page} routes={routes} />\n                  </Content>\n                </SidebarLayout>\n              </Container>\n            </Root>\n          );`,\n      },\n      metadata: {\n        name: state.name,\n        image: state.image,\n        tags: {\n          build: \"\",\n        },\n      },\n      config: {\n        type: \"app\",\n        routes: state.routes,\n      },\n    },\n  });\n\nfunction addRoute(newRouteKey, newRouteData) {\n  State.update({\n    routes: { ...state.routes, [newRouteKey]: newRouteData },\n  });\n}\n\nfunction removeRoute(routeKey) {\n  const updatedRoutes = { ...state.routes };\n  delete updatedRoutes[routeKey];\n\n  State.update({\n    routes: updatedRoutes,\n  });\n}\n\nconst isValid = Social.get(`${state.routePath}/**`);\n\nconst routeData = {\n  [state.pageId]: {\n    path: [state.routePath],\n    blockHeight: \"final\",\n    init: {\n      name: [state.buttonText ?? state.pageId],\n    },\n  },\n};\n\nreturn (\n  <>\n    <div className=\"row\">\n      <div className=\"col-5\">\n        <div className=\"m-2\">\n          <h5 className=\"mb-2\">Name</h5>\n          <div className=\"mb-3 p-1\">\n            <input type=\"text\" placeholder=\"unique title\" value={state.name} />\n          </div>\n          <h5 className=\"mb-2\">Logo</h5>\n\n          <div className=\"p-1\">\n            <Widget\n              src=\"mob.near/widget/ImageEditorTabs\"\n              props={{\n                image: state.image,\n                onChange: (image) => State.update({ image }),\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-7\">\n        <div className=\"m-2\">\n          <h5 className=\"mb-2\">Routes</h5>\n\n          <div className=\"d-flex flex-row gap-3 p-1\">\n            <input\n              placeholder=\"page ID\"\n              onChange={(e) => State.update({ pageId: e.target.value })}\n            />\n            <input\n              placeholder=\"button text\"\n              onChange={(e) => State.update({ buttonText: e.target.value })}\n            />\n          </div>\n          <div className=\"d-flex flex-row gap-3 p-1\">\n            <input\n              placeholder=\"source path\"\n              onChange={(e) => State.update({ routePath: e.target.value })}\n            />\n            <button\n              className=\"btn btn-dark\"\n              disabled={!isValid || state.pageId == \"\"}\n              onClick={() => {\n                const newRouteData = {\n                  path: state.routePath,\n                  blockHeight: \"final\",\n                  init: {\n                    name: state.buttonText || state.pageId,\n                  },\n                };\n                addRoute(state.pageId, newRouteData);\n              }}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div>\n          {Object.keys(state.routes).map((key) => {\n            const route = state.routes[key];\n            return (\n              <div className=\"d-flex m-2 p-1 justify-content-between align-items-center\">\n                <Widget\n                  src=\"hack.near/widget/template.inline\"\n                  props={{ src: route.path }}\n                />\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={() => removeRoute(key)}\n                >\n                  X\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n    <div className=\"m-2\">\n      <button\n        style={{ width: \"100%\" }}\n        className=\"btn btn-success m-1 mb-3\"\n        disabled={!context.accountId}\n        onClick={handleCreate}\n      >\n        Launch\n      </button>\n    </div>\n    <div className=\"m-2\">\n      <h5>Preview</h5>\n      <hr />\n      <Widget src=\"hack.near/widget/app\" props={{ routes: state.routes }} />\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/app.create", "fact_widget_deployments_id": "cbd2518b8e8d062a401b74ed8818e9a4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}