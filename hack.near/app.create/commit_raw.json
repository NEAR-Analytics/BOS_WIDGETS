{"tx_hash": "8cBrZGg4PdSVkN5h2jKcMXqGFG35M4ZrfVsWBc9rJpo3", "action_id_social": "9o7njwf1xU1oAH8TWsWytShuNXdy2JL68Z7zBET3sjwe-0-widget", "block_id": 113169926, "block_timestamp": "2024-02-19T18:33:20.608Z", "signer_id": "hack.near", "widget_name": "app.create", "source_code": "const accountId = props.accountId ?? context.accountId;\n\nconst defaultRoutes = Social.getr(\"every.near/widget/app/config/routes\") ?? {\n  main: {\n    path: \"hack.near/widget/page.index\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Home\",\n    },\n  },\n  docs: {\n    path: \"hack.near/widget/page.docs\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Docs\",\n    },\n  },\n  social: {\n    path: \"hack.near/widget/page.feed\",\n    blockHeight: \"final\",\n    init: {\n      name: \"Feed\",\n    },\n  },\n};\n\nState.init({\n  name,\n  routes: props.routes ?? defaultRoutes,\n  routePath: \"\",\n  pageId: \"\",\n  buttonText: \"\",\n});\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst { page, tab, ...passProps } = props;\n\nconst { AppLayout } = VM.require(\"hack.near/widget/template.main\") || {\n  AppLayout: () => <></>,\n};\n\nif (!page) page = Object.keys(state.routes)[0] || \"main\";\n\nfunction Router({ active, routes }) {\n  const routeParts = active.split(\".\");\n\n  let currentRoute = routes;\n  let src = \"\";\n  let defaultProps = {};\n\n  for (let part of routeParts) {\n    if (currentRoute[part]) {\n      currentRoute = currentRoute[part];\n      src = currentRoute.path;\n\n      if (currentRoute.init) {\n        defaultProps = { ...defaultProps, ...currentRoute.init };\n      }\n    } else {\n      return <p>NOTHING FOUND</p>;\n    }\n  }\n\n  return (\n    <div key={active}>\n      <Widget\n        src={src}\n        props={{\n          currentPath: `/hack.near/widget/app.create?page=${page}`,\n          page: tab,\n          ...passProps,\n          ...defaultProps,\n        }}\n      />\n    </div>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst handleCreate = () =>\n  Social.set({\n    widget: {\n      app: {\n        \"\": `const accountId = props.accountId ?? context.accountId; const creatorId = props.creatorId ?? \"${\n          context.accountId\n        }\"; const pageId = props.pageId ?? \"${\n          state.name || generateUID()\n        }\"; return <Widget src=\"every.near/widget/app\" props={{ accountId }} />`,\n        metadata: {\n          name: state.name,\n          image: state.image,\n          tags: {\n            build: \"\",\n          },\n        },\n        config: {\n          type: \"app\",\n          routes: state.routes,\n        },\n      },\n    },\n  });\n\nfunction addRoute(newRouteKey, newRouteData) {\n  State.update({\n    routes: { ...state.routes, [newRouteKey]: newRouteData },\n  });\n}\n\nfunction removeRoute(routeKey) {\n  const updatedRoutes = { ...state.routes };\n  delete updatedRoutes[routeKey];\n\n  State.update({\n    routes: updatedRoutes,\n  });\n}\n\nconst isValid = Social.get(`${state.routePath}/**`);\n\nconst routeData = {\n  [state.pageId]: {\n    path: [state.routePath],\n    blockHeight: \"final\",\n    init: {\n      name: [state.buttonText ?? state.pageId],\n    },\n  },\n};\n\nreturn (\n  <>\n    <div className=\"m-2\">\n      <h3>Create App</h3>\n      <p>\n        <i>\n          This no-code builder can help anyone launch their own project based on\n          a common data structure for open web apps, courtesy of\n          <a href=\"https://everything.dev\">everything.dev</a> and{\" \"}\n          <a href=\"https://nearbuilders.org\">Build DAO</a>\n          contributors.\n        </i>\n      </p>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-5\">\n        <div className=\"m-2\">\n          <h5 className=\"mb-2\">Name</h5>\n          <div className=\"mb-3 p-1\">\n            <input type=\"text\" placeholder=\"unique title\" value={state.name} />\n          </div>\n          <h5 className=\"mb-2\">Logo</h5>\n\n          <div className=\"p-1\">\n            <Widget\n              src=\"mob.near/widget/ImageEditorTabs\"\n              props={{\n                image: state.image,\n                onChange: (image) => State.update({ image }),\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-7\">\n        <div className=\"m-2\">\n          <h5 className=\"mb-2\">Routes</h5>\n\n          <div className=\"d-flex flex-row gap-3 p-1\">\n            <input\n              placeholder=\"page ID\"\n              onChange={(e) => State.update({ pageId: e.target.value })}\n            />\n            <input\n              placeholder=\"button text\"\n              onChange={(e) => State.update({ buttonText: e.target.value })}\n            />\n          </div>\n          <div className=\"d-flex flex-row gap-3 p-1\">\n            <input\n              placeholder=\"source path\"\n              onChange={(e) => State.update({ routePath: e.target.value })}\n            />\n            <button\n              className=\"btn btn-dark\"\n              disabled={!isValid || state.pageId == \"\"}\n              onClick={() => {\n                const newRouteData = {\n                  path: state.routePath,\n                  blockHeight: \"final\",\n                  init: {\n                    name: state.buttonText || state.pageId,\n                  },\n                };\n                addRoute(state.pageId, newRouteData);\n              }}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div>\n          {Object.keys(state.routes).map((key) => {\n            const route = state.routes[key];\n            return (\n              <div className=\"d-flex m-2 p-1 justify-content-between align-items-center\">\n                <Widget\n                  src=\"hack.near/widget/template.inline\"\n                  props={{ src: route.path }}\n                />\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={() => removeRoute(key)}\n                >\n                  X\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n    <div className=\"m-2\">\n      <button\n        style={{ width: \"100%\" }}\n        className=\"btn btn-success m-1 mb-3\"\n        disabled={!context.accountId}\n        onClick={handleCreate}\n      >\n        Launch\n      </button>\n    </div>\n    <div className=\"m-2\">\n      <h5>Preview</h5>\n      <hr />\n      <Widget src=\"hack.near/widget/app\" props={{ routes: state.routes }} />\n    </div>\n  </>\n);\n", "metadata": {"fork_of": "hack.near/widget/create.page@96587415"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/app.create", "fact_widget_deployments_id": "32bcf316f19cb967046c978407b05add", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}