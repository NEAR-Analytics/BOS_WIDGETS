{"tx_hash": "DZzwvtM5YFwr1s6YfVWjqm9MjrxPUrV8Kf7t2UTQgi6A", "action_id_social": "8L1WYi2y3dAhdt6eDSW4NqMPfKcbroRyy67wFQyEuQ7W-0-widget", "block_id": 98859859, "block_timestamp": "2023-08-15T12:10:43.109Z", "signer_id": "hack.near", "widget_name": "GitBos", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst policy = Near.view(daoId, \"get_policy\");\nconst deposit = policy.proposal_bond;\n\nconst src = props.src ?? \"devs.near/widget/dev.community\";\n\nState.init({\n  selectedTab: props.tab ?? \"editor\",\n  src,\n  update: props.update ?? \"\",\n});\n\nconst [ownerId, type, name] = state.src.split(\"/\");\nconst [creatorId, newType, newName] = state.update.split(\"/\");\n\nconst source = Social.get(`${state.src}`);\nconst newVersion = Social.get(`${state.update}`);\n\nif (props.tab && props.tab !== state.selectedTab) {\n  State.update({\n    selectedTab: props.tab,\n  });\n}\n\nconst args = JSON.stringify({\n  data: {\n    [daoId]: {\n      [type]: {\n        [`${name}`]: {\n          \"\": `${state.update}`,\n        },\n      },\n    },\n  },\n});\n\nconst proposal_args = Buffer.from(args, \"utf-8\").toString(\"base64\");\n\nconst handleProposal = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `update ${src}`,\n          kind: {\n            FunctionCall: {\n              receiver_id: \"social.near\",\n              actions: [\n                {\n                  method_name: \"set\",\n                  args: proposal_args,\n                  deposit: \"50000000000000000000000\",\n                  gas: \"21900000000000\",\n                },\n              ],\n            },\n          },\n        },\n      },\n      deposit: deposit,\n      gas: \"219000000000000\",\n    },\n  ]);\n};\n\nconst handleCreate = () =>\n  Social.set({\n    [`${type}`]: {\n      [`${name}`]: {\n        \"\": `${src}`,\n      },\n    },\n  });\n\nconst existsData = Social.keys(`${ownerId}/${type}/${name}`);\nconst exists = !existsData || Object.keys(existsData).length > 0;\nconst validData = Social.keys(`${creatorId}/${newType}/${newName}`);\nconst valid = !validData || Object.keys(validData).length > 0;\nconst thing = Social.get(`${ownerId}/${type}/${name}`);\nconst data = Social.get(`${ownerId}/${type}/${name}/**`);\nconst metadata = data.metadata;\nconst tags = Object.keys(metadata.tags || {});\nconst pageUrl = `#/hack.near/widget/GitBos?src=${src}`;\nconst shareUrl = `https://near.org${pageUrl}`;\n\nconst dependencyMatch =\n  thing && thing.matchAll(/<Widget[\\s\\S]*?src=.*?\"(.+)\"[\\s\\S]*?\\/>/g);\nlet dependencySources = [...(dependencyMatch || [])]\n  .map((r) => r[1])\n  .filter((r) => !!r);\ndependencySources = dependencySources.filter(\n  (r, i) => dependencySources.indexOf(r) === i && r !== \"(.+)\"\n);\n\nconst sourceCode = `\n\\`\\`\\`jsx\n${thing}\n\\`\\`\\`\n`;\n\nlet CodeWrapper = styled.div`\nmargin-top: 23px;\n  & > pre > div {\n    margin: 0px !important;\n  }\n\n  & > pre {\n    margin: 0px !important;\n    border-radius: 0px 0px 5px 5px;\n  }\n`;\n\n// const setButton = ({ src, onHide }) => {\n//   return (\n//     <button\n//       className=\"btn btn-primary\"\n//       onClick={() => {\n//         State.update({ src });\n//         onHide();\n//       }}\n//     >\n//       <i className=\"bi bi-plus-lg\" /> add\n//     </button>\n//   );\n// };\n\nconst Wrapper = styled.div`\n  padding-bottom: 48px;\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  height: 48px;\n  padding 9px;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: 32px;\n  overflow: auto;\n  scroll-behavior: smooth;\n\n  @media (max-width: 1024px) {\n    background: #f8f9fa;\n    border-top: 1px solid #eceef0;\n    margin: 0 -12px 48px;\n\n    > * {\n      flex: 1;\n    }\n  }\n`;\n\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 12px;\n  padding: 0 12px;\n  position: relative;\n  color: ${(p) => (p.selected ? \"#11181C\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n\n  &:hover {\n    color: #11181c;\n  }\n\n  &::after {\n    content: \"\";\n    display: ${(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: #59e692;\n  }\n`;\n\nconst Content = styled.div`\n  display: grid;\n\n  @media (max-width: 995px) {\n    gap: 23px;\n  }\n`;\n\nconst Sidebar = styled.div`\n  > div {\n    padding-bottom: 32px;\n    border-bottom: 1px solid #eceef0;\n    margin-bottom: 32px;\n\n    &:last-child {\n      padding-bottom: 0;\n      border-bottom: none;\n      margin-bottom: 0;\n    }\n  }\n\n  @media (max-width: 995px) {\n    padding-bottom: 32px;\n    border-bottom: 1px solid #eceef0;\n    grid-row: 1;\n  }\n`;\n\nconst SmallTitle = styled.h3`\n  color: #687076;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  margin-bottom: 32px;\n  text-transform: uppercase;\n\n  @media (max-width: 770px) {\n    margin-bottom: 16px;\n  }\n`;\n\nconst TextLink = styled.a`\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  color: #0091ff;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\n\nconst Dependency = styled.div`\n  margin-bottom: 24px;\n`;\n\nreturn (\n  <Wrapper>\n    <div className=\"p-1\">\n      <h2 className=\"p-1\">GitBos</h2>\n      <h5 className=\"p-2\">input source path of anything:</h5>\n      <div className=\"input-group m-2\">\n        <input\n          className=\"form-control\"\n          defaultValue={state.src}\n          onChange={(e) => {\n            State.update({\n              src: e.target.value,\n            });\n          }}\n        />\n      </div>\n      {exists && name && (\n        <div className=\"row\">\n          <div className=\"col m-2\">\n            <Widget\n              src=\"hack.near/widget/summary\"\n              props={{\n                size: \"large\",\n                showTags: false,\n                src: state.src,\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n\n    {exists && name ? (\n      <div>\n        <Tabs>\n          <div>\n            <TabsButton\n              href={`${pageUrl}&tab=view`}\n              selected={state.selectedTab === \"view\"}\n            >\n              View\n            </TabsButton>\n\n            <TabsButton\n              href={`${pageUrl}&tab=source`}\n              selected={state.selectedTab === \"source\"}\n            >\n              Source\n            </TabsButton>\n            {type === \"widget\" && (\n              <TabsButton\n                href={`${pageUrl}&tab=history`}\n                selected={state.selectedTab === \"history\"}\n              >\n                History\n              </TabsButton>\n            )}\n\n            <TabsButton\n              href={`${pageUrl}&tab=editor`}\n              selected={state.selectedTab === \"editor\"}\n            >\n              Editor\n            </TabsButton>\n          </div>\n        </Tabs>\n      </div>\n    ) : (\n      <div className=\"m-3\">\n        <p>nothing found</p>\n      </div>\n    )}\n\n    {state.selectedTab === \"view\" && (\n      <Content>{exists && name && <Widget src={`${state.src}`} />}</Content>\n    )}\n\n    {state.selectedTab === \"source\" && (\n      <Content>\n        <Markdown text={sourceCode} />\n\n        <Sidebar>\n          <div>\n            <SmallTitle>Dependencies ({dependencySources.length})</SmallTitle>\n\n            {dependencySources.length === 0 && <Text>no dependencies</Text>}\n\n            {dependencySources.map((thing) => (\n              <Dependency key={thing}>\n                <Widget\n                  src=\"near/widget/ComponentProfile\"\n                  props={{ src: thing }}\n                />\n              </Dependency>\n            ))}\n          </div>\n        </Sidebar>\n      </Content>\n    )}\n\n    {state.selectedTab === \"history\" && (\n      <Content>\n        <Widget\n          src=\"near/widget/ComponentHistory\"\n          props={{ widgetPath: state.src }}\n        />\n      </Content>\n    )}\n\n    {state.selectedTab === \"editor\" && (\n      <div className=\"p-1\">\n        <h5 className=\"p-2\">input source path of a new version:</h5>\n        <div className=\"input-group p-2\">\n          <input\n            className=\"form-control\"\n            defaultValue={update}\n            onChange={(e) => {\n              State.update({\n                update: e.target.value,\n              });\n            }}\n          />\n        </div>\n        {valid && newName ? (\n          <div className=\"m-3\">\n            <Widget\n              src=\"hack.near/widget/request\"\n              props={{\n                accountId: creatorId,\n                type: newType,\n                name: newName,\n                ownerId,\n              }}\n            />\n            <CodeWrapper>\n              <Widget\n                src={`hack.near/widget/compare`}\n                props={{\n                  src: state.src,\n                  update: state.update,\n                  findUniqueResult: (\n                    lineCountDeleted,\n                    lineCountInserted,\n                    lineCountCurrentCode,\n                    lineCountPrevCode,\n                    allLineCount\n                  ) => {\n                    if (\n                      state.lineCountDeleted === undefined ||\n                      state.lineCountInserted === undefined\n                    )\n                      State.update({ lineCountDeleted, lineCountInserted });\n                  },\n                }}\n              />\n            </CodeWrapper>\n          </div>\n        ) : (\n          <div className=\"m-3\">\n            {state.update && <p>nothing found there</p>}\n          </div>\n        )}\n      </div>\n    )}\n  </Wrapper>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/GitBos", "fact_widget_deployments_id": "436d9a272c26919ab7b0cfb57db7dc6d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}