{"tx_hash": "6xNSzre7c8bfB9jkoPPgeWoJiDLjYYVTsTqXjvW9eHNu", "action_id_social": "93dT49A83FiDUhMxYjS1r5FHkWtuuDyng2EAgvKxmKPg-0-widget", "block_id": 99193524, "block_timestamp": "2023-08-19T21:31:46.938Z", "signer_id": "hack.near", "widget_name": "create.group", "source_code": "let members = Social.keys(\n  `${props.creatorId}/graph/${props.groupId}/*`,\n  \"final\",\n  {\n    return_type: \"BlockHeight\",\n    values_only: true,\n  }\n);\n\nif (members === null) {\n  return \"\";\n}\n\nState.init({\n  elements: {},\n  inputVal: \"\",\n});\n\nfunction addElement(newElement) {\n  State.update({\n    elements: { ...state.elements, [newElement]: \"\" },\n  });\n}\n\nfunction removeElement(elementKey) {\n  const updatedElements = { ...state.elements };\n  delete updatedElements[elementKey];\n\n  State.update({\n    elements: updatedElements,\n  });\n}\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst type = group ? \"remove\" : \"add\";\n\nconst handleCreateGroup = () => {\n  const groupId = props.groupId ?? generateUID();\n  const data = {\n    // thing: { // We can create the thing later, just remember to save the UUID in your notes\n    //   [groupId]: {\n    //     ...\n    //   },\n    // },\n    graph: {\n      [groupId]: state.elements,\n    },\n    index: {\n      graph: JSON.stringify({\n        key: groupId,\n        value: {\n          type,\n          data: state.elements,\n        },\n      }),\n    },\n  };\n\n  Social.set(data, {\n    onCommit: () => {},\n    onCancel: () => {},\n  });\n};\n\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst accountId = props.accountId ?? state.inputVal;\n\nconst memberId = JSON.stringify(state.elements[0]);\n\nconst isValid = isNearAddress(accountId);\n\nreturn (\n  <>\n    <div>\n      <input onChange={(e) => State.update({ inputVal: e.target.value })} />\n      <br />\n      <button disabled={!isValid} onClick={() => addElement(state.inputVal)}>\n        add\n      </button>\n    </div>\n    <br />\n    <div>\n      {Object.keys(state.elements).length > 0 && (\n        <div>\n          <button\n            className=\"btn btn-success\"\n            onClick={handleCreateGroup}\n            success\n          >\n            create\n          </button>\n          <hr />\n          <h3>Group Members</h3>\n        </div>\n      )}\n      {Object.keys(state.elements).map((a) => {\n        return (\n          <div className=\"d-flex m-2 p-2 justify-content-between align-items-center\">\n            <div className=\"d-flex align-items-center\">\n              <Widget src=\"mob.near/widget/Profile\" props={{ accountId: a }} />\n            </div>\n            <button\n              className=\"btn btn-danger m-1\"\n              disabled={!isNearAddress(a)}\n              onClick={() => removeElement(a)}\n            >\n              remove\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/create.group", "fact_widget_deployments_id": "e80d7fa244e51c2feb213ee71a794895", "inserted_timestamp": "2023-08-19T23:25:05.279Z", "modified_timestamp": "2023-08-19T23:25:05.279Z", "__row_index": 1}