{"tx_hash": "3Be4ZcoPoHmFBqAdSGLKXXZARhCjogpcPwQ7CpEqbX7f", "action_id_social": "6jE2Lz6SY2L4MYCqUtesYv35pLV9TtM2681jwFBTaUWw-0-widget", "block_id": 104125428, "block_timestamp": "2023-10-24T19:53:30.538Z", "signer_id": "hack.near", "widget_name": "VoteButton", "source_code": "const item = props.item;\n\nif (!item) {\n  return \"\";\n}\n\nuseEffect(() => {\n  State.update({ hasVote: null });\n}, [item]);\n\nconst votes = Social.index(\"vote\", item);\n\nconst dataLoading = votes === null;\n\nconst votesByUsers = {};\n\n(votes || []).forEach((vote) => {\n  if (vote.value.type === \"vote\") {\n    votesByUsers[vote.accountId] = vote;\n  } else if (vote.value.type === \"unvote\") {\n    delete votesByUsers[vote.accountId];\n  }\n});\n\nif (state.hasVote === true) {\n  votesByUsers[context.accountId] = {\n    accountId: context.accountId,\n  };\n} else if (state.hasVote === false) {\n  delete votesByUsers[context.accountId];\n}\n\nconst accountsWithVotes = Object.keys(votesByUsers);\nconst voteCount = accountsWithVotes.length;\nconst hasVote = context.accountId && !!votesByUsers[context.accountId];\n\nconst voteSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    stroke=\"currentColor\"\n    strokeWidth=\"0.5\"\n    viewBox=\"-2 -1 20 20\"\n    style={{ width: \"1.25em\" }}\n  >\n    <path d=\"M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z\" />\n  </svg>\n);\n\nconst voteFillSvg = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    stroke=\"currentColor\"\n    strokeWidth=\"0.5\"\n    viewBox=\"-2 -1 20 20\"\n    style={{ width: \"1.25em\" }}\n  >\n    <path d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\" />\n  </svg>\n);\n\nconst VoteButton = styled.div`\n  line-height: 20px;\n  min-height: 20px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: left;\n  background: inherit;\n  color: inherit;\n  font-size: 16px;\n  .icon {\n    position: relative;\n    &:before {\n      margin: -8px;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      border-radius: 50%;\n    }\n  }\n\n  .count {\n    margin-left: 8px;\n  }\n\n  &:not([disabled]) {\n    cursor: pointer;\n  }\n\n  &:not([disabled]):hover {\n    opacity: 1 !important;\n    color: #FFD700;\n\n    .icon:before {\n      background: rgba(255, 215, 0, 0.1);\n    }\n  }\n  .upvoted {\n    color: #FFD700;\n  }\n\n  .loading {\n    @keyframes scaleAnimation {\n     0%, 100% {\n        transform: scale(1) rotate(0deg);\n      }\n      25% {\n        transform: scale(1.2) rotate(-15deg);\n      }\n      50% {\n        transform: scale(1) rotate(0deg);\n      }\n      75% {\n        transform: scale(1.2) rotate(15deg);\n      }\n    }\n\n    transform-origin: center;\n    animation: scaleAnimation 1s ease-in-out infinite;\n  }\n`;\n\nconst voteClick = () => {\n  if (state.loading || dataLoading || !context.accountId) {\n    return;\n  }\n  State.update({\n    loading: true,\n  });\n  const type = hasVote ? \"unvote\" : \"vote\";\n  const data = {\n    index: {\n      vote: JSON.stringify({\n        key: item,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n\n  if (item.type === \"social\" && typeof item.path === \"string\") {\n    const keys = item.path.split(\"/\");\n    if (keys.length > 0) {\n      data.graph = {\n        vote: {},\n      };\n      let root = data.graph.vote;\n      keys.slice(0, -1).forEach((key) => {\n        root = root[key] = {};\n      });\n      root[keys[keys.length - 1]] = hasVote ? null : \"\";\n    }\n  }\n\n  if (!hasVote && props.notifyAccountId) {\n    data.index.notify = JSON.stringify({\n      key: props.notifyAccountId,\n      value: {\n        type,\n        item,\n      },\n    });\n  }\n  Social.set(data, {\n    onCommit: () => State.update({ loading: false, hasVote: !hasVote }),\n    onCancel: () => State.update({ loading: false }),\n  });\n};\n\nconst title = hasVote\n  ? props.titleUnvote ?? \"Unvote\"\n  : props.titleVote ?? \"Vote\";\n\nconst inner = (\n  <div className=\"d-inline-flex align-items-center\">\n    <VoteButton\n      disabled={state.loading || dataLoading || !context.accountId}\n      title={!props.tooltip ? title : undefined}\n      onClick={voteClick}\n    >\n      <span\n        className={`icon ${state.loading ? \"loading \" : \"\"}${\n          hasVote ? \"upvoted\" : \"\"\n        }`}\n      >\n        {hasVote ? voteFillSvg : voteSvg}\n      </span>\n      {voteCount > 0 && (\n        <span className={`count ${hasVote ? \"upvoted\" : \"\"}`}>\n          <Widget\n            loading={voteCount || \"\"}\n            src=\"mob.near/widget/N.Overlay.Faces\"\n            props={{ accounts: votesByUsers, limit: 10 }}\n          />\n        </span>\n      )}\n    </VoteButton>\n  </div>\n);\n\nreturn props.tooltip ? (\n  <OverlayTrigger\n    placement={props.overlayPlacement ?? \"auto\"}\n    overlay={<Tooltip>{title}</Tooltip>}\n  >\n    {inner}\n  </OverlayTrigger>\n) : (\n  inner\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/VoteButton", "fact_widget_deployments_id": "dab5e58247479f01cadfe16a1287eac1", "inserted_timestamp": "2023-10-24T21:44:29.251Z", "modified_timestamp": "2023-10-24T21:44:29.251Z", "__row_index": 2}