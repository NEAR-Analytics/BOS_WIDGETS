{"tx_hash": "DnyPnuk9zB7gZWJcZRh6Wv4pNyHpiereCWywWRQzBdTt", "action_id_social": "5hquK5sB18diCWtubct7LRoDEEmA327ZPxqp383NUwWa-0-widget", "block_id": 96965260, "block_timestamp": "2023-07-21T04:27:14.513Z", "signer_id": "hack.near", "widget_name": "form.account", "source_code": "const label = props.label ?? \"dao\";\nconst placeholder = props.placeholder ?? \"example.sputnik-dao.near\";\nconst value = props.value ?? \"\";\nconst onChange = props.onChange ?? (() => {});\nconst addInfo = props.addInfo ?? (() => {});\nconst accountIdRegex =\n  /^(([a-z\\d]+[\\-_])*[a-z\\d]+\\.)*([a-z\\d]+[\\-_])*[a-z\\d]+$/;\n\nState.init({\n  valid: true,\n  isAvailable: true,\n  isDao: false,\n  errorMessage: <></>,\n});\n\nconst canEdit = (accountId) => {\n  return Near.asyncView(\n    \"social.near\",\n    \"is_write_permission_granted\",\n    { predecessor_id: context.accountId, key: accountId },\n    \"final\",\n    false\n  );\n};\n\nconst daoId = state.name + \".sputnik-dao.near\";\nconst name = state.name;\n\nconst daos = Near.view(\"sputnik-dao.near\", \"get_dao_list\");\n\nif (daos === null) {\n  return \"Loading...\";\n}\n\nconst checkAvailability = (daos) => {\n  if (daos.indexOf(daoId) !== -1) {\n    return State.update({ isAvailable: false });\n  }\n};\n\nconst availableName = checkAvailability(daos);\n\nlet string = \"sputnik-dao.near\";\nlet domain = \".near\";\n\nconst checkDao = (daoId) => {\n  if (daoId.indexOf(string) !== -1) {\n    return State.update({ isDao: true });\n  }\n};\n\nconst validate = async () => {\n  if (typeof value !== \"string\") {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be a text value!\",\n    });\n    addInfo(false);\n    return;\n  }\n\n  if (value.length < 2) {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be at least 2 characters long!\",\n    });\n    addInfo(false);\n    return;\n  }\n\n  if (value.length > 64) {\n    State.update({\n      valid: false,\n      errorMessage: \"Account ID must be at most 64 characters long!\",\n    });\n    addInfo(false);\n    return;\n  }\n\n  if (!accountIdRegex.test(value)) {\n    State.update({\n      valid: false,\n      errorMessage: (\n        <>\n          Account ID must follow the rules specified{\" \"}\n          <a\n            href=\"https://nomicon.io/DataStructures/Account#account-id-rules\"\n            target=\"_blank\"\n          >\n            here\n          </a>\n          !\n        </>\n      ),\n    });\n    addInfo(false);\n    return;\n  }\n\n  canEdit(value).then((editPermission) => {\n    if (!editPermission) {\n      if (value !== context.accountId) {\n        State.update({\n          valid: false,\n          errorMessage: \"You do not have permission to edit this account!\",\n        });\n      }\n\n      State.update({ valid: true, errorMessage: \"\" });\n      addInfo(true);\n      return;\n    }\n\n    State.update({ valid: true, errorMessage: \"\" });\n    addInfo(false);\n  });\n};\n\nreturn (\n  <Widget\n    src=\"hack.near/widget/form.text\"\n    props={{\n      label,\n      placeholder,\n      value,\n      onChange,\n      validate,\n      error: state.errorMessage,\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/form.account", "fact_widget_deployments_id": "f1ecb142c1150e55250ca28a00310622", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 0}