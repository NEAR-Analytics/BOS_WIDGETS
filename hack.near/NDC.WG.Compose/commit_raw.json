{"tx_hash": "6J3UXDKh2L26sCvPcapH95ao25jAWpSf53E7Wvzhq5p1", "action_id_social": "76BGyv92eqMCwBiYZixFGLfJxZKogLruf8baRwVqsQrL-0-widget", "block_id": 99116054, "block_timestamp": "2023-08-18T21:06:29.248Z", "signer_id": "hack.near", "widget_name": "NDC.WG.Compose", "source_code": "const { handleClose } = props;\n\nlet SocialContract = \"social.near\";\n\nlet profileInfo = Social.getr(\n  `${props.accountId ?? context.accountId}/profile`\n);\n\nlet imageIsNFT = profileInfo.image.nft ? true : false;\nlet imageIsIpfs_cid = profileInfo.image.ipfs_cid ? true : false;\nlet imageIsUrl = profileInfo.image.url ? true : false;\nlet RealProfileImageAsURL = \"\";\n\nconst widgets = {\n  styledComponents: \"nomination.ndctools.near/widget/NDC.StyledComponents\",\n  groupInfo: \"hack.near/widget/NDC.WG.Compose.Group\",\n  groupMembers: \"hack.near/widget/NDC.WG.Compose.Members\",\n  page: \"hack.near/widget/NDC.WG.Page\",\n  tags: \"hack.near/widget/NDC.WG.Compose.Tags\",\n};\n\nif (imageIsNFT) {\n  let nftData = profileInfo.image.nft;\n  const getNftCid = Near.view(nftData.contractId, \"nft_token\", {\n    token_id: nftData.tokenId,\n  });\n\n  RealProfileImageAsURL =\n    \"https://nativonft.mypinata.cloud/ipfs/\" + getNftCid.metadata.media;\n  console.log(\"was nft\", RealProfileImageAsURL);\n}\n\nif (imageIsIpfs_cid) {\n  RealProfileImageAsURL =\n    \"https://nativonft.mypinata.cloud/ipfs/\" + profileInfo.image.ipfs_cid;\n  console.log(\"was ipfs\", RealProfileImageAsURL);\n}\n\nif (imageIsUrl) {\n  RealProfileImageAsURL = profileInfo.image.url;\n  console.log(\"was url\", RealProfileImageAsURL);\n}\n\nState.init({\n  theme,\n  img: {\n    uploading: \"false\",\n    url: RealProfileImageAsURL,\n    name: RealProfileImageAsURL ? \"Uploaded from Social Profile\" : \"\",\n  },\n  name: profileInfo.name ? profileInfo.name : \"\",\n  groupAccount: context.accountId ? \"@\" + context.accountId : \"\",\n  groupName: \"\",\n  members: [],\n  details: \"\",\n  agreement: \"false\",\n  tags: \"\",\n  error_msg: \"\",\n});\n\nconst CardStyled = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #f8f8f9;\n  gap: 10px;\n  padding: 25px;\n  margin: 0 auto;\n  border-radius: 10px;\n  overflow-y: scroll;\n`;\n\nconst CardForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: auto;\n`;\n\nconst H1 = styled.h1`\n  margin-bottom: 10px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 16px;\n`;\n\nconst Submitcontainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 16px;\n  @media only screen and (max-width: 480px) {\n    margin-top: 10px;\n  }\n`;\n\nconst HiddeableWidget = styled.div`\n  display: none;\n  @media (max-width: 480px) {\n    display: block;\n  }\n`;\n\nconst Modal = styled.div`\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.7);\n`;\n\nconst ComponentWrapper = styled.div`\n  display: flex;\n  width: 80%;\n  height: 80%;\n  flex-direction: column;\n  align-items: flex-start;\n  border-radius: 10px;\n  background: #fff;\n  border: 1px solid transparent;\n  margin: 140px auto auto auto;\n  @media only screen and (max-width: 480px) {\n    width: 90%;\n  }\n`;\n\nconst ErrorBlock = styled.div`\n  color: #c23f38;\n  font-size: 14px;\n  margin: 10px 0;\n`;\n\nconst Hr = styled.div`\n  height: 1px;\n  margin: 15px 0;\n  width: 100%;\n  background: rgba(208, 214, 217, 0.4);\n`;\n\nconst Section = styled.div`\n  margin: 12px 0;\n`;\n\nconst validatedInputs = () => {\n  const { img, name, groupAccount, groupName, members, agreement, tags } =\n    state;\n\n  const isEmpty = (str) => str.trim() === \"\";\n  const isFalse = (check) => check === \"false\";\n  let isValid = true;\n  let error_msg;\n\n  if (img.cid === null) isValid = false;\n  if (isEmpty(name)) isValid = false;\n  if (isEmpty(groupAccount)) isValid = false;\n  if (isEmpty(groupName)) isValid = false;\n  if (isEmpty(members)) isValid = false;\n  if (tags.split(\",\").length == 0) isValid = false;\n  if (isFalse(agreement)) isValid = false;\n  else {\n    isValid = false;\n  }\n\n  State.update({\n    error_msg: isValid\n      ? null\n      : error_msg || \"* Please complete all required fields.\",\n  });\n\n  return isValid;\n};\n\nconst uploadFileUpdateState = (body) => {\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body,\n  }).then(async (res) => {\n    const _cid = res.body.cid;\n    const _name = body.name;\n    State.update({ img: { uploading: \"true\", cid: _cid, name: _name } });\n  });\n};\n\nconst filesOnChange = (files) => {\n  if (files) {\n    State.update({ error_msg: null });\n    uploadFileUpdateState(files[0]);\n  }\n};\n\nconst handleName = (item) => State.update({ name: item, error_msg: null });\n\nconst handleProfile = (item) =>\n  State.update({ groupAccount: item, error_msg: null });\n\nconst addMember = () => {\n  var temp = state.members;\n  let object = {\n    memberId: \"\",\n    role: \"\",\n  };\n\n  if (temp.length === 6) return;\n\n  temp.push(object);\n  State.update({ members: temp, error_msg: null });\n};\n\nconst removeMember = (index) => {\n  State.update({\n    members: state.members.splice(index, 1),\n    error_msg: null,\n  });\n};\n\nconst validate = (key, item, limit) =>\n  State.update({ [key]: item.substring(0, limit ?? 2000), error_msg: null });\n\nconst validateMembers = (params, key, limit) => {\n  let data = state.members;\n\n  data[params.index][key] = params.event.target.value.substring(0, limit);\n  State.update({ members: data, error_msg: null });\n};\n\nconst handleDeclaration = (agreement) => {\n  State.update({ agreement: agreement.toString, error_msg: null });\n};\n\nconst handleCreate = () => {\n  if (!validatedInputs()) return;\n\n  let newstate = Object.assign({}, state);\n  newstate.members = JSON.stringify(newstate.af);\n  const stateAsString = JSON.stringify(newstate);\n  const data = ` {\"data\":{ \"${context.accountId}\": {\"groups\":${stateAsString}} }}`;\n  const SocialArgs = JSON.parse(data);\n\n  // let CreateGroup_Payload = {\n  //   contractName: daoId,\n  //   methodName: \"add_proposal\",\n  //   args: {},\n  //   gas: 300000000000000,\n  //   deposit: 100000000000000000000000,\n  // };\n\n  let Social_Payload = {\n    contractName: SocialContract,\n    methodName: \"set\",\n    args: SocialArgs,\n    gas: 300000000000000,\n    deposit: 100000000000000000000000,\n  };\n\n  Near.call([Social_Payload, CreatGroup_Payload]).then(() => handleClose());\n};\n\nreturn (\n  <Modal>\n    <ComponentWrapper>\n      <div\n        style={{\n          display: \"flex\",\n          \"justify-content\": \"center\",\n        }}\n      >\n        <HiddeableWidget>\n          <Widget\n            src={widgets.page}\n            props={{\n              groupData: {\n                img: {\n                  cid: state.img.cid,\n                  isCid: RealProfileImageCid.IS_CID,\n                },\n                groupAccount: state.groupAccount,\n                groupName: state.groupName,\n                members: state.members,\n                linktree: state.linktree,\n                details: state.details,\n                tags: state.tags,\n              },\n              profileData: {\n                name: state.name,\n              },\n              preview: true,\n            }}\n          />\n        </HiddeableWidget>\n      </div>\n      <CardStyled name=\"compose\">\n        <div className=\"d-flex flex-column \">\n          <CardForm>\n            <H1>Create Work Group</H1>\n            <Hr />\n            <Widget\n              src={widgets.groupInfo}\n              props={{\n                inputs: [\n                  {\n                    label: \"What is the NEAR account of your work group? *\",\n                    placeholder: \"Profile ID\",\n                    value: state.groupId,\n                    handleChange: (e) => validate(\"groupId\", e.target.value),\n                    inputType: \"text\",\n                  },\n                  {\n                    label: \"Additional Information\",\n                    placeholder: \"Elaborate on this work group. *\",\n                    value: state.details,\n                    handleChange: (e) => validate(\"details\", e.target.value),\n                  },\n                ],\n              }}\n            />\n            <Widget\n              src={widgets.groupMembers}\n              props={{\n                members: state.members,\n                addMember,\n                removeMember,\n                handleMemberAccount: (params) =>\n                  validateMembers(params, \"memberId\"),\n                handleMemberRole: (params) =>\n                  validateMembers(params, \"role\", 500),\n              }}\n            />\n\n            <Widget\n              src={widgets.tags}\n              props={{\n                agreement: state.agreement,\n                tags: state.tags,\n                handleTags: (e) => validate(\"tags\", e.target.value, 500),\n                handleDeclaration,\n              }}\n            />\n\n            {state.error_msg && (\n              <ErrorBlock>\n                <label className=\"text-danger\">{state.error_msg}</label>\n              </ErrorBlock>\n            )}\n\n            <div className=\"col-sm-12 px-4 w-100\">\n              <Submitcontainer>\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      className: \"danger \",\n                      text: \"Cancel\",\n                      onClick: handleClose,\n                    },\n                  }}\n                />\n                <Widget\n                  src={widgets.styledComponents}\n                  props={{\n                    Button: {\n                      text: \"Submit\",\n                      onClick: () => handleCreate(),\n                    },\n                  }}\n                />\n              </Submitcontainer>\n            </div>\n          </CardForm>\n        </div>\n      </CardStyled>\n    </ComponentWrapper>\n  </Modal>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/NDC.WG.Compose", "fact_widget_deployments_id": "00127d9d053828f1ce94446dc3e92a26", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}