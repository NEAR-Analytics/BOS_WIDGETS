{"tx_hash": "6J48vwLMzgA37ix1JxsCJDVTdPcSHWxsv1pUDiNmhZyJ", "action_id_social": "3EYLdEaWt3BWGFvp5UhvkSZptSReKUgibhGRA4Duuarv-0-widget", "block_id": 107153692, "block_timestamp": "2023-12-04T18:23:43.186Z", "signer_id": "hack.near", "widget_name": "tags.editor", "source_code": "// adapted from the `PublicTags` widget by zavodil.near\n\nconst accountId = props.accountId ?? context.accountId;\n\nconst initialPath = props.path ?? \"mob.near/widget/Explorer\";\nconst initialTagsObject = Social.get(\n  `*/graph/context/${initialPath}/tags/**`,\n  \"final\"\n);\n\nconst [state, setState] = useState({\n  showEditor: false,\n  path: initialPath,\n  tagsObject: initialTagsObject,\n  attestation: null,\n});\n\nconst [creatorId, namespace, thingId] = state.path.split(\"/\");\n\nconst normalizeTag = (tag) =>\n  tag\n    .replaceAll(/[- \\.]/g, \"_\")\n    .replaceAll(/[^\\w]+/g, \"\")\n    .replaceAll(/_+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n    .toLowerCase()\n    .trim(\"-\");\n\nconst fetchTagsObject = (path) => {\n  Social.get(\n    `*/graph/context/${path}/tags/**`,\n    \"final\",\n    (error, fetchedTagsObject) => {\n      if (error) {\n        console.error(\"Error fetching tagsObject:\", error);\n      } else {\n        setState((prevState) => ({\n          ...prevState,\n          tagsObject: fetchedTagsObject,\n        }));\n      }\n    }\n  );\n};\n\nuseEffect(() => {\n  fetchTagsObject(state.path);\n}, [state.path]);\n\nconst tagClass = \"bg-primary\";\nconst badgeBtnClass = \"text-white btn p-0 lh-1 m-1\";\n\n// const addContextHtml = (\n//   <a\n//     href={`#/hack.near/widget/catalog?accountId=${accountId}`}\n//     className={badgeBtnClass}\n//   >\n//     <div className={`me-1 mt-3 badge bg-primary`}>+ Tag</div>\n//   </a>\n// );\n\nconst currentTagsObject = Social.get(\n  `*/graph/context/${state.path}/tags/**`,\n  \"final\"\n);\n\nconst tagsCount = {};\nconst tagsAuthors = {};\n\nconst processTagsObject = (obj) => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] === null) {\n      const tag = key;\n      tagsCount[tag] = (tagsCount[tag] || 0) - 1;\n    } else if (typeof obj[key] === \"object\") {\n      processTagsObject(obj[key]);\n    } else {\n      const tag = key;\n      tagsCount[tag] = (tagsCount[tag] || 0) + 1;\n    }\n  });\n};\n\nconst getTags = () => {\n  processTagsObject(currentTagsObject);\n  const tags = Object.entries(tagsCount);\n  tags.sort((a, b) => b[1] - a[1]);\n  return tags.map((t) => {\n    return {\n      name: t[0],\n      count: t[1],\n    };\n  });\n};\n\nconst setTags = (tags) => {\n  const newTagsObject = {};\n\n  tags.forEach((tag) => {\n    newTagsObject[normalizeTag(tag.name)] = \"\";\n  });\n\n  setState((prevState) => ({\n    ...prevState,\n    tagsObject: {\n      ...prevState.tagsObject[creatorId][namespace][thingId].tags,\n      ...newTagsObject,\n    },\n  }));\n};\n\nconst tags = getTags();\n\nconst thingExists = Social.get(`${state.path}`, \"final\");\n\nreturn (\n  <>\n    <div className=\"m-2\">\n      <h3 className=\"m-1 mb-3\">Contextualizer</h3>\n      <div className=\"m-2\">\n        <p className=\"mb-1\">SocialDB Path of Anything:</p>\n        <input\n          placeholder=\"<creatorId>/<namespace>/<thingId>\"\n          value={state.path}\n          onChange={(e) =>\n            setState((prevState) => ({\n              ...prevState,\n              path: e.target.value,\n            }))\n          }\n        />\n      </div>\n\n      <button\n        class=\"btn btn-outline-secondary m-2\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#collapseExample\"\n        aria-expanded=\"false\"\n        aria-controls=\"collapseExample\"\n      >\n        Guide\n      </button>\n\n      <div className=\"collapse\" id=\"collapseExample\">\n        <div class=\"card card-body\">\n          <h5>Best Practices:</h5>\n          <ul>\n            <li>Keep tags concise and simple</li>\n            <li>Put \"-\" (minus) instead of a space</li>\n            <li>English words recommended</li>\n            <li>Do not create unnecessary tags</li>\n            <li>Be nice to everyone #community</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    {thingExists ? (\n      <div className=\"p-2 m-3\">\n        <div className=\"mb-2 card\">\n          <div className=\"card-body\">\n            <div className=\"text-truncate mb-3\">\n              <Widget\n                src=\"hack.near/widget/thing.block\"\n                props={{ path: state.path }}\n              />\n            </div>\n            {tags &&\n              tags.map((tag) => (\n                <a\n                  href={`/#/hack.near/widget/every.context?tag=${tag.name}`}\n                  className={badgeBtnClass}\n                  key={tag}\n                >\n                  <span\n                    className={`badge ${tagClass} position-relative`}\n                    style={\n                      tag.count > 1\n                        ? {\n                            marginRight: \"0.9em\",\n                            paddingRight: \"0.85em\",\n                          }\n                        : { marginRight: \"0.25em\" }\n                    }\n                  >\n                    #{tag.name}\n                    {tag.count > 1 && (\n                      <span\n                        className={`ms-1 badge translate-middle rounded-pill bg-dark position-absolute top-50 start-100`}\n                      >\n                        {tag.count}\n                      </span>\n                    )}\n                  </span>\n                </a>\n              ))}\n            <div className=\"m-2\">\n              {!state.showEditor ? (\n                <button\n                  onClick={() =>\n                    setState((prevState) => ({\n                      ...prevState,\n                      showEditor: true,\n                    }))\n                  }\n                  className={badgeBtnClass}\n                >\n                  <div className={`me-1 mt-3 badge bg-success`}>\n                    + attestation\n                  </div>\n                </button>\n              ) : (\n                <div className=\"mb-2\">\n                  <button\n                    onClick={() =>\n                      setState((prevState) => ({\n                        ...prevState,\n                        showEditor: false,\n                      }))\n                    }\n                    className=\"text-white btn p-0 lh-1 m-1\"\n                  >\n                    <div className={`me-1 mt-3 badge bg-secondary`}>\n                      x close\n                    </div>\n                  </button>\n                </div>\n              )}\n              {state.showEditor && (\n                <div>\n                  <div className=\"row\">\n                    <div className=\"m-1 col-8\">\n                      <Typeahead\n                        id={`tag-selector-${Date.now()}`}\n                        multiple\n                        labelKey=\"name\"\n                        onChange={setTags}\n                        options={tags}\n                        placeholder=\"dev, art, gov, edu, social, near\"\n                        positionFixed\n                        allowNew\n                      />\n                    </div>\n                    <div className=\"m-1 col-3\">\n                      <CommitButton\n                        disabled={state.tagsObject === null}\n                        data={{\n                          graph: {\n                            context: {\n                              [creatorId]: {\n                                [namespace]: {\n                                  [thingId]: state.tagsObject,\n                                },\n                              },\n                            },\n                          },\n                        }}\n                      >\n                        + context\n                      </CommitButton>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"m-1 col-8\">\n                      <input\n                        placeholder=\"source path of another thing\"\n                        onChange={(e) =>\n                          setState((prevState) => ({\n                            ...prevState,\n                            attestation: e.target.value,\n                          }))\n                        }\n                      />\n                    </div>\n                    <div className=\"m-1 col-3\">\n                      <Widget\n                        src=\"hack.near/widget/AttestButton\"\n                        props={{ item: state.path, data: state.attestation }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div className=\"p-2 m-3\">\n        <i>nothing found</i>\n      </div>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/tags.editor", "fact_widget_deployments_id": "5bbd3c463b4514eda2c22cbf5634a342", "inserted_timestamp": "2023-12-04T20:29:33.130Z", "modified_timestamp": "2023-12-20T03:22:11.422Z", "__row_index": 7}