{"tx_hash": "7xoG68AnfjzGiVUyXZReDvx1FZEWwkDoTSrxrXymtSw6", "action_id_social": "E3Y3t37doGb7rckp9Y95zQkdE8z8FjiCR7fW46dF7Yjs-0-widget", "block_id": 99631909, "block_timestamp": "2023-08-25T14:32:48.788Z", "signer_id": "hack.near", "widget_name": "group.add", "source_code": "const creatorId = props.creatorId ?? context.accountId;\n\nif (!creatorId) {\n  return \"Please connect your NEAR account :)\";\n}\n\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\n\nconst policy = Near.view(daoId, \"get_policy\");\n\nif (policy === null) {\n  return \"Loading...\";\n}\n\nconst deposit = policy.proposal_bond;\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nState.init({\n  groupId: props.groupId ?? \"\",\n  group,\n  members: { [creatorId]: \"\" },\n  newMember: \"\",\n});\n\nfunction addMember(newMember) {\n  State.update({\n    members: { ...state.members, [newMember]: \"\" },\n  });\n}\n\nfunction removeMember(memberKey) {\n  const updatedMembers = { ...state.members };\n  delete updatedMembers[memberKey];\n\n  State.update({\n    members: updatedMembers,\n  });\n}\n\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst memberId = props.memberId ?? state.newMember;\n\nconst isValid = isNearAddress(memberId);\n\nconst widgets = {\n  styledComponents: \"hack.near/widget/NDC.StyledComponents\",\n};\n\nconst handleCreate = () => {\n  const proposal_args = JSON.stringify({\n    data: {\n      [daoId]: {\n        groups: {\n          [state.groupId]: \"\",\n        },\n      },\n    },\n  });\n\n  const ProposalArgs = Buffer.from(proposal_args, \"utf-8\").toString(\"base64\");\n\n  let Proposal_Payload = {\n    contractName: daoId,\n    methodName: \"add_proposal\",\n    args: {\n      proposal: {\n        description: \"create group on the BOS\",\n        kind: {\n          FunctionCall: {\n            receiver_id: \"social.near\",\n            actions: [\n              {\n                method_name: \"set\",\n                args: ProposalArgs,\n                deposit: \"100000000000000000000000\",\n                gas: \"285000000000000\",\n              },\n            ],\n          },\n        },\n      },\n    },\n    deposit: deposit,\n    gas: \"219000000000000\",\n  };\n  Near.call([Proposal_Payload]);\n};\n\nreturn (\n  <>\n    <input\n      placeholder=\"Group ID\"\n      onChange={(e) => State.update({ groupId: e.target.value })}\n    />\n    <br />\n    <Widget\n      src={widgets.styledComponents}\n      props={{\n        Button: {\n          text: \"Submit\",\n          onClick: () => handleCreate(),\n        },\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/group.add", "fact_widget_deployments_id": "26961f085827c0f2eecf960b59941ed6", "inserted_timestamp": "2023-08-25T16:33:05.373Z", "modified_timestamp": "2023-08-25T16:33:05.373Z", "__row_index": 8}