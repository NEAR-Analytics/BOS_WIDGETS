{"tx_hash": "HRSAcMPKM8cZVivJc8sXGqrn7QTQXPcs9chuxWm445hi", "action_id_social": "8fAqSZXLgHkJJT5oFw1FpneKzHP6vjSrkKqLkeFDoKb2-0-widget", "block_id": 102680080, "block_timestamp": "2023-10-05T14:46:05.518Z", "signer_id": "hack.near", "widget_name": "community", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst groupId = props.groupId ?? \"f8ad9d1a76259lmdpjnd74e69162a0a014\";\nconst creatorId = props.creatorId ?? \"hack.near\";\n\nconst widgets = {\n  group: \"devs.near/widget/group.card\",\n  create: \"devs.near/widget/group.create\",\n  edit: \"devs.near/widget/group.edit\",\n};\n\n// We get all of the groups that have been indexed\nconst groups = Social.index(\"every\", \"group\", { limit: 10 });\n\n// TODO: We can put an infinite scroll for groups\n// And then we could do a Social.get([...groups]) constructed from each index\n\nif (!groups) {\n  return \"\";\n}\n\n// we check if they are a member ? Do we need this here?\n// Ohhhh you join everyone\nconst isMember = Social.keys(\n  `${accountId}/graph/${groupId}/${accountId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\nconst type = join ? \"leave\" : \"join\";\n\nconst handleJoin = () => {\n  Social.set({\n    graph: { [groupId]: { [accountId]: \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: groupId,\n        value: {\n          type,\n          accountId,\n        },\n      }),\n      notify: JSON.stringify({\n        key: creatorId, // in that case, who should the creator be?\n        value: {\n          type,\n          accountId,\n          message: \"everyone is growing!\",\n        },\n      }),\n    },\n  });\n};\n\nconst Container = styled.div`\n  padding: 23px 0;\n  margin: 0;\n\n  .top-right {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n  }\n\n  .bell-icon {\n    font-size: 23px;\n    color: #fff;\n    margin-left: 5px;\n    text-decoration: none;\n    transition: color 0.3s ease-in-out;\n  }\n\n  .bell-icon:hover {\n    color: #fff;\n  }\n\n  .bell-icon .bi-bell {\n    display: inline;\n  }\n\n  .bell-icon .bi-bell-fill {\n    display: none;\n  }\n\n  .bell-icon:hover .bi-bell {\n    display: none;\n  }\n\n  .bell-icon:hover .bi-bell-fill {\n    display: inline;\n  }\n`;\n\nconst Header = styled.div`\n  background: black;\n\n  .large-text {\n    font-size: 19px;\n    font-weight: 555;\n  }\n`;\n\nconst Navbar = styled.div`\n  margin-left: 20px;\n  @media only screen and (max-width: 1061px) {\n    margin: 10px 0 0 0;\n  }\n`;\n\nconst Center = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n  align-items: flex-start;\n`;\n\nconst GroupCard = styled.div`\n  flex-basis: calc(33.33% - 20px);\n  margin: 0;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n\n  @media (hover: none) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n`;\n\nconst { Feed } = VM.require(\"efiz.near/widget/Module.Feed\");\nFeed = Feed || (() => <></>);\n\nreturn (\n  <>\n    <Container>\n      <Header className=\"d-flex p-3 px-4 align-items-center rounded justify-content-between\">\n        <a href=\"/near/widget/ProfilePage?accountId=devs.near\">\n          <Widget\n            src=\"mob.near/widget/Image\"\n            props={{\n              image: {\n                url: \"https://pbs.twimg.com/profile_images/1690850854457204736/KUXVTpZt_400x400.png\",\n              },\n              alt: \"Near Builders\",\n              style: {\n                height: \"42px\",\n                objectFit: \"cover\",\n              },\n            }}\n          />\n        </a>\n        <div className=\"ms-auto me-0 me-md-2 d-flex align-items-center\">\n          <div className=\"top-right\">\n            <a\n              href={`/devs.near/widget/group.index?groupId=${groupId}`}\n              className=\"bell-icon\"\n            >\n              <i className=\"bi bi-bell\"></i>\n              <i className=\"bi bi-bell-fill\"></i>\n            </a>\n          </div>\n        </div>\n        <Navbar>\n          {/* What's the purpose of this?  */}\n          {true ? (\n            <button\n              onClick={() => State.update({ showModal: true })}\n              className=\"btn btn-success\"\n            >\n              create\n            </button>\n          ) : (\n            <button onClick={handleJoin} className=\"btn btn-success\">\n              start\n            </button>\n          )}\n        </Navbar>\n      </Header>\n      <Center className=\"px-2 px-md-3 d-flex flex-column justify-content-between w-100\">\n        <h4 className=\"mb-1 mt-5\">Discover Groups</h4>\n        <div className=\"row\">\n          <Feed\n            index={{\n              action: \"every\",\n              key: \"group\",\n              options: {\n                limit: 10,\n                order: \"desc\",\n                accountId: undefined,\n              },\n            }}\n            Item={(p) => {\n              return <Widget\n                key={p}\n                src={widgets.group}\n                props={{\n                  creatorId: p.accountId,\n                  groupId: p.value.id,\n                }}\n              />\n            }}\n            Layout={Grid}\n          />\n        </div>\n      </Center>\n    </Container>\n    {state.showModal && (\n      <Widget\n        src={widgets.create}\n        props={{\n          handleClose: () => State.update({ showModal: false }),\n        }}\n      />\n    )}\n    {state.showModalEdit && (\n      <Widget\n        src={widgets.edit}\n        props={{\n          group: state.group,\n          handleClose: () => State.update({ showModalEdit: false }),\n        }}\n      />\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/community", "fact_widget_deployments_id": "2df22f68fd975e935ca920b6a4fd818b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}