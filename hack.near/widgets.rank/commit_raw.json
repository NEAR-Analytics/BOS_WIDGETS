{"tx_hash": "DVVNGxUNoc47Wx8qmVS8womQ1aUXmDPpVMk9TxL642iH", "action_id_social": "7R4BiF2QTuJ2XQJtvu9s9oqXHqrt5S2BkYXCuvExfKW8-0-widget", "block_id": 96508167, "block_timestamp": "2023-07-15T05:41:52.042Z", "signer_id": "hack.near", "widget_name": "widgets.rank", "source_code": "const Container = styled.div`\n  .profile-image {\n    width: 120px;\n    height: 120px;\n  }\n\n  @media (max-width: 576px) {\n    .profile-image {\n      width: 160px;\n      height: 160px;\n    }\n  }\n`;\n\nconst widgetStarCount = {};\n\nconst data = Social.keys(\"*/graph/star/widget/*/*\", \"final\");\nif (!data) {\n  return \"Loading...\";\n}\n\nconsole.log(\"Data:\", data);\n\nlet widgets = Object.entries(data);\nconst limit = 888;\n\nconsole.log(\"Widgets:\", widgets);\n\nfor (let i = 0; i < widgets.length; ++i) {\n  let accountId = widgets[i][0];\n\n  Object.keys(widgets[i][1].graph.star.widget).forEach((creatorId) => {\n    Object.keys(widgets[i][1].graph.star.widget[creatorId]).forEach(\n      (widgetName) => {\n        let stars = Social.keys(\n          `*/graph/star/widget/${creatorId}/${widgetName}`,\n          \"final\",\n          {\n            return_type: \"BlockHeight\",\n            values_only: true,\n          }\n        );\n\n        console.log(\"Builder:\", creatorId);\n        console.log(\"Widget Name:\", widgetName);\n        console.log(\"Stars:\", stars);\n\n        if (stars) {\n          const widgetPath = `${creatorId}/widget/${widgetName}`;\n\n          if (widgetPath in widgetStarCount) {\n            // Increment the star count if the widget path already exists\n            widgetStarCount[widgetPath]++;\n          } else {\n            // Initialize the star count if the widget path is new\n            widgetStarCount[widgetPath] = 1;\n          }\n        }\n      }\n    );\n  });\n}\n\nconst limitedWidgetStarSort = Object.entries(widgetStarCount)\n  .sort((a, b) => b[1] - a[1])\n  .slice(0, limit);\n\nconsole.log(limitedWidgetStarSort);\n\nconst starButton = ({ widgetPath }) => {\n  return <Widget src=\"hack.near/widget/star.button\" props={{ widgetPath }} />;\n};\n\nreturn (\n  <Container>\n    <div className=\"d-flex flex-wrap align-items-center\">\n      <div className=\"m-3\">\n        <h3>\n          <b>All Stars</b> <i className=\"bi bi-bookmark-star\"></i>\n        </h3>\n      </div>\n      <div className=\"ms-auto me-0 me-md-2 d-flex align-items-center\">\n        <a href=\"#/hack.near/widget/GitBos\" className=\"text-muted m-2\">\n          <Widget\n            src=\"mob.near/widget/ProfileImage\"\n            props={{ accountId: \"academy.near\" }}\n            className=\"profile-image\"\n          />\n        </a>\n      </div>\n    </div>\n    <div className=\"m-3\">\n      <Widget\n        src=\"near/widget/AccountProfile\"\n        props={{ accountId: \"build.sputnik-dao.near\" }}\n      />\n    </div>\n    <br />\n    <div className=\"m-3\">\n      <h5>Explore Projects</h5>\n      <Widget\n        src=\"hack.near/widget/widget.search\"\n        props={{ extraButtons: starButton }}\n      />\n    </div>\n    {limitedWidgetStarSort.map((rank, index) => {\n      let widgetPath = rank[0];\n      let starCount = rank[1];\n      return (\n        <div className=\"m-3\">\n          <Widget\n            src=\"hack.near/widget/widget.inline\"\n            props={{ widgetPath: widgetPath, starCount }}\n          />\n        </div>\n      );\n    })}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/widgets.rank", "fact_widget_deployments_id": "991ec6745c1f76528b381fdff783fe2b", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 5}