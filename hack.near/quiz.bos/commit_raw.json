{"tx_hash": "8z1DXn85Ps5rSeYKdYxYHLkbJaWLt6c3PtMd75DU9JAK", "action_id_social": "GDTUSjAzWhLaohWQkHGkuiZipoWAaNzP8L2haNDQczSQ-0-widget", "block_id": 96402573, "block_timestamp": "2023-07-13T20:54:10.803Z", "signer_id": "hack.near", "widget_name": "quiz.bos", "source_code": "State.init({\n  answer: \"\",\n  showOptions: false,\n  answer1: \"\",\n  answer2: \"\",\n  answer3: \"\",\n  answer4: \"\",\n  optionA: \"\",\n  optionB: \"\",\n  optionC: \"\",\n});\n\nconst handleAnswer = (selectedAnswer) => {\n  State.update({\n    answer: selectedAnswer,\n    showOptions: true,\n  });\n};\n\nconst handleOptionA = (selectedOption) => {\n  State.update({\n    answer: selectedOption,\n    showOptions: false,\n  });\n};\n\nconst handleOptionB = (selectedOption) => {\n  State.update({\n    answer: selectedOption,\n    showOptions: false,\n  });\n};\n\nconst handleOptionC = (selectedOption) => {\n  State.update({\n    answer: selectedOption,\n    showOptions: false,\n  });\n};\n\nconst handleOptionD = (selectedOption) => {\n  State.update({\n    answer: selectedOption,\n    showOptions: false,\n  });\n};\n\nlet showQuestion2 = false;\nlet showQuestion3 = false;\nlet showQuestion4 = false;\nlet showQuestion5 = false;\n\nif (state.answer1.toLowerCase() === \"blockchain operating system\") {\n  showQuestion2 = true;\n}\n\nif (state.answer2.toLowerCase() === \"javascript\") {\n  showQuestion3 = true;\n}\n\nif (state.answer3 === \"hack.near/widget/quiz.bos\") {\n  showQuestion4 = true;\n}\n\nif (state.answer4.toLowerCase() === \"near\") {\n  showQuestion5 = true;\n}\n\nreturn (\n  <div>\n    <h1>BOS 101</h1>\n    <h3>Test Your Knowledge!</h3>\n    <h5>\n      First, read the <a href=\"https://docs.near.org/bos\">docs</a> \u22c8\n    </h5>\n    <hr />\n    <div>\n      <h4>Question 1:</h4>\n      <p>What does the \"BOS\" acronym stand for?</p>\n      <input\n        className=\"form-control\"\n        placeholder=\"Your answer goes here :)\"\n        defaultValue={state.answer1}\n        onChange={(e) => {\n          State.update({\n            answer1: e.target.value,\n          });\n        }}\n      />\n    </div>\n    <br />\n    {showQuestion2 && (\n      <div>\n        <h4>Question 2:</h4>\n        <p>What language is used to build on the BOS?</p>\n        <input\n          className=\"form-control\"\n          placeholder=\"Your answer goes here :)\"\n          defaultValue={state.answer2}\n          onChange={(e) => {\n            State.update({\n              answer2: e.target.value,\n            });\n          }}\n        />\n      </div>\n    )}\n    <br />\n    {showQuestion3 && (\n      <div>\n        <h4>Question 3:</h4>\n        <p>What is the path of this BOS component, which you are using now?</p>\n        <input\n          className=\"form-control\"\n          placeholder=\"Your answer goes here :)\"\n          defaultValue={state.answer3}\n          onChange={(e) => {\n            State.update({\n              answer3: e.target.value,\n            });\n          }}\n        />\n      </div>\n    )}\n    <br />\n    {showQuestion4 && (\n      <div>\n        <h4>Question 4:</h4>\n        <p>\n          Where is the code actually stored for decentralized apps on the BOS?\n        </p>\n        <input\n          className=\"form-control\"\n          placeholder=\"Your answer goes here :)\"\n          defaultValue={state.answer4}\n          onChange={(e) => {\n            State.update({\n              answer4: e.target.value,\n            });\n          }}\n        />\n      </div>\n    )}\n    {showQuestion5 && (\n      <div>\n        <h4>Question 5:</h4>\n        <p>Which is NOT 1 of the 3 core pillars of the BOS?</p>\n        <button onClick={() => handleAnswer(\"A\")}>Components</button>\n        <button onClick={() => handleAnswer(\"B\")}>Smart Contracts</button>\n        <button onClick={() => handleAnswer(\"C\")}>Gateways</button>\n        <button onClick={() => handleAnswer(\"D\")}>Blockchains</button>\n      </div>\n    )}\n    {state.showOptions && (\n      <div>\n        {state.answer === \"A\" && (\n          <div>\n            <h5>TRY AGAIN </h5>\n            <p>\n              Components are small web 3 applications that are stored entirely\n              on-chain. Developers can fork these apps and compose them to\n              create full web applications.\n            </p>\n          </div>\n        )}\n        {state.answer === \"B\" && (\n          <div>\n            <h5>CONGRATS \ud83c\udf89</h5>\n            <p>\n              Although BOS helps builders interact with smart contracts, they\n              are not considered one of the core pillars. However, you are just\n              now beginning a journey to understand the SocialDB contract...\n            </p>\n            <Widget\n              src=\"hack.near/widget/claim.badge\"\n              props={{ memberId: context.accountId }}\n            />\n          </div>\n        )}\n        {state.answer === \"C\" && (\n          <div>\n            <h5>TRY AGAIN</h5>\n            <p>\n              Components can call functions on any blockchain, with current\n              support for all EVM chains (e.g. Polygon, zkSync) and NEAR. The\n              source code for the apps is on NEAR, due to its ability to very\n              cheaply store HTML/CSS/JS (a few cents).\n            </p>\n          </div>\n        )}\n        {state.answer === \"D\" && (\n          <div>\n            <h5>TRY AGAIN</h5>\n            <p>\n              Gateways make locally-run, decentralized front-ends available to\n              the masses. A gateway consists of a specially designed virtual\n              machine that loads and runs frontends for protocols built on\n              Ethereum, L2s, and other Layer 1s like NEAR. The code for these\n              frontends is stored on the NEAR blockchain.\n            </p>\n          </div>\n        )}\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/quiz.bos", "fact_widget_deployments_id": "d7c8ff59bef7a6ecd0da039aff37b03c", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 3}