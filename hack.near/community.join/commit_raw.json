{"tx_hash": "4SWiPBgVaVPbcbaH3jGDkSAUhtYP8WKBbDHWWrioVEhy", "action_id_social": "H3qmf8MzHJSZefXm1GskZr1H3CEQTScwjELykkZBxcJp-0-widget", "block_id": 103712411, "block_timestamp": "2023-10-19T05:58:20.708Z", "signer_id": "hack.near", "widget_name": "community.join", "source_code": "const accountId = context.accountId;\nconst roleId = props.roleId ?? \"community\";\nconst daoId = props.daoId ?? \"build.sputnik-dao.near\";\nconst proposalId =\n  props.proposalId ?? Near.view(daoId, \"get_last_proposal_id\") - 1;\n\nif (!accountId) {\n  return \"\";\n}\n\nState.init({\n  isMember: false,\n});\n\n// get DAO policy, deposit, and group\nconst policy = Near.view(daoId, \"get_policy\");\n\nif (policy === null) {\n  return \"\";\n}\n\nconst deposit = policy.proposal_bond;\n\nconst group = policy.roles\n  .filter((role) => role.name === roleId)\n  .map((role) => role.kind.Group);\n\n// get data from last proposal\nconst proposal = Near.view(daoId, \"get_proposal\", {\n  id: proposalId,\n});\n\nif (proposal === null) {\n  return \"\";\n}\n\n// check if the potential member submitted last proposal\nconst canJoin = accountId && accountId !== proposal.proposer;\n\nconst handleJoin = () => {\n  Near.call([\n    {\n      contractName: daoId,\n      methodName: \"add_proposal\",\n      args: {\n        proposal: {\n          description: `add ${accountId} to the ${roleId} group`,\n          kind: {\n            AddMemberToRole: {\n              member_id: accountId,\n              role: roleId,\n            },\n          },\n        },\n      },\n      gas: 219000000000000,\n      deposit: deposit,\n    },\n  ]);\n};\n\nconst groupMembers = group.join(\", \");\n\nconst checkMembership = (groupMembers) => {\n  if (groupMembers.indexOf(accountId) !== -1) {\n    return State.update({ isMember: true });\n  }\n};\n\nconst validMember = checkMembership(groupMembers);\n\n// check if the potential member is a verified human\nlet human = false;\nconst userSBTs = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n  account: accountId,\n});\n\nfor (let i = 0; i < userSBTs.length; i++) {\n  if (\"fractal.i-am-human.near\" == userSBTs[i][0]) {\n    human = true;\n  }\n}\n\n// check if the potential member is connected\nconst connectEdge = Social.keys(\n  `${accountId}/graph/connect/${daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\n\nconst loading = connectEdge === null || inverseEdge === null;\nconst isConnected = connectEdge && Object.keys(connectEdge).length;\n\nreturn (\n  <div>\n    {!isConnected ? (\n      <Widget src=\"hack.near/widget/dao.connect\" />\n    ) : (\n      <>\n        {!validMember ? (\n          <>\n            {canJoin ? (\n              <button\n                className=\"btn btn-success m-1 rounded-5\"\n                onClick={handleJoin}\n              >\n                Join DAO\n              </button>\n            ) : (\n              <button\n                disabled={!canJoin}\n                className=\"btn btn-success m-1 rounded-5\"\n              >\n                Pending\n              </button>\n            )}\n          </>\n        ) : (\n          <button\n            disabled={validMember}\n            className=\"btn btn-success m-1 rounded-5\"\n          >\n            Joined\n          </button>\n        )}\n      </>\n    )}\n  </div>\n);\n", "metadata": {}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/community.join", "fact_widget_deployments_id": "1917a49d01c6980730708aa2c5a6b7f0", "inserted_timestamp": "2023-10-19T07:45:12.171Z", "modified_timestamp": "2023-10-19T07:45:12.171Z", "__row_index": 4}