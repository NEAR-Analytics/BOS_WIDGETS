{"tx_hash": "8N1gwgYZiq6n9DCUiUEqA9q7excv592mbkeXQs91SYMK", "action_id_social": "459d9jJfA8yQSmisXbNNumLWk4MFcRJcxXX1Zr6VZNgX-0-widget", "block_id": 100263587, "block_timestamp": "2023-09-02T23:53:01.573Z", "signer_id": "hack.near", "widget_name": "group.data", "source_code": "const creatorId = props.creatorId ?? context.accountId;\n\nif (!creatorId) {\n  return \"Please connect your NEAR account :)\";\n}\n\nconst groupId = props.groupId;\n\nconst initMembers = Social.get(`${creatorId}/graph/${groupId}/**`);\n\nState.init({\n  groupId,\n  group,\n  members: initMembers || { [context.accountId]: \"\" },\n  newMember: \"\",\n  exists: false,\n});\n\nfunction addMember(newMember) {\n  State.update({\n    members: { ...state.members, [newMember]: \"\" },\n  });\n}\n\nfunction removeMember(memberKey) {\n  const updatedMembers = { ...state.members };\n  delete updatedMembers[memberKey];\n\n  State.update({\n    members: updatedMembers,\n  });\n}\n\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst memberId = props.memberId ?? state.newMember;\n\nconst isValid = isNearAddress(memberId);\n\nconst groupData = Social.get(`${creatorId}/graph/${state.groupId}/**`);\n\nif (groupData) {\n  State.update({ exists: true });\n}\n\nconst groupMembers = Social.get(`${creatorId}/graph/${state.groupId}/**`);\n\nif (groupMembers) {\n  State.update({ exists: true });\n}\n\nconst handleCreate = () => {\n  let Group_Payload = {\n    contractName: \"social.near\",\n    methodName: \"set\",\n    args: {\n      data: {\n        [creatorId]: {\n          thing: {\n            [state.groupId]: {\n              ...state.group,\n              members: { ...state.members },\n            },\n          },\n          graph: {\n            [state.groupId]: {\n              ...state.members,\n            },\n          },\n        },\n      },\n    },\n    gas: 300000000000000,\n    deposit: 100000000000000000000000,\n  };\n\n  Near.call(Group_Payload).then(() => handleClose());\n};\n\nreturn (\n  <>\n    <div className=\"row\">\n      <div className=\"col-lg-6 mt-2\">\n        <h5>Edit Group</h5>\n        <input\n          placeholder=\"groupId\"\n          onChange={(e) => State.update({ groupId: e.target.value })}\n        />\n        {state.exists && (\n          <>\n            <div className=\"mt-3\">\n              <Widget\n                src=\"hack.near/widget/group.card\"\n                props={{ groupId: state.groupId }}\n              />\n            </div>\n            <div className=\"mt-3\">\n              <button className=\"btn btn-success me-2\" onClick={handleCreate}>\n                Update\n              </button>\n              <button\n                className=\"btn btn-secondary me-2\"\n                href={`/hack.near/widget/group?groupId=${state.groupId}`}\n              >\n                View Group\n              </button>\n            </div>\n          </>\n        )}\n\n        {state.exists && (\n          <div className=\"mb-2 mt-3\">\n            <Widget\n              src=\"near/widget/MetadataEditor\"\n              props={{\n                initialMetadata: group,\n                onChange: (group) => State.update({ group }),\n                options: {\n                  name: { label: \"Name\" },\n                  image: { label: \"Logo\" },\n                  description: { label: \"About\" },\n                  tags: {\n                    label: \"Tags\",\n                    tagsPattern: `*/${groupId}/tags/*`,\n                    placeholder: \"art, gov, edu, dev, com, nft, ai, social\",\n                  },\n                  linktree: {\n                    links: [\n                      {\n                        label: \"Twitter\",\n                        prefix: \"https://twitter.com/\",\n                        name: \"twitter\",\n                      },\n                      {\n                        label: \"Github\",\n                        prefix: \"https://github.com/\",\n                        name: \"github\",\n                      },\n                      {\n                        label: \"Telegram\",\n                        prefix: \"https://t.me/\",\n                        name: \"telegram\",\n                      },\n                      {\n                        label: \"Website\",\n                        prefix: \"https://\",\n                        name: \"website\",\n                      },\n                    ],\n                  },\n                },\n              }}\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"col-lg-6\">\n        {state.exists && (\n          <>\n            <div>\n              <h5>Account ID</h5>\n              <input\n                placeholder=\"<example>.near\"\n                onChange={(e) => State.update({ newMember: e.target.value })}\n              />\n              <div className=\"d-flex align-items-center mt-2\">\n                <button\n                  className=\"btn btn-primary m-2\"\n                  onClick={() => addMember(state.newMember)}\n                >\n                  add\n                </button>\n              </div>\n            </div>\n            <hr />\n            <div>\n              <h5>Members</h5>\n              {initMembers ? (\n                <div>\n                  {Object.keys(state.members).map((a) => {\n                    return (\n                      <div className=\"d-flex m-2 p-2 justify-content-between align-items-center\">\n                        <div className=\"d-flex align-items-center\">\n                          <Widget\n                            src=\"mob.near/widget/Profile\"\n                            props={{ accountId: a }}\n                          />\n                        </div>\n                        <button\n                          className=\"btn btn-danger m-1\"\n                          disabled={!isNearAddress(a)}\n                          onClick={() => removeMember(a)}\n                        >\n                          remove\n                        </button>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div>\n                  {Object.keys(groupMembers).map((a) => {\n                    return (\n                      <div className=\"d-flex m-2 p-2 justify-content-between align-items-center\">\n                        <div className=\"d-flex align-items-center\">\n                          <Widget\n                            src=\"mob.near/widget/Profile\"\n                            props={{ accountId: a }}\n                          />\n                        </div>\n                        <button\n                          className=\"btn btn-danger m-1\"\n                          disabled={!isNearAddress(a)}\n                          onClick={() => removeMember(a)}\n                        >\n                          remove\n                        </button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/group.data", "fact_widget_deployments_id": "d5f52e184bfb7919a09b837793fd7af7", "inserted_timestamp": "2023-09-03T01:40:10.996Z", "modified_timestamp": "2023-09-03T01:40:10.996Z", "__row_index": 8}