{"tx_hash": "GFaVMeuv8XMtWNXWvjNgZqsSh3TZaxiZtCJ9DSrgj28Y", "action_id_social": "GHX33AhcGYTtbyTdYH1EnLqvuVjDp2M88tVxBSMkENrG-0-widget", "block_id": 114033922, "block_timestamp": "2024-03-03T20:30:42.898Z", "signer_id": "hack.near", "widget_name": "SocialGraph.Lens", "source_code": "const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { LensSDK } = $(\"@sdks/lens-sdk\");\n\nLensSDK = new LensSDK(State, state);\n\nconst [accountIds, setAccountIds] = useState(\n  props.accountIds || [\"lens/builders\", \"lens/mattb\"]\n);\n\nconst [followers, setFollowers] = useState(null);\n\nconst getFollowers = () => {\n  const followers = accountIds.map((accountId) => {\n    return LensSDK.profile.followers({ of: accountId });\n  });\n  Promise.all(followers).then((data) => {\n    setFollowers(\n      data.map((followerInfo, index) => {\n        return {\n          handle: accountIds[index],\n          followers: followerInfo.followers,\n        };\n      })\n    );\n  });\n};\n\nuseEffect(() => {\n  LensSDK.profile\n    .fetchAll({ where: { handles: accountIds } })\n    .then(({ profiles }) => {\n      setFollowers(profiles);\n    });\n}, []);\n\nconst [nodesState, setNodesState] = useState(null);\nconst [selectedAccountId, setSelectedAccountId] = useState(null);\nconst debug = false;\n\nuseEffect(() => {\n  setNodesState(data);\n}, [data]);\n\nconst [message, setMessage] = useState(null);\n\nuseEffect(() => {\n  if (!nodesState) {\n    return;\n  }\n\n  const nodes = {};\n  const edges = [];\n\n  const createNodesAndEdges = (accountId, profileData) => {\n    if (!(accountId in nodes)) {\n      nodes[accountId] = {\n        id: accountId,\n        size: 10,\n      };\n    }\n    Object.values(profileData).forEach((links) => {\n      console.log(profileData);\n      Object.keys(links).forEach((memberId) => {\n        if (!(memberId in nodes)) {\n          nodes[memberId] = {\n            id: memberId,\n            size: 10,\n          };\n        }\n        edges.push({\n          source: accountId,\n          target: memberId,\n          value: 1,\n        });\n      });\n    });\n  };\n\n  if (accountIds.length === 1) {\n    const accountId = accountIds[0];\n    createNodesAndEdges(accountId, { [graphId]: nodesState });\n  } else if (accountIds.length > 1) {\n    Object.entries(nodesState).forEach(([accountId, profileData]) => {\n      createNodesAndEdges(accountId, data);\n    });\n  }\n  console.log(\"nodes\", nodes);\n  console.log(\"edges\", edges);\n\n  setMessage({\n    nodes: Object.values(nodes),\n    edges,\n  });\n}, [nodesState, accountIds]);\n\nuseEffect(() => {\n  if (selectedAccountId) {\n    if (accountIds.includes(selectedAccountId)) {\n      setAccountIds(accountIds.filter((it) => it !== selectedAccountId));\n    } else {\n      setAccountIds([...accountIds, selectedAccountId]);\n    }\n  }\n  setSelectedAccountId(null);\n}, [selectedAccountId]);\n\nconst code = `\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n\n<!-- Load d3.js -->\n<script src=\"https://d3js.org/d3.v6.js\"></script>\n\n<svg id=\"graph\"></svg>\n\n<script>\n\nconst run = (data) => {\n  const width = 1080;\n  const height = 768;\n  let dragIsOn = false;\n\n  // The force simulation mutates links and nodes, so create a copy\n  // so that re-evaluating this cell produces the same result.\n  const links = data.edges.map(d => ({...d}));\n  const nodes = data.nodes.map(d => ({...d}));\n\n  // Create a simulation with several forces.\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id(d => d.id))\n      .force(\"charge\", d3.forceManyBody())\n      .force(\"collide\", d3.forceCollide())\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\n      .on(\"tick\", ticked);\n\n  simulation.force(\"collide\")\n        .strength(.7)\n        .radius(d => Math.sqrt(d.size) + 5)\n        .iterations(1);\n\n  // Create the SVG container.\n  const svg = d3.select(\"#graph\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Add a line for each link, and a circle for each node.\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", \"#999\")\n      .attr(\"stroke-opacity\", 0.6)\n    .selectAll()\n    .data(links)\n    .join(\"line\")\n      .attr(\"stroke-width\", 1);\n\n  const node = svg.append(\"g\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll()\n    .data(nodes)\n    .join(\"g\");\n\n  node\n    .append(\"image\")\n    .attr(\"xlink:href\", (d) => \\`https://i.near.social/magic/thumbnail/https://near.social/magic/img/account/\\${d.id}\\`) // Set the image URL based on your data\n    .attr(\"x\", (d) => -Math.sqrt(d.size) - 5)\n    .attr(\"y\", (d) => -Math.sqrt(d.size) - 5)\n    .attr(\"clip-path\", d => \\`circle(\\${Math.sqrt(d.size) + 5}px at \\${Math.sqrt(d.size) + 5} \\${Math.sqrt(d.size) + 5})\\`)\n    .attr(\"width\", (d) => 2 * Math.sqrt(d.size) + 10);\n\n  node\n    .append(\"circle\")\n    .attr(\"r\", d => Math.sqrt(d.size) + 5)\n    .attr(\"fill\", \"none\");\n\n  node.append(\"title\")\n      .text(d => d.id);\n\n  // Add a drag behavior.\n  node.call(d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended));\n\n  node.on(\"mouseover\", handleMouseOver)\n     .on(\"mouseout\", handleMouseOut)\n     .on(\"click\", handleMouseClick);\n\n  function handleMouseClick(e) {\n    const d = e.target.__data__;\n    window.top.postMessage(d.id, \"*\");\n  }\n\n  function handleMouseOver(d) {\n    d = d.target.__data__;\n    // Highlight connected edges\n    link.attr(\"stroke-opacity\", e => (e.source === d || e.target === d) ? 1 : 0.1);\n\n    // Highlight connected nodes\n    node.attr(\"opacity\", function (n) {\n        return n === d || isConnected(d, n) ? 1: 0.3;\n    });\n}\n\nfunction handleMouseOut() {\n  if (dragIsOn) {\n    return;\n  }\n    // Reset edge and node styles\n    link\n      .attr(\"stroke-opacity\", 0.6);\n    node.attr(\"opacity\", 1);\n}\n\nfunction isConnected(a, b) {\n    // Check if two nodes are connected\n    return links.some(function (link) {\n        return (link.source === a && link.target === b) || (link.source === b && link.target === a);\n    });\n}\n\n  // Set the position attributes of links and nodes each time the simulation ticks.\n  function ticked() {\n    link\n        .attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n\n    node.attr(\"transform\", d => \\`translate(\\${d.x}, \\${d.y})\\`)\n  }\n\n  // Reheat the simulation when drag starts, and fix the subject position.\n  function dragstarted(event) {\n    dragIsOn = true;\n    if (!event.active) simulation.alphaTarget(0.3).restart();\n    event.subject.fx = event.subject.x;\n    event.subject.fy = event.subject.y;\n\n  }\n\n  // Update the subject (dragged node) position during drag.\n  function dragged(event) {\n    event.subject.fx = event.x;\n    event.subject.fy = event.y;\n  }\n\n  // Restore the target alpha so the simulation cools after dragging ends.\n  // Unfix the subject position now that it\u2019s no longer being dragged.\n  function dragended(event) {\n    if (!event.active) simulation.alphaTarget(0);\n    event.subject.fx = null;\n    event.subject.fy = null;\n    dragIsOn = false;\n    handleMouseOut();\n  }\n\n  // When this cell is re-run, stop the previous simulation. (This doesn\u2019t\n  // really matter since the target alpha is zero and the simulation will\n  // stop naturally, but it\u2019s a good practice.)\n  // invalidation.then(() => simulation.stop());\n\n  return simulation;\n};\n\nlet simulation = null;\n\nwindow.addEventListener(\"message\", (event) => {\n  if (simulation) {\n    simulation.stop();\n    d3.select(\"#graph\").selectAll(\"*\").remove();\n  }\n  if (event.data) {\n    simulation = run(event.data);\n  }\n});\n\n</script>\n`;\n\nconst [onMessage] = useState(() => {\n  return (data) => {\n    if (data) {\n      setSelectedAccountId(data);\n    }\n  };\n});\n\nreturn (\n  <div>\n    <button onClick={getFollowers}>Get Followers</button>\n    <p>{JSON.stringify(followers)}</p>\n    <div>\n      <iframe\n        className=\"w-100 h-100\"\n        style={{ minHeight: \"888px\" }}\n        srcDoc={code}\n        message={message}\n        onMessage={onMessage}\n      />\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hack.near/widget/SocialGraph.Lens", "fact_widget_deployments_id": "de9f9a05aec2d8c497a8997a3e294039", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}