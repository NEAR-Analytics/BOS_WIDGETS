{"tx_hash": "HfsnrQJx2jSthuYhaJQyFLjBWavwdTtG61gtT1Ua2mbj", "action_id_social": "38XJXUqLgVnfhRZbvYW3pyGTE2tKXaEF9RwY5YKeCrgA-0-widget", "block_id": 115491230, "block_timestamp": "2024-03-26T05:26:36.931Z", "signer_id": "slimedragon.near", "widget_name": "Memecoins", "source_code": "const memes = [\n  { tokenId: \"intel.tkn.near\", poolId: 4663 },\n  { tokenId: \"blackdragon.tkn.near\", poolId: 4276 },\n  { tokenId: \"token.lonkingnearbackto2024.near\", poolId: 4314 },\n  { tokenId: \"ftv2.nekotoken.near\", poolId: 3807 },\n  { tokenId: \"slush.tkn.near\", poolId: 4623 },\n  { tokenId: \"ndc.tkn.near\", poolId: 4434 },\n  { tokenId: \"nearnvidia.near\", poolId: 4547 },\n  { tokenId: \"bean.tkn.near\", poolId: 4472 },\n];\n\nfunction getNearPrice() {\n  const NEAR_USDT_POOL = 3;\n  const NEAR_DECIMALS = 24;\n  const USDT_DECIMALS = 6;\n  const NEAR_TOKEN_ID = \"wrap.near\";\n\n  return new Promise((resolve, reject) => {\n    const REF_CONTRACT_ID = \"v2.ref-finance.near\";\n    Near.asyncView(REF_CONTRACT_ID, \"get_pool\", {\n      pool_id: NEAR_USDT_POOL,\n    }).then((pool) => {\n      const nearIndex = pool.token_account_ids.indexOf(NEAR_TOKEN_ID);\n      const usdtIndex = 1 - nearIndex;\n      const nearInPool = ethers.BigNumber.from(pool.amounts[nearIndex]);\n      const usdtInPool = ethers.BigNumber.from(pool.amounts[usdtIndex]);\n      const nearHumanReadable =\n        nearInPool\n          .mul(ethers.BigNumber.from(100))\n          .div(\n            ethers.BigNumber.from(10).pow(ethers.BigNumber.from(NEAR_DECIMALS))\n          )\n          .toNumber() / 100;\n      const usdtHumanReadable =\n        usdtInPool\n          .mul(ethers.BigNumber.from(100))\n          .div(\n            ethers.BigNumber.from(10).pow(ethers.BigNumber.from(USDT_DECIMALS))\n          )\n          .toNumber() / 100;\n      resolve(usdtHumanReadable / nearHumanReadable);\n    });\n  });\n}\n\nfunction getMarketCap(tokenId, poolId) {\n  const REF_CONTRACT_ID = \"v2.ref-finance.near\";\n  const NEAR_DECIMALS = 24;\n  const NON_CIRCULATING_ADDRESSES = [\n    \"0\".repeat(64),\n    \"staking.paras.near\",\n    \"cex-nearnvidia.near\",\n    \"lp-nearnvidia.near\",\n    \"nftstaking.jumpfinance.near\",\n    \"beanlabs-marketing.near\",\n    \"beanlabs.near\",\n    \"beanlabs-airdrop.near\",\n    \"beanlabs-team.near\",\n    \"creators.nekotoken.near\",\n    \"cookie.nekotoken.near\",\n    \"minigame.nekotoken.near\",\n    \"coreteam.nekotoken.near\",\n    \"launchpad.jumpfinance.near\",\n    \"distributions.nekotoken.near\",\n  ];\n\n  return new Promise((resolve, reject) => {\n    const decimals = Near.view(tokenId, \"ft_metadata\", {}).decimals;\n    const totalSupply = ethers.BigNumber.from(\n      Near.view(tokenId, \"ft_total_supply\", {})\n    );\n    const nonCirculatingPromises = NON_CIRCULATING_ADDRESSES.map((address) =>\n      Near.asyncView(tokenId, \"ft_balance_of\", { account_id: address })\n    );\n    Promise.all(nonCirculatingPromises).then((nonCirculating) => {\n      const notInCirculation = nonCirculating.reduce(\n        (acc, balance) => acc.add(balance),\n        ethers.BigNumber.from(0)\n      );\n      const circulatingSupply = totalSupply\n        .sub(notInCirculation)\n        .div(ethers.BigNumber.from(10).pow(ethers.BigNumber.from(decimals)));\n      Near.asyncView(REF_CONTRACT_ID, \"get_pool\", {\n        pool_id: poolId,\n      }).then((pool) => {\n        const tokenIndex = pool.token_account_ids.indexOf(tokenId);\n        const nearIndex = 1 - tokenIndex;\n        const tokenInPool = ethers.BigNumber.from(pool.amounts[tokenIndex]).div(\n          ethers.BigNumber.from(10).pow(ethers.BigNumber.from(decimals))\n        );\n        const nearInPool = ethers.BigNumber.from(pool.amounts[nearIndex]).div(\n          ethers.BigNumber.from(10).pow(ethers.BigNumber.from(NEAR_DECIMALS))\n        );\n        if (tokenId === \"ndc.tkn.near\") {\n          console.log(tokenInPool, nearInPool);\n        }\n        const tokenCapInNear = nearInPool\n          .mul(circulatingSupply)\n          .div(tokenInPool);\n        getNearPrice().then((nearPrice) => {\n          resolve(tokenCapInNear.toNumber() * nearPrice);\n        });\n      });\n    });\n  });\n}\n\nconst [marketCaps, setMarketCaps] = useState([]);\n\nPromise.all(\n  memes.map(\n    ({ tokenId, poolId }) =>\n      new Promise((resolve, reject) => {\n        const metadata = Near.view(tokenId, \"ft_metadata\");\n        getMarketCap(tokenId, poolId).then((marketCap) => {\n          resolve({\n            tokenSymbol: metadata.symbol,\n            marketCap,\n          });\n        });\n      })\n  )\n).then((result) =>\n  setMarketCaps(result.sort((a, b) => b.marketCap - a.marketCap))\n);\n\nreturn (\n  <>\n    <h1>Top memecoins by market cap</h1>\n    <ol>\n      {marketCaps.map(({ tokenSymbol, marketCap }) => {\n        const metadata = Near.view(tokenId, \"ft_metadata\");\n        return (\n          <li>\n            {tokenSymbol}: ${marketCap.toFixed(2)}\n          </li>\n        );\n      })}\n    </ol>\n    <p>\n      Doesn&apos;t include SHITZU, UWON, and BENDOG because they exist on other\n      chains.\n    </p>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/slimedragon.near/widget/Memecoins", "fact_widget_deployments_id": "6494bebda16deb9a1eca836bdfd1de0e", "inserted_timestamp": "2024-03-26T06:30:34.481Z", "modified_timestamp": "2024-03-26T07:30:08.139Z", "__row_index": 2}