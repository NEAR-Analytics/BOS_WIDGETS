{"tx_hash": "BFXQP4vxUtwQtcG5LbJzoBu5u4XXtJZv3yGVpxG2nasU", "action_id_social": "5b285YrdnZmFsaVFUryBUvwkzqVULvThWiXqGWd9zwYk-0-widget", "block_id": 115179179, "block_timestamp": "2024-03-21T20:14:34.970Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Assisterr-eth-denver-widget-v10", "source_code": "const { href } = VM.require(\"devhub.near/widget/core.lib.url\");\nconst listLink = href({\n  widgetSrc: `near/widget/AI.Nexus`,\n});\n\nconst [question, setQuestion] = useState(\"\");\nconst [loading, setLoading] = useState(false);\nconst [messages, setMessages] = useState([]);\nconst [settingsOpen, setSettingsOpen] = useState(false);\nconst [credential, setCredential] = useState(storedCredential ?? \"\");\n\nconst { src, embedded } = props;\n\nconst [accountId, agentType, agentName] = src.split(\"/\") ?? [null, null, null];\nconst blockHeight = blockHeight ?? \"final\";\n\nconst data = Social.getr(`${accountId}/agent/${agentName}`, blockHeight);\nconst agent = { accountId, name: agentName, ...data };\n\nif (!data) return \"Loading...\";\n\nconst toggleSettings = () => {\n  setSettingsOpen(!settingsOpen);\n};\n\nuseEffect(() => {\n  Storage.set(\"agent-credential\", credential);\n}, [credential]);\n\nconst submitQuestion = () => {\n  setLoading(true);\n  asyncFetch(\"https://backend.denver-eth.assisterr.ai/chat-completion\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"OpenAI-API-Key\": credential,\n    },\n    responseType: \"json\",\n    body: JSON.stringify({\n      prompt: question,\n    }),\n  })\n    .then((response) => {\n      if (response.status === 200) {\n        const answer = response.body.response;\n        setMessages(answer);\n        return answer;\n      } else {\n        throw new Error(`Request failed with status ${response.status}`);\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error fetching data:\", error);\n    })\n    .finally(() => {\n      setLoading(false);\n      setQuestion(\"\");\n    });\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  padding: 48px;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 1em;\n`;\n\nconst Header = styled.h1`\n  font-size: 24px;\n  line-height: 39px;\n  color: #11181c;\n  margin-bottom: 20px;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  line-height: 20px;\n  color: ${(p) => (p.bold ? \"#11181C\" : \"#687076\")};\n  font-weight: ${(p) => (p.bold ? \"600\" : \"400\")};\n  font-size: ${(p) => (p.small ? \"12px\" : \"14px\")};\n\n  i {\n    margin-right: 4px;\n  }\n`;\nconst Prompt = styled.p`\n  font-family: monospace;\n  font-size: 14px;\n  overflow-y: auto;\n  height: 100px;\n`;\nconst Label = styled.span`\n  font-weight: 600;\n`;\nconst Settings = styled.div`\n  margin-bottom: 1em;\n  z-index: 1000;\n`;\nconst Controls = styled.div`\n  margin-bottom: 1em;\n`;\nconst CardControl = styled.div`\n  cursor: pointer;\n  color: var(--violet8);\n  margin-bottom: 1em;\n`;\nconst AllSettings = styled.div``;\nconst InputWrapper = styled.div`\n  padding-bottom: 1em;\n`;\nconst Question = styled.input`\n  border-top-left-radius: 2rem;\n  border-bottom-left-radius: 2rem;\n`;\nconst UserMessage = styled.div``;\nconst AgentMessage = styled.div`\n  background-color: #f9f9f9;\n`;\n\nconst renderSettings = () => {\n  return (\n    <Settings>\n      <CardControl bold onClick={toggleSettings}>\n        <i className={settingsOpen ? \"ph ph-caret-up\" : \"ph ph-caret-down\"} />{\" \"}\n        Settings\n      </CardControl>\n      {settingsOpen && (\n        <AllSettings>\n          <InputWrapper>\n            <div className=\"row\">\n              <div className=\"col\">\n                <Widget\n                  src=\"near/widget/DIG.Input\"\n                  props={{\n                    label: \"Credentials\",\n                    assistiveText:\n                      \"Your OpenAI API Key or other credentials, will be stored in your browser.\",\n                    iconLeft: \"ph-bold ph-identification-card\",\n                    onInput: (e) => setCredential(e.target.value),\n                    value: credential,\n                    type: \"password\",\n                  }}\n                />\n              </div>\n            </div>\n          </InputWrapper>\n        </AllSettings>\n      )}\n    </Settings>\n  );\n};\n\nreturn (\n  <Wrapper>\n    <div>\n      {!embedded && (\n        <div>\n          <Link to={listLink}>\n            <Header>\n              <i className=\"ph ph-arrow-left\" />\n              Agent List\n            </Header>\n          </Link>\n          <Overview>\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <Widget\n                  src=\"near/widget/AI.Agent.AgentSummary\"\n                  props={{\n                    size: \"small\",\n                    showTags: true,\n                    agent: agent,\n                  }}\n                />\n              </div>\n              <div className=\"col-7\">\n                <Prompt>\n                  <Label>Description:</Label> <Markdown text={data.prompt} />\n                </Prompt>\n              </div>\n            </div>\n          </Overview>\n        </div>\n      )}\n      <Controls>\n        <div className=\"input-group\">\n          <Question\n            type=\"text\"\n            className=\"form-control\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                submitQuestion();\n              }\n            }}\n            placeholder=\"What's your question?\"\n            autoFocus\n          />\n          <Widget\n            src=\"near/widget/DIG.Button\"\n            props={{\n              onClick: submitQuestion,\n              iconLeft: editIcon,\n              variant: \"affirmative\",\n              fill: \"solid\",\n              size: \"large\",\n              label: \"Submit\",\n              disabled: credential === \"\",\n              style: {\n                borderTopLeftRadius: \"0rem\",\n                borderBottomLeftRadius: \"0rem\",\n              },\n            }}\n          />\n        </div>\n      </Controls>\n      {renderSettings()}\n      {messages && <Markdown text={messages} />}\n      <div className=\"d-flex flex-column-reverse\">\n        {loading && (\n          <div key=\"loading\" className={`message system`}>\n            <div>\n              <span\n                className=\"spinner-grow spinner-grow-sm me-1\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </Wrapper>\n);\n", "metadata": {"description": "Assisterr-eth-denver-widget-v10", "image": {"ipfs_cid": "bafkreif5lbyydqqhvfxm6y7pcwmwwofm7i3qoxtsog3ck6lhsrgvjrfss4"}, "name": "Assisterr-eth-denver-widget-v10"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Assisterr-eth-denver-widget-v10", "fact_widget_deployments_id": "0e1afb53113fc8b82ff66b007f792201", "inserted_timestamp": "2024-03-21T21:27:55.391Z", "modified_timestamp": "2024-03-21T22:28:26.777Z", "__row_index": 0}