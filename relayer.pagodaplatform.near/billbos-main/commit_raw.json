{"tx_hash": "63QTwqJCr8nF7CBJAwb2B2gZa2ickU2JpM2ZJ73Ufdbi", "action_id_social": "BuDLugr6CG1y5WWB8cQRA3imhoSrfkzMRB6QWxmRWvgv-0-widget", "block_id": 108100174, "block_timestamp": "2023-12-16T16:15:16.478Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "billbos-main", "source_code": "State.init({\n  chainId: null,\n  walletAddress: null,\n  balance: null,\n  walletConnected: false,\n  tabSelect: 0,\n  chains: {\n    25925: {\n      name: \"Bitkub Chain Testnet\",\n      id: 25925,\n      image:\n        \"https://ipfs.near.social/ipfs/bafkreicksbcmv5i7ezaw5b2424vliuegcbgfckjc4qt73eql67pdmrvvfu\",\n    },\n    96: {\n      name: \"Bitkub Chain Mainnet\",\n      id: 96,\n    },\n    3501: {\n      name: \"JFIN Chain\",\n      id: 3501,\n      image:\n        \"https://ipfs.near.social/ipfs/bafkreia4w3mcfsrvcoh3r44x5nxrmarrt5xr3nta7dnw7pjfufd3b3anki\",\n    },\n  },\n});\n\nconst DEFAULT_CHAIN_ID = 25925;\nconst CHAIN_LIST = [25925, 3501];\n\nfunction switchEthereumChain(chainId) {\n  const chainIdHex = `0x${chainId.toString(16)}`;\n  const res = Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: chainIdHex },\n  ]);\n}\n\nfunction setTabSelect(index) {\n  State.update({\n    tabSelect: index,\n  });\n}\n\nif (\n  state.chainId === null &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((data) => {\n      const chainId = data?.chainId;\n      if (CHAIN_LIST.includes(chainId)) {\n        State.update({ chainId: chainId });\n      } else {\n        State.update({ chainId: null });\n        switchEthereumChain(DEFAULT_CHAIN_ID);\n      }\n\n      // const config = getNetworkConfig(chainId);\n      // if (!config) {\n      //   console.log(`Unsupport chain, chainId: ${chainId}`);\n      //   State.update({ isChainSupported: false });\n      //   switchEthereumChain(DEFAULT_CHAIN_ID);\n      // } else {\n      //   State.update({ chainId, isChainSupported: true });\n      // }\n    });\n}\n\nfunction checkProvider() {\n  const provider = Ethers.provider();\n  if (provider) {\n    provider\n      .getSigner()\n      ?.getAddress()\n      ?.then((address) => {\n        State.update({ walletAddress: address });\n      });\n    provider\n      .getSigner()\n      ?.getBalance()\n      .then((balance) => State.update({ balance: balance }));\n    State.update({ walletConnected: true });\n  } else {\n    State.update({ walletConnected: false, balance: null });\n  }\n}\ncheckProvider();\n\nfunction tabComponent() {\n  if (state.tabSelect == 0) {\n    return <div>0</div>;\n  } else if (state.tabSelect == 1) {\n    return (\n      <div className=\"grid grid-cols-3\">\n        {Array.from({ length: 3 }).map((_, index) => {\n          return (\n            <div key={index}>\n              <Widget src=\"jimmy-ez.near/widget/billbos-ads-card\" props={{}} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  } else if (state.tabSelect == 2) {\n    return <div>2</div>;\n  }\n}\n\nconst main = (\n  <div className=\"relative\">\n    {JSON.stringify(state)}\n    <div>\n      {state.walletConnected ? (\n        <div>\n          <div className=\"sticky top-0 z-10 bg-white\">\n            <Widget\n              src=\"porx-dev.near/widget/billbos-header\"\n              props={{\n                walletAddress: state.walletAddress,\n                chainId: state.chainId,\n                setTabSelect: (index) => setTabSelect(index),\n                chains: state.chains,\n              }}\n            />\n          </div>\n          <div className=\"container gray-surface min-h-screen w-full\">\n            <div>{tabComponent()}</div>\n          </div>\n        </div>\n      ) : (\n        <Widget src=\"porx-dev.near/widget/billbos-authen\" props={{}} />\n      )}\n    </div>\n  </div>\n);\n\nreturn (\n  <>\n    <Widget src=\"porx-dev.near/widget/billbos-css\" props={{ children: main }} />\n  </>\n);\n", "metadata": {"fork_of": "porx-dev.near/widget/billbos-main@108099980"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/billbos-main", "fact_widget_deployments_id": "361c5c97e69bcb41283538e7311768f2", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 26}