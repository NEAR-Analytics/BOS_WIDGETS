{"tx_hash": "5ui6mn9WD1ZokJeCYjJ4Az1DaYBu5UkjYZkb36aPzpjR", "action_id_social": "5Sez8NQ6YNpyRV2CXKQzyhWwvTfw1cyTKYivBfALsTr8-0-widget", "block_id": 108250847, "block_timestamp": "2023-12-18T12:40:55.801Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "billbos-main", "source_code": "State.init({\n  chainId: undefined,\n  walletAddress: null,\n  balance: null,\n  viewOfMonth: 0,\n  viewOfWalletAddress: 0,\n  ratioOfWalletAddress: 0,\n  totalEarningBalance: 0,\n  totalStakedBalance: 0,\n  monthCount: 0,\n  walletConnected: false,\n  ads: [],\n  adsUser: [],\n  tabSelect: 0,\n  chains: {\n    25925: {\n      id: 25925,\n      billBOSCore: \"0x8995e9741A2b9c7f1Bb982d08c360F2951a23c24\",\n      name: \"Bitkub Chain\",\n      rpcUrl: \"https://rpc-testnet.bitkubchain.io\",\n      currencySymbol: \"tKUB\",\n      nativeCurrency: ETH_TOKEN,\n      image:\n        \"https://ipfs.near.social/ipfs/bafkreicksbcmv5i7ezaw5b2424vliuegcbgfckjc4qt73eql67pdmrvvfu\",\n    },\n    35011: {\n      id: 35011,\n      name: \"J2O Taro\",\n      billBOSCore: \"0x64ADc655a088ea04a9B1929e9930c4e9E49D962e\",\n      rpcUrl: \"https://rpc.j2o.io\",\n      nativeCurrency: ETH_TOKEN,\n      currencySymbol: \"taro\",\n      image:\n        \"https://ipfs.near.social/ipfs/bafkreia4w3mcfsrvcoh3r44x5nxrmarrt5xr3nta7dnw7pjfufd3b3anki\",\n    },\n  },\n  adsContent:\n    '<Widget src=\"jimmy-ez.near/widget/billbos-craete-ads\" props={{}} />',\n});\n\nconst [adsInfo, setAdsInfo] = useState({});\n\nconst BACKEND_API = \"https://api-billbos.0xnutx.space\";\nconst DEFAULT_CHAIN_ID = 25925;\nconst CHAIN_LIST = [25925, 35011];\nconst ETH_TOKEN = { name: \"Ethereum\", symbol: \"ETH\", decimals: 18 };\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/jimmy-ez/0344bb9cce14ced6c6e7f89d7d1654ce/raw/e7dd9962a90819f71de155b1f68f276eed07790a/BillBOSCoreABIV3.json\"\n).body;\n\nif (!BillBOSCoreABI) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(BillBOSCoreABI);\n\nfunction switchEthereumChain(chainId) {\n  const chainIdHex = `0x${chainId.toString(16)}`;\n  const res = Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: chainIdHex },\n  ]);\n}\n\nfunction setTabSelect(index) {\n  State.update({\n    tabSelect: index,\n  });\n}\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((data) => {\n      const chainId = data?.chainId;\n      if (CHAIN_LIST.includes(chainId)) {\n        State.update({ chainId: chainId });\n      } else {\n        State.update({ chainId: null });\n        switchEthereumChain(DEFAULT_CHAIN_ID);\n      }\n    });\n}\n\nconst fetchApi = (queryURI, method, data) => {\n  const options = {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  if (data) options[body] = JSON.stringify(data);\n  return asyncFetch(queryURI, options);\n};\n\nconst handleRequest = (query, viewCase) => {\n  const endpoint = BACKEND_API + query;\n  switch (viewCase) {\n    case \"viewOfMonth\":\n      fetchApi(endpoint, \"GET\", \"\").then((res) => {\n        if (res.ok) {\n          State.update({ viewOfMonth: res.body.view });\n        }\n      });\n      return;\n    case \"viewOfWalletAddress\":\n      fetchApi(endpoint, \"GET\", \"\").then((res) => {\n        if (res.ok) {\n          State.update({ viewOfWalletAddress: res.body.view });\n        }\n      });\n      return;\n    case \"ratioOfWalletAddress\":\n      fetchApi(endpoint, \"GET\", \"\").then((res) => {\n        if (res.ok) {\n          State.update({ ratioOfWalletAddress: res.body.ration });\n        }\n      });\n      return;\n    case \"ad-view-by-adId\":\n      return fetchApi(endpoint, \"GET\", \"\").then((res) => {\n        return res;\n      });\n    default:\n      break;\n  }\n};\n\nfunction checkProvider() {\n  const provider = Ethers.provider();\n\n  if (provider) {\n    provider\n      .getSigner()\n      ?.getAddress()\n      ?.then((address) => {\n        State.update({ walletAddress: address });\n      });\n    provider\n      .getSigner()\n      ?.getBalance()\n      .then((balance) => State.update({ balance: balance }));\n    State.update({ walletConnected: true });\n  } else {\n    State.update({ walletConnected: false, balance: null });\n  }\n}\ncheckProvider();\n\nfunction getRpcProvider(chainId) {\n  const chain = state.chains[chainId];\n  const rpc = chain.rpcUrl;\n  const provider = new ethers.providers.JsonRpcProvider(rpc, chain.id);\n  return provider;\n}\n\nfunction formatAds(item, chainId) {\n  const adsId = parseInt(item[0]);\n  const res = handleRequest(\n    `/ads/ad-view-by-adId?adId=${adsId}&month=${state.monthCount}&chainId=${chainId}`,\n    \"ad-view-by-adId\"\n  );\n  res.then((res) => {\n    adsInfo[`${chainId}-${adsId}-adsView`] = res.ok ? res.body.view : \"0\";\n  });\n\n  const adsStakedBalance = iface.encodeFunctionData(\"adsStakedBalance\", [\n    item[0],\n  ]);\n  Ethers.provider()\n    .call({\n      to: state.chains[chainId].billBOSCore,\n      data: adsStakedBalance,\n    })\n    .then((raw) => {\n      adsInfo[`${chainId}-${adsId}-staked`] = raw || \"0\";\n    });\n\n  return {\n    adsId: \"\" + parseInt(item[0]),\n    adsContent: {\n      name: item[1][0],\n      imageCID: item[1][1],\n      newTabLink: item[1][2],\n      widgetLink: item[1][3],\n      isInteractive: item[1][4],\n    },\n    adsStakedBalance: \"10000000\",\n    adsViewed: \"7235\",\n    chainId: chainId.toString(),\n  };\n}\n\nfunction getTotalDashboard() {\n  const chainsDefault = [25925];\n  const promiseList = [];\n\n  for (let i = 0; i < chainsDefault.length; i++) {\n    const chainId = chainsDefault[i];\n    const provider = getRpcProvider(chainId);\n    const contract = new ethers.Contract(\n      state.chains[chainId].billBOSCore,\n      BillBOSCoreABI,\n      provider\n    );\n\n    const staked = contract.totalStakedBalanceLast();\n    promiseList.push(staked);\n\n    const earning = contract.totalEarningBalanceLast();\n    promiseList.push(earning);\n\n    const month = contract.monthCount();\n    promiseList.push(month);\n\n    const adsAll = contract.getAds();\n    promiseList.push(adsAll);\n  }\n\n  Promise.all(promiseList).then((values) => {\n    const adsAll = values[3].map((item) => {\n      return formatAds(item, state.chainId);\n    });\n\n    State.update({\n      totalStakedBalance: ethers.utils.formatEther(values[0]),\n      totalEarningBalance: ethers.utils.formatEther(values[1]),\n      monthCount: ethers.utils.formatEther(values[2]),\n      ads: adsAll,\n    });\n  });\n}\n\nfunction getAdsByAddress(walletAddress) {\n  const billbosCoreAddress = state.chains[state.chainId].billBOSCore;\n  const getAdsUserData = iface.encodeFunctionData(\"getAdsUser\", [\n    walletAddress,\n  ]);\n\n  const raw = Ethers.provider()\n    .call({\n      to: billbosCoreAddress,\n      data: getAdsUserData,\n    })\n    .then((raw) => {\n      return new Promise((resolve, reject) => {\n        const result = iface.decodeFunctionResult(\"getAdsUser\", raw);\n        resolve(result);\n      });\n    });\n\n  raw.then((res) => {\n    const adsAll = res[0].map((item) => {\n      return formatAds(item, state.chainId);\n    });\n    State.update({\n      adsUser: adsAll || [],\n    });\n  });\n}\n\nif (state.tabSelect != 1) {\n  State.update({\n    adsUser: [],\n  });\n}\n\nif (state.tabSelect == 1 && state.adsUser.length == 0) {\n  getAdsByAddress(state.walletAddress);\n}\n\nfunction tapCampaigns() {\n  return (\n    <div className=\"container\">\n      <div className=\"w-full\">\n        {state.walletConnected ? (\n          <>\n            <div className=\"flex justify-between py-8 items-center\">\n              <div>\n                <h2 className=\"font-semibold text-xl \">Campaigns</h2>\n                <p className=\"text-sm\">\n                  Unlock the power of onchain data for Web3 Ads\n                </p>\n              </div>\n              <div>\n                <Widget\n                  src=\"jimmy-ez.near/widget/billbos-craete-ads\"\n                  props={{}}\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-3 gap-3\">\n              {state.adsUser.map((item, index) => {\n                return (\n                  <div key={index}>\n                    <Widget\n                      src=\"jimmy-ez.near/widget/billbos-ads-card\"\n                      props={{\n                        ...item,\n                        adsStakedBalance:\n                          adsInfo[`${item.chainId}-${item.adsId}-staked`] ||\n                          \"10000000\",\n                        adsViewed:\n                          adsInfo[`${item.chainId}-${item.adsId}-adsView`],\n                        isShowAction: true,\n                      }}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        ) : (\n          <div className=\" flex justify-center\">\n            <div className=\"w-1/2\">\n              <Widget\n                src=\"chayanonc-ph.near/widget/billbos-authen\"\n                props={{}}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction tapRewards() {\n  // get view of page owner\n  const walletAddress = state.walletAddress;\n  const month = state.monthCount;\n\n  handleRequest(\n    `/ads/total-webpageowner-view-by-owner-address?month=${month}&walletAddress=${walletAddress}`,\n    \"viewOfWalletAddress\"\n  );\n\n  handleRequest(\n    `/ads/ratio-webpageOwnerview-by-allwebpageOwner?month=${month}&walletAddress=${walletAddress}`,\n    \"ratioOfWalletAddress\"\n  );\n\n  return (\n    <div>\n      <div\n        style={{ height: \"430px\" }}\n        className=\"bg-black container flex items-center\"\n      >\n        <div className=\"w-96 text-white\">\n          <h2 className=\"text-4xl font-semibold\">\n            Generate Ads ID. Earn Crypto Together\n          </h2>\n          <p className=\"mt-2\">Earn up to 20% commission on every view</p>\n        </div>\n      </div>\n      {state.walletConnected ? (\n        <div\n          style={{ marginTop: \"-50px\" }}\n          className=\"container rounded-t-3xl gray-surface min-h-screen\"\n        >\n          <div className=\"flex justify-between py-8 items-center \">\n            <div>\n              <h2 className=\"font-semibold text-xl \">Overview</h2>\n              <p className=\"text-sm\">\n                Unlock the power of onchain data for Web3 Ads\n              </p>\n            </div>\n            <div>\n              <Widget\n                src=\"chayanonc-ph.near/widget/billbos-ads\"\n                props={{\n                  btnName: \"Get my ads component\",\n                  btnClass:\n                    \"brand-green px-2.5 py-2 rounded-xl text-white text-sm font-semibold\",\n                  height: \"467px\",\n                  width: \"550px\",\n                  isOpenDefault: false,\n                  body: \"\",\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-3 gap-4 mb-5\">\n            <div className=\"p-3 bg-white rounded-xl \">\n              <div>\n                <p className=\"text-xs secondary-text\">Total Earnings</p>\n                <p className=\"text-xl mt-1 font-medium\">\n                  {state.totalEarningBalance}\n                </p>\n              </div>\n            </div>\n            <div className=\"p-3 bg-white rounded-xl\">\n              <div>\n                <p className=\"text-xs secondary-text\">My Total View</p>\n                <p className=\"text-xl mt-1 font-medium\">\n                  {state.viewOfWalletAddress}\n                </p>\n              </div>\n            </div>\n            <div className=\"p-3 bg-white rounded-xl\">\n              <div>\n                <p className=\"text-xs secondary-text\">My Total Earnings</p>\n                <p className=\"text-xl mt-1 font-medium\">\n                  {state.ratioOfWalletAddress * state.viewOfWalletAddress} USDT\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full my-4\">\n            <p className=\"text-sm font-medium\">Reward</p>\n          </div>\n          <div className=\"flex gap-3\">\n            {CHAIN_LIST.map((item, i) => {\n              const chainConfig = state.chains[item];\n\n              return (\n                <Widget\n                  src=\"porx-dev.near/widget/billbos-reward-card\"\n                  props={{\n                    chainName: chainConfig.name,\n                    amount: \"1000.20\",\n                    tokenName: \"USDT\",\n                    onClaim: () => {},\n                  }}\n                />\n              );\n            })}\n          </div>\n        </div>\n      ) : (\n        <>\n          <div\n            style={{ marginTop: \"-50px\" }}\n            className=\"container rounded-t-3xl gray-surface min-h-screen\"\n          >\n            <div className=\" flex justify-center\">\n              <div className=\"w-1/2\">\n                <Widget\n                  src=\"chayanonc-ph.near/widget/billbos-authen\"\n                  props={{}}\n                />\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\ngetTotalDashboard();\n\nfunction tapDashboard() {\n  // get total view ads\n  handleRequest(\"/ads/total-ad-view?month=1\", \"viewOfMonth\");\n\n  const earningCards = [\n    {\n      title: \"Total Staked\",\n      ipfsUrl: \"bafkreigb2h33nc6bpa2gcuvbs46eys4bbb6djibx76xknbrkswtqfqlyzm\",\n      usdt: state.totalStakedBalance,\n      thb: parseFloat(state.totalStakedBalance) * 35,\n    },\n    {\n      title: \"Total Earnings\",\n      ipfsUrl: \"bafkreievjy5wntddg6augnywctekhic3dttnf57h4dhjkypyx5mhjci2ou\",\n      usdt: state.totalEarningBalance,\n      thb: parseFloat(state.totalEarningBalance) * 35,\n    },\n    {\n      title: \"Total View Ads\",\n      ipfsUrl: \"bafkreid32njwsekcwj3uvbfrz7upc6iqpz5tzxbymw5jb7kye5axdgnmri\",\n    },\n  ];\n\n  return (\n    <div\n      style={{\n        height: \"221px\",\n      }}\n      className=\"brand-gradient-green-radial w-full \"\n    >\n      <div className=\"container\">\n        <div className=\"text-white pt-10\">\n          <p className=\"font-semibold text-xl\">BillBos Dashboard</p>\n          <p className=\"text-sm font-medium\">\n            Unlock the power of onchain data for Web3 Ads\n          </p>\n        </div>\n        <div className=\"w-full grid grid-cols-3 gap-4 mt-16 pt-2 \">\n          {earningCards.map((item, i) => {\n            return (\n              <div key={i} className=\"h-full\">\n                <Widget\n                  src=\"chayanonc-ph.near/widget/billbos-earning-card\"\n                  props={{\n                    title: item.title,\n                    usdt: item.usdt,\n                    thb: item.thb,\n                    totalView: i == 2 ? state.viewOfMonth.toString() : \"\",\n                    ipfsUrl: `https://ipfs.near.social/ipfs/${item.ipfsUrl}`,\n                  }}\n                />\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"my-10\">\n          <p className=\"font-semibold \">Top Ads</p>\n        </div>\n        <div className=\"grid grid-cols-3 gap-3\">\n          {state.ads.map((item, index) => {\n            return (\n              <div key={index}>\n                <Widget\n                  src=\"jimmy-ez.near/widget/billbos-ads-card\"\n                  props={{\n                    ...item,\n                    adsStakedBalance:\n                      adsInfo[`${item.chainId}-${item.adsId}-staked`] ||\n                      \"10000000\",\n                    adsViewed: adsInfo[`${item.chainId}-${item.adsId}-adsView`],\n                  }}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction tabComponent() {\n  if (state.tabSelect == 0) {\n    return tapDashboard();\n  } else if (state.tabSelect == 1) {\n    return tapCampaigns();\n  } else if (state.tabSelect == 2) {\n    return tapRewards();\n  }\n}\n\nconst main = (\n  <div\n    style={{ height: \"400vh\" }}\n    className=\"relative gray-surface  overflow-y-scroll\"\n  >\n    <div>\n      <div className=\"h-screen \">\n        <div className=\"sticky top-0 z-10 bg-white\">\n          <Widget\n            src=\"chayanonc-ph.near/widget/billbos-header\"\n            props={{\n              walletAddress: state.walletAddress,\n              chainId: state.chainId,\n              setTabSelect: (index) => setTabSelect(index),\n              chains: state.chains,\n            }}\n          />\n        </div>\n        {state.chainId !== undefined && !CHAIN_LIST.includes(state.chainId) ? (\n          <div className=\"w-full\">Chain not support </div>\n        ) : (\n          <div className=\" w-full\">\n            <div>{tabComponent()}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nreturn (\n  <>\n    <Widget\n      src=\"chayanonc-ph.near/widget/billbos-css\"\n      props={{ children: main }}\n    />\n  </>\n);\n", "metadata": {"fork_of": "chayanonc-ph.near/widget/billbos-main@108250126"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/billbos-main", "fact_widget_deployments_id": "34f4f1c3ae8723f2abdadbae5d244953", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 60}