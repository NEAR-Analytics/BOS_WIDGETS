{"tx_hash": "DYViHC6MXM296WKMpHzgf1K9rtgHT5Vo9SAwgstv1xaX", "action_id_social": "2nhGPyXAyfZmG9oZ36FVYQv7eEtNcAJ9niPVDGZ7wcS7-0-widget", "block_id": 108258141, "block_timestamp": "2023-12-18T14:52:37.711Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "billbos-craete-ads", "source_code": "const ModalOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(12, 12, 12, 0.6);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n`;\n\nconst StyledInput = styled.div`\n  position: relative;\n  width: 100%;\n  input {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    outline: none;\n    cursor: pointer;\n  }\n`;\n\nconst StyledSelect = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 100%;\n\n  select {\n    appearance: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    outline: none;\n    cursor: pointer;\n  }\n\n  &:after {\n    content: '\u2304';\n    position: absolute;\n    top: 50%;\n    right: 10px;\n    transform: translateY(-50%);\n    pointer-events: none;\n  }\n`;\n\nconst StartContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 10px;\n  transform: translateY(-50%);\n`;\n\nconst CustomUpload = styled.div`\n  .btn {\n    font-size: 11px;\n    height: 28px;\n    border-radius: 8px;\n    background-color: #F7F9F9;\n    color: black;\n    border: solid 1px #D0D5DD;\n  }\n\n  .btn-outline-primary {\n    --bs-btn-active-color: black;\n    --bs-btn-active-bg: #F0F0F0;\n    --bs-btn-active-border-color: #D0D5DD;\n  }\n`;\n\nconst NetworkImgList = {\n  BKC: \"https://www.bitkubnft.com/_next/image?url=https%3A%2F%2Fstatic.bitkubnext.com%2Fnft%2Fnft_stores%2Fbitkub-chain%2Fstore_profile.png&w=256&q=10\",\n  J2O: \"https://img2.pic.in.th/pic/j2o.png\",\n};\n\nconst BillBOSAddress = {\n  BKC: \"0x8995e9741A2b9c7f1Bb982d08c360F2951a23c24\",\n  J2O: \"0x9d8b5e3C762167a409Db7f11a38b17dE9192E136\",\n};\n\nconst USDTAddress = {\n  BKC: \"0x90430340366FA3557BD7A5c919f2C41975eDb6B2\",\n  J2O: \"0x88127f9a362b802D0D27c85583506bf4c648aa68\",\n};\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/jimmy-ez/0344bb9cce14ced6c6e7f89d7d1654ce/raw/e7dd9962a90819f71de155b1f68f276eed07790a/BillBOSCoreABIV3.json\"\n);\nif (!BillBOSCoreABI.ok) {\n  return \"Loading\";\n}\nconst IBillBOSCore = new ethers.utils.Interface(BillBOSCoreABI.body);\n\nconst ERC20ABI = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!ERC20ABI.ok) {\n  return \"Loading\";\n}\nconst IERC20 = new ethers.utils.Interface(ERC20ABI.body);\n\nState.init({\n  isOpenModal: false,\n  adsType: \"REDIRECT\",\n  selectedChain: \"BKC\",\n  chainImg: NetworkImgList.BKC,\n  img: null,\n  sender: undefined,\n  adsName: undefined,\n  newTabLink: undefined,\n  componentId: undefined,\n  stakeAmount: \"0\",\n});\n\nconst [approving, setApproving] = useState(false);\nconst [creating, setCreating] = useState(false);\nconst [isAllowance, setIsAllowance] = useState(false);\n\nif (state.sender == undefined && Ethers.provider()) {\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length) {\n        State.update({ sender: accounts[0] });\n      }\n    });\n}\n\nconst onOpen = () => {\n  State.update({\n    isOpenModal: true,\n  });\n};\n\nconst onClose = () => {\n  State.update({\n    isOpenModal: false,\n  });\n};\n\nconst handleChangeType = (event) => {\n  if (event.target.value) {\n    State.update({\n      adsType: event.target.value,\n    });\n  }\n};\n\nconst handleChangeChain = (event) => {\n  if (event.target.value) {\n    State.update({\n      selectedChain: event.target.value,\n      chainImg: NetworkImgList[event.target.value],\n    });\n  }\n};\n\nconst checkAllowance = () => {\n  const encodedData = IERC20.encodeFunctionData(\"allowance\", [\n    state.sender,\n    BillBOSAddress[state.selectedChain],\n  ]);\n  return new Promise((resolve, reject) => {\n    Ethers.provider()\n      .call({\n        to: USDTAddress[state.selectedChain],\n        data: encodedData,\n      })\n      .then((rawRes) => {\n        const resData = IERC20.decodeFunctionResult(\"allowance\", rawRes);\n        const resAllowance = Number(resData);\n        resolve(resAllowance);\n      })\n      .catch((error) => {\n        resolve(0);\n      });\n  });\n};\n\nconst isApproval = async () => {\n  checkAllowance().then((allowance) => {\n    const amount = Number(\n      ethers.utils.parseUnits(String(state.stakeAmount), \"ether\")\n    );\n    if (allowance < amount) {\n      setIsAllowance(false);\n    } else {\n      setIsAllowance(true);\n    }\n  });\n};\nisApproval();\n\nconst erc20Approve = async (to, amount) => {\n  setApproving(true);\n  const erc20Provider = new ethers.Contract(\n    USDTAddress[state.selectedChain],\n    IERC20,\n    Ethers.provider().getSigner()\n  );\n  erc20Provider\n    .approve(to, amount)\n    .then((res) => {\n      setTimeout(closeLoadingApprove, 10000);\n    })\n    .catch((error) => {\n      setApproving(false);\n    });\n};\n\nconst closeLoadingApprove = () => {\n  setApproving(false);\n};\n\nconst closeLoadingCreate = () => {\n  setCreating(false);\n};\n\nconst handleApprove = async () => {\n  try {\n    const amount = Number(\n      ethers.utils.parseUnits(String(state.stakeAmount), \"ether\")\n    );\n    const coreAddress = BillBOSAddress[state.selectedChain];\n    erc20Approve(coreAddress, amount.toString());\n  } catch {\n    resolve(false);\n  }\n};\n\nconst handleCreateAds = async () => {\n  if (isAllowance) {\n    setCreating(true);\n    checkAllowance().then((allowance) => {\n      const amount = Number(\n        ethers.utils.parseUnits(String(state.stakeAmount), \"ether\")\n      );\n      const coreAddress = BillBOSAddress[state.selectedChain];\n      if (allowance < amount) {\n        erc20Approve(coreAddress, amount.toString());\n      }\n      const billbosProvider = new ethers.Contract(\n        BillBOSAddress[state.selectedChain],\n        IBillBOSCore,\n        Ethers.provider().getSigner()\n      );\n      billbosProvider\n        .createAds(\n          {\n            name: state.adsName ?? \"\",\n            imageCID: state.img.cid ?? \"\",\n            newTabLink: state.newTabLink ?? \"\",\n            widgetLink: state.componentId ?? \"\",\n            isInteractive: state.adsType == \"REDIRECT\" ? false : true,\n          },\n          amount.toString()\n        )\n        .then((res) => {\n          setTimeout(closeLoadingCreate, 7000);\n        })\n        .catch((error) => {\n          setCreating(false);\n        });\n    });\n  } else {\n    const amount = Number(\n      ethers.utils.parseUnits(String(state.stakeAmount), \"ether\")\n    );\n    const coreAddress = BillBOSAddress[state.selectedChain];\n    erc20Approve(coreAddress, amount.toString());\n  }\n};\n\nconst Modal = ({ isOpen, onClose }) => {\n  if (!isOpen) return null;\n  return (\n    <ModalOverlay>\n      <div\n        style={{\n          width: \"484px\",\n        }}\n        class=\"bg-white rounded-xl pt-4\"\n      >\n        <div class=\"flex flex-row justify-between items-start border-b pb-4 px-4 \">\n          <div class=\"flex flex-col\">\n            <p class=\"text-lg\">Create Ads</p>\n            <p class=\"text-sm tertiary-text\">\n              {\"Unlock the power of onchain data for Web3 Ads\"}\n            </p>\n          </div>\n          <svg\n            class=\"cursor-pointer\"\n            onClick={() => onClose()}\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M6 18L18 6M6 6L18 18\"\n              stroke=\"#808080\"\n              stroke-width=\"1.5\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            />\n          </svg>\n        </div>\n        <div\n          style={{\n            height: \"400px\",\n          }}\n          class=\"flex flex-col justify-between items-start pb-4 px-4 mt-4 overflow-scroll\"\n        >\n          <p class=\"text-sm secondary-text\">Ads Name</p>\n          <StyledInput>\n            <input\n              onChange={(e) =>\n                State.update({\n                  adsName: e.target.value,\n                })\n              }\n              class=\"w-full border px-2 py-2 rounded-lg\"\n            />\n          </StyledInput>\n          <p class=\"text-sm secondary-text mt-4\">Ads Type</p>\n          <StyledSelect>\n            <select\n              class=\"w-full border px-2 py-2 mt-2 rounded-lg\"\n              id=\"adsType\"\n              name=\"adsType\"\n              onChange={(e) => handleChangeType(e)}\n            >\n              <option value=\"REDIRECT\">URL Redirect</option>\n              <option value=\"INTERACTIVE\">Interactive Ads</option>\n            </select>\n          </StyledSelect>\n          {state.adsType == \"REDIRECT\" && (\n            <>\n              <p class=\"text-sm secondary-text mt-4\">URL</p>\n              <StyledInput>\n                <input\n                  onChange={(e) => State.update({ newTabLink: e.target.value })}\n                  class=\"w-full border px-2 py-2 rounded-lg\"\n                />\n              </StyledInput>\n            </>\n          )}\n          {state.adsType == \"INTERACTIVE\" && (\n            <>\n              <p class=\"text-sm secondary-text mt-4\">Component ID</p>\n              <StyledInput>\n                <input\n                  onChange={(e) =>\n                    State.update({ componentId: e.target.value })\n                  }\n                  class=\"w-full border px-2 py-2 rounded-lg\"\n                />\n              </StyledInput>\n            </>\n          )}\n          {state.adsType == \"REDIRECT\" && (\n            <>\n              <p class=\"text-sm secondary-text mt-4\">Image Ads</p>\n              <div class=\"border flex flex-row justify-between rounded-lg py-2 px-2 w-full cursor-pointer\">\n                {state.img ? (\n                  <>\n                    <p class=\"text-sm py-1 truncate w-3/4\">\n                      {state.img.cid ?? \"Loading...\"}\n                    </p>\n                    <p\n                      onClick={() => {\n                        State.update({\n                          img: null,\n                        });\n                      }}\n                      class=\"tertiary-text cursor-pointer\"\n                    >\n                      x\n                    </p>\n                  </>\n                ) : (\n                  <>\n                    <p class=\"text-sm tertiary-text py-1\">\n                      {\"No File Choosen\"}\n                    </p>\n                    <CustomUpload>\n                      <IpfsImageUpload class=\"bg-red-200\" image={state.img} />\n                    </CustomUpload>\n                  </>\n                )}\n              </div>\n              <p class=\"text-xs tertiary-text py-1\">\n                {\"JPG, PNG or GIF format, 5MB max file, use a 728x90.\"}\n              </p>\n            </>\n          )}\n          <p class=\"text-sm secondary-text mt-4\">Network</p>\n          <StyledSelect>\n            <StartContent>\n              <img\n                src={state.chainImg}\n                alt=\"Icon\"\n                class=\"w-6 h-6 rounded-full mt-2\"\n              />\n            </StartContent>\n            <select\n              class=\"w-full border pl-10 py-2 mt-2 rounded-lg\"\n              id=\"network\"\n              name=\"network\"\n              onChange={(e) => handleChangeChain(e)}\n            >\n              <option value=\"BKC\">Bitkub Chain</option>\n              <option value=\"J2O\">J2O Taro</option>\n            </select>\n          </StyledSelect>\n          <p class=\"text-sm secondary-text mt-4\">Token</p>\n          <StyledSelect>\n            <StartContent>\n              <img\n                src=\"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/512/Tether-USDT-icon.png\"\n                alt=\"Icon\"\n                class=\"w-6 h-6 rounded-full mt-2\"\n              />\n            </StartContent>\n            <select\n              class=\"w-full border pl-10 py-2 mt-2 rounded-lg\"\n              id=\"network\"\n              name=\"network\"\n            >\n              <option value=\"USDT\">USDT</option>\n            </select>\n          </StyledSelect>\n          <p class=\"text-sm secondary-text mt-4\">Amount</p>\n          <StyledInput>\n            <input\n              value={stakeAmount}\n              onChange={(e) => State.update({ stakeAmount: e.target.value })}\n              type=\"number\"\n              class=\"w-full border px-2 py-2 rounded-lg\"\n            />\n          </StyledInput>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 px-8 py-4\">\n          <button\n            onClick={() => onClose()}\n            class=\"px-6 py-2 green-text border-1 border-green-300 rounded-lg\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={() => handleCreateAds()}\n            class=\"px-6 py-2 text-white font-semibold brand-green rounded-lg\"\n          >\n            {isAllowance ? \"Create\" : approving ? \"Loading...\" : \"Approve\"}\n          </button>\n        </div>\n      </div>\n    </ModalOverlay>\n  );\n};\n\nconst content = (\n  <div>\n    <button\n      class=\"brand-green px-4 py-2 rounded-xl text-white font-semibold\"\n      onClick={onOpen}\n    >\n      {\"+ Create Ads\"}\n    </button>\n    <Modal isOpen={state.isOpenModal} onClose={onClose} />\n  </div>\n);\n\nreturn (\n  <Widget\n    src=\"chayanonc-ph.near/widget/billbos-css\"\n    props={{\n      children: content,\n    }}\n  />\n);\n", "metadata": {"fork_of": "jimmy-ez.near/widget/billbos-craete-ads@108254407"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/billbos-craete-ads", "fact_widget_deployments_id": "9fff21e38b04a7a09c3d5c932761ae4b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 29}