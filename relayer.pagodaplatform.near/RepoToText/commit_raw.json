{"tx_hash": "88grHzVcDrkj5t2cNWjsz523CRbTupfh2YCjcW5maFxD", "action_id_social": "6aVwFTPQ2jqKULTm3mfKQpsCAYApY1Vj5atU2Jkw1cQo-0-widget", "block_id": 116631385, "block_timestamp": "2024-04-11T20:05:25.522Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "RepoToText", "source_code": "const GITHUB_API_KEY = props.GITHUB_API_KEY;\n\nState.init({ GITHUB_API_KEY: \"GitHub API Key\" });\nState.init({ githubUrl: \"GitHub URL\" });\nState.init({ docUrl: \"Documentation URL\" });\n\n//define a variable to hold the response\nlet response = \"\";\n\n// event handlers\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n\n  const repoUrl = document.getElementById(\"repoUrl\").value;\n  const docUrl = document.getElementById(\"docUrl\").value;\n\n  try {\n    const response = await fetch(\"https://devbot.hellopartage.xyz/scrape\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        repoUrl,\n        docUrl,\n        githubApiKey: GITHUB_API_KEY,\n      }),\n    });\n\n    const data = await response.json();\n    response(data.response);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst handleCopyText = () => {\n  const outputArea = document.querySelector(\".outputArea\");\n  if (outputArea) {\n    outputArea.select();\n    document.execCommand(\"copy\");\n  }\n};\n\nreturn (\n  <>\n    <h1> Repo To Text </h1>\n    <p>\n      1. Input your\n      <a href=\"https://github.com/settings/tokens?type=beta\">\n        Github API Key\n      </a>{\" \"}\n      :\n    </p>\n    <input\n      type=\"text\"\n      onChange={(e) => State.update({ GITHUB_API_KEY: e.target.value })}\n    />\n    <p></p>\n\n    <p>2. Input the GitHub repository URL you want to scrape :</p>\n    <input\n      type=\"text\"\n      onChange={(e) => State.update({ githubUrl: e.target.value })}\n    />\n    <p>{state.githubUrl}</p>\n\n    <p>3. (optional) Input the documentation URL :</p>\n    <input\n      type=\"text\"\n      onChange={(e) => State.update({ docUrl: e.target.value })}\n    />\n    <p>{state.docUrl}</p>\n\n    <div style={{ display: \"flex\", alignItems: \"flex-start\", gap: \"10px\" }}>\n      <button\n        onClick={handleSubmit}\n        style={{\n          fontSize: \"1em\",\n          padding: \"10px 20px\",\n          borderRadius: \"5px\",\n          border: \"none\",\n          color: \"white\",\n          backgroundColor: \"#007bff\",\n          cursor: \"pointer\",\n          transition: \"background-color 0.3s ease\",\n        }}\n      >\n        Submit\n      </button>\n      <button\n        onClick={handleCopyText}\n        style={{\n          fontSize: \"1em\",\n          padding: \"10px 20px\",\n          borderRadius: \"5px\",\n          border: \"none\",\n          color: \"white\",\n          backgroundColor: \"#007bff\",\n          cursor: \"pointer\",\n          transition: \"background-color 0.3s ease\",\n        }}\n      >\n        Copy Text\n      </button>\n    </div>\n    <p></p>\n\n    <div>\n      <textarea\n        value={response}\n        readOnly\n        style={{\n          height: \"100px\",\n          width: \"100%\",\n          margin: \"10px 0\",\n          padding: \"20px\",\n          boxSizing: \"border-box\",\n          borderRadius: \"5px\",\n          border: \"1px solid #ccc\",\n          fontSize: \"1em\",\n        }}\n      />\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/RepoToText", "fact_widget_deployments_id": "7477d07e268693f74cdcc88563d88f6d", "inserted_timestamp": "2024-04-11T21:40:00.435Z", "modified_timestamp": "2024-04-11T21:40:00.435Z", "__row_index": 2}