{"tx_hash": "B61FvT2usEdamWgC8jrgztCPRow2Q4uoqokH23xZQEED", "action_id_social": "E7Fx9VKgLSzM1KWu2duVJdg3z8ZWaXY6E9eY6Ck6MBis-0-widget", "block_id": 99396993, "block_timestamp": "2023-08-22T12:50:44.384Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "CalendarChartv2", "source_code": "const { dateColumn, dataColumn, data, legendMax, legendMin, label, title } =\n  props;\nconst code = `\n<!-- observerable plot -->\n<div id=\"myplot\" style=\"width: 100%; display: flex; align-items: center; justify-content: center;\"></div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js\" integrity=\"sha512-M7nHCiNUOwFt6Us3r8alutZLm9qMt4s9951uo8jqO4UwJ1hziseL6O3ndFyigx6+LREfZqnhHxYjKRJ8ZQ69DQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script type=\"module\">\n\nimport * as Plot from \"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm\";\n\nfunction calendar({\n  date = Plot.identity,\n  inset = 1,\n  ...options\n} = {}) {\n  let D;\n  return {\n    fy: {transform: (data) => (D = Plot.valueof(data, date, Array)).map((d) => d.getUTCFullYear())},\n    x: {transform: () => D.map((d) => d3.utcWeek.count(d3.utcYear(d), d))},\n    y: {transform: () => D.map((d) => d.getUTCDay())},\n    inset,\n    ...options\n  };\n}\n\nconst data = ${JSON.stringify(data ?? [])};\n\nconst start = d3.utcDay.offset(d3.min(data, (d) => new Date(d.${dateColumn}))); // exclusive\nconst end = d3.utcDay.offset(d3.max(data, (d) => new Date(d.${dateColumn}))); // exclusive\n\nconst plot = Plot.plot({\n  padding: 0,\n  width: 780,\n  x: {axis: null},\n  y: {\n    tickFormat: Plot.formatWeekday(\"en\"), \n    tickSize: 0, \n    ticks: [0,1,2,3,4,5,6], // dont draw -1\n  },\n  fy: {tickFormat: \"\", reverse: true},\n  color: {\n      scheme: \"greens\",\n      domain: [${legendMin}, ${legendMax}],\n      legend: true,\n      percent: false,\n      ticks: 6,\n      ticks: 4,\n      label: \"${label}\"\n  },\n  marks: [\n\n      // Draw year labels, rounding down to draw a year even if the data doesn\u2019t\n      // start on January 1. Use y = -1 (i.e., above Sunday) to align the year\n      // labels vertically with the month labels, and shift them left to align\n      // them horizontally with the weekday labels.\n      //Plot.text(\n      //  d3.utcYears(d3.utcYear(start), end),\n      //  calendar({text: d3.utcFormat(\"%Y\"), frameAnchor: \"right\", x: 0, y: -1, dx: -20})\n      //),\n      \n    Plot.cell(data, {\n      x: (d) => d3.utcWeek.count(d3.utcYear(new Date(d.${dateColumn})), new Date(d.${dateColumn})),\n      y: (d) => new Date(d.${dateColumn}).getUTCDay(),\n      fy: (d) => new Date(d.${dateColumn}).getUTCFullYear(),\n      fill: (d, i) => d.${dataColumn},\n      title: (d, i) => d.${dataColumn},\n      inset: 1\n    }),\n\n    // Draw month labels at the start of each month, rounding down to draw a\n      // month even if the data doesn\u2019t start on the first of the month. As\n      // above, use y = -1 to place the month labels above the cells. (If you\n      // want to show weekends, round up to Sunday instead of Monday.)\n      Plot.text(\n        d3.utcMonths(d3.utcMonth(start), end).map(d3.utcMonday.ceil),\n        calendar({text: d3.utcFormat(\"%b\"), frameAnchor: \"left\", y: -1})\n      ),\n      \n      // Lastly, draw the date for all days spanning the dataset, including\n      // days for which there is no data.\n      Plot.text(\n        d3.utcDays(start, end),\n        calendar({text: d3.utcFormat(\"%-d\")})\n      )\n  ]\n});\nconst div = document.querySelector(\"#myplot\");\ndiv.append(plot);\n\n</script>\n\n`;\n\nreturn (\n  <div className=\"w-100 d-flex flex-column align-items-center\">\n    {props.title && <strong>{props.title}</strong>}\n    <iframe\n      className=\"w-100\"\n      style={{ height: 350 + 250 * props.heightMultiplier }}\n      srcDoc={code}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/CalendarChartv2", "fact_widget_deployments_id": "15e0a8c1192b992aefebedc04debd97a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}