{"tx_hash": "CziSezzAyDxwAVEEcn96CcfB4yJsjgtZ62irrP17p1fF", "action_id_social": "FjqPLYAJZYooUXKpoirpaxi7u88TDqxwpziSEdTe49Gk-0-widget", "block_id": 99403479, "block_timestamp": "2023-08-22T14:56:28.348Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "NearContractVisualizerV2", "source_code": "const { apiKey } = props;\n\n// options based on https://flipsidecrypto.xyz/edit/queries/e1d765f3-2b01-4363-9e17-aea861260ee3\nconst addressOptions = {\n  Sweat: \"cb8bc5ce-fc6b-4bf6-9c65-7b23c8993d6d\",\n  \"NEAR Crowd\": \"0f13df92-6c4c-4807-b47a-c956e9615a6f\",\n  \"Aurora Faucet\": \"e42ce4b7-8768-43bf-85a9-37efcae037e9\",\n  Spin: \"91d23b3b-bd94-40fe-9e75-b8a6138c2a6d\",\n  \"Ref Finance\": \"013c4172-37fe-42d8-9be3-d1f84f5db5db\",\n  Orderly: \"fb86b38c-c509-49e4-8b32-130136dfa624\",\n  PlayEmber: \"ff831c8d-4672-4c02-b60b-47e0c4a6a10f\",\n  Tonic: \"91e9e1be-3276-48d9-bc6d-91211f4aeb78\",\n  \"Near Wrapper\": \"4f0fae62-c0dc-4baa-b4e3-bd28d2089801\",\n  \"Tether  (USDT)\": \"37e17536-184d-4890-a34f-c9e13333c2c0\",\n  \"Circle  (USDC)\": \"60652152-43ab-46ca-8072-5c19aa05669d\",\n  Paras: \"d18c351f-750c-4e83-b262-f248356a8739\",\n  \"Learn Near Club\": \"d0b3e412-d89b-414a-9191-03423e21c563\",\n};\n\nState.init({\n  startDate: \"2023-01-01\",\n  endDate: \"2023-12-31\",\n  addresses: [],\n  customAddresses: [],\n  isActivitiesSqlRunning: false,\n  data: [],\n});\n\n/** input functions */\nconst onAddressSelectValueChange = (value) => {\n  State.update({\n    addresses: value,\n    data: [],\n  });\n};\n\nconst onCustomAddressesValueChange = ({ target }) => {\n  let customAddresses = target.value.split(\",\");\n  State.update({\n    customAddresses,\n  });\n};\n\nconst onStartDateChange = ({ target }) => {\n  State.update({\n    startDate: target.value,\n    data: [],\n  });\n};\n\nconst onEndDateChange = ({ target }) => {\n  State.update({\n    endDate: target.value,\n    data: [],\n  });\n};\n\nconst getData = () => {\n  // clear data\n  if (state.addresses.length === 0) {\n    return;\n  }\n\n  State.update({ data: [], isActivitiesSqlRunning: true });\n\n  let urls = state.addresses.map(\n    (x) =>\n      `https://api.flipsidecrypto.com/api/v2/queries/${addressOptions[x]}/data/latest`\n  );\n  let data = [];\n  let loaded = 0;\n  urls.forEach((url) => {\n    asyncFetch(url).then((res) => {\n      if (!res.ok) {\n        return;\n      }\n\n      loaded++;\n      data.push(...res.body);\n\n      // fully loaded\n      if (loaded === urls.length) {\n        State.update({\n          isActivitiesSqlRunning: false,\n          data,\n        });\n      }\n    });\n  });\n};\n\n/** Main component */\nconst Component = () => {\n  if (state.isActivitiesSqlRunning) {\n    return (\n      <button disabled className=\"btn btn-primary w-100\">\n        <div className=\"d-flex flex-row justify-content-center align-items-center w-100\">\n          <i className=\"spinner-grow spinner-grow-sm me-3\"></i>\n          <span>Getting Data...</span>\n        </div>\n      </button>\n    );\n  }\n\n  return (\n    <button onClick={getData} className=\"btn btn-primary w-100\">\n      <div className=\"d-flex flex-row justify-content-center align-items-center w-100\">\n        <span>Search</span>\n      </div>\n    </button>\n  );\n};\n\n/** Page Layout */\nconst Layout = () => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-6 mb-3\">\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">\n                <span>From</span>\n              </span>\n            </div>\n            <input\n              type=\"DATE\"\n              onChange={onStartDateChange}\n              className=\"form-control\"\n              value={state.startDate}\n              disabled={state.isActivitiesSqlRunning}\n              // onBlur={getData}\n            />\n          </div>\n        </div>\n        <div className=\"col-6 mb-3\">\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">\n                <span>To</span>\n              </span>\n            </div>\n            <input\n              type=\"DATE\"\n              onChange={onEndDateChange}\n              className=\"form-control\"\n              value={state.endDate}\n              disabled={state.isActivitiesSqlRunning}\n              // onBlur={getData}\n            />\n          </div>\n        </div>\n        <div className=\"col-12 mb-3\">\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">\n                <span>Addresses</span>\n              </span>\n            </div>\n            <Typeahead\n              options={Object.keys(addressOptions)}\n              multiple\n              onChange={onAddressSelectValueChange}\n              placeholder=\"Choose a project(s)..\"\n              disabled={state.isActivitiesSqlRunning}\n              selected={state.addresses}\n            />\n          </div>\n        </div>\n        <div\n          className={`col-12 mb-3 ${\n            state.addresses.includes(\"Custom\") ? \"\" : \"d-none\"\n          }`}\n        >\n          <div className=\"d-flex flex-column\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onChange={onCustomAddressesValueChange}\n              value={state.customAddresses.join(\",\")}\n              placeholder=\"Separate addresses using a comma, eg. Project1,Project2\"\n              disabled={state.isActivitiesSqlRunning}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\n// \"USERS\": 0,\n//\"TRANSACTIONS\": 0,\n//\"CALL_CONTRACTS\": 0,\n//\"NEAR_AMOUNT\": 20778.625208997,\n//\"AVG_NEAR_AMOUNT\": 164.909723881,\n//\"GAS_AMOUNT\": 0.01069878758,\n//\"AVG_GAS_AMOUNT\": 0.0000849110125\n\n// rerendering issues need to be solved\nconst Graphs = () => {\n  let { data } = state;\n\n  let txByDate = {};\n\n  let totalTransactions = 0;\n  let totalVolume = 0;\n  let totalGas = 0;\n  let totalCallContracts = 0;\n\n  let maxTransaction = 0;\n  let maxUser = 0;\n  let maxContractCalls = 0;\n  let maxVolume = 0;\n  let maxAvgAmount = 0;\n  let maxGas = 0;\n  let maxAvgGasAmount = 0;\n  let startDateTimestamp = new Date(state.startDate).getTime();\n  let endDateTimestamp = new Date(state.endDate).getTime();\n\n  let lowerAddressOptions = state.addresses.map((x) => x.toLowerCase());\n\n  let newData = [];\n  let years = [];\n\n  data.forEach((x) => {\n    let xDate = new Date(x.DATE);\n    let year = xDate.getFullYear();\n    let timestamp = xDate.getTime();\n\n    // filter time\n    if (timestamp < startDateTimestamp || timestamp > endDateTimestamp) {\n      return;\n    }\n\n    if (!years.includes(year)) {\n      years.push(year);\n    }\n\n    // filter addresses\n    if (!lowerAddressOptions.includes(x.PROJECT_NAME)) {\n      return;\n    }\n\n    totalTransactions += x.TRANSACTIONS;\n    totalVolume += x.NEAR_AMOUNT;\n    totalGas += x.GAS_AMOUNT;\n    totalCallContracts += x.CALL_CONTRACTS;\n    maxUser = maxUser < x.USERS ? x.USERS : maxUser;\n    maxContractCalls =\n      maxContractCalls < x.CALL_CONTRACTS ? x.CALL_CONTRACTS : maxContractCalls;\n    maxVolume = maxVolume < x.NEAR_AMOUNT ? x.NEAR_AMOUNT : maxVolume;\n    maxAvgAmount =\n      maxAvgAmount < x.AVG_NEAR_AMOUNT ? x.AVG_NEAR_AMOUNT : maxAvgAmount;\n    maxGas = maxGas < x.GAS_AMOUNT ? x.GAS_AMOUNT : maxGas;\n    maxAvgGasAmount =\n      maxAvgGasAmount < x.AVG_GAS_AMOUNT ? x.AVG_GAS_AMOUNT : maxAvgGasAmount;\n\n    if (!txByDate[x.DATE]) {\n      txByDate[x.DATE] = 0;\n    }\n\n    txByDate[x.DATE] += x.TRANSACTIONS;\n    newData.push(x);\n  });\n\n  let txByDateArray = [];\n  for (const [DATE, TRANSACTIONS] of Object.entries(txByDate)) {\n    txByDateArray.push({ DATE, TRANSACTIONS });\n    maxTransaction =\n      maxTransaction < TRANSACTIONS ? TRANSACTIONS : maxTransaction;\n  }\n\n  return (\n    <>\n      {state.data.length > 0 && (\n        <>\n          <div className=\"mt-5\"></div>\n          <div className=\"row mb-3\">\n            <div className=\"col-sm-12 col-lg-4 p-2\">\n              <div className=\"card shadow p-3 d-flex flex-column align-items-center justify-content-center\">\n                <span>Total Transactions</span>\n                <strong style={{ fontSize: 25 }}>\n                  {totalTransactions.toLocaleString(\"en\", {\n                    maximumFractionDigits: 0,\n                    minimumFractionDigits: 0,\n                  })}\n                </strong>\n              </div>\n            </div>\n            <div className=\"col-sm-12 col-lg-4 p-2\">\n              <div className=\"card shadow p-3 d-flex flex-column align-items-center justify-content-center\">\n                <span>Total Near Volume (NEAR)</span>\n                <strong style={{ fontSize: 25 }}>\n                  {totalVolume.toLocaleString(\"en\", {\n                    maximumFractionDigits: 2,\n                    minimumFractionDigits: 2,\n                  })}\n                </strong>\n              </div>\n            </div>\n            <div className=\"col-sm-12 col-lg-4 p-2\">\n              <div className=\"card shadow p-3 d-flex flex-column align-items-center justify-content-center\">\n                <span>Total Gas (NEAR)</span>\n                <strong style={{ fontSize: 25 }}>\n                  {totalGas.toLocaleString(\"en\", {\n                    maximumFractionDigits: 2,\n                    minimumFractionDigits: 2,\n                  })}\n                </strong>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-5\"></div>\n\n          {/** Line Chart */}\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Widget\n                src=\"leslug.near/widget/CalendarChartv2\"\n                props={{\n                  dateColumn: \"DATE\",\n                  dataColumn: \"TRANSACTIONS\",\n                  data: txByDateArray,\n                  legendMax: maxTransaction,\n                  legendMin: 0,\n                  label: \"Count\",\n                  title: \"Number of Transactions by Date\",\n                  heightMultiplier: years.length,\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-3\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"USERS\",\n                  data: newData,\n                  legendMax: maxUser,\n                  legendMin: 0,\n                  label: \"Count\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Number of Unique Wallets by Date\",\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-3\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"CALL_CONTRACTS\",\n                  data: newData,\n                  legendMax: maxContractCalls,\n                  legendMin: 0,\n                  label: \"Count\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Number of Contract Calls by Date\",\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-3\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"NEAR_AMOUNT\",\n                  data: newData,\n                  legendMax: maxVolume,\n                  legendMin: 0,\n                  label: \"Volume\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"NEAR Volume by Date\",\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-3\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"AVG_NEAR_AMOUNT\",\n                  data: newData,\n                  legendMax: maxAvgAmount,\n                  legendMin: 0,\n                  label: \"Volume\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Average Near Volume by Date\",\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-3\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"GAS_AMOUNT\",\n                  data: newData,\n                  legendMax: maxGas,\n                  legendMin: 0,\n                  label: \"Gas Used\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Gas Used by Date\",\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-3\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"AVG_GAS_AMOUNT\",\n                  data: newData,\n                  legendMax: maxAvgGasAmount,\n                  legendMin: 0,\n                  label: \"Gas Used\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Average Gas Used by Date\",\n                }}\n              />\n            </div>\n\n            {/** Area Chart */}\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-5\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"CUM_NEAR_AMOUNT\",\n                  data: newData,\n                  legendMax: totalVolume,\n                  legendMin: 0,\n                  label: \"Volume\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Cumulative Volume (NEAR)\",\n                }}\n              />\n            </div>\n            <div className=\"col-sm-12 col-lg-6\">\n              <Widget\n                src=\"kida.near/widget/Untitled-5\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"CUM_TRANSACTIONS\",\n                  data: newData,\n                  legendMax: totalTransactions,\n                  legendMin: 0,\n                  label: \"Count\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Cumulative Number of TRANSACTIONS\",\n                }}\n              />\n            </div>\n            <div className=\"col-12\">\n              <Widget\n                src=\"kida.near/widget/Untitled-5\"\n                props={{\n                  xColumn: \"DATE\",\n                  yColumn: \"CUM_CALL_CONTRACTS\",\n                  data: newData,\n                  legendMax: totalCallContracts,\n                  legendMin: 0,\n                  label: \"Count\",\n                  strokeColumn: \"PROJECT_NAME\",\n                  isXDate: true,\n                  title: \"Cumulative Contract Calls\",\n                }}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nreturn (\n  <div className=\"p-2\" style={{ minHeight: \"60vh\" }}>\n    {/* <iframe className=\"w-100\" style={{ height: \"300px\" }} srcDoc={content} /> */}\n\n    <Layout />\n\n    <Component />\n\n    <Graphs />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/NearContractVisualizerV2", "fact_widget_deployments_id": "69b62632fa893eec65b39e079f5fc43b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 18}