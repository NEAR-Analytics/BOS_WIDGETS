{"tx_hash": "5tMHaQPWydS3yGtg5iQdndKA96N6KDdpTshhPML7oCXt", "action_id_social": "FZmydyQ4VHX6TDWTxwNj6L7nz38Us6i9Tt1d4acmNz3w-0-widget", "block_id": 99101370, "block_timestamp": "2023-08-18T16:29:29.738Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Onboarding.Starter-fork", "source_code": "const nftAddress = \"0x81e45a0a35d95b52a237a92f07686d6bca4107a7\";\nconst NFTManagerABI = [\n  {\n    inputs: [],\n    stateMutability: \"payable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"nftContract\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n    ],\n    name: \"NFTListed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"nftContract\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n    ],\n    name: \"NFTSold\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n      {\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"addStore\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_nftContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveTransaction\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllStores\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"string\",\n            name: \"storeName\",\n            type: \"string\",\n          },\n          {\n            internalType: \"address\",\n            name: \"storeAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct NFTManager.storeDetails[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMyActiveTransactions\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"nftContract\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"tokenId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"storeAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"store\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct NFTManager.NFT[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"getStoreActiveTransactions\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"nftContract\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"tokenId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"storeAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"store\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct NFTManager.NFT[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_nftContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"_storeAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n    ],\n    name: \"initTransaction\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stores\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"storeName\",\n        type: \"string\",\n      },\n      {\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst walleyAddress = \"0x77b554ea3feff230884fc9e73e9119014e17a246\";\nconst WalleyABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_marketplaceContract\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_fromTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_toTokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"BatchMetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"NFTMinted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getToken\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nState.init({\n  chainId: undefined,\n  balance: 0,\n  stores: [],\n  isStore: false,\n  storeName: \"\",\n  storeAddress: \"\",\n  storePendingTransactions: [],\n  amount: 0,\n  name: \"\",\n});\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n  // console.log(sender);\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Ethereum Sepolia</p>;\n}\n// console.log(NFTManagerABI);\nconst nftIface = new ethers.utils.Interface(NFTManagerABI);\n// console.log(\"hehe\");\nconst nftContract = new ethers.Contract(\n  nftAddress,\n  NFTManagerABI,\n  Ethers.provider().getSigner()\n);\nconst walleyIface = new ethers.utils.Interface(WalleyABI);\nconst walleyContract = new ethers.Contract(\n  walleyAddress,\n  WalleyABI,\n  Ethers.provider().getSigner()\n);\n\nif (state.stores.length == 0) {\n  console.log(\"hee\");\n  nftContract\n    .getAllStores()\n    .then((stores) => {\n      console.log(stores);\n      State.update({\n        stores,\n      });\n    })\n    .then(() => {\n      state.stores.map((store) => {\n        if (store.address == sender)\n          State.update({\n            isStore: true,\n            storeName: store.storeName,\n            storeAddress: store.storeAddress,\n          });\n      });\n      // console.log(state.stores);\n    });\n}\n\nif (store.storeAddress !== \"\" && isStore && storePendingTransactions == []) {\n  nft.getStoreActiveTransactions(state.storeAddress).then((stores) => {\n    State.update({\n      storePendingTransactions: stores,\n    });\n  });\n}\n\nconst initTransaction = () => {\n  // walleyContract.mint({ from: sender }).then((t) => {\n  // console.log(\"minted\");\n  // List the NFT\n  console.log(state.name);\n  walleyContract.getToken().then((tokenId) => {\n    nftContract.initTransaction(\n      walleyAddress,\n      state.name,\n      tokenId,\n      `${Math.pow(state.amount, 18)}`,\n      state.storeAddress,\n      state.storeName,\n      {\n        from: sender,\n        value: ethers.utils.parseUnits(`${state.amount}`, 18),\n      }\n    );\n    // .then(() => console.log(\"done\"))\n    // .catch((err) => console.log(err));\n  });\n  // });\n  // .catch((err) => console.log(\"hhhh\"));\n};\n\nconst approveTransaction = (tokenId, totalAmount, amount) => {\n  nftContract.approveTransaction(walleyAddress, tokenId, totalAmount, {\n    from: sender,\n    value: ethers.utils.parseUnits(`${amount - totalAmount}`, 18),\n  });\n  // .then(() => console.log(\"done\"))\n  // .catch((err) => console.log(err));\n};\n\nconst addStore = (name, address) => {\n  nftContract.addStore(name, address);\n  // .then(() => console.log(\"done\"))\n  // .catch((err) => console.log(err));\n};\n\nreturn (\n  <>\n    <p>{state.chainId}</p>\n    <p>{state.balance}</p>\n    {!state.isStore ? (\n      <div>\n        <select\n          value={state.storeName}\n          onChange={(e) =>\n            State.update({\n              storeName: e.target.value[0],\n              storeAddress: e.target.value[1],\n            })\n          }\n        >\n          {state.stores.map((store) => {\n            console.log(store);\n            return <option value={[store[0], store[1]]}>{store[0]}</option>;\n          })}\n        </select>\n        <input\n          type=\"number\"\n          value={state.amount}\n          onChange={(e) => State.update({ amount: e.target.value })}\n        />\n        <input\n          type=\"text\"\n          value={state.name}\n          onChange={(e) => State.update({ name: e.target.value })}\n        />\n        <button onClick={initTransaction}>init</button>\n        <button\n          onClick={() => {\n            State.update({ addStore: true });\n          }}\n        >\n          add store\n        </button>\n        {state.addStore ? (\n          <div>\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                State.update({ storeName: e.target.value });\n              }}\n              value={state.storeName}\n            />\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                State.update({ storeAddress: e.target.value });\n              }}\n              value={state.storeAddress}\n            />\n            <button\n              onClick={() => {\n                State.update({ storeAddress: sender });\n              }}\n            >\n              Use current address\n            </button>\n            <button\n              onClick={() => addStore(state.storeName, state.storeAddress)}\n            >\n              Add\n            </button>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    ) : (\n      <div>\n        {state.storePendingTransactions.map((trans) => (\n          <div>\n            <p>{trans.store}</p>\n            <p>{trans.name}</p>\n            <p>{trans.amount}</p>\n            <input onChange={(e) => State.update({ amount: e.targetvalue })} />\n            <button\n              onClick={() =>\n                approveTransaction(trans.tokenId, state.amount, trans.amount)\n              }\n            >\n              Approve\n            </button>\n          </div>\n        ))}\n      </div>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Onboarding.Starter-fork", "fact_widget_deployments_id": "c8a68d581637de2d841d577d70b97fd6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 207}