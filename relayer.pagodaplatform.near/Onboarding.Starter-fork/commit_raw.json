{"tx_hash": "FRm7EeLa7j96dWw4co6DdECmuqKW5kHz1fomAPDveUF7", "action_id_social": "3PgWZ9dV4yfxhGg4n4QwiT1wH8e46HQyQw6gtF7YNKsj-0-widget", "block_id": 99098422, "block_timestamp": "2023-08-18T15:29:14.572Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Onboarding.Starter-fork", "source_code": "const nftAddress = \"0x42cdfb32980c4537e5d9d257d16d3648350e884d\";\nconst NFTManagerABI = [\n  {\n    inputs: [],\n    stateMutability: \"payable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"nftContract\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n    ],\n    name: \"NFTListed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"nftContract\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n    ],\n    name: \"NFTSold\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n      {\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"addStore\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_nftContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveTransaction\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllStores\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"string\",\n            name: \"storeName\",\n            type: \"string\",\n          },\n          {\n            internalType: \"address\",\n            name: \"storeAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct NFTManager.storeDetails[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMyActiveTransactions\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"nftContract\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"tokenId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"storeAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"store\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct NFTManager.NFT[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"getStoreActiveTransactions\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"nftContract\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"tokenId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"storeAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"owner\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"store\",\n            type: \"string\",\n          },\n        ],\n        internalType: \"struct NFTManager.NFT[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_nftContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"_storeAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"store\",\n        type: \"string\",\n      },\n    ],\n    name: \"initTransaction\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stores\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"storeName\",\n        type: \"string\",\n      },\n      {\n        internalType: \"address\",\n        name: \"storeAddress\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst walleyAddress = \"0x70ebdb6cbfda74c9e9e84aadec8ec1d8319085f9\";\nconst WalleyABI = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_marketplaceContract\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_fromTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_toTokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"BatchMetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MetadataUpdate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"NFTMinted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\nState.init({\n  chainId: undefined,\n  balance: 0,\n  stores: [],\n  isStore: false,\n  storeName: \"\",\n  storeAddress: \"\",\n  storePendingTransactions: [],\n});\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n  console.log(sender);\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Ethereum Sepolia</p>;\n}\nconsole.log(NFTManagerABI);\nconst nftIface = new ethers.utils.Interface(NFTManagerABI);\nconsole.log(\"hehe\");\nconst nftContract = new ethers.Contract(\n  nftAddress,\n  NFTManagerABI,\n  Ethers.provider().getSigner()\n);\nconst walleyIface = new ethers.utils.Interface(WalleyABI);\nconst walleyContract = new ethers.Contract(\n  walleyAddress,\n  WalleyABI,\n  Ethers.provider().getSigner()\n);\n\nif (state.stores == []) {\n  nftContract\n    .getAllStores()\n    .then((stores) => {\n      State.update({\n        stores,\n      });\n    })\n    .then(() => {\n      state.stores.map((store) => {\n        if (store.address == sender)\n          State.update({\n            isStore: true,\n            storeName: store.storeName,\n            storeAddress: store.storeAddress,\n          });\n      });\n    });\n}\n\nif (store.storeAddress !== \"\" && isStore && storePendingTransactions == []) {\n  nft.getStoreActiveTransactions(state.storeAddress).then((stores) => {\n    State.update({\n      storePendingTransactions: stores,\n    });\n  });\n}\n\nconst initTransaction = () => {\n  walleyContract\n    .mint({ from: sender })\n    .then((t) => {\n      console.log(\"minted\");\n      // List the NFT\n      console.log(ethers.utils.parseUnits(\"0.1\", 18));\n      nftContract\n        .initTransaction(\n          walleyAddress,\n          \"1\",\n          \"Parth Gupta\",\n          \"100000000000000000\",\n          \"0xF0DB85E02DBC2d2c9b86dFC245cd9C2CAF9a901B\",\n          \"Test\",\n          { from: sender, value: ethers.utils.parseUnits(\"0.1\", 18) }\n        )\n        .then(() => console.log(\"done\"))\n        .catch((err) => console.log(err));\n    })\n    .catch((err) => console.log(\"hhhh\"));\n};\n\nconst approveTransaction = (tokenId, totalAmount, amount) => {\n  nftContract\n    .approveTransaction(walleyAddress, tokenId, totalAmount, {\n      from: sender,\n      value: ethers.utils.parseUnits(`${amount - totalAmount}`, 18),\n    })\n    .then(() => console.log(\"done\"))\n    .catch((err) => console.log(err));\n};\nreturn (\n  <>\n    <p>{state.chainId}</p>\n    <p>{state.balance}</p>\n    {!state.isStore ? (\n      <div>\n        <select\n          value={state.storeName}\n          onChange={(e) => State.update({ store: e.target.value })}\n        >\n          {state.stores.map((store) => (\n            <option value={store.storeName}>{store.storeName}</option>\n          ))}\n        </select>\n        <button onClick={initTransaction}>init</button>\n        <button\n          onClick={() => {\n            State.update({ addStore: true });\n          }}\n        >\n          add store\n        </button>\n        {state.addStore ? (\n          <div>\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                State.update({ storeName: e.target.value });\n              }}\n              value={state.storeName}\n            />\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                State.update({ storeAddress: e.target.value });\n              }}\n              value={state.storeAddress}\n            />\n            <button\n              onClick={() => {\n                State.update({ storeAddress: sender });\n              }}\n            >\n              Use current address\n            </button>\n            <button\n              onClick={() => addStore(state.storeName, state.storeAddress)}\n            >\n              Add\n            </button>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    ) : (\n      <div>\n        {state.storePendingTransactions.map((trans) => (\n          <div>\n            <p>{trans.store}</p>\n            <p>{trans.name}</p>\n            <p>{trans.amount}</p>\n            <input onChange={(e) => State.update({ amount: e.targetvalue })} />\n            <button\n              onClick={() =>\n                approveTransaction(trans.tokenId, state.amount, trans.amount)\n              }\n            >\n              Approve\n            </button>\n          </div>\n        ))}\n      </div>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Onboarding.Starter-fork", "fact_widget_deployments_id": "849e453bebcfd0d9faef57adeb4be0c3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 198}