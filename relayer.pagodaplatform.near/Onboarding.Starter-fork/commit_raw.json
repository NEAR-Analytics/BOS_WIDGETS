{"tx_hash": "4RYiTVPU1cN7CkaBYGqUeH3UmBSvvhHAyFgmwrY4nihT", "action_id_social": "EgEAVZX33ogmmxw2Xq4jji8nw1ibDtwKfXNzkhFdVC53-0-widget", "block_id": 101797584, "block_timestamp": "2023-09-23T20:15:47.936Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Onboarding.Starter-fork", "source_code": null, "metadata": null, "branch": {"draft": {"": "/*\nimport { ChatPromptTemplate, MessagesPlaceholder } from \"langchain/prompts\";\nimport { ConversationChain, LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport promptSync from \"prompt-sync\";\nimport fetch from \"node-fetch\";\nimport { BufferMemory } from \"langchain/memory\";\nimport attributes_json from \"./attributes.json\" assert { type: \"json\" };\n\nconst prompt = promptSync();\n\n// We can also construct an LLMChain from a ChatPromptTemplate and a chat model.\nconst chat = new ChatOpenAI({\n  temperature: 0,\n  openAIApiKey: process.env.OPENAI_GPTVERSE_API_KEY,\n});\n\nconst npc_name = prompt(\"Enter npc name: \");\n\nvar attributes_keys = \"\";\n\nfor (let key in attributes_json[npc_name]) {\n  attributes_keys += `${key}: {${key}}\\n`;\n}\n\nconsole.log(attributes_keys);\n\nconst chatPrompt = ChatPromptTemplate.fromMessages([\n  [\n    \"system\",\n    `You are a NPC from a RPG game.\n         You should sound like a real person, and never say you are an AI.\n         You should use attributes below to act and interact with people.\n    \n         Your Attributes:\n         ${attributes_keys}\n\n         Also chat history is below:\n         {chat_memory}\n         `,\n  ],\n  // new MessagesPlaceholder(\"chat_memory\"),\n  [\"human\", \"{human_input}\"],\n]);\n\nconst chainB = new ConversationChain({\n  memory: new BufferMemory({\n    memoryKey: \"chat_memory\",\n    inputKey: \"human_input\",\n  }),\n  prompt: chatPrompt,\n  llm: chat,\n});\n\nwhile (true) {\n  var user_input = prompt(\"Human: \");\n  var inputs = attributes_json[npc_name];\n  inputs[\"human_input\"] = user_input;\n  console.log(inputs);\n\n  const resB = await chainB.call(inputs);\n  console.log({ resB });\n  // { resB: { text: \"J'adore la programmation.\" } }\n}\n*/\nreturn (\n  <>\n    {/* src=\"near/widget/Onboarding.ComponentCard\" to be pasted below */}\n    <Widget src=\"near/widget/Onboarding.ComponentCard\" props={{ accountId }} />\n    <br />\n    {/* src=\"near/widget/Onboarding.ComponentCollection\" to be pasted below */}\n    <Widget src=\"near/widget/Onboarding.ComponentCollection\" props={{}} />\n  </>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Onboarding.Starter-fork", "fact_widget_deployments_id": "3a772999a04866e418a4a074b211900a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 429}