{"tx_hash": "FMbDNALkSmqAJFaUj6cVfK4drRAj1npQ2NPnF5jXocmH", "action_id_social": "G1X55kNM3TkdoWSCdXeb4x3B5iFjRQ6uTMr3yPRCSjWF-0-widget", "block_id": 106855624, "block_timestamp": "2023-11-30T07:51:37.703Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Donation.Project.Create", "source_code": null, "metadata": null, "branch": {"draft": {"": "/**\n * Require a project link\n */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId || \"devgovgigs.near\".split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId || \"devgovgigs.near\".split(\"/\", 1)[0];\nconst prependTitle = \"Project : \";\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nconst autocompleteEnabled = true;\nconst AutoComplete = styled.div`\n  z-index: 5;\n\n  > div > div {\n    padding: calc(var(--padding) / 2);\n  }\n`;\n\nfunction textareaInputHandler(value) {\n  const showAccountAutocomplete = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text: value, showAccountAutocomplete });\n}\nfunction textareaInputHandlerTeam(value) {\n  const showAccountAutocompleteTeam = /@[\\w][^\\s]*$/.test(value);\n  State.update({ text1: value, showAccountAutocompleteTeam });\n}\nfunction autoCompleteAccountIdTeam(id) {\n  let description = state.teammates.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  let teammates = `${description} @${id}`.trim() + \" \";\n  State.update({ teammates, showAccountAutocompleteTeam: false });\n}\n\nfunction autoCompleteAccountId(id) {\n  let description = state.description.replace(/[\\s]{0,1}@[^\\s]*$/, \"\");\n  description = `${description} @${id}`.trim() + \" \";\n  State.update({ description, showAccountAutocomplete: false });\n}\n/* END_INCLUDE: \"core/lib/autocomplete\" */\n\nconst DRAFT_STATE_STORAGE_KEY = \"DRAFT_STATE\";\nconst parentId = props.parentId ?? null;\nconst postId = props.postId ?? null;\nconst mode = props.mode ?? \"Create\";\n\nconst referralLabels = props.referral ? [`${props.referral}`] : [];\nconst labelStrings = (props.labels ? props.labels.split(\",\") : []).concat(\n  referralLabels\n);\n\nconst labels = labelStrings.map((s) => {\n  return { name: s };\n});\n\ninitState({\n  seekingFunding: false,\n  selectedElements: [],\n\n  //\n  author_id: context.accountId,\n  // Should be a list of objects with field \"name\".\n  labels,\n  // Should be a list of labels as strings.\n  // Both of the label structures should be modified together.\n  labelStrings,\n  //postType: \"Solution\",\n  name: props.name ?? \"\",\n  description: props.description ?? \"\",\n  category: props.category ?? \"\",\n  teammates: \"\",\n  amount: props.amount ?? \"\",\n  token: props.token ?? \"USDT\",\n  supervisor: props.supervisor ?? \"neardevgov.near\",\n  githubLink: props.githubLink ?? \"\",\n  warning: \"\",\n  waitForDraftStateRestore: true,\n});\n\nif (state.waitForDraftStateRestore) {\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\n  if (draftstatestring != null) {\n    if (props.transactionHashes) {\n      State.update({ waitForDraftStateRestore: false });\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\n    } else {\n      try {\n        const draftstate = JSON.parse(draftstatestring);\n        State.update(draftstate);\n      } catch (e) {\n        console.error(\"error restoring draft\", draftstatestring);\n      }\n    }\n    State.update({ waitForDraftStateRestore: false });\n  }\n}\n\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\nlet grantNotify = Near.view(\"social.near\", \"is_write_permission_granted\", {\n  predecessor_id: nearDevGovGigsContractAccountId,\n  key: context.accountId + \"/index/notify\",\n});\nif (grantNotify === null) {\n  return;\n}\n\nconst onSubmit = () => {\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\n\n  let body = {\n    description: generateDescription(\n      state.description,\n      state.amount,\n      state.token,\n      state.supervisor\n    ),\n  };\n\n  if (!context.accountId) return;\n\n  let txn = [];\n  if (mode == \"Create\") {\n    txn.push({\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_post\",\n      args: {\n        name: state.name,\n        description: body.description,\n      },\n      deposit: Big(10).pow(21).mul(3),\n      gas: Big(10).pow(12).mul(100),\n    });\n  }\n  Near.call(txn);\n  //   if (mode == \"Create\" || mode == \"Edit\") {\n  //     if (grantNotify === false) {\n  //       txn.unshift({\n  //         contractName: \"social.near\",\n  //         methodName: \"grant_write_permission\",\n  //         args: {\n  //           predecessor_id: nearDevGovGigsContractAccountId,\n  //           keys: [context.accountId + \"/index/notify\"],\n  //         },\n  //         deposit: Big(10).pow(23),\n  //         gas: Big(10).pow(12).mul(30),\n  //       });\n  //     }\n\n  //   }\n};\n\nconst nameDiv = (\n  <div className=\"col-lg-6 mb-2\">\n    <p className=\"fs-4 fw-bold mb-1\">Project Name</p>\n    <input\n      type=\"text\"\n      value={state.name}\n      onChange={(event) => State.update({ name: event.target.value })}\n    />\n  </div>\n);\n\nconst descriptionDiv = (\n  <div className=\"col-lg-12 mb-2\">\n    <p className=\"fs-4 fw-bold mb-1\">Description</p>\n    <p class=\"text-muted w-75 my-1\"> Tell us about project story </p>\n    <textarea\n      value={state.description}\n      type=\"text\"\n      rows={6}\n      className=\"form-control\"\n      onInput={(event) => textareaInputHandler(event.target.value)}\n      onKeyUp={(event) => {\n        if (event.key === \"Escape\") {\n          State.update({ showAccountAutocomplete: false });\n        }\n      }}\n      onChange={(event) => State.update({ description: event.target.value })}\n    />\n    {autocompleteEnabled && state.showAccountAutocomplete && (\n      <AutoComplete>\n        <Widget\n          src=\"near/widget/AccountAutocomplete\"\n          props={{\n            term: state.text.split(\"@\").pop(),\n            onSelect: autoCompleteAccountId,\n            onClose: () => State.update({ showAccountAutocomplete: false }),\n          }}\n        />\n      </AutoComplete>\n    )}\n  </div>\n);\n\nconst isFundraisingDiv = (\n  // This is jank with just btns and not radios. But the radios were glitchy af\n  <>\n    <div class=\"mb-2\">\n      <p class=\"fs-6 fw-bold mb-1\">\n        Are you seeking funding for your solution?\n        <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: true })}\n          />\n          Yes\n        </label>\n      </div>\n      <div class=\"form-check form-check-inline\">\n        <label class=\"form-check-label\">\n          <button\n            className=\"btn btn-light p-0\"\n            style={{\n              backgroundColor: !state.seekingFunding ? \"#0C7283\" : \"inherit\",\n              color: \"#f3f3f3\",\n              border: \"solid #D9D9D9\",\n              borderRadius: \"100%\",\n              height: \"20px\",\n              width: \"20px\",\n            }}\n            onClick={() => State.update({ seekingFunding: false })}\n          />\n          No\n        </label>\n      </div>\n    </div>\n  </>\n);\n\nconst fundraisingDiv = (\n  <div class=\"d-flex flex-column mb-2\">\n    <div className=\"col-lg-6  mb-2\">\n      Currency\n      <select\n        onChange={(event) => State.update({ token: event.target.value })}\n        class=\"form-select\"\n        aria-label=\"Default select\"\n      >\n        <option selected value=\"USDT\">\n          USDT\n        </option>\n        <option value=\"NEAR\">NEAR</option>\n      </select>\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      Requested amount <span class=\"text-muted fw-normal\">(Numbers Only)</span>\n      <input\n        type=\"number\"\n        value={parseInt(state.amount) > 0 ? state.amount : \"\"}\n        min={0}\n        onChange={(event) =>\n          State.update({\n            amount: Number(\n              event.target.value.toString().replace(/e/g, \"\")\n            ).toString(),\n          })\n        }\n      />\n    </div>\n    <div className=\"col-lg-6 mb-2\">\n      <p class=\"mb-1\">\n        Requested sponsor <span class=\"text-muted fw-normal\">(Optional)</span>\n      </p>\n      <p style={{ fontSize: \"13px\" }} class=\"m-0 text-muted fw-light\">\n        If you are requesting funding from a specific sponsor, please enter\n        their username.\n      </p>\n      <div class=\"input-group flex-nowrap\">\n        <span class=\"input-group-text\" id=\"addon-wrapping\">\n          @\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Enter username\"\n          value={state.supervisor}\n          onChange={(event) => State.update({ supervisor: event.target.value })}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nfunction generateDescription(text, amount, token, supervisor) {\n  const categoryLine = `\\n###### \ud83d\udcb0 Category:  ${category}\\n`;\n  //const locationmap =\n  const newText = text;\n\n  if (category.length > 0) newText += categoryLine;\n\n  const funding = `###### Requested amount: ${amount} ${token}\\n###### Requested sponsor: @${supervisor}\\n`;\n  if (amount > 0 && token && supervisor) return funding + text;\n  return newText;\n}\n\nreturn (\n  <div class=\"bg-light d-flex flex-column flex-grow-1\">\n    <div class=\"mx-5 mb-5\">\n      {props.transactionHashes ? (\n        <>\n          Succesfull submission. Back to{\" \"}\n          <a\n            style={{\n              color: \"#3252A6\",\n            }}\n            className=\"fw-bold\"\n          >\n            feed\n          </a>\n        </>\n      ) : (\n        <>\n          <p>{state.seekingFunding}</p>\n          <div class=\"card border-light\">\n            <div class=\"card-body\">\n              <h1 class=\"card-title fw-bold fs-1\">Donation HUB</h1>\n\n              {state.warning && (\n                <div\n                  class=\"alert alert-warning alert-dismissible fade show\"\n                  role=\"alert\"\n                >\n                  {state.warning}\n                  <button\n                    type=\"button\"\n                    class=\"btn-close\"\n                    data-bs-dismiss=\"alert\"\n                    aria-label=\"Close\"\n                    onClick={() => State.update({ warning: \"\" })}\n                  ></button>\n                </div>\n              )}\n              <div className=\"row\">\n                {nameDiv}\n                {descriptionDiv}\n                {categoryDiv}\n                {fundraisingDiv}\n              </div>\n              <button\n                style={{\n                  width: \"7rem\",\n                  backgroundColor: \"#0C7283\",\n                  color: \"#f3f3f3\",\n                }}\n                className=\"btn btn-light mb-2 p-3\"\n                onClick={onSubmit}\n              >\n                Post\n              </button>\n            </div>\n            <div class=\"bg-light d-flex flex-row p-1 border-bottom\"></div>\n            <div class=\"card-body\">\n              <p class=\"text-muted m-0\">Preview</p>\n              <div>\n                {widget(\"entity.post.Post\", {\n                  isPreview: true,\n                  id: 0, // irrelevant\n                  post: {\n                    author_id: state.author_id,\n                    likes: [],\n                    snapshot: {\n                      editor_id: state.editor_id,\n                      labels: state.labelStrings,\n                      post_type: state.postType,\n                      name: prependTitle + state.name,\n                      description: generateDescription(\n                        state.description,\n                        state.amount,\n                        state.token,\n                        state.supervisor\n                      ),\n                      github_link: state.githubLink,\n                    },\n                  },\n                })}\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Donation.Project.Create", "fact_widget_deployments_id": "64958d846948c033eaa6beed8ebc3a37", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}