{"tx_hash": "4obFXtFWG3dEYJ3W5kRT4AV3KegnHfdFEeWEgeFDnvtm", "action_id_social": "7NpZkWY8QbHkbaex3wEbfoAMzoJWNpExSs24HSJVNWM6-0-widget", "block_id": 96431864, "block_timestamp": "2023-07-14T05:58:39.503Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "horizon-fork", "source_code": null, "metadata": null, "branch": {"draft": {"": "const ownerId = \"nearhorizon.near\";\n\nState.init({\n  search: props.search ?? \"\",\n  content: props.content,\n  tab: props.tab ?? \"home\",\n  accountId: props.accountId,\n  entityId: props.entityId,\n  contributorId: props.contributorId,\n  kind: props.kind,\n  cid: props.cid,\n  projectId: props.projectId,\n  vendorId: props.vendorId,\n  tnc: true,\n  tncIsFetched: false,\n  transactionHashes: props.transactionHashes,\n});\n\nif (context.accountId && !state.tncIsFetched) {\n  Near.asyncView(\n    \"social.near\",\n    \"get\",\n    {\n      keys: [\n        `${context.accountId}/profile/horizon_tnc`,\n        `${context.accountId}/index/tosAccept`,\n      ],\n    },\n    \"final\",\n    false\n  ).then((data) =>\n    State.update({\n      tnc: data[context.accountId]?.profile?.horizon_tnc === \"true\",\n      tosAccept:\n        data[context.accountId]?.index?.tosAccept &&\n        data[context.accountId]?.index?.tosAccept.length > 0,\n      tncIsFetched: true,\n    })\n  );\n}\n\nconst update = (state) => State.update(state);\n\nconst tabContentWidget = {\n  home: \"Dashboard\",\n  inbox: \"Inbox\",\n  manage: \"Manage\",\n  project: \"Project.Page\",\n  request: \"Request.Page\",\n  vendor: \"Vendor.Page\",\n  backer: \"Investor.Page\",\n  contribution: \"Contribution.Page\",\n  createproject: \"Project.Form\",\n  createrequest: \"Request.Form\",\n  createvendor: \"Vendor.Form\",\n  createbacker: \"Investor.Form\",\n  permissions: \"Inputs.SetUpPermissions\",\n  learn: \"Learn.Page\",\n  faq: \"FAQ.Page\",\n  help: \"Help.Page\",\n  legal: \"TNCPage\",\n  admin: \"Admin.Page\",\n  projects: \"Project.ListPage\",\n  investors: \"Investor.ListPage\",\n  backers: \"Investor.ListPage\",\n  vendors: \"Vendor.ListPage\",\n  contributors: \"Vendor.ListPage\",\n  requests: \"Request.ListPage\",\n  partners: \"Application.Page\",\n  partner: \"Application.DetailPage\",\n  \"my-projects\": \"Manage.Projects\",\n  \"my-requests\": \"Manage.Requests\",\n  \"my-contracts\": \"Manage.Contracts\",\n  \"my-applications\": \"Manage.Applications\",\n}[state.tab];\n\nconst tabContent = (\n  <Widget\n    src={`${ownerId}/widget/${tabContentWidget}`}\n    props={{\n      update,\n      search: state.search,\n      content: state.content,\n      tab: state.tab,\n      accountId: state.accountId,\n      entityId: state.entityId,\n      contributorId: state.contributorId,\n      projectId: state.projectId,\n      vendorId: state.vendorId,\n      kind: state.kind,\n      cid: state.cid,\n      transactionHashes: state.transactionHashes,\n      urlProps: props,\n    }}\n  />\n);\n\nconst ContentContainer = styled.div`\n  width: 100%;\n  background: #ffffff;\n  border: 1px solid #eceef0;\n  border-radius: 24px 24px 0px 0px;\n  padding: 3em;\n\n  &.form {\n    border: none;\n    background: #fafafa;\n  }\n\n  * {\n    margin: 0;\n  }\n`;\n\nconst Sidebar = styled.div`\n  display: ${({ show }) => (show ? \"flex\" : \"none\")};\n  flex-direction: row;\n  position: sticky;\n  top: 0;\n\n  @media screen and (max-width: 768px) {\n    & > div {\n      &:last-child {\n        display: none;\n      }\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    & > div {\n      &:first-child {\n        display: none;\n      }\n    }\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  width: 100%;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Container = styled.div``;\n\nconst showSidebar = ![\n  \"createproject\",\n  \"createrequest\",\n  \"createvendor\",\n  \"createbacker\",\n  \"permissions\",\n  \"legal\",\n].includes(state.tab);\nconst isForm = [\n  \"createproject\",\n  \"createrequest\",\n  \"createvendor\",\n  \"createbacker\",\n].includes(state.tab);\n\nreturn (\n  <Container>\n    <Widget src={`${ownerId}/widget/Help.FeedbackButton`} props={{ update }} />\n    <Widget\n      src={`${ownerId}/widget/TNCModal`}\n      props={{\n        open: !state.tnc && state.tosAccept,\n        accept: () =>\n          Social.set(\n            { profile: { horizon_tnc: true } },\n            {\n              onCommit: () => {\n                State.update({ tnc: true });\n              },\n            }\n          ),\n      }}\n    />\n    <Widget src={`${ownerId}/widget/NavbarControl`} props={{ update }} />\n    <Content>\n      <Sidebar show={showSidebar}>\n        <Widget\n          src={`${ownerId}/widget/Sidebar`}\n          props={{ tab: state.tab, update, collapsible: true }}\n        />\n        <Widget\n          src={`${ownerId}/widget/Sidebar`}\n          props={{ tab: state.tab, update, collapsible: false }}\n        />\n      </Sidebar>\n      <ContentContainer className={isForm ? \"form\" : \"\"}>\n        {tabContent}\n      </ContentContainer>\n    </Content>\n  </Container>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/horizon-fork", "fact_widget_deployments_id": "da1b4e23aade93cff824e7f96b46e2f0", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}