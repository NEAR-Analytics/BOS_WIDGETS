{"tx_hash": "2QnVNkcMspiZnBGkaBAHvJZY7yjiHDwuWFPwtbpt5DS6", "action_id_social": "DPSaMCo9k9HMWfhp3oVcqtKW6MogHzo1TL87ttbTWtjg-0-widget", "block_id": 99465622, "block_timestamp": "2023-08-23T10:17:51.192Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "walley", "source_code": "const nftAddress = \"0x2e0f4a4123d0072f46bf67127270a80114541d86\";\nconst NFTManagerABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/NFTManager.json\")\n    .body\n);\nconst walleyAddress = \"0x8ae53c3a6bf7762db9cc7603a290d769020e4e77\";\nconst WalleyABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/Walley.json\")\n    .body\n);\nState.init({\n  general: {\n    chainId: undefined,\n    balance: 0,\n  },\n  store: {\n    stores: [],\n    storeName: \"\",\n    storeAddress: \"\",\n    isStore: false,\n    storePendingTransactions: [],\n    storePastTransactions: [],\n    storeImages: {},\n    openModal: 0,\n    approvePassword: \"\",\n    bill: { uploading: false, cid: null },\n    totalAmount: 0,\n  },\n  user: {\n    userPendingTransactions: [],\n    userPastTransactions: [],\n    openModal: 0,\n    cancelPassword: \"\",\n    openReceipt: 0,\n  },\n  homeInputs: {\n    storeName: \"\",\n    amount: 0,\n    name: \"\",\n    password: \"\",\n  },\n  storeInputs: {\n    storeName: \"\",\n    storeAddress: \"\",\n    image: \"\",\n  },\n  storeName: \"\",\n  view: \"home\",\n  loading: true,\n  loadingMsg: \"Fetching Data\",\n});\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800;900&display=swap\"\n).body;\n\nconst Root = styled.div`\n    width: 100%;\n    display: flex;\n    font-family: Poppins, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    flex-direction: column;\n    padding: 0;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n`;\n\nconst WalleyTitle = styled.div`\n    text-align: left;\n    font-weight: 900;\n    width: 100%;\n    font-size: 30px;\n    margin: 0px;\n    padding: 5px;\n    color: #fff; \n    media screen and (max-width: 600px) {\n        font-size: 20px;\n    }\n`;\n\nconst WalleyIndexContainer = styled.div`\n    background: url(\"https://img.freepik.com/free-vector/abstract-black-shapes-background-design_1017-31904.jpg?w=826&t=st=1692784084~exp=1692784684~hmac=640a88623947cac46d90337f2d03281af01efcdcd5aa64901719774754bd75b3\");\n    background-size: cover;\n    height: 100vh;\n    color: #fff;\n    width: 100%;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst WalleyIndexBody = styled.div`\n  margin: 50px;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  width: 500px;\n`;\n\nconst WalleyIndexDesc = styled.div`\n    color: #fff;\n    font-weight: 600;\n    font-size: 60px;\n    padding-bottom: 10px;\n    @media screen and (max-width: 600px) {\n        font-size: 25px;\n        font-weight: 700;\n    }\n`;\n\nconst WalleyIndexMain = styled.div`\n    font-weight: 500;\n    text-align: center;\n    &>button {\n        border: none;\n        background: orange;\n        color: white;\n        margin-left: 10px;\n    }\n`;\n\nconst WalleyHomeContainer = styled.div`\n    box-shadow: 12px 0px 0px 5px #000D1A;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst WalleyHomeHeader = styled.div`\n    background-color: orange;\n    width: 100%;\n    height: 70px;\n    font-size: 20px;\n    font-weight: 900;\n    padding: 10px;\n    position: relative;\n    top: 0px;\n\n`;\n\nconst WalleyHomeMain = styled.div`\n    padding: 20px;\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    align-items: space-between;\n`;\n\nconst WalleyNavbar = styled.div`\n    width: 25%;\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    left: 0px;\n`;\n\nconst WalleyNavbarButton = styled.button`\n    border: none;\n    border-bottom: 1px solid #000D1A;\n    text-align: center;\n    background: white;\n    color: #000D1A;\n`;\n\nconst WalleyHomeBody = styled.div`\n  width: 75%;\n`;\n\nconst WalleyBalance = styled.p`\n  font-weight: 700;\n`;\n\nconst WalleyLoading = styled.div`\n  width: 100%;\n  font-weight: 700;\n`;\n\nconst WalleyButton = styled.button`\n  background-color: ${props.bg};\n  color: ${props.color};\n  display: block;\n  border: none;\n`;\n\nconst WalleyHomeForm = styled.div`\n  width: 200px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst WalleyStoreForm = styled.div`\n  width: 200px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst WalleyStoreImage = styled.img`\n  width: 100px;\n  height: 100px;\n  text-align: center;\n`;\n\nconst WalleyInput = styled.input`\n  display: block;\n`;\n\nconst WalleyLabel = styled.p`\n  width: 100%;\n`;\n\nconst WalleyStoreButton = styled.button`\n  border: none;\n  background: none;\n  color: black;\n  display: block;\n`;\n\nconst WalleyTransactions = styled.div`\n`;\n\nconst TransactionCard = styled.div`\n`;\n\nconst WalleyStoreBody = styled.div`\n`;\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst updateBalance = (balance) => {\n  State.update({ balance });\n};\nif (!sender) {\n  return (\n    <Root>\n      <WalleyIndexContainer>\n        <WalleyTitle>Walley.</WalleyTitle>\n        <WalleyIndexBody>\n          <WalleyIndexDesc>Highly Secured NFT-based Wallet.</WalleyIndexDesc>\n          <WalleyIndexMain>\n            Get Started\n            <Web3Connect connectLabel=\"Connect Wallet\" />\n          </WalleyIndexMain>\n        </WalleyIndexBody>\n      </WalleyIndexContainer>\n    </Root>\n  );\n}\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      updateBalance(Big(balance).div(Big(10).pow(18)).toFixed(5));\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Ethereum Sepolia</p>;\n}\nconst nftIface = new ethers.utils.Interface(NFTManagerABI);\nconst nftContract = new ethers.Contract(\n  nftAddress,\n  NFTManagerABI,\n  Ethers.provider().getSigner()\n);\nconst walleyIface = new ethers.utils.Interface(WalleyABI);\nconst walleyContract = new ethers.Contract(\n  walleyAddress,\n  WalleyABI,\n  Ethers.provider().getSigner()\n);\n//get stores data\nif (state.store.stores.length === 0 && nftContract && sender) {\n  walleyContract.getToken().then((tokenId) => {\n    console.log(tokenId);\n  });\n  State.update({ loading: true, loadingMsg: \"Fetching Stores\" });\n  nftContract.getAllStores().then((stores) => {\n    if (stores.length === 0) {\n      State.update({ loading: false, loadingMsg: \"\" });\n    } else {\n      const storeState = state.store;\n      storeState.stores = stores;\n      let store;\n      for (let i = 0; i < stores.length; i++) {\n        store = stores[i];\n        storeState.storeImages[store[0]] = store[2];\n        if (store[1].toLowerCase() === sender) {\n          storeState.isStore = true;\n          storeState.storeName = store[0];\n          storeState.storeAddress = store[1].toLowerCase();\n          State.update({\n            loading: true,\n            loadingMsg: \"Fetching Store Transactions\",\n          });\n          nftContract.getStoreTransactions(store[1]).then((transactions) => {\n            storeState.storePendingTransactions = [];\n            storeState.storePastTransactions = [];\n            transactions.map((txn) => {\n              if (txn[8] === false) {\n                storeState.storePendingTransactions.push(txn);\n              } else {\n                storeState.storePastTransactions.push(txn);\n              }\n            });\n          });\n        }\n        if (i === stores.length - 1)\n          State.update({ store: storeState, loading: false, loadingMsg: \"\" });\n      }\n      console.log(state.store);\n    }\n  });\n}\n\nconst onTxClick = () => {\n  State.update({\n    view: \"tx\",\n    loading: true,\n    loadingMsg: \"Fetching transactions\",\n  });\n  nftContract.getMyTransactions({ from: sender }).then((transactions) => {\n    const st = [];\n    transactions.map((txn) => {\n      if (txn[8] === false) st.push(txn);\n    });\n    State.update({\n      user: { ...state.user, userPendingTransactions: st },\n      loading: false,\n      loadingMsg: \"\",\n    });\n  });\n};\n\nconst onTxPastClick = () => {\n  State.update({\n    view: \"txPast\",\n    loading: true,\n    loadingMsg: \"Fetching past transactions\",\n  });\n  nftContract.getMyTransactions({ from: sender }).then((transactions) => {\n    const st = [];\n    transactions.map((txn) => {\n      if (txn[8] === true) st.push(txn);\n    });\n    State.update({\n      user: { ...state.user, userPastTransactions: st },\n      loading: false,\n      loadingMsg: \"\",\n    });\n  });\n};\n\nconst widgetOptions = () => {\n  const options = [];\n  for (let i = 0; i < state.store.stores.length; i++)\n    options.push({\n      text: state.store.stores[i][0],\n      value: state.store.stores[i][0],\n    });\n  console.log(options);\n  return options;\n};\n\nconst homeInputUpdates = (value, field) => {\n  const homeInputs = state.homeInputs;\n  homeInputs[field] = value;\n  State.update({ homeInputs });\n};\nconst storeInputUpdates = (value, field) => {\n  const storeInputs = state.storeInputs;\n  console.log(storeInputs);\n  storeInputs[field] = value;\n  console.log(storeInputs);\n  State.update({ storeInputs });\n};\n\nconst addStore = () => {\n  State.update({ loading: true, loadingMsg: \"Creating a new store\" });\n  const stateT = state;\n  const { storeName, storeAddress, image } = stateT.storeInputs;\n  nftContract.addStore(storeName, storeAddress, image.cid).then((t) => {\n    console.log(t);\n    t.wait().then((r) => {\n      stateT.store.stores.push([\n        storeName,\n        storeAddress.toLowerCase(),\n        image.cid,\n      ]);\n      stateT.store.storeImages[storeName] = image.cid;\n\n      stateT.storeInputs = {\n        storeName: \"\",\n        storeAddress: \"\",\n        image: \"\",\n      };\n      stateT.loading = false;\n      stateT.loadingMsg = \"\";\n      if (storeAddress.toLowerCase() === sender) {\n        // alert(\n        //   \"Warning - If you have any pending transactions, you won't be able to see them. But they can be completed at the store!\"\n        // );\n        stateT.store.isStore = true;\n        stateT.store.storeAddress = storeAddress.toLowerCase();\n        stateT.store.storeName = storeName;\n      }\n      State.update(stateT);\n    });\n  });\n};\n\nconst getStoreAddress = (storeName) => {\n  const t = [];\n  state.store.stores.map((store) => {\n    if (store[0] === storeName) t.push(store[1]);\n  });\n  return t[0];\n};\n\nconst initTransaction = () => {\n  State.update({\n    loading: true,\n    loadingMsg: \"Minting your NFT - Please Pay the gas price\",\n  });\n  const { storeName, amount, name, password } = state.homeInputs;\n  console.log(password);\n  walleyContract\n    .mint(password, { from: sender })\n    .then((tx) => {\n      State.update({ loadingMsg: \"Waiting for confirmation\" });\n      tx.wait().then((r) => {\n        const tokenId = parseInt(r.logs[2].data, 16);\n        State.update({\n          loadingMsg:\n            \"Creating your transaction - Please pay the amount you entered + gas\",\n        });\n        nftContract\n          .initTransaction(\n            walleyAddress,\n            name,\n            tokenId,\n            `${amount * Math.pow(10, 18)}`,\n            getStoreAddress(storeName),\n            storeName,\n            {\n              from: sender,\n              value: ethers.utils.parseUnits(`${amount}`, 18),\n            }\n          )\n          .then((txInit) => {\n            console.log(txInit);\n            State.update({ loadingMsg: \"Waiting for the final confirmation\" });\n            txInit.wait().then((res) => {\n              console.log(res);\n              State.update({\n                loading: false,\n                loadingMsg: \"\",\n                userInput: {\n                  storeName: \"\",\n                  name: \"\",\n                  amount: \"\",\n                  password: \"\",\n                },\n              });\n            });\n          })\n          .catch((err) => console.log(err));\n      });\n    })\n    .catch((err) => console.log(err));\n};\n\nconst cancelTransaction = (tokenId) => {\n  walleyContract.returnPass(tokenId).then((password) => {\n    if (state.user.cancelPassword === password) {\n      State.update({\n        loading: true,\n        loadingMsg: \"Cancelling your transaction - Pay for the gas\",\n      });\n      nftContract\n        .cancelTransaction(walleyAddress, tokenId, { from: sender })\n        .then((tx) => {\n          State.update({ loadingMsg: \"Refunding your amount\" });\n          tx.wait().then((r) => {\n            const tmp = [];\n            state.store.userPendingTransactions.map((trans) => {\n              if (parseInt(trans[1], 16) !== tokenId) {\n                tmp.push(trans);\n              }\n            });\n            State.update({\n              loading: false,\n              loadingMsg: \"\",\n              user: {\n                ...state.user,\n                userPendingTransactions: tmp,\n                cancelPassword: \"\",\n                openModal: 0,\n              },\n            });\n          });\n        });\n    } else {\n      console.log(\"Please re-check the password\");\n    }\n  });\n};\n\n// const billOnChange = (files) => {\n//   if (files) {\n//     console.log(files[0]);\n//     State.update({\n//       store: { ...state.store, bill: { uploading: true, amount: null } },\n//     });\n//     let reader = new FileReader();\n//     reader.onloadend = () => {\n//       let formdata = new FormData();\n//       formdata.append(\"language\", \"eng\");\n//       formdata.append(\"isOverlayRequired\", \"false\");\n//       formdata.append(\"base64Image\", reader.result);\n//       formdata.append(\"iscreatesearchablepdf\", \"false\");\n//       formdata.append(\"scale\", \"true\");\n//       formdata.append(\"isTable\", \"true\");\n//       formdata.append(\"issearchablepdfhidetextlayer\", \"false\");\n//       formdata.append(\"OCREngine\", \"3\");\n\n//       let requestOptions = {\n//         method: \"POST\",\n//         headers: { apikey: \"K82213475788957\" },\n//         body: formdata,\n//         redirect: \"follow\",\n//       };\n\n//       fetch(\"https://api.ocr.space/parse/image\", requestOptions)\n//         .then((response) => response.json())\n//         .then((result) => parseReceipt(result))\n//         .catch((error) => console.log(\"error\", error));\n//     };\n//     reader.readAsDataURL(files[0]);\n//   }\n// };\n\n// const parseReceipt = (receiptObject) => {\n//   console.log(receiptObject);\n//   console.log(typeof receiptObject);\n//   if (typeof receiptObject === \"object\") {\n//     const receiptDetails = receiptObject.ParsedResults[0];\n//     const receiptLines = receiptDetails.TextOverlay.Lines;\n//     parseReceiptText(receiptDetails.ParsedText);\n//   } else if (typeof receiptObject == \"string\") {\n//     console.log(receipt);\n//   }\n// };\n// const parseReceiptText = (receiptText) => {\n//   // extremely reliant on this one receipt\n//   let receiptContent = receiptText.split(\"\\t\\r\\n\").map((element) => {\n//     return element.toLowerCase().replace(\"\\t\", \" \");\n//   });\n\n//   const receiptTotal = receiptContent[21].replace(/\\D/g, \"\");\n//   const subTotal = receiptContent[\n//     receiptContent.findIndex((v) => v.includes(\"subtotal\"))\n//   ].replace(/\\D/g, \"\");\n//   const VAT = receiptContent[20].replace(/\\D/g, \"\");\n//   const receipt = {\n//     store: receiptContent[0].split(\"\\t\")[1],\n//     date: receiptContent[6].split(\" \")[0],\n//     subtotal:\n//       subTotal.substring(0, subTotal.length - 2) +\n//       \".\" +\n//       subTotal.substring(subTotal.length - 2),\n//     total:\n//       receiptTotal.substring(0, receiptTotal.length - 2) +\n//       \".\" +\n//       receiptTotal.substring(receiptTotal.length - 2),\n//     vat: VAT.substring(0, VAT.length - 2) + \".\" + VAT.substring(VAT.length - 2),\n//   };\n//   console.log(receipt);\n// };\n\nconst approveTransaction = (tokenId) => {\n  State.update({\n    loading: true,\n    loadingMsg: \"Checking the password\",\n  });\n  walleyContract.returnPass(tokenId).then((password) => {\n    console.log(password);\n    if (state.store.approvePassword === password) {\n      State.update({\n        loadingMsg: \"Approving your transaction - Pay for the gas\",\n      });\n      nftContract\n        .approveTransaction(\n          walleyAddress,\n          tokenId,\n          `${state.store.totalAmount * Math.pow(10, 18)}`,\n          state.store.bill.cid,\n          {\n            from: sender,\n          }\n        )\n        .then((tx) => {\n          State.update({\n            loadingMsg: \"Waiting for confirmation - Refunding the change\",\n          });\n          tx.wait().then((res) => {\n            const tmp = [];\n            const tmpAct = [];\n            state.store.storePendingTransactions.map((trans) => {\n              if (parseInt(trans[1], 16) !== tokenId) {\n                tmp.push(trans);\n              } else {\n                tmpAct.push(trans);\n                tmpAct[0][7] = state.store.bill.cid;\n                tmpAct[0][8] = true;\n                tmpAct[0][9] = state.store.totalAmount;\n              }\n            });\n            State.update({\n              store: {\n                ...state.store,\n                storePendingTransactions: tmp,\n                storePastTransactions: [\n                  ...state.store.storePastTransactions,\n                  tmpAct,\n                ],\n                openModal: 0,\n                approvePassword: \"\",\n                bill: { uploading: false, amount: null },\n                totalAmount: 0,\n              },\n              loadingMsg: \"\",\n              loading: false,\n            });\n          });\n        });\n    } else {\n      console.log(\"Please re-check the password\");\n      State.update({ loading: false, loadingMsg: \"\" });\n    }\n  });\n};\n\nreturn (\n  <WalleyHomeContainer>\n    <WalleyHomeHeader>\n      <p>Walley.</p>\n      <WalleyBalance>Your Balance - {state.balance}</WalleyBalance>\n    </WalleyHomeHeader>\n    <WalleyHomeMain>\n      {!state.loading ? (\n        !state.store.isStore ? (\n          <>\n            <WalleyNavbar>\n              <WalleyNavbarButton\n                onClick={() => State.update({ view: \"home\" })}\n              >\n                Home\n              </WalleyNavbarButton>\n              <WalleyNavbarButton onClick={onTxClick}>\n                Your Store NFTs\n              </WalleyNavbarButton>\n              <WalleyNavbarButton onClick={onTxPastClick}>\n                Receipts\n              </WalleyNavbarButton>\n              <WalleyNavbarButton\n                onClick={() => State.update({ view: \"addSt\" })}\n              >\n                Add a store\n              </WalleyNavbarButton>\n            </WalleyNavbar>\n            <WalleyHomeBody>\n              {state.view === \"home\" ? (\n                <WalleyHomeForm>\n                  <Widget\n                    src=\"near/widget/Select\"\n                    props={{\n                      value: state.homeInputs.storeName,\n                      noLabel: true,\n                      placeholder:\n                        state.store.stores.length !== 0\n                          ? \"Select a store\"\n                          : \"No Store Available\",\n                      options: [...widgetOptions()],\n                      onChange: (value) => {\n                        homeInputUpdates(value.text, \"storeName\");\n                      },\n                    }}\n                  />\n                  <WalleyLabel>\n                    Enter the maximum amount you'd like to spend(in INR)\n                  </WalleyLabel>\n                  <WalleyInput\n                    value={state.homeInputs.amount}\n                    type=\"number\"\n                    onChange={(e) => homeInputUpdates(e.target.value, \"amount\")}\n                    placeholder=\"Amount(in INR)\"\n                  />\n                  <WalleyLabel>Name(will be asked at the store)</WalleyLabel>\n                  <WalleyInput\n                    value={state.homeInputs.name}\n                    type=\"text\"\n                    onChange={(e) => homeInputUpdates(e.target.value, \"name\")}\n                    placeholder=\"Name\"\n                  />\n                  <WalleyLabel>\n                    Set a password for the transaction(will be asked during\n                    checkout)\n                  </WalleyLabel>\n                  <WalleyInput\n                    value={state.homeInputs.password}\n                    type=\"password\"\n                    onChange={(e) =>\n                      homeInputUpdates(e.target.value, \"password\")\n                    }\n                    placeholder=\"Password\"\n                  />\n                  <WalleyButton\n                    color=\"#000D1A\"\n                    bg=\"#FFA500\"\n                    onClick={initTransaction}\n                  >\n                    Buy The Store NFT\n                  </WalleyButton>\n                </WalleyHomeForm>\n              ) : state.view === \"tx\" ? (\n                <WalleyTransactions>\n                  {state.user.userPendingTransactions.length !== 0\n                    ? state.user.userPendingTransactions.map((tx) => (\n                        <TransactionCard>\n                          <WalleyStoreImage\n                            src={`https://ipfs.near.social/ipfs/${\n                              state.store.storeImages[tx[6]]\n                            }`}\n                            alt={tx[6]}\n                          />\n                          <p>Name - {tx[2]}</p>\n                          <p>Store name - {tx[6]} </p>\n                          <p>Amount - {Big(tx[5]).toFixed(5)}</p>\n                          {state.user.openModal === parseInt(tx[1], 16) ? (\n                            <>\n                              <WalleyLabel>\n                                Enter the transacation password\n                              </WalleyLabel>\n                              <WalleyInput\n                                type=\"password\"\n                                value={state.user.cancelPassword}\n                                onChange={(e) =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      cancelPassword: e.target.value,\n                                    },\n                                  })\n                                }\n                              />\n                              <WalleyButton\n                                color=\"#white\"\n                                bg=\"blue\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      openModal: 0,\n                                      cancelPassword: \"\",\n                                    },\n                                  })\n                                }\n                              >\n                                Close\n                              </WalleyButton>\n                              <WalleyButton\n                                color=\"#white\"\n                                bg=\"red\"\n                                onClick={() =>\n                                  cancelTransaction(parseInt(tx[1], 16))\n                                }\n                              >\n                                Cancel\n                              </WalleyButton>\n                            </>\n                          ) : (\n                            <WalleyButton\n                              color=\"#white\"\n                              bg=\"red\"\n                              onClick={() =>\n                                State.update({\n                                  user: {\n                                    ...state.user,\n                                    openModal: parseInt(tx[1], 16),\n                                    cancelPassword: \"\",\n                                  },\n                                })\n                              }\n                            >\n                              Cancel\n                            </WalleyButton>\n                          )}\n                        </TransactionCard>\n                      ))\n                    : \"No pending transactions\"}\n                </WalleyTransactions>\n              ) : state.view === \"txPast\" ? (\n                <WalleyTransactions>\n                  {state.user.userPastTransactions.length !== 0\n                    ? state.user.userPastTransactions.map((tx) => (\n                        <TransactionCard>\n                          <WalleyStoreImage\n                            src={`https://ipfs.near.social/ipfs/${\n                              state.store.storeImages[tx[6]]\n                            }`}\n                            alt={tx[6]}\n                          />\n                          <p>Name - {tx[2]}</p>\n                          <p>Store name - {tx[6]} </p>\n                          <p>Max Amount - {Big(tx[5]).toFixed(5)}</p>\n                          <p>Total Bill Amount - {Big(tx[9]).toFixed(5)}</p>\n                          {state.user.openReceipt === Big(tx[1]).toFixed(0) ? (\n                            <>\n                              <WalleyStoreImage\n                                src={`https://ipfs.near.social/ipfs/${tx[7]}`}\n                                alt={tx[7]}\n                              />\n                              <WalleyButton\n                                color=\"#000D1A\"\n                                bg=\"orange\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      openReceipt: 0,\n                                    },\n                                  })\n                                }\n                              >\n                                Close Receipt\n                              </WalleyButton>\n                            </>\n                          ) : (\n                            <WalleyButton\n                              color=\"#000D1A\"\n                              bg=\"orange\"\n                              onClick={() =>\n                                State.update({\n                                  user: {\n                                    ...state.user,\n                                    openReceipt: Big(tx[1]).toFixed(0),\n                                  },\n                                })\n                              }\n                            >\n                              Show Receipt\n                            </WalleyButton>\n                          )}\n                        </TransactionCard>\n                      ))\n                    : \"No past transactions found\"}\n                </WalleyTransactions>\n              ) : (\n                <WalleyStoreForm>\n                  <WalleyLabel>Store Name</WalleyLabel>\n                  <WalleyInput\n                    value={state.storeInputs.storeName}\n                    type=\"text\"\n                    onChange={(e) => {\n                      storeInputUpdates(e.target.value, \"storeName\");\n                    }}\n                    placeholder=\"Enter the Store Name\"\n                  />\n                  <WalleyLabel>Store Address</WalleyLabel>\n                  <WalleyInput\n                    value={state.storeInputs.storeAddress}\n                    type=\"text\"\n                    onChange={(e) =>\n                      storeInputUpdates(e.target.value, \"storeAddress\")\n                    }\n                    placeholder=\"Enter the Store Address\"\n                  />\n                  <WalleyStoreButton\n                    onClick={() => storeInputUpdates(sender, \"storeAddress\")}\n                  >\n                    Use current address(convert this account into a store)\n                  </WalleyStoreButton>\n                  <WalleyLabel>Add Cover Image</WalleyLabel>\n                  <IpfsImageUpload image={state.storeInputs.image} />\n                  <WalleyButton color=\"#000D1A\" bg=\"orange\" onClick={addStore}>\n                    Add Store\n                  </WalleyButton>\n                </WalleyStoreForm>\n              )}\n            </WalleyHomeBody>\n          </>\n        ) : (\n          <>\n            <WalleyNavbar>\n              <WalleyNavbarButton\n                onClick={() => State.update({ view: \"home\" })}\n              >\n                Home\n              </WalleyNavbarButton>\n              <WalleyNavbarButton\n                onClick={() => State.update({ view: \"txPast\" })}\n              >\n                Receipts\n              </WalleyNavbarButton>\n            </WalleyNavbar>\n            <WalleyStoreBody>\n              <WalleyTransactions>\n                {state.view === \"home\"\n                  ? state.store.storePendingTransactions.length !== 0\n                    ? state.store.storePendingTransactions.map((tx) => (\n                        <TransactionCard>\n                          <WalleyStoreImage\n                            src={`https://ipfs.near.social/ipfs/${\n                              state.store.storeImages[tx[6]]\n                            }`}\n                            alt={tx[6]}\n                          />\n                          <p>Name - {tx[2]}</p>\n                          <p>Store name - {tx[6]} </p>\n                          <p>Max amount - {Big(tx[5]).toFixed(5)}</p>\n                          {state.store.openModal === parseInt(tx[1], 16) ? (\n                            <>\n                              <WalleyLabel>Please scan the bill - </WalleyLabel>\n                              <IpfsImageUpload image={state.store.bill} />\n                              {/*<Files\n                            multiple={false}\n                            accepts={[\"image/*\"]}\n                            minFileSize={1}\n                            clickable\n                            className=\"btn btn-outline-primary\"\n                            onChange={billOnChange}\n                          >\n                            {state.store.bill.uploading ? (\n                              <> Scanning </>\n                            ) : (\n                              \"Scan the bill\"\n                            )}\n                          </Files>*/}\n                              <WalleyLabel>Total Bill Amount</WalleyLabel>\n                              <WalleyInput\n                                value={state.store.totalAmount}\n                                onChange={(e) =>\n                                  State.update({\n                                    store: {\n                                      ...state.store,\n                                      totalAmount: e.target.value,\n                                    },\n                                  })\n                                }\n                              />\n                              <WalleyLabel>Transaction Password</WalleyLabel>\n                              <WalleyInput\n                                type=\"password\"\n                                value={state.store.approvePassword}\n                                onChange={(e) =>\n                                  State.update({\n                                    store: {\n                                      ...state.store,\n                                      approvePassword: e.target.value,\n                                    },\n                                  })\n                                }\n                              />\n                              <WalleyButton\n                                color=\"#white\"\n                                bg=\"blue\"\n                                onClick={() => {\n                                  State.update({\n                                    store: {\n                                      ...state.store,\n                                      approvePassword: \"\",\n                                      bill: { uploading: false, cid: \"\" },\n                                      totalAmount: null,\n                                      openModal: 0,\n                                    },\n                                  });\n                                }}\n                              >\n                                Close\n                              </WalleyButton>\n                              <WalleyButton\n                                color=\"#white\"\n                                bg=\"blue\"\n                                onClick={() => {\n                                  console.log(state.store.bill.cid);\n                                  if (state.store.bill.cid) {\n                                    approveTransaction(parseInt(tx[1], 16));\n                                  } else {\n                                    console.log(\"Please Upload the bill\");\n                                  }\n                                }}\n                              >\n                                Approve\n                              </WalleyButton>\n                            </>\n                          ) : (\n                            <WalleyButton\n                              color=\"#white\"\n                              bg=\"blue\"\n                              onClick={() =>\n                                State.update({\n                                  store: {\n                                    ...state.store,\n                                    approvePassword: \"\",\n                                    bill: { uploading: false, amount: null },\n                                    totalAmount: null,\n                                    openModal: parseInt(tx[1], 16),\n                                  },\n                                })\n                              }\n                            >\n                              Approve\n                            </WalleyButton>\n                          )}\n                        </TransactionCard>\n                      ))\n                    : \"No pending transactions\"\n                  : state.store.storePastTransactions.length !== 0\n                  ? state.store.storePastTransactions.map((tx) => (\n                      <TransactionCard>\n                        <WalleyStoreImage\n                          src={`https://ipfs.near.social/ipfs/${\n                            state.store.storeImages[tx[6]]\n                          }`}\n                          alt={tx[6]}\n                        />\n                        <p>Name - {tx[2]}</p>\n                        <p>Store name - {tx[6]} </p>\n                        <p>Max Amount - {Big(tx[5]).toFixed(5)}</p>\n\n                        <p>Total Bill Amount - {Big(tx[9]).toFixed(5)}</p>\n                        {state.user.openReceipt === Big(tx[1]).toFixed(0) ? (\n                          <>\n                            <WalleyStoreImage\n                              src={`https://ipfs.near.social/ipfs/${tx[7]}`}\n                              alt={tx[7]}\n                            />\n                            <WalleyButton\n                              color=\"#000D1A\"\n                              bg=\"orange\"\n                              onClick={() =>\n                                State.update({\n                                  user: {\n                                    ...state.user,\n                                    openReceipt: 0,\n                                  },\n                                })\n                              }\n                            >\n                              Close Receipt\n                            </WalleyButton>\n                          </>\n                        ) : (\n                          <WalleyButton\n                            color=\"#000D1A\"\n                            bg=\"orange\"\n                            onClick={() =>\n                              State.update({\n                                user: {\n                                  ...state.user,\n                                  openReceipt: Big(tx[1]).toFixed(0),\n                                },\n                              })\n                            }\n                          >\n                            Show Receipt\n                          </WalleyButton>\n                        )}\n                      </TransactionCard>\n                    ))\n                  : \"No past transactions found\"}\n              </WalleyTransactions>\n            </WalleyStoreBody>\n          </>\n        )\n      ) : (\n        <WalleyLoading>{state.loadingMsg}</WalleyLoading>\n      )}\n    </WalleyHomeMain>\n  </WalleyHomeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/walley", "fact_widget_deployments_id": "bec841bf2f770c1f072fe4347cb643d7", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 229}