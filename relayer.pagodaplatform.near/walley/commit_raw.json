{"tx_hash": "12Lky2LKXfP8VV59dbqU5rcXe43mjDtuhubXNVssN3VL", "action_id_social": "6KmP5h8fRGkBndmBxZQz8NZjyWwY1JX7iUK7UJj76kJ2-0-widget", "block_id": 99305144, "block_timestamp": "2023-08-21T08:12:03.322Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "walley", "source_code": "const nftAddress = \"0xb7d25d9ff6bec0072ca60e4ce2cf9ce822c19635\";\nconst NFTManagerABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/NFTManager.json\")\n    .body\n);\nconst walleyAddress = \"0x3b218f8d01e3acfed2bd2e5ad3246d03f4375715\";\nconst WalleyABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/Walley.json\")\n    .body\n);\nState.init({\n  general: {\n    chainId: undefined,\n    balance: 0,\n  },\n  store: {\n    stores: [],\n    storeName: \"\",\n    storeAddress: \"\",\n    storeNames: [],\n    isStore: false,\n    storePendingTransactions: [],\n    storeImages: {},\n  },\n  user: {\n    userPendingTransactions: [],\n  },\n  homeInputs: {\n    storeName: \"\",\n    amount: 0,\n    name: \"\",\n    password: \"\",\n  },\n  storeInputs: {\n    storeName: \"\",\n    storeAddress: \"\",\n    image: \"\",\n  },\n  storeName: \"\",\n  view: \"home\",\n  loading: true,\n  loadingMsg: \"Fetching Data\",\n});\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800;900&display=swap\"\n).body;\n\nconst Root = styled.div`\n    width: 100%;\n    display: flex;\n    font-family: Poppins, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    flex-direction: column;\n    padding: 0;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n`;\n\nconst WalleyTitle = styled.div`\n    text-align: left;\n    font-weight: 900;\n    width: 100%;\n    font-size: 30px;\n    margin: 0px;\n    padding: 5px;\n    color: #000D1A; \n    media screen and (max-width: 600px) {\n        font-size: 20px;\n    }\n`;\n\nconst WalleyIndexContainer = styled.div`\n    \n    box-shadow: 12px 0px 0px 5px #000D1A;\n    background: linear-gradient( to bottom, orange 0%, orange 50%, #FFF5F5 50%, #FFF5F5 100% );\n    color: #000D1A;\n    width: 100%;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    justify-content: space-betweeen;\n`;\n\nconst WalleyIndexTop = styled.div`\n    margin-top: 20px;\n    color: #000D1A;\n    font-weight: 600;\n    font-size: 40px;\n    height: 100%;\n    padding-bottom: 10px;\n    @media screen and (max-width: 600px) {\n        font-size: 25px;\n        font-weight: 700;\n    }\n`;\n\nconst WalleyIndexBottom = styled.div`\n    position: relative;\n    top: 50%;\n    height: 350px;\n    background-color: white;\n    font-weight: 500;\n    width: 400px;\n    text-align: left;\n    box-shadow: 12px 0px 0px 5px #000D1A;\n    @media screen and (max-width: 600px) {\n        width: 100%;\n        box-shadow: none;\n        border: 1px solid #DBDED7;\n        border-radius: 20px;\n    }\n    &>button {\n        border: none;\n        background: orange;\n        color: white;\n    }\n`;\n\nconst WalleyHomeContainer = styled.div`\n    box-shadow: 12px 0px 0px 5px #000D1A;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst WalleyHomeHeader = styled.div`\n    background-color: orange;\n    width: 100%;\n    height: 70px;\n    font-size: 20px;\n    font-weight: 900;\n    padding: 10px;\n    position: relative;\n    top: 0px;\n\n`;\n\nconst WalleyHomeMain = styled.div`\n    padding: 20px;\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    align-items: space-between;\n`;\n\nconst WalleyNavbar = styled.div`\n    width: 25%;\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    left: 0px;\n`;\n\nconst WalleyNavbarButton = styled.button`\n    border: none;\n    border-bottom: 1px solid #000D1A;\n    text-align: center;\n    background: white;\n    color: #000D1A;\n`;\n\nconst WalleyHomeBody = styled.div`\n  width: 75%;\n`;\n\nconst WalleyBalance = styled.p`\n  font-weight: 700;\n`;\n\nconst WalleyLoading = styled.div`\n  width: 100%;\n  font-weight: 700;\n`;\n\nconst WalleyButton = styled.button`\n  background-color: ${props.bg};\n  color: ${props.color};\n  display: block;\n  border: none;\n`;\n\nconst WalleyHomeForm = styled.div`\n  width: 200px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst WalleyStoreForm = styled.div`\n  width: 200px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst WalleyStoreImage = styled.img`\n  width: 100px;\n  height: 100px;\n  text-align: center;\n`;\n\nconst WalleyInput = styled.input`\n  display: block;\n`;\n\nconst WalleyLabel = styled.p`\n  width: 100%;\n`;\n\nconst WalleyStoreButton = styled.button`\n  border: none;\n  background: none;\n  color: black;\n  display: block;\n`;\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst updateBalance = (balance) => {\n  State.update({ balance });\n};\nif (!sender) {\n  return (\n    <Root>\n      <WalleyIndexContainer>\n        <WalleyTitle>Walley.</WalleyTitle>\n        <WalleyIndexTop>Go Phoneless</WalleyIndexTop>\n        <WalleyIndexBottom>\n          Get Started\n          <Web3Connect connectLabel=\"Connect Wallet\" />\n        </WalleyIndexBottom>\n      </WalleyIndexContainer>\n    </Root>\n  );\n}\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      console.log(balance);\n      updateBalance(Big(balance).div(Big(10).pow(18)).toFixed(5));\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Ethereum Sepolia</p>;\n}\nconst nftIface = new ethers.utils.Interface(NFTManagerABI);\nconst nftContract = new ethers.Contract(\n  nftAddress,\n  NFTManagerABI,\n  Ethers.provider().getSigner()\n);\nconst walleyIface = new ethers.utils.Interface(WalleyABI);\nconst walleyContract = new ethers.Contract(\n  walleyAddress,\n  WalleyABI,\n  Ethers.provider().getSigner()\n);\nconsole.log(walleyContract);\n//get stores data\nif (state.store.stores.length === 0 && nftContract && sender) {\n  State.update({ loadingMsg: \"Fetching Stores\" });\n  nftContract.getAllStores().then((stores) => {\n    if (stores.length === 0) {\n      State.update({ loading: false, loadingMsg: \"\" });\n    } else {\n      const storeState = state.store;\n      storeState.stores = stores;\n      let store;\n      for (let i = 0; i < stores.length; i++) {\n        store = stores[i];\n        storeState.storeNames.push(store[0]);\n        storeState.storeImages[store[0]] = store[2];\n        if (store[1] === sender) {\n          storeState.isStore = true;\n          storeState.storeName = store[0];\n          storeState.storeAddress = store[1].toLowerCase();\n          State.update({ loadingMsg: \"Fetching Store Transactions\" });\n          nftContract\n            .getStoreActiveTransactions(store[1])\n            .then(\n              (transactions) =>\n                (storeState.storePendingTransactions = transactions)\n            );\n        }\n        if (i === stores.length - 1)\n          State.update({ store: storeState, loading: false, loadingMsg: \"\" });\n      }\n      console.log(state.store);\n    }\n  });\n}\n\nconst onTxClick = () => {\n  State.update({\n    view: \"tx\",\n    loading: true,\n    loadingMsg: \"Fetching transactions\",\n  });\n  nftContract.getMyActiveTransactions({ from: sender }).then((transactions) =>\n    State.update({\n      user: { userPendingTransactions: transactions },\n      loading: false,\n      loadingMsg: \"\",\n    })\n  );\n};\n\nconst widgetOptions = () => {\n  const options = [];\n  for (let i = 0; i < state.stores.storeNames.length; i++)\n    options.push({\n      text: state.stores.storeNames[i],\n      value: state.stores.storeNames[i],\n    });\n  console.log(options);\n  return options;\n};\n\nconst homeInputUpdates = (value, field) => {\n  const homeInputs = state.homeInputs;\n  homeInputs[field] = value;\n  State.update({ homeInputs });\n};\nconst storeInputUpdates = (value, field) => {\n  const storeInputs = state.storeInputs;\n  console.log(storeInputs);\n  storeInputs[field] = value;\n  console.log(storeInputs);\n  State.update({ storeInputs });\n};\n\nconst addStore = () => {\n  State.update({ loading: true, loadingMsg: \"Creating a new store\" });\n  const stateT = state;\n  const { storeName, storeAddress, image } = stateT.storeInputs;\n  nftContract\n    .addStore(storeName, storeAddress, image.cid)\n    .then((t) => {\n      console.log(t);\n      t.wait();\n    })\n    .then(() => {\n      stateT.store.stores.push([\n        storeName,\n        storeAddress.toLowerCase(),\n        image.cid,\n      ]);\n      stateT.store.storeImages[storeName] = image.cid;\n      stateT.store.storeNames.push(storeName);\n\n      stateT.storeInputs = {\n        storeName: \"\",\n        storeAddress: \"\",\n        image: \"\",\n      };\n      stateT.loading = false;\n      stateT.loadingMsg = \"\";\n      if (storeAddress.toLowerCase() === sender) {\n        alert(\n          \"Warning - If you have any pending transactions, you won't be able to see them. But they can be completed at the store!\"\n        );\n        stateT.store.isStore = true;\n        stateT.store.storeAddress = storeAddress.toLowerCase();\n        stateT.store.storeName = storeName;\n      }\n      State.update(stateT);\n    });\n};\n\nreturn (\n  <WalleyHomeContainer>\n    <WalleyHomeHeader>Walley.</WalleyHomeHeader>\n    <WalleyHomeMain>\n      <WalleyNavbar>\n        <WalleyNavbarButton onClick={() => State.update({ view: \"home\" })}>\n          Home\n        </WalleyNavbarButton>\n        <WalleyNavbarButton onClick={onTxClick}>\n          Your Store NFTs\n        </WalleyNavbarButton>\n        <WalleyNavbarButton onClick={() => State.update({ view: \"addSt\" })}>\n          Add a store\n        </WalleyNavbarButton>\n      </WalleyNavbar>\n      <WalleyHomeBody>\n        {!state.loading ? (\n          <WalleyBalance>\n            Your Balance - {state.balance}\n            {state.view === \"home\" ? (\n              <WalleyHomeForm>\n                <Widget\n                  src=\"near/widget/Select\"\n                  props={{\n                    value: state.homeInputs.storeName,\n                    noLabel: true,\n                    placeholder:\n                      state.store.stores.length !== 0\n                        ? \"Select a store\"\n                        : \"No Store Available\",\n                    options: [...widgetOptions()],\n                    onChange: (value) => {\n                      homeInputUpdates(value.text, \"storeName\");\n                    },\n                  }}\n                />\n                <WalleyLabel>\n                  Enter the maximum amount you'd like to spend(in INR)\n                </WalleyLabel>\n                <WalleyInput\n                  value={state.homeInputs.amount}\n                  type=\"number\"\n                  onChange={(e) => homeInputUpdates(e.target.value, \"amount\")}\n                  placeholder=\"Amount(in INR)\"\n                />\n                <WalleyLabel>Name(will be asked at the store)</WalleyLabel>\n                <WalleyInput\n                  value={state.homeInputs.name}\n                  type=\"text\"\n                  onChange={(e) => homeInputUpdates(e.target.value, \"name\")}\n                  placeholder=\"Name\"\n                />\n                <WalleyLabel>\n                  Set a password for the transaction(will be asked during\n                  checkout)\n                </WalleyLabel>\n                <WalleyInput\n                  value={state.homeInputs.password}\n                  type=\"password\"\n                  onChange={(e) => homeInputUpdates(e.target.value, \"password\")}\n                  placeholder=\"Password\"\n                />\n              </WalleyHomeForm>\n            ) : state.view === \"tx\" ? (\n              <p>helloob</p>\n            ) : (\n              <WalleyStoreForm>\n                {state.storeInputs.image.uploading ? <p>loading</p> : \"\"}\n                {state.storeInputs.image.cid ? (\n                  <WalleyStoreImage\n                    src={`https://ipfs.near.social/ipfs/${state.storeInputs.image.cid}`}\n                    alt=\"uploaded\"\n                  />\n                ) : (\n                  \"\"\n                )}\n                <WalleyLabel>Store Name</WalleyLabel>\n                <WalleyInput\n                  value={state.storeInputs.storeName}\n                  type=\"text\"\n                  onChange={(e) => {\n                    storeInputUpdates(e.target.value, \"storeName\");\n                  }}\n                  placeholder=\"Enter the Store Name\"\n                />\n                <WalleyLabel>Store Address</WalleyLabel>\n                <WalleyInput\n                  value={state.storeInputs.storeAddress}\n                  type=\"text\"\n                  onChange={(e) =>\n                    storeInputUpdates(e.target.value, \"storeAddress\")\n                  }\n                  placeholder=\"Enter the Store Address\"\n                />\n                <WalleyStoreButton\n                  onClick={() => storeInputUpdates(sender, \"storeAddress\")}\n                >\n                  Use current address(convert this account into a store)\n                </WalleyStoreButton>\n                <IpfsImageUpload image={state.storeInputs.image} />\n                <WalleyButton color=\"#000D1A\" bg=\"orange\" onClick={addStore}>\n                  Add Store\n                </WalleyButton>\n              </WalleyStoreForm>\n            )}\n          </WalleyBalance>\n        ) : (\n          <WalleyLoading>{state.loadingMsg}</WalleyLoading>\n        )}\n      </WalleyHomeBody>\n    </WalleyHomeMain>\n  </WalleyHomeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/walley", "fact_widget_deployments_id": "17911dc88b54499dfcb0aecc56af402d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 132}