{"tx_hash": "AjNbxYo4BoyjnsEy3hBUJVcN7hVaXGjrGJcfYVC6RP6T", "action_id_social": "12ukVQQHuLJfvKH3ENXJfeVdNGhtkdDAMHguQwef6Gmb-0-widget", "block_id": 99751442, "block_timestamp": "2023-08-27T04:11:05.527Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "walley", "source_code": "const unixToDate = (time) => {\n  console.log(time);\n  const d = new Date(time * 1000);\n  return d.toLocaleString();\n};\n\nconst nftAddress = \"0x8000d0daa796df46db6a8d191ad7d56af41ae421\";\nconst NFTManagerABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/NFTManager.json\")\n    .body\n);\nconst walleyAddress = \"0x150ab38996cc9694530f452caca99ad3a1387f5f\";\nconst WalleyABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/Walley.json\")\n    .body\n);\nState.init({\n  general: {\n    chainId: undefined,\n    balance: 0,\n  },\n  store: {\n    stores: [],\n    storeName: \"\",\n    storeAddress: \"\",\n    isStore: false,\n    storePendingTransactions: [],\n    storePastTransactions: [],\n    storeImages: {},\n    viewTxn: [],\n    approvePassword: \"\",\n    bill: { uploading: false, cid: null },\n    totalAmount: 0,\n  },\n  user: {\n    userPendingTransactions: [],\n    userPastTransactions: [],\n    openModal: 0,\n    transferTo: \"\",\n    viewTxn: [],\n    transactionPassword: \"\",\n    openReceipt: 0,\n  },\n  homeInputs: {\n    storeName: \"\",\n    amount: 0,\n    name: \"\",\n    password: \"\",\n  },\n  storeInputs: {\n    storeName: \"\",\n    storeAddress: \"\",\n    image: null,\n  },\n  search: {\n    store: \"\",\n    user: \"\",\n  },\n  storeName: \"\",\n  view: \"home\",\n  loading: true,\n  loadingMsg: \"Fetching Data\",\n  newTxn: false,\n  addSt: false,\n});\n\nconst Styles = props.Styles;\nconsole.log(props);\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst updateBalance = (balance) => {\n  State.update({ balance });\n};\nif (!sender) {\n  return (\n    <Styles.Root>\n      <Styles.WalleyIndexContainer>\n        <Styles.WalleyTitle>Walley.</Styles.WalleyTitle>\n        <Styles.WalleyIndexBody>\n          <Styles.WalleyIndexDesc>\n            Go Phoneless With the Highly Secured NFT-based Wallet.\n          </Styles.WalleyIndexDesc>\n          <Styles.WalleyIndexMain>\n            <span>Get Started -</span>\n            <Web3Connect connectLabel=\"Connect Wallet\" />\n          </Styles.WalleyIndexMain>\n        </Styles.WalleyIndexBody>\n      </Styles.WalleyIndexContainer>\n    </Styles.Root>\n  );\n}\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      updateBalance(Big(balance).div(Big(10).pow(18)).toFixed(5));\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Ethereum Sepolia</p>;\n}\nconst nftIface = new ethers.utils.Interface(NFTManagerABI);\nconst nftContract = new ethers.Contract(\n  nftAddress,\n  NFTManagerABI,\n  Ethers.provider().getSigner()\n);\nconst walleyIface = new ethers.utils.Interface(WalleyABI);\nconst walleyContract = new ethers.Contract(\n  walleyAddress,\n  WalleyABI,\n  Ethers.provider().getSigner()\n);\n//get stores data\nif (state.store.stores.length === 0 && nftContract && sender && state.loading) {\n  State.update({ loadingMsg: \"Fetching Stores\" });\n  nftContract.getAllStores().then((stores) => {\n    onTxInit();\n    if (stores.length === 0) {\n      State.update({ loading: false, loadingMsg: \"\" });\n    } else {\n      const storeState = state.store;\n      storeState.stores = stores;\n      let store;\n      for (let i = 0; i < stores.length; i++) {\n        store = stores[i];\n        storeState.storeImages[store[0]] = store[2];\n        if (store[1].toLowerCase() === sender.toLowerCase()) {\n          storeState.isStore = true;\n          storeState.storeName = store[0];\n          storeState.storeAddress = store[1];\n          State.update({\n            loading: true,\n            loadingMsg: \"Fetching Store Transactions\",\n          });\n          nftContract.getStoreTransactions(store[1]).then((transactions) => {\n            storeState.storePendingTransactions = [];\n            storeState.storePastTransactions = [];\n            transactions.map((txn) => {\n              if (txn[8] === false) {\n                storeState.storePendingTransactions.push(txn);\n              } else {\n                storeState.storePastTransactions.push(txn);\n              }\n            });\n          });\n        }\n        if (i === stores.length - 1)\n          State.update({ store: storeState, loading: false, loadingMsg: \"\" });\n      }\n      console.log(state.store);\n    }\n  });\n}\n\nconst onTxInit = () => {\n  State.update({\n    view: \"home\",\n    loading: true,\n    loadingMsg: \"Fetching transactions\",\n  });\n  nftContract.getMyTransactions({ from: sender }).then((transactions) => {\n    const st = [];\n    transactions.map((txn) => {\n      if (txn[8] === false) st.push(txn);\n    });\n    State.update({\n      user: { ...state.user, userPendingTransactions: st },\n      loading: false,\n      loadingMsg: \"\",\n    });\n  });\n};\n\nconst onTxPastClick = () => {\n  State.update({\n    view: \"txPast\",\n    loading: true,\n    loadingMsg: \"Fetching past transactions\",\n  });\n  nftContract.getMyTransactions({ from: sender }).then((transactions) => {\n    const st = [];\n    transactions.map((txn) => {\n      if (txn[8] === true) st.push(txn);\n    });\n    State.update({\n      user: { ...state.user, userPastTransactions: st },\n      loading: false,\n      loadingMsg: \"\",\n    });\n  });\n};\n\nconst widgetOptions = () => {\n  const options = [];\n  for (let i = 0; i < state.store.stores.length; i++)\n    options.push({\n      text: state.store.stores[i][0],\n      value: state.store.stores[i][0],\n    });\n  console.log(options);\n  return options;\n};\n\nconst homeInputUpdates = (value, field) => {\n  const homeInputs = state.homeInputs;\n  homeInputs[field] = value;\n  State.update({ homeInputs });\n};\nconst storeInputUpdates = (value, field) => {\n  const storeInputs = state.storeInputs;\n  console.log(storeInputs);\n  storeInputs[field] = value;\n  console.log(storeInputs);\n  State.update({ storeInputs });\n};\n\nconst addStore = () => {\n  State.update({\n    loading: true,\n    loadingMsg: \"Creating a new store\",\n    addSt: false,\n  });\n  const { storeName, storeAddress, image } = state.storeInputs;\n  nftContract.addStore(storeName, storeAddress, image.cid).then((t) => {\n    console.log(t);\n    t.wait().then((r) => {\n      State.update({\n        store: {\n          ...state.store,\n          stores: [\n            ...state.store.stores,\n            [storeName, storeAddress.toLowerCase(), image.cid],\n          ],\n          storeImages: { ...state.store.storeImages, [storeName]: image.cid },\n        },\n        storeInputs: {\n          storeName: \"\",\n          storeAddress: \"\",\n          image: \"\",\n        },\n        loading: false,\n        loadingMsg: \"\",\n      });\n      if (storeAddress.toLowerCase() === sender) {\n        // alert(\n        //   \"Warning - If you have any pending transactions, you won't be able to see them. But they can be completed at the store!\"\n        // );\n        State.update({\n          store: { ...state.store, isStore: true, storeAddress, storeName },\n        });\n      }\n    });\n  });\n};\n\nconst getStoreAddress = (storeName) => {\n  const t = [];\n  state.store.stores.map((store) => {\n    if (store[0] === storeName) t.push(store[1]);\n  });\n  return t[0];\n};\n\nconst initTransaction = () => {\n  State.update({\n    newTxn: false,\n    loading: true,\n    loadingMsg: \"Minting your NFT - Please Pay the gas price\",\n  });\n  const { storeName, amount, name, password } = state.homeInputs;\n  walleyContract\n    .mint(password, { from: sender })\n    .then((tx) => {\n      State.update({ loadingMsg: \"Waiting for confirmation\" });\n      tx.wait().then((r) => {\n        const tokenId = parseInt(r.logs[2].data, 16);\n        State.update({\n          loadingMsg:\n            \"Creating your transaction - Please pay the amount you entered + gas\",\n        });\n        nftContract\n          .initTransaction(\n            walleyAddress,\n            name,\n            tokenId,\n            `${amount * Math.pow(10, 18)}`,\n            getStoreAddress(storeName),\n            storeName,\n            {\n              from: sender,\n              value: ethers.utils.parseUnits(`${amount}`, 18),\n            }\n          )\n          .then((txInit) => {\n            console.log(txInit);\n            State.update({\n              loadingMsg: \"Waiting for the final confirmation\",\n            });\n            txInit.wait().then((res) => {\n              console.log(res);\n              State.update({\n                loading: false,\n                loadingMsg: \"\",\n                userInput: {\n                  storeName: \"\",\n                  name: \"\",\n                  amount: \"\",\n                  password: \"\",\n                },\n              });\n            });\n          })\n          .catch((err) => console.log(err));\n      });\n    })\n    .catch((err) => console.log(err));\n};\n\nconst cancelTransaction = (tokenId) => {\n  checkPassword(tokenId, state.user.transactionPassword, () => {\n    State.update({\n      user: { ...state.user, viewTxn: [] },\n      loading: true,\n      loadingMsg: \"Cancelling your transaction - Pay for the gas\",\n    });\n    nftContract\n      .cancelTransaction(walleyAddress, tokenId, { from: sender })\n      .then((tx) => {\n        State.update({ loadingMsg: \"Refunding your amount\" });\n        tx.wait().then((r) => {\n          const tmp = [];\n          state.store.userPendingTransactions.map((trans) => {\n            if (parseInt(trans[1], 16) !== tokenId) {\n              tmp.push(trans);\n            }\n          });\n          State.update({\n            loading: false,\n            loadingMsg: \"\",\n            user: {\n              ...state.user,\n              userPendingTransactions: tmp,\n              transactionPassword: \"\",\n              viewTxn: [],\n            },\n          });\n        });\n      });\n  });\n};\n\nconst approveTransaction = (tokenId) => {\n  checkPassword(tokenId, state.store.approvePassword, () => {\n    State.update({\n      user: { ...state.user, viewTxn: [] },\n      loading: true,\n      loadingMsg: \"Approving your transaction - Pay for the gas\",\n    });\n    nftContract\n      .approveTransaction(\n        walleyAddress,\n        tokenId,\n        `${state.store.totalAmount * Math.pow(10, 18)}`,\n        state.store.bill.cid,\n        {\n          from: sender,\n        }\n      )\n      .then((tx) => {\n        State.update({\n          loadingMsg: \"Waiting for confirmation - Refunding the change\",\n        });\n        tx.wait().then((res) => {\n          const tmp = [];\n          const tmpAct = [];\n          state.store.storePendingTransactions.map((trans) => {\n            if (parseInt(trans[1], 16) !== tokenId) {\n              tmp.push(trans);\n            } else {\n              tmpAct.push(trans);\n              tmpAct[0][7] = state.store.bill.cid;\n              tmpAct[0][8] = true;\n              tmpAct[0][9] = state.store.totalAmount;\n            }\n          });\n          State.update({\n            store: {\n              ...state.store,\n              storePendingTransactions: tmp,\n              storePastTransactions: [\n                ...state.store.storePastTransactions,\n                tmpAct,\n              ],\n              approvePassword: \"\",\n              bill: { uploading: false, amount: null },\n              totalAmount: 0,\n            },\n            user: { ...state.user, viewTxn: [] },\n            loadingMsg: \"\",\n            loading: false,\n          });\n        });\n      });\n  });\n};\n\nconst transferToken = (tokenId) => {\n  checkPassword(tokenId, state.user.cancelPassword, () => {\n    State.update({\n      user: { ...state.user, viewTxn: [] },\n      loading: true,\n      loadingMsg: \"Cancelling your transaction - Pay for the gas\",\n    });\n    nftContract\n      .transferNFT(walleyAddress, tokenId, state.user.transferTo, {\n        from: sender,\n      })\n      .then((tx) => {\n        State.update({\n          loadingMsg: \"Waiting for confirmation - Refunding the change\",\n        });\n        tx.wait().then((res) => {\n          State.update({\n            user: {\n              ...state.user,\n              userPendingTransactions:\n                state.user.userPendingTransactions.filter(\n                  (tx) => parseInt(tx[1], 16) !== tokenId\n                ),\n              viewTxn: [],\n              transferTo: \"\",\n            },\n            loading: true,\n            loadingMsg: \"\",\n          });\n        });\n      });\n  });\n};\n\nconst checkPassword = (tokenId, password, fn) => {\n  walleyContract\n    .checkPassword(tokenId, password)\n    .then((check) => {\n      if (check) {\n        console.log(\"heheheh\");\n        fn();\n      } else console.log(\"incorrect password\");\n    })\n    .catch((err) => console.log(err));\n};\n\nreturn (\n  <Styles.WalleyHomeContainer>\n    <Styles.WalleyHomeHeader>\n      <p>Walley.</p>\n      <Styles.WalleyBalance>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"20\"\n          height=\"18\"\n          fill=\"none\"\n        >\n          <path\n            d=\"M14.5156 0C17.9644 0 20 1.98459 20 5.3818H15.7689V5.41647C13.8052 5.41647 12.2133 6.96849 12.2133 8.883C12.2133 10.7975 13.8052 12.3495 15.7689 12.3495H20V12.6615C20 16.0154 17.9644 18 14.5156 18H5.48444C2.03556 18 0 16.0154 0 12.6615V5.33847C0 1.98459 2.03556 0 5.48444 0H14.5156ZM19.2533 6.87241C19.6657 6.87241 20 7.19834 20 7.60039V10.131C19.9952 10.5311 19.6637 10.8543 19.2533 10.8589H15.8489C14.8548 10.872 13.9855 10.2084 13.76 9.26432C13.6471 8.67829 13.8056 8.07357 14.1931 7.61222C14.5805 7.15087 15.1573 6.88007 15.7689 6.87241H19.2533ZM16.2489 8.04237H15.92C15.7181 8.04005 15.5236 8.11664 15.38 8.25504C15.2364 8.39344 15.1556 8.58213 15.1556 8.77901C15.1555 9.19205 15.4964 9.52823 15.92 9.53298H16.2489C16.6711 9.53298 17.0133 9.1993 17.0133 8.78767C17.0133 8.37605 16.6711 8.04237 16.2489 8.04237ZM10.3822 3.89119H4.73778C4.31903 3.89116 3.9782 4.2196 3.97333 4.62783C3.97333 5.04087 4.31415 5.37705 4.73778 5.3818H10.3822C10.8044 5.3818 11.1467 5.04812 11.1467 4.6365C11.1467 4.22487 10.8044 3.89119 10.3822 3.89119Z\"\n            fill=\"#fff\"\n          />\n        </svg>{\" \"}\n        {state.balance} ETH\n      </Styles.WalleyBalance>\n    </Styles.WalleyHomeHeader>\n    <Styles.WalleyHomeMain>\n      {state.loading ? (\n        <Styles.WalleyLoading>\n          <Styles.WalleyModal>\n            <img src=\"https://svgshare.com/i/wuF.svg\" title=\"\" />\n            <p>{state.loadingMsg}</p>\n          </Styles.WalleyModal>\n        </Styles.WalleyLoading>\n      ) : (\n        \"\"\n      )}\n      {!state.store.isStore ? (\n        <>\n          <Styles.WalleyNavbar>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              id=\"menu\"\n            >\n              <g data-name=\"Layer 2\">\n                <g data-name=\"menu-2\">\n                  <rect\n                    width=\"24\"\n                    height=\"24\"\n                    opacity=\"0\"\n                    transform=\"rotate(180 12 12)\"\n                  ></rect>\n                  <circle cx=\"0\" cy=\"12\" r=\"1\"></circle>\n                  <rect\n                    width=\"14\"\n                    height=\"2\"\n                    x=\"3\"\n                    y=\"11\"\n                    rx=\".94\"\n                    ry=\".94\"\n                  ></rect>\n                  <rect\n                    width=\"18\"\n                    height=\"2\"\n                    x=\"0\"\n                    y=\"16\"\n                    rx=\".94\"\n                    ry=\".94\"\n                  ></rect>\n                  <rect\n                    width=\"18\"\n                    height=\"2\"\n                    x=\"0\"\n                    y=\"6\"\n                    rx=\".94\"\n                    ry=\".94\"\n                  ></rect>\n                </g>\n              </g>\n            </svg>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ view: \"home\" })}\n            >\n              <span>Home</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton onClick={onTxPastClick}>\n              <span>Receipts</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ addSt: true })}\n            >\n              <span>Add a store</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLineLast></Styles.NavLineLast>\n          </Styles.WalleyNavbar>\n          <Styles.WalleyHomeBody>\n            {state.newTxn ? (\n              <Styles.WalleyHomeOverlay\n                id=\"overlay\"\n                onClick={(e) => {\n                  if (\"overlay\" === e.target.id) {\n                    State.update({ newTxn: false });\n                  }\n                }}\n              >\n                <Styles.WalleyHomeForm>\n                  <Styles.WalleyLabel>Select a Store</Styles.WalleyLabel>\n                  <Widget\n                    src=\"near/widget/Select\"\n                    props={{\n                      value: state.homeInputs.storeName,\n                      noLabel: true,\n                      placeholder:\n                        state.store.stores.length !== 0\n                          ? \"Select a store\"\n                          : \"No Store Available\",\n                      options: [...widgetOptions()],\n                      onChange: (value) => {\n                        homeInputUpdates(value.text, \"storeName\");\n                      },\n                    }}\n                  />\n                  <Styles.WalleyLabel>\n                    Enter the maximum amount you'd like to spend(in INR)\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.homeInputs.amount}\n                    type=\"number\"\n                    onChange={(e) => homeInputUpdates(e.target.value, \"amount\")}\n                    placeholder=\"Amount(in INR)\"\n                  />\n                  <Styles.WalleyLabel>\n                    Name(will be asked at the store)\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.homeInputs.name}\n                    type=\"text\"\n                    onChange={(e) => homeInputUpdates(e.target.value, \"name\")}\n                    placeholder=\"Name\"\n                  />\n                  <Styles.WalleyLabel>\n                    Set a password for the transaction(will be asked during\n                    checkout)\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.homeInputs.password}\n                    type=\"password\"\n                    onChange={(e) =>\n                      homeInputUpdates(e.target.value, \"password\")\n                    }\n                    placeholder=\"Password\"\n                  />\n                  <Styles.WalleyButton\n                    color=\"#fff\"\n                    bg=\"#FFA500\"\n                    onClick={initTransaction}\n                  >\n                    Buy The Store NFT\n                  </Styles.WalleyButton>\n                </Styles.WalleyHomeForm>\n              </Styles.WalleyHomeOverlay>\n            ) : (\n              \"\"\n            )}\n            {state.addSt ? (\n              <Styles.WalleyStoreOverlay>\n                <Styles.WalleyStoreForm>\n                  <Styles.WalleyLabel>Store Name</Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.storeInputs.storeName}\n                    type=\"text\"\n                    onChange={(e) => {\n                      storeInputUpdates(e.target.value, \"storeName\");\n                    }}\n                    placeholder=\"Enter the Store Name\"\n                  />\n                  <Styles.WalleyLabel>Store Address</Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.storeInputs.storeAddress}\n                    type=\"text\"\n                    onChange={(e) =>\n                      storeInputUpdates(e.target.value, \"storeAddress\")\n                    }\n                    placeholder=\"Enter the Store Address\"\n                  />\n                  <Styles.WalleyStoreButton\n                    onClick={() => storeInputUpdates(sender, \"storeAddress\")}\n                  >\n                    Use current address(convert this account into a store)\n                  </Styles.WalleyStoreButton>\n                  <Styles.WalleyLabel>Add Cover Image</Styles.WalleyLabel>\n                  <IpfsImageUpload image={state.storeInputs.image} />\n                  <Styles.WalleyButton\n                    color=\"#fff\"\n                    bg=\"#FA9703\"\n                    onClick={addStore}\n                  >\n                    Add Store\n                  </Styles.WalleyButton>\n                  <Styles.WalleyButton\n                    color=\"#fff\"\n                    bg=\"#FA9703\"\n                    onClick={() => State.update({ addSt: false })}\n                  >\n                    Cancel\n                  </Styles.WalleyButton>\n                </Styles.WalleyStoreForm>\n              </Styles.WalleyStoreOverlay>\n            ) : (\n              \"\"\n            )}\n            {state.user.viewTxn.length !== 0 ? (\n              <Styles.TransactionModal\n                id=\"#modal\"\n                onClick={(e) => {\n                  if (e.target.id === \"overlay\")\n                    State.update({\n                      user: {\n                        ...state.user,\n                        user: null,\n                        transactionPassword: \"\",\n                      },\n                    });\n                }}\n              >\n                <Styles.TransactionCard>\n                  <Styles.WalleyImageContainer>\n                    <Styles.WalleyStoreImage\n                      src={`https://ipfs.near.social/ipfs/${\n                        state.store.storeImages[state.user.viewTxn[6]]\n                      }`}\n                      alt={state.user.viewTxn[6]}\n                    />\n                  </Styles.WalleyImageContainer>\n                  <Styles.TransactionCardMain>\n                    <p>Name - {state.user.viewTxn[2]}</p>\n                    <p>Store name - {state.user.viewTxn[6]} </p>\n                    <p>Amount - {Big(state.user.viewTxn[5]).toFixed(5)}</p>\n                    <p>\n                      Time - {unixToDate(parseInt(state.user.viewTxn[10], 16))}\n                    </p>\n                    {state.user.viewTxn[11] === \"cancel\" ? (\n                      <>\n                        <Styles.WalleyLabel>\n                          Enter the transaction password\n                        </Styles.WalleyLabel>\n                        <Styles.WalleyInput\n                          type=\"password\"\n                          value={state.user.transactionPassword}\n                          onChange={(e) =>\n                            State.update({\n                              user: {\n                                ...state.user,\n                                transactionPassword: e.target.value,\n                              },\n                            })\n                          }\n                        />\n                        <Styles.WalleyButton\n                          color=\"white\"\n                          bg=\"blue\"\n                          onClick={() =>\n                            State.update({\n                              user: {\n                                ...state.user,\n                                viewTxn: null,\n                                transactionPassword: \"\",\n                              },\n                            })\n                          }\n                        >\n                          Close\n                        </Styles.WalleyButton>\n                        <Styles.WalleyButton\n                          color=\"white\"\n                          bg=\"red\"\n                          onClick={() =>\n                            cancelTransaction(\n                              parseInt(state.user.viewTxn[1], 16)\n                            )\n                          }\n                        >\n                          Cancel\n                        </Styles.WalleyButton>\n                      </>\n                    ) : state.user.viewTxn[11] === \"transfer\" ? (\n                      <>\n                        <Styles.WalleyLabel>\n                          Enter the transaction password\n                        </Styles.WalleyLabel>\n                        <Styles.WalleyInput\n                          type=\"password\"\n                          placeholder=\"Enter the transaction password\"\n                          value={state.user.transactionPassword}\n                          onChange={(e) =>\n                            State.update({\n                              user: {\n                                ...state.user,\n                                transactionPassword: e.target.value,\n                              },\n                            })\n                          }\n                        />\n                        <Styles.WalleyLabel>\n                          Enter the Receiver's Address\n                        </Styles.WalleyLabel>\n                        <Styles.WalleyInput\n                          type=\"text\"\n                          value={state.user.transferTo}\n                          placeholder=\"Receiver's Address\"\n                          onChange={(e) =>\n                            State.update({\n                              user: {\n                                ...state.user,\n                                transferTo: e.target.value,\n                              },\n                            })\n                          }\n                        />\n                        <Styles.WalleyButton\n                          color=\"white\"\n                          bg=\"blue\"\n                          onClick={() =>\n                            State.update({\n                              user: {\n                                ...state.user,\n                                viewTxn: null,\n                                transactionPassword: \"\",\n                              },\n                            })\n                          }\n                        >\n                          Close\n                        </Styles.WalleyButton>\n                        <Styles.WalleyButton\n                          color=\"white\"\n                          bg=\"red\"\n                          onClick={() =>\n                            transferToken(parseInt(state.user.viewTxn[1], 16))\n                          }\n                        >\n                          Transfer\n                        </Styles.WalleyButton>\n                      </>\n                    ) : (\n                      <>\n                        <Styles.WalleyLabel>\n                          Please upload the bill -{\" \"}\n                        </Styles.WalleyLabel>\n                        <IpfsImageUpload image={state.store.bill} />\n                        <Styles.WalleyLabel>\n                          Total Bill Amount\n                        </Styles.WalleyLabel>\n                        <Styles.WalleyInput\n                          value={state.store.totalAmount}\n                          onChange={(e) =>\n                            State.update({\n                              store: {\n                                ...state.store,\n                                totalAmount: e.target.value,\n                              },\n                            })\n                          }\n                        />\n                        <Styles.WalleyLabel>\n                          Transaction Password\n                        </Styles.WalleyLabel>\n                        <Styles.WalleyInput\n                          type=\"password\"\n                          value={state.store.approvePassword}\n                          onChange={(e) =>\n                            State.update({\n                              store: {\n                                ...state.store,\n                                approvePassword: e.target.value,\n                              },\n                            })\n                          }\n                        />\n                        <Styles.WalleyButton\n                          color=\"white\"\n                          bg=\"blue\"\n                          onClick={() => {\n                            State.update({\n                              store: {\n                                ...state.store,\n                                approvePassword: \"\",\n                                bill: { uploading: false, cid: \"\" },\n                                totalAmount: null,\n                              },\n                              user: { ...state.user, viewTxn: null },\n                            });\n                          }}\n                        >\n                          Close\n                        </Styles.WalleyButton>\n                        <Styles.WalleyButton\n                          color=\"white\"\n                          bg=\"blue\"\n                          onClick={() => {\n                            console.log(state.store.bill.cid);\n                            if (state.store.bill.cid) {\n                              approveTransaction(\n                                parseInt(state.user.viewTxn[1], 16)\n                              );\n                            } else {\n                              console.log(\"Please Upload the bill\");\n                            }\n                          }}\n                        >\n                          Approve\n                        </Styles.WalleyButton>\n                      </>\n                    )}\n                  </Styles.TransactionCardMain>\n                </Styles.TransactionCard>\n              </Styles.TransactionModal>\n            ) : (\n              \"\"\n            )}\n            {state.view === \"home\" ? (\n              <>\n                <Styles.WalleySearch>\n                  <Styles.WalleyButton\n                    bg=\"#424242\"\n                    color=\"white\"\n                    onClick={() => State.update({ newTxn: true })}\n                  >\n                    Buy New NFT\n                  </Styles.WalleyButton>\n                  <Styles.WalleyInput\n                    value={state.search.store}\n                    onChange={(e) =>\n                      State.update({\n                        search: { ...state.search, store: e.target.value },\n                      })\n                    }\n                    placeholder=\"Search Transactions by Store Name\"\n                  />\n                </Styles.WalleySearch>\n                <p className=\"txn\">Your Transactions</p>\n                <Styles.WalleyTransactions>\n                  {state.user.userPendingTransactions.length !== 0\n                    ? state.user.userPendingTransactions\n                        .filter((tx) =>\n                          tx[6]\n                            .toLowerCase()\n                            .includes(state.search.store.toLowerCase())\n                        )\n                        .map((tx) => (\n                          <Styles.TransactionCard>\n                            <Styles.WalleyImageContainer>\n                              <Styles.WalleyStoreImage\n                                src={`https://ipfs.near.social/ipfs/${\n                                  state.store.storeImages[tx[6]]\n                                }`}\n                                alt={tx[6]}\n                              />\n                            </Styles.WalleyImageContainer>\n                            <Styles.TransactionCardMain>\n                              <p>Name - {tx[2]}</p>\n                              <p>Store name - {tx[6]} </p>\n                              <p>Amount - {Big(tx[5]).toFixed(5)}</p>\n                              <p>Time - {unixToDate(parseInt(tx[10], 16))}</p>\n                              <Styles.WalleyButton\n                                color=\"white\"\n                                bg=\"red\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      viewTxn: [...tx, \"transfer\"],\n                                      transactionPassword: \"\",\n                                    },\n                                  })\n                                }\n                              >\n                                Transfer\n                              </Styles.WalleyButton>\n                              <Styles.WalleyButton\n                                color=\"white\"\n                                bg=\"red\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      viewTxn: [...tx, \"cancel\"],\n                                      transactionPassword: \"\",\n                                    },\n                                  })\n                                }\n                              >\n                                Cancel\n                              </Styles.WalleyButton>\n                            </Styles.TransactionCardMain>\n                          </Styles.TransactionCard>\n                        ))\n                    : \"No pending transactions found\"}\n                </Styles.WalleyTransactions>\n              </>\n            ) : state.view === \"txPast\" ? (\n              <>\n                <Styles.WalleySearch>\n                  <Styles.WalleyButton\n                    bg=\"#424242\"\n                    color=\"white\"\n                    onClick={() => State.update({ newTxn: true })}\n                  >\n                    Buy New NFT\n                  </Styles.WalleyButton>\n                  <Styles.WalleyInput\n                    value={state.search.store}\n                    onChange={(e) =>\n                      State.update({\n                        search: { ...state.search, store: e.target.value },\n                      })\n                    }\n                    placeholder=\"Search Transactions by Store Name\"\n                  />\n                </Styles.WalleySearch>\n                <p className=\"txn\">Your Receipts</p>\n                <Styles.WalleyTransactions>\n                  {state.user.userPastTransactions.length !== 0\n                    ? state.user.userPastTransactions\n                        .filter((tx) =>\n                          tx[6]\n                            .toLowerCase()\n                            .includes(state.search.store.toLowerCase())\n                        )\n                        .map((tx) => (\n                          <Styles.TransactionCard>\n                            <Styles.WalleyImageContainer>\n                              <Styles.WalleyStoreImage\n                                src={`https://ipfs.near.social/ipfs/${\n                                  state.store.storeImages[tx[6]]\n                                }`}\n                                alt={tx[6]}\n                              />\n                            </Styles.WalleyImageContainer>\n                            <Styles.TransactionCardMain>\n                              <p>Name - {tx[2]}</p>\n                              <p>Store name - {tx[6]} </p>\n                              <p>Max Amount - {Big(tx[5]).toFixed(5)}</p>\n                              <p>Total Bill Amount - {Big(tx[9]).toFixed(5)}</p>\n\n                              <p>Time - {unixToDate(parseInt(tx[10], 16))}</p>\n                              {state.user.openReceipt ===\n                              Big(tx[1]).toFixed(0) ? (\n                                <>\n                                  <Styles.WalleyStoreImage\n                                    src={`https://ipfs.near.social/ipfs/${tx[7]}`}\n                                    alt={tx[7]}\n                                  />\n                                  <Styles.WalleyButton\n                                    color=\"#fff\"\n                                    bg=\"#FA9703\"\n                                    onClick={() =>\n                                      State.update({\n                                        user: {\n                                          ...state.user,\n                                          openReceipt: 0,\n                                        },\n                                      })\n                                    }\n                                  >\n                                    Close Receipt\n                                  </Styles.WalleyButton>\n                                </>\n                              ) : (\n                                <Styles.WalleyButton\n                                  color=\"#fff\"\n                                  bg=\"#FA9703\"\n                                  onClick={() =>\n                                    State.update({\n                                      user: {\n                                        ...state.user,\n                                        openReceipt: Big(tx[1]).toFixed(0),\n                                      },\n                                    })\n                                  }\n                                >\n                                  Show Receipt\n                                </Styles.WalleyButton>\n                              )}\n                            </Styles.TransactionCardMain>\n                          </Styles.TransactionCard>\n                        ))\n                    : \"No past transactions found\"}\n                </Styles.WalleyTransactions>\n              </>\n            ) : (\n              \"\"\n            )}\n          </Styles.WalleyHomeBody>\n        </>\n      ) : (\n        <>\n          <Styles.WalleyNavbar>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n              <path\n                d=\"M42.3795 1.00041H3.49873C-0.658836 0.841665 -0.658836 7.16116 3.49873 7.00242H42.2245C46.3065 7.16116 46.4652 1.00041 42.3833 1.00041H42.3795ZM3.49873 25.0009C-0.500093 25.0009 -0.500093 30.9991 3.49873 30.9991H25.4204C29.5024 30.9991 29.5024 25.0009 25.4204 25.0009H3.49873ZM3.49873 49.0014C-0.500093 49.0014 -0.500093 54.9996 3.49873 54.9996H52.6222C56.621 54.9996 56.621 49.0014 52.6222 49.0014H3.49873Z\"\n                fill=\"white\"\n              />\n            </svg>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ view: \"home\" })}\n            >\n              <span>Home</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ view: \"txPast\" })}\n            >\n              <span>Receipts</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLineLast></Styles.NavLineLast>\n          </Styles.WalleyNavbar>\n          <Styles.WalleyStoreBody>\n            <Styles.WalleyTransactions>\n              {state.view === \"home\"\n                ? state.store.storePendingTransactions.length !== 0\n                  ? state.store.storePendingTransactions.map((tx) => (\n                      <Styles.TransactionCard>\n                        <Styles.WalleyImageContainer>\n                          <Styles.WalleyStoreImage\n                            src={`https://ipfs.near.social/ipfs/${\n                              state.store.storeImages[tx[6]]\n                            }`}\n                            alt={tx[6]}\n                          />\n                        </Styles.WalleyImageContainer>\n                        <Styles.TransactionCardMain>\n                          <p>Name - {tx[2]}</p>\n                          <p>Store name - {tx[6]} </p>\n                          <p>Max amount - {Big(tx[5]).toFixed(5)}</p>\n\n                          <p>Time - {unixToDate(parseInt(tx[10], 16))}</p>\n                          <Styles.WalleyButton\n                            color=\"white\"\n                            bg=\"blue\"\n                            onClick={() =>\n                              State.update({\n                                store: {\n                                  ...state.store,\n                                  approvePassword: \"\",\n                                  bill: { uploading: false, amount: null },\n                                  totalAmount: null,\n                                },\n                                user: {\n                                  ...state.user,\n                                  viewTxn: [...tx, \"approve\"],\n                                },\n                              })\n                            }\n                          >\n                            Approve\n                          </Styles.WalleyButton>\n                        </Styles.TransactionCardMain>\n                      </Styles.TransactionCard>\n                    ))\n                  : \"No pending transactions\"\n                : state.store.storePastTransactions.length !== 0\n                ? state.store.storePastTransactions.map((tx) => (\n                    <Styles.TransactionCard>\n                      <Styles.WalleyImageContainer>\n                        <Styles.WalleyStoreImage\n                          src={`https://ipfs.near.social/ipfs/${\n                            state.store.storeImages[tx[6]]\n                          }`}\n                          alt={tx[6]}\n                        />\n                      </Styles.WalleyImageContainer>\n                      <Styles.TransactionCardMain>\n                        <p>Name - {tx[2]}</p>\n                        <p>Store name - {tx[6]} </p>\n                        <p>Max Amount - {Big(tx[5]).toFixed(5)}</p>\n\n                        <p>Total Bill Amount - {Big(tx[9]).toFixed(5)}</p>\n\n                        <p>Time - {unixToDate(parseInt(tx[10], 16))}</p>\n                        {state.user.openReceipt === Big(tx[1]).toFixed(0) ? (\n                          <>\n                            <Styles.WalleyStoreImage\n                              src={`https://ipfs.near.social/ipfs/${tx[7]}`}\n                              alt={tx[7]}\n                            />\n                            <Styles.WalleyButton\n                              color=\"#fff\"\n                              bg=\"#FA9703\"\n                              onClick={() =>\n                                State.update({\n                                  user: {\n                                    ...state.user,\n                                    openReceipt: 0,\n                                  },\n                                })\n                              }\n                            >\n                              Close Receipt\n                            </Styles.WalleyButton>\n                          </>\n                        ) : (\n                          <Styles.WalleyButton\n                            color=\"#fff\"\n                            bg=\"#FA9703\"\n                            onClick={() =>\n                              State.update({\n                                user: {\n                                  ...state.user,\n                                  openReceipt: Big(tx[1]).toFixed(0),\n                                },\n                              })\n                            }\n                          >\n                            Show Receipt\n                          </Styles.WalleyButton>\n                        )}\n                      </Styles.TransactionCardMain>\n                    </Styles.TransactionCard>\n                  ))\n                : \"No past transactions found\"}\n            </Styles.WalleyTransactions>\n          </Styles.WalleyStoreBody>\n        </>\n      )}\n    </Styles.WalleyHomeMain>\n  </Styles.WalleyHomeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/walley", "fact_widget_deployments_id": "601ad14f13cc7a85f6316d3b7ccbcf78", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 531}