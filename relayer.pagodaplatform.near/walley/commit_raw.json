{"tx_hash": "HmcPcCxbHy4XyoM3tLUHcuQXHHYaZGfaChzHwA59Cmi7", "action_id_social": "ASpCgaJgpgxyUmeBLfXqZYwSq1pPG1dkDRoRQe2NmTv-0-widget", "block_id": 99829097, "block_timestamp": "2023-08-28T05:10:43.840Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "walley", "source_code": "const unixToDate = (time) => {\n  const d = new Date(time * 1000);\n  return d.toLocaleString();\n};\n\nconst nftAddress = \"0xf3e51d3de3de68855d78988aad57c8052131645b\";\nconst NFTManagerABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/NFTManager.json\")\n    .body\n);\nconst walleyAddress = \"0x46dc27091d11b84f9ad5a06c1fc3ecc3cadecde8\";\nconst WalleyABI = JSON.parse(\n  fetch(\"https://raw.githubusercontent.com/test1883/files/main/Walley.json\")\n    .body\n);\nState.init({\n  general: {\n    chainId: undefined,\n    balance: 0,\n  },\n  store: {\n    stores: [],\n    storeName: \"\",\n    storeAddress: \"\",\n    isStore: false,\n    storePendingTransactions: [],\n    storePastTransactions: [],\n    storeImages: {},\n    viewTxn: [],\n    approvePassword: \"\",\n    bill: { uploading: false, cid: null },\n    totalAmount: 0,\n  },\n  user: {\n    userPendingTransactions: [],\n    userPastTransactions: [],\n    openModal: 0,\n    transferTo: \"\",\n    viewTxn: [],\n    transactionPassword: \"\",\n    openReceipt: 0,\n  },\n  homeInputs: {\n    storeName: \"\",\n    amount: 0,\n    name: \"\",\n    password: \"\",\n  },\n  storeInputs: {\n    storeName: \"\",\n    storeAddress: \"\",\n    image: \"\",\n  },\n  search: {\n    store: \"\",\n    user: \"\",\n  },\n  storeName: \"\",\n  view: \"home\",\n  loading: true,\n  loadingMsg: \"Fetching Data\",\n  newTxn: false,\n  addSt: false,\n});\n\nconst Styles = props.Styles;\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nconst updateBalance = () => {\n  Ethers.provider()\n    .getBalance(sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(5) });\n    });\n};\nif (!sender) {\n  return (\n    <Styles.Root>\n      <Styles.WalleyIndexContainer>\n        <Styles.WalleyTitle>Walley.</Styles.WalleyTitle>\n        <Styles.WalleyIndexBody>\n          <Styles.WalleyIndexDesc>\n            Go Phoneless With the Highly Secured NFT-based Wallet.\n          </Styles.WalleyIndexDesc>\n          <Styles.WalleyIndexMain>\n            <span>Get Started -</span>\n            <Web3Connect connectLabel=\"Connect Wallet\" />\n          </Styles.WalleyIndexMain>\n        </Styles.WalleyIndexBody>\n      </Styles.WalleyIndexContainer>\n    </Styles.Root>\n  );\n}\nif (state.chainId === undefined && ethers !== undefined && sender) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n  updateBalance();\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Ethereum Sepolia</p>;\n}\nconst nftIface = new ethers.utils.Interface(NFTManagerABI);\nconst nftContract = new ethers.Contract(\n  nftAddress,\n  NFTManagerABI,\n  Ethers.provider().getSigner()\n);\nconst walleyIface = new ethers.utils.Interface(WalleyABI);\nconst walleyContract = new ethers.Contract(\n  walleyAddress,\n  WalleyABI,\n  Ethers.provider().getSigner()\n);\n//get stores data\nif (state.store.stores.length === 0 && nftContract && sender) {\n  State.update({ loadingMsg: \"Fetching Stores\" });\n  nftContract.getAllStores().then((stores) => {\n    onTxInit();\n    if (stores.length === 0) {\n      State.update({ loading: false, loadingMsg: \"\" });\n    } else {\n      const storeState = state.store;\n      storeState.stores = stores;\n      let store;\n      for (let i = 0; i < stores.length; i++) {\n        store = stores[i];\n        storeState.storeImages[store[0]] = store[2];\n        if (store[1].toLowerCase() === sender.toLowerCase()) {\n          storeState.isStore = true;\n          storeState.storeName = store[0];\n          storeState.storeAddress = store[1];\n          State.update({\n            loading: true,\n            loadingMsg: \"Fetching Store Transactions\",\n          });\n          storeTxn(store[1]);\n        }\n        if (i === stores.length - 1)\n          State.update({ store: storeState, loading: false, loadingMsg: \"\" });\n      }\n    }\n  });\n}\n\nconst storeTxn = (address) => {\n  console.log(\"heere\");\n  const storeState = state.store;\n  nftContract.getStoreTransactions(address).then((transactions) => {\n    storeState.storePendingTransactions = [];\n    storeState.storePastTransactions = [];\n    transactions.map((txn) => {\n      if (txn[8] === false) {\n        storeState.storePendingTransactions.push(txn);\n      } else {\n        storeState.storePastTransactions.push(txn);\n      }\n      State.update({ store: storeState });\n    });\n  });\n};\n\nconst onTxInit = () => {\n  State.update({\n    view: \"home\",\n    loading: true,\n    loadingMsg: \"Fetching transactions\",\n  });\n  nftContract.getMyTransactions({ from: sender }).then((transactions) => {\n    const st = [];\n    transactions.map((txn) => {\n      if (txn[8] === false) st.push(txn);\n    });\n    State.update({\n      user: { ...state.user, userPendingTransactions: st },\n      loading: false,\n      loadingMsg: \"\",\n    });\n  });\n};\n\nconst onTxPastClick = () => {\n  State.update({\n    view: \"txPast\",\n    loading: true,\n    loadingMsg: \"Fetching past transactions\",\n  });\n  nftContract.getMyTransactions({ from: sender }).then((transactions) => {\n    const st = [];\n    transactions.map((txn) => {\n      if (txn[8] === true) st.push(txn);\n    });\n    State.update({\n      user: { ...state.user, userPastTransactions: st },\n      loading: false,\n      loadingMsg: \"\",\n    });\n  });\n};\n\nconst widgetOptions = () => {\n  const options = [];\n  for (let i = 0; i < state.store.stores.length; i++)\n    options.push({\n      text: state.store.stores[i][0],\n      value: state.store.stores[i][0],\n    });\n  return options;\n};\n\nconst homeInputUpdates = (value, field) => {\n  const homeInputs = state.homeInputs;\n  homeInputs[field] = value;\n  State.update({ homeInputs });\n};\nconst storeInputUpdates = (value, field) => {\n  const storeInputs = state.storeInputs;\n  storeInputs[field] = value;\n  State.update({ storeInputs });\n};\n\nconst addStore = () => {\n  const { storeName, storeAddress, image } = state.storeInputs;\n\n  if (storeName === \"\" || storeAddress === \"\" || image === \"\") {\n    props.toast(\"ERROR\", \"Note\", \"Please fill in all the details!\");\n    return;\n  }\n  if (state.store.storeImages[storeName]) {\n    props.toast(\n      \"ERROR\",\n      \"Note\",\n      \"Store already exists! Please choose a different name.\"\n    );\n    return;\n  }\n  if (!ethers.utils.isAddress(storeAddress)) {\n    props.toast(\n      \"ERROR\",\n      \"Note\",\n      \"Store Address is not valid. Please try again!\"\n    );\n    return;\n  }\n  State.update({\n    loading: true,\n    loadingMsg: \"Creating a new store\",\n    addSt: false,\n  });\n  nftContract.addStore(storeName, storeAddress, image.cid).then((t) => {\n    t.wait().then((r) => {\n      State.update({\n        store: {\n          ...state.store,\n          stores: [\n            ...state.store.stores,\n            [storeName, storeAddress.toLowerCase(), image.cid],\n          ],\n          storeImages: { ...state.store.storeImages, [storeName]: image.cid },\n        },\n        storeInputs: {\n          storeName: \"\",\n          storeAddress: \"\",\n          image: \"\",\n        },\n        loading: false,\n        loadingMsg: \"\",\n      });\n      if (storeAddress.toLowerCase() === sender) {\n        State.update({\n          store: { ...state.store, isStore: true, storeAddress, storeName },\n        });\n      }\n      updateBalance();\n      props.toast(\"SUCCESS\", \"Success\", \"Store Created Successfully\");\n    });\n  });\n};\n\nconst getStoreAddress = (storeName) => {\n  const t = [];\n  state.store.stores.map((store) => {\n    if (store[0] === storeName) t.push(store[1]);\n  });\n  return t[0];\n};\n\nconst initTransaction = () => {\n  const { storeName, amount, name, password } = state.homeInputs;\n  if (storeName === \"\" || name === \"\" || !amount || password === \"\") {\n    props.toast(\"ERROR\", \"Note\", \"Please fill in all the details!\");\n    return;\n  }\n  if (password.length < 8) {\n    props.toast(\"ERROR\", \"Note\", \"Password must contain atleast 8 characters!\");\n    return;\n  }\n  if (amount <= 0) {\n    props.toast(\"ERROR\", \"Note\", \"Amount must be greater than 0\");\n    return;\n  }\n  State.update({\n    newTxn: false,\n    loading: true,\n    loadingMsg: \"Minting your NFT - Please Pay the gas price\",\n  });\n  walleyContract\n    .mint(password, { from: sender })\n    .then((tx) => {\n      State.update({ loadingMsg: \"Waiting for confirmation\" });\n      tx.wait().then((r) => {\n        updateBalance();\n        const tokenId = parseInt(r.logs[2].data, 16);\n        State.update({\n          loadingMsg:\n            \"Creating your transaction - Please pay the amount you entered + gas\",\n        });\n        nftContract\n          .initTransaction(\n            walleyAddress,\n            name,\n            tokenId,\n            `${amount * Math.pow(10, 18)}`,\n            getStoreAddress(storeName),\n            storeName,\n            {\n              from: sender,\n              value: ethers.utils.parseUnits(`${amount}`, 18),\n            }\n          )\n          .then((txInit) => {\n            State.update({\n              loadingMsg: \"Waiting for the final confirmation\",\n            });\n            txInit.wait().then((res) => {\n              onTxInit();\n              updateBalance();\n              props.toast(\n                \"SUCCESS\",\n                \"Success\",\n                \"Transaction Created Successfully\"\n              );\n              State.update({\n                loading: false,\n                loadingMsg: \"\",\n                homeInputs: {\n                  storeName: \"\",\n                  name: \"\",\n                  amount: \"\",\n                  password: \"\",\n                },\n              });\n            });\n          })\n          .catch((err) => {\n            State.update({\n              loading: false,\n              loadingMsg: \"\",\n            });\n          });\n      });\n    })\n    .catch((err) => {\n      State.update({\n        loading: false,\n        loadingMsg: \"\",\n      });\n    });\n};\n\nconst cancelTransaction = (tokenId) => {\n  if (state.user.transactionPassword < 8) {\n    props.toast(\"ERROR\", \"Note\", \"Password must contain atleast 8 characters!\");\n    return;\n  }\n  checkPassword(tokenId, state.user.transactionPassword, () => {\n    State.update({\n      user: { ...state.user, viewTxn: [] },\n      loading: true,\n      loadingMsg: \"Cancelling your transaction - Pay for the gas\",\n    });\n    nftContract\n      .cancelTransaction(walleyAddress, tokenId, { from: sender })\n      .then((tx) => {\n        State.update({ loadingMsg: \"Refunding your amount\" });\n        tx.wait()\n          .then((r) => {\n            updateBalance();\n            props.toast(\n              \"SUCCESS\",\n              \"Success\",\n              \"Amount refunded to your account successfully!\"\n            );\n            const tmp = [];\n            state.user.userPendingTransactions.map((trans) => {\n              if (parseInt(trans[1], 16) !== tokenId) {\n                tmp.push(trans);\n              }\n            });\n            State.update({\n              loading: false,\n              loadingMsg: \"\",\n              user: {\n                ...state.user,\n                userPendingTransactions: tmp,\n                transactionPassword: \"\",\n                viewTxn: [],\n              },\n            });\n          })\n          .catch((err) => {\n            props.toast(\n              \"ERROR\",\n              \"Note\",\n              \"You must buy at least 1 NFT to use transferred NFTs\"\n            );\n\n            State.update({\n              loading: false,\n              loadingMsg: \"\",\n            });\n          });\n      })\n      .catch((err) => {\n        props.toast(\n          \"ERROR\",\n          \"Note\",\n          \"You must buy at least 1 NFT to use transferred NFTs\"\n        );\n        State.update({\n          loading: false,\n          loadingMsg: \"\",\n        });\n      });\n  });\n};\n\nconst approveTransaction = (tokenId, address) => {\n  if (state.store.totalAmount <= 0) {\n    props.toast(\"ERROR\", \"Note\", \"Amount must be greater than 0\");\n    return;\n  }\n  if (state.store.approvePassword < 8) {\n    props.toast(\"ERROR\", \"Note\", \"Password must contain atleast 8 characters!\");\n    return;\n  }\n  checkPassword(tokenId, state.store.approvePassword, () => {\n    State.update({\n      user: { ...state.user, viewTxn: [] },\n      loading: true,\n      loadingMsg: \"Approving your transaction - Pay for the gas\",\n    });\n    nftContract\n      .approveTransaction(\n        walleyAddress,\n        tokenId,\n        `${state.store.totalAmount * Math.pow(10, 18)}`,\n        state.store.bill.cid,\n        {\n          from: sender,\n        }\n      )\n      .then((tx) => {\n        State.update({\n          loadingMsg: \"Waiting for confirmation - Refunding the change\",\n        });\n        tx.wait()\n          .then((res) => {\n            updateBalance();\n            props.toast(\n              \"SUCCESS\",\n              \"Success\",\n              \"Transaction has been completed successfully!\"\n            );\n            storeTxn(address);\n            State.update({\n              store: {\n                ...state.store,\n                approvePassword: \"\",\n                bill: { uploading: false, amount: null },\n                totalAmount: 0,\n              },\n              user: { ...state.user, viewTxn: [] },\n              loadingMsg: \"\",\n              loading: false,\n            });\n          })\n          .catch((err) => {\n            props.toast(\n              \"ERROR\",\n              \"Note\",\n              \"You must buy at least 1 NFT to use transferred NFTs\"\n            );\n\n            State.update({\n              loading: false,\n              loadingMsg: \"\",\n            });\n          });\n      })\n      .catch((err) => {\n        props.toast(\n          \"ERROR\",\n          \"Note\",\n          \"You must buy at least 1 NFT to use transferred NFTs\"\n        );\n\n        State.update({\n          loading: false,\n          loadingMsg: \"\",\n        });\n      });\n  });\n};\n\nconst transferToken = (tokenId) => {\n  if (state.user.transactionPassword < 8) {\n    props.toast(\"ERROR\", \"Note\", \"Password must contain atleast 8 characters!\");\n    return;\n  }\n  if (!ethers.utils.isAddress(state.user.transferTo)) {\n    props.toast(\"ERROR\", \"Note\", \"Enter a valid address!\");\n    return;\n  }\n  checkPassword(tokenId, state.user.transactionPassword, () => {\n    State.update({\n      user: { ...state.user, viewTxn: [] },\n      loading: true,\n      loadingMsg: \"Transferring your Token - Pay for the gas\",\n    });\n    nftContract\n      .transferNFT(walleyAddress, tokenId, state.user.transferTo, {\n        from: sender,\n      })\n      .then((tx) => {\n        State.update({\n          loadingMsg: \"Waiting for confirmation\",\n        });\n        tx.wait()\n          .then((res) => {\n            updateBalance();\n            props.toast(\n              \"SUCCESS\",\n              \"Success\",\n              \"NFT has been transferred successfully\"\n            );\n            State.update({\n              user: {\n                ...state.user,\n                userPendingTransactions:\n                  state.user.userPendingTransactions.filter(\n                    (tx) => parseInt(tx[1], 16) !== tokenId\n                  ),\n                viewTxn: [],\n                transferTo: \"\",\n              },\n              loading: false,\n              loadingMsg: \"\",\n            });\n          })\n          .catch((err) => {\n            props.toast(\n              \"ERROR\",\n              \"Note\",\n              \"You must buy at least 1 NFT to use transferred NFTs\"\n            );\n\n            State.update({\n              loading: false,\n              loadingMsg: \"\",\n            });\n          });\n      })\n      .catch((err) => {\n        props.toast(\n          \"ERROR\",\n          \"Note\",\n          \"You must buy at least 1 NFT to use transferred NFTs\"\n        );\n\n        State.update({\n          loading: false,\n          loadingMsg: \"\",\n        });\n      });\n  });\n};\n\nconst checkPassword = (tokenId, password, fn) => {\n  walleyContract.checkPassword(tokenId, password).then((check) => {\n    if (check) {\n      fn();\n    } else props.toast(\"ERROR\", \"Note\", \"Please enter the correct passsword\");\n  });\n};\n\nconst getTable = (txn, store) => {\n  console.log(txn);\n  if (txn !== undefined) {\n    return (\n      <table className=\"table text-white\">\n        <tbody>\n          <tr>\n            <td>Name</td>\n            <td>{txn[2]}</td>\n          </tr>\n          <tr>\n            <td>Store Name</td>\n            <td>{txn[6]}</td>\n          </tr>\n          {store ? (\n            <>\n              <tr>\n                <td>Max Allowance</td>\n                <td>\n                  {parseFloat(Big(txn[5]).div(Big(10).pow(18)).toFixed(5))} ETH\n                </td>\n              </tr>\n              <tr>\n                <td>Total Bill Amount</td>\n                <td>\n                  {parseFloat(Big(txn[9]).div(Big(10).pow(18)).toFixed(5))} ETH\n                </td>\n              </tr>\n            </>\n          ) : (\n            <tr>\n              <td>Allowance</td>\n              <td>\n                {parseFloat(Big(txn[5]).div(Big(10).pow(18)).toFixed(5))} ETH\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td>Processing Time</td>\n            <td>\n              {unixToDate(Big(txn[10]).toFixed(0)).split(\",\")[0]} <br />{\" \"}\n              {unixToDate(Big(txn[10]).toFixed(0)).split(\",\")[1]}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  } else return \"\";\n};\n\nreturn (\n  <Styles.WalleyHomeContainer>\n    <Styles.WalleyHomeHeader>\n      <p>Walley.</p>\n      <Styles.WalleyBalance>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"20\"\n          height=\"18\"\n          fill=\"none\"\n        >\n          <path\n            d=\"M14.5156 0C17.9644 0 20 1.98459 20 5.3818H15.7689V5.41647C13.8052 5.41647 12.2133 6.96849 12.2133 8.883C12.2133 10.7975 13.8052 12.3495 15.7689 12.3495H20V12.6615C20 16.0154 17.9644 18 14.5156 18H5.48444C2.03556 18 0 16.0154 0 12.6615V5.33847C0 1.98459 2.03556 0 5.48444 0H14.5156ZM19.2533 6.87241C19.6657 6.87241 20 7.19834 20 7.60039V10.131C19.9952 10.5311 19.6637 10.8543 19.2533 10.8589H15.8489C14.8548 10.872 13.9855 10.2084 13.76 9.26432C13.6471 8.67829 13.8056 8.07357 14.1931 7.61222C14.5805 7.15087 15.1573 6.88007 15.7689 6.87241H19.2533ZM16.2489 8.04237H15.92C15.7181 8.04005 15.5236 8.11664 15.38 8.25504C15.2364 8.39344 15.1556 8.58213 15.1556 8.77901C15.1555 9.19205 15.4964 9.52823 15.92 9.53298H16.2489C16.6711 9.53298 17.0133 9.1993 17.0133 8.78767C17.0133 8.37605 16.6711 8.04237 16.2489 8.04237ZM10.3822 3.89119H4.73778C4.31903 3.89116 3.9782 4.2196 3.97333 4.62783C3.97333 5.04087 4.31415 5.37705 4.73778 5.3818H10.3822C10.8044 5.3818 11.1467 5.04812 11.1467 4.6365C11.1467 4.22487 10.8044 3.89119 10.3822 3.89119Z\"\n            fill=\"#fff\"\n          />\n        </svg>{\" \"}\n        {state.balance} ETH\n      </Styles.WalleyBalance>\n    </Styles.WalleyHomeHeader>\n    <Styles.WalleyHomeMain>\n      {state.loading ? (\n        <Styles.WalleyLoading>\n          <Styles.WalleyModal>\n            <img src=\"https://svgshare.com/i/wuF.svg\" title=\"\" />\n            <p>{state.loadingMsg}</p>\n          </Styles.WalleyModal>\n        </Styles.WalleyLoading>\n      ) : (\n        \"\"\n      )}\n\n      {state.user.viewTxn.length !== 0 ? (\n        <Styles.TransactionModal>\n          <Styles.TransactionCard>\n            <Styles.TransactionCardMain>\n              {getTable(state.user.viewTxn, false)}\n              {state.user.viewTxn[11] === \"cancel\" ? (\n                <>\n                  <Styles.WalleyLabel>\n                    Enter the transaction password\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    type=\"password\"\n                    value={state.user.transactionPassword}\n                    onChange={(e) =>\n                      State.update({\n                        user: {\n                          ...state.user,\n                          transactionPassword: e.target.value,\n                        },\n                      })\n                    }\n                  />\n                  <Styles.WalleyButtonRow>\n                    <Styles.WalleyButton\n                      className=\"grey\"\n                      onClick={() =>\n                        State.update({\n                          user: {\n                            ...state.user,\n                            viewTxn: [],\n                            transactionPassword: \"\",\n                          },\n                        })\n                      }\n                    >\n                      Close\n                    </Styles.WalleyButton>\n                    <Styles.WalleyButton\n                      className=\"red\"\n                      onClick={() =>\n                        cancelTransaction(parseInt(state.user.viewTxn[1], 16))\n                      }\n                    >\n                      Cancel\n                    </Styles.WalleyButton>\n                  </Styles.WalleyButtonRow>\n                </>\n              ) : state.user.viewTxn[11] === \"transfer\" ? (\n                <>\n                  <Styles.WalleyLabel>\n                    Enter the transaction password\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    type=\"password\"\n                    value={state.user.transactionPassword}\n                    onChange={(e) =>\n                      State.update({\n                        user: {\n                          ...state.user,\n                          transactionPassword: e.target.value,\n                        },\n                      })\n                    }\n                  />\n                  <Styles.WalleyLabel>\n                    Enter the Receiver's Address\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    type=\"text\"\n                    value={state.user.transferTo}\n                    onChange={(e) =>\n                      State.update({\n                        user: {\n                          ...state.user,\n                          transferTo: e.target.value,\n                        },\n                      })\n                    }\n                  />\n                  <Styles.WalleyButtonRow>\n                    <Styles.WalleyButton\n                      className=\"grey\"\n                      onClick={() =>\n                        State.update({\n                          user: {\n                            ...state.user,\n                            viewTxn: [],\n                            transactionPassword: \"\",\n                          },\n                        })\n                      }\n                    >\n                      Close\n                    </Styles.WalleyButton>\n                    <Styles.WalleyButton\n                      className=\"orange\"\n                      onClick={() =>\n                        transferToken(parseInt(state.user.viewTxn[1], 16))\n                      }\n                    >\n                      Transfer\n                    </Styles.WalleyButton>\n                  </Styles.WalleyButtonRow>\n                </>\n              ) : state.user.viewTxn[11] === \"approve\" ? (\n                <>\n                  <Styles.WalleyLabel>\n                    Please upload the bill -{\" \"}\n                  </Styles.WalleyLabel>\n                  <IpfsImageUpload image={state.store.bill} />\n                  <Styles.WalleyLabel>Total Bill Amount</Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.store.totalAmount}\n                    onChange={(e) =>\n                      State.update({\n                        store: {\n                          ...state.store,\n                          totalAmount: e.target.value,\n                        },\n                      })\n                    }\n                  />\n                  <Styles.WalleyLabel>Transaction Password</Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    type=\"password\"\n                    value={state.store.approvePassword}\n                    onChange={(e) =>\n                      State.update({\n                        store: {\n                          ...state.store,\n                          approvePassword: e.target.value,\n                        },\n                      })\n                    }\n                  />\n                  <Styles.WalleyButtonRow>\n                    <Styles.WalleyButton\n                      className=\"grey\"\n                      onClick={() => {\n                        State.update({\n                          store: {\n                            ...state.store,\n                            approvePassword: \"\",\n                            bill: { uploading: false, cid: \"\" },\n                            totalAmount: null,\n                          },\n                          user: { ...state.user, viewTxn: [] },\n                        });\n                      }}\n                    >\n                      Close\n                    </Styles.WalleyButton>\n                    <Styles.WalleyButton\n                      className=\"orange\"\n                      onClick={() => {\n                        if (state.store.bill.cid) {\n                          approveTransaction(\n                            parseInt(state.user.viewTxn[1], 16),\n                            state.user.viewTxn[3]\n                          );\n                        } else {\n                        }\n                      }}\n                    >\n                      Approve\n                    </Styles.WalleyButton>\n                  </Styles.WalleyButtonRow>\n                </>\n              ) : (\n                \"\"\n              )}\n            </Styles.TransactionCardMain>\n          </Styles.TransactionCard>\n        </Styles.TransactionModal>\n      ) : (\n        \"\"\n      )}\n      {!state.store.isStore ? (\n        <>\n          <Styles.WalleyNavbar>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ view: \"home\" })}\n              className={state.view === \"home\" ? \"grey\" : \"\"}\n            >\n              <span>Home</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={onTxPastClick}\n              className={state.view === \"txPast\" ? \"grey\" : \"\"}\n            >\n              <span>Receipts</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => {\n                props.toast(\n                  \"INFO\",\n                  \"Note\",\n                  \"If you have any pending transactions, you won't be able to see them. But they can be completed at the store!\"\n                );\n                State.update({ addSt: true });\n              }}\n            >\n              <span>Add a store</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLineLast></Styles.NavLineLast>\n          </Styles.WalleyNavbar>\n          <Styles.WalleyHomeBody>\n            {state.newTxn ? (\n              <Styles.WalleyHomeOverlay>\n                <Styles.WalleyHomeForm>\n                  <Styles.WalleyLabel>Select a Store</Styles.WalleyLabel>\n                  <Widget\n                    src=\"near/widget/Select\"\n                    props={{\n                      value: state.homeInputs.storeName,\n                      noLabel: true,\n                      placeholder:\n                        state.store.stores.length !== 0\n                          ? \"Select a store\"\n                          : \"No Store Available\",\n                      options: [...widgetOptions()],\n                      onChange: (value) => {\n                        homeInputUpdates(value.text, \"storeName\");\n                      },\n                    }}\n                  />\n                  <Styles.WalleyLabel>\n                    Enter the maximum amount you'd like to spend(in ETH)\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.homeInputs.amount}\n                    type=\"number\"\n                    onChange={(e) => homeInputUpdates(e.target.value, \"amount\")}\n                  />\n                  <Styles.WalleyLabel>\n                    Name(will be asked at the store)\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.homeInputs.name}\n                    type=\"text\"\n                    onChange={(e) => homeInputUpdates(e.target.value, \"name\")}\n                  />\n                  <Styles.WalleyLabel>\n                    Set a password for the transaction(will be asked during\n                    checkout)\n                  </Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.homeInputs.password}\n                    type=\"password\"\n                    onChange={(e) =>\n                      homeInputUpdates(e.target.value, \"password\")\n                    }\n                  />\n                  <Styles.WalleyButtonRow>\n                    <Styles.WalleyButton\n                      className=\"grey\"\n                      onClick={() => State.update({ newTxn: false })}\n                    >\n                      Cancel\n                    </Styles.WalleyButton>\n                    <Styles.WalleyButton\n                      className=\"orange\"\n                      onClick={initTransaction}\n                    >\n                      Buy The Store NFT\n                    </Styles.WalleyButton>\n                  </Styles.WalleyButtonRow>\n                </Styles.WalleyHomeForm>\n              </Styles.WalleyHomeOverlay>\n            ) : (\n              \"\"\n            )}\n            {state.addSt ? (\n              <Styles.WalleyStoreOverlay>\n                <Styles.WalleyStoreForm>\n                  <Styles.WalleyLabel>Store Name</Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.storeInputs.storeName}\n                    type=\"text\"\n                    onChange={(e) => {\n                      storeInputUpdates(e.target.value, \"storeName\");\n                    }}\n                  />\n                  <Styles.WalleyLabel>Store Address</Styles.WalleyLabel>\n                  <Styles.WalleyInput\n                    value={state.storeInputs.storeAddress}\n                    type=\"text\"\n                    onChange={(e) =>\n                      storeInputUpdates(e.target.value, \"storeAddress\")\n                    }\n                  />\n                  <Styles.WalleyStoreButton\n                    onClick={() => storeInputUpdates(sender, \"storeAddress\")}\n                  >\n                    Use current address(convert this account into a store)\n                  </Styles.WalleyStoreButton>\n                  <Styles.WalleyLabel>Add Cover Image</Styles.WalleyLabel>\n                  <IpfsImageUpload image={state.storeInputs.image} />\n                  <Styles.WalleyButtonRow>\n                    <Styles.WalleyButton\n                      className=\"grey\"\n                      onClick={() => State.update({ addSt: false })}\n                    >\n                      Cancel\n                    </Styles.WalleyButton>\n                    <Styles.WalleyButton className=\"orange\" onClick={addStore}>\n                      Add Store\n                    </Styles.WalleyButton>\n                  </Styles.WalleyButtonRow>\n                </Styles.WalleyStoreForm>\n              </Styles.WalleyStoreOverlay>\n            ) : (\n              \"\"\n            )}\n            {state.view === \"home\" ? (\n              <>\n                <Styles.WalleySearch>\n                  <Styles.WalleyButton\n                    className=\"orange\"\n                    onClick={() => State.update({ newTxn: true })}\n                  >\n                    Buy New NFT\n                  </Styles.WalleyButton>\n                  <Styles.WalleyInput\n                    value={state.search.store}\n                    onChange={(e) =>\n                      State.update({\n                        search: { ...state.search, store: e.target.value },\n                      })\n                    }\n                    placeholder=\"Search Transactions by Store Name\"\n                  />\n                </Styles.WalleySearch>\n                <p className=\"txn\" className=\"txn\">\n                  Your Transactions\n                </p>\n                <Styles.WalleyTransactions>\n                  {state.user.userPendingTransactions.length !== 0 ? (\n                    state.user.userPendingTransactions\n                      .filter((tx) =>\n                        tx[6]\n                          .toLowerCase()\n                          .includes(state.search.store.toLowerCase())\n                      )\n                      .map((tx) => (\n                        <Styles.TransactionCard>\n                          <Styles.WalleyImageContainer>\n                            <Styles.WalleyStoreImage\n                              src={`https://ipfs.near.social/ipfs/${\n                                state.store.storeImages[tx[6]]\n                              }`}\n                              alt={tx[6]}\n                            />\n                          </Styles.WalleyImageContainer>\n                          <Styles.TransactionCardMain>\n                            {getTable(tx, false)}\n                            <Styles.WalleyButtonRow>\n                              <Styles.WalleyButton\n                                className=\"grey\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      viewTxn: [...tx, \"transfer\"],\n                                      transactionPassword: \"\",\n                                    },\n                                  })\n                                }\n                              >\n                                Transfer\n                              </Styles.WalleyButton>\n                              <Styles.WalleyButton\n                                className=\"red\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      viewTxn: [...tx, \"cancel\"],\n                                      transactionPassword: \"\",\n                                    },\n                                  })\n                                }\n                              >\n                                Cancel\n                              </Styles.WalleyButton>\n                            </Styles.WalleyButtonRow>\n                          </Styles.TransactionCardMain>\n                        </Styles.TransactionCard>\n                      ))\n                  ) : (\n                    <p>No pending transactions found</p>\n                  )}\n                </Styles.WalleyTransactions>\n              </>\n            ) : state.view === \"txPast\" ? (\n              <>\n                <Styles.WalleySearch>\n                  <Styles.WalleyButton\n                    className=\"orange\"\n                    onClick={() => State.update({ newTxn: true })}\n                  >\n                    Buy New NFT\n                  </Styles.WalleyButton>\n                  <Styles.WalleyInput\n                    value={state.search.store}\n                    onChange={(e) =>\n                      State.update({\n                        search: { ...state.search, store: e.target.value },\n                      })\n                    }\n                    placeholder=\"Search Transactions by Store Name\"\n                  />\n                </Styles.WalleySearch>\n                <p className=\"txn\" className=\"txn\">\n                  Your Receipts\n                </p>\n                <Styles.WalleyTransactions>\n                  {state.user.userPastTransactions.length !== 0 ? (\n                    state.user.userPastTransactions\n                      .filter((tx) =>\n                        tx[6]\n                          .toLowerCase()\n                          .includes(state.search.store.toLowerCase())\n                      )\n                      .map((tx) => (\n                        <Styles.TransactionCard>\n                          <Styles.WalleyImageContainer>\n                            <Styles.WalleyStoreImage\n                              src={`https://ipfs.near.social/ipfs/${\n                                state.store.storeImages[tx[6]]\n                              }`}\n                              alt={tx[6]}\n                            />\n                          </Styles.WalleyImageContainer>\n                          <Styles.TransactionCardMain>\n                            {getTable(tx, true)}\n                            {state.user.openReceipt ===\n                            Big(tx[1]).toFixed(0) ? (\n                              <Styles.TransactionModal className=\"receipt\">\n                                <Styles.WalleyStoreImage\n                                  src={`https://ipfs.near.social/ipfs/${tx[7]}`}\n                                  alt={tx[7]}\n                                />\n                                <Styles.WalleyButton\n                                  className=\"orange\"\n                                  onClick={() =>\n                                    State.update({\n                                      user: {\n                                        ...state.user,\n                                        openReceipt: 0,\n                                      },\n                                    })\n                                  }\n                                >\n                                  Close Receipt\n                                </Styles.WalleyButton>\n                              </Styles.TransactionModal>\n                            ) : (\n                              <Styles.WalleyButton\n                                className=\"orange\"\n                                onClick={() =>\n                                  State.update({\n                                    user: {\n                                      ...state.user,\n                                      openReceipt: Big(tx[1]).toFixed(0),\n                                    },\n                                  })\n                                }\n                              >\n                                Show Receipt\n                              </Styles.WalleyButton>\n                            )}\n                          </Styles.TransactionCardMain>\n                        </Styles.TransactionCard>\n                      ))\n                  ) : (\n                    <p>No past transactions found</p>\n                  )}\n                </Styles.WalleyTransactions>\n              </>\n            ) : (\n              \"\"\n            )}\n          </Styles.WalleyHomeBody>\n        </>\n      ) : (\n        <>\n          <Styles.WalleyNavbar>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ view: \"home\" })}\n              className={state.view === \"home\" ? \"grey\" : \"\"}\n            >\n              <span>Home</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLine></Styles.NavLine>\n            <Styles.WalleyNavbarButton\n              onClick={() => State.update({ view: \"txPast\" })}\n              className={state.view === \"txPast\" ? \"grey\" : \"\"}\n            >\n              <span>Receipts</span>\n            </Styles.WalleyNavbarButton>\n            <Styles.NavLineLast></Styles.NavLineLast>\n          </Styles.WalleyNavbar>\n          <Styles.WalleyStoreBody>\n            <Styles.WalleySearch>\n              <Styles.WalleyInput\n                value={state.search.user}\n                onChange={(e) =>\n                  State.update({\n                    search: { ...state.search, user: e.target.value },\n                  })\n                }\n                placeholder=\"Search Transactions by User Name\"\n              />\n            </Styles.WalleySearch>\n            {state.view === \"home\" ? (\n              <p className=\"txn\">Pending Transactions(NFTs)</p>\n            ) : (\n              <p className=\"txn\">Past Transactions</p>\n            )}\n            <Styles.WalleyTransactions>\n              {state.view === \"home\" ? (\n                state.store.storePendingTransactions.length !== 0 ? (\n                  state.store.storePendingTransactions\n                    .filter((tx) =>\n                      tx[2]\n                        .toLowerCase()\n                        .includes(state.search.user.toLowerCase())\n                    )\n                    .map((tx) => (\n                      <Styles.TransactionCard>\n                        <Styles.WalleyImageContainer>\n                          <Styles.WalleyStoreImage\n                            src={`https://ipfs.near.social/ipfs/${\n                              state.store.storeImages[tx[6]]\n                            }`}\n                            alt={tx[6]}\n                          />\n                        </Styles.WalleyImageContainer>\n                        <Styles.TransactionCardMain>\n                          {getTable(tx, false)}\n                          <Styles.WalleyButton\n                            className=\"orange\"\n                            onClick={() =>\n                              State.update({\n                                store: {\n                                  ...state.store,\n                                  approvePassword: \"\",\n                                  bill: { uploading: false, amount: null },\n                                  totalAmount: null,\n                                },\n                                user: {\n                                  ...state.user,\n                                  viewTxn: [...tx, \"approve\"],\n                                },\n                              })\n                            }\n                          >\n                            Approve\n                          </Styles.WalleyButton>\n                        </Styles.TransactionCardMain>\n                      </Styles.TransactionCard>\n                    ))\n                ) : (\n                  <p>No pending transactions</p>\n                )\n              ) : state.store.storePastTransactions.length !== 0 ? (\n                state.store.storePastTransactions\n                  .filter((tx) =>\n                    tx[2]\n                      .toLowerCase()\n                      .includes(state.search.user.toLowerCase())\n                  )\n                  .map((tx) => (\n                    <Styles.TransactionCard>\n                      <Styles.WalleyImageContainer>\n                        <Styles.WalleyStoreImage\n                          src={`https://ipfs.near.social/ipfs/${\n                            state.store.storeImages[tx[6]]\n                          }`}\n                          alt={tx[6]}\n                        />\n                      </Styles.WalleyImageContainer>\n                      <Styles.TransactionCardMain>\n                        {getTable(tx, true)}\n                        {state.user.openReceipt === Big(tx[1]).toFixed(0) ? (\n                          <Styles.TransactionModal className=\"receipt\">\n                            <Styles.WalleyStoreImage\n                              src={`https://ipfs.near.social/ipfs/${tx[7]}`}\n                              alt={tx[7]}\n                            />\n                            <Styles.WalleyButton\n                              className=\"orange\"\n                              onClick={() =>\n                                State.update({\n                                  user: {\n                                    ...state.user,\n                                    openReceipt: 0,\n                                  },\n                                })\n                              }\n                            >\n                              Close Receipt\n                            </Styles.WalleyButton>\n                          </Styles.TransactionModal>\n                        ) : (\n                          <Styles.WalleyButton\n                            className=\"orange\"\n                            onClick={() =>\n                              State.update({\n                                user: {\n                                  ...state.user,\n                                  openReceipt: Big(tx[1]).toFixed(0),\n                                },\n                              })\n                            }\n                          >\n                            Show Receipt\n                          </Styles.WalleyButton>\n                        )}\n                      </Styles.TransactionCardMain>\n                    </Styles.TransactionCard>\n                  ))\n              ) : (\n                <p>No past transactions found</p>\n              )}\n            </Styles.WalleyTransactions>\n          </Styles.WalleyStoreBody>\n        </>\n      )}\n    </Styles.WalleyHomeMain>\n  </Styles.WalleyHomeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/walley", "fact_widget_deployments_id": "2f2f18b77535e9ab2a6a86abc442074d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 617}