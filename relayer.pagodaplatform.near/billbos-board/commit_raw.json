{"tx_hash": "i16Law4t85UMVim9GGhqWnpC3UfnWWxz2XvsGUGG5qa", "action_id_social": "G5Hfr4uKfe4QdBNRVM9Lf3Fc3FkBDRyq5E9T4hyqP93A-0-widget", "block_id": 108258154, "block_timestamp": "2023-12-18T14:52:50.935Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "billbos-board", "source_code": "const fontFamily = props.fontFamily ?? \"Arial, sans-serif\";\nconst fontSize = props.fontSize ?? \"10px\";\nconst textColor = props.textColor ?? \"white\";\nconst backgroundColor = props.backgroundColor ?? \"black\";\nconst height = props.height ?? \"20px\";\nconst width = props.width ?? \"100%\";\n\nState.init({\n  raw: [],\n  show: [],\n  count: 0,\n});\n\nconst BillBOSAddress = [\n  {\n    chain: \"25925\",\n    address: \"0x8995e9741A2b9c7f1Bb982d08c360F2951a23c24\",\n    rpc: \"https://rpc-testnet.bitkubchain.io\",\n  },\n  {\n    chain: \"35011\",\n    address: \"0x9d8b5e3C762167a409Db7f11a38b17dE9192E136\",\n    rpc: \"https://rpc.j2o.io/\",\n  },\n];\n\nconst BillBOSCoreABI = fetch(\n  \"https://gist.githubusercontent.com/jimmy-ez/0344bb9cce14ced6c6e7f89d7d1654ce/raw/e7dd9962a90819f71de155b1f68f276eed07790a/BillBOSCoreABIV3.json\"\n);\nif (!BillBOSCoreABI.ok) {\n  return \"Loading\";\n}\nconst IBillBOSCore = new ethers.utils.Interface(BillBOSCoreABI.body);\n\n// Come from APIs\nconst arrayPrice = [\n  { topic: \"KUSDT/USD\", value: 1.01 },\n  { topic: \"KKUB/USD\", value: 12.01 },\n  { topic: \"JFIN/USD\", value: 8.35 },\n];\n\nconst myList = arrayPrice.map((item) => {\n  return (\n    <>\n      <p class=\"title\">{item.topic}</p>\n      <p class=\"value\">{item.value}</p>\n    </>\n  );\n});\n\nconst Marquee = `\n    <style>\n      body {\n        margin: 0\n      }\n\n      .marquee {\n        white-space: nowrap;\n        overflow: hidden;\n        position: relative;\n        font-family: ${fontFamily};\n        font-size: ${fontSize};\n        color: white;\n        height: ${height};\n        width: ${width};\n        display: flex;\n        align-items: center;\n        justify-content: start;\n      }\n\n      .marquee span {\n        display: inline-block;\n        padding-left: 100%;\n        white-space: nowrap;\n        will-change: transform;\n        animation: marquee 3s linear infinite;\n      }\n\n      .marquee div {\n        padding-left: 100%;\n        display: flex;\n      }\n\n      .title {\n        margin-left: 25px;\n        color: yellow;\n      }\n\n      .value {\n        margin-left: 5px;\n        color: white;\n      }\n\n      @keyframes marquee {\n        from { transform: translateX(0); }\n        to { transform: translateX(-50%); }\n      }\n    </style>\n\n    <div class=\"marquee\">\n        <span class=\"text-white\">\n            <div>\n                ${myListString}\n            </div>\n        </span>\n    </div>\n  `;\n\nconst MarqueeStyled = styled.div`\n  .marquee {\n    position: relative;\n    width: 100vw;\n    max-width: 100%;\n    height: 20px;\n    overflow-x: hidden;\n    background-color: black;\n  }\n\n  .track {\n    position: absolute;\n    white-space: nowrap;\n    will-change: transform;\n    animation: marquee 10s linear infinite;\n  }\n\n  .content {\n    font-size: 13px;\n    width: 100%;\n  }\n\n  .title {\n    margin-left: 25px;\n    color: yellow;\n  }\n\n  .value {\n    margin-left: 5px;\n    color: white;\n  }\n\n  @keyframes marquee {\n    from { transform: translateX(100%); }\n    to { transform: translateX(-50%); }\n  }\n`;\n\nconst [count, setCount] = useState(0);\n\nfunction weightedRandomItems(arr) {\n  const result = [];\n  for (let i = 0; i < 5; i++) {\n    const totalWeight = arr.reduce((sum, item) => sum + Number(item[2]), 0);\n    const randomNum = Math.random() * totalWeight;\n    let cumulativeWeight = 0;\n    for (const item of arr) {\n      cumulativeWeight += Number(item[2]);\n      if (randomNum <= cumulativeWeight) {\n        result.push(item);\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconst _fetch = () => {\n  BillBOSAddress.map((billBOS) => {\n    new ethers.Contract(\n      billBOS.address,\n      IBillBOSCore,\n      new ethers.providers.JsonRpcProvider(billBOS.rpc)\n    )\n      .getAds()\n      .then((res) => {\n        State.update({\n          raw: state.raw.concat(\n            res.map((item) => ({ ...item, chain: billBOS.chain }))\n          ),\n          count: state.count + 1,\n        });\n      });\n  });\n};\n\nconst fetchApi = (queryURI, method, data) => {\n  const options = {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  if (data) options[body] = JSON.stringify(data);\n  return asyncFetch(queryURI, options);\n};\n\nconst submit = (show) => {\n  new ethers.Contract(\n    BillBOSAddress[0].address,\n    IBillBOSCore,\n    new ethers.providers.JsonRpcProvider(BillBOSAddress[0].rpc)\n  )\n    .monthCount()\n    .then((month) => {\n      const data = {\n        webpageOwnerWalletAddress: props.webpageOwnerAddress,\n        month: Number(month.toString()),\n        ads: show.map((item) => ({\n          ad_id: item[0].toString(),\n          chainId: item.chain,\n        })),\n      };\n      console.log(\"data\", data);\n      fetchApi(\"https://api-billbos.0xnutx.space/ads\", \"POST\", data);\n    });\n};\n\nuseEffect(() => {\n  const intervalId = setInterval(() => {\n    setCount((prev) => (prev + 1) % 5);\n  }, 5000);\n  return () => clearInterval(intervalId);\n}, []);\nuseEffect(() => {\n  _fetch();\n}, []);\nuseEffect(() => {\n  if (count === BillBOSAddress.length && state.show.length <= 0) {\n    let show = weightedRandomItems(state.raw);\n    State.update({\n      show: show,\n    });\n    console.log(\"raw\", state.raw);\n    console.log(\"show\", show);\n    submit(show);\n  }\n}, [count]);\n\nconst content = (index) => {\n  return (\n    <div\n      style={{\n        width: \"728px\",\n      }}\n    >\n      {state.show.length > 0 ? (\n        <img\n          src={`https://ipfs.near.social/ipfs/${state.show[index][1][1]}`}\n          style={{ width: 728, height: 90 }}\n        />\n      ) : (\n        <div style={{ width: 728, height: 90 }}>Loading...</div>\n      )}\n\n      <MarqueeStyled>\n        <div class=\"marquee\">\n          <div class=\"track w-full\">\n            <div class=\"content flex flex-row\">{myList}</div>\n          </div>\n        </div>\n      </MarqueeStyled>\n      <p class=\"absolute buttom-10 right-0 text-red-400\">X</p>\n    </div>\n  );\n};\nreturn (\n  <Widget\n    src=\"porx-dev.near/widget/billbos-css\"\n    props={{\n      children: content(count),\n    }}\n  />\n);\n", "metadata": {"fork_of": "jimmy-ez.near/widget/billbos-ads@108225964"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/billbos-board", "fact_widget_deployments_id": "75f30e359e2966107946d02ba84d3154", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}