{"tx_hash": "2Mxyrh1B4GwSSpUoTKEwZNPgMv2tHXf1V2t6jMbuf873", "action_id_social": "Gp1vxZUKKafgMQkfu9cWGQsKcZT1fy1xrKBoq7kBg8Rf-0-widget", "block_id": 99732538, "block_timestamp": "2023-08-26T22:08:45.664Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Lido", "source_code": "if (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 1) {\n  return <p>Switch to Ethereum Mainnet</p>;\n}\n\n// FETCH LIDO ABI\n\nconst lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst tokenDecimals = 18;\n\nconst lidoAbi = [\n  {\n    constant: false,\n    inputs: [{ name: \"_validators\", type: \"uint256\" }],\n    name: \"setValidatorsNumber\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"beaconValidators\", type: \"uint256\" }],\n    name: \"BeaconValidatorsUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"amount\", type: \"uint256\" }],\n    name: \"MevTxFeeReceived\",\n    type: \"event\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"resume\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    payable: false,\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"stop\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"hasInitialized\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_amount\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"STAKING_CONTROL_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_depositContract\", type: \"address\" },\n      { name: \"_oracle\", type: \"address\" },\n      { name: \"_operators\", type: \"address\" },\n      { name: \"_treasury\", type: \"address\" },\n      { name: \"_insuranceFund\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getInsuranceFund\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"_ethAmount\", type: \"uint256\" }],\n    name: \"getSharesByPooledEth\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"isStakingPaused\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_sender\", type: \"address\" },\n      { name: \"_recipient\", type: \"address\" },\n      { name: \"_amount\", type: \"uint256\" },\n    ],\n    name: \"transferFrom\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getOperators\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"_script\", type: \"bytes\" }],\n    name: \"getEVMScriptExecutor\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_maxStakeLimit\", type: \"uint256\" },\n      { name: \"_stakeLimitIncreasePerBlock\", type: \"uint256\" },\n    ],\n    name: \"setStakingLimit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"RESUME_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", type: \"uint8\" }],\n    payable: false,\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getRecoveryVault\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DEPOSIT_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DEPOSIT_SIZE\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getTotalPooledEther\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PAUSE_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_addedValue\", type: \"uint256\" },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getTreasury\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"isStopped\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"MANAGE_WITHDRAWAL_KEY\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getBufferedEther\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"receiveELRewards\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getELRewardsWithdrawalLimit\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"SIGNATURE_LENGTH\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getWithdrawalCredentials\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getCurrentStakeLimit\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_limitPoints\", type: \"uint16\" }],\n    name: \"setELRewardsWithdrawalLimit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_beaconValidators\", type: \"uint256\" },\n      { name: \"_beaconBalance\", type: \"uint256\" },\n    ],\n    name: \"handleOracleReport\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getStakeLimitFullInfo\",\n    outputs: [\n      { name: \"isStakingPaused\", type: \"bool\" },\n      { name: \"isStakingLimitSet\", type: \"bool\" },\n      { name: \"currentStakeLimit\", type: \"uint256\" },\n      { name: \"maxStakeLimit\", type: \"uint256\" },\n      { name: \"maxStakeLimitGrowthBlocks\", type: \"uint256\" },\n      { name: \"prevStakeLimit\", type: \"uint256\" },\n      { name: \"prevStakeBlockNumber\", type: \"uint256\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getELRewardsVault\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"_account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"resumeStaking\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getFeeDistribution\",\n    outputs: [\n      { name: \"treasuryFeeBasisPoints\", type: \"uint16\" },\n      { name: \"insuranceFeeBasisPoints\", type: \"uint16\" },\n      { name: \"operatorsFeeBasisPoints\", type: \"uint16\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"_sharesAmount\", type: \"uint256\" }],\n    name: \"getPooledEthByShares\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_executionLayerRewardsVault\", type: \"address\" }],\n    name: \"setELRewardsVault\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"token\", type: \"address\" }],\n    name: \"allowRecoverability\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"MANAGE_PROTOCOL_CONTRACTS_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"appId\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getOracle\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getInitializationBlock\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_treasuryFeeBasisPoints\", type: \"uint16\" },\n      { name: \"_insuranceFeeBasisPoints\", type: \"uint16\" },\n      { name: \"_operatorsFeeBasisPoints\", type: \"uint16\" },\n    ],\n    name: \"setFeeDistribution\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_feeBasisPoints\", type: \"uint16\" }],\n    name: \"setFee\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_recipient\", type: \"address\" },\n      { name: \"_sharesAmount\", type: \"uint256\" },\n    ],\n    name: \"transferShares\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_maxDeposits\", type: \"uint256\" }],\n    name: \"depositBufferedEther\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    payable: false,\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"MANAGE_FEE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_token\", type: \"address\" }],\n    name: \"transferToVault\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"_sender\", type: \"address\" },\n      { name: \"_role\", type: \"bytes32\" },\n      { name: \"_params\", type: \"uint256[]\" },\n    ],\n    name: \"canPerform\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_referral\", type: \"address\" }],\n    name: \"submit\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"WITHDRAWAL_CREDENTIALS_LENGTH\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_subtractedValue\", type: \"uint256\" },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getEVMScriptRegistry\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PUBKEY_LENGTH\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"SET_EL_REWARDS_VAULT_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_recipient\", type: \"address\" },\n      { name: \"_amount\", type: \"uint256\" },\n    ],\n    name: \"transfer\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getDepositContract\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getBeaconStat\",\n    outputs: [\n      { name: \"depositedValidators\", type: \"uint256\" },\n      { name: \"beaconValidators\", type: \"uint256\" },\n      { name: \"beaconBalance\", type: \"uint256\" },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"removeStakingLimit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"BURN_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getFee\",\n    outputs: [{ name: \"feeBasisPoints\", type: \"uint16\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"kernel\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getTotalShares\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"_owner\", type: \"address\" },\n      { name: \"_spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"isPetrified\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_oracle\", type: \"address\" },\n      { name: \"_treasury\", type: \"address\" },\n      { name: \"_insuranceFund\", type: \"address\" },\n    ],\n    name: \"setProtocolContracts\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"_withdrawalCredentials\", type: \"bytes32\" }],\n    name: \"setWithdrawalCredentials\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"STAKING_PAUSE_ROLE\",\n    outputs: [{ name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"depositBufferedEther\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_account\", type: \"address\" },\n      { name: \"_sharesAmount\", type: \"uint256\" },\n    ],\n    name: \"burnShares\",\n    outputs: [{ name: \"newTotalShares\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [{ name: \"_account\", type: \"address\" }],\n    name: \"sharesOf\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"pauseStaking\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getTotalELRewardsCollected\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  { payable: true, stateMutability: \"payable\", type: \"fallback\" },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"executor\", type: \"address\" },\n      { indexed: false, name: \"script\", type: \"bytes\" },\n      { indexed: false, name: \"input\", type: \"bytes\" },\n      { indexed: false, name: \"returnData\", type: \"bytes\" },\n    ],\n    name: \"ScriptResult\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"vault\", type: \"address\" },\n      { indexed: true, name: \"token\", type: \"address\" },\n      { indexed: false, name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"RecoverToVault\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"sharesValue\", type: \"uint256\" },\n    ],\n    name: \"TransferShares\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"account\", type: \"address\" },\n      { indexed: false, name: \"preRebaseTokenAmount\", type: \"uint256\" },\n      { indexed: false, name: \"postRebaseTokenAmount\", type: \"uint256\" },\n      { indexed: false, name: \"sharesAmount\", type: \"uint256\" },\n    ],\n    name: \"SharesBurnt\",\n    type: \"event\",\n  },\n  { anonymous: false, inputs: [], name: \"Stopped\", type: \"event\" },\n  { anonymous: false, inputs: [], name: \"Resumed\", type: \"event\" },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"owner\", type: \"address\" },\n      { indexed: true, name: \"spender\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"StakingPaused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"StakingResumed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"maxStakeLimit\", type: \"uint256\" },\n      {\n        indexed: false,\n        name: \"stakeLimitIncreasePerBlock\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"StakingLimitSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"StakingLimitRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"oracle\", type: \"address\" },\n      { indexed: false, name: \"treasury\", type: \"address\" },\n      { indexed: false, name: \"insuranceFund\", type: \"address\" },\n    ],\n    name: \"ProtocolContactsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"feeBasisPoints\", type: \"uint16\" }],\n    name: \"FeeSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"treasuryFeeBasisPoints\", type: \"uint16\" },\n      { indexed: false, name: \"insuranceFeeBasisPoints\", type: \"uint16\" },\n      { indexed: false, name: \"operatorsFeeBasisPoints\", type: \"uint16\" },\n    ],\n    name: \"FeeDistributionSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"amount\", type: \"uint256\" }],\n    name: \"ELRewardsReceived\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"limitPoints\", type: \"uint256\" }],\n    name: \"ELRewardsWithdrawalLimitSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"withdrawalCredentials\", type: \"bytes32\" },\n    ],\n    name: \"WithdrawalCredentialsSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        name: \"executionLayerRewardsVault\",\n        type: \"address\",\n      },\n    ],\n    name: \"ELRewardsVaultSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"sender\", type: \"address\" },\n      { indexed: false, name: \"amount\", type: \"uint256\" },\n      { indexed: false, name: \"referral\", type: \"address\" },\n    ],\n    name: \"Submitted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"amount\", type: \"uint256\" }],\n    name: \"Unbuffered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"sender\", type: \"address\" },\n      { indexed: false, name: \"tokenAmount\", type: \"uint256\" },\n      { indexed: false, name: \"sentFromBuffer\", type: \"uint256\" },\n      { indexed: true, name: \"pubkeyHash\", type: \"bytes32\" },\n      { indexed: false, name: \"etherAmount\", type: \"uint256\" },\n    ],\n    name: \"Withdrawal\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"reportTimestamp\", type: \"uint256\" },\n      { indexed: false, name: \"preCLBalance\", type: \"uint256\" },\n      { indexed: false, name: \"postCLBalance\", type: \"uint256\" },\n      { indexed: false, name: \"withdrawalsWithdrawn\", type: \"uint256\" },\n      {\n        indexed: false,\n        name: \"executionLayerRewardsWithdrawn\",\n        type: \"uint256\",\n      },\n      { indexed: false, name: \"postBufferedEther\", type: \"uint256\" },\n    ],\n    name: \"ETHDistributed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"reportTimestamp\", type: \"uint256\" },\n      { indexed: false, name: \"timeElapsed\", type: \"uint256\" },\n      { indexed: false, name: \"preTotalShares\", type: \"uint256\" },\n      { indexed: false, name: \"preTotalEther\", type: \"uint256\" },\n      { indexed: false, name: \"postTotalShares\", type: \"uint256\" },\n      { indexed: false, name: \"postTotalEther\", type: \"uint256\" },\n      { indexed: false, name: \"sharesMintedAsFees\", type: \"uint256\" },\n    ],\n    name: \"TokenRebased\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"amount\", type: \"uint256\" }],\n    name: \"WithdrawalsReceived\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"reportTimestamp\", type: \"uint256\" },\n      { indexed: false, name: \"preCLValidators\", type: \"uint256\" },\n      { indexed: false, name: \"postCLValidators\", type: \"uint256\" },\n    ],\n    name: \"CLValidatorsUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"lidoLocator\", type: \"address\" }],\n    name: \"LidoLocatorSet\",\n    type: \"event\",\n  },\n];\n// if (!lidoAbi.ok) {\n//   return \"Loading\";\n// }\n\nconst iface = new ethers.utils.Interface(lidoAbi);\n\n// FETCH LIDO STAKING APR\n\nif (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// DETECT SENDER\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE\n\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n\n// FETCH TX COST\n\nif (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);\n\n  let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);\n\n  State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Stake Ether</div>\n      <div class=\"SubHeader\">Stake ETH and receive stETH while staking.</div>\n\n      <div class=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div class=\"LidoFormTopContainer\">\n              <div class=\"LidoFormTopContainerLeft\">\n                <div class=\"LidoFormTopContainerLeftContent1\">\n                  <div class=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to stake</span>\n                    <div class=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>\n                </div>\n                <div class=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div class=\"LidoFormTopContainerRight\">\n                <div class=\"LidoFormTopContainerRightContent1\">\n                  <div class=\"LidoFormTopContainerRightContent1Text\">\n                    <span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          class={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div class=\"LidoFormTopContainerLeft\">\n            <div class=\"LidoFormTopContainerLeftContent1\">\n              <div class=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div class=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;stETH\n              </span>\n            </div>\n          </div>\n          <div class=\"LidoFormTopContainerRight\">\n            <div class=\"LidoAprContainer\">\n              <div class=\"LidoAprTitle\">Lido APR</div>\n              <div class=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"LidoStakeForm\">\n        <div class=\"LidoStakeFormInputContainer\">\n          <span class=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"\n              ></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span class=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              class=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}\n              placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            class=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (state.balance > 0.05\n                  ? parseFloat(state.balance) - 0.05\n                  : 0\n                ).toFixed(2),\n              });\n            }}\n          >\n            <button\n              class=\"LidoStakeFormInputContainerSpan3Content\"\n              disabled={!state.sender}\n            >\n              <span class=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitEthers(state.strEther, state.sender)}\n          >\n            <span>Submit</span>\n          </button>\n        ) : (\n          <Web3Connect\n            className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}\n\n        <div class=\"LidoFooterContainer\">\n          {state.sender && (\n            <div class=\"LidoFooterRaw\">\n              <div class=\"LidoFooterRawLeft\">You will receive</div>\n              <div class=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\n            </div>\n          )}\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Exchange rate</div>\n            <div class=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>\n          </div>\n          {false && (\n            <div class=\"LidoFooterRaw\">\n              <div class=\"LidoFooterRawLeft\">Transaction cost</div>\n              <div class=\"LidoFooterRawRight\">{state.txCost}</div>\n            </div>\n          )}\n          <div class=\"LidoFooterRaw\">\n            <div class=\"LidoFooterRawLeft\">Reward fee</div>\n            <div class=\"LidoFooterRawRight\">10%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Lido", "fact_widget_deployments_id": "81bef87f13412a7dd18a37f3ba24ae93", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}