{"tx_hash": "AL8zetNRFzq9ExcdSeJzg3RgqniqHFU3dPUQNVeD1cbH", "action_id_social": "JCi4DweUCUpAqGr4dus8Fav8gFjCmoEJ5QsEPNvnB5af-0-widget", "block_id": 99871827, "block_timestamp": "2023-08-28T18:57:07.795Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "Lido", "source_code": "// main aUSD BOS app component\n\n// \ud83d\udfe2\nconst ROUND_DOWN = 0;\nconst CONTRACT_ABI = {\n  aUSD_ABI:\n    \"https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/main/abi/ausd.json\",\n  erc20_stETH_ABI:\n    \"https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/main/abi/erc20stETH.json\",\n  aUSD_Oracle_ABI:\n    \"https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/main/abi/oracle.json\",\n};\nconst CONTRACT_ADDRESS = fetch(\n  \"https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/main/contract_addresses.json\"\n);\nconst DEFAULT_CHAIN_ID = 11155111;\nconst NATIVE_SYMBOL_ADDRESS_MAP_KEY = \"0x0\";\nconst ETH_TOKEN = { name: \"Ethereum\", symbol: \"ETH\", decimals: 18 };\nconst WETH_TOKEN = { name: \"Wrapped Ether\", symbol: \"WETH\", decimals: 18 };\n\n// App states\nState.init({\n  chainId: undefined, // chainId is undefined in the case of unsupported chains\n  isChainSupported: true,\n  showDropdown: false,\n  walletConnected: false,\n  stEthBalance: \"2\", //deposit\n  stEthPriceInUsd: \"1700\",\n  depositAmount: \"\",\n  depositAmountInUSD: \"0.00\",\n  depositButtonLoading: false,\n  depositedStEth: \"10\", // withdraw\n  withdrawAmount: \"\",\n  withdrawAmountInUSD: \"0.00\",\n  withdrawButtonLoading: false,\n  mintableaUSD: \"2000\", //mint\n  aUSDPriceInUsd: \"1.00\",\n  mintAmount: \"\",\n  mintAmountInUSD: \"0.00\",\n  mintButtonLoading: false,\n  mintedaUSD: \"200\", // repay\n  repayAmount: \"\",\n  repayAmountInUSD: \"0.00\",\n  repayButtonLoading: false,\n  address: undefined,\n  selectTab: \"deposit\", // deposit | withdraw | mint | repay\n  totalDeposits: \"1700\",\n  stablecoinApy: \"8.33\",\n  healthFactor: \"1.5\",\n  alertModalText: false,\n});\n\n// App config \ud83d\udfe2\nfunction getConfig(network) {\n  const chainId = state.chainId;\n  switch (network) {\n    case \"testnet\":\n      return {\n        ownerId: \"aave-v3.near\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        ipfsPrefix: \"https://ipfs.near.social/ipfs\",\n        ...(chainId ? getNetworkConfig(chainId) : {}),\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\n\n// Get aUSD network config by chain id \ud83d\udfe2\nfunction getNetworkConfig(chainId) {\n  const abis = {\n    aUSD_ABI: fetch(CONTRACT_ABI.aUSD_ABI),\n    erc20_stETH_ABI: fetch(CONTRACT_ABI.erc20_stETH_ABI),\n    aUSD_Oracle_ABI: fetch(CONTRACT_ABI.aUSD_Oracle_ABI),\n  };\n\n  switch (chainId) {\n    case 11155111: // Sepolia testnet\n      return {\n        chainName: \"Sepolia Testnet\",\n        nativeCurrency: ETH_TOKEN,\n        nativeWrapCurrency: WETH_TOKEN,\n        rpcUrl: \"https://rpc2.sepolia.org\",\n        aUSDAddress: CONTRACT_ADDRESS.aUSDAddress,\n        erc20_stETHAddress: CONTRACT_ADDRESS.erc20_stETHAddress,\n        aUSD_OracleAddress: CONTRACT_ADDRESS.aUSD_OracleAddress,\n        ...abis,\n      };\n    default:\n      throw new Error(\"unknown chain id\");\n  }\n}\n\n// Working \ud83d\udfe2\nfunction switchEthereumChain(chainId) {\n  const chainIdHex = `0x${chainId.toString(16)}`;\n  const res = Ethers.send(\"wallet_switchEthereumChain\", [\n    { chainId: chainIdHex },\n  ]);\n  // If `res` === `undefined`, it means switch chain failed, which is very weird but it works.\n  // If `res` is `null` the function is either not called or executed successfully.\n  if (res === undefined) {\n    console.log(\n      `Failed to switch chain to ${chainId}. Add the chain to wallet`\n    );\n    const config = getNetworkConfig(chainId);\n    Ethers.send(\"wallet_addEthereumChain\", [\n      {\n        chainId: chainIdHex,\n        chainName: config.chainName,\n        nativeCurrency: config.nativeCurrency,\n        rpcUrls: [config.rpcUrl],\n      },\n    ]);\n  }\n}\n\n// Contract functions \ud83d\udfe2\nfunction depositStETH(amount) {\n  State.update({\n    depositButtonLoading: true,\n  });\n\n  return (\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((address) => {\n        // const aUSDContract = new ethers.Contract(\n        //   \"contract_address\",\n        //   \"abi_contract\",\n        //   Ethers.provider().getSigner()\n        // );\n        // return aUSDContract.depositStETH(\"param1\", \"param2\", \"param3\", {\n        //   value: amount,\n        // });\n\n        // testing\n        setTimeout(() => {\n          onActionSuccess({\n            msg: `You supplied ${Big(amount).toFixed(8)} ${\"stETH\"}`,\n          });\n          State.update({ depositButtonLoading: false });\n        }, 2000);\n      })\n      // .then((tx) => {\n      //   tx.wait()\n      //     .then((res) => {\n      //       const { status } = res;\n      //       if (status === 1) {\n      //         onActionSuccess({\n      //           msg: `You supplied ${Big(amount).toFixed(8)} ${\"stETH\"}`,\n      //         });\n      //         console.log(\"tx succeeded\", res);\n      //       } else {\n      //         console.log(\"tx failed\", res);\n      //         State.update({\n      //           depositButtonLoading: false,\n      //         });\n      //       }\n      //     })\n      //     .catch(() => State.update({ depositButtonLoading: false }));\n      // })\n      .catch(() => State.update({ depositButtonLoading: false }))\n  );\n}\n\nfunction withdrawStETH(amount) {\n  State.update({\n    withdrawButtonLoading: true,\n  });\n\n  return (\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((address) => {\n        // const aUSDContract = new ethers.Contract(\n        //   \"contract_address\",\n        //   \"abi_contract\",\n        //   Ethers.provider().getSigner()\n        // );\n        // return aUSDContract.depositStETH(\"param1\", \"param2\", \"param3\", {\n        //   value: amount,\n        // });\n\n        // testing\n        setTimeout(() => {\n          onActionSuccess({\n            msg: `You withdrew ${Big(amount).toFixed(8)} ${\"stETH\"}`,\n          });\n          State.update({ withdrawButtonLoading: false });\n        }, 2000);\n      })\n      // .then((tx) => {\n      //   tx.wait()\n      //     .then((res) => {\n      //       const { status } = res;\n      //       if (status === 1) {\n      //         onActionSuccess({\n      //           msg: `You supplied ${Big(amount).toFixed(8)} ${\"stETH\"}`,\n      //         });\n      //         console.log(\"tx succeeded\", res);\n      //       } else {\n      //         console.log(\"tx failed\", res);\n      //         State.update({\n      //           depositButtonLoading: false,\n      //         });\n      //       }\n      //     })\n      //     .catch(() => State.update({ depositButtonLoading: false }));\n      // })\n      .catch(() => State.update({ withdrawButtonLoading: false }))\n  );\n}\n\nfunction mint(amount) {\n  State.update({\n    mintButtonLoading: true,\n  });\n\n  return (\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((address) => {\n        // const aUSDContract = new ethers.Contract(\n        //   \"contract_address\",\n        //   \"abi_contract\",\n        //   Ethers.provider().getSigner()\n        // );\n        // return aUSDContract.depositStETH(\"param1\", \"param2\", \"param3\", {\n        //   value: amount,\n        // });\n\n        // testing\n        setTimeout(() => {\n          onActionSuccess({\n            msg: `You minted ${Big(amount).toFixed(8)} ${\"aUSD\"}`,\n          });\n          State.update({ mintButtonLoading: false });\n        }, 2000);\n      })\n      // .then((tx) => {\n      //   tx.wait()\n      //     .then((res) => {\n      //       const { status } = res;\n      //       if (status === 1) {\n      //         onActionSuccess({\n      //           msg: `You supplied ${Big(amount).toFixed(8)} ${\"stETH\"}`,\n      //         });\n      //         console.log(\"tx succeeded\", res);\n      //       } else {\n      //         console.log(\"tx failed\", res);\n      //         State.update({\n      //           depositButtonLoading: false,\n      //         });\n      //       }\n      //     })\n      //     .catch(() => State.update({ depositButtonLoading: false }));\n      // })\n      .catch(() => State.update({ mintButtonLoading: false }))\n  );\n}\n\nfunction repay(amount) {\n  State.update({\n    repayButtonLoading: true,\n  });\n\n  return (\n    Ethers.provider()\n      .getSigner()\n      .getAddress()\n      .then((address) => {\n        // const aUSDContract = new ethers.Contract(\n        //   \"contract_address\",\n        //   \"abi_contract\",\n        //   Ethers.provider().getSigner()\n        // );\n        // return aUSDContract.depositStETH(\"param1\", \"param2\", \"param3\", {\n        //   value: amount,\n        // });\n\n        // testing\n        setTimeout(() => {\n          onActionSuccess({\n            msg: `You repayed ${Big(amount).toFixed(8)} ${\"aUSD\"}`,\n          });\n          State.update({ repayButtonLoading: false });\n        }, 2000);\n      })\n      // .then((tx) => {\n      //   tx.wait()\n      //     .then((res) => {\n      //       const { status } = res;\n      //       if (status === 1) {\n      //         onActionSuccess({\n      //           msg: `You supplied ${Big(amount).toFixed(8)} ${\"stETH\"}`,\n      //         });\n      //         console.log(\"tx succeeded\", res);\n      //       } else {\n      //         console.log(\"tx failed\", res);\n      //         State.update({\n      //           depositButtonLoading: false,\n      //         });\n      //       }\n      //     })\n      //     .catch(() => State.update({ depositButtonLoading: false }));\n      // })\n      .catch(() => State.update({ mintButtonLoading: false }))\n  );\n}\n\n// helpers\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((data) => {\n      const chainId = data?.chainId;\n      const config = getNetworkConfig(chainId);\n      if (!config) {\n        console.log(`Unsupport chain, chainId: ${chainId}`);\n        State.update({ isChainSupported: false });\n        switchEthereumChain(DEFAULT_CHAIN_ID);\n      } else {\n        State.update({ chainId, isChainSupported: true });\n      }\n    });\n}\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst config = getConfig(\"testnet\");\n\n// \ud83d\udfe1\nconst loading = !state.address;\n\nfunction checkProviderAndUpdateStates() {\n  const provider = Ethers.provider();\n  if (provider) {\n    State.update({ walletConnected: true });\n    console.log(\"wallet connected\", state.walletConnected);\n    updateDataAndAddress();\n    console.log(\"wallet connected\", state.address);\n  } else {\n    State.update({ walletConnected: false });\n    console.log(\"wallet connected\", state.walletConnected);\n  }\n}\n\nfunction bigMin(_a, _b) {\n  const a = Big(_a);\n  const b = Big(_b);\n  return a.gt(b) ? b : a;\n}\n\nfunction formatHealthFactor(healthFactor) {\n  if (healthFactor === \"\u221e\") return healthFactor;\n  if (!healthFactor || !isValid(healthFactor)) return \"-\";\n  if (Number(healthFactor) === -1) return \"\u221e\";\n  return Big(healthFactor).toFixed(2, ROUND_DOWN);\n}\n\n// update data in async manner\nfunction updateDataAndAddress() {\n  // check abi loaded\n  if (\n    Object.keys(CONTRACT_ABI)\n      .map((key) => config[key])\n      .filter((ele) => !!ele).length !== Object.keys(CONTRACT_ABI).length\n  ) {\n    return;\n  }\n\n  const provider = Ethers.provider();\n  if (!provider) {\n    return;\n  }\n\n  if (!state.address) {\n    console.log(\"Wallet address not found\");\n    provider\n      .getSigner()\n      ?.getAddress()\n      ?.then((address) => {\n        State.update({ address: address });\n      });\n  }\n}\n\nfunction onActionSuccess({ msg, callback }) {\n  // update UI after data has almost loaded\n\n  State.update({ alertModalText: msg });\n}\n\nconst getChainImage = (chainId) => {};\n\nconst toggleDropdown = disabled\n  ? () => {}\n  : () => State.update({ showDropdown: !state.showDropdown });\n\nconst ChainImage = () => {\n  switch (state.chainId) {\n    case 11155111:\n      return SepoliEthImage;\n    default:\n      throw new Error(\"unknown chain id\");\n  }\n};\n\ncheckProviderAndUpdateStates();\n// if (state.walletConnected && state.chainId) {\n//   updateData();\n// }\n\nconst AUSDLogo = () => (\n  <img\n    height={25}\n    className=\"logo\"\n    src={`https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/1657682b919b92878e17f35a62a787590da08258/src/Images/aUSD-LOGO.svg`}\n  />\n);\n\nconst DropdownImage = () => (\n  <img\n    className=\"dropdown-img\"\n    src={`${config.ipfsPrefix}/bafkreiexo22bzy2dnto7xlzee5dgz3mkb5smmpvzdgx7ed3clbw3ad3jsa`}\n  />\n);\n\nconst SepoliEthImage = () => (\n  <img\n    className=\"network-img\"\n    src={`${config.ipfsPrefix}/bafkreih7c6cip4ckunan7c3n5ckyf56mfnqmu7u5zgvxvhqvjsyf76kwxy`}\n  />\n);\n\n// Styled Components\nconst Body = styled.div`\n  padding: 24px 15px;\n  background: #0e0e26;\n  min-height: 100vh;\n  color: white;\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  padding: 18px 15px;\n  background: #151718;\n\n  display: flex;\n  justify-content: space-between;\n\n  .web3-connect {\n    font-size: 12px;\n    font-weight: bold;\n\n    display: grid;\n    place-content: center;\n\n    background: #262626;\n    border-radius: 5px;\n    border: 0;\n\n    color: white;\n    transition: all 300ms ease-in-out;\n    &:hover {\n      background: #262626;\n      opacity: 0.5;\n    }\n    &:active {\n      background: #262626 !important;\n    }\n  }\n  .logo {\n    color: white;\n    scale: 7;\n    margin-left: 42px;\n  }\n`;\n\nconst SwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: ${disabled ? \"auto\" : \"pointer\"};\n\n  position: relative;\n\n  .dropdown-pc {\n    display: none;\n    position: absolute;\n    right: 0;\n    top: 80px;\n    min-width: 260px;\n\n    background: #151718;\n    padding: 20px 16px;\n    border-radius: 10px;\n    font-size: 12px;\n    z-index: 1;\n    box-shadow: 0px 4px 10px 0px rgba(0, 0, 0, 0.3);\n  }\n\n  .network-img {\n    width: 16px;\n    height: 16px;\n    margin-left: 8px;\n    transition: all 0.3s ease-in-out;\n  }\n\n  .dropdown-img {\n    width: 16px;\n    height: 16px;\n    margin-left: 8px;\n    transition: all 0.3s ease-in-out;\n\n    transform: rotate(${() => (state.showDropdown ? \"0deg\" : \"180deg\")});\n  }\n\n  @media (min-width: 640px) {\n    justify-content: center;\n\n    img {\n      height: 60px;\n    }\n\n    .network-img {\n      width: 32px;\n      height: 32px;\n    }\n\n    .dropdown-img {\n      width: 32px;\n      height: 32px;\n    }\n\n    .dropdown-pc {\n      display: flex;\n      flex-direction: column;\n      gap: 20px;\n    }\n\n    .dropdown-pc-item {\n      display: flex;\n      align-items: center;\n\n      div {\n        margin-left: 10px;\n      }\n    }\n  }\n`;\n\nconst SwitchTitle = styled.div`\n  color: white;\n\n  font-size: 18px;\n  margin-left: 8px;\n\n  @media (min-width: 640px) {\n    font-size: 36px;\n    font-weight: bold;\n  }\n`;\n\nconst DropdownMobile = styled.div`\n  position: fixed;\n  z-index: 9999;\n\n  height: 80vh;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background: #151718;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  padding: 20px 12px;\n  font-size: 12px;\n\n  .dropdown-mobile-item {\n    .dropdown-img {\n      width: 32px;\n      height: 32px;\n    }\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n\n    div {\n      margin-left: 10px;\n    }\n  }\n\n  @media (min-width: 640px) {\n    display: none;\n  }\n`;\n\nconst DropdownContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst HeroDataContainer = styled.div`\n  margin-top: 40px;\n  width: 100%;\n  gap: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n\n  @media (min-width: 640px) {\n    width: auto;\n    display: grid;\n    grid-template-columns: 1fr 1fr ${showHealthFactor ? \"1fr\" : \"\"};\n    gap: 90px;\n    text-align: center;\n  }\n`;\n\nconst KVData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @media (min-width: 640px) {\n    width: auto;\n    display: block;\n  }\n\n  .key {\n    font-size: 14px;\n    font-weight: 500;\n    @media (min-width: 640px) {\n      font-size: 14px;\n    }\n  }\n  .value {\n    font-size: 14px;\n    font-weight: 700;\n    @media (min-width: 640px) {\n      font-size: 22px;\n    }\n  }\n  .text-green {\n    color: #2cffa7;\n  }\n`;\n\nconst heroData = [\n  {\n    name: \"Total Deposit\",\n    value: `$ ${state.totalDeposits} `,\n  },\n  {\n    name: \"Stablecoin APY\",\n    value: `${state.stablecoinApy} %`,\n  },\n\n  {\n    name: \"aUSD Minted\",\n    value: `$ ${200}`,\n  },\n].filter((element) => !!element);\n\nconst TabContainer = styled.div`\n  background: #212233;\n\n  display: flex;\n  padding: 4px;\n  border-radius: 10px;\n\n  margin-top: 30px;\n\n  @media (min-width: 640px) {\n    max-width: 355px;\n    margin: 0 auto;\n    margin-top: 50px;\n  }\n`;\n\nconst TabItem = styled.div`\n  flex: 1;\n  height: 48px;\n\n  display: grid;\n  place-content: center;\n  border-radius: 10px;\n\n  ${(props) => props.selected && \"background: #8247E5;\"}\n  ${(props) =>\n    props.disabled &&\n    `\n    opacity: 0.3;\n    cursor: not-allowed;\n  `}\n\n  font-size: 16px;\n  font-weight: bold;\n\n  transition: all 0.3s ease-in-out;\n  ${(props) =>\n    !props.selected &&\n    `\n    cursor: pointer;\n    &:hover {\n      background: #8247E5;\n      opacity: 0.7;\n    }\n  `}\n`;\n\nconst AlertModalContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst Title = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst Description = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  margin-top: 10px;\n  margin-bottom: 32px;\n`;\n\nconst Right = () => (\n  <img\n    style={{ marginBottom: \"12px\" }}\n    src={`${config.ipfsPrefix}/bafkreigjsujyien6eb5ml3hmfigwwcgkse3emc2e6fkdhwzjp7yw7zue3u`}\n    width={80}\n    height={80}\n  />\n);\n\n// deposit section\nconst depositMaxValue = Big(state.stEthBalance).toFixed(3);\n\nconst depositButtonDisabled =\n  !state.depositAmount ||\n  !isValid(state.depositAmount) ||\n  Number(state.depositAmount) === 0;\n\nconst changeDepositValue = (value) => {\n  if (Number(value) > Number(depositMaxValue)) {\n    value = depositMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value).mul(state.stEthPriceInUsd).toFixed(2);\n    State.update({\n      depositAmountInUSD: amountInUSD,\n      depositAmount: value,\n    });\n  } else {\n    State.update({\n      depositAmountInUSD: \"0.00\",\n    });\n  }\n  State.update({ depositAmount: value });\n};\n\nconst DepositPrimaryButton = styled.button`\n  border: 0;\n\n  color: white;\n  background: ${depositButtonDisabled ? \"#36295C\" : \"#8247e5\"};\n  border-radius: 5px;\n\n  height: 48px;\n  width: 100%;\n\n  font-size: 16px;\n  font-weight: bold;\n\n  transition: all 0.3s ease;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\n//withdraw section\nconst withdrawMaxValue = Big(state.depositedStEth).toFixed(3);\n\nconst withdrawButtonDisabled =\n  !state.withdrawAmount ||\n  !isValid(state.withdrawAmount) ||\n  Number(state.withdrawAmount) === 0;\n\nconst changeWithdrawValue = (value) => {\n  if (Number(value) > Number(withdrawMaxValue)) {\n    value = withdrawMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value).mul(state.stEthPriceInUsd).toFixed(2);\n    State.update({\n      withdrawAmountInUSD: amountInUSD,\n      withdrawAmount: value,\n    });\n  } else {\n    State.update({\n      withdrawAmountInUSD: \"0.00\",\n    });\n  }\n  State.update({ withdrawAmount: value });\n};\n\nconst WithdrawPrimaryButton = styled.button`\n  border: 0;\n\n  color: white;\n  background: ${\n    state.withdrawButtonLoading || withdrawButtonDisabled\n      ? \"#36295C\"\n      : \"#8247e5\"\n  };\n  border-radius: 5px;\n\n  height: 48px;\n  width: 100%;\n\n  font-size: 16px;\n  font-weight: bold;\n\n  transition: all 0.3s ease;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\n//mint section\nconst mintMaxValue = Big(state.mintableaUSD).toFixed(3);\n\nconst mintButtonDisabled =\n  !state.mintAmount ||\n  !isValid(state.mintAmount) ||\n  Number(state.mintAmount) === 0;\n\nconst changeMintValue = (value) => {\n  if (Number(value) > Number(mintMaxValue)) {\n    value = mintMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value).mul(state.aUSDPriceInUsd).toFixed(2);\n    State.update({\n      mintAmountInUSD: amountInUSD,\n      mintAmount: value,\n    });\n  } else {\n    State.update({\n      mintAmountInUSD: \"0.00\",\n    });\n  }\n  State.update({ mintAmount: value });\n};\n\nconst MintPrimaryButton = styled.button`\n  border: 0;\n\n  color: white;\n  background: ${\n    state.mintButtonLoading || mintButtonDisabled ? \"#36295C\" : \"#8247e5\"\n  };\n  border-radius: 5px;\n\n  height: 48px;\n  width: 100%;\n\n  font-size: 16px;\n  font-weight: bold;\n\n  transition: all 0.3s ease;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\n//repay section\nconst repayMaxValue = Big(state.mintedaUSD).toFixed(3);\n\nconst repayButtonDisabled =\n  !state.repayAmount ||\n  !isValid(state.repayAmount) ||\n  Number(state.repayAmount) === 0;\n\nconst changeRepayValue = (value) => {\n  if (Number(value) > Number(repayMaxValue)) {\n    value = repayMaxValue;\n  }\n  if (Number(value) < 0) {\n    value = \"0\";\n  }\n  if (isValid(value)) {\n    const amountInUSD = Big(value).mul(state.aUSDPriceInUsd).toFixed(2);\n    State.update({\n      repayAmountInUSD: amountInUSD,\n      repayAmount: value,\n    });\n  } else {\n    State.update({\n      repayAmountInUSD: \"0.00\",\n    });\n  }\n  State.update({ repayAmount: value });\n};\n\nconst RepayPrimaryButton = styled.button`\n  border: 0;\n\n  color: white;\n  background: ${\n    state.repayButtonLoading || repayButtonDisabled ? \"#36295C\" : \"#8247e5\"\n  };\n  border-radius: 5px;\n\n  height: 48px;\n  width: 100%;\n\n  font-size: 16px;\n  font-weight: bold;\n\n  transition: all 0.3s ease;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\nconst Loading = () => (\n  <img\n    width={40}\n    height={20}\n    src={`${config.ipfsPrefix}/bafkreib3s7t6npgjqrplyduxbcrnpx7rnncxzgmsgp5smo3byms272jkgm`}\n  />\n);\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst WithdrawContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst TokenTexture = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst TokenWrapper = styled.div`\n  display: flex;\n  img {\n    margin-right: 4px;\n  }\n`;\n\nconst GrayTexture = styled.div`\n  font-size: 12px;\n  font-weight: 500;\n  color: #7c7c86;\n`;\n\nconst PurpleTexture = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  color: #8a8db9;\n`;\n\nconst GreenTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: #2cffa7;\n`;\n\nconst RedTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: red;\n`;\n\nconst WhiteTexture = styled.div`\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n`;\nconst TransactionOverviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Input = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: white;\n  flex: 1;\n  width: 160px;\n\n  &[type=\"number\"]::-webkit-outer-spin-button,\n  &[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst Max = styled.span`\n  color: #8247e5;\n  cursor: pointer;\n`;\nconst FlexBetweenContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst GenericTitle = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n\n  margin-bottom: 10px;\n`;\n\nconst Content = styled.div`\n  padding: 18px 14px;\n  background: rgba(0, 0, 0, 0.26);\n  border: 1px solid #383947;\n  border-radius: 10px;\n`;\n\n// Component body\nconst body = loading ? (\n  <>\n    {/* Widget to replace \ud83d\udfe2 */}\n    <Header>\n      <AUSDLogo />\n      <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n    </Header>\n    <Body>\n      {state.walletConnected\n        ? state.isChainSupported\n          ? \"Loading...\"\n          : `Please switch network to ${\n              getNetworkConfig(DEFAULT_CHAIN_ID).chainName\n            }`\n        : \"Need to connect wallet first.\"}\n    </Body>\n  </>\n) : (\n  <>\n    {/* Widget to replace \ud83d\udfe2 */}\n    <Header>\n      <AUSDLogo />\n      <Web3Connect className=\"web3-connect\" connectLabel=\"Connect Wallet\" />\n    </Header>\n    <Body>\n      <FlexContainer>\n        {/* Widget to replace \ud83d\udfe2 */}\n        <SwitchContainer>\n          {state.showDropdown && (\n            <DropdownMobile>\n              <div>Select aUSD Market</div>\n              <div\n                className=\"dropdown-mobile-item\"\n                onClick={() => {\n                  State.update({ showDropdown: false });\n                  switchEthereumChain(11155111);\n                }}\n              >\n                <SepoliEthImage />\n                <div>Sepolia Testnet</div>\n              </div>\n            </DropdownMobile>\n          )}\n          <DropdownContainer onClick={toggleDropdown}>\n            <SepoliEthImage />\n            <SwitchTitle>{config.chainName}</SwitchTitle>\n            {!disabled && <DropdownImage />}\n          </DropdownContainer>\n          {state.showDropdown && (\n            <div className=\"dropdown-pc\">\n              <div>Select aUSD Market</div>\n              <div\n                className=\"dropdown-pc-item\"\n                onClick={() => {\n                  State.update({ showDropdown: false });\n                  switchEthereumChain(11155111);\n                }}\n              >\n                <SepoliEthImage />\n                <div>Sepolia Testnet</div>\n              </div>\n            </div>\n          )}\n        </SwitchContainer>\n\n        {/* Widget to replace \ud83d\udfe2 */}\n        <HeroDataContainer>\n          {heroData.map((row) => (\n            <KVData key={row.name}>\n              <div className=\"key\">{row.name}</div>\n              <div\n                className={[\n                  \"value\",\n                  row.name === \"aUSD Minted\" ? \"text-green\" : undefined,\n                ]\n                  .filter((value) => !!value)\n                  .join(\" \")}\n              >\n                {!state.address ? \"-\" : row.value}\n              </div>\n            </KVData>\n          ))}\n        </HeroDataContainer>\n      </FlexContainer>\n\n      {/* Widget to replace \ud83d\udfe2 */}\n      <TabContainer>\n        <TabItem\n          selected={state.selectTab === \"deposit\"}\n          onClick={() => State.update({ selectTab: \"deposit\" })}\n        >\n          Deposit\n        </TabItem>\n        <TabItem\n          selected={state.selectTab === \"withdraw\"}\n          onClick={() => State.update({ selectTab: \"withdraw\" })}\n        >\n          Withdraw\n        </TabItem>\n        <TabItem\n          selected={state.selectTab === \"mint\"}\n          onClick={() => State.update({ selectTab: \"mint\" })}\n        >\n          Mint\n        </TabItem>\n        <TabItem\n          selected={state.selectTab === \"repay\"}\n          onClick={() => State.update({ selectTab: \"repay\" })}\n        >\n          Repay\n        </TabItem>\n      </TabContainer>\n\n      {state.selectTab === \"deposit\" && (\n        <>\n          {/* Add prebuilt component to replace \ud83d\udfe1 */}\n          {state.address ? (\n            <>\n              <GenericTitle>Amount to Deposit</GenericTitle>\n              <Content>\n                {\" \"}\n                <>\n                  <FlexBetweenContainer>\n                    <TokenTexture>\n                      <Input\n                        type=\"number\"\n                        value={state.depositAmount}\n                        onChange={(e) => {\n                          changeDepositValue(e.target.value);\n                        }}\n                        placeholder=\"0\"\n                      />\n                    </TokenTexture>\n\n                    <TokenWrapper>\n                      <img\n                        width={26}\n                        height={26}\n                        src={`https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/3dde1f2a96c5b66a08009e58c3f18ee229a83300/src/Images/stETH.svg`}\n                      />\n                      <TokenTexture>{\"stETH\"}</TokenTexture>\n                    </TokenWrapper>\n                  </FlexBetweenContainer>\n                  <FlexBetweenContainer>\n                    <GrayTexture>${state.depositAmountInUSD}</GrayTexture>\n                    <GrayTexture>\n                      Wallet Balance:{\" \"}\n                      {isValid(state.stEthBalance) && state.stEthBalance !== \"-\"\n                        ? Big(state.stEthBalance).toFixed(7)\n                        : state.stEthBalance}\n                      <Max\n                        onClick={() => {\n                          changeDepositValue(depositMaxValue);\n                        }}\n                      >\n                        MAX\n                      </Max>\n                    </GrayTexture>\n                  </FlexBetweenContainer>\n                </>\n              </Content>\n              <br />\n              <DepositPrimaryButton\n                onClick={() => depositStETH(state.depositAmount)}\n                disabled={depositButtonDisabled}\n              >\n                {state.depositButtonLoading ? <Loading /> : \"Deposit\"}\n              </DepositPrimaryButton>\n            </>\n          ) : (\n            <div>Need to connect wallet first.</div>\n          )}\n        </>\n      )}\n      {state.selectTab === \"withdraw\" && (\n        <>\n          {/* Add prebuilt component to replace \ud83d\udfe1 */}\n          {state.address ? (\n            <>\n              <GenericTitle>Amount to Withdraw</GenericTitle>\n              <Content>\n                {\" \"}\n                <>\n                  <FlexBetweenContainer>\n                    <TokenTexture>\n                      <Input\n                        type=\"number\"\n                        value={state.withdrawAmount}\n                        onChange={(e) => {\n                          changeWithdrawValue(e.target.value);\n                        }}\n                        placeholder=\"0\"\n                      />\n                    </TokenTexture>\n\n                    <TokenWrapper>\n                      <img\n                        width={26}\n                        height={26}\n                        src={`https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/3dde1f2a96c5b66a08009e58c3f18ee229a83300/src/Images/stETH.svg`}\n                      />\n                      <TokenTexture>{\"stETH\"}</TokenTexture>\n                    </TokenWrapper>\n                  </FlexBetweenContainer>\n                  <FlexBetweenContainer>\n                    <GrayTexture>${state.withdrawAmountInUSD}</GrayTexture>\n                    <GrayTexture>\n                      Withdrawable Balance:{\" \"}\n                      {isValid(state.depositedStEth) &&\n                      state.depositStETH !== \"-\"\n                        ? Big(state.depositedStEth).toFixed(7)\n                        : state.depositedStEth}\n                      <Max\n                        onClick={() => {\n                          changeWithdrawValue(withdrawMaxValue);\n                        }}\n                      >\n                        MAX\n                      </Max>\n                    </GrayTexture>\n                  </FlexBetweenContainer>\n                </>\n              </Content>\n              <br />\n              <WithdrawPrimaryButton\n                onClick={() => withdrawStETH(state.withdrawAmount)}\n                disabled={state.withdrawButtonLoading || withdrawButtonDisabled}\n              >\n                {state.withdrawButtonLoading ? <Loading /> : \"Withdraw\"}\n              </WithdrawPrimaryButton>\n            </>\n          ) : (\n            <div>Need to connect wallet first.</div>\n          )}\n        </>\n      )}\n      {state.selectTab === \"mint\" && (\n        <>\n          {/* Add prebuilt component to replace \ud83d\udfe1 */}\n          {state.address ? (\n            <>\n              <GenericTitle>Amount to Mint</GenericTitle>\n              <Content>\n                {\" \"}\n                <>\n                  <FlexBetweenContainer>\n                    <TokenTexture>\n                      <Input\n                        type=\"number\"\n                        value={state.mintAmount}\n                        onChange={(e) => {\n                          changeMintValue(e.target.value);\n                        }}\n                        placeholder=\"0\"\n                      />\n                    </TokenTexture>\n\n                    <TokenWrapper>\n                      <img\n                        width={26}\n                        height={26}\n                        src={`https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/main/src/Images/aUSD.svg`}\n                      />\n                      <TokenTexture>{\"aUSD\"}</TokenTexture>\n                    </TokenWrapper>\n                  </FlexBetweenContainer>\n                  <FlexBetweenContainer>\n                    <GrayTexture>${state.mintAmountInUSD}</GrayTexture>\n                    <GrayTexture>\n                      Max Limit:{\" \"}\n                      {isValid(state.mintableaUSD) && state.mintableaUSD !== \"-\"\n                        ? Big(state.mintableaUSD).toFixed(7)\n                        : state.mintableaUSD}\n                      <Max\n                        onClick={() => {\n                          changeMintValue(mintMaxValue);\n                        }}\n                      >\n                        MAX\n                      </Max>\n                    </GrayTexture>\n                  </FlexBetweenContainer>\n                </>\n              </Content>\n              <br />\n              <MintPrimaryButton\n                onClick={() => mint(state.mintAmount)}\n                disabled={state.mintButtonLoading || mintButtonDisabled}\n              >\n                {state.mintButtonLoading ? <Loading /> : \"Mint\"}\n              </MintPrimaryButton>\n            </>\n          ) : (\n            <div>Need to connect wallet first.</div>\n          )}\n        </>\n      )}\n      {state.selectTab === \"repay\" && (\n        <>\n          {/* Add prebuilt component to replace \ud83d\udfe1 */}\n          {state.address ? (\n            <>\n              <GenericTitle>Amount to Repay</GenericTitle>\n              <Content>\n                {\" \"}\n                <>\n                  <FlexBetweenContainer>\n                    <TokenTexture>\n                      <Input\n                        type=\"number\"\n                        value={state.repayAmount}\n                        onChange={(e) => {\n                          changeRepayValue(e.target.value);\n                        }}\n                        placeholder=\"0\"\n                      />\n                    </TokenTexture>\n\n                    <TokenWrapper>\n                      <img\n                        width={26}\n                        height={26}\n                        src={`https://raw.githubusercontent.com/mr-harshtyagi/ausd-bos-app/main/src/Images/aUSD.svg`}\n                      />\n                      <TokenTexture>{\"aUSD\"}</TokenTexture>\n                    </TokenWrapper>\n                  </FlexBetweenContainer>\n                  <FlexBetweenContainer>\n                    <GrayTexture>${state.repayAmountInUSD}</GrayTexture>\n                    <GrayTexture>\n                      Total Borrowed :{\" \"}\n                      {isValid(state.mintedaUSD) && state.mintedaUSD !== \"-\"\n                        ? Big(state.mintedaUSD).toFixed(7)\n                        : state.mintedaUSD}\n                      <Max\n                        onClick={() => {\n                          changeRepayValue(repayMaxValue);\n                        }}\n                      >\n                        MAX\n                      </Max>\n                    </GrayTexture>\n                  </FlexBetweenContainer>\n                </>\n              </Content>\n              <br />\n              <RepayPrimaryButton\n                onClick={() => repay(state.repayAmount)}\n                disabled={state.repayButtonLoading || repayButtonDisabled}\n              >\n                {state.repayButtonLoading ? <Loading /> : \"Repay\"}\n              </RepayPrimaryButton>\n            </>\n          ) : (\n            <div>Need to connect wallet first.</div>\n          )}\n        </>\n      )}\n      {/* Widget to replace \ud83d\udfe1 */}\n      {state.alertModalText && (\n        <Widget\n          src={`${config.ownerId}/widget/AAVE.Modal.AlertModal`}\n          props={{\n            config,\n            title: \"All done!\",\n            description: state.alertModalText,\n            onRequestClose: () => State.update({ alertModalText: false }),\n          }}\n        />\n      )}\n    </Body>\n  </>\n);\n\nreturn (\n  <div>\n    {/* Component Body */}\n    {body}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/Lido", "fact_widget_deployments_id": "b4106b4649570298a70480d8203f61a5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 10}