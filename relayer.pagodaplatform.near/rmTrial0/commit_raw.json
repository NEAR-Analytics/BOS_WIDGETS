{"tx_hash": "DLtUhgpfZKqEyt1MoiuZLehazkqXW2tW8tfWc7Y1SdfD", "action_id_social": "BRCVNuzwppchr8PW3ArRuEsZFvRD943oyYmjsqozKKB1-0-widget", "block_id": 95103190, "block_timestamp": "2023-06-26T21:43:09.477Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "rmTrial0", "source_code": null, "metadata": null, "branch": {"draft": {"": "const srcCode = `<html>\n  <head>\n    <title>Word Guessing Game</title>\n    <style>\n      canvas {\n        border: 1px solid black;\n      }\n      .btn {\n        border: none;\n        font-family: inherit;\n        font-size: inherit;\n        color: inherit;\n        background: none;\n        cursor: pointer;\n        padding: 25px 80px;\n        display: inline-block;\n        margin: 15px 30px;\n        text-transform: uppercase;\n        letter-spacing: 1px;\n        font-weight: 700;\n        outline: none;\n        position: relative;\n        -webkit-transition: all 0.3s;\n        -moz-transition: all 0.3s;\n        transition: all 0.3s;\n      }\n\n      .btn:after {\n        content: '';\n        position: absolute;\n        z-index: -1;\n        -webkit-transition: all 0.3s;\n        -moz-transition: all 0.3s;\n        transition: all 0.3s;\n      }\n\n      /* Pseudo elements for icons */\n      .btn:before,\n      .icon-heart:after,\n      .icon-star:after,\n      .icon-plus:after,\n      .icon-file:before {\n        font-family: 'icomoon';\n        font-style: normal;\n        font-weight: normal;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n        position: relative;\n        -webkit-font-smoothing: antialiased;\n      }\n      .btn-2 {\n        background: #cb4e4e;\n        color: #fff;\n        box-shadow: 0 6px #ab3c3c;\n        -webkit-transition: none;\n        -moz-transition: none;\n        transition: none;\n      }\n      .btn-2g {\n        border-radius: 40px;\n      }\n\n      .btn-2g:hover {\n        box-shadow: 0 4px #ab3c3c;\n        top: 2px;\n      }\n\n      .btn-2g:active {\n        box-shadow: 0 0 #ab3c3c;\n        top: 6px;\n      }\n\n      #dialogOverlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        display: none;\n        align-items: center;\n        justify-content: center;\n      }\n\n      #dialogBox {\n        max-width: 600px;\n        width: 100%;\n        margin: auto 1em;\n        background-color: white;\n        padding: 20px;\n        border-radius: 5px;\n        text-align: center;\n      }\n\n      #dialogTitle {\n        font-size: 24px;\n        margin-top: 0;\n      }\n\n      #dialogMessage {\n        font-size: 18px;\n      }\n\n      #dialogButton {\n        margin-top: 20px;\n        padding: 10px 20px;\n        font-size: 16px;\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        cursor: pointer;\n      }\n\n      #dialogButton:hover {\n        background-color: #0056b3;\n      }\n    </style>\n  </head>\n  <body>\n    <div\n      style=\"\n        display: flex;\n        width: 100%;\n        max-width: 1000px;\n        margin: 0 auto;\n        justify-content: center;\n        flex-direction: column;\n        gap: 1em;\n      \"\n    >\n      <canvas id=\"gameCanvas\" width=\"1000\" height=\"500\"></canvas>\n      <div style=\"text-align: center\">\n        <button class=\"btn btn-2 btn-2g\" onclick=\"location.reload()\">\n          Restart\n        </button>\n      </div>\n      <div id=\"dialogOverlay\">\n        <div id=\"dialogBox\">\n          <h2 id=\"dialogTitle\"></h2>\n          <p id=\"dialogMessage\"></p>\n          <button id=\"dialogButton\">OK</button>\n        </div>\n      </div>\n    </div>\n    <script>\n      // Game configuration\n      const maxGuesses = 7;\n      const soilColor = '#8B4513';\n      const skyColor = '#87CEEB';\n      const carbonColor = '#FFFFFF';\n      const wrongGuessColor = '#FF0000';\n      const circleRadius = 30;\n\n      // Game state\n      let visibleLetters = [];\n      let guessedLetters = [];\n      let remainingGuesses = maxGuesses;\n      let carbonLevels = 0;\n\n      // Get canvas element\n      const canvas = document.getElementById('gameCanvas');\n      const context = canvas.getContext('2d');\n\n      // Initialize visible letters with underscores\n      function displayVisibleLetters(word, visibleLetters) {\n        for (let i = 0; i < word.length; i++) {\n          visibleLetters.push('_');\n        }\n      }\n\n      // Draw the game scene\n      function drawScene() {\n        // Clear canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        drawSky(context, canvas, skyColor);\n        drawSoil(context, canvas, soilColor);\n        drawCarbonInSoil(\n          remainingGuesses,\n          context,\n          canvas,\n          maxGuesses,\n          circleRadius,\n          carbonColor\n        );\n        drawCarbonInSky(\n          carbonLevels,\n          context,\n          canvas,\n          maxGuesses,\n          circleRadius,\n          carbonColor\n        );\n        drawVisibleLetters(context, canvas, visibleLetters);\n        displayRemainingGuesses(context, canvas, remainingGuesses);\n      }\n\n      // Draw sky\n      function drawSky(context, canvas, skyColor) {\n        context.fillStyle = skyColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      // Draw soil\n      function drawSoil(context, canvas, soilColor) {\n        context.fillStyle = soilColor;\n        context.fillRect(0, canvas.height - 100, canvas.width, 100);\n        context.font = '24px Arial';\n      }\n\n      // Draw visible letters\n      function drawVisibleLetters(context, canvas, visibleLetters) {\n        context.font = '48px Arial';\n        context.textAlign = 'center'; // Center the text\n        context.fillStyle = 'black';\n        context.fillText(\n          visibleLetters.join(' '),\n          canvas.width / 2,\n          canvas.height / 2\n        );\n      }\n\n      // Display remaining guesses\n      function displayRemainingGuesses(context, canvas, remainingGuesses) {\n        context.font = '24px Arial';\n        context.textAlign = 'center'; // Center the text\n        context.fillText(\n          'Remaining Guesses:' + remainingGuesses,\n          canvas.width / 2,\n          canvas.height / 2 + 50\n        );\n      }\n\n      // Draw carbon characters in soil\n      function drawCarbonInSoil(\n        remainingGuesses,\n        context,\n        canvas,\n        maxGuesses,\n        circleRadius,\n        carbonColor\n      ) {\n        for (let i = 0; i < remainingGuesses; i++) {\n          console.log(remainingGuesses);\n          context.fillStyle = 'green';\n          const x = (canvas.width / (maxGuesses + 1)) * (1 + i);\n          const y = canvas.height - (circleRadius + 20);\n          context.beginPath();\n          context.arc(x, y, circleRadius, 0, Math.PI * 2);\n          context.closePath();\n          context.fill();\n          context.textAlign = 'left';\n          context.fillStyle = carbonColor;\n          context.fillText('c', x - 5, y + 8);\n        }\n      }\n\n      // Draw carbon characters rising to the sky\n      function drawCarbonInSky(\n        carbonLevels,\n        context,\n        canvas,\n        maxGuesses,\n        circleRadius,\n        carbonColor\n      ) {\n        for (let i = 0; i < carbonLevels; i++) {\n          context.fillStyle = 'red';\n          const x = canvas.width - (i + 1) * (canvas.width / (maxGuesses + 1));\n          const y = circleRadius + 20;\n          context.beginPath();\n          context.arc(x, y, circleRadius, 0, Math.PI * 2);\n          context.closePath();\n          context.fill();\n          context.textAlign = 'left';\n          context.fillStyle = carbonColor;\n          context.fillText('c', x - 5, y + 8);\n        }\n      }\n\n      // Handle user input\n      function handleInput(event, word) {\n        const guessedLetter = event.key.toLowerCase();\n\n        // Check if the guessed letter is in the word\n        let found = false;\n        for (let i = 0; i < word.length; i++) {\n          if (word[i] === guessedLetter) {\n            visibleLetters[i] = guessedLetter;\n            found = true;\n          }\n        }\n\n        // Update game state\n        if (!guessedLetters.includes(guessedLetter)) {\n          if (!found) {\n            remainingGuesses > 0 ? remainingGuesses-- : remainingGuesses;\n            carbonLevels < maxGuesses ? carbonLevels++ : carbonLevels;\n            if (remainingGuesses === 0) {\n              // All guesses are wrong, game over\n              setTimeout(() => {\n                showDialog(\"Don't Worry!\", \"You just ran out of guesses, try again.\");\n              }, 1000);\n              context.fillStyle = wrongGuessColor;\n              context.fillRect(0, 0, canvas.width, canvas.height);\n            }\n          }\n          guessedLetters.push(guessedLetter);\n        }\n\n        // Redraw the scene\n        drawScene();\n\n        // Check if the word is guessed\n        if (visibleLetters.join('') === word) {\n          showDialog('Congratulations!', 'You guessed the word \"' + word + '\" correctly!');\n        }\n      }\n\n      // Dialog component\n      function showDialog(title, message) {\n        const dialogOverlay = document.getElementById('dialogOverlay');\n        const dialogTitle = document.getElementById('dialogTitle');\n        const dialogMessage = document.getElementById('dialogMessage');\n        const dialogButton = document.getElementById('dialogButton');\n\n        dialogTitle.textContent = title;\n        dialogMessage.textContent = message;\n\n        dialogOverlay.style.display = 'flex';\n\n        dialogButton.addEventListener('click', function () {\n          dialogOverlay.style.display = 'none';\n          location.reload();\n        });\n      }\n\n      // Initial draw\n      fetch('https://regenwise.xyz/api/words').then((res) => {\n        res.json().then((word) => {\n          formattedWord = word.toLowerCase();\n          console.log(formattedWord);\n          displayVisibleLetters(formattedWord, visibleLetters);\n          drawScene(formattedWord);\n          document.addEventListener('keypress', (event) =>\n            handleInput(event, formattedWord)\n          );\n        });\n      });\n    </script>\n  </body>\n</html>`;\n\nreturn (\n  <>\n    <iframe\n      srcDoc={srcCode}\n      style={{\n        height: \"500px\",\n        width: \"1000px\",\n      }}\n    ></iframe>\n  </>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/rmTrial0", "fact_widget_deployments_id": "e9eeae93a044be215896795c5d4f265c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 71}