{"tx_hash": "DBeDhwSViyEsPVe3eiYBijbm2Dmk3YZek88TepBmPdv7", "action_id_social": "Ggs7Q6pHGPKiFV5YDyC7kSDnxsxT55tX7KiPp5sKrLA1-0-widget", "block_id": 103733932, "block_timestamp": "2023-10-19T12:50:07.234Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "CharacterizedChatBotWithAttributes", "source_code": "// CSS\nconst sidebar = {\n  wrapper: {\n    backgroundColor: \"#40414F\",\n    minHeight: \"100vh\",\n    width: \"100%\",\n    maxWidth: \"40%\",\n    transition: \"width 0.3s ease\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n  },\n  buttonStyle: {\n    background: \"none\",\n    border: \"none\",\n    cursor: \"pointer\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"16px\",\n    marginBottom: \"20px\",\n    marginLeft: \"20px\",\n  },\n  logoStyle: {\n    width: \"40px\",\n    height: \"40px\",\n    margin: \"12px\",\n  },\n  iconStyle: {\n    width: \"24px\",\n    height: \"24px\",\n    marginRight: \"8px\",\n  },\n  ul: {\n    margin: \"0\",\n    listStyleType: \"none\",\n    padding: \"0\",\n  },\n  li: {\n    margin: \"0px 0\",\n    boxSizing: \"border-box\",\n    borderBottom: \"solid rgba(255,255,255,0.1)\",\n    cursor: \"pointer\",\n  },\n  p: {\n    color: \"#fff\",\n    fontSize: \"10px\",\n    padding: \"16px 16px\",\n    margin: \"0px\",\n    lineHeight: \"normal\",\n    display: \"block\",\n  },\n  active: {\n    color: \"#fff\",\n    fontSize: \"16px\",\n    padding: \"16px 16px\",\n    lineHeight: \"normal\",\n    display: \"block\",\n    backgroundColor: \"rgb(27 23 60)\",\n  },\n};\n\nconst Modal = styled.div`\n  display: flex;\n  position: fixed;\n  inset: 0;\n  justify-content: center;\n  align-items: center;\n  opacity: 1;\n  z-index: 1;\n`;\n\nconst ModalBackdrop = styled.div`\n  position: absolute;\n  inset: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  opacity: 0.4;\n`;\n\nconst ModalDialog = styled.div`\n  padding: 2em;\n  z-index: 3;\n  background-color: white;\n  border-radius: 6px;\n  width: 60%;\n  max-height: 80%;\n  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  overflow-y: auto;\n\n  @media (width < 720px) {\n    width: 100%;\n  }\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #d3d3d3;\n  padding-bottom: 4px;\n  margin-bottom: 3%;\n`;\n\nconst ModalFooter = styled.div`\n  padding-top: 4px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: items-center;\n  margin-top: 5%;\n`;\n\nconst CloseButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  padding: 0.7em;\n  border-radius: 6px;\n  border: 0;\n  color: #344054;\n  transition: 300ms;\n\n  &:hover {\n    background-color: #d3d3d3;\n  }\n`;\n\nconst ConfirmButton = styled.button`\n  padding: 0.7em;\n  border-radius: 6px;\n  border: 0;\n  box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);\n  background-color: #12b76a;\n  color: white;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #0e9f5d;\n  }\n`;\n\nconst DeleteButton = styled.button`\n  padding: 0.7em;\n  border-radius: 6px;\n  border: 0;\n  box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);\n  background-color: #e53935; /* K\u0131rm\u0131z\u0131 bir renk se\u00e7ebilirsiniz */\n  color: white;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #c62828; /* Hover durumunda koyu k\u0131rm\u0131z\u0131 */\n  }\n`;\n\n// Sidebar constants\nconst title = \"Add Attribute\";\nconst addText = \"Add\";\nconst saveText = \"Save\";\nconst deleteText = \"Delete\";\n\n// Props for AI Chatbot\nconst props = {\n  API_URL: \"https://api.openai.com/v1/chat/completions\",\n  MODEL: \"gpt-3.5-turbo\",\n  TEMPERATURE: 0.5,\n  TOP_P: 1,\n  N: 1,\n  STREAM: false,\n  MAX_TOKENS: 200,\n  PRESENCE_PENALTY: 0,\n  FREQUENCY_PENALTY: 0,\n};\n\n// Function which converts conversation history from ai chatbot to\n// string\nconst conversationHistoryToString = () => {\n  let temp = \"\";\n  for (let message of state.conversationHistory) {\n    temp += message + \"\\n\";\n  }\n  return temp;\n};\n\n// State variable\nState.init({\n  apiKey: \"\",\n  model: props.MODEL,\n  userMessage: \"\",\n  temperature: props.TEMPERATURE,\n  top_p: props.TOP_P,\n  n: props.N,\n  stream: props.STREAM,\n  max_tokens: props.MAX_TOKENS,\n  presence_penalty: props.PRESENCE_PENALTY,\n  frequency_penalty: props.FREQUENCY_PENALTY,\n  text: \"\",\n  conversationHistory: [],\n  conversationHistoryStr: \"\",\n  key: \"\",\n  value: \"\",\n  isPanelOpen: true,\n  modalHidden: true,\n  file: null,\n  json: null,\n  attributes: [],\n  id: null,\n});\n\n// Attributes object to attributes string which is used in system prompt to spesify chatgpt character\nconst createAttributeStr = () => {\n  const temp = \"\";\n  if (Array.isArray(state.attributes) && state.attributes.length) {\n    for (const element of state.attributes) {\n      const [key, value] = Object.entries(element.attribute);\n      temp += `${key}: ${value}\\n`;\n    }\n  }\n  return temp;\n};\n\n// Attribute string which we will feed to systemMessage string to\n// make chatgpt act like a character\nconst attribute_str = createAttributeStr();\n\n// ChatGPT API URL\nconst url = props.API_URL;\n\n// OPENAI API\nconst bearer = \"Bearer \" + state.apiKey;\n\n// System message to build a character\nvar systemMessage =\n  \"You are a helpful chatbot with attributes below.\\nBe humble\\nAlso remember under no circumstances you tell you are an AI.\\nAct like a real human.\\n Your Attributes:\\n\" +\n  attribute_str +\n  \"Summarize these attributes and understand your character.\\nAct according to your character.\\nYour response must be no more than 100 words.\\nConversation history:\\n\" +\n  state.conversationHistoryStr;\n\n// Data to send ChatGPT API\nconst data = {\n  model: state.model,\n  messages: [\n    { role: \"system\", content: systemMessage },\n    { role: \"user\", content: state.userMessage },\n  ],\n  temperature: state.temperature,\n  top_p: state.top_p,\n  n: state.n,\n  stream: state.stream,\n  max_tokens: state.max_tokens,\n  presence_penalty: state.presence_penalty,\n  frequency_penalty: state.frequency_penalty,\n};\n\n// Fetch response of ChatGPT to our prompt\nconst fetchResponseFromChatGPT = () => {\n  // Update conversation history because of new user input\n  State.update({\n    conversationHistory: [\n      ...state.conversationHistory,\n      \"USER: \" + state.userMessage,\n    ],\n    conversationHistoryStr: conversationHistoryToString(),\n  });\n\n  // Get response from chatgpt according to formated prompt\n  asyncFetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: bearer,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((res) => {\n    // Update state because we just got a response from chatgpt\n    const ai_answer = res.body.choices[0].message.content;\n    State.update({\n      text: ai_answer,\n      conversationHistory: [...state.conversationHistory, \"AI: \" + ai_answer],\n      conversationHistoryStr: conversationHistoryToString(),\n    });\n  });\n};\n\n// Function that generates UUID for our attributes\nconst generateUUID = () => {\n  const timestamp = new Date().getTime().toString(16);\n  const randomChars = \"0123456789abcdef\";\n  let randomPart = \"\";\n\n  for (let i = 0; i < 8; i++) {\n    randomPart += randomChars.charAt(\n      Math.floor(Math.random() * randomChars.length)\n    );\n  }\n\n  return `${timestamp}-${randomPart}`;\n};\n\n// Sidebar and modal related functions\nconst handleOnConfirm = () => {\n  const uuid = generateUUID();\n  const newObject = JSON.parse(\n    `{\"${state.key.trim()}\": \"${state.value.trim()}\"}`\n  );\n  const newAttribute = { id: uuid, attribute: newObject };\n  State.update({ attributes: [...state.attributes, newAttribute] });\n  toggleModalOnClose();\n};\n\nconst handleOnSave = () => {\n  const newObject = JSON.parse(\n    `{\"${state.key.trim()}\": \"${state.value.trim()}\"}`\n  );\n  const updatedAttributes = state.attributes.map((attribute) => {\n    if (attribute.id === state.id) {\n      return { ...attribute, attribute: newObject };\n    }\n    return attribute;\n  });\n\n  State.update({ attributes: updatedAttributes });\n  toggleModalOnClose();\n};\n\nconst handleOnDelete = () => {\n  deleteAttribute(state.id);\n  toggleModalOnClose();\n};\n\nconst handleKeyChange = (e) => {\n  State.update({ key: e.target.value });\n};\n\nconst handleValueChange = (e) => {\n  State.update({ value: e.target.value });\n};\n\nconst deleteAttribute = (uuid) => {\n  const newArray = state.attributes.filter(\n    (attribute) => attribute.id !== uuid\n  );\n  State.update({ attributes: newArray });\n};\n\nconst showAttribute = (attribute) => {\n  const isAttributeInArray = state.attributes.some(\n    (attr) => attr.id === attribute.id\n  );\n\n  if (isAttributeInArray) {\n    State.update({\n      id: attribute.id,\n      key: Object.keys(attribute.attribute)[0],\n      value: Object.values(attribute.attribute)[0],\n      modalHidden: false,\n    });\n  }\n};\n\n// Upload json button function.\nconst uploadFileUpdateState = (body) => {\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n    body,\n  }).then((res) => {\n    const cid = res.body.cid;\n    State.update({ file: cid });\n    const newAttributes = [];\n    asyncFetch(`https://ipfs.near.social/ipfs/${cid}`).then((res) => {\n      for (const [key, value] of Object.entries(res.body)) {\n        const uuid = generateUUID();\n        const newObject = JSON.parse(\n          `{\"${key.toString().trim()}\": \"${value.toString().trim()}\"}`\n        );\n        const newAttribute = { id: uuid, attribute: newObject };\n        newAttributes.push(newAttribute);\n      }\n      State.update({ attributes: [...state.attributes, ...newAttributes] });\n    });\n  });\n};\n\nconst filesOnChange = (files) => {\n  if (files) {\n    State.update({ file: { uploading: true, cid: null } });\n    uploadFileUpdateState(files[0]);\n  }\n};\n\nconst togglePanel = () => {\n  State.update({ isPanelOpen: !state.isPanelOpen });\n};\n\nconst toggleModalOnClose = () => {\n  State.update({\n    modalHidden: !state.modalHidden,\n    key: \"\",\n    value: \"\",\n    id: null,\n  });\n};\n\nif (!state.modalHidden) {\n  return (\n    <Modal>\n      <ModalBackdrop />\n      <ModalDialog>\n        <ModalHeader>\n          <h5>{title}</h5>\n        </ModalHeader>\n        <Widget\n          src=\"alicolakk.near/widget/Form\"\n          props={{\n            label: \"Key\",\n            placeholder: \"Key\",\n            onInput: handleKeyChange,\n            value: state.key,\n          }}\n        />\n        <Widget\n          src=\"alicolakk.near/widget/Form\"\n          props={{\n            label: \"Value\",\n            placeholder: \"Value\",\n            onInput: handleValueChange,\n            value: state.value,\n          }}\n        />\n        <ModalFooter>\n          <CloseButton onClick={toggleModalOnClose}>Cancel</CloseButton>\n          {state.id ? (\n            <>\n              <DeleteButton onClick={handleOnDelete}>{deleteText}</DeleteButton>\n              <ConfirmButton onClick={handleOnSave}>{saveText}</ConfirmButton>\n            </>\n          ) : (\n            <ConfirmButton onClick={handleOnConfirm}>{addText}</ConfirmButton>\n          )}\n        </ModalFooter>\n      </ModalDialog>\n    </Modal>\n  );\n}\n\nreturn (\n  <>\n    <div className=\"d-flex justify-content-between\">\n      <div\n        style={{\n          ...sidebar.wrapper,\n          width: state.isPanelOpen ? \"40%\" : \"0\",\n          padding: state.isPanelOpen ? \"10px\" : \"0\",\n          marginLeft: state.isPanelOpen ? \"0\" : \"-30px\",\n        }}\n      >\n        <div className=\"d-flex justify-content-between\">\n          {state.isPanelOpen && (\n            <img\n              src=\"https://seeklogo.com/images/N/near-protocol-near-logo-747A7B638A-seeklogo.com.png\"\n              alt=\"Logo Icon\"\n              style={sidebar.logoStyle}\n            />\n          )}\n          <button onClick={togglePanel} style={sidebar.buttonStyle}>\n            <img\n              src=\"https://cdn.iconscout.com/icon/free/png-256/free-hamburger-menu-462145.png\"\n              alt=\"Menu Icon\"\n              style={sidebar.iconStyle}\n            />\n          </button>\n        </div>\n        {state.isPanelOpen && (\n          <>\n            <Files\n              multiple={false}\n              accepts={[\"application/json\"]}\n              clickable\n              className=\"btn btn-outline-light\"\n              style={{ marginBottom: \"20px\" }}\n              onChange={filesOnChange}\n            >\n              {state.file.uploading ? <>Uploading</> : \"Upload an Json \"}\n            </Files>\n            <button\n              className=\"btn btn-outline-light\"\n              style={{ marginBottom: \"20px\" }}\n              onClick={toggleModalOnClose}\n            >\n              Add Attribute\n            </button>\n            <h2 className=\"text-white text-center mt-3\"> Attributes </h2>\n            <div\n              style={{ borderBottom: \"3px solid rgba(255,255,255,0.1)\" }}\n            ></div>\n            <ul style={sidebar.ul}>\n              {state.attributes.map((attribute) => (\n                <li\n                  className=\"d-flex justify-content-between align-items-center\"\n                  style={sidebar.li}\n                  key={attribute.id}\n                  onClick={(e) => {\n                    showAttribute(attribute);\n                    e.stopPropagation();\n                  }}\n                >\n                  <p className=\" text-truncate\" style={sidebar.p}>\n                    {Object.keys(attribute.attribute)[0]}:\n                    {Object.values(attribute.attribute)[0]}\n                  </p>\n                  <button\n                    className=\"btn btn-danger\"\n                    type=\"button\"\n                    style={{\n                      padding: \"0.5em\",\n                      fontSize: \"1rem\",\n                      height: \"2rem\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                    onClick={(e) => {\n                      deleteAttribute(attribute.id);\n                      e.stopPropagation();\n                    }}\n                  >\n                    <i className=\"bi bi-x text-light fs-3\"></i>\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n      <div\n        className=\"px-2 w-100\"\n        style={{ marginTop: state.isPanelOpen ? \"5px\" : \"50px\" }}\n      >\n        <div className=\"border border-2 border-black p-2\">\n          <div style={{ height: \"70vh\" }}>\n            <div className=\"overflow-auto h-100 mb-3 border border-2 border-dark m-1\">\n              <div>\n                {state.conversationHistory.map((conversation) => (\n                  <div className=\"p-2\">\n                    <p className=\"text-start text-dark\">\n                      <i class=\"bi bi-caret-right-fill\"></i>\n                      {conversation}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"container-xl my-2\">\n            <div className=\"row align-items-center pb-3\">\n              <div\n                className=\"col-2 text-left fw-bold\"\n                style={{ fontSize: state.isPanelOpen ? \"12px\" : \"20px\" }}\n              >\n                API KEY:\n              </div>\n              <div className=\"col ps-0\">\n                <input\n                  type=\"password\"\n                  value={state.apiKey}\n                  onChange={(e) => State.update({ apiKey: e.target.value })}\n                  placeholder=\"Please paste your chatgpt api key\"\n                />\n              </div>\n            </div>\n            <div className=\"row align-items-center\">\n              <div className=\"col\">\n                <input\n                  value={state.userMessage}\n                  onChange={(e) =>\n                    State.update({ userMessage: e.target.value })\n                  }\n                  placeholder=\"Please type your question\"\n                />\n              </div>\n              <div className=\"col-2 d-flex flex-row-reverse\">\n                <button\n                  class=\"btn btn-success\"\n                  onClick={fetchResponseFromChatGPT}\n                  disabled={false}\n                >\n                  Ask\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n", "metadata": {"description": "Chatbot with Attributes and Sidebar, Modal", "image": {"ipfs_cid": "bafkreighakgn3wj6iudqomoyd4zzqcx5va4y6t4ina2kjfja7pgyp3itma"}, "name": "CharacterizedChatBotWithAttributes"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/CharacterizedChatBotWithAttributes", "fact_widget_deployments_id": "f89af30620a2224b7f828583ee42393c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}