{"tx_hash": "sjQ16Znj4tF4CkxrzBCyd3WhdaAbHSnTPyzxAchqUB4", "action_id_social": "7TpK1W19kv7K3TD383r1UC4BfyAQQZQ34JkKoTStmZd1-0-widget", "block_id": 102772309, "block_timestamp": "2023-10-06T19:46:34.481Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "AfroGether", "source_code": null, "metadata": null, "branch": {"draft": {"": "State.init({\n  items: [\n    {\n      loading: false,\n      error: null,\n      transaction: null,\n      groupPurchaseCount: 2,\n      groupPurchaseThreshold: 3,\n      currentUserPurchased: false,\n      ticketsReleased: false,\n      title: \"AfroFuturism Concert\",\n      image:\n        \"https://nmaahc.si.edu/sites/default/files/event-images/2023-06/DgByy5q0Kma67kt-kSB8vaYw.jpg\",\n    },\n    {\n      loading: false,\n      error: null,\n      transaction: null,\n      groupPurchaseCount: 2,\n      groupPurchaseThreshold: 4,\n      currentUserPurchased: false,\n      ticketsReleased: false,\n      title: \"African Safari Trip\",\n      image:\n        \"https://blog.thomascook.in/wp-content/uploads/2018/04/Ultimate-Kruger-Safari.jpg\",\n    },\n  ],\n  showLogin: true,\n  error: false,\n});\n\nconst loginButton = (\n  <Web3Connect\n    className=\"FormSubmitContainer\"\n    connectLabel={web3connectLabel}\n    onConnect={(provider) => {\n      console.log(\"provider\", provider);\n      State.update({ provider });\n    }}\n  />\n);\n\nconst purchase = (index) => {\n  const sender = Ethers.send(\"eth_requestAccounts\")[0];\n  console.log(\"sender\", sender);\n  if (!sender) {\n    State.update({ error: \"Please login first\", showLogin: true });\n    return;\n  } else {\n    State.update({ error: \"\" });\n  }\n\n  const message = `Buy item: ${state.items[index].title}`;\n  const signer = Ethers.provider().getSigner();\n  signer.signMessage(message).then((signature) => {\n    console.log({ message, signature, ethers });\n    console.log(\n      \"ethers.utils.verifyMessage(message, signature)\",\n      ethers.utils.verifyMessage(message, signature)\n    );\n    const signerAddress = ethers.utils.verifyMessage(message, signature);\n    console.log({ signerAddress, sender });\n    const itemsToUpdate = state.items;\n    itemsToUpdate[index].currentUserPurchased = true;\n    itemsToUpdate[index].groupPurchaseCount += 1;\n    State.update({ items: itemsToUpdate });\n  });\n};\n\nconst release = (index) => {\n  const itemsToUpdate = state.items;\n  itemsToUpdate[index].ticketsReleased = true;\n  State.update({ items: itemsToUpdate });\n};\n\nconst leaveOrder = (index) => {\n  const itemsToUpdate = state.items;\n  itemsToUpdate[index].currentUserPurchased = false;\n  itemsToUpdate[index].groupPurchaseCount -= 1;\n  State.update({ items: itemsToUpdate });\n};\n\nconst renderPurchaseActions = (item, index) => (\n  <>\n    {item.ticketsReleased && (\n      <div class=\"alert alert-success my-1\" role=\"alert\">\n        Your tickets have been released! Check your blockchain wallet for your\n        NFT ticket.\n      </div>\n    )}\n    {item.currentUserPurchased ? (\n      <>\n        <p>\n          You are part of this group purchase. Would you like to leave or find\n          more users to release the tickets?\n        </p>\n\n        {item.groupPurchaseCount < item.groupPurchaseThreshold ? (\n          <>\n            <p>\n              {item.groupPurchaseThreshold - item.groupPurchaseCount} more users\n              required to purchase tickets before tickets are released\n            </p>\n            <button\n              className=\"btn btn-danger m-3\"\n              onClick={() => leaveOrder(index)}\n              disabled={\n                item.loading ||\n                item.groupPurchaseCount === item.groupPurchaseThreshold\n              }\n            >\n              Leave Group Order\n            </button>\n          </>\n        ) : (\n          <>\n            {!item.ticketsReleased && (\n              <button\n                className=\"btn btn-success m-3\"\n                onClick={() => release(index)}\n                disabled={item.loading}\n              >\n                Release Tickets\n              </button>\n            )}\n          </>\n        )}\n      </>\n    ) : (\n      <>\n        {item.groupPurchaseCount < item.groupPurchaseThreshold && (\n          <>\n            <button\n              className=\"btn btn-primary m-3\"\n              onClick={() => purchase(index)}\n              disabled={\n                item.loading ||\n                item.groupPurchaseCount === item.groupPurchaseThreshold\n              }\n            >\n              Buy together with your friends - ($20)\n            </button>\n            <button\n              className=\"btn btn-secondary m-3\"\n              onClick={() => purchase(index)}\n              disabled={item.loading}\n            >\n              Purchase individually at full price - ($30)\n            </button>\n          </>\n        )}\n      </>\n    )}\n  </>\n);\n\nreturn (\n  <div className=\"Afrogether container card shadow my-5 p-5\">\n    <h3 className=\"text-center mb-3\">AfroGether</h3>\n    <p className=\"text-center mb-3\">Buy things together with friends.</p>\n    {state.error && <p className=\"text-danger\">{state.error}</p>}\n    {state.showLogin && (\n      <>\n        <hr />\n        {loginButton}\n      </>\n    )}\n    <div className=\"container\">\n      {state.items.map((item, index) => (\n        <>\n          <div className=\"card shadow-sm mb-3\">\n            <div className=\"card-body\">\n              <h2 class=\"card-title\">{item.title}</h2>\n              <img\n                key={index}\n                className=\"card-img-top\"\n                style={{ width: \"200px\", height: \"auto\" }}\n                src={item.image}\n                alt=\"user\"\n              />\n              <p className=\"card-text\">\n                {item.groupPurchaseCount} out of {item.groupPurchaseThreshold}{\" \"}\n                friends have purchased tickets for the event.\n              </p>\n\n              {Array.from({ length: item.groupPurchaseCount }).map(\n                (_, index) => (\n                  <img\n                    key={index}\n                    className=\"img-thumbnail\"\n                    style={{ width: \"50px\", height: \"50px\" }}\n                    src={`https://source.unsplash.com/random?sig=${index}`}\n                    alt=\"user\"\n                  />\n                )\n              )}\n              {renderPurchaseActions(item, index)}\n            </div>\n          </div>\n        </>\n      ))}\n    </div>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/AfroGether", "fact_widget_deployments_id": "0b8307afa6273feb89d26c804d814d9d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}