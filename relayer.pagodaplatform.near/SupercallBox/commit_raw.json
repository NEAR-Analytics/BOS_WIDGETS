{"tx_hash": "9m7EJjbT9R5xXWJJ298LMJG7GdNZESAmU9Jib5LSD4RQ", "action_id_social": "BLaBbrYuaBWynxsL9uaLnagUUfPfHtzBT1yVDeCMVHob-0-widget", "block_id": 108197239, "block_timestamp": "2023-12-17T20:50:50.784Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "SupercallBox", "source_code": "// props.typeFunction is transfer or swap\nconst { typeFunction } = props;\n\nconst tokens = [\n  {\n    tokenAddress: \"0x38430d2703246F986685F68E2817CB370F5f3CCD\",\n    tokenName: \"USD Tether\",\n    tokenSymbol: \"USDT\",\n    decimal: 18,\n    logo: \"https://assets.coincap.io/assets/icons/usdt@2x.png\",\n  },\n  {\n    tokenAddress: \"0xEa5363305017B2A6fD0d72Ba830513c678a2f1fE\",\n    tokenName: \"Dai stablecoin\",\n    tokenSymbol: \"DAI\",\n    decimal: 18,\n    logo: \"https://assets.coincap.io/assets/icons/dai@2x.png\",\n  },\n  {\n    tokenAddress: \"0x68cF7D5CEC3f8Cd69d7Bd842e1665818E46E2126\",\n    tokenName: \"Wrapped Etherum\",\n    tokenSymbol: \"WETH\",\n    decimal: 18,\n    logo: \"https://assets.coincap.io/assets/icons/weth@2x.png\",\n  },\n];\n\nconst Container = styled.div`\n  border-radius: 14px;\n  border: 1px solid #e9ebed;\n  width: 328px;\n`;\n\nconst ContainerContent = styled.div`\n  padding: 18px 22px;\n`;\n\nconst TextHeader = styled.span`\n  color: var(--Text-Primary-Text, #262930);\n  /* p-ui-semibold */\n  font-family: Mona Sans;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 24px; /* 150% */\n`;\n\nconst StyleTextTitle = styled.span`\n  color: var(--Text-Secondary-Text, #656973);\n\n  /* body */\n  font-family: Mona Sans;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px; /* 142.857% */\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  padding: 0;\n  background: #e5e7eb;\n`;\n\nconst StyledBoxInput = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst StyledAddButton = styled.button`\n  width: 78px;\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  border-radius: 10px;\n  border: 1px solid #dde1e8;\n  background-color: #fff4;\n  background: var(#fff);\n  box-shadow: 0px 1px 2px 0px rgba(16, 24, 40, 0.05);\n  align-items: center;\n`;\n\nconst StyledAddText = styled.span`\n  color: var(#262930);\n\n  /* subtle-semibold */\n  font-family: Mona Sans;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px; /* 142.857% */\n`;\n\ninitState({\n  functionName: \"\",\n  //   if props.typeFunction is null default set to transfer\n  typeFunction: typeFunction ?? \"transfer\",\n  inputToken: \"\",\n  outputToken: \"\",\n  toWalletAddress: \"\",\n  amount: \"\",\n  functionList: [],\n});\n\nconst renderFunction = () => {\n  if (state.typeFunction === \"transfer\") {\n    return (\n      <>\n        <ContainerContent>\n          <TextHeader>Transfer</TextHeader>\n        </ContainerContent>\n        <Divider />\n        <ContainerContent>\n          <StyledBoxInput>\n            <StyleTextTitle>Token</StyleTextTitle>\n            <select\n              class=\"form-select mt-2\"\n              id=\"selectFunction\"\n              value={state.inputToken}\n              onChange={(e) => {\n                State.update({ inputToken: e.target.value });\n              }}\n            >\n              {tokens.map((token) => (\n                <option value={token.tokenSymbol}>\n                  {/* <img src={token.logo} width={16} height={16} alt=\"img\" /> */}\n                  {token.tokenSymbol}\n                </option>\n              ))}\n            </select>\n          </StyledBoxInput>\n          <StyledBoxInput>\n            <StyleTextTitle>To</StyleTextTitle>\n            <input\n              class=\"form-control mt-2\"\n              type=\"text\"\n              placeholder=\"Wallet Address\"\n              onChange={(e) => {\n                State.update({ toWalletAddress: e.target.value });\n              }}\n            />\n          </StyledBoxInput>\n          <StyledBoxInput>\n            <StyleTextTitle>Amount</StyleTextTitle>\n            <input\n              class=\"form-control mt-2\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              onChange={(e) => {\n                State.update({ amount: e.target.value });\n              }}\n            />\n          </StyledBoxInput>\n        </ContainerContent>\n      </>\n    );\n  } else if (state.typeFunction === \"swap\") {\n    return (\n      <>\n        <ContainerContent>\n          <TextHeader>Swap</TextHeader>\n        </ContainerContent>\n        <Divider />\n        <ContainerContent>\n          <StyledBoxInput>\n            <StyleTextTitle>Input token</StyleTextTitle>\n            <select\n              class=\"form-select mt-2\"\n              id=\"selectFunction\"\n              value={state.inputToken}\n              onChange={(e) => {\n                State.update({ inputToken: e.target.value });\n              }}\n            >\n              {tokens.map((token) => (\n                <option value={token.tokenSymbol}>\n                  {/* <img src={token.logo} width={16} height={16} alt=\"img\" /> */}\n                  {token.tokenSymbol}\n                </option>\n              ))}\n            </select>\n          </StyledBoxInput>\n          <StyledBoxInput>\n            <StyleTextTitle>Input amount</StyleTextTitle>\n            <input\n              class=\"form-control mt-2\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              onChange={(e) => {\n                State.update({ amount: e.target.value });\n              }}\n            />\n          </StyledBoxInput>\n          <StyledBoxInput>\n            <StyleTextTitle>Output token</StyleTextTitle>\n            <select\n              class=\"form-select mt-2\"\n              id=\"selectFunction\"\n              value={state.outputToken}\n              onChange={(e) => {\n                State.update({ outputToken: e.target.value });\n              }}\n            >\n              {tokens.map((token) => (\n                <option value={token.tokenSymbol}>\n                  {/* <img src={token.logo} width={16} height={16} alt=\"img\" /> */}\n                  {token.tokenSymbol}\n                </option>\n              ))}\n            </select>\n          </StyledBoxInput>\n          <StyledBoxInput>\n            <StyleTextTitle>Output amount</StyleTextTitle>\n            <input\n              class=\"form-control mt-2\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              onChange={(e) => {\n                State.update({ amount: e.target.value });\n              }}\n            />\n          </StyledBoxInput>\n        </ContainerContent>\n      </>\n    );\n  }\n};\n\nreturn <Container>{renderFunction()}</Container>;\n", "metadata": {"fork_of": "xspeedx.near/widget/SupercallBox@108196973"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/SupercallBox", "fact_widget_deployments_id": "b4195ec54e900935f1922ae1c1468c4b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}