{"tx_hash": "BA8hj8Dm6XynNrCYUWAgA6BHGGt7xysj2Xh5SurwFTJ5", "action_id_social": "DsdEWarXNg8nBpe815QyEnjAymcW86YjezF5KZGE8HXm-0-widget", "block_id": 112056931, "block_timestamp": "2024-02-04T03:02:07.533Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "ToDoList", "source_code": null, "metadata": null, "branch": {"draft": {"": "const todolistContract = \"0x5fA5241aa08edc190Cf049F3F746D9D2a2B8F3D9\";\n\nconst todolistAbi = fetch(\n  \"https://gist.githubusercontent.com/fchambi/bf964ee8fe8b4fa8cca495a2df9f9b5b/raw/e5f998945121c227c91fe3109f74d166aa0cc364/.txt\"\n);\n\nif (!todolistAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(todolistAbi.body);\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nState.init({\n  getTasks: true,\n  user_tasks: [],\n});\n\nconst submitTask = () => {\n  if (state.walletAddress === \"\" || state.amountToSend === \"\") {\n    return console.log(\"Por favor, complete ambos campos\");\n  }\n\n  const contract = new ethers.Contract(\n    todolistContract,\n    todolistAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  contract\n    .creategreenBoxNativeCoin(state.walletAddress, state.amountToSend)\n    .then((transactionHash) => {\n      setTimeout(() => {\n        getTasks();\n      }, 5000);\n    });\n};\n\nconst finishTask = (task) => {\n  const contract = new ethers.Contract(\n    todolistContract,\n    todolistAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  contract.updateStatus(task.id, true).then((transactionHash) => {\n    setTimeout(() => {\n      getTasks();\n    }, 5000);\n  });\n};\n\nconst getTasks = () => {\n  const contract = new ethers.Contract(\n    todolistContract,\n    todolistAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  contract.getTaskCount().then((res) => {\n    const countTasks = res.toNumber();\n    let tasks = [];\n    for (let i = 0; i < countTasks; i++) {\n      const taskNumber = i;\n      contract.getTask(i).then((res) => {\n        const newTask = { id: taskNumber, name: res[0], status: res[1] };\n        tasks.push(newTask);\n      });\n    }\n    setTimeout(() => {\n      State.update({ user_tasks: tasks, getTasks: false });\n    }, 10000);\n  });\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nif (state.user_tasks.length == 0 && state.sender) {\n  getTasks();\n}\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://nativonft.mypinata.cloud/ipfs/Qmdpe64Mm46fvWNVaCroSGa2JKgauUUUE5251Cx9nTKNrs\"\n).body;\n\nif (!cssFont || !css) return \"\";\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nreturn (\n  <Theme>\n    <div class=\"LidoContainer\">\n      <div class=\"Header\">Comprar GreenBox</div>\n\n      {state.sender ? (\n        <>\n          <div class=\"SubHeader\">Crear nueva tarea </div>\n          <div class=\"LidoStakeFormInputContainer\">\n            <span class=\"LidoStakeFormInputContainerSpan2\">\n              <input\n                class=\"LidoStakeFormInputContainerSpan2Input\"\n                value={state.walletAddress}\n                onChange={(e) =>\n                  State.update({ walletAddress: e.target.value })\n                }\n                placeholder=\"Direcci\u00f3n de wallet\"\n              />\n            </span>\n          </div>\n          <div class=\"LidoStakeFormInputContainer\">\n            <span class=\"LidoStakeFormInputContainerSpan2\">\n              <input\n                class=\"LidoStakeFormInputContainerSpan2Input\"\n                value={state.amountToSend}\n                onChange={(e) => State.update({ amountToSend: e.target.value })}\n                placeholder=\"Cantidad a enviar\"\n              />\n            </span>\n          </div>\n          <button\n            class=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitTask()}\n          >\n            <span>Comprar</span>\n          </button>{\" \"}\n          <div>\n            <div class=\"SubHeader\">Tareas creadas: </div>\n            {state.getTasks ? (\n              <span>Consultando tareas...</span>\n            ) : state.user_tasks.length > 0 ? (\n              <table className=\"table table-hover table-sm\">\n                <thead>\n                  <tr class=\"p-3 mb-2 bg-primary bg-gradient text-white rounded-5 text-center\">\n                    <th>Nombre</th>\n                    <th>Terminada</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {state.user_tasks.map((data, key) => {\n                    return (\n                      <tr class=\"text-center\">\n                        <td>{data.name}</td>\n                        <td>{data.status ? \"Si\" : \"No\"}</td>\n                        <td>\n                          {!data.status && (\n                            <button\n                              class=\"btn btn-primary\"\n                              onClick={async () => {\n                                finishTask(data);\n                              }}\n                            >\n                              Finalizar\n                            </button>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            ) : (\n              <span>No hay tareas guardadas</span>\n            )}\n          </div>{\" \"}\n        </>\n      ) : (\n        <Web3Connect\n          className=\"LidoStakeFormSubmitContainer\"\n          connectLabel=\"Connect with Web3\"\n        />\n      )}\n    </div>\n  </Theme>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/ToDoList", "fact_widget_deployments_id": "9383a44c05fceb077f333f85e5620fdf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}