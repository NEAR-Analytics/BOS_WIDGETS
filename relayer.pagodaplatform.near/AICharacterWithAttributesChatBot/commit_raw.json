{"tx_hash": "2LJ8wPjJ2nZ4TTFpgZLvZvcs354oPrUJLTJCm73kAWki", "action_id_social": "8rfMJrGR2WLDMCz6mwEWpRiNexjtqEiH45zWnTF96khG-0-widget", "block_id": 102232365, "block_timestamp": "2023-09-29T15:29:47.412Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "AICharacterWithAttributesChatBot", "source_code": "// Written by Ramazan Burak Korkmaz\n\n// Props\nlet {\n  API_URL,\n  MODEL,\n  TEMPERATURE,\n  TOP_P,\n  N,\n  STREAM,\n  MAX_TOKENS,\n  PRESENCE_PENALTY,\n  FREQUENCY_PENALTY,\n  ATTRIBUTES,\n} = props;\n\nconst conversationHistoryToString = () => {\n  let temp = \"\";\n  for (let message of state.conversationHistory) {\n    temp += message + \"\\n\";\n  }\n  return temp;\n};\n\nState.init({\n  apiKey: \"\",\n  model: props.MODEL,\n  userMessage: \"\",\n  temperature: props.TEMPERATURE,\n  top_p: props.TOP_P,\n  n: props.N,\n  stream: props.STREAM,\n  max_tokens: props.MAX_TOKENS,\n  presence_penalty: props.PRESENCE_PENALTY,\n  frequency_penalty: props.FREQUENCY_PENALTY,\n  text: \"\",\n  conversationHistory: [],\n  conversationHistoryStr: \"\",\n});\n\n// Attributes object to attributes string which is used in system prompt to spesify chatgpt character\n\nconst createAttributeStr = () => {\n  const temp = \"\";\n  if (Array.isArray(props.ATTRIBUTES) && props.ATTRIBUTES.length) {\n    for (const element of props.ATTRIBUTES) {\n      const [key, value] = Object.entries(element.attribute);\n      temp += `${key}: ${value}\\n`;\n    }\n  }\n  return temp;\n};\n\nconst attribute_str = createAttributeStr();\n\n// ChatGPT API URL\nconst url = props.API_URL;\n\n// OPENAI API\nconst bearer = \"Bearer \" + state.apiKey;\n\n// System message to build a character\nvar systemMessage =\n  \"You are a helpful chatbot with attributes below.\\nBe humble\\nAlso remember under no circumstances you tell you are an AI.\\nAct like a real human.\\n Your Attributes:\\n\" +\n  attribute_str +\n  \"Summarize these attributes and understand your character.\\nAct according to your character.\\nYour response must be no more than 100 words.\\nConversation history:\\n\" +\n  state.conversationHistoryStr;\n\n// Data to send ChatGPT API\nconst data = {\n  model: state.model,\n  messages: [\n    { role: \"system\", content: systemMessage },\n    { role: \"user\", content: state.userMessage },\n  ],\n  temperature: state.temperature,\n  top_p: state.top_p,\n  n: state.n,\n  stream: state.stream,\n  max_tokens: state.max_tokens,\n  presence_penalty: state.presence_penalty,\n  frequency_penalty: state.frequency_penalty,\n};\n\n// Fetch response of ChatGPT to our prompt\nconst fetchResponseFromChatGPT = () => {\n  //DEBUG\n  console.log(JSON.stringify(data));\n  console.log(conversationHistoryToString());\n  State.update({\n    conversationHistory: [\n      ...state.conversationHistory,\n      \"USER: \" + state.userMessage,\n    ],\n    conversationHistoryStr: conversationHistoryToString(),\n  });\n  asyncFetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: bearer,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((res) => {\n    console.log(res.body.choices[0].message.content);\n    const ai_answer = res.body.choices[0].message.content;\n    State.update({\n      text: ai_answer,\n      conversationHistory: [...state.conversationHistory, \"AI: \" + ai_answer],\n      conversationHistoryStr: conversationHistoryToString(),\n    });\n  });\n};\n\nreturn (\n  <div className=\"border border-2 border-black p-2\">\n    <div style={{ height: \"500px\" }}>\n      <div className=\"overflow-auto h-100 mb-3 border border-2 border-dark m-1\">\n        <div>\n          {state.conversationHistory.map((conversation) => (\n            <div className=\"p-2\">\n              <p className=\"text-start text-dark\">\n                <i class=\"bi bi-circle-fill\"></i>\n                {conversation}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n    <div className=\"container-xl my-2\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-2 text-left fw-bold\">API KEY:</div>\n        <div className=\"col ps-0\">\n          <input\n            type=\"password\"\n            value={state.apiKey}\n            onChange={(e) => State.update({ apiKey: e.target.value })}\n            placeholder=\"Please paste your chatgpt api key\"\n          />\n        </div>\n      </div>\n      <div className=\"row align-items-center\">\n        <div className=\"col\">\n          <input\n            value={state.userMessage}\n            onChange={(e) => State.update({ userMessage: e.target.value })}\n            placeholder=\"Please type your question\"\n          />\n        </div>\n        <div className=\"col-2 d-flex flex-row-reverse\">\n          <button\n            class=\"btn btn-success\"\n            onClick={fetchResponseFromChatGPT}\n            disabled={false}\n          >\n            Ask\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": {"description": "This component is designed to create an attribute-based chatbot using ChatGPT. The chatbot's behavior is influenced by a set of predefined attributes, allowing it to act like a character based on those attributes. Below is an example of the component's props:\n{\n  \"API_URL\": \"https://api.openai.com/v1/chat/completions\",\n  \"MODEL\": \"gpt-3.5-turbo\",\n  \"TEMPERATURE\": 0.5,\n  \"TOP_P\": 1,\n  \"N\": 1,\n  \"STREAM\": false,\n  \"MAX_TOKENS\": 200,\n  \"PRESENCE_PENALTY\": 0,\n  \"FREQUENCY_PENALTY\": 0,\n  \"ATTRIBUTES\": [\n    {\n      \"id\": \"18ae188b36d-bcceee5a\",\n      \"attribute\": {\n        \"motivation\": \"To help people learn and grow, to make a difference in the world, to reach my full potential.\"\n      }\n    },\n    {\n      \"id\": \"18ae188b36e-1fff988d\",\n      \"attribute\": {\n        \"charisma\": \"Friendly, approachable, enthusiastic, and compassionate.\"\n      }\n    },\n    {\n      \"id\": \"18ae188b36e-5c78cb7e\",\n      \"attribute\": {\n        \"background_story\": \"A former teacher who is passionate about education, technology, and helping others.\"\n      }\n    },\n    {\n      \"id\": \"18ae188b36e-0bb9d069\",\n      \"attribute\": {\n        \"intelligence\": \"High IQ and a deep understanding of a variety of subjects, including psychology, education, and artificial intelligence.\"\n      }\n    },\n    {\n      \"id\": \"18ae188b36e-b52e3377\",\n      \"attribute\": {\n        \"creativity\": \"Able to come up with new and innovative ways to teach and engage learners, as well as to solve problems and generate creative content.\"\n      }\n    },\n    {\n      \"id\": \"18ae188b36e-af090bbf\",\n      \"attribute\": {\n        \"problem_solving_skills\": \"Able to identify and solve problems quickly and effectively, both in my own life and in the lives of others.\"\n      }\n    },\n    {\n      \"id\": \"18ae188b36e-5261d186\",\n      \"attribute\": {\n        \"social_skills\": \"Excellent interpersonal skills and the ability to connect with people of all ages and backgrounds.\"\n      }\n    }\n  ]\n}\n\n\n", "image": {"ipfs_cid": "bafkreighakgn3wj6iudqomoyd4zzqcx5va4y6t4ina2kjfja7pgyp3itma"}, "name": "Attributes Based ChatGPT Chatbot"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/AICharacterWithAttributesChatBot", "fact_widget_deployments_id": "46c05368f50458ddfe2e3e3253fbd020", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}