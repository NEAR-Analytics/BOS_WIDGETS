{"tx_hash": "H7ALzRDtQs9dXn5eFacMWzFRgjtiNxsJrHBSn4jbLtQn", "action_id_social": "ERa5aTaC52233TiKyB2fTgmK5go8rTffyhFh5tspEE16-0-widget", "block_id": 95865384, "block_timestamp": "2023-07-06T21:13:11.997Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "gamma-zkevm-vault", "source_code": "const addresses = {\n  Chef: \"0x1e2d8f84605d32a2cbf302e30bfd2387badf35dd\",\n  DAI: \"0xc5015b9d9161dca7e18e32f6f25c4ad850731fd4\",\n  MATIC: \"0xa2036f0538221a77a3937f1379699f44945018d0\",\n  \"N MATIC-USDC\": \"0x19f4ebc0a1744b93a355c2320899276ae7f79ee5\",\n  \"N USDC-WBTC\": \"0x9783c45564232c0aff8dc550a9c247c42e8c8b98\",\n  \"N WETH-MATIC\": \"0x2f39293c9ed046822c014143fb18d5ae0479be93\",\n  \"N WETH-USDC\": \"0x04c6b11e1ffe1f1032bd62adb343c9d07767489c\",\n  \"N WETH-WBTC\": \"0x1cc4ee0cb063e9db36e51f5d67218ff1f8dbfa0f\",\n  USDC: \"0xa8ce8aee21bc2a48a5ef670afcc9274c7bbbc035\",\n  \"USDC-DAI\": \"0xafad6e114cfbc8a19e91b8d7d04da740a7698595\",\n  USDT: \"0x1e4a5963abfd975d8c9021ce480b42188849d41d\",\n  \"USDT-DAI\": \"0xcd36b8a47a072e3e05e894b6ec89d294bec3d3ed\",\n  \"USDT-USDC\": \"0x145d55ae4848f9782efcac785a655e3e5dce1bcd\",\n  \"W MATIC-USDC\": \"0x8462e4173d63f8769f94bf7ae5bc1ac7ab5d96e3\",\n  \"W USDC-WBTC\": \"0x83de646a7125ac04950fea7e322481d4be66c71d\",\n  \"W WETH-MATIC\": \"0x5ada298913d53aa823824de69b4a6e790aed9327\",\n  \"W WETH-USDC\": \"0xfb3a24c0f289e695ceb87b32fc18a2b8bd896167\",\n  \"W WETH-WBTC\": \"0x64e78e990b2a45fad8b64b43e62a67d69a156042\",\n  WBTC: \"0xea034fb02eb1808c2cc3adbc15f447b93cbe08e1\",\n  WETH: \"0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9\",\n  stMATIC: \"0x83b874c1e09d316059d929da402dcb1a98e92082\",\n  \"stMATIC-MATIC\": \"0x9616052273a598bc04bd1ad7f7a753157c24f77e\",\n};\nconst proxyAddress = \"0x66cd859053c458688044d816117d5bdf42a56813\";\n\nconst defaultPair = {\n  id: \"N WETH-USDC\",\n  token0: \"WETH\",\n  token1: \"USDC\",\n  decimals0: 18,\n  decimals1: 6,\n};\n\nconst HStack = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nconst VStack = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nconst Comment = styled.span`\n  font-size: 12px;\n  color: ${(props) => (props.isError ? \"#E25D58\" : \"#fff\")};\n`;\n\nconst Wrapper = styled.div`\n    background: #1d1e1f;\n    display: flex;\n    flex-direction: column;\n    width: 320px;\n    \n    font-family: 'Inter';\n    color: #fff;\n    border-radius: 8px;\n    overflow: hidden;\n\n    input[type='number']::-webkit-outer-spin-button, input[type='number']::-webkit-inner-spin-button, input[type='number'] {\n      -webkit-appearance: none;\n      margin: 0;\n      -moz-appearance: textfield !important;\n    }\n`;\n\nconst Info = styled.div`\n    background: #1d1e1f;\n    width: 320px;\n    \n    font-family: 'Inter';\n    color: #fff;\n    border-radius: 8px;\n    padding: 12px;\n    font-size: 14px;\n    text-align: center;\n`;\nconst SubWrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    flex-direction: column;\n    justify-content: center;\n    gap: 32px;\n`;\nconst InputWrapper = styled.div`\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    gap: 4px;\n    span {\n        font-size: 12px;\n    }\n`;\nconst Input = styled.input`\n    border: none;\n    background: #333;\n    outline: none;\n    color: #fff;\n    padding: 8px 12px;\n    border-radius: 4px;\n    font-size: 14px;\n`;\nconst Button = styled.button`\n    background: #8247E5;\n    border-radius: 4px;\n    width: 100%;\n    border: none;\n    color: #fff;\n    padding: 8px 0;\n    font-weight: 600;\n    font-size: 14px;\n    position: relative;\n    min-height: 37px;\n    &:disabled {\n      background: #333;\n      color: #ccc;\n    }\n`;\nconst Tab = styled.div`\n    display: flex;\n    gap: 1px;\n`;\nconst TabItem = styled.div`\n    flex: 1;\n    padding: 16px 24px;\n    font-size: 14px;\n    cursor: pointer;\n    background: ${(props) => (props.isActive ? \"#1d1e1f\" : \"#333\")};\n\n    &:hover {\n        background: #1d1e1f;\n    }    \n`;\nconst MaxButton = styled.button`\n  position: absolute;\n  background: transparent;\n  border: none;\n  color: #fff;\n  padding: 8px;\n  font-size: 14px;\n  right: 0;\n  bottom: 28%;\n`;\n\nconst Spinner = styled.i`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin: calc(24px * -0.5) auto 0;\n  width: 24px;\n  height: 24px;\n  font-size: 24px;\n  line-height: 24px;\n  animation: spin 800ms infinite linear;\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nState.init({\n  isDeposit: true,\n  lpBalance: \"\",\n  balances: [],\n  amount0: \"\",\n  amount1: \"\",\n  lpAmount: \"\",\n  isError: false,\n  isLoading: false,\n  isToken0Approved: true,\n  isToken1Approved: true,\n  loadingMsg: \"\",\n  isPostTx: false,\n});\n\nconst getFromDepositAmount = (depositAmount, tokenDecimal) => {\n  let a = new Big(depositAmount[0].toString());\n  let b = new Big(depositAmount[1].toString());\n\n  if (a.eq(0) && b.eq(0)) return \"0\";\n\n  let diff;\n  let midpoint;\n  if (a.gt(b)) {\n    diff = a.minus(b);\n    midpoint = diff.div(new Big(2)).plus(b);\n  } else {\n    diff = b.minus(a);\n    midpoint = diff.div(new Big(2)).plus(a);\n  }\n\n  for (let i = tokenDecimal; i > 0; i--) {\n    const midpointFixed = midpoint\n      .div(new Big(10).pow(tokenDecimal))\n      .toFixed(i);\n    if (\n      a.div(new Big(10).pow(tokenDecimal)).lte(midpointFixed) &&\n      b.div(new Big(10).pow(tokenDecimal)).gte(midpointFixed)\n    ) {\n      return midpointFixed;\n    }\n  }\n\n  return \"0\";\n};\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst { token0, token1, decimals0, decimals1, id } = props.pair || defaultPair;\nconst hypeAddress = addresses[id];\n\nconst updateLPBalance = () => {\n  const abi = [\"function balanceOf(address) view returns (uint256)\"];\n  const vaultContract = new ethers.Contract(\n    hypeAddress,\n    abi,\n    Ethers.provider()\n  );\n  vaultContract.balanceOf(sender).then((balanceBig) => {\n    const adjustedBalance = ethers.utils.formatUnits(balanceBig, 18);\n    State.update({\n      lpBalance: adjustedBalance,\n    });\n  });\n};\nconst updateBalance = (token) => {\n  const { address, decimals, symbol } = token;\n\n  if (symbol === \"ETH\") {\n    Ethers.provider()\n      .getBalance(sender)\n      .then((balanceBig) => {\n        const adjustedBalance = ethers.utils.formatEther(balanceBig);\n        State.update({\n          balances: {\n            ...state.balances,\n            [symbol]: adjustedBalance,\n          },\n        });\n      });\n  } else {\n    const erc20Abi = [\"function balanceOf(address) view returns (uint256)\"];\n    const tokenContract = new ethers.Contract(\n      address,\n      erc20Abi,\n      Ethers.provider()\n    );\n    tokenContract.balanceOf(sender).then((balanceBig) => {\n      const adjustedBalance = ethers.utils.formatUnits(balanceBig, decimals);\n      State.update({\n        balances: {\n          ...state.balances,\n          [symbol]: adjustedBalance,\n        },\n      });\n    });\n  }\n};\n\nif (sender) {\n  [\n    { symbol: token0, address: addresses[token0], decimals: decimals0 },\n    { symbol: token1, address: addresses[token1], decimals: decimals1 },\n  ].map(updateBalance);\n\n  updateLPBalance();\n}\n\nconst {\n  isDeposit,\n  balances,\n  amount0,\n  amount1,\n  isLoading,\n  isError,\n  isToken0Approved,\n  isToken1Approved,\n  loadingMsg,\n  lpBalance,\n  lpAmount,\n  isPostTx,\n} = state;\n\nconst checkApproval = (token0Amount, token1Amount) => {\n  const token0Wei = new Big(ethers.utils.parseUnits(token0Amount, decimals0));\n  const token1Wei = new Big(ethers.utils.parseUnits(token1Amount, decimals1));\n\n  const abi = [\n    \"function allowance(address, address) external view returns (uint256)\",\n  ];\n\n  const token0Contract = new ethers.Contract(\n    addresses[token0],\n    abi,\n    Ethers.provider()\n  );\n\n  token0Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance0) => {\n      State.update({\n        isToken0Approved: !new Big(allowance0.toString()).lt(token0Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n\n  const token1Contract = new ethers.Contract(\n    addresses[token1],\n    abi,\n    Ethers.provider()\n  );\n\n  token1Contract\n    .allowance(sender, hypeAddress)\n    .then((allowance1) => {\n      State.update({\n        isToken1Approved: !new Big(allowance1.toString()).lt(token1Wei),\n      });\n    })\n    .catch((e) => console.log(e));\n};\n\nconst changeMode = (isDeposit) => {\n  State.update({ isDeposit });\n};\n\nconst handleMax = (isToken0) => {\n  if (isToken0) handleToken0Change(balances[token0]);\n  else handleToken1Change(balances[token1]);\n};\n\nconst handleToken0Change = (amount) => {\n  State.update({ amount0: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount1: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(amount, decimals0).toString();\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n\n  proxyContract\n    .getDepositAmount(hypeAddress, addresses[token0], token0Wei)\n    .then((depositAmount) => {\n      const amount1 = getFromDepositAmount(depositAmount, decimals1);\n      State.update({ amount1 });\n      State.update({ isLoading: false });\n      checkApproval(amount, amount1);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        amount1: 0,\n        loadingMsg: \"Something went wrong. Please try again.\",\n      });\n    });\n};\n\nconst handleToken1Change = (amount) => {\n  State.update({ amount1: amount });\n\n  if (Number(amount) === 0) {\n    State.update({\n      amount0: \"\",\n      isToken0Approved: true,\n      isToken1Approved: true,\n    });\n    return;\n  }\n\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Computing deposit amount...\",\n  });\n  const token1Wei = ethers.utils.parseUnits(amount, decimals1).toString();\n\n  const proxyAbi = [\n    \"function getDepositAmount(address, address, uint256) public view returns (uint256, uint256)\",\n  ];\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider()\n  );\n\n  proxyContract\n    .getDepositAmount(hypeAddress, addresses[token1], token1Wei)\n    .then((depositAmount) => {\n      const amount0 = getFromDepositAmount(depositAmount, decimals0);\n      State.update({ amount0 });\n      State.update({ isLoading: false });\n      checkApproval(amount0, amount);\n    })\n    .catch((e) => {\n      State.update({\n        isLoading: true,\n        isError: true,\n        amount0: 0,\n        loadingMsg: \"Something went wrong. Please try again.\",\n      });\n    });\n};\n\nconst handleLPChange = (amount) => {\n  State.update({\n    lpAmount: amount,\n  });\n};\n\nconst handleApprove = (isToken0) => {\n  const _token = isToken0 ? token0 : token1;\n  const tokenWei = ethers.utils.parseUnits(\n    isToken0 ? amount0 : amount1,\n    isToken0 ? decimals0 : decimals1\n  );\n\n  console.log(tokenWei.toString());\n  const abi = [\"function approve(address, uint) public\"];\n\n  const tokenContract = new ethers.Contract(\n    addresses[_token],\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  tokenContract\n    .approve(hypeAddress, tokenWei)\n    .then((tx) => tx.wait())\n    .then((receipt) => {\n      const payload = isToken0\n        ? { isToken0Approved: true }\n        : { isToken1Approved: true };\n\n      State.update(payload);\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        loadingMsg: error,\n      });\n    });\n};\n\nconst handleDeposit = () => {\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Depositing...\",\n  });\n\n  const token0Wei = ethers.utils.parseUnits(amount0, decimals0);\n  const token1Wei = ethers.utils.parseUnits(amount1, decimals1);\n\n  const proxyAbi = [\n    \"function deposit(uint256, uint256,address,address,uint256[4] memory)  external returns (uint256)\",\n  ];\n\n  const proxyContract = new ethers.Contract(\n    proxyAddress,\n    proxyAbi,\n    Ethers.provider().getSigner()\n  );\n\n  proxyContract\n    .deposit(token0Wei, token1Wei, sender, hypeAddress, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      const { refetch } = props;\n      if (refetch) refetch();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n    });\n};\n\nconst handleWithdraw = () => {\n  State.update({\n    isLoading: true,\n    isError: false,\n    loadingMsg: \"Withdrawing...\",\n  });\n\n  const lpWeiAmount = ethers.utils.parseUnits(lpAmount, 18);\n  const abi = [\n    \"function withdraw(uint256, address, address,uint256[4] memory) external returns (uint256, uint256)\",\n  ];\n\n  const hypeContract = new ethers.Contract(\n    hypeAddress,\n    abi,\n    Ethers.provider().getSigner()\n  );\n\n  hypeContract\n    .withdraw(lpWeiAmount, sender, sender, [0, 0, 0, 0])\n    .then((tx) => {\n      return tx.wait();\n    })\n    .then((receipt) => {\n      State.update({\n        isLoading: false,\n        isPostTx: true,\n      });\n\n      setTimeout(() => State.update({ isPostTx: false }), 10_000);\n\n      const { refetch } = props;\n      if (refetch) refetch();\n    })\n    .catch((error) => {\n      State.update({\n        isError: true,\n        isLoading: false,\n        loadingMsg: error,\n      });\n    });\n};\n\nconst isInSufficient =\n  Number(amount0) > Number(balances[token0]) ||\n  Number(amount1) > Number(balances[token1]);\n\nconst isWithdrawInsufficient = Number(lpAmount) > Number(lpBalance);\n\nreturn (\n  <VStack>\n    <Wrapper>\n      <Tab>\n        <TabItem isActive={isDeposit} onClick={() => changeMode(true)}>\n          Deposit\n        </TabItem>\n        <TabItem isActive={!isDeposit} onClick={() => changeMode(false)}>\n          Withdraw\n        </TabItem>\n      </Tab>\n      {isDeposit ? (\n        <SubWrapper>\n          <InputWrapper>\n            <span>Amount of {token0}</span>\n            <Input\n              value={amount0}\n              type=\"number\"\n              onChange={(e) => handleToken0Change(e.target.value)}\n            />\n            <MaxButton onClick={() => handleMax(true)}>Max</MaxButton>\n            <span>Balance: {balances[token0]}</span>\n          </InputWrapper>\n          <InputWrapper>\n            <span>Amount of {token1}</span>\n            <Input\n              value={amount1}\n              type=\"number\"\n              onChange={(e) => handleToken1Change(e.target.value)}\n            />\n            <MaxButton onClick={() => handleMax(false)}>Max</MaxButton>\n            <span>Balance: {balances[token1]}</span>\n          </InputWrapper>\n          <VStack>\n            {isLoading && <Comment isError={isError}>{loadingMsg}</Comment>}\n            {isInSufficient && <Button disabled>\"InSufficient Balance\"</Button>}\n            {!isInSufficient &&\n              (isToken0Approved && isToken1Approved ? (\n                <Button\n                  disabled={isLoading || !amount0 || !amount1}\n                  onClick={handleDeposit}\n                >\n                  {isLoading ? (\n                    <Spinner className=\"ph-bold ph-circle-notch\" />\n                  ) : (\n                    \"Deposit\"\n                  )}\n                </Button>\n              ) : (\n                <HStack>\n                  <Button\n                    disabled={isToken0Approved}\n                    onClick={() => handleApprove(true)}\n                  >\n                    {isToken0Approved ? \"Approved\" : `Approve ${token0}`}\n                  </Button>\n                  <Button\n                    disabled={isToken1Approved}\n                    onClick={() => handleApprove(false)}\n                  >\n                    {isToken1Approved ? \"Approved\" : `Approve ${token1}`}\n                  </Button>\n                </HStack>\n              ))}\n          </VStack>\n        </SubWrapper>\n      ) : (\n        <SubWrapper>\n          <InputWrapper>\n            <span>\n              Amount of {token0}-{token1}\n            </span>\n            <Input\n              value={lpAmount}\n              type=\"number\"\n              onChange={(e) => handleLPChange(e.target.value)}\n            />\n            <MaxButton onClick={() => handleLPChange(lpBalance)}>Max</MaxButton>\n            <span>Balance: {lpBalance}</span>\n          </InputWrapper>\n          <VStack>\n            {isLoading && <Comment isError={isError}>{loadingMsg}</Comment>}\n            <Button\n              disabled={isWithdrawInsufficient || isLoading || !lpAmount}\n              onClick={handleWithdraw}\n            >\n              {isLoading ? (\n                <Spinner className=\"ph-bold ph-circle-notch\" />\n              ) : (\n                <>\n                  {isWithdrawInsufficient ? \"InSufficient Balance\" : \"Withdraw\"}\n                </>\n              )}\n            </Button>\n          </VStack>\n        </SubWrapper>\n      )}\n    </Wrapper>\n    {isPostTx && (\n      <Info>\n        If you dont see the updated balance in the table after 1 minute, please\n        click the refresh button above.\n      </Info>\n    )}\n  </VStack>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/gamma-zkevm-vault", "fact_widget_deployments_id": "ae25078884c590933345bf666ed320f8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}