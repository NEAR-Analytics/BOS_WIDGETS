{"tx_hash": "H3TXhVBNNC2zNjvn5Wi2eyb8ryV4C5gzibSd5Hp3U3XB", "action_id_social": "3i1Zusc82BmQzAfaWvmA9fCriyckm6fxkEcBfnXR2j3T-0-widget", "block_id": 103459072, "block_timestamp": "2023-10-15T20:43:38.215Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "1xDapp", "source_code": "// import React from 'react';\n\n// function YourComponent() {\nconst state = {\n  title: \"\",\n  description: \"\",\n  image: { cid: \"\" },\n  sender: \"\",\n  selectedChain: \"0\", // Default selected chain\n};\n\nlet displayCode = 1; // Variable to determine which code to display (1 for the first code, 2 for the second code)\n\nconst toggleCode = (codeNumber) => {\n  displayCode = codeNumber;\n  renderComponent();\n};\n\nconst auroraCOntract = \"0xe53bC42B6b25a1d548B73636777a0599Fd27fE5c\";\nconst polygonContract = \"0x436AEceaEeC57b38a17Ebe71154832fB0fAFF878\";\nconst celoContract = \"0xC291846A587cf00a7CC4AF0bc4EEdbC9c3340C36\";\nconst avaxContract = \"0x43dBdfcAADD0Ea7aD037e8d35FDD7c353B5B435b\";\nconst arbitrumContract = \"0x959a2945185Ec975561Ac0d0b23F03Ed1b267925\";\nconst nearContract = \"genadrop.nftgen.near\";\nconst mintSingle = [\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\n];\nlet accountId = context.accountId;\nconst contractAddresses = {\n  137: [polygonContract, \"Polygon\"],\n  1313161554: [auroraCOntract, \"Aurora\"],\n  42220: [celoContract, \"Celo\"],\n  43114: [avaxContract, \"Avalanche\"],\n  42161: [arbitrumContract, \"Arbitrum\"],\n  0: [nearContract, \"Near\"],\n};\nconst chains = [\n  {\n    id: \"137\",\n    name: \"Polygon\",\n  },\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n  },\n  {\n    id: \"42220\",\n    name: \"Celo\",\n  },\n  {\n    id: \"43114\",\n    name: \"Avax\",\n  },\n  {\n    id: \"42161\",\n    name: \"Arbitrum\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n  },\n];\n\nconst handleMint = () => {\n  console.log(\"it's here\", state.title && state.description && state.image.cid);\n  if (!(state.title && state.description && state.image.cid)) {\n    return;\n  }\n  if (state.selectedChain == \"0\") {\n    const gas = 200000000000000;\n    const deposit = 10000000000000000000000;\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      const cid = res.body.cid;\n      const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n      console.log(\"in the promise\", res, Id);\n      Near.call([\n        {\n          contractName: \"genadrop-contract.nftgen.near\",\n          methodName: \"nft_mint\",\n          args: {\n            token_id: `${Date.now()}`,\n            metadata: {\n              title: state.title,\n              description: state.description,\n              media: `https://ipfs.io/ipfs/${state.image.cid}`,\n              reference: `ipfs://${cid}`,\n            },\n            receiver_id: accountId,\n          },\n          gas: gas,\n          deposit: deposit,\n        },\n      ]);\n    });\n    return;\n  }\n  console.log(\"passed checks\");\n  let networkId = Ethers.provider()._network.chainId;\n\n  const CA = contractAddresses[state.selectedChain[0] || \"137\"];\n\n  const contract = new ethers.Contract(\n    CA,\n    mintSingle,\n    Ethers.provider().getSigner()\n  );\n  const metadata = {\n    name: state.title,\n    description: state.description,\n    properties: [],\n    image: `ipfs://${state.image.cid}`,\n  };\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: metadata,\n  }).then((res) => {\n    const cid = res.body.cid;\n    const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n    console.log(\"in the promise\", res, Id);\n    contract\n      .mint(state.sender, Id, 1, `ipfs://${cid}`, \"0x\")\n      .then((transactionHash) => transactionHash.wait())\n      .then((ricit) => {\n        console.log(\"receipt::\", ricit);\n      });\n  });\n};\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  console.log(\"accounts:\", accounts, Ethers.provider(), ethers);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    Ethers.provider()\n      .getNetwork()\n      .then((data) => {\n        State.update({\n          selectedChain: data.chainId,\n        });\n      });\n  }\n\n  if (accountId) {\n    State.update({ sender: accountId });\n    State.update({\n      selectedChain: \"0\",\n    });\n  }\n}\nState.init({\n  title: \"\",\n  description: \"\",\n});\nconst onChangeTitle = (title) => {\n  State.update({\n    title,\n  });\n};\n\nconst handleChainChange = (event) => {\n  console.log(\n    \"get what we doing:\",\n    event.target.value,\n    event.target.value == \"0\",\n    !accountId\n  );\n  if (event.target.value == \"0\") {\n    if (!accountId) {\n      console.log(\"not what we thought,:\", accountId);\n      return;\n    }\n    State.update({\n      selectedChain: event.target.value,\n    });\n  }\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0x\" + Number(event.target.value).toString(16),\n    },\n  ]).then((data) => console.log(\"done!!!\", data));\n  console.log(\"what happens after\");\n  State.update({\n    selectedChain: event.target.value,\n  });\n  console.log(\"afters\", state.selectedChain);\n};\n\nconst onChangeDesc = (description) => {\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\n  State.update({\n    description,\n  });\n};\n// if (state.sender === undefined) {\n//   console.log(\"of course it's undefined\", ethers);\n//   const accounts = Ethers.send(\"eth_requestAccounts\", []);\n//   console.log(\"account\", accounts);\n//   if (accounts.length) {\n//     State.update({ sender: accounts[0] });\n//     console.log(\"set sender\", accounts[0]);\n//   }\n// }\n\nconst sender = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!sender) return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nconst erc20Abi = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!erc20Abi.ok) {\n  return \"loading\";\n}\n\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\ninitState({\n  token: \"\",\n  tokenDecimals: \"\",\n  sendTo: \"\",\n  sender,\n  senderBalance: \"0\",\n  receiverBalance: \"0\",\n  receiver: \"\",\n  amount: \"1\",\n});\n\nconst tokens = {\n  \"Select Token\": \"\",\n  USDT: \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n  DAI: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  USDC: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n  MKR: \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\",\n};\n\nconst tokensMenuItems = Object.keys(tokens).map((token) => (\n  <option value={tokens[token]}>{token}</option>\n));\n\nconst setSendTo = (sendTo) => {\n  const receiver = Ethers.resolveName(sendTo);\n  State.update({ sendTo, receiver: receiver ?? \"\" });\n  refreshBalances();\n};\n\nconst setToken = (token) => {\n  State.update({ token });\n  getTokenDecimals();\n};\n\nconst getTokenBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(state.tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};\n\nconst getTokenDecimals = () => {\n  const encodedData = iface.encodeFunctionData(\"decimals\", []);\n\n  return Ethers.provider()\n    .call({\n      to: state.token,\n      data: encodedData,\n    })\n    .then((tokenDecimals) => {\n      State.update({ tokenDecimals: parseInt(Number(tokenDecimals)) });\n      refreshBalances();\n    });\n};\n\nconst refreshBalances = () => {\n  getTokenBalance(state.sender).then((value) => {\n    State.update({ senderBalance: value });\n  });\n\n  getTokenBalance(state.receiver).then((value) => {\n    State.update({ receiverBalance: value });\n  });\n};\n\nconst sendTokens = () => {\n  const erc20 = new ethers.Contract(\n    state.token,\n    erc20Abi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(state.amount, state.tokenDecimals);\n\n  erc20.transfer(state.receiver, amount);\n\n  console.log(\"transactionHash is \" + transactionHash);\n};\n\nconst renderComponent = () => {\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}>1xDapp</h1>\n      <div>\n        <button onClick={() => toggleCode(1)}>Mint NFT</button>\n        <button onClick={() => toggleCode(2)}>Transfer Tokens</button>\n      </div>\n      {displayCode === 1 && (\n        <div\n          style={{\n            border: \"5px dotted #ccc\",\n            margin: \"20px 0\",\n            padding: \"10px\",\n          }}\n        >\n          <div>\n            <div>Mint your NFT on NEAR</div>\n            <div>\n              Title:\n              <input\n                type=\"text\"\n                onChange={(e) => onChangeTitle(e.target.value)}\n              />\n            </div>\n            <div>\n              Description:\n              <input\n                type=\"text\"\n                onChange={(e) => onChangeDesc(e.target.value)}\n              />\n            </div>\n            <div className=\"flex-grow-1\">\n              <IpfsImageUpload\n                image={state.image}\n                className=\"btn btn-outline-secondary border-0 rounded-3\"\n              />\n            </div>\n            <div>\n              {state.image.cid && (\n                <div className=\"mt-3\">\n                  <h5>Preview:</h5>\n                  <img\n                    src={`https://ipfs.io/ipfs/` + state.image.cid}\n                    alt=\"Preview\"\n                    style={{ maxWidth: \"300px\" }}\n                  />\n                </div>\n              )}\n            </div>\n            <div>\n              {state.sender && Ethers.provider() ? (\n                <div className=\"form-group\">\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\n                  <select\n                    className=\"form-control\"\n                    value={state.selectedChain}\n                    onChange={handleChainChange}\n                  >\n                    {chains.map((chain) => (\n                      <option key={chain.id} value={chain.id}>\n                        {chain.name}\n                      </option>\n                    ))}\n                  </select>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary mt-3\"\n                    onClick={handleMint}\n                  >\n                    Mint to {contractAddresses[state.selectedChain][1]}\n                  </button>\n                </div>\n              ) : state.sender ? (\n                <div className=\"form-group\">\n                  <label htmlFor=\"chainSelect\">Select Chain</label>\n                  <select\n                    className=\"form-control\"\n                    value={state.selectedChain}\n                    onChange={handleChainChange}\n                  >\n                    {chains.map((chain) => (\n                      <option key={chain.id} value={chain.id}>\n                        {chain.name}\n                      </option>\n                    ))}\n                  </select>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary mt-3\"\n                    onClick={handleMint}\n                  >\n                    Mint to {contractAddresses[state.selectedChain][1]}\n                  </button>\n                  <div>\n                    <Web3Connect\n                      className=\"btn mt-3\"\n                      connectLabel=\"Connect with Ethereum Wallet\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <Web3Connect\n                  className=\"btn mt-3\"\n                  connectLabel=\"Connect with Wallet\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {displayCode === 1 && (\n        <div\n          style={{\n            border: \"5px dotted #ccc\",\n            margin: \"20px 0\",\n            padding: \"10px\",\n          }}\n        >\n          <h3>Transfer tokens</h3>\n          <div class=\"mb-3\">\n            <label for=\"selectToken\">Select token</label>\n            <select\n              class=\"form-select\"\n              id=\"selectToken\"\n              onChange={(e) => {\n                setToken(e.target.value);\n              }}\n            >\n              {tokensMenuItems}\n            </select>\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"send-to\" class=\"form-label\">\n              Recepient address\n            </label>\n            <input\n              value={state.sendTo}\n              class=\"form-control\"\n              id=\"send-to\"\n              placeholder=\"rahulinweb.eth\"\n              onChange={(e) => setSendTo(e.target.value)}\n            />\n            {state.receiver && (\n              <div class=\"text-secondary mt-3\">\n                Resolved to {state.receiver}\n              </div>\n            )}\n            {state.receiverBalance != \"0\" && (\n              <div class=\"text-secondary mt-3\">\n                Receiver's balance: {state.receiverBalance}\n              </div>\n            )}\n\n            {state.senderBalance != \"0\" && (\n              <div class=\"text-secondary mt-3\">\n                My balance: {state.senderBalance}\n              </div>\n            )}\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"amount\" class=\"form-label\">\n              Enter the amount\n            </label>\n            <input\n              value={state.amount}\n              class=\"form-control\"\n              id=\"amount\"\n              placeholder=\"\"\n              onChange={(e) => State.update({ amount: e.target.value })}\n            />\n          </div>\n          <div class=\"mb-3\">\n            <button onClick={sendTokens}>Send</button>\n          </div>\n        </div>\n      )}\n      {displayCode === 1 && (\n        <div\n          style={{\n            border: \"px dotted #ccc\",\n            margin: \"20px 0\",\n            padding: \"10px\",\n          }}\n        >\n          <Widget\n            src=\"ref-admin.near/widget/ZKEVMSwap.zkevm-bridge-ui\"\n            props={{\n              ...props,\n              onConfirm,\n              onUpdateToken,\n              onChangeAmount,\n              tokens,\n              chainId,\n              updateChainId: (chainId) => State.update(chainId),\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nreturn renderComponent();\n// }\n\n// export default YourComponent;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/1xDapp", "fact_widget_deployments_id": "b94a67bb79448a45997b045e8e966f14", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}