{"tx_hash": "A2WyuR3XMwYWeMJYdXJQdnVSBJk4d5ThcqCdfh8GgxN6", "action_id_social": "8rNcArQ4xXRjj5qPMangmZHgkR5N2AkfWxobwo1bMDRX-0-widget", "block_id": 91454723, "block_timestamp": "2023-05-09T12:29:51.170Z", "signer_id": "relayer.pagodaplatform.near", "widget_name": "NiftyID", "source_code": "State.init({\n  contractName: \"marketplace.paras.near\",\n  daysRange: 7, // 7, 14, 30, ... or 0 (all time),\n  diagramKey: \"unique_users\", // unique_users, new_users or tx_count\n});\n\nconst Container = styled.div`\n    @import url('https://fonts.googleapis.com/css2?family=Figtree:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\n`;\n\nconst ContractSearch = styled.div`\n    display: flex;\n    direction: row;\n    height: 40px;\n    width: 100%;\n    font-family: \"Inter\";\n    font-size: 24px;\n    margin-bottom: 10px;\n    gap: 10px;\n    padding: 0.5rem;\n    border-radius: 0.25rem;\n    border: none;\n    outline: none;\n    font-size: 1rem;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n    transition: all 0.2s ease-in-out;\n\n    &:focus {\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nconst ContractSearchIcon = styled.div`\n    width: 20px;\n    height: 20px;\n`;\n\nconst TilesRow = styled.div`\n    display: flex;\n    align-items: display-start;\n    direction: row;\n    justify-content: space-between;\n    gap: 50px;\n`;\n\nconst Tile = styled.div`\n    height: 160px;\n    width: 100%;\n    padding: 20px;\n    background-color: rgb(255, 255, 255);\n    color: rgb(17, 25, 39);\n    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    box-shadow: rgba(0, 0, 0, 0.08) 0px 1px 5px;\n    overflow: hidden;\n    display: flex;\n    direction: row;\n`;\n\nconst ColLeft = styled.div`\n    width: 80%;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst ColRight = styled.div`\n    width: 20%;\n`;\n\nconst TileName = styled.div`\n    font-family: Inter;\n    color: #6C737F;\n    font-size: 14px;\n    font-weight: bold;\n`;\n\nconst StatNumber = styled.div`\n    font-family: \"Inter\";\n    color: #111927;\n    font-size: 48px;\n    font-weight: 500;\n`;\n\nconst BottomRow = styled.div`\n    display: flex;\n    direction: row;\n    font-family: Inter;\n    font-size: 14px;\n    gap: 10px;\n`;\n\nconst PercentChange = styled.div`\n    //(green for \u2191) color: #3dc699;\n    color: #f47269;\n`;\n\nconst Label = styled.div`\n    color: #6C737F;\n`;\n\nconst TileIcon = styled.div`\n    width: 60px;\n    height: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 99999px;\n`;\n\nconst Icon = styled.div`\n    width: 40px;\n    height: 40px;\n    filter: invert(100%);\n`;\n\nconst Title = styled.div`\n    font-family: Inter;\n    color: #6C737F;\n    font-size: 24px;\n    font-weight: bold;\n    margin: 20px;\n`;\n\nconst ChartNavigation = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n`;\n\nconst ButtonsRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 10px;\n`;\n\nconst Button = styled.div`\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background-color: #f8f9fa;\n    outline: 0px;\n    border: 0px currentcolor;\n    margin: 0px;\n    cursor: pointer;\n    font-family: Inter;\n    font-size: 0.875rem;\n    font-weight: 600;\n    min-width: 64px;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    border-radius: 12px;\n    padding: 9px 16px;\n\n    &:active {\n    background-color: #6366f1;\n    color: #ffffff;\n    }\n`;\n\nconst response = fetch(\n  `https://api.pikespeak.ai/contract-analysis/metrics/${state.contractName}`,\n\n  {\n    headers: {\n      \"x-api-key\": \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\",\n    },\n\n    subscribe: true,\n  }\n);\n\nconst lastData = response && response.body[response.body.length - 1];\n\nconst yesterdayData = response && response.body[response.body.length - 2];\n\nlet uniqueUsers;\nlet newUsers;\nlet transitionsCount;\nlet uniqueUsersSign;\nlet uniqueUsersDiffPercent;\nlet newUsersSign;\nlet newUsersDiffPercent;\nlet transitionsSign;\nlet transitionsDiffPercent;\n\nif (response) {\n  uniqueUsers = lastData ? lastData.unique_users : 0;\n  newUsers = lastData ? lastData.new_users : 0;\n  transitionsCount = lastData ? lastData.tx_count : 0;\n  if (parseInt(lastData.unique_users) > parseInt(yesterdayData.unique_users)) {\n    uniqueUsersSign = \"+\";\n\n    uniqueUsersDiffPercent =\n      100 -\n      Math.round(\n        (parseInt(yesterdayData.unique_users) /\n          parseInt(lastData.unique_users)) *\n          100\n      );\n  } else {\n    uniqueUsersSign = \"-\";\n\n    uniqueUsersDiffPercent =\n      100 -\n      Math.round(\n        (parseInt(lastData.unique_users) /\n          parseInt(yesterdayData.unique_users)) *\n          100\n      );\n  }\n\n  if (parseInt(lastData.new_users) > parseInt(yesterdayData.new_users)) {\n    newUsersSign = \"+\";\n\n    newUsersDiffPercent =\n      100 -\n      Math.round(\n        (parseInt(yesterdayData.new_users) / parseInt(lastData.new_users)) * 100\n      );\n  } else {\n    newUsersSign = \"-\";\n\n    newUsersDiffPercent =\n      100 -\n      Math.round(\n        (parseInt(lastData.new_users) / parseInt(yesterdayData.new_users)) * 100\n      );\n  }\n\n  if (parseInt(lastData.tx_count) > parseInt(yesterdayData.tx_count)) {\n    transitionsSign = \"+\";\n\n    transitionsDiffPercent =\n      100 -\n      Math.round(\n        (parseInt(yesterdayData.tx_count) / parseInt(lastData.tx_count)) * 100\n      );\n  } else {\n    transitionsSign = \"-\";\n\n    transitionsDiffPercent =\n      100 -\n      Math.round(\n        (parseInt(lastData.tx_count) / parseInt(yesterdayData.tx_count)) * 100\n      );\n  }\n}\n\nconst dataSlice = response\n  ? state.daysRange === 0\n    ? response.body\n    : response.body.slice(state.daysRange * -1)\n  : [];\n\nconst data = dataSlice.map((el) => {\n  return {\n    label: new Date(Date.parse(el.day)).toLocaleString(\"en-US\").split(\",\")[0],\n    value: el[state.diagramKey],\n  };\n});\n\nconst chartWidth = 650;\nconst chartHeight = 325;\nconst chartMargin = 60;\nconst tickSize = 5;\n\nconst maxDataValue = Math.max(...data.map((item) => item.value));\n\nconst xScale = (chartWidth - chartMargin * 2) / (data.length - 1);\n\nconst yScale = (chartHeight - chartMargin * 2) / maxDataValue;\n\nconst points = data.map((item, index) => ({\n  x: chartMargin + index * xScale,\n  y: chartHeight - chartMargin - item.value * yScale,\n}));\n\nconst path =\n  `M ${points[0].x} ${points[0].y} ` +\n  points\n    .slice(1)\n    .map((point) => `L ${point.x} ${point.y}`)\n    .join(\" \");\n\nconst xTicks = data.map((item, index) => ({\n  x: chartMargin + index * xScale,\n  y: chartHeight - chartMargin + tickSize,\n  label: item.label,\n}));\n\nconst yTicks = [...Array(6).keys()].map((index) => ({\n  x: chartMargin - tickSize,\n  y: chartHeight - chartMargin - (index * (chartHeight - chartMargin * 2)) / 5,\n  label: (index * maxDataValue) / 5,\n}));\n\nconst viewBox = `0 0 ${chartWidth} ${chartHeight}`;\n\nlet xTicksFontSize;\nswitch (state.daysRange) {\n  case 7:\n    xTicksFontSize = 0.8;\n    break;\n  case 14:\n    xTicksFontSize = 0.5;\n    break;\n  case 30:\n    xTicksFontSize = 0.45;\n    break;\n  default:\n    xTicksFontSize = 0.1;\n}\n\nlet diagramFill;\nswitch (state.diagramKey) {\n  case \"unique_users\":\n    diagramFill = \"#6366f1\";\n    break;\n  case \"new_users\":\n    diagramFill = \"#10b981\";\n    break;\n  case \"tx_count\":\n    diagramFill = \"#f79009\";\n    break;\n}\n\nreturn (\n  <Container>\n    <ContractSearch>\n      <ContractSearchIcon>\n        <img\n          src=\"https://img.icons8.com/?size=512&id=100947&format=png\"\n          height=\"100%\"\n          width=\"100%\"\n        />\n      </ContractSearchIcon>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter contract name...\"\n        value={state.contractName}\n        onChange={(e) => State.update({ contractName: e.target.value })}\n      />\n    </ContractSearch>\n    <Title>Today</Title>\n    {response ? (\n      <>\n        <TilesRow>\n          <Tile>\n            <ColLeft>\n              <TileName>UNIQUE USERS</TileName>\n\n              <StatNumber>{uniqueUsers}</StatNumber>\n\n              <BottomRow>\n                <PercentChange\n                  style={{\n                    color: uniqueUsersSign == \"+\" ? \"#3dc699\" : \"#f47269\",\n                  }}\n                >\n                  {uniqueUsersSign == \"+\" ? \"\u2191\" : \"\u2193\"}\n                  {uniqueUsersDiffPercent}%\n                </PercentChange>\n\n                <Label>Since yesterday</Label>\n              </BottomRow>\n            </ColLeft>\n\n            <ColRight>\n              <TileIcon style={{ backgroundColor: \"#6366f1\" }}>\n                <Icon>\n                  <img\n                    src=\"https://img.icons8.com/ios-glyphs/256/user--v1.png\"\n                    height=\"100%\"\n                    width=\"100%\"\n                  />\n                </Icon>\n              </TileIcon>\n            </ColRight>\n          </Tile>\n\n          <Tile>\n            <ColLeft>\n              <TileName>NEW USERS</TileName>\n\n              <StatNumber>{newUsers}</StatNumber>\n\n              <BottomRow>\n                <PercentChange\n                  style={{\n                    color: newUsersSign == \"+\" ? \"#3dc699\" : \"#f47269\",\n                  }}\n                >\n                  {newUsersSign == \"+\" ? \"\u2191\" : \"\u2193\"}\n                  {newUsersDiffPercent}%\n                </PercentChange>\n\n                <Label>Since yesterday</Label>\n              </BottomRow>\n            </ColLeft>\n\n            <ColRight>\n              <TileIcon style={{ backgroundColor: \"#10b981\" }}>\n                <Icon>\n                  <img\n                    src=\"https://img.icons8.com/material/256/add-user-male--v1.png\"\n                    height=\"100%\"\n                    width=\"100%\"\n                  />\n                </Icon>\n              </TileIcon>\n            </ColRight>\n          </Tile>\n\n          <Tile>\n            <ColLeft>\n              <TileName>TRANSACTION COUNT</TileName>\n\n              <StatNumber>{transitionsCount}</StatNumber>\n\n              <BottomRow>\n                <PercentChange\n                  style={{\n                    color: transitionsSign == \"+\" ? \"#3dc699\" : \"#f47269\",\n                  }}\n                >\n                  {transitionsSign == \"+\" ? \"\u2191\" : \"\u2193\"}\n                  {transitionsDiffPercent}%\n                </PercentChange>\n\n                <Label>Since yesterday</Label>\n              </BottomRow>\n            </ColLeft>\n\n            <ColRight>\n              <TileIcon style={{ backgroundColor: \"#f79009\" }}>\n                <Icon>\n                  <img\n                    src=\"https://img.icons8.com/material/256/purchase-order--v1.png\"\n                    height=\"100%\"\n                    width=\"100%\"\n                  />\n                </Icon>\n              </TileIcon>\n            </ColRight>\n          </Tile>\n        </TilesRow>\n\n        <div>\n          <Title>Historical Data</Title>\n\n          <ChartNavigation>\n            <ButtonsRow>\n              <Button\n                style={{\n                  backgroundColor:\n                    state.daysRange === 7 ? \"#6366f1\" : \"#f8f9fa\",\n                  color: state.daysRange === 7 ? \"#fff\" : \"#000\",\n                }}\n                onClick={() => State.update({ daysRange: 7 })}\n              >\n                7 days\n              </Button>\n\n              <Button\n                style={{\n                  backgroundColor:\n                    state.daysRange === 14 ? \"#6366f1\" : \"#f8f9fa\",\n                  color: state.daysRange === 14 ? \"#fff\" : \"#000\",\n                }}\n                onClick={() => State.update({ daysRange: 14 })}\n              >\n                14 days\n              </Button>\n\n              <Button\n                style={{\n                  backgroundColor:\n                    state.daysRange === 30 ? \"#6366f1\" : \"#f8f9fa\",\n                  color: state.daysRange === 30 ? \"#fff\" : \"#000\",\n                }}\n                onClick={() => State.update({ daysRange: 30 })}\n              >\n                30 days\n              </Button>\n            </ButtonsRow>\n\n            <ButtonsRow>\n              <Button\n                style={{\n                  backgroundColor:\n                    state.diagramKey === \"unique_users\" ? \"#6366f1\" : \"#f8f9fa\",\n                  color: state.diagramKey === \"unique_users\" ? \"#fff\" : \"#000\",\n                }}\n                onClick={() => State.update({ diagramKey: \"unique_users\" })}\n              >\n                Unique users\n              </Button>\n\n              <Button\n                style={{\n                  backgroundColor:\n                    state.diagramKey === \"new_users\" ? \"#10b981\" : \"#f8f9fa\",\n                  color: state.diagramKey === \"new_users\" ? \"#fff\" : \"#000\",\n                }}\n                onClick={() => State.update({ diagramKey: \"new_users\" })}\n              >\n                New users\n              </Button>\n\n              <Button\n                style={{\n                  backgroundColor:\n                    state.diagramKey === \"tx_count\" ? \"#f79009\" : \"#f8f9fa\",\n                  color: state.diagramKey === \"tx_count\" ? \"#fff\" : \"#000\",\n                }}\n                onClick={() => State.update({ diagramKey: \"tx_count\" })}\n              >\n                Transaction count\n              </Button>\n            </ButtonsRow>\n          </ChartNavigation>\n\n          <svg\n            viewBox={viewBox}\n            preserveAspectRatio=\"xMidYMid meet\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <path d={path} fill=\"none\" stroke={diagramFill} strokeWidth=\"2\" />\n\n            {points.map((point, index) => (\n              <circle\n                key={index}\n                cx={point.x}\n                cy={point.y}\n                r=\"5\"\n                fill={diagramFill}\n              />\n            ))}\n\n            {xTicks.map((tick, index) => (\n              <g key={index}>\n                <line\n                  x1={tick.x}\n                  y1={tick.y}\n                  x2={tick.x}\n                  y2={tick.y - tickSize}\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n\n                <text\n                  x={tick.x}\n                  y={tick.y + 20}\n                  fontSize={`${xTicksFontSize}em`}\n                  transform={`rotate(-45, ${tick.x}, ${tick.y + 20})`}\n                  textAnchor=\"middle\"\n                >\n                  {tick.label}\n                </text>\n              </g>\n            ))}\n\n            {yTicks.map((tick, index) => (\n              <g key={index}>\n                <line\n                  x1={tick.x - tickSize}\n                  y1={tick.y}\n                  x2={tick.x}\n                  y2={tick.y}\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n\n                <text x={tick.x - tickSize - 5} y={tick.y} textAnchor=\"end\">\n                  {tick.label}\n                </text>\n              </g>\n            ))}\n\n            {points.map((point, index) => (\n              <line\n                key={index}\n                x1={point.x}\n                y1={point.y}\n                x2={point.x}\n                y2={chartHeight - chartMargin}\n                stroke=\"lightgray\"\n                strokeWidth=\"1\"\n                strokeDasharray=\"5, 5\"\n              />\n            ))}\n          </svg>\n        </div>\n      </>\n    ) : (\n      <h1>Loading...</h1>\n    )}\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/relayer.pagodaplatform.near/widget/NiftyID", "fact_widget_deployments_id": "a253ac83571acc54855c7f66f4d97cab", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}