{"tx_hash": "5oCfTcgiyqHdXZYLGYrBTZpaW8osVWJYkAmGYBEVNFFN", "action_id_social": "9AybH29nxvC7gDC11LkLQgWgRUS9dXXJH3EdxeTqCBjA-0-widget", "block_id": 104283244, "block_timestamp": "2023-10-27T01:34:39.059Z", "signer_id": "ad8383b55371a8f32ca19cfc47da0677dc2b556e6e074eba964c8797bc9ff47a", "widget_name": "boroughs.map", "source_code": "const API_URL = props.API_URL || \"\";\nconst ACCESS_TOKEN =\n  props.accessToken ||\n  \"pk.eyJ1IjoiZWpsYnJhZW0iLCJhIjoiY2xrbmIwaW53MGE0NTNtbGsydWd2MmpyZSJ9.m1ZfEqv2fGet2zblGknT8A\";\nconst styleUrl = props.styleUrl || \"mapbox://styles/mapbox/streets-v12\"; // see https://docs.mapbox.com/api/maps/styles/#mapbox-styles\nconst center = props.center || [-73.9899, 40.7367]; // starting position [lng, lat]\nconst zoom = props.zoom || 13.5; // starting zoom\nconst accountId = context.accountId;\nconst markers = props.markers || [];\nconst onMapClick = props.onMapClick || (() => {});\nconst onMarkerClick = props.onMarkerClick || (() => {});\nconst edit = props.edit || false;\n\nconst code = `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=1,user-scalable=no\">\n    \n    <link href=\"https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css\" rel=\"stylesheet\">\n    \n    <script src=\"https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js\"></script>\n    \n    <style>\n      body { margin: 0; padding: 0; }\n      #map { position: absolute; top: 0; bottom: 0; width: 100%; }\n\n      .marker {\n        background-image: url('https://i.ibb.co/w6QRm4h/Liberty-Map-Pin-Dark.png');\n        background-size: cover;\n        width: 30px;\n        height: 45px;\n        cursor: pointer;\n      }\n      \n      #mymarker {\n        background-image: url('https://i.ibb.co/w6QRm4h/Liberty-Map-Pin-Dark.png') !important;\n        // filter: invert(1);\n      }\n\n      h6 {\n        margin:0;\n        font-size: 16px;\n      }\n\n      .mapboxgl-popup-content{\n        background: rgb(25, 26, 26);\n        color: white;\n        border: 1px solid;\n        border-radius: 9px;\n        padding: 10px;\n      }\n\n      .mapboxgl-popup-close-button{\n        color: white;\n      }\n\n      .mapboxgl-ctrl-logo {\n        display: none !important;\n      }\n      a {\n        outline: 0;\n      }\n    </style>\n  </head>\n  <body>\n\n    <div id=\"map\"></div>\n\n    <script>\n    const accountId = \"${accountId}\";\n    const isEditActive = ${edit};\n    const markersByAccount = {};\n    let selectedMarkerElement = null;\n\n    mapboxgl.accessToken = \"${ACCESS_TOKEN}\";\n\n    const map = new mapboxgl.Map({\n        container: 'map', // container ID\n        style: '${styleUrl}',\n        center: [${center[0]}, ${center[1]}], \n        zoom: ${zoom}\n    });\n\n    function handleMarkerClick(marker) {\n      map.flyTo({\n        center: [marker.coordinates.lng, marker.coordinates.lat],\n        essential: true\n      });\n\n      if (selectedMarkerElement) {\n        selectedMarkerElement.style.boxShadow = '';\n      }\n\n      const markerInstance = markersByAccount[marker.accountId];\n      if (markerInstance) {\n          const el = markerInstance.getElement();\n          // el.style.boxShadow = '0px 0px 10px 3px rgba(0,0,0,0.5)';\n          selectedMarkerElement = el;\n      }\n  \n      // Post message with marker data\n      window.parent.postMessage({\n          handler: 'marker-click',\n          data: marker\n      }, '*');\n    }\n\n    // Function to populate markers to the map\n    function populateMarkers() {\n        const markersData = ${JSON.stringify(markers)};\n        markersData.forEach(marker => {\n\n          try {\n            const el = document.createElement('div');\n            el.className = 'marker';\n            el.dataset.accountId = marker.accountId;\n            if (marker.accountId === accountId) el.id = 'mymarker';\n\n            markersByAccount[marker.accountId] = new mapboxgl.Marker(el)\n                .setLngLat([marker.coordinates.lng, marker.coordinates.lat])\n                .addTo(map);\n            \n            el.addEventListener('click', () => {\n              event.stopPropagation();\n              handleMarkerClick(marker); \n            });\n          } catch (e) {\n            console.log(e);\n          }\n        });\n    }\n\n    populateMarkers();\n\n    map.on('click', function(event) {\n      const { lngLat } = event;\n\n      if (selectedMarkerElement) {\n        // selectedMarkerElement.style.boxShadow = '';\n        selectedMarkerElement = null;\n      }\n\n      if (accountId && isEditActive) {\n\n        if (markersByAccount[accountId]) {\n          markersByAccount[accountId].remove();\n        }\n          \n        const _el = document.getElementById(\"mymarker\");\n        const myel = _el ? _el : document.createElement('div');\n        myel.className = 'marker';\n        myel.id = 'mymarker';\n\n        const newMarker = new mapboxgl.Marker(myel)\n          .setLngLat([lngLat.lng, lngLat.lat])\n          .addTo(map);\n\n        markersByAccount[accountId] = newMarker;\n      }\n\n      window.parent.postMessage({\n        handler: 'map-click',\n        data: {\n          accountId,\n          coordinates: lngLat\n        }\n      }, '*');\n    });\n    </script>\n  </body>\n</html>\n  `;\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n\n  /* reset */\n  button,\n  fieldset,\n  input {\n    all: unset;\n  }\n`;\n\nreturn (\n  <Container>\n    <iframe\n      id=\"myMap\"\n      className=\"w-100 h-100\"\n      srcDoc={code}\n      onMessage={(e) => {\n        switch (e.handler) {\n          case \"map-click\": {\n            onMapClick(e.data);\n            break;\n          }\n          case \"marker-click\": {\n            onMarkerClick(e.data);\n            break;\n          }\n        }\n      }}\n    />\n  </Container>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/ad8383b55371a8f32ca19cfc47da0677dc2b556e6e074eba964c8797bc9ff47a/widget/boroughs.map", "fact_widget_deployments_id": "bb9c523707d75983befd57703a3826d5", "inserted_timestamp": "2023-10-27T03:25:02.909Z", "modified_timestamp": "2023-10-27T03:25:02.909Z", "__row_index": 0}