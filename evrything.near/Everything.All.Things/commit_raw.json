{"tx_hash": "72Kxmrwoheb6Ymsmr19NPR4ng6cD4q5y2ZHk8J792keN", "action_id_social": "9SmTmLdzDjJnZ8rC3i5UdtcZrnwstmu6CNRVvyC6fDT5-0-widget", "block_id": 87453982, "block_timestamp": "2023-03-16T23:02:54.413Z", "signer_id": "evrything.near", "widget_name": "Everything.All.Things", "source_code": "const ERROR_WIDGET = \"evrything.near/widget/Everything.Error\";\nconst LIMIT = 10;\nconst NUM_COLUMNS_SM = 1;\nconst NUM_COLUMNS_LG = 3;\n\nconst type = props.type;\n\nif (type === null) {\n  return (\n    <Widget\n      src={ERROR_WIDGET}\n      props={{\n        message: `provided type: \"${props.type}\" is not valid.`,\n      }}\n    />\n  );\n}\n\nState.init({\n  widgets: [],\n  cursor: 0,\n});\n\nconst loadThings = async () =>\n  asyncFetch(type.queries?.getAll.url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: type.queries?.getAll.query\n        .replace(\"LIMIT\", LIMIT)\n        .replace(\"OFFSET\", state.cursor),\n    }),\n  }).then((res) => {\n    if (res.body) {\n      const things = res.body.data?.findThings;\n\n      things.map((thing) => {\n        state.widgets.push(\n          <div key={thing.id}>\n            <Widget\n              src={\"evrything.near/widget/Everything.View.Thing\"}\n              props={{\n                thingId: thing.id,\n                type: Type.get(thing.type),\n                widget: type.widgets?.view,\n              }}\n            />\n          </div>\n        );\n      });\n\n      state.cursor = state.cursor + LIMIT;\n\n      State.update();\n    }\n  });\n\nreturn (\n  <InfiniteScroll\n    loadMore={loadThings}\n    hasMore={state.widgets.length % LIMIT === 0}\n  >\n    <Masonry breakpointCols={{ default: NUM_COLUMNS_LG, 800: NUM_COLUMNS_SM }}>\n      {state.widgets}\n    </Masonry>\n  </InfiniteScroll>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/evrything.near/widget/Everything.All.Things", "fact_widget_deployments_id": "73ab0ee4a95c93016207b2c4272b7f1b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}