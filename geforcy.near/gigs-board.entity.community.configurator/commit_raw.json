{"tx_hash": "BewXs4kE7qW3DxPbuq4s5WmFbk2bDY4rHJAKyQoz3KPp", "action_id_social": "Hf621BcZgUkQSwaipKaqkP8JzQu7F9fhaHuwfmLokA1q-0-widget", "block_id": 100986623, "block_timestamp": "2023-09-12T21:21:56.563Z", "signer_id": "geforcy.near", "widget_name": "gigs-board.entity.community.configurator", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/lib/struct\" */\nconst Struct = {\n  deepFieldUpdate: (\n    node,\n    { input, params, path: [nextNodeKey, ...remainingPath], via: toFieldValue }\n  ) => ({\n    ...node,\n\n    [nextNodeKey]:\n      remainingPath.length > 0\n        ? Struct.deepFieldUpdate(\n            Struct.typeMatch(node[nextNodeKey]) ||\n              Array.isArray(node[nextNodeKey])\n              ? node[nextNodeKey]\n              : {\n                  ...((node[nextNodeKey] ?? null) !== null\n                    ? { __archivedLeaf__: node[nextNodeKey] }\n                    : {}),\n                },\n\n            { input, path: remainingPath, via: toFieldValue }\n          )\n        : toFieldValue({\n            input,\n            lastKnownValue: node[nextNodeKey],\n            params,\n          }),\n  }),\n\n  isEqual: (input1, input2) =>\n    Struct.typeMatch(input1) && Struct.typeMatch(input2)\n      ? JSON.stringify(Struct.toOrdered(input1)) ===\n        JSON.stringify(Struct.toOrdered(input2))\n      : false,\n\n  toOrdered: (input) =>\n    Object.keys(input)\n      .sort()\n      .reduce((output, key) => ({ ...output, [key]: input[key] }), {}),\n\n  pick: (object, subsetKeys) =>\n    Object.fromEntries(\n      Object.entries(object ?? {}).filter(([key, _]) =>\n        subsetKeys.includes(key)\n      )\n    ),\n\n  typeMatch: (input) =>\n    input !== null && typeof input === \"object\" && !Array.isArray(input),\n};\n/* END_INCLUDE: \"core/lib/struct\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  create_community: ({ inputs }) =>\n    Near.call(devHubAccountId, \"create_community\", { inputs }),\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_account_community_permissions: ({ account_id, community_handle }) =>\n    Near.view(devHubAccountId, \"get_account_community_permissions\", {\n      account_id,\n      community_handle,\n    }) ?? null,\n\n  update_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"update_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  update_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"update_community_board\", { handle, board }),\n\n  update_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"update_community_github\", { handle, github }),\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities_metadata: () =>\n    Near.view(devHubAccountId, \"get_all_communities_metadata\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  useQuery: (name, params) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst Viewer = {\n  communityPermissions: ({ handle }) =>\n    DevHub.get_account_community_permissions({\n      account_id: context.accountId,\n      community_handle: handle,\n    }) ?? {\n      can_configure: false,\n      can_delete: false,\n    },\n\n  role: {\n    isDevHubModerator:\n      DevHub.has_moderator({ account_id: context.accountId }) ?? false,\n  },\n};\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst communityAccessControlFormatter = ({ admins, ...otherFields }) => ({\n  ...otherFields,\n  admins: admins.filter((string) => string.length > 0),\n});\n\nconst CommunityInformationSchema = {\n  handle: {\n    inputProps: {\n      min: 2,\n      max: 40,\n\n      placeholder:\n        \"Choose unique URL handle for your community. Example: zero-knowledge.\",\n\n      required: true,\n    },\n\n    label: \"URL handle\",\n    order: 3,\n  },\n\n  name: {\n    inputProps: {\n      min: 2,\n      max: 30,\n      placeholder: \"Community name.\",\n      required: true,\n    },\n\n    label: \"Name\",\n    order: 1,\n  },\n\n  tag: {\n    inputProps: {\n      min: 2,\n      max: 30,\n\n      placeholder:\n        \"Any posts with this tag will show up in your community feed.\",\n\n      required: true,\n    },\n\n    label: \"Tag\",\n    order: 4,\n  },\n\n  description: {\n    inputProps: {\n      min: 2,\n      max: 60,\n\n      placeholder:\n        \"Describe your community in one short sentence that will appear in the communities discovery page.\",\n\n      required: true,\n    },\n\n    label: \"Description\",\n    order: 2,\n  },\n};\n\nconst CommunityAboutSchema = {\n  bio_markdown: {\n    format: \"markdown\",\n\n    inputProps: {\n      min: 3,\n      max: 200,\n\n      placeholder:\n        \"Tell people about your community. This will appear on your community\u2019s homepage.\",\n    },\n\n    label: \"Bio\",\n    multiline: true,\n    order: 1,\n  },\n\n  twitter_handle: {\n    inputProps: { min: 2, max: 60 },\n    label: \"Twitter handle\",\n    order: 2,\n  },\n\n  github_handle: {\n    inputProps: { min: 2, max: 60 },\n    label: \"Github organization handle\",\n    order: 3,\n  },\n\n  telegram_handle: {\n    format: \"comma-separated\",\n    label: \"Telegram handles\",\n    order: 4,\n  },\n\n  website_url: {\n    inputProps: { min: 2, max: 60 },\n    label: \"Website\",\n    order: 5,\n  },\n};\n\nconst CommunityAccessControlSchema = {\n  admins: {\n    format: \"comma-separated\",\n    inputProps: { required: true },\n    label: \"Admins\",\n    order: 1,\n  },\n};\n\nconst CommunityWikiPageSchema = {\n  name: {\n    label: \"Name\",\n    order: 1,\n  },\n\n  content_markdown: {\n    format: \"markdown\",\n    label: \"Content\",\n    multiline: true,\n    order: 2,\n  },\n};\n\nconst CommunityConfigurator = ({ handle, link }) => {\n  State.init({\n    communityData: null,\n    hasUnsavedChanges: false,\n  });\n\n  const community = DevHub.useQuery(\"community\", { handle }),\n    permissions = Viewer.communityPermissions({ handle }),\n    isSynced = Struct.isEqual(state.communityData, community.data);\n\n  if (!state.hasUnsavedChanges && !community.isLoading && !isSynced) {\n    State.update((lastKnownState) => ({\n      ...lastKnownState,\n      communityData: community.data,\n      hasUnsavedChanges: false,\n    }));\n  }\n\n  const sectionSubmit = (sectionData) => {\n    State.update((lastKnownState) => {\n      const communityDataUpdate = {\n        ...Object.entries(sectionData).reduce(\n          (update, [propertyKey, propertyValue]) => ({\n            ...update,\n\n            [propertyKey]:\n              typeof propertyValue !== \"string\" ||\n              (propertyValue?.length ?? 0) > 0\n                ? propertyValue ?? null\n                : null,\n          }),\n\n          lastKnownState.communityData\n        ),\n      };\n\n      return {\n        ...lastKnownState,\n        communityData: communityDataUpdate,\n        hasUnsavedChanges: !Struct.isEqual(communityDataUpdate, community.data),\n      };\n    });\n  };\n\n  const changesSave = () =>\n    DevHub.update_community({ handle, community: state.communityData });\n\n  const onDelete = () => DevHub.delete_community({ handle });\n\n  return community.isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    <div className=\"d-flex flex-column align-items-center gap-4\">\n      {community.data === null ? (\n        <div\n          className=\"d-flex flex-column justify-content-center align-items-center w-100\"\n          style={{ height: 384 }}\n        >\n          <h2 className=\"h2\">{`Community with handle \"${handle}\" not found.`}</h2>\n        </div>\n      ) : (\n        <>\n          {widget(\"entity.community.branding-configurator\", {\n            isUnlocked: permissions.can_configure,\n            link,\n            onSubmit: sectionSubmit,\n            values: state.communityData,\n          })}\n\n          {widget(\"components.organism.configurator\", {\n            heading: \"Community information\",\n            data: state.communityData,\n            isSubform: true,\n            isUnlocked: permissions.can_configure,\n            onSubmit: sectionSubmit,\n            schema: CommunityInformationSchema,\n            submitLabel: \"Accept\",\n          })}\n\n          {widget(\"components.organism.configurator\", {\n            heading: \"About\",\n            data: state.communityData,\n            isSubform: true,\n            isUnlocked: permissions.can_configure,\n            onSubmit: sectionSubmit,\n            schema: CommunityAboutSchema,\n            submitLabel: \"Accept\",\n          })}\n\n          {widget(\"components.organism.configurator\", {\n            heading: \"Access control\",\n            data: state.communityData,\n            formatter: communityAccessControlFormatter,\n            isSubform: true,\n            isUnlocked: permissions.can_configure,\n            onSubmit: sectionSubmit,\n            schema: CommunityAccessControlSchema,\n            submitLabel: \"Accept\",\n          })}\n\n          {widget(\"components.organism.configurator\", {\n            heading: \"Wiki page 1\",\n            data: state.communityData?.wiki1,\n            isSubform: true,\n            isUnlocked: permissions.can_configure,\n            onSubmit: (value) => sectionSubmit({ wiki1: value }),\n            submitLabel: \"Accept\",\n            schema: CommunityWikiPageSchema,\n          })}\n\n          {widget(\"components.organism.configurator\", {\n            heading: \"Wiki page 2\",\n            data: state.communityData?.wiki2,\n            isSubform: true,\n            isUnlocked: permissions.can_configure,\n            onSubmit: (value) => sectionSubmit({ wiki2: value }),\n            submitLabel: \"Accept\",\n            schema: CommunityWikiPageSchema,\n          })}\n\n          {permissions.can_delete ? (\n            <div\n              className=\"d-flex justify-content-center gap-4 p-4 w-100\"\n              style={{ maxWidth: 896 }}\n            >\n              {widget(\"components.molecule.button\", {\n                classNames: { root: \"btn-lg btn-outline-danger border-none\" },\n                label: \"Delete community\",\n                onClick: onDelete,\n              })}\n            </div>\n          ) : null}\n\n          {permissions.can_configure && state.hasUnsavedChanges && (\n            <div\n              className=\"position-fixed end-0 bottom-0 bg-transparent pe-4 pb-4\"\n              style={{ borderTopLeftRadius: \"100%\" }}\n            >\n              {widget(\"components.molecule.button\", {\n                classNames: { root: \"btn-lg btn-success\" },\n                icon: { kind: \"svg\", variant: \"floppy-drive\" },\n                label: \"Save\",\n                onClick: changesSave,\n              })}\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nreturn CommunityConfigurator(props);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/gigs-board.entity.community.configurator", "fact_widget_deployments_id": "c77774e96589d835f8cb9b65c31a8ec1", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 20}