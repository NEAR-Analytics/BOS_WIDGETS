{"tx_hash": "8GdtRmV5S976AC5sRE8in8mNPdSNKZ9xShQoWph6BK7z", "action_id_social": "LAemtb9Y3T2KLSvGTwHD2XoA5xSqeaqVgRTajjnbBHj-0-widget", "block_id": 106219235, "block_timestamp": "2023-11-21T17:11:54.097Z", "signer_id": "geforcy.near", "widget_name": "devhub.page.admin", "source_code": "const {\n  hasModerator,\n  getFeaturedCommunities,\n  getRootMembers,\n  getAccessControlInfo,\n  setFeaturedCommunities,\n  getAllCommunitiesMetadata,\n} = VM.require(\"geforcy.near/widget/core.adapter.devhub-contract\");\n\nconst { Tile } =\n  VM.require(\"geforcy.near/widget/devhub.components.molecule.Tile\") ||\n  (() => <></>);\n\nconst { href } = VM.require(\"geforcy.near/widget/core.lib.url\");\n\nif (\n  !getFeaturedCommunities ||\n  !hasModerator ||\n  !getRootMembers ||\n  !href ||\n  !getAccessControlInfo ||\n  !setFeaturedCommunities ||\n  !getAllCommunitiesMetadata\n) {\n  return <p>Loading modules...</p>;\n}\n\nconst fc = getFeaturedCommunities();\n// The state will stay empty even after the data right data has been retrieved\nif (!fc) {\n  return <p>Loading featured communities...</p>;\n}\nconst featuredCommunityList = fc || [];\nconst allMetadata = getAllCommunitiesMetadata();\nconst accessControlInfo = getAccessControlInfo();\nconst rootMembers = getRootMembers();\nconst teamNames = Object.keys(rootMembers || {});\n\nconst isDevHubModerator = hasModerator({\n  account_id: context.accountId,\n});\n\nconst [alertMessage, setAlertMessage] = useState(\"\");\nconst [communityMessage, setCommunityMessage] = useState(\"\");\nconst [createTeam, setCreateTeam] = useState(false);\nconst [communityHandles, setCommunityHandles] = useState(\n  featuredCommunityList.map(({ handle }) => handle)\n);\nconst [newItem, setNewItem] = useState(\"\");\nconst [editMode, setEditMode] = useState(false);\nconst [previewConnect, setPreviewConnect] = useState(false);\n\nconst handleResetItems = () => {\n  setCommunityHandles(featuredCommunityList.map(({ handle }) => handle));\n};\n\nconst handleAddItem = () => {\n  if (!allMetadata.map(({ handle }) => handle).includes(newItem)) {\n    // Community does not exist\n    return setCommunityMessage(\n      \"This community handle does not exist, make sure you use an existing handle.\"\n    );\n  }\n  if (newItem) {\n    setCommunityHandles([...communityHandles, newItem]);\n    setNewItem(\"\");\n  }\n};\n\nconst handleDeleteItem = (index) => {\n  const updatedData = [...communityHandles];\n  updatedData.splice(index, 1);\n  setCommunityHandles(updatedData);\n};\n\nconst noPermissionBanner = (\n  <div\n    className=\"d-flex flex-column justify-content-center align-items-center\"\n    style={{ height: 384 }}\n  >\n    <h2 className=\"alert alert-danger\">\n      Your account does not have administration permissions.\n    </h2>\n  </div>\n);\n\nif (!isDevHubModerator) {\n  return noPermissionBanner;\n}\n\nfunction handleSubmit() {\n  if (communityHandles.length < 4) {\n    return setCommunityMessage(\"Can't set fewer than 4 communities\");\n  }\n  setFeaturedCommunities({ handles: communityHandles });\n}\n\nfunction createNewTeam({\n  teamName,\n  description,\n  label,\n  editPost,\n  useLabels,\n  members,\n}) {\n  let txn = [];\n\n  if (rootMembers.includes(`team:${teamName}`)) {\n    return setAlertMessage(\"This team name already exists\");\n  }\n  const allLabels = Object.keys(accessControlInfo.rules_list);\n  if (allLabels.includes(label)) {\n    return setAlertMessage(\"This label is already restricted by another team\");\n  }\n\n  let membersAndTeams = Object.keys(accessControlInfo.members_list);\n  members.forEach((member) => {\n    // if Contract panic member does not exist in the members_list\n    if (!membersAndTeams.includes(member)) {\n      // Add member\n      txn.push({\n        contractName: \"geforcy.near\",\n        methodName: \"add_member\",\n        args: {\n          member: member,\n          metadata: {\n            member_metadata_version: \"V0\",\n            description: \"\",\n            permissions: {},\n            children: [],\n            parents: [],\n          },\n        },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      });\n    }\n  });\n\n  // Check edit team\n  Near.call([\n    ...txn,\n    {\n      contractName: \"geforcy.near\",\n      methodName: \"add_member\",\n      args: {\n        member: `team:${teamName}`,\n        metadata: {\n          member_metadata_version: \"V0\",\n          description: description,\n          permissions: {\n            [label]: [\n              ...(editPost ? [\"edit-post\"] : []),\n              ...(useLabels ? [\"use-labels\"] : []),\n            ],\n          },\n          children: members,\n          parents: [],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nconst Item = styled.div`\n  padding: 10px;\n  margin: 5px;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  gap: 10px;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px;\n  text-align: left;\n`;\n\nconst CardGrid = styled.div`\n  width: 100%;\n  height: 100%;\n\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 3rem;\n\n  @media screen and (max-width: 1000px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n`;\n\nreturn (\n  <Container>\n    <div className=\"d-flex flex-column gap-4 p-4\">\n      {featuredCommunityList && (\n        <>\n          {editMode ? (\n            <>\n              <Widget\n                src=\"geforcy.near/widget/devhub.components.atom.Alert\"\n                props={{\n                  onClose: () => setCommunityMessage(\"\"),\n                  message: communityMessage,\n                }}\n              />\n              <Tile className=\"p-3\">\n                <h3> Manage featured communities</h3>\n                {communityHandles.map((item, index) => (\n                  <Item key={index}>\n                    <div className=\"flex-grow-1\">\n                      <Widget\n                        src=\"geforcy.near/widget/devhub.components.molecule.Input\"\n                        props={{\n                          className: \"flex-grow-1\",\n                          value: item,\n                          skipPaddingGap: true,\n                          placeholder: \"Community handle\",\n                          inputProps: {\n                            prefix: \"Community handle\",\n                            disabled: true,\n                          },\n                        }}\n                      />\n                    </div>\n                    <button\n                      className=\"btn btn-outline-danger\"\n                      onClick={() => handleDeleteItem(index)}\n                    >\n                      <i className=\"bi bi-trash-fill\" />\n                    </button>\n                  </Item>\n                ))}\n                {communityHandles.length < 5 && (\n                  <Item>\n                    <div className=\"flex-grow-1\">\n                      <Widget\n                        src=\"geforcy.near/widget/devhub.components.molecule.Input\"\n                        props={{\n                          className: \"flex-grow-1\",\n                          skipPaddingGap: true,\n                          onChange: (e) => setNewItem(e.target.value),\n                          value: newItem,\n                          placeholder: \"zero-knowledge\",\n                          inputProps: {\n                            prefix: \"Community handle\",\n                          },\n                        }}\n                      />\n                    </div>\n                    <button\n                      className=\"btn btn-success add-member\"\n                      onClick={handleAddItem}\n                      disabled={newItem === \"\"}\n                    >\n                      <i className=\"bi bi-plus\" />\n                    </button>\n                  </Item>\n                )}\n                <div\n                  className={\n                    \"d-flex align-items-center justify-content-end gap-3 mt-4\"\n                  }\n                >\n                  <Widget\n                    src={\n                      \"geforcy.near/widget/devhub.components.molecule.Button\"\n                    }\n                    props={{\n                      classNames: {\n                        root: \"btn-outline-danger shadow-none border-0\",\n                      },\n                      label: \"Cancel\",\n                      onClick: () => {\n                        setEditMode(false);\n                        handleResetItems();\n                      },\n                    }}\n                  />\n                  <Widget\n                    src={\n                      \"geforcy.near/widget/devhub.components.molecule.Button\"\n                    }\n                    props={{\n                      classNames: { root: \"btn\" },\n                      icon: {\n                        type: \"bootstrap_icon\",\n                        variant: \"bi-check-circle-fill\",\n                      },\n                      label: \"Submit\",\n                      onClick: () => handleSubmit(),\n                    }}\n                  />\n                </div>\n              </Tile>\n              <Widget\n                src={\n                  \"geforcy.near/widget/devhub.components.molecule.PostControls\"\n                }\n                props={{\n                  onClick: () => setPreviewConnect(!previewConnect),\n                  icon: previewConnect ? \"bi bi-toggle-on\" : \"bi bi-toggle-off\",\n                  title: \"Preview homepage\",\n                  testId: \"preview-homepage\",\n                }}\n              />\n            </>\n          ) : (\n            <Widget\n              src={\n                \"geforcy.near/widget/devhub.components.molecule.PostControls\"\n              }\n              props={{\n                onClick: () => setEditMode(true),\n                icon: \"bi bi-gear-wide-connected\",\n                title: \"Manage featured communities\",\n                testId: \"manage-featured\",\n              }}\n            />\n          )}\n        </>\n      )}\n      {previewConnect && (\n        <Widget\n          src=\"geforcy.near/widget/devhub.components.island.connect\"\n          props={{ ...props }}\n        />\n      )}\n      <h1>Admin group</h1>\n      {teamNames.includes(\"team:moderators\") && (\n        <>\n          <Widget\n            src={\"geforcy.near/widget/devhub.entity.team.TeamInfo\"}\n            props={{\n              teamName: \"team:moderators\",\n            }}\n          />\n          <Widget\n            src=\"geforcy.near/widget/devhub.components.atom.Alert\"\n            props={{\n              onClose: () => setAlertMessage(\"\"),\n              message: alertMessage,\n            }}\n          />\n        </>\n      )}\n      <h1>Other groups</h1>\n      {(teamNames || []).sort().map((teamName) => {\n        if (teamName === \"team:moderators\") return;\n        return (\n          <Widget\n            src={\"geforcy.near/widget/devhub.entity.team.TeamInfo\"}\n            props={{\n              teamName,\n            }}\n          />\n        );\n      })}\n\n      {!createTeam ? (\n        <Widget\n          src={\"geforcy.near/widget/devhub.components.molecule.PostControls\"}\n          props={{\n            onClick: () => setCreateTeam(true),\n            title: \"Create team\",\n            testId: \"create-team\",\n          }}\n        />\n      ) : (\n        <Widget\n          src={\"geforcy.near/widget/devhub.entity.team.Configurator\"}\n          props={{\n            onCancel: () => setCreateTeam(false),\n            onSubmit: (params) => createNewTeam(params),\n          }}\n        />\n      )}\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/devhub.page.admin", "fact_widget_deployments_id": "78b55f6631a4ef9457a6af31b49d9236", "inserted_timestamp": "2023-11-21T19:20:22.771Z", "modified_timestamp": "2023-11-21T19:20:22.771Z", "__row_index": 0}