{"tx_hash": "CNKb3XFcJ2ucW7iyc8Ss3zzEnT9eEZRYFenMoUyYbFtv", "action_id_social": "3B3pg7tisLJTtxDzk7p1WwBRKwpVjKXn3ifB4bc6frHL-0-widget", "block_id": 105916246, "block_timestamp": "2023-11-17T17:22:15.929Z", "signer_id": "geforcy.near", "widget_name": "devhub.page.admin", "source_code": "const {\n  hasModerator,\n  getFeaturedCommunities,\n  getRootMembers,\n  getAccessControlInfo,\n} = VM.require(\"geforcy.near/widget/core.adapter.devhub-contract\");\n\nconst { Tile } =\n  VM.require(\"geforcy.near/widget/devhub.components.molecule.Tile\") ||\n  (() => <></>);\n\nconst { href } = VM.require(\"geforcy.near/widget/core.lib.url\");\n\nif (\n  !getFeaturedCommunities ||\n  !hasModerator ||\n  !getRootMembers ||\n  !href ||\n  !getAccessControlInfo\n) {\n  return <p>Loading modules...</p>;\n}\n\nconst AdministrationSettings = {\n  communities: {\n    maxFeatured: 4,\n  },\n};\n\nconst CommunityFeaturingSchema = {\n  handle: {\n    label: \"Community handle\",\n\n    hints: {\n      disabled: `You can only add ${AdministrationSettings.communities.maxFeatured} communities at a time`,\n    },\n\n    inputProps: { min: 3, max: 40, required: true },\n  },\n};\n\nconst featuredCommunityList = getFeaturedCommunities();\n\nconst isDevHubModerator = hasModerator({\n  account_id: context.accountId,\n});\nconsole.log(\"\ud83d\ude80 ~ file: admin.jsx:46 ~ context.accountId:\", context.accountId);\nconsole.log(\"\ud83d\ude80 ~ file: admin.jsx:47 ~ isDevHubModerator:\", isDevHubModerator);\n\nconst rootMembers = getRootMembers();\nconst accessControlInfo = getAccessControlInfo();\n\nconst teamNames = Object.keys(rootMembers || {});\n\nconst noPermissionBanner = (\n  <div\n    className=\"d-flex flex-column justify-content-center align-items-center\"\n    style={{ height: 384 }}\n  >\n    <h2 className=\"alert alert-danger\">\n      Your account does not have administration permissions.\n    </h2>\n  </div>\n);\n\nif (!isDevHubModerator) {\n  return noPermissionBanner;\n}\n\nconst featuredCommunityHandles = featuredCommunityList.map(\n  ({ handle }) => handle\n);\n\nconst addFeaturedCommunity = ({ handle }) =>\n  Near.call(devHubAccountId, \"set_featured_communities\", {\n    handles: Array.from(new Set(featuredCommunityHandles).add(handle).values()),\n  });\n\nconst removeFeaturedCommunity = ({ handle: input }) =>\n  Near.call(devHubAccountId, \"set_featured_communities\", {\n    handles: featuredCommunityHandles.filter((handle) => handle !== input),\n  });\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px;\n  text-align: left;\n`;\n\nfunction createNewTeam({\n  teamName,\n  description,\n  label,\n  editPost,\n  useLabels,\n  members,\n}) {\n  let txn = [];\n\n  if (rootMembers.includes(`team:${teamName}`)) {\n    // Error team already exists\n  }\n  const allLabels = Object.keys(accessControlInfo.rules_list);\n  if (allLabels.includes(label)) {\n    // Error label already exists\n  }\n\n  // If we don't do this the contract will panic\n  let membersAndTeams = Object.keys(accessControlInfo.members_list);\n  members.forEach((member) => {\n    if (!membersAndTeams.includes(member)) {\n      // Contract panic member does not exist in the members_list yet!\n      txn.push({\n        contractName: \"\",\n        methodName: \"add_member\",\n        args: {\n          member: member,\n          metadata: {\n            member_metadata_version: \"V0\",\n            description: \"\",\n            permissions: {},\n            children: [],\n            parents: [],\n          },\n        },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      });\n    }\n  });\n\n  // Check edit team\n  Near.call([\n    ...txn,\n    {\n      contractName: \"\",\n      methodName: \"add_member\",\n      args: {\n        member: `team:${teamName}`,\n        metadata: {\n          member_metadata_version: \"V0\",\n          description: description,\n          permissions: {\n            [label]: [\n              ...(editPost ? [\"edit-post\"] : []),\n              ...(useLabels ? [\"use-labels\"] : []),\n            ],\n          },\n          children: members,\n          parents: [],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nconst [createTeam, setCreateTeam] = useState(false);\n\nreturn (\n  <Container>\n    <div className=\"d-flex flex-column gap-4 p-4\">\n      {/* {featuredCommunityList ? (\n        <>\n          <div className=\"d-flex flex-wrap align-content-start gap-4\">\n            Featured Community List\n            {featuredCommunityList.map((community) => (\n              <Widget\n                src={\"geforcy.near/widget/devhub.entity.community.Card\"}\n                props={{\n                  actions: (\n                    <div className=\"d-flex justify-content-center align-items-center\">\n                      <Widget\n                        src={\n                          \"geforcy.near/widget/devhub.components.molecule.Button\"\n                        }\n                        props={{\n                          classNames: {\n                            root: \"btn-outline-danger vertical\",\n                          },\n                          icon: {\n                            type: \"bootstrap_icon\",\n                            variant: \"bi-x-lg\",\n                          },\n                          title: \"Remove from featured\",\n                          onClick: () => removeFeaturedCommunity(community),\n                        }}\n                      />\n                    </div>\n                  ),\n\n                  format: \"small\",\n                  metadata: community,\n                  target: \"_blank\",\n                }}\n              />\n            ))}\n          </div>\n          <Tile>\n          <Widget\n            // TODO: LEGACY.\n            src={\n              \"geforcy.near/widget/gigs-board.components.organism.configurator\"\n            }\n            props={{\n              heading: \"Add featured community\",\n              isActive: true,\n\n              isUnlocked:\n                featuredCommunityList.length <\n                AdministrationSettings.communities.maxFeatured,\n\n              schema: CommunityFeaturingSchema,\n              onSubmit: addFeaturedCommunity,\n            }}\n          />\n          </Tile>\n        </>\n      ) : (\n        <Widget\n          src={\"geforcy.near/widget/devhub.components.atom.Spinner\"}\n          props={{\n            isHidden: false,\n          }}\n        />\n      )} */}\n      {!createTeam ? (\n        <Widget\n          src={\"geforcy.near/widget/devhub.components.molecule.PostControls\"}\n          props={{\n            onClick: () => setCreateTeam(true),\n            title: \"Create team\",\n          }}\n        />\n      ) : (\n        <Widget\n          src={\"geforcy.near/widget/devhub.entity.team.Configurator\"}\n          props={{\n            onCancel: () => setCreateTeam(false),\n            onSubmit: (params) => createNewTeam(params),\n          }}\n        />\n      )}\n      {(teamNames || []).map((teamName) => {\n        return (\n          <Widget\n            src={\"geforcy.near/widget/devhub.entity.team.TeamInfo\"}\n            props={{\n              teamName,\n            }}\n          />\n        );\n      })}\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/devhub.page.admin", "fact_widget_deployments_id": "a8dca01315ec4bed42fd2673d776d0f0", "inserted_timestamp": "2023-11-17T19:25:57.839Z", "modified_timestamp": "2023-11-17T19:25:57.839Z", "__row_index": 0}