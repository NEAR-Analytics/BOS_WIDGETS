{"tx_hash": "bbKMSAFAxKBehUky1YYgdFkwHV8Bm6hSeR443nMLkMp", "action_id_social": "3qFi6BrsjZH5EzcVrESmiBWFDjSBb6AqmrqHvqFZnzat-0-widget", "block_id": 106419640, "block_timestamp": "2023-11-24T09:48:28.308Z", "signer_id": "geforcy.near", "widget_name": "devhub.page.admin", "source_code": "const {\n  hasModerator,\n  getFeaturedCommunities,\n  getRootMembers,\n  getAccessControlInfo,\n  setFeaturedCommunities,\n  getAllCommunitiesMetadata,\n} = VM.require(\"geforcy.near/widget/core.adapter.devhub-contract\");\n\nconst { Tile } =\n  VM.require(\"geforcy.near/widget/devhub.components.molecule.Tile\") ||\n  (() => <></>);\n\nconst { href } = VM.require(\"geforcy.near/widget/core.lib.url\");\n\nif (\n  !getFeaturedCommunities ||\n  !hasModerator ||\n  !getRootMembers ||\n  !href ||\n  !getAccessControlInfo ||\n  !setFeaturedCommunities ||\n  !getAllCommunitiesMetadata\n) {\n  return <p>Loading modules...</p>;\n}\n\nconst fc = getFeaturedCommunities();\n// The state will stay empty even after the data right data has been retrieved\nif (!fc) {\n  return <p>Loading featured communities...</p>;\n}\nconst featuredCommunityList = fc || [];\nconst allMetadata = getAllCommunitiesMetadata();\nconst accessControlInfo = getAccessControlInfo();\n\nif (!accessControlInfo.members_list) {\n  return <p>Loading members list...</p>;\n}\n\nconst rootMembers = getRootMembers();\nconst teamNames = Object.keys(rootMembers || {});\n\nconst isDevHubModerator = hasModerator({\n  account_id: context.accountId,\n});\n\nconst [alertMessage, setAlertMessage] = useState(\"\");\nconst [communityMessage, setCommunityMessage] = useState(\"\");\nconst [createTeam, setCreateTeam] = useState(false);\nconst [communityHandles, setCommunityHandles] = useState(\n  featuredCommunityList.map(({ handle }) => handle)\n);\nconst [previewConnect, setPreviewConnect] = useState(false);\nconst [editModerators, setEditModerators] = useState(false);\nconst [moderators, setModerators] = useState(\n  accessControlInfo.members_list[\"team:moderators\"].children || []\n);\n\nconst handleResetItems = () => {\n  setCommunityHandles(featuredCommunityList.map(({ handle }) => handle));\n};\n\nconst handleAddItem = () => {\n  if (!allMetadata.map(({ handle }) => handle).includes(newItem)) {\n    // Community does not exist\n    return setCommunityMessage(\n      \"This community handle does not exist, make sure you use an existing handle.\"\n    );\n  }\n  if (newItem) {\n    setCommunityHandles([...communityHandles, newItem]);\n    setNewItem(\"\");\n  }\n};\n\nconst handleDeleteItem = (index) => {\n  const updatedData = [...communityHandles];\n  updatedData.splice(index, 1);\n  setCommunityHandles(updatedData);\n};\n\nconst noPermissionBanner = (\n  <div\n    className=\"d-flex flex-column justify-content-center align-items-center\"\n    style={{ height: 384 }}\n  >\n    <h2 className=\"alert alert-danger\">\n      Your account does not have administration permissions.\n    </h2>\n  </div>\n);\n\nif (!isDevHubModerator) {\n  return noPermissionBanner;\n}\n\nfunction handleSubmit() {\n  if (communityHandles.length < 4) {\n    return setCommunityMessage(\"Can't set fewer than 4 communities\");\n  }\n  setFeaturedCommunities({ handles: communityHandles });\n}\n\nfunction createEditTeam({\n  teamName,\n  description,\n  label,\n  editPost,\n  useLabels,\n  members,\n  contractCall, // TODO typescript edit_member || add_member\n}) {\n  let txn = [];\n  console.log(\"createEditTeam..\", rootMembers);\n  if (\n    rootMembers.includes(`team:${teamName}`) &&\n    contractCall === \"add_member\"\n  ) {\n    return setAlertMessage(\"This team name already exists\");\n  }\n  const allLabels = Object.keys(accessControlInfo.rules_list);\n  console.log(\"\ud83d\ude80 ~ file: admin.jsx:123 ~ allLabels:\", allLabels);\n  if (allLabels.includes(label) && contractCall === \"add_member\") {\n    return setAlertMessage(\"This label is already restricted by another team\");\n  }\n\n  const membersAndTeams = Object.keys(accessControlInfo.members_list);\n  console.log(\"\ud83d\ude80 ~ file: admin.jsx:129 ~ membersAndTeams:\", membersAndTeams);\n  members.forEach((member) => {\n    // if Contract panic member does not exist in the members_list\n    if (!membersAndTeams.includes(member)) {\n      // Add member\n      txn.push({\n        contractName: \"geforcy.near\",\n        methodName: \"add_member\",\n        args: {\n          member: member,\n          metadata: {\n            member_metadata_version: \"V0\",\n            description: \"\",\n            permissions: {},\n            children: [],\n            parents: [],\n          },\n        },\n        deposit: Big(0).pow(21),\n        gas: Big(10).pow(12).mul(100),\n      });\n    }\n  });\n\n  // Check edit team\n  Near.call([\n    ...txn,\n    {\n      contractName: \"geforcy.near\",\n      methodName: contractCall, // add_member || edit_member\n      args: {\n        member: `team:${teamName}`,\n        metadata: {\n          member_metadata_version: \"V0\",\n          description: description,\n          permissions: {\n            [label]: [\n              ...(editPost ? [\"edit-post\"] : []),\n              ...(useLabels ? [\"use-labels\"] : []),\n            ],\n          },\n          children: members,\n          parents: [],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nconst handleEditModerators = () => {\n  createEditTeam({\n    teamName: \"team:moderators\",\n    description:\n      \"The moderator group has permissions to edit any posts and apply all labels, including restricted ones.\",\n    label: \"any\",\n    editPost: true,\n    useLabels: true,\n    members: moderators,\n    contractCall: \"edit_member\",\n  });\n};\n\nconst Item = styled.div`\n  padding: 10px;\n  margin: 5px;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  gap: 10px;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px;\n  text-align: left;\n`;\n\nconst CardGrid = styled.div`\n  width: 100%;\n  height: 100%;\n\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 3rem;\n\n  @media screen and (max-width: 1000px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n`;\n\nreturn (\n  <Container>\n    <div className=\"d-flex flex-column gap-4 p-4\">\n      <ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n        <li class=\"nav-item\" role=\"presentation\">\n          <button\n            class=\"nav-link active\"\n            id=\"home-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#home\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"home\"\n            aria-selected=\"true\"\n          >\n            Home page settings\n          </button>\n        </li>\n        <li class=\"nav-item\" role=\"presentation\">\n          <button\n            class=\"nav-link\"\n            id=\"profile-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#profile\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"profile\"\n            aria-selected=\"false\"\n          >\n            Moderators\n          </button>\n        </li>\n        <li class=\"nav-item\" role=\"presentation\">\n          <button\n            class=\"nav-link\"\n            id=\"contact-tab\"\n            data-bs-toggle=\"tab\"\n            data-bs-target=\"#contact\"\n            type=\"button\"\n            role=\"tab\"\n            aria-controls=\"contact\"\n            aria-selected=\"false\"\n          >\n            Restricted labels\n          </button>\n        </li>\n      </ul>\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div\n          class=\"tab-pane fade show active\"\n          id=\"home\"\n          role=\"tabpanel\"\n          aria-labelledby=\"home-tab\"\n        >\n          <Widget\n            src=\"geforcy.near/widget/devhub.components.atom.Alert\"\n            props={{\n              onClose: () => setCommunityMessage(\"\"),\n              message: communityMessage,\n            }}\n          />\n          <Tile className=\"p-3 mb-3\">\n            <h3> Manage featured communities</h3>\n            <Widget\n              src=\"geforcy.near/widget/devhub.components.molecule.ListEditor\"\n              props={{\n                data: {\n                  maxLength: 5,\n                  placeholder: \"Community handle\",\n                  prefix: \"Community handle\",\n                  list: communityHandles,\n                },\n                setList: setCommunityHandles,\n                // validate\n                validate: (newItem) => {\n                  console.log(\n                    \"\ud83d\ude80 ~ file: admin.jsx:303 ~ allMetadata:\",\n                    allMetadata\n                  );\n\n                  return !allMetadata\n                    .map(({ handle }) => handle)\n                    .includes(newItem);\n                },\n                //\n                invalidate: () =>\n                  setCommunityMessage(\n                    \"This community handle does not exist, make sure you use an existing handle.\"\n                  ),\n              }}\n            />\n            <div\n              className={\n                \"d-flex align-items-center justify-content-end gap-3 mt-4\"\n              }\n            >\n              <Widget\n                src={\"geforcy.near/widget/devhub.components.molecule.Button\"}\n                props={{\n                  classNames: {\n                    root: \"btn-outline-danger shadow-none border-0\",\n                  },\n                  label: \"Cancel\",\n                  onClick: () => {\n                    handleResetItems();\n                  },\n                }}\n              />\n              <Widget\n                src={\"geforcy.near/widget/devhub.components.molecule.Button\"}\n                props={{\n                  classNames: { root: \"btn\" },\n                  icon: {\n                    type: \"bootstrap_icon\",\n                    variant: \"bi-check-circle-fill\",\n                  },\n                  label: \"Submit\",\n                  onClick: () => handleSubmit(),\n                }}\n              />\n            </div>\n          </Tile>\n          <Widget\n            src={\n              \"geforcy.near/widget/devhub.components.molecule.PostControls\"\n            }\n            props={{\n              onClick: () => setPreviewConnect(!previewConnect),\n              icon: previewConnect ? \"bi bi-toggle-on\" : \"bi bi-toggle-off\",\n              title: \"Preview homepage\",\n              testId: \"preview-homepage\",\n            }}\n          />\n          <div class=\"mt-3\">\n            {previewConnect && (\n              <Widget\n                src=\"geforcy.near/widget/devhub.components.island.connect\"\n                props={{ ...props }}\n              />\n            )}\n          </div>\n        </div>\n        <div\n          class=\"tab-pane fade\"\n          id=\"profile\"\n          role=\"tabpanel\"\n          aria-labelledby=\"profile-tab\"\n        >\n          <h1>Moderators</h1>\n          <div className=\"card-body\">\n            <h5>\n              The moderator group has permissions to edit any posts and apply\n              all labels, including restricted ones.\n            </h5>\n            <Widget\n              src={\n                \"geforcy.near/widget/devhub.components.molecule.PostControls\"\n              }\n              props={{\n                icon: \"bi bi-gear-wide-connected\",\n                className: \"mb-3\",\n\n                title: \"Edit members\",\n                onClick: () => setEditModerators(!editModerators),\n                testId: \"edit-members\",\n              }}\n            />\n          </div>\n          <Tile className=\"p-3\">\n            {editModerators ? (\n              <>\n                <Widget\n                  src=\"geforcy.near/widget/devhub.components.molecule.ListEditor\"\n                  props={{\n                    data: {\n                      maxLength: 100,\n                      placeholder: \"member.near\",\n                      prefix: \"member\",\n                      list: moderators,\n                    },\n                    setList: setModerators,\n\n                    validate: (newItem) => true,\n                    invalidate: () => null, // TODO check if id exists on near\n                  }}\n                />\n                <div\n                  className={\n                    \"d-flex align-items-center justify-content-end gap-3 mt-4\"\n                  }\n                >\n                  <Widget\n                    src={\n                      \"geforcy.near/widget/devhub.components.molecule.Button\"\n                    }\n                    props={{\n                      classNames: {\n                        root: \"btn-outline-danger shadow-none border-0\",\n                      },\n                      label: \"Cancel\",\n                      onClick: () => {\n                        handleResetItems();\n                      },\n                    }}\n                  />\n                  <Widget\n                    src={\n                      \"geforcy.near/widget/devhub.components.molecule.Button\"\n                    }\n                    props={{\n                      classNames: { root: \"btn\" },\n                      icon: {\n                        type: \"bootstrap_icon\",\n                        variant: \"bi-check-circle-fill\",\n                      },\n                      label: \"Submit\",\n                      onClick: handleEditModerators,\n                    }}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div class=\"pt-4\">Members</div>\n\n                {moderators && (\n                  <div class=\"vstack\">\n                    {moderators.length ? (\n                      moderators.map((child) => (\n                        <Tile className=\"w-25 p-3 m-1\" minHeight={10}>\n                          <Widget\n                            src={`neardevgov.near/widget/ProfileLine`}\n                            props={{ accountId: child }}\n                          />\n                        </Tile>\n                      ))\n                    ) : (\n                      <div>No moderators</div>\n                    )}\n                  </div>\n                )}\n              </>\n            )}\n          </Tile>\n        </div>\n        <div\n          class=\"tab-pane fade\"\n          id=\"contact\"\n          role=\"tabpanel\"\n          aria-labelledby=\"contact-tab\"\n        >\n          <h1>Restricted Labels</h1>\n          <h5>\n            Create special labels and control who can use and edit posts with\n            those labels.\n          </h5>\n          {!createTeam ? (\n            <Widget\n              src={\n                \"geforcy.near/widget/devhub.components.molecule.PostControls\"\n              }\n              props={{\n                onClick: () => setCreateTeam(true),\n                title: \"Create label\",\n                testId: \"create-team\",\n              }}\n            />\n          ) : (\n            <Widget\n              src={\"geforcy.near/widget/devhub.entity.team.Configurator\"}\n              props={{\n                onCancel: () => setCreateTeam(false),\n                onSubmit: (params) =>\n                  createEditTeam({ ...params, contractCall: \"add_member\" }),\n              }}\n            />\n          )}\n\n          <div class=\"table-responsive mt-3\">\n            <table class=\"table table-hover table-sm table-bordered table-striped\">\n              <thead class=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">label name</th>\n                  <th scope=\"col\">Type</th>\n                  <th scope=\"col\">Members</th>\n                  <th scope=\"col\">Only allow members to use label</th>\n                  <th scope=\"col\">Allow members to edit any post with label</th>\n                  <th scope=\"col\">Actions</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {(teamNames || []).sort().map((teamName) => {\n                  if (teamName === \"team:moderators\") return;\n                  return (\n                    <Widget\n                      src={\"geforcy.near/widget/devhub.entity.team.LabelRow\"}\n                      props={{\n                        teamName,\n                      }}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/devhub.page.admin", "fact_widget_deployments_id": "de9b559ec94404b7d02ee357257011c3", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}