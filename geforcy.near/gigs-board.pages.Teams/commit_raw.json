{"tx_hash": "BdUEpGQptwoPoLtFKMYXoN7f6mPnHffTiUePWEqL7Akq", "action_id_social": "2JpEPBgofaDZHugVLy1wVxibRBq6oiYMFPE7n7esAUBr-0-widget", "block_id": 101004446, "block_timestamp": "2023-09-13T03:00:32.706Z", "signer_id": "geforcy.near", "widget_name": "gigs-board.pages.Teams", "source_code": "/* INCLUDE: \"common.jsx\" */\nconst nearDevGovGigsContractAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst nearDevGovGigsWidgetsAccountId =\n  props.nearDevGovGigsWidgetsAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nfunction widget(widgetName, widgetProps, key) {\n  widgetProps = {\n    ...widgetProps,\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\n    referral: props.referral,\n  };\n\n  return (\n    <Widget\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\n      props={widgetProps}\n      key={key}\n    />\n  );\n}\n\nfunction href(widgetName, linkProps) {\n  linkProps = { ...linkProps };\n\n  if (props.nearDevGovGigsContractAccountId) {\n    linkProps.nearDevGovGigsContractAccountId =\n      props.nearDevGovGigsContractAccountId;\n  }\n\n  if (props.nearDevGovGigsWidgetsAccountId) {\n    linkProps.nearDevGovGigsWidgetsAccountId =\n      props.nearDevGovGigsWidgetsAccountId;\n  }\n\n  if (props.referral) {\n    linkProps.referral = props.referral;\n  }\n\n  const linkPropsQuery = Object.entries(linkProps)\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(\"&\");\n\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\n    linkPropsQuery ? \"?\" : \"\"\n  }${linkPropsQuery}`;\n}\n/* END_INCLUDE: \"common.jsx\" */\n/* INCLUDE: \"core/adapter/dev-hub\" */\nconst devHubAccountId =\n  props.nearDevGovGigsContractAccountId ||\n  (context.widgetSrc ?? \"devgovgigs.near\").split(\"/\", 1)[0];\n\nconst DevHub = {\n  get_root_members: () =>\n    Near.view(devHubAccountId, \"get_root_members\") ?? null,\n\n  has_moderator: ({ account_id }) =>\n    Near.view(devHubAccountId, \"has_moderator\", { account_id }) ?? null,\n\n  create_community: ({ inputs }) =>\n    Near.call(devHubAccountId, \"create_community\", { inputs }),\n\n  get_community: ({ handle }) =>\n    Near.view(devHubAccountId, \"get_community\", { handle }) ?? null,\n\n  get_account_community_permissions: ({ account_id, community_handle }) =>\n    Near.view(devHubAccountId, \"get_account_community_permissions\", {\n      account_id,\n      community_handle,\n    }) ?? null,\n\n  update_community: ({ handle, community }) =>\n    Near.call(devHubAccountId, \"update_community\", { handle, community }),\n\n  delete_community: ({ handle }) =>\n    Near.call(devHubAccountId, \"delete_community\", { handle }),\n\n  update_community_board: ({ handle, board }) =>\n    Near.call(devHubAccountId, \"update_community_board\", { handle, board }),\n\n  update_community_github: ({ handle, github }) =>\n    Near.call(devHubAccountId, \"update_community_github\", { handle, github }),\n\n  get_access_control_info: () =>\n    Near.view(devHubAccountId, \"get_access_control_info\") ?? null,\n\n  get_all_authors: () => Near.view(devHubAccountId, \"get_all_authors\") ?? null,\n\n  get_all_communities_metadata: () =>\n    Near.view(devHubAccountId, \"get_all_communities_metadata\") ?? null,\n\n  get_all_labels: () => Near.view(devHubAccountId, \"get_all_labels\") ?? null,\n\n  get_post: ({ post_id }) =>\n    Near.view(devHubAccountId, \"get_post\", { post_id }) ?? null,\n\n  get_posts_by_author: ({ author }) =>\n    Near.view(devHubAccountId, \"get_posts_by_author\", { author }) ?? null,\n\n  get_posts_by_label: ({ label }) =>\n    Near.view(nearDevGovGigsContractAccountId, \"get_posts_by_label\", {\n      label,\n    }) ?? null,\n\n  useQuery: (name, params) => {\n    const initialState = { data: null, error: null, isLoading: true };\n\n    const cacheState = useCache(\n      () =>\n        Near.asyncView(devHubAccountId, [\"get\", name].join(\"_\"), params ?? {})\n          .then((response) => ({\n            ...initialState,\n            data: response ?? null,\n            isLoading: false,\n          }))\n          .catch((error) => ({\n            ...initialState,\n            error: props?.error ?? error,\n            isLoading: false,\n          })),\n\n      JSON.stringify({ name, params }),\n      { subscribe: true }\n    );\n\n    return cacheState === null ? initialState : cacheState;\n  },\n};\n/* END_INCLUDE: \"core/adapter/dev-hub\" */\n/* INCLUDE: \"entity/viewer\" */\nconst Viewer = {\n  communityPermissions: ({ handle }) =>\n    DevHub.get_account_community_permissions({\n      account_id: context.accountId,\n      community_handle: handle,\n    }) ?? {\n      can_configure: false,\n      can_delete: false,\n    },\n\n  role: {\n    isDevHubModerator:\n      DevHub.has_moderator({ account_id: context.accountId }) ?? false,\n  },\n};\n\n/* END_INCLUDE: \"entity/viewer\" */\n\nconst isContractOwner = nearDevGovGigsContractAccountId == context.accountId;\n\nState.init({\n  labelData: null,\n  teamData: null,\n  createTeam: false,\n  createLabel: false,\n  isActive: true,\n  editTeams: false,\n});\n\nconst access_info = DevHub.get_access_control_info() ?? null,\n  root_members = DevHub.get_root_members() ?? null;\n\nif (!access_info || !root_members) {\n  return <div>Loading...</div>;\n}\n\nfunction addLabel(labelData) {\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"set_restricted_rules\",\n      args: {\n        rules: {\n          [labelData.name]: {\n            description: labelData.description,\n            rule_metadata_version: \"V0\",\n          },\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction addTeam(teamData) {\n  Near.call([\n    {\n      contractName: nearDevGovGigsContractAccountId,\n      methodName: \"add_member\",\n      args: {\n        member: `team:${teamData.name}`,\n        metadata: {\n          member_metadata_version: \"V0\",\n          description: teamData.description,\n          permissions: {\n            [teamData.label]: [\"edit-post\", \"use-labels\"],\n          },\n          children: [],\n          parents: [],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\n// Check for the edit state and sufficient user permissions, it is passed down\n// to the TeamInfo widget\nconst editMode =\n  (Viewer.role.isDevHubModerator || isContractOwner) && state.editTeams;\n\nconst pageContent = (\n  <div className=\"pt-3 pb-5\">\n    {(Viewer.role.isDevHubModerator || isContractOwner) &&\n      widget(\"components.layout.Controls\", {\n        title: state.editTeams ? \"Stop editing page\" : \"Edit page\",\n        onClick: () => {\n          State.update({\n            editTeams: !state.editTeams,\n            icon: !state.editLabels\n              ? \"bi-pencil-square\"\n              : \"bi-stop-circle-fill\",\n          });\n        },\n      })}\n    {editMode &&\n      widget(\"components.molecule.tile\", {\n        className: \"\",\n        heading: \"Some explanation\",\n        minHeight: 0,\n        children: (\n          <div>\n            <p>\n              <b>Step 1:</b> Create an label that needs to be restricted\n            </p>\n            <p>The 'any' label is reserved for moderators</p>\n            <p>\n              Labels that start with <b>start-with:</b>example can restrict all\n              labels that start with that example.\n            </p>\n            <p>\n              <b>Step 2:</b> Create the team and add the label, only 1 label per\n              Team allowed\n            </p>\n            <p>Team 'moderators' is reserved</p>\n            <p>\n              <b>Step 3:</b> Add a member to the team\n            </p>\n            <p>Members can be in multiple teams</p>\n            <p>\n              <b>Step 4:</b> Edit the label on the team to edit it's permission\n            </p>\n            <p>\n              The only possible permissions are: 'edit-post' and/or 'use-labels'\n            </p>\n          </div>\n        ),\n      })}\n    {editMode &&\n      widget(\"components.layout.Controls\", {\n        title: \"Create Restricted labels\",\n        onClick: () => {\n          State.update({\n            createLabel: !state.createLabel,\n          });\n        },\n      })}\n    <div className=\"pt-3\">\n      {widget(\"entity.team.LabelsPermissions\", {\n        rules: access_info.rules_list,\n        editMode: editMode,\n      })}\n    </div>\n    {editMode && state.createLabel && (\n      <div className=\"pt-3\">\n        {widget(\"components.organism.configurator\", {\n          classNames: {\n            root: \"mt-1\",\n            submit: \"btn-primary\",\n            submitAdornment: \"bi-check-circle-fill\",\n          },\n          heading: \"Restricted labels\",\n          isActive: state.isActive,\n          isUnlocked: editMode,\n          onSubmit: addLabel,\n          submitLabel: \"Accept\",\n          data: state.labelData,\n          schema: {\n            name: {\n              inputProps: {\n                min: 2,\n                max: 30,\n                placeholder: \"Label name (starts-with:<label>  or <label>)\",\n                required: true,\n              },\n              label: \"Name\",\n              order: 1,\n            },\n            description: {\n              inputProps: {\n                min: 2,\n                max: 60,\n                placeholder: \"Label description\",\n                required: true,\n              },\n              label: \"Description\",\n              order: 2,\n            },\n          },\n        })}\n      </div>\n    )}\n\n    {editMode && (\n      <div class=\"pt-3\">\n        {widget(\"components.layout.Controls\", {\n          title: \"Create team\",\n          onClick: () => {\n            State.update({\n              createTeam: !state.createTeam,\n            });\n          },\n        })}\n      </div>\n    )}\n    {editMode &&\n      state.createTeam &&\n      widget(\"components.organism.configurator\", {\n        classNames: {\n          submit: \"btn-primary\",\n          submitAdornment: \"bi-check-circle-fill\",\n        },\n        heading: \"Team info\",\n        isActive: state.isActive,\n        isUnlocked: editMode,\n        onSubmit: addTeam,\n        submitLabel: \"Accept\",\n        data: state.teamData,\n        schema: {\n          name: {\n            inputProps: {\n              min: 2,\n              max: 30,\n              placeholder: \"Team name\",\n              required: true,\n            },\n            label: \"Name\",\n            order: 1,\n          },\n          description: {\n            inputProps: {\n              min: 2,\n              max: 60,\n              placeholder: \"Team description\",\n              required: true,\n            },\n            label: \"Description\",\n            order: 2,\n          },\n          label: {\n            label: \"Labels\",\n            order: 3,\n            // format: \"comma-separated\",\n            inputProps: {\n              min: 2,\n              max: 60,\n              placeholder: Object.keys(access_info.rules_list).join(\",\"),\n              required: true,\n            },\n          },\n        },\n      })}\n    {root_members\n      ? Object.keys(root_members).map((member) =>\n          widget(\n            \"entity.team.TeamInfo\",\n            {\n              member,\n              members_list: access_info.members_list,\n              rules_list: access_info.rules_list,\n              teamLevel: true,\n              root_members,\n              teamId: member,\n              editMode: editMode,\n            },\n            member\n          )\n        )\n      : null}\n  </div>\n);\n\nreturn widget(\"components.template.app-layout\", {\n  children: pageContent,\n});\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/gigs-board.pages.Teams", "fact_widget_deployments_id": "0aa1a36388c020e2ac86cb6f8239ce34", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 113}