{"tx_hash": "8sAWrxFhrqQs86rnY3xMC3e1PdBH2HvyZ92w1cJ14Kmt", "action_id_social": "HkrNBRxZAqYJ6B2sLAZP6QXjQRh1YNuDqw2TyjajdChn-0-widget", "block_id": 106217777, "block_timestamp": "2023-11-21T16:42:52.090Z", "signer_id": "geforcy.near", "widget_name": "devhub.entity.team.TeamInfo", "source_code": "const { Tile } =\n  VM.require(\"geforcy.near/widget/devhub.components.molecule.Tile\") ||\n  (() => <></>);\n\nconst { getAccessControlInfo, getRootMembers } = VM.require(\n  \"geforcy.near/widget/core.adapter.devhub-contract\"\n);\n\nif (!getAccessControlInfo || !getRootMembers) {\n  return <p>Loading modules...</p>;\n}\n\nconst accessControlInfo = getAccessControlInfo();\nconst rootMembers = getRootMembers();\nconst allTeamNames = Object.keys(rootMembers || {});\n\nif (!accessControlInfo || !rootMembers) {\n  return <p>Loading access control info...</p>;\n}\n\nconst { teamName } = props;\nconst teamModerators = teamName == \"team:moderators\";\nconst label = Object.keys(rootMembers[teamName].permissions)[0] || \"\";\nconst metadata = accessControlInfo.members_list[teamName];\nconst editPost = rootMembers[teamName].permissions[label].includes(\"edit-post\");\nconst useLabels =\n  rootMembers[teamName].permissions[label].includes(\"use-labels\");\nconst members = rootMembers[teamName].children || [];\n\nconst configuratorData = {\n  teamName: teamName,\n  description: metadata.description,\n  label: label,\n  members,\n  editPost,\n  useLabels,\n};\n\nconst [editMode, setEditMode] = useState(false);\nconst [alertMessage, setAlertMessage] = useState(\"\");\n\nfunction arrayEq(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  const sortedArr1 = arr1.slice().sort();\n  const sortedArr2 = arr2.slice().sort();\n  for (let i = 0; i < sortedArr1.length; i++) {\n    if (sortedArr1[i] !== sortedArr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction editTeam({\n  teamName: tmnm,\n  description: dscrptn,\n  label: lbl,\n  editPost: edtpst,\n  useLabels: uslbls,\n  members: mmbrs,\n}) {\n  let txn = [];\n  let numberOfChanges = 0;\n\n  if (teamName !== tmnm) {\n    numberOfChanges++;\n    if (allTeamNames.includes(`team:${tmnm}`)) {\n      return setAlertMessage(\"This team name already exists\");\n    }\n  }\n\n  if (label !== lbl) {\n    const allLabels = Object.keys(accessControlInfo.rules_list);\n    if (allLabels.includes(lbl)) {\n      return setAlertMessage(\n        \"This label is already restricted by another team\"\n      );\n    }\n  }\n\n  if (description !== dscrptn || editPost !== edtpst || useLabels !== uslbls) {\n    numberOfChanges++;\n  }\n\n  if (!arrayEq(members, mmbrs)) {\n    numberOfChanges++;\n    let membersAndTeams = Object.keys(accessControlInfo.members_list);\n\n    mmbrs.forEach((member) => {\n      if (!membersAndTeams.includes(member)) {\n        // Contract panic member does not exist in the members_list yet.\n        txn.push({\n          contractName: \"geforcy.near\",\n          methodName: \"add_member\",\n          args: {\n            member: member,\n            metadata: {\n              member_metadata_version: \"V0\",\n              description: \"\",\n              permissions: {},\n              children: [],\n              parents: [],\n            },\n          },\n          deposit: Big(0).pow(21),\n          gas: Big(10).pow(12).mul(100),\n        });\n      }\n    });\n  }\n\n  if (numberOfChanges < 1) {\n    return setAlertMessage(\"No changes found.\");\n  }\n\n  Near.call([\n    ...txn,\n    {\n      contractName: \"geforcy.near\",\n      methodName: \"edit_member\",\n      args: {\n        member: `team:${tmnm}`,\n        metadata: {\n          member_metadata_version: \"V0\",\n          description: dscrptn,\n          permissions: {\n            [lbl]: [\n              ...(edtpst ? [\"edit-post\"] : []),\n              ...(uslbls ? [\"use-labels\"] : []),\n            ],\n          },\n          children: mmbrs,\n          parents: [],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\nconst backwardsCompatibleTeam = (oldTeam) =>\n  oldTeam.startsWith(\"team:\") ? oldTeam.slice(5) : oldTeam;\nreturn editMode ? (\n  <>\n    <Widget\n      src={\"geforcy.near/widget/devhub.entity.team.Configurator\"}\n      props={{\n        data: configuratorData,\n        onCancel: () => setEditMode(false),\n        onSubmit: (params) => editTeam(params),\n      }}\n    />\n    <Widget\n      src=\"geforcy.near/widget/devhub.components.atom.Alert\"\n      props={{\n        onClose: () => setAlertMessage(\"\"),\n        message: alertMessage,\n      }}\n    />\n  </>\n) : (\n  <div className=\"card my-2 attractable\">\n    <div className=\"card-body\">\n      <div class=\"d-flex justify-content-between\">\n        <h3>{backwardsCompatibleTeam(teamName)}</h3>\n        <Widget\n          src={\"geforcy.near/widget/devhub.components.molecule.Button\"}\n          props={{\n            classNames: { root: \"btn-outline-light text-dark\" },\n            icon: {\n              type: \"bootstrap_icon\",\n              variant: \"bi-gear-wide-connected\",\n            },\n            label: \"Edit team\",\n            onClick: () => setEditMode(true),\n          }}\n        />\n      </div>\n    </div>\n\n    <div className=\"card-body\">\n      {\n        <p class=\"card-text\" key=\"description\">\n          {!teamModerators ? (\n            <Widget\n              src={\n                \"geforcy.near/widget/devhub.components.molecule.MarkdownViewer\"\n              }\n              props={{\n                text: metadata.description,\n              }}\n            />\n          ) : (\n            \"The moderator group has permissions to edit any posts, and apply all labels including restricted ones.\"\n          )}\n        </p>\n      }\n      {/* Hide this case of the moderators */}\n      {!teamModerators && (\n        <>\n          <span class=\"pt-4\">\n            Restricted label:\n            <Widget\n              src={\"geforcy.near/widget/devhub.components.atom.Tag\"}\n              props={{\n                tag: label,\n              }}\n            />\n          </span>\n\n          <div class=\"pt-4\">Permissions associated with that label</div>\n\n          <Widget\n            src=\"geforcy.near/widget/devhub.entity.team.LabelPermissions\"\n            props={{\n              identifier: teamName,\n              editPost,\n              useLabels,\n              setEditPost: console.log,\n              setUseLabels: console.log,\n              disabled: true,\n            }}\n          />\n        </>\n      )}\n\n      <div class=\"pt-4\">Members</div>\n\n      {metadata.children && (\n        <div class=\"vstack\">\n          {metadata.children.length ? (\n            metadata.children.map((child) => (\n              <Tile className=\"w-25 p-3 m-1\" minHeight={10}>\n                <Widget\n                  src={`neardevgov.near/widget/ProfileLine`}\n                  props={{ accountId: child }}\n                />\n              </Tile>\n            ))\n          ) : (\n            <div>No members in this team</div>\n          )}\n        </div>\n      )}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/devhub.entity.team.TeamInfo", "fact_widget_deployments_id": "7c9b9b113ec72fd7e408a5d1f2c06604", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 10}