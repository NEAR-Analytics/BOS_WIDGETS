{"tx_hash": "J7SaPLZY7FHfEbtB56SV7HzpRJdkwjfPcMDwbb72yygd", "action_id_social": "Dpw2r6CoEq4pt5S33DpSC3wYCSqcUuSion1foCvYT8i1-0-widget", "block_id": 106875711, "block_timestamp": "2023-11-30T16:07:44.801Z", "signer_id": "geforcy.near", "widget_name": "devhub.entity.team.LabelRow", "source_code": "/**\n * In the context of the contract, a group is essentially a member identified\n * by the prefix 'team:'; therefore, on the front end, we also employ 'team,'\n * with the user interface displaying 'group' for clarity.\n */\nconst { Tile } =\n  VM.require(\"geforcy.near/widget/devhub.components.molecule.Tile\") ||\n  (() => <></>);\n\nconst { getAccessControlInfo, getRootMembers, removeMember } = VM.require(\n  \"geforcy.near/widget/core.adapter.devhub-contract\"\n);\n\nif (!getAccessControlInfo || !getRootMembers || !removeMember) {\n  return <p>Loading modules...</p>;\n}\n\nconst accessControlInfo = getAccessControlInfo();\nconst rootMembers = getRootMembers();\nconst allTeamNames = Object.keys(rootMembers || {});\n\nif (!accessControlInfo || !rootMembers) {\n  return <p>Loading access control info...</p>;\n}\n\nconst { teamName } = props;\nconst teamModerators = teamName == \"team:moderators\";\nconst label = Object.keys(rootMembers[teamName].permissions)[0] || \"\";\nconst metadata = accessControlInfo.members_list[teamName];\nconst editPost = rootMembers[teamName].permissions[label].includes(\"edit-post\");\nconst useLabels =\n  rootMembers[teamName].permissions[label].includes(\"use-labels\");\nconst members = rootMembers[teamName].children || [];\n\nconst configuratorData = {\n  teamName: teamName,\n  label: label,\n  members,\n  editPost,\n  useLabels,\n};\n\nconst [editMode, setEditMode] = useState(false);\nconst [alertMessage, setAlertMessage] = useState(\"\");\n\nfunction arrayEq(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  const sortedArr1 = arr1.slice().sort();\n  const sortedArr2 = arr2.slice().sort();\n  for (let i = 0; i < sortedArr1.length; i++) {\n    if (sortedArr1[i] !== sortedArr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction editTeam({\n  teamName: tmnm,\n  label: lbl,\n  editPost: edtpst,\n  useLabels: uslbls,\n  members: mmbrs,\n}) {\n  let txn = [];\n  let numberOfChanges = 0;\n\n  if (backwardsCompatibleTeam(teamName) !== tmnm) {\n    numberOfChanges++;\n    if (allTeamNames.includes(`team:${tmnm}`)) {\n      return setAlertMessage(\"This team name already exists\");\n    }\n  }\n\n  console.log(label, lbl);\n  if (label !== lbl) {\n    const allLabels = Object.keys(accessControlInfo.rules_list);\n    if (allLabels.includes(lbl)) {\n      return setAlertMessage(\n        \"This label is already restricted by another team\"\n      );\n    }\n  }\n\n  if (editPost !== edtpst || useLabels !== uslbls) {\n    numberOfChanges++;\n  }\n\n  if (!arrayEq(members, mmbrs)) {\n    numberOfChanges++;\n    let membersAndTeams = Object.keys(accessControlInfo.members_list);\n\n    mmbrs.forEach((member) => {\n      if (!membersAndTeams.includes(member)) {\n        // Contract panic member does not exist in the members_list yet.\n        txn.push({\n          contractName: \"geforcy.near\",\n          methodName: \"add_member\",\n          args: {\n            member: member,\n            metadata: {\n              member_metadata_version: \"V0\",\n              description: \"\",\n              permissions: {},\n              children: [],\n              parents: [],\n            },\n          },\n          deposit: Big(0).pow(21),\n          gas: Big(10).pow(12).mul(100),\n        });\n      }\n    });\n  }\n\n  if (numberOfChanges < 1) {\n    return setAlertMessage(\"No changes found.\");\n  }\n\n  Near.call([\n    ...txn,\n    {\n      contractName: \"geforcy.near\",\n      methodName: \"edit_member\",\n      args: {\n        member: `team:${tmnm}`,\n        metadata: {\n          member_metadata_version: \"V0\",\n          description: \"\",\n          permissions: {\n            [lbl]: [\n              ...(edtpst ? [\"edit-post\"] : []),\n              ...(uslbls ? [\"use-labels\"] : []),\n            ],\n          },\n          children: mmbrs,\n          parents: [],\n        },\n      },\n      deposit: Big(0).pow(21),\n      gas: Big(10).pow(12).mul(100),\n    },\n  ]);\n}\n\nfunction deleteLabel() {\n  // contract side this is called a team / member\n  removeMember(teamName);\n}\n\nconst backwardsCompatibleLabel = (oldLabel) => {\n  if (typeof oldLabel === \"string\")\n    return oldLabel.startsWith(\"starts-with:\") ? oldLabel.slice(12) : oldLabel;\n  else return \"\";\n};\n// Teams are saved in contract by their prefix 'team:'\n// This function makes the teamName display friendly.\nconst backwardsCompatibleTeam = (oldTeam) =>\n  oldTeam.startsWith(\"team:\") ? oldTeam.slice(5) : oldTeam;\n\nreturn (\n  <>\n    <tr>\n      <th scope=\"row\" class=\" justify-content-center align-items-center p-3\">\n        <Widget\n          src={\"geforcy.near/widget/devhub.components.atom.Tag\"}\n          props={{\n            tag: backwardsCompatibleLabel(label),\n          }}\n        />\n      </th>\n      <td class=\" justify-content-center align-items-center p-3\">\n        {(label || \"\").startsWith(\"starts-with:\")\n          ? \"Multiple labels with common prefix\"\n          : \"Single label\"}\n      </td>\n      <td class=\" justify-content-center align-items-center p-3\">\n        {metadata.children && (\n          <div class=\"vstack\">\n            {metadata.children.length ? (\n              metadata.children.map((child) => <p>{child}</p>)\n            ) : (\n              <div>No members in this group</div>\n            )}\n          </div>\n        )}\n      </td>\n      <td class=\" justify-content-center align-items-center p-3\">\n        <div class=\"form-check\">\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            value={useLabels}\n            id={`useLabelsCheckbox${identifier}`}\n            checked={useLabels}\n            onChange={() => setUseLabels(!useLabels)}\n            disabled={disabled}\n          />\n        </div>\n      </td>\n      <td class=\" justify-content-center align-items-center p-3\">\n        <div class=\"form-check\">\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            value={editPost}\n            id={`editPostCheckbox${identifier}`}\n            checked={editPost}\n            onChange={() => setEditPost(!editPost)}\n            disabled={disabled}\n          />\n        </div>\n      </td>\n      <td class=\" justify-content-center align-items-center p-3\">\n        {editMode ? (\n          <Widget\n            src={\"geforcy.near/widget/devhub.components.molecule.Button\"}\n            props={{\n              classNames: { root: \"btn-outline-danger\" },\n              icon: {\n                type: \"bootstrap_icon\",\n                variant: \"bi-trash\",\n              },\n              label: \"Delete\",\n              onClick: deleteLabel,\n            }}\n          />\n        ) : (\n          <Widget\n            src={\"geforcy.near/widget/devhub.components.molecule.Button\"}\n            props={{\n              classNames: { root: \"btn-outline-light text-dark\" },\n              icon: {\n                type: \"bootstrap_icon\",\n                variant: \"bi-gear-wide-connected\",\n              },\n              label: \"Edit\",\n              onClick: () => setEditMode(true),\n            }}\n          />\n        )}\n      </td>\n    </tr>\n    {editMode && (\n      <tr>\n        <th scope=\"row\" colspan=\"6\">\n          <Widget\n            src={\"geforcy.near/widget/devhub.entity.team.Configurator\"}\n            props={{\n              data: configuratorData,\n              onCancel: () => setEditMode(false),\n              onSubmit: (params) => editTeam(params),\n            }}\n          />\n          <Widget\n            src=\"geforcy.near/widget/devhub.components.atom.Alert\"\n            props={{\n              onClose: () => setAlertMessage(\"\"),\n              message: alertMessage,\n            }}\n          />\n        </th>\n      </tr>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/geforcy.near/widget/devhub.entity.team.LabelRow", "fact_widget_deployments_id": "fc47fdf1bb5ebe77eb6ca01a75362a5b", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 18}