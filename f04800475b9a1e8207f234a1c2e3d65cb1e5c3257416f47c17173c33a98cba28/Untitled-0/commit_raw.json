{"tx_hash": "HYf8dAkKRSVdXRkhiESgJzjrQP1pK2fsGCrXc1LdjC8x", "action_id_social": "Ff1RRNz12LJMNNtnDu7u5ekR9npv3JYGCUyLJdNRt3dn-0-widget", "block_id": 109927625, "block_timestamp": "2024-01-08T20:48:35.003Z", "signer_id": "f04800475b9a1e8207f234a1c2e3d65cb1e5c3257416f47c17173c33a98cba28", "widget_name": "Untitled-0", "source_code": null, "metadata": null, "branch": {"draft": {"": "import { useState } from \"react\";\nimport {\n  TextField,\n  Typography,\n  Box,\n  Chip,\n  Grid,\n  Paper,\n  Select,\n  InputLabel,\n  FormControl,\n  MenuItem,\n  SelectChangeEvent,\n} from \"@mui/material\";\n\ninterface TimeChipProps {\n  label: string;\n  onClick: () => void;\n  color: \"default\" | \"primary\";\n}\n\nconst TimeChip: React.FC<TimeChipProps> = ({ label, onClick, color }) => (\n  <Chip\n    label={label}\n    onClick={onClick}\n    sx={{\n      minWidth: \"100%\",\n      borderColor: \"black\",\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      fontWeight: \"bold\",\n      backgroundColor: color === \"primary\" ? \"lightblue\" : \"white\",\n      color: color === \"primary\" ? \"black\" : \"inherit\",\n    }}\n  />\n);\n\ntype Venue = {\n  id: number;\n  name: string;\n};\n\nconst venues: Venue[] = [\n  { id: 1, name: \"Restaurant A\" },\n  { id: 2, name: \"Restaurant B\" },\n  { id: 3, name: \"Restaurant C\" },\n  { id: 4, name: \"Restaurant D\" },\n  { id: 5, name: \"Restaurant E\" },\n  { id: 6, name: \"Restaurant F\" },\n  { id: 7, name: \"Restaurant G\" },\n  { id: 8, name: \"Restaurant H\" },\n  { id: 9, name: \"Restaurant I\" },\n  { id: 10, name: \"Restaurant J\" },\n  { id: 11, name: \"Restaurant K\" },\n  { id: 12, name: \"Restaurant L\" },\n];\n\nconst ResyReservation = () => {\n  const [venueId, setVenueId] = useState<number | null>(null);\n  const [partySize, setPartySize] = useState(\"\");\n  const [day, setDay] = useState<Date | null>(null);\n  const [timePreference, setTimePreference] = useState<string[]>([]);\n  const [timeRanking, setTimeRanking] = useState<string[]>([]);\n\n  const handleVenueIdChange = (event: SelectChangeEvent<number | null>) => {\n    if (typeof event.target.value === \"number\") {\n      setVenueId(event.target.value);\n    } else {\n      setVenueId(null);\n    }\n  };\n\n  const handlePartySizeChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setPartySize(event.target.value);\n  };\n\n  const handleTimePreferenceChange = (time: string) => {\n    setTimePreference((prevTimePreference) =>\n      prevTimePreference.includes(time)\n        ? prevTimePreference.filter((t) => t !== time)\n        : [...prevTimePreference, time]\n    );\n    setTimeRanking((prevTimeRanking) =>\n      prevTimeRanking.includes(time)\n        ? prevTimeRanking.filter((t) => t !== time)\n        : [...prevTimeRanking, time]\n    );\n  };\n\n  const availableTimeOptions = Array.from({ length: 20 }, (_, i) => {\n    const hour = 17 + Math.floor(i / 4);\n    const minute = (i % 4) * 15;\n    return `${hour.toString().padStart(2, \"0\")}:${minute\n      .toString()\n      .padStart(2, \"0\")}`;\n  });\n\n  return (\n    <Box>\n      <h1>Reservation Details</h1>\n      <form>\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n          <Grid item>\n            <Typography variant=\"body1\">Venue</Typography>\n            <Box sx={{ my: 2 }}>\n              <FormControl\n                fullWidth\n                variant=\"outlined\"\n                size=\"medium\"\n                sx={{ bgcolor: \"white\", width: \"150%\" }}\n              >\n                <InputLabel htmlFor=\"venue-id-select\">Restaurant</InputLabel>\n                <Select\n                  label=\"Restaurant\"\n                  value={venueId}\n                  onChange={handleVenueIdChange}\n                  inputProps={{\n                    name: \"venue-id\",\n                    id: \"venue-id-select\",\n                  }}\n                  sx={{ bgcolor: \"white\" }}\n                >\n                  {venues.map((venue) => (\n                    <MenuItem key={venue.id} value={venue.id}>\n                      {venue.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Box>\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"Date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              value={day ? day.toISOString().split(\"T\")[0] : \"\"}\n              onChange={(event) =>\n                setDay(event.target.value ? new Date(event.target.value) : null)\n              }\n              sx={{ bgcolor: \"white\" }}\n            />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"body1\">Time</Typography>\n            <Box sx={{ my: 2 }}>\n              <Grid container spacing={2}>\n                {availableTimeOptions.map((option, index) => (\n                  <Grid item xs={3} key={option}>\n                    <TimeChip\n                      label={option}\n                      onClick={() => handleTimePreferenceChange(option)}\n                      color={\n                        timePreference.includes(option) ? \"primary\" : \"default\"\n                      }\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Box>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"body1\">Selected Times Ranking</Typography>\n            <Box\n              sx={{\n                my: 2,\n                display: \"flex\",\n                gap: 1,\n                flexDirection: \"column\",\n              }}\n            >\n              {timeRanking.map((time, index) => (\n                <Box\n                  key={time}\n                  sx={{\n                    display: \"flex\",\n                    gap: 1,\n                  }}\n                >\n                  <Paper\n                    elevation={3}\n                    sx={{\n                      p: 1,\n                      minWidth: 50,\n                      minHeight: 40,\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                      border: \"1px solid black\",\n                      bgcolor: \"white\",\n                    }}\n                  >\n                    <Typography>{index + 1}.</Typography>\n                  </Paper>\n                  <Paper\n                    elevation={3}\n                    sx={{\n                      p: 1,\n                      minWidth: 100,\n                      minHeight: 40,\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                      border: \"1px solid black\",\n                      bgcolor: \"white\",\n                    }}\n                  >\n                    <Typography>{time}</Typography>\n                  </Paper>\n                </Box>\n              ))}\n            </Box>\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"Party Size:\"\n              value={partySize}\n              onChange={handlePartySizeChange}\n              sx={{ bgcolor: \"white\" }}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n};\nexport default ResyReservation;\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/f04800475b9a1e8207f234a1c2e3d65cb1e5c3257416f47c17173c33a98cba28/widget/Untitled-0", "fact_widget_deployments_id": "b7cda812a65f2d0596ee953ac3546064", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 41}