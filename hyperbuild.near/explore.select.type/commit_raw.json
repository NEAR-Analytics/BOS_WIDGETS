{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "explore.select.type", "source_code": "const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst Button = styled.button``;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Select = styled.select``;\nconst Label = styled.label``;\nconst Input = styled.input``;\nconst initialTypeSrc = props.typeSrc || \"hyperfiles.near\";\nconst [newTypeSrc, setNewTypeSrc] = useState(initialTypeSrc);\nconst [typeSrc, setTypeSrc] = useState(initialTypeSrc);\nconst [selectedType, setSelectedType] = useState(props.selectedType || \"\");\nconst [availableTypes, setAvailableTypes] = useState([]);\nconst [isLoading, setIsLoading] = useState(true);\nconst [fetchedData, setFetchedData] = useState({}); // State for debugging\nuseEffect(() => {\n  setIsLoading(true);\n  const fetchTypesList = () => {\n    const query = typeSrc === \"*\" ? \"*/type/**\" : `${typeSrc}/type/**`;\n    const types = Social.get(query, \"final\");\n    setFetchedData(types); // Store raw data for debugging\n    if (types) {\n      let typesSet = new Set();\n      if (typeSrc === \"*\") {\n        // Collect types from all fetched data\n        Object.values(types).forEach((accountTypes) => {\n          Object.values(accountTypes).forEach((typeObj) => {\n            Object.keys(typeObj).forEach((typeName) => {\n              typesSet.add(typeName);\n            });\n          });\n        });\n      } else {\n        // Types from a specific account\n        Object.keys(types).forEach((key) => typesSet.add(key));\n      }\n      setAvailableTypes(Array.from(typesSet));\n    } else {\n      setAvailableTypes([]);\n    }\n    setIsLoading(false);\n  };\n  fetchTypesList();\n}, [typeSrc]);\nuseEffect(() => {\n  setSelectedType(props.selectedType);\n}, [props.selectedType]);\nconst handleTypeChange = (event) => {\n  setSelectedType(event.target.value);\n  if (props.onSelectedTypeChange) {\n    props.onSelectedTypeChange(event.target.value);\n  }\n};\nconst handleTypeSrcChange = (event) => {\n  setNewTypeSrc(event.target.value);\n};\nconst applyTypeSrc = () => {\n  setTypeSrc(newTypeSrc);\n};\nconst showAllTypes = () => {\n  setTypeSrc(\"*\");\n};\nreturn (\n  <FormContainer>\n    <Label>Import Type for Editing:</Label>\n    <Row>\n      <Input\n        type=\"text\"\n        value={state.newType}\n        onChange={(e) => State.update({ newType: e.target.value })}\n        placeholder={\"accountId/type/Type\"}\n      />\n      <Button onClick={loadType}>load</Button>\n    </Row>\n    <Label>Import Property Types:</Label>\n    <Row>\n      <Input\n        type=\"text\"\n        onChange={handleTypeSrcChange}\n        value={newTypeSrc}\n        placeholder=\"accountId\"\n      />\n      <Button onClick={applyTypeSrc}>Apply</Button>\n    </Row>\n    <Label>Select Type to Edit:</Label>\n    <Row>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <Select value={selectedType} onChange={handleTypeChange}>\n          <option value=\"\">Choose a type</option>\n          {availableTypes.map((type) => (\n            <option key={type} value={type}>\n              {type}\n            </option>\n          ))}\n        </Select>\n      )}\n      <p />\n      <Button onClick={showAllTypes}>Show All</Button>\n    </Row>\n  </FormContainer>\n);\n// <pre>{JSON.stringify(fetchedData, null, 2)}</pre> {/* Debug output */}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/explore.select.type", "fact_widget_deployments_id": "b1ce5c342b931cbbe526a3279b9e7ab5", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 0}