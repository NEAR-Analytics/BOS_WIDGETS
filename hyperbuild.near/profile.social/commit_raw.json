{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "profile.social", "source_code": "const darkColors = {\n  page_bg: \"rgb(25,33,50)\",\n  horizen_bg: \"#fff\",\n  header_bg: \"rgb(49,62,89)\",\n  sideBar: {\n    sideBar_bg: \"rgb(49,62,89)\",\n    sideBar_color: \"#fff\",\n  },\n  footer: {\n    titlenelowBackground: \"#806ce1\",\n    titleBackground: \"#fff\",\n    fromBackground: \"rgb(55,72,107)\",\n    toBackground: \"rgb(55,72,107)\",\n    belowBackground: \"rgb(210, 202, 250)\",\n  },\n  dynamic_header: {\n    afterbrandcolor: \"\",\n    color1brand: \"#fff\",\n    color2brand: \"rgb(210, 202, 250)\",\n    colordescription: \"rgb(210, 202, 250)\",\n    background:\n      \"radial-gradient(circle, rgb(49,62,89) 0%, rgba(230,230,231,0.01) 0%, rgb(49,62,89) 100%, rgb(49,62,89) 100%, rgb(49,62,89) 100%, rgba(46,52,90,1) 100%);\",\n  },\n  search_sbt: {\n    section_bg: \"transparent\",\n    card_bg: \"transparent)\",\n    search_btn_bg: \"rgb(49,62,89)\",\n    search_btn_bg_hover: \"rgba(49,62,89,0.8)\",\n    search_btn_text: \"rgb(255,255,255)\",\n    input_bg: \"rgb(49,62,89)\",\n    input_bg_hover: \"rgba(49,62,89,0.8)\",\n    input_text_color: \"rgb(255,255,255)\",\n    input_border: \"rgba(49,62,89,0.8)\",\n    table_bg: \"transparent\",\n    table_color: \"rgb(255,255,255)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(255,255,255)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(255,255,255)\",\n    table_hover_bg: \"\",\n  },\n  profileInlineBlock: {\n    name: \"#fff\",\n    accountId: \"#fff\",\n    tag: \"#fff\",\n    description: \"#fff\",\n  },\n  table_pagination: {\n    table_bg: \"rgb(49,62,89)\",\n    table_color: \"rgb(255,255,255)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(255,255,255)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(255,255,255)\",\n    table_hover_bg: \"\",\n    btn_border: \"rgb(25,33,50)\",\n    btn_bg: \"rgb(49,62,89)\",\n    btn_bg_active: \"rgb(25,33,50)\",\n    btn_color: \"#fff\",\n    input_bg: \"#2f3b54\",\n  },\n  card: {\n    card_bg: \"rgb(49,62,89)\",\n    tabSelect_bg: \"#192132\",\n    tabSelect_text_color: \"#fff\",\n    tabSelect_input_bg: \"rgb(49,62,89)\",\n    tabSelect_btn_active_bg: \"rgb(49,62,89)\",\n    text_color: \"rgba(255,255,255,1)\",\n  },\n  chart: {\n    title: \"rgb(255,255,255)\",\n    subtitle: \"rgba(255,255,255,0.7)\",\n    xAxis: \"rgb(255,255,255)\",\n    yAxis: \"rgb(255,255,255)\",\n    legend: \"rgba(255,255,255,0.7)\",\n    legendHover: \"rgb(255,255,255)\",\n    rangeSelector: {\n      labels: \"rgba(255,255,255,0.7)\",\n      inputColor: \"rgb(255,255,255)\",\n      btn_bg: \"rgba(25,33,50,0.3)\",\n      btn_color: \"rgba(255,255,255,0.7)\",\n      btn_hover_bg: \"rgba(25,33,50,0.5)\",\n      btn_hover_color: \"rgba(255,255,255,0.8)\",\n      btn_active_bg: \"rgba(25,33,50,0.8)\",\n      btn_active_color: \"rgb(255,255,255)\",\n    },\n  },\n  tree: {\n    subject: {\n      color: \"#fff\",\n      fontweight: 400,\n      fontSize: \"2em\",\n    },\n    nodes: {\n      color: \"#fff\",\n      // borderColor: \"#fff\",\n      backgroundColor: \"rgb(49,62,89)\",\n    },\n    overrideNodeStyles: {\n      // backgroundColor: \"red\",\n    },\n  },\n  spinnerColors: [\"#6F61C0\", \"#241468\"],\n  chartColor: [\n    \"#F79BD3\",\n    \"#A084E8\",\n    \"#EA1179\",\n    \"#F79BD3\",\n    \"#A084E8\",\n    \"#6F61C0\",\n    \"#241468\",\n    \"#9F0D7F\",\n  ],\n};\nconst lightColors = {\n  page_bg: \"#fff\",\n  horizen_bg: \"#391b86\",\n  header_bg: \"rgb(210, 202, 250)\",\n  sideBar: {\n    sideBar_bg: \"rgb(210, 202, 250)\",\n    sideBar_color: \"#fff\",\n  },\n  footer: {\n    titlenelowBackground: \"#806ce1\",\n    titleBackground: \"#fff\",\n    fromBackground: \"rgb(210, 202, 250)\",\n    toBackground: \"rgb(210, 202, 250)\",\n    belowBackground: \"#806ce1\",\n  },\n  dynamic_header: {\n    afterbrandcolor: \"#789efb\",\n    color1brand: \"#000\",\n    color2brand: \"#806ce1\",\n    colordescription: \"#806ce1\",\n    background:\n      \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(210,202,250,0.01) 0%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n  },\n  search_sbt: {\n    section_bg: \"rgb(235, 231, 253)\",\n    card_bg: \"\",\n    search_btn_bg: \"rgb(210, 202, 250)\",\n    search_btn_bg_hover: \"rgba(210, 202, 250,0.8)\",\n    search_btn_text: \"rgb(0,0,0)\",\n    input_bg: \"rgba(210, 202, 250,0.2)\",\n    input_bg_hover: \"rgba(210, 202, 250,0.4)\",\n    input_text_color: \"rgb(0,0,0)\",\n    input_border: \"rgba(210, 202, 250,0.4)\",\n    table_bg: \"transparent\",\n    table_color: \"rgb(0,0,0)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(0,0,0)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(0,0,0)\",\n    table_hover_bg: \"\",\n  },\n  profileInlineBlock: {\n    name: \"#000\",\n    accountId: \"#000\",\n    tag: \"#000\",\n    description: \"#000\",\n  },\n  table_pagination: {\n    table_bg: \"rgb(255,255,255)\",\n    table_color: \"rgb(0,0,0)\",\n    table_border_color: \"\",\n    table_accent_bg: \"\",\n    table_striped_color: \"rgb(0,0,0)\",\n    table_striped_bg: \"\",\n    table_hover_color: \"rgb(0,0,0)\",\n    table_hover_bg: \"\",\n    btn_border: \"#000\",\n    btn_border: \"#806ce1\",\n    btn_bg: \"#fff\",\n    btn_bg_active: \"rgb(235, 231, 253)\",\n    btn_color: \"#000\",\n  },\n  card: {\n    card_bg: \"rgb(255, 255, 255)\",\n    tabSelect_bg: \"#e6e6e7\",\n    tabSelect_text_color: \"#000\",\n    tabSelect_input_bg: \"rgb(210, 202, 250)\",\n    tabSelect_btn_active_bg: \"rgb(210, 202, 250)\",\n    text_color: \"rgba(0,0,0,1)\",\n  },\n  chart: {\n    title: \"rgba(0,0,0,1)\",\n    subtitle: \"rgba(0,0,0,0.7)\",\n    xAxis: \"rgba(0,0,0,1)\",\n    yAxis: \"rgba(0,0,0,1)\",\n    legend: \"rgba(0,0,0,0.7)\",\n    legendHover: \"rgba(0,0,0,1)\",\n    rangeSelector: {\n      labels: \"rgba(0,0,0,0.7)\",\n      inputColor: \"rgba(0,0,0,0.5)\",\n      btn_bg: \"rgba(0,0,0,0.3)\",\n      btn_color: \"rgba(0,0,0,0.8)\",\n      btn_hover_bg: \"rgba(0,0,0,0.4)\",\n      btn_hover_color: \"rgba(0,0,0,1)\",\n      btn_active_bg: \"rgb(235, 231, 253)\",\n      btn_active_color: \"rgba(0,0,0,1)\",\n    },\n  },\n  tree: {\n    subject: {\n      color: \"#000\",\n      fontweight: 400,\n      fontSize: \"2em\",\n    },\n    nodes: {\n      color: \"#000\",\n      // borderColor: \"#000\",\n      backgroundColor: \"#fff\",\n    },\n    overrideNodeStyles: {\n      // backgroundColor: \"red\",\n    },\n  },\n  spinnerColors: [\"#6F61C0\", \"#241468\"],\n  chartColor: [\n    \"#F79BD3\",\n    \"#A084E8\",\n    \"#EA1179\",\n    \"#F79BD3\",\n    \"#A084E8\",\n    \"#6F61C0\",\n    \"#241468\",\n    \"#9F0D7F\",\n  ],\n};\nconst themeColor = props.themeColor || lightColors;\n// const themeColor = props.themeColor || lightColors;\n// #####################################\nState.init({\n  singer: context.accountId || \"hyperfiles.near\",\n  result: [],\n  data: context.accountId || \"hyperfiles.near\",\n  isLoading: false,\n  error: [],\n});\nconst inputHandler = ({ target }) => {\n  const singer = target.value.toLowerCase().trim();\n  State.update({ singer: singer });\n};\nconst handleData = () => {\n  if (!state.singer.length) {\n    State.update({ error: [...state.error, \"please insert an address\"] });\n    return;\n  }\n  if (state.data === state.singer) {\n    State.update({ error: [...state.error, \"please insert a new address\"] });\n    return;\n  }\n  State.update({ data: state.singer });\n};\nif (state.error.length > 0) {\n  function hide() {\n    const errors = state.error;\n    errors.shift();\n    if (errors.length > 0) setTimeout(hide, 2500);\n    State.update({ error: errors });\n  }\n  setTimeout(hide, 2500);\n}\nconst Input = styled.input`\n  color: ${themeColor?.search_sbt?.input_text_color};\n  background-color: ${themeColor?.search_sbt?.input_bg};\n  border: 1px solid ${themeColor?.search_sbt?.input_border};\n  &:focus {\n    background-color: ${themeColor?.search_sbt?.input_bg};\n    color: ${themeColor?.search_sbt?.input_text_color};\n    border: 1px solid ${themeColor?.search_sbt?.input_border};\n  }\n  &:hover {\n    background-color: ${themeColor?.search_sbt?.input_bg_hover};\n  }\n`;\nconst Button = styled.button`\n  color: ${themeColor?.search_sbt?.search_btn_text};\n  font-size: 16px;\n  padding: 0.5rem 1rem;\n  font-weight: 400;\n  background-color: ${themeColor?.search_sbt?.search_btn_bg};\n  &:hover {\n    background-color: ${themeColor?.search_sbt?.search_btn_bg_hover};\n  }\n  border: 1px solid ${themeColor?.search_sbt?.search_btn_bg};\n  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.02);\n  min-height: calc(1.5em + 1rem + 2px);\n  border-radius: 40px;\n  line-height: 29px;\n  letter-spacing: 0.01em;\n`;\n// -------------------------------------------------------------------\nconst singer = state.data;\nconst status = Social.index(\"notify\", singer, { order: \"desc\" }) || [];\nconst receivedPoke = status.filter(\n  (notification) => notification?.value?.type === \"poke\"\n);\nconst numReceivedPoke = receivedPoke?.length || 0;\nconst receivedLike = status.filter(\n  (notification) => notification?.value?.type === \"like\"\n);\nconst numReceivedLike = receivedLike?.length || 0;\nconst receivedComment = status.filter(\n  (notification) => notification?.value?.type === \"comment\"\n);\nconst numReceivedComment = receivedComment?.length || 0;\nconst receivedRepost = status.filter(\n  (notification) => notification?.value?.type === \"repost\"\n);\nconst numReceivedRepost = receivedRepost?.length || 0;\nconst nummention =\n  status.filter((notification) =>\n    notification?.value?.type.includes?.(\"mention\")\n  ).length || 0;\n//---------------------------------------------------part1------------------------------------------------------\nconst following = Social.keys(`${singer}/graph/follow/*`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst numFollowing = following\n  ? Object.keys(following[singer]?.graph?.follow || {}).length\n  : 0;\n//---------------------------\nconst followers = Social.keys(`*/graph/follow/${singer}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\nconst numFollowers = followers ? Object.keys(followers || {}).length : 0;\n//--------------------------\nconst likes = Social.keys(`${singer}/index/like`, \"final\", {\n  return_type: \"History\",\n});\nconst numlikes = likes\n  ? Object.keys(likes[singer]?.index?.like || {}).length\n  : 0;\n//--------------------------\nconst posts = Social.keys(`${singer}/index/post`, \"final\", {\n  return_type: \"History\",\n});\nconst numposts = posts\n  ? Object.keys(posts[singer]?.index?.post || {}).length\n  : 0;\n//--------------------------\nconst comments = Social.keys(`${singer}/post/comment`, \"final\", {\n  return_type: \"History\",\n});\nconst numcomments = comments\n  ? Object.keys(comments[singer]?.post?.comment || {}).length\n  : 0;\n//--------------------------\nconst tx_widgets = Social.keys(`${singer}/widget`, \"final\", {\n  return_type: \"History\",\n});\nconst tx_numwidgets = tx_widgets\n  ? Object.keys(tx_widgets[singer]?.widget || {}).length\n  : 0;\n//--------------------------\nconst reposts = Social.keys(`${singer}/index/repost`, \"final\", {\n  return_type: \"History\",\n});\nconst numreposts = reposts\n  ? Object.keys(reposts[singer]?.index?.repost || {}).length\n  : 0;\n//--------------------------\n// const pokes = Social.keys(`${singer}/*`, \"final\", {\n//   return_type: \"History\",\n// });\n// const numPokes = pokes\n//   ? Object.keys(pokes[singer].index.graph || {}).length\n//   : 0;\nconst numPokes = \"N/A\";\n//--------------------------\nconst allTx = Social.keys(`${singer}/*`, \"final\", {\n  return_type: \"History\",\n}) || { [singer]: [] };\nconst joinDateTimeBlock =\n  Object.values(allTx[singer] || {})\n    .flat()\n    .sort((a, b) => a - b)[0] || \"-\";\nlet joinDate = fetch(\n  \"https://api.near.social/time?blockHeight=\" + joinDateTimeBlock\n).body;\njoinDate = Number.isInteger(joinDate)\n  ? `${new Date(joinDate).getFullYear()}/${\n      new Date(joinDate).getMonth() + 1\n    }/${new Date(joinDate).getDate()}`\n  : \"-\";\n//--------------------------\nconst hashtag = Social.keys(`${singer}/index/hashtag`, \"final\", {\n  return_type: \"History\",\n});\nconst numHashtags = hashtag\n  ? Object.keys(hashtag[singer]?.index?.hashtag || {}).length\n  : 0;\n//--------------------------\nconst widgets = Social.keys(`${singer ?? \"*\"}/widget/*`, \"final\", {\n  return_type: \"History\",\n});\n// console.log(\"widgets\", widgets);\nconst numWidgets = widgets[singer]?.widget\n  ? Object.keys(widgets[singer]?.widget || {}).length\n  : 0;\n//--------------------------\nconst forkof = Social.keys(`${singer}/widget/*/metadata/fork_of`, \"final\", {\n  return_type: \"History\",\n});\nconst numForkof = forkof ? Object.keys(forkof[singer]?.widget || {}).length : 0;\n//--------------------------\nconst un_star = Social.keys(`${singer}/index/star`, \"final\", {\n  return_type: \"History\",\n});\nconst numUn_star = un_star\n  ? Object.keys(un_star[singer]?.index?.star || {}).length\n  : 0;\n//--------------------------\n// const totalTx = Social.keys(`${singer}/*`, \"final\", {\n//   return_type: \"History\",\n// });\n// const numTotalTx = totalTx\n//   ? new Set(Object.values(totalTx[singer] || {}).flat()).size\n//   : 0;\nconst totalTx = fetch(\n  `https://api.nearblocks.io/v1/account/${singer}/txns/count?to=social.near`\n).body;\nconst numTotalTx = totalTx ? totalTx.txns[0]?.count ?? \"-\" : \"-\";\n//--------------------------\n//-----------------------------------------------part1----------------------------------------------------\n//-----------------------------------------------part2----------------------------------------------------\nconst generaltheme = {\n  height: \"90px\",\n  align: \"center\",\n  description: \"\",\n  brand: \"BOS Activity\",\n  fontsize: \"35px\",\n  fontweight: \"25px\",\n  afterbrand: \"Profile\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst baseHeaderDynamic = {\n  height: \"80px\",\n  align: \"center\",\n  description: ``,\n  brand: ``,\n  fontsize: \"15px\",\n  fontweight: \"10px\",\n  afterbrand: \"\",\n  afterbrandcolor: themeColor?.dynamic_header?.afterbrandcolor || \"#789efb\",\n  fontbrand: \" Arial, sans-serif\",\n  color1brand: themeColor?.dynamic_header?.color1brand || \"#000\",\n  color2brand: themeColor?.dynamic_header?.color2brand || \"#806ce1\",\n  colordescription: themeColor?.dynamic_header?.colordescription || \"#806ce1\",\n  fontsubtitle: \" Arial, sans-serif\",\n  background:\n    themeColor?.dynamic_header?.background ||\n    \"radial-gradient(circle, rgba(210,202,250,1) 0%, rgba(230,230,231,0.01) 0%, rgba(235,238,255,1) 100%, rgba(235,231,253,1) 100%, rgba(255,241,241,1) 100%, rgba(46,52,90,1) 100%);\",\n};\nconst cardObjects = [\n  {\n    name: \"followers\",\n    description: `${numFollowers}`,\n    brand: \"Followers\",\n    afterbrand: \"\",\n  },\n  {\n    name: \"followings\",\n    description: `${numFollowing}`,\n    brand: \"Followings\",\n    afterbrand: \"\",\n  },\n  { name: \"posts\", description: `${numposts}`, brand: \"Posts\", afterbrand: \"\" },\n  {\n    name: \"reposts\",\n    description: `${numreposts}`,\n    brand: \"Reposts\",\n    afterbrand: \"\",\n  },\n  {\n    name: \"comments\",\n    description: `${numcomments}`,\n    brand: \"Comments\",\n    afterbrand: \"\",\n  },\n  { name: \"likes\", description: `${numlikes}`, brand: \"Likes\", afterbrand: \"\" },\n  {\n    name: \"pokes\",\n    description: `${numPokes}`,\n    brand: \"Pokes\",\n    afterbrand: \"\",\n    offChart: true,\n  },\n  {\n    name: \"tx_widgets\",\n    description: `${tx_numwidgets}`,\n    brand: \"Widgets (trx)\",\n    afterbrand: \"\",\n    offChart: true,\n  },\n  {\n    name: \"received_pokes\",\n    description: `${numReceivedPoke}`,\n    brand: \"Received\",\n    afterbrand: \"Pokes\",\n  },\n  {\n    name: \"received_likes\",\n    description: `${numReceivedLike}`,\n    brand: \"Received\",\n    afterbrand: \"Likes\",\n  },\n  {\n    name: \"received_comments\",\n    description: `${numReceivedComment}`,\n    brand: \"Received\",\n    afterbrand: \"Comments\",\n  },\n  {\n    name: \"received_reposts\",\n    description: `${numReceivedRepost}`,\n    brand: \"Received\",\n    afterbrand: \"Reposts\",\n  },\n  {\n    name: \"mentions\",\n    description: `${nummention}`,\n    brand: \"Mentions\",\n    afterbrand: \"\",\n    offChart: true,\n  },\n  {\n    name: \"widgets\",\n    description: `${numWidgets}`,\n    brand: \"Widgets\",\n    afterbrand: \"\",\n  },\n  {\n    name: \"joinDate\",\n    description: `${joinDate}`,\n    brand: \"Join Date\",\n    afterbrand: \"\",\n    offChart: true,\n    offGrid: true,\n  },\n  {\n    name: \"hashtags\",\n    description: `${numHashtags}`,\n    brand: \"Hashtags\",\n    afterbrand: \"\",\n    offChart: true,\n  },\n  {\n    name: \"forkof\",\n    description: `${numForkof}`,\n    brand: \"Forks\",\n    afterbrand: \"\",\n    offChart: true,\n  },\n  {\n    name: \"star-unstar\",\n    description: `${numUn_star}`,\n    brand: \"Un/star\",\n    afterbrand: \"\",\n  },\n  {\n    name: \"total-tx\",\n    description: `${numTotalTx}`,\n    brand: \"Total trx\",\n    afterbrand: \"\",\n    offChart: true,\n    offGrid: true,\n  },\n];\n//---------------------------------------------------------------------------------------------------\nconst SearchInput = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"search p-4\"\n  >\n    <div className=\"row\">\n      <div className=\"col-8 \">\n        <Input\n          onBlur={inputHandler}\n          defaultValue={state.singer}\n          type=\"input\"\n          className=\"form-control form-control-lg rounded-4\"\n          id=\"address\"\n          placeholder=\"jlw.near\"\n        />\n      </div>\n      <div className=\"col-4 col-lg-auto\">\n        <Button\n          disabled={state.isLoading}\n          onClick={handleData}\n          className=\"btn-lg\"\n          type=\"button\"\n        >\n          {state.isLoading ? (\n            <div className=\"text-center px-4\">\n              <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n          ) : (\n            \"search\"\n          )}\n        </Button>\n      </div>\n    </div>\n  </div>\n);\nconst TableSection = (\n  <div\n    style={{ background: themeColor?.sbt_area?.section_bg }}\n    className=\"shadow-sm rounded-2 overflow-auto p-2\"\n  >\n    <div\n      className=\"container\"\n      style={{\n        boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\n      }}\n    >\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Widget\n                src=\"lord1.near/widget/nearwidgetProfile\"\n                props={{\n                  accountId: singer,\n                  themeColor: {\n                    profile_large: themeColor.profile_large,\n                    profileInlineBlock: { ...themeColor.profileInlineBlock },\n                  },\n                }}\n              />\n            </div>\n            <div className=\"col-md-4\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={{\n                  ...baseHeaderDynamic,\n                  ...cardObjects.find((o) => o.name === \"joinDate\"),\n                }}\n              />\n            </div>\n            <div className=\"col-md-2\">\n              <Widget\n                src=\"lord1.near/widget/header-dynamic\"\n                props={{\n                  ...baseHeaderDynamic,\n                  ...cardObjects.find((o) => o.name === \"total-tx\"),\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"row\">\n            {cardObjects\n              .filter((o) => !o.offGrid)\n              .map((card) => (\n                <div key={card.name} className=\"col-md-2\">\n                  <Widget\n                    src=\"lord1.near/widget/header-dynamic\"\n                    props={{ ...baseHeaderDynamic, ...card }}\n                  />\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n// ---------------------  pie chart ------------------------\nconst getPieProps = (data, [key, value], colors, chartOption) => {\n  data = data || [];\n  colors = colors || [];\n  chartOption = chartOption || {};\n  const dataFormat = data.map((s) => [s[key], s[value]]);\n  const props = {\n    data: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      type: \"pie\",\n      legend: false,\n      connector: false,\n      ...chartOption,\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\nconst pieChartData = () => {\n  return cardObjects\n    .filter((o) => !o.offChart)\n    .map((o) => {\n      return {\n        title: `${o.brand} ${o.afterbrand}`,\n        value: Number.parseInt(o.description),\n      };\n    });\n};\nconst PieChart = (\n  <div\n    className=\"col-lg-8\"\n    style={{\n      boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\n    }}\n  >\n    <div\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\n      className=\"shadow-sm rounded-4 \"\n    >\n      <Widget\n        src=\"lord1.near/widget/Pie-chart\"\n        props={getPieProps(\n          pieChartData(),\n          [\"title\", \"value\"],\n          themeColor.chartColor,\n          {\n            title: \"Social Actions\",\n            subtitle: \"Social Actions\",\n            type: \"pie\",\n            connector: true,\n            legend: true,\n          }\n        )}\n      />\n    </div>\n  </div>\n);\n// -------------------- mix chart -------------------\nlet blockHeightData = fetch(\n  `https://api.flipsidecrypto.com/api/v2/queries/6b01d203-0d80-4e70-84ee-c6aa37578ce8/data/latest`\n);\nblockHeightData = blockHeightData.body || [];\nconst getMixData = (accountId) => {\n  const myData = {};\n  const initDataValue = {\n    follower: 0,\n    follow: 0,\n    like: 0,\n    post: 0,\n    comment: 0,\n    repost: 0,\n    un_star: 0,\n    receivedComment: 0,\n    receivedLike: 0,\n    receivedPoke: 0,\n    receivedRepost: 0,\n    widgets: 0,\n  };\n  followers &&\n    Object.values(followers).forEach((i) => {\n      const count = myData[i.graph.follow[accountId]];\n      myData[i.graph.follow[accountId]] = {\n        ...initDataValue,\n        ...count,\n        follower: (count.follower ?? 0) + 1,\n      };\n    });\n  following &&\n    Object.values(following[accountId]?.graph?.follow || {}).forEach((i) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        follow: (count.follow ?? 0) + 1,\n      };\n    });\n  likes &&\n    Object.values(likes[accountId]?.index?.like || {}).forEach((i) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        like: (count.like ?? 0) + 1,\n      };\n    });\n  posts &&\n    Object.values(posts[accountId]?.index?.post || {}).forEach((i) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        post: (count.post ?? 0) + 1,\n      };\n    });\n  comments &&\n    Object.values(comments[accountId]?.post?.comment || {}).forEach((i) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        comment: (count.comment ?? 0) + 1,\n      };\n    });\n  reposts &&\n    Object.values(reposts[accountId]?.index?.repost || {}).forEach((i) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        repost: (count.repost ?? 0) + 1,\n      };\n    });\n  un_star &&\n    Object.values(un_star[accountId]?.index?.star || {}).forEach((i) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        un_star: (count.un_star ?? 0) + 1,\n      };\n    });\n  receivedComment.forEach(({ blockHeight }) => {\n    const count = myData[blockHeight];\n    myData[blockHeight] = {\n      ...initDataValue,\n      ...count,\n      receivedComment: (count.receivedComment ?? 0) + 1,\n    };\n  });\n  receivedLike.forEach(({ blockHeight }) => {\n    const count = myData[blockHeight];\n    myData[blockHeight] = {\n      ...initDataValue,\n      ...count,\n      receivedLike: (count.receivedLike ?? 0) + 1,\n    };\n  });\n  receivedPoke.forEach(({ blockHeight }) => {\n    const count = myData[blockHeight];\n    myData[blockHeight] = {\n      ...initDataValue,\n      ...count,\n      receivedPoke: (count.receivedPoke ?? 0) + 1,\n    };\n  });\n  receivedRepost.forEach(({ blockHeight }) => {\n    const count = myData[blockHeight];\n    myData[blockHeight] = {\n      ...initDataValue,\n      ...count,\n      receivedRepost: (count.receivedRepost ?? 0) + 1,\n    };\n  });\n  widgets &&\n    Object.values(widgets[accountId]?.widget || {}).forEach(([i]) => {\n      const count = myData[i];\n      myData[i] = {\n        ...initDataValue,\n        ...count,\n        widgets: (count.widgets ?? 0) + 1,\n      };\n    });\n  return myData;\n};\nconst splitTime = () => {\n  let timeIndex = 0;\n  const splitedData = {};\n  Object.entries(getMixData(singer)).forEach(([blockTime, counts]) => {\n    for (; timeIndex <= blockHeightData.length; ++timeIndex) {\n      if (\n        timeIndex === 0 &&\n        Number(blockTime) < blockHeightData[timeIndex].min_block\n      ) {\n        break;\n      }\n      if (\n        (Number(blockTime) >= blockHeightData[timeIndex].min_block &&\n          Number(blockTime) <= blockHeightData[timeIndex].max_block) ||\n        (timeIndex === blockHeightData.length - 1 &&\n          Number(blockTime) > blockHeightData[timeIndex].max_block)\n      ) {\n        const prevCount = splitedData[blockHeightData[timeIndex].date] ?? {\n          follower: 0,\n          follow: 0,\n          like: 0,\n          post: 0,\n          comment: 0,\n          repost: 0,\n          un_star: 0,\n          receivedComment: 0,\n          receivedLike: 0,\n          receivedPoke: 0,\n          receivedRepost: 0,\n          widgets: 0,\n        };\n        const newCount = {\n          follower: prevCount.follower + counts.follower,\n          follow: prevCount.follow + counts.follow,\n          like: prevCount.like + counts.like,\n          post: prevCount.post + counts.post,\n          comment: prevCount.comment + counts.comment,\n          repost: prevCount.repost + counts.repost,\n          un_star: prevCount.un_star + counts.un_star,\n          receivedComment: prevCount.receivedComment + counts.receivedComment,\n          receivedLike: prevCount.receivedLike + counts.receivedLike,\n          receivedPoke: prevCount.receivedPoke + counts.receivedPoke,\n          receivedRepost: prevCount.receivedRepost + counts.receivedRepost,\n          widgets: prevCount.widgets + counts.widgets,\n        };\n        splitedData[blockHeightData[timeIndex].date] = newCount;\n        break;\n      } else {\n        continue;\n      }\n    }\n  });\n  return Object.entries(splitedData).map(([date, values]) => {\n    return { date: new Date(date).getTime(), ...values };\n  });\n};\nconst getMixProps = (data, dateKey, serieses, colors, chartOption) => {\n  data = data || [];\n  serieses = serieses || [{ key: \"\", seriesName: \"\", type: \"\", id: 1 }];\n  colors = colors || [];\n  chartOption = chartOption || {};\n  const dataFormat = serieses.map((series) => {\n    const dataFormated = data.map((d) => [d[dateKey], d[series.key] || null]);\n    return {\n      data: dataFormated,\n      name: series.seriesName,\n      type: series.type,\n      axisId: series.id,\n    };\n  });\n  const props = {\n    series: dataFormat,\n    colors: colors,\n    chartOption: {\n      title: \"chart title\",\n      subtitle: \"chart subtitle\",\n      legend: true,\n      stacking: \"false\",\n      ...chartOption,\n    },\n    overrideOptions: {\n      plotOptions: {\n        column: {\n          stacking: \"false\",\n        },\n        series: {\n          dataGrouping: { enabled: false },\n        },\n      },\n    },\n    themeColor: { chart: themeColor.chart },\n    spinnerColors: themeColor.spinnerColors,\n  };\n  return props;\n};\nconst MixChart = (\n  <div className=\"col-lg-12\">\n    <div\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\n      className=\"shadow-sm rounded-4\"\n    >\n      <Widget\n        src=\"lord1.near/widget/mix-chart\"\n        props={getMixProps(\n          splitTime(),\n          \"date\",\n          [\n            {\n              key: \"follow\",\n              seriesName: \"Follow\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"follower\",\n              seriesName: \"Follower\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"like\",\n              seriesName: \"Like\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"post\",\n              seriesName: \"Post\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"comment\",\n              seriesName: \"Comment\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"repost\",\n              seriesName: \"Repost\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"un_star\",\n              seriesName: \"Un/Star\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"receivedRepost\",\n              seriesName: \"Received Repost\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"receivedLike\",\n              seriesName: \"Received Like\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"receivedComment\",\n              seriesName: \"Received Comment\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"receivedPoke\",\n              seriesName: \"Received Poke\",\n              type: \"column\",\n              id: 1,\n            },\n            {\n              key: \"widgets\",\n              seriesName: \"widgets\",\n              type: \"column\",\n              id: 1,\n            },\n          ],\n          themeColor.chartColor,\n          {\n            title: \"\",\n            subtitle: \"Daily social actions\",\n          }\n        )}\n      />\n    </div>\n  </div>\n);\n// --------------- social graph -------------------\nconst SocialGraph = (\n  <div\n    className=\"col-lg-4\"\n    style={{\n      boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\n    }}\n  >\n    <div\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\n      className=\"shadow-sm rounded-4\"\n    >\n      <Widget\n        key={state.data}\n        src=\"lord1.near/widget/SocialGraph\"\n        props={{\n          accountIds: [state.data, \"\"],\n          spinnerColors: themeColor.spinnerColors,\n        }}\n      />\n    </div>\n  </div>\n);\n// --------------- nodes -------------------\nconst Nodes = (\n  <div\n    className=\"col-lg-12 pb-4\"\n    style={{\n      boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\n    }}\n  >\n    <div\n      style={{ backgroundColor: themeColor?.sbt_info?.card_bg }}\n      className=\"shadow-sm rounded-4\"\n    >\n      <Widget\n        key={state.data}\n        src=\"hyperbuild.near/widget/explore.view.tree\"\n        props={{\n          rootPath: state.data,\n          themeColor: themeColor.tree,\n        }}\n      />\n    </div>\n  </div>\n);\n// -------------------------------------------\nreturn (\n  <div style={{ backgroundColor: themeColor.page_bg }}>\n    <Widget src=\"lord1.near/widget/header-dynamic\" props={generaltheme} />\n    {SearchInput}\n    {TableSection}\n    <div style={{ width: \"100%\", height: \"30px\" }}></div>\n    <div\n      className=\"row rounded-3\"\n      style={{\n        boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\n      }}\n    >\n      {PieChart}\n      {SocialGraph}\n    </div>\n    <div style={{ width: \"100%\", height: \"20px\" }}></div>\n    <div\n      style={{\n        boxShadow: \"2px 10px 20px rgba(128, 117, 226, 0.2)\",\n        backgroundColor: themeColor.card?.card_bg,\n      }}\n      className=\"p-2 rounded-3\"\n    >\n      <div className=\"row\">{MixChart}</div>\n    </div>\n    <div className=\"toast-container position-fixed bottom-0 end-0 p-3\">\n      {state.error.length > 0 &&\n        state.error.map((er) => (\n          <div\n            className=\"toast show align-items-center text-bg-danger border-0\"\n            role=\"alert\"\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n          >\n            <div className=\"d-flex\">\n              <div className=\"toast-body\">{er}</div>\n            </div>\n          </div>\n        ))}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/profile.social", "fact_widget_deployments_id": "28ad4c7b311a53f52005ceb1e77156dd", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 0}