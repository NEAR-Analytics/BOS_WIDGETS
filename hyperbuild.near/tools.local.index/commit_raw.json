{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "tools.local.index", "source_code": "const accountId = context.accountId;\nif (!accountId) {\n  return \"Please sign in with NEAR wallet\";\n}\nconst registeredPublicKey = Social.get(\n  `${accountId}/private_message/public_key`\n);\nconst savedSecretKeyBase64 = Storage.privateGet(\"secretKey\");\nif (savedSecretKeyBase64 === null || registeredPublicKey === null)\n  return \"Loading\";\n// Utility function to retrieve secret key\nconst getSecretKey = () => {\n  const accountId = context.accountId;\n  if (!accountId) {\n    return null;\n  }\n  const registeredPublicKey = Social.get(\n    `${accountId}/private_message/public_key`\n  );\n  const savedSecretKeyBase64 = Storage.privateGet(\"secretKey\");\n  if (savedSecretKeyBase64 === null || registeredPublicKey === null) {\n    return null;\n  }\n  return savedSecretKeyBase64;\n};\nconst handleSignIn = () => {\n  try {\n    const keyPairFromSaved = nacl.box.keyPair.fromSecretKey(\n      Buffer.from(state.inputSecretKey, \"base64\")\n    );\n    if (\n      Buffer.from(keyPairFromSaved.publicKey).toString(\"base64\") !==\n      registeredPublicKey\n    ) {\n      State.update({ errorInputSecretKey: \"\u26a0\ufe0f key does not fit\" });\n    } else {\n      const secretKey = Buffer.from(keyPairFromSaved.secretKey).toString(\n        \"base64\"\n      );\n      Storage.privateSet(\"secretKey\", secretKey);\n      State.update({\n        savedSecretKeyBase64: secretKey,\n      });\n      // Directly save the secret key in local storage\n      Storage.privateSet(\"secretKey\", secretKey);\n    }\n  } catch {\n    State.update({ errorInputSecretKey: \"\u26a0\ufe0f invalid secret key\" });\n  }\n};\nState.init({\n  selectedUser,\n  registerPage: false,\n  loginPage: !savedSecretKeyBase64 ? true : false,\n  userListPage: savedSecretKeyBase64 ? true : false,\n});\nfunction renderLoginPage() {\n  return (\n    <div>\n      <div class=\"d-flex flex-row align-items-center mb-3\">\n        <div class=\"col\"></div>\n        <h1 class=\"col\">Encryption Tools</h1>\n        <div class=\"col\"></div>\n      </div>\n      {registeredPublicKey && (\n        <div>\n          <label class=\"mb-3\">You registered using this public key:</label>\n          <input\n            class=\"form-control mb-3\"\n            value={registeredPublicKey}\n            disabled\n          />\n        </div>\n      )}\n      <input\n        class=\"form-control mb-3\"\n        placeholder=\"Input secret key\"\n        key=\"inputSecret\"\n        onChange={(e) => State.update({ inputSecretKey: e.target.value })}\n      />\n      <label class=\"mb-3\">{state.errorInputSecretKey}</label>\n      <div>\n        <button\n          onClick={() => {\n            try {\n              const keyPairFromSaved = nacl.box.keyPair.fromSecretKey(\n                Buffer.from(state.inputSecretKey, \"base64\")\n              );\n              if (\n                Buffer.from(keyPairFromSaved.publicKey).toString(\"base64\") !=\n                registeredPublicKey\n              ) {\n                State.update({ errorInputSecretKey: \"\u26a0\ufe0f key does not fit\" });\n              } else {\n                const secretKey = Buffer.from(\n                  keyPairFromSaved.secretKey\n                ).toString(\"base64\");\n                Storage.privateSet(\"secretKey\", secretKey);\n                State.update({\n                  savedSecretKeyBase64: secretKey,\n                });\n                // Call the callback with the private key as decryptSk\n                if (props.onPrivateKeyRetrieved) {\n                  props.onPrivateKeyRetrieved(secretKey);\n                }\n              }\n            } catch {\n              State.update({ errorInputSecretKey: \"\u26a0\ufe0f invalid secret key\" });\n            }\n          }}\n        >\n          Login\n        </button>\n        <button\n          className=\"btn btn-outline-primary\"\n          onClick={() => State.update({ registerPage: true })}\n        >\n          Register\n        </button>\n      </div>\n    </div>\n  );\n}\nif (state.registerPage) {\n  return (\n    <div>\n      <div class=\"d-flex flex-row align-items-center mb-3\">\n        <div class=\"col\">\n          <button\n            class=\"btn btn-secondary\n            float-right\"\n            onClick={() => {\n              State.update({ registerPage: false });\n            }}\n          >\n            {\"<\"}\n          </button>\n        </div>\n        <h1 class=\"col\">Register Public Key</h1>\n        <div class=\"col\"></div>\n      </div>\n      <Widget\n        src=\"hyperbuild.near/widget/tools.local.register\"\n        props={{\n          onRegisterComplete: () => {\n            State.update({ registerPage: false });\n          },\n        }}\n      />\n    </div>\n  );\n}\nif (state.selectedUser) {\n  console.log({\n    receiverAccountId: state.selectedUser.accountId,\n    secretKeyBase64: savedSecretKeyBase64,\n    receiverPublicKeyBase64: state.selectedUser.publicKeyBase64,\n  });\n  return (\n    <div>\n      <div class=\"d-flex flex-row align-items-center mb-3\">\n        <div class=\"col\">\n          <button\n            class=\"btn btn-secondary\n            float-right\"\n            onClick={() => {\n              State.update({ selectedUser: null });\n            }}\n          >\n            {\"<\"}\n          </button>\n        </div>\n        <div class=\"col\">\n          <Widget\n            src=\"mob.near/widget/Profile.ShortInlineBlock\"\n            props={{\n              accountId: state.selectedUser.accountId,\n            }}\n          />\n        </div>\n        <div class=\"col\"></div>\n      </div>\n      <Widget\n        src=\"bozon.near/widget/PrivateMailBox.UserMessages\"\n        props={{\n          receiverAccountId: state.selectedUser.accountId,\n          secretKeyBase64: savedSecretKeyBase64,\n          receiverPublicKeyBase64: state.selectedUser.publicKeyBase64,\n        }}\n      />\n    </div>\n  );\n}\nif (!savedSecretKeyBase64) return renderLoginPage();\nelse if (savedSecretKeyBase64)\n  return (\n    <div>\n      <div class=\"d-flex flex-row align-items-center mb-3\">\n        <div class=\"col\"></div>\n        <h1 class=\"col\">Private MailBox</h1>\n        <div class=\"col d-flex justify-content-end\">\n          <button\n            class=\"btn btn-danger \n            float-right\"\n            onClick={() => {\n              Storage.privateSet(\"secretKey\", undefined);\n            }}\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n      <Widget\n        src=\"bozon.near/widget/PrivateMailBox.UserList\"\n        props={{\n          secretKeyBase64: savedSecretKeyBase64,\n          onSelectedUser: (accountId, publicKeyBase64) => {\n            State.update({ selectedUser: { accountId, publicKeyBase64 } });\n          },\n        }}\n      />\n    </div>\n  );\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/tools.local.index", "fact_widget_deployments_id": "11a926535dc32430fa2f7ae6808d1d2f", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 0}