{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "create.edit.schema", "source_code": "// TO DO:\n// schema typechecking with PropTypes\n//\nconst { generateUID } = VM.require(\"flowscience.near/widget/generateUID\");\nconst path = props.path;\nconst typeSrc = props.typeSrc || \"every.near\";\nconst schemaSrc = context.accountId ?? props.schemaSrc ?? \"attestations.near\";\nconst blockHeight = props.blockHeight || \"final\";\nconst selectedSchema = props.selectedSchema;\nlet type = {\n  name: \"\",\n  properties: [],\n  widgets: {},\n};\nconst [jsonSchema, setJsonSchema] = useState({\n  schema: path,\n  id: generateUID(),\n  title: \"\",\n  description: \"\",\n  schemaType: \"object\", // Default to 'object'\n  properties: [],\n  required: [],\n});\nState.init({\n  newType: typeSrc,\n  typeName: type.name || \"\",\n  properties: type.properties || [],\n  newPropertyName: \"\",\n  newPropertyType: \"string\",\n  newTypeSrc: \"\",\n  typeSrc: typeSrc,\n  schemaSrc: schemaSrc,\n  expanded: false,\n  selectedSchema: selectedSchema,\n  schemaPath: path,\n});\nlet importedTypes = [];\nif (state.typeSrc !== \"\") {\n  const defaultTypes = Social.get(`every.near/type/**`, \"final\");\n  const hyperfilesTypes = Social.get(`hyperfiles.near/type/**`, \"final\");\n  const types = Social.get(`${state.typeSrc}/type/**`, \"final\");\n  if (!types) {\n    return <></>;\n  }\n  importedTypes =\n    Object.keys(types)?.map((it) => `${state.typeSrc}/type/${it}`) || [];\n}\nconst availableTypes = JSON.parse(props.availableTypes) || [\n  \"string\",\n  \"boolean\",\n  \"number\",\n  \"date\",\n  \"time\",\n  \"tags\",\n  ...importedTypes,\n];\nconst create = () => {\n  const output = {\n    schema: {\n      [jsonSchema.title]: JSON.stringify({\n        ...jsonSchema,\n        properties: state.properties,\n        required:\n          state.properties &&\n          state.properties\n            .filter((it) => it.isRequired)\n            .map((it) => (it = it.name)),\n      }),\n    },\n  };\n  Social.set(output, { force });\n};\nconst Container = styled.div`\n  margin: 20px 0;\n`;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Row = styled.div`\n  display: flex;\n  gap: 10px;\n`;\nconst Input = styled.input`\n  flex: 1;\n  max-width: 200px;\n  margin-bottom: 10px;\n  height: 30px;\n`;\nconst Select = styled.select`\n  height: 30px;\n`;\nconst Button = styled.button`\n  height: 30px;\n`;\nconst Text = styled.p`\n  display: inline-block;\n  margin-right: 10px;\n`;\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n`;\nconst loadType = () => {\n  const parts = state.newType.split(\"/\");\n  type = JSON.parse(Social.get(state.newType, blockHeight) || null);\n  if (type) {\n    type.name = parts[2];\n    State.update({\n      typeName: type.name,\n      properties: type.properties,\n      widgets: type.widgets,\n    });\n  }\n};\nif (prop.typeSrc !== \"\" && state.typeName === \"\") {\n  loadType();\n}\n// fix loadSchema\nconst loadSchema = () => {\n  State.update({ selectedSchema: newSchema });\n  const parts = state.newSchema.split(\"/\");\n  schema = JSON.parse(Social.get(state.newSchema, blockHeight) || null);\n  if (schema) {\n    schema.name = parts[2];\n    State.update({\n      schemaName: schema.name,\n      properties: schema.properties,\n      widgets: type.widgets,\n    });\n  }\n};\nif (prop.schemaSrc !== \"\" && state.schemaName === \"\") {\n  loadSchema();\n}\n// fix handleJsonSchemaChange\nconst handleJsonSchemaChange = (e) => {\n  const { name, value } = e.target; // Destructure name and value from the event target\n  setJsonSchema((prevJsonSchema) => ({\n    ...prevJsonSchema,\n    [name]: value, // Dynamically update the property based on input name\n  }));\n};\nconst handleSchemaTitleChange = (e) => {\n  const value = e.target.value;\n  setJsonSchema((prev) => ({ ...prev, title: value }));\n};\nconst handleSchemaDescriptionChange = (e) => {\n  const value = e.target.value;\n  setJsonSchema((prev) => ({ ...prev, description: value }));\n};\nconst handleSchemaTypeChange = (e) => {\n  const value = e.target.value;\n  setJsonSchema((prev) => ({ ...prev, schemaType: value }));\n};\nconst handleAddProperty = () => {\n  if (state.newPropertyName.trim() === \"\") return;\n  const newProperty = {\n    name: state.newPropertyName,\n    type: state.newPropertyType,\n    isRequired: state.newPropertyIsRequired,\n    isMulti: state.newPropertyIsMulti,\n  };\n  State.update({\n    properties: [...state.properties, newProperty],\n    newPropertyName: \"\",\n    newPropertyType: \"string\",\n    newPropertyisRequired: false,\n    newPropertyIsMulti: false,\n  });\n};\nconst handleRemoveProperty = (index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties.splice(index, 1);\n  State.update({ properties: updatedProperties });\n};\nconst handlePropertyNameChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].name = e.target.value;\n  State.update({ properties: updatedProperties });\n};\nconst handleTypeChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].type = e.target.value;\n  State.update({ properties: updatedProperties });\n};\nconst handleMultiChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].isMulti = e.target.value;\n  State.update({ properties: updatedProperties });\n};\nconst handleRequiredChange = (e, index) => {\n  const updatedProperties = [...state.properties];\n  updatedProperties[index].isRequired = e.target.value;\n  State.update({ properties: updatedProperties });\n  setJsonSchema((prev) => ({\n    ...prev,\n    required: updatedProperties,\n  }));\n};\nfunction TypeSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      {availableTypes.map((it) => (\n        <option value={it} key={it}>\n          {it}\n        </option>\n      ))}\n    </Select>\n  );\n}\n// convert Multi and Required selects to checkboxes\nfunction MultiSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      <option value={false}>single</option>\n      <option value={true}>multi</option>\n    </Select>\n  );\n}\nfunction RequiredSelect({ value, onChange }) {\n  return (\n    <Select value={value} onChange={onChange}>\n      <option value={false}>no</option>\n      <option value={true}>yes</option>\n    </Select>\n  );\n}\nreturn (\n  <Container>\n    <Row>\n      <Text>\n        <b>Import Schema:</b>\n      </Text>\n      <Input\n        type=\"text\"\n        value={state.newSchema}\n        onChange={(e) => State.update({ newSchema: e.target.value })}\n        placeholder={\"account/schema/title\"}\n      />\n      <Button onClick={loadSchema}>load</Button>\n    </Row>\n    <Row>\n      <Text>\n        <b>Import Types:</b>\n      </Text>\n      <Input\n        type=\"text\"\n        value={state.newTypeSrc}\n        onChange={(e) => State.update({ newTypeSrc: e.target.value })}\n        placeholder={\"hyperfiles.near\"}\n      />\n      <Button onClick={() => State.update({ typeSrc: state.newTypeSrc })}>\n        apply\n      </Button>\n    </Row>\n    <FormContainer>\n      <Row>\n        <Text>\n          <b>Title:</b>\n        </Text>\n        <Input\n          type=\"text\"\n          name=\"title\"\n          value={jsonSchema.title}\n          onChange={handleSchemaTitleChange}\n          placeholder=\"Schema_Title\"\n        />\n        <i>*overwrites existing path when saved</i>\n      </Row>\n      <Row>\n        <Text>\n          <b>Description:</b>\n        </Text>\n        <Input\n          type=\"text\"\n          placeholder=\"Concisely explain.\"\n          value={jsonSchema.description}\n          onChange={handleSchemaDescriptionChange}\n        />\n      </Row>\n      <Row>\n        <Text>\n          <b>Schema Type:</b>\n        </Text>\n        <Select value={value} onChange={handleSchemaTypeChange}>\n          <option value={\"object\"}>object</option>\n          <option value={\"boolean\"}>boolean</option>\n        </Select>\n      </Row>\n      <hr></hr>\n      <Text>\n        <h4>Schema Properties</h4>\n        <i>*Add properties below that are relevant to your use case.</i>\n        <br />\n        <br />\n        <b>1.</b> [Name]: describe the property\n        <br />\n        <b>2.</b> [Type]: how is the property structured?\n        <a href=\"https://everything.dev/every.near/widget/every.type.create\">\n          <i>[Define new types]</i>\n        </a>\n        <br />\n        <b>3.</b> [Single/Multi]: can the property be an array?\n        <br />\n        <b>4.</b> [Required]: is the property required?\n      </Text>\n      {state.properties?.map((property, index) => (\n        <Row key={index}>\n          <div>\n            <Label>Name:</Label>\n            <Input\n              type=\"text\"\n              value={property.name}\n              onChange={(e) => handlePropertyNameChange(e, index)}\n            />\n          </div>\n          <div>\n            <Label>Property Type:</Label>\n            <TypeSelect\n              value={property.type}\n              onChange={(e) => handleTypeChange(e, index)}\n            />\n          </div>\n          <div>\n            <Label>isMulti:</Label>\n            <MultiSelect\n              value={property.isMulti}\n              onChange={(e) => handleMultiChange(e, index)}\n            />\n          </div>\n          <div>\n            <Label>Required:</Label>\n            <RequiredSelect\n              value={property.isRequired}\n              onChange={(e) => handleRequiredChange(e, index)}\n            />\n          </div>\n          <div>\n            <Label>Remove:</Label>\n            <Button onClick={() => handleRemoveProperty(index)}>Remove</Button>\n          </div>\n        </Row>\n      ))}\n      <Row>\n        <div>\n          <Label>New Property Name:</Label>\n          <Input\n            type=\"text\"\n            placeholder=\"Property Name\"\n            value={state.newPropertyName}\n            onChange={(e) => State.update({ newPropertyName: e.target.value })}\n          />\n        </div>\n        <div>\n          <Label>New Type:</Label>\n          <TypeSelect\n            value={state.newPropertyType}\n            onChange={(e) => State.update({ newPropertyType: e.target.value })}\n          />\n        </div>\n        <div>\n          <Label>isMulti:</Label>\n          <MultiSelect\n            value={state.newPropertyIsMulti}\n            onChange={(e) =>\n              State.update({ newPropertyIsMulti: e.target.value })\n            }\n          />\n        </div>\n        <div>\n          <Label>Required:</Label>\n          <RequiredSelect\n            value={state.newPropertyIsRequired}\n            onChange={(e) =>\n              State.update({ newPropertyIsRequired: e.target.value })\n            }\n          />\n        </div>\n        <div>\n          <Label>Add:</Label>\n          <Button\n            onClick={handleAddProperty}\n            disabled={state.newPropertyName.trim() === \"\"}\n          >\n            +\n          </Button>\n        </div>\n      </Row>\n      <hr></hr>\n      <Row>\n        <Button\n          onClick={create}\n          disabled={state.properties.length === 0}\n          className=\"styless\"\n        >\n          Publish/Update Schema\n        </Button>\n      </Row>\n    </FormContainer>\n  </Container>\n);\n``;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/create.edit.schema", "fact_widget_deployments_id": "184e4a3345ada7d4a825b336895b3939", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 0}