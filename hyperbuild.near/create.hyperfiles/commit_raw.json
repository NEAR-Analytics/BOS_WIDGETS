{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "create.hyperfiles", "source_code": "const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\nconst Label = styled.label`\n  font-weight: bold;\n`;\nconst Input = styled.input`\n  padding: 5px;\n`;\nconst Select = styled.select`\n  padding: 8px;\n`;\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Button = styled.button``;\nfunction CreateHyperfile(props) {\n  // Initialize state\n  let newSchemaSrc = props.schemaSrc || \"hyperfiles.near\";\n  let schemaSrc = newSchemaSrc;\n  let availableSchemas = [];\n  let isLoading = true;\n  let selectedSchema = props.selectedSchema || \"hyperfiles.near/schema/test\";\n  let source = props.source || \"\";\n  let adapter = props.adapters ? props.adapters[0].value : \"\";\n  let reference = undefined;\n  let filename = props.filename || \"\";\n  let activeTab = \"data\";\n  let name = props.name || \"\";\n  let description = props.description || \"\";\n  let json = props.data || \"\";\n  let data = props.data || {};\n  let hyperfile = \"\";\n  // Functions to handle state changes\n  function setState(newState) {\n    Object.assign(state, newState);\n    render();\n  }\n  function handleOnChange(value) {\n    setState({ data: { ...state.data, ...value } });\n  }\n  function handleSchemaSrcChange(newSchemaSrc) {\n    setState({ schemaSrc: newSchemaSrc, selectedSchema: \"\" });\n  }\n  function handleSelectedSchemaChange(newValue) {\n    setState({ selectedSchema: newValue });\n  }\n  function handleThingUpdate(newData) {\n    console.log(\"Thing Data Updated:\", newData);\n  }\n  function generateUID() {\n    return (\n      Math.random().toString(16).slice(2) +\n      Date.now().toString(36) +\n      Math.random().toString(16).slice(2)\n    );\n  }\n  function handleCreate() {\n    const isCreator = context.accountId === props.creatorId;\n    const { create } = VM.require(adapter) || (() => {});\n    if (create) {\n      create(json).then((reference) => {\n        const thingId = filename || generateUID();\n        const hyperfileData = {\n          [props.type]: {\n            [thingId]: {\n              \"\": JSON.stringify({\n                schema: schema,\n                source: source,\n                adapter: adapter,\n                reference: reference,\n                metadata: {\n                  name: name,\n                  description: description,\n                  type: props.type,\n                },\n              }),\n            },\n          },\n        };\n        if (creatorId !== context.accountId) {\n          hyperfileData.index = {\n            notify: JSON.stringify({\n              key: creatorId,\n              value: {\n                type: \"request\",\n                data: {\n                  type: \"merge\",\n                  upstream: `${creatorId}/${props.type}/${props.filename}`,\n                  origin: `${context.accountId}/${props.type}/${thingId}`,\n                },\n              },\n            }),\n          };\n          hyperfileData[props.type][thingId].metadata = {\n            ...hyperfileData[props.type][thingId].metadata,\n            upstream: `${creatorId}/${props.type}/${props.filename}`,\n          };\n        }\n        hyperfile = JSON.stringify(hyperfileData);\n        Social.set(hyperfileData, { force: true });\n      });\n    }\n  }\n  // Rendering function\n  function render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"p-3 border bg-light\">\n            <Form>\n              <h3>Data</h3>\n              <FormGroup>\n                <Label>Source</Label>\n                <Widget\n                  src={`hyperbuild.near/widget/profile.metadataEditor`}\n                  props={{\n                    initialMetadata: profile,\n                    onChange: (newValue) => {\n                      setSource(newValue);\n                      State.update({\n                        profile: { ...profile, source: newValue },\n                      });\n                    },\n                    value: source,\n                    options: {\n                      source: {\n                        sourcePattern: \"*/profile/source/*\",\n                        placeholder: \"Select a source\",\n                      },\n                    },\n                  }}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label>Schema</Label>\n                <p>{JSON.stringify(selectedSchema)}</p>\n                <Widget\n                  src={`hyperbuild.near/widget/explore.select.schema`}\n                  props={{\n                    onSchemaSrcChange: handleSchemaSrcChange,\n                    onSelectedSchemaChange: handleSelectedSchemaChange,\n                    selectedSchema: selectedSchema,\n                    schemaSrc: schemaSrc,\n                  }}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label>Input Your Data</Label>\n                <FormContainer>\n                  <Widget\n                    src={`hyperbuild.near/widget/create.thing`}\n                    props={{\n                      item: {\n                        type: selectedSchema,\n                        value: data,\n                      },\n                      onChange: handleOnChange,\n                    }}\n                  />\n                </FormContainer>\n              </FormGroup>\n            </Form>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"p-3 border bg-light\">\n            <Form>\n              <h3>Storage</h3>\n              <FormGroup>\n                <Label>Adapter</Label>\n                <Select\n                  value={adapter}\n                  onChange={(e) => setAdapter(e.target.value)}\n                >\n                  {props.adapters &&\n                    props.adapters.map((o) => (\n                      <option key={o.value} value={o.value}>\n                        {o.title}\n                      </option>\n                    ))}\n                </Select>\n              </FormGroup>\n              {rawAdapter && <>{parseAdapter(rawAdapter)}</>}\n            </Form>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"p-3 border bg-light\">\n            <Form>\n              <Button\n                onClick={handleCreate}\n                disabled={!adapter || !schema || !source || !json}\n              >\n                create reference\n              </Button>\n              {hyperfile !== \"\" && (\n                <>\n                  <FormGroup>\n                    <textarea\n                      className=\"form-control\"\n                      value={hyperfile}\n                      disabled\n                      style={{ width: \"100%\", height: \"400px\" }}\n                    />\n                  </FormGroup>\n                  <Button\n                    onClick={() =>\n                      Social.set(JSON.parse(hyperfile), {\n                        force: true,\n                      })\n                    }\n                  >\n                    save\n                  </Button>\n                </>\n              )}\n            </Form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // Initial render call\n  return render();\n}\nreturn { CreateHyperfile };\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/create.hyperfiles", "fact_widget_deployments_id": "95541ce7ebf6c972f43c86092d4213c9", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 0}