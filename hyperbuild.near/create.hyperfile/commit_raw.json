{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "create.hyperfile", "source_code": "// const { NewThings } = VM.require('hyperbuild.near/widget/create.newthing');\n// <NewThings item={{ type: 'specificType', value: {} }} onChange={handleThingUpdate} />\nconst Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\nconst Label = styled.label`\n  font-weight: bold;\n`;\nconst Input = styled.input`\n  padding: 5px;\n`;\nconst Select = styled.select`\n  padding: 8px;\n`;\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Button = styled.button``;\n// Define adapter array before initializing constants below\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"\",\n    value: \"\",\n  },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n    refType: { cid: \"string\" },\n  },\n  // {\n  //   title: \"Custom\",\n  //   value: \"custom\",\n  // },\n  {\n    title: \"GitHub\",\n    value: \"hyperfiles.near/widget/adapter.github\",\n  },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n// Schema constants\nconst initialSchemaSrc = props.schemaSrc || \"hyperfiles.near\";\nconst [newSchemaSrc, setNewSchemaSrc] = useState(initialSchemaSrc);\nconst [schemaSrc, setSchemaSrc] = useState(initialSchemaSrc);\nconst [availableSchemas, setAvailableSchemas] = useState([]);\nconst [isLoading, setIsLoading] = useState(true);\nconst [selectedSchema, setSelectedSchema] = useState(\n  props.selectedSchema || \"\"\n);\n// Creator constants\nconst defaultAdapter = adapters[0];\nconst { creatorId } = props;\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [filename, setFilename] = useState(props.filename ?? \"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [state, setState] = useState({\n  data,\n});\nconst handleOnChange = (value) => {\n  setState((prevState) => {\n    const newData = { value };\n    console.log(\"Current Data:\", newData);\n    return {\n      data: newData,\n    };\n  });\n};\nconst handleSchemaSrcChange = (newSchemaSrc) => {\n  setSchemaSrc(newSchemaSrc);\n  setSelectedSchema(\"\"); // Reset the selected schema when the source changes\n};\nconst handleSelectedSchemaChange = (newValue) => {\n  const fullSchemaPath = `${schemaSrc}/schema/${newValue}`;\n  setSelectedSchema(fullSchemaPath);\n  console.log(\"Selected Schema Changed:\", fullSchemaPath);\n};\nconst handleThingUpdate = (newData) => {\n  console.log(\"Thing Data Updated:\", newData);\n  // Handle the new data, such as saving to a state or sending to a server\n};\nconst handleSelectRepository = (selectedFilePath) => {\n  console.log(\"Selected repository:\", selectedFilePath);\n  // Assuming you need the repository's file path or some specific identifier\n  setFilePath(selectedFilePath); // or any specific attribute you need\n};\nconst rawAdapter =\n  (adapter !== \"\" || adapter !== \"custom\") && Social.get(adapter, \"final\");\nconst { create } =\n  ((adapter !== \"\" || adapter !== \"custom\") && VM.require(adapter)) ||\n  (() => {});\nconst functionRegex = /function\\s+(\\w+)\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*?)\\n}/g;\nfunction parseAdapter(code) {\n  let match;\n  const functions = [];\n  while ((match = functionRegex.exec(code)) !== null) {\n    const [_, functionName, params, content] = match;\n    functions.push({ functionName, params, content });\n  }\n  return functions.map((func, index) => (\n    <FormGroup key={index}>\n      <Label>{func.functionName}</Label>\n      <textarea\n        className=\"form-control\"\n        style={{ width: \"100%\", height: \"100%\" }}\n        value={func.content.trim()}\n        disabled\n      />\n    </FormGroup>\n  ));\n}\n// TODO: Import keccak from ethers to hash Hyperfile contents\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\nconst handleCreate = () => {\n  const isCreator = context.accountId === creatorId;\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json).then((reference) => {\n      // now we have a reference to the data\n      // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\n      const thingId = filename ?? generateUID();\n      const hyperfile = {\n        [props.type]: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              schema: schema,\n              source: source,\n              adapter: adapter,\n              reference: reference,\n              metadata: {\n                name: name,\n                description: description,\n                type: props.type,\n              },\n            }),\n          },\n        },\n      };\n      if (creatorId !== context.accountId) {\n        // handle request merge\n        hyperfile.index = {\n          notify: JSON.stringify({\n            key: creatorId,\n            value: {\n              type: \"request\",\n              data: {\n                type: \"merge\",\n                upstream: `${creatorId}/${props.type}/${props.filename}`,\n                origin: `${context.accountId}/${props.type}/${thingId}`,\n              },\n            },\n          }),\n        };\n        hyperfile[props.type][thingId].metadata = {\n          ...hyperfile[props.type][thingId].metadata,\n          upstream: `${creatorId}/${props.type}/${props.filename}`,\n        };\n        // I want to make a request to merge\n        // set upstream and downstream\n      }\n      // sometimes we're not logged in, so it doesn't do anything!\n      Social.set(hyperfile, { force: true });\n    });\n  }\n};\nreturn (\n  <div className=\"row\">\n    <div className=\"col\">\n      <div className=\"p-3 border bg-light\">\n        {/* Save data source names to user profile */}\n        <Form>\n          <h3>Enter Content</h3>\n          <FormGroup>\n            <Label>Source</Label>\n            <Widget\n              src=\"hyperbuild.near/widget/profile.metadataEditor\"\n              props={{\n                initialMetadata: profile,\n                onChange: (newValue) => {\n                  console.log(\"New Source:\", newValue);\n                  setSource(newValue); // Update local state\n                  State.update({\n                    profile: { ...profile, source: newValue }, // Update external state\n                  });\n                },\n                value: source,\n                options: {\n                  source: {\n                    sourcePattern: \"*/profile/source/*\",\n                    placeholder: \"Select a source\",\n                  },\n                },\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Schema</Label>\n            <p>{selectedSchema}</p>\n            <Widget\n              src=\"hyperbuild.near/widget/explore.select.schema\"\n              props={{\n                onSchemaSrcChange: handleSchemaSrcChange,\n                onSelectedSchemaChange: handleSelectedSchemaChange,\n                selectedSchema: selectedSchema,\n                schemaSrc: schemaSrc,\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Input Data</Label>\n            <FormContainer>\n              {/*<near-social-viewer></near-social-viewer>*/}\n              <Widget\n                src=\"hyperbuild.near/widget/create.thing\"\n                props={{\n                  item: {\n                    type: selectedSchema,\n                    value: state.data,\n                  },\n                  onChange: handleOnChange,\n                }}\n              />\n            </FormContainer>\n          </FormGroup>\n        </Form>\n      </div>\n    </div>\n    <div className=\"col\">\n      <div className=\"p-3 border bg-light\">\n        <Form>\n          <h3>Select Storage</h3>\n          <FormGroup>\n            <Label>Adapter</Label>\n            <Select\n              value={adapter}\n              onChange={(e) => setAdapter(e.target.value)}\n            >\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n          {rawAdapter && <>{parseAdapter(rawAdapter)}</>}\n          {adapter === \"hyperfiles.near/widget/adapter.github\" && (\n            <Widget\n              src=\"flowscience.near/widget/GitHubSearchSelect\"\n              onSelectRepository={handleSelectRepository}\n            ></Widget>\n          )}\n        </Form>\n      </div>\n    </div>\n    <div className=\"col\">\n      <div className=\"p-3 border bg-light\">\n        <Form>\n          <h3>Deploy It</h3>\n          <Button\n            onClick={handleCreate}\n            disabled={!adapter || !selectedSchema || !source || !state.data}\n          >\n            Publish Data to `{adapter}`\n          </Button>\n          {hyperfile !== \"\" && (\n            <>\n              <FormGroup>\n                <textarea\n                  className=\"form-control\"\n                  value={hyperfile}\n                  disabled\n                  style={{ width: \"100%\", height: \"400px\" }}\n                />\n              </FormGroup>\n              <Button\n                onClick={() =>\n                  Social.set(JSON.parse(hyperfile), { force: true })\n                }\n              >\n                Save Reference\n              </Button>\n            </>\n          )}\n        </Form>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/create.hyperfile", "fact_widget_deployments_id": "861bd381c0aa405e95aedf9833ead929", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 5}