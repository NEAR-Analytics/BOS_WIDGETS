{"tx_hash": "CC9GcHy83rphSqwYdFGRGRyFvEi4uTU9wceCkLZk2NT3", "action_id_social": "4DSN3SK9hpm79UiPYgKx3J9sAV4XbSPNkc15u1u7PCXy-0-widget", "block_id": 120166680, "block_timestamp": "2024-05-31T23:45:45.327Z", "signer_id": "hyperbuild.near", "widget_name": "explore.select.schema", "source_code": "const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst Button = styled.button``;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Select = styled.select``;\nconst Label = styled.label``;\nconst Input = styled.input``;\nconst initialSchemaSrc = props.schemaSrc || \"hyperfiles.near\";\nconst [newSchemaSrc, setNewSchemaSrc] = useState(initialSchemaSrc);\nconst [schemaSrc, setSchemaSrc] = useState(initialSchemaSrc);\nconst [selectedSchema, setSelectedSchema] = useState(\n  props.selectedSchema || \"\"\n);\nconst [availableSchemas, setAvailableSchemas] = useState([]);\nconst [isLoading, setIsLoading] = useState(true);\nconst [fetchedData, setFetchedData] = useState({}); // State for debugging\nuseEffect(() => {\n  setIsLoading(true);\n  const fetchSchemasList = () => {\n    const query = schemaSrc === \"*\" ? \"*/schema/**\" : `${schemaSrc}/schema/**`;\n    const schemas = Social.get(query, \"final\");\n    setFetchedData(schemas); // Store raw data for debugging\n    if (schemas) {\n      let schemasSet = new Set();\n      if (schemaSrc === \"*\") {\n        // Collect schemas from all fetched data\n        Object.values(schemas).forEach((accountSchemas) => {\n          Object.values(accountSchemas).forEach((schemaObj) => {\n            Object.keys(schemaObj).forEach((schemaName) => {\n              schemasSet.add(schemaName);\n            });\n          });\n        });\n      } else {\n        // Schemas from a specific account\n        Object.keys(schemas).forEach((key) => schemasSet.add(key));\n      }\n      setAvailableSchemas(Array.from(schemasSet));\n    } else {\n      setAvailableSchemas([]);\n    }\n    setIsLoading(false);\n  };\n  fetchSchemasList();\n}, [schemaSrc]);\nuseEffect(() => {\n  setSelectedSchema(props.selectedSchema);\n}, [props.selectedSchema]);\nconst handleSchemaChange = (event) => {\n  setSelectedSchema(event.target.value);\n  if (props.onSelectedSchemaChange) {\n    props.onSelectedSchemaChange(event.target.value);\n  }\n};\nconst handleSchemaSrcChange = (event) => {\n  setNewSchemaSrc(event.target.value);\n};\nconst applySchemaSrc = () => {\n  setSchemaSrc(newSchemaSrc);\n};\nconst showAllSchemas = () => {\n  setSchemaSrc(\"*\");\n};\nreturn (\n  <FormContainer>\n    <Label>Schema Owner:</Label>\n    <Row>\n      <Input\n        schema=\"text\"\n        onChange={handleSchemaSrcChange}\n        value={newSchemaSrc}\n        placeholder=\"accountId\"\n      />\n      <Button onClick={applySchemaSrc}>Apply</Button>\n    </Row>\n    <Label>Schema:</Label>\n    <Row>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <Select value={selectedSchema} onChange={handleSchemaChange}>\n          <option value=\"\">Choose a schema</option>\n          {availableSchemas.map((schema) => (\n            <option key={schema} value={schema}>\n              {schema}\n            </option>\n          ))}\n        </Select>\n      )}\n      <Button onClick={showAllSchemas}>Show All</Button>\n    </Row>\n  </FormContainer>\n);\n// <pre>{JSON.stringify(fetchedData, null, 2)}</pre> {/* Debug output */}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperbuild.near/widget/explore.select.schema", "fact_widget_deployments_id": "9256a6e112b76edc0b89a0077255670e", "inserted_timestamp": "2024-06-01T02:00:15.259Z", "modified_timestamp": "2024-06-01T02:00:15.259Z", "__row_index": 0}