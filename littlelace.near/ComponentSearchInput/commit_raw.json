{"tx_hash": "CyedJzHALNXxgmpRYMRmvnWbwTtVzza7WVAYUCAwYNSQ", "action_id_social": "94F4H5yQ7TST8PU7BpNmUq8Cfrjqe2d33CqmoeuDcitw-0-widget", "block_id": 106821757, "block_timestamp": "2023-11-29T18:47:52.182Z", "signer_id": "littlelace.near", "widget_name": "ComponentSearchInput", "source_code": "const allMetadata =\n  Social.get(\n    [\"*/widget/*/metadata/name\", \"*/widget/*/metadata/tags/*\"],\n    \"final\"\n  ) || {};\nconst keys = Social.keys([\"*/widget/*\"], \"final\", { values_only: true }) || {};\n\nconst requiredTag = props.filterTag;\nconst boostedTag = props.boostedTag;\nconst inputTerm = props.term;\n\nconst computeResults = (term) => {\n  const terms = (term || \"\")\n    .toLowerCase()\n    .split(/[^\\w._\\/-]/)\n    .filter((s) => !!s.trim());\n\n  const matchedWidgets = [];\n\n  const limit = props.limit ?? 30;\n\n  const MaxSingleScore = 1;\n  const YourWidgetScore = 0.5;\n  const MaxScore = YourWidgetScore + MaxSingleScore * 4;\n\n  const computeScore = (s) => {\n    s = s.toLowerCase();\n    return (\n      terms\n        .map((term) => {\n          const pos = s.indexOf(term);\n          return (\n            (pos >= 0 ? Math.exp(-pos) : 0) *\n            (term.length / Math.max(1, s.length))\n          );\n        })\n        .reduce((s, v) => s + v, 0) / terms.length\n    );\n  };\n\n  Object.entries(keys).forEach(([accountId, data]) => {\n    const yourWidgetScore =\n      accountId === context.accountId ? YourWidgetScore : 0;\n    Object.keys(data.widget).forEach((componentId) => {\n      const widgetSrc = `${accountId}/widget/${componentId}`;\n      const widgetSrcScore = computeScore(widgetSrc);\n      const componentIdScore = computeScore(componentId);\n      const metadata = allMetadata[accountId].widget[componentId].metadata;\n      const name = metadata.name || componentId;\n      if (requiredTag && !(metadata.tags && requiredTag in metadata.tags)) {\n        return;\n      }\n      const boosted =\n        boostedTag && metadata.tags && boostedTag in metadata.tags;\n      const tags = Object.keys(metadata.tags || {}).slice(0, 10);\n      const nameScore = computeScore(name);\n      const tagsScore = Math.min(\n        MaxSingleScore,\n        tags.map(computeScore).reduce((s, v) => s + v, 0)\n      );\n      const score =\n        (yourWidgetScore +\n          widgetSrcScore +\n          componentIdScore +\n          nameScore +\n          tagsScore) /\n        MaxScore;\n      if (score > 0) {\n        matchedWidgets.push({\n          score,\n          accountId,\n          widgetName: componentId,\n          widgetSrc,\n          name,\n          tags,\n          boosted,\n        });\n      }\n    });\n  });\n\n  matchedWidgets.sort(\n    (a, b) => (b.boosted ? 2 : 0) + b.score - (a.boosted ? 2 : 0) - a.score\n  );\n  const result = matchedWidgets.slice(0, limit);\n\n  State.update({\n    result,\n  });\n\n  if (props.onChange) {\n    props.onChange({ result });\n  }\n};\n\nif (props.term && props.term !== state.oldTerm) {\n  State.update({\n    oldTerm: props.term,\n  });\n  if (props.term !== state.term) {\n    clearTimeout(state.debounce);\n    const term = props.term;\n    State.update({\n      term,\n      debounce: setTimeout(() => computeResults(term), 350),\n    });\n  }\n}\n\nreturn (\n  <>\n    <div className=\"input-group\">\n      <input\n        type=\"text\"\n        className={`form-control ${state.term ? \"border-end-0\" : \"\"}`}\n        value={state.term ?? \"\"}\n        onChange={(e) => {\n          const term = e.target.value;\n          clearTimeout(state.debounce);\n          State.update({\n            term,\n            debounce: setTimeout(() => computeResults(term), 350),\n          });\n        }}\n        placeholder={props.placeholder ?? `\ud83d\udd0d Search Components`}\n      />\n\n      {state.term && (\n        <button\n          className=\"btn btn-outline-secondary border border-start-0\"\n          type=\"button\"\n          onClick={() => {\n            clearTimeout(state.debounce);\n            console.log(\"state in cancel: \", state);\n            State.update({\n              term: \"\",\n            });\n            computeResults(\"\");\n          }}\n        >\n          <i className=\"bi bi-x\"></i>\n        </button>\n      )}\n    </div>\n    {props.debug && <pre>{JSON.stringify(state.result, undefined, 2)}</pre>}\n  </>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/littlelace.near/widget/ComponentSearchInput", "fact_widget_deployments_id": "3eda719834736bfa4e6eabfa82469cf4", "inserted_timestamp": "2023-11-29T20:42:56.525Z", "modified_timestamp": "2023-12-20T00:36:59.366Z", "__row_index": 3}