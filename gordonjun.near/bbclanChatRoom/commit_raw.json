{"tx_hash": "ACDxv5BgsgFYZi13ocMsaE5sebvdjijR2h8cGPS3QdNT", "action_id_social": "PP3gJdUS8ZZMkPKXUpuW2fiRvpJS5U6XsVarY4V6KjM-0-widget", "block_id": 100293381, "block_timestamp": "2023-09-03T09:41:38.644Z", "signer_id": "gordonjun.near", "widget_name": "bbclanChatRoom", "source_code": "/**\n * TODO: hide \"Leave\" button using props\n */\n\n/**\n * This Widget was built using NEAR Social Bridge library.\n * Visit https://github.com/wpdas/near-social-bridge to get to know more.\n */\n\n/**\n * App index key to store things (only rooms as this app is re fetching messages from ChatV1)\n * It should use a non \"-dev\" key for V3. This is being used because rooms were already created\n */\nconst APP_INDEX_KEY = \"widget-bbclan-chatroom\";\n\n/**\n * App setup\n */\nconst daoId = props.daoId ?? \"bbclan.near\";\nconst room = props.room ?? \"bbclan\";\n\nlet daoFollowers = Social.keys(`*/graph/follow/${daoId}`, \"final\", {\n  return_type: \"BlockHeight\",\n  values_only: true,\n});\n\nlet accounts = undefined;\naccounts = Object.keys(daoFollowers || {});\n\nconst isMember = accounts.includes(context.accountId);\n\nconst externalAppUrl = \"https://bbclan-chatroom.web.app\";\n\nconst path = props.path;\nconst initialViewHeight = 740;\nconst initialPayload = {\n  mainChatURL: \"https://alpha.near.org/gordonjun.near/widget/bbclanChatRoom\",\n  isMember: isMember,\n  room: room, // starts with this room\n};\n\nState.init({\n  showShareModal: false,\n  clipboardText: \"\",\n});\n\n/**\n * Request Handlers.\n */\nconst requestHandler = (request, response, Utils) => {\n  switch (request.type) {\n    case \"get-room-data\":\n      getRoomDataHandler(request, response, Utils);\n      break;\n    case \"send-message\":\n      sendMessageHandler(request, response);\n      break;\n  }\n};\n\nconst getRoomDataHandler = (request, response, Utils) => {\n  const { payload } = request;\n\n  if (!payload.roomId) {\n    response(request).send({ error: \"roomId prop must be provided\" });\n    return;\n  }\n\n  Utils.promisify(\n    () =>\n      Social.index(payload.roomId, \"data\", {\n        subscribe: true,\n        limit: 100,\n        order: \"desc\",\n      }),\n    (roomData) => {\n      const roomExists = roomData && roomData.length > 0;\n      if (!roomExists) {\n        response(request).send({ error: \"room not found\" });\n        return;\n      }\n      response(request).send({ messages: roomData });\n    },\n    (err) => {\n      response(request).send({ error: \"internal error\" });\n    }\n  );\n};\n\nconst sendMessageHandler = (request, response) => {\n  const { payload } = request;\n  if (payload.roomId && payload.message) {\n    // Store message.\n    Social.set(\n      {\n        index: {\n          [payload.roomId]: JSON.stringify(\n            {\n              key: \"data\",\n              value: payload.message,\n            },\n            undefined,\n            0\n          ),\n        },\n      },\n      {\n        force: true,\n        onCommit: () => {\n          response(request).send({});\n        },\n        onCancel: () => {\n          response(request).send({ error: \"the action was canceled\" });\n        },\n      }\n    );\n    return;\n  }\n\n  // Error\n  response(request).send({\n    error: \"you must provide the roomId and a message prop\",\n  });\n};\n\n// Helpers\nconst fetchRooms = () => {\n  const data = Social.index(APP_INDEX_KEY, \"room\", {\n    subscribe: true,\n    limit: 1000,\n    order: \"desc\",\n  });\n\n  if (!data) return null;\n\n  const sorted = data.sort((m1, m2) => m2.blockHeight - m1.blockHeight);\n  return sorted.map((roomData) => roomData.value); // [\"room-name\"]\n};\n// Helpers END\n\nreturn (\n  <div>\n    <Widget\n      src=\"wendersonpires.near/widget/NearSocialBridgeCore\"\n      props={{\n        externalAppUrl,\n        path,\n        initialViewHeight,\n        initialPayload,\n        requestHandler,\n      }}\n    />\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/gordonjun.near/widget/bbclanChatRoom", "fact_widget_deployments_id": "1851592bc9b45d374115f63b0c1a8419", "inserted_timestamp": "2023-09-03T11:33:15.788Z", "modified_timestamp": "2023-09-03T11:33:15.788Z", "__row_index": 6}