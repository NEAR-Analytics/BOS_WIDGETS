{"tx_hash": "7xnVMBSdpDMUt9hUK9ModmCqjBE7V8Ctw6kAgxdxwFBk", "action_id_social": "DeqYaidBfZYyEhUXyzEiWT3QHiHUATKx4wN4iSJ3Ffvm-0-widget", "block_id": 104526350, "block_timestamp": "2023-10-30T09:15:25.420Z", "signer_id": "agwaze.near", "widget_name": "CPlanet.DAO.Members.Index", "source_code": "const daoId = props.daoId ?? \"marmaj.sputnik-dao.near\";\nconst publicApiKey = \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\";\nconst baseApi = \"https://api.pikespeak.ai\";\nlet voters = [];\n\nconst CoADaoId = props.dev\n  ? \"coa.gwg-testing.near\"\n  : \"congress-coa-v1.ndc-gwg.near\";\nconst VotingBodyDaoId = props.dev ? \"voting-body-v1.gwg-testing.near\" : \"\";\nconst TCDaoId = props.dev\n  ? \"tc.gwg-testing.near\"\n  : \"congress-tc-v1.ndc-gwg.near\";\nconst HoMDaoId = props.dev\n  ? \"hom.gwg-testing.near\"\n  : \"congress-hom-v1.ndc-gwg.near\";\n\nconst isCongressDaoID =\n  daoId === HoMDaoId || daoId === CoADaoId || daoId === TCDaoId;\n\nfunction fetchIsHuman(account) {\n  const userSBTs = Near.view(\"registry.i-am-human.near\", \"is_human\", {\n    account: account,\n  });\n  let isHuman = false;\n  if (userSBTs) {\n    userSBTs.forEach((sbt) => {\n      if (\"fractal.i-am-human.near\" === sbt[0]) {\n        isHuman = true;\n      }\n    });\n  }\n  return isHuman;\n}\n\nfunction fetchIsUserFollowed(account) {\n  const followEdge = Social.keys(\n    `${context.accountId}/graph/follow/${account}`,\n    undefined,\n    {\n      values_only: true,\n    }\n  );\n  return Object.keys(followEdge || {}).length > 0;\n}\n\nfunction addNonVotedMembers() {\n  if (!policy?.users) {\n    return;\n  }\n  Object.keys(policy.users)?.map((item) => {\n    const index = voters.findIndex((d) => d.account === item);\n    if (index === -1) {\n      voters.push({\n        account: item,\n        groups: policy.users?.[item],\n        approve: 0,\n        rejected: 0,\n        isHuman: fetchIsHuman(item),\n        isUserFollowed: fetchIsUserFollowed(item),\n      });\n    }\n  });\n}\n\nfunction fetchVotes() {\n  const res = fetch(`${baseApi}/daos/votes/${daoId}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": publicApiKey,\n    },\n  });\n\n  if (res?.body?.length) {\n    res?.body?.map((item) => {\n      item.voters?.map((voterData) => {\n        const accountIndex = voters.findIndex(\n          (d) => d.account === voterData.account\n        );\n        if (accountIndex !== -1) {\n          voters[accountIndex] = {\n            ...voters[accountIndex],\n            rejected: voters[accountIndex].rejected + voterData.rejected,\n            approve: voters[accountIndex].approve + voterData.approve,\n          };\n        } else {\n          voters.push({\n            ...voterData,\n            isHuman: fetchIsHuman(voterData.account),\n            isUserFollowed: fetchIsUserFollowed(voterData.account),\n          });\n        }\n      });\n    });\n    // if any member have not voted on any proposal their data is not their in voters API\n    if (policy?.users) {\n      addNonVotedMembers();\n    }\n  } else {\n    addNonVotedMembers();\n  }\n}\n\nconst processPolicy = (policy) => {\n  const obj = {\n    policy,\n    users: {},\n    roles: {},\n    everyone: {},\n  };\n  policy.roles.forEach((role) => {\n    if (role.kind === \"Everyone\") {\n      obj.everyone = role;\n    }\n    if (role.kind.Group) {\n      if (!obj.roles[role.name]) {\n        obj.roles[role.name] = role;\n      }\n      role.kind.Group.forEach((user) => {\n        if (!obj.users[user]) {\n          obj.users[user] = [];\n        }\n\n        obj.users[user].push(role.name);\n      });\n    }\n  });\n\n  return obj;\n};\n\nfunction processCongressMembers(members) {\n  let group = \"\";\n  switch (daoId) {\n    case HoMDaoId:\n      group = \"HoM Member\";\n      break;\n    case CoADaoId:\n      group = \"CoA Member\";\n      break;\n\n    case TCDaoId:\n      group = \"Transparency Commission Member\";\n      break;\n  }\n  const obj = {\n    policy,\n    users: {},\n    roles: {\n      [group]: {\n        permissions: members?.permissions,\n      },\n    },\n    everyone: {},\n  };\n\n  members?.members?.map((item) => {\n    obj.users[item] = [group];\n  });\n  return obj;\n}\n\nconst policy = isCongressDaoID\n  ? useCache(\n      () =>\n        Near.asyncView(daoId, \"get_members\").then((members) =>\n          processCongressMembers(members)\n        ),\n      daoId + \"-processed_congress_policy\",\n      { subscribe: false }\n    )\n  : daoId === VotingBodyDaoId\n  ? null\n  : useCache(\n      () =>\n        Near.asyncView(daoId, \"get_policy\").then((policy) =>\n          processPolicy(policy)\n        ),\n      daoId + \"-processed_policy\",\n      { subscribe: false }\n    );\n\nif (policy === null) return \"\";\n\nconst EVERYONE = \"Everyone\";\n\nconst rolesArray = Object.keys(policy?.roles ?? {});\n\nif (policy?.everyone?.permissions) {\n  rolesArray = rolesArray.concat(EVERYONE);\n}\n\nconst colorsArray = [\"blue\", \"green\", \"pink\", \"red\"];\n\nconst RolesColor = rolesArray.map((item, i) => {\n  return { color: colorsArray[i] ?? \"\", role: item };\n});\n\nconst PermissionsPopover = ({ currentRole }) => {\n  const permissions =\n    currentRole === EVERYONE\n      ? policy?.everyone?.permissions\n      : policy?.roles?.[currentRole]?.permissions;\n\n  return (\n    <Widget\n      src=\"nearui.near/widget/Layout.Popover\"\n      props={{\n        triggerComponent: <i class=\"bi bi-info-circle\"></i>,\n        content: (\n          <div className=\"p-2\">\n            <h5 className=\"text-gray\">Admins have permissions to:</h5>\n            {permissions?.length > 0 && (\n              <ul className=\"text-black text-sm\">\n                {permissions?.map((i) => (\n                  <li>{i}</li>\n                ))}\n              </ul>\n            )}\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nconst RoleTag = ({ roles, showIcon }) => {\n  const tags = [];\n  if (Array.isArray(roles)) {\n    roles.map((item) => {\n      tags.push(\n        <div\n          className={`custom-tag ${\n            RolesColor.find((i) => i.role === item)?.color ?? \"\"\n          }-bg`}\n        >\n          {item}\n          {showIcon && <PermissionsPopover currentRole={item} />}\n        </div>\n      );\n    });\n  } else {\n    // for everyone\n    tags.push(\n      <div className={`custom-tag`}>\n        {roles}\n        {showIcon && <PermissionsPopover currentRole={roles} />}\n      </div>\n    );\n  }\n  return <div className=\"d-flex gap-2\">{tags.map((i) => i)}</div>;\n};\n\nfetchVotes();\n\nState.init({\n  daoUsers: Object.entries(policy.users).map(([key, data]) => ({\n    name: key,\n    tags: data,\n  })),\n});\n\nuseEffect(() => {\n  console.log(voters);\n}, [policy]);\n\nconst Root = styled.div`\n    display: flex;\n    align-items center;\n    flex-wrap: wrap;\n    gap: 30px;\n`;\n\nreturn (\n  <Root>\n    {state.daoUsers &&\n      voters.map((data) => (\n        <Widget\n          src=\"agwaze.near/widget/CPlanet.DAO.Members.Card\"\n          props={{\n            name: data.account,\n            tags: data.groups,\n            daoId: data.account,\n            isFollowing: data.isUserFollowed,\n          }}\n        />\n      ))}\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/CPlanet.DAO.Members.Index", "fact_widget_deployments_id": "436684dd64c22edb63541aa366b96220", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}