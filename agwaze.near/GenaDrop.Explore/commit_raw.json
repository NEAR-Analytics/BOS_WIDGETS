{"tx_hash": "5DXKfgu2xZ3CEejsGtoLW3HDBY7wDouVYVWUnRWo2Gku", "action_id_social": "Fp7bLUgofGfPPAYiyBG1H3DpnB43q91d1jYDTEK5VZNh-0-widget", "block_id": 100882475, "block_timestamp": "2023-09-11T12:05:45.250Z", "signer_id": "agwaze.near", "widget_name": "GenaDrop.Explore", "source_code": "initState({\n  collectionData: {},\n  inputCollectionSlug: \"genadrop-contract.nftgen.near\" || \"nft.genadrop.near\",\n  collectionSlug: \"genadrop-contract.nftgen.near\" || \"nft.genadrop.near\",\n  searchTerm: \"\",\n  nftData: [],\n  filteredNFTData: [],\n  chainRate: \"\",\n  chain: \"near\",\n  conversion: 0,\n});\n\nconst currentChain = {\n  near: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n  },\n  aptos: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqBinSwbRdx76qY4A3qvVkM9g_mKoGCBDT0sqTT02TgRvKquV2Vlc8fSRmLyuhBS3-CaA&usqp=CAU\",\n  },\n  sui: {\n    img: \"https://blog.sui.io/content/images/2023/04/Sui_Droplet_Logo_Blue-3.png\",\n  },\n};\n\nconst currentChainProps = {\n  near: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n    livePrice: \"near\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/near-mainnet\",\n    chain: \"near\",\n    id: \"1112\",\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n  },\n  aurora: {\n    img: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    id: \"1313161554\",\n    chain: \"Aurora\",\n    livePrice: \"ethereum\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\n  },\n  arbitrum: {\n    img: \"https://assets.coingecko.com/coins/images/16547/large/photo_2023-03-29_21.47.00.jpeg?1680097630\",\n    id: \"42161\",\n    chain: \"Arbitrum\",\n    livePrice: \"ethereum\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\n  },\n  celo: {\n    img: \"https://assets.coingecko.com/coins/images/11090/large/InjXBNx9_400x400.jpg?1674707499\",\n    id: \"42220\",\n    livePrice: \"celo\",\n    chain: \"Celo\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\n  },\n  polygon: {\n    img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Polygon_Blockchain_Matic_Logo.svg/880px-Polygon_Blockchain_Matic_Logo.svg.png\",\n    id: \"137\",\n    chain: \"Polygon\",\n    livePrice: \"matic-network\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\n  },\n  aptos: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqBinSwbRdx76qY4A3qvVkM9g_mKoGCBDT0sqTT02TgRvKquV2Vlc8fSRmLyuhBS3-CaA&usqp=CAU\",\n  },\n  sui: {\n    img: \"https://blog.sui.io/content/images/2023/04/Sui_Droplet_Logo_Blue-3.png\",\n  },\n};\n\nfunction fetchData() {\n  State.update({ nftData: [] });\n\n  if (state.chain === \"aptos\" || state.chain === \"sui\") {\n    const response = fetch(\"https://api.indexer.xyz/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"x-api-key\": \"Krqwh4b.bae381951d6050d351945c0c750f1510\",\n        \"x-api-user\": \"Banyan\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `query MyQuery {\n  ${state.chain}{\n    crypto_rates(where: {fiat: {_eq: \"USD\"}}) {\n      crypto\n      rate\n    }\n    nfts(order_by: {rarity: asc}) {\n      id\n      name\n      media_url\n      ranking\n      rarity\n      contract_id\n      token_id\n      listings {\n        price\n      }\n    }\n  }\n}`,\n      }),\n    });\n    response === []\n      ? \"\"\n      : State.update({\n          nftData: response.body.data[state.chain].nfts,\n          chainRate: response.body.data[state.chain].crypto_rates[4].rate,\n        });\n\n    const priceConvert = (chain) => {\n      switch (chain) {\n        case \"stacks\":\n          return State.update({ conversion: 10000000000 });\n        case \"sui\":\n          return State.update({ conversion: 10000000000 });\n        case \"aptos\":\n          return State.update({ conversion: 100000000 });\n        default:\n          return 0;\n      }\n    };\n    priceConvert(state.chain);\n  } else {\n    let response = fetch(`${currentChainProps[state.chain].subgraph}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n            query MyQuery {\n             nfts( orderBy: createdAtTimestamp, ${state.chain !== 'near' ? 'orderDirection: desc': ''}) {\n                category\n                chain\n                createdAtTimestamp\n                id\n                isSold\n                isListed\n                price\n                tokenID\n                owner {\n                    id\n                }\n                tokenIPFSPath\n                transactions {\n                  price\n                }\n                }\n            }\n        `,\n      }),\n    });\n\n    if (!response.ok) {\n      return \"Loading\";\n    }\n    const collectionData = response.body.data.nfts;\n\n    if (collectionData) {\n      const filteredNftData = [];\n\n      for (const filteredData of collectionData) {\n        try {\n          const response = fetch(\n            filteredData.tokenIPFSPath.replace(\n              \"ipfs://\",\n              \"https://ipfs.io/ipfs/\"\n            )\n          );\n          if (response.body.name != undefined) {\n            filteredNftData.push(filteredData);\n          }\n        } catch (error) {\n          // Handle any errors that occur during the fetch if needed\n          console.error(`Error fetching data: ${error}`);\n        }\n      }\n\n\n      const nftBody = filteredNftData.map((data) => {\n        const fetchIPFSData = fetch(\n          data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n        );\n        if (fetchIPFSData.status === 403) {\n          return State.update({ error: true });\n        }\n        if (!fetchIPFSData.ok) {\n          return \"Loading NFTS from IPFS\";\n        }\n        if (fetchIPFSData.ok) {\n          const nft = fetchIPFSData.body;\n          let nftObject = {};\n          nftObject.contract_id = data?.id;\n          nftObject.sold = data?.isSold;\n          nftObject.isListed = data?.isListed;\n          nftObject.owner = data?.owner?.id;\n          nftObject.price = data?.price;\n          nftObject.token_id = data?.tokenID;\n          nftObject.name = nft?.name;\n          nftObject.description = nft?.description;\n          nftObject.media_url = nft?.image ?nft?.image?.replace(\n            \"ipfs://\",\n            \"https://ipfs.io/ipfs/\"\n          ) : \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n          return nftObject;\n        }\n      });\n      State.update({\n        nftData: nftBody,\n      });\n    }\n  }\n}\n\nfetchData();\nconst updateInputCollectionSlug = (e) => {\n  State.update({ inputCollectionSlug: e.target.value });\n};\n\nconst handleFetchButtonClick = () => {\n  State.update({ collectionSlug: state.inputCollectionSlug });\n  fetchData();\n};\n\nconst updateCollectionSlug = (e) => {\n  State.update({ collectionSlug: e.target.value });\n};\n\nconst seachInputHandler = (e) => {\n  const value = e.target.value.toLowerCase();\n  const searched = state.nftData.filter((nft) =>\n    nft.name.toLowerCase().includes(value)\n  );\n  State.update({\n    searchTerm: value,\n    filteredNFTData: searched,\n  });\n};\n\nconst isPriceValid = typeof nft.listings[0]?.price === \"number\";\n\nconst handleDropdownChange = (event) => {\n  State.update({ chain: event.target.value });\n};\n\nconst getUsdValue = (price) => {\n  const res = fetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=${\n      currentChainProps[state.chain]?.livePrice\n    }&vs_currencies=usd`\n  );\n  if (res.ok) {\n    const multiplyBy = Object.values(res?.body)[0]?.usd;\n    const value = multiplyBy * price.toFixed(2);\n    return value.toFixed(4) !== \"NaN\" ? `$${value.toFixed(2)}` : 0;\n  }\n};\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nconst Stats = styled.div`\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      width: \"100%\";\n      max-width: 800px;\n      gap: 20px;\n  `;\n\nconst Main = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 20px;\n  `;\n\nconst PageTitle = styled.h1`\n  text-align:center;\n  font-size: 4vw; \n  font-weight: bold; \n  margin-bottom: 20px; \n  color: #0f1d40;\n  `;\n\nconst NFTCard = styled.div`\n   display: flex;\n   flex-flow: column nowrap;\n   -ms-flex-flow:column nowrap;\n   align-items:center;\n   background: #fff;\n   border-radius: 10px;\n   border: 1.41429px solid rgba(28,27,28,.2);\n   box-shadow: 5.65714px 5.65714px 11.3143px rgba(28,27,28,.04);\n   padding: 8px 0px;\n   background-color:#fff;\n   max-width: 350px;\n   margin: 0 auto;\n   &:hover &>div>img{\n     transform:scale(1.05);\n   }\n   button{\n   padding: .75em 2em;\n   border-radius: .7em;\n   color: var(--main-color);\n   border: 1px solid transparent;\n   transition: all .3s;\n   cursor: pointer;\n    color: #fff;\n    background: #0d99ff;\n    &:hover{\n        color: #0d99ff;\n        background:#fff;\n    }\n  @media screen and (max-width: 540px){ \n    padding: .5em 2em;    \n    }\n    }\n  `;\n\nconst NFTCardText = styled.div`\n  width: 100%;\n  // padding: 0px 1rem;\n  `;\n\nconst NFTCards = styled.div`\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  justify-content: center;\n  background: #e4f1fb;\n  background: linear-gradient(180deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\n  background: -webkit-linear-gradient(180deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\n  background: -moz-linear-gradient(270deg,#e4f1fb 0%, rgba(0,255,0,0) 3%);\n  padding: 20px 3rem 1rem 3rem;\n  width:100%;\n`;\n\nconst ImageCard = styled.div`\n  height:250px;\n  width: 96%;\n  border-radius: 0.5rem;\n  overflow:hidden;\n  margin-bottom: .4rem;\n  &>img{\n  object-fit: cover;\n  transition: all 0.3s ease-in-out;\n  }\n  &>img:hover{\n    transform:scale(1.05);\n  }\n`;\nconst InputContainer = styled.div`\n    width:80%;\n    max-width: 700px;\n    display: flex;\n    align-items: center;\n    justify-content:center;\n    margin: 1rem auto 1rem auto;\n    &>input{\n        outline: none;\n    }\n    &>input:hover, &>input:focus{\n      border: 1px solid #0d99ff;\n      box-shadow: none;\n    }\n`;\n\nconst NoNFTLoading = styled.div`\n  width: 100%;\n  min-height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Hero = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  background-image: url(https://www.genadrop.com/static/media/banner-marketplace.e5c03bb6.svg);\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-positiion: center;\n  width: 100%;\n  padding: 2rem;\n`;\n\nconst MyAcc = styled.p`\n    margin: 0;\n    margin-left: 8px;\n    color: #0a2830;\n    background: transparent;\n    border: 1px solid #0d99ff;\n    padding: 5px;\n    border-radius: 10px;\n`;\n\nconst RankCard = styled.span`\n  background-color: rgba(28,27,28,.06);\n  border-radius: .5rem;\n  color: #000;\n  display: inline-block;\n  font-size: 12px;\n  font-weight: bold;\n  padding: 8px;\n`;\n\nconst PriceArea = styled.div`\n  display: flex;\n  align-items: center;\n  color: #0d99ff;\n  &>*{\n  margin: 0px;\n  padding: 0px;\n  }\n  &>h6{\n    font-weight: 700;\n    font-size: 1.2rem;\n  }\n  &>span{\n  font-size: 1.2rem;\n  margin: 0px;\n  }\n`;\n\nconst ChainPrice = styled.div`\ndisplay: flex;\nflex-direction: row;\nalign-items: center;\njustify-content: space-between;\n  img {\n    min-width: 15px;\n    min-height: 15px;\n    max-width: 15px;\n    margin-right: 5px;\n  }\n`;\n\nconst SelectChain = styled.div`\n    select {\n    margin: 0 10px;\n    border: 1px solid #0d99ff;\n    cursor: pointer;\n    border-radius: 7px;\n    height: 35px;\n    background: transparent;\n   }\n   select:focus {\n    outline: none;\n   }\n`;\n\nconst PRICE_CONVERSION_CONSTANT =\n  state.chain == \"near\" ? 1000000000000000000000000 : 1000000000000000000;\n\nreturn (\n  <>\n    <Hero className=\"w-100\">\n      <PageTitle>\n        View NFTs on <br />\n        \ud83d\udca7GenaDrop\n      </PageTitle>\n      <InputContainer>\n        <input\n          type=\"search\"\n          value={state.searchTerm}\n          placeholder=\"Search NFTs\"\n          onChange={seachInputHandler}\n        />{\" \"}\n        <SelectChain>\n          <select value={chain} onChange={handleDropdownChange}>\n            <option value=\"near\">Near</option>\n            <option value=\"aurora\">Aurora</option>\n            <option value=\"celo\">Celo</option>\n            <option value=\"polygon\">Polygon</option>\n            <option value=\"arbitrum\">Arbitrum</option>\n            <option value=\"aptos\">Aptos</option>\n            <option value=\"sui\">Sui</option>\n          </select>\n        </SelectChain>\n        {state.sender ? (\n          <div>\n            <MyAcc>{state.sender ? getSender() : \"0x00...\"}</MyAcc>\n          </div>\n        ) : (\n          <Web3Connect connectLabel=\"Connect Wallet\" className=\"w-50\" />\n        )}\n      </InputContainer>\n    </Hero>\n    {state.nftData.length > 0 ? (\n      <NFTCards>\n        {state.searchTerm === \"\" ? (\n          state.nftData.map((nft) => (\n            <a\n              href={`#/agwaze.near/widget/GenaDrop.NFTDetails?contractId=${nft.contract_id}&tokenId=${nft.token_id}&chainState=${state.chain}`}\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n            >\n              <NFTCard className=\"card\">\n                <ImageCard>\n                  <img\n                    src={nft.media_url}\n                    alt={nft.name}\n                    width=\"100%\"\n                    height=\"100%\"\n                    className=\"rounded-3\"\n                  />\n                </ImageCard>\n                <NFTCardText>\n                  <hr />\n                  <div className=\"d-flex my-4 justify-content-between w-100 px-2\"></div>\n                  <div className=\"px-2\">\n                    <div style={{ color: \"#a4a9b6\" }}>Name</div>\n                    <h3\n                      style={{\n                        fontSize: \"16px\",\n                        margin: \"0 0 10px\",\n                        wordBreak: \"break-all\",\n                      }}\n                    >\n                      {nft.name}\n                    </h3>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    {nft.owner ? (\n                      <div>\n                        <div style={{ color: \"#a4a9b6\" }}>Owner</div>\n                        <p style={{ fontSize: \"14px\", color: \"#0d99ff\" }}>\n                          {nft.owner.length > 12\n                            ? nft.owner.slice(0, 12) + \"...\"\n                            : nft.owner}\n                        </p>\n                      </div>\n                    ) : (\n                      nft.nft_state && (\n                        <div>\n                          <div style={{ color: \"#a4a9b6\" }}>Owner</div>\n                          <p style={{ fontSize: \"14px\" }}>\n                            {nft.nft_state.owner.length > 12\n                              ? nft.nft_state.owner.slice(0, 12) + \"...\"\n                              : nft.nft_state.owner}\n                          </p>\n                        </div>\n                      )\n                    )}\n                  </div>\n                  <hr />\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div className=\"px-2\">\n                      <div style={{ color: \"#a4a9b6\", fontSize: \"1.1rem\" }}>\n                        Price\n                      </div>\n                      {nft.listings && nft.listings[0] ? (\n                        typeof nft.listings[0].price === \"number\" ? (\n                          <ChainPrice>\n                            <img\n                              src={currentChainProps[state.chain].img}\n                              alt=\"\"\n                            />\n                            <PriceArea>\n                              <h6>{`${\n                                nft.listings[0].price.toFixed(2) /\n                                state.conversion\n                              }`}</h6>\n                              <span>{`(${getUsdValue(\n                                nft.listings[0].price.toFixed(2) /\n                                  state.conversion\n                              )})`}</span>\n                            </PriceArea>\n                          </ChainPrice>\n                        ) : (\n                          <div>Not for Sale</div>\n                        )\n                      ) : nft.price ? (\n                        <ChainPrice>\n                          <img\n                            src={currentChainProps[state.chain].img}\n                            alt=\"\"\n                          />\n                          <PriceArea>\n                            <h6>\n                              {(nft.price / PRICE_CONVERSION_CONSTANT).toFixed(\n                                2\n                              )}\n                            </h6>\n                            <span>\n                              (\n                              {getUsdValue(\n                                nft.price / PRICE_CONVERSION_CONSTANT\n                              )}\n                              )\n                            </span>\n                          </PriceArea>\n                        </ChainPrice>\n                      ) : (\n                        <ChainPrice>\n                          <img\n                            src={currentChainProps[state.chain].img}\n                            alt=\"\"\n                          />\n                          <PriceArea>\n                            <h6>0.00</h6>\n                            <span>($0.00)</span>\n                          </PriceArea>\n                        </ChainPrice>\n                      )}\n                    </div>\n                  </div>\n                </NFTCardText>\n              </NFTCard>\n            </a>\n          ))\n        ) : state.filteredNFTData.length > 0 ? (\n          state.filteredNFTData.map((nft) => (\n            <a\n              href={`#/agwaze.near/widget/GenaDrop.NFTDetails?contractId=${nft.contract_id}&tokenId=${nft.token_id}&chainState=${state.chain}`}\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n            >\n              <NFTCard classNmae=\"card\">\n                <ImageCard>\n                  <img\n                    src={nft.media_url}\n                    alt={nft.name}\n                    width=\"100%\"\n                    height=\"100%\"\n                    className=\"rounded-3\"\n                  />\n                </ImageCard>\n                <NFTCardText>\n                  <hr />\n                  <div className=\"d-flex my-4 justify-content-between w-100 px-2\">\n                    <div>{nft.nft_state_lists[0].list_contract.name}</div>\n                  </div>\n                  <div className=\"px-2\">\n                    <div style={{ color: \"#a4a9b6\" }}>Name</div>\n                    <h3\n                      style={{\n                        fontSize: \"16px\",\n                        margin: \"0 0 10px\",\n                        wordBreak: \"break-all\",\n                      }}\n                    >\n                      {nft.name}\n                    </h3>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div>\n                      <div style={{ color: \"#a4a9b6\" }}>Token ID</div>\n                      <p\n                        style={{\n                          fontSize: \"14px\",\n                          marginBottom: \"5px\",\n                          color: \"#0d99ff\",\n                        }}\n                      >\n                        {nft.token_id.length > 30\n                          ? `${nft.token_id.slice(0, 30)}...`\n                          : nft.token_id}\n                      </p>\n                    </div>\n                    {nft.nft_state && (\n                      <div>\n                        <div style={{ color: \"#a4a9b6\" }}>Owner</div>\n                        <p style={{ fontSize: \"14px\" }}>\n                          {nft.nft_state.owner.length > 12\n                            ? nft.nft_state.owner.slice(0, 12) + \"...\"\n                            : nft.nft_state.owner}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  <hr />\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      marginBottom: \"5px\",\n                    }}\n                    className=\"px-2\"\n                  >\n                    <div className=\"px-2\">\n                      <div style={{ color: \"#a4a9b6\", fontSize: \"1.1rem\" }}>\n                        Price\n                      </div>\n                      {nft.listings && nft.listings[0] ? (\n                        typeof nft.listings[0].price === \"number\" ? (\n                          <ChainPrice>\n                            <img\n                              src={currentChainProps[state.chain].img}\n                              alt=\"\"\n                            />\n                            <PriceArea>\n                              <h6>{`${\n                                nft.listings[0].price.toFixed(2) /\n                                state.conversion\n                              }`}</h6>\n                              <span>{`(${getUsdValue(\n                                nft.listings[0].price.toFixed(2) /\n                                  state.conversion\n                              )})`}</span>\n                            </PriceArea>\n                          </ChainPrice>\n                        ) : (\n                          <div>Not for Sale</div>\n                        )\n                      ) : nft.price ? (\n                        <ChainPrice>\n                          <img\n                            src={currentChainProps[state.chain].img}\n                            alt=\"\"\n                          />\n                          <PriceArea>\n                            <h6>\n                              {(nft.price / PRICE_CONVERSION_CONSTANT).toFixed(\n                                2\n                              )}\n                            </h6>\n                            <span>\n                              (\n                              {getUsdValue(\n                                nft.price / PRICE_CONVERSION_CONSTANT\n                              )}\n                              )\n                            </span>\n                          </PriceArea>\n                        </ChainPrice>\n                      ) : (\n                        <ChainPrice>\n                          <img src={currentChain[state.chain].img} alt=\"\" />\n                          <PriceArea>\n                            <h6>0.00</h6>\n                            <span>($0.00)</span>\n                          </PriceArea>\n                        </ChainPrice>\n                      )}\n                    </div>\n                  </div>\n                </NFTCardText>\n              </NFTCard>\n            </a>\n          ))\n        ) : (\n          <div>No results found for \"{state.searchTerm}\".</div>\n        )}\n      </NFTCards>\n    ) : (\n      <NoNFTLoading>\n        <img\n          src=\"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\"\n          alt=\"\"\n        />\n      </NoNFTLoading>\n    )}\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/GenaDrop.Explore", "fact_widget_deployments_id": "3f132a7245c620ada852abc9be806987", "inserted_timestamp": "2023-09-11T13:54:34.322Z", "modified_timestamp": "2023-09-11T13:54:34.322Z", "__row_index": 0}