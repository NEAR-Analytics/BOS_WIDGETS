{"tx_hash": "6V7vG9fiPW7zNcxBZVewtdjTYHY9ZryQqfupDY7JmeGa", "action_id_social": "FtRET8bem66yrRXC3gLLfA6sHbJXKUE8PWVzeDeh2M6B-0-widget", "block_id": 105130987, "block_timestamp": "2023-11-07T07:25:31.057Z", "signer_id": "agwaze.near", "widget_name": "CPlanet.DAO.index", "source_code": "const daoId = props.daoId ?? \"marmaj.sputnik-dao.near\";\nconst Root = styled.div`\n    margin-bottom: 50px;\n`;\n\nconst ImageSection = styled.div`\n\n    height: 200px;\n    width: 100%;\n    position: relative;\n    img {\n        width: 160px;\n        height: 160px;\n        border-radius: 50%;\n        position: absolute;\n        top: 120px;\n        border: 3px solid #fff;\n        left: 20px;\n    }\n`;\n\nconst RightProfile = styled.div`\n    margin-top: 104px;\n    width: 250px;\n    width: 315px;\n    padding: 0 20px;\n    .title {\n        color: #000;\n        font-family: Helvetica Neue;\n        font-size: 24px;\n        font-style: normal;\n        font-weight: 700;\n        line-height: normal;\n        text-transform: uppercase;\n    }\n    .username {\n        overflow: hidden;\n        color: #B0B0B0;\n        text-overflow: ellipsis;\n        font-family: Helvetica Neue;\n        font-size: 16px;\n        font-style: normal;\n        font-weight: 500;\n        line-height: 148%; /* 23.68px */\n    }\n    .description {\n        color: #000;\n        font-family: Helvetica Neue;\n        font-size: 16px;\n        font-style: normal;\n        margin-top: 7px;\n        font-weight: 400;\n        line-height: 148%; /* 23.68px */\n    }\n    .buttons {\n      .follow {\n        width: 90%;\n        height: 32px;\n        background: #000;\n        color: white;\n        margin-bottom: 10px;\n      }\n      .following {\n         width: 90%;\n        height: 32px;\n        color: #B0B0B0;\n        border: 1px solid #B0B0B0 !important;\n        margin-bottom: 10px;\n        cursor: not-allowed;\n      }\n      width: 100%;\n    }\n    .joinButton {\n      display: flex;\n      width: 90%;\n      align-items: center;\n      justify-content: space-between;\n      button {\n      background: black;\n      border: 0;\n      border-radius: 0;\n        width: 48%\n\n      }\n    }\n`;\n\nconst AmountSec = styled.div`\n  max-width: 300px;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  gap: 20px;\n  div {\n    span {\n      color: #B0B0B0;\n      font-family: Helvetica Neue;\n      font-size: 8px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: normal;\n      text-transform: uppercase;\n    }\n    img {\n      width: 15px;\n      height: 15px;\n    }\n    p {\n        color: #000;\n        font-family: Helvetica Neue;\n        font-size: 16px;\n        font-style: normal;\n        font-weight: 700;\n        line-height: normal;\n        text-transform: uppercase;\n        display: flex;\n        align-items: center;\n        gap: 5px;\n        span {\n          color: #000;\n          font-family: Helvetica Neue;\n          font-size: 12px;\n          font-style: normal;\n          font-weight: 400;\n          line-height: normal;\n          text-transform: uppercase;\n        }\n    }\n  }\n`;\n\nconst Button = styled.div`\nwidth: 100%;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nmargin-top: 10px;\n  button {\n    border: 1px solid black;\n    border-radius: 0;\n    color: white;\n    background: black;\n    text-align: center\n    display: flex;\n    width: 296px;\n    padding: 7px 0px;\n    cursor: pointer;\n  }\n  button:disabled {\n    background: grey;\n    border: grey;\n    cursor: not-allowed;\n  }\n  button:hover {\n    background: white;\n    color: black;\n    border-color: black;\n  }\n`;\n\nconst Tags = styled.div`\n    display:flex;\n    gap: 7px;\n    margin-left: 10px;\n    margin-bottom: 10px;\n    margin-top: 40px;\n    .tag {\n         color: #FFF;\n        font-family: Helvetica Neue;\n        font-size: 24px;\n        font-style: normal;\n        font-weight: 700;\n        line-height: normal;\n        border-radius: 50px;\n        background: #F8F8F8;\n        width: max-content;\n        color: #B0B0B0;\n        text-align: center;\n        font-family: Helvetica Neue;\n        font-size: 10px;\n        font-style: normal;\n        font-weight: 500;\n        line-height: 150%; /* 15px */\n        padding: 3px 10px;\n    }\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  height: 48px;\n  border-bottom: 1px solid #eceef0;\n  margin-bottom: 28px;\n  overflow: auto;\n  scroll-behavior: smooth;\n\n  @media (max-width: 1200px) {\n    background: #f8f9fa;\n    border-top: 1px solid #eceef0;\n    margin: 0 -12px 26px;\n\n    > * {\n      flex: 1;\n    }\n  }\n`;\n\nconst TabsButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  font-weight: 600;\n  font-size: 20px;\n  padding: 0 12px;\n  position: relative;\n  color: ${(p) => (p.selected ? \"black\" : \"#687076\")};\n  background: none;\n  border: none;\n  outline: none;\n  text-align: center;\n  text-decoration: none !important;\n\n  &:hover {\n    color: #11181c;\n  }\n\n  &::after {\n    content: \"\";\n    display: ${(p) => (p.selected ? \"block\" : \"none\")};\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: black;\n  }\n`;\n\nState.init({\n  selectedTab: props.tab || \"feed\",\n});\n\nconst [councilMembers, setCouncilMembers] = useState({});\n\nconst Contents = styled.div`\n  display: flex;\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  align-items: flex-start;\n  max-width: 1400px;\n`;\n\nconst MiddleContent = styled.div`\n    width: 950px;\n`;\n\nconst MembersGroup = styled.div`\nmargin-top: 40px;\nwidth: 220px;\nmargin-left: 20px;\nh1 {\n  color: #000;\nfont-family: Helvetica Neue;\nfont-size: 24px;\nfont-style: normal;\nfont-weight: 500;\nline-height: 120%; /* 28.8px */\n}\n  .members {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    margin: 20px 0;\n  }\n`;\n\nconst profile = Social.get(`${daoId}/profile/**`, \"final\");\n\nconst accounts = [daoId];\n\n// -- Smart Contract\nconst policy = Near.view(daoId, \"get_policy\");\nlet members = [];\npolicy?.roles?.length &&\n  policy.roles.forEach((role) => {\n    if (typeof role.kind.Group === \"object\") {\n      members = members.concat(role.kind.Group);\n    }\n  });\nmembers = [...new Set(members)];\n// --\n\nfunction makeAccountIdShorter(accountId) {\n  if (accountId.length > shortenLength) {\n    return accountId.slice(0, shortenLength) + \"...\";\n  }\n  return accountId;\n}\nconst background = profile.backgroundImage\n  ? `https://ipfs.near.social/ipfs/${profile.backgroundImage.ipfs_cid}`\n  : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRub7hFLkStCvZiaSeiUGznP4uzqPPcepghhg&usqp=CAU\";\n\nuseEffect(() => {\n  setCouncilMembers(\n    policy.roles.filter(\n      (data) => data.name === \"council\" || data.name === \"Council\"\n    )[0]?.kind?.Group\n  );\n}, [policy]);\n\nconst fetchApiConfig = {\n  mode: \"cors\",\n  headers: {\n    \"x-api-key\": publicApiKey,\n  },\n};\n\nconst constructURL = (baseURL, paramObj) => {\n  let params = \"\";\n  for (const [key, value] of Object.entries(paramObj ?? {})) {\n    params += `${key}=${value}&`;\n  }\n  params = params.slice(0, -1);\n  return `${baseURL}?${params}`;\n};\n\nconst fether = {\n  balances: (accounts) => {\n    return fetch(\n      constructURL(`${baseApi}/account/balances`, { accounts }),\n      fetchApiConfig\n    );\n  },\n  proposalsStatus: (daoId) => {\n    return fetch(\n      constructURL(`${baseApi}/daos/proposals/status/${daoId}`),\n      fetchApiConfig\n    );\n  },\n};\n\nconst balances = fether.balances([daoId]);\nconst shortenNumber = (n) => {\n  if (n < 1e3) return n;\n  if (n >= 1e3 && n < 1e6) return (n / 1e3).toFixed(1) + \"k\";\n  if (n >= 1e6 && n < 1e9) return (n / 1e6).toFixed(1) + \"m\";\n  if (n >= 1e9 && n < 1e12) return (n / 1e9).toFixed(1) + \"b\";\n  if (n >= 1e12) return (n / 1e12).toFixed(1) + \"t\";\n};\n\n// Account follows you:\nconst accountFollowsYouData = Social.keys(\n  `${context.accountId}/graph/follow/${daoId}`,\n  undefined,\n  {\n    values_only: true,\n  }\n);\nconst accountFollowsYou = Object.keys(accountFollowsYouData || {}).length > 0;\n\nfunction followUser(user, isFollowing) {\n  if (isFollowing) return;\n  const dataToSend = {\n    graph: { follow: { [user]: isFollowing ? null : \"\" } },\n    index: {\n      graph: JSON.stringify({\n        key: \"follow\",\n        value: {\n          type,\n          accountId: user,\n        },\n      }),\n      notify: JSON.stringify({\n        key: user,\n        value: {\n          type,\n        },\n      }),\n    },\n  };\n  Social.set(dataToSend, {\n    force: true,\n  });\n}\n\n// const proposalsStatus = fether.proposalsStatus(daoId);\n\n// let activeProposalsCount;\n// let totalProposalsCount;\n// proposalsStatus?.body?.length &&\n//   proposalsStatus?.body?.forEach((p) => {\n//     activeProposalsCount += p[\"InProgress\"] ? parseInt(p[\"InProgress\"]) : 0;\n//     totalProposalsCount += p[\"Total\"] ? parseInt(p[\"Total\"]) : 0;\n//   });\n\nreturn (\n  <Root>\n    <ImageSection\n      style={{\n        backgroundImage: `url(${background})`,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <img\n        src={\n          profile.image\n            ? `https://ipfs.near.social/ipfs/${profile.image.ipfs_cid}`\n            : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRub7hFLkStCvZiaSeiUGznP4uzqPPcepghhg&usqp=CAU\"\n        }\n      />\n    </ImageSection>\n    <Contents>\n      <RightProfile>\n        <h1 className=\"title\">{profile.name ?? daoId}</h1>\n        <span className=\"username\">@{daoId ?? \"lorem.ipsum.dono\"}</span>\n        <p className=\"description\">{profile.description ?? \"No Description\"}</p>\n        <AmountSec>\n          <div>\n            <span>TotalFunds</span>\n            {balances?.body.totalUsd ? (\n              <b className=\"me-1\">{shortenNumber(balances.body.totalUsd)}USD</b>\n            ) : (\n              <p>0</p>\n            )}\n          </div>\n          <div>\n            <span>Members/Group</span>\n            <p>\n              {members.length ?? \"0\"}/\n              <span>{policy.roles.length ? policy.roles.length - 1 : 0}</span>\n            </p>\n          </div>\n          <div>\n            <span>Active/Total Proposal</span>\n            <p>\n              {activeProposalsCount ?? \"0\"} /\n              <span>{totalProposalsCount ?? 0}</span>\n            </p>\n          </div>\n        </AmountSec>\n        <Tags>\n          {profile.tags &&\n            Object.keys(profile.tags).length > 0 &&\n            Object.keys(profile.tags)\n              .slice(0, 3)\n              .map((data) => <div className=\"tag\">{data}</div>)}\n        </Tags>\n        <div className=\"buttons\">\n          <button\n            onClick={() => followUser(daoId, accountFollowsYou)}\n            className={accountFollowsYou ? \"following\" : \"follow\"}\n          >\n            {accountFollowsYou ? \"Following\" : \"Follow\"}\n          </button>\n        </div>\n      </RightProfile>\n      <MiddleContent>\n        <>\n          <Tabs>\n            <TabsButton\n              onClick={() => State.update({ selectedTab: \"feed\" })}\n              selected={state.selectedTab === \"feed\"}\n            >\n              Social Feed\n            </TabsButton>\n            <TabsButton\n              href={`#`}\n              onClick={() => State.update({ selectedTab: \"proposals\" })}\n              selected={state.selectedTab === \"proposals\"}\n            >\n              Proposals\n            </TabsButton>\n            <TabsButton\n              href={`#`}\n              onClick={() => State.update({ selectedTab: \"nfts\" })}\n              selected={state.selectedTab === \"nfts\"}\n            >\n              NFTs\n            </TabsButton>\n            <TabsButton\n              href={`#`}\n              onClick={() => State.update({ selectedTab: \"members\" })}\n              selected={state.selectedTab === \"members\"}\n            >\n              Members\n            </TabsButton>\n          </Tabs>\n          {state.selectedTab === \"feed\" && (\n            <>\n              <Widget\n                src=\"jgodwill.near/widget/CPlanet.MainPage.Feed\"\n                props={{ accounts }}\n              />\n              <p className=\"text-center\">{daoId} has no post yet</p>\n            </>\n          )}\n          {state.selectedTab === \"members\" && (\n            <Widget\n              src=\"agwaze.near/widget/CPlanet.DAO.Members.Index\"\n              props={{ daoId }}\n            />\n          )}\n          {state.selectedTab === \"nfts\" && (\n            <Widget\n              src=\"agwaze.near/widget/CPlanet.DAO.ProfileNFTs\"\n              props={{ daoId }}\n            />\n          )}\n          {state.selectedTab === \"proposals\" && (\n            <Widget src=\"sking.near/widget/DAO.Proposals\" props={{ daoId }} />\n          )}\n        </>\n      </MiddleContent>\n      <MembersGroup>\n        <h1>Council Members </h1>\n        {councilMembers ? (\n          <div className=\"members\">\n            {councilMembers.map((data) => (\n              <div>\n                <Widget\n                  src=\"agwaze.near/widget/CPlanet.DAO.Members.SideCard\"\n                  props={{ daoId: data, userId: data, update: props.update }}\n                />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div> No Council Members </div>\n        )}\n      </MembersGroup>\n    </Contents>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/CPlanet.DAO.index", "fact_widget_deployments_id": "cb34b67a5c9e83cf0efadbbb4199a1d8", "inserted_timestamp": "2023-11-07T09:27:27.400Z", "modified_timestamp": "2023-11-07T09:27:27.400Z", "__row_index": 13}