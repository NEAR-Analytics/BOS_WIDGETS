{"tx_hash": "5roMwqUL8JVj5piWxejxv8dTwwojEa9cWcH1DePN5HAb", "action_id_social": "Cs4xKUuDPgafwLXswJF7Mfov2SdzuxdsPfYopuoxwjTk-0-widget", "block_id": 103505513, "block_timestamp": "2023-10-16T11:12:17.355Z", "signer_id": "agwaze.near", "widget_name": "CPlanet.Explore.index", "source_code": "const Root = styled.div`\n    padding: 20px;\n    h1 {\n        color: var(--Black, #000);\n        leading-trim: both;\n        text-edge: cap;\n        font-family: Helvetica Neue;\n        font-size: 48px;\n        font-style: normal;\n        font-weight: 700;\n        line-height: normal;\n    }\n`;\n\nconst TopNFTS = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 16px;\n    margin: 20px 0;\n`;\n\nconst SearchSection = styled.div`\n    margin-top: 48px;\n`;\n\nconst Search = styled.div`\nmargin-top: 32px;\ndisplay: flex;\nflex-wrap: wrap;\ninput {\n    border-radius: 32px;\n    flex-shrink: 0;\n    height: 48px;\n    width: 65%;\n    background: #F8F8F8;\n    overflow: hidden;\n    color: #B0B0B0;\n    text-overflow: ellipsis;\n    font-family: Helvetica Neue;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 148%; /* 29.6px */\n}\n`;\n\nconst Cards = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 18px;\n    margin-top: 32px;\n    flex-wrap: wrap;\n    width: 100%;\n`;\nconst FilterDropdown = styled.div`\nwidth: 192px;\nheight: 48px;\nflex-shrink: 0;\nborder-radius: 4px;\nbackground: #B0B0B0;\noverflow: hidden;\ncolor: #FFF;\nfont-family: Helvetica Neue;\nfont-size: 20px;\nfont-style: normal;\ntext-align: center;\nfont-weight: 400;\npadding-top: 8px;\nmargin-left: 10px;\n\n`;\n\nState.init({\n  nftData: [],\n  filteredNFTData: [],\n  searchTerm: \"\",\n});\n\nconst currentChainProps = {\n  near: {\n    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n    livePrice: \"near\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/near-mainnet\",\n    chain: \"near\",\n    id: \"1112\",\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrJuxjGxj4QmyreE6ix4ygqm5pK9Nn_rdc8Ndw6lmJcd0SSnm2zBIc2xJ_My1V0WmK2zg&usqp=CAU\",\n  },\n};\n\nconst seachInputHandler = (e) => {\n  const value = e.target.value.toLowerCase();\n  const searched = state.nftData.filter((nft) =>\n    nft.name.toLowerCase().includes(value)\n  );\n  State.update({\n    searchTerm: value,\n    filteredNFTData: searched,\n  });\n};\n\nconst fetchData = () => {\n  let response = fetch(`${currentChainProps[\"near\"].subgraph}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `\n            query MyQuery {\n             nfts(orderBy: createdAtTimestamp) {\n                category\n                chain\n                createdAtTimestamp\n                id\n                isSold\n                isListed\n                price\n                tokenID\n                owner {\n                    id\n                }\n                tokenIPFSPath\n                transactions {\n                  price\n                }\n                }\n            }\n        `,\n    }),\n  });\n  if (!response.ok) {\n    return \"Loading\";\n  }\n  const collectionData = response.body.data.nfts;\n  if (collectionData) {\n    const filteredNftData = [];\n\n    for (const filteredData of collectionData) {\n      try {\n        const response = fetch(\n          filteredData.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n        );\n        if (response.body.name != undefined) {\n          filteredNftData.push(filteredData);\n        }\n      } catch (error) {\n        // Handle any errors that occur during the fetch if needed\n        console.error(`Error fetching data: ${error}`);\n      }\n    }\n    const nftBody = filteredNftData.map((data) => {\n      const fetchIPFSData = fetch(\n        data.tokenIPFSPath.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n      );\n      if (fetchIPFSData.status === 403) {\n        return State.update({ error: true });\n      }\n      if (!fetchIPFSData.ok) {\n        return \"Loading NFTS from IPFS\";\n      }\n      if (fetchIPFSData.ok) {\n        const nft = fetchIPFSData.body;\n        let nftObject = {};\n        nftObject.contract_id = data?.id;\n        nftObject.sold = data?.isSold;\n        nftObject.isListed = data?.isListed;\n        nftObject.owner = data?.owner?.id;\n        nftObject.price = data?.price;\n        nftObject.token_id = data?.tokenID;\n        nftObject.name = nft?.name;\n        nftObject.description = nft?.description;\n        nftObject.media_url = nft?.image\n          ? nft?.image?.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n          : \"https://ipfs.near.social/ipfs/bafkreidoxgv2w7kmzurdnmflegkthgzaclgwpiccgztpkfdkfzb4265zuu\";\n        return nftObject;\n      }\n    });\n    State.update({\n      nftData: nftBody,\n    });\n  }\n};\nfetchData();\n\nreturn (\n  <Root>\n    <TopNFTS>\n      {Array.from({ length: 4 }).map((_, index) => (\n        <div key={index}>\n          <Widget src=\"agwaze.near/widget/CPlanet.NFTCard.FeaturedNFT\" />\n        </div>\n      ))}\n    </TopNFTS>\n    <SearchSection>\n      <h1>Explore Creative NFTs</h1>\n      <Search>\n        <input\n          value={state.searchTerm}\n          type=\"search\"\n          onChange={seachInputHandler}\n          placeholder=\"Search for NFTs\"\n        />\n        <FilterDropdown>Filter / Dropdown</FilterDropdown>\n      </Search>\n    </SearchSection>\n    <Cards>\n      {state.searchTerm === \"\"\n        ? state.nftData.map((data, index) => (\n            <div key={index}>\n              <Widget\n                props={{\n                  title: data.name,\n                  description: data.description,\n                  image: data.media_url,\n                }}\n                src=\"agwaze.near/widget/CPlanet.NFTCard.index\"\n              />\n            </div>\n          ))\n        : state.filteredNFTData.map((data, index) => (\n            <div key={index}>\n              <Widget\n                props={{\n                  title: data.name,\n                  description: data.description,\n                  image: data.media_url,\n                }}\n                src=\"agwaze.near/widget/CPlanet.NFTCard.index\"\n              />\n            </div>\n          ))}\n    </Cards>\n  </Root>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/CPlanet.Explore.index", "fact_widget_deployments_id": "d46a4726e132153422d7c96dfba2521b", "inserted_timestamp": "2023-10-16T13:21:18.960Z", "modified_timestamp": "2023-10-16T13:21:18.960Z", "__row_index": 13}