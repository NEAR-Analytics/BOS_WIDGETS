{"tx_hash": "FqpSRwzbLoZfxEa4Lm6qPXUSwqpQcDpvyGzF7uvUAkRH", "action_id_social": "FiQcaduJAVbXZh6whjW3Kq345a67PtfFHNjNBjcgkPXx-0-widget", "block_id": 105886609, "block_timestamp": "2023-11-17T07:32:16.392Z", "signer_id": "agwaze.near", "widget_name": "Test.ExpensiveFunction", "source_code": "const [inputValue, setInputValue] = useState(\"\");\nconst [count, setCount] = useState([]);\nconst [toggle, setToggle] = useState(false);\n\n// Let's assume this is a costly computation\nconst expensiveComputation = (input) => {\n  setCount((prev) => [...prev, \"Running expensive computation!\"]);\n  // Some time-consuming logic...\n  return input.toUpperCase();\n};\n\n// // Memoize the result of the expensive computation\nconst memoizedResult = useMemo(() => {\n  return expensiveComputation(inputValue);\n}, [inputValue]);\n\n// Call the expensive computation directly in the render\n// const resultWithoutMemo = expensiveComputation(inputValue);\n\nconst handleInputChange = (event) => {\n  setInputValue(event.target.value);\n};\n\nreturn (\n  <div>\n    <label>\n      Type something:\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </label>\n    <p>Transform to Uppercase: {memoizedResult}</p>\n    <button onClick={() => setToggle(!toggle)}>\n      Toggle - {toggle.toString()}\n    </button>\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      {count.map((message, index) => (\n        <span key={index}>{message}</span>\n      ))}\n    </div>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/Test.ExpensiveFunction", "fact_widget_deployments_id": "8196ba9f0491be29acb1f74f7d1b293e", "inserted_timestamp": "2023-11-17T09:32:47.463Z", "modified_timestamp": "2023-11-17T09:32:47.463Z", "__row_index": 0}