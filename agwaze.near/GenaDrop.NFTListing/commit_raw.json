{"tx_hash": "HuzKqQPCjpeqoNFdRJ4WjWSqhX2p8AuR4ASTUh5RV859", "action_id_social": "B8W863aeKo4eqAjhgaoSuNBeZmmBrSFHsM816G68z6Wk-0-widget", "block_id": 102804656, "block_timestamp": "2023-10-07T05:56:42.142Z", "signer_id": "agwaze.near", "widget_name": "GenaDrop.NFTListing", "source_code": "// add nft transfers here\n// NEED TO FIX SCIENTIFIC NOTION ON PRICE //  ADD ERROR CHECKING for nft contract but preview is enough\nconst image = props.image;\nconst onChange = props.onChange;\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\nconst accountId = context.accountId ?? props.accountId; // add check for context it\nconst ownerId = \"minorityprogrammers.near\"; // attribution\nconst chainState = props.chainState;\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n}; // just in case need to pass in a NFT\nconst NEAR_NOMINATION_EXP = 24;\nconst newContractId = props.contractId\n  ? props?.contractId?.includes(\"genadrop\")\n    ? \"genadrop-contract.nftgen.near\"\n    : props.contractId\n  : \"genadrop-contract.nftgen.near\";\nconst contractId = newContractId; // default nft contract - genadrop-contract.nftgen.near\nconst tokenId = props.tokenId ?? \"1679119560198\"; // maybe condtional check if props is eempty // default nft\nconst fewfarmarket = \"market.fewandfar.near\";\nconst tradeportmarket = \"market.tradeport.near\";\n\nconst fnfMsg = JSON.stringify({\n  sale_conditions: {\n    near: amount,\n  },\n});\n// need to find custom market link to work with\n\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\n  token_id: tokenId,\n});\n\ninitState({\n  contractId: contractId,\n  tokenId: tokenId,\n  amount: amount,\n  msg: msg,\n  fnfMsg: fnfMsg,\n  trpMsg: trpMsg,\n  mintbaseMarketId: null,\n  chainState: chainState,\n  marketLinks: [],\n  custom: false,\n  customMarketLink: defaultCustomMarket,\n  isOpen: false,\n  validMarketLink: true,\n  explorerText: \"\",\n  error: false,\n  loadingListing: false,\n  nftMetadata: nftMetadata,\n  tokenInfo: tokenInfo,\n  receiverId: default_receiver,\n  validReceiver: true,\n  transfer: false, // add checkbox for transfer that shows\n  url: image.url,\n  nft: image.nft ?? {}, // from santiago\n  showAlert: false,\n});\nfunction ownsNFT() {\n  const ownsNFT = context.accountId === state.tokenInfo.owner_id;\n  State.update({\n    ownsNFT: ownsNFT,\n  });\n}\nownsNFT();\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nconst tradeportLink = `https://www.tradeport.xyz/near/collection/${\n  state.contractId.includes(\"genadrop\")\n    ? \"genadrop-contract.nftgen.near\"\n    : state.contractId\n}?tab=items&tokenId=${state.tokenId}`;\n\n//Few and Far Link\nconst fewfarlink = `https://fewfar.com/${\n  state.contractId.includes(\"genadrop\")\n    ? \"genadrop-single-nft-c40d654de\"\n    : state.contractId\n}/${state.tokenId}`;\n\nconst parasLink = `https://paras.id/token/${state.contractId}::${state.tokenId}`;\n\nconst defaultCustomMarket = \"apollo42.near\";\nconst mintbasemarket = \"simple.market.mintbase1.near\";\nconst default_receiver = \"minorityprogrammers.near\"; // default reciver nft for transfers\nconst trpMsg = JSON.stringify({\n  price: amount,\n  market_type: \"sale\",\n  ft_token_id: \"near\",\n});\n\nfunction fetchMintbaseURL() {\n  asyncFetch(\"https://graph.mintbase.xyz/mainnet\", {\n    method: \"POST\",\n    headers: {\n      \"mb-api-key\": \"omni-site\",\n      \"Content-Type\": \"application/json\",\n      \"x-hasura-role\": \"anonymous\",\n    },\n    body: JSON.stringify({\n      query: `\n        query MyQuery {\n        nft_listings(where: {token_id: {_eq: \"${tokenId}\"}}) {\n      \tmetadata_id\n      }\n    }\n      `,\n    }),\n  }).then((data) => {\n    if (data.body.data.nft_listings?.length) {\n      State.update({\n        mintbaseMarketId: data.body.data.nft_listings[0].metadata_id,\n      });\n    }\n  });\n}\n\nfetchMintbaseURL();\n\nconst mintBaseLink = `https://www.mintbase.xyz/meta/${state.mintbaseMarketId}`;\n\nconst marketLinks = {\n  tradeport: {\n    link: tradeportLink,\n  },\n  fewandfar: {\n    link: fewfarlink,\n  },\n  mintbase: {\n    link: mintBaseLink,\n  },\n  paras: {\n    link: parasLink,\n  },\n};\n\nfunction updateTradeportLink() {\n  // Function body goes here\n  updatedLink =\n    \"https://www.tradeport.xyz/near/collection/\" +\n    state.contractId +\n    \"/\" +\n    state.tokenId;\n  State.update({\n    tradeportLink: updatedLink,\n  });\n}\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, \"\").trim();\n}\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, \"\");\n  if (value === \"\") {\n    return \"0\";\n  }\n  return value;\n}\nfunction parseNearAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n  amt = cleanupAmount(amt);\n  const split = amt.split(\".\");\n  const wholePart = split[0];\n  const fracPart = split[1] || \"\";\n  if (split.length > 2 || fracPart.length > NEAR_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n  }\n  return trimLeadingZeroes(\n    wholePart + fracPart.padEnd(NEAR_NOMINATION_EXP, \"0\")\n  );\n}\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\nconst onChangeNearAmount = (amount) => {\n  amount = parseNearAmount(amount);\n  const msgConcat = JSON.stringify({\n    price: amount,\n    market_type: \"sale\",\n    ft_token_id: \"near\",\n  });\n  const fnfMsg = JSON.stringify({\n    sale_conditions: {\n      near: amount,\n    },\n  });\n  // console.log(bigIntNumber);\n  State.update({\n    amount,\n    msg: msgConcat,\n    fnfMsg: fnfMsg,\n    trpMsg: msgConcat,\n  });\n};\n\nconst onChangeEVMAmount = (amount) => {\n  State.update({\n    amount,\n  });\n};\n\nconst onChangeMsg = (msg) => {\n  // currently done in the amount\n  State.update({\n    msg: msg,\n  });\n};\n\nconst onChangeReceiver = (receiverId) => {\n  const validReceiverLink = isNearAddress(receiverId[0]); // add error message or change button based on this\n  State.update({\n    receiverId: receiverId[0],\n    validReceiver: validReceiverLink,\n  });\n  console.log(`receiver: ${state.receiverId[0]}`);\n};\n\nconst onChangeContract = (contractId) => {\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\n  State.update({\n    contractId,\n    nftMetadata,\n  });\n  onChangeToken(state.tokenId);\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeToken = (tokenId) => {\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\n    token_id: tokenId,\n  });\n  State.update({\n    tokenId,\n    tokenInfo,\n  });\n  ownsNFT();\n  updateTradeportLink();\n};\n\nconst onChangeCustomMarket = (customMarketLink) => {\n  const validMarketLink = isNearAddress(customMarketLink);\n  State.update({\n    customMarketLink,\n    validMarketLink,\n  });\n};\n/* HELPER FUNCTION */\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst currentChainProps = {\n  aurora: {\n    img: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    id: \"1313161554\",\n    chain: \"Aurora\",\n    explorer: \"https://aurorascan.dev/\",\n    explorerTx: \"https://aurorascan.dev/\",\n    livePrice: \"ethereum\",\n    contract: \"0xe93097f7C3bF7A0E0F1261c5bD88F86D878667B5\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\n  },\n  arbitrum: {\n    img: \"https://assets.coingecko.com/coins/images/16547/large/photo_2023-03-29_21.47.00.jpeg?1680097630\",\n    id: \"42161\",\n    contract: \"0x27E52A81975F5Fb836e79007E3c478C6c0E6E9FB\",\n    chain: \"Arbitrum\",\n    explorer: \"https://arbiscan.io/\",\n    explorerTx: \"https://arbiscan.io/\",\n    livePrice: \"ethereum\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\n  },\n  celo: {\n    img: \"https://assets.coingecko.com/coins/images/11090/large/InjXBNx9_400x400.jpg?1674707499\",\n    id: \"42220\",\n    livePrice: \"celo\",\n    contract: \"0x5616BCcc278F7CE8B003f5a48f3754DDcfA4db5a\",\n    explorer: \"https://explorer.celo.org/address/\",\n    explorerTx: \"https://explorer.celo.org/\",\n    chain: \"Celo\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\n  },\n  polygon: {\n    img: \"https://altcoinsbox.com/wp-content/uploads/2023/03/matic-logo.webp\",\n    id: \"137\",\n    chain: \"Polygon\",\n    livePrice: \"matic-network\",\n    contract: \"0x57Eb0aaAf69E22D8adAe897535bF57c7958e3b1b\",\n    explorer: \"https://polygonscan.com/address/\",\n    explorerTx: \"https://polygonscan.com/\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\n  },\n};\n\nconst listAbi = [\n  \"function createMarketplaceItem(address nftContract, uint256 tokenId, uint256 price, string calldata category, address seller) public payable {}\",\n  \"function nftSale(uint256 price, uint256 tokenId, address seller, address nftContract) public payable {}\",\n];\n\nconst evmList = () => {\n  if (state.amount > 10000000) return;\n\n  State.update({\n    loadingListing: true,\n  });\n\n  const contract = new ethers.Contract(\n    currentChainProps[props.chainState].contract,\n    listAbi,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"Formed thee\", contract);\n  const nftContract = contractId.split(tokenId)[0];\n\n  contract\n    .createMarketplaceItem(\n      nftContract,\n      tokenId,\n      (Number(state.amount) * 1e18).toString(),\n      \"General\",\n      state.sender\n    )\n    .then((transactionHash) => transactionHash.wait())\n    .then((ricit) => {\n      State.update({\n        isOpen: true,\n        message: true,\n        error: false,\n        loadingListing: false,\n        explorerText: `${currentChainProps[props.chainState].explorerTx}/tx/${\n          ricit.transactionHash\n        }`,\n      });\n    })\n    .catch((err) => {\n      State.update({\n        isOpen: false,\n        loadingListing: false,\n        error: true,\n        text: err.reason,\n      });\n    });\n};\n\nconst closeModal = () => State.update({ isOpen: false });\n\nconst list = () => {\n  if (!accountId) {\n    console.log(\"Sign in to list\");\n    return;\n  }\n  State.update({\n    loadingListing: true,\n  });\n\n  console.log(state.trpMsg);\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 10000000000000000000000; // 0.01 near\n  Near.call(\n    [\n      state.tradeport\n        ? {\n            contractName: tradeportmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.tradeport\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: tradeportmarket,\n              msg: state.trpMsg,\n            },\n            gas: gas,\n            deposit: deposit,\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: fewfarmarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.fewfar\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: fewfarmarket,\n              msg: state.fnfMsg,\n            },\n            gas: gas,\n            deposit: deposit,\n          }\n        : null,\n      state.mintbase\n        ? {\n            contractName: mintbasemarket,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.mintbase\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: mintbasemarket,\n              msg: state.msg, // need to change mesg to conform with mitnbase market // \"{\\\"price\\\":\\\"3900000000000000000000000\\\",\\\"autotransfer\\\":true}\"\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n      state.custom\n        ? {\n            contractName: state.customMarketLink,\n            methodName: \"storage_deposit\",\n            args: {\n              receiver_id: context.accountId,\n            },\n            gas,\n            deposit: deposit,\n          }\n        : null,\n      state.custom\n        ? {\n            contractName: state.contractId,\n            // need to wrap first with near_deposit\n            methodName: \"nft_approve\",\n            args: {\n              token_id: state.tokenId,\n              account_id: state.customMarketLink,\n              msg: state.msg, // need to add the variables and buffer seerailize\n            },\n            gas: gas,\n            deposit: deposit, // may take this out\n          }\n        : null,\n    ].filter((entry) => entry !== null)\n  );\n  State.update({\n    loadingListing: false,\n  });\n};\nconst transfer = () => {\n  if (!accountId) {\n    return;\n  }\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 1; // 0.01 near // maybe less\n  Near.call([\n    {\n      contractName: state.contractId,\n      methodName: \"nft_transfer\",\n      args: {\n        receiver_id: state.receiverId,\n        token_id: state.tokenId,\n      },\n      gas: gas ?? 200000000000000,\n      deposit: deposit ?? 10000000000000000000000,\n    },\n  ]);\n};\nconst selectFewFar = () => {\n  State.update({\n    fewfar: !state.fewfar,\n  });\n};\nconst selectTradeport = () => {\n  State.update({\n    tradeport: !state.tradeport,\n  });\n};\nconst selectMintbase = () => {\n  State.update({\n    mintbase: !state.mintbase,\n  });\n};\nif (!accountId) {\n  State.update({\n    showAlert: true,\n    toastMessage: \"Please Sign in to Near wallet to list\",\n  });\n}\nconst selectCustom = () => {\n  State.update({\n    custom: !state.custom,\n  });\n}; // need better helper function for checking whether valid NEAR address\n\nconst Heading = styled.h1`\n  margin: 3px auto 3px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  line-height:2.1rem;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst Popup = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  backdrop-filter: blur(5px); /* Apply background blur */\n  \n`;\n\nreturn (\n  <>\n    {state.showAlert && (\n      <Widget src=\"jgodwill.near/widget/genalert\" props={state} />\n    )}\n    <Heading className=\"text-center fs-2 fw-bold my-4\">\n      {\" \"}\n      \ud83d\udecd\ufe0f List NFT {props.chainState === \"near\" && \"to Multiple Marketplaces\"}\n    </Heading>\n    {!props.tokenId && !props.contractId && (\n      <div>\n        <div\n          className=\"p-2 rounded mt-3\"\n          style={{\n            background: \"#fdfdfd\",\n            border: \"solid 1px #dee2e6\",\n            borderBottomLeftRadius: \".375rem\",\n            borderBottomRightRadius: \".375rem\",\n            minHeight: \"9em\",\n          }}\n        >\n          <div>\n            <div className=\"mt-2\">\n              <Widget\n                src={`jgodwill.near/widget/genadrop-nft-selector`}\n                props={{\n                  onChange: ({ contractId, tokenId }) => {\n                    State.update({\n                      contractId: contractId,\n                      tokenId: tokenId,\n                    });\n                    onChangeToken(tokenId);\n                    onChangeContract(contractId);\n                  },\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )}\n    {state.tokenId !== \"1679119560198\" && (\n      <>\n        <Widget\n          src=\"agwaze.near/widget/GenaDrop.ListingMarketPrice\"\n          props={{\n            state,\n            onChangeContract,\n            onChangeToken,\n            selectTradeport,\n            selectFewFar,\n            loadingListing: state.loadingListing,\n            selectCustom,\n            selectMintbase,\n            marketLinks,\n            chainState,\n            onChangeCustomMarket,\n            onChangeNearAmount,\n            onChangeEVMAmount,\n            list,\n            evmList,\n            onChangeReceiver,\n          }}\n        />\n      </>\n    )}\n    {state.isOpen && (\n      <Popup>\n        <Widget\n          src=\"agwaze.near/widget/GenaDrop.SuccessModal\"\n          props={{ closeModal, externalLink: state.explorerText }}\n        />\n      </Popup>\n    )}\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/GenaDrop.NFTListing", "fact_widget_deployments_id": "e735ffe677798661167b13d8644653cf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}