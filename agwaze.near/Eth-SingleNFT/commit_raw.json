{"tx_hash": "4U7QNVdst9nAADrvoRfoSFrpqVCuedFxrHKTgS1rA7zA", "action_id_social": "HNG4VwK1uiY1wmehxixx8ozbvrMgtWYU3u1hm4gdvPxy-0-widget", "block_id": 96141566, "block_timestamp": "2023-07-10T11:15:01.297Z", "signer_id": "agwaze.near", "widget_name": "Eth-SingleNFT", "source_code": "const PRICE_CONVERSION_VALUE = 0.000000000000000001;\nconst currentChain = {\n  1313161554: {\n    logoUrl: \"https://s2.coinmarketcap.com/static/img/coins/200x200/14803.png\",\n    id: \"1313161554\",\n    chain: \"Aurora\",\n    livePrice: \"ethereum\",\n    explorer: \"https://aurorascan.dev\",\n    contract: \"0xe93097f7C3bF7A0E0F1261c5bD88F86D878667B5\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/aurora-mainnet\",\n  },\n  42161: {\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRCYo9YwixfzDbW3cQ3ObNHxifNbQhmuJYpyhbXZTBS7w&s\",\n    id: \"42161\",\n    chain: \"Arbitrum\",\n    livePrice: \"ethereum\",\n    explorer: \"https://arbiscan.io\",\n    contract: \"0x27E52A81975F5Fb836e79007E3c478C6c0E6E9FB\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/arbitrum\",\n  },\n  42220: {\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScIkhIs47BB_bEeLqnfu_4-lvs1uJIh8PeduKZsmyQFjLw2mQvt1UvT57G5kvOQGSw5rs&usqp=CAU\",\n    id: \"42220\",\n    explorer: \"https://explorer.celo.org\",\n    livePrice: \"celo\",\n    chain: \"Celo\",\n    contract: \"0x5616BCcc278F7CE8B003f5a48f3754DDcfA4db5a\",\n    subgraph: \"https://api.thegraph.com/subgraphs/name/prometheo/celo-mainnet\",\n  },\n  137: {\n    logoUrl:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOt8M-N1nbwMCiCiCNBv3-QI1tLBuL-BmcwowhGxce&s\",\n    id: \"137\",\n    chain: \"Polygon\",\n    livePrice: \"matic-network\",\n    explorer: \"https://polygonscan.com\",\n    contract: \"0xd91cC6DE129D13F4384FB0bC07a1a99D4F858e72\",\n    subgraph:\n      \"https://api.thegraph.com/subgraphs/name/prometheo/polygon-mainnet\",\n  },\n};\n\nconst listAbi = [\n  \"function createMarketplaceItem(address nftContract, uint256 tokenId, uint256 price, string calldata category, address seller) public payable {}\",\n];\n\nconst Root = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 0;\n    align-items: center;\n    justify-content: center;\n`;\nconst MainContainer = styled.div`\n    padding: 30px;\n    height: auto;\n    max-width: 1300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst TopSection = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n  @media screen and (max-width: 600px) {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst TopImageContainer = styled.div`\n  padding: 1em;\n  background: #ffffff;\n    width: 50%;\n    min-width: 355px;\n  border: 2px solid #cacdd5;\n  margin-right: 20px;\n  box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\n  border-radius: 0.7em;\n  &>img {\n    width: 100%;\n    max-height: 548px;\n  }\n`;\n\nconst HeaderText = styled.h1`\n  font-size: 1.5rem;\n`;\n\nconst PriceArea = styled.div`\n  display: flex;\n  align-items: center;\n  color: #0d99ff;\n  &>*{\n  margin: 0px;\n  padding: 0px;\n  }\n  &>h6{\n    font-weight: 700;\n    margin-left: 5px;\n    margin-top: 4px;\n    margin-right: 3px;\n    font-size: 1.3rem;\n  }\n  &>span{\n  font-size: 1.2rem;\n  margin: 0px;\n  }\n`;\n\nconst PriceBucket = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n    margin-top: 30px;\n  width: 100%;\n`;\n\nconst RightSection = styled.div`\n    width: 46%;\n    min-width: 350px;\n    margin-left: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    margin-right: 10px;\n`;\n\nconst Description = styled.div`\n     width: 100%;\n    border-radius: 1em;\n    background: #ffffff;\n    border: 2px solid #eeeff2;\n    padding: 1em;\n    margin-top: 40px;\n    box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\n    &>h6{\n        font-weight: 600;\n        font-size: 1.5rem;\n    }\n    \n`;\n\nconst AttributeContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n`;\n\nconst Attribute = styled.div`\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    padding: 0.5em;\n    border-radius: 0.5em;\n    width: 206px;\n    background: #fafafb;\n    margin-bottom: 20px;\n    border: 1px solid #86ccff;\n    border-radius: 10.6849px;\n    &>*span {\n        padding: 0;\n        color: #b2b7c2;\n    }\n`;\n\nconst TransactionTable = styled.div`\n     width: 100%;\n  max-width: 70%;\n  background: #ffffff;\n  border: 2px solid #eeeff2;\n  box-shadow: 2px 7px 22px rgba(28, 27, 28, 0.1);\n  border-radius: 16px;\n  margin-bottom: 40px;\n`;\n\nconst TableHeader = styled.div`\n    width: 100%;\n  padding: 0.5em;\n  font-weight: 600;\n  font-size: 1.5rem;\n  margin-bottom: 0.5em;\n  display: flex;\n  justify-content: flex-start;\n  gap: 1em;\n  background: #f5f6f7;\n  border-radius: 14px 14px 0px 0px;\n  &>h1 {\n    font-size: 24px;\n  }\n`;\n\nconst TableBody = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0.5em;\n    justify-content: space-between;\n    border-bottom: 1px solid #dde1e6;\n`;\n\nconst RowType = styled.div`\n     display: inline-flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 0.5em;\n  font-size: 0.75rem;\n  padding: 0.25em 1em;\n  border-radius: 0.7em;\n  border: 1px solid #a4a9b6;\n`;\n\nconst RowBody = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: 10px;\n    padding-left: 7px;\n    flex-wrap: wrap;\n    width: 100%;\n    justify-content: space-between;\n    @media and screen\n    p {\n        margin: 0;\n        border-bottom: 1px solid #e5e8eb;\n        font-size: 12px;\n        min-width: 100px;\n        text-align: center;\n    }\n    span {\n        font-size: 12px;\n    }\n`;\n\nconst MintDetails = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    color: #525c76;\n    &>span {\n        font-size: 14px;\n    }\n    &>a {\n        cursor: pointer;\n    }\n`;\n\nconst Popup = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  backdrop-filter: blur(5px); /* Apply background blur */\n  \n`;\n\nconst PopupContent = styled.div`\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 5px;\n  align-items: center;\n  max-width: 350px;\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n}\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n`;\n\nconst Button = styled.button`\n  background-color: #0d99ff;\n  color: white;\n  padding: 5px 15px;\n  border: none;\n    margin-top: 20px;\n    margin-right: 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n`;\n\nconst CloseButton = styled.button`\n    background-color: white;\n    color: #0d99ff;\n    margin-top: 20px;\n    padding: 5px 15px;\n    border: 1px solid #0d99ff;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n`;\n\nconst MarketplaceListed = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  &>span {\n    font-size: 14px;\n    color: #525c76;\n  }\n  &>p {\n    margin: 0;\n    font-size: 14px\n  }\n`;\n\nState.init({\n  isOpen: false,\n  error: false,\n});\n\nconst getFormatedTxDate = (newDate) => {\n  const now = new Date();\n  const date = new Date(newDate * 1000);\n  const diff = (now.getTime() - date.getTime()) / (1000 * 3600 * 24);\n  if (diff < 0.04) return `${parseInt(diff * 24 * 60)} mins ago`;\n  if (diff < 1) return `${parseInt(diff * 24)} hours ago`;\n  if (diff < 31) return `${parseInt(diff)} days ago`;\n  if (diff < 356) return `${parseInt(diff / 30)} months ago`;\n  return `${diff / 30 / 12} years ago`;\n};\n\nconst getUsdValue = (price) => {\n  const res = fetch(\n    `https://api.coingecko.com/api/v3/simple/price?ids=${\n      currentChain[props.singleNftProps.chain].livePrice\n    }&vs_currencies=usd`\n  );\n  if (res.ok) {\n    const multiplyBy = Object.values(res?.body)[0]?.usd;\n    const value = multiplyBy * price.toFixed(2);\n    return value.toFixed(4);\n  }\n};\n\nconst handleSendClick = () => {\n  // Handle the send button click event\n  console.log(\"Input value:\", state.listingPrice, Number(state.listingPrice));\n  console.log(\n    \"Input value:\",\n    Ethers.provider().getSigner(),\n    currentChain[props.singleNftProps.chain].contract\n  );\n  const contract = new ethers.Contract(\n    currentChain[props.singleNftProps.chain].contract,\n    listAbi,\n    Ethers.provider().getSigner()\n  );\n  console.log(\"Formed thee\", contract);\n  const nftContract = props.singleNftProps.id.split(\n    props.singleNftProps.tokenId\n  )[0];\n\n  console.log(\n    \"Logged Thee\",\n    nftContract,\n    props.singleNftProps.tokenId,\n    (Number(state.listingPrice) * 1e18).toString()\n  );\n\n  contract\n    .createMarketplaceItem(\n      nftContract,\n      props.singleNftProps.tokenId,\n      (Number(state.listingPrice) * 1e18).toString(),\n      \"General\",\n      \"0xB4bE310666D2f909789Fb1a2FD09a9bEB0Edd99D\"\n    )\n    .then((transactionHash) => transactionHash.wait())\n    .then((ricit) => {\n      console.log(\"does not get hiere\", ricit);\n      State.update({\n        isOpen: false,\n        message: true,\n        text: `${currentChain[props.singleNftProps.chain].explorer}/tx/${\n          ricit.transactionHash\n        }`,\n      });\n    })\n    .catch((err) => {\n      console.log(\"erro stuffs, baffles me\", err);\n      State.update({\n        isOpen: false,\n        error: true,\n        text: err.reason,\n      });\n    });\n};\n\nconst handleListing = () => {\n  // Handle the send button click event\n\n  State.update({\n    isOpen: true,\n  });\n};\n\nconst handleInputChange = (e) => {\n  console.log(\"updator\", e.target.value);\n  State.update({\n    listingPrice: e.target.value,\n  });\n};\n\nconst price = props.singleNftProps.price\n  ? props.singleNftProps.price * PRICE_CONVERSION_VALUE\n  : 0;\n\nreturn (\n  <Root>\n    <MainContainer>\n      <TopSection>\n        <TopImageContainer>\n          <HeaderText>{props.singleNftProps.name || \"AI Sunset\"}</HeaderText>\n          <img\n            src={\n              props.singleNftProps.image\n                ? props.singleNftProps?.image.replace(\n                    \"ipfs://\",\n                    \"https://ipfs.io/ipfs/\"\n                  )\n                : \"https://ipfs.io/ipfs/QmZbtU8RnMymJAJRpTriZgDXVeeCpm5RyXMJNquGoVc4Rb\"\n            }\n            alt=\"NFT\"\n            width=\"100%\"\n            height=\"100%\"\n            className=\"rounded-3\"\n          />\n          <div\n            style={{\n              display: \"flex\",\n              marginTop: \"10px\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <p\n              style={{\n                marginBottom: \"0.5em\",\n                fontSize: \"0.85rem\",\n                color: \"#0d99ff\",\n              }}\n            >\n              Created by\n            </p>\n            <span style={{ fontSize: \"0.9rem\", fontWeight: 600 }}>\n              {`${\n                props.singleNftProps.owner\n                  ? props.singleNftProps.owner.slice(0, 6)\n                  : \"0x022\"\n              }...${\n                props.singleNftProps.owner\n                  ? props.singleNftProps.owner.slice(36)\n                  : \"0454et\"\n              }`}\n            </span>\n          </div>\n        </TopImageContainer>\n        <RightSection>\n          {state.error && (\n            <span style={{ color: state.colour || \"red\" }}>{state.text}</span>\n          )}\n          {state.message && (\n            <a href={`${state.text}`} target=\"_blank\">\n              View Transaction\n            </a>\n          )}\n          <PriceBucket>\n            <div>\n              <p style={{ color: \"#b2b7c2\", marginBottom: 0 }}>CURRENT PRICE</p>\n              <PriceArea>\n                <h6>{price.toFixed(2)}</h6>\n                <span>\n                  ($\n                  {getUsdValue(\n                    props.singleNftProps.price * PRICE_CONVERSION_VALUE || 0\n                  )}\n                  )\n                </span>\n              </PriceArea>\n            </div>\n            <div>\n              {props.singleNftProps.isListed ? (\n                <button\n                  style={{\n                    backgroundColor: \"#525c76\",\n                    borderColor: \"#525c76\",\n                    cursor: \"not-allowed\",\n                  }}\n                >\n                  Listed\n                </button>\n              ) : props.singleNftProps.owner == props.sender ? (\n                <button onClick={handleListing}>List</button>\n              ) : (\n                <button\n                  style={{\n                    backgroundColor: \"#525c76\",\n                    borderColor: \"#525c76\",\n                    cursor: \"not-allowed\",\n                  }}\n                >\n                  Not Listed\n                </button>\n              )}\n            </div>\n            {state.isOpen && (\n              <Popup>\n                <div>\n                  <PopupContent>\n                    <div>\n                      <Input\n                        type=\"text\"\n                        value={state.listingPrice}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter Listing Price\"\n                      />\n                      <div\n                        style={{\n                          width: \"100%\",\n                          display: flex,\n                          alignItems: \"center\",\n                          justifyContent: \"center\",\n                          flexDirection: \"row\",\n                          marginLeft: \"40px\",\n                        }}\n                      >\n                        <Button onClick={handleSendClick}>List NFT</Button>\n                        <CloseButton\n                          onClick={() => State.update({ isOpen: false })}\n                        >\n                          Close\n                        </CloseButton>\n                      </div>\n                    </div>\n                  </PopupContent>\n                </div>\n              </Popup>\n            )}\n          </PriceBucket>\n          <Description>\n            <h6>Description</h6>\n            <span>\n              {props.singleNftProps.description || \"Ai generated sunset cliffs\"}\n            </span>\n          </Description>\n          <Description>\n            <h6>Attributes</h6>\n            <AttributeContainer>\n              {props.singleNftProps.attributes ? (\n                props.singleNftProps.attributes.map((data) => (\n                  <Attribute>\n                    <div>\n                      <span style={{ color: \"#b2b7c2\" }}>File Type</span>\n                      <p style={{ marginTop: \"10px\" }}>{data.trait_type}</p>\n                    </div>\n                    <div>\n                      <span style={{ color: \"#b2b7c2\" }}>Rarity</span>\n                      <p style={{ marginTop: \"10px\" }}>{data.value}</p>\n                    </div>\n                  </Attribute>\n                ))\n              ) : (\n                <Attribute>\n                  <div>\n                    <span style={{ color: \"#b2b7c2\" }}>File Type</span>\n                    <p style={{ marginTop: \"10px\" }}>PNG</p>\n                  </div>\n                  <div>\n                    <span style={{ color: \"#b2b7c2\" }}>Rarity</span>\n                    <p style={{ marginTop: \"10px\" }}>1%</p>\n                  </div>\n                </Attribute>\n              )}\n            </AttributeContainer>\n          </Description>\n          <Description>\n            <h6>Details</h6>\n            <MintDetails>\n              <span>Mint Address</span>\n              <a\n                target=\"_blank\"\n                href={`${\n                  currentChain[props.singleNftProps.chain].explorer\n                }/address/${props.singleNftProps.owner || \"\"}`}\n              >\n                {`${\n                  props.singleNftProps.owner\n                    ? props.singleNftProps.owner.slice(0, 6)\n                    : \"0x022\"\n                }...${\n                  props.singleNftProps.owner\n                    ? props.singleNftProps.owner.slice(36)\n                    : \"0454et\"\n                }`}\n              </a>\n            </MintDetails>\n          </Description>\n        </RightSection>\n      </TopSection>\n    </MainContainer>\n    <TransactionTable>\n      <TableHeader>\n        <h1>Transaction History</h1>\n      </TableHeader>\n      {props.singleNftProps.transactions ? (\n        props.singleNftProps.transactions.map((data) => (\n          <TableBody>\n            <RowType>{data.type}</RowType>\n            <RowBody>\n              <span>From</span>\n              <p>\n                {`${data.owner ? data.owner.id.slice(0, 4) : \"..\"}...${\n                  data.owner ? data.owner.id.slice(40) : \".\"\n                }`}\n              </p>\n              <span>To</span>\n              <p>\n                {`${data.to ? data.to.id.slice(0, 4) : \"..\"}...${\n                  data.to ? data.to.id.slice(40) : \".\"\n                }`}\n              </p>\n              <p>{getFormatedTxDate(data.txDate || \"1662436482\")}</p>\n            </RowBody>\n          </TableBody>\n        ))\n      ) : (\n        <TableBody>\n          <RowType>Listing</RowType>\n          <RowBody>\n            <span>From</span>\n            <p>---</p>\n            <span>To</span>\n            <p>waze.near</p>\n            <p>{getFormatedTxDate(data.txDate || \"1662436482\")}</p>\n          </RowBody>\n        </TableBody>\n      )}\n    </TransactionTable>\n    <Widget src=\"jgodwill.near/widget/GenaDrop.Footer\" />\n  </Root>\n);\n", "metadata": null, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/Eth-SingleNFT", "fact_widget_deployments_id": "4410aa689d25ab79f53efffa6172dab3", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 7}