{"tx_hash": "29EsXvqEELtDKNNghaNbWf9p7wP79oAuYgS7FjJUcJqj", "action_id_social": "DBMNcmzmvCPrUHdZkxVqptt371GmaPWxNRA97HSFXLqM-0-widget", "block_id": 104820314, "block_timestamp": "2023-11-03T06:35:14.835Z", "signer_id": "agwaze.near", "widget_name": "CPlanet.Explore.FilterDropdown", "source_code": "const defaultProps = [\n  {\n    id: \"0\",\n    name: \"Creative DAO NFTs\",\n  },\n  {\n    id: \"1\",\n    name: \"Multichain NFTS\",\n  },\n];\n\nconst propsChains = props.selected ?? defaultProps;\n\nState.init({\n  selectIsOpen: false,\n  selectedChain: \"0\",\n});\nconst handleSelectClick = () => {\n  State.update({\n    selectIsOpen: !state.selectIsOpen,\n  });\n};\n\nconst handleOutsideClick = (e) => {\n  e.preventDefault();\n  if (!!state.selectIsOpen) {\n    State.update({\n      selectIsOpen: false,\n    });\n  }\n};\n\nconst SelectTag = styled.select`\n  height: fit-content;\n  width: 300px;\n`;\n\nconst ChainIcon = styled.option`\n  display: flex;\n  height: 130px;\n  padding: 1rem auto;\n  &>img{\n    height:100px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\n\nconst SelectReplicaContainer = styled.div`\n  position: relative;\n  display: inline-block;\n  margin: 0 20px;\n  user-select:none;\n    z-index: 1;\n\n  & .select-replica__select {\n    position: relative;\n    z-index: 1;\n  }\n\n  & .select-replica__selected {\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid black;\n    gap: 10px;\n    height: 50px;\n    z-index: 1;\n    border-radius: 10px;\n    background-color: transparent;\n    width:100%;\n    max-width: 350px;\n    padding:0 10px 0 5px;\n    min-height:20px;\n    p {\n        margin-bottom: 0;\n        font-size: 15px;\n        font-weight: 500;\n    }\n\n\n    & > img {\n      height: 100%;\n      width: 80px;\n      object-fit: contain;\n    }\n\n    & > span {\n        opacity:.6;\n    }\n\n  }\n\n  & .select-replica__options {\n    position: absolute;\n    opacity:0;\n    top: 110%;\n    left: 0;\n    width: 100%;\n    margin:auto;\n    border-radius: 10px;\n    background-color: transparent;\n    height: auto;\n    box-shadow: 0 10px 20px 10px rgba(0,0,0,.05);\n    pointer-events:none;\n    transform:translateY(-100px);\n    transition: all .2s;\n    max-width: 350px;\n  }\n\n  & .select-replica__options.open {\n    transition: all .2s;\n    transform:translateY(0);\n    opacity:1;\n    pointer-events:all;\n    width: 100%;\n    max-width: 350px;\n  }\n\n  & .select-replica__option {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    background-color: #fff;\n    padding: 0;\n    border-bottom: 1px solid rgba(0,0,0,.05);\n  }\n\n  & .select-replica__option.selected {\n    background-color: #f0f0f0;\n  }\n\n  & .select-replica__option img {\n    height: 80px;\n    width: 100px;\n    object-fit: contain;\n  }\n`;\nState.update({ chains: propsChains || chains });\nconst handleChainChange = (chain_id) => {\n  props.updateChain(chain_id);\n};\n\nreturn (\n  <>\n    <SelectReplicaContainer>\n      <div\n        className={`select-replica__select ${state.selectIsOpen ? \"open\" : \"\"}`}\n        onClick={handleSelectClick}\n      >\n        <div className=\"select-replica__selected\">\n          {state.chains &&\n          state.chains.filter(\n            (chain) => chain?.id === state?.selectedChain?.toString()\n          ) ? (\n            <p>\n              {state.chains\n                .filter((chain) => chain.id === state.selectedChain.toString())\n                .map((c) => c.name)}\n            </p>\n          ) : (\n            \"Select an option\"\n          )}\n          <span>\u25bc</span>\n        </div>\n        <div\n          className={`select-replica__options ${\n            state.selectIsOpen ? \"open\" : \"\"\n          }`}\n        >\n          {state.chains &&\n            state.chains.map((chain) =>\n              chain.id !== state.selectedChain.toString() ? (\n                <div\n                  key={chain.id}\n                  className={`select-replica__option ${\n                    selectedOption === chain.name ? \"selected\" : \"\"\n                  }`}\n                  onClick={() => handleChainChange(chain.id)}\n                >\n                  <p>{chain.name}</p>\n                </div>\n              ) : (\n                \"\"\n              )\n            )}\n        </div>\n      </div>\n    </SelectReplicaContainer>\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/CPlanet.Explore.FilterDropdown", "fact_widget_deployments_id": "ac8ec374c638baf244e0e3e103a55f94", "inserted_timestamp": "2023-11-03T08:34:09.007Z", "modified_timestamp": "2023-11-03T08:34:09.007Z", "__row_index": 1}