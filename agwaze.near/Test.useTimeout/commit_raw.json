{"tx_hash": "BJVwGfjeUGifRmXtkTDWoWB2kwHQPn9gSaJxYiQ7tGBL", "action_id_social": "AHd11HjH5ShQo6Fd2nidaf9sNY4iedH4yxRpUdHBPkB2-0-widget", "block_id": 105884617, "block_timestamp": "2023-11-17T06:50:59.071Z", "signer_id": "agwaze.near", "widget_name": "Test.useTimeout", "source_code": "const [count, setCount] = useState(0);\nconst [timerId, setTimerId] = useState(null);\n\nconst incrementCount = useCallback(() => {\n  setCount((prevCount) => prevCount + 1);\n}, []);\n\nconst clearTimer = () => {\n  // Clear the timeout to stop the increment operation.\n  clearTimeout(timerId);\n  setTimerId(null); // Reset the timerId in the state\n};\n\nconst resetCount = () => {\n  // Reset the count to its initial value.\n  setCount(0);\n};\n\nuseEffect(() => {\n  console.log(\"Effect ran! Count:\", count);\n\n  // Set up the setTimeout and store its ID.\n  const newTimerId = setTimeout(() => {\n    incrementCount();\n  }, 2000);\n\n  // Update the timerId in the state.\n  setTimerId(newTimerId);\n\n  // Return a cleanup function to clear the timer.\n  return () => {\n    clearTimer();\n  };\n}, [count, incrementCount]);\n\nreturn (\n  <div>\n    <div>{count}</div>\n    <button onClick={clearTimer}>Clear Timeout</button>\n    <button onClick={resetCount}>Reset Count</button>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/Test.useTimeout", "fact_widget_deployments_id": "03e401fb94369ffdbf44d0a0dc277ef5", "inserted_timestamp": "2023-11-17T08:47:17.229Z", "modified_timestamp": "2023-11-17T08:47:17.229Z", "__row_index": 1}