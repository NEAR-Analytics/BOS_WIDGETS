{"tx_hash": "2wG6NAQY8LZUUX5Ay1A1HAkjKS5AfHN5kv9nHpaHSd2b", "action_id_social": "EBu2Df2H3g5s5Z2USXgwAPRRAF81WrQwcJ8kafjYH5jk-0-widget", "block_id": 107837226, "block_timestamp": "2023-12-13T11:19:48.721Z", "signer_id": "agwaze.near", "widget_name": "Test.useTimeout", "source_code": "const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nconst CountDisplay = styled.div`\n  font-size: 36px;\n  margin-bottom: 20px;\n  color: #333;\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  font-size: 16px;\n  margin: 5px;\n  cursor: pointer;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 4px;\n\n  &:hover {\n    background-color: #2980b9;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 8px;\n  font-size: 16px;\n  margin: 5px;\n`;\n\nconst [count, setCount] = useState(0);\nconst [timeoutDuration, setTimeoutDuration] = useState(2000);\nconst [timerId, setTimerId] = useState(null);\nconst [isPaused, setIsPaused] = useState(false);\n\nconst incrementCount = useCallback(() => {\n  setCount((prevCount) => prevCount + 1);\n}, []);\n\nconst clearTimer = () => {\n  clearTimeout(timerId);\n  setTimerId(null);\n};\n\nconst resetCount = () => {\n  setCount(0);\n};\n\nconst handleTimeoutChange = (e) => {\n  const newTimeout = parseInt(e.target.value, 10);\n  setTimeoutDuration(newTimeout);\n\n  if (!isPaused) {\n    // If the timer is running, reset it with the new duration\n    clearTimer();\n    setTimerId(\n      setTimeout(() => {\n        incrementCount();\n      }, newTimeout)\n    );\n  }\n};\n\nconst togglePause = () => {\n  if (isPaused) {\n    // Resume the timer\n    setTimerId(\n      setTimeout(() => {\n        incrementCount();\n      }, timeoutDuration)\n    );\n  } else {\n    // Pause the timer\n    clearTimer();\n  }\n\n  setIsPaused(!isPaused);\n};\n\nuseEffect(() => {\n  console.log(\"Effect ran! Count:\", count);\n\n  if (!isPaused) {\n    const newTimerId = setTimeout(() => {\n      incrementCount();\n    }, timeoutDuration);\n\n    setTimerId(newTimerId);\n  }\n\n  return () => {\n    clearTimer();\n  };\n}, [count, incrementCount, isPaused, timeoutDuration]);\n\nreturn (\n  <Container>\n    <CountDisplay>{count}</CountDisplay>\n    <Input\n      type=\"number\"\n      placeholder=\"Enter timeout duration (ms)\"\n      value={timeoutDuration}\n      onChange={handleTimeoutChange}\n    />\n    <Button onClick={togglePause}>{isPaused ? \"Resume\" : \"Pause\"}</Button>\n    <Button onClick={clearTimer}>Stop Timeout</Button>\n    <Button onClick={resetCount}>Reset Count</Button>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/agwaze.near/widget/Test.useTimeout", "fact_widget_deployments_id": "bad56ff86fb380b48fa112cd9af90252", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}