{"tx_hash": "6iX8QxC7zDtiRihjyABUziwuowYVjZpx7CcMGvX4tyvu", "action_id_social": "9tU76aHcEvTivaDTkKz9Tp3jJFk4zp4yCLdQF1UnPPTB-0-widget", "block_id": 99035043, "block_timestamp": "2023-08-17T19:33:12.544Z", "signer_id": "rngtickets.near", "widget_name": "kp-ticket-creator", "source_code": null, "metadata": null, "branch": {"draft": {"": "const accountId = context.accountId ?? props.accountId;\nif (!accountId) {\n  return \"U need to login first or create new NEAR account here:https://shard.dog/go\";\n}\nState.init({\n  amount: \"0.01\",\n  drops: \"50\",\n  name: \"\",\n  poapTitle: \"\",\n  poapDesc: \"\",\n  img: null,\n  desc: \"\",\n  pw: \"\",\n  publicKeys: [],\n  privKeys: [],\n  allPws: [],\n});\nif (Storage.privateGet(\"key_list\")) {\n  let obj = Storage.privateGet(\"key_list\");\n  State.update({\n    publicKeys: obj.publicKeys,\n    privKeys: obj.privKeys,\n  });\n}\n\nconst keypomContract = \"v2.keypom.near\";\nconst gatewayUrl = \"https://near.org/mintlu.near/widget/kp-ticket-handler\";\n\nconst Yocto2Near = (amount) =>\n  new Big(amount).div(new Big(10).pow(24)).toString();\n\nconst Near2Yocto = (amount) =>\n  new Big(amount).times(new Big(10).pow(24)).toFixed().toString();\n\nfunction fromHex(h) {\n  var s = \"\";\n  for (var i = 0; i < h.length; i += 2) {\n    s += String.fromCharCode(parseInt(h.substr(i, 2), 16));\n  }\n  return decodeURIComponent(escape(s));\n}\n\nfunction generatePasswords() {\n  var allPass = [];\n  var fullHashed1 = \"\";\n  var fullHashed2 = \"\";\n  state.publicKeys.forEach((e) => {\n    var fullUnhashed = state.pw + e + \"1\";\n    console.log(`unhashed: ${fullUnhashed}`);\n    asyncFetch(\"https://keypom.sctuts.com/hashpw/\" + fullUnhashed).then(\n      (res) => {\n        var hashedJson = JSON.parse(res.body);\n        fullHashed1 = hashedJson.pw;\n        console.log(`hashed: ${fullHashed1}`);\n        asyncFetch(\n          \"https://keypom.sctuts.com/hashpw/\" + fullHashed1 + \"/\" + true\n        ).then((result) => {\n          var hashedJson2 = JSON.parse(result.body);\n          fullHashed2 = hashedJson2.pw;\n          allPass.push([\n            {\n              pw: `${fullHashed2}`,\n              key_use: 1,\n            },\n          ]);\n          console.log(`double hashed: ${fullHashed2}`);\n        });\n      }\n    );\n  });\n  var finalAllPass = allPass.reverse();\n  return finalAllPass;\n}\n\nconst createDrop = () => {\n  if (state.name == \"\") {\n    State.update({\n      name: Math.floor(Math.random() * 1000000000).toString(),\n    });\n  }\n  console.log(`State name: ${state.name}`);\n\n  var newDropId = Date.now();\n\n  asyncFetch(\n    \"https://keypom.sctuts.com/keypair/\" +\n      state.drops +\n      \"/rootEntropy/\" +\n      newDropId.toString()\n  ).then((res) => {\n    let keyPairs = JSON.parse(res.body);\n    console.log(\"keypairs:\", keyPairs);\n    let pubKeys = [];\n    let privKeys = [];\n    keyPairs.forEach((e) => {\n      pubKeys.push(e.pub);\n      privKeys.push(e.priv);\n    });\n\n    let obj = {\n      publicKeys: pubKeys,\n      privKeys: privKeys,\n    };\n    State.update(obj);\n\n    const allPass = generatePasswords();\n    console.log(`AAAALLLL PASS: ${allPass}`);\n\n    Storage.privateSet(\"key_list\", obj);\n\n    Near.call([\n      {\n        contractName: \"nft-v2.keypom.near\",\n        methodName: \"create_series\",\n        gas: \"100000000000000\",\n        args: {\n          mint_id: newDropId,\n          metadata: {\n            title: `${state.poapTitle}`,\n            media: `https://ipfs.near.social/ipfs/${state.img.cid}`,\n            description: `${state.poapDesc}`,\n            copies: parseInt(`${state.drops}`),\n          },\n        },\n        deposit: Near2Yocto(0.1),\n      },\n      {\n        contractName: keypomContract,\n        methodName: \"create_drop\",\n        gas: \"100000000000000\",\n\n        args: {\n          public_keys: state.publicKeys,\n          deposit_per_use: Near2Yocto(state.amount ?? \"0.05\"),\n          drop_id: newDropId.toString(),\n          config: {\n            uses_per_key: 2,\n          },\n\n          passwords_per_use: allPass,\n          fc: {\n            methods: [\n              null,\n              [\n                // mint NFT\n                {\n                  receiver_id: `nft-v2.keypom.near`,\n                  method_name: \"nft_mint\",\n                  args: \"\",\n                  drop_id_field: \"mint_id\",\n                  account_id_field: \"receiver_id\",\n                  attached_deposit: Near2Yocto(0.1),\n                },\n              ],\n            ],\n          },\n        },\n        deposit: Near2Yocto(0.1),\n      },\n    ]);\n  });\n};\n\nconst onChangeValue = (t, v) => {\n  State.update({\n    [t]: v,\n  });\n  if (t == \"drops\" && v > 50) {\n    State.update({\n      drops: 50,\n    });\n  }\n  if (t == \"name\") {\n    State.update({\n      name: v.replace(/\\s+/g, \"-\").toLowerCase(),\n    });\n  }\n  if (t == \"password\") {\n    State.update({\n      pw: v,\n    });\n  }\n  console.log(t + \" : \", v);\n};\n\nconst getListLink = () => {\n  let links = \"\";\n  state.privKeys.map((e, i) => {\n    let data = JSON.stringify({ u: accountId, k: e });\n    //base64 encoded\n    let link =\n      gatewayUrl + \"?key=\" + state.publicKeys[i] + \"&pk=\" + state.privKeys[i];\n    links += link + \"   \\n   \";\n  });\n\n  return links;\n};\n\nconst saveDropInfo = () => {\n  let obj = {\n    img: state.img.cid,\n    desc: state.desc,\n  };\n  console.log(obj);\n};\n\nreturn (\n  <div className=\"mb-3 container row\">\n    <div className=\"container\">\n      <h2 className=\"mt-3\">Create Ticket Drop</h2>\n      <h4>Event Information</h4>\n      <div className=\"input-field mt-3\">\n        Event Name (Lowercase):\n        <input\n          type=\"string\"\n          value={state.name}\n          onChange={(e) => onChangeValue(\"name\", e.target.value)}\n        />\n        Number of Tickets:\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"50\"\n          defaultValue=\"2\"\n          value={state.drops}\n          onChange={(e) => onChangeValue(\"drops\", e.target.value)}\n        />\n        NEAR per Drop:\n        <input\n          type=\"number\"\n          min=\"0\"\n          step=\"0.01\"\n          defaultValue=\"0.01\"\n          onChange={(e) => onChangeValue(\"amount\", e.target.value)}\n        />\n        Ticket Password (Case Sensitive):\n        <input\n          type=\"string\"\n          value={state.pw}\n          onChange={(e) => onChangeValue(\"password\", e.target.value)}\n        />\n      </div>\n    </div>\n    <div className=\"container mt-3 border-top border-3\">\n      <div className=\"config-drop\">\n        <h4>POAP Information</h4>\n        <h6 style={{ color: \"orange\" }}>\n          Save this information before creating your drop\n        </h6>\n        Set POAP Image\n        <br />\n        <IpfsImageUpload image={state.img} />\n        <div className=\"mt-2\">\n          {state.img && (\n            <img\n              style={{ maxWidth: 500 }}\n              src={`https://ipfs.near.social/ipfs/${\n                state.img.cid ?? state.img\n              }`}\n              alt=\"uploaded\"\n            />\n          )}\n        </div>\n        POAP Title:\n        <input\n          type=\"string\"\n          value={state.poapTitle}\n          onChange={(e) => onChangeValue(\"poapTitle\", e.target.value)}\n        />\n        POAP Description:\n        <input\n          type=\"string\"\n          value={state.poapDesc}\n          onChange={(e) => onChangeValue(\"poapDesc\", e.target.value)}\n        />\n        <br />\n        <Markdown className=\"mt-3\" text={state.desc} />\n        <CommitButton\n          className=\"btn btn-info\"\n          data={{\n            keypomConfig: {\n              img: state.img.cid ?? state.img,\n              desc: state.desc,\n            },\n          }}\n        >\n          Save linkdrop info\n        </CommitButton>\n      </div>\n    </div>\n    <button\n      className=\"btn btn-lg btn-primary mt-3\"\n      onClick={(e) => createDrop()}\n    >\n      Create Ticket Drop\n    </button>\n\n    <div className=\"result-field mt-4 border-top border-3 \">\n      <h2 className=\"mt-3\">Results</h2>\n      {state.publicKeys.length > 0 && (\n        <>\n          <button\n            className=\"btn btn-sm btn-dark\"\n            onClick={() => clipboard.writeText(JSON.stringify(getListLink()))}\n          >\n            Copy all {state.publicKeys.length} linkdrop to Clipboard\n          </button>\n        </>\n      )}\n      <br />\n      <small>Make sure to save these links to use later!</small>\n\n      <div className=\"link-list\">\n        {state.privKeys.length > 0 &&\n          state.privKeys.map((e, i) => {\n            // let link =\n            //   \"https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/\" +\n            //   e;\n            let data = JSON.stringify({ u: accountId, k: e });\n\n            //base64 encoded\n            let link =\n              gatewayUrl +\n              \"?key=\" +\n              state.publicKeys[i] +\n              \"?pk=\" +\n              state.privKeys[i];\n            //Buffer.from(data, \"utf-8\").toString(\"base64\")\n\n            return (\n              <>\n                <div class=\"input-group mb-3\">\n                  <a\n                    class=\"btn btn-outline-secondary\"\n                    target=\"_blank\"\n                    href={link}\n                  >\n                    {\" \"}\n                    Drop #{i + 1}\n                  </a>{\" \"}\n                  <br />\n                  <button\n                    class=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                    onClick={(e) => clipboard.writeText(link)}\n                  >\n                    Copy\n                  </button>\n                </div>\n              </>\n            );\n          })}\n      </div>\n    </div>\n  </div>\n);\n"}}, "widget_modules_used": null, "widget_url": "https://near.social/#/rngtickets.near/widget/kp-ticket-creator", "fact_widget_deployments_id": "b71602fc5e8bbd366ba0f589ab3adab5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}