{"tx_hash": "5Xg1ciqKDKaktyPNnFqZVAV52N6KExMS7BC5yrEYH13Z", "action_id_social": "FjPLHue2Xeqw8i8PpxWz6S58WvCTkgBK41g8B7WRLfgi-0-widget", "block_id": 106837255, "block_timestamp": "2023-11-30T00:46:55.116Z", "signer_id": "oraio.near", "widget_name": "dtecteet.index", "source_code": "const font = fetch(\n  \"https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap\"\n).body;\n\nif (!font) {\n  return null;\n}\n\nState.init({\n  theme: Storage.privateGet(\"theme\") || \"light\",\n  component: null,\n  near: null,\n  ether: null,\n  external: null,\n});\n\nconst detectExternalAPI = (componentCode) => {\n  const externalAPICallRegex =\n    /fetch\\(|asyncFetch\\(|useCache\\(|State\\.[a-zA-Z]+\\.?\\w*\\(|Social\\.[a-zA-Z]+\\.?\\w*\\(|Storage\\.[a-zA-Z]+\\.?\\w*\\(|clipboard\\.[a-zA-Z]+\\.?\\w*\\(/g;\n  return componentCode.match(externalAPICallRegex);\n};\n\nconst detectNearAPI = (componentCode) => {\n  const nearAPICallRegex = /Near\\.[a-zA-Z]+\\.?\\w*\\(/g;\n  return componentCode.match(nearAPICallRegex);\n};\n\nconst detectEtherAPI = (componentCode) => {\n  const etherAPICallRegex = /ethers\\.[a-zA-Z]+\\.?\\w*\\(/g;\n  return componentCode.match(etherAPICallRegex);\n};\n\nconst cleanUp = (htmlText) => {\n  // get the code from the first noscript in body\n  const startRgxp = /<noscript/;\n  const endRgxp = /<\\/noscript>/;\n  const startTwoRgxp = />/;\n  let start, end, code;\n\n  start = htmlText.match(startRgxp).index;\n  end = htmlText.match(endRgxp).index;\n  code = htmlText.substring(start, end + endRgxp.toString().length);\n\n  // isolate from the noscript tags\n  start = code.match(startTwoRgxp).index;\n  end = code.match(endRgxp).index;\n  code = code.substring(start + 1, end);\n\n  return code;\n};\n\nconst getDependencyComponents = (htmlCode) => {\n  const srcValues = [];\n  const regex = /&lt;Widget\\s*src\\s*=\\s*[\"']([^\"']+)[\"']/g;\n  let match;\n\n  while ((match = regex.exec(htmlCode)) !== null) srcValues.push(match[1]);\n\n  return srcValues;\n};\n\nconst wrappedAsyncFetch = (url, callback) => {\n  asyncFetch(url)\n    .then((result) => {\n      callback(null, result);\n    })\n    .catch((error) => {\n      callback(error, null);\n    });\n};\n\nconst search = (component, hasNear, hasEther, hasExternal) => {\n  console.log(\"search is called\");\n  const urlPrefix = \"https://near.social/mob.near/widget/WidgetSource?src=\";\n  const response = {\n    external: {},\n    near: {},\n    ether: {},\n  };\n  const componentSrcQueue = [component];\n\n  const handleClassAPI = (htmlCode, apiClass, component, apiDetector) => {\n    const classAPICalls = apiDetector(htmlCode);\n    const classMap = response[apiClass];\n\n    if (classAPICalls.length) {\n      if (component in classMap) classMap[component].push(...classAPICalls);\n      else classMap[component] = [...classAPICalls];\n    }\n  };\n\n  const processComponentQueue = (index) => {\n    if (index < componentSrcQueue.length) {\n      const componentSrcPageUrl = urlPrefix + componentSrcQueue[index];\n      console.log(\"url: \", componentSrcPageUrl);\n      wrappedAsyncFetch(componentSrcPageUrl, (error, result) => {\n        if (error) {\n          console.error(\"Error fetching component source:\", error.message);\n          // Handle the error or break out of the loop if necessary\n        } else {\n          const htmlCode = cleanUp(result.body);\n          console.log(\"The main htmlCode: \", htmlCode);\n\n          if (htmlCode !== \"The source code is not available.\") {\n            if (hasNear)\n              handleClassAPI(htmlCode, \"near\", component, detectNearAPI);\n            if (hasEther)\n              handleClassAPI(htmlCode, \"ether\", component, detectEtherAPI);\n            if (hasExternal)\n              handleClassAPI(htmlCode, \"external\", component, detectEtherAPI);\n          }\n\n          // Enqueue all dependency component src\n          componentSrcQueue.push(...getDependencyComponents(htmlCode));\n\n          // Continue processing the queue recursively\n          processComponentQueue(index + 1);\n        }\n      });\n    } else {\n      // Finished processing the queue\n      const { near, ether, external } = response;\n      State.update({\n        near,\n        ether,\n        external,\n      });\n    }\n  };\n\n  // Start processing the queue from index 0\n  processComponentQueue(0);\n};\n\nconst dark = {\n  name: \"dark\",\n  bg: \"#28282b\",\n  color: \"#e6eaee\",\n  border: \"#748094\",\n  hover: {\n    bg: \"#39393c\",\n    border: \"#4e5460\",\n  },\n  text: {\n    fontSize: \"16px\",\n  },\n  heading: {\n    fontSize: \"18px\",\n    fontWeight: \"600\",\n  },\n};\n\nconst light = {\n  name: \"light\",\n  bg: \"#e3e8ef\",\n  color: \"#1b202b\",\n  border: \"#748094\",\n  hover: {\n    bg: \"#eef2f6\",\n    border: \"#d8dfe7\",\n  },\n  text: {\n    fontSize: \"16px\",\n  },\n  heading: {\n    fontSize: \"18px\",\n    fontWeight: \"600\",\n  },\n};\n\nconst useTheme = (light, dark) => {\n  return state.theme === \"light\" ? light : dark;\n};\n\nconst GlobalStyle = styled.div`\n*{\n  margin:0;\n  padding:0;\n  box-sizing: border-box;\n  font-family: Poppins, 'sans-serif';\n}.body;\n`;\n\n/*This section handles the screen size respinsiveness at maximum of 750px (Mobile first design) */\nconst Main = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: #fff;\n  overflow-y: auto;\n\n  background-image: url('https://ipfs.near.social/ipfs/bafkreiggn4gswp3blqvibdtxl5wyvbpky2oj2nxdwlg5q4cbiflsw7trxa');\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n\n  @media only screen and (max-width: 750px) {\n    padding-bottom: 160px;\n  }\n`;\n\nconst Maincontent = styled.div`\n  width: 100%;\n`;\n\nconst Section1 = styled.div`\n  width: 100%;\n  // height: auto;\n`;\n\nconst Section2 = styled.div`\n  width: 100%;\n  height: auto;\n`;\nconst About = styled.p`\ncolor: rgba(0, 0, 0, 0.74);\ntext-align: center;\nfont-family: Poppins, 'sans-serif';\nfont-size: 20px;\nfont-style: normal;\nfont-weight: 500;\nline-height: 211.496%; /* 42.299px */\npadding: 10px 20%;\n  @media only screen and (max-width: 750px) {\n    font-size: 12px;\n    padding: 5px 10%;\n  }\n`;\n\nconst switchTheme = () => {\n  const themeToChange = useTheme(\"dark\", \"light\");\n  State.update({\n    theme: themeToChange,\n  });\n  Storage.privateSet(\"theme\", themeToChange);\n};\n\nconst handleSubmit = async (value) => {\n  // State.update({ component: value });\n  console.log(\"inside search state.component: \", value);\n  search(value, true, true, true);\n};\n\nif (state.component) console.log(\"I got some component: \", state.component);\nif (state.near) console.log(\"This is state.near: \", state.near);\n\nconst localStorageTheme = Storage.privateGet(\"theme\");\nif (localStorageTheme)\n  State.update({\n    theme: localStorageTheme,\n  });\n\nconst pages = {\n  main: (\n    <>\n      <Widget\n        src=\"oraio.near/widget/detecteet.ComponentSearch\"\n        props={{\n          placeholder: \"Search\",\n          theme: useTheme(light, dark),\n          handleSubmit: handleSubmit,\n          value: state.search,\n        }}\n      />\n      <Widget\n        src=\"oraio.near/widget/dtecteet.Result\"\n        props={{\n          theme: useTheme(light, dark),\n          near: state.near,\n          ether: state.ether,\n          external: state.external,\n        }}\n      />\n    </>\n  ),\n};\n\n// return (\n//   <GlobalStyle>\n//     <Main>\n//       <Widget\n//         src={`${state.config.ownerId}/widget/SourceScan.Layout.Navbar`}\n//         props={{\n//           theme: useTheme(light, dark),\n//           switchTheme: switchTheme,\n//         }}\n//       />\n//       <Content>{pages.main}</Content>\n//     </Main>\n//   </GlobalStyle>\n// );\n\nreturn (\n  <GlobalStyle>\n    <Main>\n      <Widget\n        src=\"oraio.near/widget/dtecteet.navbar\"\n        props={{\n          theme: useTheme(light, dark),\n          switchTheme: switchTheme,\n        }}\n      />\n      <Maincontent>\n        <Section2>\n          <About>\n            Welcome to Dtecteet. It is your one-stop tool solution to check for\n            your NEAR component API type, ranging from NEAR API JS, Ethers.js\n            and External API. Our tool provides you with advanced and\n            user-friendly component API detection.\n          </About>\n          {pages.main}\n        </Section2>\n      </Maincontent>\n    </Main>\n  </GlobalStyle>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/oraio.near/widget/dtecteet.index", "fact_widget_deployments_id": "9e7cac1c8a32593335d1e8013e0f5dce", "inserted_timestamp": "2023-11-30T02:53:31.650Z", "modified_timestamp": "2023-12-20T02:50:47.065Z", "__row_index": 2}