{"tx_hash": "6Zp2MVxaP59ehLfbRvC9nfFGaCmLmtqBbzko5Uq7zb8A", "action_id_social": "8qZQAxBF4vPaX9by7pNktEt3uTvCio7zB7MhH5m9WsGd-0-widget", "block_id": 106803793, "block_timestamp": "2023-11-29T11:42:11.449Z", "signer_id": "oraio.near", "widget_name": "detecteet.ComponentSearch", "source_code": "const detectExternalAPI = (componentCode) => {\n  const externalAPICallRegex = /fetch\\(|axios\\(|http\\(|ajax\\(/g;\n  return componentCode.match(externalAPICallRegex);\n};\n\nconst detectNearAPI = (componentCode) => {\n  const nearAPICallRegex = /Near\\.[a-zA-Z]+\\.?\\w*\\(/g;\n  return componentCode.match(nearAPICallRegex);\n};\n\nconst detectEtherAPI = (componentCode) => {\n  const etherAPICallRegex = /web3\\.[a-zA-Z]+\\.?\\w*\\(/g;\n  return componentCode.match(etherAPICallRegex);\n};\n\nconst cleanUp = (htmlText) => {\n  // get the code from the first noscript in body\n  const startRgxp = /<noscript/;\n  const endRgxp = /<\\/noscript>/;\n  const startTwoRgxp = />/;\n  let start, end, code;\n\n  start = htmlText.match(startRgxp).index;\n  end = htmlText.match(endRgxp).index;\n  code = htmlText.substring(start, end + endRgxp.toString().length);\n\n  // isolate from the noscript tags\n  start = code.match(startTwoRgxp).index;\n  end = code.match(endRgxp).index;\n  code = code.substring(start + 1, end);\n\n  return code;\n};\n\nconst scrape = (url) => {\n  const page = fetch(url);\n  return cleanUp(page.body);\n};\n\nconst getDependencyComponents = (htmlCode) => {\n  const srcValues = [];\n  const regex = /&lt;Widget\\s*src\\s*=\\s*[\"']([^\"']+)[\"']/g;\n  let match;\n\n  while ((match = regex.exec(htmlCode)) !== null) srcValues.push(match[1]);\n\n  return srcValues;\n};\n\nState.init({\n  theme:\n    typeof props.theme === \"string\"\n      ? JSON.parse(customDecodeURIComponent(props.theme))\n      : props.theme || {\n          bg: \"#e3e8ef\",\n          color: \"#4c5566\",\n          border: \"1px dashed #748094\",\n          text: {\n            fontSize: \"16px\",\n          },\n          heading: {\n            fontSize: \"18px\",\n            fontWeight: \"600\",\n            underline: true,\n          },\n        },\n  // contract: null,\n  // wasm: { value: null, error: false },\n  // tx: { value: null, error: false },\n});\n\nconst search = (component, hasNear, hasEther, hasExternal) => {\n  console.log(\"search is called\");\n  const urlPrefix = \"https://near.social/mob.near/widget/WidgetSource?src=\";\n  const response = {\n    external: {},\n    near: {},\n    ether: {},\n  };\n  const componentSrcQueue = [];\n\n  const handleClassAPI = (htmlCode, apiClass, component, apiDetector) => {\n    const classAPICalls = apiDetector(htmlCode);\n    const classMap = response[`${apiClass}`];\n\n    if (classAPICalls.length) {\n      if (component in classMap)\n        classMap[`${component}`].push(...classAPICalls);\n      else classMap[`${component}`] = [...classAPICalls];\n    }\n  };\n\n  componentSrcQueue.push(component);\n  while (componentSrcQueue.length) {\n    const componentSrcPageUrl = urlPrefix + componentSrcQueue[0];\n\n    // Scrape the component src page for plain text of its source code.\n    const htmlCode = scrape(componentSrcPageUrl);\n\n    // Check for all selected class api calls.\n    if (htmlCode != \"The source code is not available.\") {\n      if (hasNear) handleClassAPI(htmlCode, \"near\", component, detectNearAPI);\n\n      if (hasEther)\n        handleClassAPI(htmlCode, \"ether\", component, detectEtherAPI);\n\n      if (hasExternal)\n        handleClassAPI(htmlCode, \"external\", component, detectEtherAPI);\n    }\n\n    // Enqueue all dependency component src\n    componentSrcQueue.push(...getDependencyComponents(htmlCode));\n\n    // Dequeue the already checked (current) component src\n    componentSrcQueue.shift();\n  }\n\n  return response;\n};\n\n// At this point of deployment. this widget display list of widget that matches search input\n// placeholder: \"Search\",\n// theme: useTheme(light, dark),\n// handleSubmit: handleSubmit,\n// // value: state.search,\n\nconst WidgetApp = styled.div`\n  display: flex;\n  // align-items: center;\n  justify-content: center;\n  // padding-top: 20px;\n  // background-color: black;\n  height: 100vh;\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nconst Container = styled.div`\n  min-width: 370px;\n  width: 100%;\n  display: flex;\n  flex: 1;\n  // background-color: grey;\n  height: 54px;\n  gap: 1rem;\n  // flow: wrap;\n`;\n\nconst TextInput = styled.input`\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  outline: none;\n  width: 100%;\n`;\n\nconst WidgetList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  padding: 15px;\n  margin-top: 1rem;\n  max-height: 300px;\n  height: 300px;\n  // overflow-y: auto;\n  box-shadow: 0px 0px 8px #ddd;\n  border-radius: 10px;\n  position: relative;\n  // &::-webkit-scrollbar {\n  //   display: none;\n  // }\n`;\n\nconst WidgetItem = styled.li`\n  // background-color: grey;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 4px;\n  &:hover {\n    background-color: #adb5bd;\n  }\n`;\n\n// search container\nconst SearchContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  height: 100%;\n  gap: 1rem;\n  .input-group {\n    height: 100%;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    outline: none;\n    width: 100%;\n  }\n`;\n\nconst SubmitButton = styled.button`\n  white-space: nowrap;\n  wordWrap: 'break-word';\n  display: inline-flex;\n  padding: 1.1rem 1.5rem;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  background: #8D61EE;\n  color: #fff;\n  border-radius: 10px;\n  // width:40%;\n  width: 150px;\n`;\n\nconst [input, setInput] = useState(\"\");\nconst [widgets, setWidgets] = useState([]);\n\nfunction handleChange(value) {\n  setInput(value);\n  const fetchWidgets = fetch(\"https://jsonplaceholder.typicode.com/users\").body;\n\n  const filteredWidgets = fetchWidgets.filter(\n    (widget) =>\n      value && widget.username.toLowerCase().includes(value.toLowerCase())\n  );\n  setWidgets(filteredWidgets);\n  // console.log(filteredWidgets)\n}\nfunction handleClick(widget) {\n  setInput(widget.widgetName);\n  console.log(widget.widgetSrc);\n  props.handleSubmit(widget.widgetSrc, search);\n}\n\nfunction handleSubmit() {\n  console.log(\"clicked check widget\");\n}\nreturn (\n  <WidgetApp>\n    <Container>\n      <SearchContainer>\n        <Widget\n          loading={\n            <div className=\"input-group\">\n              <input type=\"text\" className=\"form-control\" />\n            </div>\n          }\n          src=\"mob.near/widget/ComponentSearch\"\n          props={{\n            boostedTag: \"app\",\n            placeholder: \"Search Applications\",\n            limit: 10,\n            onChange: ({ result }) => {\n              State.update({ apps: result });\n            },\n          }}\n        />\n        {state.apps && (\n          <WidgetList>\n            <div className=\"mb-2\">\n              {state.apps.map((app, i) => (\n                <WidgetItem key={i} onClick={(e) => handleClick(app)}>\n                  <Widget\n                    src=\"littlelace.near/widget/ComponentItem\"\n                    props={{\n                      link: `/${app.widgetSrc}`,\n                      accountId: app.accountId,\n                      widgetName: app.widgetName,\n                      onHide: () => State.update({ apps: null }),\n                    }}\n                  />\n                </WidgetItem>\n              ))}\n            </div>\n          </WidgetList>\n        )}\n      </SearchContainer>\n      <SubmitButton onClick={() => handleSubmit()}>Check Widget</SubmitButton>\n    </Container>\n  </WidgetApp>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/oraio.near/widget/detecteet.ComponentSearch", "fact_widget_deployments_id": "fd610d8c2734d449cf6b2e7d9f8cd6e1", "inserted_timestamp": "2023-11-29T13:43:41.019Z", "modified_timestamp": "2023-12-20T00:36:59.366Z", "__row_index": 0}