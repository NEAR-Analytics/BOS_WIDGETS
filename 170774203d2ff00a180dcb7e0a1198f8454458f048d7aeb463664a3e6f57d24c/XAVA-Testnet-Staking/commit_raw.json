{"tx_hash": "EuYtuHrcqC1dz56PcTnxAUEgWbxUZe477gQtevVZzHZj", "action_id_social": "6b3qcZunNiVo7Hwuz1ZXVrHPxoR6wreurDYJSGVQqBV5-0-widget", "block_id": 95915645, "block_timestamp": "2023-07-07T12:47:38.466Z", "signer_id": "170774203d2ff00a180dcb7e0a1198f8454458f048d7aeb463664a3e6f57d24c", "widget_name": "XAVA-Testnet-Staking", "source_code": "State.init({ xavaToStake: \"0.01\" });\n\nif (state.user === undefined) {\n  State.update({ user: Ethers.send(\"eth_requestAccounts\", [])[0] });\n}\nif (!state.user) return <Web3Connect />;\n\nconst XAVA_ADDRESS = \"0x64E7AB33C8764a9285cbd48A3b5977c51D2eE645\";\nconst XAVA_STAKING = \"0x8BeBB9907c72708442BD4195Bd354A9bAdC2a816\";\nconst XAVA_ABIS = fetch(\n  \"https://raw.githubusercontent.com/avalaunch-app/xava-protocol/master/deployments/contract-abis.json\"\n);\nif (!XAVA_ABIS.ok) {\n  return \"loading\";\n}\n\nconst xavaAllocationIface = new ethers.utils.Interface(\n  JSON.parse(XAVA_ABIS.body).fuji.AllocationStaking\n);\n\nconst ERC20_ABI = fetch(\n  \"https://gist.githubusercontent.com/veox/8800debbf56e24718f9f483e1e40c35c/raw/f853187315486225002ba56e5283c1dba0556e6f/erc20.abi.json\"\n);\nif (!ERC20_ABI.ok) {\n  a;\n  return <p>\"Loading\"</p>;\n}\n\n// GET XAVA BALANCE\nconst tokenIface = new ethers.utils.Interface(ERC20_ABI.body);\nconst getXavaBalance = () => {\n  const encodedData = tokenIface.encodeFunctionData(\"balanceOf\", [state.user]);\n\n  return Ethers.provider()\n    .call({\n      to: XAVA_ADDRESS,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = tokenIface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString()).div(Big(10).pow(18)).toFixed(2);\n    });\n};\n\n// GET STAKED BALANCE\nconst getStakedBalance = () => {\n  const encodedData = xavaAllocationIface.encodeFunctionData(\"deposited\", [\n    0,\n    state.user,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: XAVA_STAKING,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = xavaAllocationIface.decodeFunctionResult(\n        \"deposited\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString()).div(Big(10).pow(18)).toFixed(2);\n    });\n};\n\nconst setXavaBalance = () => {\n  getXavaBalance().then((xavaBalance) => {\n    console.log(xavaBalance);\n    State.update({ xavaBalance });\n  });\n};\n\nif (state.xavaBalance === undefined && state.user) {\n  setXavaBalance();\n}\n\nconst setStakedXava = () => {\n  getStakedBalance().then((xavaStaked) => {\n    console.log(xavaStaked);\n    State.update({ xavaStaked });\n  });\n};\n\nif (state.xavaStaked === undefined && state.user) {\n  setStakedXava();\n}\n\nconst convertToWei = (tokens) => {\n  return Big(parseFloat(tokens)).times(Big(10).pow(18)).toFixed(0).toString();\n};\n\nconst handleStakeXava = () => {\n  console.log(convertToWei(state.xavaToStake));\n  console.log(JSON.parse(XAVA_ABIS.body).fuji.AllocationStaking);\n  let contract = new ethers.Contract(\n    XAVA_STAKING,\n    xavaAllocationIface,\n    Ethers.provider().getSigner()\n  );\n  contract\n    .deposit(\"0\", convertToWei(state.xavaToStake))\n    .then((result) => {\n      console.log(result);\n      State.update({ txHash: result.hash, errorMsg: null });\n    })\n    .catch((e) => {\n      console.log(e);\n      State.update({ errorMsg: e.reason, txHash: null });\n    });\n};\n\nreturn (\n  <div>\n    <p>You have: {state.xavaBalance}XAVA</p>\n    <p>You have staked: {state.xavaStaked} XAVA</p>\n    {state.xavaBalance && (\n      <div>\n        <input\n          class=\"form-range\"\n          type=\"range\"\n          min={0.01}\n          step={0.01}\n          max={parseInt(state.xavaBalance)}\n          value={state.xavaToStake}\n          onChange={(e) => State.update({ xavaToStake: e.target.value })}\n        />\n        <button onClick={handleStakeXava}>\n          Stake: {state.xavaToStake} XAVA\n        </button>\n        {state.txHash && (\n          <p style={{ color: \"black\" }}>\n            Staking successful{\" \"}\n            <a\n              target=\"_blank\"\n              href={`https://testnet.snowtrace.io/tx/${state.txHash}`}\n            >\n              Transaction Hash\n            </a>\n          </p>\n        )}\n\n        {state.errorMsg && (\n          <p style={{ color: \"red\" }}>Error: {state.errorMsg}</p>\n        )}\n      </div>\n    )}\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/170774203d2ff00a180dcb7e0a1198f8454458f048d7aeb463664a3e6f57d24c/widget/XAVA-Testnet-Staking", "fact_widget_deployments_id": "3fbf9f0d3e198cb4fee1c6f21bac7c95", "inserted_timestamp": "2000-01-01T00:00:00.000Z", "modified_timestamp": "2000-01-01T00:00:00.000Z", "__row_index": 10}