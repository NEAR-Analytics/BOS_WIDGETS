{"tx_hash": "54HnW2pAhb1sixKpVKH2GZFco8BW12qeWuHzL2b1RjU7", "action_id_social": "2ystrvXPV56bYCtGUuevAcSJo68GMxKJBW7YFFq6scBE-0-widget", "block_id": 104814400, "block_timestamp": "2023-11-03T04:41:48.865Z", "signer_id": "magicbuild.near", "widget_name": "widget", "source_code": "State.init({\r\n  contractAddress: props.address,\r\n  contractAbi: props,\r\n  contractError,\r\n  contractAbiCall,\r\n  contractAbiView,\r\n  response,\r\n  contractAbiArg: [],\r\n});\r\n\r\nconst onInputChangeContractArg = (obj) => {\r\n  const data = state.contractAbiArg;\r\n  const isExist = false;\r\n  const indexData = null;\r\n\r\n  data.forEach((item, index) => {\r\n    if (item.functions == obj.functions && item.name == obj.name) {\r\n      isExist = true;\r\n      indexData = index;\r\n    }\r\n  });\r\n\r\n  if (isExist) {\r\n    data[indexData].value = obj.value;\r\n  } else {\r\n    data.push(obj);\r\n  }\r\n\r\n  State.update({ contractAbiArg: data });\r\n};\r\nconst cDeposit = (e, fIndex) => {\r\n  const data = state.contractAbiCall;\r\n  data[fIndex].deposit = e.target.value;\r\n  State.update({ contractAbiArg: data });\r\n};\r\nconst onBtnClickCall = (e, fName, action, fIndex) => {\r\n  const argsArr = [];\r\n  const data = state.contractAbiArg;\r\n  data.forEach((item) => {\r\n    if (item.functions == fName) {\r\n      if (item.type == \"number\" || item.type == \"integer\") {\r\n        item.value = parseInt(item.value);\r\n      }\r\n      if (item.type == \"array\") {\r\n        item.value = item.value.split(\"|\");\r\n      }\r\n      if (item.type == \"json\") {\r\n        item.value = JSON.parse(item.value);\r\n      }\r\n      if (item.type == \"boolean\") {\r\n        item.value = Boolean(item.value);\r\n      }\r\n      argsArr.push(item);\r\n    }\r\n  });\r\n\r\n  const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\r\n  const args = {};\r\n  argMap.forEach((item) => {\r\n    Object.assign(args, item);\r\n  });\r\n  if (action == \"view\") {\r\n    asyncFetch(\"https://rpc.near.org/\", {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: fName,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      if (res.body.result.result) {\r\n        const result = new Buffer.from(res.body.result.result).toString();\r\n        State.update({\r\n          response: {\r\n            [fName]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (res.body.result.error) {\r\n        const error = res.body.result.error;\r\n        State.update({\r\n          response: {\r\n            [fName]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (action == \"call\") {\r\n    const abiCall = state.contractAbiCall;\r\n    Near.call(state.contractAddress, fName, args);\r\n    if (abiCall[fIndex].deposit == 0 && abiCall[fIndex].gas == 30000000000000) {\r\n      Near.call(state.contractAddress, abiCall[fIndex].name, args);\r\n    }\r\n    if (abiCall[fIndex].deposit > 0 || abiCall[fIndex].gas > 30000000000000) {\r\n      Near.call(\r\n        state.contractAddress,\r\n        abiCall[fIndex].name,\r\n        args,\r\n        abiCall[fIndex].gasUnit == \"near\"\r\n          ? abiCall[fIndex].gas * Math.pow(10, 24)\r\n          : abiCall[fIndex].gas,\r\n        abiCall[fIndex].depositUnit == \"near\"\r\n          ? abiCall[fIndex].deposit * Math.pow(10, 24)\r\n          : abiCall[fIndex].deposit\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nconst loadData = () => {\r\n  const abi = state.contractAbi;\r\n  if (abi.body.functions) {\r\n    const contractCall = [];\r\n    const contractView = [];\r\n    abi.body.functions.forEach((item) => {\r\n      if (item.kind == \"call\") {\r\n        contractCall.push(item);\r\n      }\r\n      if (item.kind == \"view\") {\r\n        contractView.push(item);\r\n      }\r\n      State.update({ contractAbiCall: contractCall });\r\n      State.update({ contractAbiView: contractView });\r\n    });\r\n    State.update({ contractError: null });\r\n  } else {\r\n    State.update({ contractError: \"Can not parse ABI\" });\r\n  }\r\n};\r\nloadData();\r\n\r\nconst notLoggedInWarning = <p class=\"text-center py-2\"> Login to Use BOS </p>;\r\n\r\nreturn (\r\n  <>\r\n    <div class=\"container\">\r\n      {context.accountId ? contractForm : notLoggedInWarning}\r\n      <h3 class=\"text-center\">\r\n        Address:\r\n        <span class=\"text-decoration-underline\"> {state.contractAddress} </span>\r\n      </h3>\r\n      {state.contractError}\r\n      {state.contractAbiView &&\r\n        state.contractAbiView.map((functions) => (\r\n          <div className={`card mb-2 ${functions.className}`}>\r\n            <div class=\"card-header\">\r\n              {functions.label.length > 0 ? functions.label : functions.name}\r\n            </div>\r\n            <div class=\"card-body\">\r\n              {functions.params.args &&\r\n                functions.params.args.map((args) => {\r\n                  return (\r\n                    <div className={`form-group pb-2 ${args.className}`}>\r\n                      <label>\r\n                        {args.label.length > 0 ? args.label : args.name}\r\n                      </label>\r\n                      {args.type_schema.type == \"string\" ||\r\n                      args.type_schema.type == \"$ref\" ||\r\n                      args.type_schema.type == \"integer\" ||\r\n                      args.type_schema.type == \"json\" ||\r\n                      args.type_schema.type == \"array\" ? (\r\n                        <input\r\n                          class=\"form-control\"\r\n                          data-name={args.name}\r\n                          data-type={\r\n                            args.type_schema.type == \"string\" ||\r\n                            args.type_schema.type[0] == \"string\"\r\n                              ? \"text\"\r\n                              : args.type_schema.type == \"integer\" ||\r\n                                args.type_schema.type[0] == \"integer\"\r\n                              ? \"number\"\r\n                              : args.type_schema.type == \"array\"\r\n                              ? \"array\"\r\n                              : args.type_schema.$ref\r\n                              ? \"text\"\r\n                              : \"text\"\r\n                          }\r\n                          type={\"string\"}\r\n                          placeholder={\r\n                            args.type_schema.type == \"string\" ||\r\n                            args.type_schema.type[0] == \"string\"\r\n                              ? \"string\"\r\n                              : args.type_schema.type == \"integer\" ||\r\n                                args.type_schema.type[0] == \"integer\"\r\n                              ? \"number\"\r\n                              : args.type_schema.type == \"array\"\r\n                              ? \"array : a|b\"\r\n                              : args.type_schema.type == \"json\"\r\n                              ? \"json : { }\"\r\n                              : args.type_schema.$ref\r\n                              ? \"Account Address\"\r\n                              : \"text\"\r\n                          }\r\n                          onChange={(e) =>\r\n                            onInputChangeContractArg({\r\n                              functions: functions.name,\r\n                              name: args.name,\r\n                              type:\r\n                                args.type_schema.type == \"string\" ||\r\n                                args.type_schema.type[0] == \"string\"\r\n                                  ? \"text\"\r\n                                  : args.type_schema.type == \"integer\" ||\r\n                                    args.type_schema.type[0] == \"integer\"\r\n                                  ? \"number\"\r\n                                  : args.type_schema.type == \"array\"\r\n                                  ? \"array\"\r\n                                  : args.type_schema.type == \"json\"\r\n                                  ? \"json\"\r\n                                  : args.type_schema.$ref\r\n                                  ? \"text\"\r\n                                  : \"text\",\r\n                              value: e.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {args.type_schema.type == \"boolean\" ? (\r\n                        <select\r\n                          defaultValue={args.type_schema.type}\r\n                          class=\"form-control\"\r\n                          onChange={(e) =>\r\n                            onInputChangeContractArg({\r\n                              functions: functions.name,\r\n                              name: args.name,\r\n                              type: \"boolean\",\r\n                              value: e.target.value,\r\n                            })\r\n                          }\r\n                        >\r\n                          <option value=\"true\">True</option>\r\n                          <option value=\"false\">False</option>\r\n                        </select>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {args.type_schema.type == \"enum\" ? (\r\n                        <select\r\n                          defaultValue={args.type_schema.type}\r\n                          class=\"form-control\"\r\n                          onChange={(e) =>\r\n                            onInputChangeContractArg({\r\n                              functions: functions.name,\r\n                              name: args.name,\r\n                              type: \"string\",\r\n                              value: e.target.value,\r\n                            })\r\n                          }\r\n                        >\r\n                          {args.enum &&\r\n                            args.enum.map((item, i) => (\r\n                              <option value={item}>{item}</option>\r\n                            ))}\r\n                        </select>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              {state.response[functions.name] ? (\r\n                <>\r\n                  <div\r\n                    className={\r\n                      state.response[functions.name].error\r\n                        ? \"alert  alert-danger\"\r\n                        : \"alert  alert-primary\"\r\n                    }\r\n                    role=\"alert\"\r\n                  >\r\n                    <pre>\r\n                      {JSON.stringify(\r\n                        JSON.parse(state.response[functions.name].value),\r\n                        null,\r\n                        2\r\n                      )}\r\n                    </pre>\r\n                    <button\r\n                      class=\"btn btn-dark btn-sm mt-2\"\r\n                      onClick={() => {\r\n                        clipboard.writeText(\r\n                          state.response[functions.name].value\r\n                        );\r\n                      }}\r\n                    >\r\n                      Copy\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <button\r\n                className={`btn btn-primary ${functions.classButton}`}\r\n                data-action=\"view\"\r\n                data-name={functions.name}\r\n                onClick={(e) =>\r\n                  onBtnClickCall(e, functions.name, functions.kind, fIndex)\r\n                }\r\n              >\r\n                {functions.button.length > 0 ? functions.button : \"View\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n      {state.contractAbiCall &&\r\n        state.contractAbiCall.map((functions, fIndex) => (\r\n          <div className={`card mb-2 ${functions.className}`}>\r\n            <div class=\"card-header\">\r\n              {functions.label.length > 0 ? functions.label : functions.name}\r\n            </div>\r\n            <div class=\"card-body\">\r\n              {functions.params.args &&\r\n                functions.params.args.map((args) => {\r\n                  return (\r\n                    <div className={`form-group pb-2 ${args.className}`}>\r\n                      <label>\r\n                        {args.label.length > 0 ? args.label : args.name}\r\n                      </label>\r\n                      {args.type_schema.type == \"string\" ||\r\n                      args.type_schema.type == \"$ref\" ||\r\n                      args.type_schema.type == \"integer\" ||\r\n                      args.type_schema.type == \"json\" ||\r\n                      args.type_schema.type == \"array\" ? (\r\n                        <input\r\n                          class=\"form-control\"\r\n                          data-name={args.name}\r\n                          data-type={\r\n                            args.type_schema.type == \"string\" ||\r\n                            args.type_schema.type[0] == \"string\"\r\n                              ? \"text\"\r\n                              : args.type_schema.type == \"integer\" ||\r\n                                args.type_schema.type[0] == \"integer\"\r\n                              ? \"number\"\r\n                              : args.type_schema.type == \"array\"\r\n                              ? \"array\"\r\n                              : args.type_schema.$ref\r\n                              ? \"text\"\r\n                              : \"text\"\r\n                          }\r\n                          type={\"string\"}\r\n                          placeholder={\r\n                            args.type_schema.type == \"string\" ||\r\n                            args.type_schema.type[0] == \"string\"\r\n                              ? \"string\"\r\n                              : args.type_schema.type == \"integer\" ||\r\n                                args.type_schema.type[0] == \"integer\"\r\n                              ? \"number\"\r\n                              : args.type_schema.type == \"array\"\r\n                              ? \"array : a|b\"\r\n                              : args.type_schema.type == \"json\"\r\n                              ? \"json : { }\"\r\n                              : args.type_schema.$ref\r\n                              ? \"Account Address\"\r\n                              : \"text\"\r\n                          }\r\n                          onChange={(e) =>\r\n                            onInputChangeContractArg({\r\n                              functions: functions.name,\r\n                              name: args.name,\r\n                              type:\r\n                                args.type_schema.type == \"string\" ||\r\n                                args.type_schema.type[0] == \"string\"\r\n                                  ? \"text\"\r\n                                  : args.type_schema.type == \"integer\" ||\r\n                                    args.type_schema.type[0] == \"integer\"\r\n                                  ? \"number\"\r\n                                  : args.type_schema.type == \"array\"\r\n                                  ? \"array\"\r\n                                  : args.type_schema.type == \"json\"\r\n                                  ? \"json\"\r\n                                  : args.type_schema.$ref\r\n                                  ? \"text\"\r\n                                  : \"text\",\r\n                              value: e.target.value,\r\n                            })\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {args.type_schema.type == \"boolean\" ? (\r\n                        <select\r\n                          defaultValue={args.type_schema.type}\r\n                          class=\"form-control\"\r\n                          onChange={(e) =>\r\n                            onInputChangeContractArg({\r\n                              functions: functions.name,\r\n                              name: args.name,\r\n                              type: \"boolean\",\r\n                              value: e.target.value,\r\n                            })\r\n                          }\r\n                        >\r\n                          <option value=\"true\">True</option>\r\n                          <option value=\"false\">False</option>\r\n                        </select>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {args.type_schema.type == \"enum\" ? (\r\n                        <select\r\n                          defaultValue={args.type_schema.type}\r\n                          class=\"form-control\"\r\n                          onChange={(e) =>\r\n                            onInputChangeContractArg({\r\n                              functions: functions.name,\r\n                              name: args.name,\r\n                              type: \"string\",\r\n                              value: e.target.value,\r\n                            })\r\n                          }\r\n                        >\r\n                          {args.enum &&\r\n                            args.enum.map((item, i) => (\r\n                              <option value={item}>{item}</option>\r\n                            ))}\r\n                        </select>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              {functions.selfInputDeposit && (\r\n                <div className={`form-group pb-2`}>\r\n                  <label>Deposit</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={\"\" + functions.deposit}\r\n                    defaultValue={\"\" + functions.deposit}\r\n                    onChange={(e) => cDeposit(e, fIndex)}\r\n                    class=\"form-control \"\r\n                  />\r\n                </div>\r\n              )}\r\n              {state.response[functions.name] ? (\r\n                <p class=\"card-text\">{state.response[functions.name]}</p>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <button\r\n                className={`btn btn-primary ${functions.classButton}`}\r\n                data-action=\"call\"\r\n                data-name={functions.name}\r\n                onClick={(e) =>\r\n                  onBtnClickCall(e, functions.name, functions.kind, fIndex)\r\n                }\r\n              >\r\n                {functions.button.length > 0 ? functions.button : \"Call\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/widget", "fact_widget_deployments_id": "1f0833ee06b93e6ceae4f32e967c0b32", "inserted_timestamp": "2023-11-03T06:43:13.410Z", "modified_timestamp": "2023-11-03T06:43:13.410Z", "__row_index": 4}