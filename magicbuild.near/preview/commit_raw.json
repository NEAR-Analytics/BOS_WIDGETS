{"tx_hash": "44F6D2fKiWBRQEN4hv8kH1NYn9yYMqHJAmXbn4X5vFVh", "action_id_social": "EvVYJTbs44j3apFZVTWZUgTwDUVbXyscqMeVfrawxaVY-0-widget", "block_id": 104234475, "block_timestamp": "2023-10-26T08:38:23.097Z", "signer_id": "magicbuild.near", "widget_name": "preview", "source_code": "State.init({\n  contractAddress: props.address,\n  contractAbi: props,\n  contractError,\n  contractAbiCall,\n  contractAbiView,\n  response,\n  contractAbiArg: props.cMethod,\n});\n\nconst onInputChangeContractArg = (obj) => {\n  const data = state.contractAbiArg;\n  const isExist = false;\n  const indexData = null;\n\n  data.forEach((item, index) => {\n    if (item.functions == obj.functions && item.name == obj.name) {\n      isExist = true;\n      indexData = index;\n    }\n  });\n\n  if (isExist) {\n    data[indexData].value = obj.value;\n  } else {\n    data.push(obj);\n  }\n\n  State.update({ contractAbiArg: data });\n};\n\nconst onBtnClickCall = (fName, action, fIndex) => {\n  const argsArr = [];\n  const data = state.contractAbiArg;\n  data.forEach((item) => {\n    if (item.functions == fName) {\n      if (item.type == \"number\") {\n        item.value = parseInt(item.value);\n      }\n      if (item.type == \"array\") {\n        item.value = item.value.split(\"|\");\n      }\n      argsArr.push(item);\n    }\n  });\n\n  const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\n  const args = {};\n  argMap.forEach((item) => {\n    Object.assign(args, item);\n  });\n  if (action == \"view\") {\n    asyncFetch(\"https://rpc.near.org/\", {\n      body: JSON.stringify({\n        method: \"query\",\n        params: {\n          request_type: \"call_function\",\n          account_id: state.contractAddress,\n          method_name: fName,\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\n          finality: \"final\",\n        },\n        id: 154,\n        jsonrpc: \"2.0\",\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n    }).then((res) => {\n      if (res.body.result.result) {\n        const result = new Buffer.from(res.body.result.result).toString();\n        State.update({\n          response: {\n            [fName]: { value: result, error: false },\n          },\n        });\n      }\n      if (res.body.result.error) {\n        const error = res.body.result.error;\n        State.update({\n          response: {\n            [fName]: { value: error, error: true },\n          },\n        });\n      }\n    });\n  }\n  if (action == \"call\") {\n    const abiCall = state.contractAbiCall;\n    Near.call(state.contractAddress, fName, args);\n    if (abiCall[fIndex].deposit == 0 && abiCall[fIndex].gas == 30000000000000) {\n      Near.call(state.contractAddress, abiCall[fIndex].name, args);\n    }\n    if (abiCall[fIndex].deposit > 0 || abiCall[fIndex].gas > 30000000000000) {\n      Near.call(\n        state.contractAddress,\n        abiCall[fIndex].name,\n        args,\n        abiCall[fIndex].deposit,\n        abiCall[fIndex].gas\n      );\n    }\n  }\n};\n\nconst loadData = () => {\n  const abi = {\n    schema_version: \"0.3.0\",\n    address: props.contractAddress,\n    metadata: {\n      name: \"\",\n      version: \"0.1.0\",\n      authors: [\"\"],\n    },\n    body: {\n      functions: [],\n    },\n  };\n\n  if (state.contractAbiArg) {\n    const abiMethod = state.contractAbiArg;\n    abiMethod.forEach((item) => {\n      abi.body.functions.push(item);\n    });\n    if (abi.body.functions) {\n      const contractCall = [];\n      const contractView = [];\n      abi.body.functions.forEach((item) => {\n        if (item.kind == \"call\") {\n          contractCall.push(item);\n        }\n        if (item.kind == \"view\") {\n          contractView.push(item);\n        }\n        State.update({ contractAbiCall: contractCall });\n        State.update({ contractAbiView: contractView });\n      });\n      State.update({ contractError: null });\n    } else {\n      State.update({ contractError: \"Can not parse ABI\" });\n    }\n  }\n};\nloadData();\n\nconst notLoggedInWarning = <p class=\"text-center py-2\"> Login to Use BOS </p>;\n\nreturn (\n  <>\n    <div class=\"container\">\n      {context.accountId ? contractForm : notLoggedInWarning}\n      <h3 class=\"text-center\">{state.contractAddress}</h3>\n      {state.contractError}\n      {state.contractAbiView &&\n        state.contractAbiView.map((functions) => (\n          <div className={`card mb-2 ${functions.className}`}>\n            <div class=\"card-header\">\n              {functions.label.length > 0 ? functions.label : functions.name}\n            </div>\n            <div class=\"card-body\">\n              {functions.params.args &&\n                functions.params.args.map((args) => {\n                  return (\n                    <div className={`form-group pb-2 ${args.className}`}>\n                      <label>\n                        {args.label.length > 0 ? args.label : args.name}\n                      </label>\n                      {args.type_schema.type == \"string\" ||\n                      args.type_schema.type == \"$ref\" ||\n                      args.type_schema.type == \"integer\" ||\n                      args.type_schema.type == \"json\" ||\n                      args.type_schema.type == \"array\" ? (\n                        <input\n                          class=\"form-control\"\n                          data-name={args.name}\n                          data-type={\n                            args.type_schema.type == \"string\" ||\n                            args.type_schema.type[0] == \"string\"\n                              ? \"text\"\n                              : args.type_schema.type == \"integer\" ||\n                                args.type_schema.type[0] == \"integer\"\n                              ? \"number\"\n                              : args.type_schema.type == \"array\"\n                              ? \"array\"\n                              : args.type_schema.$ref\n                              ? \"text\"\n                              : \"text\"\n                          }\n                          type={\n                            args.type_schema.type == \"string\" ||\n                            args.type_schema.type[0] == \"string\"\n                              ? \"text\"\n                              : args.type_schema.type == \"integer\" ||\n                                args.type_schema.type[0] == \"integer\"\n                              ? \"number\"\n                              : args.type_schema.type == \"array\"\n                              ? \"array\"\n                              : args.type_schema.$ref\n                              ? \"text\"\n                              : \"text\"\n                          }\n                          placeholder={\n                            args.type_schema.type == \"string\" ||\n                            args.type_schema.type[0] == \"string\"\n                              ? \"string\"\n                              : args.type_schema.type == \"integer\" ||\n                                args.type_schema.type[0] == \"integer\"\n                              ? \"number\"\n                              : args.type_schema.type == \"array\"\n                              ? \"array : a|b\"\n                              : args.type_schema.$ref\n                              ? \"Account Address\"\n                              : \"text\"\n                          }\n                          onChange={(e) =>\n                            onInputChangeContractArg({\n                              functions: functions.name,\n                              name: args.name,\n                              type:\n                                args.type_schema.type == \"string\" ||\n                                args.type_schema.type[0] == \"string\"\n                                  ? \"text\"\n                                  : args.type_schema.type == \"json\" ||\n                                    args.type_schema.type[0] == \"json\"\n                                  ? \"text\"\n                                  : args.type_schema.type == \"integer\" ||\n                                    args.type_schema.type[0] == \"integer\"\n                                  ? \"number\"\n                                  : args.type_schema.type == \"array\"\n                                  ? \"array\"\n                                  : args.type_schema.$ref\n                                  ? \"text\"\n                                  : \"text\",\n                              value: e.target.value,\n                            })\n                          }\n                        />\n                      ) : (\n                        \"\"\n                      )}\n                      {args.type_schema.type == \"boolean\" ? (\n                        <select\n                          defaultValue={args.type_schema.type}\n                          class=\"form-control\"\n                          onChange={(e) =>\n                            onInputChangeContractArg({\n                              functions: functions.name,\n                              name: args.name,\n                              type: \"boolean\",\n                              value: e.target.value,\n                            })\n                          }\n                        >\n                          <option value=\"true\">True</option>\n                          <option value=\"false\">False</option>\n                        </select>\n                      ) : (\n                        \"\"\n                      )}\n                      {args.type_schema.type == \"enum\" ? (\n                        <select\n                          defaultValue={args.type_schema.type}\n                          class=\"form-control\"\n                          onChange={(e) =>\n                            onInputChangeContractArg({\n                              functions: functions.name,\n                              name: args.name,\n                              type: \"string\",\n                              value: e.target.value,\n                            })\n                          }\n                        >\n                          {args.enum &&\n                            args.enum.map((item, i) => (\n                              <option value={item}>{item}</option>\n                            ))}\n                        </select>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  );\n                })}\n              {state.response[functions.name] ? (\n                <>\n                  <div\n                    className={\n                      state.response[functions.name].error\n                        ? \"alert  alert-danger\"\n                        : \"alert  alert-primary\"\n                    }\n                    role=\"alert\"\n                  >\n                    {state.response[functions.name].value}\n                  </div>\n                </>\n              ) : (\n                \"\"\n              )}\n              <button\n                className={`btn btn-primary ${functions.classButton}`}\n                data-action=\"view\"\n                data-name={functions.name}\n                onClick={(e) =>\n                  onBtnClickCall(functions.name, functions.kind, fIndex)\n                }\n              >\n                {functions.button.length > 0 ? functions.button : \"View\"}\n              </button>\n            </div>\n          </div>\n        ))}\n\n      {state.contractAbiCall &&\n        state.contractAbiCall.map((functions, fIndex) => (\n          <div class={`card mb-2 ${functions.className}`}>\n            <div class=\"card-header\">\n              {functions.label.length > 0 ? functions.label : functions.name}\n            </div>\n            <div class=\"card-body\">\n              {functions.params.args &&\n                functions.params.args.map((args) => {\n                  return (\n                    <div className={`form-group pb-2 ${args.className}`}>\n                      <label>{args.name}</label>\n                      {args.type_schema.type == \"string\" ||\n                      args.type_schema.type == \"$ref\" ||\n                      args.type_schema.type == \"integer\" ||\n                      args.type_schema.type == \"json\" ||\n                      args.type_schema.type == \"array\" ? (\n                        <input\n                          class=\"form-control\"\n                          data-name={args.name}\n                          data-type={\n                            args.type_schema.type == \"string\" ||\n                            args.type_schema.type[0] == \"string\"\n                              ? \"text\"\n                              : args.type_schema.type == \"integer\" ||\n                                args.type_schema.type[0] == \"integer\"\n                              ? \"number\"\n                              : args.type_schema.type == \"array\"\n                              ? \"array\"\n                              : args.type_schema.$ref\n                              ? \"text\"\n                              : \"text\"\n                          }\n                          type={\n                            args.type_schema.type == \"string\" ||\n                            args.type_schema.type[0] == \"string\"\n                              ? \"text\"\n                              : args.type_schema.type == \"integer\" ||\n                                args.type_schema.type[0] == \"integer\"\n                              ? \"number\"\n                              : args.type_schema.type == \"array\"\n                              ? \"array\"\n                              : args.type_schema.$ref\n                              ? \"text\"\n                              : \"text\"\n                          }\n                          placeholder={\n                            args.type_schema.type == \"string\" ||\n                            args.type_schema.type[0] == \"string\"\n                              ? \"string\"\n                              : args.type_schema.type == \"integer\" ||\n                                args.type_schema.type[0] == \"integer\"\n                              ? \"number\"\n                              : args.type_schema.type == \"array\"\n                              ? \"array : a|b\"\n                              : args.type_schema.$ref\n                              ? \"Account Address\"\n                              : \"text\"\n                          }\n                          onChange={(e) =>\n                            onInputChangeContractArg({\n                              functions: functions.name,\n                              name: args.name,\n                              type:\n                                args.type_schema.type == \"string\" ||\n                                args.type_schema.type[0] == \"string\"\n                                  ? \"text\"\n                                  : args.type_schema.type == \"json\" ||\n                                    args.type_schema.type[0] == \"json\"\n                                  ? \"text\"\n                                  : args.type_schema.type == \"integer\" ||\n                                    args.type_schema.type[0] == \"integer\"\n                                  ? \"number\"\n                                  : args.type_schema.type == \"array\"\n                                  ? \"array\"\n                                  : args.type_schema.$ref\n                                  ? \"text\"\n                                  : \"text\",\n                              value: e.target.value,\n                            })\n                          }\n                        />\n                      ) : (\n                        \"\"\n                      )}\n                      {args.type_schema.type == \"boolean\" ? (\n                        <select\n                          defaultValue={args.type_schema.type}\n                          class=\"form-control\"\n                          onChange={(e) =>\n                            onInputChangeContractArg({\n                              functions: functions.name,\n                              name: args.name,\n                              type: \"boolean\",\n                              value: e.target.value,\n                            })\n                          }\n                        >\n                          <option value=\"true\">True</option>\n                          <option value=\"false\">False</option>\n                        </select>\n                      ) : (\n                        \"\"\n                      )}\n                      {args.type_schema.type == \"enum\" ? (\n                        <select\n                          defaultValue={args.type_schema.type}\n                          class=\"form-control\"\n                          onChange={(e) =>\n                            onInputChangeContractArg({\n                              functions: functions.name,\n                              name: args.name,\n                              type: \"string\",\n                              value: e.target.value,\n                            })\n                          }\n                        >\n                          {args.enum &&\n                            args.enum.map((item, i) => (\n                              <option value={item}>{item}</option>\n                            ))}\n                        </select>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  );\n                })}\n              {state.response[functions.name] ? (\n                <p class=\"card-text\">{state.response[functions.name]}</p>\n              ) : (\n                \"\"\n              )}\n              <button\n                className={`btn btn-primary ${functions.classButton}`}\n                data-action=\"call\"\n                data-name={functions.name}\n                onClick={(e) =>\n                  onBtnClickCall(functions.name, functions.kind, fIndex)\n                }\n              >\n                {functions.button.length > 0 ? functions.button : \"Call\"}\n              </button>\n            </div>\n          </div>\n        ))}\n    </div>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/preview", "fact_widget_deployments_id": "1bcae7ddf616b570c8414b7826ee9cc7", "inserted_timestamp": "2023-10-26T10:37:42.739Z", "modified_timestamp": "2023-10-26T10:37:42.739Z", "__row_index": 185}