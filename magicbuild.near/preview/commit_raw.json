{"tx_hash": "8FxhQnys2h6a5WDyQk2CPz41dH8wLuU3795n9YHJBDcA", "action_id_social": "GcNnXjobKzWpHu4iHB9gpj9veh7BCxADw73qTjWBEiXr-0-widget", "block_id": 105202435, "block_timestamp": "2023-11-08T06:29:35.735Z", "signer_id": "magicbuild.near", "widget_name": "preview", "source_code": "State.init({\r\n  contractAddress: props.contractAddress,\r\n  contractAbi: props,\r\n  contractError,\r\n  contractAbiCall,\r\n  contractAbiView,\r\n  response,\r\n  cMethod: props.cMethod,\r\n  cssStyle: props.cssStyle,\r\n});\r\n\r\nconst onInputChangeContractArg = (obj) => {\r\n  const data = state.cMethod;\r\n\r\n  const isExist = false;\r\n  const indexData = null;\r\n  console.log(\"obj\", obj);\r\n  data.forEach((item, index) => {\r\n    // console.log(\"item\", item);\r\n    if (item.name == obj.name) {\r\n      isExist = true;\r\n      indexData = index;\r\n      data[indexData].value = obj.value;\r\n    } else {\r\n    }\r\n  });\r\n  if (!isExist) {\r\n    data.push(obj);\r\n  }\r\n\r\n  State.update({ cMethod: data });\r\n};\r\nconst cDeposit = (functions, e) => {\r\n  const data = state.contractAbiCall;\r\n  data.forEach((item, fIndex) => {\r\n    if (item.name == functions.name) {\r\n      data[fIndex].deposit = e.target.value;\r\n      State.update({ cMethod: data });\r\n    }\r\n  });\r\n};\r\nconst onBtnClickCall = (functions, action) => {\r\n  const argsArr = [];\r\n  const data = state.cMethod;\r\n  data.forEach((item) => {\r\n    if (item.name == functions.name) {\r\n      if (item.type == \"number\" || item.type == \"integer\") {\r\n        item.value = parseInt(item.value);\r\n      }\r\n      if (item.type == \"array\") {\r\n        item.value = item.value.split(\"|\");\r\n      }\r\n      if (item.type == \"json\") {\r\n        item.value = JSON.parse(item.value);\r\n      }\r\n      if (item.type == \"boolean\") {\r\n        item.value = Boolean(item.value);\r\n      }\r\n      argsArr.push(item);\r\n    }\r\n  });\r\n\r\n  const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\r\n  const args = {};\r\n  argMap.forEach((item) => {\r\n    Object.assign(args, item);\r\n  });\r\n  if (action == \"view\") {\r\n    asyncFetch(\"https://rpc.near.org/\", {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: functions.name,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      if (res.body.result.result) {\r\n        const result = new Buffer.from(res.body.result.result).toString();\r\n        State.update({\r\n          response: {\r\n            [functions.name]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (res.body.result.error) {\r\n        const error = res.body.result.error;\r\n        State.update({\r\n          response: {\r\n            [functions.name]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (action == \"call\") {\r\n    Near.call(state.contractAddress, functions.name, args);\r\n    if (functions.deposit == 0 && functions.gas == 30000000000000) {\r\n      Near.call(state.contractAddress, functions.name, args);\r\n    }\r\n    if (functions.deposit > 0 || functions.gas > 30000000000000) {\r\n      Near.call(\r\n        state.contractAddress,\r\n        functions.name,\r\n        args,\r\n        functions.gasUnit == \"near\"\r\n          ? functions.gas * Math.pow(10, 24)\r\n          : functions.gas,\r\n        functions.depositUnit == \"near\"\r\n          ? functions.deposit * Math.pow(10, 24)\r\n          : functions.deposit\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nconst loadData = () => {\r\n  const abi = {\r\n    schema_version: \"0.3.0\",\r\n    address: props.contractAddress,\r\n    metadata: {\r\n      name: \"\",\r\n      version: \"0.1.0\",\r\n      authors: [\"\"],\r\n    },\r\n    body: {\r\n      functions: [],\r\n    },\r\n  };\r\n\r\n  if (state.cMethod) {\r\n    const abiMethod = state.cMethod;\r\n    abiMethod.forEach((item) => {\r\n      abi.body.functions.push(item);\r\n    });\r\n    if (abi.body.functions) {\r\n      const contractCall = [];\r\n      const contractView = [];\r\n      abi.body.functions.forEach((item) => {\r\n        if (item.kind == \"call\") {\r\n          contractCall.push(item);\r\n        }\r\n        if (item.kind == \"view\") {\r\n          contractView.push(item);\r\n        }\r\n        State.update({ contractAbiCall: contractCall });\r\n        State.update({ contractAbiView: contractView });\r\n      });\r\n      State.update({ contractError: null });\r\n    } else {\r\n      State.update({ contractError: \"Can not parse ABI\" });\r\n    }\r\n  }\r\n};\r\nloadData();\r\n\r\nconst notLoggedInWarning = <p class=\"text-center py-2\"> Login to Use BOS </p>;\r\n\r\nconst WrapperPreview = styled.div`\r\n ${props.cssStyle}\r\n`;\r\n\r\nconsole.log(\"style\", props.cssStyle);\r\nreturn (\r\n  <>\r\n    <WrapperPreview class=\"container\">\r\n      {context.accountId ? contractForm : notLoggedInWarning}\r\n      <h3 class=\"text-center\">{state.contractAddress}</h3>\r\n      {state.contractError}\r\n      {state.contractAbiView &&\r\n        state.contractAbiView\r\n          .filter((functions) => functions.export == true)\r\n          .map((functions) => (\r\n            <div className={`card mb-2 ${functions.className}`}>\r\n              <div class=\"card-header\">\r\n                {functions.label.length > 0 ? functions.label : functions.name}\r\n              </div>\r\n              <div class=\"card-body\">\r\n                {functions.params.args &&\r\n                  functions.params.args.map((args, argIndex) => {\r\n                    return (\r\n                      <div className={`form-group pb-2 ${args.className}`}>\r\n                        <label>\r\n                          {args.label.length > 0 ? args.label : args.name}\r\n                        </label>\r\n\r\n                        {args.type_schema.type == \"string\" ||\r\n                        args.type_schema.type == \"$ref\" ||\r\n                        args.type_schema.type == \"integer\" ||\r\n                        args.type_schema.type == \"json\" ||\r\n                        args.type_schema.type == \"array\" ? (\r\n                          <input\r\n                            class=\"form-control\"\r\n                            placeholder={\r\n                              args.type_schema.type == \"string\" ||\r\n                              args.type_schema.type[0] == \"string\"\r\n                                ? \"string\"\r\n                                : args.type_schema.type == \"integer\" ||\r\n                                  args.type_schema.type[0] == \"integer\"\r\n                                ? \"number\"\r\n                                : args.type_schema.type == \"array\"\r\n                                ? \"array : a|b\"\r\n                                : args.type_schema.type == \"json\"\r\n                                ? \"json : { }\"\r\n                                : args.type_schema.$ref\r\n                                ? \"Account Address\"\r\n                                : \"text\"\r\n                            }\r\n                            value={args.value || \"\"}\r\n                            defaultValue={args.value || \"\"}\r\n                            onChange={(e) =>\r\n                              onInputChangeContractArg({\r\n                                functions: functions.name,\r\n                                name: args.name,\r\n                                type:\r\n                                  args.type_schema.type == \"string\" ||\r\n                                  args.type_schema.type[0] == \"string\"\r\n                                    ? \"text\"\r\n                                    : args.type_schema.type == \"integer\" ||\r\n                                      args.type_schema.type[0] == \"integer\"\r\n                                    ? \"number\"\r\n                                    : args.type_schema.type == \"array\"\r\n                                    ? \"array\"\r\n                                    : args.type_schema.$ref\r\n                                    ? \"text\"\r\n                                    : \"text\",\r\n                                value: e.target.value,\r\n                              })\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {args.type_schema.type == \"boolean\" ? (\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) =>\r\n                              onInputChangeContractArg({\r\n                                functions: functions.name,\r\n                                name: args.name,\r\n                                type: \"boolean\",\r\n                                value: e.target.value,\r\n                              })\r\n                            }\r\n                          >\r\n                            <option value=\"true\">True</option>\r\n                            <option value=\"false\">False</option>\r\n                          </select>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {args.type_schema.type == \"enum\" ? (\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) =>\r\n                              onInputChangeContractArg({\r\n                                functions: functions.name,\r\n                                name: args.name,\r\n                                type: \"string\",\r\n                                value: e.target.value,\r\n                              })\r\n                            }\r\n                          >\r\n                            {args.enum &&\r\n                              args.enum.map((item, i) => (\r\n                                <option value={item}>{item}</option>\r\n                              ))}\r\n                          </select>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                {state.response[functions.name] ? (\r\n                  <>\r\n                    <div\r\n                      className={\r\n                        state.response[functions.name].error\r\n                          ? \"alert  alert-danger\"\r\n                          : \"alert  alert-primary\"\r\n                      }\r\n                      role=\"alert\"\r\n                    >\r\n                      <pre>\r\n                        {JSON.stringify(\r\n                          JSON.parse(state.response[functions.name].value),\r\n                          null,\r\n                          2\r\n                        )}\r\n                      </pre>\r\n                      <button\r\n                        class=\"btn btn-dark btn-sm mt-2\"\r\n                        onClick={() => {\r\n                          clipboard.writeText(\r\n                            state.response[functions.name].value\r\n                          );\r\n                        }}\r\n                      >\r\n                        Copy\r\n                      </button>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <button\r\n                  className={`btn  btn-primary ${functions.classButton}`}\r\n                  data-action=\"view\"\r\n                  onClick={(e) => onBtnClickCall(functions, functions.kind)}\r\n                >\r\n                  {functions.button.length > 0 ? functions.button : \"View\"}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n      {state.contractAbiCall &&\r\n        state.contractAbiCall\r\n          .filter((functions) => functions.export == true)\r\n          .map((functions, fIndex) => (\r\n            <div class={`card mb-2 ${functions.className}`}>\r\n              <div class=\"card-header\">\r\n                {functions.label.length > 0 ? functions.label : functions.name}\r\n              </div>\r\n              <div class=\"card-body\">\r\n                {functions.params.args &&\r\n                  functions.params.args.map((args) => {\r\n                    return (\r\n                      <div className={`form-group pb-2 ${args.className}`}>\r\n                        <label>\r\n                          {args.label.length > 0 ? args.label : args.name}\r\n                        </label>\r\n                        {args.type_schema.type == \"string\" ||\r\n                        args.type_schema.type == \"$ref\" ||\r\n                        args.type_schema.type == \"integer\" ||\r\n                        args.type_schema.type == \"json\" ||\r\n                        args.type_schema.type == \"array\" ? (\r\n                          <input\r\n                            class=\"form-control\"\r\n                            type={\"string\"}\r\n                            placeholder={\r\n                              args.type_schema.type == \"string\" ||\r\n                              args.type_schema.type[0] == \"string\"\r\n                                ? \"string\"\r\n                                : args.type_schema.type == \"integer\" ||\r\n                                  args.type_schema.type[0] == \"integer\"\r\n                                ? \"number\"\r\n                                : args.type_schema.type == \"array\"\r\n                                ? \"array : a|b\"\r\n                                : args.type_schema.type == \"json\"\r\n                                ? \"json : {}\"\r\n                                : args.type_schema.$ref\r\n                                ? \"Account Address\"\r\n                                : \"text\"\r\n                            }\r\n                            onChange={(e) =>\r\n                              onInputChangeContractArg({\r\n                                functions: functions.name,\r\n                                name: args.name,\r\n                                type:\r\n                                  args.type_schema.type == \"string\" ||\r\n                                  args.type_schema.type[0] == \"string\"\r\n                                    ? \"text\"\r\n                                    : args.type_schema.type == \"integer\" ||\r\n                                      args.type_schema.type[0] == \"integer\"\r\n                                    ? \"number\"\r\n                                    : args.type_schema.type == \"array\"\r\n                                    ? \"array\"\r\n                                    : args.type_schema.type == \"json\"\r\n                                    ? \"json\"\r\n                                    : args.type_schema.$ref\r\n                                    ? \"text\"\r\n                                    : \"text\",\r\n                                value: e.target.value,\r\n                              })\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {args.type_schema.type == \"boolean\" ? (\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) =>\r\n                              onInputChangeContractArg({\r\n                                functions: functions.name,\r\n                                name: args.name,\r\n                                type: \"boolean\",\r\n                                value: e.target.value,\r\n                              })\r\n                            }\r\n                          >\r\n                            <option value=\"true\">True</option>\r\n                            <option value=\"false\">False</option>\r\n                          </select>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {args.type_schema.type == \"enum\" ? (\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) =>\r\n                              onInputChangeContractArg({\r\n                                functions: functions.name,\r\n                                name: args.name,\r\n                                type: \"string\",\r\n                                value: e.target.value,\r\n                              })\r\n                            }\r\n                          >\r\n                            {args.enum &&\r\n                              args.enum.map((item, i) => (\r\n                                <option value={item}>{item}</option>\r\n                              ))}\r\n                          </select>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                {functions.selfInputDeposit && (\r\n                  <div className={`form-group pb-2`}>\r\n                    <label>\r\n                      {functions.labelDeposit.length > 0\r\n                        ? functions.labelDeposit\r\n                        : \"Deposit\"}\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={functions.deposit}\r\n                      defaultValue={functions.deposit}\r\n                      onChange={(e) => cDeposit(functions, e)}\r\n                      class=\"form-control \"\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                {state.response[functions.name] ? (\r\n                  <p class=\"card-text\">{state.response[functions.name]}</p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <button\r\n                  className={`btn btn-primary ${functions.classButton}`}\r\n                  data-action=\"call\"\r\n                  onClick={(e) => onBtnClickCall(functions, functions.kind)}\r\n                >\r\n                  {functions.button.length > 0 ? functions.button : \"Call\"}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n    </WrapperPreview>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/preview", "fact_widget_deployments_id": "c1ac9215ba19282ee5b38076902c956f", "inserted_timestamp": "2023-11-08T08:32:07.558Z", "modified_timestamp": "2023-11-08T08:32:07.558Z", "__row_index": 179}