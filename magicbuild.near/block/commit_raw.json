{"tx_hash": "E4urRcVKDBLMAwSvT1YVcHr1DfVgCsmidUUGgSWbdjqq", "action_id_social": "CAqyBE6kQgHohxny84CvBagRYbaaigq1XKjVPGcC6geG-0-widget", "block_id": 105269318, "block_timestamp": "2023-11-09T04:10:57.868Z", "signer_id": "magicbuild.near", "widget_name": "block", "source_code": "State.init({\r\n  prompt,\r\n  promptLoading: false,\r\n  cssStyle,\r\n  htmlElement,\r\n  widgetName,\r\n  name: \"\",\r\n  description: \"\",\r\n  website: \"\",\r\n  image: {\r\n    ipfs_cid: \"\",\r\n  },\r\n  clicked: false,\r\n  export: false,\r\n  img: null,\r\n  tags,\r\n  choose,\r\n  htmlDocs,\r\n});\r\nconst promptLoadingUI = (\r\n  <span\r\n    className=\"spinner-grow spinner-grow-sm me-1\"\r\n    role=\"status\"\r\n    aria-hidden=\"true\"\r\n  />\r\n);\r\nconst cPrompt = (e) => {\r\n  State.update({ prompt: e.target.value });\r\n};\r\n\r\nconst getPrompt = () => {\r\n  State.update({ promptLoading: true });\r\n  console.log(\"prompt\", state.prompt);\r\n  asyncFetch(\"https://api.openai.com/v1/chat/completions\", {\r\n    body: JSON.stringify({\r\n      model: \"gpt-3.5-turbo\",\r\n      messages: [\r\n        {\r\n          role: \"user\",\r\n          content:\r\n            \"Act as a UI developer, users will fill out a prompt about their frontend ideas, and your role is to create a css style of the Button. Create button effects, button font size 30. User prompt:{\" +\r\n            state.prompt +\r\n            \"}. Give me the JSON for an object : {HTML:`Code`, CSS: `Code`} and no more explaination\",\r\n        },\r\n      ],\r\n      max_tokens: 1000,\r\n      temperature: 1,\r\n    }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer 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`,\r\n    },\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    if (\r\n      res.body.choices[0].message.content &&\r\n      JSON.parse(res.body.choices[0].message.content)\r\n    ) {\r\n      const dataHtml = JSON.parse(res.body.choices[0].message.content);\r\n      console.log(\"ai\", dataHtml);\r\n      const htmlElement =\r\n        \"const Wrapper = styled.div`\" +\r\n        dataHtml.CSS +\r\n        \"` \\nreturn \\n<Wrapper>\\n\" +\r\n        dataHtml.HTML +\r\n        \"\\n</Wrapper>\";\r\n      State.update({ htmlElement: htmlElement });\r\n      State.update({\r\n        cssStyle: dataHtml.CSS.replaceAll(\"\\n\", \"\").replaceAll(\"\\n\", \"\"),\r\n      });\r\n      const htmlDocs =\r\n        \"<style>\" + dataHtml.CSS.replaceAll(\"\\n\", \"\") + \"</style>\";\r\n      htmlDocs += dataHtml.HTML;\r\n      console.log(htmlDocs);\r\n      State.update({ htmlDocs: htmlDocs });\r\n    }\r\n\r\n    State.update({ promptLoading: false });\r\n  });\r\n};\r\n\r\nconst onInputChangeWidgetName = ({ target }) => {\r\n  State.update({ widgetName: target.value });\r\n  State.update({ clicked: false });\r\n  State.update({ export: false });\r\n};\r\nconst onInputChangeWidgetTitle = ({ target }) => {\r\n  State.update({ name: target.value });\r\n};\r\nconst onInputChangeWidgetDescription = ({ target }) => {\r\n  State.update({ description: target.value });\r\n};\r\nconst onInputChangeWidgetWebsite = ({ target }) => {\r\n  State.update({ website: target.value });\r\n};\r\nconst uploadFileUpdateState = (body) => {\r\n  asyncFetch(\"https://ipfs.near.social/add\", {\r\n    method: \"POST\",\r\n    headers: { Accept: \"application/json\" },\r\n    body,\r\n  }).then((res) => {\r\n    const cid = res.body.cid;\r\n    State.update({ image: { ipfs_cid: cid } });\r\n    State.update({ img: { cid } });\r\n  });\r\n};\r\n\r\nconst filesOnChange = (files) => {\r\n  if (files) {\r\n    State.update({ img: { uploading: true, cid: null } });\r\n    uploadFileUpdateState(files[0]);\r\n  }\r\n};\r\nconst taggedWidgets = Social.keys(`*/widget/*/metadata/tags/*`, \"final\");\r\nlet tags = [];\r\nif (Object.keys(taggedWidgets)) {\r\n  Object.keys(taggedWidgets).forEach((item) => {\r\n    if (taggedWidgets[item].widget) {\r\n      if (Object.keys(taggedWidgets[item].widget).length > 0) {\r\n        Object.keys(taggedWidgets[item].widget).forEach((item1) => {\r\n          if (taggedWidgets[item].widget[item1].metadata.tags) {\r\n            if (\r\n              Object.keys(taggedWidgets[item].widget[item1].metadata.tags)\r\n                .length > 0\r\n            ) {\r\n              Object.keys(\r\n                taggedWidgets[item].widget[item1].metadata.tags\r\n              ).forEach((tag) => {\r\n                tags.push(tag);\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nState.update({ tags: tags });\r\nconst openModal = () => {\r\n  State.update({ clicked: false });\r\n  State.update({ export: false });\r\n};\r\n\r\nconst exportForm = () => {\r\n  if (!state.clicked) {\r\n    State.update({ clicked: true });\r\n\r\n    const exportListData = Social.get(\r\n      `${context.accountId}/magicbuild/widgetList`\r\n    );\r\n\r\n    const exporttList = JSON.parse(exportListData) || [];\r\n\r\n    const isExist = false;\r\n    exporttList.forEach((item, index) => {\r\n      if (item.widgetName == state.widgetName) {\r\n        exporttList[index].widgetName = state.widgetName;\r\n        isExist = true;\r\n      }\r\n    });\r\n    if (!isExist) {\r\n      exporttList.push({ widgetName: state.widgetName });\r\n    }\r\n\r\n    const data = {\r\n      widget: {\r\n        [state.widgetName]: {\r\n          \"\": state.htmlElement,\r\n          metadata: {\r\n            name: state.name,\r\n            description: state.description,\r\n            linktree: {\r\n              website: state.website,\r\n            },\r\n            image: {\r\n              ipfs_cid: state.img.cid,\r\n            },\r\n            tags: tagsObj,\r\n          },\r\n        },\r\n      },\r\n      magicbuild: { widgetList: exporttList },\r\n    };\r\n    Social.set(data, {\r\n      force: true,\r\n      onCommit: () => {\r\n        State.update({ export: true });\r\n      },\r\n      onCancel: () => {\r\n        State.update({ clicked: false });\r\n      },\r\n    });\r\n  }\r\n};\r\nconst cHTML = (e) => {\r\n  State.update({ htmlElement: e.target.value });\r\n};\r\nconst HtmlPreview = styled.div`\r\n ${props.cssStyle}\r\n`;\r\n\r\nreturn (\r\n  <>\r\n    <div class=\"row mb-3\">\r\n      <div class=\"form-group col-md-9\">\r\n        <h6 class=\"mb-2\">Type your prompt : </h6>\r\n        <input\r\n          class=\"form-control\"\r\n          value={state.prompt}\r\n          placeholder=\"I want to create a modern style Christmas vibe frontend with gradient background\"\r\n          onChange={(e) => cPrompt(e)}\r\n        />\r\n      </div>\r\n      <div class=\"form-group col-md-3 \">\r\n        <label></label>\r\n        <button\r\n          disabled={state.promptLoading}\r\n          onClick={getPrompt}\r\n          class=\"btn btn-success form-control \"\r\n        >\r\n          {state.promptLoading ? promptLoadingUI : \"\ud83e\ude84\"} AI Generator\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"form-group col-md-3\"></div>\r\n      <div class=\"form-group col-md-3\"></div>\r\n      <div class=\"form-group col-md-3\"></div>\r\n      <div class=\"form-group col-md-3\">\r\n        <button\r\n          data-bs-toggle=\"modal\"\r\n          data-bs-target={`#export-${Date.now()}`}\r\n          class=\"btn btn-primary form-control \"\r\n          onClick={openModal}\r\n        >\r\n          \ud83d\udd3cExport\r\n        </button>\r\n        <div\r\n          class=\"modal fade\"\r\n          id={`export-${Date.now()}`}\r\n          tabindex=\"-2\"\r\n          aria-labelledby=\"exportLabel\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div class=\"modal-dialog\">\r\n            <div class=\"modal-content\">\r\n              <div class=\"modal-header\">\r\n                <h1 class=\"modal-title fs-5\" id=\"exportLabel\">\r\n                  Export Widget\r\n                </h1>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn-close\"\r\n                  data-bs-dismiss=\"modal\"\r\n                  aria-label=\"Close\"\r\n                ></button>\r\n              </div>\r\n              <div class=\"modal-body\">\r\n                {state.export && state.widgetName ? (\r\n                  <>\r\n                    <div class=\"alert alert-primary\" role=\"alert\">\r\n                      <a\r\n                        href={`https://near.social/${context.accountId}/widget/${state.widgetName}`}\r\n                      >\r\n                        {`https://near.social/${context.accountId}/widget/${state.widgetName}`}\r\n                      </a>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <div class=\"form-group\">\r\n                      <label>Widget URL</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        defaultValue={state.widgetName || \"\"}\r\n                        onChange={(e) => onInputChangeWidgetName(e)}\r\n                      />\r\n                      <small class=\"form-text text-muted\">\r\n                        A new widget configured with the form will be created.\r\n                      </small>\r\n                    </div>\r\n                    <div class=\"form-group pt-2\">\r\n                      <label>Name</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        defaultValue={state.name || \"\"}\r\n                        onChange={(e) => onInputChangeWidgetTitle(e)}\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group pt-2\">\r\n                      <label>Description</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        defaultValue={state.description || \"\"}\r\n                        onChange={(e) => onInputChangeWidgetDescription(e)}\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group pt-2\">\r\n                      <label></label>\r\n                      <Files\r\n                        multiple={false}\r\n                        accepts={[\"image/*\"]}\r\n                        minFileSize={1}\r\n                        clickable\r\n                        className=\"btn btn-outline-primary\"\r\n                        onChange={filesOnChange}\r\n                      >\r\n                        {state.img?.uploading ? (\r\n                          <> Uploading </>\r\n                        ) : (\r\n                          \"Upload Logo Application\"\r\n                        )}\r\n                      </Files>\r\n                    </div>\r\n                    <div class=\"form-group pt-2\">\r\n                      <label></label>\r\n                      {state.img && !state.img.uploading ? (\r\n                        <img\r\n                          class=\"rounded w-50 h-50\"\r\n                          style={{ objectFit: \"cover\" }}\r\n                          src={`https://ipfs.near.social/ipfs/${state.img.cid}`}\r\n                          alt=\"upload preview\"\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                    <div class=\"form-group pt-2\">\r\n                      <label>Website</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        defaultValue={state.website || \"\"}\r\n                        onChange={(e) => onInputChangeWidgetWebsite(e)}\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group pt-2\">\r\n                      <label>Tags</label>\r\n\r\n                      <Typeahead\r\n                        options={state.tags || []}\r\n                        multiple\r\n                        onChange={(value) => {\r\n                          State.update({ choose: value });\r\n                        }}\r\n                        placeholder=\"Input tag...\"\r\n                      />\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n              <div class=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-secondary\"\r\n                  data-bs-dismiss=\"modal\"\r\n                >\r\n                  Close\r\n                </button>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  disabled={state.clicked}\r\n                  onClick={exportForm}\r\n                  class=\"btn btn-primary\"\r\n                >\r\n                  Export\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row mb-3\">\r\n      <div class=\"form-group col-md-6\">\r\n        <h6 class=\"mb-2\">Html Element </h6>\r\n        <textarea\r\n          style={{ height: \"400px\" }}\r\n          class=\"form-control w-100\"\r\n          placeholder=\"HTML\"\r\n          value={state.htmlElement}\r\n          onChange={(e) => cHTML(e)}\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div\r\n        class=\"form-group col-md-6\"\r\n        dangerouslySetInnerHTML={{ __html: state.htmlElement }}\r\n      >\r\n        <h6 class=\"mb-2\">Preview</h6>\r\n        <iframe\r\n          style={{ height: \"400px\" }}\r\n          className=\"w-100 border\"\r\n          srcDoc={state.htmlDocs}\r\n        />\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/block", "fact_widget_deployments_id": "1181398cae72cbbdefec81441524d707", "inserted_timestamp": "2023-11-09T06:19:34.963Z", "modified_timestamp": "2023-11-09T06:19:34.963Z", "__row_index": 6}