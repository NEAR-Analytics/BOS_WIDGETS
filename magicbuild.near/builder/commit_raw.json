{"tx_hash": "3NFhUkKPL7Mm3BJc13ps3CbYFQfKRwwDPaV6pzqvAY4e", "action_id_social": "EjdGkYwXHtcLZYBGEChciGuJC49SYGvZUJj7f3b27VeJ-0-widget", "block_id": 105769952, "block_timestamp": "2023-11-15T19:16:08.177Z", "signer_id": "magicbuild.near", "widget_name": "builder", "source_code": "State.init({\n  clientId: props.clientId ? props.clientId : null,\n  clientName: props.clientName ? props.clientName : \"\",\n  contractAddress: props.address ? props.address : \"\",\n  cMethod: props.abi ? props.abi : [],\n  rpcUrl: \"https://rpc.near.org/\",\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\",\n  nearBlockRpc: \"https://api.nearblocks.io/\",\n  fName: \"\",\n  fAction: \"view\",\n  fLabel: \"\",\n  cMerr,\n  res,\n  cAerr,\n  messProccses: \"\",\n  totalProcess: 0,\n  endprocess: 1,\n  designMode: false,\n  cssStyle: \"\",\n  prompt,\n  promptLoading: false,\n  openModalCSS: false,\n  openModalPreview: false,\n  clickedModalCSS: false,\n});\n\nconst header = {\n  \"Content-Type\": \"application/json\",\n};\nconst saveClientConfig = {\n  clientId: state.clientId,\n  clientName: state.clientName,\n  clientContract: state.contractAddress,\n  abi: state.cMethod,\n};\nconst opGet = {\n  headers: header,\n  method: \"GET\",\n};\nconst asyncIntervals = [];\n\nconst runAsyncInterval = (cb, interval, intervalIndex) => {\n  cb();\n  if (asyncIntervals[intervalIndex].run) {\n    asyncIntervals[intervalIndex].id = setTimeout(\n      () => runAsyncInterval(cb, interval, intervalIndex),\n      interval\n    );\n  }\n};\nconst setAsyncInterval = (cb, interval) => {\n  if (cb && typeof cb === \"function\") {\n    const intervalIndex = asyncIntervals.length;\n    asyncIntervals.push({ run: true, id: id });\n    runAsyncInterval(cb, interval, intervalIndex);\n    return intervalIndex;\n  } else {\n    throw new Error(\"Callback must be a function\");\n  }\n};\nconst clearAsyncInterval = (intervalIndex) => {\n  if (asyncIntervals[intervalIndex].run) {\n    clearTimeout(asyncIntervals[intervalIndex].id);\n    asyncIntervals[intervalIndex].run = false;\n    State.update({\n      endprocess: state.endprocess++,\n    });\n  }\n};\n\nconst cFunc = (e, type) => {\n  const data = e.target.value;\n  if (type == \"name\") State.update({ fName: data });\n  if (type == \"label\") State.update({ fLabel: data });\n  if (type == \"action\") State.update({ fAction: data });\n  if (type == \"address\") State.update({ contractAddress: data.toLowerCase() });\n};\nconst cep = \"magicbuild.near\";\nconst onCreateArgs = (fName) => {\n  State.update({ cAerr: { [fName]: null } });\n  const arg = {\n    name: \"\",\n    label: \"\",\n    button: \"\",\n    className: \"\",\n    classButton: \"\",\n    type_schema: {\n      type: \"string\",\n    },\n    value: \"\",\n  };\n  const abiMethod = state.cMethod;\n  abiMethod.forEach((item, index) => {\n    if (item.name == fName && item.kind) {\n      abiMethod[index].params.args.push(arg);\n      State.update({ cMethod: abiMethod });\n    }\n  });\n};\nconst onSwitchChangeDesignMode = () => {\n  State.update({ designMode: !state.designMode });\n};\nconst cMLabel = (e, functions, type) => {\n  const value = e.target.value;\n  const a = state.cMethod;\n  a.forEach((item, fIdx) => {\n    if (functions.name == item.name && item.kind) {\n      if (type == \"method\") a[fIdx].label = value;\n      if (type == \"className\") a[fIdx].className = value;\n      if (type == \"classButton\") a[fIdx].classButton = value;\n      if (type == \"labelDeposit\") a[fIdx].labelDeposit = value;\n      if (type == \"button\") a[fIdx].button = value;\n      if (type == \"gas\") a[fIdx].gas = value || 0;\n      if (type == \"deposit\") a[fIdx].deposit = value || 0;\n      if (type == \"remove\") a.splice(fIdx, 1);\n      if (type == \"depositUnit\") a[fIdx].depositUnit = value;\n      if (type == \"gasUnit\") a[fIdx].gasUnit = value;\n      if (type == \"selfInputDeposit\")\n        a[fIdx].selfInputDeposit = e.target.checked;\n      State.update({ cMethod: a });\n    }\n  });\n};\nconst cAD = (e, functions, aIdx, type) => {\n  const value = e.target.value;\n  const a = state.cMethod;\n  a.forEach((item, fIdx) => {\n    if (functions.name == item.name && item.kind) {\n      console.log(\"a\", a[fIdx].params.args[aIdx]);\n      if (type == \"name\") a[fIdx].params.args[aIdx].name = value;\n      if (type == \"label\") a[fIdx].params.args[aIdx].label = value;\n      if (type == \"className\") a[fIdx].params.args[aIdx].className = value;\n      if (type == \"type\") a[fIdx].params.args[aIdx].type_schema.type = value;\n      if (type == \"value\") {\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"integer\") {\n          a[fIdx].params.args[aIdx].value = parseInt(value);\n        }\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"array\") {\n          a[fIdx].params.args[aIdx].value = value.split(\"|\");\n        }\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"boolean\") {\n          a[fIdx].params.args[aIdx].value = Boolean(value);\n        }\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"json\") {\n          a[fIdx].params.args[aIdx].value = JSON.parse(value);\n        }\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"string\") {\n          a[fIdx].params.args[aIdx].value = value;\n        }\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"enum\") {\n          a[fIdx].params.args[aIdx].value = value;\n        }\n        if (a[fIdx].params.args[aIdx].type_schema.type == \"$ref\") {\n          a[fIdx].params.args[aIdx].value = value;\n        }\n      }\n      if (type == \"remove\") a[fIdx].params.args.splice(aIdx, 1);\n      State.update({ cMethod: a });\n    }\n  });\n};\nconst onSwitchChangeArgExport = (fIndex) => {\n  const abiMethod = state.cMethod;\n  abiMethod[fIndex].export = !abiMethod[fIndex].export;\n  State.update({ cMethod: abiMethod });\n};\nconst selectAll = () => {\n  const abiMethod = state.cMethod;\n  abiMethod.forEach((item, index) => {\n    abiMethod[index].export = true;\n  });\n  State.update({ cMethod: abiMethod });\n};\nconst closeAll = () => {\n  const abiMethod = state.cMethod;\n  abiMethod.forEach((item, index) => {\n    abiMethod[index].export = false;\n  });\n  State.update({ cMethod: abiMethod });\n};\nconst cPrompt = (e) => {\n  State.update({ prompt: e.target.value });\n};\nconst promptLoadingUI = (\n  <span\n    className=\"spinner-grow spinner-grow-sm me-1\"\n    role=\"status\"\n    aria-hidden=\"true\"\n  />\n);\n\nconst getPrompt = () => {\n  State.update({ promptLoading: true });\n  asyncFetch(\"https://api.openai.com/v1/chat/completions\", {\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"user\",\n          content: `Act as a UI developer, users will fill out a prompt about their frontend ideas, and your role is to create a css style. To describe the projects, It is the card that has a title as .card-header, inside has label{}, input{} and 1 Button. Select a different color background that matches the user's theme. Find the color of the label, input, button that is complementary to the background. Create button effects. Don't fix the width of the card, the card-header text aligns in the center, bold and the font size is 40, and the label and button font size 30. User prompt:{\"${state.prompt}\"}. Answer as the Following format: .card{} .card-header button{} input{} label{} and no more explaination`,\n        },\n      ],\n      max_tokens: 1000,\n      temperature: 1,\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer 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`,\n    },\n    method: \"POST\",\n  }).then((res) => {\n    State.update({ promptLoading: false });\n    State.update({ cssStyle: res.body.choices[0].message.content });\n    State.update({ openModalPreview: true });\n  });\n};\nconst openModalCSS = (e, type) => {\n  if (type == \"show\") {\n    State.update({ openModalCSS: true, clickedModalCSS: false });\n  }\n  if (type == \"close\") {\n    State.update({ openModalCSS: false });\n  }\n};\nconst openModalPreview = (type) => {\n  if (type == \"show\") {\n    State.update({ openModalPreview: true });\n  }\n  if (type == \"close\") {\n    State.update({ openModalPreview: false });\n  }\n};\nconst onCreateMethod = () => {\n  if (state.fName.length > 0) {\n    State.update({ cMerr: null });\n    const method = {\n      name: state.fName,\n      kind: state.fAction,\n      label: state.fLabel,\n      button: \"\",\n      className: \"\",\n      classButton: \"\",\n      labelDeposit: \"\",\n      export: true,\n      params: {\n        serialization_type: \"json\",\n        args: [],\n      },\n      deposit: 0,\n      depositUnit: \"near\",\n      selfInputDeposit: false,\n      gas: 30000000000000,\n      gasUnit: \"yoctoNEAR\",\n    };\n    const abiMethod = state.cMethod;\n    const isExistFunction = false;\n\n    abiMethod.forEach((item) => {\n      if (item.name == state.fName) {\n        isExistFunction = true;\n      }\n    });\n    if (!isExistFunction) {\n      abiMethod.push(method);\n      State.update({ cMethod: abiMethod });\n    } else {\n      State.update({ cMerr: \"Method Exist!\" });\n    }\n  } else {\n    State.update({ cMerr: \"Please Input Method Name!\" });\n  }\n};\nconst getMethodFromSource = () => {\n  const res = fetch(state.rpcUrl, {\n    body: JSON.stringify({\n      method: \"query\",\n      params: {\n        request_type: \"view_code\",\n        account_id: state.contractAddress,\n        finality: \"final\",\n      },\n      id: 154,\n      jsonrpc: \"2.0\",\n    }),\n    headers: header,\n    method: \"POST\",\n  });\n  State.update({ cMerr: null });\n  State.update({ totalProcess: 0 });\n  State.update({ endprocess: 1 });\n  let abiMethod = [];\n  State.update({ cMethod: [] });\n  const resb = res.body;\n  if (resb.result.code_base64) {\n    const data = Buffer(resb.result.code_base64, \"base64\").toString(\"ascii\");\n    const fist = data.indexOf(\"memory\u0002\");\n    let second =\n      data.indexOf(\"__data_end\") !== -1\n        ? data.indexOf(\"__data_end\")\n        : data.indexOf(\"\u0003P]\");\n    if (fist !== -1 && second !== -1) {\n      const functionsData = data\n        .substring(fist, second)\n        .replace(/[^\\w ]/g, \" \")\n        .split(\" \");\n      const filterFunction = [];\n\n      functionsData.forEach((item, index) => {\n        if (index > 0 && item.length > 1) {\n          if (!/^[A-Z]+(?:_[A-Z]+)*$/m.test(item) && !/^[0-9]*$/.test(string)) {\n            filterFunction.push(item);\n          }\n        }\n      });\n\n      filterFunction.forEach((item) => {\n        const res = fetch(\n          `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${item}&order=desc&page=1&per_page=25`,\n          opGet\n        );\n        const method = {\n          name: item,\n          kind: \"view\",\n          label: \"\",\n          button: \"\",\n          className: \"\",\n          classButton: \"\",\n          labelDeposit: \"\",\n          export: true,\n          params: {\n            serialization_type: \"json\",\n            args: [],\n          },\n          deposit: 0,\n          gas: 30000000000000,\n          deposit: 0,\n          depositUnit: \"near\",\n          selfInputDeposit: false,\n          gas: 30000000000000,\n          gasUnit: \"yoctoNEAR\",\n        };\n        if (res.body.txns.length > 0) {\n          const isScs = false;\n          res.body.txns.forEach((item) => {\n            if (item.outcomes.status) {\n              isScs = true;\n            }\n          });\n          if (isScs) {\n            method.kind = \"call\";\n          }\n        }\n        abiMethod.push(method);\n      });\n      State.update({ cMethod: abiMethod });\n      abiMethod.forEach((item, index) => {\n        getArgsFromMethod(item.name, index);\n      });\n\n      State.update({ totalProcess: filterFunction.length });\n    } else {\n      State.update({ cMerr: \"Unable to detect Method!\" });\n    }\n  }\n};\nconst getArgsFromMethod = (fName, fIndex) => {\n  asyncFetch(\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${fName}&order=desc&page=1&per_page=1`,\n    opGet\n  )\n    .then((res) => {\n      const restxns = res.body.txns[0];\n      if (restxns.outcomes.status && restxns.logs.length > 0) {\n        const argsData = JSON.parse(\n          restxns.logs[0].replace(\"EVENT_JSON:\", \"\").replaceAll(\"\\\\\", \"\")\n        );\n\n        const args = argsData.data[0] || argsData;\n        const abiMethod = state.cMethod;\n        abiMethod[fIndex].params.args = [];\n        if (Object.keys(args).length > 0) {\n          Object.keys(args).forEach((item) => {\n            const arg = {\n              name: item,\n              type_schema: {\n                type:\n                  typeof args[item] == \"number\"\n                    ? \"integer\"\n                    : typeof args[item] == \"object\"\n                    ? \"json\"\n                    : typeof args[item],\n              },\n              value: \"\",\n            };\n            abiMethod[fIndex].kind = \"call\";\n            abiMethod[fIndex].params.args.push(arg);\n            State.update({ cMethod: abiMethod });\n          });\n        }\n        State.update({\n          endprocess: state.endprocess++,\n        });\n      } else {\n        let countLoop = 0;\n        const getArg = setAsyncInterval(() => {\n          const abiMethod = state.cMethod;\n          const argsArr = abiMethod[fIndex].params.args;\n          const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\n          const args = {};\n          argMap.forEach((item) => {\n            Object.assign(args, item);\n          });\n          asyncFetch(state.rpcUrl, {\n            body: JSON.stringify({\n              method: \"query\",\n              params: {\n                request_type: \"call_function\",\n                account_id: state.contractAddress,\n                method_name: fName,\n                args_base64: new Buffer.from(JSON.stringify(args)).toString(\n                  \"base64\"\n                ),\n                finality: \"final\",\n              },\n              id: 154,\n              jsonrpc: \"2.0\",\n            }),\n            headers: header,\n            method: \"POST\",\n          }).then((res) => {\n            const strErr = res.body.result.error;\n            if (strErr && strErr.includes(\"missing field\")) {\n              const argName = strErr.substring(\n                strErr.indexOf(\"`\") + 1,\n                strErr.lastIndexOf(\"`\")\n              );\n              const checkType = [\n                { value: \"\", type: \"string\" },\n                { value: 0, type: \"integer\" },\n                { value: [], type: \"array\" },\n                { value: true, type: \"boolean\" },\n                { value: {}, type: \"json\" },\n                { value: state.contractAddress, type: \"$ref\" },\n              ];\n              const isCheck = false;\n              checkType.forEach((typeItem) => {\n                if (isCheck == false) {\n                  asyncFetch(state.rpcUrl, {\n                    body: JSON.stringify({\n                      method: \"query\",\n                      params: {\n                        request_type: \"call_function\",\n                        account_id: state.contractAddress,\n                        method_name: fName,\n                        args_base64: new Buffer.from(\n                          JSON.stringify({\n                            [argName]: typeItem.value,\n                          })\n                        ).toString(\"base64\"),\n                        finality: \"final\",\n                      },\n                      id: 154,\n                      jsonrpc: \"2.0\",\n                    }),\n                    headers: header,\n                    method: \"POST\",\n                  }).then((res) => {\n                    const isExist = false;\n                    const uS = (argName, type, value) => {\n                      const arg = {\n                        name: argName,\n                        type_schema: {\n                          type: type,\n                        },\n                        value: type == \"enum\" ? value[0] : value,\n                      };\n                      if (type == \"enum\") {\n                        arg.enum = value;\n                      }\n                      abiMethod[fIndex].params.args.forEach((item) => {\n                        if (item.name == argName) {\n                          isExist = true;\n                        }\n                      });\n                      if (isExist == false) {\n                        abiMethod[fIndex].params.args.push(arg);\n                        State.update({ cMethod: abiMethod });\n                      }\n                      if (isCheck && isExist) {\n                        //  clearInterval(getArg);\n                      }\n                      isCheck = true;\n                    };\n                    if (res.body.result.result) {\n                      clearAsyncInterval(getArg);\n                    }\n                    const ftch = res.body.result.error;\n\n                    if (ftch) {\n                      if (ftch.includes(\"Option::unwrap()`\")) {\n                        uS(argName, typeItem.type, typeItem.value);\n                        abiMethod[fIndex].kind = \"call\";\n                        State.update({ cMethod: abiMethod });\n                        clearAsyncInterval(getArg);\n                      }\n                      if (ftch.includes(\"the account ID\")) {\n                        uS(argName, \"$ref\", state.contractAddress);\n                      }\n                      if (\n                        ftch.includes(\"invalid type: sequence, expected u64\")\n                      ) {\n                        uS(argName, \"number\", 300);\n                      }\n                      if (ftch.includes(\"invalid digit found\")) {\n                        uS(argName, \"string\", \"300\");\n                      }\n                      if (\n                        ftch.includes(\n                          \"invalid type: sequence, expected a string\"\n                        )\n                      ) {\n                        if (isExist) {\n                          uS(argName, \"string\", \"wrap.near\");\n                        } else {\n                          uS(argName, \"string\", \"30\");\n                        }\n                        // clearInterval(getArg);\n                      }\n                      if (\n                        ftch.includes(\n                          \"data did not match any variant of untagged enum\"\n                        )\n                      ) {\n                        uS(argName, typeItem.type, [\"300\", \"300\"]);\n                        clearAsyncInterval(getArg);\n                      }\n\n                      if (ftch.includes(\"not implemented\")) {\n                        uS(argName, typeItem.type, [\"300\", \"300\"]);\n                        // clearInterval(getArg);\n                      }\n                      if (ftch.includes(\"invalid token id\")) {\n                        uS(argName, \"$ref\", \"wrap.near\");\n                      }\n                      if (ftch.includes(\"integer from empty string\")) {\n                        uS(argName, typeItem.type, \"300\");\n                      }\n                      if (ftch.includes(\"unknown variant\")) {\n                        isCheck = true;\n                        const getEnum = ftch.match(/\\`(.*?)\\`/g);\n\n                        const enumList = [];\n                        getEnum.forEach((item, index) => {\n                          if (index !== 0) {\n                            enumList.push(item.replaceAll(\"`\", \"\"));\n                          }\n                        });\n                        uS(argName, \"enum\", enumList);\n                      }\n                      if (ftch.includes(\"missing field\")) {\n                        uS(argName, typeItem.type, typeItem.value);\n                      }\n\n                      if (ftch.includes(\"attached deposit\")) {\n                        uS(argName, typeItem.type, typeItem.value);\n                        abiMethod[fIndex].kind = \"call\";\n                        abiMethod[fIndex].deposit = parseInt(\n                          strErr.match(/\\d+/)[0]\n                        );\n                        State.update({ cMethod: abiMethod });\n                        clearAsyncInterval(getArg);\n                      }\n                    } else {\n                      uS(argName, typeItem.type, typeItem.value);\n                      clearAsyncInterval(getArg);\n                    }\n                  });\n                }\n              });\n            }\n            if (res.body.result.result) {\n              clearAsyncInterval(getArg);\n            }\n            if (strErr) {\n              if (strErr.includes(\"Invalid register\")) {\n                abiMethod[fIndex].kind = \"call\";\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"not implemented\")) {\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"Option::unwrap()`\")) {\n                abiMethod[fIndex].kind = \"call\";\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"been initialized\")) {\n                abiMethod[fIndex].kind = \"call\";\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"No token\")) {\n                abiMethod[fIndex].kind = \"call\";\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"MethodNotFound\")) {\n                clearAsyncInterval(getArg);\n              }\n              if (\n                strErr.includes(\"storage_write\") ||\n                strErr.includes(\"predecessor_account_id\")\n              ) {\n                abiMethod[fIndex].kind = \"call\";\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"attached deposit\")) {\n                abiMethod[fIndex].kind = \"call\";\n                abiMethod[fIndex].deposit = parseInt(strErr.match(/\\d+/)[0]);\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n\n              if (strErr.includes(\"assertion failed: `(left == right)\")) {\n                abiMethod[fIndex].kind = \"call\";\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n              if (strErr.includes(\"valid type: sequence, expected u64\")) {\n                abiMethod[fIndex].params.arg = 0;\n                State.update({ cMethod: abiMethod });\n                clearAsyncInterval(getArg);\n              }\n            }\n          });\n          countLoop++;\n          if (countLoop == 20) {\n            clearAsyncInterval(getArg);\n          }\n          State.update({\n            messProccses: `Scanning Method : \"${fName}\"`,\n          });\n        }, 1000);\n      }\n    })\n    .catch((err) => {\n      if (err) {\n        State.update({\n          endprocess: state.endprocess++,\n        });\n      }\n    });\n};\nconst cCSS = (e) => {\n  State.update({ cssStyle: e.target.value });\n};\n\nconst onBtnClickCall = (functions, action) => {\n  const argMap = functions.params.args.map(({ name, value }) => ({\n    [name]: value,\n  }));\n  const args = {};\n  argMap.forEach((item) => {\n    Object.assign(args, item);\n  });\n  if (action === \"view\") {\n    asyncFetch(state.rpcUrl, {\n      body: JSON.stringify({\n        method: \"query\",\n        params: {\n          request_type: \"call_function\",\n          account_id: state.contractAddress,\n          method_name: functions.name,\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\n          finality: \"final\",\n        },\n        id: 154,\n        jsonrpc: \"2.0\",\n      }),\n      headers: header,\n      method: \"POST\",\n    }).then((res) => {\n      const resb = res.body.result;\n      if (resb.result) {\n        const result = new Buffer.from(resb.result).toString();\n        State.update({\n          res: {\n            [functions.name]: { value: result, error: false },\n          },\n        });\n      }\n      if (resb.error) {\n        const error = resb.error;\n        State.update({\n          res: {\n            [functions.name]: { value: error, error: true },\n          },\n        });\n      }\n    });\n  }\n  if (action === \"call\") {\n    if (functions.deposit == 0 && functions.gas == 30000000000000) {\n      Near.call(state.contractAddress, functions.name, args);\n    }\n    if (functions.deposit > 0 || functions.gas > 30000000000000) {\n      Near.call(\n        state.contractAddress,\n        functions.name,\n        args,\n        functions.gasUnit == \"near\"\n          ? functions.gas * Math.pow(10, 24)\n          : functions.gas,\n        functions.depositUnit == \"near\"\n          ? functions.deposit * Math.pow(10, 24)\n          : functions.deposit\n      );\n    }\n  }\n};\nreturn (\n  <>\n    <div class=\"container border rounded p-3 border-2\">\n      <h3 class=\"text-center\">Contract</h3>\n      <div class=\"row mb-3\">\n        <div class=\"form-group col-md-10\">\n          <h6 class=\"mb-2\">Contract Address</h6>\n          <input\n            class=\"form-control\"\n            defaultValue={state.contractAddress}\n            placeholder=\"Contract Address\"\n            onBlur={(e) => cFunc(e, \"address\")}\n          />\n        </div>\n        <div class=\"form-group col-md-2\">\n          <label></label>\n          <button\n            onClick={getMethodFromSource}\n            class=\"btn btn-dark form-control \"\n            disabled={(state.endprocess / state.totalProcess) * 100 < 100}\n          >\n            \ud83e\uddd9\ud83c\udffb Scan\n          </button>\n        </div>\n      </div>\n      {state.totalProcess > 0 && (\n        <div class=\"row\">\n          <div class=\"form-group col-md-12\">\n            <div class=\"progress\">\n              <div\n                className={`progress-bar progress-bar-striped ${\n                  state.totalProcess > 0 &&\n                  (state.endprocess / state.totalProcess) * 100 < 100\n                    ? \"progress-bar-animated\"\n                    : \"bg-success\"\n                }  ${\n                  (state.endprocess / state.totalProcess) * 100 == 100\n                    ? \"bg-success\"\n                    : \"\"\n                }`}\n                role=\"progressbar\"\n                aria-valuenow=\"75\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                style={{\n                  width: `${(state.endprocess / state.totalProcess) * 100}%`,\n                }}\n              >\n                {Math.round((state.endprocess / state.totalProcess) * 100) ==\n                100\n                  ? \"Scan completed\"\n                  : state.messProccses}\n                {Math.round((state.endprocess / state.totalProcess) * 100)} % -\n                ({state.endprocess < 0 ? 0 : state.endprocess}/\n                {state.totalProcess})\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div class=\"row\">\n        <div class=\"form-group col-md-3\">\n          <label></label>\n          <button\n            class=\"btn btn-primary form-control \"\n            data-bs-toggle=\"modal\"\n            data-bs-target={`#show-method`}\n            class=\"btn btn-primary form-control \"\n          >\n            Filter\n          </button>\n          <div\n            class=\"modal fade\"\n            id={`show-method`}\n            tabindex=\"-2\"\n            aria-labelledby=\"showLabel\"\n            aria-hidden=\"true\"\n          >\n            <div class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                  <h1 class=\"modal-title fs-5\" id=\"showLabel\">\n                    Choose Method to Show\n                  </h1>\n                  <button\n                    type=\"button\"\n                    class=\"btn-close\"\n                    data-bs-dismiss=\"modal\"\n                    aria-label=\"Close\"\n                  ></button>\n                </div>\n                <div class=\"modal-body\">\n                  {state.cMethod &&\n                    state.cMethod\n                      .filter((functions) => functions.kind)\n                      .map((functions, fIndex) => (\n                        <div class=\"form-check form-switch\">\n                          <input\n                            class=\"form-check-input\"\n                            type=\"checkbox\"\n                            role=\"switch\"\n                            checked={functions.export}\n                            onChange={() => onSwitchChangeArgExport(fIndex)}\n                          />\n                          <label\n                            class=\"form-check-label\"\n                            for={`flexSwitcFilter${fIndex}`}\n                          >\n                            {functions.name}\n                          </label>\n                        </div>\n                      ))}\n                </div>\n                <div class=\"modal-footer\">\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-secondary\"\n                    data-bs-dismiss=\"modal\"\n                  >\n                    Close\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    disabled={state.clicked}\n                    onClick={closeAll}\n                    class=\"btn btn-primary\"\n                  >\n                    Close all\n                  </button>\n                  <button\n                    type=\"button\"\n                    disabled={state.clicked}\n                    onClick={selectAll}\n                    class=\"btn btn-success\"\n                  >\n                    Select all\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group col-md-3\">\n          {state.cMethod.length > 0 ? (\n            <Widget\n              src={`${cep}/widget/save-client-button`}\n              props={saveClientConfig}\n            />\n          ) : (\n            <>\n              <label></label>\n              <button class=\"btn btn-primary form-control \">\n                \u2795 Save Client\n              </button>\n            </>\n          )}\n        </div>\n\n        <div class=\"form-group col-md-3\">\n          {state && state.cMethod.length > 0 ? (\n            <Widget src={`${cep}/widget/preview-button`} props={state} />\n          ) : (\n            <>\n              <label></label>\n              <button class=\"btn btn-primary form-control \">\ud83d\udc40 Preview</button>\n            </>\n          )}\n        </div>\n        <div class=\"form-group col-md-3\">\n          {state && state.cMethod.length > 0 ? (\n            <Widget src={`${cep}/widget/export-button`} props={state} />\n          ) : (\n            <>\n              <label></label>\n              <button class=\"btn btn-primary form-control \">\ud83d\udd3c Export</button>\n            </>\n          )}\n        </div>\n      </div>\n      {state.cMerr && (\n        <p class=\"text-danger\" role=\"alert\">\n          {state.cMerr}\n        </p>\n      )}\n    </div>\n    <br />\n    <div class=\"row mb-4\">\n      <div class=\"form-group col-md-2\">\n        <div class=\"form-check form-switch\">\n          <label class=\"form-check-label\" for=\"flexSwitchCheckDesginMode\">\n            Design\n          </label>\n          <input\n            checked={state.designMode}\n            role=\"switch\"\n            onChange={onSwitchChangeDesignMode}\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            id=\"flexSwitchCheckDesginMode\"\n          />\n        </div>\n      </div>\n    </div>\n\n    {state.designMode && (\n      <div class=\"container border rounded p-3 border-2 mb-3\">\n        <div class=\"row \">\n          <div class=\"form-group col-md-9 \">\n            <h6 class=\"mb-2\">Type your prompt : </h6>\n            <input\n              class=\"form-control\"\n              defaultValue={state.prompt}\n              placeholder=\"I want to create a modern style Christmas vibe frontend with gradient background\"\n              onBlur={(e) => cPrompt(e)}\n            />\n          </div>\n          <div class=\"form-group col-md-3\">\n            <label></label>\n            <button\n              disabled={state.promptLoading}\n              onClick={getPrompt}\n              class=\"btn btn-success form-control \"\n            >\n              {state.promptLoading ? promptLoadingUI : \"\ud83e\ude84\"} Magic Style\n            </button>\n            {state.openModalCSS && (\n              <>\n                <div\n                  style={{ display: \"block\" }}\n                  className={`modal fade show`}\n                  id=\"showCSS\"\n                  tabindex=\"-1\"\n                  aria-labelledby=\"showCSSLabel\"\n                >\n                  <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                      <div class=\"modal-header\">\n                        <h1 class=\"modal-title fs-5\" id=\"showCSSLabel\">\n                          CSS View\n                        </h1>\n                        <button\n                          type=\"button\"\n                          class=\"btn-close\"\n                          onClick={(e) => openModalCSS(e, \"close\")}\n                        ></button>\n                      </div>\n                      <div class=\"modal-body\">\n                        <textarea\n                          style={{ height: \"500px\" }}\n                          class=\"form-control\"\n                          defaultValue={state.cssStyle}\n                          onBlur={(e) => cCSS(e)}\n                        ></textarea>\n                      </div>\n                      <div class=\"modal-footer\">\n                        <button\n                          type=\"button\"\n                          class=\"btn btn-secondary\"\n                          onClick={(e) => openModalCSS(e, \"close\")}\n                        >\n                          Close\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={(e) => {\n                            openModalCSS(e, \"close\");\n                          }}\n                          class=\"btn btn-primary\"\n                        >\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"modal-backdrop fade show\"></div>\n              </>\n            )}\n            {state.openModalPreview && state.cMethod.length > 0 && (\n              <>\n                <div\n                  style={{ display: \"block\" }}\n                  className={`modal fade show`}\n                  id=\"openModalPreview\"\n                  tabindex=\"-1\"\n                  aria-labelledby=\"openModalPreviewLabel\"\n                >\n                  <div class=\"modal-dialog modal-lg\">\n                    <div class=\"modal-content\">\n                      <div class=\"modal-header\">\n                        <h1 class=\"modal-title fs-5\" id=\"showCSSLabel\">\n                          Frontend Preview\n                        </h1>\n                        <button\n                          type=\"button\"\n                          class=\"btn-close\"\n                          onClick={(e) => openModalPreview(\"close\")}\n                        ></button>\n                      </div>\n                      <div class=\"modal-body\">\n                        {state.cMethod.length > 0 && (\n                          <Widget src={`${cep}/widget/preview`} props={state} />\n                        )}\n                      </div>\n                      <div class=\"modal-footer\">\n                        <button\n                          type=\"button\"\n                          class=\"btn btn-secondary\"\n                          onClick={(e) => openModalPreview(\"close\")}\n                        >\n                          Close\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={(e) => {\n                            openModalPreview(\"close\");\n                          }}\n                          class=\"btn btn-primary\"\n                        >\n                          Save\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"modal-backdrop fade show\"></div>\n              </>\n            )}\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"form-group col-md-4\"></div>\n          <div class=\"form-group col-md-4\">\n            <label></label>\n            <button\n              class=\"btn btn-primary form-control \"\n              onClick={(e) => {\n                openModalCSS(e, \"show\");\n              }}\n            >\n              Custom CSS\n            </button>\n          </div>\n          <div class=\"form-group col-md-4\"></div>\n        </div>\n      </div>\n    )}\n    {!state.designMode && (\n      <div class=\"row mb-4\">\n        <div class=\"form-group col-md-4\">\n          <h6>Method Name</h6>\n          <input\n            type=\"text\"\n            onBlur={(e) => cFunc(e, \"name\")}\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-md-4\">\n          <h6>Label</h6>\n          <input\n            type=\"text\"\n            onBlur={(e) => cFunc(e, \"label\")}\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-md-2\">\n          <h6>Action</h6>\n          <select class=\"form-control\" onChange={(e) => cFunc(e, \"action\")}>\n            <option value=\"view\" selected>\n              View\n            </option>\n            <option value=\"call\">Call</option>\n          </select>\n        </div>\n        <div class=\"form-group col-md-2\">\n          <label></label>\n          <button\n            onClick={onCreateMethod}\n            class=\"btn btn-primary form-control \"\n          >\n            Create\n          </button>\n        </div>\n      </div>\n    )}\n\n    {state.cMethod &&\n      state.cMethod\n        .filter((functions) => functions.export == true)\n        .map((functions, fIndex) => (\n          <div class=\"card mt-2\">\n            <div class=\"card-header\">\n              <div class=\"container\">\n                <div class=\"row\">\n                  <div class=\"col-sm-8 pt-3\">\n                    <h6>\n                      {functions.name}\n                      <span class=\"text-info\">\n                        {\"[Custom-Method-Params-Label-Button-Style]\"}\n                      </span>\n                    </h6>\n                  </div>\n                  <div class=\"col-sm-4 text-end pt-2\">\n                    <button\n                      type=\"button\"\n                      onClick={(e) => cMLabel(e, functions, \"remove\")}\n                      class=\"btn-close\"\n                    ></button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"container mb-3\">\n                <div class=\"row mb-3\">\n                  {state.designMode && (\n                    <div class=\"form-group col-md-8\">\n                      <div class=\"form-group row mb-2\">\n                        <h6 class=\"col-sm-4 col-form-label\">Method Label</h6>\n                        <div class=\"col-sm-6\">\n                          <input\n                            placeholder=\"Method Label\"\n                            class=\"form-control\"\n                            defaultValue={functions.label || \"\"}\n                            onBlur={(e) => cMLabel(e, functions, \"method\")}\n                          />\n                        </div>\n                      </div>\n                      <div class=\"form-group row\">\n                        <h6 class=\"col-sm-4 col-form-label\">Method Class</h6>\n                        <div class=\"col-sm-6\">\n                          <input\n                            placeholder=\"Boostrap Class\"\n                            class=\"form-control\"\n                            defaultValue={functions.className || \"\"}\n                            onBlur={(e) => cMLabel(e, functions, \"className\")}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {state.designMode && <hr />}\n                <div class=\"row\">\n                  <div\n                    className={`form-group col-md-${\n                      state.designMode ? \"2\" : \"4\"\n                    }`}\n                  >\n                    <h6>Arguments</h6>\n                  </div>\n                  <div class=\"form-group col-md-2\">\n                    <h6>Type</h6>\n                  </div>\n                  <div\n                    className={`form-group col-md-${\n                      state.designMode ? \"3\" : \"3\"\n                    }`}\n                  >\n                    <h6>Value</h6>\n                  </div>\n                  {state.designMode && (\n                    <div class=\"form-group col-md-2\">\n                      <h6>Label</h6>\n                    </div>\n                  )}\n\n                  <div class=\"form-group col-md-1\">\n                    <button\n                      class=\"btn btn-secondary btn-sm\"\n                      onClick={(e) => onCreateArgs(functions.name)}\n                    >\n                      Add\n                    </button>\n                  </div>\n                  <div class=\"form-group col-md-2\">\n                    <button\n                      class=\"btn btn-secondary btn-sm\"\n                      onClick={(e) => getArgsFromMethod(functions.name, fIndex)}\n                    >\n                      Detect\n                    </button>\n                  </div>\n                </div>\n              </div>\n              {functions.params.args &&\n                functions.params.args.map((args, argIndex) => {\n                  return (\n                    <div class=\"container pb-2\">\n                      <div class=\"row\">\n                        <div\n                          className={`form-group col-md-${\n                            state.designMode ? \"2\" : \"4\"\n                          }`}\n                        >\n                          <input\n                            placeholder=\"Name\"\n                            class=\"form-control\"\n                            defaultValue={args.name || \"\"}\n                            onBlur={(e) => cAD(e, functions, argIndex, \"name\")}\n                          />\n                        </div>\n\n                        <div class=\"form-group col-md-2\">\n                          <select\n                            value={args.type_schema.type}\n                            defaultValue={args.type_schema.type}\n                            class=\"form-control\"\n                            onChange={(e) =>\n                              cAD(e, functions, argIndex, \"type\")\n                            }\n                          >\n                            <option value=\"string\">String</option>\n                            <option value=\"integer\">Number</option>\n                            <option value=\"enum\">Enum</option>\n                            <option value=\"boolean\">Boolean</option>\n                            <option value=\"json\">Json</option>\n                            <option value=\"array\">Array</option>\n                            <option value=\"$ref\">AccountID</option>\n                          </select>\n                        </div>\n                        <div\n                          className={`form-group col-md-${\n                            state.designMode ? \"3\" : \"4\"\n                          }`}\n                        >\n                          {args.type_schema.type == \"string\" ||\n                          args.type_schema.type == \"$ref\" ||\n                          args.type_schema.type == \"integer\" ||\n                          args.type_schema.type == \"json\" ||\n                          args.type_schema.type == \"array\" ? (\n                            <input\n                              onBlur={(e) =>\n                                cAD(e, functions, argIndex, \"value\")\n                              }\n                              defaultValue={args.value || \"\"}\n                              class=\"form-control\"\n                              type=\"string\"\n                              placeholder=\"Argument value\"\n                            />\n                          ) : (\n                            \"\"\n                          )}\n                          {args.type_schema.type == \"boolean\" ? (\n                            <select\n                              defaultValue={args.value}\n                              class=\"form-control\"\n                              onChange={(e) =>\n                                cAD(e, functions, argIndex, \"value\")\n                              }\n                            >\n                              <option value=\"true\">True</option>\n                              <option value=\"false\">False</option>\n                            </select>\n                          ) : (\n                            \"\"\n                          )}\n                          {args.type_schema.type == \"enum\" ? (\n                            <select\n                              defaultValue={args.value}\n                              class=\"form-control\"\n                              onChange={(e) =>\n                                cAD(e, functions, argIndex, \"value\")\n                              }\n                            >\n                              {args.enum &&\n                                args.enum.map((item, i) => (\n                                  <option value={item}>{item}</option>\n                                ))}\n                            </select>\n                          ) : (\n                            \"\"\n                          )}\n                        </div>\n                        {state.designMode && (\n                          <>\n                            <div class=\"form-group col-md-2\">\n                              <input\n                                placeholder=\"Label\"\n                                class=\"form-control\"\n                                defaultValue={args.label || \"\"}\n                                onBlur={(e) =>\n                                  cAD(e, functions, argIndex, \"label\")\n                                }\n                              />\n                            </div>\n                            <div class=\"form-group col-md-2\">\n                              <input\n                                placeholder=\"Boostrap Class\"\n                                class=\"form-control\"\n                                defaultValue={args.className || \"\"}\n                                onBlur={(e) =>\n                                  cAD(e, functions, argIndex, \"className\")\n                                }\n                              />\n                            </div>\n                          </>\n                        )}\n\n                        <div class=\"form-group col-md-1\">\n                          <button\n                            type=\"button\"\n                            onClick={(e) =>\n                              cAD(e, functions, argIndex, \"remove\")\n                            }\n                            class=\"btn btn-danger btn-sm\"\n                          >\n                            <i class=\"bi bi-trash\"></i>\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n\n              {functions.kind == \"call\" ? (\n                <>\n                  <div class=\"container pb-1 pt-3\">\n                    <hr />\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-12\">\n                        <h6>Options</h6>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"container\">\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-6\">\n                        <label>Attached deposit</label>\n                        <div class=\"input-group mb-3\">\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            defaultValue={\"\" + functions.deposit.toString()}\n                            onBlur={(e) => cMLabel(e, functions, \"deposit\")}\n                            class=\"form-control \"\n                          />\n                          <select\n                            class=\"form-select\"\n                            defaultValue={functions.depositUnit}\n                            onChange={(e) =>\n                              cMLabel(e, functions, \"depositUnit\")\n                            }\n                          >\n                            <option value=\"near\">Near</option>\n                            <option value=\"yoctoNEAR\">yoctoNEAR</option>\n                          </select>\n                        </div>\n\n                        {state.designMode && (\n                          <>\n                            <div class=\"form-check\">\n                              <input\n                                class=\"form-check-input\"\n                                type=\"checkbox\"\n                                checked={functions.selfInputDeposit}\n                                onChange={(e) =>\n                                  cMLabel(e, functions, \"selfInputDeposit\")\n                                }\n                                id={`flexCheckDefault-${functions.name}`}\n                              />\n                              <label\n                                class=\"form-check-label\"\n                                for={`flexCheckDefault-${functions.name}`}\n                              >\n                                Self-Input\n                              </label>\n                            </div>\n\n                            <div class=\"input-group mb-3\">\n                              <span\n                                class=\"input-group-text\"\n                                id={`label-deposit-${functions.name}`}\n                              >\n                                Label Deposit\n                              </span>\n                              <input\n                                type=\"text\"\n                                class=\"form-control\"\n                                defaultValue={functions.labelDeposit}\n                                placeholder=\"Label Deposit\"\n                                aria-label=\"Label Deposit\"\n                                onBlur={(e) =>\n                                  cMLabel(e, functions, \"labelDeposit\")\n                                }\n                                aria-describedby={`label-deposit-${functions.name}`}\n                              />\n                            </div>\n                          </>\n                        )}\n                      </div>\n                      <div class=\"form-group col-md-6\">\n                        <label>Gas</label>\n                        <div class=\"input-group mb-3\">\n                          <input\n                            type=\"number\"\n                            min=\"0\"\n                            defaultValue={\"\" + functions.gas}\n                            onBlur={(e) => cMLabel(e, functions, \"gas\")}\n                            class=\"form-control\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                \"\"\n              )}\n              {state.res[functions.name] && state.res[functions.name] ? (\n                <div\n                  className={\n                    state.res[functions.name].error\n                      ? \"alert  alert-danger\"\n                      : \"alert  alert-success\"\n                  }\n                  role=\"alert\"\n                >\n                  <pre>\n                    {JSON.stringify(\n                      JSON.parse(state.res[functions.name].value),\n                      null,\n                      2\n                    )}\n                  </pre>\n                  <button\n                    class=\"btn btn-dark btn-sm mt-2\"\n                    onClick={() => {\n                      clipboard.writeText(state.res[functions.name].value);\n                    }}\n                  >\n                    Copy\n                  </button>\n                </div>\n              ) : (\n                \"\"\n              )}\n              <div class=\"container pt-3\">\n                <div class=\"row\">\n                  <div class=\"form-group col-md-2\">\n                    <h6>Button</h6>\n                  </div>\n                  {state.designMode && (\n                    <>\n                      <div class=\"form-group col-md-4\">\n                        <h6>Button Label </h6>\n                      </div>\n                      <div class=\"form-group col-md-4\">\n                        <h6>Button Class</h6>\n                      </div>\n                    </>\n                  )}\n                  <div class=\"form-group col-md-2\"></div>\n                </div>\n              </div>\n              <div class=\"container pb-2\">\n                <div class=\"row\">\n                  <div class=\"form-group col-md-2\">\n                    <button\n                      class=\"btn btn-primary \"\n                      onClick={(e) => onBtnClickCall(functions, functions.kind)}\n                    >\n                      {functions.kind == \"view\" ? \"View\" : \"Call\"}\n                    </button>\n                  </div>\n                  {state.designMode && (\n                    <>\n                      <div class=\"form-group col-md-4\">\n                        <input\n                          placeholder=\"Button Label\"\n                          class=\"form-control\"\n                          defaultValue={functions.button || \"\"}\n                          onBlur={(e) => cMLabel(e, functions, \"button\")}\n                        />\n                      </div>\n                      <div class=\"form-group col-md-4\">\n                        <input\n                          placeholder=\"Boostrap Class\"\n                          class=\"form-control\"\n                          defaultValue={functions.classButton || \"\"}\n                          onBlur={(e) => cMLabel(e, functions, \"classButton\")}\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  <div class=\"form-group col-md-2\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/builder", "fact_widget_deployments_id": "2318cf1bfd36d7aad9315771a096697d", "inserted_timestamp": "2023-11-15T20:32:22.381Z", "modified_timestamp": "2023-11-15T20:32:22.381Z", "__row_index": 0}