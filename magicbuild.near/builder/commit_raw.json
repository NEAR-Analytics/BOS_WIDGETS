{"tx_hash": "L8RsxGFBBZsHpjw2ytLE68CNqjEb4gsfdyFYukVTyGn", "action_id_social": "6dGP81uGGMc1QyVj5QeabSzC6oWUZcDpCjqJKLWKpY4n-0-widget", "block_id": 104044462, "block_timestamp": "2023-10-23T17:13:56.893Z", "signer_id": "magicbuild.near", "widget_name": "builder", "source_code": "State.init({\r\n  id: props.id ? props.id : null,\r\n  contractAddress: props.address ? props.address : \"\",\r\n  cMethod: props.abi.body.functions ? props.abi.body.functions : [],\r\n  rpcUrl: \"https://rpc.near.org/\",\r\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\",\r\n  nearBlockRpc: \"https://api.nearblocks.io/\",\r\n  fName,\r\n  fAction: \"view\",\r\n  fLabel,\r\n  cMerr,\r\n  res,\r\n  cAerr,\r\n});\r\nconst header = {\r\n  \"Content-Type\": \"application/json\",\r\n};\r\nconst opGet = {\r\n  headers: header,\r\n  method: \"GET\",\r\n};\r\nconst asyncIntervals = [];\r\n\r\nconst runAsyncInterval = (cb, interval, intervalIndex) => {\r\n  cb();\r\n  if (asyncIntervals[intervalIndex].run) {\r\n    asyncIntervals[intervalIndex].id = setTimeout(\r\n      () => runAsyncInterval(cb, interval, intervalIndex),\r\n      interval\r\n    );\r\n  }\r\n};\r\nconst setAsyncInterval = (cb, interval) => {\r\n  if (cb && typeof cb === \"function\") {\r\n    const intervalIndex = asyncIntervals.length;\r\n    asyncIntervals.push({ run: true, id: id });\r\n    runAsyncInterval(cb, interval, intervalIndex);\r\n    return intervalIndex;\r\n  } else {\r\n    throw new Error(\"Callback must be a function\");\r\n  }\r\n};\r\nconst clearAsyncInterval = (intervalIndex) => {\r\n  if (asyncIntervals[intervalIndex].run) {\r\n    clearTimeout(asyncIntervals[intervalIndex].id);\r\n    asyncIntervals[intervalIndex].run = false;\r\n  }\r\n};\r\nconst cFunc = (e, type) => {\r\n  const data = e.target.value;\r\n  if (type == \"name\") State.update({ fName: data });\r\n  if (type == \"label\") State.update({ fLabel: data });\r\n  if (type == \"action\") State.update({ fAction: data });\r\n  if (type == \"address\") State.update({ contractAddress: data.toLowerCase() });\r\n};\r\nconst cep = \"magicbuild.near\";\r\nconst onCreateArgs = (fName, fIndex) => {\r\n  State.update({ cAerr: { [fName]: null } });\r\n  const arg = {\r\n    name: \"\",\r\n    label: \"\",\r\n    type_schema: {\r\n      type: \"string\",\r\n    },\r\n    value: \"\",\r\n  };\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args.push(arg);\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst cMLabel = (e, fIdx, type) => {\r\n  const value = e.target.value;\r\n  const a = state.cMethod;\r\n  if (type == \"method\") a[fIdx].label = value;\r\n  if (type == \"button\") a[fIdx].button = value;\r\n  if (type == \"gas\") a[fIdx].gas = parseInt(value);\r\n  if (type == \"deposit\") a[fIdx].deposit = parseInt(value);\r\n  if (type == \"remove\") a.splice(fIdx, 1);\r\n  State.update({ cMethod: a });\r\n};\r\nconst cAD = (e, fIdx, aIdx, type) => {\r\n  const value = e.target.value;\r\n  const a = state.cMethod;\r\n  if (type == \"name\") a[fIdx].params.args[aIdx].name = value;\r\n  if (type == \"label\") a[fIdx].params.args[aIdx].label = value;\r\n  if (type == \"type\") a[fIdx].params.args[aIdx].type_schema.type = value;\r\n  if (type == \"value\") {\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"integer\") {\r\n      a[fIdx].params.args[aIdx].value = parseInt(value);\r\n    }\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"array\") {\r\n      a[fIdx].params.args[aIdx].value = value.split(\"|\"); //check valid\r\n    }\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"boolean\") {\r\n      a[fIdx].params.args[aIdx].value = Boolean(value);\r\n    }\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"json\") {\r\n      a[fIdx].params.args[aIdx].value = JSON.parse(value); //check valid\r\n    }\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"string\") {\r\n      a[fIdx].params.args[aIdx].value = value; //check valid\r\n    }\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"enum\") {\r\n      a[fIdx].params.args[aIdx].value = value; //check valid\r\n    }\r\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"$ref\") {\r\n      a[fIdx].params.args[aIdx].value = value; //check account valid\r\n    }\r\n  }\r\n  if (type == \"remove\") a[fIdx].params.args.splice(aIdx, 1);\r\n  State.update({ cMethod: a });\r\n};\r\nconst onCreateMethod = () => {\r\n  if (state.fName.length > 0) {\r\n    State.update({ cMerr: null });\r\n    const method = {\r\n      name: state.fName,\r\n      kind: state.fAction,\r\n      label: state.fLabel,\r\n      button: \"\",\r\n      export: true,\r\n      params: {\r\n        serialization_type: \"json\",\r\n        args: [],\r\n      },\r\n      deposit: 0,\r\n      gas: 30000000000000,\r\n    };\r\n    const abiMethod = state.cMethod;\r\n    const isExistFunction = false;\r\n    abiMethod.forEach((item) => {\r\n      if (item.name == state.fName) {\r\n        isExistFunction = true;\r\n      }\r\n    });\r\n    if (!isExistFunction) {\r\n      abiMethod.push(method);\r\n      State.update({ cMethod: abiMethod });\r\n    } else {\r\n      State.update({ cMerr: \"Method Exist!\" });\r\n    }\r\n  } else {\r\n    State.update({ cMerr: \"Please Input Method Name!\" });\r\n  }\r\n};\r\nconst getMethodFromSource = () => {\r\n  State.update({ cMerr: null, cMethod: [] });\r\n  asyncFetch(state.rpcUrl, {\r\n    body: JSON.stringify({\r\n      method: \"query\",\r\n      params: {\r\n        request_type: \"view_code\",\r\n        account_id: state.contractAddress,\r\n        finality: \"final\",\r\n      },\r\n      id: 154,\r\n      jsonrpc: \"2.0\",\r\n    }),\r\n    headers: header,\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    let abiMethod = [];\r\n    const resb = res.body;\r\n    if (resb.result) {\r\n      const data = Buffer(resb.result.code_base64, \"base64\").toString(\"ascii\");\r\n      const fist = data.indexOf(\"memory\u0002\");\r\n      let second =\r\n        data.indexOf(\"__data_end\") !== -1\r\n          ? data.indexOf(\"__data_end\")\r\n          : data.indexOf(\"\u0003P]\");\r\n      if (fist !== -1 && second !== -1) {\r\n        const functionsData = data\r\n          .substring(fist, second)\r\n          .replace(/[^\\w ]/g, \" \")\r\n          .split(\" \");\r\n        const filterFunction = [];\r\n        functionsData.forEach((item, index) => {\r\n          if (index > 0 && item.length > 1) {\r\n            if (\r\n              !/^[A-Z]+(?:_[A-Z]+)*$/m.test(item) &&\r\n              !/^[0-9]*$/.test(string)\r\n            ) {\r\n              filterFunction.push(item);\r\n            }\r\n          }\r\n        });\r\n        filterFunction.forEach((item) => {\r\n          const res = fetch(\r\n            `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${item}&order=desc&page=1&per_page=25`,\r\n            opGet\r\n          );\r\n          const method = {\r\n            name: item,\r\n            kind: \"view\",\r\n            export: true,\r\n            params: {\r\n              serialization_type: \"json\",\r\n              args: [],\r\n            },\r\n            deposit: 0,\r\n            gas: 30000000000000,\r\n          };\r\n          if (res.body.txns.length > 0) {\r\n            const isScs = false;\r\n            res.body.txns.forEach((item) => {\r\n              if (item.outcomes.status) {\r\n                isScs = true;\r\n              }\r\n            });\r\n            if (isScs) {\r\n              method.kind = \"call\";\r\n            }\r\n          }\r\n          abiMethod.push(method);\r\n        });\r\n\r\n        State.update({ cMethod: abiMethod });\r\n        abiMethod.forEach((item, index) => {\r\n          getArgsFromMethod(item.name, index);\r\n        });\r\n      } else {\r\n        State.update({ cMerr: \"Unable to detect Method!\" });\r\n      }\r\n    } else {\r\n      State.update({ cMerr: \"Unable to detect Method!\" });\r\n    }\r\n  });\r\n};\r\nconst getArgsFromMethod = (fName, fIndex) => {\r\n  asyncFetch(\r\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${fName}&order=desc&page=1&per_page=1`,\r\n    opGet\r\n  ).then((res) => {\r\n    const restxns = res.body.txns[0];\r\n    if (restxns.outcomes.status && restxns.logs.length > 0) {\r\n      const argsData = JSON.parse(\r\n        restxns.logs[0].replace(\"EVENT_JSON:\", \"\").replaceAll(\"\\\\\", \"\")\r\n      );\r\n      const args = argsData.data[0] || argsData;\r\n      if (Object.keys(args).length > 0) {\r\n        const abiMethod = state.cMethod;\r\n        abiMethod[fIndex].params.args = [];\r\n        Object.keys(args).forEach((item) => {\r\n          const arg = {\r\n            name: item,\r\n            type_schema: {\r\n              type:\r\n                typeof args[item] == \"number\"\r\n                  ? \"integer\"\r\n                  : typeof args[item] == \"object\"\r\n                  ? \"json\"\r\n                  : typeof args[item],\r\n            },\r\n            value: \"\",\r\n          };\r\n          abiMethod[fIndex].kind = \"call\";\r\n          abiMethod[fIndex].params.args.push(arg);\r\n          State.update({ cMethod: abiMethod });\r\n        });\r\n      }\r\n    } else {\r\n      const getArg = setInterval(() => {\r\n        const abiMethod = state.cMethod;\r\n        const argsArr = abiMethod[fIndex].params.args;\r\n        const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\r\n        const args = {};\r\n        argMap.forEach((item) => {\r\n          Object.assign(args, item);\r\n        });\r\n\r\n        asyncFetch(state.rpcUrl, {\r\n          body: JSON.stringify({\r\n            method: \"query\",\r\n            params: {\r\n              request_type: \"call_function\",\r\n              account_id: state.contractAddress,\r\n              method_name: fName,\r\n              args_base64: new Buffer.from(JSON.stringify(args)).toString(\r\n                \"base64\"\r\n              ),\r\n              finality: \"final\",\r\n            },\r\n            id: 154,\r\n            jsonrpc: \"2.0\",\r\n          }),\r\n          headers: header,\r\n          method: \"POST\",\r\n        }).then((res) => {\r\n          const strErr = res.body.result.error;\r\n          if (strErr && strErr.includes(\"missing field\")) {\r\n            const argName = strErr.substring(\r\n              strErr.indexOf(\"`\") + 1,\r\n              strErr.lastIndexOf(\"`\")\r\n            );\r\n            const checkType = [\r\n              { value: \"\", type: \"string\" },\r\n              // { value: \"300\", type: \"string\" },\r\n              { value: 0, type: \"integer\" },\r\n              { value: [], type: \"array\" },\r\n              { value: true, type: \"boolean\" },\r\n              { value: {}, type: \"json\" },\r\n              { value: state.contractAddress, type: \"$ref\" },\r\n            ];\r\n            if (argName == \"metadata\") {\r\n              checkType.unshift({\r\n                value: JSON.parse(\r\n                  '{ \"spec\": \"0\",\"name\": \"check\", \"symbol\": \"check\" }'\r\n                ),\r\n                type: \"json\",\r\n              });\r\n            }\r\n            const isCheck = false;\r\n            checkType.forEach((typeItem) => {\r\n              if (isCheck == false) {\r\n                asyncFetch(state.rpcUrl, {\r\n                  body: JSON.stringify({\r\n                    method: \"query\",\r\n                    params: {\r\n                      request_type: \"call_function\",\r\n                      account_id: state.contractAddress,\r\n                      method_name: fName,\r\n                      args_base64: new Buffer.from(\r\n                        JSON.stringify({\r\n                          [argName]: typeItem.value,\r\n                        })\r\n                      ).toString(\"base64\"),\r\n                      finality: \"final\",\r\n                    },\r\n                    id: 154,\r\n                    jsonrpc: \"2.0\",\r\n                  }),\r\n                  headers: header,\r\n                  method: \"POST\",\r\n                }).then((res) => {\r\n                  const uS = (argName, type, value) => {\r\n                    isCheck = true;\r\n                    const arg = {\r\n                      name: argName,\r\n                      type_schema: {\r\n                        type: type,\r\n                      },\r\n                      value: type == \"enum\" ? value[0] : value,\r\n                    };\r\n                    if (type == \"enum\") {\r\n                      arg.enum = value;\r\n                    }\r\n                    const isExist = false;\r\n                    abiMethod[fIndex].params.args.forEach((item) => {\r\n                      if (item.name == argName) {\r\n                        isExist = true;\r\n                      }\r\n                    });\r\n                    if (isExist == false) {\r\n                      abiMethod[fIndex].params.args.push(arg);\r\n                      State.update({ cMethod: abiMethod });\r\n                    }\r\n                  };\r\n                  if (res.body.result.result) {\r\n                    clearInterval(getArg);\r\n                  }\r\n                  const ftch = res.body.result.error;\r\n                  if (ftch) {\r\n                    //invalid token id\r\n                    if (ftch.includes(\"Invalid register\")) {\r\n                      abiMethod[fIndex].kind = \"call\";\r\n                      State.update({ cMethod: abiMethod });\r\n                      clearInterval(getArg);\r\n                    }\r\n                    if (ftch.includes(\"Option::unwrap()`\")) {\r\n                      uS(argName, typeItem.type, typeItem.value);\r\n                      abiMethod[fIndex].kind = \"call\";\r\n                      State.update({ cMethod: abiMethod });\r\n                      clearInterval(getArg);\r\n                    }\r\n                    if (ftch.includes(\"the account ID\")) {\r\n                      uS(argName, \"$ref\", state.contractAddress);\r\n                    }\r\n                    if (ftch.includes(\"invalid type: sequence, expected u64\")) {\r\n                      uS(argName, \"number\", 300);\r\n                    }\r\n                    if (ftch.includes(\"invalid digit found\")) {\r\n                      uS(argName, \"string\", \"300\");\r\n                    }\r\n                    if (\r\n                      ftch.includes(\"invalid type: sequence, expected a string\")\r\n                    ) {\r\n                      uS(argName, \"string\", \"wrap.near\");\r\n                      clearInterval(getArg);\r\n                    }\r\n                    if (\r\n                      ftch.includes(\r\n                        \"data did not match any variant of untagged enum\"\r\n                      )\r\n                    ) {\r\n                      uS(argName, typeItem.type, [\"300\", \"300\"]);\r\n                      clearInterval(getArg);\r\n                    }\r\n                    if (ftch.includes(\"not implemented\")) {\r\n                      uS(argName, typeItem.type, [\"300\", \"300\"]);\r\n                      // clearInterval(getArg);\r\n                    }\r\n                    if (ftch.includes(\"invalid token id\")) {\r\n                      uS(argName, \"$ref\", \"wrap.near\");\r\n                    }\r\n                    if (ftch.includes(\"integer from empty string\")) {\r\n                      uS(argName, typeItem.type, \"300\");\r\n                    }\r\n                    if (ftch.includes(\"unknown variant\")) {\r\n                      isCheck = true;\r\n                      const getEnum = ftch.match(/\\`(.*?)\\`/g);\r\n                      console.log(\"getEnum\", getEnum);\r\n                      const enumList = [];\r\n                      getEnum.forEach((item, index) => {\r\n                        if (index !== 0) {\r\n                          enumList.push(item.replaceAll(\"`\", \"\"));\r\n                        }\r\n                      });\r\n                      console.log(\"enumList\", enumList);\r\n                      //change_state wasm execution failed with error: HostError(GuestPanic { panic_msg: \"panicked at 'Failed to deserialize input from JSON.: Error(\\\"unknown variant `ailedwitherror:HostError(GuestPanic{panic_msg:\\\\\\\"panickedat'FailedtodeserializeinputfromJSON.:Error(\\\\\\\\\\\\\\\"unknownvariantv2.ref-finance.near`, expected `Running` or `Paused`\\\", line: 1, column: 147)', ref-exchange/src/owner.rs:11:1\" })\r\n\r\n                      uS(argName, \"enum\", enumList);\r\n                    }\r\n                    if (ftch.includes(\"missing field\")) {\r\n                      uS(argName, typeItem.type, typeItem.value);\r\n                    }\r\n                    if (ftch.includes(\"Requires attached deposit\")) {\r\n                      uS(argName, typeItem.type, typeItem.value);\r\n                      abiMethod[fIndex].kind = \"call\";\r\n                      abiMethod[fIndex].deposit = parseInt(\r\n                        strErr.match(/\\d+/)[0]\r\n                      );\r\n                      State.update({ cMethod: abiMethod });\r\n                      clearInterval(getArg);\r\n                    }\r\n                  } else {\r\n                    uS(argName, typeItem.type, typeItem.value);\r\n                    clearInterval(getArg);\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n          if (res.body.result.result) {\r\n            clearInterval(getArg);\r\n          }\r\n\r\n          //main.aebf23a2b16652c8ce54.bundle.js:8 magicbuild.near/widget/builder execute_actions wasm execution failed with error: HostError(GuestPanic { panic_msg: \"panicked at 'Failed to deserialize input from JSON.: Error(\\\"missing field `actions`\\\", line: 1, column: 2)', ref-exchange\r\n          if (strErr) {\r\n            if (strErr.includes(\"not implemented\")) {\r\n              console.log(fName, \"not implemented\");\r\n              clearInterval(getArg);\r\n            }\r\n            if (strErr.includes(\"Option::unwrap()`\")) {\r\n              abiMethod[fIndex].kind = \"call\";\r\n              State.update({ cMethod: abiMethod });\r\n              clearInterval(getArg);\r\n            }\r\n            if (strErr.includes(\"been initialized\")) {\r\n              abiMethod[fIndex].kind = \"call\";\r\n              State.update({ cMethod: abiMethod });\r\n              clearInterval(getArg);\r\n            }\r\n            if (strErr.includes(\"No token\")) {\r\n              abiMethod[fIndex].kind = \"call\";\r\n              State.update({ cMethod: abiMethod });\r\n              clearInterval(getArg);\r\n            }\r\n            if (strErr.includes(\"MethodNotFound\")) {\r\n              clearInterval(getArg);\r\n            }\r\n            if (\r\n              strErr.includes(\"storage_write\") ||\r\n              strErr.includes(\"predecessor_account_id\")\r\n            ) {\r\n              abiMethod[fIndex].kind = \"call\";\r\n              State.update({ cMethod: abiMethod });\r\n              clearInterval(getArg);\r\n            }\r\n            if (strErr.includes(\"Requires attached deposit\")) {\r\n              abiMethod[fIndex].kind = \"call\";\r\n              abiMethod[fIndex].deposit = parseInt(strErr.match(/\\d+/)[0]);\r\n              State.update({ cMethod: abiMethod });\r\n              clearInterval(getArg);\r\n            }\r\n          }\r\n          console.log(fName, strErr);\r\n        });\r\n\r\n        setTimeout(() => {\r\n          clearInterval(getArg);\r\n          // clearAsyncInterval(getArg);\r\n        }, 120000);\r\n      }, 1000);\r\n    }\r\n  });\r\n};\r\nconst onBtnClickCall = (fName, action, fIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  const argMap = abiMethod[fIndex].params.args.map(({ name, value }) => ({\r\n    [name]: value,\r\n  }));\r\n  const args = {};\r\n  argMap.forEach((item) => {\r\n    Object.assign(args, item);\r\n  });\r\n  if (action === \"view\") {\r\n    asyncFetch(state.rpcUrl, {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: abiMethod[fIndex].name,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: header,\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      const resb = res.body.result;\r\n      if (resb.result) {\r\n        const result = new Buffer.from(resb.result).toString();\r\n        State.update({\r\n          res: {\r\n            [fName]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (resb.error) {\r\n        const error = resb.error;\r\n        State.update({\r\n          res: {\r\n            [fName]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (action === \"call\") {\r\n    if (\r\n      abiMethod[fIndex].deposit == 0 &&\r\n      abiMethod[fIndex].gas == 30000000000000\r\n    ) {\r\n      Near.call(state.contractAddress, abiMethod[fIndex].name, args);\r\n    }\r\n    if (\r\n      abiMethod[fIndex].deposit > 0 ||\r\n      abiMethod[fIndex].gas > 30000000000000\r\n    ) {\r\n      Near.call(\r\n        state.contractAddress,\r\n        abiMethod[fIndex].name,\r\n        args,\r\n        abiMethod[fIndex].deposit,\r\n        abiMethod[fIndex].gas\r\n      );\r\n    }\r\n  }\r\n};\r\nreturn (\r\n  <>\r\n    <div class=\"container border rounded p-3 border-2\">\r\n      <h3 class=\"text-center\">Contract</h3>\r\n      <div class=\"row mb-3\">\r\n        <div class=\"form-group col-md-10\">\r\n          <h6 class=\"mb-2\">Contract Address</h6>\r\n          <input\r\n            class=\"form-control\"\r\n            value={state.contractAddress}\r\n            placeholder=\"Contract Address\"\r\n            onChange={(e) => cFunc(e, \"address\")}\r\n          />\r\n        </div>\r\n\r\n        <div class=\"form-group col-md-2\">\r\n          <label></label>\r\n          <button\r\n            onClick={getMethodFromSource}\r\n            class=\"btn btn-dark form-control \"\r\n          >\r\n            \ud83e\uddd9\ud83c\udffb Scan\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"form-group col-md-4\">\r\n          <h6>Method Name</h6>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => cFunc(e, \"name\")}\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group col-md-4\">\r\n          <h6>Label</h6>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => cFunc(e, \"label\")}\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group col-md-2\">\r\n          <h6>Action</h6>\r\n          <select class=\"form-control\" onChange={(e) => cFunc(e, \"action\")}>\r\n            <option value=\"view\" selected>\r\n              View\r\n            </option>\r\n            <option value=\"call\">Call</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group col-md-2\">\r\n          <label></label>\r\n          <button onClick={onCreateMethod} class=\"btn btn-dark form-control \">\r\n            Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"form-group col-md-4\">\r\n          {state.cMethod.length > 0 ? (\r\n            <Widget src={`${cep}/widget/export-button`} props={state} />\r\n          ) : (\r\n            <>\r\n              <label></label>\r\n              <button class=\"btn btn-dark form-control \">\ud83d\udd3c Export</button>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div class=\"form-group col-md-4\">\r\n          {state.cMethod.length > 0 ? (\r\n            <Widget src={`${cep}/widget/preview-button`} props={state} />\r\n          ) : (\r\n            <>\r\n              <label></label>\r\n              <button class=\"btn btn-dark form-control \">\ud83d\udc40 Preview</button>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div class=\"form-group col-md-4\">\r\n          {state.cMethod.length > 0 ? (\r\n            <Widget src={`${cep}/widget/save-client-button`} />\r\n          ) : (\r\n            <>\r\n              <label></label>\r\n              <button class=\"btn btn-dark form-control \"> Save Client</button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {state.cMerr && (\r\n        <p class=\"text-danger\" role=\"alert\">\r\n          {state.cMerr}\r\n        </p>\r\n      )}\r\n    </div>\r\n    <br />\r\n    {state.cMethod &&\r\n      state.cMethod.map((functions, fIndex) => (\r\n        <div class=\"card mt-2\">\r\n          <div class=\"card-header\">\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col-sm-8 pt-2\">\r\n                  <h6>\r\n                    {functions.name}\r\n                    <span class=\"text-info\">\r\n                      {\"[Custom-Method-Params-Label-Button-Style]\"}\r\n                    </span>\r\n                  </h6>\r\n                </div>\r\n                <div class=\"col-sm-4 text-end pt-2\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={(e) => cMLabel(e, fIndex, \"remove\")}\r\n                    class=\"btn-close\"\r\n                  ></button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"container mb-3\">\r\n              <div class=\"row mb-3\">\r\n                <div class=\"form-group col-md-8\">\r\n                  <div class=\"form-group row mb-2\">\r\n                    <h6 class=\"col-sm-4 col-form-label\">Method Label</h6>\r\n                    <div class=\"col-sm-6\">\r\n                      <input\r\n                        placeholder=\"Method Label\"\r\n                        class=\"form-control\"\r\n                        defaultValue={functions.label || \"\"}\r\n                        onChange={(e) => cMLabel(e, fIndex, \"method\")}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group row\">\r\n                    <h6 class=\"col-sm-4 col-form-label\">Button Label</h6>\r\n                    <div class=\"col-sm-6\">\r\n                      <input\r\n                        placeholder=\"Button Label\"\r\n                        class=\"form-control\"\r\n                        defaultValue={args.button || \"\"}\r\n                        onChange={(e) => cMLabel(e, fIndex, \"button\")}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"form-group col-md-2\">\r\n                  <h6>Arguments</h6>\r\n                </div>\r\n                <div class=\"form-group col-md-2\">\r\n                  <h6>Label</h6>\r\n                </div>\r\n                <div class=\"form-group col-md-2\">\r\n                  <h6>Type</h6>\r\n                </div>\r\n                <div class=\"form-group col-md-2\">\r\n                  <button\r\n                    class=\"btn btn-secondary btn-sm\"\r\n                    onClick={(e) => onCreateArgs(functions.name, fIndex)}\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n                <div class=\"form-group col-md-2\">\r\n                  <button\r\n                    class=\"btn btn-secondary btn-sm\"\r\n                    onClick={(e) => getArgsFromMethod(functions.name, fIndex)}\r\n                  >\r\n                    Detect\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {functions.params.args &&\r\n              functions.params.args.map((args, argIndex) => {\r\n                return (\r\n                  <div class=\"container pb-2\">\r\n                    <div class=\"row\">\r\n                      <div class=\"form-group col-md-2\">\r\n                        <input\r\n                          placeholder=\"Name\"\r\n                          class=\"form-control\"\r\n                          defaultValue={args.name || \"\"}\r\n                          onChange={(e) => cAD(e, fIndex, argIndex, \"name\")}\r\n                        />\r\n                      </div>\r\n                      <div class=\"form-group col-md-2\">\r\n                        <input\r\n                          placeholder=\"Label\"\r\n                          class=\"form-control\"\r\n                          defaultValue={args.label || \"\"}\r\n                          onChange={(e) => cAD(e, fIndex, argIndex, \"label\")}\r\n                        />\r\n                      </div>\r\n                      <div class=\"form-group col-md-2\">\r\n                        <select\r\n                          defaultValue={args.type_schema.type}\r\n                          class=\"form-control\"\r\n                          onChange={(e) => cAD(e, fIndex, argIndex, \"type\")}\r\n                        >\r\n                          <option value=\"string\">String</option>\r\n                          <option value=\"integer\">Number</option>\r\n                          <option value=\"enum\">Enum</option>\r\n                          <option value=\"boolean\">Boolean</option>\r\n                          <option value=\"json\">Json</option>\r\n                          <option value=\"array\">Array</option>\r\n                          <option value=\"$ref\">AccountID</option>\r\n                        </select>\r\n                      </div>\r\n                      <div class=\"form-group col-md-4\">\r\n                        {args.type_schema.type == \"string\" ||\r\n                        args.type_schema.type == \"$ref\" ||\r\n                        args.type_schema.type == \"integer\" ||\r\n                        args.type_schema.type == \"json\" ||\r\n                        args.type_schema.type == \"array\" ? (\r\n                          <input\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\r\n                            class=\"form-control\"\r\n                            type=\"string\"\r\n                            placeholder=\"Argument value\"\r\n                          />\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {args.type_schema.type == \"boolean\" ? (\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\r\n                          >\r\n                            <option value=\"true\">True</option>\r\n                            <option value=\"false\">False</option>\r\n                          </select>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {args.type_schema.type == \"enum\" ? (\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\r\n                          >\r\n                            {args.enum &&\r\n                              args.enum.map((item, i) => (\r\n                                <option value={item}>{item}</option>\r\n                              ))}\r\n                          </select>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                      <div class=\"form-group col-md-2\">\r\n                        <button\r\n                          type=\"button\"\r\n                          onClick={(e) => cAD(e, fIndex, argIndex, \"remove\")}\r\n                          class=\"btn btn-danger btn-sm\"\r\n                        >\r\n                          <i class=\"bi bi-trash\"></i>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            {functions.kind == \"call\" ? (\r\n              <>\r\n                <div class=\"container pb-1 pt-3\">\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col-md-12\">\r\n                      <h6>Options</h6>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"container\">\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col-md-6\">\r\n                      <label>Attached deposit</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue={\"\" + functions.deposit}\r\n                        onChange={(e) => cMLabel(e, fIndex, \"deposit\")}\r\n                        class=\"form-control\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-md-6\">\r\n                      <label>Gas</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue=\"30000000000000\"\r\n                        onChange={(e) => cMLabel(e, fIndex, \"gas\")}\r\n                        class=\"form-control\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {state.res[functions.name] && state.res[functions.name] ? (\r\n              <div\r\n                className={\r\n                  state.res[functions.name].error\r\n                    ? \"alert  alert-danger\"\r\n                    : \"alert  alert-success\"\r\n                }\r\n                role=\"alert\"\r\n              >\r\n                {state.res[functions.name].value}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <button\r\n              class=\"btn btn-dark btn-sm mt-2\"\r\n              onClick={(e) =>\r\n                onBtnClickCall(functions.name, functions.kind, fIndex)\r\n              }\r\n            >\r\n              {functions.kind == \"view\" ? \"View\" : \"Call\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/builder", "fact_widget_deployments_id": "2e4c720c5a7a939a1039af277f247ac2", "inserted_timestamp": "2023-10-23T19:24:03.632Z", "modified_timestamp": "2023-10-23T19:24:03.632Z", "__row_index": 340}