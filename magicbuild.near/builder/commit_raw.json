{"tx_hash": "72b9E9SrmDbH7wLs5JGVYxqFMDtnRN3jK7zpw1QEJmp9", "action_id_social": "EHKao2TjLuHEDDudsSrbgz4nh1HwwKNyz6SxNns9u19Q-0-widget", "block_id": 103068026, "block_timestamp": "2023-10-10T18:00:18.053Z", "signer_id": "magicbuild.near", "widget_name": "builder", "source_code": "State.init({\r\n  id: props.id ? props.id : null,\r\n  contractAddress: props.address ? props.address : \"\",\r\n  cMethod: props.abi.body.functions ? props.abi.body.functions : [],\r\n  rpcUrl: \"https://rpc.near.org/\",\r\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\",\r\n  nearBlockRpc: \"https://api.nearblocks.io/\",\r\n  fName,\r\n  fAction: \"view\",\r\n  fLabel,\r\n  cMerr,\r\n  res,\r\n  cAerr,\r\n});\r\nconst header = {\r\n  \"Content-Type\": \"application/json\",\r\n};\r\nconst cFunc = (e, type) => {\r\n  const data = e.target.value;\r\n  if (type == \"name\") State.update({ fName: data });\r\n  if (type == \"label\") State.update({ fLabel: data });\r\n  if (type == \"action\") State.update({ fAction: data });\r\n  if (type == \"address\") State.update({ contractAddress: data.toLowerCase() });\r\n};\r\nconst cep = \"magicbuild.near\";\r\nconst onCreateArgs = (fName, fIndex) => {\r\n  State.update({ cAerr: { [fName]: null } });\r\n  const arg = {\r\n    name: \"\",\r\n    label: \"\",\r\n    type_schema: {\r\n      type: \"string\",\r\n    },\r\n    value: \"\",\r\n  };\r\n  const abiMethod = state.cMethod;\r\n  abiMethod[fIndex].params.args.push(arg);\r\n  State.update({ cMethod: abiMethod });\r\n};\r\nconst cMLabel = (e, fIdx, type) => {\r\n  const value = e.target.value;\r\n  const a = state.cMethod;\r\n  if (type == \"method\") a[fIdx].label = value;\r\n  if (type == \"button\") a[fIdx].button = value;\r\n  if (type == \"gas\") a[fIdx].gas = value;\r\n  if (type == \"deposit\") a[fIdx].deposit = value;\r\n  if (type == \"remove\") a.splice(fIdx, 1);\r\n  State.update({ cMethod: a });\r\n};\r\nconst cAD = (e, fIdx, aIdx, type) => {\r\n  const value = e.target.value;\r\n  const a = state.cMethod;\r\n  if (type == \"name\") a[fIdx].params.args[aIdx].name = value;\r\n  if (type == \"label\") a[fIdx].params.args[aIdx].label = value;\r\n  if (type == \"type\") a[fIdx].params.args[aIdx].type_schema.type = value;\r\n  if (type == \"value\") a[fIdx].params.args[aIdx].value = value;\r\n  if (type == \"remove\") a[fIdx].params.args.splice(aIdx, 1);\r\n  State.update({ cMethod: a });\r\n};\r\nconst onCreateMethod = () => {\r\n  if (state.fName.length > 0) {\r\n    State.update({ cMerr: null });\r\n    const method = {\r\n      name: state.fName,\r\n      kind: state.fAction,\r\n      label: state.fLabel,\r\n      button: \"\",\r\n      export: true,\r\n      params: {\r\n        serialization_type: \"json\",\r\n        args: [],\r\n      },\r\n      deposit: 0,\r\n      gas: 30000000000000,\r\n    };\r\n    const abiMethod = state.cMethod;\r\n    const isExistFunction = false;\r\n    abiMethod.forEach((item) => {\r\n      if (item.name == state.fName) {\r\n        isExistFunction = true;\r\n      }\r\n    });\r\n    if (!isExistFunction) {\r\n      abiMethod.push(method);\r\n      State.update({ cMethod: abiMethod });\r\n    } else {\r\n      State.update({ cMerr: \"Method Exist!\" });\r\n    }\r\n  } else {\r\n    State.update({ cMerr: \"Please Input Method Name!\" });\r\n  }\r\n};\r\nconst getMethodFromSource = () => {\r\n  State.update({ cMerr: null });\r\n  const abiMethod = [];\r\n  State.update({ cMethod: [] });\r\n  asyncFetch(state.rpcUrl, {\r\n    body: JSON.stringify({\r\n      method: \"query\",\r\n      params: {\r\n        request_type: \"view_code\",\r\n        account_id: state.contractAddress,\r\n        finality: \"final\",\r\n      },\r\n      id: 154,\r\n      jsonrpc: \"2.0\",\r\n    }),\r\n    headers: header,\r\n    method: \"POST\",\r\n  }).then((res) => {\r\n    const resb = res.body;\r\n    if (resb.result) {\r\n      const data = Buffer(resb.result.code_base64, \"base64\").toString(\"ascii\");\r\n      const fist = data.indexOf(\"memory\u0002\");\r\n      let second = data.indexOf(\"__data_end\");\r\n      if (second == -1) second = data.indexOf(\"\u0003P]\");\r\n      if (fist !== -1 && second !== -1) {\r\n        const functionsData = data\r\n          .substring(fist, second)\r\n          .replace(/[^\\w ]/g, \" \")\r\n          .split(\" \");\r\n        const filterFunction = [];\r\n        functionsData.forEach((item, index) => {\r\n          if (index > 0) {\r\n            if (item.length > 1) {\r\n              if (!/^[A-Z]+(?:_[A-Z]+)*$/m.test(item)) {\r\n                if (!/^[0-9]*$/.test(string)) {\r\n                  filterFunction.push(item);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n        filterFunction.forEach((item) => {\r\n          asyncFetch(\r\n            `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${item}&order=desc&page=1&per_page=25`,\r\n            {\r\n              headers: header,\r\n              method: \"GET\",\r\n            }\r\n          ).then((res) => {\r\n            const method = {\r\n              name: item,\r\n              kind: \"view\",\r\n              export: true,\r\n              params: {\r\n                serialization_type: \"json\",\r\n                args: [],\r\n              },\r\n              deposit: 0,\r\n              gas: 30000000000000,\r\n            };\r\n            if (res.body.txns.length > 0) {\r\n              const isScs = false;\r\n              res.body.txns.forEach((item) => {\r\n                if (item.outcomes.status) {\r\n                  isScs = true;\r\n                }\r\n              });\r\n              if (isScs) {\r\n                method.kind = \"call\";\r\n              }\r\n            }\r\n            abiMethod.push(method);\r\n            State.update({ cMethod: abiMethod });\r\n            abiMethod.forEach((item, index) => {\r\n              getArgsFromMethod(item.name, index);\r\n            });\r\n          });\r\n        });\r\n      } else {\r\n        State.update({ cMerr: \"Unable to detect Method!\" });\r\n      }\r\n    } else {\r\n      State.update({ cMerr: \"Unable to detect Method!\" });\r\n    }\r\n  });\r\n};\r\nconst getArgsFromMethod = (fName, fIndex) => {\r\n  asyncFetch(\r\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${fName}&order=desc&page=1&per_page=1`,\r\n    {\r\n      headers: header,\r\n      method: \"GET\",\r\n    }\r\n  ).then((res) => {\r\n    if (res.body.txns.length > 0) {\r\n      if (res.body.txns[0].transaction_hash) {\r\n        asyncFetch(state.archivalRpc, {\r\n          body: JSON.stringify({\r\n            method: \"EXPERIMENTAL_tx_status\",\r\n            params: [res.body.txns[0].transaction_hash, state.contractAddress],\r\n            id: 128,\r\n            jsonrpc: \"2.0\",\r\n          }),\r\n          headers: header,\r\n          method: \"POST\",\r\n        }).then((res) => {\r\n          if (res.body.result.transaction.actions[0].FunctionCall.args) {\r\n            const args = Buffer(\r\n              res.body.result.transaction.actions[0].FunctionCall.args,\r\n              \"base64\"\r\n            ).toString(\"ascii\");\r\n            if (Object.keys(JSON.parse(args)).length > 0) {\r\n              const abiMethod = state.cMethod;\r\n              abiMethod[fIndex].params.args = [];\r\n              Object.keys(JSON.parse(args)).forEach((item) => {\r\n                const arg = {\r\n                  name: item,\r\n                  type_schema: {\r\n                    type: typeof JSON.parse(args)[item],\r\n                  },\r\n                  value: \"\",\r\n                };\r\n                abiMethod[fIndex].params.args.push(arg);\r\n                State.update({ cMethod: abiMethod });\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      const getArg = setInterval(() => {\r\n        const abiMethod = state.cMethod;\r\n        const argsArr = abiMethod[fIndex].params.args;\r\n        const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\r\n        const args = {};\r\n        argMap.forEach((item) => {\r\n          Object.assign(args, item);\r\n        });\r\n        asyncFetch(state.rpcUrl, {\r\n          body: JSON.stringify({\r\n            method: \"query\",\r\n            params: {\r\n              request_type: \"call_function\",\r\n              account_id: state.contractAddress,\r\n              method_name: fName,\r\n              args_base64: new Buffer.from(JSON.stringify(args)).toString(\r\n                \"base64\"\r\n              ),\r\n              finality: \"optimistic\",\r\n            },\r\n            id: 154,\r\n            jsonrpc: \"2.0\",\r\n          }),\r\n          headers: header,\r\n          method: \"POST\",\r\n        }).then((res) => {\r\n          if (res.body.result.error) {\r\n            if (res.body.result.error.includes(\"missing field\")) {\r\n              const str = res.body.result.error;\r\n              const argName = str.substring(\r\n                str.indexOf(\"`\") + 1,\r\n                str.lastIndexOf(\"`\")\r\n              );\r\n              const checkType = [\r\n                { value: \"\", type: \"string\" },\r\n                { value: 0, type: \"number\" },\r\n                { value: [], type: \"array\" },\r\n                { value: true, type: \"boolean\" },\r\n                { value: \"\", type: \"enum\" },\r\n                { value: {}, type: \"object\" },\r\n              ];\r\n              const isCheck = false;\r\n              checkType.forEach((typeItem, typeIndex) => {\r\n                if (isCheck == false) {\r\n                  asyncFetch(state.rpcUrl, {\r\n                    body: JSON.stringify({\r\n                      method: \"query\",\r\n                      params: {\r\n                        request_type: \"call_function\",\r\n                        account_id: state.contractAddress,\r\n                        method_name: fName,\r\n                        args_base64: new Buffer.from(\r\n                          JSON.stringify({\r\n                            [argName]: checkType[typeIndex].value,\r\n                          })\r\n                        ).toString(\"base64\"),\r\n                        finality: \"optimistic\",\r\n                      },\r\n                      id: 154,\r\n                      jsonrpc: \"2.0\",\r\n                    }),\r\n                    headers: header,\r\n                    method: \"POST\",\r\n                  }).then((res) => {\r\n                    const ftch = res.body.result.error;\r\n                    const uS = (argName, type, value) => {\r\n                      isCheck = true;\r\n                      const arg = {\r\n                        name: argName,\r\n                        type_schema: {\r\n                          type: type,\r\n                        },\r\n                        value: value,\r\n                      };\r\n                      const isExist = false;\r\n                      abiMethod[fIndex].params.args.forEach((item) => {\r\n                        if (item.name == argName) {\r\n                          isExist = true;\r\n                        }\r\n                      });\r\n                      if (isExist == false) {\r\n                        abiMethod[fIndex].params.args.push(arg);\r\n                        State.update({ cMethod: abiMethod });\r\n                      }\r\n                    };\r\n                    if (\r\n                      res.body.result.result ||\r\n                      ftch.includes(\"Option::unwrap()`\")\r\n                    ) {\r\n                      uS(argName, typeItem.type, typeItem.value);\r\n                      clearInterval(getArg);\r\n                    }\r\n                    if (ftch.includes(\"the account ID\")) {\r\n                      uS(argName, \"$ref\", state.contractAddress);\r\n                    }\r\n                    if (ftch.includes(\"unknown variant\")) {\r\n                      isCheck = true;\r\n                      const getEnum = ftch\r\n                        .substring(\r\n                          ftch.indexOf(\"expected one of\") + 17,\r\n                          ftch.lastIndexOf(\"\\\\\")\r\n                        )\r\n                        .replaceAll(\"`\", \"\")\r\n                        .split(\",\");\r\n                      uS(argName, typeItem.type, getEnum[0]);\r\n                    }\r\n\r\n                    if (ftch.includes(\"missing field\")) {\r\n                      uS(argName, typeItem.type, typeItem.value);\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            }\r\n            if (\r\n              ftch.includes(\"Requires attached deposit\") ||\r\n              ftch.includes(\"storage_write\") ||\r\n              ftch.includes(\"predecessor_account_id\")\r\n            ) {\r\n              abiMethod[fIndex].kind = \"call\";\r\n              State.update({ cMethod: abiMethod });\r\n              clearInterval(getArg);\r\n            }\r\n            if (ftch.includes(\"MethodNotFound\") || res.body.result.result) {\r\n              clearInterval(getArg);\r\n            }\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          clearInterval(getArg);\r\n        }, 10000);\r\n      }, 1000);\r\n    }\r\n  });\r\n};\r\nconst onBtnClickCall = (fName, action, fIndex) => {\r\n  const abiMethod = state.cMethod;\r\n  const argMap = abiMethod[fIndex].params.args.map(({ name, value }) => ({\r\n    [name]: value,\r\n  }));\r\n  const args = {};\r\n  argMap.forEach((item) => {\r\n    Object.assign(args, item);\r\n  });\r\n  if (action === \"view\") {\r\n    asyncFetch(state.rpcUrl, {\r\n      body: JSON.stringify({\r\n        method: \"query\",\r\n        params: {\r\n          request_type: \"call_function\",\r\n          account_id: state.contractAddress,\r\n          method_name: abiMethod[fIndex].name,\r\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\r\n          finality: \"final\",\r\n        },\r\n        id: 154,\r\n        jsonrpc: \"2.0\",\r\n      }),\r\n      headers: header,\r\n      method: \"POST\",\r\n    }).then((res) => {\r\n      const resb = res.body.result;\r\n      if (resb.result) {\r\n        const result = new Buffer.from(resb.result).toString();\r\n        State.update({\r\n          res: {\r\n            [fName]: { value: result, error: false },\r\n          },\r\n        });\r\n      }\r\n      if (resb.error) {\r\n        const error = resb.error;\r\n        State.update({\r\n          res: {\r\n            [fName]: { value: error, error: true },\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n  if (action === \"call\") {\r\n    if (\r\n      abiMethod[fIndex].deposit == 0 &&\r\n      abiMethod[fIndex].gas == 30000000000000\r\n    ) {\r\n      Near.call(state.contractAddress, abiMethod[fIndex].name, args);\r\n    }\r\n    if (\r\n      abiMethod[fIndex].deposit > 0 ||\r\n      abiMethod[fIndex].gas > 30000000000000\r\n    ) {\r\n      Near.call(\r\n        state.contractAddress,\r\n        abiMethod[fIndex].name,\r\n        args,\r\n        abiMethod[fIndex].deposit,\r\n        abiMethod[fIndex].gas\r\n      );\r\n    }\r\n  }\r\n};\r\nreturn (\r\n  <div class=\"row\">\r\n    <div class=\"col-md-8\">\r\n      <div class=\"container border rounded p-3 border-2\">\r\n        <div class=\"row mb-3\">\r\n          <div class=\"form-group col-md-10\">\r\n            <h6 class=\"mb-2\">Contract Address</h6>\r\n            <input\r\n              class=\"form-control\"\r\n              value={state.contractAddress}\r\n              placeholder=\"Contract Address\"\r\n              onChange={(e) => cFunc(e, \"address\")}\r\n            />\r\n          </div>\r\n\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button\r\n              onClick={getMethodFromSource}\r\n              class=\"btn btn-dark form-control \"\r\n            >\r\n              \ud83e\uddd9\ud83c\udffb Scan\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"form-group col-md-4\">\r\n            <h6>Method Name</h6>\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => cFunc(e, \"name\")}\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group col-md-4\">\r\n            <h6>Label</h6>\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => cFunc(e, \"label\")}\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <h6>Action</h6>\r\n            <select class=\"form-control\" onChange={(e) => cFunc(e, \"action\")}>\r\n              <option value=\"view\" selected>\r\n                View\r\n              </option>\r\n              <option value=\"call\">Call</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group col-md-2\">\r\n            <label></label>\r\n            <button onClick={onCreateMethod} class=\"btn btn-dark form-control \">\r\n              Create\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          {\" \"}\r\n          <div class=\"form-group col-md-12\">\r\n            {state.cMethod.length > 0 ? (\r\n              <Widget src={`${cep}/widget/export-button`} props={state} />\r\n            ) : (\r\n              <>\r\n                <label></label>\r\n                <button class=\"btn btn-dark form-control \">\ud83d\udd3c Export</button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {state.cMerr && (\r\n          <p class=\"text-danger\" role=\"alert\">\r\n            {state.cMerr}\r\n          </p>\r\n        )}\r\n      </div>\r\n      <br />\r\n      {state.cMethod &&\r\n        state.cMethod.map((functions, fIndex) => (\r\n          <div class=\"card mb-2\">\r\n            <div class=\"card-header\">\r\n              <div class=\"container\">\r\n                <div class=\"row\">\r\n                  <div class=\"col pt-2\">\r\n                    <h6>{functions.name}</h6>\r\n                  </div>\r\n                  <div class=\"col text-end pt-2\">\r\n                    {\" \"}\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={(e) => cMLabel(e, fIndex, \"remove\")}\r\n                      class=\"btn-close\"\r\n                    ></button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"container\">\r\n                <div class=\"row mb-3\">\r\n                  <div class=\"form-group col-md-8\">\r\n                    <div class=\"form-group row mb-2\">\r\n                      <h6 class=\"col-sm-4 col-form-label\">Method Label</h6>\r\n                      <div class=\"col-sm-6\">\r\n                        <input\r\n                          placeholder=\"Method Label\"\r\n                          class=\"form-control\"\r\n                          defaultValue={functions.label || \"\"}\r\n                          onChange={(e) => cMLabel(e, fIndex, \"method\")}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"form-group row\">\r\n                      <h6 class=\"col-sm-4 col-form-label\">Button Label</h6>\r\n                      <div class=\"col-sm-6\">\r\n                        <input\r\n                          placeholder=\"Button Label\"\r\n                          class=\"form-control\"\r\n                          defaultValue={args.button || \"\"}\r\n                          onChange={(e) => cMLabel(e, fIndex, \"button\")}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                  <div class=\"form-group col-md-2\">\r\n                    <h6>Arguments</h6>\r\n                  </div>\r\n                  <div class=\"form-group col-md-2\">\r\n                    <h6>Label</h6>\r\n                  </div>\r\n                  <div class=\"form-group col-md-2\">\r\n                    <h6>Type</h6>\r\n                  </div>\r\n                  <div class=\"form-group col-md-2\">\r\n                    <button\r\n                      class=\"btn btn-secondary btn-sm\"\r\n                      onClick={(e) => onCreateArgs(functions.name, fIndex)}\r\n                    >\r\n                      Add\r\n                    </button>\r\n                  </div>\r\n                  <div class=\"form-group col-md-2\">\r\n                    <button\r\n                      class=\"btn btn-secondary btn-sm\"\r\n                      onClick={(e) => getArgsFromMethod(functions.name, fIndex)}\r\n                    >\r\n                      Detect\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <br />\r\n              {functions.params.args &&\r\n                functions.params.args.map((args, argIndex) => {\r\n                  return (\r\n                    <div class=\"container pb-2\">\r\n                      <div class=\"row\">\r\n                        <div class=\"form-group col-md-2\">\r\n                          <input\r\n                            placeholder=\"Name\"\r\n                            class=\"form-control\"\r\n                            defaultValue={args.name || \"\"}\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"name\")}\r\n                          />\r\n                        </div>\r\n                        <div class=\"form-group col-md-2\">\r\n                          <input\r\n                            placeholder=\"Label\"\r\n                            class=\"form-control\"\r\n                            defaultValue={args.label || \"\"}\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"label\")}\r\n                          />\r\n                        </div>\r\n                        <div class=\"form-group col-md-2\">\r\n                          <select\r\n                            defaultValue={args.type_schema.type}\r\n                            class=\"form-control\"\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"type\")}\r\n                          >\r\n                            <option value=\"string\">String</option>\r\n                            <option value=\"number\">Number</option>\r\n                            <option value=\"boolean\">Boolean</option>\r\n                            <option value=\"json\">Json</option>\r\n                            <option value=\"array\">Array</option>\r\n                          </select>\r\n                        </div>\r\n                        <div class=\"form-group col-md-4\">\r\n                          <input\r\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\r\n                            class=\"form-control\"\r\n                            type=\"string\"\r\n                            placeholder=\"Argument value\"\r\n                          />\r\n                        </div>\r\n                        <div class=\"form-group col-md-2\">\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={(e) => cAD(e, fIndex, argIndex, \"remove\")}\r\n                            class=\"btn btn-danger btn-sm\"\r\n                          >\r\n                            <i class=\"bi bi-trash\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              {functions.kind == \"call\" ? (\r\n                <>\r\n                  <div class=\"container pb-1 pt-3\">\r\n                    <div class=\"row\">\r\n                      <div class=\"form-group col-md-12\">\r\n                        <h6>Options</h6>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"container\">\r\n                    <div class=\"row\">\r\n                      <div class=\"form-group col-md-6\">\r\n                        <label>Attached deposit</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          defaultValue=\"0\"\r\n                          onChange={(e) => cMLabel(e, fIndex, \"deposit\")}\r\n                          class=\"form-control\"\r\n                        />\r\n                      </div>\r\n                      <div class=\"form-group col-md-6\">\r\n                        <label>Gas</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          defaultValue=\"30000000000000\"\r\n                          onChange={(e) => cMLabel(e, fIndex, \"gas\")}\r\n                          class=\"form-control\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {state.res[functions.name] && state.res[functions.name] ? (\r\n                <>\r\n                  <div\r\n                    className={\r\n                      state.res[functions.name].error\r\n                        ? \"alert  alert-danger\"\r\n                        : \"alert  alert-success\"\r\n                    }\r\n                    role=\"alert\"\r\n                  >\r\n                    {state.res[functions.name].value}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <button\r\n                class=\"btn btn-dark btn-sm mt-2\"\r\n                onClick={(e) =>\r\n                  onBtnClickCall(functions.name, functions.kind, fIndex)\r\n                }\r\n              >\r\n                {functions.kind == \"view\" ? \"View\" : \"Call\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n    <div class=\"col-md-4\">\r\n      {state.cMethod.length > 0 && (\r\n        <Widget src={`${cep}/widget/preview`} props={state} />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/builder", "fact_widget_deployments_id": "e907d796574e2bc4f285cae407dd9f38", "inserted_timestamp": "2023-10-10T19:48:45.521Z", "modified_timestamp": "2023-10-10T19:48:45.521Z", "__row_index": 457}