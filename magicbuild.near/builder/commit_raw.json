{"tx_hash": "tyh3TDVkfVNwokGrStahn3DAopiyMSqamNRdiVJGHRs", "action_id_social": "FApp9WxvxJjwnaV4GjnLsD45VEssWt8yQmyw1QzvXsjs-0-widget", "block_id": 103943133, "block_timestamp": "2023-10-22T08:20:05.383Z", "signer_id": "magicbuild.near", "widget_name": "builder", "source_code": "State.init({\n  id: props.id ? props.id : null,\n  contractAddress: props.address ? props.address : \"\",\n  cMethod: props.abi.body.functions ? props.abi.body.functions : [],\n  rpcUrl: \"https://rpc.near.org/\",\n  archivalRpc: \"https://archival-rpc.mainnet.near.org\",\n  nearBlockRpc: \"https://api.nearblocks.io/\",\n  fName,\n  fAction: \"view\",\n  fLabel,\n  cMerr,\n  res,\n  cAerr,\n});\nconst header = {\n  \"Content-Type\": \"application/json\",\n};\nconst opGet = {\n  headers: header,\n  method: \"GET\",\n};\nconst asyncIntervals = [];\n\nconst runAsyncInterval = (cb, interval, intervalIndex) => {\n  cb();\n  if (asyncIntervals[intervalIndex].run) {\n    asyncIntervals[intervalIndex].id = setTimeout(\n      () => runAsyncInterval(cb, interval, intervalIndex),\n      interval\n    );\n  }\n};\nconst setAsyncInterval = (cb, interval) => {\n  if (cb && typeof cb === \"function\") {\n    const intervalIndex = asyncIntervals.length;\n    asyncIntervals.push({ run: true, id: id });\n    runAsyncInterval(cb, interval, intervalIndex);\n    return intervalIndex;\n  } else {\n    throw new Error(\"Callback must be a function\");\n  }\n};\nconst clearAsyncInterval = (intervalIndex) => {\n  if (asyncIntervals[intervalIndex].run) {\n    clearTimeout(asyncIntervals[intervalIndex].id);\n    asyncIntervals[intervalIndex].run = false;\n  }\n};\nconst cFunc = (e, type) => {\n  const data = e.target.value;\n  if (type == \"name\") State.update({ fName: data });\n  if (type == \"label\") State.update({ fLabel: data });\n  if (type == \"action\") State.update({ fAction: data });\n  if (type == \"address\") State.update({ contractAddress: data.toLowerCase() });\n};\nconst cep = \"magicbuild.near\";\nconst onCreateArgs = (fName, fIndex) => {\n  State.update({ cAerr: { [fName]: null } });\n  const arg = {\n    name: \"\",\n    label: \"\",\n    type_schema: {\n      type: \"string\",\n    },\n    value: \"\",\n  };\n  const abiMethod = state.cMethod;\n  abiMethod[fIndex].params.args.push(arg);\n  State.update({ cMethod: abiMethod });\n};\nconst cMLabel = (e, fIdx, type) => {\n  const value = e.target.value;\n  const a = state.cMethod;\n  if (type == \"method\") a[fIdx].label = value;\n  if (type == \"button\") a[fIdx].button = value;\n  if (type == \"gas\") a[fIdx].gas = parseInt(value);\n  if (type == \"deposit\") a[fIdx].deposit = parseInt(value);\n  if (type == \"remove\") a.splice(fIdx, 1);\n  State.update({ cMethod: a });\n};\nconst cAD = (e, fIdx, aIdx, type) => {\n  const value = e.target.value;\n  const a = state.cMethod;\n  if (type == \"name\") a[fIdx].params.args[aIdx].name = value;\n  if (type == \"label\") a[fIdx].params.args[aIdx].label = value;\n  if (type == \"type\") a[fIdx].params.args[aIdx].type_schema.type = value;\n  if (type == \"value\") {\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"integer\") {\n      a[fIdx].params.args[aIdx].value = parseInt(value);\n    }\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"array\") {\n      a[fIdx].params.args[aIdx].value = value.split(\"|\"); //check valid\n    }\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"boolean\") {\n      a[fIdx].params.args[aIdx].value = Boolean(value);\n    }\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"json\") {\n      a[fIdx].params.args[aIdx].value = JSON.parse(value); //check valid\n    }\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"string\") {\n      a[fIdx].params.args[aIdx].value = value; //check valid\n    }\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"enum\") {\n      a[fIdx].params.args[aIdx].value = value; //check valid\n    }\n    if (a[fIdx].params.args[aIdx].type_schema.type == \"$ref\") {\n      a[fIdx].params.args[aIdx].value = value; //check account valid\n    }\n  }\n  if (type == \"remove\") a[fIdx].params.args.splice(aIdx, 1);\n  State.update({ cMethod: a });\n};\nconst onCreateMethod = () => {\n  if (state.fName.length > 0) {\n    State.update({ cMerr: null });\n    const method = {\n      name: state.fName,\n      kind: state.fAction,\n      label: state.fLabel,\n      button: \"\",\n      export: true,\n      params: {\n        serialization_type: \"json\",\n        args: [],\n      },\n      deposit: 0,\n      gas: 30000000000000,\n    };\n    const abiMethod = state.cMethod;\n    const isExistFunction = false;\n    abiMethod.forEach((item) => {\n      if (item.name == state.fName) {\n        isExistFunction = true;\n      }\n    });\n    if (!isExistFunction) {\n      abiMethod.push(method);\n      State.update({ cMethod: abiMethod });\n    } else {\n      State.update({ cMerr: \"Method Exist!\" });\n    }\n  } else {\n    State.update({ cMerr: \"Please Input Method Name!\" });\n  }\n};\nconst getMethodFromSource = () => {\n  State.update({ cMerr: null, cMethod: [] });\n  const res = fetch(state.rpcUrl, {\n    body: JSON.stringify({\n      method: \"query\",\n      params: {\n        request_type: \"view_code\",\n        account_id: state.contractAddress,\n        finality: \"final\",\n      },\n      id: 154,\n      jsonrpc: \"2.0\",\n    }),\n    headers: header,\n    method: \"POST\",\n  });\n  let abiMethod = [];\n  const resb = res.body;\n  if (resb.result) {\n    const data = Buffer(resb.result.code_base64, \"base64\").toString(\"ascii\");\n    const fist = data.indexOf(\"memory\u0002\");\n    let second =\n      data.indexOf(\"__data_end\") !== -1\n        ? data.indexOf(\"__data_end\")\n        : data.indexOf(\"\u0003P]\");\n    if (fist !== -1 && second !== -1) {\n      const functionsData = data\n        .substring(fist, second)\n        .replace(/[^\\w ]/g, \" \")\n        .split(\" \");\n      const filterFunction = [];\n      functionsData.forEach((item, index) => {\n        if (index > 0 && item.length > 1) {\n          if (!/^[A-Z]+(?:_[A-Z]+)*$/m.test(item) && !/^[0-9]*$/.test(string)) {\n            filterFunction.push(item);\n          }\n        }\n      });\n      filterFunction.forEach((item) => {\n        const res = fetch(\n          `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${item}&order=desc&page=1&per_page=25`,\n          opGet\n        );\n        const method = {\n          name: item,\n          kind: \"view\",\n          export: true,\n          params: {\n            serialization_type: \"json\",\n            args: [],\n          },\n          deposit: 0,\n          gas: 30000000000000,\n        };\n        if (res.body.txns.length > 0) {\n          const isScs = false;\n          res.body.txns.forEach((item) => {\n            if (item.outcomes.status) {\n              isScs = true;\n            }\n          });\n          if (isScs) {\n            method.kind = \"call\";\n          }\n        }\n        abiMethod.push(method);\n      });\n      State.update({ cMethod: abiMethod });\n      abiMethod.forEach((item, index) => {\n        // fix setinterval\n        getArgsFromMethod(item.name, index);\n      });\n    } else {\n      State.update({ cMerr: \"Unable to detect Method!\" });\n    }\n  } else {\n    State.update({ cMerr: \"Unable to detect Method!\" });\n  }\n};\nconst getArgsFromMethod = (fName, fIndex) => {\n  const res = fetch(\n    `${state.nearBlockRpc}v1/account/${state.contractAddress}/txns?method=${fName}&order=desc&page=1&per_page=1`,\n    opGet\n  );\n  const restxns = res.body.txns[0];\n  if (restxns.outcomes.status && restxns.logs.length > 0) {\n    const argsData = JSON.parse(\n      restxns.logs[0].replace(\"EVENT_JSON:\", \"\").replaceAll(\"\\\\\", \"\")\n    );\n    const args = argsData.data[0] || argsData;\n    if (Object.keys(args).length > 0) {\n      const abiMethod = state.cMethod;\n      abiMethod[fIndex].params.args = [];\n\n      Object.keys(args).forEach((item) => {\n        const arg = {\n          name: item,\n          type_schema: {\n            type:\n              typeof args[item] == \"number\"\n                ? \"integer\"\n                : typeof args[item] == \"object\"\n                ? \"json\"\n                : typeof args[item],\n          },\n          value: \"\",\n        };\n        abiMethod[fIndex].params.args.push(arg);\n        State.update({ cMethod: abiMethod });\n      });\n    }\n  } else {\n    const getArg = setAsyncInterval(() => {\n      const abiMethod = state.cMethod;\n      const argsArr = abiMethod[fIndex].params.args;\n      const argMap = argsArr.map(({ name, value }) => ({ [name]: value }));\n      const args = {};\n      argMap.forEach((item) => {\n        Object.assign(args, item);\n      });\n      const res = fetch(state.rpcUrl, {\n        body: JSON.stringify({\n          method: \"query\",\n          params: {\n            request_type: \"call_function\",\n            account_id: state.contractAddress,\n            method_name: fName,\n            args_base64: new Buffer.from(JSON.stringify(args)).toString(\n              \"base64\"\n            ),\n            finality: \"optimistic\",\n          },\n          id: 154,\n          jsonrpc: \"2.0\",\n        }),\n        headers: header,\n        method: \"POST\",\n      });\n      const strErr = res.body.result.error;\n      if (strErr && strErr.includes(\"missing field\")) {\n        const argName = strErr.substring(\n          strErr.indexOf(\"`\") + 1,\n          strErr.lastIndexOf(\"`\")\n        );\n        const checkType = [\n          { value: \"\", type: \"string\" },\n          { value: 0, type: \"integer\" },\n          { value: [], type: \"array\" },\n          { value: true, type: \"boolean\" },\n          { value: \"\", type: \"enum\" },\n          { value: {}, type: \"object\" },\n        ];\n        const isCheck = false;\n        checkType.forEach((typeItem) => {\n          if (isCheck == false) {\n            const res = fetch(state.rpcUrl, {\n              body: JSON.stringify({\n                method: \"query\",\n                params: {\n                  request_type: \"call_function\",\n                  account_id: state.contractAddress,\n                  method_name: fName,\n                  args_base64: new Buffer.from(\n                    JSON.stringify({\n                      [argName]: typeItem.value,\n                    })\n                  ).toString(\"base64\"),\n                  finality: \"optimistic\",\n                },\n                id: 154,\n                jsonrpc: \"2.0\",\n              }),\n              headers: header,\n              method: \"POST\",\n            });\n            const ftch = res.body.result.error;\n            const uS = (argName, type, value) => {\n              isCheck = true;\n              const arg = {\n                name: argName,\n                type_schema: {\n                  type: type,\n                },\n                value: type == \"enum\" ? value[0] : value,\n              };\n              if (type == \"enum\") {\n                arg.enum = value;\n              }\n              const isExist = false;\n              abiMethod[fIndex].params.args.forEach((item) => {\n                if (item.name == argName) {\n                  isExist = true;\n                }\n              });\n              if (isExist == false) {\n                abiMethod[fIndex].params.args.push(arg);\n                State.update({ cMethod: abiMethod });\n              }\n            };\n            if (ftch) {\n              if (\n                res.body.result.result ||\n                ftch.includes(\"Option::unwrap()`\")\n              ) {\n                uS(argName, typeItem.type, typeItem.value);\n                clearAsyncInterval(getArg);\n              }\n              if (ftch.includes(\"the account ID\")) {\n                uS(argName, \"$ref\", state.contractAddress);\n              }\n              if (ftch.includes(\"unknown variant\")) {\n                isCheck = true;\n                const getEnum = ftch\n                  .substring(\n                    ftch.indexOf(\"expected one of\") + 17,\n                    ftch.lastIndexOf(\"\\\\\")\n                  )\n                  .replaceAll(\"`\", \"\")\n                  .replaceAll(\" \", \"\")\n                  .split(\",\");\n                uS(argName, \"enum\", getEnum);\n              }\n              if (ftch.includes(\"missing field\")) {\n                uS(argName, typeItem.type, typeItem.value);\n              }\n            } else {\n              uS(argName, typeItem.type, typeItem.value);\n              clearAsyncInterval(getArg);\n            }\n          }\n        });\n      }\n\n      if (strErr) {\n        if (strErr.includes(\"MethodNotFound\") || res.body.result.result) {\n          clearAsyncInterval(getArg);\n        }\n        if (\n          strErr.includes(\"Requires attached deposit\") ||\n          strErr.includes(\"storage_write\") ||\n          strErr.includes(\"predecessor_account_id\")\n        ) {\n          if (strErr.includes(\"Requires attached deposit\")) {\n            abiMethod[fIndex].deposit = parseInt(strErr.match(/\\d+/)[0]);\n          }\n          abiMethod[fIndex].kind = \"call\";\n          State.update({ cMethod: abiMethod });\n          //clearInterval(getArg);\n        }\n      }\n      setTimeout(() => {\n        clearAsyncInterval(getArg);\n      }, 10000);\n    }, 1000);\n  }\n};\nconst onBtnClickCall = (fName, action, fIndex) => {\n  const abiMethod = state.cMethod;\n  const argMap = abiMethod[fIndex].params.args.map(({ name, value }) => ({\n    [name]: value,\n  }));\n  const args = {};\n  argMap.forEach((item) => {\n    Object.assign(args, item);\n  });\n  if (action === \"view\") {\n    asyncFetch(state.rpcUrl, {\n      body: JSON.stringify({\n        method: \"query\",\n        params: {\n          request_type: \"call_function\",\n          account_id: state.contractAddress,\n          method_name: abiMethod[fIndex].name,\n          args_base64: new Buffer.from(JSON.stringify(args)).toString(\"base64\"),\n          finality: \"final\",\n        },\n        id: 154,\n        jsonrpc: \"2.0\",\n      }),\n      headers: header,\n      method: \"POST\",\n    }).then((res) => {\n      const resb = res.body.result;\n      if (resb.result) {\n        const result = new Buffer.from(resb.result).toString();\n        State.update({\n          res: {\n            [fName]: { value: result, error: false },\n          },\n        });\n      }\n      if (resb.error) {\n        const error = resb.error;\n        State.update({\n          res: {\n            [fName]: { value: error, error: true },\n          },\n        });\n      }\n    });\n  }\n  if (action === \"call\") {\n    if (\n      abiMethod[fIndex].deposit == 0 &&\n      abiMethod[fIndex].gas == 30000000000000\n    ) {\n      Near.call(state.contractAddress, abiMethod[fIndex].name, args);\n    }\n    if (\n      abiMethod[fIndex].deposit > 0 ||\n      abiMethod[fIndex].gas > 30000000000000\n    ) {\n      Near.call(\n        state.contractAddress,\n        abiMethod[fIndex].name,\n        args,\n        abiMethod[fIndex].deposit,\n        abiMethod[fIndex].gas\n      );\n    }\n  }\n};\nreturn (\n  <>\n    <div class=\"container border rounded p-3 border-2\">\n      <h3 class=\"text-center\">Contract</h3>\n      <div class=\"row mb-3\">\n        <div class=\"form-group col-md-10\">\n          <h6 class=\"mb-2\">Contract Address</h6>\n          <input\n            class=\"form-control\"\n            value={state.contractAddress}\n            placeholder=\"Contract Address\"\n            onChange={(e) => cFunc(e, \"address\")}\n          />\n        </div>\n\n        <div class=\"form-group col-md-2\">\n          <label></label>\n          <button\n            onClick={getMethodFromSource}\n            class=\"btn btn-dark form-control \"\n          >\n            \ud83e\uddd9\ud83c\udffb Scan\n          </button>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"form-group col-md-4\">\n          <h6>Method Name</h6>\n          <input\n            type=\"text\"\n            onChange={(e) => cFunc(e, \"name\")}\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-md-4\">\n          <h6>Label</h6>\n          <input\n            type=\"text\"\n            onChange={(e) => cFunc(e, \"label\")}\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-md-2\">\n          <h6>Action</h6>\n          <select class=\"form-control\" onChange={(e) => cFunc(e, \"action\")}>\n            <option value=\"view\" selected>\n              View\n            </option>\n            <option value=\"call\">Call</option>\n          </select>\n        </div>\n        <div class=\"form-group col-md-2\">\n          <label></label>\n          <button onClick={onCreateMethod} class=\"btn btn-dark form-control \">\n            Create\n          </button>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"form-group col-md-4\">\n          {state.cMethod.length > 0 ? (\n            <Widget src={`${cep}/widget/export-button`} props={state} />\n          ) : (\n            <>\n              <label></label>\n              <button class=\"btn btn-dark form-control \">\ud83d\udd3c Export</button>\n            </>\n          )}\n        </div>\n        <div class=\"form-group col-md-4\">\n          {state.cMethod.length > 0 ? (\n            <Widget src={`${cep}/widget/preview-button`} props={state} />\n          ) : (\n            <>\n              <label></label>\n              <button class=\"btn btn-dark form-control \">\ud83d\udc40 Preview</button>\n            </>\n          )}\n        </div>\n        <div class=\"form-group col-md-4\">\n          {state.cMethod.length > 0 ? (\n            <Widget src={`${cep}/widget/save-client-button`} />\n          ) : (\n            <>\n              <label></label>\n              <button class=\"btn btn-dark form-control \"> Save Client</button>\n            </>\n          )}\n        </div>\n      </div>\n      {state.cMerr && (\n        <p class=\"text-danger\" role=\"alert\">\n          {state.cMerr}\n        </p>\n      )}\n    </div>\n    <br />\n    {state.cMethod &&\n      state.cMethod.map((functions, fIndex) => (\n        <div class=\"card mt-2\">\n          <div class=\"card-header\">\n            <div class=\"container\">\n              <div class=\"row\">\n                <div class=\"col-sm-8 pt-2\">\n                  <h6>\n                    {functions.name}\n                    <span class=\"text-info\">\n                      {\"[Custom-Method-Params-Label-Button-Style]\"}\n                    </span>\n                  </h6>\n                </div>\n                <div class=\"col-sm-4 text-end pt-2\">\n                  <button\n                    type=\"button\"\n                    onClick={(e) => cMLabel(e, fIndex, \"remove\")}\n                    class=\"btn-close\"\n                  ></button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"container mb-3\">\n              <div class=\"row mb-3\">\n                <div class=\"form-group col-md-8\">\n                  <div class=\"form-group row mb-2\">\n                    <h6 class=\"col-sm-4 col-form-label\">Method Label</h6>\n                    <div class=\"col-sm-6\">\n                      <input\n                        placeholder=\"Method Label\"\n                        class=\"form-control\"\n                        defaultValue={functions.label || \"\"}\n                        onChange={(e) => cMLabel(e, fIndex, \"method\")}\n                      />\n                    </div>\n                  </div>\n                  <div class=\"form-group row\">\n                    <h6 class=\"col-sm-4 col-form-label\">Button Label</h6>\n                    <div class=\"col-sm-6\">\n                      <input\n                        placeholder=\"Button Label\"\n                        class=\"form-control\"\n                        defaultValue={args.button || \"\"}\n                        onChange={(e) => cMLabel(e, fIndex, \"button\")}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"form-group col-md-2\">\n                  <h6>Arguments</h6>\n                </div>\n                <div class=\"form-group col-md-2\">\n                  <h6>Label</h6>\n                </div>\n                <div class=\"form-group col-md-2\">\n                  <h6>Type</h6>\n                </div>\n                <div class=\"form-group col-md-2\">\n                  <button\n                    class=\"btn btn-secondary btn-sm\"\n                    onClick={(e) => onCreateArgs(functions.name, fIndex)}\n                  >\n                    Add\n                  </button>\n                </div>\n                <div class=\"form-group col-md-2\">\n                  <button\n                    class=\"btn btn-secondary btn-sm\"\n                    onClick={(e) => getArgsFromMethod(functions.name, fIndex)}\n                  >\n                    Detect\n                  </button>\n                </div>\n              </div>\n            </div>\n            {functions.params.args &&\n              functions.params.args.map((args, argIndex) => {\n                return (\n                  <div class=\"container pb-2\">\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-2\">\n                        <input\n                          placeholder=\"Name\"\n                          class=\"form-control\"\n                          defaultValue={args.name || \"\"}\n                          onChange={(e) => cAD(e, fIndex, argIndex, \"name\")}\n                        />\n                      </div>\n                      <div class=\"form-group col-md-2\">\n                        <input\n                          placeholder=\"Label\"\n                          class=\"form-control\"\n                          defaultValue={args.label || \"\"}\n                          onChange={(e) => cAD(e, fIndex, argIndex, \"label\")}\n                        />\n                      </div>\n                      <div class=\"form-group col-md-2\">\n                        <select\n                          defaultValue={args.type_schema.type}\n                          class=\"form-control\"\n                          onChange={(e) => cAD(e, fIndex, argIndex, \"type\")}\n                        >\n                          <option value=\"string\">String</option>\n                          <option value=\"integer\">Number</option>\n                          <option value=\"enum\">Enum</option>\n                          <option value=\"boolean\">Boolean</option>\n                          <option value=\"json\">Json</option>\n                          <option value=\"array\">Array</option>\n                          <option value=\"$ref\">AccountID</option>\n                        </select>\n                      </div>\n                      <div class=\"form-group col-md-4\">\n                        {args.type_schema.type == \"string\" ||\n                        args.type_schema.type == \"$ref\" ||\n                        args.type_schema.type == \"integer\" ||\n                        args.type_schema.type == \"json\" ||\n                        args.type_schema.type == \"array\" ? (\n                          <input\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\n                            class=\"form-control\"\n                            type=\"string\"\n                            placeholder=\"Argument value\"\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                        {args.type_schema.type == \"boolean\" ? (\n                          <select\n                            defaultValue={args.type_schema.type}\n                            class=\"form-control\"\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\n                          >\n                            <option value=\"true\">True</option>\n                            <option value=\"false\">False</option>\n                          </select>\n                        ) : (\n                          \"\"\n                        )}\n                        {args.type_schema.type == \"enum\" ? (\n                          <select\n                            defaultValue={args.type_schema.type}\n                            class=\"form-control\"\n                            onChange={(e) => cAD(e, fIndex, argIndex, \"value\")}\n                          >\n                            {args.enum &&\n                              args.enum.map((item, i) => (\n                                <option value={item}>{item}</option>\n                              ))}\n                          </select>\n                        ) : (\n                          \"\"\n                        )}\n                      </div>\n                      <div class=\"form-group col-md-2\">\n                        <button\n                          type=\"button\"\n                          onClick={(e) => cAD(e, fIndex, argIndex, \"remove\")}\n                          class=\"btn btn-danger btn-sm\"\n                        >\n                          <i class=\"bi bi-trash\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            {functions.kind == \"call\" ? (\n              <>\n                <div class=\"container pb-1 pt-3\">\n                  <div class=\"row\">\n                    <div class=\"form-group col-md-12\">\n                      <h6>Options</h6>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"container\">\n                  <div class=\"row\">\n                    <div class=\"form-group col-md-6\">\n                      <label>Attached deposit</label>\n                      <input\n                        type=\"text\"\n                        defaultValue={\"\" + functions.deposit}\n                        onChange={(e) => cMLabel(e, fIndex, \"deposit\")}\n                        class=\"form-control\"\n                      />\n                    </div>\n                    <div class=\"form-group col-md-6\">\n                      <label>Gas</label>\n                      <input\n                        type=\"text\"\n                        defaultValue=\"30000000000000\"\n                        onChange={(e) => cMLabel(e, fIndex, \"gas\")}\n                        class=\"form-control\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              \"\"\n            )}\n            {state.res[functions.name] && state.res[functions.name] ? (\n              <div\n                className={\n                  state.res[functions.name].error\n                    ? \"alert  alert-danger\"\n                    : \"alert  alert-success\"\n                }\n                role=\"alert\"\n              >\n                {state.res[functions.name].value}\n              </div>\n            ) : (\n              \"\"\n            )}\n            <button\n              class=\"btn btn-dark btn-sm mt-2\"\n              onClick={(e) =>\n                onBtnClickCall(functions.name, functions.kind, fIndex)\n              }\n            >\n              {functions.kind == \"view\" ? \"View\" : \"Call\"}\n            </button>\n          </div>\n        </div>\n      ))}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/magicbuild.near/widget/builder", "fact_widget_deployments_id": "3a92c191d9d1431f1fffd364d308c441", "inserted_timestamp": "2023-10-22T10:23:44.120Z", "modified_timestamp": "2023-10-22T10:23:44.120Z", "__row_index": 56}