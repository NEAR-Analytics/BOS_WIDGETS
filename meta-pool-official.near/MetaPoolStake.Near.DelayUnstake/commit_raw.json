{"tx_hash": "3dBTDSS5shW7aSZ4UEgTqQfffULAGe1nd7FiRtA9hEGu", "action_id_social": "ETqxmof5cT4KokWaCzDRfFNeGmzofUzfjtcqEqJWWqfJ-0-widget", "block_id": 113114222, "block_timestamp": "2024-02-18T23:05:01.123Z", "signer_id": "meta-pool-official.near", "widget_name": "MetaPoolStake.Near.DelayUnstake", "source_code": "const authorId = \"meta-pool-official.near\";\nconst tokenDecimals = 24;\nconst contractId = \"meta-pool.near\";\nconst GAS = \"200000000000000\";\n\nconst { isSignedIn, update, state, handleInputStNear, onClickMaxstNear } =\n  props;\n\nState.init({\n  openModal: false,\n  validation: \"\",\n  nearUsdPrice: null,\n  nearUsdPriceIsFetched: false,\n  metrics: null,\n  metricsIsFetched: false,\n  nearBalance: null,\n  nearBalanceIsFetched: false,\n  stNearBalance: null,\n  stNearBalanceIsFetched: false,\n  EpochInfo: null,\n  EpochInfoIsFetched: false,\n  dataIntervalStarted: false,\n  isStNearMaxSelected: false,\n  action: \"stake\",\n  contractState: null,\n  contractStateIsFetched: false,\n  accountInfo: null,\n  accountInfoIsFetched: false,\n  feeBP: 30,\n});\n\nconst onSubmitDelayedUnstake = () => {\n  // manage register stNEAR - should make a call attached\n  if (state.metrics?.st_near_price) {\n    const amount = state.isStNearMaxSelected\n      ? state.stNearBalance\n      : state.value;\n    const args = {\n      amount: Big(amount)\n        .mul(state.metrics?.st_near_price)\n        .mul(Big(10).pow(tokenDecimals))\n        .toFixed(0),\n    };\n    Near.call(contractId, \"unstake\", args, GAS, 0);\n  }\n};\n\nconst withdrawDelayedUnstake = () => {\n  Near.call(contractId, \"withdraw_unstaked\", args, GAS, 0);\n};\n\nconst getWithdraw = () => {\n  if (state.accountInfo && state.epochInfo) {\n    // if (state.accountInfo.can_withdraw) {\n    //   console.log(\"setIsUnstakeReady(true)\");\n    // } else {\n    console.log(\"setIsUnstakeReady(false)\");\n    // if (state.epochInfo.endOfEpochCached && state.accountInfo) {\n    // const msToEndOfEpoch = Math.max(\n    //   0,\n    //   state.epochInfo.endOfEpochCached.getTime() - new Date().getTime()\n    // );\n    const extraTime =\n      state.accountInfo.unstake_full_epochs_wait_left > 0\n        ? (state.accountInfo.unstake_full_epochs_wait_left - 1) *\n          state.epochInfo.epochDurationMs\n        : 0;\n    // setUnstakeCountdown(\n    //   formatTimeCountdown(Date.now() + msToEndOfEpoch + extraTime + 60*60*1000)\n    // );\n    return `Pending Delayed Unstake - ${Big(state.accountInfo.unstaked).div(\n      Big(10).pow(tokenDecimals)\n    )} NEAR - Available ~${new Date(\n      state.epochInfo.endOfEpochCached.getTime() + extraTime + 60 * 60 * 1000\n    ).toLocaleString()}`;\n    // }\n    // }\n  }\n};\n\nconst StakeContainer = styled.div`\n    width: 100%;\n    max-width: 600px;\n    align-self: center\n  `;\n\nconst StakeForm = styled.div`\nbackground: rgb(12, 34, 70);\nmargin-bottom: -20px;\nborder-bottom-left-radius: 0px;\nborder-bottom-right-radius: 0px;\npadding-bottom: 52px;\nfont-weight: 400;\nfont-size: 12px;\nline-height: 1.6em;\nborder-radius: 20px;\nmargin: 0px;\npadding: 12px 26px 32px 26px;\nbox-shadow: none;\ncolor: #fff;    \n`;\n\nconst StakeFormTopContainer = styled.div`\nmargin-top: 0px;\ndisplay: flex;\nmargin: 10px 0px;\n`;\n\nconst StakeFormTopContainerLeft = styled.div`\nmargin-right: 8px;\nflex-basis: 50%;\n-webkit-box-flex: 1;\nflex-grow: 1;\nfont-size: 12px;\nline-height: 1.6em;\n`;\n\nconst StakeFormTopContainerLeftContent1 = styled.div`\ndisplay: flex;\nflex-direction: row;\n-webkit-box-pack: start;\njustify-content: flex-start;\n-webkit-box-align: center;\nalign-items: center;\n`;\n\nconst StakeFormTopContainerLeftContent1Container = styled.div`\ndisplay: flex;\n-webkit-box-align: center;\nalign-items: center;\n`;\n\nconst StakeFormTopContainerLeftContent2 = styled.div`\nmargin-top: 2px;\nfont-size: 16px;\nline-height: 1.4em;\nfont-weight: 800;\nwhite-space: nowrap;\ndisplay: block;\n`;\n\nconst StakeFormTopContainerCenter = styled.div`\nflex-basis: 50%;\n-webkit-box-flex: 1;\nflex-grow: 1;\nfont-size: 12px;\nline-height: 1.6em;\n`;\n\nconst StakeFormTopContainerCenterContent1 = styled.div`\ndisplay: flex;\nflex-direction: row;\n-webkit-box-pack: start;\njustify-content: center;\n-webkit-box-align: center;\nalign-items: center;\n`;\n\nconst StakeFormTopContainerCenterContent1Container = styled.div`\ndisplay: flex;\n-webkit-box-align: center;\nalign-items: center;\n`;\n\nconst StakeFormTopContainerCenterContent2 = styled.div`\nmargin-top: 2px;\nfont-size: 16px;\nline-height: 1.4em;\nfont-weight: 800;\nwhite-space: nowrap;\ntext-align: center;\ndisplay: block;\n`;\n\nconst StakeFormTopContainerRight = styled.div`\nmargin-left: 8px;\nflex-basis: 50%;\n-webkit-box-flex: 1;\nflex-grow: 1;\nfont-size: 12px;\nline-height: 1.6em;\n`;\n\nconst StakeFormTopContainerRightContent1 = styled.div`\ndisplay: flex;\nflex-direction: row;\n-webkit-box-pack: start;\njustify-content: flex-end;\n-webkit-box-align: center;\nalign-items: center;\n`;\n\nconst StakeFormTopContainerRightContent1Container = styled.div`\ndisplay: flex;\n-webkit-box-align: center;\nalign-items: center;\n`;\n\nconst StakeFormTopContainerRightContent1Text = styled.div`\npadding: 0px 6px;\nfont-weight: 400;\nfont-size: 16px;\nbackground-color: #0002;\nborder: solid 4px #000B;\nborder-radius: 14px;\n`;\n\nconst StakeFormTopContainerRightContent2 = styled.div`\nmargin-top: 2px;\nfont-size: 16px;\nline-height: 1.4em;\nfont-weight: 800;\nwhite-space: nowrap;\ntext-align: end;\ndisplay: block;\n`;\n\nconst StakeFormWrapper = styled.div`\nbackground-color: white;\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nwidth: 100%;\nborder-radius: 16px;\nwidth: 100%;\nalign-items: center;\ndiv {\n  gap: 20px;\n}\npadding: 20px 20px 20px 20px;\nmargin-top: -30px;\nborder:1px solid rgb(212, 224, 231)\n`;\n\nconst ButtonConnectContainer = styled.div`\n    ${\".buttonClass{ width: 100%;  border-radius: 1000px;  font-size: 20px;  font-weight: bold;  padding: 8px 0;  /* transition: all 0.3s ease-in-out;*/display: inline-flex;  align-items: center;  justify-content: center;  user-select: none;  position: relative;  white-space: nowrap;  vertical-align: middle;  line-height: 1.2;  border-radius: 1000px;  font-weight: 400;  min-height: 48px;  text-align: center;  box-sizing: border-box;  padding: 0 24px;  color: rgb(255, 255, 255);  background: rgb(12, 34, 70);  border: 2px solid transparent;  &:disabled { background: rgb(12, 34, 70);    color: white;    cursor: not-allowed } &:hover { border: 4px solid rgb(12, 34, 70);    color:  rgb(12, 34, 70);    background: transparent;    }}\"}\n  `;\n\nreturn (\n  <StakeContainer>\n    <StakeForm>\n      {isSignedIn && (\n        <StakeFormTopContainer>\n          <StakeFormTopContainerLeft>\n            <StakeFormTopContainerLeftContent1>\n              <StakeFormTopContainerLeftContent1Container>\n                <span>Available to Unstake</span>\n              </StakeFormTopContainerLeftContent1Container>\n            </StakeFormTopContainerLeftContent1>\n            <StakeFormTopContainerLeftContent2>\n              <span>\n                {state.stNearBalance\n                  ? (\n                      Math.trunc(parseFloat(state.stNearBalance) * 100000) /\n                      100000\n                    ).toFixed(5)\n                  : \"\"}\n                stNEAR\n              </span>\n            </StakeFormTopContainerLeftContent2>\n          </StakeFormTopContainerLeft>\n\n          <StakeFormTopContainerCenter>\n            <StakeFormTopContainerCenterContent1>\n              <StakeFormTopContainerCenterContent1Container>\n                APY\n              </StakeFormTopContainerCenterContent1Container>\n            </StakeFormTopContainerCenterContent1>\n            <StakeFormTopContainerCenterContent2>\n              {state.metrics\n                ? state.metrics?.st_near_30_day_apy.toFixed(2)\n                : \"...\"}\n              %\n            </StakeFormTopContainerCenterContent2>\n          </StakeFormTopContainerCenter>\n\n          <StakeFormTopContainerRight>\n            <StakeFormTopContainerRightContent1>\n              <StakeFormTopContainerRightContent1Container>\n                <span>NEAR available amount</span>\n              </StakeFormTopContainerRightContent1Container>\n            </StakeFormTopContainerRightContent1>\n            <StakeFormTopContainerRightContent2>\n              <span>\n                {state.nearBalance}\n                NEAR\n              </span>\n            </StakeFormTopContainerRightContent2>\n          </StakeFormTopContainerRight>\n        </StakeFormTopContainer>\n      )}\n    </StakeForm>\n    <StakeFormWrapper>\n      {state.accountInfo &&\n        Big(state.accountInfo.unstaked).gt(0) &&\n        !state.accountInfo.can_withdraw && (\n          <p\n            style={{\n              width: \"100%\",\n              backgroundColor: \"rgb(206, 255, 26)\",\n              textAlign: \"center\",\n              fontWeight: \"700\",\n              padding: \"8px 0\",\n            }}\n          >\n            {getWithdraw()}\n          </p>\n        )}\n      {state.accountInfo &&\n        Big(state.accountInfo.unstaked).gt(0) &&\n        state.accountInfo.can_withdraw && (\n          <div\n            style={{\n              width: \"100%\",\n              backgroundColor: \"rgb(206, 255, 26)\",\n              textAlign: \"center\",\n              fontWeight: \"700\",\n              padding: \"8px\",\n            }}\n          >\n            {`Delayed Unstake available - ${Big(state.accountInfo.unstaked).div(\n              Big(10).pow(tokenDecimals)\n            )} NEAR`}\n            <Widget\n              src={`${authorId}/widget/MetaPoolStake.Common.Button`}\n              props={{\n                disabled: !isSignedIn,\n                onClick: () => withdrawDelayedUnstake(),\n                text: \"Withdraw\",\n              }}\n            />\n          </div>\n        )}\n\n      <Widget\n        src={`${authorId}/widget/MetaPoolStake.Common.Input`}\n        props={{\n          usdPrice:\n            state.nearUsdPrice && state.value\n              ? (state.nearUsdPrice * parseFloat(state.value)).toFixed(2)\n              : \"0\",\n          placeholder: \"Enter stNEAR amount\",\n          value: state.value,\n          onChange: (e) => handleInputStNear(e.target.value),\n          onClickMax: onClickMaxstNear,\n          inputError: state.validation !== \"\",\n          balance: stNearBalance ?? \"-\",\n          iconName: \"stNEAR\",\n          iconUrl:\n            \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n        }}\n      />\n      {state.validation !== \"\" && (\n        <div style={{ fontWeight: 600, color: \"red\" }}>{state.validation}</div>\n      )}\n      <Widget\n        src={`${authorId}/widget/MetaPoolStake.Common.YouWillGet`}\n        props={{\n          value:\n            state.metrics && state.value && parseFloat(state.value) > 0\n              ? (state.value * state.metrics?.st_near_price).toFixed(5)\n              : 0,\n          iconName: \"NEAR\",\n          token: \"stNEAR\",\n          tokenStake: \"NEAR\",\n          iconUrl:\n            \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n        }}\n      />\n      <Widget\n        src={`${authorId}/widget/MetaPoolStake.Common.Button`}\n        props={{\n          disabled: !isSignedIn,\n          onClick: () => onSubmitDelayedUnstake(),\n          text: isSignedIn ? \"Unstake\" : \"Connect wallet\",\n        }}\n      />\n    </StakeFormWrapper>\n    <Widget\n      src={`${authorId}/widget/MetaPoolStake.Common.Popup.Index`}\n      props={{\n        open: state.openModal,\n        title: state.modalTitle,\n        description: state.modalDescription,\n        onClose: () =>\n          update({\n            openModal: false,\n            modalTitle: \"\",\n            modalDescription: \"\",\n          }),\n        authorId,\n      }}\n    />\n  </StakeContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/MetaPoolStake.Near.DelayUnstake", "fact_widget_deployments_id": "fd7bbccd85520a0482cc40d8d09685c6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}