{"tx_hash": "4ZY5Fzx8JrHq73iThnDGCZkbwFk882fXnTFGABXsojMy", "action_id_social": "2RdiGiZoLWH4RtT89E2YF3H98X3SuKmw5eoBDCRf2YaZ-0-widget", "block_id": 100016931, "block_timestamp": "2023-08-30T16:58:53.652Z", "signer_id": "meta-pool-official.near", "widget_name": "MetaPoolStake.wNear.Form", "source_code": "const authorId = \"meta-pool-official.near\";\r\nconst isSignedIn = props.isSignedIn;\r\nconst sender = props.sender;\r\nconst tokenInputBalance = props.tokenInputBalance;\r\nconst tokenInput = props.tokenInput;\r\nconst tokenOutputBalance = props.tokenOutputBalance;\r\nconst tokenOutput = props.tokenOutput;\r\nconst tokenInputUsd = props.tokenInputUsd;\r\nconst tokenOutputUsd = props.tokenOutputUsd;\r\nconst apy = props.apy;\r\nconst inputPlaceholder = props.inputPlaceholder;\r\nconst buttonText = props.buttonText;\r\nconst state = props.state;\r\nconst update = props.update;\r\nconst handleInput = props.handleInput;\r\nconst onSubmit = props.onSubmit;\r\nconst tokenInputIconUrl = props.tokenInputIconUrl;\r\nconst tokenOutputIconUrl = props.tokenOutputIconUrl;\r\nconst onClickMax = props.onClickMax;\r\nconst stakeInfoLeftText = props.stakeInfoLeftText ?? \"Available to stake\";\r\nconst stakeInfoRightText = props.stakeInfoRightText ?? \"Staked amount\";\r\n\r\nconst StakeContainer = styled.div`\r\n    width: 100%;\r\n    max-width: 600px;\r\n    align-self: center\r\n  `;\r\n\r\nconst StakeForm = styled.div`\r\nbackground: rgb(12, 34, 70);\r\nmargin-bottom: -20px;\r\nborder-bottom-left-radius: 0px;\r\nborder-bottom-right-radius: 0px;\r\npadding-bottom: 52px;\r\nfont-weight: 400;\r\nfont-size: 12px;\r\nline-height: 1.6em;\r\nborder-radius: 20px;\r\nmargin: 0px;\r\npadding: 12px 26px 32px 26px;\r\nbox-shadow: none;\r\ncolor: #fff;    \r\n`;\r\n\r\nconst StakeFormTopContainer = styled.div`\r\nmargin-top: 0px;\r\ndisplay: flex;\r\nmargin: 10px 0px;\r\n`;\r\n\r\nconst StakeFormTopContainerLeft = styled.div`\r\nmargin-right: 8px;\r\nflex-basis: 50%;\r\n-webkit-box-flex: 1;\r\nflex-grow: 1;\r\nfont-size: 12px;\r\nline-height: 1.6em;\r\n`;\r\n\r\nconst StakeFormTopContainerLeftContent1 = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\n-webkit-box-pack: start;\r\njustify-content: flex-start;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst StakeFormTopContainerLeftContent1Container = styled.div`\r\ndisplay: flex;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst StakeFormTopContainerLeftContent2 = styled.div`\r\nmargin-top: 2px;\r\nfont-size: 16px;\r\nline-height: 1.4em;\r\nfont-weight: 800;\r\nwhite-space: nowrap;\r\ndisplay: block;\r\n`;\r\n\r\nconst StakeFormTopContainerCenter = styled.div`\r\nflex-basis: 50%;\r\n-webkit-box-flex: 1;\r\nflex-grow: 1;\r\nfont-size: 12px;\r\nline-height: 1.6em;\r\n`;\r\n\r\nconst StakeFormTopContainerCenterContent1 = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\n-webkit-box-pack: start;\r\njustify-content: center;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst StakeFormTopContainerCenterContent1Container = styled.div`\r\ndisplay: flex;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst StakeFormTopContainerCenterContent2 = styled.div`\r\nmargin-top: 2px;\r\nfont-size: 16px;\r\nline-height: 1.4em;\r\nfont-weight: 800;\r\nwhite-space: nowrap;\r\ntext-align: center;\r\ndisplay: block;\r\n`;\r\n\r\nconst StakeFormTopContainerRight = styled.div`\r\nmargin-left: 8px;\r\nflex-basis: 50%;\r\n-webkit-box-flex: 1;\r\nflex-grow: 1;\r\nfont-size: 12px;\r\nline-height: 1.6em;\r\n`;\r\n\r\nconst StakeFormTopContainerRightContent1 = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\n-webkit-box-pack: start;\r\njustify-content: flex-end;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst StakeFormTopContainerRightContent1Container = styled.div`\r\ndisplay: flex;\r\n-webkit-box-align: center;\r\nalign-items: center;\r\n`;\r\n\r\nconst StakeFormTopContainerRightContent1Text = styled.div`\r\npadding: 0px 6px;\r\nfont-weight: 400;\r\nfont-size: 16px;\r\nbackground-color: #0002;\r\nborder: solid 4px #000B;\r\nborder-radius: 14px;\r\n`;\r\n\r\nconst StakeFormTopContainerRightContent2 = styled.div`\r\nmargin-top: 2px;\r\nfont-size: 16px;\r\nline-height: 1.4em;\r\nfont-weight: 800;\r\nwhite-space: nowrap;\r\ntext-align: end;\r\ndisplay: block;\r\n`;\r\n\r\nconst StakeFormWrapper = styled.div`\r\nbackground-color: white;\r\ndisplay: flex;\r\nflex-direction: column;\r\ngap: 20px;\r\nwidth: 100%;\r\nborder-radius: 16px;\r\nwidth: 100%;\r\nalign-items: center;\r\ndiv {\r\n  gap: 20px;\r\n}\r\npadding: 20px 20px 20px 20px;\r\nmargin-top: -30px;\r\nborder:1px solid rgb(212, 224, 231)\r\n`;\r\n\r\nconst ButtonConnectContainer = styled.div`\r\n    ${\".buttonClass{ width: 100%;  border-radius: 1000px;  font-size: 20px;  font-weight: bold;  padding: 8px 0;  /* transition: all 0.3s ease-in-out;*/display: inline-flex;  align-items: center;  justify-content: center;  user-select: none;  position: relative;  white-space: nowrap;  vertical-align: middle;  line-height: 1.2;  border-radius: 1000px;  font-weight: 400;  min-height: 48px;  text-align: center;  box-sizing: border-box;  padding: 0 24px;  color: rgb(255, 255, 255);  background: rgb(12, 34, 70);  border: 2px solid transparent;  &:disabled { background: rgb(12, 34, 70);    color: white;    cursor: not-allowed } &:hover { border: 4px solid rgb(12, 34, 70);    color:  rgb(12, 34, 70);    background: transparent;    }}\"}\r\n  `;\r\n\r\nreturn (\r\n  <StakeContainer>\r\n    <StakeForm>\r\n      {isSignedIn && (\r\n        <StakeFormTopContainer>\r\n          <StakeFormTopContainerLeft>\r\n            <StakeFormTopContainerLeftContent1>\r\n              <StakeFormTopContainerLeftContent1Container>\r\n                <span>{stakeInfoLeftText}</span>\r\n              </StakeFormTopContainerLeftContent1Container>\r\n            </StakeFormTopContainerLeftContent1>\r\n            <StakeFormTopContainerLeftContent2>\r\n              <span>\r\n                {tokenInputBalance ?? (!isSignedIn ? \"0\" : \"...\")}&nbsp;\r\n                {tokenInput}\r\n              </span>\r\n            </StakeFormTopContainerLeftContent2>\r\n          </StakeFormTopContainerLeft>\r\n\r\n          <StakeFormTopContainerCenter>\r\n            <StakeFormTopContainerCenterContent1>\r\n              <StakeFormTopContainerCenterContent1Container>\r\n                APY\r\n              </StakeFormTopContainerCenterContent1Container>\r\n            </StakeFormTopContainerCenterContent1>\r\n            <StakeFormTopContainerCenterContent2>\r\n              {apy ? apy.toFixed(2) : \"...\"}%\r\n            </StakeFormTopContainerCenterContent2>\r\n          </StakeFormTopContainerCenter>\r\n\r\n          <StakeFormTopContainerRight>\r\n            <StakeFormTopContainerRightContent1>\r\n              <StakeFormTopContainerRightContent1Container>\r\n                <span>{stakeInfoRightText}</span>\r\n              </StakeFormTopContainerRightContent1Container>\r\n            </StakeFormTopContainerRightContent1>\r\n            <StakeFormTopContainerRightContent2>\r\n              <span>\r\n                {tokenOutputBalance ?? (!isSignedIn ? \"0\" : \"...\")}\r\n                &nbsp;{tokenOutput}\r\n              </span>\r\n            </StakeFormTopContainerRightContent2>\r\n          </StakeFormTopContainerRight>\r\n        </StakeFormTopContainer>\r\n      )}\r\n    </StakeForm>\r\n    <StakeFormWrapper>\r\n      <Widget\r\n        src={`${authorId}/widget/MetaPoolStake.Common.Input`}\r\n        props={{\r\n          usdPrice:\r\n            tokenInputUsd && state.value\r\n              ? (tokenInputUsd * parseFloat(state.value)).toFixed(2)\r\n              : \"0\",\r\n          placeholder: inputPlaceholder,\r\n          value: state.value,\r\n          onChange: (e) => handleInput(e.target.value),\r\n          onClickMax,\r\n          inputError: state.validation !== \"\",\r\n          balance: tokenInputBalance ?? \"-\",\r\n          iconName: tokenInput,\r\n          iconUrl: tokenInputIconUrl,\r\n        }}\r\n      />\r\n      {state.validation !== \"\" && (\r\n        <div style={{ fontWeight: 600, color: \"red\" }}>{state.validation}</div>\r\n      )}\r\n      <Widget\r\n        src={`${authorId}/widget/MetaPoolStake.Common.YouWillGet`}\r\n        props={{\r\n          value:\r\n            tokenOutputUsd && state.value && parseFloat(state.value) > 0\r\n              ? (state.value / tokenOutputUsd).toFixed(5)\r\n              : 0,\r\n          iconName: tokenOutput,\r\n          token: tokenInput,\r\n          tokenStake: tokenOutput,\r\n          iconUrl: tokenOutputIconUrl,\r\n        }}\r\n      />\r\n      {!!state.sender ? (\r\n          <Widget\r\n            src={`${authorId}/widget/MetaPoolStake.Common.Button`}\r\n            props={{\r\n              onClick: () => onSubmit(),\r\n              disabled: state.loading,\r\n              text: state.loading ? \"Wait...\" :  state.buttonText,\r\n            }}\r\n          />\r\n        ) : (\r\n          <ButtonConnectContainer>\r\n            <Web3Connect\r\n              connectLabel=\"Connect wallet\"\r\n              className=\"buttonClass\"\r\n            />\r\n          </ButtonConnectContainer>\r\n        )}\r\n    </StakeFormWrapper>\r\n    <Widget\r\n      src={`${authorId}/widget/MetaPoolStake.Common.Popup.Index`}\r\n      props={{\r\n        open: state.openModal,\r\n        title: state.modalTitle,\r\n        description: state.modalDescription,\r\n        onClose: () =>\r\n          update({\r\n            openModal: false,\r\n            modalTitle: \"\",\r\n            modalDescription: \"\",\r\n          }),\r\n        authorId,\r\n      }}\r\n    />\r\n  </StakeContainer>\r\n);\r\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/MetaPoolStake.wNear.Form", "fact_widget_deployments_id": "4cb13b77a6aa416c3e1a8b37d72e43ad", "inserted_timestamp": "2023-08-30T18:45:06.740Z", "modified_timestamp": "2023-08-30T18:45:06.740Z", "__row_index": 0}