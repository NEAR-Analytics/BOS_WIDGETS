{"tx_hash": "BMzYXcA3MdYrJtR2p669AwT8RvCapL74UAsKQ3ednkjv", "action_id_social": "CzoP9eeJd8FgV1E5XT9QQSSESnSUnhFTR7cEdJvrwAPk-0-widget", "block_id": 111882371, "block_timestamp": "2024-02-01T21:32:15.728Z", "signer_id": "meta-pool-official.near", "widget_name": "ImprovementProposals.Proposals", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst contractId = props.contractId || \"mpip.meta-pool-dao.near\";\nconst META_VOTE_CONTRACT_ID = \"meta-vote.near\";\nconst authorId = props.authorId || \"meta-pool-official.near\";\nconst proposalsPerPage = props.proposalsPerPage ?? 100; // Number of proposals to fetch at a time\n\nState.init({\n  contractId,\n  proposals: [],\n  proposalsAreFetched: false,\n  lastProposalId: null, // To keep track of the last loaded proposal\n  lastProposalIdIsFetched: false,\n  hasMore: true, // Boolean to know if there are more proposals to load\n  showCreateProposal: false,\n  quorum: null,\n  quorumIsFetched: false,\n  threshold: null,\n  thresholdIsFetched: false,\n  voters: null,\n  votersAreFetched: false,\n  totalHolders: null,\n  totalHoldersIsFetched: false,\n  totalVotingPower: null,\n  totalVotingPowerIsFetched: false,\n});\n\nconst yoctoToNear = (amountYocto) =>\n  new Big(amountYocto).div(new Big(10).pow(24)).toFixed(0);\n\nconst numberWithCommas = (x) =>\n  x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n\nconst loadProposals = () => {\n  // Prevents multiple calls to loadProposals() before the first call is finished\n  if (state.proposals.length > 0 && state.proposals[0].id === lastProposalId)\n    return;\n\n  const fromIndex = Math.max(0, lastProposalId - proposalsPerPage + 1); // Ensures fromIndex is never less than 0\n  const limit = fromIndex === 0 ? lastProposalId + 1 : proposalsPerPage; // Ensure we don't fetch the same proposals twice if fromIndex is 0\n\n  const newProposals = Near.view(contractId, \"get_proposals\", {\n    from_index: fromIndex,\n    limit: limit,\n  });\n  if (newProposals === null) return;\n\n  State.update({\n    ...state,\n    hasMore: fromIndex > 0,\n    proposals: [...state.proposals, ...newProposals.reverse()],\n    filteredData: [...state.proposals, ...newProposals.reverse()],\n    lastProposalId: fromIndex - 1,\n    isLoading: false,\n  });\n};\n\nconst onChangeData = (_data) => {\n  State.update({ filteredData: _data.result });\n};\n\nif (!state.totalVotingPowerIsFetched) {\n  Near.asyncView(\n    META_VOTE_CONTRACT_ID,\n    \"get_total_voting_power\",\n    {},\n    \"final\",\n    false\n  ).then((totalVotingPower) =>\n    State.update({ totalVotingPower, totalVotingPowerIsFetched: true })\n  );\n}\n\nif (!state.lastProposalIdIsFetched) {\n  Near.asyncView(contractId, \"get_last_proposal_id\", {}, \"final\", false).then(\n    (lastProposalId) =>\n      State.update({ lastProposalId, lastProposalIdIsFetched: true })\n  );\n}\n\nif (!state.proposalsAreFetched) {\n  Near.asyncView(\n    contractId,\n    \"get_proposals\",\n    { from_index: 0, limit: proposalsPerPage },\n    \"final\",\n    false\n  ).then((proposals) => {\n    console.log(\"proposals\", proposals);\n    State.update({ proposals, proposalsAreFetched: true });\n  });\n}\n\nif (!state.quorumIsFetched) {\n  Near.asyncView(contractId, \"get_quorum_floor\", {}, \"final\", false).then(\n    (quorum) =>\n      State.update({ quorum: parseInt(quorum), quorumIsFetched: true })\n  );\n}\n\nif (!state.thresholdIsFetched) {\n  Near.asyncView(contractId, \"get_proposal_threshold\", {}, \"final\", false).then(\n    (threshold) =>\n      State.update({\n        threshold: yoctoToNear(threshold),\n        thresholdIsFetched: true,\n      })\n  );\n}\n\nif (!state.votersAreFetched) {\n  Near.asyncView(contractId, \"get_total_voters\", {}, \"final\", false).then(\n    (voters) =>\n      State.update({ voters: parseInt(voters), votersAreFetched: true })\n  );\n}\n\nif (!state.totalHoldersIsFetched) {\n  Near.asyncView(\n    META_VOTE_CONTRACT_ID,\n    \"get_voters_count\",\n    {},\n    \"final\",\n    false\n  ).then((totalHolders) => {\n    console.log(\"total holders\", totalHolders);\n    State.update({\n      totalHolders: parseInt(totalHolders),\n      totalHoldersIsFetched: true,\n    });\n  });\n}\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  gap: 0.5em;\n  row-gap: 1.25em;\n  width: 100%;\n\n  & > div {\n    display: flex;\n    flex-direction: row;\n    align-items: stretch;\n    justify-content: center;\n    flex-shrink: 0;\n    width: 100%;\n\n    @media (min-width: 768px) {\n      width: ${({ full }) => (full ? \"100%\" : \"49%\")};\n    }\n\n    @media (min-width: 2560px) {\n      width: ${({ full }) => (full ? \"100%\" : \"32%\")};\n    }\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: flex-start;\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 0.9em;\n`;\n\nconst Filter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  gap: 1em;\n`;\nconst Metrics = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  width: 100%;\n  gap: 0.5em;\n  div {\n    width: 25%;\n  }\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    div {\n        width: 100%;\n      }\n  \n  }\n`;\n\nconst Section = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  padding-bottom: 1.5em;\n  gap: 1.5em;\n  h3 {\n    font-style: normal;\n    font-weight: 700;\n    font-size: 1.5em;\n    line-height: 36px;\n    color: #000000;\n  }\n  @media (max-width: 600px) {\n    flex-direction: column;\n   }\n`;\n\nif (\n  !state.proposalsAreFetched ||\n  !state.quorumIsFetched ||\n  !state.thresholdIsFetched ||\n  !state.votersAreFetched ||\n  !state.totalHoldersIsFetched ||\n  !state.totalVotingPowerIsFetched\n) {\n  return <>Loading...</>;\n}\nconst quorumToReach =\n  (parseInt(yoctoToNear(state.totalVotingPower)) * state.quorum) / 100 / 100;\nconst quorumToReachPercentage = state.quorum / 100;\nreturn (\n  <Container>\n    <Section>\n      <h3>Proposals metrics</h3>\n      <Metrics>\n        <Widget\n          src={`${authorId}/widget/Governance.Metric.Card`}\n          props={{\n            value: (\n              <>{numberWithCommas(parseInt(quorumToReach.toFixed(0)))} VP </>\n            ),\n            label: (\n              <>\n                Quorum ({quorumToReachPercentage}% of total VP){\" \"}\n                <i class=\"bi bi-info-circle\" />\n              </>\n            ),\n            tooltip:\n              \"A quorum is the minimum number of voting power required for a governing body to approve a proposal. \",\n          }}\n        />\n        <Widget\n          src={`${authorId}/widget/Governance.Metric.Card`}\n          props={{\n            value: <>{numberWithCommas(state.threshold)} VP</>,\n            label: (\n              <>\n                Proposal threshold {q} <i class=\"bi bi-info-circle\" />\n              </>\n            ),\n            tooltip:\n              \"Proposal thresholds are the criteria someone needs to meet in order to introduce a proposal that will be voted on.\",\n          }}\n        />\n        <Widget\n          src={`${authorId}/widget/Governance.Metric.Card`}\n          props={{\n            value: (\n              <>\n                {numberWithCommas(state.voters)} /{\" \"}\n                {numberWithCommas(state.totalHolders)}\n              </>\n            ),\n            label: (\n              <>\n                Voters / VP Holders <i class=\"bi bi-info-circle\" />\n              </>\n            ),\n            tooltip:\n              \"Numbers of active voters / Number of accounts with voting power\",\n          }}\n        />\n      </Metrics>\n    </Section>\n    <Section>\n      <h3>All Proposals</h3>\n      <Widget\n        src={`${authorId}/widget/Common.Button`}\n        props={{\n          children: (\n            <>\n              <i className=\"bi bi-16 bi-plus-lg\"></i>\n              Create Proposal\n            </>\n          ),\n          onClick: () => State.update({ tab: \"createproposal\", content: \"\" }),\n          variant: \"success\",\n          href: `/${authorId}/widget/ImprovementProposals?tab=createproposal`,\n        }}\n      />\n    </Section>\n    {/* FILTERS NOT IMPLEMENTED YET\n        <Filters>\n            <Widget\n                src={`${authorId}/widget/Common.SearchInput`}\n                props={{ search: state.search, update: (s) => State.update(s) }}\n            />\n\n       \n            <Filter>\n                <Widget\n                    src={`${authorId}/widget/Common.Filter`}\n                    props={{\n                        name: \"Status\",\n                        options: [\n                            { id: \"all\", text: \"All\", href: \"#\" },\n                            { id: \"idea\", text: \"Idea\", href: \"#\" },\n                            { id: \"draft\", text: \"Draft\", href: \"#\" },\n                            { id: \"review\", text: \"Review\", href: \"#\" },\n                            { id: \"voting\", text: \"Voting\", href: \"#\" },\n                            { id: \"inactive\", text: \"Inactive\", href: \"#\" },\n                            { id: \"finalized\", text: \"Finalized\", href: \"#\" },\n                        ],\n                        selected: \"all\",\n                        update: (id) => alert(id),\n                    }}\n                />\n                <Widget\n                    src={`${authorId}/widget/Common.Filter`}\n                    props={{\n                        name: \"Sort by\",\n                        options: [\n                            { id: \"proposalId\", text: \"Proposal Id\", href: \"#\" },\n                            { id: \"title\", text: \"Proposal Title\", href: \"#\" },\n                        ],\n                        selected: \"proposalId\",\n                        update: (id) => alert(id),\n                    }}\n                />\n            </Filter>\n        </Filters>\n         */}\n    <div class=\"table-responsive w-100 mt-2\">\n      <Widget\n        src={`meta-pool-official.near/widget/ImprovementProposals.ProposalsTable`}\n        props={{\n          proposals: state.proposals,\n          update: props.update,\n          authorId,\n          contractId,\n        }}\n      />\n    </div>\n  </Container>\n);\n", "metadata": {"fork_of": "meta-pool-official.near/widget/ImprovementProposals.Proposals@99928128"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/ImprovementProposals.Proposals", "fact_widget_deployments_id": "0eeeca48b1f347782415e4b4a6149935", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}