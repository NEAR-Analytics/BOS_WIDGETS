{"tx_hash": "DqiHZ3PeSDzHazKSRuoC5spCFNqazFNzPPLXV2h1LaQ2", "action_id_social": "3dZqMQw5YMSDZxCLNn2YfHJZdxy6J3U8a38pCrm8vvP7-0-widget", "block_id": 99928128, "block_timestamp": "2023-08-29T12:43:16.536Z", "signer_id": "meta-pool-official.near", "widget_name": "ImprovementProposals.Proposals", "source_code": "const accountId = props.accountId ?? context.accountId;\r\nconst contractId = props.contractId || \"v006.mpip.near\";\r\nconst META_VOTE_CONTRACT_ID = \"meta-vote.near\";\r\nconst authorId = props.authorId || \"manzanal.near\";\r\nconst proposalsPerPage = props.proposalsPerPage ?? 100; // Number of proposals to fetch at a time\r\n\r\nState.init({\r\n  contractId,\r\n  proposals: [],\r\n  proposalsAreFetched: false,\r\n  lastProposalId: null, // To keep track of the last loaded proposal\r\n  lastProposalIdIsFetched: false,\r\n  hasMore: true, // Boolean to know if there are more proposals to load\r\n  showCreateProposal: false,\r\n  quorum: null,\r\n  quorumIsFetched: false,\r\n  threshold: null,\r\n  thresholdIsFetched: false,\r\n  voters: null,\r\n  votersAreFetched: false,\r\n  totalHolders: null,\r\n  totalHoldersIsFetched: false,\r\n  totalVotingPower: null,\r\n  totalVotingPowerIsFetched: false,\r\n});\r\n\r\nconst yoctoToNear = (amountYocto) =>\r\n  new Big(amountYocto).div(new Big(10).pow(24)).toFixed(0);\r\n\r\nconst numberWithCommas = (x) =>\r\n  x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\r\nconst loadProposals = () => {\r\n  // Prevents multiple calls to loadProposals() before the first call is finished\r\n  if (state.proposals.length > 0 && state.proposals[0].id === lastProposalId)\r\n    return;\r\n\r\n  const fromIndex = Math.max(0, lastProposalId - proposalsPerPage + 1); // Ensures fromIndex is never less than 0\r\n  const limit = fromIndex === 0 ? lastProposalId + 1 : proposalsPerPage; // Ensure we don't fetch the same proposals twice if fromIndex is 0\r\n\r\n  const newProposals = Near.view(contractId, \"get_proposals\", {\r\n    from_index: fromIndex,\r\n    limit: limit,\r\n  });\r\n  if (newProposals === null) return;\r\n\r\n  State.update({\r\n    ...state,\r\n    hasMore: fromIndex > 0,\r\n    proposals: [...state.proposals, ...newProposals.reverse()],\r\n    filteredData: [...state.proposals, ...newProposals.reverse()],\r\n    lastProposalId: fromIndex - 1,\r\n    isLoading: false,\r\n  });\r\n};\r\n\r\nconst onChangeData = (_data) => {\r\n  State.update({ filteredData: _data.result });\r\n};\r\n\r\nif (!state.totalVotingPowerIsFetched) {\r\n  Near.asyncView(\r\n    META_VOTE_CONTRACT_ID,\r\n    \"get_total_voting_power\",\r\n    {},\r\n    \"final\",\r\n    false\r\n  ).then((totalVotingPower) =>\r\n    State.update({ totalVotingPower, totalVotingPowerIsFetched: true })\r\n  );\r\n}\r\n\r\nif (!state.lastProposalIdIsFetched) {\r\n  Near.asyncView(contractId, \"get_last_proposal_id\", {}, \"final\", false).then(\r\n    (lastProposalId) =>\r\n      State.update({ lastProposalId, lastProposalIdIsFetched: true })\r\n  );\r\n}\r\n\r\nif (!state.proposalsAreFetched) {\r\n  Near.asyncView(\r\n    contractId,\r\n    \"get_proposals\",\r\n    { from_index: 0, limit: proposalsPerPage },\r\n    \"final\",\r\n    false\r\n  ).then((proposals) => {\r\n    console.log(\"proposals\", proposals);\r\n    State.update({ proposals, proposalsAreFetched: true });\r\n  });\r\n}\r\n\r\nif (!state.quorumIsFetched) {\r\n  Near.asyncView(contractId, \"get_quorum_floor\", {}, \"final\", false).then(\r\n    (quorum) =>\r\n      State.update({ quorum: parseInt(quorum), quorumIsFetched: true })\r\n  );\r\n}\r\n\r\nif (!state.thresholdIsFetched) {\r\n  Near.asyncView(contractId, \"get_proposal_threshold\", {}, \"final\", false).then(\r\n    (threshold) =>\r\n      State.update({\r\n        threshold: yoctoToNear(threshold),\r\n        thresholdIsFetched: true,\r\n      })\r\n  );\r\n}\r\n\r\nif (!state.votersAreFetched) {\r\n  Near.asyncView(contractId, \"get_total_voters\", {}, \"final\", false).then(\r\n    (voters) =>\r\n      State.update({ voters: parseInt(voters), votersAreFetched: true })\r\n  );\r\n}\r\n\r\nif (!state.totalHoldersIsFetched) {\r\n  Near.asyncView(\r\n    META_VOTE_CONTRACT_ID,\r\n    \"get_voters_count\",\r\n    {},\r\n    \"final\",\r\n    false\r\n  ).then((totalHolders) => {\r\n    console.log(\"total holders\", totalHolders);\r\n    State.update({\r\n      totalHolders: parseInt(totalHolders),\r\n      totalHoldersIsFetched: true,\r\n    });\r\n  });\r\n}\r\n\r\nconst ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: stretch;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  gap: 0.5em;\r\n  row-gap: 1.25em;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: stretch;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n    width: 100%;\r\n\r\n    @media (min-width: 768px) {\r\n      width: ${({ full }) => (full ? \"100%\" : \"49%\")};\r\n    }\r\n\r\n    @media (min-width: 2560px) {\r\n      width: ${({ full }) => (full ? \"100%\" : \"32%\")};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst Filters = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 0.9em;\r\n`;\r\n\r\nconst Filter = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 1em;\r\n`;\r\nconst Metrics = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  width: 100%;\r\n  gap: 0.5em;\r\n  div {\r\n    width: 25%;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    div {\r\n        width: 100%;\r\n      }\r\n  \r\n  }\r\n`;\r\n\r\nconst Section = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  padding-bottom: 1.5em;\r\n  gap: 1.5em;\r\n  h3 {\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 1.5em;\r\n    line-height: 36px;\r\n    color: #000000;\r\n  }\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n   }\r\n`;\r\n\r\nif (\r\n  !state.proposalsAreFetched ||\r\n  !state.quorumIsFetched ||\r\n  !state.thresholdIsFetched ||\r\n  !state.votersAreFetched ||\r\n  !state.totalHoldersIsFetched ||\r\n  !state.totalVotingPowerIsFetched\r\n) {\r\n  return <>Loading...</>;\r\n}\r\nconst quorumToReach =\r\n  (parseInt(yoctoToNear(state.totalVotingPower)) * state.quorum) / 100 / 100;\r\nconst quorumToReachPercentage = state.quorum / 100;\r\nreturn (\r\n  <Container>\r\n    <Section>\r\n      <h3>Proposals metrics</h3>\r\n      <Metrics>\r\n        <Widget\r\n          src={`${authorId}/widget/Governance.Metric.Card`}\r\n          props={{\r\n            value: (\r\n              <>{numberWithCommas(parseInt(quorumToReach.toFixed(0)))} VP </>\r\n            ),\r\n            label: (\r\n              <>\r\n                Quorum ({quorumToReachPercentage}% of total VP){\" \"}\r\n                <i class=\"bi bi-info-circle\" />\r\n              </>\r\n            ),\r\n            tooltip:\r\n              \"A quorum is the minimum number of voting power required for a governing body to approve a proposal. \",\r\n          }}\r\n        />\r\n        <Widget\r\n          src={`${authorId}/widget/Governance.Metric.Card`}\r\n          props={{\r\n            value: <>{numberWithCommas(state.threshold)} VP</>,\r\n            label: (\r\n              <>\r\n                Proposal threshold {q} <i class=\"bi bi-info-circle\" />\r\n              </>\r\n            ),\r\n            tooltip:\r\n              \"Proposal thresholds are the criteria someone needs to meet in order to introduce a proposal that will be voted on.\",\r\n          }}\r\n        />\r\n        <Widget\r\n          src={`${authorId}/widget/Governance.Metric.Card`}\r\n          props={{\r\n            value: (\r\n              <>\r\n                {numberWithCommas(state.voters)} /{\" \"}\r\n                {numberWithCommas(state.totalHolders)}\r\n              </>\r\n            ),\r\n            label: (\r\n              <>\r\n                Voters / VP Holders <i class=\"bi bi-info-circle\" />\r\n              </>\r\n            ),\r\n            tooltip:\r\n              \"Numbers of active voters / Number of accounts with voting power\",\r\n          }}\r\n        />\r\n      </Metrics>\r\n    </Section>\r\n    <Section>\r\n      <h3>All Proposals</h3>\r\n      <Widget\r\n        src={`${authorId}/widget/Common.Button`}\r\n        props={{\r\n          children: (\r\n            <>\r\n              <i className=\"bi bi-16 bi-plus-lg\"></i>\r\n              Create Proposal\r\n            </>\r\n          ),\r\n          onClick: () => State.update({ tab: \"createproposal\", content: \"\" }),\r\n          variant: \"success\",\r\n          href: `/meta-pool-official.near/widget/ImprovementProposals?tab=createproposal`,\r\n        }}\r\n      />\r\n    </Section>\r\n    {/* FILTERS NOT IMPLEMENTED YET\r\n        <Filters>\r\n            <Widget\r\n                src={`${authorId}/widget/Common.SearchInput`}\r\n                props={{ search: state.search, update: (s) => State.update(s) }}\r\n            />\r\n\r\n       \r\n            <Filter>\r\n                <Widget\r\n                    src={`${authorId}/widget/Common.Filter`}\r\n                    props={{\r\n                        name: \"Status\",\r\n                        options: [\r\n                            { id: \"all\", text: \"All\", href: \"#\" },\r\n                            { id: \"idea\", text: \"Idea\", href: \"#\" },\r\n                            { id: \"draft\", text: \"Draft\", href: \"#\" },\r\n                            { id: \"review\", text: \"Review\", href: \"#\" },\r\n                            { id: \"voting\", text: \"Voting\", href: \"#\" },\r\n                            { id: \"inactive\", text: \"Inactive\", href: \"#\" },\r\n                            { id: \"finalized\", text: \"Finalized\", href: \"#\" },\r\n                        ],\r\n                        selected: \"all\",\r\n                        update: (id) => alert(id),\r\n                    }}\r\n                />\r\n                <Widget\r\n                    src={`${authorId}/widget/Common.Filter`}\r\n                    props={{\r\n                        name: \"Sort by\",\r\n                        options: [\r\n                            { id: \"proposalId\", text: \"Proposal Id\", href: \"#\" },\r\n                            { id: \"title\", text: \"Proposal Title\", href: \"#\" },\r\n                        ],\r\n                        selected: \"proposalId\",\r\n                        update: (id) => alert(id),\r\n                    }}\r\n                />\r\n            </Filter>\r\n        </Filters>\r\n         */}\r\n    <div class=\"table-responsive w-100 mt-2\">\r\n      <Widget\r\n        src={`meta-pool-official.near/widget/ImprovementProposals.ProposalsTable`}\r\n        props={{\r\n          proposals: state.proposals,\r\n          update: props.update,\r\n          authorId,\r\n          contractId,\r\n        }}\r\n      />\r\n    </div>\r\n  </Container>\r\n);\r\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/ImprovementProposals.Proposals", "fact_widget_deployments_id": "340fb5d195c90f3fa6f5153fe66c1d92", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}