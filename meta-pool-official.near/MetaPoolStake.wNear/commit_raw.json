{"tx_hash": "3Hk5TL5zycDH1ReAsEa1AFswYP6532XHxNJDrVYJLhdK", "action_id_social": "74RT7FA4j65BGhNZ9VmpNXXBGmgGPma34dcjnzHBz5gw-0-widget", "block_id": 100456878, "block_timestamp": "2023-09-05T16:32:33.984Z", "signer_id": "meta-pool-official.near", "widget_name": "MetaPoolStake.wNear", "source_code": "const accountId = context.accountId;\nconst authorId = \"meta-pool-official.near\";\nconst tokenDecimals = 18;\nconst wNearContractId = \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\";\nconst stNearContractId = \"0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30\";\n\nState.init({\n  openModal: false,\n  validation: \"\",\n  nearUsdPrice: null,\n  nearUsdPriceIsFetched: false,\n  metrics: null,\n  metricsIsFetched: false,\n  wNearBalance: null,\n  wNearBalanceIsFetched: false,\n  stNearBalance: null,\n  stNearBalanceIsFetched: false,\n  dataIntervalStarted: false,\n  action: \"stake\", // \"\n});\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 1313161554) {\n  return <p>Switch to Aurora</p>;\n}\n\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst iface = new ethers.utils.Interface(abi);\n\nconst fetchMetrics = () => {\n  asyncFetch(\"https://validators.narwallets.com/metrics_json\").then((resp) => {\n    if (resp) {\n      console.log(\"@metrics\", resp?.body);\n      State.update({ metrics: resp?.body ?? \"...\", metricsIsFetched: true });\n    }\n  });\n};\n\nconst fetchNearPrice = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\"\n  ).then((resp) => {\n    const nearUsdPrice = resp?.body?.near.usd;\n    if (nearUsdPrice && !isNaN(nearUsdPrice)) {\n      console.log(\"@nearPrice\", nearUsdPrice);\n      State.update({\n        nearUsdPrice: Number(nearUsdPrice),\n        nearUsdPriceIsFetched: true,\n      });\n    }\n  });\n};\n\nconst getStNearBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: stNearContractId,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      const balance = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n      State.update({\n        stNearBalance: balance,\n        stNearBalanceIsFetched: true,\n      });\n    });\n};\n\nconst wNearBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: wNearContractId,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      const balance = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n      State.update({\n        wNearBalance: balance,\n        wNearBalanceIsFetched: true,\n      });\n    });\n};\n\nconst update = (state) => State.update({ state });\n\nconst handleInputNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 wNEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.wNearBalance)) {\n    State.update({\n      validation: \"You don't have enough wNEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst handleInputStNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 stNEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.stNearBalance)) {\n    State.update({\n      validation: \"You don't have enough stNEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst getUserAddress = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 8) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 6, state.sender.length);\n};\n\nconst onClickMaxNear = () => {\n  const value =\n    state.wNearBalance > 0.1\n      ? (parseFloat(state.wNearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputNear(value);\n};\n\nconst onClickMaxStNear = () => {\n  const value =\n    state.stNearBalance > 0.1\n      ? (parseFloat(state.stNearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputStNear(value);\n};\n\n// UPDATE DATA\n\nconst updateData = () => {\n  fetchNearPrice();\n  fetchMetrics();\n  wNearBalance();\n  stNearBalance();\n};\n\nif (!state.dataIntervalStarted) {\n  State.update({ dataIntervalStarted: true });\n\n  setInterval(() => {\n    updateData();\n  }, 10000);\n}\n\nconst SelectionContainer = styled.div`\n    width: 100%;\n    max-width: 600px;\n    align-self: center;\n    background-color: white;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 1.6em;\n    border-radius: 20px;\n    padding: 12px 26px;\n    box-shadow: none;\n    color: #fff;    \n    margin-bottom: 1em;\n    padding: 12px 26px 32px 26px;\n  `;\n\nconst ActionItem = styled.button`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 8px 16px;\n  width: 14em;\n  height:5em;;\n  text-align: left;\n  align-items: center;\n  border: 0.8px solid rgb(215, 224, 228);\n  background: rgb(247, 249, 251);\n  opacity: 0.8;\n\n  border-radius: 24px;\n\n  ${({ active }) =>\n    active\n      ? `\n    background: rgb(206, 255, 26);\n  `\n      : `\n    :hover {\n      background: rgb(215, 224, 228);\n    }\n  `}\n\n\n  div {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst Text = styled.p`\n  color:#000000;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst SelectAction = styled.div`\nborder-bottom-left-radius: 0px;\nborder-bottom-right-radius: 0px;\nborder-radius: 20px;\ndisplay: flex;\nflex-direction: column;\nwidth: 100%;\n`;\n\nconst TokensList = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n`;\n\nconst renderActions = (\n  <SelectAction>\n    <Text>Select action</Text>\n    <TokensList>\n      <ActionItem\n        onClick={() => {\n          State.update({ action: \"stake\" });\n        }}\n        active={state.action == \"stake\"}\n      >\n        <div>Stake</div>\n        <div>\n          <svg\n            focusable=\"false\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"currentColor\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 32 32\"\n            aria-hidden=\"true\"\n          >\n            <path d=\"M16,7,6,17l1.41,1.41L15,10.83V28H2v2H15a2,2,0,0,0,2-2V10.83l7.59,7.58L26,17Z\"></path>\n            <path d=\"M6,8V4H26V8h2V4a2,2,0,0,0-2-2H6A2,2,0,0,0,4,4V8Z\"></path>\n          </svg>\n        </div>\n      </ActionItem>\n      <ActionItem\n        onClick={() => {\n          State.update({ action: \"fast\" });\n        }}\n        active={state.action == \"fast\"}\n      >\n        <div>Fast Unstake</div>\n        <div>\n          <svg\n            focusable=\"false\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"currentColor\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 32 32\"\n            aria-hidden=\"true\"\n          >\n            <path d=\"M18,30H4a2,2,0,0,1-2-2V14a2,2,0,0,1,2-2H18a2,2,0,0,1,2,2V28A2,2,0,0,1,18,30ZM4,14V28H18V14Z\"></path>\n            <path d=\"M25,23H23V9H9V7H23a2,2,0,0,1,2,2Z\"></path>\n            <path d=\"M30,16H28V4H16V2H28a2,2,0,0,1,2,2Z\"></path>\n          </svg>\n        </div>\n      </ActionItem>\n    </TokensList>\n  </SelectAction>\n);\n\nconst render = {\n  stake: (\n    <Widget\n      src={`${authorId}/widget/MetaPoolStake.wNear.Stake`}\n      props={{\n        update,\n        state,\n        isSignedIn,\n        handleInputNear,\n        onClickMaxNear,\n        updateData,\n        sender: state.sender,\n      }}\n    />\n  ),\n  fast: (\n    <Widget\n      src={`${authorId}/widget/MetaPoolStake.wNear.FastUnstake`}\n      props={{\n        update,\n        state,\n        isSignedIn,\n        handleInputStNear,\n        onClickMaxstNear,\n        updateData,\n        sender: state.sender,\n      }}\n    />\n  ),\n}[state.action];\n\nreturn (\n  <>\n    <SelectionContainer>{renderActions}</SelectionContainer>\n    {render}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/MetaPoolStake.wNear", "fact_widget_deployments_id": "16785106d05a649bc7b48259a5044b00", "inserted_timestamp": "2023-09-05T18:37:42.501Z", "modified_timestamp": "2023-09-05T18:37:42.501Z", "__row_index": 0}