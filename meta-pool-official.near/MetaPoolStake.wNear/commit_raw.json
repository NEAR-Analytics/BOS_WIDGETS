{"tx_hash": "JBi32fBpbx6z1VomkYLTciQMJBceQ8BNVRNqELrtz4S4", "action_id_social": "G47g4v25cqc1Vf4ExVpvy2tbhmmjFf72hfRLkpeSHPMs-0-widget", "block_id": 100075518, "block_timestamp": "2023-08-31T11:23:13.067Z", "signer_id": "meta-pool-official.near", "widget_name": "MetaPoolStake.wNear", "source_code": "const accountId = context.accountId;\nconst authorId = \"meta-pool-official.near\";\nconst tokenDecimals = 18;\nconst wNearContractId = \"0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d\";\nconst stNearContractId = \"0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30\";\n\nState.init({\n  openModal: false,\n  validation: \"\",\n  nearUsdPrice: null,\n  nearUsdPriceIsFetched: false,\n  metrics: null,\n  metricsIsFetched: false,\n  wNearBalance: null,\n  wNearBalanceIsFetched: false,\n  stNearBalance: null,\n  stNearBalanceIsFetched: false,\n  dataIntervalStarted: false,\n  token: \"wnear\", // \"near\" | \"wnear\"\n  action: \"stake\", // \"\n});\n\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 5) {\n  return <p>Switch to Aurora</p>;\n}\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\nconst iface = new ethers.utils.Interface(abi);\n\nconst fetchMetrics = () => {\n  asyncFetch(\"https://validators.narwallets.com/metrics_json\").then((resp) => {\n    if (resp) {\n      console.log(\"@metrics\", resp?.body);\n      State.update({ metrics: resp?.body ?? \"...\", metricsIsFetched: true });\n    }\n  });\n};\n\nconst fetchNearPrice = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\"\n  ).then((resp) => {\n    const nearUsdPrice = resp?.body?.near.usd;\n    if (nearUsdPrice && !isNaN(nearUsdPrice)) {\n      console.log(\"@nearPrice\", nearUsdPrice);\n      State.update({\n        nearUsdPrice: Number(nearUsdPrice),\n        nearUsdPriceIsFetched: true,\n      });\n    }\n  });\n};\n\nconst getStNearBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: stNearContractId,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      const balance = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n      State.update({\n        stNearBalance: balance,\n        stNearBalanceIsFetched: true,\n      });\n    });\n};\n\nconst getWNearBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  return Ethers.provider()\n    .call({\n      to: wNearContractId,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      const balance = Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n      State.update({\n        wNearBalance: balance,\n        wNearBalanceIsFetched: true,\n      });\n    });\n};\n\nconst update = (state) => State.update({ state });\n\nconst onSubmitStake = () => {\n  // todo\n};\n\nconst onSubmitFastUnstake = () => {\n  // todo\n};\n\nconst handleInputNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 wNEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.wNearBalance)) {\n    State.update({\n      validation: \"You don't have enough wNEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst handleInputStNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 stNEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.stNearBalance)) {\n    State.update({\n      validation: \"You don't have enough stNEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst getUserAddress = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 8) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 6, state.sender.length);\n};\n\nconst onClickMaxNear = () => {\n  const value =\n    state.wNearBalance > 0.1\n      ? (parseFloat(state.wNearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputNear(value);\n};\n\nconst onClickMaxStNear = () => {\n  const value =\n    state.stNearBalance > 0.1\n      ? (parseFloat(state.stNearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputStNear(value);\n};\n\n// UPDATE DATA\n\nconst updateData = () => {\n  fetchNearPrice();\n  fetchMetrics();\n  getwNearBalance();\n  getStNearBalance();\n};\n\nif (!state.dataIntervalStarted) {\n  State.update({ dataIntervalStarted: true });\n\n  setInterval(() => {\n    updateData();\n  }, 10000);\n}\n\n// parametrize props\nconst allProps = {\n  stake: {\n    tokenInputBalance: state.wNearBalance,\n    tokenInput: \"wNEAR\",\n    tokenOutputBalance: state.stNearBalance,\n    tokenOutput: \"stNEAR\",\n    tokenInputUsd: state.nearUsdPrice,\n    tokenOutputUsd: state.metrics?.st_near_price_usd,\n    apy: state.metrics?.st_near_30_day_apy,\n    inputPlaceholder: \"Enter wNEAR amount\",\n    buttonText: \"Stake now\",\n    handleInput: handleInputNear,\n    tokenInputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n    tokenOutputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n    onClickMax: onClickMaxNear,\n    onSubmit: onSubmitStake,\n  },\n  fast: {\n    tokenInputBalance: state.stNearBalance,\n    tokenInput: \"stNEAR\",\n    tokenOutputBalance: state.wNearBalance,\n    tokenOutput: \"NEAR\",\n    tokenInputUsd: state.metrics?.st_near_price_usd,\n    tokenOutputUsd: state.nearUsdPrice,\n    apy: state.metrics?.st_near_30_day_apy,\n    inputPlaceholder: \"Enter stNEAR amount\",\n    buttonText: \"Unstake\",\n    handleInput: handleInputStNear,\n    tokenOutputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n    tokenInputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n    onClickMax: onClickMaxStNear,\n    onSubmit: onSubmitFastUnstake,\n  },\n}[state.action];\n\n// if (\n//   !state.metricsIsFetched ||\n//   !state.nearUsdPriceIsFetched ||\n//   !state.wNearBalanceIsFetched ||\n//   !state.stNearBalanceIsFetched\n// )\n//   return \"Loading..\";\n\nreturn (\n  <Widget\n    src={`manzanal.near/widget/MetaPoolStake.Container`}\n    props={{\n      update,\n      token: state.token,\n      action: state.action,\n      getUserAddress,\n      children: (\n        <Widget\n          src={`${authorId}/widget/MetaPoolStake.wNear.Form`}\n          props={{ ...allProps, update, state, isSignedIn }}\n        />\n      ),\n    }}\n  />\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/MetaPoolStake.wNear", "fact_widget_deployments_id": "7bd8c456d8d6d76e0f8e3cb778d46d0b", "inserted_timestamp": "2023-08-31T13:26:50.701Z", "modified_timestamp": "2023-08-31T13:26:50.701Z", "__row_index": 2}