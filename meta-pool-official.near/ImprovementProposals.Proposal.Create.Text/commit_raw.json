{"tx_hash": "GGyususJy26YBKsGnfuboNMz796W4RUFN3vHhVzB8bS8", "action_id_social": "BKjGPM3831kCwNcVKb6ZwmiFidtud8zv5D2PtpsaxeLv-0-widget", "block_id": 111882450, "block_timestamp": "2024-02-01T21:33:44.222Z", "signer_id": "meta-pool-official.near", "widget_name": "ImprovementProposals.Proposal.Create.Text", "source_code": "const accountId = props.accountId ?? context.accountId;\nconst authorId = props.authorId || \"meta-pool-official.near\";\nconst contractId = props.contractId || \"mpip.meta-pool-dao.near\";\nconst META_VOTE_CONTRACT_ID = \"meta-vote.near\";\nconst edit = props.edit ?? false;\nconst mpip_id = props.mpip_id ?? null;\nconst update = props.update;\nif (!accountId) {\n  return \"Please connect your NEAR wallet :)\";\n}\n\nState.init({\n  title: null,\n  titleError: null,\n  shortDescription: null,\n  shortDescriptionError: null,\n  description: null,\n  descriptionError: null,\n  functionCall: \"\",\n  functionCallError: \"\",\n  proposalIsFetched: false,\n  isValid: false,\n  proposalThresholdIsFetched: false,\n  thresholdPassed: false,\n  allVotingPower: null,\n  allVotingPowerIsFetched: false,\n  storageRequired: null,\n  storageRequiredIsFetched: false,\n});\n\nconst yoctoToNear = (amountYocto) =>\n  new Big(amountYocto).div(new Big(10).pow(24)).toFixed(0);\n\nconst nearToYocto = (n) => {\n  let by1e6 = Math.round(n * 1e6).toString(); // near * 1e6 - round\n  let yoctosText = by1e6 + \"0\".repeat(18); //  mul by 1e18 => yoctos = near * 1e(6+18)\n  return yoctosText;\n};\n\nif (edit && !state.proposalIsFetched) {\n  Near.asyncView(\n    contractId,\n    \"get_proposal\",\n    { mpip_id: parseInt(mpip_id) },\n    \"final\",\n    false\n  ).then((proposal) => {\n    console.log(\"description\", proposal.body);\n    State.update({\n      title: proposal.title,\n      shortDescription: proposal.short_description,\n      description: proposal.body,\n      proposalIsFetched: true,\n    });\n  });\n}\n\nif (!state.allVotingPowerIsFetched) {\n  Near.asyncView(\n    META_VOTE_CONTRACT_ID,\n    \"get_all_locking_positions\",\n    { voter_id: context.accountId },\n    \"final\",\n    false\n  ).then((allLockingPositions) => {\n    const voting_power = allLockingPositions.reduce(\n      (accumulator, lockingPosition) =>\n        lockingPosition.is_locked\n          ? accumulator + parseInt(lockingPosition.voting_power)\n          : accumulator,\n      0\n    );\n    const votingPowerYocto = voting_power.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n    });\n    State.update({\n      allVotingPower: votingPowerYocto,\n      allVotingPowerIsFetched: true,\n    });\n  });\n}\n\nif (!state.proposalThresholdIsFetched && state.allVotingPowerIsFetched) {\n  Near.asyncView(\n    contractId,\n    \"check_proposal_threshold\",\n    { voting_power: state.allVotingPower },\n    \"final\",\n    false\n  ).then((thresholdPassed) =>\n    State.update({ thresholdPassed, proposalThresholdIsFetched: true })\n  );\n}\n\nif (!state.storageRequiredIsFetched) {\n  Near.asyncView(contractId, \"get_mpip_storage_near\", {}, \"final\", false).then(\n    (storageRequired) =>\n      State.update({ storageRequired, storageRequiredIsFetched: true })\n  );\n}\nif (\n  edit &&\n  !state.proposalIsFetched &&\n  !state.proposalThresholdIsFetched &&\n  !state.storageRequiredIsFetched\n)\n  return <>Loading...</>;\n\nconst isEmpty = (string) =>\n  string == undefined || string == null || string == \"\";\n\nconst handleProposal = () => {\n  if (!state.description) {\n    State.update({\n      error: \"Please enter a description\",\n    });\n    return;\n  }\n  const gas = 300000000000000;\n  Near.call([\n    {\n      contractName: contractId,\n      methodName: edit ? \"update_proposal\" : \"create_proposal\",\n      args: {\n        mpip_id: mpip_id ? parseInt(mpip_id) : null,\n        title: state.title,\n        short_description: state.shortDescription,\n        body: state.description,\n        data: \"\",\n        extra: \"\",\n      },\n      gas: gas,\n      deposit: edit ? null : state.storageRequired,\n    },\n  ]);\n};\n\nconst handleFormValid = () => {\n  console.log(\"description\", state.description);\n  console.log(\"proposal threshold check\", state.thresholdPassed);\n  const isValid =\n    !isEmpty(state.title) &&\n    !isEmpty(state.shortDescription) &&\n    !isEmpty(state.description) &&\n    isEmpty(state.titleError) &&\n    isEmpty(state.descriptionError) &&\n    isEmpty(state.shortDescriptionError) &&\n    state.thresholdPassed;\n  State.update({ isValid });\n};\n\nconst onChangeDescription = (description) => {\n  State.update({\n    description,\n  });\n  handleFormValid();\n};\n\nconst onChangeShortDescription = (shortDescription) => {\n  State.update({\n    shortDescription,\n  });\n  handleFormValid();\n};\n\nconst onChangeTitle = (title) => {\n  State.update({ title });\n  handleFormValid();\n};\n\nconst Label = styled.label`\n    font-style: normal;\n    font-weight: 600;\n    font-size: 0.95em;\n    line-height: 1.25em;\n    color: #344054;\n  `;\nconst ButtonsContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nreturn (\n  <>\n    <div className=\"d-flex gap-3 flex-wrap\">\n      <div className=\"d-flex flex-column gap-3\">\n        <h5>Proposer</h5>\n        <Widget\n          src=\"mob.near/widget/Profile.ShortInlineBlock\"\n          props={{ accountId: accountId, tooltip: true }}\n        />\n      </div>\n    </div>\n    <Widget\n      src={`${authorId}/widget/Common.Inputs.Text`}\n      props={{\n        label: \"Title\",\n        placeholder: \"Write a title for your proposal\",\n        value: state.title,\n        onChange: (title) => onChangeTitle(title),\n        validate: () => {\n          if (state.title.length > 80) {\n            State.update({\n              titleError: \"Title must be less than 80 characters\",\n            });\n            return;\n          }\n\n          State.update({ titleError: null });\n        },\n        error: state.titleError,\n      }}\n    />\n\n    <Widget\n      src={`${authorId}/widget/Common.Inputs.Text`}\n      props={{\n        label: \"Short Description\",\n        placeholder: \"Write a one liner about your proposal\",\n        value: state.shortDescription,\n        onChange: (shortDescription) =>\n          onChangeShortDescription(shortDescription),\n        validate: () => {\n          if (state.shortDescription.length > 180) {\n            State.update({\n              shortDescriptionError:\n                \"Short Description must be less than 180 characters\",\n            });\n            return;\n          }\n\n          State.update({ shortDescriptionError: null });\n        },\n        error: state.shortDescriptionError,\n      }}\n    />\n\n    <Label>Description</Label>\n    <Widget\n      src=\"mob.near/widget/MarkdownEditorIframe\"\n      props={{\n        onChange: (description) => onChangeDescription(description),\n        height: \"600px\",\n        initialText: state.description,\n      }}\n    />\n    {state.descriptionError && (\n      <div className=\"text-danger\">{state.descriptionError}</div>\n    )}\n    <Widget\n      src={`${authorId}/widget/Common.Inputs.TextArea`}\n      props={{\n        label: \"Function Call Data (optional)\",\n        placeholder:\n          \"Write the function call to be executed after the proposal is approved.\",\n        value: state.functionCall,\n        onChange: (functionCall) => State.update({ functionCall }),\n        validate: () => {},\n        error: state.functionCallError,\n      }}\n    />\n    <ButtonsContainer>\n      <Widget\n        src={`${authorId}/widget/Common.Button`}\n        props={{\n          children: (\n            <>\n              <i class=\"bi bi-arrow-left\" />\n              Back\n            </>\n          ),\n          onClick: () => State.update({ tabs: \"home\", content: \"\" }),\n          className: \"mt-2\",\n          variant: \"primary\",\n          href: `/${authorId}/widget/ImprovementProposals?tab=home`,\n        }}\n      />\n      <Widget\n        src={`${authorId}/widget/Common.Button`}\n        props={{\n          children: edit ? \"Edit Proposal\" : \"Create Proposal\",\n          onClick: handleProposal,\n          className: \"mt-2\",\n          variant: \"success\",\n          disabled: !state.isValid,\n        }}\n      />\n    </ButtonsContainer>\n    {!state.isValid && !state.thresholdPassed && (\n      <div className=\"text-danger d-flex justify-content-end text-right\">\n        Not enough voting power to create a proposal.\n      </div>\n    )}\n    {state.isValid && !edit && (\n      <div className=\"text-info d-flex justify-content-end text-right\">\n        A deposit of {yoctoToNear(state.storageRequired)} NEAR will be required\n        for storage\n      </div>\n    )}\n  </>\n);\n", "metadata": {"fork_of": "meta-pool-official.near/widget/ImprovementProposals.Proposal.Create.Text@101404547"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/ImprovementProposals.Proposal.Create.Text", "fact_widget_deployments_id": "b0f31e66bc2ed7f851b9fb6e0d04a70d", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}