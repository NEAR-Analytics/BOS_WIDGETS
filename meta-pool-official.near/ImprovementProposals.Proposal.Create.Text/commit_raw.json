{"tx_hash": "FazSdeFji9jttTKDeU2sqQjVkxaVxZpHZ5cX2nSqNCCr", "action_id_social": "B48inoDo3CjADarNNLCBj6mR9xCh61Bv7h1udQpgEiNd-0-widget", "block_id": 101404547, "block_timestamp": "2023-09-18T13:34:31.199Z", "signer_id": "meta-pool-official.near", "widget_name": "ImprovementProposals.Proposal.Create.Text", "source_code": "const accountId = props.accountId ?? context.accountId;\r\nconst authorId = props.authorId || \"manzanal.near\";\r\nconst contractId = props.contractId || \"mpip.meta-pool-dao.near\";\r\nconst META_VOTE_CONTRACT_ID = \"meta-vote.near\";\r\nconst edit = props.edit ?? false;\r\nconst mpip_id = props.mpip_id ?? null;\r\nconst update = props.update;\r\nif (!accountId) {\r\n  return \"Please connect your NEAR wallet :)\";\r\n}\r\n\r\nState.init({\r\n  title: null,\r\n  titleError: null,\r\n  shortDescription: null,\r\n  shortDescriptionError: null,\r\n  description: null,\r\n  descriptionError: null,\r\n  functionCall: \"\",\r\n  functionCallError: \"\",\r\n  proposalIsFetched: false,\r\n  isValid: false,\r\n  proposalThresholdIsFetched: false,\r\n  thresholdPassed: false,\r\n  allVotingPower: null,\r\n  allVotingPowerIsFetched: false,\r\n  storageRequired: null,\r\n  storageRequiredIsFetched: false,\r\n});\r\n\r\nconst yoctoToNear = (amountYocto) =>\r\n  new Big(amountYocto).div(new Big(10).pow(24)).toFixed(0);\r\n\r\nconst nearToYocto = (n) => {\r\n  let by1e6 = Math.round(n * 1e6).toString(); // near * 1e6 - round\r\n  let yoctosText = by1e6 + \"0\".repeat(18); //  mul by 1e18 => yoctos = near * 1e(6+18)\r\n  return yoctosText;\r\n};\r\n\r\nif (edit && !state.proposalIsFetched) {\r\n  Near.asyncView(\r\n    contractId,\r\n    \"get_proposal\",\r\n    { mpip_id: parseInt(mpip_id) },\r\n    \"final\",\r\n    false\r\n  ).then((proposal) => {\r\n    console.log(\"description\", proposal.body);\r\n    State.update({\r\n      title: proposal.title,\r\n      shortDescription: proposal.short_description,\r\n      description: proposal.body,\r\n      proposalIsFetched: true,\r\n    });\r\n  });\r\n}\r\n\r\nif (!state.allVotingPowerIsFetched) {\r\n  Near.asyncView(\r\n    META_VOTE_CONTRACT_ID,\r\n    \"get_all_locking_positions\",\r\n    { voter_id: context.accountId },\r\n    \"final\",\r\n    false\r\n  ).then((allLockingPositions) => {\r\n    const voting_power = allLockingPositions.reduce(\r\n      (accumulator, lockingPosition) =>\r\n        lockingPosition.is_locked\r\n          ? accumulator + parseInt(lockingPosition.voting_power)\r\n          : accumulator,\r\n      0\r\n    );\r\n    const votingPowerYocto = voting_power.toLocaleString(\"fullwide\", {\r\n      useGrouping: false,\r\n    });\r\n    State.update({\r\n      allVotingPower: votingPowerYocto,\r\n      allVotingPowerIsFetched: true,\r\n    });\r\n  });\r\n}\r\n\r\nif (!state.proposalThresholdIsFetched && state.allVotingPowerIsFetched) {\r\n  Near.asyncView(\r\n    contractId,\r\n    \"check_proposal_threshold\",\r\n    { voting_power: state.allVotingPower },\r\n    \"final\",\r\n    false\r\n  ).then((thresholdPassed) =>\r\n    State.update({ thresholdPassed, proposalThresholdIsFetched: true })\r\n  );\r\n}\r\n\r\nif (!state.storageRequiredIsFetched) {\r\n  Near.asyncView(contractId, \"get_mpip_storage_near\", {}, \"final\", false).then(\r\n    (storageRequired) =>\r\n      State.update({ storageRequired, storageRequiredIsFetched: true })\r\n  );\r\n}\r\nif (\r\n  edit &&\r\n  !state.proposalIsFetched &&\r\n  !state.proposalThresholdIsFetched &&\r\n  !state.storageRequiredIsFetched\r\n)\r\n  return <>Loading...</>;\r\n\r\nconst isEmpty = (string) =>\r\n  string == undefined || string == null || string == \"\";\r\n\r\nconst handleProposal = () => {\r\n  if (!state.description) {\r\n    State.update({\r\n      error: \"Please enter a description\",\r\n    });\r\n    return;\r\n  }\r\n  const gas = 300000000000000;\r\n  Near.call([\r\n    {\r\n      contractName: contractId,\r\n      methodName: edit ? \"update_proposal\" : \"create_proposal\",\r\n      args: {\r\n        mpip_id: mpip_id ? parseInt(mpip_id) : null,\r\n        title: state.title,\r\n        short_description: state.shortDescription,\r\n        body: state.description,\r\n        data: \"\",\r\n        extra: \"\",\r\n      },\r\n      gas: gas,\r\n      deposit: edit ? null : state.storageRequired,\r\n    },\r\n  ]);\r\n};\r\n\r\nconst handleFormValid = () => {\r\n  console.log(\"description\", state.description);\r\n  console.log(\"proposal threshold check\", state.thresholdPassed);\r\n  const isValid =\r\n    !isEmpty(state.title) &&\r\n    !isEmpty(state.shortDescription) &&\r\n    !isEmpty(state.description) &&\r\n    isEmpty(state.titleError) &&\r\n    isEmpty(state.descriptionError) &&\r\n    isEmpty(state.shortDescriptionError) &&\r\n    state.thresholdPassed;\r\n  State.update({ isValid });\r\n};\r\n\r\nconst onChangeDescription = (description) => {\r\n  State.update({\r\n    description,\r\n  });\r\n  handleFormValid();\r\n};\r\n\r\nconst onChangeShortDescription = (shortDescription) => {\r\n  State.update({\r\n    shortDescription,\r\n  });\r\n  handleFormValid();\r\n};\r\n\r\nconst onChangeTitle = (title) => {\r\n  State.update({ title });\r\n  handleFormValid();\r\n};\r\n\r\nconst Label = styled.label`\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 0.95em;\r\n    line-height: 1.25em;\r\n    color: #344054;\r\n  `;\r\nconst ButtonsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`;\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"d-flex gap-3 flex-wrap\">\r\n      <div className=\"d-flex flex-column gap-3\">\r\n        <h5>Proposer</h5>\r\n        <Widget\r\n          src=\"mob.near/widget/Profile.ShortInlineBlock\"\r\n          props={{ accountId: accountId, tooltip: true }}\r\n        />\r\n      </div>\r\n    </div>\r\n    <Widget\r\n      src={`${authorId}/widget/Common.Inputs.Text`}\r\n      props={{\r\n        label: \"Title\",\r\n        placeholder: \"Write a title for your proposal\",\r\n        value: state.title,\r\n        onChange: (title) => onChangeTitle(title),\r\n        validate: () => {\r\n          if (state.title.length > 80) {\r\n            State.update({\r\n              titleError: \"Title must be less than 80 characters\",\r\n            });\r\n            return;\r\n          }\r\n\r\n          State.update({ titleError: null });\r\n        },\r\n        error: state.titleError,\r\n      }}\r\n    />\r\n\r\n    <Widget\r\n      src={`${authorId}/widget/Common.Inputs.Text`}\r\n      props={{\r\n        label: \"Short Description\",\r\n        placeholder: \"Write a one liner about your proposal\",\r\n        value: state.shortDescription,\r\n        onChange: (shortDescription) =>\r\n          onChangeShortDescription(shortDescription),\r\n        validate: () => {\r\n          if (state.shortDescription.length > 180) {\r\n            State.update({\r\n              shortDescriptionError:\r\n                \"Short Description must be less than 180 characters\",\r\n            });\r\n            return;\r\n          }\r\n\r\n          State.update({ shortDescriptionError: null });\r\n        },\r\n        error: state.shortDescriptionError,\r\n      }}\r\n    />\r\n\r\n    <Label>Description</Label>\r\n    <Widget\r\n      src=\"mob.near/widget/MarkdownEditorIframe\"\r\n      props={{\r\n        onChange: (description) => onChangeDescription(description),\r\n        height: \"600px\",\r\n        initialText: state.description,\r\n      }}\r\n    />\r\n    {state.descriptionError && (\r\n      <div className=\"text-danger\">{state.descriptionError}</div>\r\n    )}\r\n    <Widget\r\n      src={`${authorId}/widget/Common.Inputs.TextArea`}\r\n      props={{\r\n        label: \"Function Call Data (optional)\",\r\n        placeholder:\r\n          \"Write the function call to be executed after the proposal is approved.\",\r\n        value: state.functionCall,\r\n        onChange: (functionCall) => State.update({ functionCall }),\r\n        validate: () => {},\r\n        error: state.functionCallError,\r\n      }}\r\n    />\r\n    <ButtonsContainer>\r\n      <Widget\r\n        src={`${authorId}/widget/Common.Button`}\r\n        props={{\r\n          children: (\r\n            <>\r\n              <i class=\"bi bi-arrow-left\" />\r\n              Back\r\n            </>\r\n          ),\r\n          onClick: () => State.update({ tabs: \"home\", content: \"\" }),\r\n          className: \"mt-2\",\r\n          variant: \"primary\",\r\n          href: `/meta-pool-official.near/widget/ImprovementProposals?tab=home`,\r\n        }}\r\n      />\r\n      <Widget\r\n        src={`${authorId}/widget/Common.Button`}\r\n        props={{\r\n          children: edit ? \"Edit Proposal\" : \"Create Proposal\",\r\n          onClick: handleProposal,\r\n          className: \"mt-2\",\r\n          variant: \"success\",\r\n          disabled: !state.isValid,\r\n        }}\r\n      />\r\n    </ButtonsContainer>\r\n    {!state.isValid && !state.thresholdPassed && (\r\n      <div className=\"text-danger d-flex justify-content-end text-right\">\r\n        Not enough voting power to create a proposal.\r\n      </div>\r\n    )}\r\n    {state.isValid && !edit && (\r\n      <div className=\"text-info d-flex justify-content-end text-right\">\r\n        A deposit of {yoctoToNear(state.storageRequired)} NEAR will be required\r\n        for storage\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/ImprovementProposals.Proposal.Create.Text", "fact_widget_deployments_id": "2e76bfd89775293ada6ef0d50551d52b", "inserted_timestamp": "2023-09-18T15:18:52.872Z", "modified_timestamp": "2023-09-18T15:18:52.872Z", "__row_index": 0}