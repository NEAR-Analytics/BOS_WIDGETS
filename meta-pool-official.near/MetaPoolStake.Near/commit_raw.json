{"tx_hash": "6QfbWuB2UbYGjijJirLmLcbExG48CpBkaxeJxaDYuhoZ", "action_id_social": "BYQ6DBAaH81ti7gJ4WG6vxy8YRB5k5jgR356mKmSVfy9-0-widget", "block_id": 100152860, "block_timestamp": "2023-09-01T12:02:50.122Z", "signer_id": "meta-pool-official.near", "widget_name": "MetaPoolStake.Near", "source_code": "const accountId = context.accountId;\nconst authorId = \"meta-pool-official.near\";\nconst isSignedIn = !!accountId;\nconst tokenDecimals = 24;\nconst BIG_ROUND_DOWN = 0;\nconst MIN_BALANCE_CHANGE = 0.5;\nconst contractId = \"meta-pool.near\";\nconst GAS = \"200000000000000\";\nconst ONE_NEAR = new BN(\"1\" + \"0\".repeat(24));\n\nState.init({\n  openModal: false,\n  validation: \"\",\n  nearUsdPrice: null,\n  nearUsdPriceIsFetched: false,\n  metrics: null,\n  metricsIsFetched: false,\n  nearBalance: null,\n  nearBalanceIsFetched: false,\n  stNearBalance: null,\n  stNearBalanceIsFetched: false,\n  dataIntervalStarted: false,\n  token: \"near\", // \"near\" | \"wnear\"\n  action: \"stake\", // \"\n});\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nconst fetchMetrics = () => {\n  asyncFetch(\"https://validators.narwallets.com/metrics_json\").then((resp) => {\n    if (resp) {\n      console.log(\"@metrics\", resp?.body);\n      State.update({ metrics: resp?.body ?? \"...\", metricsIsFetched: true });\n    }\n  });\n};\n\nconst fetchNearPrice = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\"\n  ).then((resp) => {\n    const nearUsdPrice = resp?.body?.near.usd;\n    if (nearUsdPrice && !isNaN(nearUsdPrice)) {\n      console.log(\"@nearPrice\", nearUsdPrice);\n      State.update({\n        nearUsdPrice: Number(nearUsdPrice),\n        nearUsdPriceIsFetched: true,\n      });\n    }\n  });\n};\n\nfunction getStNearBalance(subscribe) {\n  Near.asyncView(\n    contractId,\n    \"ft_balance_of\",\n    {\n      account_id: accountId,\n    },\n    undefined,\n    subscribe\n  ).then((stNearBalanceRaw) => {\n    if (!stNearBalanceRaw) return \"-\";\n    const balance = Big(stNearBalanceRaw).div(Big(10).pow(tokenDecimals));\n    console.log(\"@stNEAR balance\", balance.lt(0) ? \"0\" : balance.toFixed());\n    State.update({\n      stNearBalance: balance.lt(0) ? \"0\" : balance.toFixed(),\n      stNearBalanceIsFetched: true,\n    });\n  });\n}\n\nfunction getNearBalance(onInvalidate) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  };\n  asyncFetch(\"https://rpc.mainnet.near.org\", options).then((res) => {\n    console.log(\"@rpc view account\", res);\n    const { amount, storage_usage } = res?.body?.result;\n    const COMMON_MIN_BALANCE = 0.05;\n\n    let newBalance = \"-\";\n    if (amount) {\n      const availableBalance = Big(amount || 0).minus(\n        Big(storage_usage).mul(Big(10).pow(19))\n      );\n      const balance = availableBalance\n        .div(Big(10).pow(tokenDecimals))\n        .minus(COMMON_MIN_BALANCE);\n      newBalance = balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN);\n    }\n    console.log(\"@near balance\", newBalance);\n    State.update({\n      nearBalance: newBalance,\n      nearBalanceIsFetched: true,\n    });\n    if (onInvalidate) {\n      onInvalidate(nearBalance, newBalance);\n    }\n  });\n}\nconst update = (state) => State.update({ state });\n\nconst onSubmitStake = () => {\n  const deposit = Big(state.value).mul(Big(10).pow(tokenDecimals)).toFixed(0);\n  Near.call(contractId, \"deposit_and_stake\", {}, GAS, deposit);\n};\n\nconst onSubmitDelayedUnstake = () => {\n  // manage register stNEAR - should make a call attached\n  const args = {\n    amount: Big(state.value).mul(Big(10).pow(tokenDecimals)).toFixed(0),\n  };\n  Near.call(contractId, \"unstake\", args, GAS, 0);\n};\n\nconst onSubmitFastUnstake = () => {\n  // manage register stNEAR - should make a call attached\n  const l = Big(state.value).mul(Big(10).pow(tokenDecimals)).toFixed(0);\n  const e = l.mul(state.metrics.st_near_price_usd);\n  const tx = {\n    contractName: contractId,\n    methodName: \"liquid_unstake\",\n    deposit: 0,\n    args: {\n      st_near_to_burn: l.toFixed(0),\n      min_expected_near: e.sub(ONE_NEAR.divn(10)).toFixed(0),\n    },\n  };\n  Near.call([tx]);\n};\n\nconst handleInputNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 NEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.nearBalance)) {\n    State.update({\n      validation: \"You don't have enough NEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst handleInputStNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 stNEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.stNearBalance)) {\n    State.update({\n      validation: \"You don't have enough stNEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst getUserAddress = () => {\n  if (!accountId) return \"\";\n  return accountId.length > 20\n    ? accountId.substring(0, 8) +\n        \"...\" +\n        accountId.substring(accountId.length - 6, accountId.length)\n    : accountId;\n};\n\nconst onClickMaxNear = () => {\n  const value =\n    state.nearBalance > 0.1\n      ? (parseFloat(state.nearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputNear(value);\n};\n\nconst onClickMaxStNear = () => {\n  const value =\n    state.stNearBalance > 0.1\n      ? (parseFloat(state.stNearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputStNear(value);\n};\n\n// UPDATE DATA\n\nconst updateData = () => {\n  fetchNearPrice();\n  fetchMetrics();\n  getNearBalance();\n  getStNearBalance();\n};\n\nif (!state.dataIntervalStarted) {\n  State.update({ dataIntervalStarted: true });\n\n  setInterval(() => {\n    updateData();\n  }, 10000);\n}\n\n// parametrize props\nconst allProps = {\n  stake: {\n    tokenInputBalance: state.nearBalance,\n    tokenInput: \"NEAR\",\n    tokenOutputBalance: state.stNearBalance,\n    tokenOutput: \"stNEAR\",\n    tokenInputUsd: state.nearUsdPrice,\n    tokenOutputUsd: state.metrics?.st_near_price_usd,\n    apy: state.metrics?.st_near_30_day_apy,\n    inputPlaceholder: \"Enter NEAR amount\",\n    buttonText: \"Stake now\",\n    handleInput: handleInputNear,\n    tokenInputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n    tokenOutputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n    onClickMax: onClickMaxNear,\n    onSubmit: onSubmitStake,\n    stakeInfoLeftText: \"Available to Stake\",\n    stakeInforRightText: \"Staked amount\",\n  },\n  delayed: {\n    tokenInputBalance: state.stNearBalance,\n    tokenInput: \"stNEAR\",\n    tokenOutputBalance: state.nearBalance,\n    tokenOutput: \"NEAR\",\n    tokenInputUsd: state.metrics?.st_near_price_usd,\n    tokenOutputUsd: state.nearUsdPrice,\n    apy: state.metrics?.st_near_30_day_apy,\n    inputPlaceholder: \"Enter stNEAR amount\",\n    buttonText: \"Unstake\",\n    handleInput: handleInputStNear,\n    tokenOutputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n    tokenInputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n    onClickMax: onClickMaxStNear,\n    onSubmit: onSubmitDelayedUnstake,\n    stakeInfoLeftText: \"Available to Unstake\",\n    stakeInforRightText: \"NEAR available amount\",\n  },\n  fast: {\n    tokenInputBalance: state.stNearBalance,\n    tokenInput: \"stNEAR\",\n    tokenOutputBalance: state.nearBalance,\n    tokenOutput: \"NEAR\",\n    tokenInputUsd: state.metrics?.st_near_price_usd,\n    tokenOutputUsd: state.nearUsdPrice,\n    apy: state.metrics?.st_near_30_day_apy,\n    inputPlaceholder: \"Enter stNEAR amount\",\n    buttonText: \"Unstake\",\n    handleInput: handleInputStNear,\n    tokenOutputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreid5xjykpqdvinmj432ldrkbjisrp3m4n25n4xefd32eml674ypqly\",\n    tokenInputIconUrl:\n      \"https://ipfs.near.social/ipfs/bafkreigblrju2jzbkezxstqomekvlswl6ksqz56rohwzyoymrfzise7fdq\",\n    onClickMax: onClickMaxStNear,\n    onSubmit: onSubmitFastUnstake,\n    stakeInfoLeftText: \"Available to Unstake\",\n    stakeInforRightText: \"NEAR available amount\",\n  },\n}[state.action];\n\n\nreturn (\n  <Widget\n    src={`${authorId}/widget/MetaPoolStake.Container`}\n    props={{\n      update,\n      token: state.token,\n      action: state.action,\n      getUserAddress,\n      children: (\n        <Widget\n          src={`${authorId}/widget/MetaPoolStake.Near.Form`}\n          props={{ ...allProps, update, state, isSignedIn }}\n        />\n      ),\n    }}\n  />\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/MetaPoolStake.Near", "fact_widget_deployments_id": "4bbb0e8fe532115c227ae699b877bed1", "inserted_timestamp": "2023-09-01T13:51:56.112Z", "modified_timestamp": "2023-09-01T13:51:56.112Z", "__row_index": 18}