{"tx_hash": "GGnhJEGQJdcGUYdkfHrJ5B2rHWbByqhN76HgvzMQWHT1", "action_id_social": "HisgVmwKpVXeXPgbdXDQvn2H7PeQnh8qVjC2N3d45guN-0-widget", "block_id": 113114193, "block_timestamp": "2024-02-18T23:04:22.300Z", "signer_id": "meta-pool-official.near", "widget_name": "MetaPoolStake.Near", "source_code": "const accountId = context.accountId;\nconst authorId = \"meta-pool-official.near\";\nconst isSignedIn = !!accountId;\nconst tokenDecimals = 24;\nconst BIG_ROUND_DOWN = 0;\nconst MIN_BALANCE_CHANGE = 0.5;\nconst contractId = \"meta-pool.near\";\nconst GAS = \"200000000000000\";\nconst ONE_NEAR = new BN(\"1\" + \"0\".repeat(24));\n\nState.init({\n  openModal: false,\n  validation: \"\",\n  nearUsdPrice: null,\n  nearUsdPriceIsFetched: false,\n  metrics: null,\n  metricsIsFetched: false,\n  nearBalance: null,\n  nearBalanceIsFetched: false,\n  stNearBalance: null,\n  stNearBalanceIsFetched: false,\n  EpochInfo: null,\n  EpochInfoIsFetched: false,\n  dataIntervalStarted: false,\n  isStNearMaxSelected: false,\n  action: \"stake\",\n  contractState: null,\n  contractStateIsFetched: false,\n  accountInfo: null,\n  accountInfoIsFetched: false,\n  feeBP: 30,\n});\n\nfunction isValid(a) {\n  if (!a) return false;\n  if (isNaN(Number(a))) return false;\n  if (a === \"\") return false;\n  return true;\n}\n\nfunction getDiscountBasisPoints(liquidity, sell, contractState) {\n  try {\n    if (Big(sell).mul(Big(10).pow(tokenDecimals)).gt(liquidity)) {\n      return contractState.nslp_max_discount_basis_points;\n    }\n\n    const target = Big(contractState.nslp_target);\n    const liq_after = Big(liquidity).sub(\n      Big(sell).mul(Big(10).pow(tokenDecimals))\n    );\n    if (liq_after.gte(target)) {\n      return contractState.nslp_min_discount_basis_points;\n    }\n\n    let range = Big(\n      contractState.nslp_max_discount_basis_points -\n        contractState.nslp_min_discount_basis_points\n    );\n\n    const proportion = range.mul(liq_after).div(target);\n\n    return contractState.nslp_max_discount_basis_points - Number(proportion);\n  } catch (ex) {\n    console.error(ex);\n    return contractState.nslp_current_discount_basis_points;\n  }\n}\n\nconst fetchMetrics = () => {\n  asyncFetch(\"https://validators.narwallets.com/metrics_json\").then((resp) => {\n    if (resp) {\n      console.log(\"@metrics\", resp?.body);\n      State.update({ metrics: resp?.body ?? \"...\", metricsIsFetched: true });\n    }\n  });\n};\n\nconst fetchNearPrice = () => {\n  asyncFetch(\n    \"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\"\n  ).then((resp) => {\n    const nearUsdPrice = resp?.body?.near.usd;\n    if (nearUsdPrice && !isNaN(nearUsdPrice)) {\n      console.log(\"@nearPrice\", nearUsdPrice);\n      State.update({\n        nearUsdPrice: Number(nearUsdPrice),\n        nearUsdPriceIsFetched: true,\n      });\n    }\n  });\n};\n\nfunction getStNearBalance(subscribe) {\n  Near.asyncView(\n    contractId,\n    \"ft_balance_of\",\n    {\n      account_id: accountId,\n    },\n    undefined,\n    subscribe\n  ).then((stNearBalanceRaw) => {\n    if (!stNearBalanceRaw) return \"-\";\n    const balance = Big(stNearBalanceRaw).div(Big(10).pow(tokenDecimals));\n    console.log(\"@stNEAR balance\", balance.lt(0) ? \"0\" : balance.toFixed());\n    State.update({\n      stNearBalance: balance.lt(0) ? \"0\" : balance.toFixed(),\n      stNearBalanceIsFetched: true,\n    });\n  });\n}\n\nfunction getContractState(subscribe) {\n  Near.asyncView(\n    contractId,\n    \"get_contract_state\",\n    {},\n    undefined,\n    subscribe\n  ).then((contractState) => {\n    if (!contractState) return;\n    State.update({\n      contractState: contractState,\n      contractStateIsFetched: true,\n    });\n  });\n}\n\nfunction getAccountInfo(subscribe) {\n  Near.asyncView(\n    contractId,\n    \"get_account_info\",\n    {\n      account_id: accountId,\n    },\n    undefined,\n    subscribe\n  ).then((accountInfo) => {\n    if (!accountInfo) return;\n    State.update({\n      accountInfo: accountInfo,\n      contractStateIsFetched: true,\n    });\n  });\n}\n\nfunction getNearBalance(onInvalidate) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"query\",\n      params: {\n        request_type: \"view_account\",\n        finality: \"final\",\n        account_id: accountId,\n      },\n    }),\n  };\n  asyncFetch(\"https://rpc.mainnet.near.org\", options).then((res) => {\n    console.log(\"@rpc view account\", res);\n    const { amount, storage_usage } = res?.body?.result;\n    const COMMON_MIN_BALANCE = 0.05;\n\n    let newBalance = \"-\";\n    if (amount) {\n      const availableBalance = Big(amount || 0).minus(\n        Big(storage_usage).mul(Big(10).pow(19))\n      );\n      const balance = availableBalance\n        .div(Big(10).pow(tokenDecimals))\n        .minus(COMMON_MIN_BALANCE);\n      newBalance = balance.lt(0) ? \"0\" : balance.toFixed(5, BIG_ROUND_DOWN);\n    }\n    console.log(\"@near balance\", newBalance);\n    State.update({\n      nearBalance: newBalance,\n      nearBalanceIsFetched: true,\n    });\n    if (onInvalidate) {\n      onInvalidate(nearBalance, newBalance);\n    }\n  });\n}\nconst update = (state) => State.update(state);\n\nconst handleInputNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 NEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.nearBalance)) {\n    State.update({\n      validation: \"You don't have enough NEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  State.update({ value });\n};\n\nconst handleInputStNear = (value) => {\n  if (\n    (parseFloat(value) < 1 && parseFloat(value) > 0) ||\n    parseFloat(value) < 0\n  ) {\n    State.update({\n      validation: \"The minimum amount is 1 stNEAR.\",\n    });\n  } else if (parseFloat(value) > parseFloat(state.stNearBalance)) {\n    State.update({\n      validation: \"You don't have enough stNEAR.\",\n    });\n  } else {\n    State.update({\n      validation: \"\",\n    });\n  }\n  const feeBP = state.contractState\n    ? getDiscountBasisPoints(\n        state.contractState.nslp_liquidity,\n        value,\n        state.contractState\n      )\n    : 30;\n  State.update({ value, isStNearMaxSelected: false, feeBP });\n};\n\nconst getUserAddress = () => {\n  if (!accountId) return \"\";\n  return accountId.length > 20\n    ? accountId.substring(0, 8) +\n        \"...\" +\n        accountId.substring(accountId.length - 6, accountId.length)\n    : accountId;\n};\n\nconst onClickMaxNear = () => {\n  const value =\n    state.nearBalance > 0.1\n      ? (parseFloat(state.nearBalance) - 0.1).toFixed(2)\n      : \"0\";\n  handleInputNear(value);\n};\n\nconst onClickMaxstNear = () => {\n  handleInputStNear(\n    (Math.trunc(parseFloat(state.stNearBalance) * 100) / 100).toFixed(2)\n  );\n  State.update({ isStNearMaxSelected: true });\n};\n\nconst getEpochInfo = (prevBlock, startBlock, lastBlock) => {\n  let prev_timestamp = Math.round(prevBlock.header.timestamp / 1e6);\n  let start_block_height = startBlock.header.height;\n  let start_timestamp = Math.round(startBlock.header.timestamp / 1e6);\n  let last_block_timestamp = Math.round(lastBlock.header.timestamp / 1e6);\n\n  if (start_timestamp < new Date().getTime() - 48 * 60 * 60 * 1000) {\n    start_timestamp = new Date().getTime() - 6 * 60 * 60 * 1000;\n  }\n  if (prev_timestamp < new Date().getTime() - 48 * 60 * 60 * 1000) {\n    prev_timestamp = new Date().getTime() - 12 * 60 * 60 * 1000;\n  }\n\n  let length = startBlock.header.height - prevBlock.header.height;\n  let advance;\n  let duration_ms;\n\n  if (length == 0) {\n    length = 43200;\n    duration_ms = 12 * 60 * 60 * 1000;\n    advance =\n      Math.round(\n        Number(\n          Big(lastBlock.header.height)\n            .sub(Big(start_block_height))\n            .mul(Big(1000000))\n            .div(Big(length))\n        )\n      ) / 1000000;\n    start_timestamp = last_block_timestamp - duration_ms * advance;\n    prev_timestamp = start_timestamp - duration_ms;\n  } else {\n    duration_ms = start_timestamp - prev_timestamp;\n  }\n\n  let ends_dtm = new Date(start_timestamp + duration_ms);\n  return { duration_ms, ends_dtm };\n};\n\nfunction fetchEpochInfo() {\n  getLastBlock().then((lastBlock) => {\n    getBlock(lastBlock.body.result.header.next_epoch_id).then((firstBlock) => {\n      getBlock(lastBlock.body.result.header.epoch_id).then((prevBlock) => {\n        const epochCached = getEpochInfo(\n          prevBlock.body.result,\n          firstBlock.body.result,\n          lastBlock.body.result\n        );\n        const newEndOfEpochCached = new Date(epochCached.ends_dtm);\n        const newEpochDurationMs = epochCached.duration_ms;\n        State.update({\n          epochInfo: {\n            endOfEpochCached: newEndOfEpochCached,\n            epochDurationMs: newEpochDurationMs,\n          },\n        });\n      });\n    });\n  });\n}\n\nasync function getLastBlock() {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"block\",\n      params: {\n        finality: \"optimistic\",\n      },\n    }),\n  };\n  return asyncFetch(\"https://rpc.mainnet.near.org\", options);\n}\nasync function getBlock(blockId) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: \"dontcare\",\n      method: \"block\",\n      params: {\n        block_id: blockId,\n      },\n    }),\n  };\n  return asyncFetch(\"https://rpc.mainnet.near.org\", options);\n}\n\n// UPDATE DATA\n\nconst updateData = () => {\n  fetchNearPrice();\n  fetchMetrics();\n  getNearBalance();\n  getStNearBalance();\n  getContractState();\n  getAccountInfo();\n  fetchEpochInfo();\n};\n\nif (!state.dataIntervalStarted) {\n  State.update({ dataIntervalStarted: true });\n  updateData();\n  setInterval(() => {\n    updateData();\n  }, 20000);\n}\n\nconst render = {\n  stake: (\n    <Widget\n      src={`${authorId}/widget/MetaPoolStake.Near.Stake`}\n      props={{\n        update,\n        state,\n        isSignedIn,\n        handleInputNear,\n        onClickMaxNear,\n      }}\n    />\n  ),\n  fast: (\n    <Widget\n      src={`${authorId}/widget/MetaPoolStake.Near.FastUnstake`}\n      props={{\n        update,\n        state,\n        isSignedIn,\n        handleInputStNear,\n        onClickMaxstNear,\n      }}\n    />\n  ),\n  delayed: (\n    <Widget\n      src={`${authorId}/widget/MetaPoolStake.Near.DelayUnstake`}\n      props={{\n        update,\n        state,\n        isSignedIn,\n        handleInputStNear,\n        onClickMaxstNear,\n      }}\n    />\n  ),\n}[state.action];\n\nconst SelectionContainer = styled.div`\n    width: 100%;\n    max-width: 600px;\n    align-self: center;\n    background-color: white;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 1.6em;\n    border-radius: 20px;\n    padding: 12px 26px;\n    box-shadow: none;\n    color: #fff;    \n    margin-bottom: 1em;\n    padding: 12px 26px 32px 26px;\n  `;\n\nconst ActionItem = styled.button`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 8px 16px;\n  width: 14em;\n  height:5em;;\n  text-align: left;\n  align-items: center;\n  border: 0.8px solid rgb(215, 224, 228);\n  background: rgb(247, 249, 251);\n  opacity: 0.8;\n\n  border-radius: 24px;\n\n  ${({ active }) =>\n    active\n      ? `\n    background: rgb(206, 255, 26);\n  `\n      : `\n    :hover {\n      background: rgb(215, 224, 228);\n    }\n  `}\n\n\n  div {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst Text = styled.p`\n  color:#000000;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst SelectAction = styled.div`\nborder-bottom-left-radius: 0px;\nborder-bottom-right-radius: 0px;\nborder-radius: 20px;\ndisplay: flex;\nflex-direction: column;\nwidth: 100%;\n`;\n\nconst TokensList = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n`;\n\nconst renderActions = (\n  <SelectAction>\n    <Text>Select action</Text>\n    <TokensList>\n      <ActionItem\n        onClick={() => {\n          State.update({\n            action: \"stake\",\n            value: \"0\",\n            validation: \"\",\n            isStNearMaxSelected: false,\n          });\n        }}\n        active={state.action == \"stake\"}\n      >\n        <div>Stake</div>\n        <div>\n          <svg\n            focusable=\"false\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"currentColor\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 32 32\"\n            aria-hidden=\"true\"\n          >\n            <path d=\"M16,7,6,17l1.41,1.41L15,10.83V28H2v2H15a2,2,0,0,0,2-2V10.83l7.59,7.58L26,17Z\"></path>\n            <path d=\"M6,8V4H26V8h2V4a2,2,0,0,0-2-2H6A2,2,0,0,0,4,4V8Z\"></path>\n          </svg>\n        </div>\n      </ActionItem>\n      <ActionItem\n        onClick={() => {\n          State.update({\n            action: \"fast\",\n            value: \"0\",\n            validation: \"\",\n            isStNearMaxSelected: false,\n          });\n        }}\n        active={state.action == \"fast\"}\n      >\n        <div>Fast Unstake</div>\n        <div>\n          <svg\n            focusable=\"false\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"currentColor\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 32 32\"\n            aria-hidden=\"true\"\n          >\n            <path d=\"M18,30H4a2,2,0,0,1-2-2V14a2,2,0,0,1,2-2H18a2,2,0,0,1,2,2V28A2,2,0,0,1,18,30ZM4,14V28H18V14Z\"></path>\n            <path d=\"M25,23H23V9H9V7H23a2,2,0,0,1,2,2Z\"></path>\n            <path d=\"M30,16H28V4H16V2H28a2,2,0,0,1,2,2Z\"></path>\n          </svg>\n        </div>\n      </ActionItem>\n\n      <ActionItem\n        onClick={() => {\n          State.update({\n            action: \"delayed\",\n            value: \"0\",\n            validation: \"\",\n            isStNearMaxSelected: false,\n          });\n        }}\n        active={state.action == \"delayed\"}\n      >\n        <div>Delayed Unstake</div>\n        <div>\n          <svg\n            focusable=\"false\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"currentColor\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 32 32\"\n            aria-hidden=\"true\"\n          >\n            <path d=\"M15 19H17V21H15zM15 23H17V25H15z\"></path>\n            <path d=\"M23,11.67V4h3V2H6V4H9v7.67a2,2,0,0,0,.4,1.2L11.75,16,9.4,19.13a2,2,0,0,0-.4,1.2V28H6v2H26V28H23V20.33a2,2,0,0,0-.4-1.2L20.25,16l2.35-3.13A2,2,0,0,0,23,11.67ZM21,4v7H11V4Zm0,16.33V28H11V20.33L14.25,16,12,13h8l-2.25,3Z\"></path>\n          </svg>\n        </div>\n      </ActionItem>\n    </TokensList>\n  </SelectAction>\n);\n\nreturn (\n  <>\n    <SelectionContainer>{renderActions}</SelectionContainer>\n    {render}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meta-pool-official.near/widget/MetaPoolStake.Near", "fact_widget_deployments_id": "3e9b17fc959f0957554fad5f4700129c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}