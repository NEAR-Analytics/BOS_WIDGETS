{"tx_hash": "8bRL5j41je6g8UCXkVwF9ESgEek18srznz2LPnf4Lfr5", "action_id_social": "75aDW8tVDEkaxVvTVk1R69CFKb3ZJzkU928Nc4S46pLj-0-widget", "block_id": 124240948, "block_timestamp": "2024-07-25T18:39:38.948Z", "signer_id": "syi216.near", "widget_name": "EjemploContratoNFT", "source_code": "//States are defined for data management within the component\r\nconst [nftData, setNftData] = useState(undefined);\r\nconst [balance, setBalance] = useState(undefined);\r\nconst [account, setAccount] = useState(undefined);\r\nconst [name, setName] = useState(\"\");\r\nconst [description, setDescription] = useState(\"\");\r\nconst [reference, setReference] = useState(\"\");\r\nState.init({ image: undefined });\r\n\r\n//The NFT contract with which we are going to interact is defined\r\nconst contract =\r\n  \"0xb65348c5e6245b4297334d79b49195ee96530de4262878b5778262373a964ec0\";\r\n//The contract metadata is assigned\r\nconst contractData =\r\n  \"0002000100000000000106000000010b00000000000000010d000000010e0000000120680008186e66745f696f1c496e69744e66740000080128636f6c6c656374696f6e040128436f6c6c656374696f6e000118636f6e6669670c0118436f6e66696700000408186e66745f696f28436f6c6c656374696f6e00000801106e616d65080118537472696e6700012c6465736372697074696f6e080118537472696e6700000800000502000c08186e66745f696f18436f6e66696700000401386d61785f6d696e745f636f756e741001304f7074696f6e3c753132383e00001004184f7074696f6e04045401140108104e6f6e6500000010536f6d6504001400000100001400000507001808186e66745f696f244e6674416374696f6e000118104d696e74080108746f1c011c4163746f724964000138746f6b656e5f6d65746164617461280134546f6b656e4d65746164617461000000104275726e040120746f6b656e5f696414011c546f6b656e4964000100205472616e73666572080108746f1c011c4163746f724964000120746f6b656e5f696414011c546f6b656e49640002001c417070726f7665080108746f1c011c4163746f724964000120746f6b656e5f696414011c546f6b656e4964000300204765744f776e6572040120746f6b656e5f696414011c546f6b656e49640004003c436865636b4966417070726f766564080108746f1c011c4163746f724964000120746f6b656e5f696414011c546f6b656e4964000500001c10106773746418636f6d6d6f6e287072696d6974697665731c4163746f724964000004002001205b75383b2033325d0000200000032000000024002400000503002808186e66745f696f34546f6b656e4d6574616461746100001001106e616d65080118537472696e6700012c6465736372697074696f6e080118537472696e670001146d65646961080118537472696e670001247265666572656e6365080118537472696e6700002c08186e66745f696f204e66744576656e74000118184d696e746564080108746f1c011c4163746f724964000138746f6b656e5f6d65746164617461280134546f6b656e4d65746164617461000000144275726e74040120746f6b656e5f696414011c546f6b656e49640001002c5472616e736665727265640c011066726f6d1c011c4163746f724964000108746f1c011c4163746f724964000120746f6b656e5f696414011c546f6b656e496400020020417070726f7665640c01146f776e65721c011c4163746f724964000140617070726f7665645f6163636f756e741c011c4163746f724964000120746f6b656e5f696414011c546f6b656e4964000300144f776e65720801146f776e65721c011c4163746f724964000120746f6b656e5f696414011c546f6b656e49640004003c436865636b4966417070726f7665640c0108746f1c011c4163746f724964000120746f6b656e5f696414011c546f6b656e4964000120617070726f766564300110626f6f6c000500003000000500003408186e66745f696f28537461746551756572790001240c416c6c00000018436f6e66696700010028436f6c6c656374696f6e000200144f776e65720003003843757272656e74546f6b656e4964000400244f776e657242794964040120746f6b656e5f696414011c546f6b656e496400050038546f6b656e417070726f76616c73040120746f6b656e5f696414011c546f6b656e496400060034546f6b656e4d65746164617461040120746f6b656e5f696414011c546f6b656e49640007002c4f776e6572546f6b656e730401146f776e65721c011c4163746f724964000800003808186e66745f696f2853746174655265706c790001240c416c6c04003c0114537461746500000018436f6e66696704000c0118436f6e66696700010028436f6c6c656374696f6e0400040128436f6c6c656374696f6e000200144f776e657204001c011c4163746f7249640003003843757272656e74546f6b656e4964040014011c546f6b656e4964000400244f776e65724279496404005c013c4f7074696f6e3c4163746f7249643e00050038546f6b656e417070726f76616c7304005c013c4f7074696f6e3c4163746f7249643e00060034546f6b656e4d6574616461746104006001544f7074696f6e3c546f6b656e4d657461646174613e0007002c4f776e6572546f6b656e7304006401504f7074696f6e3c5665633c546f6b656e49643e3e000800003c08186e66745f696f145374617465000020012c6f776e65725f62795f696440015c5665633c28546f6b656e49642c204163746f724964293e00013c746f6b656e5f617070726f76616c7340015c5665633c28546f6b656e49642c204163746f724964293e000150746f6b656e5f6d657461646174615f62795f69644801745665633c28546f6b656e49642c20546f6b656e4d65746164617461293e000140746f6b656e735f666f725f6f776e65725001705665633c284163746f7249642c205665633c546f6b656e49643e293e000120746f6b656e5f696414011c546f6b656e49640001146f776e65721c011c4163746f724964000128636f6c6c656374696f6e040128436f6c6c656374696f6e000118636f6e6669670c0118436f6e66696700004000000244004400000408141c00480000024c004c0000040814280050000002540054000004081c58005800000214005c04184f7074696f6e040454011c0108104e6f6e6500000010536f6d6504001c00000100006004184f7074696f6e04045401280108104e6f6e6500000010536f6d6504002800000100006404184f7074696f6e04045401580108104e6f6e6500000010536f6d650400580000010000\";\r\n\r\n//HTML tags are defined that will be used in the component\r\nconst App = styled.div`\r\n  --margin-app: clamp(16px, 4vw, 24px);\r\n  --h-footer: 60px;\r\n  --bg-card: rgb(25, 25, 25, .9);\r\n  --primary: #0fffc7;\r\n  --gradient: linear-gradient(to right, #22463d, #00f0b8);\r\n\r\n  display: grid;\r\n  place-items: center;\r\n  place-content: center;\r\n  min-height: calc(100dvh - var(--h-footer));\r\n  background: linear-gradient(to top right, #fff, #f5f5f7);\r\n\r\n  * {\r\n    font-family: 'system-ui','Inter', 'Space Grotesk' !important;\r\n  }\r\n\r\n  .wrapper {\r\n    background: var(--bg-card);\r\n    border-radius: .3rem;\r\n    padding: 40px 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 1000px;\r\n\r\n    span {\r\n      color: #fff\r\n    }\r\n  }\r\n\r\n  ::-moz-selection { /* Code for Firefox */\r\n    background: #ccf0e7;\r\n  }\r\n  \r\n  ::selection {\r\n    background: #ccf0e7;\r\n  }\r\n\r\n  .space-between {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n`,\r\n  Input = styled.div`\r\n    display: flex;\r\n    gap: 10px;\r\n    border-radius: .75rem;\r\n    padding: 5px;\r\n    background: #fff;\r\n    box-shadow: 0 0 10px -5px rgb(0,0,0,.4);\r\n\r\n    input {\r\n      background: var(--gradient);\r\n      -webkit-background-clip: text;\r\n      -webkit-text-fill-color: transparent;\r\n      display: inline-block;\r\n      border: none;\r\n      height: 40px;\r\n      font-size: 24px;\r\n      font-weight: 500;\r\n      padding-right: 0;\r\n      margin: 5px;\r\n      \r\n      &::placeholder {\r\n        font-size: 24px;\r\n      }\r\n      \r\n      &:focus {\r\n        box-shadow: none;\r\n      }\r\n    }\r\n  `,\r\n  Btn = styled.button`\r\n    display: inlin-block;\r\n    background: var(--primary);\r\n    border: none;\r\n    border-radius: .7rem;\r\n    font-weight: 600;\r\n    padding-inline: 10px;\r\n    min-height: 45px;\r\n\r\n    :hover {\r\n      opacity: .9;\r\n      filter: grayscale(0.5);\r\n    }\r\n  `,\r\n  Footer = styled.div`\r\n  position: absolute;\r\n  bottom: 50px;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: var(--h-footer);\r\n  padding-inline: var(--margin-app);\r\n  padding-block: 5px;\r\n  background: var(--primary);\r\n\r\n  a {\r\n    color: #000;\r\n    background: #fff;\r\n    padding: 10px 30px;\r\n    border-radius: .75rem;\r\n    translate: 0 -20px;\r\n    box-shadow: 0 0 10px -5px rgb(0,0,0,.4);\r\n  }\r\n  \r\n  #vara-icon {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n`;\r\nreturn (\r\n  <VaraNetwork.Wrapper>\r\n    <App>\r\n      {nftData ? (\r\n        <>\r\n          <div className=\"wrapper\">\r\n            <h3 className=\"text-center mb-4 text-light fw-bold\">\r\n              Mint Non Fungible Tokens\r\n            </h3>\r\n            {account && (\r\n              <div className=\"mb-4 d-flex flex-row gap-2 align-items-center\">\r\n                <p className=\"text-light m-0\">Account:</p>\r\n                <VaraNetwork.Identicon size={30} />\r\n                <p className=\"text-light m-0 fw-semibold\">\r\n                  {account.meta.name}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"d-flex flex-row gap-2\">\r\n              <div className=\"w-50 px-2 d-flex flex-column align-items-center justify-content-center\">\r\n                {state.image ? (\r\n                  <div>\r\n                    <img\r\n                      className=\"rounded mx-auto d-block w-75 mb-2\"\r\n                      src={`https://ipfs.near.social/ipfs/${state.image.cid}`}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <IpfsImageUpload\r\n                  className=\"btn btn-success fw-bold px-5\"\r\n                  image={state.image}\r\n                />\r\n              </div>\r\n              <div className=\"w-50\">\r\n                <div className=\" mb-2\">\r\n                  <p className=\"text-light m-0\">Name:</p>\r\n                  <Input>\r\n                    <input\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    />\r\n                  </Input>\r\n                </div>\r\n                <div className=\" mb-2\">\r\n                  <p className=\"text-light m-0\">Description:</p>\r\n                  <Input>\r\n                    <input\r\n                      value={description}\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    />\r\n                  </Input>\r\n                </div>\r\n                <div className=\" mb-2\">\r\n                  <p className=\"text-light m-0\">Reference:</p>\r\n                  <Input>\r\n                    <input\r\n                      value={reference}\r\n                      onChange={(e) => setReference(e.target.value)}\r\n                    />\r\n                  </Input>\r\n                </div>\r\n                <VaraNetwork.Interaction\r\n                  trigger={({ signTransaction }) => (\r\n                    <>\r\n                      <Btn\r\n                        className=\"mt-4 w-100\"\r\n                        disabled={!account}\r\n                        onClick={() => {\r\n                          //The signTransaction method is executed to create the NFT\r\n                          signTransaction(\r\n                            contract,\r\n                            contractData,\r\n                            {\r\n                              Mint: {\r\n                                to: account.decodedAddress,\r\n                                token_metadata: {\r\n                                  name: name,\r\n                                  description: description,\r\n                                  media: state.image.cid,\r\n                                  reference: reference,\r\n                                },\r\n                              },\r\n                            },\r\n                            899819245,\r\n                            0\r\n                          );\r\n                        }}\r\n                      >\r\n                        Submit\r\n                      </Btn>\r\n                    </>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"wrapper mt-3\">\r\n            <h3 className=\"text-center mb-4 text-light fw-bold\">NFT Gallery</h3>\r\n            <VaraNetwork.Interaction\r\n              trigger={({ readState, getAccountInfo }) => (\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                  <Btn\r\n                    className=\"w-25\"\r\n                    onClick={() => {\r\n                      //The NFTs of the contract are updated\r\n                      let info = readState(contract, contractData, \"all\");\r\n                      info.then((res) => {\r\n                        console.log(res.all);\r\n                        let arr = [];\r\n                        for (\r\n                          let i = 0;\r\n                          i < res.all.tokenMetadataById.length;\r\n                          i++\r\n                        ) {\r\n                          arr.push(\r\n                            res.all.tokenMetadataById[i].concat(\r\n                              res.all.ownerById[i][1]\r\n                            )\r\n                          );\r\n                        }\r\n                        setNftData(arr.sort((a, b) => a[0] - b[0]));\r\n                      });\r\n                    }}\r\n                  >\r\n                    Update NFTs\r\n                  </Btn>\r\n                </div>\r\n              )}\r\n            />\r\n            {nftData.length > 0 ? (\r\n              <div className=\"d-flex flex-row flex-wrap justify-content-start gap-4\">\r\n                {nftData.map((data) => {\r\n                  //The NFTs obtained from the contract are shown\r\n                  return (\r\n                    <div className=\"d-flex align-content-between\">\r\n                      <div className=\"card mx-auto\" style={{ width: \"18rem\" }}>\r\n                        <img\r\n                          src={`https://ipfs.near.social/ipfs/${data[1].media}`}\r\n                          className=\"card-img-top\"\r\n                          alt=\"NFT\"\r\n                        />\r\n                        <div className=\"card-body d-flex flex-column \">\r\n                          <h5 className=\"card-title\">{data[1].name}</h5>\r\n                          <p className=\"card-text\">{data[1].description}</p>\r\n                          <p className=\"card-text text-truncate\">\r\n                            Owner: <b>{data[2]}</b>\r\n                          </p>\r\n                          <p className=\"card-text\">\r\n                            Token ID: <b>{data[0]}</b>\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <h5 className=\"text-center text-light fw-bold\">\r\n                  No NFTs have been created, you can generate one above\r\n                </h5>\r\n              </>\r\n            )}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"wrapper\">\r\n          <h3 className=\"text-center text-white mb-5\">\r\n            Welcome to the example of interaction with a NFT contract in VARA\r\n            Network\r\n          </h3>\r\n          <VaraNetwork.Interaction\r\n            trigger={({ readState, getAccountInfo }) => (\r\n              <>\r\n                <Btn\r\n                  onClick={() => {\r\n                    //The contract is read and the initial states are assigned\r\n                    let varaAccount = getAccountInfo();\r\n                    setAccount(varaAccount);\r\n                    let info = readState(contract, contractData, \"all\");\r\n                    info.then((res) => {\r\n                      console.log(res.all);\r\n                      let arr = [];\r\n                      for (\r\n                        let i = 0;\r\n                        i < res.all.tokenMetadataById.length;\r\n                        i++\r\n                      ) {\r\n                        arr.push(\r\n                          res.all.tokenMetadataById[i].concat(\r\n                            res.all.ownerById[i][1]\r\n                          )\r\n                        );\r\n                      }\r\n                      setNftData(arr.sort((a, b) => a[0] - b[0]));\r\n                    });\r\n                  }}\r\n                >\r\n                  Start widget\r\n                </Btn>\r\n              </>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n    </App>\r\n  </VaraNetwork.Wrapper>\r\n);\r\n", "metadata": {"fork_of": "syi216.near/widget/EjemploContratoNFT@120596224"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/syi216.near/widget/EjemploContratoNFT", "fact_widget_deployments_id": "ad3db15045ac325cca6aa374a68a09df", "inserted_timestamp": "2024-07-25T19:56:12.263Z", "modified_timestamp": "2024-07-25T20:56:50.921Z", "__row_index": 2}