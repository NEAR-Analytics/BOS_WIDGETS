{"tx_hash": "E3DcBzvibNcJMgVtiZkjrdenbMRnyhCGFeHNj9iEfqSg", "action_id_social": "CeUcBPCKSHnr1uTaYQxm1qWQHadDRibsWWs8jTKjLiX-0-widget", "block_id": 120900325, "block_timestamp": "2024-06-11T03:16:40.426Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.IndexTable", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nconst SEC_OF_MS = 1000;\nconst MIN_OF_MS = 60 * SEC_OF_MS;\nconst HOUR_OF_MS = 60 * MIN_OF_MS;\nconst DAY_OF_MS = HOUR_OF_MS * 24;\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://gateway-arbitrum.network.thegraph.com/api/98b4f8ff96be187a889dddcac0e3ef13/subgraphs/id/47RQk8YD4XqgczsgNYSNaWVQLNNwt49DuAuMAxCiLXJZ\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n        nearDecimals: 24,\n        stakingContractName: \"neat-staking.near\",\n        wNearTokenId: \"wrap.near\",\n        refContractId: \"v2.ref-finance.near\",\n        neatPoolId: 4243,\n        firstFarmStartTimeUTC: \"2024-06-03T08:00Z\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.studio.thegraph.com/query/76896/neat-test/version/latest\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n        nearDecimals: 24,\n        stakingContractName: \"neat-staking.testnet\",\n        wNearTokenId: \"wrap.testnet\",\n        refContractId: \"exchange.ref-dev.testnet\",\n        neatPoolId: 728,\n        firstFarmStartTimeUTC: \"2024-06-03T08:00Z\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nconst RPS_MULTIPLIER = 1e24;\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst TableOuter = styled.div``;\nconst TableContainer = styled.div`\n  height: 320px;\n  overflow: hidden;\n`;\n\nconst IndexTableBody = styled.tbody``;\n\nconst IndexTable = styled.table`\n  border-spacing: 10px;\n  width: 100%;\n`;\n\nconst IndexHeaderTr = styled.tr`\n  width: 100%;\n  top: 20px;\n  left: 0;\n`;\n\nconst IndexTd = styled.td`\n  font-size: 14px;\n  color: #fffffff0;\n  max-width: 160px;\n  @media (min-width: 640px) {\n    max-width: auto;\n  }\n`;\n\nconst IndexTh = styled.th`\n  font-size: 14px;\n  color: #ffffffa8;\n  font-weight: 600;\n`;\n\nconst IndexDataTr = styled.tr`\n  background: #18181805;\n  height: 56px;\n`;\n\nconst AddressData = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TableFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst TableRowsAmount = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff66;\n`;\n\nconst TableRowLink = styled(\"Link\")`\n  cursor: pointer;\n  font-weight: 600;\n  &:hover {\n    text-decoration: none;\n    opacity: 0.8;\n  }\n`;\n\nconst TableSortButton = styled.button`\n  color: #fff;\n  border: none;\n  background: transparent;\n  display: flex;\n  align-items: center;\n`;\n\nconst TableDropdownImage = styled.img`\n  width: 20px;\n  height: 20px;\n  margin-left: 8px;\n  transition: all 0.3s ease-in-out;\n  ${(props) =>\n    props.hide &&\n    `\n    opacity: 0;\n  `}\n  ${(props) =>\n    props.up === true &&\n    `\n    transform: rotate(180deg);\n  `}\n`;\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchEventCounts(_tick) {\n  const tick = _tick || \"NEAT\";\n  return asyncFetchFromGraph(`\n    query {\n      eventCounts(where: {id:\"${tick}\"}) {\n        id\n        ticker\n        mintEventCount\n        transferEventCount\n      }\n    }\n  `).then((response) => {\n    if (response.body?.data?.eventCounts) {\n      return response.body.data.eventCounts;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(first: 1000) {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts(first: 1000) {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchOwnTokenInfosAsync(creatorId) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(where:{creatorId:\"${creatorId}\"}) {\n        ticker\n        decimals\n        limit\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getFtWrappers(n, _data) {\n  const i = n ?? 0;\n  const data = _data ?? [];\n  const amount = 500;\n  return Near.asyncView(config.ftWrapperFactory, \"get_ft_wrappers\", {\n    offset: i * amount,\n    limit: amount,\n  })\n    .then((subcontracts) => {\n      if (subcontracts.length < amount) {\n        return [...subcontracts, ...data];\n      } else {\n        return getFtWrappers(i + 1, subcontracts).then((response) => {\n          return [...response, ...data];\n        });\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      return data;\n    });\n}\n\nfunction getNep141Balance(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_wrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getUnwrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_unwrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply).sub(state.nep141TotalSupply).toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\n// type UserReward = {\n//   farmId: string;\n//   status: FarmStatus;\n//   rewardTokenId: string;\n//   amount: string;\n// };\n\n// type FarmStatus = 'NotStarted' | 'Pending' | 'Ended' | 'Closed';\n\n// type RewardsInfo = {\n//   user_id: string;\n//   user_seeds: string;\n//   total_seeds: string;\n//   farm_infos: FarmInfo[];\n// };\n\n// type FarmInfo = {\n//   farm_id: string;\n//   reward_token_id: string;\n//   total_rewards: string;\n//   start_at: number;\n//   end_at: number;\n//   last_distributed_at: number;\n//   rps: string;\n//   status: FarmStatus;\n\n//   user_unclaimed_rewards: string;\n//   user_rps: string;\n// };\n\n/**\n * @param {number} timestamp\n * @param {RewardsInfo} info1\n * @returns UserReward[]\n */\nfunction estimateUserRewards(\n  timestamp,\n  { user_seeds, total_seeds, farm_infos }\n) {\n  const result = [];\n\n  for (const farmInfo of farm_infos) {\n    if (farmInfo.status === \"NotStarted\" || farmInfo.status === \"Closed\") {\n      result.push({\n        farmId: farmInfo.farm_id,\n        status: farmInfo.status,\n        rewardTokenId: farmInfo.reward_token_id,\n        amount: farmInfo.user_unclaimed_rewards,\n      });\n    } else if (farmInfo.status === \"Pending\" || farmInfo.status === \"Ended\") {\n      if (timestamp < farmInfo.last_distributed_at) {\n        throw Error(\"Invalid timestamp\");\n      }\n\n      const totalDuration = farmInfo.end_at - farmInfo.start_at;\n      const rewardsEndTime = Math.min(farmInfo.end_at, timestamp);\n      let duration = rewardsEndTime - farmInfo.last_distributed_at;\n\n      if (farmInfo.rps_frozen) {\n        duration = 0;\n      }\n\n      const rewards = Big(\n        Big(farmInfo.total_rewards)\n          .mul(duration)\n          .div(totalDuration)\n          .toFixed(0, Big.roundDown)\n      );\n\n      const rps = Big(\n        rewards.mul(RPS_MULTIPLIER).div(total_seeds).toFixed(0, Big.roundDown)\n      );\n\n      const newRps = rps.add(farmInfo.rps);\n\n      const userRewards = newRps\n        .sub(farmInfo.user_rps)\n        .mul(user_seeds)\n        .div(RPS_MULTIPLIER)\n        .toFixed(0, Big.roundDown);\n\n      const newUserRewards = Big(userRewards).add(\n        farmInfo.user_unclaimed_rewards\n      );\n\n      result.push({\n        farmId: farmInfo.farm_id,\n        status: farmInfo.status,\n        rewardTokenId: farmInfo.reward_token_id,\n        amount: newUserRewards,\n      });\n    } else {\n      throw Error(`Unexpected farm status: ${farmInfo.status}`);\n    }\n  }\n\n  return result;\n}\n\n// type PoolInfo = {\n//   token_account_ids: string[];\n//   amounts: string[];\n// }\n\n// type Farm = {\n//   reward_token_id: string;\n//   total_rewards: string;\n//   start_at: number;\n//   end_at: number;\n// };\n\n/**\n * getNeatPriceInNear\n * @param {string} contractId\n * @param {number} poolId\n * @param {number} neatDecimals\n * @returns Promise<Big>\n */\nfunction getNeatPriceInNear(contractId, poolId, neatDecimals) {\n  return Near.asyncView(contractId, \"get_pool\", { pool_id: poolId }).then(\n    (pool) =>\n      Big(pool.amounts[0]).div(pool.amounts[1]).mul(Big(10).pow(neatDecimals))\n  );\n}\n\n/**\n * calcFarmApr\n * @param {Farm} wnearFarm\n * @param {Big} totalStakedNeat\n * @param {Big} neatPriceInNear\n * @param {number} neatDecimals\n * @returns void\n */\nfunction calcFarmApr(\n  wnearFarm,\n  totalStakedNeat,\n  neatPriceInNear,\n  neatDecimals\n) {\n  const equivalentTotalStakedNear = totalStakedNeat\n    .mul(neatPriceInNear)\n    .div(Big(10).pow(neatDecimals));\n  if (equivalentTotalStakedNear.eq(0)) {\n    return Big(0);\n  }\n  return Big(wnearFarm.total_rewards)\n    .mul(365 * 86400 * 1000)\n    .div(wnearFarm.end_at - wnearFarm.start_at)\n    .div(equivalentTotalStakedNear);\n}\n\nfunction fetchReleasedAmount() {\n  const accountId = props.accountId || context.accountId;\n  Near.asyncView(config.stakingContractName, \"get_released_seed_of\", {\n    user_id: accountId,\n  })\n    .then((releasedAmountRaw) => {\n      State.update({ releasedAmountRaw });\n      return formatAmount(releasedAmountRaw, config.neatDecimals);\n    })\n    .then((releasedAmount) => State.update({ releasedAmount }));\n}\n\nfunction fetchUserRewards() {\n  const accountId = props.accountId || context.accountId;\n  Near.asyncView(config.stakingContractName, \"get_user_rewards_info\", {\n    user_id: accountId,\n  }).then((rewardsInfo) => {\n    const userRewards = estimateUserRewards(Date.now(), rewardsInfo);\n    State.update({\n      userRewards,\n      userRewardsPositive: userRewards.filter((userReward) =>\n        Big(userReward.amount).gt(0)\n      ),\n    });\n    const rewardsSum = userRewards\n      .filter((reward) => reward.rewardTokenId === config.wNearTokenId)\n      .reduce((prev, cur) => {\n        return prev.add(cur.amount);\n      }, Big(0));\n    const claimableRewards = toLocaleString(\n      Big(rewardsSum).div(Big(10).pow(config.nearDecimals)).toFixed(),\n      4\n    );\n    State.update({ claimableRewards });\n  });\n}\n\nfunction fetchStakingData() {\n  const accountId = props.accountId || context.accountId;\n  // Near.asyncView(config.stakingContractName, \"get_total_unstaked_seeds\").then(\n  //   (unstakedSeeds) => {\n  //     State.update({ unstakedSeeds });\n  //   }\n  // );\n  Near.asyncView(config.stakingContractName, \"get_total_seeds\").then(\n    (totalSeeds) => {\n      State.update({ totalSeeds });\n    }\n  );\n  if (state.totalSeeds) {\n    State.update({\n      neatTvl: formatAmount(state.totalSeeds, config.neatDecimals),\n    });\n  }\n\n  Near.asyncView(config.stakingContractName, \"get_seed_of\", {\n    user_id: accountId,\n  })\n    .then((stakedNeatAmountRaw) => {\n      State.update({ stakedNeatAmountRaw });\n      return formatAmount(stakedNeatAmountRaw, config.neatDecimals);\n    })\n    .then((stakedNeatAmount) => {\n      State.update({ stakedNeatAmount });\n    });\n\n  Near.asyncView(config.stakingContractName, \"get_unstaked_seed_of\", {\n    user_id: accountId,\n  })\n    .then((userUnstakedSeedRaw) => {\n      State.update({ userUnstakedSeedRaw });\n      return formatAmount(userUnstakedSeedRaw, config.neatDecimals);\n    })\n    .then((userUnstakedSeed) => {\n      State.update({ userUnstakedSeed });\n    });\n\n  Near.asyncView(\n    config.stakingContractName,\n    \"get_pending_unstake_end_time_of\",\n    {\n      user_id: accountId,\n    }\n  ).then((end_timestamp) => {\n    const end_date = new Date(end_timestamp);\n    State.update({\n      unstakeFinishedTime: `${end_date.getFullYear()}/${String(\n        end_date.getMonth() + 1\n      ).padStart(2, \"0\")}/${String(end_date.getDate()).padStart(\n        2,\n        \"0\"\n      )} ${String(end_date.getHours()).padStart(2, \"0\")}:${String(\n        end_date.getMinutes()\n      ).padStart(2, \"0\")}`,\n    });\n    const interval = end_timestamp - Date.now();\n    const day = Math.floor(interval / DAY_OF_MS);\n    const hour = Math.floor((interval - day * DAY_OF_MS) / HOUR_OF_MS);\n    if (interval <= 0) {\n      State.update({\n        unstakeRemainingTime: `~0d 0h`,\n      });\n    } else {\n      State.update({\n        unstakeRemainingTime: `~${day}d ${hour}h`,\n      });\n    }\n  });\n\n  if (!state.neatPriceInNear) {\n    getNeatPriceInNear(\n      config.refContractId,\n      config.neatPoolId,\n      config.neatDecimals\n    ).then((neatPriceInNear) => State.update({ neatPriceInNear }));\n  }\n\n  if (!state.openFarms) {\n    Near.asyncView(config.stakingContractName, \"get_open_farms\").then(\n      (openFarms) => State.update({ openFarms })\n    );\n  }\n\n  if (\n    state.totalSeeds &&\n    state.openFarms &&\n    state.neatPriceInNear &&\n    state.openFarmsApr == \"-\"\n  ) {\n    const openFarmsApr = state.openFarms\n      .filter(\n        (openFarm) =>\n          openFarm.reward_token_id === config.wNearTokenId &&\n          openFarm.status === \"Pending\"\n      )\n      .reduce((prev, cur) => {\n        const apr = calcFarmApr(\n          cur,\n          Big(state.totalSeeds),\n          state.neatPriceInNear,\n          config.neatDecimals\n        );\n        return prev.add(apr);\n      }, Big(0));\n    State.update({ openFarmsApr: openFarmsApr.times(100).toFixed(2) + \"%\" });\n  }\n}\n\n\n\nState.init({\n  current: undefined,\n  holderInfos: [],\n  holderCount: undefined,\n});\n\nconst headers = [\"Rank\", \"Account ID\", \"Amount\"];\nconst current = String(state.current ?? \"1\");\nconst totalPage = String(\n  Math.min(\n    5000 / pageAmountOfPage,\n    Math.ceil(Number(state.holderCount ?? 0) / pageAmountOfPage)\n  )\n);\nconst { searchValue, tick } = props;\n\nfetchTokenInfosAsync().then((data) => {\n  State.update({\n    tokenInfos: data.tokenInfos,\n    holderCounts: data.holderCounts,\n  });\n});\n\nconst holdersResponse = fetchFromGraph(`\n  query {\n    holderInfos(\n      skip: ${(current - 1) * pageAmountOfPage}\n      first: ${pageAmountOfPage}\n      where: {\n        ticker: \"${tick}\"\n      }\n      orderBy: amount\n      orderDirection: desc\n    ) {\n      accountId\n      amount\n    }\n  }\n`);\nif (holdersResponse) {\n  if (holdersResponse.body.errors) {\n    State.update({ holderInfos: [] });\n  } else {\n    const holderInfos = holdersResponse.body.data.holderInfos.map(\n      (row, idx) => {\n        const tokenInfo = state.tokenInfos\n          ? state.tokenInfos.find(\n              (tokenInfo) =>\n                tokenInfo.ticker.toUpperCase() === tick.toUpperCase()\n            )\n          : undefined;\n        const decimals = tokenInfo?.decimals;\n        return {\n          rank: (current - 1) * pageAmountOfPage + Number(idx) + 1,\n          address: row.accountId,\n          amount: formatAmount(row.amount, decimals),\n        };\n      }\n    );\n    State.update({ holderInfos });\n  }\n}\nasyncFetchFromGraph(`\n    query {\n      holderCount (id: \"${tick.toUpperCase()}\") {\n        count\n      }\n    }\n  `).then((response) => {\n  if (response.body?.data) {\n    const holderCount = response.body.data.holderCount.count;\n    State.update({ holderCount });\n  }\n});\n\nreturn (\n  <TableOuter>\n    <TableContainer>\n      <IndexTable>\n        <IndexHeaderTr>\n          {headers.map((header) => (\n            <IndexTh key={header}>{header}</IndexTh>\n          ))}\n        </IndexHeaderTr>\n        <IndexTableBody>\n          {state.holderInfos &&\n            state.holderInfos.map((row) => (\n              <IndexDataTr key={row.rank}>\n                <IndexTd>{row.rank}</IndexTd>\n                <IndexTd style={{ paddingRight: \"24px\" }}>\n                  <AddressData>{row.address}</AddressData>\n                </IndexTd>\n                <IndexTd>{row.amount}</IndexTd>\n              </IndexDataTr>\n            ))}\n        </IndexTableBody>\n      </IndexTable>\n    </TableContainer>\n    <TableFooter>\n      <TableRowsAmount>\n        {state.holderCount ?? \"-\"}{\" \"}\n        {Number(state.holderCount ?? 0) !== 1 ? \"holders\" : \"holder\"} in total\n      </TableRowsAmount>\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.Pagination`}\n        props={{\n          current,\n          totalPage,\n          updateCurrentPage: (value) => {\n            State.update({ current: value });\n          },\n        }}\n      />\n    </TableFooter>\n  </TableOuter>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.IndexTable", "fact_widget_deployments_id": "a94263b2ce3349ee55352e5408db9bc1", "inserted_timestamp": "2024-06-11T05:04:29.383Z", "modified_timestamp": "2024-06-11T05:04:29.383Z", "__row_index": 0}