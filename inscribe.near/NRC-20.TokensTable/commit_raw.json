{"tx_hash": "A6voq3yRkV86kHA33fbmpgxQx9pAvrfqVVJHL1PLizJQ", "action_id_social": "8m2BUZ8njXqmk5w1vF1S1QpwTBrLBSaBLdwegj5coDsW-0-widget", "block_id": 112092264, "block_timestamp": "2024-02-04T14:25:13.254Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.TokensTable", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst TableOuter = styled.div``;\nconst TableContainer = styled.div`\n  height: 320px;\n  overflow: hidden;\n`;\n\nconst IndexTableBody = styled.tbody``;\n\nconst IndexTable = styled.table`\n  border-spacing: 10px;\n  width: 100%;\n`;\n\nconst IndexHeaderTr = styled.tr`\n  width: 100%;\n  top: 20px;\n  left: 0;\n`;\n\nconst IndexTd = styled.td`\n  font-size: 14px;\n  color: #fffffff0;\n  max-width: 160px;\n  @media (min-width: 640px) {\n    max-width: auto;\n  }\n`;\n\nconst IndexTh = styled.th`\n  font-size: 14px;\n  color: #ffffffa8;\n  font-weight: 600;\n`;\n\nconst IndexDataTr = styled.tr`\n  background: #18181805;\n  height: 56px;\n`;\n\nconst AddressData = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TableFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst TableRowsAmount = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff66;\n`;\n\nconst TableRowLink = styled(\"Link\")`\n  cursor: pointer;\n  font-weight: 600;\n  &:hover {\n    text-decoration: none;\n    opacity: 0.8;\n  }\n`;\n\nconst TableSortButton = styled.button`\n  color: #fff;\n  border: none;\n  background: transparent;\n  display: flex;\n  align-items: center;\n`;\n\nconst TableDropdownImage = styled.img`\n  width: 20px;\n  height: 20px;\n  margin-left: 8px;\n  transition: all 0.3s ease-in-out;\n  ${(props) =>\n    props.hide &&\n    `\n    opacity: 0;\n  `}\n  ${(props) =>\n    props.up === true &&\n    `\n    transform: rotate(180deg);\n  `}\n`;\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchEventCounts(_tick) {\n  const tick = _tick || \"NEAT\";\n  return asyncFetchFromGraph(`\n    query {\n      eventCounts(where: {id:\"${tick}\"}) {\n        id\n        ticker\n        mintEventCount\n        transferEventCount\n      }\n    }\n  `).then((response) => {\n    if (response.body?.data?.eventCounts) {\n      return response.body.data.eventCounts;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(first: 1000) {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts(first: 1000) {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchOwnTokenInfosAsync(creatorId) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(where:{creatorId:\"${creatorId}\"}) {\n        ticker\n        decimals\n        limit\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getFtWrappers(n, _data) {\n  const i = n ?? 0;\n  const data = _data ?? [];\n  const amount = 500;\n  return Near.asyncView(config.ftWrapperFactory, \"get_ft_wrappers\", {\n    offset: i * amount,\n    limit: amount,\n  })\n    .then((subcontracts) => {\n      if (subcontracts.length < amount) {\n        return [...subcontracts, ...data];\n      } else {\n        return getFtWrappers(i + 1, subcontracts).then((response) => {\n          return [...response, ...data];\n        });\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      return data;\n    });\n}\n\nfunction getNep141Balance(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_wrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getUnwrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_unwrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply)\n    .minus(state.nep141TotalSupply)\n    .toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\nfunction formatProgress(tokenInfo) {\n  return Big(tokenInfo.totalSupply).div(tokenInfo.maxSupply).toNumber();\n}\n\n\n\nState.init({\n  sortBy: \"Holders\", // Deploy Time / Holders\n  orderDirection: \"desc\", // desc / asc\n  hasFetchData: false,\n  currentTab: undefined,\n});\n\nconst { searchValue, currentTab } = props;\n\nfunction updateCurrentTabWhenChanged() {\n  if (currentTab !== state.currentTab) {\n    State.update({\n      currentTab,\n      current: 1,\n    });\n  }\n}\n\nupdateCurrentTabWhenChanged();\n\nfunction compareByDeployTime(a, b, orderDirection) {\n  const t1 = Number(a.createdBlockTimestamp);\n  const t2 = Number(b.createdBlockTimestamp);\n  if (orderDirection === \"desc\") {\n    if (t1 < t2) return 1;\n    else if (t1 > t2) return -1;\n    else return 0;\n  } else {\n    if (t1 < t2) return -1;\n    else if (t1 > t2) return 1;\n    else return 0;\n  }\n}\n\nfunction compareByHolders(a, b, orderDirection, holderCounts) {\n  const h1 = Number(\n    holderCounts.find(\n      (holderCount) =>\n        holderCount.ticker.toUpperCase() == a.ticker.toUpperCase()\n    )?.count ?? \"0\"\n  );\n  const h2 = Number(\n    holderCounts.find(\n      (holderCount) =>\n        holderCount.ticker.toUpperCase() == b.ticker.toUpperCase()\n    )?.count ?? \"0\"\n  );\n  if (orderDirection === \"desc\") {\n    if (h1 < h2) return 1;\n    else if (h1 > h2) return -1;\n    else return 0;\n  } else {\n    if (h1 < h2) return -1;\n    else if (h1 > h2) return 1;\n    else return 0;\n  }\n}\n\nif (!state.hasFetchData) {\n  fetchTokenInfosAsync().then((data) => {\n    State.update({\n      tokenInfos: data.tokenInfos.sort((a, b) =>\n        compareByHolders(a, b, \"desc\", data.holderCounts)\n      ),\n      holderCounts: data.holderCounts,\n    });\n  });\n  State.update({ hasFetchData: true });\n}\n\nconst filteredTokenInfos = state.tokenInfos\n  ? state.tokenInfos\n      .filter((a) => {\n        if (currentTab === \"in-progress\") {\n          return Big(a.totalSupply).lt(a.maxSupply);\n        } else if (currentTab === \"completed\") {\n          return Big(a.totalSupply).eq(a.maxSupply);\n        } else {\n          return true;\n        }\n      })\n      .filter((tokenInfo) =>\n        tokenInfo.ticker\n          .toUpperCase()\n          .includes((searchValue ?? \"\").toUpperCase())\n      )\n  : [];\n\nconst current = String(state.current ?? \"1\");\nconst totalPage = String(\n  Math.ceil(Number(filteredTokenInfos?.length ?? 0) / pageAmountOfPage)\n);\n\nfunction onClickSortButton(target) {\n  State.update({ current: 1 });\n  if (state.sortBy !== target) {\n    const tokenInfos = [...(state.tokenInfos ?? [])];\n    const sortedTokenInfos = tokenInfos.sort((a, b) => {\n      if (target === \"Deploy Time\") {\n        return compareByDeployTime(a, b, \"desc\");\n      } else {\n        return compareByHolders(a, b, \"desc\", state.holderCounts);\n      }\n    });\n    State.update({\n      tokenInfos: sortedTokenInfos,\n      sortBy: target,\n      orderDirection: \"desc\",\n    });\n  } else {\n    if (state.orderDirection === \"asc\") {\n      const tokenInfos = [...(state.tokenInfos ?? [])];\n      const sortedTokenInfos = tokenInfos.sort((a, b) => {\n        if (target === \"Deploy Time\") {\n          return compareByDeployTime(a, b, \"desc\");\n        } else {\n          return compareByHolders(a, b, \"desc\", state.holderCounts);\n        }\n      });\n      State.update({\n        tokenInfos: sortedTokenInfos,\n        orderDirection: \"desc\",\n      });\n    } else {\n      const tokenInfos = [...(state.tokenInfos ?? [])];\n      const sortedTokenInfos = tokenInfos.sort((a, b) => {\n        if (target === \"Deploy Time\") {\n          return compareByDeployTime(a, b, \"asc\");\n        } else {\n          return compareByHolders(a, b, \"asc\", state.holderCounts);\n        }\n      });\n      State.update({\n        tokenInfos: sortedTokenInfos,\n        orderDirection: \"asc\",\n      });\n    }\n  }\n}\n\nreturn (\n  <TableOuter>\n    <TableContainer>\n      <IndexTable>\n        <IndexHeaderTr>\n          <IndexTh>Tick</IndexTh>\n          <IndexTh>\n            <TableSortButton onClick={() => onClickSortButton(\"Deploy Time\")}>\n              <div>Deploy Time</div>\n              <TableDropdownImage\n                hide={state.sortBy !== \"Deploy Time\"}\n                up={state.orderDirection === \"asc\"}\n                src={`${ipfsPrefix}/bafkreiabdtjq6x2qgoj7ygx2nqrq63xyyrh4p7cqyu6f2loyui33iaa6ny`}\n              />\n            </TableSortButton>\n          </IndexTh>\n          <IndexTh>Progress</IndexTh>\n          <IndexTh>\n            <TableSortButton onClick={() => onClickSortButton(\"Holders\")}>\n              <div>Holders</div>\n              <TableDropdownImage\n                hide={state.sortBy !== \"Holders\"}\n                up={state.orderDirection === \"asc\"}\n                src={`${ipfsPrefix}/bafkreiabdtjq6x2qgoj7ygx2nqrq63xyyrh4p7cqyu6f2loyui33iaa6ny`}\n              />\n            </TableSortButton>\n          </IndexTh>\n        </IndexHeaderTr>\n        <IndexTableBody>\n          {filteredTokenInfos &&\n            filteredTokenInfos\n              .slice(\n                (current - 1) * pageAmountOfPage,\n                current * pageAmountOfPage\n              )\n              .map((row) => (\n                <IndexDataTr key={row.ticker}>\n                  <IndexTd>\n                    <TableRowLink\n                      href={`/${config.ownerId}/widget/NRC-20?tick=${row.ticker}`}\n                    >\n                      {row.ticker.toUpperCase()}\n                    </TableRowLink>\n                  </IndexTd>\n                  <IndexTd>\n                    {formatDeployTime(row.createdBlockTimestamp)}\n                  </IndexTd>\n                  <IndexTd style={{ paddingRight: \"26px\" }}>\n                    <AddressData>\n                      <Widget\n                        src={`${config.ownerId}/widget/NRC-20.Progress`}\n                        props={{\n                          progress: formatProgress(row),\n                        }}\n                      />\n                    </AddressData>\n                  </IndexTd>\n                  <IndexTd>\n                    {state.holderCounts.find(\n                      (holderCount) =>\n                        holderCount.ticker.toUpperCase() ==\n                        row.ticker.toUpperCase()\n                    )?.count ?? \"0\"}\n                  </IndexTd>\n                </IndexDataTr>\n              ))}\n        </IndexTableBody>\n      </IndexTable>\n    </TableContainer>\n    <TableFooter>\n      <TableRowsAmount>\n        {filteredTokenInfos?.length ?? \"-\"}{\" \"}\n        {Number(filteredTokenInfos?.length ?? 0) !== 1 ? \"tokens\" : \"token\"} in\n        total\n      </TableRowsAmount>\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.Pagination`}\n        props={{\n          current,\n          totalPage,\n          updateCurrentPage: (value) => {\n            State.update({ current: value });\n          },\n        }}\n      />\n    </TableFooter>\n  </TableOuter>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.TokensTable", "fact_widget_deployments_id": "85b164822d49bceeaa24e07a75ad8edf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 13}