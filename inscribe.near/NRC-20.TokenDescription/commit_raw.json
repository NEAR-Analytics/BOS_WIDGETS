{"tx_hash": "2ecd5C9NbEuKgwehCjCpdJEYv9E4wTw5ft2UY87pFv84", "action_id_social": "6tVV1i3n7wUP5YTvA7GMkQf2RTroDGFxbb1GwrKMDghR-0-widget", "block_id": 109055890, "block_timestamp": "2023-12-29T03:47:57.443Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.TokenDescription", "source_code": "const FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormTitle = styled.div`\n  font-size: 22px;\n  font-weight: 600px;\n\n  @media (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst FormRowContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst FormRowTitle = styled.div``;\n\nconst FormRowValue = styled.div``;\n\nconst FormButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst FormButton = styled.button`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  background: transparent;\n  color: #ffffff;\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.4;\n  }\n  &:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nconst FormFragment = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TipText = styled.div`\n  color: #fffffff0;\n  font-size: 12px;\n  font-weight: 600;\n`;\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply)\n    .minus(state.nep141TotalSupply)\n    .toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\nconst TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\n\n\nconst token = props.token;\n\nState.init({\n  tokenInfo: undefined,\n});\nfetchTokenInfoAsync(token).then((response) => {\n  State.update({\n    tokenInfo: response.tokenInfo,\n    holderCount: response.holderCount,\n  });\n});\n\nconst tokenInfo = state.tokenInfo;\nconst holderCount = state.holderCount;\nconst decimals = tokenInfo?.decimals ?? 0;\n\nfunction shortNearAddress(accountId) {\n  if (accountId && accountId.length > 21) {\n    const splits = accountId.split(\".\");\n    const prefix =\n      accountId.substring(0, 5) +\n      \"...\" +\n      splits[0].substring(splits[0].length - 5);\n    if (accountId.includes(\".\")) {\n      return prefix + \".\" + splits.splice(1).join(\".\");\n    } else return prefix;\n  } else {\n    return accountId;\n  }\n}\n\nreturn (\n  <FormFragment>\n    <FormContainer>\n      <FormTitle style={{ fontWeight: \"bold\" }}>{tokenInfo.ticker}</FormTitle>\n      <FormBody>\n        <FormRowContainer>\n          <FormRowTitle>Total Supply</FormRowTitle>\n          <FormRowValue>\n            {formatAmount(tokenInfo?.maxSupply, decimals)}\n          </FormRowValue>\n        </FormRowContainer>\n        <FormRowContainer>\n          <FormRowTitle>Minted</FormRowTitle>\n          <FormRowValue>\n            {formatAmount(tokenInfo?.totalSupply, decimals)}\n          </FormRowValue>\n        </FormRowContainer>\n        <FormRowContainer>\n          <FormRowTitle>Limit Per Mint</FormRowTitle>\n          <FormRowValue>\n            {tokenInfo?.limit\n              ? formatAmount(tokenInfo.limit, decimals)\n              : \"No Limit\"}\n          </FormRowValue>\n        </FormRowContainer>\n        <FormRowContainer>\n          <FormRowTitle>Decimals</FormRowTitle>\n          <FormRowValue>{tokenInfo?.decimals}</FormRowValue>\n        </FormRowContainer>\n        <FormRowContainer>\n          <FormRowTitle>Deployed By</FormRowTitle>\n          <FormRowValue title={tokenInfo?.creatorId}>\n            {shortNearAddress(tokenInfo?.creatorId)}\n          </FormRowValue>\n        </FormRowContainer>\n        <FormRowContainer>\n          <FormRowTitle>Deploy Time</FormRowTitle>\n          <FormRowValue>\n            {tokenInfo?.createdBlockTimestamp\n              ? formatDeployTime(tokenInfo.createdBlockTimestamp)\n              : \"-\"}\n          </FormRowValue>\n        </FormRowContainer>\n        <FormRowContainer>\n          <FormRowTitle>Holders</FormRowTitle>\n          <FormRowValue>\n            {formatAmount(holderCount?.count ?? 0, 0)}\n          </FormRowValue>\n        </FormRowContainer>\n      </FormBody>\n    </FormContainer>\n    <FormContainer>\n      <FormTitle>Minted address rank</FormTitle>\n      <TipText>* Only top 5000 addresses are listed.</TipText>\n      <FormBody>\n        <Widget\n          src={`${config.ownerId}/widget/NRC-20.IndexTable`}\n          props={{\n            searchValue: state.searchValue,\n            token: props.token,\n          }}\n        />\n      </FormBody>\n    </FormContainer>\n  </FormFragment>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.TokenDescription", "fact_widget_deployments_id": "efe39c42c72f5659fc1f8ab9633c0bfd", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}