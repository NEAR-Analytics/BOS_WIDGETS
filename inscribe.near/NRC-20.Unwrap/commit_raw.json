{"tx_hash": "2ypuW9hiB1bNYZ5uQvGQaQsdgg1j8VcmmtoTn2mMt4vL", "action_id_social": "794s9vbjgHbWUCs7VgTJCbMap6ZUcfp4xirCJueDSQpD-0-widget", "block_id": 112201800, "block_timestamp": "2024-02-06T02:30:35.663Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.Unwrap", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst WrapFee = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst ArrowDown = () => (\n  <img\n    style={{\n      display: \"inline-block\",\n      margin: \"0 auto\",\n      marginTop: \"-20px\",\n      marginBottom: \"-20px\",\n    }}\n    src={`${ipfsPrefix}/bafkreic2xx3nuyxkqnfcjbkpoc334nqxo7r74jyij572qtvf2wgxwbfj7q`}\n    width=\"40px\"\n  />\n);\n\nconst FormButton = styled.button`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  background: transparent;\n  color: #ffffff;\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.4;\n  }\n  &:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nconst InputError = styled.div`\n  margin-top: 12px;\n  color: rgb(252, 91, 91);\n`;\n\nconst isInputDigit = (value) => /^(\\d*(\\.\\d*)?|\\.\\d+)$/.test(value);\nconst isDigit = (value) => /^\\d+(\\.\\d+)?$/.test(value);\nconst isInteger = (value) => /^\\d+$/.test(value);\nconst isLetterAndDigit = (value) => /^[a-zA-Z0-9]+$/.test(value);\nconst removePrefix0 = (value) => {\n  if (!isDigit(value)) return value;\n  if (Number(value) === 0 && !value.includes(\".\")) return \"0\";\n  else {\n    if (value.includes(\".\")) {\n      if (!value.startsWith(\".\")) {\n        return value;\n      }\n      return value.replace(/^0+/, \"0\");\n    } // 00. transform to 0.\n    else return value.replace(/^0+/, \"\"); // 01 transform to 1\n  }\n};\n\nconst isMaxDecimals = (_value, _decimals) => {\n  const value = String(_value);\n  const decimals = Number(_decimals ?? 0);\n  if (!value.includes(\".\")) {\n    return true;\n  }\n  const splits = value.split(\".\");\n  if (decimals === 0) {\n    return false;\n  }\n  const num = splits[1].length;\n  return decimals >= num;\n};\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchEventCounts(_tick) {\n  const tick = _tick || \"NEAT\";\n  return asyncFetchFromGraph(`\n    query {\n      eventCounts(where: {id:\"${tick}\"}) {\n        id\n        ticker\n        mintEventCount\n        transferEventCount\n      }\n    }\n  `).then((response) => {\n    if (response.body?.data?.eventCounts) {\n      return response.body.data.eventCounts;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(first: 1000) {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts(first: 1000) {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchOwnTokenInfosAsync(creatorId) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(where:{creatorId:\"${creatorId}\"}) {\n        ticker\n        decimals\n        limit\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getFtWrappers(n, _data) {\n  const i = n ?? 0;\n  const data = _data ?? [];\n  const amount = 500;\n  return Near.asyncView(config.ftWrapperFactory, \"get_ft_wrappers\", {\n    offset: i * amount,\n    limit: amount,\n  })\n    .then((subcontracts) => {\n      if (subcontracts.length < amount) {\n        return [...subcontracts, ...data];\n      } else {\n        return getFtWrappers(i + 1, subcontracts).then((response) => {\n          return [...response, ...data];\n        });\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      return data;\n    });\n}\n\nfunction getNep141Balance(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_wrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getUnwrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_unwrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply)\n    .minus(state.nep141TotalSupply)\n    .toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\nState.init({\n  balance: undefined,\n  wrappedFtBalance: undefined,\n  tickerRawData: {},\n  holders: [],\n  ticker: [\n    {\n      title: \"Token:\",\n      value: \"-\",\n    },\n    {\n      title: \"Protocol:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Supply:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Minted:\",\n      value: \"-\",\n    },\n    {\n      title: \"Minted%:\",\n      value: \"-\",\n    },\n    {\n      title: \"Mint Limit:\",\n      value: \"-\",\n    },\n    {\n      title: \"Holders:\",\n      value: \"-\",\n    },\n  ],\n  // transfer component\n  tickInput: props.tick ?? \"\",\n  transferAmount: \"\",\n  transferTo: \"\",\n  balances: undefined,\n  // wrap, unwrap component\n  wrapTab: \"wrap\",\n});\n\nfunction fetchAllData() {\n  asyncFetchFromGraph(`\n    query {\n      tokenInfo (id: \"NEAT\") {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n      }\n      holderCount (id: \"NEAT\") {\n        count\n      }\n    }\n  `).then((response) => {\n    const tokenInfo = response.body.data.tokenInfo;\n    const holderCount = response.body.data.holderCount.count;\n    State.update({\n      tokenInfo,\n      tickerRawData: {\n        display_name: tokenInfo.ticker,\n        holderCount,\n      },\n      ticker: [\n        {\n          title: \"Token:\",\n          value: tokenInfo.ticker,\n        },\n        {\n          title: \"Protocol:\",\n          value: \"NRC-20\",\n        },\n        {\n          title: \"Total Supply:\",\n          value: formatAmount(tokenInfo.maxSupply ?? 0),\n        },\n        {\n          title: \"Total Minted:\",\n          value: formatAmount(tokenInfo.totalSupply ?? 0),\n        },\n        {\n          title: \"Minted%:\",\n          value:\n            Big(tokenInfo.totalSupply ?? 0)\n              .div(tokenInfo.maxSupply ?? 1)\n              .times(100)\n              .toFixed(2) + \"%\",\n        },\n        {\n          title: \"Mint Limit:\",\n          value: formatAmount(tokenInfo.limit ?? 0),\n        },\n        {\n          title: \"Holders:\",\n          value: toLocaleString(holderCount, 0),\n        },\n      ],\n    });\n  });\n\n  getBalance().then((balance) =>\n    State.update({\n      balance,\n    })\n  );\n\n  getWrappedFtBalance().then((balance) =>\n    State.update({\n      wrappedFtBalance: balance,\n    })\n  );\n\n  getNep141TotalSupply().then((nep141TotalSupply) => {\n    State.update({\n      nep141TotalSupply,\n    });\n  });\n\n  const nrc20TotalSupply = getNrc20TotalSupply();\n  if (nrc20TotalSupply) {\n    State.update({\n      nrc20TotalSupply,\n    });\n  }\n\n  getBalances().then((balances) => {\n    State.update({\n      balances,\n    });\n  });\n}\n\nif (!state.hasFetchGlobalData) {\n  fetchAllData();\n  State.update({ hasFetchGlobalData: true });\n}\n\n\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\n\nfunction updateInputValue(value) {\n  if (!isSignedIn) {\n    State.update({\n      unwrapAmountInputError: \"Sign in please\",\n    });\n    return;\n  }\n\n  if (\n    value === \"\" ||\n    (isInputDigit(value) && isMaxDecimals(value, state.decimals ?? 0))\n  ) {\n    State.update({\n      unwrapAmount: removePrefix0(value),\n      unwrapAmountInputError: undefined,\n    });\n  }\n\n  if (\n    isDigit(value) &&\n    Big(value).gt(\n      Big(state.nep141BalanceRaw ?? 0).div(Big(10).pow(state.decimals ?? 0))\n    )\n  ) {\n    State.update({\n      unwrapAmountInputError: \"Insufficient balance\",\n    });\n  }\n}\n\nif (!state.hasFetchTokenInfos) {\n  fetchTokenInfosAsync().then((data) => {\n    State.update({\n      tokenInfos: data.tokenInfos,\n      holderCounts: data.holderCounts,\n    });\n  });\n  State.update({\n    hasFetchTokenInfos: true,\n  });\n}\n\nif (!state.registeredTokenContracts) {\n  getFtWrappers().then((subcontracts) => {\n    State.update({ subcontracts });\n    for (let i = 0; i < subcontracts.length; i++) {\n      const subcontract = subcontracts[i];\n      getNep141Balance(subcontract).then((balance) => {\n        State.update({\n          [\"nep141_balance_\" + subcontract.split(\".\")[0]]: {\n            ticker: subcontract.split(\".\")[0],\n            amount: balance,\n          },\n        });\n      });\n    }\n    State.update({\n      registeredTokenContracts: subcontracts,\n    });\n  });\n}\n\nfunction syncNep141Balance() {\n  const subcontracts = state.subcontracts;\n  if (subcontracts) {\n    const keys = Object.keys(state);\n    const ftBalances = keys\n      .filter((key) => key.startsWith(\"nep141_balance_\"))\n      .reduce((prev, key) => [...prev, state[key]], []);\n    State.update({\n      ftBalances,\n    });\n  }\n}\n\nsyncNep141Balance();\n\nfunction updateSelectValue(ticker) {\n  updateInputValue(\"\");\n  const tickerBalance = state.balances.find(\n    (row) => row.ticker.toUpperCase() === ticker.toUpperCase()\n  ) ?? {\n    ticker,\n    amount: \"0\",\n  };\n  const tokenInfo = state.tokenInfos.find(\n    (tokenInfo) => tokenInfo.ticker.toUpperCase() === ticker.toUpperCase()\n  );\n\n  const nep141Balance = state.ftBalances.find(\n    (balance) => balance.ticker.toLowerCase() === ticker.toLowerCase()\n  );\n\n  getUnwrapFeeRate(ftWrapperAddress(ticker))\n    .then((fee) => {\n      State.update({\n        unwrapFee: fee,\n      });\n    })\n    .catch((error) => {\n      State.update({\n        wrapFee: undefined,\n      });\n      console.log(error.message);\n    });\n  if (tokenInfo?.decimals) {\n    State.update({\n      nep141BalanceRaw: nep141Balance.amount,\n      nep141Balance: formatAmount(nep141Balance.amount, tokenInfo.decimals),\n      nrc20Balance: formatAmount(tickerBalance.amount, tokenInfo.decimals),\n      unit: tickerBalance.ticker,\n      decimals: tokenInfo.decimals,\n      tickerInput: ticker,\n    });\n  } else {\n    State.update({\n      nep141BalanceRaw: nep141Balance.amount,\n      nep141Balance: toLocaleString(nep141Balance.amount),\n      nrc20Balance: toLocaleString(tickerBalance.amount),\n      unit: tickerBalance.ticker,\n      decimals: 0,\n      tickerInput: ticker,\n    });\n  }\n}\n\nif (\n  !state.hasSetInitialTick &&\n  props.tick &&\n  state.balances &&\n  state.tokenInfos &&\n  state.registeredTokenContracts\n) {\n  State.update({ hasSetInitialTick: true });\n  updateSelectValue(props.tick);\n}\nreturn (\n  <>\n    <div>\n      <Widget\n        src={`${config.ownerId}/widget/NRC-20.AssetSelect`}\n        props={{\n          title: \"Tick\",\n          data:\n            state.ftBalances && state.tokenInfos\n              ? state.ftBalances\n                  .map((a) => {\n                    const tokenInfo = state.tokenInfos.find(\n                      (tokenInfo) =>\n                        tokenInfo.ticker.toUpperCase() ===\n                        a.ticker.toUpperCase()\n                    );\n                    if (tokenInfo?.decimals) {\n                      return {\n                        ticker: a.ticker,\n                        amount: Big(a.amount)\n                          .div(Big(10).pow(tokenInfo.decimals))\n                          .toFixed(),\n                      };\n                    } else {\n                      return {\n                        ticker: a.ticker,\n                        amount: a.amount,\n                      };\n                    }\n                  })\n                  .sort((a, b) => {\n                    if (!Big(a.amount).eq(b.amount)) {\n                      return Big(a.amount).gt(Big(b.amount)) ? -1 : 1;\n                    } else {\n                      return a.ticker.localeCompare(b.ticker);\n                    }\n                  })\n                  .map((a) => {\n                    const tokenInfo = state.tokenInfos.find(\n                      (tokenInfo) => tokenInfo.ticker.toLowerCase() === a.ticker\n                    );\n                    return {\n                      ...a,\n                      amount: toLocaleString(\n                        a.amount,\n                        Big(a.amount).eq(0) ? 0 : tokenInfo.decimals\n                      ),\n                    };\n                  })\n              : [],\n          updateSelectValue,\n          updateError: (error) => {\n            State.update({\n              assetSelectError: error,\n            });\n          },\n          value: state.tickerInput\n            ? state.tickerInput.toUpperCase()\n            : undefined,\n          disabled: !state.ftBalances || !state.tokenInfos,\n        }}\n      />\n      {state.assetSelectError && (\n        <InputError>{state.assetSelectError}</InputError>\n      )}\n    </div>\n    <Widget\n      src={`${config.ownerId}/widget/NEAT.FormInput`}\n      props={{\n        title: \"NEP-141\",\n        value: state.unwrapAmount,\n        maxTitle: \"Balance: \",\n        maxValue: state.nep141Balance ? state.nep141Balance : \"-\",\n        unit: state.unit ? `$${state.unit.toUpperCase()}` : \"\",\n        disabled: !state.tickerInput,\n        variant: !state.tickerInput ? \"grey\" : undefined,\n        onChange: updateInputValue,\n        onClickMax: () =>\n          updateInputValue(\n            Big(state.nep141BalanceRaw ?? 0)\n              .div(Big(10).pow(state.decimals ?? 0))\n              .toFixed()\n          ),\n        error: state.unwrapAmountInputError,\n      }}\n    />\n    <ArrowDown />\n    <Widget\n      src={`${config.ownerId}/widget/NEAT.FormInput`}\n      props={{\n        title: \"NRC-20\",\n        maxTitle: \"Balance: \",\n        maxValue: state.nrc20Balance ? state.nrc20Balance : \"-\",\n        unit: state.unit ? `$${state.unit.toUpperCase()}` : \"\",\n        onChange: updateInputValue,\n        variant: \"grey\",\n        disabled: true,\n        value:\n          state.unwrapFee && isDigit(state.unwrapAmount)\n            ? Big(state.unwrapAmount)\n                .minus(\n                  Big(state.unwrapFee)\n                    .div(10000)\n                    .times(state.unwrapAmount)\n                    .toFixed(state.decimals, 0)\n                )\n                .toFixed()\n            : state.unwrapAmount,\n      }}\n    />\n    <WrapFee>\n      Unwrap Fee:{\" \"}\n      {state.unwrapFee\n        ? Big(state.unwrapFee ?? 0)\n            .div(100)\n            .toFixed(2)\n        : \"0.00\"}\n      % (\n      {state.unwrapFee && isDigit(state.unwrapAmount)\n        ? Big(state.unwrapFee ?? 0)\n            .div(10000)\n            .times(state.unwrapAmount)\n            .toFixed(state.decimals, 0)\n        : Big(0).toFixed(state.decimals)}\n      )\n    </WrapFee>\n    <FormButton\n      disabled={\n        !!state.unwrapAmountInputError ||\n        !isDigit(state.unwrapAmount) ||\n        Big(state.unwrapAmount).lte(0)\n      }\n      onClick={() => {\n        Near.call({\n          contractName: ftWrapperAddress(state.tickerInput),\n          methodName: \"ft_unwrap\",\n          args: {\n            amount: Big(state.unwrapAmount)\n              .times(Big(10).pow(state.decimals))\n              .toFixed(0),\n          },\n        });\n      }}\n    >\n      Unwrap\n    </FormButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.Unwrap", "fact_widget_deployments_id": "8c0b2c3849b6ea407c1b60ae2d7f5b47", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}