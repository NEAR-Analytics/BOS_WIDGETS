{"tx_hash": "tVgjj2jodnSMA55MYggGYVRjwRinRrp3diWrrA2He1q", "action_id_social": "C9WQvBEvHquLSYQyxcGfq193Vm65HFrc4HQfRvxoD143-0-widget", "block_id": 111938181, "block_timestamp": "2024-02-02T14:31:11.808Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.Mint", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormTitle = styled.div`\n  font-size: 22px;\n  font-weight: 600px;\n\n  @media (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nconst FormButton = styled.button`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  background: transparent;\n  color: #ffffff;\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.4;\n  }\n  &:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nconst isInputDigit = (value) => /^(\\d*(\\.\\d*)?|\\.\\d+)$/.test(value);\nconst isDigit = (value) => /^\\d+(\\.\\d+)?$/.test(value);\nconst isInteger = (value) => /^\\d+$/.test(value);\nconst isLetterAndDigit = (value) => /^[a-zA-Z0-9]+$/.test(value);\nconst removePrefix0 = (value) => {\n  if (!isDigit(value)) return value;\n  if (Number(value) === 0 && !value.includes(\".\")) return \"0\";\n  else {\n    if (value.includes(\".\")) {\n      if (!value.startsWith(\".\")) {\n        return value;\n      }\n      return value.replace(/^0+/, \"0\");\n    } // 00. transform to 0.\n    else return value.replace(/^0+/, \"\"); // 01 transform to 1\n  }\n};\n\nconst isMaxDecimals = (_value, _decimals) => {\n  const value = String(_value);\n  const decimals = Number(_decimals ?? 0);\n  if (!value.includes(\".\")) {\n    return true;\n  }\n  const splits = value.split(\".\");\n  if (decimals === 0) {\n    return false;\n  }\n  const num = splits[1].length;\n  return decimals >= num;\n};\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchEventCounts(_tick) {\n  const tick = _tick || \"NEAT\";\n  return asyncFetchFromGraph(`\n    query {\n      eventCounts(where: {id:\"${tick}\"}) {\n        id\n        ticker\n        mintEventCount\n        transferEventCount\n      }\n    }\n  `).then((response) => {\n    if (response.body?.data?.eventCounts) {\n      return response.body.data.eventCounts;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(first: 1000) {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts(first: 1000) {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchOwnTokenInfosAsync(creatorId) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(where:{creatorId:\"${creatorId}\"}) {\n        ticker\n        decimals\n        limit\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getFtWrappers() {\n  return Near.asyncView(config.ftWrapperFactory, \"get_ft_wrappers\", {\n    offset: 0,\n    limit: 1000,\n  });\n}\nfunction getNep141Balance(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_wrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getUnwrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_unwrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply)\n    .minus(state.nep141TotalSupply)\n    .toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\nfunction formatProgress(tokenInfo) {\n  return Big(tokenInfo.totalSupply).div(tokenInfo.maxSupply).toNumber();\n}\n\n\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nfunction getVariantByAccount() {\n  if (state.validAccount === false) return \"red\";\n  if (state.validAccount === true) return \"green\";\n  return undefined;\n}\nconst variant = getVariantByAccount();\n\nfunction updateBalance() {\n  const interval = setInterval(() => {\n    getBalance().then((balance) => {\n      if (balance && state.balance !== balance) {\n        State.update({ balance });\n        clearInterval(interval);\n      }\n    });\n  }, 500);\n}\n\nState.init({\n  tickInput: props.tick ?? \"\",\n  amountInput: \"\",\n  repeatInput: \"1\",\n});\n\nconst nrc20Transaction = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: {\n    ...config.args,\n    tick: state.tickInput.toLowerCase(),\n    amt: isDigit(state.amountInput)\n      ? Big(state.amountInput).times(\n          Big(10).pow(Number(state.tokenInfo?.decimals ?? 0))\n        )\n      : \"0\",\n  },\n  gas: GasPerTransaction,\n};\n\nfunction updateTickInput(value) {\n  State.update({ tickInputError: undefined });\n  if (!isSignedIn) {\n    State.update({\n      tickInputError: \"Sign in please\",\n    });\n    return;\n  }\n  State.update({ tickInput: value });\n\n  // debounce\n  clearTimeout(state.timer);\n  State.update({\n    timer: setTimeout(() => {\n      if (value !== \"\") {\n        fetchTokenInfoAsync(value).then((response) => {\n          if (!response.tokenInfo) {\n            State.update({\n              amountInput: \"\",\n              tickInputError: \"The tick does not exist\",\n              tokenInfo: undefined,\n            });\n            return;\n          }\n          State.update({\n            tokenInfo: response.tokenInfo,\n          });\n          const limit = response.tokenInfo?.limit ?? -1;\n          const decimals = Number(response.tokenInfo?.decimals ?? 0);\n          /// update amount\n          if (limit !== -1) {\n            updateAmountInput(Big(limit).div(Big(10).pow(decimals)).toFixed(0));\n          } else {\n            updateAmountInput(\"\");\n          }\n          if (\n            isDigit(state.amountInput) &&\n            limit !== -1 &&\n            Big(state.amountInput).gt(Big(limit).div(Big(10).pow(decimals)))\n          ) {\n            State.update({\n              amountInputError: `The amount should be no more than ${Big(limit)\n                .div(Big(10).pow(decimals))\n                .toFixed()}`,\n            });\n          } else {\n            State.update({\n              amountInputError: undefined,\n            });\n          }\n        });\n      } else {\n        State.update({\n          tokenInfo: undefined,\n        });\n      }\n    }, 300),\n  });\n}\n\nfunction updateAmountInput(value) {\n  if (!isSignedIn) {\n    State.update({\n      amountInputError: \"Sign in please\",\n    });\n    return;\n  }\n\n  if (value === \"\" || isInteger(value)) {\n    State.update({\n      amountInputError: undefined,\n      amountInput: removePrefix0(value),\n    });\n  }\n\n  const limit = state.tokenInfo?.limit ?? -1;\n  const decimals = Number(state.tokenInfo?.decimals ?? 0);\n  if (isDigit(value)) {\n    if (Big(value).eq(0)) {\n      State.update({\n        amountInputError: \"The amount should be greater than 0\",\n      });\n    } else if (\n      limit !== -1 &&\n      Big(value).gt(Big(limit).div(Big(10).pow(decimals)))\n    ) {\n      State.update({\n        amountInputError: `The amount should be no more than ${Big(limit)\n          .div(Big(10).pow(decimals))\n          .toFixed()}`,\n      });\n    }\n  }\n}\n\nfunction updateRepeatInput(value) {\n  if (!isSignedIn) {\n    State.update({\n      repeatInputError: \"Sign in please\",\n    });\n    return;\n  }\n\n  if (value === \"\" || isInteger(value)) {\n    State.update({\n      repeatInputError: undefined,\n      repeatInput: removePrefix0(value),\n    });\n  }\n\n  if (isDigit(value) && Big(value).eq(0)) {\n    State.update({\n      repeatInputError: \"The repeat number should be greater than 0\",\n    });\n  }\n}\n\nconst disabled =\n  state.tickInput === \"\" ||\n  !isDigit(state.amountInput) ||\n  !isDigit(state.repeatInput) ||\n  !!state.tickInputError ||\n  !!state.amountInputError ||\n  !!state.repeatInputError;\n\nif (props.tick && !state.hasInitTickInput) {\n  State.update({\n    hasInitTickInput: true,\n  });\n  updateTickInput(props.tick);\n}\n\nreturn (\n  <FormContainer>\n    <FormTitle>Mint</FormTitle>\n    {state.tokenInfo && (\n      <Widget\n        src={`${config.ownerId}/widget/NRC-20.Progress`}\n        props={{\n          progress: formatProgress(state.tokenInfo),\n        }}\n      />\n    )}\n    <Widget\n      src={`${config.ownerId}/widget/NEAT.FormInput`}\n      props={{\n        title: \"Tick\",\n        value: state.tickInput,\n        onChange: updateTickInput,\n        error: state.tickInputError,\n      }}\n    />\n    <Widget\n      src={`${config.ownerId}/widget/NEAT.FormInput`}\n      props={{\n        title: \"Amount\",\n        value: state.amountInput,\n        onChange: updateAmountInput,\n        error: state.amountInputError,\n      }}\n    />\n    <Widget\n      src={`${config.ownerId}/widget/NRC-20.RepeatInput`}\n      props={{\n        title: \"Repeat\",\n        value: state.repeatInput,\n        onChange: updateRepeatInput,\n        error: state.repeatInputError,\n      }}\n    />\n    <FormButton\n      disabled={disabled}\n      onClick={() => {\n        Near.call(Array(Number(state.repeatInput)).fill(nrc20Transaction));\n      }}\n    >\n      Mint\n    </FormButton>\n  </FormContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.Mint", "fact_widget_deployments_id": "1710760007a96fa9e3add03042c1bac5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}