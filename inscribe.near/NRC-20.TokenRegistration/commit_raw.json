{"tx_hash": "A6voq3yRkV86kHA33fbmpgxQx9pAvrfqVVJHL1PLizJQ", "action_id_social": "8m2BUZ8njXqmk5w1vF1S1QpwTBrLBSaBLdwegj5coDsW-0-widget", "block_id": 112092264, "block_timestamp": "2024-02-04T14:25:13.254Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.TokenRegistration", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst ArrowDown = () => (\n  <img\n    style={{\n      display: \"inline-block\",\n      margin: \"0 auto\",\n      marginTop: \"-20px\",\n      marginBottom: \"-20px\",\n    }}\n    src={`${ipfsPrefix}/bafkreic2xx3nuyxkqnfcjbkpoc334nqxo7r74jyij572qtvf2wgxwbfj7q`}\n    width=\"40px\"\n  />\n);\n\nconst FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormButton = styled.button`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  background: transparent;\n  color: #ffffff;\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.4;\n  }\n  &:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nconst FormInputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FormInputLabel = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: end;\n  @media (max-width: 768px) {\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n  }\n`;\n\nconst FormInputRow = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  height: 50px;\n  margin-top: 12px;\n  border-radius: 12px;\n  padding: 0 16px;\n  align-items: center;\n  .FormInput::placeholder {\n    color: #ffffff44;\n  }\n`;\n\nconst FormInputTitle = styled.div`\n  font-size: 18px;\n  font-weight: ${titleNormal ? \"500\" : \"bold\"};\n\n  @media (max-width: 768px) {\n    font-size: 14px;\n    white-space: nowrap;\n  }\n`;\n\nconst MaxContent = styled.div`\n  font-size: 14px;\n  color: white;\n  font-size: 700;\n  display: flex;\n  .hide-in-pc {\n    display: none;\n  }\n  .hide-in-mobile {\n    display: inline-block;\n  }\n  @media (max-width: 768px) {\n    font-size: 12px;\n    white-space: nowrap;\n    display: inline-block;\n    .hide-in-mobile {\n      display: none;\n    }\n    .hide-in-pc {\n      display: inline-block;\n    }\n  }\n`;\n\nconst MaxValue = styled.button`\n  border: none;\n  outline: none;\n  background: transparent;\n  font-size: 14px;\n  color: white;\n  font-size: 700;\n  margin-left: 4px;\n  ${onClickMax\n    ? `\n      text-decoration: underline;\n      text-underline-offset: 3px;\n    `\n    : ``}\n`;\n\nconst UnitContent = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nconst FormInputError = styled.div`\n  margin-top: 12px;\n  color: rgb(252, 91, 91);\n`;\n\nconst InputError = styled.div`\n  margin-top: 12px;\n  color: rgb(252, 91, 91);\n`;\n\nconst isInputDigit = (value) => /^(\\d*(\\.\\d*)?|\\.\\d+)$/.test(value);\nconst isDigit = (value) => /^\\d+(\\.\\d+)?$/.test(value);\nconst isInteger = (value) => /^\\d+$/.test(value);\nconst isLetterAndDigit = (value) => /^[a-zA-Z0-9]+$/.test(value);\nconst removePrefix0 = (value) => {\n  if (!isDigit(value)) return value;\n  if (Number(value) === 0 && !value.includes(\".\")) return \"0\";\n  else {\n    if (value.includes(\".\")) {\n      if (!value.startsWith(\".\")) {\n        return value;\n      }\n      return value.replace(/^0+/, \"0\");\n    } // 00. transform to 0.\n    else return value.replace(/^0+/, \"\"); // 01 transform to 1\n  }\n};\n\nconst isMaxDecimals = (_value, _decimals) => {\n  const value = String(_value);\n  const decimals = Number(_decimals ?? 0);\n  if (!value.includes(\".\")) {\n    return true;\n  }\n  const splits = value.split(\".\");\n  if (decimals === 0) {\n    return false;\n  }\n  const num = splits[1].length;\n  return decimals >= num;\n};\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchEventCounts(_tick) {\n  const tick = _tick || \"NEAT\";\n  return asyncFetchFromGraph(`\n    query {\n      eventCounts(where: {id:\"${tick}\"}) {\n        id\n        ticker\n        mintEventCount\n        transferEventCount\n      }\n    }\n  `).then((response) => {\n    if (response.body?.data?.eventCounts) {\n      return response.body.data.eventCounts;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(first: 1000) {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts(first: 1000) {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchOwnTokenInfosAsync(creatorId) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(where:{creatorId:\"${creatorId}\"}) {\n        ticker\n        decimals\n        limit\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getFtWrappers(n, _data) {\n  const i = n ?? 0;\n  const data = _data ?? [];\n  const amount = 500;\n  return Near.asyncView(config.ftWrapperFactory, \"get_ft_wrappers\", {\n    offset: i * amount,\n    limit: amount,\n  })\n    .then((subcontracts) => {\n      if (subcontracts.length < amount) {\n        return [...subcontracts, ...data];\n      } else {\n        return getFtWrappers(i + 1, subcontracts).then((response) => {\n          return [...response, ...data];\n        });\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      return data;\n    });\n}\n\nfunction getNep141Balance(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_wrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getUnwrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_unwrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply)\n    .minus(state.nep141TotalSupply)\n    .toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\n\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\n\nState.init({\n  image: {},\n  uploadError: undefined,\n  dataUrl: undefined,\n  tickerInput: undefined,\n});\n\nif (!state.hasFetchTokenInfos) {\n  fetchOwnTokenInfosAsync(accountId).then((data) => {\n    State.update({\n      tokenInfos: data.tokenInfos,\n    });\n  });\n  State.update({\n    hasFetchTokenInfos: true,\n  });\n}\n\nfunction checkImageUpload() {\n  if (state.image.cid) {\n    const imageUrl = `${ipfsPrefix}/${state.image.cid}`;\n    const response = fetch(imageUrl);\n    State.update({ uploadError: undefined, dataUrl: undefined });\n    if (response) {\n      const content = response.body;\n      const contentType = response.contentType;\n      if (contentType === \"image/svg+xml\") {\n        const base64Content = btoa(content);\n        const originalkb = new Blob([base64Content]).size / 1024;\n        const dataUrl = `data:${contentType};base64,${base64Content}`;\n        const conetntkb = new Blob([dataUrl]).size / 1024;\n        if (originalkb > 16) {\n          State.update({\n            uploadError:\n              \"The SVG icon must be less than 16KB\",\n          });\n          return;\n        } else if (conetntkb > 32) {\n          State.update({\n            uploadError: \"Transformed SVG data URL should be less than 32KB\",\n          });\n          return;\n        }\n        console.log(dataUrl);\n        State.update({ dataUrl });\n      } else {\n        State.update({ uploadError: \"Icon must be in SVG format\" });\n      }\n    }\n  }\n}\n\ncheckImageUpload();\n\nfunction registerFtWrapper() {\n  const registerFtWrapperOp = {\n    contractName: config.contractName,\n    methodName: config.methodName,\n    args: {\n      p: config.args.p,\n      op: \"register_ft_wrapper\",\n      tick: state.tickerInput,\n      icon: state.dataUrl,\n    },\n  };\n  const registerInFactory = {\n    contractName: config.ftWrapperFactory,\n    methodName: \"register\",\n    args: {\n      ticker: state.tickerInput,\n    },\n    deposit: \"3000000000000000000000000\", // 3 NEAR\n  };\n\n  Near.call([registerFtWrapperOp, registerInFactory]);\n\n  State.update({\n    tickerInput: undefined,\n    image: {},\n    registeredTokenContracts: undefined,\n  });\n}\n\nif (!state.registeredTokenContracts) {\n  getFtWrappers().then((subcontracts) => {\n    State.update({\n      registeredTokenContracts: subcontracts,\n    });\n  });\n}\n\nconst tickData =\n  state.tokenInfos && state.registeredTokenContracts\n    ? state.tokenInfos\n        .filter(\n          (a) =>\n            !state.registeredTokenContracts\n              .map((r) => r.split(\".\")[0].toLowerCase())\n              .includes(a.ticker.toLowerCase())\n        )\n        .sort((a, b) => {\n          if (a.ticker.toUpperCase() === \"NEAT\") {\n            return -1;\n          }\n          if (b.ticker.toUpperCase() === \"NEAT\") {\n            return 1;\n          }\n          return a.ticker.localeCompare(b.ticker);\n        })\n    : [];\n\nif (state.tokenInfos && state.registeredTokenContracts) {\n  if ((!state.assetSelectError && !tickData) || tickData.length === 0) {\n    State.update({\n      assetSelectError:\n        \"No tokens available for registration. Please deploy your NRC-20 token first.\",\n    });\n  } else if (state.assetSelectError && tickData && tickData.length > 0) {\n    State.update({\n      assetSelectError: undefined,\n    });\n  }\n}\n\nfunction updateSelectValue(ticker) {\n  State.update({\n    tickerInput: ticker,\n  });\n}\n\nif (\n  !state.tickerInput &&\n  props.tick &&\n  tickData &&\n  tickData.find((a) => a.ticker.toLowerCase() === props.tick?.toLowerCase())\n) {\n  updateSelectValue(props.tick);\n}\n\nreturn (\n  <>\n    <div style={{ fontWeight: \"bold\", marginTop: \"20px\" }}>\n      Only deployer of the ticker can register and deploy its NEP-141 wrapper\n      token.\n    </div>\n    <div>\n      <Widget\n        src={`${config.ownerId}/widget/NRC-20.AssetSelect`}\n        props={{\n          title: \"Tick\",\n          hideBalance: true,\n          hideTitle: true,\n          data: tickData,\n          updateSelectValue,\n          updateError: (error) => {\n            State.update({\n              assetSelectError: error,\n            });\n          },\n          value: state.tickerInput\n            ? state.tickerInput.toUpperCase()\n            : undefined,\n        }}\n      />\n      {state.assetSelectError && (\n        <InputError>{state.assetSelectError}</InputError>\n      )}\n    </div>\n    <div>\n      <FormInputTitle style={{ marginBottom: \"12px\" }}>Icon</FormInputTitle>\n      <IpfsImageUpload image={state.image} />\n      {state.uploadError && <InputError>{state.uploadError}</InputError>}\n      <div style={{ marginTop: \"12px\" }}>\n        NEP-141 token icon must be in SVG format and less than 16KB.\n      </div>\n    </div>\n    <FormButton\n      disabled={!state.dataUrl || !state.tickerInput || state.formInputError}\n      onClick={registerFtWrapper}\n    >\n      Register\n    </FormButton>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.TokenRegistration", "fact_widget_deployments_id": "e18a80b23fec8651cfa8c4bf405233b8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}