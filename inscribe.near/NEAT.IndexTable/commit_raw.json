{"tx_hash": "98C7eLsB8QzSQNRwW9qAGZDtjMom6oBngw3pngGxFHVj", "action_id_social": "A18YzzgALKBBrAMM5w52mSAaBibeBn5s876KZJC7aLG6-0-widget", "block_id": 106796609, "block_timestamp": "2023-11-29T09:00:25.137Z", "signer_id": "inscribe.near", "widget_name": "NEAT.IndexTable", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        indexerUrl: \"https://inscription-indexer-a16497da251b.herokuapp.com/v1\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        indexerUrl: \"https://inscription-indexer-a16497da251b.herokuapp.com/v1\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nconst TableOuter = styled.div``;\nconst TableContainer = styled.div`\n  height: 320px;\n  overflow: hidden;\n`;\n\nconst IndexTableBody = styled.tbody``;\n\nconst IndexTable = styled.table`\n  border-spacing: 10px;\n  width: 100%;\n`;\n\nconst IndexHeaderTr = styled.tr`\n  width: 100%;\n  top: 20px;\n  left: 0;\n`;\n\nconst IndexTd = styled.td`\n  font-size: 14px;\n  color: #fffffff0;\n  max-width: 160px;\n  @media (min-width: 640px) {\n    max-width: auto;\n  }\n`;\n\nconst IndexTh = styled.th`\n  font-size: 14px;\n  color: #ffffffa8;\n  font-weight: 600;\n`;\n\nconst IndexDataTr = styled.tr`\n  background: #18181805;\n  height: 56px;\n`;\n\nconst AddressData = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TableFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst TableRowsAmount = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff66;\n`;\n\nState.init({\n  balance: undefined,\n  tickerRawData: {},\n  holders: [],\n  ticker: [\n    {\n      title: \"Token:\",\n      value: \"-\",\n    },\n    {\n      title: \"Protocol:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Supply:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Minted:\",\n      value: \"-\",\n    },\n    {\n      title: \"Minted%:\",\n      value: \"-\",\n    },\n    {\n      title: \"Mint Limit:\",\n      value: \"-\",\n    },\n    {\n      title: \"Holders:\",\n      value: \"-\",\n    },\n  ],\n});\n\nfunction fetchAllData() {\n  const response = fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `\n        query {\n          tokenInfo (id: \"NEAT\") {\n            ticker\n            maxSupply\n            totalSupply\n            limit\n          }\n          holderCount (id: \"HolderCount\") {\n            count\n          }\n        }\n      `,\n    }),\n  });\n\n  if (response) {\n    const tokenInfo = response.body.data.tokenInfo;\n    const holderCount = response.body.data.holderCount.count;\n    State.update({\n      tickerRawData: {\n        display_name: tokenInfo.ticker,\n      },\n      ticker: [\n        {\n          title: \"Token:\",\n          value: tokenInfo.ticker,\n        },\n        {\n          title: \"Protocol:\",\n          value: \"NRC-20\",\n        },\n        {\n          title: \"Total Supply:\",\n          value: Number(tokenInfo.maxSupply ?? 0).toLocaleString(),\n        },\n        {\n          title: \"Total Minted:\",\n          value: Number(tokenInfo.totalSupply ?? 0).toLocaleString(),\n        },\n        {\n          title: \"Minted%:\",\n          value:\n            Big(tokenInfo.totalSupply ?? 0)\n              .div(tokenInfo.maxSupply ?? 1)\n              .times(100)\n              .toFixed(2) + \"%\",\n        },\n        {\n          title: \"Mint Limit:\",\n          value: Number(tokenInfo.limit).toLocaleString(),\n        },\n        {\n          title: \"Holders:\",\n          value: Number(holderCount).toLocaleString(),\n        },\n      ],\n    });\n  }\n\n  const displayName = state.tickerRawData.display_name;\n  if (displayName) {\n    const holdersResult = fetch(\n      `${config.indexerUrl}/tickers/${displayName}/holders`,\n      {\n        method: \"GET\",\n      }\n    );\n    State.update({\n      holders: holdersResult.body,\n    });\n  }\n  const accountId = props.accountId || context.accountId;\n  const balancesResponse = fetch(`${config.indexerUrl}/balances/${accountId}`, {\n    method: \"GET\",\n  });\n  const balance = balancesResponse.body[0]?.balance ?? \"0\";\n  State.update({ balance });\n}\n\nfetchAllData();\n\n\n\nconst headers = [\"Rank\", \"Address\", \"Amount\"];\nconst current = String(state.current ?? \"1\");\nconst totalPage = String(Math.ceil(state.holders.length / pageAmountOfPage));\nconst data = state.holders\n  .slice(\n    (Number(current) - 1) * pageAmountOfPage,\n    Number(current) * pageAmountOfPage\n  )\n  .map((row, idx) => ({\n    rank: String(Number(idx) + 1),\n    address: row.account,\n    amount: Number(row.balance).toLocaleString(),\n  }));\nreturn (\n  <TableOuter>\n    <TableContainer>\n      <IndexTable>\n        <IndexHeaderTr>\n          {headers.map((header) => (\n            <IndexTh key={header}>{header}</IndexTh>\n          ))}\n        </IndexHeaderTr>\n        <IndexTableBody>\n          {data.map((row) => (\n            <IndexDataTr key={row.rank}>\n              <IndexTd>{row.rank}</IndexTd>\n              <IndexTd style={{ paddingRight: \"24px\" }}>\n                <AddressData>{row.address}</AddressData>\n              </IndexTd>\n              <IndexTd>{row.amount}</IndexTd>\n            </IndexDataTr>\n          ))}\n        </IndexTableBody>\n      </IndexTable>\n    </TableContainer>\n    <TableFooter>\n      <TableRowsAmount>\n        {state.holders.length.toLocaleString()} rows\n      </TableRowsAmount>\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.Pagination`}\n        props={{\n          current,\n          totalPage,\n          updateCurrentPage: (value) => {\n            State.update({ current: value });\n          },\n        }}\n      />\n    </TableFooter>\n  </TableOuter>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NEAT.IndexTable", "fact_widget_deployments_id": "a684a4b97a0e920688947a6a586c9d21", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}