{"tx_hash": "4uUpEWWdKUeQzSiLCUjufdsho331mGSF5rCmfrezyN1u", "action_id_social": "6ZySV29uYEHrX6nZmJ6h9smuds9NBDyqrmNX7tETokrm-0-widget", "block_id": 106740090, "block_timestamp": "2023-11-28T14:53:07.202Z", "signer_id": "inscribe.near", "widget_name": "NEAT.IndexTable", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        indexerUrl: \"https://inscription-indexer-a16497da251b.herokuapp.com/v1\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        indexerUrl: \"https://inscription-indexer-a16497da251b.herokuapp.com/v1\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nconst TableOuter = styled.div``;\nconst TableContainer = styled.div`\n  height: 320px;\n  overflow: hidden;\n`;\n\nconst IndexTableBody = styled.tbody``;\n\nconst IndexTable = styled.table`\n  border-spacing: 10px;\n  width: 100%;\n`;\n\nconst IndexHeaderTr = styled.tr`\n  width: 100%;\n  top: 20px;\n  left: 0;\n`;\n\nconst IndexTd = styled.td`\n  font-size: 14px;\n  color: #fffffff0;\n  max-width: 160px;\n  @media (min-width: 640px) {\n    max-width: auto;\n  }\n`;\n\nconst IndexTh = styled.th`\n  font-size: 14px;\n  color: #ffffffa8;\n  font-weight: 600;\n`;\n\nconst IndexDataTr = styled.tr`\n  background: #18181805;\n  height: 56px;\n`;\n\nconst AddressData = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TableFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst TableRowsAmount = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff66;\n`;\n\nState.init({\n  balance: undefined,\n  tickerRawData: {},\n  holders: [],\n  ticker: [\n    {\n      title: \"Token:\",\n      value: \"-\",\n    },\n    {\n      title: \"Protocol:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Supply:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Minted:\",\n      value: \"-\",\n    },\n    {\n      title: \"Minted%:\",\n      value: \"-\",\n    },\n    {\n      title: \"Mint Limit:\",\n      value: \"-\",\n    },\n    {\n      title: \"Holders:\",\n      value: \"-\",\n    },\n  ],\n});\n\nfunction fetchAllData() {\n  const result = fetch(`${config.indexerUrl}/tickers`, {\n    method: \"GET\",\n  });\n  const data = result.body[0];\n  State.update({\n    tickerRawData: data,\n    ticker: [\n      {\n        title: \"Token:\",\n        value: data.display_name,\n      },\n      {\n        title: \"Protocol:\",\n        value: \"NRC-20\",\n      },\n      {\n        title: \"Total Supply:\",\n        value: Number(data.max_supply ?? 0).toLocaleString(),\n      },\n      {\n        title: \"Total Minted:\",\n        value: Number(data.total_supply ?? 0).toLocaleString(),\n      },\n      {\n        title: \"Minted%:\",\n        value:\n          Big(data.total_supply ?? 0)\n            .div(data.max_supply ?? 1)\n            .times(100)\n            .toFixed(2) + \"%\",\n      },\n      {\n        title: \"Mint Limit:\",\n        value: Number(data.limit).toLocaleString(),\n      },\n      {\n        title: \"Holders:\",\n        value: Number(data.holders).toLocaleString(),\n      },\n    ],\n  });\n  const displayName = state.tickerRawData.display_name;\n  if (displayName) {\n    const holdersResult = fetch(\n      `${config.indexerUrl}/tickers/${displayName}/holders`,\n      {\n        method: \"GET\",\n      }\n    );\n    State.update({\n      holders: holdersResult.body,\n    });\n  }\n  const accountId = props.accountId || context.accountId;\n  const balancesResponse = fetch(`${config.indexerUrl}/balances/${accountId}`, {\n    method: \"GET\",\n  });\n  const balance = balancesResponse.body[0]?.balance ?? \"0\";\n  State.update({ balance });\n}\n\nfetchAllData();\n\n\n\nconst headers = [\"Rank\", \"Address\", \"Amount\"];\nconst current = String(state.current ?? \"1\");\nconst totalPage = String(Math.ceil(state.holders.length / pageAmountOfPage));\nconst data = state.holders\n  .slice(\n    (Number(current) - 1) * pageAmountOfPage,\n    Number(current) * pageAmountOfPage\n  )\n  .map((row, idx) => ({\n    rank: String(Number(idx) + 1),\n    address: row.account,\n    amount: Number(row.balance).toLocaleString(),\n  }));\nreturn (\n  <TableOuter>\n    <TableContainer>\n      <IndexTable>\n        <IndexHeaderTr>\n          {headers.map((header) => (\n            <IndexTh key={header}>{header}</IndexTh>\n          ))}\n        </IndexHeaderTr>\n        <IndexTableBody>\n          {data.map((row) => (\n            <IndexDataTr key={row.rank}>\n              <IndexTd>{row.rank}</IndexTd>\n              <IndexTd style={{ paddingRight: \"24px\" }}>\n                <AddressData>{row.address}</AddressData>\n              </IndexTd>\n              <IndexTd>{row.amount}</IndexTd>\n            </IndexDataTr>\n          ))}\n        </IndexTableBody>\n      </IndexTable>\n    </TableContainer>\n    <TableFooter>\n      <TableRowsAmount>\n        {state.holders.length.toLocaleString()} rows\n      </TableRowsAmount>\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.Pagination`}\n        props={{\n          current,\n          totalPage,\n          updateCurrentPage: (value) => {\n            State.update({ current: value });\n          },\n        }}\n      />\n    </TableFooter>\n  </TableOuter>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NEAT.IndexTable", "fact_widget_deployments_id": "f530f47ba50dd76df8d760ada8c0524c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}