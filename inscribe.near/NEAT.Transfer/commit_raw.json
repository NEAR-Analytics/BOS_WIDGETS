{"tx_hash": "CxgfYQsg9FFVkMk2PtgeCALjNeCP9s3fzW9ojHGjyyo3", "action_id_social": "HexFYjBPBLpQe7M5w8fTRy4M7Xb8wDzz3NC3PhNCBzs7-0-widget", "block_id": 107925951, "block_timestamp": "2023-12-14T13:12:01.209Z", "signer_id": "inscribe.near", "widget_name": "NEAT.Transfer", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\n\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(balance, decimal) {\n  if (!decimal) decimal = 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nconst FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormTitle = styled.div`\n  font-size: 22px;\n  font-weight: 600px;\n`;\n\nconst FormButton = styled.button`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  background: transparent;\n  color: #ffffff;\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.4;\n  }\n  &:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nState.init({\n  balance: undefined,\n  wrappedFtBalance: undefined,\n  tickerRawData: {},\n  holders: [],\n  ticker: [\n    {\n      title: \"Token:\",\n      value: \"-\",\n    },\n    {\n      title: \"Protocol:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Supply:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Minted:\",\n      value: \"-\",\n    },\n    {\n      title: \"Minted%:\",\n      value: \"-\",\n    },\n    {\n      title: \"Mint Limit:\",\n      value: \"-\",\n    },\n    {\n      title: \"Holders:\",\n      value: \"-\",\n    },\n  ],\n  // transfer component\n  transferAmount: \"\",\n  transferTo: \"\",\n});\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction fetchAllData() {\n  const response = fetchFromGraph(`\n    query {\n      tokenInfo (id: \"NEAT\") {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n      }\n      holderCount (id: \"NEAT\") {\n        count\n      }\n    }\n  `);\n\n  if (response) {\n    const tokenInfo = response.body.data.tokenInfo;\n    const holderCount = response.body.data.holderCount.count;\n    State.update({\n      tokenInfo,\n      tickerRawData: {\n        display_name: tokenInfo.ticker,\n        holderCount,\n      },\n      ticker: [\n        {\n          title: \"Token:\",\n          value: tokenInfo.ticker,\n        },\n        {\n          title: \"Protocol:\",\n          value: \"NRC-20\",\n        },\n        {\n          title: \"Total Supply:\",\n          value: formatAmount(tokenInfo.maxSupply ?? 0),\n        },\n        {\n          title: \"Total Minted:\",\n          value: formatAmount(tokenInfo.totalSupply ?? 0),\n        },\n        {\n          title: \"Minted%:\",\n          value:\n            Big(tokenInfo.totalSupply ?? 0)\n              .div(tokenInfo.maxSupply ?? 1)\n              .times(100)\n              .toFixed(2) + \"%\",\n        },\n        {\n          title: \"Mint Limit:\",\n          value: formatAmount(tokenInfo.limit ?? 0),\n        },\n        {\n          title: \"Holders:\",\n          value: toLocaleString(holderCount, 0),\n        },\n      ],\n    });\n  }\n\n  getBalance().then((balance) =>\n    State.update({\n      balance,\n    })\n  );\n\n  getWrappedFtBalance().then((balance) =>\n    State.update({\n      wrappedFtBalance: balance,\n    })\n  );\n}\n\nfetchAllData();\n\nconst isInputDigit = (value) => /^(\\d*(\\.\\d*)?|\\.\\d+)$/.test(value);\nconst isDigit = (value) => /^\\d+(\\.\\d+)?$/.test(value);\nconst removePrefix0 = (value) => {\n  if (!isDigit(value)) return value;\n  if (Number(value) === 0 && !value.includes(\".\")) return \"0\";\n  else {\n    if (value.includes(\".\")) {\n      if (!value.startsWith(\".\")) {\n        return value;\n      }\n      return value.replace(/^0+/, \"0\");\n    } // 00. transform to 0.\n    else return value.replace(/^0+/, \"\"); // 01 transform to 1\n  }\n};\nconst isMax8Decimals = (value) => /^\\d*(\\.\\d{0,8})?$/.test(value);\n\n\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nfunction getVariantByAccount() {\n  if (state.validAccount === false) return \"red\";\n  if (state.validAccount === true) return \"green\";\n  return undefined;\n}\nconst variant = getVariantByAccount();\n\nfunction updateBalance() {\n  const interval = setInterval(() => {\n    getBalance().then((balance) => {\n      if (balance && state.balance !== balance) {\n        State.update({ balance });\n        clearInterval(interval);\n      }\n    });\n  }, 500);\n}\n\nfunction updateInputValue(value) {\n  State.update({ transferAmountInputError: undefined });\n  if (!isSignedIn) {\n    State.update({\n      transferAmountInputError: \"Sign in please\",\n    });\n    return;\n  }\n  if (value === \"\" || (isInputDigit(value) && isMax8Decimals(value))) {\n    State.update({ transferAmount: removePrefix0(value) });\n  }\n\n  if (\n    isDigit(value) &&\n    Big(value).gt(Big(state.balance ?? 0).div(Big(10).pow(8)))\n  ) {\n    State.update({\n      transferAmountInputError: \"Insufficient balance\",\n    });\n  }\n}\nreturn (\n  <>\n    <FormContainer style={{ fontWeight: \"bold\" }}>\n      NEAT is now transferrable with 8 decimals \ud83d\udca5\n      <br />\n      The minimum amount that you can transfer is 0.00000001 NEAT\n    </FormContainer>\n    <FormContainer>\n      <FormTitle>Transfer</FormTitle>\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.FormInput`}\n        props={{\n          title: \"Transfer Amount\",\n          maxTitle: \"Your $NEAT Balance: \",\n          maxValue: state.balance ? formatAmount(state.balance) : \"-\",\n          value: state.transferAmount,\n          unit: \"$NEAT\",\n          onChange: updateInputValue,\n          onClickMax: () =>\n            updateInputValue(\n              Big(state.balance ?? 0)\n                .div(Big(10).pow(8))\n                .toFixed()\n            ),\n          error: state.transferAmountInputError,\n        }}\n      />\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.FormInput`}\n        props={{\n          title: \"Transfer To\",\n          value: state.transferTo,\n          variant,\n          onChange: (value) => {\n            State.update({ transferTo: value, validAccount: undefined });\n\n            // debounce\n            clearTimeout(state.timer);\n            State.update({\n              timer: setTimeout(() => {\n                if (value !== \"\") {\n                  asyncFetch(config.nodeUrl, {\n                    method: \"POST\",\n                    headers: {\n                      \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                      jsonrpc: \"2.0\",\n                      id: \"dontcare\",\n                      method: \"query\",\n                      params: {\n                        request_type: \"view_account\",\n                        finality: \"final\",\n                        account_id: value,\n                      },\n                    }),\n                  }).then((response) => {\n                    if (response.body.error) {\n                      State.update({ validAccount: false });\n                    } else {\n                      State.update({ validAccount: true });\n                    }\n                  });\n                } else {\n                  State.update({\n                    validAccount: undefined,\n                  });\n                }\n              }, 300),\n            });\n          },\n          error:\n            state.validAccount === false ? \"Account does not exist\" : undefined,\n        }}\n      />\n      <FormButton\n        disabled={\n          !!state.transferAmountInputError ||\n          !isDigit(state.transferAmount) ||\n          Big(state.transferAmount).lte(0) ||\n          !state.validAccount\n        }\n        onClick={() => {\n          Near.call(config.contractName, config.methodName, {\n            ...config.transferArgs,\n            to: state.transferTo,\n            amt: Big(state.transferAmount).times(Big(10).pow(8)).toFixed(0),\n          });\n          updateBalance();\n          State.update({\n            transferAmount: \"\",\n            transferTo: \"\",\n            validAccount: undefined,\n          });\n        }}\n      >\n        Transfer\n      </FormButton>\n    </FormContainer>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NEAT.Transfer", "fact_widget_deployments_id": "c0a16aa81f33c8dad62a7681d6e5fd0a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}