{"tx_hash": "E3DcBzvibNcJMgVtiZkjrdenbMRnyhCGFeHNj9iEfqSg", "action_id_social": "CeUcBPCKSHnr1uTaYQxm1qWQHadDRibsWWs8jTKjLiX-0-widget", "block_id": 120900325, "block_timestamp": "2024-06-11T03:16:40.426Z", "signer_id": "inscribe.near", "widget_name": "NEAT.Transfer", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nconst SEC_OF_MS = 1000;\nconst MIN_OF_MS = 60 * SEC_OF_MS;\nconst HOUR_OF_MS = 60 * MIN_OF_MS;\nconst DAY_OF_MS = HOUR_OF_MS * 24;\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://gateway-arbitrum.network.thegraph.com/api/98b4f8ff96be187a889dddcac0e3ef13/subgraphs/id/47RQk8YD4XqgczsgNYSNaWVQLNNwt49DuAuMAxCiLXJZ\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n        nearDecimals: 24,\n        stakingContractName: \"neat-staking.near\",\n        wNearTokenId: \"wrap.near\",\n        refContractId: \"v2.ref-finance.near\",\n        neatPoolId: 4243,\n        firstFarmStartTimeUTC: \"2024-06-03T08:00Z\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.studio.thegraph.com/query/76896/neat-test/version/latest\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n        nearDecimals: 24,\n        stakingContractName: \"neat-staking.testnet\",\n        wNearTokenId: \"wrap.testnet\",\n        refContractId: \"exchange.ref-dev.testnet\",\n        neatPoolId: 728,\n        firstFarmStartTimeUTC: \"2024-06-03T08:00Z\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nconst RPS_MULTIPLIER = 1e24;\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst WarningStyle = styled.div`\n  color: rgb(252, 91, 91);\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n`;\n\nconst WarningImage = styled.img`\n  width: 20px;\n  height: 20px;\n  margin-right: 8px;\n`;\n\nconst FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormTitle = styled.div`\n  font-size: 22px;\n  font-weight: 600px;\n\n  @media (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nconst FormButton = styled.button`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  background: transparent;\n  color: #ffffff;\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.4;\n  }\n  &:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nfunction fetchFromGraph(query) {\n  return fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction asyncFetchFromGraph(query) {\n  return asyncFetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n    }),\n  });\n}\n\nfunction fetchEventCounts(_tick) {\n  const tick = _tick || \"NEAT\";\n  return asyncFetchFromGraph(`\n    query {\n      eventCounts(where: {id:\"${tick}\"}) {\n        id\n        ticker\n        mintEventCount\n        transferEventCount\n      }\n    }\n  `).then((response) => {\n    if (response.body?.data?.eventCounts) {\n      return response.body.data.eventCounts;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfosAsync() {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(first: 1000) {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n        createdBlockTimestamp\n        decimals\n      }\n      holderCounts(first: 1000) {\n        ticker\n        count\n      }\n    }\n  `).then((tokensInfoResponse) => {\n    if (tokensInfoResponse.body?.data) {\n      return tokensInfoResponse.body?.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchTokenInfoAsync(token) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfo (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        limit\n        decimals\n        maxSupply\n        totalSupply\n        creatorId\n        createdBlockHeight\n        createdBlockTimestamp\n      }\n      holderCount (\n        id: \"${token.toUpperCase()}\",\n      ) {\n        ticker\n        count\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction fetchOwnTokenInfosAsync(creatorId) {\n  return asyncFetchFromGraph(`\n    query {\n      tokenInfos(where:{creatorId:\"${creatorId}\"}) {\n        ticker\n        decimals\n        limit\n      }\n    }\n  `).then((tokenInfoResponse) => {\n    if (tokenInfoResponse.body?.data) {\n      return tokenInfoResponse.body.data;\n    }\n    return undefined;\n  });\n}\n\nfunction getBalance() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n          ticker: \"neat\"\n        }\n      ) {\n        accountId\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    const holder = balanceResponse.body.data.holderInfos[0];\n    if (holder) {\n      return holder.amount;\n    }\n    return \"0\";\n  });\n}\n\nfunction getBalances() {\n  const accountId = props.accountId || context.accountId;\n  return asyncFetchFromGraph(`\n    query {\n      holderInfos(\n        where: {\n          accountId: \"${accountId}\"\n        }\n      ) {\n        ticker\n        amount\n      }\n    }\n  `).then((balanceResponse) => {\n    if (balanceResponse.body?.data) {\n      return balanceResponse.body.data.holderInfos;\n    }\n    return undefined;\n  });\n}\n\nfunction getFtWrappers(n, _data) {\n  const i = n ?? 0;\n  const data = _data ?? [];\n  const amount = 500;\n  return Near.asyncView(config.ftWrapperFactory, \"get_ft_wrappers\", {\n    offset: i * amount,\n    limit: amount,\n  })\n    .then((subcontracts) => {\n      if (subcontracts.length < amount) {\n        return [...subcontracts, ...data];\n      } else {\n        return getFtWrappers(i + 1, subcontracts).then((response) => {\n          return [...response, ...data];\n        });\n      }\n    })\n    .catch((err) => {\n      console.error(err);\n      return data;\n    });\n}\n\nfunction getNep141Balance(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_wrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getUnwrapFeeRate(contractName) {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(contractName, \"get_unwrap_fee_rate\", {\n    account_id: accountId,\n  });\n}\n\nfunction getWrappedFtBalance() {\n  const accountId = props.accountId || context.accountId;\n  return Near.asyncView(config.ftWrapper, \"ft_balance_of\", {\n    account_id: accountId,\n  });\n}\n\nfunction getNrc20TotalSupply() {\n  if (!state.nep141TotalSupply || !state.tokenInfo?.maxSupply) return undefined;\n  return Big(state.tokenInfo.maxSupply).sub(state.nep141TotalSupply).toFixed();\n}\n\nfunction getNep141TotalSupply() {\n  return Near.asyncView(config.ftWrapper, \"ft_total_supply\");\n}\n\n// type UserReward = {\n//   farmId: string;\n//   status: FarmStatus;\n//   rewardTokenId: string;\n//   amount: string;\n// };\n\n// type FarmStatus = 'NotStarted' | 'Pending' | 'Ended' | 'Closed';\n\n// type RewardsInfo = {\n//   user_id: string;\n//   user_seeds: string;\n//   total_seeds: string;\n//   farm_infos: FarmInfo[];\n// };\n\n// type FarmInfo = {\n//   farm_id: string;\n//   reward_token_id: string;\n//   total_rewards: string;\n//   start_at: number;\n//   end_at: number;\n//   last_distributed_at: number;\n//   rps: string;\n//   status: FarmStatus;\n\n//   user_unclaimed_rewards: string;\n//   user_rps: string;\n// };\n\n/**\n * @param {number} timestamp\n * @param {RewardsInfo} info1\n * @returns UserReward[]\n */\nfunction estimateUserRewards(\n  timestamp,\n  { user_seeds, total_seeds, farm_infos }\n) {\n  const result = [];\n\n  for (const farmInfo of farm_infos) {\n    if (farmInfo.status === \"NotStarted\" || farmInfo.status === \"Closed\") {\n      result.push({\n        farmId: farmInfo.farm_id,\n        status: farmInfo.status,\n        rewardTokenId: farmInfo.reward_token_id,\n        amount: farmInfo.user_unclaimed_rewards,\n      });\n    } else if (farmInfo.status === \"Pending\" || farmInfo.status === \"Ended\") {\n      if (timestamp < farmInfo.last_distributed_at) {\n        throw Error(\"Invalid timestamp\");\n      }\n\n      const totalDuration = farmInfo.end_at - farmInfo.start_at;\n      const rewardsEndTime = Math.min(farmInfo.end_at, timestamp);\n      let duration = rewardsEndTime - farmInfo.last_distributed_at;\n\n      if (farmInfo.rps_frozen) {\n        duration = 0;\n      }\n\n      const rewards = Big(\n        Big(farmInfo.total_rewards)\n          .mul(duration)\n          .div(totalDuration)\n          .toFixed(0, Big.roundDown)\n      );\n\n      const rps = Big(\n        rewards.mul(RPS_MULTIPLIER).div(total_seeds).toFixed(0, Big.roundDown)\n      );\n\n      const newRps = rps.add(farmInfo.rps);\n\n      const userRewards = newRps\n        .sub(farmInfo.user_rps)\n        .mul(user_seeds)\n        .div(RPS_MULTIPLIER)\n        .toFixed(0, Big.roundDown);\n\n      const newUserRewards = Big(userRewards).add(\n        farmInfo.user_unclaimed_rewards\n      );\n\n      result.push({\n        farmId: farmInfo.farm_id,\n        status: farmInfo.status,\n        rewardTokenId: farmInfo.reward_token_id,\n        amount: newUserRewards,\n      });\n    } else {\n      throw Error(`Unexpected farm status: ${farmInfo.status}`);\n    }\n  }\n\n  return result;\n}\n\n// type PoolInfo = {\n//   token_account_ids: string[];\n//   amounts: string[];\n// }\n\n// type Farm = {\n//   reward_token_id: string;\n//   total_rewards: string;\n//   start_at: number;\n//   end_at: number;\n// };\n\n/**\n * getNeatPriceInNear\n * @param {string} contractId\n * @param {number} poolId\n * @param {number} neatDecimals\n * @returns Promise<Big>\n */\nfunction getNeatPriceInNear(contractId, poolId, neatDecimals) {\n  return Near.asyncView(contractId, \"get_pool\", { pool_id: poolId }).then(\n    (pool) =>\n      Big(pool.amounts[0]).div(pool.amounts[1]).mul(Big(10).pow(neatDecimals))\n  );\n}\n\n/**\n * calcFarmApr\n * @param {Farm} wnearFarm\n * @param {Big} totalStakedNeat\n * @param {Big} neatPriceInNear\n * @param {number} neatDecimals\n * @returns void\n */\nfunction calcFarmApr(\n  wnearFarm,\n  totalStakedNeat,\n  neatPriceInNear,\n  neatDecimals\n) {\n  const equivalentTotalStakedNear = totalStakedNeat\n    .mul(neatPriceInNear)\n    .div(Big(10).pow(neatDecimals));\n  if (equivalentTotalStakedNear.eq(0)) {\n    return Big(0);\n  }\n  return Big(wnearFarm.total_rewards)\n    .mul(365 * 86400 * 1000)\n    .div(wnearFarm.end_at - wnearFarm.start_at)\n    .div(equivalentTotalStakedNear);\n}\n\nfunction fetchReleasedAmount() {\n  const accountId = props.accountId || context.accountId;\n  Near.asyncView(config.stakingContractName, \"get_released_seed_of\", {\n    user_id: accountId,\n  })\n    .then((releasedAmountRaw) => {\n      State.update({ releasedAmountRaw });\n      return formatAmount(releasedAmountRaw, config.neatDecimals);\n    })\n    .then((releasedAmount) => State.update({ releasedAmount }));\n}\n\nfunction fetchUserRewards() {\n  const accountId = props.accountId || context.accountId;\n  Near.asyncView(config.stakingContractName, \"get_user_rewards_info\", {\n    user_id: accountId,\n  }).then((rewardsInfo) => {\n    const userRewards = estimateUserRewards(Date.now(), rewardsInfo);\n    State.update({\n      userRewards,\n      userRewardsPositive: userRewards.filter((userReward) =>\n        Big(userReward.amount).gt(0)\n      ),\n    });\n    const rewardsSum = userRewards\n      .filter((reward) => reward.rewardTokenId === config.wNearTokenId)\n      .reduce((prev, cur) => {\n        return prev.add(cur.amount);\n      }, Big(0));\n    const claimableRewards = toLocaleString(\n      Big(rewardsSum).div(Big(10).pow(config.nearDecimals)).toFixed(),\n      4\n    );\n    State.update({ claimableRewards });\n  });\n}\n\nfunction fetchStakingData() {\n  const accountId = props.accountId || context.accountId;\n  // Near.asyncView(config.stakingContractName, \"get_total_unstaked_seeds\").then(\n  //   (unstakedSeeds) => {\n  //     State.update({ unstakedSeeds });\n  //   }\n  // );\n  Near.asyncView(config.stakingContractName, \"get_total_seeds\").then(\n    (totalSeeds) => {\n      State.update({ totalSeeds });\n    }\n  );\n  if (state.totalSeeds) {\n    State.update({\n      neatTvl: formatAmount(state.totalSeeds, config.neatDecimals),\n    });\n  }\n\n  Near.asyncView(config.stakingContractName, \"get_seed_of\", {\n    user_id: accountId,\n  })\n    .then((stakedNeatAmountRaw) => {\n      State.update({ stakedNeatAmountRaw });\n      return formatAmount(stakedNeatAmountRaw, config.neatDecimals);\n    })\n    .then((stakedNeatAmount) => {\n      State.update({ stakedNeatAmount });\n    });\n\n  Near.asyncView(config.stakingContractName, \"get_unstaked_seed_of\", {\n    user_id: accountId,\n  })\n    .then((userUnstakedSeedRaw) => {\n      State.update({ userUnstakedSeedRaw });\n      return formatAmount(userUnstakedSeedRaw, config.neatDecimals);\n    })\n    .then((userUnstakedSeed) => {\n      State.update({ userUnstakedSeed });\n    });\n\n  Near.asyncView(\n    config.stakingContractName,\n    \"get_pending_unstake_end_time_of\",\n    {\n      user_id: accountId,\n    }\n  ).then((end_timestamp) => {\n    const end_date = new Date(end_timestamp);\n    State.update({\n      unstakeFinishedTime: `${end_date.getFullYear()}/${String(\n        end_date.getMonth() + 1\n      ).padStart(2, \"0\")}/${String(end_date.getDate()).padStart(\n        2,\n        \"0\"\n      )} ${String(end_date.getHours()).padStart(2, \"0\")}:${String(\n        end_date.getMinutes()\n      ).padStart(2, \"0\")}`,\n    });\n    const interval = end_timestamp - Date.now();\n    const day = Math.floor(interval / DAY_OF_MS);\n    const hour = Math.floor((interval - day * DAY_OF_MS) / HOUR_OF_MS);\n    if (interval <= 0) {\n      State.update({\n        unstakeRemainingTime: `~0d 0h`,\n      });\n    } else {\n      State.update({\n        unstakeRemainingTime: `~${day}d ${hour}h`,\n      });\n    }\n  });\n\n  if (!state.neatPriceInNear) {\n    getNeatPriceInNear(\n      config.refContractId,\n      config.neatPoolId,\n      config.neatDecimals\n    ).then((neatPriceInNear) => State.update({ neatPriceInNear }));\n  }\n\n  if (!state.openFarms) {\n    Near.asyncView(config.stakingContractName, \"get_open_farms\").then(\n      (openFarms) => State.update({ openFarms })\n    );\n  }\n\n  if (\n    state.totalSeeds &&\n    state.openFarms &&\n    state.neatPriceInNear &&\n    state.openFarmsApr == \"-\"\n  ) {\n    const openFarmsApr = state.openFarms\n      .filter(\n        (openFarm) =>\n          openFarm.reward_token_id === config.wNearTokenId &&\n          openFarm.status === \"Pending\"\n      )\n      .reduce((prev, cur) => {\n        const apr = calcFarmApr(\n          cur,\n          Big(state.totalSeeds),\n          state.neatPriceInNear,\n          config.neatDecimals\n        );\n        return prev.add(apr);\n      }, Big(0));\n    State.update({ openFarmsApr: openFarmsApr.times(100).toFixed(2) + \"%\" });\n  }\n}\n\nState.init({\n  balance: undefined,\n  wrappedFtBalance: undefined,\n  tickerRawData: {},\n  holders: [],\n  ticker: [\n    {\n      title: \"Token:\",\n      value: \"-\",\n    },\n    {\n      title: \"Protocol:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Supply:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Minted:\",\n      value: \"-\",\n    },\n    {\n      title: \"Minted%:\",\n      value: \"-\",\n    },\n    {\n      title: \"Mint Limit:\",\n      value: \"-\",\n    },\n    {\n      title: \"Holders:\",\n      value: \"-\",\n    },\n  ],\n  // transfer component\n  tickInput: props.tick ?? \"\",\n  transferAmount: \"\",\n  transferTo: \"\",\n  balances: undefined,\n  // wrap, unwrap component\n  wrapTab: \"wrap\",\n  // stake, unstake component\n  stakeTab: \"stake\",\n  // stake component\n  neatTvl: \"-\",\n  stakedNeatAmount: \"-\",\n  userUnstakedSeed: \"-\",\n  unstakeRemainingTime: \"-\",\n  claimableRewards: \"-\",\n  openFarmsApr: \"-\",\n  releasedAmount: \"-\",\n});\n\nfunction fetchAllData() {\n  asyncFetchFromGraph(`\n    query {\n      tokenInfo (id: \"NEAT\") {\n        ticker\n        maxSupply\n        totalSupply\n        limit\n      }\n      holderCount (id: \"NEAT\") {\n        count\n      }\n    }\n  `).then((response) => {\n    const tokenInfo = response.body.data.tokenInfo;\n    const holderCount = response.body.data.holderCount.count;\n    State.update({\n      tokenInfo,\n      tickerRawData: {\n        display_name: tokenInfo.ticker,\n        holderCount,\n      },\n      ticker: [\n        {\n          title: \"Token:\",\n          value: tokenInfo.ticker,\n        },\n        {\n          title: \"Protocol:\",\n          value: \"NRC-20\",\n        },\n        {\n          title: \"Total Supply:\",\n          value: formatAmount(tokenInfo.maxSupply ?? 0),\n        },\n        {\n          title: \"Total Minted:\",\n          value: formatAmount(tokenInfo.totalSupply ?? 0),\n        },\n        {\n          title: \"Minted%:\",\n          value:\n            Big(tokenInfo.totalSupply ?? 0)\n              .div(tokenInfo.maxSupply ?? 1)\n              .times(100)\n              .toFixed(2) + \"%\",\n        },\n        {\n          title: \"Mint Limit:\",\n          value: formatAmount(tokenInfo.limit ?? 0),\n        },\n        {\n          title: \"Holders:\",\n          value: toLocaleString(holderCount, 0),\n        },\n      ],\n    });\n  });\n\n  getBalance().then((balance) =>\n    State.update({\n      balance,\n    })\n  );\n\n  getWrappedFtBalance().then((balance) =>\n    State.update({\n      wrappedFtBalance: balance,\n    })\n  );\n\n  getNep141TotalSupply().then((nep141TotalSupply) => {\n    State.update({\n      nep141TotalSupply,\n    });\n  });\n\n  const nrc20TotalSupply = getNrc20TotalSupply();\n  if (nrc20TotalSupply) {\n    State.update({\n      nrc20TotalSupply,\n    });\n  }\n\n  getBalances().then((balances) => {\n    State.update({\n      balances,\n    });\n  });\n}\n\nif (!state.hasFetchGlobalData) {\n  fetchAllData();\n  State.update({ hasFetchGlobalData: true });\n}\n\nconst isInputDigit = (value) => /^(\\d*(\\.\\d*)?|\\.\\d+)$/.test(value);\nconst isDigit = (value) => /^\\d+(\\.\\d+)?$/.test(value);\nconst isInteger = (value) => /^\\d+$/.test(value);\nconst isLetterAndDigit = (value) => /^[a-zA-Z0-9]+$/.test(value);\nconst removePrefix0 = (value) => {\n  if (!isDigit(value)) return value;\n  if (Number(value) === 0 && !value.includes(\".\")) return \"0\";\n  else {\n    if (value.includes(\".\")) {\n      if (!value.startsWith(\".\")) {\n        return value;\n      }\n      return value.replace(/^0+/, \"0\");\n    } // 00. transform to 0.\n    else return value.replace(/^0+/, \"\"); // 01 transform to 1\n  }\n};\n\nconst isMaxDecimals = (_value, _decimals) => {\n  const value = String(_value);\n  const decimals = Number(_decimals ?? 0);\n  if (!value.includes(\".\")) {\n    return true;\n  }\n  const splits = value.split(\".\");\n  if (decimals === 0) {\n    return false;\n  }\n  const num = splits[1].length;\n  return decimals >= num;\n};\n\n\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\nfunction getVariantByAccount() {\n  if (state.validAccount === false) return \"red\";\n  if (state.validAccount === true) return \"green\";\n  return undefined;\n}\nconst variant = getVariantByAccount();\n\nfunction updateBalance() {\n  const interval = setInterval(() => {\n    getBalance().then((balance) => {\n      if (balance && state.balance !== balance) {\n        State.update({ balance });\n        clearInterval(interval);\n      }\n    });\n  }, 500);\n}\n\nfunction updateInputValue(value) {\n  if (!isSignedIn) {\n    State.update({\n      transferAmountInputError: \"Sign in please\",\n    });\n    return;\n  }\n  if (value === \"\" || (isInputDigit(value) && isMaxDecimals(value, 8))) {\n    State.update({\n      transferAmount: removePrefix0(value),\n      transferAmountInputError: undefined,\n    });\n  }\n\n  if (\n    isDigit(value) &&\n    Big(value).gt(Big(state.balance ?? 0).div(Big(10).pow(8)))\n  ) {\n    State.update({\n      transferAmountInputError: \"Insufficient balance\",\n    });\n  }\n}\n\nreturn (\n  <>\n    <FormContainer style={{ fontWeight: \"bold\" }}>\n      NEAT is now transferrable with 8 decimals \ud83d\udca5\n      <br />\n      The minimum amount that you can transfer is 0.00000001 NEAT\n    </FormContainer>\n    <FormContainer>\n      <FormTitle>Transfer</FormTitle>\n      <WarningStyle>\n        <WarningImage\n          src={`${ipfsPrefix}/bafkreidaidhyfsjb3bqvm7gyyse47hvyjmj6oqhukcbez7z5k3ntc2qtn4`}\n        />\n        <div>Don't transfer NRC-20 tokens to CEXs' addresses!!!</div>\n      </WarningStyle>\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.FormInput`}\n        props={{\n          title: \"Transfer Amount\",\n          maxTitle: \"Your $NEAT Balance: \",\n          maxMobileTitle: \"Balance: \",\n          maxValue: state.balance ? formatAmount(state.balance) : \"-\",\n          value: state.transferAmount,\n          unit: \"$NEAT\",\n          onChange: updateInputValue,\n          onClickMax: () =>\n            updateInputValue(\n              Big(state.balance ?? 0)\n                .div(Big(10).pow(8))\n                .toFixed()\n            ),\n          error: state.transferAmountInputError,\n        }}\n      />\n      <Widget\n        src={`${config.ownerId}/widget/NEAT.FormInput`}\n        props={{\n          title: \"Transfer To\",\n          value: state.transferTo,\n          variant,\n          onChange: (value) => {\n            State.update({ transferTo: value, validAccount: undefined });\n\n            // debounce\n            clearTimeout(state.timer);\n            State.update({\n              timer: setTimeout(() => {\n                if (value !== \"\") {\n                  asyncFetch(config.nodeUrl, {\n                    method: \"POST\",\n                    headers: {\n                      \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                      jsonrpc: \"2.0\",\n                      id: \"dontcare\",\n                      method: \"query\",\n                      params: {\n                        request_type: \"view_account\",\n                        finality: \"final\",\n                        account_id: value,\n                      },\n                    }),\n                  }).then((response) => {\n                    if (response.body.error) {\n                      State.update({ validAccount: false });\n                    } else {\n                      State.update({ validAccount: true });\n                    }\n                  });\n                } else {\n                  State.update({\n                    validAccount: undefined,\n                  });\n                }\n              }, 300),\n            });\n          },\n          error:\n            state.validAccount === false ? \"Account does not exist\" : undefined,\n        }}\n      />\n      <FormButton\n        disabled={\n          !!state.transferAmountInputError ||\n          !isDigit(state.transferAmount) ||\n          Big(state.transferAmount).lte(0) ||\n          !state.validAccount\n        }\n        onClick={() => {\n          Near.call(config.contractName, config.methodName, {\n            ...config.transferArgs,\n            to: state.transferTo,\n            amt: Big(state.transferAmount ?? 0)\n              .times(Big(10).pow(8))\n              .toFixed(0),\n          });\n          updateBalance();\n          State.update({\n            transferAmount: \"\",\n            transferTo: \"\",\n            validAccount: undefined,\n          });\n        }}\n      >\n        Transfer\n      </FormButton>\n    </FormContainer>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NEAT.Transfer", "fact_widget_deployments_id": "dc61dde404d71971587db78d8af7108c", "inserted_timestamp": "2024-06-11T05:04:29.383Z", "modified_timestamp": "2024-06-11T05:04:29.383Z", "__row_index": 2}