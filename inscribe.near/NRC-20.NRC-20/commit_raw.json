{"tx_hash": "ZuKqoDm5D8S1YYsPb4H7xjPUPFpApzb8RAJ9W5Vaxez", "action_id_social": "6PLd9KDPa6kvtw3cHMmSusCSmqfHew3vHttvgtKnmMhZ-0-widget", "block_id": 120328371, "block_timestamp": "2024-06-03T06:32:59.546Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.NRC-20", "source_code": "const FormFragment = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormTitle = styled.div`\n  font-size: 22px;\n  font-weight: 600px;\n\n  @media (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst FormRowContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst FormRowTitle = styled.div``;\n\nconst FormRowValue = styled.div``;\n\nconst TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nconst SEC_OF_MS = 1000;\nconst MIN_OF_MS = 60 * SEC_OF_MS;\nconst HOUR_OF_MS = 60 * MIN_OF_MS;\nconst DAY_OF_MS = HOUR_OF_MS * 24;\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n        nearDecimals: 24,\n        stakingContractName: \"neat-staking.near\",\n        wNearTokenId: \"wrap.near\",\n        refContractId: \"v2.ref-finance.near\",\n        neatPoolId: 4243,\n        firstFarmStartTimeUTC: \"2024-06-03T08:00Z\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n        nearDecimals: 24,\n        stakingContractName: \"neat-staking.testnet\",\n        wNearTokenId: \"wrap.testnet\",\n        refContractId: \"exchange.ref-dev.testnet\",\n        neatPoolId: 728,\n        firstFarmStartTimeUTC: \"2024-06-03T08:00Z\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nconst RPS_MULTIPLIER = 1e24;\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst TopButton = styled(\"Link\")`\n  color: white;\n  cursor: pointer;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 12px;\n  padding: 8px 20px;\n  border: 0;\n  background: #101010;\n  color: white;\n  border: 1px solid #ffffff11;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    text-decoration: none;\n    opacity: 0.8;\n    background: #333333;\n  }\n  @media (max-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nconst TopButtonGroup = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nconst NRC20Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 650px;\n  padding: 24px 0;\n  @media (min-width: 640px) {\n    padding: 0px;\n  }\n`;\n\n\n\nif (props.tick) {\n  return (\n    <Widget\n      src={`${config.ownerId}/widget/NRC-20.TokenDescription`}\n      props={{\n        tick: props.tick,\n      }}\n    />\n  );\n}\n\nconst currentTab = state.currentTab ?? \"all\";\n\nconst FormTabContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: -20px;\n`;\n\nconst TabOuter = styled.div`\n  background: #333333;\n  display: flex;\n  gap: 2px;\n  border-radius: 8px;\n  padding: 2px;\n`;\n\nconst FormTab = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  padding: 4px 12px;\n  transition: all 0.3s ease-in-out;\n  border-radius: 8px;\n  &:hover {\n    background: #101010;\n    opacity: 1;\n  }\n  ${(props) =>\n    props.selected\n      ? `\n      background: #101010;\n    `\n      : `\n    opacity: 0.6;\n  `}\n`;\n\nreturn (\n  <FormFragment>\n    <NRC20Header>\n      <FormTitle style={{ fontWeight: \"bold\" }}>Search NRC-20</FormTitle>\n      <TopButton href={`/${config.ownerId}/widget/NRC-20?tab=deploy`}>\n        Deploy\n      </TopButton>\n    </NRC20Header>\n    <FormContainer>\n      <FormTabContainer>\n        <TabOuter>\n          <FormTab\n            selected={currentTab === \"all\"}\n            onClick={() => State.update({ currentTab: \"all\" })}\n          >\n            All\n          </FormTab>\n          <FormTab\n            selected={currentTab === \"in-progress\"}\n            onClick={() => State.update({ currentTab: \"in-progress\" })}\n          >\n            In-Progress\n          </FormTab>\n          <FormTab\n            selected={currentTab === \"completed\"}\n            onClick={() => State.update({ currentTab: \"completed\" })}\n          >\n            Completed\n          </FormTab>\n        </TabOuter>\n      </FormTabContainer>\n      <FormBody>\n        <Widget\n          src={`${config.ownerId}/widget/NEAT.SearchInput`}\n          props={{\n            value: state.searchValue,\n            setValue: (value) => State.update({ searchValue: value }),\n            placeholder: \"Search Inscription\",\n          }}\n        />\n        <Widget\n          src={`${config.ownerId}/widget/NRC-20.TokensTable`}\n          props={{\n            searchValue: state.searchValue,\n            currentTab: state.currentTab,\n          }}\n        />\n      </FormBody>\n    </FormContainer>\n  </FormFragment>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.NRC-20", "fact_widget_deployments_id": "2baac13b43eb2313d49ce84e24fd176f", "inserted_timestamp": "2024-06-03T07:41:19.082Z", "modified_timestamp": "2024-06-03T08:41:24.343Z", "__row_index": 3}