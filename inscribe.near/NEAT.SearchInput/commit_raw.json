{"tx_hash": "2ecd5C9NbEuKgwehCjCpdJEYv9E4wTw5ft2UY87pFv84", "action_id_social": "6tVV1i3n7wUP5YTvA7GMkQf2RTroDGFxbb1GwrKMDghR-0-widget", "block_id": 109055890, "block_timestamp": "2023-12-29T03:47:57.443Z", "signer_id": "inscribe.near", "widget_name": "NEAT.SearchInput", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\n\n\nconst SearchInputContainer = styled.div`\n  padding: 12px 16px;\n  border-radius: 4px;\n  display: flex;\n  gap: 4px;\n  background: #ffffff0d;\n  transition: all 0.3s ease-in-out;\n\n  &:focus-within {\n    color: #ffffff0d;\n    background: #ffffff14;\n  }\n`;\n\nconst SearchImg = styled.img`\n  width: 24px;\n  height: 24px;\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  font-weight: 600;\n  border: none;\n  background: transparent;\n  outline: none;\n  color: white;\n  &::placeholder {\n    color: #ffffff59;\n  }\n`;\n\nconst { value, setValue, placeholder } = props;\nreturn (\n  <SearchInputContainer>\n    <SearchImg\n      src={`${ipfsPrefix}/bafkreih5hkojsnvueri63sn42e5zff4dcabzi7grctluyurmh5u3yw7gaa`}\n    />\n    <SearchInput\n      placeholder={placeholder}\n      value={value}\n      onChange={(e) => setValue && setValue(e.target.value)}\n    />\n  </SearchInputContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NEAT.SearchInput", "fact_widget_deployments_id": "fcddf0f3ee218b2c94edcfb3dac27116", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 11}