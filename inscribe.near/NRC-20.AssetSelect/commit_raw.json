{"tx_hash": "tVgjj2jodnSMA55MYggGYVRjwRinRrp3diWrrA2He1q", "action_id_social": "C9WQvBEvHquLSYQyxcGfq193Vm65HFrc4HQfRvxoD143-0-widget", "block_id": 111938181, "block_timestamp": "2024-02-02T14:31:11.808Z", "signer_id": "inscribe.near", "widget_name": "NRC-20.AssetSelect", "source_code": "const TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\nconst landingUrl = \"https://neatprotocol.ai\";\nconst partnerProgramUrl = \"https://forms.gle/4M3fvw3LPiJSyffcA\";\nconst nrc20DocHost = \"https://docs.nrc-20.io/\";\nfunction toLocaleString(source, decimals, rm) {\n  if (typeof source === \"string\") {\n    return toLocaleString(Number(source), decimals);\n  } else if (typeof source === \"number\") {\n    return decimals !== undefined\n      ? source.toLocaleString(undefined, {\n          maximumFractionDigits: decimals,\n          minimumFractionDigits: decimals,\n        })\n      : source.toLocaleString();\n  } else {\n    // Big type\n    return toLocaleString(\n      decimals !== undefined\n        ? Number(source.toFixed(decimals, rm))\n        : source.toNumber(),\n      decimals\n    );\n  }\n}\n\nfunction formatAmount(_balance, _decimal) {\n  const balance = _balance ?? 0;\n  const decimal = _decimal ?? 8;\n  return toLocaleString(\n    Big(balance).div(Big(10).pow(decimal)).toFixed(),\n    decimal\n  );\n}\n\nfunction formatDeployTime(blockTime) {\n  const milliseconds = blockTime / 1000000;\n  const date = new Date(milliseconds);\n\n  const year = date.getUTCFullYear();\n  const month = (date.getUTCMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getUTCDate().toString().padStart(2, \"0\");\n  const hours = date.getUTCHours().toString().padStart(2, \"0\");\n  const minutes = date.getUTCMinutes().toString().padStart(2, \"0\");\n  const seconds = date.getUTCSeconds().toString().padStart(2, \"0\");\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.near\",\n        ftWrapper: \"neat.nrc-20.near\",\n        refFinance: \"https://app.ref.finance/\",\n        minMintEvents: 1_000_000,\n        minHolders: 1_000,\n        neatDecimals: 8,\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat-test\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n        transferArgs: {\n          p: \"nrc-20\",\n          op: \"transfer\",\n          tick: \"neat\",\n        },\n        ftWrapperFactory: \"nrc-20.testnet\",\n        ftWrapper: \"neat.nrc-20.testnet\",\n        refFinance: \"https://testnet.ref-finance.com/\",\n        minMintEvents: 10,\n        minHolders: 5,\n        neatDecimals: 8,\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nfunction ftWrapperAddress(tick) {\n  return tick.toLowerCase() + \".\" + config.ftWrapperFactory;\n}\n\nconst FormInputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FormInputLabel = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: end;\n  @media (max-width: 768px) {\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n  }\n`;\n\nconst FormInputRow = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  height: 50px;\n  margin-top: 12px;\n  border-radius: 12px;\n  padding: 0 16px;\n  align-items: center;\n  .FormInput::placeholder {\n    color: #ffffff44;\n  }\n`;\n\nconst FormInputTitle = styled.div`\n  font-size: 18px;\n  font-weight: ${titleNormal ? \"500\" : \"bold\"};\n\n  @media (max-width: 768px) {\n    font-size: 14px;\n    white-space: nowrap;\n  }\n`;\n\nconst MaxContent = styled.div`\n  font-size: 14px;\n  color: white;\n  font-size: 700;\n  display: flex;\n  .hide-in-pc {\n    display: none;\n  }\n  .hide-in-mobile {\n    display: inline-block;\n  }\n  @media (max-width: 768px) {\n    font-size: 12px;\n    white-space: nowrap;\n    display: inline-block;\n    .hide-in-mobile {\n      display: none;\n    }\n    .hide-in-pc {\n      display: inline-block;\n    }\n  }\n`;\n\nconst MaxValue = styled.button`\n  border: none;\n  outline: none;\n  background: transparent;\n  font-size: 14px;\n  color: white;\n  font-size: 700;\n  margin-left: 4px;\n  ${onClickMax\n    ? `\n      text-decoration: underline;\n      text-underline-offset: 3px;\n    `\n    : ``}\n`;\n\nconst UnitContent = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nconst FormInputError = styled.div`\n  margin-top: 12px;\n  color: rgb(252, 91, 91);\n`;\n\n\n\nconst {\n  title,\n  variant,\n  data,\n  updateSelectValue,\n  hideBalance,\n  hideTitle,\n  updateError,\n  disabled,\n} = props;\n\nconst accountId = props.accountId || context.accountId;\nconst isSignedIn = !!accountId;\n\nState.init({\n  showSelectDropdown: false,\n});\n\nfunction getVariantColor() {\n  if (variant === \"red\") return \"rgb(252, 91, 91)\";\n  else if (variant === \"green\") return \"rgb(0, 141, 106)\";\n  else if (variant === \"grey\") return \"rgb(105, 105, 105)\";\n  return \"#fff\";\n}\nconst variantColor = getVariantColor();\n\nconst SelectContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  max-height: 200px;\n  background: #ffffff11;\n  backdrop-filter: blur(20px);\n  z-index: 10;\n  border: 1px solid #ffffffbb;\n  border-radius: 12px;\n  overflow-y: auto;\n`;\n\nconst SelectTiteRow = styled.div`\n  height: 50px;\n  width: 100%;\n  display: grid;\n  ${hideBalance\n    ? \"grid-template-columns: 1fr;\"\n    : \"grid-template-columns: 1fr 1fr;\"}\n  place-items: center;\n  font-weight: bold;\n`;\nconst SelectRow = styled.div`\n  height: 40px;\n  width: 100%;\n  display: grid;\n  ${hideBalance\n    ? \"grid-template-columns: 1fr;\"\n    : \"grid-template-columns: 1fr 1fr;\"}\n  place-items: center;\n  font-weight: 500;\n  border-top: 1px solid #fff;\n  cursor: pointer;\n  &:hover {\n    color: #ffffff88;\n  }\n`;\n\nconst SelectValue = styled.div`\n  color: #fff;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst UpButton = () => {\n  return (\n    <div\n      style={{\n        width: \"50px\",\n        height: \"50px\",\n        display: \"grid\",\n        placeContent: \"center\",\n        marginLeft: \"8px\",\n        cursor: \"pointer\",\n      }}\n      onClick={(event) => {\n        event.stopPropagation();\n        State.update({\n          showSelectDropdown: false,\n        });\n      }}\n    >\n      <img\n        src={`${ipfsPrefix}/bafkreihv355b3qy3orz7ghcyqrbej2hghutbp36qt7u4l44xb644tijyly`}\n        alt=\"Up\"\n        width={40}\n        height={40}\n      />\n    </div>\n  );\n};\nreturn (\n  <FormInputContainer>\n    <FormInputLabel>\n      <FormInputTitle>{title}</FormInputTitle>\n    </FormInputLabel>\n    <FormInputRow\n      onClick={() => {\n        if (!isSignedIn) {\n          updateError && updateError(\"Sign in please\");\n          return;\n        }\n        if (disabled) {\n          return;\n        }\n        if (!state.showSelectDropdown) {\n          State.update({\n            showSelectDropdown: true,\n          });\n        }\n      }}\n      style={{\n        border: `1px solid ${variantColor}`,\n        cursor: \"pointer\",\n      }}\n    >\n      {!state.showSelectDropdown && props.value && (\n        <SelectValue>{props.value}</SelectValue>\n      )}\n      {state.showSelectDropdown && (\n        <SelectContainer style={{ cursor: \"default\" }}>\n          <div\n            style={{\n              borderRadius: \"12px\",\n              overflow: \"hidden\",\n              padding: \"8px\",\n              display: \"flex\",\n            }}\n          >\n            <div style={{ flex: \"1\" }}>\n              <Widget\n                src={`${config.ownerId}/widget/NEAT.SearchInput`}\n                props={{\n                  value: state.searchValue,\n                  setValue: (value) => State.update({ searchValue: value }),\n                  placeholder: \"Search Ticker\",\n                }}\n              />\n            </div>\n            <UpButton />\n          </div>\n          {!hideTitle && (\n            <SelectTiteRow>\n              <SelectValue>Ticker</SelectValue>\n              {!hideBalance && <SelectValue>Balance</SelectValue>}\n            </SelectTiteRow>\n          )}\n          {data &&\n            data\n              .filter((row) => {\n                if (!state.searchValue || state.searchValue === \"\") {\n                  return true;\n                } else {\n                  return row.ticker\n                    .toUpperCase()\n                    .includes(state.searchValue.toUpperCase());\n                }\n              })\n              .map((row, idx) => (\n                <SelectRow\n                  onClick={(event) => {\n                    event.stopPropagation();\n                    updateSelectValue && updateSelectValue(row.ticker);\n                    State.update({\n                      showSelectDropdown: false,\n                    });\n                  }}\n                  key={idx}\n                >\n                  <SelectValue>{row.ticker.toUpperCase()}</SelectValue>\n                  {!hideBalance && <SelectValue>{row.amount}</SelectValue>}\n                </SelectRow>\n              ))}\n        </SelectContainer>\n      )}\n    </FormInputRow>\n    {error && (\n      <FormInputLabel>\n        <FormInputError>{error}</FormInputError>\n      </FormInputLabel>\n    )}\n  </FormInputContainer>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NRC-20.AssetSelect", "fact_widget_deployments_id": "f8524e244758f0e62b86ed041c5e50dc", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}