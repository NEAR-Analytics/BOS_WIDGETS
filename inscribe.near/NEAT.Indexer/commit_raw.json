{"tx_hash": "98C7eLsB8QzSQNRwW9qAGZDtjMom6oBngw3pngGxFHVj", "action_id_social": "A18YzzgALKBBrAMM5w52mSAaBibeBn5s876KZJC7aLG6-0-widget", "block_id": 106796609, "block_timestamp": "2023-11-29T09:00:25.137Z", "signer_id": "inscribe.near", "widget_name": "NEAT.Indexer", "source_code": "const FormContainer = styled.div`\n  max-width: 650px;\n  width: 100%;\n  background: #141414;\n  border-radius: 4px;\n  border: 1px solid #ffffff1a;\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n\n  padding: 16px;\n  @media (min-width: 640px) {\n    padding: 24px;\n  }\n`;\n\nconst FormTitle = styled.div`\n  font-size: 22px;\n  font-weight: 600px;\n`;\n\nconst FormBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst FormRowContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst FormRowTitle = styled.div``;\n\nconst FormRowValue = styled.div``;\n\nconst FormButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst FormButton = styled.div`\n  height: 56px;\n  width: 100%;\n  display: grid;\n  place-content: center;\n  cursor: pointer;\n  border: 1px solid #ffffff;\n  font-size: 18px;\n  font-weight: 600;\n  border-radius: 4px;\n  &:hover {\n    background: rgba(255, 255, 255, 0.08);\n  }\n`;\n\nconst FormFragment = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TGas = Big(10).pow(12);\nconst MaxGasPerTransaction = TGas.mul(250);\nconst GasPerTransaction = MaxGasPerTransaction.plus(TGas);\nconst pageAmountOfPage = 5;\nconst ipfsPrefix = \"https://ipfs.near.social/ipfs\";\n// Config for Bos app\nfunction getConfig(network) {\n  switch (network) {\n    case \"mainnet\":\n      return {\n        ownerId: \"inscribe.near\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        indexerUrl: \"https://inscription-indexer-a16497da251b.herokuapp.com/v1\",\n        contractName: \"inscription.near\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n      };\n    case \"testnet\":\n      return {\n        ownerId: \"inscribe.testnet\",\n        graphUrl:\n          \"https://api.thegraph.com/subgraphs/name/inscriptionnear/neat\",\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        indexerUrl: \"https://inscription-indexer-a16497da251b.herokuapp.com/v1\",\n        contractName: \"inscription.testnet\",\n        methodName: \"inscribe\",\n        args: {\n          p: \"nrc-20\",\n          op: \"mint\",\n          tick: \"neat\",\n          amt: \"100000000\",\n        },\n      };\n    default:\n      throw Error(`Unconfigured environment '${network}'.`);\n  }\n}\nconst config = getConfig(context.networkId);\nconst tx = {\n  contractName: config.contractName,\n  methodName: config.methodName,\n  args: config.args,\n  gas: GasPerTransaction,\n};\n\nState.init({\n  balance: undefined,\n  tickerRawData: {},\n  holders: [],\n  ticker: [\n    {\n      title: \"Token:\",\n      value: \"-\",\n    },\n    {\n      title: \"Protocol:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Supply:\",\n      value: \"-\",\n    },\n    {\n      title: \"Total Minted:\",\n      value: \"-\",\n    },\n    {\n      title: \"Minted%:\",\n      value: \"-\",\n    },\n    {\n      title: \"Mint Limit:\",\n      value: \"-\",\n    },\n    {\n      title: \"Holders:\",\n      value: \"-\",\n    },\n  ],\n});\n\nfunction fetchAllData() {\n  const response = fetch(config.graphUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `\n        query {\n          tokenInfo (id: \"NEAT\") {\n            ticker\n            maxSupply\n            totalSupply\n            limit\n          }\n          holderCount (id: \"HolderCount\") {\n            count\n          }\n        }\n      `,\n    }),\n  });\n\n  if (response) {\n    const tokenInfo = response.body.data.tokenInfo;\n    const holderCount = response.body.data.holderCount.count;\n    State.update({\n      tickerRawData: {\n        display_name: tokenInfo.ticker,\n      },\n      ticker: [\n        {\n          title: \"Token:\",\n          value: tokenInfo.ticker,\n        },\n        {\n          title: \"Protocol:\",\n          value: \"NRC-20\",\n        },\n        {\n          title: \"Total Supply:\",\n          value: Number(tokenInfo.maxSupply ?? 0).toLocaleString(),\n        },\n        {\n          title: \"Total Minted:\",\n          value: Number(tokenInfo.totalSupply ?? 0).toLocaleString(),\n        },\n        {\n          title: \"Minted%:\",\n          value:\n            Big(tokenInfo.totalSupply ?? 0)\n              .div(tokenInfo.maxSupply ?? 1)\n              .times(100)\n              .toFixed(2) + \"%\",\n        },\n        {\n          title: \"Mint Limit:\",\n          value: Number(tokenInfo.limit).toLocaleString(),\n        },\n        {\n          title: \"Holders:\",\n          value: Number(holderCount).toLocaleString(),\n        },\n      ],\n    });\n  }\n\n  const displayName = state.tickerRawData.display_name;\n  if (displayName) {\n    const holdersResult = fetch(\n      `${config.indexerUrl}/tickers/${displayName}/holders`,\n      {\n        method: \"GET\",\n      }\n    );\n    State.update({\n      holders: holdersResult.body,\n    });\n  }\n  const accountId = props.accountId || context.accountId;\n  const balancesResponse = fetch(`${config.indexerUrl}/balances/${accountId}`, {\n    method: \"GET\",\n  });\n  const balance = balancesResponse.body[0]?.balance ?? \"0\";\n  State.update({ balance });\n}\n\nfetchAllData();\n\n\n\nconst yourNeatData = [\n  {\n    title: \"Token amount\",\n    value: state.balance ? Number(state.balance).toLocaleString() : \"-\",\n  },\n];\nreturn (\n  <FormFragment>\n    <FormContainer>\n      <FormTitle>Your $Neat</FormTitle>\n      <FormBody>\n        {yourNeatData.map((row) => (\n          <FormRowContainer key={row.title}>\n            <FormRowTitle>{row.title}</FormRowTitle>\n            <FormRowValue>{row.value}</FormRowValue>\n          </FormRowContainer>\n        ))}\n      </FormBody>\n    </FormContainer>\n    <FormContainer>\n      <FormTitle>Minted address rank</FormTitle>\n      <FormBody>\n        <Widget src={`${config.ownerId}/widget/NEAT.SearchInput`} />\n        <Widget src={`${config.ownerId}/widget/NEAT.IndexTable`} />\n      </FormBody>\n    </FormContainer>\n  </FormFragment>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/inscribe.near/widget/NEAT.Indexer", "fact_widget_deployments_id": "5724ab97dda46c41c2c023475d074366", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}