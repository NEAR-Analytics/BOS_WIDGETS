{"tx_hash": "DNEofmhqppt4oZMbUXnobsDzVSVYRwSGofa4Fo8V3gqm", "action_id_social": "JQiApczhXuFGCfDarkBpxEPaA11i5nLksBE4UG9RT2j-0-widget", "block_id": 122380822, "block_timestamp": "2024-07-01T09:04:47.346Z", "signer_id": "bos.forum.potlock.near", "widget_name": "components.molecule.MultiSelectCategoryDropdown", "source_code": "const { href } = VM.require(`devhub.near/widget/core.lib.url`);\nhref || (href = () => {});\nconst {\n  selected,\n  onChange,\n  disabled,\n  availableOptions,\n  hideDropdown,\n  linkedRfp,\n} = props;\nconst [selectedOptions, setSelectedOptions] = useState([]);\nconst [isOpen, setIsOpen] = useState(false);\nconst [initialStateApplied, setInitialState] = useState(false);\nconst toggleDropdown = () => {\n  setIsOpen(!isOpen);\n};\nuseEffect(() => {\n  if (JSON.stringify(selectedOptions) !== JSON.stringify(selected)) {\n    if (availableOptions.length > 0) {\n      if ((selected ?? []).some((i) => !i.value)) {\n        setSelectedOptions(\n          selected.map((i) => availableOptions.find((t) => t.value === i))\n        );\n      } else {\n        setSelectedOptions(selected);\n      }\n      setInitialState(true);\n    }\n  } else {\n    setInitialState(true);\n  }\n}, [selected, availableOptions]);\nuseEffect(() => {\n  if (\n    JSON.stringify(selectedOptions) !== JSON.stringify(selected) &&\n    initialStateApplied\n  ) {\n    onChange(selectedOptions);\n  }\n}, [selectedOptions, initialStateApplied]);\nconst Container = styled.div`\n  .drop-btn {\n    width: 100%;\n    text-align: left;\n    padding-inline: 10px;\n  }\n  .dropdown-toggle:after {\n    position: absolute;\n    top: 46%;\n    right: 2%;\n  }\n  .dropdown-menu {\n    width: 100%;\n  }\n  .dropdown-item.active,\n  .dropdown-item:active {\n    background-color: #f0f0f0 !important;\n    color: black;\n  }\n  .disabled {\n    background-color: #f8f8f8 !important;\n    cursor: not-allowed !important;\n    border-radius: 5px;\n    opacity: inherit !important;\n  }\n  .disabled.dropdown-toggle::after {\n    display: none !important;\n  }\n  .custom-select {\n    position: relative;\n  }\n  .selected {\n    background-color: #f0f0f0;\n  }\n  .cursor-pointer {\n    cursor: pointer;\n  }\n  .text-wrap {\n    overflow: hidden;\n    white-space: normal;\n  }\n`;\nconst handleOptionClick = (option) => {\n  if (!selectedOptions.some((item) => item.value === option.value)) {\n    setSelectedOptions([...selectedOptions, option]);\n  }\n  setIsOpen(false);\n};\nconst Item = ({ option }) => {\n  return <div> {option.title}</div>;\n};\nreturn (\n  <>\n    <div className=\"d-flex gap-2 align-items-center\">\n      {(selectedOptions ?? []).map((option) => {\n        return (\n          <div\n            style={{\n              color: \"white\",\n              backgroundColor: `rgb(${option.color})`,\n              width: \"max-content\",\n            }}\n            className=\"d-flex gap-2 align-items-center badge rounded-lg p-2 h6 mb-0\"\n          >\n            {option.title}\n            {!disabled && (\n              <div\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  const updatedOptions = selectedOptions.filter(\n                    (item) => item.value !== option.value\n                  );\n                  setSelectedOptions(updatedOptions);\n                }}\n              >\n                <i className=\"bi bi-trash3-fill\"></i>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n    {!hideDropdown && (\n      <Container>\n        <div\n          className=\"custom-select w-100\"\n          tabIndex=\"0\"\n          onBlur={() => setIsOpen(false)}\n        >\n          <div\n            className={\n              \"dropdown-toggle bg-white border rounded-2 btn drop-btn w-100 \" +\n              (disabled ? \"disabled\" : \"\")\n            }\n            onClick={!disabled && toggleDropdown}\n          >\n            <div className={`selected-option`}>\n              {linkedRfp ? (\n                <span className=\"text-sm d-flex gap-2 align-items-center\">\n                  <i class=\"bi bi-lock-fill\"></i>\n                  These categories match the chosen RFP and cannot be changed.\n                  To use different categories, unlink the RFP.\n                </span>\n              ) : (\n                <span>Select Category </span>\n              )}\n            </div>\n          </div>\n          {isOpen && (\n            <div className=\"dropdown-menu rounded-2 dropdown-menu-end dropdown-menu-lg-start px-2 shadow show w-100\">\n              <div>\n                {(availableOptions ?? []).map((option) => (\n                  <div\n                    key={option.value}\n                    className={`dropdown-item cursor-pointer w-100 my-1 ${\n                      (selectedOptions ?? []).find(\n                        (item) => item.value === option.value\n                      )\n                        ? \"selected\"\n                        : \"\"\n                    }`}\n                    onClick={() => handleOptionClick(option)}\n                  >\n                    <Item option={option} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </Container>\n    )}\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/bos.forum.potlock.near/widget/components.molecule.MultiSelectCategoryDropdown", "fact_widget_deployments_id": "291e3a60040fc5df5400c180d687e530", "inserted_timestamp": "2024-07-01T09:55:31.554Z", "modified_timestamp": "2024-07-01T09:55:31.554Z", "__row_index": 0}