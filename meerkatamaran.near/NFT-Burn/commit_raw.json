{"tx_hash": "GMG8m1jLgAxLWEAmtKYs8zH7cAwmzpdUQHr9pPWrwQYc", "action_id_social": "Cy33LbRkAEtdDXhMX8a3oe17kLDF7xxYpjdMGMC9SQsG-0-widget", "block_id": 111466376, "block_timestamp": "2024-01-27T19:52:08.439Z", "signer_id": "meerkatamaran.near", "widget_name": "NFT-Burn", "source_code": "const BoatTicket = styled.div`\n  border: 2px dashed navy;\n  background-color: white;\n  color: black;\n  padding: 20px;\n  width: 600px; /* or any suitable width */\n  font-family: 'Courier', sans-serif;\n  margin: auto;\n`;\n\nconst TicketHeader = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nconst TicketSection = styled.div`\n  margin-bottom: 15px;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: semi-bold;\n    text-transform: uppercase;\n  }\n\n  input {\n    width: 100%;\n    padding: 8px;\n    border: 0px;\n    border-bottom: 2px dashed;\n    font-style: italic;\n  }\n`;\n\nconst TicketFooter = styled.div`\n  text-align: center;\n  margin-top: 20px;\n`;\n\nconst PrimaryButton = styled.button`\n  background-color: navy;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: darkblue;\n  }\n`;\n\nconst image = props.image;\nconst onChange = props.onChange;\nconst amount = \"10000000000000000000000\"; // 0.01 NEAR // amount to list at, by default its for other marketplaces\nconst accountId = context.accountId; // add check for context it\nconst ownerId = \"meerkatamaran.near\"; // attribution\nconst nft = props.nft ?? {\n  contractId: props.contractId,\n  tokenId: props.tokenId,\n}; // just in case need to pass in a NFT\nconst contractId = \"somenft.contract.near\"; // default nft contract\nconst tokenId = \"1\"; // maybe condtional check if props is eempty // default nft\n// maybe utilize the helper funciton here\n// const fewfarlink =\nconst default_receiver =\n  \"0000000000000000000000000000000000000000000000000000000000000000\"; // default reciver nft for transfers\nconst msg =\n  '{\"price\":' +\n  '\"' +\n  amount +\n  '\"' +\n  ',\"market_type\":\"sale\",\"ft_token_id\":\"near\"}';\n// need to find custom market link to work with\n\nconst nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\nconst tokenInfo = Near.view(contractId, \"nft_token\", {\n  token_id: tokenId,\n});\nconsole.log(tokenInfo.approved_account_ids);\ninitState({\n  contractId: contractId,\n  tokenId: tokenId,\n  validMarketLink: true,\n  nftMetadata: nftMetadata,\n  tokenInfo: tokenInfo,\n  receiverId: default_receiver,\n  validReceiver: true,\n  ownsNFT: false, // change this and check intially\n  transfer: false, // add checkbox for transfer that shows\n  url: image.url,\n  nft: image.nft ?? {}, // from santiago\n});\nfunction ownsNFT() {\n  const ownsNFT = accountId === state.tokenInfo.owner_id;\n  State.update({\n    ownsNFT: ownsNFT,\n  });\n}\nownsNFT();\n\n/*ON CHANGE FUNCTIONS - NEED TO FINISH NOT CONCATENATING*/\n\nconst onChangeReceiver = (receiverId) => {\n  const validReceiverLink = isNearAddress(receiverId); // add error message or change button based on this\n  ownsNFT();\n  State.update({\n    receiverId,\n    validReceiver: validReceiverLink,\n  });\n};\n\nconst onChangeContract = (contractId) => {\n  const nftMetadata = Near.view(contractId, \"nft_metadata\"); // get the contract name\n  State.update({\n    contractId,\n    nftMetadata,\n  });\n  onChangeToken(state.tokenId); // this doesnt change the token\n  ownsNFT();\n};\n\nconst onChangeToken = (tokenId) => {\n  const tokenInfo = Near.view(state.contractId, \"nft_token\", {\n    token_id: tokenId,\n  });\n  State.update({\n    tokenId,\n    tokenInfo,\n  });\n  ownsNFT();\n};\n// finish this statement\nconst updateLink = () => {\n  if (state.contractId && state.tokenId) {\n  }\n};\n/* HELPER FUNCTION */\nfunction isNearAddress(address) {\n  if (typeof address !== \"string\") {\n    return false;\n  }\n  if (!address.endsWith(\".near\")) {\n    return false;\n  }\n  const parts = address.split(\".\");\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (parts[0].length < 2 || parts[0].length > 32) {\n    return false;\n  }\n  if (!/^[a-z0-9_-]+$/i.test(parts[0])) {\n    return false;\n  }\n  return true;\n}\n\nconst transfer = () => {\n  if (!accountId) {\n    return;\n  }\n  // need to buffer serialize arguments, add helper functions with state arguments\n  const gas = 100000000000000; // 100 tGas\n  //   const deposit = 1; // exactly 1 yocto\n  const deposit = 1; // 0.01 near // maybe less\n  Near.call([\n    {\n      contractName: state.contractId,\n      methodName: \"nft_transfer_call\",\n      args: {\n        receiver_id: state.receiverId,\n        token_id: state.tokenId,\n        msg: \"nft burn\",\n      },\n      gas: gas ?? 200000000000000,\n      deposit: deposit ?? 10000000000000000000000,\n    },\n  ]);\n};\nreturn (\n  <div>\n    <div>\n      <div\n        className=\"p-2\"\n        style={{\n          background: \"#fdfdfd\",\n          border: \"solid 1px #dee2e6\",\n          borderTop: 0,\n          borderBottomLeftRadius: \".375rem\",\n          borderBottomRightRadius: \".375rem\",\n          minHeight: \"9em\",\n        }}\n      >\n        <div>\n          <div className=\"mt-2\">\n            <Widget\n              src={`meerkatamaran.near/widget/nft-selector`}\n              props={{\n                onChange: ({ contractId, tokenId }) => {\n                  State.update({\n                    contractId: contractId,\n                    tokenId: tokenId,\n                  });\n                  onChangeToken(tokenId);\n                  onChangeContract(contractId);\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <BoatTicket>\n      <TicketHeader>NFT Funeral Ticket</TicketHeader>\n\n      <TicketSection>\n        <label>Selected ContractID</label>\n        <input type=\"text\" readOnly value={state.contractId} />\n      </TicketSection>\n\n      <TicketSection>\n        <label>Selected Token ID</label>\n        <input type=\"text\" readOnly value={state.tokenId} />\n      </TicketSection>\n\n      <TicketSection>\n        <label>Burn Address</label>\n        <input\n          type=\"text\"\n          placeholder={state.receiverId}\n          onChange={(e) => onChangeReceiver(e.target.value)}\n          readOnly\n        />\n      </TicketSection>\n      <div className=\"row\">\n        {state.ownsNFT && state.validReceiver && (\n          <>\n            <TicketFooter>\n              <small>\n                WARNING: This cannot be undone. <br />\n                Once you confirm the transaction it is burned FOREVER\n              </small>\n              <br />\n              <PrimaryButton onClick={transfer}>\n                Set Sail \u26f5\ufe0f To This NFT\n              </PrimaryButton>\n              <br />\n              <small>\n                WARNING: Please double check the select NFT is the one to burn\n              </small>\n            </TicketFooter>\n          </>\n        )}\n        <div className=\"col-lg-6\"></div>\n        {state.ownsNFT && !state.validReceiver && (\n          <button className=\"btn btn-warning mt-3\">\n            Can't Burn (Invalid Receiver)\n          </button>\n        )}\n        {!state.ownsNFT && state.validReceiver && (\n          <button className=\"btn btn-danger mt-3\">\n            Can't Burn (Don't Own)\n          </button>\n        )}\n      </div>\n    </BoatTicket>\n  </div>\n);\n\n// TODO: Only listing to marketplaces (already listed) to marketplaces that this nft hasnt been listed on\n// add buttons to links in the marketplaces if they have been listed\n// add ability to list on different marketplaces at different price\n// add conditional for not being able to list if their is invalid custom maretkpalce trying to list to or invalid anything\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/meerkatamaran.near/widget/NFT-Burn", "fact_widget_deployments_id": "528bcb84a3e243d1e2459d04a6d93b70", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}