{"tx_hash": "7rPuHJU8Z24ZJ5jbh2zWUYYtFNiwgThpvCo7u5jGuoWj", "action_id_social": "4bXF3EWpcUmPjB3RcacqvwH6bcPgGKcZdWwWDAGsUi7g-0-widget", "block_id": 121159823, "block_timestamp": "2024-06-14T17:17:05.846Z", "signer_id": "chatter.cheddar.near", "widget_name": "lib.reactions", "source_code": "const { getFromIndex } = VM.require(\n    'chatter.cheddar.near/widget/lib.socialDbIndex'\n) || { getFromIndex: () => {} }\nconst { generateMetadata, updateMetadata, buildDeleteMetadata } = VM.require(\n    'chatter.cheddar.near/widget/lib.metadata'\n) || {\n    generateMetadata: () => {},\n    updateMetadata: () => {},\n    buildDeleteMetadata: () => {},\n}\nconst { normalizeId } = VM.require(\n    'chatter.cheddar.near/widget/lib.normalization'\n) || { normalizeId: () => {} }\n\nlet config = {}\nconst ID_PREFIX = 'reaction'\nconst CURRENT_VERSION = 'v0.0.1'\n\nfunction setConfig(value) {\n    config = value\n}\n\nfunction getConfig() {\n    return config\n}\n\nfunction getAction(version) {\n    const baseAction = getConfig().baseActions.reaction\n    const versionData = version ? versions[version] : versions[CURRENT_VERSION]\n    const action = baseAction + versionData.actionSuffix\n    return getConfig().isTest ? `test_${action}` : action\n}\n\nfunction normalizeOldToV_0_0_1(reaction) {\n    reaction.value.sbts = ['public']\n\n    return reaction\n}\n\nfunction normalizeFromV0_0_1ToV0_0_2(reaction, extraParams) {\n    const { elementReactedId } = extraParams\n    const reactionData = {\n        emoji: reaction.value.reaction,\n        elementReactedId,\n    }\n\n    const split = reaction.value.reactionId.split('-')\n    const createdTimestamp = parseInt(split[split.length - 1])\n\n    const metadata = {\n        id: normalizeId(reaction.value.reactionId, ID_PREFIX),\n        author: reaction.accountId,\n        createdTimestamp: createdTimestamp,\n        lastEditTimestamp: createdTimestamp,\n        versionKey: 'v0.0.2',\n    }\n    return {\n        ...reaction,\n        value: {\n            reactionData,\n            metadata,\n        },\n    }\n}\n\nfunction normalizeFromV0_0_2ToV0_0_3(reaction) {\n    return reaction\n}\n\nconst versions = {\n    // old: {\n    //     normalizationFunction: normalizeOldToV_0_0_1,\n    //     actionSuffix: '',\n    // },\n    'v0.0.1': {\n        normalizationFunction: (reaction) => reaction,\n        actionSuffix: `_v0.0.1`,\n    },\n    // 'v0.0.2': {\n    //     normalizationFunction: normalizeFromV0_0_2ToV0_0_3,\n    //     actionSuffix: `_v0.0.2`,\n    // },\n}\n\nfunction fillAction(version) {\n    const baseAction = getConfig().baseActions.reaction\n    const filledAction = baseAction + version.actionSuffix\n    return getConfig().isTest ? `test_${filledAction}` : filledAction\n}\n\nfunction getReactionBlackListByBlockHeight() {\n    return []\n}\n\nfunction filterInvalidReactions(reactions) {\n    return reactions\n        .filter(\n            (reaction) =>\n                reaction.value.reactionId || reaction.value.metadata.id\n        ) // Has id\n        .filter(\n            (reaction) =>\n                !getReactionBlackListByBlockHeight().includes(\n                    reaction.blockHeight\n                ) // Blockheight is not in blacklist\n        )\n}\n\nfunction normalizeReaction(reaction, versionsIndex, elementReactedId) {\n    const extraParams = { elementReactedId }\n    const versionsKeys = Object.keys(versions)\n    for (let i = versionsIndex; i < versionsKeys.length; i++) {\n        const version = versions[versionsKeys[i]]\n        reaction = version.normalizationFunction(reaction, extraParams)\n    }\n    return reaction\n}\n\nfunction getLatestEdits(reactions) {\n    return reactions.filter((obj) => {\n        const userLatestInteraction = reactions.find(\n            (reaction) => reaction.accountId === obj.accountId\n        )\n        return JSON.stringify(userLatestInteraction) === JSON.stringify(obj)\n    })\n}\n\nfunction getReactionsNormalized(elementReactedId) {\n    return Object.keys(versions).map((version, versionIndex) => {\n        const action = fillAction(versions[version])\n        return getFromIndex(action, elementReactedId).then((allReactions) => {\n            const validReactions = filterInvalidReactions(allReactions)\n\n            const latestEdits = getLatestEdits(validReactions)\n\n            const normalizedReactions = latestEdits.map((reaction) =>\n                normalizeReaction(reaction, versionIndex, elementReactedId)\n            )\n\n            return normalizedReactions\n        })\n    })\n}\n\nfunction groupReactions(reactions, loggedUserAccountId) {\n    const userEmoji = undefined\n    const accountsGroupedByReaction = {}\n    reactions.forEach((reaction) => {\n        const emoji = reaction.value.reactionData.emoji.split(' ')[0]\n        if (reaction.accountId === loggedUserAccountId) {\n            userEmoji = emoji\n        }\n        if (!accountsGroupedByReaction[emoji]) {\n            accountsGroupedByReaction[emoji] = []\n        }\n        accountsGroupedByReaction[emoji].push(reaction.accountId)\n    })\n    const reactionsStatistics = Object.keys(accountsGroupedByReaction).map(\n        (reaction) => {\n            return {\n                accounts: accountsGroupedByReaction[reaction],\n                emoji: reaction,\n            }\n        }\n    )\n\n    return { reactionsStatistics, userEmoji }\n}\n\nfunction getInitialEmoji() {\n    return '\ud83e\udd0d Like'\n}\n\nfunction getEmojis() {\n    return [\n        '\u2764\ufe0f Positive',\n        '\ud83d\ude4f Thank you',\n        '\ud83d\udcaf Definitely',\n        '\ud83d\udc40 Thinking',\n        '\ud83d\udd25 Awesome',\n        '\ud83d\udc4d Like',\n        '\ud83d\ude4c Celebrate',\n        '\ud83d\udc4f Applause',\n        '\u26a1 Lightning',\n        '\u22c8 Bowtie',\n    ]\n}\n\nfunction getReactions(config, elementReactedId, loggedUserAccountId) {\n    setConfig(config)\n    const normReactionsPromise = getReactionsNormalized(elementReactedId)\n\n    return Promise.all(normReactionsPromise).then((normReactions) => {\n        const lastReactions = normReactions.flat()\n\n        const groupedReactions = groupReactions(\n            lastReactions,\n            loggedUserAccountId\n        )\n        return groupedReactions\n    })\n}\n\nfunction validateEmoji(emoji) {\n    const errArrMessage = []\n    if (!emoji) {\n        errArrMessage.push('You can only react with an emoji')\n    }\n    if (!getEmojis().includes(emoji)) {\n        errArrMessage.push(`The emoji ${emoji} is not available`)\n    }\n    return errArrMessage\n}\n\nfunction composeData(reaction) {\n    return {\n        index: {\n            [getAction()]: JSON.stringify({\n                key: reaction.reactionData.elementReactedId,\n                value: {\n                    ...reaction,\n                },\n            }),\n        },\n    }\n}\n\n/**\n *\n * @param {*} emoji\n * @param {*} elementReactedId May be an article or a comment\n * @param {*} onCommit\n * @param {*} onCancel\n */\nfunction createReaction(\n    config,\n    emoji,\n    elementReactedId,\n    author,\n    onCommit,\n    onCancel\n) {\n    setConfig(config)\n    const errors = validateEmoji(emoji)\n    if (errors && errors.length) {\n        return { error: true, data: errors }\n    }\n\n    const metadata = generateMetadata({\n        idPrefix: ID_PREFIX,\n        author,\n        versionKey: CURRENT_VERSION,\n    })\n\n    const reaction = {\n        reactionData: {\n            emoji,\n            elementReactedId,\n        },\n        metadata,\n    }\n\n    const data = composeData(reaction)\n\n    Social.set(data, {\n        force: true,\n        onCommit,\n        onCancel,\n    })\n\n    return { error: false, data: 'Reaction created successfully' }\n}\n\nreturn { getEmojis, getReactions, createReaction }\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chatter.cheddar.near/widget/lib.reactions", "fact_widget_deployments_id": "005fdc5b5408351353b86c3239030395", "inserted_timestamp": "2024-06-14T18:55:07.307Z", "modified_timestamp": "2024-06-14T18:55:07.307Z", "__row_index": 2}