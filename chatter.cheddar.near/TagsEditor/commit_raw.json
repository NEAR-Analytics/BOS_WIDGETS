{"tx_hash": "EoPaUfBMEJj7xV4wkXaLYqqKfZi2LoJPKQguJQqZiCM8", "action_id_social": "8u2qYXJPVusiRt5rzWuRRNxoqSRYTCKkS3uyw6LPaEzZ-0-widget", "block_id": 120866335, "block_timestamp": "2024-06-10T16:27:06.996Z", "signer_id": "chatter.cheddar.near", "widget_name": "TagsEditor", "source_code": "const tagsPattern = '*/profile/tags/*'\nconst placeholder = props.placeholder ?? 'Tags'\nconst initialTagsObject = props.initialTagsObject || {}\n\nconst tagsOptions = {}\n\nconst normalizeTag = (tag) =>\n    tag\n        .replaceAll(/[- \\.]/g, '_')\n        .replaceAll(/[^\\w]+/g, '')\n        .replaceAll(/_+/g, '-')\n        .replace(/^-+/, '')\n        .replace(/-+$/, '')\n        .toLowerCase()\n        .trim('-')\n\nconst tagsCount = {}\n\nconst processTagsObject = (obj) => {\n    Object.entries(obj).forEach((kv) => {\n        if (typeof kv[1] === 'object') {\n            processTagsObject(kv[1])\n        } else {\n            const tag = normalizeTag(kv[0])\n            tagsCount[tag] = (tagsCount[tag] || 0) + 1\n        }\n    })\n}\n\nconst getTags = () => {\n    processTagsObject(tagsOptions)\n    const tags = Object.entries(tagsCount)\n    tags.sort((a, b) => b[1] - a[1])\n    return tags.map((t) => ({\n        name: t[0],\n        count: t[1],\n    }))\n}\n\nif (!state.allTags) {\n    initState({\n        allTags: getTags(),\n        tags: Object.keys(initialTagsObject).map((tag) => ({\n            name: normalizeTag(tag),\n        })),\n        originalTags: Object.fromEntries(\n            Object.keys(initialTagsObject).map((tag) => [tag, null])\n        ),\n        id: `tags-selector-${Date.now()}`,\n    })\n}\n\nconst setTags = (tags) => {\n    props.forceClear && props.stateUpdate({ clearTags: false })\n    tags = tags.map((o) => {\n        o.name = normalizeTag(o.name)\n        return o\n    })\n    State.update({ tags })\n    if (props.setTagsObject) {\n        props.setTagsObject(\n            Object.assign(\n                {},\n                Object.fromEntries(tags.map((tag) => [tag.name, '']))\n            )\n        )\n    }\n}\n\nreturn (\n    <>\n        <Typeahead\n            id={state.id}\n            multiple\n            labelKey=\"name\"\n            onChange={setTags}\n            options={state.allTags}\n            placeholder={placeholder}\n            selected={props.forceClear ? [] : state.tags}\n            positionFixed\n            allowNew\n        />\n        {props.debug && (\n            <div>\n                Debugging tags:\n                <pre>{JSON.stringify(state.tags)}</pre>\n            </div>\n        )}\n    </>\n)\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chatter.cheddar.near/widget/TagsEditor", "fact_widget_deployments_id": "61e4d751e7c6dbad00e30840cfe5fd6e", "inserted_timestamp": "2024-06-10T18:04:33.237Z", "modified_timestamp": "2024-06-10T18:04:33.237Z", "__row_index": 14}