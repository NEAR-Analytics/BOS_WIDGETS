{"tx_hash": "G9c6rbiVqvp2zx7co3h86tsTv76oYjX7pCRKrcGEFhAv", "action_id_social": "GuvcqxtZjrAnXhmBg9CrGuHerGcQ3iaNHN5tTt6KsoRn-0-widget", "block_id": 120871035, "block_timestamp": "2024-06-10T17:58:48.313Z", "signer_id": "chatter.cheddar.near", "widget_name": "lib.SBT", "source_code": "const testnetSBTWhitelist = [\n    {\n        value: 'fractal-v2.i-am-human.testnet - class 1',\n        title: 'Fractal',\n        default: true,\n    },\n    {\n        value: 'community-v2.i-am-human.testnet - class 1',\n        title: 'Community',\n    },\n]\nconst mainnetSBTWhitelist = [\n    {\n        value: 'fractal.i-am-human.near - class 1',\n        title: 'General',\n        default: true,\n    },\n    { value: 'community.i-am-human.near - class 1', title: 'OG' },\n    { value: 'community.i-am-human.near - class 2', title: 'Contributor' },\n    {\n        value: 'community.i-am-human.near - class 3',\n        title: 'Core Contributor',\n    },\n    { value: 'elections.ndc-gwg.near - class 2', title: 'HoM' },\n    { value: 'elections.ndc-gwg.near - class 3', title: 'CoA' },\n    { value: 'elections.ndc-gwg.near - class 4', title: 'TC' },\n    { value: 'public', title: 'Public' },\n]\n\nconst getRegistryContract = (config) => {\n    return config.networkId === 'mainnet'\n        ? 'registry.i-am-human.near'\n        : 'registry-v2.i-am-human.testnet'\n}\n\nfunction getSBTWhiteList(config) {\n    return config.networkId === 'mainnet'\n        ? mainnetSBTWhitelist\n        : testnetSBTWhitelist\n}\n\nfunction isValidUser(accountId, config) {\n    const userSBTs = getUserSBTs(accountId, config).then((userSBTs) => {\n        const SBTWhiteList = getSBTWhiteList(config)\n\n        const isValid = SBTWhiteList.some((sbt) => {\n            const data = sbt.value.split(' - class ')\n            const sbtsData = { name: data[0], classNumber: Number(data[1]) }\n\n            const SBTsHaveMatched = userSBTs.some((userSbt) => {\n                return (\n                    userSbt[0] === sbtsData.name &&\n                    userSbt[1].find(\n                        (sbtExtraData) =>\n                            sbtExtraData.metadata.class === sbtsData.classNumber\n                    )\n                )\n            })\n\n            return SBTsHaveMatched\n        })\n\n        return isValid\n    })\n\n    return userSBTs\n}\n\nfunction getUserSBTs(accountId, config) {\n    const userSBTsPromise = Near.asyncView(\n        getRegistryContract(config),\n        'sbt_tokens_by_owner',\n        {\n            account: accountId,\n        }\n    )\n\n    return userSBTsPromise\n}\n\nreturn { isValidUser, getUserSBTs }\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chatter.cheddar.near/widget/lib.SBT", "fact_widget_deployments_id": "e48e9888932f4c8042ffdcb1c185327c", "inserted_timestamp": "2024-06-10T19:04:29.372Z", "modified_timestamp": "2024-06-10T19:04:29.372Z", "__row_index": 9}