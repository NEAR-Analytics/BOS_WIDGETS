{"tx_hash": "7UrJm4sfRpezyZdikVf9u6qYqk3LR2RHDeDT6CyXY8jW", "action_id_social": "64ZkEyHxBYmtXKGaWZeBzdDwfreMsxxbUqw1aQmjnB7q-0-widget", "block_id": 121379917, "block_timestamp": "2024-06-17T18:05:11.000Z", "signer_id": "chatter.cheddar.near", "widget_name": "lib.Communities", "source_code": "const { camelCaseToUserReadable, isValidUrl } = VM.require(\n    'chatter.cheddar.near/widget/lib.strings'\n)\nconst { generateMetadata, updateMetadata } = VM.require(\n    'chatter.cheddar.near/widget/lib.metadata'\n)\n\nconst baseAction = 'cv_communities'\nconst testAction = `test_${baseAction}`\nconst prodAction = `dev_${baseAction}`\nconst version = '0.0.1'\n\nlet isTest = false\n\nfunction getCommunitiesTypes() {\n    return [\n        {\n            id: 0,\n            title: 'Public',\n            description: 'Anyone can view, post and comment.',\n        },\n        {\n            id: 1,\n            title: 'Restricted',\n            description:\n                'Anyone can view this community, but only approved members can post.',\n        },\n        {\n            id: 2,\n            title: 'Private access',\n            description:\n                'Only approved users can view and post in this community.',\n        },\n    ]\n}\n\nfunction getAction() {\n    const envAction = isTest ? testAction : prodAction\n    return `${envAction}_v${version}`\n}\n\nfunction setIsTest(value) {\n    isTest = value\n}\n\nfunction validateCommunityData(communityData) {\n    const expectedStringProperties = [\n        'name',\n        'description',\n        'backgroundImage',\n        'profileImage',\n    ]\n    const expectedUrlProperties = ['backgroundImage', 'profileImage']\n    const isTypeOk =\n        0 <= communityData.type &&\n        communityData.type < getCommunitiesTypes().length\n    const errArrMessage = []\n    // String properties\n    errArrMessage.push(\n        ...expectedStringProperties\n            .map((currentProperty) => {\n                const isValidProperty = communityData[currentProperty]\n                if (!isValidProperty)\n                    return `Missing ${camelCaseToUserReadable(currentProperty)}`\n                return undefined\n            })\n            .filter((str) => str !== undefined)\n    )\n    // Url properties\n    errArrMessage.push(\n        ...expectedUrlProperties\n            .map((currentProperty) => {\n                const isValidProperty = isValidUrl(\n                    communityData[currentProperty]\n                )\n                if (!isValidProperty)\n                    return `Invalid url for ${camelCaseToUserReadable(currentProperty)}`\n                return undefined\n            })\n            .filter((str) => str !== undefined)\n    )\n    if (!isTypeOk) {\n        errArrMessage.push('Type should be between 0 and 2')\n    }\n    return errArrMessage\n}\n\nfunction composeData(communityData, metadata) {\n    let data = {\n        index: {\n            [getAction()]: JSON.stringify({\n                key: 'main',\n                value: {\n                    communityData,\n                    metadata,\n                },\n            }),\n        },\n    }\n\n    return data\n}\n\nfunction composeDeleteData(communityData) {\n    let data = {\n        index: {\n            [getAction()]: JSON.stringify({\n                key: 'main',\n                value: {\n                    communityData: {\n                        id: communityData.id,\n                    },\n                    isDelete: true,\n                },\n            }),\n        },\n    }\n\n    return data\n}\n\nfunction executeSaveCommunity(communityData, metadata, onCommit, onCancel) {\n    const newData = composeData(communityData, metadata)\n    Social.set(newData, {\n        force: true,\n        onCommit,\n        onCancel,\n    })\n}\n\nfunction executeDeleteCommunity(communityData, onCommit, onCancel) {\n    const newData = composeDeleteData(communityData)\n\n    Social.set(newData, {\n        force: true,\n        onCommit,\n        onCancel,\n    })\n}\n\n/**\n *\n * @param {*} communityData\n * @param {*} ownerId Context doesn't seem to work on imported widgets\n * @param {*} onCommit\n * @param {*} onCancel\n * @returns\n */\nfunction createCommunity(communityData, ownerId, onCommit, onCancel) {\n    const errors = validateCommunityData(communityData)\n    if (!ownerId) {\n        return { error: true, data: ['Owner id not shared'] }\n    }\n    if (errors && errors.length) {\n        return { error: true, data: errors }\n    }\n    if (communityData.id) {\n        return {\n            error: true,\n            data: ['There is already a community with this id'],\n        }\n    }\n\n    communityData.id = `cd/${ownerId}/${Date.now()}`\n    const metadata = generateMetadata()\n    executeSaveCommunity(communityData, metadata, onCommit, onCancel)\n\n    const result = 'Community created successfully'\n    return { error: false, data: result }\n}\n\n/**\n *\n * @returns It might return first null and then an empty array and finally an array containing the index structure of communities\n */\nfunction getCommunities() {\n    const action = getAction()\n    const communities =\n        Social.index(action, 'main', {\n            order: 'desc',\n            subscribe,\n            // limit: 10,\n        }) || []\n\n    return processCommunities(communities)\n}\n\nfunction processCommunities(communitiesIndexes) {\n    const validCommunities = filterValidCommunities(communitiesIndexes)\n    const latestEdit = getLatestEdit(validCommunities)\n    const nonDeletedLatest = removeDeleted(latestEdit)\n\n    return nonDeletedLatest\n}\n\nfunction filterValidCommunities(communitiesIndexes) {\n    const accountIdMatch = filterAccountIdWithCommunityId(communitiesIndexes)\n\n    return accountIdMatch\n}\n\nfunction filterAccountIdWithCommunityId(communitiesIndexes) {\n    return communitiesIndexes.filter((communityIndex) => {\n        return communityIndex.value.communityData.id.startsWith(\n            communityIndex.accountId\n        )\n    })\n}\n\nfunction getLatestEdit(communitiesIndexes) {\n    return communitiesIndexes.filter((communityIndex, index) => {\n        return (\n            communitiesIndexes.findIndex((communityIndex2) => {\n                return (\n                    communityIndex.value.communityData.id ===\n                    communityIndex2.value.communityData.id\n                )\n            }) === index\n        )\n    })\n}\n\nfunction removeDeleted(communitiesIndexes) {\n    return communitiesIndexes.filter((communityIndex) => {\n        return !communityIndex.value.isDelete\n    })\n}\n\nfunction editCommunity(communityIndex, onCommit, onCancel) {\n    const communityData = communityIndex.value.communityData\n    const errors = validateCommunityData(communityData)\n    if (errors && errors.length) {\n        return { error: true, data: errors }\n    }\n    if (!communityData.id) {\n        return { error: true, data: ['Community id not provided'] }\n    }\n\n    const metadata = updateMetadata(communityIndex.value.metadata)\n    executeSaveCommunity(communityData, metadata, onCommit, onCancel)\n    const result = 'Community edited successfully'\n    return { error: false, data: result }\n}\n\nfunction deleteCommunity(communityData, onCommit, onCancel) {\n    if (!communityData.id) {\n        return { error: true, data: ['Community id not provided'] }\n    }\n\n    executeDeleteCommunity(communityData, onCommit, onCancel)\n    const result = 'Community removed successfully'\n    return { error: false, data: result }\n}\n\nreturn {\n    setIsTest,\n    createCommunity,\n    getCommunities,\n    editCommunity,\n    deleteCommunity,\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chatter.cheddar.near/widget/lib.Communities", "fact_widget_deployments_id": "562245736d4526f8e1521599e77c9110", "inserted_timestamp": "2024-06-17T19:54:47.895Z", "modified_timestamp": "2024-06-17T19:54:47.895Z", "__row_index": 1}