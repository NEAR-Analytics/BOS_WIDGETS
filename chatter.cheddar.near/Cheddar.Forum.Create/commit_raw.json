{"tx_hash": "HuCLEcdnaDJxddixeV2qSizddZ9cKRmSyVVAPyVDCwKb", "action_id_social": "9YXhw24ihRp26VfspFEMD2jMkGa45oWCz2JBYykCFUbe-0-widget", "block_id": 121417096, "block_timestamp": "2024-06-18T05:48:23.631Z", "signer_id": "chatter.cheddar.near", "widget_name": "Cheddar.Forum.Create", "source_code": "//Cheddar.Forum.Create\nconst { createArticle, editArticle, buildArticle } = VM.require(\n    'chatter.cheddar.near/widget/lib.article'\n) || { createArticle: () => {}, editArticle: () => {}, buildArticle: () => {} }\nconst { getConfig } = VM.require(\n    'chatter.cheddar.near/widget/config.CommunityVoice'\n) || { getConfig: () => {} }\n\nconst {\n    isTest,\n    addressForArticles,\n    authorForWidget,\n    stateUpdate,\n    initialBody,\n    initialCreateState,\n    editArticleData,\n    widgets,\n    handleFilterArticles,\n    handleEditArticle,\n    handlerStateUpdate,\n    baseActions,\n    handleOnCommitArticle,\n    category,\n} = props\n\nconst errTextNoBody = 'ERROR: no article Body',\n    errTextNoId = 'ERROR: no article Id',\n    errTextDublicatedId = 'ERROR: there is article with such name'\n\nState.init({\n    ...initialCreateState,\n    initialBody: props.initialBody ?? '',\n    tags: [],\n})\n\nfunction createStateUpdate(obj) {\n    State.update(obj)\n}\n\nconst tagsArray =\n    editArticleData && !state.tagsModified\n        ? editArticleData.value.articleData.tags\n        : state.tags\n\nconst accountId = context.accountId\n\nfunction getRealArticleId() {\n    if (editArticleData) {\n        return (\n            editArticleData.value.metadata.id ??\n            `article/${editArticleData.value.metadata.author}/${editArticleData.value.metadata.createdTimestamp}`\n        )\n    } else {\n        return `article/${accountId}/${Date.now()}`\n    }\n}\n\nfunction getArticleData() {\n    const args = {\n        title: editArticleData.value.articleData.title ?? state.title,\n        author: editArticleData.value.metadata.author ?? accountId,\n        lastEditor: accountId,\n        timeLastEdit: Date.now(),\n        timeCreate:\n            editArticleData.value.metadata.createdTimestamp ?? Date.now(),\n        body: state.articleBody,\n        version: editArticleData\n            ? editArticleData.value.metadata.versionKey + 1\n            : 0,\n        navigation_id: null,\n        tags: tagsArray ?? [],\n        id: getRealArticleId(),\n        category: editArticleData.value.articleData.category ?? category,\n    }\n    return args\n}\n\nfunction onCommit(articleId) {\n    State.update({\n        title: '',\n        clearArticleId: true,\n        tags: [],\n        clearTags: true,\n        articleBody: '',\n        clearArticleBody: true,\n        initalBody: '',\n        // showCreatedArticle: true,\n        showPreview: false,\n        saving: true,\n    })\n\n    //if (!Array.isArray(article.tags)) article.tags = Object.keys(article.tags);\n\n    handleOnCommitArticle(articleId)\n}\n\nfunction onCancel() {\n    State.update({\n        createdArticle: undefined,\n        saving: false,\n    })\n}\n\nconst handleCreate = () => {\n    const { title, body, tags, category } = getArticleData()\n\n    const articleData = { title, body, tags, category }\n\n    const metadataHelper = {\n        author: context.accountId,\n    }\n    createArticle(\n        getConfig(isTest),\n        articleData,\n        metadataHelper,\n        (id) => onCommit(id),\n        onCancel\n    )\n}\n\nconst handleEdit = () => {\n    const { title, body, tags, id, category } = getArticleData()\n\n    const articleData = { title, body, tags, category }\n\n    const articleMetadata = editArticleData.value.metadata\n\n    editArticle(\n        getConfig(isTest),\n        articleData,\n        articleMetadata,\n        () => onCommit(id),\n        onCancel\n    )\n}\n\nfunction getInitialMarkdownBody() {\n    if (\n        editArticleData &&\n        (!state.articleBody ||\n            state.articleBody === editArticleData.value.articleData.body)\n    ) {\n        return editArticleData.value.articleData.body\n    } else if (\n        state.articleBody &&\n        state.articleBody !== editArticleData.value.articleData.body\n    ) {\n        return state.articleBody\n    } else {\n        return state.initialBody == '' || !state.initialBody\n            ? 'Post content (markdown supported)'\n            : state.initialBody\n    }\n}\n\nfunction switchShowPreview() {\n    State.update({\n        showPreview: !state.showPreview,\n        initialBody: state.articleBody,\n    })\n}\n\nconst GeneralContainer = styled.div`\n    margin: 0;\n`\n\nconst Button = styled.button`\n    margin: 0px 1rem;\n    display: inline-block;\n    text-align: center;\n    vertical-align: middle;\n    cursor: pointer;\n    user-select: none;\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out;\n\n    border: 2px solid transparent;\n    font-weight: 500;\n    padding: 0.3rem 0.5rem;\n    background-color: #010a2d;\n    border-radius: 12px;\n    color: white;\n    text-decoration: none;\n\n    &:hover {\n        color: #010a2d;\n        background-color: white;\n    }\n`\n\nconst CreationContainer = styled.div`\n    background-color: rgb(230, 230, 230);\n    border-radius: 20px;\n    padding: 1rem 0;\n    position: relative;\n`\n\nconst SecondContainer = styled.div`\n    min-width: 360px;\n    background-color: white;\n    padding: 1rem;\n`\n\nconst BoxShadow = styled.div`\n    box-shadow: rgba(140, 149, 159, 0.1) 0px 4px 28px 0px;\n`\n\nconst SpinnerContainer = styled.div`\n    height: 1rem;\n    width: 1rem;\n    margintop: 2px;\n`\n\nconst Spinner = () => {\n    return (\n        <SpinnerContainer\n            className=\"spinner-border text-secondary\"\n            role=\"status\"\n        >\n            <span className=\"sr-only\" title=\"Loading...\"></span>\n        </SpinnerContainer>\n    )\n}\n\nconst initialTagsObject = {}\n\nArray.isArray(tagsArray) &&\n    tagsArray.forEach((tag) => {\n        initialTagsObject[tag] = true\n    })\n\nif (state.saving) {\n    return (\n        <Widget\n            src={\n                widgets.views.standardWidgets.newStyledComponents.Feedback\n                    .Spinner\n            }\n        />\n    )\n}\n\nreturn (\n    <div>\n        <GeneralContainer className=\"pt-2 row card-group\">\n            <BoxShadow className=\"rounded-3 p-3 m-3 bg-white col-lg-8 col-md-8 col-sm-12\">\n                <div>\n                    <SecondContainer className=\"rounded\">\n                        {state.showPreview ? (\n                            <Widget\n                                src={widgets.views.editableWidgets.generalCard}\n                                props={{\n                                    widgets,\n                                    isTest,\n                                    data: {\n                                        blockHeight: -1,\n                                        accountId,\n                                        value: {\n                                            ...buildArticle(\n                                                {\n                                                    title: state.title,\n                                                    body: state.articleBody,\n                                                    tags: tagsArray,\n                                                },\n                                                {\n                                                    author: accountId,\n                                                }\n                                            ),\n                                        },\n                                    },\n                                    addressForArticles,\n                                    handleOpenArticle: () => {},\n                                    handleFilterArticles: () => {},\n                                    authorForWidget,\n                                    handleShareButton: () => {},\n                                    baseActions,\n                                    switchShowPreview,\n                                    isPreview: state.showPreview,\n                                }}\n                            />\n                        ) : (\n                            <div>\n                                <div className=\"d-flex flex-column pt-3\">\n                                    <label\n                                        for=\"inputArticleId\"\n                                        className=\"small text-danger\"\n                                    >\n                                        {state.errorId}\n                                    </label>\n                                    <Widget\n                                        src={\n                                            widgets.views.standardWidgets\n                                                .fasterTextInput\n                                        }\n                                        props={{\n                                            firstText: state.title,\n                                            forceClear: state.clearArticleId,\n                                            stateUpdate: (obj) =>\n                                                State.update(obj),\n                                            filterText: (e) => e.target.value,\n                                            placeholder:\n                                                'Post title (case-sensitive)',\n                                            editable: editArticleData,\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"d-flex flex-column pt-3\">\n                                    <label\n                                        for=\"textareaArticleBody\"\n                                        className=\"small text-danger\"\n                                    >\n                                        {state.errorBody}\n                                    </label>\n                                    <div className=\"d-flex gap-2\">\n                                        <Widget\n                                            src={\n                                                widgets.views.standardWidgets\n                                                    .markownEditorIframe\n                                            }\n                                            props={{\n                                                initialText:\n                                                    getInitialMarkdownBody(),\n                                                onChange: (articleBody) =>\n                                                    State.update({\n                                                        articleBody,\n                                                        clearArticleBody: false,\n                                                    }),\n                                                clearArticleBody:\n                                                    state.clearArticleBody,\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"d-flex flex-column pt-3\">\n                                    <Widget\n                                        src={\n                                            widgets.views.editableWidgets\n                                                .tagsEditor\n                                        }\n                                        props={{\n                                            forceClear: state.clearTags,\n                                            stateUpdate: (obj) =>\n                                                State.update(obj),\n                                            initialTagsObject,\n                                            placeholder: 'Input tags',\n                                            setTagsObject: (tags) => {\n                                                // state.tags = Object.keys(tags);\n                                                State.update({\n                                                    tagsModified: true,\n                                                    tags: Object.keys(tags),\n                                                })\n                                            },\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        )}\n                        <div className=\"mt-2 d-flex justify-content-end\">\n                            <Widget\n                                src={\n                                    widgets.views.standardWidgets\n                                        .newStyledComponents.Input.Button\n                                }\n                                props={{\n                                    className: 'primary outline mx-2',\n                                    disabled:\n                                        state.title.length === 0 ||\n                                        state.articleBody.length === 0,\n                                    onClick: switchShowPreview,\n                                    children: (\n                                        <i\n                                            className={`bi ${\n                                                state.showPreview\n                                                    ? 'bi-pencil'\n                                                    : 'bi-eye-fill'\n                                            }`}\n                                        ></i>\n                                    ),\n                                }}\n                            />\n                            <Widget\n                                src={\n                                    widgets.views.standardWidgets\n                                        .newStyledComponents.Input.Button\n                                }\n                                props={{\n                                    className: 'primary ',\n                                    disabled:\n                                        state.title.length === 0 ||\n                                        state.articleBody.length === 0,\n                                    onClick: editArticleData\n                                        ? handleEdit\n                                        : handleCreate,\n                                    children: (\n                                        <div className=\"d-flex justify-conten-center align-items-center\">\n                                            {state.saving ? (\n                                                <Spinner />\n                                            ) : (\n                                                <>\n                                                    <span>\n                                                        {editArticleData\n                                                            ? 'Save edition'\n                                                            : 'Post'}\n                                                    </span>\n                                                    <i className=\"bi bi-check2\"></i>\n                                                </>\n                                            )}\n                                        </div>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    </SecondContainer>\n                </div>\n            </BoxShadow>\n        </GeneralContainer>\n    </div>\n)\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/chatter.cheddar.near/widget/Cheddar.Forum.Create", "fact_widget_deployments_id": "d7890d6f9a73f7382f4ab8505817d0ea", "inserted_timestamp": "2024-06-18T06:54:04.983Z", "modified_timestamp": "2024-06-18T07:54:16.538Z", "__row_index": 5}