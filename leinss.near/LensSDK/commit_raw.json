{"tx_hash": "FfyRwRiX37b6DmNU86sNS3MHgsACufQYupbWF7ubCeMC", "action_id_social": "2a1m3PpYn61fHE1xFgzmvPUgxj9pXgPfcd4cQtumAvJg-0-widget", "block_id": 96377686, "block_timestamp": "2023-07-13T13:04:51.649Z", "signer_id": "leinss.near", "widget_name": "LensSDK", "source_code": "const { onLoad, onRefresh, loaded, testnet } = props;\n\nconst LENS_API_URL = testnet\n  ? \"https://api-mumbai.lens.dev\"\n  : \"https://api.lens.dev\";\n\nlet LensSDK = {\n  jwt: {\n    accessToken: \"\",\n    refreshToken: \"\",\n  },\n  authenticated: false,\n  request: (query, variables, headers, method) => {\n    return asyncFetch(LENS_API_URL, {\n      method: method ?? \"POST\",\n      headers: headers ?? {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: variables ?? {},\n      }),\n    });\n  },\n  getChallenge: (address) => {\n    return LensSDK.request(\n      `\n        query Challenge ($address: EthereumAddress!) {\n            challenge(request: { address: $address}) {\n            text\n            }\n        }\n       `,\n      {\n        address: address,\n      }\n    );\n  },\n  authenticateSignature: (address, signature) => {\n    return LensSDK.request(\n      `\n        mutation Authenticate ($address: EthereumAddress!, $signature: Signature!) {\n            authenticate(request: {\n            address: $address,\n            signature: $signature\n            }) {\n            accessToken\n            refreshToken\n            }\n        }\n      `,\n      {\n        address: address,\n        signature: signature,\n      }\n    );\n  },\n  authenticateLens: (address, signer, onSuccess) => {\n    LensSDK.getChallenge(address).then((payload) => {\n      let challenge = payload.body.data.challenge.text;\n      const response = signer().signMessage(challenge);\n\n      response.then((signature) => {\n        LensSDK.authenticateSignature(address, signature).then((payload) => {\n          if (\n            payload.status === 200 &&\n            !!payload.body.data.authenticate.accessToken\n          ) {\n            LensSDK.jwt.accessToken =\n              payload.body.data.authenticate.accessToken;\n            LensSDK.jwt.refreshToken =\n              payload.body.data.authenticate.refreshToken;\n            LensSDK.authenticated = true;\n\n            if (onSuccess) {\n              onSuccess();\n            }\n\n            if (onRefresh) {\n              onRefresh(LensSDK);\n            }\n          }\n        });\n      });\n    });\n  },\n  getFollowers: (profileId) => {\n    return LensSDK.request(\n      `\n      query Followers {\n        followers(request: { \n                      profileId: \"` +\n        profileId +\n        `\",\n                    limit: 20\n                   }) {\n             items {\n            wallet {\n              address\n              defaultProfile {\n                id\n                name\n                bio\n                attributes {\n                  displayType\n                  traitType\n                  key\n                  value\n                }\n                followNftAddress\n                  metadata\n                isDefault\n                handle\n                picture {\n                  ... on NftImage {\n                    contractAddress\n                    tokenId\n                    uri\n                    verified\n                  }\n                  ... on MediaSet {\n                    original {\n                      url\n                      mimeType\n                    }\n                  }\n                }\n                coverPicture {\n                  ... on NftImage {\n                    contractAddress\n                    tokenId\n                    uri\n                    verified\n                  }\n                  ... on MediaSet {\n                    original {\n                      url\n                      mimeType\n                    }\n                  }\n                }\n                ownedBy\n                dispatcher {\n                  address\n                  canUseRelay\n                }\n                stats {\n                  totalFollowers\n                  totalFollowing\n                  totalPosts\n                  totalComments\n                  totalMirrors\n                  totalPublications\n                  totalCollects\n                }\n                followModule {\n                  ... on FeeFollowModuleSettings {\n                    type\n                    contractAddress\n                    amount {\n                      asset {\n                        name\n                        symbol\n                        decimals\n                        address\n                      }\n                      value\n                    }\n                    recipient\n                  }\n                  ... on ProfileFollowModuleSettings {\n                   type\n                  }\n                  ... on RevertFollowModuleSettings {\n                   type\n                  }\n                }\n              }\n            }\n            totalAmountOfTimesFollowed\n          }\n          pageInfo {\n            prev\n            next\n            totalCount\n          }\n        }\n      }\n      \n      `,\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  isFollowedByMe: (profileId) => {\n    return LensSDK.request(\n      `\n      query Profile {\n        profile(request: { profileId: \"` +\n        profileId +\n        `\" }) {isFollowedByMe}}`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getProfileByHandle: (handle) => {\n    return LensSDK.request(\n      `\n        query Profile ($handle: Handle!) {\n          profile(request: { handle: $handle }) {\n            id\n            name\n            bio\n            attributes {\n              displayType\n              traitType\n              key\n              value\n            }\n            followNftAddress\n            metadata\n            isDefault\n            picture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            handle\n            coverPicture {\n              ... on NftImage {\n                contractAddress\n                tokenId\n                uri\n                verified\n              }\n              ... on MediaSet {\n                original {\n                  url\n                  mimeType\n                }\n              }\n              __typename\n            }\n            ownedBy\n            stats {\n              totalFollowers\n              totalFollowing\n              totalPosts\n              totalComments\n              totalMirrors\n              totalPublications\n              totalCollects\n            }\n          }\n    }\n  `,\n      {\n        handle: handle,\n      }\n    );\n  },\n  searchProfiles: (query) => {\n    return LensSDK.request(\n      `\n      query Search {\n        search(request: {\n          query: \"` +\n        query +\n        `\",\n          type: PROFILE,\n          limit: 10\n        }) {\n          ... on ProfileSearchResult {\n            __typename \n            items {\n              ... on Profile {\n                ...ProfileFields\n              }\n            }\n            pageInfo {\n              prev\n              totalCount\n              next\n            }\n          }\n        }\n      }\n      \n      fragment MediaFields on Media {\n        url\n        mimeType\n      }\n      \n      fragment ProfileFields on Profile {\n        profileId: id,\n        name\n        bio\n        attributes {\n          displayType\n          traitType\n          key\n          value\n        }\n        isFollowedByMe\n        isFollowing(who: null)\n        followNftAddress\n        metadata\n        isDefault\n        handle\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              ...MediaFields\n            }\n          }\n        }\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              ...MediaFields\n            }\n          }\n        }\n        ownedBy\n        dispatcher {\n          address\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ... on FeeFollowModuleSettings {\n          type\n          amount {\n            asset {\n              name\n              symbol\n              decimals\n              address\n            }\n            value\n          }\n          recipient\n          }\n          ... on ProfileFollowModuleSettings {\n            type\n            contractAddress\n          }\n          ... on RevertFollowModuleSettings {\n            type\n            contractAddress\n          }\n          ... on UnknownFollowModuleSettings {\n            type\n            contractAddress\n            followModuleReturnData\n          }\n        }\n      }\n  `,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getProfileByEthereumAddress: (ethereumAddress) => {\n    return LensSDK.request(\n      `\n        query Profiles ($address: [EthereumAddress!]) {\n        profiles(request: { ownedBy: $address}) {\n          items {\n            handle\n          }\n        }\n    }\n    `,\n      {\n        address: [ethereumAddress],\n      }\n    );\n  },\n  followProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation ProxyAction {\n            proxyAction(request: {\n                follow: {\n                    freeFollow: {\n                        profileId: \"` +\n        profileId +\n        `\"\n                    }\n                }\n            })\n        }`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  unfollowProfile: (profileId) => {\n    return LensSDK.request(\n      `\n        mutation Unfollow {\n  createUnfollowTypedData(request: { profile: \"` +\n        profileId +\n        `\" }) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n        __typename\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n          __typename\n        }\n        __typename\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}`,\n      {},\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getPosts: (profileId) => {\n    return LensSDK.request(\n      `\n      query Publications {\n        publications(request: {\n          profileId: \"` +\n        profileId +\n        `\",\n          publicationTypes: [POST, MIRROR],\n          limit: 10\n        }) {\n          items {\n            __typename \n            ... on Post {\n              ...PostFields\n            }\n            ... on Comment {\n              ...CommentFields\n            }\n            ... on Mirror {\n              ...MirrorFields\n            }\n          }\n          pageInfo {\n            prev\n            next\n            totalCount\n          }\n        }\n      }\n      \n      fragment MediaFields on Media {\n        url\n        mimeType\n      }\n      \n      fragment ProfileFields on Profile {\n        id\n        name\n        bio\n        attributes {\n           displayType\n           traitType\n           key\n           value\n        }\n        isFollowedByMe\n        isFollowing(who: null)\n        followNftAddress\n        metadata\n        isDefault\n        handle\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              ...MediaFields\n            }\n          }\n        }\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              ...MediaFields\n            }\n          }\n        }\n        ownedBy\n        dispatcher {\n          address\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ...FollowModuleFields\n        }\n      }\n      \n      fragment PublicationStatsFields on PublicationStats { \n        totalAmountOfMirrors\n        totalAmountOfCollects\n        totalAmountOfComments\n        totalUpvotes\n        totalDownvotes\n      }\n      \n      fragment MetadataOutputFields on MetadataOutput {\n        name\n        description\n        content\n        media {\n          original {\n            ...MediaFields\n          }\n        }\n        attributes {\n          displayType\n          traitType\n          value\n        }\n      }\n      \n      fragment Erc20Fields on Erc20 {\n        name\n        symbol\n        decimals\n        address\n      }\n      \n      fragment PostFields on Post {\n        id\n        profile {\n          ...ProfileFields\n        }\n        stats {\n          ...PublicationStatsFields\n        }\n        metadata {\n          ...MetadataOutputFields\n        }\n        createdAt\n        collectModule {\n          ...CollectModuleFields\n        }\n        referenceModule {\n          ...ReferenceModuleFields\n        }\n        appId\n        hidden\n        reaction(request: null)\n        mirrors(by: null)\n        hasCollectedByMe\n      }\n      \n      fragment MirrorBaseFields on Mirror {\n        id\n        profile {\n          ...ProfileFields\n        }\n        stats {\n          ...PublicationStatsFields\n        }\n        metadata {\n          ...MetadataOutputFields\n        }\n        createdAt\n        collectModule {\n          ...CollectModuleFields\n        }\n        referenceModule {\n          ...ReferenceModuleFields\n        }\n        appId\n        hidden\n        reaction(request: null)\n        hasCollectedByMe\n      }\n      \n      fragment MirrorFields on Mirror {\n        ...MirrorBaseFields\n        mirrorOf {\n         ... on Post {\n            ...PostFields          \n         }\n         ... on Comment {\n            ...CommentFields          \n         }\n        }\n      }\n      \n      fragment CommentBaseFields on Comment {\n        id\n        profile {\n          ...ProfileFields\n        }\n        stats {\n          ...PublicationStatsFields\n        }\n        metadata {\n          ...MetadataOutputFields\n        }\n        createdAt\n        collectModule {\n          ...CollectModuleFields\n        }\n        referenceModule {\n          ...ReferenceModuleFields\n        }\n        appId\n        hidden\n        reaction(request: null)\n        mirrors(by: null)\n        hasCollectedByMe\n      }\n      \n      fragment CommentFields on Comment {\n        ...CommentBaseFields\n        mainPost {\n          ... on Post {\n            ...PostFields\n          }\n          ... on Mirror {\n            ...MirrorBaseFields\n            mirrorOf {\n              ... on Post {\n                 ...PostFields          \n              }\n              ... on Comment {\n                 ...CommentMirrorOfFields        \n              }\n            }\n          }\n        }\n      }\n      \n      fragment CommentMirrorOfFields on Comment {\n        ...CommentBaseFields\n        mainPost {\n          ... on Post {\n            ...PostFields\n          }\n          ... on Mirror {\n             ...MirrorBaseFields\n          }\n        }\n      }\n      \n      fragment FollowModuleFields on FollowModule {\n        ... on FeeFollowModuleSettings {\n          type\n          amount {\n            asset {\n              name\n              symbol\n              decimals\n              address\n            }\n            value\n          }\n          recipient\n        }\n        ... on ProfileFollowModuleSettings {\n          type\n          contractAddress\n        }\n        ... on RevertFollowModuleSettings {\n          type\n          contractAddress\n        }\n        ... on UnknownFollowModuleSettings {\n          type\n          contractAddress\n          followModuleReturnData\n        }\n      }\n      \n      fragment CollectModuleFields on CollectModule {\n        __typename\n        ... on FreeCollectModuleSettings {\n          type\n          followerOnly\n          contractAddress\n        }\n        ... on FeeCollectModuleSettings {\n          type\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n        }\n        ... on LimitedFeeCollectModuleSettings {\n          type\n          collectLimit\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n        }\n        ... on LimitedTimedFeeCollectModuleSettings {\n          type\n          collectLimit\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n          endTimestamp\n        }\n        ... on RevertCollectModuleSettings {\n          type\n        }\n        ... on TimedFeeCollectModuleSettings {\n          type\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n          endTimestamp\n        }\n        ... on UnknownCollectModuleSettings {\n          type\n          contractAddress\n          collectModuleReturnData\n        }\n      }\n      \n      fragment ReferenceModuleFields on ReferenceModule {\n        ... on FollowOnlyReferenceModuleSettings {\n          type\n          contractAddress\n        }\n        ... on UnknownReferenceModuleSettings {\n          type\n          contractAddress\n          referenceModuleReturnData\n        }\n        ... on DegreesOfSeparationReferenceModuleSettings {\n          type\n          contractAddress\n          commentsRestricted\n          mirrorsRestricted\n          degreesOfSeparation\n        }\n      }\n      `,\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n  getComments: (profileId) => {\n    return LensSDK.request(\n      `\n      query Publications {\n        publications(request: {\n          profileId: \"` +\n        profileId +\n        `\",\n          publicationTypes: [COMMENT],\n          limit: 10\n        }) {\n          items {\n            __typename \n            ... on Post {\n              ...PostFields\n            }\n            ... on Comment {\n              ...CommentFields\n            }\n            ... on Mirror {\n              ...MirrorFields\n            }\n          }\n          pageInfo {\n            prev\n            next\n            totalCount\n          }\n        }\n      }\n      \n      fragment MediaFields on Media {\n        url\n        mimeType\n      }\n      \n      fragment ProfileFields on Profile {\n        id\n        name\n        bio\n        attributes {\n           displayType\n           traitType\n           key\n           value\n        }\n        isFollowedByMe\n        isFollowing(who: null)\n        followNftAddress\n        metadata\n        isDefault\n        handle\n        picture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              ...MediaFields\n            }\n          }\n        }\n        coverPicture {\n          ... on NftImage {\n            contractAddress\n            tokenId\n            uri\n            verified\n          }\n          ... on MediaSet {\n            original {\n              ...MediaFields\n            }\n          }\n        }\n        ownedBy\n        dispatcher {\n          address\n        }\n        stats {\n          totalFollowers\n          totalFollowing\n          totalPosts\n          totalComments\n          totalMirrors\n          totalPublications\n          totalCollects\n        }\n        followModule {\n          ...FollowModuleFields\n        }\n      }\n      \n      fragment PublicationStatsFields on PublicationStats { \n        totalAmountOfMirrors\n        totalAmountOfCollects\n        totalAmountOfComments\n        totalUpvotes\n        totalDownvotes\n      }\n      \n      fragment MetadataOutputFields on MetadataOutput {\n        name\n        description\n        content\n        media {\n          original {\n            ...MediaFields\n          }\n        }\n        attributes {\n          displayType\n          traitType\n          value\n        }\n      }\n      \n      fragment Erc20Fields on Erc20 {\n        name\n        symbol\n        decimals\n        address\n      }\n      \n      fragment PostFields on Post {\n        id\n        profile {\n          ...ProfileFields\n        }\n        stats {\n          ...PublicationStatsFields\n        }\n        metadata {\n          ...MetadataOutputFields\n        }\n        createdAt\n        collectModule {\n          ...CollectModuleFields\n        }\n        referenceModule {\n          ...ReferenceModuleFields\n        }\n        appId\n        hidden\n        reaction(request: null)\n        mirrors(by: null)\n        hasCollectedByMe\n      }\n      \n      fragment MirrorBaseFields on Mirror {\n        id\n        profile {\n          ...ProfileFields\n        }\n        stats {\n          ...PublicationStatsFields\n        }\n        metadata {\n          ...MetadataOutputFields\n        }\n        createdAt\n        collectModule {\n          ...CollectModuleFields\n        }\n        referenceModule {\n          ...ReferenceModuleFields\n        }\n        appId\n        hidden\n        reaction(request: null)\n        hasCollectedByMe\n      }\n      \n      fragment MirrorFields on Mirror {\n        ...MirrorBaseFields\n        mirrorOf {\n         ... on Post {\n            ...PostFields          \n         }\n         ... on Comment {\n            ...CommentFields          \n         }\n        }\n      }\n      \n      fragment CommentBaseFields on Comment {\n        id\n        profile {\n          ...ProfileFields\n        }\n        stats {\n          ...PublicationStatsFields\n        }\n        metadata {\n          ...MetadataOutputFields\n        }\n        createdAt\n        collectModule {\n          ...CollectModuleFields\n        }\n        referenceModule {\n          ...ReferenceModuleFields\n        }\n        appId\n        hidden\n        reaction(request: null)\n        mirrors(by: null)\n        hasCollectedByMe\n      }\n      \n      fragment CommentFields on Comment {\n        ...CommentBaseFields\n        mainPost {\n          ... on Post {\n            ...PostFields\n          }\n          ... on Mirror {\n            ...MirrorBaseFields\n            mirrorOf {\n              ... on Post {\n                 ...PostFields          \n              }\n              ... on Comment {\n                 ...CommentMirrorOfFields        \n              }\n            }\n          }\n        }\n      }\n      \n      fragment CommentMirrorOfFields on Comment {\n        ...CommentBaseFields\n        mainPost {\n          ... on Post {\n            ...PostFields\n          }\n          ... on Mirror {\n             ...MirrorBaseFields\n          }\n        }\n      }\n      \n      fragment FollowModuleFields on FollowModule {\n        ... on FeeFollowModuleSettings {\n          type\n          amount {\n            asset {\n              name\n              symbol\n              decimals\n              address\n            }\n            value\n          }\n          recipient\n        }\n        ... on ProfileFollowModuleSettings {\n          type\n          contractAddress\n        }\n        ... on RevertFollowModuleSettings {\n          type\n          contractAddress\n        }\n        ... on UnknownFollowModuleSettings {\n          type\n          contractAddress\n          followModuleReturnData\n        }\n      }\n      \n      fragment CollectModuleFields on CollectModule {\n        __typename\n        ... on FreeCollectModuleSettings {\n          type\n          followerOnly\n          contractAddress\n        }\n        ... on FeeCollectModuleSettings {\n          type\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n        }\n        ... on LimitedFeeCollectModuleSettings {\n          type\n          collectLimit\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n        }\n        ... on LimitedTimedFeeCollectModuleSettings {\n          type\n          collectLimit\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n          endTimestamp\n        }\n        ... on RevertCollectModuleSettings {\n          type\n        }\n        ... on TimedFeeCollectModuleSettings {\n          type\n          amount {\n            asset {\n              ...Erc20Fields\n            }\n            value\n          }\n          recipient\n          referralFee\n          endTimestamp\n        }\n        ... on UnknownCollectModuleSettings {\n          type\n          contractAddress\n          collectModuleReturnData\n        }\n      }\n      \n      fragment ReferenceModuleFields on ReferenceModule {\n        ... on FollowOnlyReferenceModuleSettings {\n          type\n          contractAddress\n        }\n        ... on UnknownReferenceModuleSettings {\n          type\n          contractAddress\n          referenceModuleReturnData\n        }\n        ... on DegreesOfSeparationReferenceModuleSettings {\n          type\n          contractAddress\n          commentsRestricted\n          mirrorsRestricted\n          degreesOfSeparation\n        }\n      }\n      `,\n      {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": LensSDK.jwt.accessToken,\n      }\n    );\n  },\n};\n\nif (!!onLoad && !loaded) {\n  onLoad(LensSDK);\n}\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/leinss.near/widget/LensSDK", "fact_widget_deployments_id": "9d3afa39472870f37de63ff134b1eec4", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}