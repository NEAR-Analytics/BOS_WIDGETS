{"tx_hash": "FfyRwRiX37b6DmNU86sNS3MHgsACufQYupbWF7ubCeMC", "action_id_social": "2a1m3PpYn61fHE1xFgzmvPUgxj9pXgPfcd4cQtumAvJg-0-widget", "block_id": 96377686, "block_timestamp": "2023-07-13T13:04:51.649Z", "signer_id": "leinss.near", "widget_name": "LensProfileSearch", "source_code": "// Globals\nconst ENV = props.testnet ? \"testnet\" : \"near\";\nconst DEV_USER = props.origin ? `${props.origin}.${ENV}` : `gr8h.${ENV}`;\n\nconst initState = {\n  term: props.terms ?? \"\",\n  profiles: props.profile ?? [],\n  sdk: null,\n  selectedProfile: { profile: null, selection: \"\" },\n  followers: props.followers ?? [],\n  posts: props.posts ?? [],\n  comments: props.comments ?? [],\n  isConnected: false,\n  profile: null,\n};\n\nState.init(initState);\n\nconst ALLOWED_NETWORKS = {\n  testnet: {\n    id: 80001,\n    hex: \"0x13881\",\n  },\n  mainnet: {\n    id: 137,\n    hex: \"0x89\",\n  },\n};\n\n// Styles\nconst ContentWrapper = styled.div`\n  display: flex;\n`;\nconst LeftPanelWrapper = styled.div`\n  max-width: 25vw;\n  min-width: 20rem;\n`;\nconst RightPanelWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n  text-align: center;\n  margin: 1rem;\n`;\n\nconst NoContentWrapper = styled.div`\n  margin: 1rem;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: right;\n  align-items: right;\n  text-align: right;\n  text-align: right;\n  display: flex;\n  justify-content: flex-end;\n  border: apx solid #e3e6ec;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst LoginContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  background-color: #1c1f2a;\n`;\n\nconst Heading = styled.h3`\n  color: #8f73ff;\n`;\n\n// Init & Login\nif (state.account === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ account: accounts[0] });\n    console.log(\"account\", state.account);\n    let provider = Ethers.provider();\n    if (!!provider) {\n      provider.getNetwork().then((network) => {\n        if (network.chainId != getAllowedNetwork().id) {\n          State.update({ isConnected: false });\n          switchNetwork();\n        } else {\n          State.update({ isConnected: true });\n        }\n      });\n    }\n  }\n}\n\nif (state.isConnected && !state.sdk.authenticated && props.requireLogin) {\n  state.sdk.authenticateLens(\n    state.account,\n    () => Ethers.provider().getSigner(),\n    () => {\n      console.log(\"authenticated\");\n    }\n  );\n}\n\nif (!!state.sdk && !state.profile && state.account) {\n  state.sdk.getProfileByEthereumAddress(state.account).then((payload) => {\n    let items = payload.body.data.profiles.items;\n    State.update({ profile: items[0] });\n  });\n}\n\nfunction signInWithLens() {\n  state.sdk.authenticateLens(\n    state.account,\n    () => Ethers.provider().getSigner(),\n    () => {\n      console.log(\"authenticated\");\n    }\n  );\n}\n\nfunction switchNetwork() {\n  try {\n    Ethers.send(\"wallet_switchEthereumChain\", [\n      { chainId: getAllowedNetwork().hex },\n    ]).then((data) => {\n      State.update({ isConnected: true });\n    });\n  } catch (err) {}\n}\n\nfunction getAllowedNetwork() {\n  return props.testnet ? ALLOWED_NETWORKS.testnet : ALLOWED_NETWORKS.mainnet;\n}\n\n// Logic\nconst computeResults = (term) => {\n  State.update({ term });\n  state.sdk.searchProfiles(term).then((payload) => {\n    State.update({ profiles: payload.body.data.search.items, term });\n  });\n};\n\nconst getFollowers = (profileId) => {\n  state.sdk.getFollowers(profileId).then((payload) => {\n    State.update({ followers: payload.body.data.followers.items });\n  });\n};\n\nconst getPosts = (profileId) => {\n  state.sdk.getPosts(profileId).then((payload) => {\n    State.update({ posts: payload.body.data.publications.items });\n  });\n};\n\nconst getComments = (profileId) => {\n  state.sdk.getComments(profileId).then((payload) => {\n    State.update({ comments: payload.body.data.publications.items });\n  });\n};\n\nfunction followProfile(profileId) {\n  state.sdk.followProfile(profileId).then((payload) => {\n    if (payload.body.errors.length) {\n      payload.body.errors.forEach((error) => {\n        console.log(\"followProfile.error: \", error.message);\n      });\n    }\n    computeResults(state.term);\n  });\n}\n\nfunction unfollowProfile(profileId) {\n  state.sdk.unfollowProfile(profileId).then((payload) => {\n    if (payload.body.errors.length) {\n      payload.body.errors.forEach((error) => {\n        console.log(\"unfollowProfile.error: \", error.message);\n      });\n    }\n    computeResults(state.term);\n  });\n}\n\nconst handleFollow = (profileId, isFollowedByMe) => {\n  if (isFollowedByMe) {\n    unfollowProfile(profileId);\n  } else {\n    followProfile(profileId);\n  }\n};\n\nreturn (\n  <>\n    <Container>\n      <Heading>\n        {state.sdk.authenticated\n          ? `Welcome @${state.profile?.handle}`\n          : \"Please Sign-in\"}\n      </Heading>\n\n      {!state.sdk.authenticated && state.isConnected && !props.requireLogin ? (\n        <button\n          class=\"btn swap-button-enabled swap-button-text p-2 btn-outline-primary\"\n          onClick={signInWithLens}\n        >\n          Sign-in with Lens\n        </button>\n      ) : (\n        \"\"\n      )}\n      <ButtonContainer>\n        <Web3Connect\n          className=\"swap-button-enabled swap-button-text p-2\"\n          connectLabel=\"Connect with wallet\"\n        />\n      </ButtonContainer>\n    </Container>\n    <Widget\n      src={`${DEV_USER}/widget/LensSDK`}\n      props={{\n        onLoad: (sdk) => State.update({ sdk: sdk }),\n        onRefresh: (sdk) => State.update({ sdk: sdk }),\n        loaded: !!state.sdk,\n        testnet: props.testnet ?? false,\n      }}\n    />\n    <div class=\"container border p-3\">\n      <input\n        type=\"text\"\n        onChange={(e) => computeResults(e.target.value)}\n        placeholder=\"Search\"\n      />\n    </div>\n\n    <ContentWrapper>\n      <LeftPanelWrapper>\n        {state.profiles.map((result) => {\n          return (\n            <Widget\n              src={`${DEV_USER}/widget/LensProfileSearchView`}\n              props={{\n                profile: result,\n                selectedProfile: state.selectedProfile,\n                isAuthenticated: state.sdk.authenticated,\n                onSelection: (selection) => {\n                  State.update({\n                    selectedProfile: {\n                      profile: result,\n                      selection,\n                      followers: [],\n                      posts: [],\n                      comments: [],\n                    },\n                  });\n\n                  if (selection === \"followers\") getFollowers(result.profileId);\n                  if (selection === \"posts\") getPosts(result.profileId);\n                  if (selection === \"comments\") getComments(result.profileId);\n                  if (selection === \"follow\")\n                    handleFollow(result.profileId, result.isFollowedByMe);\n                },\n              }}\n            />\n          );\n        })}\n      </LeftPanelWrapper>\n\n      <RightPanelWrapper>\n        {state.selectedProfile?.selection === \"followers\" ? (\n          <Widget\n            src={`${DEV_USER}/widget/LensProfileFollowersView`}\n            props={{\n              followers: state.followers,\n              selectedProfile: state.selectedProfile,\n            }}\n          />\n        ) : state.selectedProfile?.selection === \"posts\" ? (\n          <Widget\n            src={`${DEV_USER}/widget/LensProfilePostsView`}\n            props={{\n              posts: state.posts,\n              selectedProfile: state.selectedProfile,\n            }}\n          />\n        ) : state.selectedProfile?.selection === \"comments\" ? (\n          <Widget\n            src={`${DEV_USER}/widget/LensProfileCommentsView`}\n            props={{\n              comments: state.comments,\n              DEV_USER: DEV_USER,\n              selectedProfile: state.selectedProfile,\n            }}\n          />\n        ) : (\n          <NoContentWrapper>\n            {!state.term ? \"Get started by searching\" : \"Nothing Selected\"}\n          </NoContentWrapper>\n        )}\n      </RightPanelWrapper>\n    </ContentWrapper>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/leinss.near/widget/LensProfileSearch", "fact_widget_deployments_id": "06637fbf0cae180743ab9378156fbe3f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}