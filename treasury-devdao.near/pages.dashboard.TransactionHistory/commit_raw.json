{"tx_hash": "5JibRpySf6BrrVjNPTPc9e3Za51PB3bNniJ7N8q1YEoo", "action_id_social": "4Ew473rM7L5pSYWN8gdZxHg33JFPKhwcuXwy1zgwiF1C-0-widget", "block_id": 123861999, "block_timestamp": "2024-07-20T19:50:21.103Z", "signer_id": "treasury-devdao.near", "widget_name": "pages.dashboard.TransactionHistory", "source_code": "const { readableDate } = VM.require(\"devhub.near/widget/core.lib.common\") || {\n  readableDate: () => {},\n};\nconst { nearPrice } = props;\nconst [transactionWithBalances, setTransactionWithBalance] = useState(null);\nconst [page, setPage] = useState(1);\nconst [showMoreLoading, setShowMoreLoading] = useState(false);\nconst [hideViewMore, setHideViewMore] = useState(false);\nconst totalTxnsPerPage = 15;\nconst code = `\n<!doctype html>\n<html>\n<body>\n<script>\nlet archiveNodeUrl = 'https://1rpc.io/near';\nconst totalTxnsPerPage = ${totalTxnsPerPage};\nconst treasuryAccount = \"treasury-devdao.near\";\n async function getAccountChanges(block_id, account_ids) {\n  return (await fetch(archiveNodeUrl, {\n      method: 'POST',\n      headers: {\n          'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n          \"jsonrpc\": \"2.0\",\n          \"id\": \"dontcare\",\n          \"method\": \"EXPERIMENTAL_changes\",\n          \"params\": {\n              \"changes_type\": \"account_changes\",\n              \"account_ids\": account_ids,\n              \"block_id\": block_id === 'final' ? undefined : block_id,\n              \"finality\": block_id === 'final' ? block_id : undefined\n          }\n      }\n      )\n  }).then(r => r.json())).result;\n}\n async function viewAccount(block_id, account_id) {\n  return (await fetch(archiveNodeUrl, {\n      method: 'POST',\n      headers: {\n          'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n          \"jsonrpc\": \"2.0\",\n          \"id\": \"dontcare\",\n          \"method\": \"query\",\n          \"params\": {\n              \"request_type\": \"view_account\",\n              \"account_id\": account_id,\n              \"block_id\": block_id === 'final' ? undefined : block_id,\n              \"finality\": block_id === 'final' ? block_id : undefined\n          }\n      }\n      )\n  }).then(r => r.json())).result;\n}\n async function getNearblocksAccountHistory(account_id) {\n  const url = \"https://api.nearblocks.io/v1/account/\" + account_id + \"/txns?page=\" + ${page} + \"&per_page=\" + totalTxnsPerPage + \"&order=desc\";\n      try {\n          const result = (await fetch(url, {\n              mode: 'cors'\n          }).then(r => r.json())).txns.map(tx => (\n              {\n                  \"block_hash\": tx.included_in_block_hash,\n                  \"block_timestamp\": tx.block_timestamp,\n                  \"hash\": tx.transaction_hash,\n                  \"signer_id\": tx.predecessor_account_id,\n                  \"receiver_id\": tx.receiver_account_id,\n                  \"action_kind\": tx.actions? tx.actions[0].action : null,\n                  \"args\": {\n                      \"method_name\": tx.actions? tx.actions[0].method : null\n                  }\n              }\n          ));\n          return result;\n      } catch (e) {\n          console.error('error', e, 'retry in 30 seconds');\n          await new Promise(resolve => setTimeout(() => resolve(), 30_000));\n  }\n}\nasync function retry(func, max_retries = 10, pause_millis = 30000) {\n  let err;\n  for (let n = 0;n<max_retries;n++) {\n      try {\n          return await func();\n      } catch(e) {\n          err = e;\n          console.error('error', e, 'retrying in ', pause_millis, 'milliseconds');\n          await new Promise(r => setTimeout(r, pause_millis));\n      }\n  }\n  console.error('max retries reached');\n  throw (err);\n}\nasync function getTransactionsToDate(account, offset_timestamp, transactions = []) {\n  let accountHistory = await getNearblocksAccountHistory(account);\n  let insertIndex = 0;\n  let transactionsFetched = 0;\n  while (transactionsFetched < totalTxnsPerPage) {\n      for (let n = 0; n < accountHistory.length; n++) {\n          const historyLine = accountHistory[n];\n              const existingTransaction = transactions.find(t => t.hash == historyLine.hash);\n              if (!existingTransaction) {\n                  historyLine.balance = await retry(() => getAccountBalanceAfterTransaction(account, historyLine.hash));\n                  transactions.splice(insertIndex++, 0, historyLine);\n                  offset_timestamp = BigInt(historyLine.block_timestamp) + 1n;\n              }\n          }\n          transactionsFetched++;\n  }\n  return {txnsWithBalance : transactions, accountHistoryLength: accountHistory?.length};\n}\n async function getTransactionStatus(txhash, account_id) {\n  return (await fetch(archiveNodeUrl, {\n      method: 'POST',\n      headers: {\n          'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n          \"jsonrpc\": \"2.0\",\n          \"id\": \"dontcare\",\n          \"method\": \"tx\",\n          \"params\": [txhash, account_id]\n      }\n      )\n  }).then(r => r.json())).result;\n}\n async function getAccountBalanceAfterTransaction(account_id, txhash) {\n  const executionBlockIds = (await getTransactionStatus(txhash, account_id)).receipts_outcome.map(outcome => outcome.block_hash);\n  const executionBlocksAccountStatus = await Promise.all(executionBlockIds.map(block_hash => viewAccount(block_hash, account_id)));\n  executionBlocksAccountStatus.sort((a, b) => b.block_height - a.block_height);\n  return executionBlocksAccountStatus[0].amount;\n}\nwindow.onload = async () => {\n  const response = await getTransactionsToDate(treasuryAccount);\n  window.parent.postMessage({ handler: \"getTransactionsToDate\", response }, \"*\");\n};\n</script>\n</body>\n</html>\n`;\nconst loading = (\n  <Widget src={\"devhub.near/widget/devhub.components.molecule.Spinner\"} />\n);\nfunction groupByDate(items) {\n  const groupedItems = transactionWithBalances\n    ? [...transactionWithBalances]\n    : [];\n  items.forEach((item) => {\n    const date = new Date(item.block_timestamp / 1000000);\n    const dateKey = date.toISOString().split(\"T\")[0]; // Extract the date part (YYYY-MM-DD)\n    // Check if data exists for this date\n    const existingDataForDate = groupedItems.find(\n      (entry) => entry.date === dateKey\n    );\n    if (existingDataForDate) {\n      // Push the item to txns array if existing data found\n      existingDataForDate.txns.push(item);\n    } else {\n      // Create a new entry for this date if no existing data found\n      groupedItems.push({\n        date: dateKey,\n        txns: [item],\n      });\n    }\n  });\n  return groupedItems;\n}\nconst iframe = (\n  <iframe\n    style={{\n      display: \"none\",\n    }}\n    srcDoc={code}\n    message={{}}\n    onMessage={(e) => {\n      switch (e.handler) {\n        case \"getTransactionsToDate\":\n          if (e.response.accountHistoryLength < totalTxnsPerPage) {\n            setHideViewMore(true);\n          }\n          setTransactionWithBalance(groupByDate(e.response.txnsWithBalance));\n          setShowMoreLoading(false);\n          break;\n      }\n    }}\n  />\n);\nfunction convertBalanceToReadableFormat(amount) {\n  return Big(amount ?? \"0\")\n    .div(Big(10).pow(24))\n    .toFixed();\n}\nfunction formatRelativeDate(date) {\n  const today = new Date();\n  const targetDate = new Date(date);\n  const todayDateOnly = new Date(\n    today.getFullYear(),\n    today.getMonth(),\n    today.getDate()\n  );\n  const targetDateOnly = new Date(\n    targetDate.getFullYear(),\n    targetDate.getMonth(),\n    targetDate.getDate()\n  );\n  const diffTime = todayDateOnly - targetDateOnly;\n  const diffDays = diffTime / (1000 * 60 * 60 * 24);\n  if (diffDays === 0) {\n    return \"Today\";\n  } else if (diffDays === 1) {\n    return \"Yesterday\";\n  } else {\n    return targetDate.toISOString().split(\"T\")[0];\n  }\n}\nfunction getImage(actionKind) {\n  switch (actionKind) {\n    case \"TRANSFER\":\n      return \"https://ipfs.near.social/ipfs/bafkreiazt7rdkgmz2rpvloo3gjoahgxe6dtgicrgzujarf3rbmwuyk2iby\";\n    default:\n      return \"https://ipfs.near.social/ipfs/bafkreigty6dicbjdlbm6ezepuzl63tkdqebyf2rclzbwxfnd2yvkqmllda\";\n  }\n}\nconst loader = (\n  <div className=\"d-flex flex-column justify-content-center align-items-center w-100 h-100\">\n    {loading}\n    <div>This might take a while....</div>\n  </div>\n);\nfunction getPrice(tokensNumber) {\n  return Big(tokensNumber)\n    .mul(Big(nearPrice ?? \"1\"))\n    .toFixed(4);\n}\nreturn (\n  <div className=\"card card-body flex-1\">\n    <div className=\"h5\">Transaction History</div>\n    {iframe}\n    <div className=\"\">\n      {transactionWithBalances === null ? (\n        loader\n      ) : (\n        <div className=\"d-flex flex-column gap-2\">\n          {Array.isArray(transactionWithBalances) &&\n            transactionWithBalances.map(({ date, txns }, groupIndex) => {\n              // Check if it's the last group and only has single txn\n              if (\n                !hideViewMore &&\n                groupIndex === transactionWithBalances.length - 1 &&\n                txns.length === 1\n              ) {\n                return null;\n              }\n              return (\n                <div className=\"d-flex flex-column gap-3\" key={date}>\n                  <div className={\"text-md \" + (groupIndex === 0 && \" mt-3\")}>\n                    {formatRelativeDate(date)}\n                  </div>\n                  <div className=\"d-flex flex-column gap-2\">\n                    {txns.map((txn, i) => {\n                      const balanceToken = convertBalanceToReadableFormat(\n                        txn.balance\n                      );\n                      const balanceAmount = getPrice(balanceToken);\n                      let balanceDiff = balanceToken;\n                      if (i < txns.length - 1) {\n                        const prevBalance = txns[i + 1].balance;\n                        balanceDiff = convertBalanceToReadableFormat(\n                          txn.balance - prevBalance\n                        );\n                      } else if (\n                        groupIndex <\n                        transactionWithBalances.length - 1\n                      ) {\n                        const nextGroup =\n                          transactionWithBalances[groupIndex + 1];\n                        const nextBalance = nextGroup.txns[0].balance;\n                        balanceDiff = convertBalanceToReadableFormat(\n                          txn.balance - nextBalance\n                        );\n                      }\n                      balanceDiff = getPrice(balanceDiff);\n                      // Check if it's the last transaction and there's no next group\n                      if (\n                        !hideViewMore &&\n                        i === txns.length - 1 &&\n                        groupIndex === transactionWithBalances.length - 1\n                      ) {\n                        return null;\n                      }\n                      return (\n                        <div\n                          className=\"d-flex gap-2 justify-content-between align-items-center\"\n                          key={txn.hash}\n                        >\n                          <div className=\"d-flex gap-2 align-items-center\">\n                            <img src={getImage(txn.action_kind)} height=\"50\" />\n                            <div className=\"text-sm text-muted\">\n                              <div className=\"fw-bold text-md mb-0\">\n                                {txn.action_kind}\n                              </div>\n                              <div>\n                                with {(txn.receiver_id ?? \"\").substring(0, 30)}\n                              </div>\n                              <div>\n                                {readableDate(txn.block_timestamp / 1000000)}\n                              </div>\n                              <div className=\"text-light-grey\">\n                                {(txn.block_hash ?? \"\").substring(0, 20)}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-align-end\">\n                            <div className=\"fw-bold\">\n                              {balanceDiff > 0 ? \"+\" : \"\"}\n                              {balanceDiff} USD\n                            </div>\n                            <div className=\"text-light-grey text-md\">\n                              Total Balance : ${balanceAmount}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          <div>\n            {showMoreLoading ? (\n              loader\n            ) : (\n              <div>\n                {!hideViewMore && (\n                  <div\n                    onClick={() => {\n                      setPage(page + 1);\n                      setShowMoreLoading(true);\n                    }}\n                    className=\"fw-bold text-md pointer\"\n                  >\n                    View More\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/treasury-devdao.near/widget/pages.dashboard.TransactionHistory", "fact_widget_deployments_id": "07d3857af09fa75cc84508ec86236fea", "inserted_timestamp": "2024-07-20T20:55:41.693Z", "modified_timestamp": "2024-07-20T20:55:41.693Z", "__row_index": 3}