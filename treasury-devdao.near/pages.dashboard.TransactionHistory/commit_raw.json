{"tx_hash": "38ww8SFrAj3zE1HLbDi6rLWeE9eNnb4PDSr8SEdUerS2", "action_id_social": "C3ViGBSb1QmPbcbbrFLdihcHyQG2i8JnXsXmrAJyCngQ-0-widget", "block_id": 126317477, "block_timestamp": "2024-08-22T13:05:59.393Z", "signer_id": "treasury-devdao.near", "widget_name": "pages.dashboard.TransactionHistory", "source_code": "const { readableDate } = VM.require(\"devhub.near/widget/core.lib.common\") || {\n  readableDate: () => {},\n};\nconst [transactionWithBalances, setTransactionWithBalance] = useState(null);\nconst [page, setPage] = useState(1);\n// we have two cursors, one to update the iframe on \"View More\" and other one to store the value of cursor from API response\nconst [nextCursor, setCursor] = useState(null);\nconst [staleCursor, setStaleCursor] = useState(null);\nconst [showMoreLoading, setShowMoreLoading] = useState(false);\nconst [hideViewMore, setHideViewMore] = useState(false);\nconst totalTxnsPerPage = 15;\nconst treasuryAccount = \"testing-astradao.sputnik-dao.near\";\nconst code = `\n<!doctype html>\n<html>\n  <body>\n    <script>\n      let archiveNodeUrl = 'https://1rpc.io/near';\n      const totalTxnsPerPage = ${totalTxnsPerPage};\n      const treasuryAccount = \"testing-astradao.sputnik-dao.near\";\n      const nextCursor = \"${nextCursor}\";\n      async function corsFetch(url) {\n        return await fetch(url, {\n          mode: \"cors\",\n        }).then((r) => r.json());\n      }\n      async function getNearTxns() {\n        const url = \"https://api.nearblocks.io/v1/account/\" + treasuryAccount + \"/activities?per_page=\" + totalTxnsPerPage + (nextCursor ? (\"&cursor=\" + nextCursor) : \"\" );\n        const txns = await corsFetch(url);\n        const parsedTxns = await Promise.all(\n          (txns.activities ?? []).map(async (i) => {\n            const txnHash = (\n              await corsFetch(\n                \"https://api.nearblocks.io/v1/search?keyword=\" + i.receipt_id,\n              )\n            ).receipts?.[0]?.originated_from_transaction_hash;\n            const txnDetails = (\n              await corsFetch(\"https://api.nearblocks.io/v1/txns/\" + txnHash)\n            ).txns?.[0];\n            return {\n              ...i,\n              transaction_hash: txnHash,\n              block_timestamp: txnDetails.block_timestamp,\n              actions: txnDetails.actions,\n            };\n          }),\n        );\n        return { parsedTxns, cursor: txns.cursor };\n      }\n      async function getFtTxns() {\n        const txns = await corsFetch(\"https://api.nearblocks.io/v1/account/\" + treasuryAccount + \"/ft-txns?page=\" + ${page} + \"&per_page=\" + totalTxnsPerPage + \"&order=desc\");\n        return txns.txns;\n      }\n      async function getAccountBalanceAfterTransaction(account_id, txhash) {\n        const executionBlockIds = (\n          await getTransactionStatus(txhash, account_id)\n        ).receipts_outcome.map((outcome) => outcome.block_hash);\n        const executionBlocksAccountStatus = await Promise.all(\n          executionBlockIds.map((block_hash) => viewAccount(block_hash, account_id)),\n        );\n        executionBlocksAccountStatus.sort((a, b) => b.block_height - a.block_height);\n        return executionBlocksAccountStatus[0].amount;\n      }\n      window.onload = async () => {\n        const nearTxns = await getNearTxns();\n        const ftTxns = await getFtTxns();\n        const sortedArray = nearTxns.parsedTxns\n          .concat(ftTxns)\n          .sort((a, b) => b.block_timestamp - a.block_timestamp);\n        window.parent.postMessage(\n          {\n            handler: \"getTransactions\",\n            response: sortedArray,\n            cursor: nearTxns.cursor,\n          },\n          \"*\",\n        );\n      };\n    </script>\n  </body>\n</html>\n`;\nconst loading = (\n  <Widget src={\"devhub.near/widget/devhub.components.molecule.Spinner\"} />\n);\nfunction groupByDate(items) {\n  const groupedItems = transactionWithBalances\n    ? [...transactionWithBalances]\n    : [];\n  items.forEach((item) => {\n    const date = new Date(item.block_timestamp / 1000000);\n    const dateKey = date.toISOString().split(\"T\")[0]; // Extract the date part (YYYY-MM-DD)\n    // Check if data exists for this date\n    const existingDataForDate = groupedItems.find(\n      (entry) => entry.date === dateKey\n    );\n    if (existingDataForDate) {\n      // Push the item to txns array if existing data found\n      existingDataForDate.txns.push(item);\n    } else {\n      // Create a new entry for this date if no existing data found\n      groupedItems.push({\n        date: dateKey,\n        txns: [item],\n      });\n    }\n  });\n  return groupedItems;\n}\nconst iframe = (\n  <iframe\n    style={{\n      display: \"none\",\n    }}\n    srcDoc={code}\n    message={{}}\n    onMessage={(e) => {\n      switch (e.handler) {\n        case \"getTransactions\": {\n          if (e.response < totalTxnsPerPage) {\n            setHideViewMore(true);\n          }\n          setStaleCursor(e.cursor);\n          setTransactionWithBalance(groupByDate(e.response));\n          setShowMoreLoading(false);\n          break;\n        }\n      }\n    }}\n  />\n);\nfunction convertBalanceToReadableFormat(amount, decimals) {\n  return Big(amount ?? \"0\")\n    .div(Big(10).pow(decimals ?? 24))\n    .toFixed(6);\n}\nfunction formatRelativeDate(date) {\n  const today = new Date();\n  const targetDate = new Date(date);\n  const todayDateOnly = new Date(\n    today.getFullYear(),\n    today.getMonth(),\n    today.getDate()\n  );\n  const targetDateOnly = new Date(\n    targetDate.getFullYear(),\n    targetDate.getMonth(),\n    targetDate.getDate()\n  );\n  const diffTime = todayDateOnly - targetDateOnly;\n  const diffDays = diffTime / (1000 * 60 * 60 * 24);\n  if (diffDays === 0) {\n    return \"Today\";\n  } else if (diffDays === 1) {\n    return \"Yesterday\";\n  } else {\n    return targetDate.toISOString().split(\"T\")[0];\n  }\n}\nfunction getImage(actionKind) {\n  switch (actionKind) {\n    case \"TRANSFER\":\n      return \"https://ipfs.near.social/ipfs/bafkreiazt7rdkgmz2rpvloo3gjoahgxe6dtgicrgzujarf3rbmwuyk2iby\";\n    default:\n      return \"https://ipfs.near.social/ipfs/bafkreigty6dicbjdlbm6ezepuzl63tkdqebyf2rclzbwxfnd2yvkqmllda\";\n  }\n}\nconst loader = (\n  <div className=\"d-flex flex-column justify-content-center align-items-center w-100 h-100\">\n    {loading}\n  </div>\n);\nfunction getPrice(tokensNumber) {\n  return Big(tokensNumber)\n    .mul(Big(nearPrice ?? \"1\"))\n    .toFixed(4);\n}\nconst Container = styled.div`\n  a {\n    color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1)) !important;\n    &:hover {\n      color: rgba(\n        var(--bs-link-color-rgb),\n        var(--bs-link-opacity, 1)\n      ) !important;\n    }\n  }\n`;\nfunction formatString(str) {\n  return str\n    .split(\"_\")\n    .map((word) => {\n      return (\n        word.charAt(0).toUpperCase() +\n        word.charAt(1).toLowerCase() +\n        word.slice(2).toLowerCase()\n      );\n    })\n    .join(\" \");\n}\nreturn (\n  <Container className=\"card card-body flex-1\">\n    <div className=\"h5\">Transaction History</div>\n    {iframe}\n    <div className=\"\">\n      {transactionWithBalances === null ? (\n        loader\n      ) : (\n        <div className=\"d-flex flex-column gap-2\">\n          {Array.isArray(transactionWithBalances) &&\n            transactionWithBalances.map(({ date, txns }, groupIndex) => {\n              // Check if it's the last group and only has single txn\n              if (\n                !hideViewMore &&\n                groupIndex === transactionWithBalances.length - 1 &&\n                txns.length === 1\n              ) {\n                return null;\n              }\n              return (\n                <div className=\"d-flex flex-column gap-3\" key={date}>\n                  <div className={\"text-md \" + (groupIndex === 0 && \" mt-3\")}>\n                    {formatRelativeDate(date)}\n                  </div>\n                  <div className=\"d-flex flex-column gap-2\">\n                    {txns.map((txn, i) => {\n                      let balanceDiff = null;\n                      let token = \"NEAR\";\n                      let icon =\n                        \"https://ipfs.near.social/ipfs/bafkreifnyxk6cssapw7j5vc6zuzwl7vt6o5ddspoo5lcmbvtdrcmfozqyu\";\n                      if (txn.delta_amount) {\n                        const decimals = txn.ft.decimals;\n                        token = txn.ft.symbol;\n                        icon = txn.ft.icon;\n                        balanceDiff = convertBalanceToReadableFormat(\n                          txn.delta_amount,\n                          decimals\n                        );\n                      } else {\n                        if (i < txns.length - 1) {\n                          const prevBalance =\n                            txns[i + 1].absolute_nonstaked_amount;\n                          balanceDiff = convertBalanceToReadableFormat(\n                            txn.absolute_nonstaked_amount - prevBalance\n                          );\n                        } else if (\n                          groupIndex <\n                          transactionWithBalances.length - 1\n                        ) {\n                          const nextGroup =\n                            transactionWithBalances[groupIndex + 1];\n                          const nextBalance =\n                            nextGroup.txns[0].absolute_nonstaked_amount;\n                          balanceDiff = convertBalanceToReadableFormat(\n                            txn.absolute_nonstaked_amount - nextBalance\n                          );\n                        }\n                      }\n                      // Check if it's the last transaction and there's no next group\n                      if (\n                        !hideViewMore &&\n                        i === txns.length - 1 &&\n                        groupIndex === transactionWithBalances.length - 1\n                      ) {\n                        return null;\n                      }\n                      return (\n                        <div\n                          className=\"d-flex gap-2 justify-content-between align-items-center\"\n                          key={txn.transaction_hash}\n                        >\n                          <div className=\"d-flex gap-2 align-items-center\">\n                            <img src={getImage(txn.cause)} height=\"50\" />\n                            <div className=\"text-sm text-muted\">\n                              <div className=\"fw-bold text-md mb-0\">\n                                {formatString(\n                                  txn.actions?.[0]?.method ?? txn.cause\n                                )}\n                              </div>\n                              <div>\n                                with{\" \"}\n                                {(txn.involved_account_id ?? \"\").substring(\n                                  0,\n                                  30\n                                )}\n                              </div>\n                              <div>\n                                {readableDate(txn.block_timestamp / 1000000)}\n                              </div>\n                              <div className=\"text-light-grey\">\n                                <Link\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  to={`https://nearblocks.io/txns/${txn.transaction_hash}`}\n                                >\n                                  {(txn.transaction_hash ?? \"\").substring(\n                                    0,\n                                    20\n                                  )}\n                                </Link>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-align-end\">\n                            <div className=\"fw-bold d-flex gap-1 align-items-center justify-content-end\">\n                              {balanceDiff > 0 ? \"+\" : \"\"}\n                              {balanceDiff}{\" \"}\n                              <img src={icon} height={20} width={20} />\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          <div>\n            {showMoreLoading ? (\n              loader\n            ) : (\n              <div>\n                {!hideViewMore && (\n                  <div\n                    onClick={() => {\n                      setCursor(staleCursor);\n                      setPage(page + 1);\n                      setShowMoreLoading(true);\n                    }}\n                    className=\"fw-bold text-md pointer\"\n                  >\n                    View More\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/treasury-devdao.near/widget/pages.dashboard.TransactionHistory", "fact_widget_deployments_id": "acbe72c5f4e885fb2470408f3b059383", "inserted_timestamp": "2024-08-22T14:54:25.425Z", "modified_timestamp": "2024-08-22T14:54:25.425Z", "__row_index": 5}