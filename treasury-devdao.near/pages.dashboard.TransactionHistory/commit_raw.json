{"tx_hash": "3SFey21QZKaYNAiz5vmUuH94qdg4ap88tHbZcMtMSucG", "action_id_social": "53qC91oEmdF5N7V9Ve6U51KkGc9Q3jSJBARuChM7KtpA-0-widget", "block_id": 127293395, "block_timestamp": "2024-09-04T18:00:58.165Z", "signer_id": "treasury-devdao.near", "widget_name": "pages.dashboard.TransactionHistory", "source_code": "const { readableDate } = VM.require(\"devhub.near/widget/core.lib.common\") || {\n  readableDate: () => {},\n};\nconst { isBosGateway } = VM.require(\"treasury-devdao.near/widget/lib.common\");\nif (!isBosGateway) {\n  return;\n}\nconst [transactionWithBalances, setTransactionWithBalance] = useState(null);\nconst [page, setPage] = useState(1);\nconst [showMoreLoading, setShowMoreLoading] = useState(false);\nconst [hideViewMore, setHideViewMore] = useState(false);\nconst totalTxnsPerPage = 15;\nconst treasuryAccount = \"testing-astradao.sputnik-dao.near\";\nconst loading = (\n  <Widget src={\"devhub.near/widget/devhub.components.molecule.Spinner\"} />\n);\nfunction groupByDate(items) {\n  const groupedItems = transactionWithBalances\n    ? [...transactionWithBalances]\n    : [];\n  items.forEach((item) => {\n    const date = new Date(item.timestamp / 1000000);\n    const dateKey = date.toISOString().split(\"T\")[0]; // Extract the date part (YYYY-MM-DD)\n    // Check if data exists for this date\n    const existingDataForDate = groupedItems.find(\n      (entry) => entry.date === dateKey\n    );\n    if (existingDataForDate) {\n      // Push the item to txns array if existing data found\n      existingDataForDate.txns.push(item);\n    } else {\n      // Create a new entry for this date if no existing data found\n      groupedItems.push({\n        date: dateKey,\n        txns: [item],\n      });\n    }\n  });\n  return groupedItems;\n}\n// use BOS open API for gateway and paid for web4\nconst pikespeakKey = isBosGateway()\n  ? \"36f2b87a-7ee6-40d8-80b9-5e68e587a5b5\"\n  : props.pikespeakKey;\nif (!pikespeakKey) {\n  return <></>;\n}\nuseEffect(() => {\n  if (!showMoreLoading) {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": pikespeakKey,\n      },\n    };\n    const promises = [];\n    setShowMoreLoading(true);\n    promises.push(\n      asyncFetch(\n        `https://api.pikespeak.ai/account/near-transfer/${treasuryAccount}?limit=${totalTxnsPerPage}&offset=${\n          totalTxnsPerPage * (page - 1)\n        }`,\n        options\n      )\n    );\n    promises.push(\n      asyncFetch(\n        `https://api.pikespeak.ai/account/ft-transfer/${treasuryAccount}?limit=${totalTxnsPerPage}&offset=${\n          totalTxnsPerPage * (page - 1)\n        }`,\n        options\n      )\n    );\n    Promise.all(promises).then((i) => {\n      const nearResp = i[0]?.body;\n      const ftResp = i[1]?.body;\n      if (Array.isArray(nearResp) && Array.isArray(ftResp)) {\n        if (\n          nearResp.length < totalTxnsPerPage &&\n          ftResp.length < totalTxnsPerPage\n        ) {\n          setHideViewMore(true);\n        }\n        setTransactionWithBalance(groupByDate(nearResp.concat(ftResp)));\n        setShowMoreLoading(false);\n      }\n    });\n  }\n}, [page]);\nfunction convertBalanceToReadableFormat(amount) {\n  return Big(amount ?? \"0\").toFixed(6);\n}\nfunction formatRelativeDate(date) {\n  const today = new Date();\n  const targetDate = new Date(date);\n  const todayDateOnly = new Date(\n    today.getFullYear(),\n    today.getMonth(),\n    today.getDate()\n  );\n  const targetDateOnly = new Date(\n    targetDate.getFullYear(),\n    targetDate.getMonth(),\n    targetDate.getDate()\n  );\n  const diffTime = todayDateOnly - targetDateOnly;\n  const diffDays = diffTime / (1000 * 60 * 60 * 24);\n  if (diffDays === 0) {\n    return \"Today\";\n  } else if (diffDays === 1) {\n    return \"Yesterday\";\n  } else {\n    return targetDate.toISOString().split(\"T\")[0];\n  }\n}\nfunction getImage(actionKind) {\n  switch (actionKind) {\n    case true:\n      return \"https://ipfs.near.social/ipfs/bafkreiazt7rdkgmz2rpvloo3gjoahgxe6dtgicrgzujarf3rbmwuyk2iby\";\n    default:\n      return \"https://ipfs.near.social/ipfs/bafkreigty6dicbjdlbm6ezepuzl63tkdqebyf2rclzbwxfnd2yvkqmllda\";\n  }\n}\nconst loader = (\n  <div className=\"d-flex flex-column justify-content-center align-items-center w-100 h-100\">\n    {loading}\n  </div>\n);\nconst Container = styled.div`\n  a {\n    color: rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1)) !important;\n    &:hover {\n      color: rgba(\n        var(--bs-link-color-rgb),\n        var(--bs-link-opacity, 1)\n      ) !important;\n    }\n  }\n`;\nfunction formatAccount(text) {\n  return text.length > 30 ? text.substring(0, 30) + \"...\" : text;\n}\nreturn (\n  <Container className=\"card card-body flex-1\">\n    <div className=\"h5\">Transaction History</div>\n    <div className=\"\">\n      {transactionWithBalances === null ? (\n        loader\n      ) : (\n        <div className=\"d-flex flex-column gap-2\">\n          {Array.isArray(transactionWithBalances) &&\n            transactionWithBalances.map(({ date, txns }, groupIndex) => {\n              return (\n                <div className=\"d-flex flex-column gap-3\" key={date}>\n                  <div className={\"text-md \" + (groupIndex === 0 && \" mt-3\")}>\n                    {formatRelativeDate(date)}\n                  </div>\n                  <div className=\"d-flex flex-column gap-2\">\n                    {txns.map((txn, i) => {\n                      let balanceDiff = \"\";\n                      let token = \"NEAR\";\n                      let icon =\n                        \"https://ipfs.near.social/ipfs/bafkreifnyxk6cssapw7j5vc6zuzwl7vt6o5ddspoo5lcmbvtdrcmfozqyu\";\n                      const isDeposit = txn.deposit;\n                      const isReceived = txn.receiver === treasuryAccount;\n                      if (txn.contract) {\n                        const contractMetadata = Near.view(\n                          txn.contract,\n                          \"ft_metadata\"\n                        );\n                        token = contractMetadata?.symbol;\n                        icon = contractMetadata?.icon;\n                        balanceDiff = convertBalanceToReadableFormat(\n                          txn.amount\n                        );\n                      } else {\n                        balanceDiff = convertBalanceToReadableFormat(\n                          txn.amount\n                        );\n                      }\n                      return (\n                        <div\n                          className=\"d-flex gap-2 justify-content-between align-items-center\"\n                          key={txn.transaction_id}\n                        >\n                          <div className=\"d-flex gap-2 align-items-center\">\n                            <img src={getImage(isDeposit)} height=\"50\" />\n                            <div className=\"text-sm text-muted\">\n                              <div className=\"fw-bold text-md mb-0\">\n                                {isDeposit ? \"Deposit\" : \"Transfer\"}\n                              </div>\n                              <div>\n                                {isReceived ? (\n                                  <span>\n                                    received from {formatAccount(txn.sender)}\n                                  </span>\n                                ) : (\n                                  <span>\n                                    transferred to {formatAccount(txn.receiver)}\n                                  </span>\n                                )}\n                              </div>\n                              <div>{readableDate(txn.timestamp / 1000000)}</div>\n                              <div className=\"text-light-grey\">\n                                <Link\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  to={`https://nearblocks.io/txns/${txn.transaction_id}`}\n                                >\n                                  {(txn.transaction_id ?? \"\").substring(0, 20)}\n                                  ...\n                                </Link>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-align-end\">\n                            <div className=\"fw-bold d-flex gap-1 align-items-center justify-content-end\">\n                              {isReceived ? \"+\" : \"-\"}\n                              {balanceDiff}{\" \"}\n                              <img src={icon} height={20} width={20} />\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          <div>\n            {showMoreLoading ? (\n              loader\n            ) : (\n              <div>\n                {!hideViewMore && (\n                  <div\n                    onClick={() => {\n                      setPage(page + 1);\n                    }}\n                    className=\"fw-bold text-md pointer\"\n                  >\n                    View More\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/treasury-devdao.near/widget/pages.dashboard.TransactionHistory", "fact_widget_deployments_id": "db66d82c86fecc2a02298f54b830c78d", "inserted_timestamp": "2024-09-04T19:57:16.388Z", "modified_timestamp": "2024-09-04T19:57:16.388Z", "__row_index": 4}