{"tx_hash": "49wfvSRFfhroWo1CmRJq14LrEjmEJ9WJvHgeumXSowh4", "action_id_social": "7WSk95QK2EuzQB7KC9wUG3v1uBqBYEPMk78DuB4Z8jQ-0-widget", "block_id": 117761216, "block_timestamp": "2024-04-27T20:43:11.182Z", "signer_id": "hyperfiles.near", "widget_name": "type.select", "source_code": "const initialSchemaSrc = props.schemaSrc || \"hyperfiles.near\";\nconst [newSchemaSrc, setNewSchemaSrc] = useState(initialSchemaSrc);\nconst [schemaSrc, setSchemaSrc] = useState(initialSchemaSrc);\nconst [availableSchemas, setAvailableSchemas] = useState([]);\nconst [isLoading, setIsLoading] = useState(true);\nconst [selectedSchema, setSelectedSchema] = useState(\n  props.selectedSchema || \"attestations.near/type/isTrue\"\n);\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst Button = styled.button`\n  `;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Select = styled.select`\n  `;\nconst Label = styled.label`\n`;\nconst Input = styled.input`\n  `;\n\nuseEffect(() => {\n  const fetchSchemasList = async () => {\n    setIsLoading(true);\n    // Ensure dynamic accountId is correctly included in the query\n    const schemas = Social.get(`${schemaSrc}/type/**`, \"final\");\n    if (schemas) {\n      const schemasList = Object.keys(schemas).map(\n        (key) => `${schemaSrc}/type/${key}`\n      );\n      setAvailableSchemas(schemasList);\n    } else {\n      setAvailableSchemas([]);\n    }\n    setIsLoading(false);\n  };\n\n  fetchSchemasList();\n}, [schemaSrc]); // Depend on schemaSrc to refetch when it changes\n\nif (!schemas) {\n  console.error(`Failed to fetch schemas for ${schemaSrc}`);\n  // Handle the error appropriately in the UI\n}\n\nuseEffect(() => {\n  // Sync state with prop when it changes\n  setSelectedSchema(props.selectedSchema);\n}, [props.selectedSchema]); // Re-run effect if props.selectedSchema changes\n\nconst handleSchemaChange = (e) => {\n  setSelectedSchema(e.target.value);\n  console.log(`New schema selected: ${newSchema}`); // Log the new schema selection\n\n  if (props.onSelectedSchemaChange) {\n    props.onSelectedSchemaChange(e.target.value);\n  }\n};\n\nconst handleSchemaOwnerChange = (e) => {\n  setNewSchemaSrc(e.target.value);\n};\n\nconst handleApplySchemaSrc = () => {\n  setSchemaSrc(newSchemaSrc); // Apply the new schema source\n  console.log(`Applying new Schema Owner: ${newSchemaSrc}`); // Log the action\n};\n\nreturn (\n  <FormContainer>\n    <Label>Schema Owner:</Label>\n    <Row>\n      <Input\n        type=\"text\"\n        onChange={handleSchemaOwnerChange} // Corrected to use the handleSchemaOwnerChange function\n        value={newSchemaSrc}\n        placeholder=\"accountId\"\n      />\n      <Button onClick={handleApplySchemaSrc}>apply</Button>\n    </Row>\n    <Label>Schema:</Label>\n    <Row>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <Select value={selectedSchema} onChange={handleSchemaChange}>\n          <option value=\"\">Choose a schema</option>\n          {availableSchemas.map((schema) => (\n            <option key={schema} value={schema}>\n              {schema}\n            </option>\n          ))}\n        </Select>\n      )}\n    </Row>\n  </FormContainer>\n);\n", "metadata": {"fork_of": "flowscience.near/widget/SchemaSelector@112941151"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/type.select", "fact_widget_deployments_id": "45b279f34b8809cc12c240f4fa62b982", "inserted_timestamp": "2024-04-28T02:45:10.322Z", "modified_timestamp": "2024-04-28T02:45:10.322Z", "__row_index": 1}