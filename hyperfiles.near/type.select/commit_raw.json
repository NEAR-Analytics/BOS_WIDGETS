{"tx_hash": "DfqfqW9qXdTavzChBamskZdB6eLkXjpmg9PNfFoB88FW", "action_id_social": "ChkZbE1WM7PBkW9YR5NjwWyQTkWXNThd6MTdyRZW75zu-0-widget", "block_id": 117761450, "block_timestamp": "2024-04-27T20:47:29.509Z", "signer_id": "hyperfiles.near", "widget_name": "type.select", "source_code": "const initialTypeSrc = props.typeSrc || \"hyperfiles.near\";\nconst [newTypeSrc, setNewTypeSrc] = useState(initialTypeSrc);\nconst [typeSrc, setTypeSrc] = useState(initialTypeSrc);\nconst [availableTypes, setAvailableTypes] = useState([]);\nconst [isLoading, setIsLoading] = useState(true);\nconst [selectedType, setSelectedType] = useState(\n  props.selectedType || \"attestations.near/type/isTrue\"\n);\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst Button = styled.button`\n  `;\nconst FormContainer = styled.div`\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nconst Select = styled.select`\n  `;\nconst Label = styled.label`\n`;\nconst Input = styled.input`\n  `;\n\nuseEffect(() => {\n  const fetchTypesList = async () => {\n    setIsLoading(true);\n    // Ensure dynamic accountId is correctly included in the query\n    const types = Social.get(`${typeSrc}/type/**`, \"final\");\n    if (types) {\n      const typesList = Object.keys(types).map(\n        (key) => `${typeSrc}/type/${key}`\n      );\n      setAvailableTypes(typesList);\n    } else {\n      setAvailableTypes([]);\n    }\n    setIsLoading(false);\n  };\n\n  fetchTypesList();\n}, [typeSrc]); // Depend on typeSrc to refetch when it changes\n\nif (!types) {\n  console.error(`Failed to fetch types for ${typeSrc}`);\n  // Handle the error appropriately in the UI\n}\n\nuseEffect(() => {\n  // Sync state with prop when it changes\n  setSelectedType(props.selectedType);\n}, [props.selectedType]); // Re-run effect if props.selectedType changes\n\nconst handleTypeChange = (e) => {\n  setSelectedType(e.target.value);\n  console.log(`New type selected: ${newType}`); // Log the new type selection\n\n  if (props.onSelectedTypeChange) {\n    props.onSelectedTypeChange(e.target.value);\n  }\n};\n\nconst handleTypeOwnerChange = (e) => {\n  setNewTypeSrc(e.target.value);\n};\n\nconst handleApplyTypeSrc = () => {\n  setTypeSrc(newTypeSrc); // Apply the new type source\n  console.log(`Applying new Type Owner: ${newTypeSrc}`); // Log the action\n};\n\nreturn (\n  <FormContainer>\n    <Label>Type Owner:</Label>\n    <Row>\n      <Input\n        type=\"text\"\n        onChange={handleTypeOwnerChange} // Corrected to use the handleTypeOwnerChange function\n        value={newTypeSrc}\n        placeholder=\"accountId\"\n      />\n      <Button onClick={handleApplyTypeSrc}>apply</Button>\n    </Row>\n    <Label>Type:</Label>\n    <Row>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <Select value={selectedType} onChange={handleTypeChange}>\n          <option value=\"\">Choose a type</option>\n          {availableTypes.map((type) => (\n            <option key={type} value={type}>\n              {type}\n            </option>\n          ))}\n        </Select>\n      )}\n    </Row>\n  </FormContainer>\n);\n", "metadata": {"fork_of": "hyperfiles.near/widget/type.select@117761216"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/type.select", "fact_widget_deployments_id": "93112931837475bc089192ad331f4fc4", "inserted_timestamp": "2024-04-28T02:45:10.322Z", "modified_timestamp": "2024-04-28T02:45:10.322Z", "__row_index": 0}