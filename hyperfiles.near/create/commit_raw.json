{"tx_hash": "68mKwHg6EZe6p1bzMtE6W1jnCVWMJdskRuyrQmWkk1C6", "action_id_social": "8yCDhzATT61YnCzenYxmmf8mpeTQJikXZe3rMhgaMuab-0-widget", "block_id": 106842809, "block_timestamp": "2023-11-30T02:52:36.086Z", "signer_id": "hyperfiles.near", "widget_name": "create", "source_code": "const Wrapper = styled.div`\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst TabContent = styled.div`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 5px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 8px;\r\n`;\r\n\r\nconst FormGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst adapters = [\r\n  // these can come from the user (or app) settings\r\n  // {\r\n  //   title: \"Local Storage\",\r\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\r\n  //   saveRef: false\r\n  // },\r\n  // {\r\n  //   title: \"SocialDB\",\r\n  //   value: \"everycanvas.near/widget/adapter.social\",\r\n  // },\r\n  {\r\n    title: \"IPFS\",\r\n    value: \"everycanvas.near/widget/adapter.ipfs\",\r\n  },\r\n  // {\r\n  //   title: \"GitHub\",\r\n  //   value: \"hack.near/widget/adapter.github\",\r\n  // },\r\n  // {\r\n  //   title: \"Obsidian\",\r\n  //   value: \"hack.near/widget/adapter.obsidian\",\r\n  // },\r\n  // {\r\n  //   title: \"Tldraw\",\r\n  //   value: \"hack.near/widget/adapter.tldraw\",\r\n  // },\r\n];\r\n\r\nconst defaultAdapter = adapters[0];\r\n\r\nconst { creatorId } = props;\r\n\r\nconst [json, setJson] = useState(props.data ?? \"\");\r\nconst [source, setSource] = useState(props.source ?? \"\");\r\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\r\nconst [reference, setReference] = useState(undefined);\r\nconst [filename, setFilename] = useState(props.filename ?? \"\");\r\nconst [activeTab, setActiveTab] = useState(\"data\");\r\nconst [name, setName] = useState(props.name ?? \"\");\r\nconst [description, setDescription] = useState(props.description ?? \"\");\r\n\r\nfunction generateUID() {\r\n  return (\r\n    Math.random().toString(16).slice(2) +\r\n    Date.now().toString(36) +\r\n    Math.random().toString(16).slice(2)\r\n  );\r\n}\r\n\r\nconst handleCreate = () => {\r\n  const isCreator = context.accountId === creatorId;\r\n\r\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\r\n  const { create } = VM.require(adapter) || (() => {});\r\n  if (create) {\r\n    // store the data somewhere, based on the adapter\r\n    create(json).then((reference) => {\r\n      // now we have a reference to the data\r\n      // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\r\n      const thingId = filename ?? generateUID();\r\n\r\n      const hyperfile = {\r\n        [props.type]: {\r\n          // which we store in the social contract\r\n          [thingId]: {\r\n            \"\": JSON.stringify({\r\n              fileformat: `${props.type}.${source}`,\r\n              source: source,\r\n              adapter: adapter,\r\n              reference: reference,\r\n            }),\r\n            metadata: {\r\n              name: name,\r\n              description: description,\r\n              type: props.type,\r\n            },\r\n          },\r\n        },\r\n      };\r\n\r\n      if (creatorId !== context.accountId) {\r\n        // handle request merge\r\n        hyperfile.index = {\r\n          notify: JSON.stringify({\r\n            key: creatorId,\r\n            value: {\r\n              type: \"request\",\r\n              data: {\r\n                type: \"merge\",\r\n                upstream: `${creatorId}/${props.type}/${props.filename}`,\r\n                origin: `${context.accountId}/${props.type}/${thingId}`,\r\n              },\r\n            },\r\n          }),\r\n        };\r\n        hyperfile[props.type][thingId].metadata = {\r\n          ...hyperfile[props.type][thingId].metadata,\r\n          upstream: `${creatorId}/${props.type}/${props.filename}`,\r\n        };\r\n        // I want to make a request to merge\r\n        // set upstream and downstream\r\n      }\r\n\r\n      // sometimes we're not logged in, so it doesn't do anything!\r\n      Social.set(hyperfile, { force: true });\r\n    });\r\n  }\r\n};\r\n\r\nreturn (\r\n  <Wrapper>\r\n    <h3>{context.accountId === creatorId ? \"create\" : \"request merge\"}</h3>\r\n    <ul className=\"nav nav-tabs\">\r\n      <li className=\"nav-item\">\r\n        <a\r\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"data\")}\r\n        >\r\n          Data\r\n        </a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"metadata\")}\r\n        >\r\n          Metadata\r\n        </a>\r\n      </li>\r\n    </ul>\r\n\r\n    <TabContent>\r\n      {activeTab === \"data\" && (\r\n        <Form>\r\n          <FormGroup>\r\n            <Label>source</Label>\r\n            <Input\r\n              type=\"text\"\r\n              value={source}\r\n              onChange={(e) => onChangeSource(e.target.value)}\r\n              disabled={props.source} // disable if source is passed in\r\n            />\r\n          </FormGroup>\r\n          {/* <Widget\r\n            src=\"bozon.near/widget/CodeDiff\"\r\n            props={{ currentCode: update, prevCode: src, ...props }}\r\n          /> */}\r\n          <textarea\r\n            className=\"form-control mb-3\"\r\n            rows={5}\r\n            value={json}\r\n            onChange={(e) => setJson(e.target.value)}\r\n          />\r\n          <FormGroup>\r\n            <Label>adapter</Label>\r\n            <Select\r\n              value={adapter}\r\n              onChange={(e) => setAdapter(e.target.value)}\r\n            >\r\n              {adapters.map((o) => (\r\n                <option value={o.value}>{o.title}</option>\r\n              ))}\r\n            </Select>\r\n          </FormGroup>\r\n        </Form>\r\n      )}\r\n    </TabContent>\r\n    <TabContent>\r\n      {activeTab === \"metadata\" && (\r\n        <Form>\r\n          <FormGroup>\r\n            <Label>name</Label>\r\n            <Input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>description</Label>\r\n            <textarea\r\n              className=\"form-control mb-3\"\r\n              rows={5}\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n        </Form>\r\n      )}\r\n    </TabContent>\r\n    <FormGroup>\r\n      <button className=\"btn btn-success mb-1\" onClick={handleCreate}>\r\n        Create\r\n      </button>\r\n    </FormGroup>\r\n  </Wrapper>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/create", "fact_widget_deployments_id": "0304032c94f90e0ce44cb014b11a3ebc", "inserted_timestamp": "2023-11-30T04:36:51.561Z", "modified_timestamp": "2023-12-20T02:50:47.065Z", "__row_index": 31}