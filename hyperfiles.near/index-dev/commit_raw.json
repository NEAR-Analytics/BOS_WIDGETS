{"tx_hash": "F1fys52KuZ9iW4ta777YUQsKX4SFQpp4Doi9A3ct3YUx", "action_id_social": "7q4tdDgSY8xiArMr43sBzdT32yxMzzSnJtmL67es2dRB-0-widget", "block_id": 117342445, "block_timestamp": "2024-04-21T23:34:42.735Z", "signer_id": "hyperfiles.near", "widget_name": "index-dev", "source_code": "const TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Button = styled.button``;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"\",\n    value: \"\",\n  },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n    refType: { cid: \"string\" },\n  },\n  // {\n  //   title: \"Custom\",\n  //   value: \"custom\",\n  // },\n  {\n    title: \"GitHub\",\n    value: \"hyperfiles.near/widget/adapter.github\",\n  },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\n//const { GitHubAPIExample } = VM.require(  \"create.near/widget/GitHub.API.Example\");\nconst { MetadataComponent } = VM.require(\n  \"hyperfiles.near/widget/CreateMetadata\"\n);\nconst [rawData, setRawData] = useState(\"\");\nconst [source, setSource] = useState(\"\");\nconst [schema, setSchema] = useState(\"\");\nconst [adapter, setAdapter] = useState(\"\");\nconst [reference, setReference] = useState(undefined);\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\nconst [hyperfile, setHyperfile] = useState(\"\");\nconst [type, setType] = useState(\"\");\nconst [filePath, setFilePath] = useState(null);\nconst [defaultView, setDefaultView] =\n  useState(\"HYPERFILE\") || props.defaultView;\n\nconst handleSelectRepository = (selectedFilePath) => {\n  console.log(\"Selected repository:\", selectedFilePath);\n  // Assuming you need the repository's file path or some specific identifier\n  setFilePath(selectedFilePath); // or any specific attribute you need\n};\n\nconst rawAdapter =\n  (adapter !== \"\" || adapter !== \"custom\") && Social.get(adapter, \"final\");\nconst { create } =\n  ((adapter !== \"\" || adapter !== \"custom\") && VM.require(adapter)) ||\n  (() => {});\n\nconst functionRegex = /function\\s+(\\w+)\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*?)\\n}/g;\n\nfunction parseAdapter(code) {\n  let match;\n  const functions = [];\n\n  while ((match = functionRegex.exec(code)) !== null) {\n    const [_, functionName, params, content] = match;\n    functions.push({ functionName, params, content });\n  }\n\n  return functions.map((func, index) => (\n    <FormGroup key={index}>\n      <Label>{func.functionName}</Label>\n      <textarea\n        className=\"form-control\"\n        style={{ width: \"100%\", height: \"100%\" }}\n        value={func.content.trim()}\n        disabled\n      />\n    </FormGroup>\n  ));\n}\n\nfunction generateUID() {\n  const maxHex = 0xffffffff;\n  const randomNumber = Math.floor(Math.random() * maxHex);\n  return randomNumber.toString(16).padStart(8, \"0\");\n}\n\nconst handleCreate = () => {\n  if (create) {\n    console.log(\"it's something\", rawData);\n    // store the data somewhere, based on the adapter\n    create(rawData).then((reference) => {\n      // now we have a reference to the data\n      const thingId = generateUID();\n\n      const hyperfile = {\n        thing: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              schema: schema,\n            },\n          },\n        },\n      };\n\n      setHyperfile(JSON.stringify(hyperfile, null, 2));\n    });\n  } else {\n    console.log(\"invalid adapter\");\n  }\n};\n\nconsole.log(\"source: \", source);\nconsole.log(\"schema: \", schema);\n//console.log(\"data: \", rawData);\n//console.log(\"adapter: \", adapter);\n\nreturn (\n  <div className=\"container mt-3\">\n    <div className=\"row\">\n      <h1>Hyperfile Creator</h1>\n      <p>\n        View the{\" \"}\n        <a href=\"https://opencann.notion.site/Hyperfiles-52cdfb892aff4d0ebe2178436c5edf6d\">\n          docs\n        </a>{\" \"}\n        to learn how the different data structures work together.\n      </p>\n      <hr />\n    </div>\n    <Row style={{ gap: \"8px\", marginBottom: \"16px\" }}>\n      <h2>Create</h2>{\" \"}\n      <Select\n        value={state.defaultView}\n        onChange={(e) => setDefaultView(e.target.value)}\n      >\n        <option value=\"HYPERFILE\">Data Object</option>\n        <option value=\"ATTESTATION\">Attestation</option>\n        <option value=\"SCHEMA\">Schema</option>\n        <option value=\"TYPE\">Type</option>\n        <option value=\"JOB\">Job</option>\n      </Select>\n    </Row>\n    <div>\n      <Widget src=\"hyperfiles.near/widget/query.search\" props={{}} />\n    </div>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Content\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n    <div className=\"row\">\n      <TabContent>\n        {defaultView === \"HYPERFILE\" && (\n          <div className=\"row\">\n            <TabContent>\n              {activeTab === \"data\" && (\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"p-3 border bg-light\">\n                      <Widget\n                        src=\"hyperfiles.near/widget/hyperfile.create\"\n                        props={{}}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </TabContent>\n            <TabContent>\n              {activeTab === \"metadata\" && (\n                <Form>\n                  <h3>metadata</h3>\n                  <FormGroup>\n                    <Label>name</Label>\n                    <Input\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>description</Label>\n                    <textarea\n                      className=\"form-control mb-3\"\n                      rows={5}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              )}\n            </TabContent>\n          </div>\n        )}\n      </TabContent>\n      <TabContent>\n        {defaultView === \"ATTESTATION\" && (\n          <div className=\"row\">\n            <TabContent>\n              {activeTab === \"data\" && (\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"p-3 border bg-light\">\n                      <Widget\n                        src=\"flowscience.near/widget/attestWithTypes\"\n                        props={{}}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </TabContent>\n            <TabContent>\n              {activeTab === \"metadata\" && (\n                <Form>\n                  <h3>metadata</h3>\n                  <FormGroup>\n                    <Label>name</Label>\n                    <Input\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>description</Label>\n                    <textarea\n                      className=\"form-control mb-3\"\n                      rows={5}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              )}\n            </TabContent>\n          </div>\n        )}\n      </TabContent>\n      <TabContent>\n        {defaultView === \"SCHEMA\" && (\n          <div className=\"row\">\n            <TabContent>\n              {activeTab === \"data\" && (\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"p-3 border bg-light\">\n                      <Widget\n                        src=\"flowscience.near/widget/JSON-Schema.editor\"\n                        props={{}}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </TabContent>\n            <TabContent>\n              {activeTab === \"metadata\" && (\n                <Form>\n                  <h3>metadata</h3>\n                  <FormGroup>\n                    <Label>name</Label>\n                    <Input\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>description</Label>\n                    <textarea\n                      className=\"form-control mb-3\"\n                      rows={5}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              )}\n            </TabContent>\n          </div>\n        )}\n      </TabContent>\n      <TabContent>\n        {defaultView === \"TYPE\" && (\n          <div className=\"row\">\n            <TabContent>\n              {activeTab === \"data\" && (\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"p-3 border bg-light\">\n                      <Widget\n                        src=\"efiz.near/widget/every.type.create\"\n                        props={{}}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </TabContent>\n            <TabContent>\n              {activeTab === \"metadata\" && (\n                <Form>\n                  <h3>metadata</h3>\n                  <FormGroup>\n                    <Label>name</Label>\n                    <Input\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>description</Label>\n                    <textarea\n                      className=\"form-control mb-3\"\n                      rows={5}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              )}\n            </TabContent>\n          </div>\n        )}\n      </TabContent>\n      <TabContent>\n        {defaultView === \"JOB\" && (\n          <div className=\"row\">\n            <TabContent>\n              {activeTab === \"data\" && (\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"p-3 border bg-light\">\n                      <Widget\n                        src=\"jgodwill.near/widget/JSONFormatter\"\n                        props={{}}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </TabContent>\n            <TabContent>\n              {activeTab === \"metadata\" && (\n                <Form>\n                  <h3>metadata</h3>\n                  <FormGroup>\n                    <Label>name</Label>\n                    <Input\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>description</Label>\n                    <textarea\n                      className=\"form-control mb-3\"\n                      rows={5}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              )}\n            </TabContent>\n          </div>\n        )}\n      </TabContent>\n    </div>\n  </div>\n);\n", "metadata": {"fork_of": "hyperfiles.near/widget/index-dev@117341434"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/index-dev", "fact_widget_deployments_id": "696271643b7bc193c4330c544092dca3", "inserted_timestamp": "2024-04-22T01:59:41.992Z", "modified_timestamp": "2024-04-22T01:59:41.992Z", "__row_index": 6}