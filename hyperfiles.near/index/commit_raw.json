{"tx_hash": "AtypdR1vuxva1xT5DSRDBC5GyzjJqsM6ZpAwYKmaYBxV", "action_id_social": "HM4bA67QxeRcBEYJW28v55juFrseX6jPMnw9PGkJq7Rd-0-widget", "block_id": 106842904, "block_timestamp": "2023-11-30T02:54:43.253Z", "signer_id": "hyperfiles.near", "widget_name": "index", "source_code": "const TabContent = styled.div`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 5px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  padding: 8px;\r\n`;\r\n\r\nconst FormGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Button = styled.button``;\r\n\r\nconst adapters = [\r\n  // these can come from the user (or app) settings\r\n  // {\r\n  //   title: \"Local Storage\",\r\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\r\n  //   saveRef: false\r\n  // },\r\n  // {\r\n  //   title: \"SocialDB\",\r\n  //   value: \"everycanvas.near/widget/adapter.social\",\r\n  // },\r\n  {\r\n    title: \"\",\r\n    value: \"\",\r\n  },\r\n  {\r\n    title: \"IPFS\",\r\n    value: \"everycanvas.near/widget/adapter.ipfs\",\r\n    refType: { cid: \"string\" },\r\n  },\r\n  // {\r\n  //   title: \"Custom\",\r\n  //   value: \"custom\",\r\n  // },\r\n  // {\r\n  //   title: \"GitHub\",\r\n  //   value: \"hack.near/widget/adapter.github\",\r\n  // },\r\n  // {\r\n  //   title: \"Obsidian\",\r\n  //   value: \"hack.near/widget/adapter.obsidian\",\r\n  // },\r\n  // {\r\n  //   title: \"Tldraw\",\r\n  //   value: \"hack.near/widget/adapter.tldraw\",\r\n  // },\r\n];\r\n\r\nconst [rawData, setRawData] = useState(\"\");\r\nconst [source, setSource] = useState(props.source ?? \"\");\r\nconst [adapter, setAdapter] = useState(\"\");\r\nconst [reference, setReference] = useState(undefined);\r\nconst [activeTab, setActiveTab] = useState(\"data\");\r\nconst [name, setName] = useState(props.name ?? \"\");\r\nconst [description, setDescription] = useState(props.description ?? \"\");\r\nconst [hyperfile, setHyperfile] = useState(\"\");\r\nconst [type, setType] = useState(\"\");\r\n\r\nconst rawAdapter =\r\n  (adapter !== \"\" || adapter !== \"custom\") && Social.get(adapter, \"final\");\r\nconst { create } =\r\n  ((adapter !== \"\" || adapter !== \"custom\") && VM.require(adapter)) ||\r\n  (() => {});\r\n\r\nconst functionRegex = /function\\s+(\\w+)\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*?)\\n}/g;\r\n\r\nfunction parseAdapter(code) {\r\n  let match;\r\n  const functions = [];\r\n\r\n  while ((match = functionRegex.exec(code)) !== null) {\r\n    const [_, functionName, params, content] = match;\r\n    functions.push({ functionName, params, content });\r\n  }\r\n\r\n  return functions.map((func, index) => (\r\n    <FormGroup key={index}>\r\n      <Label>{func.functionName}</Label>\r\n      <textarea\r\n        className=\"form-control\"\r\n        style={{ width: \"100%\", height: \"100%\" }}\r\n        value={func.content.trim()}\r\n        disabled\r\n      />\r\n    </FormGroup>\r\n  ));\r\n}\r\n\r\nfunction generateUID() {\r\n  const maxHex = 0xffffffff;\r\n  const randomNumber = Math.floor(Math.random() * maxHex);\r\n  return randomNumber.toString(16).padStart(8, \"0\");\r\n}\r\n\r\nconst handleCreate = () => {\r\n  if (create) {\r\n    console.log(\"it's something\", rawData);\r\n    // store the data somewhere, based on the adapter\r\n    create(rawData).then((reference) => {\r\n      // now we have a reference to the data\r\n      const thingId = generateUID();\r\n\r\n      const hyperfile = {\r\n        thing: {\r\n          // which we store in the social contract\r\n          [thingId]: {\r\n            \"\": JSON.stringify({\r\n              source: source,\r\n              adapter: adapter,\r\n              reference: reference,\r\n            }),\r\n            metadata: {\r\n              name: name,\r\n              description: description,\r\n              type: type,\r\n            },\r\n          },\r\n        },\r\n      };\r\n\r\n      setHyperfile(JSON.stringify(hyperfile, null, 2));\r\n    });\r\n  } else {\r\n    console.log(\"invalid adapter\");\r\n  }\r\n};\r\n\r\nreturn (\r\n  <div className=\"container mt-3\">\r\n    <div className=\"row p-3\">\r\n      <h1>hyperfile creator</h1>\r\n    </div>\r\n    <ul className=\"nav nav-tabs\">\r\n      <li className=\"nav-item\">\r\n        <a\r\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"data\")}\r\n        >\r\n          Data\r\n        </a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"metadata\")}\r\n        >\r\n          Metadata\r\n        </a>\r\n      </li>\r\n    </ul>\r\n    <div className=\"row\">\r\n      <TabContent>\r\n        {activeTab === \"data\" && (\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <div className=\"p-3 border bg-light\">\r\n                <Form>\r\n                  <h3>provide the data</h3>\r\n                  <FormGroup>\r\n                    <Label>source</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      value={source}\r\n                      onChange={(e) => setSource(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label>type</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      value={type}\r\n                      onChange={(e) => setType(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Label>raw data</Label>\r\n                    <textarea\r\n                      className=\"form-control\"\r\n                      style={{ width: \"100%\", height: \"400px\" }}\r\n                      value={rawData}\r\n                      onChange={(e) => setRawData(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n            <div className=\"col\">\r\n              <div className=\"p-3 border bg-light\">\r\n                <Form>\r\n                  <h3>how to store it</h3>\r\n                  <FormGroup>\r\n                    <Label>adapter</Label>\r\n                    <Select\r\n                      value={adapter}\r\n                      onChange={(e) => setAdapter(e.target.value)}\r\n                    >\r\n                      {adapters.map((o) => (\r\n                        <option value={o.value}>{o.title}</option>\r\n                      ))}\r\n                    </Select>\r\n                  </FormGroup>\r\n                  {rawAdapter && <>{parseAdapter(rawAdapter)}</>}\r\n                </Form>\r\n              </div>\r\n            </div>\r\n            <div className=\"col\">\r\n              <div className=\"p-3 border bg-light\">\r\n                <Form>\r\n                  <Button\r\n                    onClick={handleCreate}\r\n                    disabled={!adapter || !type || !source || !rawData}\r\n                  >\r\n                    create reference\r\n                  </Button>\r\n                  {hyperfile !== \"\" && (\r\n                    <>\r\n                      <FormGroup>\r\n                        <textarea\r\n                          className=\"form-control\"\r\n                          value={hyperfile}\r\n                          disabled\r\n                          style={{ width: \"100%\", height: \"400px\" }}\r\n                        />\r\n                      </FormGroup>\r\n                      <Button\r\n                        onClick={() =>\r\n                          Social.set(JSON.parse(hyperfile), { force: true })\r\n                        }\r\n                      >\r\n                        save\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </TabContent>\r\n      <TabContent>\r\n        {activeTab === \"metadata\" && (\r\n          <Form>\r\n            <h3>metadata</h3>\r\n            <FormGroup>\r\n              <Label>name</Label>\r\n              <Input\r\n                type=\"text\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>description</Label>\r\n              <textarea\r\n                className=\"form-control mb-3\"\r\n                rows={5}\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n          </Form>\r\n        )}\r\n      </TabContent>\r\n    </div>\r\n  </div>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/index", "fact_widget_deployments_id": "30c6a6503e7468d63c9d37e55ce27139", "inserted_timestamp": "2023-11-30T04:38:01.563Z", "modified_timestamp": "2023-12-20T02:50:47.065Z", "__row_index": 14}