{"tx_hash": "3CSqsSYWSFiL6qCGjgq8DHMpfso9L8EhgAgw6GmNwtFf", "action_id_social": "9DnVNRNB1qs4BiYnbSeuMwDsnZ95ccUFZMJ2za4g1n6T-0-widget", "block_id": 117568027, "block_timestamp": "2024-04-25T04:23:02.686Z", "signer_id": "hyperfiles.near", "widget_name": "hyperfile.create", "source_code": "const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Button = styled.button``;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n  },\n  {\n    title: \"GitHub\",\n    value: \"hyperfiles.near/widget/adapter.github\",\n  },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\nconst defaultAdapter = adapters[0];\n\nconst { creatorId } = props;\n\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [filename, setFilename] = useState(props.filename ?? \"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst handleCreate = () => {\n  const isCreator = context.accountId === creatorId;\n\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json).then((reference) => {\n      // now we have a reference to the data\n      // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\n      const thingId = filename ?? generateUID();\n\n      const hyperfile = {\n        [props.type]: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              fileformat: `${props.type}.${source}`,\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              type: props.type,\n            },\n          },\n        },\n      };\n\n      if (creatorId !== context.accountId) {\n        // handle request merge\n        hyperfile.index = {\n          notify: JSON.stringify({\n            key: creatorId,\n            value: {\n              type: \"request\",\n              data: {\n                type: \"merge\",\n                upstream: `${creatorId}/${props.type}/${props.filename}`,\n                origin: `${context.accountId}/${props.type}/${thingId}`,\n              },\n            },\n          }),\n        };\n        hyperfile[props.type][thingId].metadata = {\n          ...hyperfile[props.type][thingId].metadata,\n          upstream: `${creatorId}/${props.type}/${props.filename}`,\n        };\n        // I want to make a request to merge\n        // set upstream and downstream\n      }\n\n      // sometimes we're not logged in, so it doesn't do anything!\n      Social.set(hyperfile, { force: true });\n    });\n  }\n};\n\nreturn (\n  <div className=\"row\">\n    <div className=\"col\">\n      <div className=\"p-3 border bg-light\">\n        <Form>\n          <h3>Data</h3>\n          <FormGroup>\n            <Label>Source</Label>\n            <Widget\n              src=\"hyperfiles.near/widget/MetadataEditor\"\n              props={{\n                initialMetadata: profile,\n                onChange: (newValue) => {\n                  console.log(\"New Source:\", newValue);\n                  setSource(newValue); // Update local state\n                  State.update({\n                    profile: { ...profile, source: newValue }, // Update external state\n                  });\n                },\n                value: source,\n                options: {\n                  source: {\n                    sourcePattern: \"*/profile/source/*\",\n                    placeholder: \"Select a source\",\n                  },\n                },\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Schema</Label>\n            <Widget\n              src=\"hyperfiles.near/widget/MetadataEditor\"\n              props={{\n                initialMetadata: profile,\n                onChange: (newValue) => {\n                  console.log(\"New Schema:\", newValue);\n                  setSchema(newValue); // Update local state\n                  State.update({\n                    profile: { ...profile, schema: newValue }, // Update external state\n                  });\n                },\n                value: schema,\n                options: {\n                  source: {\n                    schemaPattern: \"*/profile/schema/*\",\n                    placeholder: \"Select a schema\",\n                  },\n                },\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Raw Data</Label>\n            <textarea\n              className=\"form-control\"\n              style={{ width: \"100%\", height: \"400px\" }}\n              value={rawData}\n              onChange={(e) => setRawData(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      </div>\n    </div>\n    <div className=\"col\">\n      <div className=\"p-3 border bg-light\">\n        <Form>\n          <h3>Storage</h3>\n          <FormGroup>\n            <Label>Adapter</Label>\n            <Select\n              value={adapter}\n              onChange={(e) => setAdapter(e.target.value)}\n            >\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n          {rawAdapter && <>{parseAdapter(rawAdapter)}</>}\n          {adapter === \"hyperfiles.near/widget/adapter.github\" && (\n            <Widget\n              src=\"flowscience.near/widget/GitHubSearchSelect\"\n              onSelectRepository={handleSelectRepository}\n            ></Widget>\n          )}\n        </Form>\n      </div>\n    </div>\n    <div className=\"col\">\n      <div className=\"p-3 border bg-light\">\n        <Form>\n          <Button\n            onClick={handleCreate}\n            disabled={!adapter || !schema || !source || !rawData}\n          >\n            create reference\n          </Button>\n          {hyperfile !== \"\" && (\n            <>\n              <FormGroup>\n                <textarea\n                  className=\"form-control\"\n                  value={hyperfile}\n                  disabled\n                  style={{ width: \"100%\", height: \"400px\" }}\n                />\n              </FormGroup>\n              <Button\n                onClick={() =>\n                  Social.set(JSON.parse(hyperfile), {\n                    force: true,\n                  })\n                }\n              >\n                save\n              </Button>\n            </>\n          )}\n        </Form>\n      </div>\n    </div>\n  </div>\n);\n", "metadata": {"fork_of": "hyperfiles.near/widget/hyperfile.create@117341880"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/hyperfile.create", "fact_widget_deployments_id": "7aa94558d77e263f4d3050b714552578", "inserted_timestamp": "2024-04-25T06:05:31.816Z", "modified_timestamp": "2024-04-25T07:04:41.965Z", "__row_index": 8}