{"tx_hash": "53VjogZhDaRU9PDkq4jasTLoZTgLEFcmXoHEZR9gyPQE", "action_id_social": "HCDMvrLxSUHjFVLdaYqxW75uHkKcyJibZzQkBr6sJGud-0-widget", "block_id": 116718009, "block_timestamp": "2024-04-12T23:36:21.389Z", "signer_id": "hyperfiles.near", "widget_name": "adapter.github", "source_code": "// Function to construct a GitHub API URL given a file path in a repository\nconst githubUrl = (filePath) =>\n  `https://api.github.com/repos/your-username/your-repository/contents/${filePath}`;\n\n// Function to retrieve data from GitHub given a file path\nfunction get(filePath) {\n  return fetch(githubUrl(filePath), {\n    headers: {\n      Accept: \"application/vnd.github.v3.raw\", // Set Accept header to get raw content of the file\n      Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\n    },\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch data\");\n    }\n    return response.text(); // Use .text() for raw content, not .json()\n  });\n}\n\n// Function to create and upload data to GitHub, returning a promise with the URL of the uploaded content\nfunction create(filePath, data) {\n  // Added filePath to the parameters\n  return new Promise((resolve, reject) => {\n    if (data.length) {\n      const content = btoa(data); // Convert data to Base64 for GitHub API\n      fetch(githubUrl(filePath), {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/vnd.github.v3+json\", // Set Accept header to expect JSON responses\n          Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\n          \"Content-Type\": \"application/json\", // Set the Content-Type header\n        },\n        body: JSON.stringify({\n          message: `Upload ${filePath}`, // Commit message\n          content: content, // Base64 encoded content\n        }),\n      })\n        .then((response) => response.json()) // Parse the JSON response\n        .then((data) => {\n          if (data.content && data.content.html_url) {\n            resolve({ url: data.content.html_url }); // Resolve the promise with the HTML URL of the new content\n          } else {\n            throw new Error(\"Invalid response from GitHub\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error in create function:\", error);\n          reject(error); // Reject the promise in case of an error\n        });\n    } else {\n      reject(\"No data provided\"); // Reject the promise if no data is provided\n    }\n  });\n}\n\n// Return the get and create functions for use elsewhere\nreturn { get, create };\n", "metadata": {"fork_of": "flowscience.near/widget/adapter.github@116628910"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/hyperfiles.near/widget/adapter.github", "fact_widget_deployments_id": "3ae13ed582bc64828bca93e05383ce36", "inserted_timestamp": "2024-04-13T01:48:44.908Z", "modified_timestamp": "2024-04-13T01:48:44.908Z", "__row_index": 6}