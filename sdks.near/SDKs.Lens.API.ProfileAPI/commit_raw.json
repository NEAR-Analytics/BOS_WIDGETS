{"tx_hash": "Hp49gfhZJZp4Q9LSfb2gpD1VxssS9U1ebCRYfvGdGwk4", "action_id_social": "9zgLERCfVDPXBbFq4jNcxMnQtmPnsVvHb3M6yrmJApmD-0-widget", "block_id": 111793538, "block_timestamp": "2024-01-31T19:18:22.416Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.API.ProfileAPI", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Profile } = $(\"@sdks/lens/queries#alpha\");\nconst { ProfileMutations } = $(\"@sdks/lens/mutations#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\n\nconst ProfileAPI = {\n  create: (Client, createProfileWithHandleRequest) => {\n    return Client.graphql(ProfileMutations.CREATE_PROFILE_MUTATION, {\n      createProfileWithHandleRequest,\n    }).then((payload) => !payload.body.data.createProfileWithHandle.reason);\n  },\n  fetch: (Client, profileRequest) => {\n    return Client.graphql(Profile.PROFILE_QUERY, {\n      profileRequest: ApiHelper.clean(profileRequest),\n    }).then((payload) => payload.body.data.profile || {});\n  },\n  fetchAll: (Client, profilesRequest) =>\n    Client.graphql(Profile.PROFILES_QUERY, {\n      profilesRequest: ApiHelper.clean({\n        ...profilesRequest,\n        where: {\n          ...ApiHelper.clean(profilesRequest.where),\n        },\n      }),\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.profiles.items || [],\n        pagination: payload.body.data.profiles.pageInfo || {},\n      };\n    }),\n  following: (Client, followingRequest) =>\n    Client.graphql(Profile.FOLLOWING_QUERY, {\n      followingRequest: ApiHelper.clean(followingRequest),\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.following.items || [],\n        pagination: payload.body.data.following.pageInfo || {},\n      };\n    }),\n  followers: (Client, followersRequest) =>\n    Client.graphql(Profile.FOLLOWERS_QUERY, {\n      followersRequest: ApiHelper.clean(followersRequest),\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.followers.items || [],\n        pagination: payload.body.data.followers.pageInfo || {},\n      };\n    }),\n  stats: (Client, profileStatsRequest) =>\n    Client.graphql(Profile.PROFILE_STATS_QUERY, {profileStatsRequest: ApiHelper.clean(profileStatsRequest)}).then(\n      (payload) => payload.body.data.profile.stats || {}\n    ),\n  recommendations: (Client, profileRecommendationsRequest) =>\n    Client.graphql(Profile.PROFILE_RECOMMENDATIONS_QUERY, {\n      profileRecommendationsRequest,\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.profileRecommendations.items || {},\n        pagination: payload.body.data.pageInfo || {},\n      };\n    }),\n  interests: (Client, profileInterestsRequest) => ProfileAPI.fetch(Client, profileInterestsRequest).then((profile) => profile.interests || []),\n  report: (Client, reportProfileRequest) =>\n    Client.graphql(ProfileMutations.PROFILE_REPORT_MUTATION, {\n      reportProfileRequest,\n    }).then((payload) => payload.ok).catch((_) => false),\n  block: (Client, blockProfileRequest) =>\n    Client.graphql(ProfileMutations.PROFILE_BLOCK_MUTATION, {\n      blockProfileRequest,\n    }).then((payload) => payload.body.data.createBlockProfilesTypedData || {}),\n  history: (Client, profileActionHistoryRequest) =>\n    Client.graphql(Profile.PROFILE_ACTION_HISTORY_QUERY, {\n      profileActionHistoryRequest,\n    }).then((payload) => {\n      return {\n        history: payload.body.data.profileActionHistory.items || [],\n        pagination: payload.body.data.profileActionHistory.pageInfo || {},\n      };\n    }),\n  onChainIdentity: (Client, profileOnChainIdentityRequest) => ProfileAPI.fetch(Client, profileOnChainIdentityRequest).then((profile) => profile.onchainIdentity || {}),\n  isFollowedByMe: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.isFollowedByMe.value),\n  isFollowingMe: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.isFollowingMe.value),\n  isBlockedByMe: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.isBlockedByMe.value),\n  canFollow: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.canFollow !== \"NO\"),\n  canUnfollow: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.canUnfollow),\n  canBlock: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.canBlock),\n  canUnblock: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.canUnblock),\n  hasBlockedMe: (Client, profileRequest) => ProfileAPI.fetch(Client, profileRequest).then((profile) => profile.operations.hasBlockedMe.value),\n};\n\nreturn ProfileAPI;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.API.ProfileAPI", "fact_widget_deployments_id": "2b0154f0d6401b58acb9223ad8399b72", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}