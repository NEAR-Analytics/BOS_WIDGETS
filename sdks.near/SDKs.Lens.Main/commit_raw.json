{"tx_hash": "9pVoYZhCYB3gaNrHmFscXr6ngSUH4DEGs3Y5dC5gRFx", "action_id_social": "9oFfAPv76MgF2qzbWhnYaaTj8WfqfUuk25LyBnQR6h9U-0-widget", "block_id": 110341715, "block_timestamp": "2024-01-13T23:39:34.574Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.Main", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Constants, Interfaces, HealthAPI, AuthAPI, AuthRequests, ApiHelper } =\n  $(\"@sdks/lens\");\nconst { LightClient } = $(\"@sdks/light-client\");\n\nconst LensSDK = {\n  profile: Interfaces.PROFILE_INTERFACE,\n  enableTestnet: () => (LightClient.url = Constants.TESTNET_URL),\n  enableMainnet: () => (LightClient.url = Constants.MAINNET_URL),\n  isTestnet: () => LightClient.url == Constants.TESTNET_URL,\n  init: () => {\n    LensSDK.enableMainnet();\n    LightClient.auth = Interfaces.AUTH_INTERFACE;\n    LightClient.tokenLifespan = Constants.JWT_TOKEN_LIFESPAN_SECONDS;\n    LightClient.refreshTokenLifespan =\n      Constants.JWT_REFRESH_TOKEN_LIFESPAN_SECONDS;\n\n    return LensSDK;\n  },\n  health: {\n    ping: () =>\n      LensSDK._call(HealthAPI.ping).then(\n        (response) => response == Constants.RESPONSE_HEALTH_OK\n      ),\n  },\n  authentication: {\n    profiles: (profilesManagedRequest) =>\n      LensSDK._call(\n        AuthAPI.profiles,\n        AuthRequests.PROFILES_MANAGED_REQUEST,\n        profilesManagedRequest\n      ),\n    login: (challengeRequest) =>\n      LensSDK._call(\n        AuthAPI.challenge,\n        AuthRequests.CHALLENGE_REQUEST,\n        challengeRequest\n      ).then((challenge) =>\n        Ethers.provider()\n          .getSigner()\n          .signMessage(challenge.text)\n          .then((signature) => {\n            let signedAuthChallengeRequest =\n              AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST;\n            signedAuthChallengeRequest.id = challenge.id;\n            signedAuthChallengeRequest.signature = signature;\n\n            return LensSDK._call(\n              AuthAPI.authenticate,\n              AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST,\n              signedAuthChallengeRequest\n            ).then((auth) => {\n              LightClient.auth = auth;\n              LensSDK.profile = {}; // Fetch logged user profile once profile API gets implemented\n              return LensSDK.profile;\n            });\n          })\n      ),\n    refresh: (refreshTokenRequest) =>\n      LensSDK._call(\n        AuthAPI.refresh,\n        AuthRequests.REFRESH_TOKEN_REQUEST,\n        refreshTokenRequest\n      ).then((auth) => {\n        LightClient.auth = auth;\n        LensSDK.profile = {}; // Fetch logged user profile once profile API gets implemented\n        return LensSDK.profile;\n      }),\n    revoke: (revokeAuthenticationRequest) =>\n      LensSDK._call(\n        AuthAPI.revoke,\n        AuthRequests.REVOKE_AUTHENTICATION_REQUEST,\n        revokeAuthenticationRequest\n      ),\n    verify: (verifyRequest) =>\n      LensSDK._call(AuthAPI.verify, AuthRequests.VERIFY_REQUEST, verifyRequest),\n    list: (approvedAuthenticationRequest) =>\n      LensSDK._call(\n        AuthAPI.list,\n        AuthRequests.APPROVED_AUTHENTICATION_REQUEST,\n        approvedAuthenticationRequest\n      ),\n    isAuthenticated: () => LensSDK.profile.id != \"\",\n    getAccessToken: () => LightClient.auth.accessToken || null,\n    getProfileId: () => LensSDK.profile.id || null,\n  },\n  profile: {\n    create: () => {},\n    fetch: (profileId) => {},\n    fetchAll: (profileIds) => {},\n    stats: (profileId) => {},\n    recommendations: (profileId) => {},\n    interests: (profileId) => {},\n    report: (profileId) => {},\n    block: (profileId) => {},\n    history: () => {},\n    onChainIdentity: (profileId) => {},\n    isFollowedByMe: (profileId) => {},\n    isBlockedByMe: (profileId) => {},\n    isFollowingMe: (profileId) => {},\n    canFollow: (profileId) => {},\n    canUnfollow: (profileId) => {},\n    canBlock: (profileId) => {},\n    canUnblock: (profileId) => {},\n    fetchPublications: (profileId) => LensSDK.fetchAll(profileId),\n  },\n  publication: {\n    fetch: (publicationId) => {},\n    fetchAll: (profileId) => {},\n    stats: (publicationId) => {},\n    whoActed: (publicationId) => {},\n    comments: (publicationId) => {},\n    upvote: (publicationId) => {},\n    downvote: (publicationId) => {},\n    hide: (publicationId) => {},\n    report: (publicationId) => {},\n  },\n  search: {\n    profiles: (searchTerm) => {},\n    publications: (searchTerm) => {},\n  },\n  notifications: {\n    fetch: () => {},\n  },\n  transaction: {\n    status: () => {},\n    txIdToTxHash: () => {},\n  },\n  _call: (apiMethod, requestObject, dataObject) =>\n    apiMethod(\n      LightClient,\n      dataObject ? ApiHelper.intersect(requestObject, dataObject) : null\n    ),\n};\n\nreturn LensSDK.init();\n", "metadata": {"image": {}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.Main", "fact_widget_deployments_id": "079fb0ff9a646165ddc5fb1a5e52f482", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 9}