{"tx_hash": "FkwbFPMS3CZw7X1oBQ5YH9pxWMpLK6LfZBPGbqkEaZQk", "action_id_social": "6JC76JgCSxZsGQJMei4RbTf18Dv7U15MtGC8n1mSCdeQ-0-widget", "block_id": 111559892, "block_timestamp": "2024-01-28T22:55:12.307Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.LensSDK", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst {\n  Constants,\n  Interfaces,\n  HealthAPI,\n  AuthAPI,\n  ProfileAPI,\n  PublicationAPI,\n  TransactionAPI,\n  NotificationAPI,\n  SearchAPI,\n  AuthRequests,\n  ProfileRequests,\n  PublicationRequests,\n  TransactionRequests,\n  NotificationRequests,\n  SearchRequests,\n  ApiHelper,\n} = $(\"@sdks/lens#alpha\");\nconst { LightClient } = $(\"@sdks/light-client\");\n\nconst LensSDK = {\n  profile: Interfaces.PROFILE_INTERFACE,\n  enableTestnet: () => (LightClient.url = Constants.TESTNET_URL),\n  enableMainnet: () => (LightClient.url = Constants.MAINNET_URL),\n  isTestnet: () => LightClient.url == Constants.TESTNET_URL,\n  init: () => {\n    LensSDK.enableMainnet();\n    LightClient.auth = Interfaces.AUTH_INTERFACE;\n    LightClient.challenge = Interfaces.AUTH_CHALLENGE_INTERFACE;\n    LightClient.tokenLifespan = Constants.JWT_TOKEN_LIFESPAN_SECONDS;\n    LightClient.refreshTokenLifespan =\n      Constants.JWT_REFRESH_TOKEN_LIFESPAN_SECONDS;\n\n    return LensSDK;\n  },\n  health: {\n    ping: () =>\n      LensSDK._call(HealthAPI.ping).then(\n        (response) => response == Constants.RESPONSE_HEALTH_OK\n      ),\n  },\n  authentication: {\n    profiles: (profilesManagedRequest) =>\n      LensSDK._call(\n        AuthAPI.profiles,\n        AuthRequests.PROFILES_MANAGED_REQUEST,\n        profilesManagedRequest\n      ),\n    login: (challengeRequest) =>\n      LensSDK._call(\n        AuthAPI.challenge,\n        AuthRequests.CHALLENGE_REQUEST,\n        challengeRequest\n      ).then((challenge) => {\n        LightClient.challenge = challenge;\n\n        return Ethers.provider()\n          .getSigner()\n          .signMessage(challenge.text)\n          .then((signature) => {\n            let signedAuthChallengeRequest =\n              AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST;\n            signedAuthChallengeRequest.id = LightClient.challenge.id;\n            signedAuthChallengeRequest.signature = signature;\n\n            return LensSDK._call(\n              AuthAPI.authenticate,\n              AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST,\n              signedAuthChallengeRequest\n            ).then((auth) => {\n              LightClient.auth = auth;\n              LensSDK.profile = LensSDK.profile.fetch({\n                forProfileId: challengeRequest.for\n              });\n              return LensSDK.profile;\n            });\n          });\n      }),\n    refresh: (refreshTokenRequest) =>\n      LensSDK._call(\n        AuthAPI.refresh,\n        AuthRequests.REFRESH_TOKEN_REQUEST,\n        refreshTokenRequest\n      ).then((auth) => {\n        LightClient.auth = auth;\n        LensSDK.profile = {}; // Fetch logged user profile once profile API gets implemented\n        return LensSDK.profile;\n      }),\n    revoke: (revokeAuthenticationRequest) =>\n      LensSDK._call(\n        AuthAPI.revoke,\n        AuthRequests.REVOKE_AUTHENTICATION_REQUEST,\n        revokeAuthenticationRequest\n      ),\n    verify: (verifyRequest) =>\n      LensSDK._call(AuthAPI.verify, AuthRequests.VERIFY_REQUEST, verifyRequest),\n    list: (approvedAuthenticationRequest) =>\n      LensSDK._call(\n        AuthAPI.list,\n        AuthRequests.APPROVED_AUTHENTICATION_REQUEST,\n        approvedAuthenticationRequest\n      ),\n    isAuthenticated: () => LensSDK.profile.id != \"\",\n    getAccessToken: () => LightClient.auth.accessToken || null,\n    getProfileId: () => LensSDK.profile.id || null,\n  },\n  profile: {\n    create: (createProfileRequest) =>\n      LensSDK._call(\n        ProfileAPI.create,\n        ProfileRequests.CREATE_PROFILE_REQUEST,\n        createProfileRequest\n      ),\n    fetch: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.fetch,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    fetchAll: (profilesRequest) =>\n      LensSDK._call(\n        ProfileAPI.fetchAll,\n        ProfileRequests.PROFILES_REQUEST,\n        profilesRequest\n      ),\n    stats: (profileStatsRequest) =>\n      LensSDK._call(\n        ProfileAPI.stats,\n        ProfileRequests.PROFILE_STATS_REQUEST,\n        profileStatsRequest\n      ),\n    recommendations: (profileRecommendationsRequest) =>\n      LensSDK._call(\n        ProfileAPI.recommendations,\n        ProfileRequests.PROFILE_RECOMMENDATIONS_REQUEST,\n        profileRecommendationsRequest\n      ),\n    interests: (profileInterestsRequest) =>\n      LensSDK._call(\n        ProfileAPI.interests,\n        ProfileRequests.PROFILE_INTERESTS_REQUEST,\n        profileInterestsRequest\n      ),\n    report: (reportProfileRequest) =>\n      LensSDK._call(\n        ProfileAPI.report,\n        ProfileRequests.REPORT_PROFILE_REQUEST,\n        reportProfileRequest\n      ),\n    block: (blockProfileRequest) =>\n      LensSDK._call(\n        ProfileAPI.block,\n        ProfileRequests.BLOCK_PROFILE_REQUEST,\n        blockProfileRequest\n      ),\n    history: (profileActionHistoryRequest) =>\n      LensSDK._call(\n        ProfileAPI.history,\n        ProfileRequests.PROFILE_ACTION_HISTORY_REQUEST,\n        profileActionHistoryRequest\n      ),\n    onChainIdentity: (profileOnChainIdentityRequest) =>\n      LensSDK._call(\n        ProfileAPI.onChainIdentity,\n        ProfileRequests.PROFILE_ONCHAIN_IDENTITY_REQUEST,\n        profileOnChainIdentityRequest\n      ),\n    isFollowedByMe: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.isFollowedByMe,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    isBlockedByMe: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.isBlockedByMe,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    isFollowingMe: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.isFollowingMe,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    canFollow: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.canFollow,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    canUnfollow: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.canUnfollow,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    canBlock: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.canBlock,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    hasBlockedMe: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.hasBlockedMe,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    canUnblock: (profileRequest) =>\n      LensSDK._call(\n        ProfileAPI.canUnblock,\n        ProfileRequests.PROFILE_REQUEST,\n        profileRequest\n      ),\n    fetchPublications: (profileId) => LensSDK.publications.fetchAll(profileId),\n    isHandleAvailable: (handle) => LensSDK.profile.fetch({ forHandle: handle }),\n    whoActedOnPublication: (whoActedOnPublicationRequest) => LensSDK.publication.whoActed(whoActedOnPublicationRequest)\n  },\n  publication: {\n    fetch: (publicationRequest) =>\n      LensSDK._call(\n        PublicationAPI.fetch,\n        PublicationRequests.PUBLICATION_REQUEST,\n        publicationRequest\n      ),\n    fetchAll: (publicationsRequest) =>\n      LensSDK._call(\n        PublicationAPI.fetchAll,\n        PublicationRequests.PUBLICATIONS_REQUEST,\n        publicationsRequest\n      ),\n    stats: (publicationStatsRequest) => \n      LensSDK._call(\n        PublicationAPI.stats,\n        PublicationRequests.PUBLICATION_STATS_REQUEST,\n        publicationStatsRequest\n      ),\n    whoActed: (whoActedOnPublicationRequest) =>\n     LensSDK._call(\n        PublicationAPI.whoActed,\n        PublicationRequests.WHO_ACTED_ON_PUBLICATION_REQUEST,\n        whoActedOnPublicationRequest\n      ),\n    comments: (publicationRequest) => \n      LensSDK._call(\n        PublicationAPI.comments,\n        PublicationRequests.PUBLICATION_REQUEST,\n        publicationRequest\n      ),\n    mirrors: (publicationRequest) => \n      LensSDK._call(\n        PublicationAPI.mirrors,\n        PublicationRequests.PUBLICATION_REQUEST,\n        publicationRequest\n      ),\n    quotes: (publicationRequest) => \n      LensSDK._call(\n        PublicationAPI.quotes,\n        PublicationRequests.PUBLICATION_REQUEST,\n        publicationRequest\n      ),\n    reactions: {\n      fetch: () => {},\n      add: (publicationReactionRequest) => \n        LensSDK.publication._react(PublicationAPI.addReaction, publicationReactionRequest),\n      remove: (publicationReactionRequest) => \n        LensSDK.publication._react(PublicationAPI.removeReaction, publicationReactionRequest),\n      _react: (reactionEndpoint, publicationReactionRequest) =>\n        LensSDK._call(\n          reactionEndpoint,\n          PublicationRequests.PUBLICATION_REACTION_REQUEST,\n          publicationReactionRequest\n        )\n    },\n    hide: (hidePublicationRequest) => \n      LensSDK._call(\n        PublicationAPI.hide,\n        PublicationRequests.HIDE_PUBLICATION_REQUEST,\n        hidePublicationRequest\n      ),\n    report: (reportPublicationRequest) => \n      LensSDK._call(\n        PublicationAPI.report,\n        PublicationRequests.REPORT_PUBLICATION_REQUEST,\n        reportPublicationRequest\n      ),\n  },\n  search: {\n    profiles: () => (profileSearchRequest) => \n      LensSDK._call(\n        SearchAPI.profiles,\n        SearchRequests.PROFILE_SEARCH_REQUEST,\n        profileSearchRequest\n      ),\n    publications: (publicationSearchRequest) => \n      LensSDK._call(\n        SearchAPI.publications,\n        SearchRequests.PUBLICATION_SEARCH_REQUEST,\n        publicationSearchRequest\n      ),\n  },\n  notifications: {\n    fetch: () => (notificationRequest) => \n      LensSDK._call(\n        NotificationAPI.fetch,\n        NotificationRequests.NOTIFICATION_REQUEST,\n        notificationRequest\n      ),\n  },\n  transaction: {\n    status: (lensTransactionStatusRequest) => \n      LensSDK._call(\n        TransactionAPI.status,\n        TransactionRequests.LENS_TRANSACTION_STATUS_REQUEST,\n        lensTransactionStatusRequest\n      ),\n    txIdToTxHash: (txIdToTxHashRequest) => \n      LensSDK._call(\n        TransactionAPI.txIdToTxHash,\n        TransactionRequests.TXID_TO_TXHASH_REQUEST,\n        txIdToTxHashRequest\n      ),\n  },\n  _call: (apiMethod, requestObject, dataObject) => {\n    console.log(dataObject);\n    return apiMethod(\n      LightClient,\n      dataObject ? ApiHelper.intersect(requestObject, dataObject) : null\n    );\n  }\n};\n\nreturn LensSDK.init();\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.LensSDK", "fact_widget_deployments_id": "6abf8418cf77c773c1cd7f2d6e7f11d2", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}