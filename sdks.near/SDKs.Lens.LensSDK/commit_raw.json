{"tx_hash": "HGKKvDmbWbMNLfSxF96GytHfJHuRiXM9HevNahTjPm37", "action_id_social": "GgqsmtrcVzEv4UQ2YeNXTud9zFcasvyYgzkAe5sRXdB4-0-widget", "block_id": 112197947, "block_timestamp": "2024-02-06T01:16:12.391Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.LensSDK", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { StatefulDependency } = $(\"@sdks/abstracts\");\nconst {\n  Constants,\n  Interfaces,\n  HealthAPI,\n  AuthAPI,\n  ProfileAPI,\n  PublicationAPI,\n  TransactionAPI,\n  NotificationAPI,\n  SearchAPI,\n  AuthRequests,\n  ProfileRequests,\n  PublicationRequests,\n  TransactionRequests,\n  NotificationRequests,\n  SearchRequests,\n  ApiHelper,\n} = $(\"@sdks/lens#alpha\");\nconst { LightClient } = $(\"@sdks/light-client\");\n\nreturn (Store, status, enableTestnet) => {\n  const LensSDK = {\n    ...StatefulDependency(Store, status, \"LensSDK\"),\n    version: \"alpha\",\n    enableTestnet: () =>\n      LensSDK.set(\"url\", \"https://api-v2-mumbai-live.lens.dev\"),\n    enableMainnet: () => LensSDK.set(\"url\", \"https://api-v2.lens.dev\"),\n    isTestnet: () =>\n      LensSDK.get(\"url\") == \"https://api-v2-mumbai-live.lens.dev\",\n    isMainnet: () => LensSDK.get(\"url\") == \"https://api-v2.lens.dev\",\n    init: () => {\n      LensSDK.initDependency({\n        profile: null,\n        auth: Interfaces.AUTH_INTERFACE,\n        requestInProgress: false,\n        url: enableTestnet\n          ? \"https://api-v2-mumbai-live.lens.dev\"\n          : \"https://api-v2.lens.dev\",\n        tryGetAuth: true,\n      });\n\n      LightClient.url = LensSDK.get(\"url\");\n      LightClient.auth = LensSDK.get(\"auth\");\n      LightClient.tokenLifespan = Constants.JWT_TOKEN_LIFESPAN_SECONDS;\n      LightClient.refreshTokenLifespan =\n        Constants.JWT_REFRESH_TOKEN_LIFESPAN_SECONDS;\n\n      LensSDK.tryGetAuth();\n\n      return LensSDK;\n    },\n    isAuthenticated: () => !!LensSDK.get(\"profile\").id,\n    getAccessToken: () => LensSDK.get(\"auth\").accessToken || null,\n    getCurrentProfile: () => LensSDK.get(\"profile\") || {},\n    getProfileId: () => LensSDK.get(\"profile\").id || null,\n    isRequestInProgress: () => LensSDK.get(\"requestInProgress\"),\n    health: {\n      ping: () =>\n        LensSDK._call(HealthAPI.ping).then(\n          (response) => response == Constants.RESPONSE_HEALTH_OK\n        ),\n    },\n    authentication: {\n      profiles: (profilesManagedRequest) =>\n        LensSDK._call(\n          AuthAPI.profiles,\n          AuthRequests.PROFILES_MANAGED_REQUEST,\n          profilesManagedRequest\n        ),\n      login: (challengeRequest) =>\n        LensSDK._call(\n          AuthAPI.challenge,\n          AuthRequests.CHALLENGE_REQUEST,\n          challengeRequest\n        ).then((challenge) => {\n          LightClient.challenge = challenge;\n\n          return Ethers.provider()\n            .getSigner()\n            .signMessage(challenge.text)\n            .then((signature) => {\n              let signedAuthChallengeRequest =\n                AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST;\n              signedAuthChallengeRequest.id = LightClient.challenge.id;\n              signedAuthChallengeRequest.signature = signature;\n\n              return LensSDK._call(\n                AuthAPI.authenticate,\n                AuthRequests.SIGNED_AUTH_CHALLENGE_REQUEST,\n                signedAuthChallengeRequest\n              ).then((auth) => {\n                LensSDK.updateAuth(auth);\n\n                return LensSDK.authentication\n                  .profiles({\n                    for: challengeRequest.signedBy,\n                  })\n                  .then((profilesManaged) => {\n                    let profile = profilesManaged.find(\n                      (profile) => profile.id == challengeRequest.for\n                    );\n\n                    return LensSDK.profile\n                      .fetch({\n                        forHandle: profile.handle.fullHandle,\n                      })\n                      .then((profile) => {\n                        LensSDK.set(\"profile\", profile);\n                        LensSDK.persist(\"profileId\", profile.id);\n\n                        return profile;\n                      });\n                  });\n              });\n            });\n        }),\n      logout: () => {\n        LensSDK.clearAuth();\n        LensSDK.persist(\"profileId\", \"\");\n        LensSDK.set(\"profile\", null);\n      },\n      refresh: () =>\n        LensSDK._call(\n          AuthAPI.refresh,\n          AuthRequests.REFRESH_TOKEN_REQUEST,\n          LensSDK.get(\"auth\")\n        ).then((auth) => {\n          LensSDK.updateAuth(auth);\n\n          return LensSDK.get(\"profile\");\n        }),\n      revoke: (revokeAuthenticationRequest) =>\n        LensSDK._call(\n          AuthAPI.revoke,\n          AuthRequests.REVOKE_AUTHENTICATION_REQUEST,\n          revokeAuthenticationRequest\n        ),\n      verify: () =>\n        LensSDK._call(AuthAPI.verify, AuthRequests.VERIFY_REQUEST, {\n          accessToken: LensSDK.get(\"auth\").accessToken,\n        }),\n      list: (approvedAuthenticationRequest) =>\n        LensSDK._call(\n          AuthAPI.list,\n          AuthRequests.APPROVED_AUTHENTICATION_REQUEST,\n          approvedAuthenticationRequest || {}\n        ),\n    },\n    profile: {\n      create: (createProfileWithHandleRequest) =>\n        LensSDK._call(\n          ProfileAPI.create,\n          ProfileRequests.CREATE_PROFILE_WITH_HANDLE_REQUEST,\n          createProfileWithHandleRequest\n        ),\n      fetch: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.fetch,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      fetchAll: (profilesRequest) =>\n        LensSDK._call(\n          ProfileAPI.fetchAll,\n          ProfileRequests.PROFILES_REQUEST,\n          profilesRequest\n        ),\n      following: (followingRequest) =>\n        LensSDK._call(\n          ProfileAPI.following,\n          ProfileRequests.FOLLOWING_REQUEST,\n          followingRequest\n        ),\n      followers: (followersRequest) =>\n        LensSDK._call(\n          ProfileAPI.followers,\n          ProfileRequests.FOLLOWERS_REQUEST,\n          followersRequest\n        ),\n      stats: (profileStatsRequest) =>\n        LensSDK._call(\n          ProfileAPI.stats,\n          ProfileRequests.PROFILE_STATS_REQUEST,\n          profileStatsRequest\n        ),\n      recommendations: (profileRecommendationsRequest) =>\n        LensSDK._call(\n          ProfileAPI.recommendations,\n          ProfileRequests.PROFILE_RECOMMENDATIONS_REQUEST,\n          profileRecommendationsRequest\n        ),\n      interests: (profileInterestsRequest) =>\n        LensSDK._call(\n          ProfileAPI.interests,\n          ProfileRequests.PROFILE_INTERESTS_REQUEST,\n          profileInterestsRequest\n        ),\n      report: (reportProfileRequest) =>\n        LensSDK._call(\n          ProfileAPI.report,\n          ProfileRequests.REPORT_PROFILE_REQUEST,\n          reportProfileRequest\n        ),\n      block: (blockProfileRequest) =>\n        LensSDK._call(\n          ProfileAPI.block,\n          ProfileRequests.BLOCK_PROFILE_REQUEST,\n          blockProfileRequest\n        ),\n      history: (profileActionHistoryRequest) =>\n        LensSDK._call(\n          ProfileAPI.history,\n          ProfileRequests.PROFILE_ACTION_HISTORY_REQUEST,\n          profileActionHistoryRequest\n        ),\n      onChainIdentity: (profileOnChainIdentityRequest) =>\n        LensSDK._call(\n          ProfileAPI.onChainIdentity,\n          ProfileRequests.PROFILE_ONCHAIN_IDENTITY_REQUEST,\n          profileOnChainIdentityRequest\n        ),\n      isFollowedByMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.isFollowedByMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      isBlockedByMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.isBlockedByMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      isFollowingMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.isFollowingMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canFollow: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canFollow,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canUnfollow: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canUnfollow,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canBlock: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canBlock,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      hasBlockedMe: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.hasBlockedMe,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      canUnblock: (profileRequest) =>\n        LensSDK._call(\n          ProfileAPI.canUnblock,\n          ProfileRequests.PROFILE_REQUEST,\n          profileRequest\n        ),\n      fetchPublications: (profileId) =>\n        LensSDK.publications.fetchAll({ from: [profileId] }),\n      isHandleAvailable: (handle) =>\n        LensSDK.profile\n          .fetch({ forHandle: handle })\n          .then((profile) => !profile.id),\n      whoActedOnPublication: (whoActedOnPublicationRequest) =>\n        LensSDK.publication.whoActed(whoActedOnPublicationRequest),\n    },\n    publication: {\n      fetch: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.fetch,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      fetchAll: (publicationsRequest) =>\n        LensSDK._call(\n          PublicationAPI.fetchAll,\n          PublicationRequests.PUBLICATIONS_REQUEST,\n          publicationsRequest\n        ),\n      stats: (publicationStatsRequest) =>\n        LensSDK._call(\n          PublicationAPI.stats,\n          PublicationRequests.PUBLICATION_STATS_REQUEST,\n          publicationStatsRequest\n        ),\n      whoActed: (whoActedOnPublicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.whoActed,\n          PublicationRequests.WHO_ACTED_ON_PUBLICATION_REQUEST,\n          whoActedOnPublicationRequest\n        ),\n      comments: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.comments,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      mirrors: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.mirrors,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      quotes: (publicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.quotes,\n          PublicationRequests.PUBLICATION_REQUEST,\n          publicationRequest\n        ),\n      reactions: {\n        fetch: () => {},\n        add: (publicationReactionRequest) =>\n          LensSDK.publication.reactions._react(\n            PublicationAPI.addReaction,\n            publicationReactionRequest\n          ),\n        remove: (publicationReactionRequest) =>\n          LensSDK.publication.reactions._react(\n            PublicationAPI.removeReaction,\n            publicationReactionRequest\n          ),\n        _react: (reactionEndpoint, publicationReactionRequest) =>\n          LensSDK._call(\n            reactionEndpoint,\n            PublicationRequests.PUBLICATION_REACTION_REQUEST,\n            publicationReactionRequest\n          ),\n      },\n      hide: (hidePublicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.hide,\n          PublicationRequests.HIDE_PUBLICATION_REQUEST,\n          hidePublicationRequest\n        ),\n      report: (reportPublicationRequest) =>\n        LensSDK._call(\n          PublicationAPI.report,\n          PublicationRequests.REPORT_PUBLICATION_REQUEST,\n          reportPublicationRequest\n        ),\n    },\n    search: {\n      profiles: (profileSearchRequest) =>\n        LensSDK._call(\n          SearchAPI.profiles,\n          SearchRequests.PROFILE_SEARCH_REQUEST,\n          profileSearchRequest\n        ),\n      publications: (publicationSearchRequest) =>\n        LensSDK._call(\n          SearchAPI.publications,\n          SearchRequests.PUBLICATION_SEARCH_REQUEST,\n          publicationSearchRequest\n        ),\n    },\n    notifications: {\n      fetch: (notificationRequest) =>\n        LensSDK._call(\n          NotificationAPI.fetch,\n          NotificationRequests.NOTIFICATION_REQUEST,\n          notificationRequest\n        ),\n    },\n    transaction: {\n      status: (lensTransactionStatusRequest) =>\n        LensSDK._call(\n          TransactionAPI.status,\n          TransactionRequests.LENS_TRANSACTION_STATUS_REQUEST,\n          lensTransactionStatusRequest\n        ),\n      txIdToTxHash: (txIdToTxHashRequest) =>\n        LensSDK._call(\n          TransactionAPI.txIdToTxHash,\n          TransactionRequests.TXID_TO_TXHASH_REQUEST,\n          txIdToTxHashRequest\n        ),\n    },\n    customRequest: (graphql, request) => {\n      LensSDK.set(\"requestInProgress\", true);\n\n      return LightClient.graphql(graphql, request)\n        .then((data) => data.body)\n        .finally(() => {\n          LensSDK.set(\"requestInProgress\", false);\n        });\n    },\n    _call: (apiMethod, requestObject, dataObject) => {\n      LensSDK.set(\"requestInProgress\", true);\n\n      return apiMethod(\n        LightClient,\n        dataObject ? ApiHelper.intersect(requestObject, dataObject) : null\n      ).finally(() => {\n        LensSDK.set(\"requestInProgress\", false);\n      });\n    },\n    updateAuth: (auth) => {\n      LensSDK.set(\"auth\", auth);\n      LensSDK.persist(\"auth\", auth);\n    },\n    clearAuth: () => {\n      LensSDK.set(\"auth\", Interfaces.AUTH_INTERFACE);\n      LensSDK.persist(\"auth\", Interfaces.AUTH_INTERFACE);\n    },\n    tryGetAuth: () => {\n      if (LensSDK.get(\"tryGetAuth\")) {\n        LensSDK.getPersisted(\"auth\", Interfaces.AUTH_INTERFACE);\n        LensSDK.getPersisted(\"profileId\", \"\");\n\n        setTimeout(() => {\n          let auth = LensSDK.getPersisted(\"auth\", Interfaces.AUTH_INTERFACE);\n          let profileId = LensSDK.getPersisted(\"profileId\", \"\");\n\n          if (auth) {\n            LensSDK.set(\"auth\", auth);\n          } else {\n            setTimeout(() => {\n              let auth = LensSDK.getPersisted(\n                \"auth\",\n                Interfaces.AUTH_INTERFACE\n              );\n\n              if (auth) {\n                LensSDK.set(\"auth\", auth);\n              }\n            }, 800);\n          }\n\n          if (profileId) {\n            LensSDK.profile\n              .fetch({\n                forProfileId: profileId,\n              })\n              .then((profile) => {\n                LensSDK.set(\"profile\", profile);\n              });\n          } else {\n            setTimeout(() => {\n              let profileId = LensSDK.getPersisted(\"profileId\", \"\");\n\n              if (profileId) {\n                LensSDK.profile\n                  .fetch({\n                    forProfileId: profileId,\n                  })\n                  .then((profile) => {\n                    LensSDK.set(\"profile\", profile);\n                  });\n              }\n            }, 800);\n          }\n        }, 800);\n\n        LensSDK.set(\"tryGetAuth\", false);\n      }\n    },\n    persist: (key, value) => {\n      Storage.privateSet(LensSDK.getPersistKey(key), JSON.stringify(value));\n    },\n    getPersisted: (key, defaultValue) => {\n      let persistedKey = LensSDK.getPersistKey(key);\n\n      return JSON.parse(Storage.privateGet(persistedKey)) || defaultValue;\n    },\n    getPersistKey: (key) => `LensSDK.${key}`,\n    getVersion: () => LensSDK.version,\n  };\n\n  return LensSDK.init();\n};\n", "metadata": {"fork_of": "sdks.near/widget/SDKs.Lens.LensSDK@111796349"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.LensSDK", "fact_widget_deployments_id": "6dad87acdcf60793cafdc219d093f999", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 3}