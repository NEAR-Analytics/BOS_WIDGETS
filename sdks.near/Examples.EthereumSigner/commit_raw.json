{"tx_hash": "HHGBBy1TA3vHHHwGhcgq5L1qruZ4C9jrqTQk97Ano17D", "action_id_social": "5mUWzmgufjTTjrnPnZsz46AYcvMA3R7hm2mmueGpnY9Y-0-widget", "block_id": 109777415, "block_timestamp": "2024-01-07T00:56:37.933Z", "signer_id": "sdks.near", "widget_name": "Examples.EthereumSigner", "source_code": "const owner = \"sdks.near\";\nconst EthereumSigner = VM.require(`${owner}/widget/SDKs.EthereumSigner.Main`);\n\nState.init({\n  accountId: \"\",\n  proof: false,\n  verified: false,\n  broken: false,\n  signature: \"\",\n});\n\nif (Ethers.send(\"eth_accounts\", []).length > 0) {\n  let [account] = Ethers.send(\"eth_accounts\", []);\n\n  State.update({\n    accountId: account,\n  });\n}\n\nlet message = `Me, ${context.accountId} swear to be the owner of the ${state.accountId} address`;\n\nconst generateSignature = () => {\n  EthereumSigner.sign(message).then((signature) => {\n    State.update({\n      signature,\n      proof: true,\n    });\n  });\n};\n\nconst verifySignature = () => {\n  console.log(message, state.signature);\n  EthereumSigner.verify(message, state.signature, state.accountId)\n    .then((result) => {\n      console.log(result);\n      State.update({\n        verified: result,\n      });\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst toggleSignature = () => {\n  if (state.broken) {\n    State.update({ signature: state.signature.substring(0, state.signature.length - 1), broken: false });\n  } else {\n    State.update({ signature: state.signature + \"a\", broken: true });\n  }\n};\n\nreturn (\n  <>\n    {state.accountId && (\n      <>\n        <br />\n        Your address is:\n        <br /> <strong>{state.accountId}</strong>\n        <br />\n        Your NEAR account is:\n        <br /> <strong>{context.accountId}</strong>\n        <br />\n        Signature: <br /> <strong>{state.signature || \"No signature\"}</strong>\n        <br />\n        Proof that you are the owner: <br />\n        <strong>\n          {state.proof && state.verified ? \"Proven\" : \"Not proven\"}\n        </strong>\n        {!state.proof && (\n          <>\n            <br />\n            <br />\n            <br />\n            Message to sign:\n            <br /> <strong>{message}</strong>\n            <br />\n            <br />\n            <button onClick={() => generateSignature()}>\n              Generate signature\n            </button>\n          </>\n        )}\n        {state.proof && (\n          <>\n            <br />\n            <br />\n            <br />\n            Verification result: You are{!state.verified ? \" not \" : \" \"}the\n            owner\n            <br />\n            <br />\n            <button onClick={() => verifySignature()}>Verify signature</button>\n            <button onClick={() => toggleSignature()}>{state.broken ? \"Heal\" : \"Break\"} signature</button>\n          </>\n        )}\n      </>\n    )}\n\n    {(!state.accountId || !context.accountId) && (\n      <>\n        <h1>\n          Please, connect your Ethereum wallet on Polygon Mainnet\n          {!context.accountId ? \" and your NEAR account\" : \"\"}\n        </h1>\n        <br />\n        <Web3Connect />\n      </>\n    )}\n  </>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/Examples.EthereumSigner", "fact_widget_deployments_id": "03d95017cf8df15132094f1d23f69160", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}