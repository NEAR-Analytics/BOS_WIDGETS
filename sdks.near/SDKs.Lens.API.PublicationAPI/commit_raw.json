{"tx_hash": "6FHostvbQqm9qksry5xJzfDAK35yGVaZ1HddL88jAyUD", "action_id_social": "47Qnvnu22NquBUsHA7d6hN8t7QAJK61H3LWiy2fLP2Tv-0-widget", "block_id": 111558337, "block_timestamp": "2024-01-28T22:28:13.099Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.API.PublicationAPI", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Publication } = $(\"@sdks/lens/queries#alpha\");\nconst { PublicationMutations } = $(\"@sdks/lens/mutations#alpha\");\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\n\nconst PublicationAPI = {\n  fetch: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationRequest),\n    }).then((payload) => payload.body.data.publication || {});\n  },\n  fetchAll: (publicationsRequest) => {\n    return Client.graphql(Publication.PUBLICATIONS_QUERY, {\n      publicationsRequest: ApiHelper.clean(publicationsRequest),\n    }).then((payload) => {\n      return {\n        publications: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  stats: (Client, publicationStatsRequest) => {\n    return Client.graphql(Publication.PUBLICATION_STATS_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationStatsRequest.publication),\n      publicationStatsInputRequest: ApiHelper.clean(publicationStatsRequest.stats),\n      publicationStatsCountOpenActionArgsRequest: ApiHelper.clean(publicationStatsRequest.openAction)\n    }).then((payload) => {\n      return payload.body.data.result ||\u00a0[];\n    });\n  },\n  whoActed: (Client, whoActedOnPublicationRequest) => {\n    return Client.graphql(Publication.WHO_ACTED_ON_PUBLICATION_QUERY, {\n      whoActedOnPublicationRequest\n    }).then((payload) => {\n      return {\n        publications: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  comments: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_COMMENTS_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationRequest),\n    }).then((payload) => {\n      return {\n        comments: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  mirrors: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_MIRRORS_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationRequest),\n    }).then((payload) => {\n      return {\n        mirrors: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  quotes: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_QUOTES_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationRequest),\n    }).then((payload) => {\n      return {\n        quotes: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  addReaction: (Client, publicationReactionRequest) => \n    PublicationAPI._react(Client, PublicationMutations.PUBLICATION_ADD_REACTION_MUTATION, publicationReactionRequest),\n  removeReaction: (Client, publicationReactionRequest) => \n    PublicationAPI._react(Client, PublicationMutations.PUBLICATION_REMOVE_REACTION_MUTATION, publicationReactionRequest),\n  fetchReaction: (Client, whoReactedPublicationRequest) => {\n    return Client.graphql(Publication.WHO_REACTED_PUBLICATION_QUERY, {\n      whoReactedPublicationRequest\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  hide: (Client, hidePublicationRequest) => {\n    return Client.graphql(PublicationMutations.HIDE_PUBLICATION_MUTATION, {\n      hidePublicationRequest\n    }).then((_) => true).catch((_) => false);\n  },\n  report: (Client, reportPublicationRequest) => {\n    return Client.graphql(PublicationMutations.REPORT_PUBLICATION_MUTATION, {\n      reportPublicationRequest\n    }).then((_) => true).catch((_) => false);\n  },\n  _react: (Client, reactionMutation, publicationReactionRequest) => {\n    return Client.graphql(reactionMutation, {\n      publicationReactionRequest\n    }).then((_) => true).catch((_) => false);\n  },\n};\n\nreturn PublicationAPI;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.API.PublicationAPI", "fact_widget_deployments_id": "a51cbb7ed591cff498bceeba66b603c8", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}