{"tx_hash": "2sM3sVBFNFdtFSpGMopdBsB1HijvQ5BVQ8szX9CJ59fd", "action_id_social": "HXTPAmqvyEUD9AHqcqyd4ZMNzhjQkPTRFJxiuatTaAwq-0-widget", "block_id": 111791124, "block_timestamp": "2024-01-31T18:35:43.985Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.API.PublicationAPI", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Publication } = $(\"@sdks/lens/queries#alpha\");\nconst { PublicationMutations } = $(\"@sdks/lens/mutations#alpha\");\nconst { Constants } = $(\"@sdks/lens/definitions#alpha\");\nconst { ApiHelper } = $(\"@sdks/lens/utils#alpha\");\n\nconst PublicationAPI = {\n  fetch: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_QUERY, {\n      publicationRequest: ApiHelper.clean(publicationRequest),\n    }).then((payload) => payload.body.data.publication || {});\n  },\n  fetchAll: (Client, publicationsRequest) => {\n    return Client.graphql(Publication.PUBLICATIONS_QUERY, {\n      publicationsRequest: ApiHelper.clean(publicationsRequest),\n    }).then((payload) => {\n      return {\n        publications: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  stats: (Client, publicationStatsRequest) => {\n    return Client.graphql(Publication.PUBLICATION_STATS_QUERY, ApiHelper.clean({\n      publicationRequest: {\n        ...(ApiHelper.clean(publicationStatsRequest.publication || {}))\n      },\n      publicationStatsInputRequest: {\n        ...(ApiHelper.clean(publicationStatsRequest.stats || {}))\n      },\n      publicationStatsCountOpenActionArgsRequest: {\n        ...(ApiHelper.clean(publicationStatsRequest.openAction ||\u00a0{}))\n      }\n    })).then((payload) => {\n      return payload.body.data.result || [];\n    });\n  },\n  whoActed: (Client, whoActedOnPublicationRequest) => {\n    return Client.graphql(Publication.WHO_ACTED_ON_PUBLICATION_QUERY, {\n      whoActedOnPublicationRequest: ApiHelper.clean(whoActedOnPublicationRequest)\n    }).then((payload) => {\n      return {\n        publications: payload.body.data.result.items || [],\n        pagination: payload.body.data.result.pageInfo || {},\n      };\n    });\n  },\n  comments: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_COMMENTS_QUERY, {\n      publicationsRequest: {\n        where: {\n          commentOn: {\n            id: publicationRequest.forId\n          }\n        }\n      },\n    }).then((payload) => {\n      return {\n        comments: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  mirrors: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_MIRRORS_QUERY, {\n      publicationsRequest: {\n        where: {\n          mirrorOn: publicationRequest.forId\n        }\n      },\n    }).then((payload) => {\n      return {\n        mirrors: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  quotes: (Client, publicationRequest) => {\n    return Client.graphql(Publication.PUBLICATION_QUOTES_QUERY, {\n      publicationsRequest: {\n        where: {\n          quoteOn: publicationRequest.forId\n        }\n      },\n    }).then((payload) => {\n      return {\n        quotes: payload.body.data.publications.items || [],\n        pagination: payload.body.data.publications.pageInfo || {},\n      };\n    });\n  },\n  addReaction: (Client, publicationReactionRequest) => \n    PublicationAPI._react(Client, PublicationMutations.PUBLICATION_ADD_REACTION_MUTATION, publicationReactionRequest),\n  removeReaction: (Client, publicationReactionRequest) => \n    PublicationAPI._react(Client, PublicationMutations.PUBLICATION_REMOVE_REACTION_MUTATION, publicationReactionRequest),\n  fetchReaction: (Client, whoReactedPublicationRequest) => {\n    return Client.graphql(Publication.WHO_REACTED_PUBLICATION_QUERY, {\n      whoReactedPublicationRequest\n    }).then((payload) => {\n      return {\n        profiles: payload.body.data.items || [],\n        pagination: payload.body.data.pageInfo || {},\n      };\n    });\n  },\n  hide: (Client, hidePublicationRequest) => {\n    return Client.graphql(PublicationMutations.HIDE_PUBLICATION_MUTATION, {\n      hidePublicationRequest\n    }).then((_) => true).catch((_) => false);\n  },\n  report: (Client, reportPublicationRequest) => {\n    return Client.graphql(PublicationMutations.REPORT_PUBLICATION_MUTATION, {\n      reportPublicationRequest\n    }).then((_) => true).catch((_) => false);\n  },\n  _react: (Client, reactionMutation, publicationReactionRequest) => {\n    return Client.graphql(reactionMutation, {\n      publicationReactionRequest\n    }).then((_) => true).catch((_) => false);\n  },\n};\n\nreturn PublicationAPI;", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.API.PublicationAPI", "fact_widget_deployments_id": "f2cded84f2e84393f5d20a4eb650eec5", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}