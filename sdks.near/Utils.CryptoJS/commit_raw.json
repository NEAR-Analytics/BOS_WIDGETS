{"tx_hash": "5PRmGnv3tEBm82xqNGMAdofvdFESwB3HnWjxjuDfBJAS", "action_id_social": "646RtjybRXxhYCwgd8BA8GocB87Mu12Wb2QEvB68pZzs-0-widget", "block_id": 111235682, "block_timestamp": "2024-01-24T22:48:09.303Z", "signer_id": "sdks.near", "widget_name": "Utils.CryptoJS", "source_code": "const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { ExternalDependencyAdapter } = $(\"@sdks/abstracts\");\n\nreturn (Store, status) => {\n  const CryptoJS = {\n    ...ExternalDependencyAdapter(Store, status, \"CryptoJS\"),\n    package: \"crypto-js@4.2.0/crypto-js.js\",\n    aes: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"AES.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"AES.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    blowfish: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Blowfish.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Blowfish.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    des: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"DES.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"DES.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    evpkdf: (password, salt, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"EvpKDF\", [password, salt, config])\n      );\n    },\n    hmacmd5: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacMD5\", [message, key])\n      );\n    },\n    hmacripemd160: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacRIPEMD160\", [message, key])\n      );\n    },\n    hmacsha1: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA1\", [message, key])\n      );\n    },\n    hmacsha224: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA224\", [message, key])\n      );\n    },\n    hmacsha256: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA256\", [message, key])\n      );\n    },\n    hmacsha3: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA3\", [message, key])\n      );\n    },\n    hmacsha384: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA384\", [message, key])\n      );\n    },\n    hmacsha512: (message, key) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"HmacSHA512\", [message, key])\n      );\n    },\n    md5: (message, config) => {\n      return CryptoJS.request(CryptoJS.createRequest(\"MD5\", [message, config]));\n    },\n    pbkdf2: (password, salt, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"PBKDF2\", [password, salt, config])\n      );\n    },\n    rc4: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    rc4drop: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4Drop.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RC4Drop.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    ripemd160: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"RIPEMD160\", [message, config])\n      );\n    },\n    rabbit: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Rabbit.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"Rabbit.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n    rabbitlegacy: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RabbitLegacy.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"RabbitLegacy.decrypt\", [\n            ciphertext,\n            key,\n            config,\n          ])\n        );\n      },\n    },\n    sha1: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA1\", [message, config])\n      );\n    },\n    sha224: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA224\", [message, config])\n      );\n    },\n    sha256: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA256\", [message, config])\n      );\n    },\n    sha3: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA3\", [message, config])\n      );\n    },\n    sha384: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA384\", [message, config])\n      );\n    },\n    sha512: (message, config) => {\n      return CryptoJS.request(\n        CryptoJS.createRequest(\"SHA512\", [message, config])\n      );\n    },\n    tripledes: {\n      encrypt: (message, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"TripleDES.encrypt\", [message, key, config])\n        );\n      },\n      decrypt: (ciphertext, key, config) => {\n        return CryptoJS.request(\n          CryptoJS.createRequest(\"TripleDES.decrypt\", [ciphertext, key, config])\n        );\n      },\n    },\n  };\n\n  return CryptoJS;\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/Utils.CryptoJS", "fact_widget_deployments_id": "f703800ffd741fda92c30d09150d6091", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 16}