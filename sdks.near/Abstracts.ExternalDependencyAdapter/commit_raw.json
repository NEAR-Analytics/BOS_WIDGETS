{"tx_hash": "5GHM6S55VJSjZCTkQeeomnw5ksLHvvpfKwstX86zuPJ9", "action_id_social": "24BHq5PeRHwh472QhANmwnHR4UTVv2QGZTsW1xZxW6G6-0-widget", "block_id": 110916475, "block_timestamp": "2024-01-21T00:23:12.590Z", "signer_id": "sdks.near", "widget_name": "Abstracts.ExternalDependencyAdapter", "source_code": "return (Store, status) => {\n  const API = {\n    name: \"\",\n    instruction: \"\",\n    responses: {},\n    value: \"\",\n    init: () => {\n      Store.update({\n        [API.name]: {\n          ongoingRequest: {},\n          responses: {},\n        },\n      });\n\n      return API;\n    },\n    getRequest: () => {\n      return status[API.name].ongoingRequest;\n    },\n    createRequest: (instruction, value, returnType) => {\n      return {\n        index: status[API.name].responses[instruction]\n          ? Object.keys(status[API.name].responses[instruction]).length\n          : 0,\n        instruction,\n        value,\n        returnType: returnType || \"string\",\n      };\n    },\n    request: (request) => {\n      let newApi = status[API.name];\n      newApi.ongoingRequest = request;\n\n      Store.update({\n        [API.name]: newApi,\n      });\n\n      return new Promise((resolve, reject) => {\n        let newApi = status[API.name];\n\n        if (request.index == 0) {\n          newApi.responses[request.instruction] = {};\n        }\n\n        newApi.responses[request.instruction][request.index] = { resolve };\n        Store.update({ [API.name]: newApi });\n      });\n    },\n    setResponse: (response) => {\n      let parsedResponse = API.parseResponse(response);\n      API.notify(\n        parsedResponse.instruction,\n        parsedResponse.index,\n        parsedResponse.result\n      );\n\n      let newApi = status[API.name];\n      newApi.responses[parsedResponse.instruction][parsedResponse.index] =\n        parsedResponse;\n\n      Store.update({\n        [API.name]: newApi,\n      });\n    },\n    parseResponse: (response) => {\n      return {\n        ...response,\n        result:\n          response.returnType == \"string\"\n            ? response.result\n            : JSON.parse(response.result),\n      };\n    },\n    notify: (instruction, index, result) => {\n      status[API.name].responses[instruction][index].resolve(result);\n    },\n    isReady: () => {\n      return status[API.name].ready;\n    },\n    setAsReady: () => {\n      let newApi = status[API.name];\n      newApi.ready = true;\n      Store.update({\n        [API.name]: newApi,\n      });\n    },\n  };\n\n  return API.init();\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/Abstracts.ExternalDependencyAdapter", "fact_widget_deployments_id": "2eb0456d90299af088e2f6f0b64de29a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}