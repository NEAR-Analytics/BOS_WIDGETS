{"tx_hash": "2sM3sVBFNFdtFSpGMopdBsB1HijvQ5BVQ8szX9CJ59fd", "action_id_social": "HXTPAmqvyEUD9AHqcqyd4ZMNzhjQkPTRFJxiuatTaAwq-0-widget", "block_id": 111791124, "block_timestamp": "2024-01-31T18:35:43.985Z", "signer_id": "sdks.near", "widget_name": "Examples.Lens", "source_code": "const $ = VM.require(\"sdks.near/widget/Loader\");\nconst { LensSDK } = $(\"@sdks/lens-sdk\");\nconst { Constants } = $(\"@sdks/lens/definitions\");\n\nState.init({\n  evmAddress: \"\",\n  handleToCreate: \"\",\n  lastAuthenticationResult: \"\",\n  lastProfileResult: \"\",\n  lastProfileWriteResult: \"\",\n  lastPublicationReadResult: \"\",\n  lastPublicationWriteResult: \"\",\n  lastPublicationSearchResult: \"\",\n  lastProfileSearchResult: \"\",\n  lastNotificationResult: \"\",\n  lastTransactionResult: \"\",\n  lastCustomRequestResult: \"\",\n  handleCreated: null,\n  alive: null,\n  profiles: [],\n  login: null,\n  verify: null,\n  refresh: null,\n  list: null,\n  revoke: null,\n  customProfileHandle: \"lens/mattb\",\n  searchProfileTerm: \"stani\",\n  searchPublicationTerm: \"NEAR Protocol\",\n  transactionHash: \"0xa46ff9fe2c68c0c5ff4347b449bf73373733d01a0377dc44bb1c684c2e702ca0\",\n  transactionId: \"\",\n  testPublication: \"0x01-0x02c5\",\n  onlyOnce: true,\n  customRequest: `query Profile($request: ProfileRequest!) {\n  profile(request: $request) {\n    operations {\n      isFollowedByMe {\n        value\n      }\n    }\n  }\n}`,\n  customRequestParameters: `{\n  \"request\": {\n    \"forHandle\": \"lens/mattb\"\n  }\n}`\n})\n\nLensSDK = new LensSDK(State, state);\n\nif (!state.evmAddress && Ethers.provider()) {\n  Ethers.provider().send(\"eth_requestAccounts\", []).then(([address]) => {\n    if (address) {\n      State.update({evmAddress: address});\n    }  \n  });\n}\n\nif (LensSDK.isTestnet() && state.onlyOnce) {\n  State.update({\n    customProfileHandle: \"test/mattb\",\n    searchPublicationTerm: \"test\",\n    testPublication: \"0xa0-0x02-DA-25690797\",\n    onlyOnce: false\n  });\n}\n\nconst Panel = styled.div`\n  padding:20px;\n  border:1px solid rgba(0,0,0,.1);\n  border-radius:10px;\n  margin-bottom:20px;\n\n  button {\n    cursor:pointer;\n    margin: 10px 3px;\n    padding:7px 20px;\n    border-radius:30px;\n    border:0;\n    background-color:rgba(0,0,0,.1);\n    font-weight:bold;\n    color:#000;\n    font-size:.8rem;\n    box-shadow: 0 0 0 0px rgba(0,0,0,.05);\n    transition: all .2s;\n\n    &:hover {\n      transition: all .2s;\n      box-shadow: 0 0 0 3px rgba(0,0,0,.1);\n    }\n  }\n\n  input {\n    max-width:300px;\n    margin: 10px 0;\n    border:0;\n    border:2px solid rgba(0,0,0,.05);\n    padding:10px 20px;\n  }\n\n  textarea {\n    display:block;\n    width:100%;\n    height:250px;\n    padding:0;\n    margin: 10px 0;\n    border:0;\n    border:2px solid rgba(0,0,0,.05);\n    padding:10px;\n  }\n\n  p {\n    display:flex;\n    align-items:center;\n    font-size:1.2rem;\n    font-weight:bold;\n    padding:0;\n    margin:0;\n    margin-bottom:15px;\n\n    .ball {\n      display:inline-block;\n      width:10px;\n      height:10px;\n      border-radius:100%;\n      margin-right:10px;\n\n      &.green {\n        background-color:lightgreen;\n      }\n\n      &.red {\n        background-color:red;\n      }\n    }\n  }\n`;\n\nconst Loading = styled.div`\n  width:100%;\n  height:100%;\n  position:fixed;\n  top:0;\n  left:0;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  opacity:0;\n  transition: all .2s;\n  pointer-events:none;\n\n  &.show {\n    transition: all .2s;\n    opacity:1;\n  }\n\n  @keyframes rotation {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n  }\n\n  .spinner {\n    width: 40px;\n    height: 40px;\n    border: 5px solid #1A1D20;\n    border-bottom-color: #C3E4CD;\n    border-radius: 50%;\n    display: inline-block;\n    box-sizing: border-box;\n    animation: rotation .5s linear infinite;\n  }\n`;\n\nconst Warning = styled.div`\n  display:table;\n  font-size:.8rem;\n  margin:10px 0;\n  background-color:#F8F3D6;\n  border:1px solid #F2EAC4;\n  padding:10px;\n  border-radius:10px;\n  font-weight:bold;\n`;\n\nconst Response = styled.div`\n  width:100%;\n  height:300px;\n  overflow-y:auto;\n  border-radius:10px;\n  background-color:rgba(0,0,0,.06);\n  border:1px solid rgba(0,0,0,.05);\n  color:rgba(0,0,0,.5);\n  font-size:.8rem;\n  font-weight:bold;\n  padding:20px;\n  overflow-wrap:break-word;\n`;\n\nreturn (\n  <>\n    <Loading className={`${LensSDK.isRequestInProgress() ? \"show\" : \"\"}`}>\n      <div className=\"spinner\">\n      </div>\n    </Loading>\n    <h2 style={{margin: \"20px 0\", fontWeight: \"bold\"}}>Lens SDK {LensSDK.getVersion()} API Dashboard <button style={{marginLeft: \"10px\"}} onClick={ () => LensSDK.isTestnet() ? LensSDK.enableMainnet() : LensSDK.enableTestnet() }>\n      Switch to {LensSDK.isTestnet() ? \"Mainnet\" : \"Testnet\"}\n    </button></h2>\n    {LensSDK.isTestnet() && <Warning>Warning: Test environment requests might require different parameters.</Warning>}\n    <Panel>\n      <p>Health</p>\n      <button onClick={() => {\n        LensSDK.health.ping().then((alive) => {\n          State.update({alive});\n        })\n      }}>Check API status</button>\n      <br/><br/>\n      <Response>\n        {null === state.alive && \"Nothing to show yet\"}\n        {state.alive && \"Alive\"}\n        {false === state.alive && \"Not alive\"}\n      </Response>\n    </Panel>\n    {LensSDK.isTestnet() && <Panel>\n      <p>Create a Test Lens Profile</p>\n      <Warning>Important: You need to connect your wallet</Warning>\n      <Web3Connect /><br/><br/>\n      Write down a name (without .lens or .testnet)\n      <br/><br/>\n      <input placeholder=\"Enter handle\" value={state.handleToCreate} onChange={(e) => State.update({handleToCreate: e.target.value})} />\n      <button onClick={() => {\n        LensSDK.profile.create({\n          handle: state.handleToCreate,\n          to: state.evmAddress\n        }).then((result) => {\n          State.update({handleCreated: result});\n        });\n      }}>Create Lens Handle</button>\n      <br/>\n\n      <Response>\n        {state.handleCreated !== null && true === state.handleCreated ? \"Handle created successfully\" : \"\"}\n        {state.handleCreated !== null && !state.handleCreated ? \"Error creating handle, might be taken\" : \"\"}\n      </Response>\n    </Panel>}\n    <Panel id=\"authenticate\">\n      <p><span className={`ball ${ LensSDK.isAuthenticated() ? \"green\" : \"red\"}`}></span> Authentication</p>\n      <Warning>Warning: Some endpoints require to be authenticated to work properly (Verify, refresh authentication...)</Warning>\n      <Web3Connect />\n      <button onClick={() => {\n        LensSDK.authentication.profiles({\n          for: state.evmAddress\n        }).then((profilesManaged) => {\n          State.update({lastAuthenticationResult: profilesManaged, profiles: profilesManaged})\n        })\n      }}>Get profiles managed</button>\n      <button onClick={() => {\n        LensSDK.authentication.profiles({\n          for: state.evmAddress\n        }).then((profiles) => {\n          LensSDK.authentication.login({\n            signedBy: state.evmAddress,\n            for: profiles[0].id\n          }).then((result) => {\n            State.update({lastAuthenticationResult: result, login: result});\n          })\n        })\n      }}>Authenticate on first profile</button>\n      <button onClick={() => {\n        State.update({lastAuthenticationResult: LensSDK.getCurrentProfile()});\n      }}>Get current profile</button>\n      <button onClick={() => {\n        State.update({lastAuthenticationResult: LensSDK.getAccessToken()});\n      }}>Get authentication token</button>\n      <button onClick={() => {\n        LensSDK.authentication.verify().then((result) => {\n          State.update({lastAuthenticationResult: result, verify: result});\n        })\n      }}>Verify authentication</button>\n      <button onClick={() => {\n        LensSDK.authentication.refresh().then((result) => {\n          State.update({lastAuthenticationResult: result, refresh: result});\n        })\n      }}>Refresh authentication</button>\n       <button onClick={() => {\n        LensSDK.authentication.list().then((result) => {\n          State.update({lastAuthenticationResult: result, list: result});\n        })\n      }}>List authentications</button>\n\n      <button onClick={() => {\n        LensSDK.authentication.revoke({\n          authorizationId: state.list[0].authorizationId\n        }).then((result) => {\n          State.update({lastAuthenticationResult: result, revoke: result});\n        })\n      }}>Revoke authentication</button>\n\n      <button onClick={() => {\n        LensSDK.authentication.logout();\n        State.update({lastAuthenticationResult: null});\n      }}>Disconnect authentication</button>\n      \n      <br/><br/>\n      <Response>\n        {state.lastAuthenticationResult ? JSON.stringify(state.lastAuthenticationResult) : \"Nothing to show yet\"}\n      </Response>\n    </Panel>\n    <Panel>\n      <p>Profile</p>\n      <Panel>\n        <p>Read</p>\n        <Warning>Warning: Some endpoints require to be authenticated to work properly (Action History, isFollowedByMe...)</Warning>\n        <input placeholder=\"Profile full handle\" value={state.customProfileHandle} onChange={(e) => State.update({customProfileHandle: e.target.value})} />\n        <br/>\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            State.update({lastProfileResult: profile});\n          })\n        }}>Profile</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetchAll({\n            where: {\n              handles: [state.customProfileHandle]\n            }\n          }).then((profiles) => {\n            State.update({lastProfileResult: profiles});\n          })\n        }}>Profiles</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            LensSDK.profile.following({\n              for: profile.id\n            }).then((paginatedResult) => {\n              State.update({lastProfileResult: paginatedResult});\n            });\n          });\n        }}>Following</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            LensSDK.profile.followers({\n              of: profile.id\n            }).then((paginatedResult) => {\n              State.update({lastProfileResult: paginatedResult});\n            });\n          });\n        }}>Followers</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            LensSDK.profile.stats({\n              forProfileId: profile.id || LensSDK.getProfileId() || \"0x01ccf2\"\n            }).then((stats) => {\n              State.update({lastProfileResult: stats});\n            });\n          });\n        }}>Stats</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            LensSDK.profile.recommendations({\n              for: profile.id || LensSDK.getProfileId() || \"0x01ccf2\"\n            }).then((recommendations) => {\n              // Too many recommendations, picking just one for testing purposes\n              let randomProfile = Math.floor(Math.random() * recommendations.profiles.length);\n\n              State.update({lastProfileResult: recommendations.profiles[randomProfile]});\n            });\n          });\n        }}>Profile Recommendations</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            LensSDK.profile.interests({\n              forProfileId: profile.id || LensSDK.getProfileId() || \"0x01ccf2\"\n            }).then((interests) => {\n\n              State.update({lastProfileResult: interests});\n            });\n          });\n        }}>Interests</button>\n\n        <button onClick={() => {\n          LensSDK.profile.fetch({\n            forHandle: state.customProfileHandle\n          }).then((profile) => {\n            LensSDK.profile.onChainIdentity({\n              forProfileId: profile.id || LensSDK.getProfileId() || \"0x01ccf2\"\n            }).then((interests) => {\n              State.update({lastProfileResult: interests});\n            });\n          });\n        }}>On-Chain Identity</button>\n\n        <button onClick={() => {\n          LensSDK.profile.isHandleAvailable(state.customProfileHandle).then((status) => {\n            State.update({lastProfileResult: status.toString()});\n          })\n        }}>Is handle available</button>\n\n        <button onClick={() => {\n          LensSDK.profile.history({\n            forProfileId: LensSDK.getProfileId()\n          }).then((interests) => {\n            State.update({lastProfileResult: interests});\n          });\n        }}>Action History</button>\n\n        <button onClick={() => {\n          LensSDK.profile.isFollowedByMe({\n            forHandle: state.customProfileHandle\n          }).then((isFollowedByMe) => {\n            State.update({lastProfileResult: isFollowedByMe.toString()});\n          });\n        }}>Profile is followed by me</button>\n\n        <button onClick={() => {\n          LensSDK.profile.isFollowingMe({\n            forHandle: state.customProfileHandle\n          }).then((isFollowingMe) => {\n            State.update({lastProfileResult: isFollowingMe.toString()});\n          });\n        }}>Profile is following me</button>\n\n        <button onClick={() => {\n          LensSDK.profile.isBlockedByMe({\n            forHandle: state.customProfileHandle\n          }).then((isBlockedByMe) => {\n            State.update({lastProfileResult: isBlockedByMe.toString()});\n          });\n        }}>Profile is blocked by me</button>\n\n        <button onClick={() => {\n          LensSDK.profile.canFollow({\n            forHandle: state.customProfileHandle\n          }).then((canFollow) => {\n            State.update({lastProfileResult: canFollow.toString()});\n          });\n        }}>Can follow profile</button>\n\n        <button onClick={() => {\n          LensSDK.profile.canUnfollow({\n            forHandle: state.customProfileHandle\n          }).then((canUnfollow) => {\n            State.update({lastProfileResult: canUnfollow.toString()});\n          });\n        }}>Can unfollow profile</button>\n\n        <button onClick={() => {\n          LensSDK.profile.canUnblock({\n            forHandle: state.customProfileHandle\n          }).then((canUnblock) => {\n            State.update({lastProfileResult: canUnblock.toString()});\n          });\n        }}>Can unblock profile</button>\n\n        <button onClick={() => {\n          LensSDK.profile.hasBlockedMe({\n            forHandle: state.customProfileHandle\n          }).then((hasBlockedMe) => {\n            State.update({lastProfileResult: hasBlockedMe.toString()});\n          });\n        }}>Profile has blocked me</button>\n\n        <br/><br/>\n        <Response>\n          {state.lastProfileResult ? JSON.stringify(state.lastProfileResult) : \"Nothing to show yet\"}\n        </Response>\n      </Panel>\n      <br/><br/>\n      <Panel>\n        <p>Write</p>\n        <Warning>Warning: <a href=\"#authenticate\">Authentication</a> required. Requests perform real actions.</Warning>\n        <button onClick={() => {\n          LensSDK.profile.block({\n            profiles: [\"0x73b1\"]\n          }).then((result) => {\n            State.update({lastProfileWriteResult: result});\n          });\n        }}>Block profile</button>\n\n        <button onClick={() => {\n          LensSDK.profile.report({\n            for: \"0x73b1\",\n            reason: {\n              spamReason: {\n                reason: \"SPAM\",\n                subreason: \"REPETITIVE\"\n              }\n            },\n            additionalComments: \"Test API Integration\"\n          }).then((result) => {\n            State.update({lastProfileWriteResult: result.toString()});\n          });\n        }}>Report profile</button>\n\n        <br/><br/>\n        <Response>\n          {state.lastProfileWriteResult ? JSON.stringify(state.lastProfileWriteResult) : \"Nothing to show yet\"}\n        </Response>\n      </Panel>\n    </Panel>\n    <Panel>\n      <p>Publication</p>\n      <Warning>Warning: Some endpoints require to be authenticated to work properly</Warning>\n      <Panel>\n        <p>Read</p>\n        <button onClick={() => {\n          LensSDK.publication.fetch({\n            forId: state.testPublication\n          }).then((publication) => {\n            State.update({lastPublicationReadResult: publication});\n          });\n        }}>Publication</button>\n        <button onClick={() => {\n          LensSDK.publication.fetchAll({\n            where: {\n              from: LensSDK.getProfileId() || \"0x01\"\n            }\n          }).then((publication) => {\n            State.update({lastPublicationReadResult: publication});\n          });\n        }}>Publications</button>\n\n        <button onClick={() => {\n          LensSDK.publication.stats({\n            publication: {\n              forId: state.testPublication\n            },\n            stats: {\n              customFilters: [\"GARDENERS\"],\n              metadata: {\n                locale: \"en\",\n                mainContentFocus: \"TEXT_ONLY\"\n              }\n            }\n          }).then((publication) => {\n            State.update({lastPublicationReadResult: publication});\n          });\n        }}>Stats</button>\n\n        <button onClick={() => {\n          LensSDK.publication.whoActed({\n            on: state.testPublication\n          }).then((profiles) => {\n            State.update({lastPublicationReadResult: profiles});\n          });\n        }}>Who acted</button>\n\n        <button onClick={() => {\n          LensSDK.publication.comments({\n            forId: state.testPublication\n          }).then((comments) => {\n            State.update({lastPublicationReadResult: comments});\n          });\n        }}>Comments</button>\n\n        <button onClick={() => {\n          LensSDK.publication.mirrors({\n            forId: state.testPublication\n          }).then((mirrors) => {\n            State.update({lastPublicationReadResult: mirrors});\n          });\n        }}>Mirrors</button>\n\n        <button onClick={() => {\n          LensSDK.publication.quotes({\n            forId: state.testPublication\n          }).then((quotes) => {\n            State.update({lastPublicationReadResult: quotes});\n          });\n        }}>Quotes</button>\n        <br/><br/>\n\n        <Response>\n          {state.lastPublicationReadResult ? JSON.stringify(state.lastPublicationReadResult) : \"Nothing to show yet\"}\n        </Response>\n      </Panel>\n\n      <Panel>\n        <p>Write</p>\n        <button onClick={() => {\n            LensSDK.publication.reactions.add({\n              reaction: \"UPVOTE\",\n              for: state.testPublication\n            }).then((result) => {\n              State.update({lastPublicationWriteResult: result.toString()});\n            });\n          }}>Add reaction (Up Vote)</button>\n\n          <button onClick={() => {\n            LensSDK.publication.reactions.remove({\n              reaction: \"UPVOTE\",\n              for: state.testPublication\n            }).then((result) => {\n              State.update({lastPublicationWriteResult: result.toString()});\n            });\n          }}>Remove reaction (Up vote)</button>\n\n          <button onClick={() => {\n            LensSDK.publication.reactions.add({\n              reaction: \"DOWNVOTE\",\n              for: state.testPublication\n            }).then((result) => {\n              State.update({lastPublicationWriteResult: result.toString()});\n            });\n          }}>Add reaction (Down Vote)</button>\n\n          <button onClick={() => {\n            LensSDK.publication.reactions.remove({\n              reaction: \"DOWNVOTE\",\n              for: state.testPublication\n            }).then((result) => {\n              State.update({lastPublicationWriteResult: result.toString()});\n            });\n          }}>Remove reaction (Down vote)</button>\n\n          <button onClick={() => {\n            LensSDK.publication.hide({\n              for: state.testPublication\n            }).then((result) => {\n              State.update({lastPublicationWriteResult: result});\n            });\n          }}>Hide post</button>\n\n          <button onClick={() => {\n            LensSDK.publication.report({\n              for: state.testPublication,\n              reason: {\n                spamReason: {\n                  reason: \"SPAM\",\n                  subreason: \"REPETITIVE\"\n                }\n              },\n              additionalComments: \"Test API Integration\"\n            }).then((result) => {\n              State.update({lastPublicationWriteResult: result});\n            });\n          }}>Report post</button>\n          \n          <br/><br/>\n          <Response>\n            {state.lastPublicationWriteResult ? JSON.stringify(state.lastPublicationWriteResult) : \"Nothing to show yet\"}\n          </Response>\n      </Panel>\n    </Panel>\n\n    <Panel>\n      <p>Search</p>\n\n      <Panel>\n        <p>Search profiles</p>\n        <input type=\"text\" value={state.searchProfileTerm} onChange={(e) => State.update({ searchProfileTerm: e.target.value })}/>\n        <button onClick={() => {\n          LensSDK.search.profiles({\n            query: state.searchProfileTerm\n          }).then((searchResult) => {\n            State.update({lastProfileSearchResult: searchResult});\n          });\n        }}>Search profiles</button>\n        <br/><br/>\n        \n        <Response>\n          {state.lastProfileSearchResult ? JSON.stringify(state.lastProfileSearchResult) : \"Nothing to show yet\"}\n        </Response>\n      </Panel>\n\n      <Panel>\n        <p>Search publications</p>\n        <input type=\"text\" value={state.searchPublicationTerm} onChange={(e) => State.update({ searchPublicationTerm: e.target.value })}/>\n        <button onClick={() => {\n          LensSDK.search.publications({\n            limit: Constants.API_REQUEST_LIMITS.TEN,\n            query: state.searchPublicationTerm,\n            where: {\n              metadata: {\n                locale: \"en\"\n              }\n            }\n          }).then((searchResult) => {\n            State.update({lastPublicationSearchResult: searchResult});\n          });\n        }}>Search publications</button>\n        <br/><br/>\n        \n        <Response>\n          {state.lastPublicationSearchResult ? JSON.stringify(state.lastPublicationSearchResult) : \"Nothing to show yet\"}\n        </Response>\n      </Panel>\n    </Panel>\n    <Panel>\n      <p>Notifications</p>\n      <Warning>Warning: To fetch notifications you need to be authenticated</Warning>\n      <button onClick={() => {\n          LensSDK.notifications.fetch({\n            where: {\n              customFilters: [\"GARDENERS\"]\n            }\n          }).then((notifications) => {\n            State.update({lastNotificationResult: notifications});\n          });\n        }}>Fetch</button>\n\n        <br/><br/>\n        <Response>\n          {state.lastNotificationResult ? JSON.stringify(state.lastNotificationResult) : \"Nothing to show yet\"}\n        </Response>\n    </Panel>\n    <Panel>\n      <p>Transactions</p>\n      <input type=\"text\" value={state.transactionHash} />\n      <button onClick={() => {\n        LensSDK.transaction.status({\n          forTxHash: state.transactionHash\n        }).then((result) => {\n          State.update({lastTransactionResult: result});\n        });\n      }}>Transaction status</button>\n      <br/><br/>\n\n      <input type=\"text\" placeholder=\"Relay Transaction ID\" value={state.transactionId} />\n      <button onClick={() => {\n        LensSDK.transaction.txIdToTxHash({\n          for: state.transactionId\n        }).then((result) => {\n          State.update({lastTransactionResult: result.toString()});\n        });\n      }}>Transaction ID to Transaction Hash</button>\n\n      <br/><br/>\n      <Response>\n        {state.lastTransactionResult ? JSON.stringify(state.lastTransactionResult) : \"Nothing to show yet\"}\n      </Response>\n    </Panel>\n    <Panel>\n      <p>Custom request</p>\n      <textarea placeholder=\"Graphql query/mutation\" value={state.customRequest} onChange={(e) => State.update({customRequest: e.target.value})}></textarea>\n      <textarea placeholder=\"Request parameters\" value={state.customRequestParameters} onChange={(e) => State.update({customRequestParameters: e.target.value})}></textarea>\n      <button onClick={() => {\n        LensSDK.customRequest(state.customRequest, JSON.parse(state.customRequestParameters)).then((result) => {\n          State.update({lastCustomRequestResult: result});\n        });\n      }}>Send request</button>\n      <br/><br/>\n      <Response>\n        {state.lastCustomRequestResult ? JSON.stringify(state.lastCustomRequestResult) : \"Nothing to show yet\"}\n      </Response>\n    </Panel>\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/Examples.Lens", "fact_widget_deployments_id": "a06906ebf9db891e4990efa6954d1f1f", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}