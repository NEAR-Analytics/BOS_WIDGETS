{"tx_hash": "29jPMCzKFr13VxvE2bNNaiGpzJtYfgQM3qthN7emFvPF", "action_id_social": "4YTxksz3sPcj9TozttooJDggYo4sr93AJhW6hT6PspRX-0-widget", "block_id": 110104379, "block_timestamp": "2024-01-11T00:38:54.617Z", "signer_id": "sdks.near", "widget_name": "Loader", "source_code": "let TYPES = {};\nconst TYPE_LIBRARY = \"@\";\nconst TYPE_IMAGE = \"img:\";\nconst TYPE_JSON = \"json:\";\nconst TYPE_URL = \"url:\";\nTYPES[TYPE_LIBRARY] = \"libs\";\nTYPES[TYPE_IMAGE] = \"images\";\nTYPES[TYPE_JSON] = \"data\";\nTYPES[TYPE_URL] = \"links\";\n\nconst loaders = {\n  string: (account, dependency) => {\n    let result = {};\n    result[dependency.split(\".\").pop()] = VM.require(\n      `${account}/widget/${dependency}`\n    );\n    return result;\n  },\n  object: (account, dependencies) => {\n    let result = {};\n\n    if (Array.isArray(dependencies)) {\n      dependencies.map(\n        (dependency) =>\n          (result[dependency.split(\".\").pop()] = VM.require(\n            `${account}/widget/${dependency}`\n          ))\n      );\n    } else {\n      Object.keys(dependencies).map((containerName) =>\n        dependencies[containerName].map(\n          (dependency) =>\n            (result[dependency.split(\".\").pop()] = VM.require(\n              `${account}/widget/${dependency}`\n            ))\n        )\n      );\n    }\n\n    return result;\n  },\n  void: () => {},\n};\n\nconst getType = (type) => (type in TYPES ? TYPES[type] : null);\nconst getScope = (namespace) =>\n  namespace[0] in TYPES\n    ? namespace[0]\n    : namespace.substring(0, namespace.indexOf(\":\") + 1) in TYPES\n    ? namespace.substring(0, namespace.indexOf(\":\") + 1)\n    : null;\nconst getAccount = (scope, namespace) =>\n  `${namespace.substring(scope.length, namespace.indexOf(\"/\"))}.near`;\nconst getPath = (namespace) =>\n  namespace.substring(namespace.indexOf(\"/\") + 1, namespace.length);\nconst parseRequest = (namespace) => [\n  getAccount(getScope(namespace), namespace),\n  getType(getScope(namespace)),\n  getPath(namespace),\n];\nconst getManifest = (account) => VM.require(`${account}/widget/Manifest`);\nconst getResource = (manifest, resourceType) =>\n  resourceType in manifest ? manifest[resourceType] : {};\nconst getDependencies = (resource, path) =>\n  path.split(\"/\").reduce((path, nextPath) => (path || {})[nextPath], resource);\nconst loadDependencies = (account, dependencies) =>\n  loaders[typeof dependencies !== \"undefined\" ? typeof dependencies : \"void\"](\n    account,\n    dependencies\n  );\nconst load = (account, resourceType, path) =>\n  loadDependencies(\n    account,\n    getDependencies(getResource(getManifest(account) || {}, resourceType), path)\n  );\n\nreturn (namespace) => load(...parseRequest(namespace));\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/Loader", "fact_widget_deployments_id": "3dc5897c02baf1e36da85a6c0c584e19", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 10}