{"tx_hash": "D2rm6LykMABxL8hQpSFFXCdFM6P3CL4xcYPHF1uib5hj", "action_id_social": "9fSFxr5eb8NGkFQxZ8QA7S2hDpqnd4DyRb1CaGtWGGbY-0-widget", "block_id": 111495239, "block_timestamp": "2024-01-28T04:00:51.110Z", "signer_id": "sdks.near", "widget_name": "Loader", "source_code": null, "metadata": {"description": "$Loader is a library that allows injecting dependencies from your or other users' account into components in a seamlessly way.\n\nTo start using it, just simply place this code in the top of your component:\n```\nconst $ = VM.require(\"sdks.near/widget/Loader\");\n```\n\n## How does it work?\nWhen you work with libraries, you need a way to keep your dependencies structured in a way that can be easily accessed by you or anyone that is building with it. To do so, you need a way to define what's the library structure and the components that compose it, and that's where the `Manifest` file comes in.\n\n## Manifest\nThe `Manifest` file is a JavaScript object component that needs to be placed at the root level of your account. This way, you can expose the libraries you have available and its structure, so `$Loader` is able to inject them on-demand.\n\nExample\n```\nreturn {\n  libs: {\n    \"eth-signer\": \"SDKs.EthereumSigner.Main\",\n    lens: {\n      definitions: [\"SDKs.Lens.Constants\", \"SDKs.Lens.Interfaces\"],\n      api: [\"SDKs.Lens.API.AuthAPI\", \"SDKs.Lens.API.HealthAPI\"],\n      queries: [\"SDKs.Lens.Queries.Auth\", \"SDKs.Lens.Queries.Health\"],\n      sdk: [\"SDKs.Lens.Main\"],\n    },\n    \"light-client\": [\"SDKs.LightClient\"],\n  },\n  versions: {\n    \"light-client\": {\n        alpha: \"111491053\",\n        beta: \"111522001\"\n    }\n  }\n};\n```\n\nThis `Manifest` exposes the `eth-signer`, `lens` and `light-client` libraries.\n\n# Types\n`$Loader` library is not meant to be able to load only dependencies, but also different types of data. For that reason, the `Manifest` object schema looks the following way:\n- `libs`: Here you can define the structure of your libraries\n- `images`: Here you can define images in your preferred way (IPFS URL, base64, NEAR Social's FS...)\n- `links`: Here you can define links to other websites or components that are commonly accessed by other people. This way you can ensure everyone has the same link, even if you change it!\n- `data`: Here you can define JavaScript objects with static data that can be later leveraged in a dApp\n- `releases`: This index allows you to define what are the versions available for the dependencies by linking it with the block height\n\n## Dependency injection\nIn order to inject resources to your component, you just have to pass `$Loader` the namespace of the resource you want to load. Namespaces have the following format:\n`<scope><account>/<resource>#<release>`\nNotes:  The account name does not include the `.near` fragment. Specifying the release is optional, by default it loads latest version if not specified.\n\nExample\n```\n// Loading $Loader\nconst $ = VM.require(\"sdks.near/widget/Loader\");\n\n// Importing libraries from skds.near\nconst { EthereumSigner } = $(\"@sdks/eth-signer\");\nconst { AuthAPI, HealthAPI } = $(\"@sdks/lens/api\");\n```\n\nIn the example, we load the `EthereumSigner`, `AuthAPI` and `HealthAPI` from the `sdks.near` account.\n\n# Namespace structure\n- `<scope>`: It supports the following scopes\n  - `@` - Library scope. Loads the dependencies under the `libs` index from the `Manifest` file\n  - `img:` - Images scope. Loads the content under the `images` index from the `Manifest` file\n  - `url:` - Links scope. Loads the content under the `links` index from the `Manifest` file\n  - `json:` - JSON scope. Loads the content under the `data` index from the `Manifest` file\n- `<account>`: The NEAR account you want to load the resource from, without including the `.near`\n- `<resource>`: The name of the library. This name is the index of the `libs` object first level from the `Manifest` file\n- `#<release>`: The specific release. Optional parameter. By default is the latest version. If the version is specified in the Manifest file, the library will get loaded at specific block height.", "fork_of": "sdks.near/widget/Loader@111492945", "image": {"ipfs_cid": "bafkreidxqfzerdlams2iklnyodbptkdzugzcerh6z36bf2l3vcukr5vdru"}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/Loader", "fact_widget_deployments_id": "0933e1f3da0f2215d11b9ba8d65b70d1", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 18}