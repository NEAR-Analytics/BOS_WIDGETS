{"tx_hash": "3QaetaqsAsAhxzSGqjRoeFmZhiwNGwX5x8iCkkQcRXaw", "action_id_social": "3zNEh79K8QJ4wyxFaT9XYvjzqLQWYzawYb7hfjSEpm4j-0-widget", "block_id": 110169451, "block_timestamp": "2024-01-11T20:02:45.625Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.API.AuthAPI", "source_code": "const AUTH_CHALLENGE_QUERY = \"\";\nconst AUTH_AUTHENTICATE_QUERY = \"\";\n\nreturn {\n  login: (Client, { signedBy, profileId }) => {\n    return new Promise((resolve, reject) => {\n      return Client.graphql(AUTH_CHALLENGE_QUERY, {\n        signedBy,\n        for: profileId,\n      }).then((data) => {\n        let challengeId = data.body.data.challenge.id;\n        let challengeText = data.body.data.challenge.text;\n        return Ethers.getProvider()\n          .signMessage(challengeText)\n          .then((signature) => {\n            return Client.graphql(AUTH_AUTHENTICATE_QUERY, {\n              id: challengeId,\n              signature,\n            }).then((payload) => {\n              return (\n                payload.body.data.authenticate || {\n                  accessToken: \"\",\n                  refreshToken: \"\",\n                }\n              );\n            });\n          });\n      });\n    });\n  },\n  refresh: () => {},\n  revoke: () => {},\n  verify: () => {},\n  list: () => {},\n};\n", "metadata": {"platform": "jutsu.ai"}, "branch": {"draft": null}, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.API.AuthAPI", "fact_widget_deployments_id": "ce587408b4f261bc4827e7a4ebfa1d73", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}