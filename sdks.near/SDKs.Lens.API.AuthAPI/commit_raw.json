{"tx_hash": "89Sg3HvjcrbufEYmq47NdDiEaTbkkpMMhjfrNYDdEb3Z", "action_id_social": "9xHfpTwtrsGPXK1h3MyZxGHH2t9UTsnYb99rb6jZoQbm-0-widget", "block_id": 110311927, "block_timestamp": "2024-01-13T14:46:57.016Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.API.AuthAPI", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Auth } = $(\"@sdks/lens/queries\");\nconst { Interfaces } = $(\"@sdks/lens/definitions\");\n\nreturn {\n  profiles: (Client, profilesManagedRequest) => {\n    return Client.graphql(\n      Auth.PROFILES_MANAGED_QUERY,\n      profilesManagedRequest\n    ).then((payload) => payload.body.data.profilesManaged.items || []);\n  },\n  login: (Client, signedChallengeRequest) => {\n    return new Promise((resolve, reject) => {\n      return Client.graphql(Auth.CHALLENGE_QUERY, signedChallengeRequest).then(\n        (data) => {\n          const challengeId = data.body.data.challenge.id;\n          const challengeText = data.body.data.challenge.text;\n          return Ethers.getProvider()\n            .signMessage(challengeText)\n            .then((signature) => {\n              return Client.graphql(Auth.AUTHENTICATE_QUERY, {\n                id: challengeId,\n                signature,\n              }).then((payload) => {\n                return (\n                  payload.body.data.authenticate || Interfaces.AUTH_INTERFACE\n                );\n              });\n            });\n        }\n      );\n    });\n  },\n  refresh: (Client, refreshRequest) => {\n    return Client.graphql(Auth.PROFILES_MANAGED_QUERY, refreshRequest).then(\n      (payload) => payload.body.data.refresh || Interfaces.AUTH_INTERFACE\n    );\n  },\n  revoke: (Client, revokeAuthenticationRequest) => {\n    return Client.graphql(\n      Auth.REVOKE_AUTHENTICATION_QUERY,\n      revokeAuthenticationRequest\n    ).then((payload) => true);\n  },\n  list: (Client, approvedAuthenticationsRequest) => {\n    return Client.graphql(\n      Auth.APPROVED_AUTHENTICATIONS_QUERY,\n      approvedAuthenticationsRequest\n    ).then((payload) => payload.body.data.approvedAuthentication.items || []);\n  },\n  verify: (Client, verifyTokenRequest) => {\n    return Client.graphql(\n      Auth.VERIFY_TOKEN_REQUEST,\n      verifyTokenRequest\n    ).then((payload) => (payload.body.data.verify || false) == true);\n  },\n};\n", "metadata": {"image": {}}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.API.AuthAPI", "fact_widget_deployments_id": "8a3e7711a56f84908bd2ca8dd8ca92db", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}