{"tx_hash": "Axn2iZTJF44DcoCL4ucmkYfVtMNLpvUQVFJPWwSWjXvU", "action_id_social": "GFy6DK63T63PpWarJqUJbfLSEKx65VQd2fKLiLZWKd4K-0-widget", "block_id": 110177939, "block_timestamp": "2024-01-11T22:36:46.962Z", "signer_id": "sdks.near", "widget_name": "SDKs.Lens.API.AuthAPI", "source_code": "const $ = VM.require(`sdks.near/widget/Loader`);\nconst { Auth } = $(\"@sdks/lens/queries\");\n\nreturn {\n  profiles: (Client, { limit, evmAddress, includeOwned }) => {\n    return Client.graphql(Auth.PROFILES_MANAGED_QUERY, {\n      limit: limit || \"Ten\",\n      cursor: {},\n      for: evmAddress,\n      includeOwned: includeOwned || true,\n    }).then((payload) => payload.body.data.profilesManaged.items || []);\n  },\n  login: (Client, { signedBy, profileId }) => {\n    return new Promise((resolve, reject) => {\n      return Client.graphql(Auth.AUTH_CHALLENGE_QUERY, {\n        signedBy,\n        for: profileId,\n      }).then((data) => {\n        let challengeId = data.body.data.challenge.id;\n        let challengeText = data.body.data.challenge.text;\n        return Ethers.getProvider()\n          .signMessage(challengeText)\n          .then((signature) => {\n            return Client.graphql(AUTH_AUTHENTICATE_QUERY, {\n              id: challengeId,\n              signature,\n            }).then((payload) => {\n              return (\n                payload.body.data.authenticate || {\n                  accessToken: \"\",\n                  refreshToken: \"\",\n                }\n              );\n            });\n          });\n      });\n    });\n  },\n  refresh: () => {},\n  revoke: () => {},\n  verify: () => {},\n  list: () => {},\n};\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sdks.near/widget/SDKs.Lens.API.AuthAPI", "fact_widget_deployments_id": "6b84a390970cecd4cb81eab4f76cefec", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 1}