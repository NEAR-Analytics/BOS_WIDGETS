{"tx_hash": "F4pm2rSa1BYbHSS63wFzC3AuA1RmF1P5njAHa1qAszAT", "action_id_social": "HYN7pq2fcwt8SDZdJ9EChJH1pCWDkwmGo1KgSckUhpTY-0-widget", "block_id": 101129674, "block_timestamp": "2023-09-14T19:58:37.757Z", "signer_id": "opencann.near", "widget_name": "substance.metadata", "source_code": "const substance =\r\n  props.substance ?? \"#/opencann.near/widget/substanceDB.cannabis\";\r\nconst substanceMetadata = props.substanceMetadata ?? {};\r\nconst options = props.options;\r\nconst onChange = props.onChange;\r\n\r\nState.init({\r\n  substanceMetadata,\r\n  metadata: substanceMetadata,\r\n  reportedMetadata: substanceMetadata,\r\n  substance: metadata.substance ?? {},\r\n  description: substanceMetadata.description,\r\n  consumptionMethod: substanceMetadata.consumptionMethod ?? {},\r\n  physicalEffects: substanceMetadata.physicalEffects ?? {},\r\n  visualEffects: substanceMetadata.visualEffects ?? {},\r\n  auditoryEffects: substanceMetadata.auditoryEffects ?? {},\r\n  cognitiveEffects: substanceMetadata.cognitiveEffects ?? {},\r\n  multisensoryEffects: substanceMetadata.multisensoryEffects ?? {},\r\n  category: substanceMetadata.category ?? {},\r\n  image: substanceMetadata.image,\r\n  backgroundImage: substanceMetadata.backgroundImage,\r\n  tags: substanceMetadata.tags ?? {},\r\n  experiences: substanceMetadata.experiences ?? {},\r\n});\r\n\r\nconst metadata = {\r\n  substance: options.substance ? state.metadata.substance : undefined,\r\n  description: options.description ? state.metadata.description : undefined,\r\n  consumptionMethod:\r\n    options.consumptionMethod && Object.keys(state.consumptionMethod).length > 0\r\n      ? state.consumptionMethod\r\n      : undefined,\r\n  physicalEffects:\r\n    options.physicalEffects &&\r\n    state.physicalEffects &&\r\n    Object.keys(state.physicalEffects).length > 0\r\n      ? state.physicalEffects\r\n      : undefined,\r\n  visuallEffects:\r\n    options.visuallEffects &&\r\n    state.visuallEffects &&\r\n    Object.keys(state.visuallEffects).length > 0\r\n      ? state.visuallEffects\r\n      : undefined,\r\n  auditoryEffects:\r\n    options.auditoryEffects &&\r\n    state.auditoryEffects &&\r\n    Object.keys(state.auditoryEffects).length > 0\r\n      ? state.auditoryEffects\r\n      : undefined,\r\n  cognitiveEffects:\r\n    options.cognitiveEffects &&\r\n    state.cognitiveEffects &&\r\n    Object.keys(state.cognitiveEffects).length > 0\r\n      ? state.cognitiveEffects\r\n      : undefined,\r\n  multisensoryEffects:\r\n    options.multisensoryEffects &&\r\n    state.multisensoryEffects &&\r\n    Object.keys(state.multisensoryEffects).length > 0\r\n      ? state.multisensoryEffects\r\n      : undefined,\r\n  category:\r\n    options.category && state.category && Object.keys(state.category).length > 0\r\n      ? state.category\r\n      : undefined,\r\n  image:\r\n    options.image && state.image && Object.keys(state.image).length > 0\r\n      ? state.image\r\n      : undefined,\r\n  backgroundImage:\r\n    options.backgroundImage &&\r\n    state.backgroundImage &&\r\n    Object.keys(state.backgroundImage).length > 0\r\n      ? state.backgroundImage\r\n      : undefined,\r\n  tags: options.tags ? state.metadata.tags : undefined,\r\n  experiences:\r\n    options.experiences && Object.keys(state.experiences).length > 0\r\n      ? state.experiences\r\n      : undefined,\r\n};\r\n\r\nif (\r\n  onChange &&\r\n  JSON.stringify(state.reportedMetadata) !== JSON.stringify(metadata)\r\n) {\r\n  State.update({\r\n    reportedMetadata: metadata,\r\n  });\r\n  onChange(metadata);\r\n}\r\n\r\nconst debounce = (func, wait) => {\r\n  const pause = wait || 350;\r\n  let timeout;\r\n\r\n  return (args) => {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(args);\r\n    };\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, pause);\r\n  };\r\n};\r\n\r\nconst onNameChange = debounce((e) => {\r\n  State.update({\r\n    metadata: {\r\n      ...state.metadata,\r\n      name: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onDescriptionChange = debounce((e) => {\r\n  State.update({\r\n    metadata: {\r\n      ...state.metadata,\r\n      description: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onConsumptionMethodChange = debounce((e) => {\r\n  State.update({\r\n    consumptionMethod: {\r\n      ...state.consumptionMethod,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onPhysicalEffectsChange = debounce((e) => {\r\n  State.update({\r\n    physicalEffects: {\r\n      ...state.physicalEffects,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onVisualEffectsChange = debounce((e) => {\r\n  State.update({\r\n    visualEffects: {\r\n      ...state.visualEffects,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onAuditoryEffectsChange = debounce((e) => {\r\n  State.update({\r\n    auditoryEffects: {\r\n      ...state.auditoryEffects,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onCognitiveEffectsChange = debounce((e) => {\r\n  State.update({\r\n    cognitiveEffects: {\r\n      ...state.cognitiveEffects,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onMultisensoryEffectsChange = debounce((e) => {\r\n  State.update({\r\n    multisensoryEffects: {\r\n      ...state.multisensoryEffects,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onCategoryChange = debounce((e) => {\r\n  State.update({\r\n    category: {\r\n      ...state.category,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\nconst onExperiencesChange = debounce((e) => {\r\n  State.update({\r\n    experiences: {\r\n      ...state.experiences,\r\n      [e.target.id]: e.target.value,\r\n    },\r\n  });\r\n});\r\n\r\nreturn (\r\n  <>\r\n    {substance.name && (\r\n      <div className=\"mb-2\">\r\n        {options.name.label ?? \"Substance Name\"}\r\n        <input\r\n          type=\"text\"\r\n          defaultValue={state.metadata.substance}\r\n          onChange={onNameChange}\r\n        />\r\n      </div>\r\n    )}\r\n    {options.image && (\r\n      <div className=\"mb-2\">\r\n        {options.image.label ?? \"Image\"}\r\n        <Widget\r\n          src=\"near/widget/ImageEditorTabs\"\r\n          props={{\r\n            image: state.image,\r\n            onChange: (image) => State.update({ image }),\r\n          }}\r\n        />\r\n      </div>\r\n    )}\r\n    {options.backgroundImage && (\r\n      <div className=\"mb-2\">\r\n        {options.backgroundImage.label ?? \"Background image\"}\r\n        <Widget\r\n          src=\"near/widget/ImageEditorTabs\"\r\n          props={{\r\n            image: state.backgroundImage,\r\n            onChange: (backgroundImage) => State.update({ backgroundImage }),\r\n            debounce,\r\n          }}\r\n        />\r\n      </div>\r\n    )}\r\n    {options.description && (\r\n      <div className=\"mb-2\">\r\n        {options.description.label ?? \"Description\"}\r\n        <span className=\"text-secondary\"> (supports markdown)</span>\r\n        <textarea\r\n          className=\"form-control\"\r\n          rows={5}\r\n          defaultValue={state.metadata.description}\r\n          onChange={onDescriptionChange}\r\n        />\r\n      </div>\r\n    )}\r\n    {options.tags && (\r\n      <div className=\"mb-2\">\r\n        {options.tags.label ?? \"Tags\"}\r\n        <Widget\r\n          src=\"mob.near/widget/TagsEditor\"\r\n          props={{\r\n            substanceTagsObject: metadata.tags,\r\n            tagsPattern: options.tags.pattern,\r\n            placeholder:\r\n              options.tags.placeholder ??\r\n              \"rust, engineer, artist, humanguild, nft, learner, founder\",\r\n            setTagsObject: (tags) => {\r\n              state.metadata.tags = tags;\r\n              State.update();\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    )}\r\n    {options.category &&\r\n      (options.category.links ?? []).map((link) => (\r\n        <div className=\"mb-2\">\r\n          {link.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{link.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={link.name}\r\n              defaultValue={state.category[link.name]}\r\n              onChange={onCategoryChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    {options.experiences &&\r\n      (options.experiences.data ?? []).map((data) => (\r\n        <div className=\"mb-2\">\r\n          {data.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{data.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={data.name}\r\n              defaultValue={state.experiences[data.name]}\r\n              onChange={onExperiencesChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    {options.physicalEffects &&\r\n      (options.physicalEffects.data ?? []).map((data) => (\r\n        <div className=\"mb-2\">\r\n          {data.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{data.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={data.name}\r\n              defaultValue={state.physicalEffects[data.name]}\r\n              onChange={onPhysicalEffectsChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    {options.visualEffects &&\r\n      (options.visualEffects.data ?? []).map((data) => (\r\n        <div className=\"mb-2\">\r\n          {data.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{data.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={data.name}\r\n              defaultValue={state.visualEffects[data.name]}\r\n              onChange={onVisualEffectsChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    {options.auditoryEffects &&\r\n      (options.auditoryEffects.data ?? []).map((data) => (\r\n        <div className=\"mb-2\">\r\n          {data.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{data.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={data.name}\r\n              defaultValue={state.auditoryEffects[data.name]}\r\n              onChange={onAuditoryEffectsChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    {options.cognitiveEffects &&\r\n      (options.cognitiveEffects.data ?? []).map((data) => (\r\n        <div className=\"mb-2\">\r\n          {data.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{data.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={data.name}\r\n              defaultValue={state.cognitiveEffects[data.name]}\r\n              onChange={onCognitiveEffectsChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    {options.multisensoryEffects &&\r\n      (options.multisensoryEffects.data ?? []).map((data) => (\r\n        <div className=\"mb-2\">\r\n          {data.label}\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">{data.prefix}</span>\r\n            <input\r\n              type=\"text\"\r\n              id={data.name}\r\n              defaultValue={state.multisensoryEffects[data.name]}\r\n              onChange={onMultisensoryEffectsChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n  </>\r\n);\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/opencann.near/widget/substance.metadata", "fact_widget_deployments_id": "4f37c48c80df46a03512d0c674886ba7", "inserted_timestamp": "2023-09-14T21:44:50.410Z", "modified_timestamp": "2023-09-14T21:44:50.410Z", "__row_index": 0}