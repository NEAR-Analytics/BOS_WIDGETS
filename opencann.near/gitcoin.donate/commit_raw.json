{"tx_hash": "3RioXFkijKHZKqnLYGpsAXd6xb1QbLUFuEucYjNkvwN3", "action_id_social": "FYwKckZD9SXu7egTyVCfh84y19E7vQKxszyfsfk59RCi-0-widget", "block_id": 117473550, "block_timestamp": "2024-04-23T20:35:20.606Z", "signer_id": "opencann.near", "widget_name": "gitcoin.donate", "source_code": "//function VoteForProject({ provider, roundContractAddress }) {\r\nconst user = Ethers.send(\"eth_requestAccounts\", [])[0];\r\n\r\nif (!user) return <Web3Connect connectLabel=\"Connect\" />;\r\n\r\n{\r\n  /*\r\nconst chain = Ethers.provider()\r\n  .getNetwork()\r\n  .{then}((chainIdData) => {\r\n    console.log(chainIdData.chainId);\r\n  });\r\n*/\r\n}\r\n\r\n// Grants Stack Round Implementation ABI\r\nconst abi = fetch(\r\n  \"https://raw.githubusercontent.com/gitcoinco/grants-stack/9a5ec016a969f079ed15b1d981fa3d8d8f2fa47d/packages/builder/src/contracts/abis/RoundImplementation.json\"\r\n);\r\n\r\n// Project on Arbitrum\r\nconst provider = new ethers.providers.JsonRpcProvider(\r\n  \"https://endpoints.omniatech.io/v1/arbitrum/one/public\"\r\n);\r\nconst signer = provider.getSigner(user);\r\n// console.log(\"chain:\", chain);\r\n// console.log(\"signer:\", signer);\r\n\r\n//https://builder.gitcoin.co/#/chains/42161/registry/0x/projects/0x73c60970e544f3fa2588f1cc3c6905ec27dcb82b417c8a09317b817dccfe79af\r\nconst contractAddress =\r\n  \"0x73c60970e544f3fa2588f1cc3c6905ec27dcb82b417c8a09317b817dccfe79af\";\r\n\r\n// Parse ABI and contract endpoints\r\nconst parsedAbi = JSON.parse(abi.body);\r\nconst contract = new ethers.Contract(contractAddress, parsedAbi.abi, signer);\r\nconsole.log(contract);\r\n\r\n// Initialize constants\r\nconst [projectId, setProjectId] = useState(\"\");\r\nconst [amount, setAmount] = useState(\"\");\r\nconst [message, setMessage] = useState(\"\");\r\n\r\n// Define voting function\r\nconst handleVote = () => {\r\n  if (!provider || !projectId || !amount) {\r\n    alert(\"All fields are required!\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const signer = provider.getSigner(user);\r\n    const roundContract = new Ethers.Contract(\r\n      roundContractAddress,\r\n      pasedAbi,\r\n      signer\r\n    );\r\n\r\n    const tx = roundContract.vote(projectId, ethers.utils.parseEther(amount));\r\n    tx.wait();\r\n    alert(\"Vote successfully recorded!\");\r\n  } catch (error) {\r\n    console.error(\"Failed to vote:\", error);\r\n    alert(\"Failed to vote. See console for details.\");\r\n  }\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <h1>Vote for a Project</h1>\r\n    <input\r\n      type=\"text\"\r\n      value={projectId}\r\n      onChange={(e) => setProjectId(e.target.value)}\r\n      placeholder=\"Project ID\"\r\n    />\r\n    <input\r\n      type=\"text\"\r\n      value={amount}\r\n      onChange={(e) => setAmount(e.target.value)}\r\n      placeholder=\"Amount to vote\"\r\n    />\r\n    <button onClick={handleVote}>Vote</button>\r\n  </div>\r\n);\r\n\r\n//export default VoteForProject;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/opencann.near/widget/gitcoin.donate", "fact_widget_deployments_id": "85d3a255139bc0c6ddd18ece05811222", "inserted_timestamp": "2024-04-23T22:41:04.298Z", "modified_timestamp": "2024-04-23T22:41:04.298Z", "__row_index": 0}