{"tx_hash": "4t7DzzfHkqusDRNMBiwpoz4tYsb44MSybUtDFVCNN82M", "action_id_social": "6W1RQqD51ZALmuoCPwkkPiHua2YzpoiHggB9JpPuAnAH-0-widget", "block_id": 117477568, "block_timestamp": "2024-04-23T21:55:18.272Z", "signer_id": "opencann.near", "widget_name": "gitcoin.donate", "source_code": "//function VoteForProject({ provider, roundContractAddress }) {\nconst user = Ethers.send(\"eth_requestAccounts\", [])[0];\n\nif (!user) return <Web3Connect connectLabel=\"Connect\" />;\n\n// Grants Stack Round Implementation ABI\nconst abi = asyncFetch(\n  \"https://raw.githubusercontent.com/gitcoinco/grants-stack/9a5ec016a969f079ed15b1d981fa3d8d8f2fa47d/packages/builder/src/contracts/abis/RoundImplementation.json\"\n);\n\n//https://builder.gitcoin.co/#/chains/42161/registry/0x/projects/0x73c60970e544f3fa2588f1cc3c6905ec27dcb82b417c8a09317b817dccfe79af\n// Set up the provider and signer\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\n//const signer = provider.getSigner(user);\n\n// Create the contract instance with the ABI from asyncFetch\nconst contract = abi.then(\n  (abiData) => new ethers.Contract(roundContractAddress, abiData, signer)\n);\n\n// Handle account request on component mount\nasyncFetch(\"eth_requestAccounts\", []).then((accounts) => {\n  setUser(accounts[0]); // Using the first account\n});\n\nconst handleVote = () => {\n  if (!contract || !projectId || !amount) {\n    setMessage(\"All fields are required and contract must be loaded!\");\n    return;\n  }\n\n  const signerWidget = VM.require(\"sdks.near/widget/SDKs.EthereumSigner\");\n\n  signerWidget\n    .sign(`Vote for project ID ${projectId} with amount ${amount}`)\n    .then((sig) => {\n      setSignature(sig);\n      // After signing, you might want to send the signature along with the vote\n      return contract\n        .vote(projectId, ethers.utils.parseEther(amount), sig)\n        .then((tx) => tx.wait())\n        .then(() => setMessage(\"Vote successfully recorded!\"))\n        .catch((error) => {\n          console.error(\"Failed to vote:\", error);\n          setMessage(\"Failed to vote. See console for details.\");\n        });\n    })\n    .catch(console.error);\n};\n\nreturn (\n  <div>\n    <h1>Vote for a Project</h1>\n    <input\n      type=\"text\"\n      value={projectId}\n      onChange={(e) => setProjectId(e.target.value)}\n      placeholder=\"Project ID\"\n    />\n    <input\n      type=\"text\"\n      value={amount}\n      onChange={(e) => setAmount(e.target.value)}\n      placeholder=\"Amount to vote\"\n    />\n    <button onClick={handleVote}>Vote</button>\n    <p>{message}</p>\n  </div>\n);\n", "metadata": {"platform": "jutsu.ai"}, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/opencann.near/widget/gitcoin.donate", "fact_widget_deployments_id": "4a098a048f41d50ea43ed7816c45ce30", "inserted_timestamp": "2024-04-23T23:40:28.222Z", "modified_timestamp": "2024-04-23T23:40:28.222Z", "__row_index": 4}