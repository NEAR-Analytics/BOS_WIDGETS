{"tx_hash": "Cw5s8pQGJN8A5Wv7MpQX5UD7Dxc1JU8eMnGrbTCU9hnF", "action_id_social": "k3cJ5HwN9c3Ex4dXn1nXehXARcKhQHanLxDhbCT5zxx-0-widget", "block_id": 100013843, "block_timestamp": "2023-08-30T15:57:19.384Z", "signer_id": "opencann.near", "widget_name": "hypercerts", "source_code": "// Use ERC-1155 instead of 721 // scottie.near/widget/ERC1155_Minter\n\n// Update design with components from multiminter\n\nconst accountId = \"opencann.near\";\n\nconst auroraContract = \"to be deployed...\";\nconst opContract = \"0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07\";\nconst goerliContract = \"0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07\";\nconst nearContract = \"socialDB\";\n\nconst mintSingle = [\n  \"function mint(address to, uint256 id, uint256 amount, string memory uri, bytes memory data) public {}\",\n];\n\n// FETCH HYPERCERTS ABI\n\nconst tokenDecimals = 18;\n\nconst hypercertsAbi = fetch(\n  \"https://raw.githubusercontent.com/hypercerts-org/hypercerts/main/graph/abis/HypercertMinter.json\"\n);\n\nconsole.log(hypercertsAbi);\nif (!hypercertsAbi.ok) {\n  return \"Loading\";\n}\n\nconst hypercertsiface = new ethers.utils.Interface(hypercertsAbi.body);\n\n//let accountId = context.accountId;\nconst contractAddresses = {\n  1313161554: [auroraContract, \"Aurora\"],\n  10: [opContract, \"Optimism\"],\n  5: [goerliContract, \"Goerli\"],\n  0: [nearContract, \"Near\"],\n};\nconst chains = [\n  {\n    id: \"1313161554\",\n    name: \"Aurora\",\n  },\n  {\n    id: \"10\",\n    name: \"Optimism\",\n  },\n  {\n    id: \"5\",\n    name: \"Goerli Testnet\",\n  },\n  {\n    id: \"0\",\n    name: \"Near\",\n  },\n];\n\nconst handleMint = () => {\n  console.log(\"it's here\", state.title && state.description && state.image.cid);\n  if (!(state.title && state.description && state.image.cid)) {\n    return;\n  }\n  if (state.selectedChain == \"0\") {\n    const gas = 200000000000000;\n    const deposit = 10000000000000000000000;\n    const metadata = {\n      name: state.title,\n      description: state.description,\n      properties: [],\n      image: `ipfs://${state.image.cid}`,\n    };\n    asyncFetch(\"https://ipfs.near.social/add\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n      },\n      body: metadata,\n    }).then((res) => {\n      const cid = res.body.cid;\n      const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n      console.log(\"in the promise\", res, Id);\n      Near.call([\n        {\n          contractName: \"genadrop-contract.nftgen.near\",\n          methodName: \"nft_mint\",\n          args: {\n            token_id: `${Date.now()}`,\n            metadata: {\n              title: state.title,\n              description: state.description,\n              media: `https://ipfs.io/ipfs/${state.image.cid}`,\n              reference: `ipfs://${cid}`,\n            },\n            receiver_id: accountId,\n          },\n          gas: gas,\n          deposit: deposit,\n        },\n      ]);\n    });\n    return;\n  }\n  console.log(\"passed checks\");\n  let networkId = Ethers.provider()._network.chainId;\n\n  const CA = contractAddresses[state.selectedChain[0] || \"137\"];\n\n  const contract = new ethers.Contract(\n    CA,\n    mintSingle,\n    Ethers.provider().getSigner()\n  );\n  const metadata = {\n    name: state.title,\n    description: state.description,\n    properties: [],\n    image: `ipfs://${state.image.cid}`,\n  };\n  asyncFetch(\"https://ipfs.near.social/add\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: metadata,\n  }).then((res) => {\n    const cid = res.body.cid;\n    const Id = Math.floor(Math.random() * (9999999 - 100000 + 1) + 100000);\n    console.log(\"in the promise\", res, Id);\n    contract\n      .mint(state.sender, Id, 1, `ipfs://${cid}`, \"0x\")\n      .then((transactionHash) => transactionHash.wait())\n      .then((ricit) => {\n        console.log(\"receipt::\", ricit);\n      });\n  });\n};\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  console.log(\"accounts:\", accounts, Ethers.provider(), ethers);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    Ethers.provider()\n      .getNetwork()\n      .then((data) => {\n        State.update({\n          selectedChain: data.chainId,\n        });\n      });\n  }\n\n  if (accountId) {\n    State.update({ sender: accountId });\n    State.update({\n      selectedChain: \"0\",\n    });\n  }\n}\nState.init({\n  title: \"\",\n  description: \"\",\n});\nconst onChangeTitle = (title) => {\n  State.update({\n    title,\n  });\n};\n\nconst handleChainChange = (event) => {\n  console.log(\n    \"get what we doing:\",\n    event.target.value,\n    event.target.value == \"0\",\n    !accountId\n  );\n  if (event.target.value == \"0\") {\n    if (!accountId) {\n      console.log(\"not what we thought,:\", accountId);\n      return;\n    }\n    State.update({\n      selectedChain: event.target.value,\n    });\n  }\n  Ethers.send(\"wallet_switchEthereumChain\", [\n    {\n      chainId: \"0x\" + Number(event.target.value).toString(16),\n    },\n  ]).then((data) => console.log(\"done!!!\", data));\n  console.log(\"what happens after\");\n  State.update({\n    selectedChain: event.target.value,\n  });\n  console.log(\"afters\", state.selectedChain);\n};\n\nconst onChangeDesc = (description) => {\n  console.log(\"Log ciritcal critics:\", state.selectedChain, state.title);\n  State.update({\n    description,\n  });\n};\n// if (state.sender === undefined) {\n//   console.log(\"of course it's undefined\", ethers);\n//   const accounts = Ethers.send(\"eth_requestAccounts\", []);\n//   console.log(\"account\", accounts);\n//   if (accounts.length) {\n//     State.update({ sender: accounts[0] });\n//     console.log(\"set sender\", accounts[0]);\n//   }\n// }\n\nreturn (\n  <div>\n    <h2>Mint a Hypercert</h2>\n    <div>\n      Hypercerts are a type of impact certificate that recognizes real-world\n      impact by minting a formal attestation on-chain.\n    </div>\n    <hr></hr>\n    <div>\n      <h5>Title:</h5>\n      <input type=\"text\" onChange={(e) => onChangeTitle(e.target.value)} />\n    </div>\n    <div>\n      <h5>Description:</h5>\n      <input type=\"text\" onChange={(e) => onChangeDesc(e.target.value)} />\n    </div>\n    <h5>Image:</h5>\n    <div className=\"flex-grow-1\">\n      <IpfsImageUpload\n        image={state.image}\n        className=\"btn btn-outline-secondary border-0 rounded-3\"\n      />\n    </div>\n    <div>\n      {state.image.cid && (\n        <div className=\"mt-3\">\n          <h5>Preview:</h5>\n          <img\n            src={`https://ipfs.io/ipfs/` + state.image.cid}\n            alt=\"Preview\"\n            style={{ maxWidth: \"300px\" }}\n          />\n        </div>\n      )}\n    </div>\n    <div>\n      {state.sender && Ethers.provider() ? (\n        <div className=\"form-group\">\n          <label htmlFor=\"chainSelect\">Select Chain</label>\n          <select\n            className=\"form-control\"\n            value={state.selectedChain}\n            onChange={handleChainChange}\n          >\n            {chains.map((chain) => (\n              <option key={chain.id} value={chain.id}>\n                {chain.name}\n              </option>\n            ))}\n          </select>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mt-3\"\n            onClick={handleMint}\n          >\n            Mint to {contractAddresses[state.selectedChain][1]}\n          </button>\n        </div>\n      ) : state.sender ? (\n        <div className=\"form-group\">\n          <label htmlFor=\"chainSelect\">Select Chain</label>\n          <select\n            className=\"form-control\"\n            value={state.selectedChain}\n            onChange={handleChainChange}\n          >\n            {chains.map((chain) => (\n              <option key={chain.id} value={chain.id}>\n                {chain.name}\n              </option>\n            ))}\n          </select>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mt-3\"\n            onClick={handleMint}\n          >\n            Mint to {contractAddresses[state.selectedChain][1]}\n          </button>\n          <div>\n            <Web3Connect\n              className=\"btn mt-3\"\n              connectLabel=\"Connect with Ethereum Wallet\"\n            />\n          </div>\n        </div>\n      ) : (\n        <Web3Connect className=\"btn mt-3\" connectLabel=\"Connect with Wallet\" />\n      )}\n    </div>\n    <h4 className=\"text-center mt-5\">\n      Made with \ud83d\udca7\n      <a href=\"https://genadrop.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n        GenaDrop\n      </a>\n      <Widget\n        src=\"miraclx.near/widget/Attribution\"\n        props={{ authors: [accountId], dep: true }}\n      />\n    </h4>\n  </div>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/opencann.near/widget/hypercerts", "fact_widget_deployments_id": "e9c62514ca6ba13bc71f5bc6041c8246", "inserted_timestamp": "2023-08-30T17:45:06.345Z", "modified_timestamp": "2023-08-30T17:45:06.345Z", "__row_index": 0}