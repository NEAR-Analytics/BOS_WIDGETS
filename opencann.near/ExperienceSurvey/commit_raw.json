{"tx_hash": "CBx4e9GiM8Miu1nUvnNRWSEGFceKsLajLNgAd34Ww9NP", "action_id_social": "7oWTyaVa9k2HC9WBtCu3L9Xq7GtqJBn6QHzrJNMmaNrm-0-widget", "block_id": 101127521, "block_timestamp": "2023-09-14T19:17:17.476Z", "signer_id": "opencann.near", "widget_name": "ExperienceSurvey", "source_code": "// Add tooltips to show long explanations on hover\r\nconst options = props.options;\r\nconst substance = props.substance ?? \"cannabis\";\r\nconst consumptionMethod = substance.consumptionMethod;\r\nconst physicalEffects = substance.physicalEffects;\r\nconst visualEffects = substance.visualEffects;\r\nconst auditoryEffects = substance.auditoryEffects;\r\nconst cognitiveEffects = substance.cognitiveEffects;\r\nconst multisensoryEffects = substance.multisensoryEffects;\r\n\r\nconst UUID = {\r\n  generate: (template) => {\r\n    if (typeof template !== \"string\") {\r\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\r\n    }\r\n    return template.replace(/[xy]/g, (c) => {\r\n      var r = (Math.random() * 16) | 0;\r\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n      return v.toString(16);\r\n    });\r\n  },\r\n};\r\n\r\nconst getCurrentDate = () => {\r\n  const currentDate = new Date();\r\n\r\n  const year = currentDate.getFullYear();\r\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, \"0\"); // Months are 0-indexed\r\n  const day = currentDate.getDate().toString().padStart(2, \"0\");\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst getCurrentTime = () => {\r\n  const currentDate = new Date();\r\n\r\n  const hours = currentDate.getHours().toString().padStart(2, \"0\");\r\n  const minutes = currentDate.getMinutes().toString().padStart(2, \"0\");\r\n\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\nconst isoTime = (date, time) => {\r\n  const temp = new Date(`${date} ${time}`);\r\n  const now = temp.toISOString();\r\n\r\n  return now.split(\"T\")[1];\r\n};\r\n\r\nconst isoDate = (date, time) => {\r\n  const temp = new Date(`${date} ${time}`);\r\n  const now = temp.toISOString();\r\n\r\n  return now.split(\"T\")[0];\r\n};\r\n\r\nconst accountId = context.accountId;\r\n\r\nif (!accountId) {\r\n  return \"Please connect your NEAR account\";\r\n}\r\n\r\nlet user_account = context.accountId;\r\n\r\nState.init({\r\n  id: UUID.generate(),\r\n  title: \"\",\r\n  substance: props.substance,\r\n  consumptionMethod: substance.consumptionMethod,\r\n  dose: \"\",\r\n  description: {\r\n    content: \"# New Response Description\",\r\n  },\r\n  otherSubstances: \"Other substances taken during this experience.\",\r\n  setSetting: {\r\n    content: \"# New Set and Setting Description\",\r\n  },\r\n  physicalEffects: [],\r\n  visualEffects: [],\r\n  auditoryEffects: [],\r\n  cognitiveEffects: [],\r\n  multisensoryEffects: [],\r\n  productName: \"\",\r\n  brandName: \"\",\r\n  batchNumber: \"\",\r\n  start: getCurrentDate(),\r\n  startTime: getCurrentTime(),\r\n  end: getCurrentDate(),\r\n  endTime: getCurrentTime(),\r\n  location: \"\",\r\n  link: \"\",\r\n  organizer: \"opencann.near\",\r\n  isAllDay: false,\r\n  category: \"\",\r\n  logo: null,\r\n  background: null,\r\n  customWidget: \"\",\r\n  daoId: \"cannabis-genome.sputnik-dao.near\",\r\n  tempHash: \"\",\r\n  hashTags: [],\r\n});\r\n\r\nconst onTitleChange = ({ target }) => {\r\n  State.update({ title: target.value });\r\n};\r\n\r\nconst onSubstanceChange = (target) => {\r\n  State.update({ substance: target });\r\n};\r\n\r\nconst onConsumptionMethodChange = (target) => {\r\n  State.update({ consumptionMethod: target });\r\n};\r\n\r\nconst onDoseChange = (target) => {\r\n  State.update({ dose: target });\r\n};\r\n\r\nconst onDescriptionChange = (target) => {\r\n  State.update({ description: target });\r\n};\r\n\r\nconst onOtherSubstancesChange = (target) => {\r\n  State.update({ otherSubstances: target });\r\n};\r\n\r\nconst onSetSettingChange = (target) => {\r\n  State.update({ setSetting: target });\r\n};\r\n\r\nconst onPhysicalEffectsChange = (target) => {\r\n  State.update({ physicalEffects: target });\r\n};\r\n\r\nconst onVisuallEffectsChange = (target) => {\r\n  State.update({ visualEffects: target });\r\n};\r\n\r\nconst onAuditoryEffectsChange = (target) => {\r\n  State.update({ auditoryEffects: target });\r\n};\r\n\r\nconst onCognitiveEffectsChange = (target) => {\r\n  State.update({ cognitiveEffects: target });\r\n};\r\n\r\nconst onMultiSensoryEffectsChange = (target) => {\r\n  State.update({ multisensoryEffects: target });\r\n};\r\n\r\nconst onProductNameChange = (target) => {\r\n  State.update({ productName: target });\r\n};\r\n\r\nconst onBrandNameChange = (target) => {\r\n  State.update({ brandName: target });\r\n};\r\n\r\nconst onBatchNumberChange = (target) => {\r\n  State.update({ batchNumber: target });\r\n};\r\n\r\nconst onStartChange = ({ target }) => {\r\n  State.update({ start: target.value });\r\n};\r\n\r\nconst onStartTimeChange = ({ target }) => {\r\n  State.update({ startTime: target.value });\r\n};\r\n\r\nconst onEndChange = ({ target }) => {\r\n  State.update({ end: target.value });\r\n};\r\n\r\nconst onEndTimeChange = ({ target }) => {\r\n  State.update({ endTime: target.value });\r\n};\r\n\r\nconst onLocationChange = ({ target }) => {\r\n  State.update({ location: target.value });\r\n};\r\n\r\nconst onLinkChange = ({ target }) => {\r\n  State.update({ link: target.value });\r\n};\r\n\r\nconst onOrganizerChange = ({ target }) => {\r\n  State.update({ organizer: target.value });\r\n};\r\n\r\nconst onCategoryChange = ({ target }) => {\r\n  State.update({ category: target.value });\r\n};\r\n\r\nconst onIsAllDayChange = () => {\r\n  State.update({ isAllDay: !state.isAllDay });\r\n};\r\n\r\nconst onLogoChange = (target) => {\r\n  State.update({ logo: target });\r\n};\r\n\r\nconst onBackgroundChange = (target) => {\r\n  State.update({ background: target });\r\n};\r\n\r\nconst onTempHashChange = ({ target }) => {\r\n  State.update({ tempHash: target.value });\r\n};\r\n\r\nconst onHashTagAdd = () => {\r\n  State.update({ hashTags: [...state.hashTags, state.tempHash] });\r\n  State.update({ tempHash: \"\" });\r\n};\r\n\r\nconst onHashTagRemove = (target) => {\r\n  const newTags = state.hashTags.filter((item) => item !== target);\r\n  State.update({ hashTags: newTags });\r\n};\r\n\r\nconst onCustomWidgetChange = ({ target }) => {\r\n  State.update({ customWidget: target.value });\r\n};\r\n\r\nconst onDaoIDChange = ({ target }) => {\r\n  State.update({ daoId: target.value });\r\n};\r\n\r\nconst clearFields = () => {\r\n  State.update({\r\n    title: \"\",\r\n    substance: \"cannabis\",\r\n    consumptionMethod: [\"smoke\", \"vapor\"],\r\n    dose: \"\",\r\n    description: {\r\n      content: \"# New Response Description\",\r\n    },\r\n    otherSubstances: \"Other substances taken during this experience.\",\r\n    setSetting: {\r\n      content: \"# New Set and Setting Description\",\r\n    },\r\n    physicalEffects: [\"\", \"\"],\r\n    visualEffects: [\"\", \"\"],\r\n    auditoryEffects: [\"\", \"\"],\r\n    cognitiveEffects: [\"\", \"\"],\r\n    multisensoryEffects: [\"\", \"\"],\r\n    productName: \"\",\r\n    brandName: \"\",\r\n    batchNumber: \"\",\r\n    start: getCurrentDate(),\r\n    startTime: getCurrentTime(),\r\n    end: getCurrentDate(),\r\n    endTime: getCurrentTime(),\r\n    location: \"\",\r\n    link: \"\",\r\n    organizer: \"opencann.near\",\r\n    isAllDay: false,\r\n    category: \"\",\r\n    logo: null,\r\n    background: null,\r\n    customWidget: \"\",\r\n    daoId: \"cannabis-genome.sputnik-dao.near\",\r\n    tempHash: \"\",\r\n    hashTags: [],\r\n  });\r\n};\r\n\r\nconst createNewResponse = () => {\r\n  const newResponse = {\r\n    data: {\r\n      id: state.id,\r\n      title: state.title,\r\n      substance: state.substance,\r\n      consumptionMethod: state.method,\r\n      dose: state.dose,\r\n      description: state.description,\r\n      otherSubstances: state.otherSubstances,\r\n      setSetting: state.setSetting,\r\n      physicalEffects: state.physicalEffects,\r\n      visualEffects: state.visualEffects,\r\n      auditoryEffects: state.auditoryEffects,\r\n      cognitiveEffects: state.cognitiveEffects,\r\n      multisensoryEffects: state.multisensoryEffects,\r\n      productName: state.productName,\r\n      brandName: state.brandName,\r\n      batchNumber: state.batchNumber,\r\n      start: isoDate(state.start, state.startTime),\r\n      startTime: isoTime(state.start, state.startTime),\r\n      end: isoDate(state.end, state.endTime),\r\n      endTime: isoTime(state.end, state.endTime),\r\n      location: state.location,\r\n      link: state.link,\r\n      organizer: state.organizer,\r\n      isAllDay: state.isAllDay,\r\n      category: state.category,\r\n      logo: state.logo,\r\n      background: state.background,\r\n      hashTags: state.hashTags,\r\n    },\r\n    template: {\r\n      src: \"opencann.near/widget/ResponseView\",\r\n    },\r\n    type: \"every.near/type/response\",\r\n  };\r\n\r\n  return newResponse;\r\n};\r\n\r\nconst addResponse = (target) => {\r\n  const thingId = target.data.id;\r\n  // index new response\r\n  Social.set({\r\n    thing: {\r\n      [thingId]: target,\r\n    },\r\n    index: {\r\n      every: JSON.stringify({\r\n        key: \"every.near/type/response\",\r\n        value: {\r\n          type: \"every.near/type/response\",\r\n          id: thingId,\r\n        },\r\n      }),\r\n    },\r\n  });\r\n\r\n  State.update({ response: target });\r\n};\r\n\r\nconst handleNewResponse = () => {\r\n  const newResponse = {\r\n    data: {\r\n      id: state.id,\r\n      title: state.title,\r\n      substance: state.substance,\r\n      consumptionMethod: state.method,\r\n      dose: state.dose,\r\n      description: state.description,\r\n      otherSubstances: state.otherSubstances,\r\n      setSetting: state.setSetting,\r\n      physicalEffects: state.physicalEffects,\r\n      visualEffects: state.visualEffects,\r\n      auditoryEffects: state.auditoryEffects,\r\n      cognitiveEffects: state.cognitiveEffects,\r\n      multisensoryEffects: state.multisensoryEffects,\r\n      productName: state.productName,\r\n      brandName: state.brandName,\r\n      batchNumber: state.batchNumber,\r\n      start: isoDate(state.start, state.startTime),\r\n      startTime: isoTime(state.start, state.startTime),\r\n      end: isoDate(state.end, state.endTime),\r\n      endTime: isoTime(state.end, state.endTime),\r\n      location: state.location,\r\n      link: state.link,\r\n      organizer: state.organizer,\r\n      isAllDay: state.isAllDay,\r\n      category: state.category,\r\n      logo: state.logo,\r\n      background: state.background,\r\n      hashTags: state.hashTags,\r\n    },\r\n    template: {\r\n      src: \"itexpert120-contra.near/widget/ResponseView\",\r\n    },\r\n    type: \"every.near/type/Response\",\r\n  };\r\n\r\n  addResponse(newResponse);\r\n  clearFields();\r\n};\r\n\r\nconst ResponseForm = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <h5>\r\n          <a\r\n            href=\"https://www.opencann.net/#/opencann.near/widget/profile.edit\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Complete Your Profile Before You Begin\r\n          </a>\r\n        </h5>\r\n        <hr></hr>\r\n\r\n        <p>\r\n          Instructions: describe one (1) experience you had with cannabis.{\" \"}\r\n          <b>This form is meant to be anonymous</b>, so only include as much\r\n          detail as you feel comfortable sharing.\r\n        </p>\r\n\r\n        <hr></hr>\r\n        <h4>Cannabis Experience Report</h4>\r\n        <p></p>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"title\">\r\n            Give Your Report a Name\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"title\"\r\n            value={state.title}\r\n            onChange={onTitleChange}\r\n            placeholder=\"New Response Title\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <Widget\r\n            src=\"nearhorizon.near/widget/Inputs.MultiSelect\"\r\n            props={{\r\n              data: state.consumptionMethod,\r\n              onChange: onConsumptionMethodChange,\r\n              height: \"250px\",\r\n              options: props.consumptionMethod,\r\n              label: \"How did you consume cannabis?\",\r\n              placeholder: \"Select all methods that apply.\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"dose\">\r\n            Estimated Dose\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"dose\"\r\n            value={state.dose}\r\n            onChange={onDoseChange}\r\n            placeholder=\"Estimated Dose\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"otherSubstances\">\r\n            Other Substances Taken\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"otherSubstances\"\r\n            value={state.otherSubstances}\r\n            onChange={onOtherSubstancesChange}\r\n            placeholder=\"Other Substances Taken\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"description\">\r\n            Describe Your Experience\r\n          </label>\r\n          <Widget\r\n            src=\"efiz.near/widget/every.markdown.create\"\r\n            props={{\r\n              data: state.description,\r\n              onChange: onDescriptionChange,\r\n              height: \"250px\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"setSetting\">\r\n            Set and Setting\r\n          </label>\r\n          <Widget\r\n            src=\"efiz.near/widget/every.markdown.create\"\r\n            props={{\r\n              data: state.setSetting,\r\n              onChange: onSetSettingChange,\r\n              height: \"250px\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col\">\r\n            <label for=\"start\">Experience Start Date</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"start\"\r\n              type=\"date\"\r\n              value={state.start}\r\n              onChange={onStartChange}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label for=\"startTime\">Experience Start Time</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"startTime\"\r\n              type=\"time\"\r\n              value={state.startTime}\r\n              onChange={onStartTimeChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row  mb-3\">\r\n          <div className=\"col\">\r\n            <label for=\"end\">Experience End Date</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"end\"\r\n              type=\"date\"\r\n              value={state.end}\r\n              onChange={onEndChange}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label for=\"endTime\">Experience End Time</label>\r\n            <input\r\n              class=\"form-control\"\r\n              id=\"endTime\"\r\n              type=\"time\"\r\n              value={state.endTime}\r\n              onChange={onEndTimeChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"location\">\r\n            Geographic Region\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"location\"\r\n            value={state.location}\r\n            onChange={onLocationChange}\r\n            placeholder=\"Where did your experience take place?\"\r\n          />\r\n        </div>\r\n        <hr></hr>\r\n        <h5>Perceived Effects</h5>\r\n        <p></p>\r\n        <div className=\"mb-3\">\r\n          <Widget\r\n            src=\"nearhorizon.near/widget/Inputs.MultiSelect\"\r\n            props={{\r\n              data: state.physicalEffects,\r\n              onChange: onPhysicalEffectsChange,\r\n              height: \"250px\",\r\n              options: props.cannabis.physicalEffects,\r\n              label: \"Physical Effects\",\r\n              placeholder: \"Select all that apply.\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <Widget\r\n            src=\"nearhorizon.near/widget/Inputs.MultiSelect\"\r\n            props={{\r\n              data: state.visualEffects,\r\n              onChange: onVisuallEffectsChange,\r\n              height: \"250px\",\r\n              options: props.cannabis.visualEffects,\r\n              label: \"Visual Effects\",\r\n              placeholder: \"Select all methods that apply.\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <Widget\r\n            src=\"nearhorizon.near/widget/Inputs.MultiSelect\"\r\n            props={{\r\n              data: state.auditoryEffects,\r\n              onChange: onAuditoryEffectsChange,\r\n              height: \"250px\",\r\n              options: props.substance.auditoryEffects,\r\n              label: \"Auditory Effects\",\r\n              placeholder: \"Select all methods that apply.\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <Widget\r\n            src=\"nearhorizon.near/widget/Inputs.MultiSelect\"\r\n            props={{\r\n              data: state.cognitiveEffects,\r\n              onChange: onCognitiveEffectsChange,\r\n              height: \"250px\",\r\n              options: props.substance.cognitiveEffects,\r\n              label: \"Cognitive Effects\",\r\n              placeholder: \"Select all methods that apply.\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <Widget\r\n            src=\"nearhorizon.near/widget/Inputs.MultiSelect\"\r\n            props={{\r\n              data: state.multisensoryEffects,\r\n              onChange: onMultiSensoryEffectsChange,\r\n              height: \"250px\",\r\n              options: props.substance.multisensoryEffects,\r\n              label: \"Multi-sensory Effects\",\r\n              placeholder: \"Select all methods that apply.\",\r\n            }}\r\n          />\r\n        </div>\r\n        <hr></hr>\r\n        <h5>Product Information</h5>\r\n        <p></p>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"productName\">\r\n            Product Name/Description\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"productName\"\r\n            value={state.productName}\r\n            onChange={onProductNameChange}\r\n            placeholder=\"Product Name/Description\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"brandName\">\r\n            Brand Name (if available)\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"brandName\"\r\n            value={state.brandName}\r\n            onChange={onBrandNameChange}\r\n            placeholder=\"Brand Name (if available)\"\r\n          />\r\n        </div>\r\n        <div></div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"batchNumber\">\r\n            Batch Number\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"batchNumber\"\r\n            value={state.batchNumber}\r\n            onChange={onBatchNumberChange}\r\n            placeholder=\"Batch Number\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label class=\"form-label\" for=\"link\">\r\n            Link to Product/Strain\r\n          </label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"link\"\r\n            type=\"url\"\r\n            value={state.link}\r\n            onChange={onLinkChange}\r\n            placeholder=\"Link to Product/Strain\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-3 row \">\r\n          <div className=\"col\">\r\n            <label>Photo of Product(s) Consumed</label>\r\n            <Widget\r\n              src=\"near/widget/ImageEditorTabs\"\r\n              props={{ image: state.logo, onChange: onLogoChange }}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label>Product Manufacturer Logo</label>\r\n            <Widget\r\n              src=\"near/widget/ImageEditorTabs\"\r\n              props={{ image: state.background, onChange: onBackgroundChange }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <hr></hr>\r\n        <div className=\"mb-3\">\r\n          <label for=\"hashtags\">\r\n            <p>\r\n              Hashtags:{\" \"}\r\n              {state.hashTags.length !== 0 &&\r\n                state.hashTags.map((item) => (\r\n                  <>\r\n                    <span className=\"badge text-bg-primary\">\r\n                      {item}{\" \"}\r\n                      <i\r\n                        className=\"bi bi-x ms-2 p-1\"\r\n                        onClick={() => onHashTagRemove(item)}\r\n                      ></i>\r\n                    </span>{\" \"}\r\n                  </>\r\n                ))}\r\n            </p>\r\n          </label>\r\n          <div className=\"mb-3 d-flex gap-3\">\r\n            <input\r\n              id=\"hashtags\"\r\n              value={state.tempHash}\r\n              onChange={onTempHashChange}\r\n              placeholder=\"New Response Tags\"\r\n            />\r\n            <button onClick={onHashTagAdd}>Add</button>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label for=\"organizer\">Form Creator: </label>\r\n            <a\r\n              href=\"https://opencann.near.social\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              opencann.near\r\n            </a>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label for=\"daoId\">DAO ID: </label>\r\n            <a\r\n              href=\"https://explorer.near.org/accounts/cannabis-genome.sputnik-dao.near\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              cannabis-genome.sputnik-dao.near\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <button onClick={handleNewResponse}>Submit Response</button>\r\n\r\n          <button onClick={clearFields}>Clear Fields</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn <ResponseForm />;\r\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/opencann.near/widget/ExperienceSurvey", "fact_widget_deployments_id": "7bb8e4d0de33bda4a1d31939fce7db54", "inserted_timestamp": "2023-09-14T21:21:13.142Z", "modified_timestamp": "2023-09-14T21:21:13.142Z", "__row_index": 2}