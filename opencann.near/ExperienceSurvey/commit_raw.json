{"tx_hash": "6AxSdgD6ZExCnoPA8dGsMthG1VxVaUduTbrZKwyGrpeE", "action_id_social": "2KS6Xv5EKu86MgCrA8Wy7ib7q4ip6sP2eJWoyXEhn1PP-0-widget", "block_id": 100924140, "block_timestamp": "2023-09-12T01:18:47.173Z", "signer_id": "opencann.near", "widget_name": "ExperienceSurvey", "source_code": "// Add tooltips to show long explanations on hover\nconst options = cannabisMethod.options ?? [\"smoke\", \"vapor\"];\n\nconst UUID = {\n  generate: (template) => {\n    if (typeof template !== \"string\") {\n      template = \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\";\n    }\n    return template.replace(/[xy]/g, (c) => {\n      var r = (Math.random() * 16) | 0;\n      var v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  },\n};\n\nconst getCurrentDate = () => {\n  const currentDate = new Date();\n\n  const year = currentDate.getFullYear();\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, \"0\"); // Months are 0-indexed\n  const day = currentDate.getDate().toString().padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n\nconst getCurrentTime = () => {\n  const currentDate = new Date();\n\n  const hours = currentDate.getHours().toString().padStart(2, \"0\");\n  const minutes = currentDate.getMinutes().toString().padStart(2, \"0\");\n\n  return `${hours}:${minutes}`;\n};\n\nconst isoTime = (date, time) => {\n  const temp = new Date(`${date} ${time}`);\n  const now = temp.toISOString();\n\n  return now.split(\"T\")[1];\n};\n\nconst isoDate = (date, time) => {\n  const temp = new Date(`${date} ${time}`);\n  const now = temp.toISOString();\n\n  return now.split(\"T\")[0];\n};\n\nconst accountId = context.accountId;\n\nif (!accountId) {\n  return \"Please connect your NEAR account\";\n}\n\nlet user_account = context.accountId;\n\nState.init({\n  id: UUID.generate(),\n  title: \"\",\n  substance: \"cannabis\",\n  cannabisMethod: [\"smoke\", \"vapor\"],\n  dose: \"\",\n  description: {\n    content: \"# New Response Description\",\n  },\n  otherSubstances: [\"\", \"\"],\n  setSetting: \"\",\n  physicalEffects: [\"\", \"\"],\n  visualEffects: [\"\", \"\"],\n  auditoryEffects: [\"\", \"\"],\n  cognitiveEffects: [\"\", \"\"],\n  multisensoryEffects: [\"\", \"\"],\n  productName: \"\",\n  brandName: \"\",\n  batchNumber: \"\",\n  start: getCurrentDate(),\n  startTime: getCurrentTime(),\n  end: getCurrentDate(),\n  endTime: getCurrentTime(),\n  location: \"\",\n  link: \"\",\n  organizer: user_account,\n  isAllDay: false,\n  category: \"\",\n  logo: null,\n  background: null,\n  customWidget: \"\",\n  daoId: \"cannabis-genome.sputnik-dao.near\",\n  tempHash: \"\",\n  hashTags: [],\n});\n\nconst onTitleChange = ({ target }) => {\n  State.update({ title: target.value });\n};\n\nconst onSubstanceChange = (target) => {\n  State.update({ substance: target });\n};\n\nconst onCannabisMethodChange = (target) => {\n  State.update({ cannabisMethod: target });\n};\n\nconst onDoseChange = (target) => {\n  State.update({ dose: target });\n};\n\nconst onDescriptionChange = (target) => {\n  State.update({ description: target });\n};\n\nconst onOtherSubstancesChange = (target) => {\n  State.update({ otherSubstances: target });\n};\n\nconst onSetSettingChange = (target) => {\n  State.update({ setSetting: target });\n};\n\nconst onPhysicalEffectsChange = (target) => {\n  State.update({ physicalEffects: target });\n};\n\nconst onVisuallEffectsChange = (target) => {\n  State.update({ visualEffects: target });\n};\n\nconst onAuditoryEffectsChange = (target) => {\n  State.update({ auditoryEffects: target });\n};\n\nconst onCognitiveEffectsChange = (target) => {\n  State.update({ cognitiveEffects: target });\n};\n\nconst onMultiSensoryEffectsChange = (target) => {\n  State.update({ multisensoryEffects: target });\n};\n\nconst onProductNameChange = (target) => {\n  State.update({ productName: target });\n};\n\nconst onBrandNameChange = (target) => {\n  State.update({ brandName: target });\n};\n\nconst onBatchNumberChange = (target) => {\n  State.update({ batchNumber: target });\n};\n\nconst onStartChange = ({ target }) => {\n  State.update({ start: target.value });\n};\n\nconst onStartTimeChange = ({ target }) => {\n  State.update({ startTime: target.value });\n};\n\nconst onEndChange = ({ target }) => {\n  State.update({ end: target.value });\n};\n\nconst onEndTimeChange = ({ target }) => {\n  State.update({ endTime: target.value });\n};\n\nconst onLocationChange = ({ target }) => {\n  State.update({ location: target.value });\n};\n\nconst onLinkChange = ({ target }) => {\n  State.update({ link: target.value });\n};\n\nconst onOrganizerChange = ({ target }) => {\n  State.update({ organizer: target.value });\n};\n\nconst onCategoryChange = ({ target }) => {\n  State.update({ category: target.value });\n};\n\nconst onIsAllDayChange = () => {\n  State.update({ isAllDay: !state.isAllDay });\n};\n\nconst onLogoChange = (target) => {\n  State.update({ logo: target });\n};\n\nconst onBackgroundChange = (target) => {\n  State.update({ background: target });\n};\n\nconst onTempHashChange = ({ target }) => {\n  State.update({ tempHash: target.value });\n};\n\nconst onHashTagAdd = () => {\n  State.update({ hashTags: [...state.hashTags, state.tempHash] });\n  State.update({ tempHash: \"\" });\n};\n\nconst onHashTagRemove = (target) => {\n  const newTags = state.hashTags.filter((item) => item !== target);\n  State.update({ hashTags: newTags });\n};\n\nconst onCustomWidgetChange = ({ target }) => {\n  State.update({ customWidget: target.value });\n};\n\nconst onDaoIDChange = ({ target }) => {\n  State.update({ daoId: target.value });\n};\n\nconst clearFields = () => {\n  State.update({\n    title: \"\",\n    substance: \"cannabis\",\n    cannabisMethod: [\"smoke\", \"vapor\"],\n    dose: \"\",\n    description: {\n      content: \"# New Response Description\",\n    },\n    otherSubstances: [\"\", \"\"],\n    setSetting: \"\",\n    physicalEffects: [\"\", \"\"],\n    visualEffects: [\"\", \"\"],\n    auditoryEffects: [\"\", \"\"],\n    cognitiveEffects: [\"\", \"\"],\n    multisensoryEffects: [\"\", \"\"],\n    productName: \"\",\n    brandName: \"\",\n    batchNumber: \"\",\n    start: getCurrentDate(),\n    startTime: getCurrentTime(),\n    end: getCurrentDate(),\n    endTime: getCurrentTime(),\n    location: \"\",\n    link: \"\",\n    organizer: user_account,\n    isAllDay: false,\n    category: \"\",\n    logo: null,\n    background: null,\n    customWidget: \"\",\n    daoId: \"cannabis-genome.sputnik-dao.near\",\n    tempHash: \"\",\n    hashTags: [],\n  });\n};\n\nconst createNewResponse = () => {\n  const newResponse = {\n    data: {\n      id: state.id,\n      title: state.title,\n      substance: state.substance,\n      cannabisMethod: state.method,\n      dose: state.dose,\n      description: state.description,\n      otherSubstances: state.otherSubstances,\n      setSetting: state.setSetting,\n      physicalEffects: state.physicalEffects,\n      visualEffects: state.visualEffects,\n      auditoryEffects: state.auditoryEffects,\n      cognitiveEffects: state.cognitiveEffects,\n      multisensoryEffects: state.multisensoryEffects,\n      productName: state.productName,\n      brandName: state.brandName,\n      batchNumber: state.batchNumber,\n      start: isoDate(state.start, state.startTime),\n      startTime: isoTime(state.start, state.startTime),\n      end: isoDate(state.end, state.endTime),\n      endTime: isoTime(state.end, state.endTime),\n      location: state.location,\n      link: state.link,\n      organizer: state.organizer,\n      isAllDay: state.isAllDay,\n      category: state.category,\n      logo: state.logo,\n      background: state.background,\n      hashTags: state.hashTags,\n    },\n    template: {\n      src: \"opencann.near/widget/ResponseView\",\n    },\n    type: \"every.near/type/response\",\n  };\n\n  return newResponse;\n};\n\nconst addResponse = (target) => {\n  const thingId = target.data.id;\n  // index new response\n  Social.set({\n    thing: {\n      [thingId]: target,\n    },\n    index: {\n      every: JSON.stringify({\n        key: \"every.near/type/response\",\n        value: {\n          type: \"every.near/type/response\",\n          id: thingId,\n        },\n      }),\n    },\n  });\n\n  State.update({ response: target });\n};\n\nconst handleNewResponse = () => {\n  const newResponse = {\n    data: {\n      id: state.id,\n      title: state.title,\n      substance: state.substance,\n      cannabisMethod: state.method,\n      dose: state.dose,\n      description: state.description,\n      otherSubstances: state.otherSubstances,\n      setSetting: state.setSetting,\n      physicalEffects: state.physicalEffects,\n      visualEffects: state.visualEffects,\n      auditoryEffects: state.auditoryEffects,\n      cognitiveEffects: state.cognitiveEffects,\n      multisensoryEffects: state.multisensoryEffects,\n      productName: state.productName,\n      brandName: state.brandName,\n      batchNumber: state.batchNumber,\n      start: isoDate(state.start, state.startTime),\n      startTime: isoTime(state.start, state.startTime),\n      end: isoDate(state.end, state.endTime),\n      endTime: isoTime(state.end, state.endTime),\n      location: state.location,\n      link: state.link,\n      organizer: state.organizer,\n      isAllDay: state.isAllDay,\n      category: state.category,\n      logo: state.logo,\n      background: state.background,\n      hashTags: state.hashTags,\n    },\n    template: {\n      src: \"itexpert120-contra.near/widget/ResponseView\",\n    },\n    type: \"every.near/type/Response\",\n  };\n\n  addResponse(newResponse);\n  clearFields();\n};\n\nconst ResponseForm = () => {\n  return (\n    <div className=\"container\">\n      <div>\n        <h5>\n          <a\n            href=\"https://www.opencann.net/#/near/widget/ProfileEditor\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Complete Your Profile Before You Begin\n          </a>\n        </h5>\n        <hr></hr>\n\n        <p>\n          Instructions: describe one (1) experience you had with cannabis.{\" \"}\n          <b>This form is meant to be anonymous</b>, so only include as much\n          detail as you feel comfortable sharing.\n        </p>\n\n        <hr></hr>\n\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"title\">\n            Give Your Report a Name\n          </label>\n          <input\n            class=\"form-control\"\n            id=\"title\"\n            value={state.title}\n            onChange={onTitleChange}\n            placeholder=\"New Response Title\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"cannabisMethod\">\n            How did you consume cannabis? (select all that apply)\n          </label>\n          <Widget\n            src=\"nearhorizon.near/widget/Inputs.Viewable.MultiSelect\"\n            props={{\n              data: state.cannabisMethod,\n              onChange: oncannabisMethodChange,\n              height: \"250px\",\n            }}\n          />\n        </div>\n        <div>Estimated Dose</div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"description\">\n            Describe Your Experience\n          </label>\n          <Widget\n            src=\"efiz.near/widget/every.markdown.create\"\n            props={{\n              data: state.description,\n              onChange: onDescriptionChange,\n              height: \"250px\",\n            }}\n          />\n        </div>\n        <div>Other Substances Taken</div>\n        <div>Set and Setting</div>\n        <div>Physical Effects</div>\n        <div>Visual Effects</div>\n        <div>Auditory Effects</div>\n        <div>Cognitive Effects</div>\n        <div>Multi-sensory Effects</div>\n        <div>Product Name/Description</div>\n        <div>Brand Name (if available)</div>\n        <div>Batch Number</div>\n        <div>Link to Product/Strain</div>\n        <div>Photo of Product(s) Consumed</div>\n        <div className=\"row mb-3\">\n          <div className=\"col\">\n            <label for=\"start\">Response Start Date</label>\n            <input\n              class=\"form-control\"\n              id=\"start\"\n              type=\"date\"\n              value={state.start}\n              onChange={onStartChange}\n            />\n          </div>\n          <div className=\"col\">\n            <label for=\"startTime\">Response Start Time</label>\n            <input\n              class=\"form-control\"\n              id=\"startTime\"\n              type=\"time\"\n              value={state.startTime}\n              onChange={onStartTimeChange}\n            />\n          </div>\n        </div>\n        <div className=\"row  mb-3\">\n          <div className=\"col\">\n            <label for=\"end\">Response End Date</label>\n            <input\n              class=\"form-control\"\n              id=\"end\"\n              type=\"date\"\n              value={state.end}\n              onChange={onEndChange}\n            />\n          </div>\n          <div className=\"col\">\n            <label for=\"endTime\">Response End Time</label>\n            <input\n              class=\"form-control\"\n              id=\"endTime\"\n              type=\"time\"\n              value={state.endTime}\n              onChange={onEndTimeChange}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"location\">\n            Response Location\n          </label>\n          <input\n            class=\"form-control\"\n            id=\"location\"\n            value={state.location}\n            onChange={onLocationChange}\n            placeholder=\"New Response Location\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"link\">\n            Response Link\n          </label>\n          <input\n            class=\"form-control\"\n            id=\"link\"\n            type=\"url\"\n            value={state.link}\n            onChange={onLinkChange}\n            placeholder=\"New Response Link\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"organizer\">\n            Response Organizer\n          </label>\n          <input\n            class=\"form-control\"\n            id=\"organizer\"\n            value={state.organizer}\n            onChange={onOrganizerChange}\n            placeholder=\"New Response Organizer\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <div class=\"form-check\">\n            <label class=\"form-check-label\" for=\"isAllDay\">\n              All Day Response\n            </label>\n            <input\n              value={state.isAllDay}\n              checked={state.isAllDay}\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"isAllDay\"\n              onChange={onIsAllDayChange}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"category\">\n            Response Category\n          </label>\n          <input\n            class=\"form-control\"\n            id=\"category\"\n            value={state.category}\n            onChange={onCategoryChange}\n            placeholder=\"New Response Category\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label class=\"form-label\" for=\"customWidget\">\n            Custom Response Card Source\n          </label>\n          <input\n            class=\"form-control\"\n            id=\"customWidget\"\n            value={state.customWidget}\n            onChange={onCustomWidgetChange}\n            placeholder=\"Custom Response Card Source\"\n          />\n        </div>\n        <div className=\"mb-3 row \">\n          <div className=\"col\">\n            <label>Logo Image</label>\n            <Widget\n              src=\"near/widget/ImageEditorTabs\"\n              props={{ image: state.logo, onChange: onLogoChange }}\n            />\n          </div>\n          <div className=\"col\">\n            <label>Background Image</label>\n            <Widget\n              src=\"near/widget/ImageEditorTabs\"\n              props={{ image: state.background, onChange: onBackgroundChange }}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label for=\"hashtags\">\n            <p>\n              Hashtags:{\" \"}\n              {state.hashTags.length !== 0 &&\n                state.hashTags.map((item) => (\n                  <>\n                    <span className=\"badge text-bg-primary\">\n                      {item}{\" \"}\n                      <i\n                        className=\"bi bi-x ms-2 p-1\"\n                        onClick={() => onHashTagRemove(item)}\n                      ></i>\n                    </span>{\" \"}\n                  </>\n                ))}\n            </p>\n          </label>\n          <div className=\"mb-3 d-flex gap-3\">\n            <input\n              id=\"hashtags\"\n              value={state.tempHash}\n              onChange={onTempHashChange}\n              placeholder=\"New Response Tags\"\n            />\n            <button onClick={onHashTagAdd}>Add</button>\n          </div>\n          <div className=\"mb-3\">\n            <label for=\"daoId\">DAO ID: </label>\n            <a\n              href=\"https://explorer.near.org/accounts/cannabis-genome.sputnik-dao.near\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              cannabis-genome.sputnik-dao.near\n            </a>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <button onClick={handleNewResponse}>Add Response</button>\n\n          <button onClick={clearFields}>Clear Fields</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nreturn <ResponseForm />;\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/opencann.near/widget/ExperienceSurvey", "fact_widget_deployments_id": "d91b03c8852fe5006841cb5e878b6750", "inserted_timestamp": "2023-09-12T03:02:03.207Z", "modified_timestamp": "2023-09-12T03:02:03.207Z", "__row_index": 6}