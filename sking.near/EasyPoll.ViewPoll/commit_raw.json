{"tx_hash": "AzT29RGG7SvJREETe29LKwvt3Nyx7VB2AFEcFTwcKYn", "action_id_social": "H6YjiNhDJnK5TJpLqoMXm2jbToT9TMrUgLF2USun9P8s-0-widget", "block_id": 95743044, "block_timestamp": "2023-07-05T07:12:49.912Z", "signer_id": "sking.near", "widget_name": "EasyPoll.ViewPoll", "source_code": "State.init({\n  showQuestionsByThisUser: false,\n  poll: {},\n  polls: [{}],\n  profile: {},\n  userAnswers: [],\n  pollAnswers: [],\n});\n\nif (!props.blockHeight) {\n  return \"Prop block height wasn't provided\";\n}\n\nconst widgetOwner = \"sking.near\";\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\nconst tabs = props.tabs;\nconst accountId = props.accountId ?? context.accountId;\nconst isHuman = props.isHuman;\nconst resultsHref = props.resultsHref ?? \"\";\n\nlet questionBlockHeight = Number(props.blockHeight);\n\nconst polls =\n  !props.previewInfo &&\n  Social.index(\"poll_question\", `question-v${indexVersion}`);\nif (JSON.stringify(polls) != JSON.stringify(state.polls)) {\n  State.update({ polls: polls });\n}\n\nif (!state.polls) {\n  return \"Loading\";\n} else {\n  const poll =\n    props.previewInfo ??\n    state.polls.find((q) => q.blockHeight == questionBlockHeight);\n\n  if (JSON.stringify(poll) != JSON.stringify(state.poll)) {\n    State.update({ poll: poll });\n  }\n\n  if (!state.poll) {\n    return \"Loading... \";\n  }\n}\n\nlet profile = Social.getr(`${state.poll.accountId}/profile`);\n\nif (JSON.stringify(profile) != JSON.stringify(state.profile)) {\n  State.update({ profile: profile });\n}\n\nlet answers = Social.index(\"poll_question\", `answer-v${indexVersion}`, {\n  accountId: accountId,\n});\nanswers = answers.filter(\n  (v) => Number(v.value.pollBlockHeight) == questionBlockHeight\n);\nif (JSON.stringify(answers) != JSON.stringify(state.userAnswers)) {\n  State.update({ userAnswers: answers });\n}\n\nconst isVerifiedHuman = (account) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: `${account}`,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\nconst getValidAnswersOnly = (input) => {\n  const {\n    value: { verifiedHumansOnly, endTimestamp, startTimestamp },\n  } = state.poll;\n\n  // should be only right poll\n  input = input.filter(\n    (v) => Number(v.value.pollBlockHeight) == questionBlockHeight\n  );\n  let filtered = input\n    // should be 1 per user\n    .map((e) => e[\"accountId\"])\n    .map((e, i, final) => final.indexOf(e) === i && i)\n    .filter((e) => input[e])\n    .map((e) => input[e])\n    //\n    .filter(async (v, i) => {\n      // should respect human only\n      if (verifiedHumansOnly && !isVerifiedHuman(v.accountId)) return false;\n      // should respect startTimestamp\n      if (v.value.timestamp < startTimestamp) return false;\n      // should respect endTimestamp\n      if (v.value.timestamp > endTimestamp) return false;\n\n      return true;\n    });\n\n  return filtered;\n};\n\nlet allAnswers = Social.index(\"poll_question\", `answer-v${indexVersion}`);\nif (!allAnswers) return \"Loading\";\nallAnswers = getValidAnswersOnly(allAnswers);\nif (JSON.stringify(allAnswers) != JSON.stringify(state.pollAnswers)) {\n  State.update({ pollAnswers: allAnswers });\n}\n\nreturn (\n  <>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.PollDetails`}\n      props={{\n        poll: state.poll,\n        profile,\n        widgetOwner,\n        blockHeight: questionBlockHeight,\n        questionsByCreator,\n        indexVersion,\n        href: tabs.VIEW_POLL.href + questionBlockHeight,\n        userAnswers: state.userAnswers,\n        isHuman,\n        pollAnswers: state.pollAnswers,\n        resultsHref,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.ViewPoll", "fact_widget_deployments_id": "59ba0d89412c1460e263b1f0603560ed", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 4}