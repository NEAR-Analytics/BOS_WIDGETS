{"tx_hash": "H2ydRyapFrRyeds2y9XWqfSrMBEy14Ag8eiXPVqsqUzb", "action_id_social": "3zeCoij3CsZbJZadX8YTp9wKSZeoM1P97Y4ohkCotkyP-0-widget", "block_id": 95772550, "block_timestamp": "2023-07-05T16:29:01.662Z", "signer_id": "sking.near", "widget_name": "EasyPoll.ViewPoll", "source_code": "const widgetOwner = props.widgetOwner ?? \"sking.near\";\nconst src = props.src;\nconst href = props.href;\nconst editHref = props.editHref;\nconst accountId = props.accountId ?? context.accountId;\nconst tabs = props.tabs;\nconst isHuman = props.isHuman;\nconst blockHeight = props.blockHeight ?? \"final\";\n\nif (!src) {\n  return \"Please provide poll src\";\n}\n\nconst poll = Social.get(`${src}`, blockHeight);\n\nif (!poll) {\n  return \"Loading...\";\n}\npoll = JSON.parse(poll);\npoll.accountId = src.split(\"/\")[0];\n\nlet profile = Social.getr(`${poll.accountId}/profile`);\n\nlet userAnswers = Social.index(\"easypoll_answer\", `${src}`, {\n  accountId: accountId,\n});\nif (!userAnswers) return \"Loading...\";\n\nlet allAnswers = Social.index(\"easypoll_answer\", `${src}`);\nif (!allAnswers) return \"Loading...\";\n\nconst isVerifiedHuman = (account) => {\n  const view = Near.view(\"registry.i-am-human.near\", \"sbt_tokens_by_owner\", {\n    account: `${account}`,\n    issuer: \"fractal.i-am-human.near\",\n  });\n  return view?.[0]?.[1]?.[0];\n};\nconst getValidAnswersOnly = (input) => {\n  const { verifiedHumansOnly, endTimestamp, startTimestamp } = poll;\n\n  // should be only right poll\n  let filtered = input\n    // should be 1 per user\n    .map((e) => e[\"accountId\"])\n    .map((e, i, final) => final.indexOf(e) === i && i)\n    .filter((e) => input[e])\n    .map((e) => input[e])\n    //\n    .filter(async (v, i) => {\n      // should respect human only\n      if (verifiedHumansOnly && !isVerifiedHuman(v.accountId)) return false;\n      // should respect startTimestamp\n      if (v.value.timestamp < startTimestamp) return false;\n      // should respect endTimestamp\n      if (v.value.timestamp > endTimestamp) return false;\n\n      return true;\n    });\n\n  return filtered;\n};\n\nif (!state) {\n  const filteredAnswers = getValidAnswersOnly(allAnswers);\n  State.init({ filteredAnswers });\n}\n\nreturn (\n  <>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.PollDetails`}\n      props={{\n        href: tabs.VIEW_POLL.href(src, blockHeight),\n        editHref: tabs.EDIT_POLL.href(src, blockHeight),\n        resultsHref: tabs.RESULTS.href(src, blockHeight),\n        deleteHref: tabs.DELETE_POLL.href(src, blockHeight),\n        widgetOwner,\n        blockHeight: blockHeight,\n        isHuman,\n        poll: poll,\n        profile,\n        userAnswers: userAnswers,\n        pollAnswers: state.filteredAnswers,\n        src,\n      }}\n    />\n  </>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.ViewPoll", "fact_widget_deployments_id": "413a52e408ac0d16b8250652f785f7cf", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 5}