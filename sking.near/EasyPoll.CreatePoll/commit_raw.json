{"tx_hash": "B5JQ8UkwLPGvQuXLaJBqgQejrXQbuy3GV5xc3joDpUe8", "action_id_social": "H4YyHu8mEPCFnWfNg6doNJ9GpwzJkBwnM56hNLNQWg8S-0-widget", "block_id": 95975128, "block_timestamp": "2023-07-08T07:11:16.029Z", "signer_id": "sking.near", "widget_name": "EasyPoll.CreatePoll", "source_code": "const widgetOwner = \"sking.near\";\nconst indexVersion = props.indexVersion ?? \"4.0.0\";\nconst src = props.src;\nconst blockHeight = props.blockHeight ?? \"final\";\nconst isEdit = src ? true : false;\nconst accountId = props.accountId ?? context.accountId;\n\nconst formatDBForState = (input) => {\n  let firstStep = Object.keys(input).reduce((obj, key) => {\n    if (key === \"startTimestamp\" || key === \"endTimestamp\") {\n      let date = new Date(input[key]);\n      let formattedDate = `${date.getFullYear()}-${(\n        \"0\" +\n        (date.getMonth() + 1)\n      ).slice(-2)}-${(\"0\" + date.getDate()).slice(-2)}T${(\n        \"0\" + date.getHours()\n      ).slice(-2)}:${(\"0\" + date.getMinutes()).slice(-2)}`;\n      obj[key] = { value: formattedDate };\n    } else if (key !== \"questions\" && key !== \"isDraft\") {\n      obj[key] = { value: input[key] };\n    }\n    return obj;\n  }, {});\n\n  let original_questions = input.questions.map((question, index) => {\n    let originalQuestion = {};\n    Object.keys(question).forEach((key) => {\n      originalQuestion[key] = {\n        value: question[key],\n      };\n    });\n    if (question.choicesOptions) {\n      originalQuestion.choicesOptions = {\n        value: question.choicesOptions,\n      };\n    }\n    return originalQuestion;\n  });\n\n  return { 1: firstStep, 2: { questions: original_questions } };\n};\n\nif (isEdit) {\n  const poll = Social.get(`${src}`, blockHeight);\n  if (!poll) {\n    return \"Loading...\";\n  }\n  poll = JSON.parse(poll);\n  poll.accountId = src.split(\"/\")[0];\n\n  State.init({ step: 1, answers: formatDBForState(poll) });\n} else {\n  State.init({\n    step: 1,\n    answers: answers ?? {},\n  });\n}\n\nconst steps = [\n  {\n    text: \"Poll Information\",\n    active: state.step === 1,\n  },\n  {\n    text: \"Questions\",\n    active: state.step === 2,\n  },\n];\n\nconst formatStateForDB = (input) => {\n  let firstStep = input[1];\n  let secondStep = input[2];\n\n  Object.keys(firstStep).forEach((key, index) => {\n    firstStep[key] = firstStep[key].value;\n  });\n\n  firstStep[\"startTimestamp\"] = new Date(\n    `${firstStep[\"startTimestamp\"]}`\n  ).getTime();\n  firstStep[\"endTimestamp\"] = new Date(\n    `${firstStep[\"endTimestamp\"]}`\n  ).getTime();\n  firstStep[\"timestamp\"] = Date.now();\n\n  let new_questions = [];\n  secondStep.questions.forEach((question, index) => {\n    Object.keys(question).forEach((key) => {\n      new_questions[index] = {\n        ...new_questions[index],\n        [key]: question[key].value,\n      };\n    });\n    if (question.questionType.value == 0) {\n      new_questions[index] = {\n        ...new_questions[index],\n        choicesOptions: [\"Yes\", \"No\"],\n      };\n    }\n    if (\n      question.questionType.value !== 1 &&\n      question.questionType.value !== 2\n    ) {\n      delete new_questions[index].minChoices;\n      delete new_questions[index].maxChoices;\n      delete new_questions[index].choicesOptions;\n    }\n    if (question.questionType.value !== 3) {\n      delete new_questions[index].label0;\n      delete new_questions[index].label5;\n      delete new_questions[index].label10;\n    }\n  });\n\n  return {\n    ...firstStep,\n    questions: new_questions,\n  };\n};\n\nconst onFinish = (isDraft) => {\n  const answers = state.answers;\n  const formattedAnswers = formatStateForDB(answers);\n\n  console.log(\"poll to commit\", formattedAnswers);\n\n  let uid =\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2);\n\n  if (isEdit) {\n    uid = src.split(\"/\")[3];\n  }\n\n  let key = isDraft ? \"draft\" : \"poll\";\n\n  const commit = {\n    [\"easypoll-\" + indexVersion]: {\n      [key]: {\n        [uid]: JSON.stringify(formattedAnswers),\n      },\n    },\n    index: {\n      [\"easypoll-\" + indexVersion]: JSON.stringify({\n        key: key,\n        value: uid,\n      }),\n    },\n  };\n\n  State.update({ commitLoading: true });\n  Social.set(commit, {\n    force: true,\n    onCommit: () => {\n      State.update({ commitLoading: false, committed: true });\n    },\n    onCancel: () => {\n      State.update({ commitLoading: false });\n    },\n  });\n};\n\nconst Container = styled.div`\n  border-radius: 21px;\n  padding: 24px;\n  box-shadow: rgba(0, 0, 0, 0.1) -4px 9px 25px -6px;\n  max-width: 860px;\n  margin: auto;\n  width: 100%;\n  background: #fafbfb;\n`;\n\nif (state.committed) {\n  return (\n    <Container\n      className=\"text-center d-flex flex-column align-items-center\"\n      style={{\n        padding: \"60px 12px\",\n        color: \"#239f28\",\n      }}\n    >\n      <i\n        className=\"bi bi-check-circle\"\n        style={{\n          fontSize: 60,\n        }}\n      />\n      <span\n        style={{\n          fontWeight: \"bold\",\n          fontsize: 15,\n          color: \"#239f28\",\n        }}\n      >\n        Posted Successfully!\n      </span>\n\n      <a\n        href={`#/${widgetOwner}/widget/EasyPoll?page=my_polls`}\n        className=\"text-decoration-none mt-4\"\n      >\n        <Widget\n          src=\"rubycop.near/widget/NDC.StyledComponents\"\n          props={{\n            Button: {\n              text: \"My Polls\",\n              icon: <i class=\"bi bi-person-fill\"></i>,\n              className:\n                \"primary dark d-flex flex-row-reverse gap-2 align-items-center\",\n              onClick: () => {},\n            },\n          }}\n        />\n      </a>\n    </Container>\n  );\n}\n\nif (state.commitLoading) {\n  return (\n    <Container\n      className=\"text-center\"\n      style={{\n        padding: \"60px 12px\",\n      }}\n    >\n      <Widget\n        src={`sking.near/widget/Common.Spinner`}\n        props={{\n          color1: \"#ffd50d\",\n          color2: \"#4f46e5\",\n        }}\n      />\n      <span\n        style={{\n          fontWeight: \"bold\",\n          fontsize: 15,\n          color: \"#4f46e5\",\n          textAlign: \"center\",\n        }}\n      >\n        Saving...\n      </span>\n    </Container>\n  );\n}\n\nreturn (\n  <Container>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.Header`}\n      props={{\n        steps,\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.Step${state.step}`}\n      props={{\n        onSubmit: (formState, isDraft) => {\n          State.update({\n            answers: {\n              ...state.answers,\n              [state.step]: formState,\n            },\n          });\n          if (steps.length === state.step) {\n            onFinish(isDraft ?? false);\n          }\n          State.update({\n            step: steps.length === state.step ? state.step : state.step + 1,\n          });\n        },\n        onPrev: (formState) => {\n          State.update({\n            answers: {\n              ...state.answers,\n              [state.step]: formState,\n            },\n            step: state.step - 1,\n          });\n        },\n        initialFormState: state.answers[state.step],\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.CreatePoll", "fact_widget_deployments_id": "e5b9ddc6402930bea7d9620d914320c6", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 7}