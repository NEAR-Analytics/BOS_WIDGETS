{"tx_hash": "AzT29RGG7SvJREETe29LKwvt3Nyx7VB2AFEcFTwcKYn", "action_id_social": "H6YjiNhDJnK5TJpLqoMXm2jbToT9TMrUgLF2USun9P8s-0-widget", "block_id": 95743044, "block_timestamp": "2023-07-05T07:12:49.912Z", "signer_id": "sking.near", "widget_name": "EasyPoll.CreatePoll", "source_code": "const widgetOwner = \"sking.near\";\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\n\nState.init({\n  step: 1,\n  answers: {},\n});\n\nconst steps = [\n  {\n    text: \"Poll Information\",\n    active: state.step === 1,\n  },\n  {\n    text: \"Questions\",\n    active: state.step === 2,\n  },\n];\n\nconst formatStateForDB = (input) => {\n  let firstStep = input[1];\n  let secondStep = input[2];\n\n  Object.keys(firstStep).forEach((key, index) => {\n    firstStep[key] = firstStep[key].value;\n  });\n\n  firstStep[\"startTimestamp\"] = new Date(\n    `${firstStep[\"startTimestamp\"]}`\n  ).getTime();\n  firstStep[\"endTimestamp\"] = new Date(\n    `${firstStep[\"endTimestamp\"]}`\n  ).getTime();\n  firstStep[\"timestamp\"] = Date.now();\n\n  let new_questions = [];\n  secondStep.questions.forEach((question, index) => {\n    Object.keys(question).forEach((key) => {\n      new_questions[index] = {\n        ...new_questions[index],\n        [key]: question[key].value,\n      };\n    });\n    if (question.questionType == \"0\") {\n      new_questions[index] = {\n        ...new_questions[index],\n        choicesOptions: [\"Yes\", \"No\"],\n      };\n    }\n  });\n\n  return {\n    ...firstStep,\n    questions: new_questions,\n    isDraft: false, // TODO: add save to Draft button in the UI\n  };\n};\n\nconst onFinish = () => {\n  const answers = state.answers;\n  const formattedAnswers = formatStateForDB(answers);\n\n  console.log(answers, formattedAnswers);\n\n  const commit = {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: `question-v${indexVersion}`,\n          value: formattedAnswers,\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n\n  State.update({ commitLoading: true });\n  Social.set(commit, {\n    force: true,\n    onCommit: () => {\n      State.update({ commitLoading: false, committed: true });\n    },\n    onCancel: () => {\n      State.update({ commitLoading: false });\n    },\n  });\n};\n\nconst Container = styled.div`\n  border-radius: 21px;\n  padding: 24px;\n  box-shadow: rgba(0, 0, 0, 0.1) -4px 9px 25px -6px;\n  max-width: 860px;\n  margin: auto;\n  width: 100%;\n  background: #fafbfb;\n`;\n\nif (state.committed) {\n  return (\n    <Container\n      className=\"text-center d-flex flex-column align-items-center\"\n      style={{\n        padding: \"60px 12px\",\n        color: \"#239f28\",\n      }}\n    >\n      <i\n        className=\"bi bi-check-circle\"\n        style={{\n          fontSize: 60,\n        }}\n      />\n      <span\n        style={{\n          fontWeight: \"bold\",\n          fontsize: 15,\n          color: \"#239f28\",\n        }}\n      >\n        Posted Successfully!\n      </span>\n\n      <a\n        href={`#/${widgetOwner}/widget/EasyPoll?page=my_polls`}\n        className=\"text-decoration-none mt-4\"\n      >\n        <Widget\n          src=\"rubycop.near/widget/NDC.StyledComponents\"\n          props={{\n            Button: {\n              text: \"My Polls\",\n              icon: <i class=\"bi bi-person-fill\"></i>,\n              className:\n                \"primary dark d-flex flex-row-reverse gap-2 align-items-center\",\n              onClick: () => {},\n            },\n          }}\n        />\n      </a>\n    </Container>\n  );\n}\n\nif (state.commitLoading) {\n  return (\n    <Container\n      className=\"text-center\"\n      style={{\n        padding: \"60px 12px\",\n      }}\n    >\n      <Widget\n        src={`sking.near/widget/Common.Spinner`}\n        props={{\n          color1: \"#ffd50d\",\n          color2: \"#4f46e5\",\n        }}\n      />\n      <span\n        style={{\n          fontWeight: \"bold\",\n          fontsize: 15,\n          color: \"#4f46e5\",\n          textAlign: \"center\",\n        }}\n      >\n        Saving...\n      </span>\n    </Container>\n  );\n}\n\nreturn (\n  <Container>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.Header`}\n      props={{\n        steps,\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.Step${state.step}`}\n      props={{\n        onSubmit: (formState) => {\n          State.update({\n            answers: {\n              ...state.answers,\n              [state.step]: formState,\n            },\n          });\n          if (steps.length === state.step) {\n            onFinish();\n          }\n          State.update({\n            step: steps.length === state.step ? state.step : state.step + 1,\n          });\n        },\n        onPrev: (formState) => {\n          State.update({\n            answers: {\n              ...state.answers,\n              [state.step]: formState,\n            },\n            step: state.step - 1,\n          });\n        },\n        initialFormState: state.answers[state.step],\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.CreatePoll", "fact_widget_deployments_id": "dbfa138a2dcc281d45cd51f24fc49b3c", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 0}