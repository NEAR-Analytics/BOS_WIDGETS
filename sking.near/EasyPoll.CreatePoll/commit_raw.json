{"tx_hash": "5grcCLfb4xJpcNKWBTUQJQsBRF2RT2XSj5FS18R8xuH4", "action_id_social": "5P49idHsiQnY5kBCQCSDdjDUFDBtv4xnTUp7DUtVxtta-0-widget", "block_id": 95656093, "block_timestamp": "2023-07-04T03:54:53.949Z", "signer_id": "sking.near", "widget_name": "EasyPoll.CreatePoll", "source_code": "const widgetOwner = \"sking.near\";\nconst indexVersion = props.indexVersion ?? \"3.2.0\";\n\nState.init({\n  step: 1,\n  answers: {},\n});\n\nconst steps = [\n  {\n    text: \"Poll Information\",\n    active: state.step === 1,\n  },\n  {\n    text: \"Questions\",\n    active: state.step === 2,\n  },\n];\n\nconst formatStateForDB = (input) => {\n  let firstStep = input[1];\n  let secondStep = input[2];\n\n  Object.keys(firstStep).forEach((key, index) => {\n    firstStep[key] = firstStep[key].value;\n  });\n\n  firstStep[\"startTimestamp\"] = new Date(\n    `${firstStep[\"startTimestamp\"]}`\n  ).getTime();\n  firstStep[\"endTimestamp\"] = new Date(\n    `${firstStep[\"endTimestamp\"]}`\n  ).getTime();\n  firstStep[\"timestamp\"] = Date.now();\n\n  let new_questions = [];\n  secondStep.questions.forEach((question, index) => {\n    Object.keys(question).forEach((key) => {\n      new_questions[index] = {\n        ...new_questions[index],\n        [key]: question[key].value,\n      };\n    });\n    if (question.questionType == \"0\") {\n      new_questions[index] = {\n        ...new_questions[index],\n        choicesOptions: [\"Yes\", \"No\"],\n      };\n    }\n  });\n\n  return {\n    ...firstStep,\n    questions: new_questions,\n    isDraft: false, // TODO: add save to Draft button in the UI\n  };\n};\n\nconst onFinish = () => {\n  const answers = state.answers;\n  const formattedAnswers = formatStateForDB(answers);\n\n  console.log(answers, formattedAnswers);\n\n  const commit = {\n    index: {\n      poll_question: JSON.stringify(\n        {\n          key: `question-v${indexVersion}`,\n          value: formattedAnswers,\n        },\n        undefined,\n        0\n      ),\n    },\n  };\n\n  State.update({ commitLoading: true });\n  Social.set(commit, {\n    force: true,\n    onCommit: () => {\n      State.update({ commitLoading: false, committed: true });\n    },\n    onCancel: () => {\n      State.update({ commitLoading: false });\n    },\n  });\n};\n\nconst Container = styled.div`\n  border-radius: 21px;\n  padding: 24px;\n  box-shadow: rgba(0, 0, 0, 0.1) -4px 9px 25px -6px;\n  max-width: 860px;\n  margin: auto;\n  width: 100%;\n  background: #fafbfb;\n`;\nreturn (\n  <Container>\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.Header`}\n      props={{\n        steps,\n      }}\n    />\n    <Widget\n      src={`${widgetOwner}/widget/EasyPoll.CreatePoll.Step${state.step}`}\n      props={{\n        onSubmit: (formState) => {\n          State.update({\n            answers: {\n              ...state.answers,\n              [state.step]: formState,\n            },\n          });\n          if (steps.length === state.step) {\n            onFinish();\n          }\n          State.update({\n            step: steps.length === state.step ? state.step : state.step + 1,\n          });\n        },\n        onPrev: (formState) => {\n          State.update({\n            answers: {\n              ...state.answers,\n              [state.step]: formState,\n            },\n            step: state.step - 1,\n          });\n        },\n        initialFormState: state.answers[state.step],\n      }}\n    />\n  </Container>\n);\n", "metadata": null, "branch": null, "widget_modules_used": null, "widget_url": "https://near.social/#/sking.near/widget/EasyPoll.CreatePoll", "fact_widget_deployments_id": "5ed4bd25c73bbd93d60d2d00ca30445a", "inserted_timestamp": "2024-03-07T05:24:05.087Z", "modified_timestamp": "2024-03-07T05:24:05.087Z", "__row_index": 6}